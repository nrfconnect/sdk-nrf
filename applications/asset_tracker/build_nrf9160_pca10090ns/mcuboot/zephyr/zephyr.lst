
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return 0;
}

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   0:	20005338 	.word	0x20005338
   4:	0000215d 	.word	0x0000215d
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   8:	000058a9 	.word	0x000058a9
   c:	00002059 	.word	0x00002059
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
  10:	00002059 	.word	0x00002059
  14:	00002059 	.word	0x00002059
  18:	00002059 	.word	0x00002059
  1c:	00002059 	.word	0x00002059
		errno = err;
		return NULL;
	}

	return fd_entry->obj;
  20:	00002059 	.word	0x00002059
}
  24:	00002059 	.word	0x00002059
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  28:	00002059 	.word	0x00002059
		return NULL;
  2c:	0000202d 	.word	0x0000202d
		return NULL;
  30:	00002059 	.word	0x00002059
  34:	00002059 	.word	0x00002059
  38:	00001fd9 	.word	0x00001fd9
  3c:	00005881 	.word	0x00005881

00000040 <_irq_vector_table>:
  40:	00002089 00002089 00002089 00002089     . ... ... ... ..
  50:	00002089 00002089 00002089 00002089     . ... ... ... ..
  60:	00002089 00002089 00002089 00002089     . ... ... ... ..
  70:	00002089 00002089 00002089 00002089     . ... ... ... ..
  80:	00002089 00002089 00002089 00002089     . ... ... ... ..
  90:	00002089 00002089 00002089 00002089     . ... ... ... ..
  a0:	00002089 00002089 00002089 00002089     . ... ... ... ..
  b0:	00002089 00002089 00002089 00002089     . ... ... ... ..
  c0:	00002089 00002089 00002089 00002089     . ... ... ... ..
  d0:	00002089 00002089 00002089 00002089     . ... ... ... ..
  e0:	00002089 00002089 00002089 00002089     . ... ... ... ..
  f0:	00002089 00002089 00002089 00002089     . ... ... ... ..
 100:	00002089 00002089 00002089 00002089     . ... ... ... ..
 110:	00002089 00002089 00002089 00002089     . ... ... ... ..
 120:	00002089 00002089 00002089 00002089     . ... ... ... ..
 130:	00002089 00002089 00002089 00002089     . ... ... ... ..
 140:	00002089                                . ..

Disassembly of section _TEXT_SECTION_NAME_2:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b97c 	b.w	454 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	468c      	mov	ip, r1
     17a:	9d08      	ldr	r5, [sp, #32]
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d14a      	bne.n	21a <CONFIG_FW_INFO_OFFSET+0x1a>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d962      	bls.n	250 <CONFIG_FW_INFO_OFFSET+0x50>
     18a:	fab2 f682 	clz	r6, r2
     18e:	b14e      	cbz	r6, 1a4 <__udivmoddi4+0x30>
     190:	f1c6 0e20 	rsb	lr, r6, #32
     194:	fa01 f306 	lsl.w	r3, r1, r6
     198:	40b7      	lsls	r7, r6
     19a:	40b4      	lsls	r4, r6
     19c:	fa20 fe0e 	lsr.w	lr, r0, lr
     1a0:	ea4e 0a03 	orr.w	sl, lr, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	0c23      	lsrs	r3, r4, #16
     1aa:	fa1f f987 	uxth.w	r9, r7
     1ae:	fbba fef8 	udiv	lr, sl, r8
     1b2:	fb08 aa1e 	mls	sl, r8, lr, sl
     1b6:	fb0e f209 	mul.w	r2, lr, r9
     1ba:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     1be:	429a      	cmp	r2, r3
     1c0:	d90b      	bls.n	1da <__udivmoddi4+0x66>
     1c2:	18fb      	adds	r3, r7, r3
     1c4:	f10e 31ff 	add.w	r1, lr, #4294967295
     1c8:	bf2c      	ite	cs
     1ca:	2001      	movcs	r0, #1
     1cc:	2000      	movcc	r0, #0
     1ce:	429a      	cmp	r2, r3
     1d0:	d902      	bls.n	1d8 <__udivmoddi4+0x64>
     1d2:	2800      	cmp	r0, #0
     1d4:	f000 812a 	beq.w	42c <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x2c>
     1d8:	468e      	mov	lr, r1
     1da:	1a9a      	subs	r2, r3, r2
     1dc:	b2a3      	uxth	r3, r4
     1de:	fbb2 f0f8 	udiv	r0, r2, r8
     1e2:	fb08 2210 	mls	r2, r8, r0, r2
     1e6:	fb00 f909 	mul.w	r9, r0, r9
     1ea:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     1ee:	45a1      	cmp	r9, r4
     1f0:	d907      	bls.n	202 <CONFIG_FW_INFO_OFFSET+0x2>
     1f2:	193c      	adds	r4, r7, r4
     1f4:	f100 33ff 	add.w	r3, r0, #4294967295
     1f8:	d202      	bcs.n	200 <CONFIG_FW_INFO_OFFSET>
     1fa:	45a1      	cmp	r9, r4
     1fc:	f200 8110 	bhi.w	420 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x20>
     200:	4618      	mov	r0, r3
     202:	eba4 0409 	sub.w	r4, r4, r9
     206:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20a:	2100      	movs	r1, #0
     20c:	b11d      	cbz	r5, 216 <CONFIG_FW_INFO_OFFSET+0x16>
     20e:	40f4      	lsrs	r4, r6
     210:	2300      	movs	r3, #0
     212:	e9c5 4300 	strd	r4, r3, [r5]
     216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21a:	428b      	cmp	r3, r1
     21c:	d908      	bls.n	230 <CONFIG_FW_INFO_OFFSET+0x30>
     21e:	2d00      	cmp	r5, #0
     220:	f000 80f2 	beq.w	408 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x8>
     224:	2100      	movs	r1, #0
     226:	e9c5 0c00 	strd	r0, ip, [r5]
     22a:	4608      	mov	r0, r1
     22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     230:	fab3 f183 	clz	r1, r3
     234:	2900      	cmp	r1, #0
     236:	d14e      	bne.n	2d6 <CONFIG_LTE_NETWORK_TIMEOUT+0x7e>
     238:	4563      	cmp	r3, ip
     23a:	f0c0 80e8 	bcc.w	40e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xe>
     23e:	4282      	cmp	r2, r0
     240:	f240 80e5 	bls.w	40e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xe>
     244:	4608      	mov	r0, r1
     246:	2d00      	cmp	r5, #0
     248:	d0e5      	beq.n	216 <CONFIG_FW_INFO_OFFSET+0x16>
     24a:	e9c5 4a00 	strd	r4, sl, [r5]
     24e:	e7e2      	b.n	216 <CONFIG_FW_INFO_OFFSET+0x16>
     250:	b902      	cbnz	r2, 254 <CONFIG_FW_INFO_OFFSET+0x54>
     252:	deff      	udf	#255	; 0xff
     254:	fab2 f682 	clz	r6, r2
     258:	2e00      	cmp	r6, #0
     25a:	f040 8099 	bne.w	390 <CONFIG_LTE_NETWORK_TIMEOUT+0x138>
     25e:	1a8b      	subs	r3, r1, r2
     260:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     264:	fa1f f882 	uxth.w	r8, r2
     268:	2101      	movs	r1, #1
     26a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     26e:	fbb3 f2fe 	udiv	r2, r3, lr
     272:	fb0e 3012 	mls	r0, lr, r2, r3
     276:	fb08 f902 	mul.w	r9, r8, r2
     27a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     27e:	45e1      	cmp	r9, ip
     280:	d908      	bls.n	294 <CONFIG_LTE_NETWORK_TIMEOUT+0x3c>
     282:	eb17 0c0c 	adds.w	ip, r7, ip
     286:	f102 33ff 	add.w	r3, r2, #4294967295
     28a:	d202      	bcs.n	292 <CONFIG_LTE_NETWORK_TIMEOUT+0x3a>
     28c:	45e1      	cmp	r9, ip
     28e:	f200 80ca 	bhi.w	426 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x26>
     292:	461a      	mov	r2, r3
     294:	ebac 0c09 	sub.w	ip, ip, r9
     298:	b2a3      	uxth	r3, r4
     29a:	fbbc f0fe 	udiv	r0, ip, lr
     29e:	fb0e cc10 	mls	ip, lr, r0, ip
     2a2:	fb08 f800 	mul.w	r8, r8, r0
     2a6:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     2aa:	45a0      	cmp	r8, r4
     2ac:	d90e      	bls.n	2cc <CONFIG_LTE_NETWORK_TIMEOUT+0x74>
     2ae:	193c      	adds	r4, r7, r4
     2b0:	f100 33ff 	add.w	r3, r0, #4294967295
     2b4:	bf2c      	ite	cs
     2b6:	f04f 0c01 	movcs.w	ip, #1
     2ba:	f04f 0c00 	movcc.w	ip, #0
     2be:	45a0      	cmp	r8, r4
     2c0:	d903      	bls.n	2ca <CONFIG_LTE_NETWORK_TIMEOUT+0x72>
     2c2:	f1bc 0f00 	cmp.w	ip, #0
     2c6:	f000 80a8 	beq.w	41a <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x1a>
     2ca:	4618      	mov	r0, r3
     2cc:	eba4 0408 	sub.w	r4, r4, r8
     2d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     2d4:	e79a      	b.n	20c <CONFIG_FW_INFO_OFFSET+0xc>
     2d6:	f1c1 0420 	rsb	r4, r1, #32
     2da:	408b      	lsls	r3, r1
     2dc:	fa02 fe01 	lsl.w	lr, r2, r1
     2e0:	fa0c f601 	lsl.w	r6, ip, r1
     2e4:	40e2      	lsrs	r2, r4
     2e6:	fa20 f704 	lsr.w	r7, r0, r4
     2ea:	fa2c fc04 	lsr.w	ip, ip, r4
     2ee:	fa00 f801 	lsl.w	r8, r0, r1
     2f2:	4313      	orrs	r3, r2
     2f4:	433e      	orrs	r6, r7
     2f6:	0c1f      	lsrs	r7, r3, #16
     2f8:	0c32      	lsrs	r2, r6, #16
     2fa:	fa1f f983 	uxth.w	r9, r3
     2fe:	fbbc f0f7 	udiv	r0, ip, r7
     302:	fb07 cc10 	mls	ip, r7, r0, ip
     306:	fb00 fa09 	mul.w	sl, r0, r9
     30a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     30e:	45e2      	cmp	sl, ip
     310:	d908      	bls.n	324 <CONFIG_LTE_NETWORK_TIMEOUT+0xcc>
     312:	eb13 0c0c 	adds.w	ip, r3, ip
     316:	f100 32ff 	add.w	r2, r0, #4294967295
     31a:	d202      	bcs.n	322 <CONFIG_LTE_NETWORK_TIMEOUT+0xca>
     31c:	45e2      	cmp	sl, ip
     31e:	f200 8089 	bhi.w	434 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x34>
     322:	4610      	mov	r0, r2
     324:	ebac 0c0a 	sub.w	ip, ip, sl
     328:	b2b6      	uxth	r6, r6
     32a:	fbbc faf7 	udiv	sl, ip, r7
     32e:	fb07 cc1a 	mls	ip, r7, sl, ip
     332:	fb0a f909 	mul.w	r9, sl, r9
     336:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     33a:	4591      	cmp	r9, r2
     33c:	d906      	bls.n	34c <CONFIG_LTE_NETWORK_TIMEOUT+0xf4>
     33e:	189a      	adds	r2, r3, r2
     340:	f10a 36ff 	add.w	r6, sl, #4294967295
     344:	d201      	bcs.n	34a <CONFIG_LTE_NETWORK_TIMEOUT+0xf2>
     346:	4591      	cmp	r9, r2
     348:	d87a      	bhi.n	440 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x40>
     34a:	46b2      	mov	sl, r6
     34c:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     350:	eba2 0209 	sub.w	r2, r2, r9
     354:	fba0 670e 	umull	r6, r7, r0, lr
     358:	42ba      	cmp	r2, r7
     35a:	46b4      	mov	ip, r6
     35c:	46b9      	mov	r9, r7
     35e:	d302      	bcc.n	366 <CONFIG_LTE_NETWORK_TIMEOUT+0x10e>
     360:	d107      	bne.n	372 <CONFIG_LTE_NETWORK_TIMEOUT+0x11a>
     362:	45b0      	cmp	r8, r6
     364:	d205      	bcs.n	372 <CONFIG_LTE_NETWORK_TIMEOUT+0x11a>
     366:	ebb6 0c0e 	subs.w	ip, r6, lr
     36a:	eb67 0303 	sbc.w	r3, r7, r3
     36e:	3801      	subs	r0, #1
     370:	4699      	mov	r9, r3
     372:	2d00      	cmp	r5, #0
     374:	d06b      	beq.n	44e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x4e>
     376:	ebb8 030c 	subs.w	r3, r8, ip
     37a:	eb62 0209 	sbc.w	r2, r2, r9
     37e:	fa02 f404 	lsl.w	r4, r2, r4
     382:	40cb      	lsrs	r3, r1
     384:	40ca      	lsrs	r2, r1
     386:	2100      	movs	r1, #0
     388:	431c      	orrs	r4, r3
     38a:	e9c5 4200 	strd	r4, r2, [r5]
     38e:	e742      	b.n	216 <CONFIG_FW_INFO_OFFSET+0x16>
     390:	40b7      	lsls	r7, r6
     392:	f1c6 0220 	rsb	r2, r6, #32
     396:	fa01 f306 	lsl.w	r3, r1, r6
     39a:	40b4      	lsls	r4, r6
     39c:	fa21 fc02 	lsr.w	ip, r1, r2
     3a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3a4:	fa20 f202 	lsr.w	r2, r0, r2
     3a8:	fa1f f887 	uxth.w	r8, r7
     3ac:	fbbc f1fe 	udiv	r1, ip, lr
     3b0:	431a      	orrs	r2, r3
     3b2:	fb0e cc11 	mls	ip, lr, r1, ip
     3b6:	fb01 f008 	mul.w	r0, r1, r8
     3ba:	0c13      	lsrs	r3, r2, #16
     3bc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     3c0:	4560      	cmp	r0, ip
     3c2:	d907      	bls.n	3d4 <CONFIG_LTE_NETWORK_TIMEOUT+0x17c>
     3c4:	eb17 0c0c 	adds.w	ip, r7, ip
     3c8:	f101 33ff 	add.w	r3, r1, #4294967295
     3cc:	d201      	bcs.n	3d2 <CONFIG_LTE_NETWORK_TIMEOUT+0x17a>
     3ce:	4560      	cmp	r0, ip
     3d0:	d833      	bhi.n	43a <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x3a>
     3d2:	4619      	mov	r1, r3
     3d4:	ebac 0c00 	sub.w	ip, ip, r0
     3d8:	b292      	uxth	r2, r2
     3da:	fbbc f0fe 	udiv	r0, ip, lr
     3de:	fb0e cc10 	mls	ip, lr, r0, ip
     3e2:	fb00 f308 	mul.w	r3, r0, r8
     3e6:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ea:	4563      	cmp	r3, ip
     3ec:	d907      	bls.n	3fe <CONFIG_SENSOR_SIM_TRIGGER_TIMER_MSEC+0x16>
     3ee:	eb17 0c0c 	adds.w	ip, r7, ip
     3f2:	f100 32ff 	add.w	r2, r0, #4294967295
     3f6:	d201      	bcs.n	3fc <CONFIG_SENSOR_SIM_TRIGGER_TIMER_MSEC+0x14>
     3f8:	4563      	cmp	r3, ip
     3fa:	d825      	bhi.n	448 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x48>
     3fc:	4610      	mov	r0, r2
     3fe:	ebac 0303 	sub.w	r3, ip, r3
     402:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     406:	e730      	b.n	26a <CONFIG_LTE_NETWORK_TIMEOUT+0x12>
     408:	4629      	mov	r1, r5
     40a:	4628      	mov	r0, r5
     40c:	e703      	b.n	216 <CONFIG_FW_INFO_OFFSET+0x16>
     40e:	1a84      	subs	r4, r0, r2
     410:	eb6c 0303 	sbc.w	r3, ip, r3
     414:	2001      	movs	r0, #1
     416:	469a      	mov	sl, r3
     418:	e715      	b.n	246 <CONFIG_FW_INFO_OFFSET+0x46>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e755      	b.n	2cc <CONFIG_LTE_NETWORK_TIMEOUT+0x74>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ed      	b.n	202 <CONFIG_FW_INFO_OFFSET+0x2>
     426:	3a02      	subs	r2, #2
     428:	44bc      	add	ip, r7
     42a:	e733      	b.n	294 <CONFIG_LTE_NETWORK_TIMEOUT+0x3c>
     42c:	f1ae 0e02 	sub.w	lr, lr, #2
     430:	443b      	add	r3, r7
     432:	e6d2      	b.n	1da <__udivmoddi4+0x66>
     434:	3802      	subs	r0, #2
     436:	449c      	add	ip, r3
     438:	e774      	b.n	324 <CONFIG_LTE_NETWORK_TIMEOUT+0xcc>
     43a:	3902      	subs	r1, #2
     43c:	44bc      	add	ip, r7
     43e:	e7c9      	b.n	3d4 <CONFIG_LTE_NETWORK_TIMEOUT+0x17c>
     440:	f1aa 0a02 	sub.w	sl, sl, #2
     444:	441a      	add	r2, r3
     446:	e781      	b.n	34c <CONFIG_LTE_NETWORK_TIMEOUT+0xf4>
     448:	3802      	subs	r0, #2
     44a:	44bc      	add	ip, r7
     44c:	e7d7      	b.n	3fe <CONFIG_SENSOR_SIM_TRIGGER_TIMER_MSEC+0x16>
     44e:	4629      	mov	r1, r5
     450:	e6e1      	b.n	216 <CONFIG_FW_INFO_OFFSET+0x16>
     452:	bf00      	nop

00000454 <__aeabi_idiv0>:
     454:	4770      	bx	lr
     456:	bf00      	nop

00000458 <main>:
    ((void (*)(void))start)();
}
#endif

void main(void)
{
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	b084      	sub	sp, #16
    struct boot_rsp rsp;
    int rc;

    BOOT_LOG_INF("Starting bootloader");
     45c:	f04f 0000 	mov.w	r0, #0
     460:	2303      	movs	r3, #3
     462:	f363 0002 	bfi	r0, r3, #0, #3
     466:	f36f 00c5 	bfc	r0, #3, #3
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     46a:	4d30      	ldr	r5, [pc, #192]	; (52c <CONFIG_MQTT_KEEPALIVE+0x7c>)
     46c:	4b30      	ldr	r3, [pc, #192]	; (530 <CONFIG_MQTT_KEEPALIVE+0x80>)
     46e:	1b5b      	subs	r3, r3, r5
     470:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     474:	f363 108f 	bfi	r0, r3, #6, #10
     478:	492e      	ldr	r1, [pc, #184]	; (534 <CONFIG_MQTT_KEEPALIVE+0x84>)
     47a:	f004 ff91 	bl	53a0 <log_string_sync>

    os_heap_init();
     47e:	f000 f897 	bl	5b0 <os_heap_init>

#if (!defined(CONFIG_XTENSA) && defined(DT_FLASH_DEV_NAME))
    if (!flash_device_get_binding(DT_FLASH_DEV_NAME)) {
     482:	482d      	ldr	r0, [pc, #180]	; (538 <CONFIG_MQTT_KEEPALIVE+0x88>)
     484:	f000 f864 	bl	550 <flash_device_get_binding>
     488:	b1a0      	cbz	r0, 4b4 <CONFIG_MQTT_KEEPALIVE+0x4>
    BOOT_LOG_INF("Waiting for USB DFU");
    wait_for_usb_dfu();
    BOOT_LOG_INF("USB DFU wait time elapsed");
#endif

    rc = boot_go(&rsp);
     48a:	a801      	add	r0, sp, #4
     48c:	f000 fe78 	bl	1180 <boot_go>
    if (rc != 0) {
     490:	b300      	cbz	r0, 4d4 <CONFIG_MQTT_KEEPALIVE+0x24>
        BOOT_LOG_ERR("Unable to find bootable image");
     492:	f04f 0000 	mov.w	r0, #0
     496:	2301      	movs	r3, #1
     498:	f363 0002 	bfi	r0, r3, #0, #3
     49c:	f36f 00c5 	bfc	r0, #3, #3
     4a0:	4b23      	ldr	r3, [pc, #140]	; (530 <CONFIG_MQTT_KEEPALIVE+0x80>)
     4a2:	1b5b      	subs	r3, r3, r5
     4a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4a8:	f363 108f 	bfi	r0, r3, #6, #10
     4ac:	4923      	ldr	r1, [pc, #140]	; (53c <CONFIG_MQTT_KEEPALIVE+0x8c>)
     4ae:	f004 ff77 	bl	53a0 <log_string_sync>
     4b2:	e7fe      	b.n	4b2 <CONFIG_MQTT_KEEPALIVE+0x2>
        BOOT_LOG_ERR("Flash device %s not found", DT_FLASH_DEV_NAME);
     4b4:	2301      	movs	r3, #1
     4b6:	f363 0002 	bfi	r0, r3, #0, #3
     4ba:	f36f 00c5 	bfc	r0, #3, #3
     4be:	4b1c      	ldr	r3, [pc, #112]	; (530 <CONFIG_MQTT_KEEPALIVE+0x80>)
     4c0:	1b5b      	subs	r3, r3, r5
     4c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4c6:	f363 108f 	bfi	r0, r3, #6, #10
     4ca:	4a1b      	ldr	r2, [pc, #108]	; (538 <CONFIG_MQTT_KEEPALIVE+0x88>)
     4cc:	491c      	ldr	r1, [pc, #112]	; (540 <CONFIG_MQTT_KEEPALIVE+0x90>)
     4ce:	f004 ff67 	bl	53a0 <log_string_sync>
     4d2:	e7fe      	b.n	4d2 <CONFIG_MQTT_KEEPALIVE+0x22>
        while (1)
            ;
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4d4:	2603      	movs	r6, #3
     4d6:	f04f 0000 	mov.w	r0, #0
     4da:	f366 0002 	bfi	r0, r6, #0, #3
     4de:	f36f 00c5 	bfc	r0, #3, #3
     4e2:	4c13      	ldr	r4, [pc, #76]	; (530 <CONFIG_MQTT_KEEPALIVE+0x80>)
     4e4:	1b64      	subs	r4, r4, r5
     4e6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     4ea:	f364 108f 	bfi	r0, r4, #6, #10
     4ee:	9a03      	ldr	r2, [sp, #12]
     4f0:	4914      	ldr	r1, [pc, #80]	; (544 <CONFIG_MQTT_KEEPALIVE+0x94>)
     4f2:	f004 ff55 	bl	53a0 <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     4f6:	f04f 0000 	mov.w	r0, #0
     4fa:	f366 0002 	bfi	r0, r6, #0, #3
     4fe:	f36f 00c5 	bfc	r0, #3, #3
     502:	f364 108f 	bfi	r0, r4, #6, #10
     506:	4910      	ldr	r1, [pc, #64]	; (548 <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x2>)
     508:	f004 ff4a 	bl	53a0 <log_string_sync>
    do_boot(&rsp);
     50c:	a801      	add	r0, sp, #4
     50e:	f003 ff8b 	bl	4428 <do_boot>

    BOOT_LOG_ERR("Never should get here");
     512:	f04f 0000 	mov.w	r0, #0
     516:	2301      	movs	r3, #1
     518:	f363 0002 	bfi	r0, r3, #0, #3
     51c:	f36f 00c5 	bfc	r0, #3, #3
     520:	f364 108f 	bfi	r0, r4, #6, #10
     524:	4909      	ldr	r1, [pc, #36]	; (54c <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x6>)
     526:	f004 ff3b 	bl	53a0 <log_string_sync>
     52a:	e7fe      	b.n	52a <CONFIG_MQTT_KEEPALIVE+0x7a>
     52c:	00007f44 	.word	0x00007f44
     530:	00007f4c 	.word	0x00007f4c
     534:	00007f98 	.word	0x00007f98
     538:	00007fac 	.word	0x00007fac
     53c:	00007fdc 	.word	0x00007fdc
     540:	00007fc0 	.word	0x00007fc0
     544:	00007ffc 	.word	0x00007ffc
     548:	00008028 	.word	0x00008028
     54c:	00008048 	.word	0x00008048

00000550 <flash_device_get_binding>:
#endif

static struct device *flash_dev;

struct device *flash_device_get_binding(char *dev_name)
{
     550:	b508      	push	{r3, lr}
    if (!flash_dev) {
     552:	4b05      	ldr	r3, [pc, #20]	; (568 <flash_device_get_binding+0x18>)
     554:	681b      	ldr	r3, [r3, #0]
     556:	b113      	cbz	r3, 55e <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     558:	4b03      	ldr	r3, [pc, #12]	; (568 <flash_device_get_binding+0x18>)
     55a:	6818      	ldr	r0, [r3, #0]
     55c:	bd08      	pop	{r3, pc}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     55e:	f003 fd2b 	bl	3fb8 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     562:	4b01      	ldr	r3, [pc, #4]	; (568 <flash_device_get_binding+0x18>)
     564:	6018      	str	r0, [r3, #0]
     566:	e7f7      	b.n	558 <flash_device_get_binding+0x8>
     568:	20000008 	.word	0x20000008

0000056c <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     56c:	b910      	cbnz	r0, 574 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     56e:	2000      	movs	r0, #0
     570:	6008      	str	r0, [r1, #0]
    return 0;
}
     572:	4770      	bx	lr
{
     574:	b508      	push	{r3, lr}
     576:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     578:	f04f 0000 	mov.w	r0, #0
     57c:	2301      	movs	r3, #1
     57e:	f363 0002 	bfi	r0, r3, #0, #3
     582:	f36f 00c5 	bfc	r0, #3, #3
     586:	4b07      	ldr	r3, [pc, #28]	; (5a4 <flash_device_base+0x38>)
     588:	4907      	ldr	r1, [pc, #28]	; (5a8 <flash_device_base+0x3c>)
     58a:	1a5b      	subs	r3, r3, r1
     58c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     590:	f363 108f 	bfi	r0, r3, #6, #10
     594:	2300      	movs	r3, #0
     596:	4905      	ldr	r1, [pc, #20]	; (5ac <flash_device_base+0x40>)
     598:	f004 ff02 	bl	53a0 <log_string_sync>
        return -EINVAL;
     59c:	f06f 0015 	mvn.w	r0, #21
}
     5a0:	bd08      	pop	{r3, pc}
     5a2:	bf00      	nop
     5a4:	00007f4c 	.word	0x00007f4c
     5a8:	00007f44 	.word	0x00007f44
     5ac:	00008068 	.word	0x00008068

000005b0 <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     5b0:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5b2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5b6:	4802      	ldr	r0, [pc, #8]	; (5c0 <os_heap_init+0x10>)
     5b8:	f002 fe30 	bl	321c <mbedtls_memory_buffer_alloc_init>
}
     5bc:	bd08      	pop	{r3, pc}
     5be:	bf00      	nop
     5c0:	2000000c 	.word	0x2000000c

000005c4 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     5c4:	6802      	ldr	r2, [r0, #0]
     5c6:	4b0f      	ldr	r3, [pc, #60]	; (604 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x28>)
     5c8:	429a      	cmp	r2, r3
     5ca:	d001      	beq.n	5d0 <boot_is_header_valid+0xc>
        return false;
     5cc:	2000      	movs	r0, #0
     5ce:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     5d0:	68c2      	ldr	r2, [r0, #12]
     5d2:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     5d4:	43d8      	mvns	r0, r3
     5d6:	4282      	cmp	r2, r0
     5d8:	d80b      	bhi.n	5f2 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x16>
{
     5da:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     5dc:	18d4      	adds	r4, r2, r3
        return true;
     5de:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     5e0:	b110      	cbz	r0, 5e8 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xc>
        return false;
    }

    if (size >= fap->fa_size) {
     5e2:	688b      	ldr	r3, [r1, #8]
     5e4:	42a3      	cmp	r3, r4
     5e6:	d902      	bls.n	5ee <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x12>
        return false;
    }

    return true;
}
     5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
     5ec:	4770      	bx	lr
        return false;
     5ee:	2000      	movs	r0, #0
     5f0:	e7fa      	b.n	5e8 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xc>
        return false;
     5f2:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     5f4:	b110      	cbz	r0, 5fc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x20>
    if (size >= fap->fa_size) {
     5f6:	688b      	ldr	r3, [r1, #8]
     5f8:	42a3      	cmp	r3, r4
     5fa:	d900      	bls.n	5fe <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x22>
}
     5fc:	4770      	bx	lr
        return false;
     5fe:	2000      	movs	r0, #0
     600:	e7fc      	b.n	5fc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x20>
     602:	bf00      	nop
     604:	96f3b83d 	.word	0x96f3b83d

00000608 <boot_slots_compatible>:
{
     608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     60c:	6a87      	ldr	r7, [r0, #40]	; 0x28
     60e:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
     612:	2f80      	cmp	r7, #128	; 0x80
     614:	d80d      	bhi.n	632 <boot_slots_compatible+0x2a>
     616:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
     61a:	d80a      	bhi.n	632 <boot_slots_compatible+0x2a>
    return BOOT_IMG(state, slot).area->fa_off;
}

static inline size_t boot_scratch_area_size(struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
     61c:	6d83      	ldr	r3, [r0, #88]	; 0x58
     61e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
     622:	2400      	movs	r4, #0
    j = sz1 = secondary_slot_sz = 0;
     624:	4625      	mov	r5, r4
    i = sz0 = primary_slot_sz = 0;
     626:	4621      	mov	r1, r4
    j = sz1 = secondary_slot_sz = 0;
     628:	46a1      	mov	r9, r4
    i = sz0 = primary_slot_sz = 0;
     62a:	46a6      	mov	lr, r4
    j = sz1 = secondary_slot_sz = 0;
     62c:	4622      	mov	r2, r4
    i = sz0 = primary_slot_sz = 0;
     62e:	4623      	mov	r3, r4
    while (i < num_sectors_primary || j < num_sectors_secondary) {
     630:	e021      	b.n	676 <boot_slots_compatible+0x6e>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     632:	f04f 0000 	mov.w	r0, #0
     636:	2302      	movs	r3, #2
     638:	f363 0002 	bfi	r0, r3, #0, #3
     63c:	f36f 00c5 	bfc	r0, #3, #3
     640:	4b4a      	ldr	r3, [pc, #296]	; (76c <boot_slots_compatible+0x164>)
     642:	4a4b      	ldr	r2, [pc, #300]	; (770 <boot_slots_compatible+0x168>)
     644:	1a9b      	subs	r3, r3, r2
     646:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     64a:	f363 108f 	bfi	r0, r3, #6, #10
     64e:	4949      	ldr	r1, [pc, #292]	; (774 <boot_slots_compatible+0x16c>)
     650:	f004 fea6 	bl	53a0 <log_string_sync>
        return 0;
     654:	2000      	movs	r0, #0
}
     656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     65a:	6a46      	ldr	r6, [r0, #36]	; 0x24
     65c:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
     660:	6876      	ldr	r6, [r6, #4]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     662:	4433      	add	r3, r6
     664:	6d06      	ldr	r6, [r0, #80]	; 0x50
     666:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
     66a:	6876      	ldr	r6, [r6, #4]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     66c:	4432      	add	r2, r6
            i++;
     66e:	3101      	adds	r1, #1
            j++;
     670:	3501      	adds	r5, #1
        if (sz0 == sz1) {
     672:	429a      	cmp	r2, r3
     674:	d041      	beq.n	6fa <boot_slots_compatible+0xf2>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
     676:	42b9      	cmp	r1, r7
     678:	d301      	bcc.n	67e <boot_slots_compatible+0x76>
     67a:	4565      	cmp	r5, ip
     67c:	d25a      	bcs.n	734 <boot_slots_compatible+0x12c>
        if (sz0 == sz1) {
     67e:	429a      	cmp	r2, r3
     680:	d0eb      	beq.n	65a <boot_slots_compatible+0x52>
        } else if (sz0 < sz1) {
     682:	429a      	cmp	r2, r3
     684:	d91c      	bls.n	6c0 <boot_slots_compatible+0xb8>
     686:	6a46      	ldr	r6, [r0, #36]	; 0x24
     688:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
     68c:	6876      	ldr	r6, [r6, #4]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     68e:	4433      	add	r3, r6
            if (smaller == 2) {
     690:	2c02      	cmp	r4, #2
     692:	d002      	beq.n	69a <boot_slots_compatible+0x92>
            i++;
     694:	3101      	adds	r1, #1
            smaller = 1;
     696:	2401      	movs	r4, #1
     698:	e7eb      	b.n	672 <boot_slots_compatible+0x6a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
     69a:	f04f 0000 	mov.w	r0, #0
     69e:	2302      	movs	r3, #2
     6a0:	f363 0002 	bfi	r0, r3, #0, #3
     6a4:	f36f 00c5 	bfc	r0, #3, #3
     6a8:	4b30      	ldr	r3, [pc, #192]	; (76c <boot_slots_compatible+0x164>)
     6aa:	4a31      	ldr	r2, [pc, #196]	; (770 <boot_slots_compatible+0x168>)
     6ac:	1a9b      	subs	r3, r3, r2
     6ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     6b2:	f363 108f 	bfi	r0, r3, #6, #10
     6b6:	4930      	ldr	r1, [pc, #192]	; (778 <boot_slots_compatible+0x170>)
     6b8:	f004 fe72 	bl	53a0 <log_string_sync>
                return 0;
     6bc:	2000      	movs	r0, #0
     6be:	e7ca      	b.n	656 <boot_slots_compatible+0x4e>
     6c0:	6d06      	ldr	r6, [r0, #80]	; 0x50
     6c2:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
     6c6:	6876      	ldr	r6, [r6, #4]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     6c8:	4432      	add	r2, r6
            if (smaller == 1) {
     6ca:	2c01      	cmp	r4, #1
     6cc:	d002      	beq.n	6d4 <boot_slots_compatible+0xcc>
            j++;
     6ce:	3501      	adds	r5, #1
            smaller = 2;
     6d0:	2402      	movs	r4, #2
     6d2:	e7ce      	b.n	672 <boot_slots_compatible+0x6a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
     6d4:	f04f 0000 	mov.w	r0, #0
     6d8:	2302      	movs	r3, #2
     6da:	f363 0002 	bfi	r0, r3, #0, #3
     6de:	f36f 00c5 	bfc	r0, #3, #3
     6e2:	4b22      	ldr	r3, [pc, #136]	; (76c <boot_slots_compatible+0x164>)
     6e4:	4a22      	ldr	r2, [pc, #136]	; (770 <boot_slots_compatible+0x168>)
     6e6:	1a9b      	subs	r3, r3, r2
     6e8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     6ec:	f363 108f 	bfi	r0, r3, #6, #10
     6f0:	4921      	ldr	r1, [pc, #132]	; (778 <boot_slots_compatible+0x170>)
     6f2:	f004 fe55 	bl	53a0 <log_string_sync>
                return 0;
     6f6:	2000      	movs	r0, #0
     6f8:	e7ad      	b.n	656 <boot_slots_compatible+0x4e>
            primary_slot_sz += sz0;
     6fa:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
     6fc:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
     6fe:	4543      	cmp	r3, r8
     700:	d805      	bhi.n	70e <boot_slots_compatible+0x106>
     702:	4542      	cmp	r2, r8
     704:	d803      	bhi.n	70e <boot_slots_compatible+0x106>
            smaller = sz0 = sz1 = 0;
     706:	2400      	movs	r4, #0
     708:	4622      	mov	r2, r4
     70a:	4623      	mov	r3, r4
     70c:	e7b3      	b.n	676 <boot_slots_compatible+0x6e>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
     70e:	f04f 0000 	mov.w	r0, #0
     712:	2302      	movs	r3, #2
     714:	f363 0002 	bfi	r0, r3, #0, #3
     718:	f36f 00c5 	bfc	r0, #3, #3
     71c:	4b13      	ldr	r3, [pc, #76]	; (76c <boot_slots_compatible+0x164>)
     71e:	4a14      	ldr	r2, [pc, #80]	; (770 <boot_slots_compatible+0x168>)
     720:	1a9b      	subs	r3, r3, r2
     722:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     726:	f363 108f 	bfi	r0, r3, #6, #10
     72a:	4914      	ldr	r1, [pc, #80]	; (77c <boot_slots_compatible+0x174>)
     72c:	f004 fe38 	bl	53a0 <log_string_sync>
                return 0;
     730:	2000      	movs	r0, #0
     732:	e790      	b.n	656 <boot_slots_compatible+0x4e>
    if ((i != num_sectors_primary) ||
     734:	42b9      	cmp	r1, r7
     736:	d101      	bne.n	73c <boot_slots_compatible+0x134>
     738:	4565      	cmp	r5, ip
     73a:	d012      	beq.n	762 <boot_slots_compatible+0x15a>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
     73c:	f04f 0000 	mov.w	r0, #0
     740:	2302      	movs	r3, #2
     742:	f363 0002 	bfi	r0, r3, #0, #3
     746:	f36f 00c5 	bfc	r0, #3, #3
     74a:	4b08      	ldr	r3, [pc, #32]	; (76c <boot_slots_compatible+0x164>)
     74c:	4a08      	ldr	r2, [pc, #32]	; (770 <boot_slots_compatible+0x168>)
     74e:	1a9b      	subs	r3, r3, r2
     750:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     754:	f363 108f 	bfi	r0, r3, #6, #10
     758:	4909      	ldr	r1, [pc, #36]	; (780 <boot_slots_compatible+0x178>)
     75a:	f004 fe21 	bl	53a0 <log_string_sync>
        return 0;
     75e:	2000      	movs	r0, #0
     760:	e779      	b.n	656 <boot_slots_compatible+0x4e>
        (j != num_sectors_secondary) ||
     762:	45ce      	cmp	lr, r9
     764:	d1ea      	bne.n	73c <boot_slots_compatible+0x134>
    return 1;
     766:	2001      	movs	r0, #1
     768:	e775      	b.n	656 <boot_slots_compatible+0x4e>
     76a:	bf00      	nop
     76c:	00007f4c 	.word	0x00007f4c
     770:	00007f44 	.word	0x00007f44
     774:	00008150 	.word	0x00008150
     778:	0000817c 	.word	0x0000817c
     77c:	000081b0 	.word	0x000081b0
     780:	000081e4 	.word	0x000081e4

00000784 <boot_status_source>:
{
     784:	b530      	push	{r4, r5, lr}
     786:	b089      	sub	sp, #36	; 0x24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     788:	a904      	add	r1, sp, #16
     78a:	2002      	movs	r0, #2
     78c:	f004 f9b3 	bl	4af6 <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
     790:	a906      	add	r1, sp, #24
     792:	2007      	movs	r0, #7
     794:	f004 f9af 	bl	4af6 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     798:	f04f 0000 	mov.w	r0, #0
     79c:	2303      	movs	r3, #3
     79e:	f363 0002 	bfi	r0, r3, #0, #3
     7a2:	f36f 00c5 	bfc	r0, #3, #3
     7a6:	4d4e      	ldr	r5, [pc, #312]	; (8e0 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe0>)
     7a8:	4b4e      	ldr	r3, [pc, #312]	; (8e4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe4>)
     7aa:	1b5b      	subs	r3, r3, r5
     7ac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     7b0:	f363 108f 	bfi	r0, r3, #6, #10
     7b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
     7b8:	2b01      	cmp	r3, #1
     7ba:	d034      	beq.n	826 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x26>
     7bc:	2b03      	cmp	r3, #3
     7be:	d030      	beq.n	822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
     7c0:	4b49      	ldr	r3, [pc, #292]	; (8e8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe8>)
     7c2:	f89d 2011 	ldrb.w	r2, [sp, #17]
     7c6:	f89d 1012 	ldrb.w	r1, [sp, #18]
     7ca:	f89d 4013 	ldrb.w	r4, [sp, #19]
     7ce:	9402      	str	r4, [sp, #8]
     7d0:	9101      	str	r1, [sp, #4]
     7d2:	9200      	str	r2, [sp, #0]
     7d4:	4a45      	ldr	r2, [pc, #276]	; (8ec <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xec>)
     7d6:	4946      	ldr	r1, [pc, #280]	; (8f0 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xf0>)
     7d8:	f004 fde2 	bl	53a0 <log_string_sync>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
     7dc:	f04f 0000 	mov.w	r0, #0
     7e0:	2303      	movs	r3, #3
     7e2:	f363 0002 	bfi	r0, r3, #0, #3
     7e6:	f36f 00c5 	bfc	r0, #3, #3
     7ea:	4b3e      	ldr	r3, [pc, #248]	; (8e4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe4>)
     7ec:	1b5b      	subs	r3, r3, r5
     7ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     7f2:	f363 108f 	bfi	r0, r3, #6, #10
     7f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
     7fa:	2b01      	cmp	r3, #1
     7fc:	d017      	beq.n	82e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2e>
     7fe:	2b03      	cmp	r3, #3
     800:	d013      	beq.n	82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
     802:	4b39      	ldr	r3, [pc, #228]	; (8e8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe8>)
     804:	f89d 2019 	ldrb.w	r2, [sp, #25]
     808:	f89d 101a 	ldrb.w	r1, [sp, #26]
     80c:	f89d 401b 	ldrb.w	r4, [sp, #27]
     810:	9402      	str	r4, [sp, #8]
     812:	9101      	str	r1, [sp, #4]
     814:	9200      	str	r2, [sp, #0]
     816:	4a37      	ldr	r2, [pc, #220]	; (8f4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xf4>)
     818:	4935      	ldr	r1, [pc, #212]	; (8f0 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xf0>)
     81a:	f004 fdc1 	bl	53a0 <log_string_sync>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     81e:	2400      	movs	r4, #0
     820:	e012      	b.n	848 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x48>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     822:	4b35      	ldr	r3, [pc, #212]	; (8f8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xf8>)
     824:	e7cd      	b.n	7c2 <boot_status_source+0x3e>
     826:	4b35      	ldr	r3, [pc, #212]	; (8fc <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xfc>)
     828:	e7cb      	b.n	7c2 <boot_status_source+0x3e>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
     82a:	4b33      	ldr	r3, [pc, #204]	; (8f8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xf8>)
     82c:	e7ea      	b.n	804 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4>
     82e:	4b33      	ldr	r3, [pc, #204]	; (8fc <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xfc>)
     830:	e7e8      	b.n	804 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4>
            BOOT_LOG_INF("Boot source: %s",
     832:	4a33      	ldr	r2, [pc, #204]	; (900 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x100>)
     834:	e000      	b.n	838 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x38>
     836:	4a33      	ldr	r2, [pc, #204]	; (904 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x104>)
     838:	4933      	ldr	r1, [pc, #204]	; (908 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x108>)
     83a:	f004 fdb1 	bl	53a0 <log_string_sync>
            return source;
     83e:	4620      	mov	r0, r4
     840:	e04b      	b.n	8da <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xda>
            BOOT_LOG_INF("Boot source: %s",
     842:	4a32      	ldr	r2, [pc, #200]	; (90c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x10c>)
     844:	e7f8      	b.n	838 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x38>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     846:	3401      	adds	r4, #1
     848:	2c03      	cmp	r4, #3
     84a:	d835      	bhi.n	8b8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xb8>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
     84c:	f89d 1010 	ldrb.w	r1, [sp, #16]
     850:	4b2f      	ldr	r3, [pc, #188]	; (910 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x110>)
     852:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
     856:	f004 f8ba 	bl	49ce <boot_magic_compatible_check>
     85a:	2800      	cmp	r0, #0
     85c:	d0f3      	beq.n	846 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x46>
            boot_magic_compatible_check(table->bst_magic_scratch,
     85e:	4b2c      	ldr	r3, [pc, #176]	; (910 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x110>)
     860:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     864:	f89d 1018 	ldrb.w	r1, [sp, #24]
     868:	7858      	ldrb	r0, [r3, #1]
     86a:	f004 f8b0 	bl	49ce <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
     86e:	2800      	cmp	r0, #0
     870:	d0e9      	beq.n	846 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x46>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     872:	4b27      	ldr	r3, [pc, #156]	; (910 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x110>)
     874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     878:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
     87a:	2b04      	cmp	r3, #4
     87c:	d003      	beq.n	886 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x86>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
     87e:	f89d 2012 	ldrb.w	r2, [sp, #18]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     882:	4293      	cmp	r3, r2
     884:	d1df      	bne.n	846 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x46>
            source = table->bst_status_source;
     886:	4b22      	ldr	r3, [pc, #136]	; (910 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x110>)
     888:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     88c:	78e4      	ldrb	r4, [r4, #3]
            BOOT_LOG_INF("Boot source: %s",
     88e:	f04f 0000 	mov.w	r0, #0
     892:	2303      	movs	r3, #3
     894:	f363 0002 	bfi	r0, r3, #0, #3
     898:	f36f 00c5 	bfc	r0, #3, #3
     89c:	4b11      	ldr	r3, [pc, #68]	; (8e4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe4>)
     89e:	1b5b      	subs	r3, r3, r5
     8a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     8a4:	f363 108f 	bfi	r0, r3, #6, #10
     8a8:	2c00      	cmp	r4, #0
     8aa:	d0c4      	beq.n	836 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x36>
     8ac:	2c01      	cmp	r4, #1
     8ae:	d0c8      	beq.n	842 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x42>
     8b0:	2c02      	cmp	r4, #2
     8b2:	d0be      	beq.n	832 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x32>
     8b4:	4a17      	ldr	r2, [pc, #92]	; (914 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x114>)
     8b6:	e7bf      	b.n	838 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x38>
    BOOT_LOG_INF("Boot source: none");
     8b8:	f04f 0000 	mov.w	r0, #0
     8bc:	2303      	movs	r3, #3
     8be:	f363 0002 	bfi	r0, r3, #0, #3
     8c2:	f36f 00c5 	bfc	r0, #3, #3
     8c6:	4b07      	ldr	r3, [pc, #28]	; (8e4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe4>)
     8c8:	1b5d      	subs	r5, r3, r5
     8ca:	f3c5 05c9 	ubfx	r5, r5, #3, #10
     8ce:	f365 108f 	bfi	r0, r5, #6, #10
     8d2:	4911      	ldr	r1, [pc, #68]	; (918 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x118>)
     8d4:	f004 fd64 	bl	53a0 <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
     8d8:	2000      	movs	r0, #0
}
     8da:	b009      	add	sp, #36	; 0x24
     8dc:	bd30      	pop	{r4, r5, pc}
     8de:	bf00      	nop
     8e0:	00007f44 	.word	0x00007f44
     8e4:	00007f4c 	.word	0x00007f4c
     8e8:	00008210 	.word	0x00008210
     8ec:	00008258 	.word	0x00008258
     8f0:	00008268 	.word	0x00008268
     8f4:	000082a4 	.word	0x000082a4
     8f8:	0000821c 	.word	0x0000821c
     8fc:	00008214 	.word	0x00008214
     900:	00008248 	.word	0x00008248
     904:	0000822c 	.word	0x0000822c
     908:	000082ac 	.word	0x000082ac
     90c:	00008224 	.word	0x00008224
     910:	000082d0 	.word	0x000082d0
     914:	00008234 	.word	0x00008234
     918:	000082bc 	.word	0x000082bc

0000091c <boot_read_status_bytes>:
{
     91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     920:	b083      	sub	sp, #12
     922:	4606      	mov	r6, r0
     924:	468a      	mov	sl, r1
     926:	4691      	mov	r9, r2
    off = boot_status_off(fap);
     928:	f004 f879 	bl	4a1e <boot_status_off>
     92c:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     92e:	4631      	mov	r1, r6
     930:	2000      	movs	r0, #0
     932:	f004 f862 	bl	49fa <boot_status_entries>
    if (max_entries < 0) {
     936:	1e07      	subs	r7, r0, #0
     938:	db4b      	blt.n	9d2 <boot_read_status_bytes+0xb6>
    for (i = 0; i < max_entries; i++) {
     93a:	2400      	movs	r4, #0
    found_idx = 0;
     93c:	46a3      	mov	fp, r4
    found = 0;
     93e:	4625      	mov	r5, r4
     940:	e007      	b.n	952 <boot_read_status_bytes+0x36>
            if (found && !found_idx) {
     942:	b12d      	cbz	r5, 950 <boot_read_status_bytes+0x34>
     944:	f1bb 0f00 	cmp.w	fp, #0
     948:	d102      	bne.n	950 <boot_read_status_bytes+0x34>
                found_idx = i;
     94a:	46a3      	mov	fp, r4
     94c:	e000      	b.n	950 <boot_read_status_bytes+0x34>
            found = 1;
     94e:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
     950:	3401      	adds	r4, #1
     952:	42bc      	cmp	r4, r7
     954:	da14      	bge.n	980 <boot_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
     956:	f89a 1065 	ldrb.w	r1, [sl, #101]	; 0x65
     95a:	2301      	movs	r3, #1
     95c:	f10d 0207 	add.w	r2, sp, #7
     960:	fb04 8101 	mla	r1, r4, r1, r8
     964:	4630      	mov	r0, r6
     966:	f003 fd8d 	bl	4484 <flash_area_read_is_empty>
        if (rc < 0) {
     96a:	2800      	cmp	r0, #0
     96c:	db33      	blt.n	9d6 <boot_read_status_bytes+0xba>
        if (rc == 1) {
     96e:	2801      	cmp	r0, #1
     970:	d0e7      	beq.n	942 <boot_read_status_bytes+0x26>
        } else if (!found) {
     972:	2d00      	cmp	r5, #0
     974:	d0eb      	beq.n	94e <boot_read_status_bytes+0x32>
        } else if (found_idx) {
     976:	f1bb 0f00 	cmp.w	fp, #0
     97a:	d0e9      	beq.n	950 <boot_read_status_bytes+0x34>
            invalid = 1;
     97c:	462b      	mov	r3, r5
     97e:	e000      	b.n	982 <boot_read_status_bytes+0x66>
    invalid = 0;
     980:	2300      	movs	r3, #0
    if (invalid) {
     982:	b9a3      	cbnz	r3, 9ae <boot_read_status_bytes+0x92>
    if (found) {
     984:	b345      	cbz	r5, 9d8 <boot_read_status_bytes+0xbc>
        if (!found_idx) {
     986:	f1bb 0f00 	cmp.w	fp, #0
     98a:	d000      	beq.n	98e <boot_read_status_bytes+0x72>
     98c:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
     98e:	4b14      	ldr	r3, [pc, #80]	; (9e0 <boot_read_status_bytes+0xc4>)
     990:	fb83 2304 	smull	r2, r3, r3, r4
     994:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
     998:	1c5a      	adds	r2, r3, #1
     99a:	f8c9 2000 	str.w	r2, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
     99e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     9a2:	1ae4      	subs	r4, r4, r3
     9a4:	3401      	adds	r4, #1
     9a6:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
     9aa:	2500      	movs	r5, #0
     9ac:	e014      	b.n	9d8 <boot_read_status_bytes+0xbc>
        BOOT_LOG_ERR("Detected inconsistent status!");
     9ae:	f04f 0000 	mov.w	r0, #0
     9b2:	2301      	movs	r3, #1
     9b4:	f363 0002 	bfi	r0, r3, #0, #3
     9b8:	f36f 00c5 	bfc	r0, #3, #3
     9bc:	4b09      	ldr	r3, [pc, #36]	; (9e4 <boot_read_status_bytes+0xc8>)
     9be:	4a0a      	ldr	r2, [pc, #40]	; (9e8 <boot_read_status_bytes+0xcc>)
     9c0:	1a9b      	subs	r3, r3, r2
     9c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     9c6:	f363 108f 	bfi	r0, r3, #6, #10
     9ca:	4908      	ldr	r1, [pc, #32]	; (9ec <boot_read_status_bytes+0xd0>)
     9cc:	f004 fce8 	bl	53a0 <log_string_sync>
     9d0:	e7d8      	b.n	984 <boot_read_status_bytes+0x68>
        return BOOT_EBADARGS;
     9d2:	2507      	movs	r5, #7
     9d4:	e000      	b.n	9d8 <boot_read_status_bytes+0xbc>
            return BOOT_EFLASH;
     9d6:	2501      	movs	r5, #1
}
     9d8:	4628      	mov	r0, r5
     9da:	b003      	add	sp, #12
     9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9e0:	55555556 	.word	0x55555556
     9e4:	00007f4c 	.word	0x00007f4c
     9e8:	00007f44 	.word	0x00007f44
     9ec:	00008130 	.word	0x00008130

000009f0 <boot_copy_region>:
static int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	4688      	mov	r8, r1
     9f6:	4692      	mov	sl, r2
     9f8:	461f      	mov	r7, r3
     9fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     9fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     a00:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
     a02:	e00f      	b.n	a24 <boot_copy_region+0x34>
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a04:	4623      	mov	r3, r4
     a06:	4a0f      	ldr	r2, [pc, #60]	; (a44 <boot_copy_region+0x54>)
     a08:	19e9      	adds	r1, r5, r7
     a0a:	4640      	mov	r0, r8
     a0c:	f004 fdcb 	bl	55a6 <flash_area_read>
        if (rc != 0) {
     a10:	b9a0      	cbnz	r0, a3c <boot_copy_region+0x4c>
                        blk_off, &buf[idx]);
            }
        }
#endif

        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a12:	4623      	mov	r3, r4
     a14:	4a0b      	ldr	r2, [pc, #44]	; (a44 <boot_copy_region+0x54>)
     a16:	eb05 0109 	add.w	r1, r5, r9
     a1a:	4650      	mov	r0, sl
     a1c:	f004 fde2 	bl	55e4 <flash_area_write>
        if (rc != 0) {
     a20:	b970      	cbnz	r0, a40 <boot_copy_region+0x50>
            return BOOT_EFLASH;
        }

        bytes_copied += chunk_sz;
     a22:	4425      	add	r5, r4
    while (bytes_copied < sz) {
     a24:	42b5      	cmp	r5, r6
     a26:	d206      	bcs.n	a36 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
     a28:	1b74      	subs	r4, r6, r5
     a2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     a2e:	d9e9      	bls.n	a04 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
     a30:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a34:	e7e6      	b.n	a04 <boot_copy_region+0x14>

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     a36:	2000      	movs	r0, #0
}
     a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     a3c:	2001      	movs	r0, #1
     a3e:	e7fb      	b.n	a38 <boot_copy_region+0x48>
            return BOOT_EFLASH;
     a40:	2001      	movs	r0, #1
     a42:	e7f9      	b.n	a38 <boot_copy_region+0x48>
     a44:	20001878 	.word	0x20001878

00000a48 <boot_image_check>:
{
     a48:	b500      	push	{lr}
     a4a:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
     a4c:	2000      	movs	r0, #0
     a4e:	9004      	str	r0, [sp, #16]
     a50:	9003      	str	r0, [sp, #12]
     a52:	9002      	str	r0, [sp, #8]
     a54:	f44f 7380 	mov.w	r3, #256	; 0x100
     a58:	9301      	str	r3, [sp, #4]
     a5a:	4b07      	ldr	r3, [pc, #28]	; (a78 <boot_image_check+0x30>)
     a5c:	9300      	str	r3, [sp, #0]
     a5e:	4613      	mov	r3, r2
     a60:	460a      	mov	r2, r1
     a62:	4601      	mov	r1, r0
     a64:	f000 fca8 	bl	13b8 <bootutil_img_validate>
     a68:	4603      	mov	r3, r0
     a6a:	b918      	cbnz	r0, a74 <boot_image_check+0x2c>
}
     a6c:	4618      	mov	r0, r3
     a6e:	b007      	add	sp, #28
     a70:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
     a74:	2303      	movs	r3, #3
     a76:	e7f9      	b.n	a6c <boot_image_check+0x24>
     a78:	20002878 	.word	0x20002878

00000a7c <boot_validate_slot>:
{
     a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a80:	b082      	sub	sp, #8
     a82:	4605      	mov	r5, r0
     a84:	460c      	mov	r4, r1
     a86:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a88:	2000      	movs	r0, #0
     a8a:	f003 fceb 	bl	4464 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a8e:	a901      	add	r1, sp, #4
     a90:	b2c0      	uxtb	r0, r0
     a92:	f001 f945 	bl	1d20 <flash_area_open>
    if (rc != 0) {
     a96:	2800      	cmp	r0, #0
     a98:	d144      	bne.n	b24 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x98>
    return &BOOT_IMG(state, slot).hdr;
     a9a:	202c      	movs	r0, #44	; 0x2c
     a9c:	fb00 5604 	mla	r6, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
     aa0:	4621      	mov	r1, r4
     aa2:	4628      	mov	r0, r5
     aa4:	f003 fd30 	bl	4508 <boot_check_header_erased>
     aa8:	b390      	cbz	r0, b10 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x84>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     aaa:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     aac:	f013 0f10 	tst.w	r3, #16
     ab0:	d136      	bne.n	b20 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x94>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     ab2:	f8dd 8004 	ldr.w	r8, [sp, #4]
     ab6:	4641      	mov	r1, r8
     ab8:	4630      	mov	r0, r6
     aba:	f7ff fd83 	bl	5c4 <boot_is_header_valid>
     abe:	b9b0      	cbnz	r0, aee <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x62>
        if (slot != BOOT_PRIMARY_SLOT) {
     ac0:	b9f4      	cbnz	r4, b00 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x74>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ac2:	f04f 0000 	mov.w	r0, #0
     ac6:	2301      	movs	r3, #1
     ac8:	f363 0002 	bfi	r0, r3, #0, #3
     acc:	f36f 00c5 	bfc	r0, #3, #3
     ad0:	4b16      	ldr	r3, [pc, #88]	; (b2c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa0>)
     ad2:	4a17      	ldr	r2, [pc, #92]	; (b30 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa4>)
     ad4:	1a9b      	subs	r3, r3, r2
     ad6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ada:	f363 108f 	bfi	r0, r3, #6, #10
     ade:	b9ac      	cbnz	r4, b0c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x80>
     ae0:	4a14      	ldr	r2, [pc, #80]	; (b34 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa8>)
     ae2:	4915      	ldr	r1, [pc, #84]	; (b38 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xac>)
     ae4:	f004 fc5c 	bl	53a0 <log_string_sync>
        rc = -1;
     ae8:	f04f 35ff 	mov.w	r5, #4294967295
        goto out;
     aec:	e011      	b.n	b12 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x86>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     aee:	463b      	mov	r3, r7
     af0:	4642      	mov	r2, r8
     af2:	4631      	mov	r1, r6
     af4:	4628      	mov	r0, r5
     af6:	f7ff ffa7 	bl	a48 <boot_image_check>
     afa:	4605      	mov	r5, r0
     afc:	b148      	cbz	r0, b12 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x86>
     afe:	e7df      	b.n	ac0 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x34>
            flash_area_erase(fap, 0, fap->fa_size);
     b00:	9801      	ldr	r0, [sp, #4]
     b02:	6882      	ldr	r2, [r0, #8]
     b04:	2100      	movs	r1, #0
     b06:	f004 fd9d 	bl	5644 <flash_area_erase>
     b0a:	e7da      	b.n	ac2 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x36>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     b0c:	4a0b      	ldr	r2, [pc, #44]	; (b3c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xb0>)
     b0e:	e7e8      	b.n	ae2 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x56>
        rc = 1;
     b10:	2501      	movs	r5, #1
    flash_area_close(fap);
     b12:	9801      	ldr	r0, [sp, #4]
     b14:	f004 fd46 	bl	55a4 <flash_area_close>
}
     b18:	4628      	mov	r0, r5
     b1a:	b002      	add	sp, #8
     b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
     b20:	2501      	movs	r5, #1
     b22:	e7f6      	b.n	b12 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x86>
        return -1;
     b24:	f04f 35ff 	mov.w	r5, #4294967295
     b28:	e7f6      	b.n	b18 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x8c>
     b2a:	bf00      	nop
     b2c:	00007f4c 	.word	0x00007f4c
     b30:	00007f44 	.word	0x00007f44
     b34:	0000830c 	.word	0x0000830c
     b38:	00008320 	.word	0x00008320
     b3c:	00008314 	.word	0x00008314

00000b40 <boot_swap_sectors>:
 */
#ifndef MCUBOOT_OVERWRITE_ONLY
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
     b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     b44:	b08b      	sub	sp, #44	; 0x2c
     b46:	460f      	mov	r7, r1
     b48:	4615      	mov	r5, r2
     b4a:	461c      	mov	r4, r3

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
     b4e:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     b52:	681b      	ldr	r3, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b54:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     b56:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
     b5a:	f003 ff48 	bl	49ee <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
     b5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     b60:	3b01      	subs	r3, #1
    if ((img_off + sz) >
     b62:	19b9      	adds	r1, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     b6a:	6812      	ldr	r2, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b6c:	1a9b      	subs	r3, r3, r2
     b6e:	4299      	cmp	r1, r3
     b70:	d928      	bls.n	bc4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
     b72:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
     b76:	6823      	ldr	r3, [r4, #0]
     b78:	2b01      	cmp	r3, #1
     b7a:	d025      	beq.n	bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>
     b7c:	2300      	movs	r3, #0
     b7e:	7163      	strb	r3, [r4, #5]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     b80:	a909      	add	r1, sp, #36	; 0x24
     b82:	2002      	movs	r0, #2
     b84:	f001 f8cc 	bl	1d20 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     b88:	a908      	add	r1, sp, #32
     b8a:	2006      	movs	r0, #6
     b8c:	f001 f8c8 	bl	1d20 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
     b90:	a907      	add	r1, sp, #28
     b92:	2007      	movs	r0, #7
     b94:	f001 f8c4 	bl	1d20 <flash_area_open>
    assert (rc == 0);

    if (bs->state == BOOT_STATUS_STATE_0) {
     b98:	7923      	ldrb	r3, [r4, #4]
     b9a:	2b01      	cmp	r3, #1
     b9c:	d01a      	beq.n	bd4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1c>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
     b9e:	7923      	ldrb	r3, [r4, #4]
     ba0:	2b02      	cmp	r3, #2
     ba2:	d07d      	beq.n	ca0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xe8>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
     ba4:	7923      	ldrb	r3, [r4, #4]
     ba6:	2b03      	cmp	r3, #3
     ba8:	f000 80a1 	beq.w	cee <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x136>
            rc = boot_erase_region(fap_scratch, 0, sz);
            assert(rc == 0);
        }
    }

    flash_area_close(fap_primary_slot);
     bac:	9809      	ldr	r0, [sp, #36]	; 0x24
     bae:	f004 fcf9 	bl	55a4 <flash_area_close>
    flash_area_close(fap_secondary_slot);
     bb2:	9808      	ldr	r0, [sp, #32]
     bb4:	f004 fcf6 	bl	55a4 <flash_area_close>
    flash_area_close(fap_scratch);
     bb8:	9807      	ldr	r0, [sp, #28]
     bba:	f004 fcf3 	bl	55a4 <flash_area_close>
}
     bbe:	b00b      	add	sp, #44	; 0x2c
     bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    copy_sz = sz;
     bc4:	46b8      	mov	r8, r7
     bc6:	e7d6      	b.n	b76 <boot_swap_sectors+0x36>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
     bc8:	45b8      	cmp	r8, r7
     bca:	d001      	beq.n	bd0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18>
     bcc:	2301      	movs	r3, #1
     bce:	e7d6      	b.n	b7e <boot_swap_sectors+0x3e>
     bd0:	2300      	movs	r3, #0
     bd2:	e7d4      	b.n	b7e <boot_swap_sectors+0x3e>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
     bd4:	9807      	ldr	r0, [sp, #28]
    return flash_area_erase(fap, off, sz);
     bd6:	6882      	ldr	r2, [r0, #8]
     bd8:	2100      	movs	r1, #0
     bda:	f004 fd33 	bl	5644 <flash_area_erase>
        if (bs->idx == BOOT_STATUS_IDX_0) {
     bde:	6823      	ldr	r3, [r4, #0]
     be0:	2b01      	cmp	r3, #1
     be2:	d016      	beq.n	c12 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x5a>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
     be4:	f8cd 8004 	str.w	r8, [sp, #4]
     be8:	2300      	movs	r3, #0
     bea:	9300      	str	r3, [sp, #0]
     bec:	4633      	mov	r3, r6
     bee:	9a07      	ldr	r2, [sp, #28]
     bf0:	9908      	ldr	r1, [sp, #32]
     bf2:	4628      	mov	r0, r5
     bf4:	f7ff fefc 	bl	9f0 <boot_copy_region>
        rc = boot_write_status(state, bs);
     bf8:	4621      	mov	r1, r4
     bfa:	4628      	mov	r0, r5
     bfc:	f003 fe44 	bl	4888 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     c00:	2302      	movs	r3, #2
     c02:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     c04:	2800      	cmp	r0, #0
     c06:	d0ca      	beq.n	b9e <boot_swap_sectors+0x5e>
     c08:	4a66      	ldr	r2, [pc, #408]	; (da4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ec>)
     c0a:	6813      	ldr	r3, [r2, #0]
     c0c:	3301      	adds	r3, #1
     c0e:	6013      	str	r3, [r2, #0]
     c10:	e7c5      	b.n	b9e <boot_swap_sectors+0x5e>
            rc = boot_status_init(state, fap_scratch, bs);
     c12:	f8dd 901c 	ldr.w	r9, [sp, #28]
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     c16:	a903      	add	r1, sp, #12
     c18:	2006      	movs	r0, #6
     c1a:	f003 ff6c 	bl	4af6 <boot_read_swap_state_by_id>
    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
     c1e:	79a1      	ldrb	r1, [r4, #6]
     c20:	2901      	cmp	r1, #1
     c22:	d12b      	bne.n	c7c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc4>
    if (swap_state.image_ok == BOOT_FLAG_SET) {
     c24:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c28:	2b01      	cmp	r3, #1
     c2a:	d02c      	beq.n	c86 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xce>
    rc = boot_write_swap_size(fap, bs->swap_size);
     c2c:	68a1      	ldr	r1, [r4, #8]
     c2e:	4648      	mov	r0, r9
     c30:	f003 ffb1 	bl	4b96 <boot_write_swap_size>
    rc = boot_write_magic(fap);
     c34:	4648      	mov	r0, r9
     c36:	f000 faef 	bl	1218 <boot_write_magic>
            if (!bs->use_scratch) {
     c3a:	7963      	ldrb	r3, [r4, #5]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d1d1      	bne.n	be4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x2c>
                rc = boot_erase_trailer_sectors(state, fap_primary_slot);
     c40:	9909      	ldr	r1, [sp, #36]	; 0x24
     c42:	4628      	mov	r0, r5
     c44:	f003 fd99 	bl	477a <boot_erase_trailer_sectors>
                rc = boot_status_init(state, fap_primary_slot, bs);
     c48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     c4c:	a903      	add	r1, sp, #12
     c4e:	2006      	movs	r0, #6
     c50:	f003 ff51 	bl	4af6 <boot_read_swap_state_by_id>
    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
     c54:	79a1      	ldrb	r1, [r4, #6]
     c56:	2901      	cmp	r1, #1
     c58:	d119      	bne.n	c8e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xd6>
    if (swap_state.image_ok == BOOT_FLAG_SET) {
     c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c5e:	2b01      	cmp	r3, #1
     c60:	d01a      	beq.n	c98 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xe0>
    rc = boot_write_swap_size(fap, bs->swap_size);
     c62:	68a1      	ldr	r1, [r4, #8]
     c64:	4648      	mov	r0, r9
     c66:	f003 ff96 	bl	4b96 <boot_write_swap_size>
    rc = boot_write_magic(fap);
     c6a:	4648      	mov	r0, r9
     c6c:	f000 fad4 	bl	1218 <boot_write_magic>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
     c70:	9807      	ldr	r0, [sp, #28]
    return flash_area_erase(fap, off, sz);
     c72:	6882      	ldr	r2, [r0, #8]
     c74:	2100      	movs	r1, #0
     c76:	f004 fce5 	bl	5644 <flash_area_erase>
     c7a:	e7b3      	b.n	be4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x2c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
     c7c:	2200      	movs	r2, #0
     c7e:	4648      	mov	r0, r9
     c80:	f003 ff77 	bl	4b72 <boot_write_swap_info>
     c84:	e7ce      	b.n	c24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6c>
        rc = boot_write_image_ok(fap);
     c86:	4648      	mov	r0, r9
     c88:	f003 ff6c 	bl	4b64 <boot_write_image_ok>
     c8c:	e7ce      	b.n	c2c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x74>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
     c8e:	2200      	movs	r2, #0
     c90:	4648      	mov	r0, r9
     c92:	f003 ff6e 	bl	4b72 <boot_write_swap_info>
     c96:	e7e0      	b.n	c5a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xa2>
        rc = boot_write_image_ok(fap);
     c98:	4648      	mov	r0, r9
     c9a:	f003 ff63 	bl	4b64 <boot_write_image_ok>
     c9e:	e7e0      	b.n	c62 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xaa>
    return flash_area_erase(fap, off, sz);
     ca0:	463a      	mov	r2, r7
     ca2:	4631      	mov	r1, r6
     ca4:	9808      	ldr	r0, [sp, #32]
     ca6:	f004 fccd 	bl	5644 <flash_area_erase>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
     caa:	f8cd 8004 	str.w	r8, [sp, #4]
     cae:	9600      	str	r6, [sp, #0]
     cb0:	4633      	mov	r3, r6
     cb2:	9a08      	ldr	r2, [sp, #32]
     cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
     cb6:	4628      	mov	r0, r5
     cb8:	f7ff fe9a 	bl	9f0 <boot_copy_region>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
     cbc:	6823      	ldr	r3, [r4, #0]
     cbe:	2b01      	cmp	r3, #1
     cc0:	d00d      	beq.n	cde <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x126>
        rc = boot_write_status(state, bs);
     cc2:	4621      	mov	r1, r4
     cc4:	4628      	mov	r0, r5
     cc6:	f003 fddf 	bl	4888 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
     cca:	2303      	movs	r3, #3
     ccc:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     cce:	2800      	cmp	r0, #0
     cd0:	f43f af68 	beq.w	ba4 <boot_swap_sectors+0x64>
     cd4:	4a33      	ldr	r2, [pc, #204]	; (da4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ec>)
     cd6:	6813      	ldr	r3, [r2, #0]
     cd8:	3301      	adds	r3, #1
     cda:	6013      	str	r3, [r2, #0]
     cdc:	e762      	b.n	ba4 <boot_swap_sectors+0x64>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
     cde:	7963      	ldrb	r3, [r4, #5]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d1ee      	bne.n	cc2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10a>
            rc = boot_erase_trailer_sectors(state, fap_secondary_slot);
     ce4:	9908      	ldr	r1, [sp, #32]
     ce6:	4628      	mov	r0, r5
     ce8:	f003 fd47 	bl	477a <boot_erase_trailer_sectors>
     cec:	e7e9      	b.n	cc2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10a>
    return flash_area_erase(fap, off, sz);
     cee:	463a      	mov	r2, r7
     cf0:	4631      	mov	r1, r6
     cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
     cf4:	f004 fca6 	bl	5644 <flash_area_erase>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     cf8:	f8cd 8004 	str.w	r8, [sp, #4]
     cfc:	9600      	str	r6, [sp, #0]
     cfe:	2300      	movs	r3, #0
     d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d02:	9907      	ldr	r1, [sp, #28]
     d04:	4628      	mov	r0, r5
     d06:	f7ff fe73 	bl	9f0 <boot_copy_region>
        if (bs->use_scratch) {
     d0a:	7963      	ldrb	r3, [r4, #5]
     d0c:	b9cb      	cbnz	r3, d42 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18a>
        erase_scratch = bs->use_scratch;
     d0e:	7966      	ldrb	r6, [r4, #5]
        bs->use_scratch = 0;
     d10:	2300      	movs	r3, #0
     d12:	7163      	strb	r3, [r4, #5]
        rc = boot_write_status(state, bs);
     d14:	4621      	mov	r1, r4
     d16:	4628      	mov	r0, r5
     d18:	f003 fdb6 	bl	4888 <boot_write_status>
        bs->idx++;
     d1c:	6823      	ldr	r3, [r4, #0]
     d1e:	3301      	adds	r3, #1
     d20:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
     d22:	2301      	movs	r3, #1
     d24:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     d26:	b118      	cbz	r0, d30 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x178>
     d28:	4a1e      	ldr	r2, [pc, #120]	; (da4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ec>)
     d2a:	6813      	ldr	r3, [r2, #0]
     d2c:	3301      	adds	r3, #1
     d2e:	6013      	str	r3, [r2, #0]
        if (erase_scratch) {
     d30:	2e00      	cmp	r6, #0
     d32:	f43f af3b 	beq.w	bac <boot_swap_sectors+0x6c>
    return flash_area_erase(fap, off, sz);
     d36:	463a      	mov	r2, r7
     d38:	2100      	movs	r1, #0
     d3a:	9807      	ldr	r0, [sp, #28]
     d3c:	f004 fc82 	bl	5644 <flash_area_erase>
     d40:	e734      	b.n	bac <boot_swap_sectors+0x6c>
            scratch_trailer_off = boot_status_off(fap_scratch);
     d42:	9807      	ldr	r0, [sp, #28]
     d44:	f003 fe6b 	bl	4a1e <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     d48:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
     d4a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
     d4e:	005b      	lsls	r3, r3, #1
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     d50:	9301      	str	r3, [sp, #4]
     d52:	9600      	str	r6, [sp, #0]
     d54:	4603      	mov	r3, r0
     d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d58:	9907      	ldr	r1, [sp, #28]
     d5a:	4628      	mov	r0, r5
     d5c:	f7ff fe48 	bl	9f0 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
     d60:	b118      	cbz	r0, d6a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1b2>
     d62:	4a10      	ldr	r2, [pc, #64]	; (da4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ec>)
     d64:	6813      	ldr	r3, [r2, #0]
     d66:	3301      	adds	r3, #1
     d68:	6013      	str	r3, [r2, #0]
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
     d6a:	a905      	add	r1, sp, #20
     d6c:	2007      	movs	r0, #7
     d6e:	f003 fec2 	bl	4af6 <boot_read_swap_state_by_id>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
     d72:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d76:	2b01      	cmp	r3, #1
     d78:	d00b      	beq.n	d92 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1da>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
     d7a:	f89d 1015 	ldrb.w	r1, [sp, #21]
     d7e:	2901      	cmp	r1, #1
     d80:	d10b      	bne.n	d9a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1e2>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
     d82:	68a1      	ldr	r1, [r4, #8]
     d84:	9809      	ldr	r0, [sp, #36]	; 0x24
     d86:	f003 ff06 	bl	4b96 <boot_write_swap_size>
            rc = boot_write_magic(fap_primary_slot);
     d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
     d8c:	f000 fa44 	bl	1218 <boot_write_magic>
     d90:	e7bd      	b.n	d0e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x156>
                rc = boot_write_image_ok(fap_primary_slot);
     d92:	9809      	ldr	r0, [sp, #36]	; 0x24
     d94:	f003 fee6 	bl	4b64 <boot_write_image_ok>
     d98:	e7ef      	b.n	d7a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1c2>
                rc = boot_write_swap_info(fap_primary_slot,
     d9a:	2200      	movs	r2, #0
     d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
     d9e:	f003 fee8 	bl	4b72 <boot_write_swap_info>
     da2:	e7ee      	b.n	d82 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ca>
     da4:	20001874 	.word	0x20001874

00000da8 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	b084      	sub	sp, #16
     dac:	4605      	mov	r5, r0
     dae:	460e      	mov	r6, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     db0:	2300      	movs	r3, #0
     db2:	9301      	str	r3, [sp, #4]
     db4:	9302      	str	r3, [sp, #8]
    image_index = BOOT_CURR_IMG(state);

    if (bs->idx == BOOT_STATUS_IDX_0 && bs->state == BOOT_STATUS_STATE_0) {
     db6:	680b      	ldr	r3, [r1, #0]
     db8:	2b01      	cmp	r3, #1
     dba:	d102      	bne.n	dc2 <boot_swap_image+0x1a>
     dbc:	790b      	ldrb	r3, [r1, #4]
     dbe:	2b01      	cmp	r3, #1
     dc0:	d00a      	beq.n	dd8 <boot_swap_image+0x30>
    } else {
        /*
         * If a swap was under way, the swap_size should already be present
         * in the trailer...
         */
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     dc2:	f106 0108 	add.w	r1, r6, #8
     dc6:	2000      	movs	r0, #0
     dc8:	f003 feaa 	bl	4b20 <boot_read_swap_size>
        assert(rc == 0);

        copy_size = bs->swap_size;
     dcc:	68b3      	ldr	r3, [r6, #8]
     dce:	9301      	str	r3, [sp, #4]
{
     dd0:	2000      	movs	r0, #0
     dd2:	4603      	mov	r3, r0
     dd4:	4601      	mov	r1, r0
     dd6:	e01b      	b.n	e10 <boot_swap_image+0x68>
        if (hdr->ih_magic == IMAGE_MAGIC) {
     dd8:	6802      	ldr	r2, [r0, #0]
     dda:	4b31      	ldr	r3, [pc, #196]	; (ea0 <boot_swap_image+0xf8>)
     ddc:	429a      	cmp	r2, r3
     dde:	d00b      	beq.n	df8 <boot_swap_image+0x50>
        if (hdr->ih_magic == IMAGE_MAGIC) {
     de0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     de2:	4b2f      	ldr	r3, [pc, #188]	; (ea0 <boot_swap_image+0xf8>)
     de4:	429a      	cmp	r2, r3
     de6:	d00c      	beq.n	e02 <boot_swap_image+0x5a>
        if (size > copy_size) {
     de8:	9b02      	ldr	r3, [sp, #8]
     dea:	9a01      	ldr	r2, [sp, #4]
     dec:	4293      	cmp	r3, r2
     dee:	d900      	bls.n	df2 <boot_swap_image+0x4a>
            copy_size = size;
     df0:	9301      	str	r3, [sp, #4]
        bs->swap_size = copy_size;
     df2:	9b01      	ldr	r3, [sp, #4]
     df4:	60b3      	str	r3, [r6, #8]
     df6:	e7eb      	b.n	dd0 <boot_swap_image+0x28>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     df8:	aa01      	add	r2, sp, #4
     dfa:	2100      	movs	r1, #0
     dfc:	f003 fc36 	bl	466c <boot_read_image_size>
     e00:	e7ee      	b.n	de0 <boot_swap_image+0x38>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     e02:	aa02      	add	r2, sp, #8
     e04:	2101      	movs	r1, #1
     e06:	4628      	mov	r0, r5
     e08:	f003 fc30 	bl	466c <boot_read_image_size>
     e0c:	e7ec      	b.n	de8 <boot_swap_image+0x40>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
     e0e:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
     e10:	9a01      	ldr	r2, [sp, #4]
     e12:	429a      	cmp	r2, r3
     e14:	d801      	bhi.n	e1a <boot_swap_image+0x72>
     e16:	4283      	cmp	r3, r0
     e18:	d204      	bcs.n	e24 <boot_swap_image+0x7c>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     e1a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
     e1c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
     e20:	6864      	ldr	r4, [r4, #4]
           primary_slot_size += boot_img_sector_size(state,
     e22:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
     e24:	4282      	cmp	r2, r0
     e26:	d801      	bhi.n	e2c <boot_swap_image+0x84>
     e28:	4283      	cmp	r3, r0
     e2a:	d904      	bls.n	e36 <boot_swap_image+0x8e>
     e2c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
     e2e:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
     e32:	6864      	ldr	r4, [r4, #4]
           secondary_slot_size += boot_img_sector_size(state,
     e34:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
     e36:	429a      	cmp	r2, r3
     e38:	d8e9      	bhi.n	e0e <boot_swap_image+0x66>
     e3a:	4282      	cmp	r2, r0
     e3c:	d8e7      	bhi.n	e0e <boot_swap_image+0x66>
                secondary_slot_size >= copy_size &&
     e3e:	4298      	cmp	r0, r3
     e40:	d1e5      	bne.n	e0e <boot_swap_image+0x66>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
     e42:	2400      	movs	r4, #0
     e44:	e002      	b.n	e4c <boot_swap_image+0xa4>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
     e46:	9903      	ldr	r1, [sp, #12]
     e48:	3901      	subs	r1, #1
        swap_idx++;
     e4a:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
     e4c:	2900      	cmp	r1, #0
     e4e:	db0e      	blt.n	e6e <boot_swap_image+0xc6>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
     e50:	aa03      	add	r2, sp, #12
     e52:	4628      	mov	r0, r5
     e54:	f003 fb35 	bl	44c2 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
     e58:	6833      	ldr	r3, [r6, #0]
     e5a:	3b01      	subs	r3, #1
     e5c:	42a3      	cmp	r3, r4
     e5e:	d8f2      	bhi.n	e46 <boot_swap_image+0x9e>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
     e60:	4633      	mov	r3, r6
     e62:	462a      	mov	r2, r5
     e64:	4601      	mov	r1, r0
     e66:	9803      	ldr	r0, [sp, #12]
     e68:	f7ff fe6a 	bl	b40 <boot_swap_sectors>
     e6c:	e7eb      	b.n	e46 <boot_swap_image+0x9e>
    }

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    if (boot_status_fails > 0) {
     e6e:	4b0d      	ldr	r3, [pc, #52]	; (ea4 <boot_swap_image+0xfc>)
     e70:	681a      	ldr	r2, [r3, #0]
     e72:	2a00      	cmp	r2, #0
     e74:	dd10      	ble.n	e98 <boot_swap_image+0xf0>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     e76:	f04f 0000 	mov.w	r0, #0
     e7a:	2302      	movs	r3, #2
     e7c:	f363 0002 	bfi	r0, r3, #0, #3
     e80:	f36f 00c5 	bfc	r0, #3, #3
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <boot_swap_image+0x100>)
     e86:	4909      	ldr	r1, [pc, #36]	; (eac <boot_swap_image+0x104>)
     e88:	1a5b      	subs	r3, r3, r1
     e8a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e8e:	f363 108f 	bfi	r0, r3, #6, #10
     e92:	4907      	ldr	r1, [pc, #28]	; (eb0 <boot_swap_image+0x108>)
     e94:	f004 fa84 	bl	53a0 <log_string_sync>
                     boot_status_fails);
    }
#endif

    return 0;
}
     e98:	2000      	movs	r0, #0
     e9a:	b004      	add	sp, #16
     e9c:	bd70      	pop	{r4, r5, r6, pc}
     e9e:	bf00      	nop
     ea0:	96f3b83d 	.word	0x96f3b83d
     ea4:	20001874 	.word	0x20001874
     ea8:	00007f4c 	.word	0x00007f4c
     eac:	00007f44 	.word	0x00007f44
     eb0:	000082e0 	.word	0x000082e0

00000eb4 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     eb4:	b538      	push	{r3, r4, r5, lr}
     eb6:	4604      	mov	r4, r0
     eb8:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     eba:	f7ff ff75 	bl	da8 <boot_swap_image>
     ebe:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ec0:	79ab      	ldrb	r3, [r5, #6]
     ec2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ec6:	79ab      	ldrb	r3, [r5, #6]
     ec8:	3b03      	subs	r3, #3
     eca:	b2db      	uxtb	r3, r3
     ecc:	2b01      	cmp	r3, #1
     ece:	d914      	bls.n	efa <boot_complete_partial_swap+0x46>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     ed0:	79ab      	ldrb	r3, [r5, #6]
     ed2:	2b02      	cmp	r3, #2
     ed4:	d003      	beq.n	ede <boot_complete_partial_swap+0x2a>
     ed6:	2b04      	cmp	r3, #4
     ed8:	d001      	beq.n	ede <boot_complete_partial_swap+0x2a>
     eda:	2b03      	cmp	r3, #3
     edc:	d107      	bne.n	eee <boot_complete_partial_swap+0x3a>
        rc = boot_set_copy_done(BOOT_CURR_IMG(state));
     ede:	2000      	movs	r0, #0
     ee0:	f003 fc84 	bl	47ec <boot_set_copy_done>
        if (rc != 0) {
     ee4:	4602      	mov	r2, r0
     ee6:	b110      	cbz	r0, eee <boot_complete_partial_swap+0x3a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ee8:	23ff      	movs	r3, #255	; 0xff
     eea:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     eee:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
     ef2:	2bff      	cmp	r3, #255	; 0xff
     ef4:	d00b      	beq.n	f0e <boot_complete_partial_swap+0x5a>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
     ef6:	4610      	mov	r0, r2
     ef8:	bd38      	pop	{r3, r4, r5, pc}
        rc = boot_set_image_ok(BOOT_CURR_IMG(state));
     efa:	2000      	movs	r0, #0
     efc:	f003 fc89 	bl	4812 <boot_set_image_ok>
        if (rc != 0) {
     f00:	4602      	mov	r2, r0
     f02:	2800      	cmp	r0, #0
     f04:	d0e4      	beq.n	ed0 <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     f06:	23ff      	movs	r3, #255	; 0xff
     f08:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
     f0c:	e7e0      	b.n	ed0 <boot_complete_partial_swap+0x1c>
        BOOT_LOG_ERR("panic!");
     f0e:	f04f 0000 	mov.w	r0, #0
     f12:	2301      	movs	r3, #1
     f14:	f363 0002 	bfi	r0, r3, #0, #3
     f18:	f36f 00c5 	bfc	r0, #3, #3
     f1c:	4b05      	ldr	r3, [pc, #20]	; (f34 <boot_complete_partial_swap+0x80>)
     f1e:	4a06      	ldr	r2, [pc, #24]	; (f38 <boot_complete_partial_swap+0x84>)
     f20:	1a9b      	subs	r3, r3, r2
     f22:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     f26:	f363 108f 	bfi	r0, r3, #6, #10
     f2a:	4904      	ldr	r1, [pc, #16]	; (f3c <boot_complete_partial_swap+0x88>)
     f2c:	f004 fa38 	bl	53a0 <log_string_sync>
     f30:	e7fe      	b.n	f30 <boot_complete_partial_swap+0x7c>
     f32:	bf00      	nop
     f34:	00007f4c 	.word	0x00007f4c
     f38:	00007f44 	.word	0x00007f44
     f3c:	00008098 	.word	0x00008098

00000f40 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
     f40:	b538      	push	{r3, r4, r5, lr}
     f42:	4604      	mov	r4, r0
     f44:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
     f46:	f003 fb2e 	bl	45a6 <boot_read_sectors>
    if (rc != 0) {
     f4a:	b960      	cbnz	r0, f66 <boot_prepare_image_for_update+0x26>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false);
     f4c:	2100      	movs	r1, #0
     f4e:	4620      	mov	r0, r4
     f50:	f003 fbfa 	bl	4748 <boot_read_image_headers>
    if (rc != 0) {
     f54:	b9e8      	cbnz	r0, f92 <boot_prepare_image_for_update+0x52>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
     f56:	4620      	mov	r0, r4
     f58:	f7ff fb56 	bl	608 <boot_slots_compatible>
     f5c:	bb78      	cbnz	r0, fbe <boot_prepare_image_for_update+0x7e>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     f5e:	2301      	movs	r3, #1
     f60:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
     f64:	e014      	b.n	f90 <boot_prepare_image_for_update+0x50>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     f66:	f04f 0000 	mov.w	r0, #0
     f6a:	2302      	movs	r3, #2
     f6c:	f363 0002 	bfi	r0, r3, #0, #3
     f70:	f36f 00c5 	bfc	r0, #3, #3
     f74:	4b34      	ldr	r3, [pc, #208]	; (1048 <CONFIG_AT_HOST_CMD_MAX_LEN+0x48>)
     f76:	4a35      	ldr	r2, [pc, #212]	; (104c <CONFIG_AT_HOST_CMD_MAX_LEN+0x4c>)
     f78:	1a9b      	subs	r3, r3, r2
     f7a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     f7e:	f363 108f 	bfi	r0, r3, #6, #10
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	4932      	ldr	r1, [pc, #200]	; (1050 <CONFIG_AT_HOST_CMD_MAX_LEN+0x50>)
     f86:	f004 fa0b 	bl	53a0 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     f8a:	2301      	movs	r3, #1
     f8c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    }
}
     f90:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     f92:	f04f 0000 	mov.w	r0, #0
     f96:	2302      	movs	r3, #2
     f98:	f363 0002 	bfi	r0, r3, #0, #3
     f9c:	f36f 00c5 	bfc	r0, #3, #3
     fa0:	4b29      	ldr	r3, [pc, #164]	; (1048 <CONFIG_AT_HOST_CMD_MAX_LEN+0x48>)
     fa2:	4a2a      	ldr	r2, [pc, #168]	; (104c <CONFIG_AT_HOST_CMD_MAX_LEN+0x4c>)
     fa4:	1a9b      	subs	r3, r3, r2
     fa6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     faa:	f363 108f 	bfi	r0, r3, #6, #10
     fae:	2200      	movs	r2, #0
     fb0:	4928      	ldr	r1, [pc, #160]	; (1054 <CONFIG_AT_HOST_CMD_MAX_LEN+0x54>)
     fb2:	f004 f9f5 	bl	53a0 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     fb6:	2301      	movs	r3, #1
     fb8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
     fbc:	e7e8      	b.n	f90 <boot_prepare_image_for_update+0x50>
        rc = boot_read_status(state, bs);
     fbe:	4629      	mov	r1, r5
     fc0:	4620      	mov	r0, r4
     fc2:	f003 fb0e 	bl	45e2 <boot_read_status>
        if (rc != 0) {
     fc6:	b988      	cbnz	r0, fec <boot_prepare_image_for_update+0xac>
        if (bs->idx != BOOT_STATUS_IDX_0 || bs->state != BOOT_STATUS_STATE_0) {
     fc8:	682b      	ldr	r3, [r5, #0]
     fca:	2b01      	cmp	r3, #1
     fcc:	d102      	bne.n	fd4 <boot_prepare_image_for_update+0x94>
     fce:	792b      	ldrb	r3, [r5, #4]
     fd0:	2b01      	cmp	r3, #1
     fd2:	d021      	beq.n	1018 <CONFIG_AT_HOST_CMD_MAX_LEN+0x18>
            rc = boot_complete_partial_swap(state, bs);
     fd4:	4629      	mov	r1, r5
     fd6:	4620      	mov	r0, r4
     fd8:	f7ff ff6c 	bl	eb4 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false);
     fdc:	2100      	movs	r1, #0
     fde:	4620      	mov	r0, r4
     fe0:	f003 fbb2 	bl	4748 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     fe4:	2301      	movs	r3, #1
     fe6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
     fea:	e7d1      	b.n	f90 <boot_prepare_image_for_update+0x50>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     fec:	f04f 0000 	mov.w	r0, #0
     ff0:	2302      	movs	r3, #2
     ff2:	f363 0002 	bfi	r0, r3, #0, #3
     ff6:	f36f 00c5 	bfc	r0, #3, #3
     ffa:	4b13      	ldr	r3, [pc, #76]	; (1048 <CONFIG_AT_HOST_CMD_MAX_LEN+0x48>)
     ffc:	4a13      	ldr	r2, [pc, #76]	; (104c <CONFIG_AT_HOST_CMD_MAX_LEN+0x4c>)
     ffe:	1a9b      	subs	r3, r3, r2
    1000:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1004:	f363 108f 	bfi	r0, r3, #6, #10
    1008:	2200      	movs	r2, #0
    100a:	4913      	ldr	r1, [pc, #76]	; (1058 <CONFIG_AT_HOST_CMD_MAX_LEN+0x58>)
    100c:	f004 f9c8 	bl	53a0 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1010:	2301      	movs	r3, #1
    1012:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    1016:	e7bb      	b.n	f90 <boot_prepare_image_for_update+0x50>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    1018:	79ab      	ldrb	r3, [r5, #6]
    101a:	2b01      	cmp	r3, #1
    101c:	d009      	beq.n	1032 <CONFIG_AT_HOST_CMD_MAX_LEN+0x32>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    101e:	462a      	mov	r2, r5
    1020:	2101      	movs	r1, #1
    1022:	4620      	mov	r0, r4
    1024:	f7ff fd2a 	bl	a7c <boot_validate_slot>
    1028:	b150      	cbz	r0, 1040 <CONFIG_AT_HOST_CMD_MAX_LEN+0x40>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    102a:	2305      	movs	r3, #5
    102c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1030:	e7ae      	b.n	f90 <boot_prepare_image_for_update+0x50>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    1032:	4629      	mov	r1, r5
    1034:	4620      	mov	r0, r4
    1036:	f003 fc0b 	bl	4850 <boot_validated_swap_type>
    103a:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    103e:	e7a7      	b.n	f90 <boot_prepare_image_for_update+0x50>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    1040:	79ab      	ldrb	r3, [r5, #6]
    1042:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1046:	e7a3      	b.n	f90 <boot_prepare_image_for_update+0x50>
    1048:	00007f4c 	.word	0x00007f4c
    104c:	00007f44 	.word	0x00007f44
    1050:	000080a0 	.word	0x000080a0
    1054:	000080e0 	.word	0x000080e0
    1058:	00008108 	.word	0x00008108

0000105c <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
    105e:	b085      	sub	sp, #20
    1060:	4604      	mov	r4, r0
    1062:	460e      	mov	r6, r1
     */
    TARGET_STATIC boot_sector_t primary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];

    memset(state, 0, sizeof(struct boot_loader_state));
    1064:	2268      	movs	r2, #104	; 0x68
    1066:	2100      	movs	r1, #0
    1068:	f004 fcc0 	bl	59ec <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    106c:	4b3e      	ldr	r3, [pc, #248]	; (1168 <context_boot_go+0x10c>)
    106e:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    1070:	4b3e      	ldr	r3, [pc, #248]	; (116c <context_boot_go+0x110>)
    1072:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
        state->scratch.sectors = scratch_sectors;
    1074:	4b3e      	ldr	r3, [pc, #248]	; (1170 <context_boot_go+0x114>)
    1076:	65e3      	str	r3, [r4, #92]	; 0x5c

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1078:	2500      	movs	r5, #0
    107a:	e00c      	b.n	1096 <context_boot_go+0x3a>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    107c:	4629      	mov	r1, r5
    107e:	2000      	movs	r0, #0
    1080:	f003 f9f0 	bl	4464 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    1084:	212c      	movs	r1, #44	; 0x2c
    1086:	fb01 f105 	mul.w	r1, r1, r5
    108a:	3120      	adds	r1, #32
    108c:	4421      	add	r1, r4
    108e:	b2c0      	uxtb	r0, r0
    1090:	f000 fe46 	bl	1d20 <flash_area_open>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1094:	3501      	adds	r5, #1
    1096:	2d01      	cmp	r5, #1
    1098:	d9f0      	bls.n	107c <context_boot_go+0x20>
            assert(rc == 0);
        }
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    109a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    109e:	2007      	movs	r0, #7
    10a0:	f000 fe3e 	bl	1d20 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    10a4:	a901      	add	r1, sp, #4
    10a6:	4620      	mov	r0, r4
    10a8:	f7ff ff4a 	bl	f40 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    10ac:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        bs.idx = BOOT_STATUS_IDX_0;
        bs.state = BOOT_STATUS_STATE_0;
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    10b0:	f88d 300a 	strb.w	r3, [sp, #10]

        switch (BOOT_SWAP_TYPE(state)) {
    10b4:	3b01      	subs	r3, #1
    10b6:	2b04      	cmp	r3, #4
    10b8:	d830      	bhi.n	111c <context_boot_go+0xc0>
    10ba:	e8df f003 	tbb	[pc, r3]
    10be:	0307      	.short	0x0307
    10c0:	0303      	.short	0x0303
    10c2:	26          	.byte	0x26
    10c3:	00          	.byte	0x00
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    10c4:	a901      	add	r1, sp, #4
    10c6:	4620      	mov	r0, r4
    10c8:	f003 fc17 	bl	48fa <boot_perform_update>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    10cc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    10d0:	2bff      	cmp	r3, #255	; 0xff
    10d2:	d027      	beq.n	1124 <context_boot_go+0xc8>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    10d4:	2b01      	cmp	r3, #1
    10d6:	d005      	beq.n	10e4 <context_boot_go+0x88>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false);
    10d8:	2100      	movs	r1, #0
    10da:	4620      	mov	r0, r4
    10dc:	f003 fb34 	bl	4748 <boot_read_image_headers>
            if (rc != 0) {
    10e0:	4607      	mov	r7, r0
    10e2:	b968      	cbnz	r0, 1100 <context_boot_go+0xa4>
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
		rc = boot_validate_slot(state, BOOT_PRIMARY_SLOT, NULL);
    10e4:	2200      	movs	r2, #0
    10e6:	4611      	mov	r1, r2
    10e8:	4620      	mov	r0, r4
    10ea:	f7ff fcc7 	bl	a7c <boot_validate_slot>
		if (rc != 0) {
    10ee:	4607      	mov	r7, r0
    10f0:	bb50      	cbnz	r0, 1148 <context_boot_go+0xec>
#if (BOOT_IMAGE_NUMBER > 1)
    /* Always boot from the primary slot of Image 0. */
    BOOT_CURR_IMG(state) = 0;
#endif

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    10f2:	6a23      	ldr	r3, [r4, #32]
    10f4:	785b      	ldrb	r3, [r3, #1]
    10f6:	7133      	strb	r3, [r6, #4]
    return BOOT_IMG(state, slot).area->fa_off;
    10f8:	6a23      	ldr	r3, [r4, #32]
    10fa:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    10fc:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    10fe:	6034      	str	r4, [r6, #0]

out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        flash_area_close(BOOT_SCRATCH_AREA(state));
    1100:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1102:	f004 fa4f 	bl	55a4 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1106:	2500      	movs	r5, #0
    1108:	e029      	b.n	115e <context_boot_go+0x102>
            rc = boot_set_image_ok(BOOT_CURR_IMG(state));
    110a:	2000      	movs	r0, #0
    110c:	f003 fb81 	bl	4812 <boot_set_image_ok>
            if (rc != 0) {
    1110:	2800      	cmp	r0, #0
    1112:	d0db      	beq.n	10cc <context_boot_go+0x70>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1114:	23ff      	movs	r3, #255	; 0xff
    1116:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    111a:	e7d7      	b.n	10cc <context_boot_go+0x70>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    111c:	23ff      	movs	r3, #255	; 0xff
    111e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1122:	e7d3      	b.n	10cc <context_boot_go+0x70>
            BOOT_LOG_ERR("panic!");
    1124:	f04f 0000 	mov.w	r0, #0
    1128:	2301      	movs	r3, #1
    112a:	f363 0002 	bfi	r0, r3, #0, #3
    112e:	f36f 00c5 	bfc	r0, #3, #3
    1132:	4b10      	ldr	r3, [pc, #64]	; (1174 <context_boot_go+0x118>)
    1134:	4a10      	ldr	r2, [pc, #64]	; (1178 <context_boot_go+0x11c>)
    1136:	1a9b      	subs	r3, r3, r2
    1138:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    113c:	f363 108f 	bfi	r0, r3, #6, #10
    1140:	490e      	ldr	r1, [pc, #56]	; (117c <context_boot_go+0x120>)
    1142:	f004 f92d 	bl	53a0 <log_string_sync>
    1146:	e7fe      	b.n	1146 <context_boot_go+0xea>
			rc = BOOT_EBADIMAGE;
    1148:	2703      	movs	r7, #3
    114a:	e7d9      	b.n	1100 <context_boot_go+0xa4>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    114c:	f1c5 0301 	rsb	r3, r5, #1
    1150:	222c      	movs	r2, #44	; 0x2c
    1152:	fb02 4303 	mla	r3, r2, r3, r4
    1156:	6a18      	ldr	r0, [r3, #32]
    1158:	f004 fa24 	bl	55a4 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    115c:	3501      	adds	r5, #1
    115e:	2d01      	cmp	r5, #1
    1160:	d9f4      	bls.n	114c <context_boot_go+0xf0>
        }
    }
    return rc;
}
    1162:	4638      	mov	r0, r7
    1164:	b005      	add	sp, #20
    1166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1168:	20001c78 	.word	0x20001c78
    116c:	20002478 	.word	0x20002478
    1170:	20002078 	.word	0x20002078
    1174:	00007f4c 	.word	0x00007f4c
    1178:	00007f44 	.word	0x00007f44
    117c:	00008098 	.word	0x00008098

00001180 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    1180:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    1182:	4601      	mov	r1, r0
    1184:	4801      	ldr	r0, [pc, #4]	; (118c <boot_go+0xc>)
    1186:	f7ff ff69 	bl	105c <context_boot_go>
}
    118a:	bd08      	pop	{r3, pc}
    118c:	2000180c 	.word	0x2000180c

00001190 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
    1190:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    1192:	2210      	movs	r2, #16
    1194:	4903      	ldr	r1, [pc, #12]	; (11a4 <boot_magic_decode+0x14>)
    1196:	f004 fbec 	bl	5972 <memcmp>
    119a:	b908      	cbnz	r0, 11a0 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    119c:	2001      	movs	r0, #1
    }
    return BOOT_MAGIC_BAD;
}
    119e:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    11a0:	2002      	movs	r0, #2
    11a2:	e7fc      	b.n	119e <boot_magic_decode+0xe>
    11a4:	00008344 	.word	0x00008344

000011a8 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	b086      	sub	sp, #24
    11ac:	460e      	mov	r6, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    11ae:	4b18      	ldr	r3, [pc, #96]	; (1210 <boot_find_status+0x68>)
    11b0:	881b      	ldrh	r3, [r3, #0]
    11b2:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    11b6:	2400      	movs	r4, #0
    11b8:	e007      	b.n	11ca <boot_find_status+0x22>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
    11ba:	6830      	ldr	r0, [r6, #0]
    11bc:	f004 f9f2 	bl	55a4 <flash_area_close>
            return rc;
    11c0:	e023      	b.n	120a <boot_find_status+0x62>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
    11c2:	6830      	ldr	r0, [r6, #0]
    11c4:	f004 f9ee 	bl	55a4 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    11c8:	3401      	adds	r4, #1
    11ca:	2c01      	cmp	r4, #1
    11cc:	d81b      	bhi.n	1206 <boot_find_status+0x5e>
        rc = flash_area_open(areas[i], fap);
    11ce:	4631      	mov	r1, r6
    11d0:	ab06      	add	r3, sp, #24
    11d2:	4423      	add	r3, r4
    11d4:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    11d8:	f000 fda2 	bl	1d20 <flash_area_open>
        if (rc != 0) {
    11dc:	4605      	mov	r5, r0
    11de:	b9a0      	cbnz	r0, 120a <boot_find_status+0x62>
        off = boot_magic_off(*fap);
    11e0:	6830      	ldr	r0, [r6, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    11e2:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    11e4:	2310      	movs	r3, #16
    11e6:	aa02      	add	r2, sp, #8
    11e8:	3910      	subs	r1, #16
    11ea:	f004 f9dc 	bl	55a6 <flash_area_read>
        if (rc != 0) {
    11ee:	4605      	mov	r5, r0
    11f0:	2800      	cmp	r0, #0
    11f2:	d1e2      	bne.n	11ba <boot_find_status+0x12>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    11f4:	2210      	movs	r2, #16
    11f6:	4907      	ldr	r1, [pc, #28]	; (1214 <boot_find_status+0x6c>)
    11f8:	a802      	add	r0, sp, #8
    11fa:	f004 fbba 	bl	5972 <memcmp>
    11fe:	4605      	mov	r5, r0
    1200:	2800      	cmp	r0, #0
    1202:	d1de      	bne.n	11c2 <boot_find_status+0x1a>
    1204:	e001      	b.n	120a <boot_find_status+0x62>
    }

    /* If we got here, no magic was found */
    return -1;
    1206:	f04f 35ff 	mov.w	r5, #4294967295
}
    120a:	4628      	mov	r0, r5
    120c:	b006      	add	sp, #24
    120e:	bd70      	pop	{r4, r5, r6, pc}
    1210:	00007f84 	.word	0x00007f84
    1214:	00008344 	.word	0x00008344

00001218 <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
    1218:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    121a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    121c:	2310      	movs	r3, #16
    121e:	4a05      	ldr	r2, [pc, #20]	; (1234 <boot_write_magic+0x1c>)
    1220:	3910      	subs	r1, #16
    1222:	f004 f9df 	bl	55e4 <flash_area_write>
    if (rc != 0) {
    1226:	4603      	mov	r3, r0
    1228:	b908      	cbnz	r0, 122e <boot_write_magic+0x16>
        return BOOT_EFLASH;
    }

    return 0;
}
    122a:	4618      	mov	r0, r3
    122c:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    122e:	2301      	movs	r3, #1
    1230:	e7fb      	b.n	122a <boot_write_magic+0x12>
    1232:	bf00      	nop
    1234:	00008344 	.word	0x00008344

00001238 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    1238:	b530      	push	{r4, r5, lr}
    123a:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    123c:	a902      	add	r1, sp, #8
    123e:	2002      	movs	r0, #2
    1240:	f003 fc59 	bl	4af6 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    1244:	2800      	cmp	r0, #0
    1246:	d16c      	bne.n	1322 <boot_swap_type_multi+0xea>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1248:	4669      	mov	r1, sp
    124a:	2006      	movs	r0, #6
    124c:	f003 fc53 	bl	4af6 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    1250:	2800      	cmp	r0, #0
    1252:	d169      	bne.n	1328 <boot_swap_type_multi+0xf0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    1254:	2400      	movs	r4, #0
    1256:	e007      	b.n	1268 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1258:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    125a:	2b04      	cmp	r3, #4
    125c:	d028      	beq.n	12b0 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    125e:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1262:	4293      	cmp	r3, r2
    1264:	d024      	beq.n	12b0 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    1266:	3401      	adds	r4, #1
    1268:	2c02      	cmp	r4, #2
    126a:	d847      	bhi.n	12fc <boot_swap_type_multi+0xc4>
        table = boot_swap_tables + i;
    126c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1270:	005b      	lsls	r3, r3, #1
    1272:	4a2e      	ldr	r2, [pc, #184]	; (132c <boot_swap_type_multi+0xf4>)
    1274:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    1276:	f89d 1008 	ldrb.w	r1, [sp, #8]
    127a:	5cd0      	ldrb	r0, [r2, r3]
    127c:	f003 fba7 	bl	49ce <boot_magic_compatible_check>
    1280:	2800      	cmp	r0, #0
    1282:	d0f0      	beq.n	1266 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    1284:	f89d 1000 	ldrb.w	r1, [sp]
    1288:	7868      	ldrb	r0, [r5, #1]
    128a:	f003 fba0 	bl	49ce <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    128e:	2800      	cmp	r0, #0
    1290:	d0e9      	beq.n	1266 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    1292:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    1294:	2b04      	cmp	r3, #4
    1296:	d003      	beq.n	12a0 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    1298:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    129c:	4293      	cmp	r3, r2
    129e:	d1e2      	bne.n	1266 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    12a0:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    12a2:	2b04      	cmp	r3, #4
    12a4:	d0d8      	beq.n	1258 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    12a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    12aa:	4293      	cmp	r3, r2
    12ac:	d1db      	bne.n	1266 <boot_swap_type_multi+0x2e>
    12ae:	e7d3      	b.n	1258 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    12b0:	f04f 0000 	mov.w	r0, #0
    12b4:	2303      	movs	r3, #3
    12b6:	f363 0002 	bfi	r0, r3, #0, #3
    12ba:	f36f 00c5 	bfc	r0, #3, #3
    12be:	4b1c      	ldr	r3, [pc, #112]	; (1330 <boot_swap_type_multi+0xf8>)
    12c0:	4a1c      	ldr	r2, [pc, #112]	; (1334 <boot_swap_type_multi+0xfc>)
    12c2:	1a9b      	subs	r3, r3, r2
    12c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    12c8:	f363 108f 	bfi	r0, r3, #6, #10
    12cc:	796b      	ldrb	r3, [r5, #5]
    12ce:	2b02      	cmp	r3, #2
    12d0:	d007      	beq.n	12e2 <boot_swap_type_multi+0xaa>
    12d2:	2b03      	cmp	r3, #3
    12d4:	d010      	beq.n	12f8 <boot_swap_type_multi+0xc0>
    12d6:	2b04      	cmp	r3, #4
    12d8:	d001      	beq.n	12de <boot_swap_type_multi+0xa6>
    12da:	4a17      	ldr	r2, [pc, #92]	; (1338 <boot_swap_type_multi+0x100>)
    12dc:	e002      	b.n	12e4 <boot_swap_type_multi+0xac>
    12de:	4a17      	ldr	r2, [pc, #92]	; (133c <boot_swap_type_multi+0x104>)
    12e0:	e000      	b.n	12e4 <boot_swap_type_multi+0xac>
    12e2:	4a17      	ldr	r2, [pc, #92]	; (1340 <boot_swap_type_multi+0x108>)
    12e4:	4917      	ldr	r1, [pc, #92]	; (1344 <boot_swap_type_multi+0x10c>)
    12e6:	f004 f85b 	bl	53a0 <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    12ea:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    12ec:	1e83      	subs	r3, r0, #2
    12ee:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    12f0:	2b02      	cmp	r3, #2
    12f2:	d917      	bls.n	1324 <boot_swap_type_multi+0xec>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    12f4:	20ff      	movs	r0, #255	; 0xff
    12f6:	e015      	b.n	1324 <boot_swap_type_multi+0xec>
            BOOT_LOG_INF("Swap type: %s",
    12f8:	4a13      	ldr	r2, [pc, #76]	; (1348 <boot_swap_type_multi+0x110>)
    12fa:	e7f3      	b.n	12e4 <boot_swap_type_multi+0xac>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    12fc:	f04f 0000 	mov.w	r0, #0
    1300:	2303      	movs	r3, #3
    1302:	f363 0002 	bfi	r0, r3, #0, #3
    1306:	f36f 00c5 	bfc	r0, #3, #3
    130a:	4b09      	ldr	r3, [pc, #36]	; (1330 <boot_swap_type_multi+0xf8>)
    130c:	4a09      	ldr	r2, [pc, #36]	; (1334 <boot_swap_type_multi+0xfc>)
    130e:	1a9b      	subs	r3, r3, r2
    1310:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1314:	f363 108f 	bfi	r0, r3, #6, #10
    1318:	490c      	ldr	r1, [pc, #48]	; (134c <boot_swap_type_multi+0x114>)
    131a:	f004 f841 	bl	53a0 <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
    131e:	2001      	movs	r0, #1
    1320:	e000      	b.n	1324 <boot_swap_type_multi+0xec>
        return BOOT_SWAP_TYPE_PANIC;
    1322:	20ff      	movs	r0, #255	; 0xff
}
    1324:	b005      	add	sp, #20
    1326:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    1328:	20ff      	movs	r0, #255	; 0xff
    132a:	e7fb      	b.n	1324 <boot_swap_type_multi+0xec>
    132c:	00008354 	.word	0x00008354
    1330:	00007f4c 	.word	0x00007f4c
    1334:	00007f44 	.word	0x00007f44
    1338:	00008234 	.word	0x00008234
    133c:	00008378 	.word	0x00008378
    1340:	00008370 	.word	0x00008370
    1344:	00008380 	.word	0x00008380
    1348:	00008368 	.word	0x00008368
    134c:	00008390 	.word	0x00008390

00001350 <bootutil_find_key>:
#endif

#ifdef EXPECTED_SIG_TLV
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
    1350:	b570      	push	{r4, r5, r6, lr}
    1352:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
    1354:	2920      	cmp	r1, #32
    1356:	d828      	bhi.n	13aa <bootutil_find_key+0x5a>
    1358:	460d      	mov	r5, r1
    135a:	4606      	mov	r6, r0
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
    135c:	2400      	movs	r4, #0
    135e:	4b14      	ldr	r3, [pc, #80]	; (13b0 <bootutil_find_key+0x60>)
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	42a3      	cmp	r3, r4
    1364:	dd1c      	ble.n	13a0 <bootutil_find_key+0x50>
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    1366:	a809      	add	r0, sp, #36	; 0x24
    1368:	f006 f9f2 	bl	7750 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    136c:	2100      	movs	r1, #0
    136e:	a809      	add	r0, sp, #36	; 0x24
    1370:	f002 f890 	bl	3494 <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
    1374:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <bootutil_find_key+0x64>)
    1376:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    137a:	6852      	ldr	r2, [r2, #4]

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    137c:	6812      	ldr	r2, [r2, #0]
    137e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    1382:	a809      	add	r0, sp, #36	; 0x24
    1384:	f006 f9ea 	bl	775c <mbedtls_sha256_update_ret>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    1388:	a901      	add	r1, sp, #4
    138a:	a809      	add	r0, sp, #36	; 0x24
    138c:	f006 fa29 	bl	77e2 <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
    1390:	462a      	mov	r2, r5
    1392:	4631      	mov	r1, r6
    1394:	a801      	add	r0, sp, #4
    1396:	f004 faec 	bl	5972 <memcmp>
    139a:	b118      	cbz	r0, 13a4 <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
    139c:	3401      	adds	r4, #1
    139e:	e7de      	b.n	135e <bootutil_find_key+0xe>
            return i;
        }
    }
    return -1;
    13a0:	f04f 34ff 	mov.w	r4, #4294967295
}
    13a4:	4620      	mov	r0, r4
    13a6:	b024      	add	sp, #144	; 0x90
    13a8:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    13aa:	f04f 34ff 	mov.w	r4, #4294967295
    13ae:	e7f9      	b.n	13a4 <bootutil_find_key+0x54>
    13b0:	0000808c 	.word	0x0000808c
    13b4:	00008090 	.word	0x00008090

000013b8 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    13b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13bc:	b0d6      	sub	sp, #344	; 0x158
    13be:	4617      	mov	r7, r2
    13c0:	461c      	mov	r4, r3
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    13c2:	9d5f      	ldr	r5, [sp, #380]	; 0x17c
    13c4:	9504      	str	r5, [sp, #16]
    13c6:	9d5e      	ldr	r5, [sp, #376]	; 0x178
    13c8:	9503      	str	r5, [sp, #12]
    13ca:	ad06      	add	r5, sp, #24
    13cc:	9502      	str	r5, [sp, #8]
    13ce:	9d5d      	ldr	r5, [sp, #372]	; 0x174
    13d0:	9501      	str	r5, [sp, #4]
    13d2:	9d5c      	ldr	r5, [sp, #368]	; 0x170
    13d4:	9500      	str	r5, [sp, #0]
    13d6:	f003 fbef 	bl	4bb8 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    13da:	4606      	mov	r6, r0
    13dc:	2800      	cmp	r0, #0
    13de:	f040 8082 	bne.w	14e6 <bootutil_img_validate+0x12e>
        return rc;
    }

    if (out_hash) {
    13e2:	9b60      	ldr	r3, [sp, #384]	; 0x180
    13e4:	b123      	cbz	r3, 13f0 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
    13e6:	2220      	movs	r2, #32
    13e8:	a906      	add	r1, sp, #24
    13ea:	4618      	mov	r0, r3
    13ec:	f004 fad9 	bl	59a2 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    13f0:	2300      	movs	r3, #0
    13f2:	9300      	str	r3, [sp, #0]
    13f4:	23ff      	movs	r3, #255	; 0xff
    13f6:	4622      	mov	r2, r4
    13f8:	4639      	mov	r1, r7
    13fa:	a84e      	add	r0, sp, #312	; 0x138
    13fc:	f003 fca2 	bl	4d44 <bootutil_tlv_iter_begin>
    if (rc) {
    1400:	4606      	mov	r6, r0
    1402:	2800      	cmp	r0, #0
    1404:	d16f      	bne.n	14e6 <bootutil_img_validate+0x12e>
    int valid_signature = 0;
    1406:	4607      	mov	r7, r0
    int sha256_valid = 0;
    1408:	4680      	mov	r8, r0
    int key_id = -1;
    140a:	f04f 35ff 	mov.w	r5, #4294967295
    140e:	e01d      	b.n	144c <bootutil_img_validate+0x94>
             * can be multiple signatures, each preceded by a key.
             */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
    1410:	f04f 35ff 	mov.w	r5, #4294967295
    1414:	e01a      	b.n	144c <bootutil_img_validate+0x94>
    1416:	f04f 35ff 	mov.w	r5, #4294967295
    141a:	e017      	b.n	144c <bootutil_img_validate+0x94>
            }
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
            if (rc == 0) {
                valid_signature = 1;
            }
            key_id = -1;
    141c:	f04f 35ff 	mov.w	r5, #4294967295
                valid_signature = 1;
    1420:	2701      	movs	r7, #1
    1422:	e013      	b.n	144c <bootutil_img_validate+0x94>
            if (len != sizeof(hash)) {
    1424:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    1428:	2b20      	cmp	r3, #32
    142a:	d160      	bne.n	14ee <bootutil_img_validate+0x136>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    142c:	aa0e      	add	r2, sp, #56	; 0x38
    142e:	9955      	ldr	r1, [sp, #340]	; 0x154
    1430:	4620      	mov	r0, r4
    1432:	f004 f8b8 	bl	55a6 <flash_area_read>
            if (rc) {
    1436:	2800      	cmp	r0, #0
    1438:	d15c      	bne.n	14f4 <bootutil_img_validate+0x13c>
            if (memcmp(hash, buf, sizeof(hash))) {
    143a:	2220      	movs	r2, #32
    143c:	a90e      	add	r1, sp, #56	; 0x38
    143e:	a806      	add	r0, sp, #24
    1440:	f004 fa97 	bl	5972 <memcmp>
    1444:	2800      	cmp	r0, #0
    1446:	d157      	bne.n	14f8 <bootutil_img_validate+0x140>
            sha256_valid = 1;
    1448:	f04f 0801 	mov.w	r8, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    144c:	f20d 1351 	addw	r3, sp, #337	; 0x151
    1450:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
    1454:	a955      	add	r1, sp, #340	; 0x154
    1456:	a84e      	add	r0, sp, #312	; 0x138
    1458:	f003 fcd9 	bl	4e0e <bootutil_tlv_iter_next>
        if (rc < 0) {
    145c:	2800      	cmp	r0, #0
    145e:	db40      	blt.n	14e2 <bootutil_img_validate+0x12a>
        } else if (rc > 0) {
    1460:	dc38      	bgt.n	14d4 <bootutil_img_validate+0x11c>
        if (type == IMAGE_TLV_SHA256) {
    1462:	f89d 3151 	ldrb.w	r3, [sp, #337]	; 0x151
    1466:	2b10      	cmp	r3, #16
    1468:	d0dc      	beq.n	1424 <bootutil_img_validate+0x6c>
        } else if (type == IMAGE_TLV_KEYHASH) {
    146a:	2b01      	cmp	r3, #1
    146c:	d021      	beq.n	14b2 <bootutil_img_validate+0xfa>
        } else if (type == EXPECTED_SIG_TLV) {
    146e:	2b20      	cmp	r3, #32
    1470:	d1ec      	bne.n	144c <bootutil_img_validate+0x94>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
    1472:	2d00      	cmp	r5, #0
    1474:	dbcc      	blt.n	1410 <bootutil_img_validate+0x58>
    1476:	4b29      	ldr	r3, [pc, #164]	; (151c <bootutil_img_validate+0x164>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	42ab      	cmp	r3, r5
    147c:	ddcb      	ble.n	1416 <bootutil_img_validate+0x5e>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
    147e:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    1482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1486:	d13f      	bne.n	1508 <bootutil_img_validate+0x150>
            rc = flash_area_read(fap, off, buf, len);
    1488:	aa0e      	add	r2, sp, #56	; 0x38
    148a:	9955      	ldr	r1, [sp, #340]	; 0x154
    148c:	4620      	mov	r0, r4
    148e:	f004 f88a 	bl	55a6 <flash_area_read>
            if (rc) {
    1492:	2800      	cmp	r0, #0
    1494:	d13b      	bne.n	150e <bootutil_img_validate+0x156>
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
    1496:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    149a:	b2ed      	uxtb	r5, r5
    149c:	9500      	str	r5, [sp, #0]
    149e:	aa0e      	add	r2, sp, #56	; 0x38
    14a0:	2120      	movs	r1, #32
    14a2:	a806      	add	r0, sp, #24
    14a4:	f000 f8b0 	bl	1608 <bootutil_verify_sig>
            if (rc == 0) {
    14a8:	2800      	cmp	r0, #0
    14aa:	d0b7      	beq.n	141c <bootutil_img_validate+0x64>
            key_id = -1;
    14ac:	f04f 35ff 	mov.w	r5, #4294967295
    14b0:	e7cc      	b.n	144c <bootutil_img_validate+0x94>
            if (len > 32) {
    14b2:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    14b6:	2b20      	cmp	r3, #32
    14b8:	d821      	bhi.n	14fe <bootutil_img_validate+0x146>
            rc = flash_area_read(fap, off, buf, len);
    14ba:	aa0e      	add	r2, sp, #56	; 0x38
    14bc:	9955      	ldr	r1, [sp, #340]	; 0x154
    14be:	4620      	mov	r0, r4
    14c0:	f004 f871 	bl	55a6 <flash_area_read>
            if (rc) {
    14c4:	b9f0      	cbnz	r0, 1504 <bootutil_img_validate+0x14c>
            key_id = bootutil_find_key(buf, len);
    14c6:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
    14ca:	a80e      	add	r0, sp, #56	; 0x38
    14cc:	f7ff ff40 	bl	1350 <bootutil_find_key>
    14d0:	4605      	mov	r5, r0
    14d2:	e7bb      	b.n	144c <bootutil_img_validate+0x94>
#endif
        }
    }

    if (!sha256_valid) {
    14d4:	f1b8 0f00 	cmp.w	r8, #0
    14d8:	d01c      	beq.n	1514 <bootutil_img_validate+0x15c>
        return -1;
    }

#ifdef EXPECTED_SIG_TLV
    if (!valid_signature) {
    14da:	b927      	cbnz	r7, 14e6 <bootutil_img_validate+0x12e>
        return -1;
    14dc:	f04f 36ff 	mov.w	r6, #4294967295
    14e0:	e001      	b.n	14e6 <bootutil_img_validate+0x12e>
            return -1;
    14e2:	f04f 36ff 	mov.w	r6, #4294967295
    }
#endif

    return 0;
}
    14e6:	4630      	mov	r0, r6
    14e8:	b056      	add	sp, #344	; 0x158
    14ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return -1;
    14ee:	f04f 36ff 	mov.w	r6, #4294967295
    14f2:	e7f8      	b.n	14e6 <bootutil_img_validate+0x12e>
                return rc;
    14f4:	4606      	mov	r6, r0
    14f6:	e7f6      	b.n	14e6 <bootutil_img_validate+0x12e>
                return -1;
    14f8:	f04f 36ff 	mov.w	r6, #4294967295
    14fc:	e7f3      	b.n	14e6 <bootutil_img_validate+0x12e>
                return -1;
    14fe:	f04f 36ff 	mov.w	r6, #4294967295
    1502:	e7f0      	b.n	14e6 <bootutil_img_validate+0x12e>
                return rc;
    1504:	4606      	mov	r6, r0
    1506:	e7ee      	b.n	14e6 <bootutil_img_validate+0x12e>
                return -1;
    1508:	f04f 36ff 	mov.w	r6, #4294967295
    150c:	e7eb      	b.n	14e6 <bootutil_img_validate+0x12e>
                return -1;
    150e:	f04f 36ff 	mov.w	r6, #4294967295
    1512:	e7e8      	b.n	14e6 <bootutil_img_validate+0x12e>
        return -1;
    1514:	f04f 36ff 	mov.w	r6, #4294967295
    1518:	e7e5      	b.n	14e6 <bootutil_img_validate+0x12e>
    151a:	bf00      	nop
    151c:	0000808c 	.word	0x0000808c

00001520 <bootutil_cmp_rsasig>:
 * values.
 */
static int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
    1520:	b570      	push	{r4, r5, r6, lr}
    1522:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
    uint8_t em[MBEDTLS_MPI_MAX_SIZE];
    uint8_t db_mask[PSS_MASK_LEN];
    uint8_t h2[PSS_HLEN];
    int i;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
    1526:	6844      	ldr	r4, [r0, #4]
    1528:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    152c:	d155      	bne.n	15da <bootutil_cmp_rsasig+0xba>
        return -1;
    }

    if (hlen != PSS_HLEN) {
    152e:	2a20      	cmp	r2, #32
    1530:	d156      	bne.n	15e0 <bootutil_cmp_rsasig+0xc0>
    1532:	460e      	mov	r6, r1
        return -1;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
    1534:	aa41      	add	r2, sp, #260	; 0x104
    1536:	4619      	mov	r1, r3
    1538:	f001 ff6a 	bl	3410 <mbedtls_rsa_public>
    153c:	4605      	mov	r5, r0
    153e:	2800      	cmp	r0, #0
    1540:	d151      	bne.n	15e6 <bootutil_cmp_rsasig+0xc6>
     */

    /* Step 4.  If the rightmost octect of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
    1542:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
    1546:	2bbc      	cmp	r3, #188	; 0xbc
    1548:	d150      	bne.n	15ec <bootutil_cmp_rsasig+0xcc>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
    154a:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    154e:	a809      	add	r0, sp, #36	; 0x24
    1550:	f003 fbc6 	bl	4ce0 <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
    1554:	462b      	mov	r3, r5
    1556:	e006      	b.n	1566 <bootutil_cmp_rsasig+0x46>
        db_mask[i] ^= em[i];
    1558:	aa41      	add	r2, sp, #260	; 0x104
    155a:	5cd2      	ldrb	r2, [r2, r3]
    155c:	a809      	add	r0, sp, #36	; 0x24
    155e:	5cc4      	ldrb	r4, [r0, r3]
    1560:	4062      	eors	r2, r4
    1562:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
    1564:	3301      	adds	r3, #1
    1566:	2bde      	cmp	r3, #222	; 0xde
    1568:	ddf6      	ble.n	1558 <bootutil_cmp_rsasig+0x38>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
    156a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1572:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    1576:	2dbd      	cmp	r5, #189	; 0xbd
    1578:	dc05      	bgt.n	1586 <bootutil_cmp_rsasig+0x66>
        if (db_mask[i] != 0) {
    157a:	ab09      	add	r3, sp, #36	; 0x24
    157c:	5d5b      	ldrb	r3, [r3, r5]
    157e:	2b00      	cmp	r3, #0
    1580:	d137      	bne.n	15f2 <bootutil_cmp_rsasig+0xd2>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    1582:	3501      	adds	r5, #1
    1584:	e7f7      	b.n	1576 <bootutil_cmp_rsasig+0x56>
            return -1;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
    1586:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
    158a:	2b01      	cmp	r3, #1
    158c:	d137      	bne.n	15fe <bootutil_cmp_rsasig+0xde>
    mbedtls_sha256_init(ctx);
    158e:	a881      	add	r0, sp, #516	; 0x204
    1590:	f006 f8de 	bl	7750 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    1594:	2100      	movs	r1, #0
    1596:	a881      	add	r0, sp, #516	; 0x204
    1598:	f001 ff7c 	bl	3494 <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    159c:	2208      	movs	r2, #8
    159e:	4919      	ldr	r1, [pc, #100]	; (1604 <bootutil_cmp_rsasig+0xe4>)
    15a0:	a881      	add	r0, sp, #516	; 0x204
    15a2:	f006 f8db 	bl	775c <mbedtls_sha256_update_ret>
    15a6:	2220      	movs	r2, #32
    15a8:	4631      	mov	r1, r6
    15aa:	a881      	add	r0, sp, #516	; 0x204
    15ac:	f006 f8d6 	bl	775c <mbedtls_sha256_update_ret>
    15b0:	2220      	movs	r2, #32
    15b2:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
    15b6:	a881      	add	r0, sp, #516	; 0x204
    15b8:	f006 f8d0 	bl	775c <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    15bc:	a901      	add	r1, sp, #4
    15be:	a881      	add	r0, sp, #516	; 0x204
    15c0:	f006 f90f 	bl	77e2 <mbedtls_sha256_finish_ret>
    bootutil_sha256_update(&shactx, &db_mask[PSS_MASK_SALT_POS], PSS_SLEN);
    bootutil_sha256_finish(&shactx, h2);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    if (memcmp(h2, &em[PSS_HASH_OFFSET], PSS_HLEN) != 0) {
    15c4:	2220      	movs	r2, #32
    15c6:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    15ca:	a801      	add	r0, sp, #4
    15cc:	f004 f9d1 	bl	5972 <memcmp>
    15d0:	4603      	mov	r3, r0
    15d2:	b180      	cbz	r0, 15f6 <bootutil_cmp_rsasig+0xd6>
        return -1;
    15d4:	f04f 33ff 	mov.w	r3, #4294967295
    15d8:	e00d      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
        return -1;
    15da:	f04f 33ff 	mov.w	r3, #4294967295
    15de:	e00a      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
        return -1;
    15e0:	f04f 33ff 	mov.w	r3, #4294967295
    15e4:	e007      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
        return -1;
    15e6:	f04f 33ff 	mov.w	r3, #4294967295
    15ea:	e004      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
        return -1;
    15ec:	f04f 33ff 	mov.w	r3, #4294967295
    15f0:	e001      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
            return -1;
    15f2:	f04f 33ff 	mov.w	r3, #4294967295
    }

    return 0;
}
    15f6:	4618      	mov	r0, r3
    15f8:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
    15fc:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    15fe:	f04f 33ff 	mov.w	r3, #4294967295
    1602:	e7f8      	b.n	15f6 <bootutil_cmp_rsasig+0xd6>
    1604:	000083a0 	.word	0x000083a0

00001608 <bootutil_verify_sig>:

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
    1608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    160c:	b0ac      	sub	sp, #176	; 0xb0
    160e:	4605      	mov	r5, r0
    1610:	460e      	mov	r6, r1
    1612:	4617      	mov	r7, r2
    1614:	461c      	mov	r4, r3
    1616:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
    mbedtls_rsa_context ctx;
    int rc;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
    161a:	2200      	movs	r2, #0
    161c:	4611      	mov	r1, r2
    161e:	a801      	add	r0, sp, #4
    1620:	f006 f850 	bl	76c4 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
    1624:	4b12      	ldr	r3, [pc, #72]	; (1670 <bootutil_verify_sig+0x68>)
    1626:	f853 2038 	ldr.w	r2, [r3, r8, lsl #3]
    162a:	a92c      	add	r1, sp, #176	; 0xb0
    162c:	f841 2db0 	str.w	r2, [r1, #-176]!
    end = cp + *bootutil_keys[key_id].len;
    1630:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    1634:	685b      	ldr	r3, [r3, #4]
    1636:	681b      	ldr	r3, [r3, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    1638:	441a      	add	r2, r3
    163a:	a801      	add	r0, sp, #4
    163c:	f003 fafb 	bl	4c36 <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
    1640:	4680      	mov	r8, r0
    1642:	b910      	cbnz	r0, 164a <bootutil_verify_sig+0x42>
    1644:	9b02      	ldr	r3, [sp, #8]
    1646:	42a3      	cmp	r3, r4
    1648:	d006      	beq.n	1658 <bootutil_verify_sig+0x50>
        mbedtls_rsa_free(&ctx);
    164a:	a801      	add	r0, sp, #4
    164c:	f006 f848 	bl	76e0 <mbedtls_rsa_free>
    }
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    mbedtls_rsa_free(&ctx);

    return rc;
}
    1650:	4640      	mov	r0, r8
    1652:	b02c      	add	sp, #176	; 0xb0
    1654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    1658:	463b      	mov	r3, r7
    165a:	4632      	mov	r2, r6
    165c:	4629      	mov	r1, r5
    165e:	a801      	add	r0, sp, #4
    1660:	f7ff ff5e 	bl	1520 <bootutil_cmp_rsasig>
    1664:	4680      	mov	r8, r0
    mbedtls_rsa_free(&ctx);
    1666:	a801      	add	r0, sp, #4
    1668:	f006 f83a 	bl	76e0 <mbedtls_rsa_free>
    return rc;
    166c:	e7f0      	b.n	1650 <bootutil_verify_sig+0x48>
    166e:	bf00      	nop
    1670:	00008090 	.word	0x00008090

00001674 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1674:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1676:	680b      	ldr	r3, [r1, #0]
    1678:	3301      	adds	r3, #1
    167a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    167c:	4b01      	ldr	r3, [pc, #4]	; (1684 <char_out+0x10>)
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	4798      	blx	r3
}
    1682:	bd08      	pop	{r3, pc}
    1684:	20005b38 	.word	0x20005b38

00001688 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    168c:	4681      	mov	r9, r0
    168e:	468a      	mov	sl, r1
    1690:	4615      	mov	r5, r2
    1692:	469b      	mov	fp, r3
	if (sizeof(long) == 8) {
		pos *= 10000000000;
	}

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1696:	2b00      	cmp	r3, #0
    1698:	dd2d      	ble.n	16f6 <_printk_dec_ulong+0x6e>
		min_width = 1;
    169a:	2701      	movs	r7, #1
    169c:	260a      	movs	r6, #10
    169e:	f04f 0800 	mov.w	r8, #0
    16a2:	4c20      	ldr	r4, [pc, #128]	; (1724 <_printk_dec_ulong+0x9c>)
    16a4:	e010      	b.n	16c8 <_printk_dec_ulong+0x40>
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    16a6:	fbb5 f0f4 	udiv	r0, r5, r4
    16aa:	4651      	mov	r1, sl
    16ac:	3030      	adds	r0, #48	; 0x30
    16ae:	47c8      	blx	r9
			digits++;
    16b0:	3701      	adds	r7, #1
			found_largest_digit = 1;
    16b2:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    16b6:	3e01      	subs	r6, #1
		remainder %= pos;
    16b8:	fbb5 f3f4 	udiv	r3, r5, r4
    16bc:	fb04 5513 	mls	r5, r4, r3, r5
		pos /= 10;
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <_printk_dec_ulong+0xa0>)
    16c2:	fba3 3404 	umull	r3, r4, r3, r4
    16c6:	08e4      	lsrs	r4, r4, #3
	while (pos >= 10) {
    16c8:	2c09      	cmp	r4, #9
    16ca:	d917      	bls.n	16fc <_printk_dec_ulong+0x74>
		if (found_largest_digit != 0 || remainder >= pos) {
    16cc:	f1b8 0f00 	cmp.w	r8, #0
    16d0:	d1e9      	bne.n	16a6 <_printk_dec_ulong+0x1e>
    16d2:	42ac      	cmp	r4, r5
    16d4:	d9e7      	bls.n	16a6 <_printk_dec_ulong+0x1e>
		} else if (remaining <= min_width
    16d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16d8:	429e      	cmp	r6, r3
    16da:	dcec      	bgt.n	16b6 <_printk_dec_ulong+0x2e>
				&& padding < PAD_SPACE_AFTER) {
    16dc:	f1bb 0f02 	cmp.w	fp, #2
    16e0:	d8e9      	bhi.n	16b6 <_printk_dec_ulong+0x2e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    16e2:	f1bb 0f01 	cmp.w	fp, #1
    16e6:	d004      	beq.n	16f2 <_printk_dec_ulong+0x6a>
    16e8:	2020      	movs	r0, #32
    16ea:	4651      	mov	r1, sl
    16ec:	47c8      	blx	r9
			digits++;
    16ee:	3701      	adds	r7, #1
    16f0:	e7e1      	b.n	16b6 <_printk_dec_ulong+0x2e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    16f2:	2030      	movs	r0, #48	; 0x30
    16f4:	e7f9      	b.n	16ea <_printk_dec_ulong+0x62>
		min_width = 1;
    16f6:	2301      	movs	r3, #1
    16f8:	930a      	str	r3, [sp, #40]	; 0x28
    16fa:	e7ce      	b.n	169a <_printk_dec_ulong+0x12>
	}
	out((int)(remainder + 48), ctx);
    16fc:	4651      	mov	r1, sl
    16fe:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1702:	47c8      	blx	r9

	if (padding == PAD_SPACE_AFTER) {
    1704:	f1bb 0f03 	cmp.w	fp, #3
    1708:	d001      	beq.n	170e <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    170a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    170e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1710:	1bdf      	subs	r7, r3, r7
		while (remaining-- > 0) {
    1712:	e003      	b.n	171c <_printk_dec_ulong+0x94>
			out(' ', ctx);
    1714:	4651      	mov	r1, sl
    1716:	2020      	movs	r0, #32
    1718:	47c8      	blx	r9
		while (remaining-- > 0) {
    171a:	4627      	mov	r7, r4
    171c:	1e7c      	subs	r4, r7, #1
    171e:	2f00      	cmp	r7, #0
    1720:	dcf8      	bgt.n	1714 <_printk_dec_ulong+0x8c>
    1722:	e7f2      	b.n	170a <_printk_dec_ulong+0x82>
    1724:	3b9aca00 	.word	0x3b9aca00
    1728:	cccccccd 	.word	0xcccccccd

0000172c <__printk_hook_install>:
	_char_out = fn;
    172c:	4b01      	ldr	r3, [pc, #4]	; (1734 <__printk_hook_install+0x8>)
    172e:	6018      	str	r0, [r3, #0]
}
    1730:	4770      	bx	lr
    1732:	bf00      	nop
    1734:	20005b38 	.word	0x20005b38

00001738 <vprintk>:
{
    1738:	b510      	push	{r4, lr}
    173a:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    173c:	ac02      	add	r4, sp, #8
    173e:	2300      	movs	r3, #0
    1740:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    1744:	460b      	mov	r3, r1
    1746:	4602      	mov	r2, r0
    1748:	4621      	mov	r1, r4
    174a:	4802      	ldr	r0, [pc, #8]	; (1754 <vprintk+0x1c>)
    174c:	f003 fc6f 	bl	502e <z_vprintk>
}
    1750:	b002      	add	sp, #8
    1752:	bd10      	pop	{r4, pc}
    1754:	00001675 	.word	0x00001675

00001758 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1758:	f04f 0220 	mov.w	r2, #32
    175c:	f3ef 8311 	mrs	r3, BASEPRI
    1760:	f382 8811 	msr	BASEPRI, r2
    1764:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1768:	4a04      	ldr	r2, [pc, #16]	; (177c <nordicsemi_nrf91_init+0x24>)
    176a:	2101      	movs	r1, #1
    176c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1770:	f383 8811 	msr	BASEPRI, r3
    1774:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1778:	2000      	movs	r0, #0
    177a:	4770      	bx	lr
    177c:	50039000 	.word	0x50039000

00001780 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
    1780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1784:	b083      	sub	sp, #12
    1786:	4680      	mov	r8, r0
    1788:	460f      	mov	r7, r1
    178a:	4616      	mov	r6, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
    178c:	4b11      	ldr	r3, [pc, #68]	; (17d4 <log_generic+0x54>)
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	4798      	blx	r3
    1792:	4681      	mov	r9, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    1794:	2400      	movs	r4, #0
    1796:	e000      	b.n	179a <log_generic+0x1a>
    1798:	3401      	adds	r4, #1
    179a:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <log_generic+0x58>)
    179c:	4a0f      	ldr	r2, [pc, #60]	; (17dc <log_generic+0x5c>)
    179e:	1a9b      	subs	r3, r3, r2
    17a0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    17a4:	da12      	bge.n	17cc <log_generic+0x4c>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(u32_t idx)
{
	return &__log_backends_start[idx];
    17a6:	480d      	ldr	r0, [pc, #52]	; (17dc <log_generic+0x5c>)
    17a8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    17ac:	6843      	ldr	r3, [r0, #4]
    17ae:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    17b0:	2b00      	cmp	r3, #0
    17b2:	d0f1      	beq.n	1798 <log_generic+0x18>
	if (backend->api->put_sync_string) {
    17b4:	0123      	lsls	r3, r4, #4
    17b6:	4a09      	ldr	r2, [pc, #36]	; (17dc <log_generic+0x5c>)
    17b8:	58d3      	ldr	r3, [r2, r3]
    17ba:	685d      	ldr	r5, [r3, #4]
    17bc:	2d00      	cmp	r5, #0
    17be:	d0eb      	beq.n	1798 <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    17c0:	9600      	str	r6, [sp, #0]
    17c2:	463b      	mov	r3, r7
    17c4:	464a      	mov	r2, r9
    17c6:	4641      	mov	r1, r8
    17c8:	47a8      	blx	r5
    17ca:	e7e5      	b.n	1798 <log_generic+0x18>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
    17cc:	b003      	add	sp, #12
    17ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17d2:	bf00      	nop
    17d4:	20005b3c 	.word	0x20005b3c
    17d8:	00007f84 	.word	0x00007f84
    17dc:	00007f74 	.word	0x00007f74

000017e0 <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    17e0:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    17e2:	4b04      	ldr	r3, [pc, #16]	; (17f4 <log_core_init+0x14>)
    17e4:	4a04      	ldr	r2, [pc, #16]	; (17f8 <log_core_init+0x18>)
    17e6:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    17e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    17ec:	f000 fa08 	bl	1c00 <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    17f0:	bd08      	pop	{r3, pc}
    17f2:	bf00      	nop
    17f4:	20005b3c 	.word	0x20005b3c
    17f8:	00005399 	.word	0x00005399

000017fc <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    17fc:	4b05      	ldr	r3, [pc, #20]	; (1814 <log_source_name_get+0x18>)
    17fe:	4a06      	ldr	r2, [pc, #24]	; (1818 <log_source_name_get+0x1c>)
    1800:	1a9b      	subs	r3, r3, r2
    1802:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1806:	d202      	bcs.n	180e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1808:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    180c:	4770      	bx	lr
    180e:	2000      	movs	r0, #0
}
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	00007f74 	.word	0x00007f74
    1818:	00007f44 	.word	0x00007f44

0000181c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
    181c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    181e:	4b0b      	ldr	r3, [pc, #44]	; (184c <log_backend_enable+0x30>)
    1820:	1ac3      	subs	r3, r0, r3
    1822:	111b      	asrs	r3, r3, #4
    1824:	3301      	adds	r3, #1
	backend->cb->id = id;
    1826:	6842      	ldr	r2, [r0, #4]
    1828:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    182a:	6843      	ldr	r3, [r0, #4]
    182c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    182e:	6843      	ldr	r3, [r0, #4]
    1830:	2201      	movs	r2, #1
    1832:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <log_backend_enable+0x34>)
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	b11b      	cbz	r3, 1842 <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <log_backend_enable+0x34>)
    183c:	2201      	movs	r2, #1
    183e:	701a      	strb	r2, [r3, #0]
}
    1840:	bd08      	pop	{r3, pc}
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1842:	4804      	ldr	r0, [pc, #16]	; (1854 <log_backend_enable+0x38>)
    1844:	f002 fd54 	bl	42f0 <z_impl_k_sem_give>
    1848:	e7f7      	b.n	183a <log_backend_enable+0x1e>
    184a:	bf00      	nop
    184c:	00007f74 	.word	0x00007f74
    1850:	20002b2c 	.word	0x20002b2c
    1854:	20005c20 	.word	0x20005c20

00001858 <log_init>:
{
    1858:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <log_init+0x50>)
    185c:	e8d3 2fef 	ldaex	r2, [r3]
    1860:	1c51      	adds	r1, r2, #1
    1862:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1866:	2800      	cmp	r0, #0
    1868:	d1f8      	bne.n	185c <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    186a:	b9da      	cbnz	r2, 18a4 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    186c:	2400      	movs	r4, #0
    186e:	e005      	b.n	187c <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1870:	2204      	movs	r2, #4
    1872:	2100      	movs	r1, #0
    1874:	4628      	mov	r0, r5
    1876:	f7ff ffd1 	bl	181c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    187a:	3401      	adds	r4, #1
    187c:	4b0b      	ldr	r3, [pc, #44]	; (18ac <log_init+0x54>)
    187e:	4a0c      	ldr	r2, [pc, #48]	; (18b0 <log_init+0x58>)
    1880:	1a9b      	subs	r3, r3, r2
    1882:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1886:	da0d      	bge.n	18a4 <log_init+0x4c>
	return &__log_backends_start[idx];
    1888:	4d09      	ldr	r5, [pc, #36]	; (18b0 <log_init+0x58>)
    188a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    188e:	7b2b      	ldrb	r3, [r5, #12]
    1890:	2b00      	cmp	r3, #0
    1892:	d0f2      	beq.n	187a <log_init+0x22>
			if (backend->api->init != NULL) {
    1894:	0123      	lsls	r3, r4, #4
    1896:	4a06      	ldr	r2, [pc, #24]	; (18b0 <log_init+0x58>)
    1898:	58d3      	ldr	r3, [r2, r3]
    189a:	695b      	ldr	r3, [r3, #20]
    189c:	2b00      	cmp	r3, #0
    189e:	d0e7      	beq.n	1870 <log_init+0x18>
				backend->api->init();
    18a0:	4798      	blx	r3
    18a2:	e7e5      	b.n	1870 <log_init+0x18>
}
    18a4:	bd38      	pop	{r3, r4, r5, pc}
    18a6:	bf00      	nop
    18a8:	20002978 	.word	0x20002978
    18ac:	00007f84 	.word	0x00007f84
    18b0:	00007f74 	.word	0x00007f74

000018b4 <z_impl_log_panic>:
	if (panic_mode) {
    18b4:	4b10      	ldr	r3, [pc, #64]	; (18f8 <z_impl_log_panic+0x44>)
    18b6:	781b      	ldrb	r3, [r3, #0]
    18b8:	b103      	cbz	r3, 18bc <z_impl_log_panic+0x8>
    18ba:	4770      	bx	lr
{
    18bc:	b510      	push	{r4, lr}
	log_init();
    18be:	f7ff ffcb 	bl	1858 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    18c2:	2400      	movs	r4, #0
    18c4:	e000      	b.n	18c8 <z_impl_log_panic+0x14>
    18c6:	3401      	adds	r4, #1
    18c8:	4b0c      	ldr	r3, [pc, #48]	; (18fc <z_impl_log_panic+0x48>)
    18ca:	4a0d      	ldr	r2, [pc, #52]	; (1900 <z_impl_log_panic+0x4c>)
    18cc:	1a9b      	subs	r3, r3, r2
    18ce:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    18d2:	da0c      	bge.n	18ee <z_impl_log_panic+0x3a>
    18d4:	480a      	ldr	r0, [pc, #40]	; (1900 <z_impl_log_panic+0x4c>)
    18d6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    18da:	6843      	ldr	r3, [r0, #4]
    18dc:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    18de:	2b00      	cmp	r3, #0
    18e0:	d0f1      	beq.n	18c6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    18e2:	0123      	lsls	r3, r4, #4
    18e4:	4a06      	ldr	r2, [pc, #24]	; (1900 <z_impl_log_panic+0x4c>)
    18e6:	58d3      	ldr	r3, [r2, r3]
    18e8:	691b      	ldr	r3, [r3, #16]
    18ea:	4798      	blx	r3
    18ec:	e7eb      	b.n	18c6 <z_impl_log_panic+0x12>
	panic_mode = true;
    18ee:	4b02      	ldr	r3, [pc, #8]	; (18f8 <z_impl_log_panic+0x44>)
    18f0:	2201      	movs	r2, #1
    18f2:	701a      	strb	r2, [r3, #0]
}
    18f4:	bd10      	pop	{r4, pc}
    18f6:	bf00      	nop
    18f8:	20002b2d 	.word	0x20002b2d
    18fc:	00007f84 	.word	0x00007f84
    1900:	00007f74 	.word	0x00007f74

00001904 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1904:	b40e      	push	{r1, r2, r3}
    1906:	b500      	push	{lr}
    1908:	b082      	sub	sp, #8
    190a:	ab03      	add	r3, sp, #12
    190c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1910:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1912:	4601      	mov	r1, r0
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <print_formatted+0x24>)
    1916:	f003 fb8a 	bl	502e <z_vprintk>
#endif
	va_end(args);

	return length;
}
    191a:	2000      	movs	r0, #0
    191c:	b002      	add	sp, #8
    191e:	f85d eb04 	ldr.w	lr, [sp], #4
    1922:	b003      	add	sp, #12
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	00005495 	.word	0x00005495

0000192c <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   u32_t flags, u32_t timestamp)
{
    192c:	b5f0      	push	{r4, r5, r6, r7, lr}
    192e:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1930:	f011 0f44 	tst.w	r1, #68	; 0x44
    1934:	d005      	beq.n	1942 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1936:	4b1a      	ldr	r3, [pc, #104]	; (19a0 <timestamp_print+0x74>)
    1938:	681c      	ldr	r4, [r3, #0]
    193a:	b934      	cbnz	r4, 194a <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    193c:	2000      	movs	r0, #0
	}

	return length;
}
    193e:	b005      	add	sp, #20
    1940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1942:	4918      	ldr	r1, [pc, #96]	; (19a4 <timestamp_print+0x78>)
    1944:	f7ff ffde 	bl	1904 <print_formatted>
    1948:	e7f9      	b.n	193e <timestamp_print+0x12>
		timestamp /= timestamp_div;
    194a:	4b17      	ldr	r3, [pc, #92]	; (19a8 <timestamp_print+0x7c>)
    194c:	681d      	ldr	r5, [r3, #0]
    194e:	fbb2 f5f5 	udiv	r5, r2, r5
		seconds = timestamp / freq;
    1952:	fbb5 f1f4 	udiv	r1, r5, r4
		hours = seconds / 3600U;
    1956:	4a15      	ldr	r2, [pc, #84]	; (19ac <timestamp_print+0x80>)
    1958:	fba2 3201 	umull	r3, r2, r2, r1
    195c:	0ad2      	lsrs	r2, r2, #11
    195e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1962:	fb06 1612 	mls	r6, r6, r2, r1
		mins = seconds / 60U;
    1966:	4b12      	ldr	r3, [pc, #72]	; (19b0 <timestamp_print+0x84>)
    1968:	fba3 7306 	umull	r7, r3, r3, r6
    196c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    196e:	fb04 5111 	mls	r1, r4, r1, r5
		ms = (remainder * 1000U) / freq;
    1972:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1976:	fb05 f101 	mul.w	r1, r5, r1
    197a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    197e:	fb07 1114 	mls	r1, r7, r4, r1
    1982:	fb05 f101 	mul.w	r1, r5, r1
    1986:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    198a:	9402      	str	r4, [sp, #8]
    198c:	9701      	str	r7, [sp, #4]
    198e:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    1992:	00a1      	lsls	r1, r4, #2
    1994:	1a71      	subs	r1, r6, r1
    1996:	9100      	str	r1, [sp, #0]
    1998:	4906      	ldr	r1, [pc, #24]	; (19b4 <timestamp_print+0x88>)
    199a:	f7ff ffb3 	bl	1904 <print_formatted>
    199e:	e7ce      	b.n	193e <timestamp_print+0x12>
    19a0:	2000297c 	.word	0x2000297c
    19a4:	0000857c 	.word	0x0000857c
    19a8:	20002980 	.word	0x20002980
    19ac:	91a2b3c5 	.word	0x91a2b3c5
    19b0:	88888889 	.word	0x88888889
    19b4:	00008588 	.word	0x00008588

000019b8 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, u32_t level)
{
	if (color) {
    19b8:	b161      	cbz	r1, 19d4 <color_print+0x1c>
{
    19ba:	b508      	push	{r3, lr}
		const char *color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    19bc:	b12a      	cbz	r2, 19ca <color_print+0x12>
		const char *color = start && (colors[level] != NULL) ?
    19be:	4a06      	ldr	r2, [pc, #24]	; (19d8 <color_print+0x20>)
    19c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    19c4:	b912      	cbnz	r2, 19cc <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    19c6:	4a05      	ldr	r2, [pc, #20]	; (19dc <color_print+0x24>)
    19c8:	e000      	b.n	19cc <color_print+0x14>
    19ca:	4a04      	ldr	r2, [pc, #16]	; (19dc <color_print+0x24>)
		print_formatted(log_output, "%s", color);
    19cc:	4904      	ldr	r1, [pc, #16]	; (19e0 <color_print+0x28>)
    19ce:	f7ff ff99 	bl	1904 <print_formatted>
	}
}
    19d2:	bd08      	pop	{r3, pc}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	00008504 	.word	0x00008504
    19dc:	000084f8 	.word	0x000084f8
    19e0:	00008500 	.word	0x00008500

000019e4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19e4:	f011 0f10 	tst.w	r1, #16
    19e8:	d10b      	bne.n	1a02 <newline_print+0x1e>
{
    19ea:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    19ec:	f011 0f20 	tst.w	r1, #32
    19f0:	d103      	bne.n	19fa <newline_print+0x16>
		print_formatted(ctx, "\n");
	} else {
		print_formatted(ctx, "\r\n");
    19f2:	4904      	ldr	r1, [pc, #16]	; (1a04 <newline_print+0x20>)
    19f4:	f7ff ff86 	bl	1904 <print_formatted>
	}
}
    19f8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\n");
    19fa:	4903      	ldr	r1, [pc, #12]	; (1a08 <newline_print+0x24>)
    19fc:	f7ff ff82 	bl	1904 <print_formatted>
    1a00:	e7fa      	b.n	19f8 <newline_print+0x14>
    1a02:	4770      	bx	lr
    1a04:	00008540 	.word	0x00008540
    1a08:	00008940 	.word	0x00008940

00001a0c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const u8_t *data, u32_t length,
			       int prefix_offset, u32_t flags)
{
    1a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a10:	4605      	mov	r5, r0
    1a12:	460f      	mov	r7, r1
    1a14:	4616      	mov	r6, r2
    1a16:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    1a18:	9906      	ldr	r1, [sp, #24]
    1a1a:	f7ff ffe3 	bl	19e4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1a1e:	2400      	movs	r4, #0
    1a20:	e004      	b.n	1a2c <hexdump_line_print+0x20>
		print_formatted(log_output, " ");
    1a22:	4924      	ldr	r1, [pc, #144]	; (1ab4 <hexdump_line_print+0xa8>)
    1a24:	4628      	mov	r0, r5
    1a26:	f7ff ff6d 	bl	1904 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1a2a:	3401      	adds	r4, #1
    1a2c:	4544      	cmp	r4, r8
    1a2e:	dbf8      	blt.n	1a22 <hexdump_line_print+0x16>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a30:	2400      	movs	r4, #0
    1a32:	e009      	b.n	1a48 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1a34:	491f      	ldr	r1, [pc, #124]	; (1ab4 <hexdump_line_print+0xa8>)
    1a36:	4628      	mov	r0, r5
    1a38:	f7ff ff64 	bl	1904 <print_formatted>
    1a3c:	e00b      	b.n	1a56 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    1a3e:	491e      	ldr	r1, [pc, #120]	; (1ab8 <hexdump_line_print+0xac>)
    1a40:	4628      	mov	r0, r5
    1a42:	f7ff ff5f 	bl	1904 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a46:	3401      	adds	r4, #1
    1a48:	2c0f      	cmp	r4, #15
    1a4a:	dc0c      	bgt.n	1a66 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	dd02      	ble.n	1a56 <hexdump_line_print+0x4a>
    1a50:	f014 0f07 	tst.w	r4, #7
    1a54:	d0ee      	beq.n	1a34 <hexdump_line_print+0x28>
		if (i < length) {
    1a56:	42b4      	cmp	r4, r6
    1a58:	d2f1      	bcs.n	1a3e <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    1a5a:	5d3a      	ldrb	r2, [r7, r4]
    1a5c:	4917      	ldr	r1, [pc, #92]	; (1abc <hexdump_line_print+0xb0>)
    1a5e:	4628      	mov	r0, r5
    1a60:	f7ff ff50 	bl	1904 <print_formatted>
    1a64:	e7ef      	b.n	1a46 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    1a66:	4916      	ldr	r1, [pc, #88]	; (1ac0 <hexdump_line_print+0xb4>)
    1a68:	4628      	mov	r0, r5
    1a6a:	f7ff ff4b 	bl	1904 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a6e:	2400      	movs	r4, #0
    1a70:	e009      	b.n	1a86 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1a72:	4910      	ldr	r1, [pc, #64]	; (1ab4 <hexdump_line_print+0xa8>)
    1a74:	4628      	mov	r0, r5
    1a76:	f7ff ff45 	bl	1904 <print_formatted>
    1a7a:	e00b      	b.n	1a94 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    1a7c:	4911      	ldr	r1, [pc, #68]	; (1ac4 <hexdump_line_print+0xb8>)
    1a7e:	4628      	mov	r0, r5
    1a80:	f7ff ff40 	bl	1904 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a84:	3401      	adds	r4, #1
    1a86:	2c0f      	cmp	r4, #15
    1a88:	dc12      	bgt.n	1ab0 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1a8a:	2c00      	cmp	r4, #0
    1a8c:	dd02      	ble.n	1a94 <hexdump_line_print+0x88>
    1a8e:	f014 0f07 	tst.w	r4, #7
    1a92:	d0ee      	beq.n	1a72 <hexdump_line_print+0x66>
		if (i < length) {
    1a94:	42b4      	cmp	r4, r6
    1a96:	d206      	bcs.n	1aa6 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1a98:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1a9a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    1a9e:	2b5e      	cmp	r3, #94	; 0x5e
    1aa0:	d9ec      	bls.n	1a7c <hexdump_line_print+0x70>
    1aa2:	222e      	movs	r2, #46	; 0x2e
    1aa4:	e7ea      	b.n	1a7c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    1aa6:	4903      	ldr	r1, [pc, #12]	; (1ab4 <hexdump_line_print+0xa8>)
    1aa8:	4628      	mov	r0, r5
    1aaa:	f7ff ff2b 	bl	1904 <print_formatted>
    1aae:	e7e9      	b.n	1a84 <hexdump_line_print+0x78>
		}
	}
}
    1ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ab4:	0000853c 	.word	0x0000853c
    1ab8:	00008520 	.word	0x00008520
    1abc:	00008518 	.word	0x00008518
    1ac0:	00008524 	.word	0x00008524
    1ac4:	00008528 	.word	0x00008528

00001ac8 <ids_print>:
{
    1ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aca:	4604      	mov	r4, r0
    1acc:	4616      	mov	r6, r2
    1ace:	461f      	mov	r7, r3
	if (level_on) {
    1ad0:	b949      	cbnz	r1, 1ae6 <ids_print+0x1e>
	int total = 0;
    1ad2:	2500      	movs	r5, #0
	total += print_formatted(log_output,
    1ad4:	b186      	cbz	r6, 1af8 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a07      	ldr	r2, [sp, #28]
    1ada:	4093      	lsls	r3, r2
				(func_on &&
    1adc:	f013 0f10 	tst.w	r3, #16
    1ae0:	d116      	bne.n	1b10 <ids_print+0x48>
	total += print_formatted(log_output,
    1ae2:	4e0c      	ldr	r6, [pc, #48]	; (1b14 <ids_print+0x4c>)
    1ae4:	e009      	b.n	1afa <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1ae6:	4b0c      	ldr	r3, [pc, #48]	; (1b18 <ids_print+0x50>)
    1ae8:	9a07      	ldr	r2, [sp, #28]
    1aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1aee:	490b      	ldr	r1, [pc, #44]	; (1b1c <ids_print+0x54>)
    1af0:	f7ff ff08 	bl	1904 <print_formatted>
    1af4:	4605      	mov	r5, r0
    1af6:	e7ed      	b.n	1ad4 <ids_print+0xc>
	total += print_formatted(log_output,
    1af8:	4e06      	ldr	r6, [pc, #24]	; (1b14 <ids_print+0x4c>)
    1afa:	9906      	ldr	r1, [sp, #24]
    1afc:	4638      	mov	r0, r7
    1afe:	f7ff fe7d 	bl	17fc <log_source_name_get>
    1b02:	4602      	mov	r2, r0
    1b04:	4631      	mov	r1, r6
    1b06:	4620      	mov	r0, r4
    1b08:	f7ff fefc 	bl	1904 <print_formatted>
}
    1b0c:	4428      	add	r0, r5
    1b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    1b10:	4e03      	ldr	r6, [pc, #12]	; (1b20 <ids_print+0x58>)
    1b12:	e7f2      	b.n	1afa <ids_print+0x32>
    1b14:	00008530 	.word	0x00008530
    1b18:	00008548 	.word	0x00008548
    1b1c:	00008538 	.word	0x00008538
    1b20:	0000852c 	.word	0x0000852c

00001b24 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	b084      	sub	sp, #16
    1b28:	4605      	mov	r5, r0
    1b2a:	461e      	mov	r6, r3
	int length;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
    1b2c:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	u16_t source_id = (u16_t)src_level.source_id;
    1b30:	f3c1 1089 	ubfx	r0, r1, #6, #10
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);

	if (!raw_string) {
    1b34:	f011 0407 	ands.w	r4, r1, #7
    1b38:	d10f      	bne.n	1b5a <log_output_string+0x36>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    1b3a:	9b08      	ldr	r3, [sp, #32]
    1b3c:	4632      	mov	r2, r6
    1b3e:	4629      	mov	r1, r5
    1b40:	4810      	ldr	r0, [pc, #64]	; (1b84 <log_output_string+0x60>)
    1b42:	f003 fa74 	bl	502e <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    1b46:	b994      	cbnz	r4, 1b6e <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    1b48:	4630      	mov	r0, r6
    1b4a:	f003 fc49 	bl	53e0 <ends_with_newline>
    1b4e:	b198      	cbz	r0, 1b78 <log_output_string+0x54>
			print_formatted(log_output, "\r");
    1b50:	490d      	ldr	r1, [pc, #52]	; (1b88 <log_output_string+0x64>)
    1b52:	4628      	mov	r0, r5
    1b54:	f7ff fed6 	bl	1904 <print_formatted>
    1b58:	e00e      	b.n	1b78 <log_output_string+0x54>
		prefix_print(log_output, flags, true, timestamp,
    1b5a:	9002      	str	r0, [sp, #8]
    1b5c:	9301      	str	r3, [sp, #4]
    1b5e:	9400      	str	r4, [sp, #0]
    1b60:	4613      	mov	r3, r2
    1b62:	2201      	movs	r2, #1
    1b64:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b66:	4628      	mov	r0, r5
    1b68:	f003 fc5e 	bl	5428 <prefix_print>
    1b6c:	e7e5      	b.n	1b3a <log_output_string+0x16>
		}
	} else {
		postfix_print(log_output, flags, level);
    1b6e:	4622      	mov	r2, r4
    1b70:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b72:	4628      	mov	r0, r5
    1b74:	f003 fc4c 	bl	5410 <postfix_print>
	}

	log_output_flush(log_output);
    1b78:	4628      	mov	r0, r5
    1b7a:	f003 fc7e 	bl	547a <log_output_flush>
}
    1b7e:	b004      	add	sp, #16
    1b80:	bd70      	pop	{r4, r5, r6, pc}
    1b82:	bf00      	nop
    1b84:	00005495 	.word	0x00005495
    1b88:	00008544 	.word	0x00008544

00001b8c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
    1b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b90:	b084      	sub	sp, #16
    1b92:	4680      	mov	r8, r0
    1b94:	461d      	mov	r5, r3
    1b96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1b98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    1b9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
    1b9c:	f001 0a07 	and.w	sl, r1, #7
	u8_t domain_id = (u8_t)src_level.domain_id;
    1ba0:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	u16_t source_id = (u16_t)src_level.source_id;
    1ba4:	f3c1 1189 	ubfx	r1, r1, #6, #10

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    1ba8:	9102      	str	r1, [sp, #8]
    1baa:	9301      	str	r3, [sp, #4]
    1bac:	f8cd a000 	str.w	sl, [sp]
    1bb0:	4613      	mov	r3, r2
    1bb2:	2201      	movs	r2, #1
    1bb4:	4639      	mov	r1, r7
    1bb6:	f003 fc37 	bl	5428 <prefix_print>
    1bba:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    1bbc:	462a      	mov	r2, r5
    1bbe:	490f      	ldr	r1, [pc, #60]	; (1bfc <log_output_hexdump+0x70>)
    1bc0:	4640      	mov	r0, r8
    1bc2:	f7ff fe9f 	bl	1904 <print_formatted>

	while (length) {
    1bc6:	e00c      	b.n	1be2 <log_output_hexdump+0x56>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    1bc8:	4625      	mov	r5, r4
    1bca:	2c10      	cmp	r4, #16
    1bcc:	bf28      	it	cs
    1bce:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(log_output, data, part_len,
    1bd0:	9700      	str	r7, [sp, #0]
    1bd2:	464b      	mov	r3, r9
    1bd4:	462a      	mov	r2, r5
    1bd6:	4631      	mov	r1, r6
    1bd8:	4640      	mov	r0, r8
    1bda:	f7ff ff17 	bl	1a0c <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
    1bde:	442e      	add	r6, r5
		length -= part_len;
    1be0:	1b64      	subs	r4, r4, r5
	while (length) {
    1be2:	2c00      	cmp	r4, #0
    1be4:	d1f0      	bne.n	1bc8 <log_output_hexdump+0x3c>
	};

	postfix_print(log_output, flags, level);
    1be6:	4652      	mov	r2, sl
    1be8:	4639      	mov	r1, r7
    1bea:	4640      	mov	r0, r8
    1bec:	f003 fc10 	bl	5410 <postfix_print>
	log_output_flush(log_output);
    1bf0:	4640      	mov	r0, r8
    1bf2:	f003 fc42 	bl	547a <log_output_flush>
}
    1bf6:	b004      	add	sp, #16
    1bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bfc:	00008500 	.word	0x00008500

00001c00 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1c00:	4b07      	ldr	r3, [pc, #28]	; (1c20 <log_output_timestamp_freq_set+0x20>)
    1c02:	2201      	movs	r2, #1
    1c04:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1c06:	e004      	b.n	1c12 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    1c08:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c0a:	4a05      	ldr	r2, [pc, #20]	; (1c20 <log_output_timestamp_freq_set+0x20>)
    1c0c:	6813      	ldr	r3, [r2, #0]
    1c0e:	005b      	lsls	r3, r3, #1
    1c10:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1c12:	4b04      	ldr	r3, [pc, #16]	; (1c24 <log_output_timestamp_freq_set+0x24>)
    1c14:	4298      	cmp	r0, r3
    1c16:	d8f7      	bhi.n	1c08 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    1c18:	4b03      	ldr	r3, [pc, #12]	; (1c28 <log_output_timestamp_freq_set+0x28>)
    1c1a:	6018      	str	r0, [r3, #0]
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	20002980 	.word	0x20002980
    1c24:	000f4240 	.word	0x000f4240
    1c28:	2000297c 	.word	0x2000297c

00001c2c <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
    1c2c:	b508      	push	{r3, lr}
    1c2e:	4803      	ldr	r0, [pc, #12]	; (1c3c <log_backend_uart_init+0x10>)
    1c30:	f002 f9c2 	bl	3fb8 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    1c34:	4b02      	ldr	r3, [pc, #8]	; (1c40 <log_backend_uart_init+0x14>)
    1c36:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    1c38:	bd08      	pop	{r3, pc}
    1c3a:	bf00      	nop
    1c3c:	000085bc 	.word	0x000085bc
    1c40:	2000298c 	.word	0x2000298c

00001c44 <panic>:

static void panic(struct log_backend const *const backend)
{
    1c44:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1c46:	4802      	ldr	r0, [pc, #8]	; (1c50 <panic+0xc>)
    1c48:	f003 fc17 	bl	547a <log_output_flush>
	log_backend_std_panic(&log_output);
}
    1c4c:	bd08      	pop	{r3, pc}
    1c4e:	bf00      	nop
    1c50:	000085c4 	.word	0x000085c4

00001c54 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
    1c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c58:	b084      	sub	sp, #16
    1c5a:	460e      	mov	r6, r1
    1c5c:	4617      	mov	r7, r2
    1c5e:	4698      	mov	r8, r3
	__asm__ volatile(
    1c60:	f04f 0320 	mov.w	r3, #32
    1c64:	f3ef 8511 	mrs	r5, BASEPRI
    1c68:	f383 8811 	msr	BASEPRI, r3
    1c6c:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
    1c70:	4c0b      	ldr	r4, [pc, #44]	; (1ca0 <sync_hexdump+0x4c>)
    1c72:	4620      	mov	r0, r4
    1c74:	f003 fc01 	bl	547a <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
    1c78:	230f      	movs	r3, #15
    1c7a:	9302      	str	r3, [sp, #8]
    1c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c7e:	9301      	str	r3, [sp, #4]
    1c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c82:	9300      	str	r3, [sp, #0]
    1c84:	4643      	mov	r3, r8
    1c86:	463a      	mov	r2, r7
    1c88:	4631      	mov	r1, r6
    1c8a:	4620      	mov	r0, r4
    1c8c:	f7ff ff7e 	bl	1b8c <log_output_hexdump>
	__asm__ volatile(
    1c90:	f385 8811 	msr	BASEPRI, r5
    1c94:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
    1c98:	b004      	add	sp, #16
    1c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c9e:	bf00      	nop
    1ca0:	000085c4 	.word	0x000085c4

00001ca4 <sync_string>:
{
    1ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ca8:	b082      	sub	sp, #8
    1caa:	460e      	mov	r6, r1
    1cac:	4617      	mov	r7, r2
    1cae:	4698      	mov	r8, r3
	__asm__ volatile(
    1cb0:	f04f 0320 	mov.w	r3, #32
    1cb4:	f3ef 8511 	mrs	r5, BASEPRI
    1cb8:	f383 8811 	msr	BASEPRI, r3
    1cbc:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
    1cc0:	4c0a      	ldr	r4, [pc, #40]	; (1cec <sync_string+0x48>)
    1cc2:	4620      	mov	r0, r4
    1cc4:	f003 fbd9 	bl	547a <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    1cc8:	230f      	movs	r3, #15
    1cca:	9301      	str	r3, [sp, #4]
    1ccc:	9b08      	ldr	r3, [sp, #32]
    1cce:	9300      	str	r3, [sp, #0]
    1cd0:	4643      	mov	r3, r8
    1cd2:	463a      	mov	r2, r7
    1cd4:	4631      	mov	r1, r6
    1cd6:	4620      	mov	r0, r4
    1cd8:	f7ff ff24 	bl	1b24 <log_output_string>
	__asm__ volatile(
    1cdc:	f385 8811 	msr	BASEPRI, r5
    1ce0:	f3bf 8f6f 	isb	sy
}
    1ce4:	b002      	add	sp, #8
    1ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cea:	bf00      	nop
    1cec:	000085c4 	.word	0x000085c4

00001cf0 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    1cf0:	b410      	push	{r4}
    1cf2:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    1cf4:	2200      	movs	r2, #0
    1cf6:	4b08      	ldr	r3, [pc, #32]	; (1d18 <get_flash_area_from_id+0x28>)
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	4293      	cmp	r3, r2
    1cfc:	dd08      	ble.n	1d10 <get_flash_area_from_id+0x20>
		if (flash_map[i].fa_id == idx) {
    1cfe:	0113      	lsls	r3, r2, #4
    1d00:	4906      	ldr	r1, [pc, #24]	; (1d1c <get_flash_area_from_id+0x2c>)
    1d02:	6809      	ldr	r1, [r1, #0]
    1d04:	18c8      	adds	r0, r1, r3
    1d06:	5ccb      	ldrb	r3, [r1, r3]
    1d08:	42a3      	cmp	r3, r4
    1d0a:	d002      	beq.n	1d12 <get_flash_area_from_id+0x22>
	for (int i = 0; i < flash_map_entries; i++) {
    1d0c:	3201      	adds	r2, #1
    1d0e:	e7f2      	b.n	1cf6 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    1d10:	2000      	movs	r0, #0
}
    1d12:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d16:	4770      	bx	lr
    1d18:	00008678 	.word	0x00008678
    1d1c:	20005b40 	.word	0x20005b40

00001d20 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1d20:	4b08      	ldr	r3, [pc, #32]	; (1d44 <flash_area_open+0x24>)
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	b13b      	cbz	r3, 1d36 <flash_area_open+0x16>
{
    1d26:	b510      	push	{r4, lr}
    1d28:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1d2a:	f7ff ffe1 	bl	1cf0 <get_flash_area_from_id>
	if (area == NULL) {
    1d2e:	b128      	cbz	r0, 1d3c <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1d30:	6020      	str	r0, [r4, #0]
	return 0;
    1d32:	2000      	movs	r0, #0
}
    1d34:	bd10      	pop	{r4, pc}
		return -EACCES;
    1d36:	f06f 000c 	mvn.w	r0, #12
}
    1d3a:	4770      	bx	lr
		return -ENOENT;
    1d3c:	f06f 0001 	mvn.w	r0, #1
    1d40:	e7f8      	b.n	1d34 <flash_area_open+0x14>
    1d42:	bf00      	nop
    1d44:	20005b40 	.word	0x20005b40

00001d48 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1d48:	b500      	push	{lr}
    1d4a:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1d4c:	ab03      	add	r3, sp, #12
    1d4e:	9300      	str	r3, [sp, #0]
    1d50:	4b02      	ldr	r3, [pc, #8]	; (1d5c <flash_area_get_sectors+0x14>)
    1d52:	f003 fc00 	bl	5556 <flash_area_layout>
}
    1d56:	b00b      	add	sp, #44	; 0x2c
    1d58:	f85d fb04 	ldr.w	pc, [sp], #4
    1d5c:	0000551b 	.word	0x0000551b

00001d60 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1d60:	b510      	push	{r4, lr}
    1d62:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1d64:	280a      	cmp	r0, #10
    1d66:	d105      	bne.n	1d74 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1d68:	4b06      	ldr	r3, [pc, #24]	; (1d84 <console_out+0x24>)
    1d6a:	6818      	ldr	r0, [r3, #0]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1d6c:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1d6e:	685b      	ldr	r3, [r3, #4]
    1d70:	210d      	movs	r1, #13
    1d72:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1d74:	4b03      	ldr	r3, [pc, #12]	; (1d84 <console_out+0x24>)
    1d76:	6818      	ldr	r0, [r3, #0]
    1d78:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    1d7a:	6843      	ldr	r3, [r0, #4]
	api->poll_out(dev, out_char);
    1d7c:	685b      	ldr	r3, [r3, #4]
    1d7e:	4798      	blx	r3

	return c;
}
    1d80:	4620      	mov	r0, r4
    1d82:	bd10      	pop	{r4, pc}
    1d84:	20002998 	.word	0x20002998

00001d88 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1d88:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1d8a:	4c04      	ldr	r4, [pc, #16]	; (1d9c <uart_console_hook_install+0x14>)
    1d8c:	4620      	mov	r0, r4
    1d8e:	f000 fc81 	bl	2694 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1d92:	4620      	mov	r0, r4
    1d94:	f7ff fcca 	bl	172c <__printk_hook_install>
}
    1d98:	bd10      	pop	{r4, pc}
    1d9a:	bf00      	nop
    1d9c:	00001d61 	.word	0x00001d61

00001da0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1da0:	b508      	push	{r3, lr}
    1da2:	4804      	ldr	r0, [pc, #16]	; (1db4 <uart_console_init+0x14>)
    1da4:	f002 f908 	bl	3fb8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1da8:	4b03      	ldr	r3, [pc, #12]	; (1db8 <uart_console_init+0x18>)
    1daa:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1dac:	f7ff ffec 	bl	1d88 <uart_console_hook_install>

	return 0;
}
    1db0:	2000      	movs	r0, #0
    1db2:	bd08      	pop	{r3, pc}
    1db4:	000085bc 	.word	0x000085bc
    1db8:	20002998 	.word	0x20002998

00001dbc <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1dbc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
    1dbe:	2101      	movs	r1, #1
    1dc0:	f44f 7080 	mov.w	r0, #256	; 0x100
    1dc4:	f003 fc73 	bl	56ae <clock_event_check_and_clean>
    1dc8:	b118      	cbz	r0, 1dd2 <nrf_power_clock_isr+0x16>
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    1dca:	4b09      	ldr	r3, [pc, #36]	; (1df0 <nrf_power_clock_isr+0x34>)
    1dcc:	689b      	ldr	r3, [r3, #8]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1dce:	7a5b      	ldrb	r3, [r3, #9]
    1dd0:	b133      	cbz	r3, 1de0 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
		}
	}

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_LFCLKSTARTED,
    1dd2:	2102      	movs	r1, #2
    1dd4:	f44f 7082 	mov.w	r0, #260	; 0x104
    1dd8:	f003 fc69 	bl	56ae <clock_event_check_and_clean>
    1ddc:	b920      	cbnz	r0, 1de8 <nrf_power_clock_isr+0x2c>
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1dde:	bd08      	pop	{r3, pc}
			clkstarted_handle(hfclk_dev);
    1de0:	4803      	ldr	r0, [pc, #12]	; (1df0 <nrf_power_clock_isr+0x34>)
    1de2:	f003 fd19 	bl	5818 <clkstarted_handle>
    1de6:	e7f4      	b.n	1dd2 <nrf_power_clock_isr+0x16>
		clkstarted_handle(lfclk_dev);
    1de8:	4802      	ldr	r0, [pc, #8]	; (1df4 <nrf_power_clock_isr+0x38>)
    1dea:	f003 fd15 	bl	5818 <clkstarted_handle>
}
    1dee:	e7f6      	b.n	1dde <nrf_power_clock_isr+0x22>
    1df0:	20005bb4 	.word	0x20005bb4
    1df4:	20005bc0 	.word	0x20005bc0

00001df8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1df8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1dfc:	4b01      	ldr	r3, [pc, #4]	; (1e04 <set_comparator+0xc>)
    1dfe:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    1e02:	4770      	bx	lr
    1e04:	50015000 	.word	0x50015000

00001e08 <counter>:
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    1e08:	4b01      	ldr	r3, [pc, #4]	; (1e10 <counter+0x8>)
    1e0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static u32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    1e0e:	4770      	bx	lr
    1e10:	50015000 	.word	0x50015000

00001e14 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    1e14:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1e16:	4b0e      	ldr	r3, [pc, #56]	; (1e50 <rtc1_nrf_isr+0x3c>)
    1e18:	2200      	movs	r2, #0
    1e1a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1e1e:	f04f 0320 	mov.w	r3, #32
    1e22:	f3ef 8611 	mrs	r6, BASEPRI
    1e26:	f383 8811 	msr	BASEPRI, r3
    1e2a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
    1e2e:	f7ff ffeb 	bl	1e08 <counter>
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1e32:	4d08      	ldr	r5, [pc, #32]	; (1e54 <rtc1_nrf_isr+0x40>)
    1e34:	682c      	ldr	r4, [r5, #0]
    1e36:	4621      	mov	r1, r4
    1e38:	f003 fd24 	bl	5884 <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    1e3c:	4404      	add	r4, r0
    1e3e:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
    1e40:	f386 8811 	msr	BASEPRI, r6
    1e44:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1e48:	f002 fa86 	bl	4358 <z_clock_announce>
}
    1e4c:	bd70      	pop	{r4, r5, r6, pc}
    1e4e:	bf00      	nop
    1e50:	50015000 	.word	0x50015000
    1e54:	200029b4 	.word	0x200029b4

00001e58 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    1e58:	b570      	push	{r4, r5, r6, lr}
    1e5a:	4817      	ldr	r0, [pc, #92]	; (1eb8 <z_clock_driver_init+0x60>)
    1e5c:	f002 f8ac 	bl	3fb8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    1e60:	b338      	cbz	r0, 1eb2 <z_clock_driver_init+0x5a>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
    1e62:	6842      	ldr	r2, [r0, #4]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1e64:	6812      	ldr	r2, [r2, #0]
    1e66:	2100      	movs	r1, #0
    1e68:	4790      	blx	r2
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1e6a:	4d14      	ldr	r5, [pc, #80]	; (1ebc <z_clock_driver_init+0x64>)
    1e6c:	2400      	movs	r4, #0
    1e6e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1e72:	2601      	movs	r6, #1
    1e74:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    1e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e7c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e80:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <z_clock_driver_init+0x68>)
    1e82:	601c      	str	r4, [r3, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e84:	4b0f      	ldr	r3, [pc, #60]	; (1ec4 <z_clock_driver_init+0x6c>)
    1e86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1e8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1e8e:	4622      	mov	r2, r4
    1e90:	4631      	mov	r1, r6
    1e92:	2015      	movs	r0, #21
    1e94:	f000 f936 	bl	2104 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1e98:	2015      	movs	r0, #21
    1e9a:	f000 f923 	bl	20e4 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e9e:	4b0a      	ldr	r3, [pc, #40]	; (1ec8 <z_clock_driver_init+0x70>)
    1ea0:	601e      	str	r6, [r3, #0]
    1ea2:	602e      	str	r6, [r5, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    1ea4:	f7ff ffb0 	bl	1e08 <counter>
    1ea8:	4430      	add	r0, r6
    1eaa:	f7ff ffa5 	bl	1df8 <set_comparator>
	}

	return 0;
    1eae:	4620      	mov	r0, r4
}
    1eb0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1eb2:	f04f 30ff 	mov.w	r0, #4294967295
    1eb6:	e7fb      	b.n	1eb0 <z_clock_driver_init+0x58>
    1eb8:	000086a8 	.word	0x000086a8
    1ebc:	50015000 	.word	0x50015000
    1ec0:	50015140 	.word	0x50015140
    1ec4:	e000e100 	.word	0xe000e100
    1ec8:	50015008 	.word	0x50015008

00001ecc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1ece:	f1b0 3fff 	cmp.w	r0, #4294967295
    1ed2:	d035      	beq.n	1f40 <z_clock_set_timeout+0x74>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1ed4:	1e44      	subs	r4, r0, #1
    1ed6:	4b23      	ldr	r3, [pc, #140]	; (1f64 <z_clock_set_timeout+0x98>)
    1ed8:	429c      	cmp	r4, r3
    1eda:	dc01      	bgt.n	1ee0 <z_clock_set_timeout+0x14>
    1edc:	2c00      	cmp	r4, #0
    1ede:	dd31      	ble.n	1f44 <z_clock_set_timeout+0x78>
    1ee0:	4b20      	ldr	r3, [pc, #128]	; (1f64 <z_clock_set_timeout+0x98>)
    1ee2:	429c      	cmp	r4, r3
    1ee4:	dd00      	ble.n	1ee8 <z_clock_set_timeout+0x1c>
    1ee6:	4c20      	ldr	r4, [pc, #128]	; (1f68 <z_clock_set_timeout+0x9c>)
	__asm__ volatile(
    1ee8:	f04f 0320 	mov.w	r3, #32
    1eec:	f3ef 8611 	mrs	r6, BASEPRI
    1ef0:	f383 8811 	msr	BASEPRI, r3
    1ef4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
    1ef8:	f7ff ff86 	bl	1e08 <counter>
    1efc:	4607      	mov	r7, r0
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    1efe:	4b1b      	ldr	r3, [pc, #108]	; (1f6c <z_clock_set_timeout+0xa0>)
    1f00:	681d      	ldr	r5, [r3, #0]
    1f02:	4629      	mov	r1, r5
    1f04:	f003 fcbe 	bl	5884 <counter_sub>
    1f08:	4420      	add	r0, r4
    1f0a:	3001      	adds	r0, #1
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    1f0c:	4405      	add	r5, r0
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    1f0e:	4639      	mov	r1, r7
    1f10:	4628      	mov	r0, r5
    1f12:	f003 fcb7 	bl	5884 <counter_sub>
    1f16:	2802      	cmp	r0, #2
    1f18:	d816      	bhi.n	1f48 <z_clock_set_timeout+0x7c>
		set_comparator(cyc);
	} else {
		set_comparator(cyc);
    1f1a:	4628      	mov	r0, r5
    1f1c:	f7ff ff6c 	bl	1df8 <set_comparator>
		dt = counter_sub(cyc, counter());
    1f20:	f7ff ff72 	bl	1e08 <counter>
    1f24:	4601      	mov	r1, r0
    1f26:	4628      	mov	r0, r5
    1f28:	f003 fcac 	bl	5884 <counter_sub>
		if (dt == 0 || dt > 0x7fffff) {
    1f2c:	1e42      	subs	r2, r0, #1
    1f2e:	4b10      	ldr	r3, [pc, #64]	; (1f70 <z_clock_set_timeout+0xa4>)
    1f30:	429a      	cmp	r2, r3
    1f32:	d811      	bhi.n	1f58 <z_clock_set_timeout+0x8c>
			/* Missed it! */
			NVIC_SetPendingIRQ(RTC1_IRQn);
			if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS)) {
				zli_fixup = false;
			}
		} else if (dt == 1) {
    1f34:	2801      	cmp	r0, #1
    1f36:	d10a      	bne.n	1f4e <z_clock_set_timeout+0x82>
			/* Too soon, interrupt won't arrive. */
			set_comparator(cyc + 2);
    1f38:	1ca8      	adds	r0, r5, #2
    1f3a:	f7ff ff5d 	bl	1df8 <set_comparator>
    1f3e:	e006      	b.n	1f4e <z_clock_set_timeout+0x82>
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1f40:	4809      	ldr	r0, [pc, #36]	; (1f68 <z_clock_set_timeout+0x9c>)
    1f42:	e7c7      	b.n	1ed4 <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1f44:	2400      	movs	r4, #0
    1f46:	e7cf      	b.n	1ee8 <z_clock_set_timeout+0x1c>
		set_comparator(cyc);
    1f48:	4628      	mov	r0, r5
    1f4a:	f7ff ff55 	bl	1df8 <set_comparator>
	__asm__ volatile(
    1f4e:	f386 8811 	msr	BASEPRI, r6
    1f52:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    1f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f58:	4b06      	ldr	r3, [pc, #24]	; (1f74 <z_clock_set_timeout+0xa8>)
    1f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1f5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1f62:	e7f4      	b.n	1f4e <z_clock_set_timeout+0x82>
    1f64:	00fffffd 	.word	0x00fffffd
    1f68:	00fffffe 	.word	0x00fffffe
    1f6c:	200029b4 	.word	0x200029b4
    1f70:	007ffffe 	.word	0x007ffffe
    1f74:	e000e100 	.word	0xe000e100

00001f78 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    1f78:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f7a:	f04f 0320 	mov.w	r3, #32
    1f7e:	f3ef 8411 	mrs	r4, BASEPRI
    1f82:	f383 8811 	msr	BASEPRI, r3
    1f86:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1f8a:	f7ff ff3d 	bl	1e08 <counter>
    1f8e:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <z_clock_elapsed+0x28>)
    1f90:	6819      	ldr	r1, [r3, #0]
    1f92:	f003 fc77 	bl	5884 <counter_sub>
	__asm__ volatile(
    1f96:	f384 8811 	msr	BASEPRI, r4
    1f9a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f9e:	bd10      	pop	{r4, pc}
    1fa0:	200029b4 	.word	0x200029b4

00001fa4 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    1fa4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1fa6:	f04f 0320 	mov.w	r3, #32
    1faa:	f3ef 8511 	mrs	r5, BASEPRI
    1fae:	f383 8811 	msr	BASEPRI, r3
    1fb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1fb6:	f7ff ff27 	bl	1e08 <counter>
    1fba:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <z_timer_cycle_get_32+0x2c>)
    1fbc:	681c      	ldr	r4, [r3, #0]
    1fbe:	4621      	mov	r1, r4
    1fc0:	f003 fc60 	bl	5884 <counter_sub>
    1fc4:	4420      	add	r0, r4
	__asm__ volatile(
    1fc6:	f385 8811 	msr	BASEPRI, r5
    1fca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1fce:	bd38      	pop	{r3, r4, r5, pc}
    1fd0:	200029b4 	.word	0x200029b4

00001fd4 <z_arm_exc_exit>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1fd4:	4770      	bx	lr
    1fd6:	bf00      	nop

00001fd8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1fd8:	4912      	ldr	r1, [pc, #72]	; (2024 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1fda:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1fdc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1fe0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1fe2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1fe6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ff0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1ff4:	4f0c      	ldr	r7, [pc, #48]	; (2028 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1ff6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1ffa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ffc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1ffe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2000:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    2002:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2004:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2006:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    200a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    200c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    200e:	f003 fc6e 	bl	58ee <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2012:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2016:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    201a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    201e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2022:	4770      	bx	lr
    ldr r1, =_kernel
    2024:	20002b00 	.word	0x20002b00
    ldr v4, =_SCS_ICSR
    2028:	e000ed04 	.word	0xe000ed04

0000202c <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    202c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2030:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2032:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2036:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    203a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    203c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2040:	2902      	cmp	r1, #2
    beq _oops
    2042:	d0ff      	beq.n	2044 <_oops>

00002044 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2044:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2046:	f003 fc29 	bl	589c <z_do_kernel_oops>
    pop {r0, pc}
    204a:	bd01      	pop	{r0, pc}

0000204c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    204c:	4901      	ldr	r1, [pc, #4]	; (2054 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    204e:	2210      	movs	r2, #16
	str r2, [r1]
    2050:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    2052:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2054:	e000ed10 	.word	0xe000ed10

00002058 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    2058:	4040      	eors	r0, r0
	msr BASEPRI, r0
    205a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    205e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 207c <z_arm_bus_fault+0x24>
	ldr ip, [ip]
    2062:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    2066:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    206a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    206c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    2070:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    2074:	b501      	push	{r0, lr}
	bl z_arm_fault
    2076:	f000 f91b 	bl	22b0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    207a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    207c:	e000ed04 	.word	0xe000ed04

00002080 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2080:	bf30      	wfi
    b z_SysNmiOnReset
    2082:	f7ff bffd 	b.w	2080 <z_SysNmiOnReset>
    2086:	bf00      	nop

00002088 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2088:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    208a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    208e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2092:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    2096:	4904      	ldr	r1, [pc, #16]	; (20a8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2098:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    209a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    209c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    209e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    20a2:	4902      	ldr	r1, [pc, #8]	; (20ac <_isr_wrapper+0x24>)
	bx r1
    20a4:	4708      	bx	r1
    20a6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    20a8:	00007ca0 	.word	0x00007ca0
	ldr r1, =z_arm_int_exit
    20ac:	00001fd5 	.word	0x00001fd5

000020b0 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    20b0:	4a09      	ldr	r2, [pc, #36]	; (20d8 <z_arch_swap+0x28>)
    20b2:	6893      	ldr	r3, [r2, #8]
    20b4:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    20b6:	4909      	ldr	r1, [pc, #36]	; (20dc <z_arch_swap+0x2c>)
    20b8:	6809      	ldr	r1, [r1, #0]
    20ba:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    20bc:	4908      	ldr	r1, [pc, #32]	; (20e0 <z_arch_swap+0x30>)
    20be:	684b      	ldr	r3, [r1, #4]
    20c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    20c4:	604b      	str	r3, [r1, #4]
    20c6:	2300      	movs	r3, #0
    20c8:	f383 8811 	msr	BASEPRI, r3
    20cc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    20d0:	6893      	ldr	r3, [r2, #8]
}
    20d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	20002b00 	.word	0x20002b00
    20dc:	0000890c 	.word	0x0000890c
    20e0:	e000ed00 	.word	0xe000ed00

000020e4 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    20e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    20e6:	2b00      	cmp	r3, #0
    20e8:	db08      	blt.n	20fc <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20ea:	f000 001f 	and.w	r0, r0, #31
    20ee:	095b      	lsrs	r3, r3, #5
    20f0:	2201      	movs	r2, #1
    20f2:	fa02 f000 	lsl.w	r0, r2, r0
    20f6:	4a02      	ldr	r2, [pc, #8]	; (2100 <z_arch_irq_enable+0x1c>)
    20f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    20fc:	4770      	bx	lr
    20fe:	bf00      	nop
    2100:	e000e100 	.word	0xe000e100

00002104 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2104:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2106:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2108:	2b00      	cmp	r3, #0
    210a:	db08      	blt.n	211e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210c:	0149      	lsls	r1, r1, #5
    210e:	b2c9      	uxtb	r1, r1
    2110:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2114:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2118:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    211c:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    211e:	f000 000f 	and.w	r0, r0, #15
    2122:	0149      	lsls	r1, r1, #5
    2124:	b2c9      	uxtb	r1, r1
    2126:	4b01      	ldr	r3, [pc, #4]	; (212c <z_arm_irq_priority_set+0x28>)
    2128:	5419      	strb	r1, [r3, r0]
}
    212a:	4770      	bx	lr
    212c:	e000ed14 	.word	0xe000ed14

00002130 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2130:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2132:	4b08      	ldr	r3, [pc, #32]	; (2154 <z_arm_prep_c+0x24>)
    2134:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2138:	4a07      	ldr	r2, [pc, #28]	; (2158 <z_arm_prep_c+0x28>)
    213a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    213c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2140:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    2144:	f001 ff60 	bl	4008 <z_bss_zero>
	z_data_copy();
    2148:	f001 ff6a 	bl	4020 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    214c:	f000 f8ce 	bl	22ec <z_arm_int_lib_init>
	z_cstart();
    2150:	f001 ff96 	bl	4080 <z_cstart>
    2154:	00000000 	.word	0x00000000
    2158:	e000ed00 	.word	0xe000ed00

0000215c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    215c:	f003 f916 	bl	538c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2160:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2162:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    2166:	4808      	ldr	r0, [pc, #32]	; (2188 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2168:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    216c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    216e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2172:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2176:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2178:	4308      	orrs	r0, r1
    msr CONTROL, r0
    217a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    217e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2182:	f7ff ffd5 	bl	2130 <z_arm_prep_c>
    2186:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    2188:	20005338 	.word	0x20005338

0000218c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    218c:	b510      	push	{r4, lr}
    218e:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2190:	4b0f      	ldr	r3, [pc, #60]	; (21d0 <mem_manage_fault+0x44>)
    2192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2198:	f013 0f02 	tst.w	r3, #2
    219c:	d00b      	beq.n	21b6 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    219e:	4b0c      	ldr	r3, [pc, #48]	; (21d0 <mem_manage_fault+0x44>)
    21a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    21a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    21a8:	d005      	beq.n	21b6 <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    21aa:	b121      	cbz	r1, 21b6 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    21ac:	4a08      	ldr	r2, [pc, #32]	; (21d0 <mem_manage_fault+0x44>)
    21ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    21b4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    21b6:	4b06      	ldr	r3, [pc, #24]	; (21d0 <mem_manage_fault+0x44>)
    21b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    21ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    21bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    21be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    21c0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    21c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    21c6:	f003 fb75 	bl	58b4 <memory_fault_recoverable>
    21ca:	7020      	strb	r0, [r4, #0]

	return reason;
}
    21cc:	2000      	movs	r0, #0
    21ce:	bd10      	pop	{r4, pc}
    21d0:	e000ed00 	.word	0xe000ed00

000021d4 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    21d4:	b510      	push	{r4, lr}
    21d6:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    21d8:	4b12      	ldr	r3, [pc, #72]	; (2224 <bus_fault+0x50>)
    21da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    21dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    21de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21e0:	f413 7f00 	tst.w	r3, #512	; 0x200
    21e4:	d00b      	beq.n	21fe <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    21e6:	4b0f      	ldr	r3, [pc, #60]	; (2224 <bus_fault+0x50>)
    21e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    21ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    21f0:	d005      	beq.n	21fe <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    21f2:	b121      	cbz	r1, 21fe <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    21f4:	4a0b      	ldr	r2, [pc, #44]	; (2224 <bus_fault+0x50>)
    21f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    21fc:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    21fe:	4b09      	ldr	r3, [pc, #36]	; (2224 <bus_fault+0x50>)
    2200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2204:	f413 7f80 	tst.w	r3, #256	; 0x100
    2208:	d101      	bne.n	220e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    220a:	4b06      	ldr	r3, [pc, #24]	; (2224 <bus_fault+0x50>)
    220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    220e:	4a05      	ldr	r2, [pc, #20]	; (2224 <bus_fault+0x50>)
    2210:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2212:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2216:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    2218:	f003 fb4c 	bl	58b4 <memory_fault_recoverable>
    221c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    221e:	2000      	movs	r0, #0
    2220:	bd10      	pop	{r4, pc}
    2222:	bf00      	nop
    2224:	e000ed00 	.word	0xe000ed00

00002228 <usage_fault>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2228:	4b07      	ldr	r3, [pc, #28]	; (2248 <usage_fault+0x20>)
    222a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    223a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    223e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2242:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2244:	2000      	movs	r0, #0
    2246:	4770      	bx	lr
    2248:	e000ed00 	.word	0xe000ed00

0000224c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    224c:	b508      	push	{r3, lr}
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    224e:	2300      	movs	r3, #0
    2250:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2252:	4b13      	ldr	r3, [pc, #76]	; (22a0 <hard_fault+0x54>)
    2254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2256:	f013 0f02 	tst.w	r3, #2
    225a:	d11c      	bne.n	2296 <hard_fault+0x4a>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    225c:	4b10      	ldr	r3, [pc, #64]	; (22a0 <hard_fault+0x54>)
    225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2260:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    2264:	d019      	beq.n	229a <hard_fault+0x4e>
    2266:	460a      	mov	r2, r1
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    2268:	4b0e      	ldr	r3, [pc, #56]	; (22a4 <hard_fault+0x58>)
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	b943      	cbnz	r3, 2280 <hard_fault+0x34>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    226e:	4b0e      	ldr	r3, [pc, #56]	; (22a8 <hard_fault+0x5c>)
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	b94b      	cbnz	r3, 2288 <hard_fault+0x3c>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2274:	4b0d      	ldr	r3, [pc, #52]	; (22ac <hard_fault+0x60>)
    2276:	881b      	ldrh	r3, [r3, #0]
    2278:	b29b      	uxth	r3, r3
    227a:	b94b      	cbnz	r3, 2290 <hard_fault+0x44>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    227c:	2000      	movs	r0, #0
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    227e:	e00b      	b.n	2298 <hard_fault+0x4c>
			reason = mem_manage_fault(esf, 1, recoverable);
    2280:	2101      	movs	r1, #1
    2282:	f7ff ff83 	bl	218c <mem_manage_fault>
    2286:	e007      	b.n	2298 <hard_fault+0x4c>
			reason = bus_fault(esf, 1, recoverable);
    2288:	2101      	movs	r1, #1
    228a:	f7ff ffa3 	bl	21d4 <bus_fault>
    228e:	e003      	b.n	2298 <hard_fault+0x4c>
			reason = usage_fault(esf);
    2290:	f7ff ffca 	bl	2228 <usage_fault>
    2294:	e000      	b.n	2298 <hard_fault+0x4c>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2296:	2000      	movs	r0, #0
}
    2298:	bd08      	pop	{r3, pc}
	u32_t reason = K_ERR_CPU_EXCEPTION;
    229a:	2000      	movs	r0, #0
    229c:	e7fc      	b.n	2298 <hard_fault+0x4c>
    229e:	bf00      	nop
    22a0:	e000ed00 	.word	0xe000ed00
    22a4:	e000ed28 	.word	0xe000ed28
    22a8:	e000ed29 	.word	0xe000ed29
    22ac:	e000ed2a 	.word	0xe000ed2a

000022b0 <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    22b0:	b510      	push	{r4, lr}
    22b2:	b082      	sub	sp, #8
    22b4:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    22b6:	4b08      	ldr	r3, [pc, #32]	; (22d8 <CONFIG_NRF_CLOUD_PORT+0x25>)
    22b8:	6859      	ldr	r1, [r3, #4]
	}
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
    22ba:	f10d 0207 	add.w	r2, sp, #7
    22be:	f3c1 0108 	ubfx	r1, r1, #0, #9
    22c2:	f003 faf9 	bl	58b8 <fault_handle>
	if (recoverable) {
    22c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    22ca:	b10b      	cbz	r3, 22d0 <CONFIG_NRF_CLOUD_PORT+0x1d>
#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
}
    22cc:	b002      	add	sp, #8
    22ce:	bd10      	pop	{r4, pc}
	z_arm_fatal_error(reason, esf);
    22d0:	4621      	mov	r1, r4
    22d2:	f003 fadf 	bl	5894 <z_arm_fatal_error>
    22d6:	e7f9      	b.n	22cc <CONFIG_NRF_CLOUD_PORT+0x19>
    22d8:	e000ed00 	.word	0xe000ed00

000022dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    22dc:	4a02      	ldr	r2, [pc, #8]	; (22e8 <z_arm_fault_init+0xc>)
    22de:	6953      	ldr	r3, [r2, #20]
    22e0:	f043 0310 	orr.w	r3, r3, #16
    22e4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    22e6:	4770      	bx	lr
    22e8:	e000ed00 	.word	0xe000ed00

000022ec <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    22ec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    22ee:	e00a      	b.n	2306 <z_arm_int_lib_init+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    22f0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    22f2:	2b00      	cmp	r3, #0
    22f4:	db0a      	blt.n	230c <z_arm_int_lib_init+0x20>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    22fa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    22fe:	2120      	movs	r1, #32
    2300:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2304:	3201      	adds	r2, #1
    2306:	2a40      	cmp	r2, #64	; 0x40
    2308:	ddf2      	ble.n	22f0 <z_arm_int_lib_init+0x4>
	}
}
    230a:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    230c:	f002 010f 	and.w	r1, r2, #15
    2310:	4b02      	ldr	r3, [pc, #8]	; (231c <z_arm_int_lib_init+0x30>)
    2312:	440b      	add	r3, r1
    2314:	2120      	movs	r1, #32
    2316:	7619      	strb	r1, [r3, #24]
    2318:	e7f4      	b.n	2304 <z_arm_int_lib_init+0x18>
    231a:	bf00      	nop
    231c:	e000ecfc 	.word	0xe000ecfc

00002320 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    2320:	b538      	push	{r3, r4, r5, lr}
    2322:	4605      	mov	r5, r0
	__asm__ volatile(
    2324:	f04f 0320 	mov.w	r3, #32
    2328:	f3ef 8411 	mrs	r4, BASEPRI
    232c:	f383 8811 	msr	BASEPRI, r3
    2330:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    2334:	f005 fc3f 	bl	7bb6 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    2338:	4b0a      	ldr	r3, [pc, #40]	; (2364 <z_impl_k_thread_abort+0x44>)
    233a:	689b      	ldr	r3, [r3, #8]
    233c:	42ab      	cmp	r3, r5
    233e:	d109      	bne.n	2354 <z_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2340:	4b09      	ldr	r3, [pc, #36]	; (2368 <z_impl_k_thread_abort+0x48>)
    2342:	685b      	ldr	r3, [r3, #4]
    2344:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2348:	b143      	cbz	r3, 235c <z_impl_k_thread_abort+0x3c>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    234a:	4a07      	ldr	r2, [pc, #28]	; (2368 <z_impl_k_thread_abort+0x48>)
    234c:	6853      	ldr	r3, [r2, #4]
    234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2352:	6053      	str	r3, [r2, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    2354:	4620      	mov	r0, r4
    2356:	f001 fef9 	bl	414c <z_reschedule_irqlock>
}
    235a:	bd38      	pop	{r3, r4, r5, pc}
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    235c:	4620      	mov	r0, r4
    235e:	f7ff fea7 	bl	20b0 <z_arch_swap>
    2362:	bf00      	nop
    2364:	20002b00 	.word	0x20002b00
    2368:	e000ed00 	.word	0xe000ed00

0000236c <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    236c:	4b01      	ldr	r3, [pc, #4]	; (2374 <mpu_init+0x8>)
    236e:	4a02      	ldr	r2, [pc, #8]	; (2378 <mpu_init+0xc>)
    2370:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    2372:	4770      	bx	lr
    2374:	e000ed90 	.word	0xe000ed90
    2378:	0044ffaa 	.word	0x0044ffaa

0000237c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    237c:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    237e:	680b      	ldr	r3, [r1, #0]
    2380:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2384:	7a0c      	ldrb	r4, [r1, #8]
    2386:	f004 031f 	and.w	r3, r4, #31
    238a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    238c:	68cb      	ldr	r3, [r1, #12]
    238e:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2392:	0964      	lsrs	r4, r4, #5
    2394:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2398:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    239c:	4903      	ldr	r1, [pc, #12]	; (23ac <region_init+0x30>)
    239e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    23a0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    23a2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    23a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    23a8:	4770      	bx	lr
    23aa:	bf00      	nop
    23ac:	e000ed90 	.word	0xe000ed90

000023b0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
    23b0:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    23b2:	280f      	cmp	r0, #15
    23b4:	d804      	bhi.n	23c0 <region_allocate_and_init+0x10>
    23b6:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    23b8:	f7ff ffe0 	bl	237c <region_init>

	return index;
}
    23bc:	4620      	mov	r0, r4
    23be:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23c0:	f04f 0400 	mov.w	r4, #0
    23c4:	2301      	movs	r3, #1
    23c6:	f363 0402 	bfi	r4, r3, #0, #3
    23ca:	f36f 04c5 	bfc	r4, #3, #3
    23ce:	4b07      	ldr	r3, [pc, #28]	; (23ec <region_allocate_and_init+0x3c>)
    23d0:	4a07      	ldr	r2, [pc, #28]	; (23f0 <region_allocate_and_init+0x40>)
    23d2:	1a9b      	subs	r3, r3, r2
    23d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    23d8:	f363 148f 	bfi	r4, r3, #6, #10
    23dc:	4602      	mov	r2, r0
    23de:	4905      	ldr	r1, [pc, #20]	; (23f4 <region_allocate_and_init+0x44>)
    23e0:	4620      	mov	r0, r4
    23e2:	f002 ffdd 	bl	53a0 <log_string_sync>
		return -EINVAL;
    23e6:	f06f 0415 	mvn.w	r4, #21
    23ea:	e7e7      	b.n	23bc <region_allocate_and_init+0xc>
    23ec:	00007f54 	.word	0x00007f54
    23f0:	00007f44 	.word	0x00007f44
    23f4:	00008728 	.word	0x00008728

000023f8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    23f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23fc:	b087      	sub	sp, #28
    23fe:	4680      	mov	r8, r0
    2400:	468b      	mov	fp, r1
    2402:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    2404:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    2406:	2500      	movs	r5, #0
    2408:	e05e      	b.n	24c8 <mpu_configure_regions+0xd0>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    240a:	2301      	movs	r3, #1
    240c:	f363 0002 	bfi	r0, r3, #0, #3
    2410:	f36f 00c5 	bfc	r0, #3, #3
    2414:	4b6b      	ldr	r3, [pc, #428]	; (25c4 <mpu_configure_regions+0x1cc>)
    2416:	4a6c      	ldr	r2, [pc, #432]	; (25c8 <mpu_configure_regions+0x1d0>)
    2418:	1a9b      	subs	r3, r3, r2
    241a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    241e:	f363 108f 	bfi	r0, r3, #6, #10
    2422:	462a      	mov	r2, r5
    2424:	4969      	ldr	r1, [pc, #420]	; (25cc <mpu_configure_regions+0x1d4>)
    2426:	f002 ffbb 	bl	53a0 <log_string_sync>
			return -EINVAL;
    242a:	f06f 0415 	mvn.w	r4, #21
    242e:	e016      	b.n	245e <mpu_configure_regions+0x66>
	return -EINVAL;
    2430:	f06f 0615 	mvn.w	r6, #21
    2434:	e065      	b.n	2502 <mpu_configure_regions+0x10a>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2436:	f04f 0000 	mov.w	r0, #0
    243a:	2301      	movs	r3, #1
    243c:	f363 0002 	bfi	r0, r3, #0, #3
    2440:	f36f 00c5 	bfc	r0, #3, #3
    2444:	4b5f      	ldr	r3, [pc, #380]	; (25c4 <mpu_configure_regions+0x1cc>)
    2446:	4a60      	ldr	r2, [pc, #384]	; (25c8 <mpu_configure_regions+0x1d0>)
    2448:	1a9b      	subs	r3, r3, r2
    244a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    244e:	f363 108f 	bfi	r0, r3, #6, #10
    2452:	4632      	mov	r2, r6
    2454:	495e      	ldr	r1, [pc, #376]	; (25d0 <mpu_configure_regions+0x1d8>)
    2456:	f002 ffa3 	bl	53a0 <log_string_sync>
				u_reg_index);
			return -EINVAL;
    245a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    245e:	4620      	mov	r0, r4
    2460:	b007      	add	sp, #28
    2462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    2466:	45ba      	cmp	sl, r7
    2468:	d164      	bne.n	2534 <mpu_configure_regions+0x13c>
			mpu_configure_region(u_reg_index, regions[i]);
    246a:	b2f0      	uxtb	r0, r6
    246c:	f003 fa57 	bl	591e <mpu_configure_region>
    2470:	e029      	b.n	24c6 <mpu_configure_regions+0xce>
	MPU->RNR = index;
    2472:	4a58      	ldr	r2, [pc, #352]	; (25d4 <mpu_configure_regions+0x1dc>)
    2474:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2478:	68d3      	ldr	r3, [r2, #12]
    247a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    247e:	f020 001f 	bic.w	r0, r0, #31
    2482:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2484:	60d0      	str	r0, [r2, #12]
			reg_index =
    2486:	f858 1009 	ldr.w	r1, [r8, r9]
    248a:	b2e0      	uxtb	r0, r4
    248c:	f003 fa47 	bl	591e <mpu_configure_region>
    2490:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2492:	f110 0f16 	cmn.w	r0, #22
    2496:	d0e2      	beq.n	245e <mpu_configure_regions+0x66>
			reg_index++;
    2498:	3401      	adds	r4, #1
    249a:	e014      	b.n	24c6 <mpu_configure_regions+0xce>
				regions[i]->start - 1);
    249c:	3b01      	subs	r3, #1
	MPU->RNR = index;
    249e:	494d      	ldr	r1, [pc, #308]	; (25d4 <mpu_configure_regions+0x1dc>)
    24a0:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24a4:	690a      	ldr	r2, [r1, #16]
    24a6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    24aa:	f023 031f 	bic.w	r3, r3, #31
    24ae:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24b0:	610b      	str	r3, [r1, #16]
			reg_index =
    24b2:	f858 1009 	ldr.w	r1, [r8, r9]
    24b6:	b2e0      	uxtb	r0, r4
    24b8:	f003 fa31 	bl	591e <mpu_configure_region>
    24bc:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    24be:	f110 0f16 	cmn.w	r0, #22
    24c2:	d0cc      	beq.n	245e <mpu_configure_regions+0x66>
			reg_index++;
    24c4:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    24c6:	3501      	adds	r5, #1
    24c8:	455d      	cmp	r5, fp
    24ca:	dac8      	bge.n	245e <mpu_configure_regions+0x66>
		if (regions[i]->size == 0U) {
    24cc:	ea4f 0985 	mov.w	r9, r5, lsl #2
    24d0:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    24d4:	6877      	ldr	r7, [r6, #4]
    24d6:	2f00      	cmp	r7, #0
    24d8:	d0f5      	beq.n	24c6 <mpu_configure_regions+0xce>
		if (do_sanity_check &&
    24da:	9b01      	ldr	r3, [sp, #4]
    24dc:	b123      	cbz	r3, 24e8 <mpu_configure_regions+0xf0>
			(!mpu_partition_is_valid(regions[i]))) {
    24de:	4630      	mov	r0, r6
    24e0:	f003 fa0b 	bl	58fa <mpu_partition_is_valid>
		if (do_sanity_check &&
    24e4:	2800      	cmp	r0, #0
    24e6:	d090      	beq.n	240a <mpu_configure_regions+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    24e8:	f8d6 a000 	ldr.w	sl, [r6]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    24ec:	4650      	mov	r0, sl
    24ee:	f002 fce8 	bl	4ec2 <arm_cmse_mpu_region_get>
    24f2:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    24f4:	eb07 000a 	add.w	r0, r7, sl
    24f8:	3801      	subs	r0, #1
    24fa:	f002 fce2 	bl	4ec2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    24fe:	4286      	cmp	r6, r0
    2500:	d196      	bne.n	2430 <mpu_configure_regions+0x38>
		if ((u_reg_index == -EINVAL) ||
    2502:	f116 0f16 	cmn.w	r6, #22
    2506:	d096      	beq.n	2436 <mpu_configure_regions+0x3e>
			(u_reg_index > (reg_index - 1))) {
    2508:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    250a:	42b3      	cmp	r3, r6
    250c:	db93      	blt.n	2436 <mpu_configure_regions+0x3e>
		u32_t u_reg_base = mpu_region_get_base(u_reg_index);
    250e:	46b4      	mov	ip, r6
	MPU->RNR = index;
    2510:	4b30      	ldr	r3, [pc, #192]	; (25d4 <mpu_configure_regions+0x1dc>)
    2512:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2514:	68da      	ldr	r2, [r3, #12]
    2516:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    251a:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    251c:	691f      	ldr	r7, [r3, #16]
    251e:	f047 071f 	orr.w	r7, r7, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2522:	f858 1009 	ldr.w	r1, [r8, r9]
    2526:	680b      	ldr	r3, [r1, #0]
    2528:	6848      	ldr	r0, [r1, #4]
    252a:	4418      	add	r0, r3
    252c:	f100 3aff 	add.w	sl, r0, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    2530:	4293      	cmp	r3, r2
    2532:	d098      	beq.n	2466 <mpu_configure_regions+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    2534:	4293      	cmp	r3, r2
    2536:	d09c      	beq.n	2472 <mpu_configure_regions+0x7a>
		} else if (reg_last == u_reg_last) {
    2538:	45ba      	cmp	sl, r7
    253a:	d0af      	beq.n	249c <mpu_configure_regions+0xa4>
				regions[i]->start - 1);
    253c:	3b01      	subs	r3, #1
	MPU->RNR = index;
    253e:	4925      	ldr	r1, [pc, #148]	; (25d4 <mpu_configure_regions+0x1dc>)
    2540:	4666      	mov	r6, ip
    2542:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2546:	690a      	ldr	r2, [r1, #16]
    2548:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    254c:	f023 031f 	bic.w	r3, r3, #31
    2550:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2552:	610b      	str	r3, [r1, #16]
			reg_index =
    2554:	f858 1009 	ldr.w	r1, [r8, r9]
    2558:	b2e0      	uxtb	r0, r4
    255a:	f003 f9e0 	bl	591e <mpu_configure_region>
    255e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2560:	f110 0f16 	cmn.w	r0, #22
    2564:	f43f af7b 	beq.w	245e <mpu_configure_regions+0x66>
			reg_index++;
    2568:	3001      	adds	r0, #1
	MPU->RNR = index;
    256a:	4b1a      	ldr	r3, [pc, #104]	; (25d4 <mpu_configure_regions+0x1dc>)
    256c:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    256e:	68d9      	ldr	r1, [r3, #12]
    2570:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2574:	f361 0204 	bfi	r2, r1, #0, #5
    2578:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    257c:	691b      	ldr	r3, [r3, #16]
    257e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    2582:	b2d2      	uxtb	r2, r2
    2584:	f363 1247 	bfi	r2, r3, #5, #3
    2588:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    258c:	f858 2009 	ldr.w	r2, [r8, r9]
    2590:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    2592:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    2594:	4421      	add	r1, r4
    2596:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    2598:	6813      	ldr	r3, [r2, #0]
    259a:	4423      	add	r3, r4
    259c:	f023 031f 	bic.w	r3, r3, #31
    25a0:	eba7 070a 	sub.w	r7, r7, sl
    25a4:	441f      	add	r7, r3
    25a6:	3f01      	subs	r7, #1
    25a8:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    25ac:	9705      	str	r7, [sp, #20]
			reg_index =
    25ae:	a902      	add	r1, sp, #8
    25b0:	b2c0      	uxtb	r0, r0
    25b2:	f7ff fefd 	bl	23b0 <region_allocate_and_init>
    25b6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    25b8:	f110 0f16 	cmn.w	r0, #22
    25bc:	f43f af4f 	beq.w	245e <mpu_configure_regions+0x66>
			reg_index++;
    25c0:	3401      	adds	r4, #1
    25c2:	e780      	b.n	24c6 <mpu_configure_regions+0xce>
    25c4:	00007f54 	.word	0x00007f54
    25c8:	00007f44 	.word	0x00007f44
    25cc:	000086e0 	.word	0x000086e0
    25d0:	00008704 	.word	0x00008704
    25d4:	e000ed90 	.word	0xe000ed90

000025d8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
    25d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25da:	4606      	mov	r6, r0
    25dc:	460f      	mov	r7, r1
	int mpu_reg_index = static_regions_num;
    25de:	4b10      	ldr	r3, [pc, #64]	; (2620 <mpu_configure_dynamic_mpu_regions+0x48>)
    25e0:	781d      	ldrb	r5, [r3, #0]
    25e2:	462b      	mov	r3, r5

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    25e4:	e004      	b.n	25f0 <mpu_configure_dynamic_mpu_regions+0x18>
  mpu->RNR = rnr;
    25e6:	4a0f      	ldr	r2, [pc, #60]	; (2624 <mpu_configure_dynamic_mpu_regions+0x4c>)
    25e8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    25ea:	2100      	movs	r1, #0
    25ec:	6111      	str	r1, [r2, #16]
    25ee:	3301      	adds	r3, #1
    25f0:	2b0f      	cmp	r3, #15
    25f2:	ddf8      	ble.n	25e6 <mpu_configure_dynamic_mpu_regions+0xe>
	}

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    25f4:	2400      	movs	r4, #0
    25f6:	2c00      	cmp	r4, #0
    25f8:	dd06      	ble.n	2608 <mpu_configure_dynamic_mpu_regions+0x30>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    25fa:	2301      	movs	r3, #1
    25fc:	462a      	mov	r2, r5
    25fe:	4639      	mov	r1, r7
    2600:	4630      	mov	r0, r6
    2602:	f7ff fef9 	bl	23f8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	return mpu_reg_index;
}
    2606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		region_init(dyn_reg_info[i].index,
    2608:	4807      	ldr	r0, [pc, #28]	; (2628 <mpu_configure_dynamic_mpu_regions+0x50>)
    260a:	00a3      	lsls	r3, r4, #2
    260c:	4423      	add	r3, r4
    260e:	009a      	lsls	r2, r3, #2
    2610:	1881      	adds	r1, r0, r2
    2612:	3104      	adds	r1, #4
    2614:	5880      	ldr	r0, [r0, r2]
    2616:	f7ff feb1 	bl	237c <region_init>
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    261a:	3401      	adds	r4, #1
    261c:	e7eb      	b.n	25f6 <mpu_configure_dynamic_mpu_regions+0x1e>
    261e:	bf00      	nop
    2620:	20002b2f 	.word	0x20002b2f
    2624:	e000ed90 	.word	0xe000ed90
    2628:	200029b8 	.word	0x200029b8

0000262c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    262c:	4b03      	ldr	r3, [pc, #12]	; (263c <arm_core_mpu_enable+0x10>)
    262e:	2205      	movs	r2, #5
    2630:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2632:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2636:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    263a:	4770      	bx	lr
    263c:	e000ed90 	.word	0xe000ed90

00002640 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2640:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2644:	4b01      	ldr	r3, [pc, #4]	; (264c <arm_core_mpu_disable+0xc>)
    2646:	2200      	movs	r2, #0
    2648:	605a      	str	r2, [r3, #4]
}
    264a:	4770      	bx	lr
    264c:	e000ed90 	.word	0xe000ed90

00002650 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    2650:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2652:	4b0e      	ldr	r3, [pc, #56]	; (268c <arm_mpu_init+0x3c>)
    2654:	681d      	ldr	r5, [r3, #0]
    2656:	2d10      	cmp	r5, #16
    2658:	d815      	bhi.n	2686 <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    265a:	f7ff fff1 	bl	2640 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();
    265e:	f7ff fe85 	bl	236c <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2662:	2400      	movs	r4, #0
    2664:	e007      	b.n	2676 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2666:	4b09      	ldr	r3, [pc, #36]	; (268c <arm_mpu_init+0x3c>)
    2668:	6859      	ldr	r1, [r3, #4]
    266a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    266e:	4620      	mov	r0, r4
    2670:	f7ff fe84 	bl	237c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2674:	3401      	adds	r4, #1
    2676:	42a5      	cmp	r5, r4
    2678:	d8f5      	bhi.n	2666 <arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <arm_mpu_init+0x40>)
    267c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    267e:	f7ff ffd5 	bl	262c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2682:	2000      	movs	r0, #0
}
    2684:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2686:	f04f 30ff 	mov.w	r0, #4294967295
    268a:	e7fb      	b.n	2684 <arm_mpu_init+0x34>
    268c:	000084c0 	.word	0x000084c0
    2690:	20002b2f 	.word	0x20002b2f

00002694 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2694:	4b01      	ldr	r3, [pc, #4]	; (269c <__stdout_hook_install+0x8>)
    2696:	6018      	str	r0, [r3, #0]
}
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	20005b44 	.word	0x20005b44

000026a0 <gpiote_channel_alloc>:
	return port->config->config_info;
}

static int gpiote_channel_alloc(u32_t abs_pin, nrf_gpiote_polarity_t polarity)
{
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    26a0:	2300      	movs	r3, #0
    26a2:	2b07      	cmp	r3, #7
    26a4:	d83a      	bhi.n	271c <gpiote_channel_alloc+0x7c>
{
    26a6:	b470      	push	{r4, r5, r6}
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    26a8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    26ac:	4c1d      	ldr	r4, [pc, #116]	; (2724 <gpiote_channel_alloc+0x84>)
    26ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    26b2:	f012 0f03 	tst.w	r2, #3
    26b6:	d007      	beq.n	26c8 <gpiote_channel_alloc+0x28>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    26b8:	3301      	adds	r3, #1
    26ba:	b2db      	uxtb	r3, r3
    26bc:	2b07      	cmp	r3, #7
    26be:	d9f3      	bls.n	26a8 <gpiote_channel_alloc+0x8>
			nrf_gpiote_int_enable(BIT(channel));
			return 0;
		}
	}

	return -ENODEV;
    26c0:	f06f 0012 	mvn.w	r0, #18
}
    26c4:	bc70      	pop	{r4, r5, r6}
    26c6:	4770      	bx	lr
			nrf_gpiote_events_t evt =
    26c8:	009c      	lsls	r4, r3, #2
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    26ca:	4a16      	ldr	r2, [pc, #88]	; (2724 <gpiote_channel_alloc+0x84>)
    26cc:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    26d0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    26d4:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    26d8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    26dc:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    26e0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    26e4:	0200      	lsls	r0, r0, #8
    26e6:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    26ea:	0409      	lsls	r1, r1, #16
    26ec:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    26f0:	4308      	orrs	r0, r1
    26f2:	4330      	orrs	r0, r6
    26f4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
    return ((uint32_t)NRF_GPIOTE + event);
    26f8:	f104 41a0 	add.w	r1, r4, #1342177280	; 0x50000000
    26fc:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    2700:	2000      	movs	r0, #0
    2702:	6008      	str	r0, [r1, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2704:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
    2708:	f041 0101 	orr.w	r1, r1, #1
    270c:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			nrf_gpiote_int_enable(BIT(channel));
    2710:	2101      	movs	r1, #1
    2712:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENSET = mask;
    2716:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
			return 0;
    271a:	e7d3      	b.n	26c4 <gpiote_channel_alloc+0x24>
	return -ENODEV;
    271c:	f06f 0012 	mvn.w	r0, #18
}
    2720:	4770      	bx	lr
    2722:	bf00      	nop
    2724:	5000d000 	.word	0x5000d000

00002728 <gpiote_channel_free>:

static void gpiote_channel_free(u32_t abs_pin)
{
    2728:	b410      	push	{r4}
    return (NRF_GPIOTE->INTENSET & mask);
    272a:	4b14      	ldr	r3, [pc, #80]	; (277c <gpiote_channel_free+0x54>)
    272c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    2730:	b2e4      	uxtb	r4, r4
	u32_t intenset = nrf_gpiote_int_is_enabled(NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2732:	2300      	movs	r3, #0
    2734:	e000      	b.n	2738 <gpiote_channel_free+0x10>
    2736:	3301      	adds	r3, #1
    2738:	2b07      	cmp	r3, #7
    273a:	d81b      	bhi.n	2774 <gpiote_channel_free+0x4c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    273c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2740:	490e      	ldr	r1, [pc, #56]	; (277c <gpiote_channel_free+0x54>)
    2742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2746:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    274a:	4290      	cmp	r0, r2
    274c:	d1f3      	bne.n	2736 <gpiote_channel_free+0xe>
		    && (intenset & BIT(i))) {
    274e:	fa24 f203 	lsr.w	r2, r4, r3
    2752:	f012 0f01 	tst.w	r2, #1
    2756:	d0ee      	beq.n	2736 <gpiote_channel_free+0xe>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2758:	460a      	mov	r2, r1
    275a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    275e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    2762:	f021 0101 	bic.w	r1, r1, #1
    2766:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_event_disable(i);
			nrf_gpiote_int_disable(BIT(i));
    276a:	2101      	movs	r1, #1
    276c:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENCLR = mask;
    2770:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			return;
		}
	}
}
    2774:	f85d 4b04 	ldr.w	r4, [sp], #4
    2778:	4770      	bx	lr
    277a:	bf00      	nop
    277c:	5000d000 	.word	0x5000d000

00002780 <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	460d      	mov	r5, r1
	return port->driver_data;
    2784:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    2786:	6803      	ldr	r3, [r0, #0]
    2788:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    278a:	791b      	ldrb	r3, [r3, #4]
    278c:	f001 041f 	and.w	r4, r1, #31
    2790:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	int res = 0;

	gpiote_channel_free(abs_pin);
    2794:	4620      	mov	r0, r4
    2796:	f7ff ffc7 	bl	2728 <gpiote_channel_free>
__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    279a:	4b2b      	ldr	r3, [pc, #172]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    279c:	f104 0280 	add.w	r2, r4, #128	; 0x80
    27a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    27a4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    27a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    27ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    27b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    27b4:	68b3      	ldr	r3, [r6, #8]
    27b6:	40eb      	lsrs	r3, r5
    27b8:	f013 0f01 	tst.w	r3, #1
    27bc:	d03f      	beq.n	283e <CONFIG_MAIN_STACK_SIZE+0x3e>
    27be:	68f3      	ldr	r3, [r6, #12]
    27c0:	40eb      	lsrs	r3, r5
    27c2:	f013 0f01 	tst.w	r3, #1
    27c6:	d03c      	beq.n	2842 <CONFIG_MAIN_STACK_SIZE+0x42>
		if (data->trig_edge & BIT(pin)) {
    27c8:	6973      	ldr	r3, [r6, #20]
    27ca:	40eb      	lsrs	r3, r5
    27cc:	f013 0f01 	tst.w	r3, #1
    27d0:	d01a      	beq.n	2808 <CONFIG_MAIN_STACK_SIZE+0x8>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
    27d2:	69b3      	ldr	r3, [r6, #24]
    27d4:	40eb      	lsrs	r3, r5
    27d6:	f013 0f01 	tst.w	r3, #1
    27da:	d10e      	bne.n	27fa <gpiote_pin_int_cfg+0x7a>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
    27dc:	6933      	ldr	r3, [r6, #16]
    27de:	40eb      	lsrs	r3, r5
    27e0:	f003 0301 	and.w	r3, r3, #1
    27e4:	b2da      	uxtb	r2, r3
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    27e6:	69f3      	ldr	r3, [r6, #28]
    27e8:	fa23 f505 	lsr.w	r5, r3, r5
    27ec:	f005 0501 	and.w	r5, r5, #1
			} else if (((data->active_level & BIT(pin)) != 0U)
    27f0:	b2ed      	uxtb	r5, r5
    27f2:	42aa      	cmp	r2, r5
    27f4:	d006      	beq.n	2804 <CONFIG_MAIN_STACK_SIZE+0x4>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    27f6:	2101      	movs	r1, #1
    27f8:	e000      	b.n	27fc <gpiote_pin_int_cfg+0x7c>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    27fa:	2103      	movs	r1, #3
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
			}

			res = gpiote_channel_alloc(abs_pin, pol);
    27fc:	4620      	mov	r0, r4
    27fe:	f7ff ff4f 	bl	26a0 <gpiote_channel_alloc>
    2802:	e01d      	b.n	2840 <CONFIG_MAIN_STACK_SIZE+0x40>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2804:	2102      	movs	r1, #2
    2806:	e7f9      	b.n	27fc <gpiote_pin_int_cfg+0x7c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2808:	6933      	ldr	r3, [r6, #16]
    280a:	69f2      	ldr	r2, [r6, #28]
    280c:	4053      	eors	r3, r2
    280e:	fa23 f505 	lsr.w	r5, r3, r5
    2812:	f015 0f01 	tst.w	r5, #1
    2816:	d010      	beq.n	283a <CONFIG_MAIN_STACK_SIZE+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    2818:	2002      	movs	r0, #2
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    281a:	4b0b      	ldr	r3, [pc, #44]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    281c:	3480      	adds	r4, #128	; 0x80
    281e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    2822:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    2826:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    282a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    282e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    2832:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	int res = 0;
    2836:	2000      	movs	r0, #0
    2838:	e002      	b.n	2840 <CONFIG_MAIN_STACK_SIZE+0x40>
	return NRF_GPIO_PIN_SENSE_LOW;
    283a:	2003      	movs	r0, #3
    283c:	e7ed      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
	int res = 0;
    283e:	2000      	movs	r0, #0

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
    2840:	bd70      	pop	{r4, r5, r6, pc}
	int res = 0;
    2842:	2000      	movs	r0, #0
	return res;
    2844:	e7fc      	b.n	2840 <CONFIG_MAIN_STACK_SIZE+0x40>
    2846:	bf00      	nop
    2848:	50842500 	.word	0x50842500

0000284c <gpio_nrfx_config>:

static int gpio_nrfx_config(struct device *port, int access_op,
			    u32_t pin, int flags)
{
    284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2850:	b083      	sub	sp, #12
	return port->driver_data;
    2852:	6884      	ldr	r4, [r0, #8]
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;
	u8_t from_pin;
	u8_t to_pin;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2854:	f403 4570 	and.w	r5, r3, #61440	; 0xf000
    2858:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
    285c:	d03f      	beq.n	28de <gpio_nrfx_config+0x92>
    285e:	dd0c      	ble.n	287a <gpio_nrfx_config+0x2e>
    2860:	f5b5 4fe0 	cmp.w	r5, #28672	; 0x7000
    2864:	d038      	beq.n	28d8 <gpio_nrfx_config+0x8c>
    2866:	dd12      	ble.n	288e <gpio_nrfx_config+0x42>
    2868:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
    286c:	d02b      	beq.n	28c6 <gpio_nrfx_config+0x7a>
    286e:	f5b5 4f50 	cmp.w	r5, #53248	; 0xd000
    2872:	d109      	bne.n	2888 <gpio_nrfx_config+0x3c>
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_DISCONNECT_HIGH:
		drive = NRF_GPIO_PIN_H0D1;
    2874:	f04f 0a07 	mov.w	sl, #7
		break;
    2878:	e011      	b.n	289e <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    287a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    287e:	d025      	beq.n	28cc <gpio_nrfx_config+0x80>
    2880:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
    2884:	d025      	beq.n	28d2 <gpio_nrfx_config+0x86>
    2886:	b145      	cbz	r5, 289a <gpio_nrfx_config+0x4e>
	case GPIO_DS_DISCONNECT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_D0H1;
		break;

	default:
		return -EINVAL;
    2888:	f06f 0315 	mvn.w	r3, #21
    288c:	e09b      	b.n	29c6 <gpio_nrfx_config+0x17a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    288e:	f5b5 4fa0 	cmp.w	r5, #20480	; 0x5000
    2892:	d1f9      	bne.n	2888 <gpio_nrfx_config+0x3c>
		drive = NRF_GPIO_PIN_H0H1;
    2894:	f04f 0a03 	mov.w	sl, #3
		break;
    2898:	e001      	b.n	289e <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0S1;
    289a:	f04f 0a00 	mov.w	sl, #0
	}

	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    289e:	f403 7540 	and.w	r5, r3, #768	; 0x300
    28a2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    28a6:	d020      	beq.n	28ea <gpio_nrfx_config+0x9e>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    28a8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    28ac:	d01a      	beq.n	28e4 <gpio_nrfx_config+0x98>
		pull = NRF_GPIO_PIN_PULLDOWN;
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
    28ae:	2500      	movs	r5, #0
    28b0:	9501      	str	r5, [sp, #4]
    28b2:	461e      	mov	r6, r3
    28b4:	4607      	mov	r7, r0
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = (dir == NRF_GPIO_PIN_DIR_INPUT)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    28b6:	f003 0b01 	and.w	fp, r3, #1
    28ba:	46d9      	mov	r9, fp

	if (access_op == GPIO_ACCESS_BY_PORT) {
    28bc:	2901      	cmp	r1, #1
    28be:	d017      	beq.n	28f0 <gpio_nrfx_config+0xa4>
		from_pin = 0U;
		to_pin   = 31U;
	} else {
		from_pin = pin;
    28c0:	b2d5      	uxtb	r5, r2
		to_pin   = pin;
    28c2:	46a8      	mov	r8, r5
    28c4:	e040      	b.n	2948 <gpio_nrfx_config+0xfc>
		drive = NRF_GPIO_PIN_S0D1;
    28c6:	f04f 0a06 	mov.w	sl, #6
		break;
    28ca:	e7e8      	b.n	289e <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_H0S1;
    28cc:	f04f 0a01 	mov.w	sl, #1
		break;
    28d0:	e7e5      	b.n	289e <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0S1;
    28d2:	f04f 0a04 	mov.w	sl, #4
		break;
    28d6:	e7e2      	b.n	289e <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    28d8:	f04f 0a05 	mov.w	sl, #5
		break;
    28dc:	e7df      	b.n	289e <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0H1;
    28de:	f04f 0a02 	mov.w	sl, #2
    28e2:	e7dc      	b.n	289e <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLDOWN;
    28e4:	2501      	movs	r5, #1
    28e6:	9501      	str	r5, [sp, #4]
    28e8:	e7e3      	b.n	28b2 <gpio_nrfx_config+0x66>
		pull = NRF_GPIO_PIN_PULLUP;
    28ea:	2503      	movs	r5, #3
    28ec:	9501      	str	r5, [sp, #4]
    28ee:	e7e0      	b.n	28b2 <gpio_nrfx_config+0x66>
		to_pin   = 31U;
    28f0:	f04f 081f 	mov.w	r8, #31
		from_pin = 0U;
    28f4:	2500      	movs	r5, #0
	}

	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    28f6:	e027      	b.n	2948 <gpio_nrfx_config+0xfc>

		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
					      curr_pin),
			     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    28f8:	68a3      	ldr	r3, [r4, #8]
    28fa:	2201      	movs	r2, #1
    28fc:	40aa      	lsls	r2, r5
    28fe:	ea23 0302 	bic.w	r3, r3, r2
    2902:	e03d      	b.n	2980 <gpio_nrfx_config+0x134>
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    2904:	6963      	ldr	r3, [r4, #20]
    2906:	2201      	movs	r2, #1
    2908:	408a      	lsls	r2, r1
    290a:	ea23 0302 	bic.w	r3, r3, r2
    290e:	e03f      	b.n	2990 <gpio_nrfx_config+0x144>
		WRITE_BIT(data->double_edge, curr_pin,
    2910:	69a3      	ldr	r3, [r4, #24]
    2912:	2201      	movs	r2, #1
    2914:	408a      	lsls	r2, r1
    2916:	ea23 0302 	bic.w	r3, r3, r2
    291a:	e041      	b.n	29a0 <gpio_nrfx_config+0x154>
			  flags & GPIO_INT_DOUBLE_EDGE);
		WRITE_BIT(data->active_level, curr_pin,
    291c:	6923      	ldr	r3, [r4, #16]
    291e:	2201      	movs	r2, #1
    2920:	408a      	lsls	r2, r1
    2922:	ea23 0302 	bic.w	r3, r3, r2
    2926:	e043      	b.n	29b0 <gpio_nrfx_config+0x164>
			  flags & GPIO_INT_ACTIVE_HIGH);
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    2928:	69e3      	ldr	r3, [r4, #28]
    292a:	2201      	movs	r2, #1
    292c:	fa02 f101 	lsl.w	r1, r2, r1
    2930:	ea23 0101 	bic.w	r1, r3, r1
    2934:	61e1      	str	r1, [r4, #28]

		res = gpiote_pin_int_cfg(port, curr_pin);
    2936:	4629      	mov	r1, r5
    2938:	4638      	mov	r0, r7
    293a:	f7ff ff21 	bl	2780 <gpiote_pin_int_cfg>
		if (res != 0) {
    293e:	4603      	mov	r3, r0
    2940:	2800      	cmp	r0, #0
    2942:	d140      	bne.n	29c6 <gpio_nrfx_config+0x17a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2944:	3501      	adds	r5, #1
    2946:	b2ed      	uxtb	r5, r5
    2948:	45a8      	cmp	r8, r5
    294a:	d33b      	bcc.n	29c4 <gpio_nrfx_config+0x178>
	return port->config->config_info;
    294c:	683b      	ldr	r3, [r7, #0]
    294e:	689b      	ldr	r3, [r3, #8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    2950:	791a      	ldrb	r2, [r3, #4]
    2952:	4629      	mov	r1, r5
    2954:	f005 031f 	and.w	r3, r5, #31
    2958:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    295c:	ea4b 0249 	orr.w	r2, fp, r9, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    2960:	9801      	ldr	r0, [sp, #4]
    2962:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2966:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    296a:	3380      	adds	r3, #128	; 0x80
    296c:	4818      	ldr	r0, [pc, #96]	; (29d0 <gpio_nrfx_config+0x184>)
    296e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2972:	f016 0f02 	tst.w	r6, #2
    2976:	d0bf      	beq.n	28f8 <gpio_nrfx_config+0xac>
    2978:	68a3      	ldr	r3, [r4, #8]
    297a:	2201      	movs	r2, #1
    297c:	40aa      	lsls	r2, r5
    297e:	4313      	orrs	r3, r2
    2980:	60a3      	str	r3, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    2982:	f016 0f20 	tst.w	r6, #32
    2986:	d0bd      	beq.n	2904 <gpio_nrfx_config+0xb8>
    2988:	6963      	ldr	r3, [r4, #20]
    298a:	2201      	movs	r2, #1
    298c:	408a      	lsls	r2, r1
    298e:	4313      	orrs	r3, r2
    2990:	6163      	str	r3, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    2992:	f016 0f40 	tst.w	r6, #64	; 0x40
    2996:	d0bb      	beq.n	2910 <gpio_nrfx_config+0xc4>
    2998:	69a3      	ldr	r3, [r4, #24]
    299a:	2201      	movs	r2, #1
    299c:	408a      	lsls	r2, r1
    299e:	4313      	orrs	r3, r2
    29a0:	61a3      	str	r3, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    29a2:	f016 0f04 	tst.w	r6, #4
    29a6:	d0b9      	beq.n	291c <gpio_nrfx_config+0xd0>
    29a8:	6923      	ldr	r3, [r4, #16]
    29aa:	2201      	movs	r2, #1
    29ac:	408a      	lsls	r2, r1
    29ae:	4313      	orrs	r3, r2
    29b0:	6123      	str	r3, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    29b2:	f016 0f80 	tst.w	r6, #128	; 0x80
    29b6:	d0b7      	beq.n	2928 <gpio_nrfx_config+0xdc>
    29b8:	69e3      	ldr	r3, [r4, #28]
    29ba:	2201      	movs	r2, #1
    29bc:	fa02 f101 	lsl.w	r1, r2, r1
    29c0:	4319      	orrs	r1, r3
    29c2:	e7b7      	b.n	2934 <gpio_nrfx_config+0xe8>
			return res;
		}
	}

	return 0;
    29c4:	2300      	movs	r3, #0
}
    29c6:	4618      	mov	r0, r3
    29c8:	b003      	add	sp, #12
    29ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ce:	bf00      	nop
    29d0:	50842500 	.word	0x50842500

000029d4 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(struct device *port)
{
    29d4:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    29d6:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    29d8:	6803      	ldr	r3, [r0, #0]
    29da:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    29dc:	68f3      	ldr	r3, [r6, #12]
    29de:	68b2      	ldr	r2, [r6, #8]
    29e0:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    29e2:	6973      	ldr	r3, [r6, #20]
    29e4:	69b1      	ldr	r1, [r6, #24]
    29e6:	430b      	orrs	r3, r1
    29e8:	ea22 0203 	bic.w	r2, r2, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    29ec:	2101      	movs	r1, #1
	u32_t pin = 0U;
    29ee:	2000      	movs	r0, #0
	u32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    29f0:	e013      	b.n	2a1a <cfg_level_pins+0x46>
	return NRF_GPIO_PIN_SENSE_LOW;
    29f2:	f04f 0c03 	mov.w	ip, #3
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    29f6:	4c13      	ldr	r4, [pc, #76]	; (2a44 <cfg_level_pins+0x70>)
    29f8:	3380      	adds	r3, #128	; 0x80
    29fa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    29fe:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    2a02:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a06:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    2a0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    2a0e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
		if (level_pins & bit) {
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			u32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    2a12:	ea22 0201 	bic.w	r2, r2, r1
		}
		++pin;
    2a16:	3001      	adds	r0, #1
		bit <<= 1;
    2a18:	0049      	lsls	r1, r1, #1
	while (level_pins) {
    2a1a:	b182      	cbz	r2, 2a3e <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    2a1c:	4211      	tst	r1, r2
    2a1e:	d0fa      	beq.n	2a16 <cfg_level_pins+0x42>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a20:	793c      	ldrb	r4, [r7, #4]
    2a22:	f000 031f 	and.w	r3, r0, #31
    2a26:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2a2a:	6934      	ldr	r4, [r6, #16]
    2a2c:	69f5      	ldr	r5, [r6, #28]
    2a2e:	406c      	eors	r4, r5
    2a30:	40c4      	lsrs	r4, r0
    2a32:	f014 0f01 	tst.w	r4, #1
    2a36:	d0dc      	beq.n	29f2 <cfg_level_pins+0x1e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    2a38:	f04f 0c02 	mov.w	ip, #2
    2a3c:	e7db      	b.n	29f6 <cfg_level_pins+0x22>
	}
}
    2a3e:	bcf0      	pop	{r4, r5, r6, r7}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop
    2a44:	50842500 	.word	0x50842500

00002a48 <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static u32_t check_level_trigger_pins(struct device *port)
{
    2a48:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    2a4a:	6881      	ldr	r1, [r0, #8]
	return port->config->config_info;
    2a4c:	6803      	ldr	r3, [r0, #0]
    2a4e:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2a50:	68ca      	ldr	r2, [r1, #12]
    2a52:	688b      	ldr	r3, [r1, #8]
    2a54:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    2a56:	694b      	ldr	r3, [r1, #20]
    2a58:	6988      	ldr	r0, [r1, #24]
    2a5a:	4303      	orrs	r3, r0
    2a5c:	ea22 0203 	bic.w	r2, r2, r3
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t level_pins = get_level_pins(port);
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2a60:	683b      	ldr	r3, [r7, #0]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2a62:	6918      	ldr	r0, [r3, #16]

	/* Extract which pins after inversion, have logic level same as
	 * interrupt trigger level.
	 */
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2a64:	69cb      	ldr	r3, [r1, #28]
    2a66:	4058      	eors	r0, r3
    2a68:	690b      	ldr	r3, [r1, #16]
    2a6a:	4058      	eors	r0, r3

	/* Discard pins that aren't configured for level. */
	u32_t out = pin_states & level_pins;
    2a6c:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    2a70:	2101      	movs	r1, #1
	u32_t pin = 0U;
    2a72:	2400      	movs	r4, #0

	while (level_pins) {
    2a74:	e001      	b.n	2a7a <check_level_trigger_pins+0x32>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    2a76:	3401      	adds	r4, #1
		bit <<= 1;
    2a78:	0049      	lsls	r1, r1, #1
	while (level_pins) {
    2a7a:	b1aa      	cbz	r2, 2aa8 <check_level_trigger_pins+0x60>
		if (level_pins & bit) {
    2a7c:	420a      	tst	r2, r1
    2a7e:	d0fa      	beq.n	2a76 <check_level_trigger_pins+0x2e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a80:	793d      	ldrb	r5, [r7, #4]
    2a82:	f004 031f 	and.w	r3, r4, #31
    2a86:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    2a8a:	4d08      	ldr	r5, [pc, #32]	; (2aac <check_level_trigger_pins+0x64>)
    2a8c:	3380      	adds	r3, #128	; 0x80
    2a8e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    2a92:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    2a96:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a9a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    2a9e:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
			level_pins &= ~bit;
    2aa2:	ea22 0201 	bic.w	r2, r2, r1
    2aa6:	e7e6      	b.n	2a76 <check_level_trigger_pins+0x2e>
	}

	return out;
}
    2aa8:	bcf0      	pop	{r4, r5, r6, r7}
    2aaa:	4770      	bx	lr
    2aac:	50842500 	.word	0x50842500

00002ab0 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	b083      	sub	sp, #12
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2ab4:	2300      	movs	r3, #0
    2ab6:	9301      	str	r3, [sp, #4]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    2ab8:	4b2e      	ldr	r3, [pc, #184]	; (2b74 <gpiote_event_handler+0xc4>)
    2aba:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT);

	if (port_event) {
    2abc:	2c01      	cmp	r4, #1
    2abe:	d001      	beq.n	2ac4 <gpiote_event_handler+0x14>
{
    2ac0:	2200      	movs	r2, #0
    2ac2:	e008      	b.n	2ad6 <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    2ac4:	482c      	ldr	r0, [pc, #176]	; (2b78 <gpiote_event_handler+0xc8>)
    2ac6:	f7ff ffbf 	bl	2a48 <check_level_trigger_pins>
		fired_triggers[0] =
    2aca:	9001      	str	r0, [sp, #4]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    2acc:	4b29      	ldr	r3, [pc, #164]	; (2b74 <gpiote_event_handler+0xc4>)
    2ace:	2200      	movs	r2, #0
    2ad0:	601a      	str	r2, [r3, #0]
    2ad2:	e7f5      	b.n	2ac0 <gpiote_event_handler+0x10>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2ad4:	3201      	adds	r2, #1
    2ad6:	2a07      	cmp	r2, #7
    2ad8:	d821      	bhi.n	2b1e <gpiote_event_handler+0x6e>
		nrf_gpiote_events_t evt =
    2ada:	0093      	lsls	r3, r2, #2
    2adc:	f503 7380 	add.w	r3, r3, #256	; 0x100
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    2ae0:	2101      	movs	r1, #1
    2ae2:	4091      	lsls	r1, r2
    return (NRF_GPIOTE->INTENSET & mask);
    2ae4:	4825      	ldr	r0, [pc, #148]	; (2b7c <gpiote_event_handler+0xcc>)
    2ae6:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    2aea:	4201      	tst	r1, r0
    2aec:	d0f2      	beq.n	2ad4 <gpiote_event_handler+0x24>
    return ((uint32_t)NRF_GPIOTE + event);
    2aee:	b29b      	uxth	r3, r3
    2af0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2af4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    2af8:	6819      	ldr	r1, [r3, #0]
    2afa:	2901      	cmp	r1, #1
    2afc:	d1ea      	bne.n	2ad4 <gpiote_event_handler+0x24>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2afe:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    2b02:	481e      	ldr	r0, [pc, #120]	; (2b7c <gpiote_event_handler+0xcc>)
    2b04:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    2b08:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_is_set(evt)) {
			u32_t abs_pin = nrf_gpiote_event_pin_get(i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2b0c:	2101      	movs	r1, #1
    2b0e:	fa01 f000 	lsl.w	r0, r1, r0
    2b12:	9901      	ldr	r1, [sp, #4]
    2b14:	4301      	orrs	r1, r0
    2b16:	9101      	str	r1, [sp, #4]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    2b18:	2100      	movs	r1, #0
    2b1a:	6019      	str	r1, [r3, #0]
    2b1c:	e7da      	b.n	2ad4 <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    2b1e:	9e01      	ldr	r6, [sp, #4]
    2b20:	b91e      	cbnz	r6, 2b2a <gpiote_event_handler+0x7a>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    2b22:	2c01      	cmp	r4, #1
    2b24:	d022      	beq.n	2b6c <gpiote_event_handler+0xbc>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    2b26:	b003      	add	sp, #12
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return port->driver_data;
    2b2a:	4b13      	ldr	r3, [pc, #76]	; (2b78 <gpiote_event_handler+0xc8>)
    2b2c:	689f      	ldr	r7, [r3, #8]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2b2e:	6839      	ldr	r1, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b30:	b111      	cbz	r1, 2b38 <gpiote_event_handler+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2b32:	b121      	cbz	r1, 2b3e <gpiote_event_handler+0x8e>
	return node->next;
    2b34:	680d      	ldr	r5, [r1, #0]
    2b36:	e007      	b.n	2b48 <gpiote_event_handler+0x98>
    2b38:	2500      	movs	r5, #0
    2b3a:	4629      	mov	r1, r5
    2b3c:	e004      	b.n	2b48 <gpiote_event_handler+0x98>
    2b3e:	2500      	movs	r5, #0
    2b40:	e002      	b.n	2b48 <gpiote_event_handler+0x98>
    2b42:	462b      	mov	r3, r5
    2b44:	4629      	mov	r1, r5
    2b46:	461d      	mov	r5, r3
    2b48:	2900      	cmp	r1, #0
    2b4a:	d0ea      	beq.n	2b22 <gpiote_event_handler+0x72>
		if ((cb->pin_mask & pins) & data->int_en) {
    2b4c:	688b      	ldr	r3, [r1, #8]
    2b4e:	4033      	ands	r3, r6
    2b50:	68fa      	ldr	r2, [r7, #12]
    2b52:	4213      	tst	r3, r2
    2b54:	d003      	beq.n	2b5e <gpiote_event_handler+0xae>
			cb->handler(port, cb, pins);
    2b56:	684b      	ldr	r3, [r1, #4]
    2b58:	4632      	mov	r2, r6
    2b5a:	4807      	ldr	r0, [pc, #28]	; (2b78 <gpiote_event_handler+0xc8>)
    2b5c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b5e:	2d00      	cmp	r5, #0
    2b60:	d0ef      	beq.n	2b42 <gpiote_event_handler+0x92>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2b62:	b10d      	cbz	r5, 2b68 <gpiote_event_handler+0xb8>
	return node->next;
    2b64:	682b      	ldr	r3, [r5, #0]
    2b66:	e7ed      	b.n	2b44 <gpiote_event_handler+0x94>
    2b68:	2300      	movs	r3, #0
    2b6a:	e7eb      	b.n	2b44 <gpiote_event_handler+0x94>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    2b6c:	4802      	ldr	r0, [pc, #8]	; (2b78 <gpiote_event_handler+0xc8>)
    2b6e:	f7ff ff31 	bl	29d4 <cfg_level_pins>
}
    2b72:	e7d8      	b.n	2b26 <gpiote_event_handler+0x76>
    2b74:	5000d17c 	.word	0x5000d17c
    2b78:	20005c08 	.word	0x20005c08
    2b7c:	5000d000 	.word	0x5000d000

00002b80 <gpio_nrfx_init>:

static int gpio_nrfx_init(struct device *port)
{
    2b80:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2b82:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <gpio_nrfx_init+0x30>)
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	b10b      	cbz	r3, 2b8c <gpio_nrfx_init+0xc>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2b88:	2000      	movs	r0, #0
    2b8a:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    2b8c:	4b08      	ldr	r3, [pc, #32]	; (2bb0 <gpio_nrfx_init+0x30>)
    2b8e:	2201      	movs	r2, #1
    2b90:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    2b92:	2200      	movs	r2, #0
    2b94:	2105      	movs	r1, #5
    2b96:	200d      	movs	r0, #13
    2b98:	f7ff fab4 	bl	2104 <z_arm_irq_priority_set>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    2b9c:	200d      	movs	r0, #13
    2b9e:	f7ff faa1 	bl	20e4 <z_arch_irq_enable>
    NRF_GPIOTE->INTENSET = mask;
    2ba2:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <gpio_nrfx_init+0x34>)
    2ba4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2ba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2bac:	e7ec      	b.n	2b88 <gpio_nrfx_init+0x8>
    2bae:	bf00      	nop
    2bb0:	20002b30 	.word	0x20002b30
    2bb4:	5000d000 	.word	0x5000d000

00002bb8 <nvmc_wait_ready>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2bb8:	4b03      	ldr	r3, [pc, #12]	; (2bc8 <nvmc_wait_ready+0x10>)
    2bba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
	       is_uicr_addr_valid(addr, len);
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    2bbe:	f013 0f01 	tst.w	r3, #1
    2bc2:	d0f9      	beq.n	2bb8 <nvmc_wait_ready>
	}
}
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	50039000 	.word	0x50039000

00002bcc <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
    2bcc:	4b01      	ldr	r3, [pc, #4]	; (2bd4 <flash_nrf_write_protection+0x8>)
    2bce:	7019      	strb	r1, [r3, #0]

	return 0;
}
    2bd0:	2000      	movs	r0, #0
    2bd2:	4770      	bx	lr
    2bd4:	20002b31 	.word	0x20002b31

00002bd8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2bd8:	4b02      	ldr	r3, [pc, #8]	; (2be4 <flash_nrf_pages_layout+0xc>)
    2bda:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2bdc:	2301      	movs	r3, #1
    2bde:	6013      	str	r3, [r2, #0]
}
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop
    2be4:	200029ec 	.word	0x200029ec

00002be8 <nrf_flash_init>:
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
    2be8:	b510      	push	{r4, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2bea:	f004 ff21 	bl	7a30 <nrfx_nvmc_flash_page_count_get>
    2bee:	4c05      	ldr	r4, [pc, #20]	; (2c04 <nrf_flash_init+0x1c>)
    2bf0:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2bf2:	f004 ff19 	bl	7a28 <nrfx_nvmc_flash_page_size_get>
    2bf6:	6060      	str	r0, [r4, #4]
#endif
	write_protect = true;
    2bf8:	4b03      	ldr	r3, [pc, #12]	; (2c08 <nrf_flash_init+0x20>)
    2bfa:	2201      	movs	r2, #1
    2bfc:	701a      	strb	r2, [r3, #0]

	return 0;
}
    2bfe:	2000      	movs	r0, #0
    2c00:	bd10      	pop	{r4, pc}
    2c02:	bf00      	nop
    2c04:	200029ec 	.word	0x200029ec
    2c08:	20002b31 	.word	0x20002b31

00002c0c <flash_nrf_erase>:
{
    2c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c0e:	460c      	mov	r4, r1
    2c10:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2c12:	f004 ff09 	bl	7a28 <nrfx_nvmc_flash_page_size_get>
	u32_t n_pages = size / pg_size;
    2c16:	fbb5 f7f0 	udiv	r7, r5, r0
	if (write_protect) {
    2c1a:	4b1a      	ldr	r3, [pc, #104]	; (2c84 <flash_nrf_erase+0x78>)
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	b9db      	cbnz	r3, 2c58 <flash_nrf_erase+0x4c>
    2c20:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    2c22:	f004 fefd 	bl	7a20 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    2c26:	42a0      	cmp	r0, r4
    2c28:	d919      	bls.n	2c5e <flash_nrf_erase+0x52>
    2c2a:	2c00      	cmp	r4, #0
    2c2c:	db1a      	blt.n	2c64 <flash_nrf_erase+0x58>
	    addr < DT_FLASH_BASE_ADDRESS ||
    2c2e:	4285      	cmp	r5, r0
    2c30:	d81b      	bhi.n	2c6a <flash_nrf_erase+0x5e>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    2c32:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    2c34:	4298      	cmp	r0, r3
    2c36:	d31b      	bcc.n	2c70 <flash_nrf_erase+0x64>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2c38:	fbb4 f3f6 	udiv	r3, r4, r6
    2c3c:	fb06 4313 	mls	r3, r6, r3, r4
    2c40:	b9cb      	cbnz	r3, 2c76 <flash_nrf_erase+0x6a>
    2c42:	fb06 5617 	mls	r6, r6, r7, r5
    2c46:	b9ce      	cbnz	r6, 2c7c <flash_nrf_erase+0x70>
		if (!n_pages) {
    2c48:	b90f      	cbnz	r7, 2c4e <flash_nrf_erase+0x42>
			return 0;
    2c4a:	2000      	movs	r0, #0
}
    2c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = erase(addr, size);
    2c4e:	4629      	mov	r1, r5
    2c50:	4620      	mov	r0, r4
    2c52:	f002 ffa6 	bl	5ba2 <erase>
	return ret;
    2c56:	e7f9      	b.n	2c4c <flash_nrf_erase+0x40>
		return -EACCES;
    2c58:	f06f 000c 	mvn.w	r0, #12
    2c5c:	e7f6      	b.n	2c4c <flash_nrf_erase+0x40>
		return -EINVAL;
    2c5e:	f06f 0015 	mvn.w	r0, #21
    2c62:	e7f3      	b.n	2c4c <flash_nrf_erase+0x40>
    2c64:	f06f 0015 	mvn.w	r0, #21
    2c68:	e7f0      	b.n	2c4c <flash_nrf_erase+0x40>
    2c6a:	f06f 0015 	mvn.w	r0, #21
    2c6e:	e7ed      	b.n	2c4c <flash_nrf_erase+0x40>
    2c70:	f06f 0015 	mvn.w	r0, #21
    2c74:	e7ea      	b.n	2c4c <flash_nrf_erase+0x40>
			return -EINVAL;
    2c76:	f06f 0015 	mvn.w	r0, #21
    2c7a:	e7e7      	b.n	2c4c <flash_nrf_erase+0x40>
    2c7c:	f06f 0015 	mvn.w	r0, #21
    2c80:	e7e4      	b.n	2c4c <flash_nrf_erase+0x40>
    2c82:	bf00      	nop
    2c84:	20002b31 	.word	0x20002b31

00002c88 <flash_nrf_write>:
	if (write_protect) {
    2c88:	4815      	ldr	r0, [pc, #84]	; (2ce0 <flash_nrf_write+0x58>)
    2c8a:	7800      	ldrb	r0, [r0, #0]
    2c8c:	bb08      	cbnz	r0, 2cd2 <flash_nrf_write+0x4a>
{
    2c8e:	b570      	push	{r4, r5, r6, lr}
    2c90:	461d      	mov	r5, r3
    2c92:	4616      	mov	r6, r2
    2c94:	460c      	mov	r4, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    2c96:	f004 fec3 	bl	7a20 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    2c9a:	42a0      	cmp	r0, r4
    2c9c:	d908      	bls.n	2cb0 <flash_nrf_write+0x28>
    2c9e:	2c00      	cmp	r4, #0
    2ca0:	db0b      	blt.n	2cba <flash_nrf_write+0x32>
	    addr < DT_FLASH_BASE_ADDRESS ||
    2ca2:	4285      	cmp	r5, r0
    2ca4:	d80b      	bhi.n	2cbe <flash_nrf_write+0x36>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    2ca6:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    2ca8:	4298      	cmp	r0, r3
    2caa:	d30a      	bcc.n	2cc2 <flash_nrf_write+0x3a>
	return is_regular_addr_valid(addr, len) ||
    2cac:	2301      	movs	r3, #1
    2cae:	e000      	b.n	2cb2 <flash_nrf_write+0x2a>
    2cb0:	2300      	movs	r3, #0
	if (!is_addr_valid(addr, len)) {
    2cb2:	b18b      	cbz	r3, 2cd8 <flash_nrf_write+0x50>
	if (!len) {
    2cb4:	b93d      	cbnz	r5, 2cc6 <flash_nrf_write+0x3e>
		return 0;
    2cb6:	2000      	movs	r0, #0
}
    2cb8:	bd70      	pop	{r4, r5, r6, pc}
	return is_regular_addr_valid(addr, len) ||
    2cba:	2300      	movs	r3, #0
    2cbc:	e7f9      	b.n	2cb2 <flash_nrf_write+0x2a>
    2cbe:	2300      	movs	r3, #0
    2cc0:	e7f7      	b.n	2cb2 <flash_nrf_write+0x2a>
    2cc2:	2300      	movs	r3, #0
    2cc4:	e7f5      	b.n	2cb2 <flash_nrf_write+0x2a>
		ret = write(addr, data, len);
    2cc6:	462a      	mov	r2, r5
    2cc8:	4631      	mov	r1, r6
    2cca:	4620      	mov	r0, r4
    2ccc:	f002 ffa4 	bl	5c18 <write>
	return ret;
    2cd0:	e7f2      	b.n	2cb8 <flash_nrf_write+0x30>
		return -EACCES;
    2cd2:	f06f 000c 	mvn.w	r0, #12
}
    2cd6:	4770      	bx	lr
		return -EINVAL;
    2cd8:	f06f 0015 	mvn.w	r0, #21
    2cdc:	e7ec      	b.n	2cb8 <flash_nrf_write+0x30>
    2cde:	bf00      	nop
    2ce0:	20002b31 	.word	0x20002b31

00002ce4 <baudrate_set>:
	return dev->driver_data;
}

static inline const struct uarte_nrfx_config *get_dev_config(struct device *dev)
{
	return dev->config->config_info;
    2ce4:	6803      	ldr	r3, [r0, #0]
    2ce6:	689b      	ldr	r3, [r3, #8]

static inline NRF_UARTE_Type *get_uarte_instance(struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    2ce8:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(struct device *dev, u32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2cea:	f647 2312 	movw	r3, #31250	; 0x7a12
    2cee:	4299      	cmp	r1, r3
    2cf0:	d061      	beq.n	2db6 <baudrate_set+0xd2>
    2cf2:	d910      	bls.n	2d16 <baudrate_set+0x32>
    2cf4:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2cf8:	d066      	beq.n	2dc8 <baudrate_set+0xe4>
    2cfa:	d937      	bls.n	2d6c <baudrate_set+0x88>
    2cfc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2d00:	d068      	beq.n	2dd4 <baudrate_set+0xf0>
    2d02:	d846      	bhi.n	2d92 <baudrate_set+0xae>
    2d04:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2d08:	d061      	beq.n	2dce <baudrate_set+0xea>
    2d0a:	4b38      	ldr	r3, [pc, #224]	; (2dec <baudrate_set+0x108>)
    2d0c:	4299      	cmp	r1, r3
    2d0e:	d16a      	bne.n	2de6 <baudrate_set+0x102>
		break;
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
		break;
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
		break;
    2d14:	e015      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d16:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2d1a:	d046      	beq.n	2daa <baudrate_set+0xc6>
    2d1c:	d815      	bhi.n	2d4a <baudrate_set+0x66>
    2d1e:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2d22:	d05d      	beq.n	2de0 <baudrate_set+0xfc>
    2d24:	d908      	bls.n	2d38 <baudrate_set+0x54>
    2d26:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2d2a:	d03b      	beq.n	2da4 <baudrate_set+0xc0>
    2d2c:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2d30:	d159      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d32:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
		break;
    2d36:	e004      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d38:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2d3c:	d153      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = 0x00014000;
    2d3e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2d42:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2d46:	2000      	movs	r0, #0
    2d48:	4770      	bx	lr
	switch (baudrate) {
    2d4a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2d4e:	d02e      	beq.n	2dae <baudrate_set+0xca>
    2d50:	d907      	bls.n	2d62 <baudrate_set+0x7e>
    2d52:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2d56:	d02c      	beq.n	2db2 <baudrate_set+0xce>
    2d58:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2d5c:	d143      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d5e:	4b24      	ldr	r3, [pc, #144]	; (2df0 <baudrate_set+0x10c>)
		break;
    2d60:	e7ef      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d62:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2d66:	d13e      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d68:	4b22      	ldr	r3, [pc, #136]	; (2df4 <baudrate_set+0x110>)
		break;
    2d6a:	e7ea      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d6c:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2d70:	4299      	cmp	r1, r3
    2d72:	d023      	beq.n	2dbc <baudrate_set+0xd8>
    2d74:	d907      	bls.n	2d86 <baudrate_set+0xa2>
    2d76:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2d7a:	d022      	beq.n	2dc2 <baudrate_set+0xde>
    2d7c:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2d80:	d131      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d82:	4b1d      	ldr	r3, [pc, #116]	; (2df8 <baudrate_set+0x114>)
		break;
    2d84:	e7dd      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d86:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2d8a:	d12c      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2d8c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
		break;
    2d90:	e7d7      	b.n	2d42 <baudrate_set+0x5e>
	switch (baudrate) {
    2d92:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2d96:	d020      	beq.n	2dda <baudrate_set+0xf6>
    2d98:	4b18      	ldr	r3, [pc, #96]	; (2dfc <baudrate_set+0x118>)
    2d9a:	4299      	cmp	r1, r3
    2d9c:	d123      	bne.n	2de6 <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		break;
    2da2:	e7ce      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2da4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
		break;
    2da8:	e7cb      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2daa:	4b15      	ldr	r3, [pc, #84]	; (2e00 <baudrate_set+0x11c>)
		break;
    2dac:	e7c9      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2dae:	4b15      	ldr	r3, [pc, #84]	; (2e04 <baudrate_set+0x120>)
		break;
    2db0:	e7c7      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2db2:	4b15      	ldr	r3, [pc, #84]	; (2e08 <baudrate_set+0x124>)
		break;
    2db4:	e7c5      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2db6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
		break;
    2dba:	e7c2      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2dbc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
		break;
    2dc0:	e7bf      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2dc2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
		break;
    2dc6:	e7bc      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2dc8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
		break;
    2dcc:	e7b9      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2dce:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
		break;
    2dd2:	e7b6      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2dd4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
		break;
    2dd8:	e7b3      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2dda:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
		break;
    2dde:	e7b0      	b.n	2d42 <baudrate_set+0x5e>
		nrf_baudrate = 0x00027000;
    2de0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2de4:	e7ad      	b.n	2d42 <baudrate_set+0x5e>
		return -EINVAL;
    2de6:	f06f 0015 	mvn.w	r0, #21
}
    2dea:	4770      	bx	lr
    2dec:	0003d090 	.word	0x0003d090
    2df0:	0075c000 	.word	0x0075c000
    2df4:	00275000 	.word	0x00275000
    2df8:	013a9000 	.word	0x013a9000
    2dfc:	000f4240 	.word	0x000f4240
    2e00:	0013b000 	.word	0x0013b000
    2e04:	003af000 	.word	0x003af000
    2e08:	004ea000 	.word	0x004ea000

00002e0c <uarte_instance_init>:
};

static int uarte_instance_init(struct device *dev,
			       const struct uarte_init_config *config,
			       u8_t interrupts_active)
{
    2e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e0e:	4616      	mov	r6, r2
	return dev->config->config_info;
    2e10:	6803      	ldr	r3, [r0, #0]
    2e12:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    2e14:	681c      	ldr	r4, [r3, #0]
	return dev->driver_data;
    2e16:	6885      	ldr	r5, [r0, #8]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    2e18:	680b      	ldr	r3, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e1a:	2201      	movs	r2, #1
    2e1c:	409a      	lsls	r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2e1e:	4b27      	ldr	r3, [pc, #156]	; (2ebc <uarte_instance_init+0xb0>)
    2e20:	609a      	str	r2, [r3, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    2e22:	680a      	ldr	r2, [r1, #0]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2e24:	3280      	adds	r2, #128	; 0x80
    2e26:	2703      	movs	r7, #3
    2e28:	f843 7022 	str.w	r7, [r3, r2, lsl #2]

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
    2e2c:	684a      	ldr	r2, [r1, #4]
    2e2e:	3280      	adds	r2, #128	; 0x80
    2e30:	2700      	movs	r7, #0
    2e32:	f843 7022 	str.w	r7, [r3, r2, lsl #2]

	nrf_uarte_txrx_pins_set(uarte,
    2e36:	680a      	ldr	r2, [r1, #0]
    2e38:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.TXD = pseltxd;
    2e3a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2e3e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    2e42:	688b      	ldr	r3, [r1, #8]
    2e44:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e48:	d018      	beq.n	2e7c <uarte_instance_init+0x70>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2e4a:	68cb      	ldr	r3, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    2e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e50:	d014      	beq.n	2e7c <uarte_instance_init+0x70>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e52:	2201      	movs	r2, #1
    2e54:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    2e58:	4a18      	ldr	r2, [pc, #96]	; (2ebc <uarte_instance_init+0xb0>)
    2e5a:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    2e5c:	68cb      	ldr	r3, [r1, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2e5e:	3380      	adds	r3, #128	; 0x80
    2e60:	2703      	movs	r7, #3
    2e62:	f842 7023 	str.w	r7, [r2, r3, lsl #2]

		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
    2e66:	688b      	ldr	r3, [r1, #8]
    2e68:	3380      	adds	r3, #128	; 0x80
    2e6a:	2700      	movs	r7, #0
    2e6c:	f842 7023 	str.w	r7, [r2, r3, lsl #2]

		nrf_uarte_hwfc_pins_set(uarte,
    2e70:	68ca      	ldr	r2, [r1, #12]
    2e72:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.RTS = pselrts;
    2e74:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2e78:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2e7c:	6881      	ldr	r1, [r0, #8]
    2e7e:	f002 ff40 	bl	5d02 <uarte_nrfx_configure>
	if (err) {
    2e82:	4603      	mov	r3, r0
    2e84:	b9c0      	cbnz	r0, 2eb8 <uarte_instance_init+0xac>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e86:	2208      	movs	r2, #8
    2e88:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e8c:	2200      	movs	r2, #0
    2e8e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2e92:	f105 020c 	add.w	r2, r5, #12

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e96:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2e9a:	2201      	movs	r2, #1
    2e9c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ea0:	6022      	str	r2, [r4, #0]
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

#ifdef UARTE_INTERRUPT_DRIVEN
	if (interrupts_active) {
    2ea2:	b14e      	cbz	r6, 2eb8 <uarte_instance_init+0xac>
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    2ea4:	68aa      	ldr	r2, [r5, #8]
    2ea6:	6892      	ldr	r2, [r2, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2ea8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2eac:	2200      	movs	r2, #0
    2eae:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2eb2:	2201      	movs	r2, #1
    2eb4:	60a2      	str	r2, [r4, #8]
    2eb6:	60e2      	str	r2, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    2eb8:	4618      	mov	r0, r3
    2eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ebc:	50842500 	.word	0x50842500

00002ec0 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    2ec0:	b530      	push	{r4, r5, lr}
    2ec2:	b085      	sub	sp, #20
    2ec4:	4605      	mov	r5, r0
    2ec6:	4b0a      	ldr	r3, [pc, #40]	; (2ef0 <uarte_0_init+0x30>)
    2ec8:	466c      	mov	r4, sp
    2eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2ed0:	2200      	movs	r2, #0
    2ed2:	2101      	movs	r1, #1
    2ed4:	2008      	movs	r0, #8
    2ed6:	f7ff f915 	bl	2104 <z_arm_irq_priority_set>
    2eda:	2008      	movs	r0, #8
    2edc:	f7ff f902 	bl	20e4 <z_arch_irq_enable>
    2ee0:	2201      	movs	r2, #1
    2ee2:	4621      	mov	r1, r4
    2ee4:	4628      	mov	r0, r5
    2ee6:	f7ff ff91 	bl	2e0c <uarte_instance_init>
    2eea:	b005      	add	sp, #20
    2eec:	bd30      	pop	{r4, r5, pc}
    2eee:	bf00      	nop
    2ef0:	00007f88 	.word	0x00007f88

00002ef4 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    2ef4:	6802      	ldr	r2, [r0, #0]
    2ef6:	4b12      	ldr	r3, [pc, #72]	; (2f40 <verify_header+0x4c>)
    2ef8:	429a      	cmp	r2, r3
    2efa:	d001      	beq.n	2f00 <verify_header+0xc>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    2efc:	2001      	movs	r0, #1
    2efe:	4770      	bx	lr
    }

    if( hdr->magic2 != MAGIC2 )
    2f00:	69c2      	ldr	r2, [r0, #28]
    2f02:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    2f06:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    2f0a:	429a      	cmp	r2, r3
    2f0c:	d001      	beq.n	2f12 <verify_header+0x1e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    2f0e:	2001      	movs	r0, #1
    2f10:	4770      	bx	lr
    }

    if( hdr->alloc > 1 )
    2f12:	6883      	ldr	r3, [r0, #8]
    2f14:	2b01      	cmp	r3, #1
    2f16:	d901      	bls.n	2f1c <verify_header+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    2f18:	2001      	movs	r0, #1
    2f1a:	4770      	bx	lr
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    2f1c:	68c3      	ldr	r3, [r0, #12]
    2f1e:	b113      	cbz	r3, 2f26 <verify_header+0x32>
    2f20:	6902      	ldr	r2, [r0, #16]
    2f22:	4293      	cmp	r3, r2
    2f24:	d006      	beq.n	2f34 <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    2f26:	6943      	ldr	r3, [r0, #20]
    2f28:	b133      	cbz	r3, 2f38 <verify_header+0x44>
    2f2a:	6982      	ldr	r2, [r0, #24]
    2f2c:	4293      	cmp	r3, r2
    2f2e:	d005      	beq.n	2f3c <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    2f30:	2000      	movs	r0, #0
    2f32:	4770      	bx	lr
        return( 1 );
    2f34:	2001      	movs	r0, #1
    2f36:	4770      	bx	lr
    return( 0 );
    2f38:	2000      	movs	r0, #0
    2f3a:	4770      	bx	lr
        return( 1 );
    2f3c:	2001      	movs	r0, #1
}
    2f3e:	4770      	bx	lr
    2f40:	ff00aa55 	.word	0xff00aa55

00002f44 <verify_chain>:

static int verify_chain( void )
{
    2f44:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    2f46:	4b10      	ldr	r3, [pc, #64]	; (2f88 <verify_chain+0x44>)
    2f48:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    2f4a:	b1a5      	cbz	r5, 2f76 <verify_chain+0x32>
    2f4c:	4628      	mov	r0, r5
    2f4e:	f7ff ffd1 	bl	2ef4 <verify_header>
    2f52:	4606      	mov	r6, r0
    2f54:	b988      	cbnz	r0, 2f7a <verify_chain+0x36>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    2f56:	68eb      	ldr	r3, [r5, #12]
    2f58:	b10b      	cbz	r3, 2f5e <verify_chain+0x1a>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    2f5a:	2601      	movs	r6, #1
    2f5c:	e00e      	b.n	2f7c <verify_chain+0x38>
    }

    cur = heap.first->next;
    2f5e:	692c      	ldr	r4, [r5, #16]

    while( cur != NULL )
    2f60:	b164      	cbz	r4, 2f7c <verify_chain+0x38>
    {
        if( verify_header( cur ) != 0 )
    2f62:	4620      	mov	r0, r4
    2f64:	f7ff ffc6 	bl	2ef4 <verify_header>
    2f68:	b950      	cbnz	r0, 2f80 <verify_chain+0x3c>
                                      "failed\n" );
#endif
            return( 1 );
        }

        if( cur->prev != prv )
    2f6a:	68e3      	ldr	r3, [r4, #12]
    2f6c:	42ab      	cmp	r3, r5
    2f6e:	d109      	bne.n	2f84 <verify_chain+0x40>
                                      "cur->prev != prv\n" );
#endif
            return( 1 );
        }

        prv = cur;
    2f70:	4625      	mov	r5, r4
        cur = cur->next;
    2f72:	6924      	ldr	r4, [r4, #16]
    2f74:	e7f4      	b.n	2f60 <verify_chain+0x1c>
        return( 1 );
    2f76:	2601      	movs	r6, #1
    2f78:	e000      	b.n	2f7c <verify_chain+0x38>
    2f7a:	2601      	movs	r6, #1
    }

    return( 0 );
}
    2f7c:	4630      	mov	r0, r6
    2f7e:	bd70      	pop	{r4, r5, r6, pc}
            return( 1 );
    2f80:	2601      	movs	r6, #1
    2f82:	e7fb      	b.n	2f7c <verify_chain+0x38>
            return( 1 );
    2f84:	2601      	movs	r6, #1
    2f86:	e7f9      	b.n	2f7c <verify_chain+0x38>
    2f88:	20002a14 	.word	0x20002a14

00002f8c <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    2f8c:	2800      	cmp	r0, #0
    2f8e:	f000 8094 	beq.w	30ba <buffer_alloc_free+0x12e>
{
    2f92:	b538      	push	{r3, r4, r5, lr}
    2f94:	4604      	mov	r4, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    2f96:	4b49      	ldr	r3, [pc, #292]	; (30bc <buffer_alloc_free+0x130>)
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d068      	beq.n	3070 <buffer_alloc_free+0xe4>
    2f9e:	4a47      	ldr	r2, [pc, #284]	; (30bc <buffer_alloc_free+0x130>)
    2fa0:	6892      	ldr	r2, [r2, #8]
    2fa2:	2a00      	cmp	r2, #0
    2fa4:	d064      	beq.n	3070 <buffer_alloc_free+0xe4>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    2fa6:	4283      	cmp	r3, r0
    2fa8:	d963      	bls.n	3072 <buffer_alloc_free+0xe6>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    2faa:	4b45      	ldr	r3, [pc, #276]	; (30c0 <buffer_alloc_free+0x134>)
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	2001      	movs	r0, #1
    2fb0:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    2fb2:	f1a4 0520 	sub.w	r5, r4, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    2fb6:	4628      	mov	r0, r5
    2fb8:	f7ff ff9c 	bl	2ef4 <verify_header>
    2fbc:	b118      	cbz	r0, 2fc6 <buffer_alloc_free+0x3a>
        mbedtls_exit( 1 );
    2fbe:	4b40      	ldr	r3, [pc, #256]	; (30c0 <buffer_alloc_free+0x134>)
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	2001      	movs	r0, #1
    2fc4:	4798      	blx	r3

    if( hdr->alloc != 1 )
    2fc6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2fca:	2b01      	cmp	r3, #1
    2fcc:	d003      	beq.n	2fd6 <buffer_alloc_free+0x4a>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    2fce:	4b3c      	ldr	r3, [pc, #240]	; (30c0 <buffer_alloc_free+0x134>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	2001      	movs	r0, #1
    2fd4:	4798      	blx	r3
    }

    hdr->alloc = 0;
    2fd6:	2300      	movs	r3, #0
    2fd8:	f844 3c18 	str.w	r3, [r4, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    2fdc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2fe0:	b1cb      	cbz	r3, 3016 <buffer_alloc_free+0x8a>
    2fe2:	689a      	ldr	r2, [r3, #8]
    2fe4:	2a00      	cmp	r2, #0
    2fe6:	d14a      	bne.n	307e <buffer_alloc_free+0xf2>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    2fe8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    2fec:	6859      	ldr	r1, [r3, #4]
    2fee:	440a      	add	r2, r1
    2ff0:	3220      	adds	r2, #32
    2ff2:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    2ff4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2ff8:	f854 2c10 	ldr.w	r2, [r4, #-16]
    2ffc:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    2ffe:	f854 4c14 	ldr.w	r4, [r4, #-20]

        if( hdr->next != NULL )
    3002:	6923      	ldr	r3, [r4, #16]
    3004:	b103      	cbz	r3, 3008 <buffer_alloc_free+0x7c>
            hdr->next->prev = hdr;
    3006:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3008:	2220      	movs	r2, #32
    300a:	2100      	movs	r1, #0
    300c:	4628      	mov	r0, r5
    300e:	f002 fced 	bl	59ec <memset>
        old = hdr;
    3012:	462b      	mov	r3, r5
        hdr = hdr->prev;
    3014:	4625      	mov	r5, r4
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3016:	692c      	ldr	r4, [r5, #16]
    3018:	b324      	cbz	r4, 3064 <buffer_alloc_free+0xd8>
    301a:	68a2      	ldr	r2, [r4, #8]
    301c:	bb12      	cbnz	r2, 3064 <buffer_alloc_free+0xd8>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    301e:	6863      	ldr	r3, [r4, #4]
    3020:	686a      	ldr	r2, [r5, #4]
    3022:	4413      	add	r3, r2
    3024:	3320      	adds	r3, #32
    3026:	606b      	str	r3, [r5, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3028:	6923      	ldr	r3, [r4, #16]
    302a:	612b      	str	r3, [r5, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    302c:	696b      	ldr	r3, [r5, #20]
    302e:	b343      	cbz	r3, 3082 <buffer_alloc_free+0xf6>
        {
            if( hdr->prev_free != NULL )
    3030:	2b00      	cmp	r3, #0
    3032:	d02a      	beq.n	308a <buffer_alloc_free+0xfe>
                hdr->prev_free->next_free = hdr->next_free;
    3034:	69aa      	ldr	r2, [r5, #24]
    3036:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    3038:	69ab      	ldr	r3, [r5, #24]
    303a:	b10b      	cbz	r3, 3040 <buffer_alloc_free+0xb4>
                hdr->next_free->prev_free = hdr->prev_free;
    303c:	696a      	ldr	r2, [r5, #20]
    303e:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    3040:	6963      	ldr	r3, [r4, #20]
    3042:	616b      	str	r3, [r5, #20]
        hdr->next_free = old->next_free;
    3044:	69a2      	ldr	r2, [r4, #24]
    3046:	61aa      	str	r2, [r5, #24]

        if( hdr->prev_free != NULL )
    3048:	b31b      	cbz	r3, 3092 <buffer_alloc_free+0x106>
            hdr->prev_free->next_free = hdr;
    304a:	619d      	str	r5, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    304c:	69ab      	ldr	r3, [r5, #24]
    304e:	b103      	cbz	r3, 3052 <buffer_alloc_free+0xc6>
            hdr->next_free->prev_free = hdr;
    3050:	615d      	str	r5, [r3, #20]

        if( hdr->next != NULL )
    3052:	692b      	ldr	r3, [r5, #16]
    3054:	b103      	cbz	r3, 3058 <buffer_alloc_free+0xcc>
            hdr->next->prev = hdr;
    3056:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3058:	2220      	movs	r2, #32
    305a:	2100      	movs	r1, #0
    305c:	4620      	mov	r0, r4
    305e:	f002 fcc5 	bl	59ec <memset>
        old = hdr->next;
    3062:	4623      	mov	r3, r4
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    3064:	b1c3      	cbz	r3, 3098 <buffer_alloc_free+0x10c>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3066:	4b15      	ldr	r3, [pc, #84]	; (30bc <buffer_alloc_free+0x130>)
    3068:	691b      	ldr	r3, [r3, #16]
    306a:	f013 0f02 	tst.w	r3, #2
    306e:	d11b      	bne.n	30a8 <buffer_alloc_free+0x11c>
        mbedtls_exit( 1 );
}
    3070:	bd38      	pop	{r3, r4, r5, pc}
    if( p < heap.buf || p >= heap.buf + heap.len )
    3072:	4a12      	ldr	r2, [pc, #72]	; (30bc <buffer_alloc_free+0x130>)
    3074:	6852      	ldr	r2, [r2, #4]
    3076:	4413      	add	r3, r2
    3078:	4283      	cmp	r3, r0
    307a:	d89a      	bhi.n	2fb2 <buffer_alloc_free+0x26>
    307c:	e795      	b.n	2faa <buffer_alloc_free+0x1e>
    memory_header *hdr, *old = NULL;
    307e:	2300      	movs	r3, #0
    3080:	e7c9      	b.n	3016 <buffer_alloc_free+0x8a>
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3082:	69aa      	ldr	r2, [r5, #24]
    3084:	2a00      	cmp	r2, #0
    3086:	d1d3      	bne.n	3030 <buffer_alloc_free+0xa4>
    3088:	e7da      	b.n	3040 <buffer_alloc_free+0xb4>
                heap.first_free = hdr->next_free;
    308a:	69aa      	ldr	r2, [r5, #24]
    308c:	4b0b      	ldr	r3, [pc, #44]	; (30bc <buffer_alloc_free+0x130>)
    308e:	60da      	str	r2, [r3, #12]
    3090:	e7d2      	b.n	3038 <buffer_alloc_free+0xac>
            heap.first_free = hdr;
    3092:	4b0a      	ldr	r3, [pc, #40]	; (30bc <buffer_alloc_free+0x130>)
    3094:	60dd      	str	r5, [r3, #12]
    3096:	e7d9      	b.n	304c <buffer_alloc_free+0xc0>
        hdr->next_free = heap.first_free;
    3098:	4b08      	ldr	r3, [pc, #32]	; (30bc <buffer_alloc_free+0x130>)
    309a:	68db      	ldr	r3, [r3, #12]
    309c:	61ab      	str	r3, [r5, #24]
        if( heap.first_free != NULL )
    309e:	b103      	cbz	r3, 30a2 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    30a0:	615d      	str	r5, [r3, #20]
        heap.first_free = hdr;
    30a2:	4b06      	ldr	r3, [pc, #24]	; (30bc <buffer_alloc_free+0x130>)
    30a4:	60dd      	str	r5, [r3, #12]
    30a6:	e7de      	b.n	3066 <buffer_alloc_free+0xda>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    30a8:	f7ff ff4c 	bl	2f44 <verify_chain>
    30ac:	2800      	cmp	r0, #0
    30ae:	d0df      	beq.n	3070 <buffer_alloc_free+0xe4>
        mbedtls_exit( 1 );
    30b0:	4b03      	ldr	r3, [pc, #12]	; (30c0 <buffer_alloc_free+0x134>)
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	2001      	movs	r0, #1
    30b6:	4798      	blx	r3
    30b8:	e7da      	b.n	3070 <buffer_alloc_free+0xe4>
    30ba:	4770      	bx	lr
    30bc:	20002a14 	.word	0x20002a14
    30c0:	20005b6c 	.word	0x20005b6c

000030c4 <buffer_alloc_calloc>:
{
    30c4:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    30c6:	4b51      	ldr	r3, [pc, #324]	; (320c <buffer_alloc_calloc+0x148>)
    30c8:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	2b00      	cmp	r3, #0
    30ce:	f000 808f 	beq.w	31f0 <buffer_alloc_calloc+0x12c>
    30d2:	4b4e      	ldr	r3, [pc, #312]	; (320c <buffer_alloc_calloc+0x148>)
    30d4:	689b      	ldr	r3, [r3, #8]
    30d6:	2b00      	cmp	r3, #0
    30d8:	f000 808c 	beq.w	31f4 <buffer_alloc_calloc+0x130>
    original_len = len = n * size;
    30dc:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    30e0:	2800      	cmp	r0, #0
    30e2:	f000 8089 	beq.w	31f8 <buffer_alloc_calloc+0x134>
    30e6:	2900      	cmp	r1, #0
    30e8:	f000 8088 	beq.w	31fc <buffer_alloc_calloc+0x138>
    30ec:	fbb6 f0f0 	udiv	r0, r6, r0
    30f0:	4288      	cmp	r0, r1
    30f2:	f040 8085 	bne.w	3200 <buffer_alloc_calloc+0x13c>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    30f6:	f116 0f04 	cmn.w	r6, #4
    30fa:	f200 8083 	bhi.w	3204 <buffer_alloc_calloc+0x140>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    30fe:	f016 0f03 	tst.w	r6, #3
    3102:	d008      	beq.n	3116 <buffer_alloc_calloc+0x52>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3104:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3108:	3504      	adds	r5, #4
    while( cur != NULL )
    310a:	b134      	cbz	r4, 311a <buffer_alloc_calloc+0x56>
        if( cur->size >= len )
    310c:	6863      	ldr	r3, [r4, #4]
    310e:	42ab      	cmp	r3, r5
    3110:	d203      	bcs.n	311a <buffer_alloc_calloc+0x56>
        cur = cur->next_free;
    3112:	69a4      	ldr	r4, [r4, #24]
    3114:	e7f9      	b.n	310a <buffer_alloc_calloc+0x46>
    original_len = len = n * size;
    3116:	4635      	mov	r5, r6
    3118:	e7f7      	b.n	310a <buffer_alloc_calloc+0x46>
    if( cur == NULL )
    311a:	2c00      	cmp	r4, #0
    311c:	d074      	beq.n	3208 <buffer_alloc_calloc+0x144>
    if( cur->alloc != 0 )
    311e:	68a3      	ldr	r3, [r4, #8]
    3120:	b11b      	cbz	r3, 312a <buffer_alloc_calloc+0x66>
        mbedtls_exit( 1 );
    3122:	4b3b      	ldr	r3, [pc, #236]	; (3210 <buffer_alloc_calloc+0x14c>)
    3124:	681b      	ldr	r3, [r3, #0]
    3126:	2001      	movs	r0, #1
    3128:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    312a:	6862      	ldr	r2, [r4, #4]
    312c:	1b52      	subs	r2, r2, r5
    312e:	2a23      	cmp	r2, #35	; 0x23
    3130:	d826      	bhi.n	3180 <buffer_alloc_calloc+0xbc>
        cur->alloc = 1;
    3132:	2301      	movs	r3, #1
    3134:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3136:	6963      	ldr	r3, [r4, #20]
    3138:	b1ab      	cbz	r3, 3166 <buffer_alloc_calloc+0xa2>
            cur->prev_free->next_free = cur->next_free;
    313a:	69a2      	ldr	r2, [r4, #24]
    313c:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    313e:	69a3      	ldr	r3, [r4, #24]
    3140:	b10b      	cbz	r3, 3146 <buffer_alloc_calloc+0x82>
            cur->next_free->prev_free = cur->prev_free;
    3142:	6962      	ldr	r2, [r4, #20]
    3144:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3146:	2300      	movs	r3, #0
    3148:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    314a:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    314c:	4b2f      	ldr	r3, [pc, #188]	; (320c <buffer_alloc_calloc+0x148>)
    314e:	691b      	ldr	r3, [r3, #16]
    3150:	f013 0f01 	tst.w	r3, #1
    3154:	d10b      	bne.n	316e <buffer_alloc_calloc+0xaa>
        ret = (unsigned char *) cur + sizeof( memory_header );
    3156:	3420      	adds	r4, #32
        memset( ret, 0, original_len );
    3158:	4632      	mov	r2, r6
    315a:	2100      	movs	r1, #0
    315c:	4620      	mov	r0, r4
    315e:	f002 fc45 	bl	59ec <memset>
}
    3162:	4620      	mov	r0, r4
    3164:	bd70      	pop	{r4, r5, r6, pc}
            heap.first_free = cur->next_free;
    3166:	69a2      	ldr	r2, [r4, #24]
    3168:	4b28      	ldr	r3, [pc, #160]	; (320c <buffer_alloc_calloc+0x148>)
    316a:	60da      	str	r2, [r3, #12]
    316c:	e7e7      	b.n	313e <buffer_alloc_calloc+0x7a>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    316e:	f7ff fee9 	bl	2f44 <verify_chain>
    3172:	2800      	cmp	r0, #0
    3174:	d0ef      	beq.n	3156 <buffer_alloc_calloc+0x92>
            mbedtls_exit( 1 );
    3176:	4b26      	ldr	r3, [pc, #152]	; (3210 <buffer_alloc_calloc+0x14c>)
    3178:	681b      	ldr	r3, [r3, #0]
    317a:	2001      	movs	r0, #1
    317c:	4798      	blx	r3
    317e:	e7ea      	b.n	3156 <buffer_alloc_calloc+0x92>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3180:	f105 0120 	add.w	r1, r5, #32
    3184:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3186:	3a20      	subs	r2, #32
    3188:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    318a:	2200      	movs	r2, #0
    318c:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    318e:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    3190:	6922      	ldr	r2, [r4, #16]
    3192:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3194:	481f      	ldr	r0, [pc, #124]	; (3214 <buffer_alloc_calloc+0x150>)
    3196:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3198:	491f      	ldr	r1, [pc, #124]	; (3218 <buffer_alloc_calloc+0x154>)
    319a:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    319c:	b102      	cbz	r2, 31a0 <buffer_alloc_calloc+0xdc>
        new->next->prev = new;
    319e:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    31a0:	6962      	ldr	r2, [r4, #20]
    31a2:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    31a4:	69a1      	ldr	r1, [r4, #24]
    31a6:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    31a8:	b1b2      	cbz	r2, 31d8 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    31aa:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    31ac:	699a      	ldr	r2, [r3, #24]
    31ae:	b102      	cbz	r2, 31b2 <buffer_alloc_calloc+0xee>
        new->next_free->prev_free = new;
    31b0:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    31b2:	2201      	movs	r2, #1
    31b4:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    31b6:	6065      	str	r5, [r4, #4]
    cur->next = new;
    31b8:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    31ba:	2300      	movs	r3, #0
    31bc:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    31be:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    31c0:	4b12      	ldr	r3, [pc, #72]	; (320c <buffer_alloc_calloc+0x148>)
    31c2:	691b      	ldr	r3, [r3, #16]
    31c4:	f013 0f01 	tst.w	r3, #1
    31c8:	d109      	bne.n	31de <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    31ca:	3420      	adds	r4, #32
    memset( ret, 0, original_len );
    31cc:	4632      	mov	r2, r6
    31ce:	2100      	movs	r1, #0
    31d0:	4620      	mov	r0, r4
    31d2:	f002 fc0b 	bl	59ec <memset>
    return( ret );
    31d6:	e7c4      	b.n	3162 <buffer_alloc_calloc+0x9e>
        heap.first_free = new;
    31d8:	4a0c      	ldr	r2, [pc, #48]	; (320c <buffer_alloc_calloc+0x148>)
    31da:	60d3      	str	r3, [r2, #12]
    31dc:	e7e6      	b.n	31ac <buffer_alloc_calloc+0xe8>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    31de:	f7ff feb1 	bl	2f44 <verify_chain>
    31e2:	2800      	cmp	r0, #0
    31e4:	d0f1      	beq.n	31ca <buffer_alloc_calloc+0x106>
        mbedtls_exit( 1 );
    31e6:	4b0a      	ldr	r3, [pc, #40]	; (3210 <buffer_alloc_calloc+0x14c>)
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	2001      	movs	r0, #1
    31ec:	4798      	blx	r3
    31ee:	e7ec      	b.n	31ca <buffer_alloc_calloc+0x106>
        return( NULL );
    31f0:	2400      	movs	r4, #0
    31f2:	e7b6      	b.n	3162 <buffer_alloc_calloc+0x9e>
    31f4:	2400      	movs	r4, #0
    31f6:	e7b4      	b.n	3162 <buffer_alloc_calloc+0x9e>
        return( NULL );
    31f8:	2400      	movs	r4, #0
    31fa:	e7b2      	b.n	3162 <buffer_alloc_calloc+0x9e>
    31fc:	2400      	movs	r4, #0
    31fe:	e7b0      	b.n	3162 <buffer_alloc_calloc+0x9e>
    3200:	2400      	movs	r4, #0
    3202:	e7ae      	b.n	3162 <buffer_alloc_calloc+0x9e>
        return( NULL );
    3204:	2400      	movs	r4, #0
    3206:	e7ac      	b.n	3162 <buffer_alloc_calloc+0x9e>
        return( NULL );
    3208:	2400      	movs	r4, #0
    320a:	e7aa      	b.n	3162 <buffer_alloc_calloc+0x9e>
    320c:	20002a14 	.word	0x20002a14
    3210:	20005b6c 	.word	0x20005b6c
    3214:	ff00aa55 	.word	0xff00aa55
    3218:	ee119966 	.word	0xee119966

0000321c <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    321c:	b538      	push	{r3, r4, r5, lr}
    321e:	4605      	mov	r5, r0
    3220:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3222:	2214      	movs	r2, #20
    3224:	2100      	movs	r1, #0
    3226:	4813      	ldr	r0, [pc, #76]	; (3274 <mbedtls_memory_buffer_alloc_init+0x58>)
    3228:	f002 fbe0 	bl	59ec <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    322c:	4912      	ldr	r1, [pc, #72]	; (3278 <mbedtls_memory_buffer_alloc_init+0x5c>)
    322e:	4813      	ldr	r0, [pc, #76]	; (327c <mbedtls_memory_buffer_alloc_init+0x60>)
    3230:	f000 f838 	bl	32a4 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3234:	2c23      	cmp	r4, #35	; 0x23
    3236:	d91c      	bls.n	3272 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3238:	f015 0303 	ands.w	r3, r5, #3
    323c:	d004      	beq.n	3248 <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    323e:	441c      	add	r4, r3
    3240:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3242:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3246:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    3248:	4622      	mov	r2, r4
    324a:	2100      	movs	r1, #0
    324c:	4628      	mov	r0, r5
    324e:	f002 fbcd 	bl	59ec <memset>

    heap.buf = buf;
    3252:	4b08      	ldr	r3, [pc, #32]	; (3274 <mbedtls_memory_buffer_alloc_init+0x58>)
    3254:	601d      	str	r5, [r3, #0]
    heap.len = len;
    3256:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    3258:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    325a:	3c20      	subs	r4, #32
    325c:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    325e:	689a      	ldr	r2, [r3, #8]
    3260:	4907      	ldr	r1, [pc, #28]	; (3280 <mbedtls_memory_buffer_alloc_init+0x64>)
    3262:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3264:	689a      	ldr	r2, [r3, #8]
    3266:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    326a:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    326e:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    3270:	60da      	str	r2, [r3, #12]
}
    3272:	bd38      	pop	{r3, r4, r5, pc}
    3274:	20002a14 	.word	0x20002a14
    3278:	00002f8d 	.word	0x00002f8d
    327c:	000030c5 	.word	0x000030c5
    3280:	ff00aa55 	.word	0xff00aa55

00003284 <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    3284:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    3286:	4b02      	ldr	r3, [pc, #8]	; (3290 <mbedtls_calloc+0xc>)
    3288:	681b      	ldr	r3, [r3, #0]
    328a:	4798      	blx	r3
}
    328c:	bd08      	pop	{r3, pc}
    328e:	bf00      	nop
    3290:	20005b68 	.word	0x20005b68

00003294 <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    3294:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    3296:	4b02      	ldr	r3, [pc, #8]	; (32a0 <mbedtls_free+0xc>)
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	4798      	blx	r3
}
    329c:	bd08      	pop	{r3, pc}
    329e:	bf00      	nop
    32a0:	20005b70 	.word	0x20005b70

000032a4 <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    32a4:	4b02      	ldr	r3, [pc, #8]	; (32b0 <mbedtls_platform_set_calloc_free+0xc>)
    32a6:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    32a8:	4b02      	ldr	r3, [pc, #8]	; (32b4 <mbedtls_platform_set_calloc_free+0x10>)
    32aa:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    32ac:	2000      	movs	r0, #0
    32ae:	4770      	bx	lr
    32b0:	20005b68 	.word	0x20005b68
    32b4:	20005b70 	.word	0x20005b70

000032b8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    32b8:	b508      	push	{r3, lr}
    memset_func( buf, 0, len );
    32ba:	4b03      	ldr	r3, [pc, #12]	; (32c8 <mbedtls_platform_zeroize+0x10>)
    32bc:	681b      	ldr	r3, [r3, #0]
    32be:	460a      	mov	r2, r1
    32c0:	2100      	movs	r1, #0
    32c2:	4798      	blx	r3
}
    32c4:	bd08      	pop	{r3, pc}
    32c6:	bf00      	nop
    32c8:	20005b74 	.word	0x20005b74

000032cc <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    32cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ce:	4604      	mov	r4, r0
    32d0:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    32d2:	6847      	ldr	r7, [r0, #4]
    32d4:	f100 0608 	add.w	r6, r0, #8
    32d8:	4630      	mov	r0, r6
    32da:	f003 f9e6 	bl	66aa <mbedtls_mpi_size>
    32de:	4287      	cmp	r7, r0
    32e0:	d151      	bne.n	3386 <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    32e2:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    32e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    32e8:	d84f      	bhi.n	338a <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    32ea:	2100      	movs	r1, #0
    32ec:	4630      	mov	r0, r6
    32ee:	f003 fbe0 	bl	6ab2 <mbedtls_mpi_cmp_int>
    32f2:	2800      	cmp	r0, #0
    32f4:	dd4b      	ble.n	338e <rsa_check_context+0xc2>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    32f6:	2100      	movs	r1, #0
    32f8:	4630      	mov	r0, r6
    32fa:	f003 f9af 	bl	665c <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    32fe:	2800      	cmp	r0, #0
    3300:	d047      	beq.n	3392 <rsa_check_context+0xc6>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3302:	b1d5      	cbz	r5, 333a <rsa_check_context+0x6e>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3304:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3308:	2100      	movs	r1, #0
    330a:	4630      	mov	r0, r6
    330c:	f003 fbd1 	bl	6ab2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3310:	2800      	cmp	r0, #0
    3312:	dd40      	ble.n	3396 <rsa_check_context+0xca>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3314:	2100      	movs	r1, #0
    3316:	4630      	mov	r0, r6
    3318:	f003 f9a0 	bl	665c <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    331c:	2800      	cmp	r0, #0
    331e:	d03c      	beq.n	339a <rsa_check_context+0xce>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3320:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3324:	2100      	movs	r1, #0
    3326:	4630      	mov	r0, r6
    3328:	f003 fbc3 	bl	6ab2 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    332c:	2800      	cmp	r0, #0
    332e:	dd36      	ble.n	339e <rsa_check_context+0xd2>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3330:	2100      	movs	r1, #0
    3332:	4630      	mov	r0, r6
    3334:	f003 f992 	bl	665c <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3338:	b398      	cbz	r0, 33a2 <rsa_check_context+0xd6>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    333a:	2100      	movs	r1, #0
    333c:	f104 0014 	add.w	r0, r4, #20
    3340:	f003 fbb7 	bl	6ab2 <mbedtls_mpi_cmp_int>
    3344:	2800      	cmp	r0, #0
    3346:	dd2e      	ble.n	33a6 <rsa_check_context+0xda>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    3348:	b915      	cbnz	r5, 3350 <rsa_check_context+0x84>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    334a:	b98d      	cbnz	r5, 3370 <rsa_check_context+0xa4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    334c:	4628      	mov	r0, r5
    334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3350:	2100      	movs	r1, #0
    3352:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3356:	f003 fbac 	bl	6ab2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    335a:	2800      	cmp	r0, #0
    335c:	dd25      	ble.n	33aa <rsa_check_context+0xde>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    335e:	2100      	movs	r1, #0
    3360:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3364:	f003 fba5 	bl	6ab2 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3368:	2800      	cmp	r0, #0
    336a:	dcee      	bgt.n	334a <rsa_check_context+0x7e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    336c:	4d10      	ldr	r5, [pc, #64]	; (33b0 <rsa_check_context+0xe4>)
    336e:	e7ed      	b.n	334c <rsa_check_context+0x80>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3370:	2100      	movs	r1, #0
    3372:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3376:	f003 fb9c 	bl	6ab2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    337a:	2800      	cmp	r0, #0
    337c:	dd01      	ble.n	3382 <rsa_check_context+0xb6>
    return( 0 );
    337e:	2500      	movs	r5, #0
    3380:	e7e4      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3382:	4d0b      	ldr	r5, [pc, #44]	; (33b0 <rsa_check_context+0xe4>)
    3384:	e7e2      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3386:	4d0a      	ldr	r5, [pc, #40]	; (33b0 <rsa_check_context+0xe4>)
    3388:	e7e0      	b.n	334c <rsa_check_context+0x80>
    338a:	4d09      	ldr	r5, [pc, #36]	; (33b0 <rsa_check_context+0xe4>)
    338c:	e7de      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    338e:	4d08      	ldr	r5, [pc, #32]	; (33b0 <rsa_check_context+0xe4>)
    3390:	e7dc      	b.n	334c <rsa_check_context+0x80>
    3392:	4d07      	ldr	r5, [pc, #28]	; (33b0 <rsa_check_context+0xe4>)
    3394:	e7da      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3396:	4d06      	ldr	r5, [pc, #24]	; (33b0 <rsa_check_context+0xe4>)
    3398:	e7d8      	b.n	334c <rsa_check_context+0x80>
    339a:	4d05      	ldr	r5, [pc, #20]	; (33b0 <rsa_check_context+0xe4>)
    339c:	e7d6      	b.n	334c <rsa_check_context+0x80>
    339e:	4d04      	ldr	r5, [pc, #16]	; (33b0 <rsa_check_context+0xe4>)
    33a0:	e7d4      	b.n	334c <rsa_check_context+0x80>
    33a2:	4d03      	ldr	r5, [pc, #12]	; (33b0 <rsa_check_context+0xe4>)
    33a4:	e7d2      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    33a6:	4d02      	ldr	r5, [pc, #8]	; (33b0 <rsa_check_context+0xe4>)
    33a8:	e7d0      	b.n	334c <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    33aa:	4d01      	ldr	r5, [pc, #4]	; (33b0 <rsa_check_context+0xe4>)
    33ac:	e7ce      	b.n	334c <rsa_check_context+0x80>
    33ae:	bf00      	nop
    33b0:	ffffbf80 	.word	0xffffbf80

000033b4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    33b4:	b570      	push	{r4, r5, r6, lr}
    33b6:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    33b8:	2200      	movs	r2, #0
    33ba:	4611      	mov	r1, r2
    33bc:	f7ff ff86 	bl	32cc <rsa_check_context>
    33c0:	b9d0      	cbnz	r0, 33f8 <mbedtls_rsa_check_pubkey+0x44>
    33c2:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    33c4:	f104 0508 	add.w	r5, r4, #8
    33c8:	4628      	mov	r0, r5
    33ca:	f003 f957 	bl	667c <mbedtls_mpi_bitlen>
    33ce:	287f      	cmp	r0, #127	; 0x7f
    33d0:	d914      	bls.n	33fc <mbedtls_rsa_check_pubkey+0x48>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    33d2:	3414      	adds	r4, #20
    33d4:	2100      	movs	r1, #0
    33d6:	4620      	mov	r0, r4
    33d8:	f003 f940 	bl	665c <mbedtls_mpi_get_bit>
    33dc:	b180      	cbz	r0, 3400 <mbedtls_rsa_check_pubkey+0x4c>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    33de:	4620      	mov	r0, r4
    33e0:	f003 f94c 	bl	667c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    33e4:	2801      	cmp	r0, #1
    33e6:	d90d      	bls.n	3404 <mbedtls_rsa_check_pubkey+0x50>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    33e8:	4629      	mov	r1, r5
    33ea:	4620      	mov	r0, r4
    33ec:	f003 fb19 	bl	6a22 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    33f0:	2800      	cmp	r0, #0
    33f2:	da09      	bge.n	3408 <mbedtls_rsa_check_pubkey+0x54>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    33f4:	4630      	mov	r0, r6
    33f6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    33f8:	4e04      	ldr	r6, [pc, #16]	; (340c <mbedtls_rsa_check_pubkey+0x58>)
    33fa:	e7fb      	b.n	33f4 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    33fc:	4e03      	ldr	r6, [pc, #12]	; (340c <mbedtls_rsa_check_pubkey+0x58>)
    33fe:	e7f9      	b.n	33f4 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3400:	4e02      	ldr	r6, [pc, #8]	; (340c <mbedtls_rsa_check_pubkey+0x58>)
    3402:	e7f7      	b.n	33f4 <mbedtls_rsa_check_pubkey+0x40>
    3404:	4e01      	ldr	r6, [pc, #4]	; (340c <mbedtls_rsa_check_pubkey+0x58>)
    3406:	e7f5      	b.n	33f4 <mbedtls_rsa_check_pubkey+0x40>
    3408:	4e00      	ldr	r6, [pc, #0]	; (340c <mbedtls_rsa_check_pubkey+0x58>)
    340a:	e7f3      	b.n	33f4 <mbedtls_rsa_check_pubkey+0x40>
    340c:	ffffbe00 	.word	0xffffbe00

00003410 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
    3412:	b087      	sub	sp, #28
    3414:	4605      	mov	r5, r0
    3416:	460c      	mov	r4, r1
    3418:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    341a:	2200      	movs	r2, #0
    341c:	4611      	mov	r1, r2
    341e:	f7ff ff55 	bl	32cc <rsa_check_context>
    3422:	bb90      	cbnz	r0, 348a <mbedtls_rsa_public+0x7a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3424:	a803      	add	r0, sp, #12
    3426:	f003 f887 	bl	6538 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    342a:	686a      	ldr	r2, [r5, #4]
    342c:	4621      	mov	r1, r4
    342e:	a803      	add	r0, sp, #12
    3430:	f003 f941 	bl	66b6 <mbedtls_mpi_read_binary>
    3434:	4604      	mov	r4, r0
    3436:	b140      	cbz	r0, 344a <mbedtls_rsa_public+0x3a>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3438:	a803      	add	r0, sp, #12
    343a:	f003 f883 	bl	6544 <mbedtls_mpi_free>

    if( ret != 0 )
    343e:	b10c      	cbz	r4, 3444 <mbedtls_rsa_public+0x34>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3440:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    3444:	4620      	mov	r0, r4
    3446:	b007      	add	sp, #28
    3448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    344a:	f105 0408 	add.w	r4, r5, #8
    344e:	4621      	mov	r1, r4
    3450:	a803      	add	r0, sp, #12
    3452:	f003 fae6 	bl	6a22 <mbedtls_mpi_cmp_mpi>
    3456:	2800      	cmp	r0, #0
    3458:	db02      	blt.n	3460 <mbedtls_rsa_public+0x50>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    345a:	f06f 0403 	mvn.w	r4, #3
    345e:	e7eb      	b.n	3438 <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    3460:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3462:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3466:	9300      	str	r3, [sp, #0]
    3468:	4623      	mov	r3, r4
    346a:	f105 0214 	add.w	r2, r5, #20
    346e:	a903      	add	r1, sp, #12
    3470:	4608      	mov	r0, r1
    3472:	f003 fe96 	bl	71a2 <mbedtls_mpi_exp_mod>
    3476:	4604      	mov	r4, r0
    3478:	2800      	cmp	r0, #0
    347a:	d1dd      	bne.n	3438 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    347c:	463a      	mov	r2, r7
    347e:	4631      	mov	r1, r6
    3480:	a803      	add	r0, sp, #12
    3482:	f003 f949 	bl	6718 <mbedtls_mpi_write_binary>
    3486:	4604      	mov	r4, r0
cleanup:
    3488:	e7d6      	b.n	3438 <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    348a:	4c01      	ldr	r4, [pc, #4]	; (3490 <mbedtls_rsa_public+0x80>)
    348c:	e7da      	b.n	3444 <mbedtls_rsa_public+0x34>
    348e:	bf00      	nop
    3490:	ffffbf80 	.word	0xffffbf80

00003494 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3494:	2300      	movs	r3, #0
    3496:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3498:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    349a:	460b      	mov	r3, r1
    349c:	b1e1      	cbz	r1, 34d8 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    349e:	4a19      	ldr	r2, [pc, #100]	; (3504 <mbedtls_sha256_starts_ret+0x70>)
    34a0:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    34a2:	4a19      	ldr	r2, [pc, #100]	; (3508 <mbedtls_sha256_starts_ret+0x74>)
    34a4:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    34a6:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    34aa:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    34ae:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    34b2:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    34b4:	4a15      	ldr	r2, [pc, #84]	; (350c <mbedtls_sha256_starts_ret+0x78>)
    34b6:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    34b8:	4a15      	ldr	r2, [pc, #84]	; (3510 <mbedtls_sha256_starts_ret+0x7c>)
    34ba:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    34bc:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    34c0:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    34c4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    34c8:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    34ca:	4a12      	ldr	r2, [pc, #72]	; (3514 <mbedtls_sha256_starts_ret+0x80>)
    34cc:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    34ce:	4a12      	ldr	r2, [pc, #72]	; (3518 <mbedtls_sha256_starts_ret+0x84>)
    34d0:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    34d2:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    34d4:	2000      	movs	r0, #0
    34d6:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    34d8:	4a10      	ldr	r2, [pc, #64]	; (351c <mbedtls_sha256_starts_ret+0x88>)
    34da:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    34dc:	4a10      	ldr	r2, [pc, #64]	; (3520 <mbedtls_sha256_starts_ret+0x8c>)
    34de:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    34e0:	4a10      	ldr	r2, [pc, #64]	; (3524 <mbedtls_sha256_starts_ret+0x90>)
    34e2:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    34e4:	4a10      	ldr	r2, [pc, #64]	; (3528 <mbedtls_sha256_starts_ret+0x94>)
    34e6:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    34e8:	4a10      	ldr	r2, [pc, #64]	; (352c <mbedtls_sha256_starts_ret+0x98>)
    34ea:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    34ec:	4a10      	ldr	r2, [pc, #64]	; (3530 <mbedtls_sha256_starts_ret+0x9c>)
    34ee:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    34f0:	4a10      	ldr	r2, [pc, #64]	; (3534 <mbedtls_sha256_starts_ret+0xa0>)
    34f2:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    34f4:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    34f8:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    34fc:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    3500:	6242      	str	r2, [r0, #36]	; 0x24
    3502:	e7e6      	b.n	34d2 <mbedtls_sha256_starts_ret+0x3e>
    3504:	c1059ed8 	.word	0xc1059ed8
    3508:	367cd507 	.word	0x367cd507
    350c:	f70e5939 	.word	0xf70e5939
    3510:	ffc00b31 	.word	0xffc00b31
    3514:	64f98fa7 	.word	0x64f98fa7
    3518:	befa4fa4 	.word	0xbefa4fa4
    351c:	6a09e667 	.word	0x6a09e667
    3520:	bb67ae85 	.word	0xbb67ae85
    3524:	3c6ef372 	.word	0x3c6ef372
    3528:	a54ff53a 	.word	0xa54ff53a
    352c:	510e527f 	.word	0x510e527f
    3530:	9b05688c 	.word	0x9b05688c
    3534:	1f83d9ab 	.word	0x1f83d9ab

00003538 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    353c:	b0d1      	sub	sp, #324	; 0x144
    353e:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    3540:	2300      	movs	r3, #0
    3542:	e006      	b.n	3552 <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    3544:	1c9a      	adds	r2, r3, #2
    3546:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    354a:	ac08      	add	r4, sp, #32
    354c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3550:	3301      	adds	r3, #1
    3552:	2b07      	cmp	r3, #7
    3554:	d9f6      	bls.n	3544 <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    3556:	2000      	movs	r0, #0
    3558:	e010      	b.n	357c <mbedtls_internal_sha256_process+0x44>
        GET_UINT32_BE( W[i], data, 4 * i );
    355a:	f811 4020 	ldrb.w	r4, [r1, r0, lsl #2]
    355e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
    3562:	7853      	ldrb	r3, [r2, #1]
    3564:	041b      	lsls	r3, r3, #16
    3566:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    356a:	7894      	ldrb	r4, [r2, #2]
    356c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    3570:	78d2      	ldrb	r2, [r2, #3]
    3572:	4313      	orrs	r3, r2
    3574:	aa10      	add	r2, sp, #64	; 0x40
    3576:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    for( i = 0; i < 16; i++ )
    357a:	3001      	adds	r0, #1
    357c:	280f      	cmp	r0, #15
    357e:	d9ec      	bls.n	355a <mbedtls_internal_sha256_process+0x22>

    for( i = 0; i < 16; i += 8 )
    3580:	f04f 0e00 	mov.w	lr, #0
    3584:	e142      	b.n	380c <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3588:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    358a:	ea4f 21f6 	mov.w	r1, r6, ror #11
    358e:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    3592:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    3596:	4419      	add	r1, r3
    3598:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    359a:	980d      	ldr	r0, [sp, #52]	; 0x34
    359c:	ea84 0300 	eor.w	r3, r4, r0
    35a0:	4033      	ands	r3, r6
    35a2:	4063      	eors	r3, r4
    35a4:	4419      	add	r1, r3
    35a6:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 3cdc <mbedtls_internal_sha256_process+0x7a4>
    35aa:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    35ae:	4419      	add	r1, r3
    35b0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    35b4:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    35b8:	4419      	add	r1, r3
    35ba:	9d08      	ldr	r5, [sp, #32]
    35bc:	ea4f 3a75 	mov.w	sl, r5, ror #13
    35c0:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    35c4:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    35c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    35ca:	ea05 0307 	and.w	r3, r5, r7
    35ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    35d0:	ea45 0907 	orr.w	r9, r5, r7
    35d4:	ea02 0909 	and.w	r9, r2, r9
    35d8:	ea43 0309 	orr.w	r3, r3, r9
    35dc:	449a      	add	sl, r3
    35de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35e0:	eb01 0903 	add.w	r9, r1, r3
    35e4:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    35e6:	ea4f 23f9 	mov.w	r3, r9, ror #11
    35ea:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    35ee:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    35f2:	441c      	add	r4, r3
    35f4:	ea86 0300 	eor.w	r3, r6, r0
    35f8:	ea09 0303 	and.w	r3, r9, r3
    35fc:	4043      	eors	r3, r0
    35fe:	441c      	add	r4, r3
    3600:	f10e 0a01 	add.w	sl, lr, #1
    3604:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    3608:	441c      	add	r4, r3
    360a:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    360e:	441c      	add	r4, r3
    3610:	ea4f 3371 	mov.w	r3, r1, ror #13
    3614:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    3618:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    361c:	ea05 0a01 	and.w	sl, r5, r1
    3620:	ea45 0b01 	orr.w	fp, r5, r1
    3624:	ea07 0b0b 	and.w	fp, r7, fp
    3628:	ea4a 0a0b 	orr.w	sl, sl, fp
    362c:	4453      	add	r3, sl
    362e:	4422      	add	r2, r4
    3630:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3632:	ea4f 23f2 	mov.w	r3, r2, ror #11
    3636:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    363a:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    363e:	4418      	add	r0, r3
    3640:	ea86 0309 	eor.w	r3, r6, r9
    3644:	4013      	ands	r3, r2
    3646:	4073      	eors	r3, r6
    3648:	4418      	add	r0, r3
    364a:	f10e 0a02 	add.w	sl, lr, #2
    364e:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    3652:	4418      	add	r0, r3
    3654:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    3658:	4418      	add	r0, r3
    365a:	ea4f 3374 	mov.w	r3, r4, ror #13
    365e:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    3662:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    3666:	ea01 0a04 	and.w	sl, r1, r4
    366a:	ea41 0b04 	orr.w	fp, r1, r4
    366e:	ea05 0b0b 	and.w	fp, r5, fp
    3672:	ea4a 0a0b 	orr.w	sl, sl, fp
    3676:	4453      	add	r3, sl
    3678:	4407      	add	r7, r0
    367a:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    367c:	ea4f 23f7 	mov.w	r3, r7, ror #11
    3680:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    3684:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    3688:	441e      	add	r6, r3
    368a:	ea89 0302 	eor.w	r3, r9, r2
    368e:	403b      	ands	r3, r7
    3690:	ea89 0303 	eor.w	r3, r9, r3
    3694:	441e      	add	r6, r3
    3696:	f10e 0a03 	add.w	sl, lr, #3
    369a:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    369e:	441e      	add	r6, r3
    36a0:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    36a4:	441e      	add	r6, r3
    36a6:	ea4f 3370 	mov.w	r3, r0, ror #13
    36aa:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    36ae:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    36b2:	ea04 0a00 	and.w	sl, r4, r0
    36b6:	ea44 0b00 	orr.w	fp, r4, r0
    36ba:	ea01 0b0b 	and.w	fp, r1, fp
    36be:	ea4a 0a0b 	orr.w	sl, sl, fp
    36c2:	4453      	add	r3, sl
    36c4:	4435      	add	r5, r6
    36c6:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    36c8:	ea4f 23f5 	mov.w	r3, r5, ror #11
    36cc:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    36d0:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    36d4:	4499      	add	r9, r3
    36d6:	ea82 0307 	eor.w	r3, r2, r7
    36da:	402b      	ands	r3, r5
    36dc:	4053      	eors	r3, r2
    36de:	4499      	add	r9, r3
    36e0:	f10e 0a04 	add.w	sl, lr, #4
    36e4:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    36e8:	444b      	add	r3, r9
    36ea:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    36ee:	444b      	add	r3, r9
    36f0:	ea4f 3976 	mov.w	r9, r6, ror #13
    36f4:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    36f8:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    36fc:	ea00 0a06 	and.w	sl, r0, r6
    3700:	ea40 0b06 	orr.w	fp, r0, r6
    3704:	ea04 0b0b 	and.w	fp, r4, fp
    3708:	ea4a 0a0b 	orr.w	sl, sl, fp
    370c:	44d1      	add	r9, sl
    370e:	4419      	add	r1, r3
    3710:	910f      	str	r1, [sp, #60]	; 0x3c
    3712:	444b      	add	r3, r9
    3714:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    3716:	ea4f 29f1 	mov.w	r9, r1, ror #11
    371a:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    371e:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    3722:	444a      	add	r2, r9
    3724:	ea87 0905 	eor.w	r9, r7, r5
    3728:	ea01 0909 	and.w	r9, r1, r9
    372c:	ea87 0909 	eor.w	r9, r7, r9
    3730:	4491      	add	r9, r2
    3732:	f10e 0a05 	add.w	sl, lr, #5
    3736:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    373a:	444a      	add	r2, r9
    373c:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    3740:	444a      	add	r2, r9
    3742:	ea4f 3a73 	mov.w	sl, r3, ror #13
    3746:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    374a:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    374e:	ea06 0903 	and.w	r9, r6, r3
    3752:	ea46 0b03 	orr.w	fp, r6, r3
    3756:	ea00 0b0b 	and.w	fp, r0, fp
    375a:	ea49 090b 	orr.w	r9, r9, fp
    375e:	44ca      	add	sl, r9
    3760:	eb04 0902 	add.w	r9, r4, r2
    3764:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    3768:	4452      	add	r2, sl
    376a:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    376c:	ea4f 24f9 	mov.w	r4, r9, ror #11
    3770:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    3774:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    3778:	4427      	add	r7, r4
    377a:	ea85 0401 	eor.w	r4, r5, r1
    377e:	ea09 0404 	and.w	r4, r9, r4
    3782:	406c      	eors	r4, r5
    3784:	443c      	add	r4, r7
    3786:	f10e 0a06 	add.w	sl, lr, #6
    378a:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    378e:	443c      	add	r4, r7
    3790:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    3794:	443c      	add	r4, r7
    3796:	ea4f 3772 	mov.w	r7, r2, ror #13
    379a:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    379e:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    37a2:	ea03 0a02 	and.w	sl, r3, r2
    37a6:	ea43 0b02 	orr.w	fp, r3, r2
    37aa:	ea06 0b0b 	and.w	fp, r6, fp
    37ae:	ea4a 0a0b 	orr.w	sl, sl, fp
    37b2:	4457      	add	r7, sl
    37b4:	4420      	add	r0, r4
    37b6:	900d      	str	r0, [sp, #52]	; 0x34
    37b8:	443c      	add	r4, r7
    37ba:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    37bc:	ea4f 27f0 	mov.w	r7, r0, ror #11
    37c0:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    37c4:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    37c8:	443d      	add	r5, r7
    37ca:	ea81 0909 	eor.w	r9, r1, r9
    37ce:	ea00 0909 	and.w	r9, r0, r9
    37d2:	ea81 0109 	eor.w	r1, r1, r9
    37d6:	4429      	add	r1, r5
    37d8:	f10e 0007 	add.w	r0, lr, #7
    37dc:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    37e0:	4429      	add	r1, r5
    37e2:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    37e6:	4401      	add	r1, r0
    37e8:	ea4f 3074 	mov.w	r0, r4, ror #13
    37ec:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    37f0:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    37f4:	ea02 0504 	and.w	r5, r2, r4
    37f8:	4322      	orrs	r2, r4
    37fa:	4013      	ands	r3, r2
    37fc:	432b      	orrs	r3, r5
    37fe:	4403      	add	r3, r0
    3800:	440e      	add	r6, r1
    3802:	960c      	str	r6, [sp, #48]	; 0x30
    3804:	440b      	add	r3, r1
    3806:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    3808:	f10e 0e08 	add.w	lr, lr, #8
    380c:	f1be 0f0f 	cmp.w	lr, #15
    3810:	f67f aeb9 	bls.w	3586 <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    3814:	2610      	movs	r6, #16
    3816:	e24b      	b.n	3cb0 <mbedtls_internal_sha256_process+0x778>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    3818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    381a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    381c:	ea4f 27f3 	mov.w	r7, r3, ror #11
    3820:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    3824:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    3828:	443a      	add	r2, r7
    382a:	980e      	ldr	r0, [sp, #56]	; 0x38
    382c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    382e:	ea80 0705 	eor.w	r7, r0, r5
    3832:	401f      	ands	r7, r3
    3834:	4047      	eors	r7, r0
    3836:	443a      	add	r2, r7
    3838:	f8df b4a0 	ldr.w	fp, [pc, #1184]	; 3cdc <mbedtls_internal_sha256_process+0x7a4>
    383c:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    3840:	4417      	add	r7, r2
    3842:	1eb3      	subs	r3, r6, #2
    3844:	461a      	mov	r2, r3
    3846:	ab10      	add	r3, sp, #64	; 0x40
    3848:	9204      	str	r2, [sp, #16]
    384a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    384e:	ea4f 44f2 	mov.w	r4, r2, ror #19
    3852:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    3856:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    385a:	1ff2      	subs	r2, r6, #7
    385c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3860:	4414      	add	r4, r2
    3862:	f1a6 0a0f 	sub.w	sl, r6, #15
    3866:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    386a:	ea4f 42bc 	mov.w	r2, ip, ror #18
    386e:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    3872:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    3876:	4414      	add	r4, r2
    3878:	f1a6 0210 	sub.w	r2, r6, #16
    387c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3880:	4422      	add	r2, r4
    3882:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    3886:	443a      	add	r2, r7
    3888:	9908      	ldr	r1, [sp, #32]
    388a:	ea4f 3c71 	mov.w	ip, r1, ror #13
    388e:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    3892:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    3896:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3898:	463c      	mov	r4, r7
    389a:	400c      	ands	r4, r1
    389c:	990a      	ldr	r1, [sp, #40]	; 0x28
    389e:	9100      	str	r1, [sp, #0]
    38a0:	9908      	ldr	r1, [sp, #32]
    38a2:	ea41 0c07 	orr.w	ip, r1, r7
    38a6:	9900      	ldr	r1, [sp, #0]
    38a8:	ea01 0c0c 	and.w	ip, r1, ip
    38ac:	ea44 0c0c 	orr.w	ip, r4, ip
    38b0:	44f4      	add	ip, lr
    38b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    38b4:	4414      	add	r4, r2
    38b6:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    38b8:	ea4f 28f4 	mov.w	r8, r4, ror #11
    38bc:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    38c0:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    38c4:	4480      	add	r8, r0
    38c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    38c8:	ea81 0905 	eor.w	r9, r1, r5
    38cc:	ea04 0909 	and.w	r9, r4, r9
    38d0:	ea85 0909 	eor.w	r9, r5, r9
    38d4:	44c8      	add	r8, r9
    38d6:	1c71      	adds	r1, r6, #1
    38d8:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    38dc:	4480      	add	r8, r0
    38de:	1e70      	subs	r0, r6, #1
    38e0:	9005      	str	r0, [sp, #20]
    38e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    38e6:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    38ea:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    38ee:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    38f2:	1fb0      	subs	r0, r6, #6
    38f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    38f8:	4484      	add	ip, r0
    38fa:	f1a6 0e0e 	sub.w	lr, r6, #14
    38fe:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    3902:	ea4f 40b9 	mov.w	r0, r9, ror #18
    3906:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    390a:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    390e:	4460      	add	r0, ip
    3910:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    3914:	4448      	add	r0, r9
    3916:	9102      	str	r1, [sp, #8]
    3918:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    391c:	eb08 0900 	add.w	r9, r8, r0
    3920:	ea4f 3872 	mov.w	r8, r2, ror #13
    3924:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    3928:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    392c:	9908      	ldr	r1, [sp, #32]
    392e:	ea01 0002 	and.w	r0, r1, r2
    3932:	ea41 0c02 	orr.w	ip, r1, r2
    3936:	9701      	str	r7, [sp, #4]
    3938:	ea07 0c0c 	and.w	ip, r7, ip
    393c:	ea40 0c0c 	orr.w	ip, r0, ip
    3940:	44c4      	add	ip, r8
    3942:	9800      	ldr	r0, [sp, #0]
    3944:	eb00 0809 	add.w	r8, r0, r9
    3948:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    394a:	ea4f 20f8 	mov.w	r0, r8, ror #11
    394e:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    3952:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    3956:	4405      	add	r5, r0
    3958:	990c      	ldr	r1, [sp, #48]	; 0x30
    395a:	ea81 0004 	eor.w	r0, r1, r4
    395e:	ea08 0000 	and.w	r0, r8, r0
    3962:	4048      	eors	r0, r1
    3964:	4405      	add	r5, r0
    3966:	1cb0      	adds	r0, r6, #2
    3968:	4601      	mov	r1, r0
    396a:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    396e:	4405      	add	r5, r0
    3970:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    3974:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    3978:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    397c:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    3980:	1f70      	subs	r0, r6, #5
    3982:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3986:	4484      	add	ip, r0
    3988:	f1a6 0a0d 	sub.w	sl, r6, #13
    398c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    3990:	ea4f 40b0 	mov.w	r0, r0, ror #18
    3994:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    3998:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    399c:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    39a0:	4460      	add	r0, ip
    39a2:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    39a6:	4460      	add	r0, ip
    39a8:	9103      	str	r1, [sp, #12]
    39aa:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    39ae:	4405      	add	r5, r0
    39b0:	ea4f 3c79 	mov.w	ip, r9, ror #13
    39b4:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    39b8:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    39bc:	ea02 0009 	and.w	r0, r2, r9
    39c0:	ea42 0e09 	orr.w	lr, r2, r9
    39c4:	9908      	ldr	r1, [sp, #32]
    39c6:	ea01 0e0e 	and.w	lr, r1, lr
    39ca:	ea40 000e 	orr.w	r0, r0, lr
    39ce:	4484      	add	ip, r0
    39d0:	9f01      	ldr	r7, [sp, #4]
    39d2:	eb07 0e05 	add.w	lr, r7, r5
    39d6:	eb05 070c 	add.w	r7, r5, ip
    39da:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    39dc:	ea4f 20fe 	mov.w	r0, lr, ror #11
    39e0:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    39e4:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    39e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    39ea:	180d      	adds	r5, r1, r0
    39ec:	ea84 0108 	eor.w	r1, r4, r8
    39f0:	ea0e 0101 	and.w	r1, lr, r1
    39f4:	4061      	eors	r1, r4
    39f6:	1868      	adds	r0, r5, r1
    39f8:	1cf7      	adds	r7, r6, #3
    39fa:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    39fe:	4401      	add	r1, r0
    3a00:	9d02      	ldr	r5, [sp, #8]
    3a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    3a06:	ea4f 45f0 	mov.w	r5, r0, ror #19
    3a0a:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    3a0e:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    3a12:	1f30      	subs	r0, r6, #4
    3a14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3a18:	4405      	add	r5, r0
    3a1a:	9501      	str	r5, [sp, #4]
    3a1c:	f1a6 0c0c 	sub.w	ip, r6, #12
    3a20:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    3a24:	ea4f 40b0 	mov.w	r0, r0, ror #18
    3a28:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    3a2c:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    3a30:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    3a34:	9d01      	ldr	r5, [sp, #4]
    3a36:	4428      	add	r0, r5
    3a38:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    3a3c:	4428      	add	r0, r5
    3a3e:	9706      	str	r7, [sp, #24]
    3a40:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    3a44:	4401      	add	r1, r0
    3a46:	9800      	ldr	r0, [sp, #0]
    3a48:	ea4f 3570 	mov.w	r5, r0, ror #13
    3a4c:	4607      	mov	r7, r0
    3a4e:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    3a52:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    3a56:	ea09 0000 	and.w	r0, r9, r0
    3a5a:	ea49 0a07 	orr.w	sl, r9, r7
    3a5e:	ea02 0a0a 	and.w	sl, r2, sl
    3a62:	ea40 000a 	orr.w	r0, r0, sl
    3a66:	4405      	add	r5, r0
    3a68:	9808      	ldr	r0, [sp, #32]
    3a6a:	eb00 0a01 	add.w	sl, r0, r1
    3a6e:	4429      	add	r1, r5
    3a70:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    3a72:	ea4f 25fa 	mov.w	r5, sl, ror #11
    3a76:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    3a7a:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    3a7e:	442c      	add	r4, r5
    3a80:	ea88 050e 	eor.w	r5, r8, lr
    3a84:	ea0a 0505 	and.w	r5, sl, r5
    3a88:	ea88 0505 	eor.w	r5, r8, r5
    3a8c:	4425      	add	r5, r4
    3a8e:	1d34      	adds	r4, r6, #4
    3a90:	9402      	str	r4, [sp, #8]
    3a92:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    3a96:	4405      	add	r5, r0
    3a98:	9903      	ldr	r1, [sp, #12]
    3a9a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    3a9e:	ea4f 40f4 	mov.w	r0, r4, ror #19
    3aa2:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    3aa6:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    3aaa:	1ef4      	subs	r4, r6, #3
    3aac:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    3ab0:	4420      	add	r0, r4
    3ab2:	f1a6 070b 	sub.w	r7, r6, #11
    3ab6:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    3aba:	ea4f 44b1 	mov.w	r4, r1, ror #18
    3abe:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    3ac2:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    3ac6:	4404      	add	r4, r0
    3ac8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    3acc:	4420      	add	r0, r4
    3ace:	9902      	ldr	r1, [sp, #8]
    3ad0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    3ad4:	4405      	add	r5, r0
    3ad6:	9901      	ldr	r1, [sp, #4]
    3ad8:	ea4f 3c71 	mov.w	ip, r1, ror #13
    3adc:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    3ae0:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    3ae4:	9800      	ldr	r0, [sp, #0]
    3ae6:	4604      	mov	r4, r0
    3ae8:	400c      	ands	r4, r1
    3aea:	4601      	mov	r1, r0
    3aec:	9801      	ldr	r0, [sp, #4]
    3aee:	4308      	orrs	r0, r1
    3af0:	ea09 0000 	and.w	r0, r9, r0
    3af4:	4320      	orrs	r0, r4
    3af6:	4460      	add	r0, ip
    3af8:	442a      	add	r2, r5
    3afa:	920f      	str	r2, [sp, #60]	; 0x3c
    3afc:	4428      	add	r0, r5
    3afe:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    3b00:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    3b04:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    3b08:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    3b0c:	44c4      	add	ip, r8
    3b0e:	ea8e 080a 	eor.w	r8, lr, sl
    3b12:	9203      	str	r2, [sp, #12]
    3b14:	ea02 0808 	and.w	r8, r2, r8
    3b18:	ea8e 0808 	eor.w	r8, lr, r8
    3b1c:	44c4      	add	ip, r8
    3b1e:	1d74      	adds	r4, r6, #5
    3b20:	4621      	mov	r1, r4
    3b22:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    3b26:	44a4      	add	ip, r4
    3b28:	9d06      	ldr	r5, [sp, #24]
    3b2a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3b2e:	ea4f 44f5 	mov.w	r4, r5, ror #19
    3b32:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    3b36:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    3b3a:	9a04      	ldr	r2, [sp, #16]
    3b3c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3b40:	442c      	add	r4, r5
    3b42:	f1a6 080a 	sub.w	r8, r6, #10
    3b46:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    3b4a:	ea4f 45b2 	mov.w	r5, r2, ror #18
    3b4e:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    3b52:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    3b56:	4425      	add	r5, r4
    3b58:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    3b5c:	442c      	add	r4, r5
    3b5e:	9104      	str	r1, [sp, #16]
    3b60:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    3b64:	4464      	add	r4, ip
    3b66:	ea4f 3770 	mov.w	r7, r0, ror #13
    3b6a:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    3b6e:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    3b72:	9901      	ldr	r1, [sp, #4]
    3b74:	ea01 0500 	and.w	r5, r1, r0
    3b78:	ea41 0c00 	orr.w	ip, r1, r0
    3b7c:	9900      	ldr	r1, [sp, #0]
    3b7e:	ea01 0c0c 	and.w	ip, r1, ip
    3b82:	ea45 050c 	orr.w	r5, r5, ip
    3b86:	442f      	add	r7, r5
    3b88:	eb09 0c04 	add.w	ip, r9, r4
    3b8c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    3b90:	443c      	add	r4, r7
    3b92:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    3b94:	ea4f 27fc 	mov.w	r7, ip, ror #11
    3b98:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    3b9c:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    3ba0:	4477      	add	r7, lr
    3ba2:	9d03      	ldr	r5, [sp, #12]
    3ba4:	ea8a 0e05 	eor.w	lr, sl, r5
    3ba8:	ea0c 0e0e 	and.w	lr, ip, lr
    3bac:	ea8a 0e0e 	eor.w	lr, sl, lr
    3bb0:	4477      	add	r7, lr
    3bb2:	f106 0906 	add.w	r9, r6, #6
    3bb6:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    3bba:	442f      	add	r7, r5
    3bbc:	9d02      	ldr	r5, [sp, #8]
    3bbe:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3bc2:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    3bc6:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    3bca:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    3bce:	9a05      	ldr	r2, [sp, #20]
    3bd0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3bd4:	44ae      	add	lr, r5
    3bd6:	f1a6 0209 	sub.w	r2, r6, #9
    3bda:	9202      	str	r2, [sp, #8]
    3bdc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3be0:	4629      	mov	r1, r5
    3be2:	ea4f 45b5 	mov.w	r5, r5, ror #18
    3be6:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    3bea:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    3bee:	4475      	add	r5, lr
    3bf0:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    3bf4:	4475      	add	r5, lr
    3bf6:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    3bfa:	442f      	add	r7, r5
    3bfc:	ea4f 3574 	mov.w	r5, r4, ror #13
    3c00:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    3c04:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    3c08:	ea00 0904 	and.w	r9, r0, r4
    3c0c:	ea40 0e04 	orr.w	lr, r0, r4
    3c10:	9a01      	ldr	r2, [sp, #4]
    3c12:	ea02 0e0e 	and.w	lr, r2, lr
    3c16:	ea49 090e 	orr.w	r9, r9, lr
    3c1a:	44a9      	add	r9, r5
    3c1c:	9900      	ldr	r1, [sp, #0]
    3c1e:	19cd      	adds	r5, r1, r7
    3c20:	950d      	str	r5, [sp, #52]	; 0x34
    3c22:	444f      	add	r7, r9
    3c24:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    3c26:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    3c2a:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    3c2e:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    3c32:	44d6      	add	lr, sl
    3c34:	9a03      	ldr	r2, [sp, #12]
    3c36:	ea82 0c0c 	eor.w	ip, r2, ip
    3c3a:	ea05 0c0c 	and.w	ip, r5, ip
    3c3e:	ea82 020c 	eor.w	r2, r2, ip
    3c42:	4472      	add	r2, lr
    3c44:	f106 0807 	add.w	r8, r6, #7
    3c48:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    3c4c:	eb02 0e05 	add.w	lr, r2, r5
    3c50:	9904      	ldr	r1, [sp, #16]
    3c52:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    3c56:	ea4f 42f5 	mov.w	r2, r5, ror #19
    3c5a:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    3c5e:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    3c62:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    3c66:	440a      	add	r2, r1
    3c68:	f1a6 0508 	sub.w	r5, r6, #8
    3c6c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    3c70:	ea4f 45bc 	mov.w	r5, ip, ror #18
    3c74:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    3c78:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    3c7c:	442a      	add	r2, r5
    3c7e:	9d02      	ldr	r5, [sp, #8]
    3c80:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3c84:	442a      	add	r2, r5
    3c86:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    3c8a:	4472      	add	r2, lr
    3c8c:	ea4f 3377 	mov.w	r3, r7, ror #13
    3c90:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    3c94:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    3c98:	ea04 0507 	and.w	r5, r4, r7
    3c9c:	4327      	orrs	r7, r4
    3c9e:	4038      	ands	r0, r7
    3ca0:	4328      	orrs	r0, r5
    3ca2:	4418      	add	r0, r3
    3ca4:	9901      	ldr	r1, [sp, #4]
    3ca6:	4411      	add	r1, r2
    3ca8:	910c      	str	r1, [sp, #48]	; 0x30
    3caa:	4410      	add	r0, r2
    3cac:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    3cae:	3608      	adds	r6, #8
    3cb0:	2e3f      	cmp	r6, #63	; 0x3f
    3cb2:	f67f adb1 	bls.w	3818 <mbedtls_internal_sha256_process+0x2e0>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3cb6:	2100      	movs	r1, #0
    3cb8:	9807      	ldr	r0, [sp, #28]
    3cba:	e009      	b.n	3cd0 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    3cbc:	ab08      	add	r3, sp, #32
    3cbe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    3cc2:	1c8a      	adds	r2, r1, #2
    3cc4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    3cc8:	4423      	add	r3, r4
    3cca:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    3cce:	3101      	adds	r1, #1
    3cd0:	2907      	cmp	r1, #7
    3cd2:	d9f3      	bls.n	3cbc <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    3cd4:	2000      	movs	r0, #0
    3cd6:	b051      	add	sp, #324	; 0x144
    3cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cdc:	000087f8 	.word	0x000087f8

00003ce0 <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3ce0:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <uicr_HFXOCNT_erased+0x14>)
    3ce2:	6a1b      	ldr	r3, [r3, #32]
    3ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ce8:	d001      	beq.n	3cee <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    3cea:	2000      	movs	r0, #0
    }
    3cec:	4770      	bx	lr
            return true;
    3cee:	2001      	movs	r0, #1
    3cf0:	4770      	bx	lr
    3cf2:	bf00      	nop
    3cf4:	00ff8000 	.word	0x00ff8000

00003cf8 <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3cf8:	4b04      	ldr	r3, [pc, #16]	; (3d0c <uicr_HFXOSRC_erased+0x14>)
    3cfa:	69db      	ldr	r3, [r3, #28]
    3cfc:	f013 0f01 	tst.w	r3, #1
    3d00:	d101      	bne.n	3d06 <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    3d02:	2000      	movs	r0, #0
    }
    3d04:	4770      	bx	lr
            return true;
    3d06:	2001      	movs	r0, #1
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop
    3d0c:	00ff8000 	.word	0x00ff8000

00003d10 <errata_6>:
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    3d10:	4b08      	ldr	r3, [pc, #32]	; (3d34 <errata_6+0x24>)
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	2b09      	cmp	r3, #9
    3d16:	d001      	beq.n	3d1c <errata_6+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }
        
        return false;
    3d18:	2000      	movs	r0, #0
    3d1a:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    3d1c:	4b06      	ldr	r3, [pc, #24]	; (3d38 <errata_6+0x28>)
    3d1e:	681b      	ldr	r3, [r3, #0]
    3d20:	2b01      	cmp	r3, #1
    3d22:	d003      	beq.n	3d2c <errata_6+0x1c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    3d24:	2b02      	cmp	r3, #2
    3d26:	d003      	beq.n	3d30 <errata_6+0x20>
        return false;
    3d28:	2000      	movs	r0, #0
    3d2a:	4770      	bx	lr
                return true;
    3d2c:	2001      	movs	r0, #1
    3d2e:	4770      	bx	lr
                return true;
    3d30:	2001      	movs	r0, #1
    }
    3d32:	4770      	bx	lr
    3d34:	00ff0130 	.word	0x00ff0130
    3d38:	00ff0134 	.word	0x00ff0134

00003d3c <errata_14>:

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    3d3c:	4b06      	ldr	r3, [pc, #24]	; (3d58 <errata_14+0x1c>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	2b09      	cmp	r3, #9
    3d42:	d001      	beq.n	3d48 <errata_14+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
                return true;
            }
        }

        return false;
    3d44:	2000      	movs	r0, #0
    3d46:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    3d48:	4b04      	ldr	r3, [pc, #16]	; (3d5c <errata_14+0x20>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2b01      	cmp	r3, #1
    3d4e:	d001      	beq.n	3d54 <errata_14+0x18>
        return false;
    3d50:	2000      	movs	r0, #0
    3d52:	4770      	bx	lr
                return true;
    3d54:	2001      	movs	r0, #1
    }
    3d56:	4770      	bx	lr
    3d58:	00ff0130 	.word	0x00ff0130
    3d5c:	00ff0134 	.word	0x00ff0134

00003d60 <errata_15>:


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    3d60:	4b06      	ldr	r3, [pc, #24]	; (3d7c <errata_15+0x1c>)
    3d62:	681b      	ldr	r3, [r3, #0]
    3d64:	2b09      	cmp	r3, #9
    3d66:	d001      	beq.n	3d6c <errata_15+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }

        return false;
    3d68:	2000      	movs	r0, #0
    3d6a:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    3d6c:	4b04      	ldr	r3, [pc, #16]	; (3d80 <errata_15+0x20>)
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	2b02      	cmp	r3, #2
    3d72:	d001      	beq.n	3d78 <errata_15+0x18>
        return false;
    3d74:	2000      	movs	r0, #0
    3d76:	4770      	bx	lr
                return true;
    3d78:	2001      	movs	r0, #1
    }
    3d7a:	4770      	bx	lr
    3d7c:	00ff0130 	.word	0x00ff0130
    3d80:	00ff0134 	.word	0x00ff0134

00003d84 <errata_20>:


    bool errata_20()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    3d84:	4b06      	ldr	r3, [pc, #24]	; (3da0 <errata_20+0x1c>)
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	2b09      	cmp	r3, #9
    3d8a:	d001      	beq.n	3d90 <errata_20+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }

        return false;
    3d8c:	2000      	movs	r0, #0
    3d8e:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    3d90:	4b04      	ldr	r3, [pc, #16]	; (3da4 <errata_20+0x20>)
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	2b02      	cmp	r3, #2
    3d96:	d001      	beq.n	3d9c <errata_20+0x18>
        return false;
    3d98:	2000      	movs	r0, #0
    3d9a:	4770      	bx	lr
                return true;
    3d9c:	2001      	movs	r0, #1
    }
    3d9e:	4770      	bx	lr
    3da0:	00ff0130 	.word	0x00ff0130
    3da4:	00ff0134 	.word	0x00ff0134

00003da8 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    3da8:	4b01      	ldr	r3, [pc, #4]	; (3db0 <SystemCoreClockUpdate+0x8>)
    3daa:	4a02      	ldr	r2, [pc, #8]	; (3db4 <SystemCoreClockUpdate+0xc>)
    3dac:	601a      	str	r2, [r3, #0]
}
    3dae:	4770      	bx	lr
    3db0:	20005b78 	.word	0x20005b78
    3db4:	03d09000 	.word	0x03d09000

00003db8 <SystemInit>:
{
    3db8:	b508      	push	{r3, lr}
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3dba:	2200      	movs	r2, #0
    3dbc:	2aff      	cmp	r2, #255	; 0xff
    3dbe:	d815      	bhi.n	3dec <SystemInit+0x34>
    3dc0:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3dc4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3dc8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    3dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dd0:	d00c      	beq.n	3dec <SystemInit+0x34>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3dd2:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3dd6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3dda:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    3dde:	00db      	lsls	r3, r3, #3
    3de0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    3de4:	685b      	ldr	r3, [r3, #4]
    3de6:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3de8:	3201      	adds	r2, #1
    3dea:	e7e7      	b.n	3dbc <SystemInit+0x4>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3dec:	f7ff ff84 	bl	3cf8 <uicr_HFXOSRC_erased>
    3df0:	2800      	cmp	r0, #0
    3df2:	d13b      	bne.n	3e6c <SystemInit+0xb4>
    3df4:	f7ff ff74 	bl	3ce0 <uicr_HFXOCNT_erased>
    3df8:	bbc0      	cbnz	r0, 3e6c <SystemInit+0xb4>
        if (errata_6()){
    3dfa:	f7ff ff89 	bl	3d10 <errata_6>
    3dfe:	b130      	cbz	r0, 3e0e <SystemInit+0x56>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3e00:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3e04:	2200      	movs	r2, #0
    3e06:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    3e0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (errata_14()){
    3e0e:	f7ff ff95 	bl	3d3c <errata_14>
    3e12:	b130      	cbz	r0, 3e22 <SystemInit+0x6a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3e14:	2301      	movs	r3, #1
    3e16:	4a35      	ldr	r2, [pc, #212]	; (3eec <SystemInit+0x134>)
    3e18:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3e1a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    3e1e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (errata_15()){
    3e22:	f7ff ff9d 	bl	3d60 <errata_15>
    3e26:	b138      	cbz	r0, 3e38 <SystemInit+0x80>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    3e28:	4b30      	ldr	r3, [pc, #192]	; (3eec <SystemInit+0x134>)
    3e2a:	2200      	movs	r2, #0
    3e2c:	601a      	str	r2, [r3, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3e2e:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
    3e32:	2201      	movs	r2, #1
    3e34:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (errata_20()){
    3e38:	f7ff ffa4 	bl	3d84 <errata_20>
    3e3c:	b110      	cbz	r0, 3e44 <SystemInit+0x8c>
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    3e3e:	4b2c      	ldr	r3, [pc, #176]	; (3ef0 <SystemInit+0x138>)
    3e40:	220c      	movs	r2, #12
    3e42:	601a      	str	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
    3e44:	4b2b      	ldr	r3, [pc, #172]	; (3ef4 <SystemInit+0x13c>)
    3e46:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    3e4a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    3e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    3e52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3e56:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    3e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    3e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e62:	f3bf 8f6f 	isb	sy
    SystemCoreClockUpdate();
    3e66:	f7ff ff9f 	bl	3da8 <SystemCoreClockUpdate>
}
    3e6a:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e6c:	4b22      	ldr	r3, [pc, #136]	; (3ef8 <SystemInit+0x140>)
    3e6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e72:	2b01      	cmp	r3, #1
    3e74:	d1fa      	bne.n	3e6c <SystemInit+0xb4>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3e76:	4b20      	ldr	r3, [pc, #128]	; (3ef8 <SystemInit+0x140>)
    3e78:	2201      	movs	r2, #1
    3e7a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e7e:	4b1e      	ldr	r3, [pc, #120]	; (3ef8 <SystemInit+0x140>)
    3e80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e84:	2b01      	cmp	r3, #1
    3e86:	d1fa      	bne.n	3e7e <SystemInit+0xc6>
          if (uicr_HFXOSRC_erased()){
    3e88:	f7ff ff36 	bl	3cf8 <uicr_HFXOSRC_erased>
    3e8c:	b148      	cbz	r0, 3ea2 <SystemInit+0xea>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3e8e:	4a1b      	ldr	r2, [pc, #108]	; (3efc <SystemInit+0x144>)
    3e90:	69d3      	ldr	r3, [r2, #28]
    3e92:	f023 0301 	bic.w	r3, r3, #1
    3e96:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e98:	4b17      	ldr	r3, [pc, #92]	; (3ef8 <SystemInit+0x140>)
    3e9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e9e:	2b01      	cmp	r3, #1
    3ea0:	d1fa      	bne.n	3e98 <SystemInit+0xe0>
          if (uicr_HFXOCNT_erased()){
    3ea2:	f7ff ff1d 	bl	3ce0 <uicr_HFXOCNT_erased>
    3ea6:	b158      	cbz	r0, 3ec0 <SystemInit+0x108>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3ea8:	4a14      	ldr	r2, [pc, #80]	; (3efc <SystemInit+0x144>)
    3eaa:	6a13      	ldr	r3, [r2, #32]
    3eac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3eb0:	f043 0320 	orr.w	r3, r3, #32
    3eb4:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3eb6:	4b10      	ldr	r3, [pc, #64]	; (3ef8 <SystemInit+0x140>)
    3eb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3ebc:	2b01      	cmp	r3, #1
    3ebe:	d1fa      	bne.n	3eb6 <SystemInit+0xfe>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3ec0:	4b0d      	ldr	r3, [pc, #52]	; (3ef8 <SystemInit+0x140>)
    3ec2:	2200      	movs	r2, #0
    3ec4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3ec8:	4b0b      	ldr	r3, [pc, #44]	; (3ef8 <SystemInit+0x140>)
    3eca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3ece:	2b01      	cmp	r3, #1
    3ed0:	d1fa      	bne.n	3ec8 <SystemInit+0x110>
  __ASM volatile ("dsb 0xF":::"memory");
    3ed2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3ed6:	4907      	ldr	r1, [pc, #28]	; (3ef4 <SystemInit+0x13c>)
    3ed8:	68ca      	ldr	r2, [r1, #12]
    3eda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <SystemInit+0x148>)
    3ee0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3ee2:	60cb      	str	r3, [r1, #12]
    3ee4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3ee8:	bf00      	nop
    3eea:	e7fd      	b.n	3ee8 <SystemInit+0x130>
    3eec:	50004a38 	.word	0x50004a38
    3ef0:	5003aee4 	.word	0x5003aee4
    3ef4:	e000ed00 	.word	0xe000ed00
    3ef8:	50039000 	.word	0x50039000
    3efc:	00ff8000 	.word	0x00ff8000
    3f00:	05fa0004 	.word	0x05fa0004

00003f04 <nvmc_readonly_mode_set>:
#endif

__STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                       nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    3f04:	4b02      	ldr	r3, [pc, #8]	; (3f10 <nvmc_readonly_mode_set+0xc>)
    3f06:	2200      	movs	r2, #0
    3f08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	50039000 	.word	0x50039000

00003f14 <nvmc_write_mode_set>:
    3f14:	4b02      	ldr	r3, [pc, #8]	; (3f20 <nvmc_write_mode_set+0xc>)
    3f16:	2201      	movs	r2, #1
    3f18:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop
    3f20:	50039000 	.word	0x50039000

00003f24 <nvmc_erase_mode_set>:
    3f24:	4b02      	ldr	r3, [pc, #8]	; (3f30 <nvmc_erase_mode_set+0xc>)
    3f26:	2202      	movs	r2, #2
    3f28:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	50039000 	.word	0x50039000

00003f34 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3f34:	4b04      	ldr	r3, [pc, #16]	; (3f48 <nvmc_word_write+0x14>)
    3f36:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3f3a:	f013 0f01 	tst.w	r3, #1
    3f3e:	d0f9      	beq.n	3f34 <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3f40:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3f42:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3f46:	4770      	bx	lr
    3f48:	50039000 	.word	0x50039000

00003f4c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3f4c:	b510      	push	{r4, lr}
    3f4e:	4604      	mov	r4, r0
    NRFX_ASSERT(addr < flash_total_size_get());

    if (!is_page_aligned_check(addr))
    3f50:	f003 fcf5 	bl	793e <is_page_aligned_check>
    3f54:	b908      	cbnz	r0, 3f5a <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    3f56:	4808      	ldr	r0, [pc, #32]	; (3f78 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    3f58:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    3f5a:	f7ff ffe3 	bl	3f24 <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    3f5e:	f04f 33ff 	mov.w	r3, #4294967295
    3f62:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3f64:	4b05      	ldr	r3, [pc, #20]	; (3f7c <nrfx_nvmc_page_erase+0x30>)
    3f66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3f6a:	f013 0f01 	tst.w	r3, #1
    3f6e:	d0f9      	beq.n	3f64 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    3f70:	f7ff ffc8 	bl	3f04 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    3f74:	4802      	ldr	r0, [pc, #8]	; (3f80 <nrfx_nvmc_page_erase+0x34>)
    3f76:	e7ef      	b.n	3f58 <nrfx_nvmc_page_erase+0xc>
    3f78:	0bad000a 	.word	0x0bad000a
    3f7c:	50039000 	.word	0x50039000
    3f80:	0bad0000 	.word	0x0bad0000

00003f84 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    3f84:	b538      	push	{r3, r4, r5, lr}
    3f86:	4605      	mov	r5, r0
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    3f88:	4b0a      	ldr	r3, [pc, #40]	; (3fb4 <z_sys_device_do_config_level+0x30>)
    3f8a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3f8e:	e000      	b.n	3f92 <z_sys_device_do_config_level+0xe>
								info++) {
    3f90:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
    3f92:	1c6b      	adds	r3, r5, #1
    3f94:	4a07      	ldr	r2, [pc, #28]	; (3fb4 <z_sys_device_do_config_level+0x30>)
    3f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f9a:	42a3      	cmp	r3, r4
    3f9c:	d908      	bls.n	3fb0 <z_sys_device_do_config_level+0x2c>
		int retval;
		struct device_config *device_conf = info->config;
    3f9e:	6823      	ldr	r3, [r4, #0]

		retval = device_conf->init(info);
    3fa0:	685b      	ldr	r3, [r3, #4]
    3fa2:	4620      	mov	r0, r4
    3fa4:	4798      	blx	r3
		if (retval != 0) {
    3fa6:	2800      	cmp	r0, #0
    3fa8:	d0f2      	beq.n	3f90 <z_sys_device_do_config_level+0xc>
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3faa:	2300      	movs	r3, #0
    3fac:	6063      	str	r3, [r4, #4]
    3fae:	e7ef      	b.n	3f90 <z_sys_device_do_config_level+0xc>
		} else {
			z_object_init(info);
		}
	}
}
    3fb0:	bd38      	pop	{r3, r4, r5, pc}
    3fb2:	bf00      	nop
    3fb4:	000088f8 	.word	0x000088f8

00003fb8 <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    3fb8:	b538      	push	{r3, r4, r5, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3fba:	4c11      	ldr	r4, [pc, #68]	; (4000 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE>)
    3fbc:	e000      	b.n	3fc0 <z_impl_device_get_binding+0x8>
    3fbe:	340c      	adds	r4, #12
    3fc0:	4b10      	ldr	r3, [pc, #64]	; (4004 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x4>)
    3fc2:	429c      	cmp	r4, r3
    3fc4:	d008      	beq.n	3fd8 <z_impl_device_get_binding+0x20>
		if ((info->driver_api != NULL) &&
    3fc6:	6863      	ldr	r3, [r4, #4]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d0f8      	beq.n	3fbe <z_impl_device_get_binding+0x6>
		    (info->config->name == name)) {
    3fcc:	6823      	ldr	r3, [r4, #0]
    3fce:	681b      	ldr	r3, [r3, #0]
		if ((info->driver_api != NULL) &&
    3fd0:	4283      	cmp	r3, r0
    3fd2:	d1f4      	bne.n	3fbe <z_impl_device_get_binding+0x6>
			return info;
		}
	}

	return NULL;
}
    3fd4:	4620      	mov	r0, r4
    3fd6:	bd38      	pop	{r3, r4, r5, pc}
    3fd8:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
    3fda:	4c09      	ldr	r4, [pc, #36]	; (4000 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE>)
    3fdc:	e000      	b.n	3fe0 <z_impl_device_get_binding+0x28>
    3fde:	340c      	adds	r4, #12
    3fe0:	4b08      	ldr	r3, [pc, #32]	; (4004 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x4>)
    3fe2:	429c      	cmp	r4, r3
    3fe4:	d00a      	beq.n	3ffc <z_impl_device_get_binding+0x44>
		if (info->driver_api == NULL) {
    3fe6:	6863      	ldr	r3, [r4, #4]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d0f8      	beq.n	3fde <z_impl_device_get_binding+0x26>
		if (strcmp(name, info->config->name) == 0) {
    3fec:	6823      	ldr	r3, [r4, #0]
    3fee:	6819      	ldr	r1, [r3, #0]
    3ff0:	4628      	mov	r0, r5
    3ff2:	f001 fcb3 	bl	595c <strcmp>
    3ff6:	2800      	cmp	r0, #0
    3ff8:	d1f1      	bne.n	3fde <z_impl_device_get_binding+0x26>
    3ffa:	e7eb      	b.n	3fd4 <z_impl_device_get_binding+0x1c>
	return NULL;
    3ffc:	2400      	movs	r4, #0
    3ffe:	e7e9      	b.n	3fd4 <z_impl_device_get_binding+0x1c>
    4000:	20005b84 	.word	0x20005b84
    4004:	20005c20 	.word	0x20005c20

00004008 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    4008:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    400a:	4803      	ldr	r0, [pc, #12]	; (4018 <z_bss_zero+0x10>)
    400c:	4a03      	ldr	r2, [pc, #12]	; (401c <z_bss_zero+0x14>)
    400e:	1a12      	subs	r2, r2, r0
    4010:	2100      	movs	r1, #0
    4012:	f001 fceb 	bl	59ec <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
    4016:	bd08      	pop	{r3, pc}
    4018:	20000000 	.word	0x20000000
    401c:	20002b34 	.word	0x20002b34

00004020 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4020:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4022:	4806      	ldr	r0, [pc, #24]	; (403c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4024:	4a06      	ldr	r2, [pc, #24]	; (4040 <z_data_copy+0x20>)
    4026:	1a12      	subs	r2, r2, r0
    4028:	4906      	ldr	r1, [pc, #24]	; (4044 <z_data_copy+0x24>)
    402a:	f001 fcba 	bl	59a2 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    402e:	4a06      	ldr	r2, [pc, #24]	; (4048 <z_data_copy+0x28>)
    4030:	4906      	ldr	r1, [pc, #24]	; (404c <z_data_copy+0x2c>)
    4032:	4807      	ldr	r0, [pc, #28]	; (4050 <z_data_copy+0x30>)
    4034:	f001 fcb5 	bl	59a2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4038:	bd08      	pop	{r3, pc}
    403a:	bf00      	nop
    403c:	20005b38 	.word	0x20005b38
    4040:	20005c44 	.word	0x20005c44
    4044:	00008948 	.word	0x00008948
    4048:	00000000 	.word	0x00000000
    404c:	00008948 	.word	0x00008948
    4050:	20000000 	.word	0x20000000

00004054 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4054:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4056:	2002      	movs	r0, #2
    4058:	f7ff ff94 	bl	3f84 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    405c:	4806      	ldr	r0, [pc, #24]	; (4078 <bg_thread_main+0x24>)
    405e:	f001 f986 	bl	536e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    4062:	2003      	movs	r0, #3
    4064:	f7ff ff8e 	bl	3f84 <z_sys_device_do_config_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4068:	f7fc f9f6 	bl	458 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    406c:	4a03      	ldr	r2, [pc, #12]	; (407c <bg_thread_main+0x28>)
    406e:	7b13      	ldrb	r3, [r2, #12]
    4070:	f023 0301 	bic.w	r3, r3, #1
    4074:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4076:	bd08      	pop	{r3, pc}
    4078:	00008910 	.word	0x00008910
    407c:	20002a94 	.word	0x20002a94

00004080 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4080:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4082:	f7fd fbad 	bl	17e0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    4086:	4b16      	ldr	r3, [pc, #88]	; (40e0 <z_cstart+0x60>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4088:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    408c:	4c15      	ldr	r4, [pc, #84]	; (40e4 <z_cstart+0x64>)
    408e:	23e0      	movs	r3, #224	; 0xe0
    4090:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4094:	2500      	movs	r5, #0
    4096:	77e5      	strb	r5, [r4, #31]
    4098:	7625      	strb	r5, [r4, #24]
    409a:	7665      	strb	r5, [r4, #25]
    409c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    409e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    40a4:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    40a6:	f7fe f919 	bl	22dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    40aa:	f7fd ffcf 	bl	204c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    40ae:	f04f 33ff 	mov.w	r3, #4294967295
    40b2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    40b4:	62e3      	str	r3, [r4, #44]	; 0x2c
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    40b6:	4628      	mov	r0, r5
    40b8:	f7ff ff64 	bl	3f84 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    40bc:	2001      	movs	r0, #1
    40be:	f7ff ff61 	bl	3f84 <z_sys_device_do_config_level>

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading(&dummy_thread);
	switch_to_main_thread();
#else
	bg_thread_main(NULL, NULL, NULL);
    40c2:	462a      	mov	r2, r5
    40c4:	4629      	mov	r1, r5
    40c6:	4628      	mov	r0, r5
    40c8:	f7ff ffc4 	bl	4054 <bg_thread_main>
    40cc:	f04f 0220 	mov.w	r2, #32
    40d0:	f3ef 8311 	mrs	r3, BASEPRI
    40d4:	f382 8811 	msr	BASEPRI, r2
    40d8:	f3bf 8f6f 	isb	sy
    40dc:	e7fe      	b.n	40dc <z_cstart+0x5c>
    40de:	bf00      	nop
    40e0:	20005b38 	.word	0x20005b38
    40e4:	e000ed00 	.word	0xe000ed00

000040e8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    40e8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    40ea:	4c05      	ldr	r4, [pc, #20]	; (4100 <init_mem_slab_module+0x18>)
    40ec:	e003      	b.n	40f6 <init_mem_slab_module+0xe>
		create_free_list(slab);
    40ee:	4620      	mov	r0, r4
    40f0:	f003 fcc0 	bl	7a74 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    40f4:	341c      	adds	r4, #28
    40f6:	4b03      	ldr	r3, [pc, #12]	; (4104 <init_mem_slab_module+0x1c>)
    40f8:	429c      	cmp	r4, r3
    40fa:	d3f8      	bcc.n	40ee <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    40fc:	2000      	movs	r0, #0
    40fe:	bd10      	pop	{r4, pc}
    4100:	20005c20 	.word	0x20005c20
    4104:	20005c20 	.word	0x20005c20

00004108 <z_reschedule>:
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key)) {
    4108:	4608      	mov	r0, r1
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    410a:	b9c1      	cbnz	r1, 413e <z_reschedule+0x36>
{
    410c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    410e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    4112:	2b0d      	cmp	r3, #13
    4114:	d807      	bhi.n	4126 <z_reschedule+0x1e>
    4116:	b13b      	cbz	r3, 4128 <z_reschedule+0x20>
    4118:	4b0b      	ldr	r3, [pc, #44]	; (4148 <z_reschedule+0x40>)
    411a:	685b      	ldr	r3, [r3, #4]
    411c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4120:	d102      	bne.n	4128 <z_reschedule+0x20>
    4122:	2101      	movs	r1, #1
    4124:	e000      	b.n	4128 <z_reschedule+0x20>
    4126:	2101      	movs	r1, #1
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4128:	f011 0f01 	tst.w	r1, #1
    412c:	d004      	beq.n	4138 <z_reschedule+0x30>
	__asm__ volatile(
    412e:	f380 8811 	msr	BASEPRI, r0
    4132:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4136:	bd08      	pop	{r3, pc}
    4138:	f7fd ffba 	bl	20b0 <z_arch_swap>
    413c:	e7fb      	b.n	4136 <z_reschedule+0x2e>
    413e:	f381 8811 	msr	BASEPRI, r1
    4142:	f3bf 8f6f 	isb	sy
    4146:	4770      	bx	lr
    4148:	e000ed00 	.word	0xe000ed00

0000414c <z_reschedule_irqlock>:

void z_reschedule_irqlock(u32_t key)
{
    414c:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    414e:	4603      	mov	r3, r0
    4150:	b968      	cbnz	r0, 416e <z_reschedule_irqlock+0x22>
    4152:	f3ef 8205 	mrs	r2, IPSR
    4156:	2a0d      	cmp	r2, #13
    4158:	d807      	bhi.n	416a <z_reschedule_irqlock+0x1e>
    415a:	b16a      	cbz	r2, 4178 <z_reschedule_irqlock+0x2c>
    415c:	4a0a      	ldr	r2, [pc, #40]	; (4188 <z_reschedule_irqlock+0x3c>)
    415e:	6852      	ldr	r2, [r2, #4]
    4160:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4164:	d00a      	beq.n	417c <z_reschedule_irqlock+0x30>
    4166:	2200      	movs	r2, #0
    4168:	e000      	b.n	416c <z_reschedule_irqlock+0x20>
    416a:	2201      	movs	r2, #1
    416c:	b142      	cbz	r2, 4180 <z_reschedule_irqlock+0x34>
    416e:	f383 8811 	msr	BASEPRI, r3
    4172:	f3bf 8f6f 	isb	sy
	if (resched(key)) {
		z_swap_irqlock(key);
	} else {
		irq_unlock(key);
	}
}
    4176:	bd08      	pop	{r3, pc}
    4178:	2200      	movs	r2, #0
    417a:	e7f7      	b.n	416c <z_reschedule_irqlock+0x20>
    417c:	2201      	movs	r2, #1
    417e:	e7f5      	b.n	416c <z_reschedule_irqlock+0x20>
    4180:	4618      	mov	r0, r3
    4182:	f7fd ff95 	bl	20b0 <z_arch_swap>
    4186:	e7f6      	b.n	4176 <z_reschedule_irqlock+0x2a>
    4188:	e000ed00 	.word	0xe000ed00

0000418c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    418c:	4b0a      	ldr	r3, [pc, #40]	; (41b8 <z_priq_dumb_remove+0x2c>)
    418e:	4283      	cmp	r3, r0
    4190:	d009      	beq.n	41a6 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4192:	684b      	ldr	r3, [r1, #4]
    4194:	680a      	ldr	r2, [r1, #0]
    4196:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4198:	680b      	ldr	r3, [r1, #0]
    419a:	684a      	ldr	r2, [r1, #4]
    419c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    419e:	2300      	movs	r3, #0
    41a0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    41a2:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    41a4:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    41a6:	3b20      	subs	r3, #32
    41a8:	689b      	ldr	r3, [r3, #8]
    41aa:	428b      	cmp	r3, r1
    41ac:	d1f1      	bne.n	4192 <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	u8_t state = thread->base.thread_state;
    41ae:	7b4b      	ldrb	r3, [r1, #13]
    41b0:	f013 0f1f 	tst.w	r3, #31
    41b4:	d0ed      	beq.n	4192 <z_priq_dumb_remove+0x6>
    41b6:	e7f5      	b.n	41a4 <z_priq_dumb_remove+0x18>
    41b8:	20002b20 	.word	0x20002b20

000041bc <update_cache>:
{
    41bc:	b510      	push	{r4, lr}
    41be:	4604      	mov	r4, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    41c0:	480c      	ldr	r0, [pc, #48]	; (41f4 <update_cache+0x38>)
    41c2:	f003 fc91 	bl	7ae8 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    41c6:	4603      	mov	r3, r0
    41c8:	b158      	cbz	r0, 41e2 <update_cache+0x26>
	if (preempt_ok != 0) {
    41ca:	b93c      	cbnz	r4, 41dc <update_cache+0x20>
	if (z_is_thread_prevented_from_running(_current)) {
    41cc:	4a0a      	ldr	r2, [pc, #40]	; (41f8 <update_cache+0x3c>)
    41ce:	6892      	ldr	r2, [r2, #8]
    41d0:	7b51      	ldrb	r1, [r2, #13]
    41d2:	f011 0f1f 	tst.w	r1, #31
    41d6:	d101      	bne.n	41dc <update_cache+0x20>
	return node->next != NULL;
    41d8:	6999      	ldr	r1, [r3, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    41da:	b129      	cbz	r1, 41e8 <update_cache+0x2c>
		_kernel.ready_q.cache = th;
    41dc:	4a06      	ldr	r2, [pc, #24]	; (41f8 <update_cache+0x3c>)
    41de:	61d3      	str	r3, [r2, #28]
}
    41e0:	bd10      	pop	{r4, pc}
	return th ? th : _current_cpu->idle_thread;
    41e2:	4b05      	ldr	r3, [pc, #20]	; (41f8 <update_cache+0x3c>)
    41e4:	68db      	ldr	r3, [r3, #12]
    41e6:	e7f0      	b.n	41ca <update_cache+0xe>
	if (!IS_ENABLED(CONFIG_PREEMPT_ENABLED) &&
    41e8:	4904      	ldr	r1, [pc, #16]	; (41fc <update_cache+0x40>)
    41ea:	428a      	cmp	r2, r1
    41ec:	d0f6      	beq.n	41dc <update_cache+0x20>
		_kernel.ready_q.cache = _current;
    41ee:	4b02      	ldr	r3, [pc, #8]	; (41f8 <update_cache+0x3c>)
    41f0:	61da      	str	r2, [r3, #28]
    41f2:	e7f5      	b.n	41e0 <update_cache+0x24>
    41f4:	20002b20 	.word	0x20002b20
    41f8:	20002b00 	.word	0x20002b00
    41fc:	20002a28 	.word	0x20002a28

00004200 <z_add_thread_to_ready_q>:
{
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    4204:	2300      	movs	r3, #0
	__asm__ volatile(
    4206:	f04f 0220 	mov.w	r2, #32
    420a:	f3ef 8611 	mrs	r6, BASEPRI
    420e:	f382 8811 	msr	BASEPRI, r2
    4212:	f3bf 8f6f 	isb	sy
    4216:	e01d      	b.n	4254 <z_add_thread_to_ready_q+0x54>
	node->prev = successor->prev;
    4218:	6863      	ldr	r3, [r4, #4]
    421a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    421c:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    421e:	6863      	ldr	r3, [r4, #4]
    4220:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4222:	6065      	str	r5, [r4, #4]
    4224:	e00a      	b.n	423c <z_add_thread_to_ready_q+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4226:	2400      	movs	r4, #0
    4228:	e01a      	b.n	4260 <z_add_thread_to_ready_q+0x60>
	node->next = list;
    422a:	4b17      	ldr	r3, [pc, #92]	; (4288 <z_add_thread_to_ready_q+0x88>)
    422c:	f103 0220 	add.w	r2, r3, #32
    4230:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    4232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4234:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    4236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4238:	6015      	str	r5, [r2, #0]
	list->tail = node;
    423a:	625d      	str	r5, [r3, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
    423c:	7b6b      	ldrb	r3, [r5, #13]
    423e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4242:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    4244:	2000      	movs	r0, #0
    4246:	f7ff ffb9 	bl	41bc <update_cache>
	__asm__ volatile(
    424a:	f386 8811 	msr	BASEPRI, r6
    424e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4252:	2301      	movs	r3, #1
    4254:	b9b3      	cbnz	r3, 4284 <z_add_thread_to_ready_q+0x84>
	return list->head == list;
    4256:	4b0c      	ldr	r3, [pc, #48]	; (4288 <z_add_thread_to_ready_q+0x88>)
    4258:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    425c:	429c      	cmp	r4, r3
    425e:	d0e2      	beq.n	4226 <z_add_thread_to_ready_q+0x26>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4260:	2c00      	cmp	r4, #0
    4262:	d0e2      	beq.n	422a <z_add_thread_to_ready_q+0x2a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    4264:	4621      	mov	r1, r4
    4266:	4628      	mov	r0, r5
    4268:	f003 fc14 	bl	7a94 <z_is_t1_higher_prio_than_t2>
    426c:	2800      	cmp	r0, #0
    426e:	d1d3      	bne.n	4218 <z_add_thread_to_ready_q+0x18>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4270:	2c00      	cmp	r4, #0
    4272:	d0da      	beq.n	422a <z_add_thread_to_ready_q+0x2a>
	return (node == list->tail) ? NULL : node->next;
    4274:	4b04      	ldr	r3, [pc, #16]	; (4288 <z_add_thread_to_ready_q+0x88>)
    4276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4278:	429c      	cmp	r4, r3
    427a:	d0d6      	beq.n	422a <z_add_thread_to_ready_q+0x2a>
    427c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    427e:	2c00      	cmp	r4, #0
    4280:	d1ee      	bne.n	4260 <z_add_thread_to_ready_q+0x60>
    4282:	e7d2      	b.n	422a <z_add_thread_to_ready_q+0x2a>
}
    4284:	bd70      	pop	{r4, r5, r6, pc}
    4286:	bf00      	nop
    4288:	20002b00 	.word	0x20002b00

0000428c <z_remove_thread_from_ready_q>:
{
    428c:	b538      	push	{r3, r4, r5, lr}
    428e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    4290:	2300      	movs	r3, #0
	__asm__ volatile(
    4292:	f04f 0220 	mov.w	r2, #32
    4296:	f3ef 8511 	mrs	r5, BASEPRI
    429a:	f382 8811 	msr	BASEPRI, r2
    429e:	f3bf 8f6f 	isb	sy
    42a2:	e00c      	b.n	42be <z_remove_thread_from_ready_q+0x32>
		update_cache(thread == _current);
    42a4:	4b0d      	ldr	r3, [pc, #52]	; (42dc <z_remove_thread_from_ready_q+0x50>)
    42a6:	6898      	ldr	r0, [r3, #8]
    42a8:	42a0      	cmp	r0, r4
    42aa:	bf14      	ite	ne
    42ac:	2000      	movne	r0, #0
    42ae:	2001      	moveq	r0, #1
    42b0:	f7ff ff84 	bl	41bc <update_cache>
	__asm__ volatile(
    42b4:	f385 8811 	msr	BASEPRI, r5
    42b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    42bc:	2301      	movs	r3, #1
    42be:	b963      	cbnz	r3, 42da <z_remove_thread_from_ready_q+0x4e>
	return (thread->base.thread_state & state) != 0U;
    42c0:	7b63      	ldrb	r3, [r4, #13]
		if (z_is_thread_queued(thread)) {
    42c2:	f013 0f40 	tst.w	r3, #64	; 0x40
    42c6:	d0ed      	beq.n	42a4 <z_remove_thread_from_ready_q+0x18>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    42c8:	4621      	mov	r1, r4
    42ca:	4805      	ldr	r0, [pc, #20]	; (42e0 <z_remove_thread_from_ready_q+0x54>)
    42cc:	f7ff ff5e 	bl	418c <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    42d0:	7b63      	ldrb	r3, [r4, #13]
    42d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    42d6:	7363      	strb	r3, [r4, #13]
    42d8:	e7e4      	b.n	42a4 <z_remove_thread_from_ready_q+0x18>
}
    42da:	bd38      	pop	{r3, r4, r5, pc}
    42dc:	20002b00 	.word	0x20002b00
    42e0:	20002b20 	.word	0x20002b20

000042e4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    42e4:	4b01      	ldr	r3, [pc, #4]	; (42ec <z_impl_k_current_get+0x8>)
    42e6:	6898      	ldr	r0, [r3, #8]
    42e8:	4770      	bx	lr
    42ea:	bf00      	nop
    42ec:	20002b00 	.word	0x20002b00

000042f0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    42f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    42f2:	f04f 0320 	mov.w	r3, #32
    42f6:	f3ef 8411 	mrs	r4, BASEPRI
    42fa:	f383 8811 	msr	BASEPRI, r3
    42fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
    4302:	f003 fc35 	bl	7b70 <do_sem_give>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    4306:	4621      	mov	r1, r4
    4308:	4801      	ldr	r0, [pc, #4]	; (4310 <z_impl_k_sem_give+0x20>)
    430a:	f7ff fefd 	bl	4108 <z_reschedule>
}
    430e:	bd10      	pop	{r4, pc}
    4310:	20002b28 	.word	0x20002b28

00004314 <first>:
	return list->head == list;
    4314:	4b03      	ldr	r3, [pc, #12]	; (4324 <first+0x10>)
    4316:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4318:	4298      	cmp	r0, r3
    431a:	d000      	beq.n	431e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    431c:	4770      	bx	lr
    431e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4320:	e7fc      	b.n	431c <first+0x8>
    4322:	bf00      	nop
    4324:	20005b7c 	.word	0x20005b7c

00004328 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4328:	b130      	cbz	r0, 4338 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    432a:	4a04      	ldr	r2, [pc, #16]	; (433c <next+0x14>)
    432c:	6852      	ldr	r2, [r2, #4]
    432e:	4290      	cmp	r0, r2
    4330:	d001      	beq.n	4336 <next+0xe>
    4332:	6800      	ldr	r0, [r0, #0]
    4334:	4770      	bx	lr
    4336:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4338:	4770      	bx	lr
    433a:	bf00      	nop
    433c:	20005b7c 	.word	0x20005b7c

00004340 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    4340:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4342:	4b04      	ldr	r3, [pc, #16]	; (4354 <elapsed+0x14>)
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	b10b      	cbz	r3, 434c <elapsed+0xc>
    4348:	2000      	movs	r0, #0
}
    434a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    434c:	f7fd fe14 	bl	1f78 <z_clock_elapsed>
    4350:	e7fb      	b.n	434a <elapsed+0xa>
    4352:	bf00      	nop
    4354:	20002b28 	.word	0x20002b28

00004358 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4358:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    435c:	f04f 0320 	mov.w	r3, #32
    4360:	f3ef 8511 	mrs	r5, BASEPRI
    4364:	f383 8811 	msr	BASEPRI, r3
    4368:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    436c:	4b24      	ldr	r3, [pc, #144]	; (4400 <z_clock_announce+0xa8>)
    436e:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4370:	e01f      	b.n	43b2 <z_clock_announce+0x5a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4372:	4e24      	ldr	r6, [pc, #144]	; (4404 <z_clock_announce+0xac>)
    4374:	e9d6 0100 	ldrd	r0, r1, [r6]
    4378:	eb10 0b02 	adds.w	fp, r0, r2
    437c:	eb41 7ce2 	adc.w	ip, r1, r2, asr #31
    4380:	e9c6 bc00 	strd	fp, ip, [r6]
		announce_remaining -= dt;
    4384:	1a9b      	subs	r3, r3, r2
    4386:	4a1e      	ldr	r2, [pc, #120]	; (4400 <z_clock_announce+0xa8>)
    4388:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    438a:	2300      	movs	r3, #0
    438c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    438e:	4620      	mov	r0, r4
    4390:	f003 fc38 	bl	7c04 <remove_timeout>
	__asm__ volatile(
    4394:	f385 8811 	msr	BASEPRI, r5
    4398:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    439c:	68e3      	ldr	r3, [r4, #12]
    439e:	4620      	mov	r0, r4
    43a0:	4798      	blx	r3
	__asm__ volatile(
    43a2:	f04f 0320 	mov.w	r3, #32
    43a6:	f3ef 8511 	mrs	r5, BASEPRI
    43aa:	f383 8811 	msr	BASEPRI, r3
    43ae:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    43b2:	f7ff ffaf 	bl	4314 <first>
    43b6:	4604      	mov	r4, r0
    43b8:	b120      	cbz	r0, 43c4 <z_clock_announce+0x6c>
    43ba:	6882      	ldr	r2, [r0, #8]
    43bc:	4b10      	ldr	r3, [pc, #64]	; (4400 <z_clock_announce+0xa8>)
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	429a      	cmp	r2, r3
    43c2:	ddd6      	ble.n	4372 <z_clock_announce+0x1a>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    43c4:	b124      	cbz	r4, 43d0 <z_clock_announce+0x78>
		first()->dticks -= announce_remaining;
    43c6:	68a3      	ldr	r3, [r4, #8]
    43c8:	4a0d      	ldr	r2, [pc, #52]	; (4400 <z_clock_announce+0xa8>)
    43ca:	6812      	ldr	r2, [r2, #0]
    43cc:	1a9b      	subs	r3, r3, r2
    43ce:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    43d0:	480c      	ldr	r0, [pc, #48]	; (4404 <z_clock_announce+0xac>)
    43d2:	490b      	ldr	r1, [pc, #44]	; (4400 <z_clock_announce+0xa8>)
    43d4:	680c      	ldr	r4, [r1, #0]
    43d6:	e9d0 2300 	ldrd	r2, r3, [r0]
    43da:	eb12 0b04 	adds.w	fp, r2, r4
    43de:	eb43 7ce4 	adc.w	ip, r3, r4, asr #31
    43e2:	e9c0 bc00 	strd	fp, ip, [r0]
	announce_remaining = 0;
    43e6:	2400      	movs	r4, #0
    43e8:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    43ea:	f003 fc1e 	bl	7c2a <next_timeout>
    43ee:	4621      	mov	r1, r4
    43f0:	f7fd fd6c 	bl	1ecc <z_clock_set_timeout>
	__asm__ volatile(
    43f4:	f385 8811 	msr	BASEPRI, r5
    43f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    43fc:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    4400:	20002b28 	.word	0x20002b28
    4404:	20000000 	.word	0x20000000

00004408 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    4408:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    440a:	4c05      	ldr	r4, [pc, #20]	; (4420 <init_static_pools+0x18>)
    440c:	e003      	b.n	4416 <init_static_pools+0xe>
		k_mem_pool_init(p);
    440e:	4620      	mov	r0, r4
    4410:	f003 fc38 	bl	7c84 <k_mem_pool_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    4414:	341c      	adds	r4, #28
    4416:	4b03      	ldr	r3, [pc, #12]	; (4424 <init_static_pools+0x1c>)
    4418:	429c      	cmp	r4, r3
    441a:	d3f8      	bcc.n	440e <init_static_pools+0x6>
	}

	return 0;
}
    441c:	2000      	movs	r0, #0
    441e:	bd10      	pop	{r4, pc}
    4420:	20005c20 	.word	0x20005c20
    4424:	20005c20 	.word	0x20005c20

00004428 <do_boot>:
{
    4428:	b570      	push	{r4, r5, r6, lr}
    442a:	b082      	sub	sp, #8
    442c:	4605      	mov	r5, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    442e:	a901      	add	r1, sp, #4
    4430:	7900      	ldrb	r0, [r0, #4]
    4432:	f7fc f89b 	bl	56c <flash_device_base>
                                     rsp->br_image_off +
    4436:	68ac      	ldr	r4, [r5, #8]
    vt = (struct arm_vector_table *)(flash_base +
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
    443c:	682b      	ldr	r3, [r5, #0]
    443e:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
    4440:	1966      	adds	r6, r4, r5
	__asm__ volatile(
    4442:	f04f 0220 	mov.w	r2, #32
    4446:	f3ef 8311 	mrs	r3, BASEPRI
    444a:	f382 8811 	msr	BASEPRI, r2
    444e:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    4452:	f001 fa16 	bl	5882 <sys_clock_disable>
    __set_MSP(vt->msp);
    4456:	5963      	ldr	r3, [r4, r5]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4458:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
    445c:	6873      	ldr	r3, [r6, #4]
    445e:	4798      	blx	r3
}
    4460:	b002      	add	sp, #8
    4462:	bd70      	pop	{r4, r5, r6, pc}

00004464 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    4464:	2901      	cmp	r1, #1
    4466:	d009      	beq.n	447c <flash_area_id_from_multi_image_slot+0x18>
    4468:	2902      	cmp	r1, #2
    446a:	d005      	beq.n	4478 <flash_area_id_from_multi_image_slot+0x14>
    446c:	b111      	cbz	r1, 4474 <flash_area_id_from_multi_image_slot+0x10>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
    }

    return -EINVAL; /* flash_area_open will fail on that */
    446e:	f06f 0015 	mvn.w	r0, #21
    4472:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    4474:	2002      	movs	r0, #2
    4476:	4770      	bx	lr
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
    4478:	2007      	movs	r0, #7
    447a:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    447c:	2006      	movs	r0, #6
}
    447e:	4770      	bx	lr

00004480 <flash_area_erased_val>:
#define ERASED_VAL 0xff
uint8_t flash_area_erased_val(const struct flash_area *fap)
{
    (void)fap;
    return ERASED_VAL;
}
    4480:	20ff      	movs	r0, #255	; 0xff
    4482:	4770      	bx	lr

00004484 <flash_area_read_is_empty>:

int flash_area_read_is_empty(const struct flash_area *fa, uint32_t off,
        void *dst, uint32_t len)
{
    4484:	b538      	push	{r3, r4, r5, lr}
    4486:	4615      	mov	r5, r2
    4488:	461c      	mov	r4, r3
    uint8_t i;
    uint8_t *u8dst;
    int rc;

    rc = flash_area_read(fa, off, dst, len);
    448a:	f001 f88c 	bl	55a6 <flash_area_read>
    if (rc) {
    448e:	b960      	cbnz	r0, 44aa <flash_area_read_is_empty+0x26>
    4490:	4601      	mov	r1, r0
        return -1;
    }

    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    4492:	2300      	movs	r3, #0
    4494:	42a3      	cmp	r3, r4
    4496:	d205      	bcs.n	44a4 <flash_area_read_is_empty+0x20>
        if (u8dst[i] != ERASED_VAL) {
    4498:	5cea      	ldrb	r2, [r5, r3]
    449a:	2aff      	cmp	r2, #255	; 0xff
    449c:	d103      	bne.n	44a6 <flash_area_read_is_empty+0x22>
    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    449e:	3301      	adds	r3, #1
    44a0:	b2db      	uxtb	r3, r3
    44a2:	e7f7      	b.n	4494 <flash_area_read_is_empty+0x10>
            return 0;
        }
    }

    return 1;
    44a4:	2101      	movs	r1, #1
}
    44a6:	4608      	mov	r0, r1
    44a8:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    44aa:	f04f 31ff 	mov.w	r1, #4294967295
    44ae:	e7fa      	b.n	44a6 <flash_area_read_is_empty+0x22>

000044b0 <boot_status_internal_off>:
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    44b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    return (idx - BOOT_STATUS_IDX_0) * idx_sz +
    44b4:	3801      	subs	r0, #1
           (state - BOOT_STATUS_STATE_0) * elem_sz;
    44b6:	3901      	subs	r1, #1
    44b8:	fb02 f201 	mul.w	r2, r2, r1
}
    44bc:	fb03 2000 	mla	r0, r3, r0, r2
    44c0:	4770      	bx	lr

000044c2 <boot_copy_sz>:
{
    44c2:	b430      	push	{r4, r5}
    44c4:	4604      	mov	r4, r0
    return BOOT_SCRATCH_AREA(state)->fa_size;
    44c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
    44c8:	689d      	ldr	r5, [r3, #8]
    sz = 0;
    44ca:	2000      	movs	r0, #0
    for (i = last_sector_idx; i >= 0; i--) {
    44cc:	2900      	cmp	r1, #0
    44ce:	db09      	blt.n	44e4 <boot_copy_sz+0x22>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    44d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    44d6:	685b      	ldr	r3, [r3, #4]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    44d8:	4403      	add	r3, r0
        if (new_sz > scratch_sz) {
    44da:	429d      	cmp	r5, r3
    44dc:	d302      	bcc.n	44e4 <boot_copy_sz+0x22>
    for (i = last_sector_idx; i >= 0; i--) {
    44de:	3901      	subs	r1, #1
        sz = new_sz;
    44e0:	4618      	mov	r0, r3
    44e2:	e7f3      	b.n	44cc <boot_copy_sz+0xa>
    *out_first_sector_idx = i + 1;
    44e4:	3101      	adds	r1, #1
    44e6:	6011      	str	r1, [r2, #0]
}
    44e8:	bc30      	pop	{r4, r5}
    44ea:	4770      	bx	lr

000044ec <boot_write_sz>:
{
    44ec:	b538      	push	{r3, r4, r5, lr}
    44ee:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    44f0:	6a00      	ldr	r0, [r0, #32]
    44f2:	f001 f8d5 	bl	56a0 <flash_area_align>
    44f6:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    44f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    44fa:	f001 f8d1 	bl	56a0 <flash_area_align>
    if (align > elem_sz) {
    44fe:	4285      	cmp	r5, r0
    4500:	d200      	bcs.n	4504 <boot_write_sz+0x18>
}
    4502:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    4504:	4628      	mov	r0, r5
    4506:	e7fc      	b.n	4502 <boot_write_sz+0x16>

00004508 <boot_check_header_erased>:
{
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	b083      	sub	sp, #12
    450c:	4607      	mov	r7, r0
    450e:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    4510:	2000      	movs	r0, #0
    4512:	f7ff ffa7 	bl	4464 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    4516:	a901      	add	r1, sp, #4
    4518:	b2c0      	uxtb	r0, r0
    451a:	f7fd fc01 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    451e:	b9e8      	cbnz	r0, 455c <boot_check_header_erased+0x54>
    4520:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    4522:	9801      	ldr	r0, [sp, #4]
    4524:	f7ff ffac 	bl	4480 <flash_area_erased_val>
    4528:	4605      	mov	r5, r0
    flash_area_close(fap);
    452a:	9801      	ldr	r0, [sp, #4]
    452c:	f001 f83a 	bl	55a4 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    4530:	202c      	movs	r0, #44	; 0x2c
    4532:	fb00 7004 	mla	r0, r0, r4, r7
    for (i = 0; i < len; i++) {
    4536:	2300      	movs	r3, #0
    4538:	2b03      	cmp	r3, #3
    453a:	d805      	bhi.n	4548 <boot_check_header_erased+0x40>
        if (val != p[i]) {
    453c:	5cc2      	ldrb	r2, [r0, r3]
    453e:	4295      	cmp	r5, r2
    4540:	d107      	bne.n	4552 <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    4542:	3301      	adds	r3, #1
    4544:	b2db      	uxtb	r3, r3
    4546:	e7f7      	b.n	4538 <boot_check_header_erased+0x30>
    return true;
    4548:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    454a:	b123      	cbz	r3, 4556 <boot_check_header_erased+0x4e>
}
    454c:	4630      	mov	r0, r6
    454e:	b003      	add	sp, #12
    4550:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    4552:	2300      	movs	r3, #0
    4554:	e7f9      	b.n	454a <boot_check_header_erased+0x42>
        return -1;
    4556:	f04f 36ff 	mov.w	r6, #4294967295
    455a:	e7f7      	b.n	454c <boot_check_header_erased+0x44>
        return -1;
    455c:	f04f 36ff 	mov.w	r6, #4294967295
    4560:	e7f4      	b.n	454c <boot_check_header_erased+0x44>

00004562 <boot_initialize_area>:
{
    4562:	b510      	push	{r4, lr}
    4564:	b082      	sub	sp, #8
    num_sectors = BOOT_MAX_IMG_SECTORS;
    4566:	2380      	movs	r3, #128	; 0x80
    4568:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    456a:	2902      	cmp	r1, #2
    456c:	d005      	beq.n	457a <boot_initialize_area+0x18>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    456e:	2906      	cmp	r1, #6
    4570:	d011      	beq.n	4596 <boot_initialize_area+0x34>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    4572:	2907      	cmp	r1, #7
    4574:	d013      	beq.n	459e <boot_initialize_area+0x3c>
        return BOOT_EFLASH;
    4576:	2301      	movs	r3, #1
    4578:	e00a      	b.n	4590 <boot_initialize_area+0x2e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    457a:	6a42      	ldr	r2, [r0, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    457c:	f100 0428 	add.w	r4, r0, #40	; 0x28
    4580:	4608      	mov	r0, r1
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4582:	a901      	add	r1, sp, #4
    4584:	f7fd fbe0 	bl	1d48 <flash_area_get_sectors>
    if (rc != 0) {
    4588:	4603      	mov	r3, r0
    458a:	b908      	cbnz	r0, 4590 <boot_initialize_area+0x2e>
    *out_num_sectors = num_sectors;
    458c:	9a01      	ldr	r2, [sp, #4]
    458e:	6022      	str	r2, [r4, #0]
}
    4590:	4618      	mov	r0, r3
    4592:	b002      	add	sp, #8
    4594:	bd10      	pop	{r4, pc}
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    4596:	6d02      	ldr	r2, [r0, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    4598:	f100 0454 	add.w	r4, r0, #84	; 0x54
    459c:	e7f0      	b.n	4580 <boot_initialize_area+0x1e>
        out_sectors = state->scratch.sectors;
    459e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
        out_num_sectors = &state->scratch.num_sectors;
    45a0:	f100 0460 	add.w	r4, r0, #96	; 0x60
    45a4:	e7ec      	b.n	4580 <boot_initialize_area+0x1e>

000045a6 <boot_read_sectors>:
{
    45a6:	b538      	push	{r3, r4, r5, lr}
    45a8:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    45aa:	2102      	movs	r1, #2
    45ac:	f7ff ffd9 	bl	4562 <boot_initialize_area>
    if (rc != 0) {
    45b0:	b110      	cbz	r0, 45b8 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    45b2:	2401      	movs	r4, #1
}
    45b4:	4620      	mov	r0, r4
    45b6:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    45b8:	2106      	movs	r1, #6
    45ba:	4628      	mov	r0, r5
    45bc:	f7ff ffd1 	bl	4562 <boot_initialize_area>
    if (rc != 0) {
    45c0:	b108      	cbz	r0, 45c6 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    45c2:	2401      	movs	r4, #1
    45c4:	e7f6      	b.n	45b4 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    45c6:	2107      	movs	r1, #7
    45c8:	4628      	mov	r0, r5
    45ca:	f7ff ffca 	bl	4562 <boot_initialize_area>
    if (rc != 0) {
    45ce:	4604      	mov	r4, r0
    45d0:	b108      	cbz	r0, 45d6 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    45d2:	2401      	movs	r4, #1
    45d4:	e7ee      	b.n	45b4 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    45d6:	4628      	mov	r0, r5
    45d8:	f7ff ff88 	bl	44ec <boot_write_sz>
    45dc:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65
    return 0;
    45e0:	e7e8      	b.n	45b4 <boot_read_sectors+0xe>

000045e2 <boot_read_status>:
{
    45e2:	b570      	push	{r4, r5, r6, lr}
    45e4:	b082      	sub	sp, #8
    45e6:	4606      	mov	r6, r0
    45e8:	460d      	mov	r5, r1
    memset(bs, 0, sizeof *bs);
    45ea:	220c      	movs	r2, #12
    45ec:	2100      	movs	r1, #0
    45ee:	4628      	mov	r0, r5
    45f0:	f001 f9fc 	bl	59ec <memset>
    bs->idx = BOOT_STATUS_IDX_0;
    45f4:	2301      	movs	r3, #1
    45f6:	602b      	str	r3, [r5, #0]
    bs->state = BOOT_STATUS_STATE_0;
    45f8:	712b      	strb	r3, [r5, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    45fa:	71ab      	strb	r3, [r5, #6]
    status_loc = boot_status_source(state);
    45fc:	4630      	mov	r0, r6
    45fe:	f7fc f8c1 	bl	784 <boot_status_source>
    switch (status_loc) {
    4602:	2801      	cmp	r0, #1
    4604:	d005      	beq.n	4612 <boot_read_status+0x30>
    4606:	4604      	mov	r4, r0
    4608:	2802      	cmp	r0, #2
    460a:	d003      	beq.n	4614 <boot_read_status+0x32>
    460c:	b140      	cbz	r0, 4620 <boot_read_status+0x3e>
        return BOOT_EBADARGS;
    460e:	2407      	movs	r4, #7
    4610:	e006      	b.n	4620 <boot_read_status+0x3e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    4612:	2407      	movs	r4, #7
    rc = flash_area_open(area_id, &fap);
    4614:	a901      	add	r1, sp, #4
    4616:	b2e0      	uxtb	r0, r4
    4618:	f7fd fb82 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    461c:	b118      	cbz	r0, 4626 <boot_read_status+0x44>
        return BOOT_EFLASH;
    461e:	2401      	movs	r4, #1
}
    4620:	4620      	mov	r0, r4
    4622:	b002      	add	sp, #8
    4624:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_status_bytes(fap, state, bs);
    4626:	462a      	mov	r2, r5
    4628:	4631      	mov	r1, r6
    462a:	9801      	ldr	r0, [sp, #4]
    462c:	f7fc f976 	bl	91c <boot_read_status_bytes>
    if (rc == 0) {
    4630:	4604      	mov	r4, r0
    4632:	b118      	cbz	r0, 463c <boot_read_status+0x5a>
    flash_area_close(fap);
    4634:	9801      	ldr	r0, [sp, #4]
    4636:	f000 ffb5 	bl	55a4 <flash_area_close>
    return rc;
    463a:	e7f1      	b.n	4620 <boot_read_status+0x3e>
        off = boot_swap_info_off(fap);
    463c:	9801      	ldr	r0, [sp, #4]
    463e:	f000 f9f7 	bl	4a30 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    4642:	2301      	movs	r3, #1
    4644:	f10d 0203 	add.w	r2, sp, #3
    4648:	4601      	mov	r1, r0
    464a:	9801      	ldr	r0, [sp, #4]
    464c:	f7ff ff1a 	bl	4484 <flash_area_read_is_empty>
        if (rc == 1) {
    4650:	2801      	cmp	r0, #1
    4652:	d006      	beq.n	4662 <boot_read_status+0x80>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4658:	f003 030f 	and.w	r3, r3, #15
    465c:	71ab      	strb	r3, [r5, #6]
    465e:	4604      	mov	r4, r0
    4660:	e7e8      	b.n	4634 <boot_read_status+0x52>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    4662:	2301      	movs	r3, #1
    4664:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    4668:	4620      	mov	r0, r4
    466a:	e7f3      	b.n	4654 <boot_read_status+0x72>

0000466c <boot_read_image_size>:
{
    466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4670:	b082      	sub	sp, #8
    4672:	4680      	mov	r8, r0
    4674:	460d      	mov	r5, r1
    4676:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    4678:	2000      	movs	r0, #0
    467a:	f7ff fef3 	bl	4464 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    467e:	a901      	add	r1, sp, #4
    4680:	b2c0      	uxtb	r0, r0
    4682:	f7fd fb4d 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    4686:	b138      	cbz	r0, 4698 <boot_read_image_size+0x2c>
        rc = BOOT_EFLASH;
    4688:	2401      	movs	r4, #1
    flash_area_close(fap);
    468a:	9801      	ldr	r0, [sp, #4]
    468c:	f000 ff8a 	bl	55a4 <flash_area_close>
}
    4690:	4620      	mov	r0, r4
    4692:	b002      	add	sp, #8
    4694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    4698:	232c      	movs	r3, #44	; 0x2c
    469a:	fb03 8305 	mla	r3, r3, r5, r8
    469e:	891e      	ldrh	r6, [r3, #8]
    46a0:	68db      	ldr	r3, [r3, #12]
    46a2:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    46a4:	2304      	movs	r3, #4
    46a6:	466a      	mov	r2, sp
    46a8:	4631      	mov	r1, r6
    46aa:	9801      	ldr	r0, [sp, #4]
    46ac:	f000 ff7b 	bl	55a6 <flash_area_read>
    46b0:	4604      	mov	r4, r0
    46b2:	bb30      	cbnz	r0, 4702 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    46b4:	232c      	movs	r3, #44	; 0x2c
    46b6:	fb03 8505 	mla	r5, r3, r5, r8
    46ba:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    46bc:	f8bd 2000 	ldrh.w	r2, [sp]
    46c0:	f646 1308 	movw	r3, #26888	; 0x6908
    46c4:	429a      	cmp	r2, r3
    46c6:	d00c      	beq.n	46e2 <boot_read_image_size+0x76>
    } else if (protect_tlv_size != 0) {
    46c8:	b9ed      	cbnz	r5, 4706 <boot_read_image_size+0x9a>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    46ca:	f8bd 2000 	ldrh.w	r2, [sp]
    46ce:	f646 1307 	movw	r3, #26887	; 0x6907
    46d2:	429a      	cmp	r2, r3
    46d4:	d119      	bne.n	470a <boot_read_image_size+0x9e>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    46d6:	442e      	add	r6, r5
    46d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    46dc:	441e      	add	r6, r3
    46de:	603e      	str	r6, [r7, #0]
    46e0:	e7d3      	b.n	468a <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    46e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    46e6:	428d      	cmp	r5, r1
    46e8:	d001      	beq.n	46ee <boot_read_image_size+0x82>
            rc = BOOT_EBADIMAGE;
    46ea:	2403      	movs	r4, #3
    46ec:	e7cd      	b.n	468a <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    46ee:	2304      	movs	r3, #4
    46f0:	466a      	mov	r2, sp
    46f2:	4431      	add	r1, r6
    46f4:	9801      	ldr	r0, [sp, #4]
    46f6:	f000 ff56 	bl	55a6 <flash_area_read>
    46fa:	2800      	cmp	r0, #0
    46fc:	d0e5      	beq.n	46ca <boot_read_image_size+0x5e>
            rc = BOOT_EFLASH;
    46fe:	2401      	movs	r4, #1
    4700:	e7c3      	b.n	468a <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    4702:	2401      	movs	r4, #1
    4704:	e7c1      	b.n	468a <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    4706:	2403      	movs	r4, #3
    4708:	e7bf      	b.n	468a <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    470a:	2403      	movs	r4, #3
    470c:	e7bd      	b.n	468a <boot_read_image_size+0x1e>

0000470e <boot_read_image_header>:
{
    470e:	b510      	push	{r4, lr}
    4710:	b082      	sub	sp, #8
    4712:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    4714:	2000      	movs	r0, #0
    4716:	f7ff fea5 	bl	4464 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    471a:	a901      	add	r1, sp, #4
    471c:	b2c0      	uxtb	r0, r0
    471e:	f7fd faff 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    4722:	b130      	cbz	r0, 4732 <boot_read_image_header+0x24>
        rc = BOOT_EFLASH;
    4724:	2401      	movs	r4, #1
    flash_area_close(fap);
    4726:	9801      	ldr	r0, [sp, #4]
    4728:	f000 ff3c 	bl	55a4 <flash_area_close>
}
    472c:	4620      	mov	r0, r4
    472e:	b002      	add	sp, #8
    4730:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    4732:	2320      	movs	r3, #32
    4734:	4622      	mov	r2, r4
    4736:	2100      	movs	r1, #0
    4738:	9801      	ldr	r0, [sp, #4]
    473a:	f000 ff34 	bl	55a6 <flash_area_read>
    if (rc != 0) {
    473e:	4604      	mov	r4, r0
    4740:	2800      	cmp	r0, #0
    4742:	d0f0      	beq.n	4726 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    4744:	2401      	movs	r4, #1
    4746:	e7ee      	b.n	4726 <boot_read_image_header+0x18>

00004748 <boot_read_image_headers>:
{
    4748:	b570      	push	{r4, r5, r6, lr}
    474a:	4605      	mov	r5, r0
    474c:	460e      	mov	r6, r1
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    474e:	2400      	movs	r4, #0
    4750:	2c01      	cmp	r4, #1
    4752:	dc0f      	bgt.n	4774 <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i));
    4754:	222c      	movs	r2, #44	; 0x2c
    4756:	fb02 5204 	mla	r2, r2, r4, r5
    475a:	4621      	mov	r1, r4
    475c:	4628      	mov	r0, r5
    475e:	f7ff ffd6 	bl	470e <boot_read_image_header>
        if (rc != 0) {
    4762:	4603      	mov	r3, r0
    4764:	b908      	cbnz	r0, 476a <boot_read_image_headers+0x22>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    4766:	3401      	adds	r4, #1
    4768:	e7f2      	b.n	4750 <boot_read_image_headers+0x8>
            if (i > 0 && !require_all) {
    476a:	2c00      	cmp	r4, #0
    476c:	dd03      	ble.n	4776 <boot_read_image_headers+0x2e>
    476e:	b916      	cbnz	r6, 4776 <boot_read_image_headers+0x2e>
                return 0;
    4770:	2300      	movs	r3, #0
    4772:	e000      	b.n	4776 <boot_read_image_headers+0x2e>
    return 0;
    4774:	2300      	movs	r3, #0
}
    4776:	4618      	mov	r0, r3
    4778:	bd70      	pop	{r4, r5, r6, pc}

0000477a <boot_erase_trailer_sectors>:
{
    477a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    477e:	4606      	mov	r6, r0
    4780:	460f      	mov	r7, r1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    4782:	2100      	movs	r1, #0
    4784:	4608      	mov	r0, r1
    4786:	f7ff fe6d 	bl	4464 <flash_area_id_from_multi_image_slot>
    478a:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    478c:	2101      	movs	r1, #1
    478e:	2000      	movs	r0, #0
    4790:	f7ff fe68 	bl	4464 <flash_area_id_from_multi_image_slot>
    if (fap->fa_id == fa_id_primary) {
    4794:	783b      	ldrb	r3, [r7, #0]
    4796:	429c      	cmp	r4, r3
    4798:	d026      	beq.n	47e8 <boot_erase_trailer_sectors+0x6e>
    } else if (fap->fa_id == fa_id_secondary) {
    479a:	4298      	cmp	r0, r3
    479c:	d001      	beq.n	47a2 <boot_erase_trailer_sectors+0x28>
        return BOOT_EFLASH;
    479e:	2001      	movs	r0, #1
    47a0:	e020      	b.n	47e4 <boot_erase_trailer_sectors+0x6a>
        slot = BOOT_SECONDARY_SLOT;
    47a2:	2301      	movs	r3, #1
    sector = boot_img_num_sectors(state, slot) - 1;
    47a4:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    47a6:	222c      	movs	r2, #44	; 0x2c
    47a8:	fb02 6303 	mla	r3, r2, r3, r6
    47ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    47ae:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    47b0:	f896 0065 	ldrb.w	r0, [r6, #101]	; 0x65
    47b4:	f000 f91b 	bl	49ee <boot_trailer_sz>
    47b8:	4680      	mov	r8, r0
    total_sz = 0;
    47ba:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    47bc:	232c      	movs	r3, #44	; 0x2c
    47be:	fb03 6309 	mla	r3, r3, r9, r6
    47c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47c4:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    47c8:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    47cc:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    47d0:	681b      	ldr	r3, [r3, #0]
    return flash_area_erase(fap, off, sz);
    47d2:	4652      	mov	r2, sl
    47d4:	1ac9      	subs	r1, r1, r3
    47d6:	4638      	mov	r0, r7
    47d8:	f000 ff34 	bl	5644 <flash_area_erase>
        sector--;
    47dc:	3c01      	subs	r4, #1
        total_sz += sz;
    47de:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    47e0:	45a8      	cmp	r8, r5
    47e2:	d8eb      	bhi.n	47bc <boot_erase_trailer_sectors+0x42>
}
    47e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    47e8:	2300      	movs	r3, #0
    47ea:	e7db      	b.n	47a4 <boot_erase_trailer_sectors+0x2a>

000047ec <boot_set_copy_done>:
{
    47ec:	b510      	push	{r4, lr}
    47ee:	b082      	sub	sp, #8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    47f0:	a901      	add	r1, sp, #4
    47f2:	2002      	movs	r0, #2
    47f4:	f7fd fa94 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    47f8:	b118      	cbz	r0, 4802 <boot_set_copy_done+0x16>
        return BOOT_EFLASH;
    47fa:	2401      	movs	r4, #1
}
    47fc:	4620      	mov	r0, r4
    47fe:	b002      	add	sp, #8
    4800:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    4802:	9801      	ldr	r0, [sp, #4]
    4804:	f000 f9a7 	bl	4b56 <boot_write_copy_done>
    4808:	4604      	mov	r4, r0
    flash_area_close(fap);
    480a:	9801      	ldr	r0, [sp, #4]
    480c:	f000 feca 	bl	55a4 <flash_area_close>
    return rc;
    4810:	e7f4      	b.n	47fc <boot_set_copy_done+0x10>

00004812 <boot_set_image_ok>:
{
    4812:	b510      	push	{r4, lr}
    4814:	b084      	sub	sp, #16
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4816:	a903      	add	r1, sp, #12
    4818:	2002      	movs	r0, #2
    481a:	f7fd fa81 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    481e:	b118      	cbz	r0, 4828 <boot_set_image_ok+0x16>
        return BOOT_EFLASH;
    4820:	2401      	movs	r4, #1
}
    4822:	4620      	mov	r0, r4
    4824:	b004      	add	sp, #16
    4826:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    4828:	a901      	add	r1, sp, #4
    482a:	9803      	ldr	r0, [sp, #12]
    482c:	f000 f903 	bl	4a36 <boot_read_swap_state>
    if (rc != 0) {
    4830:	4604      	mov	r4, r0
    4832:	b940      	cbnz	r0, 4846 <boot_set_image_ok+0x34>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    4834:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4838:	2b03      	cmp	r3, #3
    483a:	d105      	bne.n	4848 <boot_set_image_ok+0x36>
        rc = boot_write_image_ok(fap);
    483c:	9803      	ldr	r0, [sp, #12]
    483e:	f000 f991 	bl	4b64 <boot_write_image_ok>
    4842:	4604      	mov	r4, r0
    4844:	e000      	b.n	4848 <boot_set_image_ok+0x36>
        rc = BOOT_EFLASH;
    4846:	2401      	movs	r4, #1
    flash_area_close(fap);
    4848:	9803      	ldr	r0, [sp, #12]
    484a:	f000 feab 	bl	55a4 <flash_area_close>
    return rc;
    484e:	e7e8      	b.n	4822 <boot_set_image_ok+0x10>

00004850 <boot_validated_swap_type>:
{
    4850:	b570      	push	{r4, r5, r6, lr}
    4852:	4605      	mov	r5, r0
    4854:	460e      	mov	r6, r1
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    4856:	2000      	movs	r0, #0
    4858:	f7fc fcee 	bl	1238 <boot_swap_type_multi>
    485c:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    485e:	2802      	cmp	r0, #2
    4860:	d005      	beq.n	486e <boot_validated_swap_type+0x1e>
    4862:	2804      	cmp	r0, #4
    4864:	d003      	beq.n	486e <boot_validated_swap_type+0x1e>
    4866:	2803      	cmp	r0, #3
    4868:	d001      	beq.n	486e <boot_validated_swap_type+0x1e>
}
    486a:	4620      	mov	r0, r4
    486c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    486e:	4632      	mov	r2, r6
    4870:	2101      	movs	r1, #1
    4872:	4628      	mov	r0, r5
    4874:	f7fc f902 	bl	a7c <boot_validate_slot>
        if (rc == 1) {
    4878:	2801      	cmp	r0, #1
    487a:	d003      	beq.n	4884 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    487c:	2800      	cmp	r0, #0
    487e:	d0f4      	beq.n	486a <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    4880:	2405      	movs	r4, #5
    return swap_type;
    4882:	e7f2      	b.n	486a <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    4884:	4604      	mov	r4, r0
    4886:	e7f0      	b.n	486a <boot_validated_swap_type+0x1a>

00004888 <boot_write_status>:
{
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	b084      	sub	sp, #16
    488c:	4606      	mov	r6, r0
    488e:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    4890:	794b      	ldrb	r3, [r1, #5]
    4892:	b15b      	cbz	r3, 48ac <boot_write_status+0x24>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    4894:	2007      	movs	r0, #7
    rc = flash_area_open(area_id, &fap);
    4896:	a903      	add	r1, sp, #12
    4898:	f7fd fa42 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    489c:	b140      	cbz	r0, 48b0 <boot_write_status+0x28>
        rc = BOOT_EFLASH;
    489e:	2401      	movs	r4, #1
    flash_area_close(fap);
    48a0:	9803      	ldr	r0, [sp, #12]
    48a2:	f000 fe7f 	bl	55a4 <flash_area_close>
}
    48a6:	4620      	mov	r0, r4
    48a8:	b004      	add	sp, #16
    48aa:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    48ac:	2002      	movs	r0, #2
    48ae:	e7f2      	b.n	4896 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    48b0:	9803      	ldr	r0, [sp, #12]
    48b2:	f000 f8b4 	bl	4a1e <boot_status_off>
    48b6:	4605      	mov	r5, r0
          boot_status_internal_off(bs->idx, bs->state, BOOT_WRITE_SZ(state));
    48b8:	f896 2065 	ldrb.w	r2, [r6, #101]	; 0x65
    48bc:	7921      	ldrb	r1, [r4, #4]
    48be:	6820      	ldr	r0, [r4, #0]
    48c0:	f7ff fdf6 	bl	44b0 <boot_status_internal_off>
    off = boot_status_off(fap) +
    48c4:	4405      	add	r5, r0
    align = flash_area_align(fap);
    48c6:	9803      	ldr	r0, [sp, #12]
    48c8:	f000 feea 	bl	56a0 <flash_area_align>
    48cc:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    48ce:	9803      	ldr	r0, [sp, #12]
    48d0:	f7ff fdd6 	bl	4480 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    48d4:	2208      	movs	r2, #8
    48d6:	4601      	mov	r1, r0
    48d8:	a801      	add	r0, sp, #4
    48da:	f001 f887 	bl	59ec <memset>
    buf[0] = bs->state;
    48de:	7923      	ldrb	r3, [r4, #4]
    48e0:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    48e4:	4633      	mov	r3, r6
    48e6:	aa01      	add	r2, sp, #4
    48e8:	4629      	mov	r1, r5
    48ea:	9803      	ldr	r0, [sp, #12]
    48ec:	f000 fe7a 	bl	55e4 <flash_area_write>
    if (rc != 0) {
    48f0:	4604      	mov	r4, r0
    48f2:	2800      	cmp	r0, #0
    48f4:	d0d4      	beq.n	48a0 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    48f6:	2401      	movs	r4, #1
    48f8:	e7d2      	b.n	48a0 <boot_write_status+0x18>

000048fa <boot_perform_update>:
{
    48fa:	b538      	push	{r3, r4, r5, lr}
    48fc:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    48fe:	f7fc fa53 	bl	da8 <boot_swap_image>
    4902:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    4904:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    4908:	1ee3      	subs	r3, r4, #3
    490a:	b2db      	uxtb	r3, r3
    490c:	2b01      	cmp	r3, #1
    490e:	d90f      	bls.n	4930 <boot_perform_update+0x36>
    if (BOOT_IS_UPGRADE(swap_type)) {
    4910:	2c02      	cmp	r4, #2
    4912:	d003      	beq.n	491c <boot_perform_update+0x22>
    4914:	2c04      	cmp	r4, #4
    4916:	d001      	beq.n	491c <boot_perform_update+0x22>
    4918:	2c03      	cmp	r4, #3
    491a:	d107      	bne.n	492c <boot_perform_update+0x32>
        rc = boot_set_copy_done(BOOT_CURR_IMG(state));
    491c:	2000      	movs	r0, #0
    491e:	f7ff ff65 	bl	47ec <boot_set_copy_done>
        if (rc != 0) {
    4922:	4602      	mov	r2, r0
    4924:	b110      	cbz	r0, 492c <boot_perform_update+0x32>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    4926:	23ff      	movs	r3, #255	; 0xff
    4928:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    492c:	4610      	mov	r0, r2
    492e:	bd38      	pop	{r3, r4, r5, pc}
        rc = boot_set_image_ok(BOOT_CURR_IMG(state));
    4930:	2000      	movs	r0, #0
    4932:	f7ff ff6e 	bl	4812 <boot_set_image_ok>
        if (rc != 0) {
    4936:	4602      	mov	r2, r0
    4938:	2800      	cmp	r0, #0
    493a:	d0e9      	beq.n	4910 <boot_perform_update+0x16>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    493c:	24ff      	movs	r4, #255	; 0xff
    493e:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    4942:	e7e7      	b.n	4914 <boot_perform_update+0x1a>

00004944 <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    4944:	2801      	cmp	r0, #1
    4946:	d101      	bne.n	494c <boot_flag_decode+0x8>
    return BOOT_FLAG_SET;
    4948:	2001      	movs	r0, #1
}
    494a:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    494c:	2002      	movs	r0, #2
    494e:	4770      	bx	lr

00004950 <boot_write_trailer>:
{
    4950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4954:	b083      	sub	sp, #12
    4956:	4606      	mov	r6, r0
    4958:	460f      	mov	r7, r1
    495a:	4690      	mov	r8, r2
    495c:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    495e:	f000 fe9f 	bl	56a0 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    4962:	2c08      	cmp	r4, #8
    4964:	d822      	bhi.n	49ac <boot_write_trailer+0x5c>
    4966:	4605      	mov	r5, r0
    4968:	2808      	cmp	r0, #8
    496a:	d822      	bhi.n	49b2 <boot_write_trailer+0x62>
    erased_val = flash_area_erased_val(fap);
    496c:	4630      	mov	r0, r6
    496e:	f7ff fd87 	bl	4480 <flash_area_erased_val>
    4972:	4681      	mov	r9, r0
    if (align < inlen) {
    4974:	42a5      	cmp	r5, r4
    4976:	d200      	bcs.n	497a <boot_write_trailer+0x2a>
        align = inlen;
    4978:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    497a:	4622      	mov	r2, r4
    497c:	4641      	mov	r1, r8
    497e:	4668      	mov	r0, sp
    4980:	f001 f80f 	bl	59a2 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    4984:	1b2a      	subs	r2, r5, r4
    4986:	4649      	mov	r1, r9
    4988:	eb0d 0004 	add.w	r0, sp, r4
    498c:	f001 f82e 	bl	59ec <memset>
    rc = flash_area_write(fap, off, buf, align);
    4990:	462b      	mov	r3, r5
    4992:	466a      	mov	r2, sp
    4994:	4639      	mov	r1, r7
    4996:	4630      	mov	r0, r6
    4998:	f000 fe24 	bl	55e4 <flash_area_write>
    if (rc != 0) {
    499c:	4603      	mov	r3, r0
    499e:	b918      	cbnz	r0, 49a8 <boot_write_trailer+0x58>
}
    49a0:	4618      	mov	r0, r3
    49a2:	b003      	add	sp, #12
    49a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    49a8:	2301      	movs	r3, #1
    49aa:	e7f9      	b.n	49a0 <boot_write_trailer+0x50>
        return -1;
    49ac:	f04f 33ff 	mov.w	r3, #4294967295
    49b0:	e7f6      	b.n	49a0 <boot_write_trailer+0x50>
    49b2:	f04f 33ff 	mov.w	r3, #4294967295
    49b6:	e7f3      	b.n	49a0 <boot_write_trailer+0x50>

000049b8 <boot_write_trailer_flag>:
{
    49b8:	b510      	push	{r4, lr}
    49ba:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    49bc:	ac02      	add	r4, sp, #8
    49be:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    49c2:	2301      	movs	r3, #1
    49c4:	4622      	mov	r2, r4
    49c6:	f7ff ffc3 	bl	4950 <boot_write_trailer>
}
    49ca:	b002      	add	sp, #8
    49cc:	bd10      	pop	{r4, pc}

000049ce <boot_magic_compatible_check>:
    switch (tbl_val) {
    49ce:	2804      	cmp	r0, #4
    49d0:	d00b      	beq.n	49ea <boot_magic_compatible_check+0x1c>
    49d2:	2805      	cmp	r0, #5
    49d4:	d104      	bne.n	49e0 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    49d6:	f111 30ff 	adds.w	r0, r1, #4294967295
    49da:	bf18      	it	ne
    49dc:	2001      	movne	r0, #1
    49de:	4770      	bx	lr
        return tbl_val == val;
    49e0:	4288      	cmp	r0, r1
    49e2:	bf14      	ite	ne
    49e4:	2000      	movne	r0, #0
    49e6:	2001      	moveq	r0, #1
    49e8:	4770      	bx	lr
        return 1;
    49ea:	2001      	movs	r0, #1
}
    49ec:	4770      	bx	lr

000049ee <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz +
    49ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    49f2:	01c3      	lsls	r3, r0, #7
}
    49f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
    49f8:	4770      	bx	lr

000049fa <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    49fa:	780b      	ldrb	r3, [r1, #0]
    49fc:	2b07      	cmp	r3, #7
    49fe:	d006      	beq.n	4a0e <boot_status_entries+0x14>
    } else if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    4a00:	2b02      	cmp	r3, #2
    4a02:	d006      	beq.n	4a12 <boot_status_entries+0x18>
    4a04:	2b06      	cmp	r3, #6
    4a06:	d107      	bne.n	4a18 <boot_status_entries+0x1e>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    4a08:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4a0c:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    4a0e:	2003      	movs	r0, #3
    4a10:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    4a12:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4a16:	4770      	bx	lr
    return -1;
    4a18:	f04f 30ff 	mov.w	r0, #4294967295
}
    4a1c:	4770      	bx	lr

00004a1e <boot_status_off>:
{
    4a1e:	b510      	push	{r4, lr}
    4a20:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    4a22:	f000 fe3d 	bl	56a0 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    4a26:	f7ff ffe2 	bl	49ee <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    4a2a:	68a3      	ldr	r3, [r4, #8]
}
    4a2c:	1a18      	subs	r0, r3, r0
    4a2e:	bd10      	pop	{r4, pc}

00004a30 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    4a30:	6880      	ldr	r0, [r0, #8]
}
    4a32:	3828      	subs	r0, #40	; 0x28
    4a34:	4770      	bx	lr

00004a36 <boot_read_swap_state>:
{
    4a36:	b530      	push	{r4, r5, lr}
    4a38:	b087      	sub	sp, #28
    4a3a:	4604      	mov	r4, r0
    4a3c:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    4a3e:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    4a40:	2310      	movs	r3, #16
    4a42:	aa02      	add	r2, sp, #8
    4a44:	3910      	subs	r1, #16
    4a46:	f7ff fd1d 	bl	4484 <flash_area_read_is_empty>
    if (rc < 0) {
    4a4a:	2800      	cmp	r0, #0
    4a4c:	db4a      	blt.n	4ae4 <boot_read_swap_state+0xae>
    if (rc == 1) {
    4a4e:	2801      	cmp	r0, #1
    4a50:	d13c      	bne.n	4acc <boot_read_swap_state+0x96>
        state->magic = BOOT_MAGIC_UNSET;
    4a52:	2303      	movs	r3, #3
    4a54:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    4a56:	4620      	mov	r0, r4
    4a58:	f7ff ffea 	bl	4a30 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    4a5c:	2301      	movs	r3, #1
    4a5e:	f10d 0207 	add.w	r2, sp, #7
    4a62:	4601      	mov	r1, r0
    4a64:	4620      	mov	r0, r4
    4a66:	f7ff fd0d 	bl	4484 <flash_area_read_is_empty>
    if (rc < 0) {
    4a6a:	2800      	cmp	r0, #0
    4a6c:	db3d      	blt.n	4aea <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a72:	f003 020f 	and.w	r2, r3, #15
    4a76:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4a78:	091b      	lsrs	r3, r3, #4
    4a7a:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    4a7c:	2801      	cmp	r0, #1
    4a7e:	d001      	beq.n	4a84 <boot_read_swap_state+0x4e>
    4a80:	2a04      	cmp	r2, #4
    4a82:	d903      	bls.n	4a8c <boot_read_swap_state+0x56>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    4a84:	2301      	movs	r3, #1
    4a86:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    4a88:	2300      	movs	r3, #0
    4a8a:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    4a8c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    4a8e:	2301      	movs	r3, #1
    4a90:	1caa      	adds	r2, r5, #2
    4a92:	3920      	subs	r1, #32
    4a94:	4620      	mov	r0, r4
    4a96:	f7ff fcf5 	bl	4484 <flash_area_read_is_empty>
    if (rc < 0) {
    4a9a:	2800      	cmp	r0, #0
    4a9c:	db27      	blt.n	4aee <boot_read_swap_state+0xb8>
    if (rc == 1) {
    4a9e:	2801      	cmp	r0, #1
    4aa0:	d019      	beq.n	4ad6 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    4aa2:	78a8      	ldrb	r0, [r5, #2]
    4aa4:	f7ff ff4e 	bl	4944 <boot_flag_decode>
    4aa8:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    4aaa:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    4aac:	2301      	movs	r3, #1
    4aae:	1cea      	adds	r2, r5, #3
    4ab0:	3918      	subs	r1, #24
    4ab2:	4620      	mov	r0, r4
    4ab4:	f7ff fce6 	bl	4484 <flash_area_read_is_empty>
    if (rc < 0) {
    4ab8:	2800      	cmp	r0, #0
    4aba:	db1a      	blt.n	4af2 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    4abc:	2801      	cmp	r0, #1
    4abe:	d00d      	beq.n	4adc <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    4ac0:	78e8      	ldrb	r0, [r5, #3]
    4ac2:	f7ff ff3f 	bl	4944 <boot_flag_decode>
    4ac6:	70e8      	strb	r0, [r5, #3]
    return 0;
    4ac8:	2000      	movs	r0, #0
    4aca:	e00c      	b.n	4ae6 <boot_read_swap_state+0xb0>
        state->magic = boot_magic_decode(magic);
    4acc:	a802      	add	r0, sp, #8
    4ace:	f7fc fb5f 	bl	1190 <boot_magic_decode>
    4ad2:	7028      	strb	r0, [r5, #0]
    4ad4:	e7bf      	b.n	4a56 <boot_read_swap_state+0x20>
        state->copy_done = BOOT_FLAG_UNSET;
    4ad6:	2303      	movs	r3, #3
    4ad8:	70ab      	strb	r3, [r5, #2]
    4ada:	e7e6      	b.n	4aaa <boot_read_swap_state+0x74>
        state->image_ok = BOOT_FLAG_UNSET;
    4adc:	2303      	movs	r3, #3
    4ade:	70eb      	strb	r3, [r5, #3]
    return 0;
    4ae0:	2000      	movs	r0, #0
    4ae2:	e000      	b.n	4ae6 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4ae4:	2001      	movs	r0, #1
}
    4ae6:	b007      	add	sp, #28
    4ae8:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    4aea:	2001      	movs	r0, #1
    4aec:	e7fb      	b.n	4ae6 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4aee:	2001      	movs	r0, #1
    4af0:	e7f9      	b.n	4ae6 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4af2:	2001      	movs	r0, #1
    4af4:	e7f7      	b.n	4ae6 <boot_read_swap_state+0xb0>

00004af6 <boot_read_swap_state_by_id>:
{
    4af6:	b510      	push	{r4, lr}
    4af8:	b082      	sub	sp, #8
    4afa:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    4afc:	a901      	add	r1, sp, #4
    4afe:	b2c0      	uxtb	r0, r0
    4b00:	f7fd f90e 	bl	1d20 <flash_area_open>
    if (rc != 0) {
    4b04:	b118      	cbz	r0, 4b0e <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    4b06:	2401      	movs	r4, #1
}
    4b08:	4620      	mov	r0, r4
    4b0a:	b002      	add	sp, #8
    4b0c:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    4b0e:	4621      	mov	r1, r4
    4b10:	9801      	ldr	r0, [sp, #4]
    4b12:	f7ff ff90 	bl	4a36 <boot_read_swap_state>
    4b16:	4604      	mov	r4, r0
    flash_area_close(fap);
    4b18:	9801      	ldr	r0, [sp, #4]
    4b1a:	f000 fd43 	bl	55a4 <flash_area_close>
    return rc;
    4b1e:	e7f3      	b.n	4b08 <boot_read_swap_state_by_id+0x12>

00004b20 <boot_read_swap_size>:
{
    4b20:	b530      	push	{r4, r5, lr}
    4b22:	b083      	sub	sp, #12
    4b24:	460d      	mov	r5, r1
    rc = boot_find_status(image_index, &fap);
    4b26:	a901      	add	r1, sp, #4
    4b28:	f7fc fb3e 	bl	11a8 <boot_find_status>
    if (rc == 0) {
    4b2c:	4604      	mov	r4, r0
    4b2e:	b110      	cbz	r0, 4b36 <boot_read_swap_size+0x16>
}
    4b30:	4620      	mov	r0, r4
    4b32:	b003      	add	sp, #12
    4b34:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    4b36:	9c01      	ldr	r4, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    4b38:	4620      	mov	r0, r4
    4b3a:	f7ff ff79 	bl	4a30 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    4b3e:	2304      	movs	r3, #4
    4b40:	462a      	mov	r2, r5
    4b42:	f1a0 0108 	sub.w	r1, r0, #8
    4b46:	4620      	mov	r0, r4
    4b48:	f000 fd2d 	bl	55a6 <flash_area_read>
    4b4c:	4604      	mov	r4, r0
        flash_area_close(fap);
    4b4e:	9801      	ldr	r0, [sp, #4]
    4b50:	f000 fd28 	bl	55a4 <flash_area_close>
    return rc;
    4b54:	e7ec      	b.n	4b30 <boot_read_swap_size+0x10>

00004b56 <boot_write_copy_done>:
{
    4b56:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    4b58:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    4b5a:	2201      	movs	r2, #1
    4b5c:	3920      	subs	r1, #32
    4b5e:	f7ff ff2b 	bl	49b8 <boot_write_trailer_flag>
}
    4b62:	bd08      	pop	{r3, pc}

00004b64 <boot_write_image_ok>:
{
    4b64:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    4b66:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    4b68:	2201      	movs	r2, #1
    4b6a:	3918      	subs	r1, #24
    4b6c:	f7ff ff24 	bl	49b8 <boot_write_trailer_flag>
}
    4b70:	bd08      	pop	{r3, pc}

00004b72 <boot_write_swap_info>:
{
    4b72:	b530      	push	{r4, r5, lr}
    4b74:	b083      	sub	sp, #12
    4b76:	4605      	mov	r5, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    4b78:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    4b7c:	ac02      	add	r4, sp, #8
    4b7e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    off = boot_swap_info_off(fap);
    4b82:	f7ff ff55 	bl	4a30 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    4b86:	2301      	movs	r3, #1
    4b88:	4622      	mov	r2, r4
    4b8a:	4601      	mov	r1, r0
    4b8c:	4628      	mov	r0, r5
    4b8e:	f7ff fedf 	bl	4950 <boot_write_trailer>
}
    4b92:	b003      	add	sp, #12
    4b94:	bd30      	pop	{r4, r5, pc}

00004b96 <boot_write_swap_size>:
{
    4b96:	b530      	push	{r4, r5, lr}
    4b98:	b083      	sub	sp, #12
    4b9a:	4605      	mov	r5, r0
    4b9c:	ac02      	add	r4, sp, #8
    4b9e:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    4ba2:	f7ff ff45 	bl	4a30 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    4ba6:	2304      	movs	r3, #4
    4ba8:	4622      	mov	r2, r4
    4baa:	f1a0 0108 	sub.w	r1, r0, #8
    4bae:	4628      	mov	r0, r5
    4bb0:	f7ff fece 	bl	4950 <boot_write_trailer>
}
    4bb4:	b003      	add	sp, #12
    4bb6:	bd30      	pop	{r4, r5, pc}

00004bb8 <bootutil_img_hash>:
{
    4bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bbc:	b09d      	sub	sp, #116	; 0x74
    4bbe:	4615      	mov	r5, r2
    4bc0:	4699      	mov	r9, r3
    4bc2:	9f24      	ldr	r7, [sp, #144]	; 0x90
    4bc4:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    4bc8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    4bca:	a801      	add	r0, sp, #4
    4bcc:	f002 fdc0 	bl	7750 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    4bd0:	2100      	movs	r1, #0
    4bd2:	a801      	add	r0, sp, #4
    4bd4:	f7fe fc5e 	bl	3494 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    4bd8:	b114      	cbz	r4, 4be0 <bootutil_img_hash+0x28>
    4bda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4bdc:	2b00      	cmp	r3, #0
    4bde:	dc06      	bgt.n	4bee <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    4be0:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    4be2:	68ee      	ldr	r6, [r5, #12]
    4be4:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    4be6:	896e      	ldrh	r6, [r5, #10]
    4be8:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    4bea:	2500      	movs	r5, #0
    4bec:	e013      	b.n	4c16 <bootutil_img_hash+0x5e>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    4bee:	461a      	mov	r2, r3
    4bf0:	4621      	mov	r1, r4
    4bf2:	a801      	add	r0, sp, #4
    4bf4:	f002 fdb2 	bl	775c <mbedtls_sha256_update_ret>
    4bf8:	e7f2      	b.n	4be0 <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    4bfa:	4623      	mov	r3, r4
    4bfc:	463a      	mov	r2, r7
    4bfe:	4629      	mov	r1, r5
    4c00:	4648      	mov	r0, r9
    4c02:	f000 fcd0 	bl	55a6 <flash_area_read>
        if (rc) {
    4c06:	4603      	mov	r3, r0
    4c08:	b988      	cbnz	r0, 4c2e <bootutil_img_hash+0x76>
    4c0a:	4622      	mov	r2, r4
    4c0c:	4639      	mov	r1, r7
    4c0e:	a801      	add	r0, sp, #4
    4c10:	f002 fda4 	bl	775c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    4c14:	4425      	add	r5, r4
    4c16:	42b5      	cmp	r5, r6
    4c18:	d204      	bcs.n	4c24 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    4c1a:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    4c1c:	4544      	cmp	r4, r8
    4c1e:	d9ec      	bls.n	4bfa <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    4c20:	4644      	mov	r4, r8
    4c22:	e7ea      	b.n	4bfa <bootutil_img_hash+0x42>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    4c24:	9926      	ldr	r1, [sp, #152]	; 0x98
    4c26:	a801      	add	r0, sp, #4
    4c28:	f002 fddb 	bl	77e2 <mbedtls_sha256_finish_ret>
    return 0;
    4c2c:	2300      	movs	r3, #0
}
    4c2e:	4618      	mov	r0, r3
    4c30:	b01d      	add	sp, #116	; 0x74
    4c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004c36 <bootutil_parse_rsakey>:
{
    4c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c3a:	b084      	sub	sp, #16
    4c3c:	4604      	mov	r4, r0
    4c3e:	460e      	mov	r6, r1
    4c40:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    4c42:	2330      	movs	r3, #48	; 0x30
    4c44:	aa03      	add	r2, sp, #12
    4c46:	4629      	mov	r1, r5
    4c48:	4630      	mov	r0, r6
    4c4a:	f001 f9fc 	bl	6046 <mbedtls_asn1_get_tag>
    4c4e:	bb90      	cbnz	r0, 4cb6 <bootutil_parse_rsakey+0x80>
    if (*p + len != end) {
    4c50:	6833      	ldr	r3, [r6, #0]
    4c52:	9a03      	ldr	r2, [sp, #12]
    4c54:	4413      	add	r3, r2
    4c56:	42ab      	cmp	r3, r5
    4c58:	d130      	bne.n	4cbc <bootutil_parse_rsakey+0x86>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4c5a:	f104 0708 	add.w	r7, r4, #8
    4c5e:	463a      	mov	r2, r7
    4c60:	4629      	mov	r1, r5
    4c62:	4630      	mov	r0, r6
    4c64:	f001 fa02 	bl	606c <mbedtls_asn1_get_mpi>
    4c68:	bb58      	cbnz	r0, 4cc2 <bootutil_parse_rsakey+0x8c>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    4c6a:	f104 0814 	add.w	r8, r4, #20
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4c6e:	4642      	mov	r2, r8
    4c70:	4629      	mov	r1, r5
    4c72:	4630      	mov	r0, r6
    4c74:	f001 f9fa 	bl	606c <mbedtls_asn1_get_mpi>
    4c78:	bb30      	cbnz	r0, 4cc8 <bootutil_parse_rsakey+0x92>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4c7a:	4638      	mov	r0, r7
    4c7c:	f001 fd15 	bl	66aa <mbedtls_mpi_size>
    4c80:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    4c82:	6833      	ldr	r3, [r6, #0]
    4c84:	42ab      	cmp	r3, r5
    4c86:	d122      	bne.n	4cce <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    4c88:	f8cd 8004 	str.w	r8, [sp, #4]
    4c8c:	2200      	movs	r2, #0
    4c8e:	9200      	str	r2, [sp, #0]
    4c90:	4613      	mov	r3, r2
    4c92:	4639      	mov	r1, r7
    4c94:	4620      	mov	r0, r4
    4c96:	f002 fcd6 	bl	7646 <mbedtls_rsa_import>
    if (rc != 0) {
    4c9a:	b9d8      	cbnz	r0, 4cd4 <bootutil_parse_rsakey+0x9e>
    rc = mbedtls_rsa_check_pubkey(ctx);
    4c9c:	4620      	mov	r0, r4
    4c9e:	f7fe fb89 	bl	33b4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    4ca2:	4605      	mov	r5, r0
    4ca4:	b9c8      	cbnz	r0, 4cda <bootutil_parse_rsakey+0xa4>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4ca6:	4638      	mov	r0, r7
    4ca8:	f001 fcff 	bl	66aa <mbedtls_mpi_size>
    4cac:	6060      	str	r0, [r4, #4]
}
    4cae:	4628      	mov	r0, r5
    4cb0:	b004      	add	sp, #16
    4cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    4cb6:	f04f 35ff 	mov.w	r5, #4294967295
    4cba:	e7f8      	b.n	4cae <bootutil_parse_rsakey+0x78>
        return -2;
    4cbc:	f06f 0501 	mvn.w	r5, #1
    4cc0:	e7f5      	b.n	4cae <bootutil_parse_rsakey+0x78>
        return -3;
    4cc2:	f06f 0502 	mvn.w	r5, #2
    4cc6:	e7f2      	b.n	4cae <bootutil_parse_rsakey+0x78>
    4cc8:	f06f 0502 	mvn.w	r5, #2
    4ccc:	e7ef      	b.n	4cae <bootutil_parse_rsakey+0x78>
        return -4;
    4cce:	f06f 0503 	mvn.w	r5, #3
    4cd2:	e7ec      	b.n	4cae <bootutil_parse_rsakey+0x78>
        return -5;
    4cd4:	f06f 0504 	mvn.w	r5, #4
    4cd8:	e7e9      	b.n	4cae <bootutil_parse_rsakey+0x78>
        return -6;
    4cda:	f06f 0505 	mvn.w	r5, #5
    4cde:	e7e6      	b.n	4cae <bootutil_parse_rsakey+0x78>

00004ce0 <pss_mgf1>:
{
    4ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce2:	b0a5      	sub	sp, #148	; 0x94
    4ce4:	4606      	mov	r6, r0
    4ce6:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    4ce8:	2300      	movs	r3, #0
    4cea:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    4cec:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    4cee:	e007      	b.n	4d00 <pss_mgf1+0x20>
            bytes = count;
    4cf0:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    4cf2:	462a      	mov	r2, r5
    4cf4:	4669      	mov	r1, sp
    4cf6:	4630      	mov	r0, r6
    4cf8:	f000 fe53 	bl	59a2 <memcpy>
        mask += bytes;
    4cfc:	442e      	add	r6, r5
        count -= bytes;
    4cfe:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    4d00:	2c00      	cmp	r4, #0
    4d02:	dd1d      	ble.n	4d40 <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    4d04:	a809      	add	r0, sp, #36	; 0x24
    4d06:	f002 fd23 	bl	7750 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    4d0a:	2100      	movs	r1, #0
    4d0c:	a809      	add	r0, sp, #36	; 0x24
    4d0e:	f7fe fbc1 	bl	3494 <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    4d12:	2220      	movs	r2, #32
    4d14:	4639      	mov	r1, r7
    4d16:	a809      	add	r0, sp, #36	; 0x24
    4d18:	f002 fd20 	bl	775c <mbedtls_sha256_update_ret>
    4d1c:	2204      	movs	r2, #4
    4d1e:	a908      	add	r1, sp, #32
    4d20:	a809      	add	r0, sp, #36	; 0x24
    4d22:	f002 fd1b 	bl	775c <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    4d26:	4669      	mov	r1, sp
    4d28:	a809      	add	r0, sp, #36	; 0x24
    4d2a:	f002 fd5a 	bl	77e2 <mbedtls_sha256_finish_ret>
        counter[3]++;
    4d2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4d32:	3301      	adds	r3, #1
    4d34:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    4d38:	2c1f      	cmp	r4, #31
    4d3a:	ddd9      	ble.n	4cf0 <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    4d3c:	2520      	movs	r5, #32
    4d3e:	e7d8      	b.n	4cf2 <pss_mgf1+0x12>
}
    4d40:	b025      	add	sp, #148	; 0x94
    4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d44 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint8_t type, bool prot)
{
    4d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d48:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    4d4a:	2800      	cmp	r0, #0
    4d4c:	d04a      	beq.n	4de4 <bootutil_tlv_iter_begin+0xa0>
    4d4e:	4605      	mov	r5, r0
    4d50:	2900      	cmp	r1, #0
    4d52:	d04a      	beq.n	4dea <bootutil_tlv_iter_begin+0xa6>
    4d54:	2a00      	cmp	r2, #0
    4d56:	d04b      	beq.n	4df0 <bootutil_tlv_iter_begin+0xac>
    4d58:	4699      	mov	r9, r3
    4d5a:	4617      	mov	r7, r2
    4d5c:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    4d5e:	890e      	ldrh	r6, [r1, #8]
    4d60:	68cb      	ldr	r3, [r1, #12]
    4d62:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    4d64:	2304      	movs	r3, #4
    4d66:	eb0d 0203 	add.w	r2, sp, r3
    4d6a:	4631      	mov	r1, r6
    4d6c:	4638      	mov	r0, r7
    4d6e:	f000 fc1a 	bl	55a6 <flash_area_read>
    4d72:	4680      	mov	r8, r0
    4d74:	2800      	cmp	r0, #0
    4d76:	d13e      	bne.n	4df6 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    4d78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4d7c:	f646 1308 	movw	r3, #26888	; 0x6908
    4d80:	429a      	cmp	r2, r3
    4d82:	d01e      	beq.n	4dc2 <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    4d84:	8963      	ldrh	r3, [r4, #10]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d13b      	bne.n	4e02 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    4d8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4d8e:	f646 1307 	movw	r3, #26887	; 0x6907
    4d92:	429a      	cmp	r2, r3
    4d94:	d138      	bne.n	4e08 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    4d96:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    4d98:	606f      	str	r7, [r5, #4]
    it->type = type;
    4d9a:	f885 9008 	strb.w	r9, [r5, #8]
    it->prot = prot;
    4d9e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4da2:	726b      	strb	r3, [r5, #9]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    4da4:	8963      	ldrh	r3, [r4, #10]
    4da6:	4433      	add	r3, r6
    4da8:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4daa:	8963      	ldrh	r3, [r4, #10]
    4dac:	4433      	add	r3, r6
    4dae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4db2:	4413      	add	r3, r2
    4db4:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    4db6:	3604      	adds	r6, #4
    4db8:	612e      	str	r6, [r5, #16]
    return 0;
}
    4dba:	4640      	mov	r0, r8
    4dbc:	b003      	add	sp, #12
    4dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    4dc2:	8963      	ldrh	r3, [r4, #10]
    4dc4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4dc8:	428b      	cmp	r3, r1
    4dca:	d117      	bne.n	4dfc <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    4dcc:	2304      	movs	r3, #4
    4dce:	eb0d 0203 	add.w	r2, sp, r3
    4dd2:	4431      	add	r1, r6
    4dd4:	4638      	mov	r0, r7
    4dd6:	f000 fbe6 	bl	55a6 <flash_area_read>
    4dda:	2800      	cmp	r0, #0
    4ddc:	d0d5      	beq.n	4d8a <bootutil_tlv_iter_begin+0x46>
            return -1;
    4dde:	f04f 38ff 	mov.w	r8, #4294967295
    4de2:	e7ea      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
        return -1;
    4de4:	f04f 38ff 	mov.w	r8, #4294967295
    4de8:	e7e7      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
    4dea:	f04f 38ff 	mov.w	r8, #4294967295
    4dee:	e7e4      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
    4df0:	f04f 38ff 	mov.w	r8, #4294967295
    4df4:	e7e1      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
        return -1;
    4df6:	f04f 38ff 	mov.w	r8, #4294967295
    4dfa:	e7de      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
            return -1;
    4dfc:	f04f 38ff 	mov.w	r8, #4294967295
    4e00:	e7db      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
        return -1;
    4e02:	f04f 38ff 	mov.w	r8, #4294967295
    4e06:	e7d8      	b.n	4dba <bootutil_tlv_iter_begin+0x76>
        return -1;
    4e08:	f04f 38ff 	mov.w	r8, #4294967295
    4e0c:	e7d5      	b.n	4dba <bootutil_tlv_iter_begin+0x76>

00004e0e <bootutil_tlv_iter_next>:
                       uint8_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4e0e:	2800      	cmp	r0, #0
    4e10:	d04b      	beq.n	4eaa <bootutil_tlv_iter_next+0x9c>
{
    4e12:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e14:	b083      	sub	sp, #12
    4e16:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4e18:	6800      	ldr	r0, [r0, #0]
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d049      	beq.n	4eb2 <bootutil_tlv_iter_next+0xa4>
    4e1e:	461d      	mov	r5, r3
    4e20:	4616      	mov	r6, r2
    4e22:	460f      	mov	r7, r1
    4e24:	6863      	ldr	r3, [r4, #4]
    4e26:	b9fb      	cbnz	r3, 4e68 <bootutil_tlv_iter_next+0x5a>
        return -1;
    4e28:	f04f 31ff 	mov.w	r1, #4294967295
    4e2c:	e038      	b.n	4ea0 <bootutil_tlv_iter_next+0x92>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    4e2e:	2304      	movs	r3, #4
    4e30:	eb0d 0203 	add.w	r2, sp, r3
    4e34:	6921      	ldr	r1, [r4, #16]
    4e36:	6860      	ldr	r0, [r4, #4]
    4e38:	f000 fbb5 	bl	55a6 <flash_area_read>
        if (rc) {
    4e3c:	4601      	mov	r1, r0
    4e3e:	2800      	cmp	r0, #0
    4e40:	d13a      	bne.n	4eb8 <bootutil_tlv_iter_next+0xaa>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    4e42:	7a63      	ldrb	r3, [r4, #9]
    4e44:	b11b      	cbz	r3, 4e4e <bootutil_tlv_iter_next+0x40>
    4e46:	6922      	ldr	r2, [r4, #16]
    4e48:	68e3      	ldr	r3, [r4, #12]
    4e4a:	429a      	cmp	r2, r3
    4e4c:	d237      	bcs.n	4ebe <bootutil_tlv_iter_next+0xb0>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    4e4e:	7a23      	ldrb	r3, [r4, #8]
    4e50:	2bff      	cmp	r3, #255	; 0xff
    4e52:	d017      	beq.n	4e84 <bootutil_tlv_iter_next+0x76>
    4e54:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4e58:	4293      	cmp	r3, r2
    4e5a:	d013      	beq.n	4e84 <bootutil_tlv_iter_next+0x76>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    4e5c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    4e60:	6923      	ldr	r3, [r4, #16]
    4e62:	4418      	add	r0, r3
    4e64:	3004      	adds	r0, #4
    4e66:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    4e68:	6920      	ldr	r0, [r4, #16]
    4e6a:	6963      	ldr	r3, [r4, #20]
    4e6c:	4298      	cmp	r0, r3
    4e6e:	d21a      	bcs.n	4ea6 <bootutil_tlv_iter_next+0x98>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    4e70:	6823      	ldr	r3, [r4, #0]
    4e72:	895b      	ldrh	r3, [r3, #10]
    4e74:	2b00      	cmp	r3, #0
    4e76:	d0da      	beq.n	4e2e <bootutil_tlv_iter_next+0x20>
    4e78:	68e3      	ldr	r3, [r4, #12]
    4e7a:	4283      	cmp	r3, r0
    4e7c:	d1d7      	bne.n	4e2e <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    4e7e:	3004      	adds	r0, #4
    4e80:	6120      	str	r0, [r4, #16]
    4e82:	e7d4      	b.n	4e2e <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    4e84:	b115      	cbz	r5, 4e8c <bootutil_tlv_iter_next+0x7e>
                *type = tlv.it_type;
    4e86:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4e8a:	702b      	strb	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    4e8c:	6923      	ldr	r3, [r4, #16]
    4e8e:	3304      	adds	r3, #4
    4e90:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    4e92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4e96:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    4e98:	6922      	ldr	r2, [r4, #16]
    4e9a:	4413      	add	r3, r2
    4e9c:	3304      	adds	r3, #4
    4e9e:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    4ea0:	4608      	mov	r0, r1
    4ea2:	b003      	add	sp, #12
    4ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    4ea6:	2101      	movs	r1, #1
    4ea8:	e7fa      	b.n	4ea0 <bootutil_tlv_iter_next+0x92>
        return -1;
    4eaa:	f04f 31ff 	mov.w	r1, #4294967295
}
    4eae:	4608      	mov	r0, r1
    4eb0:	4770      	bx	lr
        return -1;
    4eb2:	f04f 31ff 	mov.w	r1, #4294967295
    4eb6:	e7f3      	b.n	4ea0 <bootutil_tlv_iter_next+0x92>
            return -1;
    4eb8:	f04f 31ff 	mov.w	r1, #4294967295
    4ebc:	e7f0      	b.n	4ea0 <bootutil_tlv_iter_next+0x92>
            return 1;
    4ebe:	2101      	movs	r1, #1
    4ec0:	e7ee      	b.n	4ea0 <bootutil_tlv_iter_next+0x92>

00004ec2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    4ec2:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    4ec6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4eca:	d001      	beq.n	4ed0 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    4ecc:	b2c0      	uxtb	r0, r0
    4ece:	4770      	bx	lr
	}

	return -EINVAL;
    4ed0:	f06f 0015 	mvn.w	r0, #21
}
    4ed4:	4770      	bx	lr

00004ed6 <block_ptr>:
#define LVL_ARRAY_SZ(n) (n)
#endif

static void *block_ptr(struct sys_mem_pool_base *p, size_t lsz, int block)
{
	return (u8_t *)p->buf + lsz * block;
    4ed6:	6800      	ldr	r0, [r0, #0]
}
    4ed8:	fb01 0002 	mla	r0, r1, r2, r0
    4edc:	4770      	bx	lr

00004ede <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ee0:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4ee2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    4ee6:	6840      	ldr	r0, [r0, #4]
    4ee8:	fb00 fc0c 	mul.w	ip, r0, ip
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4eec:	6827      	ldr	r7, [r4, #0]
    4eee:	4467      	add	r7, ip

	p->max_inline_level = -1;
    4ef0:	23ff      	movs	r3, #255	; 0xff
    4ef2:	72e3      	strb	r3, [r4, #11]

	for (i = 0; i < p->n_levels; i++) {
    4ef4:	2200      	movs	r2, #0
    4ef6:	e00a      	b.n	4f0e <z_sys_mem_pool_base_init+0x30>
		sys_dlist_init(&p->levels[i].free_list);

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
    4ef8:	68e3      	ldr	r3, [r4, #12]
    4efa:	515f      	str	r7, [r3, r5]
			bits += (nblocks + 31)/32;
    4efc:	311f      	adds	r1, #31
    4efe:	d417      	bmi.n	4f30 <z_sys_mem_pool_base_init+0x52>
    4f00:	1149      	asrs	r1, r1, #5
    4f02:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		}

		sz = WB_DN(sz / 4);
    4f06:	0880      	lsrs	r0, r0, #2
    4f08:	f020 0003 	bic.w	r0, r0, #3
	for (i = 0; i < p->n_levels; i++) {
    4f0c:	3201      	adds	r2, #1
    4f0e:	7aa3      	ldrb	r3, [r4, #10]
    4f10:	4293      	cmp	r3, r2
    4f12:	dd0f      	ble.n	4f34 <z_sys_mem_pool_base_init+0x56>
		int nblocks = buflen / sz;
    4f14:	fbbc f1f0 	udiv	r1, ip, r0
		sys_dlist_init(&p->levels[i].free_list);
    4f18:	68e3      	ldr	r3, [r4, #12]
    4f1a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4f1e:	00b5      	lsls	r5, r6, #2
    4f20:	442b      	add	r3, r5
    4f22:	1d1e      	adds	r6, r3, #4
	list->head = (sys_dnode_t *)list;
    4f24:	605e      	str	r6, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    4f26:	609e      	str	r6, [r3, #8]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    4f28:	2920      	cmp	r1, #32
    4f2a:	d8e5      	bhi.n	4ef8 <z_sys_mem_pool_base_init+0x1a>
			p->max_inline_level = i;
    4f2c:	72e2      	strb	r2, [r4, #11]
    4f2e:	e7ea      	b.n	4f06 <z_sys_mem_pool_base_init+0x28>
			bits += (nblocks + 31)/32;
    4f30:	311f      	adds	r1, #31
    4f32:	e7e5      	b.n	4f00 <z_sys_mem_pool_base_init+0x22>
	}

	for (i = 0; i < p->n_max; i++) {
    4f34:	2500      	movs	r5, #0
    4f36:	e00d      	b.n	4f54 <z_sys_mem_pool_base_init+0x76>
		void *block = block_ptr(p, p->max_sz, i);
    4f38:	462a      	mov	r2, r5
    4f3a:	6861      	ldr	r1, [r4, #4]
    4f3c:	4620      	mov	r0, r4
    4f3e:	f7ff ffca 	bl	4ed6 <block_ptr>

		sys_dlist_append(&p->levels[0].free_list, block);
    4f42:	68e3      	ldr	r3, [r4, #12]
    4f44:	1d1a      	adds	r2, r3, #4
	node->next = list;
    4f46:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    4f48:	689a      	ldr	r2, [r3, #8]
    4f4a:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    4f4c:	689a      	ldr	r2, [r3, #8]
    4f4e:	6010      	str	r0, [r2, #0]
	list->tail = node;
    4f50:	6098      	str	r0, [r3, #8]
	for (i = 0; i < p->n_max; i++) {
    4f52:	3501      	adds	r5, #1
    4f54:	8923      	ldrh	r3, [r4, #8]
    4f56:	42ab      	cmp	r3, r5
    4f58:	dcee      	bgt.n	4f38 <z_sys_mem_pool_base_init+0x5a>
	}
}
    4f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004f5c <z_arch_printk_char_out>:
}
    4f5c:	2000      	movs	r0, #0
    4f5e:	4770      	bx	lr

00004f60 <print_err>:
{
    4f60:	b538      	push	{r3, r4, r5, lr}
    4f62:	4604      	mov	r4, r0
    4f64:	460d      	mov	r5, r1
	out('E', ctx);
    4f66:	2045      	movs	r0, #69	; 0x45
    4f68:	47a0      	blx	r4
	out('R', ctx);
    4f6a:	4629      	mov	r1, r5
    4f6c:	2052      	movs	r0, #82	; 0x52
    4f6e:	47a0      	blx	r4
	out('R', ctx);
    4f70:	4629      	mov	r1, r5
    4f72:	2052      	movs	r0, #82	; 0x52
    4f74:	47a0      	blx	r4
}
    4f76:	bd38      	pop	{r3, r4, r5, pc}

00004f78 <_printk_hex_ulong>:
{
    4f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f7c:	b083      	sub	sp, #12
    4f7e:	4681      	mov	r9, r0
    4f80:	9100      	str	r1, [sp, #0]
    4f82:	4690      	mov	r8, r2
    4f84:	461d      	mov	r5, r3
    4f86:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4f8a:	9301      	str	r3, [sp, #4]
	int digits = 0;
    4f8c:	2600      	movs	r6, #0
	int remaining = 16; /* 16 digits max */
    4f8e:	f04f 0a10 	mov.w	sl, #16
	int found_largest_digit = 0;
    4f92:	4637      	mov	r7, r6
	int shift = sizeof(num) * 8;
    4f94:	2440      	movs	r4, #64	; 0x40
	while (shift >= 4) {
    4f96:	e007      	b.n	4fa8 <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    4f98:	2809      	cmp	r0, #9
    4f9a:	d928      	bls.n	4fee <_printk_hex_ulong+0x76>
    4f9c:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    4f9e:	9900      	ldr	r1, [sp, #0]
    4fa0:	4418      	add	r0, r3
    4fa2:	47c8      	blx	r9
			digits++;
    4fa4:	3601      	adds	r6, #1
			found_largest_digit = 1;
    4fa6:	2701      	movs	r7, #1
	while (shift >= 4) {
    4fa8:	2c03      	cmp	r4, #3
    4faa:	dd2e      	ble.n	500a <_printk_hex_ulong+0x92>
		shift -= 4;
    4fac:	3c04      	subs	r4, #4
		nibble = (num >> shift) & 0xf;
    4fae:	f1c4 0220 	rsb	r2, r4, #32
    4fb2:	f1a4 0320 	sub.w	r3, r4, #32
    4fb6:	fa28 f004 	lsr.w	r0, r8, r4
    4fba:	fa05 f202 	lsl.w	r2, r5, r2
    4fbe:	4310      	orrs	r0, r2
    4fc0:	fa25 f303 	lsr.w	r3, r5, r3
    4fc4:	4318      	orrs	r0, r3
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    4fc6:	f010 000f 	ands.w	r0, r0, #15
    4fca:	d1e5      	bne.n	4f98 <_printk_hex_ulong+0x20>
    4fcc:	2f00      	cmp	r7, #0
    4fce:	d1e3      	bne.n	4f98 <_printk_hex_ulong+0x20>
    4fd0:	2c00      	cmp	r4, #0
    4fd2:	d0e1      	beq.n	4f98 <_printk_hex_ulong+0x20>
		if (remaining-- <= min_width) {
    4fd4:	f10a 3bff 	add.w	fp, sl, #4294967295
    4fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4fda:	459a      	cmp	sl, r3
    4fdc:	dc11      	bgt.n	5002 <_printk_hex_ulong+0x8a>
			if (padding == PAD_ZERO_BEFORE) {
    4fde:	9b01      	ldr	r3, [sp, #4]
    4fe0:	2b01      	cmp	r3, #1
    4fe2:	d106      	bne.n	4ff2 <_printk_hex_ulong+0x7a>
				out('0', ctx);
    4fe4:	9900      	ldr	r1, [sp, #0]
    4fe6:	2030      	movs	r0, #48	; 0x30
    4fe8:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    4fea:	46da      	mov	sl, fp
    4fec:	e7dc      	b.n	4fa8 <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    4fee:	2330      	movs	r3, #48	; 0x30
    4ff0:	e7d5      	b.n	4f9e <_printk_hex_ulong+0x26>
			} else if (padding == PAD_SPACE_BEFORE) {
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	2b02      	cmp	r3, #2
    4ff6:	d106      	bne.n	5006 <_printk_hex_ulong+0x8e>
				out(' ', ctx);
    4ff8:	9900      	ldr	r1, [sp, #0]
    4ffa:	2020      	movs	r0, #32
    4ffc:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    4ffe:	46da      	mov	sl, fp
    5000:	e7d2      	b.n	4fa8 <_printk_hex_ulong+0x30>
    5002:	46da      	mov	sl, fp
    5004:	e7d0      	b.n	4fa8 <_printk_hex_ulong+0x30>
    5006:	46da      	mov	sl, fp
    5008:	e7ce      	b.n	4fa8 <_printk_hex_ulong+0x30>
	if (padding == PAD_SPACE_AFTER) {
    500a:	9b01      	ldr	r3, [sp, #4]
    500c:	2b03      	cmp	r3, #3
    500e:	d002      	beq.n	5016 <_printk_hex_ulong+0x9e>
}
    5010:	b003      	add	sp, #12
    5012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    5016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5018:	ebc6 0643 	rsb	r6, r6, r3, lsl #1
		while (remaining-- > 0) {
    501c:	e003      	b.n	5026 <_printk_hex_ulong+0xae>
			out(' ', ctx);
    501e:	9900      	ldr	r1, [sp, #0]
    5020:	2020      	movs	r0, #32
    5022:	47c8      	blx	r9
		while (remaining-- > 0) {
    5024:	4626      	mov	r6, r4
    5026:	1e74      	subs	r4, r6, #1
    5028:	2e00      	cmp	r6, #0
    502a:	dcf8      	bgt.n	501e <_printk_hex_ulong+0xa6>
    502c:	e7f0      	b.n	5010 <_printk_hex_ulong+0x98>

0000502e <z_vprintk>:
{
    502e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5032:	b085      	sub	sp, #20
    5034:	4607      	mov	r7, r0
    5036:	460e      	mov	r6, r1
    5038:	4614      	mov	r4, r2
    503a:	9303      	str	r3, [sp, #12]
	char length_mod = 0;
    503c:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    5040:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
    5044:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    5046:	4645      	mov	r5, r8
	while (*fmt) {
    5048:	e132      	b.n	52b0 <z_vprintk+0x282>
			switch (*fmt) {
    504a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    504e:	2b55      	cmp	r3, #85	; 0x55
    5050:	f200 8176 	bhi.w	5340 <z_vprintk+0x312>
    5054:	e8df f013 	tbh	[pc, r3, lsl #1]
    5058:	0174016f 	.word	0x0174016f
    505c:	01740174 	.word	0x01740174
    5060:	01740174 	.word	0x01740174
    5064:	01740174 	.word	0x01740174
    5068:	01740183 	.word	0x01740183
    506c:	00560174 	.word	0x00560174
    5070:	00590059 	.word	0x00590059
    5074:	00590059 	.word	0x00590059
    5078:	00590059 	.word	0x00590059
    507c:	00590059 	.word	0x00590059
    5080:	01740059 	.word	0x01740059
    5084:	01740174 	.word	0x01740174
    5088:	01740174 	.word	0x01740174
    508c:	01740174 	.word	0x01740174
    5090:	01740174 	.word	0x01740174
    5094:	01740174 	.word	0x01740174
    5098:	01740174 	.word	0x01740174
    509c:	01740174 	.word	0x01740174
    50a0:	01740174 	.word	0x01740174
    50a4:	01740174 	.word	0x01740174
    50a8:	01740174 	.word	0x01740174
    50ac:	01740174 	.word	0x01740174
    50b0:	01740174 	.word	0x01740174
    50b4:	01740174 	.word	0x01740174
    50b8:	01740174 	.word	0x01740174
    50bc:	010e0174 	.word	0x010e0174
    50c0:	01740174 	.word	0x01740174
    50c4:	01740174 	.word	0x01740174
    50c8:	01740174 	.word	0x01740174
    50cc:	01740174 	.word	0x01740174
    50d0:	01740174 	.word	0x01740174
    50d4:	008f0167 	.word	0x008f0167
    50d8:	01740174 	.word	0x01740174
    50dc:	00730174 	.word	0x00730174
    50e0:	0174008f 	.word	0x0174008f
    50e4:	00730174 	.word	0x00730174
    50e8:	01740174 	.word	0x01740174
    50ec:	01040174 	.word	0x01040174
    50f0:	01740174 	.word	0x01740174
    50f4:	01740147 	.word	0x01740147
    50f8:	017400d1 	.word	0x017400d1
    50fc:	010e0174 	.word	0x010e0174
    5100:	00730174 	.word	0x00730174
				if (min_width < 0 && padding == PAD_NONE) {
    5104:	f1ba 0f00 	cmp.w	sl, #0
    5108:	db10      	blt.n	512c <z_vprintk+0xfe>
				if (min_width < 0) {
    510a:	f1ba 0f00 	cmp.w	sl, #0
    510e:	db13      	blt.n	5138 <z_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    5110:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    5114:	ea4f 034a 	mov.w	r3, sl, lsl #1
    5118:	4418      	add	r0, r3
    511a:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    511e:	f1b9 0f00 	cmp.w	r9, #0
    5122:	f040 80c4 	bne.w	52ae <z_vprintk+0x280>
					padding = PAD_SPACE_BEFORE;
    5126:	f04f 0902 	mov.w	r9, #2
    512a:	e0c0      	b.n	52ae <z_vprintk+0x280>
				if (min_width < 0 && padding == PAD_NONE) {
    512c:	f1b9 0f00 	cmp.w	r9, #0
    5130:	d1eb      	bne.n	510a <z_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    5132:	f04f 0901 	mov.w	r9, #1
    5136:	e0ba      	b.n	52ae <z_vprintk+0x280>
					min_width = *fmt - '0';
    5138:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    513c:	e7ef      	b.n	511e <z_vprintk+0xf0>
				if (*fmt == 'h' && length_mod == 'h') {
    513e:	2868      	cmp	r0, #104	; 0x68
    5140:	d00d      	beq.n	515e <z_vprintk+0x130>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5142:	286c      	cmp	r0, #108	; 0x6c
    5144:	d011      	beq.n	516a <z_vprintk+0x13c>
				} else if (length_mod == 0) {
    5146:	f1b8 0f00 	cmp.w	r8, #0
    514a:	f000 810b 	beq.w	5364 <z_vprintk+0x336>
					out((int)'%', ctx);
    514e:	4631      	mov	r1, r6
    5150:	2025      	movs	r0, #37	; 0x25
    5152:	47b8      	blx	r7
					out((int)*fmt, ctx);
    5154:	4631      	mov	r1, r6
    5156:	7820      	ldrb	r0, [r4, #0]
    5158:	47b8      	blx	r7
			might_format = 0;
    515a:	2500      	movs	r5, #0
					break;
    515c:	e0a7      	b.n	52ae <z_vprintk+0x280>
				if (*fmt == 'h' && length_mod == 'h') {
    515e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    5162:	d1ee      	bne.n	5142 <z_vprintk+0x114>
					length_mod = 'H';
    5164:	f04f 0848 	mov.w	r8, #72	; 0x48
    5168:	e0a1      	b.n	52ae <z_vprintk+0x280>
				} else if (*fmt == 'l' && length_mod == 'l') {
    516a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    516e:	d1ea      	bne.n	5146 <z_vprintk+0x118>
					length_mod = 'L';
    5170:	f04f 084c 	mov.w	r8, #76	; 0x4c
    5174:	e09b      	b.n	52ae <z_vprintk+0x280>
				if (length_mod == 'z') {
    5176:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    517a:	d00a      	beq.n	5192 <z_vprintk+0x164>
				} else if (length_mod == 'l') {
    517c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5180:	d01d      	beq.n	51be <z_vprintk+0x190>
				} else if (length_mod == 'L') {
    5182:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5186:	d01f      	beq.n	51c8 <z_vprintk+0x19a>
					d = va_arg(ap, int);
    5188:	9b03      	ldr	r3, [sp, #12]
    518a:	1d1a      	adds	r2, r3, #4
    518c:	9203      	str	r2, [sp, #12]
    518e:	681d      	ldr	r5, [r3, #0]
    5190:	e003      	b.n	519a <z_vprintk+0x16c>
					d = va_arg(ap, ssize_t);
    5192:	9b03      	ldr	r3, [sp, #12]
    5194:	1d1a      	adds	r2, r3, #4
    5196:	9203      	str	r2, [sp, #12]
    5198:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    519a:	2d00      	cmp	r5, #0
    519c:	da05      	bge.n	51aa <z_vprintk+0x17c>
					out((int)'-', ctx);
    519e:	4631      	mov	r1, r6
    51a0:	202d      	movs	r0, #45	; 0x2d
    51a2:	47b8      	blx	r7
					d = -d;
    51a4:	426d      	negs	r5, r5
					min_width--;
    51a6:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    51aa:	f8cd a000 	str.w	sl, [sp]
    51ae:	464b      	mov	r3, r9
    51b0:	462a      	mov	r2, r5
    51b2:	4631      	mov	r1, r6
    51b4:	4638      	mov	r0, r7
    51b6:	f7fc fa67 	bl	1688 <_printk_dec_ulong>
			might_format = 0;
    51ba:	2500      	movs	r5, #0
				break;
    51bc:	e077      	b.n	52ae <z_vprintk+0x280>
					d = va_arg(ap, long);
    51be:	9b03      	ldr	r3, [sp, #12]
    51c0:	1d1a      	adds	r2, r3, #4
    51c2:	9203      	str	r2, [sp, #12]
    51c4:	681d      	ldr	r5, [r3, #0]
    51c6:	e7e8      	b.n	519a <z_vprintk+0x16c>
					long long lld = va_arg(ap, long long);
    51c8:	9b03      	ldr	r3, [sp, #12]
    51ca:	3307      	adds	r3, #7
    51cc:	f023 0307 	bic.w	r3, r3, #7
    51d0:	f103 0208 	add.w	r2, r3, #8
    51d4:	9203      	str	r2, [sp, #12]
    51d6:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
    51da:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    51de:	f143 0100 	adc.w	r1, r3, #0
    51e2:	2901      	cmp	r1, #1
    51e4:	bf08      	it	eq
    51e6:	2800      	cmpeq	r0, #0
    51e8:	d201      	bcs.n	51ee <z_vprintk+0x1c0>
					d = lld;
    51ea:	4615      	mov	r5, r2
    51ec:	e7d5      	b.n	519a <z_vprintk+0x16c>
						print_err(out, ctx);
    51ee:	4631      	mov	r1, r6
    51f0:	4638      	mov	r0, r7
    51f2:	f7ff feb5 	bl	4f60 <print_err>
			might_format = 0;
    51f6:	2500      	movs	r5, #0
						break;
    51f8:	e059      	b.n	52ae <z_vprintk+0x280>
				if (length_mod == 'z') {
    51fa:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    51fe:	d00a      	beq.n	5216 <z_vprintk+0x1e8>
				} else if (length_mod == 'l') {
    5200:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5204:	d014      	beq.n	5230 <z_vprintk+0x202>
				} else if (length_mod == 'L') {
    5206:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    520a:	d016      	beq.n	523a <z_vprintk+0x20c>
					u = va_arg(ap, unsigned int);
    520c:	9b03      	ldr	r3, [sp, #12]
    520e:	1d1a      	adds	r2, r3, #4
    5210:	9203      	str	r2, [sp, #12]
    5212:	681a      	ldr	r2, [r3, #0]
    5214:	e003      	b.n	521e <z_vprintk+0x1f0>
					u = va_arg(ap, size_t);
    5216:	9b03      	ldr	r3, [sp, #12]
    5218:	1d1a      	adds	r2, r3, #4
    521a:	9203      	str	r2, [sp, #12]
    521c:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    521e:	f8cd a000 	str.w	sl, [sp]
    5222:	464b      	mov	r3, r9
    5224:	4631      	mov	r1, r6
    5226:	4638      	mov	r0, r7
    5228:	f7fc fa2e 	bl	1688 <_printk_dec_ulong>
			might_format = 0;
    522c:	2500      	movs	r5, #0
				break;
    522e:	e03e      	b.n	52ae <z_vprintk+0x280>
					u = va_arg(ap, unsigned long);
    5230:	9b03      	ldr	r3, [sp, #12]
    5232:	1d1a      	adds	r2, r3, #4
    5234:	9203      	str	r2, [sp, #12]
    5236:	681a      	ldr	r2, [r3, #0]
    5238:	e7f1      	b.n	521e <z_vprintk+0x1f0>
					unsigned long long llu =
    523a:	9b03      	ldr	r3, [sp, #12]
    523c:	3307      	adds	r3, #7
    523e:	f023 0307 	bic.w	r3, r3, #7
    5242:	f103 0208 	add.w	r2, r3, #8
    5246:	9203      	str	r2, [sp, #12]
    5248:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    524c:	2b01      	cmp	r3, #1
    524e:	bf08      	it	eq
    5250:	2a00      	cmpeq	r2, #0
    5252:	d3e4      	bcc.n	521e <z_vprintk+0x1f0>
						print_err(out, ctx);
    5254:	4631      	mov	r1, r6
    5256:	4638      	mov	r0, r7
    5258:	f7ff fe82 	bl	4f60 <print_err>
			might_format = 0;
    525c:	2500      	movs	r5, #0
						break;
    525e:	e026      	b.n	52ae <z_vprintk+0x280>
				  out('0', ctx);
    5260:	4631      	mov	r1, r6
    5262:	2030      	movs	r0, #48	; 0x30
    5264:	47b8      	blx	r7
				  out('x', ctx);
    5266:	4631      	mov	r1, r6
    5268:	2078      	movs	r0, #120	; 0x78
    526a:	47b8      	blx	r7
				  min_width = 8;
    526c:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    5270:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    5274:	7823      	ldrb	r3, [r4, #0]
    5276:	2b70      	cmp	r3, #112	; 0x70
    5278:	d00b      	beq.n	5292 <z_vprintk+0x264>
				} else if (length_mod == 'l') {
    527a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    527e:	d022      	beq.n	52c6 <z_vprintk+0x298>
				} else if (length_mod == 'L') {
    5280:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5284:	d025      	beq.n	52d2 <z_vprintk+0x2a4>
					x = va_arg(ap, unsigned int);
    5286:	9b03      	ldr	r3, [sp, #12]
    5288:	1d1a      	adds	r2, r3, #4
    528a:	9203      	str	r2, [sp, #12]
    528c:	681a      	ldr	r2, [r3, #0]
    528e:	2300      	movs	r3, #0
    5290:	e004      	b.n	529c <z_vprintk+0x26e>
					x = (uintptr_t)va_arg(ap, void *);
    5292:	9b03      	ldr	r3, [sp, #12]
    5294:	1d1a      	adds	r2, r3, #4
    5296:	9203      	str	r2, [sp, #12]
    5298:	681a      	ldr	r2, [r3, #0]
    529a:	2300      	movs	r3, #0
				_printk_hex_ulong(out, ctx, x, padding,
    529c:	f8cd a004 	str.w	sl, [sp, #4]
    52a0:	f8cd 9000 	str.w	r9, [sp]
    52a4:	4631      	mov	r1, r6
    52a6:	4638      	mov	r0, r7
    52a8:	f7ff fe66 	bl	4f78 <_printk_hex_ulong>
			might_format = 0;
    52ac:	2500      	movs	r5, #0
		++fmt;
    52ae:	3401      	adds	r4, #1
	while (*fmt) {
    52b0:	7820      	ldrb	r0, [r4, #0]
    52b2:	2800      	cmp	r0, #0
    52b4:	d058      	beq.n	5368 <z_vprintk+0x33a>
		if (!might_format) {
    52b6:	2d00      	cmp	r5, #0
    52b8:	f47f aec7 	bne.w	504a <z_vprintk+0x1c>
			if (*fmt != '%') {
    52bc:	2825      	cmp	r0, #37	; 0x25
    52be:	d047      	beq.n	5350 <z_vprintk+0x322>
				out((int)*fmt, ctx);
    52c0:	4631      	mov	r1, r6
    52c2:	47b8      	blx	r7
    52c4:	e7f3      	b.n	52ae <z_vprintk+0x280>
					x = va_arg(ap, unsigned long);
    52c6:	9b03      	ldr	r3, [sp, #12]
    52c8:	1d1a      	adds	r2, r3, #4
    52ca:	9203      	str	r2, [sp, #12]
    52cc:	681a      	ldr	r2, [r3, #0]
    52ce:	2300      	movs	r3, #0
    52d0:	e7e4      	b.n	529c <z_vprintk+0x26e>
					x = va_arg(ap, unsigned long long);
    52d2:	9b03      	ldr	r3, [sp, #12]
    52d4:	3307      	adds	r3, #7
    52d6:	f023 0307 	bic.w	r3, r3, #7
    52da:	f103 0208 	add.w	r2, r3, #8
    52de:	9203      	str	r2, [sp, #12]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	685b      	ldr	r3, [r3, #4]
    52e4:	e7da      	b.n	529c <z_vprintk+0x26e>
				char *s = va_arg(ap, char *);
    52e6:	9b03      	ldr	r3, [sp, #12]
    52e8:	1d1a      	adds	r2, r3, #4
    52ea:	9203      	str	r2, [sp, #12]
    52ec:	f8d3 b000 	ldr.w	fp, [r3]
    52f0:	465d      	mov	r5, fp
				while (*s) {
    52f2:	e002      	b.n	52fa <z_vprintk+0x2cc>
					out((int)(*s++), ctx);
    52f4:	3501      	adds	r5, #1
    52f6:	4631      	mov	r1, r6
    52f8:	47b8      	blx	r7
				while (*s) {
    52fa:	7828      	ldrb	r0, [r5, #0]
    52fc:	2800      	cmp	r0, #0
    52fe:	d1f9      	bne.n	52f4 <z_vprintk+0x2c6>
				if (padding == PAD_SPACE_AFTER) {
    5300:	f1b9 0f03 	cmp.w	r9, #3
    5304:	d001      	beq.n	530a <z_vprintk+0x2dc>
			might_format = 0;
    5306:	2500      	movs	r5, #0
    5308:	e7d1      	b.n	52ae <z_vprintk+0x280>
					int remaining = min_width - (s - start);
    530a:	eba5 030b 	sub.w	r3, r5, fp
    530e:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
    5312:	e003      	b.n	531c <z_vprintk+0x2ee>
						out(' ', ctx);
    5314:	4631      	mov	r1, r6
    5316:	2020      	movs	r0, #32
    5318:	47b8      	blx	r7
					while (remaining-- > 0) {
    531a:	462b      	mov	r3, r5
    531c:	1e5d      	subs	r5, r3, #1
    531e:	2b00      	cmp	r3, #0
    5320:	dcf8      	bgt.n	5314 <z_vprintk+0x2e6>
			might_format = 0;
    5322:	2500      	movs	r5, #0
    5324:	e7c3      	b.n	52ae <z_vprintk+0x280>
				int c = va_arg(ap, int);
    5326:	9b03      	ldr	r3, [sp, #12]
    5328:	1d1a      	adds	r2, r3, #4
    532a:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    532c:	4631      	mov	r1, r6
    532e:	6818      	ldr	r0, [r3, #0]
    5330:	47b8      	blx	r7
			might_format = 0;
    5332:	2500      	movs	r5, #0
				break;
    5334:	e7bb      	b.n	52ae <z_vprintk+0x280>
				out((int)'%', ctx);
    5336:	4631      	mov	r1, r6
    5338:	2025      	movs	r0, #37	; 0x25
    533a:	47b8      	blx	r7
			might_format = 0;
    533c:	2500      	movs	r5, #0
				break;
    533e:	e7b6      	b.n	52ae <z_vprintk+0x280>
				out((int)'%', ctx);
    5340:	4631      	mov	r1, r6
    5342:	2025      	movs	r0, #37	; 0x25
    5344:	47b8      	blx	r7
				out((int)*fmt, ctx);
    5346:	4631      	mov	r1, r6
    5348:	7820      	ldrb	r0, [r4, #0]
    534a:	47b8      	blx	r7
			might_format = 0;
    534c:	2500      	movs	r5, #0
				break;
    534e:	e7ae      	b.n	52ae <z_vprintk+0x280>
				length_mod = 0;
    5350:	f04f 0800 	mov.w	r8, #0
				min_width = -1;
    5354:	f04f 3aff 	mov.w	sl, #4294967295
				padding = PAD_NONE;
    5358:	46c1      	mov	r9, r8
				might_format = 1;
    535a:	2501      	movs	r5, #1
    535c:	e7a7      	b.n	52ae <z_vprintk+0x280>
				padding = PAD_SPACE_AFTER;
    535e:	f04f 0903 	mov.w	r9, #3
    5362:	e7a4      	b.n	52ae <z_vprintk+0x280>
					length_mod = *fmt;
    5364:	4680      	mov	r8, r0
    5366:	e7a2      	b.n	52ae <z_vprintk+0x280>
}
    5368:	b005      	add	sp, #20
    536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000536e <printk>:
{
    536e:	b40f      	push	{r0, r1, r2, r3}
    5370:	b500      	push	{lr}
    5372:	b083      	sub	sp, #12
    5374:	a904      	add	r1, sp, #16
    5376:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    537a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    537c:	f7fc f9dc 	bl	1738 <vprintk>
}
    5380:	b003      	add	sp, #12
    5382:	f85d eb04 	ldr.w	lr, [sp], #4
    5386:	b004      	add	sp, #16
    5388:	4770      	bx	lr

0000538a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    538a:	4770      	bx	lr

0000538c <z_platform_init>:
{
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
    538c:	b508      	push	{r3, lr}
	SystemInit();
    538e:	f7fe fd13 	bl	3db8 <SystemInit>
}
    5392:	bd08      	pop	{r3, pc}

00005394 <dummy_timestamp>:
}
    5394:	2000      	movs	r0, #0
    5396:	4770      	bx	lr

00005398 <k_cycle_get_32_wrapper>:
{
    5398:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    539a:	f7fc fe03 	bl	1fa4 <z_timer_cycle_get_32>
}
    539e:	bd08      	pop	{r3, pc}

000053a0 <log_string_sync>:
{
    53a0:	b40e      	push	{r1, r2, r3}
    53a2:	b500      	push	{lr}
    53a4:	b082      	sub	sp, #8
    53a6:	aa03      	add	r2, sp, #12
    53a8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    53ac:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
    53ae:	f7fc f9e7 	bl	1780 <log_generic>
}
    53b2:	b002      	add	sp, #8
    53b4:	f85d eb04 	ldr.w	lr, [sp], #4
    53b8:	b003      	add	sp, #12
    53ba:	4770      	bx	lr

000053bc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    53bc:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    53be:	f7fc fa4b 	bl	1858 <log_init>
	}

	return 0;
}
    53c2:	2000      	movs	r0, #0
    53c4:	bd08      	pop	{r3, pc}

000053c6 <buffer_write>:
{
    53c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53c8:	4607      	mov	r7, r0
    53ca:	460d      	mov	r5, r1
    53cc:	4614      	mov	r4, r2
    53ce:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    53d0:	4632      	mov	r2, r6
    53d2:	4621      	mov	r1, r4
    53d4:	4628      	mov	r0, r5
    53d6:	47b8      	blx	r7
		buf += processed;
    53d8:	4405      	add	r5, r0
	} while (len != 0);
    53da:	1a24      	subs	r4, r4, r0
    53dc:	d1f8      	bne.n	53d0 <buffer_write+0xa>
}
    53de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000053e0 <ends_with_newline>:
	char c = '\0';
    53e0:	2200      	movs	r2, #0
	while (*fmt != '\0') {
    53e2:	e001      	b.n	53e8 <ends_with_newline+0x8>
		fmt++;
    53e4:	3001      	adds	r0, #1
		c = *fmt;
    53e6:	461a      	mov	r2, r3
	while (*fmt != '\0') {
    53e8:	7803      	ldrb	r3, [r0, #0]
    53ea:	2b00      	cmp	r3, #0
    53ec:	d1fa      	bne.n	53e4 <ends_with_newline+0x4>
}
    53ee:	2a0a      	cmp	r2, #10
    53f0:	bf14      	ite	ne
    53f2:	2000      	movne	r0, #0
    53f4:	2001      	moveq	r0, #1
    53f6:	4770      	bx	lr

000053f8 <color_prefix>:
{
    53f8:	b508      	push	{r3, lr}
	color_print(log_output, color, true, level);
    53fa:	4613      	mov	r3, r2
    53fc:	2201      	movs	r2, #1
    53fe:	f7fc fadb 	bl	19b8 <color_print>
}
    5402:	bd08      	pop	{r3, pc}

00005404 <color_postfix>:
{
    5404:	b508      	push	{r3, lr}
	color_print(log_output, color, false, level);
    5406:	4613      	mov	r3, r2
    5408:	2200      	movs	r2, #0
    540a:	f7fc fad5 	bl	19b8 <color_print>
}
    540e:	bd08      	pop	{r3, pc}

00005410 <postfix_print>:
{
    5410:	b538      	push	{r3, r4, r5, lr}
    5412:	4605      	mov	r5, r0
    5414:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    5416:	f001 0101 	and.w	r1, r1, #1
    541a:	f7ff fff3 	bl	5404 <color_postfix>
	newline_print(log_output, flags);
    541e:	4621      	mov	r1, r4
    5420:	4628      	mov	r0, r5
    5422:	f7fc fadf 	bl	19e4 <newline_print>
}
    5426:	bd38      	pop	{r3, r4, r5, pc}

00005428 <prefix_print>:
{
    5428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    542c:	b083      	sub	sp, #12
    542e:	4604      	mov	r4, r0
    5430:	4617      	mov	r7, r2
    5432:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5436:	f001 0801 	and.w	r8, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    543a:	f3c1 06c0 	ubfx	r6, r1, #3, #1
	if (stamp) {
    543e:	f011 0f02 	tst.w	r1, #2
    5442:	d115      	bne.n	5470 <prefix_print+0x48>
	u32_t length = 0U;
    5444:	f04f 0900 	mov.w	r9, #0
		color_prefix(log_output, colors_on, level);
    5448:	462a      	mov	r2, r5
    544a:	4641      	mov	r1, r8
    544c:	4620      	mov	r0, r4
    544e:	f7ff ffd3 	bl	53f8 <color_prefix>
		length += ids_print(log_output, level_on, func_on,
    5452:	9501      	str	r5, [sp, #4]
    5454:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5458:	9300      	str	r3, [sp, #0]
    545a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    545e:	463a      	mov	r2, r7
    5460:	4631      	mov	r1, r6
    5462:	4620      	mov	r0, r4
    5464:	f7fc fb30 	bl	1ac8 <ids_print>
}
    5468:	4448      	add	r0, r9
    546a:	b003      	add	sp, #12
    546c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    5470:	461a      	mov	r2, r3
    5472:	f7fc fa5b 	bl	192c <timestamp_print>
    5476:	4681      	mov	r9, r0
    5478:	e7e6      	b.n	5448 <prefix_print+0x20>

0000547a <log_output_flush>:
{
    547a:	b510      	push	{r4, lr}
    547c:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    547e:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    5480:	6853      	ldr	r3, [r2, #4]
    5482:	6812      	ldr	r2, [r2, #0]
    5484:	6881      	ldr	r1, [r0, #8]
    5486:	6800      	ldr	r0, [r0, #0]
    5488:	f7ff ff9d 	bl	53c6 <buffer_write>
	log_output->control_block->offset = 0;
    548c:	6863      	ldr	r3, [r4, #4]
    548e:	2200      	movs	r2, #0
    5490:	601a      	str	r2, [r3, #0]
}
    5492:	bd10      	pop	{r4, pc}

00005494 <out_func>:
{
    5494:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    5496:	688a      	ldr	r2, [r1, #8]
    5498:	684b      	ldr	r3, [r1, #4]
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    549e:	684a      	ldr	r2, [r1, #4]
    54a0:	6813      	ldr	r3, [r2, #0]
    54a2:	3301      	adds	r3, #1
    54a4:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    54a6:	684b      	ldr	r3, [r1, #4]
    54a8:	681a      	ldr	r2, [r3, #0]
    54aa:	68cb      	ldr	r3, [r1, #12]
    54ac:	429a      	cmp	r2, r3
    54ae:	d001      	beq.n	54b4 <out_func+0x20>
}
    54b0:	2000      	movs	r0, #0
    54b2:	bd08      	pop	{r3, pc}
    54b4:	4608      	mov	r0, r1
		log_output_flush(out_ctx);
    54b6:	f7ff ffe0 	bl	547a <log_output_flush>
    54ba:	e7f9      	b.n	54b0 <out_func+0x1c>

000054bc <char_out>:
{
    54bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54be:	4607      	mov	r7, r0
    54c0:	460e      	mov	r6, r1
    54c2:	4615      	mov	r5, r2
	for (size_t i = 0; i < length; i++) {
    54c4:	2400      	movs	r4, #0
    54c6:	e005      	b.n	54d4 <char_out+0x18>
		uart_poll_out(dev, data[i]);
    54c8:	5d39      	ldrb	r1, [r7, r4]
	const struct uart_driver_api *api =
    54ca:	686b      	ldr	r3, [r5, #4]
	api->poll_out(dev, out_char);
    54cc:	685b      	ldr	r3, [r3, #4]
    54ce:	4628      	mov	r0, r5
    54d0:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    54d2:	3401      	adds	r4, #1
    54d4:	42b4      	cmp	r4, r6
    54d6:	d3f7      	bcc.n	54c8 <char_out+0xc>
}
    54d8:	4630      	mov	r0, r6
    54da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000054dc <should_bail>:
	if (info->start_offset < data->area_off) {
    54dc:	6800      	ldr	r0, [r0, #0]
    54de:	684b      	ldr	r3, [r1, #4]
    54e0:	4298      	cmp	r0, r3
    54e2:	d30f      	bcc.n	5504 <should_bail+0x28>
{
    54e4:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    54e6:	688c      	ldr	r4, [r1, #8]
    54e8:	4423      	add	r3, r4
    54ea:	4298      	cmp	r0, r3
    54ec:	d20d      	bcs.n	550a <should_bail+0x2e>
	} else if (data->ret_idx >= data->ret_len) {
    54ee:	6908      	ldr	r0, [r1, #16]
    54f0:	694b      	ldr	r3, [r1, #20]
    54f2:	4298      	cmp	r0, r3
    54f4:	d30f      	bcc.n	5516 <should_bail+0x3a>
		data->status = -ENOMEM;
    54f6:	f06f 030b 	mvn.w	r3, #11
    54fa:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    54fc:	2300      	movs	r3, #0
    54fe:	7013      	strb	r3, [r2, #0]
		return true;
    5500:	2001      	movs	r0, #1
    5502:	e005      	b.n	5510 <should_bail+0x34>
		*bail_value = true;
    5504:	2001      	movs	r0, #1
    5506:	7010      	strb	r0, [r2, #0]
}
    5508:	4770      	bx	lr
		*bail_value = false;
    550a:	2300      	movs	r3, #0
    550c:	7013      	strb	r3, [r2, #0]
		return true;
    550e:	2001      	movs	r0, #1
}
    5510:	f85d 4b04 	ldr.w	r4, [sp], #4
    5514:	4770      	bx	lr
	return false;
    5516:	2000      	movs	r0, #0
    5518:	e7fa      	b.n	5510 <should_bail+0x34>

0000551a <get_sectors_cb>:
{
    551a:	b570      	push	{r4, r5, r6, lr}
    551c:	b082      	sub	sp, #8
    551e:	4606      	mov	r6, r0
    5520:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    5522:	68cd      	ldr	r5, [r1, #12]
	if (should_bail(info, data, &bail)) {
    5524:	f10d 0207 	add.w	r2, sp, #7
    5528:	f7ff ffd8 	bl	54dc <should_bail>
    552c:	b980      	cbnz	r0, 5550 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    552e:	6833      	ldr	r3, [r6, #0]
    5530:	6861      	ldr	r1, [r4, #4]
    5532:	6922      	ldr	r2, [r4, #16]
    5534:	1a5b      	subs	r3, r3, r1
    5536:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    553a:	6923      	ldr	r3, [r4, #16]
    553c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    5540:	6873      	ldr	r3, [r6, #4]
    5542:	606b      	str	r3, [r5, #4]
	data->ret_idx++;
    5544:	6923      	ldr	r3, [r4, #16]
    5546:	3301      	adds	r3, #1
    5548:	6123      	str	r3, [r4, #16]
	return true;
    554a:	2001      	movs	r0, #1
}
    554c:	b002      	add	sp, #8
    554e:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    5550:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5554:	e7fa      	b.n	554c <get_sectors_cb+0x32>

00005556 <flash_area_layout>:
{
    5556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5558:	460d      	mov	r5, r1
    555a:	4616      	mov	r6, r2
    555c:	461f      	mov	r7, r3
    555e:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    5560:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    5562:	f7fc fbc5 	bl	1cf0 <get_flash_area_from_id>
	if (fa == NULL) {
    5566:	b1b8      	cbz	r0, 5598 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    5568:	6842      	ldr	r2, [r0, #4]
    556a:	6062      	str	r2, [r4, #4]
	cb_data->area_len = fa->fa_size;
    556c:	6882      	ldr	r2, [r0, #8]
    556e:	60a2      	str	r2, [r4, #8]
	cb_data->ret = ret;
    5570:	60e6      	str	r6, [r4, #12]
	cb_data->ret_idx = 0U;
    5572:	2200      	movs	r2, #0
    5574:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    5576:	6829      	ldr	r1, [r5, #0]
    5578:	6161      	str	r1, [r4, #20]
	cb_data->status = 0;
    557a:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    557c:	68c0      	ldr	r0, [r0, #12]
    557e:	f7fe fd1b 	bl	3fb8 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    5582:	b160      	cbz	r0, 559e <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    5584:	4622      	mov	r2, r4
    5586:	4639      	mov	r1, r7
    5588:	f000 fb77 	bl	5c7a <flash_page_foreach>
	if (cb_data->status == 0) {
    558c:	69a3      	ldr	r3, [r4, #24]
    558e:	b90b      	cbnz	r3, 5594 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    5590:	6923      	ldr	r3, [r4, #16]
    5592:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    5594:	69a0      	ldr	r0, [r4, #24]
}
    5596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    5598:	f06f 0015 	mvn.w	r0, #21
    559c:	e7fb      	b.n	5596 <flash_area_layout+0x40>
		return -ENODEV;
    559e:	f06f 0012 	mvn.w	r0, #18
    55a2:	e7f8      	b.n	5596 <flash_area_layout+0x40>

000055a4 <flash_area_close>:
}
    55a4:	4770      	bx	lr

000055a6 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    55a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    55a8:	6884      	ldr	r4, [r0, #8]
    55aa:	428c      	cmp	r4, r1
    55ac:	d304      	bcc.n	55b8 <flash_area_read+0x12>
    55ae:	185d      	adds	r5, r3, r1
    55b0:	42ac      	cmp	r4, r5
    55b2:	d212      	bcs.n	55da <flash_area_read+0x34>
    55b4:	2400      	movs	r4, #0
    55b6:	e000      	b.n	55ba <flash_area_read+0x14>
    55b8:	2400      	movs	r4, #0
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    55ba:	b184      	cbz	r4, 55de <flash_area_read+0x38>
    55bc:	461e      	mov	r6, r3
    55be:	4617      	mov	r7, r2
    55c0:	460d      	mov	r5, r1
    55c2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    55c4:	68c0      	ldr	r0, [r0, #12]
    55c6:	f7fe fcf7 	bl	3fb8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    55ca:	6861      	ldr	r1, [r4, #4]
    55cc:	4429      	add	r1, r5
			 size_t len);

static inline int z_impl_flash_read(struct device *dev, off_t offset, void *data,
			     size_t len)
{
	const struct flash_driver_api *api = dev->driver_api;
    55ce:	6843      	ldr	r3, [r0, #4]

	return api->read(dev, offset, data, len);
    55d0:	681c      	ldr	r4, [r3, #0]
    55d2:	4633      	mov	r3, r6
    55d4:	463a      	mov	r2, r7
    55d6:	47a0      	blx	r4
}
    55d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    55da:	2401      	movs	r4, #1
    55dc:	e7ed      	b.n	55ba <flash_area_read+0x14>
		return -EINVAL;
    55de:	f06f 0015 	mvn.w	r0, #21
    55e2:	e7f9      	b.n	55d8 <flash_area_read+0x32>

000055e4 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    55e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    55e8:	6884      	ldr	r4, [r0, #8]
    55ea:	428c      	cmp	r4, r1
    55ec:	d304      	bcc.n	55f8 <flash_area_write+0x14>
    55ee:	185d      	adds	r5, r3, r1
    55f0:	42ac      	cmp	r4, r5
    55f2:	d222      	bcs.n	563a <flash_area_write+0x56>
    55f4:	2400      	movs	r4, #0
    55f6:	e000      	b.n	55fa <flash_area_write+0x16>
    55f8:	2400      	movs	r4, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    55fa:	b304      	cbz	r4, 563e <flash_area_write+0x5a>
    55fc:	461e      	mov	r6, r3
    55fe:	4617      	mov	r7, r2
    5600:	4688      	mov	r8, r1
    5602:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5604:	68c0      	ldr	r0, [r0, #12]
    5606:	f7fe fcd7 	bl	3fb8 <z_impl_device_get_binding>
    560a:	4605      	mov	r5, r0
__syscall int flash_write_protection_set(struct device *dev, bool enable);

static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;
    560c:	6843      	ldr	r3, [r0, #4]

	return api->write_protection(dev, enable);
    560e:	68db      	ldr	r3, [r3, #12]
    5610:	2100      	movs	r1, #0
    5612:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5614:	4681      	mov	r9, r0
    5616:	b968      	cbnz	r0, 5634 <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5618:	6861      	ldr	r1, [r4, #4]
    561a:	4441      	add	r1, r8
	const struct flash_driver_api *api = dev->driver_api;
    561c:	686b      	ldr	r3, [r5, #4]
	return api->write(dev, offset, data, len);
    561e:	685c      	ldr	r4, [r3, #4]
    5620:	4633      	mov	r3, r6
    5622:	463a      	mov	r2, r7
    5624:	4628      	mov	r0, r5
    5626:	47a0      	blx	r4
    5628:	4681      	mov	r9, r0
	const struct flash_driver_api *api = dev->driver_api;
    562a:	686b      	ldr	r3, [r5, #4]
	return api->write_protection(dev, enable);
    562c:	68db      	ldr	r3, [r3, #12]
    562e:	2101      	movs	r1, #1
    5630:	4628      	mov	r0, r5
    5632:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5634:	4648      	mov	r0, r9
    5636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    563a:	2401      	movs	r4, #1
    563c:	e7dd      	b.n	55fa <flash_area_write+0x16>
		return -EINVAL;
    563e:	f06f 0915 	mvn.w	r9, #21
    5642:	e7f7      	b.n	5634 <flash_area_write+0x50>

00005644 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5648:	6883      	ldr	r3, [r0, #8]
    564a:	428b      	cmp	r3, r1
    564c:	d304      	bcc.n	5658 <flash_area_erase+0x14>
    564e:	1854      	adds	r4, r2, r1
    5650:	42a3      	cmp	r3, r4
    5652:	d220      	bcs.n	5696 <flash_area_erase+0x52>
    5654:	2300      	movs	r3, #0
    5656:	e000      	b.n	565a <flash_area_erase+0x16>
    5658:	2300      	movs	r3, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    565a:	b1f3      	cbz	r3, 569a <flash_area_erase+0x56>
    565c:	4617      	mov	r7, r2
    565e:	460e      	mov	r6, r1
    5660:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5662:	68c0      	ldr	r0, [r0, #12]
    5664:	f7fe fca8 	bl	3fb8 <z_impl_device_get_binding>
    5668:	4605      	mov	r5, r0
	const struct flash_driver_api *api = dev->driver_api;
    566a:	6843      	ldr	r3, [r0, #4]
	return api->write_protection(dev, enable);
    566c:	68db      	ldr	r3, [r3, #12]
    566e:	2100      	movs	r1, #0
    5670:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5672:	4680      	mov	r8, r0
    5674:	b960      	cbnz	r0, 5690 <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    5676:	6861      	ldr	r1, [r4, #4]
    5678:	4431      	add	r1, r6
	const struct flash_driver_api *api = dev->driver_api;
    567a:	686b      	ldr	r3, [r5, #4]
	return api->erase(dev, offset, size);
    567c:	689b      	ldr	r3, [r3, #8]
    567e:	463a      	mov	r2, r7
    5680:	4628      	mov	r0, r5
    5682:	4798      	blx	r3
    5684:	4680      	mov	r8, r0
	const struct flash_driver_api *api = dev->driver_api;
    5686:	686b      	ldr	r3, [r5, #4]
	return api->write_protection(dev, enable);
    5688:	68db      	ldr	r3, [r3, #12]
    568a:	2101      	movs	r1, #1
    568c:	4628      	mov	r0, r5
    568e:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5690:	4640      	mov	r0, r8
    5692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5696:	2301      	movs	r3, #1
    5698:	e7df      	b.n	565a <flash_area_erase+0x16>
		return -EINVAL;
    569a:	f06f 0815 	mvn.w	r8, #21
    569e:	e7f7      	b.n	5690 <flash_area_erase+0x4c>

000056a0 <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
    56a0:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    56a2:	68c0      	ldr	r0, [r0, #12]
    56a4:	f7fe fc88 	bl	3fb8 <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;
    56a8:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
    56aa:	7d18      	ldrb	r0, [r3, #20]
    56ac:	bd08      	pop	{r3, pc}

000056ae <clock_event_check_and_clean>:
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    56ae:	f100 2250 	add.w	r2, r0, #1342197760	; 0x50005000
    56b2:	6813      	ldr	r3, [r2, #0]
	bool ret = nrf_clock_event_check(evt) &&
    56b4:	b143      	cbz	r3, 56c8 <clock_event_check_and_clean+0x1a>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    56b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56ba:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    56be:	b2c9      	uxtb	r1, r1
    56c0:	4219      	tst	r1, r3
    56c2:	d007      	beq.n	56d4 <clock_event_check_and_clean+0x26>
    56c4:	2301      	movs	r3, #1
    56c6:	e000      	b.n	56ca <clock_event_check_and_clean+0x1c>
    56c8:	2300      	movs	r3, #0
	if (ret) {
    56ca:	4618      	mov	r0, r3
    56cc:	b10b      	cbz	r3, 56d2 <clock_event_check_and_clean+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    56ce:	2300      	movs	r3, #0
    56d0:	6013      	str	r3, [r2, #0]
}
    56d2:	4770      	bx	lr
	bool ret = nrf_clock_event_check(evt) &&
    56d4:	2300      	movs	r3, #0
    56d6:	e7f8      	b.n	56ca <clock_event_check_and_clean+0x1c>

000056d8 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    56d8:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    56da:	7a5a      	ldrb	r2, [r3, #9]
    56dc:	b92a      	cbnz	r2, 56ea <get_status+0x12>
	if (data->ref > 0) {
    56de:	f993 3008 	ldrsb.w	r3, [r3, #8]
    56e2:	2b00      	cmp	r3, #0
    56e4:	dd03      	ble.n	56ee <get_status+0x16>
		return CLOCK_CONTROL_STATUS_STARTING;
    56e6:	2000      	movs	r0, #0
    56e8:	4770      	bx	lr
		return CLOCK_CONTROL_STATUS_ON;
    56ea:	2002      	movs	r0, #2
    56ec:	4770      	bx	lr
	return CLOCK_CONTROL_STATUS_OFF;
    56ee:	2001      	movs	r0, #1
}
    56f0:	4770      	bx	lr

000056f2 <clock_stop>:
{
    56f2:	b570      	push	{r4, r5, r6, lr}
						dev->config->config_info;
    56f4:	6803      	ldr	r3, [r0, #0]
	const struct nrf_clock_control_config *config =
    56f6:	689e      	ldr	r6, [r3, #8]
	struct nrf_clock_control *data = dev->driver_data;
    56f8:	6884      	ldr	r4, [r0, #8]
    56fa:	f04f 0320 	mov.w	r3, #32
    56fe:	f3ef 8511 	mrs	r5, BASEPRI
    5702:	f383 8811 	msr	BASEPRI, r3
    5706:	f3bf 8f6f 	isb	sy
	data->ref--;
    570a:	f994 3008 	ldrsb.w	r3, [r4, #8]
    570e:	3b01      	subs	r3, #1
    5710:	b25b      	sxtb	r3, r3
    5712:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    5714:	b9b3      	cbnz	r3, 5744 <clock_stop+0x52>
	list->head = NULL;
    5716:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    5718:	6063      	str	r3, [r4, #4]
		do_stop =  (config->stop_handler) ?
    571a:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
    571c:	b10b      	cbz	r3, 5722 <clock_stop+0x30>
    571e:	4798      	blx	r3
    5720:	b148      	cbz	r0, 5736 <clock_stop+0x44>
			nrf_clock_task_trigger(config->stop_tsk);
    5722:	7af3      	ldrb	r3, [r6, #11]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    5724:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5728:	2201      	movs	r2, #1
    572a:	601a      	str	r2, [r3, #0]
			nrf_clock_event_clear(config->started_evt);
    572c:	8933      	ldrh	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    572e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5732:	2200      	movs	r2, #0
    5734:	601a      	str	r2, [r3, #0]
		data->started = false;
    5736:	2000      	movs	r0, #0
    5738:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    573a:	f385 8811 	msr	BASEPRI, r5
    573e:	f3bf 8f6f 	isb	sy
}
    5742:	bd70      	pop	{r4, r5, r6, pc}
	} else if (data->ref < 0) {
    5744:	2b00      	cmp	r3, #0
    5746:	db01      	blt.n	574c <clock_stop+0x5a>
	int err = 0;
    5748:	2000      	movs	r0, #0
    574a:	e7f6      	b.n	573a <clock_stop+0x48>
		data->ref = 0;
    574c:	2300      	movs	r3, #0
    574e:	7223      	strb	r3, [r4, #8]
		err = -EALREADY;
    5750:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5754:	e7f1      	b.n	573a <clock_stop+0x48>

00005756 <is_in_list>:
	return list->head;
    5756:	6803      	ldr	r3, [r0, #0]
		if (item == node) {
    5758:	428b      	cmp	r3, r1
    575a:	d005      	beq.n	5768 <is_in_list+0x12>
Z_GENLIST_PEEK_NEXT(slist, snode)
    575c:	b133      	cbz	r3, 576c <is_in_list+0x16>
	return node->next;
    575e:	681b      	ldr	r3, [r3, #0]
	} while (item);
    5760:	2b00      	cmp	r3, #0
    5762:	d1f9      	bne.n	5758 <is_in_list+0x2>
	return false;
    5764:	2000      	movs	r0, #0
    5766:	4770      	bx	lr
			return true;
    5768:	2001      	movs	r0, #1
    576a:	4770      	bx	lr
	return false;
    576c:	2000      	movs	r0, #0
}
    576e:	4770      	bx	lr

00005770 <clock_async_start>:
{
    5770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5772:	4606      	mov	r6, r0
    5774:	4615      	mov	r5, r2
						dev->config->config_info;
    5776:	6803      	ldr	r3, [r0, #0]
	const struct nrf_clock_control_config *config =
    5778:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    577a:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    577c:	f04f 0320 	mov.w	r3, #32
    5780:	f3ef 8211 	mrs	r2, BASEPRI
    5784:	f383 8811 	msr	BASEPRI, r3
    5788:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    578c:	f994 3008 	ldrsb.w	r3, [r4, #8]
    5790:	3301      	adds	r3, #1
    5792:	b25b      	sxtb	r3, r3
    5794:	7223      	strb	r3, [r4, #8]
	__asm__ volatile(
    5796:	f382 8811 	msr	BASEPRI, r2
    579a:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    579e:	7a62      	ldrb	r2, [r4, #9]
    57a0:	b12a      	cbz	r2, 57ae <clock_async_start+0x3e>
		if (data) {
    57a2:	b345      	cbz	r5, 57f6 <clock_async_start+0x86>
			data->cb(dev, data->user_data);
    57a4:	686b      	ldr	r3, [r5, #4]
    57a6:	68a9      	ldr	r1, [r5, #8]
    57a8:	4798      	blx	r3
	return 0;
    57aa:	2000      	movs	r0, #0
}
    57ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ref == 1) {
    57ae:	2b01      	cmp	r3, #1
    57b0:	d00d      	beq.n	57ce <clock_async_start+0x5e>
		if (data) {
    57b2:	b315      	cbz	r5, 57fa <clock_async_start+0x8a>
			if (is_in_list(&clk_data->list, &data->node)) {
    57b4:	4629      	mov	r1, r5
    57b6:	4620      	mov	r0, r4
    57b8:	f7ff ffcd 	bl	5756 <is_in_list>
    57bc:	b9f8      	cbnz	r0, 57fe <clock_async_start+0x8e>
	parent->next = child;
    57be:	2300      	movs	r3, #0
    57c0:	602b      	str	r3, [r5, #0]
	return list->tail;
    57c2:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    57c4:	b1a3      	cbz	r3, 57f0 <clock_async_start+0x80>
	parent->next = child;
    57c6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    57c8:	6065      	str	r5, [r4, #4]
	return 0;
    57ca:	2000      	movs	r0, #0
    57cc:	e7ee      	b.n	57ac <clock_async_start+0x3c>
			do_start =  (config->start_handler) ?
    57ce:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    57d0:	b10b      	cbz	r3, 57d6 <clock_async_start+0x66>
    57d2:	4798      	blx	r3
    57d4:	b128      	cbz	r0, 57e2 <clock_async_start+0x72>
				nrf_clock_task_trigger(config->start_tsk);
    57d6:	7abb      	ldrb	r3, [r7, #10]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    57d8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    57dc:	2201      	movs	r2, #1
    57de:	601a      	str	r2, [r3, #0]
    57e0:	e7e7      	b.n	57b2 <clock_async_start+0x42>
			} else if (data) {
    57e2:	2d00      	cmp	r5, #0
    57e4:	d0e5      	beq.n	57b2 <clock_async_start+0x42>
				data->cb(dev, data->user_data);
    57e6:	686b      	ldr	r3, [r5, #4]
    57e8:	68a9      	ldr	r1, [r5, #8]
    57ea:	4630      	mov	r0, r6
    57ec:	4798      	blx	r3
    57ee:	e7e0      	b.n	57b2 <clock_async_start+0x42>
    57f0:	6065      	str	r5, [r4, #4]
	list->head = node;
    57f2:	6025      	str	r5, [r4, #0]
    57f4:	e7da      	b.n	57ac <clock_async_start+0x3c>
	return 0;
    57f6:	2000      	movs	r0, #0
    57f8:	e7d8      	b.n	57ac <clock_async_start+0x3c>
    57fa:	2000      	movs	r0, #0
    57fc:	e7d6      	b.n	57ac <clock_async_start+0x3c>
				return -EALREADY;
    57fe:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5802:	e7d3      	b.n	57ac <clock_async_start+0x3c>

00005804 <clock_start>:
{
    5804:	b508      	push	{r3, lr}
	return clock_async_start(dev, sub_system, NULL);
    5806:	2200      	movs	r2, #0
    5808:	f7ff ffb2 	bl	5770 <clock_async_start>
}
    580c:	bd08      	pop	{r3, pc}

0000580e <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    580e:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    5810:	2000      	movs	r0, #0
    5812:	6018      	str	r0, [r3, #0]
	list->tail = NULL;
    5814:	6058      	str	r0, [r3, #4]
}
    5816:	4770      	bx	lr

00005818 <clkstarted_handle>:
{
    5818:	b538      	push	{r3, r4, r5, lr}
    581a:	4605      	mov	r5, r0
	struct nrf_clock_control *data = dev->driver_data;
    581c:	6884      	ldr	r4, [r0, #8]
	return list->head;
    581e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5820:	b123      	cbz	r3, 582c <clkstarted_handle+0x14>
	return node->next;
    5822:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    5824:	6022      	str	r2, [r4, #0]
	return list->tail;
    5826:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5828:	428b      	cmp	r3, r1
    582a:	d00f      	beq.n	584c <clkstarted_handle+0x34>
	data->started = true;
    582c:	2201      	movs	r2, #1
    582e:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    5830:	b173      	cbz	r3, 5850 <clkstarted_handle+0x38>
		async_data->cb(dev, async_data->user_data);
    5832:	685a      	ldr	r2, [r3, #4]
    5834:	6899      	ldr	r1, [r3, #8]
    5836:	4628      	mov	r0, r5
    5838:	4790      	blx	r2
	return list->head;
    583a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    583c:	b143      	cbz	r3, 5850 <clkstarted_handle+0x38>
	return node->next;
    583e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    5840:	6022      	str	r2, [r4, #0]
	return list->tail;
    5842:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5844:	4299      	cmp	r1, r3
    5846:	d1f3      	bne.n	5830 <clkstarted_handle+0x18>
	list->tail = node;
    5848:	6062      	str	r2, [r4, #4]
    584a:	e7f1      	b.n	5830 <clkstarted_handle+0x18>
    584c:	6062      	str	r2, [r4, #4]
    584e:	e7ed      	b.n	582c <clkstarted_handle+0x14>
}
    5850:	bd38      	pop	{r3, r4, r5, pc}

00005852 <hfclk_init>:
{
    5852:	b510      	push	{r4, lr}
    5854:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    5856:	2200      	movs	r2, #0
    5858:	2101      	movs	r1, #1
    585a:	2005      	movs	r0, #5
    585c:	f7fc fc52 	bl	2104 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    5860:	2005      	movs	r0, #5
    5862:	f7fc fc3f 	bl	20e4 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    5866:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    586a:	2202      	movs	r2, #2
    586c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    5870:	2203      	movs	r2, #3
    5872:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    5876:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    5878:	2000      	movs	r0, #0
    587a:	6018      	str	r0, [r3, #0]
	list->tail = NULL;
    587c:	6058      	str	r0, [r3, #4]
}
    587e:	bd10      	pop	{r4, pc}

00005880 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5880:	4770      	bx	lr

00005882 <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    5882:	4770      	bx	lr

00005884 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5884:	1a40      	subs	r0, r0, r1
}
    5886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    588a:	4770      	bx	lr

0000588c <z_irq_spurious>:
 * See z_arm_reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
    588c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	z_arm_reserved();
    588e:	f7fc fbe3 	bl	2058 <z_arm_bus_fault>
}
    5892:	bd08      	pop	{r3, pc}

00005894 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5894:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5896:	f002 f8df 	bl	7a58 <z_fatal_error>
}
    589a:	bd08      	pop	{r3, pc}

0000589c <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    589c:	b508      	push	{r3, lr}
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    589e:	4601      	mov	r1, r0
    58a0:	6800      	ldr	r0, [r0, #0]
    58a2:	f7ff fff7 	bl	5894 <z_arm_fatal_error>
}
    58a6:	bd08      	pop	{r3, pc}

000058a8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    58a8:	b508      	push	{r3, lr}
	handler();
    58aa:	f7fc fbe9 	bl	2080 <z_SysNmiOnReset>
	z_arm_exc_exit();
    58ae:	f7fc fb91 	bl	1fd4 <z_arm_exc_exit>
}
    58b2:	bd08      	pop	{r3, pc}

000058b4 <memory_fault_recoverable>:
}
    58b4:	2000      	movs	r0, #0
    58b6:	4770      	bx	lr

000058b8 <fault_handle>:
{
    58b8:	b508      	push	{r3, lr}
	*recoverable = false;
    58ba:	2300      	movs	r3, #0
    58bc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    58be:	3903      	subs	r1, #3
    58c0:	2903      	cmp	r1, #3
    58c2:	d812      	bhi.n	58ea <fault_handle+0x32>
    58c4:	e8df f001 	tbb	[pc, r1]
    58c8:	0e0a0602 	.word	0x0e0a0602
		reason = hard_fault(esf, recoverable);
    58cc:	4611      	mov	r1, r2
    58ce:	f7fc fcbd 	bl	224c <hard_fault>
}
    58d2:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    58d4:	2100      	movs	r1, #0
    58d6:	f7fc fc59 	bl	218c <mem_manage_fault>
		break;
    58da:	e7fa      	b.n	58d2 <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    58dc:	2100      	movs	r1, #0
    58de:	f7fc fc79 	bl	21d4 <bus_fault>
		break;
    58e2:	e7f6      	b.n	58d2 <fault_handle+0x1a>
		reason = usage_fault(esf);
    58e4:	f7fc fca0 	bl	2228 <usage_fault>
		break;
    58e8:	e7f3      	b.n	58d2 <fault_handle+0x1a>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    58ea:	2000      	movs	r0, #0
	return reason;
    58ec:	e7f1      	b.n	58d2 <fault_handle+0x1a>

000058ee <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    58ee:	b508      	push	{r3, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    58f0:	2100      	movs	r1, #0
    58f2:	4668      	mov	r0, sp
    58f4:	f000 f82e 	bl	5954 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    58f8:	bd08      	pop	{r3, pc}

000058fa <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    58fa:	6843      	ldr	r3, [r0, #4]
		&&
    58fc:	2b1f      	cmp	r3, #31
    58fe:	d90a      	bls.n	5916 <mpu_partition_is_valid+0x1c>
		&&
    5900:	f013 0f1f 	tst.w	r3, #31
    5904:	d001      	beq.n	590a <mpu_partition_is_valid+0x10>
		&&
    5906:	2000      	movs	r0, #0
    5908:	4770      	bx	lr
		((part->start &
    590a:	6803      	ldr	r3, [r0, #0]
		&&
    590c:	f013 0f1f 	tst.w	r3, #31
    5910:	d003      	beq.n	591a <mpu_partition_is_valid+0x20>
    5912:	2000      	movs	r0, #0
    5914:	4770      	bx	lr
    5916:	2000      	movs	r0, #0
    5918:	4770      	bx	lr
    591a:	2001      	movs	r0, #1
}
    591c:	4770      	bx	lr

0000591e <mpu_configure_region>:
{
    591e:	b530      	push	{r4, r5, lr}
    5920:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5922:	680b      	ldr	r3, [r1, #0]
    5924:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    5926:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5928:	890d      	ldrh	r5, [r1, #8]
    592a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    592e:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    5932:	7a89      	ldrb	r1, [r1, #10]
    5934:	f361 1247 	bfi	r2, r1, #5, #3
    5938:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    593c:	f023 031f 	bic.w	r3, r3, #31
    5940:	4423      	add	r3, r4
    5942:	3b01      	subs	r3, #1
    5944:	f023 031f 	bic.w	r3, r3, #31
    5948:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    594a:	4669      	mov	r1, sp
    594c:	f7fc fd30 	bl	23b0 <region_allocate_and_init>
}
    5950:	b005      	add	sp, #20
    5952:	bd30      	pop	{r4, r5, pc}

00005954 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    5954:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    5956:	f7fc fe3f 	bl	25d8 <mpu_configure_dynamic_mpu_regions>
}
    595a:	bd08      	pop	{r3, pc}

0000595c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    595c:	e001      	b.n	5962 <strcmp+0x6>
		s1++;
    595e:	3001      	adds	r0, #1
		s2++;
    5960:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5962:	7803      	ldrb	r3, [r0, #0]
    5964:	780a      	ldrb	r2, [r1, #0]
    5966:	4293      	cmp	r3, r2
    5968:	d101      	bne.n	596e <strcmp+0x12>
    596a:	2b00      	cmp	r3, #0
    596c:	d1f7      	bne.n	595e <strcmp+0x2>
	}

	return *s1 - *s2;
}
    596e:	1a98      	subs	r0, r3, r2
    5970:	4770      	bx	lr

00005972 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    5972:	b182      	cbz	r2, 5996 <memcmp+0x24>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    5974:	1e53      	subs	r3, r2, #1
    5976:	d010      	beq.n	599a <memcmp+0x28>
{
    5978:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    597a:	7804      	ldrb	r4, [r0, #0]
    597c:	780a      	ldrb	r2, [r1, #0]
    597e:	4294      	cmp	r4, r2
    5980:	d103      	bne.n	598a <memcmp+0x18>
		c1++;
    5982:	3001      	adds	r0, #1
		c2++;
    5984:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    5986:	3b01      	subs	r3, #1
    5988:	d1f7      	bne.n	597a <memcmp+0x8>
	}

	return *c1 - *c2;
    598a:	7800      	ldrb	r0, [r0, #0]
    598c:	780b      	ldrb	r3, [r1, #0]
    598e:	1ac0      	subs	r0, r0, r3
}
    5990:	f85d 4b04 	ldr.w	r4, [sp], #4
    5994:	4770      	bx	lr
		return 0;
    5996:	2000      	movs	r0, #0
    5998:	4770      	bx	lr
	return *c1 - *c2;
    599a:	7800      	ldrb	r0, [r0, #0]
    599c:	780b      	ldrb	r3, [r1, #0]
    599e:	1ac0      	subs	r0, r0, r3
}
    59a0:	4770      	bx	lr

000059a2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    59a2:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    59a4:	ea80 0301 	eor.w	r3, r0, r1
    59a8:	f013 0f03 	tst.w	r3, #3
    59ac:	d001      	beq.n	59b2 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    59ae:	4603      	mov	r3, r0
    59b0:	e017      	b.n	59e2 <memcpy+0x40>
    59b2:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    59b4:	f013 0f03 	tst.w	r3, #3
    59b8:	d00b      	beq.n	59d2 <memcpy+0x30>
			if (n == 0) {
    59ba:	b1a2      	cbz	r2, 59e6 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    59bc:	780c      	ldrb	r4, [r1, #0]
    59be:	701c      	strb	r4, [r3, #0]
			n--;
    59c0:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    59c2:	3101      	adds	r1, #1
    59c4:	3301      	adds	r3, #1
    59c6:	e7f5      	b.n	59b4 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    59c8:	680c      	ldr	r4, [r1, #0]
    59ca:	601c      	str	r4, [r3, #0]
			n -= sizeof(mem_word_t);
    59cc:	3a04      	subs	r2, #4
			*(d_word++) = *(s_word++);
    59ce:	3104      	adds	r1, #4
    59d0:	3304      	adds	r3, #4
		while (n >= sizeof(mem_word_t)) {
    59d2:	2a03      	cmp	r2, #3
    59d4:	d8f8      	bhi.n	59c8 <memcpy+0x26>
    59d6:	e004      	b.n	59e2 <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    59d8:	780c      	ldrb	r4, [r1, #0]
    59da:	701c      	strb	r4, [r3, #0]
		n--;
    59dc:	3a01      	subs	r2, #1
		*(d_byte++) = *(s_byte++);
    59de:	3101      	adds	r1, #1
    59e0:	3301      	adds	r3, #1
	while (n > 0) {
    59e2:	2a00      	cmp	r2, #0
    59e4:	d1f8      	bne.n	59d8 <memcpy+0x36>
	}

	return d;
}
    59e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    59ea:	4770      	bx	lr

000059ec <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    59ec:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    59ee:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    59f0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    59f2:	f013 0f03 	tst.w	r3, #3
    59f6:	d004      	beq.n	5a02 <memset+0x16>
		if (n == 0) {
    59f8:	b1a2      	cbz	r2, 5a24 <memset+0x38>
			return buf;
		}
		*(d_byte++) = c_byte;
    59fa:	701c      	strb	r4, [r3, #0]
		n--;
    59fc:	3a01      	subs	r2, #1
		*(d_byte++) = c_byte;
    59fe:	3301      	adds	r3, #1
    5a00:	e7f7      	b.n	59f2 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5a02:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5a04:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5a08:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5a0c:	e002      	b.n	5a14 <memset+0x28>
		*(d_word++) = c_word;
    5a0e:	6019      	str	r1, [r3, #0]
		n -= sizeof(mem_word_t);
    5a10:	3a04      	subs	r2, #4
		*(d_word++) = c_word;
    5a12:	3304      	adds	r3, #4
	while (n >= sizeof(mem_word_t)) {
    5a14:	2a03      	cmp	r2, #3
    5a16:	d8fa      	bhi.n	5a0e <memset+0x22>
    5a18:	e002      	b.n	5a20 <memset+0x34>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    5a1a:	701c      	strb	r4, [r3, #0]
		n--;
    5a1c:	3a01      	subs	r2, #1
		*(d_byte++) = c_byte;
    5a1e:	3301      	adds	r3, #1
	while (n > 0) {
    5a20:	2a00      	cmp	r2, #0
    5a22:	d1fa      	bne.n	5a1a <memset+0x2e>
	}

	return buf;
}
    5a24:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a28:	4770      	bx	lr

00005a2a <_stdout_hook_default>:
}
    5a2a:	f04f 30ff 	mov.w	r0, #4294967295
    5a2e:	4770      	bx	lr

00005a30 <gpio_nrfx_write>:
{
    5a30:	b410      	push	{r4}
	return port->config->config_info;
    5a32:	6804      	ldr	r4, [r0, #0]
    5a34:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a36:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    5a38:	6880      	ldr	r0, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5a3a:	2901      	cmp	r1, #1
    5a3c:	d011      	beq.n	5a62 <gpio_nrfx_write+0x32>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    5a3e:	3300      	adds	r3, #0
    5a40:	bf18      	it	ne
    5a42:	2301      	movne	r3, #1
    5a44:	69c1      	ldr	r1, [r0, #28]
    5a46:	40d1      	lsrs	r1, r2
    5a48:	f001 0101 	and.w	r1, r1, #1
    5a4c:	b2c9      	uxtb	r1, r1
    5a4e:	428b      	cmp	r3, r1
    5a50:	d00b      	beq.n	5a6a <gpio_nrfx_write+0x3a>
			nrf_gpio_port_out_set(reg, BIT(pin));
    5a52:	2301      	movs	r3, #1
    5a54:	fa03 f202 	lsl.w	r2, r3, r2
    p_reg->OUTSET = set_mask;
    5a58:	60a2      	str	r2, [r4, #8]
}
    5a5a:	2000      	movs	r0, #0
    5a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a60:	4770      	bx	lr
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    5a62:	69c2      	ldr	r2, [r0, #28]
    5a64:	4053      	eors	r3, r2
    p_reg->OUT = value;
    5a66:	6063      	str	r3, [r4, #4]
    5a68:	e7f7      	b.n	5a5a <gpio_nrfx_write+0x2a>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5a6a:	2301      	movs	r3, #1
    5a6c:	fa03 f202 	lsl.w	r2, r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    5a70:	60e2      	str	r2, [r4, #12]
    5a72:	e7f2      	b.n	5a5a <gpio_nrfx_write+0x2a>

00005a74 <gpio_nrfx_read>:
{
    5a74:	b4f0      	push	{r4, r5, r6, r7}
	return port->config->config_info;
    5a76:	6804      	ldr	r4, [r0, #0]
    5a78:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a7a:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    5a7c:	6886      	ldr	r6, [r0, #8]
    return p_reg->DIR;
    5a7e:	6967      	ldr	r7, [r4, #20]
    return p_reg->IN;
    5a80:	6925      	ldr	r5, [r4, #16]
    return p_reg->OUT;
    5a82:	6860      	ldr	r0, [r4, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5a84:	4068      	eors	r0, r5
    5a86:	4038      	ands	r0, r7
    5a88:	4068      	eors	r0, r5
    5a8a:	69f4      	ldr	r4, [r6, #28]
    5a8c:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5a8e:	2901      	cmp	r1, #1
    5a90:	d006      	beq.n	5aa0 <gpio_nrfx_read+0x2c>
		*value = (port_val & BIT(pin)) ? 1 : 0;
    5a92:	40d0      	lsrs	r0, r2
    5a94:	f000 0001 	and.w	r0, r0, #1
    5a98:	6018      	str	r0, [r3, #0]
}
    5a9a:	2000      	movs	r0, #0
    5a9c:	bcf0      	pop	{r4, r5, r6, r7}
    5a9e:	4770      	bx	lr
		*value = port_val;
    5aa0:	6018      	str	r0, [r3, #0]
    5aa2:	e7fa      	b.n	5a9a <gpio_nrfx_read+0x26>

00005aa4 <gpio_nrfx_manage_callback>:
{
    5aa4:	b430      	push	{r4, r5}
	return port->driver_data;
    5aa6:	6885      	ldr	r5, [r0, #8]
	return list->head;
    5aa8:	682b      	ldr	r3, [r5, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5aaa:	b1d3      	cbz	r3, 5ae2 <gpio_nrfx_manage_callback+0x3e>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5aac:	460c      	mov	r4, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5aae:	2000      	movs	r0, #0
    5ab0:	b1b3      	cbz	r3, 5ae0 <gpio_nrfx_manage_callback+0x3c>
    5ab2:	429c      	cmp	r4, r3
    5ab4:	d002      	beq.n	5abc <gpio_nrfx_manage_callback+0x18>
    5ab6:	4618      	mov	r0, r3
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	e7f9      	b.n	5ab0 <gpio_nrfx_manage_callback+0xc>
Z_GENLIST_REMOVE(slist, snode)
    5abc:	b138      	cbz	r0, 5ace <gpio_nrfx_manage_callback+0x2a>
	return node->next;
    5abe:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    5ac0:	6003      	str	r3, [r0, #0]
	return list->tail;
    5ac2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    5ac4:	4299      	cmp	r1, r3
    5ac6:	d009      	beq.n	5adc <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
    5ac8:	2300      	movs	r3, #0
    5aca:	600b      	str	r3, [r1, #0]
    5acc:	e009      	b.n	5ae2 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
    5ace:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5ad0:	602b      	str	r3, [r5, #0]
	return list->tail;
    5ad2:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    5ad4:	4281      	cmp	r1, r0
    5ad6:	d1f7      	bne.n	5ac8 <gpio_nrfx_manage_callback+0x24>
	list->tail = node;
    5ad8:	606b      	str	r3, [r5, #4]
    5ada:	e7f5      	b.n	5ac8 <gpio_nrfx_manage_callback+0x24>
    5adc:	6068      	str	r0, [r5, #4]
    5ade:	e7f3      	b.n	5ac8 <gpio_nrfx_manage_callback+0x24>
			if (!set) {
    5ae0:	b152      	cbz	r2, 5af8 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5ae2:	b162      	cbz	r2, 5afe <gpio_nrfx_manage_callback+0x5a>
	return list->head;
    5ae4:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    5ae6:	600b      	str	r3, [r1, #0]
	list->head = node;
    5ae8:	6029      	str	r1, [r5, #0]
	return list->tail;
    5aea:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    5aec:	b10b      	cbz	r3, 5af2 <gpio_nrfx_manage_callback+0x4e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5aee:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5af0:	e006      	b.n	5b00 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    5af2:	6069      	str	r1, [r5, #4]
    5af4:	2000      	movs	r0, #0
    5af6:	e003      	b.n	5b00 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    5af8:	f06f 0015 	mvn.w	r0, #21
    5afc:	e000      	b.n	5b00 <gpio_nrfx_manage_callback+0x5c>
	return 0;
    5afe:	2000      	movs	r0, #0
}
    5b00:	bc30      	pop	{r4, r5}
    5b02:	4770      	bx	lr

00005b04 <gpio_nrfx_pin_manage_callback>:
{
    5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b08:	4606      	mov	r6, r0
    5b0a:	4698      	mov	r8, r3
	return port->driver_data;
    5b0c:	6885      	ldr	r5, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5b0e:	2901      	cmp	r1, #1
    5b10:	d003      	beq.n	5b1a <gpio_nrfx_pin_manage_callback+0x16>
		from_pin = pin;
    5b12:	b2d4      	uxtb	r4, r2
		to_pin   = pin;
    5b14:	4627      	mov	r7, r4
	int res = 0;
    5b16:	2300      	movs	r3, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5b18:	e010      	b.n	5b3c <gpio_nrfx_pin_manage_callback+0x38>
		to_pin   = 31U;
    5b1a:	271f      	movs	r7, #31
		from_pin = 0U;
    5b1c:	2400      	movs	r4, #0
    5b1e:	e7fa      	b.n	5b16 <gpio_nrfx_pin_manage_callback+0x12>
		WRITE_BIT(data->int_en, curr_pin, enable);
    5b20:	68eb      	ldr	r3, [r5, #12]
    5b22:	2201      	movs	r2, #1
    5b24:	40a2      	lsls	r2, r4
    5b26:	ea23 0302 	bic.w	r3, r3, r2
    5b2a:	60eb      	str	r3, [r5, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    5b2c:	4621      	mov	r1, r4
    5b2e:	4630      	mov	r0, r6
    5b30:	f7fc fe26 	bl	2780 <gpiote_pin_int_cfg>
		if (res != 0) {
    5b34:	4603      	mov	r3, r0
    5b36:	b958      	cbnz	r0, 5b50 <gpio_nrfx_pin_manage_callback+0x4c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5b38:	3401      	adds	r4, #1
    5b3a:	b2e4      	uxtb	r4, r4
    5b3c:	42a7      	cmp	r7, r4
    5b3e:	d307      	bcc.n	5b50 <gpio_nrfx_pin_manage_callback+0x4c>
		WRITE_BIT(data->int_en, curr_pin, enable);
    5b40:	f1b8 0f00 	cmp.w	r8, #0
    5b44:	d0ec      	beq.n	5b20 <gpio_nrfx_pin_manage_callback+0x1c>
    5b46:	68eb      	ldr	r3, [r5, #12]
    5b48:	2201      	movs	r2, #1
    5b4a:	40a2      	lsls	r2, r4
    5b4c:	4313      	orrs	r3, r2
    5b4e:	e7ec      	b.n	5b2a <gpio_nrfx_pin_manage_callback+0x26>
}
    5b50:	4618      	mov	r0, r3
    5b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005b56 <gpio_nrfx_pin_enable_callback>:
{
    5b56:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, true);
    5b58:	2301      	movs	r3, #1
    5b5a:	f7ff ffd3 	bl	5b04 <gpio_nrfx_pin_manage_callback>
}
    5b5e:	bd08      	pop	{r3, pc}

00005b60 <gpio_nrfx_pin_disable_callback>:
{
    5b60:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, false);
    5b62:	2300      	movs	r3, #0
    5b64:	f7ff ffce 	bl	5b04 <gpio_nrfx_pin_manage_callback>
}
    5b68:	bd08      	pop	{r3, pc}

00005b6a <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(u32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    5b6a:	684b      	ldr	r3, [r1, #4]
    5b6c:	4403      	add	r3, r0
    5b6e:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    5b70:	680b      	ldr	r3, [r1, #0]
    5b72:	4403      	add	r3, r0
    5b74:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    5b76:	688b      	ldr	r3, [r1, #8]
    5b78:	1a1b      	subs	r3, r3, r0
    5b7a:	608b      	str	r3, [r1, #8]
}
    5b7c:	4770      	bx	lr

00005b7e <erase_op>:
{
    5b7e:	b538      	push	{r3, r4, r5, lr}
    5b80:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5b82:	f001 ff51 	bl	7a28 <nrfx_nvmc_flash_page_size_get>
    5b86:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5b88:	6860      	ldr	r0, [r4, #4]
    5b8a:	f7fe f9df 	bl	3f4c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    5b8e:	68a3      	ldr	r3, [r4, #8]
    5b90:	1b5b      	subs	r3, r3, r5
    5b92:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    5b94:	6862      	ldr	r2, [r4, #4]
    5b96:	442a      	add	r2, r5
    5b98:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d1f4      	bne.n	5b88 <erase_op+0xa>
}
    5b9e:	2000      	movs	r0, #0
    5ba0:	bd38      	pop	{r3, r4, r5, pc}

00005ba2 <erase>:

	return FLASH_OP_DONE;
}

static int erase(u32_t addr, u32_t size)
{
    5ba2:	b500      	push	{lr}
    5ba4:	b085      	sub	sp, #20
	struct flash_context context = {
    5ba6:	2300      	movs	r3, #0
    5ba8:	9301      	str	r3, [sp, #4]
    5baa:	9002      	str	r0, [sp, #8]
    5bac:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
    5bae:	a801      	add	r0, sp, #4
    5bb0:	f7ff ffe5 	bl	5b7e <erase_op>
}
    5bb4:	b005      	add	sp, #20
    5bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00005bba <write_op>:
{
    5bba:	b538      	push	{r3, r4, r5, lr}
    5bbc:	4604      	mov	r4, r0
	if (!is_aligned_32(w_ctx->flash_addr)) {
    5bbe:	6840      	ldr	r0, [r0, #4]
    5bc0:	f010 0303 	ands.w	r3, r0, #3
    5bc4:	d017      	beq.n	5bf6 <write_op+0x3c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    5bc6:	f1c3 0304 	rsb	r3, r3, #4
		if (count > w_ctx->len) {
    5bca:	68a5      	ldr	r5, [r4, #8]
    5bcc:	429d      	cmp	r5, r3
    5bce:	d300      	bcc.n	5bd2 <write_op+0x18>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    5bd0:	461d      	mov	r5, r3
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5bd2:	462a      	mov	r2, r5
    5bd4:	6821      	ldr	r1, [r4, #0]
    5bd6:	f001 feee 	bl	79b6 <nrfx_nvmc_bytes_write>
		shift_write_context(count, w_ctx);
    5bda:	4621      	mov	r1, r4
    5bdc:	4628      	mov	r0, r5
    5bde:	f7ff ffc4 	bl	5b6a <shift_write_context>
    5be2:	e008      	b.n	5bf6 <write_op+0x3c>
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    5be4:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5be6:	6819      	ldr	r1, [r3, #0]
    5be8:	6860      	ldr	r0, [r4, #4]
    5bea:	f001 fed8 	bl	799e <nrfx_nvmc_word_write>
		shift_write_context(sizeof(u32_t), w_ctx);
    5bee:	4621      	mov	r1, r4
    5bf0:	2004      	movs	r0, #4
    5bf2:	f7ff ffba 	bl	5b6a <shift_write_context>
	while (w_ctx->len >= sizeof(u32_t)) {
    5bf6:	68a2      	ldr	r2, [r4, #8]
    5bf8:	2a03      	cmp	r2, #3
    5bfa:	d8f3      	bhi.n	5be4 <write_op+0x2a>
	if (w_ctx->len) {
    5bfc:	b91a      	cbnz	r2, 5c06 <write_op+0x4c>
	nvmc_wait_ready();
    5bfe:	f7fc ffdb 	bl	2bb8 <nvmc_wait_ready>
}
    5c02:	2000      	movs	r0, #0
    5c04:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5c06:	6821      	ldr	r1, [r4, #0]
    5c08:	6860      	ldr	r0, [r4, #4]
    5c0a:	f001 fed4 	bl	79b6 <nrfx_nvmc_bytes_write>
		shift_write_context(w_ctx->len, w_ctx);
    5c0e:	4621      	mov	r1, r4
    5c10:	68a0      	ldr	r0, [r4, #8]
    5c12:	f7ff ffaa 	bl	5b6a <shift_write_context>
    5c16:	e7f2      	b.n	5bfe <write_op+0x44>

00005c18 <write>:

static int write(off_t addr, const void *data, size_t len)
{
    5c18:	b500      	push	{lr}
    5c1a:	b085      	sub	sp, #20
	struct flash_context context = {
    5c1c:	9101      	str	r1, [sp, #4]
    5c1e:	9002      	str	r0, [sp, #8]
    5c20:	9203      	str	r2, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
    5c22:	a801      	add	r0, sp, #4
    5c24:	f7ff ffc9 	bl	5bba <write_op>
}
    5c28:	b005      	add	sp, #20
    5c2a:	f85d fb04 	ldr.w	pc, [sp], #4

00005c2e <flash_nrf_read>:
{
    5c2e:	b570      	push	{r4, r5, r6, lr}
    5c30:	460c      	mov	r4, r1
    5c32:	4616      	mov	r6, r2
    5c34:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    5c36:	f001 fef3 	bl	7a20 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    5c3a:	42a0      	cmp	r0, r4
    5c3c:	d908      	bls.n	5c50 <flash_nrf_read+0x22>
    5c3e:	2c00      	cmp	r4, #0
    5c40:	db0b      	blt.n	5c5a <flash_nrf_read+0x2c>
	    addr < DT_FLASH_BASE_ADDRESS ||
    5c42:	4285      	cmp	r5, r0
    5c44:	d80b      	bhi.n	5c5e <flash_nrf_read+0x30>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    5c46:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    5c48:	4298      	cmp	r0, r3
    5c4a:	d30a      	bcc.n	5c62 <flash_nrf_read+0x34>
	return is_regular_addr_valid(addr, len) ||
    5c4c:	2301      	movs	r3, #1
    5c4e:	e000      	b.n	5c52 <flash_nrf_read+0x24>
    5c50:	2300      	movs	r3, #0
	if (!is_addr_valid(addr, len)) {
    5c52:	b17b      	cbz	r3, 5c74 <flash_nrf_read+0x46>
	if (!len) {
    5c54:	b93d      	cbnz	r5, 5c66 <flash_nrf_read+0x38>
		return 0;
    5c56:	2000      	movs	r0, #0
}
    5c58:	bd70      	pop	{r4, r5, r6, pc}
	return is_regular_addr_valid(addr, len) ||
    5c5a:	2300      	movs	r3, #0
    5c5c:	e7f9      	b.n	5c52 <flash_nrf_read+0x24>
    5c5e:	2300      	movs	r3, #0
    5c60:	e7f7      	b.n	5c52 <flash_nrf_read+0x24>
    5c62:	2300      	movs	r3, #0
    5c64:	e7f5      	b.n	5c52 <flash_nrf_read+0x24>
	memcpy(data, (void *)addr, len);
    5c66:	462a      	mov	r2, r5
    5c68:	4621      	mov	r1, r4
    5c6a:	4630      	mov	r0, r6
    5c6c:	f7ff fe99 	bl	59a2 <memcpy>
	return 0;
    5c70:	2000      	movs	r0, #0
    5c72:	e7f1      	b.n	5c58 <flash_nrf_read+0x2a>
		return -EINVAL;
    5c74:	f06f 0015 	mvn.w	r0, #21
    5c78:	e7ee      	b.n	5c58 <flash_nrf_read+0x2a>

00005c7a <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
    5c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c7e:	b086      	sub	sp, #24
    5c80:	4689      	mov	r9, r1
    5c82:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->driver_api;
    5c84:	6843      	ldr	r3, [r0, #4]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    5c86:	691b      	ldr	r3, [r3, #16]
    5c88:	aa01      	add	r2, sp, #4
    5c8a:	a905      	add	r1, sp, #20
    5c8c:	4798      	blx	r3
	off_t off = 0;
    5c8e:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    5c90:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    5c92:	46a2      	mov	sl, r4
    5c94:	9b01      	ldr	r3, [sp, #4]
    5c96:	4553      	cmp	r3, sl
    5c98:	d916      	bls.n	5cc8 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    5c9a:	9f05      	ldr	r7, [sp, #20]
    5c9c:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    5ca4:	2500      	movs	r5, #0
    5ca6:	683b      	ldr	r3, [r7, #0]
    5ca8:	42ab      	cmp	r3, r5
    5caa:	d90a      	bls.n	5cc2 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    5cac:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    5cae:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    5cb0:	4641      	mov	r1, r8
    5cb2:	a802      	add	r0, sp, #8
    5cb4:	47c8      	blx	r9
    5cb6:	b138      	cbz	r0, 5cc8 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    5cb8:	9b03      	ldr	r3, [sp, #12]
    5cba:	441c      	add	r4, r3
			page++;
    5cbc:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    5cbe:	3501      	adds	r5, #1
    5cc0:	e7f1      	b.n	5ca6 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    5cc2:	f10a 0a01 	add.w	sl, sl, #1
    5cc6:	e7e5      	b.n	5c94 <flash_page_foreach+0x1a>
		}
	}
}
    5cc8:	b006      	add	sp, #24
    5cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005cce <uarte_nrfx_isr_int>:
{
    5cce:	b508      	push	{r3, lr}
	return dev->driver_data;
    5cd0:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
    5cd2:	6803      	ldr	r3, [r0, #0]
    5cd4:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5cd6:	6818      	ldr	r0, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    5cd8:	6893      	ldr	r3, [r2, #8]
    5cda:	7b99      	ldrb	r1, [r3, #14]
    5cdc:	b111      	cbz	r1, 5ce4 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cde:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
    5ce2:	b921      	cbnz	r1, 5cee <uarte_nrfx_isr_int+0x20>
	if (data->int_driven->cb) {
    5ce4:	681a      	ldr	r2, [r3, #0]
    5ce6:	b10a      	cbz	r2, 5cec <uarte_nrfx_isr_int+0x1e>
		data->int_driven->cb(data->int_driven->cb_data);
    5ce8:	6858      	ldr	r0, [r3, #4]
    5cea:	4790      	blx	r2
}
    5cec:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5cee:	f44f 7380 	mov.w	r3, #256	; 0x100
    5cf2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cf6:	2301      	movs	r3, #1
    5cf8:	60c3      	str	r3, [r0, #12]
		data->int_driven->disable_tx_irq = false;
    5cfa:	6893      	ldr	r3, [r2, #8]
    5cfc:	2200      	movs	r2, #0
    5cfe:	739a      	strb	r2, [r3, #14]
		return;
    5d00:	e7f4      	b.n	5cec <uarte_nrfx_isr_int+0x1e>

00005d02 <uarte_nrfx_configure>:
{
    5d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (cfg->stop_bits) {
    5d06:	794b      	ldrb	r3, [r1, #5]
    5d08:	2b01      	cmp	r3, #1
    5d0a:	d006      	beq.n	5d1a <uarte_nrfx_configure+0x18>
    5d0c:	2b03      	cmp	r3, #3
    5d0e:	d012      	beq.n	5d36 <uarte_nrfx_configure+0x34>
		return -ENOTSUP;
    5d10:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    5d14:	4618      	mov	r0, r3
    5d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool two_stop_bits = false;
    5d1a:	2600      	movs	r6, #0
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5d1c:	798b      	ldrb	r3, [r1, #6]
    5d1e:	2b03      	cmp	r3, #3
    5d20:	d136      	bne.n	5d90 <uarte_nrfx_configure+0x8e>
	switch (cfg->flow_ctrl) {
    5d22:	79cb      	ldrb	r3, [r1, #7]
    5d24:	b14b      	cbz	r3, 5d3a <uarte_nrfx_configure+0x38>
    5d26:	2b01      	cmp	r3, #1
    5d28:	d135      	bne.n	5d96 <uarte_nrfx_configure+0x94>
	return dev->config->config_info;
    5d2a:	6803      	ldr	r3, [r0, #0]
    5d2c:	689b      	ldr	r3, [r3, #8]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    5d2e:	791b      	ldrb	r3, [r3, #4]
    5d30:	b3a3      	cbz	r3, 5d9c <uarte_nrfx_configure+0x9a>
			hwfc = NRF_UARTE_HWFC_ENABLED;
    5d32:	2701      	movs	r7, #1
    5d34:	e002      	b.n	5d3c <uarte_nrfx_configure+0x3a>
		two_stop_bits = true;
    5d36:	2601      	movs	r6, #1
    5d38:	e7f0      	b.n	5d1c <uarte_nrfx_configure+0x1a>
		hwfc = NRF_UARTE_HWFC_DISABLED;
    5d3a:	2700      	movs	r7, #0
	switch (cfg->parity) {
    5d3c:	790b      	ldrb	r3, [r1, #4]
    5d3e:	b123      	cbz	r3, 5d4a <uarte_nrfx_configure+0x48>
    5d40:	2b02      	cmp	r3, #2
    5d42:	d022      	beq.n	5d8a <uarte_nrfx_configure+0x88>
		return -ENOTSUP;
    5d44:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5d48:	e7e4      	b.n	5d14 <uarte_nrfx_configure+0x12>
		parity = NRF_UARTE_PARITY_EXCLUDED;
    5d4a:	f04f 0800 	mov.w	r8, #0
    5d4e:	460c      	mov	r4, r1
    5d50:	4605      	mov	r5, r0
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5d52:	6809      	ldr	r1, [r1, #0]
    5d54:	f7fc ffc6 	bl	2ce4 <baudrate_set>
    5d58:	4603      	mov	r3, r0
    5d5a:	bb10      	cbnz	r0, 5da2 <uarte_nrfx_configure+0xa0>
	return dev->config->config_info;
    5d5c:	682a      	ldr	r2, [r5, #0]
    5d5e:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    5d60:	6812      	ldr	r2, [r2, #0]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    5d62:	ea48 0707 	orr.w	r7, r8, r7
    5d66:	f8c2 756c 	str.w	r7, [r2, #1388]	; 0x56c
	if (two_stop_bits) {
    5d6a:	b146      	cbz	r6, 5d7e <uarte_nrfx_configure+0x7c>
	return dev->config->config_info;
    5d6c:	682a      	ldr	r2, [r5, #0]
    5d6e:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    5d70:	6811      	ldr	r1, [r2, #0]
		get_uarte_instance(dev)->CONFIG |=
    5d72:	f8d1 256c 	ldr.w	r2, [r1, #1388]	; 0x56c
    5d76:	f042 0210 	orr.w	r2, r2, #16
    5d7a:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->driver_data;
    5d7e:	68aa      	ldr	r2, [r5, #8]
	get_dev_data(dev)->uart_config = *cfg;
    5d80:	e894 0003 	ldmia.w	r4, {r0, r1}
    5d84:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    5d88:	e7c4      	b.n	5d14 <uarte_nrfx_configure+0x12>
		parity = NRF_UARTE_PARITY_INCLUDED;
    5d8a:	f04f 080e 	mov.w	r8, #14
    5d8e:	e7de      	b.n	5d4e <uarte_nrfx_configure+0x4c>
		return -ENOTSUP;
    5d90:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5d94:	e7be      	b.n	5d14 <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    5d96:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5d9a:	e7bb      	b.n	5d14 <uarte_nrfx_configure+0x12>
			return -ENOTSUP;
    5d9c:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5da0:	e7b8      	b.n	5d14 <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    5da2:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5da6:	e7b5      	b.n	5d14 <uarte_nrfx_configure+0x12>

00005da8 <uarte_nrfx_config_get>:
{
    5da8:	460b      	mov	r3, r1
	return dev->driver_data;
    5daa:	6882      	ldr	r2, [r0, #8]
	*cfg = get_dev_data(dev)->uart_config;
    5dac:	e892 0003 	ldmia.w	r2, {r0, r1}
    5db0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5db4:	2000      	movs	r0, #0
    5db6:	4770      	bx	lr

00005db8 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    5db8:	6803      	ldr	r3, [r0, #0]
    5dba:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5dbc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dbe:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5dc2:	b122      	cbz	r2, 5dce <uarte_nrfx_err_check+0x16>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5dc4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5dc8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
    5dcc:	4770      	bx	lr
	u32_t error = 0U;
    5dce:	2000      	movs	r0, #0
}
    5dd0:	4770      	bx	lr

00005dd2 <uarte_nrfx_poll_in>:
{
    5dd2:	b410      	push	{r4}
	return dev->driver_data;
    5dd4:	6884      	ldr	r4, [r0, #8]
	return dev->config->config_info;
    5dd6:	6803      	ldr	r3, [r0, #0]
    5dd8:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5dda:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ddc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5de0:	b14a      	cbz	r2, 5df6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5de2:	7b22      	ldrb	r2, [r4, #12]
    5de4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5de6:	2000      	movs	r0, #0
    5de8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dec:	2201      	movs	r2, #1
    5dee:	601a      	str	r2, [r3, #0]
}
    5df0:	f85d 4b04 	ldr.w	r4, [sp], #4
    5df4:	4770      	bx	lr
		return -1;
    5df6:	f04f 30ff 	mov.w	r0, #4294967295
    5dfa:	e7f9      	b.n	5df0 <uarte_nrfx_poll_in+0x1e>

00005dfc <uarte_nrfx_poll_out>:
{
    5dfc:	b082      	sub	sp, #8
    5dfe:	ab02      	add	r3, sp, #8
    5e00:	f803 1d01 	strb.w	r1, [r3, #-1]!
	return dev->config->config_info;
    5e04:	6802      	ldr	r2, [r0, #0]
    5e06:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    5e08:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e0a:	2100      	movs	r1, #0
    5e0c:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e10:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e14:	2301      	movs	r3, #1
    5e16:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e1a:	6093      	str	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e1c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5e20:	2b00      	cmp	r3, #0
    5e22:	d0fb      	beq.n	5e1c <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e24:	2301      	movs	r3, #1
    5e26:	60d3      	str	r3, [r2, #12]
}
    5e28:	b002      	add	sp, #8
    5e2a:	4770      	bx	lr

00005e2c <uarte_nrfx_fifo_fill>:
{
    5e2c:	b470      	push	{r4, r5, r6}
	return dev->config->config_info;
    5e2e:	6803      	ldr	r3, [r0, #0]
    5e30:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5e32:	681e      	ldr	r6, [r3, #0]
	return dev->driver_data;
    5e34:	6885      	ldr	r5, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e36:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5e3a:	b1cb      	cbz	r3, 5e70 <uarte_nrfx_fifo_fill+0x44>
	if (len > data->int_driven->tx_buff_size) {
    5e3c:	68ab      	ldr	r3, [r5, #8]
    5e3e:	8998      	ldrh	r0, [r3, #12]
    5e40:	4290      	cmp	r0, r2
    5e42:	db00      	blt.n	5e46 <uarte_nrfx_fifo_fill+0x1a>
    5e44:	4610      	mov	r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e46:	2300      	movs	r3, #0
    5e48:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    5e4c:	e004      	b.n	5e58 <uarte_nrfx_fifo_fill+0x2c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    5e4e:	68aa      	ldr	r2, [r5, #8]
    5e50:	6892      	ldr	r2, [r2, #8]
    5e52:	5ccc      	ldrb	r4, [r1, r3]
    5e54:	54d4      	strb	r4, [r2, r3]
	for (int i = 0; i < len; i++) {
    5e56:	3301      	adds	r3, #1
    5e58:	4298      	cmp	r0, r3
    5e5a:	dcf8      	bgt.n	5e4e <uarte_nrfx_fifo_fill+0x22>
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);
    5e5c:	68ab      	ldr	r3, [r5, #8]
    5e5e:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e60:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e64:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e68:	2301      	movs	r3, #1
    5e6a:	60b3      	str	r3, [r6, #8]
}
    5e6c:	bc70      	pop	{r4, r5, r6}
    5e6e:	4770      	bx	lr
		return 0;
    5e70:	2000      	movs	r0, #0
    5e72:	e7fb      	b.n	5e6c <uarte_nrfx_fifo_fill+0x40>

00005e74 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
    5e74:	6803      	ldr	r3, [r0, #0]
    5e76:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5e78:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    5e7a:	6880      	ldr	r0, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5e80:	b13a      	cbz	r2, 5e92 <uarte_nrfx_fifo_read+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e82:	2200      	movs	r2, #0
    5e84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (u8_t)data->rx_data;
    5e88:	7b02      	ldrb	r2, [r0, #12]
    5e8a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e8c:	2001      	movs	r0, #1
    5e8e:	6018      	str	r0, [r3, #0]
    5e90:	4770      	bx	lr
	int num_rx = 0;
    5e92:	2000      	movs	r0, #0
}
    5e94:	4770      	bx	lr

00005e96 <uarte_nrfx_irq_tx_enable>:
	return dev->config->config_info;
    5e96:	6803      	ldr	r3, [r0, #0]
    5e98:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5e9a:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    5e9c:	6882      	ldr	r2, [r0, #8]
	data->int_driven->disable_tx_irq = false;
    5e9e:	6892      	ldr	r2, [r2, #8]
    5ea0:	2100      	movs	r1, #0
    5ea2:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    5ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ea8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5eac:	4770      	bx	lr

00005eae <uarte_nrfx_irq_tx_disable>:
	return dev->driver_data;
    5eae:	6883      	ldr	r3, [r0, #8]
	data->int_driven->disable_tx_irq = true;
    5eb0:	689b      	ldr	r3, [r3, #8]
    5eb2:	2201      	movs	r2, #1
    5eb4:	739a      	strb	r2, [r3, #14]
}
    5eb6:	4770      	bx	lr

00005eb8 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
    5eb8:	6803      	ldr	r3, [r0, #0]
    5eba:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ebc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ebe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    5ec2:	b142      	cbz	r2, 5ed6 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return (bool)(p_reg->INTENSET & mask);
    5ec4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    5ec8:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ecc:	d101      	bne.n	5ed2 <uarte_nrfx_irq_tx_ready_complete+0x1a>
    5ece:	2000      	movs	r0, #0
}
    5ed0:	4770      	bx	lr
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    5ed2:	2001      	movs	r0, #1
    5ed4:	4770      	bx	lr
    5ed6:	2000      	movs	r0, #0
    5ed8:	4770      	bx	lr

00005eda <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
    5eda:	6803      	ldr	r3, [r0, #0]
    5edc:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ede:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ee0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    5ee4:	3000      	adds	r0, #0
    5ee6:	bf18      	it	ne
    5ee8:	2001      	movne	r0, #1
    5eea:	4770      	bx	lr

00005eec <uarte_nrfx_irq_rx_enable>:
	return dev->config->config_info;
    5eec:	6803      	ldr	r3, [r0, #0]
    5eee:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ef0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5ef2:	2210      	movs	r2, #16
    5ef4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5ef8:	4770      	bx	lr

00005efa <uarte_nrfx_irq_rx_disable>:
	return dev->config->config_info;
    5efa:	6803      	ldr	r3, [r0, #0]
    5efc:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5efe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5f00:	2210      	movs	r2, #16
    5f02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5f06:	4770      	bx	lr

00005f08 <uarte_nrfx_irq_err_enable>:
	return dev->config->config_info;
    5f08:	6803      	ldr	r3, [r0, #0]
    5f0a:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f0c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5f16:	4770      	bx	lr

00005f18 <uarte_nrfx_irq_err_disable>:
	return dev->config->config_info;
    5f18:	6803      	ldr	r3, [r0, #0]
    5f1a:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f1c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5f26:	4770      	bx	lr

00005f28 <uarte_nrfx_irq_is_pending>:
{
    5f28:	b538      	push	{r3, r4, r5, lr}
    5f2a:	4605      	mov	r5, r0
	return dev->config->config_info;
    5f2c:	6803      	ldr	r3, [r0, #0]
    5f2e:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f30:	681c      	ldr	r4, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
    5f32:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		||
    5f36:	f413 7f80 	tst.w	r3, #256	; 0x100
    5f3a:	d107      	bne.n	5f4c <uarte_nrfx_irq_is_pending+0x24>
    5f3c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    5f40:	f013 0f10 	tst.w	r3, #16
    5f44:	d108      	bne.n	5f58 <uarte_nrfx_irq_is_pending+0x30>
    5f46:	2300      	movs	r3, #0
}
    5f48:	4618      	mov	r0, r3
    5f4a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    5f4c:	f7ff ffb4 	bl	5eb8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    5f50:	2800      	cmp	r0, #0
    5f52:	d0f3      	beq.n	5f3c <uarte_nrfx_irq_is_pending+0x14>
		||
    5f54:	2301      	movs	r3, #1
    5f56:	e7f7      	b.n	5f48 <uarte_nrfx_irq_is_pending+0x20>
		 uarte_nrfx_irq_rx_ready(dev)));
    5f58:	4628      	mov	r0, r5
    5f5a:	f7ff ffbe 	bl	5eda <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    5f5e:	4603      	mov	r3, r0
    5f60:	2800      	cmp	r0, #0
    5f62:	d0f1      	beq.n	5f48 <uarte_nrfx_irq_is_pending+0x20>
		||
    5f64:	2301      	movs	r3, #1
    5f66:	e7ef      	b.n	5f48 <uarte_nrfx_irq_is_pending+0x20>

00005f68 <uarte_nrfx_irq_update>:
}
    5f68:	2001      	movs	r0, #1
    5f6a:	4770      	bx	lr

00005f6c <uarte_nrfx_irq_callback_set>:
	return dev->driver_data;
    5f6c:	6883      	ldr	r3, [r0, #8]
	data->int_driven->cb = cb;
    5f6e:	6898      	ldr	r0, [r3, #8]
    5f70:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    5f72:	689b      	ldr	r3, [r3, #8]
    5f74:	605a      	str	r2, [r3, #4]
}
    5f76:	4770      	bx	lr

00005f78 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    5f78:	2000      	movs	r0, #0
    5f7a:	4770      	bx	lr

00005f7c <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    5f7c:	b430      	push	{r4, r5}
    if( ( end - *p ) < 1 )
    5f7e:	6803      	ldr	r3, [r0, #0]
    5f80:	1acd      	subs	r5, r1, r3
    5f82:	2d00      	cmp	r5, #0
    5f84:	dd4d      	ble.n	6022 <mbedtls_asn1_get_len+0xa6>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    5f86:	781c      	ldrb	r4, [r3, #0]
    5f88:	f014 0f80 	tst.w	r4, #128	; 0x80
    5f8c:	d10b      	bne.n	5fa6 <mbedtls_asn1_get_len+0x2a>
        *len = *(*p)++;
    5f8e:	1c5c      	adds	r4, r3, #1
    5f90:	6004      	str	r4, [r0, #0]
    5f92:	781b      	ldrb	r3, [r3, #0]
    5f94:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    5f96:	6813      	ldr	r3, [r2, #0]
    5f98:	6802      	ldr	r2, [r0, #0]
    5f9a:	1a89      	subs	r1, r1, r2
    5f9c:	428b      	cmp	r3, r1
    5f9e:	d83d      	bhi.n	601c <mbedtls_asn1_get_len+0xa0>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    5fa0:	2000      	movs	r0, #0
}
    5fa2:	bc30      	pop	{r4, r5}
    5fa4:	4770      	bx	lr
        switch( **p & 0x7F )
    5fa6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5faa:	3c01      	subs	r4, #1
    5fac:	2c03      	cmp	r4, #3
    5fae:	d83b      	bhi.n	6028 <mbedtls_asn1_get_len+0xac>
    5fb0:	e8df f004 	tbb	[pc, r4]
    5fb4:	23150a02 	.word	0x23150a02
            if( ( end - *p ) < 2 )
    5fb8:	2d01      	cmp	r5, #1
    5fba:	dd38      	ble.n	602e <mbedtls_asn1_get_len+0xb2>
            *len = (*p)[1];
    5fbc:	785b      	ldrb	r3, [r3, #1]
    5fbe:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    5fc0:	6803      	ldr	r3, [r0, #0]
    5fc2:	3302      	adds	r3, #2
    5fc4:	6003      	str	r3, [r0, #0]
            break;
    5fc6:	e7e6      	b.n	5f96 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 3 )
    5fc8:	2d02      	cmp	r5, #2
    5fca:	dd33      	ble.n	6034 <mbedtls_asn1_get_len+0xb8>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    5fcc:	785c      	ldrb	r4, [r3, #1]
    5fce:	789b      	ldrb	r3, [r3, #2]
    5fd0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    5fd4:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    5fd6:	6803      	ldr	r3, [r0, #0]
    5fd8:	3303      	adds	r3, #3
    5fda:	6003      	str	r3, [r0, #0]
            break;
    5fdc:	e7db      	b.n	5f96 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 4 )
    5fde:	2d03      	cmp	r5, #3
    5fe0:	dd2b      	ble.n	603a <mbedtls_asn1_get_len+0xbe>
            *len = ( (size_t)(*p)[1] << 16 ) |
    5fe2:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5fe4:	789c      	ldrb	r4, [r3, #2]
    5fe6:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    5fe8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5fec:	78db      	ldrb	r3, [r3, #3]
    5fee:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    5ff0:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    5ff2:	6803      	ldr	r3, [r0, #0]
    5ff4:	3304      	adds	r3, #4
    5ff6:	6003      	str	r3, [r0, #0]
            break;
    5ff8:	e7cd      	b.n	5f96 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 5 )
    5ffa:	2d04      	cmp	r5, #4
    5ffc:	dd20      	ble.n	6040 <mbedtls_asn1_get_len+0xc4>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    5ffe:	785d      	ldrb	r5, [r3, #1]
    6000:	789c      	ldrb	r4, [r3, #2]
    6002:	0424      	lsls	r4, r4, #16
    6004:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    6008:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    600a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    600e:	791b      	ldrb	r3, [r3, #4]
    6010:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6012:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6014:	6803      	ldr	r3, [r0, #0]
    6016:	3305      	adds	r3, #5
    6018:	6003      	str	r3, [r0, #0]
            break;
    601a:	e7bc      	b.n	5f96 <mbedtls_asn1_get_len+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    601c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6020:	e7bf      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6022:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6026:	e7bc      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    6028:	f06f 0063 	mvn.w	r0, #99	; 0x63
    602c:	e7b9      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    602e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6032:	e7b6      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6034:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6038:	e7b3      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    603a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    603e:	e7b0      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6040:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6044:	e7ad      	b.n	5fa2 <mbedtls_asn1_get_len+0x26>

00006046 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6046:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    6048:	6804      	ldr	r4, [r0, #0]
    604a:	1b0d      	subs	r5, r1, r4
    604c:	2d00      	cmp	r5, #0
    604e:	dd07      	ble.n	6060 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6050:	7825      	ldrb	r5, [r4, #0]
    6052:	429d      	cmp	r5, r3
    6054:	d107      	bne.n	6066 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6056:	3401      	adds	r4, #1
    6058:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    605a:	f7ff ff8f 	bl	5f7c <mbedtls_asn1_get_len>
}
    605e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6060:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6064:	e7fb      	b.n	605e <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6066:	f06f 0061 	mvn.w	r0, #97	; 0x61
    606a:	e7f8      	b.n	605e <mbedtls_asn1_get_tag+0x18>

0000606c <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    606c:	b530      	push	{r4, r5, lr}
    606e:	b083      	sub	sp, #12
    6070:	4604      	mov	r4, r0
    6072:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6074:	2302      	movs	r3, #2
    6076:	aa01      	add	r2, sp, #4
    6078:	f7ff ffe5 	bl	6046 <mbedtls_asn1_get_tag>
    607c:	4603      	mov	r3, r0
    607e:	b110      	cbz	r0, 6086 <mbedtls_asn1_get_mpi+0x1a>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    6080:	4618      	mov	r0, r3
    6082:	b003      	add	sp, #12
    6084:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    6086:	9a01      	ldr	r2, [sp, #4]
    6088:	6821      	ldr	r1, [r4, #0]
    608a:	4628      	mov	r0, r5
    608c:	f000 fb13 	bl	66b6 <mbedtls_mpi_read_binary>
    6090:	4603      	mov	r3, r0
    *p += len;
    6092:	6822      	ldr	r2, [r4, #0]
    6094:	9901      	ldr	r1, [sp, #4]
    6096:	440a      	add	r2, r1
    6098:	6022      	str	r2, [r4, #0]
    return( ret );
    609a:	e7f1      	b.n	6080 <mbedtls_asn1_get_mpi+0x14>

0000609c <mbedtls_clz>:
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    609c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    60a0:	2300      	movs	r3, #0
    60a2:	2b1f      	cmp	r3, #31
    60a4:	d804      	bhi.n	60b0 <mbedtls_clz+0x14>
    {
        if( x & mask ) break;
    60a6:	4202      	tst	r2, r0
    60a8:	d102      	bne.n	60b0 <mbedtls_clz+0x14>

        mask >>= 1;
    60aa:	0852      	lsrs	r2, r2, #1
    for( j = 0; j < biL; j++ )
    60ac:	3301      	adds	r3, #1
    60ae:	e7f8      	b.n	60a2 <mbedtls_clz+0x6>
    }

    return j;
}
    60b0:	4618      	mov	r0, r3
    60b2:	4770      	bx	lr

000060b4 <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    60b4:	b410      	push	{r4}
    uint8_t i;
    mbedtls_mpi_uint tmp = 0;
    60b6:	2400      	movs	r4, #0
    /* This works regardless of the endianness. */
    for( i = 0; i < ciL; i++, x >>= 8 )
    60b8:	4623      	mov	r3, r4
    60ba:	e008      	b.n	60ce <mpi_uint_bigendian_to_host_c+0x1a>
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    60bc:	b2c2      	uxtb	r2, r0
    60be:	f1c3 0103 	rsb	r1, r3, #3
    60c2:	00c9      	lsls	r1, r1, #3
    60c4:	408a      	lsls	r2, r1
    60c6:	4314      	orrs	r4, r2
    for( i = 0; i < ciL; i++, x >>= 8 )
    60c8:	3301      	adds	r3, #1
    60ca:	b2db      	uxtb	r3, r3
    60cc:	0a00      	lsrs	r0, r0, #8
    60ce:	2b03      	cmp	r3, #3
    60d0:	d9f4      	bls.n	60bc <mpi_uint_bigendian_to_host_c+0x8>
    return( tmp );
}
    60d2:	4620      	mov	r0, r4
    60d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    60d8:	4770      	bx	lr

000060da <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    60da:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    60dc:	f7ff ffea 	bl	60b4 <mpi_uint_bigendian_to_host_c>
}
    60e0:	bd08      	pop	{r3, pc}

000060e2 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    60e2:	b1a9      	cbz	r1, 6110 <mpi_bigendian_to_host+0x2e>
{
    60e4:	b570      	push	{r4, r5, r6, lr}
    60e6:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    60e8:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    60ec:	3c01      	subs	r4, #1
    60ee:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    60f2:	e00a      	b.n	610a <mpi_bigendian_to_host+0x28>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    60f4:	6828      	ldr	r0, [r5, #0]
    60f6:	f7ff fff0 	bl	60da <mpi_uint_bigendian_to_host>
    60fa:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    60fc:	6820      	ldr	r0, [r4, #0]
    60fe:	f7ff ffec 	bl	60da <mpi_uint_bigendian_to_host>
    6102:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    6106:	f844 6904 	str.w	r6, [r4], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    610a:	42a5      	cmp	r5, r4
    610c:	d9f2      	bls.n	60f4 <mpi_bigendian_to_host+0x12>
    }
}
    610e:	bd70      	pop	{r4, r5, r6, pc}
    6110:	4770      	bx	lr

00006112 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    6112:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    6114:	2300      	movs	r3, #0
    6116:	461d      	mov	r5, r3
    6118:	e013      	b.n	6142 <mpi_sub_hlp+0x30>
    {
        z = ( *d <  c );     *d -=  c;
    611a:	6817      	ldr	r7, [r2, #0]
    611c:	1afc      	subs	r4, r7, r3
    611e:	6014      	str	r4, [r2, #0]
        c = ( *d < *s ) + z; *d -= *s;
    6120:	f851 6b04 	ldr.w	r6, [r1], #4
    6124:	42b4      	cmp	r4, r6
    6126:	bf2c      	ite	cs
    6128:	f04f 0c00 	movcs.w	ip, #0
    612c:	f04f 0c01 	movcc.w	ip, #1
    6130:	429f      	cmp	r7, r3
    6132:	bf2c      	ite	cs
    6134:	4663      	movcs	r3, ip
    6136:	f10c 0301 	addcc.w	r3, ip, #1
    613a:	1ba4      	subs	r4, r4, r6
    613c:	f842 4b04 	str.w	r4, [r2], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    6140:	3501      	adds	r5, #1
    6142:	4285      	cmp	r5, r0
    6144:	d3e9      	bcc.n	611a <mpi_sub_hlp+0x8>
    6146:	e007      	b.n	6158 <mpi_sub_hlp+0x46>
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
    6148:	6811      	ldr	r1, [r2, #0]
    614a:	1ac8      	subs	r0, r1, r3
    614c:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
    6150:	4299      	cmp	r1, r3
    6152:	bf2c      	ite	cs
    6154:	2300      	movcs	r3, #0
    6156:	2301      	movcc	r3, #1
    while( c != 0 )
    6158:	2b00      	cmp	r3, #0
    615a:	d1f5      	bne.n	6148 <mpi_sub_hlp+0x36>
    }
}
    615c:	bcf0      	pop	{r4, r5, r6, r7}
    615e:	4770      	bx	lr

00006160 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    6160:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    6164:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6166:	e0f4      	b.n	6352 <mpi_mul_hlp+0x1f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6168:	680d      	ldr	r5, [r1, #0]
    616a:	fba5 8903 	umull	r8, r9, r5, r3
    616e:	eb14 0408 	adds.w	r4, r4, r8
    6172:	bf2c      	ite	cs
    6174:	2501      	movcs	r5, #1
    6176:	2500      	movcc	r5, #0
    6178:	eb05 0709 	add.w	r7, r5, r9
    617c:	6816      	ldr	r6, [r2, #0]
    617e:	1936      	adds	r6, r6, r4
    6180:	bf2c      	ite	cs
    6182:	2501      	movcs	r5, #1
    6184:	2500      	movcc	r5, #0
    6186:	443d      	add	r5, r7
    6188:	6016      	str	r6, [r2, #0]
    618a:	684e      	ldr	r6, [r1, #4]
    618c:	fba3 6706 	umull	r6, r7, r3, r6
    6190:	19ad      	adds	r5, r5, r6
    6192:	bf2c      	ite	cs
    6194:	2401      	movcs	r4, #1
    6196:	2400      	movcc	r4, #0
    6198:	4427      	add	r7, r4
    619a:	6856      	ldr	r6, [r2, #4]
    619c:	1975      	adds	r5, r6, r5
    619e:	bf2c      	ite	cs
    61a0:	2401      	movcs	r4, #1
    61a2:	2400      	movcc	r4, #0
    61a4:	443c      	add	r4, r7
    61a6:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    61a8:	688e      	ldr	r6, [r1, #8]
    61aa:	fba3 7806 	umull	r7, r8, r3, r6
    61ae:	19e4      	adds	r4, r4, r7
    61b0:	bf2c      	ite	cs
    61b2:	2601      	movcs	r6, #1
    61b4:	2600      	movcc	r6, #0
    61b6:	4446      	add	r6, r8
    61b8:	6895      	ldr	r5, [r2, #8]
    61ba:	192d      	adds	r5, r5, r4
    61bc:	bf2c      	ite	cs
    61be:	2401      	movcs	r4, #1
    61c0:	2400      	movcc	r4, #0
    61c2:	4434      	add	r4, r6
    61c4:	6095      	str	r5, [r2, #8]
    61c6:	68ce      	ldr	r6, [r1, #12]
    61c8:	fba3 7806 	umull	r7, r8, r3, r6
    61cc:	19e4      	adds	r4, r4, r7
    61ce:	bf2c      	ite	cs
    61d0:	2601      	movcs	r6, #1
    61d2:	2600      	movcc	r6, #0
    61d4:	4446      	add	r6, r8
    61d6:	68d5      	ldr	r5, [r2, #12]
    61d8:	192d      	adds	r5, r5, r4
    61da:	bf2c      	ite	cs
    61dc:	2401      	movcs	r4, #1
    61de:	2400      	movcc	r4, #0
    61e0:	4434      	add	r4, r6
    61e2:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    61e4:	690e      	ldr	r6, [r1, #16]
    61e6:	fba3 7806 	umull	r7, r8, r3, r6
    61ea:	19e4      	adds	r4, r4, r7
    61ec:	bf2c      	ite	cs
    61ee:	2601      	movcs	r6, #1
    61f0:	2600      	movcc	r6, #0
    61f2:	4446      	add	r6, r8
    61f4:	6915      	ldr	r5, [r2, #16]
    61f6:	192d      	adds	r5, r5, r4
    61f8:	bf2c      	ite	cs
    61fa:	2401      	movcs	r4, #1
    61fc:	2400      	movcc	r4, #0
    61fe:	4434      	add	r4, r6
    6200:	6115      	str	r5, [r2, #16]
    6202:	694e      	ldr	r6, [r1, #20]
    6204:	fba3 7806 	umull	r7, r8, r3, r6
    6208:	19e4      	adds	r4, r4, r7
    620a:	bf2c      	ite	cs
    620c:	2601      	movcs	r6, #1
    620e:	2600      	movcc	r6, #0
    6210:	4446      	add	r6, r8
    6212:	6955      	ldr	r5, [r2, #20]
    6214:	192d      	adds	r5, r5, r4
    6216:	bf2c      	ite	cs
    6218:	2401      	movcs	r4, #1
    621a:	2400      	movcc	r4, #0
    621c:	4434      	add	r4, r6
    621e:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    6220:	698e      	ldr	r6, [r1, #24]
    6222:	fba3 7806 	umull	r7, r8, r3, r6
    6226:	19e4      	adds	r4, r4, r7
    6228:	bf2c      	ite	cs
    622a:	2601      	movcs	r6, #1
    622c:	2600      	movcc	r6, #0
    622e:	4446      	add	r6, r8
    6230:	6995      	ldr	r5, [r2, #24]
    6232:	192d      	adds	r5, r5, r4
    6234:	bf2c      	ite	cs
    6236:	2401      	movcs	r4, #1
    6238:	2400      	movcc	r4, #0
    623a:	4434      	add	r4, r6
    623c:	6195      	str	r5, [r2, #24]
    623e:	69ce      	ldr	r6, [r1, #28]
    6240:	fba3 7806 	umull	r7, r8, r3, r6
    6244:	19e4      	adds	r4, r4, r7
    6246:	bf2c      	ite	cs
    6248:	2601      	movcs	r6, #1
    624a:	2600      	movcc	r6, #0
    624c:	4446      	add	r6, r8
    624e:	69d5      	ldr	r5, [r2, #28]
    6250:	192d      	adds	r5, r5, r4
    6252:	bf2c      	ite	cs
    6254:	2401      	movcs	r4, #1
    6256:	2400      	movcc	r4, #0
    6258:	4434      	add	r4, r6
    625a:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    625c:	6a0e      	ldr	r6, [r1, #32]
    625e:	fba3 7806 	umull	r7, r8, r3, r6
    6262:	19e4      	adds	r4, r4, r7
    6264:	bf2c      	ite	cs
    6266:	2601      	movcs	r6, #1
    6268:	2600      	movcc	r6, #0
    626a:	4446      	add	r6, r8
    626c:	6a15      	ldr	r5, [r2, #32]
    626e:	192d      	adds	r5, r5, r4
    6270:	bf2c      	ite	cs
    6272:	2401      	movcs	r4, #1
    6274:	2400      	movcc	r4, #0
    6276:	4434      	add	r4, r6
    6278:	6215      	str	r5, [r2, #32]
    627a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    627c:	fba3 7806 	umull	r7, r8, r3, r6
    6280:	19e4      	adds	r4, r4, r7
    6282:	bf2c      	ite	cs
    6284:	2601      	movcs	r6, #1
    6286:	2600      	movcc	r6, #0
    6288:	4446      	add	r6, r8
    628a:	6a55      	ldr	r5, [r2, #36]	; 0x24
    628c:	192d      	adds	r5, r5, r4
    628e:	bf2c      	ite	cs
    6290:	2401      	movcs	r4, #1
    6292:	2400      	movcc	r4, #0
    6294:	4434      	add	r4, r6
    6296:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    6298:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    629a:	fba3 7806 	umull	r7, r8, r3, r6
    629e:	19e4      	adds	r4, r4, r7
    62a0:	bf2c      	ite	cs
    62a2:	2601      	movcs	r6, #1
    62a4:	2600      	movcc	r6, #0
    62a6:	4446      	add	r6, r8
    62a8:	6a95      	ldr	r5, [r2, #40]	; 0x28
    62aa:	192d      	adds	r5, r5, r4
    62ac:	bf2c      	ite	cs
    62ae:	2401      	movcs	r4, #1
    62b0:	2400      	movcc	r4, #0
    62b2:	4434      	add	r4, r6
    62b4:	6295      	str	r5, [r2, #40]	; 0x28
    62b6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    62b8:	fba3 7806 	umull	r7, r8, r3, r6
    62bc:	19e4      	adds	r4, r4, r7
    62be:	bf2c      	ite	cs
    62c0:	2601      	movcs	r6, #1
    62c2:	2600      	movcc	r6, #0
    62c4:	4446      	add	r6, r8
    62c6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    62c8:	192d      	adds	r5, r5, r4
    62ca:	bf2c      	ite	cs
    62cc:	2401      	movcs	r4, #1
    62ce:	2400      	movcc	r4, #0
    62d0:	4434      	add	r4, r6
    62d2:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    62d4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    62d6:	fba3 7806 	umull	r7, r8, r3, r6
    62da:	19e4      	adds	r4, r4, r7
    62dc:	bf2c      	ite	cs
    62de:	2601      	movcs	r6, #1
    62e0:	2600      	movcc	r6, #0
    62e2:	4446      	add	r6, r8
    62e4:	6b15      	ldr	r5, [r2, #48]	; 0x30
    62e6:	192d      	adds	r5, r5, r4
    62e8:	bf2c      	ite	cs
    62ea:	2401      	movcs	r4, #1
    62ec:	2400      	movcc	r4, #0
    62ee:	4434      	add	r4, r6
    62f0:	6315      	str	r5, [r2, #48]	; 0x30
    62f2:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    62f4:	fba3 7806 	umull	r7, r8, r3, r6
    62f8:	19e4      	adds	r4, r4, r7
    62fa:	bf2c      	ite	cs
    62fc:	2601      	movcs	r6, #1
    62fe:	2600      	movcc	r6, #0
    6300:	4446      	add	r6, r8
    6302:	6b55      	ldr	r5, [r2, #52]	; 0x34
    6304:	192d      	adds	r5, r5, r4
    6306:	bf2c      	ite	cs
    6308:	2401      	movcs	r4, #1
    630a:	2400      	movcc	r4, #0
    630c:	4434      	add	r4, r6
    630e:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    6310:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    6312:	fba3 7806 	umull	r7, r8, r3, r6
    6316:	19e4      	adds	r4, r4, r7
    6318:	bf2c      	ite	cs
    631a:	2601      	movcs	r6, #1
    631c:	2600      	movcc	r6, #0
    631e:	4446      	add	r6, r8
    6320:	6b95      	ldr	r5, [r2, #56]	; 0x38
    6322:	192d      	adds	r5, r5, r4
    6324:	bf2c      	ite	cs
    6326:	2401      	movcs	r4, #1
    6328:	2400      	movcc	r4, #0
    632a:	4434      	add	r4, r6
    632c:	6395      	str	r5, [r2, #56]	; 0x38
    632e:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    6330:	fba3 7806 	umull	r7, r8, r3, r6
    6334:	19e4      	adds	r4, r4, r7
    6336:	bf2c      	ite	cs
    6338:	2601      	movcs	r6, #1
    633a:	2600      	movcc	r6, #0
    633c:	4446      	add	r6, r8
    633e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    6340:	192d      	adds	r5, r5, r4
    6342:	bf2c      	ite	cs
    6344:	2401      	movcs	r4, #1
    6346:	2400      	movcc	r4, #0
    6348:	4434      	add	r4, r6
    634a:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    634c:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    634e:	3240      	adds	r2, #64	; 0x40
    6350:	3140      	adds	r1, #64	; 0x40
    for( ; i >= 16; i -= 16 )
    6352:	280f      	cmp	r0, #15
    6354:	f63f af08 	bhi.w	6168 <mpi_mul_hlp+0x8>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    6358:	2807      	cmp	r0, #7
    635a:	f240 8094 	bls.w	6486 <mpi_mul_hlp+0x326>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    635e:	680d      	ldr	r5, [r1, #0]
    6360:	fba5 8903 	umull	r8, r9, r5, r3
    6364:	eb14 0408 	adds.w	r4, r4, r8
    6368:	bf2c      	ite	cs
    636a:	2501      	movcs	r5, #1
    636c:	2500      	movcc	r5, #0
    636e:	eb05 0709 	add.w	r7, r5, r9
    6372:	6816      	ldr	r6, [r2, #0]
    6374:	1936      	adds	r6, r6, r4
    6376:	bf2c      	ite	cs
    6378:	2501      	movcs	r5, #1
    637a:	2500      	movcc	r5, #0
    637c:	443d      	add	r5, r7
    637e:	6016      	str	r6, [r2, #0]
    6380:	684e      	ldr	r6, [r1, #4]
    6382:	fba3 6706 	umull	r6, r7, r3, r6
    6386:	19ad      	adds	r5, r5, r6
    6388:	bf2c      	ite	cs
    638a:	2401      	movcs	r4, #1
    638c:	2400      	movcc	r4, #0
    638e:	4427      	add	r7, r4
    6390:	6856      	ldr	r6, [r2, #4]
    6392:	1975      	adds	r5, r6, r5
    6394:	bf2c      	ite	cs
    6396:	2401      	movcs	r4, #1
    6398:	2400      	movcc	r4, #0
    639a:	443c      	add	r4, r7
    639c:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    639e:	688e      	ldr	r6, [r1, #8]
    63a0:	fba3 7806 	umull	r7, r8, r3, r6
    63a4:	19e4      	adds	r4, r4, r7
    63a6:	bf2c      	ite	cs
    63a8:	2601      	movcs	r6, #1
    63aa:	2600      	movcc	r6, #0
    63ac:	4446      	add	r6, r8
    63ae:	6895      	ldr	r5, [r2, #8]
    63b0:	192d      	adds	r5, r5, r4
    63b2:	bf2c      	ite	cs
    63b4:	2401      	movcs	r4, #1
    63b6:	2400      	movcc	r4, #0
    63b8:	4434      	add	r4, r6
    63ba:	6095      	str	r5, [r2, #8]
    63bc:	68ce      	ldr	r6, [r1, #12]
    63be:	fba3 7806 	umull	r7, r8, r3, r6
    63c2:	19e4      	adds	r4, r4, r7
    63c4:	bf2c      	ite	cs
    63c6:	2601      	movcs	r6, #1
    63c8:	2600      	movcc	r6, #0
    63ca:	4446      	add	r6, r8
    63cc:	68d5      	ldr	r5, [r2, #12]
    63ce:	192d      	adds	r5, r5, r4
    63d0:	bf2c      	ite	cs
    63d2:	2401      	movcs	r4, #1
    63d4:	2400      	movcc	r4, #0
    63d6:	4434      	add	r4, r6
    63d8:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    63da:	690e      	ldr	r6, [r1, #16]
    63dc:	fba3 7806 	umull	r7, r8, r3, r6
    63e0:	19e4      	adds	r4, r4, r7
    63e2:	bf2c      	ite	cs
    63e4:	2601      	movcs	r6, #1
    63e6:	2600      	movcc	r6, #0
    63e8:	4446      	add	r6, r8
    63ea:	6915      	ldr	r5, [r2, #16]
    63ec:	192d      	adds	r5, r5, r4
    63ee:	bf2c      	ite	cs
    63f0:	2401      	movcs	r4, #1
    63f2:	2400      	movcc	r4, #0
    63f4:	4434      	add	r4, r6
    63f6:	6115      	str	r5, [r2, #16]
    63f8:	694e      	ldr	r6, [r1, #20]
    63fa:	fba3 7806 	umull	r7, r8, r3, r6
    63fe:	19e4      	adds	r4, r4, r7
    6400:	bf2c      	ite	cs
    6402:	2601      	movcs	r6, #1
    6404:	2600      	movcc	r6, #0
    6406:	4446      	add	r6, r8
    6408:	6955      	ldr	r5, [r2, #20]
    640a:	192d      	adds	r5, r5, r4
    640c:	bf2c      	ite	cs
    640e:	2401      	movcs	r4, #1
    6410:	2400      	movcc	r4, #0
    6412:	4434      	add	r4, r6
    6414:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    6416:	698e      	ldr	r6, [r1, #24]
    6418:	fba3 7806 	umull	r7, r8, r3, r6
    641c:	19e4      	adds	r4, r4, r7
    641e:	bf2c      	ite	cs
    6420:	2601      	movcs	r6, #1
    6422:	2600      	movcc	r6, #0
    6424:	4446      	add	r6, r8
    6426:	6995      	ldr	r5, [r2, #24]
    6428:	192d      	adds	r5, r5, r4
    642a:	bf2c      	ite	cs
    642c:	2401      	movcs	r4, #1
    642e:	2400      	movcc	r4, #0
    6430:	4434      	add	r4, r6
    6432:	6195      	str	r5, [r2, #24]
    6434:	69ce      	ldr	r6, [r1, #28]
    6436:	fba3 7806 	umull	r7, r8, r3, r6
    643a:	19e4      	adds	r4, r4, r7
    643c:	bf2c      	ite	cs
    643e:	2601      	movcs	r6, #1
    6440:	2600      	movcc	r6, #0
    6442:	4446      	add	r6, r8
    6444:	69d5      	ldr	r5, [r2, #28]
    6446:	192d      	adds	r5, r5, r4
    6448:	bf2c      	ite	cs
    644a:	2401      	movcs	r4, #1
    644c:	2400      	movcc	r4, #0
    644e:	4434      	add	r4, r6
    6450:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    6452:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    6454:	3220      	adds	r2, #32
    6456:	3120      	adds	r1, #32
    6458:	e77e      	b.n	6358 <mpi_mul_hlp+0x1f8>
    }

    for( ; i > 0; i-- )
    {
        MULADDC_INIT
        MULADDC_CORE
    645a:	680e      	ldr	r6, [r1, #0]
    645c:	fba6 6703 	umull	r6, r7, r6, r3
    6460:	eb14 0c06 	adds.w	ip, r4, r6
    6464:	bf2c      	ite	cs
    6466:	2401      	movcs	r4, #1
    6468:	2400      	movcc	r4, #0
    646a:	4427      	add	r7, r4
    646c:	4616      	mov	r6, r2
    646e:	f856 5b04 	ldr.w	r5, [r6], #4
    6472:	eb15 050c 	adds.w	r5, r5, ip
    6476:	bf2c      	ite	cs
    6478:	2401      	movcs	r4, #1
    647a:	2400      	movcc	r4, #0
    647c:	443c      	add	r4, r7
    647e:	6015      	str	r5, [r2, #0]
    for( ; i > 0; i-- )
    6480:	3801      	subs	r0, #1
        MULADDC_CORE
    6482:	4632      	mov	r2, r6
    6484:	3104      	adds	r1, #4
    for( ; i > 0; i-- )
    6486:	2800      	cmp	r0, #0
    6488:	d1e7      	bne.n	645a <mpi_mul_hlp+0x2fa>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    648a:	6813      	ldr	r3, [r2, #0]
    648c:	4423      	add	r3, r4
    648e:	f842 3b04 	str.w	r3, [r2], #4
    6492:	42a3      	cmp	r3, r4
    6494:	bf34      	ite	cc
    6496:	2401      	movcc	r4, #1
    6498:	2400      	movcs	r4, #0
    }
    while( c != 0 );
    649a:	d3f6      	bcc.n	648a <mpi_mul_hlp+0x32a>
}
    649c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    64a0:	4770      	bx	lr

000064a2 <mbedtls_int_div_int>:
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    64a2:	b322      	cbz	r2, 64ee <mbedtls_int_div_int+0x4c>
{
    64a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64a8:	4614      	mov	r4, r2
    if( 0 == d || u1 >= d )
    64aa:	4282      	cmp	r2, r0
    64ac:	d805      	bhi.n	64ba <mbedtls_int_div_int+0x18>
    {
        if (r != NULL) *r = ~0;
    64ae:	b1db      	cbz	r3, 64e8 <mbedtls_int_div_int+0x46>
    64b0:	f04f 30ff 	mov.w	r0, #4294967295
    64b4:	6018      	str	r0, [r3, #0]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    64b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64ba:	461d      	mov	r5, r3
    dividend  = (mbedtls_t_udbl) u1 << biL;
    64bc:	f04f 0800 	mov.w	r8, #0
    64c0:	4681      	mov	r9, r0
    dividend |= (mbedtls_t_udbl) u0;
    64c2:	ea48 0601 	orr.w	r6, r8, r1
    quotient = dividend / d;
    64c6:	4643      	mov	r3, r8
    64c8:	4630      	mov	r0, r6
    64ca:	4649      	mov	r1, r9
    64cc:	f7f9 fe3a 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    64d0:	2901      	cmp	r1, #1
    64d2:	bf08      	it	eq
    64d4:	2800      	cmpeq	r0, #0
    64d6:	d301      	bcc.n	64dc <mbedtls_int_div_int+0x3a>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    64d8:	f04f 30ff 	mov.w	r0, #4294967295
    if( r != NULL )
    64dc:	2d00      	cmp	r5, #0
    64de:	d0ea      	beq.n	64b6 <mbedtls_int_div_int+0x14>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    64e0:	fb04 6410 	mls	r4, r4, r0, r6
    64e4:	602c      	str	r4, [r5, #0]
    return (mbedtls_mpi_uint) quotient;
    64e6:	e7e6      	b.n	64b6 <mbedtls_int_div_int+0x14>
        return ( ~0 );
    64e8:	f04f 30ff 	mov.w	r0, #4294967295
    64ec:	e7e3      	b.n	64b6 <mbedtls_int_div_int+0x14>
        if (r != NULL) *r = ~0;
    64ee:	b11b      	cbz	r3, 64f8 <mbedtls_int_div_int+0x56>
    64f0:	f04f 30ff 	mov.w	r0, #4294967295
    64f4:	6018      	str	r0, [r3, #0]
    64f6:	4770      	bx	lr
        return ( ~0 );
    64f8:	f04f 30ff 	mov.w	r0, #4294967295
}
    64fc:	4770      	bx	lr

000064fe <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    64fe:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    6500:	688b      	ldr	r3, [r1, #8]
    6502:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    6504:	1ca3      	adds	r3, r4, #2
    6506:	005b      	lsls	r3, r3, #1
    6508:	f003 0308 	and.w	r3, r3, #8
    650c:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    650e:	2120      	movs	r1, #32
    6510:	e006      	b.n	6520 <mpi_montg_init+0x22>
        x *= ( 2 - ( m0 * x ) );
    6512:	fb04 f203 	mul.w	r2, r4, r3
    6516:	f1c2 0202 	rsb	r2, r2, #2
    651a:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    651e:	0849      	lsrs	r1, r1, #1
    6520:	2907      	cmp	r1, #7
    6522:	d8f6      	bhi.n	6512 <mpi_montg_init+0x14>

    *mm = ~x + 1;
    6524:	425b      	negs	r3, r3
    6526:	6003      	str	r3, [r0, #0]
}
    6528:	f85d 4b04 	ldr.w	r4, [sp], #4
    652c:	4770      	bx	lr

0000652e <mbedtls_mpi_zeroize>:
{
    652e:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    6530:	0089      	lsls	r1, r1, #2
    6532:	f7fc fec1 	bl	32b8 <mbedtls_platform_zeroize>
}
    6536:	bd08      	pop	{r3, pc}

00006538 <mbedtls_mpi_init>:
    X->s = 1;
    6538:	2301      	movs	r3, #1
    653a:	6003      	str	r3, [r0, #0]
    X->n = 0;
    653c:	2300      	movs	r3, #0
    653e:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    6540:	6083      	str	r3, [r0, #8]
}
    6542:	4770      	bx	lr

00006544 <mbedtls_mpi_free>:
    if( X == NULL )
    6544:	b178      	cbz	r0, 6566 <mbedtls_mpi_free+0x22>
{
    6546:	b510      	push	{r4, lr}
    6548:	4604      	mov	r4, r0
    if( X->p != NULL )
    654a:	6880      	ldr	r0, [r0, #8]
    654c:	b128      	cbz	r0, 655a <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    654e:	6861      	ldr	r1, [r4, #4]
    6550:	f7ff ffed 	bl	652e <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    6554:	68a0      	ldr	r0, [r4, #8]
    6556:	f7fc fe9d 	bl	3294 <mbedtls_free>
    X->s = 1;
    655a:	2301      	movs	r3, #1
    655c:	6023      	str	r3, [r4, #0]
    X->n = 0;
    655e:	2300      	movs	r3, #0
    6560:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    6562:	60a3      	str	r3, [r4, #8]
}
    6564:	bd10      	pop	{r4, pc}
    6566:	4770      	bx	lr

00006568 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6568:	f242 7310 	movw	r3, #10000	; 0x2710
    656c:	4299      	cmp	r1, r3
    656e:	d81e      	bhi.n	65ae <mbedtls_mpi_grow+0x46>
    if( X->n < nblimbs )
    6570:	6843      	ldr	r3, [r0, #4]
    6572:	428b      	cmp	r3, r1
    6574:	d301      	bcc.n	657a <mbedtls_mpi_grow+0x12>
    return( 0 );
    6576:	2000      	movs	r0, #0
}
    6578:	4770      	bx	lr
{
    657a:	b570      	push	{r4, r5, r6, lr}
    657c:	460d      	mov	r5, r1
    657e:	4604      	mov	r4, r0
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    6580:	2104      	movs	r1, #4
    6582:	4628      	mov	r0, r5
    6584:	f7fc fe7e 	bl	3284 <mbedtls_calloc>
    6588:	4606      	mov	r6, r0
    658a:	b198      	cbz	r0, 65b4 <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    658c:	68a1      	ldr	r1, [r4, #8]
    658e:	b151      	cbz	r1, 65a6 <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    6590:	6862      	ldr	r2, [r4, #4]
    6592:	0092      	lsls	r2, r2, #2
    6594:	f7ff fa05 	bl	59a2 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    6598:	6861      	ldr	r1, [r4, #4]
    659a:	68a0      	ldr	r0, [r4, #8]
    659c:	f7ff ffc7 	bl	652e <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    65a0:	68a0      	ldr	r0, [r4, #8]
    65a2:	f7fc fe77 	bl	3294 <mbedtls_free>
        X->n = nblimbs;
    65a6:	6065      	str	r5, [r4, #4]
        X->p = p;
    65a8:	60a6      	str	r6, [r4, #8]
    return( 0 );
    65aa:	2000      	movs	r0, #0
}
    65ac:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    65ae:	f06f 000f 	mvn.w	r0, #15
    65b2:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    65b4:	f06f 000f 	mvn.w	r0, #15
    65b8:	e7f8      	b.n	65ac <mbedtls_mpi_grow+0x44>

000065ba <mbedtls_mpi_copy>:
{
    65ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    65bc:	4288      	cmp	r0, r1
    65be:	d02d      	beq.n	661c <mbedtls_mpi_copy+0x62>
    65c0:	460e      	mov	r6, r1
    65c2:	4605      	mov	r5, r0
    if( Y->p == NULL )
    65c4:	6888      	ldr	r0, [r1, #8]
    65c6:	b138      	cbz	r0, 65d8 <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    65c8:	684b      	ldr	r3, [r1, #4]
    65ca:	3b01      	subs	r3, #1
    65cc:	b14b      	cbz	r3, 65e2 <mbedtls_mpi_copy+0x28>
        if( Y->p[i] != 0 )
    65ce:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    65d2:	b932      	cbnz	r2, 65e2 <mbedtls_mpi_copy+0x28>
    for( i = Y->n - 1; i > 0; i-- )
    65d4:	3b01      	subs	r3, #1
    65d6:	e7f9      	b.n	65cc <mbedtls_mpi_copy+0x12>
        mbedtls_mpi_free( X );
    65d8:	4628      	mov	r0, r5
    65da:	f7ff ffb3 	bl	6544 <mbedtls_mpi_free>
        return( 0 );
    65de:	2700      	movs	r7, #0
    65e0:	e01a      	b.n	6618 <mbedtls_mpi_copy+0x5e>
    i++;
    65e2:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    65e4:	6833      	ldr	r3, [r6, #0]
    65e6:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    65e8:	686a      	ldr	r2, [r5, #4]
    65ea:	42a2      	cmp	r2, r4
    65ec:	d206      	bcs.n	65fc <mbedtls_mpi_copy+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    65ee:	4621      	mov	r1, r4
    65f0:	4628      	mov	r0, r5
    65f2:	f7ff ffb9 	bl	6568 <mbedtls_mpi_grow>
    65f6:	4607      	mov	r7, r0
    65f8:	b148      	cbz	r0, 660e <mbedtls_mpi_copy+0x54>
    65fa:	e00d      	b.n	6618 <mbedtls_mpi_copy+0x5e>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    65fc:	68a8      	ldr	r0, [r5, #8]
    65fe:	1b12      	subs	r2, r2, r4
    6600:	0092      	lsls	r2, r2, #2
    6602:	2100      	movs	r1, #0
    6604:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6608:	f7ff f9f0 	bl	59ec <memset>
    int ret = 0;
    660c:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    660e:	00a2      	lsls	r2, r4, #2
    6610:	68b1      	ldr	r1, [r6, #8]
    6612:	68a8      	ldr	r0, [r5, #8]
    6614:	f7ff f9c5 	bl	59a2 <memcpy>
}
    6618:	4638      	mov	r0, r7
    661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    661c:	2700      	movs	r7, #0
    661e:	e7fb      	b.n	6618 <mbedtls_mpi_copy+0x5e>

00006620 <mbedtls_mpi_lset>:
{
    6620:	b570      	push	{r4, r5, r6, lr}
    6622:	4604      	mov	r4, r0
    6624:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    6626:	2101      	movs	r1, #1
    6628:	f7ff ff9e 	bl	6568 <mbedtls_mpi_grow>
    662c:	4605      	mov	r5, r0
    662e:	b108      	cbz	r0, 6634 <mbedtls_mpi_lset+0x14>
}
    6630:	4628      	mov	r0, r5
    6632:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    6634:	6862      	ldr	r2, [r4, #4]
    6636:	0092      	lsls	r2, r2, #2
    6638:	2100      	movs	r1, #0
    663a:	68a0      	ldr	r0, [r4, #8]
    663c:	f7ff f9d6 	bl	59ec <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    6640:	68a3      	ldr	r3, [r4, #8]
    6642:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    6646:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    664a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    664c:	2e00      	cmp	r6, #0
    664e:	db02      	blt.n	6656 <mbedtls_mpi_lset+0x36>
    6650:	2301      	movs	r3, #1
    6652:	6023      	str	r3, [r4, #0]
    return( ret );
    6654:	e7ec      	b.n	6630 <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    6656:	f04f 33ff 	mov.w	r3, #4294967295
    665a:	e7fa      	b.n	6652 <mbedtls_mpi_lset+0x32>

0000665c <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    665c:	6843      	ldr	r3, [r0, #4]
    665e:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    6662:	d209      	bcs.n	6678 <mbedtls_mpi_get_bit+0x1c>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    6664:	6883      	ldr	r3, [r0, #8]
    6666:	094a      	lsrs	r2, r1, #5
    6668:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    666c:	f001 011f 	and.w	r1, r1, #31
    6670:	40c8      	lsrs	r0, r1
    6672:	f000 0001 	and.w	r0, r0, #1
    6676:	4770      	bx	lr
        return( 0 );
    6678:	2000      	movs	r0, #0
}
    667a:	4770      	bx	lr

0000667c <mbedtls_mpi_bitlen>:
{
    667c:	b510      	push	{r4, lr}
    if( X->n == 0 )
    667e:	6844      	ldr	r4, [r0, #4]
    6680:	b18c      	cbz	r4, 66a6 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    6682:	3c01      	subs	r4, #1
    6684:	b12c      	cbz	r4, 6692 <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
    6686:	6883      	ldr	r3, [r0, #8]
    6688:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    668c:	b90b      	cbnz	r3, 6692 <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
    668e:	3c01      	subs	r4, #1
    6690:	e7f8      	b.n	6684 <mbedtls_mpi_bitlen+0x8>
    j = biL - mbedtls_clz( X->p[i] );
    6692:	6883      	ldr	r3, [r0, #8]
    6694:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6698:	f7ff fd00 	bl	609c <mbedtls_clz>
    669c:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    66a0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
}
    66a4:	bd10      	pop	{r4, pc}
        return( 0 );
    66a6:	2000      	movs	r0, #0
    66a8:	e7fc      	b.n	66a4 <mbedtls_mpi_bitlen+0x28>

000066aa <mbedtls_mpi_size>:
{
    66aa:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    66ac:	f7ff ffe6 	bl	667c <mbedtls_mpi_bitlen>
    66b0:	3007      	adds	r0, #7
}
    66b2:	08c0      	lsrs	r0, r0, #3
    66b4:	bd08      	pop	{r3, pc}

000066b6 <mbedtls_mpi_read_binary>:
{
    66b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66ba:	4606      	mov	r6, r0
    66bc:	4688      	mov	r8, r1
    66be:	4615      	mov	r5, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    66c0:	f012 0103 	ands.w	r1, r2, #3
    66c4:	bf18      	it	ne
    66c6:	2101      	movne	r1, #1
    66c8:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    66cc:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    66d0:	6843      	ldr	r3, [r0, #4]
    66d2:	42a3      	cmp	r3, r4
    66d4:	d00a      	beq.n	66ec <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    66d6:	f7ff ff35 	bl	6544 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    66da:	4630      	mov	r0, r6
    66dc:	f7ff ff2c 	bl	6538 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    66e0:	4621      	mov	r1, r4
    66e2:	4630      	mov	r0, r6
    66e4:	f7ff ff40 	bl	6568 <mbedtls_mpi_grow>
    66e8:	4607      	mov	r7, r0
    66ea:	b990      	cbnz	r0, 6712 <mbedtls_mpi_read_binary+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    66ec:	2100      	movs	r1, #0
    66ee:	4630      	mov	r0, r6
    66f0:	f7ff ff96 	bl	6620 <mbedtls_mpi_lset>
    66f4:	4607      	mov	r7, r0
    66f6:	b960      	cbnz	r0, 6712 <mbedtls_mpi_read_binary+0x5c>
    if( buf != NULL )
    66f8:	f1b8 0f00 	cmp.w	r8, #0
    66fc:	d009      	beq.n	6712 <mbedtls_mpi_read_binary+0x5c>
        Xp = (unsigned char*) X->p;
    66fe:	68b0      	ldr	r0, [r6, #8]
        memcpy( Xp + overhead, buf, buflen );
    6700:	462a      	mov	r2, r5
    6702:	4641      	mov	r1, r8
    6704:	4448      	add	r0, r9
    6706:	f7ff f94c 	bl	59a2 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    670a:	4621      	mov	r1, r4
    670c:	68b0      	ldr	r0, [r6, #8]
    670e:	f7ff fce8 	bl	60e2 <mpi_bigendian_to_host>
}
    6712:	4638      	mov	r0, r7
    6714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006718 <mbedtls_mpi_write_binary>:
{
    6718:	b570      	push	{r4, r5, r6, lr}
    671a:	4605      	mov	r5, r0
    671c:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    671e:	686e      	ldr	r6, [r5, #4]
    6720:	00b6      	lsls	r6, r6, #2
    if( stored_bytes < buflen )
    6722:	4296      	cmp	r6, r2
    6724:	d30f      	bcc.n	6746 <mbedtls_mpi_write_binary+0x2e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    6726:	4613      	mov	r3, r2
    6728:	42b3      	cmp	r3, r6
    672a:	d213      	bcs.n	6754 <mbedtls_mpi_write_binary+0x3c>
            if( GET_BYTE( X, i ) != 0 )
    672c:	68ac      	ldr	r4, [r5, #8]
    672e:	f023 0103 	bic.w	r1, r3, #3
    6732:	5861      	ldr	r1, [r4, r1]
    6734:	f003 0403 	and.w	r4, r3, #3
    6738:	00e4      	lsls	r4, r4, #3
    673a:	40e1      	lsrs	r1, r4
    673c:	f011 0fff 	tst.w	r1, #255	; 0xff
    6740:	d11a      	bne.n	6778 <mbedtls_mpi_write_binary+0x60>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    6742:	3301      	adds	r3, #1
    6744:	e7f0      	b.n	6728 <mbedtls_mpi_write_binary+0x10>
        p = buf + buflen - stored_bytes;
    6746:	1b92      	subs	r2, r2, r6
    6748:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    674a:	2100      	movs	r1, #0
    674c:	f7ff f94e 	bl	59ec <memset>
        p = buf + buflen - stored_bytes;
    6750:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    6752:	4632      	mov	r2, r6
    for( i = 0; i < bytes_to_copy; i++ )
    6754:	2300      	movs	r3, #0
    6756:	e00b      	b.n	6770 <mbedtls_mpi_write_binary+0x58>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    6758:	68ac      	ldr	r4, [r5, #8]
    675a:	f023 0103 	bic.w	r1, r3, #3
    675e:	5864      	ldr	r4, [r4, r1]
    6760:	f003 0103 	and.w	r1, r3, #3
    6764:	00c9      	lsls	r1, r1, #3
    6766:	40cc      	lsrs	r4, r1
    6768:	1ad1      	subs	r1, r2, r3
    676a:	3901      	subs	r1, #1
    676c:	5444      	strb	r4, [r0, r1]
    for( i = 0; i < bytes_to_copy; i++ )
    676e:	3301      	adds	r3, #1
    6770:	429a      	cmp	r2, r3
    6772:	d8f1      	bhi.n	6758 <mbedtls_mpi_write_binary+0x40>
    return( 0 );
    6774:	2000      	movs	r0, #0
}
    6776:	bd70      	pop	{r4, r5, r6, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    6778:	f06f 0007 	mvn.w	r0, #7
    677c:	e7fb      	b.n	6776 <mbedtls_mpi_write_binary+0x5e>

0000677e <mbedtls_mpi_shift_l>:
{
    677e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6780:	4605      	mov	r5, r0
    6782:	460f      	mov	r7, r1
    v0 = count / (biL    );
    6784:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    6786:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    678a:	f7ff ff77 	bl	667c <mbedtls_mpi_bitlen>
    678e:	4438      	add	r0, r7
    if( X->n * biL < i )
    6790:	686b      	ldr	r3, [r5, #4]
    6792:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    6796:	d802      	bhi.n	679e <mbedtls_mpi_shift_l+0x20>
    if( v0 > 0 )
    6798:	b334      	cbz	r4, 67e8 <mbedtls_mpi_shift_l+0x6a>
        for( i = X->n; i > v0; i-- )
    679a:	686b      	ldr	r3, [r5, #4]
    679c:	e017      	b.n	67ce <mbedtls_mpi_shift_l+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    679e:	f010 011f 	ands.w	r1, r0, #31
    67a2:	bf18      	it	ne
    67a4:	2101      	movne	r1, #1
    67a6:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    67aa:	4628      	mov	r0, r5
    67ac:	f7ff fedc 	bl	6568 <mbedtls_mpi_grow>
    67b0:	4603      	mov	r3, r0
    67b2:	2800      	cmp	r0, #0
    67b4:	d0f0      	beq.n	6798 <mbedtls_mpi_shift_l+0x1a>
cleanup:
    67b6:	e032      	b.n	681e <mbedtls_mpi_shift_l+0xa0>
            X->p[i - 1] = X->p[i - v0 - 1];
    67b8:	68a9      	ldr	r1, [r5, #8]
    67ba:	1b1a      	subs	r2, r3, r4
    67bc:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    67c0:	181f      	adds	r7, r3, r0
    67c2:	4402      	add	r2, r0
    67c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    67c8:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    67cc:	3b01      	subs	r3, #1
    67ce:	42a3      	cmp	r3, r4
    67d0:	d8f2      	bhi.n	67b8 <mbedtls_mpi_shift_l+0x3a>
    67d2:	e007      	b.n	67e4 <mbedtls_mpi_shift_l+0x66>
            X->p[i - 1] = 0;
    67d4:	68a9      	ldr	r1, [r5, #8]
    67d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    67da:	3a01      	subs	r2, #1
    67dc:	2000      	movs	r0, #0
    67de:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    67e2:	3b01      	subs	r3, #1
    67e4:	2b00      	cmp	r3, #0
    67e6:	d1f5      	bne.n	67d4 <mbedtls_mpi_shift_l+0x56>
    if( t1 > 0 )
    67e8:	b10e      	cbz	r6, 67ee <mbedtls_mpi_shift_l+0x70>
    mbedtls_mpi_uint r0 = 0, r1;
    67ea:	2700      	movs	r7, #0
    67ec:	e013      	b.n	6816 <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    67ee:	2300      	movs	r3, #0
    67f0:	e015      	b.n	681e <mbedtls_mpi_shift_l+0xa0>
            r1 = X->p[i] >> (biL - t1);
    67f2:	68a8      	ldr	r0, [r5, #8]
    67f4:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    67f8:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    67fc:	fa01 f206 	lsl.w	r2, r1, r6
    6800:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    6804:	68a8      	ldr	r0, [r5, #8]
    6806:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    680a:	433a      	orrs	r2, r7
    680c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    6810:	3401      	adds	r4, #1
            r0 = r1;
    6812:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    6816:	6869      	ldr	r1, [r5, #4]
    6818:	42a1      	cmp	r1, r4
    681a:	d8ea      	bhi.n	67f2 <mbedtls_mpi_shift_l+0x74>
    ret = 0;
    681c:	2300      	movs	r3, #0
}
    681e:	4618      	mov	r0, r3
    6820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006822 <mbedtls_mpi_shift_r>:
{
    6822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    v0 = count /  biL;
    6824:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    6826:	6843      	ldr	r3, [r0, #4]
    6828:	42a3      	cmp	r3, r4
    682a:	d30b      	bcc.n	6844 <mbedtls_mpi_shift_r+0x22>
    682c:	f001 011f 	and.w	r1, r1, #31
    6830:	d006      	beq.n	6840 <mbedtls_mpi_shift_r+0x1e>
    if( v0 > 0 )
    6832:	b9bc      	cbnz	r4, 6864 <mbedtls_mpi_shift_r+0x42>
    if( v1 > 0 )
    6834:	2900      	cmp	r1, #0
    6836:	d03a      	beq.n	68ae <mbedtls_mpi_shift_r+0x8c>
        for( i = X->n; i > 0; i-- )
    6838:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    683a:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    683e:	e032      	b.n	68a6 <mbedtls_mpi_shift_r+0x84>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    6840:	2900      	cmp	r1, #0
    6842:	d0f6      	beq.n	6832 <mbedtls_mpi_shift_r+0x10>
        return mbedtls_mpi_lset( X, 0 );
    6844:	2100      	movs	r1, #0
    6846:	f7ff feeb 	bl	6620 <mbedtls_mpi_lset>
}
    684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            X->p[i] = X->p[i + v0];
    684c:	6882      	ldr	r2, [r0, #8]
    684e:	191d      	adds	r5, r3, r4
    6850:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    6854:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    6858:	3301      	adds	r3, #1
    685a:	6842      	ldr	r2, [r0, #4]
    685c:	1b12      	subs	r2, r2, r4
    685e:	429a      	cmp	r2, r3
    6860:	d8f4      	bhi.n	684c <mbedtls_mpi_shift_r+0x2a>
    6862:	e006      	b.n	6872 <mbedtls_mpi_shift_r+0x50>
    6864:	2300      	movs	r3, #0
    6866:	e7f8      	b.n	685a <mbedtls_mpi_shift_r+0x38>
            X->p[i] = 0;
    6868:	6882      	ldr	r2, [r0, #8]
    686a:	2400      	movs	r4, #0
    686c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    6870:	3301      	adds	r3, #1
    6872:	6842      	ldr	r2, [r0, #4]
    6874:	429a      	cmp	r2, r3
    6876:	d8f7      	bhi.n	6868 <mbedtls_mpi_shift_r+0x46>
    6878:	e7dc      	b.n	6834 <mbedtls_mpi_shift_r+0x12>
            r1 = X->p[i - 1] << (biL - v1);
    687a:	6887      	ldr	r7, [r0, #8]
    687c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    6880:	3b01      	subs	r3, #1
    6882:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
    6886:	f1c1 0420 	rsb	r4, r1, #32
            X->p[i - 1] >>= v1;
    688a:	fa26 f501 	lsr.w	r5, r6, r1
    688e:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
            X->p[i - 1] |= r0;
    6892:	6887      	ldr	r7, [r0, #8]
    6894:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
    6898:	ea45 050c 	orr.w	r5, r5, ip
    689c:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    68a0:	3a01      	subs	r2, #1
            r0 = r1;
    68a2:	fa06 fc04 	lsl.w	ip, r6, r4
        for( i = X->n; i > 0; i-- )
    68a6:	2a00      	cmp	r2, #0
    68a8:	d1e7      	bne.n	687a <mbedtls_mpi_shift_r+0x58>
    return( 0 );
    68aa:	2000      	movs	r0, #0
    68ac:	e7cd      	b.n	684a <mbedtls_mpi_shift_r+0x28>
    68ae:	2000      	movs	r0, #0
    68b0:	e7cb      	b.n	684a <mbedtls_mpi_shift_r+0x28>

000068b2 <mbedtls_mpi_cmp_abs>:
{
    68b2:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    68b4:	6843      	ldr	r3, [r0, #4]
    68b6:	b143      	cbz	r3, 68ca <mbedtls_mpi_cmp_abs+0x18>
        if( X->p[i - 1] != 0 )
    68b8:	6884      	ldr	r4, [r0, #8]
    68ba:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    68be:	3a01      	subs	r2, #1
    68c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    68c4:	b90a      	cbnz	r2, 68ca <mbedtls_mpi_cmp_abs+0x18>
    for( i = X->n; i > 0; i-- )
    68c6:	3b01      	subs	r3, #1
    68c8:	e7f5      	b.n	68b6 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    68ca:	684a      	ldr	r2, [r1, #4]
    68cc:	b142      	cbz	r2, 68e0 <mbedtls_mpi_cmp_abs+0x2e>
        if( Y->p[j - 1] != 0 )
    68ce:	688d      	ldr	r5, [r1, #8]
    68d0:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    68d4:	3c01      	subs	r4, #1
    68d6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    68da:	b90c      	cbnz	r4, 68e0 <mbedtls_mpi_cmp_abs+0x2e>
    for( j = Y->n; j > 0; j-- )
    68dc:	3a01      	subs	r2, #1
    68de:	e7f5      	b.n	68cc <mbedtls_mpi_cmp_abs+0x1a>
    if( i == 0 && j == 0 )
    68e0:	b903      	cbnz	r3, 68e4 <mbedtls_mpi_cmp_abs+0x32>
    68e2:	b19a      	cbz	r2, 690c <mbedtls_mpi_cmp_abs+0x5a>
    if( i > j ) return(  1 );
    68e4:	4293      	cmp	r3, r2
    68e6:	d813      	bhi.n	6910 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    68e8:	d315      	bcc.n	6916 <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    68ea:	b16b      	cbz	r3, 6908 <mbedtls_mpi_cmp_abs+0x56>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    68ec:	6884      	ldr	r4, [r0, #8]
    68ee:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    68f2:	3a01      	subs	r2, #1
    68f4:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    68f8:	688d      	ldr	r5, [r1, #8]
    68fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    68fe:	4294      	cmp	r4, r2
    6900:	d80c      	bhi.n	691c <mbedtls_mpi_cmp_abs+0x6a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    6902:	d30d      	bcc.n	6920 <mbedtls_mpi_cmp_abs+0x6e>
    for( ; i > 0; i-- )
    6904:	3b01      	subs	r3, #1
    6906:	e7f0      	b.n	68ea <mbedtls_mpi_cmp_abs+0x38>
    return( 0 );
    6908:	2000      	movs	r0, #0
    690a:	e002      	b.n	6912 <mbedtls_mpi_cmp_abs+0x60>
        return( 0 );
    690c:	2000      	movs	r0, #0
    690e:	e000      	b.n	6912 <mbedtls_mpi_cmp_abs+0x60>
    if( i > j ) return(  1 );
    6910:	2001      	movs	r0, #1
}
    6912:	bc30      	pop	{r4, r5}
    6914:	4770      	bx	lr
    if( j > i ) return( -1 );
    6916:	f04f 30ff 	mov.w	r0, #4294967295
    691a:	e7fa      	b.n	6912 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    691c:	2001      	movs	r0, #1
    691e:	e7f8      	b.n	6912 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    6920:	f04f 30ff 	mov.w	r0, #4294967295
    6924:	e7f5      	b.n	6912 <mbedtls_mpi_cmp_abs+0x60>

00006926 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    6926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    692a:	b083      	sub	sp, #12
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
    692c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    692e:	6865      	ldr	r5, [r4, #4]
    6930:	6854      	ldr	r4, [r2, #4]
    6932:	3401      	adds	r4, #1
    6934:	42a5      	cmp	r5, r4
    6936:	d35e      	bcc.n	69f6 <mpi_montmul+0xd0>
    6938:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    693a:	68a4      	ldr	r4, [r4, #8]
    693c:	2c00      	cmp	r4, #0
    693e:	d05d      	beq.n	69fc <mpi_montmul+0xd6>
    6940:	9301      	str	r3, [sp, #4]
    6942:	4691      	mov	r9, r2
    6944:	468b      	mov	fp, r1
    6946:	4682      	mov	sl, r0
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
    6948:	00aa      	lsls	r2, r5, #2
    694a:	2100      	movs	r1, #0
    694c:	4620      	mov	r0, r4
    694e:	f7ff f84d 	bl	59ec <memset>

    d = T->p;
    6952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6954:	689d      	ldr	r5, [r3, #8]
    n = N->n;
    6956:	f8d9 8004 	ldr.w	r8, [r9, #4]
    m = ( B->n < n ) ? B->n : n;
    695a:	f8db 3004 	ldr.w	r3, [fp, #4]
    695e:	4543      	cmp	r3, r8
    6960:	bf28      	it	cs
    6962:	4643      	movcs	r3, r8
    6964:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    6966:	2600      	movs	r6, #0
    6968:	e021      	b.n	69ae <mpi_montmul+0x88>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    696a:	f8da 3008 	ldr.w	r3, [sl, #8]
    696e:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6972:	682b      	ldr	r3, [r5, #0]
    6974:	f8db 1008 	ldr.w	r1, [fp, #8]
    6978:	680c      	ldr	r4, [r1, #0]
    697a:	fb07 3404 	mla	r4, r7, r4, r3
    697e:	9b01      	ldr	r3, [sp, #4]
    6980:	fb03 f404 	mul.w	r4, r3, r4

        mpi_mul_hlp( m, B->p, d, u0 );
    6984:	463b      	mov	r3, r7
    6986:	462a      	mov	r2, r5
    6988:	9800      	ldr	r0, [sp, #0]
    698a:	f7ff fbe9 	bl	6160 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    698e:	4623      	mov	r3, r4
    6990:	462a      	mov	r2, r5
    6992:	f8d9 1008 	ldr.w	r1, [r9, #8]
    6996:	4640      	mov	r0, r8
    6998:	f7ff fbe2 	bl	6160 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    699c:	1d2a      	adds	r2, r5, #4
    699e:	602f      	str	r7, [r5, #0]
    69a0:	f108 0301 	add.w	r3, r8, #1
    69a4:	2100      	movs	r1, #0
    69a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for( i = 0; i < n; i++ )
    69aa:	3601      	adds	r6, #1
        *d++ = u0; d[n + 1] = 0;
    69ac:	4615      	mov	r5, r2
    for( i = 0; i < n; i++ )
    69ae:	4546      	cmp	r6, r8
    69b0:	d3db      	bcc.n	696a <mpi_montmul+0x44>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
    69b2:	f108 0201 	add.w	r2, r8, #1
    69b6:	0092      	lsls	r2, r2, #2
    69b8:	4629      	mov	r1, r5
    69ba:	f8da 0008 	ldr.w	r0, [sl, #8]
    69be:	f7fe fff0 	bl	59a2 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
    69c2:	4649      	mov	r1, r9
    69c4:	4650      	mov	r0, sl
    69c6:	f7ff ff74 	bl	68b2 <mbedtls_mpi_cmp_abs>
    69ca:	2800      	cmp	r0, #0
    69cc:	db0a      	blt.n	69e4 <mpi_montmul+0xbe>
        mpi_sub_hlp( n, N->p, A->p );
    69ce:	f8da 2008 	ldr.w	r2, [sl, #8]
    69d2:	f8d9 1008 	ldr.w	r1, [r9, #8]
    69d6:	4640      	mov	r0, r8
    69d8:	f7ff fb9b 	bl	6112 <mpi_sub_hlp>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
    69dc:	2000      	movs	r0, #0
}
    69de:	b003      	add	sp, #12
    69e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mpi_sub_hlp( n, A->p, T->p );
    69e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    69e6:	689a      	ldr	r2, [r3, #8]
    69e8:	f8da 1008 	ldr.w	r1, [sl, #8]
    69ec:	4640      	mov	r0, r8
    69ee:	f7ff fb90 	bl	6112 <mpi_sub_hlp>
    return( 0 );
    69f2:	2000      	movs	r0, #0
    69f4:	e7f3      	b.n	69de <mpi_montmul+0xb8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    69f6:	f06f 0003 	mvn.w	r0, #3
    69fa:	e7f0      	b.n	69de <mpi_montmul+0xb8>
    69fc:	f06f 0003 	mvn.w	r0, #3
    6a00:	e7ed      	b.n	69de <mpi_montmul+0xb8>

00006a02 <mpi_montred>:
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    6a02:	b510      	push	{r4, lr}
    6a04:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    6a06:	2401      	movs	r4, #1
    6a08:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    6a0a:	9402      	str	r4, [sp, #8]
    6a0c:	9403      	str	r4, [sp, #12]
    U.p = &z;
    6a0e:	ac05      	add	r4, sp, #20
    6a10:	9404      	str	r4, [sp, #16]

    return( mpi_montmul( A, &U, N, mm, T ) );
    6a12:	9300      	str	r3, [sp, #0]
    6a14:	4613      	mov	r3, r2
    6a16:	460a      	mov	r2, r1
    6a18:	a902      	add	r1, sp, #8
    6a1a:	f7ff ff84 	bl	6926 <mpi_montmul>
}
    6a1e:	b006      	add	sp, #24
    6a20:	bd10      	pop	{r4, pc}

00006a22 <mbedtls_mpi_cmp_mpi>:
{
    6a22:	b470      	push	{r4, r5, r6}
    for( i = X->n; i > 0; i-- )
    6a24:	6843      	ldr	r3, [r0, #4]
    6a26:	b143      	cbz	r3, 6a3a <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
    6a28:	6884      	ldr	r4, [r0, #8]
    6a2a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6a2e:	3a01      	subs	r2, #1
    6a30:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    6a34:	b90a      	cbnz	r2, 6a3a <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
    6a36:	3b01      	subs	r3, #1
    6a38:	e7f5      	b.n	6a26 <mbedtls_mpi_cmp_mpi+0x4>
    for( j = Y->n; j > 0; j-- )
    6a3a:	684a      	ldr	r2, [r1, #4]
    6a3c:	b142      	cbz	r2, 6a50 <mbedtls_mpi_cmp_mpi+0x2e>
        if( Y->p[j - 1] != 0 )
    6a3e:	688d      	ldr	r5, [r1, #8]
    6a40:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    6a44:	3c01      	subs	r4, #1
    6a46:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    6a4a:	b90c      	cbnz	r4, 6a50 <mbedtls_mpi_cmp_mpi+0x2e>
    for( j = Y->n; j > 0; j-- )
    6a4c:	3a01      	subs	r2, #1
    6a4e:	e7f5      	b.n	6a3c <mbedtls_mpi_cmp_mpi+0x1a>
    if( i == 0 && j == 0 )
    6a50:	b903      	cbnz	r3, 6a54 <mbedtls_mpi_cmp_mpi+0x32>
    6a52:	b352      	cbz	r2, 6aaa <mbedtls_mpi_cmp_mpi+0x88>
    if( i > j ) return(  X->s );
    6a54:	4293      	cmp	r3, r2
    6a56:	d80f      	bhi.n	6a78 <mbedtls_mpi_cmp_mpi+0x56>
    if( j > i ) return( -Y->s );
    6a58:	4293      	cmp	r3, r2
    6a5a:	d311      	bcc.n	6a80 <mbedtls_mpi_cmp_mpi+0x5e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    6a5c:	6805      	ldr	r5, [r0, #0]
    6a5e:	2d00      	cmp	r5, #0
    6a60:	dd02      	ble.n	6a68 <mbedtls_mpi_cmp_mpi+0x46>
    6a62:	680a      	ldr	r2, [r1, #0]
    6a64:	2a00      	cmp	r2, #0
    6a66:	db22      	blt.n	6aae <mbedtls_mpi_cmp_mpi+0x8c>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    6a68:	680a      	ldr	r2, [r1, #0]
    6a6a:	2a00      	cmp	r2, #0
    6a6c:	dd0c      	ble.n	6a88 <mbedtls_mpi_cmp_mpi+0x66>
    6a6e:	2d00      	cmp	r5, #0
    6a70:	da0a      	bge.n	6a88 <mbedtls_mpi_cmp_mpi+0x66>
    6a72:	f04f 35ff 	mov.w	r5, #4294967295
    6a76:	e000      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
    if( i > j ) return(  X->s );
    6a78:	6805      	ldr	r5, [r0, #0]
}
    6a7a:	4628      	mov	r0, r5
    6a7c:	bc70      	pop	{r4, r5, r6}
    6a7e:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    6a80:	680d      	ldr	r5, [r1, #0]
    6a82:	426d      	negs	r5, r5
    6a84:	e7f9      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
    for( ; i > 0; i-- )
    6a86:	3b01      	subs	r3, #1
    6a88:	b16b      	cbz	r3, 6aa6 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    6a8a:	6884      	ldr	r4, [r0, #8]
    6a8c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6a90:	3a01      	subs	r2, #1
    6a92:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    6a96:	688e      	ldr	r6, [r1, #8]
    6a98:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    6a9c:	4294      	cmp	r4, r2
    6a9e:	d8ec      	bhi.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    6aa0:	d2f1      	bcs.n	6a86 <mbedtls_mpi_cmp_mpi+0x64>
    6aa2:	426d      	negs	r5, r5
    6aa4:	e7e9      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    6aa6:	2500      	movs	r5, #0
    6aa8:	e7e7      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
        return( 0 );
    6aaa:	2500      	movs	r5, #0
    6aac:	e7e5      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    6aae:	2501      	movs	r5, #1
    6ab0:	e7e3      	b.n	6a7a <mbedtls_mpi_cmp_mpi+0x58>

00006ab2 <mbedtls_mpi_cmp_int>:
{
    6ab2:	b500      	push	{lr}
    6ab4:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    6ab6:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    6aba:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    6abe:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    6ac0:	2900      	cmp	r1, #0
    6ac2:	db0b      	blt.n	6adc <mbedtls_mpi_cmp_int+0x2a>
    6ac4:	2301      	movs	r3, #1
    6ac6:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    6ac8:	2301      	movs	r3, #1
    6aca:	9302      	str	r3, [sp, #8]
    Y.p = p;
    6acc:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    6ad0:	a901      	add	r1, sp, #4
    6ad2:	f7ff ffa6 	bl	6a22 <mbedtls_mpi_cmp_mpi>
}
    6ad6:	b005      	add	sp, #20
    6ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    6adc:	f04f 33ff 	mov.w	r3, #4294967295
    6ae0:	e7f1      	b.n	6ac6 <mbedtls_mpi_cmp_int+0x14>

00006ae2 <mbedtls_mpi_add_abs>:
{
    6ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ae4:	4607      	mov	r7, r0
    6ae6:	4614      	mov	r4, r2
    if( X == B )
    6ae8:	4290      	cmp	r0, r2
    6aea:	d014      	beq.n	6b16 <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    6aec:	42b9      	cmp	r1, r7
    6aee:	d005      	beq.n	6afc <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6af0:	4638      	mov	r0, r7
    6af2:	f7ff fd62 	bl	65ba <mbedtls_mpi_copy>
    6af6:	4601      	mov	r1, r0
    6af8:	2800      	cmp	r0, #0
    6afa:	d144      	bne.n	6b86 <mbedtls_mpi_add_abs+0xa4>
    X->s = 1;
    6afc:	2301      	movs	r3, #1
    6afe:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    6b00:	6865      	ldr	r5, [r4, #4]
    6b02:	b15d      	cbz	r5, 6b1c <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    6b04:	68a2      	ldr	r2, [r4, #8]
    6b06:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    6b0a:	3b01      	subs	r3, #1
    6b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b10:	b923      	cbnz	r3, 6b1c <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    6b12:	3d01      	subs	r5, #1
    6b14:	e7f5      	b.n	6b02 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    6b16:	460c      	mov	r4, r1
    6b18:	4601      	mov	r1, r0
    6b1a:	e7e7      	b.n	6aec <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    6b1c:	4629      	mov	r1, r5
    6b1e:	4638      	mov	r0, r7
    6b20:	f7ff fd22 	bl	6568 <mbedtls_mpi_grow>
    6b24:	4601      	mov	r1, r0
    6b26:	bb70      	cbnz	r0, 6b86 <mbedtls_mpi_add_abs+0xa4>
    o = B->p; p = X->p; c = 0;
    6b28:	f8d4 c008 	ldr.w	ip, [r4, #8]
    6b2c:	68bb      	ldr	r3, [r7, #8]
    6b2e:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    6b30:	4626      	mov	r6, r4
    6b32:	e00e      	b.n	6b52 <mbedtls_mpi_add_abs+0x70>
        tmp= *o;
    6b34:	f85c 0b04 	ldr.w	r0, [ip], #4
        *p +=  c; c  = ( *p <  c );
    6b38:	681a      	ldr	r2, [r3, #0]
    6b3a:	18a4      	adds	r4, r4, r2
    6b3c:	bf2c      	ite	cs
    6b3e:	2201      	movcs	r2, #1
    6b40:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    6b42:	4404      	add	r4, r0
    6b44:	f843 4b04 	str.w	r4, [r3], #4
    6b48:	4284      	cmp	r4, r0
    6b4a:	bf2c      	ite	cs
    6b4c:	4614      	movcs	r4, r2
    6b4e:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    6b50:	3601      	adds	r6, #1
    6b52:	42ae      	cmp	r6, r5
    6b54:	d3ee      	bcc.n	6b34 <mbedtls_mpi_add_abs+0x52>
    6b56:	e008      	b.n	6b6a <mbedtls_mpi_add_abs+0x88>
        *p += c; c = ( *p < c ); i++; p++;
    6b58:	681a      	ldr	r2, [r3, #0]
    6b5a:	4422      	add	r2, r4
    6b5c:	f843 2b04 	str.w	r2, [r3], #4
    6b60:	42a2      	cmp	r2, r4
    6b62:	bf2c      	ite	cs
    6b64:	2400      	movcs	r4, #0
    6b66:	2401      	movcc	r4, #1
    6b68:	3601      	adds	r6, #1
    while( c != 0 )
    6b6a:	b164      	cbz	r4, 6b86 <mbedtls_mpi_add_abs+0xa4>
        if( i >= X->n )
    6b6c:	687a      	ldr	r2, [r7, #4]
    6b6e:	42b2      	cmp	r2, r6
    6b70:	d8f2      	bhi.n	6b58 <mbedtls_mpi_add_abs+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    6b72:	1c71      	adds	r1, r6, #1
    6b74:	4638      	mov	r0, r7
    6b76:	f7ff fcf7 	bl	6568 <mbedtls_mpi_grow>
    6b7a:	4601      	mov	r1, r0
    6b7c:	b918      	cbnz	r0, 6b86 <mbedtls_mpi_add_abs+0xa4>
            p = X->p + i;
    6b7e:	68bb      	ldr	r3, [r7, #8]
    6b80:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    6b84:	e7e8      	b.n	6b58 <mbedtls_mpi_add_abs+0x76>
}
    6b86:	4608      	mov	r0, r1
    6b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b8a <mbedtls_mpi_sub_abs>:
{
    6b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8c:	b085      	sub	sp, #20
    6b8e:	4605      	mov	r5, r0
    6b90:	460e      	mov	r6, r1
    6b92:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6b94:	4611      	mov	r1, r2
    6b96:	4630      	mov	r0, r6
    6b98:	f7ff fe8b 	bl	68b2 <mbedtls_mpi_cmp_abs>
    6b9c:	2800      	cmp	r0, #0
    6b9e:	db2c      	blt.n	6bfa <mbedtls_mpi_sub_abs+0x70>
    mbedtls_mpi_init( &TB );
    6ba0:	a801      	add	r0, sp, #4
    6ba2:	f7ff fcc9 	bl	6538 <mbedtls_mpi_init>
    if( X == B )
    6ba6:	42ac      	cmp	r4, r5
    6ba8:	d014      	beq.n	6bd4 <mbedtls_mpi_sub_abs+0x4a>
    if( X != A )
    6baa:	42ae      	cmp	r6, r5
    6bac:	d005      	beq.n	6bba <mbedtls_mpi_sub_abs+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6bae:	4631      	mov	r1, r6
    6bb0:	4628      	mov	r0, r5
    6bb2:	f7ff fd02 	bl	65ba <mbedtls_mpi_copy>
    6bb6:	4607      	mov	r7, r0
    6bb8:	b9c8      	cbnz	r0, 6bee <mbedtls_mpi_sub_abs+0x64>
    X->s = 1;
    6bba:	2301      	movs	r3, #1
    6bbc:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    6bbe:	6860      	ldr	r0, [r4, #4]
    6bc0:	b180      	cbz	r0, 6be4 <mbedtls_mpi_sub_abs+0x5a>
        if( B->p[n - 1] != 0 )
    6bc2:	68a2      	ldr	r2, [r4, #8]
    6bc4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    6bc8:	3b01      	subs	r3, #1
    6bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bce:	b94b      	cbnz	r3, 6be4 <mbedtls_mpi_sub_abs+0x5a>
    for( n = B->n; n > 0; n-- )
    6bd0:	3801      	subs	r0, #1
    6bd2:	e7f5      	b.n	6bc0 <mbedtls_mpi_sub_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    6bd4:	4621      	mov	r1, r4
    6bd6:	a801      	add	r0, sp, #4
    6bd8:	f7ff fcef 	bl	65ba <mbedtls_mpi_copy>
    6bdc:	4607      	mov	r7, r0
    6bde:	b930      	cbnz	r0, 6bee <mbedtls_mpi_sub_abs+0x64>
        B = &TB;
    6be0:	ac01      	add	r4, sp, #4
    6be2:	e7e2      	b.n	6baa <mbedtls_mpi_sub_abs+0x20>
    mpi_sub_hlp( n, B->p, X->p );
    6be4:	68aa      	ldr	r2, [r5, #8]
    6be6:	68a1      	ldr	r1, [r4, #8]
    6be8:	f7ff fa93 	bl	6112 <mpi_sub_hlp>
    ret = 0;
    6bec:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
    6bee:	a801      	add	r0, sp, #4
    6bf0:	f7ff fca8 	bl	6544 <mbedtls_mpi_free>
}
    6bf4:	4638      	mov	r0, r7
    6bf6:	b005      	add	sp, #20
    6bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    6bfa:	f06f 0709 	mvn.w	r7, #9
    6bfe:	e7f9      	b.n	6bf4 <mbedtls_mpi_sub_abs+0x6a>

00006c00 <mbedtls_mpi_add_mpi>:
{
    6c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c02:	4607      	mov	r7, r0
    6c04:	460c      	mov	r4, r1
    6c06:	4615      	mov	r5, r2
    s = A->s;
    6c08:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s < 0 )
    6c0a:	6813      	ldr	r3, [r2, #0]
    6c0c:	fb06 f303 	mul.w	r3, r6, r3
    6c10:	2b00      	cmp	r3, #0
    6c12:	da18      	bge.n	6c46 <mbedtls_mpi_add_mpi+0x46>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    6c14:	4611      	mov	r1, r2
    6c16:	4620      	mov	r0, r4
    6c18:	f7ff fe4b 	bl	68b2 <mbedtls_mpi_cmp_abs>
    6c1c:	2800      	cmp	r0, #0
    6c1e:	db08      	blt.n	6c32 <mbedtls_mpi_add_mpi+0x32>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6c20:	462a      	mov	r2, r5
    6c22:	4621      	mov	r1, r4
    6c24:	4638      	mov	r0, r7
    6c26:	f7ff ffb0 	bl	6b8a <mbedtls_mpi_sub_abs>
    6c2a:	4603      	mov	r3, r0
    6c2c:	b980      	cbnz	r0, 6c50 <mbedtls_mpi_add_mpi+0x50>
            X->s =  s;
    6c2e:	603e      	str	r6, [r7, #0]
    6c30:	e00e      	b.n	6c50 <mbedtls_mpi_add_mpi+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6c32:	4622      	mov	r2, r4
    6c34:	4629      	mov	r1, r5
    6c36:	4638      	mov	r0, r7
    6c38:	f7ff ffa7 	bl	6b8a <mbedtls_mpi_sub_abs>
    6c3c:	4603      	mov	r3, r0
    6c3e:	b938      	cbnz	r0, 6c50 <mbedtls_mpi_add_mpi+0x50>
            X->s = -s;
    6c40:	4276      	negs	r6, r6
    6c42:	603e      	str	r6, [r7, #0]
    6c44:	e004      	b.n	6c50 <mbedtls_mpi_add_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6c46:	f7ff ff4c 	bl	6ae2 <mbedtls_mpi_add_abs>
    6c4a:	4603      	mov	r3, r0
    6c4c:	b900      	cbnz	r0, 6c50 <mbedtls_mpi_add_mpi+0x50>
        X->s = s;
    6c4e:	603e      	str	r6, [r7, #0]
}
    6c50:	4618      	mov	r0, r3
    6c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006c54 <mbedtls_mpi_sub_mpi>:
{
    6c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c56:	4607      	mov	r7, r0
    6c58:	460c      	mov	r4, r1
    6c5a:	4615      	mov	r5, r2
    s = A->s;
    6c5c:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s > 0 )
    6c5e:	6813      	ldr	r3, [r2, #0]
    6c60:	fb06 f303 	mul.w	r3, r6, r3
    6c64:	2b00      	cmp	r3, #0
    6c66:	dd1a      	ble.n	6c9e <mbedtls_mpi_sub_mpi+0x4a>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    6c68:	4611      	mov	r1, r2
    6c6a:	4620      	mov	r0, r4
    6c6c:	f7ff fe21 	bl	68b2 <mbedtls_mpi_cmp_abs>
    6c70:	2800      	cmp	r0, #0
    6c72:	db09      	blt.n	6c88 <mbedtls_mpi_sub_mpi+0x34>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6c74:	462a      	mov	r2, r5
    6c76:	4621      	mov	r1, r4
    6c78:	4638      	mov	r0, r7
    6c7a:	f7ff ff86 	bl	6b8a <mbedtls_mpi_sub_abs>
    6c7e:	4603      	mov	r3, r0
    6c80:	b900      	cbnz	r0, 6c84 <mbedtls_mpi_sub_mpi+0x30>
            X->s =  s;
    6c82:	603e      	str	r6, [r7, #0]
}
    6c84:	4618      	mov	r0, r3
    6c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6c88:	4622      	mov	r2, r4
    6c8a:	4629      	mov	r1, r5
    6c8c:	4638      	mov	r0, r7
    6c8e:	f7ff ff7c 	bl	6b8a <mbedtls_mpi_sub_abs>
    6c92:	4603      	mov	r3, r0
    6c94:	2800      	cmp	r0, #0
    6c96:	d1f5      	bne.n	6c84 <mbedtls_mpi_sub_mpi+0x30>
            X->s = -s;
    6c98:	4276      	negs	r6, r6
    6c9a:	603e      	str	r6, [r7, #0]
    6c9c:	e7f2      	b.n	6c84 <mbedtls_mpi_sub_mpi+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6c9e:	f7ff ff20 	bl	6ae2 <mbedtls_mpi_add_abs>
    6ca2:	4603      	mov	r3, r0
    6ca4:	2800      	cmp	r0, #0
    6ca6:	d1ed      	bne.n	6c84 <mbedtls_mpi_sub_mpi+0x30>
        X->s = s;
    6ca8:	603e      	str	r6, [r7, #0]
    return( ret );
    6caa:	e7eb      	b.n	6c84 <mbedtls_mpi_sub_mpi+0x30>

00006cac <mbedtls_mpi_mul_mpi>:
{
    6cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6cb0:	b087      	sub	sp, #28
    6cb2:	4680      	mov	r8, r0
    6cb4:	460e      	mov	r6, r1
    6cb6:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    6cb8:	a803      	add	r0, sp, #12
    6cba:	f7ff fc3d 	bl	6538 <mbedtls_mpi_init>
    6cbe:	4668      	mov	r0, sp
    6cc0:	f7ff fc3a 	bl	6538 <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    6cc4:	45b0      	cmp	r8, r6
    6cc6:	d00c      	beq.n	6ce2 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    6cc8:	45b8      	cmp	r8, r7
    6cca:	d012      	beq.n	6cf2 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    6ccc:	6875      	ldr	r5, [r6, #4]
    6cce:	b1c5      	cbz	r5, 6d02 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    6cd0:	68b2      	ldr	r2, [r6, #8]
    6cd2:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    6cd6:	3b01      	subs	r3, #1
    6cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cdc:	b98b      	cbnz	r3, 6d02 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    6cde:	3d01      	subs	r5, #1
    6ce0:	e7f5      	b.n	6cce <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    6ce2:	4631      	mov	r1, r6
    6ce4:	a803      	add	r0, sp, #12
    6ce6:	f7ff fc68 	bl	65ba <mbedtls_mpi_copy>
    6cea:	4681      	mov	r9, r0
    6cec:	b9d0      	cbnz	r0, 6d24 <mbedtls_mpi_mul_mpi+0x78>
    6cee:	ae03      	add	r6, sp, #12
    6cf0:	e7ea      	b.n	6cc8 <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    6cf2:	4639      	mov	r1, r7
    6cf4:	4668      	mov	r0, sp
    6cf6:	f7ff fc60 	bl	65ba <mbedtls_mpi_copy>
    6cfa:	4681      	mov	r9, r0
    6cfc:	b990      	cbnz	r0, 6d24 <mbedtls_mpi_mul_mpi+0x78>
    6cfe:	466f      	mov	r7, sp
    6d00:	e7e4      	b.n	6ccc <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    6d02:	687c      	ldr	r4, [r7, #4]
    6d04:	b144      	cbz	r4, 6d18 <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    6d06:	68ba      	ldr	r2, [r7, #8]
    6d08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    6d0c:	3b01      	subs	r3, #1
    6d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d12:	b90b      	cbnz	r3, 6d18 <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    6d14:	3c01      	subs	r4, #1
    6d16:	e7f5      	b.n	6d04 <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    6d18:	1929      	adds	r1, r5, r4
    6d1a:	4640      	mov	r0, r8
    6d1c:	f7ff fc24 	bl	6568 <mbedtls_mpi_grow>
    6d20:	4681      	mov	r9, r0
    6d22:	b148      	cbz	r0, 6d38 <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    6d24:	4668      	mov	r0, sp
    6d26:	f7ff fc0d 	bl	6544 <mbedtls_mpi_free>
    6d2a:	a803      	add	r0, sp, #12
    6d2c:	f7ff fc0a 	bl	6544 <mbedtls_mpi_free>
}
    6d30:	4648      	mov	r0, r9
    6d32:	b007      	add	sp, #28
    6d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    6d38:	2100      	movs	r1, #0
    6d3a:	4640      	mov	r0, r8
    6d3c:	f7ff fc70 	bl	6620 <mbedtls_mpi_lset>
    6d40:	4681      	mov	r9, r0
    6d42:	b178      	cbz	r0, 6d64 <mbedtls_mpi_mul_mpi+0xb8>
    6d44:	e7ee      	b.n	6d24 <mbedtls_mpi_mul_mpi+0x78>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    6d46:	f8d8 1008 	ldr.w	r1, [r8, #8]
    6d4a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    6d4e:	3a01      	subs	r2, #1
    6d50:	68bb      	ldr	r3, [r7, #8]
    6d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d56:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6d5a:	68b1      	ldr	r1, [r6, #8]
    6d5c:	4628      	mov	r0, r5
    6d5e:	f7ff f9ff 	bl	6160 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    6d62:	3c01      	subs	r4, #1
    6d64:	2c00      	cmp	r4, #0
    6d66:	d1ee      	bne.n	6d46 <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    6d68:	6832      	ldr	r2, [r6, #0]
    6d6a:	683b      	ldr	r3, [r7, #0]
    6d6c:	fb03 f302 	mul.w	r3, r3, r2
    6d70:	f8c8 3000 	str.w	r3, [r8]
    6d74:	e7d6      	b.n	6d24 <mbedtls_mpi_mul_mpi+0x78>

00006d76 <mbedtls_mpi_mul_int>:
{
    6d76:	b500      	push	{lr}
    6d78:	b085      	sub	sp, #20
    _B.s = 1;
    6d7a:	2301      	movs	r3, #1
    6d7c:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    6d7e:	9302      	str	r3, [sp, #8]
    _B.p = p;
    6d80:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    6d84:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    6d86:	aa01      	add	r2, sp, #4
    6d88:	f7ff ff90 	bl	6cac <mbedtls_mpi_mul_mpi>
}
    6d8c:	b005      	add	sp, #20
    6d8e:	f85d fb04 	ldr.w	pc, [sp], #4

00006d92 <mbedtls_mpi_div_mpi>:
{
    6d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d96:	b097      	sub	sp, #92	; 0x5c
    6d98:	4607      	mov	r7, r0
    6d9a:	4688      	mov	r8, r1
    6d9c:	4615      	mov	r5, r2
    6d9e:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    6da0:	2100      	movs	r1, #0
    6da2:	4618      	mov	r0, r3
    6da4:	f7ff fe85 	bl	6ab2 <mbedtls_mpi_cmp_int>
    6da8:	2800      	cmp	r0, #0
    6daa:	f000 81c1 	beq.w	7130 <mbedtls_mpi_div_mpi+0x39e>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    6dae:	a813      	add	r0, sp, #76	; 0x4c
    6db0:	f7ff fbc2 	bl	6538 <mbedtls_mpi_init>
    6db4:	a810      	add	r0, sp, #64	; 0x40
    6db6:	f7ff fbbf 	bl	6538 <mbedtls_mpi_init>
    6dba:	a80d      	add	r0, sp, #52	; 0x34
    6dbc:	f7ff fbbc 	bl	6538 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    6dc0:	a80a      	add	r0, sp, #40	; 0x28
    6dc2:	f7ff fbb9 	bl	6538 <mbedtls_mpi_init>
    6dc6:	a807      	add	r0, sp, #28
    6dc8:	f7ff fbb6 	bl	6538 <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6dcc:	4621      	mov	r1, r4
    6dce:	4628      	mov	r0, r5
    6dd0:	f7ff fd6f 	bl	68b2 <mbedtls_mpi_cmp_abs>
    6dd4:	2800      	cmp	r0, #0
    6dd6:	da11      	bge.n	6dfc <mbedtls_mpi_div_mpi+0x6a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6dd8:	b12f      	cbz	r7, 6de6 <mbedtls_mpi_div_mpi+0x54>
    6dda:	2100      	movs	r1, #0
    6ddc:	4638      	mov	r0, r7
    6dde:	f7ff fc1f 	bl	6620 <mbedtls_mpi_lset>
    6de2:	4606      	mov	r6, r0
    6de4:	b980      	cbnz	r0, 6e08 <mbedtls_mpi_div_mpi+0x76>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    6de6:	f1b8 0f00 	cmp.w	r8, #0
    6dea:	f000 81a4 	beq.w	7136 <mbedtls_mpi_div_mpi+0x3a4>
    6dee:	4629      	mov	r1, r5
    6df0:	4640      	mov	r0, r8
    6df2:	f7ff fbe2 	bl	65ba <mbedtls_mpi_copy>
    6df6:	4606      	mov	r6, r0
    6df8:	b930      	cbnz	r0, 6e08 <mbedtls_mpi_div_mpi+0x76>
    6dfa:	e014      	b.n	6e26 <mbedtls_mpi_div_mpi+0x94>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    6dfc:	4629      	mov	r1, r5
    6dfe:	a813      	add	r0, sp, #76	; 0x4c
    6e00:	f7ff fbdb 	bl	65ba <mbedtls_mpi_copy>
    6e04:	4606      	mov	r6, r0
    6e06:	b190      	cbz	r0, 6e2e <mbedtls_mpi_div_mpi+0x9c>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    6e08:	a813      	add	r0, sp, #76	; 0x4c
    6e0a:	f7ff fb9b 	bl	6544 <mbedtls_mpi_free>
    6e0e:	a810      	add	r0, sp, #64	; 0x40
    6e10:	f7ff fb98 	bl	6544 <mbedtls_mpi_free>
    6e14:	a80d      	add	r0, sp, #52	; 0x34
    6e16:	f7ff fb95 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    6e1a:	a80a      	add	r0, sp, #40	; 0x28
    6e1c:	f7ff fb92 	bl	6544 <mbedtls_mpi_free>
    6e20:	a807      	add	r0, sp, #28
    6e22:	f7ff fb8f 	bl	6544 <mbedtls_mpi_free>
}
    6e26:	4630      	mov	r0, r6
    6e28:	b017      	add	sp, #92	; 0x5c
    6e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    6e2e:	4621      	mov	r1, r4
    6e30:	a810      	add	r0, sp, #64	; 0x40
    6e32:	f7ff fbc2 	bl	65ba <mbedtls_mpi_copy>
    6e36:	4606      	mov	r6, r0
    6e38:	2800      	cmp	r0, #0
    6e3a:	d1e5      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    X.s = Y.s = 1;
    6e3c:	2301      	movs	r3, #1
    6e3e:	9310      	str	r3, [sp, #64]	; 0x40
    6e40:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6e42:	6869      	ldr	r1, [r5, #4]
    6e44:	3102      	adds	r1, #2
    6e46:	a80d      	add	r0, sp, #52	; 0x34
    6e48:	f7ff fb8e 	bl	6568 <mbedtls_mpi_grow>
    6e4c:	4606      	mov	r6, r0
    6e4e:	2800      	cmp	r0, #0
    6e50:	d1da      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    6e52:	2100      	movs	r1, #0
    6e54:	a80d      	add	r0, sp, #52	; 0x34
    6e56:	f7ff fbe3 	bl	6620 <mbedtls_mpi_lset>
    6e5a:	4606      	mov	r6, r0
    6e5c:	2800      	cmp	r0, #0
    6e5e:	d1d3      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    6e60:	2102      	movs	r1, #2
    6e62:	a80a      	add	r0, sp, #40	; 0x28
    6e64:	f7ff fb80 	bl	6568 <mbedtls_mpi_grow>
    6e68:	4606      	mov	r6, r0
    6e6a:	2800      	cmp	r0, #0
    6e6c:	d1cc      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    6e6e:	2103      	movs	r1, #3
    6e70:	a807      	add	r0, sp, #28
    6e72:	f7ff fb79 	bl	6568 <mbedtls_mpi_grow>
    6e76:	4606      	mov	r6, r0
    6e78:	2800      	cmp	r0, #0
    6e7a:	d1c5      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    6e7c:	a810      	add	r0, sp, #64	; 0x40
    6e7e:	f7ff fbfd 	bl	667c <mbedtls_mpi_bitlen>
    6e82:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    6e86:	281e      	cmp	r0, #30
    6e88:	d811      	bhi.n	6eae <mbedtls_mpi_div_mpi+0x11c>
        k = biL - 1 - k;
    6e8a:	f1c0 031f 	rsb	r3, r0, #31
    6e8e:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    6e90:	4619      	mov	r1, r3
    6e92:	a813      	add	r0, sp, #76	; 0x4c
    6e94:	f7ff fc73 	bl	677e <mbedtls_mpi_shift_l>
    6e98:	4606      	mov	r6, r0
    6e9a:	2800      	cmp	r0, #0
    6e9c:	d1b4      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    6e9e:	9900      	ldr	r1, [sp, #0]
    6ea0:	a810      	add	r0, sp, #64	; 0x40
    6ea2:	f7ff fc6c 	bl	677e <mbedtls_mpi_shift_l>
    6ea6:	4606      	mov	r6, r0
    6ea8:	2800      	cmp	r0, #0
    6eaa:	d1ad      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    6eac:	e001      	b.n	6eb2 <mbedtls_mpi_div_mpi+0x120>
    else k = 0;
    6eae:	2300      	movs	r3, #0
    6eb0:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    6eb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6eb4:	f103 3bff 	add.w	fp, r3, #4294967295
    t = Y.n - 1;
    6eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6eba:	9301      	str	r3, [sp, #4]
    6ebc:	3b01      	subs	r3, #1
    6ebe:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    6ec0:	ebab 0903 	sub.w	r9, fp, r3
    6ec4:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    6ec8:	4651      	mov	r1, sl
    6eca:	a810      	add	r0, sp, #64	; 0x40
    6ecc:	f7ff fc57 	bl	677e <mbedtls_mpi_shift_l>
    6ed0:	4606      	mov	r6, r0
    6ed2:	2800      	cmp	r0, #0
    6ed4:	d198      	bne.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    6ed6:	a910      	add	r1, sp, #64	; 0x40
    6ed8:	a813      	add	r0, sp, #76	; 0x4c
    6eda:	f7ff fda2 	bl	6a22 <mbedtls_mpi_cmp_mpi>
    6ede:	2800      	cmp	r0, #0
    6ee0:	db0e      	blt.n	6f00 <mbedtls_mpi_div_mpi+0x16e>
        Z.p[n - t]++;
    6ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6ee4:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    6ee8:	3301      	adds	r3, #1
    6eea:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    6eee:	aa10      	add	r2, sp, #64	; 0x40
    6ef0:	a913      	add	r1, sp, #76	; 0x4c
    6ef2:	4608      	mov	r0, r1
    6ef4:	f7ff feae 	bl	6c54 <mbedtls_mpi_sub_mpi>
    6ef8:	4606      	mov	r6, r0
    6efa:	2800      	cmp	r0, #0
    6efc:	d0eb      	beq.n	6ed6 <mbedtls_mpi_div_mpi+0x144>
cleanup:
    6efe:	e783      	b.n	6e08 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    6f00:	4651      	mov	r1, sl
    6f02:	a810      	add	r0, sp, #64	; 0x40
    6f04:	f7ff fc8d 	bl	6822 <mbedtls_mpi_shift_r>
    6f08:	4606      	mov	r6, r0
    6f0a:	2800      	cmp	r0, #0
    6f0c:	f47f af7c 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
    6f10:	9504      	str	r5, [sp, #16]
    6f12:	9405      	str	r4, [sp, #20]
    6f14:	9c02      	ldr	r4, [sp, #8]
    for( i = n; i > t ; i-- )
    6f16:	45a3      	cmp	fp, r4
    6f18:	f240 80d8 	bls.w	70cc <mbedtls_mpi_div_mpi+0x33a>
        if( X.p[i] >= Y.p[t] )
    6f1c:	9915      	ldr	r1, [sp, #84]	; 0x54
    6f1e:	ea4f 038b 	mov.w	r3, fp, lsl #2
    6f22:	9302      	str	r3, [sp, #8]
    6f24:	f851 002b 	ldr.w	r0, [r1, fp, lsl #2]
    6f28:	00a3      	lsls	r3, r4, #2
    6f2a:	9303      	str	r3, [sp, #12]
    6f2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f2e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    6f32:	4290      	cmp	r0, r2
    6f34:	d318      	bcc.n	6f68 <mbedtls_mpi_div_mpi+0x1d6>
            Z.p[i - t - 1] = ~0;
    6f36:	ebab 0304 	sub.w	r3, fp, r4
    6f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f3e:	3b01      	subs	r3, #1
    6f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6f42:	f04f 31ff 	mov.w	r1, #4294967295
    6f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    6f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6f4c:	ebab 0504 	sub.w	r5, fp, r4
    6f50:	f105 4980 	add.w	r9, r5, #1073741824	; 0x40000000
    6f54:	f109 39ff 	add.w	r9, r9, #4294967295
    6f58:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    6f5c:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    6f60:	3301      	adds	r3, #1
    6f62:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
    6f66:	e02a      	b.n	6fbe <mbedtls_mpi_div_mpi+0x22c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    6f68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    6f6c:	eb0b 0c03 	add.w	ip, fp, r3
    6f70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    6f72:	ebab 0604 	sub.w	r6, fp, r4
    6f76:	441e      	add	r6, r3
    6f78:	2300      	movs	r3, #0
    6f7a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    6f7e:	f7ff fa90 	bl	64a2 <mbedtls_int_div_int>
    6f82:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    6f86:	e7e0      	b.n	6f4a <mbedtls_mpi_div_mpi+0x1b8>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6f88:	2300      	movs	r3, #0
    6f8a:	e02f      	b.n	6fec <mbedtls_mpi_div_mpi+0x25a>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    6f8c:	2300      	movs	r3, #0
    6f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f90:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    6f92:	f1bb 0f00 	cmp.w	fp, #0
    6f96:	d04d      	beq.n	7034 <mbedtls_mpi_div_mpi+0x2a2>
    6f98:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    6f9c:	3b01      	subs	r3, #1
    6f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6fa6:	6053      	str	r3, [r2, #4]
            T2.p[2] = X.p[i];
    6fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6faa:	9a02      	ldr	r2, [sp, #8]
    6fac:	589a      	ldr	r2, [r3, r2]
    6fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6fb0:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    6fb2:	a907      	add	r1, sp, #28
    6fb4:	a80a      	add	r0, sp, #40	; 0x28
    6fb6:	f7ff fd34 	bl	6a22 <mbedtls_mpi_cmp_mpi>
    6fba:	2800      	cmp	r0, #0
    6fbc:	dd3c      	ble.n	7038 <mbedtls_mpi_div_mpi+0x2a6>
            Z.p[i - t - 1]--;
    6fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6fc0:	f852 300a 	ldr.w	r3, [r2, sl]
    6fc4:	3b01      	subs	r3, #1
    6fc6:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    6fca:	2100      	movs	r1, #0
    6fcc:	a80a      	add	r0, sp, #40	; 0x28
    6fce:	f7ff fb27 	bl	6620 <mbedtls_mpi_lset>
    6fd2:	4606      	mov	r6, r0
    6fd4:	2800      	cmp	r0, #0
    6fd6:	f47f af17 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6fda:	2c00      	cmp	r4, #0
    6fdc:	d0d4      	beq.n	6f88 <mbedtls_mpi_div_mpi+0x1f6>
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6fe4:	3b02      	subs	r3, #2
    6fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6fee:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
    6ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ff2:	9a03      	ldr	r2, [sp, #12]
    6ff4:	589a      	ldr	r2, [r3, r2]
    6ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ff8:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    6ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ffc:	f853 200a 	ldr.w	r2, [r3, sl]
    7000:	a90a      	add	r1, sp, #40	; 0x28
    7002:	4608      	mov	r0, r1
    7004:	f7ff feb7 	bl	6d76 <mbedtls_mpi_mul_int>
    7008:	4606      	mov	r6, r0
    700a:	2800      	cmp	r0, #0
    700c:	f47f aefc 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    7010:	2100      	movs	r1, #0
    7012:	a807      	add	r0, sp, #28
    7014:	f7ff fb04 	bl	6620 <mbedtls_mpi_lset>
    7018:	4606      	mov	r6, r0
    701a:	2800      	cmp	r0, #0
    701c:	f47f aef4 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7020:	f1bb 0f01 	cmp.w	fp, #1
    7024:	d9b2      	bls.n	6f8c <mbedtls_mpi_div_mpi+0x1fa>
    7026:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    702a:	3b02      	subs	r3, #2
    702c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    702e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7032:	e7ac      	b.n	6f8e <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7034:	2300      	movs	r3, #0
    7036:	e7b5      	b.n	6fa4 <mbedtls_mpi_div_mpi+0x212>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    703a:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    703e:	a910      	add	r1, sp, #64	; 0x40
    7040:	a80a      	add	r0, sp, #40	; 0x28
    7042:	f7ff fe98 	bl	6d76 <mbedtls_mpi_mul_int>
    7046:	4606      	mov	r6, r0
    7048:	2800      	cmp	r0, #0
    704a:	f47f aedd 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    704e:	f105 6a00 	add.w	sl, r5, #134217728	; 0x8000000
    7052:	f10a 3aff 	add.w	sl, sl, #4294967295
    7056:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    705a:	4651      	mov	r1, sl
    705c:	a80a      	add	r0, sp, #40	; 0x28
    705e:	f7ff fb8e 	bl	677e <mbedtls_mpi_shift_l>
    7062:	4606      	mov	r6, r0
    7064:	2800      	cmp	r0, #0
    7066:	f47f aecf 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    706a:	aa0a      	add	r2, sp, #40	; 0x28
    706c:	a913      	add	r1, sp, #76	; 0x4c
    706e:	4608      	mov	r0, r1
    7070:	f7ff fdf0 	bl	6c54 <mbedtls_mpi_sub_mpi>
    7074:	4606      	mov	r6, r0
    7076:	2800      	cmp	r0, #0
    7078:	f47f aec6 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    707c:	2100      	movs	r1, #0
    707e:	a813      	add	r0, sp, #76	; 0x4c
    7080:	f7ff fd17 	bl	6ab2 <mbedtls_mpi_cmp_int>
    7084:	2800      	cmp	r0, #0
    7086:	da1e      	bge.n	70c6 <mbedtls_mpi_div_mpi+0x334>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7088:	a910      	add	r1, sp, #64	; 0x40
    708a:	a80a      	add	r0, sp, #40	; 0x28
    708c:	f7ff fa95 	bl	65ba <mbedtls_mpi_copy>
    7090:	4606      	mov	r6, r0
    7092:	2800      	cmp	r0, #0
    7094:	f47f aeb8 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7098:	4651      	mov	r1, sl
    709a:	a80a      	add	r0, sp, #40	; 0x28
    709c:	f7ff fb6f 	bl	677e <mbedtls_mpi_shift_l>
    70a0:	4606      	mov	r6, r0
    70a2:	2800      	cmp	r0, #0
    70a4:	f47f aeb0 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    70a8:	aa0a      	add	r2, sp, #40	; 0x28
    70aa:	a913      	add	r1, sp, #76	; 0x4c
    70ac:	4608      	mov	r0, r1
    70ae:	f7ff fda7 	bl	6c00 <mbedtls_mpi_add_mpi>
    70b2:	4606      	mov	r6, r0
    70b4:	2800      	cmp	r0, #0
    70b6:	f47f aea7 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            Z.p[i - t - 1]--;
    70ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    70bc:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    70c0:	3b01      	subs	r3, #1
    70c2:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
    for( i = n; i > t ; i-- )
    70c6:	f10b 3bff 	add.w	fp, fp, #4294967295
    70ca:	e724      	b.n	6f16 <mbedtls_mpi_div_mpi+0x184>
    70cc:	9d04      	ldr	r5, [sp, #16]
    70ce:	9c05      	ldr	r4, [sp, #20]
    if( Q != NULL )
    70d0:	b167      	cbz	r7, 70ec <mbedtls_mpi_div_mpi+0x35a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    70d2:	a90d      	add	r1, sp, #52	; 0x34
    70d4:	4638      	mov	r0, r7
    70d6:	f7ff fa70 	bl	65ba <mbedtls_mpi_copy>
    70da:	4606      	mov	r6, r0
    70dc:	2800      	cmp	r0, #0
    70de:	f47f ae93 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        Q->s = A->s * B->s;
    70e2:	682a      	ldr	r2, [r5, #0]
    70e4:	6823      	ldr	r3, [r4, #0]
    70e6:	fb03 f302 	mul.w	r3, r3, r2
    70ea:	603b      	str	r3, [r7, #0]
    if( R != NULL )
    70ec:	f1b8 0f00 	cmp.w	r8, #0
    70f0:	f43f ae8a 	beq.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    70f4:	9900      	ldr	r1, [sp, #0]
    70f6:	a813      	add	r0, sp, #76	; 0x4c
    70f8:	f7ff fb93 	bl	6822 <mbedtls_mpi_shift_r>
    70fc:	4606      	mov	r6, r0
    70fe:	2800      	cmp	r0, #0
    7100:	f47f ae82 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        X.s = A->s;
    7104:	682b      	ldr	r3, [r5, #0]
    7106:	a916      	add	r1, sp, #88	; 0x58
    7108:	f841 3d0c 	str.w	r3, [r1, #-12]!
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    710c:	4640      	mov	r0, r8
    710e:	f7ff fa54 	bl	65ba <mbedtls_mpi_copy>
    7112:	4606      	mov	r6, r0
    7114:	2800      	cmp	r0, #0
    7116:	f47f ae77 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    711a:	2100      	movs	r1, #0
    711c:	4640      	mov	r0, r8
    711e:	f7ff fcc8 	bl	6ab2 <mbedtls_mpi_cmp_int>
    7122:	2800      	cmp	r0, #0
    7124:	f47f ae70 	bne.w	6e08 <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
    7128:	2301      	movs	r3, #1
    712a:	f8c8 3000 	str.w	r3, [r8]
    712e:	e66b      	b.n	6e08 <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7130:	f06f 060b 	mvn.w	r6, #11
    7134:	e677      	b.n	6e26 <mbedtls_mpi_div_mpi+0x94>
        return( 0 );
    7136:	2600      	movs	r6, #0
    7138:	e675      	b.n	6e26 <mbedtls_mpi_div_mpi+0x94>

0000713a <mbedtls_mpi_mod_mpi>:
{
    713a:	b570      	push	{r4, r5, r6, lr}
    713c:	4604      	mov	r4, r0
    713e:	460e      	mov	r6, r1
    7140:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7142:	2100      	movs	r1, #0
    7144:	4610      	mov	r0, r2
    7146:	f7ff fcb4 	bl	6ab2 <mbedtls_mpi_cmp_int>
    714a:	2800      	cmp	r0, #0
    714c:	db26      	blt.n	719c <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    714e:	462b      	mov	r3, r5
    7150:	4632      	mov	r2, r6
    7152:	4621      	mov	r1, r4
    7154:	2000      	movs	r0, #0
    7156:	f7ff fe1c 	bl	6d92 <mbedtls_mpi_div_mpi>
    715a:	4606      	mov	r6, r0
    715c:	b968      	cbnz	r0, 717a <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    715e:	2100      	movs	r1, #0
    7160:	4620      	mov	r0, r4
    7162:	f7ff fca6 	bl	6ab2 <mbedtls_mpi_cmp_int>
    7166:	2800      	cmp	r0, #0
    7168:	da09      	bge.n	717e <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    716a:	462a      	mov	r2, r5
    716c:	4621      	mov	r1, r4
    716e:	4620      	mov	r0, r4
    7170:	f7ff fd46 	bl	6c00 <mbedtls_mpi_add_mpi>
    7174:	4606      	mov	r6, r0
    7176:	2800      	cmp	r0, #0
    7178:	d0f1      	beq.n	715e <mbedtls_mpi_mod_mpi+0x24>
}
    717a:	4630      	mov	r0, r6
    717c:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    717e:	4629      	mov	r1, r5
    7180:	4620      	mov	r0, r4
    7182:	f7ff fc4e 	bl	6a22 <mbedtls_mpi_cmp_mpi>
    7186:	2800      	cmp	r0, #0
    7188:	dbf7      	blt.n	717a <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    718a:	462a      	mov	r2, r5
    718c:	4621      	mov	r1, r4
    718e:	4620      	mov	r0, r4
    7190:	f7ff fd60 	bl	6c54 <mbedtls_mpi_sub_mpi>
    7194:	4606      	mov	r6, r0
    7196:	2800      	cmp	r0, #0
    7198:	d0f1      	beq.n	717e <mbedtls_mpi_mod_mpi+0x44>
cleanup:
    719a:	e7ee      	b.n	717a <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    719c:	f06f 0609 	mvn.w	r6, #9
    71a0:	e7eb      	b.n	717a <mbedtls_mpi_mod_mpi+0x40>

000071a2 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    71a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71a6:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    71aa:	4681      	mov	r9, r0
    71ac:	468b      	mov	fp, r1
    71ae:	4616      	mov	r6, r2
    71b0:	461d      	mov	r5, r3
    71b2:	f8dd 7668 	ldr.w	r7, [sp, #1640]	; 0x668
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    71b6:	2100      	movs	r1, #0
    71b8:	4618      	mov	r0, r3
    71ba:	f7ff fc7a 	bl	6ab2 <mbedtls_mpi_cmp_int>
    71be:	2800      	cmp	r0, #0
    71c0:	f340 8234 	ble.w	762c <mbedtls_mpi_exp_mod+0x48a>
    71c4:	68ab      	ldr	r3, [r5, #8]
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	f013 0f01 	tst.w	r3, #1
    71cc:	f000 8231 	beq.w	7632 <mbedtls_mpi_exp_mod+0x490>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    71d0:	2100      	movs	r1, #0
    71d2:	4630      	mov	r0, r6
    71d4:	f7ff fc6d 	bl	6ab2 <mbedtls_mpi_cmp_int>
    71d8:	2800      	cmp	r0, #0
    71da:	f2c0 822d 	blt.w	7638 <mbedtls_mpi_exp_mod+0x496>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    71de:	4629      	mov	r1, r5
    71e0:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    71e4:	f7ff f98b 	bl	64fe <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    71e8:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    71ec:	f7ff f9a4 	bl	6538 <mbedtls_mpi_init>
    71f0:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    71f4:	f7ff f9a0 	bl	6538 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    71f8:	a806      	add	r0, sp, #24
    71fa:	f7ff f99d 	bl	6538 <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    71fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    7202:	2100      	movs	r1, #0
    7204:	a809      	add	r0, sp, #36	; 0x24
    7206:	f7fe fbf1 	bl	59ec <memset>

    i = mbedtls_mpi_bitlen( E );
    720a:	4630      	mov	r0, r6
    720c:	f7ff fa36 	bl	667c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7210:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7214:	d207      	bcs.n	7226 <mbedtls_mpi_exp_mod+0x84>
    7216:	28ef      	cmp	r0, #239	; 0xef
    7218:	d813      	bhi.n	7242 <mbedtls_mpi_exp_mod+0xa0>
    721a:	284f      	cmp	r0, #79	; 0x4f
    721c:	d813      	bhi.n	7246 <mbedtls_mpi_exp_mod+0xa4>
    721e:	2817      	cmp	r0, #23
    7220:	d913      	bls.n	724a <mbedtls_mpi_exp_mod+0xa8>
    7222:	2403      	movs	r4, #3
    7224:	e000      	b.n	7228 <mbedtls_mpi_exp_mod+0x86>
    7226:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7228:	686b      	ldr	r3, [r5, #4]
    722a:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    722e:	4651      	mov	r1, sl
    7230:	4648      	mov	r0, r9
    7232:	f7ff f999 	bl	6568 <mbedtls_mpi_grow>
    7236:	4680      	mov	r8, r0
    7238:	b148      	cbz	r0, 724e <mbedtls_mpi_exp_mod+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    723a:	1e63      	subs	r3, r4, #1
    723c:	2501      	movs	r5, #1
    723e:	409d      	lsls	r5, r3
    7240:	e1d9      	b.n	75f6 <mbedtls_mpi_exp_mod+0x454>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7242:	2405      	movs	r4, #5
    7244:	e7f0      	b.n	7228 <mbedtls_mpi_exp_mod+0x86>
    7246:	2404      	movs	r4, #4
    7248:	e7ee      	b.n	7228 <mbedtls_mpi_exp_mod+0x86>
    724a:	2401      	movs	r4, #1
    724c:	e7ec      	b.n	7228 <mbedtls_mpi_exp_mod+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    724e:	4651      	mov	r1, sl
    7250:	a80c      	add	r0, sp, #48	; 0x30
    7252:	f7ff f989 	bl	6568 <mbedtls_mpi_grow>
    7256:	4680      	mov	r8, r0
    7258:	2800      	cmp	r0, #0
    725a:	d1ee      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    725c:	ea4f 014a 	mov.w	r1, sl, lsl #1
    7260:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    7264:	f7ff f980 	bl	6568 <mbedtls_mpi_grow>
    7268:	4680      	mov	r8, r0
    726a:	2800      	cmp	r0, #0
    726c:	d1e5      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    neg = ( A->s == -1 );
    726e:	f8db a000 	ldr.w	sl, [fp]
    if( neg )
    7272:	f1ba 3fff 	cmp.w	sl, #4294967295
    7276:	d047      	beq.n	7308 <mbedtls_mpi_exp_mod+0x166>
    if( _RR == NULL || _RR->p == NULL )
    7278:	2f00      	cmp	r7, #0
    727a:	d051      	beq.n	7320 <mbedtls_mpi_exp_mod+0x17e>
    727c:	68bb      	ldr	r3, [r7, #8]
    727e:	2b00      	cmp	r3, #0
    7280:	d04e      	beq.n	7320 <mbedtls_mpi_exp_mod+0x17e>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7282:	220c      	movs	r2, #12
    7284:	4639      	mov	r1, r7
    7286:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    728a:	f7fe fb8a 	bl	59a2 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    728e:	4629      	mov	r1, r5
    7290:	4658      	mov	r0, fp
    7292:	f7ff fbc6 	bl	6a22 <mbedtls_mpi_cmp_mpi>
    7296:	2800      	cmp	r0, #0
    7298:	db67      	blt.n	736a <mbedtls_mpi_exp_mod+0x1c8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    729a:	462a      	mov	r2, r5
    729c:	4659      	mov	r1, fp
    729e:	a80c      	add	r0, sp, #48	; 0x30
    72a0:	f7ff ff4b 	bl	713a <mbedtls_mpi_mod_mpi>
    72a4:	4680      	mov	r8, r0
    72a6:	2800      	cmp	r0, #0
    72a8:	d1c7      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
    72aa:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    72ae:	9300      	str	r3, [sp, #0]
    72b0:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    72b4:	462a      	mov	r2, r5
    72b6:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    72ba:	a80c      	add	r0, sp, #48	; 0x30
    72bc:	f7ff fb33 	bl	6926 <mpi_montmul>
    72c0:	4680      	mov	r8, r0
    72c2:	2800      	cmp	r0, #0
    72c4:	d1b9      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    72c6:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    72ca:	4648      	mov	r0, r9
    72cc:	f7ff f975 	bl	65ba <mbedtls_mpi_copy>
    72d0:	4680      	mov	r8, r0
    72d2:	2800      	cmp	r0, #0
    72d4:	d1b1      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    72d6:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    72da:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    72de:	4629      	mov	r1, r5
    72e0:	4648      	mov	r0, r9
    72e2:	f7ff fb8e 	bl	6a02 <mpi_montred>
    72e6:	4680      	mov	r8, r0
    72e8:	2800      	cmp	r0, #0
    72ea:	d1a6      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
    if( wsize > 1 )
    72ec:	2c01      	cmp	r4, #1
    72ee:	d845      	bhi.n	737c <mbedtls_mpi_exp_mod+0x1da>
    nblimbs = E->n;
    72f0:	6873      	ldr	r3, [r6, #4]
    72f2:	9304      	str	r3, [sp, #16]
    state   = 0;
    72f4:	2300      	movs	r3, #0
    72f6:	9305      	str	r3, [sp, #20]
    nbits   = 0;
    72f8:	469b      	mov	fp, r3
    wbits   = 0;
    72fa:	9303      	str	r3, [sp, #12]
    72fc:	46b8      	mov	r8, r7
    72fe:	4637      	mov	r7, r6
    7300:	462e      	mov	r6, r5
    7302:	4625      	mov	r5, r4
    7304:	461c      	mov	r4, r3
    7306:	e0af      	b.n	7468 <mbedtls_mpi_exp_mod+0x2c6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    7308:	4659      	mov	r1, fp
    730a:	a806      	add	r0, sp, #24
    730c:	f7ff f955 	bl	65ba <mbedtls_mpi_copy>
    7310:	4680      	mov	r8, r0
    7312:	2800      	cmp	r0, #0
    7314:	d191      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
        Apos.s = 1;
    7316:	2301      	movs	r3, #1
    7318:	9306      	str	r3, [sp, #24]
        A = &Apos;
    731a:	f10d 0b18 	add.w	fp, sp, #24
    731e:	e7ab      	b.n	7278 <mbedtls_mpi_exp_mod+0xd6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7320:	2101      	movs	r1, #1
    7322:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7326:	f7ff f97b 	bl	6620 <mbedtls_mpi_lset>
    732a:	4680      	mov	r8, r0
    732c:	2800      	cmp	r0, #0
    732e:	d184      	bne.n	723a <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7330:	6869      	ldr	r1, [r5, #4]
    7332:	0189      	lsls	r1, r1, #6
    7334:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7338:	f7ff fa21 	bl	677e <mbedtls_mpi_shift_l>
    733c:	4680      	mov	r8, r0
    733e:	2800      	cmp	r0, #0
    7340:	f47f af7b 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7344:	462a      	mov	r2, r5
    7346:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    734a:	4608      	mov	r0, r1
    734c:	f7ff fef5 	bl	713a <mbedtls_mpi_mod_mpi>
    7350:	4680      	mov	r8, r0
    7352:	2800      	cmp	r0, #0
    7354:	f47f af71 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
        if( _RR != NULL )
    7358:	2f00      	cmp	r7, #0
    735a:	d098      	beq.n	728e <mbedtls_mpi_exp_mod+0xec>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    735c:	220c      	movs	r2, #12
    735e:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    7362:	4638      	mov	r0, r7
    7364:	f7fe fb1d 	bl	59a2 <memcpy>
    7368:	e791      	b.n	728e <mbedtls_mpi_exp_mod+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    736a:	4659      	mov	r1, fp
    736c:	a80c      	add	r0, sp, #48	; 0x30
    736e:	f7ff f924 	bl	65ba <mbedtls_mpi_copy>
    7372:	4680      	mov	r8, r0
    7374:	2800      	cmp	r0, #0
    7376:	f47f af60 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
    737a:	e796      	b.n	72aa <mbedtls_mpi_exp_mod+0x108>
        j =  one << ( wsize - 1 );
    737c:	1e63      	subs	r3, r4, #1
    737e:	9304      	str	r3, [sp, #16]
    7380:	f04f 0b01 	mov.w	fp, #1
    7384:	fa0b f303 	lsl.w	r3, fp, r3
    7388:	461a      	mov	r2, r3
    738a:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    738c:	230c      	movs	r3, #12
    738e:	a909      	add	r1, sp, #36	; 0x24
    7390:	fb03 1302 	mla	r3, r3, r2, r1
    7394:	9303      	str	r3, [sp, #12]
    7396:	6869      	ldr	r1, [r5, #4]
    7398:	4459      	add	r1, fp
    739a:	4618      	mov	r0, r3
    739c:	f7ff f8e4 	bl	6568 <mbedtls_mpi_grow>
    73a0:	4680      	mov	r8, r0
    73a2:	2800      	cmp	r0, #0
    73a4:	f47f af49 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    73a8:	a90c      	add	r1, sp, #48	; 0x30
    73aa:	9803      	ldr	r0, [sp, #12]
    73ac:	f7ff f905 	bl	65ba <mbedtls_mpi_copy>
    73b0:	4680      	mov	r8, r0
    73b2:	2800      	cmp	r0, #0
    73b4:	f47f af41 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
        for( i = 0; i < wsize - 1; i++ )
    73b8:	f04f 0b00 	mov.w	fp, #0
    73bc:	9b04      	ldr	r3, [sp, #16]
    73be:	455b      	cmp	r3, fp
    73c0:	d910      	bls.n	73e4 <mbedtls_mpi_exp_mod+0x242>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
    73c2:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    73c6:	9300      	str	r3, [sp, #0]
    73c8:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    73cc:	462a      	mov	r2, r5
    73ce:	9803      	ldr	r0, [sp, #12]
    73d0:	4601      	mov	r1, r0
    73d2:	f7ff faa8 	bl	6926 <mpi_montmul>
    73d6:	4680      	mov	r8, r0
    73d8:	2800      	cmp	r0, #0
    73da:	f47f af2e 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
        for( i = 0; i < wsize - 1; i++ )
    73de:	f10b 0b01 	add.w	fp, fp, #1
    73e2:	e7eb      	b.n	73bc <mbedtls_mpi_exp_mod+0x21a>
        for( i = j + 1; i < ( one << wsize ); i++ )
    73e4:	9b05      	ldr	r3, [sp, #20]
    73e6:	f103 0b01 	add.w	fp, r3, #1
    73ea:	46b8      	mov	r8, r7
    73ec:	4637      	mov	r7, r6
    73ee:	4626      	mov	r6, r4
    73f0:	2301      	movs	r3, #1
    73f2:	40b3      	lsls	r3, r6
    73f4:	455b      	cmp	r3, fp
    73f6:	d803      	bhi.n	7400 <mbedtls_mpi_exp_mod+0x25e>
    73f8:	4634      	mov	r4, r6
    73fa:	463e      	mov	r6, r7
    73fc:	4647      	mov	r7, r8
    73fe:	e777      	b.n	72f0 <mbedtls_mpi_exp_mod+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    7400:	240c      	movs	r4, #12
    7402:	ab09      	add	r3, sp, #36	; 0x24
    7404:	fb04 340b 	mla	r4, r4, fp, r3
    7408:	6869      	ldr	r1, [r5, #4]
    740a:	3101      	adds	r1, #1
    740c:	4620      	mov	r0, r4
    740e:	f7ff f8ab 	bl	6568 <mbedtls_mpi_grow>
    7412:	2800      	cmp	r0, #0
    7414:	f040 80cf 	bne.w	75b6 <mbedtls_mpi_exp_mod+0x414>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7418:	f10b 33ff 	add.w	r3, fp, #4294967295
    741c:	210c      	movs	r1, #12
    741e:	aa09      	add	r2, sp, #36	; 0x24
    7420:	fb01 2103 	mla	r1, r1, r3, r2
    7424:	4620      	mov	r0, r4
    7426:	f7ff f8c8 	bl	65ba <mbedtls_mpi_copy>
    742a:	2800      	cmp	r0, #0
    742c:	f040 80c7 	bne.w	75be <mbedtls_mpi_exp_mod+0x41c>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
    7430:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7434:	9300      	str	r3, [sp, #0]
    7436:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    743a:	462a      	mov	r2, r5
    743c:	a90c      	add	r1, sp, #48	; 0x30
    743e:	4620      	mov	r0, r4
    7440:	f7ff fa71 	bl	6926 <mpi_montmul>
    7444:	2800      	cmp	r0, #0
    7446:	f040 80be 	bne.w	75c6 <mbedtls_mpi_exp_mod+0x424>
        for( i = j + 1; i < ( one << wsize ); i++ )
    744a:	f10b 0b01 	add.w	fp, fp, #1
    744e:	e7cf      	b.n	73f0 <mbedtls_mpi_exp_mod+0x24e>
        nbits++;
    7450:	f10b 0b01 	add.w	fp, fp, #1
        wbits |= ( ei << ( wsize - nbits ) );
    7454:	eba5 020b 	sub.w	r2, r5, fp
    7458:	4093      	lsls	r3, r2
    745a:	9a03      	ldr	r2, [sp, #12]
    745c:	431a      	orrs	r2, r3
    745e:	9203      	str	r2, [sp, #12]
        if( nbits == wsize )
    7460:	455d      	cmp	r5, fp
    7462:	d02a      	beq.n	74ba <mbedtls_mpi_exp_mod+0x318>
        state = 2;
    7464:	2302      	movs	r3, #2
    7466:	9305      	str	r3, [sp, #20]
        if( bufsize == 0 )
    7468:	b934      	cbnz	r4, 7478 <mbedtls_mpi_exp_mod+0x2d6>
            if( nblimbs == 0 )
    746a:	9b04      	ldr	r3, [sp, #16]
    746c:	2b00      	cmp	r3, #0
    746e:	f000 809d 	beq.w	75ac <mbedtls_mpi_exp_mod+0x40a>
            nblimbs--;
    7472:	3b01      	subs	r3, #1
    7474:	9304      	str	r3, [sp, #16]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7476:	2420      	movs	r4, #32
        bufsize--;
    7478:	3c01      	subs	r4, #1
        ei = (E->p[nblimbs] >> bufsize) & 1;
    747a:	68bb      	ldr	r3, [r7, #8]
    747c:	9a04      	ldr	r2, [sp, #16]
    747e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7482:	40e3      	lsrs	r3, r4
        if( ei == 0 && state == 0 )
    7484:	f013 0301 	ands.w	r3, r3, #1
    7488:	d102      	bne.n	7490 <mbedtls_mpi_exp_mod+0x2ee>
    748a:	9a05      	ldr	r2, [sp, #20]
    748c:	2a00      	cmp	r2, #0
    748e:	d0eb      	beq.n	7468 <mbedtls_mpi_exp_mod+0x2c6>
        if( ei == 0 && state == 1 )
    7490:	2b00      	cmp	r3, #0
    7492:	d1dd      	bne.n	7450 <mbedtls_mpi_exp_mod+0x2ae>
    7494:	9a05      	ldr	r2, [sp, #20]
    7496:	2a01      	cmp	r2, #1
    7498:	d1da      	bne.n	7450 <mbedtls_mpi_exp_mod+0x2ae>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    749a:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    749e:	9300      	str	r3, [sp, #0]
    74a0:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    74a4:	4632      	mov	r2, r6
    74a6:	4649      	mov	r1, r9
    74a8:	4648      	mov	r0, r9
    74aa:	f7ff fa3c 	bl	6926 <mpi_montmul>
    74ae:	2800      	cmp	r0, #0
    74b0:	d0da      	beq.n	7468 <mbedtls_mpi_exp_mod+0x2c6>
    74b2:	462c      	mov	r4, r5
    74b4:	4647      	mov	r7, r8
    74b6:	4680      	mov	r8, r0
    74b8:	e6bf      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
            for( i = 0; i < wsize; i++ )
    74ba:	f04f 0b00 	mov.w	fp, #0
    74be:	45ab      	cmp	fp, r5
    74c0:	d20e      	bcs.n	74e0 <mbedtls_mpi_exp_mod+0x33e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    74c2:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    74c6:	9300      	str	r3, [sp, #0]
    74c8:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    74cc:	4632      	mov	r2, r6
    74ce:	4649      	mov	r1, r9
    74d0:	4648      	mov	r0, r9
    74d2:	f7ff fa28 	bl	6926 <mpi_montmul>
    74d6:	2800      	cmp	r0, #0
    74d8:	d179      	bne.n	75ce <mbedtls_mpi_exp_mod+0x42c>
            for( i = 0; i < wsize; i++ )
    74da:	f10b 0b01 	add.w	fp, fp, #1
    74de:	e7ee      	b.n	74be <mbedtls_mpi_exp_mod+0x31c>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
    74e0:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    74e4:	9300      	str	r3, [sp, #0]
    74e6:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    74ea:	4632      	mov	r2, r6
    74ec:	210c      	movs	r1, #12
    74ee:	9803      	ldr	r0, [sp, #12]
    74f0:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    74f4:	fb01 c100 	mla	r1, r1, r0, ip
    74f8:	4648      	mov	r0, r9
    74fa:	f7ff fa14 	bl	6926 <mpi_montmul>
    74fe:	2800      	cmp	r0, #0
    7500:	d169      	bne.n	75d6 <mbedtls_mpi_exp_mod+0x434>
            state--;
    7502:	2301      	movs	r3, #1
    7504:	9305      	str	r3, [sp, #20]
            nbits = 0;
    7506:	f04f 0b00 	mov.w	fp, #0
            wbits = 0;
    750a:	f8cd b00c 	str.w	fp, [sp, #12]
    750e:	e7ab      	b.n	7468 <mbedtls_mpi_exp_mod+0x2c6>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    7510:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7514:	9300      	str	r3, [sp, #0]
    7516:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    751a:	462a      	mov	r2, r5
    751c:	4649      	mov	r1, r9
    751e:	4648      	mov	r0, r9
    7520:	f7ff fa01 	bl	6926 <mpi_montmul>
    7524:	2800      	cmp	r0, #0
    7526:	d15a      	bne.n	75de <mbedtls_mpi_exp_mod+0x43c>
        wbits <<= 1;
    7528:	9b03      	ldr	r3, [sp, #12]
    752a:	005a      	lsls	r2, r3, #1
    752c:	9203      	str	r2, [sp, #12]
        if( ( wbits & ( one << wsize ) ) != 0 )
    752e:	2301      	movs	r3, #1
    7530:	40b3      	lsls	r3, r6
    7532:	4213      	tst	r3, r2
    7534:	d12a      	bne.n	758c <mbedtls_mpi_exp_mod+0x3ea>
    for( i = 0; i < nbits; i++ )
    7536:	3401      	adds	r4, #1
    7538:	455c      	cmp	r4, fp
    753a:	d3e9      	bcc.n	7510 <mbedtls_mpi_exp_mod+0x36e>
    753c:	4634      	mov	r4, r6
    753e:	463e      	mov	r6, r7
    7540:	4647      	mov	r7, r8
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    7542:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7546:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    754a:	4629      	mov	r1, r5
    754c:	4648      	mov	r0, r9
    754e:	f7ff fa58 	bl	6a02 <mpi_montred>
    7552:	4680      	mov	r8, r0
    7554:	2800      	cmp	r0, #0
    7556:	f47f ae70 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    755a:	f1ba 3fff 	cmp.w	sl, #4294967295
    755e:	f47f ae6c 	bne.w	723a <mbedtls_mpi_exp_mod+0x98>
    7562:	6873      	ldr	r3, [r6, #4]
    7564:	2b00      	cmp	r3, #0
    7566:	f43f ae68 	beq.w	723a <mbedtls_mpi_exp_mod+0x98>
    756a:	68b3      	ldr	r3, [r6, #8]
    756c:	681b      	ldr	r3, [r3, #0]
    756e:	f013 0f01 	tst.w	r3, #1
    7572:	f43f ae62 	beq.w	723a <mbedtls_mpi_exp_mod+0x98>
        X->s = -1;
    7576:	f04f 33ff 	mov.w	r3, #4294967295
    757a:	f8c9 3000 	str.w	r3, [r9]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    757e:	464a      	mov	r2, r9
    7580:	4629      	mov	r1, r5
    7582:	4648      	mov	r0, r9
    7584:	f7ff fb3c 	bl	6c00 <mbedtls_mpi_add_mpi>
    7588:	4680      	mov	r8, r0
cleanup:
    758a:	e656      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
    758c:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7590:	9300      	str	r3, [sp, #0]
    7592:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    7596:	462a      	mov	r2, r5
    7598:	a90c      	add	r1, sp, #48	; 0x30
    759a:	4648      	mov	r0, r9
    759c:	f7ff f9c3 	bl	6926 <mpi_montmul>
    75a0:	2800      	cmp	r0, #0
    75a2:	d0c8      	beq.n	7536 <mbedtls_mpi_exp_mod+0x394>
    75a4:	4634      	mov	r4, r6
    75a6:	4647      	mov	r7, r8
    75a8:	4680      	mov	r8, r0
    75aa:	e646      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75ac:	9c04      	ldr	r4, [sp, #16]
    75ae:	4633      	mov	r3, r6
    75b0:	462e      	mov	r6, r5
    75b2:	461d      	mov	r5, r3
    75b4:	e7c0      	b.n	7538 <mbedtls_mpi_exp_mod+0x396>
    75b6:	4634      	mov	r4, r6
    75b8:	4647      	mov	r7, r8
    75ba:	4680      	mov	r8, r0
    75bc:	e63d      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75be:	4634      	mov	r4, r6
    75c0:	4647      	mov	r7, r8
    75c2:	4680      	mov	r8, r0
    75c4:	e639      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75c6:	4634      	mov	r4, r6
    75c8:	4647      	mov	r7, r8
    75ca:	4680      	mov	r8, r0
    75cc:	e635      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75ce:	462c      	mov	r4, r5
    75d0:	4647      	mov	r7, r8
    75d2:	4680      	mov	r8, r0
    75d4:	e631      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75d6:	462c      	mov	r4, r5
    75d8:	4647      	mov	r7, r8
    75da:	4680      	mov	r8, r0
    75dc:	e62d      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
    75de:	4634      	mov	r4, r6
    75e0:	4647      	mov	r7, r8
    75e2:	4680      	mov	r8, r0
    75e4:	e629      	b.n	723a <mbedtls_mpi_exp_mod+0x98>
        mbedtls_mpi_free( &W[i] );
    75e6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    75ea:	0098      	lsls	r0, r3, #2
    75ec:	ab09      	add	r3, sp, #36	; 0x24
    75ee:	4418      	add	r0, r3
    75f0:	f7fe ffa8 	bl	6544 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    75f4:	3501      	adds	r5, #1
    75f6:	2301      	movs	r3, #1
    75f8:	40a3      	lsls	r3, r4
    75fa:	42ab      	cmp	r3, r5
    75fc:	d8f3      	bhi.n	75e6 <mbedtls_mpi_exp_mod+0x444>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    75fe:	a80c      	add	r0, sp, #48	; 0x30
    7600:	f7fe ffa0 	bl	6544 <mbedtls_mpi_free>
    7604:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    7608:	f7fe ff9c 	bl	6544 <mbedtls_mpi_free>
    760c:	a806      	add	r0, sp, #24
    760e:	f7fe ff99 	bl	6544 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    7612:	b137      	cbz	r7, 7622 <mbedtls_mpi_exp_mod+0x480>
    7614:	68bb      	ldr	r3, [r7, #8]
    7616:	b123      	cbz	r3, 7622 <mbedtls_mpi_exp_mod+0x480>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    7618:	4640      	mov	r0, r8
    761a:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
    761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    7622:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7626:	f7fe ff8d 	bl	6544 <mbedtls_mpi_free>
    762a:	e7f5      	b.n	7618 <mbedtls_mpi_exp_mod+0x476>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    762c:	f06f 0803 	mvn.w	r8, #3
    7630:	e7f2      	b.n	7618 <mbedtls_mpi_exp_mod+0x476>
    7632:	f06f 0803 	mvn.w	r8, #3
    7636:	e7ef      	b.n	7618 <mbedtls_mpi_exp_mod+0x476>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    7638:	f06f 0803 	mvn.w	r8, #3
    763c:	e7ec      	b.n	7618 <mbedtls_mpi_exp_mod+0x476>

0000763e <platform_calloc_uninit>:
}
    763e:	2000      	movs	r0, #0
    7640:	4770      	bx	lr

00007642 <platform_free_uninit>:
}
    7642:	4770      	bx	lr

00007644 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    7644:	4770      	bx	lr

00007646 <mbedtls_rsa_import>:
{
    7646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7648:	4604      	mov	r4, r0
    764a:	4615      	mov	r5, r2
    764c:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    764e:	460f      	mov	r7, r1
    7650:	b121      	cbz	r1, 765c <mbedtls_rsa_import+0x16>
    7652:	3008      	adds	r0, #8
    7654:	f7fe ffb1 	bl	65ba <mbedtls_mpi_copy>
    7658:	4603      	mov	r3, r0
    765a:	bb48      	cbnz	r0, 76b0 <mbedtls_rsa_import+0x6a>
    765c:	b135      	cbz	r5, 766c <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    765e:	4629      	mov	r1, r5
    7660:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7664:	f7fe ffa9 	bl	65ba <mbedtls_mpi_copy>
    7668:	4603      	mov	r3, r0
    766a:	bb08      	cbnz	r0, 76b0 <mbedtls_rsa_import+0x6a>
    766c:	b136      	cbz	r6, 767c <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    766e:	4631      	mov	r1, r6
    7670:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7674:	f7fe ffa1 	bl	65ba <mbedtls_mpi_copy>
    7678:	4603      	mov	r3, r0
    767a:	b9c8      	cbnz	r0, 76b0 <mbedtls_rsa_import+0x6a>
    767c:	9b06      	ldr	r3, [sp, #24]
    767e:	b133      	cbz	r3, 768e <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7680:	4619      	mov	r1, r3
    7682:	f104 0020 	add.w	r0, r4, #32
    7686:	f7fe ff98 	bl	65ba <mbedtls_mpi_copy>
    768a:	4603      	mov	r3, r0
    768c:	b980      	cbnz	r0, 76b0 <mbedtls_rsa_import+0x6a>
    768e:	9b07      	ldr	r3, [sp, #28]
    7690:	b133      	cbz	r3, 76a0 <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    7692:	4619      	mov	r1, r3
    7694:	f104 0014 	add.w	r0, r4, #20
    7698:	f7fe ff8f 	bl	65ba <mbedtls_mpi_copy>
    769c:	4603      	mov	r3, r0
    769e:	b938      	cbnz	r0, 76b0 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    76a0:	b14f      	cbz	r7, 76b6 <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    76a2:	f104 0008 	add.w	r0, r4, #8
    76a6:	f7ff f800 	bl	66aa <mbedtls_mpi_size>
    76aa:	6060      	str	r0, [r4, #4]
    return( 0 );
    76ac:	2000      	movs	r0, #0
    76ae:	e001      	b.n	76b4 <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    76b0:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
}
    76b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    76b6:	2000      	movs	r0, #0
    76b8:	e7fc      	b.n	76b4 <mbedtls_rsa_import+0x6e>

000076ba <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    76ba:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    76be:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    76c2:	4770      	bx	lr

000076c4 <mbedtls_rsa_init>:
{
    76c4:	b570      	push	{r4, r5, r6, lr}
    76c6:	4604      	mov	r4, r0
    76c8:	460d      	mov	r5, r1
    76ca:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    76cc:	22ac      	movs	r2, #172	; 0xac
    76ce:	2100      	movs	r1, #0
    76d0:	f7fe f98c 	bl	59ec <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    76d4:	4632      	mov	r2, r6
    76d6:	4629      	mov	r1, r5
    76d8:	4620      	mov	r0, r4
    76da:	f7ff ffee 	bl	76ba <mbedtls_rsa_set_padding>
}
    76de:	bd70      	pop	{r4, r5, r6, pc}

000076e0 <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    76e0:	b3a8      	cbz	r0, 774e <mbedtls_rsa_free+0x6e>
{
    76e2:	b510      	push	{r4, lr}
    76e4:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    76e6:	308c      	adds	r0, #140	; 0x8c
    76e8:	f7fe ff2c 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    76ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
    76f0:	f7fe ff28 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    76f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
    76f8:	f7fe ff24 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    76fc:	f104 0020 	add.w	r0, r4, #32
    7700:	f7fe ff20 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    7704:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7708:	f7fe ff1c 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    770c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7710:	f7fe ff18 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    7714:	f104 0014 	add.w	r0, r4, #20
    7718:	f7fe ff14 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    771c:	f104 0008 	add.w	r0, r4, #8
    7720:	f7fe ff10 	bl	6544 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    7724:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7728:	f7fe ff0c 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    772c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7730:	f7fe ff08 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    7734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7738:	f7fe ff04 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    773c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7740:	f7fe ff00 	bl	6544 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    7744:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7748:	f7fe fefc 	bl	6544 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    774c:	bd10      	pop	{r4, pc}
    774e:	4770      	bx	lr

00007750 <mbedtls_sha256_init>:
{
    7750:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    7752:	226c      	movs	r2, #108	; 0x6c
    7754:	2100      	movs	r1, #0
    7756:	f7fe f949 	bl	59ec <memset>
}
    775a:	bd08      	pop	{r3, pc}

0000775c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    7760:	b3da      	cbz	r2, 77da <mbedtls_sha256_update_ret+0x7e>
    7762:	4606      	mov	r6, r0
    7764:	460d      	mov	r5, r1
    7766:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    7768:	6803      	ldr	r3, [r0, #0]
    776a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    776e:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    7772:	4413      	add	r3, r2
    7774:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    7776:	4293      	cmp	r3, r2
    7778:	d202      	bcs.n	7780 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    777a:	6843      	ldr	r3, [r0, #4]
    777c:	3301      	adds	r3, #1
    777e:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    7780:	b10f      	cbz	r7, 7786 <mbedtls_sha256_update_ret+0x2a>
    7782:	4544      	cmp	r4, r8
    7784:	d20a      	bcs.n	779c <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    7786:	2c3f      	cmp	r4, #63	; 0x3f
    7788:	d91b      	bls.n	77c2 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    778a:	4629      	mov	r1, r5
    778c:	4630      	mov	r0, r6
    778e:	f7fb fed3 	bl	3538 <mbedtls_internal_sha256_process>
    7792:	4603      	mov	r3, r0
    7794:	bb10      	cbnz	r0, 77dc <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    7796:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    7798:	3c40      	subs	r4, #64	; 0x40
    779a:	e7f4      	b.n	7786 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    779c:	f106 0928 	add.w	r9, r6, #40	; 0x28
    77a0:	4642      	mov	r2, r8
    77a2:	4629      	mov	r1, r5
    77a4:	eb09 0007 	add.w	r0, r9, r7
    77a8:	f7fe f8fb 	bl	59a2 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    77ac:	4649      	mov	r1, r9
    77ae:	4630      	mov	r0, r6
    77b0:	f7fb fec2 	bl	3538 <mbedtls_internal_sha256_process>
    77b4:	4603      	mov	r3, r0
    77b6:	b988      	cbnz	r0, 77dc <mbedtls_sha256_update_ret+0x80>
        input += fill;
    77b8:	4445      	add	r5, r8
        ilen  -= fill;
    77ba:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    77be:	2700      	movs	r7, #0
    77c0:	e7e1      	b.n	7786 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    77c2:	b90c      	cbnz	r4, 77c8 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    77c4:	2300      	movs	r3, #0
    77c6:	e009      	b.n	77dc <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    77c8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    77cc:	4622      	mov	r2, r4
    77ce:	4629      	mov	r1, r5
    77d0:	4438      	add	r0, r7
    77d2:	f7fe f8e6 	bl	59a2 <memcpy>
    return( 0 );
    77d6:	2300      	movs	r3, #0
    77d8:	e000      	b.n	77dc <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    77da:	2300      	movs	r3, #0
}
    77dc:	4618      	mov	r0, r3
    77de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000077e2 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    77e2:	b570      	push	{r4, r5, r6, lr}
    77e4:	4604      	mov	r4, r0
    77e6:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    77e8:	6803      	ldr	r3, [r0, #0]
    77ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    77ee:	1c58      	adds	r0, r3, #1
    77f0:	4423      	add	r3, r4
    77f2:	2280      	movs	r2, #128	; 0x80
    77f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    77f8:	2838      	cmp	r0, #56	; 0x38
    77fa:	d87b      	bhi.n	78f4 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    77fc:	f104 0328 	add.w	r3, r4, #40	; 0x28
    7800:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    7804:	2100      	movs	r1, #0
    7806:	4418      	add	r0, r3
    7808:	f7fe f8f0 	bl	59ec <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    780c:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    780e:	6863      	ldr	r3, [r4, #4]
    7810:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    7812:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    7816:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    7818:	0e19      	lsrs	r1, r3, #24
    781a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    781e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    7822:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    7826:	f3c3 2107 	ubfx	r1, r3, #8, #8
    782a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    782e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    7832:	0e13      	lsrs	r3, r2, #24
    7834:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    7838:	f3c2 4307 	ubfx	r3, r2, #16, #8
    783c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    7840:	f3c2 2307 	ubfx	r3, r2, #8, #8
    7844:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7848:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    784c:	f104 0128 	add.w	r1, r4, #40	; 0x28
    7850:	4620      	mov	r0, r4
    7852:	f7fb fe71 	bl	3538 <mbedtls_internal_sha256_process>
    7856:	4603      	mov	r3, r0
    7858:	2800      	cmp	r0, #0
    785a:	d159      	bne.n	7910 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    785c:	7ae2      	ldrb	r2, [r4, #11]
    785e:	702a      	strb	r2, [r5, #0]
    7860:	7aa2      	ldrb	r2, [r4, #10]
    7862:	706a      	strb	r2, [r5, #1]
    7864:	7a62      	ldrb	r2, [r4, #9]
    7866:	70aa      	strb	r2, [r5, #2]
    7868:	7a22      	ldrb	r2, [r4, #8]
    786a:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    786c:	7be2      	ldrb	r2, [r4, #15]
    786e:	712a      	strb	r2, [r5, #4]
    7870:	7ba2      	ldrb	r2, [r4, #14]
    7872:	716a      	strb	r2, [r5, #5]
    7874:	7b62      	ldrb	r2, [r4, #13]
    7876:	71aa      	strb	r2, [r5, #6]
    7878:	7b22      	ldrb	r2, [r4, #12]
    787a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    787c:	7ce2      	ldrb	r2, [r4, #19]
    787e:	722a      	strb	r2, [r5, #8]
    7880:	7ca2      	ldrb	r2, [r4, #18]
    7882:	726a      	strb	r2, [r5, #9]
    7884:	7c62      	ldrb	r2, [r4, #17]
    7886:	72aa      	strb	r2, [r5, #10]
    7888:	7c22      	ldrb	r2, [r4, #16]
    788a:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    788c:	7de2      	ldrb	r2, [r4, #23]
    788e:	732a      	strb	r2, [r5, #12]
    7890:	7da2      	ldrb	r2, [r4, #22]
    7892:	736a      	strb	r2, [r5, #13]
    7894:	7d62      	ldrb	r2, [r4, #21]
    7896:	73aa      	strb	r2, [r5, #14]
    7898:	7d22      	ldrb	r2, [r4, #20]
    789a:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    789c:	7ee2      	ldrb	r2, [r4, #27]
    789e:	742a      	strb	r2, [r5, #16]
    78a0:	7ea2      	ldrb	r2, [r4, #26]
    78a2:	746a      	strb	r2, [r5, #17]
    78a4:	7e62      	ldrb	r2, [r4, #25]
    78a6:	74aa      	strb	r2, [r5, #18]
    78a8:	7e22      	ldrb	r2, [r4, #24]
    78aa:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    78ac:	7fe2      	ldrb	r2, [r4, #31]
    78ae:	752a      	strb	r2, [r5, #20]
    78b0:	7fa2      	ldrb	r2, [r4, #30]
    78b2:	756a      	strb	r2, [r5, #21]
    78b4:	7f62      	ldrb	r2, [r4, #29]
    78b6:	75aa      	strb	r2, [r5, #22]
    78b8:	7f22      	ldrb	r2, [r4, #28]
    78ba:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    78bc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    78c0:	762a      	strb	r2, [r5, #24]
    78c2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    78c6:	766a      	strb	r2, [r5, #25]
    78c8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    78cc:	76aa      	strb	r2, [r5, #26]
    78ce:	f894 2020 	ldrb.w	r2, [r4, #32]
    78d2:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    78d4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    78d6:	b9da      	cbnz	r2, 7910 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    78d8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    78dc:	772b      	strb	r3, [r5, #28]
    78de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    78e2:	776b      	strb	r3, [r5, #29]
    78e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    78e8:	77ab      	strb	r3, [r5, #30]
    78ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    78ee:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    78f0:	4613      	mov	r3, r2
    78f2:	e00d      	b.n	7910 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    78f4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    78f8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    78fc:	2100      	movs	r1, #0
    78fe:	4430      	add	r0, r6
    7900:	f7fe f874 	bl	59ec <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7904:	4631      	mov	r1, r6
    7906:	4620      	mov	r0, r4
    7908:	f7fb fe16 	bl	3538 <mbedtls_internal_sha256_process>
    790c:	4603      	mov	r3, r0
    790e:	b108      	cbz	r0, 7914 <mbedtls_sha256_finish_ret+0x132>
}
    7910:	4618      	mov	r0, r3
    7912:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    7914:	2238      	movs	r2, #56	; 0x38
    7916:	2100      	movs	r1, #0
    7918:	4630      	mov	r0, r6
    791a:	f7fe f867 	bl	59ec <memset>
    791e:	e775      	b.n	780c <mbedtls_sha256_finish_ret+0x2a>

00007920 <flash_page_size_get>:
}
    7920:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    7924:	4770      	bx	lr

00007926 <flash_page_count_get>:
}
    7926:	f44f 7080 	mov.w	r0, #256	; 0x100
    792a:	4770      	bx	lr

0000792c <flash_total_size_get>:
{
    792c:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    792e:	f7ff fff7 	bl	7920 <flash_page_size_get>
    7932:	4604      	mov	r4, r0
    7934:	f7ff fff7 	bl	7926 <flash_page_count_get>
}
    7938:	fb00 f004 	mul.w	r0, r0, r4
    793c:	bd10      	pop	{r4, pc}

0000793e <is_page_aligned_check>:
{
    793e:	b510      	push	{r4, lr}
    7940:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    7942:	f7ff ffed 	bl	7920 <flash_page_size_get>
    7946:	fbb4 f3f0 	udiv	r3, r4, r0
    794a:	fb00 4013 	mls	r0, r0, r3, r4
}
    794e:	fab0 f080 	clz	r0, r0
    7952:	0940      	lsrs	r0, r0, #5
    7954:	bd10      	pop	{r4, pc}

00007956 <partial_word_create>:
{
    7956:	b430      	push	{r4, r5}
    7958:	b082      	sub	sp, #8
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    795a:	f000 0003 	and.w	r0, r0, #3
    value32 = 0xFFFFFFFF;
    795e:	f04f 33ff 	mov.w	r3, #4294967295
    7962:	9301      	str	r3, [sp, #4]
    for (uint32_t i = 0; i < bytes_count; i++)
    7964:	2300      	movs	r3, #0
    7966:	e004      	b.n	7972 <partial_word_create+0x1c>
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    7968:	5ccd      	ldrb	r5, [r1, r3]
    796a:	ac01      	add	r4, sp, #4
    796c:	5425      	strb	r5, [r4, r0]
        byte_shift++;
    796e:	3001      	adds	r0, #1
    for (uint32_t i = 0; i < bytes_count; i++)
    7970:	3301      	adds	r3, #1
    7972:	4293      	cmp	r3, r2
    7974:	d3f8      	bcc.n	7968 <partial_word_create+0x12>
}
    7976:	9801      	ldr	r0, [sp, #4]
    7978:	b002      	add	sp, #8
    797a:	bc30      	pop	{r4, r5}
    797c:	4770      	bx	lr

0000797e <nvmc_words_write>:
{
    797e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7980:	4607      	mov	r7, r0
    7982:	460e      	mov	r6, r1
    7984:	4615      	mov	r5, r2
    for (uint32_t i = 0; i < num_words; i++)
    7986:	2400      	movs	r4, #0
    7988:	e006      	b.n	7998 <nvmc_words_write+0x1a>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    798a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    798e:	eb07 0084 	add.w	r0, r7, r4, lsl #2
    7992:	f7fc facf 	bl	3f34 <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    7996:	3401      	adds	r4, #1
    7998:	42ac      	cmp	r4, r5
    799a:	d3f6      	bcc.n	798a <nvmc_words_write+0xc>
}
    799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000799e <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    799e:	b538      	push	{r3, r4, r5, lr}
    79a0:	4604      	mov	r4, r0
    79a2:	460d      	mov	r5, r1
    NRFX_ASSERT(addr < flash_total_size_get());
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    79a4:	f7fc fab6 	bl	3f14 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    79a8:	4629      	mov	r1, r5
    79aa:	4620      	mov	r0, r4
    79ac:	f7fc fac2 	bl	3f34 <nvmc_word_write>

    nvmc_readonly_mode_set();
    79b0:	f7fc faa8 	bl	3f04 <nvmc_readonly_mode_set>
}
    79b4:	bd38      	pop	{r3, r4, r5, pc}

000079b6 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    79b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79ba:	4604      	mov	r4, r0
    79bc:	460e      	mov	r6, r1
    79be:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());

    nvmc_write_mode_set();
    79c0:	f7fc faa8 	bl	3f14 <nvmc_write_mode_set>

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    79c4:	f014 0003 	ands.w	r0, r4, #3
    79c8:	d012      	beq.n	79f0 <nrfx_nvmc_bytes_write+0x3a>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    79ca:	f1c0 0704 	rsb	r7, r0, #4
        if (leading_bytes > num_bytes)
    79ce:	42bd      	cmp	r5, r7
    79d0:	d200      	bcs.n	79d4 <nrfx_nvmc_bytes_write+0x1e>
        {
            leading_bytes = num_bytes;
    79d2:	462f      	mov	r7, r5
        }

        nvmc_word_write(addr - unaligned_bytes,
    79d4:	eba4 0800 	sub.w	r8, r4, r0
    79d8:	463a      	mov	r2, r7
    79da:	4631      	mov	r1, r6
    79dc:	4620      	mov	r0, r4
    79de:	f7ff ffba 	bl	7956 <partial_word_create>
    79e2:	4601      	mov	r1, r0
    79e4:	4640      	mov	r0, r8
    79e6:	f7fc faa5 	bl	3f34 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    79ea:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    79ec:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    79ee:	443e      	add	r6, r7
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;

        nvmc_words_write(addr, (uint32_t const *)bytes_src, word_count);
    79f0:	08aa      	lsrs	r2, r5, #2
    79f2:	4631      	mov	r1, r6
    79f4:	4620      	mov	r0, r4
    79f6:	f7ff ffc2 	bl	797e <nvmc_words_write>

        addr += word_count * NVMC_BYTES_IN_WORD;
    79fa:	f025 0103 	bic.w	r1, r5, #3
    79fe:	440c      	add	r4, r1
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    7a00:	4431      	add	r1, r6
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    7a02:	f015 0203 	ands.w	r2, r5, #3
    7a06:	d103      	bne.n	7a10 <nrfx_nvmc_bytes_write+0x5a>
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    }

    nvmc_readonly_mode_set();
    7a08:	f7fc fa7c 	bl	3f04 <nvmc_readonly_mode_set>
}
    7a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    7a10:	4620      	mov	r0, r4
    7a12:	f7ff ffa0 	bl	7956 <partial_word_create>
    7a16:	4601      	mov	r1, r0
    7a18:	4620      	mov	r0, r4
    7a1a:	f7fc fa8b 	bl	3f34 <nvmc_word_write>
    7a1e:	e7f3      	b.n	7a08 <nrfx_nvmc_bytes_write+0x52>

00007a20 <nrfx_nvmc_flash_size_get>:

    nvmc_readonly_mode_set();
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    7a20:	b508      	push	{r3, lr}
    return flash_total_size_get();
    7a22:	f7ff ff83 	bl	792c <flash_total_size_get>
}
    7a26:	bd08      	pop	{r3, pc}

00007a28 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    7a28:	b508      	push	{r3, lr}
    return flash_page_size_get();
    7a2a:	f7ff ff79 	bl	7920 <flash_page_size_get>
}
    7a2e:	bd08      	pop	{r3, pc}

00007a30 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    7a30:	b508      	push	{r3, lr}
    return flash_page_count_get();
    7a32:	f7ff ff78 	bl	7926 <flash_page_count_get>
}
    7a36:	bd08      	pop	{r3, pc}

00007a38 <z_arch_system_halt>:
	__asm__ volatile(
    7a38:	f04f 0220 	mov.w	r2, #32
    7a3c:	f3ef 8311 	mrs	r3, BASEPRI
    7a40:	f382 8811 	msr	BASEPRI, r2
    7a44:	f3bf 8f6f 	isb	sy
    7a48:	e7fe      	b.n	7a48 <z_arch_system_halt+0x10>

00007a4a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    7a4a:	b510      	push	{r4, lr}
    7a4c:	4604      	mov	r4, r0
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    7a4e:	f7f9 ff31 	bl	18b4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    7a52:	4620      	mov	r0, r4
    7a54:	f7ff fff0 	bl	7a38 <z_arch_system_halt>

00007a58 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7a58:	b570      	push	{r4, r5, r6, lr}
    7a5a:	4605      	mov	r5, r0
    7a5c:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    7a5e:	f7fc fc41 	bl	42e4 <z_impl_k_current_get>
    7a62:	4604      	mov	r4, r0
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    7a64:	4631      	mov	r1, r6
    7a66:	4628      	mov	r0, r5
    7a68:	f7ff ffef 	bl	7a4a <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    7a6c:	4620      	mov	r0, r4
    7a6e:	f7fa fc57 	bl	2320 <z_impl_k_thread_abort>
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    7a72:	bd70      	pop	{r4, r5, r6, pc}

00007a74 <create_free_list>:
	slab->free_list = NULL;
    7a74:	2200      	movs	r2, #0
    7a76:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
    7a78:	6903      	ldr	r3, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    7a7a:	e005      	b.n	7a88 <create_free_list+0x14>
		*(char **)p = slab->free_list;
    7a7c:	6941      	ldr	r1, [r0, #20]
    7a7e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    7a80:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    7a82:	68c1      	ldr	r1, [r0, #12]
    7a84:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    7a86:	3201      	adds	r2, #1
    7a88:	6881      	ldr	r1, [r0, #8]
    7a8a:	4291      	cmp	r1, r2
    7a8c:	d8f6      	bhi.n	7a7c <create_free_list+0x8>
}
    7a8e:	4770      	bx	lr

00007a90 <pended_on>:
}
    7a90:	6880      	ldr	r0, [r0, #8]
    7a92:	4770      	bx	lr

00007a94 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    7a94:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7a98:	f991 300e 	ldrsb.w	r3, [r1, #14]
    7a9c:	429a      	cmp	r2, r3
    7a9e:	db01      	blt.n	7aa4 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    7aa0:	2000      	movs	r0, #0
}
    7aa2:	4770      	bx	lr
		return true;
    7aa4:	2001      	movs	r0, #1
    7aa6:	4770      	bx	lr

00007aa8 <z_unpend_thread_no_timeout>:
{
    7aa8:	b538      	push	{r3, r4, r5, lr}
    7aaa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    7aac:	2300      	movs	r3, #0
    7aae:	f04f 0220 	mov.w	r2, #32
    7ab2:	f3ef 8511 	mrs	r5, BASEPRI
    7ab6:	f382 8811 	msr	BASEPRI, r2
    7aba:	f3bf 8f6f 	isb	sy
    7abe:	e00e      	b.n	7ade <z_unpend_thread_no_timeout+0x36>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7ac0:	4620      	mov	r0, r4
    7ac2:	f7ff ffe5 	bl	7a90 <pended_on>
    7ac6:	4621      	mov	r1, r4
    7ac8:	f7fc fb60 	bl	418c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7acc:	7b63      	ldrb	r3, [r4, #13]
    7ace:	f023 0302 	bic.w	r3, r3, #2
    7ad2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    7ad4:	f385 8811 	msr	BASEPRI, r5
    7ad8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7adc:	2301      	movs	r3, #1
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d0ee      	beq.n	7ac0 <z_unpend_thread_no_timeout+0x18>
	thread->base.pended_on = NULL;
    7ae2:	2300      	movs	r3, #0
    7ae4:	60a3      	str	r3, [r4, #8]
}
    7ae6:	bd38      	pop	{r3, r4, r5, pc}

00007ae8 <z_priq_dumb_best>:
	return list->head == list;
    7ae8:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7aea:	4298      	cmp	r0, r3
    7aec:	d001      	beq.n	7af2 <z_priq_dumb_best+0xa>
}
    7aee:	4618      	mov	r0, r3
    7af0:	4770      	bx	lr
	struct k_thread *t = NULL;
    7af2:	2300      	movs	r3, #0
	return t;
    7af4:	e7fb      	b.n	7aee <z_priq_dumb_best+0x6>

00007af6 <z_unpend_first_thread>:
{
    7af6:	b570      	push	{r4, r5, r6, lr}
    7af8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7afa:	2300      	movs	r3, #0
	__asm__ volatile(
    7afc:	f04f 0220 	mov.w	r2, #32
    7b00:	f3ef 8511 	mrs	r5, BASEPRI
    7b04:	f382 8811 	msr	BASEPRI, r2
    7b08:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    7b0c:	461c      	mov	r4, r3
    7b0e:	e008      	b.n	7b22 <z_unpend_first_thread+0x2c>
		ret = _priq_wait_best(&wait_q->waitq);
    7b10:	4630      	mov	r0, r6
    7b12:	f7ff ffe9 	bl	7ae8 <z_priq_dumb_best>
    7b16:	4604      	mov	r4, r0
	__asm__ volatile(
    7b18:	f385 8811 	msr	BASEPRI, r5
    7b1c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7b20:	2301      	movs	r3, #1
    7b22:	2b00      	cmp	r3, #0
    7b24:	d0f4      	beq.n	7b10 <z_unpend_first_thread+0x1a>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    7b26:	b1e4      	cbz	r4, 7b62 <z_unpend_first_thread+0x6c>
	LOCKED(&sched_spinlock) {
    7b28:	2300      	movs	r3, #0
	__asm__ volatile(
    7b2a:	f04f 0220 	mov.w	r2, #32
    7b2e:	f3ef 8511 	mrs	r5, BASEPRI
    7b32:	f382 8811 	msr	BASEPRI, r2
    7b36:	f3bf 8f6f 	isb	sy
    7b3a:	e00e      	b.n	7b5a <z_unpend_first_thread+0x64>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7b3c:	4620      	mov	r0, r4
    7b3e:	f7ff ffa7 	bl	7a90 <pended_on>
    7b42:	4621      	mov	r1, r4
    7b44:	f7fc fb22 	bl	418c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7b48:	7b63      	ldrb	r3, [r4, #13]
    7b4a:	f023 0302 	bic.w	r3, r3, #2
    7b4e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    7b50:	f385 8811 	msr	BASEPRI, r5
    7b54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7b58:	2301      	movs	r3, #1
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d0ee      	beq.n	7b3c <z_unpend_first_thread+0x46>
	thread->base.pended_on = NULL;
    7b5e:	2300      	movs	r3, #0
    7b60:	60a3      	str	r3, [r4, #8]
	if (t != NULL) {
    7b62:	b11c      	cbz	r4, 7b6c <z_unpend_first_thread+0x76>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7b64:	f104 0018 	add.w	r0, r4, #24
    7b68:	f000 f86e 	bl	7c48 <z_abort_timeout>
}
    7b6c:	4620      	mov	r0, r4
    7b6e:	bd70      	pop	{r4, r5, r6, pc}

00007b70 <do_sem_give>:
{
    7b70:	b538      	push	{r3, r4, r5, lr}
    7b72:	4605      	mov	r5, r0
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    7b74:	f7ff ffbf 	bl	7af6 <z_unpend_first_thread>
	if (thread != NULL) {
    7b78:	b198      	cbz	r0, 7ba2 <do_sem_give+0x32>
    7b7a:	4604      	mov	r4, r0
	u8_t state = thread->base.thread_state;
    7b7c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    7b7e:	f013 0f1f 	tst.w	r3, #31
    7b82:	d105      	bne.n	7b90 <do_sem_give+0x20>
	return node->next != NULL;
    7b84:	6983      	ldr	r3, [r0, #24]
    7b86:	b10b      	cbz	r3, 7b8c <do_sem_give+0x1c>
    7b88:	2300      	movs	r3, #0
    7b8a:	e002      	b.n	7b92 <do_sem_give+0x22>
    7b8c:	2301      	movs	r3, #1
    7b8e:	e000      	b.n	7b92 <do_sem_give+0x22>
    7b90:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    7b92:	b913      	cbnz	r3, 7b9a <do_sem_give+0x2a>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7b94:	2300      	movs	r3, #0
    7b96:	66a3      	str	r3, [r4, #104]	; 0x68
}
    7b98:	bd38      	pop	{r3, r4, r5, pc}
		z_add_thread_to_ready_q(thread);
    7b9a:	4620      	mov	r0, r4
    7b9c:	f7fc fb30 	bl	4200 <z_add_thread_to_ready_q>
    7ba0:	e7f8      	b.n	7b94 <do_sem_give+0x24>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7ba2:	68ab      	ldr	r3, [r5, #8]
    7ba4:	68ea      	ldr	r2, [r5, #12]
    7ba6:	4293      	cmp	r3, r2
    7ba8:	d003      	beq.n	7bb2 <do_sem_give+0x42>
    7baa:	2201      	movs	r2, #1
    7bac:	4413      	add	r3, r2
    7bae:	60ab      	str	r3, [r5, #8]
}
    7bb0:	e7f2      	b.n	7b98 <do_sem_give+0x28>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7bb2:	2200      	movs	r2, #0
    7bb4:	e7fa      	b.n	7bac <do_sem_give+0x3c>

00007bb6 <z_thread_single_abort>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

void z_thread_single_abort(struct k_thread *thread)
{
    7bb6:	b510      	push	{r4, lr}
    7bb8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    7bba:	6d03      	ldr	r3, [r0, #80]	; 0x50
    7bbc:	b103      	cbz	r3, 7bc0 <z_thread_single_abort+0xa>
		thread->fn_abort();
    7bbe:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
    7bc0:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    7bc2:	f013 0f1f 	tst.w	r3, #31
    7bc6:	d105      	bne.n	7bd4 <z_thread_single_abort+0x1e>
    7bc8:	69a2      	ldr	r2, [r4, #24]
    7bca:	b10a      	cbz	r2, 7bd0 <z_thread_single_abort+0x1a>
    7bcc:	2200      	movs	r2, #0
    7bce:	e002      	b.n	7bd6 <z_thread_single_abort+0x20>
    7bd0:	2201      	movs	r2, #1
    7bd2:	e000      	b.n	7bd6 <z_thread_single_abort+0x20>
    7bd4:	2200      	movs	r2, #0

	if (IS_ENABLED(CONFIG_SMP)) {
		z_sched_abort(thread);
	}

	if (z_is_thread_ready(thread)) {
    7bd6:	b96a      	cbnz	r2, 7bf4 <z_thread_single_abort+0x3e>
		z_remove_thread_from_ready_q(thread);
	} else {
		if (z_is_thread_pending(thread)) {
    7bd8:	f013 0f02 	tst.w	r3, #2
    7bdc:	d10e      	bne.n	7bfc <z_thread_single_abort+0x46>
    7bde:	69a3      	ldr	r3, [r4, #24]
			z_unpend_thread_no_timeout(thread);
		}
		if (z_is_thread_timeout_active(thread)) {
    7be0:	b11b      	cbz	r3, 7bea <z_thread_single_abort+0x34>
    7be2:	f104 0018 	add.w	r0, r4, #24
    7be6:	f000 f82f 	bl	7c48 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    7bea:	7b63      	ldrb	r3, [r4, #13]
    7bec:	f043 0308 	orr.w	r3, r3, #8
    7bf0:	7363      	strb	r3, [r4, #13]
	z_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	z_thread_perms_all_clear(thread);
#endif
}
    7bf2:	bd10      	pop	{r4, pc}
		z_remove_thread_from_ready_q(thread);
    7bf4:	4620      	mov	r0, r4
    7bf6:	f7fc fb49 	bl	428c <z_remove_thread_from_ready_q>
    7bfa:	e7f6      	b.n	7bea <z_thread_single_abort+0x34>
			z_unpend_thread_no_timeout(thread);
    7bfc:	4620      	mov	r0, r4
    7bfe:	f7ff ff53 	bl	7aa8 <z_unpend_thread_no_timeout>
    7c02:	e7ec      	b.n	7bde <z_thread_single_abort+0x28>

00007c04 <remove_timeout>:
{
    7c04:	b510      	push	{r4, lr}
    7c06:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    7c08:	f7fc fb8e 	bl	4328 <next>
    7c0c:	b118      	cbz	r0, 7c16 <remove_timeout+0x12>
		next(t)->dticks += t->dticks;
    7c0e:	68a1      	ldr	r1, [r4, #8]
    7c10:	6883      	ldr	r3, [r0, #8]
    7c12:	440b      	add	r3, r1
    7c14:	6083      	str	r3, [r0, #8]
	node->prev->next = node->next;
    7c16:	6863      	ldr	r3, [r4, #4]
    7c18:	6822      	ldr	r2, [r4, #0]
    7c1a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    7c1c:	6823      	ldr	r3, [r4, #0]
    7c1e:	6862      	ldr	r2, [r4, #4]
    7c20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7c22:	2300      	movs	r3, #0
    7c24:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7c26:	6063      	str	r3, [r4, #4]
}
    7c28:	bd10      	pop	{r4, pc}

00007c2a <next_timeout>:
{
    7c2a:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    7c2c:	f7fc fb72 	bl	4314 <first>
    7c30:	4604      	mov	r4, r0
	s32_t ticks_elapsed = elapsed();
    7c32:	f7fc fb85 	bl	4340 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7c36:	b124      	cbz	r4, 7c42 <next_timeout+0x18>
    7c38:	68a3      	ldr	r3, [r4, #8]
    7c3a:	1a18      	subs	r0, r3, r0
    7c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    7c40:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7c42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    7c46:	e7fb      	b.n	7c40 <next_timeout+0x16>

00007c48 <z_abort_timeout>:
{
    7c48:	b570      	push	{r4, r5, r6, lr}
    7c4a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    7c4c:	2300      	movs	r3, #0
	__asm__ volatile(
    7c4e:	f04f 0220 	mov.w	r2, #32
    7c52:	f3ef 8611 	mrs	r6, BASEPRI
    7c56:	f382 8811 	msr	BASEPRI, r2
    7c5a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    7c5e:	f06f 0015 	mvn.w	r0, #21
    7c62:	e004      	b.n	7c6e <z_abort_timeout+0x26>
	__asm__ volatile(
    7c64:	f386 8811 	msr	BASEPRI, r6
    7c68:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7c6c:	2301      	movs	r3, #1
    7c6e:	461d      	mov	r5, r3
    7c70:	b93b      	cbnz	r3, 7c82 <z_abort_timeout+0x3a>
	return node->next != NULL;
    7c72:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7c74:	2b00      	cmp	r3, #0
    7c76:	d0f5      	beq.n	7c64 <z_abort_timeout+0x1c>
			remove_timeout(to);
    7c78:	4620      	mov	r0, r4
    7c7a:	f7ff ffc3 	bl	7c04 <remove_timeout>
			ret = 0;
    7c7e:	4628      	mov	r0, r5
    7c80:	e7f0      	b.n	7c64 <z_abort_timeout+0x1c>
}
    7c82:	bd70      	pop	{r4, r5, r6, pc}

00007c84 <k_mem_pool_init>:
{
    7c84:	b508      	push	{r3, lr}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7c86:	f100 0214 	add.w	r2, r0, #20
	list->head = (sys_dnode_t *)list;
    7c8a:	6142      	str	r2, [r0, #20]
	list->tail = (sys_dnode_t *)list;
    7c8c:	6182      	str	r2, [r0, #24]
	z_sys_mem_pool_base_init(&p->base);
    7c8e:	f7fd f926 	bl	4ede <z_sys_mem_pool_base_init>
}
    7c92:	bd08      	pop	{r3, pc}

00007c94 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    7c94:	4770      	bx	lr
