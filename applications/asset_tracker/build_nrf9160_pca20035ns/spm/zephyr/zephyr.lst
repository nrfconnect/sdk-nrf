
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c200 <_vector_table>:
    c200:	20000ac8 	.word	0x20000ac8
    c204:	0000d589 	.word	0x0000d589
    c208:	000105c9 	.word	0x000105c9
    c20c:	0000d3a9 	.word	0x0000d3a9
    c210:	0000d3a9 	.word	0x0000d3a9
    c214:	0000d3a9 	.word	0x0000d3a9
    c218:	0000d3a9 	.word	0x0000d3a9
    c21c:	0000d3a9 	.word	0x0000d3a9
    c220:	0000d3a9 	.word	0x0000d3a9
    c224:	0000d3a9 	.word	0x0000d3a9
    c228:	0000d3a9 	.word	0x0000d3a9
    c22c:	0000d371 	.word	0x0000d371
    c230:	0000d3a9 	.word	0x0000d3a9
    c234:	0000d3a9 	.word	0x0000d3a9
    c238:	0000d31d 	.word	0x0000d31d
    c23c:	0001046f 	.word	0x0001046f

0000c240 <_irq_vector_table>:
    c240:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c250:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c260:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c270:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c280:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c290:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2a0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2b0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2c0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2d0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2e0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c2f0:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c300:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c310:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c320:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c330:	0000d3d5 0000d3d5 0000d3d5 0000d3d5     ................
    c340:	0000d3d5                                ....

0000c344 <_vector_end>:
	...

0000c400 <m_firmware_info>:
    c400:	281ee6de 8fcebb4c 00005b01 0000be00     ...(L....[......
    c410:	00000001 0000c200 20001408 0000de69     ........... i...

Disassembly of section _TEXT_SECTION_NAME_2:

0000c420 <__aeabi_ldivmod>:
    c420:	b97b      	cbnz	r3, c442 <__aeabi_ldivmod+0x22>
    c422:	b972      	cbnz	r2, c442 <__aeabi_ldivmod+0x22>
    c424:	2900      	cmp	r1, #0
    c426:	bfbe      	ittt	lt
    c428:	2000      	movlt	r0, #0
    c42a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c42e:	e006      	blt.n	c43e <__aeabi_ldivmod+0x1e>
    c430:	bf08      	it	eq
    c432:	2800      	cmpeq	r0, #0
    c434:	bf1c      	itt	ne
    c436:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c43a:	f04f 30ff 	movne.w	r0, #4294967295
    c43e:	f000 b9af 	b.w	c7a0 <__aeabi_idiv0>
    c442:	f1ad 0c08 	sub.w	ip, sp, #8
    c446:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c44a:	2900      	cmp	r1, #0
    c44c:	db09      	blt.n	c462 <__aeabi_ldivmod+0x42>
    c44e:	2b00      	cmp	r3, #0
    c450:	db1a      	blt.n	c488 <__aeabi_ldivmod+0x68>
    c452:	f000 f835 	bl	c4c0 <__udivmoddi4>
    c456:	f8dd e004 	ldr.w	lr, [sp, #4]
    c45a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c45e:	b004      	add	sp, #16
    c460:	4770      	bx	lr
    c462:	4240      	negs	r0, r0
    c464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c468:	2b00      	cmp	r3, #0
    c46a:	db1b      	blt.n	c4a4 <__aeabi_ldivmod+0x84>
    c46c:	f000 f828 	bl	c4c0 <__udivmoddi4>
    c470:	f8dd e004 	ldr.w	lr, [sp, #4]
    c474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c478:	b004      	add	sp, #16
    c47a:	4240      	negs	r0, r0
    c47c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c480:	4252      	negs	r2, r2
    c482:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c486:	4770      	bx	lr
    c488:	4252      	negs	r2, r2
    c48a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c48e:	f000 f817 	bl	c4c0 <__udivmoddi4>
    c492:	f8dd e004 	ldr.w	lr, [sp, #4]
    c496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c49a:	b004      	add	sp, #16
    c49c:	4240      	negs	r0, r0
    c49e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c4a2:	4770      	bx	lr
    c4a4:	4252      	negs	r2, r2
    c4a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c4aa:	f000 f809 	bl	c4c0 <__udivmoddi4>
    c4ae:	f8dd e004 	ldr.w	lr, [sp, #4]
    c4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c4b6:	b004      	add	sp, #16
    c4b8:	4252      	negs	r2, r2
    c4ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c4be:	4770      	bx	lr

0000c4c0 <__udivmoddi4>:
    c4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4c4:	468c      	mov	ip, r1
    c4c6:	9d08      	ldr	r5, [sp, #32]
    c4c8:	4604      	mov	r4, r0
    c4ca:	468a      	mov	sl, r1
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d14a      	bne.n	c566 <__udivmoddi4+0xa6>
    c4d0:	428a      	cmp	r2, r1
    c4d2:	4617      	mov	r7, r2
    c4d4:	d962      	bls.n	c59c <__udivmoddi4+0xdc>
    c4d6:	fab2 f682 	clz	r6, r2
    c4da:	b14e      	cbz	r6, c4f0 <__udivmoddi4+0x30>
    c4dc:	f1c6 0e20 	rsb	lr, r6, #32
    c4e0:	fa01 f306 	lsl.w	r3, r1, r6
    c4e4:	40b7      	lsls	r7, r6
    c4e6:	40b4      	lsls	r4, r6
    c4e8:	fa20 fe0e 	lsr.w	lr, r0, lr
    c4ec:	ea4e 0a03 	orr.w	sl, lr, r3
    c4f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c4f4:	0c23      	lsrs	r3, r4, #16
    c4f6:	fa1f f987 	uxth.w	r9, r7
    c4fa:	fbba fef8 	udiv	lr, sl, r8
    c4fe:	fb08 aa1e 	mls	sl, r8, lr, sl
    c502:	fb0e f209 	mul.w	r2, lr, r9
    c506:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c50a:	429a      	cmp	r2, r3
    c50c:	d90b      	bls.n	c526 <__udivmoddi4+0x66>
    c50e:	18fb      	adds	r3, r7, r3
    c510:	f10e 31ff 	add.w	r1, lr, #4294967295
    c514:	bf2c      	ite	cs
    c516:	2001      	movcs	r0, #1
    c518:	2000      	movcc	r0, #0
    c51a:	429a      	cmp	r2, r3
    c51c:	d902      	bls.n	c524 <__udivmoddi4+0x64>
    c51e:	2800      	cmp	r0, #0
    c520:	f000 812a 	beq.w	c778 <__udivmoddi4+0x2b8>
    c524:	468e      	mov	lr, r1
    c526:	1a9a      	subs	r2, r3, r2
    c528:	b2a3      	uxth	r3, r4
    c52a:	fbb2 f0f8 	udiv	r0, r2, r8
    c52e:	fb08 2210 	mls	r2, r8, r0, r2
    c532:	fb00 f909 	mul.w	r9, r0, r9
    c536:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c53a:	45a1      	cmp	r9, r4
    c53c:	d907      	bls.n	c54e <__udivmoddi4+0x8e>
    c53e:	193c      	adds	r4, r7, r4
    c540:	f100 33ff 	add.w	r3, r0, #4294967295
    c544:	d202      	bcs.n	c54c <__udivmoddi4+0x8c>
    c546:	45a1      	cmp	r9, r4
    c548:	f200 8110 	bhi.w	c76c <__udivmoddi4+0x2ac>
    c54c:	4618      	mov	r0, r3
    c54e:	eba4 0409 	sub.w	r4, r4, r9
    c552:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c556:	2100      	movs	r1, #0
    c558:	b11d      	cbz	r5, c562 <__udivmoddi4+0xa2>
    c55a:	40f4      	lsrs	r4, r6
    c55c:	2300      	movs	r3, #0
    c55e:	e9c5 4300 	strd	r4, r3, [r5]
    c562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c566:	428b      	cmp	r3, r1
    c568:	d908      	bls.n	c57c <__udivmoddi4+0xbc>
    c56a:	2d00      	cmp	r5, #0
    c56c:	f000 80f2 	beq.w	c754 <__udivmoddi4+0x294>
    c570:	2100      	movs	r1, #0
    c572:	e9c5 0c00 	strd	r0, ip, [r5]
    c576:	4608      	mov	r0, r1
    c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c57c:	fab3 f183 	clz	r1, r3
    c580:	2900      	cmp	r1, #0
    c582:	d14e      	bne.n	c622 <__udivmoddi4+0x162>
    c584:	4563      	cmp	r3, ip
    c586:	f0c0 80e8 	bcc.w	c75a <__udivmoddi4+0x29a>
    c58a:	4282      	cmp	r2, r0
    c58c:	f240 80e5 	bls.w	c75a <__udivmoddi4+0x29a>
    c590:	4608      	mov	r0, r1
    c592:	2d00      	cmp	r5, #0
    c594:	d0e5      	beq.n	c562 <__udivmoddi4+0xa2>
    c596:	e9c5 4a00 	strd	r4, sl, [r5]
    c59a:	e7e2      	b.n	c562 <__udivmoddi4+0xa2>
    c59c:	b902      	cbnz	r2, c5a0 <__udivmoddi4+0xe0>
    c59e:	deff      	udf	#255	; 0xff
    c5a0:	fab2 f682 	clz	r6, r2
    c5a4:	2e00      	cmp	r6, #0
    c5a6:	f040 8099 	bne.w	c6dc <__udivmoddi4+0x21c>
    c5aa:	1a8b      	subs	r3, r1, r2
    c5ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c5b0:	fa1f f882 	uxth.w	r8, r2
    c5b4:	2101      	movs	r1, #1
    c5b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c5ba:	fbb3 f2fe 	udiv	r2, r3, lr
    c5be:	fb0e 3012 	mls	r0, lr, r2, r3
    c5c2:	fb08 f902 	mul.w	r9, r8, r2
    c5c6:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c5ca:	45e1      	cmp	r9, ip
    c5cc:	d908      	bls.n	c5e0 <__udivmoddi4+0x120>
    c5ce:	eb17 0c0c 	adds.w	ip, r7, ip
    c5d2:	f102 33ff 	add.w	r3, r2, #4294967295
    c5d6:	d202      	bcs.n	c5de <__udivmoddi4+0x11e>
    c5d8:	45e1      	cmp	r9, ip
    c5da:	f200 80ca 	bhi.w	c772 <__udivmoddi4+0x2b2>
    c5de:	461a      	mov	r2, r3
    c5e0:	ebac 0c09 	sub.w	ip, ip, r9
    c5e4:	b2a3      	uxth	r3, r4
    c5e6:	fbbc f0fe 	udiv	r0, ip, lr
    c5ea:	fb0e cc10 	mls	ip, lr, r0, ip
    c5ee:	fb08 f800 	mul.w	r8, r8, r0
    c5f2:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c5f6:	45a0      	cmp	r8, r4
    c5f8:	d90e      	bls.n	c618 <__udivmoddi4+0x158>
    c5fa:	193c      	adds	r4, r7, r4
    c5fc:	f100 33ff 	add.w	r3, r0, #4294967295
    c600:	bf2c      	ite	cs
    c602:	f04f 0c01 	movcs.w	ip, #1
    c606:	f04f 0c00 	movcc.w	ip, #0
    c60a:	45a0      	cmp	r8, r4
    c60c:	d903      	bls.n	c616 <__udivmoddi4+0x156>
    c60e:	f1bc 0f00 	cmp.w	ip, #0
    c612:	f000 80a8 	beq.w	c766 <__udivmoddi4+0x2a6>
    c616:	4618      	mov	r0, r3
    c618:	eba4 0408 	sub.w	r4, r4, r8
    c61c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c620:	e79a      	b.n	c558 <__udivmoddi4+0x98>
    c622:	f1c1 0420 	rsb	r4, r1, #32
    c626:	408b      	lsls	r3, r1
    c628:	fa02 fe01 	lsl.w	lr, r2, r1
    c62c:	fa0c f601 	lsl.w	r6, ip, r1
    c630:	40e2      	lsrs	r2, r4
    c632:	fa20 f704 	lsr.w	r7, r0, r4
    c636:	fa2c fc04 	lsr.w	ip, ip, r4
    c63a:	fa00 f801 	lsl.w	r8, r0, r1
    c63e:	4313      	orrs	r3, r2
    c640:	433e      	orrs	r6, r7
    c642:	0c1f      	lsrs	r7, r3, #16
    c644:	0c32      	lsrs	r2, r6, #16
    c646:	fa1f f983 	uxth.w	r9, r3
    c64a:	fbbc f0f7 	udiv	r0, ip, r7
    c64e:	fb07 cc10 	mls	ip, r7, r0, ip
    c652:	fb00 fa09 	mul.w	sl, r0, r9
    c656:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c65a:	45e2      	cmp	sl, ip
    c65c:	d908      	bls.n	c670 <__udivmoddi4+0x1b0>
    c65e:	eb13 0c0c 	adds.w	ip, r3, ip
    c662:	f100 32ff 	add.w	r2, r0, #4294967295
    c666:	d202      	bcs.n	c66e <__udivmoddi4+0x1ae>
    c668:	45e2      	cmp	sl, ip
    c66a:	f200 8089 	bhi.w	c780 <__udivmoddi4+0x2c0>
    c66e:	4610      	mov	r0, r2
    c670:	ebac 0c0a 	sub.w	ip, ip, sl
    c674:	b2b6      	uxth	r6, r6
    c676:	fbbc faf7 	udiv	sl, ip, r7
    c67a:	fb07 cc1a 	mls	ip, r7, sl, ip
    c67e:	fb0a f909 	mul.w	r9, sl, r9
    c682:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c686:	4591      	cmp	r9, r2
    c688:	d906      	bls.n	c698 <__udivmoddi4+0x1d8>
    c68a:	189a      	adds	r2, r3, r2
    c68c:	f10a 36ff 	add.w	r6, sl, #4294967295
    c690:	d201      	bcs.n	c696 <__udivmoddi4+0x1d6>
    c692:	4591      	cmp	r9, r2
    c694:	d87a      	bhi.n	c78c <__udivmoddi4+0x2cc>
    c696:	46b2      	mov	sl, r6
    c698:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c69c:	eba2 0209 	sub.w	r2, r2, r9
    c6a0:	fba0 670e 	umull	r6, r7, r0, lr
    c6a4:	42ba      	cmp	r2, r7
    c6a6:	46b4      	mov	ip, r6
    c6a8:	46b9      	mov	r9, r7
    c6aa:	d302      	bcc.n	c6b2 <__udivmoddi4+0x1f2>
    c6ac:	d107      	bne.n	c6be <__udivmoddi4+0x1fe>
    c6ae:	45b0      	cmp	r8, r6
    c6b0:	d205      	bcs.n	c6be <__udivmoddi4+0x1fe>
    c6b2:	ebb6 0c0e 	subs.w	ip, r6, lr
    c6b6:	eb67 0303 	sbc.w	r3, r7, r3
    c6ba:	3801      	subs	r0, #1
    c6bc:	4699      	mov	r9, r3
    c6be:	2d00      	cmp	r5, #0
    c6c0:	d06b      	beq.n	c79a <__udivmoddi4+0x2da>
    c6c2:	ebb8 030c 	subs.w	r3, r8, ip
    c6c6:	eb62 0209 	sbc.w	r2, r2, r9
    c6ca:	fa02 f404 	lsl.w	r4, r2, r4
    c6ce:	40cb      	lsrs	r3, r1
    c6d0:	40ca      	lsrs	r2, r1
    c6d2:	2100      	movs	r1, #0
    c6d4:	431c      	orrs	r4, r3
    c6d6:	e9c5 4200 	strd	r4, r2, [r5]
    c6da:	e742      	b.n	c562 <__udivmoddi4+0xa2>
    c6dc:	40b7      	lsls	r7, r6
    c6de:	f1c6 0220 	rsb	r2, r6, #32
    c6e2:	fa01 f306 	lsl.w	r3, r1, r6
    c6e6:	40b4      	lsls	r4, r6
    c6e8:	fa21 fc02 	lsr.w	ip, r1, r2
    c6ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c6f0:	fa20 f202 	lsr.w	r2, r0, r2
    c6f4:	fa1f f887 	uxth.w	r8, r7
    c6f8:	fbbc f1fe 	udiv	r1, ip, lr
    c6fc:	431a      	orrs	r2, r3
    c6fe:	fb0e cc11 	mls	ip, lr, r1, ip
    c702:	fb01 f008 	mul.w	r0, r1, r8
    c706:	0c13      	lsrs	r3, r2, #16
    c708:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c70c:	4560      	cmp	r0, ip
    c70e:	d907      	bls.n	c720 <__udivmoddi4+0x260>
    c710:	eb17 0c0c 	adds.w	ip, r7, ip
    c714:	f101 33ff 	add.w	r3, r1, #4294967295
    c718:	d201      	bcs.n	c71e <__udivmoddi4+0x25e>
    c71a:	4560      	cmp	r0, ip
    c71c:	d833      	bhi.n	c786 <__udivmoddi4+0x2c6>
    c71e:	4619      	mov	r1, r3
    c720:	ebac 0c00 	sub.w	ip, ip, r0
    c724:	b292      	uxth	r2, r2
    c726:	fbbc f0fe 	udiv	r0, ip, lr
    c72a:	fb0e cc10 	mls	ip, lr, r0, ip
    c72e:	fb00 f308 	mul.w	r3, r0, r8
    c732:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c736:	4563      	cmp	r3, ip
    c738:	d907      	bls.n	c74a <__udivmoddi4+0x28a>
    c73a:	eb17 0c0c 	adds.w	ip, r7, ip
    c73e:	f100 32ff 	add.w	r2, r0, #4294967295
    c742:	d201      	bcs.n	c748 <__udivmoddi4+0x288>
    c744:	4563      	cmp	r3, ip
    c746:	d825      	bhi.n	c794 <__udivmoddi4+0x2d4>
    c748:	4610      	mov	r0, r2
    c74a:	ebac 0303 	sub.w	r3, ip, r3
    c74e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c752:	e730      	b.n	c5b6 <__udivmoddi4+0xf6>
    c754:	4629      	mov	r1, r5
    c756:	4628      	mov	r0, r5
    c758:	e703      	b.n	c562 <__udivmoddi4+0xa2>
    c75a:	1a84      	subs	r4, r0, r2
    c75c:	eb6c 0303 	sbc.w	r3, ip, r3
    c760:	2001      	movs	r0, #1
    c762:	469a      	mov	sl, r3
    c764:	e715      	b.n	c592 <__udivmoddi4+0xd2>
    c766:	3802      	subs	r0, #2
    c768:	443c      	add	r4, r7
    c76a:	e755      	b.n	c618 <__udivmoddi4+0x158>
    c76c:	3802      	subs	r0, #2
    c76e:	443c      	add	r4, r7
    c770:	e6ed      	b.n	c54e <__udivmoddi4+0x8e>
    c772:	3a02      	subs	r2, #2
    c774:	44bc      	add	ip, r7
    c776:	e733      	b.n	c5e0 <__udivmoddi4+0x120>
    c778:	f1ae 0e02 	sub.w	lr, lr, #2
    c77c:	443b      	add	r3, r7
    c77e:	e6d2      	b.n	c526 <__udivmoddi4+0x66>
    c780:	3802      	subs	r0, #2
    c782:	449c      	add	ip, r3
    c784:	e774      	b.n	c670 <__udivmoddi4+0x1b0>
    c786:	3902      	subs	r1, #2
    c788:	44bc      	add	ip, r7
    c78a:	e7c9      	b.n	c720 <__udivmoddi4+0x260>
    c78c:	f1aa 0a02 	sub.w	sl, sl, #2
    c790:	441a      	add	r2, r3
    c792:	e781      	b.n	c698 <__udivmoddi4+0x1d8>
    c794:	3802      	subs	r0, #2
    c796:	44bc      	add	ip, r7
    c798:	e7d7      	b.n	c74a <__udivmoddi4+0x28a>
    c79a:	4629      	mov	r1, r5
    c79c:	e6e1      	b.n	c562 <__udivmoddi4+0xa2>
    c79e:	bf00      	nop

0000c7a0 <__aeabi_idiv0>:
    c7a0:	4770      	bx	lr
    c7a2:	bf00      	nop

0000c7a4 <__gnu_cmse_nonsecure_call>:
    c7a4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
    c7a8:	4627      	mov	r7, r4
    c7aa:	46a0      	mov	r8, r4
    c7ac:	46a1      	mov	r9, r4
    c7ae:	46a2      	mov	sl, r4
    c7b0:	46a3      	mov	fp, r4
    c7b2:	46a4      	mov	ip, r4
    c7b4:	ed2d 8b10 	vpush	{d8-d15}
    c7b8:	f04f 0500 	mov.w	r5, #0
    c7bc:	ec45 5b18 	vmov	d8, r5, r5
    c7c0:	ec45 5a19 	vmov	s18, s19, r5, r5
    c7c4:	ec45 5a1a 	vmov	s20, s21, r5, r5
    c7c8:	ec45 5a1b 	vmov	s22, s23, r5, r5
    c7cc:	ec45 5a1c 	vmov	s24, s25, r5, r5
    c7d0:	ec45 5a1d 	vmov	s26, s27, r5, r5
    c7d4:	ec45 5a1e 	vmov	s28, s29, r5, r5
    c7d8:	ec45 5a1f 	vmov	s30, s31, r5, r5
    c7dc:	eef1 5a10 	vmrs	r5, fpscr
    c7e0:	f64f 7660 	movw	r6, #65376	; 0xff60
    c7e4:	f6c0 76ff 	movt	r6, #4095	; 0xfff
    c7e8:	4035      	ands	r5, r6
    c7ea:	eee1 5a10 	vmsr	fpscr, r5
    c7ee:	f384 8800 	msr	CPSR_f, r4
    c7f2:	4625      	mov	r5, r4
    c7f4:	4626      	mov	r6, r4
    c7f6:	47a4      	blxns	r4
    c7f8:	ecbd 8b10 	vpop	{d8-d15}
    c7fc:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0000c800 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    c800:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    c802:	4b0c      	ldr	r3, [pc, #48]	; (c834 <tz_nonsecure_state_setup+0x34>)
    c804:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    c806:	6803      	ldr	r3, [r0, #0]
    c808:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    c80c:	6843      	ldr	r3, [r0, #4]
    c80e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    c812:	7b02      	ldrb	r2, [r0, #12]
    c814:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    c818:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    c81c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    c820:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    c822:	bf48      	it	mi
    c824:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    c828:	b109      	cbz	r1, c82e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    c82a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    c82e:	f383 8894 	msr	CONTROL_NS, r3
}
    c832:	4770      	bx	lr
    c834:	e002ed00 	.word	0xe002ed00

0000c838 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c838:	4a08      	ldr	r2, [pc, #32]	; (c85c <tz_nbanked_exception_target_state_set+0x24>)
    c83a:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    c83c:	b148      	cbz	r0, c852 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    c83e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c842:	041b      	lsls	r3, r3, #16
    c844:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    c846:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    c84a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    c84e:	60d3      	str	r3, [r2, #12]
}
    c850:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c852:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    c854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c858:	e7f5      	b.n	c846 <tz_nbanked_exception_target_state_set+0xe>
    c85a:	bf00      	nop
    c85c:	e000ed00 	.word	0xe000ed00

0000c860 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c860:	4a08      	ldr	r2, [pc, #32]	; (c884 <tz_nonsecure_exception_prio_config+0x24>)
    c862:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    c864:	b140      	cbz	r0, c878 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c866:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    c868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    c86c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    c870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    c874:	60d3      	str	r3, [r2, #12]
}
    c876:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    c878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    c87c:	041b      	lsls	r3, r3, #16
    c87e:	0c1b      	lsrs	r3, r3, #16
    c880:	e7f4      	b.n	c86c <tz_nonsecure_exception_prio_config+0xc>
    c882:	bf00      	nop
    c884:	e000ed00 	.word	0xe000ed00

0000c888 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c888:	4a08      	ldr	r2, [pc, #32]	; (c8ac <tz_nonsecure_system_reset_req_block+0x24>)
    c88a:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    c88c:	b140      	cbz	r0, c8a0 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    c88e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    c890:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    c894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    c898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    c89c:	60d3      	str	r3, [r2, #12]
}
    c89e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    c8a0:	f023 0308 	bic.w	r3, r3, #8
    c8a4:	041b      	lsls	r3, r3, #16
    c8a6:	0c1b      	lsrs	r3, r3, #16
    c8a8:	e7f4      	b.n	c894 <tz_nonsecure_system_reset_req_block+0xc>
    c8aa:	bf00      	nop
    c8ac:	e000ed00 	.word	0xe000ed00

0000c8b0 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    c8b0:	4a03      	ldr	r2, [pc, #12]	; (c8c0 <tz_nonsecure_fpu_access_enable+0x10>)
    c8b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    c8b6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    c8ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    c8be:	4770      	bx	lr
    c8c0:	e000ed00 	.word	0xe000ed00

0000c8c4 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
    c8c4:	4b08      	ldr	r3, [pc, #32]	; (c8e8 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    c8c6:	681a      	ldr	r2, [r3, #0]
	if (enable) {
    c8c8:	b118      	cbz	r0, c8d2 <tz_sau_configure+0xe>
    c8ca:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    c8ce:	601a      	str	r2, [r3, #0]
		}
	}
}
    c8d0:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    c8d2:	f022 0201 	bic.w	r2, r2, #1
    c8d6:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    c8d8:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    c8da:	b111      	cbz	r1, c8e2 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    c8dc:	f042 0202 	orr.w	r2, r2, #2
    c8e0:	e7f5      	b.n	c8ce <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    c8e2:	f022 0202 	bic.w	r2, r2, #2
    c8e6:	e7f2      	b.n	c8ce <tz_sau_configure+0xa>
    c8e8:	e000edd0 	.word	0xe000edd0

0000c8ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c8ec:	680b      	ldr	r3, [r1, #0]
    c8ee:	3301      	adds	r3, #1
    c8f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c8f2:	4b01      	ldr	r3, [pc, #4]	; (c8f8 <char_out+0xc>)
    c8f4:	681b      	ldr	r3, [r3, #0]
    c8f6:	4718      	bx	r3
    c8f8:	2000140c 	.word	0x2000140c

0000c8fc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c900:	b085      	sub	sp, #20
    c902:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c904:	469b      	mov	fp, r3
    c906:	2c01      	cmp	r4, #1
    c908:	bfb8      	it	lt
    c90a:	2401      	movlt	r4, #1
    c90c:	2b01      	cmp	r3, #1
    c90e:	bf0c      	ite	eq
    c910:	2330      	moveq	r3, #48	; 0x30
    c912:	2320      	movne	r3, #32
    c914:	4616      	mov	r6, r2
    c916:	4682      	mov	sl, r0
    c918:	4688      	mov	r8, r1
    c91a:	2501      	movs	r5, #1
    c91c:	270a      	movs	r7, #10
    c91e:	2200      	movs	r2, #0
    c920:	f8df 906c 	ldr.w	r9, [pc, #108]	; c990 <_printk_dec_ulong+0x94>
    c924:	9302      	str	r3, [sp, #8]
    c926:	fbb6 f3f9 	udiv	r3, r6, r9
    c92a:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    c92c:	b90a      	cbnz	r2, c932 <_printk_dec_ulong+0x36>
    c92e:	45b1      	cmp	r9, r6
    c930:	d81c      	bhi.n	c96c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	4641      	mov	r1, r8
    c936:	f103 0030 	add.w	r0, r3, #48	; 0x30
    c93a:	47d0      	blx	sl
			found_largest_digit = 1;
    c93c:	2201      	movs	r2, #1
			digits++;
    c93e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    c940:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    c942:	3f01      	subs	r7, #1
		remainder %= pos;
    c944:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    c948:	230a      	movs	r3, #10
	while (pos >= 10) {
    c94a:	2f01      	cmp	r7, #1
		pos /= 10;
    c94c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    c950:	d1e9      	bne.n	c926 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    c952:	4641      	mov	r1, r8
    c954:	f106 0030 	add.w	r0, r6, #48	; 0x30
    c958:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    c95a:	f1bb 0f03 	cmp.w	fp, #3
    c95e:	d102      	bne.n	c966 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    c960:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    c962:	2c00      	cmp	r4, #0
    c964:	dc0e      	bgt.n	c984 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    c966:	b005      	add	sp, #20
    c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    c96c:	42bc      	cmp	r4, r7
    c96e:	dbe7      	blt.n	c940 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    c970:	f1bb 0f02 	cmp.w	fp, #2
    c974:	d8e4      	bhi.n	c940 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c976:	4641      	mov	r1, r8
    c978:	9802      	ldr	r0, [sp, #8]
    c97a:	9203      	str	r2, [sp, #12]
			digits++;
    c97c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c97e:	47d0      	blx	sl
			digits++;
    c980:	9a03      	ldr	r2, [sp, #12]
    c982:	e7dd      	b.n	c940 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    c984:	4641      	mov	r1, r8
    c986:	2020      	movs	r0, #32
    c988:	47d0      	blx	sl
    c98a:	3c01      	subs	r4, #1
    c98c:	e7e9      	b.n	c962 <_printk_dec_ulong+0x66>
    c98e:	bf00      	nop
    c990:	3b9aca00 	.word	0x3b9aca00

0000c994 <__printk_hook_install>:
	_char_out = fn;
    c994:	4b01      	ldr	r3, [pc, #4]	; (c99c <__printk_hook_install+0x8>)
    c996:	6018      	str	r0, [r3, #0]
}
    c998:	4770      	bx	lr
    c99a:	bf00      	nop
    c99c:	2000140c 	.word	0x2000140c

0000c9a0 <vprintk>:
	struct out_context ctx = { 0 };
    c9a0:	2300      	movs	r3, #0
{
    c9a2:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    c9a4:	ac02      	add	r4, sp, #8
    c9a6:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    c9aa:	4602      	mov	r2, r0
    c9ac:	460b      	mov	r3, r1
    c9ae:	4803      	ldr	r0, [pc, #12]	; (c9bc <vprintk+0x1c>)
    c9b0:	4621      	mov	r1, r4
    c9b2:	f003 fb15 	bl	ffe0 <z_vprintk>
}
    c9b6:	b002      	add	sp, #8
    c9b8:	bd10      	pop	{r4, pc}
    c9ba:	bf00      	nop
    c9bc:	0000c8ed 	.word	0x0000c8ed

0000c9c0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    c9c0:	f04f 0220 	mov.w	r2, #32
    c9c4:	f3ef 8311 	mrs	r3, BASEPRI
    c9c8:	f382 8811 	msr	BASEPRI, r2
    c9cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c9d0:	2101      	movs	r1, #1
    c9d2:	4a04      	ldr	r2, [pc, #16]	; (c9e4 <nordicsemi_nrf91_init+0x24>)
    c9d4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c9d8:	f383 8811 	msr	BASEPRI, r3
    c9dc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c9e0:	2000      	movs	r0, #0
    c9e2:	4770      	bx	lr
    c9e4:	50039000 	.word	0x50039000

0000c9e8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    c9e8:	280a      	cmp	r0, #10
{
    c9ea:	b538      	push	{r3, r4, r5, lr}
    c9ec:	4604      	mov	r4, r0
    c9ee:	4d07      	ldr	r5, [pc, #28]	; (ca0c <console_out+0x24>)
	if ('\n' == c) {
    c9f0:	d104      	bne.n	c9fc <console_out+0x14>
    c9f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c9f4:	6843      	ldr	r3, [r0, #4]
    c9f6:	210d      	movs	r1, #13
    c9f8:	685b      	ldr	r3, [r3, #4]
    c9fa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    c9fc:	6828      	ldr	r0, [r5, #0]
    c9fe:	6843      	ldr	r3, [r0, #4]
    ca00:	b2e1      	uxtb	r1, r4
    ca02:	685b      	ldr	r3, [r3, #4]
    ca04:	4798      	blx	r3

	return c;
}
    ca06:	4620      	mov	r0, r4
    ca08:	bd38      	pop	{r3, r4, r5, pc}
    ca0a:	bf00      	nop
    ca0c:	20000008 	.word	0x20000008

0000ca10 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    ca10:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    ca12:	4c04      	ldr	r4, [pc, #16]	; (ca24 <uart_console_hook_install+0x14>)
    ca14:	4620      	mov	r0, r4
    ca16:	f001 f871 	bl	dafc <__stdout_hook_install>
	__printk_hook_install(console_out);
    ca1a:	4620      	mov	r0, r4
}
    ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    ca20:	f7ff bfb8 	b.w	c994 <__printk_hook_install>
    ca24:	0000c9e9 	.word	0x0000c9e9

0000ca28 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    ca28:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ca2a:	4804      	ldr	r0, [pc, #16]	; (ca3c <uart_console_init+0x14>)
    ca2c:	f001 fd54 	bl	e4d8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    ca30:	4b03      	ldr	r3, [pc, #12]	; (ca40 <uart_console_init+0x18>)
    ca32:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    ca34:	f7ff ffec 	bl	ca10 <uart_console_hook_install>

	return 0;
}
    ca38:	2000      	movs	r0, #0
    ca3a:	bd08      	pop	{r3, pc}
    ca3c:	000110db 	.word	0x000110db
    ca40:	20000008 	.word	0x20000008

0000ca44 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    ca44:	b508      	push	{r3, lr}
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    ca46:	4b11      	ldr	r3, [pc, #68]	; (ca8c <nrf_power_clock_isr+0x48>)
    ca48:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    ca4a:	b16a      	cbz	r2, ca68 <nrf_power_clock_isr+0x24>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    ca4c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    ca50:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    ca54:	07d1      	lsls	r1, r2, #31
    ca56:	d507      	bpl.n	ca68 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    ca58:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    ca5a:	480d      	ldr	r0, [pc, #52]	; (ca90 <nrf_power_clock_isr+0x4c>)
    ca5c:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    ca5e:	6883      	ldr	r3, [r0, #8]
    ca60:	7a5b      	ldrb	r3, [r3, #9]
    ca62:	b90b      	cbnz	r3, ca68 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
    ca64:	f003 fce6 	bl	10434 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    ca68:	4b0a      	ldr	r3, [pc, #40]	; (ca94 <nrf_power_clock_isr+0x50>)
    ca6a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    ca6c:	b162      	cbz	r2, ca88 <nrf_power_clock_isr+0x44>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    ca6e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    ca72:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    ca76:	0792      	lsls	r2, r2, #30
    ca78:	d506      	bpl.n	ca88 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    ca7a:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    ca7c:	4806      	ldr	r0, [pc, #24]	; (ca98 <nrf_power_clock_isr+0x54>)
    ca7e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    ca80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    ca84:	f003 bcd6 	b.w	10434 <clkstarted_handle>
}
    ca88:	bd08      	pop	{r3, pc}
    ca8a:	bf00      	nop
    ca8c:	50005100 	.word	0x50005100
    ca90:	200014e4 	.word	0x200014e4
    ca94:	50005104 	.word	0x50005104
    ca98:	200014f0 	.word	0x200014f0

0000ca9c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    ca9c:	2200      	movs	r2, #0
    ca9e:	4b0d      	ldr	r3, [pc, #52]	; (cad4 <rtc1_nrf_isr+0x38>)
    caa0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    caa4:	f04f 0220 	mov.w	r2, #32
    caa8:	f3ef 8111 	mrs	r1, BASEPRI
    caac:	f382 8811 	msr	BASEPRI, r2
    cab0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    cab4:	4a08      	ldr	r2, [pc, #32]	; (cad8 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    cab6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    caba:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    cabc:	1ac0      	subs	r0, r0, r3
    cabe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    cac2:	4403      	add	r3, r0
    cac4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    cac6:	f381 8811 	msr	BASEPRI, r1
    caca:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    cace:	f002 bacf 	b.w	f070 <z_clock_announce>
    cad2:	bf00      	nop
    cad4:	50015000 	.word	0x50015000
    cad8:	20000024 	.word	0x20000024

0000cadc <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    cadc:	b570      	push	{r4, r5, r6, lr}
    cade:	4818      	ldr	r0, [pc, #96]	; (cb40 <z_clock_driver_init+0x64>)
    cae0:	f001 fcfa 	bl	e4d8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    cae4:	b348      	cbz	r0, cb3a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    cae6:	6843      	ldr	r3, [r0, #4]
    cae8:	2100      	movs	r1, #0
    caea:	681b      	ldr	r3, [r3, #0]
    caec:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    caee:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    caf0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    caf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    caf6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    cafa:	4d12      	ldr	r5, [pc, #72]	; (cb44 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    cafc:	4631      	mov	r1, r6
    cafe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    cb02:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    cb06:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cb0a:	4b0f      	ldr	r3, [pc, #60]	; (cb48 <z_clock_driver_init+0x6c>)
    cb0c:	2015      	movs	r0, #21
    cb0e:	601c      	str	r4, [r3, #0]
    cb10:	4b0e      	ldr	r3, [pc, #56]	; (cb4c <z_clock_driver_init+0x70>)
    cb12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    cb16:	4622      	mov	r2, r4
    cb18:	f000 fca6 	bl	d468 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    cb1c:	2015      	movs	r0, #21
    cb1e:	f000 fc93 	bl	d448 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    cb22:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    cb24:	4b0a      	ldr	r3, [pc, #40]	; (cb50 <z_clock_driver_init+0x74>)
    cb26:	601e      	str	r6, [r3, #0]
    cb28:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    cb2a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    cb2e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cb30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    cb34:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    cb38:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    cb3a:	f04f 30ff 	mov.w	r0, #4294967295
    cb3e:	e7fb      	b.n	cb38 <z_clock_driver_init+0x5c>
    cb40:	000110e2 	.word	0x000110e2
    cb44:	50015000 	.word	0x50015000
    cb48:	50015140 	.word	0x50015140
    cb4c:	e000e100 	.word	0xe000e100
    cb50:	50015008 	.word	0x50015008

0000cb54 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    cb54:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    cb56:	4e21      	ldr	r6, [pc, #132]	; (cbdc <z_clock_set_timeout+0x88>)
    cb58:	f1b0 3fff 	cmp.w	r0, #4294967295
    cb5c:	bf08      	it	eq
    cb5e:	4630      	moveq	r0, r6
	__asm__ volatile(
    cb60:	f04f 0320 	mov.w	r3, #32
    cb64:	f3ef 8411 	mrs	r4, BASEPRI
    cb68:	f383 8811 	msr	BASEPRI, r3
    cb6c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    cb70:	491b      	ldr	r1, [pc, #108]	; (cbe0 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    cb72:	4b1c      	ldr	r3, [pc, #112]	; (cbe4 <z_clock_set_timeout+0x90>)
    cb74:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    cb78:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    cb7a:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    cb7c:	1b53      	subs	r3, r2, r5
    cb7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    cb82:	3501      	adds	r5, #1
    cb84:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    cb86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    cb8a:	42b0      	cmp	r0, r6
    cb8c:	bfd4      	ite	le
    cb8e:	1818      	addle	r0, r3, r0
    cb90:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    cb92:	1a82      	subs	r2, r0, r2
    cb94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    cb98:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    cb9c:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    cb9e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    cba2:	d904      	bls.n	cbae <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    cba4:	f384 8811 	msr	BASEPRI, r4
    cba8:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    cbac:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    cbae:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    cbb2:	4a0d      	ldr	r2, [pc, #52]	; (cbe8 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    cbb4:	1ac3      	subs	r3, r0, r3
    cbb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    cbba:	1e5d      	subs	r5, r3, #1
    cbbc:	4295      	cmp	r5, r2
    cbbe:	d905      	bls.n	cbcc <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cbc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    cbc4:	4b09      	ldr	r3, [pc, #36]	; (cbec <z_clock_set_timeout+0x98>)
    cbc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cbca:	e7eb      	b.n	cba4 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    cbcc:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    cbce:	bf02      	ittt	eq
    cbd0:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cbd2:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    cbd6:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    cbda:	e7e3      	b.n	cba4 <z_clock_set_timeout+0x50>
    cbdc:	00fffffe 	.word	0x00fffffe
    cbe0:	50015000 	.word	0x50015000
    cbe4:	20000024 	.word	0x20000024
    cbe8:	007ffffe 	.word	0x007ffffe
    cbec:	e000e100 	.word	0xe000e100

0000cbf0 <z_clock_elapsed>:
	__asm__ volatile(
    cbf0:	f04f 0220 	mov.w	r2, #32
    cbf4:	f3ef 8311 	mrs	r3, BASEPRI
    cbf8:	f382 8811 	msr	BASEPRI, r2
    cbfc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    cc00:	4a06      	ldr	r2, [pc, #24]	; (cc1c <z_clock_elapsed+0x2c>)
    cc02:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    cc06:	4a06      	ldr	r2, [pc, #24]	; (cc20 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    cc08:	6812      	ldr	r2, [r2, #0]
    cc0a:	1a80      	subs	r0, r0, r2
    cc0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    cc10:	f383 8811 	msr	BASEPRI, r3
    cc14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    cc18:	4770      	bx	lr
    cc1a:	bf00      	nop
    cc1c:	50015000 	.word	0x50015000
    cc20:	20000024 	.word	0x20000024

0000cc24 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
    cc24:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    cc26:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cc28:	2b00      	cmp	r3, #0
    cc2a:	db0c      	blt.n	cc46 <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc2c:	2201      	movs	r2, #1
    cc2e:	f000 011f 	and.w	r1, r0, #31
    cc32:	408a      	lsls	r2, r1
    cc34:	095b      	lsrs	r3, r3, #5
    cc36:	4910      	ldr	r1, [pc, #64]	; (cc78 <spm_config_peripheral.constprop.1+0x54>)
    cc38:	3320      	adds	r3, #32
    cc3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cc3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc42:	f3bf 8f6f 	isb	sy
    cc46:	0083      	lsls	r3, r0, #2
    cc48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    cc4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    cc50:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
    cc52:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    cc56:	d006      	beq.n	cc66 <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
    cc58:	2a00      	cmp	r2, #0
    cc5a:	da07      	bge.n	cc6c <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    cc5c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    cc60:	3a02      	subs	r2, #2

	if (usel_or_split(id)) {
    cc62:	2a01      	cmp	r2, #1
    cc64:	d802      	bhi.n	cc6c <spm_config_peripheral.constprop.1+0x48>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    cc66:	4a05      	ldr	r2, [pc, #20]	; (cc7c <spm_config_peripheral.constprop.1+0x58>)
    cc68:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
    cc6c:	2100      	movs	r1, #0
    cc6e:	f003 fc7c 	bl	1056a <irq_target_state_set>
	return 0;
}
    cc72:	2000      	movs	r0, #0
    cc74:	bd08      	pop	{r3, pc}
    cc76:	bf00      	nop
    cc78:	e000e100 	.word	0xe000e100
    cc7c:	80000100 	.word	0x80000100

0000cc80 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    cc80:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    cc82:	f44f 34c1 	mov.w	r4, #98816	; 0x18200
{
    cc86:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    cc88:	4d2e      	ldr	r5, [pc, #184]	; (cd44 <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
    cc8a:	f44f 31c1 	mov.w	r1, #98816	; 0x18200
    cc8e:	482e      	ldr	r0, [pc, #184]	; (cd48 <spm_jump+0xc8>)
    cc90:	f003 fb1c 	bl	102cc <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    cc94:	6821      	ldr	r1, [r4, #0]
    cc96:	482d      	ldr	r0, [pc, #180]	; (cd4c <spm_jump+0xcc>)
    cc98:	f003 fb18 	bl	102cc <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    cc9c:	6829      	ldr	r1, [r5, #0]
    cc9e:	482c      	ldr	r0, [pc, #176]	; (cd50 <spm_jump+0xd0>)
    cca0:	f003 fb14 	bl	102cc <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    cca4:	2210      	movs	r2, #16
    cca6:	2100      	movs	r1, #0
    cca8:	4668      	mov	r0, sp
    ccaa:	f003 fd0f 	bl	106cc <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    ccae:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    ccb0:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    ccb2:	9300      	str	r3, [sp, #0]
    ccb4:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    ccb6:	f7ff fda3 	bl	c800 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    ccba:	2001      	movs	r0, #1
    ccbc:	f7ff fdd0 	bl	c860 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    ccc0:	2000      	movs	r0, #0
    ccc2:	f7ff fdb9 	bl	c838 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    ccc6:	2000      	movs	r0, #0
    ccc8:	f7ff fdde 	bl	c888 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    cccc:	2101      	movs	r1, #1
    ccce:	2000      	movs	r0, #0
    ccd0:	f7ff fdf8 	bl	c8c4 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    ccd4:	f7ff fdec 	bl	c8b0 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    ccd8:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    ccda:	481e      	ldr	r0, [pc, #120]	; (cd54 <spm_jump+0xd4>)
    ccdc:	f003 faf6 	bl	102cc <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
    cce0:	2008      	movs	r0, #8
    cce2:	f7ff ff9f 	bl	cc24 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    cce6:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    ccea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ccee:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    ccf2:	0864      	lsrs	r4, r4, #1
    ccf4:	0064      	lsls	r4, r4, #1
    ccf6:	4620      	mov	r0, r4
    ccf8:	4621      	mov	r1, r4
    ccfa:	4622      	mov	r2, r4
    ccfc:	4623      	mov	r3, r4
    ccfe:	ed9f 0a16 	vldr	s0, [pc, #88]	; cd58 <spm_jump+0xd8>
    cd02:	eddf 0a15 	vldr	s1, [pc, #84]	; cd58 <spm_jump+0xd8>
    cd06:	ed9f 1a14 	vldr	s2, [pc, #80]	; cd58 <spm_jump+0xd8>
    cd0a:	eddf 1a13 	vldr	s3, [pc, #76]	; cd58 <spm_jump+0xd8>
    cd0e:	ed9f 2a12 	vldr	s4, [pc, #72]	; cd58 <spm_jump+0xd8>
    cd12:	eddf 2a11 	vldr	s5, [pc, #68]	; cd58 <spm_jump+0xd8>
    cd16:	ed9f 3a10 	vldr	s6, [pc, #64]	; cd58 <spm_jump+0xd8>
    cd1a:	eddf 3a0f 	vldr	s7, [pc, #60]	; cd58 <spm_jump+0xd8>
    cd1e:	ed9f 4a0e 	vldr	s8, [pc, #56]	; cd58 <spm_jump+0xd8>
    cd22:	eddf 4a0d 	vldr	s9, [pc, #52]	; cd58 <spm_jump+0xd8>
    cd26:	ed9f 5a0c 	vldr	s10, [pc, #48]	; cd58 <spm_jump+0xd8>
    cd2a:	eddf 5a0b 	vldr	s11, [pc, #44]	; cd58 <spm_jump+0xd8>
    cd2e:	ed9f 6a0a 	vldr	s12, [pc, #40]	; cd58 <spm_jump+0xd8>
    cd32:	eddf 6a09 	vldr	s13, [pc, #36]	; cd58 <spm_jump+0xd8>
    cd36:	ed9f 7a08 	vldr	s14, [pc, #32]	; cd58 <spm_jump+0xd8>
    cd3a:	eddf 7a07 	vldr	s15, [pc, #28]	; cd58 <spm_jump+0xd8>
    cd3e:	f7ff fd31 	bl	c7a4 <__gnu_cmse_nonsecure_call>
    cd42:	bf00      	nop
    cd44:	00018204 	.word	0x00018204
    cd48:	00011244 	.word	0x00011244
    cd4c:	0001125b 	.word	0x0001125b
    cd50:	00011270 	.word	0x00011270
    cd54:	0001128e 	.word	0x0001128e
    cd58:	00000000 	.word	0x00000000

0000cd5c <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
    cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
    cd60:	486f      	ldr	r0, [pc, #444]	; (cf20 <spm_config+0x1c4>)
    cd62:	f003 fab3 	bl	102cc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
    cd66:	2100      	movs	r1, #0
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
    cd68:	f8df 8200 	ldr.w	r8, [pc, #512]	; cf6c <spm_config+0x210>
    cd6c:	4f6d      	ldr	r7, [pc, #436]	; (cf24 <spm_config+0x1c8>)
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
    cd6e:	4d6e      	ldr	r5, [pc, #440]	; (cf28 <spm_config+0x1cc>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
    cd70:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
    cd74:	03ca      	lsls	r2, r1, #15
    cd76:	f501 73c0 	add.w	r3, r1, #384	; 0x180
    cd7a:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
    cd7e:	486b      	ldr	r0, [pc, #428]	; (cf2c <spm_config+0x1d0>)
    cd80:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
    cd84:	1c4e      	adds	r6, r1, #1
    cd86:	f003 faa1 	bl	102cc <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
    cd8a:	4b69      	ldr	r3, [pc, #420]	; (cf30 <spm_config+0x1d4>)
    cd8c:	f014 0f10 	tst.w	r4, #16
    cd90:	4968      	ldr	r1, [pc, #416]	; (cf34 <spm_config+0x1d8>)
    cd92:	4869      	ldr	r0, [pc, #420]	; (cf38 <spm_config+0x1dc>)
    cd94:	bf08      	it	eq
    cd96:	4619      	moveq	r1, r3
    cd98:	f003 fa98 	bl	102cc <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
    cd9c:	f014 0f04 	tst.w	r4, #4
    cda0:	bf14      	ite	ne
    cda2:	2172      	movne	r1, #114	; 0x72
    cda4:	212d      	moveq	r1, #45	; 0x2d
    cda6:	4628      	mov	r0, r5
    cda8:	f003 fa90 	bl	102cc <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
    cdac:	f014 0f02 	tst.w	r4, #2
    cdb0:	bf14      	ite	ne
    cdb2:	2177      	movne	r1, #119	; 0x77
    cdb4:	212d      	moveq	r1, #45	; 0x2d
    cdb6:	4628      	mov	r0, r5
    cdb8:	f003 fa88 	bl	102cc <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
    cdbc:	f014 0f01 	tst.w	r4, #1
    cdc0:	bf14      	ite	ne
    cdc2:	2178      	movne	r1, #120	; 0x78
    cdc4:	212d      	moveq	r1, #45	; 0x2d
    cdc6:	4628      	mov	r0, r5
    cdc8:	f003 fa80 	bl	102cc <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
    cdcc:	f414 7f80 	tst.w	r4, #256	; 0x100
    cdd0:	bf14      	ite	ne
    cdd2:	216c      	movne	r1, #108	; 0x6c
    cdd4:	212d      	moveq	r1, #45	; 0x2d
    cdd6:	4628      	mov	r0, r5
    cdd8:	f003 fa78 	bl	102cc <printk>
		PRINT("\n");
    cddc:	4857      	ldr	r0, [pc, #348]	; (cf3c <spm_config+0x1e0>)
    cdde:	f003 fa75 	bl	102cc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
    cde2:	2e20      	cmp	r6, #32
    cde4:	4631      	mov	r1, r6
    cde6:	d1c3      	bne.n	cd70 <spm_config+0x14>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    cde8:	4b55      	ldr	r3, [pc, #340]	; (cf40 <spm_config+0x1e4>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
    cdea:	4a4e      	ldr	r2, [pc, #312]	; (cf24 <spm_config+0x1c8>)
    cdec:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    cdf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    cdf4:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
    cdf8:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
    cdfc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
    ce00:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    ce04:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
    ce08:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    ce0c:	484d      	ldr	r0, [pc, #308]	; (cf44 <spm_config+0x1e8>)
    ce0e:	0152      	lsls	r2, r2, #5
    ce10:	f003 fa5c 	bl	102cc <printk>
	PRINT("\n");
    ce14:	4849      	ldr	r0, [pc, #292]	; (cf3c <spm_config+0x1e0>)
    ce16:	f003 fa59 	bl	102cc <printk>
	int err = spm_secure_services_init();
    ce1a:	f003 fb2a 	bl	10472 <spm_secure_services_init>
	if (err != 0) {
    ce1e:	4601      	mov	r1, r0
    ce20:	b110      	cbz	r0, ce28 <spm_config+0xcc>
		PRINT("Could not initialize secure services (err %d).\n", err);
    ce22:	4849      	ldr	r0, [pc, #292]	; (cf48 <spm_config+0x1ec>)
    ce24:	f003 fa52 	bl	102cc <printk>
	PRINT("\n");
    ce28:	4844      	ldr	r0, [pc, #272]	; (cf3c <spm_config+0x1e0>)
    ce2a:	f003 fa4f 	bl	102cc <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    ce2e:	4847      	ldr	r0, [pc, #284]	; (cf4c <spm_config+0x1f0>)
    ce30:	f003 fa4c 	bl	102cc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
    ce34:	2100      	movs	r1, #0
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
    ce36:	f8df 8138 	ldr.w	r8, [pc, #312]	; cf70 <spm_config+0x214>
    ce3a:	4f3a      	ldr	r7, [pc, #232]	; (cf24 <spm_config+0x1c8>)
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
    ce3c:	4d3a      	ldr	r5, [pc, #232]	; (cf28 <spm_config+0x1cc>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
    ce3e:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
    ce42:	034a      	lsls	r2, r1, #13
    ce44:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
    ce48:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
    ce4c:	4840      	ldr	r0, [pc, #256]	; (cf50 <spm_config+0x1f4>)
    ce4e:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
    ce52:	1c4e      	adds	r6, r1, #1
    ce54:	f003 fa3a 	bl	102cc <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
    ce58:	4b35      	ldr	r3, [pc, #212]	; (cf30 <spm_config+0x1d4>)
    ce5a:	f014 0f10 	tst.w	r4, #16
    ce5e:	4935      	ldr	r1, [pc, #212]	; (cf34 <spm_config+0x1d8>)
    ce60:	4835      	ldr	r0, [pc, #212]	; (cf38 <spm_config+0x1dc>)
    ce62:	bf08      	it	eq
    ce64:	4619      	moveq	r1, r3
    ce66:	f003 fa31 	bl	102cc <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
    ce6a:	f014 0f04 	tst.w	r4, #4
    ce6e:	bf14      	ite	ne
    ce70:	2172      	movne	r1, #114	; 0x72
    ce72:	212d      	moveq	r1, #45	; 0x2d
    ce74:	4628      	mov	r0, r5
    ce76:	f003 fa29 	bl	102cc <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
    ce7a:	f014 0f02 	tst.w	r4, #2
    ce7e:	bf14      	ite	ne
    ce80:	2177      	movne	r1, #119	; 0x77
    ce82:	212d      	moveq	r1, #45	; 0x2d
    ce84:	4628      	mov	r0, r5
    ce86:	f003 fa21 	bl	102cc <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
    ce8a:	f014 0f01 	tst.w	r4, #1
    ce8e:	bf14      	ite	ne
    ce90:	2178      	movne	r1, #120	; 0x78
    ce92:	212d      	moveq	r1, #45	; 0x2d
    ce94:	4628      	mov	r0, r5
    ce96:	f003 fa19 	bl	102cc <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
    ce9a:	f414 7f80 	tst.w	r4, #256	; 0x100
    ce9e:	bf14      	ite	ne
    cea0:	216c      	movne	r1, #108	; 0x6c
    cea2:	212d      	moveq	r1, #45	; 0x2d
    cea4:	4628      	mov	r0, r5
    cea6:	f003 fa11 	bl	102cc <printk>
		PRINT("\n");
    ceaa:	4824      	ldr	r0, [pc, #144]	; (cf3c <spm_config+0x1e0>)
    ceac:	f003 fa0e 	bl	102cc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
    ceb0:	2e20      	cmp	r6, #32
    ceb2:	4631      	mov	r1, r6
    ceb4:	d1c3      	bne.n	ce3e <spm_config+0xe2>
	PRINT("\n");
    ceb6:	4821      	ldr	r0, [pc, #132]	; (cf3c <spm_config+0x1e0>)
    ceb8:	f003 fa08 	bl	102cc <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    cebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
		NRF_SPU->GPIOPORT[0].PERM = 0;
    cec0:	2400      	movs	r4, #0
	NRF_SPU->DPPI[0].PERM = mask;
    cec2:	4d18      	ldr	r5, [pc, #96]	; (cf24 <spm_config+0x1c8>)
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    cec4:	4823      	ldr	r0, [pc, #140]	; (cf54 <spm_config+0x1f8>)
	NRF_SPU->DPPI[0].PERM = mask;
    cec6:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    ceca:	f003 f9ff 	bl	102cc <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    cece:	f8df 80a4 	ldr.w	r8, [pc, #164]	; cf74 <spm_config+0x218>
		NRF_SPU->GPIOPORT[0].PERM = 0;
    ced2:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    ced6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; cf78 <spm_config+0x21c>
    ceda:	4d1f      	ldr	r5, [pc, #124]	; (cf58 <spm_config+0x1fc>)
    cedc:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
    cee0:	7977      	ldrb	r7, [r6, #5]
    cee2:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
    cee6:	2f00      	cmp	r7, #0
    cee8:	bf14      	ite	ne
    ceea:	4643      	movne	r3, r8
    ceec:	464b      	moveq	r3, r9
    ceee:	4621      	mov	r1, r4
    cef0:	481a      	ldr	r0, [pc, #104]	; (cf5c <spm_config+0x200>)
    cef2:	f003 f9eb 	bl	102cc <printk>
		if (!periph[i].nonsecure) {
    cef6:	b957      	cbnz	r7, cf0e <spm_config+0x1b2>
			PRINT("\tSKIP\n");
    cef8:	4819      	ldr	r0, [pc, #100]	; (cf60 <spm_config+0x204>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    cefa:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    cefc:	f003 f9e6 	bl	102cc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    cf00:	2c19      	cmp	r4, #25
    cf02:	d1eb      	bne.n	cedc <spm_config+0x180>
	PRINT("\n");
    cf04:	480d      	ldr	r0, [pc, #52]	; (cf3c <spm_config+0x1e0>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    cf06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    cf0a:	f003 b9df 	b.w	102cc <printk>
		err = spm_config_peripheral(periph[i].id, false);
    cf0e:	7930      	ldrb	r0, [r6, #4]
    cf10:	f7ff fe88 	bl	cc24 <spm_config_peripheral.constprop.1>
		if (err) {
    cf14:	b108      	cbz	r0, cf1a <spm_config+0x1be>
			PRINT("\tERROR\n");
    cf16:	4813      	ldr	r0, [pc, #76]	; (cf64 <spm_config+0x208>)
    cf18:	e7ef      	b.n	cefa <spm_config+0x19e>
			PRINT("\tOK\n");
    cf1a:	4813      	ldr	r0, [pc, #76]	; (cf68 <spm_config+0x20c>)
    cf1c:	e7ed      	b.n	cefa <spm_config+0x19e>
    cf1e:	bf00      	nop
    cf20:	00011120 	.word	0x00011120
    cf24:	50003000 	.word	0x50003000
    cf28:	00011158 	.word	0x00011158
    cf2c:	00011143 	.word	0x00011143
    cf30:	00011109 	.word	0x00011109
    cf34:	00011100 	.word	0x00011100
    cf38:	0001122d 	.word	0x0001122d
    cf3c:	00011440 	.word	0x00011440
    cf40:	00017fe0 	.word	0x00017fe0
    cf44:	0001115b 	.word	0x0001115b
    cf48:	000111a1 	.word	0x000111a1
    cf4c:	000111d1 	.word	0x000111d1
    cf50:	000111f3 	.word	0x000111f3
    cf54:	00011207 	.word	0x00011207
    cf58:	00010e00 	.word	0x00010e00
    cf5c:	00011223 	.word	0x00011223
    cf60:	00011230 	.word	0x00011230
    cf64:	00011237 	.word	0x00011237
    cf68:	0001123f 	.word	0x0001123f
    cf6c:	00010d80 	.word	0x00010d80
    cf70:	00010ec8 	.word	0x00010ec8
    cf74:	00011115 	.word	0x00011115
    cf78:	0001110d 	.word	0x0001110d

0000cf7c <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
    cf7c:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    cf7e:	2800      	cmp	r0, #0
    cf80:	d050      	beq.n	d024 <__acle_se_spm_request_read+0xa8>
    cf82:	2a00      	cmp	r2, #0
    cf84:	d04e      	beq.n	d024 <__acle_se_spm_request_read+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
    cf86:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
    cf8a:	d348      	bcc.n	d01e <__acle_se_spm_request_read+0xa2>
    cf8c:	1853      	adds	r3, r2, r1
    cf8e:	f5b3 4f42 	cmp.w	r3, #49664	; 0xc200
    cf92:	d906      	bls.n	cfa2 <__acle_se_spm_request_read+0x26>
    cf94:	4c25      	ldr	r4, [pc, #148]	; (d02c <__acle_se_spm_request_read+0xb0>)
    cf96:	42a1      	cmp	r1, r4
    cf98:	d93b      	bls.n	d012 <__acle_se_spm_request_read+0x96>
    cf9a:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
    cf9e:	42a3      	cmp	r3, r4
    cfa0:	d83a      	bhi.n	d018 <__acle_se_spm_request_read+0x9c>
			memcpy(destination, (const void *)addr, len);
    cfa2:	f003 fb66 	bl	10672 <memcpy>
			return 0;
    cfa6:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
    cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cfac:	4671      	mov	r1, lr
    cfae:	4672      	mov	r2, lr
    cfb0:	4673      	mov	r3, lr
    cfb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    cfb6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    cfba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    cfbe:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    cfc2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    cfc6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    cfca:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    cfce:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    cfd2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    cfd6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    cfda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    cfde:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    cfe2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    cfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cfea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    cfee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    cff2:	f38e 8c00 	msr	CPSR_fs, lr
    cff6:	b410      	push	{r4}
    cff8:	eef1 ca10 	vmrs	ip, fpscr
    cffc:	f64f 7460 	movw	r4, #65376	; 0xff60
    d000:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    d004:	ea0c 0c04 	and.w	ip, ip, r4
    d008:	eee1 ca10 	vmsr	fpscr, ip
    d00c:	bc10      	pop	{r4}
    d00e:	46f4      	mov	ip, lr
    d010:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
    d012:	4c07      	ldr	r4, [pc, #28]	; (d030 <__acle_se_spm_request_read+0xb4>)
    d014:	42a1      	cmp	r1, r4
    d016:	d902      	bls.n	d01e <__acle_se_spm_request_read+0xa2>
    d018:	4c06      	ldr	r4, [pc, #24]	; (d034 <__acle_se_spm_request_read+0xb8>)
    d01a:	42a3      	cmp	r3, r4
    d01c:	d9c1      	bls.n	cfa2 <__acle_se_spm_request_read+0x26>
	return -EPERM;
    d01e:	f04f 30ff 	mov.w	r0, #4294967295
    d022:	e7c1      	b.n	cfa8 <__acle_se_spm_request_read+0x2c>
		return -EINVAL;
    d024:	f06f 0015 	mvn.w	r0, #21
    d028:	e7be      	b.n	cfa8 <__acle_se_spm_request_read+0x2c>
    d02a:	bf00      	nop
    d02c:	00ff0203 	.word	0x00ff0203
    d030:	00ff012f 	.word	0x00ff012f
    d034:	00ff0138 	.word	0x00ff0138

0000d038 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
    d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d03c:	4684      	mov	ip, r0
    d03e:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
    d040:	460f      	mov	r7, r1
    d042:	2900      	cmp	r1, #0
    d044:	d06a      	beq.n	d11c <__acle_se_spm_firmware_info+0xe4>
/* Search for the firmware_info structure inside the firmware. */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d046:	2400      	movs	r4, #0
		if (expected_32[i] != actual_32[i]) {
    d048:	f645 3a01 	movw	sl, #23297	; 0x5b01
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
    d04c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; d128 <__acle_se_spm_firmware_info+0xf0>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d050:	4e34      	ldr	r6, [pc, #208]	; (d124 <__acle_se_spm_firmware_info+0xec>)
		if (expected_32[i] != actual_32[i]) {
    d052:	f8df 80d8 	ldr.w	r8, [pc, #216]	; d12c <__acle_se_spm_firmware_info+0xf4>
    d056:	f8df 90d8 	ldr.w	r9, [pc, #216]	; d130 <__acle_se_spm_firmware_info+0xf8>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d05a:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
    d05c:	f85e b024 	ldr.w	fp, [lr, r4, lsl #2]
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d060:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    d064:	eb0c 030b 	add.w	r3, ip, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d068:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
    d06c:	079a      	lsls	r2, r3, #30
    d06e:	d144      	bne.n	d0fa <__acle_se_spm_firmware_info+0xc2>
		if (expected_32[i] != actual_32[i]) {
    d070:	f85c 200b 	ldr.w	r2, [ip, fp]
    d074:	4542      	cmp	r2, r8
    d076:	d105      	bne.n	d084 <__acle_se_spm_firmware_info+0x4c>
    d078:	685a      	ldr	r2, [r3, #4]
    d07a:	454a      	cmp	r2, r9
    d07c:	d102      	bne.n	d084 <__acle_se_spm_firmware_info+0x4c>
    d07e:	689a      	ldr	r2, [r3, #8]
    d080:	4552      	cmp	r2, sl
    d082:	d044      	beq.n	d10e <__acle_se_spm_firmware_info+0xd6>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d084:	3401      	adds	r4, #1
    d086:	2c03      	cmp	r4, #3
    d088:	d1e8      	bne.n	d05c <__acle_se_spm_firmware_info+0x24>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    d08a:	f06f 000d 	mvn.w	r0, #13
}
    d08e:	b005      	add	sp, #20
    d090:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    d094:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    d098:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    d09c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    d0a0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    d0a4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    d0a8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    d0ac:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    d0b0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    d0b4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    d0b8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    d0bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    d0c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    d0c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    d0c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d0cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0d0:	4671      	mov	r1, lr
    d0d2:	4672      	mov	r2, lr
    d0d4:	4673      	mov	r3, lr
    d0d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d0da:	f38e 8c00 	msr	CPSR_fs, lr
    d0de:	b410      	push	{r4}
    d0e0:	eef1 ca10 	vmrs	ip, fpscr
    d0e4:	f64f 7460 	movw	r4, #65376	; 0xff60
    d0e8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    d0ec:	ea0c 0c04 	and.w	ip, ip, r4
    d0f0:	eee1 ca10 	vmsr	fpscr, ip
    d0f4:	bc10      	pop	{r4}
    d0f6:	46f4      	mov	ip, lr
    d0f8:	4774      	bxns	lr
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
    d0fa:	2200      	movs	r2, #0
		if (expected_8[i] != actual_8[i]) {
    d0fc:	5c98      	ldrb	r0, [r3, r2]
    d0fe:	5ca9      	ldrb	r1, [r5, r2]
    d100:	4288      	cmp	r0, r1
    d102:	d1bf      	bne.n	d084 <__acle_se_spm_firmware_info+0x4c>
	for (u32_t i = 0; i < len; i++) {
    d104:	3201      	adds	r2, #1
    d106:	2a0c      	cmp	r2, #12
    d108:	d1f8      	bne.n	d0fc <__acle_se_spm_firmware_info+0xc4>
		if (finfo) {
    d10a:	2b00      	cmp	r3, #0
    d10c:	d0ba      	beq.n	d084 <__acle_se_spm_firmware_info+0x4c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    d10e:	2220      	movs	r2, #32
    d110:	4619      	mov	r1, r3
    d112:	4638      	mov	r0, r7
    d114:	f003 faad 	bl	10672 <memcpy>
		return 0;
    d118:	2000      	movs	r0, #0
    d11a:	e7b8      	b.n	d08e <__acle_se_spm_firmware_info+0x56>
		return -EINVAL;
    d11c:	f06f 0015 	mvn.w	r0, #21
    d120:	e7b5      	b.n	d08e <__acle_se_spm_firmware_info+0x56>
    d122:	bf00      	nop
    d124:	00010d20 	.word	0x00010d20
    d128:	00010f48 	.word	0x00010f48
    d12c:	281ee6de 	.word	0x281ee6de
    d130:	8fcebb4c 	.word	0x8fcebb4c

0000d134 <adp536x_reg_read>:


static struct device *i2c_dev;

static int adp536x_reg_read(u8_t reg, u8_t *buff)
{
    d134:	b530      	push	{r4, r5, lr}
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    d136:	4b0d      	ldr	r3, [pc, #52]	; (d16c <adp536x_reg_read+0x38>)
{
    d138:	b089      	sub	sp, #36	; 0x24
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    d13a:	681c      	ldr	r4, [r3, #0]
    d13c:	ab08      	add	r3, sp, #32
    d13e:	f803 0d19 	strb.w	r0, [r3, #-25]!
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
    d142:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    d144:	2301      	movs	r3, #1
	msg[0].flags = I2C_MSG_WRITE;
    d146:	2200      	movs	r2, #0
	msg[0].len = num_write;
    d148:	9303      	str	r3, [sp, #12]

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
    d14a:	e9cd 1305 	strd	r1, r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d14e:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    d150:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d154:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    d158:	6863      	ldr	r3, [r4, #4]
    d15a:	2202      	movs	r2, #2
    d15c:	685d      	ldr	r5, [r3, #4]
    d15e:	a902      	add	r1, sp, #8
    d160:	2346      	movs	r3, #70	; 0x46
    d162:	4620      	mov	r0, r4
    d164:	47a8      	blx	r5
}
    d166:	b009      	add	sp, #36	; 0x24
    d168:	bd30      	pop	{r4, r5, pc}
    d16a:	bf00      	nop
    d16c:	20000028 	.word	0x20000028

0000d170 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(u8_t reg_addr,
			       u32_t mask,
			       u8_t data)
{
    d170:	b570      	push	{r4, r5, r6, lr}
    d172:	b086      	sub	sp, #24
    d174:	460e      	mov	r6, r1
	int err;
	u8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
    d176:	f10d 0107 	add.w	r1, sp, #7
{
    d17a:	4605      	mov	r5, r0
    d17c:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
    d17e:	f7ff ffd9 	bl	d134 <adp536x_reg_read>
	if (err) {
    d182:	b9c0      	cbnz	r0, d1b6 <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d184:	4b0d      	ldr	r3, [pc, #52]	; (d1bc <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
    d186:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d18a:	6818      	ldr	r0, [r3, #0]
	msg.buf = (u8_t *)buf;
    d18c:	ab02      	add	r3, sp, #8
    d18e:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
    d190:	2302      	movs	r3, #2
	tmp &= ~mask;
    d192:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
    d196:	4322      	orrs	r2, r4
    d198:	f88d 2007 	strb.w	r2, [sp, #7]
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
    d19c:	f88d 5008 	strb.w	r5, [sp, #8]
    d1a0:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
    d1a4:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    d1a6:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
    d1aa:	6843      	ldr	r3, [r0, #4]
    d1ac:	2201      	movs	r2, #1
    d1ae:	685c      	ldr	r4, [r3, #4]
    d1b0:	a903      	add	r1, sp, #12
    d1b2:	2346      	movs	r3, #70	; 0x46
    d1b4:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
    d1b6:	b006      	add	sp, #24
    d1b8:	bd70      	pop	{r4, r5, r6, pc}
    d1ba:	bf00      	nop
    d1bc:	20000028 	.word	0x20000028

0000d1c0 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
    d1c0:	b508      	push	{r3, lr}
    d1c2:	f001 f989 	bl	e4d8 <z_impl_device_get_binding>
	int err = 0;

	i2c_dev = device_get_binding(dev_name);
    d1c6:	4b02      	ldr	r3, [pc, #8]	; (d1d0 <adp536x_init+0x10>)
    d1c8:	6018      	str	r0, [r3, #0]
	if (err) {
		err = -ENODEV;
	}

	return err;
}
    d1ca:	2000      	movs	r0, #0
    d1cc:	bd08      	pop	{r3, pc}
    d1ce:	bf00      	nop
    d1d0:	20000028 	.word	0x20000028

0000d1d4 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    d1d4:	4801      	ldr	r0, [pc, #4]	; (d1dc <nrf_cc310_platform_abort_init+0x8>)
    d1d6:	f002 b9ab 	b.w	f530 <nrf_cc310_platform_set_abort>
    d1da:	bf00      	nop
    d1dc:	00010f54 	.word	0x00010f54

0000d1e0 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    d1e0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d1e2:	b130      	cbz	r0, d1f2 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    d1e4:	6843      	ldr	r3, [r0, #4]
    d1e6:	b13b      	cbz	r3, d1f8 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    d1e8:	6800      	ldr	r0, [r0, #0]
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
    d1ea:	f001 fb63 	bl	e8b4 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    d1ee:	2000      	movs	r0, #0
}
    d1f0:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    d1f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d1f6:	e7fb      	b.n	d1f0 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d1f8:	4800      	ldr	r0, [pc, #0]	; (d1fc <mutex_unlock+0x1c>)
    d1fa:	e7f9      	b.n	d1f0 <mutex_unlock+0x10>
    d1fc:	ffff8fea 	.word	0xffff8fea

0000d200 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    d200:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    d202:	b158      	cbz	r0, d21c <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    d204:	6843      	ldr	r3, [r0, #4]
    d206:	b163      	cbz	r3, d222 <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
    d208:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    d20a:	f04f 31ff 	mov.w	r1, #4294967295
    d20e:	f001 fadf 	bl	e7d0 <z_impl_k_mutex_lock>
    if (ret == 0) {
    d212:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    d214:	4804      	ldr	r0, [pc, #16]	; (d228 <mutex_lock+0x28>)
    d216:	bf08      	it	eq
    d218:	2000      	moveq	r0, #0
}
    d21a:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    d21c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d220:	e7fb      	b.n	d21a <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d222:	4802      	ldr	r0, [pc, #8]	; (d22c <mutex_lock+0x2c>)
    d224:	e7f9      	b.n	d21a <mutex_lock+0x1a>
    d226:	bf00      	nop
    d228:	ffff8fe9 	.word	0xffff8fe9
    d22c:	ffff8fea 	.word	0xffff8fea

0000d230 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    d230:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    d232:	4604      	mov	r4, r0
    d234:	b918      	cbnz	r0, d23e <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    d236:	4b0b      	ldr	r3, [pc, #44]	; (d264 <mutex_free+0x34>)
    d238:	480b      	ldr	r0, [pc, #44]	; (d268 <mutex_free+0x38>)
    d23a:	685b      	ldr	r3, [r3, #4]
    d23c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    d23e:	6865      	ldr	r5, [r4, #4]
    d240:	b155      	cbz	r5, d258 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    d242:	f015 0502 	ands.w	r5, r5, #2
    d246:	6820      	ldr	r0, [r4, #0]
    d248:	d107      	bne.n	d25a <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    d24a:	4601      	mov	r1, r0
    d24c:	4807      	ldr	r0, [pc, #28]	; (d26c <mutex_free+0x3c>)
    d24e:	f001 fa91 	bl	e774 <k_mem_slab_free>
        mutex->mutex = NULL;
    d252:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    d254:	2300      	movs	r3, #0
    d256:	6063      	str	r3, [r4, #4]
}
    d258:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d25a:	2214      	movs	r2, #20
    d25c:	2100      	movs	r1, #0
    d25e:	f003 fa35 	bl	106cc <memset>
    d262:	e7f7      	b.n	d254 <mutex_free+0x24>
    d264:	20001488 	.word	0x20001488
    d268:	000113ac 	.word	0x000113ac
    d26c:	2000002c 	.word	0x2000002c

0000d270 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    d270:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    d272:	4604      	mov	r4, r0
    d274:	b918      	cbnz	r0, d27e <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    d276:	4b13      	ldr	r3, [pc, #76]	; (d2c4 <mutex_init+0x54>)
    d278:	4813      	ldr	r0, [pc, #76]	; (d2c8 <mutex_init+0x58>)
    d27a:	685b      	ldr	r3, [r3, #4]
    d27c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    d27e:	6863      	ldr	r3, [r4, #4]
    d280:	b9bb      	cbnz	r3, d2b2 <mutex_init+0x42>
    d282:	6823      	ldr	r3, [r4, #0]
    d284:	b9ab      	cbnz	r3, d2b2 <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    d286:	f04f 32ff 	mov.w	r2, #4294967295
    d28a:	4621      	mov	r1, r4
    d28c:	480f      	ldr	r0, [pc, #60]	; (d2cc <mutex_init+0x5c>)
    d28e:	f001 fa43 	bl	e718 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    d292:	b908      	cbnz	r0, d298 <mutex_init+0x28>
    d294:	6823      	ldr	r3, [r4, #0]
    d296:	b91b      	cbnz	r3, d2a0 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
    d298:	4b0a      	ldr	r3, [pc, #40]	; (d2c4 <mutex_init+0x54>)
    d29a:	480d      	ldr	r0, [pc, #52]	; (d2d0 <mutex_init+0x60>)
    d29c:	685b      	ldr	r3, [r3, #4]
    d29e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d2a0:	2214      	movs	r2, #20
    d2a2:	2100      	movs	r1, #0
    d2a4:	6820      	ldr	r0, [r4, #0]
    d2a6:	f003 fa11 	bl	106cc <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    d2aa:	6863      	ldr	r3, [r4, #4]
    d2ac:	f043 0302 	orr.w	r3, r3, #2
    d2b0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    d2b2:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
    d2b4:	f003 fabd 	bl	10832 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    d2b8:	6863      	ldr	r3, [r4, #4]
    d2ba:	f043 0301 	orr.w	r3, r3, #1
    d2be:	6063      	str	r3, [r4, #4]
}
    d2c0:	bd10      	pop	{r4, pc}
    d2c2:	bf00      	nop
    d2c4:	20001488 	.word	0x20001488
    d2c8:	000113ac 	.word	0x000113ac
    d2cc:	2000002c 	.word	0x2000002c
    d2d0:	000113d2 	.word	0x000113d2

0000d2d4 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    d2d4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    d2d6:	4906      	ldr	r1, [pc, #24]	; (d2f0 <nrf_cc310_platform_mutex_init+0x1c>)
    d2d8:	2340      	movs	r3, #64	; 0x40
    d2da:	4806      	ldr	r0, [pc, #24]	; (d2f4 <nrf_cc310_platform_mutex_init+0x20>)
    d2dc:	2214      	movs	r2, #20
    d2de:	f003 fa96 	bl	1080e <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    d2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    d2e6:	4904      	ldr	r1, [pc, #16]	; (d2f8 <nrf_cc310_platform_mutex_init+0x24>)
    d2e8:	4804      	ldr	r0, [pc, #16]	; (d2fc <nrf_cc310_platform_mutex_init+0x28>)
    d2ea:	f002 b959 	b.w	f5a0 <nrf_cc310_platform_set_mutexes>
    d2ee:	bf00      	nop
    d2f0:	20000048 	.word	0x20000048
    d2f4:	2000002c 	.word	0x2000002c
    d2f8:	00010f6c 	.word	0x00010f6c
    d2fc:	00010f5c 	.word	0x00010f5c

0000d300 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d300:	4804      	ldr	r0, [pc, #16]	; (d314 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d302:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d304:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d306:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d308:	d003      	beq.n	d312 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d30a:	4903      	ldr	r1, [pc, #12]	; (d318 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d310:	600a      	str	r2, [r1, #0]

0000d312 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d312:	4770      	bx	lr
    ldr r0, =_kernel
    d314:	20000668 	.word	0x20000668
    ldr r1, =_SCS_ICSR
    d318:	e000ed04 	.word	0xe000ed04

0000d31c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d31c:	4912      	ldr	r1, [pc, #72]	; (d368 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d31e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d320:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d324:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d326:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d32a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d32e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d330:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d334:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d338:	4f0c      	ldr	r7, [pc, #48]	; (d36c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d33a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d33e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d340:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d342:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d344:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d346:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d348:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d34a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d34e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d350:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d352:	f003 f940 	bl	105d6 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d356:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d35a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d35e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d362:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d366:	4770      	bx	lr
    ldr r1, =_kernel
    d368:	20000668 	.word	0x20000668
    ldr v4, =_SCS_ICSR
    d36c:	e000ed04 	.word	0xe000ed04

0000d370 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    d370:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d374:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d376:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d37a:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d37e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    d380:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d384:	2902      	cmp	r1, #2
    beq _oops
    d386:	d0ff      	beq.n	d388 <_oops>

0000d388 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d388:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d38a:	f003 f919 	bl	105c0 <z_do_kernel_oops>
    pop {r0, pc}
    d38e:	bd01      	pop	{r0, pc}

0000d390 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    d390:	4901      	ldr	r1, [pc, #4]	; (d398 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    d392:	2210      	movs	r2, #16
	str r2, [r1]
    d394:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    d396:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    d398:	e000ed10 	.word	0xe000ed10

0000d39c <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    d39c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    d39e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    d3a2:	bf30      	wfi

	bx lr
    d3a4:	4770      	bx	lr
    d3a6:	bf00      	nop

0000d3a8 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    d3a8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    d3aa:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    d3ae:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    d3b2:	4671      	mov	r1, lr
	tst r1, r0
    d3b4:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    d3b6:	d002      	beq.n	d3be <_s_stack_frame_msp>
	mrs r0, PSP
    d3b8:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    d3bc:	d101      	bne.n	d3c2 <_s_stack_frame_endif>

0000d3be <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    d3be:	f3ef 8008 	mrs	r0, MSP

0000d3c2 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    d3c2:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    d3c4:	b501      	push	{r0, lr}
	bl z_arm_fault
    d3c6:	f000 f961 	bl	d68c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    d3ca:	bd01      	pop	{r0, pc}

0000d3cc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d3cc:	bf30      	wfi
    b z_SysNmiOnReset
    d3ce:	f7ff bffd 	b.w	d3cc <z_SysNmiOnReset>
    d3d2:	bf00      	nop

0000d3d4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d3d4:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    d3d6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d3d8:	4a0b      	ldr	r2, [pc, #44]	; (d408 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d3da:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    d3dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d3de:	bf1e      	ittt	ne
	movne	r1, #0
    d3e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d3e2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    d3e4:	f003 fa11 	blne	1080a <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d3e8:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d3ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d3ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d3f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    d3f6:	4905      	ldr	r1, [pc, #20]	; (d40c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d3f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d3fa:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    d3fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d3fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d402:	4903      	ldr	r1, [pc, #12]	; (d410 <_isr_wrapper+0x3c>)
	bx r1
    d404:	4708      	bx	r1
    d406:	0000      	.short	0x0000
	ldr r2, =_kernel
    d408:	20000668 	.word	0x20000668
	ldr r1, =_sw_isr_table
    d40c:	00010a88 	.word	0x00010a88
	ldr r1, =z_arm_int_exit
    d410:	0000d301 	.word	0x0000d301

0000d414 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    d414:	4a09      	ldr	r2, [pc, #36]	; (d43c <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d416:	490a      	ldr	r1, [pc, #40]	; (d440 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    d418:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d41a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d41c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    d41e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d420:	4908      	ldr	r1, [pc, #32]	; (d444 <z_arch_swap+0x30>)
    d422:	684b      	ldr	r3, [r1, #4]
    d424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d428:	604b      	str	r3, [r1, #4]
    d42a:	2300      	movs	r3, #0
    d42c:	f383 8811 	msr	BASEPRI, r3
    d430:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d434:	6893      	ldr	r3, [r2, #8]
}
    d436:	6e98      	ldr	r0, [r3, #104]	; 0x68
    d438:	4770      	bx	lr
    d43a:	bf00      	nop
    d43c:	20000668 	.word	0x20000668
    d440:	00010fd8 	.word	0x00010fd8
    d444:	e000ed00 	.word	0xe000ed00

0000d448 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d448:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d44a:	2b00      	cmp	r3, #0
    d44c:	db08      	blt.n	d460 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d44e:	2201      	movs	r2, #1
    d450:	f000 001f 	and.w	r0, r0, #31
    d454:	fa02 f000 	lsl.w	r0, r2, r0
    d458:	4a02      	ldr	r2, [pc, #8]	; (d464 <z_arch_irq_enable+0x1c>)
    d45a:	095b      	lsrs	r3, r3, #5
    d45c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d460:	4770      	bx	lr
    d462:	bf00      	nop
    d464:	e000e100 	.word	0xe000e100

0000d468 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d468:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d46a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    d46c:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d470:	bfa8      	it	ge
    d472:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    d476:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d47a:	bfb8      	it	lt
    d47c:	4b05      	ldrlt	r3, [pc, #20]	; (d494 <z_arm_irq_priority_set+0x2c>)
    d47e:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d480:	bfab      	itete	ge
    d482:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d486:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d48a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d48e:	5419      	strblt	r1, [r3, r0]
}
    d490:	4770      	bx	lr
    d492:	bf00      	nop
    d494:	e000ed14 	.word	0xe000ed14

0000d498 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    d49c:	188c      	adds	r4, r1, r2
{
    d49e:	4688      	mov	r8, r1
    d4a0:	4617      	mov	r7, r2
    d4a2:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    d4a4:	2204      	movs	r2, #4
    d4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d4a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    d4aa:	4605      	mov	r5, r0
    d4ac:	f003 fa9e 	bl	109ec <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    d4b0:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    d4b2:	490d      	ldr	r1, [pc, #52]	; (d4e8 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    d4b4:	f1a4 0320 	sub.w	r3, r4, #32
    d4b8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    d4bc:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    d4c0:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    d4c4:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    d4c8:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d4ca:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    d4cc:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d4ce:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    d4d0:	9907      	ldr	r1, [sp, #28]
    d4d2:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    d4d4:	9908      	ldr	r1, [sp, #32]
    d4d6:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    d4d8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    d4dc:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    d4de:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    d4e0:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4e6:	bf00      	nop
    d4e8:	0000ffad 	.word	0x0000ffad

0000d4ec <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4ee:	461e      	mov	r6, r3
    d4f0:	4605      	mov	r5, r0
    d4f2:	460c      	mov	r4, r1
    d4f4:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d4f6:	2300      	movs	r3, #0
    d4f8:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d4fc:	f000 f96e 	bl	d7dc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    d500:	4b0b      	ldr	r3, [pc, #44]	; (d530 <z_arch_switch_to_main_thread+0x44>)
	start_of_main_stack =
    d502:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d504:	4628      	mov	r0, r5
	_current = main_thread;
    d506:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    d508:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d50c:	f003 f863 	bl	105d6 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d510:	4630      	mov	r0, r6
    d512:	f384 8809 	msr	PSP, r4
    d516:	b663      	cpsie	if
    d518:	f04f 0100 	mov.w	r1, #0
    d51c:	f381 8811 	msr	BASEPRI, r1
    d520:	f3bf 8f6f 	isb	sy
    d524:	2100      	movs	r1, #0
    d526:	2200      	movs	r2, #0
    d528:	2300      	movs	r3, #0
    d52a:	f002 fd3f 	bl	ffac <z_thread_entry>
    d52e:	bf00      	nop
    d530:	20000668 	.word	0x20000668

0000d534 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d534:	4a11      	ldr	r2, [pc, #68]	; (d57c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d536:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d538:	4b11      	ldr	r3, [pc, #68]	; (d580 <z_arm_prep_c+0x4c>)
    d53a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d53e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    d540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d544:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    d548:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d54c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    d550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    d554:	4a0b      	ldr	r2, [pc, #44]	; (d584 <z_arm_prep_c+0x50>)
    d556:	6853      	ldr	r3, [r2, #4]
    d558:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    d55c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    d55e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d562:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d566:	2300      	movs	r3, #0
    d568:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    d56c:	f000 fff4 	bl	e558 <z_bss_zero>
	z_data_copy();
    d570:	f000 fffc 	bl	e56c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    d574:	f000 f900 	bl	d778 <z_arm_int_lib_init>
	z_cstart();
    d578:	f001 f82a 	bl	e5d0 <z_cstart>
    d57c:	0000c200 	.word	0x0000c200
    d580:	e000ed00 	.word	0xe000ed00
    d584:	e000ef30 	.word	0xe000ef30

0000d588 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d588:	f002 feae 	bl	102e8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d58c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d58e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    d592:	4808      	ldr	r0, [pc, #32]	; (d5b4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    d594:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d598:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d59a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d59e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d5a2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d5a4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d5a6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d5aa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d5ae:	f7ff ffc1 	bl	d534 <z_arm_prep_c>
    d5b2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    d5b4:	20000c08 	.word	0x20000c08

0000d5b8 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d5b8:	4b0c      	ldr	r3, [pc, #48]	; (d5ec <mem_manage_fault.isra.2+0x34>)
    d5ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d5be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5c0:	0792      	lsls	r2, r2, #30
    d5c2:	d508      	bpl.n	d5d6 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    d5c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d5c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5c8:	0612      	lsls	r2, r2, #24
    d5ca:	d504      	bpl.n	d5d6 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    d5cc:	b118      	cbz	r0, d5d6 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d5ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d5d4:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    d5d6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d5da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    d5dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d5de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5e0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d5e4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d5e6:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d5e8:	4770      	bx	lr
    d5ea:	bf00      	nop
    d5ec:	e000ed00 	.word	0xe000ed00

0000d5f0 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d5f0:	4b0d      	ldr	r3, [pc, #52]	; (d628 <bus_fault.isra.3+0x38>)
    d5f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d5f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d5f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5f8:	0592      	lsls	r2, r2, #22
    d5fa:	d508      	bpl.n	d60e <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d5fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d5fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d600:	0412      	lsls	r2, r2, #16
    d602:	d504      	bpl.n	d60e <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    d604:	b118      	cbz	r0, d60e <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d60c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    d60e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d614:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d616:	4a04      	ldr	r2, [pc, #16]	; (d628 <bus_fault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d618:	bf58      	it	pl
    d61a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d61c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d61e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d622:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d624:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d626:	4770      	bx	lr
    d628:	e000ed00 	.word	0xe000ed00

0000d62c <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d62c:	4b07      	ldr	r3, [pc, #28]	; (d64c <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    d62e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d63a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d63e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d640:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d644:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    d648:	629a      	str	r2, [r3, #40]	; 0x28
}
    d64a:	4770      	bx	lr
    d64c:	e000ed00 	.word	0xe000ed00

0000d650 <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    d650:	4b0d      	ldr	r3, [pc, #52]	; (d688 <secure_fault.isra.5+0x38>)
    d652:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    d654:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    d656:	695a      	ldr	r2, [r3, #20]
    d658:	07d0      	lsls	r0, r2, #31
    d65a:	d40f      	bmi.n	d67c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    d65c:	695a      	ldr	r2, [r3, #20]
    d65e:	0791      	lsls	r1, r2, #30
    d660:	d40c      	bmi.n	d67c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    d662:	695a      	ldr	r2, [r3, #20]
    d664:	0752      	lsls	r2, r2, #29
    d666:	d409      	bmi.n	d67c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    d668:	695a      	ldr	r2, [r3, #20]
    d66a:	0710      	lsls	r0, r2, #28
    d66c:	d406      	bmi.n	d67c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    d66e:	695a      	ldr	r2, [r3, #20]
    d670:	06d1      	lsls	r1, r2, #27
    d672:	d403      	bmi.n	d67c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    d674:	695a      	ldr	r2, [r3, #20]
    d676:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    d678:	bf58      	it	pl
    d67a:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    d67c:	695a      	ldr	r2, [r3, #20]
    d67e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d682:	615a      	str	r2, [r3, #20]
}
    d684:	4770      	bx	lr
    d686:	bf00      	nop
    d688:	e000edd0 	.word	0xe000edd0

0000d68c <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    d68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d68e:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d690:	4a31      	ldr	r2, [pc, #196]	; (d758 <z_arm_fault+0xcc>)
	bool recoverable;

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d692:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    d696:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d69a:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d69c:	d159      	bne.n	d752 <z_arm_fault+0xc6>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    d69e:	f011 0001 	ands.w	r0, r1, #1
    d6a2:	d00a      	beq.n	d6ba <z_arm_fault+0x2e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d6a4:	0648      	lsls	r0, r1, #25
    d6a6:	d411      	bmi.n	d6cc <z_arm_fault+0x40>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d6a8:	f011 0008 	ands.w	r0, r1, #8
    d6ac:	d009      	beq.n	d6c2 <z_arm_fault+0x36>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    d6ae:	f3ef 8489 	mrs	r4, PSP_NS
			esf = (z_arch_esf_t *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    d6b2:	6850      	ldr	r0, [r2, #4]
    d6b4:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    d6b8:	d108      	bne.n	d6cc <z_arm_fault+0x40>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    d6ba:	4621      	mov	r1, r4
    d6bc:	f002 ff7e 	bl	105bc <z_arm_fatal_error>
    d6c0:	e025      	b.n	d70e <z_arm_fault+0x82>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    d6c2:	f3ef 8488 	mrs	r4, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    d6c6:	6852      	ldr	r2, [r2, #4]
    d6c8:	0511      	lsls	r1, r2, #20
    d6ca:	d4f6      	bmi.n	d6ba <z_arm_fault+0x2e>
	*recoverable = false;
    d6cc:	2200      	movs	r2, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    d6d2:	3b03      	subs	r3, #3
	*recoverable = false;
    d6d4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    d6d8:	2b04      	cmp	r3, #4
    d6da:	d830      	bhi.n	d73e <z_arm_fault+0xb2>
    d6dc:	e8df f003 	tbb	[pc, r3]
    d6e0:	26353103 	.word	0x26353103
    d6e4:	2d          	.byte	0x2d
    d6e5:	00          	.byte	0x00
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d6e6:	4b1c      	ldr	r3, [pc, #112]	; (d758 <z_arm_fault+0xcc>)
    d6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d6ea:	0792      	lsls	r2, r2, #30
    d6ec:	d427      	bmi.n	d73e <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d6ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    d6f0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    d6f4:	d007      	beq.n	d706 <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    d6f6:	3328      	adds	r3, #40	; 0x28
    d6f8:	781b      	ldrb	r3, [r3, #0]
    d6fa:	b153      	cbz	r3, d712 <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    d6fc:	2001      	movs	r0, #1
    d6fe:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d702:	f7ff ff59 	bl	d5b8 <mem_manage_fault.isra.2>
	if (recoverable) {
    d706:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d70a:	2b00      	cmp	r3, #0
    d70c:	d0d5      	beq.n	d6ba <z_arm_fault+0x2e>
}
    d70e:	b003      	add	sp, #12
    d710:	bd30      	pop	{r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    d712:	4b12      	ldr	r3, [pc, #72]	; (d75c <z_arm_fault+0xd0>)
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	b12b      	cbz	r3, d724 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    d718:	2001      	movs	r0, #1
    d71a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d71e:	f7ff ff67 	bl	d5f0 <bus_fault.isra.3>
    d722:	e7f0      	b.n	d706 <z_arm_fault+0x7a>
		} else if (SCB_UFSR != 0) {
    d724:	4b0e      	ldr	r3, [pc, #56]	; (d760 <z_arm_fault+0xd4>)
    d726:	8818      	ldrh	r0, [r3, #0]
    d728:	b285      	uxth	r5, r0
    d72a:	b115      	cbz	r5, d732 <z_arm_fault+0xa6>
		reason = usage_fault(esf);
    d72c:	f7ff ff7e 	bl	d62c <usage_fault.isra.4>
    d730:	e7e9      	b.n	d706 <z_arm_fault+0x7a>
		} else if (SAU->SFSR != 0) {
    d732:	4b0c      	ldr	r3, [pc, #48]	; (d764 <z_arm_fault+0xd8>)
    d734:	6958      	ldr	r0, [r3, #20]
    d736:	2800      	cmp	r0, #0
    d738:	d0e5      	beq.n	d706 <z_arm_fault+0x7a>
		secure_fault(esf);
    d73a:	f7ff ff89 	bl	d650 <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    d73e:	2000      	movs	r0, #0
    d740:	e7e1      	b.n	d706 <z_arm_fault+0x7a>
		reason = mem_manage_fault(esf, 0, recoverable);
    d742:	f10d 0107 	add.w	r1, sp, #7
    d746:	2000      	movs	r0, #0
    d748:	e7db      	b.n	d702 <z_arm_fault+0x76>
		reason = bus_fault(esf, 0, recoverable);
    d74a:	f10d 0107 	add.w	r1, sp, #7
    d74e:	2000      	movs	r0, #0
    d750:	e7e5      	b.n	d71e <z_arm_fault+0x92>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    d752:	2000      	movs	r0, #0
    d754:	e7b1      	b.n	d6ba <z_arm_fault+0x2e>
    d756:	bf00      	nop
    d758:	e000ed00 	.word	0xe000ed00
    d75c:	e000ed29 	.word	0xe000ed29
    d760:	e000ed2a 	.word	0xe000ed2a
    d764:	e000edd0 	.word	0xe000edd0

0000d768 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d768:	4a02      	ldr	r2, [pc, #8]	; (d774 <z_arm_fault_init+0xc>)
    d76a:	6953      	ldr	r3, [r2, #20]
    d76c:	f043 0310 	orr.w	r3, r3, #16
    d770:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d772:	4770      	bx	lr
    d774:	e000ed00 	.word	0xe000ed00

0000d778 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    d778:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d77a:	2120      	movs	r1, #32
    d77c:	4803      	ldr	r0, [pc, #12]	; (d78c <z_arm_int_lib_init+0x14>)
    d77e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d780:	3301      	adds	r3, #1
    d782:	2b41      	cmp	r3, #65	; 0x41
    d784:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d788:	d1f9      	bne.n	d77e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d78a:	4770      	bx	lr
    d78c:	e000e100 	.word	0xe000e100

0000d790 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    d790:	b538      	push	{r3, r4, r5, lr}
    d792:	4605      	mov	r5, r0
	__asm__ volatile(
    d794:	f04f 0320 	mov.w	r3, #32
    d798:	f3ef 8411 	mrs	r4, BASEPRI
    d79c:	f383 8811 	msr	BASEPRI, r3
    d7a0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    d7a4:	f003 f903 	bl	109ae <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    d7a8:	4b0a      	ldr	r3, [pc, #40]	; (d7d4 <z_impl_k_thread_abort+0x44>)
    d7aa:	689b      	ldr	r3, [r3, #8]
    d7ac:	42ab      	cmp	r3, r5
    d7ae:	d10b      	bne.n	d7c8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    d7b0:	4b09      	ldr	r3, [pc, #36]	; (d7d8 <z_impl_k_thread_abort+0x48>)
    d7b2:	685a      	ldr	r2, [r3, #4]
    d7b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    d7b8:	b912      	cbnz	r2, d7c0 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    d7ba:	4620      	mov	r0, r4
    d7bc:	f7ff fe2a 	bl	d414 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d7c0:	685a      	ldr	r2, [r3, #4]
    d7c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d7c6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    d7c8:	4620      	mov	r0, r4
}
    d7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    d7ce:	f003 b867 	b.w	108a0 <z_reschedule_irqlock>
    d7d2:	bf00      	nop
    d7d4:	20000668 	.word	0x20000668
    d7d8:	e000ed00 	.word	0xe000ed00

0000d7dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d7dc:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    d7de:	4b0e      	ldr	r3, [pc, #56]	; (d818 <z_arm_configure_static_mpu_regions+0x3c>)
{
    d7e0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    d7e2:	9302      	str	r3, [sp, #8]
    d7e4:	4b0d      	ldr	r3, [pc, #52]	; (d81c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d7e6:	4c0e      	ldr	r4, [pc, #56]	; (d820 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    d7e8:	9303      	str	r3, [sp, #12]
    d7ea:	4b0e      	ldr	r3, [pc, #56]	; (d824 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    d7ec:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    d7ee:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    d7f0:	ab02      	add	r3, sp, #8
    d7f2:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d7f6:	4a0c      	ldr	r2, [pc, #48]	; (d828 <z_arm_configure_static_mpu_regions+0x4c>)
    d7f8:	4623      	mov	r3, r4
    d7fa:	2101      	movs	r1, #1
    d7fc:	f000 f902 	bl	da04 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    d800:	2300      	movs	r3, #0
    d802:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d804:	4b09      	ldr	r3, [pc, #36]	; (d82c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d806:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d808:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d80a:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    d80c:	9305      	str	r3, [sp, #20]
    d80e:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d810:	f000 f902 	bl	da18 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d814:	b008      	add	sp, #32
    d816:	bd10      	pop	{r4, pc}
    d818:	20000000 	.word	0x20000000
    d81c:	00000000 	.word	0x00000000
    d820:	20010000 	.word	0x20010000
    d824:	00010006 	.word	0x00010006
    d828:	20000000 	.word	0x20000000
    d82c:	20000000 	.word	0x20000000

0000d830 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    d830:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d832:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d834:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d836:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    d83a:	f004 021f 	and.w	r2, r4, #31
    d83e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d840:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d842:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d844:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d848:	4904      	ldr	r1, [pc, #16]	; (d85c <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d84a:	f043 0301 	orr.w	r3, r3, #1
    d84e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    d852:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    d854:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    d856:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d858:	bd10      	pop	{r4, pc}
    d85a:	bf00      	nop
    d85c:	e000ed90 	.word	0xe000ed90

0000d860 <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d864:	4680      	mov	r8, r0
    d866:	4689      	mov	r9, r1
    d868:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d86a:	2700      	movs	r7, #0
	MPU->RNR = index;
    d86c:	4d48      	ldr	r5, [pc, #288]	; (d990 <mpu_configure_regions.constprop.1+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    d86e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d870:	454f      	cmp	r7, r9
    d872:	da07      	bge.n	d884 <mpu_configure_regions.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    d874:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    d878:	685e      	ldr	r6, [r3, #4]
    d87a:	b3c6      	cbz	r6, d8ee <mpu_configure_regions.constprop.1+0x8e>
		&&
    d87c:	2e1f      	cmp	r6, #31
    d87e:	d805      	bhi.n	d88c <mpu_configure_regions.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d880:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d884:	4620      	mov	r0, r4
    d886:	b005      	add	sp, #20
    d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    d88c:	06f2      	lsls	r2, r6, #27
    d88e:	d1f7      	bne.n	d880 <mpu_configure_regions.constprop.1+0x20>
		((part->start &
    d890:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    d894:	f01a 0f1f 	tst.w	sl, #31
    d898:	d1f2      	bne.n	d880 <mpu_configure_regions.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d89a:	4650      	mov	r0, sl
    d89c:	f002 fb31 	bl	ff02 <arm_cmse_mpu_region_get>
    d8a0:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d8a2:	eb06 000a 	add.w	r0, r6, sl
    d8a6:	3801      	subs	r0, #1
    d8a8:	f002 fb2b 	bl	ff02 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d8ac:	4583      	cmp	fp, r0
    d8ae:	d1e7      	bne.n	d880 <mpu_configure_regions.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    d8b0:	f11b 0f16 	cmn.w	fp, #22
    d8b4:	d0e4      	beq.n	d880 <mpu_configure_regions.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    d8b6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d8b8:	455b      	cmp	r3, fp
    d8ba:	dbe1      	blt.n	d880 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    d8bc:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d8c0:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d8c2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    d8c6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d8ca:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d8cc:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d8d0:	e9d1 3200 	ldrd	r3, r2, [r1]
    d8d4:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    d8d6:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d8d8:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d8dc:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    d8e0:	d118      	bne.n	d914 <mpu_configure_regions.constprop.1+0xb4>
    d8e2:	4556      	cmp	r6, sl
    d8e4:	d105      	bne.n	d8f2 <mpu_configure_regions.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    d8e6:	fa5f f08b 	uxtb.w	r0, fp
    d8ea:	f002 fe7c 	bl	105e6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d8ee:	3701      	adds	r7, #1
    d8f0:	e7be      	b.n	d870 <mpu_configure_regions.constprop.1+0x10>
	MPU->RNR = index;
    d8f2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d8f6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    d8f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d8fc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d900:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d902:	60ea      	str	r2, [r5, #12]
			reg_index =
    d904:	b2e0      	uxtb	r0, r4
			reg_index =
    d906:	f002 fe6e 	bl	105e6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d90a:	f110 0f16 	cmn.w	r0, #22
    d90e:	d0b7      	beq.n	d880 <mpu_configure_regions.constprop.1+0x20>
			reg_index++;
    d910:	1c44      	adds	r4, r0, #1
    d912:	e7ec      	b.n	d8ee <mpu_configure_regions.constprop.1+0x8e>
	MPU->RNR = index;
    d914:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d918:	692a      	ldr	r2, [r5, #16]
    d91a:	3b01      	subs	r3, #1
    d91c:	f023 031f 	bic.w	r3, r3, #31
    d920:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d924:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    d926:	4556      	cmp	r6, sl
    d928:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d92a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    d92c:	d0eb      	beq.n	d906 <mpu_configure_regions.constprop.1+0xa6>
			reg_index =
    d92e:	f002 fe5a 	bl	105e6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d932:	f110 0f16 	cmn.w	r0, #22
    d936:	d0a3      	beq.n	d880 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    d938:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    d93c:	68ea      	ldr	r2, [r5, #12]
    d93e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    d942:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    d944:	f362 0304 	bfi	r3, r2, #0, #5
    d948:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d94c:	692b      	ldr	r3, [r5, #16]
    d94e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d952:	085b      	lsrs	r3, r3, #1
    d954:	f363 1247 	bfi	r2, r3, #5, #3
    d958:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    d95c:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    d960:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    d962:	e9d2 3200 	ldrd	r3, r2, [r2]
    d966:	4413      	add	r3, r2
    d968:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    d96a:	f023 031f 	bic.w	r3, r3, #31
    d96e:	441e      	add	r6, r3
    d970:	eba6 060a 	sub.w	r6, r6, sl
    d974:	b2c4      	uxtb	r4, r0
    d976:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    d97a:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    d97c:	9603      	str	r6, [sp, #12]
    d97e:	f63f af7f 	bhi.w	d880 <mpu_configure_regions.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    d982:	4620      	mov	r0, r4
    d984:	4669      	mov	r1, sp
    d986:	f7ff ff53 	bl	d830 <region_init>
			reg_index++;
    d98a:	3401      	adds	r4, #1
    d98c:	e7af      	b.n	d8ee <mpu_configure_regions.constprop.1+0x8e>
    d98e:	bf00      	nop
    d990:	e000ed90 	.word	0xe000ed90

0000d994 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d994:	2205      	movs	r2, #5
    d996:	4b03      	ldr	r3, [pc, #12]	; (d9a4 <arm_core_mpu_enable+0x10>)
    d998:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    d99a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d99e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d9a2:	4770      	bx	lr
    d9a4:	e000ed90 	.word	0xe000ed90

0000d9a8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d9a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d9ac:	2200      	movs	r2, #0
    d9ae:	4b01      	ldr	r3, [pc, #4]	; (d9b4 <arm_core_mpu_disable+0xc>)
    d9b0:	605a      	str	r2, [r3, #4]
}
    d9b2:	4770      	bx	lr
    d9b4:	e000ed90 	.word	0xe000ed90

0000d9b8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    d9b8:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d9ba:	4d0e      	ldr	r5, [pc, #56]	; (d9f4 <arm_mpu_init+0x3c>)
    d9bc:	682e      	ldr	r6, [r5, #0]
    d9be:	2e10      	cmp	r6, #16
    d9c0:	d815      	bhi.n	d9ee <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d9c2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    d9c4:	f7ff fff0 	bl	d9a8 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d9c8:	4b0b      	ldr	r3, [pc, #44]	; (d9f8 <arm_mpu_init+0x40>)
    d9ca:	4a0c      	ldr	r2, [pc, #48]	; (d9fc <arm_mpu_init+0x44>)
    d9cc:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d9ce:	42a6      	cmp	r6, r4
    d9d0:	d105      	bne.n	d9de <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    d9d2:	4b0b      	ldr	r3, [pc, #44]	; (da00 <arm_mpu_init+0x48>)
    d9d4:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    d9d6:	f7ff ffdd 	bl	d994 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    d9da:	2000      	movs	r0, #0
}
    d9dc:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d9de:	6869      	ldr	r1, [r5, #4]
    d9e0:	4620      	mov	r0, r4
    d9e2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    d9e6:	f7ff ff23 	bl	d830 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d9ea:	3401      	adds	r4, #1
    d9ec:	e7ef      	b.n	d9ce <arm_mpu_init+0x16>
		return -1;
    d9ee:	f04f 30ff 	mov.w	r0, #4294967295
    d9f2:	e7f3      	b.n	d9dc <arm_mpu_init+0x24>
    d9f4:	00010d2c 	.word	0x00010d2c
    d9f8:	e000ed90 	.word	0xe000ed90
    d9fc:	0044ffaa 	.word	0x0044ffaa
    da00:	200006c4 	.word	0x200006c4

0000da04 <arm_core_mpu_configure_static_mpu_regions>:
{
    da04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    da06:	4c03      	ldr	r4, [pc, #12]	; (da14 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    da08:	7822      	ldrb	r2, [r4, #0]
    da0a:	f7ff ff29 	bl	d860 <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    da0e:	7020      	strb	r0, [r4, #0]
}
    da10:	bd10      	pop	{r4, pc}
    da12:	bf00      	nop
    da14:	200006c4 	.word	0x200006c4

0000da18 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    da18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da1c:	4689      	mov	r9, r1
    da1e:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    da20:	2600      	movs	r6, #0
    da22:	f8df 8090 	ldr.w	r8, [pc, #144]	; dab4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    da26:	f8df a090 	ldr.w	sl, [pc, #144]	; dab8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    da2a:	4c21      	ldr	r4, [pc, #132]	; (dab0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    da2c:	454e      	cmp	r6, r9
    da2e:	da19      	bge.n	da64 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    da30:	f8d7 b004 	ldr.w	fp, [r7, #4]
    da34:	f1bb 0f00 	cmp.w	fp, #0
    da38:	d036      	beq.n	daa8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    da3a:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    da3c:	4618      	mov	r0, r3
    da3e:	9301      	str	r3, [sp, #4]
    da40:	f002 fa5f 	bl	ff02 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    da44:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    da46:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    da48:	eb0b 0003 	add.w	r0, fp, r3
    da4c:	3801      	subs	r0, #1
    da4e:	f002 fa58 	bl	ff02 <arm_cmse_mpu_region_get>
    da52:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    da54:	4285      	cmp	r5, r0
    da56:	fb03 f306 	mul.w	r3, r3, r6
    da5a:	d006      	beq.n	da6a <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    da5c:	f06f 0215 	mvn.w	r2, #21
    da60:	f848 2003 	str.w	r2, [r8, r3]
}
    da64:	b003      	add	sp, #12
    da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    da6a:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    da6e:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    da72:	d0f7      	beq.n	da64 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    da74:	f89a 2000 	ldrb.w	r2, [sl]
    da78:	42aa      	cmp	r2, r5
    da7a:	ddf3      	ble.n	da64 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    da7c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    da7e:	4443      	add	r3, r8
	MPU->RNR = index;
    da80:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    da82:	68e0      	ldr	r0, [r4, #12]
    da84:	7b19      	ldrb	r1, [r3, #12]
    da86:	f360 0104 	bfi	r1, r0, #0, #5
    da8a:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    da8c:	6921      	ldr	r1, [r4, #16]
    da8e:	7b18      	ldrb	r0, [r3, #12]
    da90:	0849      	lsrs	r1, r1, #1
    da92:	f361 1047 	bfi	r0, r1, #5, #3
    da96:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    da98:	68e2      	ldr	r2, [r4, #12]
    da9a:	f022 021f 	bic.w	r2, r2, #31
    da9e:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    daa0:	6922      	ldr	r2, [r4, #16]
    daa2:	f022 021f 	bic.w	r2, r2, #31
    daa6:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    daa8:	3601      	adds	r6, #1
    daaa:	370c      	adds	r7, #12
    daac:	e7be      	b.n	da2c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    daae:	bf00      	nop
    dab0:	e000ed90 	.word	0xe000ed90
    dab4:	20000548 	.word	0x20000548
    dab8:	200006c4 	.word	0x200006c4

0000dabc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    dabc:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    dabe:	4b0c      	ldr	r3, [pc, #48]	; (daf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    dac0:	460e      	mov	r6, r1
    dac2:	781c      	ldrb	r4, [r3, #0]
    dac4:	4605      	mov	r5, r0
    dac6:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    dac8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    daca:	4a0a      	ldr	r2, [pc, #40]	; (daf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    dacc:	2b0f      	cmp	r3, #15
    dace:	dd0b      	ble.n	dae8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    dad0:	4b09      	ldr	r3, [pc, #36]	; (daf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    dad2:	1d19      	adds	r1, r3, #4
    dad4:	6818      	ldr	r0, [r3, #0]
    dad6:	f7ff feab 	bl	d830 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    dada:	4622      	mov	r2, r4
    dadc:	4631      	mov	r1, r6
    dade:	4628      	mov	r0, r5
}
    dae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dae4:	f7ff bebc 	b.w	d860 <mpu_configure_regions.constprop.1>
    dae8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    daea:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    daec:	3301      	adds	r3, #1
    daee:	e7ed      	b.n	dacc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    daf0:	200006c4 	.word	0x200006c4
    daf4:	e000ed90 	.word	0xe000ed90
    daf8:	20000548 	.word	0x20000548

0000dafc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    dafc:	4b01      	ldr	r3, [pc, #4]	; (db04 <__stdout_hook_install+0x8>)
    dafe:	6018      	str	r0, [r3, #0]
}
    db00:	4770      	bx	lr
    db02:	bf00      	nop
    db04:	20001430 	.word	0x20001430

0000db08 <pca20035_board_init>:

	return 0;
}

static int pca20035_board_init(struct device *dev)
{
    db08:	b508      	push	{r3, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    db0a:	4812      	ldr	r0, [pc, #72]	; (db54 <pca20035_board_init+0x4c>)
    db0c:	f7ff fb58 	bl	d1c0 <adp536x_init>
	if (err) {
    db10:	b9f0      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_buck_1v8_set();
    db12:	f002 fd11 	bl	10538 <adp536x_buck_1v8_set>
	if (err) {
    db16:	b9d8      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_buckbst_3v3_set();
    db18:	f002 fd1a 	bl	10550 <adp536x_buckbst_3v3_set>
	if (err) {
    db1c:	b9c0      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_buckbst_enable(true);
    db1e:	2001      	movs	r0, #1
    db20:	f002 fd1b 	bl	1055a <adp536x_buckbst_enable>
	if (err) {
    db24:	b9a0      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_buck_discharge_set(true);
    db26:	2001      	movs	r0, #1
    db28:	f002 fd0b 	bl	10542 <adp536x_buck_discharge_set>
	if (err) {
    db2c:	b980      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    db2e:	2007      	movs	r0, #7
    db30:	f002 fcf0 	bl	10514 <adp536x_vbus_current_set>
	if (err) {
    db34:	b960      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    db36:	201f      	movs	r0, #31
    db38:	f002 fce6 	bl	10508 <adp536x_charger_current_set>
	if (err) {
    db3c:	b940      	cbnz	r0, db50 <pca20035_board_init+0x48>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    db3e:	2007      	movs	r0, #7
    db40:	f002 fcf3 	bl	1052a <adp536x_oc_chg_current_set>
	if (err) {
    db44:	b920      	cbnz	r0, db50 <pca20035_board_init+0x48>
		LOG_ERR("power_mgmt_init failed with error: %d", err);
		return err;
	}

	return 0;
}
    db46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = adp536x_charging_enable(true);
    db4a:	2001      	movs	r0, #1
    db4c:	f002 bce8 	b.w	10520 <adp536x_charging_enable>
}
    db50:	bd08      	pop	{r3, pc}
    db52:	bf00      	nop
    db54:	000113ff 	.word	0x000113ff

0000db58 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    db58:	b510      	push	{r4, lr}
    db5a:	4604      	mov	r4, r0
    db5c:	2200      	movs	r2, #0
    db5e:	2101      	movs	r1, #1
    db60:	200a      	movs	r0, #10
    db62:	f7ff fc81 	bl	d468 <z_arm_irq_priority_set>
	return dev->config->config_info;
    db66:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    db68:	4a06      	ldr	r2, [pc, #24]	; (db84 <twim_2_init+0x2c>)
	return dev->config->config_info;
    db6a:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    db6c:	4623      	mov	r3, r4
    db6e:	f100 0108 	add.w	r1, r0, #8
    db72:	f000 fa5b 	bl	e02c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    db76:	4b04      	ldr	r3, [pc, #16]	; (db88 <twim_2_init+0x30>)
    db78:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
    db7a:	bf14      	ite	ne
    db7c:	f06f 000f 	mvnne.w	r0, #15
    db80:	2000      	moveq	r0, #0
    db82:	bd10      	pop	{r4, pc}
    db84:	0000db8d 	.word	0x0000db8d
    db88:	0bad0000 	.word	0x0bad0000

0000db8c <event_handler>:
	switch (p_event->type) {
    db8c:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    db8e:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    db90:	2a01      	cmp	r2, #1
    db92:	d00a      	beq.n	dbaa <event_handler+0x1e>
    db94:	d303      	bcc.n	db9e <event_handler+0x12>
    db96:	2a02      	cmp	r2, #2
    db98:	d009      	beq.n	dbae <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    db9a:	4a06      	ldr	r2, [pc, #24]	; (dbb4 <event_handler+0x28>)
    db9c:	e000      	b.n	dba0 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    db9e:	4a06      	ldr	r2, [pc, #24]	; (dbb8 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    dba0:	621a      	str	r2, [r3, #32]
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    dba2:	f103 0010 	add.w	r0, r3, #16
    dba6:	f001 b8ff 	b.w	eda8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    dbaa:	4a04      	ldr	r2, [pc, #16]	; (dbbc <event_handler+0x30>)
    dbac:	e7f8      	b.n	dba0 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    dbae:	4a04      	ldr	r2, [pc, #16]	; (dbc0 <event_handler+0x34>)
    dbb0:	e7f6      	b.n	dba0 <event_handler+0x14>
    dbb2:	bf00      	nop
    dbb4:	0bad0001 	.word	0x0bad0001
    dbb8:	0bad0000 	.word	0x0bad0000
    dbbc:	0bae0001 	.word	0x0bae0001
    dbc0:	0bae0002 	.word	0x0bae0002

0000dbc4 <i2c_nrfx_twim_transfer>:
{
    dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbc8:	4604      	mov	r4, r0
    dbca:	b087      	sub	sp, #28
    dbcc:	460d      	mov	r5, r1
    dbce:	4691      	mov	r9, r2
    dbd0:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    dbd2:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
    dbd4:	f04f 31ff 	mov.w	r1, #4294967295
    dbd8:	f001 f90c 	bl	edf4 <z_impl_k_sem_take>
	return dev->config->config_info;
    dbdc:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    dbde:	2700      	movs	r7, #0
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    dbe0:	6898      	ldr	r0, [r3, #8]
    dbe2:	f000 fa67 	bl	e0b4 <nrfx_twim_enable>
		if (res != NRFX_SUCCESS) {
    dbe6:	f8df 8098 	ldr.w	r8, [pc, #152]	; dc80 <i2c_nrfx_twim_transfer+0xbc>
    dbea:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    dbec:	454f      	cmp	r7, r9
    dbee:	f8d3 b008 	ldr.w	fp, [r3, #8]
    dbf2:	d301      	bcc.n	dbf8 <i2c_nrfx_twim_transfer+0x34>
	int ret = 0;
    dbf4:	2500      	movs	r5, #0
    dbf6:	e022      	b.n	dc3e <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    dbf8:	7a2e      	ldrb	r6, [r5, #8]
    dbfa:	f016 0108 	ands.w	r1, r6, #8
    dbfe:	d136      	bne.n	dc6e <i2c_nrfx_twim_transfer+0xaa>
		nrfx_twim_xfer_desc_t cur_xfer = {
    dc00:	2212      	movs	r2, #18
    dc02:	f10d 0006 	add.w	r0, sp, #6
    dc06:	f002 fd61 	bl	106cc <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
    dc0a:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
    dc0e:	f88d 3004 	strb.w	r3, [sp, #4]
    dc12:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    dc14:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
    dc18:	9302      	str	r3, [sp, #8]
    dc1a:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    dc1c:	bf0c      	ite	eq
    dc1e:	2220      	moveq	r2, #32
    dc20:	2200      	movne	r2, #0
    dc22:	a901      	add	r1, sp, #4
    dc24:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
    dc26:	f88d a005 	strb.w	sl, [sp, #5]
    dc2a:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    dc2c:	f000 fa6e 	bl	e10c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    dc30:	4540      	cmp	r0, r8
    dc32:	d00f      	beq.n	dc54 <i2c_nrfx_twim_transfer+0x90>
			if (res == NRFX_ERROR_BUSY) {
    dc34:	4b11      	ldr	r3, [pc, #68]	; (dc7c <i2c_nrfx_twim_transfer+0xb8>)
    dc36:	4298      	cmp	r0, r3
    dc38:	d01c      	beq.n	dc74 <i2c_nrfx_twim_transfer+0xb0>
				ret = -EIO;
    dc3a:	f06f 0504 	mvn.w	r5, #4
	return dev->config->config_info;
    dc3e:	6823      	ldr	r3, [r4, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    dc40:	6898      	ldr	r0, [r3, #8]
    dc42:	f000 fa47 	bl	e0d4 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    dc46:	68a0      	ldr	r0, [r4, #8]
	z_impl_k_sem_give(sem);
    dc48:	f001 f8ae 	bl	eda8 <z_impl_k_sem_give>
}
    dc4c:	4628      	mov	r0, r5
    dc4e:	b007      	add	sp, #28
    dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    dc54:	68a0      	ldr	r0, [r4, #8]
    dc56:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    dc58:	f04f 31ff 	mov.w	r1, #4294967295
    dc5c:	f001 f8ca 	bl	edf4 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    dc60:	68a3      	ldr	r3, [r4, #8]
    dc62:	350c      	adds	r5, #12
    dc64:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    dc66:	4543      	cmp	r3, r8
    dc68:	d1e7      	bne.n	dc3a <i2c_nrfx_twim_transfer+0x76>
	for (size_t i = 0; i < num_msgs; i++) {
    dc6a:	3701      	adds	r7, #1
    dc6c:	e7bd      	b.n	dbea <i2c_nrfx_twim_transfer+0x26>
			ret = -ENOTSUP;
    dc6e:	f06f 0522 	mvn.w	r5, #34	; 0x22
    dc72:	e7e4      	b.n	dc3e <i2c_nrfx_twim_transfer+0x7a>
				ret = -EBUSY;
    dc74:	f06f 050f 	mvn.w	r5, #15
    dc78:	e7e1      	b.n	dc3e <i2c_nrfx_twim_transfer+0x7a>
    dc7a:	bf00      	nop
    dc7c:	0bad000b 	.word	0x0bad000b
    dc80:	0bad0000 	.word	0x0bad0000

0000dc84 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    dc84:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    dc86:	794b      	ldrb	r3, [r1, #5]
    dc88:	2b01      	cmp	r3, #1
    dc8a:	d029      	beq.n	dce0 <uarte_nrfx_configure+0x5c>
    dc8c:	2b03      	cmp	r3, #3
    dc8e:	d124      	bne.n	dcda <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    dc90:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    dc92:	798b      	ldrb	r3, [r1, #6]
    dc94:	2b03      	cmp	r3, #3
    dc96:	d120      	bne.n	dcda <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    dc98:	79cd      	ldrb	r5, [r1, #7]
    dc9a:	b12d      	cbz	r5, dca8 <uarte_nrfx_configure+0x24>
    dc9c:	2d01      	cmp	r5, #1
    dc9e:	d11c      	bne.n	dcda <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    dca0:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    dca2:	689b      	ldr	r3, [r3, #8]
    dca4:	791b      	ldrb	r3, [r3, #4]
    dca6:	b1c3      	cbz	r3, dcda <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    dca8:	790a      	ldrb	r2, [r1, #4]
    dcaa:	b112      	cbz	r2, dcb2 <uarte_nrfx_configure+0x2e>
    dcac:	2a02      	cmp	r2, #2
    dcae:	d114      	bne.n	dcda <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    dcb0:	220e      	movs	r2, #14
	switch (baudrate) {
    dcb2:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    dcb6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    dcb8:	689b      	ldr	r3, [r3, #8]
    dcba:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
    dcbc:	680b      	ldr	r3, [r1, #0]
    dcbe:	42bb      	cmp	r3, r7
    dcc0:	d074      	beq.n	ddac <uarte_nrfx_configure+0x128>
    dcc2:	d829      	bhi.n	dd18 <uarte_nrfx_configure+0x94>
    dcc4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    dcc8:	d06a      	beq.n	dda0 <uarte_nrfx_configure+0x11c>
    dcca:	d814      	bhi.n	dcf6 <uarte_nrfx_configure+0x72>
    dccc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    dcd0:	d04f      	beq.n	dd72 <uarte_nrfx_configure+0xee>
    dcd2:	d807      	bhi.n	dce4 <uarte_nrfx_configure+0x60>
    dcd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    dcd8:	d07d      	beq.n	ddd6 <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
    dcda:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dcde:	e05b      	b.n	dd98 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
    dce0:	2600      	movs	r6, #0
    dce2:	e7d6      	b.n	dc92 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    dce4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    dce8:	d057      	beq.n	dd9a <uarte_nrfx_configure+0x116>
    dcea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    dcee:	d1f4      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    dcf0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    dcf4:	e03f      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dcf6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    dcfa:	d053      	beq.n	dda4 <uarte_nrfx_configure+0x120>
    dcfc:	d804      	bhi.n	dd08 <uarte_nrfx_configure+0x84>
    dcfe:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    dd02:	d1ea      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    dd04:	4b35      	ldr	r3, [pc, #212]	; (dddc <uarte_nrfx_configure+0x158>)
    dd06:	e036      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dd08:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    dd0c:	d04c      	beq.n	dda8 <uarte_nrfx_configure+0x124>
    dd0e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    dd12:	d1e2      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    dd14:	4b32      	ldr	r3, [pc, #200]	; (dde0 <uarte_nrfx_configure+0x15c>)
    dd16:	e02e      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dd18:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    dd1c:	d04f      	beq.n	ddbe <uarte_nrfx_configure+0x13a>
    dd1e:	d812      	bhi.n	dd46 <uarte_nrfx_configure+0xc2>
    dd20:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    dd24:	42bb      	cmp	r3, r7
    dd26:	d044      	beq.n	ddb2 <uarte_nrfx_configure+0x12e>
    dd28:	d805      	bhi.n	dd36 <uarte_nrfx_configure+0xb2>
    dd2a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    dd2e:	d1d4      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    dd30:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    dd34:	e01f      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dd36:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    dd3a:	d03d      	beq.n	ddb8 <uarte_nrfx_configure+0x134>
    dd3c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    dd40:	d1cb      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    dd42:	4b28      	ldr	r3, [pc, #160]	; (dde4 <uarte_nrfx_configure+0x160>)
    dd44:	e017      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dd46:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    dd4a:	d03e      	beq.n	ddca <uarte_nrfx_configure+0x146>
    dd4c:	d808      	bhi.n	dd60 <uarte_nrfx_configure+0xdc>
    dd4e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    dd52:	d037      	beq.n	ddc4 <uarte_nrfx_configure+0x140>
    dd54:	4f24      	ldr	r7, [pc, #144]	; (dde8 <uarte_nrfx_configure+0x164>)
    dd56:	42bb      	cmp	r3, r7
    dd58:	d1bf      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    dd5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    dd5e:	e00a      	b.n	dd76 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    dd60:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    dd64:	d034      	beq.n	ddd0 <uarte_nrfx_configure+0x14c>
    dd66:	4f21      	ldr	r7, [pc, #132]	; (ddec <uarte_nrfx_configure+0x168>)
    dd68:	42bb      	cmp	r3, r7
    dd6a:	d1b6      	bne.n	dcda <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dd6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dd70:	e001      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
    dd72:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    dd76:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    dd78:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    dd7c:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    dd80:	b12e      	cbz	r6, dd8e <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    dd82:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    dd86:	f043 0310 	orr.w	r3, r3, #16
    dd8a:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    dd8e:	6883      	ldr	r3, [r0, #8]
    dd90:	c903      	ldmia	r1, {r0, r1}
    dd92:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    dd96:	2000      	movs	r0, #0
}
    dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    dd9a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    dd9e:	e7ea      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    dda0:	4b13      	ldr	r3, [pc, #76]	; (ddf0 <uarte_nrfx_configure+0x16c>)
    dda2:	e7e8      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    dda4:	4b13      	ldr	r3, [pc, #76]	; (ddf4 <uarte_nrfx_configure+0x170>)
    dda6:	e7e6      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    dda8:	4b13      	ldr	r3, [pc, #76]	; (ddf8 <uarte_nrfx_configure+0x174>)
    ddaa:	e7e4      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ddac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ddb0:	e7e1      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    ddb2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    ddb6:	e7de      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    ddb8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    ddbc:	e7db      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    ddbe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ddc2:	e7d8      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    ddc4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    ddc8:	e7d5      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    ddca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    ddce:	e7d2      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    ddd0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    ddd4:	e7cf      	b.n	dd76 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
    ddd6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    ddda:	e7cc      	b.n	dd76 <uarte_nrfx_configure+0xf2>
    dddc:	00275000 	.word	0x00275000
    dde0:	0075c000 	.word	0x0075c000
    dde4:	013a9000 	.word	0x013a9000
    dde8:	0003d090 	.word	0x0003d090
    ddec:	000f4240 	.word	0x000f4240
    ddf0:	0013b000 	.word	0x0013b000
    ddf4:	003af000 	.word	0x003af000
    ddf8:	004ea000 	.word	0x004ea000

0000ddfc <uarte_0_init>:
	return dev->config->config_info;
    ddfc:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    ddfe:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    de00:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    de02:	4b18      	ldr	r3, [pc, #96]	; (de64 <uarte_0_init+0x68>)
    de04:	6814      	ldr	r4, [r2, #0]
    de06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    de0a:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    de0c:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    de0e:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    de10:	2612      	movs	r6, #18
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    de12:	2200      	movs	r2, #0
    de14:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
    de18:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    de1c:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    de20:	2613      	movs	r6, #19
    de22:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    de26:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    de2a:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    de2c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    de30:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    p_reg->PSEL.RTS = pselrts;
    de34:	2314      	movs	r3, #20
    de36:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    de3a:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    de3c:	4629      	mov	r1, r5
    de3e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    de42:	f7ff ff1f 	bl	dc84 <uarte_nrfx_configure>
	if (err) {
    de46:	b958      	cbnz	r0, de60 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    de48:	2308      	movs	r3, #8
    de4a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    de4e:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    de50:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de52:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    de56:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    de5a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de5e:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    de60:	bd70      	pop	{r4, r5, r6, pc}
    de62:	bf00      	nop
    de64:	50842500 	.word	0x50842500

0000de68 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    de68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    de6a:	b1da      	cbz	r2, dea4 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    de6c:	2300      	movs	r3, #0
	bool id_found = false;
    de6e:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    de70:	4e0e      	ldr	r6, [pc, #56]	; (deac <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    de72:	4f0f      	ldr	r7, [pc, #60]	; (deb0 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    de74:	42b3      	cmp	r3, r6
    de76:	d306      	bcc.n	de86 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    de78:	2c00      	cmp	r4, #0
    de7a:	bf14      	ite	ne
    de7c:	f06f 0008 	mvnne.w	r0, #8
    de80:	f06f 0001 	mvneq.w	r0, #1
    de84:	e009      	b.n	de9a <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    de86:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
    de8a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    de8e:	4560      	cmp	r0, ip
    de90:	d106      	bne.n	dea0 <abi_getter+0x38>
			if (index-- == 0) {
    de92:	1e4c      	subs	r4, r1, #1
    de94:	b911      	cbnz	r1, de9c <abi_getter+0x34>
				return 0;
    de96:	4608      	mov	r0, r1
				*abi = ext_abi;
    de98:	6015      	str	r5, [r2, #0]
}
    de9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    de9c:	4621      	mov	r1, r4
			id_found = true;
    de9e:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    dea0:	3301      	adds	r3, #1
    dea2:	e7e7      	b.n	de74 <abi_getter+0xc>
		return -EFAULT;
    dea4:	f06f 000d 	mvn.w	r0, #13
    dea8:	e7f7      	b.n	de9a <abi_getter+0x32>
    deaa:	bf00      	nop
    deac:	00000000 	.word	0x00000000
    deb0:	0001144c 	.word	0x0001144c

0000deb4 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    deb4:	4a52      	ldr	r2, [pc, #328]	; (e000 <SystemInit+0x14c>)
    deb6:	6813      	ldr	r3, [r2, #0]
    deb8:	f043 0302 	orr.w	r3, r3, #2
    debc:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    debe:	2200      	movs	r2, #0
    dec0:	00d3      	lsls	r3, r2, #3
    dec2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    dec6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    deca:	3101      	adds	r1, #1
    decc:	d008      	beq.n	dee0 <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    dece:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    ded2:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ded4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    ded8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    dedc:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    dede:	d1ef      	bne.n	dec0 <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    dee0:	4a48      	ldr	r2, [pc, #288]	; (e004 <SystemInit+0x150>)
    dee2:	69d3      	ldr	r3, [r2, #28]
    dee4:	f013 0301 	ands.w	r3, r3, #1
    dee8:	d03b      	beq.n	df62 <SystemInit+0xae>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    deea:	4b47      	ldr	r3, [pc, #284]	; (e008 <SystemInit+0x154>)
    deec:	4619      	mov	r1, r3
    deee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    def2:	2a01      	cmp	r2, #1
    def4:	d1fb      	bne.n	deee <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    def6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    defa:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    defe:	2b01      	cmp	r3, #1
    df00:	d1fb      	bne.n	defa <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    df02:	4b40      	ldr	r3, [pc, #256]	; (e004 <SystemInit+0x150>)
    df04:	69da      	ldr	r2, [r3, #28]
    df06:	07d2      	lsls	r2, r2, #31
    df08:	d508      	bpl.n	df1c <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    df0a:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    df0c:	493e      	ldr	r1, [pc, #248]	; (e008 <SystemInit+0x154>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    df0e:	f022 0201 	bic.w	r2, r2, #1
    df12:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    df14:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    df18:	2a01      	cmp	r2, #1
    df1a:	d1fb      	bne.n	df14 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    df1c:	6a1a      	ldr	r2, [r3, #32]
    df1e:	3201      	adds	r2, #1
    df20:	d10a      	bne.n	df38 <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    df22:	6a1a      	ldr	r2, [r3, #32]
    df24:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    df28:	f042 0220 	orr.w	r2, r2, #32
    df2c:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    df2e:	4a36      	ldr	r2, [pc, #216]	; (e008 <SystemInit+0x154>)
    df30:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    df34:	2b01      	cmp	r3, #1
    df36:	d1fb      	bne.n	df30 <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    df38:	2200      	movs	r2, #0
    df3a:	4b33      	ldr	r3, [pc, #204]	; (e008 <SystemInit+0x154>)
    df3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    df40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    df44:	2a01      	cmp	r2, #1
    df46:	d1fb      	bne.n	df40 <SystemInit+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
    df48:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    df4c:	492f      	ldr	r1, [pc, #188]	; (e00c <SystemInit+0x158>)
    df4e:	4b30      	ldr	r3, [pc, #192]	; (e010 <SystemInit+0x15c>)
    df50:	68ca      	ldr	r2, [r1, #12]
    df52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    df56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    df58:	60cb      	str	r3, [r1, #12]
    df5a:	f3bf 8f4f 	dsb	sy
    __NOP();
    df5e:	bf00      	nop
    df60:	e7fd      	b.n	df5e <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    df62:	6a12      	ldr	r2, [r2, #32]
    df64:	3201      	adds	r2, #1
    df66:	d0c0      	beq.n	deea <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    df68:	4a2a      	ldr	r2, [pc, #168]	; (e014 <SystemInit+0x160>)
    df6a:	6811      	ldr	r1, [r2, #0]
    df6c:	2909      	cmp	r1, #9
    df6e:	d10a      	bne.n	df86 <SystemInit+0xd2>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    df70:	4929      	ldr	r1, [pc, #164]	; (e018 <SystemInit+0x164>)
    df72:	6809      	ldr	r1, [r1, #0]
    df74:	3901      	subs	r1, #1
    df76:	2901      	cmp	r1, #1
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    df78:	bf9e      	ittt	ls
    df7a:	f04f 2150 	movls.w	r1, #1342197760	; 0x50005000
    df7e:	f8c1 3114 	strls.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    df82:	f8c1 3118 	strls.w	r3, [r1, #280]	; 0x118
    }

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    df86:	6813      	ldr	r3, [r2, #0]
    df88:	2b09      	cmp	r3, #9
    df8a:	d109      	bne.n	dfa0 <SystemInit+0xec>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    df8c:	4b22      	ldr	r3, [pc, #136]	; (e018 <SystemInit+0x164>)
    df8e:	681b      	ldr	r3, [r3, #0]
    df90:	2b01      	cmp	r3, #1
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    df92:	bf01      	itttt	eq
    df94:	4a21      	ldreq	r2, [pc, #132]	; (e01c <SystemInit+0x168>)
    df96:	6013      	streq	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    df98:	f6a2 2238 	subweq	r2, r2, #2616	; 0xa38
    df9c:	f8c2 3578 	streq.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    dfa0:	4b1c      	ldr	r3, [pc, #112]	; (e014 <SystemInit+0x160>)
    dfa2:	681a      	ldr	r2, [r3, #0]
    dfa4:	2a09      	cmp	r2, #9
    dfa6:	d10b      	bne.n	dfc0 <SystemInit+0x10c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    dfa8:	4a1b      	ldr	r2, [pc, #108]	; (e018 <SystemInit+0x164>)
    dfaa:	6812      	ldr	r2, [r2, #0]
    dfac:	2a02      	cmp	r2, #2
    dfae:	d107      	bne.n	dfc0 <SystemInit+0x10c>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    dfb0:	2100      	movs	r1, #0
    dfb2:	4a1a      	ldr	r2, [pc, #104]	; (e01c <SystemInit+0x168>)
    dfb4:	6011      	str	r1, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    dfb6:	2101      	movs	r1, #1
    dfb8:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    dfbc:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    dfc0:	681b      	ldr	r3, [r3, #0]
    dfc2:	2b09      	cmp	r3, #9
    dfc4:	d106      	bne.n	dfd4 <SystemInit+0x120>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    dfc6:	4b14      	ldr	r3, [pc, #80]	; (e018 <SystemInit+0x164>)
    dfc8:	681b      	ldr	r3, [r3, #0]
    dfca:	2b02      	cmp	r3, #2
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    dfcc:	bf02      	ittt	eq
    dfce:	220c      	moveq	r2, #12
    dfd0:	4b13      	ldreq	r3, [pc, #76]	; (e020 <SystemInit+0x16c>)
    dfd2:	601a      	streq	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
    dfd4:	4b0d      	ldr	r3, [pc, #52]	; (e00c <SystemInit+0x158>)
    dfd6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    dfda:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    dfde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    dfe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dfe6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    dfea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    dfee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dff2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    dff6:	4b0b      	ldr	r3, [pc, #44]	; (e024 <SystemInit+0x170>)
    dff8:	4a0b      	ldr	r2, [pc, #44]	; (e028 <SystemInit+0x174>)
    dffa:	601a      	str	r2, [r3, #0]
}
    dffc:	4770      	bx	lr
    dffe:	bf00      	nop
    e000:	e000edd0 	.word	0xe000edd0
    e004:	00ff8000 	.word	0x00ff8000
    e008:	50039000 	.word	0x50039000
    e00c:	e000ed00 	.word	0xe000ed00
    e010:	05fa0004 	.word	0x05fa0004
    e014:	00ff0130 	.word	0x00ff0130
    e018:	00ff0134 	.word	0x00ff0134
    e01c:	50004a38 	.word	0x50004a38
    e020:	5003aee4 	.word	0x5003aee4
    e024:	20001468 	.word	0x20001468
    e028:	03d09000 	.word	0x03d09000

0000e02c <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e02c:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    e032:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e034:	4d1b      	ldr	r5, [pc, #108]	; (e0a4 <nrfx_twim_init+0x78>)
    e036:	fb0c fc06 	mul.w	ip, ip, r6
    e03a:	eb05 040c 	add.w	r4, r5, ip
    e03e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    e042:	bb67      	cbnz	r7, e09e <nrfx_twim_init+0x72>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    e044:	f845 200c 	str.w	r2, [r5, ip]
    e048:	f240 6c0c 	movw	ip, #1548	; 0x60c
    p_cb->p_context       = p_context;
    e04c:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e04e:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    e050:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    e052:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    e056:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e05a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    e05e:	680c      	ldr	r4, [r1, #0]
    e060:	4f11      	ldr	r7, [pc, #68]	; (e0a8 <nrfx_twim_init+0x7c>)
    e062:	f104 0380 	add.w	r3, r4, #128	; 0x80
    e066:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    e06a:	684b      	ldr	r3, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e06c:	6800      	ldr	r0, [r0, #0]
    e06e:	f103 0e80 	add.w	lr, r3, #128	; 0x80
    e072:	f847 c02e 	str.w	ip, [r7, lr, lsl #2]

__STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                       uint32_t scl_pin,
                                       uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    e076:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    e07a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    e07e:	688b      	ldr	r3, [r1, #8]
}

__STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                            nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    e080:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    e084:	b11a      	cbz	r2, e08e <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    e086:	f340 3007 	sbfx	r0, r0, #12, #8
    e08a:	f7ff f9dd 	bl	d448 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e08e:	2334      	movs	r3, #52	; 0x34
    e090:	fb03 5506 	mla	r5, r3, r6, r5
    e094:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    e096:	4805      	ldr	r0, [pc, #20]	; (e0ac <nrfx_twim_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e098:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    e09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    e09e:	4804      	ldr	r0, [pc, #16]	; (e0b0 <nrfx_twim_init+0x84>)
    e0a0:	e7fc      	b.n	e09c <nrfx_twim_init+0x70>
    e0a2:	bf00      	nop
    e0a4:	2000055c 	.word	0x2000055c
    e0a8:	50842500 	.word	0x50842500
    e0ac:	0bad0000 	.word	0x0bad0000
    e0b0:	0bad0005 	.word	0x0bad0005

0000e0b4 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    e0b4:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    e0b6:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e0b8:	7903      	ldrb	r3, [r0, #4]
    e0ba:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    e0be:	2134      	movs	r1, #52	; 0x34
    e0c0:	4a03      	ldr	r2, [pc, #12]	; (e0d0 <nrfx_twim_enable+0x1c>)
    e0c2:	fb01 2303 	mla	r3, r1, r3, r2
    e0c6:	2202      	movs	r2, #2
    e0c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    e0cc:	4770      	bx	lr
    e0ce:	bf00      	nop
    e0d0:	2000055c 	.word	0x2000055c

0000e0d4 <nrfx_twim_disable>:
void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e0d4:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e0d6:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
    e0d8:	2034      	movs	r0, #52	; 0x34
    e0da:	490a      	ldr	r1, [pc, #40]	; (e104 <nrfx_twim_disable+0x30>)
    e0dc:	fb00 1303 	mla	r3, r0, r3, r1
    e0e0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    e0e2:	4909      	ldr	r1, [pc, #36]	; (e108 <nrfx_twim_disable+0x34>)
    e0e4:	6098      	str	r0, [r3, #8]
    e0e6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    e0ea:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    e0ee:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    e0f2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    e0f6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e0fa:	2201      	movs	r2, #1
    e0fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    e100:	4770      	bx	lr
    e102:	bf00      	nop
    e104:	2000055c 	.word	0x2000055c
    e108:	019c0202 	.word	0x019c0202

0000e10c <nrfx_twim_xfer>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    e10c:	68cb      	ldr	r3, [r1, #12]


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    e10e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e112:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    e11a:	460d      	mov	r5, r1
    e11c:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e11e:	d002      	beq.n	e126 <nrfx_twim_xfer+0x1a>
        return err_code;
    e120:	488e      	ldr	r0, [pc, #568]	; (e35c <nrfx_twim_xfer+0x250>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    e126:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e12a:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->busy)
    e12c:	4e8c      	ldr	r6, [pc, #560]	; (e360 <nrfx_twim_xfer+0x254>)
    p_reg->INTENCLR = mask;
    e12e:	4b8d      	ldr	r3, [pc, #564]	; (e364 <nrfx_twim_xfer+0x258>)
    e130:	fb0e 6e07 	mla	lr, lr, r7, r6
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    e134:	6804      	ldr	r4, [r0, #0]
    e136:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    e13a:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
    e13e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    e142:	b12b      	cbz	r3, e150 <nrfx_twim_xfer+0x44>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e144:	f8de 3008 	ldr.w	r3, [lr, #8]
        return err_code;
    e148:	4887      	ldr	r0, [pc, #540]	; (e368 <nrfx_twim_xfer+0x25c>)
    p_reg->INTENSET = mask;
    e14a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    e14e:	e7e8      	b.n	e122 <nrfx_twim_xfer+0x16>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    e150:	f012 0f14 	tst.w	r2, #20
    e154:	bf0c      	ite	eq
    e156:	2301      	moveq	r3, #1
    e158:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    e15a:	4689      	mov	r9, r1
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    e15c:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    e160:	f10e 080c 	add.w	r8, lr, #12
    e164:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    e168:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    e16c:	f8d9 3000 	ldr.w	r3, [r9]
    e170:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    e174:	f3cc 1300 	ubfx	r3, ip, #4, #1
    e178:	f88e 3030 	strb.w	r3, [lr, #48]	; 0x30
}

__STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                          uint8_t address)
{
    p_reg->ADDRESS = address;
    e17c:	786b      	ldrb	r3, [r5, #1]
    e17e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    e182:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    e186:	bf18      	it	ne
    e188:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e18a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    e18e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
}

__STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
    e192:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    e196:	f01c 0302 	ands.w	r3, ip, #2
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    e19a:	bf18      	it	ne
    e19c:	2301      	movne	r3, #1
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    e19e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    e1a2:	782b      	ldrb	r3, [r5, #0]
    e1a4:	2b03      	cmp	r3, #3
    e1a6:	f200 80bb 	bhi.w	e320 <nrfx_twim_xfer+0x214>
    e1aa:	e8df f003 	tbb	[pc, r3]
    e1ae:	a37c      	.short	0xa37c
    e1b0:	025d      	.short	0x025d
    e1b2:	692a      	ldr	r2, [r5, #16]
    e1b4:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e1bc:	d1b0      	bne.n	e120 <nrfx_twim_xfer+0x14>
    p_reg->SHORTS = mask;
    e1be:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e1c2:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    e1c4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e1c8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e1ca:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e1ce:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e1d2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1d4:	2300      	movs	r3, #0
    e1d6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    e1da:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    e1de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e1e2:	6221      	str	r1, [r4, #32]
    e1e4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e1e6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    e1ea:	2900      	cmp	r1, #0
    e1ec:	d0fb      	beq.n	e1e6 <nrfx_twim_xfer+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1ee:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e1f2:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e1f4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e1f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e1fc:	2334      	movs	r3, #52	; 0x34
    e1fe:	fb03 6307 	mla	r3, r3, r7, r6
    e202:	4a5a      	ldr	r2, [pc, #360]	; (e36c <nrfx_twim_xfer+0x260>)
    e204:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    e206:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    e20a:	2208      	movs	r2, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    e20c:	4858      	ldr	r0, [pc, #352]	; (e370 <nrfx_twim_xfer+0x264>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    e20e:	f01c 0f08 	tst.w	ip, #8
    e212:	d104      	bne.n	e21e <nrfx_twim_xfer+0x112>
    e214:	7829      	ldrb	r1, [r5, #0]
    e216:	2903      	cmp	r1, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e218:	bf1c      	itt	ne
    e21a:	2101      	movne	r1, #1
    e21c:	50a1      	strne	r1, [r4, r2]
    if (p_cb->handler)
    e21e:	2234      	movs	r2, #52	; 0x34
    e220:	437a      	muls	r2, r7
    e222:	18b1      	adds	r1, r6, r2
    e224:	58b2      	ldr	r2, [r6, r2]
    e226:	2a00      	cmp	r2, #0
    e228:	d17f      	bne.n	e32a <nrfx_twim_xfer+0x21e>
    e22a:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e22c:	4423      	add	r3, r4
    e22e:	681a      	ldr	r2, [r3, #0]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
    e230:	2a00      	cmp	r2, #0
    e232:	f000 8087 	beq.w	e344 <nrfx_twim_xfer+0x238>
        p_cb->busy = false;
    e236:	2234      	movs	r2, #52	; 0x34
    e238:	fb02 6607 	mla	r6, r2, r7, r6
    e23c:	2200      	movs	r2, #0
    uint32_t error_source = p_reg->ERRORSRC;
    e23e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    e242:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    e246:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
        if (errorsrc)
    e24a:	2b00      	cmp	r3, #0
    e24c:	f43f af69 	beq.w	e122 <nrfx_twim_xfer+0x16>
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    e250:	4a48      	ldr	r2, [pc, #288]	; (e374 <nrfx_twim_xfer+0x268>)
    e252:	f013 0f02 	tst.w	r3, #2
    e256:	4848      	ldr	r0, [pc, #288]	; (e378 <nrfx_twim_xfer+0x26c>)
    e258:	bf08      	it	eq
    e25a:	4610      	moveq	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    e25c:	f013 0f04 	tst.w	r3, #4
    e260:	4b46      	ldr	r3, [pc, #280]	; (e37c <nrfx_twim_xfer+0x270>)
    e262:	bf18      	it	ne
    e264:	4618      	movne	r0, r3
    e266:	e75c      	b.n	e122 <nrfx_twim_xfer+0x16>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e268:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e26a:	68ea      	ldr	r2, [r5, #12]
    e26c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e270:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e274:	692b      	ldr	r3, [r5, #16]
    e276:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e27a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    e27e:	f47f af4f 	bne.w	e120 <nrfx_twim_xfer+0x14>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e282:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e284:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    e288:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    e28c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e290:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e294:	2334      	movs	r3, #52	; 0x34
    e296:	f240 2202 	movw	r2, #514	; 0x202
    e29a:	fb03 6307 	mla	r3, r3, r7, r6
    e29e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e2a0:	2301      	movs	r3, #1
    e2a2:	6223      	str	r3, [r4, #32]
    e2a4:	e7af      	b.n	e206 <nrfx_twim_xfer+0xfa>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e2a6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e2a8:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    e2aa:	f01c 0f20 	tst.w	ip, #32
    e2ae:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e2b2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e2b6:	f04f 0334 	mov.w	r3, #52	; 0x34
    e2ba:	d00f      	beq.n	e2dc <nrfx_twim_xfer+0x1d0>
    p_reg->SHORTS = mask;
    e2bc:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e2c0:	fb03 6307 	mla	r3, r3, r7, r6
    e2c4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    e2c8:	4a28      	ldr	r2, [pc, #160]	; (e36c <nrfx_twim_xfer+0x260>)
    e2ca:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e2cc:	2300      	movs	r3, #0
    e2ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
    e2d2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e2d6:	2201      	movs	r2, #1
    e2d8:	6222      	str	r2, [r4, #32]
    e2da:	e796      	b.n	e20a <nrfx_twim_xfer+0xfe>
    p_reg->SHORTS = mask;
    e2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    e2e0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e2e4:	f240 2202 	movw	r2, #514	; 0x202
    e2e8:	fb03 6307 	mla	r3, r3, r7, r6
    e2ec:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    e2ee:	f44f 7382 	mov.w	r3, #260	; 0x104
    e2f2:	e7f0      	b.n	e2d6 <nrfx_twim_xfer+0x1ca>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e2f4:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e2f6:	68ea      	ldr	r2, [r5, #12]
    e2f8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e2fc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e304:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e308:	2334      	movs	r3, #52	; 0x34
    e30a:	f240 2202 	movw	r2, #514	; 0x202
    e30e:	fb03 6307 	mla	r3, r3, r7, r6
    e312:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e314:	2301      	movs	r3, #1
        start_task = NRF_TWIM_TASK_STARTRX;
    e316:	2200      	movs	r2, #0
    e318:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    e31a:	f44f 7382 	mov.w	r3, #260	; 0x104
    e31e:	e775      	b.n	e20c <nrfx_twim_xfer+0x100>
    e320:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    e324:	2208      	movs	r2, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
    e326:	4816      	ldr	r0, [pc, #88]	; (e380 <nrfx_twim_xfer+0x274>)
    e328:	e771      	b.n	e20e <nrfx_twim_xfer+0x102>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    e32a:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
    e32e:	bf1c      	itt	ne
    e330:	f44f 7300 	movne.w	r3, #512	; 0x200
    e334:	608b      	strne	r3, [r1, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e336:	2334      	movs	r3, #52	; 0x34
    e338:	fb03 6607 	mla	r6, r3, r7, r6
    e33c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    e33e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    e342:	e6ee      	b.n	e122 <nrfx_twim_xfer+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e344:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e348:	2d00      	cmp	r5, #0
    e34a:	f43f af70 	beq.w	e22e <nrfx_twim_xfer+0x122>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e34e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    e352:	f44f 7382 	mov.w	r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e356:	6221      	str	r1, [r4, #32]
    e358:	6161      	str	r1, [r4, #20]
    e35a:	e767      	b.n	e22c <nrfx_twim_xfer+0x120>
    e35c:	0bad000a 	.word	0x0bad000a
    e360:	2000055c 	.word	0x2000055c
    e364:	019c0202 	.word	0x019c0202
    e368:	0bad000b 	.word	0x0bad000b
    e36c:	00040200 	.word	0x00040200
    e370:	0bad0000 	.word	0x0bad0000
    e374:	0bad0001 	.word	0x0bad0001
    e378:	0bae0001 	.word	0x0bae0001
    e37c:	0bae0002 	.word	0x0bae0002
    e380:	0bad0004 	.word	0x0bad0004

0000e384 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    e384:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e386:	4b45      	ldr	r3, [pc, #276]	; (e49c <nrfx_twim_2_irq_handler+0x118>)
    e388:	b087      	sub	sp, #28
    e38a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    e38e:	461d      	mov	r5, r3
    e390:	4c43      	ldr	r4, [pc, #268]	; (e4a0 <nrfx_twim_2_irq_handler+0x11c>)
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e392:	b192      	cbz	r2, e3ba <nrfx_twim_2_irq_handler+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e394:	2200      	movs	r2, #0
    e396:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e39a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e39e:	b962      	cbnz	r2, e3ba <nrfx_twim_2_irq_handler+0x36>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    e3a0:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e3a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e3a6:	2202      	movs	r2, #2
    e3a8:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e3aa:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    e3ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e3b0:	2201      	movs	r2, #1
    e3b2:	621a      	str	r2, [r3, #32]
    e3b4:	615a      	str	r2, [r3, #20]
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    e3b6:	b007      	add	sp, #28
    e3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e3ba:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d03f      	beq.n	e442 <nrfx_twim_2_irq_handler+0xbe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e3c2:	2300      	movs	r3, #0
        event.xfer_desc = p_cb->xfer_desc;
    e3c4:	4f37      	ldr	r7, [pc, #220]	; (e4a4 <nrfx_twim_2_irq_handler+0x120>)
    e3c6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    e3ca:	ae01      	add	r6, sp, #4
    e3cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    e3ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e3d0:	683b      	ldr	r3, [r7, #0]
        if (p_cb->error)
    e3d2:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        event.xfer_desc = p_cb->xfer_desc;
    e3d6:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
    e3d8:	b179      	cbz	r1, e3fa <nrfx_twim_2_irq_handler+0x76>
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    e3da:	7b23      	ldrb	r3, [r4, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    e3dc:	2b01      	cmp	r3, #1
    return p_reg->RXD.AMOUNT;
    e3de:	bf0c      	ite	eq
    e3e0:	f8d5 253c 	ldreq.w	r2, [r5, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
    e3e4:	f8d5 254c 	ldrne.w	r2, [r5, #1356]	; 0x54c
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    e3e8:	2b02      	cmp	r3, #2
    e3ea:	4b2c      	ldr	r3, [pc, #176]	; (e49c <nrfx_twim_2_irq_handler+0x118>)
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    e3ec:	9202      	str	r2, [sp, #8]
    return p_reg->RXD.AMOUNT;
    e3ee:	bf0c      	ite	eq
    e3f0:	f8d3 353c 	ldreq.w	r3, [r3, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
    e3f4:	f8d3 354c 	ldrne.w	r3, [r3, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
    e3f8:	9303      	str	r3, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e3fa:	2200      	movs	r2, #0
    e3fc:	4b27      	ldr	r3, [pc, #156]	; (e49c <nrfx_twim_2_irq_handler+0x118>)
        if (!p_cb->repeated || p_cb->error)
    e3fe:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    e402:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    e406:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    e40a:	b100      	cbz	r0, e40e <nrfx_twim_2_irq_handler+0x8a>
    e40c:	b129      	cbz	r1, e41a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    e40e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            p_cb->int_mask = 0;
    e412:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e414:	4a24      	ldr	r2, [pc, #144]	; (e4a8 <nrfx_twim_2_irq_handler+0x124>)
    e416:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
    e41a:	4a20      	ldr	r2, [pc, #128]	; (e49c <nrfx_twim_2_irq_handler+0x118>)
    e41c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    e420:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    e424:	079a      	lsls	r2, r3, #30
    e426:	d533      	bpl.n	e490 <nrfx_twim_2_irq_handler+0x10c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    e428:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    e42a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    e42e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e432:	b90b      	cbnz	r3, e438 <nrfx_twim_2_irq_handler+0xb4>
        p_cb->busy = false;
    e434:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->handler(&event, p_cb->p_context);
    e438:	e9d4 3100 	ldrd	r3, r1, [r4]
    e43c:	4668      	mov	r0, sp
    e43e:	4798      	blx	r3
    e440:	e7b9      	b.n	e3b6 <nrfx_twim_2_irq_handler+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e442:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    e446:	7b23      	ldrb	r3, [r4, #12]
    e448:	b983      	cbnz	r3, e46c <nrfx_twim_2_irq_handler+0xe8>
            event.xfer_desc = p_cb->xfer_desc;
    e44a:	4f16      	ldr	r7, [pc, #88]	; (e4a4 <nrfx_twim_2_irq_handler+0x120>)
    e44c:	ae01      	add	r6, sp, #4
    e44e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    e450:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e452:	683b      	ldr	r3, [r7, #0]
    e454:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    e456:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e45a:	2b00      	cmp	r3, #0
    e45c:	d1dd      	bne.n	e41a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    e45e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    e462:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    e464:	4b10      	ldr	r3, [pc, #64]	; (e4a8 <nrfx_twim_2_irq_handler+0x124>)
    e466:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    e46a:	e7d6      	b.n	e41a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    e46c:	f44f 7300 	mov.w	r3, #512	; 0x200
    e470:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e474:	f240 2302 	movw	r3, #514	; 0x202
    e478:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    e47a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    e47e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e482:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    e484:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e488:	2301      	movs	r3, #1
    e48a:	60ab      	str	r3, [r5, #8]
    e48c:	622b      	str	r3, [r5, #32]
    e48e:	e792      	b.n	e3b6 <nrfx_twim_2_irq_handler+0x32>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    e490:	f013 0304 	ands.w	r3, r3, #4
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    e494:	bf18      	it	ne
    e496:	2302      	movne	r3, #2
    e498:	e7c7      	b.n	e42a <nrfx_twim_2_irq_handler+0xa6>
    e49a:	bf00      	nop
    e49c:	5000a000 	.word	0x5000a000
    e4a0:	2000055c 	.word	0x2000055c
    e4a4:	20000568 	.word	0x20000568
    e4a8:	019c0202 	.word	0x019c0202

0000e4ac <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    e4ac:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    e4ae:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    e4b0:	4b08      	ldr	r3, [pc, #32]	; (e4d4 <z_sys_device_do_config_level+0x28>)
    e4b2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    e4b6:	3001      	adds	r0, #1
    e4b8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    e4bc:	42a5      	cmp	r5, r4
    e4be:	d800      	bhi.n	e4c2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    e4c0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    e4c2:	6823      	ldr	r3, [r4, #0]
    e4c4:	4620      	mov	r0, r4
    e4c6:	685b      	ldr	r3, [r3, #4]
    e4c8:	4798      	blx	r3
		if (retval != 0) {
    e4ca:	b100      	cbz	r0, e4ce <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    e4cc:	6066      	str	r6, [r4, #4]
								info++) {
    e4ce:	340c      	adds	r4, #12
    e4d0:	e7f4      	b.n	e4bc <z_sys_device_do_config_level+0x10>
    e4d2:	bf00      	nop
    e4d4:	00010fc4 	.word	0x00010fc4

0000e4d8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    e4d8:	4b10      	ldr	r3, [pc, #64]	; (e51c <z_impl_device_get_binding+0x44>)
{
    e4da:	b570      	push	{r4, r5, r6, lr}
    e4dc:	4605      	mov	r5, r0
    e4de:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    e4e0:	4c0f      	ldr	r4, [pc, #60]	; (e520 <z_impl_device_get_binding+0x48>)
    e4e2:	429c      	cmp	r4, r3
    e4e4:	d104      	bne.n	e4f0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    e4e6:	4c0e      	ldr	r4, [pc, #56]	; (e520 <z_impl_device_get_binding+0x48>)
    e4e8:	42b4      	cmp	r4, r6
    e4ea:	d109      	bne.n	e500 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    e4ec:	2400      	movs	r4, #0
    e4ee:	e012      	b.n	e516 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    e4f0:	6862      	ldr	r2, [r4, #4]
    e4f2:	b11a      	cbz	r2, e4fc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    e4f4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    e4f6:	6812      	ldr	r2, [r2, #0]
    e4f8:	42aa      	cmp	r2, r5
    e4fa:	d00c      	beq.n	e516 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    e4fc:	340c      	adds	r4, #12
    e4fe:	e7f0      	b.n	e4e2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    e500:	6863      	ldr	r3, [r4, #4]
    e502:	b90b      	cbnz	r3, e508 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    e504:	340c      	adds	r4, #12
    e506:	e7ef      	b.n	e4e8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    e508:	6823      	ldr	r3, [r4, #0]
    e50a:	4628      	mov	r0, r5
    e50c:	6819      	ldr	r1, [r3, #0]
    e50e:	f002 f88c 	bl	1062a <strcmp>
    e512:	2800      	cmp	r0, #0
    e514:	d1f6      	bne.n	e504 <z_impl_device_get_binding+0x2c>
}
    e516:	4620      	mov	r0, r4
    e518:	bd70      	pop	{r4, r5, r6, pc}
    e51a:	bf00      	nop
    e51c:	20001544 	.word	0x20001544
    e520:	200014b4 	.word	0x200014b4

0000e524 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    e524:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    e526:	4d0b      	ldr	r5, [pc, #44]	; (e554 <idle+0x30>)
    e528:	f04f 0220 	mov.w	r2, #32
    e52c:	f3ef 8311 	mrs	r3, BASEPRI
    e530:	f382 8811 	msr	BASEPRI, r2
    e534:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    e538:	f002 fa76 	bl	10a28 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    e53c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    e53e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    e540:	2802      	cmp	r0, #2
    e542:	bfd8      	it	le
    e544:	4608      	movle	r0, r1
    e546:	f002 fa7f 	bl	10a48 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    e54a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    e54c:	f7fe ff26 	bl	d39c <z_arch_cpu_idle>
    e550:	e7ea      	b.n	e528 <idle+0x4>
    e552:	bf00      	nop
    e554:	20000668 	.word	0x20000668

0000e558 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    e558:	4802      	ldr	r0, [pc, #8]	; (e564 <z_bss_zero+0xc>)
    e55a:	4a03      	ldr	r2, [pc, #12]	; (e568 <z_bss_zero+0x10>)
    e55c:	2100      	movs	r1, #0
    e55e:	1a12      	subs	r2, r2, r0
    e560:	f002 b8b4 	b.w	106cc <memset>
    e564:	20000000 	.word	0x20000000
    e568:	200006c8 	.word	0x200006c8

0000e56c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    e56c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    e56e:	4806      	ldr	r0, [pc, #24]	; (e588 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    e570:	4a06      	ldr	r2, [pc, #24]	; (e58c <z_data_copy+0x20>)
    e572:	4907      	ldr	r1, [pc, #28]	; (e590 <z_data_copy+0x24>)
    e574:	1a12      	subs	r2, r2, r0
    e576:	f002 f87c 	bl	10672 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e57a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    e57e:	4a05      	ldr	r2, [pc, #20]	; (e594 <z_data_copy+0x28>)
    e580:	4905      	ldr	r1, [pc, #20]	; (e598 <z_data_copy+0x2c>)
    e582:	4806      	ldr	r0, [pc, #24]	; (e59c <z_data_copy+0x30>)
    e584:	f002 b875 	b.w	10672 <memcpy>
    e588:	2000140c 	.word	0x2000140c
    e58c:	200015a8 	.word	0x200015a8
    e590:	0001144c 	.word	0x0001144c
    e594:	00000000 	.word	0x00000000
    e598:	0001144c 	.word	0x0001144c
    e59c:	20000000 	.word	0x20000000

0000e5a0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    e5a0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    e5a2:	2002      	movs	r0, #2
    e5a4:	f7ff ff82 	bl	e4ac <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    e5a8:	4807      	ldr	r0, [pc, #28]	; (e5c8 <bg_thread_main+0x28>)
    e5aa:	f001 fe8f 	bl	102cc <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    e5ae:	2003      	movs	r0, #3
    e5b0:	f7ff ff7c 	bl	e4ac <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    e5b4:	f000 fc82 	bl	eebc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    e5b8:	f001 fc9c 	bl	fef4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    e5bc:	4a03      	ldr	r2, [pc, #12]	; (e5cc <bg_thread_main+0x2c>)
    e5be:	7b13      	ldrb	r3, [r2, #12]
    e5c0:	f023 0301 	bic.w	r3, r3, #1
    e5c4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    e5c6:	bd08      	pop	{r3, pc}
    e5c8:	00011410 	.word	0x00011410
    e5cc:	200005fc 	.word	0x200005fc

0000e5d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    e5d0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    e5d2:	4b37      	ldr	r3, [pc, #220]	; (e6b0 <z_cstart+0xe0>)
    e5d4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    e5d6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e5da:	2500      	movs	r5, #0
    e5dc:	23e0      	movs	r3, #224	; 0xe0
    e5de:	4c35      	ldr	r4, [pc, #212]	; (e6b4 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    e5e0:	2701      	movs	r7, #1
    e5e2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    e5e6:	77e5      	strb	r5, [r4, #31]
    e5e8:	7625      	strb	r5, [r4, #24]
    e5ea:	7665      	strb	r5, [r4, #25]
    e5ec:	76a5      	strb	r5, [r4, #26]
    e5ee:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    e5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    e5f2:	4e31      	ldr	r6, [pc, #196]	; (e6b8 <z_cstart+0xe8>)
    e5f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    e5f8:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    e5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e5fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    e600:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    e602:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    e604:	f7ff f8b0 	bl	d768 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    e608:	f7fe fec2 	bl	d390 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    e60c:	f04f 33ff 	mov.w	r3, #4294967295
    e610:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    e612:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    e614:	ab07      	add	r3, sp, #28
    e616:	226c      	movs	r2, #108	; 0x6c
    e618:	4629      	mov	r1, r5
    e61a:	4618      	mov	r0, r3
    e61c:	f002 f856 	bl	106cc <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    e620:	4c26      	ldr	r4, [pc, #152]	; (e6bc <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    e622:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    e626:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    e628:	4628      	mov	r0, r5
    e62a:	f7ff ff3f 	bl	e4ac <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    e62e:	4638      	mov	r0, r7
    e630:	f7ff ff3c 	bl	e4ac <z_sys_device_do_config_level>
	z_sched_init();
    e634:	f000 fba6 	bl	ed84 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    e638:	4b21      	ldr	r3, [pc, #132]	; (e6c0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    e63a:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    e63c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e640:	e9cd 7304 	strd	r7, r3, [sp, #16]
    e644:	e9cd 5502 	strd	r5, r5, [sp, #8]
    e648:	4b1e      	ldr	r3, [pc, #120]	; (e6c4 <z_cstart+0xf4>)
    e64a:	e9cd 5500 	strd	r5, r5, [sp]
    e64e:	491e      	ldr	r1, [pc, #120]	; (e6c8 <z_cstart+0xf8>)
    e650:	4630      	mov	r0, r6
    e652:	f000 fc19 	bl	ee88 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e656:	7b73      	ldrb	r3, [r6, #13]
    e658:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e65c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e660:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e662:	d104      	bne.n	e66e <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    e664:	69b3      	ldr	r3, [r6, #24]
    e666:	b913      	cbnz	r3, e66e <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    e668:	4630      	mov	r0, r6
    e66a:	f000 fa1b 	bl	eaa4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    e66e:	4b17      	ldr	r3, [pc, #92]	; (e6cc <z_cstart+0xfc>)
    e670:	2201      	movs	r2, #1
    e672:	9305      	str	r3, [sp, #20]
    e674:	230f      	movs	r3, #15
    e676:	e9cd 3203 	strd	r3, r2, [sp, #12]
    e67a:	2300      	movs	r3, #0
    e67c:	4d14      	ldr	r5, [pc, #80]	; (e6d0 <z_cstart+0x100>)
    e67e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e682:	9300      	str	r3, [sp, #0]
    e684:	f44f 72a0 	mov.w	r2, #320	; 0x140
    e688:	4b12      	ldr	r3, [pc, #72]	; (e6d4 <z_cstart+0x104>)
    e68a:	4913      	ldr	r1, [pc, #76]	; (e6d8 <z_cstart+0x108>)
    e68c:	4628      	mov	r0, r5
    e68e:	f000 fbfb 	bl	ee88 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e692:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    e694:	60e5      	str	r5, [r4, #12]
    e696:	f023 0304 	bic.w	r3, r3, #4
    e69a:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    e69c:	4b0f      	ldr	r3, [pc, #60]	; (e6dc <z_cstart+0x10c>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    e69e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    e6a2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    e6a6:	4908      	ldr	r1, [pc, #32]	; (e6c8 <z_cstart+0xf8>)
    e6a8:	4b06      	ldr	r3, [pc, #24]	; (e6c4 <z_cstart+0xf4>)
    e6aa:	4803      	ldr	r0, [pc, #12]	; (e6b8 <z_cstart+0xe8>)
    e6ac:	f7fe ff1e 	bl	d4ec <z_arch_switch_to_main_thread>
    e6b0:	20001408 	.word	0x20001408
    e6b4:	e000ed00 	.word	0xe000ed00
    e6b8:	200005fc 	.word	0x200005fc
    e6bc:	20000668 	.word	0x20000668
    e6c0:	00011442 	.word	0x00011442
    e6c4:	0000e5a1 	.word	0x0000e5a1
    e6c8:	200006c8 	.word	0x200006c8
    e6cc:	00011447 	.word	0x00011447
    e6d0:	20000590 	.word	0x20000590
    e6d4:	0000e525 	.word	0x0000e525
    e6d8:	20000ac8 	.word	0x20000ac8
    e6dc:	20000680 	.word	0x20000680

0000e6e0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    e6e0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    e6e2:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    e6e4:	4b0a      	ldr	r3, [pc, #40]	; (e710 <init_mem_slab_module+0x30>)
    e6e6:	480b      	ldr	r0, [pc, #44]	; (e714 <init_mem_slab_module+0x34>)
    e6e8:	4283      	cmp	r3, r0
    e6ea:	d301      	bcc.n	e6f0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    e6ec:	2000      	movs	r0, #0
    e6ee:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    e6f0:	2100      	movs	r1, #0
	p = slab->buffer;
    e6f2:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    e6f4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    e6f6:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e6f8:	42a9      	cmp	r1, r5
    e6fa:	d101      	bne.n	e700 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    e6fc:	331c      	adds	r3, #28
    e6fe:	e7f3      	b.n	e6e8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    e700:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e702:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    e704:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    e706:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    e708:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    e70a:	4432      	add	r2, r6
    e70c:	e7f4      	b.n	e6f8 <init_mem_slab_module+0x18>
    e70e:	bf00      	nop
    e710:	20001544 	.word	0x20001544
    e714:	20001544 	.word	0x20001544

0000e718 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    e718:	b510      	push	{r4, lr}
    e71a:	4613      	mov	r3, r2
    e71c:	460c      	mov	r4, r1
    e71e:	f04f 0220 	mov.w	r2, #32
    e722:	f3ef 8111 	mrs	r1, BASEPRI
    e726:	f382 8811 	msr	BASEPRI, r2
    e72a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    e72e:	6942      	ldr	r2, [r0, #20]
    e730:	b162      	cbz	r2, e74c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    e732:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    e734:	6943      	ldr	r3, [r0, #20]
    e736:	681b      	ldr	r3, [r3, #0]
    e738:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    e73a:	6983      	ldr	r3, [r0, #24]
    e73c:	3301      	adds	r3, #1
    e73e:	6183      	str	r3, [r0, #24]
		result = 0;
    e740:	2000      	movs	r0, #0
	__asm__ volatile(
    e742:	f381 8811 	msr	BASEPRI, r1
    e746:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    e74a:	e00d      	b.n	e768 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
    e74c:	b91b      	cbnz	r3, e756 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    e74e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    e750:	f06f 000b 	mvn.w	r0, #11
    e754:	e7f5      	b.n	e742 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    e756:	4602      	mov	r2, r0
    e758:	4804      	ldr	r0, [pc, #16]	; (e76c <k_mem_slab_alloc+0x54>)
    e75a:	f000 fabd 	bl	ecd8 <z_pend_curr>
		if (result == 0) {
    e75e:	b918      	cbnz	r0, e768 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
    e760:	4b03      	ldr	r3, [pc, #12]	; (e770 <k_mem_slab_alloc+0x58>)
    e762:	689b      	ldr	r3, [r3, #8]
    e764:	695b      	ldr	r3, [r3, #20]
    e766:	6023      	str	r3, [r4, #0]
}
    e768:	bd10      	pop	{r4, pc}
    e76a:	bf00      	nop
    e76c:	200006c5 	.word	0x200006c5
    e770:	20000668 	.word	0x20000668

0000e774 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e774:	b570      	push	{r4, r5, r6, lr}
    e776:	4604      	mov	r4, r0
    e778:	460d      	mov	r5, r1
	__asm__ volatile(
    e77a:	f04f 0320 	mov.w	r3, #32
    e77e:	f3ef 8611 	mrs	r6, BASEPRI
    e782:	f383 8811 	msr	BASEPRI, r3
    e786:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e78a:	f002 f8da 	bl	10942 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    e78e:	b180      	cbz	r0, e7b2 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    e790:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e792:	682a      	ldr	r2, [r5, #0]
    e794:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
    e796:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e798:	7b42      	ldrb	r2, [r0, #13]
    e79a:	06d2      	lsls	r2, r2, #27
    e79c:	d103      	bne.n	e7a6 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    e79e:	6983      	ldr	r3, [r0, #24]
    e7a0:	b90b      	cbnz	r3, e7a6 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    e7a2:	f000 f97f 	bl	eaa4 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    e7a6:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    e7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    e7ac:	4807      	ldr	r0, [pc, #28]	; (e7cc <k_mem_slab_free+0x58>)
    e7ae:	f002 b868 	b.w	10882 <z_reschedule>
		**(char ***)mem = slab->free_list;
    e7b2:	682b      	ldr	r3, [r5, #0]
    e7b4:	6962      	ldr	r2, [r4, #20]
    e7b6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    e7b8:	682b      	ldr	r3, [r5, #0]
    e7ba:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    e7bc:	69a3      	ldr	r3, [r4, #24]
    e7be:	3b01      	subs	r3, #1
    e7c0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e7c2:	f386 8811 	msr	BASEPRI, r6
    e7c6:	f3bf 8f6f 	isb	sy
}
    e7ca:	bd70      	pop	{r4, r5, r6, pc}
    e7cc:	200006c5 	.word	0x200006c5

0000e7d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7d2:	4604      	mov	r4, r0
    e7d4:	460f      	mov	r7, r1
	__asm__ volatile(
    e7d6:	f04f 0320 	mov.w	r3, #32
    e7da:	f3ef 8511 	mrs	r5, BASEPRI
    e7de:	f383 8811 	msr	BASEPRI, r3
    e7e2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e7e6:	68c2      	ldr	r2, [r0, #12]
    e7e8:	4930      	ldr	r1, [pc, #192]	; (e8ac <z_impl_k_mutex_lock+0xdc>)
    e7ea:	b15a      	cbz	r2, e804 <z_impl_k_mutex_lock+0x34>
    e7ec:	6880      	ldr	r0, [r0, #8]
    e7ee:	688e      	ldr	r6, [r1, #8]
    e7f0:	42b0      	cmp	r0, r6
    e7f2:	d015      	beq.n	e820 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    e7f4:	b9b7      	cbnz	r7, e824 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    e7f6:	f385 8811 	msr	BASEPRI, r5
    e7fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    e7fe:	f06f 000f 	mvn.w	r0, #15
    e802:	e00c      	b.n	e81e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    e804:	688b      	ldr	r3, [r1, #8]
    e806:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e80a:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    e80c:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    e80e:	3201      	adds	r2, #1
    e810:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    e812:	60a3      	str	r3, [r4, #8]
    e814:	f385 8811 	msr	BASEPRI, r5
    e818:	f3bf 8f6f 	isb	sy
		return 0;
    e81c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    e820:	6923      	ldr	r3, [r4, #16]
    e822:	e7f2      	b.n	e80a <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e824:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e828:	f996 100e 	ldrsb.w	r1, [r6, #14]
    e82c:	4299      	cmp	r1, r3
    e82e:	bfa8      	it	ge
    e830:	4619      	movge	r1, r3
    e832:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e836:	4299      	cmp	r1, r3
    e838:	da2b      	bge.n	e892 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    e83a:	f000 fa61 	bl	ed00 <z_set_prio>
    e83e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e840:	463b      	mov	r3, r7
    e842:	4622      	mov	r2, r4
    e844:	4629      	mov	r1, r5
    e846:	481a      	ldr	r0, [pc, #104]	; (e8b0 <z_impl_k_mutex_lock+0xe0>)
    e848:	f000 fa46 	bl	ecd8 <z_pend_curr>
	if (got_mutex == 0) {
    e84c:	2800      	cmp	r0, #0
    e84e:	d0e6      	beq.n	e81e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    e850:	f04f 0320 	mov.w	r3, #32
    e854:	f3ef 8511 	mrs	r5, BASEPRI
    e858:	f383 8811 	msr	BASEPRI, r3
    e85c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    e860:	6823      	ldr	r3, [r4, #0]
    e862:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e864:	429c      	cmp	r4, r3
    e866:	d007      	beq.n	e878 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    e868:	b133      	cbz	r3, e878 <z_impl_k_mutex_lock+0xa8>
    e86a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e86e:	4299      	cmp	r1, r3
    e870:	bfa8      	it	ge
    e872:	4619      	movge	r1, r3
    e874:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e878:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    e87a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e87e:	4299      	cmp	r1, r3
    e880:	d109      	bne.n	e896 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    e882:	b16e      	cbz	r6, e8a0 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    e884:	4629      	mov	r1, r5
    e886:	480a      	ldr	r0, [pc, #40]	; (e8b0 <z_impl_k_mutex_lock+0xe0>)
    e888:	f001 fffb 	bl	10882 <z_reschedule>
	return -EAGAIN;
    e88c:	f06f 000a 	mvn.w	r0, #10
    e890:	e7c5      	b.n	e81e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    e892:	2600      	movs	r6, #0
    e894:	e7d4      	b.n	e840 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    e896:	f000 fa33 	bl	ed00 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e89a:	2800      	cmp	r0, #0
    e89c:	d1f2      	bne.n	e884 <z_impl_k_mutex_lock+0xb4>
    e89e:	e7f0      	b.n	e882 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    e8a0:	f385 8811 	msr	BASEPRI, r5
    e8a4:	f3bf 8f6f 	isb	sy
    e8a8:	e7f0      	b.n	e88c <z_impl_k_mutex_lock+0xbc>
    e8aa:	bf00      	nop
    e8ac:	20000668 	.word	0x20000668
    e8b0:	200006c5 	.word	0x200006c5

0000e8b4 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    e8b4:	4b1e      	ldr	r3, [pc, #120]	; (e930 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    e8b6:	b570      	push	{r4, r5, r6, lr}
    e8b8:	689a      	ldr	r2, [r3, #8]
    e8ba:	4604      	mov	r4, r0
    e8bc:	7bd3      	ldrb	r3, [r2, #15]
    e8be:	3b01      	subs	r3, #1
    e8c0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    e8c2:	68c3      	ldr	r3, [r0, #12]
    e8c4:	2b01      	cmp	r3, #1
    e8c6:	d005      	beq.n	e8d4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    e8c8:	3b01      	subs	r3, #1
    e8ca:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    e8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    e8d0:	f000 b8cc 	b.w	ea6c <k_sched_unlock>
	__asm__ volatile(
    e8d4:	f04f 0320 	mov.w	r3, #32
    e8d8:	f3ef 8611 	mrs	r6, BASEPRI
    e8dc:	f383 8811 	msr	BASEPRI, r3
    e8e0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    e8e4:	6901      	ldr	r1, [r0, #16]
    e8e6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    e8e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e8ec:	4299      	cmp	r1, r3
    e8ee:	d001      	beq.n	e8f4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    e8f0:	f000 fa06 	bl	ed00 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    e8f4:	4620      	mov	r0, r4
    e8f6:	f002 f824 	bl	10942 <z_unpend_first_thread>
    e8fa:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    e8fc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    e8fe:	b180      	cbz	r0, e922 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e900:	7b43      	ldrb	r3, [r0, #13]
    e902:	06db      	lsls	r3, r3, #27
    e904:	d103      	bne.n	e90e <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    e906:	6983      	ldr	r3, [r0, #24]
    e908:	b90b      	cbnz	r3, e90e <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    e90a:	f000 f8cb 	bl	eaa4 <z_add_thread_to_ready_q>
	__asm__ volatile(
    e90e:	f386 8811 	msr	BASEPRI, r6
    e912:	f3bf 8f6f 	isb	sy
    e916:	2300      	movs	r3, #0
    e918:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    e91a:	f995 300e 	ldrsb.w	r3, [r5, #14]
    e91e:	6123      	str	r3, [r4, #16]
    e920:	e7d4      	b.n	e8cc <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    e922:	60e0      	str	r0, [r4, #12]
    e924:	f386 8811 	msr	BASEPRI, r6
    e928:	f3bf 8f6f 	isb	sy
    e92c:	e7ce      	b.n	e8cc <z_impl_k_mutex_unlock+0x18>
    e92e:	bf00      	nop
    e930:	20000668 	.word	0x20000668

0000e934 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e934:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    e938:	280d      	cmp	r0, #13
    e93a:	d809      	bhi.n	e950 <resched.part.15+0x1c>
    e93c:	b128      	cbz	r0, e94a <resched.part.15+0x16>
    e93e:	4b05      	ldr	r3, [pc, #20]	; (e954 <resched.part.15+0x20>)
    e940:	6858      	ldr	r0, [r3, #4]
    e942:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    e946:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    e94a:	f080 0001 	eor.w	r0, r0, #1
    e94e:	4770      	bx	lr
    e950:	2001      	movs	r0, #1
    e952:	e7fa      	b.n	e94a <resched.part.15+0x16>
    e954:	e000ed00 	.word	0xe000ed00

0000e958 <z_reset_time_slice>:
{
    e958:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    e95a:	4c08      	ldr	r4, [pc, #32]	; (e97c <z_reset_time_slice+0x24>)
    e95c:	6823      	ldr	r3, [r4, #0]
    e95e:	b15b      	cbz	r3, e978 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    e960:	f7fe f946 	bl	cbf0 <z_clock_elapsed>
    e964:	6823      	ldr	r3, [r4, #0]
    e966:	4a06      	ldr	r2, [pc, #24]	; (e980 <z_reset_time_slice+0x28>)
    e968:	4418      	add	r0, r3
    e96a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    e96c:	2100      	movs	r1, #0
}
    e96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    e972:	4618      	mov	r0, r3
    e974:	f002 b868 	b.w	10a48 <z_set_timeout_expiry>
}
    e978:	bd10      	pop	{r4, pc}
    e97a:	bf00      	nop
    e97c:	200006a0 	.word	0x200006a0
    e980:	20000668 	.word	0x20000668

0000e984 <k_sched_time_slice_set>:
{
    e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e986:	460d      	mov	r5, r1
	__asm__ volatile(
    e988:	f04f 0320 	mov.w	r3, #32
    e98c:	f3ef 8411 	mrs	r4, BASEPRI
    e990:	f383 8811 	msr	BASEPRI, r3
    e994:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    e998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e99c:	f240 36e7 	movw	r6, #999	; 0x3e7
    e9a0:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    e9a2:	2200      	movs	r2, #0
    e9a4:	fbc1 6700 	smlal	r6, r7, r1, r0
    e9a8:	4b09      	ldr	r3, [pc, #36]	; (e9d0 <k_sched_time_slice_set+0x4c>)
    e9aa:	4630      	mov	r0, r6
    e9ac:	611a      	str	r2, [r3, #16]
    e9ae:	4639      	mov	r1, r7
    e9b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9b4:	2300      	movs	r3, #0
    e9b6:	f7fd fd33 	bl	c420 <__aeabi_ldivmod>
    e9ba:	4b06      	ldr	r3, [pc, #24]	; (e9d4 <k_sched_time_slice_set+0x50>)
    e9bc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    e9be:	4b06      	ldr	r3, [pc, #24]	; (e9d8 <k_sched_time_slice_set+0x54>)
    e9c0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    e9c2:	f7ff ffc9 	bl	e958 <z_reset_time_slice>
	__asm__ volatile(
    e9c6:	f384 8811 	msr	BASEPRI, r4
    e9ca:	f3bf 8f6f 	isb	sy
}
    e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9d0:	20000668 	.word	0x20000668
    e9d4:	200006a0 	.word	0x200006a0
    e9d8:	2000069c 	.word	0x2000069c

0000e9dc <k_sched_lock>:
	__asm__ volatile(
    e9dc:	f04f 0320 	mov.w	r3, #32
    e9e0:	f3ef 8111 	mrs	r1, BASEPRI
    e9e4:	f383 8811 	msr	BASEPRI, r3
    e9e8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    e9ec:	4b04      	ldr	r3, [pc, #16]	; (ea00 <k_sched_lock+0x24>)
    e9ee:	689a      	ldr	r2, [r3, #8]
    e9f0:	7bd3      	ldrb	r3, [r2, #15]
    e9f2:	3b01      	subs	r3, #1
    e9f4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e9f6:	f381 8811 	msr	BASEPRI, r1
    e9fa:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    e9fe:	4770      	bx	lr
    ea00:	20000668 	.word	0x20000668

0000ea04 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    ea04:	4b09      	ldr	r3, [pc, #36]	; (ea2c <z_priq_dumb_remove+0x28>)
    ea06:	f103 0228 	add.w	r2, r3, #40	; 0x28
    ea0a:	4282      	cmp	r2, r0
    ea0c:	d105      	bne.n	ea1a <z_priq_dumb_remove+0x16>
    ea0e:	689b      	ldr	r3, [r3, #8]
    ea10:	428b      	cmp	r3, r1
    ea12:	d102      	bne.n	ea1a <z_priq_dumb_remove+0x16>
    ea14:	7b4b      	ldrb	r3, [r1, #13]
    ea16:	06db      	lsls	r3, r3, #27
    ea18:	d107      	bne.n	ea2a <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ea1a:	e9d1 2300 	ldrd	r2, r3, [r1]
    ea1e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ea20:	680a      	ldr	r2, [r1, #0]
    ea22:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    ea24:	2300      	movs	r3, #0
	node->prev = NULL;
    ea26:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    ea2a:	4770      	bx	lr
    ea2c:	20000668 	.word	0x20000668

0000ea30 <update_cache>:
{
    ea30:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    ea32:	4c0d      	ldr	r4, [pc, #52]	; (ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
{
    ea34:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    ea36:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ea3a:	f001 ff4b 	bl	108d4 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    ea3e:	4605      	mov	r5, r0
    ea40:	b900      	cbnz	r0, ea44 <update_cache+0x14>
    ea42:	68e5      	ldr	r5, [r4, #12]
    ea44:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    ea46:	b94a      	cbnz	r2, ea5c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    ea48:	7b5a      	ldrb	r2, [r3, #13]
    ea4a:	06d2      	lsls	r2, r2, #27
    ea4c:	d106      	bne.n	ea5c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ea4e:	69aa      	ldr	r2, [r5, #24]
    ea50:	b922      	cbnz	r2, ea5c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    ea52:	89da      	ldrh	r2, [r3, #14]
    ea54:	2a7f      	cmp	r2, #127	; 0x7f
    ea56:	d901      	bls.n	ea5c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    ea58:	6263      	str	r3, [r4, #36]	; 0x24
}
    ea5a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    ea5c:	429d      	cmp	r5, r3
    ea5e:	d001      	beq.n	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
			z_reset_time_slice();
    ea60:	f7ff ff7a 	bl	e958 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    ea64:	6265      	str	r5, [r4, #36]	; 0x24
}
    ea66:	e7f8      	b.n	ea5a <update_cache+0x2a>
    ea68:	20000668 	.word	0x20000668

0000ea6c <k_sched_unlock>:
{
    ea6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    ea6e:	f04f 0320 	mov.w	r3, #32
    ea72:	f3ef 8411 	mrs	r4, BASEPRI
    ea76:	f383 8811 	msr	BASEPRI, r3
    ea7a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    ea7e:	4b08      	ldr	r3, [pc, #32]	; (eaa0 <k_sched_unlock+0x34>)
		update_cache(0);
    ea80:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    ea82:	689a      	ldr	r2, [r3, #8]
    ea84:	7bd3      	ldrb	r3, [r2, #15]
    ea86:	3301      	adds	r3, #1
    ea88:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ea8a:	f7ff ffd1 	bl	ea30 <update_cache>
	__asm__ volatile(
    ea8e:	f384 8811 	msr	BASEPRI, r4
    ea92:	f3bf 8f6f 	isb	sy
}
    ea96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    ea9a:	f001 bf11 	b.w	108c0 <z_reschedule_unlocked>
    ea9e:	bf00      	nop
    eaa0:	20000668 	.word	0x20000668

0000eaa4 <z_add_thread_to_ready_q>:
{
    eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    eaa6:	f04f 0320 	mov.w	r3, #32
    eaaa:	f3ef 8411 	mrs	r4, BASEPRI
    eaae:	f383 8811 	msr	BASEPRI, r3
    eab2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    eab6:	4a16      	ldr	r2, [pc, #88]	; (eb10 <z_add_thread_to_ready_q+0x6c>)
    eab8:	4611      	mov	r1, r2
    eaba:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eabe:	428b      	cmp	r3, r1
    eac0:	d00c      	beq.n	eadc <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eac2:	b15b      	cbz	r3, eadc <z_add_thread_to_ready_q+0x38>
    eac4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    eac6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    eaca:	f993 700e 	ldrsb.w	r7, [r3, #14]
    eace:	42af      	cmp	r7, r5
    ead0:	dc0b      	bgt.n	eaea <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    ead2:	42b3      	cmp	r3, r6
    ead4:	d002      	beq.n	eadc <z_add_thread_to_ready_q+0x38>
    ead6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ead8:	2b00      	cmp	r3, #0
    eada:	d1f6      	bne.n	eaca <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    eadc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    eade:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    eae0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    eae2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    eae4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    eae6:	62d0      	str	r0, [r2, #44]	; 0x2c
    eae8:	e005      	b.n	eaf6 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    eaea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    eaec:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    eaf0:	685a      	ldr	r2, [r3, #4]
    eaf2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    eaf4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    eaf6:	7b43      	ldrb	r3, [r0, #13]
    eaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eafc:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    eafe:	2000      	movs	r0, #0
    eb00:	f7ff ff96 	bl	ea30 <update_cache>
	__asm__ volatile(
    eb04:	f384 8811 	msr	BASEPRI, r4
    eb08:	f3bf 8f6f 	isb	sy
}
    eb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb0e:	bf00      	nop
    eb10:	20000668 	.word	0x20000668

0000eb14 <z_move_thread_to_end_of_prio_q>:
{
    eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb16:	4604      	mov	r4, r0
	__asm__ volatile(
    eb18:	f04f 0320 	mov.w	r3, #32
    eb1c:	f3ef 8511 	mrs	r5, BASEPRI
    eb20:	f383 8811 	msr	BASEPRI, r3
    eb24:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    eb28:	7b43      	ldrb	r3, [r0, #13]
    eb2a:	065a      	lsls	r2, r3, #25
    eb2c:	d503      	bpl.n	eb36 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    eb2e:	4601      	mov	r1, r0
    eb30:	4818      	ldr	r0, [pc, #96]	; (eb94 <z_move_thread_to_end_of_prio_q+0x80>)
    eb32:	f7ff ff67 	bl	ea04 <z_priq_dumb_remove>
	return list->head == list;
    eb36:	4a18      	ldr	r2, [pc, #96]	; (eb98 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb38:	f102 0128 	add.w	r1, r2, #40	; 0x28
    eb3c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    eb40:	428b      	cmp	r3, r1
    eb42:	d00b      	beq.n	eb5c <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb44:	b153      	cbz	r3, eb5c <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
    eb46:	f994 600e 	ldrsb.w	r6, [r4, #14]
    eb4a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    eb4e:	42b7      	cmp	r7, r6
    eb50:	dc0a      	bgt.n	eb68 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
    eb52:	4283      	cmp	r3, r0
    eb54:	d002      	beq.n	eb5c <z_move_thread_to_end_of_prio_q+0x48>
    eb56:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb58:	2b00      	cmp	r3, #0
    eb5a:	d1f6      	bne.n	eb4a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    eb5c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    eb60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    eb62:	601c      	str	r4, [r3, #0]
	list->tail = node;
    eb64:	62d4      	str	r4, [r2, #44]	; 0x2c
    eb66:	e005      	b.n	eb74 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
    eb68:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    eb6a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    eb6e:	6859      	ldr	r1, [r3, #4]
    eb70:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    eb72:	605c      	str	r4, [r3, #4]
    eb74:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    eb76:	6890      	ldr	r0, [r2, #8]
    eb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb7c:	7363      	strb	r3, [r4, #13]
    eb7e:	1b03      	subs	r3, r0, r4
    eb80:	4258      	negs	r0, r3
    eb82:	4158      	adcs	r0, r3
    eb84:	f7ff ff54 	bl	ea30 <update_cache>
	__asm__ volatile(
    eb88:	f385 8811 	msr	BASEPRI, r5
    eb8c:	f3bf 8f6f 	isb	sy
}
    eb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb92:	bf00      	nop
    eb94:	20000690 	.word	0x20000690
    eb98:	20000668 	.word	0x20000668

0000eb9c <z_time_slice>:
	if (pending_current == _current) {
    eb9c:	4a15      	ldr	r2, [pc, #84]	; (ebf4 <z_time_slice+0x58>)
    eb9e:	4916      	ldr	r1, [pc, #88]	; (ebf8 <z_time_slice+0x5c>)
{
    eba0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    eba2:	680c      	ldr	r4, [r1, #0]
    eba4:	6893      	ldr	r3, [r2, #8]
    eba6:	42a3      	cmp	r3, r4
    eba8:	4614      	mov	r4, r2
    ebaa:	d103      	bne.n	ebb4 <z_time_slice+0x18>
}
    ebac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    ebb0:	f7ff bed2 	b.w	e958 <z_reset_time_slice>
	pending_current = NULL;
    ebb4:	2500      	movs	r5, #0
    ebb6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    ebb8:	4910      	ldr	r1, [pc, #64]	; (ebfc <z_time_slice+0x60>)
    ebba:	6809      	ldr	r1, [r1, #0]
    ebbc:	b1b9      	cbz	r1, ebee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    ebbe:	89d9      	ldrh	r1, [r3, #14]
    ebc0:	297f      	cmp	r1, #127	; 0x7f
    ebc2:	d814      	bhi.n	ebee <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    ebc4:	490e      	ldr	r1, [pc, #56]	; (ec00 <z_time_slice+0x64>)
    ebc6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    ebca:	6809      	ldr	r1, [r1, #0]
    ebcc:	428d      	cmp	r5, r1
    ebce:	db0e      	blt.n	ebee <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    ebd0:	490c      	ldr	r1, [pc, #48]	; (ec04 <z_time_slice+0x68>)
    ebd2:	428b      	cmp	r3, r1
    ebd4:	d00b      	beq.n	ebee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    ebd6:	6999      	ldr	r1, [r3, #24]
    ebd8:	b949      	cbnz	r1, ebee <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    ebda:	6911      	ldr	r1, [r2, #16]
    ebdc:	4281      	cmp	r1, r0
    ebde:	dc03      	bgt.n	ebe8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    ebe0:	4618      	mov	r0, r3
    ebe2:	f7ff ff97 	bl	eb14 <z_move_thread_to_end_of_prio_q>
    ebe6:	e7e1      	b.n	ebac <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    ebe8:	1a09      	subs	r1, r1, r0
    ebea:	6111      	str	r1, [r2, #16]
}
    ebec:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    ebee:	2300      	movs	r3, #0
    ebf0:	6123      	str	r3, [r4, #16]
    ebf2:	e7fb      	b.n	ebec <z_time_slice+0x50>
    ebf4:	20000668 	.word	0x20000668
    ebf8:	20000698 	.word	0x20000698
    ebfc:	200006a0 	.word	0x200006a0
    ec00:	2000069c 	.word	0x2000069c
    ec04:	20000590 	.word	0x20000590

0000ec08 <z_remove_thread_from_ready_q>:
{
    ec08:	b538      	push	{r3, r4, r5, lr}
    ec0a:	4604      	mov	r4, r0
	__asm__ volatile(
    ec0c:	f04f 0320 	mov.w	r3, #32
    ec10:	f3ef 8511 	mrs	r5, BASEPRI
    ec14:	f383 8811 	msr	BASEPRI, r3
    ec18:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    ec1c:	7b43      	ldrb	r3, [r0, #13]
    ec1e:	065a      	lsls	r2, r3, #25
    ec20:	d507      	bpl.n	ec32 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    ec22:	4601      	mov	r1, r0
    ec24:	4809      	ldr	r0, [pc, #36]	; (ec4c <z_remove_thread_from_ready_q+0x44>)
    ec26:	f7ff feed 	bl	ea04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    ec2a:	7b63      	ldrb	r3, [r4, #13]
    ec2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ec30:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    ec32:	4b07      	ldr	r3, [pc, #28]	; (ec50 <z_remove_thread_from_ready_q+0x48>)
    ec34:	6898      	ldr	r0, [r3, #8]
    ec36:	1b03      	subs	r3, r0, r4
    ec38:	4258      	negs	r0, r3
    ec3a:	4158      	adcs	r0, r3
    ec3c:	f7ff fef8 	bl	ea30 <update_cache>
	__asm__ volatile(
    ec40:	f385 8811 	msr	BASEPRI, r5
    ec44:	f3bf 8f6f 	isb	sy
}
    ec48:	bd38      	pop	{r3, r4, r5, pc}
    ec4a:	bf00      	nop
    ec4c:	20000690 	.word	0x20000690
    ec50:	20000668 	.word	0x20000668

0000ec54 <pend>:
{
    ec54:	b570      	push	{r4, r5, r6, lr}
    ec56:	4604      	mov	r4, r0
    ec58:	460d      	mov	r5, r1
    ec5a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    ec5c:	f7ff ffd4 	bl	ec08 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    ec60:	7b63      	ldrb	r3, [r4, #13]
    ec62:	f043 0302 	orr.w	r3, r3, #2
    ec66:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    ec68:	b1ed      	cbz	r5, eca6 <pend+0x52>
	return list->head == list;
    ec6a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    ec6c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec6e:	429d      	cmp	r5, r3
    ec70:	d00c      	beq.n	ec8c <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ec72:	b15b      	cbz	r3, ec8c <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
    ec74:	f994 200e 	ldrsb.w	r2, [r4, #14]
    ec78:	f993 100e 	ldrsb.w	r1, [r3, #14]
    ec7c:	4291      	cmp	r1, r2
    ec7e:	dc0c      	bgt.n	ec9a <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
    ec80:	6869      	ldr	r1, [r5, #4]
    ec82:	428b      	cmp	r3, r1
    ec84:	d002      	beq.n	ec8c <pend+0x38>
    ec86:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ec88:	2b00      	cmp	r3, #0
    ec8a:	d1f5      	bne.n	ec78 <pend+0x24>
	node->prev = list->tail;
    ec8c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    ec8e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    ec90:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    ec92:	686b      	ldr	r3, [r5, #4]
    ec94:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ec96:	606c      	str	r4, [r5, #4]
    ec98:	e005      	b.n	eca6 <pend+0x52>
	node->prev = successor->prev;
    ec9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ec9c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    eca0:	685a      	ldr	r2, [r3, #4]
    eca2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    eca4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    eca6:	1c73      	adds	r3, r6, #1
    eca8:	d013      	beq.n	ecd2 <pend+0x7e>
    ecaa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    ecae:	f240 30e7 	movw	r0, #999	; 0x3e7
    ecb2:	2100      	movs	r1, #0
    ecb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ecb8:	fbc5 0106 	smlal	r0, r1, r5, r6
    ecbc:	2300      	movs	r3, #0
    ecbe:	f7fd fbaf 	bl	c420 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    ecc2:	4904      	ldr	r1, [pc, #16]	; (ecd4 <pend+0x80>)
    ecc4:	1c42      	adds	r2, r0, #1
    ecc6:	f104 0018 	add.w	r0, r4, #24
}
    ecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ecce:	f000 b98b 	b.w	efe8 <z_add_timeout>
    ecd2:	bd70      	pop	{r4, r5, r6, pc}
    ecd4:	000108e1 	.word	0x000108e1

0000ecd8 <z_pend_curr>:
{
    ecd8:	b510      	push	{r4, lr}
    ecda:	460c      	mov	r4, r1
    ecdc:	4611      	mov	r1, r2
	pending_current = _current;
    ecde:	4a06      	ldr	r2, [pc, #24]	; (ecf8 <z_pend_curr+0x20>)
    ece0:	6890      	ldr	r0, [r2, #8]
    ece2:	4a06      	ldr	r2, [pc, #24]	; (ecfc <z_pend_curr+0x24>)
    ece4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    ece6:	461a      	mov	r2, r3
    ece8:	f7ff ffb4 	bl	ec54 <pend>
    ecec:	4620      	mov	r0, r4
}
    ecee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecf2:	f7fe bb8f 	b.w	d414 <z_arch_swap>
    ecf6:	bf00      	nop
    ecf8:	20000668 	.word	0x20000668
    ecfc:	20000698 	.word	0x20000698

0000ed00 <z_set_prio>:
{
    ed00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ed04:	4604      	mov	r4, r0
	__asm__ volatile(
    ed06:	f04f 0320 	mov.w	r3, #32
    ed0a:	f3ef 8911 	mrs	r9, BASEPRI
    ed0e:	f383 8811 	msr	BASEPRI, r3
    ed12:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    ed16:	f001 fd92 	bl	1083e <z_is_thread_ready>
    ed1a:	b24e      	sxtb	r6, r1
		if (need_sched) {
    ed1c:	4680      	mov	r8, r0
    ed1e:	b368      	cbz	r0, ed7c <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    ed20:	4d17      	ldr	r5, [pc, #92]	; (ed80 <z_set_prio+0x80>)
    ed22:	4621      	mov	r1, r4
    ed24:	f105 0728 	add.w	r7, r5, #40	; 0x28
    ed28:	4638      	mov	r0, r7
    ed2a:	f7ff fe6b 	bl	ea04 <z_priq_dumb_remove>
	return list->head == list;
    ed2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    ed30:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ed32:	42bb      	cmp	r3, r7
    ed34:	462a      	mov	r2, r5
    ed36:	d00a      	beq.n	ed4e <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ed38:	b14b      	cbz	r3, ed4e <z_set_prio+0x4e>
    ed3a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    ed3c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ed40:	42b0      	cmp	r0, r6
    ed42:	dc0b      	bgt.n	ed5c <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
    ed44:	4299      	cmp	r1, r3
    ed46:	d002      	beq.n	ed4e <z_set_prio+0x4e>
    ed48:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d1f6      	bne.n	ed3c <z_set_prio+0x3c>
	node->prev = list->tail;
    ed4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    ed50:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    ed52:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    ed54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ed56:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ed58:	62d4      	str	r4, [r2, #44]	; 0x2c
    ed5a:	e005      	b.n	ed68 <z_set_prio+0x68>
	node->prev = successor->prev;
    ed5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ed5e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    ed62:	685a      	ldr	r2, [r3, #4]
    ed64:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    ed66:	605c      	str	r4, [r3, #4]
			update_cache(1);
    ed68:	2001      	movs	r0, #1
    ed6a:	f7ff fe61 	bl	ea30 <update_cache>
	__asm__ volatile(
    ed6e:	f389 8811 	msr	BASEPRI, r9
    ed72:	f3bf 8f6f 	isb	sy
}
    ed76:	4640      	mov	r0, r8
    ed78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
    ed7c:	73a6      	strb	r6, [r4, #14]
    ed7e:	e7f6      	b.n	ed6e <z_set_prio+0x6e>
    ed80:	20000668 	.word	0x20000668

0000ed84 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    ed84:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    ed86:	4b04      	ldr	r3, [pc, #16]	; (ed98 <z_sched_init+0x14>)
    ed88:	4608      	mov	r0, r1
    ed8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    ed8e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    ed92:	f7ff bdf7 	b.w	e984 <k_sched_time_slice_set>
    ed96:	bf00      	nop
    ed98:	20000668 	.word	0x20000668

0000ed9c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    ed9c:	4b01      	ldr	r3, [pc, #4]	; (eda4 <z_impl_k_current_get+0x8>)
    ed9e:	6898      	ldr	r0, [r3, #8]
    eda0:	4770      	bx	lr
    eda2:	bf00      	nop
    eda4:	20000668 	.word	0x20000668

0000eda8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    eda8:	b570      	push	{r4, r5, r6, lr}
    edaa:	4604      	mov	r4, r0
	__asm__ volatile(
    edac:	f04f 0320 	mov.w	r3, #32
    edb0:	f3ef 8611 	mrs	r6, BASEPRI
    edb4:	f383 8811 	msr	BASEPRI, r3
    edb8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    edbc:	f001 fdc1 	bl	10942 <z_unpend_first_thread>
	if (thread != NULL) {
    edc0:	4605      	mov	r5, r0
    edc2:	b170      	cbz	r0, ede2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    edc4:	7b43      	ldrb	r3, [r0, #13]
    edc6:	06db      	lsls	r3, r3, #27
    edc8:	d103      	bne.n	edd2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    edca:	6983      	ldr	r3, [r0, #24]
    edcc:	b90b      	cbnz	r3, edd2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    edce:	f7ff fe69 	bl	eaa4 <z_add_thread_to_ready_q>
    edd2:	2300      	movs	r3, #0
    edd4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    edd6:	4631      	mov	r1, r6
}
    edd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    eddc:	4804      	ldr	r0, [pc, #16]	; (edf0 <z_impl_k_sem_give+0x48>)
    edde:	f001 bd50 	b.w	10882 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ede2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    ede6:	429a      	cmp	r2, r3
    ede8:	bf18      	it	ne
    edea:	3301      	addne	r3, #1
    edec:	60a3      	str	r3, [r4, #8]
    edee:	e7f2      	b.n	edd6 <z_impl_k_sem_give+0x2e>
    edf0:	200006c5 	.word	0x200006c5

0000edf4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    edf4:	b410      	push	{r4}
    edf6:	4602      	mov	r2, r0
    edf8:	460b      	mov	r3, r1
    edfa:	f04f 0020 	mov.w	r0, #32
    edfe:	f3ef 8111 	mrs	r1, BASEPRI
    ee02:	f380 8811 	msr	BASEPRI, r0
    ee06:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    ee0a:	6894      	ldr	r4, [r2, #8]
    ee0c:	b14c      	cbz	r4, ee22 <z_impl_k_sem_take+0x2e>
		sem->count--;
    ee0e:	3c01      	subs	r4, #1
    ee10:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    ee12:	f381 8811 	msr	BASEPRI, r1
    ee16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    ee1a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    ee1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee20:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    ee22:	b933      	cbnz	r3, ee32 <z_impl_k_sem_take+0x3e>
    ee24:	f381 8811 	msr	BASEPRI, r1
    ee28:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    ee2c:	f06f 000f 	mvn.w	r0, #15
    ee30:	e7f4      	b.n	ee1c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ee32:	4802      	ldr	r0, [pc, #8]	; (ee3c <z_impl_k_sem_take+0x48>)
}
    ee34:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ee38:	f7ff bf4e 	b.w	ecd8 <z_pend_curr>
    ee3c:	200006c5 	.word	0x200006c5

0000ee40 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    ee40:	b510      	push	{r4, lr}
    ee42:	4602      	mov	r2, r0
	__asm__ volatile(
    ee44:	f04f 0320 	mov.w	r3, #32
    ee48:	f3ef 8411 	mrs	r4, BASEPRI
    ee4c:	f383 8811 	msr	BASEPRI, r3
    ee50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    ee54:	7b43      	ldrb	r3, [r0, #13]
    ee56:	0759      	lsls	r1, r3, #29
    ee58:	d404      	bmi.n	ee64 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    ee5a:	f384 8811 	msr	BASEPRI, r4
    ee5e:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    ee62:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ee64:	f023 0304 	bic.w	r3, r3, #4
    ee68:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    ee6a:	f001 fd97 	bl	1099c <z_is_thread_ready>
    ee6e:	b110      	cbz	r0, ee76 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    ee70:	4610      	mov	r0, r2
    ee72:	f7ff fe17 	bl	eaa4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    ee76:	4621      	mov	r1, r4
}
    ee78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    ee7c:	4801      	ldr	r0, [pc, #4]	; (ee84 <z_impl_k_thread_start+0x44>)
    ee7e:	f001 bd00 	b.w	10882 <z_reschedule>
    ee82:	bf00      	nop
    ee84:	200006c5 	.word	0x200006c5

0000ee88 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    ee88:	b530      	push	{r4, r5, lr}
    ee8a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ee8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    ee8e:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ee90:	9504      	str	r5, [sp, #16]
    ee92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ee94:	9503      	str	r5, [sp, #12]
    ee96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ee98:	9502      	str	r5, [sp, #8]
    ee9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ee9c:	9501      	str	r5, [sp, #4]
    ee9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    eea0:	9500      	str	r5, [sp, #0]
    eea2:	f7fe faf9 	bl	d498 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    eea6:	4b04      	ldr	r3, [pc, #16]	; (eeb8 <z_setup_new_thread+0x30>)
    eea8:	689b      	ldr	r3, [r3, #8]
    eeaa:	b913      	cbnz	r3, eeb2 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    eeac:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    eeae:	b007      	add	sp, #28
    eeb0:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    eeb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    eeb4:	e7fa      	b.n	eeac <z_setup_new_thread+0x24>
    eeb6:	bf00      	nop
    eeb8:	20000668 	.word	0x20000668

0000eebc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    eec0:	4e28      	ldr	r6, [pc, #160]	; (ef64 <z_init_static_threads+0xa8>)
    eec2:	4d29      	ldr	r5, [pc, #164]	; (ef68 <z_init_static_threads+0xac>)
    eec4:	46b0      	mov	r8, r6
{
    eec6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    eec8:	42b5      	cmp	r5, r6
    eeca:	f105 0430 	add.w	r4, r5, #48	; 0x30
    eece:	d310      	bcc.n	eef2 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    eed0:	f7ff fd84 	bl	e9dc <k_sched_lock>
    eed4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    eed8:	f240 36e7 	movw	r6, #999	; 0x3e7
    eedc:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    eede:	4c22      	ldr	r4, [pc, #136]	; (ef68 <z_init_static_threads+0xac>)
    eee0:	f8df a088 	ldr.w	sl, [pc, #136]	; ef6c <z_init_static_threads+0xb0>
    eee4:	4544      	cmp	r4, r8
    eee6:	d321      	bcc.n	ef2c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    eee8:	b007      	add	sp, #28
    eeea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    eeee:	f7ff bdbd 	b.w	ea6c <k_sched_unlock>
		z_setup_new_thread(
    eef2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    eef6:	9305      	str	r3, [sp, #20]
    eef8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    eefc:	9304      	str	r3, [sp, #16]
    eefe:	f854 3c14 	ldr.w	r3, [r4, #-20]
    ef02:	9303      	str	r3, [sp, #12]
    ef04:	f854 3c18 	ldr.w	r3, [r4, #-24]
    ef08:	9302      	str	r3, [sp, #8]
    ef0a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    ef0e:	9301      	str	r3, [sp, #4]
    ef10:	f854 3c20 	ldr.w	r3, [r4, #-32]
    ef14:	9300      	str	r3, [sp, #0]
    ef16:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    ef1a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    ef1e:	f7ff ffb3 	bl	ee88 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ef22:	f854 3c30 	ldr.w	r3, [r4, #-48]
    ef26:	64dd      	str	r5, [r3, #76]	; 0x4c
    ef28:	4625      	mov	r5, r4
    ef2a:	e7cd      	b.n	eec8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    ef2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ef2e:	1c4b      	adds	r3, r1, #1
    ef30:	d004      	beq.n	ef3c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    ef32:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    ef34:	b921      	cbnz	r1, ef40 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    ef36:	4628      	mov	r0, r5
    ef38:	f7ff ff82 	bl	ee40 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    ef3c:	3430      	adds	r4, #48	; 0x30
    ef3e:	e7d1      	b.n	eee4 <z_init_static_threads+0x28>
    ef40:	46b3      	mov	fp, r6
    ef42:	46bc      	mov	ip, r7
    ef44:	fbc9 bc01 	smlal	fp, ip, r9, r1
    ef48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef4c:	2300      	movs	r3, #0
    ef4e:	4658      	mov	r0, fp
    ef50:	4661      	mov	r1, ip
    ef52:	f7fd fa65 	bl	c420 <__aeabi_ldivmod>
    ef56:	4651      	mov	r1, sl
    ef58:	1c42      	adds	r2, r0, #1
    ef5a:	f105 0018 	add.w	r0, r5, #24
    ef5e:	f000 f843 	bl	efe8 <z_add_timeout>
    ef62:	e7eb      	b.n	ef3c <z_init_static_threads+0x80>
    ef64:	20001544 	.word	0x20001544
    ef68:	20001544 	.word	0x20001544
    ef6c:	000108e1 	.word	0x000108e1

0000ef70 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    ef70:	4b03      	ldr	r3, [pc, #12]	; (ef80 <elapsed+0x10>)
    ef72:	681b      	ldr	r3, [r3, #0]
    ef74:	b90b      	cbnz	r3, ef7a <elapsed+0xa>
    ef76:	f7fd be3b 	b.w	cbf0 <z_clock_elapsed>
}
    ef7a:	2000      	movs	r0, #0
    ef7c:	4770      	bx	lr
    ef7e:	bf00      	nop
    ef80:	200006a4 	.word	0x200006a4

0000ef84 <remove_timeout>:
{
    ef84:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ef86:	b140      	cbz	r0, ef9a <remove_timeout+0x16>
    ef88:	4a08      	ldr	r2, [pc, #32]	; (efac <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    ef8a:	6852      	ldr	r2, [r2, #4]
    ef8c:	4290      	cmp	r0, r2
    ef8e:	d004      	beq.n	ef9a <remove_timeout+0x16>
	if (next(t) != NULL) {
    ef90:	b11b      	cbz	r3, ef9a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    ef92:	689a      	ldr	r2, [r3, #8]
    ef94:	6881      	ldr	r1, [r0, #8]
    ef96:	440a      	add	r2, r1
    ef98:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    ef9a:	6842      	ldr	r2, [r0, #4]
    ef9c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    ef9e:	6803      	ldr	r3, [r0, #0]
    efa0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    efa2:	2300      	movs	r3, #0
	node->prev = NULL;
    efa4:	e9c0 3300 	strd	r3, r3, [r0]
}
    efa8:	4770      	bx	lr
    efaa:	bf00      	nop
    efac:	2000146c 	.word	0x2000146c

0000efb0 <next_timeout>:
	return list->head == list;
    efb0:	4b0b      	ldr	r3, [pc, #44]	; (efe0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    efb2:	b510      	push	{r4, lr}
    efb4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    efb6:	429c      	cmp	r4, r3
    efb8:	bf08      	it	eq
    efba:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    efbc:	f7ff ffd8 	bl	ef70 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    efc0:	b154      	cbz	r4, efd8 <next_timeout+0x28>
    efc2:	68a3      	ldr	r3, [r4, #8]
    efc4:	1a18      	subs	r0, r3, r0
    efc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    efca:	4b06      	ldr	r3, [pc, #24]	; (efe4 <next_timeout+0x34>)
    efcc:	691b      	ldr	r3, [r3, #16]
    efce:	b113      	cbz	r3, efd6 <next_timeout+0x26>
    efd0:	4298      	cmp	r0, r3
    efd2:	bfa8      	it	ge
    efd4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    efd6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    efd8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    efdc:	e7f5      	b.n	efca <next_timeout+0x1a>
    efde:	bf00      	nop
    efe0:	2000146c 	.word	0x2000146c
    efe4:	20000668 	.word	0x20000668

0000efe8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    efe8:	b570      	push	{r4, r5, r6, lr}
    efea:	4604      	mov	r4, r0
    efec:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    efee:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    eff0:	f04f 0320 	mov.w	r3, #32
    eff4:	f3ef 8511 	mrs	r5, BASEPRI
    eff8:	f383 8811 	msr	BASEPRI, r3
    effc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    f000:	f7ff ffb6 	bl	ef70 <elapsed>
    f004:	2e01      	cmp	r6, #1
    f006:	bfac      	ite	ge
    f008:	1980      	addge	r0, r0, r6
    f00a:	3001      	addlt	r0, #1
	return list->head == list;
    f00c:	4b17      	ldr	r3, [pc, #92]	; (f06c <z_add_timeout+0x84>)
    f00e:	60a0      	str	r0, [r4, #8]
    f010:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f012:	429a      	cmp	r2, r3
    f014:	d001      	beq.n	f01a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f016:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    f018:	b932      	cbnz	r2, f028 <z_add_timeout+0x40>
	node->prev = list->tail;
    f01a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    f01c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    f01e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    f020:	685a      	ldr	r2, [r3, #4]
    f022:	6014      	str	r4, [r2, #0]
	list->tail = node;
    f024:	605c      	str	r4, [r3, #4]
    f026:	e00b      	b.n	f040 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    f028:	6890      	ldr	r0, [r2, #8]
    f02a:	68a1      	ldr	r1, [r4, #8]
    f02c:	4288      	cmp	r0, r1
    f02e:	dd16      	ble.n	f05e <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    f030:	1a41      	subs	r1, r0, r1
    f032:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    f034:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f036:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    f03a:	6851      	ldr	r1, [r2, #4]
    f03c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    f03e:	6054      	str	r4, [r2, #4]
	return list->head == list;
    f040:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f042:	429a      	cmp	r2, r3
    f044:	d006      	beq.n	f054 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f046:	4294      	cmp	r4, r2
    f048:	d104      	bne.n	f054 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    f04a:	f7ff ffb1 	bl	efb0 <next_timeout>
    f04e:	2100      	movs	r1, #0
    f050:	f7fd fd80 	bl	cb54 <z_clock_set_timeout>
	__asm__ volatile(
    f054:	f385 8811 	msr	BASEPRI, r5
    f058:	f3bf 8f6f 	isb	sy
		}
	}
}
    f05c:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    f05e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    f060:	4296      	cmp	r6, r2
    f062:	60a1      	str	r1, [r4, #8]
    f064:	d0d9      	beq.n	f01a <z_add_timeout+0x32>
    f066:	6812      	ldr	r2, [r2, #0]
    f068:	e7d6      	b.n	f018 <z_add_timeout+0x30>
    f06a:	bf00      	nop
    f06c:	2000146c 	.word	0x2000146c

0000f070 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    f070:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    f074:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f076:	f7ff fd91 	bl	eb9c <z_time_slice>
	__asm__ volatile(
    f07a:	f04f 0320 	mov.w	r3, #32
    f07e:	f3ef 8511 	mrs	r5, BASEPRI
    f082:	f383 8811 	msr	BASEPRI, r3
    f086:	f3bf 8f6f 	isb	sy
    f08a:	4f21      	ldr	r7, [pc, #132]	; (f110 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    f08c:	4e21      	ldr	r6, [pc, #132]	; (f114 <z_clock_announce+0xa4>)
    f08e:	46b8      	mov	r8, r7
	return list->head == list;
    f090:	f8df 9084 	ldr.w	r9, [pc, #132]	; f118 <z_clock_announce+0xa8>
    f094:	6034      	str	r4, [r6, #0]
    f096:	f8d9 4000 	ldr.w	r4, [r9]
    f09a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f09c:	454c      	cmp	r4, r9
    f09e:	e9d7 bc00 	ldrd	fp, ip, [r7]
    f0a2:	d005      	beq.n	f0b0 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f0a4:	b124      	cbz	r4, f0b0 <z_clock_announce+0x40>
    f0a6:	68a3      	ldr	r3, [r4, #8]
    f0a8:	4293      	cmp	r3, r2
    f0aa:	dd14      	ble.n	f0d6 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    f0ac:	1a9b      	subs	r3, r3, r2
    f0ae:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    f0b0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    f0b2:	eb1b 0002 	adds.w	r0, fp, r2
    f0b6:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    f0ba:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    f0be:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    f0c0:	f7ff ff76 	bl	efb0 <next_timeout>
    f0c4:	4621      	mov	r1, r4
    f0c6:	f7fd fd45 	bl	cb54 <z_clock_set_timeout>
	__asm__ volatile(
    f0ca:	f385 8811 	msr	BASEPRI, r5
    f0ce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f0d2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    f0d6:	eb1b 0003 	adds.w	r0, fp, r3
    f0da:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    f0de:	1ad3      	subs	r3, r2, r3
    f0e0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    f0e2:	2300      	movs	r3, #0
		curr_tick += dt;
    f0e4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    f0e8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    f0ea:	4620      	mov	r0, r4
    f0ec:	f7ff ff4a 	bl	ef84 <remove_timeout>
    f0f0:	f385 8811 	msr	BASEPRI, r5
    f0f4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f0f8:	68e3      	ldr	r3, [r4, #12]
    f0fa:	4798      	blx	r3
	__asm__ volatile(
    f0fc:	f04f 0320 	mov.w	r3, #32
    f100:	f3ef 8511 	mrs	r5, BASEPRI
    f104:	f383 8811 	msr	BASEPRI, r3
    f108:	f3bf 8f6f 	isb	sy
    f10c:	e7c3      	b.n	f096 <z_clock_announce+0x26>
    f10e:	bf00      	nop
    f110:	20000000 	.word	0x20000000
    f114:	200006a4 	.word	0x200006a4
    f118:	2000146c 	.word	0x2000146c

0000f11c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    f11c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    f11e:	4c07      	ldr	r4, [pc, #28]	; (f13c <init_static_pools+0x20>)
    f120:	4d07      	ldr	r5, [pc, #28]	; (f140 <init_static_pools+0x24>)
    f122:	42ac      	cmp	r4, r5
    f124:	d301      	bcc.n	f12a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    f126:	2000      	movs	r0, #0
    f128:	bd38      	pop	{r3, r4, r5, pc}
    f12a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    f12e:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    f130:	e9c4 3305 	strd	r3, r3, [r4, #20]
    f134:	f000 feee 	bl	ff14 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    f138:	341c      	adds	r4, #28
    f13a:	e7f2      	b.n	f122 <init_static_pools+0x6>
    f13c:	20001544 	.word	0x20001544
    f140:	20001544 	.word	0x20001544

0000f144 <CC_PalMemCopyPlat>:
    f144:	f001 ba7e 	b.w	10644 <memmove>

0000f148 <CC_PalMemSetZeroPlat>:
    f148:	460a      	mov	r2, r1
    f14a:	2100      	movs	r1, #0
    f14c:	f001 babe 	b.w	106cc <memset>

0000f150 <CC_PalInit>:
    f150:	b510      	push	{r4, lr}
    f152:	4811      	ldr	r0, [pc, #68]	; (f198 <CC_PalInit+0x48>)
    f154:	f000 f848 	bl	f1e8 <CC_PalMutexCreate>
    f158:	b100      	cbz	r0, f15c <CC_PalInit+0xc>
    f15a:	bd10      	pop	{r4, pc}
    f15c:	480f      	ldr	r0, [pc, #60]	; (f19c <CC_PalInit+0x4c>)
    f15e:	f000 f843 	bl	f1e8 <CC_PalMutexCreate>
    f162:	2800      	cmp	r0, #0
    f164:	d1f9      	bne.n	f15a <CC_PalInit+0xa>
    f166:	4c0e      	ldr	r4, [pc, #56]	; (f1a0 <CC_PalInit+0x50>)
    f168:	4620      	mov	r0, r4
    f16a:	f000 f83d 	bl	f1e8 <CC_PalMutexCreate>
    f16e:	2800      	cmp	r0, #0
    f170:	d1f3      	bne.n	f15a <CC_PalInit+0xa>
    f172:	4b0c      	ldr	r3, [pc, #48]	; (f1a4 <CC_PalInit+0x54>)
    f174:	480c      	ldr	r0, [pc, #48]	; (f1a8 <CC_PalInit+0x58>)
    f176:	601c      	str	r4, [r3, #0]
    f178:	f000 f836 	bl	f1e8 <CC_PalMutexCreate>
    f17c:	4601      	mov	r1, r0
    f17e:	2800      	cmp	r0, #0
    f180:	d1eb      	bne.n	f15a <CC_PalInit+0xa>
    f182:	f000 f82d 	bl	f1e0 <CC_PalDmaInit>
    f186:	4604      	mov	r4, r0
    f188:	b108      	cbz	r0, f18e <CC_PalInit+0x3e>
    f18a:	4620      	mov	r0, r4
    f18c:	bd10      	pop	{r4, pc}
    f18e:	f000 f851 	bl	f234 <CC_PalPowerSaveModeInit>
    f192:	4620      	mov	r0, r4
    f194:	e7fa      	b.n	f18c <CC_PalInit+0x3c>
    f196:	bf00      	nop
    f198:	20001480 	.word	0x20001480
    f19c:	20001474 	.word	0x20001474
    f1a0:	2000147c 	.word	0x2000147c
    f1a4:	20001484 	.word	0x20001484
    f1a8:	20001478 	.word	0x20001478

0000f1ac <CC_PalTerminate>:
    f1ac:	b508      	push	{r3, lr}
    f1ae:	4808      	ldr	r0, [pc, #32]	; (f1d0 <CC_PalTerminate+0x24>)
    f1b0:	f000 f824 	bl	f1fc <CC_PalMutexDestroy>
    f1b4:	4807      	ldr	r0, [pc, #28]	; (f1d4 <CC_PalTerminate+0x28>)
    f1b6:	f000 f821 	bl	f1fc <CC_PalMutexDestroy>
    f1ba:	4807      	ldr	r0, [pc, #28]	; (f1d8 <CC_PalTerminate+0x2c>)
    f1bc:	f000 f81e 	bl	f1fc <CC_PalMutexDestroy>
    f1c0:	4806      	ldr	r0, [pc, #24]	; (f1dc <CC_PalTerminate+0x30>)
    f1c2:	f000 f81b 	bl	f1fc <CC_PalMutexDestroy>
    f1c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f1ca:	f000 b80b 	b.w	f1e4 <CC_PalDmaTerminate>
    f1ce:	bf00      	nop
    f1d0:	20001480 	.word	0x20001480
    f1d4:	20001474 	.word	0x20001474
    f1d8:	2000147c 	.word	0x2000147c
    f1dc:	20001478 	.word	0x20001478

0000f1e0 <CC_PalDmaInit>:
    f1e0:	2000      	movs	r0, #0
    f1e2:	4770      	bx	lr

0000f1e4 <CC_PalDmaTerminate>:
    f1e4:	4770      	bx	lr
    f1e6:	bf00      	nop

0000f1e8 <CC_PalMutexCreate>:
    f1e8:	b508      	push	{r3, lr}
    f1ea:	4b03      	ldr	r3, [pc, #12]	; (f1f8 <CC_PalMutexCreate+0x10>)
    f1ec:	6802      	ldr	r2, [r0, #0]
    f1ee:	681b      	ldr	r3, [r3, #0]
    f1f0:	6810      	ldr	r0, [r2, #0]
    f1f2:	4798      	blx	r3
    f1f4:	2000      	movs	r0, #0
    f1f6:	bd08      	pop	{r3, pc}
    f1f8:	20001490 	.word	0x20001490

0000f1fc <CC_PalMutexDestroy>:
    f1fc:	b508      	push	{r3, lr}
    f1fe:	4b03      	ldr	r3, [pc, #12]	; (f20c <CC_PalMutexDestroy+0x10>)
    f200:	6802      	ldr	r2, [r0, #0]
    f202:	685b      	ldr	r3, [r3, #4]
    f204:	6810      	ldr	r0, [r2, #0]
    f206:	4798      	blx	r3
    f208:	2000      	movs	r0, #0
    f20a:	bd08      	pop	{r3, pc}
    f20c:	20001490 	.word	0x20001490

0000f210 <CC_PalMutexLock>:
    f210:	6802      	ldr	r2, [r0, #0]
    f212:	4b02      	ldr	r3, [pc, #8]	; (f21c <CC_PalMutexLock+0xc>)
    f214:	6810      	ldr	r0, [r2, #0]
    f216:	689b      	ldr	r3, [r3, #8]
    f218:	4718      	bx	r3
    f21a:	bf00      	nop
    f21c:	20001490 	.word	0x20001490

0000f220 <CC_PalMutexUnlock>:
    f220:	b508      	push	{r3, lr}
    f222:	4b03      	ldr	r3, [pc, #12]	; (f230 <CC_PalMutexUnlock+0x10>)
    f224:	6802      	ldr	r2, [r0, #0]
    f226:	68db      	ldr	r3, [r3, #12]
    f228:	6810      	ldr	r0, [r2, #0]
    f22a:	4798      	blx	r3
    f22c:	2000      	movs	r0, #0
    f22e:	bd08      	pop	{r3, pc}
    f230:	20001490 	.word	0x20001490

0000f234 <CC_PalPowerSaveModeInit>:
    f234:	b570      	push	{r4, r5, r6, lr}
    f236:	4c09      	ldr	r4, [pc, #36]	; (f25c <CC_PalPowerSaveModeInit+0x28>)
    f238:	4d09      	ldr	r5, [pc, #36]	; (f260 <CC_PalPowerSaveModeInit+0x2c>)
    f23a:	6920      	ldr	r0, [r4, #16]
    f23c:	68ab      	ldr	r3, [r5, #8]
    f23e:	4798      	blx	r3
    f240:	b118      	cbz	r0, f24a <CC_PalPowerSaveModeInit+0x16>
    f242:	4b08      	ldr	r3, [pc, #32]	; (f264 <CC_PalPowerSaveModeInit+0x30>)
    f244:	4808      	ldr	r0, [pc, #32]	; (f268 <CC_PalPowerSaveModeInit+0x34>)
    f246:	685b      	ldr	r3, [r3, #4]
    f248:	4798      	blx	r3
    f24a:	2100      	movs	r1, #0
    f24c:	4a07      	ldr	r2, [pc, #28]	; (f26c <CC_PalPowerSaveModeInit+0x38>)
    f24e:	68eb      	ldr	r3, [r5, #12]
    f250:	6011      	str	r1, [r2, #0]
    f252:	6920      	ldr	r0, [r4, #16]
    f254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f258:	4718      	bx	r3
    f25a:	bf00      	nop
    f25c:	200014a0 	.word	0x200014a0
    f260:	20001490 	.word	0x20001490
    f264:	20001488 	.word	0x20001488
    f268:	00010fdc 	.word	0x00010fdc
    f26c:	200006a8 	.word	0x200006a8

0000f270 <CC_PalPowerSaveModeSelect>:
    f270:	b570      	push	{r4, r5, r6, lr}
    f272:	4c14      	ldr	r4, [pc, #80]	; (f2c4 <CC_PalPowerSaveModeSelect+0x54>)
    f274:	4d14      	ldr	r5, [pc, #80]	; (f2c8 <CC_PalPowerSaveModeSelect+0x58>)
    f276:	4606      	mov	r6, r0
    f278:	68ab      	ldr	r3, [r5, #8]
    f27a:	6920      	ldr	r0, [r4, #16]
    f27c:	4798      	blx	r3
    f27e:	b9f0      	cbnz	r0, f2be <CC_PalPowerSaveModeSelect+0x4e>
    f280:	4a12      	ldr	r2, [pc, #72]	; (f2cc <CC_PalPowerSaveModeSelect+0x5c>)
    f282:	6813      	ldr	r3, [r2, #0]
    f284:	b95e      	cbnz	r6, f29e <CC_PalPowerSaveModeSelect+0x2e>
    f286:	b91b      	cbnz	r3, f290 <CC_PalPowerSaveModeSelect+0x20>
    f288:	2001      	movs	r0, #1
    f28a:	4911      	ldr	r1, [pc, #68]	; (f2d0 <CC_PalPowerSaveModeSelect+0x60>)
    f28c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    f290:	3301      	adds	r3, #1
    f292:	6013      	str	r3, [r2, #0]
    f294:	68eb      	ldr	r3, [r5, #12]
    f296:	6920      	ldr	r0, [r4, #16]
    f298:	4798      	blx	r3
    f29a:	2000      	movs	r0, #0
    f29c:	bd70      	pop	{r4, r5, r6, pc}
    f29e:	2b00      	cmp	r3, #0
    f2a0:	d0f8      	beq.n	f294 <CC_PalPowerSaveModeSelect+0x24>
    f2a2:	2b01      	cmp	r3, #1
    f2a4:	bf08      	it	eq
    f2a6:	490a      	ldreq	r1, [pc, #40]	; (f2d0 <CC_PalPowerSaveModeSelect+0x60>)
    f2a8:	f103 33ff 	add.w	r3, r3, #4294967295
    f2ac:	bf08      	it	eq
    f2ae:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    f2b2:	6920      	ldr	r0, [r4, #16]
    f2b4:	6013      	str	r3, [r2, #0]
    f2b6:	68eb      	ldr	r3, [r5, #12]
    f2b8:	4798      	blx	r3
    f2ba:	2000      	movs	r0, #0
    f2bc:	e7ee      	b.n	f29c <CC_PalPowerSaveModeSelect+0x2c>
    f2be:	4805      	ldr	r0, [pc, #20]	; (f2d4 <CC_PalPowerSaveModeSelect+0x64>)
    f2c0:	bd70      	pop	{r4, r5, r6, pc}
    f2c2:	bf00      	nop
    f2c4:	200014a0 	.word	0x200014a0
    f2c8:	20001490 	.word	0x20001490
    f2cc:	200006a8 	.word	0x200006a8
    f2d0:	50840000 	.word	0x50840000
    f2d4:	ffff8fe9 	.word	0xffff8fe9

0000f2d8 <CC_HalInit>:
    f2d8:	2000      	movs	r0, #0
    f2da:	4770      	bx	lr

0000f2dc <CC_HalTerminate>:
    f2dc:	2000      	movs	r0, #0
    f2de:	4770      	bx	lr

0000f2e0 <CC_HalClearInterruptBit>:
    f2e0:	0543      	lsls	r3, r0, #21
    f2e2:	d503      	bpl.n	f2ec <CC_HalClearInterruptBit+0xc>
    f2e4:	f04f 32ff 	mov.w	r2, #4294967295
    f2e8:	4b02      	ldr	r3, [pc, #8]	; (f2f4 <CC_HalClearInterruptBit+0x14>)
    f2ea:	601a      	str	r2, [r3, #0]
    f2ec:	4b02      	ldr	r3, [pc, #8]	; (f2f8 <CC_HalClearInterruptBit+0x18>)
    f2ee:	6018      	str	r0, [r3, #0]
    f2f0:	4770      	bx	lr
    f2f2:	bf00      	nop
    f2f4:	50841108 	.word	0x50841108
    f2f8:	50841a08 	.word	0x50841a08

0000f2fc <CC_HalMaskInterrupt>:
    f2fc:	4b01      	ldr	r3, [pc, #4]	; (f304 <CC_HalMaskInterrupt+0x8>)
    f2fe:	6018      	str	r0, [r3, #0]
    f300:	4770      	bx	lr
    f302:	bf00      	nop
    f304:	50841a04 	.word	0x50841a04

0000f308 <CC_HalWaitInterruptRND>:
    f308:	b108      	cbz	r0, f30e <CC_HalWaitInterruptRND+0x6>
    f30a:	f000 b803 	b.w	f314 <CC_PalWaitInterruptRND>
    f30e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    f312:	4770      	bx	lr

0000f314 <CC_PalWaitInterruptRND>:
    f314:	4602      	mov	r2, r0
    f316:	4807      	ldr	r0, [pc, #28]	; (f334 <CC_PalWaitInterruptRND+0x20>)
    f318:	6803      	ldr	r3, [r0, #0]
    f31a:	4213      	tst	r3, r2
    f31c:	d0fc      	beq.n	f318 <CC_PalWaitInterruptRND+0x4>
    f31e:	b121      	cbz	r1, f32a <CC_PalWaitInterruptRND+0x16>
    f320:	4b05      	ldr	r3, [pc, #20]	; (f338 <CC_PalWaitInterruptRND+0x24>)
    f322:	4806      	ldr	r0, [pc, #24]	; (f33c <CC_PalWaitInterruptRND+0x28>)
    f324:	681b      	ldr	r3, [r3, #0]
    f326:	600b      	str	r3, [r1, #0]
    f328:	6003      	str	r3, [r0, #0]
    f32a:	4b05      	ldr	r3, [pc, #20]	; (f340 <CC_PalWaitInterruptRND+0x2c>)
    f32c:	2000      	movs	r0, #0
    f32e:	601a      	str	r2, [r3, #0]
    f330:	4770      	bx	lr
    f332:	bf00      	nop
    f334:	50841a00 	.word	0x50841a00
    f338:	50841104 	.word	0x50841104
    f33c:	50841108 	.word	0x50841108
    f340:	50841a08 	.word	0x50841a08

0000f344 <mbedtls_platform_setup>:
    f344:	f000 b8a0 	b.w	f488 <nrf_cc310_platform_init>

0000f348 <mbedtls_platform_zeroize>:
    f348:	b130      	cbz	r0, f358 <mbedtls_platform_zeroize+0x10>
    f34a:	b129      	cbz	r1, f358 <mbedtls_platform_zeroize+0x10>
    f34c:	2300      	movs	r3, #0
    f34e:	4401      	add	r1, r0
    f350:	7003      	strb	r3, [r0, #0]
    f352:	3001      	adds	r0, #1
    f354:	4281      	cmp	r1, r0
    f356:	d1fb      	bne.n	f350 <mbedtls_platform_zeroize+0x8>
    f358:	4770      	bx	lr
    f35a:	bf00      	nop

0000f35c <mbedtls_hardware_poll>:
    f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f360:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    f364:	460f      	mov	r7, r1
    f366:	9205      	str	r2, [sp, #20]
    f368:	2100      	movs	r1, #0
    f36a:	4614      	mov	r4, r2
    f36c:	a812      	add	r0, sp, #72	; 0x48
    f36e:	f44f 7208 	mov.w	r2, #544	; 0x220
    f372:	461e      	mov	r6, r3
    f374:	f001 f9aa 	bl	106cc <memset>
    f378:	2300      	movs	r3, #0
    f37a:	a808      	add	r0, sp, #32
    f37c:	4619      	mov	r1, r3
    f37e:	2228      	movs	r2, #40	; 0x28
    f380:	9306      	str	r3, [sp, #24]
    f382:	f001 f9a3 	bl	106cc <memset>
    f386:	2f00      	cmp	r7, #0
    f388:	d03c      	beq.n	f404 <mbedtls_hardware_poll+0xa8>
    f38a:	2e00      	cmp	r6, #0
    f38c:	d03a      	beq.n	f404 <mbedtls_hardware_poll+0xa8>
    f38e:	2c00      	cmp	r4, #0
    f390:	d038      	beq.n	f404 <mbedtls_hardware_poll+0xa8>
    f392:	2104      	movs	r1, #4
    f394:	a806      	add	r0, sp, #24
    f396:	f7ff fed7 	bl	f148 <CC_PalMemSetZeroPlat>
    f39a:	a808      	add	r0, sp, #32
    f39c:	2128      	movs	r1, #40	; 0x28
    f39e:	f7ff fed3 	bl	f148 <CC_PalMemSetZeroPlat>
    f3a2:	a808      	add	r0, sp, #32
    f3a4:	f000 f832 	bl	f40c <RNG_PLAT_SetUserRngParameters>
    f3a8:	b178      	cbz	r0, f3ca <mbedtls_hardware_poll+0x6e>
    f3aa:	f04f 35ff 	mov.w	r5, #4294967295
    f3ae:	a812      	add	r0, sp, #72	; 0x48
    f3b0:	f44f 7108 	mov.w	r1, #544	; 0x220
    f3b4:	f7ff ffc8 	bl	f348 <mbedtls_platform_zeroize>
    f3b8:	a806      	add	r0, sp, #24
    f3ba:	2104      	movs	r1, #4
    f3bc:	f7ff ffc4 	bl	f348 <mbedtls_platform_zeroize>
    f3c0:	4628      	mov	r0, r5
    f3c2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    f3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3ca:	ab12      	add	r3, sp, #72	; 0x48
    f3cc:	f10d 081c 	add.w	r8, sp, #28
    f3d0:	9003      	str	r0, [sp, #12]
    f3d2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    f3d6:	4602      	mov	r2, r0
    f3d8:	ab05      	add	r3, sp, #20
    f3da:	a908      	add	r1, sp, #32
    f3dc:	f8cd 8000 	str.w	r8, [sp]
    f3e0:	a806      	add	r0, sp, #24
    f3e2:	f000 fce9 	bl	fdb8 <LLF_RND_GetTrngSource>
    f3e6:	2800      	cmp	r0, #0
    f3e8:	d1df      	bne.n	f3aa <mbedtls_hardware_poll+0x4e>
    f3ea:	6833      	ldr	r3, [r6, #0]
    f3ec:	42a3      	cmp	r3, r4
    f3ee:	d3dc      	bcc.n	f3aa <mbedtls_hardware_poll+0x4e>
    f3f0:	f8d8 1000 	ldr.w	r1, [r8]
    f3f4:	4605      	mov	r5, r0
    f3f6:	3108      	adds	r1, #8
    f3f8:	4638      	mov	r0, r7
    f3fa:	4622      	mov	r2, r4
    f3fc:	f7ff fea2 	bl	f144 <CC_PalMemCopyPlat>
    f400:	6034      	str	r4, [r6, #0]
    f402:	e7d4      	b.n	f3ae <mbedtls_hardware_poll+0x52>
    f404:	f04f 35ff 	mov.w	r5, #4294967295
    f408:	e7da      	b.n	f3c0 <mbedtls_hardware_poll+0x64>
    f40a:	bf00      	nop

0000f40c <RNG_PLAT_SetUserRngParameters>:
    f40c:	231c      	movs	r3, #28
    f40e:	b530      	push	{r4, r5, lr}
    f410:	b083      	sub	sp, #12
    f412:	a902      	add	r1, sp, #8
    f414:	f841 3d04 	str.w	r3, [r1, #-4]!
    f418:	4604      	mov	r4, r0
    f41a:	f000 f9b1 	bl	f780 <CC_PalTrngParamGet>
    f41e:	4605      	mov	r5, r0
    f420:	b9d8      	cbnz	r0, f45a <RNG_PLAT_SetUserRngParameters+0x4e>
    f422:	9b01      	ldr	r3, [sp, #4]
    f424:	2b1c      	cmp	r3, #28
    f426:	d11b      	bne.n	f460 <RNG_PLAT_SetUserRngParameters+0x54>
    f428:	e9d4 3200 	ldrd	r3, r2, [r4]
    f42c:	2101      	movs	r1, #1
    f42e:	3300      	adds	r3, #0
    f430:	61e1      	str	r1, [r4, #28]
    f432:	bf18      	it	ne
    f434:	2301      	movne	r3, #1
    f436:	b10a      	cbz	r2, f43c <RNG_PLAT_SetUserRngParameters+0x30>
    f438:	f043 0302 	orr.w	r3, r3, #2
    f43c:	68a2      	ldr	r2, [r4, #8]
    f43e:	b932      	cbnz	r2, f44e <RNG_PLAT_SetUserRngParameters+0x42>
    f440:	68e2      	ldr	r2, [r4, #12]
    f442:	b9aa      	cbnz	r2, f470 <RNG_PLAT_SetUserRngParameters+0x64>
    f444:	e9c4 3208 	strd	r3, r2, [r4, #32]
    f448:	b93b      	cbnz	r3, f45a <RNG_PLAT_SetUserRngParameters+0x4e>
    f44a:	4d0d      	ldr	r5, [pc, #52]	; (f480 <RNG_PLAT_SetUserRngParameters+0x74>)
    f44c:	e009      	b.n	f462 <RNG_PLAT_SetUserRngParameters+0x56>
    f44e:	68e2      	ldr	r2, [r4, #12]
    f450:	f043 0304 	orr.w	r3, r3, #4
    f454:	b962      	cbnz	r2, f470 <RNG_PLAT_SetUserRngParameters+0x64>
    f456:	e9c4 3208 	strd	r3, r2, [r4, #32]
    f45a:	4628      	mov	r0, r5
    f45c:	b003      	add	sp, #12
    f45e:	bd30      	pop	{r4, r5, pc}
    f460:	4d08      	ldr	r5, [pc, #32]	; (f484 <RNG_PLAT_SetUserRngParameters+0x78>)
    f462:	4620      	mov	r0, r4
    f464:	211c      	movs	r1, #28
    f466:	f7ff fe6f 	bl	f148 <CC_PalMemSetZeroPlat>
    f46a:	4628      	mov	r0, r5
    f46c:	b003      	add	sp, #12
    f46e:	bd30      	pop	{r4, r5, pc}
    f470:	2200      	movs	r2, #0
    f472:	4628      	mov	r0, r5
    f474:	f043 0308 	orr.w	r3, r3, #8
    f478:	e9c4 3208 	strd	r3, r2, [r4, #32]
    f47c:	b003      	add	sp, #12
    f47e:	bd30      	pop	{r4, r5, pc}
    f480:	00f00c0e 	.word	0x00f00c0e
    f484:	00f00c37 	.word	0x00f00c37

0000f488 <nrf_cc310_platform_init>:
    f488:	b510      	push	{r4, lr}
    f48a:	4c0c      	ldr	r4, [pc, #48]	; (f4bc <nrf_cc310_platform_init+0x34>)
    f48c:	6823      	ldr	r3, [r4, #0]
    f48e:	b113      	cbz	r3, f496 <nrf_cc310_platform_init+0xe>
    f490:	4b0b      	ldr	r3, [pc, #44]	; (f4c0 <nrf_cc310_platform_init+0x38>)
    f492:	681b      	ldr	r3, [r3, #0]
    f494:	b96b      	cbnz	r3, f4b2 <nrf_cc310_platform_init+0x2a>
    f496:	f000 f931 	bl	f6fc <CC_LibInit>
    f49a:	b138      	cbz	r0, f4ac <nrf_cc310_platform_init+0x24>
    f49c:	3801      	subs	r0, #1
    f49e:	2806      	cmp	r0, #6
    f4a0:	bf96      	itet	ls
    f4a2:	4b08      	ldrls	r3, [pc, #32]	; (f4c4 <nrf_cc310_platform_init+0x3c>)
    f4a4:	4808      	ldrhi	r0, [pc, #32]	; (f4c8 <nrf_cc310_platform_init+0x40>)
    f4a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    f4aa:	bd10      	pop	{r4, pc}
    f4ac:	2201      	movs	r2, #1
    f4ae:	4b04      	ldr	r3, [pc, #16]	; (f4c0 <nrf_cc310_platform_init+0x38>)
    f4b0:	601a      	str	r2, [r3, #0]
    f4b2:	2301      	movs	r3, #1
    f4b4:	2000      	movs	r0, #0
    f4b6:	6023      	str	r3, [r4, #0]
    f4b8:	bd10      	pop	{r4, pc}
    f4ba:	bf00      	nop
    f4bc:	200006ac 	.word	0x200006ac
    f4c0:	200006b0 	.word	0x200006b0
    f4c4:	00010ffc 	.word	0x00010ffc
    f4c8:	ffff8ffe 	.word	0xffff8ffe

0000f4cc <nrf_cc310_platform_init_no_rng>:
    f4cc:	b510      	push	{r4, lr}
    f4ce:	4c09      	ldr	r4, [pc, #36]	; (f4f4 <nrf_cc310_platform_init_no_rng+0x28>)
    f4d0:	6823      	ldr	r3, [r4, #0]
    f4d2:	b11b      	cbz	r3, f4dc <nrf_cc310_platform_init_no_rng+0x10>
    f4d4:	2301      	movs	r3, #1
    f4d6:	2000      	movs	r0, #0
    f4d8:	6023      	str	r3, [r4, #0]
    f4da:	bd10      	pop	{r4, pc}
    f4dc:	f000 f87c 	bl	f5d8 <CC_LibInitNoRng>
    f4e0:	2800      	cmp	r0, #0
    f4e2:	d0f7      	beq.n	f4d4 <nrf_cc310_platform_init_no_rng+0x8>
    f4e4:	3801      	subs	r0, #1
    f4e6:	2806      	cmp	r0, #6
    f4e8:	bf96      	itet	ls
    f4ea:	4b03      	ldrls	r3, [pc, #12]	; (f4f8 <nrf_cc310_platform_init_no_rng+0x2c>)
    f4ec:	4803      	ldrhi	r0, [pc, #12]	; (f4fc <nrf_cc310_platform_init_no_rng+0x30>)
    f4ee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    f4f2:	bd10      	pop	{r4, pc}
    f4f4:	200006ac 	.word	0x200006ac
    f4f8:	00010ffc 	.word	0x00010ffc
    f4fc:	ffff8ffe 	.word	0xffff8ffe

0000f500 <nrf_cc310_platform_abort>:
    f500:	f3bf 8f4f 	dsb	sy
    f504:	4905      	ldr	r1, [pc, #20]	; (f51c <nrf_cc310_platform_abort+0x1c>)
    f506:	4b06      	ldr	r3, [pc, #24]	; (f520 <nrf_cc310_platform_abort+0x20>)
    f508:	68ca      	ldr	r2, [r1, #12]
    f50a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f50e:	4313      	orrs	r3, r2
    f510:	60cb      	str	r3, [r1, #12]
    f512:	f3bf 8f4f 	dsb	sy
    f516:	bf00      	nop
    f518:	e7fd      	b.n	f516 <nrf_cc310_platform_abort+0x16>
    f51a:	bf00      	nop
    f51c:	e000ed00 	.word	0xe000ed00
    f520:	05fa0004 	.word	0x05fa0004

0000f524 <CC_PalAbort>:
    f524:	4b01      	ldr	r3, [pc, #4]	; (f52c <CC_PalAbort+0x8>)
    f526:	685b      	ldr	r3, [r3, #4]
    f528:	4718      	bx	r3
    f52a:	bf00      	nop
    f52c:	20001488 	.word	0x20001488

0000f530 <nrf_cc310_platform_set_abort>:
    f530:	4b02      	ldr	r3, [pc, #8]	; (f53c <nrf_cc310_platform_set_abort+0xc>)
    f532:	e9d0 1200 	ldrd	r1, r2, [r0]
    f536:	e9c3 1200 	strd	r1, r2, [r3]
    f53a:	4770      	bx	lr
    f53c:	20001488 	.word	0x20001488

0000f540 <mutex_free>:
    f540:	4770      	bx	lr
    f542:	bf00      	nop

0000f544 <mutex_unlock>:
    f544:	b510      	push	{r4, lr}
    f546:	4604      	mov	r4, r0
    f548:	b120      	cbz	r0, f554 <mutex_unlock+0x10>
    f54a:	f3bf 8f5f 	dmb	sy
    f54e:	2000      	movs	r0, #0
    f550:	6020      	str	r0, [r4, #0]
    f552:	bd10      	pop	{r4, pc}
    f554:	4803      	ldr	r0, [pc, #12]	; (f564 <mutex_unlock+0x20>)
    f556:	f7ff ffe5 	bl	f524 <CC_PalAbort>
    f55a:	f3bf 8f5f 	dmb	sy
    f55e:	2000      	movs	r0, #0
    f560:	6020      	str	r0, [r4, #0]
    f562:	bd10      	pop	{r4, pc}
    f564:	0001103c 	.word	0x0001103c

0000f568 <mutex_init>:
    f568:	b510      	push	{r4, lr}
    f56a:	4604      	mov	r4, r0
    f56c:	b110      	cbz	r0, f574 <mutex_init+0xc>
    f56e:	2300      	movs	r3, #0
    f570:	6023      	str	r3, [r4, #0]
    f572:	bd10      	pop	{r4, pc}
    f574:	4802      	ldr	r0, [pc, #8]	; (f580 <mutex_init+0x18>)
    f576:	f7ff ffd5 	bl	f524 <CC_PalAbort>
    f57a:	2300      	movs	r3, #0
    f57c:	6023      	str	r3, [r4, #0]
    f57e:	bd10      	pop	{r4, pc}
    f580:	00011018 	.word	0x00011018

0000f584 <mutex_lock>:
    f584:	b150      	cbz	r0, f59c <mutex_lock+0x18>
    f586:	2201      	movs	r2, #1
    f588:	e8d0 3fef 	ldaex	r3, [r0]
    f58c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f590:	2900      	cmp	r1, #0
    f592:	d1f9      	bne.n	f588 <mutex_lock+0x4>
    f594:	2b01      	cmp	r3, #1
    f596:	d0f7      	beq.n	f588 <mutex_lock+0x4>
    f598:	f3bf 8f5f 	dmb	sy
    f59c:	2000      	movs	r0, #0
    f59e:	4770      	bx	lr

0000f5a0 <nrf_cc310_platform_set_mutexes>:
    f5a0:	b470      	push	{r4, r5, r6}
    f5a2:	4b0b      	ldr	r3, [pc, #44]	; (f5d0 <nrf_cc310_platform_set_mutexes+0x30>)
    f5a4:	6806      	ldr	r6, [r0, #0]
    f5a6:	68c2      	ldr	r2, [r0, #12]
    f5a8:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    f5ac:	e9c3 4202 	strd	r4, r2, [r3, #8]
    f5b0:	e9c3 6500 	strd	r6, r5, [r3]
    f5b4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    f5b8:	680e      	ldr	r6, [r1, #0]
    f5ba:	4b06      	ldr	r3, [pc, #24]	; (f5d4 <nrf_cc310_platform_set_mutexes+0x34>)
    f5bc:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    f5c0:	e9c3 6500 	strd	r6, r5, [r3]
    f5c4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    f5c8:	611a      	str	r2, [r3, #16]
    f5ca:	bc70      	pop	{r4, r5, r6}
    f5cc:	4770      	bx	lr
    f5ce:	bf00      	nop
    f5d0:	20001490 	.word	0x20001490
    f5d4:	200014a0 	.word	0x200014a0

0000f5d8 <CC_LibInitNoRng>:
    f5d8:	b510      	push	{r4, lr}
    f5da:	f7ff fe7d 	bl	f2d8 <CC_HalInit>
    f5de:	b970      	cbnz	r0, f5fe <CC_LibInitNoRng+0x26>
    f5e0:	f7ff fdb6 	bl	f150 <CC_PalInit>
    f5e4:	b980      	cbnz	r0, f608 <CC_LibInitNoRng+0x30>
    f5e6:	f7ff fe43 	bl	f270 <CC_PalPowerSaveModeSelect>
    f5ea:	b980      	cbnz	r0, f60e <CC_LibInitNoRng+0x36>
    f5ec:	4b11      	ldr	r3, [pc, #68]	; (f634 <CC_LibInitNoRng+0x5c>)
    f5ee:	681b      	ldr	r3, [r3, #0]
    f5f0:	0e1b      	lsrs	r3, r3, #24
    f5f2:	2bf0      	cmp	r3, #240	; 0xf0
    f5f4:	d00d      	beq.n	f612 <CC_LibInitNoRng+0x3a>
    f5f6:	2406      	movs	r4, #6
    f5f8:	f7ff fe70 	bl	f2dc <CC_HalTerminate>
    f5fc:	e000      	b.n	f600 <CC_LibInitNoRng+0x28>
    f5fe:	2403      	movs	r4, #3
    f600:	f7ff fdd4 	bl	f1ac <CC_PalTerminate>
    f604:	4620      	mov	r0, r4
    f606:	bd10      	pop	{r4, pc}
    f608:	2404      	movs	r4, #4
    f60a:	4620      	mov	r0, r4
    f60c:	bd10      	pop	{r4, pc}
    f60e:	2400      	movs	r4, #0
    f610:	e7f2      	b.n	f5f8 <CC_LibInitNoRng+0x20>
    f612:	4a09      	ldr	r2, [pc, #36]	; (f638 <CC_LibInitNoRng+0x60>)
    f614:	4b09      	ldr	r3, [pc, #36]	; (f63c <CC_LibInitNoRng+0x64>)
    f616:	6812      	ldr	r2, [r2, #0]
    f618:	429a      	cmp	r2, r3
    f61a:	d001      	beq.n	f620 <CC_LibInitNoRng+0x48>
    f61c:	2407      	movs	r4, #7
    f61e:	e7eb      	b.n	f5f8 <CC_LibInitNoRng+0x20>
    f620:	2001      	movs	r0, #1
    f622:	f7ff fe25 	bl	f270 <CC_PalPowerSaveModeSelect>
    f626:	2800      	cmp	r0, #0
    f628:	d1f1      	bne.n	f60e <CC_LibInitNoRng+0x36>
    f62a:	4b05      	ldr	r3, [pc, #20]	; (f640 <CC_LibInitNoRng+0x68>)
    f62c:	4604      	mov	r4, r0
    f62e:	6018      	str	r0, [r3, #0]
    f630:	e7e8      	b.n	f604 <CC_LibInitNoRng+0x2c>
    f632:	bf00      	nop
    f634:	50841928 	.word	0x50841928
    f638:	50841a24 	.word	0x50841a24
    f63c:	20e00000 	.word	0x20e00000
    f640:	50841a0c 	.word	0x50841a0c

0000f644 <CC_LibInitRngModule>:
    f644:	b530      	push	{r4, r5, lr}
    f646:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    f64a:	f44f 7208 	mov.w	r2, #544	; 0x220
    f64e:	2100      	movs	r1, #0
    f650:	a80c      	add	r0, sp, #48	; 0x30
    f652:	f001 f83b 	bl	106cc <memset>
    f656:	2300      	movs	r3, #0
    f658:	a802      	add	r0, sp, #8
    f65a:	4619      	mov	r1, r3
    f65c:	2228      	movs	r2, #40	; 0x28
    f65e:	9301      	str	r3, [sp, #4]
    f660:	f001 f834 	bl	106cc <memset>
    f664:	a802      	add	r0, sp, #8
    f666:	f7ff fed1 	bl	f40c <RNG_PLAT_SetUserRngParameters>
    f66a:	b118      	cbz	r0, f674 <CC_LibInitRngModule+0x30>
    f66c:	2005      	movs	r0, #5
    f66e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    f672:	bd30      	pop	{r4, r5, pc}
    f674:	4d1c      	ldr	r5, [pc, #112]	; (f6e8 <CC_LibInitRngModule+0xa4>)
    f676:	f04f 31ff 	mov.w	r1, #4294967295
    f67a:	6828      	ldr	r0, [r5, #0]
    f67c:	f7ff fdc8 	bl	f210 <CC_PalMutexLock>
    f680:	4604      	mov	r4, r0
    f682:	b9f0      	cbnz	r0, f6c2 <CC_LibInitRngModule+0x7e>
    f684:	2000      	movs	r0, #0
    f686:	f7ff fdf3 	bl	f270 <CC_PalPowerSaveModeSelect>
    f68a:	b9b0      	cbnz	r0, f6ba <CC_LibInitRngModule+0x76>
    f68c:	aa0c      	add	r2, sp, #48	; 0x30
    f68e:	a902      	add	r1, sp, #8
    f690:	a801      	add	r0, sp, #4
    f692:	f000 fbd5 	bl	fe40 <LLF_RND_RunTrngStartupTest>
    f696:	4604      	mov	r4, r0
    f698:	2001      	movs	r0, #1
    f69a:	f7ff fde9 	bl	f270 <CC_PalPowerSaveModeSelect>
    f69e:	b9f0      	cbnz	r0, f6de <CC_LibInitRngModule+0x9a>
    f6a0:	6828      	ldr	r0, [r5, #0]
    f6a2:	f7ff fdbd 	bl	f220 <CC_PalMutexUnlock>
    f6a6:	b110      	cbz	r0, f6ae <CC_LibInitRngModule+0x6a>
    f6a8:	4810      	ldr	r0, [pc, #64]	; (f6ec <CC_LibInitRngModule+0xa8>)
    f6aa:	f7ff ff3b 	bl	f524 <CC_PalAbort>
    f6ae:	4620      	mov	r0, r4
    f6b0:	2c00      	cmp	r4, #0
    f6b2:	d1db      	bne.n	f66c <CC_LibInitRngModule+0x28>
    f6b4:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    f6b8:	bd30      	pop	{r4, r5, pc}
    f6ba:	480d      	ldr	r0, [pc, #52]	; (f6f0 <CC_LibInitRngModule+0xac>)
    f6bc:	f7ff ff32 	bl	f524 <CC_PalAbort>
    f6c0:	e7e4      	b.n	f68c <CC_LibInitRngModule+0x48>
    f6c2:	480c      	ldr	r0, [pc, #48]	; (f6f4 <CC_LibInitRngModule+0xb0>)
    f6c4:	f7ff ff2e 	bl	f524 <CC_PalAbort>
    f6c8:	2c01      	cmp	r4, #1
    f6ca:	d1db      	bne.n	f684 <CC_LibInitRngModule+0x40>
    f6cc:	6828      	ldr	r0, [r5, #0]
    f6ce:	f7ff fda7 	bl	f220 <CC_PalMutexUnlock>
    f6d2:	2800      	cmp	r0, #0
    f6d4:	d0ca      	beq.n	f66c <CC_LibInitRngModule+0x28>
    f6d6:	4805      	ldr	r0, [pc, #20]	; (f6ec <CC_LibInitRngModule+0xa8>)
    f6d8:	f7ff ff24 	bl	f524 <CC_PalAbort>
    f6dc:	e7c6      	b.n	f66c <CC_LibInitRngModule+0x28>
    f6de:	4806      	ldr	r0, [pc, #24]	; (f6f8 <CC_LibInitRngModule+0xb4>)
    f6e0:	f7ff ff20 	bl	f524 <CC_PalAbort>
    f6e4:	e7dc      	b.n	f6a0 <CC_LibInitRngModule+0x5c>
    f6e6:	bf00      	nop
    f6e8:	20001484 	.word	0x20001484
    f6ec:	00011074 	.word	0x00011074
    f6f0:	0001108c 	.word	0x0001108c
    f6f4:	0001105c 	.word	0x0001105c
    f6f8:	000110ac 	.word	0x000110ac

0000f6fc <CC_LibInit>:
    f6fc:	b508      	push	{r3, lr}
    f6fe:	f7ff fdeb 	bl	f2d8 <CC_HalInit>
    f702:	b118      	cbz	r0, f70c <CC_LibInit+0x10>
    f704:	f7ff fd52 	bl	f1ac <CC_PalTerminate>
    f708:	2003      	movs	r0, #3
    f70a:	bd08      	pop	{r3, pc}
    f70c:	f7ff fd20 	bl	f150 <CC_PalInit>
    f710:	b968      	cbnz	r0, f72e <CC_LibInit+0x32>
    f712:	f7ff fdad 	bl	f270 <CC_PalPowerSaveModeSelect>
    f716:	b960      	cbnz	r0, f732 <CC_LibInit+0x36>
    f718:	4b15      	ldr	r3, [pc, #84]	; (f770 <CC_LibInit+0x74>)
    f71a:	681b      	ldr	r3, [r3, #0]
    f71c:	0e1b      	lsrs	r3, r3, #24
    f71e:	2bf0      	cmp	r3, #240	; 0xf0
    f720:	d012      	beq.n	f748 <CC_LibInit+0x4c>
    f722:	f7ff fddb 	bl	f2dc <CC_HalTerminate>
    f726:	f7ff fd41 	bl	f1ac <CC_PalTerminate>
    f72a:	2006      	movs	r0, #6
    f72c:	bd08      	pop	{r3, pc}
    f72e:	2004      	movs	r0, #4
    f730:	bd08      	pop	{r3, pc}
    f732:	f7ff fdd3 	bl	f2dc <CC_HalTerminate>
    f736:	f7ff fd39 	bl	f1ac <CC_PalTerminate>
    f73a:	f7ff ff83 	bl	f644 <CC_LibInitRngModule>
    f73e:	2800      	cmp	r0, #0
    f740:	bf0c      	ite	eq
    f742:	2000      	moveq	r0, #0
    f744:	2005      	movne	r0, #5
    f746:	bd08      	pop	{r3, pc}
    f748:	4a0a      	ldr	r2, [pc, #40]	; (f774 <CC_LibInit+0x78>)
    f74a:	4b0b      	ldr	r3, [pc, #44]	; (f778 <CC_LibInit+0x7c>)
    f74c:	6812      	ldr	r2, [r2, #0]
    f74e:	429a      	cmp	r2, r3
    f750:	d005      	beq.n	f75e <CC_LibInit+0x62>
    f752:	f7ff fdc3 	bl	f2dc <CC_HalTerminate>
    f756:	f7ff fd29 	bl	f1ac <CC_PalTerminate>
    f75a:	2007      	movs	r0, #7
    f75c:	bd08      	pop	{r3, pc}
    f75e:	2001      	movs	r0, #1
    f760:	f7ff fd86 	bl	f270 <CC_PalPowerSaveModeSelect>
    f764:	2800      	cmp	r0, #0
    f766:	d1e4      	bne.n	f732 <CC_LibInit+0x36>
    f768:	4b04      	ldr	r3, [pc, #16]	; (f77c <CC_LibInit+0x80>)
    f76a:	6018      	str	r0, [r3, #0]
    f76c:	e7e5      	b.n	f73a <CC_LibInit+0x3e>
    f76e:	bf00      	nop
    f770:	50841928 	.word	0x50841928
    f774:	50841a24 	.word	0x50841a24
    f778:	20e00000 	.word	0x20e00000
    f77c:	50841a0c 	.word	0x50841a0c

0000f780 <CC_PalTrngParamGet>:
    f780:	b118      	cbz	r0, f78a <CC_PalTrngParamGet+0xa>
    f782:	b111      	cbz	r1, f78a <CC_PalTrngParamGet+0xa>
    f784:	680b      	ldr	r3, [r1, #0]
    f786:	2b1c      	cmp	r3, #28
    f788:	d001      	beq.n	f78e <CC_PalTrngParamGet+0xe>
    f78a:	2001      	movs	r0, #1
    f78c:	4770      	bx	lr
    f78e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f792:	4a3a      	ldr	r2, [pc, #232]	; (f87c <CC_PalTrngParamGet+0xfc>)
    f794:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    f798:	4291      	cmp	r1, r2
    f79a:	d05a      	beq.n	f852 <CC_PalTrngParamGet+0xd2>
    f79c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    f7a0:	3201      	adds	r2, #1
    f7a2:	d056      	beq.n	f852 <CC_PalTrngParamGet+0xd2>
    f7a4:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    f7a8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f7ac:	6002      	str	r2, [r0, #0]
    f7ae:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    f7b2:	4a33      	ldr	r2, [pc, #204]	; (f880 <CC_PalTrngParamGet+0x100>)
    f7b4:	4291      	cmp	r1, r2
    f7b6:	d05e      	beq.n	f876 <CC_PalTrngParamGet+0xf6>
    f7b8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    f7bc:	3201      	adds	r2, #1
    f7be:	d05a      	beq.n	f876 <CC_PalTrngParamGet+0xf6>
    f7c0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    f7c4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f7c8:	6042      	str	r2, [r0, #4]
    f7ca:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    f7ce:	f512 7f94 	cmn.w	r2, #296	; 0x128
    f7d2:	d04d      	beq.n	f870 <CC_PalTrngParamGet+0xf0>
    f7d4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    f7d8:	3201      	adds	r2, #1
    f7da:	d049      	beq.n	f870 <CC_PalTrngParamGet+0xf0>
    f7dc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    f7e0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f7e4:	6082      	str	r2, [r0, #8]
    f7e6:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    f7ea:	4a26      	ldr	r2, [pc, #152]	; (f884 <CC_PalTrngParamGet+0x104>)
    f7ec:	4291      	cmp	r1, r2
    f7ee:	d03c      	beq.n	f86a <CC_PalTrngParamGet+0xea>
    f7f0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    f7f4:	3201      	adds	r2, #1
    f7f6:	d038      	beq.n	f86a <CC_PalTrngParamGet+0xea>
    f7f8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    f7fc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f800:	60c2      	str	r2, [r0, #12]
    f802:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    f806:	3270      	adds	r2, #112	; 0x70
    f808:	d02d      	beq.n	f866 <CC_PalTrngParamGet+0xe6>
    f80a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    f80e:	3201      	adds	r2, #1
    f810:	d029      	beq.n	f866 <CC_PalTrngParamGet+0xe6>
    f812:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    f816:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f81a:	6102      	str	r2, [r0, #16]
    f81c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    f820:	32af      	adds	r2, #175	; 0xaf
    f822:	d01e      	beq.n	f862 <CC_PalTrngParamGet+0xe2>
    f824:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    f828:	3201      	adds	r2, #1
    f82a:	d01a      	beq.n	f862 <CC_PalTrngParamGet+0xe2>
    f82c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    f830:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f834:	6142      	str	r2, [r0, #20]
    f836:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    f83a:	4a13      	ldr	r2, [pc, #76]	; (f888 <CC_PalTrngParamGet+0x108>)
    f83c:	4291      	cmp	r1, r2
    f83e:	d00b      	beq.n	f858 <CC_PalTrngParamGet+0xd8>
    f840:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    f844:	3201      	adds	r2, #1
    f846:	d007      	beq.n	f858 <CC_PalTrngParamGet+0xd8>
    f848:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    f84c:	6183      	str	r3, [r0, #24]
    f84e:	2000      	movs	r0, #0
    f850:	4770      	bx	lr
    f852:	f640 02fc 	movw	r2, #2300	; 0x8fc
    f856:	e7a7      	b.n	f7a8 <CC_PalTrngParamGet+0x28>
    f858:	f240 3337 	movw	r3, #823	; 0x337
    f85c:	6183      	str	r3, [r0, #24]
    f85e:	2000      	movs	r0, #0
    f860:	4770      	bx	lr
    f862:	2251      	movs	r2, #81	; 0x51
    f864:	e7e4      	b.n	f830 <CC_PalTrngParamGet+0xb0>
    f866:	2290      	movs	r2, #144	; 0x90
    f868:	e7d5      	b.n	f816 <CC_PalTrngParamGet+0x96>
    f86a:	f642 1204 	movw	r2, #10500	; 0x2904
    f86e:	e7c5      	b.n	f7fc <CC_PalTrngParamGet+0x7c>
    f870:	f640 62d8 	movw	r2, #3800	; 0xed8
    f874:	e7b4      	b.n	f7e0 <CC_PalTrngParamGet+0x60>
    f876:	f242 02d0 	movw	r2, #8400	; 0x20d0
    f87a:	e7a3      	b.n	f7c4 <CC_PalTrngParamGet+0x44>
    f87c:	fffff8fc 	.word	0xfffff8fc
    f880:	ffff20d0 	.word	0xffff20d0
    f884:	ffff2904 	.word	0xffff2904
    f888:	fffff337 	.word	0xfffff337

0000f88c <LLF_RND_AdaptiveProportionTest>:
    f88c:	b3a8      	cbz	r0, f8fa <LLF_RND_AdaptiveProportionTest+0x6e>
    f88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f892:	1e4c      	subs	r4, r1, #1
    f894:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    f898:	d22c      	bcs.n	f8f4 <LLF_RND_AdaptiveProportionTest+0x68>
    f89a:	b35b      	cbz	r3, f8f4 <LLF_RND_AdaptiveProportionTest+0x68>
    f89c:	b352      	cbz	r2, f8f4 <LLF_RND_AdaptiveProportionTest+0x68>
    f89e:	f04f 0c00 	mov.w	ip, #0
    f8a2:	00c9      	lsls	r1, r1, #3
    f8a4:	46e6      	mov	lr, ip
    f8a6:	4665      	mov	r5, ip
    f8a8:	4664      	mov	r4, ip
    f8aa:	1e4f      	subs	r7, r1, #1
    f8ac:	f103 38ff 	add.w	r8, r3, #4294967295
    f8b0:	e00c      	b.n	f8cc <LLF_RND_AdaptiveProportionTest+0x40>
    f8b2:	42ab      	cmp	r3, r5
    f8b4:	d016      	beq.n	f8e4 <LLF_RND_AdaptiveProportionTest+0x58>
    f8b6:	458e      	cmp	lr, r1
    f8b8:	d101      	bne.n	f8be <LLF_RND_AdaptiveProportionTest+0x32>
    f8ba:	f10c 0c01 	add.w	ip, ip, #1
    f8be:	45a8      	cmp	r8, r5
    f8c0:	d016      	beq.n	f8f0 <LLF_RND_AdaptiveProportionTest+0x64>
    f8c2:	3401      	adds	r4, #1
    f8c4:	42bc      	cmp	r4, r7
    f8c6:	f105 0501 	add.w	r5, r5, #1
    f8ca:	d818      	bhi.n	f8fe <LLF_RND_AdaptiveProportionTest+0x72>
    f8cc:	0961      	lsrs	r1, r4, #5
    f8ce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    f8d2:	f004 061f 	and.w	r6, r4, #31
    f8d6:	40f1      	lsrs	r1, r6
    f8d8:	2e1f      	cmp	r6, #31
    f8da:	bf18      	it	ne
    f8dc:	f001 0101 	andne.w	r1, r1, #1
    f8e0:	2c00      	cmp	r4, #0
    f8e2:	d1e6      	bne.n	f8b2 <LLF_RND_AdaptiveProportionTest+0x26>
    f8e4:	2500      	movs	r5, #0
    f8e6:	45a8      	cmp	r8, r5
    f8e8:	468e      	mov	lr, r1
    f8ea:	f04f 0c01 	mov.w	ip, #1
    f8ee:	d1e8      	bne.n	f8c2 <LLF_RND_AdaptiveProportionTest+0x36>
    f8f0:	4562      	cmp	r2, ip
    f8f2:	d2e6      	bcs.n	f8c2 <LLF_RND_AdaptiveProportionTest+0x36>
    f8f4:	4803      	ldr	r0, [pc, #12]	; (f904 <LLF_RND_AdaptiveProportionTest+0x78>)
    f8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8fa:	4802      	ldr	r0, [pc, #8]	; (f904 <LLF_RND_AdaptiveProportionTest+0x78>)
    f8fc:	4770      	bx	lr
    f8fe:	2000      	movs	r0, #0
    f900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f904:	00f10c37 	.word	0x00f10c37

0000f908 <getTrngSource>:
    f908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f90c:	b08f      	sub	sp, #60	; 0x3c
    f90e:	460d      	mov	r5, r1
    f910:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    f914:	4683      	mov	fp, r0
    f916:	2900      	cmp	r1, #0
    f918:	d157      	bne.n	f9ca <getTrngSource+0xc2>
    f91a:	6929      	ldr	r1, [r5, #16]
    f91c:	9103      	str	r1, [sp, #12]
    f91e:	2100      	movs	r1, #0
    f920:	601c      	str	r4, [r3, #0]
    f922:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f924:	6019      	str	r1, [r3, #0]
    f926:	2a00      	cmp	r2, #0
    f928:	f000 8122 	beq.w	fb70 <getTrngSource+0x268>
    f92c:	4a81      	ldr	r2, [pc, #516]	; (fb34 <getTrngSource+0x22c>)
    f92e:	4b82      	ldr	r3, [pc, #520]	; (fb38 <getTrngSource+0x230>)
    f930:	6811      	ldr	r1, [r2, #0]
    f932:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f934:	681b      	ldr	r3, [r3, #0]
    f936:	429a      	cmp	r2, r3
    f938:	d157      	bne.n	f9ea <getTrngSource+0xe2>
    f93a:	290a      	cmp	r1, #10
    f93c:	d155      	bne.n	f9ea <getTrngSource+0xe2>
    f93e:	f89b 3003 	ldrb.w	r3, [fp, #3]
    f942:	9306      	str	r3, [sp, #24]
    f944:	9903      	ldr	r1, [sp, #12]
    f946:	2304      	movs	r3, #4
    f948:	4608      	mov	r0, r1
    f94a:	4a7c      	ldr	r2, [pc, #496]	; (fb3c <getTrngSource+0x234>)
    f94c:	9302      	str	r3, [sp, #8]
    f94e:	fba2 0200 	umull	r0, r2, r2, r0
    f952:	0892      	lsrs	r2, r2, #2
    f954:	00cb      	lsls	r3, r1, #3
    f956:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f95a:	f104 0008 	add.w	r0, r4, #8
    f95e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    f962:	3b01      	subs	r3, #1
    f964:	f8df 91d0 	ldr.w	r9, [pc, #464]	; fb38 <getTrngSource+0x230>
    f968:	f8df a200 	ldr.w	sl, [pc, #512]	; fb6c <getTrngSource+0x264>
    f96c:	9004      	str	r0, [sp, #16]
    f96e:	9200      	str	r2, [sp, #0]
    f970:	9305      	str	r3, [sp, #20]
    f972:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f974:	9c03      	ldr	r4, [sp, #12]
    f976:	601c      	str	r4, [r3, #0]
    f978:	2c00      	cmp	r4, #0
    f97a:	f000 80cc 	beq.w	fb16 <getTrngSource+0x20e>
    f97e:	2600      	movs	r6, #0
    f980:	9f04      	ldr	r7, [sp, #16]
    f982:	f000 faa9 	bl	fed8 <LLF_RND_TurnOffTrng>
    f986:	2300      	movs	r3, #0
    f988:	9307      	str	r3, [sp, #28]
    f98a:	9b06      	ldr	r3, [sp, #24]
    f98c:	f1bb 0f00 	cmp.w	fp, #0
    f990:	d03a      	beq.n	fa08 <getTrngSource+0x100>
    f992:	2d00      	cmp	r5, #0
    f994:	d034      	beq.n	fa00 <getTrngSource+0xf8>
    f996:	bb53      	cbnz	r3, f9ee <getTrngSource+0xe6>
    f998:	005b      	lsls	r3, r3, #1
    f99a:	9306      	str	r3, [sp, #24]
    f99c:	f1bb 0f00 	cmp.w	fp, #0
    f9a0:	d036      	beq.n	fa10 <getTrngSource+0x108>
    f9a2:	2d00      	cmp	r5, #0
    f9a4:	d034      	beq.n	fa10 <getTrngSource+0x108>
    f9a6:	b1e3      	cbz	r3, f9e2 <getTrngSource+0xda>
    f9a8:	a906      	add	r1, sp, #24
    f9aa:	4628      	mov	r0, r5
    f9ac:	f000 fa84 	bl	feb8 <LLF_RND_GetFastestRosc>
    f9b0:	2800      	cmp	r0, #0
    f9b2:	f000 817d 	beq.w	fcb0 <getTrngSource+0x3a8>
    f9b6:	4b62      	ldr	r3, [pc, #392]	; (fb40 <getTrngSource+0x238>)
    f9b8:	4298      	cmp	r0, r3
    f9ba:	d012      	beq.n	f9e2 <getTrngSource+0xda>
    f9bc:	9000      	str	r0, [sp, #0]
    f9be:	f000 fa8b 	bl	fed8 <LLF_RND_TurnOffTrng>
    f9c2:	9800      	ldr	r0, [sp, #0]
    f9c4:	b00f      	add	sp, #60	; 0x3c
    f9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9ca:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    f9ce:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    f9d2:	3001      	adds	r0, #1
    f9d4:	bf0c      	ite	eq
    f9d6:	f44f 7104 	moveq.w	r1, #528	; 0x210
    f9da:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    f9de:	9103      	str	r1, [sp, #12]
    f9e0:	e79d      	b.n	f91e <getTrngSource+0x16>
    f9e2:	6a2b      	ldr	r3, [r5, #32]
    f9e4:	b973      	cbnz	r3, fa04 <getTrngSource+0xfc>
    f9e6:	4856      	ldr	r0, [pc, #344]	; (fb40 <getTrngSource+0x238>)
    f9e8:	e7e8      	b.n	f9bc <getTrngSource+0xb4>
    f9ea:	4856      	ldr	r0, [pc, #344]	; (fb44 <getTrngSource+0x23c>)
    f9ec:	e7e6      	b.n	f9bc <getTrngSource+0xb4>
    f9ee:	a906      	add	r1, sp, #24
    f9f0:	4628      	mov	r0, r5
    f9f2:	f000 fa61 	bl	feb8 <LLF_RND_GetFastestRosc>
    f9f6:	b168      	cbz	r0, fa14 <getTrngSource+0x10c>
    f9f8:	4b53      	ldr	r3, [pc, #332]	; (fb48 <getTrngSource+0x240>)
    f9fa:	4298      	cmp	r0, r3
    f9fc:	d0de      	beq.n	f9bc <getTrngSource+0xb4>
    f9fe:	9b06      	ldr	r3, [sp, #24]
    fa00:	2b08      	cmp	r3, #8
    fa02:	d1c9      	bne.n	f998 <getTrngSource+0x90>
    fa04:	4851      	ldr	r0, [pc, #324]	; (fb4c <getTrngSource+0x244>)
    fa06:	e7d9      	b.n	f9bc <getTrngSource+0xb4>
    fa08:	2b08      	cmp	r3, #8
    fa0a:	d0fb      	beq.n	fa04 <getTrngSource+0xfc>
    fa0c:	005b      	lsls	r3, r3, #1
    fa0e:	9306      	str	r3, [sp, #24]
    fa10:	484f      	ldr	r0, [pc, #316]	; (fb50 <getTrngSource+0x248>)
    fa12:	e7d3      	b.n	f9bc <getTrngSource+0xb4>
    fa14:	4629      	mov	r1, r5
    fa16:	9806      	ldr	r0, [sp, #24]
    fa18:	f000 fa30 	bl	fe7c <LLF_RND_GetRoscSampleCnt>
    fa1c:	2800      	cmp	r0, #0
    fa1e:	d1eb      	bne.n	f9f8 <getTrngSource+0xf0>
    fa20:	9b06      	ldr	r3, [sp, #24]
    fa22:	2b08      	cmp	r3, #8
    fa24:	f000 810e 	beq.w	fc44 <getTrngSource+0x33c>
    fa28:	2b04      	cmp	r3, #4
    fa2a:	f000 8131 	beq.w	fc90 <getTrngSource+0x388>
    fa2e:	f1a3 0302 	sub.w	r3, r3, #2
    fa32:	fab3 f383 	clz	r3, r3
    fa36:	095b      	lsrs	r3, r3, #5
    fa38:	9301      	str	r3, [sp, #4]
    fa3a:	2301      	movs	r3, #1
    fa3c:	4619      	mov	r1, r3
    fa3e:	4a45      	ldr	r2, [pc, #276]	; (fb54 <getTrngSource+0x24c>)
    fa40:	6013      	str	r3, [r2, #0]
    fa42:	f842 3c84 	str.w	r3, [r2, #-132]
    fa46:	4b43      	ldr	r3, [pc, #268]	; (fb54 <getTrngSource+0x24c>)
    fa48:	6019      	str	r1, [r3, #0]
    fa4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fa4c:	f8c9 3000 	str.w	r3, [r9]
    fa50:	f8d9 2000 	ldr.w	r2, [r9]
    fa54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fa56:	429a      	cmp	r2, r3
    fa58:	d1f5      	bne.n	fa46 <getTrngSource+0x13e>
    fa5a:	f04f 0800 	mov.w	r8, #0
    fa5e:	f04f 30ff 	mov.w	r0, #4294967295
    fa62:	f8ca 8000 	str.w	r8, [sl]
    fa66:	f7ff fc3b 	bl	f2e0 <CC_HalClearInterruptBit>
    fa6a:	4a3b      	ldr	r2, [pc, #236]	; (fb58 <getTrngSource+0x250>)
    fa6c:	4b3b      	ldr	r3, [pc, #236]	; (fb5c <getTrngSource+0x254>)
    fa6e:	4640      	mov	r0, r8
    fa70:	601a      	str	r2, [r3, #0]
    fa72:	f7ff fc43 	bl	f2fc <CC_HalMaskInterrupt>
    fa76:	220a      	movs	r2, #10
    fa78:	9801      	ldr	r0, [sp, #4]
    fa7a:	4939      	ldr	r1, [pc, #228]	; (fb60 <getTrngSource+0x258>)
    fa7c:	4b2d      	ldr	r3, [pc, #180]	; (fb34 <getTrngSource+0x22c>)
    fa7e:	6008      	str	r0, [r1, #0]
    fa80:	601a      	str	r2, [r3, #0]
    fa82:	692a      	ldr	r2, [r5, #16]
    fa84:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    fa88:	fba8 1202 	umull	r1, r2, r8, r2
    fa8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fa8e:	0912      	lsrs	r2, r2, #4
    fa90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fa94:	03db      	lsls	r3, r3, #15
    fa96:	fb03 f302 	mul.w	r3, r3, r2
    fa9a:	4a32      	ldr	r2, [pc, #200]	; (fb64 <getTrngSource+0x25c>)
    fa9c:	099b      	lsrs	r3, r3, #6
    fa9e:	6013      	str	r3, [r2, #0]
    faa0:	2301      	movs	r3, #1
    faa2:	f8ca 3000 	str.w	r3, [sl]
    faa6:	9906      	ldr	r1, [sp, #24]
    faa8:	f8db 2000 	ldr.w	r2, [fp]
    faac:	020b      	lsls	r3, r1, #8
    faae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fab2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fab6:	4313      	orrs	r3, r2
    fab8:	f8cb 3000 	str.w	r3, [fp]
    fabc:	a807      	add	r0, sp, #28
    fabe:	f000 f9cd 	bl	fe5c <LLF_RND_WaitRngInterrupt>
    fac2:	2800      	cmp	r0, #0
    fac4:	d198      	bne.n	f9f8 <getTrngSource+0xf0>
    fac6:	4b28      	ldr	r3, [pc, #160]	; (fb68 <getTrngSource+0x260>)
    fac8:	fba8 2804 	umull	r2, r8, r8, r4
    facc:	681a      	ldr	r2, [r3, #0]
    face:	3314      	adds	r3, #20
    fad0:	9208      	str	r2, [sp, #32]
    fad2:	f853 2c10 	ldr.w	r2, [r3, #-16]
    fad6:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    fada:	9209      	str	r2, [sp, #36]	; 0x24
    fadc:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    fae0:	920a      	str	r2, [sp, #40]	; 0x28
    fae2:	f853 2c08 	ldr.w	r2, [r3, #-8]
    fae6:	920b      	str	r2, [sp, #44]	; 0x2c
    fae8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    faec:	920c      	str	r2, [sp, #48]	; 0x30
    faee:	681b      	ldr	r3, [r3, #0]
    faf0:	930d      	str	r3, [sp, #52]	; 0x34
    faf2:	d101      	bne.n	faf8 <getTrngSource+0x1f0>
    faf4:	9b00      	ldr	r3, [sp, #0]
    faf6:	b99b      	cbnz	r3, fb20 <getTrngSource+0x218>
    faf8:	4638      	mov	r0, r7
    fafa:	2218      	movs	r2, #24
    fafc:	a908      	add	r1, sp, #32
    fafe:	f7ff fb21 	bl	f144 <CC_PalMemCopyPlat>
    fb02:	3c18      	subs	r4, #24
    fb04:	3718      	adds	r7, #24
    fb06:	3601      	adds	r6, #1
    fb08:	2c00      	cmp	r4, #0
    fb0a:	f47f af3a 	bne.w	f982 <getTrngSource+0x7a>
    fb0e:	9b04      	ldr	r3, [sp, #16]
    fb10:	2b00      	cmp	r3, #0
    fb12:	f040 809a 	bne.w	fc4a <getTrngSource+0x342>
    fb16:	2300      	movs	r3, #0
    fb18:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fb1a:	6013      	str	r3, [r2, #0]
    fb1c:	9b06      	ldr	r3, [sp, #24]
    fb1e:	e76f      	b.n	fa00 <getTrngSource+0xf8>
    fb20:	461a      	mov	r2, r3
    fb22:	4638      	mov	r0, r7
    fb24:	a908      	add	r1, sp, #32
    fb26:	1ae4      	subs	r4, r4, r3
    fb28:	f7ff fb0c 	bl	f144 <CC_PalMemCopyPlat>
    fb2c:	9b00      	ldr	r3, [sp, #0]
    fb2e:	441f      	add	r7, r3
    fb30:	e7e9      	b.n	fb06 <getTrngSource+0x1fe>
    fb32:	bf00      	nop
    fb34:	50841138 	.word	0x50841138
    fb38:	50841130 	.word	0x50841130
    fb3c:	aaaaaaab 	.word	0xaaaaaaab
    fb40:	00f10c31 	.word	0x00f10c31
    fb44:	00f10c30 	.word	0x00f10c30
    fb48:	00f10c02 	.word	0x00f10c02
    fb4c:	00f10c32 	.word	0x00f10c32
    fb50:	00f10c35 	.word	0x00f10c35
    fb54:	508411c4 	.word	0x508411c4
    fb58:	0ffffffe 	.word	0x0ffffffe
    fb5c:	50841100 	.word	0x50841100
    fb60:	5084110c 	.word	0x5084110c
    fb64:	508411d8 	.word	0x508411d8
    fb68:	50841114 	.word	0x50841114
    fb6c:	5084112c 	.word	0x5084112c
    fb70:	f1bb 0f00 	cmp.w	fp, #0
    fb74:	f43f af4c 	beq.w	fa10 <getTrngSource+0x108>
    fb78:	2d00      	cmp	r5, #0
    fb7a:	f43f af49 	beq.w	fa10 <getTrngSource+0x108>
    fb7e:	2301      	movs	r3, #1
    fb80:	a90e      	add	r1, sp, #56	; 0x38
    fb82:	f841 3d20 	str.w	r3, [r1, #-32]!
    fb86:	f8cb 2000 	str.w	r2, [fp]
    fb8a:	4628      	mov	r0, r5
    fb8c:	f000 f994 	bl	feb8 <LLF_RND_GetFastestRosc>
    fb90:	2800      	cmp	r0, #0
    fb92:	f47f af13 	bne.w	f9bc <getTrngSource+0xb4>
    fb96:	4629      	mov	r1, r5
    fb98:	9806      	ldr	r0, [sp, #24]
    fb9a:	f000 f96f 	bl	fe7c <LLF_RND_GetRoscSampleCnt>
    fb9e:	2800      	cmp	r0, #0
    fba0:	f47f af0c 	bne.w	f9bc <getTrngSource+0xb4>
    fba4:	9f06      	ldr	r7, [sp, #24]
    fba6:	2f08      	cmp	r7, #8
    fba8:	f000 80eb 	beq.w	fd82 <getTrngSource+0x47a>
    fbac:	2f04      	cmp	r7, #4
    fbae:	f000 80ea 	beq.w	fd86 <getTrngSource+0x47e>
    fbb2:	f1a7 0702 	sub.w	r7, r7, #2
    fbb6:	fab7 f787 	clz	r7, r7
    fbba:	097f      	lsrs	r7, r7, #5
    fbbc:	2201      	movs	r2, #1
    fbbe:	4616      	mov	r6, r2
    fbc0:	4b73      	ldr	r3, [pc, #460]	; (fd90 <getTrngSource+0x488>)
    fbc2:	4974      	ldr	r1, [pc, #464]	; (fd94 <getTrngSource+0x48c>)
    fbc4:	601a      	str	r2, [r3, #0]
    fbc6:	4618      	mov	r0, r3
    fbc8:	600a      	str	r2, [r1, #0]
    fbca:	3b94      	subs	r3, #148	; 0x94
    fbcc:	6006      	str	r6, [r0, #0]
    fbce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fbd0:	601a      	str	r2, [r3, #0]
    fbd2:	6819      	ldr	r1, [r3, #0]
    fbd4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fbd6:	4291      	cmp	r1, r2
    fbd8:	d1f8      	bne.n	fbcc <getTrngSource+0x2c4>
    fbda:	f04f 0800 	mov.w	r8, #0
    fbde:	4b6e      	ldr	r3, [pc, #440]	; (fd98 <getTrngSource+0x490>)
    fbe0:	f04f 30ff 	mov.w	r0, #4294967295
    fbe4:	f8c3 8000 	str.w	r8, [r3]
    fbe8:	f7ff fb7a 	bl	f2e0 <CC_HalClearInterruptBit>
    fbec:	4b6b      	ldr	r3, [pc, #428]	; (fd9c <getTrngSource+0x494>)
    fbee:	4a6c      	ldr	r2, [pc, #432]	; (fda0 <getTrngSource+0x498>)
    fbf0:	4640      	mov	r0, r8
    fbf2:	601a      	str	r2, [r3, #0]
    fbf4:	f7ff fb82 	bl	f2fc <CC_HalMaskInterrupt>
    fbf8:	220a      	movs	r2, #10
    fbfa:	496a      	ldr	r1, [pc, #424]	; (fda4 <getTrngSource+0x49c>)
    fbfc:	4b6a      	ldr	r3, [pc, #424]	; (fda8 <getTrngSource+0x4a0>)
    fbfe:	600f      	str	r7, [r1, #0]
    fc00:	601a      	str	r2, [r3, #0]
    fc02:	991a      	ldr	r1, [sp, #104]	; 0x68
    fc04:	692b      	ldr	r3, [r5, #16]
    fc06:	2901      	cmp	r1, #1
    fc08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc0a:	f000 80b1 	beq.w	fd70 <getTrngSource+0x468>
    fc0e:	4967      	ldr	r1, [pc, #412]	; (fdac <getTrngSource+0x4a4>)
    fc10:	fba1 1303 	umull	r1, r3, r1, r3
    fc14:	091b      	lsrs	r3, r3, #4
    fc16:	2101      	movs	r1, #1
    fc18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fc1c:	03d2      	lsls	r2, r2, #15
    fc1e:	fb03 f302 	mul.w	r3, r3, r2
    fc22:	4a63      	ldr	r2, [pc, #396]	; (fdb0 <getTrngSource+0x4a8>)
    fc24:	099b      	lsrs	r3, r3, #6
    fc26:	6013      	str	r3, [r2, #0]
    fc28:	4b5b      	ldr	r3, [pc, #364]	; (fd98 <getTrngSource+0x490>)
    fc2a:	6019      	str	r1, [r3, #0]
    fc2c:	9906      	ldr	r1, [sp, #24]
    fc2e:	f8db 2000 	ldr.w	r2, [fp]
    fc32:	020b      	lsls	r3, r1, #8
    fc34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fc38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fc3c:	4313      	orrs	r3, r2
    fc3e:	f8cb 3000 	str.w	r3, [fp]
    fc42:	e67f      	b.n	f944 <getTrngSource+0x3c>
    fc44:	2303      	movs	r3, #3
    fc46:	9301      	str	r3, [sp, #4]
    fc48:	e6f7      	b.n	fa3a <getTrngSource+0x132>
    fc4a:	9b03      	ldr	r3, [sp, #12]
    fc4c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    fc50:	f63f af61 	bhi.w	fb16 <getTrngSource+0x20e>
    fc54:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    fc58:	4620      	mov	r0, r4
    fc5a:	4623      	mov	r3, r4
    fc5c:	696e      	ldr	r6, [r5, #20]
    fc5e:	e004      	b.n	fc6a <getTrngSource+0x362>
    fc60:	2001      	movs	r0, #1
    fc62:	3301      	adds	r3, #1
    fc64:	4563      	cmp	r3, ip
    fc66:	4614      	mov	r4, r2
    fc68:	d815      	bhi.n	fc96 <getTrngSource+0x38e>
    fc6a:	095a      	lsrs	r2, r3, #5
    fc6c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    fc70:	f003 011f 	and.w	r1, r3, #31
    fc74:	40ca      	lsrs	r2, r1
    fc76:	291f      	cmp	r1, #31
    fc78:	bf18      	it	ne
    fc7a:	f002 0201 	andne.w	r2, r2, #1
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d0ee      	beq.n	fc60 <getTrngSource+0x358>
    fc82:	42a2      	cmp	r2, r4
    fc84:	d1ec      	bne.n	fc60 <getTrngSource+0x358>
    fc86:	3001      	adds	r0, #1
    fc88:	4286      	cmp	r6, r0
    fc8a:	d1ea      	bne.n	fc62 <getTrngSource+0x35a>
    fc8c:	4849      	ldr	r0, [pc, #292]	; (fdb4 <getTrngSource+0x4ac>)
    fc8e:	e00b      	b.n	fca8 <getTrngSource+0x3a0>
    fc90:	2302      	movs	r3, #2
    fc92:	9301      	str	r3, [sp, #4]
    fc94:	e6d1      	b.n	fa3a <getTrngSource+0x132>
    fc96:	f44f 6380 	mov.w	r3, #1024	; 0x400
    fc9a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    fc9e:	69aa      	ldr	r2, [r5, #24]
    fca0:	f7ff fdf4 	bl	f88c <LLF_RND_AdaptiveProportionTest>
    fca4:	2800      	cmp	r0, #0
    fca6:	d05d      	beq.n	fd64 <getTrngSource+0x45c>
    fca8:	2300      	movs	r3, #0
    fcaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fcac:	6013      	str	r3, [r2, #0]
    fcae:	e6a3      	b.n	f9f8 <getTrngSource+0xf0>
    fcb0:	4629      	mov	r1, r5
    fcb2:	9806      	ldr	r0, [sp, #24]
    fcb4:	f000 f8e2 	bl	fe7c <LLF_RND_GetRoscSampleCnt>
    fcb8:	2800      	cmp	r0, #0
    fcba:	f47f ae7c 	bne.w	f9b6 <getTrngSource+0xae>
    fcbe:	9c06      	ldr	r4, [sp, #24]
    fcc0:	2c08      	cmp	r4, #8
    fcc2:	d051      	beq.n	fd68 <getTrngSource+0x460>
    fcc4:	2c04      	cmp	r4, #4
    fcc6:	d051      	beq.n	fd6c <getTrngSource+0x464>
    fcc8:	f1a4 0402 	sub.w	r4, r4, #2
    fccc:	fab4 f484 	clz	r4, r4
    fcd0:	0964      	lsrs	r4, r4, #5
    fcd2:	2301      	movs	r3, #1
    fcd4:	461e      	mov	r6, r3
    fcd6:	4619      	mov	r1, r3
    fcd8:	4a2d      	ldr	r2, [pc, #180]	; (fd90 <getTrngSource+0x488>)
    fcda:	6013      	str	r3, [r2, #0]
    fcdc:	f842 3c84 	str.w	r3, [r2, #-132]
    fce0:	4b2b      	ldr	r3, [pc, #172]	; (fd90 <getTrngSource+0x488>)
    fce2:	6019      	str	r1, [r3, #0]
    fce4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fce6:	f8c9 3000 	str.w	r3, [r9]
    fcea:	f8d9 2000 	ldr.w	r2, [r9]
    fcee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fcf0:	429a      	cmp	r2, r3
    fcf2:	d1f5      	bne.n	fce0 <getTrngSource+0x3d8>
    fcf4:	2700      	movs	r7, #0
    fcf6:	f04f 30ff 	mov.w	r0, #4294967295
    fcfa:	f8ca 7000 	str.w	r7, [sl]
    fcfe:	f7ff faef 	bl	f2e0 <CC_HalClearInterruptBit>
    fd02:	4b26      	ldr	r3, [pc, #152]	; (fd9c <getTrngSource+0x494>)
    fd04:	4a26      	ldr	r2, [pc, #152]	; (fda0 <getTrngSource+0x498>)
    fd06:	4638      	mov	r0, r7
    fd08:	601a      	str	r2, [r3, #0]
    fd0a:	f7ff faf7 	bl	f2fc <CC_HalMaskInterrupt>
    fd0e:	220a      	movs	r2, #10
    fd10:	4924      	ldr	r1, [pc, #144]	; (fda4 <getTrngSource+0x49c>)
    fd12:	4b25      	ldr	r3, [pc, #148]	; (fda8 <getTrngSource+0x4a0>)
    fd14:	600c      	str	r4, [r1, #0]
    fd16:	601a      	str	r2, [r3, #0]
    fd18:	692a      	ldr	r2, [r5, #16]
    fd1a:	4924      	ldr	r1, [pc, #144]	; (fdac <getTrngSource+0x4a4>)
    fd1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd1e:	fba1 1202 	umull	r1, r2, r1, r2
    fd22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fd26:	0912      	lsrs	r2, r2, #4
    fd28:	03db      	lsls	r3, r3, #15
    fd2a:	fb03 f302 	mul.w	r3, r3, r2
    fd2e:	4a20      	ldr	r2, [pc, #128]	; (fdb0 <getTrngSource+0x4a8>)
    fd30:	099b      	lsrs	r3, r3, #6
    fd32:	6013      	str	r3, [r2, #0]
    fd34:	f8ca 6000 	str.w	r6, [sl]
    fd38:	9b06      	ldr	r3, [sp, #24]
    fd3a:	f8db 1000 	ldr.w	r1, [fp]
    fd3e:	021a      	lsls	r2, r3, #8
    fd40:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    fd44:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    fd48:	431a      	orrs	r2, r3
    fd4a:	0a13      	lsrs	r3, r2, #8
    fd4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fd50:	4313      	orrs	r3, r2
    fd52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    fd56:	f8cb 3000 	str.w	r3, [fp]
    fd5a:	9b02      	ldr	r3, [sp, #8]
    fd5c:	3b01      	subs	r3, #1
    fd5e:	9302      	str	r3, [sp, #8]
    fd60:	f47f ae07 	bne.w	f972 <getTrngSource+0x6a>
    fd64:	2000      	movs	r0, #0
    fd66:	e629      	b.n	f9bc <getTrngSource+0xb4>
    fd68:	2403      	movs	r4, #3
    fd6a:	e7b2      	b.n	fcd2 <getTrngSource+0x3ca>
    fd6c:	2402      	movs	r4, #2
    fd6e:	e7b0      	b.n	fcd2 <getTrngSource+0x3ca>
    fd70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    fd74:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    fd78:	3101      	adds	r1, #1
    fd7a:	d006      	beq.n	fd8a <getTrngSource+0x482>
    fd7c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    fd80:	e745      	b.n	fc0e <getTrngSource+0x306>
    fd82:	2703      	movs	r7, #3
    fd84:	e71a      	b.n	fbbc <getTrngSource+0x2b4>
    fd86:	2702      	movs	r7, #2
    fd88:	e718      	b.n	fbbc <getTrngSource+0x2b4>
    fd8a:	2316      	movs	r3, #22
    fd8c:	e743      	b.n	fc16 <getTrngSource+0x30e>
    fd8e:	bf00      	nop
    fd90:	508411c4 	.word	0x508411c4
    fd94:	50841140 	.word	0x50841140
    fd98:	5084112c 	.word	0x5084112c
    fd9c:	50841100 	.word	0x50841100
    fda0:	0ffffffe 	.word	0x0ffffffe
    fda4:	5084110c 	.word	0x5084110c
    fda8:	50841138 	.word	0x50841138
    fdac:	aaaaaaab 	.word	0xaaaaaaab
    fdb0:	508411d8 	.word	0x508411d8
    fdb4:	00f10c36 	.word	0x00f10c36

0000fdb8 <LLF_RND_GetTrngSource>:
    fdb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fdbc:	4c1b      	ldr	r4, [pc, #108]	; (fe2c <LLF_RND_GetTrngSource+0x74>)
    fdbe:	b085      	sub	sp, #20
    fdc0:	4607      	mov	r7, r0
    fdc2:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    fdc6:	4688      	mov	r8, r1
    fdc8:	6820      	ldr	r0, [r4, #0]
    fdca:	f04f 31ff 	mov.w	r1, #4294967295
    fdce:	4691      	mov	r9, r2
    fdd0:	f7ff fa1e 	bl	f210 <CC_PalMutexLock>
    fdd4:	bb28      	cbnz	r0, fe22 <LLF_RND_GetTrngSource+0x6a>
    fdd6:	2000      	movs	r0, #0
    fdd8:	f7ff fa4a 	bl	f270 <CC_PalPowerSaveModeSelect>
    fddc:	b9e8      	cbnz	r0, fe1a <LLF_RND_GetTrngSource+0x62>
    fdde:	2300      	movs	r3, #0
    fde0:	e9cd 5600 	strd	r5, r6, [sp]
    fde4:	9302      	str	r3, [sp, #8]
    fde6:	464a      	mov	r2, r9
    fde8:	4641      	mov	r1, r8
    fdea:	4638      	mov	r0, r7
    fdec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fdee:	f7ff fd8b 	bl	f908 <getTrngSource>
    fdf2:	4605      	mov	r5, r0
    fdf4:	2001      	movs	r0, #1
    fdf6:	f7ff fa3b 	bl	f270 <CC_PalPowerSaveModeSelect>
    fdfa:	b950      	cbnz	r0, fe12 <LLF_RND_GetTrngSource+0x5a>
    fdfc:	6820      	ldr	r0, [r4, #0]
    fdfe:	f7ff fa0f 	bl	f220 <CC_PalMutexUnlock>
    fe02:	b110      	cbz	r0, fe0a <LLF_RND_GetTrngSource+0x52>
    fe04:	480a      	ldr	r0, [pc, #40]	; (fe30 <LLF_RND_GetTrngSource+0x78>)
    fe06:	f7ff fb8d 	bl	f524 <CC_PalAbort>
    fe0a:	4628      	mov	r0, r5
    fe0c:	b005      	add	sp, #20
    fe0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fe12:	4808      	ldr	r0, [pc, #32]	; (fe34 <LLF_RND_GetTrngSource+0x7c>)
    fe14:	f7ff fb86 	bl	f524 <CC_PalAbort>
    fe18:	e7f0      	b.n	fdfc <LLF_RND_GetTrngSource+0x44>
    fe1a:	4807      	ldr	r0, [pc, #28]	; (fe38 <LLF_RND_GetTrngSource+0x80>)
    fe1c:	f7ff fb82 	bl	f524 <CC_PalAbort>
    fe20:	e7dd      	b.n	fdde <LLF_RND_GetTrngSource+0x26>
    fe22:	4806      	ldr	r0, [pc, #24]	; (fe3c <LLF_RND_GetTrngSource+0x84>)
    fe24:	f7ff fb7e 	bl	f524 <CC_PalAbort>
    fe28:	e7d5      	b.n	fdd6 <LLF_RND_GetTrngSource+0x1e>
    fe2a:	bf00      	nop
    fe2c:	20001484 	.word	0x20001484
    fe30:	00011074 	.word	0x00011074
    fe34:	000110ac 	.word	0x000110ac
    fe38:	0001108c 	.word	0x0001108c
    fe3c:	0001105c 	.word	0x0001105c

0000fe40 <LLF_RND_RunTrngStartupTest>:
    fe40:	b510      	push	{r4, lr}
    fe42:	2401      	movs	r4, #1
    fe44:	b086      	sub	sp, #24
    fe46:	ab05      	add	r3, sp, #20
    fe48:	e9cd 2401 	strd	r2, r4, [sp, #4]
    fe4c:	9300      	str	r3, [sp, #0]
    fe4e:	2200      	movs	r2, #0
    fe50:	ab04      	add	r3, sp, #16
    fe52:	f7ff fd59 	bl	f908 <getTrngSource>
    fe56:	b006      	add	sp, #24
    fe58:	bd10      	pop	{r4, pc}
    fe5a:	bf00      	nop

0000fe5c <LLF_RND_WaitRngInterrupt>:
    fe5c:	b508      	push	{r3, lr}
    fe5e:	4601      	mov	r1, r0
    fe60:	f44f 6080 	mov.w	r0, #1024	; 0x400
    fe64:	f7ff fa50 	bl	f308 <CC_HalWaitInterruptRND>
    fe68:	2300      	movs	r3, #0
    fe6a:	4902      	ldr	r1, [pc, #8]	; (fe74 <LLF_RND_WaitRngInterrupt+0x18>)
    fe6c:	4a02      	ldr	r2, [pc, #8]	; (fe78 <LLF_RND_WaitRngInterrupt+0x1c>)
    fe6e:	600b      	str	r3, [r1, #0]
    fe70:	6013      	str	r3, [r2, #0]
    fe72:	bd08      	pop	{r3, pc}
    fe74:	508411c8 	.word	0x508411c8
    fe78:	5084112c 	.word	0x5084112c

0000fe7c <LLF_RND_GetRoscSampleCnt>:
    fe7c:	3801      	subs	r0, #1
    fe7e:	2807      	cmp	r0, #7
    fe80:	d815      	bhi.n	feae <LLF_RND_GetRoscSampleCnt+0x32>
    fe82:	e8df f000 	tbb	[pc, r0]
    fe86:	0c10      	.short	0x0c10
    fe88:	14140814 	.word	0x14140814
    fe8c:	0414      	.short	0x0414
    fe8e:	68cb      	ldr	r3, [r1, #12]
    fe90:	2000      	movs	r0, #0
    fe92:	624b      	str	r3, [r1, #36]	; 0x24
    fe94:	4770      	bx	lr
    fe96:	688b      	ldr	r3, [r1, #8]
    fe98:	2000      	movs	r0, #0
    fe9a:	624b      	str	r3, [r1, #36]	; 0x24
    fe9c:	4770      	bx	lr
    fe9e:	684b      	ldr	r3, [r1, #4]
    fea0:	2000      	movs	r0, #0
    fea2:	624b      	str	r3, [r1, #36]	; 0x24
    fea4:	4770      	bx	lr
    fea6:	680b      	ldr	r3, [r1, #0]
    fea8:	2000      	movs	r0, #0
    feaa:	624b      	str	r3, [r1, #36]	; 0x24
    feac:	4770      	bx	lr
    feae:	4801      	ldr	r0, [pc, #4]	; (feb4 <LLF_RND_GetRoscSampleCnt+0x38>)
    feb0:	4770      	bx	lr
    feb2:	bf00      	nop
    feb4:	00f10c31 	.word	0x00f10c31

0000feb8 <LLF_RND_GetFastestRosc>:
    feb8:	680b      	ldr	r3, [r1, #0]
    feba:	e002      	b.n	fec2 <LLF_RND_GetFastestRosc+0xa>
    febc:	2b08      	cmp	r3, #8
    febe:	600b      	str	r3, [r1, #0]
    fec0:	d806      	bhi.n	fed0 <LLF_RND_GetFastestRosc+0x18>
    fec2:	6a02      	ldr	r2, [r0, #32]
    fec4:	4213      	tst	r3, r2
    fec6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    feca:	d0f7      	beq.n	febc <LLF_RND_GetFastestRosc+0x4>
    fecc:	2000      	movs	r0, #0
    fece:	4770      	bx	lr
    fed0:	4800      	ldr	r0, [pc, #0]	; (fed4 <LLF_RND_GetFastestRosc+0x1c>)
    fed2:	4770      	bx	lr
    fed4:	00f10c31 	.word	0x00f10c31

0000fed8 <LLF_RND_TurnOffTrng>:
    fed8:	2300      	movs	r3, #0
    feda:	4904      	ldr	r1, [pc, #16]	; (feec <LLF_RND_TurnOffTrng+0x14>)
    fedc:	4a04      	ldr	r2, [pc, #16]	; (fef0 <LLF_RND_TurnOffTrng+0x18>)
    fede:	600b      	str	r3, [r1, #0]
    fee0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    fee4:	6013      	str	r3, [r2, #0]
    fee6:	f7ff b9fb 	b.w	f2e0 <CC_HalClearInterruptBit>
    feea:	bf00      	nop
    feec:	5084112c 	.word	0x5084112c
    fef0:	508411c4 	.word	0x508411c4

0000fef4 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    fef4:	b508      	push	{r3, lr}
	spm_config();
    fef6:	f7fc ff31 	bl	cd5c <spm_config>
	spm_jump();
}
    fefa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    fefe:	f7fc bebf 	b.w	cc80 <spm_jump>

0000ff02 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    ff02:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    ff06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ff0a:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    ff0c:	bf08      	it	eq
    ff0e:	f06f 0015 	mvneq.w	r0, #21
    ff12:	4770      	bx	lr

0000ff14 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    ff14:	23ff      	movs	r3, #255	; 0xff
{
    ff16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ff1a:	6845      	ldr	r5, [r0, #4]

	for (i = 0; i < p->n_levels; i++) {
    ff1c:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ff1e:	4629      	mov	r1, r5
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    ff20:	f04f 0a0c 	mov.w	sl, #12

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
    ff24:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ff28:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    ff2a:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ff2c:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
    ff30:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
    ff32:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    ff34:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
    ff36:	9301      	str	r3, [sp, #4]
    ff38:	9b01      	ldr	r3, [sp, #4]
    ff3a:	4293      	cmp	r3, r2
    ff3c:	dc08      	bgt.n	ff50 <z_sys_mem_pool_base_init+0x3c>
    ff3e:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    ff40:	4619      	mov	r1, r3
    ff42:	428f      	cmp	r7, r1
    ff44:	eb05 0c03 	add.w	ip, r5, r3
    ff48:	dc21      	bgt.n	ff8e <z_sys_mem_pool_base_init+0x7a>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    ff4a:	b003      	add	sp, #12
    ff4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    ff50:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    ff54:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
    ff56:	bf84      	itt	hi
    ff58:	331f      	addhi	r3, #31
    ff5a:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
    ff5e:	fb0a fe02 	mul.w	lr, sl, r2
    ff62:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
    ff66:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    ff6a:	eb08 060e 	add.w	r6, r8, lr
    ff6e:	f106 0904 	add.w	r9, r6, #4
    ff72:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
    ff76:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
    ff7a:	bf94      	ite	ls
    ff7c:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
    ff7e:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
    ff82:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
    ff86:	bf88      	it	hi
    ff88:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
    ff8c:	e7d4      	b.n	ff38 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
    ff8e:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    ff90:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    ff92:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
    ff96:	18f4      	adds	r4, r6, r3
	node->next = list;
    ff98:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
    ff9c:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    ff9e:	3101      	adds	r1, #1
    ffa0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    ffa2:	6893      	ldr	r3, [r2, #8]
    ffa4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ffa6:	6094      	str	r4, [r2, #8]
    ffa8:	4663      	mov	r3, ip
    ffaa:	e7ca      	b.n	ff42 <z_sys_mem_pool_base_init+0x2e>

0000ffac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ffac:	4604      	mov	r4, r0
    ffae:	b508      	push	{r3, lr}
    ffb0:	4608      	mov	r0, r1
    ffb2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    ffb4:	461a      	mov	r2, r3
    ffb6:	47a0      	blx	r4
	return z_impl_k_current_get();
    ffb8:	f7fe fef0 	bl	ed9c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    ffbc:	f7fd fbe8 	bl	d790 <z_impl_k_thread_abort>

0000ffc0 <z_arch_printk_char_out>:
}
    ffc0:	2000      	movs	r0, #0
    ffc2:	4770      	bx	lr

0000ffc4 <print_err>:
{
    ffc4:	b570      	push	{r4, r5, r6, lr}
    ffc6:	460d      	mov	r5, r1
    ffc8:	4604      	mov	r4, r0
	out('E', ctx);
    ffca:	2045      	movs	r0, #69	; 0x45
    ffcc:	47a0      	blx	r4
	out('R', ctx);
    ffce:	4629      	mov	r1, r5
    ffd0:	2052      	movs	r0, #82	; 0x52
    ffd2:	47a0      	blx	r4
	out('R', ctx);
    ffd4:	4629      	mov	r1, r5
    ffd6:	4623      	mov	r3, r4
}
    ffd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    ffdc:	2052      	movs	r0, #82	; 0x52
    ffde:	4718      	bx	r3

0000ffe0 <z_vprintk>:
{
    ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    ffe4:	2700      	movs	r7, #0
{
    ffe6:	4605      	mov	r5, r0
    ffe8:	460e      	mov	r6, r1
    ffea:	4692      	mov	sl, r2
    ffec:	461c      	mov	r4, r3
	int min_width = -1;
    ffee:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    fff2:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
    fff4:	46bb      	mov	fp, r7
{
    fff6:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
    fff8:	f89a 0000 	ldrb.w	r0, [sl]
    fffc:	b910      	cbnz	r0, 10004 <__kernel_ram_size+0x4>
}
    fffe:	b009      	add	sp, #36	; 0x24
   10000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   10004:	f1bb 0f00 	cmp.w	fp, #0
   10008:	d107      	bne.n	1001a <__kernel_ram_size+0x1a>
			if (*fmt != '%') {
   1000a:	2825      	cmp	r0, #37	; 0x25
   1000c:	f000 814e 	beq.w	102ac <__kernel_ram_size+0x2ac>
				out((int)*fmt, ctx);
   10010:	4631      	mov	r1, r6
   10012:	47a8      	blx	r5
		++fmt;
   10014:	f10a 0a01 	add.w	sl, sl, #1
   10018:	e7ee      	b.n	fff8 <z_vprintk+0x18>
			switch (*fmt) {
   1001a:	2864      	cmp	r0, #100	; 0x64
   1001c:	d068      	beq.n	100f0 <__kernel_ram_size+0xf0>
   1001e:	d81a      	bhi.n	10056 <__kernel_ram_size+0x56>
   10020:	2839      	cmp	r0, #57	; 0x39
   10022:	d80b      	bhi.n	1003c <__kernel_ram_size+0x3c>
   10024:	2831      	cmp	r0, #49	; 0x31
   10026:	d25a      	bcs.n	100de <__kernel_ram_size+0xde>
   10028:	282d      	cmp	r0, #45	; 0x2d
   1002a:	f000 8146 	beq.w	102ba <__kernel_ram_size+0x2ba>
   1002e:	2830      	cmp	r0, #48	; 0x30
   10030:	d046      	beq.n	100c0 <__kernel_ram_size+0xc0>
   10032:	2825      	cmp	r0, #37	; 0x25
   10034:	d108      	bne.n	10048 <__kernel_ram_size+0x48>
				out((int)'%', ctx);
   10036:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   10038:	47a8      	blx	r5
   1003a:	e07a      	b.n	10132 <__kernel_ram_size+0x132>
			switch (*fmt) {
   1003c:	2858      	cmp	r0, #88	; 0x58
   1003e:	f000 80b4 	beq.w	101aa <__kernel_ram_size+0x1aa>
   10042:	2863      	cmp	r0, #99	; 0x63
   10044:	f000 812c 	beq.w	102a0 <__kernel_ram_size+0x2a0>
				out((int)'%', ctx);
   10048:	4631      	mov	r1, r6
   1004a:	2025      	movs	r0, #37	; 0x25
   1004c:	47a8      	blx	r5
				out((int)*fmt, ctx);
   1004e:	4631      	mov	r1, r6
   10050:	f89a 0000 	ldrb.w	r0, [sl]
   10054:	e7f0      	b.n	10038 <__kernel_ram_size+0x38>
			switch (*fmt) {
   10056:	2870      	cmp	r0, #112	; 0x70
   10058:	f000 809d 	beq.w	10196 <__kernel_ram_size+0x196>
   1005c:	d80d      	bhi.n	1007a <__kernel_ram_size+0x7a>
   1005e:	2869      	cmp	r0, #105	; 0x69
   10060:	d046      	beq.n	100f0 <__kernel_ram_size+0xf0>
   10062:	286c      	cmp	r0, #108	; 0x6c
   10064:	d103      	bne.n	1006e <__kernel_ram_size+0x6e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   10066:	2f6c      	cmp	r7, #108	; 0x6c
   10068:	d126      	bne.n	100b8 <__kernel_ram_size+0xb8>
					length_mod = 'L';
   1006a:	274c      	movs	r7, #76	; 0x4c
   1006c:	e7d2      	b.n	10014 <__kernel_ram_size+0x14>
			switch (*fmt) {
   1006e:	2868      	cmp	r0, #104	; 0x68
   10070:	d1ea      	bne.n	10048 <__kernel_ram_size+0x48>
				if (*fmt == 'h' && length_mod == 'h') {
   10072:	2f68      	cmp	r7, #104	; 0x68
   10074:	d120      	bne.n	100b8 <__kernel_ram_size+0xb8>
					length_mod = 'H';
   10076:	2748      	movs	r7, #72	; 0x48
   10078:	e7cc      	b.n	10014 <__kernel_ram_size+0x14>
			switch (*fmt) {
   1007a:	2875      	cmp	r0, #117	; 0x75
   1007c:	d070      	beq.n	10160 <__kernel_ram_size+0x160>
   1007e:	d817      	bhi.n	100b0 <__kernel_ram_size+0xb0>
   10080:	2873      	cmp	r0, #115	; 0x73
   10082:	d1e1      	bne.n	10048 <__kernel_ram_size+0x48>
				char *s = va_arg(ap, char *);
   10084:	6822      	ldr	r2, [r4, #0]
   10086:	f104 0b04 	add.w	fp, r4, #4
   1008a:	4611      	mov	r1, r2
				while (*s) {
   1008c:	460c      	mov	r4, r1
   1008e:	f814 0b01 	ldrb.w	r0, [r4], #1
   10092:	2800      	cmp	r0, #0
   10094:	f040 80f9 	bne.w	1028a <__kernel_ram_size+0x28a>
				if (padding == PAD_SPACE_AFTER) {
   10098:	f1b8 0f03 	cmp.w	r8, #3
   1009c:	f040 8113 	bne.w	102c6 <__kernel_ram_size+0x2c6>
					int remaining = min_width - (s - start);
   100a0:	1a8c      	subs	r4, r1, r2
   100a2:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   100a6:	2c00      	cmp	r4, #0
   100a8:	f300 80f5 	bgt.w	10296 <__kernel_ram_size+0x296>
				int c = va_arg(ap, int);
   100ac:	465c      	mov	r4, fp
   100ae:	e040      	b.n	10132 <__kernel_ram_size+0x132>
			switch (*fmt) {
   100b0:	2878      	cmp	r0, #120	; 0x78
   100b2:	d07a      	beq.n	101aa <__kernel_ram_size+0x1aa>
   100b4:	287a      	cmp	r0, #122	; 0x7a
   100b6:	d1c7      	bne.n	10048 <__kernel_ram_size+0x48>
				} else if (length_mod == 0) {
   100b8:	2f00      	cmp	r7, #0
   100ba:	d1c5      	bne.n	10048 <__kernel_ram_size+0x48>
   100bc:	4607      	mov	r7, r0
   100be:	e7a9      	b.n	10014 <__kernel_ram_size+0x14>
				if (min_width < 0 && padding == PAD_NONE) {
   100c0:	f1b9 0f00 	cmp.w	r9, #0
   100c4:	da0e      	bge.n	100e4 <__kernel_ram_size+0xe4>
   100c6:	f1b8 0f00 	cmp.w	r8, #0
   100ca:	f000 80f9 	beq.w	102c0 <__kernel_ram_size+0x2c0>
					min_width = *fmt - '0';
   100ce:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   100d2:	f1b8 0f00 	cmp.w	r8, #0
   100d6:	bf08      	it	eq
   100d8:	f04f 0802 	moveq.w	r8, #2
   100dc:	e79a      	b.n	10014 <__kernel_ram_size+0x14>
				if (min_width < 0) {
   100de:	f1b9 0f00 	cmp.w	r9, #0
   100e2:	dbf4      	blt.n	100ce <__kernel_ram_size+0xce>
					min_width = 10 * min_width + *fmt - '0';
   100e4:	220a      	movs	r2, #10
   100e6:	fb02 0909 	mla	r9, r2, r9, r0
   100ea:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   100ee:	e7f0      	b.n	100d2 <__kernel_ram_size+0xd2>
				if (length_mod == 'z') {
   100f0:	2f7a      	cmp	r7, #122	; 0x7a
   100f2:	d103      	bne.n	100fc <__kernel_ram_size+0xfc>
					d = va_arg(ap, int);
   100f4:	f8d4 b000 	ldr.w	fp, [r4]
   100f8:	3404      	adds	r4, #4
   100fa:	e01e      	b.n	1013a <__kernel_ram_size+0x13a>
				} else if (length_mod == 'l') {
   100fc:	2f6c      	cmp	r7, #108	; 0x6c
   100fe:	d0f9      	beq.n	100f4 <__kernel_ram_size+0xf4>
				} else if (length_mod == 'L') {
   10100:	2f4c      	cmp	r7, #76	; 0x4c
   10102:	d1f7      	bne.n	100f4 <__kernel_ram_size+0xf4>
					if (lld > __LONG_MAX__ ||
   10104:	f04f 0c00 	mov.w	ip, #0
   10108:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   1010c:	3407      	adds	r4, #7
   1010e:	f024 0307 	bic.w	r3, r4, #7
   10112:	f103 0408 	add.w	r4, r3, #8
   10116:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   1011a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   1011e:	f143 0100 	adc.w	r1, r3, #0
   10122:	458c      	cmp	ip, r1
   10124:	bf08      	it	eq
   10126:	4583      	cmpeq	fp, r0
   10128:	d206      	bcs.n	10138 <__kernel_ram_size+0x138>
						print_err(out, ctx);
   1012a:	4631      	mov	r1, r6
   1012c:	4628      	mov	r0, r5
   1012e:	f7ff ff49 	bl	ffc4 <print_err>
			might_format = 0;
   10132:	f04f 0b00 	mov.w	fp, #0
				break;
   10136:	e76d      	b.n	10014 <__kernel_ram_size+0x14>
					d = lld;
   10138:	4693      	mov	fp, r2
				if (d < 0) {
   1013a:	f1bb 0f00 	cmp.w	fp, #0
   1013e:	da06      	bge.n	1014e <__kernel_ram_size+0x14e>
					out((int)'-', ctx);
   10140:	4631      	mov	r1, r6
   10142:	202d      	movs	r0, #45	; 0x2d
   10144:	47a8      	blx	r5
					d = -d;
   10146:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   1014a:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   1014e:	4643      	mov	r3, r8
   10150:	465a      	mov	r2, fp
   10152:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   10156:	4631      	mov	r1, r6
   10158:	4628      	mov	r0, r5
   1015a:	f7fc fbcf 	bl	c8fc <_printk_dec_ulong>
   1015e:	e7e8      	b.n	10132 <__kernel_ram_size+0x132>
				if (length_mod == 'z') {
   10160:	2f7a      	cmp	r7, #122	; 0x7a
   10162:	d102      	bne.n	1016a <__kernel_ram_size+0x16a>
					u = va_arg(ap, unsigned int);
   10164:	6822      	ldr	r2, [r4, #0]
   10166:	3404      	adds	r4, #4
   10168:	e011      	b.n	1018e <__kernel_ram_size+0x18e>
				} else if (length_mod == 'l') {
   1016a:	2f6c      	cmp	r7, #108	; 0x6c
   1016c:	d0fa      	beq.n	10164 <__kernel_ram_size+0x164>
				} else if (length_mod == 'L') {
   1016e:	2f4c      	cmp	r7, #76	; 0x4c
   10170:	d1f8      	bne.n	10164 <__kernel_ram_size+0x164>
					if (llu > ~0UL) {
   10172:	2100      	movs	r1, #0
   10174:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   10178:	3407      	adds	r4, #7
   1017a:	f024 0307 	bic.w	r3, r4, #7
   1017e:	f103 0408 	add.w	r4, r3, #8
   10182:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   10186:	4299      	cmp	r1, r3
   10188:	bf08      	it	eq
   1018a:	4290      	cmpeq	r0, r2
   1018c:	d3cd      	bcc.n	1012a <__kernel_ram_size+0x12a>
				_printk_dec_ulong(out, ctx, u, padding,
   1018e:	f8cd 9000 	str.w	r9, [sp]
   10192:	4643      	mov	r3, r8
   10194:	e7df      	b.n	10156 <__kernel_ram_size+0x156>
				  out('0', ctx);
   10196:	4631      	mov	r1, r6
   10198:	2030      	movs	r0, #48	; 0x30
   1019a:	47a8      	blx	r5
				  out('x', ctx);
   1019c:	4631      	mov	r1, r6
   1019e:	2078      	movs	r0, #120	; 0x78
   101a0:	47a8      	blx	r5
				  min_width = 8;
   101a2:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   101a6:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   101aa:	f89a 2000 	ldrb.w	r2, [sl]
   101ae:	2a70      	cmp	r2, #112	; 0x70
   101b0:	d105      	bne.n	101be <__kernel_ram_size+0x1be>
					x = va_arg(ap, unsigned int);
   101b2:	6823      	ldr	r3, [r4, #0]
   101b4:	3404      	adds	r4, #4
   101b6:	9304      	str	r3, [sp, #16]
   101b8:	2300      	movs	r3, #0
   101ba:	9302      	str	r3, [sp, #8]
   101bc:	e00c      	b.n	101d8 <__kernel_ram_size+0x1d8>
				} else if (length_mod == 'l') {
   101be:	2f6c      	cmp	r7, #108	; 0x6c
   101c0:	d0f7      	beq.n	101b2 <__kernel_ram_size+0x1b2>
				} else if (length_mod == 'L') {
   101c2:	2f4c      	cmp	r7, #76	; 0x4c
   101c4:	d1f5      	bne.n	101b2 <__kernel_ram_size+0x1b2>
					x = va_arg(ap, unsigned long long);
   101c6:	3407      	adds	r4, #7
   101c8:	f024 0207 	bic.w	r2, r4, #7
   101cc:	6813      	ldr	r3, [r2, #0]
   101ce:	f102 0408 	add.w	r4, r2, #8
   101d2:	9304      	str	r3, [sp, #16]
   101d4:	6853      	ldr	r3, [r2, #4]
   101d6:	9302      	str	r3, [sp, #8]
	int digits = 0;
   101d8:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   101da:	2310      	movs	r3, #16
	int digits = 0;
   101dc:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   101de:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   101e0:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   101e2:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   101e4:	9902      	ldr	r1, [sp, #8]
   101e6:	9804      	ldr	r0, [sp, #16]
   101e8:	f1c2 0c20 	rsb	ip, r2, #32
   101ec:	f1a2 0e20 	sub.w	lr, r2, #32
   101f0:	40d0      	lsrs	r0, r2
   101f2:	fa01 fc0c 	lsl.w	ip, r1, ip
   101f6:	ea40 000c 	orr.w	r0, r0, ip
   101fa:	fa21 fe0e 	lsr.w	lr, r1, lr
   101fe:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   10202:	f010 000f 	ands.w	r0, r0, #15
   10206:	d108      	bne.n	1021a <__kernel_ram_size+0x21a>
   10208:	9905      	ldr	r1, [sp, #20]
   1020a:	b901      	cbnz	r1, 1020e <__kernel_ram_size+0x20e>
   1020c:	bb42      	cbnz	r2, 10260 <__kernel_ram_size+0x260>
			nibble += nibble > 9 ? 87 : 48;
   1020e:	f04f 0c30 	mov.w	ip, #48	; 0x30
   10212:	e008      	b.n	10226 <__kernel_ram_size+0x226>
			found_largest_digit = 1;
   10214:	f8cd b014 	str.w	fp, [sp, #20]
   10218:	e7e3      	b.n	101e2 <__kernel_ram_size+0x1e2>
			nibble += nibble > 9 ? 87 : 48;
   1021a:	2809      	cmp	r0, #9
   1021c:	bf8c      	ite	hi
   1021e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   10222:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   10226:	4631      	mov	r1, r6
   10228:	4460      	add	r0, ip
   1022a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1022e:	47a8      	blx	r5
			digits++;
   10230:	9b03      	ldr	r3, [sp, #12]
   10232:	3301      	adds	r3, #1
   10234:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   10236:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1023a:	2a00      	cmp	r2, #0
   1023c:	d1ea      	bne.n	10214 <__kernel_ram_size+0x214>
	if (padding == PAD_SPACE_AFTER) {
   1023e:	f1b8 0f03 	cmp.w	r8, #3
   10242:	f47f af76 	bne.w	10132 <__kernel_ram_size+0x132>
		remaining = min_width * 2 - digits;
   10246:	9b03      	ldr	r3, [sp, #12]
   10248:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   1024c:	f1bb 0f00 	cmp.w	fp, #0
   10250:	f77f af6f 	ble.w	10132 <__kernel_ram_size+0x132>
			out(' ', ctx);
   10254:	4631      	mov	r1, r6
   10256:	2020      	movs	r0, #32
   10258:	47a8      	blx	r5
   1025a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1025e:	e7f5      	b.n	1024c <__kernel_ram_size+0x24c>
		if (remaining-- <= min_width) {
   10260:	1e59      	subs	r1, r3, #1
   10262:	4599      	cmp	r9, r3
   10264:	9106      	str	r1, [sp, #24]
   10266:	db07      	blt.n	10278 <__kernel_ram_size+0x278>
			if (padding == PAD_ZERO_BEFORE) {
   10268:	f1b8 0f01 	cmp.w	r8, #1
   1026c:	d106      	bne.n	1027c <__kernel_ram_size+0x27c>
				out('0', ctx);
   1026e:	4631      	mov	r1, r6
   10270:	2030      	movs	r0, #48	; 0x30
   10272:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   10274:	47a8      	blx	r5
   10276:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   10278:	9b06      	ldr	r3, [sp, #24]
   1027a:	e7b2      	b.n	101e2 <__kernel_ram_size+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
   1027c:	f1b8 0f02 	cmp.w	r8, #2
   10280:	d1fa      	bne.n	10278 <__kernel_ram_size+0x278>
   10282:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   10284:	4631      	mov	r1, r6
   10286:	2020      	movs	r0, #32
   10288:	e7f4      	b.n	10274 <__kernel_ram_size+0x274>
					out((int)(*s++), ctx);
   1028a:	4631      	mov	r1, r6
   1028c:	9202      	str	r2, [sp, #8]
   1028e:	47a8      	blx	r5
   10290:	4621      	mov	r1, r4
   10292:	9a02      	ldr	r2, [sp, #8]
   10294:	e6fa      	b.n	1008c <__kernel_ram_size+0x8c>
						out(' ', ctx);
   10296:	4631      	mov	r1, r6
   10298:	2020      	movs	r0, #32
   1029a:	47a8      	blx	r5
   1029c:	3c01      	subs	r4, #1
   1029e:	e702      	b.n	100a6 <__kernel_ram_size+0xa6>
				out(c, ctx);
   102a0:	4631      	mov	r1, r6
   102a2:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   102a4:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   102a8:	47a8      	blx	r5
   102aa:	e6ff      	b.n	100ac <__kernel_ram_size+0xac>
				length_mod = 0;
   102ac:	465f      	mov	r7, fp
				padding = PAD_NONE;
   102ae:	46d8      	mov	r8, fp
				min_width = -1;
   102b0:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   102b4:	f04f 0b01 	mov.w	fp, #1
   102b8:	e6ac      	b.n	10014 <__kernel_ram_size+0x14>
				padding = PAD_SPACE_AFTER;
   102ba:	f04f 0803 	mov.w	r8, #3
   102be:	e6a9      	b.n	10014 <__kernel_ram_size+0x14>
					padding = PAD_ZERO_BEFORE;
   102c0:	f04f 0801 	mov.w	r8, #1
   102c4:	e6a6      	b.n	10014 <__kernel_ram_size+0x14>
				char *s = va_arg(ap, char *);
   102c6:	465c      	mov	r4, fp
			might_format = 0;
   102c8:	4683      	mov	fp, r0
   102ca:	e6a3      	b.n	10014 <__kernel_ram_size+0x14>

000102cc <printk>:
{
   102cc:	b40f      	push	{r0, r1, r2, r3}
   102ce:	b507      	push	{r0, r1, r2, lr}
   102d0:	a904      	add	r1, sp, #16
   102d2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   102d6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   102d8:	f7fc fb62 	bl	c9a0 <vprintk>
}
   102dc:	b003      	add	sp, #12
   102de:	f85d eb04 	ldr.w	lr, [sp], #4
   102e2:	b004      	add	sp, #16
   102e4:	4770      	bx	lr

000102e6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   102e6:	4770      	bx	lr

000102e8 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   102e8:	f7fd bde4 	b.w	deb4 <SystemInit>

000102ec <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   102ec:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   102ee:	7a5a      	ldrb	r2, [r3, #9]
   102f0:	b932      	cbnz	r2, 10300 <get_status+0x14>
	if (data->ref > 0) {
   102f2:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   102f6:	2800      	cmp	r0, #0
   102f8:	bfcc      	ite	gt
   102fa:	2000      	movgt	r0, #0
   102fc:	2001      	movle	r0, #1
   102fe:	4770      	bx	lr
   10300:	2002      	movs	r0, #2
}
   10302:	4770      	bx	lr

00010304 <clock_stop>:
	const struct nrf_clock_control_config *config =
   10304:	6802      	ldr	r2, [r0, #0]
{
   10306:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   10308:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1030a:	6884      	ldr	r4, [r0, #8]
   1030c:	f04f 0320 	mov.w	r3, #32
   10310:	f3ef 8611 	mrs	r6, BASEPRI
   10314:	f383 8811 	msr	BASEPRI, r3
   10318:	f3bf 8f6f 	isb	sy
	data->ref--;
   1031c:	7a23      	ldrb	r3, [r4, #8]
   1031e:	3b01      	subs	r3, #1
   10320:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   10322:	2b00      	cmp	r3, #0
	data->ref--;
   10324:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   10326:	d118      	bne.n	1035a <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10328:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1032c:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
   1032e:	b983      	cbnz	r3, 10352 <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   10330:	2201      	movs	r2, #1
   10332:	7aeb      	ldrb	r3, [r5, #11]
   10334:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   10338:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1033a:	2200      	movs	r2, #0
   1033c:	892b      	ldrh	r3, [r5, #8]
   1033e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   10342:	601a      	str	r2, [r3, #0]
		data->started = false;
   10344:	2000      	movs	r0, #0
   10346:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   10348:	f386 8811 	msr	BASEPRI, r6
   1034c:	f3bf 8f6f 	isb	sy
}
   10350:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   10352:	4798      	blx	r3
   10354:	2800      	cmp	r0, #0
   10356:	d1eb      	bne.n	10330 <clock_stop+0x2c>
   10358:	e7f4      	b.n	10344 <clock_stop+0x40>
   1035a:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1035e:	bfbc      	itt	lt
   10360:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   10362:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   10366:	e7ef      	b.n	10348 <clock_stop+0x44>

00010368 <clock_async_start>:
{
   10368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1036a:	6803      	ldr	r3, [r0, #0]
{
   1036c:	4606      	mov	r6, r0
   1036e:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   10370:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   10372:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   10374:	f04f 0320 	mov.w	r3, #32
   10378:	f3ef 8211 	mrs	r2, BASEPRI
   1037c:	f383 8811 	msr	BASEPRI, r3
   10380:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   10384:	7a2b      	ldrb	r3, [r5, #8]
   10386:	3301      	adds	r3, #1
   10388:	b25b      	sxtb	r3, r3
   1038a:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1038c:	f382 8811 	msr	BASEPRI, r2
   10390:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   10394:	7a6a      	ldrb	r2, [r5, #9]
   10396:	b132      	cbz	r2, 103a6 <clock_async_start+0x3e>
		if (data) {
   10398:	b90c      	cbnz	r4, 1039e <clock_async_start+0x36>
	return 0;
   1039a:	2000      	movs	r0, #0
}
   1039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1039e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   103a2:	4798      	blx	r3
   103a4:	e7f9      	b.n	1039a <clock_async_start+0x32>
		if (ref == 1) {
   103a6:	2b01      	cmp	r3, #1
   103a8:	d106      	bne.n	103b8 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
   103aa:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   103ac:	b933      	cbnz	r3, 103bc <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   103ae:	2201      	movs	r2, #1
   103b0:	7abb      	ldrb	r3, [r7, #10]
   103b2:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   103b6:	601a      	str	r2, [r3, #0]
		if (data) {
   103b8:	b94c      	cbnz	r4, 103ce <clock_async_start+0x66>
   103ba:	e7ee      	b.n	1039a <clock_async_start+0x32>
					config->start_handler(dev) : true;
   103bc:	4798      	blx	r3
   103be:	2800      	cmp	r0, #0
   103c0:	d1f5      	bne.n	103ae <clock_async_start+0x46>
			} else if (data) {
   103c2:	2c00      	cmp	r4, #0
   103c4:	d0e9      	beq.n	1039a <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   103c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   103ca:	4630      	mov	r0, r6
   103cc:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   103ce:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   103d0:	429c      	cmp	r4, r3
   103d2:	d00d      	beq.n	103f0 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   103d4:	b113      	cbz	r3, 103dc <clock_async_start+0x74>
	return node->next;
   103d6:	681b      	ldr	r3, [r3, #0]
	} while (item);
   103d8:	2b00      	cmp	r3, #0
   103da:	d1f9      	bne.n	103d0 <clock_async_start+0x68>
	parent->next = child;
   103dc:	2000      	movs	r0, #0
   103de:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   103e0:	686b      	ldr	r3, [r5, #4]
   103e2:	b913      	cbnz	r3, 103ea <clock_async_start+0x82>
	list->head = node;
   103e4:	e9c5 4400 	strd	r4, r4, [r5]
   103e8:	e7d7      	b.n	1039a <clock_async_start+0x32>
	parent->next = child;
   103ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   103ec:	606c      	str	r4, [r5, #4]
   103ee:	e7d5      	b.n	1039c <clock_async_start+0x34>
				return -EALREADY;
   103f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   103f4:	e7d2      	b.n	1039c <clock_async_start+0x34>

000103f6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   103f6:	2200      	movs	r2, #0
   103f8:	f7ff bfb6 	b.w	10368 <clock_async_start>

000103fc <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   103fc:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   103fe:	2000      	movs	r0, #0
	list->tail = NULL;
   10400:	e9c3 0000 	strd	r0, r0, [r3]
}
   10404:	4770      	bx	lr

00010406 <hfclk_init>:
{
   10406:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   10408:	2200      	movs	r2, #0
{
   1040a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1040c:	2101      	movs	r1, #1
   1040e:	2005      	movs	r0, #5
   10410:	f7fd f82a 	bl	d468 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   10414:	2005      	movs	r0, #5
   10416:	f7fd f817 	bl	d448 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   1041a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1041e:	2202      	movs	r2, #2
   10420:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   10424:	2203      	movs	r2, #3
	list->head = NULL;
   10426:	2000      	movs	r0, #0
   10428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1042c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1042e:	e9c3 0000 	strd	r0, r0, [r3]
}
   10432:	bd10      	pop	{r4, pc}

00010434 <clkstarted_handle>:
{
   10434:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   10436:	6884      	ldr	r4, [r0, #8]
{
   10438:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1043a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1043c:	b12b      	cbz	r3, 1044a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1043e:	6861      	ldr	r1, [r4, #4]
	return node->next;
   10440:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10442:	428b      	cmp	r3, r1
	list->head = node;
   10444:	6022      	str	r2, [r4, #0]
	list->tail = node;
   10446:	bf08      	it	eq
   10448:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1044a:	2201      	movs	r2, #1
   1044c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1044e:	b903      	cbnz	r3, 10452 <clkstarted_handle+0x1e>
}
   10450:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   10452:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   10456:	4628      	mov	r0, r5
   10458:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1045a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1045c:	2b00      	cmp	r3, #0
   1045e:	d0f7      	beq.n	10450 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10460:	6861      	ldr	r1, [r4, #4]
	return node->next;
   10462:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10464:	428b      	cmp	r3, r1
	list->head = node;
   10466:	6022      	str	r2, [r4, #0]
	list->tail = node;
   10468:	bf08      	it	eq
   1046a:	6062      	streq	r2, [r4, #4]
   1046c:	e7ef      	b.n	1044e <clkstarted_handle+0x1a>

0001046e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1046e:	4770      	bx	lr

00010470 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   10470:	4770      	bx	lr

00010472 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   10472:	2300      	movs	r3, #0
{
   10474:	b507      	push	{r0, r1, r2, lr}
	mbedtls_platform_context platform_ctx = {0};
   10476:	a802      	add	r0, sp, #8
   10478:	f800 3d04 	strb.w	r3, [r0, #-4]!
	err = mbedtls_platform_setup(&platform_ctx);
   1047c:	f7fe ff62 	bl	f344 <mbedtls_platform_setup>
}
   10480:	b003      	add	sp, #12
   10482:	f85d fb04 	ldr.w	pc, [sp], #4

00010486 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   10486:	2990      	cmp	r1, #144	; 0x90
{
   10488:	b508      	push	{r3, lr}
   1048a:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   1048c:	d139      	bne.n	10502 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   1048e:	460a      	mov	r2, r1
   10490:	4601      	mov	r1, r0
   10492:	2000      	movs	r0, #0
   10494:	f7fe ff62 	bl	f35c <mbedtls_hardware_poll>
}
   10498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1049c:	4671      	mov	r1, lr
   1049e:	4672      	mov	r2, lr
   104a0:	4673      	mov	r3, lr
   104a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   104a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   104aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   104ae:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   104b2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   104b6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   104ba:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   104be:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   104c2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   104c6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   104ca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   104ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   104d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   104d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   104da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   104de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   104e2:	f38e 8c00 	msr	CPSR_fs, lr
   104e6:	b410      	push	{r4}
   104e8:	eef1 ca10 	vmrs	ip, fpscr
   104ec:	f64f 7460 	movw	r4, #65376	; 0xff60
   104f0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   104f4:	ea0c 0c04 	and.w	ip, ip, r4
   104f8:	eee1 ca10 	vmsr	fpscr, ip
   104fc:	bc10      	pop	{r4}
   104fe:	46f4      	mov	ip, lr
   10500:	4774      	bxns	lr
		return -EINVAL;
   10502:	f06f 0015 	mvn.w	r0, #21
   10506:	e7c7      	b.n	10498 <__acle_se_spm_request_random_number+0x12>

00010508 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   10508:	f000 021f 	and.w	r2, r0, #31
   1050c:	211f      	movs	r1, #31
   1050e:	2004      	movs	r0, #4
   10510:	f7fc be2e 	b.w	d170 <adp536x_reg_write_mask>

00010514 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   10514:	f000 0207 	and.w	r2, r0, #7
   10518:	2107      	movs	r1, #7
   1051a:	2002      	movs	r0, #2
   1051c:	f7fc be28 	b.w	d170 <adp536x_reg_write_mask>

00010520 <adp536x_charging_enable>:
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   10520:	4602      	mov	r2, r0
   10522:	2101      	movs	r1, #1
   10524:	2007      	movs	r0, #7
   10526:	f7fc be23 	b.w	d170 <adp536x_reg_write_mask>

0001052a <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   1052a:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   1052c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   10530:	21e0      	movs	r1, #224	; 0xe0
   10532:	2015      	movs	r0, #21
   10534:	f7fc be1c 	b.w	d170 <adp536x_reg_write_mask>

00010538 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   10538:	2218      	movs	r2, #24
   1053a:	213f      	movs	r1, #63	; 0x3f
   1053c:	202a      	movs	r0, #42	; 0x2a
   1053e:	f7fc be17 	b.w	d170 <adp536x_reg_write_mask>

00010542 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   10542:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   10544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   10548:	2102      	movs	r1, #2
   1054a:	2029      	movs	r0, #41	; 0x29
   1054c:	f7fc be10 	b.w	d170 <adp536x_reg_write_mask>

00010550 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   10550:	2213      	movs	r2, #19
   10552:	213f      	movs	r1, #63	; 0x3f
   10554:	202c      	movs	r0, #44	; 0x2c
   10556:	f7fc be0b 	b.w	d170 <adp536x_reg_write_mask>

0001055a <adp536x_buckbst_enable>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   1055a:	4602      	mov	r2, r0
   1055c:	2101      	movs	r1, #1
   1055e:	202b      	movs	r0, #43	; 0x2b
   10560:	f7fc be06 	b.w	d170 <adp536x_reg_write_mask>

00010564 <abort_function>:
{
   10564:	e7fe      	b.n	10564 <abort_function>

00010566 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
   10566:	f7fc bf1f 	b.w	d3a8 <z_arm_bus_fault>

0001056a <irq_target_state_set>:
 * @param secure_state 1 if target state is Secure, 0 otherwise.
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
   1056a:	b243      	sxtb	r3, r0
	if (secure_state) {
   1056c:	b1a9      	cbz	r1, 1059a <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
   1056e:	2b00      	cmp	r3, #0
   10570:	db12      	blt.n	10598 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   10572:	2101      	movs	r1, #1
   10574:	095b      	lsrs	r3, r3, #5
   10576:	009b      	lsls	r3, r3, #2
   10578:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1057c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   10580:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   10584:	f000 001f 	and.w	r0, r0, #31
   10588:	fa01 f000 	lsl.w	r0, r1, r0
   1058c:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   10590:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   10594:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
   10598:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   1059a:	2b00      	cmp	r3, #0
   1059c:	dbfc      	blt.n	10598 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1059e:	2201      	movs	r2, #1
   105a0:	095b      	lsrs	r3, r3, #5
   105a2:	009b      	lsls	r3, r3, #2
   105a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   105a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   105ac:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   105b0:	f000 001f 	and.w	r0, r0, #31
   105b4:	fa02 f000 	lsl.w	r0, r2, r0
   105b8:	4308      	orrs	r0, r1
   105ba:	e7e9      	b.n	10590 <irq_target_state_set+0x26>

000105bc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   105bc:	f000 b916 	b.w	107ec <z_fatal_error>

000105c0 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   105c0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   105c2:	6800      	ldr	r0, [r0, #0]
   105c4:	f000 b912 	b.w	107ec <z_fatal_error>

000105c8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   105c8:	b508      	push	{r3, lr}
	handler();
   105ca:	f7fc feff 	bl	d3cc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   105ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   105d2:	f7fc be95 	b.w	d300 <z_arm_exc_exit>

000105d6 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   105d6:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   105d8:	2100      	movs	r1, #0
   105da:	a801      	add	r0, sp, #4
   105dc:	f7fd fa6e 	bl	dabc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   105e0:	b003      	add	sp, #12
   105e2:	f85d fb04 	ldr.w	pc, [sp], #4

000105e6 <mpu_configure_region>:
{
   105e6:	b530      	push	{r4, r5, lr}
   105e8:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   105ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
   105ee:	890d      	ldrh	r5, [r1, #8]
	region_conf.base = new_region->start;
   105f0:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   105f2:	684c      	ldr	r4, [r1, #4]
	p_attr->mair_idx = attr->mair_idx;
   105f4:	8949      	ldrh	r1, [r1, #10]
	p_attr->rbar = attr->rbar &
   105f6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   105fa:	f361 1247 	bfi	r2, r1, #5, #3
	region_conf.base = new_region->start;
   105fe:	9300      	str	r3, [sp, #0]
   10600:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10604:	f023 031f 	bic.w	r3, r3, #31
   10608:	1e62      	subs	r2, r4, #1
   1060a:	4413      	add	r3, r2
   1060c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   10610:	280f      	cmp	r0, #15
   10612:	9303      	str	r3, [sp, #12]
   10614:	4604      	mov	r4, r0
   10616:	d805      	bhi.n	10624 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   10618:	4669      	mov	r1, sp
   1061a:	f7fd f909 	bl	d830 <region_init>
}
   1061e:	4620      	mov	r0, r4
   10620:	b005      	add	sp, #20
   10622:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   10624:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   10628:	e7f9      	b.n	1061e <mpu_configure_region+0x38>

0001062a <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   1062a:	3801      	subs	r0, #1
   1062c:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1062e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   10632:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   10636:	4293      	cmp	r3, r2
   10638:	d102      	bne.n	10640 <strcmp+0x16>
   1063a:	2b00      	cmp	r3, #0
   1063c:	d1f7      	bne.n	1062e <strcmp+0x4>
   1063e:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   10640:	1a98      	subs	r0, r3, r2
   10642:	4770      	bx	lr

00010644 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   10644:	1a43      	subs	r3, r0, r1
   10646:	4293      	cmp	r3, r2
{
   10648:	b510      	push	{r4, lr}
   1064a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1064e:	d308      	bcc.n	10662 <memmove+0x1e>
	char *dest = d;
   10650:	4602      	mov	r2, r0
   10652:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   10654:	429a      	cmp	r2, r3
   10656:	d00b      	beq.n	10670 <memmove+0x2c>
			*dest = *src;
   10658:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1065c:	f802 4b01 	strb.w	r4, [r2], #1
   10660:	e7f8      	b.n	10654 <memmove+0x10>
   10662:	440a      	add	r2, r1
			dest[n] = src[n];
   10664:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   10668:	428a      	cmp	r2, r1
			dest[n] = src[n];
   1066a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1066e:	d1f9      	bne.n	10664 <memmove+0x20>
			n--;
		}
	}

	return d;
}
   10670:	bd10      	pop	{r4, pc}

00010672 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   10672:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   10674:	ea81 0400 	eor.w	r4, r1, r0
   10678:	07a5      	lsls	r5, r4, #30
   1067a:	4603      	mov	r3, r0
   1067c:	d00b      	beq.n	10696 <memcpy+0x24>
   1067e:	3b01      	subs	r3, #1
   10680:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   10682:	4291      	cmp	r1, r2
   10684:	d11d      	bne.n	106c2 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   10686:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   10688:	2a00      	cmp	r2, #0
   1068a:	d0fc      	beq.n	10686 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1068c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   10690:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   10692:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   10696:	079c      	lsls	r4, r3, #30
   10698:	d1f6      	bne.n	10688 <memcpy+0x16>
   1069a:	460c      	mov	r4, r1
   1069c:	1f1d      	subs	r5, r3, #4
   1069e:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   106a0:	1b3e      	subs	r6, r7, r4
   106a2:	2e03      	cmp	r6, #3
   106a4:	d808      	bhi.n	106b8 <memcpy+0x46>
   106a6:	f06f 0503 	mvn.w	r5, #3
   106aa:	0894      	lsrs	r4, r2, #2
   106ac:	fb05 2204 	mla	r2, r5, r4, r2
   106b0:	00a4      	lsls	r4, r4, #2
   106b2:	4423      	add	r3, r4
   106b4:	4421      	add	r1, r4
   106b6:	e7e2      	b.n	1067e <memcpy+0xc>
			*(d_word++) = *(s_word++);
   106b8:	f854 6b04 	ldr.w	r6, [r4], #4
   106bc:	f845 6f04 	str.w	r6, [r5, #4]!
   106c0:	e7ee      	b.n	106a0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   106c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   106c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   106ca:	e7da      	b.n	10682 <memcpy+0x10>

000106cc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   106cc:	4603      	mov	r3, r0
{
   106ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   106d0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   106d2:	079c      	lsls	r4, r3, #30
   106d4:	d10f      	bne.n	106f6 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   106d6:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   106d8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   106dc:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   106e0:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
   106e2:	1b7e      	subs	r6, r7, r5
   106e4:	2e03      	cmp	r6, #3
   106e6:	d80c      	bhi.n	10702 <memset+0x36>
   106e8:	0894      	lsrs	r4, r2, #2
   106ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   106ee:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   106f0:	429c      	cmp	r4, r3
   106f2:	d109      	bne.n	10708 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   106f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   106f6:	2a00      	cmp	r2, #0
   106f8:	d0fc      	beq.n	106f4 <memset+0x28>
		*(d_byte++) = c_byte;
   106fa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   106fe:	3a01      	subs	r2, #1
   10700:	e7e7      	b.n	106d2 <memset+0x6>
		*(d_word++) = c_word;
   10702:	f845 4b04 	str.w	r4, [r5], #4
   10706:	e7ec      	b.n	106e2 <memset+0x16>
		*(d_byte++) = c_byte;
   10708:	f804 1b01 	strb.w	r1, [r4], #1
   1070c:	e7f0      	b.n	106f0 <memset+0x24>

0001070e <_stdout_hook_default>:
}
   1070e:	f04f 30ff 	mov.w	r0, #4294967295
   10712:	4770      	bx	lr

00010714 <i2c_nrfx_twim_configure>:
	return dev->config->config_info;
   10714:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
   10716:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
   10718:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   1071a:	d405      	bmi.n	10728 <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   1071c:	f3c1 0242 	ubfx	r2, r1, #1, #3
   10720:	2a01      	cmp	r2, #1
   10722:	d004      	beq.n	1072e <i2c_nrfx_twim_configure+0x1a>
   10724:	2a02      	cmp	r2, #2
   10726:	d00b      	beq.n	10740 <i2c_nrfx_twim_configure+0x2c>
		return -EINVAL;
   10728:	f06f 0015 	mvn.w	r0, #21
}
   1072c:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   1072e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   10732:	681b      	ldr	r3, [r3, #0]
   10734:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   10738:	6883      	ldr	r3, [r0, #8]
	return 0;
   1073a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1073c:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
   1073e:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   10740:	681b      	ldr	r3, [r3, #0]
   10742:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   10746:	e7f5      	b.n	10734 <i2c_nrfx_twim_configure+0x20>

00010748 <uarte_nrfx_config_get>:
{
   10748:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1074a:	6882      	ldr	r2, [r0, #8]
   1074c:	e892 0003 	ldmia.w	r2, {r0, r1}
   10750:	e883 0003 	stmia.w	r3, {r0, r1}
}
   10754:	2000      	movs	r0, #0
   10756:	4770      	bx	lr

00010758 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   10758:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1075a:	689b      	ldr	r3, [r3, #8]
   1075c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1075e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   10762:	b118      	cbz	r0, 1076c <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   10764:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   10768:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1076c:	4770      	bx	lr

0001076e <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1076e:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   10770:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   10772:	689b      	ldr	r3, [r3, #8]
   10774:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10776:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1077a:	b138      	cbz	r0, 1078c <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1077c:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1077e:	2000      	movs	r0, #0
   10780:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10782:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10784:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10788:	601a      	str	r2, [r3, #0]
	return 0;
   1078a:	4770      	bx	lr
		return -1;
   1078c:	f04f 30ff 	mov.w	r0, #4294967295
}
   10790:	4770      	bx	lr

00010792 <uarte_nrfx_poll_out>:
{
   10792:	b082      	sub	sp, #8
   10794:	aa02      	add	r2, sp, #8
   10796:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1079a:	2100      	movs	r1, #0
	return dev->config->config_info;
   1079c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1079e:	689b      	ldr	r3, [r3, #8]
   107a0:	681b      	ldr	r3, [r3, #0]
   107a2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   107a6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   107aa:	2201      	movs	r2, #1
   107ac:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   107b0:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   107b2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   107b6:	2900      	cmp	r1, #0
   107b8:	d0fb      	beq.n	107b2 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   107ba:	60da      	str	r2, [r3, #12]
}
   107bc:	b002      	add	sp, #8
   107be:	4770      	bx	lr

000107c0 <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
   107c0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   107c2:	f7fc fd07 	bl	d1d4 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   107c6:	f7fc fd85 	bl	d2d4 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   107ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   107ce:	f7fe be7d 	b.w	f4cc <nrf_cc310_platform_init_no_rng>

000107d2 <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   107d2:	4700      	bx	r0

000107d4 <z_arch_system_halt>:
	__asm__ volatile(
   107d4:	f04f 0220 	mov.w	r2, #32
   107d8:	f3ef 8311 	mrs	r3, BASEPRI
   107dc:	f382 8811 	msr	BASEPRI, r2
   107e0:	f3bf 8f6f 	isb	sy
   107e4:	e7fe      	b.n	107e4 <z_arch_system_halt+0x10>

000107e6 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   107e6:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
   107e8:	f7ff fff4 	bl	107d4 <z_arch_system_halt>

000107ec <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   107ec:	b570      	push	{r4, r5, r6, lr}
   107ee:	4605      	mov	r5, r0
   107f0:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   107f2:	f7fe fad3 	bl	ed9c <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   107f6:	4631      	mov	r1, r6
   107f8:	4604      	mov	r4, r0
   107fa:	4628      	mov	r0, r5
   107fc:	f7ff fff3 	bl	107e6 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   10800:	4620      	mov	r0, r4
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   10802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10806:	f7fc bfc3 	b.w	d790 <z_impl_k_thread_abort>

0001080a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1080a:	f7ff be31 	b.w	10470 <z_clock_idle_exit>

0001080e <k_mem_slab_init>:
{
   1080e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   10810:	2400      	movs	r4, #0
	slab->block_size = block_size;
   10812:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   10816:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1081a:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1081c:	42a3      	cmp	r3, r4
   1081e:	d102      	bne.n	10826 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   10820:	e9c0 0000 	strd	r0, r0, [r0]
}
   10824:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   10826:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10828:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1082a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1082c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1082e:	4411      	add	r1, r2
   10830:	e7f4      	b.n	1081c <k_mem_slab_init+0xe>

00010832 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   10832:	2300      	movs	r3, #0
   10834:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   10838:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1083c:	4770      	bx	lr

0001083e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1083e:	7b43      	ldrb	r3, [r0, #13]
   10840:	06db      	lsls	r3, r3, #27
   10842:	bf03      	ittte	eq
   10844:	6980      	ldreq	r0, [r0, #24]
   10846:	fab0 f080 	clzeq	r0, r0
   1084a:	0940      	lsreq	r0, r0, #5
   1084c:	2000      	movne	r0, #0
}
   1084e:	4770      	bx	lr

00010850 <z_unpend_thread_no_timeout>:
{
   10850:	b538      	push	{r3, r4, r5, lr}
   10852:	4604      	mov	r4, r0
   10854:	f04f 0320 	mov.w	r3, #32
   10858:	f3ef 8511 	mrs	r5, BASEPRI
   1085c:	f383 8811 	msr	BASEPRI, r3
   10860:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   10864:	4601      	mov	r1, r0
   10866:	6880      	ldr	r0, [r0, #8]
   10868:	f7fe f8cc 	bl	ea04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1086c:	7b63      	ldrb	r3, [r4, #13]
   1086e:	f023 0302 	bic.w	r3, r3, #2
   10872:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   10874:	f385 8811 	msr	BASEPRI, r5
   10878:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1087c:	2300      	movs	r3, #0
   1087e:	60a3      	str	r3, [r4, #8]
}
   10880:	bd38      	pop	{r3, r4, r5, pc}

00010882 <z_reschedule>:
{
   10882:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   10884:	b939      	cbnz	r1, 10896 <z_reschedule+0x14>
   10886:	f7fe f855 	bl	e934 <resched.part.15>
	if (resched(key.key)) {
   1088a:	b120      	cbz	r0, 10896 <z_reschedule+0x14>
}
   1088c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10890:	4608      	mov	r0, r1
   10892:	f7fc bdbf 	b.w	d414 <z_arch_swap>
   10896:	f381 8811 	msr	BASEPRI, r1
   1089a:	f3bf 8f6f 	isb	sy
   1089e:	bd08      	pop	{r3, pc}

000108a0 <z_reschedule_irqlock>:
{
   108a0:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   108a2:	4602      	mov	r2, r0
   108a4:	b938      	cbnz	r0, 108b6 <z_reschedule_irqlock+0x16>
   108a6:	f7fe f845 	bl	e934 <resched.part.15>
	if (resched(key)) {
   108aa:	b120      	cbz	r0, 108b6 <z_reschedule_irqlock+0x16>
}
   108ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   108b0:	4610      	mov	r0, r2
   108b2:	f7fc bdaf 	b.w	d414 <z_arch_swap>
   108b6:	f382 8811 	msr	BASEPRI, r2
   108ba:	f3bf 8f6f 	isb	sy
   108be:	bd08      	pop	{r3, pc}

000108c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   108c0:	f04f 0320 	mov.w	r3, #32
   108c4:	f3ef 8011 	mrs	r0, BASEPRI
   108c8:	f383 8811 	msr	BASEPRI, r3
   108cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   108d0:	f7ff bfe6 	b.w	108a0 <z_reschedule_irqlock>

000108d4 <z_priq_dumb_best>:
	return list->head == list;
   108d4:	6803      	ldr	r3, [r0, #0]
}
   108d6:	4298      	cmp	r0, r3
   108d8:	bf14      	ite	ne
   108da:	4618      	movne	r0, r3
   108dc:	2000      	moveq	r0, #0
   108de:	4770      	bx	lr

000108e0 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   108e0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   108e4:	b570      	push	{r4, r5, r6, lr}
   108e6:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   108e8:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   108ec:	b1cb      	cbz	r3, 10922 <z_thread_timeout+0x42>
   108ee:	f04f 0320 	mov.w	r3, #32
   108f2:	f3ef 8611 	mrs	r6, BASEPRI
   108f6:	f383 8811 	msr	BASEPRI, r3
   108fa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   108fe:	4629      	mov	r1, r5
   10900:	f850 0c10 	ldr.w	r0, [r0, #-16]
   10904:	f7fe f87e 	bl	ea04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10908:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1090c:	f023 0302 	bic.w	r3, r3, #2
   10910:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   10914:	f386 8811 	msr	BASEPRI, r6
   10918:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1091c:	2300      	movs	r3, #0
   1091e:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   10922:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   10926:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   10928:	f023 0314 	bic.w	r3, r3, #20
   1092c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   10930:	f7ff ff85 	bl	1083e <z_is_thread_ready>
   10934:	b120      	cbz	r0, 10940 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   10936:	4628      	mov	r0, r5
}
   10938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1093c:	f7fe b8b2 	b.w	eaa4 <z_add_thread_to_ready_q>
   10940:	bd70      	pop	{r4, r5, r6, pc}

00010942 <z_unpend_first_thread>:
{
   10942:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10944:	f04f 0320 	mov.w	r3, #32
   10948:	f3ef 8211 	mrs	r2, BASEPRI
   1094c:	f383 8811 	msr	BASEPRI, r3
   10950:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   10954:	f7ff ffbe 	bl	108d4 <z_priq_dumb_best>
   10958:	4604      	mov	r4, r0
	__asm__ volatile(
   1095a:	f382 8811 	msr	BASEPRI, r2
   1095e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   10962:	b1c8      	cbz	r0, 10998 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   10964:	f04f 0320 	mov.w	r3, #32
   10968:	f3ef 8511 	mrs	r5, BASEPRI
   1096c:	f383 8811 	msr	BASEPRI, r3
   10970:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   10974:	4601      	mov	r1, r0
   10976:	6880      	ldr	r0, [r0, #8]
   10978:	f7fe f844 	bl	ea04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1097c:	7b63      	ldrb	r3, [r4, #13]
   1097e:	f023 0302 	bic.w	r3, r3, #2
   10982:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   10984:	f385 8811 	msr	BASEPRI, r5
   10988:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1098c:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1098e:	f104 0018 	add.w	r0, r4, #24
   10992:	60a3      	str	r3, [r4, #8]
   10994:	f000 f832 	bl	109fc <z_abort_timeout>
}
   10998:	4620      	mov	r0, r4
   1099a:	bd38      	pop	{r3, r4, r5, pc}

0001099c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1099c:	7b43      	ldrb	r3, [r0, #13]
   1099e:	06db      	lsls	r3, r3, #27
   109a0:	bf03      	ittte	eq
   109a2:	6980      	ldreq	r0, [r0, #24]
   109a4:	fab0 f080 	clzeq	r0, r0
   109a8:	0940      	lsreq	r0, r0, #5
   109aa:	2000      	movne	r0, #0
}
   109ac:	4770      	bx	lr

000109ae <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   109ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   109b0:	b510      	push	{r4, lr}
   109b2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   109b4:	b103      	cbz	r3, 109b8 <z_thread_single_abort+0xa>
		thread->fn_abort();
   109b6:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   109b8:	4620      	mov	r0, r4
   109ba:	f7ff ffef 	bl	1099c <z_is_thread_ready>
   109be:	b138      	cbz	r0, 109d0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   109c0:	4620      	mov	r0, r4
   109c2:	f7fe f921 	bl	ec08 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   109c6:	7b63      	ldrb	r3, [r4, #13]
   109c8:	f043 0308 	orr.w	r3, r3, #8
   109cc:	7363      	strb	r3, [r4, #13]
}
   109ce:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   109d0:	7b63      	ldrb	r3, [r4, #13]
   109d2:	079b      	lsls	r3, r3, #30
   109d4:	d502      	bpl.n	109dc <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   109d6:	4620      	mov	r0, r4
   109d8:	f7ff ff3a 	bl	10850 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   109dc:	69a3      	ldr	r3, [r4, #24]
   109de:	2b00      	cmp	r3, #0
   109e0:	d0f1      	beq.n	109c6 <z_thread_single_abort+0x18>
   109e2:	f104 0018 	add.w	r0, r4, #24
   109e6:	f000 f809 	bl	109fc <z_abort_timeout>
   109ea:	e7ec      	b.n	109c6 <z_thread_single_abort+0x18>

000109ec <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   109ec:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   109ee:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   109f0:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   109f2:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   109f4:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   109f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   109fa:	4770      	bx	lr

000109fc <z_abort_timeout>:
{
   109fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   109fe:	f04f 0220 	mov.w	r2, #32
   10a02:	f3ef 8411 	mrs	r4, BASEPRI
   10a06:	f382 8811 	msr	BASEPRI, r2
   10a0a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   10a0e:	6803      	ldr	r3, [r0, #0]
   10a10:	b13b      	cbz	r3, 10a22 <z_abort_timeout+0x26>
			remove_timeout(to);
   10a12:	f7fe fab7 	bl	ef84 <remove_timeout>
			ret = 0;
   10a16:	2000      	movs	r0, #0
	__asm__ volatile(
   10a18:	f384 8811 	msr	BASEPRI, r4
   10a1c:	f3bf 8f6f 	isb	sy
}
   10a20:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   10a22:	f06f 0015 	mvn.w	r0, #21
   10a26:	e7f7      	b.n	10a18 <z_abort_timeout+0x1c>

00010a28 <z_get_next_timeout_expiry>:
{
   10a28:	b510      	push	{r4, lr}
	__asm__ volatile(
   10a2a:	f04f 0320 	mov.w	r3, #32
   10a2e:	f3ef 8411 	mrs	r4, BASEPRI
   10a32:	f383 8811 	msr	BASEPRI, r3
   10a36:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   10a3a:	f7fe fab9 	bl	efb0 <next_timeout>
	__asm__ volatile(
   10a3e:	f384 8811 	msr	BASEPRI, r4
   10a42:	f3bf 8f6f 	isb	sy
}
   10a46:	bd10      	pop	{r4, pc}

00010a48 <z_set_timeout_expiry>:
{
   10a48:	b570      	push	{r4, r5, r6, lr}
   10a4a:	4604      	mov	r4, r0
   10a4c:	460e      	mov	r6, r1
	__asm__ volatile(
   10a4e:	f04f 0320 	mov.w	r3, #32
   10a52:	f3ef 8511 	mrs	r5, BASEPRI
   10a56:	f383 8811 	msr	BASEPRI, r3
   10a5a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   10a5e:	f7fe faa7 	bl	efb0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   10a62:	2801      	cmp	r0, #1
   10a64:	dd05      	ble.n	10a72 <z_set_timeout_expiry+0x2a>
   10a66:	42a0      	cmp	r0, r4
   10a68:	dd03      	ble.n	10a72 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   10a6a:	4631      	mov	r1, r6
   10a6c:	4620      	mov	r0, r4
   10a6e:	f7fc f871 	bl	cb54 <z_clock_set_timeout>
	__asm__ volatile(
   10a72:	f385 8811 	msr	BASEPRI, r5
   10a76:	f3bf 8f6f 	isb	sy
}
   10a7a:	bd70      	pop	{r4, r5, r6, pc}

00010a7c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   10a7c:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00011600 <spm_request_read-0x69e0>:
	...

00017fe0 <spm_request_read>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f4 bfca 	b.w	cf7c <__acle_se_spm_request_read>

00017fe8 <spm_firmware_info>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f5 b824 	b.w	d038 <__acle_se_spm_firmware_info>

00017ff0 <spm_request_random_number>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f8 ba47 	b.w	10486 <__acle_se_spm_request_random_number>
	...
