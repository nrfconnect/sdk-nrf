
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return 0;
}

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   0:	20006828 	.word	0x20006828
   4:	00002cdd 	.word	0x00002cdd
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   8:	0000653b 	.word	0x0000653b
   c:	00002bd9 	.word	0x00002bd9
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
  10:	00002bd9 	.word	0x00002bd9
  14:	00002bd9 	.word	0x00002bd9
  18:	00002bd9 	.word	0x00002bd9
  1c:	00002bd9 	.word	0x00002bd9
		errno = err;
		return NULL;
	}

	return fd_entry->obj;
  20:	00002bd9 	.word	0x00002bd9
}
  24:	00002bd9 	.word	0x00002bd9
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  28:	00002bd9 	.word	0x00002bd9
		return NULL;
  2c:	00002ba1 	.word	0x00002ba1
		return NULL;
  30:	00002bd9 	.word	0x00002bd9
  34:	00002bd9 	.word	0x00002bd9
  38:	00002b4d 	.word	0x00002b4d
  3c:	000063ff 	.word	0x000063ff

00000040 <_irq_vector_table>:
  40:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  50:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  60:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  70:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  80:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  90:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  a0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  b0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  c0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  d0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  e0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
  f0:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
 100:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
 110:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
 120:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
 130:	00002c09 00002c09 00002c09 00002c09     .,...,...,...,..
 140:	00002c09                                .,..

Disassembly of section _TEXT_SECTION_NAME_2:

00000144 <__aeabi_ldivmod>:
     144:	b97b      	cbnz	r3, 166 <__aeabi_ldivmod+0x22>
     146:	b972      	cbnz	r2, 166 <__aeabi_ldivmod+0x22>
     148:	2900      	cmp	r1, #0
     14a:	bfbe      	ittt	lt
     14c:	2000      	movlt	r0, #0
     14e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     152:	e006      	blt.n	162 <__aeabi_ldivmod+0x1e>
     154:	bf08      	it	eq
     156:	2800      	cmpeq	r0, #0
     158:	bf1c      	itt	ne
     15a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     15e:	f04f 30ff 	movne.w	r0, #4294967295
     162:	f000 b9c7 	b.w	4f4 <__aeabi_idiv0>
     166:	f1ad 0c08 	sub.w	ip, sp, #8
     16a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     16e:	2900      	cmp	r1, #0
     170:	db09      	blt.n	186 <CONFIG_GPS_CONTROL_FIX_TRY_TIME+0x1e>
     172:	2b00      	cmp	r3, #0
     174:	db1a      	blt.n	1ac <CONFIG_GPS_CONTROL_FIX_TRY_TIME+0x44>
     176:	f000 f84d 	bl	214 <__udivmoddi4>
     17a:	f8dd e004 	ldr.w	lr, [sp, #4]
     17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     182:	b004      	add	sp, #16
     184:	4770      	bx	lr
     186:	4240      	negs	r0, r0
     188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     18c:	2b00      	cmp	r3, #0
     18e:	db1b      	blt.n	1c8 <CONFIG_GPS_CONTROL_FIX_TRY_TIME+0x60>
     190:	f000 f840 	bl	214 <__udivmoddi4>
     194:	f8dd e004 	ldr.w	lr, [sp, #4]
     198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     19c:	b004      	add	sp, #16
     19e:	4240      	negs	r0, r0
     1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1a4:	4252      	negs	r2, r2
     1a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1aa:	4770      	bx	lr
     1ac:	4252      	negs	r2, r2
     1ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1b2:	f000 f82f 	bl	214 <__udivmoddi4>
     1b6:	f8dd e004 	ldr.w	lr, [sp, #4]
     1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1be:	b004      	add	sp, #16
     1c0:	4240      	negs	r0, r0
     1c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1c6:	4770      	bx	lr
     1c8:	4252      	negs	r2, r2
     1ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1ce:	f000 f821 	bl	214 <__udivmoddi4>
     1d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1da:	b004      	add	sp, #16
     1dc:	4252      	negs	r2, r2
     1de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e2:	4770      	bx	lr

000001e4 <__aeabi_uldivmod>:
     1e4:	b953      	cbnz	r3, 1fc <CONFIG_AT_HOST_UART_INIT_TIMEOUT+0x8>
     1e6:	b94a      	cbnz	r2, 1fc <CONFIG_AT_HOST_UART_INIT_TIMEOUT+0x8>
     1e8:	2900      	cmp	r1, #0
     1ea:	bf08      	it	eq
     1ec:	2800      	cmpeq	r0, #0
     1ee:	bf1c      	itt	ne
     1f0:	f04f 31ff 	movne.w	r1, #4294967295
     1f4:	f04f 30ff 	movne.w	r0, #4294967295
     1f8:	f000 b97c 	b.w	4f4 <__aeabi_idiv0>
     1fc:	f1ad 0c08 	sub.w	ip, sp, #8
     200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     204:	f000 f806 	bl	214 <__udivmoddi4>
     208:	f8dd e004 	ldr.w	lr, [sp, #4]
     20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     210:	b004      	add	sp, #16
     212:	4770      	bx	lr

00000214 <__udivmoddi4>:
     214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     218:	468c      	mov	ip, r1
     21a:	9d08      	ldr	r5, [sp, #32]
     21c:	4604      	mov	r4, r0
     21e:	468a      	mov	sl, r1
     220:	2b00      	cmp	r3, #0
     222:	d14a      	bne.n	2ba <CONFIG_LTE_NETWORK_TIMEOUT+0x62>
     224:	428a      	cmp	r2, r1
     226:	4617      	mov	r7, r2
     228:	d962      	bls.n	2f0 <CONFIG_LTE_NETWORK_TIMEOUT+0x98>
     22a:	fab2 f682 	clz	r6, r2
     22e:	b14e      	cbz	r6, 244 <__udivmoddi4+0x30>
     230:	f1c6 0e20 	rsb	lr, r6, #32
     234:	fa01 f306 	lsl.w	r3, r1, r6
     238:	40b7      	lsls	r7, r6
     23a:	40b4      	lsls	r4, r6
     23c:	fa20 fe0e 	lsr.w	lr, r0, lr
     240:	ea4e 0a03 	orr.w	sl, lr, r3
     244:	ea4f 4817 	mov.w	r8, r7, lsr #16
     248:	0c23      	lsrs	r3, r4, #16
     24a:	fa1f f987 	uxth.w	r9, r7
     24e:	fbba fef8 	udiv	lr, sl, r8
     252:	fb08 aa1e 	mls	sl, r8, lr, sl
     256:	fb0e f209 	mul.w	r2, lr, r9
     25a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     25e:	429a      	cmp	r2, r3
     260:	d90b      	bls.n	27a <CONFIG_LTE_NETWORK_TIMEOUT+0x22>
     262:	18fb      	adds	r3, r7, r3
     264:	f10e 31ff 	add.w	r1, lr, #4294967295
     268:	bf2c      	ite	cs
     26a:	2001      	movcs	r0, #1
     26c:	2000      	movcc	r0, #0
     26e:	429a      	cmp	r2, r3
     270:	d902      	bls.n	278 <CONFIG_LTE_NETWORK_TIMEOUT+0x20>
     272:	2800      	cmp	r0, #0
     274:	f000 812a 	beq.w	4cc <CONFIG_MQTT_KEEPALIVE+0x1c>
     278:	468e      	mov	lr, r1
     27a:	1a9a      	subs	r2, r3, r2
     27c:	b2a3      	uxth	r3, r4
     27e:	fbb2 f0f8 	udiv	r0, r2, r8
     282:	fb08 2210 	mls	r2, r8, r0, r2
     286:	fb00 f909 	mul.w	r9, r0, r9
     28a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     28e:	45a1      	cmp	r9, r4
     290:	d907      	bls.n	2a2 <CONFIG_LTE_NETWORK_TIMEOUT+0x4a>
     292:	193c      	adds	r4, r7, r4
     294:	f100 33ff 	add.w	r3, r0, #4294967295
     298:	d202      	bcs.n	2a0 <CONFIG_LTE_NETWORK_TIMEOUT+0x48>
     29a:	45a1      	cmp	r9, r4
     29c:	f200 8110 	bhi.w	4c0 <CONFIG_MQTT_KEEPALIVE+0x10>
     2a0:	4618      	mov	r0, r3
     2a2:	eba4 0409 	sub.w	r4, r4, r9
     2a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2aa:	2100      	movs	r1, #0
     2ac:	b11d      	cbz	r5, 2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     2ae:	40f4      	lsrs	r4, r6
     2b0:	2300      	movs	r3, #0
     2b2:	e9c5 4300 	strd	r4, r3, [r5]
     2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2ba:	428b      	cmp	r3, r1
     2bc:	d908      	bls.n	2d0 <CONFIG_LTE_NETWORK_TIMEOUT+0x78>
     2be:	2d00      	cmp	r5, #0
     2c0:	f000 80f2 	beq.w	4a8 <CONFIG_ADXL362_THREAD_STACK_SIZE+0xa8>
     2c4:	2100      	movs	r1, #0
     2c6:	e9c5 0c00 	strd	r0, ip, [r5]
     2ca:	4608      	mov	r0, r1
     2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2d0:	fab3 f183 	clz	r1, r3
     2d4:	2900      	cmp	r1, #0
     2d6:	d14e      	bne.n	376 <CONFIG_LTE_NETWORK_TIMEOUT+0x11e>
     2d8:	4563      	cmp	r3, ip
     2da:	f0c0 80e8 	bcc.w	4ae <CONFIG_ADXL362_THREAD_STACK_SIZE+0xae>
     2de:	4282      	cmp	r2, r0
     2e0:	f240 80e5 	bls.w	4ae <CONFIG_ADXL362_THREAD_STACK_SIZE+0xae>
     2e4:	4608      	mov	r0, r1
     2e6:	2d00      	cmp	r5, #0
     2e8:	d0e5      	beq.n	2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     2ea:	e9c5 4a00 	strd	r4, sl, [r5]
     2ee:	e7e2      	b.n	2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     2f0:	b902      	cbnz	r2, 2f4 <CONFIG_LTE_NETWORK_TIMEOUT+0x9c>
     2f2:	deff      	udf	#255	; 0xff
     2f4:	fab2 f682 	clz	r6, r2
     2f8:	2e00      	cmp	r6, #0
     2fa:	f040 8099 	bne.w	430 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x30>
     2fe:	1a8b      	subs	r3, r1, r2
     300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     304:	fa1f f882 	uxth.w	r8, r2
     308:	2101      	movs	r1, #1
     30a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     30e:	fbb3 f2fe 	udiv	r2, r3, lr
     312:	fb0e 3012 	mls	r0, lr, r2, r3
     316:	fb08 f902 	mul.w	r9, r8, r2
     31a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     31e:	45e1      	cmp	r9, ip
     320:	d908      	bls.n	334 <CONFIG_LTE_NETWORK_TIMEOUT+0xdc>
     322:	eb17 0c0c 	adds.w	ip, r7, ip
     326:	f102 33ff 	add.w	r3, r2, #4294967295
     32a:	d202      	bcs.n	332 <CONFIG_LTE_NETWORK_TIMEOUT+0xda>
     32c:	45e1      	cmp	r9, ip
     32e:	f200 80ca 	bhi.w	4c6 <CONFIG_MQTT_KEEPALIVE+0x16>
     332:	461a      	mov	r2, r3
     334:	ebac 0c09 	sub.w	ip, ip, r9
     338:	b2a3      	uxth	r3, r4
     33a:	fbbc f0fe 	udiv	r0, ip, lr
     33e:	fb0e cc10 	mls	ip, lr, r0, ip
     342:	fb08 f800 	mul.w	r8, r8, r0
     346:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     34a:	45a0      	cmp	r8, r4
     34c:	d90e      	bls.n	36c <CONFIG_LTE_NETWORK_TIMEOUT+0x114>
     34e:	193c      	adds	r4, r7, r4
     350:	f100 33ff 	add.w	r3, r0, #4294967295
     354:	bf2c      	ite	cs
     356:	f04f 0c01 	movcs.w	ip, #1
     35a:	f04f 0c00 	movcc.w	ip, #0
     35e:	45a0      	cmp	r8, r4
     360:	d903      	bls.n	36a <CONFIG_LTE_NETWORK_TIMEOUT+0x112>
     362:	f1bc 0f00 	cmp.w	ip, #0
     366:	f000 80a8 	beq.w	4ba <CONFIG_MQTT_KEEPALIVE+0xa>
     36a:	4618      	mov	r0, r3
     36c:	eba4 0408 	sub.w	r4, r4, r8
     370:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     374:	e79a      	b.n	2ac <CONFIG_LTE_NETWORK_TIMEOUT+0x54>
     376:	f1c1 0420 	rsb	r4, r1, #32
     37a:	408b      	lsls	r3, r1
     37c:	fa02 fe01 	lsl.w	lr, r2, r1
     380:	fa0c f601 	lsl.w	r6, ip, r1
     384:	40e2      	lsrs	r2, r4
     386:	fa20 f704 	lsr.w	r7, r0, r4
     38a:	fa2c fc04 	lsr.w	ip, ip, r4
     38e:	fa00 f801 	lsl.w	r8, r0, r1
     392:	4313      	orrs	r3, r2
     394:	433e      	orrs	r6, r7
     396:	0c1f      	lsrs	r7, r3, #16
     398:	0c32      	lsrs	r2, r6, #16
     39a:	fa1f f983 	uxth.w	r9, r3
     39e:	fbbc f0f7 	udiv	r0, ip, r7
     3a2:	fb07 cc10 	mls	ip, r7, r0, ip
     3a6:	fb00 fa09 	mul.w	sl, r0, r9
     3aa:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ae:	45e2      	cmp	sl, ip
     3b0:	d908      	bls.n	3c4 <CONFIG_LTE_NETWORK_TIMEOUT+0x16c>
     3b2:	eb13 0c0c 	adds.w	ip, r3, ip
     3b6:	f100 32ff 	add.w	r2, r0, #4294967295
     3ba:	d202      	bcs.n	3c2 <CONFIG_LTE_NETWORK_TIMEOUT+0x16a>
     3bc:	45e2      	cmp	sl, ip
     3be:	f200 8089 	bhi.w	4d4 <CONFIG_MQTT_KEEPALIVE+0x24>
     3c2:	4610      	mov	r0, r2
     3c4:	ebac 0c0a 	sub.w	ip, ip, sl
     3c8:	b2b6      	uxth	r6, r6
     3ca:	fbbc faf7 	udiv	sl, ip, r7
     3ce:	fb07 cc1a 	mls	ip, r7, sl, ip
     3d2:	fb0a f909 	mul.w	r9, sl, r9
     3d6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     3da:	4591      	cmp	r9, r2
     3dc:	d906      	bls.n	3ec <CONFIG_LTE_NETWORK_TIMEOUT+0x194>
     3de:	189a      	adds	r2, r3, r2
     3e0:	f10a 36ff 	add.w	r6, sl, #4294967295
     3e4:	d201      	bcs.n	3ea <CONFIG_LTE_NETWORK_TIMEOUT+0x192>
     3e6:	4591      	cmp	r9, r2
     3e8:	d87a      	bhi.n	4e0 <CONFIG_MQTT_KEEPALIVE+0x30>
     3ea:	46b2      	mov	sl, r6
     3ec:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     3f0:	eba2 0209 	sub.w	r2, r2, r9
     3f4:	fba0 670e 	umull	r6, r7, r0, lr
     3f8:	42ba      	cmp	r2, r7
     3fa:	46b4      	mov	ip, r6
     3fc:	46b9      	mov	r9, r7
     3fe:	d302      	bcc.n	406 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x6>
     400:	d107      	bne.n	412 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x12>
     402:	45b0      	cmp	r8, r6
     404:	d205      	bcs.n	412 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x12>
     406:	ebb6 0c0e 	subs.w	ip, r6, lr
     40a:	eb67 0303 	sbc.w	r3, r7, r3
     40e:	3801      	subs	r0, #1
     410:	4699      	mov	r9, r3
     412:	2d00      	cmp	r5, #0
     414:	d06b      	beq.n	4ee <CONFIG_MQTT_KEEPALIVE+0x3e>
     416:	ebb8 030c 	subs.w	r3, r8, ip
     41a:	eb62 0209 	sbc.w	r2, r2, r9
     41e:	fa02 f404 	lsl.w	r4, r2, r4
     422:	40cb      	lsrs	r3, r1
     424:	40ca      	lsrs	r2, r1
     426:	2100      	movs	r1, #0
     428:	431c      	orrs	r4, r3
     42a:	e9c5 4200 	strd	r4, r2, [r5]
     42e:	e742      	b.n	2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     430:	40b7      	lsls	r7, r6
     432:	f1c6 0220 	rsb	r2, r6, #32
     436:	fa01 f306 	lsl.w	r3, r1, r6
     43a:	40b4      	lsls	r4, r6
     43c:	fa21 fc02 	lsr.w	ip, r1, r2
     440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     444:	fa20 f202 	lsr.w	r2, r0, r2
     448:	fa1f f887 	uxth.w	r8, r7
     44c:	fbbc f1fe 	udiv	r1, ip, lr
     450:	431a      	orrs	r2, r3
     452:	fb0e cc11 	mls	ip, lr, r1, ip
     456:	fb01 f008 	mul.w	r0, r1, r8
     45a:	0c13      	lsrs	r3, r2, #16
     45c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     460:	4560      	cmp	r0, ip
     462:	d907      	bls.n	474 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x74>
     464:	eb17 0c0c 	adds.w	ip, r7, ip
     468:	f101 33ff 	add.w	r3, r1, #4294967295
     46c:	d201      	bcs.n	472 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x72>
     46e:	4560      	cmp	r0, ip
     470:	d833      	bhi.n	4da <CONFIG_MQTT_KEEPALIVE+0x2a>
     472:	4619      	mov	r1, r3
     474:	ebac 0c00 	sub.w	ip, ip, r0
     478:	b292      	uxth	r2, r2
     47a:	fbbc f0fe 	udiv	r0, ip, lr
     47e:	fb0e cc10 	mls	ip, lr, r0, ip
     482:	fb00 f308 	mul.w	r3, r0, r8
     486:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     48a:	4563      	cmp	r3, ip
     48c:	d907      	bls.n	49e <CONFIG_ADXL362_THREAD_STACK_SIZE+0x9e>
     48e:	eb17 0c0c 	adds.w	ip, r7, ip
     492:	f100 32ff 	add.w	r2, r0, #4294967295
     496:	d201      	bcs.n	49c <CONFIG_ADXL362_THREAD_STACK_SIZE+0x9c>
     498:	4563      	cmp	r3, ip
     49a:	d825      	bhi.n	4e8 <CONFIG_MQTT_KEEPALIVE+0x38>
     49c:	4610      	mov	r0, r2
     49e:	ebac 0303 	sub.w	r3, ip, r3
     4a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4a6:	e730      	b.n	30a <CONFIG_LTE_NETWORK_TIMEOUT+0xb2>
     4a8:	4629      	mov	r1, r5
     4aa:	4628      	mov	r0, r5
     4ac:	e703      	b.n	2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     4ae:	1a84      	subs	r4, r0, r2
     4b0:	eb6c 0303 	sbc.w	r3, ip, r3
     4b4:	2001      	movs	r0, #1
     4b6:	469a      	mov	sl, r3
     4b8:	e715      	b.n	2e6 <CONFIG_LTE_NETWORK_TIMEOUT+0x8e>
     4ba:	3802      	subs	r0, #2
     4bc:	443c      	add	r4, r7
     4be:	e755      	b.n	36c <CONFIG_LTE_NETWORK_TIMEOUT+0x114>
     4c0:	3802      	subs	r0, #2
     4c2:	443c      	add	r4, r7
     4c4:	e6ed      	b.n	2a2 <CONFIG_LTE_NETWORK_TIMEOUT+0x4a>
     4c6:	3a02      	subs	r2, #2
     4c8:	44bc      	add	ip, r7
     4ca:	e733      	b.n	334 <CONFIG_LTE_NETWORK_TIMEOUT+0xdc>
     4cc:	f1ae 0e02 	sub.w	lr, lr, #2
     4d0:	443b      	add	r3, r7
     4d2:	e6d2      	b.n	27a <CONFIG_LTE_NETWORK_TIMEOUT+0x22>
     4d4:	3802      	subs	r0, #2
     4d6:	449c      	add	ip, r3
     4d8:	e774      	b.n	3c4 <CONFIG_LTE_NETWORK_TIMEOUT+0x16c>
     4da:	3902      	subs	r1, #2
     4dc:	44bc      	add	ip, r7
     4de:	e7c9      	b.n	474 <CONFIG_ADXL362_THREAD_STACK_SIZE+0x74>
     4e0:	f1aa 0a02 	sub.w	sl, sl, #2
     4e4:	441a      	add	r2, r3
     4e6:	e781      	b.n	3ec <CONFIG_LTE_NETWORK_TIMEOUT+0x194>
     4e8:	3802      	subs	r0, #2
     4ea:	44bc      	add	ip, r7
     4ec:	e7d7      	b.n	49e <CONFIG_ADXL362_THREAD_STACK_SIZE+0x9e>
     4ee:	4629      	mov	r1, r5
     4f0:	e6e1      	b.n	2b6 <CONFIG_LTE_NETWORK_TIMEOUT+0x5e>
     4f2:	bf00      	nop

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <main>:
    ((void (*)(void))start)();
}
#endif

void main(void)
{
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	b084      	sub	sp, #16
    struct boot_rsp rsp;
    int rc;

    BOOT_LOG_INF("Starting bootloader");
     4fc:	f04f 0000 	mov.w	r0, #0
     500:	2303      	movs	r3, #3
     502:	f363 0002 	bfi	r0, r3, #0, #3
     506:	f36f 00c5 	bfc	r0, #3, #3
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     50a:	4d45      	ldr	r5, [pc, #276]	; (620 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x44>)
     50c:	4b45      	ldr	r3, [pc, #276]	; (624 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x48>)
     50e:	1b5b      	subs	r3, r3, r5
     510:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     514:	f363 108f 	bfi	r0, r3, #6, #10
     518:	4943      	ldr	r1, [pc, #268]	; (628 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x4c>)
     51a:	f005 fd8b 	bl	6034 <log_string_sync>

    os_heap_init();
     51e:	f000 f8dd 	bl	6dc <os_heap_init>

#if (!defined(CONFIG_XTENSA) && defined(DT_FLASH_DEV_NAME))
    if (!flash_device_get_binding(DT_FLASH_DEV_NAME)) {
     522:	4842      	ldr	r0, [pc, #264]	; (62c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x50>)
     524:	f000 f894 	bl	650 <flash_device_get_binding>
     528:	2800      	cmp	r0, #0
     52a:	d03d      	beq.n	5a8 <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x62>
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     52c:	4840      	ldr	r0, [pc, #256]	; (630 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x54>)
     52e:	f004 fb65 	bl	4bfc <z_impl_device_get_binding>
     532:	4604      	mov	r4, r0
			  int flags);

static inline int z_impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
     534:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     536:	681e      	ldr	r6, [r3, #0]
     538:	f44f 7380 	mov.w	r3, #256	; 0x100
     53c:	221a      	movs	r2, #26
     53e:	2100      	movs	r1, #0
     540:	47b0      	blx	r6
			u32_t *value);

static inline int z_impl_gpio_read(struct device *port, int access_op,
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
     542:	6863      	ldr	r3, [r4, #4]
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
     544:	689e      	ldr	r6, [r3, #8]
     546:	466b      	mov	r3, sp
     548:	221a      	movs	r2, #26
     54a:	2100      	movs	r1, #0
     54c:	4620      	mov	r0, r4
     54e:	47b0      	blx	r6

    rc = gpio_pin_read(detect_port, CONFIG_BOOT_SERIAL_DETECT_PIN,
                       &detect_value);
    __ASSERT(rc == 0, "Error of the reading the detect pin.\n");

    if (detect_value == CONFIG_BOOT_SERIAL_DETECT_PIN_VAL) {
     550:	9b00      	ldr	r3, [sp, #0]
     552:	b9a3      	cbnz	r3, 57e <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x38>
        BOOT_LOG_INF("Enter the serial recovery mode");
     554:	f04f 0000 	mov.w	r0, #0
     558:	2303      	movs	r3, #3
     55a:	f363 0002 	bfi	r0, r3, #0, #3
     55e:	f36f 00c5 	bfc	r0, #3, #3
     562:	4b30      	ldr	r3, [pc, #192]	; (624 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x48>)
     564:	1b5b      	subs	r3, r3, r5
     566:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     56a:	f363 108f 	bfi	r0, r3, #6, #10
     56e:	4931      	ldr	r1, [pc, #196]	; (634 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x58>)
     570:	f005 fd60 	bl	6034 <log_string_sync>
        rc = boot_console_init();
     574:	f001 fdec 	bl	2150 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     578:	482f      	ldr	r0, [pc, #188]	; (638 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5c>)
     57a:	f002 fa8f 	bl	2a9c <boot_serial_start>
    BOOT_LOG_INF("Waiting for USB DFU");
    wait_for_usb_dfu();
    BOOT_LOG_INF("USB DFU wait time elapsed");
#endif

    rc = boot_go(&rsp);
     57e:	a801      	add	r0, sp, #4
     580:	f000 fe96 	bl	12b0 <boot_go>
    if (rc != 0) {
     584:	b300      	cbz	r0, 5c8 <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x82>
        BOOT_LOG_ERR("Unable to find bootable image");
     586:	f04f 0000 	mov.w	r0, #0
     58a:	2301      	movs	r3, #1
     58c:	f363 0002 	bfi	r0, r3, #0, #3
     590:	f36f 00c5 	bfc	r0, #3, #3
     594:	4b23      	ldr	r3, [pc, #140]	; (624 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x48>)
     596:	1b5b      	subs	r3, r3, r5
     598:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     59c:	f363 108f 	bfi	r0, r3, #6, #10
     5a0:	4926      	ldr	r1, [pc, #152]	; (63c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x60>)
     5a2:	f005 fd47 	bl	6034 <log_string_sync>
     5a6:	e7fe      	b.n	5a6 <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x60>
        BOOT_LOG_ERR("Flash device %s not found", DT_FLASH_DEV_NAME);
     5a8:	2301      	movs	r3, #1
     5aa:	f363 0002 	bfi	r0, r3, #0, #3
     5ae:	f36f 00c5 	bfc	r0, #3, #3
     5b2:	4b1c      	ldr	r3, [pc, #112]	; (624 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x48>)
     5b4:	1b5b      	subs	r3, r3, r5
     5b6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     5ba:	f363 108f 	bfi	r0, r3, #6, #10
     5be:	4a1b      	ldr	r2, [pc, #108]	; (62c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x50>)
     5c0:	491f      	ldr	r1, [pc, #124]	; (640 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x64>)
     5c2:	f005 fd37 	bl	6034 <log_string_sync>
     5c6:	e7fe      	b.n	5c6 <CONFIG_AWS_FOTA_PAYLOAD_SIZE+0x80>
        while (1)
            ;
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     5c8:	2603      	movs	r6, #3
     5ca:	f04f 0000 	mov.w	r0, #0
     5ce:	f366 0002 	bfi	r0, r6, #0, #3
     5d2:	f36f 00c5 	bfc	r0, #3, #3
     5d6:	4c13      	ldr	r4, [pc, #76]	; (624 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x48>)
     5d8:	1b64      	subs	r4, r4, r5
     5da:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     5de:	f364 108f 	bfi	r0, r4, #6, #10
     5e2:	9a03      	ldr	r2, [sp, #12]
     5e4:	4917      	ldr	r1, [pc, #92]	; (644 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x68>)
     5e6:	f005 fd25 	bl	6034 <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     5ea:	f04f 0000 	mov.w	r0, #0
     5ee:	f366 0002 	bfi	r0, r6, #0, #3
     5f2:	f36f 00c5 	bfc	r0, #3, #3
     5f6:	f364 108f 	bfi	r0, r4, #6, #10
     5fa:	4913      	ldr	r1, [pc, #76]	; (648 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x6c>)
     5fc:	f005 fd1a 	bl	6034 <log_string_sync>
    do_boot(&rsp);
     600:	a801      	add	r0, sp, #4
     602:	f004 fd2f 	bl	5064 <do_boot>

    BOOT_LOG_ERR("Never should get here");
     606:	f04f 0000 	mov.w	r0, #0
     60a:	2301      	movs	r3, #1
     60c:	f363 0002 	bfi	r0, r3, #0, #3
     610:	f36f 00c5 	bfc	r0, #3, #3
     614:	f364 108f 	bfi	r0, r4, #6, #10
     618:	490c      	ldr	r1, [pc, #48]	; (64c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x70>)
     61a:	f005 fd0b 	bl	6034 <log_string_sync>
     61e:	e7fe      	b.n	61e <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x42>
     620:	000095e0 	.word	0x000095e0
     624:	000095e8 	.word	0x000095e8
     628:	00009638 	.word	0x00009638
     62c:	0000964c 	.word	0x0000964c
     630:	0000967c 	.word	0x0000967c
     634:	00009684 	.word	0x00009684
     638:	00009630 	.word	0x00009630
     63c:	000096a4 	.word	0x000096a4
     640:	00009660 	.word	0x00009660
     644:	000096c4 	.word	0x000096c4
     648:	000096f0 	.word	0x000096f0
     64c:	00009710 	.word	0x00009710

00000650 <flash_device_get_binding>:
#endif

static struct device *flash_dev;

struct device *flash_device_get_binding(char *dev_name)
{
     650:	b508      	push	{r3, lr}
    if (!flash_dev) {
     652:	4b05      	ldr	r3, [pc, #20]	; (668 <flash_device_get_binding+0x18>)
     654:	681b      	ldr	r3, [r3, #0]
     656:	b113      	cbz	r3, 65e <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     658:	4b03      	ldr	r3, [pc, #12]	; (668 <flash_device_get_binding+0x18>)
     65a:	6818      	ldr	r0, [r3, #0]
     65c:	bd08      	pop	{r3, pc}
     65e:	f004 facd 	bl	4bfc <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     662:	4b01      	ldr	r3, [pc, #4]	; (668 <flash_device_get_binding+0x18>)
     664:	6018      	str	r0, [r3, #0]
     666:	e7f7      	b.n	658 <flash_device_get_binding+0x8>
     668:	20000008 	.word	0x20000008

0000066c <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     66c:	b910      	cbnz	r0, 674 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     66e:	2000      	movs	r0, #0
     670:	6008      	str	r0, [r1, #0]
    return 0;
}
     672:	4770      	bx	lr
{
     674:	b508      	push	{r3, lr}
     676:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     678:	f04f 0000 	mov.w	r0, #0
     67c:	2301      	movs	r3, #1
     67e:	f363 0002 	bfi	r0, r3, #0, #3
     682:	f36f 00c5 	bfc	r0, #3, #3
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <flash_device_base+0x38>)
     688:	4907      	ldr	r1, [pc, #28]	; (6a8 <flash_device_base+0x3c>)
     68a:	1a5b      	subs	r3, r3, r1
     68c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     690:	f363 108f 	bfi	r0, r3, #6, #10
     694:	2300      	movs	r3, #0
     696:	4905      	ldr	r1, [pc, #20]	; (6ac <flash_device_base+0x40>)
     698:	f005 fccc 	bl	6034 <log_string_sync>
        return -EINVAL;
     69c:	f06f 0015 	mvn.w	r0, #21
}
     6a0:	bd08      	pop	{r3, pc}
     6a2:	bf00      	nop
     6a4:	000095e8 	.word	0x000095e8
     6a8:	000095e0 	.word	0x000095e0
     6ac:	00009730 	.word	0x00009730

000006b0 <flash_area_sector_from_off>:
{
    return flash_area_id_to_multi_image_slot(0, area_id);
}

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     6b0:	b510      	push	{r4, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	460c      	mov	r4, r1
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     6b6:	4b08      	ldr	r3, [pc, #32]	; (6d8 <flash_area_sector_from_off+0x28>)
     6b8:	681b      	ldr	r3, [r3, #0]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&dev, *(u32_t *)&offset, *(u32_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     6ba:	aa01      	add	r2, sp, #4
     6bc:	4601      	mov	r1, r0
     6be:	4618      	mov	r0, r3
     6c0:	f006 f968 	bl	6994 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     6c4:	4603      	mov	r3, r0
     6c6:	b918      	cbnz	r0, 6d0 <flash_area_sector_from_off+0x20>
        return rc;
    }

    sector->fs_off = page.start_offset;
     6c8:	9a01      	ldr	r2, [sp, #4]
     6ca:	6022      	str	r2, [r4, #0]
    sector->fs_size = page.size;
     6cc:	9a02      	ldr	r2, [sp, #8]
     6ce:	6062      	str	r2, [r4, #4]

    return rc;
}
     6d0:	4618      	mov	r0, r3
     6d2:	b004      	add	sp, #16
     6d4:	bd10      	pop	{r4, pc}
     6d6:	bf00      	nop
     6d8:	20000008 	.word	0x20000008

000006dc <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     6dc:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     6de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     6e2:	4802      	ldr	r0, [pc, #8]	; (6ec <os_heap_init+0x10>)
     6e4:	f003 fb66 	bl	3db4 <mbedtls_memory_buffer_alloc_init>
}
     6e8:	bd08      	pop	{r3, pc}
     6ea:	bf00      	nop
     6ec:	2000000c 	.word	0x2000000c

000006f0 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     6f0:	6802      	ldr	r2, [r0, #0]
     6f2:	4b0f      	ldr	r3, [pc, #60]	; (730 <boot_is_header_valid+0x40>)
     6f4:	429a      	cmp	r2, r3
     6f6:	d001      	beq.n	6fc <boot_is_header_valid+0xc>
        return false;
     6f8:	2000      	movs	r0, #0
     6fa:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     6fc:	68c2      	ldr	r2, [r0, #12]
     6fe:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     700:	43d8      	mvns	r0, r3
     702:	4282      	cmp	r2, r0
     704:	d80b      	bhi.n	71e <boot_is_header_valid+0x2e>
{
     706:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     708:	18d4      	adds	r4, r2, r3
        return true;
     70a:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     70c:	b110      	cbz	r0, 714 <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
     70e:	688b      	ldr	r3, [r1, #8]
     710:	42a3      	cmp	r3, r4
     712:	d902      	bls.n	71a <boot_is_header_valid+0x2a>
        return false;
    }

    return true;
}
     714:	f85d 4b04 	ldr.w	r4, [sp], #4
     718:	4770      	bx	lr
        return false;
     71a:	2000      	movs	r0, #0
     71c:	e7fa      	b.n	714 <boot_is_header_valid+0x24>
        return false;
     71e:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     720:	b110      	cbz	r0, 728 <boot_is_header_valid+0x38>
    if (size >= fap->fa_size) {
     722:	688b      	ldr	r3, [r1, #8]
     724:	42a3      	cmp	r3, r4
     726:	d900      	bls.n	72a <boot_is_header_valid+0x3a>
}
     728:	4770      	bx	lr
        return false;
     72a:	2000      	movs	r0, #0
     72c:	e7fc      	b.n	728 <boot_is_header_valid+0x38>
     72e:	bf00      	nop
     730:	96f3b83d 	.word	0x96f3b83d

00000734 <boot_slots_compatible>:
{
     734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     738:	6a87      	ldr	r7, [r0, #40]	; 0x28
     73a:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
     73e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     742:	d80d      	bhi.n	760 <boot_slots_compatible+0x2c>
     744:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
     748:	d80a      	bhi.n	760 <boot_slots_compatible+0x2c>
    return BOOT_IMG(state, slot).area->fa_off;
}

static inline size_t boot_scratch_area_size(struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
     74a:	6d83      	ldr	r3, [r0, #88]	; 0x58
     74c:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
     750:	2400      	movs	r4, #0
    j = sz1 = secondary_slot_sz = 0;
     752:	4625      	mov	r5, r4
    i = sz0 = primary_slot_sz = 0;
     754:	4621      	mov	r1, r4
    j = sz1 = secondary_slot_sz = 0;
     756:	46a1      	mov	r9, r4
    i = sz0 = primary_slot_sz = 0;
     758:	46a6      	mov	lr, r4
    j = sz1 = secondary_slot_sz = 0;
     75a:	4622      	mov	r2, r4
    i = sz0 = primary_slot_sz = 0;
     75c:	4623      	mov	r3, r4
    while (i < num_sectors_primary || j < num_sectors_secondary) {
     75e:	e021      	b.n	7a4 <boot_slots_compatible+0x70>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     760:	f04f 0000 	mov.w	r0, #0
     764:	2302      	movs	r3, #2
     766:	f363 0002 	bfi	r0, r3, #0, #3
     76a:	f36f 00c5 	bfc	r0, #3, #3
     76e:	4b4a      	ldr	r3, [pc, #296]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     770:	4a4a      	ldr	r2, [pc, #296]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     772:	1a9b      	subs	r3, r3, r2
     774:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     778:	f363 108f 	bfi	r0, r3, #6, #10
     77c:	4948      	ldr	r1, [pc, #288]	; (8a0 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xa0>)
     77e:	f005 fc59 	bl	6034 <log_string_sync>
        return 0;
     782:	2000      	movs	r0, #0
}
     784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     788:	6a46      	ldr	r6, [r0, #36]	; 0x24
     78a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
     78e:	6876      	ldr	r6, [r6, #4]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     790:	4433      	add	r3, r6
     792:	6d06      	ldr	r6, [r0, #80]	; 0x50
     794:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
     798:	6876      	ldr	r6, [r6, #4]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     79a:	4432      	add	r2, r6
            i++;
     79c:	3101      	adds	r1, #1
            j++;
     79e:	3501      	adds	r5, #1
        if (sz0 == sz1) {
     7a0:	429a      	cmp	r2, r3
     7a2:	d041      	beq.n	828 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x28>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
     7a4:	42b9      	cmp	r1, r7
     7a6:	d301      	bcc.n	7ac <boot_slots_compatible+0x78>
     7a8:	4565      	cmp	r5, ip
     7aa:	d25a      	bcs.n	862 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x62>
        if (sz0 == sz1) {
     7ac:	429a      	cmp	r2, r3
     7ae:	d0eb      	beq.n	788 <boot_slots_compatible+0x54>
        } else if (sz0 < sz1) {
     7b0:	429a      	cmp	r2, r3
     7b2:	d91c      	bls.n	7ee <CONFIG_GPS_SIM_TRIGGER_TIMER_MSEC+0x1e>
     7b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
     7b6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
     7ba:	6876      	ldr	r6, [r6, #4]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     7bc:	4433      	add	r3, r6
            if (smaller == 2) {
     7be:	2c02      	cmp	r4, #2
     7c0:	d002      	beq.n	7c8 <boot_slots_compatible+0x94>
            i++;
     7c2:	3101      	adds	r1, #1
            smaller = 1;
     7c4:	2401      	movs	r4, #1
     7c6:	e7eb      	b.n	7a0 <boot_slots_compatible+0x6c>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
     7c8:	f04f 0000 	mov.w	r0, #0
     7cc:	2302      	movs	r3, #2
     7ce:	f363 0002 	bfi	r0, r3, #0, #3
     7d2:	f36f 00c5 	bfc	r0, #3, #3
     7d6:	4b30      	ldr	r3, [pc, #192]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     7d8:	4a30      	ldr	r2, [pc, #192]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     7da:	1a9b      	subs	r3, r3, r2
     7dc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     7e0:	f363 108f 	bfi	r0, r3, #6, #10
     7e4:	492f      	ldr	r1, [pc, #188]	; (8a4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xa4>)
     7e6:	f005 fc25 	bl	6034 <log_string_sync>
                return 0;
     7ea:	2000      	movs	r0, #0
     7ec:	e7ca      	b.n	784 <boot_slots_compatible+0x50>
     7ee:	6d06      	ldr	r6, [r0, #80]	; 0x50
     7f0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
     7f4:	6876      	ldr	r6, [r6, #4]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     7f6:	4432      	add	r2, r6
            if (smaller == 1) {
     7f8:	2c01      	cmp	r4, #1
     7fa:	d002      	beq.n	802 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2>
            j++;
     7fc:	3501      	adds	r5, #1
            smaller = 2;
     7fe:	2402      	movs	r4, #2
     800:	e7ce      	b.n	7a0 <boot_slots_compatible+0x6c>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
     802:	f04f 0000 	mov.w	r0, #0
     806:	2302      	movs	r3, #2
     808:	f363 0002 	bfi	r0, r3, #0, #3
     80c:	f36f 00c5 	bfc	r0, #3, #3
     810:	4b21      	ldr	r3, [pc, #132]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     812:	4a22      	ldr	r2, [pc, #136]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     814:	1a9b      	subs	r3, r3, r2
     816:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     81a:	f363 108f 	bfi	r0, r3, #6, #10
     81e:	4921      	ldr	r1, [pc, #132]	; (8a4 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xa4>)
     820:	f005 fc08 	bl	6034 <log_string_sync>
                return 0;
     824:	2000      	movs	r0, #0
     826:	e7ad      	b.n	784 <boot_slots_compatible+0x50>
            primary_slot_sz += sz0;
     828:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
     82a:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
     82c:	4543      	cmp	r3, r8
     82e:	d805      	bhi.n	83c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x3c>
     830:	4542      	cmp	r2, r8
     832:	d803      	bhi.n	83c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x3c>
            smaller = sz0 = sz1 = 0;
     834:	2400      	movs	r4, #0
     836:	4622      	mov	r2, r4
     838:	4623      	mov	r3, r4
     83a:	e7b3      	b.n	7a4 <boot_slots_compatible+0x70>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
     83c:	f04f 0000 	mov.w	r0, #0
     840:	2302      	movs	r3, #2
     842:	f363 0002 	bfi	r0, r3, #0, #3
     846:	f36f 00c5 	bfc	r0, #3, #3
     84a:	4b13      	ldr	r3, [pc, #76]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     84c:	4a13      	ldr	r2, [pc, #76]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     84e:	1a9b      	subs	r3, r3, r2
     850:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     854:	f363 108f 	bfi	r0, r3, #6, #10
     858:	4913      	ldr	r1, [pc, #76]	; (8a8 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xa8>)
     85a:	f005 fbeb 	bl	6034 <log_string_sync>
                return 0;
     85e:	2000      	movs	r0, #0
     860:	e790      	b.n	784 <boot_slots_compatible+0x50>
    if ((i != num_sectors_primary) ||
     862:	42b9      	cmp	r1, r7
     864:	d101      	bne.n	86a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x6a>
     866:	4565      	cmp	r5, ip
     868:	d012      	beq.n	890 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x90>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
     86a:	f04f 0000 	mov.w	r0, #0
     86e:	2302      	movs	r3, #2
     870:	f363 0002 	bfi	r0, r3, #0, #3
     874:	f36f 00c5 	bfc	r0, #3, #3
     878:	4b07      	ldr	r3, [pc, #28]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     87a:	4a08      	ldr	r2, [pc, #32]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     87c:	1a9b      	subs	r3, r3, r2
     87e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     882:	f363 108f 	bfi	r0, r3, #6, #10
     886:	4909      	ldr	r1, [pc, #36]	; (8ac <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xac>)
     888:	f005 fbd4 	bl	6034 <log_string_sync>
        return 0;
     88c:	2000      	movs	r0, #0
     88e:	e779      	b.n	784 <boot_slots_compatible+0x50>
        (j != num_sectors_secondary) ||
     890:	45ce      	cmp	lr, r9
     892:	d1ea      	bne.n	86a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x6a>
    return 1;
     894:	2001      	movs	r0, #1
     896:	e775      	b.n	784 <boot_slots_compatible+0x50>
     898:	000095e8 	.word	0x000095e8
     89c:	000095e0 	.word	0x000095e0
     8a0:	00009818 	.word	0x00009818
     8a4:	00009844 	.word	0x00009844
     8a8:	00009878 	.word	0x00009878
     8ac:	000098ac 	.word	0x000098ac

000008b0 <boot_status_source>:
{
     8b0:	b530      	push	{r4, r5, lr}
     8b2:	b089      	sub	sp, #36	; 0x24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     8b4:	a904      	add	r1, sp, #16
     8b6:	2002      	movs	r0, #2
     8b8:	f004 ff3c 	bl	5734 <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
     8bc:	a906      	add	r1, sp, #24
     8be:	2007      	movs	r0, #7
     8c0:	f004 ff38 	bl	5734 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     8c4:	f04f 0000 	mov.w	r0, #0
     8c8:	2303      	movs	r3, #3
     8ca:	f363 0002 	bfi	r0, r3, #0, #3
     8ce:	f36f 00c5 	bfc	r0, #3, #3
     8d2:	4d4e      	ldr	r5, [pc, #312]	; (a0c <boot_status_source+0x15c>)
     8d4:	4b4e      	ldr	r3, [pc, #312]	; (a10 <boot_status_source+0x160>)
     8d6:	1b5b      	subs	r3, r3, r5
     8d8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     8dc:	f363 108f 	bfi	r0, r3, #6, #10
     8e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
     8e4:	2b01      	cmp	r3, #1
     8e6:	d034      	beq.n	952 <boot_status_source+0xa2>
     8e8:	2b03      	cmp	r3, #3
     8ea:	d030      	beq.n	94e <boot_status_source+0x9e>
     8ec:	4b49      	ldr	r3, [pc, #292]	; (a14 <boot_status_source+0x164>)
     8ee:	f89d 2011 	ldrb.w	r2, [sp, #17]
     8f2:	f89d 1012 	ldrb.w	r1, [sp, #18]
     8f6:	f89d 4013 	ldrb.w	r4, [sp, #19]
     8fa:	9402      	str	r4, [sp, #8]
     8fc:	9101      	str	r1, [sp, #4]
     8fe:	9200      	str	r2, [sp, #0]
     900:	4a45      	ldr	r2, [pc, #276]	; (a18 <boot_status_source+0x168>)
     902:	4946      	ldr	r1, [pc, #280]	; (a1c <boot_status_source+0x16c>)
     904:	f005 fb96 	bl	6034 <log_string_sync>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
     908:	f04f 0000 	mov.w	r0, #0
     90c:	2303      	movs	r3, #3
     90e:	f363 0002 	bfi	r0, r3, #0, #3
     912:	f36f 00c5 	bfc	r0, #3, #3
     916:	4b3e      	ldr	r3, [pc, #248]	; (a10 <boot_status_source+0x160>)
     918:	1b5b      	subs	r3, r3, r5
     91a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     91e:	f363 108f 	bfi	r0, r3, #6, #10
     922:	f89d 3018 	ldrb.w	r3, [sp, #24]
     926:	2b01      	cmp	r3, #1
     928:	d017      	beq.n	95a <boot_status_source+0xaa>
     92a:	2b03      	cmp	r3, #3
     92c:	d013      	beq.n	956 <boot_status_source+0xa6>
     92e:	4b39      	ldr	r3, [pc, #228]	; (a14 <boot_status_source+0x164>)
     930:	f89d 2019 	ldrb.w	r2, [sp, #25]
     934:	f89d 101a 	ldrb.w	r1, [sp, #26]
     938:	f89d 401b 	ldrb.w	r4, [sp, #27]
     93c:	9402      	str	r4, [sp, #8]
     93e:	9101      	str	r1, [sp, #4]
     940:	9200      	str	r2, [sp, #0]
     942:	4a37      	ldr	r2, [pc, #220]	; (a20 <boot_status_source+0x170>)
     944:	4935      	ldr	r1, [pc, #212]	; (a1c <boot_status_source+0x16c>)
     946:	f005 fb75 	bl	6034 <log_string_sync>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     94a:	2400      	movs	r4, #0
     94c:	e012      	b.n	974 <boot_status_source+0xc4>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     94e:	4b35      	ldr	r3, [pc, #212]	; (a24 <boot_status_source+0x174>)
     950:	e7cd      	b.n	8ee <boot_status_source+0x3e>
     952:	4b35      	ldr	r3, [pc, #212]	; (a28 <boot_status_source+0x178>)
     954:	e7cb      	b.n	8ee <boot_status_source+0x3e>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
     956:	4b33      	ldr	r3, [pc, #204]	; (a24 <boot_status_source+0x174>)
     958:	e7ea      	b.n	930 <boot_status_source+0x80>
     95a:	4b33      	ldr	r3, [pc, #204]	; (a28 <boot_status_source+0x178>)
     95c:	e7e8      	b.n	930 <boot_status_source+0x80>
            BOOT_LOG_INF("Boot source: %s",
     95e:	4a33      	ldr	r2, [pc, #204]	; (a2c <boot_status_source+0x17c>)
     960:	e000      	b.n	964 <boot_status_source+0xb4>
     962:	4a33      	ldr	r2, [pc, #204]	; (a30 <boot_status_source+0x180>)
     964:	4933      	ldr	r1, [pc, #204]	; (a34 <boot_status_source+0x184>)
     966:	f005 fb65 	bl	6034 <log_string_sync>
            return source;
     96a:	4620      	mov	r0, r4
     96c:	e04b      	b.n	a06 <boot_status_source+0x156>
            BOOT_LOG_INF("Boot source: %s",
     96e:	4a32      	ldr	r2, [pc, #200]	; (a38 <boot_status_source+0x188>)
     970:	e7f8      	b.n	964 <boot_status_source+0xb4>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     972:	3401      	adds	r4, #1
     974:	2c03      	cmp	r4, #3
     976:	d835      	bhi.n	9e4 <boot_status_source+0x134>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
     978:	f89d 1010 	ldrb.w	r1, [sp, #16]
     97c:	4b2f      	ldr	r3, [pc, #188]	; (a3c <boot_status_source+0x18c>)
     97e:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
     982:	f004 fe43 	bl	560c <boot_magic_compatible_check>
     986:	2800      	cmp	r0, #0
     988:	d0f3      	beq.n	972 <boot_status_source+0xc2>
            boot_magic_compatible_check(table->bst_magic_scratch,
     98a:	4b2c      	ldr	r3, [pc, #176]	; (a3c <boot_status_source+0x18c>)
     98c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     990:	f89d 1018 	ldrb.w	r1, [sp, #24]
     994:	7858      	ldrb	r0, [r3, #1]
     996:	f004 fe39 	bl	560c <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
     99a:	2800      	cmp	r0, #0
     99c:	d0e9      	beq.n	972 <boot_status_source+0xc2>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     99e:	4b27      	ldr	r3, [pc, #156]	; (a3c <boot_status_source+0x18c>)
     9a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     9a4:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
     9a6:	2b04      	cmp	r3, #4
     9a8:	d003      	beq.n	9b2 <boot_status_source+0x102>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
     9aa:	f89d 2012 	ldrb.w	r2, [sp, #18]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     9ae:	4293      	cmp	r3, r2
     9b0:	d1df      	bne.n	972 <boot_status_source+0xc2>
            source = table->bst_status_source;
     9b2:	4b22      	ldr	r3, [pc, #136]	; (a3c <boot_status_source+0x18c>)
     9b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     9b8:	78e4      	ldrb	r4, [r4, #3]
            BOOT_LOG_INF("Boot source: %s",
     9ba:	f04f 0000 	mov.w	r0, #0
     9be:	2303      	movs	r3, #3
     9c0:	f363 0002 	bfi	r0, r3, #0, #3
     9c4:	f36f 00c5 	bfc	r0, #3, #3
     9c8:	4b11      	ldr	r3, [pc, #68]	; (a10 <boot_status_source+0x160>)
     9ca:	1b5b      	subs	r3, r3, r5
     9cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     9d0:	f363 108f 	bfi	r0, r3, #6, #10
     9d4:	2c00      	cmp	r4, #0
     9d6:	d0c4      	beq.n	962 <boot_status_source+0xb2>
     9d8:	2c01      	cmp	r4, #1
     9da:	d0c8      	beq.n	96e <boot_status_source+0xbe>
     9dc:	2c02      	cmp	r4, #2
     9de:	d0be      	beq.n	95e <boot_status_source+0xae>
     9e0:	4a17      	ldr	r2, [pc, #92]	; (a40 <boot_status_source+0x190>)
     9e2:	e7bf      	b.n	964 <boot_status_source+0xb4>
    BOOT_LOG_INF("Boot source: none");
     9e4:	f04f 0000 	mov.w	r0, #0
     9e8:	2303      	movs	r3, #3
     9ea:	f363 0002 	bfi	r0, r3, #0, #3
     9ee:	f36f 00c5 	bfc	r0, #3, #3
     9f2:	4b07      	ldr	r3, [pc, #28]	; (a10 <boot_status_source+0x160>)
     9f4:	1b5d      	subs	r5, r3, r5
     9f6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
     9fa:	f365 108f 	bfi	r0, r5, #6, #10
     9fe:	4911      	ldr	r1, [pc, #68]	; (a44 <boot_status_source+0x194>)
     a00:	f005 fb18 	bl	6034 <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
     a04:	2000      	movs	r0, #0
}
     a06:	b009      	add	sp, #36	; 0x24
     a08:	bd30      	pop	{r4, r5, pc}
     a0a:	bf00      	nop
     a0c:	000095e0 	.word	0x000095e0
     a10:	000095e8 	.word	0x000095e8
     a14:	000098d8 	.word	0x000098d8
     a18:	00009920 	.word	0x00009920
     a1c:	00009930 	.word	0x00009930
     a20:	0000996c 	.word	0x0000996c
     a24:	000098e4 	.word	0x000098e4
     a28:	000098dc 	.word	0x000098dc
     a2c:	00009910 	.word	0x00009910
     a30:	000098f4 	.word	0x000098f4
     a34:	00009974 	.word	0x00009974
     a38:	000098ec 	.word	0x000098ec
     a3c:	00009998 	.word	0x00009998
     a40:	000098fc 	.word	0x000098fc
     a44:	00009984 	.word	0x00009984

00000a48 <boot_read_status_bytes>:
{
     a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a4c:	b083      	sub	sp, #12
     a4e:	4606      	mov	r6, r0
     a50:	468a      	mov	sl, r1
     a52:	4691      	mov	r9, r2
    off = boot_status_off(fap);
     a54:	f004 fe02 	bl	565c <boot_status_off>
     a58:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     a5a:	4631      	mov	r1, r6
     a5c:	2000      	movs	r0, #0
     a5e:	f004 fdeb 	bl	5638 <boot_status_entries>
    if (max_entries < 0) {
     a62:	1e07      	subs	r7, r0, #0
     a64:	db4b      	blt.n	afe <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x72>
    for (i = 0; i < max_entries; i++) {
     a66:	2400      	movs	r4, #0
    found_idx = 0;
     a68:	46a3      	mov	fp, r4
    found = 0;
     a6a:	4625      	mov	r5, r4
     a6c:	e007      	b.n	a7e <boot_read_status_bytes+0x36>
            if (found && !found_idx) {
     a6e:	b12d      	cbz	r5, a7c <boot_read_status_bytes+0x34>
     a70:	f1bb 0f00 	cmp.w	fp, #0
     a74:	d102      	bne.n	a7c <boot_read_status_bytes+0x34>
                found_idx = i;
     a76:	46a3      	mov	fp, r4
     a78:	e000      	b.n	a7c <boot_read_status_bytes+0x34>
            found = 1;
     a7a:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
     a7c:	3401      	adds	r4, #1
     a7e:	42bc      	cmp	r4, r7
     a80:	da14      	bge.n	aac <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x20>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
     a82:	f89a 1065 	ldrb.w	r1, [sl, #101]	; 0x65
     a86:	2301      	movs	r3, #1
     a88:	f10d 0207 	add.w	r2, sp, #7
     a8c:	fb04 8101 	mla	r1, r4, r1, r8
     a90:	4630      	mov	r0, r6
     a92:	f004 fb15 	bl	50c0 <flash_area_read_is_empty>
        if (rc < 0) {
     a96:	2800      	cmp	r0, #0
     a98:	db33      	blt.n	b02 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x76>
        if (rc == 1) {
     a9a:	2801      	cmp	r0, #1
     a9c:	d0e7      	beq.n	a6e <boot_read_status_bytes+0x26>
        } else if (!found) {
     a9e:	2d00      	cmp	r5, #0
     aa0:	d0eb      	beq.n	a7a <boot_read_status_bytes+0x32>
        } else if (found_idx) {
     aa2:	f1bb 0f00 	cmp.w	fp, #0
     aa6:	d0e9      	beq.n	a7c <boot_read_status_bytes+0x34>
            invalid = 1;
     aa8:	462b      	mov	r3, r5
     aaa:	e000      	b.n	aae <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x22>
    invalid = 0;
     aac:	2300      	movs	r3, #0
    if (invalid) {
     aae:	b9a3      	cbnz	r3, ada <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x4e>
    if (found) {
     ab0:	b345      	cbz	r5, b04 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x78>
        if (!found_idx) {
     ab2:	f1bb 0f00 	cmp.w	fp, #0
     ab6:	d000      	beq.n	aba <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x2e>
     ab8:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
     aba:	4b14      	ldr	r3, [pc, #80]	; (b0c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x80>)
     abc:	fb83 2304 	smull	r2, r3, r3, r4
     ac0:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
     ac4:	1c5a      	adds	r2, r3, #1
     ac6:	f8c9 2000 	str.w	r2, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
     aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ace:	1ae4      	subs	r4, r4, r3
     ad0:	3401      	adds	r4, #1
     ad2:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
     ad6:	2500      	movs	r5, #0
     ad8:	e014      	b.n	b04 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x78>
        BOOT_LOG_ERR("Detected inconsistent status!");
     ada:	f04f 0000 	mov.w	r0, #0
     ade:	2301      	movs	r3, #1
     ae0:	f363 0002 	bfi	r0, r3, #0, #3
     ae4:	f36f 00c5 	bfc	r0, #3, #3
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x84>)
     aea:	4a0a      	ldr	r2, [pc, #40]	; (b14 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x88>)
     aec:	1a9b      	subs	r3, r3, r2
     aee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     af2:	f363 108f 	bfi	r0, r3, #6, #10
     af6:	4908      	ldr	r1, [pc, #32]	; (b18 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x8c>)
     af8:	f005 fa9c 	bl	6034 <log_string_sync>
     afc:	e7d8      	b.n	ab0 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x24>
        return BOOT_EBADARGS;
     afe:	2507      	movs	r5, #7
     b00:	e000      	b.n	b04 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x78>
            return BOOT_EFLASH;
     b02:	2501      	movs	r5, #1
}
     b04:	4628      	mov	r0, r5
     b06:	b003      	add	sp, #12
     b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b0c:	55555556 	.word	0x55555556
     b10:	000095e8 	.word	0x000095e8
     b14:	000095e0 	.word	0x000095e0
     b18:	000097f8 	.word	0x000097f8

00000b1c <boot_copy_region>:
static int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b20:	4688      	mov	r8, r1
     b22:	4692      	mov	sl, r2
     b24:	461f      	mov	r7, r3
     b26:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     b2a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     b2c:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
     b2e:	e00f      	b.n	b50 <boot_copy_region+0x34>
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b30:	4623      	mov	r3, r4
     b32:	4a0f      	ldr	r2, [pc, #60]	; (b70 <boot_copy_region+0x54>)
     b34:	19e9      	adds	r1, r5, r7
     b36:	4640      	mov	r0, r8
     b38:	f005 faf4 	bl	6124 <flash_area_read>
        if (rc != 0) {
     b3c:	b9a0      	cbnz	r0, b68 <boot_copy_region+0x4c>
                        blk_off, &buf[idx]);
            }
        }
#endif

        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b3e:	4623      	mov	r3, r4
     b40:	4a0b      	ldr	r2, [pc, #44]	; (b70 <boot_copy_region+0x54>)
     b42:	eb05 0109 	add.w	r1, r5, r9
     b46:	4650      	mov	r0, sl
     b48:	f005 fb0b 	bl	6162 <flash_area_write>
        if (rc != 0) {
     b4c:	b970      	cbnz	r0, b6c <boot_copy_region+0x50>
            return BOOT_EFLASH;
        }

        bytes_copied += chunk_sz;
     b4e:	4425      	add	r5, r4
    while (bytes_copied < sz) {
     b50:	42b5      	cmp	r5, r6
     b52:	d206      	bcs.n	b62 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
     b54:	1b74      	subs	r4, r6, r5
     b56:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     b5a:	d9e9      	bls.n	b30 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
     b5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b60:	e7e6      	b.n	b30 <boot_copy_region+0x14>

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     b62:	2000      	movs	r0, #0
}
     b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     b68:	2001      	movs	r0, #1
     b6a:	e7fb      	b.n	b64 <boot_copy_region+0x48>
            return BOOT_EFLASH;
     b6c:	2001      	movs	r0, #1
     b6e:	e7f9      	b.n	b64 <boot_copy_region+0x48>
     b70:	20001878 	.word	0x20001878

00000b74 <boot_image_check>:
{
     b74:	b500      	push	{lr}
     b76:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
     b78:	2000      	movs	r0, #0
     b7a:	9004      	str	r0, [sp, #16]
     b7c:	9003      	str	r0, [sp, #12]
     b7e:	9002      	str	r0, [sp, #8]
     b80:	f44f 7380 	mov.w	r3, #256	; 0x100
     b84:	9301      	str	r3, [sp, #4]
     b86:	4b07      	ldr	r3, [pc, #28]	; (ba4 <boot_image_check+0x30>)
     b88:	9300      	str	r3, [sp, #0]
     b8a:	4613      	mov	r3, r2
     b8c:	460a      	mov	r2, r1
     b8e:	4601      	mov	r1, r0
     b90:	f000 fcaa 	bl	14e8 <bootutil_img_validate>
     b94:	4603      	mov	r3, r0
     b96:	b918      	cbnz	r0, ba0 <boot_image_check+0x2c>
}
     b98:	4618      	mov	r0, r3
     b9a:	b007      	add	sp, #28
     b9c:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
     ba0:	2303      	movs	r3, #3
     ba2:	e7f9      	b.n	b98 <boot_image_check+0x24>
     ba4:	20003478 	.word	0x20003478

00000ba8 <boot_validate_slot>:
{
     ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bac:	b082      	sub	sp, #8
     bae:	4605      	mov	r5, r0
     bb0:	460c      	mov	r4, r1
     bb2:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     bb4:	2000      	movs	r0, #0
     bb6:	f004 fa73 	bl	50a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     bba:	a901      	add	r1, sp, #4
     bbc:	b2c0      	uxtb	r0, r0
     bbe:	f001 f879 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
     bc2:	2800      	cmp	r0, #0
     bc4:	d144      	bne.n	c50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x98>
    return &BOOT_IMG(state, slot).hdr;
     bc6:	202c      	movs	r0, #44	; 0x2c
     bc8:	fb00 5604 	mla	r6, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
     bcc:	4621      	mov	r1, r4
     bce:	4628      	mov	r0, r5
     bd0:	f004 fab8 	bl	5144 <boot_check_header_erased>
     bd4:	b390      	cbz	r0, c3c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x84>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     bd6:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     bd8:	f013 0f10 	tst.w	r3, #16
     bdc:	d136      	bne.n	c4c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x94>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
     be2:	4641      	mov	r1, r8
     be4:	4630      	mov	r0, r6
     be6:	f7ff fd83 	bl	6f0 <boot_is_header_valid>
     bea:	b9b0      	cbnz	r0, c1a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x62>
        if (slot != BOOT_PRIMARY_SLOT) {
     bec:	b9f4      	cbnz	r4, c2c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x74>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     bee:	f04f 0000 	mov.w	r0, #0
     bf2:	2301      	movs	r3, #1
     bf4:	f363 0002 	bfi	r0, r3, #0, #3
     bf8:	f36f 00c5 	bfc	r0, #3, #3
     bfc:	4b16      	ldr	r3, [pc, #88]	; (c58 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xa0>)
     bfe:	4a17      	ldr	r2, [pc, #92]	; (c5c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xa4>)
     c00:	1a9b      	subs	r3, r3, r2
     c02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     c06:	f363 108f 	bfi	r0, r3, #6, #10
     c0a:	b9ac      	cbnz	r4, c38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x80>
     c0c:	4a14      	ldr	r2, [pc, #80]	; (c60 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xa8>)
     c0e:	4915      	ldr	r1, [pc, #84]	; (c64 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xac>)
     c10:	f005 fa10 	bl	6034 <log_string_sync>
        rc = -1;
     c14:	f04f 35ff 	mov.w	r5, #4294967295
        goto out;
     c18:	e011      	b.n	c3e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x86>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     c1a:	463b      	mov	r3, r7
     c1c:	4642      	mov	r2, r8
     c1e:	4631      	mov	r1, r6
     c20:	4628      	mov	r0, r5
     c22:	f7ff ffa7 	bl	b74 <boot_image_check>
     c26:	4605      	mov	r5, r0
     c28:	b148      	cbz	r0, c3e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x86>
     c2a:	e7df      	b.n	bec <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x34>
            flash_area_erase(fap, 0, fap->fa_size);
     c2c:	9801      	ldr	r0, [sp, #4]
     c2e:	6882      	ldr	r2, [r0, #8]
     c30:	2100      	movs	r1, #0
     c32:	f005 fac6 	bl	61c2 <flash_area_erase>
     c36:	e7da      	b.n	bee <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x36>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     c38:	4a0b      	ldr	r2, [pc, #44]	; (c68 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xb0>)
     c3a:	e7e8      	b.n	c0e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x56>
        rc = 1;
     c3c:	2501      	movs	r5, #1
    flash_area_close(fap);
     c3e:	9801      	ldr	r0, [sp, #4]
     c40:	f005 fa6f 	bl	6122 <flash_area_close>
}
     c44:	4628      	mov	r0, r5
     c46:	b002      	add	sp, #8
     c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
     c4c:	2501      	movs	r5, #1
     c4e:	e7f6      	b.n	c3e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x86>
        return -1;
     c50:	f04f 35ff 	mov.w	r5, #4294967295
     c54:	e7f6      	b.n	c44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8c>
     c56:	bf00      	nop
     c58:	000095e8 	.word	0x000095e8
     c5c:	000095e0 	.word	0x000095e0
     c60:	000099d4 	.word	0x000099d4
     c64:	000099e8 	.word	0x000099e8
     c68:	000099dc 	.word	0x000099dc

00000c6c <boot_swap_sectors>:
 */
#ifndef MCUBOOT_OVERWRITE_ONLY
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
     c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c70:	b08b      	sub	sp, #44	; 0x2c
     c72:	460f      	mov	r7, r1
     c74:	4615      	mov	r5, r2
     c76:	461c      	mov	r4, r3

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     c78:	6a53      	ldr	r3, [r2, #36]	; 0x24
     c7a:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     c7e:	681b      	ldr	r3, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     c80:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     c82:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
     c86:	f004 fcd1 	bl	562c <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
     c8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     c8c:	3b01      	subs	r3, #1
    if ((img_off + sz) >
     c8e:	19b9      	adds	r1, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     c90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     c96:	6812      	ldr	r2, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     c98:	1a9b      	subs	r3, r3, r2
     c9a:	4299      	cmp	r1, r3
     c9c:	d928      	bls.n	cf0 <boot_swap_sectors+0x84>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
     c9e:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
     ca2:	6823      	ldr	r3, [r4, #0]
     ca4:	2b01      	cmp	r3, #1
     ca6:	d025      	beq.n	cf4 <boot_swap_sectors+0x88>
     ca8:	2300      	movs	r3, #0
     caa:	7163      	strb	r3, [r4, #5]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     cac:	a909      	add	r1, sp, #36	; 0x24
     cae:	2002      	movs	r0, #2
     cb0:	f001 f800 	bl	1cb4 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     cb4:	a908      	add	r1, sp, #32
     cb6:	2006      	movs	r0, #6
     cb8:	f000 fffc 	bl	1cb4 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
     cbc:	a907      	add	r1, sp, #28
     cbe:	2007      	movs	r0, #7
     cc0:	f000 fff8 	bl	1cb4 <flash_area_open>
    assert (rc == 0);

    if (bs->state == BOOT_STATUS_STATE_0) {
     cc4:	7923      	ldrb	r3, [r4, #4]
     cc6:	2b01      	cmp	r3, #1
     cc8:	d01a      	beq.n	d00 <boot_swap_sectors+0x94>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
     cca:	7923      	ldrb	r3, [r4, #4]
     ccc:	2b02      	cmp	r3, #2
     cce:	d07d      	beq.n	dcc <boot_swap_sectors+0x160>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
     cd0:	7923      	ldrb	r3, [r4, #4]
     cd2:	2b03      	cmp	r3, #3
     cd4:	f000 80a1 	beq.w	e1a <boot_swap_sectors+0x1ae>
            rc = boot_erase_region(fap_scratch, 0, sz);
            assert(rc == 0);
        }
    }

    flash_area_close(fap_primary_slot);
     cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
     cda:	f005 fa22 	bl	6122 <flash_area_close>
    flash_area_close(fap_secondary_slot);
     cde:	9808      	ldr	r0, [sp, #32]
     ce0:	f005 fa1f 	bl	6122 <flash_area_close>
    flash_area_close(fap_scratch);
     ce4:	9807      	ldr	r0, [sp, #28]
     ce6:	f005 fa1c 	bl	6122 <flash_area_close>
}
     cea:	b00b      	add	sp, #44	; 0x2c
     cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    copy_sz = sz;
     cf0:	46b8      	mov	r8, r7
     cf2:	e7d6      	b.n	ca2 <boot_swap_sectors+0x36>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
     cf4:	45b8      	cmp	r8, r7
     cf6:	d001      	beq.n	cfc <boot_swap_sectors+0x90>
     cf8:	2301      	movs	r3, #1
     cfa:	e7d6      	b.n	caa <boot_swap_sectors+0x3e>
     cfc:	2300      	movs	r3, #0
     cfe:	e7d4      	b.n	caa <boot_swap_sectors+0x3e>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
     d00:	9807      	ldr	r0, [sp, #28]
    return flash_area_erase(fap, off, sz);
     d02:	6882      	ldr	r2, [r0, #8]
     d04:	2100      	movs	r1, #0
     d06:	f005 fa5c 	bl	61c2 <flash_area_erase>
        if (bs->idx == BOOT_STATUS_IDX_0) {
     d0a:	6823      	ldr	r3, [r4, #0]
     d0c:	2b01      	cmp	r3, #1
     d0e:	d016      	beq.n	d3e <boot_swap_sectors+0xd2>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
     d10:	f8cd 8004 	str.w	r8, [sp, #4]
     d14:	2300      	movs	r3, #0
     d16:	9300      	str	r3, [sp, #0]
     d18:	4633      	mov	r3, r6
     d1a:	9a07      	ldr	r2, [sp, #28]
     d1c:	9908      	ldr	r1, [sp, #32]
     d1e:	4628      	mov	r0, r5
     d20:	f7ff fefc 	bl	b1c <boot_copy_region>
        rc = boot_write_status(state, bs);
     d24:	4621      	mov	r1, r4
     d26:	4628      	mov	r0, r5
     d28:	f004 fbcd 	bl	54c6 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     d2c:	2302      	movs	r3, #2
     d2e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     d30:	2800      	cmp	r0, #0
     d32:	d0ca      	beq.n	cca <boot_swap_sectors+0x5e>
     d34:	4a66      	ldr	r2, [pc, #408]	; (ed0 <boot_swap_sectors+0x264>)
     d36:	6813      	ldr	r3, [r2, #0]
     d38:	3301      	adds	r3, #1
     d3a:	6013      	str	r3, [r2, #0]
     d3c:	e7c5      	b.n	cca <boot_swap_sectors+0x5e>
            rc = boot_status_init(state, fap_scratch, bs);
     d3e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     d42:	a903      	add	r1, sp, #12
     d44:	2006      	movs	r0, #6
     d46:	f004 fcf5 	bl	5734 <boot_read_swap_state_by_id>
    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
     d4a:	79a1      	ldrb	r1, [r4, #6]
     d4c:	2901      	cmp	r1, #1
     d4e:	d12b      	bne.n	da8 <boot_swap_sectors+0x13c>
    if (swap_state.image_ok == BOOT_FLAG_SET) {
     d50:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d54:	2b01      	cmp	r3, #1
     d56:	d02c      	beq.n	db2 <boot_swap_sectors+0x146>
    rc = boot_write_swap_size(fap, bs->swap_size);
     d58:	68a1      	ldr	r1, [r4, #8]
     d5a:	4648      	mov	r0, r9
     d5c:	f004 fd3a 	bl	57d4 <boot_write_swap_size>
    rc = boot_write_magic(fap);
     d60:	4648      	mov	r0, r9
     d62:	f000 faf1 	bl	1348 <boot_write_magic>
            if (!bs->use_scratch) {
     d66:	7963      	ldrb	r3, [r4, #5]
     d68:	2b00      	cmp	r3, #0
     d6a:	d1d1      	bne.n	d10 <boot_swap_sectors+0xa4>
                rc = boot_erase_trailer_sectors(state, fap_primary_slot);
     d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
     d6e:	4628      	mov	r0, r5
     d70:	f004 fb22 	bl	53b8 <boot_erase_trailer_sectors>
                rc = boot_status_init(state, fap_primary_slot, bs);
     d74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     d78:	a903      	add	r1, sp, #12
     d7a:	2006      	movs	r0, #6
     d7c:	f004 fcda 	bl	5734 <boot_read_swap_state_by_id>
    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
     d80:	79a1      	ldrb	r1, [r4, #6]
     d82:	2901      	cmp	r1, #1
     d84:	d119      	bne.n	dba <boot_swap_sectors+0x14e>
    if (swap_state.image_ok == BOOT_FLAG_SET) {
     d86:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d8a:	2b01      	cmp	r3, #1
     d8c:	d01a      	beq.n	dc4 <boot_swap_sectors+0x158>
    rc = boot_write_swap_size(fap, bs->swap_size);
     d8e:	68a1      	ldr	r1, [r4, #8]
     d90:	4648      	mov	r0, r9
     d92:	f004 fd1f 	bl	57d4 <boot_write_swap_size>
    rc = boot_write_magic(fap);
     d96:	4648      	mov	r0, r9
     d98:	f000 fad6 	bl	1348 <boot_write_magic>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
     d9c:	9807      	ldr	r0, [sp, #28]
    return flash_area_erase(fap, off, sz);
     d9e:	6882      	ldr	r2, [r0, #8]
     da0:	2100      	movs	r1, #0
     da2:	f005 fa0e 	bl	61c2 <flash_area_erase>
     da6:	e7b3      	b.n	d10 <boot_swap_sectors+0xa4>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
     da8:	2200      	movs	r2, #0
     daa:	4648      	mov	r0, r9
     dac:	f004 fd00 	bl	57b0 <boot_write_swap_info>
     db0:	e7ce      	b.n	d50 <boot_swap_sectors+0xe4>
        rc = boot_write_image_ok(fap);
     db2:	4648      	mov	r0, r9
     db4:	f004 fcf5 	bl	57a2 <boot_write_image_ok>
     db8:	e7ce      	b.n	d58 <boot_swap_sectors+0xec>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
     dba:	2200      	movs	r2, #0
     dbc:	4648      	mov	r0, r9
     dbe:	f004 fcf7 	bl	57b0 <boot_write_swap_info>
     dc2:	e7e0      	b.n	d86 <boot_swap_sectors+0x11a>
        rc = boot_write_image_ok(fap);
     dc4:	4648      	mov	r0, r9
     dc6:	f004 fcec 	bl	57a2 <boot_write_image_ok>
     dca:	e7e0      	b.n	d8e <boot_swap_sectors+0x122>
    return flash_area_erase(fap, off, sz);
     dcc:	463a      	mov	r2, r7
     dce:	4631      	mov	r1, r6
     dd0:	9808      	ldr	r0, [sp, #32]
     dd2:	f005 f9f6 	bl	61c2 <flash_area_erase>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
     dd6:	f8cd 8004 	str.w	r8, [sp, #4]
     dda:	9600      	str	r6, [sp, #0]
     ddc:	4633      	mov	r3, r6
     dde:	9a08      	ldr	r2, [sp, #32]
     de0:	9909      	ldr	r1, [sp, #36]	; 0x24
     de2:	4628      	mov	r0, r5
     de4:	f7ff fe9a 	bl	b1c <boot_copy_region>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
     de8:	6823      	ldr	r3, [r4, #0]
     dea:	2b01      	cmp	r3, #1
     dec:	d00d      	beq.n	e0a <boot_swap_sectors+0x19e>
        rc = boot_write_status(state, bs);
     dee:	4621      	mov	r1, r4
     df0:	4628      	mov	r0, r5
     df2:	f004 fb68 	bl	54c6 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
     df6:	2303      	movs	r3, #3
     df8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     dfa:	2800      	cmp	r0, #0
     dfc:	f43f af68 	beq.w	cd0 <boot_swap_sectors+0x64>
     e00:	4a33      	ldr	r2, [pc, #204]	; (ed0 <boot_swap_sectors+0x264>)
     e02:	6813      	ldr	r3, [r2, #0]
     e04:	3301      	adds	r3, #1
     e06:	6013      	str	r3, [r2, #0]
     e08:	e762      	b.n	cd0 <boot_swap_sectors+0x64>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
     e0a:	7963      	ldrb	r3, [r4, #5]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1ee      	bne.n	dee <boot_swap_sectors+0x182>
            rc = boot_erase_trailer_sectors(state, fap_secondary_slot);
     e10:	9908      	ldr	r1, [sp, #32]
     e12:	4628      	mov	r0, r5
     e14:	f004 fad0 	bl	53b8 <boot_erase_trailer_sectors>
     e18:	e7e9      	b.n	dee <boot_swap_sectors+0x182>
    return flash_area_erase(fap, off, sz);
     e1a:	463a      	mov	r2, r7
     e1c:	4631      	mov	r1, r6
     e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
     e20:	f005 f9cf 	bl	61c2 <flash_area_erase>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     e24:	f8cd 8004 	str.w	r8, [sp, #4]
     e28:	9600      	str	r6, [sp, #0]
     e2a:	2300      	movs	r3, #0
     e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e2e:	9907      	ldr	r1, [sp, #28]
     e30:	4628      	mov	r0, r5
     e32:	f7ff fe73 	bl	b1c <boot_copy_region>
        if (bs->use_scratch) {
     e36:	7963      	ldrb	r3, [r4, #5]
     e38:	b9cb      	cbnz	r3, e6e <boot_swap_sectors+0x202>
        erase_scratch = bs->use_scratch;
     e3a:	7966      	ldrb	r6, [r4, #5]
        bs->use_scratch = 0;
     e3c:	2300      	movs	r3, #0
     e3e:	7163      	strb	r3, [r4, #5]
        rc = boot_write_status(state, bs);
     e40:	4621      	mov	r1, r4
     e42:	4628      	mov	r0, r5
     e44:	f004 fb3f 	bl	54c6 <boot_write_status>
        bs->idx++;
     e48:	6823      	ldr	r3, [r4, #0]
     e4a:	3301      	adds	r3, #1
     e4c:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
     e4e:	2301      	movs	r3, #1
     e50:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     e52:	b118      	cbz	r0, e5c <boot_swap_sectors+0x1f0>
     e54:	4a1e      	ldr	r2, [pc, #120]	; (ed0 <boot_swap_sectors+0x264>)
     e56:	6813      	ldr	r3, [r2, #0]
     e58:	3301      	adds	r3, #1
     e5a:	6013      	str	r3, [r2, #0]
        if (erase_scratch) {
     e5c:	2e00      	cmp	r6, #0
     e5e:	f43f af3b 	beq.w	cd8 <boot_swap_sectors+0x6c>
    return flash_area_erase(fap, off, sz);
     e62:	463a      	mov	r2, r7
     e64:	2100      	movs	r1, #0
     e66:	9807      	ldr	r0, [sp, #28]
     e68:	f005 f9ab 	bl	61c2 <flash_area_erase>
     e6c:	e734      	b.n	cd8 <boot_swap_sectors+0x6c>
            scratch_trailer_off = boot_status_off(fap_scratch);
     e6e:	9807      	ldr	r0, [sp, #28]
     e70:	f004 fbf4 	bl	565c <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     e74:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
     e76:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
     e7a:	005b      	lsls	r3, r3, #1
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
     e7c:	9301      	str	r3, [sp, #4]
     e7e:	9600      	str	r6, [sp, #0]
     e80:	4603      	mov	r3, r0
     e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e84:	9907      	ldr	r1, [sp, #28]
     e86:	4628      	mov	r0, r5
     e88:	f7ff fe48 	bl	b1c <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
     e8c:	b118      	cbz	r0, e96 <boot_swap_sectors+0x22a>
     e8e:	4a10      	ldr	r2, [pc, #64]	; (ed0 <boot_swap_sectors+0x264>)
     e90:	6813      	ldr	r3, [r2, #0]
     e92:	3301      	adds	r3, #1
     e94:	6013      	str	r3, [r2, #0]
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
     e96:	a905      	add	r1, sp, #20
     e98:	2007      	movs	r0, #7
     e9a:	f004 fc4b 	bl	5734 <boot_read_swap_state_by_id>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
     e9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
     ea2:	2b01      	cmp	r3, #1
     ea4:	d00b      	beq.n	ebe <boot_swap_sectors+0x252>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
     ea6:	f89d 1015 	ldrb.w	r1, [sp, #21]
     eaa:	2901      	cmp	r1, #1
     eac:	d10b      	bne.n	ec6 <boot_swap_sectors+0x25a>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
     eae:	68a1      	ldr	r1, [r4, #8]
     eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
     eb2:	f004 fc8f 	bl	57d4 <boot_write_swap_size>
            rc = boot_write_magic(fap_primary_slot);
     eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
     eb8:	f000 fa46 	bl	1348 <boot_write_magic>
     ebc:	e7bd      	b.n	e3a <boot_swap_sectors+0x1ce>
                rc = boot_write_image_ok(fap_primary_slot);
     ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
     ec0:	f004 fc6f 	bl	57a2 <boot_write_image_ok>
     ec4:	e7ef      	b.n	ea6 <boot_swap_sectors+0x23a>
                rc = boot_write_swap_info(fap_primary_slot,
     ec6:	2200      	movs	r2, #0
     ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
     eca:	f004 fc71 	bl	57b0 <boot_write_swap_info>
     ece:	e7ee      	b.n	eae <boot_swap_sectors+0x242>
     ed0:	20001874 	.word	0x20001874

00000ed4 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     ed4:	b570      	push	{r4, r5, r6, lr}
     ed6:	b084      	sub	sp, #16
     ed8:	4605      	mov	r5, r0
     eda:	460e      	mov	r6, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     edc:	2300      	movs	r3, #0
     ede:	9301      	str	r3, [sp, #4]
     ee0:	9302      	str	r3, [sp, #8]
    image_index = BOOT_CURR_IMG(state);

    if (bs->idx == BOOT_STATUS_IDX_0 && bs->state == BOOT_STATUS_STATE_0) {
     ee2:	680b      	ldr	r3, [r1, #0]
     ee4:	2b01      	cmp	r3, #1
     ee6:	d102      	bne.n	eee <boot_swap_image+0x1a>
     ee8:	790b      	ldrb	r3, [r1, #4]
     eea:	2b01      	cmp	r3, #1
     eec:	d00a      	beq.n	f04 <boot_swap_image+0x30>
    } else {
        /*
         * If a swap was under way, the swap_size should already be present
         * in the trailer...
         */
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     eee:	f106 0108 	add.w	r1, r6, #8
     ef2:	2000      	movs	r0, #0
     ef4:	f004 fc33 	bl	575e <boot_read_swap_size>
        assert(rc == 0);

        copy_size = bs->swap_size;
     ef8:	68b3      	ldr	r3, [r6, #8]
     efa:	9301      	str	r3, [sp, #4]
{
     efc:	2000      	movs	r0, #0
     efe:	4603      	mov	r3, r0
     f00:	4601      	mov	r1, r0
     f02:	e01b      	b.n	f3c <boot_swap_image+0x68>
        if (hdr->ih_magic == IMAGE_MAGIC) {
     f04:	6802      	ldr	r2, [r0, #0]
     f06:	4b31      	ldr	r3, [pc, #196]	; (fcc <boot_swap_image+0xf8>)
     f08:	429a      	cmp	r2, r3
     f0a:	d00b      	beq.n	f24 <boot_swap_image+0x50>
        if (hdr->ih_magic == IMAGE_MAGIC) {
     f0c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     f0e:	4b2f      	ldr	r3, [pc, #188]	; (fcc <boot_swap_image+0xf8>)
     f10:	429a      	cmp	r2, r3
     f12:	d00c      	beq.n	f2e <boot_swap_image+0x5a>
        if (size > copy_size) {
     f14:	9b02      	ldr	r3, [sp, #8]
     f16:	9a01      	ldr	r2, [sp, #4]
     f18:	4293      	cmp	r3, r2
     f1a:	d900      	bls.n	f1e <boot_swap_image+0x4a>
            copy_size = size;
     f1c:	9301      	str	r3, [sp, #4]
        bs->swap_size = copy_size;
     f1e:	9b01      	ldr	r3, [sp, #4]
     f20:	60b3      	str	r3, [r6, #8]
     f22:	e7eb      	b.n	efc <boot_swap_image+0x28>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     f24:	aa01      	add	r2, sp, #4
     f26:	2100      	movs	r1, #0
     f28:	f004 f9bf 	bl	52aa <boot_read_image_size>
     f2c:	e7ee      	b.n	f0c <boot_swap_image+0x38>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     f2e:	aa02      	add	r2, sp, #8
     f30:	2101      	movs	r1, #1
     f32:	4628      	mov	r0, r5
     f34:	f004 f9b9 	bl	52aa <boot_read_image_size>
     f38:	e7ec      	b.n	f14 <boot_swap_image+0x40>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
     f3a:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
     f3c:	9a01      	ldr	r2, [sp, #4]
     f3e:	429a      	cmp	r2, r3
     f40:	d801      	bhi.n	f46 <boot_swap_image+0x72>
     f42:	4283      	cmp	r3, r0
     f44:	d204      	bcs.n	f50 <boot_swap_image+0x7c>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     f46:	6a6c      	ldr	r4, [r5, #36]	; 0x24
     f48:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
     f4c:	6864      	ldr	r4, [r4, #4]
           primary_slot_size += boot_img_sector_size(state,
     f4e:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
     f50:	4282      	cmp	r2, r0
     f52:	d801      	bhi.n	f58 <boot_swap_image+0x84>
     f54:	4283      	cmp	r3, r0
     f56:	d904      	bls.n	f62 <boot_swap_image+0x8e>
     f58:	6d2c      	ldr	r4, [r5, #80]	; 0x50
     f5a:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
     f5e:	6864      	ldr	r4, [r4, #4]
           secondary_slot_size += boot_img_sector_size(state,
     f60:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
     f62:	429a      	cmp	r2, r3
     f64:	d8e9      	bhi.n	f3a <boot_swap_image+0x66>
     f66:	4282      	cmp	r2, r0
     f68:	d8e7      	bhi.n	f3a <boot_swap_image+0x66>
                secondary_slot_size >= copy_size &&
     f6a:	4298      	cmp	r0, r3
     f6c:	d1e5      	bne.n	f3a <boot_swap_image+0x66>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
     f6e:	2400      	movs	r4, #0
     f70:	e002      	b.n	f78 <boot_swap_image+0xa4>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
     f72:	9903      	ldr	r1, [sp, #12]
     f74:	3901      	subs	r1, #1
        swap_idx++;
     f76:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
     f78:	2900      	cmp	r1, #0
     f7a:	db0e      	blt.n	f9a <boot_swap_image+0xc6>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
     f7c:	aa03      	add	r2, sp, #12
     f7e:	4628      	mov	r0, r5
     f80:	f004 f8bd 	bl	50fe <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
     f84:	6833      	ldr	r3, [r6, #0]
     f86:	3b01      	subs	r3, #1
     f88:	42a3      	cmp	r3, r4
     f8a:	d8f2      	bhi.n	f72 <boot_swap_image+0x9e>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
     f8c:	4633      	mov	r3, r6
     f8e:	462a      	mov	r2, r5
     f90:	4601      	mov	r1, r0
     f92:	9803      	ldr	r0, [sp, #12]
     f94:	f7ff fe6a 	bl	c6c <boot_swap_sectors>
     f98:	e7eb      	b.n	f72 <boot_swap_image+0x9e>
    }

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    if (boot_status_fails > 0) {
     f9a:	4b0d      	ldr	r3, [pc, #52]	; (fd0 <boot_swap_image+0xfc>)
     f9c:	681a      	ldr	r2, [r3, #0]
     f9e:	2a00      	cmp	r2, #0
     fa0:	dd10      	ble.n	fc4 <boot_swap_image+0xf0>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     fa2:	f04f 0000 	mov.w	r0, #0
     fa6:	2302      	movs	r3, #2
     fa8:	f363 0002 	bfi	r0, r3, #0, #3
     fac:	f36f 00c5 	bfc	r0, #3, #3
     fb0:	4b08      	ldr	r3, [pc, #32]	; (fd4 <boot_swap_image+0x100>)
     fb2:	4909      	ldr	r1, [pc, #36]	; (fd8 <boot_swap_image+0x104>)
     fb4:	1a5b      	subs	r3, r3, r1
     fb6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     fba:	f363 108f 	bfi	r0, r3, #6, #10
     fbe:	4907      	ldr	r1, [pc, #28]	; (fdc <boot_swap_image+0x108>)
     fc0:	f005 f838 	bl	6034 <log_string_sync>
                     boot_status_fails);
    }
#endif

    return 0;
}
     fc4:	2000      	movs	r0, #0
     fc6:	b004      	add	sp, #16
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	bf00      	nop
     fcc:	96f3b83d 	.word	0x96f3b83d
     fd0:	20001874 	.word	0x20001874
     fd4:	000095e8 	.word	0x000095e8
     fd8:	000095e0 	.word	0x000095e0
     fdc:	000099a8 	.word	0x000099a8

00000fe0 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     fe0:	b538      	push	{r3, r4, r5, lr}
     fe2:	4604      	mov	r4, r0
     fe4:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     fe6:	f7ff ff75 	bl	ed4 <boot_swap_image>
     fea:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     fec:	79ab      	ldrb	r3, [r5, #6]
     fee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ff2:	79ab      	ldrb	r3, [r5, #6]
     ff4:	3b03      	subs	r3, #3
     ff6:	b2db      	uxtb	r3, r3
     ff8:	2b01      	cmp	r3, #1
     ffa:	d914      	bls.n	1026 <CONFIG_AT_HOST_CMD_MAX_LEN+0x26>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     ffc:	79ab      	ldrb	r3, [r5, #6]
     ffe:	2b02      	cmp	r3, #2
    1000:	d003      	beq.n	100a <CONFIG_AT_HOST_CMD_MAX_LEN+0xa>
    1002:	2b04      	cmp	r3, #4
    1004:	d001      	beq.n	100a <CONFIG_AT_HOST_CMD_MAX_LEN+0xa>
    1006:	2b03      	cmp	r3, #3
    1008:	d107      	bne.n	101a <CONFIG_AT_HOST_CMD_MAX_LEN+0x1a>
        rc = boot_set_copy_done(BOOT_CURR_IMG(state));
    100a:	2000      	movs	r0, #0
    100c:	f004 fa0d 	bl	542a <boot_set_copy_done>
        if (rc != 0) {
    1010:	4602      	mov	r2, r0
    1012:	b110      	cbz	r0, 101a <CONFIG_AT_HOST_CMD_MAX_LEN+0x1a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1014:	23ff      	movs	r3, #255	; 0xff
    1016:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    101a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    101e:	2bff      	cmp	r3, #255	; 0xff
    1020:	d00b      	beq.n	103a <CONFIG_AT_HOST_CMD_MAX_LEN+0x3a>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    1022:	4610      	mov	r0, r2
    1024:	bd38      	pop	{r3, r4, r5, pc}
        rc = boot_set_image_ok(BOOT_CURR_IMG(state));
    1026:	2000      	movs	r0, #0
    1028:	f004 fa12 	bl	5450 <boot_set_image_ok>
        if (rc != 0) {
    102c:	4602      	mov	r2, r0
    102e:	2800      	cmp	r0, #0
    1030:	d0e4      	beq.n	ffc <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1032:	23ff      	movs	r3, #255	; 0xff
    1034:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1038:	e7e0      	b.n	ffc <boot_complete_partial_swap+0x1c>
        BOOT_LOG_ERR("panic!");
    103a:	f04f 0000 	mov.w	r0, #0
    103e:	2301      	movs	r3, #1
    1040:	f363 0002 	bfi	r0, r3, #0, #3
    1044:	f36f 00c5 	bfc	r0, #3, #3
    1048:	4b05      	ldr	r3, [pc, #20]	; (1060 <CONFIG_AT_HOST_CMD_MAX_LEN+0x60>)
    104a:	4a06      	ldr	r2, [pc, #24]	; (1064 <CONFIG_AT_HOST_CMD_MAX_LEN+0x64>)
    104c:	1a9b      	subs	r3, r3, r2
    104e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1052:	f363 108f 	bfi	r0, r3, #6, #10
    1056:	4904      	ldr	r1, [pc, #16]	; (1068 <CONFIG_AT_HOST_CMD_MAX_LEN+0x68>)
    1058:	f004 ffec 	bl	6034 <log_string_sync>
    105c:	e7fe      	b.n	105c <CONFIG_AT_HOST_CMD_MAX_LEN+0x5c>
    105e:	bf00      	nop
    1060:	000095e8 	.word	0x000095e8
    1064:	000095e0 	.word	0x000095e0
    1068:	00009760 	.word	0x00009760

0000106c <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    106c:	b538      	push	{r3, r4, r5, lr}
    106e:	4604      	mov	r4, r0
    1070:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    1072:	f004 f8b7 	bl	51e4 <boot_read_sectors>
    if (rc != 0) {
    1076:	b960      	cbnz	r0, 1092 <boot_prepare_image_for_update+0x26>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false);
    1078:	2100      	movs	r1, #0
    107a:	4620      	mov	r0, r4
    107c:	f004 f983 	bl	5386 <boot_read_image_headers>
    if (rc != 0) {
    1080:	b9f0      	cbnz	r0, 10c0 <boot_prepare_image_for_update+0x54>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
    1082:	4620      	mov	r0, r4
    1084:	f7ff fb56 	bl	734 <boot_slots_compatible>
    1088:	bb80      	cbnz	r0, 10ec <boot_prepare_image_for_update+0x80>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    108a:	2301      	movs	r3, #1
    108c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1090:	e015      	b.n	10be <boot_prepare_image_for_update+0x52>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
    1092:	f04f 0000 	mov.w	r0, #0
    1096:	2302      	movs	r3, #2
    1098:	f363 0002 	bfi	r0, r3, #0, #3
    109c:	f36f 00c5 	bfc	r0, #3, #3
    10a0:	4b35      	ldr	r3, [pc, #212]	; (1178 <boot_prepare_image_for_update+0x10c>)
    10a2:	4a36      	ldr	r2, [pc, #216]	; (117c <boot_prepare_image_for_update+0x110>)
    10a4:	1a9b      	subs	r3, r3, r2
    10a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    10aa:	f363 108f 	bfi	r0, r3, #6, #10
    10ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    10b2:	4933      	ldr	r1, [pc, #204]	; (1180 <boot_prepare_image_for_update+0x114>)
    10b4:	f004 ffbe 	bl	6034 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    10b8:	2301      	movs	r3, #1
    10ba:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    }
}
    10be:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    10c0:	f04f 0000 	mov.w	r0, #0
    10c4:	2302      	movs	r3, #2
    10c6:	f363 0002 	bfi	r0, r3, #0, #3
    10ca:	f36f 00c5 	bfc	r0, #3, #3
    10ce:	4b2a      	ldr	r3, [pc, #168]	; (1178 <boot_prepare_image_for_update+0x10c>)
    10d0:	4a2a      	ldr	r2, [pc, #168]	; (117c <boot_prepare_image_for_update+0x110>)
    10d2:	1a9b      	subs	r3, r3, r2
    10d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    10d8:	f363 108f 	bfi	r0, r3, #6, #10
    10dc:	2200      	movs	r2, #0
    10de:	4929      	ldr	r1, [pc, #164]	; (1184 <boot_prepare_image_for_update+0x118>)
    10e0:	f004 ffa8 	bl	6034 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    10e4:	2301      	movs	r3, #1
    10e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    10ea:	e7e8      	b.n	10be <boot_prepare_image_for_update+0x52>
        rc = boot_read_status(state, bs);
    10ec:	4629      	mov	r1, r5
    10ee:	4620      	mov	r0, r4
    10f0:	f004 f896 	bl	5220 <boot_read_status>
        if (rc != 0) {
    10f4:	b988      	cbnz	r0, 111a <boot_prepare_image_for_update+0xae>
        if (bs->idx != BOOT_STATUS_IDX_0 || bs->state != BOOT_STATUS_STATE_0) {
    10f6:	682b      	ldr	r3, [r5, #0]
    10f8:	2b01      	cmp	r3, #1
    10fa:	d102      	bne.n	1102 <boot_prepare_image_for_update+0x96>
    10fc:	792b      	ldrb	r3, [r5, #4]
    10fe:	2b01      	cmp	r3, #1
    1100:	d021      	beq.n	1146 <boot_prepare_image_for_update+0xda>
            rc = boot_complete_partial_swap(state, bs);
    1102:	4629      	mov	r1, r5
    1104:	4620      	mov	r0, r4
    1106:	f7ff ff6b 	bl	fe0 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false);
    110a:	2100      	movs	r1, #0
    110c:	4620      	mov	r0, r4
    110e:	f004 f93a 	bl	5386 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1112:	2301      	movs	r3, #1
    1114:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1118:	e7d1      	b.n	10be <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
    111a:	f04f 0000 	mov.w	r0, #0
    111e:	2302      	movs	r3, #2
    1120:	f363 0002 	bfi	r0, r3, #0, #3
    1124:	f36f 00c5 	bfc	r0, #3, #3
    1128:	4b13      	ldr	r3, [pc, #76]	; (1178 <boot_prepare_image_for_update+0x10c>)
    112a:	4a14      	ldr	r2, [pc, #80]	; (117c <boot_prepare_image_for_update+0x110>)
    112c:	1a9b      	subs	r3, r3, r2
    112e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1132:	f363 108f 	bfi	r0, r3, #6, #10
    1136:	2200      	movs	r2, #0
    1138:	4913      	ldr	r1, [pc, #76]	; (1188 <boot_prepare_image_for_update+0x11c>)
    113a:	f004 ff7b 	bl	6034 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    113e:	2301      	movs	r3, #1
    1140:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    1144:	e7bb      	b.n	10be <boot_prepare_image_for_update+0x52>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    1146:	79ab      	ldrb	r3, [r5, #6]
    1148:	2b01      	cmp	r3, #1
    114a:	d009      	beq.n	1160 <boot_prepare_image_for_update+0xf4>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    114c:	462a      	mov	r2, r5
    114e:	2101      	movs	r1, #1
    1150:	4620      	mov	r0, r4
    1152:	f7ff fd29 	bl	ba8 <boot_validate_slot>
    1156:	b150      	cbz	r0, 116e <boot_prepare_image_for_update+0x102>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    1158:	2305      	movs	r3, #5
    115a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    115e:	e7ae      	b.n	10be <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    1160:	4629      	mov	r1, r5
    1162:	4620      	mov	r0, r4
    1164:	f004 f993 	bl	548e <boot_validated_swap_type>
    1168:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    116c:	e7a7      	b.n	10be <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    116e:	79ab      	ldrb	r3, [r5, #6]
    1170:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1174:	e7a3      	b.n	10be <boot_prepare_image_for_update+0x52>
    1176:	bf00      	nop
    1178:	000095e8 	.word	0x000095e8
    117c:	000095e0 	.word	0x000095e0
    1180:	00009768 	.word	0x00009768
    1184:	000097a8 	.word	0x000097a8
    1188:	000097d0 	.word	0x000097d0

0000118c <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    118c:	b5f0      	push	{r4, r5, r6, r7, lr}
    118e:	b085      	sub	sp, #20
    1190:	4604      	mov	r4, r0
    1192:	460e      	mov	r6, r1
     */
    TARGET_STATIC boot_sector_t primary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];

    memset(state, 0, sizeof(struct boot_loader_state));
    1194:	2268      	movs	r2, #104	; 0x68
    1196:	2100      	movs	r1, #0
    1198:	f005 fa7a 	bl	6690 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    119c:	4b3e      	ldr	r3, [pc, #248]	; (1298 <context_boot_go+0x10c>)
    119e:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    11a0:	4b3e      	ldr	r3, [pc, #248]	; (129c <context_boot_go+0x110>)
    11a2:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
        state->scratch.sectors = scratch_sectors;
    11a4:	4b3e      	ldr	r3, [pc, #248]	; (12a0 <context_boot_go+0x114>)
    11a6:	65e3      	str	r3, [r4, #92]	; 0x5c

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    11a8:	2500      	movs	r5, #0
    11aa:	e00c      	b.n	11c6 <context_boot_go+0x3a>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    11ac:	4629      	mov	r1, r5
    11ae:	2000      	movs	r0, #0
    11b0:	f003 ff76 	bl	50a0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    11b4:	212c      	movs	r1, #44	; 0x2c
    11b6:	fb01 f105 	mul.w	r1, r1, r5
    11ba:	3120      	adds	r1, #32
    11bc:	4421      	add	r1, r4
    11be:	b2c0      	uxtb	r0, r0
    11c0:	f000 fd78 	bl	1cb4 <flash_area_open>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    11c4:	3501      	adds	r5, #1
    11c6:	2d01      	cmp	r5, #1
    11c8:	d9f0      	bls.n	11ac <context_boot_go+0x20>
            assert(rc == 0);
        }
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    11ca:	f104 0158 	add.w	r1, r4, #88	; 0x58
    11ce:	2007      	movs	r0, #7
    11d0:	f000 fd70 	bl	1cb4 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    11d4:	a901      	add	r1, sp, #4
    11d6:	4620      	mov	r0, r4
    11d8:	f7ff ff48 	bl	106c <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    11dc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        bs.idx = BOOT_STATUS_IDX_0;
        bs.state = BOOT_STATUS_STATE_0;
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    11e0:	f88d 300a 	strb.w	r3, [sp, #10]

        switch (BOOT_SWAP_TYPE(state)) {
    11e4:	3b01      	subs	r3, #1
    11e6:	2b04      	cmp	r3, #4
    11e8:	d830      	bhi.n	124c <context_boot_go+0xc0>
    11ea:	e8df f003 	tbb	[pc, r3]
    11ee:	0307      	.short	0x0307
    11f0:	0303      	.short	0x0303
    11f2:	26          	.byte	0x26
    11f3:	00          	.byte	0x00
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    11f4:	a901      	add	r1, sp, #4
    11f6:	4620      	mov	r0, r4
    11f8:	f004 f99e 	bl	5538 <boot_perform_update>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    11fc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1200:	2bff      	cmp	r3, #255	; 0xff
    1202:	d027      	beq.n	1254 <context_boot_go+0xc8>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1204:	2b01      	cmp	r3, #1
    1206:	d005      	beq.n	1214 <context_boot_go+0x88>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false);
    1208:	2100      	movs	r1, #0
    120a:	4620      	mov	r0, r4
    120c:	f004 f8bb 	bl	5386 <boot_read_image_headers>
            if (rc != 0) {
    1210:	4607      	mov	r7, r0
    1212:	b968      	cbnz	r0, 1230 <context_boot_go+0xa4>
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
		rc = boot_validate_slot(state, BOOT_PRIMARY_SLOT, NULL);
    1214:	2200      	movs	r2, #0
    1216:	4611      	mov	r1, r2
    1218:	4620      	mov	r0, r4
    121a:	f7ff fcc5 	bl	ba8 <boot_validate_slot>
		if (rc != 0) {
    121e:	4607      	mov	r7, r0
    1220:	bb50      	cbnz	r0, 1278 <context_boot_go+0xec>
#if (BOOT_IMAGE_NUMBER > 1)
    /* Always boot from the primary slot of Image 0. */
    BOOT_CURR_IMG(state) = 0;
#endif

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    1222:	6a23      	ldr	r3, [r4, #32]
    1224:	785b      	ldrb	r3, [r3, #1]
    1226:	7133      	strb	r3, [r6, #4]
    return BOOT_IMG(state, slot).area->fa_off;
    1228:	6a23      	ldr	r3, [r4, #32]
    122a:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    122c:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    122e:	6034      	str	r4, [r6, #0]

out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        flash_area_close(BOOT_SCRATCH_AREA(state));
    1230:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1232:	f004 ff76 	bl	6122 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1236:	2500      	movs	r5, #0
    1238:	e029      	b.n	128e <context_boot_go+0x102>
            rc = boot_set_image_ok(BOOT_CURR_IMG(state));
    123a:	2000      	movs	r0, #0
    123c:	f004 f908 	bl	5450 <boot_set_image_ok>
            if (rc != 0) {
    1240:	2800      	cmp	r0, #0
    1242:	d0db      	beq.n	11fc <context_boot_go+0x70>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1244:	23ff      	movs	r3, #255	; 0xff
    1246:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    124a:	e7d7      	b.n	11fc <context_boot_go+0x70>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    124c:	23ff      	movs	r3, #255	; 0xff
    124e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1252:	e7d3      	b.n	11fc <context_boot_go+0x70>
            BOOT_LOG_ERR("panic!");
    1254:	f04f 0000 	mov.w	r0, #0
    1258:	2301      	movs	r3, #1
    125a:	f363 0002 	bfi	r0, r3, #0, #3
    125e:	f36f 00c5 	bfc	r0, #3, #3
    1262:	4b10      	ldr	r3, [pc, #64]	; (12a4 <context_boot_go+0x118>)
    1264:	4a10      	ldr	r2, [pc, #64]	; (12a8 <context_boot_go+0x11c>)
    1266:	1a9b      	subs	r3, r3, r2
    1268:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    126c:	f363 108f 	bfi	r0, r3, #6, #10
    1270:	490e      	ldr	r1, [pc, #56]	; (12ac <context_boot_go+0x120>)
    1272:	f004 fedf 	bl	6034 <log_string_sync>
    1276:	e7fe      	b.n	1276 <context_boot_go+0xea>
			rc = BOOT_EBADIMAGE;
    1278:	2703      	movs	r7, #3
    127a:	e7d9      	b.n	1230 <context_boot_go+0xa4>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    127c:	f1c5 0301 	rsb	r3, r5, #1
    1280:	222c      	movs	r2, #44	; 0x2c
    1282:	fb02 4303 	mla	r3, r2, r3, r4
    1286:	6a18      	ldr	r0, [r3, #32]
    1288:	f004 ff4b 	bl	6122 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    128c:	3501      	adds	r5, #1
    128e:	2d01      	cmp	r5, #1
    1290:	d9f4      	bls.n	127c <context_boot_go+0xf0>
        }
    }
    return rc;
}
    1292:	4638      	mov	r0, r7
    1294:	b005      	add	sp, #20
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1298:	20001c78 	.word	0x20001c78
    129c:	20002c78 	.word	0x20002c78
    12a0:	20002478 	.word	0x20002478
    12a4:	000095e8 	.word	0x000095e8
    12a8:	000095e0 	.word	0x000095e0
    12ac:	00009760 	.word	0x00009760

000012b0 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    12b0:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    12b2:	4601      	mov	r1, r0
    12b4:	4801      	ldr	r0, [pc, #4]	; (12bc <boot_go+0xc>)
    12b6:	f7ff ff69 	bl	118c <context_boot_go>
}
    12ba:	bd08      	pop	{r3, pc}
    12bc:	2000180c 	.word	0x2000180c

000012c0 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
    12c0:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    12c2:	2210      	movs	r2, #16
    12c4:	4903      	ldr	r1, [pc, #12]	; (12d4 <boot_magic_decode+0x14>)
    12c6:	f005 f9a6 	bl	6616 <memcmp>
    12ca:	b908      	cbnz	r0, 12d0 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    12cc:	2001      	movs	r0, #1
    }
    return BOOT_MAGIC_BAD;
}
    12ce:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    12d0:	2002      	movs	r0, #2
    12d2:	e7fc      	b.n	12ce <boot_magic_decode+0xe>
    12d4:	00009a0c 	.word	0x00009a0c

000012d8 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b086      	sub	sp, #24
    12dc:	460e      	mov	r6, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    12de:	4b18      	ldr	r3, [pc, #96]	; (1340 <boot_find_status+0x68>)
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    12e6:	2400      	movs	r4, #0
    12e8:	e007      	b.n	12fa <boot_find_status+0x22>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
    12ea:	6830      	ldr	r0, [r6, #0]
    12ec:	f004 ff19 	bl	6122 <flash_area_close>
            return rc;
    12f0:	e023      	b.n	133a <boot_find_status+0x62>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
    12f2:	6830      	ldr	r0, [r6, #0]
    12f4:	f004 ff15 	bl	6122 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    12f8:	3401      	adds	r4, #1
    12fa:	2c01      	cmp	r4, #1
    12fc:	d81b      	bhi.n	1336 <boot_find_status+0x5e>
        rc = flash_area_open(areas[i], fap);
    12fe:	4631      	mov	r1, r6
    1300:	ab06      	add	r3, sp, #24
    1302:	4423      	add	r3, r4
    1304:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    1308:	f000 fcd4 	bl	1cb4 <flash_area_open>
        if (rc != 0) {
    130c:	4605      	mov	r5, r0
    130e:	b9a0      	cbnz	r0, 133a <boot_find_status+0x62>
        off = boot_magic_off(*fap);
    1310:	6830      	ldr	r0, [r6, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    1312:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    1314:	2310      	movs	r3, #16
    1316:	aa02      	add	r2, sp, #8
    1318:	3910      	subs	r1, #16
    131a:	f004 ff03 	bl	6124 <flash_area_read>
        if (rc != 0) {
    131e:	4605      	mov	r5, r0
    1320:	2800      	cmp	r0, #0
    1322:	d1e2      	bne.n	12ea <boot_find_status+0x12>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    1324:	2210      	movs	r2, #16
    1326:	4907      	ldr	r1, [pc, #28]	; (1344 <boot_find_status+0x6c>)
    1328:	a802      	add	r0, sp, #8
    132a:	f005 f974 	bl	6616 <memcmp>
    132e:	4605      	mov	r5, r0
    1330:	2800      	cmp	r0, #0
    1332:	d1de      	bne.n	12f2 <boot_find_status+0x1a>
    1334:	e001      	b.n	133a <boot_find_status+0x62>
    }

    /* If we got here, no magic was found */
    return -1;
    1336:	f04f 35ff 	mov.w	r5, #4294967295
}
    133a:	4628      	mov	r0, r5
    133c:	b006      	add	sp, #24
    133e:	bd70      	pop	{r4, r5, r6, pc}
    1340:	00009618 	.word	0x00009618
    1344:	00009a0c 	.word	0x00009a0c

00001348 <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
    1348:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    134a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    134c:	2310      	movs	r3, #16
    134e:	4a05      	ldr	r2, [pc, #20]	; (1364 <boot_write_magic+0x1c>)
    1350:	3910      	subs	r1, #16
    1352:	f004 ff06 	bl	6162 <flash_area_write>
    if (rc != 0) {
    1356:	4603      	mov	r3, r0
    1358:	b908      	cbnz	r0, 135e <boot_write_magic+0x16>
        return BOOT_EFLASH;
    }

    return 0;
}
    135a:	4618      	mov	r0, r3
    135c:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    135e:	2301      	movs	r3, #1
    1360:	e7fb      	b.n	135a <boot_write_magic+0x12>
    1362:	bf00      	nop
    1364:	00009a0c 	.word	0x00009a0c

00001368 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    1368:	b530      	push	{r4, r5, lr}
    136a:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    136c:	a902      	add	r1, sp, #8
    136e:	2002      	movs	r0, #2
    1370:	f004 f9e0 	bl	5734 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    1374:	2800      	cmp	r0, #0
    1376:	d16c      	bne.n	1452 <boot_swap_type_multi+0xea>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1378:	4669      	mov	r1, sp
    137a:	2006      	movs	r0, #6
    137c:	f004 f9da 	bl	5734 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    1380:	2800      	cmp	r0, #0
    1382:	d169      	bne.n	1458 <boot_swap_type_multi+0xf0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    1384:	2400      	movs	r4, #0
    1386:	e007      	b.n	1398 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1388:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    138a:	2b04      	cmp	r3, #4
    138c:	d028      	beq.n	13e0 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    138e:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1392:	4293      	cmp	r3, r2
    1394:	d024      	beq.n	13e0 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    1396:	3401      	adds	r4, #1
    1398:	2c02      	cmp	r4, #2
    139a:	d847      	bhi.n	142c <boot_swap_type_multi+0xc4>
        table = boot_swap_tables + i;
    139c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    13a0:	005b      	lsls	r3, r3, #1
    13a2:	4a2e      	ldr	r2, [pc, #184]	; (145c <boot_swap_type_multi+0xf4>)
    13a4:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    13a6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    13aa:	5cd0      	ldrb	r0, [r2, r3]
    13ac:	f004 f92e 	bl	560c <boot_magic_compatible_check>
    13b0:	2800      	cmp	r0, #0
    13b2:	d0f0      	beq.n	1396 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    13b4:	f89d 1000 	ldrb.w	r1, [sp]
    13b8:	7868      	ldrb	r0, [r5, #1]
    13ba:	f004 f927 	bl	560c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    13be:	2800      	cmp	r0, #0
    13c0:	d0e9      	beq.n	1396 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    13c2:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    13c4:	2b04      	cmp	r3, #4
    13c6:	d003      	beq.n	13d0 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    13c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    13cc:	4293      	cmp	r3, r2
    13ce:	d1e2      	bne.n	1396 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    13d0:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    13d2:	2b04      	cmp	r3, #4
    13d4:	d0d8      	beq.n	1388 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    13d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    13da:	4293      	cmp	r3, r2
    13dc:	d1db      	bne.n	1396 <boot_swap_type_multi+0x2e>
    13de:	e7d3      	b.n	1388 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    13e0:	f04f 0000 	mov.w	r0, #0
    13e4:	2303      	movs	r3, #3
    13e6:	f363 0002 	bfi	r0, r3, #0, #3
    13ea:	f36f 00c5 	bfc	r0, #3, #3
    13ee:	4b1c      	ldr	r3, [pc, #112]	; (1460 <boot_swap_type_multi+0xf8>)
    13f0:	4a1c      	ldr	r2, [pc, #112]	; (1464 <boot_swap_type_multi+0xfc>)
    13f2:	1a9b      	subs	r3, r3, r2
    13f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13f8:	f363 108f 	bfi	r0, r3, #6, #10
    13fc:	796b      	ldrb	r3, [r5, #5]
    13fe:	2b02      	cmp	r3, #2
    1400:	d007      	beq.n	1412 <boot_swap_type_multi+0xaa>
    1402:	2b03      	cmp	r3, #3
    1404:	d010      	beq.n	1428 <boot_swap_type_multi+0xc0>
    1406:	2b04      	cmp	r3, #4
    1408:	d001      	beq.n	140e <boot_swap_type_multi+0xa6>
    140a:	4a17      	ldr	r2, [pc, #92]	; (1468 <boot_swap_type_multi+0x100>)
    140c:	e002      	b.n	1414 <boot_swap_type_multi+0xac>
    140e:	4a17      	ldr	r2, [pc, #92]	; (146c <boot_swap_type_multi+0x104>)
    1410:	e000      	b.n	1414 <boot_swap_type_multi+0xac>
    1412:	4a17      	ldr	r2, [pc, #92]	; (1470 <boot_swap_type_multi+0x108>)
    1414:	4917      	ldr	r1, [pc, #92]	; (1474 <boot_swap_type_multi+0x10c>)
    1416:	f004 fe0d 	bl	6034 <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    141a:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    141c:	1e83      	subs	r3, r0, #2
    141e:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    1420:	2b02      	cmp	r3, #2
    1422:	d917      	bls.n	1454 <boot_swap_type_multi+0xec>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    1424:	20ff      	movs	r0, #255	; 0xff
    1426:	e015      	b.n	1454 <boot_swap_type_multi+0xec>
            BOOT_LOG_INF("Swap type: %s",
    1428:	4a13      	ldr	r2, [pc, #76]	; (1478 <boot_swap_type_multi+0x110>)
    142a:	e7f3      	b.n	1414 <boot_swap_type_multi+0xac>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    142c:	f04f 0000 	mov.w	r0, #0
    1430:	2303      	movs	r3, #3
    1432:	f363 0002 	bfi	r0, r3, #0, #3
    1436:	f36f 00c5 	bfc	r0, #3, #3
    143a:	4b09      	ldr	r3, [pc, #36]	; (1460 <boot_swap_type_multi+0xf8>)
    143c:	4a09      	ldr	r2, [pc, #36]	; (1464 <boot_swap_type_multi+0xfc>)
    143e:	1a9b      	subs	r3, r3, r2
    1440:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1444:	f363 108f 	bfi	r0, r3, #6, #10
    1448:	490c      	ldr	r1, [pc, #48]	; (147c <boot_swap_type_multi+0x114>)
    144a:	f004 fdf3 	bl	6034 <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
    144e:	2001      	movs	r0, #1
    1450:	e000      	b.n	1454 <boot_swap_type_multi+0xec>
        return BOOT_SWAP_TYPE_PANIC;
    1452:	20ff      	movs	r0, #255	; 0xff
}
    1454:	b005      	add	sp, #20
    1456:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    1458:	20ff      	movs	r0, #255	; 0xff
    145a:	e7fb      	b.n	1454 <boot_swap_type_multi+0xec>
    145c:	00009a1c 	.word	0x00009a1c
    1460:	000095e8 	.word	0x000095e8
    1464:	000095e0 	.word	0x000095e0
    1468:	000098fc 	.word	0x000098fc
    146c:	00009a40 	.word	0x00009a40
    1470:	00009a38 	.word	0x00009a38
    1474:	00009a48 	.word	0x00009a48
    1478:	00009a30 	.word	0x00009a30
    147c:	00009a58 	.word	0x00009a58

00001480 <bootutil_find_key>:
#endif

#ifdef EXPECTED_SIG_TLV
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
    1480:	b570      	push	{r4, r5, r6, lr}
    1482:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
    1484:	2920      	cmp	r1, #32
    1486:	d828      	bhi.n	14da <bootutil_find_key+0x5a>
    1488:	460d      	mov	r5, r1
    148a:	4606      	mov	r6, r0
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
    148c:	2400      	movs	r4, #0
    148e:	4b14      	ldr	r3, [pc, #80]	; (14e0 <bootutil_find_key+0x60>)
    1490:	681b      	ldr	r3, [r3, #0]
    1492:	42a3      	cmp	r3, r4
    1494:	dd1c      	ble.n	14d0 <bootutil_find_key+0x50>
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    1496:	a809      	add	r0, sp, #36	; 0x24
    1498:	f006 ffed 	bl	8476 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    149c:	2100      	movs	r1, #0
    149e:	a809      	add	r0, sp, #36	; 0x24
    14a0:	f002 fdc4 	bl	402c <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
    14a4:	4b0f      	ldr	r3, [pc, #60]	; (14e4 <bootutil_find_key+0x64>)
    14a6:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    14aa:	6852      	ldr	r2, [r2, #4]

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    14b2:	a809      	add	r0, sp, #36	; 0x24
    14b4:	f006 ffe5 	bl	8482 <mbedtls_sha256_update_ret>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    14b8:	a901      	add	r1, sp, #4
    14ba:	a809      	add	r0, sp, #36	; 0x24
    14bc:	f007 f824 	bl	8508 <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
    14c0:	462a      	mov	r2, r5
    14c2:	4631      	mov	r1, r6
    14c4:	a801      	add	r0, sp, #4
    14c6:	f005 f8a6 	bl	6616 <memcmp>
    14ca:	b118      	cbz	r0, 14d4 <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
    14cc:	3401      	adds	r4, #1
    14ce:	e7de      	b.n	148e <bootutil_find_key+0xe>
            return i;
        }
    }
    return -1;
    14d0:	f04f 34ff 	mov.w	r4, #4294967295
}
    14d4:	4620      	mov	r0, r4
    14d6:	b024      	add	sp, #144	; 0x90
    14d8:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    14da:	f04f 34ff 	mov.w	r4, #4294967295
    14de:	e7f9      	b.n	14d4 <bootutil_find_key+0x54>
    14e0:	00009754 	.word	0x00009754
    14e4:	00009758 	.word	0x00009758

000014e8 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    14e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14ec:	b0d6      	sub	sp, #344	; 0x158
    14ee:	4617      	mov	r7, r2
    14f0:	461c      	mov	r4, r3
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    14f2:	9d5f      	ldr	r5, [sp, #380]	; 0x17c
    14f4:	9504      	str	r5, [sp, #16]
    14f6:	9d5e      	ldr	r5, [sp, #376]	; 0x178
    14f8:	9503      	str	r5, [sp, #12]
    14fa:	ad06      	add	r5, sp, #24
    14fc:	9502      	str	r5, [sp, #8]
    14fe:	9d5d      	ldr	r5, [sp, #372]	; 0x174
    1500:	9501      	str	r5, [sp, #4]
    1502:	9d5c      	ldr	r5, [sp, #368]	; 0x170
    1504:	9500      	str	r5, [sp, #0]
    1506:	f004 f976 	bl	57f6 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    150a:	4606      	mov	r6, r0
    150c:	2800      	cmp	r0, #0
    150e:	f040 8082 	bne.w	1616 <bootutil_img_validate+0x12e>
        return rc;
    }

    if (out_hash) {
    1512:	9b60      	ldr	r3, [sp, #384]	; 0x180
    1514:	b123      	cbz	r3, 1520 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
    1516:	2220      	movs	r2, #32
    1518:	a906      	add	r1, sp, #24
    151a:	4618      	mov	r0, r3
    151c:	f005 f893 	bl	6646 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    1520:	2300      	movs	r3, #0
    1522:	9300      	str	r3, [sp, #0]
    1524:	23ff      	movs	r3, #255	; 0xff
    1526:	4622      	mov	r2, r4
    1528:	4639      	mov	r1, r7
    152a:	a84e      	add	r0, sp, #312	; 0x138
    152c:	f004 fa29 	bl	5982 <bootutil_tlv_iter_begin>
    if (rc) {
    1530:	4606      	mov	r6, r0
    1532:	2800      	cmp	r0, #0
    1534:	d16f      	bne.n	1616 <bootutil_img_validate+0x12e>
    int valid_signature = 0;
    1536:	4607      	mov	r7, r0
    int sha256_valid = 0;
    1538:	4680      	mov	r8, r0
    int key_id = -1;
    153a:	f04f 35ff 	mov.w	r5, #4294967295
    153e:	e01d      	b.n	157c <bootutil_img_validate+0x94>
             * can be multiple signatures, each preceded by a key.
             */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
    1540:	f04f 35ff 	mov.w	r5, #4294967295
    1544:	e01a      	b.n	157c <bootutil_img_validate+0x94>
    1546:	f04f 35ff 	mov.w	r5, #4294967295
    154a:	e017      	b.n	157c <bootutil_img_validate+0x94>
            }
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
            if (rc == 0) {
                valid_signature = 1;
            }
            key_id = -1;
    154c:	f04f 35ff 	mov.w	r5, #4294967295
                valid_signature = 1;
    1550:	2701      	movs	r7, #1
    1552:	e013      	b.n	157c <bootutil_img_validate+0x94>
            if (len != sizeof(hash)) {
    1554:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    1558:	2b20      	cmp	r3, #32
    155a:	d160      	bne.n	161e <bootutil_img_validate+0x136>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    155c:	aa0e      	add	r2, sp, #56	; 0x38
    155e:	9955      	ldr	r1, [sp, #340]	; 0x154
    1560:	4620      	mov	r0, r4
    1562:	f004 fddf 	bl	6124 <flash_area_read>
            if (rc) {
    1566:	2800      	cmp	r0, #0
    1568:	d15c      	bne.n	1624 <bootutil_img_validate+0x13c>
            if (memcmp(hash, buf, sizeof(hash))) {
    156a:	2220      	movs	r2, #32
    156c:	a90e      	add	r1, sp, #56	; 0x38
    156e:	a806      	add	r0, sp, #24
    1570:	f005 f851 	bl	6616 <memcmp>
    1574:	2800      	cmp	r0, #0
    1576:	d157      	bne.n	1628 <bootutil_img_validate+0x140>
            sha256_valid = 1;
    1578:	f04f 0801 	mov.w	r8, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    157c:	f20d 1351 	addw	r3, sp, #337	; 0x151
    1580:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
    1584:	a955      	add	r1, sp, #340	; 0x154
    1586:	a84e      	add	r0, sp, #312	; 0x138
    1588:	f004 fa60 	bl	5a4c <bootutil_tlv_iter_next>
        if (rc < 0) {
    158c:	2800      	cmp	r0, #0
    158e:	db40      	blt.n	1612 <bootutil_img_validate+0x12a>
        } else if (rc > 0) {
    1590:	dc38      	bgt.n	1604 <bootutil_img_validate+0x11c>
        if (type == IMAGE_TLV_SHA256) {
    1592:	f89d 3151 	ldrb.w	r3, [sp, #337]	; 0x151
    1596:	2b10      	cmp	r3, #16
    1598:	d0dc      	beq.n	1554 <bootutil_img_validate+0x6c>
        } else if (type == IMAGE_TLV_KEYHASH) {
    159a:	2b01      	cmp	r3, #1
    159c:	d021      	beq.n	15e2 <bootutil_img_validate+0xfa>
        } else if (type == EXPECTED_SIG_TLV) {
    159e:	2b20      	cmp	r3, #32
    15a0:	d1ec      	bne.n	157c <bootutil_img_validate+0x94>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
    15a2:	2d00      	cmp	r5, #0
    15a4:	dbcc      	blt.n	1540 <bootutil_img_validate+0x58>
    15a6:	4b29      	ldr	r3, [pc, #164]	; (164c <bootutil_img_validate+0x164>)
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	42ab      	cmp	r3, r5
    15ac:	ddcb      	ble.n	1546 <bootutil_img_validate+0x5e>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
    15ae:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    15b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    15b6:	d13f      	bne.n	1638 <bootutil_img_validate+0x150>
            rc = flash_area_read(fap, off, buf, len);
    15b8:	aa0e      	add	r2, sp, #56	; 0x38
    15ba:	9955      	ldr	r1, [sp, #340]	; 0x154
    15bc:	4620      	mov	r0, r4
    15be:	f004 fdb1 	bl	6124 <flash_area_read>
            if (rc) {
    15c2:	2800      	cmp	r0, #0
    15c4:	d13b      	bne.n	163e <bootutil_img_validate+0x156>
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
    15c6:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    15ca:	b2ed      	uxtb	r5, r5
    15cc:	9500      	str	r5, [sp, #0]
    15ce:	aa0e      	add	r2, sp, #56	; 0x38
    15d0:	2120      	movs	r1, #32
    15d2:	a806      	add	r0, sp, #24
    15d4:	f000 f8b0 	bl	1738 <bootutil_verify_sig>
            if (rc == 0) {
    15d8:	2800      	cmp	r0, #0
    15da:	d0b7      	beq.n	154c <bootutil_img_validate+0x64>
            key_id = -1;
    15dc:	f04f 35ff 	mov.w	r5, #4294967295
    15e0:	e7cc      	b.n	157c <bootutil_img_validate+0x94>
            if (len > 32) {
    15e2:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    15e6:	2b20      	cmp	r3, #32
    15e8:	d821      	bhi.n	162e <bootutil_img_validate+0x146>
            rc = flash_area_read(fap, off, buf, len);
    15ea:	aa0e      	add	r2, sp, #56	; 0x38
    15ec:	9955      	ldr	r1, [sp, #340]	; 0x154
    15ee:	4620      	mov	r0, r4
    15f0:	f004 fd98 	bl	6124 <flash_area_read>
            if (rc) {
    15f4:	b9f0      	cbnz	r0, 1634 <bootutil_img_validate+0x14c>
            key_id = bootutil_find_key(buf, len);
    15f6:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
    15fa:	a80e      	add	r0, sp, #56	; 0x38
    15fc:	f7ff ff40 	bl	1480 <bootutil_find_key>
    1600:	4605      	mov	r5, r0
    1602:	e7bb      	b.n	157c <bootutil_img_validate+0x94>
#endif
        }
    }

    if (!sha256_valid) {
    1604:	f1b8 0f00 	cmp.w	r8, #0
    1608:	d01c      	beq.n	1644 <bootutil_img_validate+0x15c>
        return -1;
    }

#ifdef EXPECTED_SIG_TLV
    if (!valid_signature) {
    160a:	b927      	cbnz	r7, 1616 <bootutil_img_validate+0x12e>
        return -1;
    160c:	f04f 36ff 	mov.w	r6, #4294967295
    1610:	e001      	b.n	1616 <bootutil_img_validate+0x12e>
            return -1;
    1612:	f04f 36ff 	mov.w	r6, #4294967295
    }
#endif

    return 0;
}
    1616:	4630      	mov	r0, r6
    1618:	b056      	add	sp, #344	; 0x158
    161a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return -1;
    161e:	f04f 36ff 	mov.w	r6, #4294967295
    1622:	e7f8      	b.n	1616 <bootutil_img_validate+0x12e>
                return rc;
    1624:	4606      	mov	r6, r0
    1626:	e7f6      	b.n	1616 <bootutil_img_validate+0x12e>
                return -1;
    1628:	f04f 36ff 	mov.w	r6, #4294967295
    162c:	e7f3      	b.n	1616 <bootutil_img_validate+0x12e>
                return -1;
    162e:	f04f 36ff 	mov.w	r6, #4294967295
    1632:	e7f0      	b.n	1616 <bootutil_img_validate+0x12e>
                return rc;
    1634:	4606      	mov	r6, r0
    1636:	e7ee      	b.n	1616 <bootutil_img_validate+0x12e>
                return -1;
    1638:	f04f 36ff 	mov.w	r6, #4294967295
    163c:	e7eb      	b.n	1616 <bootutil_img_validate+0x12e>
                return -1;
    163e:	f04f 36ff 	mov.w	r6, #4294967295
    1642:	e7e8      	b.n	1616 <bootutil_img_validate+0x12e>
        return -1;
    1644:	f04f 36ff 	mov.w	r6, #4294967295
    1648:	e7e5      	b.n	1616 <bootutil_img_validate+0x12e>
    164a:	bf00      	nop
    164c:	00009754 	.word	0x00009754

00001650 <bootutil_cmp_rsasig>:
 * values.
 */
static int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
    uint8_t em[MBEDTLS_MPI_MAX_SIZE];
    uint8_t db_mask[PSS_MASK_LEN];
    uint8_t h2[PSS_HLEN];
    int i;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
    1656:	6844      	ldr	r4, [r0, #4]
    1658:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    165c:	d155      	bne.n	170a <bootutil_cmp_rsasig+0xba>
        return -1;
    }

    if (hlen != PSS_HLEN) {
    165e:	2a20      	cmp	r2, #32
    1660:	d156      	bne.n	1710 <bootutil_cmp_rsasig+0xc0>
    1662:	460e      	mov	r6, r1
        return -1;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
    1664:	aa41      	add	r2, sp, #260	; 0x104
    1666:	4619      	mov	r1, r3
    1668:	f002 fc9e 	bl	3fa8 <mbedtls_rsa_public>
    166c:	4605      	mov	r5, r0
    166e:	2800      	cmp	r0, #0
    1670:	d151      	bne.n	1716 <bootutil_cmp_rsasig+0xc6>
     */

    /* Step 4.  If the rightmost octect of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
    1672:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
    1676:	2bbc      	cmp	r3, #188	; 0xbc
    1678:	d150      	bne.n	171c <bootutil_cmp_rsasig+0xcc>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
    167a:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    167e:	a809      	add	r0, sp, #36	; 0x24
    1680:	f004 f94d 	bl	591e <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
    1684:	462b      	mov	r3, r5
    1686:	e006      	b.n	1696 <bootutil_cmp_rsasig+0x46>
        db_mask[i] ^= em[i];
    1688:	aa41      	add	r2, sp, #260	; 0x104
    168a:	5cd2      	ldrb	r2, [r2, r3]
    168c:	a809      	add	r0, sp, #36	; 0x24
    168e:	5cc4      	ldrb	r4, [r0, r3]
    1690:	4062      	eors	r2, r4
    1692:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
    1694:	3301      	adds	r3, #1
    1696:	2bde      	cmp	r3, #222	; 0xde
    1698:	ddf6      	ble.n	1688 <bootutil_cmp_rsasig+0x38>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
    169a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    169e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    16a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    16a6:	2dbd      	cmp	r5, #189	; 0xbd
    16a8:	dc05      	bgt.n	16b6 <bootutil_cmp_rsasig+0x66>
        if (db_mask[i] != 0) {
    16aa:	ab09      	add	r3, sp, #36	; 0x24
    16ac:	5d5b      	ldrb	r3, [r3, r5]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d137      	bne.n	1722 <bootutil_cmp_rsasig+0xd2>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    16b2:	3501      	adds	r5, #1
    16b4:	e7f7      	b.n	16a6 <bootutil_cmp_rsasig+0x56>
            return -1;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
    16b6:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
    16ba:	2b01      	cmp	r3, #1
    16bc:	d137      	bne.n	172e <bootutil_cmp_rsasig+0xde>
    mbedtls_sha256_init(ctx);
    16be:	a881      	add	r0, sp, #516	; 0x204
    16c0:	f006 fed9 	bl	8476 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    16c4:	2100      	movs	r1, #0
    16c6:	a881      	add	r0, sp, #516	; 0x204
    16c8:	f002 fcb0 	bl	402c <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    16cc:	2208      	movs	r2, #8
    16ce:	4919      	ldr	r1, [pc, #100]	; (1734 <bootutil_cmp_rsasig+0xe4>)
    16d0:	a881      	add	r0, sp, #516	; 0x204
    16d2:	f006 fed6 	bl	8482 <mbedtls_sha256_update_ret>
    16d6:	2220      	movs	r2, #32
    16d8:	4631      	mov	r1, r6
    16da:	a881      	add	r0, sp, #516	; 0x204
    16dc:	f006 fed1 	bl	8482 <mbedtls_sha256_update_ret>
    16e0:	2220      	movs	r2, #32
    16e2:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
    16e6:	a881      	add	r0, sp, #516	; 0x204
    16e8:	f006 fecb 	bl	8482 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    16ec:	a901      	add	r1, sp, #4
    16ee:	a881      	add	r0, sp, #516	; 0x204
    16f0:	f006 ff0a 	bl	8508 <mbedtls_sha256_finish_ret>
    bootutil_sha256_update(&shactx, &db_mask[PSS_MASK_SALT_POS], PSS_SLEN);
    bootutil_sha256_finish(&shactx, h2);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    if (memcmp(h2, &em[PSS_HASH_OFFSET], PSS_HLEN) != 0) {
    16f4:	2220      	movs	r2, #32
    16f6:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    16fa:	a801      	add	r0, sp, #4
    16fc:	f004 ff8b 	bl	6616 <memcmp>
    1700:	4603      	mov	r3, r0
    1702:	b180      	cbz	r0, 1726 <bootutil_cmp_rsasig+0xd6>
        return -1;
    1704:	f04f 33ff 	mov.w	r3, #4294967295
    1708:	e00d      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
        return -1;
    170a:	f04f 33ff 	mov.w	r3, #4294967295
    170e:	e00a      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
        return -1;
    1710:	f04f 33ff 	mov.w	r3, #4294967295
    1714:	e007      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
        return -1;
    1716:	f04f 33ff 	mov.w	r3, #4294967295
    171a:	e004      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
        return -1;
    171c:	f04f 33ff 	mov.w	r3, #4294967295
    1720:	e001      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
            return -1;
    1722:	f04f 33ff 	mov.w	r3, #4294967295
    }

    return 0;
}
    1726:	4618      	mov	r0, r3
    1728:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
    172c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    172e:	f04f 33ff 	mov.w	r3, #4294967295
    1732:	e7f8      	b.n	1726 <bootutil_cmp_rsasig+0xd6>
    1734:	00009a68 	.word	0x00009a68

00001738 <bootutil_verify_sig>:

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
    1738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    173c:	b0ac      	sub	sp, #176	; 0xb0
    173e:	4605      	mov	r5, r0
    1740:	460e      	mov	r6, r1
    1742:	4617      	mov	r7, r2
    1744:	461c      	mov	r4, r3
    1746:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
    mbedtls_rsa_context ctx;
    int rc;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
    174a:	2200      	movs	r2, #0
    174c:	4611      	mov	r1, r2
    174e:	a801      	add	r0, sp, #4
    1750:	f006 fe4b 	bl	83ea <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
    1754:	4b12      	ldr	r3, [pc, #72]	; (17a0 <bootutil_verify_sig+0x68>)
    1756:	f853 2038 	ldr.w	r2, [r3, r8, lsl #3]
    175a:	a92c      	add	r1, sp, #176	; 0xb0
    175c:	f841 2db0 	str.w	r2, [r1, #-176]!
    end = cp + *bootutil_keys[key_id].len;
    1760:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    1764:	685b      	ldr	r3, [r3, #4]
    1766:	681b      	ldr	r3, [r3, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    1768:	441a      	add	r2, r3
    176a:	a801      	add	r0, sp, #4
    176c:	f004 f882 	bl	5874 <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
    1770:	4680      	mov	r8, r0
    1772:	b910      	cbnz	r0, 177a <bootutil_verify_sig+0x42>
    1774:	9b02      	ldr	r3, [sp, #8]
    1776:	42a3      	cmp	r3, r4
    1778:	d006      	beq.n	1788 <bootutil_verify_sig+0x50>
        mbedtls_rsa_free(&ctx);
    177a:	a801      	add	r0, sp, #4
    177c:	f006 fe43 	bl	8406 <mbedtls_rsa_free>
    }
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    mbedtls_rsa_free(&ctx);

    return rc;
}
    1780:	4640      	mov	r0, r8
    1782:	b02c      	add	sp, #176	; 0xb0
    1784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    1788:	463b      	mov	r3, r7
    178a:	4632      	mov	r2, r6
    178c:	4629      	mov	r1, r5
    178e:	a801      	add	r0, sp, #4
    1790:	f7ff ff5e 	bl	1650 <bootutil_cmp_rsasig>
    1794:	4680      	mov	r8, r0
    mbedtls_rsa_free(&ctx);
    1796:	a801      	add	r0, sp, #4
    1798:	f006 fe35 	bl	8406 <mbedtls_rsa_free>
    return rc;
    179c:	e7f0      	b.n	1780 <bootutil_verify_sig+0x48>
    179e:	bf00      	nop
    17a0:	00009758 	.word	0x00009758

000017a4 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(u8_t *dst, size_t dlen, size_t *olen, const u8_t *src,
		  size_t slen)
{
    17a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17a8:	f8dd e01c 	ldr.w	lr, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	u8_t *p;

	if (slen == 0) {
    17ac:	f1be 0f00 	cmp.w	lr, #0
    17b0:	d018      	beq.n	17e4 <base64_encode+0x40>
		*olen = 0;
		return 0;
	}

	n = slen / 3 + (slen % 3 != 0);
    17b2:	4c3d      	ldr	r4, [pc, #244]	; (18a8 <base64_encode+0x104>)
    17b4:	fba4 4c0e 	umull	r4, ip, r4, lr
    17b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    17bc:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    17c0:	45a6      	cmp	lr, r4
    17c2:	bf0c      	ite	eq
    17c4:	4664      	moveq	r4, ip
    17c6:	f10c 0401 	addne.w	r4, ip, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    17ca:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    17ce:	d20c      	bcs.n	17ea <base64_encode+0x46>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    17d0:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    17d2:	3401      	adds	r4, #1
    17d4:	428c      	cmp	r4, r1
    17d6:	d80e      	bhi.n	17f6 <base64_encode+0x52>
    17d8:	b168      	cbz	r0, 17f6 <base64_encode+0x52>
		*olen = n + 1;
		return -ENOMEM;
	}

	n = (slen / 3) * 3;
    17da:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1

	for (i = 0, p = dst; i < n; i += 3) {
    17de:	4604      	mov	r4, r0
    17e0:	2700      	movs	r7, #0
    17e2:	e033      	b.n	184c <base64_encode+0xa8>
		*olen = 0;
    17e4:	2000      	movs	r0, #0
    17e6:	6010      	str	r0, [r2, #0]
		return 0;
    17e8:	e055      	b.n	1896 <base64_encode+0xf2>
		*olen = BASE64_SIZE_T_MAX;
    17ea:	f04f 33ff 	mov.w	r3, #4294967295
    17ee:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    17f0:	f06f 000b 	mvn.w	r0, #11
    17f4:	e04f      	b.n	1896 <base64_encode+0xf2>
		*olen = n + 1;
    17f6:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    17f8:	f06f 000b 	mvn.w	r0, #11
    17fc:	e04b      	b.n	1896 <base64_encode+0xf2>
		C1 = *src++;
    17fe:	f893 8000 	ldrb.w	r8, [r3]
		C2 = *src++;
    1802:	7859      	ldrb	r1, [r3, #1]
		C3 = *src++;
    1804:	789d      	ldrb	r5, [r3, #2]

		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1806:	4e29      	ldr	r6, [pc, #164]	; (18ac <base64_encode+0x108>)
    1808:	ea4f 0998 	mov.w	r9, r8, lsr #2
    180c:	f816 9009 	ldrb.w	r9, [r6, r9]
    1810:	f884 9000 	strb.w	r9, [r4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1814:	ea4f 1808 	mov.w	r8, r8, lsl #4
    1818:	f008 0830 	and.w	r8, r8, #48	; 0x30
    181c:	eb08 1821 	add.w	r8, r8, r1, asr #4
    1820:	f008 083f 	and.w	r8, r8, #63	; 0x3f
    1824:	f816 8008 	ldrb.w	r8, [r6, r8]
    1828:	f884 8001 	strb.w	r8, [r4, #1]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    182c:	0089      	lsls	r1, r1, #2
    182e:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    1832:	eb01 11a5 	add.w	r1, r1, r5, asr #6
    1836:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    183a:	5c71      	ldrb	r1, [r6, r1]
    183c:	70a1      	strb	r1, [r4, #2]
		*p++ = base64_enc_map[C3 & 0x3F];
    183e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    1842:	5d71      	ldrb	r1, [r6, r5]
    1844:	70e1      	strb	r1, [r4, #3]
	for (i = 0, p = dst; i < n; i += 3) {
    1846:	3703      	adds	r7, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    1848:	3404      	adds	r4, #4
		C3 = *src++;
    184a:	3303      	adds	r3, #3
	for (i = 0, p = dst; i < n; i += 3) {
    184c:	4567      	cmp	r7, ip
    184e:	d3d6      	bcc.n	17fe <base64_encode+0x5a>
	}

	if (i < slen) {
    1850:	4577      	cmp	r7, lr
    1852:	d21c      	bcs.n	188e <base64_encode+0xea>
		C1 = *src++;
    1854:	7819      	ldrb	r1, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1856:	3701      	adds	r7, #1
    1858:	4577      	cmp	r7, lr
    185a:	d21e      	bcs.n	189a <base64_encode+0xf6>
    185c:	785d      	ldrb	r5, [r3, #1]

		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    185e:	4e13      	ldr	r6, [pc, #76]	; (18ac <base64_encode+0x108>)
    1860:	088b      	lsrs	r3, r1, #2
    1862:	5cf3      	ldrb	r3, [r6, r3]
    1864:	7023      	strb	r3, [r4, #0]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1866:	010b      	lsls	r3, r1, #4
    1868:	f003 0330 	and.w	r3, r3, #48	; 0x30
    186c:	eb03 1325 	add.w	r3, r3, r5, asr #4
    1870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1874:	5cf3      	ldrb	r3, [r6, r3]
    1876:	7063      	strb	r3, [r4, #1]

		if ((i + 1) < slen) {
    1878:	4577      	cmp	r7, lr
    187a:	d210      	bcs.n	189e <base64_encode+0xfa>
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    187c:	00ad      	lsls	r5, r5, #2
    187e:	f005 053c 	and.w	r5, r5, #60	; 0x3c
    1882:	1ce3      	adds	r3, r4, #3
    1884:	5d71      	ldrb	r1, [r6, r5]
    1886:	70a1      	strb	r1, [r4, #2]
		} else {
			*p++ = '=';
		}

		*p++ = '=';
    1888:	1c5c      	adds	r4, r3, #1
    188a:	213d      	movs	r1, #61	; 0x3d
    188c:	7019      	strb	r1, [r3, #0]
	}

	*olen = p - dst;
    188e:	1a20      	subs	r0, r4, r0
    1890:	6010      	str	r0, [r2, #0]
	*p = 0U;
    1892:	2000      	movs	r0, #0
    1894:	7020      	strb	r0, [r4, #0]

	return 0;
}
    1896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		C2 = ((i + 1) < slen) ? *src++ : 0;
    189a:	2500      	movs	r5, #0
    189c:	e7df      	b.n	185e <base64_encode+0xba>
			*p++ = '=';
    189e:	1ce3      	adds	r3, r4, #3
    18a0:	213d      	movs	r1, #61	; 0x3d
    18a2:	70a1      	strb	r1, [r4, #2]
    18a4:	e7f0      	b.n	1888 <base64_encode+0xe4>
    18a6:	bf00      	nop
    18a8:	aaaaaaab 	.word	0xaaaaaaab
    18ac:	00009c04 	.word	0x00009c04

000018b0 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(u8_t *dst, size_t dlen, size_t *olen, const u8_t *src,
		  size_t slen)
{
    18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b2:	9f05      	ldr	r7, [sp, #20]
	size_t i, n;
	u32_t j, x;
	u8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    18b4:	f04f 0e00 	mov.w	lr, #0
    18b8:	46f4      	mov	ip, lr
    18ba:	4674      	mov	r4, lr
    18bc:	e024      	b.n	1908 <base64_decode+0x58>
		/* Skip spaces before checking for EOL */
		x = 0U;
		while (i < slen && src[i] == ' ') {
			++i;
    18be:	3401      	adds	r4, #1
			++x;
    18c0:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    18c2:	42bc      	cmp	r4, r7
    18c4:	d202      	bcs.n	18cc <base64_decode+0x1c>
    18c6:	5d1e      	ldrb	r6, [r3, r4]
    18c8:	2e20      	cmp	r6, #32
    18ca:	d0f8      	beq.n	18be <base64_decode+0xe>
		}

		/* Spaces at end of buffer are OK */
		if (i == slen) {
    18cc:	42bc      	cmp	r4, r7
    18ce:	d02c      	beq.n	192a <base64_decode+0x7a>
			break;
		}

		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    18d0:	1b3e      	subs	r6, r7, r4
    18d2:	2e01      	cmp	r6, #1
    18d4:	d902      	bls.n	18dc <base64_decode+0x2c>
    18d6:	5d1e      	ldrb	r6, [r3, r4]
    18d8:	2e0d      	cmp	r6, #13
    18da:	d019      	beq.n	1910 <base64_decode+0x60>
			continue;
		}

		if (src[i] == '\n') {
    18dc:	5d1e      	ldrb	r6, [r3, r4]
    18de:	2e0a      	cmp	r6, #10
    18e0:	d011      	beq.n	1906 <base64_decode+0x56>
			continue;
		}

		/* Space inside a line is an error */
		if (x != 0U) {
    18e2:	2d00      	cmp	r5, #0
    18e4:	d178      	bne.n	19d8 <base64_decode+0x128>
			return -EINVAL;
		}

		if (src[i] == '=' && ++j > 2) {
    18e6:	2e3d      	cmp	r6, #61	; 0x3d
    18e8:	d017      	beq.n	191a <base64_decode+0x6a>
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    18ea:	f016 0f80 	tst.w	r6, #128	; 0x80
    18ee:	d176      	bne.n	19de <base64_decode+0x12e>
    18f0:	4d3f      	ldr	r5, [pc, #252]	; (19f0 <base64_decode+0x140>)
    18f2:	5dad      	ldrb	r5, [r5, r6]
    18f4:	2d7f      	cmp	r5, #127	; 0x7f
    18f6:	d075      	beq.n	19e4 <base64_decode+0x134>
			return -EINVAL;
		}

		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    18f8:	2d3f      	cmp	r5, #63	; 0x3f
    18fa:	d802      	bhi.n	1902 <base64_decode+0x52>
    18fc:	f1be 0f00 	cmp.w	lr, #0
    1900:	d173      	bne.n	19ea <base64_decode+0x13a>
			return -EINVAL;
		}

		n++;
    1902:	f10c 0c01 	add.w	ip, ip, #1
	for (i = n = j = 0U; i < slen; i++) {
    1906:	3401      	adds	r4, #1
    1908:	42bc      	cmp	r4, r7
    190a:	d20e      	bcs.n	192a <base64_decode+0x7a>
		x = 0U;
    190c:	2500      	movs	r5, #0
    190e:	e7d8      	b.n	18c2 <base64_decode+0x12>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1910:	191e      	adds	r6, r3, r4
    1912:	7876      	ldrb	r6, [r6, #1]
    1914:	2e0a      	cmp	r6, #10
    1916:	d1e1      	bne.n	18dc <base64_decode+0x2c>
    1918:	e7f5      	b.n	1906 <base64_decode+0x56>
		if (src[i] == '=' && ++j > 2) {
    191a:	f10e 0e01 	add.w	lr, lr, #1
    191e:	f1be 0f02 	cmp.w	lr, #2
    1922:	d9e2      	bls.n	18ea <base64_decode+0x3a>
			return -EINVAL;
    1924:	f06f 0015 	mvn.w	r0, #21
    1928:	e055      	b.n	19d6 <base64_decode+0x126>
	}

	if (n == 0) {
    192a:	f1bc 0f00 	cmp.w	ip, #0
    192e:	d017      	beq.n	1960 <base64_decode+0xb0>

	/* The following expression is to calculate the following formula
	 * without risk of integer overflow in n:
	 *	   n = ( ( n * 6 ) + 7 ) >> 3;
	 */
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1930:	ea4f 06dc 	mov.w	r6, ip, lsr #3
    1934:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    1938:	0075      	lsls	r5, r6, #1
    193a:	f00c 0c07 	and.w	ip, ip, #7
    193e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    1942:	ea4f 064c 	mov.w	r6, ip, lsl #1
    1946:	3607      	adds	r6, #7
    1948:	eb05 05d6 	add.w	r5, r5, r6, lsr #3
	n -= j;
    194c:	eba5 050e 	sub.w	r5, r5, lr

	if (dst == NULL || dlen < n) {
    1950:	b148      	cbz	r0, 1966 <base64_decode+0xb6>
    1952:	428d      	cmp	r5, r1
    1954:	d807      	bhi.n	1966 <base64_decode+0xb6>
		*olen = n;
		return -ENOMEM;
	}

	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1956:	4684      	mov	ip, r0
    1958:	2700      	movs	r7, #0
    195a:	2603      	movs	r6, #3
    195c:	463d      	mov	r5, r7
    195e:	e009      	b.n	1974 <base64_decode+0xc4>
		*olen = 0;
    1960:	2000      	movs	r0, #0
    1962:	6010      	str	r0, [r2, #0]
		return 0;
    1964:	e037      	b.n	19d6 <base64_decode+0x126>
		*olen = n;
    1966:	6015      	str	r5, [r2, #0]
		return -ENOMEM;
    1968:	f06f 000b 	mvn.w	r0, #11
    196c:	e033      	b.n	19d6 <base64_decode+0x126>

		j -= (base64_dec_map[*src] == 64U);
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);

		if (++n == 4) {
			n = 0;
    196e:	2500      	movs	r5, #0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1970:	3c01      	subs	r4, #1
    1972:	3301      	adds	r3, #1
    1974:	b35c      	cbz	r4, 19ce <base64_decode+0x11e>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1976:	7819      	ldrb	r1, [r3, #0]
    1978:	290d      	cmp	r1, #13
    197a:	d0f9      	beq.n	1970 <base64_decode+0xc0>
    197c:	290a      	cmp	r1, #10
    197e:	d0f7      	beq.n	1970 <base64_decode+0xc0>
    1980:	2920      	cmp	r1, #32
    1982:	d0f5      	beq.n	1970 <base64_decode+0xc0>
		j -= (base64_dec_map[*src] == 64U);
    1984:	f8df e068 	ldr.w	lr, [pc, #104]	; 19f0 <base64_decode+0x140>
    1988:	f81e 1001 	ldrb.w	r1, [lr, r1]
    198c:	2940      	cmp	r1, #64	; 0x40
    198e:	bf08      	it	eq
    1990:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1992:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    1996:	ea41 1787 	orr.w	r7, r1, r7, lsl #6
		if (++n == 4) {
    199a:	3501      	adds	r5, #1
    199c:	2d04      	cmp	r5, #4
    199e:	d1e7      	bne.n	1970 <base64_decode+0xc0>
			if (j > 0) {
    19a0:	b12e      	cbz	r6, 19ae <base64_decode+0xfe>
				*p++ = (unsigned char)(x >> 16);
    19a2:	f3c7 4107 	ubfx	r1, r7, #16, #8
    19a6:	f88c 1000 	strb.w	r1, [ip]
    19aa:	f10c 0c01 	add.w	ip, ip, #1
			}
			if (j > 1) {
    19ae:	2e01      	cmp	r6, #1
    19b0:	d905      	bls.n	19be <base64_decode+0x10e>
				*p++ = (unsigned char)(x >> 8);
    19b2:	f3c7 2107 	ubfx	r1, r7, #8, #8
    19b6:	f88c 1000 	strb.w	r1, [ip]
    19ba:	f10c 0c01 	add.w	ip, ip, #1
			}
			if (j > 2) {
    19be:	2e02      	cmp	r6, #2
    19c0:	d9d5      	bls.n	196e <base64_decode+0xbe>
				*p++ = (unsigned char)(x);
    19c2:	f88c 7000 	strb.w	r7, [ip]
    19c6:	f10c 0c01 	add.w	ip, ip, #1
			n = 0;
    19ca:	2500      	movs	r5, #0
    19cc:	e7d0      	b.n	1970 <base64_decode+0xc0>
			}
		}
	}

	*olen = p - dst;
    19ce:	ebac 0000 	sub.w	r0, ip, r0
    19d2:	6010      	str	r0, [r2, #0]

	return 0;
    19d4:	2000      	movs	r0, #0
}
    19d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
    19d8:	f06f 0015 	mvn.w	r0, #21
    19dc:	e7fb      	b.n	19d6 <base64_decode+0x126>
			return -EINVAL;
    19de:	f06f 0015 	mvn.w	r0, #21
    19e2:	e7f8      	b.n	19d6 <base64_decode+0x126>
    19e4:	f06f 0015 	mvn.w	r0, #21
    19e8:	e7f5      	b.n	19d6 <base64_decode+0x126>
			return -EINVAL;
    19ea:	f06f 0015 	mvn.w	r0, #21
    19ee:	e7f2      	b.n	19d6 <base64_decode+0x126>
    19f0:	00009b84 	.word	0x00009b84

000019f4 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    19f4:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    19f6:	680b      	ldr	r3, [r1, #0]
    19f8:	3301      	adds	r3, #1
    19fa:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    19fc:	4b01      	ldr	r3, [pc, #4]	; (1a04 <char_out+0x10>)
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	4798      	blx	r3
}
    1a02:	bd08      	pop	{r3, pc}
    1a04:	20007028 	.word	0x20007028

00001a08 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a0c:	4681      	mov	r9, r0
    1a0e:	468a      	mov	sl, r1
    1a10:	4615      	mov	r5, r2
    1a12:	469b      	mov	fp, r3
	if (sizeof(long) == 8) {
		pos *= 10000000000;
	}

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a16:	2b00      	cmp	r3, #0
    1a18:	dd2d      	ble.n	1a76 <_printk_dec_ulong+0x6e>
		min_width = 1;
    1a1a:	2701      	movs	r7, #1
    1a1c:	260a      	movs	r6, #10
    1a1e:	f04f 0800 	mov.w	r8, #0
    1a22:	4c20      	ldr	r4, [pc, #128]	; (1aa4 <_printk_dec_ulong+0x9c>)
    1a24:	e010      	b.n	1a48 <_printk_dec_ulong+0x40>
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    1a26:	fbb5 f0f4 	udiv	r0, r5, r4
    1a2a:	4651      	mov	r1, sl
    1a2c:	3030      	adds	r0, #48	; 0x30
    1a2e:	47c8      	blx	r9
			digits++;
    1a30:	3701      	adds	r7, #1
			found_largest_digit = 1;
    1a32:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1a36:	3e01      	subs	r6, #1
		remainder %= pos;
    1a38:	fbb5 f3f4 	udiv	r3, r5, r4
    1a3c:	fb04 5513 	mls	r5, r4, r3, r5
		pos /= 10;
    1a40:	4b19      	ldr	r3, [pc, #100]	; (1aa8 <_printk_dec_ulong+0xa0>)
    1a42:	fba3 3404 	umull	r3, r4, r3, r4
    1a46:	08e4      	lsrs	r4, r4, #3
	while (pos >= 10) {
    1a48:	2c09      	cmp	r4, #9
    1a4a:	d917      	bls.n	1a7c <_printk_dec_ulong+0x74>
		if (found_largest_digit != 0 || remainder >= pos) {
    1a4c:	f1b8 0f00 	cmp.w	r8, #0
    1a50:	d1e9      	bne.n	1a26 <_printk_dec_ulong+0x1e>
    1a52:	42ac      	cmp	r4, r5
    1a54:	d9e7      	bls.n	1a26 <_printk_dec_ulong+0x1e>
		} else if (remaining <= min_width
    1a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a58:	429e      	cmp	r6, r3
    1a5a:	dcec      	bgt.n	1a36 <_printk_dec_ulong+0x2e>
				&& padding < PAD_SPACE_AFTER) {
    1a5c:	f1bb 0f02 	cmp.w	fp, #2
    1a60:	d8e9      	bhi.n	1a36 <_printk_dec_ulong+0x2e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1a62:	f1bb 0f01 	cmp.w	fp, #1
    1a66:	d004      	beq.n	1a72 <_printk_dec_ulong+0x6a>
    1a68:	2020      	movs	r0, #32
    1a6a:	4651      	mov	r1, sl
    1a6c:	47c8      	blx	r9
			digits++;
    1a6e:	3701      	adds	r7, #1
    1a70:	e7e1      	b.n	1a36 <_printk_dec_ulong+0x2e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1a72:	2030      	movs	r0, #48	; 0x30
    1a74:	e7f9      	b.n	1a6a <_printk_dec_ulong+0x62>
		min_width = 1;
    1a76:	2301      	movs	r3, #1
    1a78:	930a      	str	r3, [sp, #40]	; 0x28
    1a7a:	e7ce      	b.n	1a1a <_printk_dec_ulong+0x12>
	}
	out((int)(remainder + 48), ctx);
    1a7c:	4651      	mov	r1, sl
    1a7e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1a82:	47c8      	blx	r9

	if (padding == PAD_SPACE_AFTER) {
    1a84:	f1bb 0f03 	cmp.w	fp, #3
    1a88:	d001      	beq.n	1a8e <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    1a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    1a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a90:	1bdf      	subs	r7, r3, r7
		while (remaining-- > 0) {
    1a92:	e003      	b.n	1a9c <_printk_dec_ulong+0x94>
			out(' ', ctx);
    1a94:	4651      	mov	r1, sl
    1a96:	2020      	movs	r0, #32
    1a98:	47c8      	blx	r9
		while (remaining-- > 0) {
    1a9a:	4627      	mov	r7, r4
    1a9c:	1e7c      	subs	r4, r7, #1
    1a9e:	2f00      	cmp	r7, #0
    1aa0:	dcf8      	bgt.n	1a94 <_printk_dec_ulong+0x8c>
    1aa2:	e7f2      	b.n	1a8a <_printk_dec_ulong+0x82>
    1aa4:	3b9aca00 	.word	0x3b9aca00
    1aa8:	cccccccd 	.word	0xcccccccd

00001aac <vprintk>:
{
    1aac:	b510      	push	{r4, lr}
    1aae:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    1ab0:	ac02      	add	r4, sp, #8
    1ab2:	2300      	movs	r3, #0
    1ab4:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    1ab8:	460b      	mov	r3, r1
    1aba:	4602      	mov	r2, r0
    1abc:	4621      	mov	r1, r4
    1abe:	4802      	ldr	r0, [pc, #8]	; (1ac8 <vprintk+0x1c>)
    1ac0:	f004 f8ff 	bl	5cc2 <z_vprintk>
}
    1ac4:	b002      	add	sp, #8
    1ac6:	bd10      	pop	{r4, pc}
    1ac8:	000019f5 	.word	0x000019f5

00001acc <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1acc:	f04f 0220 	mov.w	r2, #32
    1ad0:	f3ef 8311 	mrs	r3, BASEPRI
    1ad4:	f382 8811 	msr	BASEPRI, r2
    1ad8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1adc:	4a04      	ldr	r2, [pc, #16]	; (1af0 <nordicsemi_nrf91_init+0x24>)
    1ade:	2101      	movs	r1, #1
    1ae0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1ae4:	f383 8811 	msr	BASEPRI, r3
    1ae8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1aec:	2000      	movs	r0, #0
    1aee:	4770      	bx	lr
    1af0:	50039000 	.word	0x50039000

00001af4 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
    1af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1af8:	b083      	sub	sp, #12
    1afa:	4680      	mov	r8, r0
    1afc:	460f      	mov	r7, r1
    1afe:	4616      	mov	r6, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
    1b00:	4b11      	ldr	r3, [pc, #68]	; (1b48 <log_generic+0x54>)
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	4798      	blx	r3
    1b06:	4681      	mov	r9, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    1b08:	2400      	movs	r4, #0
    1b0a:	e000      	b.n	1b0e <log_generic+0x1a>
    1b0c:	3401      	adds	r4, #1
    1b0e:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <log_generic+0x58>)
    1b10:	4a0f      	ldr	r2, [pc, #60]	; (1b50 <log_generic+0x5c>)
    1b12:	1a9b      	subs	r3, r3, r2
    1b14:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1b18:	da12      	bge.n	1b40 <log_generic+0x4c>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(u32_t idx)
{
	return &__log_backends_start[idx];
    1b1a:	480d      	ldr	r0, [pc, #52]	; (1b50 <log_generic+0x5c>)
    1b1c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1b20:	6843      	ldr	r3, [r0, #4]
    1b22:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    1b24:	2b00      	cmp	r3, #0
    1b26:	d0f1      	beq.n	1b0c <log_generic+0x18>
	if (backend->api->put_sync_string) {
    1b28:	0123      	lsls	r3, r4, #4
    1b2a:	4a09      	ldr	r2, [pc, #36]	; (1b50 <log_generic+0x5c>)
    1b2c:	58d3      	ldr	r3, [r2, r3]
    1b2e:	685d      	ldr	r5, [r3, #4]
    1b30:	2d00      	cmp	r5, #0
    1b32:	d0eb      	beq.n	1b0c <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    1b34:	9600      	str	r6, [sp, #0]
    1b36:	463b      	mov	r3, r7
    1b38:	464a      	mov	r2, r9
    1b3a:	4641      	mov	r1, r8
    1b3c:	47a8      	blx	r5
    1b3e:	e7e5      	b.n	1b0c <log_generic+0x18>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
    1b40:	b003      	add	sp, #12
    1b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b46:	bf00      	nop
    1b48:	2000702c 	.word	0x2000702c
    1b4c:	00009618 	.word	0x00009618
    1b50:	00009618 	.word	0x00009618

00001b54 <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    1b54:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    1b56:	4b04      	ldr	r3, [pc, #16]	; (1b68 <log_core_init+0x14>)
    1b58:	4a04      	ldr	r2, [pc, #16]	; (1b6c <log_core_init+0x18>)
    1b5a:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    1b5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1b60:	f000 f87a 	bl	1c58 <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    1b64:	bd08      	pop	{r3, pc}
    1b66:	bf00      	nop
    1b68:	2000702c 	.word	0x2000702c
    1b6c:	0000602d 	.word	0x0000602d

00001b70 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
    1b70:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1b72:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <log_backend_enable+0x30>)
    1b74:	1ac3      	subs	r3, r0, r3
    1b76:	111b      	asrs	r3, r3, #4
    1b78:	3301      	adds	r3, #1
	backend->cb->id = id;
    1b7a:	6842      	ldr	r2, [r0, #4]
    1b7c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1b7e:	6843      	ldr	r3, [r0, #4]
    1b80:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1b82:	6843      	ldr	r3, [r0, #4]
    1b84:	2201      	movs	r2, #1
    1b86:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    1b88:	4b06      	ldr	r3, [pc, #24]	; (1ba4 <log_backend_enable+0x34>)
    1b8a:	781b      	ldrb	r3, [r3, #0]
    1b8c:	b11b      	cbz	r3, 1b96 <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <log_backend_enable+0x34>)
    1b90:	2201      	movs	r2, #1
    1b92:	701a      	strb	r2, [r3, #0]
}
    1b94:	bd08      	pop	{r3, pc}
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1b96:	4804      	ldr	r0, [pc, #16]	; (1ba8 <log_backend_enable+0x38>)
    1b98:	f003 f9c8 	bl	4f2c <z_impl_k_sem_give>
    1b9c:	e7f7      	b.n	1b8e <log_backend_enable+0x1e>
    1b9e:	bf00      	nop
    1ba0:	00009618 	.word	0x00009618
    1ba4:	20004022 	.word	0x20004022
    1ba8:	2000710c 	.word	0x2000710c

00001bac <log_init>:
{
    1bac:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1bae:	4b13      	ldr	r3, [pc, #76]	; (1bfc <log_init+0x50>)
    1bb0:	e8d3 2fef 	ldaex	r2, [r3]
    1bb4:	1c51      	adds	r1, r2, #1
    1bb6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1bba:	2800      	cmp	r0, #0
    1bbc:	d1f8      	bne.n	1bb0 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1bbe:	b9da      	cbnz	r2, 1bf8 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    1bc0:	2400      	movs	r4, #0
    1bc2:	e005      	b.n	1bd0 <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1bc4:	2204      	movs	r2, #4
    1bc6:	2100      	movs	r1, #0
    1bc8:	4628      	mov	r0, r5
    1bca:	f7ff ffd1 	bl	1b70 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1bce:	3401      	adds	r4, #1
    1bd0:	4b0b      	ldr	r3, [pc, #44]	; (1c00 <log_init+0x54>)
    1bd2:	4a0c      	ldr	r2, [pc, #48]	; (1c04 <log_init+0x58>)
    1bd4:	1a9b      	subs	r3, r3, r2
    1bd6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1bda:	da0d      	bge.n	1bf8 <log_init+0x4c>
	return &__log_backends_start[idx];
    1bdc:	4d09      	ldr	r5, [pc, #36]	; (1c04 <log_init+0x58>)
    1bde:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1be2:	7b2b      	ldrb	r3, [r5, #12]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d0f2      	beq.n	1bce <log_init+0x22>
			if (backend->api->init != NULL) {
    1be8:	0123      	lsls	r3, r4, #4
    1bea:	4a06      	ldr	r2, [pc, #24]	; (1c04 <log_init+0x58>)
    1bec:	58d3      	ldr	r3, [r2, r3]
    1bee:	695b      	ldr	r3, [r3, #20]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d0e7      	beq.n	1bc4 <log_init+0x18>
				backend->api->init();
    1bf4:	4798      	blx	r3
    1bf6:	e7e5      	b.n	1bc4 <log_init+0x18>
}
    1bf8:	bd38      	pop	{r3, r4, r5, pc}
    1bfa:	bf00      	nop
    1bfc:	20003578 	.word	0x20003578
    1c00:	00009618 	.word	0x00009618
    1c04:	00009618 	.word	0x00009618

00001c08 <z_impl_log_panic>:
	if (panic_mode) {
    1c08:	4b10      	ldr	r3, [pc, #64]	; (1c4c <z_impl_log_panic+0x44>)
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	b103      	cbz	r3, 1c10 <z_impl_log_panic+0x8>
    1c0e:	4770      	bx	lr
{
    1c10:	b510      	push	{r4, lr}
	log_init();
    1c12:	f7ff ffcb 	bl	1bac <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1c16:	2400      	movs	r4, #0
    1c18:	e000      	b.n	1c1c <z_impl_log_panic+0x14>
    1c1a:	3401      	adds	r4, #1
    1c1c:	4b0c      	ldr	r3, [pc, #48]	; (1c50 <z_impl_log_panic+0x48>)
    1c1e:	4a0d      	ldr	r2, [pc, #52]	; (1c54 <z_impl_log_panic+0x4c>)
    1c20:	1a9b      	subs	r3, r3, r2
    1c22:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1c26:	da0c      	bge.n	1c42 <z_impl_log_panic+0x3a>
    1c28:	480a      	ldr	r0, [pc, #40]	; (1c54 <z_impl_log_panic+0x4c>)
    1c2a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1c2e:	6843      	ldr	r3, [r0, #4]
    1c30:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1c32:	2b00      	cmp	r3, #0
    1c34:	d0f1      	beq.n	1c1a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1c36:	0123      	lsls	r3, r4, #4
    1c38:	4a06      	ldr	r2, [pc, #24]	; (1c54 <z_impl_log_panic+0x4c>)
    1c3a:	58d3      	ldr	r3, [r2, r3]
    1c3c:	691b      	ldr	r3, [r3, #16]
    1c3e:	4798      	blx	r3
    1c40:	e7eb      	b.n	1c1a <z_impl_log_panic+0x12>
	panic_mode = true;
    1c42:	4b02      	ldr	r3, [pc, #8]	; (1c4c <z_impl_log_panic+0x44>)
    1c44:	2201      	movs	r2, #1
    1c46:	701a      	strb	r2, [r3, #0]
}
    1c48:	bd10      	pop	{r4, pc}
    1c4a:	bf00      	nop
    1c4c:	20004023 	.word	0x20004023
    1c50:	00009618 	.word	0x00009618
    1c54:	00009618 	.word	0x00009618

00001c58 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1c58:	4b07      	ldr	r3, [pc, #28]	; (1c78 <log_output_timestamp_freq_set+0x20>)
    1c5a:	2201      	movs	r2, #1
    1c5c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1c5e:	e004      	b.n	1c6a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    1c60:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c62:	4a05      	ldr	r2, [pc, #20]	; (1c78 <log_output_timestamp_freq_set+0x20>)
    1c64:	6813      	ldr	r3, [r2, #0]
    1c66:	005b      	lsls	r3, r3, #1
    1c68:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1c6a:	4b04      	ldr	r3, [pc, #16]	; (1c7c <log_output_timestamp_freq_set+0x24>)
    1c6c:	4298      	cmp	r0, r3
    1c6e:	d8f7      	bhi.n	1c60 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    1c70:	4b03      	ldr	r3, [pc, #12]	; (1c80 <log_output_timestamp_freq_set+0x28>)
    1c72:	6018      	str	r0, [r3, #0]
}
    1c74:	4770      	bx	lr
    1c76:	bf00      	nop
    1c78:	20003580 	.word	0x20003580
    1c7c:	000f4240 	.word	0x000f4240
    1c80:	2000357c 	.word	0x2000357c

00001c84 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    1c84:	b410      	push	{r4}
    1c86:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    1c88:	2200      	movs	r2, #0
    1c8a:	4b08      	ldr	r3, [pc, #32]	; (1cac <get_flash_area_from_id+0x28>)
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	4293      	cmp	r3, r2
    1c90:	dd08      	ble.n	1ca4 <get_flash_area_from_id+0x20>
		if (flash_map[i].fa_id == idx) {
    1c92:	0113      	lsls	r3, r2, #4
    1c94:	4906      	ldr	r1, [pc, #24]	; (1cb0 <get_flash_area_from_id+0x2c>)
    1c96:	6809      	ldr	r1, [r1, #0]
    1c98:	18c8      	adds	r0, r1, r3
    1c9a:	5ccb      	ldrb	r3, [r1, r3]
    1c9c:	42a3      	cmp	r3, r4
    1c9e:	d002      	beq.n	1ca6 <get_flash_area_from_id+0x22>
	for (int i = 0; i < flash_map_entries; i++) {
    1ca0:	3201      	adds	r2, #1
    1ca2:	e7f2      	b.n	1c8a <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    1ca4:	2000      	movs	r0, #0
}
    1ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1caa:	4770      	bx	lr
    1cac:	00009d10 	.word	0x00009d10
    1cb0:	20007030 	.word	0x20007030

00001cb4 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1cb4:	4b08      	ldr	r3, [pc, #32]	; (1cd8 <flash_area_open+0x24>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	b13b      	cbz	r3, 1cca <flash_area_open+0x16>
{
    1cba:	b510      	push	{r4, lr}
    1cbc:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1cbe:	f7ff ffe1 	bl	1c84 <get_flash_area_from_id>
	if (area == NULL) {
    1cc2:	b128      	cbz	r0, 1cd0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1cc4:	6020      	str	r0, [r4, #0]
	return 0;
    1cc6:	2000      	movs	r0, #0
}
    1cc8:	bd10      	pop	{r4, pc}
		return -EACCES;
    1cca:	f06f 000c 	mvn.w	r0, #12
}
    1cce:	4770      	bx	lr
		return -ENOENT;
    1cd0:	f06f 0001 	mvn.w	r0, #1
    1cd4:	e7f8      	b.n	1cc8 <flash_area_open+0x14>
    1cd6:	bf00      	nop
    1cd8:	20007030 	.word	0x20007030

00001cdc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1cdc:	b500      	push	{lr}
    1cde:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1ce0:	ab03      	add	r3, sp, #12
    1ce2:	9300      	str	r3, [sp, #0]
    1ce4:	4b02      	ldr	r3, [pc, #8]	; (1cf0 <flash_area_get_sectors+0x14>)
    1ce6:	f004 f9f5 	bl	60d4 <flash_area_layout>
}
    1cea:	b00b      	add	sp, #44	; 0x2c
    1cec:	f85d fb04 	ldr.w	pc, [sp], #4
    1cf0:	00006099 	.word	0x00006099

00001cf4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1cf4:	b508      	push	{r3, lr}
    1cf6:	4604      	mov	r4, r0
	__asm__ volatile(
    1cf8:	f04f 0220 	mov.w	r2, #32
    1cfc:	f3ef 8311 	mrs	r3, BASEPRI
    1d00:	f382 8811 	msr	BASEPRI, r2
    1d04:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1d08:	f004 fb7a 	bl	6400 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1d0c:	4620      	mov	r0, r4
    1d0e:	f001 f8ad 	bl	2e6c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d12:	4803      	ldr	r0, [pc, #12]	; (1d20 <sys_reboot+0x2c>)
    1d14:	f004 f975 	bl	6002 <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    1d18:	f000 ff58 	bl	2bcc <z_arch_cpu_idle>
    1d1c:	e7fc      	b.n	1d18 <sys_reboot+0x24>
    1d1e:	bf00      	nop
    1d20:	00009d14 	.word	0x00009d14

00001d24 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1d24:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
    1d26:	2101      	movs	r1, #1
    1d28:	f44f 7080 	mov.w	r0, #256	; 0x100
    1d2c:	f004 fa7e 	bl	622c <clock_event_check_and_clean>
    1d30:	b118      	cbz	r0, 1d3a <nrf_power_clock_isr+0x16>
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    1d32:	4b09      	ldr	r3, [pc, #36]	; (1d58 <nrf_power_clock_isr+0x34>)
    1d34:	689b      	ldr	r3, [r3, #8]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1d36:	7a5b      	ldrb	r3, [r3, #9]
    1d38:	b133      	cbz	r3, 1d48 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
		}
	}

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_LFCLKSTARTED,
    1d3a:	2102      	movs	r1, #2
    1d3c:	f44f 7082 	mov.w	r0, #260	; 0x104
    1d40:	f004 fa74 	bl	622c <clock_event_check_and_clean>
    1d44:	b920      	cbnz	r0, 1d50 <nrf_power_clock_isr+0x2c>
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1d46:	bd08      	pop	{r3, pc}
			clkstarted_handle(hfclk_dev);
    1d48:	4803      	ldr	r0, [pc, #12]	; (1d58 <nrf_power_clock_isr+0x34>)
    1d4a:	f004 fb24 	bl	6396 <clkstarted_handle>
    1d4e:	e7f4      	b.n	1d3a <nrf_power_clock_isr+0x16>
		clkstarted_handle(lfclk_dev);
    1d50:	4802      	ldr	r0, [pc, #8]	; (1d5c <nrf_power_clock_isr+0x38>)
    1d52:	f004 fb20 	bl	6396 <clkstarted_handle>
}
    1d56:	e7f6      	b.n	1d46 <nrf_power_clock_isr+0x22>
    1d58:	200070ac 	.word	0x200070ac
    1d5c:	200070b8 	.word	0x200070b8

00001d60 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1d60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1d64:	4b01      	ldr	r3, [pc, #4]	; (1d6c <set_comparator+0xc>)
    1d66:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    1d6a:	4770      	bx	lr
    1d6c:	50015000 	.word	0x50015000

00001d70 <counter>:
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    1d70:	4b01      	ldr	r3, [pc, #4]	; (1d78 <counter+0x8>)
    1d72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static u32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    1d76:	4770      	bx	lr
    1d78:	50015000 	.word	0x50015000

00001d7c <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1d7e:	4b0e      	ldr	r3, [pc, #56]	; (1db8 <rtc1_nrf_isr+0x3c>)
    1d80:	2200      	movs	r2, #0
    1d82:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    1d86:	f04f 0320 	mov.w	r3, #32
    1d8a:	f3ef 8611 	mrs	r6, BASEPRI
    1d8e:	f383 8811 	msr	BASEPRI, r3
    1d92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
    1d96:	f7ff ffeb 	bl	1d70 <counter>
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1d9a:	4d08      	ldr	r5, [pc, #32]	; (1dbc <rtc1_nrf_isr+0x40>)
    1d9c:	682c      	ldr	r4, [r5, #0]
    1d9e:	4621      	mov	r1, r4
    1da0:	f004 fb2f 	bl	6402 <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    1da4:	4404      	add	r4, r0
    1da6:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
    1da8:	f386 8811 	msr	BASEPRI, r6
    1dac:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1db0:	f003 f8f0 	bl	4f94 <z_clock_announce>
}
    1db4:	bd70      	pop	{r4, r5, r6, pc}
    1db6:	bf00      	nop
    1db8:	50015000 	.word	0x50015000
    1dbc:	2000359c 	.word	0x2000359c

00001dc0 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
    1dc2:	4817      	ldr	r0, [pc, #92]	; (1e20 <z_clock_driver_init+0x60>)
    1dc4:	f002 ff1a 	bl	4bfc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    1dc8:	b338      	cbz	r0, 1e1a <z_clock_driver_init+0x5a>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
    1dca:	6842      	ldr	r2, [r0, #4]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1dcc:	6812      	ldr	r2, [r2, #0]
    1dce:	2100      	movs	r1, #0
    1dd0:	4790      	blx	r2
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1dd2:	4d14      	ldr	r5, [pc, #80]	; (1e24 <z_clock_driver_init+0x64>)
    1dd4:	2400      	movs	r4, #0
    1dd6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1dda:	2601      	movs	r6, #1
    1ddc:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    1de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1de4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1de8:	4b0f      	ldr	r3, [pc, #60]	; (1e28 <z_clock_driver_init+0x68>)
    1dea:	601c      	str	r4, [r3, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dec:	4b0f      	ldr	r3, [pc, #60]	; (1e2c <z_clock_driver_init+0x6c>)
    1dee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1df2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1df6:	4622      	mov	r2, r4
    1df8:	4631      	mov	r1, r6
    1dfa:	2015      	movs	r0, #21
    1dfc:	f000 ff42 	bl	2c84 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1e00:	2015      	movs	r0, #21
    1e02:	f000 ff2f 	bl	2c64 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e06:	4b0a      	ldr	r3, [pc, #40]	; (1e30 <z_clock_driver_init+0x70>)
    1e08:	601e      	str	r6, [r3, #0]
    1e0a:	602e      	str	r6, [r5, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    1e0c:	f7ff ffb0 	bl	1d70 <counter>
    1e10:	4430      	add	r0, r6
    1e12:	f7ff ffa5 	bl	1d60 <set_comparator>
	}

	return 0;
    1e16:	4620      	mov	r0, r4
}
    1e18:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e1a:	f04f 30ff 	mov.w	r0, #4294967295
    1e1e:	e7fb      	b.n	1e18 <z_clock_driver_init+0x58>
    1e20:	00009d6c 	.word	0x00009d6c
    1e24:	50015000 	.word	0x50015000
    1e28:	50015140 	.word	0x50015140
    1e2c:	e000e100 	.word	0xe000e100
    1e30:	50015008 	.word	0x50015008

00001e34 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1e36:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e3a:	d035      	beq.n	1ea8 <z_clock_set_timeout+0x74>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1e3c:	1e44      	subs	r4, r0, #1
    1e3e:	4b23      	ldr	r3, [pc, #140]	; (1ecc <z_clock_set_timeout+0x98>)
    1e40:	429c      	cmp	r4, r3
    1e42:	dc01      	bgt.n	1e48 <z_clock_set_timeout+0x14>
    1e44:	2c00      	cmp	r4, #0
    1e46:	dd31      	ble.n	1eac <z_clock_set_timeout+0x78>
    1e48:	4b20      	ldr	r3, [pc, #128]	; (1ecc <z_clock_set_timeout+0x98>)
    1e4a:	429c      	cmp	r4, r3
    1e4c:	dd00      	ble.n	1e50 <z_clock_set_timeout+0x1c>
    1e4e:	4c20      	ldr	r4, [pc, #128]	; (1ed0 <z_clock_set_timeout+0x9c>)
	__asm__ volatile(
    1e50:	f04f 0320 	mov.w	r3, #32
    1e54:	f3ef 8611 	mrs	r6, BASEPRI
    1e58:	f383 8811 	msr	BASEPRI, r3
    1e5c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
    1e60:	f7ff ff86 	bl	1d70 <counter>
    1e64:	4607      	mov	r7, r0
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    1e66:	4b1b      	ldr	r3, [pc, #108]	; (1ed4 <z_clock_set_timeout+0xa0>)
    1e68:	681d      	ldr	r5, [r3, #0]
    1e6a:	4629      	mov	r1, r5
    1e6c:	f004 fac9 	bl	6402 <counter_sub>
    1e70:	4420      	add	r0, r4
    1e72:	3001      	adds	r0, #1
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    1e74:	4405      	add	r5, r0
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    1e76:	4639      	mov	r1, r7
    1e78:	4628      	mov	r0, r5
    1e7a:	f004 fac2 	bl	6402 <counter_sub>
    1e7e:	2802      	cmp	r0, #2
    1e80:	d816      	bhi.n	1eb0 <z_clock_set_timeout+0x7c>
		set_comparator(cyc);
	} else {
		set_comparator(cyc);
    1e82:	4628      	mov	r0, r5
    1e84:	f7ff ff6c 	bl	1d60 <set_comparator>
		dt = counter_sub(cyc, counter());
    1e88:	f7ff ff72 	bl	1d70 <counter>
    1e8c:	4601      	mov	r1, r0
    1e8e:	4628      	mov	r0, r5
    1e90:	f004 fab7 	bl	6402 <counter_sub>
		if (dt == 0 || dt > 0x7fffff) {
    1e94:	1e42      	subs	r2, r0, #1
    1e96:	4b10      	ldr	r3, [pc, #64]	; (1ed8 <z_clock_set_timeout+0xa4>)
    1e98:	429a      	cmp	r2, r3
    1e9a:	d811      	bhi.n	1ec0 <z_clock_set_timeout+0x8c>
			/* Missed it! */
			NVIC_SetPendingIRQ(RTC1_IRQn);
			if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS)) {
				zli_fixup = false;
			}
		} else if (dt == 1) {
    1e9c:	2801      	cmp	r0, #1
    1e9e:	d10a      	bne.n	1eb6 <z_clock_set_timeout+0x82>
			/* Too soon, interrupt won't arrive. */
			set_comparator(cyc + 2);
    1ea0:	1ca8      	adds	r0, r5, #2
    1ea2:	f7ff ff5d 	bl	1d60 <set_comparator>
    1ea6:	e006      	b.n	1eb6 <z_clock_set_timeout+0x82>
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1ea8:	4809      	ldr	r0, [pc, #36]	; (1ed0 <z_clock_set_timeout+0x9c>)
    1eaa:	e7c7      	b.n	1e3c <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1eac:	2400      	movs	r4, #0
    1eae:	e7cf      	b.n	1e50 <z_clock_set_timeout+0x1c>
		set_comparator(cyc);
    1eb0:	4628      	mov	r0, r5
    1eb2:	f7ff ff55 	bl	1d60 <set_comparator>
	__asm__ volatile(
    1eb6:	f386 8811 	msr	BASEPRI, r6
    1eba:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    1ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ec0:	4b06      	ldr	r3, [pc, #24]	; (1edc <z_clock_set_timeout+0xa8>)
    1ec2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1ec6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1eca:	e7f4      	b.n	1eb6 <z_clock_set_timeout+0x82>
    1ecc:	00fffffd 	.word	0x00fffffd
    1ed0:	00fffffe 	.word	0x00fffffe
    1ed4:	2000359c 	.word	0x2000359c
    1ed8:	007ffffe 	.word	0x007ffffe
    1edc:	e000e100 	.word	0xe000e100

00001ee0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    1ee0:	b510      	push	{r4, lr}
	__asm__ volatile(
    1ee2:	f04f 0320 	mov.w	r3, #32
    1ee6:	f3ef 8411 	mrs	r4, BASEPRI
    1eea:	f383 8811 	msr	BASEPRI, r3
    1eee:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1ef2:	f7ff ff3d 	bl	1d70 <counter>
    1ef6:	4b04      	ldr	r3, [pc, #16]	; (1f08 <z_clock_elapsed+0x28>)
    1ef8:	6819      	ldr	r1, [r3, #0]
    1efa:	f004 fa82 	bl	6402 <counter_sub>
	__asm__ volatile(
    1efe:	f384 8811 	msr	BASEPRI, r4
    1f02:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f06:	bd10      	pop	{r4, pc}
    1f08:	2000359c 	.word	0x2000359c

00001f0c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    1f0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1f0e:	f04f 0320 	mov.w	r3, #32
    1f12:	f3ef 8511 	mrs	r5, BASEPRI
    1f16:	f383 8811 	msr	BASEPRI, r3
    1f1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1f1e:	f7ff ff27 	bl	1d70 <counter>
    1f22:	4b05      	ldr	r3, [pc, #20]	; (1f38 <z_timer_cycle_get_32+0x2c>)
    1f24:	681c      	ldr	r4, [r3, #0]
    1f26:	4621      	mov	r1, r4
    1f28:	f004 fa6b 	bl	6402 <counter_sub>
    1f2c:	4420      	add	r0, r4
	__asm__ volatile(
    1f2e:	f385 8811 	msr	BASEPRI, r5
    1f32:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f36:	bd38      	pop	{r3, r4, r5, pc}
    1f38:	2000359c 	.word	0x2000359c

00001f3c <boot_uart_fifo_getline>:
	}
}

static int
boot_uart_fifo_getline(char **line)
{
    1f3c:	b410      	push	{r4}
	__asm__ volatile(
    1f3e:	f04f 0320 	mov.w	r3, #32
    1f42:	f3ef 8111 	mrs	r1, BASEPRI
    1f46:	f383 8811 	msr	BASEPRI, r3
    1f4a:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1f4e:	4b19      	ldr	r3, [pc, #100]	; (1fb4 <boot_uart_fifo_getline+0x78>)
    1f50:	681b      	ldr	r3, [r3, #0]
    1f52:	b15b      	cbz	r3, 1f6c <boot_uart_fifo_getline+0x30>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1f54:	4a18      	ldr	r2, [pc, #96]	; (1fb8 <boot_uart_fifo_getline+0x7c>)
    1f56:	6852      	ldr	r2, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1f58:	4293      	cmp	r3, r2
    1f5a:	d007      	beq.n	1f6c <boot_uart_fifo_getline+0x30>
	parent->next = child;
    1f5c:	2200      	movs	r2, #0
    1f5e:	601a      	str	r2, [r3, #0]
	return list->tail;
    1f60:	4a15      	ldr	r2, [pc, #84]	; (1fb8 <boot_uart_fifo_getline+0x7c>)
    1f62:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1f64:	b1ca      	cbz	r2, 1f9a <boot_uart_fifo_getline+0x5e>
	parent->next = child;
    1f66:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1f68:	4a13      	ldr	r2, [pc, #76]	; (1fb8 <boot_uart_fifo_getline+0x7c>)
    1f6a:	6053      	str	r3, [r2, #4]
	return list->head;
    1f6c:	4b13      	ldr	r3, [pc, #76]	; (1fbc <boot_uart_fifo_getline+0x80>)
    1f6e:	681b      	ldr	r3, [r3, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1f70:	b12b      	cbz	r3, 1f7e <boot_uart_fifo_getline+0x42>
	return node->next;
    1f72:	681c      	ldr	r4, [r3, #0]
	list->head = node;
    1f74:	4a11      	ldr	r2, [pc, #68]	; (1fbc <boot_uart_fifo_getline+0x80>)
    1f76:	6014      	str	r4, [r2, #0]
	return list->tail;
    1f78:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f7a:	4293      	cmp	r3, r2
    1f7c:	d011      	beq.n	1fa2 <boot_uart_fifo_getline+0x66>
	__asm__ volatile(
    1f7e:	f381 8811 	msr	BASEPRI, r1
    1f82:	f3bf 8f6f 	isb	sy
	}

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
    1f86:	b17b      	cbz	r3, 1fa8 <boot_uart_fifo_getline+0x6c>
		*line = NULL;

		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
    1f88:	4a0a      	ldr	r2, [pc, #40]	; (1fb4 <boot_uart_fifo_getline+0x78>)
    1f8a:	6013      	str	r3, [r2, #0]
	*line = cmd->line;
    1f8c:	f103 0208 	add.w	r2, r3, #8
    1f90:	6002      	str	r2, [r0, #0]
	return cmd->len;
    1f92:	6858      	ldr	r0, [r3, #4]
}
    1f94:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f98:	4770      	bx	lr
	list->tail = node;
    1f9a:	4a07      	ldr	r2, [pc, #28]	; (1fb8 <boot_uart_fifo_getline+0x7c>)
    1f9c:	6053      	str	r3, [r2, #4]
	list->head = node;
    1f9e:	6013      	str	r3, [r2, #0]
    1fa0:	e7e4      	b.n	1f6c <boot_uart_fifo_getline+0x30>
	list->tail = node;
    1fa2:	4a06      	ldr	r2, [pc, #24]	; (1fbc <boot_uart_fifo_getline+0x80>)
    1fa4:	6054      	str	r4, [r2, #4]
    1fa6:	e7ea      	b.n	1f7e <boot_uart_fifo_getline+0x42>
		cmd = NULL;
    1fa8:	4a02      	ldr	r2, [pc, #8]	; (1fb4 <boot_uart_fifo_getline+0x78>)
    1faa:	6013      	str	r3, [r2, #0]
		*line = NULL;
    1fac:	6003      	str	r3, [r0, #0]
		return 0;
    1fae:	4618      	mov	r0, r3
    1fb0:	e7f0      	b.n	1f94 <boot_uart_fifo_getline+0x58>
    1fb2:	bf00      	nop
    1fb4:	200035ac 	.word	0x200035ac
    1fb8:	200035a0 	.word	0x200035a0
    1fbc:	200039c0 	.word	0x200039c0

00001fc0 <boot_uart_fifo_callback>:
{
    1fc0:	b500      	push	{lr}
    1fc2:	b083      	sub	sp, #12
	uart_irq_update(uart_dev);
    1fc4:	4b35      	ldr	r3, [pc, #212]	; (209c <boot_uart_fifo_callback+0xdc>)
    1fc6:	6818      	ldr	r0, [r3, #0]
 */
__syscall int uart_irq_update(struct device *dev);

static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
    1fc8:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    1fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1fcc:	b103      	cbz	r3, 1fd0 <boot_uart_fifo_callback+0x10>
		return api->irq_update(dev);
    1fce:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1fd0:	4b32      	ldr	r3, [pc, #200]	; (209c <boot_uart_fifo_callback+0xdc>)
    1fd2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1fd4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1fd8:	b10b      	cbz	r3, 1fde <boot_uart_fifo_callback+0x1e>
		return api->irq_rx_ready(dev);
    1fda:	4798      	blx	r3
    1fdc:	bb38      	cbnz	r0, 202e <boot_uart_fifo_callback+0x6e>
}
    1fde:	b003      	add	sp, #12
    1fe0:	f85d fb04 	ldr.w	pc, [sp], #4
	return list->head;
    1fe4:	4b2e      	ldr	r3, [pc, #184]	; (20a0 <boot_uart_fifo_callback+0xe0>)
    1fe6:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_GET(slist, snode)
    1fe8:	b143      	cbz	r3, 1ffc <boot_uart_fifo_callback+0x3c>
	return node->next;
    1fea:	6819      	ldr	r1, [r3, #0]
	list->head = node;
    1fec:	4a2c      	ldr	r2, [pc, #176]	; (20a0 <boot_uart_fifo_callback+0xe0>)
    1fee:	6011      	str	r1, [r2, #0]
	return list->tail;
    1ff0:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1ff2:	4293      	cmp	r3, r2
    1ff4:	d014      	beq.n	2020 <boot_uart_fifo_callback+0x60>
			cmd = CONTAINER_OF(node, struct line_input, node);
    1ff6:	4a2b      	ldr	r2, [pc, #172]	; (20a4 <boot_uart_fifo_callback+0xe4>)
    1ff8:	6013      	str	r3, [r2, #0]
    1ffa:	e028      	b.n	204e <boot_uart_fifo_callback+0x8e>
				BOOT_LOG_ERR("Not enough memory to store"
    1ffc:	f04f 0000 	mov.w	r0, #0
    2000:	2301      	movs	r3, #1
    2002:	f363 0002 	bfi	r0, r3, #0, #3
    2006:	f36f 00c5 	bfc	r0, #3, #3
    200a:	4b27      	ldr	r3, [pc, #156]	; (20a8 <boot_uart_fifo_callback+0xe8>)
    200c:	4a27      	ldr	r2, [pc, #156]	; (20ac <boot_uart_fifo_callback+0xec>)
    200e:	1a9b      	subs	r3, r3, r2
    2010:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2014:	f363 108f 	bfi	r0, r3, #6, #10
    2018:	4925      	ldr	r1, [pc, #148]	; (20b0 <boot_uart_fifo_callback+0xf0>)
    201a:	f004 f80b 	bl	6034 <log_string_sync>
    201e:	e7de      	b.n	1fde <boot_uart_fifo_callback+0x1e>
	list->tail = node;
    2020:	4a1f      	ldr	r2, [pc, #124]	; (20a0 <boot_uart_fifo_callback+0xe0>)
    2022:	6051      	str	r1, [r2, #4]
    2024:	e7e7      	b.n	1ff6 <boot_uart_fifo_callback+0x36>
		if (byte ==  '\n') {
    2026:	f89d 3007 	ldrb.w	r3, [sp, #7]
    202a:	2b0a      	cmp	r3, #10
    202c:	d01e      	beq.n	206c <boot_uart_fifo_callback+0xac>
		rx = uart_fifo_read(uart_dev, &byte, 1);
    202e:	4b1b      	ldr	r3, [pc, #108]	; (209c <boot_uart_fifo_callback+0xdc>)
    2030:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2032:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    2034:	699b      	ldr	r3, [r3, #24]
    2036:	2b00      	cmp	r3, #0
    2038:	d0d1      	beq.n	1fde <boot_uart_fifo_callback+0x1e>
		return api->fifo_read(dev, rx_data, size);
    203a:	2201      	movs	r2, #1
    203c:	f10d 0107 	add.w	r1, sp, #7
    2040:	4798      	blx	r3
		if (rx != 1) {
    2042:	2801      	cmp	r0, #1
    2044:	d1cb      	bne.n	1fde <boot_uart_fifo_callback+0x1e>
		if (!cmd) {
    2046:	4b17      	ldr	r3, [pc, #92]	; (20a4 <boot_uart_fifo_callback+0xe4>)
    2048:	681b      	ldr	r3, [r3, #0]
    204a:	2b00      	cmp	r3, #0
    204c:	d0ca      	beq.n	1fe4 <boot_uart_fifo_callback+0x24>
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    204e:	4b19      	ldr	r3, [pc, #100]	; (20b4 <boot_uart_fifo_callback+0xf4>)
    2050:	881b      	ldrh	r3, [r3, #0]
    2052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2056:	d2e6      	bcs.n	2026 <boot_uart_fifo_callback+0x66>
			cmd->line[cur++] = byte;
    2058:	4a12      	ldr	r2, [pc, #72]	; (20a4 <boot_uart_fifo_callback+0xe4>)
    205a:	6812      	ldr	r2, [r2, #0]
    205c:	1c58      	adds	r0, r3, #1
    205e:	4915      	ldr	r1, [pc, #84]	; (20b4 <boot_uart_fifo_callback+0xf4>)
    2060:	8008      	strh	r0, [r1, #0]
    2062:	4413      	add	r3, r2
    2064:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2068:	721a      	strb	r2, [r3, #8]
    206a:	e7dc      	b.n	2026 <boot_uart_fifo_callback+0x66>
			cmd->len = cur;
    206c:	4b0d      	ldr	r3, [pc, #52]	; (20a4 <boot_uart_fifo_callback+0xe4>)
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	4a10      	ldr	r2, [pc, #64]	; (20b4 <boot_uart_fifo_callback+0xf4>)
    2072:	8812      	ldrh	r2, [r2, #0]
    2074:	605a      	str	r2, [r3, #4]
	parent->next = child;
    2076:	2200      	movs	r2, #0
    2078:	601a      	str	r2, [r3, #0]
	return list->tail;
    207a:	4a0f      	ldr	r2, [pc, #60]	; (20b8 <boot_uart_fifo_callback+0xf8>)
    207c:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
    207e:	b142      	cbz	r2, 2092 <boot_uart_fifo_callback+0xd2>
	parent->next = child;
    2080:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2082:	4a0d      	ldr	r2, [pc, #52]	; (20b8 <boot_uart_fifo_callback+0xf8>)
    2084:	6053      	str	r3, [r2, #4]
			cur = 0;
    2086:	2300      	movs	r3, #0
    2088:	4a0a      	ldr	r2, [pc, #40]	; (20b4 <boot_uart_fifo_callback+0xf4>)
    208a:	8013      	strh	r3, [r2, #0]
			cmd = NULL;
    208c:	4a05      	ldr	r2, [pc, #20]	; (20a4 <boot_uart_fifo_callback+0xe4>)
    208e:	6013      	str	r3, [r2, #0]
    2090:	e7cd      	b.n	202e <boot_uart_fifo_callback+0x6e>
    2092:	4a09      	ldr	r2, [pc, #36]	; (20b8 <boot_uart_fifo_callback+0xf8>)
    2094:	6053      	str	r3, [r2, #4]
	list->head = node;
    2096:	6013      	str	r3, [r2, #0]
    2098:	e7f5      	b.n	2086 <boot_uart_fifo_callback+0xc6>
    209a:	bf00      	nop
    209c:	200039c8 	.word	0x200039c8
    20a0:	200035a0 	.word	0x200035a0
    20a4:	200035a8 	.word	0x200035a8
    20a8:	00009600 	.word	0x00009600
    20ac:	000095e0 	.word	0x000095e0
    20b0:	00009da0 	.word	0x00009da0
    20b4:	20004020 	.word	0x20004020
    20b8:	200039c0 	.word	0x200039c0

000020bc <boot_uart_fifo_init>:

static int
boot_uart_fifo_init(void)
{
    20bc:	b500      	push	{lr}
    20be:	b083      	sub	sp, #12
    20c0:	4819      	ldr	r0, [pc, #100]	; (2128 <boot_uart_fifo_init+0x6c>)
    20c2:	f002 fd9b 	bl	4bfc <z_impl_device_get_binding>
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = device_get_binding(CONFIG_RECOVERY_UART_DEV_NAME);
    20c6:	4b19      	ldr	r3, [pc, #100]	; (212c <boot_uart_fifo_init+0x70>)
    20c8:	6018      	str	r0, [r3, #0]
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = device_get_binding(CONFIG_USB_CDC_ACM_DEVICE_NAME "_0");
#endif
	u8_t c;

	if (!uart_dev) {
    20ca:	2800      	cmp	r0, #0
    20cc:	d029      	beq.n	2122 <boot_uart_fifo_init+0x66>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    20ce:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    20d0:	b123      	cbz	r3, 20dc <boot_uart_fifo_init+0x20>
    20d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    20d4:	b113      	cbz	r3, 20dc <boot_uart_fifo_init+0x20>
		api->irq_callback_set(dev, cb, user_data);
    20d6:	4602      	mov	r2, r0
    20d8:	4915      	ldr	r1, [pc, #84]	; (2130 <boot_uart_fifo_init+0x74>)
    20da:	4798      	blx	r3
	}

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    20dc:	4b13      	ldr	r3, [pc, #76]	; (212c <boot_uart_fifo_init+0x70>)
    20de:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    20e0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    20e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    20e4:	b163      	cbz	r3, 2100 <boot_uart_fifo_init+0x44>
		return api->irq_rx_ready(dev);
    20e6:	4798      	blx	r3
    20e8:	b150      	cbz	r0, 2100 <boot_uart_fifo_init+0x44>
		while (uart_fifo_read(uart_dev, &c, 1)) {
    20ea:	4b10      	ldr	r3, [pc, #64]	; (212c <boot_uart_fifo_init+0x70>)
    20ec:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    20ee:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    20f0:	699b      	ldr	r3, [r3, #24]
    20f2:	b12b      	cbz	r3, 2100 <boot_uart_fifo_init+0x44>
		return api->fifo_read(dev, rx_data, size);
    20f4:	2201      	movs	r2, #1
    20f6:	f10d 0107 	add.w	r1, sp, #7
    20fa:	4798      	blx	r3
    20fc:	2800      	cmp	r0, #0
    20fe:	d1f4      	bne.n	20ea <boot_uart_fifo_init+0x2e>
			;
		}
	}

	cur = 0;
    2100:	4b0c      	ldr	r3, [pc, #48]	; (2134 <boot_uart_fifo_init+0x78>)
    2102:	2200      	movs	r2, #0
    2104:	801a      	strh	r2, [r3, #0]

	uart_irq_rx_enable(uart_dev);
    2106:	4b09      	ldr	r3, [pc, #36]	; (212c <boot_uart_fifo_init+0x70>)
    2108:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    210a:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    210e:	b103      	cbz	r3, 2112 <boot_uart_fifo_init+0x56>
		api->irq_rx_enable(dev);
    2110:	4798      	blx	r3
    2112:	2000      	movs	r0, #0
    2114:	f380 8811 	msr	BASEPRI, r0
    2118:	f3bf 8f6f 	isb	sy
	 * issue is fixed in upstream Zephyr.
	 */
	irq_unlock(0);

	return 0;
}
    211c:	b003      	add	sp, #12
    211e:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
    2122:	f04f 30ff 	mov.w	r0, #4294967295
    2126:	e7f9      	b.n	211c <boot_uart_fifo_init+0x60>
    2128:	00009dcc 	.word	0x00009dcc
    212c:	200039c8 	.word	0x200039c8
    2130:	00001fc1 	.word	0x00001fc1
    2134:	20004020 	.word	0x20004020

00002138 <console_out>:
{
    2138:	b510      	push	{r4, lr}
    213a:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    213c:	4b03      	ldr	r3, [pc, #12]	; (214c <console_out+0x14>)
    213e:	6818      	ldr	r0, [r3, #0]
    2140:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    2142:	6843      	ldr	r3, [r0, #4]
	api->poll_out(dev, out_char);
    2144:	685b      	ldr	r3, [r3, #4]
    2146:	4798      	blx	r3
}
    2148:	4620      	mov	r0, r4
    214a:	bd10      	pop	{r4, pc}
    214c:	200039c8 	.word	0x200039c8

00002150 <boot_console_init>:
{
    2150:	b510      	push	{r4, lr}
	list->head = NULL;
    2152:	4a10      	ldr	r2, [pc, #64]	; (2194 <boot_console_init+0x44>)
    2154:	2300      	movs	r3, #0
    2156:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
    2158:	6053      	str	r3, [r2, #4]
	list->head = NULL;
    215a:	4a0f      	ldr	r2, [pc, #60]	; (2198 <boot_console_init+0x48>)
    215c:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
    215e:	6053      	str	r3, [r2, #4]
	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    2160:	e003      	b.n	216a <boot_console_init+0x1a>
	list->tail = node;
    2162:	490c      	ldr	r1, [pc, #48]	; (2194 <boot_console_init+0x44>)
    2164:	604a      	str	r2, [r1, #4]
	list->head = node;
    2166:	600a      	str	r2, [r1, #0]
    2168:	3301      	adds	r3, #1
    216a:	2b01      	cmp	r3, #1
    216c:	dc0e      	bgt.n	218c <boot_console_init+0x3c>
		sys_slist_append(&avail_queue, &line_bufs[i].node);
    216e:	480b      	ldr	r0, [pc, #44]	; (219c <boot_console_init+0x4c>)
    2170:	019a      	lsls	r2, r3, #6
    2172:	441a      	add	r2, r3
    2174:	00d1      	lsls	r1, r2, #3
    2176:	1842      	adds	r2, r0, r1
	parent->next = child;
    2178:	2400      	movs	r4, #0
    217a:	5044      	str	r4, [r0, r1]
	return list->tail;
    217c:	4905      	ldr	r1, [pc, #20]	; (2194 <boot_console_init+0x44>)
    217e:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    2180:	2900      	cmp	r1, #0
    2182:	d0ee      	beq.n	2162 <boot_console_init+0x12>
	parent->next = child;
    2184:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2186:	4903      	ldr	r1, [pc, #12]	; (2194 <boot_console_init+0x44>)
    2188:	604a      	str	r2, [r1, #4]
    218a:	e7ed      	b.n	2168 <boot_console_init+0x18>
	return boot_uart_fifo_init();
    218c:	f7ff ff96 	bl	20bc <boot_uart_fifo_init>
}
    2190:	bd10      	pop	{r4, pc}
    2192:	bf00      	nop
    2194:	200035a0 	.word	0x200035a0
    2198:	200039c0 	.word	0x200039c0
    219c:	200035b0 	.word	0x200035b0

000021a0 <u32toa>:
/*
 * Convert version into string without use of snprintf().
 */
static int
u32toa(char *tgt, uint32_t val)
{
    21a0:	b470      	push	{r4, r5, r6}
    char *dst;
    uint32_t d = 1;
    21a2:	2301      	movs	r3, #1
    uint32_t dgt;
    int n = 0;

    dst = tgt;
    while (val / d >= 10) {
    21a4:	e002      	b.n	21ac <u32toa+0xc>
        d *= 10;
    21a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    21aa:	0053      	lsls	r3, r2, #1
    while (val / d >= 10) {
    21ac:	fbb1 f2f3 	udiv	r2, r1, r3
    21b0:	2a09      	cmp	r2, #9
    21b2:	d8f8      	bhi.n	21a6 <u32toa+0x6>
    dst = tgt;
    21b4:	4604      	mov	r4, r0
    int n = 0;
    21b6:	2500      	movs	r5, #0
    21b8:	e003      	b.n	21c2 <u32toa+0x22>
    while (d) {
        dgt = val / d;
        val %= d;
        d /= 10;
        if (n || dgt > 0 || d == 0) {
            *dst++ = dgt + '0';
    21ba:	3230      	adds	r2, #48	; 0x30
    21bc:	7022      	strb	r2, [r4, #0]
            ++n;
    21be:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    21c0:	3401      	adds	r4, #1
    while (d) {
    21c2:	b173      	cbz	r3, 21e2 <u32toa+0x42>
        dgt = val / d;
    21c4:	fbb1 f2f3 	udiv	r2, r1, r3
        val %= d;
    21c8:	fb03 1112 	mls	r1, r3, r2, r1
        d /= 10;
    21cc:	4e07      	ldr	r6, [pc, #28]	; (21ec <u32toa+0x4c>)
    21ce:	fba6 6303 	umull	r6, r3, r6, r3
    21d2:	08db      	lsrs	r3, r3, #3
        if (n || dgt > 0 || d == 0) {
    21d4:	2d00      	cmp	r5, #0
    21d6:	d1f0      	bne.n	21ba <u32toa+0x1a>
    21d8:	2a00      	cmp	r2, #0
    21da:	d1ee      	bne.n	21ba <u32toa+0x1a>
    21dc:	2b00      	cmp	r3, #0
    21de:	d1f0      	bne.n	21c2 <u32toa+0x22>
    21e0:	e7eb      	b.n	21ba <u32toa+0x1a>
        }
    }
    *dst = '\0';
    21e2:	7023      	strb	r3, [r4, #0]

    return dst - tgt;
}
    21e4:	1a20      	subs	r0, r4, r0
    21e6:	bc70      	pop	{r4, r5, r6}
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	cccccccd 	.word	0xcccccccd

000021f0 <bs_cbor_writer>:
{
    21f0:	b538      	push	{r3, r4, r5, lr}
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    21f2:	6843      	ldr	r3, [r0, #4]
    21f4:	189c      	adds	r4, r3, r2
    21f6:	2c80      	cmp	r4, #128	; 0x80
    21f8:	d80a      	bhi.n	2210 <bs_cbor_writer+0x20>
    21fa:	4615      	mov	r5, r2
    21fc:	4604      	mov	r4, r0
    memcpy(&bs_obuf[cew->bytes_written], data, len);
    21fe:	4806      	ldr	r0, [pc, #24]	; (2218 <bs_cbor_writer+0x28>)
    2200:	4418      	add	r0, r3
    2202:	f004 fa20 	bl	6646 <memcpy>
    cew->bytes_written += len;
    2206:	6862      	ldr	r2, [r4, #4]
    2208:	442a      	add	r2, r5
    220a:	6062      	str	r2, [r4, #4]
    return 0;
    220c:	2000      	movs	r0, #0
}
    220e:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
    2210:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    2214:	e7fb      	b.n	220e <bs_cbor_writer+0x1e>
    2216:	bf00      	nop
    2218:	200039d4 	.word	0x200039d4

0000221c <boot_serial_output>:
    }
}

static void
boot_serial_output(void)
{
    221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2220:	b0d2      	sub	sp, #328	; 0x148
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2222:	4b4c      	ldr	r3, [pc, #304]	; (2354 <CONFIG_NRF_CLOUD_PORT+0xa1>)
    2224:	881b      	ldrh	r3, [r3, #0]
    2226:	f8ad 3140 	strh.w	r3, [sp, #320]	; 0x140
    char buf[BOOT_SERIAL_OUT_MAX];
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = bs_writer.bytes_written;
    222a:	4b4b      	ldr	r3, [pc, #300]	; (2358 <CONFIG_NRF_CLOUD_PORT+0xa5>)
    222c:	f8d3 8004 	ldr.w	r8, [r3, #4]

    bs_hdr->nh_op++;
    2230:	f8df a13c 	ldr.w	sl, [pc, #316]	; 2370 <CONFIG_NRF_CLOUD_PORT+0xbd>
    2234:	f8da 0000 	ldr.w	r0, [sl]
    2238:	7803      	ldrb	r3, [r0, #0]
    223a:	3301      	adds	r3, #1
    223c:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_flags = 0;
    223e:	2500      	movs	r5, #0
    2240:	7045      	strb	r5, [r0, #1]
    bs_hdr->nh_len = htons(len);
    2242:	f3c8 2307 	ubfx	r3, r8, #8, #8
    2246:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    224a:	8043      	strh	r3, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    224c:	8882      	ldrh	r2, [r0, #4]
    224e:	0a13      	lsrs	r3, r2, #8
    2250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2254:	8083      	strh	r3, [r0, #4]

#ifdef __ZEPHYR__
    crc =  crc16((u8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2256:	9500      	str	r5, [sp, #0]
    2258:	462b      	mov	r3, r5
    225a:	f241 0221 	movw	r2, #4129	; 0x1021
    225e:	2108      	movs	r1, #8
    2260:	f003 fc58 	bl	5b14 <crc16>
    2264:	4603      	mov	r3, r0
    2266:	f8ad 0146 	strh.w	r0, [sp, #326]	; 0x146
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    226a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 2374 <CONFIG_NRF_CLOUD_PORT+0xc1>
    226e:	2201      	movs	r2, #1
    2270:	9200      	str	r2, [sp, #0]
    2272:	f241 0221 	movw	r2, #4129	; 0x1021
    2276:	4641      	mov	r1, r8
    2278:	4648      	mov	r0, r9
    227a:	f003 fc4b 	bl	5b14 <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);
    227e:	0a03      	lsrs	r3, r0, #8
    2280:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    2284:	f8ad 0146 	strh.w	r0, [sp, #326]	; 0x146

    boot_uf->write(pkt_start, sizeof(pkt_start));
    2288:	4f34      	ldr	r7, [pc, #208]	; (235c <CONFIG_NRF_CLOUD_PORT+0xa9>)
    228a:	683b      	ldr	r3, [r7, #0]
    228c:	685b      	ldr	r3, [r3, #4]
    228e:	2102      	movs	r1, #2
    2290:	a850      	add	r0, sp, #320	; 0x140
    2292:	4798      	blx	r3

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2294:	fa1f f488 	uxth.w	r4, r8
    2298:	f104 030a 	add.w	r3, r4, #10
    229c:	b29b      	uxth	r3, r3
    totlen = htons(totlen);
    229e:	0a1a      	lsrs	r2, r3, #8
    22a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    22a4:	a952      	add	r1, sp, #328	; 0x148
    22a6:	f821 3d04 	strh.w	r3, [r1, #-4]!

    memcpy(buf, &totlen, sizeof(totlen));
    22aa:	2202      	movs	r2, #2
    22ac:	a830      	add	r0, sp, #192	; 0xc0
    22ae:	f004 f9ca 	bl	6646 <memcpy>
    totlen = sizeof(totlen);
    22b2:	2602      	movs	r6, #2
    22b4:	f8ad 6144 	strh.w	r6, [sp, #324]	; 0x144
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    22b8:	2208      	movs	r2, #8
    22ba:	f8da 1000 	ldr.w	r1, [sl]
    22be:	f10d 00c2 	add.w	r0, sp, #194	; 0xc2
    22c2:	f004 f9c0 	bl	6646 <memcpy>
    totlen += sizeof(*bs_hdr);
    22c6:	f8bd 0144 	ldrh.w	r0, [sp, #324]	; 0x144
    22ca:	3008      	adds	r0, #8
    22cc:	b280      	uxth	r0, r0
    22ce:	f8ad 0144 	strh.w	r0, [sp, #324]	; 0x144
    memcpy(&buf[totlen], data, len);
    22d2:	4642      	mov	r2, r8
    22d4:	4649      	mov	r1, r9
    22d6:	ab30      	add	r3, sp, #192	; 0xc0
    22d8:	4418      	add	r0, r3
    22da:	f004 f9b4 	bl	6646 <memcpy>
    totlen += len;
    22de:	f8bd 0144 	ldrh.w	r0, [sp, #324]	; 0x144
    22e2:	4420      	add	r0, r4
    22e4:	b280      	uxth	r0, r0
    22e6:	f8ad 0144 	strh.w	r0, [sp, #324]	; 0x144
    memcpy(&buf[totlen], &crc, sizeof(crc));
    22ea:	4632      	mov	r2, r6
    22ec:	f50d 71a3 	add.w	r1, sp, #326	; 0x146
    22f0:	ab30      	add	r3, sp, #192	; 0xc0
    22f2:	4418      	add	r0, r3
    22f4:	f004 f9a7 	bl	6646 <memcpy>
    totlen += sizeof(crc);
    22f8:	f8bd 3144 	ldrh.w	r3, [sp, #324]	; 0x144
    22fc:	4433      	add	r3, r6
    22fe:	b29b      	uxth	r3, r3
    2300:	f8ad 3144 	strh.w	r3, [sp, #324]	; 0x144
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2304:	9300      	str	r3, [sp, #0]
    2306:	ab30      	add	r3, sp, #192	; 0xc0
    2308:	aa03      	add	r2, sp, #12
    230a:	21ad      	movs	r1, #173	; 0xad
    230c:	a804      	add	r0, sp, #16
    230e:	f7ff fa49 	bl	17a4 <base64_encode>
    totlen = enc_len;
    2312:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    2316:	f8ad 1144 	strh.w	r1, [sp, #324]	; 0x144
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    231a:	683b      	ldr	r3, [r7, #0]
    231c:	685b      	ldr	r3, [r3, #4]
    231e:	a804      	add	r0, sp, #16
    2320:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    2322:	683b      	ldr	r3, [r7, #0]
    2324:	685b      	ldr	r3, [r3, #4]
    2326:	4631      	mov	r1, r6
    2328:	480d      	ldr	r0, [pc, #52]	; (2360 <CONFIG_NRF_CLOUD_PORT+0xad>)
    232a:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    232c:	f04f 0000 	mov.w	r0, #0
    2330:	2303      	movs	r3, #3
    2332:	f363 0002 	bfi	r0, r3, #0, #3
    2336:	f365 00c5 	bfi	r0, r5, #3, #3
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <CONFIG_NRF_CLOUD_PORT+0xb1>)
    233c:	4a0a      	ldr	r2, [pc, #40]	; (2368 <CONFIG_NRF_CLOUD_PORT+0xb5>)
    233e:	1a9b      	subs	r3, r3, r2
    2340:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2344:	f363 108f 	bfi	r0, r3, #6, #10
    2348:	4908      	ldr	r1, [pc, #32]	; (236c <CONFIG_NRF_CLOUD_PORT+0xb9>)
    234a:	f003 fe73 	bl	6034 <log_string_sync>
}
    234e:	b052      	add	sp, #328	; 0x148
    2350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2354:	0000961c 	.word	0x0000961c
    2358:	20007034 	.word	0x20007034
    235c:	200039cc 	.word	0x200039cc
    2360:	00009de4 	.word	0x00009de4
    2364:	000095e8 	.word	0x000095e8
    2368:	000095e0 	.word	0x000095e0
    236c:	00009de8 	.word	0x00009de8
    2370:	200039d0 	.word	0x200039d0
    2374:	200039d4 	.word	0x200039d4

00002378 <bs_empty_rsp>:
{
    2378:	b570      	push	{r4, r5, r6, lr}
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    237a:	4c0e      	ldr	r4, [pc, #56]	; (23b4 <bs_empty_rsp+0x3c>)
    237c:	4d0e      	ldr	r5, [pc, #56]	; (23b8 <bs_empty_rsp+0x40>)
    237e:	f04f 32ff 	mov.w	r2, #4294967295
    2382:	4621      	mov	r1, r4
    2384:	4628      	mov	r0, r5
    2386:	f002 fa97 	bl	48b8 <cbor_encoder_create_map>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    238a:	4e0c      	ldr	r6, [pc, #48]	; (23bc <bs_empty_rsp+0x44>)
    238c:	4630      	mov	r0, r6
    238e:	f004 f92e 	bl	65ee <strlen>
    2392:	4602      	mov	r2, r0
    2394:	4631      	mov	r1, r6
    2396:	4620      	mov	r0, r4
    2398:	f006 fad9 	bl	894e <cbor_encode_text_string>
    cbor_encode_int(&bs_rsp, 0);
    239c:	2200      	movs	r2, #0
    239e:	2300      	movs	r3, #0
    23a0:	4620      	mov	r0, r4
    23a2:	f006 fa80 	bl	88a6 <cbor_encode_int>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    23a6:	4621      	mov	r1, r4
    23a8:	4628      	mov	r0, r5
    23aa:	f006 fadd 	bl	8968 <cbor_encoder_close_container>
    boot_serial_output();
    23ae:	f7ff ff35 	bl	221c <boot_serial_output>
}
    23b2:	bd70      	pop	{r4, r5, r6, pc}
    23b4:	20003a78 	.word	0x20003a78
    23b8:	20003a54 	.word	0x20003a54
    23bc:	00009dec 	.word	0x00009dec

000023c0 <bs_list>:
{
    23c0:	b530      	push	{r4, r5, lr}
    23c2:	b0b3      	sub	sp, #204	; 0xcc
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    23c4:	4c3f      	ldr	r4, [pc, #252]	; (24c4 <bs_list+0x104>)
    23c6:	f04f 32ff 	mov.w	r2, #4294967295
    23ca:	4621      	mov	r1, r4
    23cc:	483e      	ldr	r0, [pc, #248]	; (24c8 <bs_list+0x108>)
    23ce:	f002 fa73 	bl	48b8 <cbor_encoder_create_map>
    23d2:	4d3e      	ldr	r5, [pc, #248]	; (24cc <bs_list+0x10c>)
    23d4:	4628      	mov	r0, r5
    23d6:	f004 f90a 	bl	65ee <strlen>
    23da:	4602      	mov	r2, r0
    23dc:	4629      	mov	r1, r5
    23de:	4620      	mov	r0, r4
    23e0:	f006 fab5 	bl	894e <cbor_encode_text_string>
    cbor_encoder_create_array(&bs_rsp, &images, CborIndefiniteLength);
    23e4:	f04f 32ff 	mov.w	r2, #4294967295
    23e8:	a929      	add	r1, sp, #164	; 0xa4
    23ea:	4620      	mov	r0, r4
    23ec:	f006 fab7 	bl	895e <cbor_encoder_create_array>
        for (slot = 0; slot < 2; slot++) {
    23f0:	2400      	movs	r4, #0
    23f2:	e003      	b.n	23fc <bs_list+0x3c>
                flash_area_close(fap);
    23f4:	9807      	ldr	r0, [sp, #28]
    23f6:	f003 fe94 	bl	6122 <flash_area_close>
        for (slot = 0; slot < 2; slot++) {
    23fa:	3401      	adds	r4, #1
    23fc:	2c01      	cmp	r4, #1
    23fe:	dc54      	bgt.n	24aa <bs_list+0xea>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2400:	4621      	mov	r1, r4
    2402:	2000      	movs	r0, #0
    2404:	f002 fe4c 	bl	50a0 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    2408:	a907      	add	r1, sp, #28
    240a:	b2c0      	uxtb	r0, r0
    240c:	f7ff fc52 	bl	1cb4 <flash_area_open>
    2410:	2800      	cmp	r0, #0
    2412:	d1f2      	bne.n	23fa <bs_list+0x3a>
            flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2414:	2320      	movs	r3, #32
    2416:	aa18      	add	r2, sp, #96	; 0x60
    2418:	2100      	movs	r1, #0
    241a:	9807      	ldr	r0, [sp, #28]
    241c:	f003 fe82 	bl	6124 <flash_area_read>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    2420:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2422:	4b2b      	ldr	r3, [pc, #172]	; (24d0 <bs_list+0x110>)
    2424:	429a      	cmp	r2, r3
    2426:	d1e5      	bne.n	23f4 <bs_list+0x34>
              bootutil_img_validate(NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    2428:	2000      	movs	r0, #0
    242a:	9004      	str	r0, [sp, #16]
    242c:	9003      	str	r0, [sp, #12]
    242e:	9002      	str	r0, [sp, #8]
    2430:	2340      	movs	r3, #64	; 0x40
    2432:	9301      	str	r3, [sp, #4]
    2434:	ab08      	add	r3, sp, #32
    2436:	9300      	str	r3, [sp, #0]
    2438:	9b07      	ldr	r3, [sp, #28]
    243a:	aa18      	add	r2, sp, #96	; 0x60
    243c:	4601      	mov	r1, r0
    243e:	f7ff f853 	bl	14e8 <bootutil_img_validate>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    2442:	2800      	cmp	r0, #0
    2444:	d1d6      	bne.n	23f4 <bs_list+0x34>
            flash_area_close(fap);
    2446:	9807      	ldr	r0, [sp, #28]
    2448:	f003 fe6b 	bl	6122 <flash_area_close>
            cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    244c:	f04f 32ff 	mov.w	r2, #4294967295
    2450:	a920      	add	r1, sp, #128	; 0x80
    2452:	a829      	add	r0, sp, #164	; 0xa4
    2454:	f002 fa30 	bl	48b8 <cbor_encoder_create_map>
    2458:	4d1e      	ldr	r5, [pc, #120]	; (24d4 <bs_list+0x114>)
    245a:	4628      	mov	r0, r5
    245c:	f004 f8c7 	bl	65ee <strlen>
    2460:	4602      	mov	r2, r0
    2462:	4629      	mov	r1, r5
    2464:	a820      	add	r0, sp, #128	; 0x80
    2466:	f006 fa72 	bl	894e <cbor_encode_text_string>
            cbor_encode_int(&image, slot);
    246a:	4622      	mov	r2, r4
    246c:	17e3      	asrs	r3, r4, #31
    246e:	a820      	add	r0, sp, #128	; 0x80
    2470:	f006 fa19 	bl	88a6 <cbor_encode_int>
    2474:	4d18      	ldr	r5, [pc, #96]	; (24d8 <bs_list+0x118>)
    2476:	4628      	mov	r0, r5
    2478:	f004 f8b9 	bl	65ee <strlen>
    247c:	4602      	mov	r2, r0
    247e:	4629      	mov	r1, r5
    2480:	a820      	add	r0, sp, #128	; 0x80
    2482:	f006 fa64 	bl	894e <cbor_encode_text_string>
            bs_list_img_ver((char *)tmpbuf, sizeof(tmpbuf), &hdr.ih_ver);
    2486:	aa1d      	add	r2, sp, #116	; 0x74
    2488:	2140      	movs	r1, #64	; 0x40
    248a:	a808      	add	r0, sp, #32
    248c:	f003 ffe8 	bl	6460 <bs_list_img_ver>
    2490:	a808      	add	r0, sp, #32
    2492:	f004 f8ac 	bl	65ee <strlen>
    2496:	4602      	mov	r2, r0
    2498:	a908      	add	r1, sp, #32
    249a:	a820      	add	r0, sp, #128	; 0x80
    249c:	f006 fa57 	bl	894e <cbor_encode_text_string>
            cbor_encoder_close_container(&images, &image);
    24a0:	a920      	add	r1, sp, #128	; 0x80
    24a2:	a829      	add	r0, sp, #164	; 0xa4
    24a4:	f006 fa60 	bl	8968 <cbor_encoder_close_container>
    24a8:	e7a7      	b.n	23fa <bs_list+0x3a>
    cbor_encoder_close_container(&bs_rsp, &images);
    24aa:	4c06      	ldr	r4, [pc, #24]	; (24c4 <bs_list+0x104>)
    24ac:	a929      	add	r1, sp, #164	; 0xa4
    24ae:	4620      	mov	r0, r4
    24b0:	f006 fa5a 	bl	8968 <cbor_encoder_close_container>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    24b4:	4621      	mov	r1, r4
    24b6:	4804      	ldr	r0, [pc, #16]	; (24c8 <bs_list+0x108>)
    24b8:	f006 fa56 	bl	8968 <cbor_encoder_close_container>
    boot_serial_output();
    24bc:	f7ff feae 	bl	221c <boot_serial_output>
}
    24c0:	b033      	add	sp, #204	; 0xcc
    24c2:	bd30      	pop	{r4, r5, pc}
    24c4:	20003a78 	.word	0x20003a78
    24c8:	20003a54 	.word	0x20003a54
    24cc:	00009df0 	.word	0x00009df0
    24d0:	96f3b83d 	.word	0x96f3b83d
    24d4:	00009918 	.word	0x00009918
    24d8:	00009df8 	.word	0x00009df8

000024dc <bs_upload>:
{
    24dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24e0:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
    24e4:	4605      	mov	r5, r0
    24e6:	460e      	mov	r6, r1
    const struct flash_area *fap = NULL;
    24e8:	2400      	movs	r4, #0
    24ea:	9403      	str	r4, [sp, #12]
    memset(img_data, 0, sizeof(img_data));
    24ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    24f0:	4621      	mov	r1, r4
    24f2:	a807      	add	r0, sp, #28
    24f4:	f004 f8cc 	bl	6690 <memset>
    cbor_buf_reader_init(&reader, (uint8_t *)buf, len);
    24f8:	4632      	mov	r2, r6
    24fa:	4629      	mov	r1, r5
    24fc:	a891      	add	r0, sp, #580	; 0x244
    24fe:	f002 f9bb 	bl	4878 <cbor_buf_reader_init>
    cbor_parser_cust_reader_init(&reader.r, 0, &parser, &root_value);
    2502:	ab8c      	add	r3, sp, #560	; 0x230
    2504:	aa9a      	add	r2, sp, #616	; 0x268
    2506:	4621      	mov	r1, r4
    2508:	a891      	add	r0, sp, #580	; 0x244
    250a:	f006 fc78 	bl	8dfe <cbor_parser_cust_reader_init>
CBOR_INLINE_API bool cbor_value_at_end(const CborValue *it)
{ return it->remaining == 0; }
CBOR_API CborError cbor_value_advance_fixed(CborValue *it);
CBOR_API CborError cbor_value_advance(CborValue *it);
CBOR_INLINE_API bool cbor_value_is_container(const CborValue *it)
{ return it->type == CborArrayType || it->type == CborMapType; }
    250e:	f89d 3242 	ldrb.w	r3, [sp, #578]	; 0x242
    2512:	2b80      	cmp	r3, #128	; 0x80
    2514:	d03e      	beq.n	2594 <bs_upload+0xb8>
    2516:	2ba0      	cmp	r3, #160	; 0xa0
    2518:	d03a      	beq.n	2590 <bs_upload+0xb4>
    251a:	2300      	movs	r3, #0
    if (!cbor_value_is_container(&root_value)) {
    251c:	2b00      	cmp	r3, #0
    251e:	d13b      	bne.n	2598 <bs_upload+0xbc>
        rc = MGMT_ERR_EINVAL;
    2520:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    2522:	f04f 0000 	mov.w	r0, #0
    2526:	2303      	movs	r3, #3
    2528:	f363 0002 	bfi	r0, r3, #0, #3
    252c:	f36f 00c5 	bfc	r0, #3, #3
    2530:	4b86      	ldr	r3, [pc, #536]	; (274c <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x3c>)
    2532:	4a87      	ldr	r2, [pc, #540]	; (2750 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x40>)
    2534:	1a9b      	subs	r3, r3, r2
    2536:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    253a:	f363 108f 	bfi	r0, r3, #6, #10
    253e:	4622      	mov	r2, r4
    2540:	4984      	ldr	r1, [pc, #528]	; (2754 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x44>)
    2542:	f003 fd77 	bl	6034 <log_string_sync>
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    2546:	4d84      	ldr	r5, [pc, #528]	; (2758 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x48>)
    2548:	f04f 32ff 	mov.w	r2, #4294967295
    254c:	4629      	mov	r1, r5
    254e:	4883      	ldr	r0, [pc, #524]	; (275c <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x4c>)
    2550:	f002 f9b2 	bl	48b8 <cbor_encoder_create_map>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    2554:	4e82      	ldr	r6, [pc, #520]	; (2760 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x50>)
    2556:	4630      	mov	r0, r6
    2558:	f004 f849 	bl	65ee <strlen>
    255c:	4602      	mov	r2, r0
    255e:	4631      	mov	r1, r6
    2560:	4628      	mov	r0, r5
    2562:	f006 f9f4 	bl	894e <cbor_encode_text_string>
    cbor_encode_int(&bs_rsp, rc);
    2566:	4622      	mov	r2, r4
    2568:	17e3      	asrs	r3, r4, #31
    256a:	4628      	mov	r0, r5
    256c:	f006 f99b 	bl	88a6 <cbor_encode_int>
    if (rc == 0) {
    2570:	2c00      	cmp	r4, #0
    2572:	f000 8219 	beq.w	29a8 <CONFIG_MAIN_STACK_SIZE+0x1a8>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    2576:	4978      	ldr	r1, [pc, #480]	; (2758 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x48>)
    2578:	4878      	ldr	r0, [pc, #480]	; (275c <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x4c>)
    257a:	f006 f9f5 	bl	8968 <cbor_encoder_close_container>
    boot_serial_output();
    257e:	f7ff fe4d 	bl	221c <boot_serial_output>
    flash_area_close(fap);
    2582:	9803      	ldr	r0, [sp, #12]
    2584:	f003 fdcd 	bl	6122 <flash_area_close>
}
    2588:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
    258c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
    2590:	2301      	movs	r3, #1
    2592:	e7c3      	b.n	251c <bs_upload+0x40>
    2594:	2301      	movs	r3, #1
    2596:	e7c1      	b.n	251c <bs_upload+0x40>
    if (cbor_value_enter_container(&root_value, &value)) {
    2598:	a987      	add	r1, sp, #540	; 0x21c
    259a:	a88c      	add	r0, sp, #560	; 0x230
    259c:	f006 fc3d 	bl	8e1a <cbor_value_enter_container>
    25a0:	2800      	cmp	r0, #0
    25a2:	f040 81e1 	bne.w	2968 <CONFIG_MAIN_STACK_SIZE+0x168>
    img_num = 0;
    25a6:	2400      	movs	r4, #0
    long long int data_len = UINT_MAX;
    25a8:	f04f 38ff 	mov.w	r8, #4294967295
    25ac:	f04f 0900 	mov.w	r9, #0
    long long int off = UINT_MAX;
    25b0:	4646      	mov	r6, r8
    25b2:	464f      	mov	r7, r9
    size_t img_blen = 0;
    25b4:	4625      	mov	r5, r4
    25b6:	e021      	b.n	25fc <bs_upload+0x120>
        } else if (!strcmp(name_str, "off")) {
    25b8:	496a      	ldr	r1, [pc, #424]	; (2764 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x54>)
    25ba:	a804      	add	r0, sp, #16
    25bc:	f004 f820 	bl	6600 <strcmp>
    25c0:	2800      	cmp	r0, #0
    25c2:	d166      	bne.n	2692 <bs_upload+0x1b6>
            if (value.type != CborIntegerType) {
    25c4:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
    25c8:	2b00      	cmp	r3, #0
    25ca:	f040 81df 	bne.w	298c <CONFIG_MAIN_STACK_SIZE+0x18c>
CBOR_API CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed);

CBOR_PRIVATE_API uint64_t _cbor_value_decode_int64_internal(const CborValue *value);
CBOR_INLINE_API uint64_t _cbor_value_extract_int64_helper(const CborValue *value)
{
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
    25ce:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
                _cbor_value_decode_int64_internal(value) : value->extra;
    25d2:	f013 0f01 	tst.w	r3, #1
    25d6:	d158      	bne.n	268a <bs_upload+0x1ae>
    25d8:	f8bd 022c 	ldrh.w	r0, [sp, #556]	; 0x22c
    25dc:	2100      	movs	r1, #0
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
    25de:	4606      	mov	r6, r0
    25e0:	460f      	mov	r7, r1
    if (value->flags & CborIteratorFlag_NegativeInteger)
    25e2:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
    25e6:	f013 0f02 	tst.w	r3, #2
    25ea:	d001      	beq.n	25f0 <bs_upload+0x114>
        *result = -*result - 1;
    25ec:	43c6      	mvns	r6, r0
    25ee:	43cf      	mvns	r7, r1
            if (cbor_value_advance(&value)) {
    25f0:	a887      	add	r0, sp, #540	; 0x21c
    25f2:	f006 fca6 	bl	8f42 <cbor_value_advance>
    25f6:	2800      	cmp	r0, #0
    25f8:	f040 81ca 	bne.w	2990 <CONFIG_MAIN_STACK_SIZE+0x190>
{ return value && value->type != CborInvalidType; }
    25fc:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
    2600:	2bff      	cmp	r3, #255	; 0xff
    2602:	f000 809a 	beq.w	273a <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x2a>
    2606:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&value)) {
    2608:	2b00      	cmp	r3, #0
    260a:	f000 8098 	beq.w	273e <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x2e>
        if (cbor_value_calculate_string_length(&value, &slen)) {
    260e:	a906      	add	r1, sp, #24
    2610:	a887      	add	r0, sp, #540	; 0x21c
    2612:	f006 fca0 	bl	8f56 <cbor_value_calculate_string_length>
    2616:	2800      	cmp	r0, #0
    2618:	f040 81a8 	bne.w	296c <CONFIG_MAIN_STACK_SIZE+0x16c>

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
CBOR_INLINE_API bool cbor_value_is_text_string(const CborValue *value)
{ return value->type == CborTextStringType; }
    261c:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
        if (!cbor_value_is_text_string(&value) ||
    2620:	2b60      	cmp	r3, #96	; 0x60
    2622:	f040 81a5 	bne.w	2970 <CONFIG_MAIN_STACK_SIZE+0x170>
            slen >= sizeof(name_str) - 1) {
    2626:	9b06      	ldr	r3, [sp, #24]
        if (!cbor_value_is_text_string(&value) ||
    2628:	2b06      	cmp	r3, #6
    262a:	f200 81a3 	bhi.w	2974 <CONFIG_MAIN_STACK_SIZE+0x174>

CBOR_INLINE_API CborError cbor_value_copy_text_string(const CborValue *value, char *buffer,
                                                      size_t *buflen, CborValue *next)
{
    assert(cbor_value_is_text_string(value));
    return _cbor_value_copy_string(value, buffer, buflen, next);
    262e:	ab87      	add	r3, sp, #540	; 0x21c
    2630:	aa06      	add	r2, sp, #24
    2632:	a904      	add	r1, sp, #16
    2634:	4618      	mov	r0, r3
    2636:	f002 f94f 	bl	48d8 <_cbor_value_copy_string>
        if (cbor_value_copy_text_string(&value, name_str, &slen, &value)) {
    263a:	2800      	cmp	r0, #0
    263c:	f040 819c 	bne.w	2978 <CONFIG_MAIN_STACK_SIZE+0x178>
        name_str[slen] = '\0';
    2640:	9b06      	ldr	r3, [sp, #24]
    2642:	a804      	add	r0, sp, #16
    2644:	2200      	movs	r2, #0
    2646:	54c2      	strb	r2, [r0, r3]
        if (!strcmp(name_str, "data")) {
    2648:	4947      	ldr	r1, [pc, #284]	; (2768 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x58>)
    264a:	f003 ffd9 	bl	6600 <strcmp>
    264e:	2800      	cmp	r0, #0
    2650:	d1b2      	bne.n	25b8 <bs_upload+0xdc>
            if (value.type != CborByteStringType) {
    2652:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
    2656:	2b40      	cmp	r3, #64	; 0x40
    2658:	f040 8190 	bne.w	297c <CONFIG_MAIN_STACK_SIZE+0x17c>
            if (cbor_value_calculate_string_length(&value, &slen) ||
    265c:	a906      	add	r1, sp, #24
    265e:	a887      	add	r0, sp, #540	; 0x21c
    2660:	f006 fc79 	bl	8f56 <cbor_value_calculate_string_length>
    2664:	2800      	cmp	r0, #0
    2666:	f040 818b 	bne.w	2980 <CONFIG_MAIN_STACK_SIZE+0x180>
                slen >= sizeof(img_data)) {
    266a:	9b06      	ldr	r3, [sp, #24]
            if (cbor_value_calculate_string_length(&value, &slen) ||
    266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2670:	f080 8188 	bcs.w	2984 <CONFIG_MAIN_STACK_SIZE+0x184>
}
CBOR_INLINE_API CborError cbor_value_copy_byte_string(const CborValue *value, uint8_t *buffer,
                                                      size_t *buflen, CborValue *next)
{
    assert(cbor_value_is_byte_string(value));
    return _cbor_value_copy_string(value, buffer, buflen, next);
    2674:	ab87      	add	r3, sp, #540	; 0x21c
    2676:	aa06      	add	r2, sp, #24
    2678:	a907      	add	r1, sp, #28
    267a:	4618      	mov	r0, r3
    267c:	f002 f92c 	bl	48d8 <_cbor_value_copy_string>
            if (cbor_value_copy_byte_string(&value, img_data, &slen, &value)) {
    2680:	2800      	cmp	r0, #0
    2682:	f040 8181 	bne.w	2988 <CONFIG_MAIN_STACK_SIZE+0x188>
            img_blen = slen;
    2686:	9d06      	ldr	r5, [sp, #24]
    2688:	e7b8      	b.n	25fc <bs_upload+0x120>
                _cbor_value_decode_int64_internal(value) : value->extra;
    268a:	a887      	add	r0, sp, #540	; 0x21c
    268c:	f006 fb9e 	bl	8dcc <_cbor_value_decode_int64_internal>
    2690:	e7a5      	b.n	25de <bs_upload+0x102>
        } else if (!strcmp(name_str, "len")) {
    2692:	4936      	ldr	r1, [pc, #216]	; (276c <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x5c>)
    2694:	a804      	add	r0, sp, #16
    2696:	f003 ffb3 	bl	6600 <strcmp>
    269a:	bb10      	cbnz	r0, 26e2 <bs_upload+0x206>
            if (value.type != CborIntegerType) {
    269c:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
    26a0:	2b00      	cmp	r3, #0
    26a2:	f040 8177 	bne.w	2994 <CONFIG_MAIN_STACK_SIZE+0x194>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
    26a6:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
                _cbor_value_decode_int64_internal(value) : value->extra;
    26aa:	f013 0f01 	tst.w	r3, #1
    26ae:	d114      	bne.n	26da <bs_upload+0x1fe>
    26b0:	f8bd 022c 	ldrh.w	r0, [sp, #556]	; 0x22c
    26b4:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
    26b6:	4680      	mov	r8, r0
    26b8:	4689      	mov	r9, r1
    if (value->flags & CborIteratorFlag_NegativeInteger)
    26ba:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
    26be:	f013 0f02 	tst.w	r3, #2
    26c2:	d003      	beq.n	26cc <bs_upload+0x1f0>
        *result = -*result - 1;
    26c4:	ea6f 0800 	mvn.w	r8, r0
    26c8:	ea6f 0901 	mvn.w	r9, r1
            if (cbor_value_advance(&value)) {
    26cc:	a887      	add	r0, sp, #540	; 0x21c
    26ce:	f006 fc38 	bl	8f42 <cbor_value_advance>
    26d2:	2800      	cmp	r0, #0
    26d4:	d092      	beq.n	25fc <bs_upload+0x120>
        rc = MGMT_ERR_EINVAL;
    26d6:	2403      	movs	r4, #3
    26d8:	e723      	b.n	2522 <bs_upload+0x46>
                _cbor_value_decode_int64_internal(value) : value->extra;
    26da:	a887      	add	r0, sp, #540	; 0x21c
    26dc:	f006 fb76 	bl	8dcc <_cbor_value_decode_int64_internal>
    26e0:	e7e9      	b.n	26b6 <bs_upload+0x1da>
        } else if (!strcmp(name_str, "image")) {
    26e2:	4923      	ldr	r1, [pc, #140]	; (2770 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x60>)
    26e4:	a804      	add	r0, sp, #16
    26e6:	f003 ff8b 	bl	6600 <strcmp>
    26ea:	b9f0      	cbnz	r0, 272a <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x1a>
            if (value.type != CborIntegerType) {
    26ec:	f89d 322e 	ldrb.w	r3, [sp, #558]	; 0x22e
    26f0:	2b00      	cmp	r3, #0
    26f2:	f040 8151 	bne.w	2998 <CONFIG_MAIN_STACK_SIZE+0x198>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
    26f6:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
                _cbor_value_decode_int64_internal(value) : value->extra;
    26fa:	f013 0f01 	tst.w	r3, #1
    26fe:	d110      	bne.n	2722 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x12>
    2700:	f8bd 022c 	ldrh.w	r0, [sp, #556]	; 0x22c
    *result = (int) _cbor_value_extract_int64_helper(value);
    2704:	4604      	mov	r4, r0
    if (value->flags & CborIteratorFlag_NegativeInteger)
    2706:	f89d 322f 	ldrb.w	r3, [sp, #559]	; 0x22f
    270a:	f013 0f02 	tst.w	r3, #2
    270e:	d000      	beq.n	2712 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x2>
        *result = -*result - 1;
    2710:	43c4      	mvns	r4, r0
            if (cbor_value_advance(&value)) {
    2712:	a887      	add	r0, sp, #540	; 0x21c
    2714:	f006 fc15 	bl	8f42 <cbor_value_advance>
    2718:	2800      	cmp	r0, #0
    271a:	f43f af6f 	beq.w	25fc <bs_upload+0x120>
        rc = MGMT_ERR_EINVAL;
    271e:	2403      	movs	r4, #3
    2720:	e6ff      	b.n	2522 <bs_upload+0x46>
                _cbor_value_decode_int64_internal(value) : value->extra;
    2722:	a887      	add	r0, sp, #540	; 0x21c
    2724:	f006 fb52 	bl	8dcc <_cbor_value_decode_int64_internal>
    2728:	e7ec      	b.n	2704 <bs_upload+0x228>
            if (cbor_value_advance(&value)) {
    272a:	a887      	add	r0, sp, #540	; 0x21c
    272c:	f006 fc09 	bl	8f42 <cbor_value_advance>
    2730:	2800      	cmp	r0, #0
    2732:	f43f af63 	beq.w	25fc <bs_upload+0x120>
        rc = MGMT_ERR_EINVAL;
    2736:	2403      	movs	r4, #3
    2738:	e6f3      	b.n	2522 <bs_upload+0x46>
{ return value && value->type != CborInvalidType; }
    273a:	2300      	movs	r3, #0
    273c:	e764      	b.n	2608 <bs_upload+0x12c>
    if (off == UINT_MAX) {
    273e:	2f00      	cmp	r7, #0
    2740:	bf08      	it	eq
    2742:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    2746:	d115      	bne.n	2774 <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x64>
        rc = MGMT_ERR_EINVAL;
    2748:	2403      	movs	r4, #3
    274a:	e6ea      	b.n	2522 <bs_upload+0x46>
    274c:	000095e8 	.word	0x000095e8
    2750:	000095e0 	.word	0x000095e0
    2754:	00009ecc 	.word	0x00009ecc
    2758:	20003a78 	.word	0x20003a78
    275c:	20003a54 	.word	0x20003a54
    2760:	00009dec 	.word	0x00009dec
    2764:	00009e08 	.word	0x00009e08
    2768:	00009e00 	.word	0x00009e00
    276c:	00009e0c 	.word	0x00009e0c
    2770:	000096bc 	.word	0x000096bc
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    2774:	2100      	movs	r1, #0
    2776:	4620      	mov	r0, r4
    2778:	f002 fc92 	bl	50a0 <flash_area_id_from_multi_image_slot>
    277c:	a903      	add	r1, sp, #12
    277e:	b2c0      	uxtb	r0, r0
    2780:	f7ff fa98 	bl	1cb4 <flash_area_open>
    if (rc) {
    2784:	4604      	mov	r4, r0
    2786:	2800      	cmp	r0, #0
    2788:	f040 8108 	bne.w	299c <CONFIG_MAIN_STACK_SIZE+0x19c>
    if (off == 0) {
    278c:	ea56 0307 	orrs.w	r3, r6, r7
    2790:	d10d      	bne.n	27ae <CONFIG_UI_BUZZER_MAX_FREQUENCY+0x9e>
        curr_off = 0;
    2792:	4b8e      	ldr	r3, [pc, #568]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    2794:	2200      	movs	r2, #0
    2796:	601a      	str	r2, [r3, #0]
        if (data_len > fap->fa_size) {
    2798:	9b03      	ldr	r3, [sp, #12]
    279a:	689a      	ldr	r2, [r3, #8]
    279c:	2300      	movs	r3, #0
    279e:	4542      	cmp	r2, r8
    27a0:	eb73 0309 	sbcs.w	r3, r3, r9
    27a4:	f2c0 80fc 	blt.w	29a0 <CONFIG_MAIN_STACK_SIZE+0x1a0>
        img_size = data_len;
    27a8:	4b89      	ldr	r3, [pc, #548]	; (29d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>)
    27aa:	f8c3 8000 	str.w	r8, [r3]
    if (off != curr_off) {
    27ae:	4b87      	ldr	r3, [pc, #540]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	2100      	movs	r1, #0
    27b4:	42b9      	cmp	r1, r7
    27b6:	bf08      	it	eq
    27b8:	42b3      	cmpeq	r3, r6
    27ba:	f47f aeb2 	bne.w	2522 <bs_upload+0x46>
    if (curr_off + img_blen < img_size) {
    27be:	442b      	add	r3, r5
    27c0:	4a83      	ldr	r2, [pc, #524]	; (29d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>)
    27c2:	6812      	ldr	r2, [r2, #0]
    27c4:	4293      	cmp	r3, r2
    27c6:	f0c0 808c 	bcc.w	28e2 <CONFIG_MAIN_STACK_SIZE+0xe2>
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    27ca:	4b80      	ldr	r3, [pc, #512]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    27cc:	6818      	ldr	r0, [r3, #0]
    27ce:	a901      	add	r1, sp, #4
    27d0:	4428      	add	r0, r5
    27d2:	f7fd ff6d 	bl	6b0 <flash_area_sector_from_off>
    if (rc) {
    27d6:	4604      	mov	r4, r0
    27d8:	2800      	cmp	r0, #0
    27da:	f040 8090 	bne.w	28fe <CONFIG_MAIN_STACK_SIZE+0xfe>
    if (off_last != sector.fs_off) {
    27de:	9a01      	ldr	r2, [sp, #4]
    27e0:	4b7c      	ldr	r3, [pc, #496]	; (29d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>)
    27e2:	681b      	ldr	r3, [r3, #0]
    27e4:	429a      	cmp	r2, r3
    27e6:	d01b      	beq.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
        off_last = sector.fs_off;
    27e8:	4b7a      	ldr	r3, [pc, #488]	; (29d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>)
    27ea:	601a      	str	r2, [r3, #0]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    27ec:	f04f 0000 	mov.w	r0, #0
    27f0:	2303      	movs	r3, #3
    27f2:	f363 0002 	bfi	r0, r3, #0, #3
    27f6:	f36f 00c5 	bfc	r0, #3, #3
    27fa:	4e77      	ldr	r6, [pc, #476]	; (29d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    27fc:	4b77      	ldr	r3, [pc, #476]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    27fe:	1b9b      	subs	r3, r3, r6
    2800:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2804:	f363 108f 	bfi	r0, r3, #6, #10
    2808:	4975      	ldr	r1, [pc, #468]	; (29e0 <CONFIG_MAIN_STACK_SIZE+0x1e0>)
    280a:	f003 fc13 	bl	6034 <log_string_sync>
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    280e:	9a02      	ldr	r2, [sp, #8]
    2810:	9901      	ldr	r1, [sp, #4]
    2812:	9803      	ldr	r0, [sp, #12]
    2814:	f003 fcd5 	bl	61c2 <flash_area_erase>
        if (rc) {
    2818:	4604      	mov	r4, r0
    281a:	2800      	cmp	r0, #0
    281c:	f040 8081 	bne.w	2922 <CONFIG_MAIN_STACK_SIZE+0x122>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2820:	f04f 0000 	mov.w	r0, #0
    2824:	2303      	movs	r3, #3
    2826:	f363 0002 	bfi	r0, r3, #0, #3
    282a:	f36f 00c5 	bfc	r0, #3, #3
    282e:	4e6a      	ldr	r6, [pc, #424]	; (29d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    2830:	4b6a      	ldr	r3, [pc, #424]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    2832:	1b9b      	subs	r3, r3, r6
    2834:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2838:	f363 108f 	bfi	r0, r3, #6, #10
    283c:	4c63      	ldr	r4, [pc, #396]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    283e:	6822      	ldr	r2, [r4, #0]
    2840:	1953      	adds	r3, r2, r5
    2842:	4968      	ldr	r1, [pc, #416]	; (29e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>)
    2844:	f003 fbf6 	bl	6034 <log_string_sync>
    rc = flash_area_write(fap, curr_off, img_data, img_blen);
    2848:	462b      	mov	r3, r5
    284a:	aa07      	add	r2, sp, #28
    284c:	6821      	ldr	r1, [r4, #0]
    284e:	9803      	ldr	r0, [sp, #12]
    2850:	f003 fc87 	bl	6162 <flash_area_write>
    if (rc == 0) {
    2854:	4604      	mov	r4, r0
    2856:	2800      	cmp	r0, #0
    2858:	f040 80a4 	bne.w	29a4 <CONFIG_MAIN_STACK_SIZE+0x1a4>
        curr_off += img_blen;
    285c:	4b5b      	ldr	r3, [pc, #364]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    285e:	681a      	ldr	r2, [r3, #0]
    2860:	4415      	add	r5, r2
    2862:	601d      	str	r5, [r3, #0]
        if (curr_off == img_size) {
    2864:	4b5a      	ldr	r3, [pc, #360]	; (29d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>)
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	429d      	cmp	r5, r3
    286a:	f47f ae5a 	bne.w	2522 <bs_upload+0x46>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    286e:	9803      	ldr	r0, [sp, #12]
    2870:	f002 fef4 	bl	565c <boot_status_off>
    2874:	a901      	add	r1, sp, #4
    2876:	f7fd ff1b 	bl	6b0 <flash_area_sector_from_off>
            if (rc) {
    287a:	4604      	mov	r4, r0
    287c:	2800      	cmp	r0, #0
    287e:	d162      	bne.n	2946 <CONFIG_MAIN_STACK_SIZE+0x146>
            if (off_last < sector.fs_off) {
    2880:	9a01      	ldr	r2, [sp, #4]
    2882:	4b54      	ldr	r3, [pc, #336]	; (29d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>)
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	429a      	cmp	r2, r3
    2888:	f77f ae4b 	ble.w	2522 <bs_upload+0x46>
                BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    288c:	f04f 0000 	mov.w	r0, #0
    2890:	2303      	movs	r3, #3
    2892:	f363 0002 	bfi	r0, r3, #0, #3
    2896:	f36f 00c5 	bfc	r0, #3, #3
    289a:	4b50      	ldr	r3, [pc, #320]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    289c:	1b9b      	subs	r3, r3, r6
    289e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    28a2:	f363 108f 	bfi	r0, r3, #6, #10
    28a6:	494e      	ldr	r1, [pc, #312]	; (29e0 <CONFIG_MAIN_STACK_SIZE+0x1e0>)
    28a8:	f003 fbc4 	bl	6034 <log_string_sync>
                rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    28ac:	9a02      	ldr	r2, [sp, #8]
    28ae:	9901      	ldr	r1, [sp, #4]
    28b0:	9803      	ldr	r0, [sp, #12]
    28b2:	f003 fc86 	bl	61c2 <flash_area_erase>
                if (rc) {
    28b6:	4604      	mov	r4, r0
    28b8:	2800      	cmp	r0, #0
    28ba:	f43f ae32 	beq.w	2522 <bs_upload+0x46>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    28be:	f04f 0000 	mov.w	r0, #0
    28c2:	2301      	movs	r3, #1
    28c4:	f363 0002 	bfi	r0, r3, #0, #3
    28c8:	f36f 00c5 	bfc	r0, #3, #3
    28cc:	4b43      	ldr	r3, [pc, #268]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    28ce:	1b9b      	subs	r3, r3, r6
    28d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    28d4:	f363 108f 	bfi	r0, r3, #6, #10
    28d8:	4622      	mov	r2, r4
    28da:	4943      	ldr	r1, [pc, #268]	; (29e8 <CONFIG_MAIN_STACK_SIZE+0x1e8>)
    28dc:	f003 fbaa 	bl	6034 <log_string_sync>
    28e0:	e61f      	b.n	2522 <bs_upload+0x46>
        rem_bytes = img_blen % flash_area_align(fap);
    28e2:	9803      	ldr	r0, [sp, #12]
    28e4:	f003 fc9b 	bl	621e <flash_area_align>
    28e8:	fbb5 f3f0 	udiv	r3, r5, r0
    28ec:	fb00 5313 	mls	r3, r0, r3, r5
        if (rem_bytes) {
    28f0:	f013 0fff 	tst.w	r3, #255	; 0xff
    28f4:	f43f af69 	beq.w	27ca <CONFIG_UI_BUZZER_MAX_FREQUENCY+0xba>
            img_blen -= rem_bytes;
    28f8:	b2db      	uxtb	r3, r3
    28fa:	1aed      	subs	r5, r5, r3
    28fc:	e765      	b.n	27ca <CONFIG_UI_BUZZER_MAX_FREQUENCY+0xba>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    28fe:	f04f 0000 	mov.w	r0, #0
    2902:	2301      	movs	r3, #1
    2904:	f363 0002 	bfi	r0, r3, #0, #3
    2908:	f36f 00c5 	bfc	r0, #3, #3
    290c:	4b33      	ldr	r3, [pc, #204]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    290e:	4a32      	ldr	r2, [pc, #200]	; (29d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    2910:	1a9b      	subs	r3, r3, r2
    2912:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2916:	f363 108f 	bfi	r0, r3, #6, #10
    291a:	4934      	ldr	r1, [pc, #208]	; (29ec <CONFIG_MAIN_STACK_SIZE+0x1ec>)
    291c:	f003 fb8a 	bl	6034 <log_string_sync>
    2920:	e5ff      	b.n	2522 <bs_upload+0x46>
            BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2922:	f04f 0000 	mov.w	r0, #0
    2926:	2301      	movs	r3, #1
    2928:	f363 0002 	bfi	r0, r3, #0, #3
    292c:	f36f 00c5 	bfc	r0, #3, #3
    2930:	4b2a      	ldr	r3, [pc, #168]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    2932:	1b9b      	subs	r3, r3, r6
    2934:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2938:	f363 108f 	bfi	r0, r3, #6, #10
    293c:	4622      	mov	r2, r4
    293e:	492a      	ldr	r1, [pc, #168]	; (29e8 <CONFIG_MAIN_STACK_SIZE+0x1e8>)
    2940:	f003 fb78 	bl	6034 <log_string_sync>
    2944:	e5ed      	b.n	2522 <bs_upload+0x46>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    2946:	f04f 0000 	mov.w	r0, #0
    294a:	2301      	movs	r3, #1
    294c:	f363 0002 	bfi	r0, r3, #0, #3
    2950:	f36f 00c5 	bfc	r0, #3, #3
    2954:	4b21      	ldr	r3, [pc, #132]	; (29dc <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    2956:	1b9b      	subs	r3, r3, r6
    2958:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    295c:	f363 108f 	bfi	r0, r3, #6, #10
    2960:	4923      	ldr	r1, [pc, #140]	; (29f0 <CONFIG_MAIN_STACK_SIZE+0x1f0>)
    2962:	f003 fb67 	bl	6034 <log_string_sync>
    2966:	e5dc      	b.n	2522 <bs_upload+0x46>
        rc = MGMT_ERR_EINVAL;
    2968:	2403      	movs	r4, #3
    296a:	e5da      	b.n	2522 <bs_upload+0x46>
    296c:	2403      	movs	r4, #3
    296e:	e5d8      	b.n	2522 <bs_upload+0x46>
    2970:	2403      	movs	r4, #3
    2972:	e5d6      	b.n	2522 <bs_upload+0x46>
    2974:	2403      	movs	r4, #3
    2976:	e5d4      	b.n	2522 <bs_upload+0x46>
    2978:	2403      	movs	r4, #3
    297a:	e5d2      	b.n	2522 <bs_upload+0x46>
    297c:	2403      	movs	r4, #3
    297e:	e5d0      	b.n	2522 <bs_upload+0x46>
    2980:	2403      	movs	r4, #3
    2982:	e5ce      	b.n	2522 <bs_upload+0x46>
    2984:	2403      	movs	r4, #3
    2986:	e5cc      	b.n	2522 <bs_upload+0x46>
    2988:	2403      	movs	r4, #3
    298a:	e5ca      	b.n	2522 <bs_upload+0x46>
    298c:	2403      	movs	r4, #3
    298e:	e5c8      	b.n	2522 <bs_upload+0x46>
    2990:	2403      	movs	r4, #3
    2992:	e5c6      	b.n	2522 <bs_upload+0x46>
    2994:	2403      	movs	r4, #3
    2996:	e5c4      	b.n	2522 <bs_upload+0x46>
    2998:	2403      	movs	r4, #3
    299a:	e5c2      	b.n	2522 <bs_upload+0x46>
        rc = MGMT_ERR_EINVAL;
    299c:	2403      	movs	r4, #3
    299e:	e5c0      	b.n	2522 <bs_upload+0x46>
        rc = MGMT_ERR_EINVAL;
    29a0:	2403      	movs	r4, #3
    29a2:	e5be      	b.n	2522 <bs_upload+0x46>
    29a4:	2403      	movs	r4, #3
    29a6:	e5bc      	b.n	2522 <bs_upload+0x46>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    29a8:	4d12      	ldr	r5, [pc, #72]	; (29f4 <CONFIG_MAIN_STACK_SIZE+0x1f4>)
    29aa:	4628      	mov	r0, r5
    29ac:	f003 fe1f 	bl	65ee <strlen>
    29b0:	4c11      	ldr	r4, [pc, #68]	; (29f8 <CONFIG_MAIN_STACK_SIZE+0x1f8>)
    29b2:	4602      	mov	r2, r0
    29b4:	4629      	mov	r1, r5
    29b6:	4620      	mov	r0, r4
    29b8:	f005 ffc9 	bl	894e <cbor_encode_text_string>
        cbor_encode_uint(&bs_rsp, curr_off);
    29bc:	4b03      	ldr	r3, [pc, #12]	; (29cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    29be:	681a      	ldr	r2, [r3, #0]
    29c0:	2300      	movs	r3, #0
    29c2:	4620      	mov	r0, r4
    29c4:	f005 ff2f 	bl	8826 <cbor_encode_uint>
    29c8:	e5d5      	b.n	2576 <bs_upload+0x9a>
    29ca:	bf00      	nop
    29cc:	20003a9c 	.word	0x20003a9c
    29d0:	20003ca4 	.word	0x20003ca4
    29d4:	2000703c 	.word	0x2000703c
    29d8:	000095e0 	.word	0x000095e0
    29dc:	000095e8 	.word	0x000095e8
    29e0:	00009e38 	.word	0x00009e38
    29e4:	00009e78 	.word	0x00009e78
    29e8:	00009e58 	.word	0x00009e58
    29ec:	00009e10 	.word	0x00009e10
    29f0:	00009e94 	.word	0x00009e94
    29f4:	00009e08 	.word	0x00009e08
    29f8:	20003a78 	.word	0x20003a78

000029fc <boot_serial_input>:
    if (len < sizeof(*hdr) ||
    29fc:	2907      	cmp	r1, #7
    29fe:	d903      	bls.n	2a08 <boot_serial_input+0xc>
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    2a00:	7803      	ldrb	r3, [r0, #0]
    if (len < sizeof(*hdr) ||
    2a02:	b113      	cbz	r3, 2a0a <boot_serial_input+0xe>
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    2a04:	2b02      	cmp	r3, #2
    2a06:	d000      	beq.n	2a0a <boot_serial_input+0xe>
    2a08:	4770      	bx	lr
{
    2a0a:	b570      	push	{r4, r5, r6, lr}
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    2a0c:	8842      	ldrh	r2, [r0, #2]
    2a0e:	0a13      	lsrs	r3, r2, #8
    2a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a14:	b29b      	uxth	r3, r3
    2a16:	f1a1 0408 	sub.w	r4, r1, #8
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    2a1a:	42a3      	cmp	r3, r4
    2a1c:	d200      	bcs.n	2a20 <boot_serial_input+0x24>
}
    2a1e:	bd70      	pop	{r4, r5, r6, pc}
    2a20:	4605      	mov	r5, r0
    bs_hdr = hdr;
    2a22:	4b1b      	ldr	r3, [pc, #108]	; (2a90 <boot_serial_input+0x94>)
    2a24:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    2a26:	8882      	ldrh	r2, [r0, #4]
    2a28:	0a13      	lsrs	r3, r2, #8
    2a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a2e:	8083      	strh	r3, [r0, #4]
    buf += sizeof(*hdr);
    2a30:	f100 0608 	add.w	r6, r0, #8
    bs_writer.bytes_written = 0;
    2a34:	4917      	ldr	r1, [pc, #92]	; (2a94 <boot_serial_input+0x98>)
    2a36:	2200      	movs	r2, #0
    2a38:	604a      	str	r2, [r1, #4]
    cbor_encoder_cust_writer_init(&bs_root, &bs_writer, 0);
    2a3a:	4817      	ldr	r0, [pc, #92]	; (2a98 <boot_serial_input+0x9c>)
    2a3c:	f005 feee 	bl	881c <cbor_encoder_cust_writer_init>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    2a40:	88ab      	ldrh	r3, [r5, #4]
    2a42:	2b01      	cmp	r3, #1
    2a44:	d00b      	beq.n	2a5e <boot_serial_input+0x62>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    2a46:	2b00      	cmp	r3, #0
    2a48:	d1e9      	bne.n	2a1e <boot_serial_input+0x22>
        switch (hdr->nh_id) {
    2a4a:	79eb      	ldrb	r3, [r5, #7]
    2a4c:	2b01      	cmp	r3, #1
    2a4e:	d019      	beq.n	2a84 <boot_serial_input+0x88>
    2a50:	2b05      	cmp	r3, #5
    2a52:	d1e4      	bne.n	2a1e <boot_serial_input+0x22>
            bs_reset(buf, len);
    2a54:	4621      	mov	r1, r4
    2a56:	4630      	mov	r0, r6
    2a58:	f003 fd57 	bl	650a <bs_reset>
            break;
    2a5c:	e7df      	b.n	2a1e <boot_serial_input+0x22>
        switch (hdr->nh_id) {
    2a5e:	79eb      	ldrb	r3, [r5, #7]
    2a60:	b133      	cbz	r3, 2a70 <boot_serial_input+0x74>
    2a62:	2b01      	cmp	r3, #1
    2a64:	d009      	beq.n	2a7a <boot_serial_input+0x7e>
            bs_empty_rsp(buf, len);
    2a66:	4621      	mov	r1, r4
    2a68:	4630      	mov	r0, r6
    2a6a:	f7ff fc85 	bl	2378 <bs_empty_rsp>
            break;
    2a6e:	e7d6      	b.n	2a1e <boot_serial_input+0x22>
            bs_list(buf, len);
    2a70:	4621      	mov	r1, r4
    2a72:	4630      	mov	r0, r6
    2a74:	f7ff fca4 	bl	23c0 <bs_list>
            break;
    2a78:	e7d1      	b.n	2a1e <boot_serial_input+0x22>
            bs_upload(buf, len);
    2a7a:	4621      	mov	r1, r4
    2a7c:	4630      	mov	r0, r6
    2a7e:	f7ff fd2d 	bl	24dc <bs_upload>
            break;
    2a82:	e7cc      	b.n	2a1e <boot_serial_input+0x22>
            bs_empty_rsp(buf, len);
    2a84:	4621      	mov	r1, r4
    2a86:	4630      	mov	r0, r6
    2a88:	f7ff fc76 	bl	2378 <bs_empty_rsp>
            break;
    2a8c:	e7c7      	b.n	2a1e <boot_serial_input+0x22>
    2a8e:	bf00      	nop
    2a90:	200039d0 	.word	0x200039d0
    2a94:	20007034 	.word	0x20007034
    2a98:	20003a54 	.word	0x20003a54

00002a9c <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    2a9c:	b530      	push	{r4, r5, lr}
    2a9e:	b085      	sub	sp, #20
    2aa0:	4605      	mov	r5, r0
    int off;
    int dec_off;
    int full_line;
    int max_input;

    boot_uf = f;
    2aa2:	4b24      	ldr	r3, [pc, #144]	; (2b34 <boot_serial_start+0x98>)
    2aa4:	6018      	str	r0, [r3, #0]
    max_input = sizeof(in_buf);

    off = 0;
    2aa6:	2400      	movs	r4, #0
    2aa8:	e01b      	b.n	2ae2 <boot_serial_start+0x46>
    while (1) {
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
        if (rc <= 0 && !full_line) {
    2aaa:	9b02      	ldr	r3, [sp, #8]
    2aac:	bb1b      	cbnz	r3, 2af6 <boot_serial_start+0x5a>
    2aae:	e018      	b.n	2ae2 <boot_serial_start+0x46>
            continue;
        }
        off += rc;
        if (!full_line) {
            if (off == max_input) {
    2ab0:	f240 2301 	movw	r3, #513	; 0x201
    2ab4:	4299      	cmp	r1, r3
    2ab6:	d014      	beq.n	2ae2 <boot_serial_start+0x46>
        off += rc;
    2ab8:	460c      	mov	r4, r1
                /*
                 * Full line, no newline yet. Reset the input buffer.
                 */
                off = 0;
            }
            continue;
    2aba:	e012      	b.n	2ae2 <boot_serial_start+0x46>
        }
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
          in_buf[1] == SHELL_NLIP_PKT_START2) {
    2abc:	4a1e      	ldr	r2, [pc, #120]	; (2b38 <boot_serial_start+0x9c>)
    2abe:	7852      	ldrb	r2, [r2, #1]
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    2ac0:	2a09      	cmp	r2, #9
    2ac2:	d120      	bne.n	2b06 <boot_serial_start+0x6a>
            dec_off = 0;
    2ac4:	ab04      	add	r3, sp, #16
    2ac6:	2200      	movs	r2, #0
    2ac8:	f843 2d04 	str.w	r2, [r3, #-4]!
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    2acc:	f240 2201 	movw	r2, #513	; 0x201
    2ad0:	9200      	str	r2, [sp, #0]
    2ad2:	4a1a      	ldr	r2, [pc, #104]	; (2b3c <boot_serial_start+0xa0>)
    2ad4:	3902      	subs	r1, #2
    2ad6:	481a      	ldr	r0, [pc, #104]	; (2b40 <boot_serial_start+0xa4>)
    2ad8:	f003 fcde 	bl	6498 <boot_serial_in_dec>
          in_buf[1] == SHELL_NLIP_DATA_START2) {
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
        }

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
    2adc:	2801      	cmp	r0, #1
    2ade:	d022      	beq.n	2b26 <boot_serial_start+0x8a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
        }
        off = 0;
    2ae0:	2400      	movs	r4, #0
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2ae2:	682b      	ldr	r3, [r5, #0]
    2ae4:	aa02      	add	r2, sp, #8
    2ae6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2aea:	3101      	adds	r1, #1
    2aec:	4812      	ldr	r0, [pc, #72]	; (2b38 <boot_serial_start+0x9c>)
    2aee:	4420      	add	r0, r4
    2af0:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    2af2:	2800      	cmp	r0, #0
    2af4:	ddd9      	ble.n	2aaa <boot_serial_start+0xe>
        off += rc;
    2af6:	1821      	adds	r1, r4, r0
        if (!full_line) {
    2af8:	9c02      	ldr	r4, [sp, #8]
    2afa:	2c00      	cmp	r4, #0
    2afc:	d0d8      	beq.n	2ab0 <boot_serial_start+0x14>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    2afe:	4b0e      	ldr	r3, [pc, #56]	; (2b38 <boot_serial_start+0x9c>)
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	2b06      	cmp	r3, #6
    2b04:	d0da      	beq.n	2abc <boot_serial_start+0x20>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2b06:	2b04      	cmp	r3, #4
    2b08:	d1e8      	bne.n	2adc <boot_serial_start+0x40>
          in_buf[1] == SHELL_NLIP_DATA_START2) {
    2b0a:	4b0b      	ldr	r3, [pc, #44]	; (2b38 <boot_serial_start+0x9c>)
    2b0c:	785b      	ldrb	r3, [r3, #1]
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2b0e:	2b14      	cmp	r3, #20
    2b10:	d1e4      	bne.n	2adc <boot_serial_start+0x40>
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    2b12:	f240 2301 	movw	r3, #513	; 0x201
    2b16:	9300      	str	r3, [sp, #0]
    2b18:	ab03      	add	r3, sp, #12
    2b1a:	4a08      	ldr	r2, [pc, #32]	; (2b3c <boot_serial_start+0xa0>)
    2b1c:	3902      	subs	r1, #2
    2b1e:	4808      	ldr	r0, [pc, #32]	; (2b40 <boot_serial_start+0xa4>)
    2b20:	f003 fcba 	bl	6498 <boot_serial_in_dec>
    2b24:	e7da      	b.n	2adc <boot_serial_start+0x40>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    2b26:	9903      	ldr	r1, [sp, #12]
    2b28:	3902      	subs	r1, #2
    2b2a:	4806      	ldr	r0, [pc, #24]	; (2b44 <boot_serial_start+0xa8>)
    2b2c:	f7ff ff66 	bl	29fc <boot_serial_input>
        off = 0;
    2b30:	2400      	movs	r4, #0
    2b32:	e7d6      	b.n	2ae2 <boot_serial_start+0x46>
    2b34:	200039cc 	.word	0x200039cc
    2b38:	20003ca8 	.word	0x20003ca8
    2b3c:	20003aa0 	.word	0x20003aa0
    2b40:	20003caa 	.word	0x20003caa
    2b44:	20003aa2 	.word	0x20003aa2

00002b48 <z_arm_exc_exit>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    2b48:	4770      	bx	lr
    2b4a:	bf00      	nop

00002b4c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b4c:	4912      	ldr	r1, [pc, #72]	; (2b98 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b4e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b50:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    2b54:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b56:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b5a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b5e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2b60:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b64:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b68:	4f0c      	ldr	r7, [pc, #48]	; (2b9c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b6a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b6e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2b70:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b72:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b74:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    2b76:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b78:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b7a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2b7e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2b80:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2b82:	f003 fcfd 	bl	6580 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2b86:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b8a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    2b8e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2b92:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2b96:	4770      	bx	lr
    ldr r1, =_kernel
    2b98:	20003ff4 	.word	0x20003ff4
    ldr v4, =_SCS_ICSR
    2b9c:	e000ed04 	.word	0xe000ed04

00002ba0 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    2ba0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2ba4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2ba6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2baa:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2bae:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    2bb0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2bb4:	2902      	cmp	r1, #2
    beq _oops
    2bb6:	d0ff      	beq.n	2bb8 <_oops>

00002bb8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2bb8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2bba:	f003 fcb8 	bl	652e <z_do_kernel_oops>
    pop {r0, pc}
    2bbe:	bd01      	pop	{r0, pc}

00002bc0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    2bc0:	4901      	ldr	r1, [pc, #4]	; (2bc8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    2bc2:	2210      	movs	r2, #16
	str r2, [r1]
    2bc4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    2bc6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2bc8:	e000ed10 	.word	0xe000ed10

00002bcc <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    2bcc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2bce:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    2bd2:	bf30      	wfi

	bx lr
    2bd4:	4770      	bx	lr
    2bd6:	bf00      	nop

00002bd8 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    2bd8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2bda:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    2bde:	f8df c01c 	ldr.w	ip, [pc, #28]	; 2bfc <z_arm_bus_fault+0x24>
	ldr ip, [ip]
    2be2:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    2be6:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    2bea:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    2bec:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    2bf0:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    2bf4:	b501      	push	{r0, lr}
	bl z_arm_fault
    2bf6:	f000 f91b 	bl	2e30 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    2bfa:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    2bfc:	e000ed04 	.word	0xe000ed04

00002c00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2c00:	bf30      	wfi
    b z_SysNmiOnReset
    2c02:	f7ff bffd 	b.w	2c00 <z_SysNmiOnReset>
    2c06:	bf00      	nop

00002c08 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2c08:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c0a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c0e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c12:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    2c16:	4904      	ldr	r1, [pc, #16]	; (2c28 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c18:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c1a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    2c1c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c22:	4902      	ldr	r1, [pc, #8]	; (2c2c <_isr_wrapper+0x24>)
	bx r1
    2c24:	4708      	bx	r1
    2c26:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2c28:	00009348 	.word	0x00009348
	ldr r1, =z_arm_int_exit
    2c2c:	00002b49 	.word	0x00002b49

00002c30 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2c30:	4a09      	ldr	r2, [pc, #36]	; (2c58 <z_arch_swap+0x28>)
    2c32:	6893      	ldr	r3, [r2, #8]
    2c34:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    2c36:	4909      	ldr	r1, [pc, #36]	; (2c5c <z_arch_swap+0x2c>)
    2c38:	6809      	ldr	r1, [r1, #0]
    2c3a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c3c:	4908      	ldr	r1, [pc, #32]	; (2c60 <z_arch_swap+0x30>)
    2c3e:	684b      	ldr	r3, [r1, #4]
    2c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c44:	604b      	str	r3, [r1, #4]
    2c46:	2300      	movs	r3, #0
    2c48:	f383 8811 	msr	BASEPRI, r3
    2c4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2c50:	6893      	ldr	r3, [r2, #8]
}
    2c52:	6e98      	ldr	r0, [r3, #104]	; 0x68
    2c54:	4770      	bx	lr
    2c56:	bf00      	nop
    2c58:	20003ff4 	.word	0x20003ff4
    2c5c:	0000a100 	.word	0x0000a100
    2c60:	e000ed00 	.word	0xe000ed00

00002c64 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2c64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2c66:	2b00      	cmp	r3, #0
    2c68:	db08      	blt.n	2c7c <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c6a:	f000 001f 	and.w	r0, r0, #31
    2c6e:	095b      	lsrs	r3, r3, #5
    2c70:	2201      	movs	r2, #1
    2c72:	fa02 f000 	lsl.w	r0, r2, r0
    2c76:	4a02      	ldr	r2, [pc, #8]	; (2c80 <z_arch_irq_enable+0x1c>)
    2c78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop
    2c80:	e000e100 	.word	0xe000e100

00002c84 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2c84:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2c86:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2c88:	2b00      	cmp	r3, #0
    2c8a:	db08      	blt.n	2c9e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c8c:	0149      	lsls	r1, r1, #5
    2c8e:	b2c9      	uxtb	r1, r1
    2c90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2c98:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2c9c:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c9e:	f000 000f 	and.w	r0, r0, #15
    2ca2:	0149      	lsls	r1, r1, #5
    2ca4:	b2c9      	uxtb	r1, r1
    2ca6:	4b01      	ldr	r3, [pc, #4]	; (2cac <z_arm_irq_priority_set+0x28>)
    2ca8:	5419      	strb	r1, [r3, r0]
}
    2caa:	4770      	bx	lr
    2cac:	e000ed14 	.word	0xe000ed14

00002cb0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2cb0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2cb2:	4b08      	ldr	r3, [pc, #32]	; (2cd4 <z_arm_prep_c+0x24>)
    2cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2cb8:	4a07      	ldr	r2, [pc, #28]	; (2cd8 <z_arm_prep_c+0x28>)
    2cba:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cc0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    2cc4:	f001 ffc2 	bl	4c4c <z_bss_zero>
	z_data_copy();
    2cc8:	f001 ffcc 	bl	4c64 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    2ccc:	f000 f8e0 	bl	2e90 <z_arm_int_lib_init>
	z_cstart();
    2cd0:	f001 fff4 	bl	4cbc <z_cstart>
    2cd4:	00000000 	.word	0x00000000
    2cd8:	e000ed00 	.word	0xe000ed00

00002cdc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2cdc:	f003 f9a0 	bl	6020 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ce0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ce2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    2ce6:	4808      	ldr	r0, [pc, #32]	; (2d08 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2cec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2cee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2cf2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2cf6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2cf8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2cfa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2cfe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2d02:	f7ff ffd5 	bl	2cb0 <z_arm_prep_c>
    2d06:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    2d08:	20006828 	.word	0x20006828

00002d0c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2d0c:	b510      	push	{r4, lr}
    2d0e:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2d10:	4b0f      	ldr	r3, [pc, #60]	; (2d50 <mem_manage_fault+0x44>)
    2d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d18:	f013 0f02 	tst.w	r3, #2
    2d1c:	d00b      	beq.n	2d36 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    2d1e:	4b0c      	ldr	r3, [pc, #48]	; (2d50 <mem_manage_fault+0x44>)
    2d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d24:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d28:	d005      	beq.n	2d36 <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    2d2a:	b121      	cbz	r1, 2d36 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2d2c:	4a08      	ldr	r2, [pc, #32]	; (2d50 <mem_manage_fault+0x44>)
    2d2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2d34:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2d36:	4b06      	ldr	r3, [pc, #24]	; (2d50 <mem_manage_fault+0x44>)
    2d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d40:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2d44:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2d46:	f003 fbfe 	bl	6546 <memory_fault_recoverable>
    2d4a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2d4c:	2000      	movs	r0, #0
    2d4e:	bd10      	pop	{r4, pc}
    2d50:	e000ed00 	.word	0xe000ed00

00002d54 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2d54:	b510      	push	{r4, lr}
    2d56:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2d58:	4b12      	ldr	r3, [pc, #72]	; (2da4 <bus_fault+0x50>)
    2d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d60:	f413 7f00 	tst.w	r3, #512	; 0x200
    2d64:	d00b      	beq.n	2d7e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2d66:	4b0f      	ldr	r3, [pc, #60]	; (2da4 <bus_fault+0x50>)
    2d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2d70:	d005      	beq.n	2d7e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    2d72:	b121      	cbz	r1, 2d7e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2d74:	4a0b      	ldr	r2, [pc, #44]	; (2da4 <bus_fault+0x50>)
    2d76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2d7c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2d7e:	4b09      	ldr	r3, [pc, #36]	; (2da4 <bus_fault+0x50>)
    2d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d84:	f413 7f80 	tst.w	r3, #256	; 0x100
    2d88:	d101      	bne.n	2d8e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2d8a:	4b06      	ldr	r3, [pc, #24]	; (2da4 <bus_fault+0x50>)
    2d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2d8e:	4a05      	ldr	r2, [pc, #20]	; (2da4 <bus_fault+0x50>)
    2d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d92:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2d96:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    2d98:	f003 fbd5 	bl	6546 <memory_fault_recoverable>
    2d9c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2d9e:	2000      	movs	r0, #0
    2da0:	bd10      	pop	{r4, pc}
    2da2:	bf00      	nop
    2da4:	e000ed00 	.word	0xe000ed00

00002da8 <usage_fault>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2da8:	4b07      	ldr	r3, [pc, #28]	; (2dc8 <usage_fault+0x20>)
    2daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dba:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2dbe:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2dc2:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2dc4:	2000      	movs	r0, #0
    2dc6:	4770      	bx	lr
    2dc8:	e000ed00 	.word	0xe000ed00

00002dcc <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2dcc:	b508      	push	{r3, lr}
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    2dce:	2300      	movs	r3, #0
    2dd0:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2dd2:	4b13      	ldr	r3, [pc, #76]	; (2e20 <hard_fault+0x54>)
    2dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2dd6:	f013 0f02 	tst.w	r3, #2
    2dda:	d11c      	bne.n	2e16 <hard_fault+0x4a>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2ddc:	4b10      	ldr	r3, [pc, #64]	; (2e20 <hard_fault+0x54>)
    2dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2de0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    2de4:	d019      	beq.n	2e1a <hard_fault+0x4e>
    2de6:	460a      	mov	r2, r1
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    2de8:	4b0e      	ldr	r3, [pc, #56]	; (2e24 <hard_fault+0x58>)
    2dea:	781b      	ldrb	r3, [r3, #0]
    2dec:	b943      	cbnz	r3, 2e00 <hard_fault+0x34>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    2dee:	4b0e      	ldr	r3, [pc, #56]	; (2e28 <hard_fault+0x5c>)
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	b94b      	cbnz	r3, 2e08 <hard_fault+0x3c>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2df4:	4b0d      	ldr	r3, [pc, #52]	; (2e2c <hard_fault+0x60>)
    2df6:	881b      	ldrh	r3, [r3, #0]
    2df8:	b29b      	uxth	r3, r3
    2dfa:	b94b      	cbnz	r3, 2e10 <hard_fault+0x44>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2dfc:	2000      	movs	r0, #0
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    2dfe:	e00b      	b.n	2e18 <hard_fault+0x4c>
			reason = mem_manage_fault(esf, 1, recoverable);
    2e00:	2101      	movs	r1, #1
    2e02:	f7ff ff83 	bl	2d0c <mem_manage_fault>
    2e06:	e007      	b.n	2e18 <hard_fault+0x4c>
			reason = bus_fault(esf, 1, recoverable);
    2e08:	2101      	movs	r1, #1
    2e0a:	f7ff ffa3 	bl	2d54 <bus_fault>
    2e0e:	e003      	b.n	2e18 <hard_fault+0x4c>
			reason = usage_fault(esf);
    2e10:	f7ff ffca 	bl	2da8 <usage_fault>
    2e14:	e000      	b.n	2e18 <hard_fault+0x4c>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2e16:	2000      	movs	r0, #0
}
    2e18:	bd08      	pop	{r3, pc}
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2e1a:	2000      	movs	r0, #0
    2e1c:	e7fc      	b.n	2e18 <hard_fault+0x4c>
    2e1e:	bf00      	nop
    2e20:	e000ed00 	.word	0xe000ed00
    2e24:	e000ed28 	.word	0xe000ed28
    2e28:	e000ed29 	.word	0xe000ed29
    2e2c:	e000ed2a 	.word	0xe000ed2a

00002e30 <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    2e30:	b510      	push	{r4, lr}
    2e32:	b082      	sub	sp, #8
    2e34:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e36:	4b08      	ldr	r3, [pc, #32]	; (2e58 <z_arm_fault+0x28>)
    2e38:	6859      	ldr	r1, [r3, #4]
	}
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
    2e3a:	f10d 0207 	add.w	r2, sp, #7
    2e3e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    2e42:	f003 fb82 	bl	654a <fault_handle>
	if (recoverable) {
    2e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e4a:	b10b      	cbz	r3, 2e50 <z_arm_fault+0x20>
#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
}
    2e4c:	b002      	add	sp, #8
    2e4e:	bd10      	pop	{r4, pc}
	z_arm_fatal_error(reason, esf);
    2e50:	4621      	mov	r1, r4
    2e52:	f003 fb68 	bl	6526 <z_arm_fatal_error>
    2e56:	e7f9      	b.n	2e4c <z_arm_fault+0x1c>
    2e58:	e000ed00 	.word	0xe000ed00

00002e5c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e5c:	4a02      	ldr	r2, [pc, #8]	; (2e68 <z_arm_fault_init+0xc>)
    2e5e:	6953      	ldr	r3, [r2, #20]
    2e60:	f043 0310 	orr.w	r3, r3, #16
    2e64:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2e66:	4770      	bx	lr
    2e68:	e000ed00 	.word	0xe000ed00

00002e6c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2e6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e70:	4905      	ldr	r1, [pc, #20]	; (2e88 <sys_arch_reboot+0x1c>)
    2e72:	68ca      	ldr	r2, [r1, #12]
    2e74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <sys_arch_reboot+0x20>)
    2e7a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e7c:	60cb      	str	r3, [r1, #12]
    2e7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e82:	bf00      	nop
    2e84:	e7fd      	b.n	2e82 <sys_arch_reboot+0x16>
    2e86:	bf00      	nop
    2e88:	e000ed00 	.word	0xe000ed00
    2e8c:	05fa0004 	.word	0x05fa0004

00002e90 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    2e90:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2e92:	e00a      	b.n	2eaa <z_arm_int_lib_init+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2e94:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2e96:	2b00      	cmp	r3, #0
    2e98:	db0a      	blt.n	2eb0 <z_arm_int_lib_init+0x20>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e9a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2e9e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2ea2:	2120      	movs	r1, #32
    2ea4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2ea8:	3201      	adds	r2, #1
    2eaa:	2a40      	cmp	r2, #64	; 0x40
    2eac:	ddf2      	ble.n	2e94 <z_arm_int_lib_init+0x4>
	}
}
    2eae:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2eb0:	f002 010f 	and.w	r1, r2, #15
    2eb4:	4b02      	ldr	r3, [pc, #8]	; (2ec0 <z_arm_int_lib_init+0x30>)
    2eb6:	440b      	add	r3, r1
    2eb8:	2120      	movs	r1, #32
    2eba:	7619      	strb	r1, [r3, #24]
    2ebc:	e7f4      	b.n	2ea8 <z_arm_int_lib_init+0x18>
    2ebe:	bf00      	nop
    2ec0:	e000ecfc 	.word	0xe000ecfc

00002ec4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    2ec4:	b538      	push	{r3, r4, r5, lr}
    2ec6:	4605      	mov	r5, r0
	__asm__ volatile(
    2ec8:	f04f 0320 	mov.w	r3, #32
    2ecc:	f3ef 8411 	mrs	r4, BASEPRI
    2ed0:	f383 8811 	msr	BASEPRI, r3
    2ed4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    2ed8:	f006 f9c2 	bl	9260 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <z_impl_k_thread_abort+0x44>)
    2ede:	689b      	ldr	r3, [r3, #8]
    2ee0:	42ab      	cmp	r3, r5
    2ee2:	d109      	bne.n	2ef8 <z_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2ee4:	4b09      	ldr	r3, [pc, #36]	; (2f0c <z_impl_k_thread_abort+0x48>)
    2ee6:	685b      	ldr	r3, [r3, #4]
    2ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2eec:	b143      	cbz	r3, 2f00 <z_impl_k_thread_abort+0x3c>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2eee:	4a07      	ldr	r2, [pc, #28]	; (2f0c <z_impl_k_thread_abort+0x48>)
    2ef0:	6853      	ldr	r3, [r2, #4]
    2ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2ef6:	6053      	str	r3, [r2, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    2ef8:	4620      	mov	r0, r4
    2efa:	f001 ff45 	bl	4d88 <z_reschedule_irqlock>
}
    2efe:	bd38      	pop	{r3, r4, r5, pc}
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    2f00:	4620      	mov	r0, r4
    2f02:	f7ff fe95 	bl	2c30 <z_arch_swap>
    2f06:	bf00      	nop
    2f08:	20003ff4 	.word	0x20003ff4
    2f0c:	e000ed00 	.word	0xe000ed00

00002f10 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    2f10:	4b01      	ldr	r3, [pc, #4]	; (2f18 <mpu_init+0x8>)
    2f12:	4a02      	ldr	r2, [pc, #8]	; (2f1c <mpu_init+0xc>)
    2f14:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    2f16:	4770      	bx	lr
    2f18:	e000ed90 	.word	0xe000ed90
    2f1c:	0044ffaa 	.word	0x0044ffaa

00002f20 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    2f20:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2f22:	680b      	ldr	r3, [r1, #0]
    2f24:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2f28:	7a0c      	ldrb	r4, [r1, #8]
    2f2a:	f004 031f 	and.w	r3, r4, #31
    2f2e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2f30:	68cb      	ldr	r3, [r1, #12]
    2f32:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2f36:	0964      	lsrs	r4, r4, #5
    2f38:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2f3c:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2f40:	4903      	ldr	r1, [pc, #12]	; (2f50 <region_init+0x30>)
    2f42:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2f44:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2f46:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2f48:	f85d 4b04 	ldr.w	r4, [sp], #4
    2f4c:	4770      	bx	lr
    2f4e:	bf00      	nop
    2f50:	e000ed90 	.word	0xe000ed90

00002f54 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
    2f54:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    2f56:	280f      	cmp	r0, #15
    2f58:	d804      	bhi.n	2f64 <region_allocate_and_init+0x10>
    2f5a:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    2f5c:	f7ff ffe0 	bl	2f20 <region_init>

	return index;
}
    2f60:	4620      	mov	r0, r4
    2f62:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f64:	f04f 0400 	mov.w	r4, #0
    2f68:	2301      	movs	r3, #1
    2f6a:	f363 0402 	bfi	r4, r3, #0, #3
    2f6e:	f36f 04c5 	bfc	r4, #3, #3
    2f72:	4b07      	ldr	r3, [pc, #28]	; (2f90 <region_allocate_and_init+0x3c>)
    2f74:	4a07      	ldr	r2, [pc, #28]	; (2f94 <region_allocate_and_init+0x40>)
    2f76:	1a9b      	subs	r3, r3, r2
    2f78:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2f7c:	f363 148f 	bfi	r4, r3, #6, #10
    2f80:	4602      	mov	r2, r0
    2f82:	4905      	ldr	r1, [pc, #20]	; (2f98 <region_allocate_and_init+0x44>)
    2f84:	4620      	mov	r0, r4
    2f86:	f003 f855 	bl	6034 <log_string_sync>
		return -EINVAL;
    2f8a:	f06f 0415 	mvn.w	r4, #21
    2f8e:	e7e7      	b.n	2f60 <region_allocate_and_init+0xc>
    2f90:	000095f0 	.word	0x000095f0
    2f94:	000095e0 	.word	0x000095e0
    2f98:	00009f24 	.word	0x00009f24

00002f9c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    2f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fa0:	b087      	sub	sp, #28
    2fa2:	4680      	mov	r8, r0
    2fa4:	468b      	mov	fp, r1
    2fa6:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    2fa8:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    2faa:	2500      	movs	r5, #0
    2fac:	e05e      	b.n	306c <mpu_configure_regions+0xd0>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2fae:	2301      	movs	r3, #1
    2fb0:	f363 0002 	bfi	r0, r3, #0, #3
    2fb4:	f36f 00c5 	bfc	r0, #3, #3
    2fb8:	4b6b      	ldr	r3, [pc, #428]	; (3168 <mpu_configure_regions+0x1cc>)
    2fba:	4a6c      	ldr	r2, [pc, #432]	; (316c <mpu_configure_regions+0x1d0>)
    2fbc:	1a9b      	subs	r3, r3, r2
    2fbe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2fc2:	f363 108f 	bfi	r0, r3, #6, #10
    2fc6:	462a      	mov	r2, r5
    2fc8:	4969      	ldr	r1, [pc, #420]	; (3170 <mpu_configure_regions+0x1d4>)
    2fca:	f003 f833 	bl	6034 <log_string_sync>
			return -EINVAL;
    2fce:	f06f 0415 	mvn.w	r4, #21
    2fd2:	e016      	b.n	3002 <mpu_configure_regions+0x66>
	return -EINVAL;
    2fd4:	f06f 0615 	mvn.w	r6, #21
    2fd8:	e065      	b.n	30a6 <mpu_configure_regions+0x10a>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2fda:	f04f 0000 	mov.w	r0, #0
    2fde:	2301      	movs	r3, #1
    2fe0:	f363 0002 	bfi	r0, r3, #0, #3
    2fe4:	f36f 00c5 	bfc	r0, #3, #3
    2fe8:	4b5f      	ldr	r3, [pc, #380]	; (3168 <mpu_configure_regions+0x1cc>)
    2fea:	4a60      	ldr	r2, [pc, #384]	; (316c <mpu_configure_regions+0x1d0>)
    2fec:	1a9b      	subs	r3, r3, r2
    2fee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2ff2:	f363 108f 	bfi	r0, r3, #6, #10
    2ff6:	4632      	mov	r2, r6
    2ff8:	495e      	ldr	r1, [pc, #376]	; (3174 <mpu_configure_regions+0x1d8>)
    2ffa:	f003 f81b 	bl	6034 <log_string_sync>
				u_reg_index);
			return -EINVAL;
    2ffe:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3002:	4620      	mov	r0, r4
    3004:	b007      	add	sp, #28
    3006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    300a:	45ba      	cmp	sl, r7
    300c:	d164      	bne.n	30d8 <mpu_configure_regions+0x13c>
			mpu_configure_region(u_reg_index, regions[i]);
    300e:	b2f0      	uxtb	r0, r6
    3010:	f003 face 	bl	65b0 <mpu_configure_region>
    3014:	e029      	b.n	306a <mpu_configure_regions+0xce>
	MPU->RNR = index;
    3016:	4a58      	ldr	r2, [pc, #352]	; (3178 <mpu_configure_regions+0x1dc>)
    3018:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    301c:	68d3      	ldr	r3, [r2, #12]
    301e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3022:	f020 001f 	bic.w	r0, r0, #31
    3026:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3028:	60d0      	str	r0, [r2, #12]
			reg_index =
    302a:	f858 1009 	ldr.w	r1, [r8, r9]
    302e:	b2e0      	uxtb	r0, r4
    3030:	f003 fabe 	bl	65b0 <mpu_configure_region>
    3034:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3036:	f110 0f16 	cmn.w	r0, #22
    303a:	d0e2      	beq.n	3002 <mpu_configure_regions+0x66>
			reg_index++;
    303c:	3401      	adds	r4, #1
    303e:	e014      	b.n	306a <mpu_configure_regions+0xce>
				regions[i]->start - 1);
    3040:	3b01      	subs	r3, #1
	MPU->RNR = index;
    3042:	494d      	ldr	r1, [pc, #308]	; (3178 <mpu_configure_regions+0x1dc>)
    3044:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3048:	690a      	ldr	r2, [r1, #16]
    304a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    304e:	f023 031f 	bic.w	r3, r3, #31
    3052:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3054:	610b      	str	r3, [r1, #16]
			reg_index =
    3056:	f858 1009 	ldr.w	r1, [r8, r9]
    305a:	b2e0      	uxtb	r0, r4
    305c:	f003 faa8 	bl	65b0 <mpu_configure_region>
    3060:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3062:	f110 0f16 	cmn.w	r0, #22
    3066:	d0cc      	beq.n	3002 <mpu_configure_regions+0x66>
			reg_index++;
    3068:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    306a:	3501      	adds	r5, #1
    306c:	455d      	cmp	r5, fp
    306e:	dac8      	bge.n	3002 <mpu_configure_regions+0x66>
		if (regions[i]->size == 0U) {
    3070:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3074:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    3078:	6877      	ldr	r7, [r6, #4]
    307a:	2f00      	cmp	r7, #0
    307c:	d0f5      	beq.n	306a <mpu_configure_regions+0xce>
		if (do_sanity_check &&
    307e:	9b01      	ldr	r3, [sp, #4]
    3080:	b123      	cbz	r3, 308c <mpu_configure_regions+0xf0>
			(!mpu_partition_is_valid(regions[i]))) {
    3082:	4630      	mov	r0, r6
    3084:	f003 fa82 	bl	658c <mpu_partition_is_valid>
		if (do_sanity_check &&
    3088:	2800      	cmp	r0, #0
    308a:	d090      	beq.n	2fae <mpu_configure_regions+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    308c:	f8d6 a000 	ldr.w	sl, [r6]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3090:	4650      	mov	r0, sl
    3092:	f002 fd35 	bl	5b00 <arm_cmse_mpu_region_get>
    3096:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3098:	eb07 000a 	add.w	r0, r7, sl
    309c:	3801      	subs	r0, #1
    309e:	f002 fd2f 	bl	5b00 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    30a2:	4286      	cmp	r6, r0
    30a4:	d196      	bne.n	2fd4 <mpu_configure_regions+0x38>
		if ((u_reg_index == -EINVAL) ||
    30a6:	f116 0f16 	cmn.w	r6, #22
    30aa:	d096      	beq.n	2fda <mpu_configure_regions+0x3e>
			(u_reg_index > (reg_index - 1))) {
    30ac:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    30ae:	42b3      	cmp	r3, r6
    30b0:	db93      	blt.n	2fda <mpu_configure_regions+0x3e>
		u32_t u_reg_base = mpu_region_get_base(u_reg_index);
    30b2:	46b4      	mov	ip, r6
	MPU->RNR = index;
    30b4:	4b30      	ldr	r3, [pc, #192]	; (3178 <mpu_configure_regions+0x1dc>)
    30b6:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    30b8:	68da      	ldr	r2, [r3, #12]
    30ba:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    30be:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    30c0:	691f      	ldr	r7, [r3, #16]
    30c2:	f047 071f 	orr.w	r7, r7, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    30c6:	f858 1009 	ldr.w	r1, [r8, r9]
    30ca:	680b      	ldr	r3, [r1, #0]
    30cc:	6848      	ldr	r0, [r1, #4]
    30ce:	4418      	add	r0, r3
    30d0:	f100 3aff 	add.w	sl, r0, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    30d4:	4293      	cmp	r3, r2
    30d6:	d098      	beq.n	300a <mpu_configure_regions+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    30d8:	4293      	cmp	r3, r2
    30da:	d09c      	beq.n	3016 <mpu_configure_regions+0x7a>
		} else if (reg_last == u_reg_last) {
    30dc:	45ba      	cmp	sl, r7
    30de:	d0af      	beq.n	3040 <mpu_configure_regions+0xa4>
				regions[i]->start - 1);
    30e0:	3b01      	subs	r3, #1
	MPU->RNR = index;
    30e2:	4925      	ldr	r1, [pc, #148]	; (3178 <mpu_configure_regions+0x1dc>)
    30e4:	4666      	mov	r6, ip
    30e6:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30ea:	690a      	ldr	r2, [r1, #16]
    30ec:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    30f0:	f023 031f 	bic.w	r3, r3, #31
    30f4:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30f6:	610b      	str	r3, [r1, #16]
			reg_index =
    30f8:	f858 1009 	ldr.w	r1, [r8, r9]
    30fc:	b2e0      	uxtb	r0, r4
    30fe:	f003 fa57 	bl	65b0 <mpu_configure_region>
    3102:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3104:	f110 0f16 	cmn.w	r0, #22
    3108:	f43f af7b 	beq.w	3002 <mpu_configure_regions+0x66>
			reg_index++;
    310c:	3001      	adds	r0, #1
	MPU->RNR = index;
    310e:	4b1a      	ldr	r3, [pc, #104]	; (3178 <mpu_configure_regions+0x1dc>)
    3110:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    3112:	68d9      	ldr	r1, [r3, #12]
    3114:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3118:	f361 0204 	bfi	r2, r1, #0, #5
    311c:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3120:	691b      	ldr	r3, [r3, #16]
    3122:	f3c3 0342 	ubfx	r3, r3, #1, #3
    3126:	b2d2      	uxtb	r2, r2
    3128:	f363 1247 	bfi	r2, r3, #5, #3
    312c:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    3130:	f858 2009 	ldr.w	r2, [r8, r9]
    3134:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    3136:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    3138:	4421      	add	r1, r4
    313a:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    313c:	6813      	ldr	r3, [r2, #0]
    313e:	4423      	add	r3, r4
    3140:	f023 031f 	bic.w	r3, r3, #31
    3144:	eba7 070a 	sub.w	r7, r7, sl
    3148:	441f      	add	r7, r3
    314a:	3f01      	subs	r7, #1
    314c:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    3150:	9705      	str	r7, [sp, #20]
			reg_index =
    3152:	a902      	add	r1, sp, #8
    3154:	b2c0      	uxtb	r0, r0
    3156:	f7ff fefd 	bl	2f54 <region_allocate_and_init>
    315a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    315c:	f110 0f16 	cmn.w	r0, #22
    3160:	f43f af4f 	beq.w	3002 <mpu_configure_regions+0x66>
			reg_index++;
    3164:	3401      	adds	r4, #1
    3166:	e780      	b.n	306a <mpu_configure_regions+0xce>
    3168:	000095f0 	.word	0x000095f0
    316c:	000095e0 	.word	0x000095e0
    3170:	00009edc 	.word	0x00009edc
    3174:	00009f00 	.word	0x00009f00
    3178:	e000ed90 	.word	0xe000ed90

0000317c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
    317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    317e:	4606      	mov	r6, r0
    3180:	460f      	mov	r7, r1
	int mpu_reg_index = static_regions_num;
    3182:	4b10      	ldr	r3, [pc, #64]	; (31c4 <mpu_configure_dynamic_mpu_regions+0x48>)
    3184:	781d      	ldrb	r5, [r3, #0]
    3186:	462b      	mov	r3, r5

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3188:	e004      	b.n	3194 <mpu_configure_dynamic_mpu_regions+0x18>
  mpu->RNR = rnr;
    318a:	4a0f      	ldr	r2, [pc, #60]	; (31c8 <mpu_configure_dynamic_mpu_regions+0x4c>)
    318c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    318e:	2100      	movs	r1, #0
    3190:	6111      	str	r1, [r2, #16]
    3192:	3301      	adds	r3, #1
    3194:	2b0f      	cmp	r3, #15
    3196:	ddf8      	ble.n	318a <mpu_configure_dynamic_mpu_regions+0xe>
	}

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    3198:	2400      	movs	r4, #0
    319a:	2c00      	cmp	r4, #0
    319c:	dd06      	ble.n	31ac <mpu_configure_dynamic_mpu_regions+0x30>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    319e:	2301      	movs	r3, #1
    31a0:	462a      	mov	r2, r5
    31a2:	4639      	mov	r1, r7
    31a4:	4630      	mov	r0, r6
    31a6:	f7ff fef9 	bl	2f9c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	return mpu_reg_index;
}
    31aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		region_init(dyn_reg_info[i].index,
    31ac:	4807      	ldr	r0, [pc, #28]	; (31cc <mpu_configure_dynamic_mpu_regions+0x50>)
    31ae:	00a3      	lsls	r3, r4, #2
    31b0:	4423      	add	r3, r4
    31b2:	009a      	lsls	r2, r3, #2
    31b4:	1881      	adds	r1, r0, r2
    31b6:	3104      	adds	r1, #4
    31b8:	5880      	ldr	r0, [r0, r2]
    31ba:	f7ff feb1 	bl	2f20 <region_init>
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    31be:	3401      	adds	r4, #1
    31c0:	e7eb      	b.n	319a <mpu_configure_dynamic_mpu_regions+0x1e>
    31c2:	bf00      	nop
    31c4:	20004024 	.word	0x20004024
    31c8:	e000ed90 	.word	0xe000ed90
    31cc:	20003eac 	.word	0x20003eac

000031d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    31d0:	4b03      	ldr	r3, [pc, #12]	; (31e0 <arm_core_mpu_enable+0x10>)
    31d2:	2205      	movs	r2, #5
    31d4:	605a      	str	r2, [r3, #4]
    31d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31da:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    31de:	4770      	bx	lr
    31e0:	e000ed90 	.word	0xe000ed90

000031e4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    31e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    31e8:	4b01      	ldr	r3, [pc, #4]	; (31f0 <arm_core_mpu_disable+0xc>)
    31ea:	2200      	movs	r2, #0
    31ec:	605a      	str	r2, [r3, #4]
}
    31ee:	4770      	bx	lr
    31f0:	e000ed90 	.word	0xe000ed90

000031f4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    31f4:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    31f6:	4b0e      	ldr	r3, [pc, #56]	; (3230 <arm_mpu_init+0x3c>)
    31f8:	681d      	ldr	r5, [r3, #0]
    31fa:	2d10      	cmp	r5, #16
    31fc:	d815      	bhi.n	322a <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    31fe:	f7ff fff1 	bl	31e4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();
    3202:	f7ff fe85 	bl	2f10 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3206:	2400      	movs	r4, #0
    3208:	e007      	b.n	321a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    320a:	4b09      	ldr	r3, [pc, #36]	; (3230 <arm_mpu_init+0x3c>)
    320c:	6859      	ldr	r1, [r3, #4]
    320e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    3212:	4620      	mov	r0, r4
    3214:	f7ff fe84 	bl	2f20 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3218:	3401      	adds	r4, #1
    321a:	42a5      	cmp	r5, r4
    321c:	d8f5      	bhi.n	320a <arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    321e:	4b05      	ldr	r3, [pc, #20]	; (3234 <arm_mpu_init+0x40>)
    3220:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3222:	f7ff ffd5 	bl	31d0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    3226:	2000      	movs	r0, #0
}
    3228:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    322a:	f04f 30ff 	mov.w	r0, #4294967295
    322e:	e7fb      	b.n	3228 <arm_mpu_init+0x34>
    3230:	00009c48 	.word	0x00009c48
    3234:	20004024 	.word	0x20004024

00003238 <gpiote_channel_alloc>:
	return port->config->config_info;
}

static int gpiote_channel_alloc(u32_t abs_pin, nrf_gpiote_polarity_t polarity)
{
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3238:	2300      	movs	r3, #0
    323a:	2b07      	cmp	r3, #7
    323c:	d83a      	bhi.n	32b4 <gpiote_channel_alloc+0x7c>
{
    323e:	b470      	push	{r4, r5, r6}
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    3240:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    3244:	4c1d      	ldr	r4, [pc, #116]	; (32bc <gpiote_channel_alloc+0x84>)
    3246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    324a:	f012 0f03 	tst.w	r2, #3
    324e:	d007      	beq.n	3260 <gpiote_channel_alloc+0x28>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3250:	3301      	adds	r3, #1
    3252:	b2db      	uxtb	r3, r3
    3254:	2b07      	cmp	r3, #7
    3256:	d9f3      	bls.n	3240 <gpiote_channel_alloc+0x8>
			nrf_gpiote_int_enable(BIT(channel));
			return 0;
		}
	}

	return -ENODEV;
    3258:	f06f 0012 	mvn.w	r0, #18
}
    325c:	bc70      	pop	{r4, r5, r6}
    325e:	4770      	bx	lr
			nrf_gpiote_events_t evt =
    3260:	009c      	lsls	r4, r3, #2
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3262:	4a16      	ldr	r2, [pc, #88]	; (32bc <gpiote_channel_alloc+0x84>)
    3264:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    3268:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    326c:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    3270:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    3274:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3278:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    327c:	0200      	lsls	r0, r0, #8
    327e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3282:	0409      	lsls	r1, r1, #16
    3284:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3288:	4308      	orrs	r0, r1
    328a:	4330      	orrs	r0, r6
    328c:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
    return ((uint32_t)NRF_GPIOTE + event);
    3290:	f104 41a0 	add.w	r1, r4, #1342177280	; 0x50000000
    3294:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3298:	2000      	movs	r0, #0
    329a:	6008      	str	r0, [r1, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    329c:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
    32a0:	f041 0101 	orr.w	r1, r1, #1
    32a4:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			nrf_gpiote_int_enable(BIT(channel));
    32a8:	2101      	movs	r1, #1
    32aa:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENSET = mask;
    32ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
			return 0;
    32b2:	e7d3      	b.n	325c <gpiote_channel_alloc+0x24>
	return -ENODEV;
    32b4:	f06f 0012 	mvn.w	r0, #18
}
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	5000d000 	.word	0x5000d000

000032c0 <gpiote_channel_free>:

static void gpiote_channel_free(u32_t abs_pin)
{
    32c0:	b410      	push	{r4}
    return (NRF_GPIOTE->INTENSET & mask);
    32c2:	4b14      	ldr	r3, [pc, #80]	; (3314 <gpiote_channel_free+0x54>)
    32c4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    32c8:	b2e4      	uxtb	r4, r4
	u32_t intenset = nrf_gpiote_int_is_enabled(NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    32ca:	2300      	movs	r3, #0
    32cc:	e000      	b.n	32d0 <gpiote_channel_free+0x10>
    32ce:	3301      	adds	r3, #1
    32d0:	2b07      	cmp	r3, #7
    32d2:	d81b      	bhi.n	330c <gpiote_channel_free+0x4c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    32d4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    32d8:	490e      	ldr	r1, [pc, #56]	; (3314 <gpiote_channel_free+0x54>)
    32da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    32de:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    32e2:	4290      	cmp	r0, r2
    32e4:	d1f3      	bne.n	32ce <gpiote_channel_free+0xe>
		    && (intenset & BIT(i))) {
    32e6:	fa24 f203 	lsr.w	r2, r4, r3
    32ea:	f012 0f01 	tst.w	r2, #1
    32ee:	d0ee      	beq.n	32ce <gpiote_channel_free+0xe>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    32f0:	460a      	mov	r2, r1
    32f2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    32f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    32fa:	f021 0101 	bic.w	r1, r1, #1
    32fe:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_event_disable(i);
			nrf_gpiote_int_disable(BIT(i));
    3302:	2101      	movs	r1, #1
    3304:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENCLR = mask;
    3308:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			return;
		}
	}
}
    330c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	5000d000 	.word	0x5000d000

00003318 <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	460d      	mov	r5, r1
	return port->driver_data;
    331c:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    331e:	6803      	ldr	r3, [r0, #0]
    3320:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3322:	791b      	ldrb	r3, [r3, #4]
    3324:	f001 041f 	and.w	r4, r1, #31
    3328:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	int res = 0;

	gpiote_channel_free(abs_pin);
    332c:	4620      	mov	r0, r4
    332e:	f7ff ffc7 	bl	32c0 <gpiote_channel_free>
__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3332:	4b2b      	ldr	r3, [pc, #172]	; (33e0 <gpiote_pin_int_cfg+0xc8>)
    3334:	f104 0280 	add.w	r2, r4, #128	; 0x80
    3338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    333c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    3340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    334c:	68b3      	ldr	r3, [r6, #8]
    334e:	40eb      	lsrs	r3, r5
    3350:	f013 0f01 	tst.w	r3, #1
    3354:	d03f      	beq.n	33d6 <gpiote_pin_int_cfg+0xbe>
    3356:	68f3      	ldr	r3, [r6, #12]
    3358:	40eb      	lsrs	r3, r5
    335a:	f013 0f01 	tst.w	r3, #1
    335e:	d03c      	beq.n	33da <gpiote_pin_int_cfg+0xc2>
		if (data->trig_edge & BIT(pin)) {
    3360:	6973      	ldr	r3, [r6, #20]
    3362:	40eb      	lsrs	r3, r5
    3364:	f013 0f01 	tst.w	r3, #1
    3368:	d01a      	beq.n	33a0 <gpiote_pin_int_cfg+0x88>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
    336a:	69b3      	ldr	r3, [r6, #24]
    336c:	40eb      	lsrs	r3, r5
    336e:	f013 0f01 	tst.w	r3, #1
    3372:	d10e      	bne.n	3392 <gpiote_pin_int_cfg+0x7a>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
    3374:	6933      	ldr	r3, [r6, #16]
    3376:	40eb      	lsrs	r3, r5
    3378:	f003 0301 	and.w	r3, r3, #1
    337c:	b2da      	uxtb	r2, r3
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    337e:	69f3      	ldr	r3, [r6, #28]
    3380:	fa23 f505 	lsr.w	r5, r3, r5
    3384:	f005 0501 	and.w	r5, r5, #1
			} else if (((data->active_level & BIT(pin)) != 0U)
    3388:	b2ed      	uxtb	r5, r5
    338a:	42aa      	cmp	r2, r5
    338c:	d006      	beq.n	339c <gpiote_pin_int_cfg+0x84>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    338e:	2101      	movs	r1, #1
    3390:	e000      	b.n	3394 <gpiote_pin_int_cfg+0x7c>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3392:	2103      	movs	r1, #3
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
			}

			res = gpiote_channel_alloc(abs_pin, pol);
    3394:	4620      	mov	r0, r4
    3396:	f7ff ff4f 	bl	3238 <gpiote_channel_alloc>
    339a:	e01d      	b.n	33d8 <gpiote_pin_int_cfg+0xc0>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    339c:	2102      	movs	r1, #2
    339e:	e7f9      	b.n	3394 <gpiote_pin_int_cfg+0x7c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    33a0:	6933      	ldr	r3, [r6, #16]
    33a2:	69f2      	ldr	r2, [r6, #28]
    33a4:	4053      	eors	r3, r2
    33a6:	fa23 f505 	lsr.w	r5, r3, r5
    33aa:	f015 0f01 	tst.w	r5, #1
    33ae:	d010      	beq.n	33d2 <gpiote_pin_int_cfg+0xba>
		return NRF_GPIO_PIN_SENSE_HIGH;
    33b0:	2002      	movs	r0, #2
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    33b2:	4b0b      	ldr	r3, [pc, #44]	; (33e0 <gpiote_pin_int_cfg+0xc8>)
    33b4:	3480      	adds	r4, #128	; 0x80
    33b6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    33ba:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    33be:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    33c2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    33c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    33ca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	int res = 0;
    33ce:	2000      	movs	r0, #0
    33d0:	e002      	b.n	33d8 <gpiote_pin_int_cfg+0xc0>
	return NRF_GPIO_PIN_SENSE_LOW;
    33d2:	2003      	movs	r0, #3
    33d4:	e7ed      	b.n	33b2 <gpiote_pin_int_cfg+0x9a>
	int res = 0;
    33d6:	2000      	movs	r0, #0

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
    33d8:	bd70      	pop	{r4, r5, r6, pc}
	int res = 0;
    33da:	2000      	movs	r0, #0
	return res;
    33dc:	e7fc      	b.n	33d8 <gpiote_pin_int_cfg+0xc0>
    33de:	bf00      	nop
    33e0:	50842500 	.word	0x50842500

000033e4 <gpio_nrfx_config>:

static int gpio_nrfx_config(struct device *port, int access_op,
			    u32_t pin, int flags)
{
    33e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33e8:	b083      	sub	sp, #12
	return port->driver_data;
    33ea:	6884      	ldr	r4, [r0, #8]
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;
	u8_t from_pin;
	u8_t to_pin;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    33ec:	f403 4570 	and.w	r5, r3, #61440	; 0xf000
    33f0:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
    33f4:	d03f      	beq.n	3476 <gpio_nrfx_config+0x92>
    33f6:	dd0c      	ble.n	3412 <gpio_nrfx_config+0x2e>
    33f8:	f5b5 4fe0 	cmp.w	r5, #28672	; 0x7000
    33fc:	d038      	beq.n	3470 <gpio_nrfx_config+0x8c>
    33fe:	dd12      	ble.n	3426 <gpio_nrfx_config+0x42>
    3400:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
    3404:	d02b      	beq.n	345e <gpio_nrfx_config+0x7a>
    3406:	f5b5 4f50 	cmp.w	r5, #53248	; 0xd000
    340a:	d109      	bne.n	3420 <gpio_nrfx_config+0x3c>
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_DISCONNECT_HIGH:
		drive = NRF_GPIO_PIN_H0D1;
    340c:	f04f 0a07 	mov.w	sl, #7
		break;
    3410:	e011      	b.n	3436 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3412:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    3416:	d025      	beq.n	3464 <gpio_nrfx_config+0x80>
    3418:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
    341c:	d025      	beq.n	346a <gpio_nrfx_config+0x86>
    341e:	b145      	cbz	r5, 3432 <gpio_nrfx_config+0x4e>
	case GPIO_DS_DISCONNECT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_D0H1;
		break;

	default:
		return -EINVAL;
    3420:	f06f 0315 	mvn.w	r3, #21
    3424:	e09b      	b.n	355e <gpio_nrfx_config+0x17a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3426:	f5b5 4fa0 	cmp.w	r5, #20480	; 0x5000
    342a:	d1f9      	bne.n	3420 <gpio_nrfx_config+0x3c>
		drive = NRF_GPIO_PIN_H0H1;
    342c:	f04f 0a03 	mov.w	sl, #3
		break;
    3430:	e001      	b.n	3436 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0S1;
    3432:	f04f 0a00 	mov.w	sl, #0
	}

	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3436:	f403 7540 	and.w	r5, r3, #768	; 0x300
    343a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    343e:	d020      	beq.n	3482 <gpio_nrfx_config+0x9e>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    3440:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    3444:	d01a      	beq.n	347c <gpio_nrfx_config+0x98>
		pull = NRF_GPIO_PIN_PULLDOWN;
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
    3446:	2500      	movs	r5, #0
    3448:	9501      	str	r5, [sp, #4]
    344a:	461e      	mov	r6, r3
    344c:	4607      	mov	r7, r0
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = (dir == NRF_GPIO_PIN_DIR_INPUT)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    344e:	f003 0b01 	and.w	fp, r3, #1
    3452:	46d9      	mov	r9, fp

	if (access_op == GPIO_ACCESS_BY_PORT) {
    3454:	2901      	cmp	r1, #1
    3456:	d017      	beq.n	3488 <gpio_nrfx_config+0xa4>
		from_pin = 0U;
		to_pin   = 31U;
	} else {
		from_pin = pin;
    3458:	b2d5      	uxtb	r5, r2
		to_pin   = pin;
    345a:	46a8      	mov	r8, r5
    345c:	e040      	b.n	34e0 <gpio_nrfx_config+0xfc>
		drive = NRF_GPIO_PIN_S0D1;
    345e:	f04f 0a06 	mov.w	sl, #6
		break;
    3462:	e7e8      	b.n	3436 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_H0S1;
    3464:	f04f 0a01 	mov.w	sl, #1
		break;
    3468:	e7e5      	b.n	3436 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0S1;
    346a:	f04f 0a04 	mov.w	sl, #4
		break;
    346e:	e7e2      	b.n	3436 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    3470:	f04f 0a05 	mov.w	sl, #5
		break;
    3474:	e7df      	b.n	3436 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0H1;
    3476:	f04f 0a02 	mov.w	sl, #2
    347a:	e7dc      	b.n	3436 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLDOWN;
    347c:	2501      	movs	r5, #1
    347e:	9501      	str	r5, [sp, #4]
    3480:	e7e3      	b.n	344a <gpio_nrfx_config+0x66>
		pull = NRF_GPIO_PIN_PULLUP;
    3482:	2503      	movs	r5, #3
    3484:	9501      	str	r5, [sp, #4]
    3486:	e7e0      	b.n	344a <gpio_nrfx_config+0x66>
		to_pin   = 31U;
    3488:	f04f 081f 	mov.w	r8, #31
		from_pin = 0U;
    348c:	2500      	movs	r5, #0
	}

	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    348e:	e027      	b.n	34e0 <gpio_nrfx_config+0xfc>

		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
					      curr_pin),
			     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3490:	68a3      	ldr	r3, [r4, #8]
    3492:	2201      	movs	r2, #1
    3494:	40aa      	lsls	r2, r5
    3496:	ea23 0302 	bic.w	r3, r3, r2
    349a:	e03d      	b.n	3518 <gpio_nrfx_config+0x134>
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    349c:	6963      	ldr	r3, [r4, #20]
    349e:	2201      	movs	r2, #1
    34a0:	408a      	lsls	r2, r1
    34a2:	ea23 0302 	bic.w	r3, r3, r2
    34a6:	e03f      	b.n	3528 <gpio_nrfx_config+0x144>
		WRITE_BIT(data->double_edge, curr_pin,
    34a8:	69a3      	ldr	r3, [r4, #24]
    34aa:	2201      	movs	r2, #1
    34ac:	408a      	lsls	r2, r1
    34ae:	ea23 0302 	bic.w	r3, r3, r2
    34b2:	e041      	b.n	3538 <gpio_nrfx_config+0x154>
			  flags & GPIO_INT_DOUBLE_EDGE);
		WRITE_BIT(data->active_level, curr_pin,
    34b4:	6923      	ldr	r3, [r4, #16]
    34b6:	2201      	movs	r2, #1
    34b8:	408a      	lsls	r2, r1
    34ba:	ea23 0302 	bic.w	r3, r3, r2
    34be:	e043      	b.n	3548 <gpio_nrfx_config+0x164>
			  flags & GPIO_INT_ACTIVE_HIGH);
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    34c0:	69e3      	ldr	r3, [r4, #28]
    34c2:	2201      	movs	r2, #1
    34c4:	fa02 f101 	lsl.w	r1, r2, r1
    34c8:	ea23 0101 	bic.w	r1, r3, r1
    34cc:	61e1      	str	r1, [r4, #28]

		res = gpiote_pin_int_cfg(port, curr_pin);
    34ce:	4629      	mov	r1, r5
    34d0:	4638      	mov	r0, r7
    34d2:	f7ff ff21 	bl	3318 <gpiote_pin_int_cfg>
		if (res != 0) {
    34d6:	4603      	mov	r3, r0
    34d8:	2800      	cmp	r0, #0
    34da:	d140      	bne.n	355e <gpio_nrfx_config+0x17a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    34dc:	3501      	adds	r5, #1
    34de:	b2ed      	uxtb	r5, r5
    34e0:	45a8      	cmp	r8, r5
    34e2:	d33b      	bcc.n	355c <gpio_nrfx_config+0x178>
	return port->config->config_info;
    34e4:	683b      	ldr	r3, [r7, #0]
    34e6:	689b      	ldr	r3, [r3, #8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    34e8:	791a      	ldrb	r2, [r3, #4]
    34ea:	4629      	mov	r1, r5
    34ec:	f005 031f 	and.w	r3, r5, #31
    34f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    34f4:	ea4b 0249 	orr.w	r2, fp, r9, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    34f8:	9801      	ldr	r0, [sp, #4]
    34fa:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    34fe:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3502:	3380      	adds	r3, #128	; 0x80
    3504:	4818      	ldr	r0, [pc, #96]	; (3568 <gpio_nrfx_config+0x184>)
    3506:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    350a:	f016 0f02 	tst.w	r6, #2
    350e:	d0bf      	beq.n	3490 <gpio_nrfx_config+0xac>
    3510:	68a3      	ldr	r3, [r4, #8]
    3512:	2201      	movs	r2, #1
    3514:	40aa      	lsls	r2, r5
    3516:	4313      	orrs	r3, r2
    3518:	60a3      	str	r3, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    351a:	f016 0f20 	tst.w	r6, #32
    351e:	d0bd      	beq.n	349c <gpio_nrfx_config+0xb8>
    3520:	6963      	ldr	r3, [r4, #20]
    3522:	2201      	movs	r2, #1
    3524:	408a      	lsls	r2, r1
    3526:	4313      	orrs	r3, r2
    3528:	6163      	str	r3, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    352a:	f016 0f40 	tst.w	r6, #64	; 0x40
    352e:	d0bb      	beq.n	34a8 <gpio_nrfx_config+0xc4>
    3530:	69a3      	ldr	r3, [r4, #24]
    3532:	2201      	movs	r2, #1
    3534:	408a      	lsls	r2, r1
    3536:	4313      	orrs	r3, r2
    3538:	61a3      	str	r3, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    353a:	f016 0f04 	tst.w	r6, #4
    353e:	d0b9      	beq.n	34b4 <gpio_nrfx_config+0xd0>
    3540:	6923      	ldr	r3, [r4, #16]
    3542:	2201      	movs	r2, #1
    3544:	408a      	lsls	r2, r1
    3546:	4313      	orrs	r3, r2
    3548:	6123      	str	r3, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    354a:	f016 0f80 	tst.w	r6, #128	; 0x80
    354e:	d0b7      	beq.n	34c0 <gpio_nrfx_config+0xdc>
    3550:	69e3      	ldr	r3, [r4, #28]
    3552:	2201      	movs	r2, #1
    3554:	fa02 f101 	lsl.w	r1, r2, r1
    3558:	4319      	orrs	r1, r3
    355a:	e7b7      	b.n	34cc <gpio_nrfx_config+0xe8>
			return res;
		}
	}

	return 0;
    355c:	2300      	movs	r3, #0
}
    355e:	4618      	mov	r0, r3
    3560:	b003      	add	sp, #12
    3562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3566:	bf00      	nop
    3568:	50842500 	.word	0x50842500

0000356c <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(struct device *port)
{
    356c:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    356e:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    3570:	6803      	ldr	r3, [r0, #0]
    3572:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    3574:	68f3      	ldr	r3, [r6, #12]
    3576:	68b2      	ldr	r2, [r6, #8]
    3578:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    357a:	6973      	ldr	r3, [r6, #20]
    357c:	69b1      	ldr	r1, [r6, #24]
    357e:	430b      	orrs	r3, r1
    3580:	ea22 0203 	bic.w	r2, r2, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    3584:	2101      	movs	r1, #1
	u32_t pin = 0U;
    3586:	2000      	movs	r0, #0
	u32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    3588:	e013      	b.n	35b2 <cfg_level_pins+0x46>
	return NRF_GPIO_PIN_SENSE_LOW;
    358a:	f04f 0c03 	mov.w	ip, #3
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    358e:	4c13      	ldr	r4, [pc, #76]	; (35dc <cfg_level_pins+0x70>)
    3590:	3380      	adds	r3, #128	; 0x80
    3592:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    3596:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    359a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    359e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    35a2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    35a6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
		if (level_pins & bit) {
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			u32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    35aa:	ea22 0201 	bic.w	r2, r2, r1
		}
		++pin;
    35ae:	3001      	adds	r0, #1
		bit <<= 1;
    35b0:	0049      	lsls	r1, r1, #1
	while (level_pins) {
    35b2:	b182      	cbz	r2, 35d6 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    35b4:	4211      	tst	r1, r2
    35b6:	d0fa      	beq.n	35ae <cfg_level_pins+0x42>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    35b8:	793c      	ldrb	r4, [r7, #4]
    35ba:	f000 031f 	and.w	r3, r0, #31
    35be:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    35c2:	6934      	ldr	r4, [r6, #16]
    35c4:	69f5      	ldr	r5, [r6, #28]
    35c6:	406c      	eors	r4, r5
    35c8:	40c4      	lsrs	r4, r0
    35ca:	f014 0f01 	tst.w	r4, #1
    35ce:	d0dc      	beq.n	358a <cfg_level_pins+0x1e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    35d0:	f04f 0c02 	mov.w	ip, #2
    35d4:	e7db      	b.n	358e <cfg_level_pins+0x22>
	}
}
    35d6:	bcf0      	pop	{r4, r5, r6, r7}
    35d8:	4770      	bx	lr
    35da:	bf00      	nop
    35dc:	50842500 	.word	0x50842500

000035e0 <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static u32_t check_level_trigger_pins(struct device *port)
{
    35e0:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    35e2:	6881      	ldr	r1, [r0, #8]
	return port->config->config_info;
    35e4:	6803      	ldr	r3, [r0, #0]
    35e6:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    35e8:	68ca      	ldr	r2, [r1, #12]
    35ea:	688b      	ldr	r3, [r1, #8]
    35ec:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    35ee:	694b      	ldr	r3, [r1, #20]
    35f0:	6988      	ldr	r0, [r1, #24]
    35f2:	4303      	orrs	r3, r0
    35f4:	ea22 0203 	bic.w	r2, r2, r3
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t level_pins = get_level_pins(port);
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    35f8:	683b      	ldr	r3, [r7, #0]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    35fa:	6918      	ldr	r0, [r3, #16]

	/* Extract which pins after inversion, have logic level same as
	 * interrupt trigger level.
	 */
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    35fc:	69cb      	ldr	r3, [r1, #28]
    35fe:	4058      	eors	r0, r3
    3600:	690b      	ldr	r3, [r1, #16]
    3602:	4058      	eors	r0, r3

	/* Discard pins that aren't configured for level. */
	u32_t out = pin_states & level_pins;
    3604:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    3608:	2101      	movs	r1, #1
	u32_t pin = 0U;
    360a:	2400      	movs	r4, #0

	while (level_pins) {
    360c:	e001      	b.n	3612 <check_level_trigger_pins+0x32>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    360e:	3401      	adds	r4, #1
		bit <<= 1;
    3610:	0049      	lsls	r1, r1, #1
	while (level_pins) {
    3612:	b1aa      	cbz	r2, 3640 <check_level_trigger_pins+0x60>
		if (level_pins & bit) {
    3614:	420a      	tst	r2, r1
    3616:	d0fa      	beq.n	360e <check_level_trigger_pins+0x2e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3618:	793d      	ldrb	r5, [r7, #4]
    361a:	f004 031f 	and.w	r3, r4, #31
    361e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3622:	4d08      	ldr	r5, [pc, #32]	; (3644 <check_level_trigger_pins+0x64>)
    3624:	3380      	adds	r3, #128	; 0x80
    3626:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    362a:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    362e:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3632:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    3636:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
			level_pins &= ~bit;
    363a:	ea22 0201 	bic.w	r2, r2, r1
    363e:	e7e6      	b.n	360e <check_level_trigger_pins+0x2e>
	}

	return out;
}
    3640:	bcf0      	pop	{r4, r5, r6, r7}
    3642:	4770      	bx	lr
    3644:	50842500 	.word	0x50842500

00003648 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    3648:	b5f0      	push	{r4, r5, r6, r7, lr}
    364a:	b083      	sub	sp, #12
	u32_t fired_triggers[GPIO_COUNT] = {0};
    364c:	2300      	movs	r3, #0
    364e:	9301      	str	r3, [sp, #4]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    3650:	4b2e      	ldr	r3, [pc, #184]	; (370c <gpiote_event_handler+0xc4>)
    3652:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT);

	if (port_event) {
    3654:	2c01      	cmp	r4, #1
    3656:	d001      	beq.n	365c <gpiote_event_handler+0x14>
{
    3658:	2200      	movs	r2, #0
    365a:	e008      	b.n	366e <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    365c:	482c      	ldr	r0, [pc, #176]	; (3710 <gpiote_event_handler+0xc8>)
    365e:	f7ff ffbf 	bl	35e0 <check_level_trigger_pins>
		fired_triggers[0] =
    3662:	9001      	str	r0, [sp, #4]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3664:	4b29      	ldr	r3, [pc, #164]	; (370c <gpiote_event_handler+0xc4>)
    3666:	2200      	movs	r2, #0
    3668:	601a      	str	r2, [r3, #0]
    366a:	e7f5      	b.n	3658 <gpiote_event_handler+0x10>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    366c:	3201      	adds	r2, #1
    366e:	2a07      	cmp	r2, #7
    3670:	d821      	bhi.n	36b6 <gpiote_event_handler+0x6e>
		nrf_gpiote_events_t evt =
    3672:	0093      	lsls	r3, r2, #2
    3674:	f503 7380 	add.w	r3, r3, #256	; 0x100
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    3678:	2101      	movs	r1, #1
    367a:	4091      	lsls	r1, r2
    return (NRF_GPIOTE->INTENSET & mask);
    367c:	4825      	ldr	r0, [pc, #148]	; (3714 <gpiote_event_handler+0xcc>)
    367e:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    3682:	4201      	tst	r1, r0
    3684:	d0f2      	beq.n	366c <gpiote_event_handler+0x24>
    return ((uint32_t)NRF_GPIOTE + event);
    3686:	b29b      	uxth	r3, r3
    3688:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    368c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    3690:	6819      	ldr	r1, [r3, #0]
    3692:	2901      	cmp	r1, #1
    3694:	d1ea      	bne.n	366c <gpiote_event_handler+0x24>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3696:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    369a:	481e      	ldr	r0, [pc, #120]	; (3714 <gpiote_event_handler+0xcc>)
    369c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    36a0:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_is_set(evt)) {
			u32_t abs_pin = nrf_gpiote_event_pin_get(i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    36a4:	2101      	movs	r1, #1
    36a6:	fa01 f000 	lsl.w	r0, r1, r0
    36aa:	9901      	ldr	r1, [sp, #4]
    36ac:	4301      	orrs	r1, r0
    36ae:	9101      	str	r1, [sp, #4]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    36b0:	2100      	movs	r1, #0
    36b2:	6019      	str	r1, [r3, #0]
    36b4:	e7da      	b.n	366c <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    36b6:	9e01      	ldr	r6, [sp, #4]
    36b8:	b91e      	cbnz	r6, 36c2 <gpiote_event_handler+0x7a>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    36ba:	2c01      	cmp	r4, #1
    36bc:	d022      	beq.n	3704 <gpiote_event_handler+0xbc>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    36be:	b003      	add	sp, #12
    36c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return port->driver_data;
    36c2:	4b13      	ldr	r3, [pc, #76]	; (3710 <gpiote_event_handler+0xc8>)
    36c4:	689f      	ldr	r7, [r3, #8]
	return list->head;
    36c6:	6839      	ldr	r1, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    36c8:	b111      	cbz	r1, 36d0 <gpiote_event_handler+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    36ca:	b121      	cbz	r1, 36d6 <gpiote_event_handler+0x8e>
	return node->next;
    36cc:	680d      	ldr	r5, [r1, #0]
    36ce:	e007      	b.n	36e0 <gpiote_event_handler+0x98>
    36d0:	2500      	movs	r5, #0
    36d2:	4629      	mov	r1, r5
    36d4:	e004      	b.n	36e0 <gpiote_event_handler+0x98>
    36d6:	2500      	movs	r5, #0
    36d8:	e002      	b.n	36e0 <gpiote_event_handler+0x98>
    36da:	462b      	mov	r3, r5
    36dc:	4629      	mov	r1, r5
    36de:	461d      	mov	r5, r3
    36e0:	2900      	cmp	r1, #0
    36e2:	d0ea      	beq.n	36ba <gpiote_event_handler+0x72>
		if ((cb->pin_mask & pins) & data->int_en) {
    36e4:	688b      	ldr	r3, [r1, #8]
    36e6:	4033      	ands	r3, r6
    36e8:	68fa      	ldr	r2, [r7, #12]
    36ea:	4213      	tst	r3, r2
    36ec:	d003      	beq.n	36f6 <gpiote_event_handler+0xae>
			cb->handler(port, cb, pins);
    36ee:	684b      	ldr	r3, [r1, #4]
    36f0:	4632      	mov	r2, r6
    36f2:	4807      	ldr	r0, [pc, #28]	; (3710 <gpiote_event_handler+0xc8>)
    36f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    36f6:	2d00      	cmp	r5, #0
    36f8:	d0ef      	beq.n	36da <gpiote_event_handler+0x92>
Z_GENLIST_PEEK_NEXT(slist, snode)
    36fa:	b10d      	cbz	r5, 3700 <gpiote_event_handler+0xb8>
	return node->next;
    36fc:	682b      	ldr	r3, [r5, #0]
    36fe:	e7ed      	b.n	36dc <gpiote_event_handler+0x94>
    3700:	2300      	movs	r3, #0
    3702:	e7eb      	b.n	36dc <gpiote_event_handler+0x94>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    3704:	4802      	ldr	r0, [pc, #8]	; (3710 <gpiote_event_handler+0xc8>)
    3706:	f7ff ff31 	bl	356c <cfg_level_pins>
}
    370a:	e7d8      	b.n	36be <gpiote_event_handler+0x76>
    370c:	5000d17c 	.word	0x5000d17c
    3710:	200070f4 	.word	0x200070f4
    3714:	5000d000 	.word	0x5000d000

00003718 <gpio_nrfx_init>:

static int gpio_nrfx_init(struct device *port)
{
    3718:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    371a:	4b0b      	ldr	r3, [pc, #44]	; (3748 <gpio_nrfx_init+0x30>)
    371c:	781b      	ldrb	r3, [r3, #0]
    371e:	b10b      	cbz	r3, 3724 <gpio_nrfx_init+0xc>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3720:	2000      	movs	r0, #0
    3722:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    3724:	4b08      	ldr	r3, [pc, #32]	; (3748 <gpio_nrfx_init+0x30>)
    3726:	2201      	movs	r2, #1
    3728:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    372a:	2200      	movs	r2, #0
    372c:	2105      	movs	r1, #5
    372e:	200d      	movs	r0, #13
    3730:	f7ff faa8 	bl	2c84 <z_arm_irq_priority_set>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    3734:	200d      	movs	r0, #13
    3736:	f7ff fa95 	bl	2c64 <z_arch_irq_enable>
    NRF_GPIOTE->INTENSET = mask;
    373a:	4b04      	ldr	r3, [pc, #16]	; (374c <gpio_nrfx_init+0x34>)
    373c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3740:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    3744:	e7ec      	b.n	3720 <gpio_nrfx_init+0x8>
    3746:	bf00      	nop
    3748:	20004025 	.word	0x20004025
    374c:	5000d000 	.word	0x5000d000

00003750 <nvmc_wait_ready>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3750:	4b03      	ldr	r3, [pc, #12]	; (3760 <nvmc_wait_ready+0x10>)
    3752:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
	       is_uicr_addr_valid(addr, len);
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    3756:	f013 0f01 	tst.w	r3, #1
    375a:	d0f9      	beq.n	3750 <nvmc_wait_ready>
	}
}
    375c:	4770      	bx	lr
    375e:	bf00      	nop
    3760:	50039000 	.word	0x50039000

00003764 <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
    3764:	4b01      	ldr	r3, [pc, #4]	; (376c <flash_nrf_write_protection+0x8>)
    3766:	7019      	strb	r1, [r3, #0]

	return 0;
}
    3768:	2000      	movs	r0, #0
    376a:	4770      	bx	lr
    376c:	20004026 	.word	0x20004026

00003770 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3770:	4b02      	ldr	r3, [pc, #8]	; (377c <flash_nrf_pages_layout+0xc>)
    3772:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3774:	2301      	movs	r3, #1
    3776:	6013      	str	r3, [r2, #0]
}
    3778:	4770      	bx	lr
    377a:	bf00      	nop
    377c:	20003ee0 	.word	0x20003ee0

00003780 <nrf_flash_init>:
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
    3780:	b510      	push	{r4, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3782:	f005 fc7a 	bl	907a <nrfx_nvmc_flash_page_count_get>
    3786:	4c05      	ldr	r4, [pc, #20]	; (379c <nrf_flash_init+0x1c>)
    3788:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    378a:	f005 fc72 	bl	9072 <nrfx_nvmc_flash_page_size_get>
    378e:	6060      	str	r0, [r4, #4]
#endif
	write_protect = true;
    3790:	4b03      	ldr	r3, [pc, #12]	; (37a0 <nrf_flash_init+0x20>)
    3792:	2201      	movs	r2, #1
    3794:	701a      	strb	r2, [r3, #0]

	return 0;
}
    3796:	2000      	movs	r0, #0
    3798:	bd10      	pop	{r4, pc}
    379a:	bf00      	nop
    379c:	20003ee0 	.word	0x20003ee0
    37a0:	20004026 	.word	0x20004026

000037a4 <flash_nrf_erase>:
{
    37a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37a6:	460c      	mov	r4, r1
    37a8:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    37aa:	f005 fc62 	bl	9072 <nrfx_nvmc_flash_page_size_get>
	u32_t n_pages = size / pg_size;
    37ae:	fbb5 f7f0 	udiv	r7, r5, r0
	if (write_protect) {
    37b2:	4b1a      	ldr	r3, [pc, #104]	; (381c <flash_nrf_erase+0x78>)
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	b9db      	cbnz	r3, 37f0 <flash_nrf_erase+0x4c>
    37b8:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    37ba:	f005 fc56 	bl	906a <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    37be:	42a0      	cmp	r0, r4
    37c0:	d919      	bls.n	37f6 <flash_nrf_erase+0x52>
    37c2:	2c00      	cmp	r4, #0
    37c4:	db1a      	blt.n	37fc <flash_nrf_erase+0x58>
	    addr < DT_FLASH_BASE_ADDRESS ||
    37c6:	4285      	cmp	r5, r0
    37c8:	d81b      	bhi.n	3802 <flash_nrf_erase+0x5e>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    37ca:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    37cc:	4298      	cmp	r0, r3
    37ce:	d31b      	bcc.n	3808 <flash_nrf_erase+0x64>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    37d0:	fbb4 f3f6 	udiv	r3, r4, r6
    37d4:	fb06 4313 	mls	r3, r6, r3, r4
    37d8:	b9cb      	cbnz	r3, 380e <flash_nrf_erase+0x6a>
    37da:	fb06 5617 	mls	r6, r6, r7, r5
    37de:	b9ce      	cbnz	r6, 3814 <flash_nrf_erase+0x70>
		if (!n_pages) {
    37e0:	b90f      	cbnz	r7, 37e6 <flash_nrf_erase+0x42>
			return 0;
    37e2:	2000      	movs	r0, #0
}
    37e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = erase(addr, size);
    37e6:	4629      	mov	r1, r5
    37e8:	4620      	mov	r0, r4
    37ea:	f003 f829 	bl	6840 <erase>
	return ret;
    37ee:	e7f9      	b.n	37e4 <flash_nrf_erase+0x40>
		return -EACCES;
    37f0:	f06f 000c 	mvn.w	r0, #12
    37f4:	e7f6      	b.n	37e4 <flash_nrf_erase+0x40>
		return -EINVAL;
    37f6:	f06f 0015 	mvn.w	r0, #21
    37fa:	e7f3      	b.n	37e4 <flash_nrf_erase+0x40>
    37fc:	f06f 0015 	mvn.w	r0, #21
    3800:	e7f0      	b.n	37e4 <flash_nrf_erase+0x40>
    3802:	f06f 0015 	mvn.w	r0, #21
    3806:	e7ed      	b.n	37e4 <flash_nrf_erase+0x40>
    3808:	f06f 0015 	mvn.w	r0, #21
    380c:	e7ea      	b.n	37e4 <flash_nrf_erase+0x40>
			return -EINVAL;
    380e:	f06f 0015 	mvn.w	r0, #21
    3812:	e7e7      	b.n	37e4 <flash_nrf_erase+0x40>
    3814:	f06f 0015 	mvn.w	r0, #21
    3818:	e7e4      	b.n	37e4 <flash_nrf_erase+0x40>
    381a:	bf00      	nop
    381c:	20004026 	.word	0x20004026

00003820 <flash_nrf_write>:
	if (write_protect) {
    3820:	4815      	ldr	r0, [pc, #84]	; (3878 <flash_nrf_write+0x58>)
    3822:	7800      	ldrb	r0, [r0, #0]
    3824:	bb08      	cbnz	r0, 386a <flash_nrf_write+0x4a>
{
    3826:	b570      	push	{r4, r5, r6, lr}
    3828:	461d      	mov	r5, r3
    382a:	4616      	mov	r6, r2
    382c:	460c      	mov	r4, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    382e:	f005 fc1c 	bl	906a <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    3832:	42a0      	cmp	r0, r4
    3834:	d908      	bls.n	3848 <flash_nrf_write+0x28>
    3836:	2c00      	cmp	r4, #0
    3838:	db0b      	blt.n	3852 <flash_nrf_write+0x32>
	    addr < DT_FLASH_BASE_ADDRESS ||
    383a:	4285      	cmp	r5, r0
    383c:	d80b      	bhi.n	3856 <flash_nrf_write+0x36>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    383e:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    3840:	4298      	cmp	r0, r3
    3842:	d30a      	bcc.n	385a <flash_nrf_write+0x3a>
	return is_regular_addr_valid(addr, len) ||
    3844:	2301      	movs	r3, #1
    3846:	e000      	b.n	384a <flash_nrf_write+0x2a>
    3848:	2300      	movs	r3, #0
	if (!is_addr_valid(addr, len)) {
    384a:	b18b      	cbz	r3, 3870 <flash_nrf_write+0x50>
	if (!len) {
    384c:	b93d      	cbnz	r5, 385e <flash_nrf_write+0x3e>
		return 0;
    384e:	2000      	movs	r0, #0
}
    3850:	bd70      	pop	{r4, r5, r6, pc}
	return is_regular_addr_valid(addr, len) ||
    3852:	2300      	movs	r3, #0
    3854:	e7f9      	b.n	384a <flash_nrf_write+0x2a>
    3856:	2300      	movs	r3, #0
    3858:	e7f7      	b.n	384a <flash_nrf_write+0x2a>
    385a:	2300      	movs	r3, #0
    385c:	e7f5      	b.n	384a <flash_nrf_write+0x2a>
		ret = write(addr, data, len);
    385e:	462a      	mov	r2, r5
    3860:	4631      	mov	r1, r6
    3862:	4620      	mov	r0, r4
    3864:	f003 f827 	bl	68b6 <write>
	return ret;
    3868:	e7f2      	b.n	3850 <flash_nrf_write+0x30>
		return -EACCES;
    386a:	f06f 000c 	mvn.w	r0, #12
}
    386e:	4770      	bx	lr
		return -EINVAL;
    3870:	f06f 0015 	mvn.w	r0, #21
    3874:	e7ec      	b.n	3850 <flash_nrf_write+0x30>
    3876:	bf00      	nop
    3878:	20004026 	.word	0x20004026

0000387c <baudrate_set>:
	return dev->driver_data;
}

static inline const struct uarte_nrfx_config *get_dev_config(struct device *dev)
{
	return dev->config->config_info;
    387c:	6803      	ldr	r3, [r0, #0]
    387e:	689b      	ldr	r3, [r3, #8]

static inline NRF_UARTE_Type *get_uarte_instance(struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    3880:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(struct device *dev, u32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3882:	f647 2312 	movw	r3, #31250	; 0x7a12
    3886:	4299      	cmp	r1, r3
    3888:	d061      	beq.n	394e <baudrate_set+0xd2>
    388a:	d910      	bls.n	38ae <baudrate_set+0x32>
    388c:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    3890:	d066      	beq.n	3960 <baudrate_set+0xe4>
    3892:	d937      	bls.n	3904 <baudrate_set+0x88>
    3894:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3898:	d068      	beq.n	396c <baudrate_set+0xf0>
    389a:	d846      	bhi.n	392a <baudrate_set+0xae>
    389c:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    38a0:	d061      	beq.n	3966 <baudrate_set+0xea>
    38a2:	4b38      	ldr	r3, [pc, #224]	; (3984 <baudrate_set+0x108>)
    38a4:	4299      	cmp	r1, r3
    38a6:	d16a      	bne.n	397e <baudrate_set+0x102>
		break;
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
		break;
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    38a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
		break;
    38ac:	e015      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    38ae:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    38b2:	d046      	beq.n	3942 <baudrate_set+0xc6>
    38b4:	d815      	bhi.n	38e2 <baudrate_set+0x66>
    38b6:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    38ba:	d05d      	beq.n	3978 <baudrate_set+0xfc>
    38bc:	d908      	bls.n	38d0 <baudrate_set+0x54>
    38be:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    38c2:	d03b      	beq.n	393c <baudrate_set+0xc0>
    38c4:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    38c8:	d159      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    38ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
		break;
    38ce:	e004      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    38d0:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    38d4:	d153      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = 0x00014000;
    38d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    38da:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    38de:	2000      	movs	r0, #0
    38e0:	4770      	bx	lr
	switch (baudrate) {
    38e2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    38e6:	d02e      	beq.n	3946 <baudrate_set+0xca>
    38e8:	d907      	bls.n	38fa <baudrate_set+0x7e>
    38ea:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    38ee:	d02c      	beq.n	394a <baudrate_set+0xce>
    38f0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    38f4:	d143      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    38f6:	4b24      	ldr	r3, [pc, #144]	; (3988 <baudrate_set+0x10c>)
		break;
    38f8:	e7ef      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    38fa:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    38fe:	d13e      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3900:	4b22      	ldr	r3, [pc, #136]	; (398c <baudrate_set+0x110>)
		break;
    3902:	e7ea      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    3904:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    3908:	4299      	cmp	r1, r3
    390a:	d023      	beq.n	3954 <baudrate_set+0xd8>
    390c:	d907      	bls.n	391e <baudrate_set+0xa2>
    390e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    3912:	d022      	beq.n	395a <baudrate_set+0xde>
    3914:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    3918:	d131      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    391a:	4b1d      	ldr	r3, [pc, #116]	; (3990 <baudrate_set+0x114>)
		break;
    391c:	e7dd      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    391e:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    3922:	d12c      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3924:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
		break;
    3928:	e7d7      	b.n	38da <baudrate_set+0x5e>
	switch (baudrate) {
    392a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    392e:	d020      	beq.n	3972 <baudrate_set+0xf6>
    3930:	4b18      	ldr	r3, [pc, #96]	; (3994 <baudrate_set+0x118>)
    3932:	4299      	cmp	r1, r3
    3934:	d123      	bne.n	397e <baudrate_set+0x102>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3936:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		break;
    393a:	e7ce      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    393c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
		break;
    3940:	e7cb      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3942:	4b15      	ldr	r3, [pc, #84]	; (3998 <baudrate_set+0x11c>)
		break;
    3944:	e7c9      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3946:	4b15      	ldr	r3, [pc, #84]	; (399c <baudrate_set+0x120>)
		break;
    3948:	e7c7      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    394a:	4b15      	ldr	r3, [pc, #84]	; (39a0 <baudrate_set+0x124>)
		break;
    394c:	e7c5      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    394e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
		break;
    3952:	e7c2      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3954:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
		break;
    3958:	e7bf      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    395a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
		break;
    395e:	e7bc      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3960:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
		break;
    3964:	e7b9      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3966:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
		break;
    396a:	e7b6      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    396c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
		break;
    3970:	e7b3      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3972:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
		break;
    3976:	e7b0      	b.n	38da <baudrate_set+0x5e>
		nrf_baudrate = 0x00027000;
    3978:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    397c:	e7ad      	b.n	38da <baudrate_set+0x5e>
		return -EINVAL;
    397e:	f06f 0015 	mvn.w	r0, #21
}
    3982:	4770      	bx	lr
    3984:	0003d090 	.word	0x0003d090
    3988:	0075c000 	.word	0x0075c000
    398c:	00275000 	.word	0x00275000
    3990:	013a9000 	.word	0x013a9000
    3994:	000f4240 	.word	0x000f4240
    3998:	0013b000 	.word	0x0013b000
    399c:	003af000 	.word	0x003af000
    39a0:	004ea000 	.word	0x004ea000

000039a4 <uarte_instance_init>:
};

static int uarte_instance_init(struct device *dev,
			       const struct uarte_init_config *config,
			       u8_t interrupts_active)
{
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a6:	4616      	mov	r6, r2
	return dev->config->config_info;
    39a8:	6803      	ldr	r3, [r0, #0]
    39aa:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    39ac:	681c      	ldr	r4, [r3, #0]
	return dev->driver_data;
    39ae:	6885      	ldr	r5, [r0, #8]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    39b0:	680b      	ldr	r3, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39b2:	2201      	movs	r2, #1
    39b4:	409a      	lsls	r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    39b6:	4b27      	ldr	r3, [pc, #156]	; (3a54 <uarte_instance_init+0xb0>)
    39b8:	609a      	str	r2, [r3, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    39ba:	680a      	ldr	r2, [r1, #0]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    39bc:	3280      	adds	r2, #128	; 0x80
    39be:	2703      	movs	r7, #3
    39c0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
    39c4:	684a      	ldr	r2, [r1, #4]
    39c6:	3280      	adds	r2, #128	; 0x80
    39c8:	2700      	movs	r7, #0
    39ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]

	nrf_uarte_txrx_pins_set(uarte,
    39ce:	680a      	ldr	r2, [r1, #0]
    39d0:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.TXD = pseltxd;
    39d2:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    39d6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    39da:	688b      	ldr	r3, [r1, #8]
    39dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    39e0:	d018      	beq.n	3a14 <uarte_instance_init+0x70>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    39e2:	68cb      	ldr	r3, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    39e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    39e8:	d014      	beq.n	3a14 <uarte_instance_init+0x70>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39ea:	2201      	movs	r2, #1
    39ec:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    39f0:	4a18      	ldr	r2, [pc, #96]	; (3a54 <uarte_instance_init+0xb0>)
    39f2:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    39f4:	68cb      	ldr	r3, [r1, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    39f6:	3380      	adds	r3, #128	; 0x80
    39f8:	2703      	movs	r7, #3
    39fa:	f842 7023 	str.w	r7, [r2, r3, lsl #2]

		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
    39fe:	688b      	ldr	r3, [r1, #8]
    3a00:	3380      	adds	r3, #128	; 0x80
    3a02:	2700      	movs	r7, #0
    3a04:	f842 7023 	str.w	r7, [r2, r3, lsl #2]

		nrf_uarte_hwfc_pins_set(uarte,
    3a08:	68ca      	ldr	r2, [r1, #12]
    3a0a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.RTS = pselrts;
    3a0c:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3a10:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3a14:	6881      	ldr	r1, [r0, #8]
    3a16:	f003 f807 	bl	6a28 <uarte_nrfx_configure>
	if (err) {
    3a1a:	4603      	mov	r3, r0
    3a1c:	b9c0      	cbnz	r0, 3a50 <uarte_instance_init+0xac>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3a1e:	2208      	movs	r2, #8
    3a20:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a24:	2200      	movs	r2, #0
    3a26:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3a2a:	f105 020c 	add.w	r2, r5, #12

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3a2e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3a32:	2201      	movs	r2, #1
    3a34:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a38:	6022      	str	r2, [r4, #0]
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

#ifdef UARTE_INTERRUPT_DRIVEN
	if (interrupts_active) {
    3a3a:	b14e      	cbz	r6, 3a50 <uarte_instance_init+0xac>
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    3a3c:	68aa      	ldr	r2, [r5, #8]
    3a3e:	6892      	ldr	r2, [r2, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3a40:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3a44:	2200      	movs	r2, #0
    3a46:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a4a:	2201      	movs	r2, #1
    3a4c:	60a2      	str	r2, [r4, #8]
    3a4e:	60e2      	str	r2, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    3a50:	4618      	mov	r0, r3
    3a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a54:	50842500 	.word	0x50842500

00003a58 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    3a58:	b530      	push	{r4, r5, lr}
    3a5a:	b085      	sub	sp, #20
    3a5c:	4605      	mov	r5, r0
    3a5e:	4b0a      	ldr	r3, [pc, #40]	; (3a88 <uarte_0_init+0x30>)
    3a60:	466c      	mov	r4, sp
    3a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3a68:	2200      	movs	r2, #0
    3a6a:	2101      	movs	r1, #1
    3a6c:	2008      	movs	r0, #8
    3a6e:	f7ff f909 	bl	2c84 <z_arm_irq_priority_set>
    3a72:	2008      	movs	r0, #8
    3a74:	f7ff f8f6 	bl	2c64 <z_arch_irq_enable>
    3a78:	2201      	movs	r2, #1
    3a7a:	4621      	mov	r1, r4
    3a7c:	4628      	mov	r0, r5
    3a7e:	f7ff ff91 	bl	39a4 <uarte_instance_init>
    3a82:	b005      	add	sp, #20
    3a84:	bd30      	pop	{r4, r5, pc}
    3a86:	bf00      	nop
    3a88:	00009620 	.word	0x00009620

00003a8c <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3a8c:	6802      	ldr	r2, [r0, #0]
    3a8e:	4b12      	ldr	r3, [pc, #72]	; (3ad8 <verify_header+0x4c>)
    3a90:	429a      	cmp	r2, r3
    3a92:	d001      	beq.n	3a98 <verify_header+0xc>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    3a94:	2001      	movs	r0, #1
    3a96:	4770      	bx	lr
    }

    if( hdr->magic2 != MAGIC2 )
    3a98:	69c2      	ldr	r2, [r0, #28]
    3a9a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    3a9e:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    3aa2:	429a      	cmp	r2, r3
    3aa4:	d001      	beq.n	3aaa <verify_header+0x1e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    3aa6:	2001      	movs	r0, #1
    3aa8:	4770      	bx	lr
    }

    if( hdr->alloc > 1 )
    3aaa:	6883      	ldr	r3, [r0, #8]
    3aac:	2b01      	cmp	r3, #1
    3aae:	d901      	bls.n	3ab4 <verify_header+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    3ab0:	2001      	movs	r0, #1
    3ab2:	4770      	bx	lr
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3ab4:	68c3      	ldr	r3, [r0, #12]
    3ab6:	b113      	cbz	r3, 3abe <verify_header+0x32>
    3ab8:	6902      	ldr	r2, [r0, #16]
    3aba:	4293      	cmp	r3, r2
    3abc:	d006      	beq.n	3acc <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3abe:	6943      	ldr	r3, [r0, #20]
    3ac0:	b133      	cbz	r3, 3ad0 <verify_header+0x44>
    3ac2:	6982      	ldr	r2, [r0, #24]
    3ac4:	4293      	cmp	r3, r2
    3ac6:	d005      	beq.n	3ad4 <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    3ac8:	2000      	movs	r0, #0
    3aca:	4770      	bx	lr
        return( 1 );
    3acc:	2001      	movs	r0, #1
    3ace:	4770      	bx	lr
    return( 0 );
    3ad0:	2000      	movs	r0, #0
    3ad2:	4770      	bx	lr
        return( 1 );
    3ad4:	2001      	movs	r0, #1
}
    3ad6:	4770      	bx	lr
    3ad8:	ff00aa55 	.word	0xff00aa55

00003adc <verify_chain>:

static int verify_chain( void )
{
    3adc:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3ade:	4b10      	ldr	r3, [pc, #64]	; (3b20 <verify_chain+0x44>)
    3ae0:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3ae2:	b1a5      	cbz	r5, 3b0e <verify_chain+0x32>
    3ae4:	4628      	mov	r0, r5
    3ae6:	f7ff ffd1 	bl	3a8c <verify_header>
    3aea:	4606      	mov	r6, r0
    3aec:	b988      	cbnz	r0, 3b12 <verify_chain+0x36>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3aee:	68eb      	ldr	r3, [r5, #12]
    3af0:	b10b      	cbz	r3, 3af6 <verify_chain+0x1a>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    3af2:	2601      	movs	r6, #1
    3af4:	e00e      	b.n	3b14 <verify_chain+0x38>
    }

    cur = heap.first->next;
    3af6:	692c      	ldr	r4, [r5, #16]

    while( cur != NULL )
    3af8:	b164      	cbz	r4, 3b14 <verify_chain+0x38>
    {
        if( verify_header( cur ) != 0 )
    3afa:	4620      	mov	r0, r4
    3afc:	f7ff ffc6 	bl	3a8c <verify_header>
    3b00:	b950      	cbnz	r0, 3b18 <verify_chain+0x3c>
                                      "failed\n" );
#endif
            return( 1 );
        }

        if( cur->prev != prv )
    3b02:	68e3      	ldr	r3, [r4, #12]
    3b04:	42ab      	cmp	r3, r5
    3b06:	d109      	bne.n	3b1c <verify_chain+0x40>
                                      "cur->prev != prv\n" );
#endif
            return( 1 );
        }

        prv = cur;
    3b08:	4625      	mov	r5, r4
        cur = cur->next;
    3b0a:	6924      	ldr	r4, [r4, #16]
    3b0c:	e7f4      	b.n	3af8 <verify_chain+0x1c>
        return( 1 );
    3b0e:	2601      	movs	r6, #1
    3b10:	e000      	b.n	3b14 <verify_chain+0x38>
    3b12:	2601      	movs	r6, #1
    }

    return( 0 );
}
    3b14:	4630      	mov	r0, r6
    3b16:	bd70      	pop	{r4, r5, r6, pc}
            return( 1 );
    3b18:	2601      	movs	r6, #1
    3b1a:	e7fb      	b.n	3b14 <verify_chain+0x38>
            return( 1 );
    3b1c:	2601      	movs	r6, #1
    3b1e:	e7f9      	b.n	3b14 <verify_chain+0x38>
    3b20:	20003f08 	.word	0x20003f08

00003b24 <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3b24:	2800      	cmp	r0, #0
    3b26:	f000 8094 	beq.w	3c52 <buffer_alloc_free+0x12e>
{
    3b2a:	b538      	push	{r3, r4, r5, lr}
    3b2c:	4604      	mov	r4, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3b2e:	4b49      	ldr	r3, [pc, #292]	; (3c54 <buffer_alloc_free+0x130>)
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d068      	beq.n	3c08 <buffer_alloc_free+0xe4>
    3b36:	4a47      	ldr	r2, [pc, #284]	; (3c54 <buffer_alloc_free+0x130>)
    3b38:	6892      	ldr	r2, [r2, #8]
    3b3a:	2a00      	cmp	r2, #0
    3b3c:	d064      	beq.n	3c08 <buffer_alloc_free+0xe4>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3b3e:	4283      	cmp	r3, r0
    3b40:	d963      	bls.n	3c0a <buffer_alloc_free+0xe6>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3b42:	4b45      	ldr	r3, [pc, #276]	; (3c58 <buffer_alloc_free+0x134>)
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	2001      	movs	r0, #1
    3b48:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3b4a:	f1a4 0520 	sub.w	r5, r4, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3b4e:	4628      	mov	r0, r5
    3b50:	f7ff ff9c 	bl	3a8c <verify_header>
    3b54:	b118      	cbz	r0, 3b5e <buffer_alloc_free+0x3a>
        mbedtls_exit( 1 );
    3b56:	4b40      	ldr	r3, [pc, #256]	; (3c58 <buffer_alloc_free+0x134>)
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	2001      	movs	r0, #1
    3b5c:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3b5e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3b62:	2b01      	cmp	r3, #1
    3b64:	d003      	beq.n	3b6e <buffer_alloc_free+0x4a>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3b66:	4b3c      	ldr	r3, [pc, #240]	; (3c58 <buffer_alloc_free+0x134>)
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	2001      	movs	r0, #1
    3b6c:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3b6e:	2300      	movs	r3, #0
    3b70:	f844 3c18 	str.w	r3, [r4, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3b74:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3b78:	b1cb      	cbz	r3, 3bae <buffer_alloc_free+0x8a>
    3b7a:	689a      	ldr	r2, [r3, #8]
    3b7c:	2a00      	cmp	r2, #0
    3b7e:	d14a      	bne.n	3c16 <buffer_alloc_free+0xf2>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3b80:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    3b84:	6859      	ldr	r1, [r3, #4]
    3b86:	440a      	add	r2, r1
    3b88:	3220      	adds	r2, #32
    3b8a:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    3b8c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3b90:	f854 2c10 	ldr.w	r2, [r4, #-16]
    3b94:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    3b96:	f854 4c14 	ldr.w	r4, [r4, #-20]

        if( hdr->next != NULL )
    3b9a:	6923      	ldr	r3, [r4, #16]
    3b9c:	b103      	cbz	r3, 3ba0 <buffer_alloc_free+0x7c>
            hdr->next->prev = hdr;
    3b9e:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3ba0:	2220      	movs	r2, #32
    3ba2:	2100      	movs	r1, #0
    3ba4:	4628      	mov	r0, r5
    3ba6:	f002 fd73 	bl	6690 <memset>
        old = hdr;
    3baa:	462b      	mov	r3, r5
        hdr = hdr->prev;
    3bac:	4625      	mov	r5, r4
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3bae:	692c      	ldr	r4, [r5, #16]
    3bb0:	b324      	cbz	r4, 3bfc <buffer_alloc_free+0xd8>
    3bb2:	68a2      	ldr	r2, [r4, #8]
    3bb4:	bb12      	cbnz	r2, 3bfc <buffer_alloc_free+0xd8>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3bb6:	6863      	ldr	r3, [r4, #4]
    3bb8:	686a      	ldr	r2, [r5, #4]
    3bba:	4413      	add	r3, r2
    3bbc:	3320      	adds	r3, #32
    3bbe:	606b      	str	r3, [r5, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3bc0:	6923      	ldr	r3, [r4, #16]
    3bc2:	612b      	str	r3, [r5, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3bc4:	696b      	ldr	r3, [r5, #20]
    3bc6:	b343      	cbz	r3, 3c1a <buffer_alloc_free+0xf6>
        {
            if( hdr->prev_free != NULL )
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d02a      	beq.n	3c22 <buffer_alloc_free+0xfe>
                hdr->prev_free->next_free = hdr->next_free;
    3bcc:	69aa      	ldr	r2, [r5, #24]
    3bce:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    3bd0:	69ab      	ldr	r3, [r5, #24]
    3bd2:	b10b      	cbz	r3, 3bd8 <buffer_alloc_free+0xb4>
                hdr->next_free->prev_free = hdr->prev_free;
    3bd4:	696a      	ldr	r2, [r5, #20]
    3bd6:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    3bd8:	6963      	ldr	r3, [r4, #20]
    3bda:	616b      	str	r3, [r5, #20]
        hdr->next_free = old->next_free;
    3bdc:	69a2      	ldr	r2, [r4, #24]
    3bde:	61aa      	str	r2, [r5, #24]

        if( hdr->prev_free != NULL )
    3be0:	b31b      	cbz	r3, 3c2a <buffer_alloc_free+0x106>
            hdr->prev_free->next_free = hdr;
    3be2:	619d      	str	r5, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3be4:	69ab      	ldr	r3, [r5, #24]
    3be6:	b103      	cbz	r3, 3bea <buffer_alloc_free+0xc6>
            hdr->next_free->prev_free = hdr;
    3be8:	615d      	str	r5, [r3, #20]

        if( hdr->next != NULL )
    3bea:	692b      	ldr	r3, [r5, #16]
    3bec:	b103      	cbz	r3, 3bf0 <buffer_alloc_free+0xcc>
            hdr->next->prev = hdr;
    3bee:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3bf0:	2220      	movs	r2, #32
    3bf2:	2100      	movs	r1, #0
    3bf4:	4620      	mov	r0, r4
    3bf6:	f002 fd4b 	bl	6690 <memset>
        old = hdr->next;
    3bfa:	4623      	mov	r3, r4
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    3bfc:	b1c3      	cbz	r3, 3c30 <buffer_alloc_free+0x10c>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3bfe:	4b15      	ldr	r3, [pc, #84]	; (3c54 <buffer_alloc_free+0x130>)
    3c00:	691b      	ldr	r3, [r3, #16]
    3c02:	f013 0f02 	tst.w	r3, #2
    3c06:	d11b      	bne.n	3c40 <buffer_alloc_free+0x11c>
        mbedtls_exit( 1 );
}
    3c08:	bd38      	pop	{r3, r4, r5, pc}
    if( p < heap.buf || p >= heap.buf + heap.len )
    3c0a:	4a12      	ldr	r2, [pc, #72]	; (3c54 <buffer_alloc_free+0x130>)
    3c0c:	6852      	ldr	r2, [r2, #4]
    3c0e:	4413      	add	r3, r2
    3c10:	4283      	cmp	r3, r0
    3c12:	d89a      	bhi.n	3b4a <buffer_alloc_free+0x26>
    3c14:	e795      	b.n	3b42 <buffer_alloc_free+0x1e>
    memory_header *hdr, *old = NULL;
    3c16:	2300      	movs	r3, #0
    3c18:	e7c9      	b.n	3bae <buffer_alloc_free+0x8a>
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3c1a:	69aa      	ldr	r2, [r5, #24]
    3c1c:	2a00      	cmp	r2, #0
    3c1e:	d1d3      	bne.n	3bc8 <buffer_alloc_free+0xa4>
    3c20:	e7da      	b.n	3bd8 <buffer_alloc_free+0xb4>
                heap.first_free = hdr->next_free;
    3c22:	69aa      	ldr	r2, [r5, #24]
    3c24:	4b0b      	ldr	r3, [pc, #44]	; (3c54 <buffer_alloc_free+0x130>)
    3c26:	60da      	str	r2, [r3, #12]
    3c28:	e7d2      	b.n	3bd0 <buffer_alloc_free+0xac>
            heap.first_free = hdr;
    3c2a:	4b0a      	ldr	r3, [pc, #40]	; (3c54 <buffer_alloc_free+0x130>)
    3c2c:	60dd      	str	r5, [r3, #12]
    3c2e:	e7d9      	b.n	3be4 <buffer_alloc_free+0xc0>
        hdr->next_free = heap.first_free;
    3c30:	4b08      	ldr	r3, [pc, #32]	; (3c54 <buffer_alloc_free+0x130>)
    3c32:	68db      	ldr	r3, [r3, #12]
    3c34:	61ab      	str	r3, [r5, #24]
        if( heap.first_free != NULL )
    3c36:	b103      	cbz	r3, 3c3a <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    3c38:	615d      	str	r5, [r3, #20]
        heap.first_free = hdr;
    3c3a:	4b06      	ldr	r3, [pc, #24]	; (3c54 <buffer_alloc_free+0x130>)
    3c3c:	60dd      	str	r5, [r3, #12]
    3c3e:	e7de      	b.n	3bfe <buffer_alloc_free+0xda>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3c40:	f7ff ff4c 	bl	3adc <verify_chain>
    3c44:	2800      	cmp	r0, #0
    3c46:	d0df      	beq.n	3c08 <buffer_alloc_free+0xe4>
        mbedtls_exit( 1 );
    3c48:	4b03      	ldr	r3, [pc, #12]	; (3c58 <buffer_alloc_free+0x134>)
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	2001      	movs	r0, #1
    3c4e:	4798      	blx	r3
    3c50:	e7da      	b.n	3c08 <buffer_alloc_free+0xe4>
    3c52:	4770      	bx	lr
    3c54:	20003f08 	.word	0x20003f08
    3c58:	20007064 	.word	0x20007064

00003c5c <buffer_alloc_calloc>:
{
    3c5c:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    3c5e:	4b51      	ldr	r3, [pc, #324]	; (3da4 <buffer_alloc_calloc+0x148>)
    3c60:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	2b00      	cmp	r3, #0
    3c66:	f000 808f 	beq.w	3d88 <buffer_alloc_calloc+0x12c>
    3c6a:	4b4e      	ldr	r3, [pc, #312]	; (3da4 <buffer_alloc_calloc+0x148>)
    3c6c:	689b      	ldr	r3, [r3, #8]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	f000 808c 	beq.w	3d8c <buffer_alloc_calloc+0x130>
    original_len = len = n * size;
    3c74:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3c78:	2800      	cmp	r0, #0
    3c7a:	f000 8089 	beq.w	3d90 <buffer_alloc_calloc+0x134>
    3c7e:	2900      	cmp	r1, #0
    3c80:	f000 8088 	beq.w	3d94 <buffer_alloc_calloc+0x138>
    3c84:	fbb6 f0f0 	udiv	r0, r6, r0
    3c88:	4288      	cmp	r0, r1
    3c8a:	f040 8085 	bne.w	3d98 <buffer_alloc_calloc+0x13c>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c8e:	f116 0f04 	cmn.w	r6, #4
    3c92:	f200 8083 	bhi.w	3d9c <buffer_alloc_calloc+0x140>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c96:	f016 0f03 	tst.w	r6, #3
    3c9a:	d008      	beq.n	3cae <buffer_alloc_calloc+0x52>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3c9c:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3ca0:	3504      	adds	r5, #4
    while( cur != NULL )
    3ca2:	b134      	cbz	r4, 3cb2 <buffer_alloc_calloc+0x56>
        if( cur->size >= len )
    3ca4:	6863      	ldr	r3, [r4, #4]
    3ca6:	42ab      	cmp	r3, r5
    3ca8:	d203      	bcs.n	3cb2 <buffer_alloc_calloc+0x56>
        cur = cur->next_free;
    3caa:	69a4      	ldr	r4, [r4, #24]
    3cac:	e7f9      	b.n	3ca2 <buffer_alloc_calloc+0x46>
    original_len = len = n * size;
    3cae:	4635      	mov	r5, r6
    3cb0:	e7f7      	b.n	3ca2 <buffer_alloc_calloc+0x46>
    if( cur == NULL )
    3cb2:	2c00      	cmp	r4, #0
    3cb4:	d074      	beq.n	3da0 <buffer_alloc_calloc+0x144>
    if( cur->alloc != 0 )
    3cb6:	68a3      	ldr	r3, [r4, #8]
    3cb8:	b11b      	cbz	r3, 3cc2 <buffer_alloc_calloc+0x66>
        mbedtls_exit( 1 );
    3cba:	4b3b      	ldr	r3, [pc, #236]	; (3da8 <buffer_alloc_calloc+0x14c>)
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	2001      	movs	r0, #1
    3cc0:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3cc2:	6862      	ldr	r2, [r4, #4]
    3cc4:	1b52      	subs	r2, r2, r5
    3cc6:	2a23      	cmp	r2, #35	; 0x23
    3cc8:	d826      	bhi.n	3d18 <buffer_alloc_calloc+0xbc>
        cur->alloc = 1;
    3cca:	2301      	movs	r3, #1
    3ccc:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3cce:	6963      	ldr	r3, [r4, #20]
    3cd0:	b1ab      	cbz	r3, 3cfe <buffer_alloc_calloc+0xa2>
            cur->prev_free->next_free = cur->next_free;
    3cd2:	69a2      	ldr	r2, [r4, #24]
    3cd4:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    3cd6:	69a3      	ldr	r3, [r4, #24]
    3cd8:	b10b      	cbz	r3, 3cde <buffer_alloc_calloc+0x82>
            cur->next_free->prev_free = cur->prev_free;
    3cda:	6962      	ldr	r2, [r4, #20]
    3cdc:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3cde:	2300      	movs	r3, #0
    3ce0:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    3ce2:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3ce4:	4b2f      	ldr	r3, [pc, #188]	; (3da4 <buffer_alloc_calloc+0x148>)
    3ce6:	691b      	ldr	r3, [r3, #16]
    3ce8:	f013 0f01 	tst.w	r3, #1
    3cec:	d10b      	bne.n	3d06 <buffer_alloc_calloc+0xaa>
        ret = (unsigned char *) cur + sizeof( memory_header );
    3cee:	3420      	adds	r4, #32
        memset( ret, 0, original_len );
    3cf0:	4632      	mov	r2, r6
    3cf2:	2100      	movs	r1, #0
    3cf4:	4620      	mov	r0, r4
    3cf6:	f002 fccb 	bl	6690 <memset>
}
    3cfa:	4620      	mov	r0, r4
    3cfc:	bd70      	pop	{r4, r5, r6, pc}
            heap.first_free = cur->next_free;
    3cfe:	69a2      	ldr	r2, [r4, #24]
    3d00:	4b28      	ldr	r3, [pc, #160]	; (3da4 <buffer_alloc_calloc+0x148>)
    3d02:	60da      	str	r2, [r3, #12]
    3d04:	e7e7      	b.n	3cd6 <buffer_alloc_calloc+0x7a>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3d06:	f7ff fee9 	bl	3adc <verify_chain>
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d0ef      	beq.n	3cee <buffer_alloc_calloc+0x92>
            mbedtls_exit( 1 );
    3d0e:	4b26      	ldr	r3, [pc, #152]	; (3da8 <buffer_alloc_calloc+0x14c>)
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	2001      	movs	r0, #1
    3d14:	4798      	blx	r3
    3d16:	e7ea      	b.n	3cee <buffer_alloc_calloc+0x92>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3d18:	f105 0120 	add.w	r1, r5, #32
    3d1c:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3d1e:	3a20      	subs	r2, #32
    3d20:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    3d22:	2200      	movs	r2, #0
    3d24:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    3d26:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    3d28:	6922      	ldr	r2, [r4, #16]
    3d2a:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3d2c:	481f      	ldr	r0, [pc, #124]	; (3dac <buffer_alloc_calloc+0x150>)
    3d2e:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3d30:	491f      	ldr	r1, [pc, #124]	; (3db0 <buffer_alloc_calloc+0x154>)
    3d32:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    3d34:	b102      	cbz	r2, 3d38 <buffer_alloc_calloc+0xdc>
        new->next->prev = new;
    3d36:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    3d38:	6962      	ldr	r2, [r4, #20]
    3d3a:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    3d3c:	69a1      	ldr	r1, [r4, #24]
    3d3e:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    3d40:	b1b2      	cbz	r2, 3d70 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    3d42:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3d44:	699a      	ldr	r2, [r3, #24]
    3d46:	b102      	cbz	r2, 3d4a <buffer_alloc_calloc+0xee>
        new->next_free->prev_free = new;
    3d48:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    3d4a:	2201      	movs	r2, #1
    3d4c:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    3d4e:	6065      	str	r5, [r4, #4]
    cur->next = new;
    3d50:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3d52:	2300      	movs	r3, #0
    3d54:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    3d56:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3d58:	4b12      	ldr	r3, [pc, #72]	; (3da4 <buffer_alloc_calloc+0x148>)
    3d5a:	691b      	ldr	r3, [r3, #16]
    3d5c:	f013 0f01 	tst.w	r3, #1
    3d60:	d109      	bne.n	3d76 <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    3d62:	3420      	adds	r4, #32
    memset( ret, 0, original_len );
    3d64:	4632      	mov	r2, r6
    3d66:	2100      	movs	r1, #0
    3d68:	4620      	mov	r0, r4
    3d6a:	f002 fc91 	bl	6690 <memset>
    return( ret );
    3d6e:	e7c4      	b.n	3cfa <buffer_alloc_calloc+0x9e>
        heap.first_free = new;
    3d70:	4a0c      	ldr	r2, [pc, #48]	; (3da4 <buffer_alloc_calloc+0x148>)
    3d72:	60d3      	str	r3, [r2, #12]
    3d74:	e7e6      	b.n	3d44 <buffer_alloc_calloc+0xe8>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3d76:	f7ff feb1 	bl	3adc <verify_chain>
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d0f1      	beq.n	3d62 <buffer_alloc_calloc+0x106>
        mbedtls_exit( 1 );
    3d7e:	4b0a      	ldr	r3, [pc, #40]	; (3da8 <buffer_alloc_calloc+0x14c>)
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	2001      	movs	r0, #1
    3d84:	4798      	blx	r3
    3d86:	e7ec      	b.n	3d62 <buffer_alloc_calloc+0x106>
        return( NULL );
    3d88:	2400      	movs	r4, #0
    3d8a:	e7b6      	b.n	3cfa <buffer_alloc_calloc+0x9e>
    3d8c:	2400      	movs	r4, #0
    3d8e:	e7b4      	b.n	3cfa <buffer_alloc_calloc+0x9e>
        return( NULL );
    3d90:	2400      	movs	r4, #0
    3d92:	e7b2      	b.n	3cfa <buffer_alloc_calloc+0x9e>
    3d94:	2400      	movs	r4, #0
    3d96:	e7b0      	b.n	3cfa <buffer_alloc_calloc+0x9e>
    3d98:	2400      	movs	r4, #0
    3d9a:	e7ae      	b.n	3cfa <buffer_alloc_calloc+0x9e>
        return( NULL );
    3d9c:	2400      	movs	r4, #0
    3d9e:	e7ac      	b.n	3cfa <buffer_alloc_calloc+0x9e>
        return( NULL );
    3da0:	2400      	movs	r4, #0
    3da2:	e7aa      	b.n	3cfa <buffer_alloc_calloc+0x9e>
    3da4:	20003f08 	.word	0x20003f08
    3da8:	20007064 	.word	0x20007064
    3dac:	ff00aa55 	.word	0xff00aa55
    3db0:	ee119966 	.word	0xee119966

00003db4 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3db4:	b538      	push	{r3, r4, r5, lr}
    3db6:	4605      	mov	r5, r0
    3db8:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3dba:	2214      	movs	r2, #20
    3dbc:	2100      	movs	r1, #0
    3dbe:	4813      	ldr	r0, [pc, #76]	; (3e0c <mbedtls_memory_buffer_alloc_init+0x58>)
    3dc0:	f002 fc66 	bl	6690 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3dc4:	4912      	ldr	r1, [pc, #72]	; (3e10 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3dc6:	4813      	ldr	r0, [pc, #76]	; (3e14 <mbedtls_memory_buffer_alloc_init+0x60>)
    3dc8:	f000 f838 	bl	3e3c <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3dcc:	2c23      	cmp	r4, #35	; 0x23
    3dce:	d91c      	bls.n	3e0a <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3dd0:	f015 0303 	ands.w	r3, r5, #3
    3dd4:	d004      	beq.n	3de0 <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3dd6:	441c      	add	r4, r3
    3dd8:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3dda:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3dde:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    3de0:	4622      	mov	r2, r4
    3de2:	2100      	movs	r1, #0
    3de4:	4628      	mov	r0, r5
    3de6:	f002 fc53 	bl	6690 <memset>

    heap.buf = buf;
    3dea:	4b08      	ldr	r3, [pc, #32]	; (3e0c <mbedtls_memory_buffer_alloc_init+0x58>)
    3dec:	601d      	str	r5, [r3, #0]
    heap.len = len;
    3dee:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    3df0:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    3df2:	3c20      	subs	r4, #32
    3df4:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    3df6:	689a      	ldr	r2, [r3, #8]
    3df8:	4907      	ldr	r1, [pc, #28]	; (3e18 <mbedtls_memory_buffer_alloc_init+0x64>)
    3dfa:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3dfc:	689a      	ldr	r2, [r3, #8]
    3dfe:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    3e02:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    3e06:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    3e08:	60da      	str	r2, [r3, #12]
}
    3e0a:	bd38      	pop	{r3, r4, r5, pc}
    3e0c:	20003f08 	.word	0x20003f08
    3e10:	00003b25 	.word	0x00003b25
    3e14:	00003c5d 	.word	0x00003c5d
    3e18:	ff00aa55 	.word	0xff00aa55

00003e1c <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    3e1c:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    3e1e:	4b02      	ldr	r3, [pc, #8]	; (3e28 <mbedtls_calloc+0xc>)
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	4798      	blx	r3
}
    3e24:	bd08      	pop	{r3, pc}
    3e26:	bf00      	nop
    3e28:	20007060 	.word	0x20007060

00003e2c <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    3e2c:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    3e2e:	4b02      	ldr	r3, [pc, #8]	; (3e38 <mbedtls_free+0xc>)
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	4798      	blx	r3
}
    3e34:	bd08      	pop	{r3, pc}
    3e36:	bf00      	nop
    3e38:	20007068 	.word	0x20007068

00003e3c <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3e3c:	4b02      	ldr	r3, [pc, #8]	; (3e48 <mbedtls_platform_set_calloc_free+0xc>)
    3e3e:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3e40:	4b02      	ldr	r3, [pc, #8]	; (3e4c <mbedtls_platform_set_calloc_free+0x10>)
    3e42:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    3e44:	2000      	movs	r0, #0
    3e46:	4770      	bx	lr
    3e48:	20007060 	.word	0x20007060
    3e4c:	20007068 	.word	0x20007068

00003e50 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    3e50:	b508      	push	{r3, lr}
    memset_func( buf, 0, len );
    3e52:	4b03      	ldr	r3, [pc, #12]	; (3e60 <mbedtls_platform_zeroize+0x10>)
    3e54:	681b      	ldr	r3, [r3, #0]
    3e56:	460a      	mov	r2, r1
    3e58:	2100      	movs	r1, #0
    3e5a:	4798      	blx	r3
}
    3e5c:	bd08      	pop	{r3, pc}
    3e5e:	bf00      	nop
    3e60:	2000706c 	.word	0x2000706c

00003e64 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    3e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e66:	4604      	mov	r4, r0
    3e68:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e6a:	6847      	ldr	r7, [r0, #4]
    3e6c:	f100 0608 	add.w	r6, r0, #8
    3e70:	4630      	mov	r0, r6
    3e72:	f003 faad 	bl	73d0 <mbedtls_mpi_size>
    3e76:	4287      	cmp	r7, r0
    3e78:	d151      	bne.n	3f1e <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    3e7a:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e80:	d84f      	bhi.n	3f22 <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e82:	2100      	movs	r1, #0
    3e84:	4630      	mov	r0, r6
    3e86:	f003 fca7 	bl	77d8 <mbedtls_mpi_cmp_int>
    3e8a:	2800      	cmp	r0, #0
    3e8c:	dd4b      	ble.n	3f26 <rsa_check_context+0xc2>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3e8e:	2100      	movs	r1, #0
    3e90:	4630      	mov	r0, r6
    3e92:	f003 fa76 	bl	7382 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e96:	2800      	cmp	r0, #0
    3e98:	d047      	beq.n	3f2a <rsa_check_context+0xc6>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3e9a:	b1d5      	cbz	r5, 3ed2 <rsa_check_context+0x6e>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e9c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3ea0:	2100      	movs	r1, #0
    3ea2:	4630      	mov	r0, r6
    3ea4:	f003 fc98 	bl	77d8 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3ea8:	2800      	cmp	r0, #0
    3eaa:	dd40      	ble.n	3f2e <rsa_check_context+0xca>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3eac:	2100      	movs	r1, #0
    3eae:	4630      	mov	r0, r6
    3eb0:	f003 fa67 	bl	7382 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3eb4:	2800      	cmp	r0, #0
    3eb6:	d03c      	beq.n	3f32 <rsa_check_context+0xce>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3eb8:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3ebc:	2100      	movs	r1, #0
    3ebe:	4630      	mov	r0, r6
    3ec0:	f003 fc8a 	bl	77d8 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3ec4:	2800      	cmp	r0, #0
    3ec6:	dd36      	ble.n	3f36 <rsa_check_context+0xd2>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3ec8:	2100      	movs	r1, #0
    3eca:	4630      	mov	r0, r6
    3ecc:	f003 fa59 	bl	7382 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3ed0:	b398      	cbz	r0, 3f3a <rsa_check_context+0xd6>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3ed2:	2100      	movs	r1, #0
    3ed4:	f104 0014 	add.w	r0, r4, #20
    3ed8:	f003 fc7e 	bl	77d8 <mbedtls_mpi_cmp_int>
    3edc:	2800      	cmp	r0, #0
    3ede:	dd2e      	ble.n	3f3e <rsa_check_context+0xda>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    3ee0:	b915      	cbnz	r5, 3ee8 <rsa_check_context+0x84>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    3ee2:	b98d      	cbnz	r5, 3f08 <rsa_check_context+0xa4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    3ee4:	4628      	mov	r0, r5
    3ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3ee8:	2100      	movs	r1, #0
    3eea:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3eee:	f003 fc73 	bl	77d8 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3ef2:	2800      	cmp	r0, #0
    3ef4:	dd25      	ble.n	3f42 <rsa_check_context+0xde>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3ef6:	2100      	movs	r1, #0
    3ef8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3efc:	f003 fc6c 	bl	77d8 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3f00:	2800      	cmp	r0, #0
    3f02:	dcee      	bgt.n	3ee2 <rsa_check_context+0x7e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f04:	4d10      	ldr	r5, [pc, #64]	; (3f48 <rsa_check_context+0xe4>)
    3f06:	e7ed      	b.n	3ee4 <rsa_check_context+0x80>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3f08:	2100      	movs	r1, #0
    3f0a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3f0e:	f003 fc63 	bl	77d8 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3f12:	2800      	cmp	r0, #0
    3f14:	dd01      	ble.n	3f1a <rsa_check_context+0xb6>
    return( 0 );
    3f16:	2500      	movs	r5, #0
    3f18:	e7e4      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f1a:	4d0b      	ldr	r5, [pc, #44]	; (3f48 <rsa_check_context+0xe4>)
    3f1c:	e7e2      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f1e:	4d0a      	ldr	r5, [pc, #40]	; (3f48 <rsa_check_context+0xe4>)
    3f20:	e7e0      	b.n	3ee4 <rsa_check_context+0x80>
    3f22:	4d09      	ldr	r5, [pc, #36]	; (3f48 <rsa_check_context+0xe4>)
    3f24:	e7de      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f26:	4d08      	ldr	r5, [pc, #32]	; (3f48 <rsa_check_context+0xe4>)
    3f28:	e7dc      	b.n	3ee4 <rsa_check_context+0x80>
    3f2a:	4d07      	ldr	r5, [pc, #28]	; (3f48 <rsa_check_context+0xe4>)
    3f2c:	e7da      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f2e:	4d06      	ldr	r5, [pc, #24]	; (3f48 <rsa_check_context+0xe4>)
    3f30:	e7d8      	b.n	3ee4 <rsa_check_context+0x80>
    3f32:	4d05      	ldr	r5, [pc, #20]	; (3f48 <rsa_check_context+0xe4>)
    3f34:	e7d6      	b.n	3ee4 <rsa_check_context+0x80>
    3f36:	4d04      	ldr	r5, [pc, #16]	; (3f48 <rsa_check_context+0xe4>)
    3f38:	e7d4      	b.n	3ee4 <rsa_check_context+0x80>
    3f3a:	4d03      	ldr	r5, [pc, #12]	; (3f48 <rsa_check_context+0xe4>)
    3f3c:	e7d2      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f3e:	4d02      	ldr	r5, [pc, #8]	; (3f48 <rsa_check_context+0xe4>)
    3f40:	e7d0      	b.n	3ee4 <rsa_check_context+0x80>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f42:	4d01      	ldr	r5, [pc, #4]	; (3f48 <rsa_check_context+0xe4>)
    3f44:	e7ce      	b.n	3ee4 <rsa_check_context+0x80>
    3f46:	bf00      	nop
    3f48:	ffffbf80 	.word	0xffffbf80

00003f4c <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3f4c:	b570      	push	{r4, r5, r6, lr}
    3f4e:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3f50:	2200      	movs	r2, #0
    3f52:	4611      	mov	r1, r2
    3f54:	f7ff ff86 	bl	3e64 <rsa_check_context>
    3f58:	b9d0      	cbnz	r0, 3f90 <mbedtls_rsa_check_pubkey+0x44>
    3f5a:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3f5c:	f104 0508 	add.w	r5, r4, #8
    3f60:	4628      	mov	r0, r5
    3f62:	f003 fa1e 	bl	73a2 <mbedtls_mpi_bitlen>
    3f66:	287f      	cmp	r0, #127	; 0x7f
    3f68:	d914      	bls.n	3f94 <mbedtls_rsa_check_pubkey+0x48>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3f6a:	3414      	adds	r4, #20
    3f6c:	2100      	movs	r1, #0
    3f6e:	4620      	mov	r0, r4
    3f70:	f003 fa07 	bl	7382 <mbedtls_mpi_get_bit>
    3f74:	b180      	cbz	r0, 3f98 <mbedtls_rsa_check_pubkey+0x4c>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3f76:	4620      	mov	r0, r4
    3f78:	f003 fa13 	bl	73a2 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3f7c:	2801      	cmp	r0, #1
    3f7e:	d90d      	bls.n	3f9c <mbedtls_rsa_check_pubkey+0x50>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3f80:	4629      	mov	r1, r5
    3f82:	4620      	mov	r0, r4
    3f84:	f003 fbe0 	bl	7748 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3f88:	2800      	cmp	r0, #0
    3f8a:	da09      	bge.n	3fa0 <mbedtls_rsa_check_pubkey+0x54>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3f8c:	4630      	mov	r0, r6
    3f8e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f90:	4e04      	ldr	r6, [pc, #16]	; (3fa4 <mbedtls_rsa_check_pubkey+0x58>)
    3f92:	e7fb      	b.n	3f8c <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f94:	4e03      	ldr	r6, [pc, #12]	; (3fa4 <mbedtls_rsa_check_pubkey+0x58>)
    3f96:	e7f9      	b.n	3f8c <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f98:	4e02      	ldr	r6, [pc, #8]	; (3fa4 <mbedtls_rsa_check_pubkey+0x58>)
    3f9a:	e7f7      	b.n	3f8c <mbedtls_rsa_check_pubkey+0x40>
    3f9c:	4e01      	ldr	r6, [pc, #4]	; (3fa4 <mbedtls_rsa_check_pubkey+0x58>)
    3f9e:	e7f5      	b.n	3f8c <mbedtls_rsa_check_pubkey+0x40>
    3fa0:	4e00      	ldr	r6, [pc, #0]	; (3fa4 <mbedtls_rsa_check_pubkey+0x58>)
    3fa2:	e7f3      	b.n	3f8c <mbedtls_rsa_check_pubkey+0x40>
    3fa4:	ffffbe00 	.word	0xffffbe00

00003fa8 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3faa:	b087      	sub	sp, #28
    3fac:	4605      	mov	r5, r0
    3fae:	460c      	mov	r4, r1
    3fb0:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3fb2:	2200      	movs	r2, #0
    3fb4:	4611      	mov	r1, r2
    3fb6:	f7ff ff55 	bl	3e64 <rsa_check_context>
    3fba:	bb90      	cbnz	r0, 4022 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3fbc:	a803      	add	r0, sp, #12
    3fbe:	f003 f94e 	bl	725e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3fc2:	686a      	ldr	r2, [r5, #4]
    3fc4:	4621      	mov	r1, r4
    3fc6:	a803      	add	r0, sp, #12
    3fc8:	f003 fa08 	bl	73dc <mbedtls_mpi_read_binary>
    3fcc:	4604      	mov	r4, r0
    3fce:	b140      	cbz	r0, 3fe2 <mbedtls_rsa_public+0x3a>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3fd0:	a803      	add	r0, sp, #12
    3fd2:	f003 f94a 	bl	726a <mbedtls_mpi_free>

    if( ret != 0 )
    3fd6:	b10c      	cbz	r4, 3fdc <mbedtls_rsa_public+0x34>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3fd8:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    3fdc:	4620      	mov	r0, r4
    3fde:	b007      	add	sp, #28
    3fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3fe2:	f105 0408 	add.w	r4, r5, #8
    3fe6:	4621      	mov	r1, r4
    3fe8:	a803      	add	r0, sp, #12
    3fea:	f003 fbad 	bl	7748 <mbedtls_mpi_cmp_mpi>
    3fee:	2800      	cmp	r0, #0
    3ff0:	db02      	blt.n	3ff8 <mbedtls_rsa_public+0x50>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3ff2:	f06f 0403 	mvn.w	r4, #3
    3ff6:	e7eb      	b.n	3fd0 <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    3ff8:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3ffa:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3ffe:	9300      	str	r3, [sp, #0]
    4000:	4623      	mov	r3, r4
    4002:	f105 0214 	add.w	r2, r5, #20
    4006:	a903      	add	r1, sp, #12
    4008:	4608      	mov	r0, r1
    400a:	f003 ff5d 	bl	7ec8 <mbedtls_mpi_exp_mod>
    400e:	4604      	mov	r4, r0
    4010:	2800      	cmp	r0, #0
    4012:	d1dd      	bne.n	3fd0 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    4014:	463a      	mov	r2, r7
    4016:	4631      	mov	r1, r6
    4018:	a803      	add	r0, sp, #12
    401a:	f003 fa10 	bl	743e <mbedtls_mpi_write_binary>
    401e:	4604      	mov	r4, r0
cleanup:
    4020:	e7d6      	b.n	3fd0 <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4022:	4c01      	ldr	r4, [pc, #4]	; (4028 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x28>)
    4024:	e7da      	b.n	3fdc <mbedtls_rsa_public+0x34>
    4026:	bf00      	nop
    4028:	ffffbf80 	.word	0xffffbf80

0000402c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    402c:	2300      	movs	r3, #0
    402e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    4030:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    4032:	460b      	mov	r3, r1
    4034:	b1e1      	cbz	r1, 4070 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    4036:	4a19      	ldr	r2, [pc, #100]	; (409c <mbedtls_sha256_starts_ret+0x70>)
    4038:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    403a:	4a19      	ldr	r2, [pc, #100]	; (40a0 <mbedtls_sha256_starts_ret+0x74>)
    403c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    403e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    4042:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    4046:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    404a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    404c:	4a15      	ldr	r2, [pc, #84]	; (40a4 <mbedtls_sha256_starts_ret+0x78>)
    404e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    4050:	4a15      	ldr	r2, [pc, #84]	; (40a8 <mbedtls_sha256_starts_ret+0x7c>)
    4052:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    4054:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    4058:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    405c:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    4060:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4062:	4a12      	ldr	r2, [pc, #72]	; (40ac <mbedtls_sha256_starts_ret+0x80>)
    4064:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4066:	4a12      	ldr	r2, [pc, #72]	; (40b0 <mbedtls_sha256_starts_ret+0x84>)
    4068:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    406a:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    406c:	2000      	movs	r0, #0
    406e:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    4070:	4a10      	ldr	r2, [pc, #64]	; (40b4 <mbedtls_sha256_starts_ret+0x88>)
    4072:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    4074:	4a10      	ldr	r2, [pc, #64]	; (40b8 <mbedtls_sha256_starts_ret+0x8c>)
    4076:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    4078:	4a10      	ldr	r2, [pc, #64]	; (40bc <mbedtls_sha256_starts_ret+0x90>)
    407a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    407c:	4a10      	ldr	r2, [pc, #64]	; (40c0 <mbedtls_sha256_starts_ret+0x94>)
    407e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    4080:	4a10      	ldr	r2, [pc, #64]	; (40c4 <mbedtls_sha256_starts_ret+0x98>)
    4082:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    4084:	4a10      	ldr	r2, [pc, #64]	; (40c8 <mbedtls_sha256_starts_ret+0x9c>)
    4086:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    4088:	4a10      	ldr	r2, [pc, #64]	; (40cc <mbedtls_sha256_starts_ret+0xa0>)
    408a:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    408c:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    4090:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    4094:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    4098:	6242      	str	r2, [r0, #36]	; 0x24
    409a:	e7e6      	b.n	406a <mbedtls_sha256_starts_ret+0x3e>
    409c:	c1059ed8 	.word	0xc1059ed8
    40a0:	367cd507 	.word	0x367cd507
    40a4:	f70e5939 	.word	0xf70e5939
    40a8:	ffc00b31 	.word	0xffc00b31
    40ac:	64f98fa7 	.word	0x64f98fa7
    40b0:	befa4fa4 	.word	0xbefa4fa4
    40b4:	6a09e667 	.word	0x6a09e667
    40b8:	bb67ae85 	.word	0xbb67ae85
    40bc:	3c6ef372 	.word	0x3c6ef372
    40c0:	a54ff53a 	.word	0xa54ff53a
    40c4:	510e527f 	.word	0x510e527f
    40c8:	9b05688c 	.word	0x9b05688c
    40cc:	1f83d9ab 	.word	0x1f83d9ab

000040d0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    40d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d4:	b0d1      	sub	sp, #324	; 0x144
    40d6:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    40d8:	2300      	movs	r3, #0
    40da:	e006      	b.n	40ea <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    40dc:	1c9a      	adds	r2, r3, #2
    40de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    40e2:	ac08      	add	r4, sp, #32
    40e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    40e8:	3301      	adds	r3, #1
    40ea:	2b07      	cmp	r3, #7
    40ec:	d9f6      	bls.n	40dc <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    40ee:	2000      	movs	r0, #0
    40f0:	e010      	b.n	4114 <mbedtls_internal_sha256_process+0x44>
        GET_UINT32_BE( W[i], data, 4 * i );
    40f2:	f811 4020 	ldrb.w	r4, [r1, r0, lsl #2]
    40f6:	eb01 0280 	add.w	r2, r1, r0, lsl #2
    40fa:	7853      	ldrb	r3, [r2, #1]
    40fc:	041b      	lsls	r3, r3, #16
    40fe:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    4102:	7894      	ldrb	r4, [r2, #2]
    4104:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    4108:	78d2      	ldrb	r2, [r2, #3]
    410a:	4313      	orrs	r3, r2
    410c:	aa10      	add	r2, sp, #64	; 0x40
    410e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    for( i = 0; i < 16; i++ )
    4112:	3001      	adds	r0, #1
    4114:	280f      	cmp	r0, #15
    4116:	d9ec      	bls.n	40f2 <mbedtls_internal_sha256_process+0x22>

    for( i = 0; i < 16; i += 8 )
    4118:	f04f 0e00 	mov.w	lr, #0
    411c:	e142      	b.n	43a4 <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    411e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4120:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4122:	ea4f 21f6 	mov.w	r1, r6, ror #11
    4126:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    412a:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    412e:	4419      	add	r1, r3
    4130:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4132:	980d      	ldr	r0, [sp, #52]	; 0x34
    4134:	ea84 0300 	eor.w	r3, r4, r0
    4138:	4033      	ands	r3, r6
    413a:	4063      	eors	r3, r4
    413c:	4419      	add	r1, r3
    413e:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 4874 <mbedtls_internal_sha256_process+0x7a4>
    4142:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    4146:	4419      	add	r1, r3
    4148:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    414c:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    4150:	4419      	add	r1, r3
    4152:	9d08      	ldr	r5, [sp, #32]
    4154:	ea4f 3a75 	mov.w	sl, r5, ror #13
    4158:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    415c:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    4160:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4162:	ea05 0307 	and.w	r3, r5, r7
    4166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4168:	ea45 0907 	orr.w	r9, r5, r7
    416c:	ea02 0909 	and.w	r9, r2, r9
    4170:	ea43 0309 	orr.w	r3, r3, r9
    4174:	449a      	add	sl, r3
    4176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4178:	eb01 0903 	add.w	r9, r1, r3
    417c:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    417e:	ea4f 23f9 	mov.w	r3, r9, ror #11
    4182:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    4186:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    418a:	441c      	add	r4, r3
    418c:	ea86 0300 	eor.w	r3, r6, r0
    4190:	ea09 0303 	and.w	r3, r9, r3
    4194:	4043      	eors	r3, r0
    4196:	441c      	add	r4, r3
    4198:	f10e 0a01 	add.w	sl, lr, #1
    419c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    41a0:	441c      	add	r4, r3
    41a2:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    41a6:	441c      	add	r4, r3
    41a8:	ea4f 3371 	mov.w	r3, r1, ror #13
    41ac:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    41b0:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    41b4:	ea05 0a01 	and.w	sl, r5, r1
    41b8:	ea45 0b01 	orr.w	fp, r5, r1
    41bc:	ea07 0b0b 	and.w	fp, r7, fp
    41c0:	ea4a 0a0b 	orr.w	sl, sl, fp
    41c4:	4453      	add	r3, sl
    41c6:	4422      	add	r2, r4
    41c8:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    41ca:	ea4f 23f2 	mov.w	r3, r2, ror #11
    41ce:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    41d2:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    41d6:	4418      	add	r0, r3
    41d8:	ea86 0309 	eor.w	r3, r6, r9
    41dc:	4013      	ands	r3, r2
    41de:	4073      	eors	r3, r6
    41e0:	4418      	add	r0, r3
    41e2:	f10e 0a02 	add.w	sl, lr, #2
    41e6:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    41ea:	4418      	add	r0, r3
    41ec:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    41f0:	4418      	add	r0, r3
    41f2:	ea4f 3374 	mov.w	r3, r4, ror #13
    41f6:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    41fa:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    41fe:	ea01 0a04 	and.w	sl, r1, r4
    4202:	ea41 0b04 	orr.w	fp, r1, r4
    4206:	ea05 0b0b 	and.w	fp, r5, fp
    420a:	ea4a 0a0b 	orr.w	sl, sl, fp
    420e:	4453      	add	r3, sl
    4210:	4407      	add	r7, r0
    4212:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    4214:	ea4f 23f7 	mov.w	r3, r7, ror #11
    4218:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    421c:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    4220:	441e      	add	r6, r3
    4222:	ea89 0302 	eor.w	r3, r9, r2
    4226:	403b      	ands	r3, r7
    4228:	ea89 0303 	eor.w	r3, r9, r3
    422c:	441e      	add	r6, r3
    422e:	f10e 0a03 	add.w	sl, lr, #3
    4232:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4236:	441e      	add	r6, r3
    4238:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    423c:	441e      	add	r6, r3
    423e:	ea4f 3370 	mov.w	r3, r0, ror #13
    4242:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    4246:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    424a:	ea04 0a00 	and.w	sl, r4, r0
    424e:	ea44 0b00 	orr.w	fp, r4, r0
    4252:	ea01 0b0b 	and.w	fp, r1, fp
    4256:	ea4a 0a0b 	orr.w	sl, sl, fp
    425a:	4453      	add	r3, sl
    425c:	4435      	add	r5, r6
    425e:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    4260:	ea4f 23f5 	mov.w	r3, r5, ror #11
    4264:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    4268:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    426c:	4499      	add	r9, r3
    426e:	ea82 0307 	eor.w	r3, r2, r7
    4272:	402b      	ands	r3, r5
    4274:	4053      	eors	r3, r2
    4276:	4499      	add	r9, r3
    4278:	f10e 0a04 	add.w	sl, lr, #4
    427c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4280:	444b      	add	r3, r9
    4282:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    4286:	444b      	add	r3, r9
    4288:	ea4f 3976 	mov.w	r9, r6, ror #13
    428c:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    4290:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    4294:	ea00 0a06 	and.w	sl, r0, r6
    4298:	ea40 0b06 	orr.w	fp, r0, r6
    429c:	ea04 0b0b 	and.w	fp, r4, fp
    42a0:	ea4a 0a0b 	orr.w	sl, sl, fp
    42a4:	44d1      	add	r9, sl
    42a6:	4419      	add	r1, r3
    42a8:	910f      	str	r1, [sp, #60]	; 0x3c
    42aa:	444b      	add	r3, r9
    42ac:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    42ae:	ea4f 29f1 	mov.w	r9, r1, ror #11
    42b2:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    42b6:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    42ba:	444a      	add	r2, r9
    42bc:	ea87 0905 	eor.w	r9, r7, r5
    42c0:	ea01 0909 	and.w	r9, r1, r9
    42c4:	ea87 0909 	eor.w	r9, r7, r9
    42c8:	4491      	add	r9, r2
    42ca:	f10e 0a05 	add.w	sl, lr, #5
    42ce:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    42d2:	444a      	add	r2, r9
    42d4:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    42d8:	444a      	add	r2, r9
    42da:	ea4f 3a73 	mov.w	sl, r3, ror #13
    42de:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    42e2:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    42e6:	ea06 0903 	and.w	r9, r6, r3
    42ea:	ea46 0b03 	orr.w	fp, r6, r3
    42ee:	ea00 0b0b 	and.w	fp, r0, fp
    42f2:	ea49 090b 	orr.w	r9, r9, fp
    42f6:	44ca      	add	sl, r9
    42f8:	eb04 0902 	add.w	r9, r4, r2
    42fc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    4300:	4452      	add	r2, sl
    4302:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    4304:	ea4f 24f9 	mov.w	r4, r9, ror #11
    4308:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    430c:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    4310:	4427      	add	r7, r4
    4312:	ea85 0401 	eor.w	r4, r5, r1
    4316:	ea09 0404 	and.w	r4, r9, r4
    431a:	406c      	eors	r4, r5
    431c:	443c      	add	r4, r7
    431e:	f10e 0a06 	add.w	sl, lr, #6
    4322:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    4326:	443c      	add	r4, r7
    4328:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    432c:	443c      	add	r4, r7
    432e:	ea4f 3772 	mov.w	r7, r2, ror #13
    4332:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    4336:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    433a:	ea03 0a02 	and.w	sl, r3, r2
    433e:	ea43 0b02 	orr.w	fp, r3, r2
    4342:	ea06 0b0b 	and.w	fp, r6, fp
    4346:	ea4a 0a0b 	orr.w	sl, sl, fp
    434a:	4457      	add	r7, sl
    434c:	4420      	add	r0, r4
    434e:	900d      	str	r0, [sp, #52]	; 0x34
    4350:	443c      	add	r4, r7
    4352:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    4354:	ea4f 27f0 	mov.w	r7, r0, ror #11
    4358:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    435c:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    4360:	443d      	add	r5, r7
    4362:	ea81 0909 	eor.w	r9, r1, r9
    4366:	ea00 0909 	and.w	r9, r0, r9
    436a:	ea81 0109 	eor.w	r1, r1, r9
    436e:	4429      	add	r1, r5
    4370:	f10e 0007 	add.w	r0, lr, #7
    4374:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    4378:	4429      	add	r1, r5
    437a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    437e:	4401      	add	r1, r0
    4380:	ea4f 3074 	mov.w	r0, r4, ror #13
    4384:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    4388:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    438c:	ea02 0504 	and.w	r5, r2, r4
    4390:	4322      	orrs	r2, r4
    4392:	4013      	ands	r3, r2
    4394:	432b      	orrs	r3, r5
    4396:	4403      	add	r3, r0
    4398:	440e      	add	r6, r1
    439a:	960c      	str	r6, [sp, #48]	; 0x30
    439c:	440b      	add	r3, r1
    439e:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    43a0:	f10e 0e08 	add.w	lr, lr, #8
    43a4:	f1be 0f0f 	cmp.w	lr, #15
    43a8:	f67f aeb9 	bls.w	411e <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    43ac:	2610      	movs	r6, #16
    43ae:	e24b      	b.n	4848 <mbedtls_internal_sha256_process+0x778>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    43b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    43b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    43b4:	ea4f 27f3 	mov.w	r7, r3, ror #11
    43b8:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    43bc:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    43c0:	443a      	add	r2, r7
    43c2:	980e      	ldr	r0, [sp, #56]	; 0x38
    43c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    43c6:	ea80 0705 	eor.w	r7, r0, r5
    43ca:	401f      	ands	r7, r3
    43cc:	4047      	eors	r7, r0
    43ce:	443a      	add	r2, r7
    43d0:	f8df b4a0 	ldr.w	fp, [pc, #1184]	; 4874 <mbedtls_internal_sha256_process+0x7a4>
    43d4:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    43d8:	4417      	add	r7, r2
    43da:	1eb3      	subs	r3, r6, #2
    43dc:	461a      	mov	r2, r3
    43de:	ab10      	add	r3, sp, #64	; 0x40
    43e0:	9204      	str	r2, [sp, #16]
    43e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    43e6:	ea4f 44f2 	mov.w	r4, r2, ror #19
    43ea:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    43ee:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    43f2:	1ff2      	subs	r2, r6, #7
    43f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    43f8:	4414      	add	r4, r2
    43fa:	f1a6 0a0f 	sub.w	sl, r6, #15
    43fe:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    4402:	ea4f 42bc 	mov.w	r2, ip, ror #18
    4406:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    440a:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    440e:	4414      	add	r4, r2
    4410:	f1a6 0210 	sub.w	r2, r6, #16
    4414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4418:	4422      	add	r2, r4
    441a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    441e:	443a      	add	r2, r7
    4420:	9908      	ldr	r1, [sp, #32]
    4422:	ea4f 3c71 	mov.w	ip, r1, ror #13
    4426:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    442a:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    442e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4430:	463c      	mov	r4, r7
    4432:	400c      	ands	r4, r1
    4434:	990a      	ldr	r1, [sp, #40]	; 0x28
    4436:	9100      	str	r1, [sp, #0]
    4438:	9908      	ldr	r1, [sp, #32]
    443a:	ea41 0c07 	orr.w	ip, r1, r7
    443e:	9900      	ldr	r1, [sp, #0]
    4440:	ea01 0c0c 	and.w	ip, r1, ip
    4444:	ea44 0c0c 	orr.w	ip, r4, ip
    4448:	44f4      	add	ip, lr
    444a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    444c:	4414      	add	r4, r2
    444e:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    4450:	ea4f 28f4 	mov.w	r8, r4, ror #11
    4454:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    4458:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    445c:	4480      	add	r8, r0
    445e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4460:	ea81 0905 	eor.w	r9, r1, r5
    4464:	ea04 0909 	and.w	r9, r4, r9
    4468:	ea85 0909 	eor.w	r9, r5, r9
    446c:	44c8      	add	r8, r9
    446e:	1c71      	adds	r1, r6, #1
    4470:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    4474:	4480      	add	r8, r0
    4476:	1e70      	subs	r0, r6, #1
    4478:	9005      	str	r0, [sp, #20]
    447a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    447e:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    4482:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    4486:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    448a:	1fb0      	subs	r0, r6, #6
    448c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4490:	4484      	add	ip, r0
    4492:	f1a6 0e0e 	sub.w	lr, r6, #14
    4496:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    449a:	ea4f 40b9 	mov.w	r0, r9, ror #18
    449e:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    44a2:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    44a6:	4460      	add	r0, ip
    44a8:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    44ac:	4448      	add	r0, r9
    44ae:	9102      	str	r1, [sp, #8]
    44b0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    44b4:	eb08 0900 	add.w	r9, r8, r0
    44b8:	ea4f 3872 	mov.w	r8, r2, ror #13
    44bc:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    44c0:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    44c4:	9908      	ldr	r1, [sp, #32]
    44c6:	ea01 0002 	and.w	r0, r1, r2
    44ca:	ea41 0c02 	orr.w	ip, r1, r2
    44ce:	9701      	str	r7, [sp, #4]
    44d0:	ea07 0c0c 	and.w	ip, r7, ip
    44d4:	ea40 0c0c 	orr.w	ip, r0, ip
    44d8:	44c4      	add	ip, r8
    44da:	9800      	ldr	r0, [sp, #0]
    44dc:	eb00 0809 	add.w	r8, r0, r9
    44e0:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    44e2:	ea4f 20f8 	mov.w	r0, r8, ror #11
    44e6:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    44ea:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    44ee:	4405      	add	r5, r0
    44f0:	990c      	ldr	r1, [sp, #48]	; 0x30
    44f2:	ea81 0004 	eor.w	r0, r1, r4
    44f6:	ea08 0000 	and.w	r0, r8, r0
    44fa:	4048      	eors	r0, r1
    44fc:	4405      	add	r5, r0
    44fe:	1cb0      	adds	r0, r6, #2
    4500:	4601      	mov	r1, r0
    4502:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    4506:	4405      	add	r5, r0
    4508:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    450c:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    4510:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    4514:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    4518:	1f70      	subs	r0, r6, #5
    451a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    451e:	4484      	add	ip, r0
    4520:	f1a6 0a0d 	sub.w	sl, r6, #13
    4524:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    4528:	ea4f 40b0 	mov.w	r0, r0, ror #18
    452c:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    4530:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    4534:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    4538:	4460      	add	r0, ip
    453a:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    453e:	4460      	add	r0, ip
    4540:	9103      	str	r1, [sp, #12]
    4542:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    4546:	4405      	add	r5, r0
    4548:	ea4f 3c79 	mov.w	ip, r9, ror #13
    454c:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    4550:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    4554:	ea02 0009 	and.w	r0, r2, r9
    4558:	ea42 0e09 	orr.w	lr, r2, r9
    455c:	9908      	ldr	r1, [sp, #32]
    455e:	ea01 0e0e 	and.w	lr, r1, lr
    4562:	ea40 000e 	orr.w	r0, r0, lr
    4566:	4484      	add	ip, r0
    4568:	9f01      	ldr	r7, [sp, #4]
    456a:	eb07 0e05 	add.w	lr, r7, r5
    456e:	eb05 070c 	add.w	r7, r5, ip
    4572:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4574:	ea4f 20fe 	mov.w	r0, lr, ror #11
    4578:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    457c:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    4580:	990c      	ldr	r1, [sp, #48]	; 0x30
    4582:	180d      	adds	r5, r1, r0
    4584:	ea84 0108 	eor.w	r1, r4, r8
    4588:	ea0e 0101 	and.w	r1, lr, r1
    458c:	4061      	eors	r1, r4
    458e:	1868      	adds	r0, r5, r1
    4590:	1cf7      	adds	r7, r6, #3
    4592:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    4596:	4401      	add	r1, r0
    4598:	9d02      	ldr	r5, [sp, #8]
    459a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    459e:	ea4f 45f0 	mov.w	r5, r0, ror #19
    45a2:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    45a6:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    45aa:	1f30      	subs	r0, r6, #4
    45ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    45b0:	4405      	add	r5, r0
    45b2:	9501      	str	r5, [sp, #4]
    45b4:	f1a6 0c0c 	sub.w	ip, r6, #12
    45b8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    45bc:	ea4f 40b0 	mov.w	r0, r0, ror #18
    45c0:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    45c4:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    45c8:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    45cc:	9d01      	ldr	r5, [sp, #4]
    45ce:	4428      	add	r0, r5
    45d0:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    45d4:	4428      	add	r0, r5
    45d6:	9706      	str	r7, [sp, #24]
    45d8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    45dc:	4401      	add	r1, r0
    45de:	9800      	ldr	r0, [sp, #0]
    45e0:	ea4f 3570 	mov.w	r5, r0, ror #13
    45e4:	4607      	mov	r7, r0
    45e6:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    45ea:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    45ee:	ea09 0000 	and.w	r0, r9, r0
    45f2:	ea49 0a07 	orr.w	sl, r9, r7
    45f6:	ea02 0a0a 	and.w	sl, r2, sl
    45fa:	ea40 000a 	orr.w	r0, r0, sl
    45fe:	4405      	add	r5, r0
    4600:	9808      	ldr	r0, [sp, #32]
    4602:	eb00 0a01 	add.w	sl, r0, r1
    4606:	4429      	add	r1, r5
    4608:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    460a:	ea4f 25fa 	mov.w	r5, sl, ror #11
    460e:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    4612:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    4616:	442c      	add	r4, r5
    4618:	ea88 050e 	eor.w	r5, r8, lr
    461c:	ea0a 0505 	and.w	r5, sl, r5
    4620:	ea88 0505 	eor.w	r5, r8, r5
    4624:	4425      	add	r5, r4
    4626:	1d34      	adds	r4, r6, #4
    4628:	9402      	str	r4, [sp, #8]
    462a:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    462e:	4405      	add	r5, r0
    4630:	9903      	ldr	r1, [sp, #12]
    4632:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    4636:	ea4f 40f4 	mov.w	r0, r4, ror #19
    463a:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    463e:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    4642:	1ef4      	subs	r4, r6, #3
    4644:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    4648:	4420      	add	r0, r4
    464a:	f1a6 070b 	sub.w	r7, r6, #11
    464e:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    4652:	ea4f 44b1 	mov.w	r4, r1, ror #18
    4656:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    465a:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    465e:	4404      	add	r4, r0
    4660:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    4664:	4420      	add	r0, r4
    4666:	9902      	ldr	r1, [sp, #8]
    4668:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    466c:	4405      	add	r5, r0
    466e:	9901      	ldr	r1, [sp, #4]
    4670:	ea4f 3c71 	mov.w	ip, r1, ror #13
    4674:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    4678:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    467c:	9800      	ldr	r0, [sp, #0]
    467e:	4604      	mov	r4, r0
    4680:	400c      	ands	r4, r1
    4682:	4601      	mov	r1, r0
    4684:	9801      	ldr	r0, [sp, #4]
    4686:	4308      	orrs	r0, r1
    4688:	ea09 0000 	and.w	r0, r9, r0
    468c:	4320      	orrs	r0, r4
    468e:	4460      	add	r0, ip
    4690:	442a      	add	r2, r5
    4692:	920f      	str	r2, [sp, #60]	; 0x3c
    4694:	4428      	add	r0, r5
    4696:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    4698:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    469c:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    46a0:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    46a4:	44c4      	add	ip, r8
    46a6:	ea8e 080a 	eor.w	r8, lr, sl
    46aa:	9203      	str	r2, [sp, #12]
    46ac:	ea02 0808 	and.w	r8, r2, r8
    46b0:	ea8e 0808 	eor.w	r8, lr, r8
    46b4:	44c4      	add	ip, r8
    46b6:	1d74      	adds	r4, r6, #5
    46b8:	4621      	mov	r1, r4
    46ba:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    46be:	44a4      	add	ip, r4
    46c0:	9d06      	ldr	r5, [sp, #24]
    46c2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    46c6:	ea4f 44f5 	mov.w	r4, r5, ror #19
    46ca:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    46ce:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    46d2:	9a04      	ldr	r2, [sp, #16]
    46d4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    46d8:	442c      	add	r4, r5
    46da:	f1a6 080a 	sub.w	r8, r6, #10
    46de:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    46e2:	ea4f 45b2 	mov.w	r5, r2, ror #18
    46e6:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    46ea:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    46ee:	4425      	add	r5, r4
    46f0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    46f4:	442c      	add	r4, r5
    46f6:	9104      	str	r1, [sp, #16]
    46f8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    46fc:	4464      	add	r4, ip
    46fe:	ea4f 3770 	mov.w	r7, r0, ror #13
    4702:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    4706:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    470a:	9901      	ldr	r1, [sp, #4]
    470c:	ea01 0500 	and.w	r5, r1, r0
    4710:	ea41 0c00 	orr.w	ip, r1, r0
    4714:	9900      	ldr	r1, [sp, #0]
    4716:	ea01 0c0c 	and.w	ip, r1, ip
    471a:	ea45 050c 	orr.w	r5, r5, ip
    471e:	442f      	add	r7, r5
    4720:	eb09 0c04 	add.w	ip, r9, r4
    4724:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    4728:	443c      	add	r4, r7
    472a:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    472c:	ea4f 27fc 	mov.w	r7, ip, ror #11
    4730:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    4734:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    4738:	4477      	add	r7, lr
    473a:	9d03      	ldr	r5, [sp, #12]
    473c:	ea8a 0e05 	eor.w	lr, sl, r5
    4740:	ea0c 0e0e 	and.w	lr, ip, lr
    4744:	ea8a 0e0e 	eor.w	lr, sl, lr
    4748:	4477      	add	r7, lr
    474a:	f106 0906 	add.w	r9, r6, #6
    474e:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    4752:	442f      	add	r7, r5
    4754:	9d02      	ldr	r5, [sp, #8]
    4756:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    475a:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    475e:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    4762:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    4766:	9a05      	ldr	r2, [sp, #20]
    4768:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    476c:	44ae      	add	lr, r5
    476e:	f1a6 0209 	sub.w	r2, r6, #9
    4772:	9202      	str	r2, [sp, #8]
    4774:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    4778:	4629      	mov	r1, r5
    477a:	ea4f 45b5 	mov.w	r5, r5, ror #18
    477e:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    4782:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    4786:	4475      	add	r5, lr
    4788:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    478c:	4475      	add	r5, lr
    478e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    4792:	442f      	add	r7, r5
    4794:	ea4f 3574 	mov.w	r5, r4, ror #13
    4798:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    479c:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    47a0:	ea00 0904 	and.w	r9, r0, r4
    47a4:	ea40 0e04 	orr.w	lr, r0, r4
    47a8:	9a01      	ldr	r2, [sp, #4]
    47aa:	ea02 0e0e 	and.w	lr, r2, lr
    47ae:	ea49 090e 	orr.w	r9, r9, lr
    47b2:	44a9      	add	r9, r5
    47b4:	9900      	ldr	r1, [sp, #0]
    47b6:	19cd      	adds	r5, r1, r7
    47b8:	950d      	str	r5, [sp, #52]	; 0x34
    47ba:	444f      	add	r7, r9
    47bc:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    47be:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    47c2:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    47c6:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    47ca:	44d6      	add	lr, sl
    47cc:	9a03      	ldr	r2, [sp, #12]
    47ce:	ea82 0c0c 	eor.w	ip, r2, ip
    47d2:	ea05 0c0c 	and.w	ip, r5, ip
    47d6:	ea82 020c 	eor.w	r2, r2, ip
    47da:	4472      	add	r2, lr
    47dc:	f106 0807 	add.w	r8, r6, #7
    47e0:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    47e4:	eb02 0e05 	add.w	lr, r2, r5
    47e8:	9904      	ldr	r1, [sp, #16]
    47ea:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    47ee:	ea4f 42f5 	mov.w	r2, r5, ror #19
    47f2:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    47f6:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    47fa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    47fe:	440a      	add	r2, r1
    4800:	f1a6 0508 	sub.w	r5, r6, #8
    4804:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    4808:	ea4f 45bc 	mov.w	r5, ip, ror #18
    480c:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    4810:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    4814:	442a      	add	r2, r5
    4816:	9d02      	ldr	r5, [sp, #8]
    4818:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    481c:	442a      	add	r2, r5
    481e:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    4822:	4472      	add	r2, lr
    4824:	ea4f 3377 	mov.w	r3, r7, ror #13
    4828:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    482c:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    4830:	ea04 0507 	and.w	r5, r4, r7
    4834:	4327      	orrs	r7, r4
    4836:	4038      	ands	r0, r7
    4838:	4328      	orrs	r0, r5
    483a:	4418      	add	r0, r3
    483c:	9901      	ldr	r1, [sp, #4]
    483e:	4411      	add	r1, r2
    4840:	910c      	str	r1, [sp, #48]	; 0x30
    4842:	4410      	add	r0, r2
    4844:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    4846:	3608      	adds	r6, #8
    4848:	2e3f      	cmp	r6, #63	; 0x3f
    484a:	f67f adb1 	bls.w	43b0 <mbedtls_internal_sha256_process+0x2e0>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    484e:	2100      	movs	r1, #0
    4850:	9807      	ldr	r0, [sp, #28]
    4852:	e009      	b.n	4868 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    4854:	ab08      	add	r3, sp, #32
    4856:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    485a:	1c8a      	adds	r2, r1, #2
    485c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    4860:	4423      	add	r3, r4
    4862:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    4866:	3101      	adds	r1, #1
    4868:	2907      	cmp	r1, #7
    486a:	d9f3      	bls.n	4854 <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    486c:	2000      	movs	r0, #0
    486e:	b051      	add	sp, #324	; 0x144
    4870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4874:	00009fec 	.word	0x00009fec

00004878 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
    4878:	6201      	str	r1, [r0, #32]
    cb->r.get8 = &cbuf_buf_reader_get8;
    487a:	4b08      	ldr	r3, [pc, #32]	; (489c <cbor_buf_reader_init+0x24>)
    487c:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
    487e:	4b08      	ldr	r3, [pc, #32]	; (48a0 <cbor_buf_reader_init+0x28>)
    4880:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
    4882:	4b08      	ldr	r3, [pc, #32]	; (48a4 <cbor_buf_reader_init+0x2c>)
    4884:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
    4886:	4b08      	ldr	r3, [pc, #32]	; (48a8 <cbor_buf_reader_init+0x30>)
    4888:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
    488a:	4b08      	ldr	r3, [pc, #32]	; (48ac <cbor_buf_reader_init+0x34>)
    488c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
    488e:	4b08      	ldr	r3, [pc, #32]	; (48b0 <cbor_buf_reader_init+0x38>)
    4890:	6143      	str	r3, [r0, #20]
    cb->r.get_string_chunk = &cbor_buf_reader_get_string_chunk;
    4892:	4b08      	ldr	r3, [pc, #32]	; (48b4 <cbor_buf_reader_init+0x3c>)
    4894:	6183      	str	r3, [r0, #24]
    cb->r.message_size = data;
    4896:	61c2      	str	r2, [r0, #28]
}
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	00008647 	.word	0x00008647
    48a0:	000086b7 	.word	0x000086b7
    48a4:	0000869b 	.word	0x0000869b
    48a8:	0000867d 	.word	0x0000867d
    48ac:	00008665 	.word	0x00008665
    48b0:	00008653 	.word	0x00008653
    48b4:	0000864d 	.word	0x0000864d

000048b8 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
    48b8:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
    48ba:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
    48be:	4b05      	ldr	r3, [pc, #20]	; (48d4 <cbor_encoder_create_map+0x1c>)
    48c0:	429c      	cmp	r4, r3
    48c2:	d903      	bls.n	48cc <cbor_encoder_create_map+0x14>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
    48c4:	23a0      	movs	r3, #160	; 0xa0
    48c6:	f003 ff06 	bl	86d6 <create_container>
}
    48ca:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
    48cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    48d0:	e7fb      	b.n	48ca <cbor_encoder_create_map+0x12>
    48d2:	bf00      	nop
    48d4:	7ffffffe 	.word	0x7ffffffe

000048d8 <_cbor_value_copy_string>:
 * \sa cbor_value_get_byte_string_chunk(), cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
    48d8:	b570      	push	{r4, r5, r6, lr}
    48da:	b084      	sub	sp, #16
    48dc:	4614      	mov	r4, r2
    bool copied_all;
    size_t maxlen = *buflen;
    48de:	6816      	ldr	r6, [r2, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
    48e0:	460d      	mov	r5, r1
    48e2:	b1c1      	cbz	r1, 4916 <_cbor_value_copy_string+0x3e>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
    48e4:	6802      	ldr	r2, [r0, #0]
    48e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
    48e8:	6952      	ldr	r2, [r2, #20]
    48ea:	9201      	str	r2, [sp, #4]
    48ec:	9300      	str	r3, [sp, #0]
    48ee:	f10d 030f 	add.w	r3, sp, #15
    48f2:	4622      	mov	r2, r4
    48f4:	4629      	mov	r1, r5
    48f6:	f004 fa1e 	bl	8d36 <iterate_string_chunks>
    if (err) {
    48fa:	4603      	mov	r3, r0
    48fc:	b940      	cbnz	r0, 4910 <_cbor_value_copy_string+0x38>
        return err;
    }

    if (!copied_all) {
    48fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4902:	b152      	cbz	r2, 491a <_cbor_value_copy_string+0x42>
        return CborErrorOutOfMemory;
    }

    if (buffer && *buflen < maxlen) {
    4904:	b125      	cbz	r5, 4910 <_cbor_value_copy_string+0x38>
    4906:	6822      	ldr	r2, [r4, #0]
    4908:	42b2      	cmp	r2, r6
    490a:	d201      	bcs.n	4910 <_cbor_value_copy_string+0x38>
        *((uint8_t *)buffer + *buflen) = '\0';
    490c:	2100      	movs	r1, #0
    490e:	54a9      	strb	r1, [r5, r2]
    }

    return CborNoError;
}
    4910:	4618      	mov	r0, r3
    4912:	b004      	add	sp, #16
    4914:	bd70      	pop	{r4, r5, r6, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
    4916:	4a02      	ldr	r2, [pc, #8]	; (4920 <_cbor_value_copy_string+0x48>)
    4918:	e7e7      	b.n	48ea <_cbor_value_copy_string+0x12>
        return CborErrorOutOfMemory;
    491a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    491e:	e7f7      	b.n	4910 <_cbor_value_copy_string+0x38>
    4920:	000089fd 	.word	0x000089fd

00004924 <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    4924:	4b04      	ldr	r3, [pc, #16]	; (4938 <uicr_HFXOCNT_erased+0x14>)
    4926:	6a1b      	ldr	r3, [r3, #32]
    4928:	f1b3 3fff 	cmp.w	r3, #4294967295
    492c:	d001      	beq.n	4932 <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    492e:	2000      	movs	r0, #0
    }
    4930:	4770      	bx	lr
            return true;
    4932:	2001      	movs	r0, #1
    4934:	4770      	bx	lr
    4936:	bf00      	nop
    4938:	00ff8000 	.word	0x00ff8000

0000493c <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    493c:	4b04      	ldr	r3, [pc, #16]	; (4950 <uicr_HFXOSRC_erased+0x14>)
    493e:	69db      	ldr	r3, [r3, #28]
    4940:	f013 0f01 	tst.w	r3, #1
    4944:	d101      	bne.n	494a <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    4946:	2000      	movs	r0, #0
    }
    4948:	4770      	bx	lr
            return true;
    494a:	2001      	movs	r0, #1
    494c:	4770      	bx	lr
    494e:	bf00      	nop
    4950:	00ff8000 	.word	0x00ff8000

00004954 <errata_6>:
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    4954:	4b08      	ldr	r3, [pc, #32]	; (4978 <errata_6+0x24>)
    4956:	681b      	ldr	r3, [r3, #0]
    4958:	2b09      	cmp	r3, #9
    495a:	d001      	beq.n	4960 <errata_6+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }
        
        return false;
    495c:	2000      	movs	r0, #0
    495e:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    4960:	4b06      	ldr	r3, [pc, #24]	; (497c <errata_6+0x28>)
    4962:	681b      	ldr	r3, [r3, #0]
    4964:	2b01      	cmp	r3, #1
    4966:	d003      	beq.n	4970 <errata_6+0x1c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    4968:	2b02      	cmp	r3, #2
    496a:	d003      	beq.n	4974 <errata_6+0x20>
        return false;
    496c:	2000      	movs	r0, #0
    496e:	4770      	bx	lr
                return true;
    4970:	2001      	movs	r0, #1
    4972:	4770      	bx	lr
                return true;
    4974:	2001      	movs	r0, #1
    }
    4976:	4770      	bx	lr
    4978:	00ff0130 	.word	0x00ff0130
    497c:	00ff0134 	.word	0x00ff0134

00004980 <errata_14>:

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    4980:	4b06      	ldr	r3, [pc, #24]	; (499c <errata_14+0x1c>)
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	2b09      	cmp	r3, #9
    4986:	d001      	beq.n	498c <errata_14+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
                return true;
            }
        }

        return false;
    4988:	2000      	movs	r0, #0
    498a:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    498c:	4b04      	ldr	r3, [pc, #16]	; (49a0 <errata_14+0x20>)
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	2b01      	cmp	r3, #1
    4992:	d001      	beq.n	4998 <errata_14+0x18>
        return false;
    4994:	2000      	movs	r0, #0
    4996:	4770      	bx	lr
                return true;
    4998:	2001      	movs	r0, #1
    }
    499a:	4770      	bx	lr
    499c:	00ff0130 	.word	0x00ff0130
    49a0:	00ff0134 	.word	0x00ff0134

000049a4 <errata_15>:


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    49a4:	4b06      	ldr	r3, [pc, #24]	; (49c0 <errata_15+0x1c>)
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	2b09      	cmp	r3, #9
    49aa:	d001      	beq.n	49b0 <errata_15+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }

        return false;
    49ac:	2000      	movs	r0, #0
    49ae:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    49b0:	4b04      	ldr	r3, [pc, #16]	; (49c4 <errata_15+0x20>)
    49b2:	681b      	ldr	r3, [r3, #0]
    49b4:	2b02      	cmp	r3, #2
    49b6:	d001      	beq.n	49bc <errata_15+0x18>
        return false;
    49b8:	2000      	movs	r0, #0
    49ba:	4770      	bx	lr
                return true;
    49bc:	2001      	movs	r0, #1
    }
    49be:	4770      	bx	lr
    49c0:	00ff0130 	.word	0x00ff0130
    49c4:	00ff0134 	.word	0x00ff0134

000049c8 <errata_20>:


    bool errata_20()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    49c8:	4b06      	ldr	r3, [pc, #24]	; (49e4 <errata_20+0x1c>)
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	2b09      	cmp	r3, #9
    49ce:	d001      	beq.n	49d4 <errata_20+0xc>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
                return true;
            }
        }

        return false;
    49d0:	2000      	movs	r0, #0
    49d2:	4770      	bx	lr
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    49d4:	4b04      	ldr	r3, [pc, #16]	; (49e8 <errata_20+0x20>)
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	2b02      	cmp	r3, #2
    49da:	d001      	beq.n	49e0 <errata_20+0x18>
        return false;
    49dc:	2000      	movs	r0, #0
    49de:	4770      	bx	lr
                return true;
    49e0:	2001      	movs	r0, #1
    }
    49e2:	4770      	bx	lr
    49e4:	00ff0130 	.word	0x00ff0130
    49e8:	00ff0134 	.word	0x00ff0134

000049ec <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    49ec:	4b01      	ldr	r3, [pc, #4]	; (49f4 <SystemCoreClockUpdate+0x8>)
    49ee:	4a02      	ldr	r2, [pc, #8]	; (49f8 <SystemCoreClockUpdate+0xc>)
    49f0:	601a      	str	r2, [r3, #0]
}
    49f2:	4770      	bx	lr
    49f4:	20007070 	.word	0x20007070
    49f8:	03d09000 	.word	0x03d09000

000049fc <SystemInit>:
{
    49fc:	b508      	push	{r3, lr}
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    49fe:	2200      	movs	r2, #0
    4a00:	2aff      	cmp	r2, #255	; 0xff
    4a02:	d815      	bhi.n	4a30 <SystemInit+0x34>
    4a04:	f102 0360 	add.w	r3, r2, #96	; 0x60
    4a08:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    4a0c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    4a10:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a14:	d00c      	beq.n	4a30 <SystemInit+0x34>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4a16:	f102 0360 	add.w	r3, r2, #96	; 0x60
    4a1a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    4a1e:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    4a22:	00db      	lsls	r3, r3, #3
    4a24:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    4a28:	685b      	ldr	r3, [r3, #4]
    4a2a:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    4a2c:	3201      	adds	r2, #1
    4a2e:	e7e7      	b.n	4a00 <SystemInit+0x4>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    4a30:	f7ff ff84 	bl	493c <uicr_HFXOSRC_erased>
    4a34:	2800      	cmp	r0, #0
    4a36:	d13b      	bne.n	4ab0 <SystemInit+0xb4>
    4a38:	f7ff ff74 	bl	4924 <uicr_HFXOCNT_erased>
    4a3c:	bbc0      	cbnz	r0, 4ab0 <SystemInit+0xb4>
        if (errata_6()){
    4a3e:	f7ff ff89 	bl	4954 <errata_6>
    4a42:	b130      	cbz	r0, 4a52 <SystemInit+0x56>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    4a44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a48:	2200      	movs	r2, #0
    4a4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (errata_14()){
    4a52:	f7ff ff95 	bl	4980 <errata_14>
    4a56:	b130      	cbz	r0, 4a66 <SystemInit+0x6a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4a58:	2301      	movs	r3, #1
    4a5a:	4a35      	ldr	r2, [pc, #212]	; (4b30 <SystemInit+0x134>)
    4a5c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4a5e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    4a62:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (errata_15()){
    4a66:	f7ff ff9d 	bl	49a4 <errata_15>
    4a6a:	b138      	cbz	r0, 4a7c <SystemInit+0x80>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    4a6c:	4b30      	ldr	r3, [pc, #192]	; (4b30 <SystemInit+0x134>)
    4a6e:	2200      	movs	r2, #0
    4a70:	601a      	str	r2, [r3, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4a72:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
    4a76:	2201      	movs	r2, #1
    4a78:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (errata_20()){
    4a7c:	f7ff ffa4 	bl	49c8 <errata_20>
    4a80:	b110      	cbz	r0, 4a88 <SystemInit+0x8c>
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    4a82:	4b2c      	ldr	r3, [pc, #176]	; (4b34 <SystemInit+0x138>)
    4a84:	220c      	movs	r2, #12
    4a86:	601a      	str	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
    4a88:	4b2b      	ldr	r3, [pc, #172]	; (4b38 <SystemInit+0x13c>)
    4a8a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    4a8e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    4a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4a9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    4a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    4aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4aa6:	f3bf 8f6f 	isb	sy
    SystemCoreClockUpdate();
    4aaa:	f7ff ff9f 	bl	49ec <SystemCoreClockUpdate>
}
    4aae:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4ab0:	4b22      	ldr	r3, [pc, #136]	; (4b3c <SystemInit+0x140>)
    4ab2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4ab6:	2b01      	cmp	r3, #1
    4ab8:	d1fa      	bne.n	4ab0 <SystemInit+0xb4>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    4aba:	4b20      	ldr	r3, [pc, #128]	; (4b3c <SystemInit+0x140>)
    4abc:	2201      	movs	r2, #1
    4abe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4ac2:	4b1e      	ldr	r3, [pc, #120]	; (4b3c <SystemInit+0x140>)
    4ac4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4ac8:	2b01      	cmp	r3, #1
    4aca:	d1fa      	bne.n	4ac2 <SystemInit+0xc6>
          if (uicr_HFXOSRC_erased()){
    4acc:	f7ff ff36 	bl	493c <uicr_HFXOSRC_erased>
    4ad0:	b148      	cbz	r0, 4ae6 <SystemInit+0xea>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    4ad2:	4a1b      	ldr	r2, [pc, #108]	; (4b40 <SystemInit+0x144>)
    4ad4:	69d3      	ldr	r3, [r2, #28]
    4ad6:	f023 0301 	bic.w	r3, r3, #1
    4ada:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4adc:	4b17      	ldr	r3, [pc, #92]	; (4b3c <SystemInit+0x140>)
    4ade:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4ae2:	2b01      	cmp	r3, #1
    4ae4:	d1fa      	bne.n	4adc <SystemInit+0xe0>
          if (uicr_HFXOCNT_erased()){
    4ae6:	f7ff ff1d 	bl	4924 <uicr_HFXOCNT_erased>
    4aea:	b158      	cbz	r0, 4b04 <SystemInit+0x108>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    4aec:	4a14      	ldr	r2, [pc, #80]	; (4b40 <SystemInit+0x144>)
    4aee:	6a13      	ldr	r3, [r2, #32]
    4af0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4af4:	f043 0320 	orr.w	r3, r3, #32
    4af8:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4afa:	4b10      	ldr	r3, [pc, #64]	; (4b3c <SystemInit+0x140>)
    4afc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4b00:	2b01      	cmp	r3, #1
    4b02:	d1fa      	bne.n	4afa <SystemInit+0xfe>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    4b04:	4b0d      	ldr	r3, [pc, #52]	; (4b3c <SystemInit+0x140>)
    4b06:	2200      	movs	r2, #0
    4b08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4b0c:	4b0b      	ldr	r3, [pc, #44]	; (4b3c <SystemInit+0x140>)
    4b0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4b12:	2b01      	cmp	r3, #1
    4b14:	d1fa      	bne.n	4b0c <SystemInit+0x110>
  __ASM volatile ("dsb 0xF":::"memory");
    4b16:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4b1a:	4907      	ldr	r1, [pc, #28]	; (4b38 <SystemInit+0x13c>)
    4b1c:	68ca      	ldr	r2, [r1, #12]
    4b1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4b22:	4b08      	ldr	r3, [pc, #32]	; (4b44 <SystemInit+0x148>)
    4b24:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4b26:	60cb      	str	r3, [r1, #12]
    4b28:	f3bf 8f4f 	dsb	sy
    __NOP();
    4b2c:	bf00      	nop
    4b2e:	e7fd      	b.n	4b2c <SystemInit+0x130>
    4b30:	50004a38 	.word	0x50004a38
    4b34:	5003aee4 	.word	0x5003aee4
    4b38:	e000ed00 	.word	0xe000ed00
    4b3c:	50039000 	.word	0x50039000
    4b40:	00ff8000 	.word	0x00ff8000
    4b44:	05fa0004 	.word	0x05fa0004

00004b48 <nvmc_readonly_mode_set>:
#endif

__STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                       nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    4b48:	4b02      	ldr	r3, [pc, #8]	; (4b54 <nvmc_readonly_mode_set+0xc>)
    4b4a:	2200      	movs	r2, #0
    4b4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4b50:	4770      	bx	lr
    4b52:	bf00      	nop
    4b54:	50039000 	.word	0x50039000

00004b58 <nvmc_write_mode_set>:
    4b58:	4b02      	ldr	r3, [pc, #8]	; (4b64 <nvmc_write_mode_set+0xc>)
    4b5a:	2201      	movs	r2, #1
    4b5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    4b60:	4770      	bx	lr
    4b62:	bf00      	nop
    4b64:	50039000 	.word	0x50039000

00004b68 <nvmc_erase_mode_set>:
    4b68:	4b02      	ldr	r3, [pc, #8]	; (4b74 <nvmc_erase_mode_set+0xc>)
    4b6a:	2202      	movs	r2, #2
    4b6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop
    4b74:	50039000 	.word	0x50039000

00004b78 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4b78:	4b04      	ldr	r3, [pc, #16]	; (4b8c <nvmc_word_write+0x14>)
    4b7a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4b7e:	f013 0f01 	tst.w	r3, #1
    4b82:	d0f9      	beq.n	4b78 <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4b84:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4b86:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4b8a:	4770      	bx	lr
    4b8c:	50039000 	.word	0x50039000

00004b90 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    4b90:	b510      	push	{r4, lr}
    4b92:	4604      	mov	r4, r0
    NRFX_ASSERT(addr < flash_total_size_get());

    if (!is_page_aligned_check(addr))
    4b94:	f004 f9f8 	bl	8f88 <is_page_aligned_check>
    4b98:	b908      	cbnz	r0, 4b9e <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    4b9a:	4808      	ldr	r0, [pc, #32]	; (4bbc <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    4b9c:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    4b9e:	f7ff ffe3 	bl	4b68 <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    4ba2:	f04f 33ff 	mov.w	r3, #4294967295
    4ba6:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4ba8:	4b05      	ldr	r3, [pc, #20]	; (4bc0 <nrfx_nvmc_page_erase+0x30>)
    4baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4bae:	f013 0f01 	tst.w	r3, #1
    4bb2:	d0f9      	beq.n	4ba8 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    4bb4:	f7ff ffc8 	bl	4b48 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    4bb8:	4802      	ldr	r0, [pc, #8]	; (4bc4 <nrfx_nvmc_page_erase+0x34>)
    4bba:	e7ef      	b.n	4b9c <nrfx_nvmc_page_erase+0xc>
    4bbc:	0bad000a 	.word	0x0bad000a
    4bc0:	50039000 	.word	0x50039000
    4bc4:	0bad0000 	.word	0x0bad0000

00004bc8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    4bc8:	b538      	push	{r3, r4, r5, lr}
    4bca:	4605      	mov	r5, r0
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    4bcc:	4b0a      	ldr	r3, [pc, #40]	; (4bf8 <z_sys_device_do_config_level+0x30>)
    4bce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4bd2:	e000      	b.n	4bd6 <z_sys_device_do_config_level+0xe>
								info++) {
    4bd4:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
    4bd6:	1c6b      	adds	r3, r5, #1
    4bd8:	4a07      	ldr	r2, [pc, #28]	; (4bf8 <z_sys_device_do_config_level+0x30>)
    4bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4bde:	42a3      	cmp	r3, r4
    4be0:	d908      	bls.n	4bf4 <z_sys_device_do_config_level+0x2c>
		int retval;
		struct device_config *device_conf = info->config;
    4be2:	6823      	ldr	r3, [r4, #0]

		retval = device_conf->init(info);
    4be4:	685b      	ldr	r3, [r3, #4]
    4be6:	4620      	mov	r0, r4
    4be8:	4798      	blx	r3
		if (retval != 0) {
    4bea:	2800      	cmp	r0, #0
    4bec:	d0f2      	beq.n	4bd4 <z_sys_device_do_config_level+0xc>
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    4bee:	2300      	movs	r3, #0
    4bf0:	6063      	str	r3, [r4, #4]
    4bf2:	e7ef      	b.n	4bd4 <z_sys_device_do_config_level+0xc>
		} else {
			z_object_init(info);
		}
	}
}
    4bf4:	bd38      	pop	{r3, r4, r5, pc}
    4bf6:	bf00      	nop
    4bf8:	0000a0ec 	.word	0x0000a0ec

00004bfc <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    4bfc:	b538      	push	{r3, r4, r5, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    4bfe:	4c11      	ldr	r4, [pc, #68]	; (4c44 <z_impl_device_get_binding+0x48>)
    4c00:	e000      	b.n	4c04 <z_impl_device_get_binding+0x8>
    4c02:	340c      	adds	r4, #12
    4c04:	4b10      	ldr	r3, [pc, #64]	; (4c48 <z_impl_device_get_binding+0x4c>)
    4c06:	429c      	cmp	r4, r3
    4c08:	d008      	beq.n	4c1c <z_impl_device_get_binding+0x20>
		if ((info->driver_api != NULL) &&
    4c0a:	6863      	ldr	r3, [r4, #4]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d0f8      	beq.n	4c02 <z_impl_device_get_binding+0x6>
		    (info->config->name == name)) {
    4c10:	6823      	ldr	r3, [r4, #0]
    4c12:	681b      	ldr	r3, [r3, #0]
		if ((info->driver_api != NULL) &&
    4c14:	4283      	cmp	r3, r0
    4c16:	d1f4      	bne.n	4c02 <z_impl_device_get_binding+0x6>
			return info;
		}
	}

	return NULL;
}
    4c18:	4620      	mov	r0, r4
    4c1a:	bd38      	pop	{r3, r4, r5, pc}
    4c1c:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
    4c1e:	4c09      	ldr	r4, [pc, #36]	; (4c44 <z_impl_device_get_binding+0x48>)
    4c20:	e000      	b.n	4c24 <z_impl_device_get_binding+0x28>
    4c22:	340c      	adds	r4, #12
    4c24:	4b08      	ldr	r3, [pc, #32]	; (4c48 <z_impl_device_get_binding+0x4c>)
    4c26:	429c      	cmp	r4, r3
    4c28:	d00a      	beq.n	4c40 <z_impl_device_get_binding+0x44>
		if (info->driver_api == NULL) {
    4c2a:	6863      	ldr	r3, [r4, #4]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d0f8      	beq.n	4c22 <z_impl_device_get_binding+0x26>
		if (strcmp(name, info->config->name) == 0) {
    4c30:	6823      	ldr	r3, [r4, #0]
    4c32:	6819      	ldr	r1, [r3, #0]
    4c34:	4628      	mov	r0, r5
    4c36:	f001 fce3 	bl	6600 <strcmp>
    4c3a:	2800      	cmp	r0, #0
    4c3c:	d1f1      	bne.n	4c22 <z_impl_device_get_binding+0x26>
    4c3e:	e7eb      	b.n	4c18 <z_impl_device_get_binding+0x1c>
	return NULL;
    4c40:	2400      	movs	r4, #0
    4c42:	e7e9      	b.n	4c18 <z_impl_device_get_binding+0x1c>
    4c44:	2000707c 	.word	0x2000707c
    4c48:	2000710c 	.word	0x2000710c

00004c4c <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    4c4c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4c4e:	4803      	ldr	r0, [pc, #12]	; (4c5c <z_bss_zero+0x10>)
    4c50:	4a03      	ldr	r2, [pc, #12]	; (4c60 <z_bss_zero+0x14>)
    4c52:	1a12      	subs	r2, r2, r0
    4c54:	2100      	movs	r1, #0
    4c56:	f001 fd1b 	bl	6690 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
    4c5a:	bd08      	pop	{r3, pc}
    4c5c:	20000000 	.word	0x20000000
    4c60:	20004028 	.word	0x20004028

00004c64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4c64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4c66:	4806      	ldr	r0, [pc, #24]	; (4c80 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4c68:	4a06      	ldr	r2, [pc, #24]	; (4c84 <z_data_copy+0x20>)
    4c6a:	1a12      	subs	r2, r2, r0
    4c6c:	4906      	ldr	r1, [pc, #24]	; (4c88 <z_data_copy+0x24>)
    4c6e:	f001 fcea 	bl	6646 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4c72:	4a06      	ldr	r2, [pc, #24]	; (4c8c <z_data_copy+0x28>)
    4c74:	4906      	ldr	r1, [pc, #24]	; (4c90 <z_data_copy+0x2c>)
    4c76:	4807      	ldr	r0, [pc, #28]	; (4c94 <z_data_copy+0x30>)
    4c78:	f001 fce5 	bl	6646 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4c7c:	bd08      	pop	{r3, pc}
    4c7e:	bf00      	nop
    4c80:	20007028 	.word	0x20007028
    4c84:	20007130 	.word	0x20007130
    4c88:	0000a108 	.word	0x0000a108
    4c8c:	00000000 	.word	0x00000000
    4c90:	0000a108 	.word	0x0000a108
    4c94:	20000000 	.word	0x20000000

00004c98 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4c98:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4c9a:	2002      	movs	r0, #2
    4c9c:	f7ff ff94 	bl	4bc8 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    4ca0:	2003      	movs	r0, #3
    4ca2:	f7ff ff91 	bl	4bc8 <z_sys_device_do_config_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4ca6:	f7fb fc27 	bl	4f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4caa:	4a03      	ldr	r2, [pc, #12]	; (4cb8 <bg_thread_main+0x20>)
    4cac:	7b13      	ldrb	r3, [r2, #12]
    4cae:	f023 0301 	bic.w	r3, r3, #1
    4cb2:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4cb4:	bd08      	pop	{r3, pc}
    4cb6:	bf00      	nop
    4cb8:	20003f88 	.word	0x20003f88

00004cbc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4cbc:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4cbe:	f7fc ff49 	bl	1b54 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    4cc2:	4b16      	ldr	r3, [pc, #88]	; (4d1c <z_cstart+0x60>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4cc4:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cc8:	4c15      	ldr	r4, [pc, #84]	; (4d20 <z_cstart+0x64>)
    4cca:	23e0      	movs	r3, #224	; 0xe0
    4ccc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4cd0:	2500      	movs	r5, #0
    4cd2:	77e5      	strb	r5, [r4, #31]
    4cd4:	7625      	strb	r5, [r4, #24]
    4cd6:	7665      	strb	r5, [r4, #25]
    4cd8:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4cdc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4ce0:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4ce2:	f7fe f8bb 	bl	2e5c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4ce6:	f7fd ff6b 	bl	2bc0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4cea:	f04f 33ff 	mov.w	r3, #4294967295
    4cee:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4cf2:	4628      	mov	r0, r5
    4cf4:	f7ff ff68 	bl	4bc8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4cf8:	2001      	movs	r0, #1
    4cfa:	f7ff ff65 	bl	4bc8 <z_sys_device_do_config_level>

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading(&dummy_thread);
	switch_to_main_thread();
#else
	bg_thread_main(NULL, NULL, NULL);
    4cfe:	462a      	mov	r2, r5
    4d00:	4629      	mov	r1, r5
    4d02:	4628      	mov	r0, r5
    4d04:	f7ff ffc8 	bl	4c98 <bg_thread_main>
    4d08:	f04f 0220 	mov.w	r2, #32
    4d0c:	f3ef 8311 	mrs	r3, BASEPRI
    4d10:	f382 8811 	msr	BASEPRI, r2
    4d14:	f3bf 8f6f 	isb	sy
    4d18:	e7fe      	b.n	4d18 <z_cstart+0x5c>
    4d1a:	bf00      	nop
    4d1c:	20007028 	.word	0x20007028
    4d20:	e000ed00 	.word	0xe000ed00

00004d24 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    4d24:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4d26:	4c05      	ldr	r4, [pc, #20]	; (4d3c <init_mem_slab_module+0x18>)
    4d28:	e003      	b.n	4d32 <init_mem_slab_module+0xe>
		create_free_list(slab);
    4d2a:	4620      	mov	r0, r4
    4d2c:	f004 f9c7 	bl	90be <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4d30:	341c      	adds	r4, #28
    4d32:	4b03      	ldr	r3, [pc, #12]	; (4d40 <init_mem_slab_module+0x1c>)
    4d34:	429c      	cmp	r4, r3
    4d36:	d3f8      	bcc.n	4d2a <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    4d38:	2000      	movs	r0, #0
    4d3a:	bd10      	pop	{r4, pc}
    4d3c:	2000710c 	.word	0x2000710c
    4d40:	2000710c 	.word	0x2000710c

00004d44 <z_reschedule>:
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key)) {
    4d44:	4608      	mov	r0, r1
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4d46:	b9c1      	cbnz	r1, 4d7a <z_reschedule+0x36>
{
    4d48:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4d4a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    4d4e:	2b0d      	cmp	r3, #13
    4d50:	d807      	bhi.n	4d62 <z_reschedule+0x1e>
    4d52:	b13b      	cbz	r3, 4d64 <z_reschedule+0x20>
    4d54:	4b0b      	ldr	r3, [pc, #44]	; (4d84 <z_reschedule+0x40>)
    4d56:	685b      	ldr	r3, [r3, #4]
    4d58:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4d5c:	d102      	bne.n	4d64 <z_reschedule+0x20>
    4d5e:	2101      	movs	r1, #1
    4d60:	e000      	b.n	4d64 <z_reschedule+0x20>
    4d62:	2101      	movs	r1, #1
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4d64:	f011 0f01 	tst.w	r1, #1
    4d68:	d004      	beq.n	4d74 <z_reschedule+0x30>
	__asm__ volatile(
    4d6a:	f380 8811 	msr	BASEPRI, r0
    4d6e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4d72:	bd08      	pop	{r3, pc}
    4d74:	f7fd ff5c 	bl	2c30 <z_arch_swap>
    4d78:	e7fb      	b.n	4d72 <z_reschedule+0x2e>
    4d7a:	f381 8811 	msr	BASEPRI, r1
    4d7e:	f3bf 8f6f 	isb	sy
    4d82:	4770      	bx	lr
    4d84:	e000ed00 	.word	0xe000ed00

00004d88 <z_reschedule_irqlock>:

void z_reschedule_irqlock(u32_t key)
{
    4d88:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4d8a:	4603      	mov	r3, r0
    4d8c:	b968      	cbnz	r0, 4daa <z_reschedule_irqlock+0x22>
    4d8e:	f3ef 8205 	mrs	r2, IPSR
    4d92:	2a0d      	cmp	r2, #13
    4d94:	d807      	bhi.n	4da6 <z_reschedule_irqlock+0x1e>
    4d96:	b16a      	cbz	r2, 4db4 <z_reschedule_irqlock+0x2c>
    4d98:	4a0a      	ldr	r2, [pc, #40]	; (4dc4 <z_reschedule_irqlock+0x3c>)
    4d9a:	6852      	ldr	r2, [r2, #4]
    4d9c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4da0:	d00a      	beq.n	4db8 <z_reschedule_irqlock+0x30>
    4da2:	2200      	movs	r2, #0
    4da4:	e000      	b.n	4da8 <z_reschedule_irqlock+0x20>
    4da6:	2201      	movs	r2, #1
    4da8:	b142      	cbz	r2, 4dbc <z_reschedule_irqlock+0x34>
    4daa:	f383 8811 	msr	BASEPRI, r3
    4dae:	f3bf 8f6f 	isb	sy
	if (resched(key)) {
		z_swap_irqlock(key);
	} else {
		irq_unlock(key);
	}
}
    4db2:	bd08      	pop	{r3, pc}
    4db4:	2200      	movs	r2, #0
    4db6:	e7f7      	b.n	4da8 <z_reschedule_irqlock+0x20>
    4db8:	2201      	movs	r2, #1
    4dba:	e7f5      	b.n	4da8 <z_reschedule_irqlock+0x20>
    4dbc:	4618      	mov	r0, r3
    4dbe:	f7fd ff37 	bl	2c30 <z_arch_swap>
    4dc2:	e7f6      	b.n	4db2 <z_reschedule_irqlock+0x2a>
    4dc4:	e000ed00 	.word	0xe000ed00

00004dc8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4dc8:	4b0a      	ldr	r3, [pc, #40]	; (4df4 <z_priq_dumb_remove+0x2c>)
    4dca:	4283      	cmp	r3, r0
    4dcc:	d009      	beq.n	4de2 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4dce:	684b      	ldr	r3, [r1, #4]
    4dd0:	680a      	ldr	r2, [r1, #0]
    4dd2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4dd4:	680b      	ldr	r3, [r1, #0]
    4dd6:	684a      	ldr	r2, [r1, #4]
    4dd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4dda:	2300      	movs	r3, #0
    4ddc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    4dde:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4de0:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4de2:	3b20      	subs	r3, #32
    4de4:	689b      	ldr	r3, [r3, #8]
    4de6:	428b      	cmp	r3, r1
    4de8:	d1f1      	bne.n	4dce <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	u8_t state = thread->base.thread_state;
    4dea:	7b4b      	ldrb	r3, [r1, #13]
    4dec:	f013 0f1f 	tst.w	r3, #31
    4df0:	d0ed      	beq.n	4dce <z_priq_dumb_remove+0x6>
    4df2:	e7f5      	b.n	4de0 <z_priq_dumb_remove+0x18>
    4df4:	20004014 	.word	0x20004014

00004df8 <update_cache>:
{
    4df8:	b510      	push	{r4, lr}
    4dfa:	4604      	mov	r4, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    4dfc:	480c      	ldr	r0, [pc, #48]	; (4e30 <update_cache+0x38>)
    4dfe:	f004 f99a 	bl	9136 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    4e02:	4603      	mov	r3, r0
    4e04:	b158      	cbz	r0, 4e1e <update_cache+0x26>
	if (preempt_ok != 0) {
    4e06:	b93c      	cbnz	r4, 4e18 <update_cache+0x20>
	if (z_is_thread_prevented_from_running(_current)) {
    4e08:	4a0a      	ldr	r2, [pc, #40]	; (4e34 <update_cache+0x3c>)
    4e0a:	6892      	ldr	r2, [r2, #8]
    4e0c:	7b51      	ldrb	r1, [r2, #13]
    4e0e:	f011 0f1f 	tst.w	r1, #31
    4e12:	d101      	bne.n	4e18 <update_cache+0x20>
	return node->next != NULL;
    4e14:	6999      	ldr	r1, [r3, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4e16:	b129      	cbz	r1, 4e24 <update_cache+0x2c>
		_kernel.ready_q.cache = th;
    4e18:	4a06      	ldr	r2, [pc, #24]	; (4e34 <update_cache+0x3c>)
    4e1a:	61d3      	str	r3, [r2, #28]
}
    4e1c:	bd10      	pop	{r4, pc}
	return th ? th : _current_cpu->idle_thread;
    4e1e:	4b05      	ldr	r3, [pc, #20]	; (4e34 <update_cache+0x3c>)
    4e20:	68db      	ldr	r3, [r3, #12]
    4e22:	e7f0      	b.n	4e06 <update_cache+0xe>
	if (!IS_ENABLED(CONFIG_PREEMPT_ENABLED) &&
    4e24:	4904      	ldr	r1, [pc, #16]	; (4e38 <update_cache+0x40>)
    4e26:	428a      	cmp	r2, r1
    4e28:	d0f6      	beq.n	4e18 <update_cache+0x20>
		_kernel.ready_q.cache = _current;
    4e2a:	4b02      	ldr	r3, [pc, #8]	; (4e34 <update_cache+0x3c>)
    4e2c:	61da      	str	r2, [r3, #28]
    4e2e:	e7f5      	b.n	4e1c <update_cache+0x24>
    4e30:	20004014 	.word	0x20004014
    4e34:	20003ff4 	.word	0x20003ff4
    4e38:	20003f1c 	.word	0x20003f1c

00004e3c <z_add_thread_to_ready_q>:
{
    4e3c:	b570      	push	{r4, r5, r6, lr}
    4e3e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    4e40:	2300      	movs	r3, #0
	__asm__ volatile(
    4e42:	f04f 0220 	mov.w	r2, #32
    4e46:	f3ef 8611 	mrs	r6, BASEPRI
    4e4a:	f382 8811 	msr	BASEPRI, r2
    4e4e:	f3bf 8f6f 	isb	sy
    4e52:	e01d      	b.n	4e90 <z_add_thread_to_ready_q+0x54>
	node->prev = successor->prev;
    4e54:	6863      	ldr	r3, [r4, #4]
    4e56:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4e58:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    4e5a:	6863      	ldr	r3, [r4, #4]
    4e5c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4e5e:	6065      	str	r5, [r4, #4]
    4e60:	e00a      	b.n	4e78 <z_add_thread_to_ready_q+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e62:	2400      	movs	r4, #0
    4e64:	e01a      	b.n	4e9c <z_add_thread_to_ready_q+0x60>
	node->next = list;
    4e66:	4b17      	ldr	r3, [pc, #92]	; (4ec4 <z_add_thread_to_ready_q+0x88>)
    4e68:	f103 0220 	add.w	r2, r3, #32
    4e6c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    4e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e70:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    4e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e74:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4e76:	625d      	str	r5, [r3, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
    4e78:	7b6b      	ldrb	r3, [r5, #13]
    4e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e7e:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    4e80:	2000      	movs	r0, #0
    4e82:	f7ff ffb9 	bl	4df8 <update_cache>
	__asm__ volatile(
    4e86:	f386 8811 	msr	BASEPRI, r6
    4e8a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4e8e:	2301      	movs	r3, #1
    4e90:	b9b3      	cbnz	r3, 4ec0 <z_add_thread_to_ready_q+0x84>
	return list->head == list;
    4e92:	4b0c      	ldr	r3, [pc, #48]	; (4ec4 <z_add_thread_to_ready_q+0x88>)
    4e94:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e98:	429c      	cmp	r4, r3
    4e9a:	d0e2      	beq.n	4e62 <z_add_thread_to_ready_q+0x26>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e9c:	2c00      	cmp	r4, #0
    4e9e:	d0e2      	beq.n	4e66 <z_add_thread_to_ready_q+0x2a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    4ea0:	4621      	mov	r1, r4
    4ea2:	4628      	mov	r0, r5
    4ea4:	f004 f91d 	bl	90e2 <z_is_t1_higher_prio_than_t2>
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d1d3      	bne.n	4e54 <z_add_thread_to_ready_q+0x18>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4eac:	2c00      	cmp	r4, #0
    4eae:	d0da      	beq.n	4e66 <z_add_thread_to_ready_q+0x2a>
	return (node == list->tail) ? NULL : node->next;
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <z_add_thread_to_ready_q+0x88>)
    4eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4eb4:	429c      	cmp	r4, r3
    4eb6:	d0d6      	beq.n	4e66 <z_add_thread_to_ready_q+0x2a>
    4eb8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4eba:	2c00      	cmp	r4, #0
    4ebc:	d1ee      	bne.n	4e9c <z_add_thread_to_ready_q+0x60>
    4ebe:	e7d2      	b.n	4e66 <z_add_thread_to_ready_q+0x2a>
}
    4ec0:	bd70      	pop	{r4, r5, r6, pc}
    4ec2:	bf00      	nop
    4ec4:	20003ff4 	.word	0x20003ff4

00004ec8 <z_remove_thread_from_ready_q>:
{
    4ec8:	b538      	push	{r3, r4, r5, lr}
    4eca:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    4ecc:	2300      	movs	r3, #0
	__asm__ volatile(
    4ece:	f04f 0220 	mov.w	r2, #32
    4ed2:	f3ef 8511 	mrs	r5, BASEPRI
    4ed6:	f382 8811 	msr	BASEPRI, r2
    4eda:	f3bf 8f6f 	isb	sy
    4ede:	e00c      	b.n	4efa <z_remove_thread_from_ready_q+0x32>
		update_cache(thread == _current);
    4ee0:	4b0d      	ldr	r3, [pc, #52]	; (4f18 <z_remove_thread_from_ready_q+0x50>)
    4ee2:	6898      	ldr	r0, [r3, #8]
    4ee4:	42a0      	cmp	r0, r4
    4ee6:	bf14      	ite	ne
    4ee8:	2000      	movne	r0, #0
    4eea:	2001      	moveq	r0, #1
    4eec:	f7ff ff84 	bl	4df8 <update_cache>
	__asm__ volatile(
    4ef0:	f385 8811 	msr	BASEPRI, r5
    4ef4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4ef8:	2301      	movs	r3, #1
    4efa:	b963      	cbnz	r3, 4f16 <z_remove_thread_from_ready_q+0x4e>
	return (thread->base.thread_state & state) != 0U;
    4efc:	7b63      	ldrb	r3, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4efe:	f013 0f40 	tst.w	r3, #64	; 0x40
    4f02:	d0ed      	beq.n	4ee0 <z_remove_thread_from_ready_q+0x18>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4f04:	4621      	mov	r1, r4
    4f06:	4805      	ldr	r0, [pc, #20]	; (4f1c <z_remove_thread_from_ready_q+0x54>)
    4f08:	f7ff ff5e 	bl	4dc8 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    4f0c:	7b63      	ldrb	r3, [r4, #13]
    4f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4f12:	7363      	strb	r3, [r4, #13]
    4f14:	e7e4      	b.n	4ee0 <z_remove_thread_from_ready_q+0x18>
}
    4f16:	bd38      	pop	{r3, r4, r5, pc}
    4f18:	20003ff4 	.word	0x20003ff4
    4f1c:	20004014 	.word	0x20004014

00004f20 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    4f20:	4b01      	ldr	r3, [pc, #4]	; (4f28 <z_impl_k_current_get+0x8>)
    4f22:	6898      	ldr	r0, [r3, #8]
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop
    4f28:	20003ff4 	.word	0x20003ff4

00004f2c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4f2c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f2e:	f04f 0320 	mov.w	r3, #32
    4f32:	f3ef 8411 	mrs	r4, BASEPRI
    4f36:	f383 8811 	msr	BASEPRI, r3
    4f3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
    4f3e:	f004 f96c 	bl	921a <do_sem_give>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    4f42:	4621      	mov	r1, r4
    4f44:	4801      	ldr	r0, [pc, #4]	; (4f4c <z_impl_k_sem_give+0x20>)
    4f46:	f7ff fefd 	bl	4d44 <z_reschedule>
}
    4f4a:	bd10      	pop	{r4, pc}
    4f4c:	2000401c 	.word	0x2000401c

00004f50 <first>:
	return list->head == list;
    4f50:	4b03      	ldr	r3, [pc, #12]	; (4f60 <first+0x10>)
    4f52:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f54:	4298      	cmp	r0, r3
    4f56:	d000      	beq.n	4f5a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4f58:	4770      	bx	lr
    4f5a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4f5c:	e7fc      	b.n	4f58 <first+0x8>
    4f5e:	bf00      	nop
    4f60:	20007074 	.word	0x20007074

00004f64 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f64:	b130      	cbz	r0, 4f74 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4f66:	4a04      	ldr	r2, [pc, #16]	; (4f78 <next+0x14>)
    4f68:	6852      	ldr	r2, [r2, #4]
    4f6a:	4290      	cmp	r0, r2
    4f6c:	d001      	beq.n	4f72 <next+0xe>
    4f6e:	6800      	ldr	r0, [r0, #0]
    4f70:	4770      	bx	lr
    4f72:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4f74:	4770      	bx	lr
    4f76:	bf00      	nop
    4f78:	20007074 	.word	0x20007074

00004f7c <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    4f7c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4f7e:	4b04      	ldr	r3, [pc, #16]	; (4f90 <elapsed+0x14>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	b10b      	cbz	r3, 4f88 <elapsed+0xc>
    4f84:	2000      	movs	r0, #0
}
    4f86:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4f88:	f7fc ffaa 	bl	1ee0 <z_clock_elapsed>
    4f8c:	e7fb      	b.n	4f86 <elapsed+0xa>
    4f8e:	bf00      	nop
    4f90:	2000401c 	.word	0x2000401c

00004f94 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4f94:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    4f98:	f04f 0320 	mov.w	r3, #32
    4f9c:	f3ef 8511 	mrs	r5, BASEPRI
    4fa0:	f383 8811 	msr	BASEPRI, r3
    4fa4:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4fa8:	4b24      	ldr	r3, [pc, #144]	; (503c <z_clock_announce+0xa8>)
    4faa:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4fac:	e01f      	b.n	4fee <z_clock_announce+0x5a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4fae:	4e24      	ldr	r6, [pc, #144]	; (5040 <z_clock_announce+0xac>)
    4fb0:	e9d6 0100 	ldrd	r0, r1, [r6]
    4fb4:	eb10 0b02 	adds.w	fp, r0, r2
    4fb8:	eb41 7ce2 	adc.w	ip, r1, r2, asr #31
    4fbc:	e9c6 bc00 	strd	fp, ip, [r6]
		announce_remaining -= dt;
    4fc0:	1a9b      	subs	r3, r3, r2
    4fc2:	4a1e      	ldr	r2, [pc, #120]	; (503c <z_clock_announce+0xa8>)
    4fc4:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4fc6:	2300      	movs	r3, #0
    4fc8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    4fca:	4620      	mov	r0, r4
    4fcc:	f004 f96f 	bl	92ae <remove_timeout>
	__asm__ volatile(
    4fd0:	f385 8811 	msr	BASEPRI, r5
    4fd4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4fd8:	68e3      	ldr	r3, [r4, #12]
    4fda:	4620      	mov	r0, r4
    4fdc:	4798      	blx	r3
	__asm__ volatile(
    4fde:	f04f 0320 	mov.w	r3, #32
    4fe2:	f3ef 8511 	mrs	r5, BASEPRI
    4fe6:	f383 8811 	msr	BASEPRI, r3
    4fea:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4fee:	f7ff ffaf 	bl	4f50 <first>
    4ff2:	4604      	mov	r4, r0
    4ff4:	b120      	cbz	r0, 5000 <z_clock_announce+0x6c>
    4ff6:	6882      	ldr	r2, [r0, #8]
    4ff8:	4b10      	ldr	r3, [pc, #64]	; (503c <z_clock_announce+0xa8>)
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	429a      	cmp	r2, r3
    4ffe:	ddd6      	ble.n	4fae <z_clock_announce+0x1a>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    5000:	b124      	cbz	r4, 500c <z_clock_announce+0x78>
		first()->dticks -= announce_remaining;
    5002:	68a3      	ldr	r3, [r4, #8]
    5004:	4a0d      	ldr	r2, [pc, #52]	; (503c <z_clock_announce+0xa8>)
    5006:	6812      	ldr	r2, [r2, #0]
    5008:	1a9b      	subs	r3, r3, r2
    500a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    500c:	480c      	ldr	r0, [pc, #48]	; (5040 <z_clock_announce+0xac>)
    500e:	490b      	ldr	r1, [pc, #44]	; (503c <z_clock_announce+0xa8>)
    5010:	680c      	ldr	r4, [r1, #0]
    5012:	e9d0 2300 	ldrd	r2, r3, [r0]
    5016:	eb12 0b04 	adds.w	fp, r2, r4
    501a:	eb43 7ce4 	adc.w	ip, r3, r4, asr #31
    501e:	e9c0 bc00 	strd	fp, ip, [r0]
	announce_remaining = 0;
    5022:	2400      	movs	r4, #0
    5024:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    5026:	f004 f955 	bl	92d4 <next_timeout>
    502a:	4621      	mov	r1, r4
    502c:	f7fc ff02 	bl	1e34 <z_clock_set_timeout>
	__asm__ volatile(
    5030:	f385 8811 	msr	BASEPRI, r5
    5034:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5038:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    503c:	2000401c 	.word	0x2000401c
    5040:	20000000 	.word	0x20000000

00005044 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    5044:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    5046:	4c05      	ldr	r4, [pc, #20]	; (505c <init_static_pools+0x18>)
    5048:	e003      	b.n	5052 <init_static_pools+0xe>
		k_mem_pool_init(p);
    504a:	4620      	mov	r0, r4
    504c:	f004 f96f 	bl	932e <k_mem_pool_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    5050:	341c      	adds	r4, #28
    5052:	4b03      	ldr	r3, [pc, #12]	; (5060 <init_static_pools+0x1c>)
    5054:	429c      	cmp	r4, r3
    5056:	d3f8      	bcc.n	504a <init_static_pools+0x6>
	}

	return 0;
}
    5058:	2000      	movs	r0, #0
    505a:	bd10      	pop	{r4, pc}
    505c:	2000710c 	.word	0x2000710c
    5060:	2000710c 	.word	0x2000710c

00005064 <do_boot>:
{
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	b082      	sub	sp, #8
    5068:	4605      	mov	r5, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    506a:	a901      	add	r1, sp, #4
    506c:	7900      	ldrb	r0, [r0, #4]
    506e:	f7fb fafd 	bl	66c <flash_device_base>
                                     rsp->br_image_off +
    5072:	68ac      	ldr	r4, [r5, #8]
    vt = (struct arm_vector_table *)(flash_base +
    5074:	9b01      	ldr	r3, [sp, #4]
    5076:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
    5078:	682b      	ldr	r3, [r5, #0]
    507a:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
    507c:	1966      	adds	r6, r4, r5
	__asm__ volatile(
    507e:	f04f 0220 	mov.w	r2, #32
    5082:	f3ef 8311 	mrs	r3, BASEPRI
    5086:	f382 8811 	msr	BASEPRI, r2
    508a:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    508e:	f001 f9b7 	bl	6400 <sys_clock_disable>
    __set_MSP(vt->msp);
    5092:	5963      	ldr	r3, [r4, r5]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5094:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
    5098:	6873      	ldr	r3, [r6, #4]
    509a:	4798      	blx	r3
}
    509c:	b002      	add	sp, #8
    509e:	bd70      	pop	{r4, r5, r6, pc}

000050a0 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    50a0:	2901      	cmp	r1, #1
    50a2:	d009      	beq.n	50b8 <flash_area_id_from_multi_image_slot+0x18>
    50a4:	2902      	cmp	r1, #2
    50a6:	d005      	beq.n	50b4 <flash_area_id_from_multi_image_slot+0x14>
    50a8:	b111      	cbz	r1, 50b0 <flash_area_id_from_multi_image_slot+0x10>
    return -EINVAL; /* flash_area_open will fail on that */
    50aa:	f06f 0015 	mvn.w	r0, #21
    50ae:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    50b0:	2002      	movs	r0, #2
    50b2:	4770      	bx	lr
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
    50b4:	2007      	movs	r0, #7
    50b6:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    50b8:	2006      	movs	r0, #6
}
    50ba:	4770      	bx	lr

000050bc <flash_area_erased_val>:
#define ERASED_VAL 0xff
uint8_t flash_area_erased_val(const struct flash_area *fap)
{
    (void)fap;
    return ERASED_VAL;
}
    50bc:	20ff      	movs	r0, #255	; 0xff
    50be:	4770      	bx	lr

000050c0 <flash_area_read_is_empty>:

int flash_area_read_is_empty(const struct flash_area *fa, uint32_t off,
        void *dst, uint32_t len)
{
    50c0:	b538      	push	{r3, r4, r5, lr}
    50c2:	4615      	mov	r5, r2
    50c4:	461c      	mov	r4, r3
    uint8_t i;
    uint8_t *u8dst;
    int rc;

    rc = flash_area_read(fa, off, dst, len);
    50c6:	f001 f82d 	bl	6124 <flash_area_read>
    if (rc) {
    50ca:	b960      	cbnz	r0, 50e6 <flash_area_read_is_empty+0x26>
    50cc:	4601      	mov	r1, r0
        return -1;
    }

    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    50ce:	2300      	movs	r3, #0
    50d0:	42a3      	cmp	r3, r4
    50d2:	d205      	bcs.n	50e0 <flash_area_read_is_empty+0x20>
        if (u8dst[i] != ERASED_VAL) {
    50d4:	5cea      	ldrb	r2, [r5, r3]
    50d6:	2aff      	cmp	r2, #255	; 0xff
    50d8:	d103      	bne.n	50e2 <flash_area_read_is_empty+0x22>
    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    50da:	3301      	adds	r3, #1
    50dc:	b2db      	uxtb	r3, r3
    50de:	e7f7      	b.n	50d0 <flash_area_read_is_empty+0x10>
            return 0;
        }
    }

    return 1;
    50e0:	2101      	movs	r1, #1
}
    50e2:	4608      	mov	r0, r1
    50e4:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    50e6:	f04f 31ff 	mov.w	r1, #4294967295
    50ea:	e7fa      	b.n	50e2 <flash_area_read_is_empty+0x22>

000050ec <boot_status_internal_off>:
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    50ec:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    return (idx - BOOT_STATUS_IDX_0) * idx_sz +
    50f0:	3801      	subs	r0, #1
           (state - BOOT_STATUS_STATE_0) * elem_sz;
    50f2:	3901      	subs	r1, #1
    50f4:	fb02 f201 	mul.w	r2, r2, r1
}
    50f8:	fb03 2000 	mla	r0, r3, r0, r2
    50fc:	4770      	bx	lr

000050fe <boot_copy_sz>:
{
    50fe:	b430      	push	{r4, r5}
    5100:	4604      	mov	r4, r0
    return BOOT_SCRATCH_AREA(state)->fa_size;
    5102:	6d83      	ldr	r3, [r0, #88]	; 0x58
    5104:	689d      	ldr	r5, [r3, #8]
    sz = 0;
    5106:	2000      	movs	r0, #0
    for (i = last_sector_idx; i >= 0; i--) {
    5108:	2900      	cmp	r1, #0
    510a:	db09      	blt.n	5120 <boot_copy_sz+0x22>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    510c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    510e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5112:	685b      	ldr	r3, [r3, #4]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    5114:	4403      	add	r3, r0
        if (new_sz > scratch_sz) {
    5116:	429d      	cmp	r5, r3
    5118:	d302      	bcc.n	5120 <boot_copy_sz+0x22>
    for (i = last_sector_idx; i >= 0; i--) {
    511a:	3901      	subs	r1, #1
        sz = new_sz;
    511c:	4618      	mov	r0, r3
    511e:	e7f3      	b.n	5108 <boot_copy_sz+0xa>
    *out_first_sector_idx = i + 1;
    5120:	3101      	adds	r1, #1
    5122:	6011      	str	r1, [r2, #0]
}
    5124:	bc30      	pop	{r4, r5}
    5126:	4770      	bx	lr

00005128 <boot_write_sz>:
{
    5128:	b538      	push	{r3, r4, r5, lr}
    512a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    512c:	6a00      	ldr	r0, [r0, #32]
    512e:	f001 f876 	bl	621e <flash_area_align>
    5132:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    5134:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5136:	f001 f872 	bl	621e <flash_area_align>
    if (align > elem_sz) {
    513a:	4285      	cmp	r5, r0
    513c:	d200      	bcs.n	5140 <boot_write_sz+0x18>
}
    513e:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5140:	4628      	mov	r0, r5
    5142:	e7fc      	b.n	513e <boot_write_sz+0x16>

00005144 <boot_check_header_erased>:
{
    5144:	b5f0      	push	{r4, r5, r6, r7, lr}
    5146:	b083      	sub	sp, #12
    5148:	4607      	mov	r7, r0
    514a:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    514c:	2000      	movs	r0, #0
    514e:	f7ff ffa7 	bl	50a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5152:	a901      	add	r1, sp, #4
    5154:	b2c0      	uxtb	r0, r0
    5156:	f7fc fdad 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    515a:	b9e8      	cbnz	r0, 5198 <boot_check_header_erased+0x54>
    515c:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    515e:	9801      	ldr	r0, [sp, #4]
    5160:	f7ff ffac 	bl	50bc <flash_area_erased_val>
    5164:	4605      	mov	r5, r0
    flash_area_close(fap);
    5166:	9801      	ldr	r0, [sp, #4]
    5168:	f000 ffdb 	bl	6122 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    516c:	202c      	movs	r0, #44	; 0x2c
    516e:	fb00 7004 	mla	r0, r0, r4, r7
    for (i = 0; i < len; i++) {
    5172:	2300      	movs	r3, #0
    5174:	2b03      	cmp	r3, #3
    5176:	d805      	bhi.n	5184 <boot_check_header_erased+0x40>
        if (val != p[i]) {
    5178:	5cc2      	ldrb	r2, [r0, r3]
    517a:	4295      	cmp	r5, r2
    517c:	d107      	bne.n	518e <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    517e:	3301      	adds	r3, #1
    5180:	b2db      	uxtb	r3, r3
    5182:	e7f7      	b.n	5174 <boot_check_header_erased+0x30>
    return true;
    5184:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    5186:	b123      	cbz	r3, 5192 <boot_check_header_erased+0x4e>
}
    5188:	4630      	mov	r0, r6
    518a:	b003      	add	sp, #12
    518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    518e:	2300      	movs	r3, #0
    5190:	e7f9      	b.n	5186 <boot_check_header_erased+0x42>
        return -1;
    5192:	f04f 36ff 	mov.w	r6, #4294967295
    5196:	e7f7      	b.n	5188 <boot_check_header_erased+0x44>
        return -1;
    5198:	f04f 36ff 	mov.w	r6, #4294967295
    519c:	e7f4      	b.n	5188 <boot_check_header_erased+0x44>

0000519e <boot_initialize_area>:
{
    519e:	b510      	push	{r4, lr}
    51a0:	b082      	sub	sp, #8
    num_sectors = BOOT_MAX_IMG_SECTORS;
    51a2:	f44f 7380 	mov.w	r3, #256	; 0x100
    51a6:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    51a8:	2902      	cmp	r1, #2
    51aa:	d005      	beq.n	51b8 <boot_initialize_area+0x1a>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    51ac:	2906      	cmp	r1, #6
    51ae:	d011      	beq.n	51d4 <boot_initialize_area+0x36>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    51b0:	2907      	cmp	r1, #7
    51b2:	d013      	beq.n	51dc <boot_initialize_area+0x3e>
        return BOOT_EFLASH;
    51b4:	2301      	movs	r3, #1
    51b6:	e00a      	b.n	51ce <boot_initialize_area+0x30>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    51b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    51ba:	f100 0428 	add.w	r4, r0, #40	; 0x28
    51be:	4608      	mov	r0, r1
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    51c0:	a901      	add	r1, sp, #4
    51c2:	f7fc fd8b 	bl	1cdc <flash_area_get_sectors>
    if (rc != 0) {
    51c6:	4603      	mov	r3, r0
    51c8:	b908      	cbnz	r0, 51ce <boot_initialize_area+0x30>
    *out_num_sectors = num_sectors;
    51ca:	9a01      	ldr	r2, [sp, #4]
    51cc:	6022      	str	r2, [r4, #0]
}
    51ce:	4618      	mov	r0, r3
    51d0:	b002      	add	sp, #8
    51d2:	bd10      	pop	{r4, pc}
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    51d4:	6d02      	ldr	r2, [r0, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    51d6:	f100 0454 	add.w	r4, r0, #84	; 0x54
    51da:	e7f0      	b.n	51be <boot_initialize_area+0x20>
        out_sectors = state->scratch.sectors;
    51dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
        out_num_sectors = &state->scratch.num_sectors;
    51de:	f100 0460 	add.w	r4, r0, #96	; 0x60
    51e2:	e7ec      	b.n	51be <boot_initialize_area+0x20>

000051e4 <boot_read_sectors>:
{
    51e4:	b538      	push	{r3, r4, r5, lr}
    51e6:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    51e8:	2102      	movs	r1, #2
    51ea:	f7ff ffd8 	bl	519e <boot_initialize_area>
    if (rc != 0) {
    51ee:	b110      	cbz	r0, 51f6 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    51f0:	2401      	movs	r4, #1
}
    51f2:	4620      	mov	r0, r4
    51f4:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    51f6:	2106      	movs	r1, #6
    51f8:	4628      	mov	r0, r5
    51fa:	f7ff ffd0 	bl	519e <boot_initialize_area>
    if (rc != 0) {
    51fe:	b108      	cbz	r0, 5204 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    5200:	2401      	movs	r4, #1
    5202:	e7f6      	b.n	51f2 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    5204:	2107      	movs	r1, #7
    5206:	4628      	mov	r0, r5
    5208:	f7ff ffc9 	bl	519e <boot_initialize_area>
    if (rc != 0) {
    520c:	4604      	mov	r4, r0
    520e:	b108      	cbz	r0, 5214 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    5210:	2401      	movs	r4, #1
    5212:	e7ee      	b.n	51f2 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5214:	4628      	mov	r0, r5
    5216:	f7ff ff87 	bl	5128 <boot_write_sz>
    521a:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65
    return 0;
    521e:	e7e8      	b.n	51f2 <boot_read_sectors+0xe>

00005220 <boot_read_status>:
{
    5220:	b570      	push	{r4, r5, r6, lr}
    5222:	b082      	sub	sp, #8
    5224:	4606      	mov	r6, r0
    5226:	460d      	mov	r5, r1
    memset(bs, 0, sizeof *bs);
    5228:	220c      	movs	r2, #12
    522a:	2100      	movs	r1, #0
    522c:	4628      	mov	r0, r5
    522e:	f001 fa2f 	bl	6690 <memset>
    bs->idx = BOOT_STATUS_IDX_0;
    5232:	2301      	movs	r3, #1
    5234:	602b      	str	r3, [r5, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5236:	712b      	strb	r3, [r5, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    5238:	71ab      	strb	r3, [r5, #6]
    status_loc = boot_status_source(state);
    523a:	4630      	mov	r0, r6
    523c:	f7fb fb38 	bl	8b0 <boot_status_source>
    switch (status_loc) {
    5240:	2801      	cmp	r0, #1
    5242:	d005      	beq.n	5250 <boot_read_status+0x30>
    5244:	4604      	mov	r4, r0
    5246:	2802      	cmp	r0, #2
    5248:	d003      	beq.n	5252 <boot_read_status+0x32>
    524a:	b140      	cbz	r0, 525e <boot_read_status+0x3e>
        return BOOT_EBADARGS;
    524c:	2407      	movs	r4, #7
    524e:	e006      	b.n	525e <boot_read_status+0x3e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    5250:	2407      	movs	r4, #7
    rc = flash_area_open(area_id, &fap);
    5252:	a901      	add	r1, sp, #4
    5254:	b2e0      	uxtb	r0, r4
    5256:	f7fc fd2d 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    525a:	b118      	cbz	r0, 5264 <boot_read_status+0x44>
        return BOOT_EFLASH;
    525c:	2401      	movs	r4, #1
}
    525e:	4620      	mov	r0, r4
    5260:	b002      	add	sp, #8
    5262:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_status_bytes(fap, state, bs);
    5264:	462a      	mov	r2, r5
    5266:	4631      	mov	r1, r6
    5268:	9801      	ldr	r0, [sp, #4]
    526a:	f7fb fbed 	bl	a48 <boot_read_status_bytes>
    if (rc == 0) {
    526e:	4604      	mov	r4, r0
    5270:	b118      	cbz	r0, 527a <boot_read_status+0x5a>
    flash_area_close(fap);
    5272:	9801      	ldr	r0, [sp, #4]
    5274:	f000 ff55 	bl	6122 <flash_area_close>
    return rc;
    5278:	e7f1      	b.n	525e <boot_read_status+0x3e>
        off = boot_swap_info_off(fap);
    527a:	9801      	ldr	r0, [sp, #4]
    527c:	f000 f9f7 	bl	566e <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    5280:	2301      	movs	r3, #1
    5282:	f10d 0203 	add.w	r2, sp, #3
    5286:	4601      	mov	r1, r0
    5288:	9801      	ldr	r0, [sp, #4]
    528a:	f7ff ff19 	bl	50c0 <flash_area_read_is_empty>
        if (rc == 1) {
    528e:	2801      	cmp	r0, #1
    5290:	d006      	beq.n	52a0 <boot_read_status+0x80>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5292:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5296:	f003 030f 	and.w	r3, r3, #15
    529a:	71ab      	strb	r3, [r5, #6]
    529c:	4604      	mov	r4, r0
    529e:	e7e8      	b.n	5272 <boot_read_status+0x52>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    52a0:	2301      	movs	r3, #1
    52a2:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    52a6:	4620      	mov	r0, r4
    52a8:	e7f3      	b.n	5292 <boot_read_status+0x72>

000052aa <boot_read_image_size>:
{
    52aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52ae:	b082      	sub	sp, #8
    52b0:	4680      	mov	r8, r0
    52b2:	460d      	mov	r5, r1
    52b4:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    52b6:	2000      	movs	r0, #0
    52b8:	f7ff fef2 	bl	50a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    52bc:	a901      	add	r1, sp, #4
    52be:	b2c0      	uxtb	r0, r0
    52c0:	f7fc fcf8 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    52c4:	b138      	cbz	r0, 52d6 <boot_read_image_size+0x2c>
        rc = BOOT_EFLASH;
    52c6:	2401      	movs	r4, #1
    flash_area_close(fap);
    52c8:	9801      	ldr	r0, [sp, #4]
    52ca:	f000 ff2a 	bl	6122 <flash_area_close>
}
    52ce:	4620      	mov	r0, r4
    52d0:	b002      	add	sp, #8
    52d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    52d6:	232c      	movs	r3, #44	; 0x2c
    52d8:	fb03 8305 	mla	r3, r3, r5, r8
    52dc:	891e      	ldrh	r6, [r3, #8]
    52de:	68db      	ldr	r3, [r3, #12]
    52e0:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    52e2:	2304      	movs	r3, #4
    52e4:	466a      	mov	r2, sp
    52e6:	4631      	mov	r1, r6
    52e8:	9801      	ldr	r0, [sp, #4]
    52ea:	f000 ff1b 	bl	6124 <flash_area_read>
    52ee:	4604      	mov	r4, r0
    52f0:	bb30      	cbnz	r0, 5340 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    52f2:	232c      	movs	r3, #44	; 0x2c
    52f4:	fb03 8505 	mla	r5, r3, r5, r8
    52f8:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    52fa:	f8bd 2000 	ldrh.w	r2, [sp]
    52fe:	f646 1308 	movw	r3, #26888	; 0x6908
    5302:	429a      	cmp	r2, r3
    5304:	d00c      	beq.n	5320 <boot_read_image_size+0x76>
    } else if (protect_tlv_size != 0) {
    5306:	b9ed      	cbnz	r5, 5344 <boot_read_image_size+0x9a>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5308:	f8bd 2000 	ldrh.w	r2, [sp]
    530c:	f646 1307 	movw	r3, #26887	; 0x6907
    5310:	429a      	cmp	r2, r3
    5312:	d119      	bne.n	5348 <boot_read_image_size+0x9e>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5314:	442e      	add	r6, r5
    5316:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    531a:	441e      	add	r6, r3
    531c:	603e      	str	r6, [r7, #0]
    531e:	e7d3      	b.n	52c8 <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    5320:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    5324:	428d      	cmp	r5, r1
    5326:	d001      	beq.n	532c <boot_read_image_size+0x82>
            rc = BOOT_EBADIMAGE;
    5328:	2403      	movs	r4, #3
    532a:	e7cd      	b.n	52c8 <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    532c:	2304      	movs	r3, #4
    532e:	466a      	mov	r2, sp
    5330:	4431      	add	r1, r6
    5332:	9801      	ldr	r0, [sp, #4]
    5334:	f000 fef6 	bl	6124 <flash_area_read>
    5338:	2800      	cmp	r0, #0
    533a:	d0e5      	beq.n	5308 <boot_read_image_size+0x5e>
            rc = BOOT_EFLASH;
    533c:	2401      	movs	r4, #1
    533e:	e7c3      	b.n	52c8 <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    5340:	2401      	movs	r4, #1
    5342:	e7c1      	b.n	52c8 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    5344:	2403      	movs	r4, #3
    5346:	e7bf      	b.n	52c8 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    5348:	2403      	movs	r4, #3
    534a:	e7bd      	b.n	52c8 <boot_read_image_size+0x1e>

0000534c <boot_read_image_header>:
{
    534c:	b510      	push	{r4, lr}
    534e:	b082      	sub	sp, #8
    5350:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5352:	2000      	movs	r0, #0
    5354:	f7ff fea4 	bl	50a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5358:	a901      	add	r1, sp, #4
    535a:	b2c0      	uxtb	r0, r0
    535c:	f7fc fcaa 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    5360:	b130      	cbz	r0, 5370 <boot_read_image_header+0x24>
        rc = BOOT_EFLASH;
    5362:	2401      	movs	r4, #1
    flash_area_close(fap);
    5364:	9801      	ldr	r0, [sp, #4]
    5366:	f000 fedc 	bl	6122 <flash_area_close>
}
    536a:	4620      	mov	r0, r4
    536c:	b002      	add	sp, #8
    536e:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    5370:	2320      	movs	r3, #32
    5372:	4622      	mov	r2, r4
    5374:	2100      	movs	r1, #0
    5376:	9801      	ldr	r0, [sp, #4]
    5378:	f000 fed4 	bl	6124 <flash_area_read>
    if (rc != 0) {
    537c:	4604      	mov	r4, r0
    537e:	2800      	cmp	r0, #0
    5380:	d0f0      	beq.n	5364 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    5382:	2401      	movs	r4, #1
    5384:	e7ee      	b.n	5364 <boot_read_image_header+0x18>

00005386 <boot_read_image_headers>:
{
    5386:	b570      	push	{r4, r5, r6, lr}
    5388:	4605      	mov	r5, r0
    538a:	460e      	mov	r6, r1
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    538c:	2400      	movs	r4, #0
    538e:	2c01      	cmp	r4, #1
    5390:	dc0f      	bgt.n	53b2 <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i));
    5392:	222c      	movs	r2, #44	; 0x2c
    5394:	fb02 5204 	mla	r2, r2, r4, r5
    5398:	4621      	mov	r1, r4
    539a:	4628      	mov	r0, r5
    539c:	f7ff ffd6 	bl	534c <boot_read_image_header>
        if (rc != 0) {
    53a0:	4603      	mov	r3, r0
    53a2:	b908      	cbnz	r0, 53a8 <boot_read_image_headers+0x22>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    53a4:	3401      	adds	r4, #1
    53a6:	e7f2      	b.n	538e <boot_read_image_headers+0x8>
            if (i > 0 && !require_all) {
    53a8:	2c00      	cmp	r4, #0
    53aa:	dd03      	ble.n	53b4 <boot_read_image_headers+0x2e>
    53ac:	b916      	cbnz	r6, 53b4 <boot_read_image_headers+0x2e>
                return 0;
    53ae:	2300      	movs	r3, #0
    53b0:	e000      	b.n	53b4 <boot_read_image_headers+0x2e>
    return 0;
    53b2:	2300      	movs	r3, #0
}
    53b4:	4618      	mov	r0, r3
    53b6:	bd70      	pop	{r4, r5, r6, pc}

000053b8 <boot_erase_trailer_sectors>:
{
    53b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53bc:	4606      	mov	r6, r0
    53be:	460f      	mov	r7, r1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    53c0:	2100      	movs	r1, #0
    53c2:	4608      	mov	r0, r1
    53c4:	f7ff fe6c 	bl	50a0 <flash_area_id_from_multi_image_slot>
    53c8:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    53ca:	2101      	movs	r1, #1
    53cc:	2000      	movs	r0, #0
    53ce:	f7ff fe67 	bl	50a0 <flash_area_id_from_multi_image_slot>
    if (fap->fa_id == fa_id_primary) {
    53d2:	783b      	ldrb	r3, [r7, #0]
    53d4:	429c      	cmp	r4, r3
    53d6:	d026      	beq.n	5426 <boot_erase_trailer_sectors+0x6e>
    } else if (fap->fa_id == fa_id_secondary) {
    53d8:	4298      	cmp	r0, r3
    53da:	d001      	beq.n	53e0 <boot_erase_trailer_sectors+0x28>
        return BOOT_EFLASH;
    53dc:	2001      	movs	r0, #1
    53de:	e020      	b.n	5422 <boot_erase_trailer_sectors+0x6a>
        slot = BOOT_SECONDARY_SLOT;
    53e0:	2301      	movs	r3, #1
    sector = boot_img_num_sectors(state, slot) - 1;
    53e2:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    53e4:	222c      	movs	r2, #44	; 0x2c
    53e6:	fb02 6303 	mla	r3, r2, r3, r6
    53ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    53ec:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    53ee:	f896 0065 	ldrb.w	r0, [r6, #101]	; 0x65
    53f2:	f000 f91b 	bl	562c <boot_trailer_sz>
    53f6:	4680      	mov	r8, r0
    total_sz = 0;
    53f8:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    53fa:	232c      	movs	r3, #44	; 0x2c
    53fc:	fb03 6309 	mla	r3, r3, r9, r6
    5400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5402:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    5406:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    540a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    540e:	681b      	ldr	r3, [r3, #0]
    return flash_area_erase(fap, off, sz);
    5410:	4652      	mov	r2, sl
    5412:	1ac9      	subs	r1, r1, r3
    5414:	4638      	mov	r0, r7
    5416:	f000 fed4 	bl	61c2 <flash_area_erase>
        sector--;
    541a:	3c01      	subs	r4, #1
        total_sz += sz;
    541c:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    541e:	45a8      	cmp	r8, r5
    5420:	d8eb      	bhi.n	53fa <boot_erase_trailer_sectors+0x42>
}
    5422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    5426:	2300      	movs	r3, #0
    5428:	e7db      	b.n	53e2 <boot_erase_trailer_sectors+0x2a>

0000542a <boot_set_copy_done>:
{
    542a:	b510      	push	{r4, lr}
    542c:	b082      	sub	sp, #8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    542e:	a901      	add	r1, sp, #4
    5430:	2002      	movs	r0, #2
    5432:	f7fc fc3f 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    5436:	b118      	cbz	r0, 5440 <boot_set_copy_done+0x16>
        return BOOT_EFLASH;
    5438:	2401      	movs	r4, #1
}
    543a:	4620      	mov	r0, r4
    543c:	b002      	add	sp, #8
    543e:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    5440:	9801      	ldr	r0, [sp, #4]
    5442:	f000 f9a7 	bl	5794 <boot_write_copy_done>
    5446:	4604      	mov	r4, r0
    flash_area_close(fap);
    5448:	9801      	ldr	r0, [sp, #4]
    544a:	f000 fe6a 	bl	6122 <flash_area_close>
    return rc;
    544e:	e7f4      	b.n	543a <boot_set_copy_done+0x10>

00005450 <boot_set_image_ok>:
{
    5450:	b510      	push	{r4, lr}
    5452:	b084      	sub	sp, #16
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5454:	a903      	add	r1, sp, #12
    5456:	2002      	movs	r0, #2
    5458:	f7fc fc2c 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    545c:	b118      	cbz	r0, 5466 <boot_set_image_ok+0x16>
        return BOOT_EFLASH;
    545e:	2401      	movs	r4, #1
}
    5460:	4620      	mov	r0, r4
    5462:	b004      	add	sp, #16
    5464:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    5466:	a901      	add	r1, sp, #4
    5468:	9803      	ldr	r0, [sp, #12]
    546a:	f000 f903 	bl	5674 <boot_read_swap_state>
    if (rc != 0) {
    546e:	4604      	mov	r4, r0
    5470:	b940      	cbnz	r0, 5484 <boot_set_image_ok+0x34>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    5472:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5476:	2b03      	cmp	r3, #3
    5478:	d105      	bne.n	5486 <boot_set_image_ok+0x36>
        rc = boot_write_image_ok(fap);
    547a:	9803      	ldr	r0, [sp, #12]
    547c:	f000 f991 	bl	57a2 <boot_write_image_ok>
    5480:	4604      	mov	r4, r0
    5482:	e000      	b.n	5486 <boot_set_image_ok+0x36>
        rc = BOOT_EFLASH;
    5484:	2401      	movs	r4, #1
    flash_area_close(fap);
    5486:	9803      	ldr	r0, [sp, #12]
    5488:	f000 fe4b 	bl	6122 <flash_area_close>
    return rc;
    548c:	e7e8      	b.n	5460 <boot_set_image_ok+0x10>

0000548e <boot_validated_swap_type>:
{
    548e:	b570      	push	{r4, r5, r6, lr}
    5490:	4605      	mov	r5, r0
    5492:	460e      	mov	r6, r1
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    5494:	2000      	movs	r0, #0
    5496:	f7fb ff67 	bl	1368 <boot_swap_type_multi>
    549a:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    549c:	2802      	cmp	r0, #2
    549e:	d005      	beq.n	54ac <boot_validated_swap_type+0x1e>
    54a0:	2804      	cmp	r0, #4
    54a2:	d003      	beq.n	54ac <boot_validated_swap_type+0x1e>
    54a4:	2803      	cmp	r0, #3
    54a6:	d001      	beq.n	54ac <boot_validated_swap_type+0x1e>
}
    54a8:	4620      	mov	r0, r4
    54aa:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    54ac:	4632      	mov	r2, r6
    54ae:	2101      	movs	r1, #1
    54b0:	4628      	mov	r0, r5
    54b2:	f7fb fb79 	bl	ba8 <boot_validate_slot>
        if (rc == 1) {
    54b6:	2801      	cmp	r0, #1
    54b8:	d003      	beq.n	54c2 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    54ba:	2800      	cmp	r0, #0
    54bc:	d0f4      	beq.n	54a8 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    54be:	2405      	movs	r4, #5
    return swap_type;
    54c0:	e7f2      	b.n	54a8 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    54c2:	4604      	mov	r4, r0
    54c4:	e7f0      	b.n	54a8 <boot_validated_swap_type+0x1a>

000054c6 <boot_write_status>:
{
    54c6:	b570      	push	{r4, r5, r6, lr}
    54c8:	b084      	sub	sp, #16
    54ca:	4606      	mov	r6, r0
    54cc:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    54ce:	794b      	ldrb	r3, [r1, #5]
    54d0:	b15b      	cbz	r3, 54ea <boot_write_status+0x24>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    54d2:	2007      	movs	r0, #7
    rc = flash_area_open(area_id, &fap);
    54d4:	a903      	add	r1, sp, #12
    54d6:	f7fc fbed 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    54da:	b140      	cbz	r0, 54ee <boot_write_status+0x28>
        rc = BOOT_EFLASH;
    54dc:	2401      	movs	r4, #1
    flash_area_close(fap);
    54de:	9803      	ldr	r0, [sp, #12]
    54e0:	f000 fe1f 	bl	6122 <flash_area_close>
}
    54e4:	4620      	mov	r0, r4
    54e6:	b004      	add	sp, #16
    54e8:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    54ea:	2002      	movs	r0, #2
    54ec:	e7f2      	b.n	54d4 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    54ee:	9803      	ldr	r0, [sp, #12]
    54f0:	f000 f8b4 	bl	565c <boot_status_off>
    54f4:	4605      	mov	r5, r0
          boot_status_internal_off(bs->idx, bs->state, BOOT_WRITE_SZ(state));
    54f6:	f896 2065 	ldrb.w	r2, [r6, #101]	; 0x65
    54fa:	7921      	ldrb	r1, [r4, #4]
    54fc:	6820      	ldr	r0, [r4, #0]
    54fe:	f7ff fdf5 	bl	50ec <boot_status_internal_off>
    off = boot_status_off(fap) +
    5502:	4405      	add	r5, r0
    align = flash_area_align(fap);
    5504:	9803      	ldr	r0, [sp, #12]
    5506:	f000 fe8a 	bl	621e <flash_area_align>
    550a:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    550c:	9803      	ldr	r0, [sp, #12]
    550e:	f7ff fdd5 	bl	50bc <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5512:	2208      	movs	r2, #8
    5514:	4601      	mov	r1, r0
    5516:	a801      	add	r0, sp, #4
    5518:	f001 f8ba 	bl	6690 <memset>
    buf[0] = bs->state;
    551c:	7923      	ldrb	r3, [r4, #4]
    551e:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    5522:	4633      	mov	r3, r6
    5524:	aa01      	add	r2, sp, #4
    5526:	4629      	mov	r1, r5
    5528:	9803      	ldr	r0, [sp, #12]
    552a:	f000 fe1a 	bl	6162 <flash_area_write>
    if (rc != 0) {
    552e:	4604      	mov	r4, r0
    5530:	2800      	cmp	r0, #0
    5532:	d0d4      	beq.n	54de <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    5534:	2401      	movs	r4, #1
    5536:	e7d2      	b.n	54de <boot_write_status+0x18>

00005538 <boot_perform_update>:
{
    5538:	b538      	push	{r3, r4, r5, lr}
    553a:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    553c:	f7fb fcca 	bl	ed4 <boot_swap_image>
    5540:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    5542:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    5546:	1ee3      	subs	r3, r4, #3
    5548:	b2db      	uxtb	r3, r3
    554a:	2b01      	cmp	r3, #1
    554c:	d90f      	bls.n	556e <boot_perform_update+0x36>
    if (BOOT_IS_UPGRADE(swap_type)) {
    554e:	2c02      	cmp	r4, #2
    5550:	d003      	beq.n	555a <boot_perform_update+0x22>
    5552:	2c04      	cmp	r4, #4
    5554:	d001      	beq.n	555a <boot_perform_update+0x22>
    5556:	2c03      	cmp	r4, #3
    5558:	d107      	bne.n	556a <boot_perform_update+0x32>
        rc = boot_set_copy_done(BOOT_CURR_IMG(state));
    555a:	2000      	movs	r0, #0
    555c:	f7ff ff65 	bl	542a <boot_set_copy_done>
        if (rc != 0) {
    5560:	4602      	mov	r2, r0
    5562:	b110      	cbz	r0, 556a <boot_perform_update+0x32>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    5564:	23ff      	movs	r3, #255	; 0xff
    5566:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    556a:	4610      	mov	r0, r2
    556c:	bd38      	pop	{r3, r4, r5, pc}
        rc = boot_set_image_ok(BOOT_CURR_IMG(state));
    556e:	2000      	movs	r0, #0
    5570:	f7ff ff6e 	bl	5450 <boot_set_image_ok>
        if (rc != 0) {
    5574:	4602      	mov	r2, r0
    5576:	2800      	cmp	r0, #0
    5578:	d0e9      	beq.n	554e <boot_perform_update+0x16>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    557a:	24ff      	movs	r4, #255	; 0xff
    557c:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    5580:	e7e7      	b.n	5552 <boot_perform_update+0x1a>

00005582 <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    5582:	2801      	cmp	r0, #1
    5584:	d101      	bne.n	558a <boot_flag_decode+0x8>
    return BOOT_FLAG_SET;
    5586:	2001      	movs	r0, #1
}
    5588:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    558a:	2002      	movs	r0, #2
    558c:	4770      	bx	lr

0000558e <boot_write_trailer>:
{
    558e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5592:	b083      	sub	sp, #12
    5594:	4606      	mov	r6, r0
    5596:	460f      	mov	r7, r1
    5598:	4690      	mov	r8, r2
    559a:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    559c:	f000 fe3f 	bl	621e <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    55a0:	2c08      	cmp	r4, #8
    55a2:	d822      	bhi.n	55ea <boot_write_trailer+0x5c>
    55a4:	4605      	mov	r5, r0
    55a6:	2808      	cmp	r0, #8
    55a8:	d822      	bhi.n	55f0 <boot_write_trailer+0x62>
    erased_val = flash_area_erased_val(fap);
    55aa:	4630      	mov	r0, r6
    55ac:	f7ff fd86 	bl	50bc <flash_area_erased_val>
    55b0:	4681      	mov	r9, r0
    if (align < inlen) {
    55b2:	42a5      	cmp	r5, r4
    55b4:	d200      	bcs.n	55b8 <boot_write_trailer+0x2a>
        align = inlen;
    55b6:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    55b8:	4622      	mov	r2, r4
    55ba:	4641      	mov	r1, r8
    55bc:	4668      	mov	r0, sp
    55be:	f001 f842 	bl	6646 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    55c2:	1b2a      	subs	r2, r5, r4
    55c4:	4649      	mov	r1, r9
    55c6:	eb0d 0004 	add.w	r0, sp, r4
    55ca:	f001 f861 	bl	6690 <memset>
    rc = flash_area_write(fap, off, buf, align);
    55ce:	462b      	mov	r3, r5
    55d0:	466a      	mov	r2, sp
    55d2:	4639      	mov	r1, r7
    55d4:	4630      	mov	r0, r6
    55d6:	f000 fdc4 	bl	6162 <flash_area_write>
    if (rc != 0) {
    55da:	4603      	mov	r3, r0
    55dc:	b918      	cbnz	r0, 55e6 <boot_write_trailer+0x58>
}
    55de:	4618      	mov	r0, r3
    55e0:	b003      	add	sp, #12
    55e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    55e6:	2301      	movs	r3, #1
    55e8:	e7f9      	b.n	55de <boot_write_trailer+0x50>
        return -1;
    55ea:	f04f 33ff 	mov.w	r3, #4294967295
    55ee:	e7f6      	b.n	55de <boot_write_trailer+0x50>
    55f0:	f04f 33ff 	mov.w	r3, #4294967295
    55f4:	e7f3      	b.n	55de <boot_write_trailer+0x50>

000055f6 <boot_write_trailer_flag>:
{
    55f6:	b510      	push	{r4, lr}
    55f8:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    55fa:	ac02      	add	r4, sp, #8
    55fc:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    5600:	2301      	movs	r3, #1
    5602:	4622      	mov	r2, r4
    5604:	f7ff ffc3 	bl	558e <boot_write_trailer>
}
    5608:	b002      	add	sp, #8
    560a:	bd10      	pop	{r4, pc}

0000560c <boot_magic_compatible_check>:
    switch (tbl_val) {
    560c:	2804      	cmp	r0, #4
    560e:	d00b      	beq.n	5628 <boot_magic_compatible_check+0x1c>
    5610:	2805      	cmp	r0, #5
    5612:	d104      	bne.n	561e <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    5614:	f111 30ff 	adds.w	r0, r1, #4294967295
    5618:	bf18      	it	ne
    561a:	2001      	movne	r0, #1
    561c:	4770      	bx	lr
        return tbl_val == val;
    561e:	4288      	cmp	r0, r1
    5620:	bf14      	ite	ne
    5622:	2000      	movne	r0, #0
    5624:	2001      	moveq	r0, #1
    5626:	4770      	bx	lr
        return 1;
    5628:	2001      	movs	r0, #1
}
    562a:	4770      	bx	lr

0000562c <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz +
    562c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5630:	0203      	lsls	r3, r0, #8
}
    5632:	f103 0030 	add.w	r0, r3, #48	; 0x30
    5636:	4770      	bx	lr

00005638 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    5638:	780b      	ldrb	r3, [r1, #0]
    563a:	2b07      	cmp	r3, #7
    563c:	d006      	beq.n	564c <boot_status_entries+0x14>
    } else if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    563e:	2b02      	cmp	r3, #2
    5640:	d006      	beq.n	5650 <boot_status_entries+0x18>
    5642:	2b06      	cmp	r3, #6
    5644:	d107      	bne.n	5656 <boot_status_entries+0x1e>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5646:	f44f 7040 	mov.w	r0, #768	; 0x300
    564a:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    564c:	2003      	movs	r0, #3
    564e:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5650:	f44f 7040 	mov.w	r0, #768	; 0x300
    5654:	4770      	bx	lr
    return -1;
    5656:	f04f 30ff 	mov.w	r0, #4294967295
}
    565a:	4770      	bx	lr

0000565c <boot_status_off>:
{
    565c:	b510      	push	{r4, lr}
    565e:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5660:	f000 fddd 	bl	621e <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    5664:	f7ff ffe2 	bl	562c <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    5668:	68a3      	ldr	r3, [r4, #8]
}
    566a:	1a18      	subs	r0, r3, r0
    566c:	bd10      	pop	{r4, pc}

0000566e <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    566e:	6880      	ldr	r0, [r0, #8]
}
    5670:	3828      	subs	r0, #40	; 0x28
    5672:	4770      	bx	lr

00005674 <boot_read_swap_state>:
{
    5674:	b530      	push	{r4, r5, lr}
    5676:	b087      	sub	sp, #28
    5678:	4604      	mov	r4, r0
    567a:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    567c:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    567e:	2310      	movs	r3, #16
    5680:	aa02      	add	r2, sp, #8
    5682:	3910      	subs	r1, #16
    5684:	f7ff fd1c 	bl	50c0 <flash_area_read_is_empty>
    if (rc < 0) {
    5688:	2800      	cmp	r0, #0
    568a:	db4a      	blt.n	5722 <boot_read_swap_state+0xae>
    if (rc == 1) {
    568c:	2801      	cmp	r0, #1
    568e:	d13c      	bne.n	570a <boot_read_swap_state+0x96>
        state->magic = BOOT_MAGIC_UNSET;
    5690:	2303      	movs	r3, #3
    5692:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    5694:	4620      	mov	r0, r4
    5696:	f7ff ffea 	bl	566e <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    569a:	2301      	movs	r3, #1
    569c:	f10d 0207 	add.w	r2, sp, #7
    56a0:	4601      	mov	r1, r0
    56a2:	4620      	mov	r0, r4
    56a4:	f7ff fd0c 	bl	50c0 <flash_area_read_is_empty>
    if (rc < 0) {
    56a8:	2800      	cmp	r0, #0
    56aa:	db3d      	blt.n	5728 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    56ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    56b0:	f003 020f 	and.w	r2, r3, #15
    56b4:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    56b6:	091b      	lsrs	r3, r3, #4
    56b8:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    56ba:	2801      	cmp	r0, #1
    56bc:	d001      	beq.n	56c2 <boot_read_swap_state+0x4e>
    56be:	2a04      	cmp	r2, #4
    56c0:	d903      	bls.n	56ca <boot_read_swap_state+0x56>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    56c2:	2301      	movs	r3, #1
    56c4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    56c6:	2300      	movs	r3, #0
    56c8:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    56ca:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    56cc:	2301      	movs	r3, #1
    56ce:	1caa      	adds	r2, r5, #2
    56d0:	3920      	subs	r1, #32
    56d2:	4620      	mov	r0, r4
    56d4:	f7ff fcf4 	bl	50c0 <flash_area_read_is_empty>
    if (rc < 0) {
    56d8:	2800      	cmp	r0, #0
    56da:	db27      	blt.n	572c <boot_read_swap_state+0xb8>
    if (rc == 1) {
    56dc:	2801      	cmp	r0, #1
    56de:	d019      	beq.n	5714 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    56e0:	78a8      	ldrb	r0, [r5, #2]
    56e2:	f7ff ff4e 	bl	5582 <boot_flag_decode>
    56e6:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    56e8:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    56ea:	2301      	movs	r3, #1
    56ec:	1cea      	adds	r2, r5, #3
    56ee:	3918      	subs	r1, #24
    56f0:	4620      	mov	r0, r4
    56f2:	f7ff fce5 	bl	50c0 <flash_area_read_is_empty>
    if (rc < 0) {
    56f6:	2800      	cmp	r0, #0
    56f8:	db1a      	blt.n	5730 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    56fa:	2801      	cmp	r0, #1
    56fc:	d00d      	beq.n	571a <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    56fe:	78e8      	ldrb	r0, [r5, #3]
    5700:	f7ff ff3f 	bl	5582 <boot_flag_decode>
    5704:	70e8      	strb	r0, [r5, #3]
    return 0;
    5706:	2000      	movs	r0, #0
    5708:	e00c      	b.n	5724 <boot_read_swap_state+0xb0>
        state->magic = boot_magic_decode(magic);
    570a:	a802      	add	r0, sp, #8
    570c:	f7fb fdd8 	bl	12c0 <boot_magic_decode>
    5710:	7028      	strb	r0, [r5, #0]
    5712:	e7bf      	b.n	5694 <boot_read_swap_state+0x20>
        state->copy_done = BOOT_FLAG_UNSET;
    5714:	2303      	movs	r3, #3
    5716:	70ab      	strb	r3, [r5, #2]
    5718:	e7e6      	b.n	56e8 <boot_read_swap_state+0x74>
        state->image_ok = BOOT_FLAG_UNSET;
    571a:	2303      	movs	r3, #3
    571c:	70eb      	strb	r3, [r5, #3]
    return 0;
    571e:	2000      	movs	r0, #0
    5720:	e000      	b.n	5724 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5722:	2001      	movs	r0, #1
}
    5724:	b007      	add	sp, #28
    5726:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    5728:	2001      	movs	r0, #1
    572a:	e7fb      	b.n	5724 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    572c:	2001      	movs	r0, #1
    572e:	e7f9      	b.n	5724 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5730:	2001      	movs	r0, #1
    5732:	e7f7      	b.n	5724 <boot_read_swap_state+0xb0>

00005734 <boot_read_swap_state_by_id>:
{
    5734:	b510      	push	{r4, lr}
    5736:	b082      	sub	sp, #8
    5738:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    573a:	a901      	add	r1, sp, #4
    573c:	b2c0      	uxtb	r0, r0
    573e:	f7fc fab9 	bl	1cb4 <flash_area_open>
    if (rc != 0) {
    5742:	b118      	cbz	r0, 574c <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    5744:	2401      	movs	r4, #1
}
    5746:	4620      	mov	r0, r4
    5748:	b002      	add	sp, #8
    574a:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    574c:	4621      	mov	r1, r4
    574e:	9801      	ldr	r0, [sp, #4]
    5750:	f7ff ff90 	bl	5674 <boot_read_swap_state>
    5754:	4604      	mov	r4, r0
    flash_area_close(fap);
    5756:	9801      	ldr	r0, [sp, #4]
    5758:	f000 fce3 	bl	6122 <flash_area_close>
    return rc;
    575c:	e7f3      	b.n	5746 <boot_read_swap_state_by_id+0x12>

0000575e <boot_read_swap_size>:
{
    575e:	b530      	push	{r4, r5, lr}
    5760:	b083      	sub	sp, #12
    5762:	460d      	mov	r5, r1
    rc = boot_find_status(image_index, &fap);
    5764:	a901      	add	r1, sp, #4
    5766:	f7fb fdb7 	bl	12d8 <boot_find_status>
    if (rc == 0) {
    576a:	4604      	mov	r4, r0
    576c:	b110      	cbz	r0, 5774 <boot_read_swap_size+0x16>
}
    576e:	4620      	mov	r0, r4
    5770:	b003      	add	sp, #12
    5772:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    5774:	9c01      	ldr	r4, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5776:	4620      	mov	r0, r4
    5778:	f7ff ff79 	bl	566e <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    577c:	2304      	movs	r3, #4
    577e:	462a      	mov	r2, r5
    5780:	f1a0 0108 	sub.w	r1, r0, #8
    5784:	4620      	mov	r0, r4
    5786:	f000 fccd 	bl	6124 <flash_area_read>
    578a:	4604      	mov	r4, r0
        flash_area_close(fap);
    578c:	9801      	ldr	r0, [sp, #4]
    578e:	f000 fcc8 	bl	6122 <flash_area_close>
    return rc;
    5792:	e7ec      	b.n	576e <boot_read_swap_size+0x10>

00005794 <boot_write_copy_done>:
{
    5794:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    5796:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5798:	2201      	movs	r2, #1
    579a:	3920      	subs	r1, #32
    579c:	f7ff ff2b 	bl	55f6 <boot_write_trailer_flag>
}
    57a0:	bd08      	pop	{r3, pc}

000057a2 <boot_write_image_ok>:
{
    57a2:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    57a4:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    57a6:	2201      	movs	r2, #1
    57a8:	3918      	subs	r1, #24
    57aa:	f7ff ff24 	bl	55f6 <boot_write_trailer_flag>
}
    57ae:	bd08      	pop	{r3, pc}

000057b0 <boot_write_swap_info>:
{
    57b0:	b530      	push	{r4, r5, lr}
    57b2:	b083      	sub	sp, #12
    57b4:	4605      	mov	r5, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    57b6:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    57ba:	ac02      	add	r4, sp, #8
    57bc:	f804 2d01 	strb.w	r2, [r4, #-1]!
    off = boot_swap_info_off(fap);
    57c0:	f7ff ff55 	bl	566e <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    57c4:	2301      	movs	r3, #1
    57c6:	4622      	mov	r2, r4
    57c8:	4601      	mov	r1, r0
    57ca:	4628      	mov	r0, r5
    57cc:	f7ff fedf 	bl	558e <boot_write_trailer>
}
    57d0:	b003      	add	sp, #12
    57d2:	bd30      	pop	{r4, r5, pc}

000057d4 <boot_write_swap_size>:
{
    57d4:	b530      	push	{r4, r5, lr}
    57d6:	b083      	sub	sp, #12
    57d8:	4605      	mov	r5, r0
    57da:	ac02      	add	r4, sp, #8
    57dc:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    57e0:	f7ff ff45 	bl	566e <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    57e4:	2304      	movs	r3, #4
    57e6:	4622      	mov	r2, r4
    57e8:	f1a0 0108 	sub.w	r1, r0, #8
    57ec:	4628      	mov	r0, r5
    57ee:	f7ff fece 	bl	558e <boot_write_trailer>
}
    57f2:	b003      	add	sp, #12
    57f4:	bd30      	pop	{r4, r5, pc}

000057f6 <bootutil_img_hash>:
{
    57f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57fa:	b09d      	sub	sp, #116	; 0x74
    57fc:	4615      	mov	r5, r2
    57fe:	4699      	mov	r9, r3
    5800:	9f24      	ldr	r7, [sp, #144]	; 0x90
    5802:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    5806:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    5808:	a801      	add	r0, sp, #4
    580a:	f002 fe34 	bl	8476 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    580e:	2100      	movs	r1, #0
    5810:	a801      	add	r0, sp, #4
    5812:	f7fe fc0b 	bl	402c <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    5816:	b114      	cbz	r4, 581e <bootutil_img_hash+0x28>
    5818:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    581a:	2b00      	cmp	r3, #0
    581c:	dc06      	bgt.n	582c <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    581e:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    5820:	68ee      	ldr	r6, [r5, #12]
    5822:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    5824:	896e      	ldrh	r6, [r5, #10]
    5826:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    5828:	2500      	movs	r5, #0
    582a:	e013      	b.n	5854 <bootutil_img_hash+0x5e>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    582c:	461a      	mov	r2, r3
    582e:	4621      	mov	r1, r4
    5830:	a801      	add	r0, sp, #4
    5832:	f002 fe26 	bl	8482 <mbedtls_sha256_update_ret>
    5836:	e7f2      	b.n	581e <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    5838:	4623      	mov	r3, r4
    583a:	463a      	mov	r2, r7
    583c:	4629      	mov	r1, r5
    583e:	4648      	mov	r0, r9
    5840:	f000 fc70 	bl	6124 <flash_area_read>
        if (rc) {
    5844:	4603      	mov	r3, r0
    5846:	b988      	cbnz	r0, 586c <bootutil_img_hash+0x76>
    5848:	4622      	mov	r2, r4
    584a:	4639      	mov	r1, r7
    584c:	a801      	add	r0, sp, #4
    584e:	f002 fe18 	bl	8482 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    5852:	4425      	add	r5, r4
    5854:	42b5      	cmp	r5, r6
    5856:	d204      	bcs.n	5862 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    5858:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    585a:	4544      	cmp	r4, r8
    585c:	d9ec      	bls.n	5838 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    585e:	4644      	mov	r4, r8
    5860:	e7ea      	b.n	5838 <bootutil_img_hash+0x42>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    5862:	9926      	ldr	r1, [sp, #152]	; 0x98
    5864:	a801      	add	r0, sp, #4
    5866:	f002 fe4f 	bl	8508 <mbedtls_sha256_finish_ret>
    return 0;
    586a:	2300      	movs	r3, #0
}
    586c:	4618      	mov	r0, r3
    586e:	b01d      	add	sp, #116	; 0x74
    5870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005874 <bootutil_parse_rsakey>:
{
    5874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5878:	b084      	sub	sp, #16
    587a:	4604      	mov	r4, r0
    587c:	460e      	mov	r6, r1
    587e:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    5880:	2330      	movs	r3, #48	; 0x30
    5882:	aa03      	add	r2, sp, #12
    5884:	4629      	mov	r1, r5
    5886:	4630      	mov	r0, r6
    5888:	f001 fa70 	bl	6d6c <mbedtls_asn1_get_tag>
    588c:	bb90      	cbnz	r0, 58f4 <bootutil_parse_rsakey+0x80>
    if (*p + len != end) {
    588e:	6833      	ldr	r3, [r6, #0]
    5890:	9a03      	ldr	r2, [sp, #12]
    5892:	4413      	add	r3, r2
    5894:	42ab      	cmp	r3, r5
    5896:	d130      	bne.n	58fa <bootutil_parse_rsakey+0x86>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    5898:	f104 0708 	add.w	r7, r4, #8
    589c:	463a      	mov	r2, r7
    589e:	4629      	mov	r1, r5
    58a0:	4630      	mov	r0, r6
    58a2:	f001 fa76 	bl	6d92 <mbedtls_asn1_get_mpi>
    58a6:	bb58      	cbnz	r0, 5900 <bootutil_parse_rsakey+0x8c>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    58a8:	f104 0814 	add.w	r8, r4, #20
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    58ac:	4642      	mov	r2, r8
    58ae:	4629      	mov	r1, r5
    58b0:	4630      	mov	r0, r6
    58b2:	f001 fa6e 	bl	6d92 <mbedtls_asn1_get_mpi>
    58b6:	bb30      	cbnz	r0, 5906 <bootutil_parse_rsakey+0x92>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    58b8:	4638      	mov	r0, r7
    58ba:	f001 fd89 	bl	73d0 <mbedtls_mpi_size>
    58be:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    58c0:	6833      	ldr	r3, [r6, #0]
    58c2:	42ab      	cmp	r3, r5
    58c4:	d122      	bne.n	590c <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    58c6:	f8cd 8004 	str.w	r8, [sp, #4]
    58ca:	2200      	movs	r2, #0
    58cc:	9200      	str	r2, [sp, #0]
    58ce:	4613      	mov	r3, r2
    58d0:	4639      	mov	r1, r7
    58d2:	4620      	mov	r0, r4
    58d4:	f002 fd4a 	bl	836c <mbedtls_rsa_import>
    if (rc != 0) {
    58d8:	b9d8      	cbnz	r0, 5912 <bootutil_parse_rsakey+0x9e>
    rc = mbedtls_rsa_check_pubkey(ctx);
    58da:	4620      	mov	r0, r4
    58dc:	f7fe fb36 	bl	3f4c <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    58e0:	4605      	mov	r5, r0
    58e2:	b9c8      	cbnz	r0, 5918 <bootutil_parse_rsakey+0xa4>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    58e4:	4638      	mov	r0, r7
    58e6:	f001 fd73 	bl	73d0 <mbedtls_mpi_size>
    58ea:	6060      	str	r0, [r4, #4]
}
    58ec:	4628      	mov	r0, r5
    58ee:	b004      	add	sp, #16
    58f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    58f4:	f04f 35ff 	mov.w	r5, #4294967295
    58f8:	e7f8      	b.n	58ec <bootutil_parse_rsakey+0x78>
        return -2;
    58fa:	f06f 0501 	mvn.w	r5, #1
    58fe:	e7f5      	b.n	58ec <bootutil_parse_rsakey+0x78>
        return -3;
    5900:	f06f 0502 	mvn.w	r5, #2
    5904:	e7f2      	b.n	58ec <bootutil_parse_rsakey+0x78>
    5906:	f06f 0502 	mvn.w	r5, #2
    590a:	e7ef      	b.n	58ec <bootutil_parse_rsakey+0x78>
        return -4;
    590c:	f06f 0503 	mvn.w	r5, #3
    5910:	e7ec      	b.n	58ec <bootutil_parse_rsakey+0x78>
        return -5;
    5912:	f06f 0504 	mvn.w	r5, #4
    5916:	e7e9      	b.n	58ec <bootutil_parse_rsakey+0x78>
        return -6;
    5918:	f06f 0505 	mvn.w	r5, #5
    591c:	e7e6      	b.n	58ec <bootutil_parse_rsakey+0x78>

0000591e <pss_mgf1>:
{
    591e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5920:	b0a5      	sub	sp, #148	; 0x94
    5922:	4606      	mov	r6, r0
    5924:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    5926:	2300      	movs	r3, #0
    5928:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    592a:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    592c:	e007      	b.n	593e <pss_mgf1+0x20>
            bytes = count;
    592e:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    5930:	462a      	mov	r2, r5
    5932:	4669      	mov	r1, sp
    5934:	4630      	mov	r0, r6
    5936:	f000 fe86 	bl	6646 <memcpy>
        mask += bytes;
    593a:	442e      	add	r6, r5
        count -= bytes;
    593c:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    593e:	2c00      	cmp	r4, #0
    5940:	dd1d      	ble.n	597e <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    5942:	a809      	add	r0, sp, #36	; 0x24
    5944:	f002 fd97 	bl	8476 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    5948:	2100      	movs	r1, #0
    594a:	a809      	add	r0, sp, #36	; 0x24
    594c:	f7fe fb6e 	bl	402c <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    5950:	2220      	movs	r2, #32
    5952:	4639      	mov	r1, r7
    5954:	a809      	add	r0, sp, #36	; 0x24
    5956:	f002 fd94 	bl	8482 <mbedtls_sha256_update_ret>
    595a:	2204      	movs	r2, #4
    595c:	a908      	add	r1, sp, #32
    595e:	a809      	add	r0, sp, #36	; 0x24
    5960:	f002 fd8f 	bl	8482 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    5964:	4669      	mov	r1, sp
    5966:	a809      	add	r0, sp, #36	; 0x24
    5968:	f002 fdce 	bl	8508 <mbedtls_sha256_finish_ret>
        counter[3]++;
    596c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5970:	3301      	adds	r3, #1
    5972:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    5976:	2c1f      	cmp	r4, #31
    5978:	ddd9      	ble.n	592e <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    597a:	2520      	movs	r5, #32
    597c:	e7d8      	b.n	5930 <pss_mgf1+0x12>
}
    597e:	b025      	add	sp, #148	; 0x94
    5980:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005982 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint8_t type, bool prot)
{
    5982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5986:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5988:	2800      	cmp	r0, #0
    598a:	d04a      	beq.n	5a22 <bootutil_tlv_iter_begin+0xa0>
    598c:	4605      	mov	r5, r0
    598e:	2900      	cmp	r1, #0
    5990:	d04a      	beq.n	5a28 <bootutil_tlv_iter_begin+0xa6>
    5992:	2a00      	cmp	r2, #0
    5994:	d04b      	beq.n	5a2e <bootutil_tlv_iter_begin+0xac>
    5996:	4699      	mov	r9, r3
    5998:	4617      	mov	r7, r2
    599a:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    599c:	890e      	ldrh	r6, [r1, #8]
    599e:	68cb      	ldr	r3, [r1, #12]
    59a0:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    59a2:	2304      	movs	r3, #4
    59a4:	eb0d 0203 	add.w	r2, sp, r3
    59a8:	4631      	mov	r1, r6
    59aa:	4638      	mov	r0, r7
    59ac:	f000 fbba 	bl	6124 <flash_area_read>
    59b0:	4680      	mov	r8, r0
    59b2:	2800      	cmp	r0, #0
    59b4:	d13e      	bne.n	5a34 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    59b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    59ba:	f646 1308 	movw	r3, #26888	; 0x6908
    59be:	429a      	cmp	r2, r3
    59c0:	d01e      	beq.n	5a00 <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    59c2:	8963      	ldrh	r3, [r4, #10]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d13b      	bne.n	5a40 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    59c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    59cc:	f646 1307 	movw	r3, #26887	; 0x6907
    59d0:	429a      	cmp	r2, r3
    59d2:	d138      	bne.n	5a46 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    59d4:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    59d6:	606f      	str	r7, [r5, #4]
    it->type = type;
    59d8:	f885 9008 	strb.w	r9, [r5, #8]
    it->prot = prot;
    59dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    59e0:	726b      	strb	r3, [r5, #9]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    59e2:	8963      	ldrh	r3, [r4, #10]
    59e4:	4433      	add	r3, r6
    59e6:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    59e8:	8963      	ldrh	r3, [r4, #10]
    59ea:	4433      	add	r3, r6
    59ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    59f0:	4413      	add	r3, r2
    59f2:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    59f4:	3604      	adds	r6, #4
    59f6:	612e      	str	r6, [r5, #16]
    return 0;
}
    59f8:	4640      	mov	r0, r8
    59fa:	b003      	add	sp, #12
    59fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5a00:	8963      	ldrh	r3, [r4, #10]
    5a02:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5a06:	428b      	cmp	r3, r1
    5a08:	d117      	bne.n	5a3a <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    5a0a:	2304      	movs	r3, #4
    5a0c:	eb0d 0203 	add.w	r2, sp, r3
    5a10:	4431      	add	r1, r6
    5a12:	4638      	mov	r0, r7
    5a14:	f000 fb86 	bl	6124 <flash_area_read>
    5a18:	2800      	cmp	r0, #0
    5a1a:	d0d5      	beq.n	59c8 <bootutil_tlv_iter_begin+0x46>
            return -1;
    5a1c:	f04f 38ff 	mov.w	r8, #4294967295
    5a20:	e7ea      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
        return -1;
    5a22:	f04f 38ff 	mov.w	r8, #4294967295
    5a26:	e7e7      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
    5a28:	f04f 38ff 	mov.w	r8, #4294967295
    5a2c:	e7e4      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
    5a2e:	f04f 38ff 	mov.w	r8, #4294967295
    5a32:	e7e1      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
        return -1;
    5a34:	f04f 38ff 	mov.w	r8, #4294967295
    5a38:	e7de      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
            return -1;
    5a3a:	f04f 38ff 	mov.w	r8, #4294967295
    5a3e:	e7db      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
        return -1;
    5a40:	f04f 38ff 	mov.w	r8, #4294967295
    5a44:	e7d8      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>
        return -1;
    5a46:	f04f 38ff 	mov.w	r8, #4294967295
    5a4a:	e7d5      	b.n	59f8 <bootutil_tlv_iter_begin+0x76>

00005a4c <bootutil_tlv_iter_next>:
                       uint8_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d04b      	beq.n	5ae8 <bootutil_tlv_iter_next+0x9c>
{
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	b083      	sub	sp, #12
    5a54:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5a56:	6800      	ldr	r0, [r0, #0]
    5a58:	2800      	cmp	r0, #0
    5a5a:	d049      	beq.n	5af0 <bootutil_tlv_iter_next+0xa4>
    5a5c:	461d      	mov	r5, r3
    5a5e:	4616      	mov	r6, r2
    5a60:	460f      	mov	r7, r1
    5a62:	6863      	ldr	r3, [r4, #4]
    5a64:	b9fb      	cbnz	r3, 5aa6 <bootutil_tlv_iter_next+0x5a>
        return -1;
    5a66:	f04f 31ff 	mov.w	r1, #4294967295
    5a6a:	e038      	b.n	5ade <bootutil_tlv_iter_next+0x92>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    5a6c:	2304      	movs	r3, #4
    5a6e:	eb0d 0203 	add.w	r2, sp, r3
    5a72:	6921      	ldr	r1, [r4, #16]
    5a74:	6860      	ldr	r0, [r4, #4]
    5a76:	f000 fb55 	bl	6124 <flash_area_read>
        if (rc) {
    5a7a:	4601      	mov	r1, r0
    5a7c:	2800      	cmp	r0, #0
    5a7e:	d13a      	bne.n	5af6 <bootutil_tlv_iter_next+0xaa>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    5a80:	7a63      	ldrb	r3, [r4, #9]
    5a82:	b11b      	cbz	r3, 5a8c <bootutil_tlv_iter_next+0x40>
    5a84:	6922      	ldr	r2, [r4, #16]
    5a86:	68e3      	ldr	r3, [r4, #12]
    5a88:	429a      	cmp	r2, r3
    5a8a:	d237      	bcs.n	5afc <bootutil_tlv_iter_next+0xb0>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5a8c:	7a23      	ldrb	r3, [r4, #8]
    5a8e:	2bff      	cmp	r3, #255	; 0xff
    5a90:	d017      	beq.n	5ac2 <bootutil_tlv_iter_next+0x76>
    5a92:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5a96:	4293      	cmp	r3, r2
    5a98:	d013      	beq.n	5ac2 <bootutil_tlv_iter_next+0x76>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5a9a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    5a9e:	6923      	ldr	r3, [r4, #16]
    5aa0:	4418      	add	r0, r3
    5aa2:	3004      	adds	r0, #4
    5aa4:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    5aa6:	6920      	ldr	r0, [r4, #16]
    5aa8:	6963      	ldr	r3, [r4, #20]
    5aaa:	4298      	cmp	r0, r3
    5aac:	d21a      	bcs.n	5ae4 <bootutil_tlv_iter_next+0x98>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5aae:	6823      	ldr	r3, [r4, #0]
    5ab0:	895b      	ldrh	r3, [r3, #10]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d0da      	beq.n	5a6c <bootutil_tlv_iter_next+0x20>
    5ab6:	68e3      	ldr	r3, [r4, #12]
    5ab8:	4283      	cmp	r3, r0
    5aba:	d1d7      	bne.n	5a6c <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    5abc:	3004      	adds	r0, #4
    5abe:	6120      	str	r0, [r4, #16]
    5ac0:	e7d4      	b.n	5a6c <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    5ac2:	b115      	cbz	r5, 5aca <bootutil_tlv_iter_next+0x7e>
                *type = tlv.it_type;
    5ac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5ac8:	702b      	strb	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    5aca:	6923      	ldr	r3, [r4, #16]
    5acc:	3304      	adds	r3, #4
    5ace:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    5ad0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ad4:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5ad6:	6922      	ldr	r2, [r4, #16]
    5ad8:	4413      	add	r3, r2
    5ada:	3304      	adds	r3, #4
    5adc:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    5ade:	4608      	mov	r0, r1
    5ae0:	b003      	add	sp, #12
    5ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    5ae4:	2101      	movs	r1, #1
    5ae6:	e7fa      	b.n	5ade <bootutil_tlv_iter_next+0x92>
        return -1;
    5ae8:	f04f 31ff 	mov.w	r1, #4294967295
}
    5aec:	4608      	mov	r0, r1
    5aee:	4770      	bx	lr
        return -1;
    5af0:	f04f 31ff 	mov.w	r1, #4294967295
    5af4:	e7f3      	b.n	5ade <bootutil_tlv_iter_next+0x92>
            return -1;
    5af6:	f04f 31ff 	mov.w	r1, #4294967295
    5afa:	e7f0      	b.n	5ade <bootutil_tlv_iter_next+0x92>
            return 1;
    5afc:	2101      	movs	r1, #1
    5afe:	e7ee      	b.n	5ade <bootutil_tlv_iter_next+0x92>

00005b00 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5b00:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5b04:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    5b08:	d001      	beq.n	5b0e <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    5b0a:	b2c0      	uxtb	r0, r0
    5b0c:	4770      	bx	lr
	}

	return -EINVAL;
    5b0e:	f06f 0015 	mvn.w	r0, #21
}
    5b12:	4770      	bx	lr

00005b14 <crc16>:

#include <sys/crc.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
    5b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b16:	f89d 4014 	ldrb.w	r4, [sp, #20]
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
    5b1a:	b11c      	cbz	r4, 5b24 <crc16+0x10>
    5b1c:	f04f 0e02 	mov.w	lr, #2
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
    5b20:	2700      	movs	r7, #0
    5b22:	e01a      	b.n	5b5a <crc16+0x46>
	size_t padding = pad ? sizeof(crc) : 0;
    5b24:	f04f 0e00 	mov.w	lr, #0
    5b28:	e7fa      	b.n	5b20 <crc16+0xc>
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
			}

			if (divide != 0U) {
    5b2a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5b2e:	d111      	bne.n	5b54 <crc16+0x40>
		for (b = 0; b < 8; b++) {
    5b30:	3501      	adds	r5, #1
    5b32:	4623      	mov	r3, r4
    5b34:	2d07      	cmp	r5, #7
    5b36:	d80f      	bhi.n	5b58 <crc16+0x44>
			crc = (crc << 1U);
    5b38:	005c      	lsls	r4, r3, #1
    5b3a:	b2a4      	uxth	r4, r4
			if (i < len) {
    5b3c:	428f      	cmp	r7, r1
    5b3e:	d2f4      	bcs.n	5b2a <crc16+0x16>
				crc |= !!(src[i] & (0x80U >> b));
    5b40:	f810 c007 	ldrb.w	ip, [r0, r7]
    5b44:	2680      	movs	r6, #128	; 0x80
    5b46:	40ee      	lsrs	r6, r5
    5b48:	ea1c 0f06 	tst.w	ip, r6
    5b4c:	bf18      	it	ne
    5b4e:	f044 0401 	orrne.w	r4, r4, #1
    5b52:	e7ea      	b.n	5b2a <crc16+0x16>
				crc = crc ^ polynomial;
    5b54:	4054      	eors	r4, r2
    5b56:	e7eb      	b.n	5b30 <crc16+0x1c>
	for (i = 0; i < len + padding; i++) {
    5b58:	3701      	adds	r7, #1
    5b5a:	eb0e 0401 	add.w	r4, lr, r1
    5b5e:	42bc      	cmp	r4, r7
    5b60:	d901      	bls.n	5b66 <crc16+0x52>
		for (b = 0; b < 8; b++) {
    5b62:	2500      	movs	r5, #0
    5b64:	e7e6      	b.n	5b34 <crc16+0x20>
			}
		}
	}

	return crc;
}
    5b66:	4618      	mov	r0, r3
    5b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b6a <block_ptr>:
#define LVL_ARRAY_SZ(n) (n)
#endif

static void *block_ptr(struct sys_mem_pool_base *p, size_t lsz, int block)
{
	return (u8_t *)p->buf + lsz * block;
    5b6a:	6800      	ldr	r0, [r0, #0]
}
    5b6c:	fb01 0002 	mla	r0, r1, r2, r0
    5b70:	4770      	bx	lr

00005b72 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    5b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b74:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    5b76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    5b7a:	6840      	ldr	r0, [r0, #4]
    5b7c:	fb00 fc0c 	mul.w	ip, r0, ip
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    5b80:	6827      	ldr	r7, [r4, #0]
    5b82:	4467      	add	r7, ip

	p->max_inline_level = -1;
    5b84:	23ff      	movs	r3, #255	; 0xff
    5b86:	72e3      	strb	r3, [r4, #11]

	for (i = 0; i < p->n_levels; i++) {
    5b88:	2200      	movs	r2, #0
    5b8a:	e00a      	b.n	5ba2 <z_sys_mem_pool_base_init+0x30>
		sys_dlist_init(&p->levels[i].free_list);

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
    5b8c:	68e3      	ldr	r3, [r4, #12]
    5b8e:	515f      	str	r7, [r3, r5]
			bits += (nblocks + 31)/32;
    5b90:	311f      	adds	r1, #31
    5b92:	d417      	bmi.n	5bc4 <z_sys_mem_pool_base_init+0x52>
    5b94:	1149      	asrs	r1, r1, #5
    5b96:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		}

		sz = WB_DN(sz / 4);
    5b9a:	0880      	lsrs	r0, r0, #2
    5b9c:	f020 0003 	bic.w	r0, r0, #3
	for (i = 0; i < p->n_levels; i++) {
    5ba0:	3201      	adds	r2, #1
    5ba2:	7aa3      	ldrb	r3, [r4, #10]
    5ba4:	4293      	cmp	r3, r2
    5ba6:	dd0f      	ble.n	5bc8 <z_sys_mem_pool_base_init+0x56>
		int nblocks = buflen / sz;
    5ba8:	fbbc f1f0 	udiv	r1, ip, r0
		sys_dlist_init(&p->levels[i].free_list);
    5bac:	68e3      	ldr	r3, [r4, #12]
    5bae:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    5bb2:	00b5      	lsls	r5, r6, #2
    5bb4:	442b      	add	r3, r5
    5bb6:	1d1e      	adds	r6, r3, #4
	list->head = (sys_dnode_t *)list;
    5bb8:	605e      	str	r6, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    5bba:	609e      	str	r6, [r3, #8]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    5bbc:	2920      	cmp	r1, #32
    5bbe:	d8e5      	bhi.n	5b8c <z_sys_mem_pool_base_init+0x1a>
			p->max_inline_level = i;
    5bc0:	72e2      	strb	r2, [r4, #11]
    5bc2:	e7ea      	b.n	5b9a <z_sys_mem_pool_base_init+0x28>
			bits += (nblocks + 31)/32;
    5bc4:	311f      	adds	r1, #31
    5bc6:	e7e5      	b.n	5b94 <z_sys_mem_pool_base_init+0x22>
	}

	for (i = 0; i < p->n_max; i++) {
    5bc8:	2500      	movs	r5, #0
    5bca:	e00d      	b.n	5be8 <z_sys_mem_pool_base_init+0x76>
		void *block = block_ptr(p, p->max_sz, i);
    5bcc:	462a      	mov	r2, r5
    5bce:	6861      	ldr	r1, [r4, #4]
    5bd0:	4620      	mov	r0, r4
    5bd2:	f7ff ffca 	bl	5b6a <block_ptr>

		sys_dlist_append(&p->levels[0].free_list, block);
    5bd6:	68e3      	ldr	r3, [r4, #12]
    5bd8:	1d1a      	adds	r2, r3, #4
	node->next = list;
    5bda:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    5bdc:	689a      	ldr	r2, [r3, #8]
    5bde:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    5be0:	689a      	ldr	r2, [r3, #8]
    5be2:	6010      	str	r0, [r2, #0]
	list->tail = node;
    5be4:	6098      	str	r0, [r3, #8]
	for (i = 0; i < p->n_max; i++) {
    5be6:	3501      	adds	r5, #1
    5be8:	8923      	ldrh	r3, [r4, #8]
    5bea:	42ab      	cmp	r3, r5
    5bec:	dcee      	bgt.n	5bcc <z_sys_mem_pool_base_init+0x5a>
	}
}
    5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005bf0 <z_arch_printk_char_out>:
}
    5bf0:	2000      	movs	r0, #0
    5bf2:	4770      	bx	lr

00005bf4 <print_err>:
{
    5bf4:	b538      	push	{r3, r4, r5, lr}
    5bf6:	4604      	mov	r4, r0
    5bf8:	460d      	mov	r5, r1
	out('E', ctx);
    5bfa:	2045      	movs	r0, #69	; 0x45
    5bfc:	47a0      	blx	r4
	out('R', ctx);
    5bfe:	4629      	mov	r1, r5
    5c00:	2052      	movs	r0, #82	; 0x52
    5c02:	47a0      	blx	r4
	out('R', ctx);
    5c04:	4629      	mov	r1, r5
    5c06:	2052      	movs	r0, #82	; 0x52
    5c08:	47a0      	blx	r4
}
    5c0a:	bd38      	pop	{r3, r4, r5, pc}

00005c0c <_printk_hex_ulong>:
{
    5c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c10:	b083      	sub	sp, #12
    5c12:	4681      	mov	r9, r0
    5c14:	9100      	str	r1, [sp, #0]
    5c16:	4690      	mov	r8, r2
    5c18:	461d      	mov	r5, r3
    5c1a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    5c1e:	9301      	str	r3, [sp, #4]
	int digits = 0;
    5c20:	2600      	movs	r6, #0
	int remaining = 16; /* 16 digits max */
    5c22:	f04f 0a10 	mov.w	sl, #16
	int found_largest_digit = 0;
    5c26:	4637      	mov	r7, r6
	int shift = sizeof(num) * 8;
    5c28:	2440      	movs	r4, #64	; 0x40
	while (shift >= 4) {
    5c2a:	e007      	b.n	5c3c <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    5c2c:	2809      	cmp	r0, #9
    5c2e:	d928      	bls.n	5c82 <_printk_hex_ulong+0x76>
    5c30:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    5c32:	9900      	ldr	r1, [sp, #0]
    5c34:	4418      	add	r0, r3
    5c36:	47c8      	blx	r9
			digits++;
    5c38:	3601      	adds	r6, #1
			found_largest_digit = 1;
    5c3a:	2701      	movs	r7, #1
	while (shift >= 4) {
    5c3c:	2c03      	cmp	r4, #3
    5c3e:	dd2e      	ble.n	5c9e <_printk_hex_ulong+0x92>
		shift -= 4;
    5c40:	3c04      	subs	r4, #4
		nibble = (num >> shift) & 0xf;
    5c42:	f1c4 0220 	rsb	r2, r4, #32
    5c46:	f1a4 0320 	sub.w	r3, r4, #32
    5c4a:	fa28 f004 	lsr.w	r0, r8, r4
    5c4e:	fa05 f202 	lsl.w	r2, r5, r2
    5c52:	4310      	orrs	r0, r2
    5c54:	fa25 f303 	lsr.w	r3, r5, r3
    5c58:	4318      	orrs	r0, r3
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    5c5a:	f010 000f 	ands.w	r0, r0, #15
    5c5e:	d1e5      	bne.n	5c2c <_printk_hex_ulong+0x20>
    5c60:	2f00      	cmp	r7, #0
    5c62:	d1e3      	bne.n	5c2c <_printk_hex_ulong+0x20>
    5c64:	2c00      	cmp	r4, #0
    5c66:	d0e1      	beq.n	5c2c <_printk_hex_ulong+0x20>
		if (remaining-- <= min_width) {
    5c68:	f10a 3bff 	add.w	fp, sl, #4294967295
    5c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c6e:	459a      	cmp	sl, r3
    5c70:	dc11      	bgt.n	5c96 <_printk_hex_ulong+0x8a>
			if (padding == PAD_ZERO_BEFORE) {
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	2b01      	cmp	r3, #1
    5c76:	d106      	bne.n	5c86 <_printk_hex_ulong+0x7a>
				out('0', ctx);
    5c78:	9900      	ldr	r1, [sp, #0]
    5c7a:	2030      	movs	r0, #48	; 0x30
    5c7c:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    5c7e:	46da      	mov	sl, fp
    5c80:	e7dc      	b.n	5c3c <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    5c82:	2330      	movs	r3, #48	; 0x30
    5c84:	e7d5      	b.n	5c32 <_printk_hex_ulong+0x26>
			} else if (padding == PAD_SPACE_BEFORE) {
    5c86:	9b01      	ldr	r3, [sp, #4]
    5c88:	2b02      	cmp	r3, #2
    5c8a:	d106      	bne.n	5c9a <_printk_hex_ulong+0x8e>
				out(' ', ctx);
    5c8c:	9900      	ldr	r1, [sp, #0]
    5c8e:	2020      	movs	r0, #32
    5c90:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    5c92:	46da      	mov	sl, fp
    5c94:	e7d2      	b.n	5c3c <_printk_hex_ulong+0x30>
    5c96:	46da      	mov	sl, fp
    5c98:	e7d0      	b.n	5c3c <_printk_hex_ulong+0x30>
    5c9a:	46da      	mov	sl, fp
    5c9c:	e7ce      	b.n	5c3c <_printk_hex_ulong+0x30>
	if (padding == PAD_SPACE_AFTER) {
    5c9e:	9b01      	ldr	r3, [sp, #4]
    5ca0:	2b03      	cmp	r3, #3
    5ca2:	d002      	beq.n	5caa <_printk_hex_ulong+0x9e>
}
    5ca4:	b003      	add	sp, #12
    5ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    5caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5cac:	ebc6 0643 	rsb	r6, r6, r3, lsl #1
		while (remaining-- > 0) {
    5cb0:	e003      	b.n	5cba <_printk_hex_ulong+0xae>
			out(' ', ctx);
    5cb2:	9900      	ldr	r1, [sp, #0]
    5cb4:	2020      	movs	r0, #32
    5cb6:	47c8      	blx	r9
		while (remaining-- > 0) {
    5cb8:	4626      	mov	r6, r4
    5cba:	1e74      	subs	r4, r6, #1
    5cbc:	2e00      	cmp	r6, #0
    5cbe:	dcf8      	bgt.n	5cb2 <_printk_hex_ulong+0xa6>
    5cc0:	e7f0      	b.n	5ca4 <_printk_hex_ulong+0x98>

00005cc2 <z_vprintk>:
{
    5cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cc6:	b085      	sub	sp, #20
    5cc8:	4607      	mov	r7, r0
    5cca:	460e      	mov	r6, r1
    5ccc:	4614      	mov	r4, r2
    5cce:	9303      	str	r3, [sp, #12]
	char length_mod = 0;
    5cd0:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    5cd4:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
    5cd8:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    5cda:	4645      	mov	r5, r8
	while (*fmt) {
    5cdc:	e132      	b.n	5f44 <z_vprintk+0x282>
			switch (*fmt) {
    5cde:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    5ce2:	2b55      	cmp	r3, #85	; 0x55
    5ce4:	f200 8176 	bhi.w	5fd4 <z_vprintk+0x312>
    5ce8:	e8df f013 	tbh	[pc, r3, lsl #1]
    5cec:	0174016f 	.word	0x0174016f
    5cf0:	01740174 	.word	0x01740174
    5cf4:	01740174 	.word	0x01740174
    5cf8:	01740174 	.word	0x01740174
    5cfc:	01740183 	.word	0x01740183
    5d00:	00560174 	.word	0x00560174
    5d04:	00590059 	.word	0x00590059
    5d08:	00590059 	.word	0x00590059
    5d0c:	00590059 	.word	0x00590059
    5d10:	00590059 	.word	0x00590059
    5d14:	01740059 	.word	0x01740059
    5d18:	01740174 	.word	0x01740174
    5d1c:	01740174 	.word	0x01740174
    5d20:	01740174 	.word	0x01740174
    5d24:	01740174 	.word	0x01740174
    5d28:	01740174 	.word	0x01740174
    5d2c:	01740174 	.word	0x01740174
    5d30:	01740174 	.word	0x01740174
    5d34:	01740174 	.word	0x01740174
    5d38:	01740174 	.word	0x01740174
    5d3c:	01740174 	.word	0x01740174
    5d40:	01740174 	.word	0x01740174
    5d44:	01740174 	.word	0x01740174
    5d48:	01740174 	.word	0x01740174
    5d4c:	01740174 	.word	0x01740174
    5d50:	010e0174 	.word	0x010e0174
    5d54:	01740174 	.word	0x01740174
    5d58:	01740174 	.word	0x01740174
    5d5c:	01740174 	.word	0x01740174
    5d60:	01740174 	.word	0x01740174
    5d64:	01740174 	.word	0x01740174
    5d68:	008f0167 	.word	0x008f0167
    5d6c:	01740174 	.word	0x01740174
    5d70:	00730174 	.word	0x00730174
    5d74:	0174008f 	.word	0x0174008f
    5d78:	00730174 	.word	0x00730174
    5d7c:	01740174 	.word	0x01740174
    5d80:	01040174 	.word	0x01040174
    5d84:	01740174 	.word	0x01740174
    5d88:	01740147 	.word	0x01740147
    5d8c:	017400d1 	.word	0x017400d1
    5d90:	010e0174 	.word	0x010e0174
    5d94:	00730174 	.word	0x00730174
				if (min_width < 0 && padding == PAD_NONE) {
    5d98:	f1ba 0f00 	cmp.w	sl, #0
    5d9c:	db10      	blt.n	5dc0 <z_vprintk+0xfe>
				if (min_width < 0) {
    5d9e:	f1ba 0f00 	cmp.w	sl, #0
    5da2:	db13      	blt.n	5dcc <z_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    5da4:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    5da8:	ea4f 034a 	mov.w	r3, sl, lsl #1
    5dac:	4418      	add	r0, r3
    5dae:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    5db2:	f1b9 0f00 	cmp.w	r9, #0
    5db6:	f040 80c4 	bne.w	5f42 <z_vprintk+0x280>
					padding = PAD_SPACE_BEFORE;
    5dba:	f04f 0902 	mov.w	r9, #2
    5dbe:	e0c0      	b.n	5f42 <z_vprintk+0x280>
				if (min_width < 0 && padding == PAD_NONE) {
    5dc0:	f1b9 0f00 	cmp.w	r9, #0
    5dc4:	d1eb      	bne.n	5d9e <z_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    5dc6:	f04f 0901 	mov.w	r9, #1
    5dca:	e0ba      	b.n	5f42 <z_vprintk+0x280>
					min_width = *fmt - '0';
    5dcc:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    5dd0:	e7ef      	b.n	5db2 <z_vprintk+0xf0>
				if (*fmt == 'h' && length_mod == 'h') {
    5dd2:	2868      	cmp	r0, #104	; 0x68
    5dd4:	d00d      	beq.n	5df2 <z_vprintk+0x130>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5dd6:	286c      	cmp	r0, #108	; 0x6c
    5dd8:	d011      	beq.n	5dfe <z_vprintk+0x13c>
				} else if (length_mod == 0) {
    5dda:	f1b8 0f00 	cmp.w	r8, #0
    5dde:	f000 810b 	beq.w	5ff8 <z_vprintk+0x336>
					out((int)'%', ctx);
    5de2:	4631      	mov	r1, r6
    5de4:	2025      	movs	r0, #37	; 0x25
    5de6:	47b8      	blx	r7
					out((int)*fmt, ctx);
    5de8:	4631      	mov	r1, r6
    5dea:	7820      	ldrb	r0, [r4, #0]
    5dec:	47b8      	blx	r7
			might_format = 0;
    5dee:	2500      	movs	r5, #0
					break;
    5df0:	e0a7      	b.n	5f42 <z_vprintk+0x280>
				if (*fmt == 'h' && length_mod == 'h') {
    5df2:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    5df6:	d1ee      	bne.n	5dd6 <z_vprintk+0x114>
					length_mod = 'H';
    5df8:	f04f 0848 	mov.w	r8, #72	; 0x48
    5dfc:	e0a1      	b.n	5f42 <z_vprintk+0x280>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5dfe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5e02:	d1ea      	bne.n	5dda <z_vprintk+0x118>
					length_mod = 'L';
    5e04:	f04f 084c 	mov.w	r8, #76	; 0x4c
    5e08:	e09b      	b.n	5f42 <z_vprintk+0x280>
				if (length_mod == 'z') {
    5e0a:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    5e0e:	d00a      	beq.n	5e26 <z_vprintk+0x164>
				} else if (length_mod == 'l') {
    5e10:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5e14:	d01d      	beq.n	5e52 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
    5e16:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5e1a:	d01f      	beq.n	5e5c <z_vprintk+0x19a>
					d = va_arg(ap, int);
    5e1c:	9b03      	ldr	r3, [sp, #12]
    5e1e:	1d1a      	adds	r2, r3, #4
    5e20:	9203      	str	r2, [sp, #12]
    5e22:	681d      	ldr	r5, [r3, #0]
    5e24:	e003      	b.n	5e2e <z_vprintk+0x16c>
					d = va_arg(ap, ssize_t);
    5e26:	9b03      	ldr	r3, [sp, #12]
    5e28:	1d1a      	adds	r2, r3, #4
    5e2a:	9203      	str	r2, [sp, #12]
    5e2c:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    5e2e:	2d00      	cmp	r5, #0
    5e30:	da05      	bge.n	5e3e <z_vprintk+0x17c>
					out((int)'-', ctx);
    5e32:	4631      	mov	r1, r6
    5e34:	202d      	movs	r0, #45	; 0x2d
    5e36:	47b8      	blx	r7
					d = -d;
    5e38:	426d      	negs	r5, r5
					min_width--;
    5e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    5e3e:	f8cd a000 	str.w	sl, [sp]
    5e42:	464b      	mov	r3, r9
    5e44:	462a      	mov	r2, r5
    5e46:	4631      	mov	r1, r6
    5e48:	4638      	mov	r0, r7
    5e4a:	f7fb fddd 	bl	1a08 <_printk_dec_ulong>
			might_format = 0;
    5e4e:	2500      	movs	r5, #0
				break;
    5e50:	e077      	b.n	5f42 <z_vprintk+0x280>
					d = va_arg(ap, long);
    5e52:	9b03      	ldr	r3, [sp, #12]
    5e54:	1d1a      	adds	r2, r3, #4
    5e56:	9203      	str	r2, [sp, #12]
    5e58:	681d      	ldr	r5, [r3, #0]
    5e5a:	e7e8      	b.n	5e2e <z_vprintk+0x16c>
					long long lld = va_arg(ap, long long);
    5e5c:	9b03      	ldr	r3, [sp, #12]
    5e5e:	3307      	adds	r3, #7
    5e60:	f023 0307 	bic.w	r3, r3, #7
    5e64:	f103 0208 	add.w	r2, r3, #8
    5e68:	9203      	str	r2, [sp, #12]
    5e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
    5e6e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    5e72:	f143 0100 	adc.w	r1, r3, #0
    5e76:	2901      	cmp	r1, #1
    5e78:	bf08      	it	eq
    5e7a:	2800      	cmpeq	r0, #0
    5e7c:	d201      	bcs.n	5e82 <z_vprintk+0x1c0>
					d = lld;
    5e7e:	4615      	mov	r5, r2
    5e80:	e7d5      	b.n	5e2e <z_vprintk+0x16c>
						print_err(out, ctx);
    5e82:	4631      	mov	r1, r6
    5e84:	4638      	mov	r0, r7
    5e86:	f7ff feb5 	bl	5bf4 <print_err>
			might_format = 0;
    5e8a:	2500      	movs	r5, #0
						break;
    5e8c:	e059      	b.n	5f42 <z_vprintk+0x280>
				if (length_mod == 'z') {
    5e8e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    5e92:	d00a      	beq.n	5eaa <z_vprintk+0x1e8>
				} else if (length_mod == 'l') {
    5e94:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5e98:	d014      	beq.n	5ec4 <z_vprintk+0x202>
				} else if (length_mod == 'L') {
    5e9a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5e9e:	d016      	beq.n	5ece <z_vprintk+0x20c>
					u = va_arg(ap, unsigned int);
    5ea0:	9b03      	ldr	r3, [sp, #12]
    5ea2:	1d1a      	adds	r2, r3, #4
    5ea4:	9203      	str	r2, [sp, #12]
    5ea6:	681a      	ldr	r2, [r3, #0]
    5ea8:	e003      	b.n	5eb2 <z_vprintk+0x1f0>
					u = va_arg(ap, size_t);
    5eaa:	9b03      	ldr	r3, [sp, #12]
    5eac:	1d1a      	adds	r2, r3, #4
    5eae:	9203      	str	r2, [sp, #12]
    5eb0:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    5eb2:	f8cd a000 	str.w	sl, [sp]
    5eb6:	464b      	mov	r3, r9
    5eb8:	4631      	mov	r1, r6
    5eba:	4638      	mov	r0, r7
    5ebc:	f7fb fda4 	bl	1a08 <_printk_dec_ulong>
			might_format = 0;
    5ec0:	2500      	movs	r5, #0
				break;
    5ec2:	e03e      	b.n	5f42 <z_vprintk+0x280>
					u = va_arg(ap, unsigned long);
    5ec4:	9b03      	ldr	r3, [sp, #12]
    5ec6:	1d1a      	adds	r2, r3, #4
    5ec8:	9203      	str	r2, [sp, #12]
    5eca:	681a      	ldr	r2, [r3, #0]
    5ecc:	e7f1      	b.n	5eb2 <z_vprintk+0x1f0>
					unsigned long long llu =
    5ece:	9b03      	ldr	r3, [sp, #12]
    5ed0:	3307      	adds	r3, #7
    5ed2:	f023 0307 	bic.w	r3, r3, #7
    5ed6:	f103 0208 	add.w	r2, r3, #8
    5eda:	9203      	str	r2, [sp, #12]
    5edc:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    5ee0:	2b01      	cmp	r3, #1
    5ee2:	bf08      	it	eq
    5ee4:	2a00      	cmpeq	r2, #0
    5ee6:	d3e4      	bcc.n	5eb2 <z_vprintk+0x1f0>
						print_err(out, ctx);
    5ee8:	4631      	mov	r1, r6
    5eea:	4638      	mov	r0, r7
    5eec:	f7ff fe82 	bl	5bf4 <print_err>
			might_format = 0;
    5ef0:	2500      	movs	r5, #0
						break;
    5ef2:	e026      	b.n	5f42 <z_vprintk+0x280>
				  out('0', ctx);
    5ef4:	4631      	mov	r1, r6
    5ef6:	2030      	movs	r0, #48	; 0x30
    5ef8:	47b8      	blx	r7
				  out('x', ctx);
    5efa:	4631      	mov	r1, r6
    5efc:	2078      	movs	r0, #120	; 0x78
    5efe:	47b8      	blx	r7
				  min_width = 8;
    5f00:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    5f04:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    5f08:	7823      	ldrb	r3, [r4, #0]
    5f0a:	2b70      	cmp	r3, #112	; 0x70
    5f0c:	d00b      	beq.n	5f26 <z_vprintk+0x264>
				} else if (length_mod == 'l') {
    5f0e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5f12:	d022      	beq.n	5f5a <z_vprintk+0x298>
				} else if (length_mod == 'L') {
    5f14:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5f18:	d025      	beq.n	5f66 <z_vprintk+0x2a4>
					x = va_arg(ap, unsigned int);
    5f1a:	9b03      	ldr	r3, [sp, #12]
    5f1c:	1d1a      	adds	r2, r3, #4
    5f1e:	9203      	str	r2, [sp, #12]
    5f20:	681a      	ldr	r2, [r3, #0]
    5f22:	2300      	movs	r3, #0
    5f24:	e004      	b.n	5f30 <z_vprintk+0x26e>
					x = (uintptr_t)va_arg(ap, void *);
    5f26:	9b03      	ldr	r3, [sp, #12]
    5f28:	1d1a      	adds	r2, r3, #4
    5f2a:	9203      	str	r2, [sp, #12]
    5f2c:	681a      	ldr	r2, [r3, #0]
    5f2e:	2300      	movs	r3, #0
				_printk_hex_ulong(out, ctx, x, padding,
    5f30:	f8cd a004 	str.w	sl, [sp, #4]
    5f34:	f8cd 9000 	str.w	r9, [sp]
    5f38:	4631      	mov	r1, r6
    5f3a:	4638      	mov	r0, r7
    5f3c:	f7ff fe66 	bl	5c0c <_printk_hex_ulong>
			might_format = 0;
    5f40:	2500      	movs	r5, #0
		++fmt;
    5f42:	3401      	adds	r4, #1
	while (*fmt) {
    5f44:	7820      	ldrb	r0, [r4, #0]
    5f46:	2800      	cmp	r0, #0
    5f48:	d058      	beq.n	5ffc <z_vprintk+0x33a>
		if (!might_format) {
    5f4a:	2d00      	cmp	r5, #0
    5f4c:	f47f aec7 	bne.w	5cde <z_vprintk+0x1c>
			if (*fmt != '%') {
    5f50:	2825      	cmp	r0, #37	; 0x25
    5f52:	d047      	beq.n	5fe4 <z_vprintk+0x322>
				out((int)*fmt, ctx);
    5f54:	4631      	mov	r1, r6
    5f56:	47b8      	blx	r7
    5f58:	e7f3      	b.n	5f42 <z_vprintk+0x280>
					x = va_arg(ap, unsigned long);
    5f5a:	9b03      	ldr	r3, [sp, #12]
    5f5c:	1d1a      	adds	r2, r3, #4
    5f5e:	9203      	str	r2, [sp, #12]
    5f60:	681a      	ldr	r2, [r3, #0]
    5f62:	2300      	movs	r3, #0
    5f64:	e7e4      	b.n	5f30 <z_vprintk+0x26e>
					x = va_arg(ap, unsigned long long);
    5f66:	9b03      	ldr	r3, [sp, #12]
    5f68:	3307      	adds	r3, #7
    5f6a:	f023 0307 	bic.w	r3, r3, #7
    5f6e:	f103 0208 	add.w	r2, r3, #8
    5f72:	9203      	str	r2, [sp, #12]
    5f74:	681a      	ldr	r2, [r3, #0]
    5f76:	685b      	ldr	r3, [r3, #4]
    5f78:	e7da      	b.n	5f30 <z_vprintk+0x26e>
				char *s = va_arg(ap, char *);
    5f7a:	9b03      	ldr	r3, [sp, #12]
    5f7c:	1d1a      	adds	r2, r3, #4
    5f7e:	9203      	str	r2, [sp, #12]
    5f80:	f8d3 b000 	ldr.w	fp, [r3]
    5f84:	465d      	mov	r5, fp
				while (*s) {
    5f86:	e002      	b.n	5f8e <z_vprintk+0x2cc>
					out((int)(*s++), ctx);
    5f88:	3501      	adds	r5, #1
    5f8a:	4631      	mov	r1, r6
    5f8c:	47b8      	blx	r7
				while (*s) {
    5f8e:	7828      	ldrb	r0, [r5, #0]
    5f90:	2800      	cmp	r0, #0
    5f92:	d1f9      	bne.n	5f88 <z_vprintk+0x2c6>
				if (padding == PAD_SPACE_AFTER) {
    5f94:	f1b9 0f03 	cmp.w	r9, #3
    5f98:	d001      	beq.n	5f9e <z_vprintk+0x2dc>
			might_format = 0;
    5f9a:	2500      	movs	r5, #0
    5f9c:	e7d1      	b.n	5f42 <z_vprintk+0x280>
					int remaining = min_width - (s - start);
    5f9e:	eba5 030b 	sub.w	r3, r5, fp
    5fa2:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
    5fa6:	e003      	b.n	5fb0 <z_vprintk+0x2ee>
						out(' ', ctx);
    5fa8:	4631      	mov	r1, r6
    5faa:	2020      	movs	r0, #32
    5fac:	47b8      	blx	r7
					while (remaining-- > 0) {
    5fae:	462b      	mov	r3, r5
    5fb0:	1e5d      	subs	r5, r3, #1
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	dcf8      	bgt.n	5fa8 <z_vprintk+0x2e6>
			might_format = 0;
    5fb6:	2500      	movs	r5, #0
    5fb8:	e7c3      	b.n	5f42 <z_vprintk+0x280>
				int c = va_arg(ap, int);
    5fba:	9b03      	ldr	r3, [sp, #12]
    5fbc:	1d1a      	adds	r2, r3, #4
    5fbe:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    5fc0:	4631      	mov	r1, r6
    5fc2:	6818      	ldr	r0, [r3, #0]
    5fc4:	47b8      	blx	r7
			might_format = 0;
    5fc6:	2500      	movs	r5, #0
				break;
    5fc8:	e7bb      	b.n	5f42 <z_vprintk+0x280>
				out((int)'%', ctx);
    5fca:	4631      	mov	r1, r6
    5fcc:	2025      	movs	r0, #37	; 0x25
    5fce:	47b8      	blx	r7
			might_format = 0;
    5fd0:	2500      	movs	r5, #0
				break;
    5fd2:	e7b6      	b.n	5f42 <z_vprintk+0x280>
				out((int)'%', ctx);
    5fd4:	4631      	mov	r1, r6
    5fd6:	2025      	movs	r0, #37	; 0x25
    5fd8:	47b8      	blx	r7
				out((int)*fmt, ctx);
    5fda:	4631      	mov	r1, r6
    5fdc:	7820      	ldrb	r0, [r4, #0]
    5fde:	47b8      	blx	r7
			might_format = 0;
    5fe0:	2500      	movs	r5, #0
				break;
    5fe2:	e7ae      	b.n	5f42 <z_vprintk+0x280>
				length_mod = 0;
    5fe4:	f04f 0800 	mov.w	r8, #0
				min_width = -1;
    5fe8:	f04f 3aff 	mov.w	sl, #4294967295
				padding = PAD_NONE;
    5fec:	46c1      	mov	r9, r8
				might_format = 1;
    5fee:	2501      	movs	r5, #1
    5ff0:	e7a7      	b.n	5f42 <z_vprintk+0x280>
				padding = PAD_SPACE_AFTER;
    5ff2:	f04f 0903 	mov.w	r9, #3
    5ff6:	e7a4      	b.n	5f42 <z_vprintk+0x280>
					length_mod = *fmt;
    5ff8:	4680      	mov	r8, r0
    5ffa:	e7a2      	b.n	5f42 <z_vprintk+0x280>
}
    5ffc:	b005      	add	sp, #20
    5ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006002 <printk>:
{
    6002:	b40f      	push	{r0, r1, r2, r3}
    6004:	b500      	push	{lr}
    6006:	b083      	sub	sp, #12
    6008:	a904      	add	r1, sp, #16
    600a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    600e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    6010:	f7fb fd4c 	bl	1aac <vprintk>
}
    6014:	b003      	add	sp, #12
    6016:	f85d eb04 	ldr.w	lr, [sp], #4
    601a:	b004      	add	sp, #16
    601c:	4770      	bx	lr

0000601e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    601e:	4770      	bx	lr

00006020 <z_platform_init>:
{
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
    6020:	b508      	push	{r3, lr}
	SystemInit();
    6022:	f7fe fceb 	bl	49fc <SystemInit>
}
    6026:	bd08      	pop	{r3, pc}

00006028 <dummy_timestamp>:
}
    6028:	2000      	movs	r0, #0
    602a:	4770      	bx	lr

0000602c <k_cycle_get_32_wrapper>:
{
    602c:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    602e:	f7fb ff6d 	bl	1f0c <z_timer_cycle_get_32>
}
    6032:	bd08      	pop	{r3, pc}

00006034 <log_string_sync>:
{
    6034:	b40e      	push	{r1, r2, r3}
    6036:	b500      	push	{lr}
    6038:	b082      	sub	sp, #8
    603a:	aa03      	add	r2, sp, #12
    603c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    6040:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
    6042:	f7fb fd57 	bl	1af4 <log_generic>
}
    6046:	b002      	add	sp, #8
    6048:	f85d eb04 	ldr.w	lr, [sp], #4
    604c:	b003      	add	sp, #12
    604e:	4770      	bx	lr

00006050 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    6050:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    6052:	f7fb fdab 	bl	1bac <log_init>
	}

	return 0;
}
    6056:	2000      	movs	r0, #0
    6058:	bd08      	pop	{r3, pc}

0000605a <should_bail>:
	if (info->start_offset < data->area_off) {
    605a:	6800      	ldr	r0, [r0, #0]
    605c:	684b      	ldr	r3, [r1, #4]
    605e:	4298      	cmp	r0, r3
    6060:	d30f      	bcc.n	6082 <should_bail+0x28>
{
    6062:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6064:	688c      	ldr	r4, [r1, #8]
    6066:	4423      	add	r3, r4
    6068:	4298      	cmp	r0, r3
    606a:	d20d      	bcs.n	6088 <should_bail+0x2e>
	} else if (data->ret_idx >= data->ret_len) {
    606c:	6908      	ldr	r0, [r1, #16]
    606e:	694b      	ldr	r3, [r1, #20]
    6070:	4298      	cmp	r0, r3
    6072:	d30f      	bcc.n	6094 <should_bail+0x3a>
		data->status = -ENOMEM;
    6074:	f06f 030b 	mvn.w	r3, #11
    6078:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    607a:	2300      	movs	r3, #0
    607c:	7013      	strb	r3, [r2, #0]
		return true;
    607e:	2001      	movs	r0, #1
    6080:	e005      	b.n	608e <should_bail+0x34>
		*bail_value = true;
    6082:	2001      	movs	r0, #1
    6084:	7010      	strb	r0, [r2, #0]
}
    6086:	4770      	bx	lr
		*bail_value = false;
    6088:	2300      	movs	r3, #0
    608a:	7013      	strb	r3, [r2, #0]
		return true;
    608c:	2001      	movs	r0, #1
}
    608e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6092:	4770      	bx	lr
	return false;
    6094:	2000      	movs	r0, #0
    6096:	e7fa      	b.n	608e <should_bail+0x34>

00006098 <get_sectors_cb>:
{
    6098:	b570      	push	{r4, r5, r6, lr}
    609a:	b082      	sub	sp, #8
    609c:	4606      	mov	r6, r0
    609e:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    60a0:	68cd      	ldr	r5, [r1, #12]
	if (should_bail(info, data, &bail)) {
    60a2:	f10d 0207 	add.w	r2, sp, #7
    60a6:	f7ff ffd8 	bl	605a <should_bail>
    60aa:	b980      	cbnz	r0, 60ce <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    60ac:	6833      	ldr	r3, [r6, #0]
    60ae:	6861      	ldr	r1, [r4, #4]
    60b0:	6922      	ldr	r2, [r4, #16]
    60b2:	1a5b      	subs	r3, r3, r1
    60b4:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    60b8:	6923      	ldr	r3, [r4, #16]
    60ba:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    60be:	6873      	ldr	r3, [r6, #4]
    60c0:	606b      	str	r3, [r5, #4]
	data->ret_idx++;
    60c2:	6923      	ldr	r3, [r4, #16]
    60c4:	3301      	adds	r3, #1
    60c6:	6123      	str	r3, [r4, #16]
	return true;
    60c8:	2001      	movs	r0, #1
}
    60ca:	b002      	add	sp, #8
    60cc:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    60ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    60d2:	e7fa      	b.n	60ca <get_sectors_cb+0x32>

000060d4 <flash_area_layout>:
{
    60d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60d6:	460d      	mov	r5, r1
    60d8:	4616      	mov	r6, r2
    60da:	461f      	mov	r7, r3
    60dc:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    60de:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    60e0:	f7fb fdd0 	bl	1c84 <get_flash_area_from_id>
	if (fa == NULL) {
    60e4:	b1b8      	cbz	r0, 6116 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    60e6:	6842      	ldr	r2, [r0, #4]
    60e8:	6062      	str	r2, [r4, #4]
	cb_data->area_len = fa->fa_size;
    60ea:	6882      	ldr	r2, [r0, #8]
    60ec:	60a2      	str	r2, [r4, #8]
	cb_data->ret = ret;
    60ee:	60e6      	str	r6, [r4, #12]
	cb_data->ret_idx = 0U;
    60f0:	2200      	movs	r2, #0
    60f2:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    60f4:	6829      	ldr	r1, [r5, #0]
    60f6:	6161      	str	r1, [r4, #20]
	cb_data->status = 0;
    60f8:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    60fa:	68c0      	ldr	r0, [r0, #12]
    60fc:	f7fe fd7e 	bl	4bfc <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    6100:	b160      	cbz	r0, 611c <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    6102:	4622      	mov	r2, r4
    6104:	4639      	mov	r1, r7
    6106:	f000 fc4b 	bl	69a0 <flash_page_foreach>
	if (cb_data->status == 0) {
    610a:	69a3      	ldr	r3, [r4, #24]
    610c:	b90b      	cbnz	r3, 6112 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    610e:	6923      	ldr	r3, [r4, #16]
    6110:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    6112:	69a0      	ldr	r0, [r4, #24]
}
    6114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    6116:	f06f 0015 	mvn.w	r0, #21
    611a:	e7fb      	b.n	6114 <flash_area_layout+0x40>
		return -ENODEV;
    611c:	f06f 0012 	mvn.w	r0, #18
    6120:	e7f8      	b.n	6114 <flash_area_layout+0x40>

00006122 <flash_area_close>:
}
    6122:	4770      	bx	lr

00006124 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    6124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6126:	6884      	ldr	r4, [r0, #8]
    6128:	428c      	cmp	r4, r1
    612a:	d304      	bcc.n	6136 <flash_area_read+0x12>
    612c:	185d      	adds	r5, r3, r1
    612e:	42ac      	cmp	r4, r5
    6130:	d212      	bcs.n	6158 <flash_area_read+0x34>
    6132:	2400      	movs	r4, #0
    6134:	e000      	b.n	6138 <flash_area_read+0x14>
    6136:	2400      	movs	r4, #0
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6138:	b184      	cbz	r4, 615c <flash_area_read+0x38>
    613a:	461e      	mov	r6, r3
    613c:	4617      	mov	r7, r2
    613e:	460d      	mov	r5, r1
    6140:	4604      	mov	r4, r0
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6142:	68c0      	ldr	r0, [r0, #12]
    6144:	f7fe fd5a 	bl	4bfc <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    6148:	6861      	ldr	r1, [r4, #4]
    614a:	4429      	add	r1, r5
			 size_t len);

static inline int z_impl_flash_read(struct device *dev, off_t offset, void *data,
			     size_t len)
{
	const struct flash_driver_api *api = dev->driver_api;
    614c:	6843      	ldr	r3, [r0, #4]

	return api->read(dev, offset, data, len);
    614e:	681c      	ldr	r4, [r3, #0]
    6150:	4633      	mov	r3, r6
    6152:	463a      	mov	r2, r7
    6154:	47a0      	blx	r4
}
    6156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6158:	2401      	movs	r4, #1
    615a:	e7ed      	b.n	6138 <flash_area_read+0x14>
		return -EINVAL;
    615c:	f06f 0015 	mvn.w	r0, #21
    6160:	e7f9      	b.n	6156 <flash_area_read+0x32>

00006162 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6166:	6884      	ldr	r4, [r0, #8]
    6168:	428c      	cmp	r4, r1
    616a:	d304      	bcc.n	6176 <flash_area_write+0x14>
    616c:	185d      	adds	r5, r3, r1
    616e:	42ac      	cmp	r4, r5
    6170:	d222      	bcs.n	61b8 <flash_area_write+0x56>
    6172:	2400      	movs	r4, #0
    6174:	e000      	b.n	6178 <flash_area_write+0x16>
    6176:	2400      	movs	r4, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6178:	b304      	cbz	r4, 61bc <flash_area_write+0x5a>
    617a:	461e      	mov	r6, r3
    617c:	4617      	mov	r7, r2
    617e:	4688      	mov	r8, r1
    6180:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6182:	68c0      	ldr	r0, [r0, #12]
    6184:	f7fe fd3a 	bl	4bfc <z_impl_device_get_binding>
    6188:	4605      	mov	r5, r0
__syscall int flash_write_protection_set(struct device *dev, bool enable);

static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;
    618a:	6843      	ldr	r3, [r0, #4]

	return api->write_protection(dev, enable);
    618c:	68db      	ldr	r3, [r3, #12]
    618e:	2100      	movs	r1, #0
    6190:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    6192:	4681      	mov	r9, r0
    6194:	b968      	cbnz	r0, 61b2 <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6196:	6861      	ldr	r1, [r4, #4]
    6198:	4441      	add	r1, r8
	const struct flash_driver_api *api = dev->driver_api;
    619a:	686b      	ldr	r3, [r5, #4]
	return api->write(dev, offset, data, len);
    619c:	685c      	ldr	r4, [r3, #4]
    619e:	4633      	mov	r3, r6
    61a0:	463a      	mov	r2, r7
    61a2:	4628      	mov	r0, r5
    61a4:	47a0      	blx	r4
    61a6:	4681      	mov	r9, r0
	const struct flash_driver_api *api = dev->driver_api;
    61a8:	686b      	ldr	r3, [r5, #4]
	return api->write_protection(dev, enable);
    61aa:	68db      	ldr	r3, [r3, #12]
    61ac:	2101      	movs	r1, #1
    61ae:	4628      	mov	r0, r5
    61b0:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    61b2:	4648      	mov	r0, r9
    61b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    61b8:	2401      	movs	r4, #1
    61ba:	e7dd      	b.n	6178 <flash_area_write+0x16>
		return -EINVAL;
    61bc:	f06f 0915 	mvn.w	r9, #21
    61c0:	e7f7      	b.n	61b2 <flash_area_write+0x50>

000061c2 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    61c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    61c6:	6883      	ldr	r3, [r0, #8]
    61c8:	428b      	cmp	r3, r1
    61ca:	d304      	bcc.n	61d6 <flash_area_erase+0x14>
    61cc:	1854      	adds	r4, r2, r1
    61ce:	42a3      	cmp	r3, r4
    61d0:	d220      	bcs.n	6214 <flash_area_erase+0x52>
    61d2:	2300      	movs	r3, #0
    61d4:	e000      	b.n	61d8 <flash_area_erase+0x16>
    61d6:	2300      	movs	r3, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    61d8:	b1f3      	cbz	r3, 6218 <flash_area_erase+0x56>
    61da:	4617      	mov	r7, r2
    61dc:	460e      	mov	r6, r1
    61de:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    61e0:	68c0      	ldr	r0, [r0, #12]
    61e2:	f7fe fd0b 	bl	4bfc <z_impl_device_get_binding>
    61e6:	4605      	mov	r5, r0
	const struct flash_driver_api *api = dev->driver_api;
    61e8:	6843      	ldr	r3, [r0, #4]
	return api->write_protection(dev, enable);
    61ea:	68db      	ldr	r3, [r3, #12]
    61ec:	2100      	movs	r1, #0
    61ee:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    61f0:	4680      	mov	r8, r0
    61f2:	b960      	cbnz	r0, 620e <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    61f4:	6861      	ldr	r1, [r4, #4]
    61f6:	4431      	add	r1, r6
	const struct flash_driver_api *api = dev->driver_api;
    61f8:	686b      	ldr	r3, [r5, #4]
	return api->erase(dev, offset, size);
    61fa:	689b      	ldr	r3, [r3, #8]
    61fc:	463a      	mov	r2, r7
    61fe:	4628      	mov	r0, r5
    6200:	4798      	blx	r3
    6202:	4680      	mov	r8, r0
	const struct flash_driver_api *api = dev->driver_api;
    6204:	686b      	ldr	r3, [r5, #4]
	return api->write_protection(dev, enable);
    6206:	68db      	ldr	r3, [r3, #12]
    6208:	2101      	movs	r1, #1
    620a:	4628      	mov	r0, r5
    620c:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    620e:	4640      	mov	r0, r8
    6210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6214:	2301      	movs	r3, #1
    6216:	e7df      	b.n	61d8 <flash_area_erase+0x16>
		return -EINVAL;
    6218:	f06f 0815 	mvn.w	r8, #21
    621c:	e7f7      	b.n	620e <flash_area_erase+0x4c>

0000621e <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
    621e:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    6220:	68c0      	ldr	r0, [r0, #12]
    6222:	f7fe fceb 	bl	4bfc <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;
    6226:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
    6228:	7d18      	ldrb	r0, [r3, #20]
    622a:	bd08      	pop	{r3, pc}

0000622c <clock_event_check_and_clean>:
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    622c:	f100 2250 	add.w	r2, r0, #1342197760	; 0x50005000
    6230:	6813      	ldr	r3, [r2, #0]
	bool ret = nrf_clock_event_check(evt) &&
    6232:	b143      	cbz	r3, 6246 <clock_event_check_and_clean+0x1a>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    6234:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6238:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    623c:	b2c9      	uxtb	r1, r1
    623e:	4219      	tst	r1, r3
    6240:	d007      	beq.n	6252 <clock_event_check_and_clean+0x26>
    6242:	2301      	movs	r3, #1
    6244:	e000      	b.n	6248 <clock_event_check_and_clean+0x1c>
    6246:	2300      	movs	r3, #0
	if (ret) {
    6248:	4618      	mov	r0, r3
    624a:	b10b      	cbz	r3, 6250 <clock_event_check_and_clean+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    624c:	2300      	movs	r3, #0
    624e:	6013      	str	r3, [r2, #0]
}
    6250:	4770      	bx	lr
	bool ret = nrf_clock_event_check(evt) &&
    6252:	2300      	movs	r3, #0
    6254:	e7f8      	b.n	6248 <clock_event_check_and_clean+0x1c>

00006256 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    6256:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    6258:	7a5a      	ldrb	r2, [r3, #9]
    625a:	b92a      	cbnz	r2, 6268 <get_status+0x12>
	if (data->ref > 0) {
    625c:	f993 3008 	ldrsb.w	r3, [r3, #8]
    6260:	2b00      	cmp	r3, #0
    6262:	dd03      	ble.n	626c <get_status+0x16>
		return CLOCK_CONTROL_STATUS_STARTING;
    6264:	2000      	movs	r0, #0
    6266:	4770      	bx	lr
		return CLOCK_CONTROL_STATUS_ON;
    6268:	2002      	movs	r0, #2
    626a:	4770      	bx	lr
	return CLOCK_CONTROL_STATUS_OFF;
    626c:	2001      	movs	r0, #1
}
    626e:	4770      	bx	lr

00006270 <clock_stop>:
{
    6270:	b570      	push	{r4, r5, r6, lr}
						dev->config->config_info;
    6272:	6803      	ldr	r3, [r0, #0]
	const struct nrf_clock_control_config *config =
    6274:	689e      	ldr	r6, [r3, #8]
	struct nrf_clock_control *data = dev->driver_data;
    6276:	6884      	ldr	r4, [r0, #8]
    6278:	f04f 0320 	mov.w	r3, #32
    627c:	f3ef 8511 	mrs	r5, BASEPRI
    6280:	f383 8811 	msr	BASEPRI, r3
    6284:	f3bf 8f6f 	isb	sy
	data->ref--;
    6288:	f994 3008 	ldrsb.w	r3, [r4, #8]
    628c:	3b01      	subs	r3, #1
    628e:	b25b      	sxtb	r3, r3
    6290:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    6292:	b9b3      	cbnz	r3, 62c2 <clock_stop+0x52>
	list->head = NULL;
    6294:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    6296:	6063      	str	r3, [r4, #4]
		do_stop =  (config->stop_handler) ?
    6298:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
    629a:	b10b      	cbz	r3, 62a0 <clock_stop+0x30>
    629c:	4798      	blx	r3
    629e:	b148      	cbz	r0, 62b4 <clock_stop+0x44>
			nrf_clock_task_trigger(config->stop_tsk);
    62a0:	7af3      	ldrb	r3, [r6, #11]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    62a2:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    62a6:	2201      	movs	r2, #1
    62a8:	601a      	str	r2, [r3, #0]
			nrf_clock_event_clear(config->started_evt);
    62aa:	8933      	ldrh	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    62ac:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    62b0:	2200      	movs	r2, #0
    62b2:	601a      	str	r2, [r3, #0]
		data->started = false;
    62b4:	2000      	movs	r0, #0
    62b6:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    62b8:	f385 8811 	msr	BASEPRI, r5
    62bc:	f3bf 8f6f 	isb	sy
}
    62c0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (data->ref < 0) {
    62c2:	2b00      	cmp	r3, #0
    62c4:	db01      	blt.n	62ca <clock_stop+0x5a>
	int err = 0;
    62c6:	2000      	movs	r0, #0
    62c8:	e7f6      	b.n	62b8 <clock_stop+0x48>
		data->ref = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	7223      	strb	r3, [r4, #8]
		err = -EALREADY;
    62ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
    62d2:	e7f1      	b.n	62b8 <clock_stop+0x48>

000062d4 <is_in_list>:
	return list->head;
    62d4:	6803      	ldr	r3, [r0, #0]
		if (item == node) {
    62d6:	428b      	cmp	r3, r1
    62d8:	d005      	beq.n	62e6 <is_in_list+0x12>
Z_GENLIST_PEEK_NEXT(slist, snode)
    62da:	b133      	cbz	r3, 62ea <is_in_list+0x16>
	return node->next;
    62dc:	681b      	ldr	r3, [r3, #0]
	} while (item);
    62de:	2b00      	cmp	r3, #0
    62e0:	d1f9      	bne.n	62d6 <is_in_list+0x2>
	return false;
    62e2:	2000      	movs	r0, #0
    62e4:	4770      	bx	lr
			return true;
    62e6:	2001      	movs	r0, #1
    62e8:	4770      	bx	lr
	return false;
    62ea:	2000      	movs	r0, #0
}
    62ec:	4770      	bx	lr

000062ee <clock_async_start>:
{
    62ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62f0:	4606      	mov	r6, r0
    62f2:	4615      	mov	r5, r2
						dev->config->config_info;
    62f4:	6803      	ldr	r3, [r0, #0]
	const struct nrf_clock_control_config *config =
    62f6:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    62f8:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    62fa:	f04f 0320 	mov.w	r3, #32
    62fe:	f3ef 8211 	mrs	r2, BASEPRI
    6302:	f383 8811 	msr	BASEPRI, r3
    6306:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    630a:	f994 3008 	ldrsb.w	r3, [r4, #8]
    630e:	3301      	adds	r3, #1
    6310:	b25b      	sxtb	r3, r3
    6312:	7223      	strb	r3, [r4, #8]
	__asm__ volatile(
    6314:	f382 8811 	msr	BASEPRI, r2
    6318:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    631c:	7a62      	ldrb	r2, [r4, #9]
    631e:	b12a      	cbz	r2, 632c <clock_async_start+0x3e>
		if (data) {
    6320:	b345      	cbz	r5, 6374 <clock_async_start+0x86>
			data->cb(dev, data->user_data);
    6322:	686b      	ldr	r3, [r5, #4]
    6324:	68a9      	ldr	r1, [r5, #8]
    6326:	4798      	blx	r3
	return 0;
    6328:	2000      	movs	r0, #0
}
    632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ref == 1) {
    632c:	2b01      	cmp	r3, #1
    632e:	d00d      	beq.n	634c <clock_async_start+0x5e>
		if (data) {
    6330:	b315      	cbz	r5, 6378 <clock_async_start+0x8a>
			if (is_in_list(&clk_data->list, &data->node)) {
    6332:	4629      	mov	r1, r5
    6334:	4620      	mov	r0, r4
    6336:	f7ff ffcd 	bl	62d4 <is_in_list>
    633a:	b9f8      	cbnz	r0, 637c <clock_async_start+0x8e>
	parent->next = child;
    633c:	2300      	movs	r3, #0
    633e:	602b      	str	r3, [r5, #0]
	return list->tail;
    6340:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6342:	b1a3      	cbz	r3, 636e <clock_async_start+0x80>
	parent->next = child;
    6344:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6346:	6065      	str	r5, [r4, #4]
	return 0;
    6348:	2000      	movs	r0, #0
    634a:	e7ee      	b.n	632a <clock_async_start+0x3c>
			do_start =  (config->start_handler) ?
    634c:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    634e:	b10b      	cbz	r3, 6354 <clock_async_start+0x66>
    6350:	4798      	blx	r3
    6352:	b128      	cbz	r0, 6360 <clock_async_start+0x72>
				nrf_clock_task_trigger(config->start_tsk);
    6354:	7abb      	ldrb	r3, [r7, #10]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6356:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    635a:	2201      	movs	r2, #1
    635c:	601a      	str	r2, [r3, #0]
    635e:	e7e7      	b.n	6330 <clock_async_start+0x42>
			} else if (data) {
    6360:	2d00      	cmp	r5, #0
    6362:	d0e5      	beq.n	6330 <clock_async_start+0x42>
				data->cb(dev, data->user_data);
    6364:	686b      	ldr	r3, [r5, #4]
    6366:	68a9      	ldr	r1, [r5, #8]
    6368:	4630      	mov	r0, r6
    636a:	4798      	blx	r3
    636c:	e7e0      	b.n	6330 <clock_async_start+0x42>
    636e:	6065      	str	r5, [r4, #4]
	list->head = node;
    6370:	6025      	str	r5, [r4, #0]
    6372:	e7da      	b.n	632a <clock_async_start+0x3c>
	return 0;
    6374:	2000      	movs	r0, #0
    6376:	e7d8      	b.n	632a <clock_async_start+0x3c>
    6378:	2000      	movs	r0, #0
    637a:	e7d6      	b.n	632a <clock_async_start+0x3c>
				return -EALREADY;
    637c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6380:	e7d3      	b.n	632a <clock_async_start+0x3c>

00006382 <clock_start>:
{
    6382:	b508      	push	{r3, lr}
	return clock_async_start(dev, sub_system, NULL);
    6384:	2200      	movs	r2, #0
    6386:	f7ff ffb2 	bl	62ee <clock_async_start>
}
    638a:	bd08      	pop	{r3, pc}

0000638c <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    638c:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    638e:	2000      	movs	r0, #0
    6390:	6018      	str	r0, [r3, #0]
	list->tail = NULL;
    6392:	6058      	str	r0, [r3, #4]
}
    6394:	4770      	bx	lr

00006396 <clkstarted_handle>:
{
    6396:	b538      	push	{r3, r4, r5, lr}
    6398:	4605      	mov	r5, r0
	struct nrf_clock_control *data = dev->driver_data;
    639a:	6884      	ldr	r4, [r0, #8]
	return list->head;
    639c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    639e:	b123      	cbz	r3, 63aa <clkstarted_handle+0x14>
	return node->next;
    63a0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    63a2:	6022      	str	r2, [r4, #0]
	return list->tail;
    63a4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    63a6:	428b      	cmp	r3, r1
    63a8:	d00f      	beq.n	63ca <clkstarted_handle+0x34>
	data->started = true;
    63aa:	2201      	movs	r2, #1
    63ac:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    63ae:	b173      	cbz	r3, 63ce <clkstarted_handle+0x38>
		async_data->cb(dev, async_data->user_data);
    63b0:	685a      	ldr	r2, [r3, #4]
    63b2:	6899      	ldr	r1, [r3, #8]
    63b4:	4628      	mov	r0, r5
    63b6:	4790      	blx	r2
	return list->head;
    63b8:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    63ba:	b143      	cbz	r3, 63ce <clkstarted_handle+0x38>
	return node->next;
    63bc:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    63be:	6022      	str	r2, [r4, #0]
	return list->tail;
    63c0:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    63c2:	4299      	cmp	r1, r3
    63c4:	d1f3      	bne.n	63ae <clkstarted_handle+0x18>
	list->tail = node;
    63c6:	6062      	str	r2, [r4, #4]
    63c8:	e7f1      	b.n	63ae <clkstarted_handle+0x18>
    63ca:	6062      	str	r2, [r4, #4]
    63cc:	e7ed      	b.n	63aa <clkstarted_handle+0x14>
}
    63ce:	bd38      	pop	{r3, r4, r5, pc}

000063d0 <hfclk_init>:
{
    63d0:	b510      	push	{r4, lr}
    63d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    63d4:	2200      	movs	r2, #0
    63d6:	2101      	movs	r1, #1
    63d8:	2005      	movs	r0, #5
    63da:	f7fc fc53 	bl	2c84 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    63de:	2005      	movs	r0, #5
    63e0:	f7fc fc40 	bl	2c64 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    63e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    63e8:	2202      	movs	r2, #2
    63ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    63ee:	2203      	movs	r2, #3
    63f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    63f4:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    63f6:	2000      	movs	r0, #0
    63f8:	6018      	str	r0, [r3, #0]
	list->tail = NULL;
    63fa:	6058      	str	r0, [r3, #4]
}
    63fc:	bd10      	pop	{r4, pc}

000063fe <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    63fe:	4770      	bx	lr

00006400 <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    6400:	4770      	bx	lr

00006402 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    6402:	1a40      	subs	r0, r0, r1
}
    6404:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6408:	4770      	bx	lr

0000640a <console_write>:
{
    640a:	b570      	push	{r4, r5, r6, lr}
    640c:	4606      	mov	r6, r0
    640e:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    6410:	2400      	movs	r4, #0
    6412:	42ac      	cmp	r4, r5
    6414:	da07      	bge.n	6426 <console_write+0x1c>
		if (console_out((int)str[i]) == EOF) {
    6416:	5d30      	ldrb	r0, [r6, r4]
    6418:	f7fb fe8e 	bl	2138 <console_out>
    641c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6420:	d001      	beq.n	6426 <console_write+0x1c>
	for (i = 0; i < cnt; i++) {
    6422:	3401      	adds	r4, #1
    6424:	e7f5      	b.n	6412 <console_write+0x8>
}
    6426:	bd70      	pop	{r4, r5, r6, pc}

00006428 <console_read>:
{
    6428:	b570      	push	{r4, r5, r6, lr}
    642a:	b082      	sub	sp, #8
    642c:	4605      	mov	r5, r0
    642e:	460c      	mov	r4, r1
    6430:	4616      	mov	r6, r2
	len = boot_uart_fifo_getline(&line);
    6432:	a801      	add	r0, sp, #4
    6434:	f7fb fd82 	bl	1f3c <boot_uart_fifo_getline>
	if (line == NULL) {
    6438:	9901      	ldr	r1, [sp, #4]
    643a:	b171      	cbz	r1, 645a <console_read+0x32>
	if (len > str_size - 1) {
    643c:	3c01      	subs	r4, #1
    643e:	4284      	cmp	r4, r0
    6440:	db00      	blt.n	6444 <console_read+0x1c>
	len = boot_uart_fifo_getline(&line);
    6442:	4604      	mov	r4, r0
	memcpy(str, line, len);
    6444:	4622      	mov	r2, r4
    6446:	4628      	mov	r0, r5
    6448:	f000 f8fd 	bl	6646 <memcpy>
	str[len] = '\0';
    644c:	2300      	movs	r3, #0
    644e:	552b      	strb	r3, [r5, r4]
	*newline = 1;
    6450:	2301      	movs	r3, #1
    6452:	6033      	str	r3, [r6, #0]
	return len + 1;
    6454:	18e0      	adds	r0, r4, r3
}
    6456:	b002      	add	sp, #8
    6458:	bd70      	pop	{r4, r5, r6, pc}
		*newline = 0;
    645a:	2000      	movs	r0, #0
    645c:	6030      	str	r0, [r6, #0]
		return 0;
    645e:	e7fa      	b.n	6456 <console_read+0x2e>

00006460 <bs_list_img_ver>:
{
    6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6462:	4604      	mov	r4, r0
    6464:	4616      	mov	r6, r2
    off = u32toa(dst, ver->iv_major);
    6466:	7811      	ldrb	r1, [r2, #0]
    6468:	f7fb fe9a 	bl	21a0 <u32toa>
    dst[off++] = '.';
    646c:	1c45      	adds	r5, r0, #1
    646e:	272e      	movs	r7, #46	; 0x2e
    6470:	5427      	strb	r7, [r4, r0]
    off += u32toa(dst + off, ver->iv_minor);
    6472:	7871      	ldrb	r1, [r6, #1]
    6474:	1960      	adds	r0, r4, r5
    6476:	f7fb fe93 	bl	21a0 <u32toa>
    647a:	4428      	add	r0, r5
    dst[off++] = '.';
    647c:	1c45      	adds	r5, r0, #1
    647e:	5427      	strb	r7, [r4, r0]
    off += u32toa(dst + off, ver->iv_revision);
    6480:	8871      	ldrh	r1, [r6, #2]
    6482:	1960      	adds	r0, r4, r5
    6484:	f7fb fe8c 	bl	21a0 <u32toa>
    6488:	4405      	add	r5, r0
    dst[off++] = '.';
    648a:	1c68      	adds	r0, r5, #1
    648c:	5567      	strb	r7, [r4, r5]
    off += u32toa(dst + off, ver->iv_build_num);
    648e:	6871      	ldr	r1, [r6, #4]
    6490:	4420      	add	r0, r4
    6492:	f7fb fe85 	bl	21a0 <u32toa>
}
    6496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006498 <boot_serial_in_dec>:
{
    6498:	b5f0      	push	{r4, r5, r6, r7, lr}
    649a:	b085      	sub	sp, #20
    649c:	4616      	mov	r6, r2
    649e:	461c      	mov	r4, r3
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    64a0:	681d      	ldr	r5, [r3, #0]
    64a2:	3902      	subs	r1, #2
    64a4:	9100      	str	r1, [sp, #0]
    64a6:	4603      	mov	r3, r0
    64a8:	aa03      	add	r2, sp, #12
    64aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    64ac:	1b49      	subs	r1, r1, r5
    64ae:	1970      	adds	r0, r6, r5
    64b0:	f7fb f9fe 	bl	18b0 <base64_decode>
    if (err) {
    64b4:	bb30      	cbnz	r0, 6504 <boot_serial_in_dec+0x6c>
    64b6:	4607      	mov	r7, r0
    *out_off += rc;
    64b8:	6823      	ldr	r3, [r4, #0]
    64ba:	9a03      	ldr	r2, [sp, #12]
    64bc:	4413      	add	r3, r2
    64be:	6023      	str	r3, [r4, #0]
    if (*out_off <= sizeof(uint16_t)) {
    64c0:	2b02      	cmp	r3, #2
    64c2:	d907      	bls.n	64d4 <boot_serial_in_dec+0x3c>
    len = ntohs(*(uint16_t *)out);
    64c4:	8832      	ldrh	r2, [r6, #0]
    64c6:	0a15      	lsrs	r5, r2, #8
    64c8:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    64cc:	b2ad      	uxth	r5, r5
    if (len != *out_off - sizeof(uint16_t)) {
    64ce:	3b02      	subs	r3, #2
    64d0:	429d      	cmp	r5, r3
    64d2:	d002      	beq.n	64da <boot_serial_in_dec+0x42>
}
    64d4:	4638      	mov	r0, r7
    64d6:	b005      	add	sp, #20
    64d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    out += sizeof(uint16_t);
    64da:	3602      	adds	r6, #2
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    64dc:	2301      	movs	r3, #1
    64de:	9300      	str	r3, [sp, #0]
    64e0:	2300      	movs	r3, #0
    64e2:	f241 0221 	movw	r2, #4129	; 0x1021
    64e6:	4629      	mov	r1, r5
    64e8:	4630      	mov	r0, r6
    64ea:	f7ff fb13 	bl	5b14 <crc16>
    if (crc || len <= sizeof(crc)) {
    64ee:	2800      	cmp	r0, #0
    64f0:	d1f0      	bne.n	64d4 <boot_serial_in_dec+0x3c>
    64f2:	2d02      	cmp	r5, #2
    64f4:	d9ee      	bls.n	64d4 <boot_serial_in_dec+0x3c>
    *out_off -= sizeof(crc);
    64f6:	6823      	ldr	r3, [r4, #0]
    64f8:	3b02      	subs	r3, #2
    64fa:	6023      	str	r3, [r4, #0]
    out[*out_off] = '\0';
    64fc:	2200      	movs	r2, #0
    64fe:	54f2      	strb	r2, [r6, r3]
    return 1;
    6500:	2701      	movs	r7, #1
    6502:	e7e7      	b.n	64d4 <boot_serial_in_dec+0x3c>
        return -1;
    6504:	f04f 37ff 	mov.w	r7, #4294967295
    6508:	e7e4      	b.n	64d4 <boot_serial_in_dec+0x3c>

0000650a <bs_reset>:
{
    650a:	b508      	push	{r3, lr}
    bs_empty_rsp(buf, len);
    650c:	f7fb ff34 	bl	2378 <bs_empty_rsp>
	return z_impl_k_sleep(ms);
    6510:	20fa      	movs	r0, #250	; 0xfa
    6512:	f002 fe54 	bl	91be <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    6516:	2001      	movs	r0, #1
    6518:	f7fb fbec 	bl	1cf4 <sys_reboot>
}
    651c:	bd08      	pop	{r3, pc}

0000651e <z_irq_spurious>:
 * See z_arm_reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
    651e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	z_arm_reserved();
    6520:	f7fc fb5a 	bl	2bd8 <z_arm_bus_fault>
}
    6524:	bd08      	pop	{r3, pc}

00006526 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6526:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6528:	f002 fdbb 	bl	90a2 <z_fatal_error>
}
    652c:	bd08      	pop	{r3, pc}

0000652e <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    652e:	b508      	push	{r3, lr}
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    6530:	4601      	mov	r1, r0
    6532:	6800      	ldr	r0, [r0, #0]
    6534:	f7ff fff7 	bl	6526 <z_arm_fatal_error>
}
    6538:	bd08      	pop	{r3, pc}

0000653a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    653a:	b508      	push	{r3, lr}
	handler();
    653c:	f7fc fb60 	bl	2c00 <z_SysNmiOnReset>
	z_arm_exc_exit();
    6540:	f7fc fb02 	bl	2b48 <z_arm_exc_exit>
}
    6544:	bd08      	pop	{r3, pc}

00006546 <memory_fault_recoverable>:
}
    6546:	2000      	movs	r0, #0
    6548:	4770      	bx	lr

0000654a <fault_handle>:
{
    654a:	b508      	push	{r3, lr}
	*recoverable = false;
    654c:	2300      	movs	r3, #0
    654e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6550:	3903      	subs	r1, #3
    6552:	2903      	cmp	r1, #3
    6554:	d812      	bhi.n	657c <fault_handle+0x32>
    6556:	e8df f001 	tbb	[pc, r1]
    655a:	0602      	.short	0x0602
    655c:	0e0a      	.short	0x0e0a
		reason = hard_fault(esf, recoverable);
    655e:	4611      	mov	r1, r2
    6560:	f7fc fc34 	bl	2dcc <hard_fault>
}
    6564:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6566:	2100      	movs	r1, #0
    6568:	f7fc fbd0 	bl	2d0c <mem_manage_fault>
		break;
    656c:	e7fa      	b.n	6564 <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    656e:	2100      	movs	r1, #0
    6570:	f7fc fbf0 	bl	2d54 <bus_fault>
		break;
    6574:	e7f6      	b.n	6564 <fault_handle+0x1a>
		reason = usage_fault(esf);
    6576:	f7fc fc17 	bl	2da8 <usage_fault>
		break;
    657a:	e7f3      	b.n	6564 <fault_handle+0x1a>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    657c:	2000      	movs	r0, #0
	return reason;
    657e:	e7f1      	b.n	6564 <fault_handle+0x1a>

00006580 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    6580:	b508      	push	{r3, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    6582:	2100      	movs	r1, #0
    6584:	4668      	mov	r0, sp
    6586:	f000 f82e 	bl	65e6 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    658a:	bd08      	pop	{r3, pc}

0000658c <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    658c:	6843      	ldr	r3, [r0, #4]
		&&
    658e:	2b1f      	cmp	r3, #31
    6590:	d90a      	bls.n	65a8 <mpu_partition_is_valid+0x1c>
		&&
    6592:	f013 0f1f 	tst.w	r3, #31
    6596:	d001      	beq.n	659c <mpu_partition_is_valid+0x10>
		&&
    6598:	2000      	movs	r0, #0
    659a:	4770      	bx	lr
		((part->start &
    659c:	6803      	ldr	r3, [r0, #0]
		&&
    659e:	f013 0f1f 	tst.w	r3, #31
    65a2:	d003      	beq.n	65ac <mpu_partition_is_valid+0x20>
    65a4:	2000      	movs	r0, #0
    65a6:	4770      	bx	lr
    65a8:	2000      	movs	r0, #0
    65aa:	4770      	bx	lr
    65ac:	2001      	movs	r0, #1
}
    65ae:	4770      	bx	lr

000065b0 <mpu_configure_region>:
{
    65b0:	b530      	push	{r4, r5, lr}
    65b2:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    65b4:	680b      	ldr	r3, [r1, #0]
    65b6:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    65b8:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    65ba:	890d      	ldrh	r5, [r1, #8]
    65bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    65c0:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    65c4:	7a89      	ldrb	r1, [r1, #10]
    65c6:	f361 1247 	bfi	r2, r1, #5, #3
    65ca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    65ce:	f023 031f 	bic.w	r3, r3, #31
    65d2:	4423      	add	r3, r4
    65d4:	3b01      	subs	r3, #1
    65d6:	f023 031f 	bic.w	r3, r3, #31
    65da:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    65dc:	4669      	mov	r1, sp
    65de:	f7fc fcb9 	bl	2f54 <region_allocate_and_init>
}
    65e2:	b005      	add	sp, #20
    65e4:	bd30      	pop	{r4, r5, pc}

000065e6 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    65e6:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    65e8:	f7fc fdc8 	bl	317c <mpu_configure_dynamic_mpu_regions>
}
    65ec:	bd08      	pop	{r3, pc}

000065ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    65ee:	4603      	mov	r3, r0
	size_t n = 0;
    65f0:	2000      	movs	r0, #0

	while (*s != '\0') {
    65f2:	e001      	b.n	65f8 <strlen+0xa>
		s++;
    65f4:	3301      	adds	r3, #1
		n++;
    65f6:	3001      	adds	r0, #1
	while (*s != '\0') {
    65f8:	781a      	ldrb	r2, [r3, #0]
    65fa:	2a00      	cmp	r2, #0
    65fc:	d1fa      	bne.n	65f4 <strlen+0x6>
	}

	return n;
}
    65fe:	4770      	bx	lr

00006600 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6600:	e001      	b.n	6606 <strcmp+0x6>
		s1++;
    6602:	3001      	adds	r0, #1
		s2++;
    6604:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6606:	7803      	ldrb	r3, [r0, #0]
    6608:	780a      	ldrb	r2, [r1, #0]
    660a:	4293      	cmp	r3, r2
    660c:	d101      	bne.n	6612 <strcmp+0x12>
    660e:	2b00      	cmp	r3, #0
    6610:	d1f7      	bne.n	6602 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    6612:	1a98      	subs	r0, r3, r2
    6614:	4770      	bx	lr

00006616 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6616:	b182      	cbz	r2, 663a <memcmp+0x24>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6618:	1e53      	subs	r3, r2, #1
    661a:	d010      	beq.n	663e <memcmp+0x28>
{
    661c:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    661e:	7804      	ldrb	r4, [r0, #0]
    6620:	780a      	ldrb	r2, [r1, #0]
    6622:	4294      	cmp	r4, r2
    6624:	d103      	bne.n	662e <memcmp+0x18>
		c1++;
    6626:	3001      	adds	r0, #1
		c2++;
    6628:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    662a:	3b01      	subs	r3, #1
    662c:	d1f7      	bne.n	661e <memcmp+0x8>
	}

	return *c1 - *c2;
    662e:	7800      	ldrb	r0, [r0, #0]
    6630:	780b      	ldrb	r3, [r1, #0]
    6632:	1ac0      	subs	r0, r0, r3
}
    6634:	f85d 4b04 	ldr.w	r4, [sp], #4
    6638:	4770      	bx	lr
		return 0;
    663a:	2000      	movs	r0, #0
    663c:	4770      	bx	lr
	return *c1 - *c2;
    663e:	7800      	ldrb	r0, [r0, #0]
    6640:	780b      	ldrb	r3, [r1, #0]
    6642:	1ac0      	subs	r0, r0, r3
}
    6644:	4770      	bx	lr

00006646 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    6646:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6648:	ea80 0301 	eor.w	r3, r0, r1
    664c:	f013 0f03 	tst.w	r3, #3
    6650:	d001      	beq.n	6656 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    6652:	4603      	mov	r3, r0
    6654:	e017      	b.n	6686 <memcpy+0x40>
    6656:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    6658:	f013 0f03 	tst.w	r3, #3
    665c:	d00b      	beq.n	6676 <memcpy+0x30>
			if (n == 0) {
    665e:	b1a2      	cbz	r2, 668a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    6660:	780c      	ldrb	r4, [r1, #0]
    6662:	701c      	strb	r4, [r3, #0]
			n--;
    6664:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    6666:	3101      	adds	r1, #1
    6668:	3301      	adds	r3, #1
    666a:	e7f5      	b.n	6658 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    666c:	680c      	ldr	r4, [r1, #0]
    666e:	601c      	str	r4, [r3, #0]
			n -= sizeof(mem_word_t);
    6670:	3a04      	subs	r2, #4
			*(d_word++) = *(s_word++);
    6672:	3104      	adds	r1, #4
    6674:	3304      	adds	r3, #4
		while (n >= sizeof(mem_word_t)) {
    6676:	2a03      	cmp	r2, #3
    6678:	d8f8      	bhi.n	666c <memcpy+0x26>
    667a:	e004      	b.n	6686 <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    667c:	780c      	ldrb	r4, [r1, #0]
    667e:	701c      	strb	r4, [r3, #0]
		n--;
    6680:	3a01      	subs	r2, #1
		*(d_byte++) = *(s_byte++);
    6682:	3101      	adds	r1, #1
    6684:	3301      	adds	r3, #1
	while (n > 0) {
    6686:	2a00      	cmp	r2, #0
    6688:	d1f8      	bne.n	667c <memcpy+0x36>
	}

	return d;
}
    668a:	f85d 4b04 	ldr.w	r4, [sp], #4
    668e:	4770      	bx	lr

00006690 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    6690:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6692:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6694:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6696:	f013 0f03 	tst.w	r3, #3
    669a:	d004      	beq.n	66a6 <memset+0x16>
		if (n == 0) {
    669c:	b1a2      	cbz	r2, 66c8 <memset+0x38>
			return buf;
		}
		*(d_byte++) = c_byte;
    669e:	701c      	strb	r4, [r3, #0]
		n--;
    66a0:	3a01      	subs	r2, #1
		*(d_byte++) = c_byte;
    66a2:	3301      	adds	r3, #1
    66a4:	e7f7      	b.n	6696 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    66a6:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    66a8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    66ac:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    66b0:	e002      	b.n	66b8 <memset+0x28>
		*(d_word++) = c_word;
    66b2:	6019      	str	r1, [r3, #0]
		n -= sizeof(mem_word_t);
    66b4:	3a04      	subs	r2, #4
		*(d_word++) = c_word;
    66b6:	3304      	adds	r3, #4
	while (n >= sizeof(mem_word_t)) {
    66b8:	2a03      	cmp	r2, #3
    66ba:	d8fa      	bhi.n	66b2 <memset+0x22>
    66bc:	e002      	b.n	66c4 <memset+0x34>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    66be:	701c      	strb	r4, [r3, #0]
		n--;
    66c0:	3a01      	subs	r2, #1
		*(d_byte++) = c_byte;
    66c2:	3301      	adds	r3, #1
	while (n > 0) {
    66c4:	2a00      	cmp	r2, #0
    66c6:	d1fa      	bne.n	66be <memset+0x2e>
	}

	return buf;
}
    66c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    66cc:	4770      	bx	lr

000066ce <gpio_nrfx_write>:
{
    66ce:	b410      	push	{r4}
	return port->config->config_info;
    66d0:	6804      	ldr	r4, [r0, #0]
    66d2:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66d4:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    66d6:	6880      	ldr	r0, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    66d8:	2901      	cmp	r1, #1
    66da:	d011      	beq.n	6700 <gpio_nrfx_write+0x32>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    66dc:	3300      	adds	r3, #0
    66de:	bf18      	it	ne
    66e0:	2301      	movne	r3, #1
    66e2:	69c1      	ldr	r1, [r0, #28]
    66e4:	40d1      	lsrs	r1, r2
    66e6:	f001 0101 	and.w	r1, r1, #1
    66ea:	b2c9      	uxtb	r1, r1
    66ec:	428b      	cmp	r3, r1
    66ee:	d00b      	beq.n	6708 <gpio_nrfx_write+0x3a>
			nrf_gpio_port_out_set(reg, BIT(pin));
    66f0:	2301      	movs	r3, #1
    66f2:	fa03 f202 	lsl.w	r2, r3, r2
    p_reg->OUTSET = set_mask;
    66f6:	60a2      	str	r2, [r4, #8]
}
    66f8:	2000      	movs	r0, #0
    66fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    66fe:	4770      	bx	lr
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    6700:	69c2      	ldr	r2, [r0, #28]
    6702:	4053      	eors	r3, r2
    p_reg->OUT = value;
    6704:	6063      	str	r3, [r4, #4]
    6706:	e7f7      	b.n	66f8 <gpio_nrfx_write+0x2a>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    6708:	2301      	movs	r3, #1
    670a:	fa03 f202 	lsl.w	r2, r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    670e:	60e2      	str	r2, [r4, #12]
    6710:	e7f2      	b.n	66f8 <gpio_nrfx_write+0x2a>

00006712 <gpio_nrfx_read>:
{
    6712:	b4f0      	push	{r4, r5, r6, r7}
	return port->config->config_info;
    6714:	6804      	ldr	r4, [r0, #0]
    6716:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6718:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    671a:	6886      	ldr	r6, [r0, #8]
    return p_reg->DIR;
    671c:	6967      	ldr	r7, [r4, #20]
    return p_reg->IN;
    671e:	6925      	ldr	r5, [r4, #16]
    return p_reg->OUT;
    6720:	6860      	ldr	r0, [r4, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6722:	4068      	eors	r0, r5
    6724:	4038      	ands	r0, r7
    6726:	4068      	eors	r0, r5
    6728:	69f4      	ldr	r4, [r6, #28]
    672a:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    672c:	2901      	cmp	r1, #1
    672e:	d006      	beq.n	673e <gpio_nrfx_read+0x2c>
		*value = (port_val & BIT(pin)) ? 1 : 0;
    6730:	40d0      	lsrs	r0, r2
    6732:	f000 0001 	and.w	r0, r0, #1
    6736:	6018      	str	r0, [r3, #0]
}
    6738:	2000      	movs	r0, #0
    673a:	bcf0      	pop	{r4, r5, r6, r7}
    673c:	4770      	bx	lr
		*value = port_val;
    673e:	6018      	str	r0, [r3, #0]
    6740:	e7fa      	b.n	6738 <gpio_nrfx_read+0x26>

00006742 <gpio_nrfx_manage_callback>:
{
    6742:	b430      	push	{r4, r5}
	return port->driver_data;
    6744:	6885      	ldr	r5, [r0, #8]
	return list->head;
    6746:	682b      	ldr	r3, [r5, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6748:	b1d3      	cbz	r3, 6780 <gpio_nrfx_manage_callback+0x3e>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    674a:	460c      	mov	r4, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    674c:	2000      	movs	r0, #0
    674e:	b1b3      	cbz	r3, 677e <gpio_nrfx_manage_callback+0x3c>
    6750:	429c      	cmp	r4, r3
    6752:	d002      	beq.n	675a <gpio_nrfx_manage_callback+0x18>
    6754:	4618      	mov	r0, r3
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	e7f9      	b.n	674e <gpio_nrfx_manage_callback+0xc>
Z_GENLIST_REMOVE(slist, snode)
    675a:	b138      	cbz	r0, 676c <gpio_nrfx_manage_callback+0x2a>
	return node->next;
    675c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    675e:	6003      	str	r3, [r0, #0]
	return list->tail;
    6760:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6762:	4299      	cmp	r1, r3
    6764:	d009      	beq.n	677a <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
    6766:	2300      	movs	r3, #0
    6768:	600b      	str	r3, [r1, #0]
    676a:	e009      	b.n	6780 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
    676c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    676e:	602b      	str	r3, [r5, #0]
	return list->tail;
    6770:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6772:	4281      	cmp	r1, r0
    6774:	d1f7      	bne.n	6766 <gpio_nrfx_manage_callback+0x24>
	list->tail = node;
    6776:	606b      	str	r3, [r5, #4]
    6778:	e7f5      	b.n	6766 <gpio_nrfx_manage_callback+0x24>
    677a:	6068      	str	r0, [r5, #4]
    677c:	e7f3      	b.n	6766 <gpio_nrfx_manage_callback+0x24>
			if (!set) {
    677e:	b152      	cbz	r2, 6796 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
			}
		}
	}

	if (set) {
    6780:	b162      	cbz	r2, 679c <gpio_nrfx_manage_callback+0x5a>
	return list->head;
    6782:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    6784:	600b      	str	r3, [r1, #0]
	list->head = node;
    6786:	6029      	str	r1, [r5, #0]
	return list->tail;
    6788:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    678a:	b10b      	cbz	r3, 6790 <gpio_nrfx_manage_callback+0x4e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    678c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    678e:	e006      	b.n	679e <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    6790:	6069      	str	r1, [r5, #4]
    6792:	2000      	movs	r0, #0
    6794:	e003      	b.n	679e <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    6796:	f06f 0015 	mvn.w	r0, #21
    679a:	e000      	b.n	679e <gpio_nrfx_manage_callback+0x5c>
	return 0;
    679c:	2000      	movs	r0, #0
}
    679e:	bc30      	pop	{r4, r5}
    67a0:	4770      	bx	lr

000067a2 <gpio_nrfx_pin_manage_callback>:
{
    67a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a6:	4606      	mov	r6, r0
    67a8:	4698      	mov	r8, r3
	return port->driver_data;
    67aa:	6885      	ldr	r5, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    67ac:	2901      	cmp	r1, #1
    67ae:	d003      	beq.n	67b8 <gpio_nrfx_pin_manage_callback+0x16>
		from_pin = pin;
    67b0:	b2d4      	uxtb	r4, r2
		to_pin   = pin;
    67b2:	4627      	mov	r7, r4
	int res = 0;
    67b4:	2300      	movs	r3, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    67b6:	e010      	b.n	67da <gpio_nrfx_pin_manage_callback+0x38>
		to_pin   = 31U;
    67b8:	271f      	movs	r7, #31
		from_pin = 0U;
    67ba:	2400      	movs	r4, #0
    67bc:	e7fa      	b.n	67b4 <gpio_nrfx_pin_manage_callback+0x12>
		WRITE_BIT(data->int_en, curr_pin, enable);
    67be:	68eb      	ldr	r3, [r5, #12]
    67c0:	2201      	movs	r2, #1
    67c2:	40a2      	lsls	r2, r4
    67c4:	ea23 0302 	bic.w	r3, r3, r2
    67c8:	60eb      	str	r3, [r5, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    67ca:	4621      	mov	r1, r4
    67cc:	4630      	mov	r0, r6
    67ce:	f7fc fda3 	bl	3318 <gpiote_pin_int_cfg>
		if (res != 0) {
    67d2:	4603      	mov	r3, r0
    67d4:	b958      	cbnz	r0, 67ee <gpio_nrfx_pin_manage_callback+0x4c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    67d6:	3401      	adds	r4, #1
    67d8:	b2e4      	uxtb	r4, r4
    67da:	42a7      	cmp	r7, r4
    67dc:	d307      	bcc.n	67ee <gpio_nrfx_pin_manage_callback+0x4c>
		WRITE_BIT(data->int_en, curr_pin, enable);
    67de:	f1b8 0f00 	cmp.w	r8, #0
    67e2:	d0ec      	beq.n	67be <gpio_nrfx_pin_manage_callback+0x1c>
    67e4:	68eb      	ldr	r3, [r5, #12]
    67e6:	2201      	movs	r2, #1
    67e8:	40a2      	lsls	r2, r4
    67ea:	4313      	orrs	r3, r2
    67ec:	e7ec      	b.n	67c8 <gpio_nrfx_pin_manage_callback+0x26>
}
    67ee:	4618      	mov	r0, r3
    67f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067f4 <gpio_nrfx_pin_enable_callback>:
{
    67f4:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, true);
    67f6:	2301      	movs	r3, #1
    67f8:	f7ff ffd3 	bl	67a2 <gpio_nrfx_pin_manage_callback>
}
    67fc:	bd08      	pop	{r3, pc}

000067fe <gpio_nrfx_pin_disable_callback>:
{
    67fe:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, false);
    6800:	2300      	movs	r3, #0
    6802:	f7ff ffce 	bl	67a2 <gpio_nrfx_pin_manage_callback>
}
    6806:	bd08      	pop	{r3, pc}

00006808 <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(u32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    6808:	684b      	ldr	r3, [r1, #4]
    680a:	4403      	add	r3, r0
    680c:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    680e:	680b      	ldr	r3, [r1, #0]
    6810:	4403      	add	r3, r0
    6812:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    6814:	688b      	ldr	r3, [r1, #8]
    6816:	1a1b      	subs	r3, r3, r0
    6818:	608b      	str	r3, [r1, #8]
}
    681a:	4770      	bx	lr

0000681c <erase_op>:
{
    681c:	b538      	push	{r3, r4, r5, lr}
    681e:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    6820:	f002 fc27 	bl	9072 <nrfx_nvmc_flash_page_size_get>
    6824:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    6826:	6860      	ldr	r0, [r4, #4]
    6828:	f7fe f9b2 	bl	4b90 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    682c:	68a3      	ldr	r3, [r4, #8]
    682e:	1b5b      	subs	r3, r3, r5
    6830:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    6832:	6862      	ldr	r2, [r4, #4]
    6834:	442a      	add	r2, r5
    6836:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    6838:	2b00      	cmp	r3, #0
    683a:	d1f4      	bne.n	6826 <erase_op+0xa>
}
    683c:	2000      	movs	r0, #0
    683e:	bd38      	pop	{r3, r4, r5, pc}

00006840 <erase>:

	return FLASH_OP_DONE;
}

static int erase(u32_t addr, u32_t size)
{
    6840:	b500      	push	{lr}
    6842:	b085      	sub	sp, #20
	struct flash_context context = {
    6844:	2300      	movs	r3, #0
    6846:	9301      	str	r3, [sp, #4]
    6848:	9002      	str	r0, [sp, #8]
    684a:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
    684c:	a801      	add	r0, sp, #4
    684e:	f7ff ffe5 	bl	681c <erase_op>
}
    6852:	b005      	add	sp, #20
    6854:	f85d fb04 	ldr.w	pc, [sp], #4

00006858 <write_op>:
{
    6858:	b538      	push	{r3, r4, r5, lr}
    685a:	4604      	mov	r4, r0
	if (!is_aligned_32(w_ctx->flash_addr)) {
    685c:	6840      	ldr	r0, [r0, #4]
    685e:	f010 0303 	ands.w	r3, r0, #3
    6862:	d017      	beq.n	6894 <write_op+0x3c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    6864:	f1c3 0304 	rsb	r3, r3, #4
		if (count > w_ctx->len) {
    6868:	68a5      	ldr	r5, [r4, #8]
    686a:	429d      	cmp	r5, r3
    686c:	d300      	bcc.n	6870 <write_op+0x18>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    686e:	461d      	mov	r5, r3
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    6870:	462a      	mov	r2, r5
    6872:	6821      	ldr	r1, [r4, #0]
    6874:	f002 fbc4 	bl	9000 <nrfx_nvmc_bytes_write>
		shift_write_context(count, w_ctx);
    6878:	4621      	mov	r1, r4
    687a:	4628      	mov	r0, r5
    687c:	f7ff ffc4 	bl	6808 <shift_write_context>
    6880:	e008      	b.n	6894 <write_op+0x3c>
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    6882:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    6884:	6819      	ldr	r1, [r3, #0]
    6886:	6860      	ldr	r0, [r4, #4]
    6888:	f002 fbae 	bl	8fe8 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(u32_t), w_ctx);
    688c:	4621      	mov	r1, r4
    688e:	2004      	movs	r0, #4
    6890:	f7ff ffba 	bl	6808 <shift_write_context>
	while (w_ctx->len >= sizeof(u32_t)) {
    6894:	68a2      	ldr	r2, [r4, #8]
    6896:	2a03      	cmp	r2, #3
    6898:	d8f3      	bhi.n	6882 <write_op+0x2a>
	if (w_ctx->len) {
    689a:	b91a      	cbnz	r2, 68a4 <write_op+0x4c>
	nvmc_wait_ready();
    689c:	f7fc ff58 	bl	3750 <nvmc_wait_ready>
}
    68a0:	2000      	movs	r0, #0
    68a2:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    68a4:	6821      	ldr	r1, [r4, #0]
    68a6:	6860      	ldr	r0, [r4, #4]
    68a8:	f002 fbaa 	bl	9000 <nrfx_nvmc_bytes_write>
		shift_write_context(w_ctx->len, w_ctx);
    68ac:	4621      	mov	r1, r4
    68ae:	68a0      	ldr	r0, [r4, #8]
    68b0:	f7ff ffaa 	bl	6808 <shift_write_context>
    68b4:	e7f2      	b.n	689c <write_op+0x44>

000068b6 <write>:

static int write(off_t addr, const void *data, size_t len)
{
    68b6:	b500      	push	{lr}
    68b8:	b085      	sub	sp, #20
	struct flash_context context = {
    68ba:	9101      	str	r1, [sp, #4]
    68bc:	9002      	str	r0, [sp, #8]
    68be:	9203      	str	r2, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
    68c0:	a801      	add	r0, sp, #4
    68c2:	f7ff ffc9 	bl	6858 <write_op>
}
    68c6:	b005      	add	sp, #20
    68c8:	f85d fb04 	ldr.w	pc, [sp], #4

000068cc <flash_nrf_read>:
{
    68cc:	b570      	push	{r4, r5, r6, lr}
    68ce:	460c      	mov	r4, r1
    68d0:	4616      	mov	r6, r2
    68d2:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    68d4:	f002 fbc9 	bl	906a <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
    68d8:	42a0      	cmp	r0, r4
    68da:	d908      	bls.n	68ee <flash_nrf_read+0x22>
    68dc:	2c00      	cmp	r4, #0
    68de:	db0b      	blt.n	68f8 <flash_nrf_read+0x2c>
	    addr < DT_FLASH_BASE_ADDRESS ||
    68e0:	4285      	cmp	r5, r0
    68e2:	d80b      	bhi.n	68fc <flash_nrf_read+0x30>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
    68e4:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    68e6:	4298      	cmp	r0, r3
    68e8:	d30a      	bcc.n	6900 <flash_nrf_read+0x34>
	return is_regular_addr_valid(addr, len) ||
    68ea:	2301      	movs	r3, #1
    68ec:	e000      	b.n	68f0 <flash_nrf_read+0x24>
    68ee:	2300      	movs	r3, #0
	if (!is_addr_valid(addr, len)) {
    68f0:	b17b      	cbz	r3, 6912 <flash_nrf_read+0x46>
	if (!len) {
    68f2:	b93d      	cbnz	r5, 6904 <flash_nrf_read+0x38>
		return 0;
    68f4:	2000      	movs	r0, #0
}
    68f6:	bd70      	pop	{r4, r5, r6, pc}
	return is_regular_addr_valid(addr, len) ||
    68f8:	2300      	movs	r3, #0
    68fa:	e7f9      	b.n	68f0 <flash_nrf_read+0x24>
    68fc:	2300      	movs	r3, #0
    68fe:	e7f7      	b.n	68f0 <flash_nrf_read+0x24>
    6900:	2300      	movs	r3, #0
    6902:	e7f5      	b.n	68f0 <flash_nrf_read+0x24>
	memcpy(data, (void *)addr, len);
    6904:	462a      	mov	r2, r5
    6906:	4621      	mov	r1, r4
    6908:	4630      	mov	r0, r6
    690a:	f7ff fe9c 	bl	6646 <memcpy>
	return 0;
    690e:	2000      	movs	r0, #0
    6910:	e7f1      	b.n	68f6 <flash_nrf_read+0x2a>
		return -EINVAL;
    6912:	f06f 0015 	mvn.w	r0, #21
    6916:	e7ee      	b.n	68f6 <flash_nrf_read+0x2a>

00006918 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
    6918:	b5f0      	push	{r4, r5, r6, r7, lr}
    691a:	b083      	sub	sp, #12
    691c:	460c      	mov	r4, r1
    691e:	4615      	mov	r5, r2
    6920:	461e      	mov	r6, r3
	const struct flash_driver_api *api = dev->driver_api;
    6922:	6843      	ldr	r3, [r0, #4]
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
    6924:	691b      	ldr	r3, [r3, #16]
    6926:	466a      	mov	r2, sp
    6928:	a901      	add	r1, sp, #4
    692a:	4798      	blx	r3
	off_t end = 0;
    692c:	2200      	movs	r2, #0
	off_t group_offs = 0;
    692e:	4694      	mov	ip, r2
	size_t page_count = 0;
    6930:	4610      	mov	r0, r2

	while (layout_size--) {
    6932:	e00c      	b.n	694e <flash_get_page_info+0x36>
		if (use_addr) {
			end += layout->pages_count * layout->pages_size;
		} else {
			end += layout->pages_count;
    6934:	9b01      	ldr	r3, [sp, #4]
    6936:	681b      	ldr	r3, [r3, #0]
    6938:	441a      	add	r2, r3
		}

		if (offs < end) {
    693a:	42a2      	cmp	r2, r4
    693c:	dc13      	bgt.n	6966 <flash_get_page_info+0x4e>
			info->index = page_count + num_in_group;

			return 0;
		}

		group_offs += layout->pages_count * layout->pages_size;
    693e:	9b01      	ldr	r3, [sp, #4]
    6940:	6819      	ldr	r1, [r3, #0]
    6942:	685f      	ldr	r7, [r3, #4]
    6944:	fb07 cc01 	mla	ip, r7, r1, ip
		page_count += layout->pages_count;
    6948:	4408      	add	r0, r1

		layout++;
    694a:	3308      	adds	r3, #8
    694c:	9301      	str	r3, [sp, #4]
	while (layout_size--) {
    694e:	9b00      	ldr	r3, [sp, #0]
    6950:	1e59      	subs	r1, r3, #1
    6952:	9100      	str	r1, [sp, #0]
    6954:	b1d3      	cbz	r3, 698c <flash_get_page_info+0x74>
		if (use_addr) {
    6956:	2d00      	cmp	r5, #0
    6958:	d0ec      	beq.n	6934 <flash_get_page_info+0x1c>
			end += layout->pages_count * layout->pages_size;
    695a:	9b01      	ldr	r3, [sp, #4]
    695c:	6819      	ldr	r1, [r3, #0]
    695e:	685b      	ldr	r3, [r3, #4]
    6960:	fb03 2201 	mla	r2, r3, r1, r2
    6964:	e7e9      	b.n	693a <flash_get_page_info+0x22>
			info->size = layout->pages_size;
    6966:	9b01      	ldr	r3, [sp, #4]
    6968:	685a      	ldr	r2, [r3, #4]
    696a:	6072      	str	r2, [r6, #4]
			if (use_addr) {
    696c:	b165      	cbz	r5, 6988 <flash_get_page_info+0x70>
				num_in_group = (offs - group_offs) /
    696e:	eba4 040c 	sub.w	r4, r4, ip
					       layout->pages_size;
    6972:	685a      	ldr	r2, [r3, #4]
				num_in_group = (offs - group_offs) /
    6974:	fbb4 f4f2 	udiv	r4, r4, r2
					     num_in_group * layout->pages_size;
    6978:	685b      	ldr	r3, [r3, #4]
			info->start_offset = group_offs +
    697a:	fb04 c303 	mla	r3, r4, r3, ip
    697e:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
    6980:	4420      	add	r0, r4
    6982:	60b0      	str	r0, [r6, #8]
			return 0;
    6984:	2000      	movs	r0, #0
    6986:	e003      	b.n	6990 <flash_get_page_info+0x78>
				num_in_group = offs - page_count;
    6988:	1a24      	subs	r4, r4, r0
    698a:	e7f5      	b.n	6978 <flash_get_page_info+0x60>
	}

	return -EINVAL; /* page of the index doesn't exist */
    698c:	f06f 0015 	mvn.w	r0, #21
}
    6990:	b003      	add	sp, #12
    6992:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006994 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
    6994:	b508      	push	{r3, lr}
	return flash_get_page_info(dev, offs, true, info);
    6996:	4613      	mov	r3, r2
    6998:	2201      	movs	r2, #1
    699a:	f7ff ffbd 	bl	6918 <flash_get_page_info>
}
    699e:	bd08      	pop	{r3, pc}

000069a0 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
    69a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69a4:	b086      	sub	sp, #24
    69a6:	4689      	mov	r9, r1
    69a8:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->driver_api;
    69aa:	6843      	ldr	r3, [r0, #4]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    69ac:	691b      	ldr	r3, [r3, #16]
    69ae:	aa01      	add	r2, sp, #4
    69b0:	a905      	add	r1, sp, #20
    69b2:	4798      	blx	r3
	off_t off = 0;
    69b4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    69b6:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    69b8:	46a2      	mov	sl, r4
    69ba:	9b01      	ldr	r3, [sp, #4]
    69bc:	4553      	cmp	r3, sl
    69be:	d916      	bls.n	69ee <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    69c0:	9f05      	ldr	r7, [sp, #20]
    69c2:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    69c6:	687b      	ldr	r3, [r7, #4]
    69c8:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    69ca:	2500      	movs	r5, #0
    69cc:	683b      	ldr	r3, [r7, #0]
    69ce:	42ab      	cmp	r3, r5
    69d0:	d90a      	bls.n	69e8 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    69d2:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    69d4:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    69d6:	4641      	mov	r1, r8
    69d8:	a802      	add	r0, sp, #8
    69da:	47c8      	blx	r9
    69dc:	b138      	cbz	r0, 69ee <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    69de:	9b03      	ldr	r3, [sp, #12]
    69e0:	441c      	add	r4, r3
			page++;
    69e2:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    69e4:	3501      	adds	r5, #1
    69e6:	e7f1      	b.n	69cc <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    69e8:	f10a 0a01 	add.w	sl, sl, #1
    69ec:	e7e5      	b.n	69ba <flash_page_foreach+0x1a>
		}
	}
}
    69ee:	b006      	add	sp, #24
    69f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000069f4 <uarte_nrfx_isr_int>:
{
    69f4:	b508      	push	{r3, lr}
	return dev->driver_data;
    69f6:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
    69f8:	6803      	ldr	r3, [r0, #0]
    69fa:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    69fc:	6818      	ldr	r0, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    69fe:	6893      	ldr	r3, [r2, #8]
    6a00:	7b99      	ldrb	r1, [r3, #14]
    6a02:	b111      	cbz	r1, 6a0a <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a04:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
    6a08:	b921      	cbnz	r1, 6a14 <uarte_nrfx_isr_int+0x20>
	if (data->int_driven->cb) {
    6a0a:	681a      	ldr	r2, [r3, #0]
    6a0c:	b10a      	cbz	r2, 6a12 <uarte_nrfx_isr_int+0x1e>
		data->int_driven->cb(data->int_driven->cb_data);
    6a0e:	6858      	ldr	r0, [r3, #4]
    6a10:	4790      	blx	r2
}
    6a12:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    6a14:	f44f 7380 	mov.w	r3, #256	; 0x100
    6a18:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a1c:	2301      	movs	r3, #1
    6a1e:	60c3      	str	r3, [r0, #12]
		data->int_driven->disable_tx_irq = false;
    6a20:	6893      	ldr	r3, [r2, #8]
    6a22:	2200      	movs	r2, #0
    6a24:	739a      	strb	r2, [r3, #14]
		return;
    6a26:	e7f4      	b.n	6a12 <uarte_nrfx_isr_int+0x1e>

00006a28 <uarte_nrfx_configure>:
{
    6a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (cfg->stop_bits) {
    6a2c:	794b      	ldrb	r3, [r1, #5]
    6a2e:	2b01      	cmp	r3, #1
    6a30:	d006      	beq.n	6a40 <uarte_nrfx_configure+0x18>
    6a32:	2b03      	cmp	r3, #3
    6a34:	d012      	beq.n	6a5c <uarte_nrfx_configure+0x34>
		return -ENOTSUP;
    6a36:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    6a3a:	4618      	mov	r0, r3
    6a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool two_stop_bits = false;
    6a40:	2600      	movs	r6, #0
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6a42:	798b      	ldrb	r3, [r1, #6]
    6a44:	2b03      	cmp	r3, #3
    6a46:	d136      	bne.n	6ab6 <uarte_nrfx_configure+0x8e>
	switch (cfg->flow_ctrl) {
    6a48:	79cb      	ldrb	r3, [r1, #7]
    6a4a:	b14b      	cbz	r3, 6a60 <uarte_nrfx_configure+0x38>
    6a4c:	2b01      	cmp	r3, #1
    6a4e:	d135      	bne.n	6abc <uarte_nrfx_configure+0x94>
	return dev->config->config_info;
    6a50:	6803      	ldr	r3, [r0, #0]
    6a52:	689b      	ldr	r3, [r3, #8]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    6a54:	791b      	ldrb	r3, [r3, #4]
    6a56:	b3a3      	cbz	r3, 6ac2 <uarte_nrfx_configure+0x9a>
			hwfc = NRF_UARTE_HWFC_ENABLED;
    6a58:	2701      	movs	r7, #1
    6a5a:	e002      	b.n	6a62 <uarte_nrfx_configure+0x3a>
		two_stop_bits = true;
    6a5c:	2601      	movs	r6, #1
    6a5e:	e7f0      	b.n	6a42 <uarte_nrfx_configure+0x1a>
		hwfc = NRF_UARTE_HWFC_DISABLED;
    6a60:	2700      	movs	r7, #0
	switch (cfg->parity) {
    6a62:	790b      	ldrb	r3, [r1, #4]
    6a64:	b123      	cbz	r3, 6a70 <uarte_nrfx_configure+0x48>
    6a66:	2b02      	cmp	r3, #2
    6a68:	d022      	beq.n	6ab0 <uarte_nrfx_configure+0x88>
		return -ENOTSUP;
    6a6a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6a6e:	e7e4      	b.n	6a3a <uarte_nrfx_configure+0x12>
		parity = NRF_UARTE_PARITY_EXCLUDED;
    6a70:	f04f 0800 	mov.w	r8, #0
    6a74:	460c      	mov	r4, r1
    6a76:	4605      	mov	r5, r0
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6a78:	6809      	ldr	r1, [r1, #0]
    6a7a:	f7fc feff 	bl	387c <baudrate_set>
    6a7e:	4603      	mov	r3, r0
    6a80:	bb10      	cbnz	r0, 6ac8 <uarte_nrfx_configure+0xa0>
	return dev->config->config_info;
    6a82:	682a      	ldr	r2, [r5, #0]
    6a84:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    6a86:	6812      	ldr	r2, [r2, #0]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    6a88:	ea48 0707 	orr.w	r7, r8, r7
    6a8c:	f8c2 756c 	str.w	r7, [r2, #1388]	; 0x56c
	if (two_stop_bits) {
    6a90:	b146      	cbz	r6, 6aa4 <uarte_nrfx_configure+0x7c>
	return dev->config->config_info;
    6a92:	682a      	ldr	r2, [r5, #0]
    6a94:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    6a96:	6811      	ldr	r1, [r2, #0]
		get_uarte_instance(dev)->CONFIG |=
    6a98:	f8d1 256c 	ldr.w	r2, [r1, #1388]	; 0x56c
    6a9c:	f042 0210 	orr.w	r2, r2, #16
    6aa0:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->driver_data;
    6aa4:	68aa      	ldr	r2, [r5, #8]
	get_dev_data(dev)->uart_config = *cfg;
    6aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
    6aaa:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    6aae:	e7c4      	b.n	6a3a <uarte_nrfx_configure+0x12>
		parity = NRF_UARTE_PARITY_INCLUDED;
    6ab0:	f04f 080e 	mov.w	r8, #14
    6ab4:	e7de      	b.n	6a74 <uarte_nrfx_configure+0x4c>
		return -ENOTSUP;
    6ab6:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6aba:	e7be      	b.n	6a3a <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    6abc:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6ac0:	e7bb      	b.n	6a3a <uarte_nrfx_configure+0x12>
			return -ENOTSUP;
    6ac2:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6ac6:	e7b8      	b.n	6a3a <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    6ac8:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6acc:	e7b5      	b.n	6a3a <uarte_nrfx_configure+0x12>

00006ace <uarte_nrfx_config_get>:
{
    6ace:	460b      	mov	r3, r1
	return dev->driver_data;
    6ad0:	6882      	ldr	r2, [r0, #8]
	*cfg = get_dev_data(dev)->uart_config;
    6ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
    6ad6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6ada:	2000      	movs	r0, #0
    6adc:	4770      	bx	lr

00006ade <uarte_nrfx_err_check>:
	return dev->config->config_info;
    6ade:	6803      	ldr	r3, [r0, #0]
    6ae0:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6ae2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ae4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6ae8:	b122      	cbz	r2, 6af4 <uarte_nrfx_err_check+0x16>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6aea:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6aee:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
    6af2:	4770      	bx	lr
	u32_t error = 0U;
    6af4:	2000      	movs	r0, #0
}
    6af6:	4770      	bx	lr

00006af8 <uarte_nrfx_poll_in>:
{
    6af8:	b410      	push	{r4}
	return dev->driver_data;
    6afa:	6884      	ldr	r4, [r0, #8]
	return dev->config->config_info;
    6afc:	6803      	ldr	r3, [r0, #0]
    6afe:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6b00:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b02:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6b06:	b14a      	cbz	r2, 6b1c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    6b08:	7b22      	ldrb	r2, [r4, #12]
    6b0a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b0c:	2000      	movs	r0, #0
    6b0e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b12:	2201      	movs	r2, #1
    6b14:	601a      	str	r2, [r3, #0]
}
    6b16:	f85d 4b04 	ldr.w	r4, [sp], #4
    6b1a:	4770      	bx	lr
		return -1;
    6b1c:	f04f 30ff 	mov.w	r0, #4294967295
    6b20:	e7f9      	b.n	6b16 <uarte_nrfx_poll_in+0x1e>

00006b22 <uarte_nrfx_poll_out>:
{
    6b22:	b082      	sub	sp, #8
    6b24:	ab02      	add	r3, sp, #8
    6b26:	f803 1d01 	strb.w	r1, [r3, #-1]!
	return dev->config->config_info;
    6b2a:	6802      	ldr	r2, [r0, #0]
    6b2c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    6b2e:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b30:	2100      	movs	r1, #0
    6b32:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6b36:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6b3a:	2301      	movs	r3, #1
    6b3c:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b40:	6093      	str	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b42:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6b46:	2b00      	cmp	r3, #0
    6b48:	d0fb      	beq.n	6b42 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b4a:	2301      	movs	r3, #1
    6b4c:	60d3      	str	r3, [r2, #12]
}
    6b4e:	b002      	add	sp, #8
    6b50:	4770      	bx	lr

00006b52 <uarte_nrfx_fifo_fill>:
{
    6b52:	b470      	push	{r4, r5, r6}
	return dev->config->config_info;
    6b54:	6803      	ldr	r3, [r0, #0]
    6b56:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6b58:	681e      	ldr	r6, [r3, #0]
	return dev->driver_data;
    6b5a:	6885      	ldr	r5, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b5c:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6b60:	b1cb      	cbz	r3, 6b96 <uarte_nrfx_fifo_fill+0x44>
	if (len > data->int_driven->tx_buff_size) {
    6b62:	68ab      	ldr	r3, [r5, #8]
    6b64:	8998      	ldrh	r0, [r3, #12]
    6b66:	4290      	cmp	r0, r2
    6b68:	db00      	blt.n	6b6c <uarte_nrfx_fifo_fill+0x1a>
    6b6a:	4610      	mov	r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b6c:	2300      	movs	r3, #0
    6b6e:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    6b72:	e004      	b.n	6b7e <uarte_nrfx_fifo_fill+0x2c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    6b74:	68aa      	ldr	r2, [r5, #8]
    6b76:	6892      	ldr	r2, [r2, #8]
    6b78:	5ccc      	ldrb	r4, [r1, r3]
    6b7a:	54d4      	strb	r4, [r2, r3]
	for (int i = 0; i < len; i++) {
    6b7c:	3301      	adds	r3, #1
    6b7e:	4298      	cmp	r0, r3
    6b80:	dcf8      	bgt.n	6b74 <uarte_nrfx_fifo_fill+0x22>
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);
    6b82:	68ab      	ldr	r3, [r5, #8]
    6b84:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6b86:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6b8a:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b8e:	2301      	movs	r3, #1
    6b90:	60b3      	str	r3, [r6, #8]
}
    6b92:	bc70      	pop	{r4, r5, r6}
    6b94:	4770      	bx	lr
		return 0;
    6b96:	2000      	movs	r0, #0
    6b98:	e7fb      	b.n	6b92 <uarte_nrfx_fifo_fill+0x40>

00006b9a <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
    6b9a:	6803      	ldr	r3, [r0, #0]
    6b9c:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6b9e:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    6ba0:	6880      	ldr	r0, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ba2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6ba6:	b13a      	cbz	r2, 6bb8 <uarte_nrfx_fifo_read+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ba8:	2200      	movs	r2, #0
    6baa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (u8_t)data->rx_data;
    6bae:	7b02      	ldrb	r2, [r0, #12]
    6bb0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bb2:	2001      	movs	r0, #1
    6bb4:	6018      	str	r0, [r3, #0]
    6bb6:	4770      	bx	lr
	int num_rx = 0;
    6bb8:	2000      	movs	r0, #0
}
    6bba:	4770      	bx	lr

00006bbc <uarte_nrfx_irq_tx_enable>:
	return dev->config->config_info;
    6bbc:	6803      	ldr	r3, [r0, #0]
    6bbe:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6bc0:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    6bc2:	6882      	ldr	r2, [r0, #8]
	data->int_driven->disable_tx_irq = false;
    6bc4:	6892      	ldr	r2, [r2, #8]
    6bc6:	2100      	movs	r1, #0
    6bc8:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    6bca:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6bd2:	4770      	bx	lr

00006bd4 <uarte_nrfx_irq_tx_disable>:
	return dev->driver_data;
    6bd4:	6883      	ldr	r3, [r0, #8]
	data->int_driven->disable_tx_irq = true;
    6bd6:	689b      	ldr	r3, [r3, #8]
    6bd8:	2201      	movs	r2, #1
    6bda:	739a      	strb	r2, [r3, #14]
}
    6bdc:	4770      	bx	lr

00006bde <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
    6bde:	6803      	ldr	r3, [r0, #0]
    6be0:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6be2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6be4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    6be8:	b142      	cbz	r2, 6bfc <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return (bool)(p_reg->INTENSET & mask);
    6bea:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    6bee:	f413 7f80 	tst.w	r3, #256	; 0x100
    6bf2:	d101      	bne.n	6bf8 <uarte_nrfx_irq_tx_ready_complete+0x1a>
    6bf4:	2000      	movs	r0, #0
}
    6bf6:	4770      	bx	lr
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    6bf8:	2001      	movs	r0, #1
    6bfa:	4770      	bx	lr
    6bfc:	2000      	movs	r0, #0
    6bfe:	4770      	bx	lr

00006c00 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
    6c00:	6803      	ldr	r3, [r0, #0]
    6c02:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c04:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c06:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6c0a:	3000      	adds	r0, #0
    6c0c:	bf18      	it	ne
    6c0e:	2001      	movne	r0, #1
    6c10:	4770      	bx	lr

00006c12 <uarte_nrfx_irq_rx_enable>:
	return dev->config->config_info;
    6c12:	6803      	ldr	r3, [r0, #0]
    6c14:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c16:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6c18:	2210      	movs	r2, #16
    6c1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6c1e:	4770      	bx	lr

00006c20 <uarte_nrfx_irq_rx_disable>:
	return dev->config->config_info;
    6c20:	6803      	ldr	r3, [r0, #0]
    6c22:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c24:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6c26:	2210      	movs	r2, #16
    6c28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6c2c:	4770      	bx	lr

00006c2e <uarte_nrfx_irq_err_enable>:
	return dev->config->config_info;
    6c2e:	6803      	ldr	r3, [r0, #0]
    6c30:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6c34:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6c3c:	4770      	bx	lr

00006c3e <uarte_nrfx_irq_err_disable>:
	return dev->config->config_info;
    6c3e:	6803      	ldr	r3, [r0, #0]
    6c40:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c42:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6c44:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6c4c:	4770      	bx	lr

00006c4e <uarte_nrfx_irq_is_pending>:
{
    6c4e:	b538      	push	{r3, r4, r5, lr}
    6c50:	4605      	mov	r5, r0
	return dev->config->config_info;
    6c52:	6803      	ldr	r3, [r0, #0]
    6c54:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    6c56:	681c      	ldr	r4, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
    6c58:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		||
    6c5c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c60:	d107      	bne.n	6c72 <uarte_nrfx_irq_is_pending+0x24>
    6c62:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6c66:	f013 0f10 	tst.w	r3, #16
    6c6a:	d108      	bne.n	6c7e <uarte_nrfx_irq_is_pending+0x30>
    6c6c:	2300      	movs	r3, #0
}
    6c6e:	4618      	mov	r0, r3
    6c70:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6c72:	f7ff ffb4 	bl	6bde <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    6c76:	2800      	cmp	r0, #0
    6c78:	d0f3      	beq.n	6c62 <uarte_nrfx_irq_is_pending+0x14>
		||
    6c7a:	2301      	movs	r3, #1
    6c7c:	e7f7      	b.n	6c6e <uarte_nrfx_irq_is_pending+0x20>
		 uarte_nrfx_irq_rx_ready(dev)));
    6c7e:	4628      	mov	r0, r5
    6c80:	f7ff ffbe 	bl	6c00 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6c84:	4603      	mov	r3, r0
    6c86:	2800      	cmp	r0, #0
    6c88:	d0f1      	beq.n	6c6e <uarte_nrfx_irq_is_pending+0x20>
		||
    6c8a:	2301      	movs	r3, #1
    6c8c:	e7ef      	b.n	6c6e <uarte_nrfx_irq_is_pending+0x20>

00006c8e <uarte_nrfx_irq_update>:
}
    6c8e:	2001      	movs	r0, #1
    6c90:	4770      	bx	lr

00006c92 <uarte_nrfx_irq_callback_set>:
	return dev->driver_data;
    6c92:	6883      	ldr	r3, [r0, #8]
	data->int_driven->cb = cb;
    6c94:	6898      	ldr	r0, [r3, #8]
    6c96:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    6c98:	689b      	ldr	r3, [r3, #8]
    6c9a:	605a      	str	r2, [r3, #4]
}
    6c9c:	4770      	bx	lr

00006c9e <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6c9e:	2000      	movs	r0, #0
    6ca0:	4770      	bx	lr

00006ca2 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6ca2:	b430      	push	{r4, r5}
    if( ( end - *p ) < 1 )
    6ca4:	6803      	ldr	r3, [r0, #0]
    6ca6:	1acd      	subs	r5, r1, r3
    6ca8:	2d00      	cmp	r5, #0
    6caa:	dd4d      	ble.n	6d48 <mbedtls_asn1_get_len+0xa6>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6cac:	781c      	ldrb	r4, [r3, #0]
    6cae:	f014 0f80 	tst.w	r4, #128	; 0x80
    6cb2:	d10b      	bne.n	6ccc <mbedtls_asn1_get_len+0x2a>
        *len = *(*p)++;
    6cb4:	1c5c      	adds	r4, r3, #1
    6cb6:	6004      	str	r4, [r0, #0]
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6cbc:	6813      	ldr	r3, [r2, #0]
    6cbe:	6802      	ldr	r2, [r0, #0]
    6cc0:	1a89      	subs	r1, r1, r2
    6cc2:	428b      	cmp	r3, r1
    6cc4:	d83d      	bhi.n	6d42 <mbedtls_asn1_get_len+0xa0>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    6cc6:	2000      	movs	r0, #0
}
    6cc8:	bc30      	pop	{r4, r5}
    6cca:	4770      	bx	lr
        switch( **p & 0x7F )
    6ccc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6cd0:	3c01      	subs	r4, #1
    6cd2:	2c03      	cmp	r4, #3
    6cd4:	d83b      	bhi.n	6d4e <mbedtls_asn1_get_len+0xac>
    6cd6:	e8df f004 	tbb	[pc, r4]
    6cda:	0a02      	.short	0x0a02
    6cdc:	2315      	.short	0x2315
            if( ( end - *p ) < 2 )
    6cde:	2d01      	cmp	r5, #1
    6ce0:	dd38      	ble.n	6d54 <mbedtls_asn1_get_len+0xb2>
            *len = (*p)[1];
    6ce2:	785b      	ldrb	r3, [r3, #1]
    6ce4:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6ce6:	6803      	ldr	r3, [r0, #0]
    6ce8:	3302      	adds	r3, #2
    6cea:	6003      	str	r3, [r0, #0]
            break;
    6cec:	e7e6      	b.n	6cbc <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 3 )
    6cee:	2d02      	cmp	r5, #2
    6cf0:	dd33      	ble.n	6d5a <mbedtls_asn1_get_len+0xb8>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6cf2:	785c      	ldrb	r4, [r3, #1]
    6cf4:	789b      	ldrb	r3, [r3, #2]
    6cf6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    6cfa:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6cfc:	6803      	ldr	r3, [r0, #0]
    6cfe:	3303      	adds	r3, #3
    6d00:	6003      	str	r3, [r0, #0]
            break;
    6d02:	e7db      	b.n	6cbc <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 4 )
    6d04:	2d03      	cmp	r5, #3
    6d06:	dd2b      	ble.n	6d60 <mbedtls_asn1_get_len+0xbe>
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d08:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d0a:	789c      	ldrb	r4, [r3, #2]
    6d0c:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d0e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d12:	78db      	ldrb	r3, [r3, #3]
    6d14:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d16:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    6d18:	6803      	ldr	r3, [r0, #0]
    6d1a:	3304      	adds	r3, #4
    6d1c:	6003      	str	r3, [r0, #0]
            break;
    6d1e:	e7cd      	b.n	6cbc <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 5 )
    6d20:	2d04      	cmp	r5, #4
    6d22:	dd20      	ble.n	6d66 <mbedtls_asn1_get_len+0xc4>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d24:	785d      	ldrb	r5, [r3, #1]
    6d26:	789c      	ldrb	r4, [r3, #2]
    6d28:	0424      	lsls	r4, r4, #16
    6d2a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    6d2e:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d30:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    6d34:	791b      	ldrb	r3, [r3, #4]
    6d36:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d38:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6d3a:	6803      	ldr	r3, [r0, #0]
    6d3c:	3305      	adds	r3, #5
    6d3e:	6003      	str	r3, [r0, #0]
            break;
    6d40:	e7bc      	b.n	6cbc <mbedtls_asn1_get_len+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d42:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d46:	e7bf      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d48:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d4c:	e7bc      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    6d4e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6d52:	e7b9      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d54:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d58:	e7b6      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d5a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d5e:	e7b3      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d60:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d64:	e7b0      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d66:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d6a:	e7ad      	b.n	6cc8 <mbedtls_asn1_get_len+0x26>

00006d6c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6d6c:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    6d6e:	6804      	ldr	r4, [r0, #0]
    6d70:	1b0d      	subs	r5, r1, r4
    6d72:	2d00      	cmp	r5, #0
    6d74:	dd07      	ble.n	6d86 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6d76:	7825      	ldrb	r5, [r4, #0]
    6d78:	429d      	cmp	r5, r3
    6d7a:	d107      	bne.n	6d8c <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6d7c:	3401      	adds	r4, #1
    6d7e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    6d80:	f7ff ff8f 	bl	6ca2 <mbedtls_asn1_get_len>
}
    6d84:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d86:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d8a:	e7fb      	b.n	6d84 <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6d8c:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6d90:	e7f8      	b.n	6d84 <mbedtls_asn1_get_tag+0x18>

00006d92 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6d92:	b530      	push	{r4, r5, lr}
    6d94:	b083      	sub	sp, #12
    6d96:	4604      	mov	r4, r0
    6d98:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6d9a:	2302      	movs	r3, #2
    6d9c:	aa01      	add	r2, sp, #4
    6d9e:	f7ff ffe5 	bl	6d6c <mbedtls_asn1_get_tag>
    6da2:	4603      	mov	r3, r0
    6da4:	b110      	cbz	r0, 6dac <mbedtls_asn1_get_mpi+0x1a>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    6da6:	4618      	mov	r0, r3
    6da8:	b003      	add	sp, #12
    6daa:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    6dac:	9a01      	ldr	r2, [sp, #4]
    6dae:	6821      	ldr	r1, [r4, #0]
    6db0:	4628      	mov	r0, r5
    6db2:	f000 fb13 	bl	73dc <mbedtls_mpi_read_binary>
    6db6:	4603      	mov	r3, r0
    *p += len;
    6db8:	6822      	ldr	r2, [r4, #0]
    6dba:	9901      	ldr	r1, [sp, #4]
    6dbc:	440a      	add	r2, r1
    6dbe:	6022      	str	r2, [r4, #0]
    return( ret );
    6dc0:	e7f1      	b.n	6da6 <mbedtls_asn1_get_mpi+0x14>

00006dc2 <mbedtls_clz>:
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    6dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    6dc6:	2300      	movs	r3, #0
    6dc8:	2b1f      	cmp	r3, #31
    6dca:	d804      	bhi.n	6dd6 <mbedtls_clz+0x14>
    {
        if( x & mask ) break;
    6dcc:	4202      	tst	r2, r0
    6dce:	d102      	bne.n	6dd6 <mbedtls_clz+0x14>

        mask >>= 1;
    6dd0:	0852      	lsrs	r2, r2, #1
    for( j = 0; j < biL; j++ )
    6dd2:	3301      	adds	r3, #1
    6dd4:	e7f8      	b.n	6dc8 <mbedtls_clz+0x6>
    }

    return j;
}
    6dd6:	4618      	mov	r0, r3
    6dd8:	4770      	bx	lr

00006dda <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    6dda:	b410      	push	{r4}
    uint8_t i;
    mbedtls_mpi_uint tmp = 0;
    6ddc:	2400      	movs	r4, #0
    /* This works regardless of the endianness. */
    for( i = 0; i < ciL; i++, x >>= 8 )
    6dde:	4623      	mov	r3, r4
    6de0:	e008      	b.n	6df4 <mpi_uint_bigendian_to_host_c+0x1a>
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    6de2:	b2c2      	uxtb	r2, r0
    6de4:	f1c3 0103 	rsb	r1, r3, #3
    6de8:	00c9      	lsls	r1, r1, #3
    6dea:	408a      	lsls	r2, r1
    6dec:	4314      	orrs	r4, r2
    for( i = 0; i < ciL; i++, x >>= 8 )
    6dee:	3301      	adds	r3, #1
    6df0:	b2db      	uxtb	r3, r3
    6df2:	0a00      	lsrs	r0, r0, #8
    6df4:	2b03      	cmp	r3, #3
    6df6:	d9f4      	bls.n	6de2 <mpi_uint_bigendian_to_host_c+0x8>
    return( tmp );
}
    6df8:	4620      	mov	r0, r4
    6dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    6dfe:	4770      	bx	lr

00006e00 <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    6e00:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    6e02:	f7ff ffea 	bl	6dda <mpi_uint_bigendian_to_host_c>
}
    6e06:	bd08      	pop	{r3, pc}

00006e08 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    6e08:	b1a9      	cbz	r1, 6e36 <mpi_bigendian_to_host+0x2e>
{
    6e0a:	b570      	push	{r4, r5, r6, lr}
    6e0c:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    6e0e:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    6e12:	3c01      	subs	r4, #1
    6e14:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    6e18:	e00a      	b.n	6e30 <mpi_bigendian_to_host+0x28>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    6e1a:	6828      	ldr	r0, [r5, #0]
    6e1c:	f7ff fff0 	bl	6e00 <mpi_uint_bigendian_to_host>
    6e20:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6e22:	6820      	ldr	r0, [r4, #0]
    6e24:	f7ff ffec 	bl	6e00 <mpi_uint_bigendian_to_host>
    6e28:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    6e2c:	f844 6904 	str.w	r6, [r4], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    6e30:	42a5      	cmp	r5, r4
    6e32:	d9f2      	bls.n	6e1a <mpi_bigendian_to_host+0x12>
    }
}
    6e34:	bd70      	pop	{r4, r5, r6, pc}
    6e36:	4770      	bx	lr

00006e38 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    6e38:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    6e3a:	2300      	movs	r3, #0
    6e3c:	461d      	mov	r5, r3
    6e3e:	e013      	b.n	6e68 <mpi_sub_hlp+0x30>
    {
        z = ( *d <  c );     *d -=  c;
    6e40:	6817      	ldr	r7, [r2, #0]
    6e42:	1afc      	subs	r4, r7, r3
    6e44:	6014      	str	r4, [r2, #0]
        c = ( *d < *s ) + z; *d -= *s;
    6e46:	f851 6b04 	ldr.w	r6, [r1], #4
    6e4a:	42b4      	cmp	r4, r6
    6e4c:	bf2c      	ite	cs
    6e4e:	f04f 0c00 	movcs.w	ip, #0
    6e52:	f04f 0c01 	movcc.w	ip, #1
    6e56:	429f      	cmp	r7, r3
    6e58:	bf2c      	ite	cs
    6e5a:	4663      	movcs	r3, ip
    6e5c:	f10c 0301 	addcc.w	r3, ip, #1
    6e60:	1ba4      	subs	r4, r4, r6
    6e62:	f842 4b04 	str.w	r4, [r2], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    6e66:	3501      	adds	r5, #1
    6e68:	4285      	cmp	r5, r0
    6e6a:	d3e9      	bcc.n	6e40 <mpi_sub_hlp+0x8>
    6e6c:	e007      	b.n	6e7e <mpi_sub_hlp+0x46>
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
    6e6e:	6811      	ldr	r1, [r2, #0]
    6e70:	1ac8      	subs	r0, r1, r3
    6e72:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
    6e76:	4299      	cmp	r1, r3
    6e78:	bf2c      	ite	cs
    6e7a:	2300      	movcs	r3, #0
    6e7c:	2301      	movcc	r3, #1
    while( c != 0 )
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d1f5      	bne.n	6e6e <mpi_sub_hlp+0x36>
    }
}
    6e82:	bcf0      	pop	{r4, r5, r6, r7}
    6e84:	4770      	bx	lr

00006e86 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    6e86:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    6e8a:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6e8c:	e0f4      	b.n	7078 <mpi_mul_hlp+0x1f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6e8e:	680d      	ldr	r5, [r1, #0]
    6e90:	fba5 8903 	umull	r8, r9, r5, r3
    6e94:	eb14 0408 	adds.w	r4, r4, r8
    6e98:	bf2c      	ite	cs
    6e9a:	2501      	movcs	r5, #1
    6e9c:	2500      	movcc	r5, #0
    6e9e:	eb05 0709 	add.w	r7, r5, r9
    6ea2:	6816      	ldr	r6, [r2, #0]
    6ea4:	1936      	adds	r6, r6, r4
    6ea6:	bf2c      	ite	cs
    6ea8:	2501      	movcs	r5, #1
    6eaa:	2500      	movcc	r5, #0
    6eac:	443d      	add	r5, r7
    6eae:	6016      	str	r6, [r2, #0]
    6eb0:	684e      	ldr	r6, [r1, #4]
    6eb2:	fba3 6706 	umull	r6, r7, r3, r6
    6eb6:	19ad      	adds	r5, r5, r6
    6eb8:	bf2c      	ite	cs
    6eba:	2401      	movcs	r4, #1
    6ebc:	2400      	movcc	r4, #0
    6ebe:	4427      	add	r7, r4
    6ec0:	6856      	ldr	r6, [r2, #4]
    6ec2:	1975      	adds	r5, r6, r5
    6ec4:	bf2c      	ite	cs
    6ec6:	2401      	movcs	r4, #1
    6ec8:	2400      	movcc	r4, #0
    6eca:	443c      	add	r4, r7
    6ecc:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    6ece:	688e      	ldr	r6, [r1, #8]
    6ed0:	fba3 7806 	umull	r7, r8, r3, r6
    6ed4:	19e4      	adds	r4, r4, r7
    6ed6:	bf2c      	ite	cs
    6ed8:	2601      	movcs	r6, #1
    6eda:	2600      	movcc	r6, #0
    6edc:	4446      	add	r6, r8
    6ede:	6895      	ldr	r5, [r2, #8]
    6ee0:	192d      	adds	r5, r5, r4
    6ee2:	bf2c      	ite	cs
    6ee4:	2401      	movcs	r4, #1
    6ee6:	2400      	movcc	r4, #0
    6ee8:	4434      	add	r4, r6
    6eea:	6095      	str	r5, [r2, #8]
    6eec:	68ce      	ldr	r6, [r1, #12]
    6eee:	fba3 7806 	umull	r7, r8, r3, r6
    6ef2:	19e4      	adds	r4, r4, r7
    6ef4:	bf2c      	ite	cs
    6ef6:	2601      	movcs	r6, #1
    6ef8:	2600      	movcc	r6, #0
    6efa:	4446      	add	r6, r8
    6efc:	68d5      	ldr	r5, [r2, #12]
    6efe:	192d      	adds	r5, r5, r4
    6f00:	bf2c      	ite	cs
    6f02:	2401      	movcs	r4, #1
    6f04:	2400      	movcc	r4, #0
    6f06:	4434      	add	r4, r6
    6f08:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    6f0a:	690e      	ldr	r6, [r1, #16]
    6f0c:	fba3 7806 	umull	r7, r8, r3, r6
    6f10:	19e4      	adds	r4, r4, r7
    6f12:	bf2c      	ite	cs
    6f14:	2601      	movcs	r6, #1
    6f16:	2600      	movcc	r6, #0
    6f18:	4446      	add	r6, r8
    6f1a:	6915      	ldr	r5, [r2, #16]
    6f1c:	192d      	adds	r5, r5, r4
    6f1e:	bf2c      	ite	cs
    6f20:	2401      	movcs	r4, #1
    6f22:	2400      	movcc	r4, #0
    6f24:	4434      	add	r4, r6
    6f26:	6115      	str	r5, [r2, #16]
    6f28:	694e      	ldr	r6, [r1, #20]
    6f2a:	fba3 7806 	umull	r7, r8, r3, r6
    6f2e:	19e4      	adds	r4, r4, r7
    6f30:	bf2c      	ite	cs
    6f32:	2601      	movcs	r6, #1
    6f34:	2600      	movcc	r6, #0
    6f36:	4446      	add	r6, r8
    6f38:	6955      	ldr	r5, [r2, #20]
    6f3a:	192d      	adds	r5, r5, r4
    6f3c:	bf2c      	ite	cs
    6f3e:	2401      	movcs	r4, #1
    6f40:	2400      	movcc	r4, #0
    6f42:	4434      	add	r4, r6
    6f44:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    6f46:	698e      	ldr	r6, [r1, #24]
    6f48:	fba3 7806 	umull	r7, r8, r3, r6
    6f4c:	19e4      	adds	r4, r4, r7
    6f4e:	bf2c      	ite	cs
    6f50:	2601      	movcs	r6, #1
    6f52:	2600      	movcc	r6, #0
    6f54:	4446      	add	r6, r8
    6f56:	6995      	ldr	r5, [r2, #24]
    6f58:	192d      	adds	r5, r5, r4
    6f5a:	bf2c      	ite	cs
    6f5c:	2401      	movcs	r4, #1
    6f5e:	2400      	movcc	r4, #0
    6f60:	4434      	add	r4, r6
    6f62:	6195      	str	r5, [r2, #24]
    6f64:	69ce      	ldr	r6, [r1, #28]
    6f66:	fba3 7806 	umull	r7, r8, r3, r6
    6f6a:	19e4      	adds	r4, r4, r7
    6f6c:	bf2c      	ite	cs
    6f6e:	2601      	movcs	r6, #1
    6f70:	2600      	movcc	r6, #0
    6f72:	4446      	add	r6, r8
    6f74:	69d5      	ldr	r5, [r2, #28]
    6f76:	192d      	adds	r5, r5, r4
    6f78:	bf2c      	ite	cs
    6f7a:	2401      	movcs	r4, #1
    6f7c:	2400      	movcc	r4, #0
    6f7e:	4434      	add	r4, r6
    6f80:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    6f82:	6a0e      	ldr	r6, [r1, #32]
    6f84:	fba3 7806 	umull	r7, r8, r3, r6
    6f88:	19e4      	adds	r4, r4, r7
    6f8a:	bf2c      	ite	cs
    6f8c:	2601      	movcs	r6, #1
    6f8e:	2600      	movcc	r6, #0
    6f90:	4446      	add	r6, r8
    6f92:	6a15      	ldr	r5, [r2, #32]
    6f94:	192d      	adds	r5, r5, r4
    6f96:	bf2c      	ite	cs
    6f98:	2401      	movcs	r4, #1
    6f9a:	2400      	movcc	r4, #0
    6f9c:	4434      	add	r4, r6
    6f9e:	6215      	str	r5, [r2, #32]
    6fa0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    6fa2:	fba3 7806 	umull	r7, r8, r3, r6
    6fa6:	19e4      	adds	r4, r4, r7
    6fa8:	bf2c      	ite	cs
    6faa:	2601      	movcs	r6, #1
    6fac:	2600      	movcc	r6, #0
    6fae:	4446      	add	r6, r8
    6fb0:	6a55      	ldr	r5, [r2, #36]	; 0x24
    6fb2:	192d      	adds	r5, r5, r4
    6fb4:	bf2c      	ite	cs
    6fb6:	2401      	movcs	r4, #1
    6fb8:	2400      	movcc	r4, #0
    6fba:	4434      	add	r4, r6
    6fbc:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    6fbe:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    6fc0:	fba3 7806 	umull	r7, r8, r3, r6
    6fc4:	19e4      	adds	r4, r4, r7
    6fc6:	bf2c      	ite	cs
    6fc8:	2601      	movcs	r6, #1
    6fca:	2600      	movcc	r6, #0
    6fcc:	4446      	add	r6, r8
    6fce:	6a95      	ldr	r5, [r2, #40]	; 0x28
    6fd0:	192d      	adds	r5, r5, r4
    6fd2:	bf2c      	ite	cs
    6fd4:	2401      	movcs	r4, #1
    6fd6:	2400      	movcc	r4, #0
    6fd8:	4434      	add	r4, r6
    6fda:	6295      	str	r5, [r2, #40]	; 0x28
    6fdc:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    6fde:	fba3 7806 	umull	r7, r8, r3, r6
    6fe2:	19e4      	adds	r4, r4, r7
    6fe4:	bf2c      	ite	cs
    6fe6:	2601      	movcs	r6, #1
    6fe8:	2600      	movcc	r6, #0
    6fea:	4446      	add	r6, r8
    6fec:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    6fee:	192d      	adds	r5, r5, r4
    6ff0:	bf2c      	ite	cs
    6ff2:	2401      	movcs	r4, #1
    6ff4:	2400      	movcc	r4, #0
    6ff6:	4434      	add	r4, r6
    6ff8:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    6ffa:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    6ffc:	fba3 7806 	umull	r7, r8, r3, r6
    7000:	19e4      	adds	r4, r4, r7
    7002:	bf2c      	ite	cs
    7004:	2601      	movcs	r6, #1
    7006:	2600      	movcc	r6, #0
    7008:	4446      	add	r6, r8
    700a:	6b15      	ldr	r5, [r2, #48]	; 0x30
    700c:	192d      	adds	r5, r5, r4
    700e:	bf2c      	ite	cs
    7010:	2401      	movcs	r4, #1
    7012:	2400      	movcc	r4, #0
    7014:	4434      	add	r4, r6
    7016:	6315      	str	r5, [r2, #48]	; 0x30
    7018:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    701a:	fba3 7806 	umull	r7, r8, r3, r6
    701e:	19e4      	adds	r4, r4, r7
    7020:	bf2c      	ite	cs
    7022:	2601      	movcs	r6, #1
    7024:	2600      	movcc	r6, #0
    7026:	4446      	add	r6, r8
    7028:	6b55      	ldr	r5, [r2, #52]	; 0x34
    702a:	192d      	adds	r5, r5, r4
    702c:	bf2c      	ite	cs
    702e:	2401      	movcs	r4, #1
    7030:	2400      	movcc	r4, #0
    7032:	4434      	add	r4, r6
    7034:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    7036:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    7038:	fba3 7806 	umull	r7, r8, r3, r6
    703c:	19e4      	adds	r4, r4, r7
    703e:	bf2c      	ite	cs
    7040:	2601      	movcs	r6, #1
    7042:	2600      	movcc	r6, #0
    7044:	4446      	add	r6, r8
    7046:	6b95      	ldr	r5, [r2, #56]	; 0x38
    7048:	192d      	adds	r5, r5, r4
    704a:	bf2c      	ite	cs
    704c:	2401      	movcs	r4, #1
    704e:	2400      	movcc	r4, #0
    7050:	4434      	add	r4, r6
    7052:	6395      	str	r5, [r2, #56]	; 0x38
    7054:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    7056:	fba3 7806 	umull	r7, r8, r3, r6
    705a:	19e4      	adds	r4, r4, r7
    705c:	bf2c      	ite	cs
    705e:	2601      	movcs	r6, #1
    7060:	2600      	movcc	r6, #0
    7062:	4446      	add	r6, r8
    7064:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    7066:	192d      	adds	r5, r5, r4
    7068:	bf2c      	ite	cs
    706a:	2401      	movcs	r4, #1
    706c:	2400      	movcc	r4, #0
    706e:	4434      	add	r4, r6
    7070:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    7072:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    7074:	3240      	adds	r2, #64	; 0x40
    7076:	3140      	adds	r1, #64	; 0x40
    for( ; i >= 16; i -= 16 )
    7078:	280f      	cmp	r0, #15
    707a:	f63f af08 	bhi.w	6e8e <mpi_mul_hlp+0x8>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    707e:	2807      	cmp	r0, #7
    7080:	f240 8094 	bls.w	71ac <mpi_mul_hlp+0x326>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    7084:	680d      	ldr	r5, [r1, #0]
    7086:	fba5 8903 	umull	r8, r9, r5, r3
    708a:	eb14 0408 	adds.w	r4, r4, r8
    708e:	bf2c      	ite	cs
    7090:	2501      	movcs	r5, #1
    7092:	2500      	movcc	r5, #0
    7094:	eb05 0709 	add.w	r7, r5, r9
    7098:	6816      	ldr	r6, [r2, #0]
    709a:	1936      	adds	r6, r6, r4
    709c:	bf2c      	ite	cs
    709e:	2501      	movcs	r5, #1
    70a0:	2500      	movcc	r5, #0
    70a2:	443d      	add	r5, r7
    70a4:	6016      	str	r6, [r2, #0]
    70a6:	684e      	ldr	r6, [r1, #4]
    70a8:	fba3 6706 	umull	r6, r7, r3, r6
    70ac:	19ad      	adds	r5, r5, r6
    70ae:	bf2c      	ite	cs
    70b0:	2401      	movcs	r4, #1
    70b2:	2400      	movcc	r4, #0
    70b4:	4427      	add	r7, r4
    70b6:	6856      	ldr	r6, [r2, #4]
    70b8:	1975      	adds	r5, r6, r5
    70ba:	bf2c      	ite	cs
    70bc:	2401      	movcs	r4, #1
    70be:	2400      	movcc	r4, #0
    70c0:	443c      	add	r4, r7
    70c2:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    70c4:	688e      	ldr	r6, [r1, #8]
    70c6:	fba3 7806 	umull	r7, r8, r3, r6
    70ca:	19e4      	adds	r4, r4, r7
    70cc:	bf2c      	ite	cs
    70ce:	2601      	movcs	r6, #1
    70d0:	2600      	movcc	r6, #0
    70d2:	4446      	add	r6, r8
    70d4:	6895      	ldr	r5, [r2, #8]
    70d6:	192d      	adds	r5, r5, r4
    70d8:	bf2c      	ite	cs
    70da:	2401      	movcs	r4, #1
    70dc:	2400      	movcc	r4, #0
    70de:	4434      	add	r4, r6
    70e0:	6095      	str	r5, [r2, #8]
    70e2:	68ce      	ldr	r6, [r1, #12]
    70e4:	fba3 7806 	umull	r7, r8, r3, r6
    70e8:	19e4      	adds	r4, r4, r7
    70ea:	bf2c      	ite	cs
    70ec:	2601      	movcs	r6, #1
    70ee:	2600      	movcc	r6, #0
    70f0:	4446      	add	r6, r8
    70f2:	68d5      	ldr	r5, [r2, #12]
    70f4:	192d      	adds	r5, r5, r4
    70f6:	bf2c      	ite	cs
    70f8:	2401      	movcs	r4, #1
    70fa:	2400      	movcc	r4, #0
    70fc:	4434      	add	r4, r6
    70fe:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    7100:	690e      	ldr	r6, [r1, #16]
    7102:	fba3 7806 	umull	r7, r8, r3, r6
    7106:	19e4      	adds	r4, r4, r7
    7108:	bf2c      	ite	cs
    710a:	2601      	movcs	r6, #1
    710c:	2600      	movcc	r6, #0
    710e:	4446      	add	r6, r8
    7110:	6915      	ldr	r5, [r2, #16]
    7112:	192d      	adds	r5, r5, r4
    7114:	bf2c      	ite	cs
    7116:	2401      	movcs	r4, #1
    7118:	2400      	movcc	r4, #0
    711a:	4434      	add	r4, r6
    711c:	6115      	str	r5, [r2, #16]
    711e:	694e      	ldr	r6, [r1, #20]
    7120:	fba3 7806 	umull	r7, r8, r3, r6
    7124:	19e4      	adds	r4, r4, r7
    7126:	bf2c      	ite	cs
    7128:	2601      	movcs	r6, #1
    712a:	2600      	movcc	r6, #0
    712c:	4446      	add	r6, r8
    712e:	6955      	ldr	r5, [r2, #20]
    7130:	192d      	adds	r5, r5, r4
    7132:	bf2c      	ite	cs
    7134:	2401      	movcs	r4, #1
    7136:	2400      	movcc	r4, #0
    7138:	4434      	add	r4, r6
    713a:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    713c:	698e      	ldr	r6, [r1, #24]
    713e:	fba3 7806 	umull	r7, r8, r3, r6
    7142:	19e4      	adds	r4, r4, r7
    7144:	bf2c      	ite	cs
    7146:	2601      	movcs	r6, #1
    7148:	2600      	movcc	r6, #0
    714a:	4446      	add	r6, r8
    714c:	6995      	ldr	r5, [r2, #24]
    714e:	192d      	adds	r5, r5, r4
    7150:	bf2c      	ite	cs
    7152:	2401      	movcs	r4, #1
    7154:	2400      	movcc	r4, #0
    7156:	4434      	add	r4, r6
    7158:	6195      	str	r5, [r2, #24]
    715a:	69ce      	ldr	r6, [r1, #28]
    715c:	fba3 7806 	umull	r7, r8, r3, r6
    7160:	19e4      	adds	r4, r4, r7
    7162:	bf2c      	ite	cs
    7164:	2601      	movcs	r6, #1
    7166:	2600      	movcc	r6, #0
    7168:	4446      	add	r6, r8
    716a:	69d5      	ldr	r5, [r2, #28]
    716c:	192d      	adds	r5, r5, r4
    716e:	bf2c      	ite	cs
    7170:	2401      	movcs	r4, #1
    7172:	2400      	movcc	r4, #0
    7174:	4434      	add	r4, r6
    7176:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    7178:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    717a:	3220      	adds	r2, #32
    717c:	3120      	adds	r1, #32
    717e:	e77e      	b.n	707e <mpi_mul_hlp+0x1f8>
    }

    for( ; i > 0; i-- )
    {
        MULADDC_INIT
        MULADDC_CORE
    7180:	680e      	ldr	r6, [r1, #0]
    7182:	fba6 6703 	umull	r6, r7, r6, r3
    7186:	eb14 0c06 	adds.w	ip, r4, r6
    718a:	bf2c      	ite	cs
    718c:	2401      	movcs	r4, #1
    718e:	2400      	movcc	r4, #0
    7190:	4427      	add	r7, r4
    7192:	4616      	mov	r6, r2
    7194:	f856 5b04 	ldr.w	r5, [r6], #4
    7198:	eb15 050c 	adds.w	r5, r5, ip
    719c:	bf2c      	ite	cs
    719e:	2401      	movcs	r4, #1
    71a0:	2400      	movcc	r4, #0
    71a2:	443c      	add	r4, r7
    71a4:	6015      	str	r5, [r2, #0]
    for( ; i > 0; i-- )
    71a6:	3801      	subs	r0, #1
        MULADDC_CORE
    71a8:	4632      	mov	r2, r6
    71aa:	3104      	adds	r1, #4
    for( ; i > 0; i-- )
    71ac:	2800      	cmp	r0, #0
    71ae:	d1e7      	bne.n	7180 <mpi_mul_hlp+0x2fa>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    71b0:	6813      	ldr	r3, [r2, #0]
    71b2:	4423      	add	r3, r4
    71b4:	f842 3b04 	str.w	r3, [r2], #4
    71b8:	42a3      	cmp	r3, r4
    71ba:	bf34      	ite	cc
    71bc:	2401      	movcc	r4, #1
    71be:	2400      	movcs	r4, #0
    }
    while( c != 0 );
    71c0:	d3f6      	bcc.n	71b0 <mpi_mul_hlp+0x32a>
}
    71c2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    71c6:	4770      	bx	lr

000071c8 <mbedtls_int_div_int>:
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    71c8:	b322      	cbz	r2, 7214 <mbedtls_int_div_int+0x4c>
{
    71ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    71ce:	4614      	mov	r4, r2
    if( 0 == d || u1 >= d )
    71d0:	4282      	cmp	r2, r0
    71d2:	d805      	bhi.n	71e0 <mbedtls_int_div_int+0x18>
    {
        if (r != NULL) *r = ~0;
    71d4:	b1db      	cbz	r3, 720e <mbedtls_int_div_int+0x46>
    71d6:	f04f 30ff 	mov.w	r0, #4294967295
    71da:	6018      	str	r0, [r3, #0]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    71dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    71e0:	461d      	mov	r5, r3
    dividend  = (mbedtls_t_udbl) u1 << biL;
    71e2:	f04f 0800 	mov.w	r8, #0
    71e6:	4681      	mov	r9, r0
    dividend |= (mbedtls_t_udbl) u0;
    71e8:	ea48 0601 	orr.w	r6, r8, r1
    quotient = dividend / d;
    71ec:	4643      	mov	r3, r8
    71ee:	4630      	mov	r0, r6
    71f0:	4649      	mov	r1, r9
    71f2:	f7f8 fff7 	bl	1e4 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    71f6:	2901      	cmp	r1, #1
    71f8:	bf08      	it	eq
    71fa:	2800      	cmpeq	r0, #0
    71fc:	d301      	bcc.n	7202 <mbedtls_int_div_int+0x3a>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    71fe:	f04f 30ff 	mov.w	r0, #4294967295
    if( r != NULL )
    7202:	2d00      	cmp	r5, #0
    7204:	d0ea      	beq.n	71dc <mbedtls_int_div_int+0x14>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    7206:	fb04 6410 	mls	r4, r4, r0, r6
    720a:	602c      	str	r4, [r5, #0]
    return (mbedtls_mpi_uint) quotient;
    720c:	e7e6      	b.n	71dc <mbedtls_int_div_int+0x14>
        return ( ~0 );
    720e:	f04f 30ff 	mov.w	r0, #4294967295
    7212:	e7e3      	b.n	71dc <mbedtls_int_div_int+0x14>
        if (r != NULL) *r = ~0;
    7214:	b11b      	cbz	r3, 721e <mbedtls_int_div_int+0x56>
    7216:	f04f 30ff 	mov.w	r0, #4294967295
    721a:	6018      	str	r0, [r3, #0]
    721c:	4770      	bx	lr
        return ( ~0 );
    721e:	f04f 30ff 	mov.w	r0, #4294967295
}
    7222:	4770      	bx	lr

00007224 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    7224:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    7226:	688b      	ldr	r3, [r1, #8]
    7228:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    722a:	1ca3      	adds	r3, r4, #2
    722c:	005b      	lsls	r3, r3, #1
    722e:	f003 0308 	and.w	r3, r3, #8
    7232:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    7234:	2120      	movs	r1, #32
    7236:	e006      	b.n	7246 <mpi_montg_init+0x22>
        x *= ( 2 - ( m0 * x ) );
    7238:	fb04 f203 	mul.w	r2, r4, r3
    723c:	f1c2 0202 	rsb	r2, r2, #2
    7240:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    7244:	0849      	lsrs	r1, r1, #1
    7246:	2907      	cmp	r1, #7
    7248:	d8f6      	bhi.n	7238 <mpi_montg_init+0x14>

    *mm = ~x + 1;
    724a:	425b      	negs	r3, r3
    724c:	6003      	str	r3, [r0, #0]
}
    724e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7252:	4770      	bx	lr

00007254 <mbedtls_mpi_zeroize>:
{
    7254:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    7256:	0089      	lsls	r1, r1, #2
    7258:	f7fc fdfa 	bl	3e50 <mbedtls_platform_zeroize>
}
    725c:	bd08      	pop	{r3, pc}

0000725e <mbedtls_mpi_init>:
    X->s = 1;
    725e:	2301      	movs	r3, #1
    7260:	6003      	str	r3, [r0, #0]
    X->n = 0;
    7262:	2300      	movs	r3, #0
    7264:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    7266:	6083      	str	r3, [r0, #8]
}
    7268:	4770      	bx	lr

0000726a <mbedtls_mpi_free>:
    if( X == NULL )
    726a:	b178      	cbz	r0, 728c <mbedtls_mpi_free+0x22>
{
    726c:	b510      	push	{r4, lr}
    726e:	4604      	mov	r4, r0
    if( X->p != NULL )
    7270:	6880      	ldr	r0, [r0, #8]
    7272:	b128      	cbz	r0, 7280 <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    7274:	6861      	ldr	r1, [r4, #4]
    7276:	f7ff ffed 	bl	7254 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    727a:	68a0      	ldr	r0, [r4, #8]
    727c:	f7fc fdd6 	bl	3e2c <mbedtls_free>
    X->s = 1;
    7280:	2301      	movs	r3, #1
    7282:	6023      	str	r3, [r4, #0]
    X->n = 0;
    7284:	2300      	movs	r3, #0
    7286:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    7288:	60a3      	str	r3, [r4, #8]
}
    728a:	bd10      	pop	{r4, pc}
    728c:	4770      	bx	lr

0000728e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    728e:	f242 7310 	movw	r3, #10000	; 0x2710
    7292:	4299      	cmp	r1, r3
    7294:	d81e      	bhi.n	72d4 <mbedtls_mpi_grow+0x46>
    if( X->n < nblimbs )
    7296:	6843      	ldr	r3, [r0, #4]
    7298:	428b      	cmp	r3, r1
    729a:	d301      	bcc.n	72a0 <mbedtls_mpi_grow+0x12>
    return( 0 );
    729c:	2000      	movs	r0, #0
}
    729e:	4770      	bx	lr
{
    72a0:	b570      	push	{r4, r5, r6, lr}
    72a2:	460d      	mov	r5, r1
    72a4:	4604      	mov	r4, r0
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    72a6:	2104      	movs	r1, #4
    72a8:	4628      	mov	r0, r5
    72aa:	f7fc fdb7 	bl	3e1c <mbedtls_calloc>
    72ae:	4606      	mov	r6, r0
    72b0:	b198      	cbz	r0, 72da <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    72b2:	68a1      	ldr	r1, [r4, #8]
    72b4:	b151      	cbz	r1, 72cc <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    72b6:	6862      	ldr	r2, [r4, #4]
    72b8:	0092      	lsls	r2, r2, #2
    72ba:	f7ff f9c4 	bl	6646 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    72be:	6861      	ldr	r1, [r4, #4]
    72c0:	68a0      	ldr	r0, [r4, #8]
    72c2:	f7ff ffc7 	bl	7254 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    72c6:	68a0      	ldr	r0, [r4, #8]
    72c8:	f7fc fdb0 	bl	3e2c <mbedtls_free>
        X->n = nblimbs;
    72cc:	6065      	str	r5, [r4, #4]
        X->p = p;
    72ce:	60a6      	str	r6, [r4, #8]
    return( 0 );
    72d0:	2000      	movs	r0, #0
}
    72d2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    72d4:	f06f 000f 	mvn.w	r0, #15
    72d8:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    72da:	f06f 000f 	mvn.w	r0, #15
    72de:	e7f8      	b.n	72d2 <mbedtls_mpi_grow+0x44>

000072e0 <mbedtls_mpi_copy>:
{
    72e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    72e2:	4288      	cmp	r0, r1
    72e4:	d02d      	beq.n	7342 <mbedtls_mpi_copy+0x62>
    72e6:	460e      	mov	r6, r1
    72e8:	4605      	mov	r5, r0
    if( Y->p == NULL )
    72ea:	6888      	ldr	r0, [r1, #8]
    72ec:	b138      	cbz	r0, 72fe <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    72ee:	684b      	ldr	r3, [r1, #4]
    72f0:	3b01      	subs	r3, #1
    72f2:	b14b      	cbz	r3, 7308 <mbedtls_mpi_copy+0x28>
        if( Y->p[i] != 0 )
    72f4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    72f8:	b932      	cbnz	r2, 7308 <mbedtls_mpi_copy+0x28>
    for( i = Y->n - 1; i > 0; i-- )
    72fa:	3b01      	subs	r3, #1
    72fc:	e7f9      	b.n	72f2 <mbedtls_mpi_copy+0x12>
        mbedtls_mpi_free( X );
    72fe:	4628      	mov	r0, r5
    7300:	f7ff ffb3 	bl	726a <mbedtls_mpi_free>
        return( 0 );
    7304:	2700      	movs	r7, #0
    7306:	e01a      	b.n	733e <mbedtls_mpi_copy+0x5e>
    i++;
    7308:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    730a:	6833      	ldr	r3, [r6, #0]
    730c:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    730e:	686a      	ldr	r2, [r5, #4]
    7310:	42a2      	cmp	r2, r4
    7312:	d206      	bcs.n	7322 <mbedtls_mpi_copy+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    7314:	4621      	mov	r1, r4
    7316:	4628      	mov	r0, r5
    7318:	f7ff ffb9 	bl	728e <mbedtls_mpi_grow>
    731c:	4607      	mov	r7, r0
    731e:	b148      	cbz	r0, 7334 <mbedtls_mpi_copy+0x54>
    7320:	e00d      	b.n	733e <mbedtls_mpi_copy+0x5e>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7322:	68a8      	ldr	r0, [r5, #8]
    7324:	1b12      	subs	r2, r2, r4
    7326:	0092      	lsls	r2, r2, #2
    7328:	2100      	movs	r1, #0
    732a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    732e:	f7ff f9af 	bl	6690 <memset>
    int ret = 0;
    7332:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    7334:	00a2      	lsls	r2, r4, #2
    7336:	68b1      	ldr	r1, [r6, #8]
    7338:	68a8      	ldr	r0, [r5, #8]
    733a:	f7ff f984 	bl	6646 <memcpy>
}
    733e:	4638      	mov	r0, r7
    7340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    7342:	2700      	movs	r7, #0
    7344:	e7fb      	b.n	733e <mbedtls_mpi_copy+0x5e>

00007346 <mbedtls_mpi_lset>:
{
    7346:	b570      	push	{r4, r5, r6, lr}
    7348:	4604      	mov	r4, r0
    734a:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    734c:	2101      	movs	r1, #1
    734e:	f7ff ff9e 	bl	728e <mbedtls_mpi_grow>
    7352:	4605      	mov	r5, r0
    7354:	b108      	cbz	r0, 735a <mbedtls_mpi_lset+0x14>
}
    7356:	4628      	mov	r0, r5
    7358:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    735a:	6862      	ldr	r2, [r4, #4]
    735c:	0092      	lsls	r2, r2, #2
    735e:	2100      	movs	r1, #0
    7360:	68a0      	ldr	r0, [r4, #8]
    7362:	f7ff f995 	bl	6690 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    7366:	68a3      	ldr	r3, [r4, #8]
    7368:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    736c:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    7370:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    7372:	2e00      	cmp	r6, #0
    7374:	db02      	blt.n	737c <mbedtls_mpi_lset+0x36>
    7376:	2301      	movs	r3, #1
    7378:	6023      	str	r3, [r4, #0]
    return( ret );
    737a:	e7ec      	b.n	7356 <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    737c:	f04f 33ff 	mov.w	r3, #4294967295
    7380:	e7fa      	b.n	7378 <mbedtls_mpi_lset+0x32>

00007382 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    7382:	6843      	ldr	r3, [r0, #4]
    7384:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7388:	d209      	bcs.n	739e <mbedtls_mpi_get_bit+0x1c>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    738a:	6883      	ldr	r3, [r0, #8]
    738c:	094a      	lsrs	r2, r1, #5
    738e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7392:	f001 011f 	and.w	r1, r1, #31
    7396:	40c8      	lsrs	r0, r1
    7398:	f000 0001 	and.w	r0, r0, #1
    739c:	4770      	bx	lr
        return( 0 );
    739e:	2000      	movs	r0, #0
}
    73a0:	4770      	bx	lr

000073a2 <mbedtls_mpi_bitlen>:
{
    73a2:	b510      	push	{r4, lr}
    if( X->n == 0 )
    73a4:	6844      	ldr	r4, [r0, #4]
    73a6:	b18c      	cbz	r4, 73cc <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    73a8:	3c01      	subs	r4, #1
    73aa:	b12c      	cbz	r4, 73b8 <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
    73ac:	6883      	ldr	r3, [r0, #8]
    73ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    73b2:	b90b      	cbnz	r3, 73b8 <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
    73b4:	3c01      	subs	r4, #1
    73b6:	e7f8      	b.n	73aa <mbedtls_mpi_bitlen+0x8>
    j = biL - mbedtls_clz( X->p[i] );
    73b8:	6883      	ldr	r3, [r0, #8]
    73ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    73be:	f7ff fd00 	bl	6dc2 <mbedtls_clz>
    73c2:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    73c6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
}
    73ca:	bd10      	pop	{r4, pc}
        return( 0 );
    73cc:	2000      	movs	r0, #0
    73ce:	e7fc      	b.n	73ca <mbedtls_mpi_bitlen+0x28>

000073d0 <mbedtls_mpi_size>:
{
    73d0:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    73d2:	f7ff ffe6 	bl	73a2 <mbedtls_mpi_bitlen>
    73d6:	3007      	adds	r0, #7
}
    73d8:	08c0      	lsrs	r0, r0, #3
    73da:	bd08      	pop	{r3, pc}

000073dc <mbedtls_mpi_read_binary>:
{
    73dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73e0:	4606      	mov	r6, r0
    73e2:	4688      	mov	r8, r1
    73e4:	4615      	mov	r5, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    73e6:	f012 0103 	ands.w	r1, r2, #3
    73ea:	bf18      	it	ne
    73ec:	2101      	movne	r1, #1
    73ee:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    73f2:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    73f6:	6843      	ldr	r3, [r0, #4]
    73f8:	42a3      	cmp	r3, r4
    73fa:	d00a      	beq.n	7412 <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    73fc:	f7ff ff35 	bl	726a <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    7400:	4630      	mov	r0, r6
    7402:	f7ff ff2c 	bl	725e <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    7406:	4621      	mov	r1, r4
    7408:	4630      	mov	r0, r6
    740a:	f7ff ff40 	bl	728e <mbedtls_mpi_grow>
    740e:	4607      	mov	r7, r0
    7410:	b990      	cbnz	r0, 7438 <mbedtls_mpi_read_binary+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7412:	2100      	movs	r1, #0
    7414:	4630      	mov	r0, r6
    7416:	f7ff ff96 	bl	7346 <mbedtls_mpi_lset>
    741a:	4607      	mov	r7, r0
    741c:	b960      	cbnz	r0, 7438 <mbedtls_mpi_read_binary+0x5c>
    if( buf != NULL )
    741e:	f1b8 0f00 	cmp.w	r8, #0
    7422:	d009      	beq.n	7438 <mbedtls_mpi_read_binary+0x5c>
        Xp = (unsigned char*) X->p;
    7424:	68b0      	ldr	r0, [r6, #8]
        memcpy( Xp + overhead, buf, buflen );
    7426:	462a      	mov	r2, r5
    7428:	4641      	mov	r1, r8
    742a:	4448      	add	r0, r9
    742c:	f7ff f90b 	bl	6646 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    7430:	4621      	mov	r1, r4
    7432:	68b0      	ldr	r0, [r6, #8]
    7434:	f7ff fce8 	bl	6e08 <mpi_bigendian_to_host>
}
    7438:	4638      	mov	r0, r7
    743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000743e <mbedtls_mpi_write_binary>:
{
    743e:	b570      	push	{r4, r5, r6, lr}
    7440:	4605      	mov	r5, r0
    7442:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    7444:	686e      	ldr	r6, [r5, #4]
    7446:	00b6      	lsls	r6, r6, #2
    if( stored_bytes < buflen )
    7448:	4296      	cmp	r6, r2
    744a:	d30f      	bcc.n	746c <mbedtls_mpi_write_binary+0x2e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    744c:	4613      	mov	r3, r2
    744e:	42b3      	cmp	r3, r6
    7450:	d213      	bcs.n	747a <mbedtls_mpi_write_binary+0x3c>
            if( GET_BYTE( X, i ) != 0 )
    7452:	68ac      	ldr	r4, [r5, #8]
    7454:	f023 0103 	bic.w	r1, r3, #3
    7458:	5861      	ldr	r1, [r4, r1]
    745a:	f003 0403 	and.w	r4, r3, #3
    745e:	00e4      	lsls	r4, r4, #3
    7460:	40e1      	lsrs	r1, r4
    7462:	f011 0fff 	tst.w	r1, #255	; 0xff
    7466:	d11a      	bne.n	749e <mbedtls_mpi_write_binary+0x60>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7468:	3301      	adds	r3, #1
    746a:	e7f0      	b.n	744e <mbedtls_mpi_write_binary+0x10>
        p = buf + buflen - stored_bytes;
    746c:	1b92      	subs	r2, r2, r6
    746e:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    7470:	2100      	movs	r1, #0
    7472:	f7ff f90d 	bl	6690 <memset>
        p = buf + buflen - stored_bytes;
    7476:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    7478:	4632      	mov	r2, r6
    for( i = 0; i < bytes_to_copy; i++ )
    747a:	2300      	movs	r3, #0
    747c:	e00b      	b.n	7496 <mbedtls_mpi_write_binary+0x58>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    747e:	68ac      	ldr	r4, [r5, #8]
    7480:	f023 0103 	bic.w	r1, r3, #3
    7484:	5864      	ldr	r4, [r4, r1]
    7486:	f003 0103 	and.w	r1, r3, #3
    748a:	00c9      	lsls	r1, r1, #3
    748c:	40cc      	lsrs	r4, r1
    748e:	1ad1      	subs	r1, r2, r3
    7490:	3901      	subs	r1, #1
    7492:	5444      	strb	r4, [r0, r1]
    for( i = 0; i < bytes_to_copy; i++ )
    7494:	3301      	adds	r3, #1
    7496:	429a      	cmp	r2, r3
    7498:	d8f1      	bhi.n	747e <mbedtls_mpi_write_binary+0x40>
    return( 0 );
    749a:	2000      	movs	r0, #0
}
    749c:	bd70      	pop	{r4, r5, r6, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    749e:	f06f 0007 	mvn.w	r0, #7
    74a2:	e7fb      	b.n	749c <mbedtls_mpi_write_binary+0x5e>

000074a4 <mbedtls_mpi_shift_l>:
{
    74a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74a6:	4605      	mov	r5, r0
    74a8:	460f      	mov	r7, r1
    v0 = count / (biL    );
    74aa:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    74ac:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    74b0:	f7ff ff77 	bl	73a2 <mbedtls_mpi_bitlen>
    74b4:	4438      	add	r0, r7
    if( X->n * biL < i )
    74b6:	686b      	ldr	r3, [r5, #4]
    74b8:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    74bc:	d802      	bhi.n	74c4 <mbedtls_mpi_shift_l+0x20>
    if( v0 > 0 )
    74be:	b334      	cbz	r4, 750e <mbedtls_mpi_shift_l+0x6a>
        for( i = X->n; i > v0; i-- )
    74c0:	686b      	ldr	r3, [r5, #4]
    74c2:	e017      	b.n	74f4 <mbedtls_mpi_shift_l+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    74c4:	f010 011f 	ands.w	r1, r0, #31
    74c8:	bf18      	it	ne
    74ca:	2101      	movne	r1, #1
    74cc:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    74d0:	4628      	mov	r0, r5
    74d2:	f7ff fedc 	bl	728e <mbedtls_mpi_grow>
    74d6:	4603      	mov	r3, r0
    74d8:	2800      	cmp	r0, #0
    74da:	d0f0      	beq.n	74be <mbedtls_mpi_shift_l+0x1a>
cleanup:
    74dc:	e032      	b.n	7544 <mbedtls_mpi_shift_l+0xa0>
            X->p[i - 1] = X->p[i - v0 - 1];
    74de:	68a9      	ldr	r1, [r5, #8]
    74e0:	1b1a      	subs	r2, r3, r4
    74e2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    74e6:	181f      	adds	r7, r3, r0
    74e8:	4402      	add	r2, r0
    74ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    74ee:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    74f2:	3b01      	subs	r3, #1
    74f4:	42a3      	cmp	r3, r4
    74f6:	d8f2      	bhi.n	74de <mbedtls_mpi_shift_l+0x3a>
    74f8:	e007      	b.n	750a <mbedtls_mpi_shift_l+0x66>
            X->p[i - 1] = 0;
    74fa:	68a9      	ldr	r1, [r5, #8]
    74fc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7500:	3a01      	subs	r2, #1
    7502:	2000      	movs	r0, #0
    7504:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    7508:	3b01      	subs	r3, #1
    750a:	2b00      	cmp	r3, #0
    750c:	d1f5      	bne.n	74fa <mbedtls_mpi_shift_l+0x56>
    if( t1 > 0 )
    750e:	b10e      	cbz	r6, 7514 <mbedtls_mpi_shift_l+0x70>
    mbedtls_mpi_uint r0 = 0, r1;
    7510:	2700      	movs	r7, #0
    7512:	e013      	b.n	753c <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    7514:	2300      	movs	r3, #0
    7516:	e015      	b.n	7544 <mbedtls_mpi_shift_l+0xa0>
            r1 = X->p[i] >> (biL - t1);
    7518:	68a8      	ldr	r0, [r5, #8]
    751a:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    751e:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    7522:	fa01 f206 	lsl.w	r2, r1, r6
    7526:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    752a:	68a8      	ldr	r0, [r5, #8]
    752c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    7530:	433a      	orrs	r2, r7
    7532:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    7536:	3401      	adds	r4, #1
            r0 = r1;
    7538:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    753c:	6869      	ldr	r1, [r5, #4]
    753e:	42a1      	cmp	r1, r4
    7540:	d8ea      	bhi.n	7518 <mbedtls_mpi_shift_l+0x74>
    ret = 0;
    7542:	2300      	movs	r3, #0
}
    7544:	4618      	mov	r0, r3
    7546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007548 <mbedtls_mpi_shift_r>:
{
    7548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    v0 = count /  biL;
    754a:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    754c:	6843      	ldr	r3, [r0, #4]
    754e:	42a3      	cmp	r3, r4
    7550:	d30b      	bcc.n	756a <mbedtls_mpi_shift_r+0x22>
    7552:	f001 011f 	and.w	r1, r1, #31
    7556:	d006      	beq.n	7566 <mbedtls_mpi_shift_r+0x1e>
    if( v0 > 0 )
    7558:	b9bc      	cbnz	r4, 758a <mbedtls_mpi_shift_r+0x42>
    if( v1 > 0 )
    755a:	2900      	cmp	r1, #0
    755c:	d03a      	beq.n	75d4 <mbedtls_mpi_shift_r+0x8c>
        for( i = X->n; i > 0; i-- )
    755e:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    7560:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    7564:	e032      	b.n	75cc <mbedtls_mpi_shift_r+0x84>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7566:	2900      	cmp	r1, #0
    7568:	d0f6      	beq.n	7558 <mbedtls_mpi_shift_r+0x10>
        return mbedtls_mpi_lset( X, 0 );
    756a:	2100      	movs	r1, #0
    756c:	f7ff feeb 	bl	7346 <mbedtls_mpi_lset>
}
    7570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            X->p[i] = X->p[i + v0];
    7572:	6882      	ldr	r2, [r0, #8]
    7574:	191d      	adds	r5, r3, r4
    7576:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    757a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    757e:	3301      	adds	r3, #1
    7580:	6842      	ldr	r2, [r0, #4]
    7582:	1b12      	subs	r2, r2, r4
    7584:	429a      	cmp	r2, r3
    7586:	d8f4      	bhi.n	7572 <mbedtls_mpi_shift_r+0x2a>
    7588:	e006      	b.n	7598 <mbedtls_mpi_shift_r+0x50>
    758a:	2300      	movs	r3, #0
    758c:	e7f8      	b.n	7580 <mbedtls_mpi_shift_r+0x38>
            X->p[i] = 0;
    758e:	6882      	ldr	r2, [r0, #8]
    7590:	2400      	movs	r4, #0
    7592:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    7596:	3301      	adds	r3, #1
    7598:	6842      	ldr	r2, [r0, #4]
    759a:	429a      	cmp	r2, r3
    759c:	d8f7      	bhi.n	758e <mbedtls_mpi_shift_r+0x46>
    759e:	e7dc      	b.n	755a <mbedtls_mpi_shift_r+0x12>
            r1 = X->p[i - 1] << (biL - v1);
    75a0:	6887      	ldr	r7, [r0, #8]
    75a2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    75a6:	3b01      	subs	r3, #1
    75a8:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
    75ac:	f1c1 0420 	rsb	r4, r1, #32
            X->p[i - 1] >>= v1;
    75b0:	fa26 f501 	lsr.w	r5, r6, r1
    75b4:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
            X->p[i - 1] |= r0;
    75b8:	6887      	ldr	r7, [r0, #8]
    75ba:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
    75be:	ea45 050c 	orr.w	r5, r5, ip
    75c2:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    75c6:	3a01      	subs	r2, #1
            r0 = r1;
    75c8:	fa06 fc04 	lsl.w	ip, r6, r4
        for( i = X->n; i > 0; i-- )
    75cc:	2a00      	cmp	r2, #0
    75ce:	d1e7      	bne.n	75a0 <mbedtls_mpi_shift_r+0x58>
    return( 0 );
    75d0:	2000      	movs	r0, #0
    75d2:	e7cd      	b.n	7570 <mbedtls_mpi_shift_r+0x28>
    75d4:	2000      	movs	r0, #0
    75d6:	e7cb      	b.n	7570 <mbedtls_mpi_shift_r+0x28>

000075d8 <mbedtls_mpi_cmp_abs>:
{
    75d8:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    75da:	6843      	ldr	r3, [r0, #4]
    75dc:	b143      	cbz	r3, 75f0 <mbedtls_mpi_cmp_abs+0x18>
        if( X->p[i - 1] != 0 )
    75de:	6884      	ldr	r4, [r0, #8]
    75e0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    75e4:	3a01      	subs	r2, #1
    75e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    75ea:	b90a      	cbnz	r2, 75f0 <mbedtls_mpi_cmp_abs+0x18>
    for( i = X->n; i > 0; i-- )
    75ec:	3b01      	subs	r3, #1
    75ee:	e7f5      	b.n	75dc <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    75f0:	684a      	ldr	r2, [r1, #4]
    75f2:	b142      	cbz	r2, 7606 <mbedtls_mpi_cmp_abs+0x2e>
        if( Y->p[j - 1] != 0 )
    75f4:	688d      	ldr	r5, [r1, #8]
    75f6:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    75fa:	3c01      	subs	r4, #1
    75fc:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    7600:	b90c      	cbnz	r4, 7606 <mbedtls_mpi_cmp_abs+0x2e>
    for( j = Y->n; j > 0; j-- )
    7602:	3a01      	subs	r2, #1
    7604:	e7f5      	b.n	75f2 <mbedtls_mpi_cmp_abs+0x1a>
    if( i == 0 && j == 0 )
    7606:	b903      	cbnz	r3, 760a <mbedtls_mpi_cmp_abs+0x32>
    7608:	b19a      	cbz	r2, 7632 <mbedtls_mpi_cmp_abs+0x5a>
    if( i > j ) return(  1 );
    760a:	4293      	cmp	r3, r2
    760c:	d813      	bhi.n	7636 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    760e:	d315      	bcc.n	763c <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    7610:	b16b      	cbz	r3, 762e <mbedtls_mpi_cmp_abs+0x56>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    7612:	6884      	ldr	r4, [r0, #8]
    7614:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7618:	3a01      	subs	r2, #1
    761a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    761e:	688d      	ldr	r5, [r1, #8]
    7620:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    7624:	4294      	cmp	r4, r2
    7626:	d80c      	bhi.n	7642 <mbedtls_mpi_cmp_abs+0x6a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7628:	d30d      	bcc.n	7646 <mbedtls_mpi_cmp_abs+0x6e>
    for( ; i > 0; i-- )
    762a:	3b01      	subs	r3, #1
    762c:	e7f0      	b.n	7610 <mbedtls_mpi_cmp_abs+0x38>
    return( 0 );
    762e:	2000      	movs	r0, #0
    7630:	e002      	b.n	7638 <mbedtls_mpi_cmp_abs+0x60>
        return( 0 );
    7632:	2000      	movs	r0, #0
    7634:	e000      	b.n	7638 <mbedtls_mpi_cmp_abs+0x60>
    if( i > j ) return(  1 );
    7636:	2001      	movs	r0, #1
}
    7638:	bc30      	pop	{r4, r5}
    763a:	4770      	bx	lr
    if( j > i ) return( -1 );
    763c:	f04f 30ff 	mov.w	r0, #4294967295
    7640:	e7fa      	b.n	7638 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    7642:	2001      	movs	r0, #1
    7644:	e7f8      	b.n	7638 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7646:	f04f 30ff 	mov.w	r0, #4294967295
    764a:	e7f5      	b.n	7638 <mbedtls_mpi_cmp_abs+0x60>

0000764c <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7650:	b083      	sub	sp, #12
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
    7652:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7654:	6865      	ldr	r5, [r4, #4]
    7656:	6854      	ldr	r4, [r2, #4]
    7658:	3401      	adds	r4, #1
    765a:	42a5      	cmp	r5, r4
    765c:	d35e      	bcc.n	771c <mpi_montmul+0xd0>
    765e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7660:	68a4      	ldr	r4, [r4, #8]
    7662:	2c00      	cmp	r4, #0
    7664:	d05d      	beq.n	7722 <mpi_montmul+0xd6>
    7666:	9301      	str	r3, [sp, #4]
    7668:	4691      	mov	r9, r2
    766a:	468b      	mov	fp, r1
    766c:	4682      	mov	sl, r0
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
    766e:	00aa      	lsls	r2, r5, #2
    7670:	2100      	movs	r1, #0
    7672:	4620      	mov	r0, r4
    7674:	f7ff f80c 	bl	6690 <memset>

    d = T->p;
    7678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    767a:	689d      	ldr	r5, [r3, #8]
    n = N->n;
    767c:	f8d9 8004 	ldr.w	r8, [r9, #4]
    m = ( B->n < n ) ? B->n : n;
    7680:	f8db 3004 	ldr.w	r3, [fp, #4]
    7684:	4543      	cmp	r3, r8
    7686:	bf28      	it	cs
    7688:	4643      	movcs	r3, r8
    768a:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    768c:	2600      	movs	r6, #0
    768e:	e021      	b.n	76d4 <mpi_montmul+0x88>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    7690:	f8da 3008 	ldr.w	r3, [sl, #8]
    7694:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7698:	682b      	ldr	r3, [r5, #0]
    769a:	f8db 1008 	ldr.w	r1, [fp, #8]
    769e:	680c      	ldr	r4, [r1, #0]
    76a0:	fb07 3404 	mla	r4, r7, r4, r3
    76a4:	9b01      	ldr	r3, [sp, #4]
    76a6:	fb03 f404 	mul.w	r4, r3, r4

        mpi_mul_hlp( m, B->p, d, u0 );
    76aa:	463b      	mov	r3, r7
    76ac:	462a      	mov	r2, r5
    76ae:	9800      	ldr	r0, [sp, #0]
    76b0:	f7ff fbe9 	bl	6e86 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    76b4:	4623      	mov	r3, r4
    76b6:	462a      	mov	r2, r5
    76b8:	f8d9 1008 	ldr.w	r1, [r9, #8]
    76bc:	4640      	mov	r0, r8
    76be:	f7ff fbe2 	bl	6e86 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    76c2:	1d2a      	adds	r2, r5, #4
    76c4:	602f      	str	r7, [r5, #0]
    76c6:	f108 0301 	add.w	r3, r8, #1
    76ca:	2100      	movs	r1, #0
    76cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for( i = 0; i < n; i++ )
    76d0:	3601      	adds	r6, #1
        *d++ = u0; d[n + 1] = 0;
    76d2:	4615      	mov	r5, r2
    for( i = 0; i < n; i++ )
    76d4:	4546      	cmp	r6, r8
    76d6:	d3db      	bcc.n	7690 <mpi_montmul+0x44>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
    76d8:	f108 0201 	add.w	r2, r8, #1
    76dc:	0092      	lsls	r2, r2, #2
    76de:	4629      	mov	r1, r5
    76e0:	f8da 0008 	ldr.w	r0, [sl, #8]
    76e4:	f7fe ffaf 	bl	6646 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
    76e8:	4649      	mov	r1, r9
    76ea:	4650      	mov	r0, sl
    76ec:	f7ff ff74 	bl	75d8 <mbedtls_mpi_cmp_abs>
    76f0:	2800      	cmp	r0, #0
    76f2:	db0a      	blt.n	770a <mpi_montmul+0xbe>
        mpi_sub_hlp( n, N->p, A->p );
    76f4:	f8da 2008 	ldr.w	r2, [sl, #8]
    76f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
    76fc:	4640      	mov	r0, r8
    76fe:	f7ff fb9b 	bl	6e38 <mpi_sub_hlp>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
    7702:	2000      	movs	r0, #0
}
    7704:	b003      	add	sp, #12
    7706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mpi_sub_hlp( n, A->p, T->p );
    770a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    770c:	689a      	ldr	r2, [r3, #8]
    770e:	f8da 1008 	ldr.w	r1, [sl, #8]
    7712:	4640      	mov	r0, r8
    7714:	f7ff fb90 	bl	6e38 <mpi_sub_hlp>
    return( 0 );
    7718:	2000      	movs	r0, #0
    771a:	e7f3      	b.n	7704 <mpi_montmul+0xb8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    771c:	f06f 0003 	mvn.w	r0, #3
    7720:	e7f0      	b.n	7704 <mpi_montmul+0xb8>
    7722:	f06f 0003 	mvn.w	r0, #3
    7726:	e7ed      	b.n	7704 <mpi_montmul+0xb8>

00007728 <mpi_montred>:
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    7728:	b510      	push	{r4, lr}
    772a:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    772c:	2401      	movs	r4, #1
    772e:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    7730:	9402      	str	r4, [sp, #8]
    7732:	9403      	str	r4, [sp, #12]
    U.p = &z;
    7734:	ac05      	add	r4, sp, #20
    7736:	9404      	str	r4, [sp, #16]

    return( mpi_montmul( A, &U, N, mm, T ) );
    7738:	9300      	str	r3, [sp, #0]
    773a:	4613      	mov	r3, r2
    773c:	460a      	mov	r2, r1
    773e:	a902      	add	r1, sp, #8
    7740:	f7ff ff84 	bl	764c <mpi_montmul>
}
    7744:	b006      	add	sp, #24
    7746:	bd10      	pop	{r4, pc}

00007748 <mbedtls_mpi_cmp_mpi>:
{
    7748:	b470      	push	{r4, r5, r6}
    for( i = X->n; i > 0; i-- )
    774a:	6843      	ldr	r3, [r0, #4]
    774c:	b143      	cbz	r3, 7760 <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
    774e:	6884      	ldr	r4, [r0, #8]
    7750:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7754:	3a01      	subs	r2, #1
    7756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    775a:	b90a      	cbnz	r2, 7760 <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
    775c:	3b01      	subs	r3, #1
    775e:	e7f5      	b.n	774c <mbedtls_mpi_cmp_mpi+0x4>
    for( j = Y->n; j > 0; j-- )
    7760:	684a      	ldr	r2, [r1, #4]
    7762:	b142      	cbz	r2, 7776 <mbedtls_mpi_cmp_mpi+0x2e>
        if( Y->p[j - 1] != 0 )
    7764:	688d      	ldr	r5, [r1, #8]
    7766:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    776a:	3c01      	subs	r4, #1
    776c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    7770:	b90c      	cbnz	r4, 7776 <mbedtls_mpi_cmp_mpi+0x2e>
    for( j = Y->n; j > 0; j-- )
    7772:	3a01      	subs	r2, #1
    7774:	e7f5      	b.n	7762 <mbedtls_mpi_cmp_mpi+0x1a>
    if( i == 0 && j == 0 )
    7776:	b903      	cbnz	r3, 777a <mbedtls_mpi_cmp_mpi+0x32>
    7778:	b352      	cbz	r2, 77d0 <mbedtls_mpi_cmp_mpi+0x88>
    if( i > j ) return(  X->s );
    777a:	4293      	cmp	r3, r2
    777c:	d80f      	bhi.n	779e <mbedtls_mpi_cmp_mpi+0x56>
    if( j > i ) return( -Y->s );
    777e:	4293      	cmp	r3, r2
    7780:	d311      	bcc.n	77a6 <mbedtls_mpi_cmp_mpi+0x5e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7782:	6805      	ldr	r5, [r0, #0]
    7784:	2d00      	cmp	r5, #0
    7786:	dd02      	ble.n	778e <mbedtls_mpi_cmp_mpi+0x46>
    7788:	680a      	ldr	r2, [r1, #0]
    778a:	2a00      	cmp	r2, #0
    778c:	db22      	blt.n	77d4 <mbedtls_mpi_cmp_mpi+0x8c>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    778e:	680a      	ldr	r2, [r1, #0]
    7790:	2a00      	cmp	r2, #0
    7792:	dd0c      	ble.n	77ae <mbedtls_mpi_cmp_mpi+0x66>
    7794:	2d00      	cmp	r5, #0
    7796:	da0a      	bge.n	77ae <mbedtls_mpi_cmp_mpi+0x66>
    7798:	f04f 35ff 	mov.w	r5, #4294967295
    779c:	e000      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
    if( i > j ) return(  X->s );
    779e:	6805      	ldr	r5, [r0, #0]
}
    77a0:	4628      	mov	r0, r5
    77a2:	bc70      	pop	{r4, r5, r6}
    77a4:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    77a6:	680d      	ldr	r5, [r1, #0]
    77a8:	426d      	negs	r5, r5
    77aa:	e7f9      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
    for( ; i > 0; i-- )
    77ac:	3b01      	subs	r3, #1
    77ae:	b16b      	cbz	r3, 77cc <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    77b0:	6884      	ldr	r4, [r0, #8]
    77b2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    77b6:	3a01      	subs	r2, #1
    77b8:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    77bc:	688e      	ldr	r6, [r1, #8]
    77be:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    77c2:	4294      	cmp	r4, r2
    77c4:	d8ec      	bhi.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    77c6:	d2f1      	bcs.n	77ac <mbedtls_mpi_cmp_mpi+0x64>
    77c8:	426d      	negs	r5, r5
    77ca:	e7e9      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    77cc:	2500      	movs	r5, #0
    77ce:	e7e7      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
        return( 0 );
    77d0:	2500      	movs	r5, #0
    77d2:	e7e5      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    77d4:	2501      	movs	r5, #1
    77d6:	e7e3      	b.n	77a0 <mbedtls_mpi_cmp_mpi+0x58>

000077d8 <mbedtls_mpi_cmp_int>:
{
    77d8:	b500      	push	{lr}
    77da:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    77dc:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    77e0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    77e4:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    77e6:	2900      	cmp	r1, #0
    77e8:	db0b      	blt.n	7802 <mbedtls_mpi_cmp_int+0x2a>
    77ea:	2301      	movs	r3, #1
    77ec:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    77ee:	2301      	movs	r3, #1
    77f0:	9302      	str	r3, [sp, #8]
    Y.p = p;
    77f2:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    77f6:	a901      	add	r1, sp, #4
    77f8:	f7ff ffa6 	bl	7748 <mbedtls_mpi_cmp_mpi>
}
    77fc:	b005      	add	sp, #20
    77fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    7802:	f04f 33ff 	mov.w	r3, #4294967295
    7806:	e7f1      	b.n	77ec <mbedtls_mpi_cmp_int+0x14>

00007808 <mbedtls_mpi_add_abs>:
{
    7808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    780a:	4607      	mov	r7, r0
    780c:	4614      	mov	r4, r2
    if( X == B )
    780e:	4290      	cmp	r0, r2
    7810:	d014      	beq.n	783c <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    7812:	42b9      	cmp	r1, r7
    7814:	d005      	beq.n	7822 <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7816:	4638      	mov	r0, r7
    7818:	f7ff fd62 	bl	72e0 <mbedtls_mpi_copy>
    781c:	4601      	mov	r1, r0
    781e:	2800      	cmp	r0, #0
    7820:	d144      	bne.n	78ac <mbedtls_mpi_add_abs+0xa4>
    X->s = 1;
    7822:	2301      	movs	r3, #1
    7824:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    7826:	6865      	ldr	r5, [r4, #4]
    7828:	b15d      	cbz	r5, 7842 <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    782a:	68a2      	ldr	r2, [r4, #8]
    782c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7830:	3b01      	subs	r3, #1
    7832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7836:	b923      	cbnz	r3, 7842 <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    7838:	3d01      	subs	r5, #1
    783a:	e7f5      	b.n	7828 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    783c:	460c      	mov	r4, r1
    783e:	4601      	mov	r1, r0
    7840:	e7e7      	b.n	7812 <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7842:	4629      	mov	r1, r5
    7844:	4638      	mov	r0, r7
    7846:	f7ff fd22 	bl	728e <mbedtls_mpi_grow>
    784a:	4601      	mov	r1, r0
    784c:	bb70      	cbnz	r0, 78ac <mbedtls_mpi_add_abs+0xa4>
    o = B->p; p = X->p; c = 0;
    784e:	f8d4 c008 	ldr.w	ip, [r4, #8]
    7852:	68bb      	ldr	r3, [r7, #8]
    7854:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    7856:	4626      	mov	r6, r4
    7858:	e00e      	b.n	7878 <mbedtls_mpi_add_abs+0x70>
        tmp= *o;
    785a:	f85c 0b04 	ldr.w	r0, [ip], #4
        *p +=  c; c  = ( *p <  c );
    785e:	681a      	ldr	r2, [r3, #0]
    7860:	18a4      	adds	r4, r4, r2
    7862:	bf2c      	ite	cs
    7864:	2201      	movcs	r2, #1
    7866:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    7868:	4404      	add	r4, r0
    786a:	f843 4b04 	str.w	r4, [r3], #4
    786e:	4284      	cmp	r4, r0
    7870:	bf2c      	ite	cs
    7872:	4614      	movcs	r4, r2
    7874:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    7876:	3601      	adds	r6, #1
    7878:	42ae      	cmp	r6, r5
    787a:	d3ee      	bcc.n	785a <mbedtls_mpi_add_abs+0x52>
    787c:	e008      	b.n	7890 <mbedtls_mpi_add_abs+0x88>
        *p += c; c = ( *p < c ); i++; p++;
    787e:	681a      	ldr	r2, [r3, #0]
    7880:	4422      	add	r2, r4
    7882:	f843 2b04 	str.w	r2, [r3], #4
    7886:	42a2      	cmp	r2, r4
    7888:	bf2c      	ite	cs
    788a:	2400      	movcs	r4, #0
    788c:	2401      	movcc	r4, #1
    788e:	3601      	adds	r6, #1
    while( c != 0 )
    7890:	b164      	cbz	r4, 78ac <mbedtls_mpi_add_abs+0xa4>
        if( i >= X->n )
    7892:	687a      	ldr	r2, [r7, #4]
    7894:	42b2      	cmp	r2, r6
    7896:	d8f2      	bhi.n	787e <mbedtls_mpi_add_abs+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7898:	1c71      	adds	r1, r6, #1
    789a:	4638      	mov	r0, r7
    789c:	f7ff fcf7 	bl	728e <mbedtls_mpi_grow>
    78a0:	4601      	mov	r1, r0
    78a2:	b918      	cbnz	r0, 78ac <mbedtls_mpi_add_abs+0xa4>
            p = X->p + i;
    78a4:	68bb      	ldr	r3, [r7, #8]
    78a6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    78aa:	e7e8      	b.n	787e <mbedtls_mpi_add_abs+0x76>
}
    78ac:	4608      	mov	r0, r1
    78ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000078b0 <mbedtls_mpi_sub_abs>:
{
    78b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b2:	b085      	sub	sp, #20
    78b4:	4605      	mov	r5, r0
    78b6:	460e      	mov	r6, r1
    78b8:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    78ba:	4611      	mov	r1, r2
    78bc:	4630      	mov	r0, r6
    78be:	f7ff fe8b 	bl	75d8 <mbedtls_mpi_cmp_abs>
    78c2:	2800      	cmp	r0, #0
    78c4:	db2c      	blt.n	7920 <mbedtls_mpi_sub_abs+0x70>
    mbedtls_mpi_init( &TB );
    78c6:	a801      	add	r0, sp, #4
    78c8:	f7ff fcc9 	bl	725e <mbedtls_mpi_init>
    if( X == B )
    78cc:	42ac      	cmp	r4, r5
    78ce:	d014      	beq.n	78fa <mbedtls_mpi_sub_abs+0x4a>
    if( X != A )
    78d0:	42ae      	cmp	r6, r5
    78d2:	d005      	beq.n	78e0 <mbedtls_mpi_sub_abs+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    78d4:	4631      	mov	r1, r6
    78d6:	4628      	mov	r0, r5
    78d8:	f7ff fd02 	bl	72e0 <mbedtls_mpi_copy>
    78dc:	4607      	mov	r7, r0
    78de:	b9c8      	cbnz	r0, 7914 <mbedtls_mpi_sub_abs+0x64>
    X->s = 1;
    78e0:	2301      	movs	r3, #1
    78e2:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    78e4:	6860      	ldr	r0, [r4, #4]
    78e6:	b180      	cbz	r0, 790a <mbedtls_mpi_sub_abs+0x5a>
        if( B->p[n - 1] != 0 )
    78e8:	68a2      	ldr	r2, [r4, #8]
    78ea:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    78ee:	3b01      	subs	r3, #1
    78f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f4:	b94b      	cbnz	r3, 790a <mbedtls_mpi_sub_abs+0x5a>
    for( n = B->n; n > 0; n-- )
    78f6:	3801      	subs	r0, #1
    78f8:	e7f5      	b.n	78e6 <mbedtls_mpi_sub_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    78fa:	4621      	mov	r1, r4
    78fc:	a801      	add	r0, sp, #4
    78fe:	f7ff fcef 	bl	72e0 <mbedtls_mpi_copy>
    7902:	4607      	mov	r7, r0
    7904:	b930      	cbnz	r0, 7914 <mbedtls_mpi_sub_abs+0x64>
        B = &TB;
    7906:	ac01      	add	r4, sp, #4
    7908:	e7e2      	b.n	78d0 <mbedtls_mpi_sub_abs+0x20>
    mpi_sub_hlp( n, B->p, X->p );
    790a:	68aa      	ldr	r2, [r5, #8]
    790c:	68a1      	ldr	r1, [r4, #8]
    790e:	f7ff fa93 	bl	6e38 <mpi_sub_hlp>
    ret = 0;
    7912:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
    7914:	a801      	add	r0, sp, #4
    7916:	f7ff fca8 	bl	726a <mbedtls_mpi_free>
}
    791a:	4638      	mov	r0, r7
    791c:	b005      	add	sp, #20
    791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7920:	f06f 0709 	mvn.w	r7, #9
    7924:	e7f9      	b.n	791a <mbedtls_mpi_sub_abs+0x6a>

00007926 <mbedtls_mpi_add_mpi>:
{
    7926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7928:	4607      	mov	r7, r0
    792a:	460c      	mov	r4, r1
    792c:	4615      	mov	r5, r2
    s = A->s;
    792e:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s < 0 )
    7930:	6813      	ldr	r3, [r2, #0]
    7932:	fb06 f303 	mul.w	r3, r6, r3
    7936:	2b00      	cmp	r3, #0
    7938:	da18      	bge.n	796c <mbedtls_mpi_add_mpi+0x46>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    793a:	4611      	mov	r1, r2
    793c:	4620      	mov	r0, r4
    793e:	f7ff fe4b 	bl	75d8 <mbedtls_mpi_cmp_abs>
    7942:	2800      	cmp	r0, #0
    7944:	db08      	blt.n	7958 <mbedtls_mpi_add_mpi+0x32>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7946:	462a      	mov	r2, r5
    7948:	4621      	mov	r1, r4
    794a:	4638      	mov	r0, r7
    794c:	f7ff ffb0 	bl	78b0 <mbedtls_mpi_sub_abs>
    7950:	4603      	mov	r3, r0
    7952:	b980      	cbnz	r0, 7976 <mbedtls_mpi_add_mpi+0x50>
            X->s =  s;
    7954:	603e      	str	r6, [r7, #0]
    7956:	e00e      	b.n	7976 <mbedtls_mpi_add_mpi+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7958:	4622      	mov	r2, r4
    795a:	4629      	mov	r1, r5
    795c:	4638      	mov	r0, r7
    795e:	f7ff ffa7 	bl	78b0 <mbedtls_mpi_sub_abs>
    7962:	4603      	mov	r3, r0
    7964:	b938      	cbnz	r0, 7976 <mbedtls_mpi_add_mpi+0x50>
            X->s = -s;
    7966:	4276      	negs	r6, r6
    7968:	603e      	str	r6, [r7, #0]
    796a:	e004      	b.n	7976 <mbedtls_mpi_add_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    796c:	f7ff ff4c 	bl	7808 <mbedtls_mpi_add_abs>
    7970:	4603      	mov	r3, r0
    7972:	b900      	cbnz	r0, 7976 <mbedtls_mpi_add_mpi+0x50>
        X->s = s;
    7974:	603e      	str	r6, [r7, #0]
}
    7976:	4618      	mov	r0, r3
    7978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000797a <mbedtls_mpi_sub_mpi>:
{
    797a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    797c:	4607      	mov	r7, r0
    797e:	460c      	mov	r4, r1
    7980:	4615      	mov	r5, r2
    s = A->s;
    7982:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s > 0 )
    7984:	6813      	ldr	r3, [r2, #0]
    7986:	fb06 f303 	mul.w	r3, r6, r3
    798a:	2b00      	cmp	r3, #0
    798c:	dd1a      	ble.n	79c4 <mbedtls_mpi_sub_mpi+0x4a>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    798e:	4611      	mov	r1, r2
    7990:	4620      	mov	r0, r4
    7992:	f7ff fe21 	bl	75d8 <mbedtls_mpi_cmp_abs>
    7996:	2800      	cmp	r0, #0
    7998:	db09      	blt.n	79ae <mbedtls_mpi_sub_mpi+0x34>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    799a:	462a      	mov	r2, r5
    799c:	4621      	mov	r1, r4
    799e:	4638      	mov	r0, r7
    79a0:	f7ff ff86 	bl	78b0 <mbedtls_mpi_sub_abs>
    79a4:	4603      	mov	r3, r0
    79a6:	b900      	cbnz	r0, 79aa <mbedtls_mpi_sub_mpi+0x30>
            X->s =  s;
    79a8:	603e      	str	r6, [r7, #0]
}
    79aa:	4618      	mov	r0, r3
    79ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    79ae:	4622      	mov	r2, r4
    79b0:	4629      	mov	r1, r5
    79b2:	4638      	mov	r0, r7
    79b4:	f7ff ff7c 	bl	78b0 <mbedtls_mpi_sub_abs>
    79b8:	4603      	mov	r3, r0
    79ba:	2800      	cmp	r0, #0
    79bc:	d1f5      	bne.n	79aa <mbedtls_mpi_sub_mpi+0x30>
            X->s = -s;
    79be:	4276      	negs	r6, r6
    79c0:	603e      	str	r6, [r7, #0]
    79c2:	e7f2      	b.n	79aa <mbedtls_mpi_sub_mpi+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    79c4:	f7ff ff20 	bl	7808 <mbedtls_mpi_add_abs>
    79c8:	4603      	mov	r3, r0
    79ca:	2800      	cmp	r0, #0
    79cc:	d1ed      	bne.n	79aa <mbedtls_mpi_sub_mpi+0x30>
        X->s = s;
    79ce:	603e      	str	r6, [r7, #0]
    return( ret );
    79d0:	e7eb      	b.n	79aa <mbedtls_mpi_sub_mpi+0x30>

000079d2 <mbedtls_mpi_mul_mpi>:
{
    79d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79d6:	b087      	sub	sp, #28
    79d8:	4680      	mov	r8, r0
    79da:	460e      	mov	r6, r1
    79dc:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    79de:	a803      	add	r0, sp, #12
    79e0:	f7ff fc3d 	bl	725e <mbedtls_mpi_init>
    79e4:	4668      	mov	r0, sp
    79e6:	f7ff fc3a 	bl	725e <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    79ea:	45b0      	cmp	r8, r6
    79ec:	d00c      	beq.n	7a08 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    79ee:	45b8      	cmp	r8, r7
    79f0:	d012      	beq.n	7a18 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    79f2:	6875      	ldr	r5, [r6, #4]
    79f4:	b1c5      	cbz	r5, 7a28 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    79f6:	68b2      	ldr	r2, [r6, #8]
    79f8:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    79fc:	3b01      	subs	r3, #1
    79fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a02:	b98b      	cbnz	r3, 7a28 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    7a04:	3d01      	subs	r5, #1
    7a06:	e7f5      	b.n	79f4 <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    7a08:	4631      	mov	r1, r6
    7a0a:	a803      	add	r0, sp, #12
    7a0c:	f7ff fc68 	bl	72e0 <mbedtls_mpi_copy>
    7a10:	4681      	mov	r9, r0
    7a12:	b9d0      	cbnz	r0, 7a4a <mbedtls_mpi_mul_mpi+0x78>
    7a14:	ae03      	add	r6, sp, #12
    7a16:	e7ea      	b.n	79ee <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    7a18:	4639      	mov	r1, r7
    7a1a:	4668      	mov	r0, sp
    7a1c:	f7ff fc60 	bl	72e0 <mbedtls_mpi_copy>
    7a20:	4681      	mov	r9, r0
    7a22:	b990      	cbnz	r0, 7a4a <mbedtls_mpi_mul_mpi+0x78>
    7a24:	466f      	mov	r7, sp
    7a26:	e7e4      	b.n	79f2 <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    7a28:	687c      	ldr	r4, [r7, #4]
    7a2a:	b144      	cbz	r4, 7a3e <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    7a2c:	68ba      	ldr	r2, [r7, #8]
    7a2e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    7a32:	3b01      	subs	r3, #1
    7a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a38:	b90b      	cbnz	r3, 7a3e <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    7a3a:	3c01      	subs	r4, #1
    7a3c:	e7f5      	b.n	7a2a <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    7a3e:	1929      	adds	r1, r5, r4
    7a40:	4640      	mov	r0, r8
    7a42:	f7ff fc24 	bl	728e <mbedtls_mpi_grow>
    7a46:	4681      	mov	r9, r0
    7a48:	b148      	cbz	r0, 7a5e <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    7a4a:	4668      	mov	r0, sp
    7a4c:	f7ff fc0d 	bl	726a <mbedtls_mpi_free>
    7a50:	a803      	add	r0, sp, #12
    7a52:	f7ff fc0a 	bl	726a <mbedtls_mpi_free>
}
    7a56:	4648      	mov	r0, r9
    7a58:	b007      	add	sp, #28
    7a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7a5e:	2100      	movs	r1, #0
    7a60:	4640      	mov	r0, r8
    7a62:	f7ff fc70 	bl	7346 <mbedtls_mpi_lset>
    7a66:	4681      	mov	r9, r0
    7a68:	b178      	cbz	r0, 7a8a <mbedtls_mpi_mul_mpi+0xb8>
    7a6a:	e7ee      	b.n	7a4a <mbedtls_mpi_mul_mpi+0x78>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    7a6c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7a70:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    7a74:	3a01      	subs	r2, #1
    7a76:	68bb      	ldr	r3, [r7, #8]
    7a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7a80:	68b1      	ldr	r1, [r6, #8]
    7a82:	4628      	mov	r0, r5
    7a84:	f7ff f9ff 	bl	6e86 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    7a88:	3c01      	subs	r4, #1
    7a8a:	2c00      	cmp	r4, #0
    7a8c:	d1ee      	bne.n	7a6c <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    7a8e:	6832      	ldr	r2, [r6, #0]
    7a90:	683b      	ldr	r3, [r7, #0]
    7a92:	fb03 f302 	mul.w	r3, r3, r2
    7a96:	f8c8 3000 	str.w	r3, [r8]
    7a9a:	e7d6      	b.n	7a4a <mbedtls_mpi_mul_mpi+0x78>

00007a9c <mbedtls_mpi_mul_int>:
{
    7a9c:	b500      	push	{lr}
    7a9e:	b085      	sub	sp, #20
    _B.s = 1;
    7aa0:	2301      	movs	r3, #1
    7aa2:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    7aa4:	9302      	str	r3, [sp, #8]
    _B.p = p;
    7aa6:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    7aaa:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    7aac:	aa01      	add	r2, sp, #4
    7aae:	f7ff ff90 	bl	79d2 <mbedtls_mpi_mul_mpi>
}
    7ab2:	b005      	add	sp, #20
    7ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00007ab8 <mbedtls_mpi_div_mpi>:
{
    7ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7abc:	b097      	sub	sp, #92	; 0x5c
    7abe:	4607      	mov	r7, r0
    7ac0:	4688      	mov	r8, r1
    7ac2:	4615      	mov	r5, r2
    7ac4:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7ac6:	2100      	movs	r1, #0
    7ac8:	4618      	mov	r0, r3
    7aca:	f7ff fe85 	bl	77d8 <mbedtls_mpi_cmp_int>
    7ace:	2800      	cmp	r0, #0
    7ad0:	f000 81c1 	beq.w	7e56 <mbedtls_mpi_div_mpi+0x39e>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    7ad4:	a813      	add	r0, sp, #76	; 0x4c
    7ad6:	f7ff fbc2 	bl	725e <mbedtls_mpi_init>
    7ada:	a810      	add	r0, sp, #64	; 0x40
    7adc:	f7ff fbbf 	bl	725e <mbedtls_mpi_init>
    7ae0:	a80d      	add	r0, sp, #52	; 0x34
    7ae2:	f7ff fbbc 	bl	725e <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    7ae6:	a80a      	add	r0, sp, #40	; 0x28
    7ae8:	f7ff fbb9 	bl	725e <mbedtls_mpi_init>
    7aec:	a807      	add	r0, sp, #28
    7aee:	f7ff fbb6 	bl	725e <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7af2:	4621      	mov	r1, r4
    7af4:	4628      	mov	r0, r5
    7af6:	f7ff fd6f 	bl	75d8 <mbedtls_mpi_cmp_abs>
    7afa:	2800      	cmp	r0, #0
    7afc:	da11      	bge.n	7b22 <mbedtls_mpi_div_mpi+0x6a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7afe:	b12f      	cbz	r7, 7b0c <mbedtls_mpi_div_mpi+0x54>
    7b00:	2100      	movs	r1, #0
    7b02:	4638      	mov	r0, r7
    7b04:	f7ff fc1f 	bl	7346 <mbedtls_mpi_lset>
    7b08:	4606      	mov	r6, r0
    7b0a:	b980      	cbnz	r0, 7b2e <mbedtls_mpi_div_mpi+0x76>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7b0c:	f1b8 0f00 	cmp.w	r8, #0
    7b10:	f000 81a4 	beq.w	7e5c <mbedtls_mpi_div_mpi+0x3a4>
    7b14:	4629      	mov	r1, r5
    7b16:	4640      	mov	r0, r8
    7b18:	f7ff fbe2 	bl	72e0 <mbedtls_mpi_copy>
    7b1c:	4606      	mov	r6, r0
    7b1e:	b930      	cbnz	r0, 7b2e <mbedtls_mpi_div_mpi+0x76>
    7b20:	e014      	b.n	7b4c <mbedtls_mpi_div_mpi+0x94>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7b22:	4629      	mov	r1, r5
    7b24:	a813      	add	r0, sp, #76	; 0x4c
    7b26:	f7ff fbdb 	bl	72e0 <mbedtls_mpi_copy>
    7b2a:	4606      	mov	r6, r0
    7b2c:	b190      	cbz	r0, 7b54 <mbedtls_mpi_div_mpi+0x9c>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    7b2e:	a813      	add	r0, sp, #76	; 0x4c
    7b30:	f7ff fb9b 	bl	726a <mbedtls_mpi_free>
    7b34:	a810      	add	r0, sp, #64	; 0x40
    7b36:	f7ff fb98 	bl	726a <mbedtls_mpi_free>
    7b3a:	a80d      	add	r0, sp, #52	; 0x34
    7b3c:	f7ff fb95 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    7b40:	a80a      	add	r0, sp, #40	; 0x28
    7b42:	f7ff fb92 	bl	726a <mbedtls_mpi_free>
    7b46:	a807      	add	r0, sp, #28
    7b48:	f7ff fb8f 	bl	726a <mbedtls_mpi_free>
}
    7b4c:	4630      	mov	r0, r6
    7b4e:	b017      	add	sp, #92	; 0x5c
    7b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7b54:	4621      	mov	r1, r4
    7b56:	a810      	add	r0, sp, #64	; 0x40
    7b58:	f7ff fbc2 	bl	72e0 <mbedtls_mpi_copy>
    7b5c:	4606      	mov	r6, r0
    7b5e:	2800      	cmp	r0, #0
    7b60:	d1e5      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    X.s = Y.s = 1;
    7b62:	2301      	movs	r3, #1
    7b64:	9310      	str	r3, [sp, #64]	; 0x40
    7b66:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7b68:	6869      	ldr	r1, [r5, #4]
    7b6a:	3102      	adds	r1, #2
    7b6c:	a80d      	add	r0, sp, #52	; 0x34
    7b6e:	f7ff fb8e 	bl	728e <mbedtls_mpi_grow>
    7b72:	4606      	mov	r6, r0
    7b74:	2800      	cmp	r0, #0
    7b76:	d1da      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7b78:	2100      	movs	r1, #0
    7b7a:	a80d      	add	r0, sp, #52	; 0x34
    7b7c:	f7ff fbe3 	bl	7346 <mbedtls_mpi_lset>
    7b80:	4606      	mov	r6, r0
    7b82:	2800      	cmp	r0, #0
    7b84:	d1d3      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    7b86:	2102      	movs	r1, #2
    7b88:	a80a      	add	r0, sp, #40	; 0x28
    7b8a:	f7ff fb80 	bl	728e <mbedtls_mpi_grow>
    7b8e:	4606      	mov	r6, r0
    7b90:	2800      	cmp	r0, #0
    7b92:	d1cc      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    7b94:	2103      	movs	r1, #3
    7b96:	a807      	add	r0, sp, #28
    7b98:	f7ff fb79 	bl	728e <mbedtls_mpi_grow>
    7b9c:	4606      	mov	r6, r0
    7b9e:	2800      	cmp	r0, #0
    7ba0:	d1c5      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7ba2:	a810      	add	r0, sp, #64	; 0x40
    7ba4:	f7ff fbfd 	bl	73a2 <mbedtls_mpi_bitlen>
    7ba8:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7bac:	281e      	cmp	r0, #30
    7bae:	d811      	bhi.n	7bd4 <mbedtls_mpi_div_mpi+0x11c>
        k = biL - 1 - k;
    7bb0:	f1c0 031f 	rsb	r3, r0, #31
    7bb4:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7bb6:	4619      	mov	r1, r3
    7bb8:	a813      	add	r0, sp, #76	; 0x4c
    7bba:	f7ff fc73 	bl	74a4 <mbedtls_mpi_shift_l>
    7bbe:	4606      	mov	r6, r0
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d1b4      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7bc4:	9900      	ldr	r1, [sp, #0]
    7bc6:	a810      	add	r0, sp, #64	; 0x40
    7bc8:	f7ff fc6c 	bl	74a4 <mbedtls_mpi_shift_l>
    7bcc:	4606      	mov	r6, r0
    7bce:	2800      	cmp	r0, #0
    7bd0:	d1ad      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    7bd2:	e001      	b.n	7bd8 <mbedtls_mpi_div_mpi+0x120>
    else k = 0;
    7bd4:	2300      	movs	r3, #0
    7bd6:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    7bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7bda:	f103 3bff 	add.w	fp, r3, #4294967295
    t = Y.n - 1;
    7bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7be0:	9301      	str	r3, [sp, #4]
    7be2:	3b01      	subs	r3, #1
    7be4:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7be6:	ebab 0903 	sub.w	r9, fp, r3
    7bea:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    7bee:	4651      	mov	r1, sl
    7bf0:	a810      	add	r0, sp, #64	; 0x40
    7bf2:	f7ff fc57 	bl	74a4 <mbedtls_mpi_shift_l>
    7bf6:	4606      	mov	r6, r0
    7bf8:	2800      	cmp	r0, #0
    7bfa:	d198      	bne.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7bfc:	a910      	add	r1, sp, #64	; 0x40
    7bfe:	a813      	add	r0, sp, #76	; 0x4c
    7c00:	f7ff fda2 	bl	7748 <mbedtls_mpi_cmp_mpi>
    7c04:	2800      	cmp	r0, #0
    7c06:	db0e      	blt.n	7c26 <mbedtls_mpi_div_mpi+0x16e>
        Z.p[n - t]++;
    7c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c0a:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    7c0e:	3301      	adds	r3, #1
    7c10:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7c14:	aa10      	add	r2, sp, #64	; 0x40
    7c16:	a913      	add	r1, sp, #76	; 0x4c
    7c18:	4608      	mov	r0, r1
    7c1a:	f7ff feae 	bl	797a <mbedtls_mpi_sub_mpi>
    7c1e:	4606      	mov	r6, r0
    7c20:	2800      	cmp	r0, #0
    7c22:	d0eb      	beq.n	7bfc <mbedtls_mpi_div_mpi+0x144>
cleanup:
    7c24:	e783      	b.n	7b2e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7c26:	4651      	mov	r1, sl
    7c28:	a810      	add	r0, sp, #64	; 0x40
    7c2a:	f7ff fc8d 	bl	7548 <mbedtls_mpi_shift_r>
    7c2e:	4606      	mov	r6, r0
    7c30:	2800      	cmp	r0, #0
    7c32:	f47f af7c 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
    7c36:	9504      	str	r5, [sp, #16]
    7c38:	9405      	str	r4, [sp, #20]
    7c3a:	9c02      	ldr	r4, [sp, #8]
    for( i = n; i > t ; i-- )
    7c3c:	45a3      	cmp	fp, r4
    7c3e:	f240 80d8 	bls.w	7df2 <mbedtls_mpi_div_mpi+0x33a>
        if( X.p[i] >= Y.p[t] )
    7c42:	9915      	ldr	r1, [sp, #84]	; 0x54
    7c44:	ea4f 038b 	mov.w	r3, fp, lsl #2
    7c48:	9302      	str	r3, [sp, #8]
    7c4a:	f851 002b 	ldr.w	r0, [r1, fp, lsl #2]
    7c4e:	00a3      	lsls	r3, r4, #2
    7c50:	9303      	str	r3, [sp, #12]
    7c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7c54:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    7c58:	4290      	cmp	r0, r2
    7c5a:	d318      	bcc.n	7c8e <mbedtls_mpi_div_mpi+0x1d6>
            Z.p[i - t - 1] = ~0;
    7c5c:	ebab 0304 	sub.w	r3, fp, r4
    7c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7c64:	3b01      	subs	r3, #1
    7c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c68:	f04f 31ff 	mov.w	r1, #4294967295
    7c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    7c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c72:	ebab 0504 	sub.w	r5, fp, r4
    7c76:	f105 4980 	add.w	r9, r5, #1073741824	; 0x40000000
    7c7a:	f109 39ff 	add.w	r9, r9, #4294967295
    7c7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    7c82:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    7c86:	3301      	adds	r3, #1
    7c88:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
    7c8c:	e02a      	b.n	7ce4 <mbedtls_mpi_div_mpi+0x22c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7c8e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    7c92:	eb0b 0c03 	add.w	ip, fp, r3
    7c96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7c98:	ebab 0604 	sub.w	r6, fp, r4
    7c9c:	441e      	add	r6, r3
    7c9e:	2300      	movs	r3, #0
    7ca0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    7ca4:	f7ff fa90 	bl	71c8 <mbedtls_int_div_int>
    7ca8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    7cac:	e7e0      	b.n	7c70 <mbedtls_mpi_div_mpi+0x1b8>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7cae:	2300      	movs	r3, #0
    7cb0:	e02f      	b.n	7d12 <mbedtls_mpi_div_mpi+0x25a>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7cb2:	2300      	movs	r3, #0
    7cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7cb6:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7cb8:	f1bb 0f00 	cmp.w	fp, #0
    7cbc:	d04d      	beq.n	7d5a <mbedtls_mpi_div_mpi+0x2a2>
    7cbe:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    7cc2:	3b01      	subs	r3, #1
    7cc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7ccc:	6053      	str	r3, [r2, #4]
            T2.p[2] = X.p[i];
    7cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7cd0:	9a02      	ldr	r2, [sp, #8]
    7cd2:	589a      	ldr	r2, [r3, r2]
    7cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7cd6:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7cd8:	a907      	add	r1, sp, #28
    7cda:	a80a      	add	r0, sp, #40	; 0x28
    7cdc:	f7ff fd34 	bl	7748 <mbedtls_mpi_cmp_mpi>
    7ce0:	2800      	cmp	r0, #0
    7ce2:	dd3c      	ble.n	7d5e <mbedtls_mpi_div_mpi+0x2a6>
            Z.p[i - t - 1]--;
    7ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7ce6:	f852 300a 	ldr.w	r3, [r2, sl]
    7cea:	3b01      	subs	r3, #1
    7cec:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7cf0:	2100      	movs	r1, #0
    7cf2:	a80a      	add	r0, sp, #40	; 0x28
    7cf4:	f7ff fb27 	bl	7346 <mbedtls_mpi_lset>
    7cf8:	4606      	mov	r6, r0
    7cfa:	2800      	cmp	r0, #0
    7cfc:	f47f af17 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d00:	2c00      	cmp	r4, #0
    7d02:	d0d4      	beq.n	7cae <mbedtls_mpi_div_mpi+0x1f6>
    7d04:	9b01      	ldr	r3, [sp, #4]
    7d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7d0a:	3b02      	subs	r3, #2
    7d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d14:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
    7d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7d18:	9a03      	ldr	r2, [sp, #12]
    7d1a:	589a      	ldr	r2, [r3, r2]
    7d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d1e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7d22:	f853 200a 	ldr.w	r2, [r3, sl]
    7d26:	a90a      	add	r1, sp, #40	; 0x28
    7d28:	4608      	mov	r0, r1
    7d2a:	f7ff feb7 	bl	7a9c <mbedtls_mpi_mul_int>
    7d2e:	4606      	mov	r6, r0
    7d30:	2800      	cmp	r0, #0
    7d32:	f47f aefc 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    7d36:	2100      	movs	r1, #0
    7d38:	a807      	add	r0, sp, #28
    7d3a:	f7ff fb04 	bl	7346 <mbedtls_mpi_lset>
    7d3e:	4606      	mov	r6, r0
    7d40:	2800      	cmp	r0, #0
    7d42:	f47f aef4 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7d46:	f1bb 0f01 	cmp.w	fp, #1
    7d4a:	d9b2      	bls.n	7cb2 <mbedtls_mpi_div_mpi+0x1fa>
    7d4c:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    7d50:	3b02      	subs	r3, #2
    7d52:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d58:	e7ac      	b.n	7cb4 <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7d5a:	2300      	movs	r3, #0
    7d5c:	e7b5      	b.n	7cca <mbedtls_mpi_div_mpi+0x212>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7d60:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    7d64:	a910      	add	r1, sp, #64	; 0x40
    7d66:	a80a      	add	r0, sp, #40	; 0x28
    7d68:	f7ff fe98 	bl	7a9c <mbedtls_mpi_mul_int>
    7d6c:	4606      	mov	r6, r0
    7d6e:	2800      	cmp	r0, #0
    7d70:	f47f aedd 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7d74:	f105 6a00 	add.w	sl, r5, #134217728	; 0x8000000
    7d78:	f10a 3aff 	add.w	sl, sl, #4294967295
    7d7c:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    7d80:	4651      	mov	r1, sl
    7d82:	a80a      	add	r0, sp, #40	; 0x28
    7d84:	f7ff fb8e 	bl	74a4 <mbedtls_mpi_shift_l>
    7d88:	4606      	mov	r6, r0
    7d8a:	2800      	cmp	r0, #0
    7d8c:	f47f aecf 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7d90:	aa0a      	add	r2, sp, #40	; 0x28
    7d92:	a913      	add	r1, sp, #76	; 0x4c
    7d94:	4608      	mov	r0, r1
    7d96:	f7ff fdf0 	bl	797a <mbedtls_mpi_sub_mpi>
    7d9a:	4606      	mov	r6, r0
    7d9c:	2800      	cmp	r0, #0
    7d9e:	f47f aec6 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7da2:	2100      	movs	r1, #0
    7da4:	a813      	add	r0, sp, #76	; 0x4c
    7da6:	f7ff fd17 	bl	77d8 <mbedtls_mpi_cmp_int>
    7daa:	2800      	cmp	r0, #0
    7dac:	da1e      	bge.n	7dec <mbedtls_mpi_div_mpi+0x334>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7dae:	a910      	add	r1, sp, #64	; 0x40
    7db0:	a80a      	add	r0, sp, #40	; 0x28
    7db2:	f7ff fa95 	bl	72e0 <mbedtls_mpi_copy>
    7db6:	4606      	mov	r6, r0
    7db8:	2800      	cmp	r0, #0
    7dba:	f47f aeb8 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7dbe:	4651      	mov	r1, sl
    7dc0:	a80a      	add	r0, sp, #40	; 0x28
    7dc2:	f7ff fb6f 	bl	74a4 <mbedtls_mpi_shift_l>
    7dc6:	4606      	mov	r6, r0
    7dc8:	2800      	cmp	r0, #0
    7dca:	f47f aeb0 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7dce:	aa0a      	add	r2, sp, #40	; 0x28
    7dd0:	a913      	add	r1, sp, #76	; 0x4c
    7dd2:	4608      	mov	r0, r1
    7dd4:	f7ff fda7 	bl	7926 <mbedtls_mpi_add_mpi>
    7dd8:	4606      	mov	r6, r0
    7dda:	2800      	cmp	r0, #0
    7ddc:	f47f aea7 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            Z.p[i - t - 1]--;
    7de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7de2:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    7de6:	3b01      	subs	r3, #1
    7de8:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
    for( i = n; i > t ; i-- )
    7dec:	f10b 3bff 	add.w	fp, fp, #4294967295
    7df0:	e724      	b.n	7c3c <mbedtls_mpi_div_mpi+0x184>
    7df2:	9d04      	ldr	r5, [sp, #16]
    7df4:	9c05      	ldr	r4, [sp, #20]
    if( Q != NULL )
    7df6:	b167      	cbz	r7, 7e12 <mbedtls_mpi_div_mpi+0x35a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7df8:	a90d      	add	r1, sp, #52	; 0x34
    7dfa:	4638      	mov	r0, r7
    7dfc:	f7ff fa70 	bl	72e0 <mbedtls_mpi_copy>
    7e00:	4606      	mov	r6, r0
    7e02:	2800      	cmp	r0, #0
    7e04:	f47f ae93 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        Q->s = A->s * B->s;
    7e08:	682a      	ldr	r2, [r5, #0]
    7e0a:	6823      	ldr	r3, [r4, #0]
    7e0c:	fb03 f302 	mul.w	r3, r3, r2
    7e10:	603b      	str	r3, [r7, #0]
    if( R != NULL )
    7e12:	f1b8 0f00 	cmp.w	r8, #0
    7e16:	f43f ae8a 	beq.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7e1a:	9900      	ldr	r1, [sp, #0]
    7e1c:	a813      	add	r0, sp, #76	; 0x4c
    7e1e:	f7ff fb93 	bl	7548 <mbedtls_mpi_shift_r>
    7e22:	4606      	mov	r6, r0
    7e24:	2800      	cmp	r0, #0
    7e26:	f47f ae82 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        X.s = A->s;
    7e2a:	682b      	ldr	r3, [r5, #0]
    7e2c:	a916      	add	r1, sp, #88	; 0x58
    7e2e:	f841 3d0c 	str.w	r3, [r1, #-12]!
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7e32:	4640      	mov	r0, r8
    7e34:	f7ff fa54 	bl	72e0 <mbedtls_mpi_copy>
    7e38:	4606      	mov	r6, r0
    7e3a:	2800      	cmp	r0, #0
    7e3c:	f47f ae77 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7e40:	2100      	movs	r1, #0
    7e42:	4640      	mov	r0, r8
    7e44:	f7ff fcc8 	bl	77d8 <mbedtls_mpi_cmp_int>
    7e48:	2800      	cmp	r0, #0
    7e4a:	f47f ae70 	bne.w	7b2e <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
    7e4e:	2301      	movs	r3, #1
    7e50:	f8c8 3000 	str.w	r3, [r8]
    7e54:	e66b      	b.n	7b2e <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7e56:	f06f 060b 	mvn.w	r6, #11
    7e5a:	e677      	b.n	7b4c <mbedtls_mpi_div_mpi+0x94>
        return( 0 );
    7e5c:	2600      	movs	r6, #0
    7e5e:	e675      	b.n	7b4c <mbedtls_mpi_div_mpi+0x94>

00007e60 <mbedtls_mpi_mod_mpi>:
{
    7e60:	b570      	push	{r4, r5, r6, lr}
    7e62:	4604      	mov	r4, r0
    7e64:	460e      	mov	r6, r1
    7e66:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7e68:	2100      	movs	r1, #0
    7e6a:	4610      	mov	r0, r2
    7e6c:	f7ff fcb4 	bl	77d8 <mbedtls_mpi_cmp_int>
    7e70:	2800      	cmp	r0, #0
    7e72:	db26      	blt.n	7ec2 <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7e74:	462b      	mov	r3, r5
    7e76:	4632      	mov	r2, r6
    7e78:	4621      	mov	r1, r4
    7e7a:	2000      	movs	r0, #0
    7e7c:	f7ff fe1c 	bl	7ab8 <mbedtls_mpi_div_mpi>
    7e80:	4606      	mov	r6, r0
    7e82:	b968      	cbnz	r0, 7ea0 <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7e84:	2100      	movs	r1, #0
    7e86:	4620      	mov	r0, r4
    7e88:	f7ff fca6 	bl	77d8 <mbedtls_mpi_cmp_int>
    7e8c:	2800      	cmp	r0, #0
    7e8e:	da09      	bge.n	7ea4 <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7e90:	462a      	mov	r2, r5
    7e92:	4621      	mov	r1, r4
    7e94:	4620      	mov	r0, r4
    7e96:	f7ff fd46 	bl	7926 <mbedtls_mpi_add_mpi>
    7e9a:	4606      	mov	r6, r0
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d0f1      	beq.n	7e84 <mbedtls_mpi_mod_mpi+0x24>
}
    7ea0:	4630      	mov	r0, r6
    7ea2:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7ea4:	4629      	mov	r1, r5
    7ea6:	4620      	mov	r0, r4
    7ea8:	f7ff fc4e 	bl	7748 <mbedtls_mpi_cmp_mpi>
    7eac:	2800      	cmp	r0, #0
    7eae:	dbf7      	blt.n	7ea0 <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7eb0:	462a      	mov	r2, r5
    7eb2:	4621      	mov	r1, r4
    7eb4:	4620      	mov	r0, r4
    7eb6:	f7ff fd60 	bl	797a <mbedtls_mpi_sub_mpi>
    7eba:	4606      	mov	r6, r0
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d0f1      	beq.n	7ea4 <mbedtls_mpi_mod_mpi+0x44>
cleanup:
    7ec0:	e7ee      	b.n	7ea0 <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7ec2:	f06f 0609 	mvn.w	r6, #9
    7ec6:	e7eb      	b.n	7ea0 <mbedtls_mpi_mod_mpi+0x40>

00007ec8 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ecc:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    7ed0:	4681      	mov	r9, r0
    7ed2:	468b      	mov	fp, r1
    7ed4:	4616      	mov	r6, r2
    7ed6:	461d      	mov	r5, r3
    7ed8:	f8dd 7668 	ldr.w	r7, [sp, #1640]	; 0x668
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7edc:	2100      	movs	r1, #0
    7ede:	4618      	mov	r0, r3
    7ee0:	f7ff fc7a 	bl	77d8 <mbedtls_mpi_cmp_int>
    7ee4:	2800      	cmp	r0, #0
    7ee6:	f340 8234 	ble.w	8352 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x352>
    7eea:	68ab      	ldr	r3, [r5, #8]
    7eec:	681b      	ldr	r3, [r3, #0]
    7eee:	f013 0f01 	tst.w	r3, #1
    7ef2:	f000 8231 	beq.w	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7ef6:	2100      	movs	r1, #0
    7ef8:	4630      	mov	r0, r6
    7efa:	f7ff fc6d 	bl	77d8 <mbedtls_mpi_cmp_int>
    7efe:	2800      	cmp	r0, #0
    7f00:	f2c0 822d 	blt.w	835e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    7f04:	4629      	mov	r1, r5
    7f06:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    7f0a:	f7ff f98b 	bl	7224 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    7f0e:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7f12:	f7ff f9a4 	bl	725e <mbedtls_mpi_init>
    7f16:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    7f1a:	f7ff f9a0 	bl	725e <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    7f1e:	a806      	add	r0, sp, #24
    7f20:	f7ff f99d 	bl	725e <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    7f24:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    7f28:	2100      	movs	r1, #0
    7f2a:	a809      	add	r0, sp, #36	; 0x24
    7f2c:	f7fe fbb0 	bl	6690 <memset>

    i = mbedtls_mpi_bitlen( E );
    7f30:	4630      	mov	r0, r6
    7f32:	f7ff fa36 	bl	73a2 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7f36:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7f3a:	d207      	bcs.n	7f4c <mbedtls_mpi_exp_mod+0x84>
    7f3c:	28ef      	cmp	r0, #239	; 0xef
    7f3e:	d813      	bhi.n	7f68 <mbedtls_mpi_exp_mod+0xa0>
    7f40:	284f      	cmp	r0, #79	; 0x4f
    7f42:	d813      	bhi.n	7f6c <mbedtls_mpi_exp_mod+0xa4>
    7f44:	2817      	cmp	r0, #23
    7f46:	d913      	bls.n	7f70 <mbedtls_mpi_exp_mod+0xa8>
    7f48:	2403      	movs	r4, #3
    7f4a:	e000      	b.n	7f4e <mbedtls_mpi_exp_mod+0x86>
    7f4c:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7f4e:	686b      	ldr	r3, [r5, #4]
    7f50:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7f54:	4651      	mov	r1, sl
    7f56:	4648      	mov	r0, r9
    7f58:	f7ff f999 	bl	728e <mbedtls_mpi_grow>
    7f5c:	4680      	mov	r8, r0
    7f5e:	b148      	cbz	r0, 7f74 <mbedtls_mpi_exp_mod+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7f60:	1e63      	subs	r3, r4, #1
    7f62:	2501      	movs	r5, #1
    7f64:	409d      	lsls	r5, r3
    7f66:	e1d9      	b.n	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7f68:	2405      	movs	r4, #5
    7f6a:	e7f0      	b.n	7f4e <mbedtls_mpi_exp_mod+0x86>
    7f6c:	2404      	movs	r4, #4
    7f6e:	e7ee      	b.n	7f4e <mbedtls_mpi_exp_mod+0x86>
    7f70:	2401      	movs	r4, #1
    7f72:	e7ec      	b.n	7f4e <mbedtls_mpi_exp_mod+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7f74:	4651      	mov	r1, sl
    7f76:	a80c      	add	r0, sp, #48	; 0x30
    7f78:	f7ff f989 	bl	728e <mbedtls_mpi_grow>
    7f7c:	4680      	mov	r8, r0
    7f7e:	2800      	cmp	r0, #0
    7f80:	d1ee      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7f82:	ea4f 014a 	mov.w	r1, sl, lsl #1
    7f86:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    7f8a:	f7ff f980 	bl	728e <mbedtls_mpi_grow>
    7f8e:	4680      	mov	r8, r0
    7f90:	2800      	cmp	r0, #0
    7f92:	d1e5      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    neg = ( A->s == -1 );
    7f94:	f8db a000 	ldr.w	sl, [fp]
    if( neg )
    7f98:	f1ba 3fff 	cmp.w	sl, #4294967295
    7f9c:	d047      	beq.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
    if( _RR == NULL || _RR->p == NULL )
    7f9e:	2f00      	cmp	r7, #0
    7fa0:	d051      	beq.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
    7fa2:	68bb      	ldr	r3, [r7, #8]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d04e      	beq.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7fa8:	220c      	movs	r2, #12
    7faa:	4639      	mov	r1, r7
    7fac:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7fb0:	f7fe fb49 	bl	6646 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7fb4:	4629      	mov	r1, r5
    7fb6:	4658      	mov	r0, fp
    7fb8:	f7ff fbc6 	bl	7748 <mbedtls_mpi_cmp_mpi>
    7fbc:	2800      	cmp	r0, #0
    7fbe:	db67      	blt.n	8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7fc0:	462a      	mov	r2, r5
    7fc2:	4659      	mov	r1, fp
    7fc4:	a80c      	add	r0, sp, #48	; 0x30
    7fc6:	f7ff ff4b 	bl	7e60 <mbedtls_mpi_mod_mpi>
    7fca:	4680      	mov	r8, r0
    7fcc:	2800      	cmp	r0, #0
    7fce:	d1c7      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
    7fd0:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7fd4:	9300      	str	r3, [sp, #0]
    7fd6:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    7fda:	462a      	mov	r2, r5
    7fdc:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    7fe0:	a80c      	add	r0, sp, #48	; 0x30
    7fe2:	f7ff fb33 	bl	764c <mpi_montmul>
    7fe6:	4680      	mov	r8, r0
    7fe8:	2800      	cmp	r0, #0
    7fea:	d1b9      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    7fec:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    7ff0:	4648      	mov	r0, r9
    7ff2:	f7ff f975 	bl	72e0 <mbedtls_mpi_copy>
    7ff6:	4680      	mov	r8, r0
    7ff8:	2800      	cmp	r0, #0
    7ffa:	d1b1      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    7ffc:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8000:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    8004:	4629      	mov	r1, r5
    8006:	4648      	mov	r0, r9
    8008:	f7ff fb8e 	bl	7728 <mpi_montred>
    800c:	4680      	mov	r8, r0
    800e:	2800      	cmp	r0, #0
    8010:	d1a6      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    if( wsize > 1 )
    8012:	2c01      	cmp	r4, #1
    8014:	d845      	bhi.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
    nblimbs = E->n;
    8016:	6873      	ldr	r3, [r6, #4]
    8018:	9304      	str	r3, [sp, #16]
    state   = 0;
    801a:	2300      	movs	r3, #0
    801c:	9305      	str	r3, [sp, #20]
    nbits   = 0;
    801e:	469b      	mov	fp, r3
    wbits   = 0;
    8020:	9303      	str	r3, [sp, #12]
    8022:	46b8      	mov	r8, r7
    8024:	4637      	mov	r7, r6
    8026:	462e      	mov	r6, r5
    8028:	4625      	mov	r5, r4
    802a:	461c      	mov	r4, r3
    802c:	e0af      	b.n	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    802e:	4659      	mov	r1, fp
    8030:	a806      	add	r0, sp, #24
    8032:	f7ff f955 	bl	72e0 <mbedtls_mpi_copy>
    8036:	4680      	mov	r8, r0
    8038:	2800      	cmp	r0, #0
    803a:	d191      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
        Apos.s = 1;
    803c:	2301      	movs	r3, #1
    803e:	9306      	str	r3, [sp, #24]
        A = &Apos;
    8040:	f10d 0b18 	add.w	fp, sp, #24
    8044:	e7ab      	b.n	7f9e <mbedtls_mpi_exp_mod+0xd6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    8046:	2101      	movs	r1, #1
    8048:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    804c:	f7ff f97b 	bl	7346 <mbedtls_mpi_lset>
    8050:	4680      	mov	r8, r0
    8052:	2800      	cmp	r0, #0
    8054:	d184      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    8056:	6869      	ldr	r1, [r5, #4]
    8058:	0189      	lsls	r1, r1, #6
    805a:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    805e:	f7ff fa21 	bl	74a4 <mbedtls_mpi_shift_l>
    8062:	4680      	mov	r8, r0
    8064:	2800      	cmp	r0, #0
    8066:	f47f af7b 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    806a:	462a      	mov	r2, r5
    806c:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    8070:	4608      	mov	r0, r1
    8072:	f7ff fef5 	bl	7e60 <mbedtls_mpi_mod_mpi>
    8076:	4680      	mov	r8, r0
    8078:	2800      	cmp	r0, #0
    807a:	f47f af71 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        if( _RR != NULL )
    807e:	2f00      	cmp	r7, #0
    8080:	d098      	beq.n	7fb4 <mbedtls_mpi_exp_mod+0xec>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    8082:	220c      	movs	r2, #12
    8084:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    8088:	4638      	mov	r0, r7
    808a:	f7fe fadc 	bl	6646 <memcpy>
    808e:	e791      	b.n	7fb4 <mbedtls_mpi_exp_mod+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    8090:	4659      	mov	r1, fp
    8092:	a80c      	add	r0, sp, #48	; 0x30
    8094:	f7ff f924 	bl	72e0 <mbedtls_mpi_copy>
    8098:	4680      	mov	r8, r0
    809a:	2800      	cmp	r0, #0
    809c:	f47f af60 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
    80a0:	e796      	b.n	7fd0 <mbedtls_mpi_exp_mod+0x108>
        j =  one << ( wsize - 1 );
    80a2:	1e63      	subs	r3, r4, #1
    80a4:	9304      	str	r3, [sp, #16]
    80a6:	f04f 0b01 	mov.w	fp, #1
    80aa:	fa0b f303 	lsl.w	r3, fp, r3
    80ae:	461a      	mov	r2, r3
    80b0:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    80b2:	230c      	movs	r3, #12
    80b4:	a909      	add	r1, sp, #36	; 0x24
    80b6:	fb03 1302 	mla	r3, r3, r2, r1
    80ba:	9303      	str	r3, [sp, #12]
    80bc:	6869      	ldr	r1, [r5, #4]
    80be:	4459      	add	r1, fp
    80c0:	4618      	mov	r0, r3
    80c2:	f7ff f8e4 	bl	728e <mbedtls_mpi_grow>
    80c6:	4680      	mov	r8, r0
    80c8:	2800      	cmp	r0, #0
    80ca:	f47f af49 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    80ce:	a90c      	add	r1, sp, #48	; 0x30
    80d0:	9803      	ldr	r0, [sp, #12]
    80d2:	f7ff f905 	bl	72e0 <mbedtls_mpi_copy>
    80d6:	4680      	mov	r8, r0
    80d8:	2800      	cmp	r0, #0
    80da:	f47f af41 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        for( i = 0; i < wsize - 1; i++ )
    80de:	f04f 0b00 	mov.w	fp, #0
    80e2:	9b04      	ldr	r3, [sp, #16]
    80e4:	455b      	cmp	r3, fp
    80e6:	d910      	bls.n	810a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
    80e8:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    80ec:	9300      	str	r3, [sp, #0]
    80ee:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    80f2:	462a      	mov	r2, r5
    80f4:	9803      	ldr	r0, [sp, #12]
    80f6:	4601      	mov	r1, r0
    80f8:	f7ff faa8 	bl	764c <mpi_montmul>
    80fc:	4680      	mov	r8, r0
    80fe:	2800      	cmp	r0, #0
    8100:	f47f af2e 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        for( i = 0; i < wsize - 1; i++ )
    8104:	f10b 0b01 	add.w	fp, fp, #1
    8108:	e7eb      	b.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
        for( i = j + 1; i < ( one << wsize ); i++ )
    810a:	9b05      	ldr	r3, [sp, #20]
    810c:	f103 0b01 	add.w	fp, r3, #1
    8110:	46b8      	mov	r8, r7
    8112:	4637      	mov	r7, r6
    8114:	4626      	mov	r6, r4
    8116:	2301      	movs	r3, #1
    8118:	40b3      	lsls	r3, r6
    811a:	455b      	cmp	r3, fp
    811c:	d803      	bhi.n	8126 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126>
    811e:	4634      	mov	r4, r6
    8120:	463e      	mov	r6, r7
    8122:	4647      	mov	r7, r8
    8124:	e777      	b.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    8126:	240c      	movs	r4, #12
    8128:	ab09      	add	r3, sp, #36	; 0x24
    812a:	fb04 340b 	mla	r4, r4, fp, r3
    812e:	6869      	ldr	r1, [r5, #4]
    8130:	3101      	adds	r1, #1
    8132:	4620      	mov	r0, r4
    8134:	f7ff f8ab 	bl	728e <mbedtls_mpi_grow>
    8138:	2800      	cmp	r0, #0
    813a:	f040 80cf 	bne.w	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    813e:	f10b 33ff 	add.w	r3, fp, #4294967295
    8142:	210c      	movs	r1, #12
    8144:	aa09      	add	r2, sp, #36	; 0x24
    8146:	fb01 2103 	mla	r1, r1, r3, r2
    814a:	4620      	mov	r0, r4
    814c:	f7ff f8c8 	bl	72e0 <mbedtls_mpi_copy>
    8150:	2800      	cmp	r0, #0
    8152:	f040 80c7 	bne.w	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
    8156:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    815a:	9300      	str	r3, [sp, #0]
    815c:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8160:	462a      	mov	r2, r5
    8162:	a90c      	add	r1, sp, #48	; 0x30
    8164:	4620      	mov	r0, r4
    8166:	f7ff fa71 	bl	764c <mpi_montmul>
    816a:	2800      	cmp	r0, #0
    816c:	f040 80be 	bne.w	82ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ec>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8170:	f10b 0b01 	add.w	fp, fp, #1
    8174:	e7cf      	b.n	8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
        nbits++;
    8176:	f10b 0b01 	add.w	fp, fp, #1
        wbits |= ( ei << ( wsize - nbits ) );
    817a:	eba5 020b 	sub.w	r2, r5, fp
    817e:	4093      	lsls	r3, r2
    8180:	9a03      	ldr	r2, [sp, #12]
    8182:	431a      	orrs	r2, r3
    8184:	9203      	str	r2, [sp, #12]
        if( nbits == wsize )
    8186:	455d      	cmp	r5, fp
    8188:	d02a      	beq.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
        state = 2;
    818a:	2302      	movs	r3, #2
    818c:	9305      	str	r3, [sp, #20]
        if( bufsize == 0 )
    818e:	b934      	cbnz	r4, 819e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19e>
            if( nblimbs == 0 )
    8190:	9b04      	ldr	r3, [sp, #16]
    8192:	2b00      	cmp	r3, #0
    8194:	f000 809d 	beq.w	82d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d2>
            nblimbs--;
    8198:	3b01      	subs	r3, #1
    819a:	9304      	str	r3, [sp, #16]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    819c:	2420      	movs	r4, #32
        bufsize--;
    819e:	3c01      	subs	r4, #1
        ei = (E->p[nblimbs] >> bufsize) & 1;
    81a0:	68bb      	ldr	r3, [r7, #8]
    81a2:	9a04      	ldr	r2, [sp, #16]
    81a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81a8:	40e3      	lsrs	r3, r4
        if( ei == 0 && state == 0 )
    81aa:	f013 0301 	ands.w	r3, r3, #1
    81ae:	d102      	bne.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    81b0:	9a05      	ldr	r2, [sp, #20]
    81b2:	2a00      	cmp	r2, #0
    81b4:	d0eb      	beq.n	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
        if( ei == 0 && state == 1 )
    81b6:	2b00      	cmp	r3, #0
    81b8:	d1dd      	bne.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    81ba:	9a05      	ldr	r2, [sp, #20]
    81bc:	2a01      	cmp	r2, #1
    81be:	d1da      	bne.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    81c0:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    81c4:	9300      	str	r3, [sp, #0]
    81c6:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    81ca:	4632      	mov	r2, r6
    81cc:	4649      	mov	r1, r9
    81ce:	4648      	mov	r0, r9
    81d0:	f7ff fa3c 	bl	764c <mpi_montmul>
    81d4:	2800      	cmp	r0, #0
    81d6:	d0da      	beq.n	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
    81d8:	462c      	mov	r4, r5
    81da:	4647      	mov	r7, r8
    81dc:	4680      	mov	r8, r0
    81de:	e6bf      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
            for( i = 0; i < wsize; i++ )
    81e0:	f04f 0b00 	mov.w	fp, #0
    81e4:	45ab      	cmp	fp, r5
    81e6:	d20e      	bcs.n	8206 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x206>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    81e8:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    81ec:	9300      	str	r3, [sp, #0]
    81ee:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    81f2:	4632      	mov	r2, r6
    81f4:	4649      	mov	r1, r9
    81f6:	4648      	mov	r0, r9
    81f8:	f7ff fa28 	bl	764c <mpi_montmul>
    81fc:	2800      	cmp	r0, #0
    81fe:	d179      	bne.n	82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>
            for( i = 0; i < wsize; i++ )
    8200:	f10b 0b01 	add.w	fp, fp, #1
    8204:	e7ee      	b.n	81e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e4>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
    8206:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    820a:	9300      	str	r3, [sp, #0]
    820c:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8210:	4632      	mov	r2, r6
    8212:	210c      	movs	r1, #12
    8214:	9803      	ldr	r0, [sp, #12]
    8216:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    821a:	fb01 c100 	mla	r1, r1, r0, ip
    821e:	4648      	mov	r0, r9
    8220:	f7ff fa14 	bl	764c <mpi_montmul>
    8224:	2800      	cmp	r0, #0
    8226:	d169      	bne.n	82fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fc>
            state--;
    8228:	2301      	movs	r3, #1
    822a:	9305      	str	r3, [sp, #20]
            nbits = 0;
    822c:	f04f 0b00 	mov.w	fp, #0
            wbits = 0;
    8230:	f8cd b00c 	str.w	fp, [sp, #12]
    8234:	e7ab      	b.n	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    8236:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    823a:	9300      	str	r3, [sp, #0]
    823c:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8240:	462a      	mov	r2, r5
    8242:	4649      	mov	r1, r9
    8244:	4648      	mov	r0, r9
    8246:	f7ff fa01 	bl	764c <mpi_montmul>
    824a:	2800      	cmp	r0, #0
    824c:	d15a      	bne.n	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
        wbits <<= 1;
    824e:	9b03      	ldr	r3, [sp, #12]
    8250:	005a      	lsls	r2, r3, #1
    8252:	9203      	str	r2, [sp, #12]
        if( ( wbits & ( one << wsize ) ) != 0 )
    8254:	2301      	movs	r3, #1
    8256:	40b3      	lsls	r3, r6
    8258:	4213      	tst	r3, r2
    825a:	d12a      	bne.n	82b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b2>
    for( i = 0; i < nbits; i++ )
    825c:	3401      	adds	r4, #1
    825e:	455c      	cmp	r4, fp
    8260:	d3e9      	bcc.n	8236 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x236>
    8262:	4634      	mov	r4, r6
    8264:	463e      	mov	r6, r7
    8266:	4647      	mov	r7, r8
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    8268:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    826c:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    8270:	4629      	mov	r1, r5
    8272:	4648      	mov	r0, r9
    8274:	f7ff fa58 	bl	7728 <mpi_montred>
    8278:	4680      	mov	r8, r0
    827a:	2800      	cmp	r0, #0
    827c:	f47f ae70 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    8280:	f1ba 3fff 	cmp.w	sl, #4294967295
    8284:	f47f ae6c 	bne.w	7f60 <mbedtls_mpi_exp_mod+0x98>
    8288:	6873      	ldr	r3, [r6, #4]
    828a:	2b00      	cmp	r3, #0
    828c:	f43f ae68 	beq.w	7f60 <mbedtls_mpi_exp_mod+0x98>
    8290:	68b3      	ldr	r3, [r6, #8]
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	f013 0f01 	tst.w	r3, #1
    8298:	f43f ae62 	beq.w	7f60 <mbedtls_mpi_exp_mod+0x98>
        X->s = -1;
    829c:	f04f 33ff 	mov.w	r3, #4294967295
    82a0:	f8c9 3000 	str.w	r3, [r9]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    82a4:	464a      	mov	r2, r9
    82a6:	4629      	mov	r1, r5
    82a8:	4648      	mov	r0, r9
    82aa:	f7ff fb3c 	bl	7926 <mbedtls_mpi_add_mpi>
    82ae:	4680      	mov	r8, r0
cleanup:
    82b0:	e656      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
    82b2:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    82b6:	9300      	str	r3, [sp, #0]
    82b8:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    82bc:	462a      	mov	r2, r5
    82be:	a90c      	add	r1, sp, #48	; 0x30
    82c0:	4648      	mov	r0, r9
    82c2:	f7ff f9c3 	bl	764c <mpi_montmul>
    82c6:	2800      	cmp	r0, #0
    82c8:	d0c8      	beq.n	825c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25c>
    82ca:	4634      	mov	r4, r6
    82cc:	4647      	mov	r7, r8
    82ce:	4680      	mov	r8, r0
    82d0:	e646      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    82d2:	9c04      	ldr	r4, [sp, #16]
    82d4:	4633      	mov	r3, r6
    82d6:	462e      	mov	r6, r5
    82d8:	461d      	mov	r5, r3
    82da:	e7c0      	b.n	825e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25e>
    82dc:	4634      	mov	r4, r6
    82de:	4647      	mov	r7, r8
    82e0:	4680      	mov	r8, r0
    82e2:	e63d      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    82e4:	4634      	mov	r4, r6
    82e6:	4647      	mov	r7, r8
    82e8:	4680      	mov	r8, r0
    82ea:	e639      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    82ec:	4634      	mov	r4, r6
    82ee:	4647      	mov	r7, r8
    82f0:	4680      	mov	r8, r0
    82f2:	e635      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    82f4:	462c      	mov	r4, r5
    82f6:	4647      	mov	r7, r8
    82f8:	4680      	mov	r8, r0
    82fa:	e631      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    82fc:	462c      	mov	r4, r5
    82fe:	4647      	mov	r7, r8
    8300:	4680      	mov	r8, r0
    8302:	e62d      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
    8304:	4634      	mov	r4, r6
    8306:	4647      	mov	r7, r8
    8308:	4680      	mov	r8, r0
    830a:	e629      	b.n	7f60 <mbedtls_mpi_exp_mod+0x98>
        mbedtls_mpi_free( &W[i] );
    830c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    8310:	0098      	lsls	r0, r3, #2
    8312:	ab09      	add	r3, sp, #36	; 0x24
    8314:	4418      	add	r0, r3
    8316:	f7fe ffa8 	bl	726a <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    831a:	3501      	adds	r5, #1
    831c:	2301      	movs	r3, #1
    831e:	40a3      	lsls	r3, r4
    8320:	42ab      	cmp	r3, r5
    8322:	d8f3      	bhi.n	830c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30c>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    8324:	a80c      	add	r0, sp, #48	; 0x30
    8326:	f7fe ffa0 	bl	726a <mbedtls_mpi_free>
    832a:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    832e:	f7fe ff9c 	bl	726a <mbedtls_mpi_free>
    8332:	a806      	add	r0, sp, #24
    8334:	f7fe ff99 	bl	726a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    8338:	b137      	cbz	r7, 8348 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x348>
    833a:	68bb      	ldr	r3, [r7, #8]
    833c:	b123      	cbz	r3, 8348 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x348>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    833e:	4640      	mov	r0, r8
    8340:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
    8344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    8348:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    834c:	f7fe ff8d 	bl	726a <mbedtls_mpi_free>
    8350:	e7f5      	b.n	833e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8352:	f06f 0803 	mvn.w	r8, #3
    8356:	e7f2      	b.n	833e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33e>
    8358:	f06f 0803 	mvn.w	r8, #3
    835c:	e7ef      	b.n	833e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    835e:	f06f 0803 	mvn.w	r8, #3
    8362:	e7ec      	b.n	833e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33e>

00008364 <platform_calloc_uninit>:
}
    8364:	2000      	movs	r0, #0
    8366:	4770      	bx	lr

00008368 <platform_free_uninit>:
}
    8368:	4770      	bx	lr

0000836a <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    836a:	4770      	bx	lr

0000836c <mbedtls_rsa_import>:
{
    836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    836e:	4604      	mov	r4, r0
    8370:	4615      	mov	r5, r2
    8372:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8374:	460f      	mov	r7, r1
    8376:	b121      	cbz	r1, 8382 <mbedtls_rsa_import+0x16>
    8378:	3008      	adds	r0, #8
    837a:	f7fe ffb1 	bl	72e0 <mbedtls_mpi_copy>
    837e:	4603      	mov	r3, r0
    8380:	bb48      	cbnz	r0, 83d6 <mbedtls_rsa_import+0x6a>
    8382:	b135      	cbz	r5, 8392 <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8384:	4629      	mov	r1, r5
    8386:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    838a:	f7fe ffa9 	bl	72e0 <mbedtls_mpi_copy>
    838e:	4603      	mov	r3, r0
    8390:	bb08      	cbnz	r0, 83d6 <mbedtls_rsa_import+0x6a>
    8392:	b136      	cbz	r6, 83a2 <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8394:	4631      	mov	r1, r6
    8396:	f104 0038 	add.w	r0, r4, #56	; 0x38
    839a:	f7fe ffa1 	bl	72e0 <mbedtls_mpi_copy>
    839e:	4603      	mov	r3, r0
    83a0:	b9c8      	cbnz	r0, 83d6 <mbedtls_rsa_import+0x6a>
    83a2:	9b06      	ldr	r3, [sp, #24]
    83a4:	b133      	cbz	r3, 83b4 <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    83a6:	4619      	mov	r1, r3
    83a8:	f104 0020 	add.w	r0, r4, #32
    83ac:	f7fe ff98 	bl	72e0 <mbedtls_mpi_copy>
    83b0:	4603      	mov	r3, r0
    83b2:	b980      	cbnz	r0, 83d6 <mbedtls_rsa_import+0x6a>
    83b4:	9b07      	ldr	r3, [sp, #28]
    83b6:	b133      	cbz	r3, 83c6 <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    83b8:	4619      	mov	r1, r3
    83ba:	f104 0014 	add.w	r0, r4, #20
    83be:	f7fe ff8f 	bl	72e0 <mbedtls_mpi_copy>
    83c2:	4603      	mov	r3, r0
    83c4:	b938      	cbnz	r0, 83d6 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    83c6:	b14f      	cbz	r7, 83dc <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    83c8:	f104 0008 	add.w	r0, r4, #8
    83cc:	f7ff f800 	bl	73d0 <mbedtls_mpi_size>
    83d0:	6060      	str	r0, [r4, #4]
    return( 0 );
    83d2:	2000      	movs	r0, #0
    83d4:	e001      	b.n	83da <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    83d6:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
}
    83da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    83dc:	2000      	movs	r0, #0
    83de:	e7fc      	b.n	83da <mbedtls_rsa_import+0x6e>

000083e0 <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    83e0:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    83e4:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    83e8:	4770      	bx	lr

000083ea <mbedtls_rsa_init>:
{
    83ea:	b570      	push	{r4, r5, r6, lr}
    83ec:	4604      	mov	r4, r0
    83ee:	460d      	mov	r5, r1
    83f0:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    83f2:	22ac      	movs	r2, #172	; 0xac
    83f4:	2100      	movs	r1, #0
    83f6:	f7fe f94b 	bl	6690 <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    83fa:	4632      	mov	r2, r6
    83fc:	4629      	mov	r1, r5
    83fe:	4620      	mov	r0, r4
    8400:	f7ff ffee 	bl	83e0 <mbedtls_rsa_set_padding>
}
    8404:	bd70      	pop	{r4, r5, r6, pc}

00008406 <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    8406:	b3a8      	cbz	r0, 8474 <mbedtls_rsa_free+0x6e>
{
    8408:	b510      	push	{r4, lr}
    840a:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    840c:	308c      	adds	r0, #140	; 0x8c
    840e:	f7fe ff2c 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    8412:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8416:	f7fe ff28 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    841a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    841e:	f7fe ff24 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    8422:	f104 0020 	add.w	r0, r4, #32
    8426:	f7fe ff20 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    842a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    842e:	f7fe ff1c 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    8432:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8436:	f7fe ff18 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    843a:	f104 0014 	add.w	r0, r4, #20
    843e:	f7fe ff14 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    8442:	f104 0008 	add.w	r0, r4, #8
    8446:	f7fe ff10 	bl	726a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    844a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    844e:	f7fe ff0c 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    8452:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8456:	f7fe ff08 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    845a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    845e:	f7fe ff04 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    8462:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8466:	f7fe ff00 	bl	726a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    846a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    846e:	f7fe fefc 	bl	726a <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    8472:	bd10      	pop	{r4, pc}
    8474:	4770      	bx	lr

00008476 <mbedtls_sha256_init>:
{
    8476:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8478:	226c      	movs	r2, #108	; 0x6c
    847a:	2100      	movs	r1, #0
    847c:	f7fe f908 	bl	6690 <memset>
}
    8480:	bd08      	pop	{r3, pc}

00008482 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8486:	b3da      	cbz	r2, 8500 <mbedtls_sha256_update_ret+0x7e>
    8488:	4606      	mov	r6, r0
    848a:	460d      	mov	r5, r1
    848c:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    848e:	6803      	ldr	r3, [r0, #0]
    8490:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    8494:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    8498:	4413      	add	r3, r2
    849a:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    849c:	4293      	cmp	r3, r2
    849e:	d202      	bcs.n	84a6 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    84a0:	6843      	ldr	r3, [r0, #4]
    84a2:	3301      	adds	r3, #1
    84a4:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    84a6:	b10f      	cbz	r7, 84ac <mbedtls_sha256_update_ret+0x2a>
    84a8:	4544      	cmp	r4, r8
    84aa:	d20a      	bcs.n	84c2 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    84ac:	2c3f      	cmp	r4, #63	; 0x3f
    84ae:	d91b      	bls.n	84e8 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    84b0:	4629      	mov	r1, r5
    84b2:	4630      	mov	r0, r6
    84b4:	f7fb fe0c 	bl	40d0 <mbedtls_internal_sha256_process>
    84b8:	4603      	mov	r3, r0
    84ba:	bb10      	cbnz	r0, 8502 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    84bc:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    84be:	3c40      	subs	r4, #64	; 0x40
    84c0:	e7f4      	b.n	84ac <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    84c2:	f106 0928 	add.w	r9, r6, #40	; 0x28
    84c6:	4642      	mov	r2, r8
    84c8:	4629      	mov	r1, r5
    84ca:	eb09 0007 	add.w	r0, r9, r7
    84ce:	f7fe f8ba 	bl	6646 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    84d2:	4649      	mov	r1, r9
    84d4:	4630      	mov	r0, r6
    84d6:	f7fb fdfb 	bl	40d0 <mbedtls_internal_sha256_process>
    84da:	4603      	mov	r3, r0
    84dc:	b988      	cbnz	r0, 8502 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    84de:	4445      	add	r5, r8
        ilen  -= fill;
    84e0:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    84e4:	2700      	movs	r7, #0
    84e6:	e7e1      	b.n	84ac <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    84e8:	b90c      	cbnz	r4, 84ee <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    84ea:	2300      	movs	r3, #0
    84ec:	e009      	b.n	8502 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    84ee:	f106 0028 	add.w	r0, r6, #40	; 0x28
    84f2:	4622      	mov	r2, r4
    84f4:	4629      	mov	r1, r5
    84f6:	4438      	add	r0, r7
    84f8:	f7fe f8a5 	bl	6646 <memcpy>
    return( 0 );
    84fc:	2300      	movs	r3, #0
    84fe:	e000      	b.n	8502 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    8500:	2300      	movs	r3, #0
}
    8502:	4618      	mov	r0, r3
    8504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008508 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    8508:	b570      	push	{r4, r5, r6, lr}
    850a:	4604      	mov	r4, r0
    850c:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    850e:	6803      	ldr	r3, [r0, #0]
    8510:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    8514:	1c58      	adds	r0, r3, #1
    8516:	4423      	add	r3, r4
    8518:	2280      	movs	r2, #128	; 0x80
    851a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    851e:	2838      	cmp	r0, #56	; 0x38
    8520:	d87b      	bhi.n	861a <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    8522:	f104 0328 	add.w	r3, r4, #40	; 0x28
    8526:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    852a:	2100      	movs	r1, #0
    852c:	4418      	add	r0, r3
    852e:	f7fe f8af 	bl	6690 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    8532:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    8534:	6863      	ldr	r3, [r4, #4]
    8536:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    8538:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    853c:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    853e:	0e19      	lsrs	r1, r3, #24
    8540:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    8544:	f3c3 4107 	ubfx	r1, r3, #16, #8
    8548:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    854c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    8550:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    8554:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    8558:	0e13      	lsrs	r3, r2, #24
    855a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    855e:	f3c2 4307 	ubfx	r3, r2, #16, #8
    8562:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    8566:	f3c2 2307 	ubfx	r3, r2, #8, #8
    856a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    856e:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8572:	f104 0128 	add.w	r1, r4, #40	; 0x28
    8576:	4620      	mov	r0, r4
    8578:	f7fb fdaa 	bl	40d0 <mbedtls_internal_sha256_process>
    857c:	4603      	mov	r3, r0
    857e:	2800      	cmp	r0, #0
    8580:	d159      	bne.n	8636 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    8582:	7ae2      	ldrb	r2, [r4, #11]
    8584:	702a      	strb	r2, [r5, #0]
    8586:	7aa2      	ldrb	r2, [r4, #10]
    8588:	706a      	strb	r2, [r5, #1]
    858a:	7a62      	ldrb	r2, [r4, #9]
    858c:	70aa      	strb	r2, [r5, #2]
    858e:	7a22      	ldrb	r2, [r4, #8]
    8590:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    8592:	7be2      	ldrb	r2, [r4, #15]
    8594:	712a      	strb	r2, [r5, #4]
    8596:	7ba2      	ldrb	r2, [r4, #14]
    8598:	716a      	strb	r2, [r5, #5]
    859a:	7b62      	ldrb	r2, [r4, #13]
    859c:	71aa      	strb	r2, [r5, #6]
    859e:	7b22      	ldrb	r2, [r4, #12]
    85a0:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    85a2:	7ce2      	ldrb	r2, [r4, #19]
    85a4:	722a      	strb	r2, [r5, #8]
    85a6:	7ca2      	ldrb	r2, [r4, #18]
    85a8:	726a      	strb	r2, [r5, #9]
    85aa:	7c62      	ldrb	r2, [r4, #17]
    85ac:	72aa      	strb	r2, [r5, #10]
    85ae:	7c22      	ldrb	r2, [r4, #16]
    85b0:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    85b2:	7de2      	ldrb	r2, [r4, #23]
    85b4:	732a      	strb	r2, [r5, #12]
    85b6:	7da2      	ldrb	r2, [r4, #22]
    85b8:	736a      	strb	r2, [r5, #13]
    85ba:	7d62      	ldrb	r2, [r4, #21]
    85bc:	73aa      	strb	r2, [r5, #14]
    85be:	7d22      	ldrb	r2, [r4, #20]
    85c0:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    85c2:	7ee2      	ldrb	r2, [r4, #27]
    85c4:	742a      	strb	r2, [r5, #16]
    85c6:	7ea2      	ldrb	r2, [r4, #26]
    85c8:	746a      	strb	r2, [r5, #17]
    85ca:	7e62      	ldrb	r2, [r4, #25]
    85cc:	74aa      	strb	r2, [r5, #18]
    85ce:	7e22      	ldrb	r2, [r4, #24]
    85d0:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    85d2:	7fe2      	ldrb	r2, [r4, #31]
    85d4:	752a      	strb	r2, [r5, #20]
    85d6:	7fa2      	ldrb	r2, [r4, #30]
    85d8:	756a      	strb	r2, [r5, #21]
    85da:	7f62      	ldrb	r2, [r4, #29]
    85dc:	75aa      	strb	r2, [r5, #22]
    85de:	7f22      	ldrb	r2, [r4, #28]
    85e0:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    85e2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    85e6:	762a      	strb	r2, [r5, #24]
    85e8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    85ec:	766a      	strb	r2, [r5, #25]
    85ee:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    85f2:	76aa      	strb	r2, [r5, #26]
    85f4:	f894 2020 	ldrb.w	r2, [r4, #32]
    85f8:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    85fa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    85fc:	b9da      	cbnz	r2, 8636 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    85fe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    8602:	772b      	strb	r3, [r5, #28]
    8604:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    8608:	776b      	strb	r3, [r5, #29]
    860a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    860e:	77ab      	strb	r3, [r5, #30]
    8610:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    8614:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    8616:	4613      	mov	r3, r2
    8618:	e00d      	b.n	8636 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    861a:	f104 0628 	add.w	r6, r4, #40	; 0x28
    861e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    8622:	2100      	movs	r1, #0
    8624:	4430      	add	r0, r6
    8626:	f7fe f833 	bl	6690 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    862a:	4631      	mov	r1, r6
    862c:	4620      	mov	r0, r4
    862e:	f7fb fd4f 	bl	40d0 <mbedtls_internal_sha256_process>
    8632:	4603      	mov	r3, r0
    8634:	b108      	cbz	r0, 863a <mbedtls_sha256_finish_ret+0x132>
}
    8636:	4618      	mov	r0, r3
    8638:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    863a:	2238      	movs	r2, #56	; 0x38
    863c:	2100      	movs	r1, #0
    863e:	4630      	mov	r0, r6
    8640:	f7fe f826 	bl	6690 <memset>
    8644:	e775      	b.n	8532 <mbedtls_sha256_finish_ret+0x2a>

00008646 <cbuf_buf_reader_get8>:
    return cb->buffer[offset];
    8646:	6a03      	ldr	r3, [r0, #32]
}
    8648:	5c58      	ldrb	r0, [r3, r1]
    864a:	4770      	bx	lr

0000864c <cbor_buf_reader_get_string_chunk>:
    return get_string_chunk(cb->buffer + offset);
    864c:	6a00      	ldr	r0, [r0, #32]
}
    864e:	4408      	add	r0, r1
    8650:	4770      	bx	lr

00008652 <cbor_buf_reader_cpy>:
{
    8652:	b510      	push	{r4, lr}
    8654:	460c      	mov	r4, r1
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
    8656:	6a01      	ldr	r1, [r0, #32]
    8658:	4411      	add	r1, r2
    865a:	461a      	mov	r2, r3
    865c:	4620      	mov	r0, r4
    865e:	f7fd fff2 	bl	6646 <memcpy>
}
    8662:	bd10      	pop	{r4, pc}

00008664 <cbor_buf_reader_cmp>:
{
    8664:	b510      	push	{r4, lr}
    8666:	460c      	mov	r4, r1
    return !memcmp(dst, cb->buffer + src_offset, len);
    8668:	6a01      	ldr	r1, [r0, #32]
    866a:	4411      	add	r1, r2
    866c:	461a      	mov	r2, r3
    866e:	4620      	mov	r0, r4
    8670:	f7fd ffd1 	bl	6616 <memcmp>
}
    8674:	fab0 f080 	clz	r0, r0
    8678:	0940      	lsrs	r0, r0, #5
    867a:	bd10      	pop	{r4, pc}

0000867c <cbuf_buf_reader_get64>:
{
    867c:	b500      	push	{lr}
    867e:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
    8680:	6a03      	ldr	r3, [r0, #32]
    memcpy(&result, ptr, sizeof(result));
    8682:	2208      	movs	r2, #8
    8684:	4419      	add	r1, r3
    8686:	4668      	mov	r0, sp
    8688:	f7fd ffdd 	bl	6646 <memcpy>
}
    868c:	9801      	ldr	r0, [sp, #4]
    868e:	ba00      	rev	r0, r0
    8690:	9900      	ldr	r1, [sp, #0]
    8692:	ba09      	rev	r1, r1
    8694:	b003      	add	sp, #12
    8696:	f85d fb04 	ldr.w	pc, [sp], #4

0000869a <cbuf_buf_reader_get32>:
{
    869a:	b500      	push	{lr}
    869c:	b083      	sub	sp, #12
    val = get32(cb->buffer + offset);
    869e:	6a03      	ldr	r3, [r0, #32]
    memcpy(&result, ptr, sizeof(result));
    86a0:	2204      	movs	r2, #4
    86a2:	4419      	add	r1, r3
    86a4:	eb0d 0002 	add.w	r0, sp, r2
    86a8:	f7fd ffcd 	bl	6646 <memcpy>
}
    86ac:	9801      	ldr	r0, [sp, #4]
    86ae:	ba00      	rev	r0, r0
    86b0:	b003      	add	sp, #12
    86b2:	f85d fb04 	ldr.w	pc, [sp], #4

000086b6 <cbuf_buf_reader_get16>:
{
    86b6:	b500      	push	{lr}
    86b8:	b083      	sub	sp, #12
    return get16(cb->buffer + offset);
    86ba:	6a03      	ldr	r3, [r0, #32]
    memcpy(&result, ptr, sizeof(result));
    86bc:	2202      	movs	r2, #2
    86be:	4419      	add	r1, r3
    86c0:	f10d 0006 	add.w	r0, sp, #6
    86c4:	f7fd ffbf 	bl	6646 <memcpy>
    return cbor_ntohs(result);
    86c8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    86cc:	ba40      	rev16	r0, r0
}
    86ce:	b280      	uxth	r0, r0
    86d0:	b003      	add	sp, #12
    86d2:	f85d fb04 	ldr.w	pc, [sp], #4

000086d6 <create_container>:
{
    86d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    86d8:	b087      	sub	sp, #28
    86da:	460c      	mov	r4, r1
    86dc:	461d      	mov	r5, r3
    container->writer = encoder->writer;
    86de:	6803      	ldr	r3, [r0, #0]
    86e0:	600b      	str	r3, [r1, #0]
    container->wr.end = encoder->wr.end;
    86e2:	6943      	ldr	r3, [r0, #20]
    86e4:	614b      	str	r3, [r1, #20]
    if (encoder->remaining)
    86e6:	69c3      	ldr	r3, [r0, #28]
    86e8:	b10b      	cbz	r3, 86ee <create_container+0x18>
        --encoder->remaining;
    86ea:	3b01      	subs	r3, #1
    86ec:	61c3      	str	r3, [r0, #28]
    container->remaining = length + 1;      /* overflow ok on CborIndefiniteLength */
    86ee:	1c51      	adds	r1, r2, #1
    86f0:	61e1      	str	r1, [r4, #28]
    86f2:	f005 0320 	and.w	r3, r5, #32
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
    86f6:	6223      	str	r3, [r4, #32]
    if (length == CborIndefiniteLength) {
    86f8:	f1b2 3fff 	cmp.w	r2, #4294967295
    86fc:	d10c      	bne.n	8718 <create_container+0x42>
        container->flags |= CborIteratorFlag_UnknownLength;
    86fe:	f043 0304 	orr.w	r3, r3, #4
    8702:	6223      	str	r3, [r4, #32]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
    8704:	351f      	adds	r5, #31
    8706:	a906      	add	r1, sp, #24
    8708:	f801 5d10 	strb.w	r5, [r1, #-16]!
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    870c:	6820      	ldr	r0, [r4, #0]
    870e:	6803      	ldr	r3, [r0, #0]
    8710:	2201      	movs	r2, #1
    8712:	4798      	blx	r3
}
    8714:	b007      	add	sp, #28
    8716:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (shiftedMajorType & CborIteratorFlag_ContainerIsMap)
    8718:	b10b      	cbz	r3, 871e <create_container+0x48>
            container->remaining += length;
    871a:	4411      	add	r1, r2
    871c:	61e1      	str	r1, [r4, #28]
        err = encode_number_no_update(container, length, shiftedMajorType);
    871e:	4616      	mov	r6, r2
    8720:	2700      	movs	r7, #0
    v = cbor_htonll(v);
    8722:	ba12      	rev	r2, r2
    8724:	2300      	movs	r3, #0
    8726:	9300      	str	r3, [sp, #0]
    8728:	9201      	str	r2, [sp, #4]
    memcpy(where, &v, sizeof(v));
    872a:	2208      	movs	r2, #8
    872c:	4669      	mov	r1, sp
    872e:	a804      	add	r0, sp, #16
    8730:	f7fd ff89 	bl	6646 <memcpy>
    if (ui < Value8Bit) {
    8734:	2f00      	cmp	r7, #0
    8736:	bf08      	it	eq
    8738:	2e18      	cmpeq	r6, #24
    873a:	d31b      	bcc.n	8774 <create_container+0x9e>
        if (ui > 0xffU)
    873c:	2f00      	cmp	r7, #0
    873e:	bf08      	it	eq
    8740:	f5b6 7f80 	cmpeq.w	r6, #256	; 0x100
    8744:	d21d      	bcs.n	8782 <create_container+0xac>
        uint8_t more = 0;
    8746:	2300      	movs	r3, #0
        if (ui > 0xffffU)
    8748:	2f00      	cmp	r7, #0
    874a:	bf08      	it	eq
    874c:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
    8750:	d301      	bcc.n	8756 <create_container+0x80>
            ++more;
    8752:	3301      	adds	r3, #1
    8754:	b2db      	uxtb	r3, r3
        bufstart -= (size_t)1 << more;
    8756:	2101      	movs	r1, #1
    8758:	fa01 f203 	lsl.w	r2, r1, r3
    875c:	f10d 0117 	add.w	r1, sp, #23
    8760:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    8762:	441d      	add	r5, r3
    8764:	3518      	adds	r5, #24
    8766:	700d      	strb	r5, [r1, #0]
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    8768:	6820      	ldr	r0, [r4, #0]
    876a:	6803      	ldr	r3, [r0, #0]
    876c:	aa06      	add	r2, sp, #24
    876e:	1a52      	subs	r2, r2, r1
    8770:	4798      	blx	r3
    return err;
    8772:	e7cf      	b.n	8714 <create_container+0x3e>
        *bufstart += shiftedMajorType;
    8774:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8778:	441d      	add	r5, r3
    877a:	a906      	add	r1, sp, #24
    877c:	f801 5d01 	strb.w	r5, [r1, #-1]!
    8780:	e7f2      	b.n	8768 <create_container+0x92>
            ++more;
    8782:	2301      	movs	r3, #1
    8784:	e7e0      	b.n	8748 <create_container+0x72>

00008786 <encode_string>:
{
    8786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    878a:	b087      	sub	sp, #28
    878c:	4604      	mov	r4, r0
    878e:	460e      	mov	r6, r1
    8790:	4615      	mov	r5, r2
    8792:	461f      	mov	r7, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
    8794:	4688      	mov	r8, r1
    8796:	f04f 0900 	mov.w	r9, #0
    if (encoder->remaining)
    879a:	69c3      	ldr	r3, [r0, #28]
    879c:	b10b      	cbz	r3, 87a2 <encode_string+0x1c>
        --encoder->remaining;
    879e:	3b01      	subs	r3, #1
    87a0:	61c3      	str	r3, [r0, #28]
    v = cbor_htonll(v);
    87a2:	ba33      	rev	r3, r6
    87a4:	2200      	movs	r2, #0
    87a6:	9200      	str	r2, [sp, #0]
    87a8:	9301      	str	r3, [sp, #4]
    memcpy(where, &v, sizeof(v));
    87aa:	2208      	movs	r2, #8
    87ac:	4669      	mov	r1, sp
    87ae:	a804      	add	r0, sp, #16
    87b0:	f7fd ff49 	bl	6646 <memcpy>
    if (ui < Value8Bit) {
    87b4:	f1b9 0f00 	cmp.w	r9, #0
    87b8:	bf08      	it	eq
    87ba:	f1b8 0f18 	cmpeq.w	r8, #24
    87be:	d324      	bcc.n	880a <encode_string+0x84>
        if (ui > 0xffU)
    87c0:	f1b9 0f00 	cmp.w	r9, #0
    87c4:	bf08      	it	eq
    87c6:	f5b8 7f80 	cmpeq.w	r8, #256	; 0x100
    87ca:	d225      	bcs.n	8818 <encode_string+0x92>
        uint8_t more = 0;
    87cc:	2300      	movs	r3, #0
        if (ui > 0xffffU)
    87ce:	f1b9 0f00 	cmp.w	r9, #0
    87d2:	bf08      	it	eq
    87d4:	f5b8 3f80 	cmpeq.w	r8, #65536	; 0x10000
    87d8:	d301      	bcc.n	87de <encode_string+0x58>
            ++more;
    87da:	3301      	adds	r3, #1
    87dc:	b2db      	uxtb	r3, r3
        bufstart -= (size_t)1 << more;
    87de:	2101      	movs	r1, #1
    87e0:	fa01 f203 	lsl.w	r2, r1, r3
    87e4:	f10d 0117 	add.w	r1, sp, #23
    87e8:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    87ea:	441d      	add	r5, r3
    87ec:	3518      	adds	r5, #24
    87ee:	700d      	strb	r5, [r1, #0]
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    87f0:	6820      	ldr	r0, [r4, #0]
    87f2:	6803      	ldr	r3, [r0, #0]
    87f4:	aa06      	add	r2, sp, #24
    87f6:	1a52      	subs	r2, r2, r1
    87f8:	4798      	blx	r3
    87fa:	6820      	ldr	r0, [r4, #0]
    87fc:	6803      	ldr	r3, [r0, #0]
    87fe:	4632      	mov	r2, r6
    8800:	4639      	mov	r1, r7
    8802:	4798      	blx	r3
}
    8804:	b007      	add	sp, #28
    8806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *bufstart += shiftedMajorType;
    880a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    880e:	441d      	add	r5, r3
    8810:	a906      	add	r1, sp, #24
    8812:	f801 5d01 	strb.w	r5, [r1, #-1]!
    8816:	e7eb      	b.n	87f0 <encode_string+0x6a>
            ++more;
    8818:	2301      	movs	r3, #1
    881a:	e7d8      	b.n	87ce <encode_string+0x48>

0000881c <cbor_encoder_cust_writer_init>:
    encoder->writer = w;
    881c:	6001      	str	r1, [r0, #0]
    encoder->remaining = 2;
    881e:	2302      	movs	r3, #2
    8820:	61c3      	str	r3, [r0, #28]
    encoder->flags = flags;
    8822:	6202      	str	r2, [r0, #32]
}
    8824:	4770      	bx	lr

00008826 <cbor_encode_uint>:
{
    8826:	b570      	push	{r4, r5, r6, lr}
    8828:	b086      	sub	sp, #24
    882a:	4606      	mov	r6, r0
    882c:	4614      	mov	r4, r2
    882e:	461d      	mov	r5, r3
    if (encoder->remaining)
    8830:	69c3      	ldr	r3, [r0, #28]
    8832:	b10b      	cbz	r3, 8838 <cbor_encode_uint+0x12>
        --encoder->remaining;
    8834:	3b01      	subs	r3, #1
    8836:	61c3      	str	r3, [r0, #28]
    v = cbor_htonll(v);
    8838:	ba23      	rev	r3, r4
    883a:	ba2a      	rev	r2, r5
    883c:	9200      	str	r2, [sp, #0]
    883e:	9301      	str	r3, [sp, #4]
    memcpy(where, &v, sizeof(v));
    8840:	2208      	movs	r2, #8
    8842:	4669      	mov	r1, sp
    8844:	a804      	add	r0, sp, #16
    8846:	f7fd fefe 	bl	6646 <memcpy>
    if (ui < Value8Bit) {
    884a:	2d00      	cmp	r5, #0
    884c:	bf08      	it	eq
    884e:	2c18      	cmpeq	r4, #24
    8850:	d321      	bcc.n	8896 <cbor_encode_uint+0x70>
        if (ui > 0xffU)
    8852:	2d00      	cmp	r5, #0
    8854:	bf08      	it	eq
    8856:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
    885a:	d222      	bcs.n	88a2 <cbor_encode_uint+0x7c>
        uint8_t more = 0;
    885c:	2300      	movs	r3, #0
        if (ui > 0xffffU)
    885e:	2d00      	cmp	r5, #0
    8860:	bf08      	it	eq
    8862:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
    8866:	d301      	bcc.n	886c <cbor_encode_uint+0x46>
            ++more;
    8868:	3301      	adds	r3, #1
    886a:	b2db      	uxtb	r3, r3
        if (ui > 0xffffffffU)
    886c:	2d01      	cmp	r5, #1
    886e:	bf08      	it	eq
    8870:	2c00      	cmpeq	r4, #0
    8872:	d301      	bcc.n	8878 <cbor_encode_uint+0x52>
            ++more;
    8874:	3301      	adds	r3, #1
    8876:	b2db      	uxtb	r3, r3
        bufstart -= (size_t)1 << more;
    8878:	2101      	movs	r1, #1
    887a:	fa01 f203 	lsl.w	r2, r1, r3
    887e:	f10d 0117 	add.w	r1, sp, #23
    8882:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    8884:	3318      	adds	r3, #24
    8886:	700b      	strb	r3, [r1, #0]
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    8888:	6830      	ldr	r0, [r6, #0]
    888a:	6803      	ldr	r3, [r0, #0]
    888c:	aa06      	add	r2, sp, #24
    888e:	1a52      	subs	r2, r2, r1
    8890:	4798      	blx	r3
}
    8892:	b006      	add	sp, #24
    8894:	bd70      	pop	{r4, r5, r6, pc}
        *bufstart += shiftedMajorType;
    8896:	f89d 3017 	ldrb.w	r3, [sp, #23]
    889a:	a906      	add	r1, sp, #24
    889c:	f801 3d01 	strb.w	r3, [r1, #-1]!
    88a0:	e7f2      	b.n	8888 <cbor_encode_uint+0x62>
            ++more;
    88a2:	2301      	movs	r3, #1
    88a4:	e7db      	b.n	885e <cbor_encode_uint+0x38>

000088a6 <cbor_encode_int>:
{
    88a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    88aa:	b087      	sub	sp, #28
    88ac:	4607      	mov	r7, r0
    88ae:	461d      	mov	r5, r3
    uint64_t ui = value >> 63;              /* extend sign to whole length */
    88b0:	17db      	asrs	r3, r3, #31
    88b2:	4618      	mov	r0, r3
    uint8_t majorType = ui & 0x20;          /* extract major type */
    88b4:	b2db      	uxtb	r3, r3
    88b6:	f003 0620 	and.w	r6, r3, #32
    ui ^= value;                            /* complement negatives */
    88ba:	ea82 0800 	eor.w	r8, r2, r0
    88be:	ea85 0900 	eor.w	r9, r5, r0
    if (encoder->remaining)
    88c2:	69fb      	ldr	r3, [r7, #28]
    88c4:	b10b      	cbz	r3, 88ca <cbor_encode_int+0x24>
        --encoder->remaining;
    88c6:	3b01      	subs	r3, #1
    88c8:	61fb      	str	r3, [r7, #28]
    v = cbor_htonll(v);
    88ca:	fa98 f388 	rev.w	r3, r8
    88ce:	fa99 f289 	rev.w	r2, r9
    88d2:	9200      	str	r2, [sp, #0]
    88d4:	9301      	str	r3, [sp, #4]
    memcpy(where, &v, sizeof(v));
    88d6:	2208      	movs	r2, #8
    88d8:	4669      	mov	r1, sp
    88da:	a804      	add	r0, sp, #16
    88dc:	f7fd feb3 	bl	6646 <memcpy>
    if (ui < Value8Bit) {
    88e0:	f1b9 0f00 	cmp.w	r9, #0
    88e4:	bf08      	it	eq
    88e6:	f1b8 0f18 	cmpeq.w	r8, #24
    88ea:	d327      	bcc.n	893c <cbor_encode_int+0x96>
        if (ui > 0xffU)
    88ec:	f1b9 0f00 	cmp.w	r9, #0
    88f0:	bf08      	it	eq
    88f2:	f5b8 7f80 	cmpeq.w	r8, #256	; 0x100
    88f6:	d228      	bcs.n	894a <cbor_encode_int+0xa4>
        uint8_t more = 0;
    88f8:	2300      	movs	r3, #0
        if (ui > 0xffffU)
    88fa:	f1b9 0f00 	cmp.w	r9, #0
    88fe:	bf08      	it	eq
    8900:	f5b8 3f80 	cmpeq.w	r8, #65536	; 0x10000
    8904:	d301      	bcc.n	890a <cbor_encode_int+0x64>
            ++more;
    8906:	3301      	adds	r3, #1
    8908:	b2db      	uxtb	r3, r3
        if (ui > 0xffffffffU)
    890a:	f1b9 0f01 	cmp.w	r9, #1
    890e:	bf08      	it	eq
    8910:	f1b8 0f00 	cmpeq.w	r8, #0
    8914:	d301      	bcc.n	891a <cbor_encode_int+0x74>
            ++more;
    8916:	3301      	adds	r3, #1
    8918:	b2db      	uxtb	r3, r3
        bufstart -= (size_t)1 << more;
    891a:	2101      	movs	r1, #1
    891c:	fa01 f203 	lsl.w	r2, r1, r3
    8920:	f10d 0117 	add.w	r1, sp, #23
    8924:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    8926:	441e      	add	r6, r3
    8928:	3618      	adds	r6, #24
    892a:	700e      	strb	r6, [r1, #0]
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    892c:	6838      	ldr	r0, [r7, #0]
    892e:	6803      	ldr	r3, [r0, #0]
    8930:	aa06      	add	r2, sp, #24
    8932:	1a52      	subs	r2, r2, r1
    8934:	4798      	blx	r3
}
    8936:	b007      	add	sp, #28
    8938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *bufstart += shiftedMajorType;
    893c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8940:	441e      	add	r6, r3
    8942:	a906      	add	r1, sp, #24
    8944:	f801 6d01 	strb.w	r6, [r1, #-1]!
    8948:	e7f0      	b.n	892c <cbor_encode_int+0x86>
            ++more;
    894a:	2301      	movs	r3, #1
    894c:	e7d5      	b.n	88fa <cbor_encode_int+0x54>

0000894e <cbor_encode_text_string>:
{
    894e:	b510      	push	{r4, lr}
    8950:	4614      	mov	r4, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
    8952:	460b      	mov	r3, r1
    8954:	2260      	movs	r2, #96	; 0x60
    8956:	4621      	mov	r1, r4
    8958:	f7ff ff15 	bl	8786 <encode_string>
}
    895c:	bd10      	pop	{r4, pc}

0000895e <cbor_encoder_create_array>:
{
    895e:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
    8960:	2380      	movs	r3, #128	; 0x80
    8962:	f7ff feb8 	bl	86d6 <create_container>
}
    8966:	bd08      	pop	{r3, pc}

00008968 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
    8968:	680b      	ldr	r3, [r1, #0]
    896a:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
    896c:	6a0b      	ldr	r3, [r1, #32]
    896e:	f013 0f04 	tst.w	r3, #4
    8972:	d00c      	beq.n	898e <cbor_encoder_close_container+0x26>
{
    8974:	b500      	push	{lr}
    8976:	b083      	sub	sp, #12
    8978:	a902      	add	r1, sp, #8
    897a:	23ff      	movs	r3, #255	; 0xff
    897c:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return (CborError)encoder->writer->write(encoder->writer, (const char *)data, len);
    8980:	6800      	ldr	r0, [r0, #0]
    8982:	6803      	ldr	r3, [r0, #0]
    8984:	2201      	movs	r2, #1
    8986:	4798      	blx	r3
        return CborErrorOutOfMemory;
    }
#endif

    return CborNoError;
}
    8988:	b003      	add	sp, #12
    898a:	f85d fb04 	ldr.w	pc, [sp], #4
    if (containerEncoder->remaining != 1)
    898e:	69cb      	ldr	r3, [r1, #28]
    8990:	2b01      	cmp	r3, #1
    8992:	d003      	beq.n	899c <cbor_encoder_close_container+0x34>
        return containerEncoder->remaining == 0 ? CborErrorTooManyItems : CborErrorTooFewItems;
    8994:	b94b      	cbnz	r3, 89aa <cbor_encoder_close_container+0x42>
    8996:	f44f 7040 	mov.w	r0, #768	; 0x300
    899a:	4770      	bx	lr
    if (!encoder->wr.end) {
    899c:	6943      	ldr	r3, [r0, #20]
    899e:	b10b      	cbz	r3, 89a4 <cbor_encoder_close_container+0x3c>
    return CborNoError;
    89a0:	2000      	movs	r0, #0
}
    89a2:	4770      	bx	lr
        return CborErrorOutOfMemory;
    89a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    89a8:	4770      	bx	lr
        return containerEncoder->remaining == 0 ? CborErrorTooManyItems : CborErrorTooFewItems;
    89aa:	f240 3001 	movw	r0, #769	; 0x301
    89ae:	4770      	bx	lr

000089b0 <is_fixed_type>:
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
    89b0:	2860      	cmp	r0, #96	; 0x60
    89b2:	d009      	beq.n	89c8 <is_fixed_type+0x18>
    89b4:	2840      	cmp	r0, #64	; 0x40
    89b6:	d009      	beq.n	89cc <is_fixed_type+0x1c>
    89b8:	2880      	cmp	r0, #128	; 0x80
    89ba:	d009      	beq.n	89d0 <is_fixed_type+0x20>
    89bc:	28a0      	cmp	r0, #160	; 0xa0
    89be:	d001      	beq.n	89c4 <is_fixed_type+0x14>
    89c0:	2001      	movs	r0, #1
}
    89c2:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
    89c4:	2000      	movs	r0, #0
    89c6:	4770      	bx	lr
    89c8:	2000      	movs	r0, #0
    89ca:	4770      	bx	lr
    89cc:	2000      	movs	r0, #0
    89ce:	4770      	bx	lr
    89d0:	2000      	movs	r0, #0
    89d2:	4770      	bx	lr

000089d4 <get_string_chunk_update>:
{
    89d4:	b570      	push	{r4, r5, r6, lr}
    89d6:	4604      	mov	r4, r0
    89d8:	460d      	mov	r5, r1
    89da:	4616      	mov	r6, r2
    *bufferptr = (const void *)it->parser->d->get_string_chunk(it->parser->d,
    89dc:	6803      	ldr	r3, [r0, #0]
    89de:	6a58      	ldr	r0, [r3, #36]	; 0x24
    89e0:	6983      	ldr	r3, [r0, #24]
    89e2:	6861      	ldr	r1, [r4, #4]
    89e4:	4798      	blx	r3
    89e6:	6028      	str	r0, [r5, #0]
    it->offset += *len;
    89e8:	6832      	ldr	r2, [r6, #0]
    89ea:	6863      	ldr	r3, [r4, #4]
    89ec:	4413      	add	r3, r2
    89ee:	6063      	str	r3, [r4, #4]
    it->remainingclen -= *len;
    89f0:	6832      	ldr	r2, [r6, #0]
    89f2:	68e3      	ldr	r3, [r4, #12]
    89f4:	1a9b      	subs	r3, r3, r2
    89f6:	60e3      	str	r3, [r4, #12]
}
    89f8:	6828      	ldr	r0, [r5, #0]
    89fa:	bd70      	pop	{r4, r5, r6, pc}

000089fc <iterate_noop>:
}
    89fc:	2001      	movs	r0, #1
    89fe:	4770      	bx	lr

00008a00 <preparse_value>:
{
    8a00:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
    8a02:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
    8a04:	23ff      	movs	r3, #255	; 0xff
    8a06:	7483      	strb	r3, [r0, #18]
    if (it->offset == parser->end)
    8a08:	6841      	ldr	r1, [r0, #4]
    8a0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8a0c:	4299      	cmp	r1, r3
    8a0e:	f000 8089 	beq.w	8b24 <preparse_value+0x124>
    8a12:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
    8a14:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8a16:	6803      	ldr	r3, [r0, #0]
    8a18:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
    8a1a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
    8a1e:	74a5      	strb	r5, [r4, #18]
    it->flags = 0;
    8a20:	2300      	movs	r3, #0
    8a22:	74e3      	strb	r3, [r4, #19]
    it->remainingclen = 0;
    8a24:	60e3      	str	r3, [r4, #12]
    it->extra = (descriptor &= SmallValueMask);
    8a26:	f000 001f 	and.w	r0, r0, #31
    8a2a:	8220      	strh	r0, [r4, #16]
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
    8a2c:	2817      	cmp	r0, #23
    8a2e:	d904      	bls.n	8a3a <preparse_value+0x3a>
    8a30:	f1a0 0218 	sub.w	r2, r0, #24
    8a34:	2301      	movs	r3, #1
    8a36:	4093      	lsls	r3, r2
    8a38:	e000      	b.n	8a3c <preparse_value+0x3c>
    8a3a:	2300      	movs	r3, #0
    if (descriptor > Value64Bit) {
    8a3c:	281b      	cmp	r0, #27
    8a3e:	d91d      	bls.n	8a7c <preparse_value+0x7c>
        if (unlikely(descriptor != IndefiniteLength))
    8a40:	281f      	cmp	r0, #31
    8a42:	d10b      	bne.n	8a5c <preparse_value+0x5c>
        if (likely(!is_fixed_type(type))) {
    8a44:	4628      	mov	r0, r5
    8a46:	f7ff ffb3 	bl	89b0 <is_fixed_type>
    8a4a:	f080 0001 	eor.w	r0, r0, #1
    8a4e:	f010 0fff 	tst.w	r0, #255	; 0xff
    8a52:	d00b      	beq.n	8a6c <preparse_value+0x6c>
            it->flags |= CborIteratorFlag_UnknownLength;
    8a54:	2304      	movs	r3, #4
    8a56:	74e3      	strb	r3, [r4, #19]
            return CborNoError;
    8a58:	2000      	movs	r0, #0
}
    8a5a:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
    8a5c:	2de0      	cmp	r5, #224	; 0xe0
    8a5e:	d002      	beq.n	8a66 <preparse_value+0x66>
    8a60:	f240 1005 	movw	r0, #261	; 0x105
    8a64:	e7f9      	b.n	8a5a <preparse_value+0x5a>
    8a66:	f240 1003 	movw	r0, #259	; 0x103
    8a6a:	e7f6      	b.n	8a5a <preparse_value+0x5a>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
    8a6c:	2de0      	cmp	r5, #224	; 0xe0
    8a6e:	d002      	beq.n	8a76 <preparse_value+0x76>
    8a70:	f240 1005 	movw	r0, #261	; 0x105
    8a74:	e7f1      	b.n	8a5a <preparse_value+0x5a>
    8a76:	f44f 7081 	mov.w	r0, #258	; 0x102
    8a7a:	e7ee      	b.n	8a5a <preparse_value+0x5a>
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
    8a7c:	3301      	adds	r3, #1
    8a7e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    8a80:	6861      	ldr	r1, [r4, #4]
    8a82:	1a52      	subs	r2, r2, r1
    8a84:	4293      	cmp	r3, r2
    8a86:	d850      	bhi.n	8b2a <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
    8a88:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
    8a8a:	2d01      	cmp	r5, #1
    8a8c:	d00c      	beq.n	8aa8 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
    8a8e:	2d07      	cmp	r5, #7
    8a90:	d00f      	beq.n	8ab2 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
    8a92:	2817      	cmp	r0, #23
    8a94:	d94e      	bls.n	8b34 <preparse_value+0x134>
    if (descriptor == Value8Bit)
    8a96:	2818      	cmp	r0, #24
    8a98:	d135      	bne.n	8b06 <preparse_value+0x106>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
    8a9a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8a9c:	6803      	ldr	r3, [r0, #0]
    8a9e:	3101      	adds	r1, #1
    8aa0:	4798      	blx	r3
    8aa2:	8220      	strh	r0, [r4, #16]
    return CborNoError;
    8aa4:	2000      	movs	r0, #0
    8aa6:	e7d8      	b.n	8a5a <preparse_value+0x5a>
        it->flags |= CborIteratorFlag_NegativeInteger;
    8aa8:	2302      	movs	r3, #2
    8aaa:	74e3      	strb	r3, [r4, #19]
        it->type = CborIntegerType;
    8aac:	2300      	movs	r3, #0
    8aae:	74a3      	strb	r3, [r4, #18]
    8ab0:	e7ef      	b.n	8a92 <preparse_value+0x92>
        switch (descriptor) {
    8ab2:	3814      	subs	r0, #20
    8ab4:	280b      	cmp	r0, #11
    8ab6:	d83b      	bhi.n	8b30 <preparse_value+0x130>
    8ab8:	e8df f000 	tbb	[pc, r0]
    8abc:	10101009 	.word	0x10101009
    8ac0:	0e0e1016 	.word	0x0e0e1016
    8ac4:	06060606 	.word	0x06060606
            return CborErrorUnexpectedBreak;
    8ac8:	f44f 7081 	mov.w	r0, #258	; 0x102
    8acc:	e7c5      	b.n	8a5a <preparse_value+0x5a>
            it->extra = false;
    8ace:	2000      	movs	r0, #0
    8ad0:	8220      	strh	r0, [r4, #16]
            it->type = CborBooleanType;
    8ad2:	23f5      	movs	r3, #245	; 0xf5
    8ad4:	74a3      	strb	r3, [r4, #18]
            break;
    8ad6:	e7c0      	b.n	8a5a <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
    8ad8:	2301      	movs	r3, #1
    8ada:	74e3      	strb	r3, [r4, #19]
            it->type = parser->d->get8(parser->d, it->offset);
    8adc:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8ade:	6803      	ldr	r3, [r0, #0]
    8ae0:	4798      	blx	r3
    8ae2:	74a0      	strb	r0, [r4, #18]
        return CborNoError;
    8ae4:	2000      	movs	r0, #0
            break;
    8ae6:	e7b8      	b.n	8a5a <preparse_value+0x5a>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
    8ae8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8aea:	6803      	ldr	r3, [r0, #0]
    8aec:	3101      	adds	r1, #1
    8aee:	4798      	blx	r3
    8af0:	b280      	uxth	r0, r0
    8af2:	8220      	strh	r0, [r4, #16]
            if (unlikely(it->extra < 32)) {
    8af4:	281f      	cmp	r0, #31
    8af6:	d901      	bls.n	8afc <preparse_value+0xfc>
        return CborNoError;
    8af8:	2000      	movs	r0, #0
    8afa:	e7ae      	b.n	8a5a <preparse_value+0x5a>
                it->type = CborInvalidType;
    8afc:	23ff      	movs	r3, #255	; 0xff
    8afe:	74a3      	strb	r3, [r4, #18]
                return CborErrorIllegalSimpleType;
    8b00:	f44f 7083 	mov.w	r0, #262	; 0x106
    8b04:	e7a9      	b.n	8a5a <preparse_value+0x5a>
    else if (descriptor == Value16Bit)
    8b06:	2819      	cmp	r0, #25
    8b08:	d106      	bne.n	8b18 <preparse_value+0x118>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
    8b0a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b0c:	6843      	ldr	r3, [r0, #4]
    8b0e:	3101      	adds	r1, #1
    8b10:	4798      	blx	r3
    8b12:	8220      	strh	r0, [r4, #16]
    return CborNoError;
    8b14:	2000      	movs	r0, #0
    8b16:	e7a0      	b.n	8a5a <preparse_value+0x5a>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
    8b18:	7ce3      	ldrb	r3, [r4, #19]
    8b1a:	f043 0301 	orr.w	r3, r3, #1
    8b1e:	74e3      	strb	r3, [r4, #19]
    return CborNoError;
    8b20:	2000      	movs	r0, #0
    8b22:	e79a      	b.n	8a5a <preparse_value+0x5a>
        return CborErrorUnexpectedEOF;
    8b24:	f240 1001 	movw	r0, #257	; 0x101
    8b28:	e797      	b.n	8a5a <preparse_value+0x5a>
        return CborErrorUnexpectedEOF;
    8b2a:	f240 1001 	movw	r0, #257	; 0x101
    8b2e:	e794      	b.n	8a5a <preparse_value+0x5a>
        return CborNoError;
    8b30:	2000      	movs	r0, #0
    8b32:	e792      	b.n	8a5a <preparse_value+0x5a>
        return CborNoError;
    8b34:	2000      	movs	r0, #0
    8b36:	e790      	b.n	8a5a <preparse_value+0x5a>

00008b38 <preparse_next_value>:
{
    8b38:	b510      	push	{r4, lr}
    8b3a:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
    8b3c:	6883      	ldr	r3, [r0, #8]
    8b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8b42:	d00d      	beq.n	8b60 <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
    8b44:	7c82      	ldrb	r2, [r0, #18]
    8b46:	2ac0      	cmp	r2, #192	; 0xc0
    8b48:	d002      	beq.n	8b50 <preparse_next_value+0x18>
    8b4a:	3b01      	subs	r3, #1
    8b4c:	6083      	str	r3, [r0, #8]
    8b4e:	b11b      	cbz	r3, 8b58 <preparse_next_value+0x20>
    return preparse_value(it);
    8b50:	4620      	mov	r0, r4
    8b52:	f7ff ff55 	bl	8a00 <preparse_value>
}
    8b56:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
    8b58:	23ff      	movs	r3, #255	; 0xff
    8b5a:	7483      	strb	r3, [r0, #18]
            return CborNoError;
    8b5c:	2000      	movs	r0, #0
    8b5e:	e7fa      	b.n	8b56 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
    8b60:	6841      	ldr	r1, [r0, #4]
    8b62:	6803      	ldr	r3, [r0, #0]
    8b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8b66:	4291      	cmp	r1, r2
    8b68:	d0f2      	beq.n	8b50 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
    8b6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8b6c:	6803      	ldr	r3, [r0, #0]
    8b6e:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
    8b70:	28ff      	cmp	r0, #255	; 0xff
    8b72:	d1ed      	bne.n	8b50 <preparse_next_value+0x18>
        ++it->offset;
    8b74:	6863      	ldr	r3, [r4, #4]
    8b76:	3301      	adds	r3, #1
    8b78:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
    8b7a:	23ff      	movs	r3, #255	; 0xff
    8b7c:	74a3      	strb	r3, [r4, #18]
        it->remaining = 0;
    8b7e:	2000      	movs	r0, #0
    8b80:	60a0      	str	r0, [r4, #8]
        return CborNoError;
    8b82:	e7e8      	b.n	8b56 <preparse_next_value+0x1e>

00008b84 <_cbor_value_extract_number>:
{
    8b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b86:	4606      	mov	r6, r0
    8b88:	460d      	mov	r5, r1
    8b8a:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
    8b8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8b8e:	6803      	ldr	r3, [r0, #0]
    8b90:	6809      	ldr	r1, [r1, #0]
    8b92:	4798      	blx	r3
    8b94:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
    8b98:	6829      	ldr	r1, [r5, #0]
    8b9a:	3101      	adds	r1, #1
    8b9c:	6029      	str	r1, [r5, #0]
    if (additional_information < Value8Bit) {
    8b9e:	2817      	cmp	r0, #23
    8ba0:	d916      	bls.n	8bd0 <_cbor_value_extract_number+0x4c>
    if (unlikely(additional_information > Value64Bit))
    8ba2:	281b      	cmp	r0, #27
    8ba4:	d833      	bhi.n	8c0e <_cbor_value_extract_number+0x8a>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
    8ba6:	3818      	subs	r0, #24
    8ba8:	2701      	movs	r7, #1
    8baa:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
    8bac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8bae:	1a5b      	subs	r3, r3, r1
    8bb0:	42bb      	cmp	r3, r7
    8bb2:	d32f      	bcc.n	8c14 <_cbor_value_extract_number+0x90>
    } else if (bytesNeeded == 1) {
    8bb4:	2f01      	cmp	r7, #1
    8bb6:	d111      	bne.n	8bdc <_cbor_value_extract_number+0x58>
        *len = p->d->get8(p->d, *offset);
    8bb8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8bba:	6803      	ldr	r3, [r0, #0]
    8bbc:	4798      	blx	r3
    8bbe:	b2c0      	uxtb	r0, r0
    8bc0:	2100      	movs	r1, #0
    8bc2:	e9c4 0100 	strd	r0, r1, [r4]
    *offset += bytesNeeded;
    8bc6:	6828      	ldr	r0, [r5, #0]
    8bc8:	4438      	add	r0, r7
    8bca:	6028      	str	r0, [r5, #0]
    return CborNoError;
    8bcc:	2000      	movs	r0, #0
    8bce:	e004      	b.n	8bda <_cbor_value_extract_number+0x56>
        *len = additional_information;
    8bd0:	b2c0      	uxtb	r0, r0
    8bd2:	2100      	movs	r1, #0
    8bd4:	e9c4 0100 	strd	r0, r1, [r4]
        return CborNoError;
    8bd8:	2000      	movs	r0, #0
}
    8bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
    8bdc:	2f02      	cmp	r7, #2
    8bde:	d107      	bne.n	8bf0 <_cbor_value_extract_number+0x6c>
        *len =  p->d->get16(p->d, *offset);
    8be0:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8be2:	6843      	ldr	r3, [r0, #4]
    8be4:	4798      	blx	r3
    8be6:	b280      	uxth	r0, r0
    8be8:	2100      	movs	r1, #0
    8bea:	e9c4 0100 	strd	r0, r1, [r4]
    8bee:	e7ea      	b.n	8bc6 <_cbor_value_extract_number+0x42>
    } else if (bytesNeeded == 4) {
    8bf0:	2f04      	cmp	r7, #4
    8bf2:	d005      	beq.n	8c00 <_cbor_value_extract_number+0x7c>
        *len =  p->d->get64(p->d, *offset);
    8bf4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8bf6:	68c3      	ldr	r3, [r0, #12]
    8bf8:	4798      	blx	r3
    8bfa:	e9c4 0100 	strd	r0, r1, [r4]
    8bfe:	e7e2      	b.n	8bc6 <_cbor_value_extract_number+0x42>
        *len =  p->d->get32(p->d, *offset);
    8c00:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8c02:	6883      	ldr	r3, [r0, #8]
    8c04:	4798      	blx	r3
    8c06:	6020      	str	r0, [r4, #0]
    8c08:	2300      	movs	r3, #0
    8c0a:	6063      	str	r3, [r4, #4]
    8c0c:	e7db      	b.n	8bc6 <_cbor_value_extract_number+0x42>
        return CborErrorIllegalNumber;
    8c0e:	f240 1005 	movw	r0, #261	; 0x105
    8c12:	e7e2      	b.n	8bda <_cbor_value_extract_number+0x56>
        return CborErrorUnexpectedEOF;
    8c14:	f240 1001 	movw	r0, #257	; 0x101
    8c18:	e7df      	b.n	8bda <_cbor_value_extract_number+0x56>

00008c1a <advance_internal>:
{
    8c1a:	b510      	push	{r4, lr}
    8c1c:	b082      	sub	sp, #8
    8c1e:	4604      	mov	r4, r0
    err = _cbor_value_extract_number(it->parser, &it->offset,  &length);
    8c20:	4601      	mov	r1, r0
    8c22:	f851 0b04 	ldr.w	r0, [r1], #4
    8c26:	466a      	mov	r2, sp
    8c28:	f7ff ffac 	bl	8b84 <_cbor_value_extract_number>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
    8c2c:	7ca3      	ldrb	r3, [r4, #18]
    8c2e:	2b40      	cmp	r3, #64	; 0x40
    8c30:	d001      	beq.n	8c36 <advance_internal+0x1c>
    8c32:	2b60      	cmp	r3, #96	; 0x60
    8c34:	d103      	bne.n	8c3e <advance_internal+0x24>
        it->offset += length;
    8c36:	6863      	ldr	r3, [r4, #4]
    8c38:	9a00      	ldr	r2, [sp, #0]
    8c3a:	4413      	add	r3, r2
    8c3c:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
    8c3e:	4620      	mov	r0, r4
    8c40:	f7ff ff7a 	bl	8b38 <preparse_next_value>
}
    8c44:	b002      	add	sp, #8
    8c46:	bd10      	pop	{r4, pc}

00008c48 <extract_length>:
{
    8c48:	b530      	push	{r4, r5, lr}
    8c4a:	b083      	sub	sp, #12
    8c4c:	4614      	mov	r4, r2
    CborError err = _cbor_value_extract_number(parser, offset, &v);
    8c4e:	466a      	mov	r2, sp
    8c50:	f7ff ff98 	bl	8b84 <_cbor_value_extract_number>
    if (err) {
    8c54:	4601      	mov	r1, r0
    8c56:	b958      	cbnz	r0, 8c70 <extract_length+0x28>
    *len = (size_t)v;
    8c58:	9a00      	ldr	r2, [sp, #0]
    8c5a:	6022      	str	r2, [r4, #0]
    if (v != *len)
    8c5c:	2300      	movs	r3, #0
    8c5e:	e9dd 4500 	ldrd	r4, r5, [sp]
    8c62:	42ab      	cmp	r3, r5
    8c64:	bf08      	it	eq
    8c66:	42a2      	cmpeq	r2, r4
    8c68:	d004      	beq.n	8c74 <extract_length+0x2c>
        return CborErrorDataTooLarge;
    8c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8c6e:	e001      	b.n	8c74 <extract_length+0x2c>
        *len = 0;
    8c70:	2300      	movs	r3, #0
    8c72:	6023      	str	r3, [r4, #0]
}
    8c74:	4608      	mov	r0, r1
    8c76:	b003      	add	sp, #12
    8c78:	bd30      	pop	{r4, r5, pc}

00008c7a <get_string_chunk>:
{
    8c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c7c:	4604      	mov	r4, r0
    8c7e:	460f      	mov	r7, r1
    8c80:	4615      	mov	r5, r2
    if (it->remainingclen) {
    8c82:	68c3      	ldr	r3, [r0, #12]
    8c84:	b9d3      	cbnz	r3, 8cbc <get_string_chunk+0x42>
    if (it->flags & CborIteratorFlag_IteratingStringChunks) {
    8c86:	7cc3      	ldrb	r3, [r0, #19]
    8c88:	f013 0f02 	tst.w	r3, #2
    8c8c:	d01c      	beq.n	8cc8 <get_string_chunk+0x4e>
        if (cbor_value_is_length_known(it)) {
    8c8e:	f013 0f04 	tst.w	r3, #4
    8c92:	d025      	beq.n	8ce0 <get_string_chunk+0x66>
    val = it->parser->d->get8(it->parser->d, it->offset);
    8c94:	6823      	ldr	r3, [r4, #0]
    8c96:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8c98:	6803      	ldr	r3, [r0, #0]
    8c9a:	6861      	ldr	r1, [r4, #4]
    8c9c:	4798      	blx	r3
    if (it->offset == it->parser->end)
    8c9e:	6863      	ldr	r3, [r4, #4]
    8ca0:	6826      	ldr	r6, [r4, #0]
    8ca2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    8ca4:	4293      	cmp	r3, r2
    8ca6:	d040      	beq.n	8d2a <get_string_chunk+0xb0>
    if (val == (uint8_t)BreakByte) {
    8ca8:	28ff      	cmp	r0, #255	; 0xff
    8caa:	d017      	beq.n	8cdc <get_string_chunk+0x62>
    } else if ((val & MajorTypeMask) == it->type) {
    8cac:	f020 031f 	bic.w	r3, r0, #31
    8cb0:	7ca2      	ldrb	r2, [r4, #18]
    8cb2:	4293      	cmp	r3, r2
    8cb4:	d01e      	beq.n	8cf4 <get_string_chunk+0x7a>
        return CborErrorIllegalType;
    8cb6:	f44f 7682 	mov.w	r6, #260	; 0x104
    8cba:	e019      	b.n	8cf0 <get_string_chunk+0x76>
        *len = it->remainingclen;
    8cbc:	6013      	str	r3, [r2, #0]
        *bufferptr = get_string_chunk_update(it, bufferptr, len);
    8cbe:	f7ff fe89 	bl	89d4 <get_string_chunk_update>
    8cc2:	6038      	str	r0, [r7, #0]
        return CborNoError;
    8cc4:	2600      	movs	r6, #0
    8cc6:	e013      	b.n	8cf0 <get_string_chunk+0x76>
    if (!cbor_value_is_length_known(it)) {
    8cc8:	f013 0f04 	tst.w	r3, #4
    8ccc:	d0e2      	beq.n	8c94 <get_string_chunk+0x1a>
        ++it->offset;
    8cce:	6842      	ldr	r2, [r0, #4]
    8cd0:	3201      	adds	r2, #1
    8cd2:	6042      	str	r2, [r0, #4]
        it->flags |= CborIteratorFlag_IteratingStringChunks;
    8cd4:	f043 0302 	orr.w	r3, r3, #2
    8cd8:	74c3      	strb	r3, [r0, #19]
    8cda:	e7db      	b.n	8c94 <get_string_chunk+0x1a>
        ++it->offset;
    8cdc:	3301      	adds	r3, #1
    8cde:	6063      	str	r3, [r4, #4]
        *bufferptr = NULL;
    8ce0:	2300      	movs	r3, #0
    8ce2:	603b      	str	r3, [r7, #0]
        *len = 0;
    8ce4:	602b      	str	r3, [r5, #0]
        it->remainingclen = 0;
    8ce6:	60e3      	str	r3, [r4, #12]
        return preparse_next_value(it);
    8ce8:	4620      	mov	r0, r4
    8cea:	f7ff ff25 	bl	8b38 <preparse_next_value>
    8cee:	4606      	mov	r6, r0
}
    8cf0:	4630      	mov	r0, r6
    8cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        err = extract_length(it->parser, &it->offset, len);
    8cf4:	462a      	mov	r2, r5
    8cf6:	1d21      	adds	r1, r4, #4
    8cf8:	4630      	mov	r0, r6
    8cfa:	f7ff ffa5 	bl	8c48 <extract_length>
        if (err)
    8cfe:	4606      	mov	r6, r0
    8d00:	2800      	cmp	r0, #0
    8d02:	d1f5      	bne.n	8cf0 <get_string_chunk+0x76>
        if (*len > (size_t)(it->parser->end - it->offset))
    8d04:	682a      	ldr	r2, [r5, #0]
    8d06:	6823      	ldr	r3, [r4, #0]
    8d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d0a:	6861      	ldr	r1, [r4, #4]
    8d0c:	1a5b      	subs	r3, r3, r1
    8d0e:	429a      	cmp	r2, r3
    8d10:	d80e      	bhi.n	8d30 <get_string_chunk+0xb6>
        it->remainingclen = *len;
    8d12:	60e2      	str	r2, [r4, #12]
        *bufferptr = get_string_chunk_update(it, bufferptr, len);
    8d14:	462a      	mov	r2, r5
    8d16:	4639      	mov	r1, r7
    8d18:	4620      	mov	r0, r4
    8d1a:	f7ff fe5b 	bl	89d4 <get_string_chunk_update>
    8d1e:	6038      	str	r0, [r7, #0]
    it->flags |= CborIteratorFlag_IteratingStringChunks;
    8d20:	7ce3      	ldrb	r3, [r4, #19]
    8d22:	f043 0302 	orr.w	r3, r3, #2
    8d26:	74e3      	strb	r3, [r4, #19]
    return CborNoError;
    8d28:	e7e2      	b.n	8cf0 <get_string_chunk+0x76>
        return CborErrorUnexpectedEOF;
    8d2a:	f240 1601 	movw	r6, #257	; 0x101
    8d2e:	e7df      	b.n	8cf0 <get_string_chunk+0x76>
            return CborErrorUnexpectedEOF;
    8d30:	f240 1601 	movw	r6, #257	; 0x101
    8d34:	e7dc      	b.n	8cf0 <get_string_chunk+0x76>

00008d36 <iterate_string_chunks>:
{
    8d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d3a:	b089      	sub	sp, #36	; 0x24
    8d3c:	4680      	mov	r8, r0
    8d3e:	468a      	mov	sl, r1
    8d40:	4691      	mov	r9, r2
    8d42:	461e      	mov	r6, r3
    8d44:	9f12      	ldr	r7, [sp, #72]	; 0x48
    8d46:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (!next)
    8d4a:	b14f      	cbz	r7, 8d60 <iterate_string_chunks+0x2a>
    *next = *value;
    8d4c:	463c      	mov	r4, r7
    8d4e:	4645      	mov	r5, r8
    8d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8d54:	682b      	ldr	r3, [r5, #0]
    8d56:	6023      	str	r3, [r4, #0]
    *result = true;
    8d58:	2301      	movs	r3, #1
    8d5a:	7033      	strb	r3, [r6, #0]
    size_t total = 0;
    8d5c:	2400      	movs	r4, #0
    8d5e:	e006      	b.n	8d6e <iterate_string_chunks+0x38>
        next = &tmp;
    8d60:	af03      	add	r7, sp, #12
    8d62:	e7f3      	b.n	8d4c <iterate_string_chunks+0x16>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
    8d64:	2301      	movs	r3, #1
    8d66:	e012      	b.n	8d8e <iterate_string_chunks+0x58>
            *result = false;
    8d68:	2300      	movs	r3, #0
    8d6a:	7033      	strb	r3, [r6, #0]
        total = newTotal;
    8d6c:	462c      	mov	r4, r5
        size_t chunkLen = 0;
    8d6e:	aa08      	add	r2, sp, #32
    8d70:	2300      	movs	r3, #0
    8d72:	f842 3d1c 	str.w	r3, [r2, #-28]!
        err = get_string_chunk(next, &ptr, &chunkLen);
    8d76:	a902      	add	r1, sp, #8
    8d78:	4638      	mov	r0, r7
    8d7a:	f7ff ff7e 	bl	8c7a <get_string_chunk>
        if (err)
    8d7e:	4602      	mov	r2, r0
    8d80:	b9e8      	cbnz	r0, 8dbe <iterate_string_chunks+0x88>
        if (!ptr)
    8d82:	9b02      	ldr	r3, [sp, #8]
    8d84:	b1fb      	cbz	r3, 8dc6 <iterate_string_chunks+0x90>
        if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
    8d86:	9a01      	ldr	r2, [sp, #4]
    8d88:	2300      	movs	r3, #0
    8d8a:	18a5      	adds	r5, r4, r2
    8d8c:	d2ea      	bcs.n	8d64 <iterate_string_chunks+0x2e>
    8d8e:	b9a3      	cbnz	r3, 8dba <iterate_string_chunks+0x84>
        if (*result && *buflen >= newTotal)
    8d90:	7833      	ldrb	r3, [r6, #0]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d0e8      	beq.n	8d68 <iterate_string_chunks+0x32>
    8d96:	f8d9 3000 	ldr.w	r3, [r9]
    8d9a:	42ab      	cmp	r3, r5
    8d9c:	d3e4      	bcc.n	8d68 <iterate_string_chunks+0x32>
            *result = !!func(value->parser->d, buffer + total, next->offset - chunkLen, chunkLen);
    8d9e:	f8d8 0000 	ldr.w	r0, [r8]
    8da2:	6879      	ldr	r1, [r7, #4]
    8da4:	4613      	mov	r3, r2
    8da6:	1a8a      	subs	r2, r1, r2
    8da8:	eb0a 0104 	add.w	r1, sl, r4
    8dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8dae:	47d8      	blx	fp
    8db0:	3000      	adds	r0, #0
    8db2:	bf18      	it	ne
    8db4:	2001      	movne	r0, #1
    8db6:	7030      	strb	r0, [r6, #0]
    8db8:	e7d8      	b.n	8d6c <iterate_string_chunks+0x36>
            return CborErrorDataTooLarge;
    8dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
}
    8dbe:	4610      	mov	r0, r2
    8dc0:	b009      	add	sp, #36	; 0x24
    8dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *buflen = total;
    8dc6:	f8c9 4000 	str.w	r4, [r9]
    return CborNoError;
    8dca:	e7f8      	b.n	8dbe <iterate_string_chunks+0x88>

00008dcc <_cbor_value_decode_int64_internal>:
{
    8dcc:	b510      	push	{r4, lr}
    8dce:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
    8dd0:	6803      	ldr	r3, [r0, #0]
    8dd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8dd4:	6803      	ldr	r3, [r0, #0]
    8dd6:	6861      	ldr	r1, [r4, #4]
    8dd8:	4798      	blx	r3
    if ((val & 1) == (Value32Bit & 1))
    8dda:	f010 0f01 	tst.w	r0, #1
    8dde:	d006      	beq.n	8dee <_cbor_value_decode_int64_internal+0x22>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
    8de0:	6823      	ldr	r3, [r4, #0]
    8de2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8de4:	68c3      	ldr	r3, [r0, #12]
    8de6:	6861      	ldr	r1, [r4, #4]
    8de8:	3101      	adds	r1, #1
    8dea:	4798      	blx	r3
}
    8dec:	bd10      	pop	{r4, pc}
        return value->parser->d->get32(value->parser->d, value->offset + 1);
    8dee:	6823      	ldr	r3, [r4, #0]
    8df0:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8df2:	6883      	ldr	r3, [r0, #8]
    8df4:	6861      	ldr	r1, [r4, #4]
    8df6:	3101      	adds	r1, #1
    8df8:	4798      	blx	r3
    8dfa:	2100      	movs	r1, #0
    8dfc:	e7f6      	b.n	8dec <_cbor_value_decode_int64_internal+0x20>

00008dfe <cbor_parser_cust_reader_init>:
{
    8dfe:	b508      	push	{r3, lr}
    parser->d = r;
    8e00:	6250      	str	r0, [r2, #36]	; 0x24
    parser->end = r->message_size;
    8e02:	69c0      	ldr	r0, [r0, #28]
    8e04:	6290      	str	r0, [r2, #40]	; 0x28
    parser->flags = flags;
    8e06:	62d1      	str	r1, [r2, #44]	; 0x2c
    it->parser = parser;
    8e08:	601a      	str	r2, [r3, #0]
    it->offset = 0;
    8e0a:	2200      	movs	r2, #0
    8e0c:	605a      	str	r2, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
    8e0e:	2201      	movs	r2, #1
    8e10:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
    8e12:	4618      	mov	r0, r3
    8e14:	f7ff fdf4 	bl	8a00 <preparse_value>
}
    8e18:	bd08      	pop	{r3, pc}

00008e1a <cbor_value_enter_container>:
{
    8e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e1c:	b083      	sub	sp, #12
    8e1e:	4607      	mov	r7, r0
    8e20:	460e      	mov	r6, r1
    *recursed = *it;
    8e22:	460c      	mov	r4, r1
    8e24:	4605      	mov	r5, r0
    8e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8e2a:	682b      	ldr	r3, [r5, #0]
    8e2c:	6023      	str	r3, [r4, #0]
    if (it->flags & CborIteratorFlag_UnknownLength) {
    8e2e:	7cfb      	ldrb	r3, [r7, #19]
    8e30:	f013 0f04 	tst.w	r3, #4
    8e34:	d013      	beq.n	8e5e <cbor_value_enter_container+0x44>
        recursed->remaining = UINT32_MAX;
    8e36:	f04f 33ff 	mov.w	r3, #4294967295
    8e3a:	60b3      	str	r3, [r6, #8]
        ++recursed->offset;
    8e3c:	6873      	ldr	r3, [r6, #4]
    8e3e:	3301      	adds	r3, #1
    8e40:	6073      	str	r3, [r6, #4]
        err = preparse_value(recursed);
    8e42:	4630      	mov	r0, r6
    8e44:	f7ff fddc 	bl	8a00 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
    8e48:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    8e4c:	d119      	bne.n	8e82 <cbor_value_enter_container+0x68>
        ++recursed->offset;
    8e4e:	6873      	ldr	r3, [r6, #4]
    8e50:	3301      	adds	r3, #1
    8e52:	6073      	str	r3, [r6, #4]
    recursed->type = CborInvalidType;
    8e54:	23ff      	movs	r3, #255	; 0xff
    8e56:	74b3      	strb	r3, [r6, #18]
    recursed->remaining = 0;
    8e58:	2000      	movs	r0, #0
    8e5a:	60b0      	str	r0, [r6, #8]
    return CborNoError;
    8e5c:	e011      	b.n	8e82 <cbor_value_enter_container+0x68>
        err = _cbor_value_extract_number(recursed->parser, &recursed->offset, &len);
    8e5e:	4631      	mov	r1, r6
    8e60:	f851 0b04 	ldr.w	r0, [r1], #4
    8e64:	466a      	mov	r2, sp
    8e66:	f7ff fe8d 	bl	8b84 <_cbor_value_extract_number>
        recursed->remaining = (uint32_t)len;
    8e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
    8e6e:	60b2      	str	r2, [r6, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
    8e70:	2100      	movs	r1, #0
    8e72:	428b      	cmp	r3, r1
    8e74:	bf08      	it	eq
    8e76:	4292      	cmpeq	r2, r2
    8e78:	d005      	beq.n	8e86 <cbor_value_enter_container+0x6c>
            recursed->offset = it->offset;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	6073      	str	r3, [r6, #4]
            return CborErrorDataTooLarge;
    8e7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
    8e82:	b003      	add	sp, #12
    8e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (recursed->remaining != len || len == UINT32_MAX) {
    8e86:	2b00      	cmp	r3, #0
    8e88:	bf08      	it	eq
    8e8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8e8e:	d0f4      	beq.n	8e7a <cbor_value_enter_container+0x60>
        if (recursed->type == CborMapType) {
    8e90:	7cb1      	ldrb	r1, [r6, #18]
    8e92:	29a0      	cmp	r1, #160	; 0xa0
    8e94:	d005      	beq.n	8ea2 <cbor_value_enter_container+0x88>
        if (len != 0)
    8e96:	4313      	orrs	r3, r2
    8e98:	d0dc      	beq.n	8e54 <cbor_value_enter_container+0x3a>
            return preparse_value(recursed);
    8e9a:	4630      	mov	r0, r6
    8e9c:	f7ff fdb0 	bl	8a00 <preparse_value>
    8ea0:	e7ef      	b.n	8e82 <cbor_value_enter_container+0x68>
            if (recursed->remaining > UINT32_MAX / 2) {
    8ea2:	2a00      	cmp	r2, #0
    8ea4:	db02      	blt.n	8eac <cbor_value_enter_container+0x92>
            recursed->remaining *= 2;
    8ea6:	0051      	lsls	r1, r2, #1
    8ea8:	60b1      	str	r1, [r6, #8]
    8eaa:	e7f4      	b.n	8e96 <cbor_value_enter_container+0x7c>
                recursed->offset = it->offset;
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	6073      	str	r3, [r6, #4]
                return CborErrorDataTooLarge;
    8eb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    8eb4:	e7e5      	b.n	8e82 <cbor_value_enter_container+0x68>

00008eb6 <cbor_value_leave_container>:
{
    8eb6:	b508      	push	{r3, lr}
    it->offset = recursed->offset;
    8eb8:	684b      	ldr	r3, [r1, #4]
    8eba:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
    8ebc:	f7ff fe3c 	bl	8b38 <preparse_next_value>
}
    8ec0:	bd08      	pop	{r3, pc}

00008ec2 <advance_recursive>:
{
    8ec2:	b570      	push	{r4, r5, r6, lr}
    8ec4:	b086      	sub	sp, #24
    8ec6:	4605      	mov	r5, r0
    8ec8:	460e      	mov	r6, r1
    if (is_fixed_type(it->type))
    8eca:	7c84      	ldrb	r4, [r0, #18]
    8ecc:	4620      	mov	r0, r4
    8ece:	f7ff fd6f 	bl	89b0 <is_fixed_type>
    8ed2:	b9b0      	cbnz	r0, 8f02 <advance_recursive+0x40>
{ return it->type == CborArrayType || it->type == CborMapType; }
    8ed4:	2c80      	cmp	r4, #128	; 0x80
    8ed6:	d01d      	beq.n	8f14 <advance_recursive+0x52>
    8ed8:	2ca0      	cmp	r4, #160	; 0xa0
    8eda:	d019      	beq.n	8f10 <advance_recursive+0x4e>
    8edc:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
    8ede:	b1db      	cbz	r3, 8f18 <advance_recursive+0x56>
    if (nestingLevel == 0)
    8ee0:	b366      	cbz	r6, 8f3c <advance_recursive+0x7a>
    err = cbor_value_enter_container(it, &recursed);
    8ee2:	a901      	add	r1, sp, #4
    8ee4:	4628      	mov	r0, r5
    8ee6:	f7ff ff98 	bl	8e1a <cbor_value_enter_container>
    if (err)
    8eea:	4603      	mov	r3, r0
    8eec:	b968      	cbnz	r0, 8f0a <advance_recursive+0x48>
{ return it->remaining == 0; }
    8eee:	9b03      	ldr	r3, [sp, #12]
    while (!cbor_value_at_end(&recursed)) {
    8ef0:	b1f3      	cbz	r3, 8f30 <advance_recursive+0x6e>
        err = advance_recursive(&recursed, nestingLevel - 1);
    8ef2:	1e71      	subs	r1, r6, #1
    8ef4:	a801      	add	r0, sp, #4
    8ef6:	f7ff ffe4 	bl	8ec2 <advance_recursive>
        if (err)
    8efa:	4603      	mov	r3, r0
    8efc:	2800      	cmp	r0, #0
    8efe:	d0f6      	beq.n	8eee <advance_recursive+0x2c>
    8f00:	e003      	b.n	8f0a <advance_recursive+0x48>
        return advance_internal(it);
    8f02:	4628      	mov	r0, r5
    8f04:	f7ff fe89 	bl	8c1a <advance_internal>
    8f08:	4603      	mov	r3, r0
}
    8f0a:	4618      	mov	r0, r3
    8f0c:	b006      	add	sp, #24
    8f0e:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
    8f10:	2301      	movs	r3, #1
    8f12:	e7e4      	b.n	8ede <advance_recursive+0x1c>
    8f14:	2301      	movs	r3, #1
    8f16:	e7e2      	b.n	8ede <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
    8f18:	aa06      	add	r2, sp, #24
    8f1a:	f04f 33ff 	mov.w	r3, #4294967295
    8f1e:	f842 3d18 	str.w	r3, [r2, #-24]!
        return _cbor_value_copy_string(it, NULL, &len, it);
    8f22:	462b      	mov	r3, r5
    8f24:	2100      	movs	r1, #0
    8f26:	4628      	mov	r0, r5
    8f28:	f7fb fcd6 	bl	48d8 <_cbor_value_copy_string>
    8f2c:	4603      	mov	r3, r0
    8f2e:	e7ec      	b.n	8f0a <advance_recursive+0x48>
    return cbor_value_leave_container(it, &recursed);
    8f30:	a901      	add	r1, sp, #4
    8f32:	4628      	mov	r0, r5
    8f34:	f7ff ffbf 	bl	8eb6 <cbor_value_leave_container>
    8f38:	4603      	mov	r3, r0
    8f3a:	e7e6      	b.n	8f0a <advance_recursive+0x48>
        return CborErrorNestingTooDeep;
    8f3c:	f240 4301 	movw	r3, #1025	; 0x401
    8f40:	e7e3      	b.n	8f0a <advance_recursive+0x48>

00008f42 <cbor_value_advance>:
{
    8f42:	b508      	push	{r3, lr}
    if (!it->remaining)
    8f44:	6883      	ldr	r3, [r0, #8]
    8f46:	b123      	cbz	r3, 8f52 <cbor_value_advance+0x10>
    return advance_recursive(it, CBOR_PARSER_MAX_RECURSIONS);
    8f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8f4c:	f7ff ffb9 	bl	8ec2 <advance_recursive>
}
    8f50:	bd08      	pop	{r3, pc}
        return CborErrorAdvancePastEOF;
    8f52:	2003      	movs	r0, #3
    8f54:	e7fc      	b.n	8f50 <cbor_value_advance+0xe>

00008f56 <cbor_value_calculate_string_length>:
{
    8f56:	b508      	push	{r3, lr}
    8f58:	460a      	mov	r2, r1
    *len = SIZE_MAX;
    8f5a:	f04f 33ff 	mov.w	r3, #4294967295
    8f5e:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
    8f60:	2300      	movs	r3, #0
    8f62:	4619      	mov	r1, r3
    8f64:	f7fb fcb8 	bl	48d8 <_cbor_value_copy_string>
}
    8f68:	bd08      	pop	{r3, pc}

00008f6a <flash_page_size_get>:
}
    8f6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    8f6e:	4770      	bx	lr

00008f70 <flash_page_count_get>:
}
    8f70:	f44f 7080 	mov.w	r0, #256	; 0x100
    8f74:	4770      	bx	lr

00008f76 <flash_total_size_get>:
{
    8f76:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    8f78:	f7ff fff7 	bl	8f6a <flash_page_size_get>
    8f7c:	4604      	mov	r4, r0
    8f7e:	f7ff fff7 	bl	8f70 <flash_page_count_get>
}
    8f82:	fb00 f004 	mul.w	r0, r0, r4
    8f86:	bd10      	pop	{r4, pc}

00008f88 <is_page_aligned_check>:
{
    8f88:	b510      	push	{r4, lr}
    8f8a:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    8f8c:	f7ff ffed 	bl	8f6a <flash_page_size_get>
    8f90:	fbb4 f3f0 	udiv	r3, r4, r0
    8f94:	fb00 4013 	mls	r0, r0, r3, r4
}
    8f98:	fab0 f080 	clz	r0, r0
    8f9c:	0940      	lsrs	r0, r0, #5
    8f9e:	bd10      	pop	{r4, pc}

00008fa0 <partial_word_create>:
{
    8fa0:	b430      	push	{r4, r5}
    8fa2:	b082      	sub	sp, #8
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    8fa4:	f000 0003 	and.w	r0, r0, #3
    value32 = 0xFFFFFFFF;
    8fa8:	f04f 33ff 	mov.w	r3, #4294967295
    8fac:	9301      	str	r3, [sp, #4]
    for (uint32_t i = 0; i < bytes_count; i++)
    8fae:	2300      	movs	r3, #0
    8fb0:	e004      	b.n	8fbc <partial_word_create+0x1c>
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    8fb2:	5ccd      	ldrb	r5, [r1, r3]
    8fb4:	ac01      	add	r4, sp, #4
    8fb6:	5425      	strb	r5, [r4, r0]
        byte_shift++;
    8fb8:	3001      	adds	r0, #1
    for (uint32_t i = 0; i < bytes_count; i++)
    8fba:	3301      	adds	r3, #1
    8fbc:	4293      	cmp	r3, r2
    8fbe:	d3f8      	bcc.n	8fb2 <partial_word_create+0x12>
}
    8fc0:	9801      	ldr	r0, [sp, #4]
    8fc2:	b002      	add	sp, #8
    8fc4:	bc30      	pop	{r4, r5}
    8fc6:	4770      	bx	lr

00008fc8 <nvmc_words_write>:
{
    8fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fca:	4607      	mov	r7, r0
    8fcc:	460e      	mov	r6, r1
    8fce:	4615      	mov	r5, r2
    for (uint32_t i = 0; i < num_words; i++)
    8fd0:	2400      	movs	r4, #0
    8fd2:	e006      	b.n	8fe2 <nvmc_words_write+0x1a>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    8fd4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    8fd8:	eb07 0084 	add.w	r0, r7, r4, lsl #2
    8fdc:	f7fb fdcc 	bl	4b78 <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    8fe0:	3401      	adds	r4, #1
    8fe2:	42ac      	cmp	r4, r5
    8fe4:	d3f6      	bcc.n	8fd4 <nvmc_words_write+0xc>
}
    8fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008fe8 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    8fe8:	b538      	push	{r3, r4, r5, lr}
    8fea:	4604      	mov	r4, r0
    8fec:	460d      	mov	r5, r1
    NRFX_ASSERT(addr < flash_total_size_get());
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    8fee:	f7fb fdb3 	bl	4b58 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    8ff2:	4629      	mov	r1, r5
    8ff4:	4620      	mov	r0, r4
    8ff6:	f7fb fdbf 	bl	4b78 <nvmc_word_write>

    nvmc_readonly_mode_set();
    8ffa:	f7fb fda5 	bl	4b48 <nvmc_readonly_mode_set>
}
    8ffe:	bd38      	pop	{r3, r4, r5, pc}

00009000 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    9000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9004:	4604      	mov	r4, r0
    9006:	460e      	mov	r6, r1
    9008:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());

    nvmc_write_mode_set();
    900a:	f7fb fda5 	bl	4b58 <nvmc_write_mode_set>

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    900e:	f014 0003 	ands.w	r0, r4, #3
    9012:	d012      	beq.n	903a <nrfx_nvmc_bytes_write+0x3a>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    9014:	f1c0 0704 	rsb	r7, r0, #4
        if (leading_bytes > num_bytes)
    9018:	42bd      	cmp	r5, r7
    901a:	d200      	bcs.n	901e <nrfx_nvmc_bytes_write+0x1e>
        {
            leading_bytes = num_bytes;
    901c:	462f      	mov	r7, r5
        }

        nvmc_word_write(addr - unaligned_bytes,
    901e:	eba4 0800 	sub.w	r8, r4, r0
    9022:	463a      	mov	r2, r7
    9024:	4631      	mov	r1, r6
    9026:	4620      	mov	r0, r4
    9028:	f7ff ffba 	bl	8fa0 <partial_word_create>
    902c:	4601      	mov	r1, r0
    902e:	4640      	mov	r0, r8
    9030:	f7fb fda2 	bl	4b78 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    9034:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    9036:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    9038:	443e      	add	r6, r7
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;

        nvmc_words_write(addr, (uint32_t const *)bytes_src, word_count);
    903a:	08aa      	lsrs	r2, r5, #2
    903c:	4631      	mov	r1, r6
    903e:	4620      	mov	r0, r4
    9040:	f7ff ffc2 	bl	8fc8 <nvmc_words_write>

        addr += word_count * NVMC_BYTES_IN_WORD;
    9044:	f025 0103 	bic.w	r1, r5, #3
    9048:	440c      	add	r4, r1
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    904a:	4431      	add	r1, r6
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    904c:	f015 0203 	ands.w	r2, r5, #3
    9050:	d103      	bne.n	905a <nrfx_nvmc_bytes_write+0x5a>
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    }

    nvmc_readonly_mode_set();
    9052:	f7fb fd79 	bl	4b48 <nvmc_readonly_mode_set>
}
    9056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    905a:	4620      	mov	r0, r4
    905c:	f7ff ffa0 	bl	8fa0 <partial_word_create>
    9060:	4601      	mov	r1, r0
    9062:	4620      	mov	r0, r4
    9064:	f7fb fd88 	bl	4b78 <nvmc_word_write>
    9068:	e7f3      	b.n	9052 <nrfx_nvmc_bytes_write+0x52>

0000906a <nrfx_nvmc_flash_size_get>:

    nvmc_readonly_mode_set();
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    906a:	b508      	push	{r3, lr}
    return flash_total_size_get();
    906c:	f7ff ff83 	bl	8f76 <flash_total_size_get>
}
    9070:	bd08      	pop	{r3, pc}

00009072 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    9072:	b508      	push	{r3, lr}
    return flash_page_size_get();
    9074:	f7ff ff79 	bl	8f6a <flash_page_size_get>
}
    9078:	bd08      	pop	{r3, pc}

0000907a <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    907a:	b508      	push	{r3, lr}
    return flash_page_count_get();
    907c:	f7ff ff78 	bl	8f70 <flash_page_count_get>
}
    9080:	bd08      	pop	{r3, pc}

00009082 <z_arch_system_halt>:
	__asm__ volatile(
    9082:	f04f 0220 	mov.w	r2, #32
    9086:	f3ef 8311 	mrs	r3, BASEPRI
    908a:	f382 8811 	msr	BASEPRI, r2
    908e:	f3bf 8f6f 	isb	sy
    9092:	e7fe      	b.n	9092 <z_arch_system_halt+0x10>

00009094 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    9094:	b510      	push	{r4, lr}
    9096:	4604      	mov	r4, r0
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    9098:	f7f8 fdb6 	bl	1c08 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    909c:	4620      	mov	r0, r4
    909e:	f7ff fff0 	bl	9082 <z_arch_system_halt>

000090a2 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    90a2:	b570      	push	{r4, r5, r6, lr}
    90a4:	4605      	mov	r5, r0
    90a6:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    90a8:	f7fb ff3a 	bl	4f20 <z_impl_k_current_get>
    90ac:	4604      	mov	r4, r0
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    90ae:	4631      	mov	r1, r6
    90b0:	4628      	mov	r0, r5
    90b2:	f7ff ffef 	bl	9094 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    90b6:	4620      	mov	r0, r4
    90b8:	f7f9 ff04 	bl	2ec4 <z_impl_k_thread_abort>
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    90bc:	bd70      	pop	{r4, r5, r6, pc}

000090be <create_free_list>:
	slab->free_list = NULL;
    90be:	2200      	movs	r2, #0
    90c0:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
    90c2:	6903      	ldr	r3, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    90c4:	e005      	b.n	90d2 <create_free_list+0x14>
		*(char **)p = slab->free_list;
    90c6:	6941      	ldr	r1, [r0, #20]
    90c8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    90ca:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    90cc:	68c1      	ldr	r1, [r0, #12]
    90ce:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    90d0:	3201      	adds	r2, #1
    90d2:	6881      	ldr	r1, [r0, #8]
    90d4:	4291      	cmp	r1, r2
    90d6:	d8f6      	bhi.n	90c6 <create_free_list+0x8>
}
    90d8:	4770      	bx	lr

000090da <pended_on>:
}
    90da:	6880      	ldr	r0, [r0, #8]
    90dc:	4770      	bx	lr

000090de <z_tick_sleep>:
}
    90de:	2000      	movs	r0, #0
    90e0:	4770      	bx	lr

000090e2 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    90e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    90e6:	f991 300e 	ldrsb.w	r3, [r1, #14]
    90ea:	429a      	cmp	r2, r3
    90ec:	db01      	blt.n	90f2 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    90ee:	2000      	movs	r0, #0
}
    90f0:	4770      	bx	lr
		return true;
    90f2:	2001      	movs	r0, #1
    90f4:	4770      	bx	lr

000090f6 <z_unpend_thread_no_timeout>:
{
    90f6:	b538      	push	{r3, r4, r5, lr}
    90f8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    90fa:	2300      	movs	r3, #0
    90fc:	f04f 0220 	mov.w	r2, #32
    9100:	f3ef 8511 	mrs	r5, BASEPRI
    9104:	f382 8811 	msr	BASEPRI, r2
    9108:	f3bf 8f6f 	isb	sy
    910c:	e00e      	b.n	912c <z_unpend_thread_no_timeout+0x36>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    910e:	4620      	mov	r0, r4
    9110:	f7ff ffe3 	bl	90da <pended_on>
    9114:	4621      	mov	r1, r4
    9116:	f7fb fe57 	bl	4dc8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    911a:	7b63      	ldrb	r3, [r4, #13]
    911c:	f023 0302 	bic.w	r3, r3, #2
    9120:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    9122:	f385 8811 	msr	BASEPRI, r5
    9126:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    912a:	2301      	movs	r3, #1
    912c:	2b00      	cmp	r3, #0
    912e:	d0ee      	beq.n	910e <z_unpend_thread_no_timeout+0x18>
	thread->base.pended_on = NULL;
    9130:	2300      	movs	r3, #0
    9132:	60a3      	str	r3, [r4, #8]
}
    9134:	bd38      	pop	{r3, r4, r5, pc}

00009136 <z_priq_dumb_best>:
	return list->head == list;
    9136:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9138:	4298      	cmp	r0, r3
    913a:	d001      	beq.n	9140 <z_priq_dumb_best+0xa>
}
    913c:	4618      	mov	r0, r3
    913e:	4770      	bx	lr
	struct k_thread *t = NULL;
    9140:	2300      	movs	r3, #0
	return t;
    9142:	e7fb      	b.n	913c <z_priq_dumb_best+0x6>

00009144 <z_unpend_first_thread>:
{
    9144:	b570      	push	{r4, r5, r6, lr}
    9146:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9148:	2300      	movs	r3, #0
	__asm__ volatile(
    914a:	f04f 0220 	mov.w	r2, #32
    914e:	f3ef 8511 	mrs	r5, BASEPRI
    9152:	f382 8811 	msr	BASEPRI, r2
    9156:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    915a:	461c      	mov	r4, r3
    915c:	e008      	b.n	9170 <z_unpend_first_thread+0x2c>
		ret = _priq_wait_best(&wait_q->waitq);
    915e:	4630      	mov	r0, r6
    9160:	f7ff ffe9 	bl	9136 <z_priq_dumb_best>
    9164:	4604      	mov	r4, r0
	__asm__ volatile(
    9166:	f385 8811 	msr	BASEPRI, r5
    916a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    916e:	2301      	movs	r3, #1
    9170:	2b00      	cmp	r3, #0
    9172:	d0f4      	beq.n	915e <z_unpend_first_thread+0x1a>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    9174:	b1e4      	cbz	r4, 91b0 <z_unpend_first_thread+0x6c>
	LOCKED(&sched_spinlock) {
    9176:	2300      	movs	r3, #0
	__asm__ volatile(
    9178:	f04f 0220 	mov.w	r2, #32
    917c:	f3ef 8511 	mrs	r5, BASEPRI
    9180:	f382 8811 	msr	BASEPRI, r2
    9184:	f3bf 8f6f 	isb	sy
    9188:	e00e      	b.n	91a8 <z_unpend_first_thread+0x64>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    918a:	4620      	mov	r0, r4
    918c:	f7ff ffa5 	bl	90da <pended_on>
    9190:	4621      	mov	r1, r4
    9192:	f7fb fe19 	bl	4dc8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9196:	7b63      	ldrb	r3, [r4, #13]
    9198:	f023 0302 	bic.w	r3, r3, #2
    919c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    919e:	f385 8811 	msr	BASEPRI, r5
    91a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    91a6:	2301      	movs	r3, #1
    91a8:	2b00      	cmp	r3, #0
    91aa:	d0ee      	beq.n	918a <z_unpend_first_thread+0x46>
	thread->base.pended_on = NULL;
    91ac:	2300      	movs	r3, #0
    91ae:	60a3      	str	r3, [r4, #8]
	if (t != NULL) {
    91b0:	b11c      	cbz	r4, 91ba <z_unpend_first_thread+0x76>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    91b2:	f104 0018 	add.w	r0, r4, #24
    91b6:	f000 f89c 	bl	92f2 <z_abort_timeout>
}
    91ba:	4620      	mov	r0, r4
    91bc:	bd70      	pop	{r4, r5, r6, pc}

000091be <z_impl_k_sleep>:
{
    91be:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    91c2:	17c3      	asrs	r3, r0, #31
    91c4:	03dd      	lsls	r5, r3, #15
    91c6:	ea45 4550 	orr.w	r5, r5, r0, lsr #17
    91ca:	03c4      	lsls	r4, r0, #15
    91cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    91d0:	2300      	movs	r3, #0
    91d2:	f240 3be7 	movw	fp, #999	; 0x3e7
    91d6:	f04f 0c00 	mov.w	ip, #0
    91da:	eb1b 0004 	adds.w	r0, fp, r4
    91de:	eb4c 0105 	adc.w	r1, ip, r5
    91e2:	f7f6 ffaf 	bl	144 <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
    91e6:	f7ff ff7a 	bl	90de <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
    91ea:	17c5      	asrs	r5, r0, #31
    91ec:	0169      	lsls	r1, r5, #5
    91ee:	0142      	lsls	r2, r0, #5
    91f0:	ea41 63d0 	orr.w	r3, r1, r0, lsr #27
    91f4:	1a12      	subs	r2, r2, r0
    91f6:	eb63 0305 	sbc.w	r3, r3, r5
    91fa:	009b      	lsls	r3, r3, #2
    91fc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
    9200:	0092      	lsls	r2, r2, #2
    9202:	1810      	adds	r0, r2, r0
    9204:	eb43 0105 	adc.w	r1, r3, r5
    9208:	00cb      	lsls	r3, r1, #3
    920a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    920e:	00c2      	lsls	r2, r0, #3
    9210:	0bd0      	lsrs	r0, r2, #15
}
    9212:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9216:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

0000921a <do_sem_give>:
{
    921a:	b538      	push	{r3, r4, r5, lr}
    921c:	4605      	mov	r5, r0
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    921e:	f7ff ff91 	bl	9144 <z_unpend_first_thread>
	if (thread != NULL) {
    9222:	b198      	cbz	r0, 924c <do_sem_give+0x32>
    9224:	4604      	mov	r4, r0
	u8_t state = thread->base.thread_state;
    9226:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9228:	f013 0f1f 	tst.w	r3, #31
    922c:	d105      	bne.n	923a <do_sem_give+0x20>
	return node->next != NULL;
    922e:	6983      	ldr	r3, [r0, #24]
    9230:	b10b      	cbz	r3, 9236 <do_sem_give+0x1c>
    9232:	2300      	movs	r3, #0
    9234:	e002      	b.n	923c <do_sem_give+0x22>
    9236:	2301      	movs	r3, #1
    9238:	e000      	b.n	923c <do_sem_give+0x22>
    923a:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    923c:	b913      	cbnz	r3, 9244 <do_sem_give+0x2a>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    923e:	2300      	movs	r3, #0
    9240:	66a3      	str	r3, [r4, #104]	; 0x68
}
    9242:	bd38      	pop	{r3, r4, r5, pc}
		z_add_thread_to_ready_q(thread);
    9244:	4620      	mov	r0, r4
    9246:	f7fb fdf9 	bl	4e3c <z_add_thread_to_ready_q>
    924a:	e7f8      	b.n	923e <do_sem_give+0x24>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    924c:	68ab      	ldr	r3, [r5, #8]
    924e:	68ea      	ldr	r2, [r5, #12]
    9250:	4293      	cmp	r3, r2
    9252:	d003      	beq.n	925c <do_sem_give+0x42>
    9254:	2201      	movs	r2, #1
    9256:	4413      	add	r3, r2
    9258:	60ab      	str	r3, [r5, #8]
}
    925a:	e7f2      	b.n	9242 <do_sem_give+0x28>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    925c:	2200      	movs	r2, #0
    925e:	e7fa      	b.n	9256 <do_sem_give+0x3c>

00009260 <z_thread_single_abort>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

void z_thread_single_abort(struct k_thread *thread)
{
    9260:	b510      	push	{r4, lr}
    9262:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    9264:	6d03      	ldr	r3, [r0, #80]	; 0x50
    9266:	b103      	cbz	r3, 926a <z_thread_single_abort+0xa>
		thread->fn_abort();
    9268:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
    926a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    926c:	f013 0f1f 	tst.w	r3, #31
    9270:	d105      	bne.n	927e <z_thread_single_abort+0x1e>
    9272:	69a2      	ldr	r2, [r4, #24]
    9274:	b10a      	cbz	r2, 927a <z_thread_single_abort+0x1a>
    9276:	2200      	movs	r2, #0
    9278:	e002      	b.n	9280 <z_thread_single_abort+0x20>
    927a:	2201      	movs	r2, #1
    927c:	e000      	b.n	9280 <z_thread_single_abort+0x20>
    927e:	2200      	movs	r2, #0

	if (IS_ENABLED(CONFIG_SMP)) {
		z_sched_abort(thread);
	}

	if (z_is_thread_ready(thread)) {
    9280:	b96a      	cbnz	r2, 929e <z_thread_single_abort+0x3e>
		z_remove_thread_from_ready_q(thread);
	} else {
		if (z_is_thread_pending(thread)) {
    9282:	f013 0f02 	tst.w	r3, #2
    9286:	d10e      	bne.n	92a6 <z_thread_single_abort+0x46>
    9288:	69a3      	ldr	r3, [r4, #24]
			z_unpend_thread_no_timeout(thread);
		}
		if (z_is_thread_timeout_active(thread)) {
    928a:	b11b      	cbz	r3, 9294 <z_thread_single_abort+0x34>
    928c:	f104 0018 	add.w	r0, r4, #24
    9290:	f000 f82f 	bl	92f2 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    9294:	7b63      	ldrb	r3, [r4, #13]
    9296:	f043 0308 	orr.w	r3, r3, #8
    929a:	7363      	strb	r3, [r4, #13]
	z_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	z_thread_perms_all_clear(thread);
#endif
}
    929c:	bd10      	pop	{r4, pc}
		z_remove_thread_from_ready_q(thread);
    929e:	4620      	mov	r0, r4
    92a0:	f7fb fe12 	bl	4ec8 <z_remove_thread_from_ready_q>
    92a4:	e7f6      	b.n	9294 <z_thread_single_abort+0x34>
			z_unpend_thread_no_timeout(thread);
    92a6:	4620      	mov	r0, r4
    92a8:	f7ff ff25 	bl	90f6 <z_unpend_thread_no_timeout>
    92ac:	e7ec      	b.n	9288 <z_thread_single_abort+0x28>

000092ae <remove_timeout>:
{
    92ae:	b510      	push	{r4, lr}
    92b0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    92b2:	f7fb fe57 	bl	4f64 <next>
    92b6:	b118      	cbz	r0, 92c0 <remove_timeout+0x12>
		next(t)->dticks += t->dticks;
    92b8:	68a1      	ldr	r1, [r4, #8]
    92ba:	6883      	ldr	r3, [r0, #8]
    92bc:	440b      	add	r3, r1
    92be:	6083      	str	r3, [r0, #8]
	node->prev->next = node->next;
    92c0:	6863      	ldr	r3, [r4, #4]
    92c2:	6822      	ldr	r2, [r4, #0]
    92c4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    92c6:	6823      	ldr	r3, [r4, #0]
    92c8:	6862      	ldr	r2, [r4, #4]
    92ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    92cc:	2300      	movs	r3, #0
    92ce:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    92d0:	6063      	str	r3, [r4, #4]
}
    92d2:	bd10      	pop	{r4, pc}

000092d4 <next_timeout>:
{
    92d4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    92d6:	f7fb fe3b 	bl	4f50 <first>
    92da:	4604      	mov	r4, r0
	s32_t ticks_elapsed = elapsed();
    92dc:	f7fb fe4e 	bl	4f7c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    92e0:	b124      	cbz	r4, 92ec <next_timeout+0x18>
    92e2:	68a3      	ldr	r3, [r4, #8]
    92e4:	1a18      	subs	r0, r3, r0
    92e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    92ea:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    92ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    92f0:	e7fb      	b.n	92ea <next_timeout+0x16>

000092f2 <z_abort_timeout>:
{
    92f2:	b570      	push	{r4, r5, r6, lr}
    92f4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    92f6:	2300      	movs	r3, #0
	__asm__ volatile(
    92f8:	f04f 0220 	mov.w	r2, #32
    92fc:	f3ef 8611 	mrs	r6, BASEPRI
    9300:	f382 8811 	msr	BASEPRI, r2
    9304:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    9308:	f06f 0015 	mvn.w	r0, #21
    930c:	e004      	b.n	9318 <z_abort_timeout+0x26>
	__asm__ volatile(
    930e:	f386 8811 	msr	BASEPRI, r6
    9312:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9316:	2301      	movs	r3, #1
    9318:	461d      	mov	r5, r3
    931a:	b93b      	cbnz	r3, 932c <z_abort_timeout+0x3a>
	return node->next != NULL;
    931c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    931e:	2b00      	cmp	r3, #0
    9320:	d0f5      	beq.n	930e <z_abort_timeout+0x1c>
			remove_timeout(to);
    9322:	4620      	mov	r0, r4
    9324:	f7ff ffc3 	bl	92ae <remove_timeout>
			ret = 0;
    9328:	4628      	mov	r0, r5
    932a:	e7f0      	b.n	930e <z_abort_timeout+0x1c>
}
    932c:	bd70      	pop	{r4, r5, r6, pc}

0000932e <k_mem_pool_init>:
{
    932e:	b508      	push	{r3, lr}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9330:	f100 0214 	add.w	r2, r0, #20
	list->head = (sys_dnode_t *)list;
    9334:	6142      	str	r2, [r0, #20]
	list->tail = (sys_dnode_t *)list;
    9336:	6182      	str	r2, [r0, #24]
	z_sys_mem_pool_base_init(&p->base);
    9338:	f7fc fc1b 	bl	5b72 <z_sys_mem_pool_base_init>
}
    933c:	bd08      	pop	{r3, pc}

0000933e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    933e:	4770      	bx	lr
