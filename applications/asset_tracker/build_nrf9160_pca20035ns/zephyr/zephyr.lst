
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00018200 <_vector_table>:
   18200:	2002e968 	.word	0x2002e968
   18204:	00021a11 	.word	0x00021a11
   18208:	00047c8b 	.word	0x00047c8b
   1820c:	0002164d 	.word	0x0002164d
   18210:	0002164d 	.word	0x0002164d
   18214:	0002164d 	.word	0x0002164d
   18218:	0002164d 	.word	0x0002164d
   1821c:	0002164d 	.word	0x0002164d
   18220:	0002164d 	.word	0x0002164d
   18224:	0002164d 	.word	0x0002164d
   18228:	0002164d 	.word	0x0002164d
   1822c:	00021615 	.word	0x00021615
   18230:	0002164d 	.word	0x0002164d
   18234:	0002164d 	.word	0x0002164d
   18238:	00021551 	.word	0x00021551
   1823c:	000211a5 	.word	0x000211a5

00018240 <_irq_vector_table>:
   18240:	00021679 00021679 00021679 00021679     y...y...y...y...
   18250:	00021679 00021679 00021679 00021679     y...y...y...y...
   18260:	00021679 00021679 00021679 00021679     y...y...y...y...
   18270:	00021679 00021679 00021679 00021679     y...y...y...y...
   18280:	00021679 00021679 00021679 00021679     y...y...y...y...
   18290:	00021679 00021679 00021679 00021679     y...y...y...y...
   182a0:	00021679 00021679 00021679 00021679     y...y...y...y...
   182b0:	00025909 00049071 00021679 00021679     .Y..q...y...y...
   182c0:	00021679 00021679 00021679 00021679     y...y...y...y...
   182d0:	00021679 00021679 00021679 00021679     y...y...y...y...
   182e0:	00021679 00021679 00049093 00021679     y...y.......y...
   182f0:	00021679 00021679 00021679 00021679     y...y...y...y...
   18300:	00021679 00021679 00021679 00021679     y...y...y...y...
   18310:	00021679 00021679 00021679 00021679     y...y...y...y...
   18320:	00021679 00021679 00021679 00021679     y...y...y...y...
   18330:	00021679 00021679 00021679 00021679     y...y...y...y...
   18340:	00021679                                y...

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b01 0003c2f8     ...(L....[......
   18410:	00000001 00018200 2002faa8 0002b7f5     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

00018420 <__aeabi_drsub>:
   18420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18424:	e002      	b.n	1842c <__adddf3>
   18426:	bf00      	nop

00018428 <__aeabi_dsub>:
   18428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001842c <__adddf3>:
   1842c:	b530      	push	{r4, r5, lr}
   1842e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18432:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18436:	ea94 0f05 	teq	r4, r5
   1843a:	bf08      	it	eq
   1843c:	ea90 0f02 	teqeq	r0, r2
   18440:	bf1f      	itttt	ne
   18442:	ea54 0c00 	orrsne.w	ip, r4, r0
   18446:	ea55 0c02 	orrsne.w	ip, r5, r2
   1844a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1844e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18452:	f000 80e2 	beq.w	1861a <__adddf3+0x1ee>
   18456:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1845a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1845e:	bfb8      	it	lt
   18460:	426d      	neglt	r5, r5
   18462:	dd0c      	ble.n	1847e <__adddf3+0x52>
   18464:	442c      	add	r4, r5
   18466:	ea80 0202 	eor.w	r2, r0, r2
   1846a:	ea81 0303 	eor.w	r3, r1, r3
   1846e:	ea82 0000 	eor.w	r0, r2, r0
   18472:	ea83 0101 	eor.w	r1, r3, r1
   18476:	ea80 0202 	eor.w	r2, r0, r2
   1847a:	ea81 0303 	eor.w	r3, r1, r3
   1847e:	2d36      	cmp	r5, #54	; 0x36
   18480:	bf88      	it	hi
   18482:	bd30      	pophi	{r4, r5, pc}
   18484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18488:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1848c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18494:	d002      	beq.n	1849c <__adddf3+0x70>
   18496:	4240      	negs	r0, r0
   18498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1849c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184a8:	d002      	beq.n	184b0 <__adddf3+0x84>
   184aa:	4252      	negs	r2, r2
   184ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184b0:	ea94 0f05 	teq	r4, r5
   184b4:	f000 80a7 	beq.w	18606 <__adddf3+0x1da>
   184b8:	f1a4 0401 	sub.w	r4, r4, #1
   184bc:	f1d5 0e20 	rsbs	lr, r5, #32
   184c0:	db0d      	blt.n	184de <__adddf3+0xb2>
   184c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184c6:	fa22 f205 	lsr.w	r2, r2, r5
   184ca:	1880      	adds	r0, r0, r2
   184cc:	f141 0100 	adc.w	r1, r1, #0
   184d0:	fa03 f20e 	lsl.w	r2, r3, lr
   184d4:	1880      	adds	r0, r0, r2
   184d6:	fa43 f305 	asr.w	r3, r3, r5
   184da:	4159      	adcs	r1, r3
   184dc:	e00e      	b.n	184fc <__adddf3+0xd0>
   184de:	f1a5 0520 	sub.w	r5, r5, #32
   184e2:	f10e 0e20 	add.w	lr, lr, #32
   184e6:	2a01      	cmp	r2, #1
   184e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   184ec:	bf28      	it	cs
   184ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   184f2:	fa43 f305 	asr.w	r3, r3, r5
   184f6:	18c0      	adds	r0, r0, r3
   184f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   184fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18500:	d507      	bpl.n	18512 <__adddf3+0xe6>
   18502:	f04f 0e00 	mov.w	lr, #0
   18506:	f1dc 0c00 	rsbs	ip, ip, #0
   1850a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1850e:	eb6e 0101 	sbc.w	r1, lr, r1
   18512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18516:	d31b      	bcc.n	18550 <__adddf3+0x124>
   18518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1851c:	d30c      	bcc.n	18538 <__adddf3+0x10c>
   1851e:	0849      	lsrs	r1, r1, #1
   18520:	ea5f 0030 	movs.w	r0, r0, rrx
   18524:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18528:	f104 0401 	add.w	r4, r4, #1
   1852c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18534:	f080 809a 	bcs.w	1866c <__adddf3+0x240>
   18538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1853c:	bf08      	it	eq
   1853e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18542:	f150 0000 	adcs.w	r0, r0, #0
   18546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1854a:	ea41 0105 	orr.w	r1, r1, r5
   1854e:	bd30      	pop	{r4, r5, pc}
   18550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18554:	4140      	adcs	r0, r0
   18556:	eb41 0101 	adc.w	r1, r1, r1
   1855a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1855e:	f1a4 0401 	sub.w	r4, r4, #1
   18562:	d1e9      	bne.n	18538 <__adddf3+0x10c>
   18564:	f091 0f00 	teq	r1, #0
   18568:	bf04      	itt	eq
   1856a:	4601      	moveq	r1, r0
   1856c:	2000      	moveq	r0, #0
   1856e:	fab1 f381 	clz	r3, r1
   18572:	bf08      	it	eq
   18574:	3320      	addeq	r3, #32
   18576:	f1a3 030b 	sub.w	r3, r3, #11
   1857a:	f1b3 0220 	subs.w	r2, r3, #32
   1857e:	da0c      	bge.n	1859a <__adddf3+0x16e>
   18580:	320c      	adds	r2, #12
   18582:	dd08      	ble.n	18596 <__adddf3+0x16a>
   18584:	f102 0c14 	add.w	ip, r2, #20
   18588:	f1c2 020c 	rsb	r2, r2, #12
   1858c:	fa01 f00c 	lsl.w	r0, r1, ip
   18590:	fa21 f102 	lsr.w	r1, r1, r2
   18594:	e00c      	b.n	185b0 <__adddf3+0x184>
   18596:	f102 0214 	add.w	r2, r2, #20
   1859a:	bfd8      	it	le
   1859c:	f1c2 0c20 	rsble	ip, r2, #32
   185a0:	fa01 f102 	lsl.w	r1, r1, r2
   185a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185a8:	bfdc      	itt	le
   185aa:	ea41 010c 	orrle.w	r1, r1, ip
   185ae:	4090      	lslle	r0, r2
   185b0:	1ae4      	subs	r4, r4, r3
   185b2:	bfa2      	ittt	ge
   185b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185b8:	4329      	orrge	r1, r5
   185ba:	bd30      	popge	{r4, r5, pc}
   185bc:	ea6f 0404 	mvn.w	r4, r4
   185c0:	3c1f      	subs	r4, #31
   185c2:	da1c      	bge.n	185fe <__adddf3+0x1d2>
   185c4:	340c      	adds	r4, #12
   185c6:	dc0e      	bgt.n	185e6 <__adddf3+0x1ba>
   185c8:	f104 0414 	add.w	r4, r4, #20
   185cc:	f1c4 0220 	rsb	r2, r4, #32
   185d0:	fa20 f004 	lsr.w	r0, r0, r4
   185d4:	fa01 f302 	lsl.w	r3, r1, r2
   185d8:	ea40 0003 	orr.w	r0, r0, r3
   185dc:	fa21 f304 	lsr.w	r3, r1, r4
   185e0:	ea45 0103 	orr.w	r1, r5, r3
   185e4:	bd30      	pop	{r4, r5, pc}
   185e6:	f1c4 040c 	rsb	r4, r4, #12
   185ea:	f1c4 0220 	rsb	r2, r4, #32
   185ee:	fa20 f002 	lsr.w	r0, r0, r2
   185f2:	fa01 f304 	lsl.w	r3, r1, r4
   185f6:	ea40 0003 	orr.w	r0, r0, r3
   185fa:	4629      	mov	r1, r5
   185fc:	bd30      	pop	{r4, r5, pc}
   185fe:	fa21 f004 	lsr.w	r0, r1, r4
   18602:	4629      	mov	r1, r5
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f094 0f00 	teq	r4, #0
   1860a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1860e:	bf06      	itte	eq
   18610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18614:	3401      	addeq	r4, #1
   18616:	3d01      	subne	r5, #1
   18618:	e74e      	b.n	184b8 <__adddf3+0x8c>
   1861a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1861e:	bf18      	it	ne
   18620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18624:	d029      	beq.n	1867a <__adddf3+0x24e>
   18626:	ea94 0f05 	teq	r4, r5
   1862a:	bf08      	it	eq
   1862c:	ea90 0f02 	teqeq	r0, r2
   18630:	d005      	beq.n	1863e <__adddf3+0x212>
   18632:	ea54 0c00 	orrs.w	ip, r4, r0
   18636:	bf04      	itt	eq
   18638:	4619      	moveq	r1, r3
   1863a:	4610      	moveq	r0, r2
   1863c:	bd30      	pop	{r4, r5, pc}
   1863e:	ea91 0f03 	teq	r1, r3
   18642:	bf1e      	ittt	ne
   18644:	2100      	movne	r1, #0
   18646:	2000      	movne	r0, #0
   18648:	bd30      	popne	{r4, r5, pc}
   1864a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1864e:	d105      	bne.n	1865c <__adddf3+0x230>
   18650:	0040      	lsls	r0, r0, #1
   18652:	4149      	adcs	r1, r1
   18654:	bf28      	it	cs
   18656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1865a:	bd30      	pop	{r4, r5, pc}
   1865c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18660:	bf3c      	itt	cc
   18662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18666:	bd30      	popcc	{r4, r5, pc}
   18668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1866c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18674:	f04f 0000 	mov.w	r0, #0
   18678:	bd30      	pop	{r4, r5, pc}
   1867a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1867e:	bf1a      	itte	ne
   18680:	4619      	movne	r1, r3
   18682:	4610      	movne	r0, r2
   18684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18688:	bf1c      	itt	ne
   1868a:	460b      	movne	r3, r1
   1868c:	4602      	movne	r2, r0
   1868e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18692:	bf06      	itte	eq
   18694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18698:	ea91 0f03 	teqeq	r1, r3
   1869c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186a0:	bd30      	pop	{r4, r5, pc}
   186a2:	bf00      	nop

000186a4 <__aeabi_ui2d>:
   186a4:	f090 0f00 	teq	r0, #0
   186a8:	bf04      	itt	eq
   186aa:	2100      	moveq	r1, #0
   186ac:	4770      	bxeq	lr
   186ae:	b530      	push	{r4, r5, lr}
   186b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186b8:	f04f 0500 	mov.w	r5, #0
   186bc:	f04f 0100 	mov.w	r1, #0
   186c0:	e750      	b.n	18564 <__adddf3+0x138>
   186c2:	bf00      	nop

000186c4 <__aeabi_i2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186dc:	bf48      	it	mi
   186de:	4240      	negmi	r0, r0
   186e0:	f04f 0100 	mov.w	r1, #0
   186e4:	e73e      	b.n	18564 <__adddf3+0x138>
   186e6:	bf00      	nop

000186e8 <__aeabi_f2d>:
   186e8:	0042      	lsls	r2, r0, #1
   186ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   186ee:	ea4f 0131 	mov.w	r1, r1, rrx
   186f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   186f6:	bf1f      	itttt	ne
   186f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   186fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18704:	4770      	bxne	lr
   18706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1870a:	bf08      	it	eq
   1870c:	4770      	bxeq	lr
   1870e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18712:	bf04      	itt	eq
   18714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18718:	4770      	bxeq	lr
   1871a:	b530      	push	{r4, r5, lr}
   1871c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18728:	e71c      	b.n	18564 <__adddf3+0x138>
   1872a:	bf00      	nop

0001872c <__aeabi_ul2d>:
   1872c:	ea50 0201 	orrs.w	r2, r0, r1
   18730:	bf08      	it	eq
   18732:	4770      	bxeq	lr
   18734:	b530      	push	{r4, r5, lr}
   18736:	f04f 0500 	mov.w	r5, #0
   1873a:	e00a      	b.n	18752 <__aeabi_l2d+0x16>

0001873c <__aeabi_l2d>:
   1873c:	ea50 0201 	orrs.w	r2, r0, r1
   18740:	bf08      	it	eq
   18742:	4770      	bxeq	lr
   18744:	b530      	push	{r4, r5, lr}
   18746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1874a:	d502      	bpl.n	18752 <__aeabi_l2d+0x16>
   1874c:	4240      	negs	r0, r0
   1874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18752:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18756:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1875e:	f43f aed8 	beq.w	18512 <__adddf3+0xe6>
   18762:	f04f 0203 	mov.w	r2, #3
   18766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1876a:	bf18      	it	ne
   1876c:	3203      	addne	r2, #3
   1876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18772:	bf18      	it	ne
   18774:	3203      	addne	r2, #3
   18776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1877a:	f1c2 0320 	rsb	r3, r2, #32
   1877e:	fa00 fc03 	lsl.w	ip, r0, r3
   18782:	fa20 f002 	lsr.w	r0, r0, r2
   18786:	fa01 fe03 	lsl.w	lr, r1, r3
   1878a:	ea40 000e 	orr.w	r0, r0, lr
   1878e:	fa21 f102 	lsr.w	r1, r1, r2
   18792:	4414      	add	r4, r2
   18794:	e6bd      	b.n	18512 <__adddf3+0xe6>
   18796:	bf00      	nop

00018798 <__aeabi_dmul>:
   18798:	b570      	push	{r4, r5, r6, lr}
   1879a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1879e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   187a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   187a6:	bf1d      	ittte	ne
   187a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   187ac:	ea94 0f0c 	teqne	r4, ip
   187b0:	ea95 0f0c 	teqne	r5, ip
   187b4:	f000 f8de 	bleq	18974 <__aeabi_dmul+0x1dc>
   187b8:	442c      	add	r4, r5
   187ba:	ea81 0603 	eor.w	r6, r1, r3
   187be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   187c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   187c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   187ca:	bf18      	it	ne
   187cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   187d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   187d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   187d8:	d038      	beq.n	1884c <__aeabi_dmul+0xb4>
   187da:	fba0 ce02 	umull	ip, lr, r0, r2
   187de:	f04f 0500 	mov.w	r5, #0
   187e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   187e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   187ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   187ee:	f04f 0600 	mov.w	r6, #0
   187f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   187f6:	f09c 0f00 	teq	ip, #0
   187fa:	bf18      	it	ne
   187fc:	f04e 0e01 	orrne.w	lr, lr, #1
   18800:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18808:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1880c:	d204      	bcs.n	18818 <__aeabi_dmul+0x80>
   1880e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18812:	416d      	adcs	r5, r5
   18814:	eb46 0606 	adc.w	r6, r6, r6
   18818:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1881c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18820:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18824:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18828:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1882c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18830:	bf88      	it	hi
   18832:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18836:	d81e      	bhi.n	18876 <__aeabi_dmul+0xde>
   18838:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1883c:	bf08      	it	eq
   1883e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18842:	f150 0000 	adcs.w	r0, r0, #0
   18846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1884a:	bd70      	pop	{r4, r5, r6, pc}
   1884c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18850:	ea46 0101 	orr.w	r1, r6, r1
   18854:	ea40 0002 	orr.w	r0, r0, r2
   18858:	ea81 0103 	eor.w	r1, r1, r3
   1885c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18860:	bfc2      	ittt	gt
   18862:	ebd4 050c 	rsbsgt	r5, r4, ip
   18866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1886a:	bd70      	popgt	{r4, r5, r6, pc}
   1886c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18870:	f04f 0e00 	mov.w	lr, #0
   18874:	3c01      	subs	r4, #1
   18876:	f300 80ab 	bgt.w	189d0 <__aeabi_dmul+0x238>
   1887a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1887e:	bfde      	ittt	le
   18880:	2000      	movle	r0, #0
   18882:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18886:	bd70      	pople	{r4, r5, r6, pc}
   18888:	f1c4 0400 	rsb	r4, r4, #0
   1888c:	3c20      	subs	r4, #32
   1888e:	da35      	bge.n	188fc <__aeabi_dmul+0x164>
   18890:	340c      	adds	r4, #12
   18892:	dc1b      	bgt.n	188cc <__aeabi_dmul+0x134>
   18894:	f104 0414 	add.w	r4, r4, #20
   18898:	f1c4 0520 	rsb	r5, r4, #32
   1889c:	fa00 f305 	lsl.w	r3, r0, r5
   188a0:	fa20 f004 	lsr.w	r0, r0, r4
   188a4:	fa01 f205 	lsl.w	r2, r1, r5
   188a8:	ea40 0002 	orr.w	r0, r0, r2
   188ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   188b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188b8:	fa21 f604 	lsr.w	r6, r1, r4
   188bc:	eb42 0106 	adc.w	r1, r2, r6
   188c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188c4:	bf08      	it	eq
   188c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188ca:	bd70      	pop	{r4, r5, r6, pc}
   188cc:	f1c4 040c 	rsb	r4, r4, #12
   188d0:	f1c4 0520 	rsb	r5, r4, #32
   188d4:	fa00 f304 	lsl.w	r3, r0, r4
   188d8:	fa20 f005 	lsr.w	r0, r0, r5
   188dc:	fa01 f204 	lsl.w	r2, r1, r4
   188e0:	ea40 0002 	orr.w	r0, r0, r2
   188e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   188e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188ec:	f141 0100 	adc.w	r1, r1, #0
   188f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188f4:	bf08      	it	eq
   188f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188fa:	bd70      	pop	{r4, r5, r6, pc}
   188fc:	f1c4 0520 	rsb	r5, r4, #32
   18900:	fa00 f205 	lsl.w	r2, r0, r5
   18904:	ea4e 0e02 	orr.w	lr, lr, r2
   18908:	fa20 f304 	lsr.w	r3, r0, r4
   1890c:	fa01 f205 	lsl.w	r2, r1, r5
   18910:	ea43 0302 	orr.w	r3, r3, r2
   18914:	fa21 f004 	lsr.w	r0, r1, r4
   18918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1891c:	fa21 f204 	lsr.w	r2, r1, r4
   18920:	ea20 0002 	bic.w	r0, r0, r2
   18924:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1892c:	bf08      	it	eq
   1892e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18932:	bd70      	pop	{r4, r5, r6, pc}
   18934:	f094 0f00 	teq	r4, #0
   18938:	d10f      	bne.n	1895a <__aeabi_dmul+0x1c2>
   1893a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1893e:	0040      	lsls	r0, r0, #1
   18940:	eb41 0101 	adc.w	r1, r1, r1
   18944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18948:	bf08      	it	eq
   1894a:	3c01      	subeq	r4, #1
   1894c:	d0f7      	beq.n	1893e <__aeabi_dmul+0x1a6>
   1894e:	ea41 0106 	orr.w	r1, r1, r6
   18952:	f095 0f00 	teq	r5, #0
   18956:	bf18      	it	ne
   18958:	4770      	bxne	lr
   1895a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1895e:	0052      	lsls	r2, r2, #1
   18960:	eb43 0303 	adc.w	r3, r3, r3
   18964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18968:	bf08      	it	eq
   1896a:	3d01      	subeq	r5, #1
   1896c:	d0f7      	beq.n	1895e <__aeabi_dmul+0x1c6>
   1896e:	ea43 0306 	orr.w	r3, r3, r6
   18972:	4770      	bx	lr
   18974:	ea94 0f0c 	teq	r4, ip
   18978:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1897c:	bf18      	it	ne
   1897e:	ea95 0f0c 	teqne	r5, ip
   18982:	d00c      	beq.n	1899e <__aeabi_dmul+0x206>
   18984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18988:	bf18      	it	ne
   1898a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1898e:	d1d1      	bne.n	18934 <__aeabi_dmul+0x19c>
   18990:	ea81 0103 	eor.w	r1, r1, r3
   18994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18998:	f04f 0000 	mov.w	r0, #0
   1899c:	bd70      	pop	{r4, r5, r6, pc}
   1899e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   189a2:	bf06      	itte	eq
   189a4:	4610      	moveq	r0, r2
   189a6:	4619      	moveq	r1, r3
   189a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   189ac:	d019      	beq.n	189e2 <__aeabi_dmul+0x24a>
   189ae:	ea94 0f0c 	teq	r4, ip
   189b2:	d102      	bne.n	189ba <__aeabi_dmul+0x222>
   189b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   189b8:	d113      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189ba:	ea95 0f0c 	teq	r5, ip
   189be:	d105      	bne.n	189cc <__aeabi_dmul+0x234>
   189c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   189c4:	bf1c      	itt	ne
   189c6:	4610      	movne	r0, r2
   189c8:	4619      	movne	r1, r3
   189ca:	d10a      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189cc:	ea81 0103 	eor.w	r1, r1, r3
   189d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   189d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   189dc:	f04f 0000 	mov.w	r0, #0
   189e0:	bd70      	pop	{r4, r5, r6, pc}
   189e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   189ea:	bd70      	pop	{r4, r5, r6, pc}

000189ec <__aeabi_ddiv>:
   189ec:	b570      	push	{r4, r5, r6, lr}
   189ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   189f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   189f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   189fa:	bf1d      	ittte	ne
   189fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18a00:	ea94 0f0c 	teqne	r4, ip
   18a04:	ea95 0f0c 	teqne	r5, ip
   18a08:	f000 f8a7 	bleq	18b5a <__aeabi_ddiv+0x16e>
   18a0c:	eba4 0405 	sub.w	r4, r4, r5
   18a10:	ea81 0e03 	eor.w	lr, r1, r3
   18a14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18a1c:	f000 8088 	beq.w	18b30 <__aeabi_ddiv+0x144>
   18a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18a24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18a28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18a2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18a30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18a34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18a38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18a3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18a40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18a44:	429d      	cmp	r5, r3
   18a46:	bf08      	it	eq
   18a48:	4296      	cmpeq	r6, r2
   18a4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18a4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18a52:	d202      	bcs.n	18a5a <__aeabi_ddiv+0x6e>
   18a54:	085b      	lsrs	r3, r3, #1
   18a56:	ea4f 0232 	mov.w	r2, r2, rrx
   18a5a:	1ab6      	subs	r6, r6, r2
   18a5c:	eb65 0503 	sbc.w	r5, r5, r3
   18a60:	085b      	lsrs	r3, r3, #1
   18a62:	ea4f 0232 	mov.w	r2, r2, rrx
   18a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18a6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   18a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a76:	bf22      	ittt	cs
   18a78:	1ab6      	subcs	r6, r6, r2
   18a7a:	4675      	movcs	r5, lr
   18a7c:	ea40 000c 	orrcs.w	r0, r0, ip
   18a80:	085b      	lsrs	r3, r3, #1
   18a82:	ea4f 0232 	mov.w	r2, r2, rrx
   18a86:	ebb6 0e02 	subs.w	lr, r6, r2
   18a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a8e:	bf22      	ittt	cs
   18a90:	1ab6      	subcs	r6, r6, r2
   18a92:	4675      	movcs	r5, lr
   18a94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18a98:	085b      	lsrs	r3, r3, #1
   18a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   18a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   18aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   18aa6:	bf22      	ittt	cs
   18aa8:	1ab6      	subcs	r6, r6, r2
   18aaa:	4675      	movcs	r5, lr
   18aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18ab0:	085b      	lsrs	r3, r3, #1
   18ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   18ab6:	ebb6 0e02 	subs.w	lr, r6, r2
   18aba:	eb75 0e03 	sbcs.w	lr, r5, r3
   18abe:	bf22      	ittt	cs
   18ac0:	1ab6      	subcs	r6, r6, r2
   18ac2:	4675      	movcs	r5, lr
   18ac4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18ac8:	ea55 0e06 	orrs.w	lr, r5, r6
   18acc:	d018      	beq.n	18b00 <__aeabi_ddiv+0x114>
   18ace:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18ad2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18ad6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18ada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18ade:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18ae2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18ae6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18aea:	d1c0      	bne.n	18a6e <__aeabi_ddiv+0x82>
   18aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18af0:	d10b      	bne.n	18b0a <__aeabi_ddiv+0x11e>
   18af2:	ea41 0100 	orr.w	r1, r1, r0
   18af6:	f04f 0000 	mov.w	r0, #0
   18afa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18afe:	e7b6      	b.n	18a6e <__aeabi_ddiv+0x82>
   18b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18b04:	bf04      	itt	eq
   18b06:	4301      	orreq	r1, r0
   18b08:	2000      	moveq	r0, #0
   18b0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18b0e:	bf88      	it	hi
   18b10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18b14:	f63f aeaf 	bhi.w	18876 <__aeabi_dmul+0xde>
   18b18:	ebb5 0c03 	subs.w	ip, r5, r3
   18b1c:	bf04      	itt	eq
   18b1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   18b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18b26:	f150 0000 	adcs.w	r0, r0, #0
   18b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18b2e:	bd70      	pop	{r4, r5, r6, pc}
   18b30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18b34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18b38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18b3c:	bfc2      	ittt	gt
   18b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18b46:	bd70      	popgt	{r4, r5, r6, pc}
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b4c:	f04f 0e00 	mov.w	lr, #0
   18b50:	3c01      	subs	r4, #1
   18b52:	e690      	b.n	18876 <__aeabi_dmul+0xde>
   18b54:	ea45 0e06 	orr.w	lr, r5, r6
   18b58:	e68d      	b.n	18876 <__aeabi_dmul+0xde>
   18b5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b5e:	ea94 0f0c 	teq	r4, ip
   18b62:	bf08      	it	eq
   18b64:	ea95 0f0c 	teqeq	r5, ip
   18b68:	f43f af3b 	beq.w	189e2 <__aeabi_dmul+0x24a>
   18b6c:	ea94 0f0c 	teq	r4, ip
   18b70:	d10a      	bne.n	18b88 <__aeabi_ddiv+0x19c>
   18b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18b76:	f47f af34 	bne.w	189e2 <__aeabi_dmul+0x24a>
   18b7a:	ea95 0f0c 	teq	r5, ip
   18b7e:	f47f af25 	bne.w	189cc <__aeabi_dmul+0x234>
   18b82:	4610      	mov	r0, r2
   18b84:	4619      	mov	r1, r3
   18b86:	e72c      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b88:	ea95 0f0c 	teq	r5, ip
   18b8c:	d106      	bne.n	18b9c <__aeabi_ddiv+0x1b0>
   18b8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18b92:	f43f aefd 	beq.w	18990 <__aeabi_dmul+0x1f8>
   18b96:	4610      	mov	r0, r2
   18b98:	4619      	mov	r1, r3
   18b9a:	e722      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18ba0:	bf18      	it	ne
   18ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18ba6:	f47f aec5 	bne.w	18934 <__aeabi_dmul+0x19c>
   18baa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18bae:	f47f af0d 	bne.w	189cc <__aeabi_dmul+0x234>
   18bb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18bb6:	f47f aeeb 	bne.w	18990 <__aeabi_dmul+0x1f8>
   18bba:	e712      	b.n	189e2 <__aeabi_dmul+0x24a>

00018bbc <__gedf2>:
   18bbc:	f04f 3cff 	mov.w	ip, #4294967295
   18bc0:	e006      	b.n	18bd0 <__cmpdf2+0x4>
   18bc2:	bf00      	nop

00018bc4 <__ledf2>:
   18bc4:	f04f 0c01 	mov.w	ip, #1
   18bc8:	e002      	b.n	18bd0 <__cmpdf2+0x4>
   18bca:	bf00      	nop

00018bcc <__cmpdf2>:
   18bcc:	f04f 0c01 	mov.w	ip, #1
   18bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   18bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18be0:	bf18      	it	ne
   18be2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18be6:	d01b      	beq.n	18c20 <__cmpdf2+0x54>
   18be8:	b001      	add	sp, #4
   18bea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18bee:	bf0c      	ite	eq
   18bf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18bf4:	ea91 0f03 	teqne	r1, r3
   18bf8:	bf02      	ittt	eq
   18bfa:	ea90 0f02 	teqeq	r0, r2
   18bfe:	2000      	moveq	r0, #0
   18c00:	4770      	bxeq	lr
   18c02:	f110 0f00 	cmn.w	r0, #0
   18c06:	ea91 0f03 	teq	r1, r3
   18c0a:	bf58      	it	pl
   18c0c:	4299      	cmppl	r1, r3
   18c0e:	bf08      	it	eq
   18c10:	4290      	cmpeq	r0, r2
   18c12:	bf2c      	ite	cs
   18c14:	17d8      	asrcs	r0, r3, #31
   18c16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18c1a:	f040 0001 	orr.w	r0, r0, #1
   18c1e:	4770      	bx	lr
   18c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c28:	d102      	bne.n	18c30 <__cmpdf2+0x64>
   18c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18c2e:	d107      	bne.n	18c40 <__cmpdf2+0x74>
   18c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c38:	d1d6      	bne.n	18be8 <__cmpdf2+0x1c>
   18c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18c3e:	d0d3      	beq.n	18be8 <__cmpdf2+0x1c>
   18c40:	f85d 0b04 	ldr.w	r0, [sp], #4
   18c44:	4770      	bx	lr
   18c46:	bf00      	nop

00018c48 <__aeabi_cdrcmple>:
   18c48:	4684      	mov	ip, r0
   18c4a:	4610      	mov	r0, r2
   18c4c:	4662      	mov	r2, ip
   18c4e:	468c      	mov	ip, r1
   18c50:	4619      	mov	r1, r3
   18c52:	4663      	mov	r3, ip
   18c54:	e000      	b.n	18c58 <__aeabi_cdcmpeq>
   18c56:	bf00      	nop

00018c58 <__aeabi_cdcmpeq>:
   18c58:	b501      	push	{r0, lr}
   18c5a:	f7ff ffb7 	bl	18bcc <__cmpdf2>
   18c5e:	2800      	cmp	r0, #0
   18c60:	bf48      	it	mi
   18c62:	f110 0f00 	cmnmi.w	r0, #0
   18c66:	bd01      	pop	{r0, pc}

00018c68 <__aeabi_dcmpeq>:
   18c68:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c6c:	f7ff fff4 	bl	18c58 <__aeabi_cdcmpeq>
   18c70:	bf0c      	ite	eq
   18c72:	2001      	moveq	r0, #1
   18c74:	2000      	movne	r0, #0
   18c76:	f85d fb08 	ldr.w	pc, [sp], #8
   18c7a:	bf00      	nop

00018c7c <__aeabi_dcmplt>:
   18c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c80:	f7ff ffea 	bl	18c58 <__aeabi_cdcmpeq>
   18c84:	bf34      	ite	cc
   18c86:	2001      	movcc	r0, #1
   18c88:	2000      	movcs	r0, #0
   18c8a:	f85d fb08 	ldr.w	pc, [sp], #8
   18c8e:	bf00      	nop

00018c90 <__aeabi_dcmple>:
   18c90:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c94:	f7ff ffe0 	bl	18c58 <__aeabi_cdcmpeq>
   18c98:	bf94      	ite	ls
   18c9a:	2001      	movls	r0, #1
   18c9c:	2000      	movhi	r0, #0
   18c9e:	f85d fb08 	ldr.w	pc, [sp], #8
   18ca2:	bf00      	nop

00018ca4 <__aeabi_dcmpge>:
   18ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ca8:	f7ff ffce 	bl	18c48 <__aeabi_cdrcmple>
   18cac:	bf94      	ite	ls
   18cae:	2001      	movls	r0, #1
   18cb0:	2000      	movhi	r0, #0
   18cb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18cb6:	bf00      	nop

00018cb8 <__aeabi_dcmpgt>:
   18cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18cbc:	f7ff ffc4 	bl	18c48 <__aeabi_cdrcmple>
   18cc0:	bf34      	ite	cc
   18cc2:	2001      	movcc	r0, #1
   18cc4:	2000      	movcs	r0, #0
   18cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18cca:	bf00      	nop

00018ccc <__aeabi_d2iz>:
   18ccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18cd4:	d215      	bcs.n	18d02 <__aeabi_d2iz+0x36>
   18cd6:	d511      	bpl.n	18cfc <__aeabi_d2iz+0x30>
   18cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18ce0:	d912      	bls.n	18d08 <__aeabi_d2iz+0x3c>
   18ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18cf2:	fa23 f002 	lsr.w	r0, r3, r2
   18cf6:	bf18      	it	ne
   18cf8:	4240      	negne	r0, r0
   18cfa:	4770      	bx	lr
   18cfc:	f04f 0000 	mov.w	r0, #0
   18d00:	4770      	bx	lr
   18d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18d06:	d105      	bne.n	18d14 <__aeabi_d2iz+0x48>
   18d08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18d0c:	bf08      	it	eq
   18d0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18d12:	4770      	bx	lr
   18d14:	f04f 0000 	mov.w	r0, #0
   18d18:	4770      	bx	lr
   18d1a:	bf00      	nop

00018d1c <__aeabi_ldivmod>:
   18d1c:	b97b      	cbnz	r3, 18d3e <__aeabi_ldivmod+0x22>
   18d1e:	b972      	cbnz	r2, 18d3e <__aeabi_ldivmod+0x22>
   18d20:	2900      	cmp	r1, #0
   18d22:	bfbe      	ittt	lt
   18d24:	2000      	movlt	r0, #0
   18d26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   18d2a:	e006      	blt.n	18d3a <__aeabi_ldivmod+0x1e>
   18d2c:	bf08      	it	eq
   18d2e:	2800      	cmpeq	r0, #0
   18d30:	bf1c      	itt	ne
   18d32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   18d36:	f04f 30ff 	movne.w	r0, #4294967295
   18d3a:	f000 b9c7 	b.w	190cc <__aeabi_idiv0>
   18d3e:	f1ad 0c08 	sub.w	ip, sp, #8
   18d42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d46:	2900      	cmp	r1, #0
   18d48:	db09      	blt.n	18d5e <__aeabi_ldivmod+0x42>
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	db1a      	blt.n	18d84 <__aeabi_ldivmod+0x68>
   18d4e:	f000 f84d 	bl	18dec <__udivmoddi4>
   18d52:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d5a:	b004      	add	sp, #16
   18d5c:	4770      	bx	lr
   18d5e:	4240      	negs	r0, r0
   18d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d64:	2b00      	cmp	r3, #0
   18d66:	db1b      	blt.n	18da0 <__aeabi_ldivmod+0x84>
   18d68:	f000 f840 	bl	18dec <__udivmoddi4>
   18d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d74:	b004      	add	sp, #16
   18d76:	4240      	negs	r0, r0
   18d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d7c:	4252      	negs	r2, r2
   18d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d82:	4770      	bx	lr
   18d84:	4252      	negs	r2, r2
   18d86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d8a:	f000 f82f 	bl	18dec <__udivmoddi4>
   18d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d96:	b004      	add	sp, #16
   18d98:	4240      	negs	r0, r0
   18d9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d9e:	4770      	bx	lr
   18da0:	4252      	negs	r2, r2
   18da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18da6:	f000 f821 	bl	18dec <__udivmoddi4>
   18daa:	f8dd e004 	ldr.w	lr, [sp, #4]
   18dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18db2:	b004      	add	sp, #16
   18db4:	4252      	negs	r2, r2
   18db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18dba:	4770      	bx	lr

00018dbc <__aeabi_uldivmod>:
   18dbc:	b953      	cbnz	r3, 18dd4 <__aeabi_uldivmod+0x18>
   18dbe:	b94a      	cbnz	r2, 18dd4 <__aeabi_uldivmod+0x18>
   18dc0:	2900      	cmp	r1, #0
   18dc2:	bf08      	it	eq
   18dc4:	2800      	cmpeq	r0, #0
   18dc6:	bf1c      	itt	ne
   18dc8:	f04f 31ff 	movne.w	r1, #4294967295
   18dcc:	f04f 30ff 	movne.w	r0, #4294967295
   18dd0:	f000 b97c 	b.w	190cc <__aeabi_idiv0>
   18dd4:	f1ad 0c08 	sub.w	ip, sp, #8
   18dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18ddc:	f000 f806 	bl	18dec <__udivmoddi4>
   18de0:	f8dd e004 	ldr.w	lr, [sp, #4]
   18de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18de8:	b004      	add	sp, #16
   18dea:	4770      	bx	lr

00018dec <__udivmoddi4>:
   18dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18df0:	468c      	mov	ip, r1
   18df2:	9d08      	ldr	r5, [sp, #32]
   18df4:	4604      	mov	r4, r0
   18df6:	468a      	mov	sl, r1
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d14a      	bne.n	18e92 <__udivmoddi4+0xa6>
   18dfc:	428a      	cmp	r2, r1
   18dfe:	4617      	mov	r7, r2
   18e00:	d962      	bls.n	18ec8 <__udivmoddi4+0xdc>
   18e02:	fab2 f682 	clz	r6, r2
   18e06:	b14e      	cbz	r6, 18e1c <__udivmoddi4+0x30>
   18e08:	f1c6 0e20 	rsb	lr, r6, #32
   18e0c:	fa01 f306 	lsl.w	r3, r1, r6
   18e10:	40b7      	lsls	r7, r6
   18e12:	40b4      	lsls	r4, r6
   18e14:	fa20 fe0e 	lsr.w	lr, r0, lr
   18e18:	ea4e 0a03 	orr.w	sl, lr, r3
   18e1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   18e20:	0c23      	lsrs	r3, r4, #16
   18e22:	fa1f f987 	uxth.w	r9, r7
   18e26:	fbba fef8 	udiv	lr, sl, r8
   18e2a:	fb08 aa1e 	mls	sl, r8, lr, sl
   18e2e:	fb0e f209 	mul.w	r2, lr, r9
   18e32:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   18e36:	429a      	cmp	r2, r3
   18e38:	d90b      	bls.n	18e52 <__udivmoddi4+0x66>
   18e3a:	18fb      	adds	r3, r7, r3
   18e3c:	f10e 31ff 	add.w	r1, lr, #4294967295
   18e40:	bf2c      	ite	cs
   18e42:	2001      	movcs	r0, #1
   18e44:	2000      	movcc	r0, #0
   18e46:	429a      	cmp	r2, r3
   18e48:	d902      	bls.n	18e50 <__udivmoddi4+0x64>
   18e4a:	2800      	cmp	r0, #0
   18e4c:	f000 812a 	beq.w	190a4 <__udivmoddi4+0x2b8>
   18e50:	468e      	mov	lr, r1
   18e52:	1a9a      	subs	r2, r3, r2
   18e54:	b2a3      	uxth	r3, r4
   18e56:	fbb2 f0f8 	udiv	r0, r2, r8
   18e5a:	fb08 2210 	mls	r2, r8, r0, r2
   18e5e:	fb00 f909 	mul.w	r9, r0, r9
   18e62:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
   18e66:	45a1      	cmp	r9, r4
   18e68:	d907      	bls.n	18e7a <__udivmoddi4+0x8e>
   18e6a:	193c      	adds	r4, r7, r4
   18e6c:	f100 33ff 	add.w	r3, r0, #4294967295
   18e70:	d202      	bcs.n	18e78 <__udivmoddi4+0x8c>
   18e72:	45a1      	cmp	r9, r4
   18e74:	f200 8110 	bhi.w	19098 <__udivmoddi4+0x2ac>
   18e78:	4618      	mov	r0, r3
   18e7a:	eba4 0409 	sub.w	r4, r4, r9
   18e7e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   18e82:	2100      	movs	r1, #0
   18e84:	b11d      	cbz	r5, 18e8e <__udivmoddi4+0xa2>
   18e86:	40f4      	lsrs	r4, r6
   18e88:	2300      	movs	r3, #0
   18e8a:	e9c5 4300 	strd	r4, r3, [r5]
   18e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e92:	428b      	cmp	r3, r1
   18e94:	d908      	bls.n	18ea8 <__udivmoddi4+0xbc>
   18e96:	2d00      	cmp	r5, #0
   18e98:	f000 80f2 	beq.w	19080 <__udivmoddi4+0x294>
   18e9c:	2100      	movs	r1, #0
   18e9e:	e9c5 0c00 	strd	r0, ip, [r5]
   18ea2:	4608      	mov	r0, r1
   18ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ea8:	fab3 f183 	clz	r1, r3
   18eac:	2900      	cmp	r1, #0
   18eae:	d14e      	bne.n	18f4e <__udivmoddi4+0x162>
   18eb0:	4563      	cmp	r3, ip
   18eb2:	f0c0 80e8 	bcc.w	19086 <__udivmoddi4+0x29a>
   18eb6:	4282      	cmp	r2, r0
   18eb8:	f240 80e5 	bls.w	19086 <__udivmoddi4+0x29a>
   18ebc:	4608      	mov	r0, r1
   18ebe:	2d00      	cmp	r5, #0
   18ec0:	d0e5      	beq.n	18e8e <__udivmoddi4+0xa2>
   18ec2:	e9c5 4a00 	strd	r4, sl, [r5]
   18ec6:	e7e2      	b.n	18e8e <__udivmoddi4+0xa2>
   18ec8:	b902      	cbnz	r2, 18ecc <__udivmoddi4+0xe0>
   18eca:	deff      	udf	#255	; 0xff
   18ecc:	fab2 f682 	clz	r6, r2
   18ed0:	2e00      	cmp	r6, #0
   18ed2:	f040 8099 	bne.w	19008 <__udivmoddi4+0x21c>
   18ed6:	1a8b      	subs	r3, r1, r2
   18ed8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18edc:	fa1f f882 	uxth.w	r8, r2
   18ee0:	2101      	movs	r1, #1
   18ee2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   18ee6:	fbb3 f2fe 	udiv	r2, r3, lr
   18eea:	fb0e 3012 	mls	r0, lr, r2, r3
   18eee:	fb08 f902 	mul.w	r9, r8, r2
   18ef2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
   18ef6:	45e1      	cmp	r9, ip
   18ef8:	d908      	bls.n	18f0c <__udivmoddi4+0x120>
   18efa:	eb17 0c0c 	adds.w	ip, r7, ip
   18efe:	f102 33ff 	add.w	r3, r2, #4294967295
   18f02:	d202      	bcs.n	18f0a <__udivmoddi4+0x11e>
   18f04:	45e1      	cmp	r9, ip
   18f06:	f200 80ca 	bhi.w	1909e <__udivmoddi4+0x2b2>
   18f0a:	461a      	mov	r2, r3
   18f0c:	ebac 0c09 	sub.w	ip, ip, r9
   18f10:	b2a3      	uxth	r3, r4
   18f12:	fbbc f0fe 	udiv	r0, ip, lr
   18f16:	fb0e cc10 	mls	ip, lr, r0, ip
   18f1a:	fb08 f800 	mul.w	r8, r8, r0
   18f1e:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
   18f22:	45a0      	cmp	r8, r4
   18f24:	d90e      	bls.n	18f44 <__udivmoddi4+0x158>
   18f26:	193c      	adds	r4, r7, r4
   18f28:	f100 33ff 	add.w	r3, r0, #4294967295
   18f2c:	bf2c      	ite	cs
   18f2e:	f04f 0c01 	movcs.w	ip, #1
   18f32:	f04f 0c00 	movcc.w	ip, #0
   18f36:	45a0      	cmp	r8, r4
   18f38:	d903      	bls.n	18f42 <__udivmoddi4+0x156>
   18f3a:	f1bc 0f00 	cmp.w	ip, #0
   18f3e:	f000 80a8 	beq.w	19092 <__udivmoddi4+0x2a6>
   18f42:	4618      	mov	r0, r3
   18f44:	eba4 0408 	sub.w	r4, r4, r8
   18f48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   18f4c:	e79a      	b.n	18e84 <__udivmoddi4+0x98>
   18f4e:	f1c1 0420 	rsb	r4, r1, #32
   18f52:	408b      	lsls	r3, r1
   18f54:	fa02 fe01 	lsl.w	lr, r2, r1
   18f58:	fa0c f601 	lsl.w	r6, ip, r1
   18f5c:	40e2      	lsrs	r2, r4
   18f5e:	fa20 f704 	lsr.w	r7, r0, r4
   18f62:	fa2c fc04 	lsr.w	ip, ip, r4
   18f66:	fa00 f801 	lsl.w	r8, r0, r1
   18f6a:	4313      	orrs	r3, r2
   18f6c:	433e      	orrs	r6, r7
   18f6e:	0c1f      	lsrs	r7, r3, #16
   18f70:	0c32      	lsrs	r2, r6, #16
   18f72:	fa1f f983 	uxth.w	r9, r3
   18f76:	fbbc f0f7 	udiv	r0, ip, r7
   18f7a:	fb07 cc10 	mls	ip, r7, r0, ip
   18f7e:	fb00 fa09 	mul.w	sl, r0, r9
   18f82:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   18f86:	45e2      	cmp	sl, ip
   18f88:	d908      	bls.n	18f9c <__udivmoddi4+0x1b0>
   18f8a:	eb13 0c0c 	adds.w	ip, r3, ip
   18f8e:	f100 32ff 	add.w	r2, r0, #4294967295
   18f92:	d202      	bcs.n	18f9a <__udivmoddi4+0x1ae>
   18f94:	45e2      	cmp	sl, ip
   18f96:	f200 8089 	bhi.w	190ac <__udivmoddi4+0x2c0>
   18f9a:	4610      	mov	r0, r2
   18f9c:	ebac 0c0a 	sub.w	ip, ip, sl
   18fa0:	b2b6      	uxth	r6, r6
   18fa2:	fbbc faf7 	udiv	sl, ip, r7
   18fa6:	fb07 cc1a 	mls	ip, r7, sl, ip
   18faa:	fb0a f909 	mul.w	r9, sl, r9
   18fae:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
   18fb2:	4591      	cmp	r9, r2
   18fb4:	d906      	bls.n	18fc4 <__udivmoddi4+0x1d8>
   18fb6:	189a      	adds	r2, r3, r2
   18fb8:	f10a 36ff 	add.w	r6, sl, #4294967295
   18fbc:	d201      	bcs.n	18fc2 <__udivmoddi4+0x1d6>
   18fbe:	4591      	cmp	r9, r2
   18fc0:	d87a      	bhi.n	190b8 <__udivmoddi4+0x2cc>
   18fc2:	46b2      	mov	sl, r6
   18fc4:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
   18fc8:	eba2 0209 	sub.w	r2, r2, r9
   18fcc:	fba0 670e 	umull	r6, r7, r0, lr
   18fd0:	42ba      	cmp	r2, r7
   18fd2:	46b4      	mov	ip, r6
   18fd4:	46b9      	mov	r9, r7
   18fd6:	d302      	bcc.n	18fde <__udivmoddi4+0x1f2>
   18fd8:	d107      	bne.n	18fea <__udivmoddi4+0x1fe>
   18fda:	45b0      	cmp	r8, r6
   18fdc:	d205      	bcs.n	18fea <__udivmoddi4+0x1fe>
   18fde:	ebb6 0c0e 	subs.w	ip, r6, lr
   18fe2:	eb67 0303 	sbc.w	r3, r7, r3
   18fe6:	3801      	subs	r0, #1
   18fe8:	4699      	mov	r9, r3
   18fea:	2d00      	cmp	r5, #0
   18fec:	d06b      	beq.n	190c6 <__udivmoddi4+0x2da>
   18fee:	ebb8 030c 	subs.w	r3, r8, ip
   18ff2:	eb62 0209 	sbc.w	r2, r2, r9
   18ff6:	fa02 f404 	lsl.w	r4, r2, r4
   18ffa:	40cb      	lsrs	r3, r1
   18ffc:	40ca      	lsrs	r2, r1
   18ffe:	2100      	movs	r1, #0
   19000:	431c      	orrs	r4, r3
   19002:	e9c5 4200 	strd	r4, r2, [r5]
   19006:	e742      	b.n	18e8e <__udivmoddi4+0xa2>
   19008:	40b7      	lsls	r7, r6
   1900a:	f1c6 0220 	rsb	r2, r6, #32
   1900e:	fa01 f306 	lsl.w	r3, r1, r6
   19012:	40b4      	lsls	r4, r6
   19014:	fa21 fc02 	lsr.w	ip, r1, r2
   19018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1901c:	fa20 f202 	lsr.w	r2, r0, r2
   19020:	fa1f f887 	uxth.w	r8, r7
   19024:	fbbc f1fe 	udiv	r1, ip, lr
   19028:	431a      	orrs	r2, r3
   1902a:	fb0e cc11 	mls	ip, lr, r1, ip
   1902e:	fb01 f008 	mul.w	r0, r1, r8
   19032:	0c13      	lsrs	r3, r2, #16
   19034:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   19038:	4560      	cmp	r0, ip
   1903a:	d907      	bls.n	1904c <__udivmoddi4+0x260>
   1903c:	eb17 0c0c 	adds.w	ip, r7, ip
   19040:	f101 33ff 	add.w	r3, r1, #4294967295
   19044:	d201      	bcs.n	1904a <__udivmoddi4+0x25e>
   19046:	4560      	cmp	r0, ip
   19048:	d833      	bhi.n	190b2 <__udivmoddi4+0x2c6>
   1904a:	4619      	mov	r1, r3
   1904c:	ebac 0c00 	sub.w	ip, ip, r0
   19050:	b292      	uxth	r2, r2
   19052:	fbbc f0fe 	udiv	r0, ip, lr
   19056:	fb0e cc10 	mls	ip, lr, r0, ip
   1905a:	fb00 f308 	mul.w	r3, r0, r8
   1905e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   19062:	4563      	cmp	r3, ip
   19064:	d907      	bls.n	19076 <__udivmoddi4+0x28a>
   19066:	eb17 0c0c 	adds.w	ip, r7, ip
   1906a:	f100 32ff 	add.w	r2, r0, #4294967295
   1906e:	d201      	bcs.n	19074 <__udivmoddi4+0x288>
   19070:	4563      	cmp	r3, ip
   19072:	d825      	bhi.n	190c0 <__udivmoddi4+0x2d4>
   19074:	4610      	mov	r0, r2
   19076:	ebac 0303 	sub.w	r3, ip, r3
   1907a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1907e:	e730      	b.n	18ee2 <__udivmoddi4+0xf6>
   19080:	4629      	mov	r1, r5
   19082:	4628      	mov	r0, r5
   19084:	e703      	b.n	18e8e <__udivmoddi4+0xa2>
   19086:	1a84      	subs	r4, r0, r2
   19088:	eb6c 0303 	sbc.w	r3, ip, r3
   1908c:	2001      	movs	r0, #1
   1908e:	469a      	mov	sl, r3
   19090:	e715      	b.n	18ebe <__udivmoddi4+0xd2>
   19092:	3802      	subs	r0, #2
   19094:	443c      	add	r4, r7
   19096:	e755      	b.n	18f44 <__udivmoddi4+0x158>
   19098:	3802      	subs	r0, #2
   1909a:	443c      	add	r4, r7
   1909c:	e6ed      	b.n	18e7a <__udivmoddi4+0x8e>
   1909e:	3a02      	subs	r2, #2
   190a0:	44bc      	add	ip, r7
   190a2:	e733      	b.n	18f0c <__udivmoddi4+0x120>
   190a4:	f1ae 0e02 	sub.w	lr, lr, #2
   190a8:	443b      	add	r3, r7
   190aa:	e6d2      	b.n	18e52 <__udivmoddi4+0x66>
   190ac:	3802      	subs	r0, #2
   190ae:	449c      	add	ip, r3
   190b0:	e774      	b.n	18f9c <__udivmoddi4+0x1b0>
   190b2:	3902      	subs	r1, #2
   190b4:	44bc      	add	ip, r7
   190b6:	e7c9      	b.n	1904c <__udivmoddi4+0x260>
   190b8:	f1aa 0a02 	sub.w	sl, sl, #2
   190bc:	441a      	add	r2, r3
   190be:	e781      	b.n	18fc4 <__udivmoddi4+0x1d8>
   190c0:	3802      	subs	r0, #2
   190c2:	44bc      	add	ip, r7
   190c4:	e7d7      	b.n	19076 <__udivmoddi4+0x28a>
   190c6:	4629      	mov	r1, r5
   190c8:	e6e1      	b.n	18e8e <__udivmoddi4+0xa2>
   190ca:	bf00      	nop

000190cc <__aeabi_idiv0>:
   190cc:	4770      	bx	lr
   190ce:	bf00      	nop

000190d0 <ocrypto_bigint_add128>:
   190d0:	b470      	push	{r4, r5, r6}
   190d2:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190da:	185b      	adds	r3, r3, r1
   190dc:	eb54 040c 	adcs.w	r4, r4, ip
   190e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190e4:	414d      	adcs	r5, r1
   190e6:	eb56 060c 	adcs.w	r6, r6, ip
   190ea:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   190ee:	4180      	sbcs	r0, r0
   190f0:	3001      	adds	r0, #1
   190f2:	bc70      	pop	{r4, r5, r6}
   190f4:	4770      	bx	lr

000190f6 <ocrypto_bigint_sub128>:
   190f6:	b470      	push	{r4, r5, r6}
   190f8:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190fc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19100:	1a5b      	subs	r3, r3, r1
   19102:	eb74 040c 	sbcs.w	r4, r4, ip
   19106:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1910a:	418d      	sbcs	r5, r1
   1910c:	eb76 060c 	sbcs.w	r6, r6, ip
   19110:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   19114:	4180      	sbcs	r0, r0
   19116:	4240      	negs	r0, r0
   19118:	bc70      	pop	{r4, r5, r6}
   1911a:	4770      	bx	lr

0001911c <ocrypto_bigint_add256>:
   1911c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19120:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19124:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19128:	185b      	adds	r3, r3, r1
   1912a:	eb54 040c 	adcs.w	r4, r4, ip
   1912e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19132:	414d      	adcs	r5, r1
   19134:	eb56 060c 	adcs.w	r6, r6, ip
   19138:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1913c:	414f      	adcs	r7, r1
   1913e:	eb58 080c 	adcs.w	r8, r8, ip
   19142:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19146:	eb59 0901 	adcs.w	r9, r9, r1
   1914a:	eb5a 0a0c 	adcs.w	sl, sl, ip
   1914e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19152:	4180      	sbcs	r0, r0
   19154:	3001      	adds	r0, #1
   19156:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1915a:	4770      	bx	lr

0001915c <ocrypto_bigint_sub256>:
   1915c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19160:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19164:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19168:	1a5b      	subs	r3, r3, r1
   1916a:	eb74 040c 	sbcs.w	r4, r4, ip
   1916e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19172:	418d      	sbcs	r5, r1
   19174:	eb76 060c 	sbcs.w	r6, r6, ip
   19178:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1917c:	418f      	sbcs	r7, r1
   1917e:	eb78 080c 	sbcs.w	r8, r8, ip
   19182:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19186:	eb79 0901 	sbcs.w	r9, r9, r1
   1918a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   1918e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19192:	4180      	sbcs	r0, r0
   19194:	4240      	negs	r0, r0
   19196:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1919a:	4770      	bx	lr

0001919c <ocrypto_bigint_cadd256>:
   1919c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191a0:	4252      	negs	r2, r2
   191a2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191a6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191aa:	4017      	ands	r7, r2
   191ac:	19db      	adds	r3, r3, r7
   191ae:	ea18 0802 	ands.w	r8, r8, r2
   191b2:	eb54 0408 	adcs.w	r4, r4, r8
   191b6:	ea19 0902 	ands.w	r9, r9, r2
   191ba:	eb55 0509 	adcs.w	r5, r5, r9
   191be:	ea1a 0a02 	ands.w	sl, sl, r2
   191c2:	eb56 060a 	adcs.w	r6, r6, sl
   191c6:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191c8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191cc:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191d0:	4017      	ands	r7, r2
   191d2:	417b      	adcs	r3, r7
   191d4:	ea18 0802 	ands.w	r8, r8, r2
   191d8:	eb54 0408 	adcs.w	r4, r4, r8
   191dc:	ea19 0902 	ands.w	r9, r9, r2
   191e0:	eb55 0509 	adcs.w	r5, r5, r9
   191e4:	ea1a 0a02 	ands.w	sl, sl, r2
   191e8:	eb56 060a 	adcs.w	r6, r6, sl
   191ec:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191ee:	4180      	sbcs	r0, r0
   191f0:	3001      	adds	r0, #1
   191f2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191f6:	4770      	bx	lr

000191f8 <ocrypto_bigint_csub256>:
   191f8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191fc:	4252      	negs	r2, r2
   191fe:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19202:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19206:	4017      	ands	r7, r2
   19208:	1bdb      	subs	r3, r3, r7
   1920a:	ea18 0802 	ands.w	r8, r8, r2
   1920e:	eb74 0408 	sbcs.w	r4, r4, r8
   19212:	ea19 0902 	ands.w	r9, r9, r2
   19216:	eb75 0509 	sbcs.w	r5, r5, r9
   1921a:	ea1a 0a02 	ands.w	sl, sl, r2
   1921e:	eb76 060a 	sbcs.w	r6, r6, sl
   19222:	c078      	stmia	r0!, {r3, r4, r5, r6}
   19224:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19228:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   1922c:	4017      	ands	r7, r2
   1922e:	41bb      	sbcs	r3, r7
   19230:	ea18 0802 	ands.w	r8, r8, r2
   19234:	eb74 0408 	sbcs.w	r4, r4, r8
   19238:	ea19 0902 	ands.w	r9, r9, r2
   1923c:	eb75 0509 	sbcs.w	r5, r5, r9
   19240:	ea1a 0a02 	ands.w	sl, sl, r2
   19244:	eb76 060a 	sbcs.w	r6, r6, sl
   19248:	c078      	stmia	r0!, {r3, r4, r5, r6}
   1924a:	4180      	sbcs	r0, r0
   1924c:	4240      	negs	r0, r0
   1924e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19252:	4770      	bx	lr

00019254 <cswap64>:
   19254:	e890 0030 	ldmia.w	r0, {r4, r5}
   19258:	e891 00c0 	ldmia.w	r1, {r6, r7}
   1925c:	1ba3      	subs	r3, r4, r6
   1925e:	4013      	ands	r3, r2
   19260:	1ae4      	subs	r4, r4, r3
   19262:	18f6      	adds	r6, r6, r3
   19264:	1beb      	subs	r3, r5, r7
   19266:	4013      	ands	r3, r2
   19268:	1aed      	subs	r5, r5, r3
   1926a:	18ff      	adds	r7, r7, r3
   1926c:	c030      	stmia	r0!, {r4, r5}
   1926e:	c1c0      	stmia	r1!, {r6, r7}
   19270:	4770      	bx	lr

00019272 <ocrypto_bigint_cswap256>:
   19272:	b5f0      	push	{r4, r5, r6, r7, lr}
   19274:	4252      	negs	r2, r2
   19276:	f7ff ffed 	bl	19254 <cswap64>
   1927a:	f7ff ffeb 	bl	19254 <cswap64>
   1927e:	f7ff ffe9 	bl	19254 <cswap64>
   19282:	f7ff ffe7 	bl	19254 <cswap64>
   19286:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019288 <ocrypto_bigint_mul128>:
   19288:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1928c:	c93a      	ldmia	r1, {r1, r3, r4, r5}
   1928e:	6816      	ldr	r6, [r2, #0]
   19290:	fba1 9a06 	umull	r9, sl, r1, r6
   19294:	f04f 0c00 	mov.w	ip, #0
   19298:	fbe3 ac06 	umlal	sl, ip, r3, r6
   1929c:	f04f 0700 	mov.w	r7, #0
   192a0:	fbe4 c706 	umlal	ip, r7, r4, r6
   192a4:	f04f 0800 	mov.w	r8, #0
   192a8:	fbe5 7806 	umlal	r7, r8, r5, r6
   192ac:	f840 9b04 	str.w	r9, [r0], #4
   192b0:	6856      	ldr	r6, [r2, #4]
   192b2:	f04f 0900 	mov.w	r9, #0
   192b6:	fbe1 a906 	umlal	sl, r9, r1, r6
   192ba:	eb1c 0c09 	adds.w	ip, ip, r9
   192be:	f04f 0900 	mov.w	r9, #0
   192c2:	eb49 0909 	adc.w	r9, r9, r9
   192c6:	fbe3 c906 	umlal	ip, r9, r3, r6
   192ca:	eb17 0709 	adds.w	r7, r7, r9
   192ce:	f04f 0900 	mov.w	r9, #0
   192d2:	eb49 0909 	adc.w	r9, r9, r9
   192d6:	fbe4 7906 	umlal	r7, r9, r4, r6
   192da:	eb18 0809 	adds.w	r8, r8, r9
   192de:	f04f 0900 	mov.w	r9, #0
   192e2:	eb49 0909 	adc.w	r9, r9, r9
   192e6:	fbe5 8906 	umlal	r8, r9, r5, r6
   192ea:	f840 ab04 	str.w	sl, [r0], #4
   192ee:	6896      	ldr	r6, [r2, #8]
   192f0:	f04f 0a00 	mov.w	sl, #0
   192f4:	fbe1 ca06 	umlal	ip, sl, r1, r6
   192f8:	eb17 070a 	adds.w	r7, r7, sl
   192fc:	f04f 0a00 	mov.w	sl, #0
   19300:	eb4a 0a0a 	adc.w	sl, sl, sl
   19304:	fbe3 7a06 	umlal	r7, sl, r3, r6
   19308:	eb18 080a 	adds.w	r8, r8, sl
   1930c:	f04f 0a00 	mov.w	sl, #0
   19310:	eb4a 0a0a 	adc.w	sl, sl, sl
   19314:	fbe4 8a06 	umlal	r8, sl, r4, r6
   19318:	eb19 090a 	adds.w	r9, r9, sl
   1931c:	f04f 0a00 	mov.w	sl, #0
   19320:	eb4a 0a0a 	adc.w	sl, sl, sl
   19324:	fbe5 9a06 	umlal	r9, sl, r5, r6
   19328:	f840 cb04 	str.w	ip, [r0], #4
   1932c:	68d6      	ldr	r6, [r2, #12]
   1932e:	f04f 0c00 	mov.w	ip, #0
   19332:	fbe1 7c06 	umlal	r7, ip, r1, r6
   19336:	eb18 080c 	adds.w	r8, r8, ip
   1933a:	f04f 0c00 	mov.w	ip, #0
   1933e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19342:	fbe3 8c06 	umlal	r8, ip, r3, r6
   19346:	eb19 090c 	adds.w	r9, r9, ip
   1934a:	f04f 0c00 	mov.w	ip, #0
   1934e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19352:	fbe4 9c06 	umlal	r9, ip, r4, r6
   19356:	eb1a 0a0c 	adds.w	sl, sl, ip
   1935a:	f04f 0c00 	mov.w	ip, #0
   1935e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19362:	fbe5 ac06 	umlal	sl, ip, r5, r6
   19366:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
   1936a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1936e:	4770      	bx	lr

00019370 <ocrypto_bigint_sqr256>:
   19370:	460a      	mov	r2, r1

00019372 <ocrypto_bigint_mul256>:
   19372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19376:	ec41 0a14 	vmov	s8, s9, r0, r1
   1937a:	ec92 0a08 	vldmia	r2, {s0-s7}
   1937e:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19380:	ee10 0a10 	vmov	r0, s0
   19384:	fba1 7800 	umull	r7, r8, r1, r0
   19388:	f04f 0900 	mov.w	r9, #0
   1938c:	fbe2 8900 	umlal	r8, r9, r2, r0
   19390:	f04f 0a00 	mov.w	sl, #0
   19394:	fbe3 9a00 	umlal	r9, sl, r3, r0
   19398:	f04f 0b00 	mov.w	fp, #0
   1939c:	fbe4 ab00 	umlal	sl, fp, r4, r0
   193a0:	ee12 0a10 	vmov	r0, s4
   193a4:	f04f 0c00 	mov.w	ip, #0
   193a8:	fbe1 bc00 	umlal	fp, ip, r1, r0
   193ac:	f04f 0e00 	mov.w	lr, #0
   193b0:	fbe2 ce00 	umlal	ip, lr, r2, r0
   193b4:	f04f 0500 	mov.w	r5, #0
   193b8:	fbe3 e500 	umlal	lr, r5, r3, r0
   193bc:	f04f 0600 	mov.w	r6, #0
   193c0:	fbe4 5600 	umlal	r5, r6, r4, r0
   193c4:	ee05 7a10 	vmov	s10, r7
   193c8:	ee10 0a90 	vmov	r0, s1
   193cc:	f04f 0700 	mov.w	r7, #0
   193d0:	fbe1 8700 	umlal	r8, r7, r1, r0
   193d4:	eb19 0907 	adds.w	r9, r9, r7
   193d8:	f04f 0700 	mov.w	r7, #0
   193dc:	eb47 0707 	adc.w	r7, r7, r7
   193e0:	fbe2 9700 	umlal	r9, r7, r2, r0
   193e4:	eb1a 0a07 	adds.w	sl, sl, r7
   193e8:	f04f 0700 	mov.w	r7, #0
   193ec:	eb47 0707 	adc.w	r7, r7, r7
   193f0:	fbe3 a700 	umlal	sl, r7, r3, r0
   193f4:	eb1b 0b07 	adds.w	fp, fp, r7
   193f8:	f04f 0700 	mov.w	r7, #0
   193fc:	eb47 0707 	adc.w	r7, r7, r7
   19400:	fbe4 b700 	umlal	fp, r7, r4, r0
   19404:	ee12 0a90 	vmov	r0, s5
   19408:	eb1c 0c07 	adds.w	ip, ip, r7
   1940c:	f04f 0700 	mov.w	r7, #0
   19410:	eb47 0707 	adc.w	r7, r7, r7
   19414:	fbe1 c700 	umlal	ip, r7, r1, r0
   19418:	eb1e 0e07 	adds.w	lr, lr, r7
   1941c:	f04f 0700 	mov.w	r7, #0
   19420:	eb47 0707 	adc.w	r7, r7, r7
   19424:	fbe2 e700 	umlal	lr, r7, r2, r0
   19428:	19ed      	adds	r5, r5, r7
   1942a:	f04f 0700 	mov.w	r7, #0
   1942e:	eb47 0707 	adc.w	r7, r7, r7
   19432:	fbe3 5700 	umlal	r5, r7, r3, r0
   19436:	19f6      	adds	r6, r6, r7
   19438:	f04f 0700 	mov.w	r7, #0
   1943c:	eb47 0707 	adc.w	r7, r7, r7
   19440:	fbe4 6700 	umlal	r6, r7, r4, r0
   19444:	ee05 8a90 	vmov	s11, r8
   19448:	ee11 0a10 	vmov	r0, s2
   1944c:	f04f 0800 	mov.w	r8, #0
   19450:	fbe1 9800 	umlal	r9, r8, r1, r0
   19454:	eb1a 0a08 	adds.w	sl, sl, r8
   19458:	f04f 0800 	mov.w	r8, #0
   1945c:	eb48 0808 	adc.w	r8, r8, r8
   19460:	fbe2 a800 	umlal	sl, r8, r2, r0
   19464:	eb1b 0b08 	adds.w	fp, fp, r8
   19468:	f04f 0800 	mov.w	r8, #0
   1946c:	eb48 0808 	adc.w	r8, r8, r8
   19470:	fbe3 b800 	umlal	fp, r8, r3, r0
   19474:	eb1c 0c08 	adds.w	ip, ip, r8
   19478:	f04f 0800 	mov.w	r8, #0
   1947c:	eb48 0808 	adc.w	r8, r8, r8
   19480:	fbe4 c800 	umlal	ip, r8, r4, r0
   19484:	ee13 0a10 	vmov	r0, s6
   19488:	eb1e 0e08 	adds.w	lr, lr, r8
   1948c:	f04f 0800 	mov.w	r8, #0
   19490:	eb48 0808 	adc.w	r8, r8, r8
   19494:	fbe1 e800 	umlal	lr, r8, r1, r0
   19498:	eb15 0508 	adds.w	r5, r5, r8
   1949c:	f04f 0800 	mov.w	r8, #0
   194a0:	eb48 0808 	adc.w	r8, r8, r8
   194a4:	fbe2 5800 	umlal	r5, r8, r2, r0
   194a8:	eb16 0608 	adds.w	r6, r6, r8
   194ac:	f04f 0800 	mov.w	r8, #0
   194b0:	eb48 0808 	adc.w	r8, r8, r8
   194b4:	fbe3 6800 	umlal	r6, r8, r3, r0
   194b8:	eb17 0708 	adds.w	r7, r7, r8
   194bc:	f04f 0800 	mov.w	r8, #0
   194c0:	eb48 0808 	adc.w	r8, r8, r8
   194c4:	fbe4 7800 	umlal	r7, r8, r4, r0
   194c8:	ee06 9a10 	vmov	s12, r9
   194cc:	ee11 0a90 	vmov	r0, s3
   194d0:	f04f 0900 	mov.w	r9, #0
   194d4:	fbe1 a900 	umlal	sl, r9, r1, r0
   194d8:	eb1b 0b09 	adds.w	fp, fp, r9
   194dc:	f04f 0900 	mov.w	r9, #0
   194e0:	eb49 0909 	adc.w	r9, r9, r9
   194e4:	fbe2 b900 	umlal	fp, r9, r2, r0
   194e8:	eb1c 0c09 	adds.w	ip, ip, r9
   194ec:	f04f 0900 	mov.w	r9, #0
   194f0:	eb49 0909 	adc.w	r9, r9, r9
   194f4:	fbe3 c900 	umlal	ip, r9, r3, r0
   194f8:	eb1e 0e09 	adds.w	lr, lr, r9
   194fc:	f04f 0900 	mov.w	r9, #0
   19500:	eb49 0909 	adc.w	r9, r9, r9
   19504:	fbe4 e900 	umlal	lr, r9, r4, r0
   19508:	ee13 0a90 	vmov	r0, s7
   1950c:	eb15 0509 	adds.w	r5, r5, r9
   19510:	f04f 0900 	mov.w	r9, #0
   19514:	eb49 0909 	adc.w	r9, r9, r9
   19518:	fbe1 5900 	umlal	r5, r9, r1, r0
   1951c:	eb16 0609 	adds.w	r6, r6, r9
   19520:	f04f 0900 	mov.w	r9, #0
   19524:	eb49 0909 	adc.w	r9, r9, r9
   19528:	fbe2 6900 	umlal	r6, r9, r2, r0
   1952c:	eb17 0709 	adds.w	r7, r7, r9
   19530:	f04f 0900 	mov.w	r9, #0
   19534:	eb49 0909 	adc.w	r9, r9, r9
   19538:	fbe3 7900 	umlal	r7, r9, r3, r0
   1953c:	eb18 0809 	adds.w	r8, r8, r9
   19540:	f04f 0900 	mov.w	r9, #0
   19544:	eb49 0909 	adc.w	r9, r9, r9
   19548:	fbe4 8900 	umlal	r8, r9, r4, r0
   1954c:	ee06 aa90 	vmov	s13, sl
   19550:	ee14 1a90 	vmov	r1, s9
   19554:	f101 0110 	add.w	r1, r1, #16
   19558:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   1955a:	ee10 0a10 	vmov	r0, s0
   1955e:	f04f 0a00 	mov.w	sl, #0
   19562:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19566:	eb1c 0c0a 	adds.w	ip, ip, sl
   1956a:	f04f 0a00 	mov.w	sl, #0
   1956e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19572:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19576:	eb1e 0e0a 	adds.w	lr, lr, sl
   1957a:	f04f 0a00 	mov.w	sl, #0
   1957e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19582:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19586:	eb15 050a 	adds.w	r5, r5, sl
   1958a:	f04f 0a00 	mov.w	sl, #0
   1958e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19592:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19596:	ee12 0a10 	vmov	r0, s4
   1959a:	eb16 060a 	adds.w	r6, r6, sl
   1959e:	f04f 0a00 	mov.w	sl, #0
   195a2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195a6:	fbe1 6a00 	umlal	r6, sl, r1, r0
   195aa:	eb17 070a 	adds.w	r7, r7, sl
   195ae:	f04f 0a00 	mov.w	sl, #0
   195b2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195b6:	fbe2 7a00 	umlal	r7, sl, r2, r0
   195ba:	eb18 080a 	adds.w	r8, r8, sl
   195be:	f04f 0a00 	mov.w	sl, #0
   195c2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195c6:	fbe3 8a00 	umlal	r8, sl, r3, r0
   195ca:	eb19 090a 	adds.w	r9, r9, sl
   195ce:	f04f 0a00 	mov.w	sl, #0
   195d2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195d6:	fbe4 9a00 	umlal	r9, sl, r4, r0
   195da:	ee07 ba10 	vmov	s14, fp
   195de:	ee10 0a90 	vmov	r0, s1
   195e2:	f04f 0b00 	mov.w	fp, #0
   195e6:	fbe1 cb00 	umlal	ip, fp, r1, r0
   195ea:	eb1e 0e0b 	adds.w	lr, lr, fp
   195ee:	f04f 0b00 	mov.w	fp, #0
   195f2:	eb4b 0b0b 	adc.w	fp, fp, fp
   195f6:	fbe2 eb00 	umlal	lr, fp, r2, r0
   195fa:	eb15 050b 	adds.w	r5, r5, fp
   195fe:	f04f 0b00 	mov.w	fp, #0
   19602:	eb4b 0b0b 	adc.w	fp, fp, fp
   19606:	fbe3 5b00 	umlal	r5, fp, r3, r0
   1960a:	eb16 060b 	adds.w	r6, r6, fp
   1960e:	f04f 0b00 	mov.w	fp, #0
   19612:	eb4b 0b0b 	adc.w	fp, fp, fp
   19616:	fbe4 6b00 	umlal	r6, fp, r4, r0
   1961a:	ee12 0a90 	vmov	r0, s5
   1961e:	eb17 070b 	adds.w	r7, r7, fp
   19622:	f04f 0b00 	mov.w	fp, #0
   19626:	eb4b 0b0b 	adc.w	fp, fp, fp
   1962a:	fbe1 7b00 	umlal	r7, fp, r1, r0
   1962e:	eb18 080b 	adds.w	r8, r8, fp
   19632:	f04f 0b00 	mov.w	fp, #0
   19636:	eb4b 0b0b 	adc.w	fp, fp, fp
   1963a:	fbe2 8b00 	umlal	r8, fp, r2, r0
   1963e:	eb19 090b 	adds.w	r9, r9, fp
   19642:	f04f 0b00 	mov.w	fp, #0
   19646:	eb4b 0b0b 	adc.w	fp, fp, fp
   1964a:	fbe3 9b00 	umlal	r9, fp, r3, r0
   1964e:	eb1a 0a0b 	adds.w	sl, sl, fp
   19652:	f04f 0b00 	mov.w	fp, #0
   19656:	eb4b 0b0b 	adc.w	fp, fp, fp
   1965a:	fbe4 ab00 	umlal	sl, fp, r4, r0
   1965e:	ee07 ca90 	vmov	s15, ip
   19662:	ee11 0a10 	vmov	r0, s2
   19666:	f04f 0c00 	mov.w	ip, #0
   1966a:	fbe1 ec00 	umlal	lr, ip, r1, r0
   1966e:	eb15 050c 	adds.w	r5, r5, ip
   19672:	f04f 0c00 	mov.w	ip, #0
   19676:	eb4c 0c0c 	adc.w	ip, ip, ip
   1967a:	fbe2 5c00 	umlal	r5, ip, r2, r0
   1967e:	eb16 060c 	adds.w	r6, r6, ip
   19682:	f04f 0c00 	mov.w	ip, #0
   19686:	eb4c 0c0c 	adc.w	ip, ip, ip
   1968a:	fbe3 6c00 	umlal	r6, ip, r3, r0
   1968e:	eb17 070c 	adds.w	r7, r7, ip
   19692:	f04f 0c00 	mov.w	ip, #0
   19696:	eb4c 0c0c 	adc.w	ip, ip, ip
   1969a:	fbe4 7c00 	umlal	r7, ip, r4, r0
   1969e:	ee13 0a10 	vmov	r0, s6
   196a2:	eb18 080c 	adds.w	r8, r8, ip
   196a6:	f04f 0c00 	mov.w	ip, #0
   196aa:	eb4c 0c0c 	adc.w	ip, ip, ip
   196ae:	fbe1 8c00 	umlal	r8, ip, r1, r0
   196b2:	eb19 090c 	adds.w	r9, r9, ip
   196b6:	f04f 0c00 	mov.w	ip, #0
   196ba:	eb4c 0c0c 	adc.w	ip, ip, ip
   196be:	fbe2 9c00 	umlal	r9, ip, r2, r0
   196c2:	eb1a 0a0c 	adds.w	sl, sl, ip
   196c6:	f04f 0c00 	mov.w	ip, #0
   196ca:	eb4c 0c0c 	adc.w	ip, ip, ip
   196ce:	fbe3 ac00 	umlal	sl, ip, r3, r0
   196d2:	eb1b 0b0c 	adds.w	fp, fp, ip
   196d6:	f04f 0c00 	mov.w	ip, #0
   196da:	eb4c 0c0c 	adc.w	ip, ip, ip
   196de:	fbe4 bc00 	umlal	fp, ip, r4, r0
   196e2:	ee08 ea10 	vmov	s16, lr
   196e6:	ee11 0a90 	vmov	r0, s3
   196ea:	f04f 0e00 	mov.w	lr, #0
   196ee:	fbe1 5e00 	umlal	r5, lr, r1, r0
   196f2:	eb16 060e 	adds.w	r6, r6, lr
   196f6:	f04f 0e00 	mov.w	lr, #0
   196fa:	eb4e 0e0e 	adc.w	lr, lr, lr
   196fe:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19702:	eb17 070e 	adds.w	r7, r7, lr
   19706:	f04f 0e00 	mov.w	lr, #0
   1970a:	eb4e 0e0e 	adc.w	lr, lr, lr
   1970e:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19712:	eb18 080e 	adds.w	r8, r8, lr
   19716:	f04f 0e00 	mov.w	lr, #0
   1971a:	eb4e 0e0e 	adc.w	lr, lr, lr
   1971e:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19722:	ee13 0a90 	vmov	r0, s7
   19726:	eb19 090e 	adds.w	r9, r9, lr
   1972a:	f04f 0e00 	mov.w	lr, #0
   1972e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19732:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19736:	eb1a 0a0e 	adds.w	sl, sl, lr
   1973a:	f04f 0e00 	mov.w	lr, #0
   1973e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19742:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19746:	eb1b 0b0e 	adds.w	fp, fp, lr
   1974a:	f04f 0e00 	mov.w	lr, #0
   1974e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19752:	fbe3 be00 	umlal	fp, lr, r3, r0
   19756:	eb1c 0c0e 	adds.w	ip, ip, lr
   1975a:	f04f 0e00 	mov.w	lr, #0
   1975e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19762:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19766:	ee14 0a10 	vmov	r0, s8
   1976a:	eca0 5a07 	vstmia	r0!, {s10-s16}
   1976e:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
   19772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19776:	bf00      	nop

00019778 <ocrypto_constant_time_equal>:
   19778:	b430      	push	{r4, r5}
   1977a:	f04f 0300 	mov.w	r3, #0

0001977e <constant_time_equal_loop>:
   1977e:	f810 4b01 	ldrb.w	r4, [r0], #1
   19782:	f811 5b01 	ldrb.w	r5, [r1], #1
   19786:	3a01      	subs	r2, #1
   19788:	ea84 0405 	eor.w	r4, r4, r5
   1978c:	ea43 0304 	orr.w	r3, r3, r4
   19790:	d1f5      	bne.n	1977e <constant_time_equal_loop>
   19792:	f1a3 0301 	sub.w	r3, r3, #1
   19796:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   1979a:	bc30      	pop	{r4, r5}
   1979c:	4770      	bx	lr

0001979e <ocrypto_constant_time_is_zero>:
   1979e:	f04f 0300 	mov.w	r3, #0

000197a2 <constant_time_is_zero_loop>:
   197a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   197a6:	3901      	subs	r1, #1
   197a8:	ea43 0302 	orr.w	r3, r3, r2
   197ac:	d1f9      	bne.n	197a2 <constant_time_is_zero_loop>
   197ae:	f1a3 0301 	sub.w	r3, r3, #1
   197b2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   197b6:	4770      	bx	lr

000197b8 <ocrypto_constant_time_copy>:
   197b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   197bc:	f800 3b01 	strb.w	r3, [r0], #1
   197c0:	3a01      	subs	r2, #1
   197c2:	d1f9      	bne.n	197b8 <ocrypto_constant_time_copy>
   197c4:	4770      	bx	lr

000197c6 <ocrypto_constant_time_fill_zero>:
   197c6:	2200      	movs	r2, #0

000197c8 <constant_time_fill_zero_loop>:
   197c8:	f800 2b01 	strb.w	r2, [r0], #1
   197cc:	3901      	subs	r1, #1
   197ce:	d1fb      	bne.n	197c8 <constant_time_fill_zero_loop>
   197d0:	4770      	bx	lr
   197d2:	bf00      	nop

000197d4 <ocrypto_mod_p256_add>:
   197d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   197d8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   197dc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197e0:	185b      	adds	r3, r3, r1
   197e2:	eb54 040c 	adcs.w	r4, r4, ip
   197e6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197ea:	414d      	adcs	r5, r1
   197ec:	eb56 060c 	adcs.w	r6, r6, ip
   197f0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197f4:	414f      	adcs	r7, r1
   197f6:	eb58 080c 	adcs.w	r8, r8, ip
   197fa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197fe:	eb59 0901 	adcs.w	r9, r9, r1
   19802:	eb5a 0a0c 	adcs.w	sl, sl, ip
   19806:	4189      	sbcs	r1, r1
   19808:	f1b3 33ff 	subs.w	r3, r3, #4294967295
   1980c:	f174 34ff 	sbcs.w	r4, r4, #4294967295
   19810:	f175 35ff 	sbcs.w	r5, r5, #4294967295
   19814:	f176 0600 	sbcs.w	r6, r6, #0
   19818:	f177 0700 	sbcs.w	r7, r7, #0
   1981c:	f178 0800 	sbcs.w	r8, r8, #0
   19820:	f179 0901 	sbcs.w	r9, r9, #1
   19824:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
   19828:	f151 0100 	adcs.w	r1, r1, #0
   1982c:	424a      	negs	r2, r1
   1982e:	185b      	adds	r3, r3, r1
   19830:	414c      	adcs	r4, r1
   19832:	414d      	adcs	r5, r1
   19834:	f156 0600 	adcs.w	r6, r6, #0
   19838:	f157 0700 	adcs.w	r7, r7, #0
   1983c:	f158 0800 	adcs.w	r8, r8, #0
   19840:	eb59 0902 	adcs.w	r9, r9, r2
   19844:	eb5a 0a01 	adcs.w	sl, sl, r1
   19848:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1984c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19850:	4770      	bx	lr

00019852 <ocrypto_mod_p256_sub>:
   19852:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19856:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   1985a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1985e:	1a5b      	subs	r3, r3, r1
   19860:	eb74 040c 	sbcs.w	r4, r4, ip
   19864:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19868:	418d      	sbcs	r5, r1
   1986a:	eb76 060c 	sbcs.w	r6, r6, ip
   1986e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19872:	418f      	sbcs	r7, r1
   19874:	eb78 080c 	sbcs.w	r8, r8, ip
   19878:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1987c:	eb79 0901 	sbcs.w	r9, r9, r1
   19880:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   19884:	4189      	sbcs	r1, r1
   19886:	424a      	negs	r2, r1
   19888:	185b      	adds	r3, r3, r1
   1988a:	414c      	adcs	r4, r1
   1988c:	414d      	adcs	r5, r1
   1988e:	f156 0600 	adcs.w	r6, r6, #0
   19892:	f157 0700 	adcs.w	r7, r7, #0
   19896:	f158 0800 	adcs.w	r8, r8, #0
   1989a:	eb59 0902 	adcs.w	r9, r9, r2
   1989e:	eb5a 0a01 	adcs.w	sl, sl, r1
   198a2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   198a6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   198aa:	4770      	bx	lr

000198ac <ocrypto_mod_p256_square>:
   198ac:	460a      	mov	r2, r1

000198ae <ocrypto_mod_p256_mul>:
   198ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198b2:	ec41 0a14 	vmov	s8, s9, r0, r1
   198b6:	ec92 0a08 	vldmia	r2, {s0-s7}
   198ba:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   198bc:	ee10 0a10 	vmov	r0, s0
   198c0:	fba1 7800 	umull	r7, r8, r1, r0
   198c4:	f04f 0900 	mov.w	r9, #0
   198c8:	fbe2 8900 	umlal	r8, r9, r2, r0
   198cc:	f04f 0a00 	mov.w	sl, #0
   198d0:	fbe3 9a00 	umlal	r9, sl, r3, r0
   198d4:	f04f 0b00 	mov.w	fp, #0
   198d8:	fbe4 ab00 	umlal	sl, fp, r4, r0
   198dc:	ee12 0a10 	vmov	r0, s4
   198e0:	f04f 0c00 	mov.w	ip, #0
   198e4:	fbe1 bc00 	umlal	fp, ip, r1, r0
   198e8:	f04f 0e00 	mov.w	lr, #0
   198ec:	fbe2 ce00 	umlal	ip, lr, r2, r0
   198f0:	f04f 0500 	mov.w	r5, #0
   198f4:	fbe3 e500 	umlal	lr, r5, r3, r0
   198f8:	f04f 0600 	mov.w	r6, #0
   198fc:	fbe4 5600 	umlal	r5, r6, r4, r0
   19900:	ee05 7a10 	vmov	s10, r7
   19904:	ee10 0a90 	vmov	r0, s1
   19908:	f04f 0700 	mov.w	r7, #0
   1990c:	fbe1 8700 	umlal	r8, r7, r1, r0
   19910:	eb19 0907 	adds.w	r9, r9, r7
   19914:	f04f 0700 	mov.w	r7, #0
   19918:	eb47 0707 	adc.w	r7, r7, r7
   1991c:	fbe2 9700 	umlal	r9, r7, r2, r0
   19920:	eb1a 0a07 	adds.w	sl, sl, r7
   19924:	f04f 0700 	mov.w	r7, #0
   19928:	eb47 0707 	adc.w	r7, r7, r7
   1992c:	fbe3 a700 	umlal	sl, r7, r3, r0
   19930:	eb1b 0b07 	adds.w	fp, fp, r7
   19934:	f04f 0700 	mov.w	r7, #0
   19938:	eb47 0707 	adc.w	r7, r7, r7
   1993c:	fbe4 b700 	umlal	fp, r7, r4, r0
   19940:	ee12 0a90 	vmov	r0, s5
   19944:	eb1c 0c07 	adds.w	ip, ip, r7
   19948:	f04f 0700 	mov.w	r7, #0
   1994c:	eb47 0707 	adc.w	r7, r7, r7
   19950:	fbe1 c700 	umlal	ip, r7, r1, r0
   19954:	eb1e 0e07 	adds.w	lr, lr, r7
   19958:	f04f 0700 	mov.w	r7, #0
   1995c:	eb47 0707 	adc.w	r7, r7, r7
   19960:	fbe2 e700 	umlal	lr, r7, r2, r0
   19964:	19ed      	adds	r5, r5, r7
   19966:	f04f 0700 	mov.w	r7, #0
   1996a:	eb47 0707 	adc.w	r7, r7, r7
   1996e:	fbe3 5700 	umlal	r5, r7, r3, r0
   19972:	19f6      	adds	r6, r6, r7
   19974:	f04f 0700 	mov.w	r7, #0
   19978:	eb47 0707 	adc.w	r7, r7, r7
   1997c:	fbe4 6700 	umlal	r6, r7, r4, r0
   19980:	ee05 8a90 	vmov	s11, r8
   19984:	ee11 0a10 	vmov	r0, s2
   19988:	f04f 0800 	mov.w	r8, #0
   1998c:	fbe1 9800 	umlal	r9, r8, r1, r0
   19990:	eb1a 0a08 	adds.w	sl, sl, r8
   19994:	f04f 0800 	mov.w	r8, #0
   19998:	eb48 0808 	adc.w	r8, r8, r8
   1999c:	fbe2 a800 	umlal	sl, r8, r2, r0
   199a0:	eb1b 0b08 	adds.w	fp, fp, r8
   199a4:	f04f 0800 	mov.w	r8, #0
   199a8:	eb48 0808 	adc.w	r8, r8, r8
   199ac:	fbe3 b800 	umlal	fp, r8, r3, r0
   199b0:	eb1c 0c08 	adds.w	ip, ip, r8
   199b4:	f04f 0800 	mov.w	r8, #0
   199b8:	eb48 0808 	adc.w	r8, r8, r8
   199bc:	fbe4 c800 	umlal	ip, r8, r4, r0
   199c0:	ee13 0a10 	vmov	r0, s6
   199c4:	eb1e 0e08 	adds.w	lr, lr, r8
   199c8:	f04f 0800 	mov.w	r8, #0
   199cc:	eb48 0808 	adc.w	r8, r8, r8
   199d0:	fbe1 e800 	umlal	lr, r8, r1, r0
   199d4:	eb15 0508 	adds.w	r5, r5, r8
   199d8:	f04f 0800 	mov.w	r8, #0
   199dc:	eb48 0808 	adc.w	r8, r8, r8
   199e0:	fbe2 5800 	umlal	r5, r8, r2, r0
   199e4:	eb16 0608 	adds.w	r6, r6, r8
   199e8:	f04f 0800 	mov.w	r8, #0
   199ec:	eb48 0808 	adc.w	r8, r8, r8
   199f0:	fbe3 6800 	umlal	r6, r8, r3, r0
   199f4:	eb17 0708 	adds.w	r7, r7, r8
   199f8:	f04f 0800 	mov.w	r8, #0
   199fc:	eb48 0808 	adc.w	r8, r8, r8
   19a00:	fbe4 7800 	umlal	r7, r8, r4, r0
   19a04:	ee06 9a10 	vmov	s12, r9
   19a08:	ee11 0a90 	vmov	r0, s3
   19a0c:	f04f 0900 	mov.w	r9, #0
   19a10:	fbe1 a900 	umlal	sl, r9, r1, r0
   19a14:	eb1b 0b09 	adds.w	fp, fp, r9
   19a18:	f04f 0900 	mov.w	r9, #0
   19a1c:	eb49 0909 	adc.w	r9, r9, r9
   19a20:	fbe2 b900 	umlal	fp, r9, r2, r0
   19a24:	eb1c 0c09 	adds.w	ip, ip, r9
   19a28:	f04f 0900 	mov.w	r9, #0
   19a2c:	eb49 0909 	adc.w	r9, r9, r9
   19a30:	fbe3 c900 	umlal	ip, r9, r3, r0
   19a34:	eb1e 0e09 	adds.w	lr, lr, r9
   19a38:	f04f 0900 	mov.w	r9, #0
   19a3c:	eb49 0909 	adc.w	r9, r9, r9
   19a40:	fbe4 e900 	umlal	lr, r9, r4, r0
   19a44:	ee13 0a90 	vmov	r0, s7
   19a48:	eb15 0509 	adds.w	r5, r5, r9
   19a4c:	f04f 0900 	mov.w	r9, #0
   19a50:	eb49 0909 	adc.w	r9, r9, r9
   19a54:	fbe1 5900 	umlal	r5, r9, r1, r0
   19a58:	eb16 0609 	adds.w	r6, r6, r9
   19a5c:	f04f 0900 	mov.w	r9, #0
   19a60:	eb49 0909 	adc.w	r9, r9, r9
   19a64:	fbe2 6900 	umlal	r6, r9, r2, r0
   19a68:	eb17 0709 	adds.w	r7, r7, r9
   19a6c:	f04f 0900 	mov.w	r9, #0
   19a70:	eb49 0909 	adc.w	r9, r9, r9
   19a74:	fbe3 7900 	umlal	r7, r9, r3, r0
   19a78:	eb18 0809 	adds.w	r8, r8, r9
   19a7c:	f04f 0900 	mov.w	r9, #0
   19a80:	eb49 0909 	adc.w	r9, r9, r9
   19a84:	fbe4 8900 	umlal	r8, r9, r4, r0
   19a88:	ee06 aa90 	vmov	s13, sl
   19a8c:	ee14 1a90 	vmov	r1, s9
   19a90:	f101 0110 	add.w	r1, r1, #16
   19a94:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19a96:	ee10 0a10 	vmov	r0, s0
   19a9a:	f04f 0a00 	mov.w	sl, #0
   19a9e:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19aa2:	eb1c 0c0a 	adds.w	ip, ip, sl
   19aa6:	f04f 0a00 	mov.w	sl, #0
   19aaa:	eb4a 0a0a 	adc.w	sl, sl, sl
   19aae:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19ab2:	eb1e 0e0a 	adds.w	lr, lr, sl
   19ab6:	f04f 0a00 	mov.w	sl, #0
   19aba:	eb4a 0a0a 	adc.w	sl, sl, sl
   19abe:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19ac2:	eb15 050a 	adds.w	r5, r5, sl
   19ac6:	f04f 0a00 	mov.w	sl, #0
   19aca:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ace:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19ad2:	ee12 0a10 	vmov	r0, s4
   19ad6:	eb16 060a 	adds.w	r6, r6, sl
   19ada:	f04f 0a00 	mov.w	sl, #0
   19ade:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ae2:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19ae6:	eb17 070a 	adds.w	r7, r7, sl
   19aea:	f04f 0a00 	mov.w	sl, #0
   19aee:	eb4a 0a0a 	adc.w	sl, sl, sl
   19af2:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19af6:	eb18 080a 	adds.w	r8, r8, sl
   19afa:	f04f 0a00 	mov.w	sl, #0
   19afe:	eb4a 0a0a 	adc.w	sl, sl, sl
   19b02:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19b06:	eb19 090a 	adds.w	r9, r9, sl
   19b0a:	f04f 0a00 	mov.w	sl, #0
   19b0e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19b12:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19b16:	ee07 ba10 	vmov	s14, fp
   19b1a:	ee10 0a90 	vmov	r0, s1
   19b1e:	f04f 0b00 	mov.w	fp, #0
   19b22:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19b26:	eb1e 0e0b 	adds.w	lr, lr, fp
   19b2a:	f04f 0b00 	mov.w	fp, #0
   19b2e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b32:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19b36:	eb15 050b 	adds.w	r5, r5, fp
   19b3a:	f04f 0b00 	mov.w	fp, #0
   19b3e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b42:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19b46:	eb16 060b 	adds.w	r6, r6, fp
   19b4a:	f04f 0b00 	mov.w	fp, #0
   19b4e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b52:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19b56:	ee12 0a90 	vmov	r0, s5
   19b5a:	eb17 070b 	adds.w	r7, r7, fp
   19b5e:	f04f 0b00 	mov.w	fp, #0
   19b62:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b66:	fbe1 7b00 	umlal	r7, fp, r1, r0
   19b6a:	eb18 080b 	adds.w	r8, r8, fp
   19b6e:	f04f 0b00 	mov.w	fp, #0
   19b72:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b76:	fbe2 8b00 	umlal	r8, fp, r2, r0
   19b7a:	eb19 090b 	adds.w	r9, r9, fp
   19b7e:	f04f 0b00 	mov.w	fp, #0
   19b82:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b86:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19b8a:	eb1a 0a0b 	adds.w	sl, sl, fp
   19b8e:	f04f 0b00 	mov.w	fp, #0
   19b92:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b96:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19b9a:	ee07 ca90 	vmov	s15, ip
   19b9e:	ee11 0a10 	vmov	r0, s2
   19ba2:	f04f 0c00 	mov.w	ip, #0
   19ba6:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19baa:	eb15 050c 	adds.w	r5, r5, ip
   19bae:	f04f 0c00 	mov.w	ip, #0
   19bb2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bb6:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19bba:	eb16 060c 	adds.w	r6, r6, ip
   19bbe:	f04f 0c00 	mov.w	ip, #0
   19bc2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bc6:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19bca:	eb17 070c 	adds.w	r7, r7, ip
   19bce:	f04f 0c00 	mov.w	ip, #0
   19bd2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bd6:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19bda:	ee13 0a10 	vmov	r0, s6
   19bde:	eb18 080c 	adds.w	r8, r8, ip
   19be2:	f04f 0c00 	mov.w	ip, #0
   19be6:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bea:	fbe1 8c00 	umlal	r8, ip, r1, r0
   19bee:	eb19 090c 	adds.w	r9, r9, ip
   19bf2:	f04f 0c00 	mov.w	ip, #0
   19bf6:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bfa:	fbe2 9c00 	umlal	r9, ip, r2, r0
   19bfe:	eb1a 0a0c 	adds.w	sl, sl, ip
   19c02:	f04f 0c00 	mov.w	ip, #0
   19c06:	eb4c 0c0c 	adc.w	ip, ip, ip
   19c0a:	fbe3 ac00 	umlal	sl, ip, r3, r0
   19c0e:	eb1b 0b0c 	adds.w	fp, fp, ip
   19c12:	f04f 0c00 	mov.w	ip, #0
   19c16:	eb4c 0c0c 	adc.w	ip, ip, ip
   19c1a:	fbe4 bc00 	umlal	fp, ip, r4, r0
   19c1e:	ee08 ea10 	vmov	s16, lr
   19c22:	ee11 0a90 	vmov	r0, s3
   19c26:	f04f 0e00 	mov.w	lr, #0
   19c2a:	fbe1 5e00 	umlal	r5, lr, r1, r0
   19c2e:	eb16 060e 	adds.w	r6, r6, lr
   19c32:	f04f 0e00 	mov.w	lr, #0
   19c36:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c3a:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19c3e:	eb17 070e 	adds.w	r7, r7, lr
   19c42:	f04f 0e00 	mov.w	lr, #0
   19c46:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c4a:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19c4e:	eb18 080e 	adds.w	r8, r8, lr
   19c52:	f04f 0e00 	mov.w	lr, #0
   19c56:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c5a:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19c5e:	ee13 0a90 	vmov	r0, s7
   19c62:	eb19 090e 	adds.w	r9, r9, lr
   19c66:	f04f 0e00 	mov.w	lr, #0
   19c6a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c6e:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19c72:	eb1a 0a0e 	adds.w	sl, sl, lr
   19c76:	f04f 0e00 	mov.w	lr, #0
   19c7a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c7e:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19c82:	eb1b 0b0e 	adds.w	fp, fp, lr
   19c86:	f04f 0e00 	mov.w	lr, #0
   19c8a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c8e:	fbe3 be00 	umlal	fp, lr, r3, r0
   19c92:	eb1c 0c0e 	adds.w	ip, ip, lr
   19c96:	f04f 0e00 	mov.w	lr, #0
   19c9a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c9e:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19ca2:	ec53 2a17 	vmov	r2, r3, s14, s15
   19ca6:	ee18 4a10 	vmov	r4, s16
   19caa:	eb12 020a 	adds.w	r2, r2, sl
   19cae:	eb53 030b 	adcs.w	r3, r3, fp
   19cb2:	eb54 040c 	adcs.w	r4, r4, ip
   19cb6:	eb55 050e 	adcs.w	r5, r5, lr
   19cba:	2000      	movs	r0, #0
   19cbc:	f140 0000 	adc.w	r0, r0, #0
   19cc0:	eb12 020b 	adds.w	r2, r2, fp
   19cc4:	eb53 030c 	adcs.w	r3, r3, ip
   19cc8:	eb54 040e 	adcs.w	r4, r4, lr
   19ccc:	eb55 050e 	adcs.w	r5, r5, lr
   19cd0:	4146      	adcs	r6, r0
   19cd2:	2000      	movs	r0, #0
   19cd4:	4147      	adcs	r7, r0
   19cd6:	eb58 0800 	adcs.w	r8, r8, r0
   19cda:	eb59 090a 	adcs.w	r9, r9, sl
   19cde:	f140 0000 	adc.w	r0, r0, #0
   19ce2:	ebb2 020e 	subs.w	r2, r2, lr
   19ce6:	f173 0300 	sbcs.w	r3, r3, #0
   19cea:	f174 0400 	sbcs.w	r4, r4, #0
   19cee:	eb75 050a 	sbcs.w	r5, r5, sl
   19cf2:	eb76 060b 	sbcs.w	r6, r6, fp
   19cf6:	eb77 070c 	sbcs.w	r7, r7, ip
   19cfa:	eb78 080a 	sbcs.w	r8, r8, sl
   19cfe:	eb79 090c 	sbcs.w	r9, r9, ip
   19d02:	f160 0000 	sbc.w	r0, r0, #0
   19d06:	ebb5 050b 	subs.w	r5, r5, fp
   19d0a:	eb76 060c 	sbcs.w	r6, r6, ip
   19d0e:	eb77 070e 	sbcs.w	r7, r7, lr
   19d12:	eb78 080b 	sbcs.w	r8, r8, fp
   19d16:	eb79 090e 	sbcs.w	r9, r9, lr
   19d1a:	f160 0000 	sbc.w	r0, r0, #0
   19d1e:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d22:	ea7f 0c0c 	mvns.w	ip, ip
   19d26:	f1dc 0e00 	rsbs	lr, ip, #0
   19d2a:	ebb2 020c 	subs.w	r2, r2, ip
   19d2e:	eb73 030c 	sbcs.w	r3, r3, ip
   19d32:	eb74 040c 	sbcs.w	r4, r4, ip
   19d36:	f175 0500 	sbcs.w	r5, r5, #0
   19d3a:	f176 0600 	sbcs.w	r6, r6, #0
   19d3e:	f177 0700 	sbcs.w	r7, r7, #0
   19d42:	eb78 080e 	sbcs.w	r8, r8, lr
   19d46:	eb79 090c 	sbcs.w	r9, r9, ip
   19d4a:	f160 0000 	sbc.w	r0, r0, #0
   19d4e:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d52:	f1dc 0e00 	rsbs	lr, ip, #0
   19d56:	eb12 020c 	adds.w	r2, r2, ip
   19d5a:	eb53 030c 	adcs.w	r3, r3, ip
   19d5e:	eb54 040c 	adcs.w	r4, r4, ip
   19d62:	f155 0500 	adcs.w	r5, r5, #0
   19d66:	f156 0600 	adcs.w	r6, r6, #0
   19d6a:	f157 0700 	adcs.w	r7, r7, #0
   19d6e:	eb58 080e 	adcs.w	r8, r8, lr
   19d72:	eb59 090c 	adcs.w	r9, r9, ip
   19d76:	f140 0000 	adc.w	r0, r0, #0
   19d7a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d7e:	f1dc 0e00 	rsbs	lr, ip, #0
   19d82:	eb12 020c 	adds.w	r2, r2, ip
   19d86:	eb53 030c 	adcs.w	r3, r3, ip
   19d8a:	eb54 040c 	adcs.w	r4, r4, ip
   19d8e:	f155 0500 	adcs.w	r5, r5, #0
   19d92:	f156 0600 	adcs.w	r6, r6, #0
   19d96:	f157 0700 	adcs.w	r7, r7, #0
   19d9a:	eb58 080e 	adcs.w	r8, r8, lr
   19d9e:	eb59 090c 	adcs.w	r9, r9, ip
   19da2:	ec5b aa15 	vmov	sl, fp, s10, s11
   19da6:	ec51 0a16 	vmov	r0, r1, s12, s13
   19daa:	eb1a 0a06 	adds.w	sl, sl, r6
   19dae:	eb5b 0b07 	adcs.w	fp, fp, r7
   19db2:	eb50 0008 	adcs.w	r0, r0, r8
   19db6:	eb51 0109 	adcs.w	r1, r1, r9
   19dba:	f05f 0c00 	movs.w	ip, #0
   19dbe:	f14c 0c00 	adc.w	ip, ip, #0
   19dc2:	eb1a 0a07 	adds.w	sl, sl, r7
   19dc6:	eb5b 0b08 	adcs.w	fp, fp, r8
   19dca:	eb50 0009 	adcs.w	r0, r0, r9
   19dce:	eb51 0109 	adcs.w	r1, r1, r9
   19dd2:	eb52 020c 	adcs.w	r2, r2, ip
   19dd6:	f05f 0c00 	movs.w	ip, #0
   19dda:	eb53 030c 	adcs.w	r3, r3, ip
   19dde:	eb54 040c 	adcs.w	r4, r4, ip
   19de2:	4175      	adcs	r5, r6
   19de4:	f14c 0c00 	adc.w	ip, ip, #0
   19de8:	ebba 0a09 	subs.w	sl, sl, r9
   19dec:	f17b 0b00 	sbcs.w	fp, fp, #0
   19df0:	f170 0000 	sbcs.w	r0, r0, #0
   19df4:	41b1      	sbcs	r1, r6
   19df6:	41ba      	sbcs	r2, r7
   19df8:	eb73 0308 	sbcs.w	r3, r3, r8
   19dfc:	41b4      	sbcs	r4, r6
   19dfe:	eb75 0508 	sbcs.w	r5, r5, r8
   19e02:	f16c 0c00 	sbc.w	ip, ip, #0
   19e06:	1bc9      	subs	r1, r1, r7
   19e08:	eb72 0208 	sbcs.w	r2, r2, r8
   19e0c:	eb73 0309 	sbcs.w	r3, r3, r9
   19e10:	41bc      	sbcs	r4, r7
   19e12:	eb75 0509 	sbcs.w	r5, r5, r9
   19e16:	f16c 0c00 	sbc.w	ip, ip, #0
   19e1a:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e1e:	ea7f 0808 	mvns.w	r8, r8
   19e22:	f1d8 0900 	rsbs	r9, r8, #0
   19e26:	ebba 0a08 	subs.w	sl, sl, r8
   19e2a:	eb7b 0b08 	sbcs.w	fp, fp, r8
   19e2e:	eb70 0008 	sbcs.w	r0, r0, r8
   19e32:	f171 0100 	sbcs.w	r1, r1, #0
   19e36:	f172 0200 	sbcs.w	r2, r2, #0
   19e3a:	f173 0300 	sbcs.w	r3, r3, #0
   19e3e:	eb74 0409 	sbcs.w	r4, r4, r9
   19e42:	eb75 0508 	sbcs.w	r5, r5, r8
   19e46:	f16c 0c00 	sbc.w	ip, ip, #0
   19e4a:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e4e:	f1d8 0900 	rsbs	r9, r8, #0
   19e52:	eb1a 0a08 	adds.w	sl, sl, r8
   19e56:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e5a:	eb50 0008 	adcs.w	r0, r0, r8
   19e5e:	f151 0100 	adcs.w	r1, r1, #0
   19e62:	f152 0200 	adcs.w	r2, r2, #0
   19e66:	f153 0300 	adcs.w	r3, r3, #0
   19e6a:	eb54 0409 	adcs.w	r4, r4, r9
   19e6e:	eb55 0508 	adcs.w	r5, r5, r8
   19e72:	f14c 0c00 	adc.w	ip, ip, #0
   19e76:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e7a:	f1d8 0900 	rsbs	r9, r8, #0
   19e7e:	eb1a 0a08 	adds.w	sl, sl, r8
   19e82:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e86:	eb50 0008 	adcs.w	r0, r0, r8
   19e8a:	f151 0100 	adcs.w	r1, r1, #0
   19e8e:	f152 0200 	adcs.w	r2, r2, #0
   19e92:	f153 0300 	adcs.w	r3, r3, #0
   19e96:	eb54 0409 	adcs.w	r4, r4, r9
   19e9a:	eb55 0508 	adcs.w	r5, r5, r8
   19e9e:	ee14 7a10 	vmov	r7, s8
   19ea2:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
   19ea6:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
   19eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eae:	bf00      	nop

00019eb0 <memcpy>:
   19eb0:	4684      	mov	ip, r0
   19eb2:	ea41 0300 	orr.w	r3, r1, r0
   19eb6:	f013 0303 	ands.w	r3, r3, #3
   19eba:	d149      	bne.n	19f50 <memcpy+0xa0>
   19ebc:	3a40      	subs	r2, #64	; 0x40
   19ebe:	d323      	bcc.n	19f08 <memcpy+0x58>
   19ec0:	680b      	ldr	r3, [r1, #0]
   19ec2:	6003      	str	r3, [r0, #0]
   19ec4:	684b      	ldr	r3, [r1, #4]
   19ec6:	6043      	str	r3, [r0, #4]
   19ec8:	688b      	ldr	r3, [r1, #8]
   19eca:	6083      	str	r3, [r0, #8]
   19ecc:	68cb      	ldr	r3, [r1, #12]
   19ece:	60c3      	str	r3, [r0, #12]
   19ed0:	690b      	ldr	r3, [r1, #16]
   19ed2:	6103      	str	r3, [r0, #16]
   19ed4:	694b      	ldr	r3, [r1, #20]
   19ed6:	6143      	str	r3, [r0, #20]
   19ed8:	698b      	ldr	r3, [r1, #24]
   19eda:	6183      	str	r3, [r0, #24]
   19edc:	69cb      	ldr	r3, [r1, #28]
   19ede:	61c3      	str	r3, [r0, #28]
   19ee0:	6a0b      	ldr	r3, [r1, #32]
   19ee2:	6203      	str	r3, [r0, #32]
   19ee4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   19ee6:	6243      	str	r3, [r0, #36]	; 0x24
   19ee8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   19eea:	6283      	str	r3, [r0, #40]	; 0x28
   19eec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   19eee:	62c3      	str	r3, [r0, #44]	; 0x2c
   19ef0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   19ef2:	6303      	str	r3, [r0, #48]	; 0x30
   19ef4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   19ef6:	6343      	str	r3, [r0, #52]	; 0x34
   19ef8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   19efa:	6383      	str	r3, [r0, #56]	; 0x38
   19efc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   19efe:	63c3      	str	r3, [r0, #60]	; 0x3c
   19f00:	3040      	adds	r0, #64	; 0x40
   19f02:	3140      	adds	r1, #64	; 0x40
   19f04:	3a40      	subs	r2, #64	; 0x40
   19f06:	d2db      	bcs.n	19ec0 <memcpy+0x10>
   19f08:	3230      	adds	r2, #48	; 0x30
   19f0a:	d30b      	bcc.n	19f24 <memcpy+0x74>
   19f0c:	680b      	ldr	r3, [r1, #0]
   19f0e:	6003      	str	r3, [r0, #0]
   19f10:	684b      	ldr	r3, [r1, #4]
   19f12:	6043      	str	r3, [r0, #4]
   19f14:	688b      	ldr	r3, [r1, #8]
   19f16:	6083      	str	r3, [r0, #8]
   19f18:	68cb      	ldr	r3, [r1, #12]
   19f1a:	60c3      	str	r3, [r0, #12]
   19f1c:	3010      	adds	r0, #16
   19f1e:	3110      	adds	r1, #16
   19f20:	3a10      	subs	r2, #16
   19f22:	d2f3      	bcs.n	19f0c <memcpy+0x5c>
   19f24:	320c      	adds	r2, #12
   19f26:	d305      	bcc.n	19f34 <memcpy+0x84>
   19f28:	f851 3b04 	ldr.w	r3, [r1], #4
   19f2c:	f840 3b04 	str.w	r3, [r0], #4
   19f30:	3a04      	subs	r2, #4
   19f32:	d2f9      	bcs.n	19f28 <memcpy+0x78>
   19f34:	3204      	adds	r2, #4
   19f36:	d008      	beq.n	19f4a <memcpy+0x9a>
   19f38:	07d2      	lsls	r2, r2, #31
   19f3a:	bf1c      	itt	ne
   19f3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   19f40:	f800 3b01 	strbne.w	r3, [r0], #1
   19f44:	d301      	bcc.n	19f4a <memcpy+0x9a>
   19f46:	880b      	ldrh	r3, [r1, #0]
   19f48:	8003      	strh	r3, [r0, #0]
   19f4a:	4660      	mov	r0, ip
   19f4c:	4770      	bx	lr
   19f4e:	bf00      	nop
   19f50:	2a08      	cmp	r2, #8
   19f52:	d313      	bcc.n	19f7c <memcpy+0xcc>
   19f54:	078b      	lsls	r3, r1, #30
   19f56:	d0b1      	beq.n	19ebc <memcpy+0xc>
   19f58:	f010 0303 	ands.w	r3, r0, #3
   19f5c:	d0ae      	beq.n	19ebc <memcpy+0xc>
   19f5e:	f1c3 0304 	rsb	r3, r3, #4
   19f62:	1ad2      	subs	r2, r2, r3
   19f64:	07db      	lsls	r3, r3, #31
   19f66:	bf1c      	itt	ne
   19f68:	f811 3b01 	ldrbne.w	r3, [r1], #1
   19f6c:	f800 3b01 	strbne.w	r3, [r0], #1
   19f70:	d3a4      	bcc.n	19ebc <memcpy+0xc>
   19f72:	f831 3b02 	ldrh.w	r3, [r1], #2
   19f76:	f820 3b02 	strh.w	r3, [r0], #2
   19f7a:	e79f      	b.n	19ebc <memcpy+0xc>
   19f7c:	3a04      	subs	r2, #4
   19f7e:	d3d9      	bcc.n	19f34 <memcpy+0x84>
   19f80:	3a01      	subs	r2, #1
   19f82:	f811 3b01 	ldrb.w	r3, [r1], #1
   19f86:	f800 3b01 	strb.w	r3, [r0], #1
   19f8a:	d2f9      	bcs.n	19f80 <memcpy+0xd0>
   19f8c:	780b      	ldrb	r3, [r1, #0]
   19f8e:	7003      	strb	r3, [r0, #0]
   19f90:	784b      	ldrb	r3, [r1, #1]
   19f92:	7043      	strb	r3, [r0, #1]
   19f94:	788b      	ldrb	r3, [r1, #2]
   19f96:	7083      	strb	r3, [r0, #2]
   19f98:	4660      	mov	r0, ip
   19f9a:	4770      	bx	lr

00019f9c <strcmp>:
   19f9c:	ea80 0c01 	eor.w	ip, r0, r1
   19fa0:	f01c 0f03 	tst.w	ip, #3
   19fa4:	d137      	bne.n	1a016 <strcmp+0x7a>
   19fa6:	f010 0c03 	ands.w	ip, r0, #3
   19faa:	f020 0003 	bic.w	r0, r0, #3
   19fae:	f021 0103 	bic.w	r1, r1, #3
   19fb2:	f850 2b04 	ldr.w	r2, [r0], #4
   19fb6:	bf08      	it	eq
   19fb8:	f851 3b04 	ldreq.w	r3, [r1], #4
   19fbc:	d00e      	beq.n	19fdc <strcmp+0x40>
   19fbe:	f08c 0c03 	eor.w	ip, ip, #3
   19fc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   19fc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   19fca:	fa23 fc0c 	lsr.w	ip, r3, ip
   19fce:	f851 3b04 	ldr.w	r3, [r1], #4
   19fd2:	ea42 020c 	orr.w	r2, r2, ip
   19fd6:	ea43 030c 	orr.w	r3, r3, ip
   19fda:	bf00      	nop
   19fdc:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   19fe0:	429a      	cmp	r2, r3
   19fe2:	bf01      	itttt	eq
   19fe4:	ea2c 0c02 	biceq.w	ip, ip, r2
   19fe8:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
   19fec:	f850 2b04 	ldreq.w	r2, [r0], #4
   19ff0:	f851 3b04 	ldreq.w	r3, [r1], #4
   19ff4:	d0f2      	beq.n	19fdc <strcmp+0x40>
   19ff6:	ea4f 6002 	mov.w	r0, r2, lsl #24
   19ffa:	ea4f 2212 	mov.w	r2, r2, lsr #8
   19ffe:	2801      	cmp	r0, #1
   1a000:	bf28      	it	cs
   1a002:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
   1a006:	bf08      	it	eq
   1a008:	0a1b      	lsreq	r3, r3, #8
   1a00a:	d0f4      	beq.n	19ff6 <strcmp+0x5a>
   1a00c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1a010:	0e00      	lsrs	r0, r0, #24
   1a012:	1ac0      	subs	r0, r0, r3
   1a014:	4770      	bx	lr
   1a016:	f010 0f03 	tst.w	r0, #3
   1a01a:	d00a      	beq.n	1a032 <strcmp+0x96>
   1a01c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a020:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a024:	2a01      	cmp	r2, #1
   1a026:	bf28      	it	cs
   1a028:	429a      	cmpcs	r2, r3
   1a02a:	d0f4      	beq.n	1a016 <strcmp+0x7a>
   1a02c:	eba2 0003 	sub.w	r0, r2, r3
   1a030:	4770      	bx	lr
   1a032:	f84d 5d04 	str.w	r5, [sp, #-4]!
   1a036:	f850 2b04 	ldr.w	r2, [r0], #4
   1a03a:	f001 0503 	and.w	r5, r1, #3
   1a03e:	f021 0103 	bic.w	r1, r1, #3
   1a042:	f851 3b04 	ldr.w	r3, [r1], #4
   1a046:	2d02      	cmp	r5, #2
   1a048:	d026      	beq.n	1a098 <strcmp+0xfc>
   1a04a:	d84d      	bhi.n	1a0e8 <strcmp+0x14c>
   1a04c:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
   1a050:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
   1a054:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a058:	ea2c 0c02 	bic.w	ip, ip, r2
   1a05c:	d10d      	bne.n	1a07a <strcmp+0xde>
   1a05e:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a062:	bf08      	it	eq
   1a064:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a068:	d10a      	bne.n	1a080 <strcmp+0xe4>
   1a06a:	ea85 0502 	eor.w	r5, r5, r2
   1a06e:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
   1a072:	d10c      	bne.n	1a08e <strcmp+0xf2>
   1a074:	f850 2b04 	ldr.w	r2, [r0], #4
   1a078:	e7e8      	b.n	1a04c <strcmp+0xb0>
   1a07a:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1a07e:	e05b      	b.n	1a138 <strcmp+0x19c>
   1a080:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
   1a084:	d154      	bne.n	1a130 <strcmp+0x194>
   1a086:	780b      	ldrb	r3, [r1, #0]
   1a088:	ea4f 6512 	mov.w	r5, r2, lsr #24
   1a08c:	e054      	b.n	1a138 <strcmp+0x19c>
   1a08e:	ea4f 6512 	mov.w	r5, r2, lsr #24
   1a092:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1a096:	e04f      	b.n	1a138 <strcmp+0x19c>
   1a098:	ea4f 4502 	mov.w	r5, r2, lsl #16
   1a09c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a0a0:	ea4f 4515 	mov.w	r5, r5, lsr #16
   1a0a4:	ea2c 0c02 	bic.w	ip, ip, r2
   1a0a8:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
   1a0ac:	d118      	bne.n	1a0e0 <strcmp+0x144>
   1a0ae:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a0b2:	bf08      	it	eq
   1a0b4:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a0b8:	d107      	bne.n	1a0ca <strcmp+0x12e>
   1a0ba:	ea85 0502 	eor.w	r5, r5, r2
   1a0be:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
   1a0c2:	d109      	bne.n	1a0d8 <strcmp+0x13c>
   1a0c4:	f850 2b04 	ldr.w	r2, [r0], #4
   1a0c8:	e7e6      	b.n	1a098 <strcmp+0xfc>
   1a0ca:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
   1a0ce:	d12f      	bne.n	1a130 <strcmp+0x194>
   1a0d0:	880b      	ldrh	r3, [r1, #0]
   1a0d2:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1a0d6:	e02f      	b.n	1a138 <strcmp+0x19c>
   1a0d8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   1a0dc:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1a0e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1a0e4:	e028      	b.n	1a138 <strcmp+0x19c>
   1a0e6:	bf00      	nop
   1a0e8:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   1a0ec:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
   1a0f0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a0f4:	ea2c 0c02 	bic.w	ip, ip, r2
   1a0f8:	d10d      	bne.n	1a116 <strcmp+0x17a>
   1a0fa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a0fe:	bf08      	it	eq
   1a100:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a104:	d10a      	bne.n	1a11c <strcmp+0x180>
   1a106:	ea85 0502 	eor.w	r5, r5, r2
   1a10a:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
   1a10e:	d10a      	bne.n	1a126 <strcmp+0x18a>
   1a110:	f850 2b04 	ldr.w	r2, [r0], #4
   1a114:	e7e8      	b.n	1a0e8 <strcmp+0x14c>
   1a116:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1a11a:	e00d      	b.n	1a138 <strcmp+0x19c>
   1a11c:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a120:	d006      	beq.n	1a130 <strcmp+0x194>
   1a122:	f851 3b04 	ldr.w	r3, [r1], #4
   1a126:	ea4f 2512 	mov.w	r5, r2, lsr #8
   1a12a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a12e:	e003      	b.n	1a138 <strcmp+0x19c>
   1a130:	f04f 0000 	mov.w	r0, #0
   1a134:	bc20      	pop	{r5}
   1a136:	4770      	bx	lr
   1a138:	f005 02ff 	and.w	r2, r5, #255	; 0xff
   1a13c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1a140:	2801      	cmp	r0, #1
   1a142:	bf28      	it	cs
   1a144:	4290      	cmpcs	r0, r2
   1a146:	bf04      	itt	eq
   1a148:	0a2d      	lsreq	r5, r5, #8
   1a14a:	0a1b      	lsreq	r3, r3, #8
   1a14c:	d0f4      	beq.n	1a138 <strcmp+0x19c>
   1a14e:	eba2 0000 	sub.w	r0, r2, r0
   1a152:	bc20      	pop	{r5}
   1a154:	4770      	bx	lr
   1a156:	bf00      	nop

0001a158 <__aeabi_dcmpun>:
   1a158:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a15c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a160:	d102      	bne.n	1a168 <__aeabi_dcmpun+0x10>
   1a162:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a166:	d10a      	bne.n	1a17e <__aeabi_dcmpun+0x26>
   1a168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a16c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a170:	d102      	bne.n	1a178 <__aeabi_dcmpun+0x20>
   1a172:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a176:	d102      	bne.n	1a17e <__aeabi_dcmpun+0x26>
   1a178:	f04f 0000 	mov.w	r0, #0
   1a17c:	4770      	bx	lr
   1a17e:	f04f 0001 	mov.w	r0, #1
   1a182:	4770      	bx	lr

0001a184 <__aeabi_d2uiz>:
   1a184:	004a      	lsls	r2, r1, #1
   1a186:	d211      	bcs.n	1a1ac <__aeabi_d2uiz+0x28>
   1a188:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1a18c:	d211      	bcs.n	1a1b2 <__aeabi_d2uiz+0x2e>
   1a18e:	d50d      	bpl.n	1a1ac <__aeabi_d2uiz+0x28>
   1a190:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1a194:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1a198:	d40e      	bmi.n	1a1b8 <__aeabi_d2uiz+0x34>
   1a19a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a19e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a1a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1a1a6:	fa23 f002 	lsr.w	r0, r3, r2
   1a1aa:	4770      	bx	lr
   1a1ac:	f04f 0000 	mov.w	r0, #0
   1a1b0:	4770      	bx	lr
   1a1b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1a1b6:	d102      	bne.n	1a1be <__aeabi_d2uiz+0x3a>
   1a1b8:	f04f 30ff 	mov.w	r0, #4294967295
   1a1bc:	4770      	bx	lr
   1a1be:	f04f 0000 	mov.w	r0, #0
   1a1c2:	4770      	bx	lr

0001a1c4 <__aeabi_d2f>:
   1a1c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1a1c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1a1cc:	bf24      	itt	cs
   1a1ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1a1d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1a1d6:	d90d      	bls.n	1a1f4 <__aeabi_d2f+0x30>
   1a1d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a1dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1a1e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1a1e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1a1e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1a1ec:	bf08      	it	eq
   1a1ee:	f020 0001 	biceq.w	r0, r0, #1
   1a1f2:	4770      	bx	lr
   1a1f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1a1f8:	d121      	bne.n	1a23e <__aeabi_d2f+0x7a>
   1a1fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1a1fe:	bfbc      	itt	lt
   1a200:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1a204:	4770      	bxlt	lr
   1a206:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a20a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1a20e:	f1c2 0218 	rsb	r2, r2, #24
   1a212:	f1c2 0c20 	rsb	ip, r2, #32
   1a216:	fa10 f30c 	lsls.w	r3, r0, ip
   1a21a:	fa20 f002 	lsr.w	r0, r0, r2
   1a21e:	bf18      	it	ne
   1a220:	f040 0001 	orrne.w	r0, r0, #1
   1a224:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a228:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1a22c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1a230:	ea40 000c 	orr.w	r0, r0, ip
   1a234:	fa23 f302 	lsr.w	r3, r3, r2
   1a238:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1a23c:	e7cc      	b.n	1a1d8 <__aeabi_d2f+0x14>
   1a23e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1a242:	d107      	bne.n	1a254 <__aeabi_d2f+0x90>
   1a244:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1a248:	bf1e      	ittt	ne
   1a24a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1a24e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1a252:	4770      	bxne	lr
   1a254:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1a258:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a25c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a260:	4770      	bx	lr
   1a262:	bf00      	nop
   1a264:	0000      	movs	r0, r0
	...

0001a268 <orientation_detector_poll>:
static struct device *dev;
static double accel_offset[3];

int orientation_detector_poll(
	struct orientation_detector_sensor_data *sensor_data)
{
   1a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a26c:	4682      	mov	sl, r0
   1a26e:	2414      	movs	r4, #20
	int err;
	u8_t i;
	double aggregated_data[3] = {0};
   1a270:	2600      	movs	r6, #0
   1a272:	2700      	movs	r7, #0

	for (i = 0; i < MEASUREMENT_ITERATIONS; i++) {

		/* If using the ADXL362 driver, all channels must be fetched */
		if (IS_ENABLED(CONFIG_ADXL362)) {
			err = sensor_sample_fetch_chan(dev,
   1a274:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1a350 <orientation_detector_poll+0xe8>
{
   1a278:	b087      	sub	sp, #28
			err = sensor_sample_fetch_chan(dev,
   1a27a:	f8db 0000 	ldr.w	r0, [fp]
static inline int z_impl_sensor_sample_fetch_chan(struct device *dev,
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, type);
   1a27e:	6843      	ldr	r3, [r0, #4]
   1a280:	2125      	movs	r1, #37	; 0x25
   1a282:	689b      	ldr	r3, [r3, #8]
   1a284:	4798      	blx	r3
		} else {
			err = sensor_sample_fetch_chan(dev,
						       SENSOR_CHAN_ACCEL_Z);
		}

		if (err) {
   1a286:	4605      	mov	r5, r0
   1a288:	b130      	cbz	r0, 1a298 <orientation_detector_poll+0x30>
			printk("sensor_sample_fetch failed\n");
   1a28a:	482b      	ldr	r0, [pc, #172]	; (1a338 <orientation_detector_poll+0xd0>)

		err = sensor_channel_get(dev,
				SENSOR_CHAN_ACCEL_Z, &accel_data[2]);

		if (err) {
			printk("sensor_channel_get failed\n");
   1a28c:	f02d fb1d 	bl	478ca <printk>
	}

	sensor_data->orientation = current_orientation;

	return 0;
}
   1a290:	4628      	mov	r0, r5
   1a292:	b007      	add	sp, #28
   1a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = sensor_channel_get(dev,
   1a298:	f8db 0000 	ldr.w	r0, [fp]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
   1a29c:	6843      	ldr	r3, [r0, #4]
   1a29e:	aa04      	add	r2, sp, #16
   1a2a0:	68db      	ldr	r3, [r3, #12]
   1a2a2:	2102      	movs	r1, #2
   1a2a4:	4798      	blx	r3
		if (err) {
   1a2a6:	4605      	mov	r5, r0
   1a2a8:	b108      	cbz	r0, 1a2ae <orientation_detector_poll+0x46>
			printk("sensor_channel_get failed\n");
   1a2aa:	4824      	ldr	r0, [pc, #144]	; (1a33c <orientation_detector_poll+0xd4>)
   1a2ac:	e7ee      	b.n	1a28c <orientation_detector_poll+0x24>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a2ae:	9805      	ldr	r0, [sp, #20]
   1a2b0:	f7fe fa08 	bl	186c4 <__aeabi_i2d>
   1a2b4:	a31e      	add	r3, pc, #120	; (adr r3, 1a330 <orientation_detector_poll+0xc8>)
   1a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2ba:	f7fe fb97 	bl	189ec <__aeabi_ddiv>
   1a2be:	4680      	mov	r8, r0
   1a2c0:	9804      	ldr	r0, [sp, #16]
   1a2c2:	4689      	mov	r9, r1
   1a2c4:	f7fe f9fe 	bl	186c4 <__aeabi_i2d>
   1a2c8:	4602      	mov	r2, r0
   1a2ca:	460b      	mov	r3, r1
   1a2cc:	4640      	mov	r0, r8
   1a2ce:	4649      	mov	r1, r9
   1a2d0:	f7fe f8ac 	bl	1842c <__adddf3>
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
   1a2d4:	4602      	mov	r2, r0
   1a2d6:	460b      	mov	r3, r1
   1a2d8:	4630      	mov	r0, r6
   1a2da:	4639      	mov	r1, r7
   1a2dc:	f7fe f8a6 	bl	1842c <__adddf3>
   1a2e0:	3c01      	subs	r4, #1
	for (i = 0; i < MEASUREMENT_ITERATIONS; i++) {
   1a2e2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
   1a2e6:	4606      	mov	r6, r0
   1a2e8:	460f      	mov	r7, r1
	for (i = 0; i < MEASUREMENT_ITERATIONS; i++) {
   1a2ea:	d1c6      	bne.n	1a27a <orientation_detector_poll+0x12>
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a2ec:	2200      	movs	r2, #0
   1a2ee:	4b14      	ldr	r3, [pc, #80]	; (1a340 <orientation_detector_poll+0xd8>)
   1a2f0:	f7fe fb7c 	bl	189ec <__aeabi_ddiv>
				accel_offset[2];
   1a2f4:	4b13      	ldr	r3, [pc, #76]	; (1a344 <orientation_detector_poll+0xdc>)
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a2f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1a2fa:	f7fe f895 	bl	18428 <__aeabi_dsub>
   1a2fe:	4606      	mov	r6, r0
   1a300:	460f      	mov	r7, r1
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a302:	2200      	movs	r2, #0
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a304:	e9ca 6704 	strd	r6, r7, [sl, #16]
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a308:	4b0f      	ldr	r3, [pc, #60]	; (1a348 <orientation_detector_poll+0xe0>)
   1a30a:	f7fe fccb 	bl	18ca4 <__aeabi_dcmpge>
   1a30e:	b960      	cbnz	r0, 1a32a <orientation_detector_poll+0xc2>
	} else if (sensor_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1a310:	4b0e      	ldr	r3, [pc, #56]	; (1a34c <orientation_detector_poll+0xe4>)
   1a312:	2200      	movs	r2, #0
   1a314:	4630      	mov	r0, r6
   1a316:	4639      	mov	r1, r7
   1a318:	f7fe fcba 	bl	18c90 <__aeabi_dcmple>
		current_orientation = ORIENTATION_ON_SIDE;
   1a31c:	2800      	cmp	r0, #0
   1a31e:	bf14      	ite	ne
   1a320:	2301      	movne	r3, #1
   1a322:	2303      	moveq	r3, #3
	sensor_data->orientation = current_orientation;
   1a324:	f88a 3018 	strb.w	r3, [sl, #24]
	return 0;
   1a328:	e7b2      	b.n	1a290 <orientation_detector_poll+0x28>
			current_orientation = ORIENTATION_UPSIDE_DOWN;
   1a32a:	2302      	movs	r3, #2
   1a32c:	e7fa      	b.n	1a324 <orientation_detector_poll+0xbc>
   1a32e:	bf00      	nop
   1a330:	00000000 	.word	0x00000000
   1a334:	412e8480 	.word	0x412e8480
   1a338:	0004d213 	.word	0x0004d213
   1a33c:	0004d22f 	.word	0x0004d22f
   1a340:	40340000 	.word	0x40340000
   1a344:	20020958 	.word	0x20020958
   1a348:	40140000 	.word	0x40140000
   1a34c:	c0140000 	.word	0xc0140000
   1a350:	20023b08 	.word	0x20023b08
   1a354:	00000000 	.word	0x00000000

0001a358 <env_sensors_poll_fn>:
};

static struct k_delayed_work env_sensors_poller;

static void env_sensors_poll_fn(struct k_work *work)
{
   1a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct sensor_value data[num_sensors];

	int err;

	if (IS_ENABLED(CONFIG_BME680)) {
		err = sensor_sample_fetch_chan(env_sensors[0]->dev,
   1a35c:	4c40      	ldr	r4, [pc, #256]	; (1a460 <env_sensors_poll_fn+0x108>)
{
   1a35e:	b087      	sub	sp, #28
		err = sensor_sample_fetch_chan(env_sensors[0]->dev,
   1a360:	69a0      	ldr	r0, [r4, #24]
	return api->sample_fetch(dev, type);
   1a362:	6843      	ldr	r3, [r0, #4]
   1a364:	2125      	movs	r1, #37	; 0x25
   1a366:	689b      	ldr	r3, [r3, #8]
   1a368:	4798      	blx	r3
					SENSOR_CHAN_ALL);
		if (err) {
   1a36a:	4602      	mov	r2, r0
   1a36c:	b118      	cbz	r0, 1a376 <env_sensors_poll_fn+0x1e>
			printk("Failed to fetch data from %s, error: %d\n",
   1a36e:	6961      	ldr	r1, [r4, #20]
   1a370:	483c      	ldr	r0, [pc, #240]	; (1a464 <env_sensors_poll_fn+0x10c>)
   1a372:	f02d faaa 	bl	478ca <printk>
			if (err) {
				printk("Failed to fetch data from %s, error: %d\n",
					env_sensors[i]->dev_name, err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1a376:	4f3c      	ldr	r7, [pc, #240]	; (1a468 <env_sensors_poll_fn+0x110>)
{
   1a378:	2400      	movs	r4, #0
   1a37a:	46b8      	mov	r8, r7
		err = sensor_channel_get(env_sensors[i]->dev,
   1a37c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   1a380:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1a384:	69a8      	ldr	r0, [r5, #24]
   1a386:	8a29      	ldrh	r1, [r5, #16]
   1a388:	00e6      	lsls	r6, r4, #3
	return api->channel_get(dev, chan, val);
   1a38a:	6843      	ldr	r3, [r0, #4]
   1a38c:	eb0d 0206 	add.w	r2, sp, r6
   1a390:	68db      	ldr	r3, [r3, #12]
   1a392:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1a394:	4602      	mov	r2, r0
   1a396:	b178      	cbz	r0, 1a3b8 <env_sensors_poll_fn+0x60>
			printk("Failed to fetch data from %s, error: %d\n",
   1a398:	6969      	ldr	r1, [r5, #20]
   1a39a:	4832      	ldr	r0, [pc, #200]	; (1a464 <env_sensors_poll_fn+0x10c>)
   1a39c:	f02d fa95 	bl	478ca <printk>
	for (int i = 0; i < num_sensors; i++) {
   1a3a0:	3401      	adds	r4, #1
   1a3a2:	2c03      	cmp	r4, #3
   1a3a4:	d1ea      	bne.n	1a37c <env_sensors_poll_fn+0x24>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a3a6:	f242 7210 	movw	r2, #10000	; 0x2710
   1a3aa:	4930      	ldr	r1, [pc, #192]	; (1a46c <env_sensors_poll_fn+0x114>)
   1a3ac:	4830      	ldr	r0, [pc, #192]	; (1a470 <env_sensors_poll_fn+0x118>)
   1a3ae:	f025 f8bb 	bl	3f528 <k_delayed_work_submit_to_queue>
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	 k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   1a3b2:	b007      	add	sp, #28
   1a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1a3b8:	351c      	adds	r5, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1a3ba:	f04f 0320 	mov.w	r3, #32
   1a3be:	f3ef 8911 	mrs	r9, BASEPRI
   1a3c2:	f383 8811 	msr	BASEPRI, r3
   1a3c6:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1a3ca:	4628      	mov	r0, r5
   1a3cc:	f024 fe4e 	bl	3f06c <z_spin_lock_valid>
   1a3d0:	b960      	cbnz	r0, 1a3ec <env_sensors_poll_fn+0x94>
   1a3d2:	4928      	ldr	r1, [pc, #160]	; (1a474 <env_sensors_poll_fn+0x11c>)
   1a3d4:	235f      	movs	r3, #95	; 0x5f
   1a3d6:	4a28      	ldr	r2, [pc, #160]	; (1a478 <env_sensors_poll_fn+0x120>)
   1a3d8:	4828      	ldr	r0, [pc, #160]	; (1a47c <env_sensors_poll_fn+0x124>)
   1a3da:	f02d fa76 	bl	478ca <printk>
   1a3de:	4828      	ldr	r0, [pc, #160]	; (1a480 <env_sensors_poll_fn+0x128>)
   1a3e0:	f02d fa73 	bl	478ca <printk>
   1a3e4:	215f      	movs	r1, #95	; 0x5f
   1a3e6:	4824      	ldr	r0, [pc, #144]	; (1a478 <env_sensors_poll_fn+0x120>)
   1a3e8:	f02d fa7c 	bl	478e4 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1a3ec:	4628      	mov	r0, r5
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a3ee:	446e      	add	r6, sp
   1a3f0:	f024 fe5a 	bl	3f0a8 <z_spin_lock_set_owner>
   1a3f4:	6870      	ldr	r0, [r6, #4]
   1a3f6:	f7fe f965 	bl	186c4 <__aeabi_i2d>
   1a3fa:	a317      	add	r3, pc, #92	; (adr r3, 1a458 <env_sensors_poll_fn+0x100>)
   1a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a400:	f7fe faf4 	bl	189ec <__aeabi_ddiv>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1a404:	f858 500a 	ldr.w	r5, [r8, sl]
   1a408:	4682      	mov	sl, r0
   1a40a:	f85d 0034 	ldr.w	r0, [sp, r4, lsl #3]
   1a40e:	468b      	mov	fp, r1
   1a410:	f7fe f958 	bl	186c4 <__aeabi_i2d>
   1a414:	4602      	mov	r2, r0
   1a416:	460b      	mov	r3, r1
   1a418:	4650      	mov	r0, sl
   1a41a:	4659      	mov	r1, fp
   1a41c:	f7fe f806 	bl	1842c <__adddf3>
   1a420:	e9c5 0102 	strd	r0, r1, [r5, #8]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a424:	f105 001c 	add.w	r0, r5, #28
   1a428:	f024 fe2e 	bl	3f088 <z_spin_unlock_valid>
   1a42c:	b960      	cbnz	r0, 1a448 <env_sensors_poll_fn+0xf0>
   1a42e:	4915      	ldr	r1, [pc, #84]	; (1a484 <env_sensors_poll_fn+0x12c>)
   1a430:	2372      	movs	r3, #114	; 0x72
   1a432:	4a11      	ldr	r2, [pc, #68]	; (1a478 <env_sensors_poll_fn+0x120>)
   1a434:	4811      	ldr	r0, [pc, #68]	; (1a47c <env_sensors_poll_fn+0x124>)
   1a436:	f02d fa48 	bl	478ca <printk>
   1a43a:	4813      	ldr	r0, [pc, #76]	; (1a488 <env_sensors_poll_fn+0x130>)
   1a43c:	f02d fa45 	bl	478ca <printk>
   1a440:	2172      	movs	r1, #114	; 0x72
   1a442:	480d      	ldr	r0, [pc, #52]	; (1a478 <env_sensors_poll_fn+0x120>)
   1a444:	f02d fa4e 	bl	478e4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1a448:	f389 8811 	msr	BASEPRI, r9
   1a44c:	f3bf 8f6f 	isb	sy
   1a450:	e7a6      	b.n	1a3a0 <env_sensors_poll_fn+0x48>
   1a452:	bf00      	nop
   1a454:	f3af 8000 	nop.w
   1a458:	00000000 	.word	0x00000000
   1a45c:	412e8480 	.word	0x412e8480
   1a460:	20031030 	.word	0x20031030
   1a464:	0004d825 	.word	0x0004d825
   1a468:	0004a9f4 	.word	0x0004a9f4
   1a46c:	20023b8c 	.word	0x20023b8c
   1a470:	2002a5c0 	.word	0x2002a5c0
   1a474:	0004d875 	.word	0x0004d875
   1a478:	0004d84e 	.word	0x0004d84e
   1a47c:	0004ccf0 	.word	0x0004ccf0
   1a480:	0004d88a 	.word	0x0004d88a
   1a484:	0004d89f 	.word	0x0004d89f
   1a488:	0004d8b6 	.word	0x0004d8b6
   1a48c:	00000000 	.word	0x00000000

0001a490 <adxl362_attr_set>:
	return ret;
}

static int adxl362_attr_set(struct device *dev, enum sensor_channel chan,
		    enum sensor_attribute attr, const struct sensor_value *val)
{
   1a490:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1a494:	4604      	mov	r4, r0
	switch (attr) {
   1a496:	1e50      	subs	r0, r2, #1
   1a498:	2801      	cmp	r0, #1
   1a49a:	d812      	bhi.n	1a4c2 <adxl362_attr_set+0x32>
	if (chan != SENSOR_CHAN_ACCEL_X &&
   1a49c:	2902      	cmp	r1, #2
	u16_t threshold = val->val1;
   1a49e:	8818      	ldrh	r0, [r3, #0]
	if (chan != SENSOR_CHAN_ACCEL_X &&
   1a4a0:	d866      	bhi.n	1a570 <adxl362_attr_set+0xe0>
	if (threshold > 2047) {
   1a4a2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1a4a6:	d263      	bcs.n	1a570 <adxl362_attr_set+0xe0>
		reg = ADXL362_REG_THRESH_ACT_L;
   1a4a8:	2a02      	cmp	r2, #2
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   1a4aa:	4601      	mov	r1, r0
   1a4ac:	f04f 0302 	mov.w	r3, #2
   1a4b0:	68a0      	ldr	r0, [r4, #8]
   1a4b2:	bf18      	it	ne
   1a4b4:	2223      	movne	r2, #35	; 0x23
		LOG_DBG("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
   1a4b6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   1a4ba:	bf08      	it	eq
   1a4bc:	2220      	moveq	r2, #32
   1a4be:	f02e ba00 	b.w	488c2 <adxl362_set_reg.isra.0>
	switch (chan) {
   1a4c2:	2903      	cmp	r1, #3
   1a4c4:	d851      	bhi.n	1a56a <adxl362_attr_set+0xda>
	switch (attr) {
   1a4c6:	b392      	cbz	r2, 1a52e <adxl362_attr_set+0x9e>
   1a4c8:	2a06      	cmp	r2, #6
   1a4ca:	d14e      	bne.n	1a56a <adxl362_attr_set+0xda>
	s64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   1a4cc:	6858      	ldr	r0, [r3, #4]
   1a4ce:	681a      	ldr	r2, [r3, #0]
   1a4d0:	4b2f      	ldr	r3, [pc, #188]	; (1a590 <adxl362_attr_set+0x100>)
   1a4d2:	17c1      	asrs	r1, r0, #31
   1a4d4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (micro_ms2 > 0) {
   1a4d8:	2801      	cmp	r0, #1
   1a4da:	f171 0300 	sbcs.w	r3, r1, #0
	s64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   1a4de:	4683      	mov	fp, r0
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   1a4e0:	a325      	add	r3, pc, #148	; (adr r3, 1a578 <adxl362_attr_set+0xe8>)
   1a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	s64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   1a4e6:	468c      	mov	ip, r1
	if (micro_ms2 > 0) {
   1a4e8:	db19      	blt.n	1a51e <adxl362_attr_set+0x8e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   1a4ea:	a725      	add	r7, pc, #148	; (adr r7, 1a580 <adxl362_attr_set+0xf0>)
   1a4ec:	e9d7 6700 	ldrd	r6, r7, [r7]
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
   1a4f0:	eb1b 0006 	adds.w	r0, fp, r6
   1a4f4:	eb4c 0107 	adc.w	r1, ip, r7
   1a4f8:	f7fe fc10 	bl	18d1c <__aeabi_ldivmod>
		range_reg = adxl362_range_to_reg_val(sensor_ms2_to_g(val));
   1a4fc:	b280      	uxth	r0, r0
		if (range <= adxl362_acc_range_map[i].range) {
   1a4fe:	2802      	cmp	r0, #2
   1a500:	d911      	bls.n	1a526 <adxl362_attr_set+0x96>
   1a502:	2804      	cmp	r0, #4
   1a504:	d911      	bls.n	1a52a <adxl362_attr_set+0x9a>
   1a506:	2808      	cmp	r0, #8
   1a508:	d82f      	bhi.n	1a56a <adxl362_attr_set+0xda>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   1a50a:	2202      	movs	r2, #2
			return adxl362_acc_range_map[i].reg_val;
   1a50c:	4b21      	ldr	r3, [pc, #132]	; (1a594 <adxl362_attr_set+0x104>)
		return adxl362_set_range(dev, range_reg);
   1a50e:	4620      	mov	r0, r4
}
   1a510:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
			return adxl362_acc_range_map[i].reg_val;
   1a514:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		return adxl362_set_range(dev, range_reg);
   1a518:	7899      	ldrb	r1, [r3, #2]
   1a51a:	f02e b9e6 	b.w	488ea <adxl362_set_range>
   1a51e:	a71a      	add	r7, pc, #104	; (adr r7, 1a588 <adxl362_attr_set+0xf8>)
   1a520:	e9d7 6700 	ldrd	r6, r7, [r7]
   1a524:	e7e4      	b.n	1a4f0 <adxl362_attr_set+0x60>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   1a526:	2200      	movs	r2, #0
   1a528:	e7f0      	b.n	1a50c <adxl362_attr_set+0x7c>
   1a52a:	2201      	movs	r2, #1
   1a52c:	e7ee      	b.n	1a50c <adxl362_attr_set+0x7c>
						   val->val2 / 1000);
   1a52e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		out_rate = adxl362_freq_to_odr_val(val->val1,
   1a532:	8819      	ldrh	r1, [r3, #0]
						   val->val2 / 1000);
   1a534:	685b      	ldr	r3, [r3, #4]
   1a536:	fb93 f3f0 	sdiv	r3, r3, r0
		out_rate = adxl362_freq_to_odr_val(val->val1,
   1a53a:	b29b      	uxth	r3, r3
	if (freq_int == 0U && freq_milli == 0U) {
   1a53c:	b909      	cbnz	r1, 1a542 <adxl362_attr_set+0xb2>
   1a53e:	b1a3      	cbz	r3, 1a56a <adxl362_attr_set+0xda>
   1a540:	460a      	mov	r2, r1
		if (freq_int < adxl362_odr_map[i].freq_int ||
   1a542:	4d15      	ldr	r5, [pc, #84]	; (1a598 <adxl362_attr_set+0x108>)
   1a544:	f835 6022 	ldrh.w	r6, [r5, r2, lsl #2]
   1a548:	0090      	lsls	r0, r2, #2
   1a54a:	42b1      	cmp	r1, r6
   1a54c:	d304      	bcc.n	1a558 <adxl362_attr_set+0xc8>
   1a54e:	d109      	bne.n	1a564 <adxl362_attr_set+0xd4>
		     freq_milli <= adxl362_odr_map[i].freq_milli)) {
   1a550:	4428      	add	r0, r5
		    (freq_int == adxl362_odr_map[i].freq_int &&
   1a552:	8840      	ldrh	r0, [r0, #2]
   1a554:	4298      	cmp	r0, r3
   1a556:	d305      	bcc.n	1a564 <adxl362_attr_set+0xd4>
		return adxl362_set_output_rate(dev, out_rate);
   1a558:	4620      	mov	r0, r4
}
   1a55a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
		return adxl362_set_output_rate(dev, out_rate);
   1a55e:	b2d1      	uxtb	r1, r2
   1a560:	f02e b9e0 	b.w	48924 <adxl362_set_output_rate>
	for (i = 0; i < ARRAY_SIZE(adxl362_odr_map); i++) {
   1a564:	3201      	adds	r2, #1
   1a566:	2a06      	cmp	r2, #6
   1a568:	d1ec      	bne.n	1a544 <adxl362_attr_set+0xb4>
			return -ENOTSUP;
   1a56a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a56e:	e001      	b.n	1a574 <adxl362_attr_set+0xe4>
		return -EINVAL;
   1a570:	f06f 0015 	mvn.w	r0, #21
}
   1a574:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   1a578:	0095a33a 	.word	0x0095a33a
   1a57c:	00000000 	.word	0x00000000
   1a580:	004ad19d 	.word	0x004ad19d
   1a584:	00000000 	.word	0x00000000
   1a588:	ffb52e63 	.word	0xffb52e63
   1a58c:	ffffffff 	.word	0xffffffff
   1a590:	000f4240 	.word	0x000f4240
   1a594:	0004c912 	.word	0x0004c912
   1a598:	0004c91e 	.word	0x0004c91e
   1a59c:	00000000 	.word	0x00000000

0001a5a0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1a5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5a4:	4605      	mov	r5, r0
   1a5a6:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a5a8:	460c      	mov	r4, r1
   1a5aa:	b909      	cbnz	r1, 1a5b0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1a5ac:	2000      	movs	r0, #0
   1a5ae:	e024      	b.n	1a5fa <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a5b0:	6808      	ldr	r0, [r1, #0]
   1a5b2:	2800      	cmp	r0, #0
   1a5b4:	d0fa      	beq.n	1a5ac <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1a5b6:	688b      	ldr	r3, [r1, #8]
   1a5b8:	6862      	ldr	r2, [r4, #4]
   1a5ba:	1d19      	adds	r1, r3, #4
   1a5bc:	4291      	cmp	r1, r2
   1a5be:	d80b      	bhi.n	1a5d8 <parse_value+0x38>
   1a5c0:	2204      	movs	r2, #4
   1a5c2:	49b1      	ldr	r1, [pc, #708]	; (1a888 <parse_value+0x2e8>)
   1a5c4:	4418      	add	r0, r3
   1a5c6:	f027 f95b 	bl	41880 <strncmp>
   1a5ca:	b928      	cbnz	r0, 1a5d8 <parse_value+0x38>
        item->type = cJSON_NULL;
   1a5cc:	2304      	movs	r3, #4
   1a5ce:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a5d0:	68a3      	ldr	r3, [r4, #8]
   1a5d2:	3304      	adds	r3, #4
    input_buffer->offset++;
   1a5d4:	60a3      	str	r3, [r4, #8]
   1a5d6:	e073      	b.n	1a6c0 <parse_value+0x120>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1a5d8:	68a3      	ldr	r3, [r4, #8]
   1a5da:	6862      	ldr	r2, [r4, #4]
   1a5dc:	1d59      	adds	r1, r3, #5
   1a5de:	4291      	cmp	r1, r2
   1a5e0:	d80e      	bhi.n	1a600 <parse_value+0x60>
   1a5e2:	6820      	ldr	r0, [r4, #0]
   1a5e4:	2205      	movs	r2, #5
   1a5e6:	49a9      	ldr	r1, [pc, #676]	; (1a88c <parse_value+0x2ec>)
   1a5e8:	4418      	add	r0, r3
   1a5ea:	f027 f949 	bl	41880 <strncmp>
   1a5ee:	b938      	cbnz	r0, 1a600 <parse_value+0x60>
        item->type = cJSON_False;
   1a5f0:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1a5f2:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1a5f4:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1a5f6:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1a5f8:	60a3      	str	r3, [r4, #8]
}
   1a5fa:	b013      	add	sp, #76	; 0x4c
   1a5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1a600:	68a3      	ldr	r3, [r4, #8]
   1a602:	6862      	ldr	r2, [r4, #4]
   1a604:	1d19      	adds	r1, r3, #4
   1a606:	4291      	cmp	r1, r2
   1a608:	d80d      	bhi.n	1a626 <parse_value+0x86>
   1a60a:	6820      	ldr	r0, [r4, #0]
   1a60c:	2204      	movs	r2, #4
   1a60e:	49a0      	ldr	r1, [pc, #640]	; (1a890 <parse_value+0x2f0>)
   1a610:	4418      	add	r0, r3
   1a612:	f027 f935 	bl	41880 <strncmp>
   1a616:	b930      	cbnz	r0, 1a626 <parse_value+0x86>
        item->type = cJSON_True;
   1a618:	2302      	movs	r3, #2
        item->valueint = 1;
   1a61a:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1a61c:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a61e:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1a620:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1a622:	3304      	adds	r3, #4
   1a624:	e7e8      	b.n	1a5f8 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1a626:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
   1a62a:	4282      	cmp	r2, r0
   1a62c:	d2be      	bcs.n	1a5ac <parse_value+0xc>
   1a62e:	6821      	ldr	r1, [r4, #0]
   1a630:	5c8b      	ldrb	r3, [r1, r2]
   1a632:	188f      	adds	r7, r1, r2
   1a634:	2b22      	cmp	r3, #34	; 0x22
   1a636:	d104      	bne.n	1a642 <parse_value+0xa2>
        return parse_string(item, input_buffer);
   1a638:	4621      	mov	r1, r4
   1a63a:	4628      	mov	r0, r5
   1a63c:	f00a fc8c 	bl	24f58 <parse_string>
   1a640:	e7db      	b.n	1a5fa <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1a642:	2b2d      	cmp	r3, #45	; 0x2d
   1a644:	d003      	beq.n	1a64e <parse_value+0xae>
   1a646:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1a64a:	2e09      	cmp	r6, #9
   1a64c:	d84e      	bhi.n	1a6ec <parse_value+0x14c>
    unsigned char *after_end = NULL;
   1a64e:	2300      	movs	r3, #0
   1a650:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a652:	2900      	cmp	r1, #0
   1a654:	d0aa      	beq.n	1a5ac <parse_value+0xc>
   1a656:	1a82      	subs	r2, r0, r2
   1a658:	ae02      	add	r6, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1a65a:	5cf9      	ldrb	r1, [r7, r3]
   1a65c:	2939      	cmp	r1, #57	; 0x39
   1a65e:	d831      	bhi.n	1a6c4 <parse_value+0x124>
   1a660:	2930      	cmp	r1, #48	; 0x30
   1a662:	d205      	bcs.n	1a670 <parse_value+0xd0>
   1a664:	292d      	cmp	r1, #45	; 0x2d
   1a666:	d003      	beq.n	1a670 <parse_value+0xd0>
   1a668:	292e      	cmp	r1, #46	; 0x2e
   1a66a:	d001      	beq.n	1a670 <parse_value+0xd0>
   1a66c:	292b      	cmp	r1, #43	; 0x2b
   1a66e:	d105      	bne.n	1a67c <parse_value+0xdc>
                number_c_string[i] = decimal_point;
   1a670:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a672:	3301      	adds	r3, #1
   1a674:	2b3f      	cmp	r3, #63	; 0x3f
   1a676:	d001      	beq.n	1a67c <parse_value+0xdc>
   1a678:	429a      	cmp	r2, r3
   1a67a:	d1ee      	bne.n	1a65a <parse_value+0xba>
    number_c_string[i] = '\0';
   1a67c:	aa12      	add	r2, sp, #72	; 0x48
   1a67e:	4413      	add	r3, r2
   1a680:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a682:	a901      	add	r1, sp, #4
   1a684:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1a686:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a68a:	f027 fbef 	bl	41e6c <strtod>
    if (number_c_string == after_end)
   1a68e:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a690:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1a694:	42b7      	cmp	r7, r6
   1a696:	d089      	beq.n	1a5ac <parse_value+0xc>
    if (number >= INT_MAX)
   1a698:	a379      	add	r3, pc, #484	; (adr r3, 1a880 <parse_value+0x2e0>)
   1a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1a69e:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1a6a2:	ee10 0a10 	vmov	r0, s0
   1a6a6:	4649      	mov	r1, r9
   1a6a8:	f7fe fafc 	bl	18ca4 <__aeabi_dcmpge>
   1a6ac:	b170      	cbz	r0, 1a6cc <parse_value+0x12c>
        item->valueint = INT_MAX;
   1a6ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1a6b2:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1a6b4:	2308      	movs	r3, #8
   1a6b6:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a6b8:	68a3      	ldr	r3, [r4, #8]
   1a6ba:	1bb8      	subs	r0, r7, r6
   1a6bc:	4418      	add	r0, r3
   1a6be:	60a0      	str	r0, [r4, #8]
    return true;
   1a6c0:	2001      	movs	r0, #1
   1a6c2:	e79a      	b.n	1a5fa <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1a6c4:	2945      	cmp	r1, #69	; 0x45
   1a6c6:	d0d3      	beq.n	1a670 <parse_value+0xd0>
   1a6c8:	2965      	cmp	r1, #101	; 0x65
   1a6ca:	e7d0      	b.n	1a66e <parse_value+0xce>
    else if (number <= (double)INT_MIN)
   1a6cc:	2200      	movs	r2, #0
   1a6ce:	4b71      	ldr	r3, [pc, #452]	; (1a894 <parse_value+0x2f4>)
   1a6d0:	4640      	mov	r0, r8
   1a6d2:	4649      	mov	r1, r9
   1a6d4:	f7fe fadc 	bl	18c90 <__aeabi_dcmple>
   1a6d8:	b110      	cbz	r0, 1a6e0 <parse_value+0x140>
        item->valueint = INT_MIN;
   1a6da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a6de:	e7e8      	b.n	1a6b2 <parse_value+0x112>
        item->valueint = (int)number;
   1a6e0:	4640      	mov	r0, r8
   1a6e2:	4649      	mov	r1, r9
   1a6e4:	f7fe faf2 	bl	18ccc <__aeabi_d2iz>
   1a6e8:	6168      	str	r0, [r5, #20]
   1a6ea:	e7e3      	b.n	1a6b4 <parse_value+0x114>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1a6ec:	2b5b      	cmp	r3, #91	; 0x5b
   1a6ee:	d153      	bne.n	1a798 <parse_value+0x1f8>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a6f0:	68e3      	ldr	r3, [r4, #12]
   1a6f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a6f6:	f4bf af59 	bcs.w	1a5ac <parse_value+0xc>
    input_buffer->depth++;
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1a6fe:	5c8b      	ldrb	r3, [r1, r2]
   1a700:	2b5b      	cmp	r3, #91	; 0x5b
   1a702:	f47f af53 	bne.w	1a5ac <parse_value+0xc>
    input_buffer->offset++;
   1a706:	3201      	adds	r2, #1
   1a708:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a70a:	4620      	mov	r0, r4
   1a70c:	f02e fb8a 	bl	48e24 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1a710:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a714:	4293      	cmp	r3, r2
   1a716:	d25c      	bcs.n	1a7d2 <parse_value+0x232>
   1a718:	6822      	ldr	r2, [r4, #0]
   1a71a:	5cd2      	ldrb	r2, [r2, r3]
   1a71c:	2a5d      	cmp	r2, #93	; 0x5d
   1a71e:	d101      	bne.n	1a724 <parse_value+0x184>
    cJSON *head = NULL; /* head of the linked list */
   1a720:	2600      	movs	r6, #0
   1a722:	e027      	b.n	1a774 <parse_value+0x1d4>
    cJSON *current_item = NULL;
   1a724:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1a728:	4646      	mov	r6, r8
    input_buffer->offset--;
   1a72a:	3b01      	subs	r3, #1
   1a72c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a72e:	6920      	ldr	r0, [r4, #16]
   1a730:	f02e fc06 	bl	48f40 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a734:	4607      	mov	r7, r0
   1a736:	b340      	cbz	r0, 1a78a <parse_value+0x1ea>
        if (head == NULL)
   1a738:	b32e      	cbz	r6, 1a786 <parse_value+0x1e6>
            current_item->next = new_item;
   1a73a:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a73e:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a742:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a744:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a746:	3301      	adds	r3, #1
   1a748:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a74a:	f02e fb6b 	bl	48e24 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a74e:	4621      	mov	r1, r4
   1a750:	4638      	mov	r0, r7
   1a752:	f7ff ff25 	bl	1a5a0 <parse_value>
   1a756:	b1d8      	cbz	r0, 1a790 <parse_value+0x1f0>
        buffer_skip_whitespace(input_buffer);
   1a758:	4620      	mov	r0, r4
   1a75a:	f02e fb63 	bl	48e24 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a75e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a762:	4293      	cmp	r3, r2
   1a764:	d214      	bcs.n	1a790 <parse_value+0x1f0>
   1a766:	6822      	ldr	r2, [r4, #0]
   1a768:	46b8      	mov	r8, r7
   1a76a:	5cd3      	ldrb	r3, [r2, r3]
   1a76c:	2b2c      	cmp	r3, #44	; 0x2c
   1a76e:	d0de      	beq.n	1a72e <parse_value+0x18e>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1a770:	2b5d      	cmp	r3, #93	; 0x5d
   1a772:	d10d      	bne.n	1a790 <parse_value+0x1f0>
    input_buffer->depth--;
   1a774:	68e3      	ldr	r3, [r4, #12]
   1a776:	3b01      	subs	r3, #1
   1a778:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1a77a:	2320      	movs	r3, #32
    item->child = head;
   1a77c:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1a780:	68a3      	ldr	r3, [r4, #8]
   1a782:	3301      	adds	r3, #1
   1a784:	e726      	b.n	1a5d4 <parse_value+0x34>
        if (head == NULL)
   1a786:	4606      	mov	r6, r0
   1a788:	e7db      	b.n	1a742 <parse_value+0x1a2>
    if (head != NULL)
   1a78a:	2e00      	cmp	r6, #0
   1a78c:	f43f af0e 	beq.w	1a5ac <parse_value+0xc>
        cJSON_Delete(head);
   1a790:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1a792:	f00a ffa3 	bl	256dc <cJSON_Delete>
   1a796:	e709      	b.n	1a5ac <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1a798:	2b7b      	cmp	r3, #123	; 0x7b
   1a79a:	f47f af07 	bne.w	1a5ac <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a79e:	68e3      	ldr	r3, [r4, #12]
   1a7a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a7a4:	f4bf af02 	bcs.w	1a5ac <parse_value+0xc>
    input_buffer->depth++;
   1a7a8:	3301      	adds	r3, #1
   1a7aa:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1a7ac:	5c8b      	ldrb	r3, [r1, r2]
   1a7ae:	2b7b      	cmp	r3, #123	; 0x7b
   1a7b0:	f47f aefc 	bne.w	1a5ac <parse_value+0xc>
    input_buffer->offset++;
   1a7b4:	3201      	adds	r2, #1
   1a7b6:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a7b8:	4620      	mov	r0, r4
   1a7ba:	f02e fb33 	bl	48e24 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1a7be:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a7c2:	4293      	cmp	r3, r2
   1a7c4:	d205      	bcs.n	1a7d2 <parse_value+0x232>
   1a7c6:	6822      	ldr	r2, [r4, #0]
   1a7c8:	5cd2      	ldrb	r2, [r2, r3]
   1a7ca:	2a7d      	cmp	r2, #125	; 0x7d
   1a7cc:	d104      	bne.n	1a7d8 <parse_value+0x238>
    cJSON *head = NULL; /* linked list head */
   1a7ce:	2700      	movs	r7, #0
   1a7d0:	e046      	b.n	1a860 <parse_value+0x2c0>
        input_buffer->offset--;
   1a7d2:	3b01      	subs	r3, #1
   1a7d4:	60a3      	str	r3, [r4, #8]
   1a7d6:	e6e9      	b.n	1a5ac <parse_value+0xc>
    cJSON *current_item = NULL;
   1a7d8:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1a7dc:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1a7de:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1a7e0:	3b01      	subs	r3, #1
   1a7e2:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a7e4:	6920      	ldr	r0, [r4, #16]
   1a7e6:	f02e fbab 	bl	48f40 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a7ea:	4606      	mov	r6, r0
   1a7ec:	2800      	cmp	r0, #0
   1a7ee:	d040      	beq.n	1a872 <parse_value+0x2d2>
        if (head == NULL)
   1a7f0:	2f00      	cmp	r7, #0
   1a7f2:	d03c      	beq.n	1a86e <parse_value+0x2ce>
            current_item->next = new_item;
   1a7f4:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a7f8:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a7fc:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a7fe:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a800:	3301      	adds	r3, #1
   1a802:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a804:	f02e fb0e 	bl	48e24 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1a808:	4621      	mov	r1, r4
   1a80a:	4630      	mov	r0, r6
   1a80c:	f00a fba4 	bl	24f58 <parse_string>
   1a810:	b390      	cbz	r0, 1a878 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a812:	4620      	mov	r0, r4
   1a814:	f02e fb06 	bl	48e24 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1a818:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1a81a:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1a81e:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1a820:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a824:	4293      	cmp	r3, r2
   1a826:	d227      	bcs.n	1a878 <parse_value+0x2d8>
   1a828:	6822      	ldr	r2, [r4, #0]
   1a82a:	5cd2      	ldrb	r2, [r2, r3]
   1a82c:	2a3a      	cmp	r2, #58	; 0x3a
   1a82e:	d123      	bne.n	1a878 <parse_value+0x2d8>
        input_buffer->offset++;
   1a830:	3301      	adds	r3, #1
   1a832:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a834:	4620      	mov	r0, r4
   1a836:	f02e faf5 	bl	48e24 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a83a:	4621      	mov	r1, r4
   1a83c:	4630      	mov	r0, r6
   1a83e:	f7ff feaf 	bl	1a5a0 <parse_value>
   1a842:	b1c8      	cbz	r0, 1a878 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a844:	4620      	mov	r0, r4
   1a846:	f02e faed 	bl	48e24 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a84a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a84e:	4293      	cmp	r3, r2
   1a850:	d212      	bcs.n	1a878 <parse_value+0x2d8>
   1a852:	6822      	ldr	r2, [r4, #0]
   1a854:	46b0      	mov	r8, r6
   1a856:	5cd3      	ldrb	r3, [r2, r3]
   1a858:	2b2c      	cmp	r3, #44	; 0x2c
   1a85a:	d0c3      	beq.n	1a7e4 <parse_value+0x244>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1a85c:	2b7d      	cmp	r3, #125	; 0x7d
   1a85e:	d10b      	bne.n	1a878 <parse_value+0x2d8>
    input_buffer->depth--;
   1a860:	68e3      	ldr	r3, [r4, #12]
   1a862:	3b01      	subs	r3, #1
   1a864:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1a866:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1a868:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1a86c:	e788      	b.n	1a780 <parse_value+0x1e0>
        if (head == NULL)
   1a86e:	4607      	mov	r7, r0
   1a870:	e7c4      	b.n	1a7fc <parse_value+0x25c>
    if (head != NULL)
   1a872:	2f00      	cmp	r7, #0
   1a874:	f43f ae9a 	beq.w	1a5ac <parse_value+0xc>
        cJSON_Delete(head);
   1a878:	4638      	mov	r0, r7
   1a87a:	e78a      	b.n	1a792 <parse_value+0x1f2>
   1a87c:	f3af 8000 	nop.w
   1a880:	ffc00000 	.word	0xffc00000
   1a884:	41dfffff 	.word	0x41dfffff
   1a888:	0004f154 	.word	0x0004f154
   1a88c:	0004f16b 	.word	0x0004f16b
   1a890:	0004f171 	.word	0x0004f171
   1a894:	c1e00000 	.word	0xc1e00000

0001a898 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a898:	4b17      	ldr	r3, [pc, #92]	; (1a8f8 <cJSON_CreateNumber+0x60>)
{
   1a89a:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a89c:	6818      	ldr	r0, [r3, #0]
{
   1a89e:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a8a2:	f02e fb4d 	bl	48f40 <cJSON_New_Item.isra.1>
    if(item)
   1a8a6:	4604      	mov	r4, r0
   1a8a8:	b170      	cbz	r0, 1a8c8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1a8aa:	2308      	movs	r3, #8
        item->valuedouble = num;
   1a8ac:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1a8b0:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1a8b2:	4639      	mov	r1, r7
   1a8b4:	a30e      	add	r3, pc, #56	; (adr r3, 1a8f0 <cJSON_CreateNumber+0x58>)
   1a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a8ba:	4630      	mov	r0, r6
   1a8bc:	f7fe f9f2 	bl	18ca4 <__aeabi_dcmpge>
   1a8c0:	b120      	cbz	r0, 1a8cc <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1a8c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1a8c6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1a8c8:	4620      	mov	r0, r4
   1a8ca:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1a8cc:	2200      	movs	r2, #0
   1a8ce:	4b0b      	ldr	r3, [pc, #44]	; (1a8fc <cJSON_CreateNumber+0x64>)
   1a8d0:	4630      	mov	r0, r6
   1a8d2:	4639      	mov	r1, r7
   1a8d4:	f7fe f9dc 	bl	18c90 <__aeabi_dcmple>
   1a8d8:	b110      	cbz	r0, 1a8e0 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1a8da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a8de:	e7f2      	b.n	1a8c6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1a8e0:	4630      	mov	r0, r6
   1a8e2:	4639      	mov	r1, r7
   1a8e4:	f7fe f9f2 	bl	18ccc <__aeabi_d2iz>
   1a8e8:	6160      	str	r0, [r4, #20]
    return item;
   1a8ea:	e7ed      	b.n	1a8c8 <cJSON_CreateNumber+0x30>
   1a8ec:	f3af 8000 	nop.w
   1a8f0:	ffc00000 	.word	0xffc00000
   1a8f4:	41dfffff 	.word	0x41dfffff
   1a8f8:	20031b60 	.word	0x20031b60
   1a8fc:	c1e00000 	.word	0xc1e00000

0001a900 <_strtod_l>:
   1a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a904:	461d      	mov	r5, r3
   1a906:	b0a3      	sub	sp, #140	; 0x8c
   1a908:	2300      	movs	r3, #0
   1a90a:	4683      	mov	fp, r0
   1a90c:	4628      	mov	r0, r5
   1a90e:	4688      	mov	r8, r1
   1a910:	9206      	str	r2, [sp, #24]
   1a912:	2400      	movs	r4, #0
   1a914:	931e      	str	r3, [sp, #120]	; 0x78
   1a916:	f02b f86d 	bl	459f4 <__localeconv_l>
   1a91a:	2300      	movs	r3, #0
   1a91c:	4606      	mov	r6, r0
   1a91e:	6800      	ldr	r0, [r0, #0]
   1a920:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a924:	f026 ff7e 	bl	41824 <strlen>
   1a928:	4643      	mov	r3, r8
   1a92a:	4681      	mov	r9, r0
   1a92c:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1a930:	461a      	mov	r2, r3
   1a932:	f813 4b01 	ldrb.w	r4, [r3], #1
   1a936:	2c2d      	cmp	r4, #45	; 0x2d
   1a938:	f200 8109 	bhi.w	1ab4e <_strtod_l+0x24e>
   1a93c:	e8df f014 	tbh	[pc, r4, lsl #1]
   1a940:	010700c9 	.word	0x010700c9
   1a944:	01070107 	.word	0x01070107
   1a948:	01070107 	.word	0x01070107
   1a94c:	01070107 	.word	0x01070107
   1a950:	00da0107 	.word	0x00da0107
   1a954:	00da00da 	.word	0x00da00da
   1a958:	00da00da 	.word	0x00da00da
   1a95c:	01070107 	.word	0x01070107
   1a960:	01070107 	.word	0x01070107
   1a964:	01070107 	.word	0x01070107
   1a968:	01070107 	.word	0x01070107
   1a96c:	01070107 	.word	0x01070107
   1a970:	01070107 	.word	0x01070107
   1a974:	01070107 	.word	0x01070107
   1a978:	01070107 	.word	0x01070107
   1a97c:	01070107 	.word	0x01070107
   1a980:	010700da 	.word	0x010700da
   1a984:	01070107 	.word	0x01070107
   1a988:	01070107 	.word	0x01070107
   1a98c:	01070107 	.word	0x01070107
   1a990:	01070107 	.word	0x01070107
   1a994:	002e0107 	.word	0x002e0107
   1a998:	00d70107 	.word	0x00d70107
   1a99c:	2300      	movs	r3, #0
   1a99e:	9307      	str	r3, [sp, #28]
   1a9a0:	f102 0a01 	add.w	sl, r2, #1
   1a9a4:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
   1a9a8:	7854      	ldrb	r4, [r2, #1]
   1a9aa:	2c00      	cmp	r4, #0
   1a9ac:	f000 8091 	beq.w	1aad2 <_strtod_l+0x1d2>
   1a9b0:	2c30      	cmp	r4, #48	; 0x30
   1a9b2:	f000 80d2 	beq.w	1ab5a <_strtod_l+0x25a>
   1a9b6:	2300      	movs	r3, #0
   1a9b8:	930a      	str	r3, [sp, #40]	; 0x28
   1a9ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a9be:	6831      	ldr	r1, [r6, #0]
   1a9c0:	2b09      	cmp	r3, #9
   1a9c2:	f200 82a2 	bhi.w	1af0a <_strtod_l+0x60a>
   1a9c6:	2600      	movs	r6, #0
   1a9c8:	4650      	mov	r0, sl
   1a9ca:	4637      	mov	r7, r6
   1a9cc:	4635      	mov	r5, r6
   1a9ce:	2d08      	cmp	r5, #8
   1a9d0:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   1a9d4:	f100 0001 	add.w	r0, r0, #1
   1a9d8:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   1a9dc:	bfd8      	it	le
   1a9de:	eb03 0744 	addle.w	r7, r3, r4, lsl #1
   1a9e2:	f105 0501 	add.w	r5, r5, #1
   1a9e6:	901d      	str	r0, [sp, #116]	; 0x74
   1a9e8:	bfc8      	it	gt
   1a9ea:	eb03 0642 	addgt.w	r6, r3, r2, lsl #1
   1a9ee:	7804      	ldrb	r4, [r0, #0]
   1a9f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a9f4:	2b09      	cmp	r3, #9
   1a9f6:	d9ea      	bls.n	1a9ce <_strtod_l+0xce>
   1a9f8:	464a      	mov	r2, r9
   1a9fa:	f026 ff41 	bl	41880 <strncmp>
   1a9fe:	4601      	mov	r1, r0
   1aa00:	2800      	cmp	r0, #0
   1aa02:	d079      	beq.n	1aaf8 <_strtod_l+0x1f8>
   1aa04:	2300      	movs	r3, #0
   1aa06:	9508      	str	r5, [sp, #32]
   1aa08:	4619      	mov	r1, r3
   1aa0a:	469c      	mov	ip, r3
   1aa0c:	f024 0220 	bic.w	r2, r4, #32
   1aa10:	2a45      	cmp	r2, #69	; 0x45
   1aa12:	f040 80b4 	bne.w	1ab7e <_strtod_l+0x27e>
   1aa16:	ea45 0203 	orr.w	r2, r5, r3
   1aa1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1aa1c:	4302      	orrs	r2, r0
   1aa1e:	d058      	beq.n	1aad2 <_strtod_l+0x1d2>
   1aa20:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1aa24:	f108 0201 	add.w	r2, r8, #1
   1aa28:	921d      	str	r2, [sp, #116]	; 0x74
   1aa2a:	f898 4001 	ldrb.w	r4, [r8, #1]
   1aa2e:	2c2b      	cmp	r4, #43	; 0x2b
   1aa30:	f000 8408 	beq.w	1b244 <_strtod_l+0x944>
   1aa34:	2c2d      	cmp	r4, #45	; 0x2d
   1aa36:	f000 828b 	beq.w	1af50 <_strtod_l+0x650>
   1aa3a:	f04f 0900 	mov.w	r9, #0
   1aa3e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1aa42:	2a09      	cmp	r2, #9
   1aa44:	f200 8396 	bhi.w	1b174 <_strtod_l+0x874>
   1aa48:	2c30      	cmp	r4, #48	; 0x30
   1aa4a:	d105      	bne.n	1aa58 <_strtod_l+0x158>
   1aa4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1aa4e:	3201      	adds	r2, #1
   1aa50:	921d      	str	r2, [sp, #116]	; 0x74
   1aa52:	7814      	ldrb	r4, [r2, #0]
   1aa54:	2c30      	cmp	r4, #48	; 0x30
   1aa56:	d0fa      	beq.n	1aa4e <_strtod_l+0x14e>
   1aa58:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
   1aa5c:	2a08      	cmp	r2, #8
   1aa5e:	f200 808e 	bhi.w	1ab7e <_strtod_l+0x27e>
   1aa62:	981d      	ldr	r0, [sp, #116]	; 0x74
   1aa64:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1aa68:	900c      	str	r0, [sp, #48]	; 0x30
   1aa6a:	4604      	mov	r4, r0
   1aa6c:	3001      	adds	r0, #1
   1aa6e:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa70:	901d      	str	r0, [sp, #116]	; 0x74
   1aa72:	7864      	ldrb	r4, [r4, #1]
   1aa74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1aa78:	f1be 0f09 	cmp.w	lr, #9
   1aa7c:	d80d      	bhi.n	1aa9a <_strtod_l+0x19a>
   1aa7e:	3001      	adds	r0, #1
   1aa80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1aa84:	901d      	str	r0, [sp, #116]	; 0x74
   1aa86:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1aa8a:	7804      	ldrb	r4, [r0, #0]
   1aa8c:	3a30      	subs	r2, #48	; 0x30
   1aa8e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1aa92:	f1be 0f09 	cmp.w	lr, #9
   1aa96:	d9f2      	bls.n	1aa7e <_strtod_l+0x17e>
   1aa98:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1aa9c:	1a80      	subs	r0, r0, r2
   1aa9e:	2808      	cmp	r0, #8
   1aaa0:	dc04      	bgt.n	1aaac <_strtod_l+0x1ac>
   1aaa2:	f644 601f 	movw	r0, #19999	; 0x4e1f
   1aaa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1aaa8:	4282      	cmp	r2, r0
   1aaaa:	dd02      	ble.n	1aab2 <_strtod_l+0x1b2>
   1aaac:	f644 621f 	movw	r2, #19999	; 0x4e1f
   1aab0:	920b      	str	r2, [sp, #44]	; 0x2c
   1aab2:	f1b9 0f00 	cmp.w	r9, #0
   1aab6:	d002      	beq.n	1aabe <_strtod_l+0x1be>
   1aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1aaba:	4252      	negs	r2, r2
   1aabc:	920b      	str	r2, [sp, #44]	; 0x2c
   1aabe:	2d00      	cmp	r5, #0
   1aac0:	d161      	bne.n	1ab86 <_strtod_l+0x286>
   1aac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1aac4:	4313      	orrs	r3, r2
   1aac6:	f040 8097 	bne.w	1abf8 <_strtod_l+0x2f8>
   1aaca:	f1bc 0f00 	cmp.w	ip, #0
   1aace:	f000 8256 	beq.w	1af7e <_strtod_l+0x67e>
   1aad2:	9b06      	ldr	r3, [sp, #24]
   1aad4:	b113      	cbz	r3, 1aadc <_strtod_l+0x1dc>
   1aad6:	9b06      	ldr	r3, [sp, #24]
   1aad8:	f8c3 8000 	str.w	r8, [r3]
   1aadc:	f04f 0800 	mov.w	r8, #0
   1aae0:	f04f 0900 	mov.w	r9, #0
   1aae4:	ec49 8b10 	vmov	d0, r8, r9
   1aae8:	b023      	add	sp, #140	; 0x8c
   1aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaee:	2301      	movs	r3, #1
   1aaf0:	9307      	str	r3, [sp, #28]
   1aaf2:	e755      	b.n	1a9a0 <_strtod_l+0xa0>
   1aaf4:	931d      	str	r3, [sp, #116]	; 0x74
   1aaf6:	e71b      	b.n	1a930 <_strtod_l+0x30>
   1aaf8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1aafa:	460b      	mov	r3, r1
   1aafc:	9508      	str	r5, [sp, #32]
   1aafe:	eb02 0009 	add.w	r0, r2, r9
   1ab02:	901d      	str	r0, [sp, #116]	; 0x74
   1ab04:	f812 4009 	ldrb.w	r4, [r2, r9]
   1ab08:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1ab0c:	2a09      	cmp	r2, #9
   1ab0e:	f200 80a0 	bhi.w	1ac52 <_strtod_l+0x352>
   1ab12:	1c58      	adds	r0, r3, #1
   1ab14:	4696      	mov	lr, r2
   1ab16:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
   1ab1a:	2a00      	cmp	r2, #0
   1ab1c:	f000 867c 	beq.w	1b818 <_strtod_l+0xf18>
   1ab20:	2801      	cmp	r0, #1
   1ab22:	4401      	add	r1, r0
   1ab24:	f000 8672 	beq.w	1b80c <_strtod_l+0xf0c>
   1ab28:	442b      	add	r3, r5
   1ab2a:	e004      	b.n	1ab36 <_strtod_l+0x236>
   1ab2c:	0067      	lsls	r7, r4, #1
   1ab2e:	4283      	cmp	r3, r0
   1ab30:	4605      	mov	r5, r0
   1ab32:	f000 8460 	beq.w	1b3f6 <_strtod_l+0xaf6>
   1ab36:	2d08      	cmp	r5, #8
   1ab38:	f105 0001 	add.w	r0, r5, #1
   1ab3c:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   1ab40:	ddf4      	ble.n	1ab2c <_strtod_l+0x22c>
   1ab42:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1ab46:	2810      	cmp	r0, #16
   1ab48:	bfd8      	it	le
   1ab4a:	0066      	lslle	r6, r4, #1
   1ab4c:	e7ef      	b.n	1ab2e <_strtod_l+0x22e>
   1ab4e:	2300      	movs	r3, #0
   1ab50:	2c30      	cmp	r4, #48	; 0x30
   1ab52:	4692      	mov	sl, r2
   1ab54:	9307      	str	r3, [sp, #28]
   1ab56:	f47f af2e 	bne.w	1a9b6 <_strtod_l+0xb6>
   1ab5a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1ab5e:	2b58      	cmp	r3, #88	; 0x58
   1ab60:	d03a      	beq.n	1abd8 <_strtod_l+0x2d8>
   1ab62:	2b78      	cmp	r3, #120	; 0x78
   1ab64:	d038      	beq.n	1abd8 <_strtod_l+0x2d8>
   1ab66:	4653      	mov	r3, sl
   1ab68:	3301      	adds	r3, #1
   1ab6a:	931d      	str	r3, [sp, #116]	; 0x74
   1ab6c:	781c      	ldrb	r4, [r3, #0]
   1ab6e:	2c30      	cmp	r4, #48	; 0x30
   1ab70:	d0fa      	beq.n	1ab68 <_strtod_l+0x268>
   1ab72:	469a      	mov	sl, r3
   1ab74:	2c00      	cmp	r4, #0
   1ab76:	d03f      	beq.n	1abf8 <_strtod_l+0x2f8>
   1ab78:	2301      	movs	r3, #1
   1ab7a:	930a      	str	r3, [sp, #40]	; 0x28
   1ab7c:	e71d      	b.n	1a9ba <_strtod_l+0xba>
   1ab7e:	2200      	movs	r2, #0
   1ab80:	920b      	str	r2, [sp, #44]	; 0x2c
   1ab82:	2d00      	cmp	r5, #0
   1ab84:	d09d      	beq.n	1aac2 <_strtod_l+0x1c2>
   1ab86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab88:	4638      	mov	r0, r7
   1ab8a:	462c      	mov	r4, r5
   1ab8c:	1a5b      	subs	r3, r3, r1
   1ab8e:	930b      	str	r3, [sp, #44]	; 0x2c
   1ab90:	9b08      	ldr	r3, [sp, #32]
   1ab92:	461a      	mov	r2, r3
   1ab94:	2b00      	cmp	r3, #0
   1ab96:	bf08      	it	eq
   1ab98:	462a      	moveq	r2, r5
   1ab9a:	9208      	str	r2, [sp, #32]
   1ab9c:	f7fd fd82 	bl	186a4 <__aeabi_ui2d>
   1aba0:	2d10      	cmp	r5, #16
   1aba2:	bfa8      	it	ge
   1aba4:	2410      	movge	r4, #16
   1aba6:	2d09      	cmp	r5, #9
   1aba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abac:	dc54      	bgt.n	1ac58 <_strtod_l+0x358>
   1abae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abb0:	2b00      	cmp	r3, #0
   1abb2:	d04b      	beq.n	1ac4c <_strtod_l+0x34c>
   1abb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abb6:	f340 84c4 	ble.w	1b542 <_strtod_l+0xc42>
   1abba:	2b16      	cmp	r3, #22
   1abbc:	f300 84e1 	bgt.w	1b582 <_strtod_l+0xc82>
   1abc0:	494a      	ldr	r1, [pc, #296]	; (1acec <_strtod_l+0x3ec>)
   1abc2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1abc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1abca:	e9d1 0100 	ldrd	r0, r1, [r1]
   1abce:	f7fd fde3 	bl	18798 <__aeabi_dmul>
   1abd2:	4680      	mov	r8, r0
   1abd4:	4689      	mov	r9, r1
   1abd6:	e013      	b.n	1ac00 <_strtod_l+0x300>
   1abd8:	9b07      	ldr	r3, [sp, #28]
   1abda:	aa1e      	add	r2, sp, #120	; 0x78
   1abdc:	9502      	str	r5, [sp, #8]
   1abde:	a91d      	add	r1, sp, #116	; 0x74
   1abe0:	9301      	str	r3, [sp, #4]
   1abe2:	4658      	mov	r0, fp
   1abe4:	9200      	str	r2, [sp, #0]
   1abe6:	ab1f      	add	r3, sp, #124	; 0x7c
   1abe8:	4a41      	ldr	r2, [pc, #260]	; (1acf0 <_strtod_l+0x3f0>)
   1abea:	f02a fb8b 	bl	45304 <__gethex>
   1abee:	f010 0507 	ands.w	r5, r0, #7
   1abf2:	4604      	mov	r4, r0
   1abf4:	f040 81b4 	bne.w	1af60 <_strtod_l+0x660>
   1abf8:	f04f 0800 	mov.w	r8, #0
   1abfc:	f04f 0900 	mov.w	r9, #0
   1ac00:	9a06      	ldr	r2, [sp, #24]
   1ac02:	b10a      	cbz	r2, 1ac08 <_strtod_l+0x308>
   1ac04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ac06:	6013      	str	r3, [r2, #0]
   1ac08:	9b07      	ldr	r3, [sp, #28]
   1ac0a:	2b00      	cmp	r3, #0
   1ac0c:	f43f af6a 	beq.w	1aae4 <_strtod_l+0x1e4>
   1ac10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1ac14:	4699      	mov	r9, r3
   1ac16:	ec49 8b10 	vmov	d0, r8, r9
   1ac1a:	b023      	add	sp, #140	; 0x8c
   1ac1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac20:	4934      	ldr	r1, [pc, #208]	; (1acf4 <_strtod_l+0x3f4>)
   1ac22:	a81d      	add	r0, sp, #116	; 0x74
   1ac24:	f02a fe00 	bl	45828 <__match>
   1ac28:	2800      	cmp	r0, #0
   1ac2a:	f43f af52 	beq.w	1aad2 <_strtod_l+0x1d2>
   1ac2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ac30:	a81d      	add	r0, sp, #116	; 0x74
   1ac32:	4931      	ldr	r1, [pc, #196]	; (1acf8 <_strtod_l+0x3f8>)
   1ac34:	3b01      	subs	r3, #1
   1ac36:	931d      	str	r3, [sp, #116]	; 0x74
   1ac38:	f02a fdf6 	bl	45828 <__match>
   1ac3c:	b910      	cbnz	r0, 1ac44 <_strtod_l+0x344>
   1ac3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ac40:	3301      	adds	r3, #1
   1ac42:	931d      	str	r3, [sp, #116]	; 0x74
   1ac44:	2300      	movs	r3, #0
   1ac46:	4c2d      	ldr	r4, [pc, #180]	; (1acfc <_strtod_l+0x3fc>)
   1ac48:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1ac4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1ac50:	e7d6      	b.n	1ac00 <_strtod_l+0x300>
   1ac52:	f04f 0c01 	mov.w	ip, #1
   1ac56:	e6d9      	b.n	1aa0c <_strtod_l+0x10c>
   1ac58:	4b24      	ldr	r3, [pc, #144]	; (1acec <_strtod_l+0x3ec>)
   1ac5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ac5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ac62:	f7fd fd99 	bl	18798 <__aeabi_dmul>
   1ac66:	4680      	mov	r8, r0
   1ac68:	4689      	mov	r9, r1
   1ac6a:	4630      	mov	r0, r6
   1ac6c:	f7fd fd1a 	bl	186a4 <__aeabi_ui2d>
   1ac70:	4602      	mov	r2, r0
   1ac72:	460b      	mov	r3, r1
   1ac74:	4640      	mov	r0, r8
   1ac76:	4649      	mov	r1, r9
   1ac78:	f7fd fbd8 	bl	1842c <__adddf3>
   1ac7c:	2d0f      	cmp	r5, #15
   1ac7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac82:	dd94      	ble.n	1abae <_strtod_l+0x2ae>
   1ac84:	1b2c      	subs	r4, r5, r4
   1ac86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac88:	441c      	add	r4, r3
   1ac8a:	2c00      	cmp	r4, #0
   1ac8c:	f340 830b 	ble.w	1b2a6 <_strtod_l+0x9a6>
   1ac90:	f014 030f 	ands.w	r3, r4, #15
   1ac94:	d00a      	beq.n	1acac <_strtod_l+0x3ac>
   1ac96:	4915      	ldr	r1, [pc, #84]	; (1acec <_strtod_l+0x3ec>)
   1ac98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ac9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1aca0:	e9d1 0100 	ldrd	r0, r1, [r1]
   1aca4:	f7fd fd78 	bl	18798 <__aeabi_dmul>
   1aca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acac:	f034 040f 	bics.w	r4, r4, #15
   1acb0:	f040 81c0 	bne.w	1b034 <_strtod_l+0x734>
   1acb4:	2300      	movs	r3, #0
   1acb6:	930a      	str	r3, [sp, #40]	; 0x28
   1acb8:	9700      	str	r7, [sp, #0]
   1acba:	462b      	mov	r3, r5
   1acbc:	9a08      	ldr	r2, [sp, #32]
   1acbe:	4651      	mov	r1, sl
   1acc0:	4658      	mov	r0, fp
   1acc2:	f02b f83f 	bl	45d44 <__s2b>
   1acc6:	9012      	str	r0, [sp, #72]	; 0x48
   1acc8:	2800      	cmp	r0, #0
   1acca:	f000 83ea 	beq.w	1b4a2 <_strtod_l+0xba2>
   1acce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1acd0:	2100      	movs	r1, #0
   1acd2:	2a00      	cmp	r2, #0
   1acd4:	f1c2 0300 	rsb	r3, r2, #0
   1acd8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1acdc:	460f      	mov	r7, r1
   1acde:	bfa8      	it	ge
   1ace0:	460b      	movge	r3, r1
   1ace2:	4689      	mov	r9, r1
   1ace4:	9213      	str	r2, [sp, #76]	; 0x4c
   1ace6:	930e      	str	r3, [sp, #56]	; 0x38
   1ace8:	e0d0      	b.n	1ae8c <_strtod_l+0x58c>
   1acea:	bf00      	nop
   1acec:	0004a878 	.word	0x0004a878
   1acf0:	0004c5e4 	.word	0x0004c5e4
   1acf4:	0004c5d4 	.word	0x0004c5d4
   1acf8:	0004c5d8 	.word	0x0004c5d8
   1acfc:	7ff00000 	.word	0x7ff00000
   1ad00:	1ad2      	subs	r2, r2, r3
   1ad02:	2a1f      	cmp	r2, #31
   1ad04:	eba4 0402 	sub.w	r4, r4, r2
   1ad08:	f300 8239 	bgt.w	1b17e <_strtod_l+0x87e>
   1ad0c:	2301      	movs	r3, #1
   1ad0e:	2100      	movs	r1, #0
   1ad10:	4093      	lsls	r3, r2
   1ad12:	9110      	str	r1, [sp, #64]	; 0x40
   1ad14:	930c      	str	r3, [sp, #48]	; 0x30
   1ad16:	4425      	add	r5, r4
   1ad18:	4434      	add	r4, r6
   1ad1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad1c:	42a6      	cmp	r6, r4
   1ad1e:	441d      	add	r5, r3
   1ad20:	4633      	mov	r3, r6
   1ad22:	bfa8      	it	ge
   1ad24:	4623      	movge	r3, r4
   1ad26:	42ab      	cmp	r3, r5
   1ad28:	bfa8      	it	ge
   1ad2a:	462b      	movge	r3, r5
   1ad2c:	2b00      	cmp	r3, #0
   1ad2e:	dd02      	ble.n	1ad36 <_strtod_l+0x436>
   1ad30:	1ae4      	subs	r4, r4, r3
   1ad32:	1aed      	subs	r5, r5, r3
   1ad34:	1af6      	subs	r6, r6, r3
   1ad36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ad38:	2b00      	cmp	r3, #0
   1ad3a:	f040 8198 	bne.w	1b06e <_strtod_l+0x76e>
   1ad3e:	2c00      	cmp	r4, #0
   1ad40:	f300 81c2 	bgt.w	1b0c8 <_strtod_l+0x7c8>
   1ad44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	f300 81e6 	bgt.w	1b118 <_strtod_l+0x818>
   1ad4c:	2d00      	cmp	r5, #0
   1ad4e:	f300 81ef 	bgt.w	1b130 <_strtod_l+0x830>
   1ad52:	2e00      	cmp	r6, #0
   1ad54:	dd08      	ble.n	1ad68 <_strtod_l+0x468>
   1ad56:	4639      	mov	r1, r7
   1ad58:	4632      	mov	r2, r6
   1ad5a:	4658      	mov	r0, fp
   1ad5c:	f02b f990 	bl	46080 <__lshift>
   1ad60:	4607      	mov	r7, r0
   1ad62:	2800      	cmp	r0, #0
   1ad64:	f000 81e1 	beq.w	1b12a <_strtod_l+0x82a>
   1ad68:	4652      	mov	r2, sl
   1ad6a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ad6c:	4658      	mov	r0, fp
   1ad6e:	f02b f9ff 	bl	46170 <__mdiff>
   1ad72:	4681      	mov	r9, r0
   1ad74:	2800      	cmp	r0, #0
   1ad76:	f000 81d8 	beq.w	1b12a <_strtod_l+0x82a>
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	68c2      	ldr	r2, [r0, #12]
   1ad7e:	4639      	mov	r1, r7
   1ad80:	60c3      	str	r3, [r0, #12]
   1ad82:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad84:	f02b f9d8 	bl	46138 <__mcmp>
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	f2c0 842a 	blt.w	1b5e2 <_strtod_l+0xce2>
   1ad8e:	9e05      	ldr	r6, [sp, #20]
   1ad90:	f000 84b6 	beq.w	1b700 <_strtod_l+0xe00>
   1ad94:	4639      	mov	r1, r7
   1ad96:	4648      	mov	r0, r9
   1ad98:	f02b fb52 	bl	46440 <__ratio>
   1ad9c:	2200      	movs	r2, #0
   1ad9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ada2:	ee10 0a10 	vmov	r0, s0
   1ada6:	ec55 4b10 	vmov	r4, r5, d0
   1adaa:	4629      	mov	r1, r5
   1adac:	f7fd ff70 	bl	18c90 <__aeabi_dcmple>
   1adb0:	2800      	cmp	r0, #0
   1adb2:	f000 81c7 	beq.w	1b144 <_strtod_l+0x844>
   1adb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1adb8:	2b00      	cmp	r3, #0
   1adba:	f000 81e8 	beq.w	1b18e <_strtod_l+0x88e>
   1adbe:	2300      	movs	r3, #0
   1adc0:	4cbb      	ldr	r4, [pc, #748]	; (1b0b0 <_strtod_l+0x7b0>)
   1adc2:	ed9f 7bb7 	vldr	d7, [pc, #732]	; 1b0a0 <_strtod_l+0x7a0>
   1adc6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1adca:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1adce:	4db9      	ldr	r5, [pc, #740]	; (1b0b4 <_strtod_l+0x7b4>)
   1add0:	4bb9      	ldr	r3, [pc, #740]	; (1b0b8 <_strtod_l+0x7b8>)
   1add2:	ea06 0405 	and.w	r4, r6, r5
   1add6:	429c      	cmp	r4, r3
   1add8:	f000 8202 	beq.w	1b1e0 <_strtod_l+0x8e0>
   1addc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1adde:	b353      	cbz	r3, 1ae36 <_strtod_l+0x536>
   1ade0:	f1b4 6fd4 	cmp.w	r4, #111149056	; 0x6a00000
   1ade4:	d827      	bhi.n	1ae36 <_strtod_l+0x536>
   1ade6:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   1adea:	a3af      	add	r3, pc, #700	; (adr r3, 1b0a8 <_strtod_l+0x7a8>)
   1adec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adf0:	4628      	mov	r0, r5
   1adf2:	4631      	mov	r1, r6
   1adf4:	f7fd ff4c 	bl	18c90 <__aeabi_dcmple>
   1adf8:	b1c0      	cbz	r0, 1ae2c <_strtod_l+0x52c>
   1adfa:	4628      	mov	r0, r5
   1adfc:	4631      	mov	r1, r6
   1adfe:	f7ff f9c1 	bl	1a184 <__aeabi_d2uiz>
   1ae02:	2800      	cmp	r0, #0
   1ae04:	f000 830f 	beq.w	1b426 <_strtod_l+0xb26>
   1ae08:	f7fd fc4c 	bl	186a4 <__aeabi_ui2d>
   1ae0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1ae10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	f040 8302 	bne.w	1b41c <_strtod_l+0xb1c>
   1ae18:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1ae1c:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1ae20:	9116      	str	r1, [sp, #88]	; 0x58
   1ae22:	9317      	str	r3, [sp, #92]	; 0x5c
   1ae24:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1ae28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1ae2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1ae32:	1b1b      	subs	r3, r3, r4
   1ae34:	930d      	str	r3, [sp, #52]	; 0x34
   1ae36:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   1ae3a:	ed9d 0b08 	vldr	d0, [sp, #32]
   1ae3e:	f02b fa17 	bl	46270 <__ulp>
   1ae42:	4628      	mov	r0, r5
   1ae44:	4631      	mov	r1, r6
   1ae46:	ec53 2b10 	vmov	r2, r3, d0
   1ae4a:	f7fd fca5 	bl	18798 <__aeabi_dmul>
   1ae4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1ae52:	f7fd faeb 	bl	1842c <__adddf3>
   1ae56:	460d      	mov	r5, r1
   1ae58:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae5c:	4b95      	ldr	r3, [pc, #596]	; (1b0b4 <_strtod_l+0x7b4>)
   1ae5e:	402b      	ands	r3, r5
   1ae60:	42a3      	cmp	r3, r4
   1ae62:	d103      	bne.n	1ae6c <_strtod_l+0x56c>
   1ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	f000 81f8 	beq.w	1b25c <_strtod_l+0x95c>
   1ae6c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ae6e:	4658      	mov	r0, fp
   1ae70:	f02a ff1c 	bl	45cac <_Bfree>
   1ae74:	4651      	mov	r1, sl
   1ae76:	4658      	mov	r0, fp
   1ae78:	f02a ff18 	bl	45cac <_Bfree>
   1ae7c:	4639      	mov	r1, r7
   1ae7e:	4658      	mov	r0, fp
   1ae80:	f02a ff14 	bl	45cac <_Bfree>
   1ae84:	4649      	mov	r1, r9
   1ae86:	4658      	mov	r0, fp
   1ae88:	f02a ff10 	bl	45cac <_Bfree>
   1ae8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1ae8e:	4658      	mov	r0, fp
   1ae90:	6861      	ldr	r1, [r4, #4]
   1ae92:	f02a fee5 	bl	45c60 <_Balloc>
   1ae96:	4682      	mov	sl, r0
   1ae98:	2800      	cmp	r0, #0
   1ae9a:	f000 8146 	beq.w	1b12a <_strtod_l+0x82a>
   1ae9e:	6922      	ldr	r2, [r4, #16]
   1aea0:	f104 010c 	add.w	r1, r4, #12
   1aea4:	300c      	adds	r0, #12
   1aea6:	3202      	adds	r2, #2
   1aea8:	ed9d 7b04 	vldr	d7, [sp, #16]
   1aeac:	0092      	lsls	r2, r2, #2
   1aeae:	ed8d 7b08 	vstr	d7, [sp, #32]
   1aeb2:	f7fe fffd 	bl	19eb0 <memcpy>
   1aeb6:	aa20      	add	r2, sp, #128	; 0x80
   1aeb8:	a91f      	add	r1, sp, #124	; 0x7c
   1aeba:	4658      	mov	r0, fp
   1aebc:	ed9d 0b08 	vldr	d0, [sp, #32]
   1aec0:	f02b fa5e 	bl	46380 <__d2b>
   1aec4:	901e      	str	r0, [sp, #120]	; 0x78
   1aec6:	2800      	cmp	r0, #0
   1aec8:	f000 8107 	beq.w	1b0da <_strtod_l+0x7da>
   1aecc:	2101      	movs	r1, #1
   1aece:	4658      	mov	r0, fp
   1aed0:	f02a ffd4 	bl	45e7c <__i2b>
   1aed4:	4607      	mov	r7, r0
   1aed6:	2800      	cmp	r0, #0
   1aed8:	f000 8127 	beq.w	1b12a <_strtod_l+0x82a>
   1aedc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1aede:	2b00      	cmp	r3, #0
   1aee0:	f2c0 8144 	blt.w	1b16c <_strtod_l+0x86c>
   1aee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1aee6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1aee8:	189e      	adds	r6, r3, r2
   1aeea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1aeec:	9c20      	ldr	r4, [sp, #128]	; 0x80
   1aeee:	1a9b      	subs	r3, r3, r2
   1aef0:	4a72      	ldr	r2, [pc, #456]	; (1b0bc <_strtod_l+0x7bc>)
   1aef2:	4423      	add	r3, r4
   1aef4:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
   1aef8:	3b01      	subs	r3, #1
   1aefa:	4293      	cmp	r3, r2
   1aefc:	f6ff af00 	blt.w	1ad00 <_strtod_l+0x400>
   1af00:	2300      	movs	r3, #0
   1af02:	9310      	str	r3, [sp, #64]	; 0x40
   1af04:	2301      	movs	r3, #1
   1af06:	930c      	str	r3, [sp, #48]	; 0x30
   1af08:	e705      	b.n	1ad16 <_strtod_l+0x416>
   1af0a:	464a      	mov	r2, r9
   1af0c:	4650      	mov	r0, sl
   1af0e:	f026 fcb7 	bl	41880 <strncmp>
   1af12:	9008      	str	r0, [sp, #32]
   1af14:	2800      	cmp	r0, #0
   1af16:	f040 8085 	bne.w	1b024 <_strtod_l+0x724>
   1af1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1af1c:	eb03 0209 	add.w	r2, r3, r9
   1af20:	921d      	str	r2, [sp, #116]	; 0x74
   1af22:	f813 4009 	ldrb.w	r4, [r3, r9]
   1af26:	9b08      	ldr	r3, [sp, #32]
   1af28:	2c30      	cmp	r4, #48	; 0x30
   1af2a:	d105      	bne.n	1af38 <_strtod_l+0x638>
   1af2c:	3201      	adds	r2, #1
   1af2e:	3301      	adds	r3, #1
   1af30:	921d      	str	r2, [sp, #116]	; 0x74
   1af32:	7814      	ldrb	r4, [r2, #0]
   1af34:	2c30      	cmp	r4, #48	; 0x30
   1af36:	d0f9      	beq.n	1af2c <_strtod_l+0x62c>
   1af38:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
   1af3c:	2a08      	cmp	r2, #8
   1af3e:	f240 8311 	bls.w	1b564 <_strtod_l+0xc64>
   1af42:	2100      	movs	r1, #0
   1af44:	f04f 0c01 	mov.w	ip, #1
   1af48:	460d      	mov	r5, r1
   1af4a:	460e      	mov	r6, r1
   1af4c:	460f      	mov	r7, r1
   1af4e:	e55d      	b.n	1aa0c <_strtod_l+0x10c>
   1af50:	f04f 0901 	mov.w	r9, #1
   1af54:	f108 0202 	add.w	r2, r8, #2
   1af58:	921d      	str	r2, [sp, #116]	; 0x74
   1af5a:	f898 4002 	ldrb.w	r4, [r8, #2]
   1af5e:	e56e      	b.n	1aa3e <_strtod_l+0x13e>
   1af60:	2d06      	cmp	r5, #6
   1af62:	f040 8269 	bne.w	1b438 <_strtod_l+0xb38>
   1af66:	9a06      	ldr	r2, [sp, #24]
   1af68:	f10a 0301 	add.w	r3, sl, #1
   1af6c:	2a00      	cmp	r2, #0
   1af6e:	f43f adb5 	beq.w	1aadc <_strtod_l+0x1dc>
   1af72:	6013      	str	r3, [r2, #0]
   1af74:	f04f 0800 	mov.w	r8, #0
   1af78:	f04f 0900 	mov.w	r9, #0
   1af7c:	e5b2      	b.n	1aae4 <_strtod_l+0x1e4>
   1af7e:	3c49      	subs	r4, #73	; 0x49
   1af80:	2c25      	cmp	r4, #37	; 0x25
   1af82:	f63f ada6 	bhi.w	1aad2 <_strtod_l+0x1d2>
   1af86:	a301      	add	r3, pc, #4	; (adr r3, 1af8c <_strtod_l+0x68c>)
   1af88:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1af8c:	0001ac21 	.word	0x0001ac21
   1af90:	0001aad3 	.word	0x0001aad3
   1af94:	0001aad3 	.word	0x0001aad3
   1af98:	0001aad3 	.word	0x0001aad3
   1af9c:	0001aad3 	.word	0x0001aad3
   1afa0:	0001b04d 	.word	0x0001b04d
   1afa4:	0001aad3 	.word	0x0001aad3
   1afa8:	0001aad3 	.word	0x0001aad3
   1afac:	0001aad3 	.word	0x0001aad3
   1afb0:	0001aad3 	.word	0x0001aad3
   1afb4:	0001aad3 	.word	0x0001aad3
   1afb8:	0001aad3 	.word	0x0001aad3
   1afbc:	0001aad3 	.word	0x0001aad3
   1afc0:	0001aad3 	.word	0x0001aad3
   1afc4:	0001aad3 	.word	0x0001aad3
   1afc8:	0001aad3 	.word	0x0001aad3
   1afcc:	0001aad3 	.word	0x0001aad3
   1afd0:	0001aad3 	.word	0x0001aad3
   1afd4:	0001aad3 	.word	0x0001aad3
   1afd8:	0001aad3 	.word	0x0001aad3
   1afdc:	0001aad3 	.word	0x0001aad3
   1afe0:	0001aad3 	.word	0x0001aad3
   1afe4:	0001aad3 	.word	0x0001aad3
   1afe8:	0001aad3 	.word	0x0001aad3
   1afec:	0001aad3 	.word	0x0001aad3
   1aff0:	0001aad3 	.word	0x0001aad3
   1aff4:	0001aad3 	.word	0x0001aad3
   1aff8:	0001aad3 	.word	0x0001aad3
   1affc:	0001aad3 	.word	0x0001aad3
   1b000:	0001aad3 	.word	0x0001aad3
   1b004:	0001aad3 	.word	0x0001aad3
   1b008:	0001aad3 	.word	0x0001aad3
   1b00c:	0001ac21 	.word	0x0001ac21
   1b010:	0001aad3 	.word	0x0001aad3
   1b014:	0001aad3 	.word	0x0001aad3
   1b018:	0001aad3 	.word	0x0001aad3
   1b01c:	0001aad3 	.word	0x0001aad3
   1b020:	0001b04d 	.word	0x0001b04d
   1b024:	2300      	movs	r3, #0
   1b026:	9308      	str	r3, [sp, #32]
   1b028:	461e      	mov	r6, r3
   1b02a:	469c      	mov	ip, r3
   1b02c:	461f      	mov	r7, r3
   1b02e:	4619      	mov	r1, r3
   1b030:	461d      	mov	r5, r3
   1b032:	e4eb      	b.n	1aa0c <_strtod_l+0x10c>
   1b034:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   1b038:	f340 823c 	ble.w	1b4b4 <_strtod_l+0xbb4>
   1b03c:	4b1d      	ldr	r3, [pc, #116]	; (1b0b4 <_strtod_l+0x7b4>)
   1b03e:	9305      	str	r3, [sp, #20]
   1b040:	2322      	movs	r3, #34	; 0x22
   1b042:	2200      	movs	r2, #0
   1b044:	f8cb 3000 	str.w	r3, [fp]
   1b048:	9204      	str	r2, [sp, #16]
   1b04a:	e5ff      	b.n	1ac4c <_strtod_l+0x34c>
   1b04c:	491c      	ldr	r1, [pc, #112]	; (1b0c0 <_strtod_l+0x7c0>)
   1b04e:	a81d      	add	r0, sp, #116	; 0x74
   1b050:	f02a fbea 	bl	45828 <__match>
   1b054:	2800      	cmp	r0, #0
   1b056:	f43f ad3c 	beq.w	1aad2 <_strtod_l+0x1d2>
   1b05a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1b05c:	781b      	ldrb	r3, [r3, #0]
   1b05e:	2b28      	cmp	r3, #40	; 0x28
   1b060:	f000 838e 	beq.w	1b780 <_strtod_l+0xe80>
   1b064:	2300      	movs	r3, #0
   1b066:	4817      	ldr	r0, [pc, #92]	; (1b0c4 <_strtod_l+0x7c4>)
   1b068:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1b06c:	e5ee      	b.n	1ac4c <_strtod_l+0x34c>
   1b06e:	4639      	mov	r1, r7
   1b070:	461a      	mov	r2, r3
   1b072:	4658      	mov	r0, fp
   1b074:	f02a ffb4 	bl	45fe0 <__pow5mult>
   1b078:	4607      	mov	r7, r0
   1b07a:	2800      	cmp	r0, #0
   1b07c:	d055      	beq.n	1b12a <_strtod_l+0x82a>
   1b07e:	4601      	mov	r1, r0
   1b080:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b082:	4658      	mov	r0, fp
   1b084:	f02a ff04 	bl	45e90 <__multiply>
   1b088:	2800      	cmp	r0, #0
   1b08a:	d04e      	beq.n	1b12a <_strtod_l+0x82a>
   1b08c:	900f      	str	r0, [sp, #60]	; 0x3c
   1b08e:	4658      	mov	r0, fp
   1b090:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b092:	f02a fe0b 	bl	45cac <_Bfree>
   1b096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b098:	931e      	str	r3, [sp, #120]	; 0x78
   1b09a:	e650      	b.n	1ad3e <_strtod_l+0x43e>
   1b09c:	f3af 8000 	nop.w
   1b0a0:	00000000 	.word	0x00000000
   1b0a4:	3ff00000 	.word	0x3ff00000
   1b0a8:	ffc00000 	.word	0xffc00000
   1b0ac:	41dfffff 	.word	0x41dfffff
   1b0b0:	3ff00000 	.word	0x3ff00000
   1b0b4:	7ff00000 	.word	0x7ff00000
   1b0b8:	7fe00000 	.word	0x7fe00000
   1b0bc:	fffffc02 	.word	0xfffffc02
   1b0c0:	0004c5e0 	.word	0x0004c5e0
   1b0c4:	fff80000 	.word	0xfff80000
   1b0c8:	4622      	mov	r2, r4
   1b0ca:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b0cc:	4658      	mov	r0, fp
   1b0ce:	f02a ffd7 	bl	46080 <__lshift>
   1b0d2:	901e      	str	r0, [sp, #120]	; 0x78
   1b0d4:	2800      	cmp	r0, #0
   1b0d6:	f47f ae35 	bne.w	1ad44 <_strtod_l+0x444>
   1b0da:	464c      	mov	r4, r9
   1b0dc:	4bb4      	ldr	r3, [pc, #720]	; (1b3b0 <_strtod_l+0xab0>)
   1b0de:	2200      	movs	r2, #0
   1b0e0:	9305      	str	r3, [sp, #20]
   1b0e2:	2322      	movs	r3, #34	; 0x22
   1b0e4:	9204      	str	r2, [sp, #16]
   1b0e6:	f8cb 3000 	str.w	r3, [fp]
   1b0ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b0ee:	4601      	mov	r1, r0
   1b0f0:	4658      	mov	r0, fp
   1b0f2:	f02a fddb 	bl	45cac <_Bfree>
   1b0f6:	4651      	mov	r1, sl
   1b0f8:	4658      	mov	r0, fp
   1b0fa:	f02a fdd7 	bl	45cac <_Bfree>
   1b0fe:	4639      	mov	r1, r7
   1b100:	4658      	mov	r0, fp
   1b102:	f02a fdd3 	bl	45cac <_Bfree>
   1b106:	9912      	ldr	r1, [sp, #72]	; 0x48
   1b108:	4658      	mov	r0, fp
   1b10a:	f02a fdcf 	bl	45cac <_Bfree>
   1b10e:	4621      	mov	r1, r4
   1b110:	4658      	mov	r0, fp
   1b112:	f02a fdcb 	bl	45cac <_Bfree>
   1b116:	e573      	b.n	1ac00 <_strtod_l+0x300>
   1b118:	4651      	mov	r1, sl
   1b11a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b11c:	4658      	mov	r0, fp
   1b11e:	f02a ff5f 	bl	45fe0 <__pow5mult>
   1b122:	4682      	mov	sl, r0
   1b124:	2800      	cmp	r0, #0
   1b126:	f47f ae11 	bne.w	1ad4c <_strtod_l+0x44c>
   1b12a:	464c      	mov	r4, r9
   1b12c:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b12e:	e7d5      	b.n	1b0dc <_strtod_l+0x7dc>
   1b130:	4651      	mov	r1, sl
   1b132:	462a      	mov	r2, r5
   1b134:	4658      	mov	r0, fp
   1b136:	f02a ffa3 	bl	46080 <__lshift>
   1b13a:	4682      	mov	sl, r0
   1b13c:	2800      	cmp	r0, #0
   1b13e:	f47f ae08 	bne.w	1ad52 <_strtod_l+0x452>
   1b142:	e7f2      	b.n	1b12a <_strtod_l+0x82a>
   1b144:	4b9b      	ldr	r3, [pc, #620]	; (1b3b4 <_strtod_l+0xab4>)
   1b146:	4620      	mov	r0, r4
   1b148:	4629      	mov	r1, r5
   1b14a:	2200      	movs	r2, #0
   1b14c:	f7fd fb24 	bl	18798 <__aeabi_dmul>
   1b150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b152:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1b156:	2b00      	cmp	r3, #0
   1b158:	d13d      	bne.n	1b1d6 <_strtod_l+0x8d6>
   1b15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b15e:	9014      	str	r0, [sp, #80]	; 0x50
   1b160:	9315      	str	r3, [sp, #84]	; 0x54
   1b162:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   1b166:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b16a:	e630      	b.n	1adce <_strtod_l+0x4ce>
   1b16c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b16e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b170:	1ad5      	subs	r5, r2, r3
   1b172:	e6ba      	b.n	1aeea <_strtod_l+0x5ea>
   1b174:	2200      	movs	r2, #0
   1b176:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1b17a:	920b      	str	r2, [sp, #44]	; 0x2c
   1b17c:	e49f      	b.n	1aabe <_strtod_l+0x1be>
   1b17e:	498e      	ldr	r1, [pc, #568]	; (1b3b8 <_strtod_l+0xab8>)
   1b180:	2201      	movs	r2, #1
   1b182:	1acb      	subs	r3, r1, r3
   1b184:	920c      	str	r2, [sp, #48]	; 0x30
   1b186:	fa02 f303 	lsl.w	r3, r2, r3
   1b18a:	9310      	str	r3, [sp, #64]	; 0x40
   1b18c:	e5c3      	b.n	1ad16 <_strtod_l+0x416>
   1b18e:	9b04      	ldr	r3, [sp, #16]
   1b190:	2b00      	cmp	r3, #0
   1b192:	f040 811f 	bne.w	1b3d4 <_strtod_l+0xad4>
   1b196:	f3c6 0313 	ubfx	r3, r6, #0, #20
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d155      	bne.n	1b24a <_strtod_l+0x94a>
   1b19e:	2200      	movs	r2, #0
   1b1a0:	4b86      	ldr	r3, [pc, #536]	; (1b3bc <_strtod_l+0xabc>)
   1b1a2:	4620      	mov	r0, r4
   1b1a4:	4629      	mov	r1, r5
   1b1a6:	f7fd fd69 	bl	18c7c <__aeabi_dcmplt>
   1b1aa:	2800      	cmp	r0, #0
   1b1ac:	f040 8210 	bne.w	1b5d0 <_strtod_l+0xcd0>
   1b1b0:	2200      	movs	r2, #0
   1b1b2:	4b80      	ldr	r3, [pc, #512]	; (1b3b4 <_strtod_l+0xab4>)
   1b1b4:	4620      	mov	r0, r4
   1b1b6:	4629      	mov	r1, r5
   1b1b8:	f7fd faee 	bl	18798 <__aeabi_dmul>
   1b1bc:	460a      	mov	r2, r1
   1b1be:	4601      	mov	r1, r0
   1b1c0:	901a      	str	r0, [sp, #104]	; 0x68
   1b1c2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1b1c6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1b1ca:	931b      	str	r3, [sp, #108]	; 0x6c
   1b1cc:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1b1d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b1d4:	e5fb      	b.n	1adce <_strtod_l+0x4ce>
   1b1d6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1b1da:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
   1b1de:	e7c0      	b.n	1b162 <_strtod_l+0x862>
   1b1e0:	f1a6 7354 	sub.w	r3, r6, #55574528	; 0x3500000
   1b1e4:	4e76      	ldr	r6, [pc, #472]	; (1b3c0 <_strtod_l+0xac0>)
   1b1e6:	9305      	str	r3, [sp, #20]
   1b1e8:	ed9d 7b04 	vldr	d7, [sp, #16]
   1b1ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b1f0:	eeb0 0a47 	vmov.f32	s0, s14
   1b1f4:	eef0 0a67 	vmov.f32	s1, s15
   1b1f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1b1fc:	f02b f838 	bl	46270 <__ulp>
   1b200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b204:	ec53 2b10 	vmov	r2, r3, d0
   1b208:	f7fd fac6 	bl	18798 <__aeabi_dmul>
   1b20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b210:	f7fd f90c 	bl	1842c <__adddf3>
   1b214:	468c      	mov	ip, r1
   1b216:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b21a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b21e:	460b      	mov	r3, r1
   1b220:	4602      	mov	r2, r0
   1b222:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
   1b226:	ea0c 0305 	and.w	r3, ip, r5
   1b22a:	42b3      	cmp	r3, r6
   1b22c:	f240 8100 	bls.w	1b430 <_strtod_l+0xb30>
   1b230:	4a64      	ldr	r2, [pc, #400]	; (1b3c4 <_strtod_l+0xac4>)
   1b232:	4291      	cmp	r1, r2
   1b234:	f000 81c1 	beq.w	1b5ba <_strtod_l+0xcba>
   1b238:	f04f 33ff 	mov.w	r3, #4294967295
   1b23c:	4961      	ldr	r1, [pc, #388]	; (1b3c4 <_strtod_l+0xac4>)
   1b23e:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1b242:	e613      	b.n	1ae6c <_strtod_l+0x56c>
   1b244:	f04f 0900 	mov.w	r9, #0
   1b248:	e684      	b.n	1af54 <_strtod_l+0x654>
   1b24a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 1b390 <_strtod_l+0xa90>
   1b24e:	2300      	movs	r3, #0
   1b250:	4c5d      	ldr	r4, [pc, #372]	; (1b3c8 <_strtod_l+0xac8>)
   1b252:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b256:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b25a:	e5b8      	b.n	1adce <_strtod_l+0x4ce>
   1b25c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1b260:	f7fd fd34 	bl	18ccc <__aeabi_d2iz>
   1b264:	f7fd fa2e 	bl	186c4 <__aeabi_i2d>
   1b268:	460b      	mov	r3, r1
   1b26a:	4602      	mov	r2, r0
   1b26c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1b270:	f7fd f8da 	bl	18428 <__aeabi_dsub>
   1b274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b276:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d173      	bne.n	1b366 <_strtod_l+0xa66>
   1b27e:	9b04      	ldr	r3, [sp, #16]
   1b280:	2b00      	cmp	r3, #0
   1b282:	d170      	bne.n	1b366 <_strtod_l+0xa66>
   1b284:	f3c5 0513 	ubfx	r5, r5, #0, #20
   1b288:	2d00      	cmp	r5, #0
   1b28a:	d16c      	bne.n	1b366 <_strtod_l+0xa66>
   1b28c:	a342      	add	r3, pc, #264	; (adr r3, 1b398 <_strtod_l+0xa98>)
   1b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b292:	f7fd fcf3 	bl	18c7c <__aeabi_dcmplt>
   1b296:	2800      	cmp	r0, #0
   1b298:	f43f ade8 	beq.w	1ae6c <_strtod_l+0x56c>
   1b29c:	464c      	mov	r4, r9
   1b29e:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b2a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b2a4:	e723      	b.n	1b0ee <_strtod_l+0x7ee>
   1b2a6:	f43f ad05 	beq.w	1acb4 <_strtod_l+0x3b4>
   1b2aa:	4264      	negs	r4, r4
   1b2ac:	f014 020f 	ands.w	r2, r4, #15
   1b2b0:	d00a      	beq.n	1b2c8 <_strtod_l+0x9c8>
   1b2b2:	4b46      	ldr	r3, [pc, #280]	; (1b3cc <_strtod_l+0xacc>)
   1b2b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b2b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b2c0:	f7fd fb94 	bl	189ec <__aeabi_ddiv>
   1b2c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b2c8:	1124      	asrs	r4, r4, #4
   1b2ca:	f43f acf3 	beq.w	1acb4 <_strtod_l+0x3b4>
   1b2ce:	2c1f      	cmp	r4, #31
   1b2d0:	dc41      	bgt.n	1b356 <_strtod_l+0xa56>
   1b2d2:	f014 0310 	ands.w	r3, r4, #16
   1b2d6:	930a      	str	r3, [sp, #40]	; 0x28
   1b2d8:	f040 8249 	bne.w	1b76e <_strtod_l+0xe6e>
   1b2dc:	2c00      	cmp	r4, #0
   1b2de:	f340 824c 	ble.w	1b77a <_strtod_l+0xe7a>
   1b2e2:	4e3b      	ldr	r6, [pc, #236]	; (1b3d0 <_strtod_l+0xad0>)
   1b2e4:	f04f 0c00 	mov.w	ip, #0
   1b2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b2ec:	f014 0f01 	tst.w	r4, #1
   1b2f0:	4610      	mov	r0, r2
   1b2f2:	4619      	mov	r1, r3
   1b2f4:	d007      	beq.n	1b306 <_strtod_l+0xa06>
   1b2f6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1b2fa:	f7fd fa4d 	bl	18798 <__aeabi_dmul>
   1b2fe:	f04f 0c01 	mov.w	ip, #1
   1b302:	4602      	mov	r2, r0
   1b304:	460b      	mov	r3, r1
   1b306:	1064      	asrs	r4, r4, #1
   1b308:	f106 0608 	add.w	r6, r6, #8
   1b30c:	d1ee      	bne.n	1b2ec <_strtod_l+0x9ec>
   1b30e:	f1bc 0f00 	cmp.w	ip, #0
   1b312:	f040 8283 	bne.w	1b81c <_strtod_l+0xf1c>
   1b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b318:	2b00      	cmp	r3, #0
   1b31a:	f000 822e 	beq.w	1b77a <_strtod_l+0xe7a>
   1b31e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1b322:	f3c2 530a 	ubfx	r3, r2, #20, #11
   1b326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b32a:	2b00      	cmp	r3, #0
   1b32c:	dd0a      	ble.n	1b344 <_strtod_l+0xa44>
   1b32e:	2b1f      	cmp	r3, #31
   1b330:	f340 825c 	ble.w	1b7ec <_strtod_l+0xeec>
   1b334:	2100      	movs	r1, #0
   1b336:	2b34      	cmp	r3, #52	; 0x34
   1b338:	9104      	str	r1, [sp, #16]
   1b33a:	f340 825f 	ble.w	1b7fc <_strtod_l+0xefc>
   1b33e:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1b342:	9305      	str	r3, [sp, #20]
   1b344:	2200      	movs	r2, #0
   1b346:	2300      	movs	r3, #0
   1b348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b34c:	f7fd fc8c 	bl	18c68 <__aeabi_dcmpeq>
   1b350:	2800      	cmp	r0, #0
   1b352:	f43f acb1 	beq.w	1acb8 <_strtod_l+0x3b8>
   1b356:	2322      	movs	r3, #34	; 0x22
   1b358:	f04f 0800 	mov.w	r8, #0
   1b35c:	f04f 0900 	mov.w	r9, #0
   1b360:	f8cb 3000 	str.w	r3, [fp]
   1b364:	e44c      	b.n	1ac00 <_strtod_l+0x300>
   1b366:	a30e      	add	r3, pc, #56	; (adr r3, 1b3a0 <_strtod_l+0xaa0>)
   1b368:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b36c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b370:	f7fd fc84 	bl	18c7c <__aeabi_dcmplt>
   1b374:	2800      	cmp	r0, #0
   1b376:	d191      	bne.n	1b29c <_strtod_l+0x99c>
   1b378:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b37c:	a30a      	add	r3, pc, #40	; (adr r3, 1b3a8 <_strtod_l+0xaa8>)
   1b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b382:	f7fd fc99 	bl	18cb8 <__aeabi_dcmpgt>
   1b386:	2800      	cmp	r0, #0
   1b388:	f43f ad70 	beq.w	1ae6c <_strtod_l+0x56c>
   1b38c:	e786      	b.n	1b29c <_strtod_l+0x99c>
   1b38e:	bf00      	nop
   1b390:	00000000 	.word	0x00000000
   1b394:	3ff00000 	.word	0x3ff00000
   1b398:	94a03595 	.word	0x94a03595
   1b39c:	3fcfffff 	.word	0x3fcfffff
   1b3a0:	94a03595 	.word	0x94a03595
   1b3a4:	3fdfffff 	.word	0x3fdfffff
   1b3a8:	35afe535 	.word	0x35afe535
   1b3ac:	3fe00000 	.word	0x3fe00000
   1b3b0:	7ff00000 	.word	0x7ff00000
   1b3b4:	3fe00000 	.word	0x3fe00000
   1b3b8:	fffffbe2 	.word	0xfffffbe2
   1b3bc:	3ff00000 	.word	0x3ff00000
   1b3c0:	7c9fffff 	.word	0x7c9fffff
   1b3c4:	7fefffff 	.word	0x7fefffff
   1b3c8:	bff00000 	.word	0xbff00000
   1b3cc:	0004a878 	.word	0x0004a878
   1b3d0:	0004a828 	.word	0x0004a828
   1b3d4:	9b04      	ldr	r3, [sp, #16]
   1b3d6:	2b01      	cmp	r3, #1
   1b3d8:	f47f af37 	bne.w	1b24a <_strtod_l+0x94a>
   1b3dc:	2e00      	cmp	r6, #0
   1b3de:	f47f af34 	bne.w	1b24a <_strtod_l+0x94a>
   1b3e2:	464c      	mov	r4, r9
   1b3e4:	2322      	movs	r3, #34	; 0x22
   1b3e6:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b3e8:	f04f 0800 	mov.w	r8, #0
   1b3ec:	f04f 0900 	mov.w	r9, #0
   1b3f0:	f8cb 3000 	str.w	r3, [fp]
   1b3f4:	e67b      	b.n	1b0ee <_strtod_l+0x7ee>
   1b3f6:	1c5d      	adds	r5, r3, #1
   1b3f8:	2b08      	cmp	r3, #8
   1b3fa:	f340 80bc 	ble.w	1b576 <_strtod_l+0xc76>
   1b3fe:	2d10      	cmp	r5, #16
   1b400:	f300 80e4 	bgt.w	1b5cc <_strtod_l+0xccc>
   1b404:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1b408:	2300      	movs	r3, #0
   1b40a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   1b40e:	f10c 0201 	add.w	r2, ip, #1
   1b412:	921d      	str	r2, [sp, #116]	; 0x74
   1b414:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1b418:	f7ff bb76 	b.w	1ab08 <_strtod_l+0x208>
   1b41c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1b420:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
   1b424:	e4fe      	b.n	1ae24 <_strtod_l+0x524>
   1b426:	ed9f 7baa 	vldr	d7, [pc, #680]	; 1b6d0 <_strtod_l+0xdd0>
   1b42a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b42e:	e4ef      	b.n	1ae10 <_strtod_l+0x510>
   1b430:	f10c 7554 	add.w	r5, ip, #55574528	; 0x3500000
   1b434:	9505      	str	r5, [sp, #20]
   1b436:	e511      	b.n	1ae5c <_strtod_l+0x55c>
   1b438:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b43a:	b13a      	cbz	r2, 1b44c <_strtod_l+0xb4c>
   1b43c:	2135      	movs	r1, #53	; 0x35
   1b43e:	a820      	add	r0, sp, #128	; 0x80
   1b440:	f02b f82e 	bl	464a0 <__copybits>
   1b444:	4658      	mov	r0, fp
   1b446:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b448:	f02a fc30 	bl	45cac <_Bfree>
   1b44c:	3d01      	subs	r5, #1
   1b44e:	2d04      	cmp	r5, #4
   1b450:	d806      	bhi.n	1b460 <_strtod_l+0xb60>
   1b452:	e8df f005 	tbb	[pc, r5]
   1b456:	210e      	.short	0x210e
   1b458:	1a03      	.short	0x1a03
   1b45a:	0e          	.byte	0x0e
   1b45b:	00          	.byte	0x00
   1b45c:	4ba2      	ldr	r3, [pc, #648]	; (1b6e8 <_strtod_l+0xde8>)
   1b45e:	9305      	str	r3, [sp, #20]
   1b460:	0725      	lsls	r5, r4, #28
   1b462:	f57f abf3 	bpl.w	1ac4c <_strtod_l+0x34c>
   1b466:	9b05      	ldr	r3, [sp, #20]
   1b468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b46c:	9305      	str	r3, [sp, #20]
   1b46e:	f7ff bbed 	b.w	1ac4c <_strtod_l+0x34c>
   1b472:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
   1b476:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b478:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b47c:	9104      	str	r1, [sp, #16]
   1b47e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1b482:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   1b486:	9305      	str	r3, [sp, #20]
   1b488:	e7ea      	b.n	1b460 <_strtod_l+0xb60>
   1b48a:	f04f 33ff 	mov.w	r3, #4294967295
   1b48e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1b492:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1b496:	e7e3      	b.n	1b460 <_strtod_l+0xb60>
   1b498:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1b49a:	9304      	str	r3, [sp, #16]
   1b49c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b49e:	9305      	str	r3, [sp, #20]
   1b4a0:	e7de      	b.n	1b460 <_strtod_l+0xb60>
   1b4a2:	4b91      	ldr	r3, [pc, #580]	; (1b6e8 <_strtod_l+0xde8>)
   1b4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b4a6:	9305      	str	r3, [sp, #20]
   1b4a8:	2322      	movs	r3, #34	; 0x22
   1b4aa:	9204      	str	r2, [sp, #16]
   1b4ac:	f8cb 3000 	str.w	r3, [fp]
   1b4b0:	f7ff bbcc 	b.w	1ac4c <_strtod_l+0x34c>
   1b4b4:	1124      	asrs	r4, r4, #4
   1b4b6:	2c01      	cmp	r4, #1
   1b4b8:	f340 8149 	ble.w	1b74e <_strtod_l+0xe4e>
   1b4bc:	f8df 923c 	ldr.w	r9, [pc, #572]	; 1b6fc <_strtod_l+0xdfc>
   1b4c0:	f04f 0c00 	mov.w	ip, #0
   1b4c4:	464e      	mov	r6, r9
   1b4c6:	46e0      	mov	r8, ip
   1b4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b4cc:	f014 0f01 	tst.w	r4, #1
   1b4d0:	4610      	mov	r0, r2
   1b4d2:	4619      	mov	r1, r3
   1b4d4:	ea4f 0464 	mov.w	r4, r4, asr #1
   1b4d8:	f108 0801 	add.w	r8, r8, #1
   1b4dc:	d007      	beq.n	1b4ee <_strtod_l+0xbee>
   1b4de:	e9d6 2300 	ldrd	r2, r3, [r6]
   1b4e2:	f7fd f959 	bl	18798 <__aeabi_dmul>
   1b4e6:	f04f 0c01 	mov.w	ip, #1
   1b4ea:	4602      	mov	r2, r0
   1b4ec:	460b      	mov	r3, r1
   1b4ee:	2c01      	cmp	r4, #1
   1b4f0:	f106 0608 	add.w	r6, r6, #8
   1b4f4:	d1ea      	bne.n	1b4cc <_strtod_l+0xbcc>
   1b4f6:	f1bc 0f00 	cmp.w	ip, #0
   1b4fa:	f040 818a 	bne.w	1b812 <_strtod_l+0xf12>
   1b4fe:	9b05      	ldr	r3, [sp, #20]
   1b500:	eb09 08c8 	add.w	r8, r9, r8, lsl #3
   1b504:	4e79      	ldr	r6, [pc, #484]	; (1b6ec <_strtod_l+0xdec>)
   1b506:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1b50a:	9305      	str	r3, [sp, #20]
   1b50c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b510:	e9d8 0100 	ldrd	r0, r1, [r8]
   1b514:	f7fd f940 	bl	18798 <__aeabi_dmul>
   1b518:	4a73      	ldr	r2, [pc, #460]	; (1b6e8 <_strtod_l+0xde8>)
   1b51a:	ea01 0302 	and.w	r3, r1, r2
   1b51e:	42b3      	cmp	r3, r6
   1b520:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b524:	d850      	bhi.n	1b5c8 <_strtod_l+0xcc8>
   1b526:	f1a2 7258 	sub.w	r2, r2, #56623104	; 0x3600000
   1b52a:	4293      	cmp	r3, r2
   1b52c:	f240 8108 	bls.w	1b740 <_strtod_l+0xe40>
   1b530:	4b6f      	ldr	r3, [pc, #444]	; (1b6f0 <_strtod_l+0xdf0>)
   1b532:	9305      	str	r3, [sp, #20]
   1b534:	2300      	movs	r3, #0
   1b536:	930a      	str	r3, [sp, #40]	; 0x28
   1b538:	f04f 33ff 	mov.w	r3, #4294967295
   1b53c:	9304      	str	r3, [sp, #16]
   1b53e:	f7ff bbbb 	b.w	1acb8 <_strtod_l+0x3b8>
   1b542:	f113 0216 	adds.w	r2, r3, #22
   1b546:	f6ff ab9d 	blt.w	1ac84 <_strtod_l+0x384>
   1b54a:	4a6a      	ldr	r2, [pc, #424]	; (1b6f4 <_strtod_l+0xdf4>)
   1b54c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
   1b550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b554:	e9d2 2300 	ldrd	r2, r3, [r2]
   1b558:	f7fd fa48 	bl	189ec <__aeabi_ddiv>
   1b55c:	4680      	mov	r8, r0
   1b55e:	4689      	mov	r9, r1
   1b560:	f7ff bb4e 	b.w	1ac00 <_strtod_l+0x300>
   1b564:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
   1b568:	2700      	movs	r7, #0
   1b56a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1b56e:	1c59      	adds	r1, r3, #1
   1b570:	46d4      	mov	ip, sl
   1b572:	463e      	mov	r6, r7
   1b574:	2501      	movs	r5, #1
   1b576:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1b57a:	2300      	movs	r3, #0
   1b57c:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
   1b580:	e745      	b.n	1b40e <_strtod_l+0xb0e>
   1b582:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1b586:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1b588:	42b3      	cmp	r3, r6
   1b58a:	f6ff ab7b 	blt.w	1ac84 <_strtod_l+0x384>
   1b58e:	f1c5 050f 	rsb	r5, r5, #15
   1b592:	4c58      	ldr	r4, [pc, #352]	; (1b6f4 <_strtod_l+0xdf4>)
   1b594:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1b598:	1b75      	subs	r5, r6, r5
   1b59a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b59e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b5a6:	f7fd f8f7 	bl	18798 <__aeabi_dmul>
   1b5aa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b5ae:	f7fd f8f3 	bl	18798 <__aeabi_dmul>
   1b5b2:	4680      	mov	r8, r0
   1b5b4:	4689      	mov	r9, r1
   1b5b6:	f7ff bb23 	b.w	1ac00 <_strtod_l+0x300>
   1b5ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1b5be:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b5c2:	f47f ae39 	bne.w	1b238 <_strtod_l+0x938>
   1b5c6:	e5b0      	b.n	1b12a <_strtod_l+0x82a>
   1b5c8:	9205      	str	r2, [sp, #20]
   1b5ca:	e539      	b.n	1b040 <_strtod_l+0x740>
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	e71e      	b.n	1b40e <_strtod_l+0xb0e>
   1b5d0:	ed9f 7b41 	vldr	d7, [pc, #260]	; 1b6d8 <_strtod_l+0xdd8>
   1b5d4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
   1b5d8:	ed9f 7b41 	vldr	d7, [pc, #260]	; 1b6e0 <_strtod_l+0xde0>
   1b5dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b5e0:	e5f4      	b.n	1b1cc <_strtod_l+0x8cc>
   1b5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5e4:	4648      	mov	r0, r9
   1b5e6:	464c      	mov	r4, r9
   1b5e8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	d168      	bne.n	1b6c2 <_strtod_l+0xdc2>
   1b5f0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1b5f4:	2900      	cmp	r1, #0
   1b5f6:	d164      	bne.n	1b6c2 <_strtod_l+0xdc2>
   1b5f8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	d160      	bne.n	1b6c2 <_strtod_l+0xdc2>
   1b600:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b604:	0d1b      	lsrs	r3, r3, #20
   1b606:	051b      	lsls	r3, r3, #20
   1b608:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b60c:	d959      	bls.n	1b6c2 <_strtod_l+0xdc2>
   1b60e:	6943      	ldr	r3, [r0, #20]
   1b610:	b913      	cbnz	r3, 1b618 <_strtod_l+0xd18>
   1b612:	6903      	ldr	r3, [r0, #16]
   1b614:	2b01      	cmp	r3, #1
   1b616:	dd54      	ble.n	1b6c2 <_strtod_l+0xdc2>
   1b618:	4621      	mov	r1, r4
   1b61a:	2201      	movs	r2, #1
   1b61c:	4658      	mov	r0, fp
   1b61e:	f02a fd2f 	bl	46080 <__lshift>
   1b622:	4639      	mov	r1, r7
   1b624:	4604      	mov	r4, r0
   1b626:	f02a fd87 	bl	46138 <__mcmp>
   1b62a:	2800      	cmp	r0, #0
   1b62c:	dd49      	ble.n	1b6c2 <_strtod_l+0xdc2>
   1b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b634:	460a      	mov	r2, r1
   1b636:	2b00      	cmp	r3, #0
   1b638:	f000 80c9 	beq.w	1b7ce <_strtod_l+0xece>
   1b63c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b640:	0d1b      	lsrs	r3, r3, #20
   1b642:	051b      	lsls	r3, r3, #20
   1b644:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b648:	f300 80c1 	bgt.w	1b7ce <_strtod_l+0xece>
   1b64c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1b650:	f77f aec8 	ble.w	1b3e4 <_strtod_l+0xae4>
   1b654:	2300      	movs	r3, #0
   1b656:	4a28      	ldr	r2, [pc, #160]	; (1b6f8 <_strtod_l+0xdf8>)
   1b658:	4640      	mov	r0, r8
   1b65a:	4649      	mov	r1, r9
   1b65c:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
   1b660:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   1b664:	f7fd f898 	bl	18798 <__aeabi_dmul>
   1b668:	4680      	mov	r8, r0
   1b66a:	4689      	mov	r9, r1
   1b66c:	bb61      	cbnz	r1, 1b6c8 <_strtod_l+0xdc8>
   1b66e:	bb58      	cbnz	r0, 1b6c8 <_strtod_l+0xdc8>
   1b670:	2322      	movs	r3, #34	; 0x22
   1b672:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b674:	f8cb 3000 	str.w	r3, [fp]
   1b678:	e539      	b.n	1b0ee <_strtod_l+0x7ee>
   1b67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b67c:	9904      	ldr	r1, [sp, #16]
   1b67e:	2b00      	cmp	r3, #0
   1b680:	f000 8090 	beq.w	1b7a4 <_strtod_l+0xea4>
   1b684:	4b18      	ldr	r3, [pc, #96]	; (1b6e8 <_strtod_l+0xde8>)
   1b686:	4033      	ands	r3, r6
   1b688:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1b68c:	f200 808a 	bhi.w	1b7a4 <_strtod_l+0xea4>
   1b690:	0d1b      	lsrs	r3, r3, #20
   1b692:	f04f 32ff 	mov.w	r2, #4294967295
   1b696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b69a:	fa02 f303 	lsl.w	r3, r2, r3
   1b69e:	4299      	cmp	r1, r3
   1b6a0:	d139      	bne.n	1b716 <_strtod_l+0xe16>
   1b6a2:	3101      	adds	r1, #1
   1b6a4:	d103      	bne.n	1b6ae <_strtod_l+0xdae>
   1b6a6:	4b12      	ldr	r3, [pc, #72]	; (1b6f0 <_strtod_l+0xdf0>)
   1b6a8:	4298      	cmp	r0, r3
   1b6aa:	f43f ad3f 	beq.w	1b12c <_strtod_l+0x82c>
   1b6ae:	4b0e      	ldr	r3, [pc, #56]	; (1b6e8 <_strtod_l+0xde8>)
   1b6b0:	4602      	mov	r2, r0
   1b6b2:	401a      	ands	r2, r3
   1b6b4:	f502 1380 	add.w	r3, r2, #1048576	; 0x100000
   1b6b8:	9305      	str	r3, [sp, #20]
   1b6ba:	2300      	movs	r3, #0
   1b6bc:	9304      	str	r3, [sp, #16]
   1b6be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	d1c5      	bne.n	1b654 <_strtod_l+0xd54>
   1b6c8:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b6ca:	e510      	b.n	1b0ee <_strtod_l+0x7ee>
   1b6cc:	f3af 8000 	nop.w
   1b6d0:	00000000 	.word	0x00000000
   1b6d4:	3ff00000 	.word	0x3ff00000
   1b6d8:	00000000 	.word	0x00000000
   1b6dc:	bfe00000 	.word	0xbfe00000
   1b6e0:	00000000 	.word	0x00000000
   1b6e4:	3fe00000 	.word	0x3fe00000
   1b6e8:	7ff00000 	.word	0x7ff00000
   1b6ec:	7ca00000 	.word	0x7ca00000
   1b6f0:	7fefffff 	.word	0x7fefffff
   1b6f4:	0004a878 	.word	0x0004a878
   1b6f8:	39500000 	.word	0x39500000
   1b6fc:	0004a850 	.word	0x0004a850
   1b700:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b702:	464c      	mov	r4, r9
   1b704:	4630      	mov	r0, r6
   1b706:	4a47      	ldr	r2, [pc, #284]	; (1b824 <_strtod_l+0xf24>)
   1b708:	f3c6 0313 	ubfx	r3, r6, #0, #20
   1b70c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b710:	b311      	cbz	r1, 1b758 <_strtod_l+0xe58>
   1b712:	4293      	cmp	r3, r2
   1b714:	d0b1      	beq.n	1b67a <_strtod_l+0xd7a>
   1b716:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b718:	b323      	cbz	r3, 1b764 <_strtod_l+0xe64>
   1b71a:	4203      	tst	r3, r0
   1b71c:	d0d1      	beq.n	1b6c2 <_strtod_l+0xdc2>
   1b71e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b726:	2b00      	cmp	r3, #0
   1b728:	d03f      	beq.n	1b7aa <_strtod_l+0xeaa>
   1b72a:	f02e fdd5 	bl	4a2d8 <sulp>
   1b72e:	4602      	mov	r2, r0
   1b730:	460b      	mov	r3, r1
   1b732:	4640      	mov	r0, r8
   1b734:	4649      	mov	r1, r9
   1b736:	f7fc fe79 	bl	1842c <__adddf3>
   1b73a:	4680      	mov	r8, r0
   1b73c:	4689      	mov	r9, r1
   1b73e:	e7c0      	b.n	1b6c2 <_strtod_l+0xdc2>
   1b740:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
   1b744:	9305      	str	r3, [sp, #20]
   1b746:	2300      	movs	r3, #0
   1b748:	930a      	str	r3, [sp, #40]	; 0x28
   1b74a:	f7ff bab5 	b.w	1acb8 <_strtod_l+0x3b8>
   1b74e:	f04f 0800 	mov.w	r8, #0
   1b752:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1b830 <_strtod_l+0xf30>
   1b756:	e6d2      	b.n	1b4fe <_strtod_l+0xbfe>
   1b758:	2b00      	cmp	r3, #0
   1b75a:	d1dc      	bne.n	1b716 <_strtod_l+0xe16>
   1b75c:	9b04      	ldr	r3, [sp, #16]
   1b75e:	2b00      	cmp	r3, #0
   1b760:	d1d9      	bne.n	1b716 <_strtod_l+0xe16>
   1b762:	e764      	b.n	1b62e <_strtod_l+0xd2e>
   1b764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b766:	9a04      	ldr	r2, [sp, #16]
   1b768:	4213      	tst	r3, r2
   1b76a:	d0aa      	beq.n	1b6c2 <_strtod_l+0xdc2>
   1b76c:	e7d7      	b.n	1b71e <_strtod_l+0xe1e>
   1b76e:	236a      	movs	r3, #106	; 0x6a
   1b770:	2c00      	cmp	r4, #0
   1b772:	930a      	str	r3, [sp, #40]	; 0x28
   1b774:	f73f adb5 	bgt.w	1b2e2 <_strtod_l+0x9e2>
   1b778:	e5d1      	b.n	1b31e <_strtod_l+0xa1e>
   1b77a:	2300      	movs	r3, #0
   1b77c:	930a      	str	r3, [sp, #40]	; 0x28
   1b77e:	e5e1      	b.n	1b344 <_strtod_l+0xa44>
   1b780:	a81d      	add	r0, sp, #116	; 0x74
   1b782:	aa20      	add	r2, sp, #128	; 0x80
   1b784:	4928      	ldr	r1, [pc, #160]	; (1b828 <_strtod_l+0xf28>)
   1b786:	f02a f867 	bl	45858 <__hexnan>
   1b78a:	2805      	cmp	r0, #5
   1b78c:	f47f ac6a 	bne.w	1b064 <_strtod_l+0x764>
   1b790:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b792:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   1b796:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1b79a:	9305      	str	r3, [sp, #20]
   1b79c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1b79e:	9304      	str	r3, [sp, #16]
   1b7a0:	f7ff ba54 	b.w	1ac4c <_strtod_l+0x34c>
   1b7a4:	f04f 33ff 	mov.w	r3, #4294967295
   1b7a8:	e779      	b.n	1b69e <_strtod_l+0xd9e>
   1b7aa:	f02e fd95 	bl	4a2d8 <sulp>
   1b7ae:	4602      	mov	r2, r0
   1b7b0:	460b      	mov	r3, r1
   1b7b2:	4640      	mov	r0, r8
   1b7b4:	4649      	mov	r1, r9
   1b7b6:	f7fc fe37 	bl	18428 <__aeabi_dsub>
   1b7ba:	2200      	movs	r2, #0
   1b7bc:	2300      	movs	r3, #0
   1b7be:	4680      	mov	r8, r0
   1b7c0:	4689      	mov	r9, r1
   1b7c2:	f7fd fa51 	bl	18c68 <__aeabi_dcmpeq>
   1b7c6:	2800      	cmp	r0, #0
   1b7c8:	f47f ae0c 	bne.w	1b3e4 <_strtod_l+0xae4>
   1b7cc:	e779      	b.n	1b6c2 <_strtod_l+0xdc2>
   1b7ce:	4b17      	ldr	r3, [pc, #92]	; (1b82c <_strtod_l+0xf2c>)
   1b7d0:	4013      	ands	r3, r2
   1b7d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1b7d6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1b7da:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1b7de:	9305      	str	r3, [sp, #20]
   1b7e0:	f04f 33ff 	mov.w	r3, #4294967295
   1b7e4:	9304      	str	r3, [sp, #16]
   1b7e6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b7ea:	e76a      	b.n	1b6c2 <_strtod_l+0xdc2>
   1b7ec:	f04f 32ff 	mov.w	r2, #4294967295
   1b7f0:	fa02 f303 	lsl.w	r3, r2, r3
   1b7f4:	9a04      	ldr	r2, [sp, #16]
   1b7f6:	401a      	ands	r2, r3
   1b7f8:	9204      	str	r2, [sp, #16]
   1b7fa:	e5a3      	b.n	1b344 <_strtod_l+0xa44>
   1b7fc:	3b20      	subs	r3, #32
   1b7fe:	f04f 31ff 	mov.w	r1, #4294967295
   1b802:	fa01 f303 	lsl.w	r3, r1, r3
   1b806:	4013      	ands	r3, r2
   1b808:	9305      	str	r3, [sp, #20]
   1b80a:	e59b      	b.n	1b344 <_strtod_l+0xa44>
   1b80c:	462b      	mov	r3, r5
   1b80e:	3501      	adds	r5, #1
   1b810:	e5f2      	b.n	1b3f8 <_strtod_l+0xaf8>
   1b812:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b816:	e672      	b.n	1b4fe <_strtod_l+0xbfe>
   1b818:	4603      	mov	r3, r0
   1b81a:	e5f8      	b.n	1b40e <_strtod_l+0xb0e>
   1b81c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b820:	e579      	b.n	1b316 <_strtod_l+0xa16>
   1b822:	bf00      	nop
   1b824:	000fffff 	.word	0x000fffff
   1b828:	0004c5f8 	.word	0x0004c5f8
   1b82c:	7ff00000 	.word	0x7ff00000
   1b830:	0004a850 	.word	0x0004a850
   1b834:	00000000 	.word	0x00000000

0001b838 <_svfprintf_r>:
   1b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b83c:	b0d5      	sub	sp, #340	; 0x154
   1b83e:	460c      	mov	r4, r1
   1b840:	4690      	mov	r8, r2
   1b842:	9104      	str	r1, [sp, #16]
   1b844:	930c      	str	r3, [sp, #48]	; 0x30
   1b846:	9003      	str	r0, [sp, #12]
   1b848:	f02a f8d6 	bl	459f8 <_localeconv_r>
   1b84c:	6803      	ldr	r3, [r0, #0]
   1b84e:	4618      	mov	r0, r3
   1b850:	9316      	str	r3, [sp, #88]	; 0x58
   1b852:	f025 ffe7 	bl	41824 <strlen>
   1b856:	89a3      	ldrh	r3, [r4, #12]
   1b858:	9014      	str	r0, [sp, #80]	; 0x50
   1b85a:	0619      	lsls	r1, r3, #24
   1b85c:	d503      	bpl.n	1b866 <_svfprintf_r+0x2e>
   1b85e:	6923      	ldr	r3, [r4, #16]
   1b860:	2b00      	cmp	r3, #0
   1b862:	f000 876a 	beq.w	1c73a <_svfprintf_r+0xf02>
   1b866:	2300      	movs	r3, #0
   1b868:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1b86c:	4647      	mov	r7, r8
   1b86e:	930f      	str	r3, [sp, #60]	; 0x3c
   1b870:	9315      	str	r3, [sp, #84]	; 0x54
   1b872:	931a      	str	r3, [sp, #104]	; 0x68
   1b874:	9319      	str	r3, [sp, #100]	; 0x64
   1b876:	9307      	str	r3, [sp, #28]
   1b878:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
   1b87c:	ed9f 7b90 	vldr	d7, [pc, #576]	; 1bac0 <_svfprintf_r+0x288>
   1b880:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
   1b884:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   1b888:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
   1b88c:	783b      	ldrb	r3, [r7, #0]
   1b88e:	463c      	mov	r4, r7
   1b890:	b1db      	cbz	r3, 1b8ca <_svfprintf_r+0x92>
   1b892:	2b25      	cmp	r3, #37	; 0x25
   1b894:	d102      	bne.n	1b89c <_svfprintf_r+0x64>
   1b896:	e018      	b.n	1b8ca <_svfprintf_r+0x92>
   1b898:	2b25      	cmp	r3, #37	; 0x25
   1b89a:	d003      	beq.n	1b8a4 <_svfprintf_r+0x6c>
   1b89c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1b8a0:	2b00      	cmp	r3, #0
   1b8a2:	d1f9      	bne.n	1b898 <_svfprintf_r+0x60>
   1b8a4:	1be5      	subs	r5, r4, r7
   1b8a6:	d010      	beq.n	1b8ca <_svfprintf_r+0x92>
   1b8a8:	f8c9 7000 	str.w	r7, [r9]
   1b8ac:	f8c9 5004 	str.w	r5, [r9, #4]
   1b8b0:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   1b8b4:	3301      	adds	r3, #1
   1b8b6:	442a      	add	r2, r5
   1b8b8:	2b07      	cmp	r3, #7
   1b8ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   1b8be:	dc7d      	bgt.n	1b9bc <_svfprintf_r+0x184>
   1b8c0:	f109 0908 	add.w	r9, r9, #8
   1b8c4:	9b07      	ldr	r3, [sp, #28]
   1b8c6:	442b      	add	r3, r5
   1b8c8:	9307      	str	r3, [sp, #28]
   1b8ca:	7823      	ldrb	r3, [r4, #0]
   1b8cc:	2b00      	cmp	r3, #0
   1b8ce:	f001 806c 	beq.w	1c9aa <_svfprintf_r+0x1172>
   1b8d2:	2300      	movs	r3, #0
   1b8d4:	f04f 32ff 	mov.w	r2, #4294967295
   1b8d8:	f104 0b01 	add.w	fp, r4, #1
   1b8dc:	7866      	ldrb	r6, [r4, #1]
   1b8de:	4698      	mov	r8, r3
   1b8e0:	252b      	movs	r5, #43	; 0x2b
   1b8e2:	9206      	str	r2, [sp, #24]
   1b8e4:	930a      	str	r3, [sp, #40]	; 0x28
   1b8e6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1b8ea:	f10b 0b01 	add.w	fp, fp, #1
   1b8ee:	f1a6 0320 	sub.w	r3, r6, #32
   1b8f2:	2b5a      	cmp	r3, #90	; 0x5a
   1b8f4:	f200 83b0 	bhi.w	1c058 <_svfprintf_r+0x820>
   1b8f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b8fc:	03ae02c5 	.word	0x03ae02c5
   1b900:	02c003ae 	.word	0x02c003ae
   1b904:	03ae03ae 	.word	0x03ae03ae
   1b908:	02a103ae 	.word	0x02a103ae
   1b90c:	03ae03ae 	.word	0x03ae03ae
   1b910:	02910296 	.word	0x02910296
   1b914:	028c03ae 	.word	0x028c03ae
   1b918:	03ae0272 	.word	0x03ae0272
   1b91c:	0250025f 	.word	0x0250025f
   1b920:	02500250 	.word	0x02500250
   1b924:	02500250 	.word	0x02500250
   1b928:	02500250 	.word	0x02500250
   1b92c:	02500250 	.word	0x02500250
   1b930:	03ae03ae 	.word	0x03ae03ae
   1b934:	03ae03ae 	.word	0x03ae03ae
   1b938:	03ae03ae 	.word	0x03ae03ae
   1b93c:	036c03ae 	.word	0x036c03ae
   1b940:	035803ae 	.word	0x035803ae
   1b944:	036c033f 	.word	0x036c033f
   1b948:	036c036c 	.word	0x036c036c
   1b94c:	03ae03ae 	.word	0x03ae03ae
   1b950:	03ae03ae 	.word	0x03ae03ae
   1b954:	03ae033a 	.word	0x03ae033a
   1b958:	01de03ae 	.word	0x01de03ae
   1b95c:	03ae03ae 	.word	0x03ae03ae
   1b960:	031603ae 	.word	0x031603ae
   1b964:	008403ae 	.word	0x008403ae
   1b968:	03ae03ae 	.word	0x03ae03ae
   1b96c:	03ae0300 	.word	0x03ae0300
   1b970:	03ae03ae 	.word	0x03ae03ae
   1b974:	03ae03ae 	.word	0x03ae03ae
   1b978:	03ae03ae 	.word	0x03ae03ae
   1b97c:	036c03ae 	.word	0x036c03ae
   1b980:	035803ae 	.word	0x035803ae
   1b984:	036c020b 	.word	0x036c020b
   1b988:	036c036c 	.word	0x036c036c
   1b98c:	020b0264 	.word	0x020b0264
   1b990:	03ae005b 	.word	0x03ae005b
   1b994:	03ae02e8 	.word	0x03ae02e8
   1b998:	01e002d0 	.word	0x01e002d0
   1b99c:	005b02f0 	.word	0x005b02f0
   1b9a0:	031603ae 	.word	0x031603ae
   1b9a4:	0086005d 	.word	0x0086005d
   1b9a8:	03ae03ae 	.word	0x03ae03ae
   1b9ac:	03ae01f1 	.word	0x03ae01f1
   1b9b0:	005d      	.short	0x005d
   1b9b2:	f048 0820 	orr.w	r8, r8, #32
   1b9b6:	f89b 6000 	ldrb.w	r6, [fp]
   1b9ba:	e796      	b.n	1b8ea <_svfprintf_r+0xb2>
   1b9bc:	aa28      	add	r2, sp, #160	; 0xa0
   1b9be:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1b9c2:	f02b f867 	bl	46a94 <__ssprint_r>
   1b9c6:	b980      	cbnz	r0, 1b9ea <_svfprintf_r+0x1b2>
   1b9c8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1b9cc:	e77a      	b.n	1b8c4 <_svfprintf_r+0x8c>
   1b9ce:	aa28      	add	r2, sp, #160	; 0xa0
   1b9d0:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1b9d4:	f02b f85e 	bl	46a94 <__ssprint_r>
   1b9d8:	2800      	cmp	r0, #0
   1b9da:	f000 8161 	beq.w	1bca0 <_svfprintf_r+0x468>
   1b9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9e0:	b11b      	cbz	r3, 1b9ea <_svfprintf_r+0x1b2>
   1b9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b9e4:	9803      	ldr	r0, [sp, #12]
   1b9e6:	f029 f98f 	bl	44d08 <_free_r>
   1b9ea:	9b04      	ldr	r3, [sp, #16]
   1b9ec:	899b      	ldrh	r3, [r3, #12]
   1b9ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b9f2:	9b07      	ldr	r3, [sp, #28]
   1b9f4:	bf18      	it	ne
   1b9f6:	f04f 33ff 	movne.w	r3, #4294967295
   1b9fa:	9307      	str	r3, [sp, #28]
   1b9fc:	9807      	ldr	r0, [sp, #28]
   1b9fe:	b055      	add	sp, #340	; 0x154
   1ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba04:	f048 0810 	orr.w	r8, r8, #16
   1ba08:	f018 0f20 	tst.w	r8, #32
   1ba0c:	f000 8500 	beq.w	1c410 <_svfprintf_r+0xbd8>
   1ba10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ba12:	46c2      	mov	sl, r8
   1ba14:	2301      	movs	r3, #1
   1ba16:	3407      	adds	r4, #7
   1ba18:	f024 0207 	bic.w	r2, r4, #7
   1ba1c:	f102 0108 	add.w	r1, r2, #8
   1ba20:	e9d2 4500 	ldrd	r4, r5, [r2]
   1ba24:	910c      	str	r1, [sp, #48]	; 0x30
   1ba26:	2200      	movs	r2, #0
   1ba28:	a954      	add	r1, sp, #336	; 0x150
   1ba2a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   1ba2e:	9a06      	ldr	r2, [sp, #24]
   1ba30:	9105      	str	r1, [sp, #20]
   1ba32:	3201      	adds	r2, #1
   1ba34:	f000 8197 	beq.w	1bd66 <_svfprintf_r+0x52e>
   1ba38:	ea54 0205 	orrs.w	r2, r4, r5
   1ba3c:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
   1ba40:	f040 8190 	bne.w	1bd64 <_svfprintf_r+0x52c>
   1ba44:	9a06      	ldr	r2, [sp, #24]
   1ba46:	3200      	adds	r2, #0
   1ba48:	bf18      	it	ne
   1ba4a:	2201      	movne	r2, #1
   1ba4c:	2a00      	cmp	r2, #0
   1ba4e:	f040 8189 	bne.w	1bd64 <_svfprintf_r+0x52c>
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	f040 844f 	bne.w	1c2f6 <_svfprintf_r+0xabe>
   1ba58:	f01a 0201 	ands.w	r2, sl, #1
   1ba5c:	9208      	str	r2, [sp, #32]
   1ba5e:	f000 8499 	beq.w	1c394 <_svfprintf_r+0xb5c>
   1ba62:	2230      	movs	r2, #48	; 0x30
   1ba64:	af54      	add	r7, sp, #336	; 0x150
   1ba66:	9306      	str	r3, [sp, #24]
   1ba68:	f807 2d01 	strb.w	r2, [r7, #-1]!
   1ba6c:	9906      	ldr	r1, [sp, #24]
   1ba6e:	2300      	movs	r3, #0
   1ba70:	9808      	ldr	r0, [sp, #32]
   1ba72:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1ba76:	4281      	cmp	r1, r0
   1ba78:	930b      	str	r3, [sp, #44]	; 0x2c
   1ba7a:	930e      	str	r3, [sp, #56]	; 0x38
   1ba7c:	bfb8      	it	lt
   1ba7e:	4601      	movlt	r1, r0
   1ba80:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1ba84:	9105      	str	r1, [sp, #20]
   1ba86:	b112      	cbz	r2, 1ba8e <_svfprintf_r+0x256>
   1ba88:	9b05      	ldr	r3, [sp, #20]
   1ba8a:	3301      	adds	r3, #1
   1ba8c:	9305      	str	r3, [sp, #20]
   1ba8e:	f018 0302 	ands.w	r3, r8, #2
   1ba92:	d002      	beq.n	1ba9a <_svfprintf_r+0x262>
   1ba94:	9905      	ldr	r1, [sp, #20]
   1ba96:	3102      	adds	r1, #2
   1ba98:	9105      	str	r1, [sp, #20]
   1ba9a:	f018 0184 	ands.w	r1, r8, #132	; 0x84
   1ba9e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1baa0:	910d      	str	r1, [sp, #52]	; 0x34
   1baa2:	d143      	bne.n	1bb2c <_svfprintf_r+0x2f4>
   1baa4:	990a      	ldr	r1, [sp, #40]	; 0x28
   1baa6:	9805      	ldr	r0, [sp, #20]
   1baa8:	1a0d      	subs	r5, r1, r0
   1baaa:	2d00      	cmp	r5, #0
   1baac:	dd3e      	ble.n	1bb2c <_svfprintf_r+0x2f4>
   1baae:	2d10      	cmp	r5, #16
   1bab0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bab2:	dd2b      	ble.n	1bb0c <_svfprintf_r+0x2d4>
   1bab4:	4621      	mov	r1, r4
   1bab6:	f04f 0a10 	mov.w	sl, #16
   1baba:	462c      	mov	r4, r5
   1babc:	461d      	mov	r5, r3
   1babe:	e006      	b.n	1bace <_svfprintf_r+0x296>
	...
   1bac8:	3c10      	subs	r4, #16
   1baca:	2c10      	cmp	r4, #16
   1bacc:	dd1b      	ble.n	1bb06 <_svfprintf_r+0x2ce>
   1bace:	3201      	adds	r2, #1
   1bad0:	3110      	adds	r1, #16
   1bad2:	4bc0      	ldr	r3, [pc, #768]	; (1bdd4 <_svfprintf_r+0x59c>)
   1bad4:	f109 0908 	add.w	r9, r9, #8
   1bad8:	2a07      	cmp	r2, #7
   1bada:	f849 ac04 	str.w	sl, [r9, #-4]
   1bade:	f849 3c08 	str.w	r3, [r9, #-8]
   1bae2:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1bae6:	ddef      	ble.n	1bac8 <_svfprintf_r+0x290>
   1bae8:	aa28      	add	r2, sp, #160	; 0xa0
   1baea:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1baee:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1baf2:	f02a ffcf 	bl	46a94 <__ssprint_r>
   1baf6:	2800      	cmp	r0, #0
   1baf8:	f47f af71 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1bafc:	3c10      	subs	r4, #16
   1bafe:	2c10      	cmp	r4, #16
   1bb00:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1bb04:	dce3      	bgt.n	1bace <_svfprintf_r+0x296>
   1bb06:	462b      	mov	r3, r5
   1bb08:	4625      	mov	r5, r4
   1bb0a:	460c      	mov	r4, r1
   1bb0c:	3201      	adds	r2, #1
   1bb0e:	442c      	add	r4, r5
   1bb10:	49b0      	ldr	r1, [pc, #704]	; (1bdd4 <_svfprintf_r+0x59c>)
   1bb12:	2a07      	cmp	r2, #7
   1bb14:	f8c9 5004 	str.w	r5, [r9, #4]
   1bb18:	f8c9 1000 	str.w	r1, [r9]
   1bb1c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1bb20:	f300 865b 	bgt.w	1c7da <_svfprintf_r+0xfa2>
   1bb24:	f109 0908 	add.w	r9, r9, #8
   1bb28:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1bb2c:	b182      	cbz	r2, 1bb50 <_svfprintf_r+0x318>
   1bb2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bb30:	2101      	movs	r1, #1
   1bb32:	3401      	adds	r4, #1
   1bb34:	f10d 0083 	add.w	r0, sp, #131	; 0x83
   1bb38:	440a      	add	r2, r1
   1bb3a:	f8c9 1004 	str.w	r1, [r9, #4]
   1bb3e:	942a      	str	r4, [sp, #168]	; 0xa8
   1bb40:	2a07      	cmp	r2, #7
   1bb42:	f8c9 0000 	str.w	r0, [r9]
   1bb46:	9229      	str	r2, [sp, #164]	; 0xa4
   1bb48:	f300 83da 	bgt.w	1c300 <_svfprintf_r+0xac8>
   1bb4c:	f109 0908 	add.w	r9, r9, #8
   1bb50:	b17b      	cbz	r3, 1bb72 <_svfprintf_r+0x33a>
   1bb52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bb54:	3402      	adds	r4, #2
   1bb56:	a921      	add	r1, sp, #132	; 0x84
   1bb58:	2202      	movs	r2, #2
   1bb5a:	3301      	adds	r3, #1
   1bb5c:	942a      	str	r4, [sp, #168]	; 0xa8
   1bb5e:	f8c9 1000 	str.w	r1, [r9]
   1bb62:	2b07      	cmp	r3, #7
   1bb64:	9329      	str	r3, [sp, #164]	; 0xa4
   1bb66:	f8c9 2004 	str.w	r2, [r9, #4]
   1bb6a:	f300 83d7 	bgt.w	1c31c <_svfprintf_r+0xae4>
   1bb6e:	f109 0908 	add.w	r9, r9, #8
   1bb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bb74:	2b80      	cmp	r3, #128	; 0x80
   1bb76:	f000 82e3 	beq.w	1c140 <_svfprintf_r+0x908>
   1bb7a:	9b06      	ldr	r3, [sp, #24]
   1bb7c:	9a08      	ldr	r2, [sp, #32]
   1bb7e:	1a9d      	subs	r5, r3, r2
   1bb80:	2d00      	cmp	r5, #0
   1bb82:	dd35      	ble.n	1bbf0 <_svfprintf_r+0x3b8>
   1bb84:	2d10      	cmp	r5, #16
   1bb86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bb88:	4b93      	ldr	r3, [pc, #588]	; (1bdd8 <_svfprintf_r+0x5a0>)
   1bb8a:	dd24      	ble.n	1bbd6 <_svfprintf_r+0x39e>
   1bb8c:	4621      	mov	r1, r4
   1bb8e:	f04f 0a10 	mov.w	sl, #16
   1bb92:	461c      	mov	r4, r3
   1bb94:	e002      	b.n	1bb9c <_svfprintf_r+0x364>
   1bb96:	3d10      	subs	r5, #16
   1bb98:	2d10      	cmp	r5, #16
   1bb9a:	dd1a      	ble.n	1bbd2 <_svfprintf_r+0x39a>
   1bb9c:	3201      	adds	r2, #1
   1bb9e:	3110      	adds	r1, #16
   1bba0:	f8c9 4000 	str.w	r4, [r9]
   1bba4:	f109 0908 	add.w	r9, r9, #8
   1bba8:	2a07      	cmp	r2, #7
   1bbaa:	f849 ac04 	str.w	sl, [r9, #-4]
   1bbae:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1bbb2:	ddf0      	ble.n	1bb96 <_svfprintf_r+0x35e>
   1bbb4:	aa28      	add	r2, sp, #160	; 0xa0
   1bbb6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bbba:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1bbbe:	f02a ff69 	bl	46a94 <__ssprint_r>
   1bbc2:	2800      	cmp	r0, #0
   1bbc4:	f47f af0b 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1bbc8:	3d10      	subs	r5, #16
   1bbca:	2d10      	cmp	r5, #16
   1bbcc:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1bbd0:	dce4      	bgt.n	1bb9c <_svfprintf_r+0x364>
   1bbd2:	4623      	mov	r3, r4
   1bbd4:	460c      	mov	r4, r1
   1bbd6:	3201      	adds	r2, #1
   1bbd8:	442c      	add	r4, r5
   1bbda:	f8c9 3000 	str.w	r3, [r9]
   1bbde:	2a07      	cmp	r2, #7
   1bbe0:	f8c9 5004 	str.w	r5, [r9, #4]
   1bbe4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1bbe8:	f300 83c8 	bgt.w	1c37c <_svfprintf_r+0xb44>
   1bbec:	f109 0908 	add.w	r9, r9, #8
   1bbf0:	f418 7f80 	tst.w	r8, #256	; 0x100
   1bbf4:	f040 8244 	bne.w	1c080 <_svfprintf_r+0x848>
   1bbf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bbfa:	9a08      	ldr	r2, [sp, #32]
   1bbfc:	3301      	adds	r3, #1
   1bbfe:	f8c9 7000 	str.w	r7, [r9]
   1bc02:	4414      	add	r4, r2
   1bc04:	f8c9 2004 	str.w	r2, [r9, #4]
   1bc08:	2b07      	cmp	r3, #7
   1bc0a:	9329      	str	r3, [sp, #164]	; 0xa4
   1bc0c:	942a      	str	r4, [sp, #168]	; 0xa8
   1bc0e:	f300 831a 	bgt.w	1c246 <_svfprintf_r+0xa0e>
   1bc12:	f109 0908 	add.w	r9, r9, #8
   1bc16:	f018 0f04 	tst.w	r8, #4
   1bc1a:	d036      	beq.n	1bc8a <_svfprintf_r+0x452>
   1bc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc1e:	9a05      	ldr	r2, [sp, #20]
   1bc20:	1a9d      	subs	r5, r3, r2
   1bc22:	2d00      	cmp	r5, #0
   1bc24:	dd31      	ble.n	1bc8a <_svfprintf_r+0x452>
   1bc26:	2d10      	cmp	r5, #16
   1bc28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bc2a:	dd22      	ble.n	1bc72 <_svfprintf_r+0x43a>
   1bc2c:	2610      	movs	r6, #16
   1bc2e:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1bc32:	e002      	b.n	1bc3a <_svfprintf_r+0x402>
   1bc34:	3d10      	subs	r5, #16
   1bc36:	2d10      	cmp	r5, #16
   1bc38:	dd1b      	ble.n	1bc72 <_svfprintf_r+0x43a>
   1bc3a:	3301      	adds	r3, #1
   1bc3c:	3410      	adds	r4, #16
   1bc3e:	4a65      	ldr	r2, [pc, #404]	; (1bdd4 <_svfprintf_r+0x59c>)
   1bc40:	f109 0908 	add.w	r9, r9, #8
   1bc44:	2b07      	cmp	r3, #7
   1bc46:	f849 6c04 	str.w	r6, [r9, #-4]
   1bc4a:	f849 2c08 	str.w	r2, [r9, #-8]
   1bc4e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1bc52:	ddef      	ble.n	1bc34 <_svfprintf_r+0x3fc>
   1bc54:	aa28      	add	r2, sp, #160	; 0xa0
   1bc56:	4641      	mov	r1, r8
   1bc58:	4638      	mov	r0, r7
   1bc5a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bc5e:	f02a ff19 	bl	46a94 <__ssprint_r>
   1bc62:	2800      	cmp	r0, #0
   1bc64:	f47f aebb 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1bc68:	3d10      	subs	r5, #16
   1bc6a:	2d10      	cmp	r5, #16
   1bc6c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   1bc70:	dce3      	bgt.n	1bc3a <_svfprintf_r+0x402>
   1bc72:	3301      	adds	r3, #1
   1bc74:	442c      	add	r4, r5
   1bc76:	4a57      	ldr	r2, [pc, #348]	; (1bdd4 <_svfprintf_r+0x59c>)
   1bc78:	2b07      	cmp	r3, #7
   1bc7a:	f8c9 5004 	str.w	r5, [r9, #4]
   1bc7e:	f8c9 2000 	str.w	r2, [r9]
   1bc82:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1bc86:	f300 8449 	bgt.w	1c51c <_svfprintf_r+0xce4>
   1bc8a:	9b07      	ldr	r3, [sp, #28]
   1bc8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bc8e:	9905      	ldr	r1, [sp, #20]
   1bc90:	428a      	cmp	r2, r1
   1bc92:	bfac      	ite	ge
   1bc94:	189b      	addge	r3, r3, r2
   1bc96:	185b      	addlt	r3, r3, r1
   1bc98:	9307      	str	r3, [sp, #28]
   1bc9a:	2c00      	cmp	r4, #0
   1bc9c:	f47f ae97 	bne.w	1b9ce <_svfprintf_r+0x196>
   1bca0:	2300      	movs	r3, #0
   1bca2:	9329      	str	r3, [sp, #164]	; 0xa4
   1bca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bca6:	b11b      	cbz	r3, 1bcb0 <_svfprintf_r+0x478>
   1bca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bcaa:	9803      	ldr	r0, [sp, #12]
   1bcac:	f029 f82c 	bl	44d08 <_free_r>
   1bcb0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bcb4:	465f      	mov	r7, fp
   1bcb6:	e5e9      	b.n	1b88c <_svfprintf_r+0x54>
   1bcb8:	f048 0810 	orr.w	r8, r8, #16
   1bcbc:	f018 0f20 	tst.w	r8, #32
   1bcc0:	f000 83b9 	beq.w	1c436 <_svfprintf_r+0xbfe>
   1bcc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bcc6:	3407      	adds	r4, #7
   1bcc8:	f024 0307 	bic.w	r3, r4, #7
   1bccc:	f103 0208 	add.w	r2, r3, #8
   1bcd0:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bcd4:	920c      	str	r2, [sp, #48]	; 0x30
   1bcd6:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1bcda:	2300      	movs	r3, #0
   1bcdc:	e6a3      	b.n	1ba26 <_svfprintf_r+0x1ee>
   1bcde:	4b3f      	ldr	r3, [pc, #252]	; (1bddc <_svfprintf_r+0x5a4>)
   1bce0:	f018 0f20 	tst.w	r8, #32
   1bce4:	9315      	str	r3, [sp, #84]	; 0x54
   1bce6:	f000 810f 	beq.w	1bf08 <_svfprintf_r+0x6d0>
   1bcea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bcec:	3407      	adds	r4, #7
   1bcee:	f024 0307 	bic.w	r3, r4, #7
   1bcf2:	f103 0208 	add.w	r2, r3, #8
   1bcf6:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bcfa:	920c      	str	r2, [sp, #48]	; 0x30
   1bcfc:	ea54 0305 	orrs.w	r3, r4, r5
   1bd00:	d003      	beq.n	1bd0a <_svfprintf_r+0x4d2>
   1bd02:	f018 0f01 	tst.w	r8, #1
   1bd06:	f040 8445 	bne.w	1c594 <_svfprintf_r+0xd5c>
   1bd0a:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1bd0e:	2302      	movs	r3, #2
   1bd10:	e689      	b.n	1ba26 <_svfprintf_r+0x1ee>
   1bd12:	46c2      	mov	sl, r8
   1bd14:	f01a 0f20 	tst.w	sl, #32
   1bd18:	f000 8135 	beq.w	1bf86 <_svfprintf_r+0x74e>
   1bd1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bd1e:	3407      	adds	r4, #7
   1bd20:	f024 0407 	bic.w	r4, r4, #7
   1bd24:	e9d4 2300 	ldrd	r2, r3, [r4]
   1bd28:	f104 0108 	add.w	r1, r4, #8
   1bd2c:	461d      	mov	r5, r3
   1bd2e:	4614      	mov	r4, r2
   1bd30:	910c      	str	r1, [sp, #48]	; 0x30
   1bd32:	2a00      	cmp	r2, #0
   1bd34:	f173 0300 	sbcs.w	r3, r3, #0
   1bd38:	da06      	bge.n	1bd48 <_svfprintf_r+0x510>
   1bd3a:	4264      	negs	r4, r4
   1bd3c:	f04f 032d 	mov.w	r3, #45	; 0x2d
   1bd40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1bd44:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1bd48:	ab54      	add	r3, sp, #336	; 0x150
   1bd4a:	9305      	str	r3, [sp, #20]
   1bd4c:	9b06      	ldr	r3, [sp, #24]
   1bd4e:	3301      	adds	r3, #1
   1bd50:	f000 8324 	beq.w	1c39c <_svfprintf_r+0xb64>
   1bd54:	ea54 0205 	orrs.w	r2, r4, r5
   1bd58:	f04f 0301 	mov.w	r3, #1
   1bd5c:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
   1bd60:	f43f ae70 	beq.w	1ba44 <_svfprintf_r+0x20c>
   1bd64:	46c2      	mov	sl, r8
   1bd66:	2b01      	cmp	r3, #1
   1bd68:	f000 8318 	beq.w	1c39c <_svfprintf_r+0xb64>
   1bd6c:	2b02      	cmp	r3, #2
   1bd6e:	f040 82e1 	bne.w	1c334 <_svfprintf_r+0xafc>
   1bd72:	af54      	add	r7, sp, #336	; 0x150
   1bd74:	9815      	ldr	r0, [sp, #84]	; 0x54
   1bd76:	0923      	lsrs	r3, r4, #4
   1bd78:	f004 010f 	and.w	r1, r4, #15
   1bd7c:	092a      	lsrs	r2, r5, #4
   1bd7e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1bd82:	4615      	mov	r5, r2
   1bd84:	461c      	mov	r4, r3
   1bd86:	5c43      	ldrb	r3, [r0, r1]
   1bd88:	f807 3d01 	strb.w	r3, [r7, #-1]!
   1bd8c:	ea54 0305 	orrs.w	r3, r4, r5
   1bd90:	d1f1      	bne.n	1bd76 <_svfprintf_r+0x53e>
   1bd92:	9b05      	ldr	r3, [sp, #20]
   1bd94:	46d0      	mov	r8, sl
   1bd96:	1bdb      	subs	r3, r3, r7
   1bd98:	9308      	str	r3, [sp, #32]
   1bd9a:	e667      	b.n	1ba6c <_svfprintf_r+0x234>
   1bd9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bda0:	2200      	movs	r2, #0
   1bda2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1bda6:	f81b 6b01 	ldrb.w	r6, [fp], #1
   1bdaa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1bdae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bdb2:	2b09      	cmp	r3, #9
   1bdb4:	d9f5      	bls.n	1bda2 <_svfprintf_r+0x56a>
   1bdb6:	920a      	str	r2, [sp, #40]	; 0x28
   1bdb8:	e599      	b.n	1b8ee <_svfprintf_r+0xb6>
   1bdba:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1bdbe:	f89b 6000 	ldrb.w	r6, [fp]
   1bdc2:	e592      	b.n	1b8ea <_svfprintf_r+0xb2>
   1bdc4:	f89b 6000 	ldrb.w	r6, [fp]
   1bdc8:	2e68      	cmp	r6, #104	; 0x68
   1bdca:	f000 84e2 	beq.w	1c792 <_svfprintf_r+0xf5a>
   1bdce:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   1bdd2:	e58a      	b.n	1b8ea <_svfprintf_r+0xb2>
   1bdd4:	0004c650 	.word	0x0004c650
   1bdd8:	0004c660 	.word	0x0004c660
   1bddc:	0004c61c 	.word	0x0004c61c
   1bde0:	f89b 6000 	ldrb.w	r6, [fp]
   1bde4:	f10b 0201 	add.w	r2, fp, #1
   1bde8:	2e2a      	cmp	r6, #42	; 0x2a
   1bdea:	f001 81e9 	beq.w	1d1c0 <_svfprintf_r+0x1988>
   1bdee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bdf2:	2b09      	cmp	r3, #9
   1bdf4:	f200 86bc 	bhi.w	1cb70 <_svfprintf_r+0x1338>
   1bdf8:	2100      	movs	r1, #0
   1bdfa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1bdfe:	f812 6b01 	ldrb.w	r6, [r2], #1
   1be02:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1be06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1be0a:	2b09      	cmp	r3, #9
   1be0c:	d9f5      	bls.n	1bdfa <_svfprintf_r+0x5c2>
   1be0e:	9106      	str	r1, [sp, #24]
   1be10:	4693      	mov	fp, r2
   1be12:	e56c      	b.n	1b8ee <_svfprintf_r+0xb6>
   1be14:	f89b 6000 	ldrb.w	r6, [fp]
   1be18:	f048 0804 	orr.w	r8, r8, #4
   1be1c:	e565      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be1e:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
   1be22:	f89b 6000 	ldrb.w	r6, [fp]
   1be26:	e560      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1be2a:	f89b 6000 	ldrb.w	r6, [fp]
   1be2e:	681a      	ldr	r2, [r3, #0]
   1be30:	3304      	adds	r3, #4
   1be32:	2a00      	cmp	r2, #0
   1be34:	920a      	str	r2, [sp, #40]	; 0x28
   1be36:	f2c0 848f 	blt.w	1c758 <_svfprintf_r+0xf20>
   1be3a:	930c      	str	r3, [sp, #48]	; 0x30
   1be3c:	e555      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be3e:	9e03      	ldr	r6, [sp, #12]
   1be40:	4630      	mov	r0, r6
   1be42:	f029 fdd9 	bl	459f8 <_localeconv_r>
   1be46:	6843      	ldr	r3, [r0, #4]
   1be48:	4618      	mov	r0, r3
   1be4a:	9319      	str	r3, [sp, #100]	; 0x64
   1be4c:	f025 fcea 	bl	41824 <strlen>
   1be50:	9018      	str	r0, [sp, #96]	; 0x60
   1be52:	4604      	mov	r4, r0
   1be54:	4630      	mov	r0, r6
   1be56:	f029 fdcf 	bl	459f8 <_localeconv_r>
   1be5a:	6883      	ldr	r3, [r0, #8]
   1be5c:	9317      	str	r3, [sp, #92]	; 0x5c
   1be5e:	2c00      	cmp	r4, #0
   1be60:	f43f ada9 	beq.w	1b9b6 <_svfprintf_r+0x17e>
   1be64:	2b00      	cmp	r3, #0
   1be66:	f43f ada6 	beq.w	1b9b6 <_svfprintf_r+0x17e>
   1be6a:	781b      	ldrb	r3, [r3, #0]
   1be6c:	f89b 6000 	ldrb.w	r6, [fp]
   1be70:	2b00      	cmp	r3, #0
   1be72:	f43f ad3a 	beq.w	1b8ea <_svfprintf_r+0xb2>
   1be76:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   1be7a:	e536      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be7c:	f048 0801 	orr.w	r8, r8, #1
   1be80:	f89b 6000 	ldrb.w	r6, [fp]
   1be84:	e531      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be86:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   1be8a:	f89b 6000 	ldrb.w	r6, [fp]
   1be8e:	2b00      	cmp	r3, #0
   1be90:	f47f ad2b 	bne.w	1b8ea <_svfprintf_r+0xb2>
   1be94:	2320      	movs	r3, #32
   1be96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1be9a:	e526      	b.n	1b8ea <_svfprintf_r+0xb2>
   1be9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1be9e:	f018 0f20 	tst.w	r8, #32
   1bea2:	f852 3b04 	ldr.w	r3, [r2], #4
   1bea6:	920c      	str	r2, [sp, #48]	; 0x30
   1bea8:	f040 836c 	bne.w	1c584 <_svfprintf_r+0xd4c>
   1beac:	f018 0f10 	tst.w	r8, #16
   1beb0:	f040 8576 	bne.w	1c9a0 <_svfprintf_r+0x1168>
   1beb4:	f018 0f40 	tst.w	r8, #64	; 0x40
   1beb8:	f040 8679 	bne.w	1cbae <_svfprintf_r+0x1376>
   1bebc:	f418 7f00 	tst.w	r8, #512	; 0x200
   1bec0:	f000 856e 	beq.w	1c9a0 <_svfprintf_r+0x1168>
   1bec4:	9a07      	ldr	r2, [sp, #28]
   1bec6:	465f      	mov	r7, fp
   1bec8:	701a      	strb	r2, [r3, #0]
   1beca:	e4df      	b.n	1b88c <_svfprintf_r+0x54>
   1becc:	f89b 6000 	ldrb.w	r6, [fp]
   1bed0:	2e6c      	cmp	r6, #108	; 0x6c
   1bed2:	f000 8456 	beq.w	1c782 <_svfprintf_r+0xf4a>
   1bed6:	f048 0810 	orr.w	r8, r8, #16
   1beda:	e506      	b.n	1b8ea <_svfprintf_r+0xb2>
   1bedc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bede:	f647 0330 	movw	r3, #30768	; 0x7830
   1bee2:	f048 0a02 	orr.w	sl, r8, #2
   1bee6:	2500      	movs	r5, #0
   1bee8:	6814      	ldr	r4, [r2, #0]
   1beea:	3204      	adds	r2, #4
   1beec:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
   1bef0:	2678      	movs	r6, #120	; 0x78
   1bef2:	4bb2      	ldr	r3, [pc, #712]	; (1c1bc <_svfprintf_r+0x984>)
   1bef4:	920c      	str	r2, [sp, #48]	; 0x30
   1bef6:	9315      	str	r3, [sp, #84]	; 0x54
   1bef8:	2302      	movs	r3, #2
   1befa:	e594      	b.n	1ba26 <_svfprintf_r+0x1ee>
   1befc:	4bb0      	ldr	r3, [pc, #704]	; (1c1c0 <_svfprintf_r+0x988>)
   1befe:	f018 0f20 	tst.w	r8, #32
   1bf02:	9315      	str	r3, [sp, #84]	; 0x54
   1bf04:	f47f aef1 	bne.w	1bcea <_svfprintf_r+0x4b2>
   1bf08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf0a:	f018 0f10 	tst.w	r8, #16
   1bf0e:	f102 0304 	add.w	r3, r2, #4
   1bf12:	f040 8332 	bne.w	1c57a <_svfprintf_r+0xd42>
   1bf16:	f018 0f40 	tst.w	r8, #64	; 0x40
   1bf1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf1c:	f000 8329 	beq.w	1c572 <_svfprintf_r+0xd3a>
   1bf20:	8814      	ldrh	r4, [r2, #0]
   1bf22:	2500      	movs	r5, #0
   1bf24:	930c      	str	r3, [sp, #48]	; 0x30
   1bf26:	e6e9      	b.n	1bcfc <_svfprintf_r+0x4c4>
   1bf28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf2a:	2500      	movs	r5, #0
   1bf2c:	681f      	ldr	r7, [r3, #0]
   1bf2e:	1d1c      	adds	r4, r3, #4
   1bf30:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
   1bf34:	2f00      	cmp	r7, #0
   1bf36:	f000 8440 	beq.w	1c7ba <_svfprintf_r+0xf82>
   1bf3a:	9a06      	ldr	r2, [sp, #24]
   1bf3c:	1c53      	adds	r3, r2, #1
   1bf3e:	f000 85f1 	beq.w	1cb24 <_svfprintf_r+0x12ec>
   1bf42:	4629      	mov	r1, r5
   1bf44:	4638      	mov	r0, r7
   1bf46:	f024 fff1 	bl	40f2c <memchr>
   1bf4a:	900b      	str	r0, [sp, #44]	; 0x2c
   1bf4c:	2800      	cmp	r0, #0
   1bf4e:	f000 878e 	beq.w	1ce6e <_svfprintf_r+0x1636>
   1bf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bf54:	9506      	str	r5, [sp, #24]
   1bf56:	1bd9      	subs	r1, r3, r7
   1bf58:	940c      	str	r4, [sp, #48]	; 0x30
   1bf5a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1bf5e:	9108      	str	r1, [sp, #32]
   1bf60:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1bf64:	950b      	str	r5, [sp, #44]	; 0x2c
   1bf66:	9105      	str	r1, [sp, #20]
   1bf68:	950e      	str	r5, [sp, #56]	; 0x38
   1bf6a:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1bf6e:	e58a      	b.n	1ba86 <_svfprintf_r+0x24e>
   1bf70:	f048 0808 	orr.w	r8, r8, #8
   1bf74:	f89b 6000 	ldrb.w	r6, [fp]
   1bf78:	e4b7      	b.n	1b8ea <_svfprintf_r+0xb2>
   1bf7a:	f048 0a10 	orr.w	sl, r8, #16
   1bf7e:	f01a 0f20 	tst.w	sl, #32
   1bf82:	f47f aecb 	bne.w	1bd1c <_svfprintf_r+0x4e4>
   1bf86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf88:	f01a 0f10 	tst.w	sl, #16
   1bf8c:	f102 0304 	add.w	r3, r2, #4
   1bf90:	f040 82e8 	bne.w	1c564 <_svfprintf_r+0xd2c>
   1bf94:	f01a 0f40 	tst.w	sl, #64	; 0x40
   1bf98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf9a:	f000 82df 	beq.w	1c55c <_svfprintf_r+0xd24>
   1bf9e:	f9b2 4000 	ldrsh.w	r4, [r2]
   1bfa2:	930c      	str	r3, [sp, #48]	; 0x30
   1bfa4:	17e5      	asrs	r5, r4, #31
   1bfa6:	4622      	mov	r2, r4
   1bfa8:	462b      	mov	r3, r5
   1bfaa:	e6c2      	b.n	1bd32 <_svfprintf_r+0x4fa>
   1bfac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bfae:	2300      	movs	r3, #0
   1bfb0:	2001      	movs	r0, #1
   1bfb2:	af3b      	add	r7, sp, #236	; 0xec
   1bfb4:	6811      	ldr	r1, [r2, #0]
   1bfb6:	3204      	adds	r2, #4
   1bfb8:	9005      	str	r0, [sp, #20]
   1bfba:	920c      	str	r2, [sp, #48]	; 0x30
   1bfbc:	461a      	mov	r2, r3
   1bfbe:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1bfc2:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   1bfc6:	9008      	str	r0, [sp, #32]
   1bfc8:	930b      	str	r3, [sp, #44]	; 0x2c
   1bfca:	9306      	str	r3, [sp, #24]
   1bfcc:	930e      	str	r3, [sp, #56]	; 0x38
   1bfce:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1bfd2:	e55c      	b.n	1ba8e <_svfprintf_r+0x256>
   1bfd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bfd6:	f04f 32ff 	mov.w	r2, #4294967295
   1bfda:	4b7a      	ldr	r3, [pc, #488]	; (1c1c4 <_svfprintf_r+0x98c>)
   1bfdc:	3407      	adds	r4, #7
   1bfde:	f024 0407 	bic.w	r4, r4, #7
   1bfe2:	ed94 7b00 	vldr	d7, [r4]
   1bfe6:	f104 0108 	add.w	r1, r4, #8
   1bfea:	ec55 4b17 	vmov	r4, r5, d7
   1bfee:	910c      	str	r1, [sp, #48]	; 0x30
   1bff0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   1bff4:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
   1bff8:	911d      	str	r1, [sp, #116]	; 0x74
   1bffa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   1bffe:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
   1c002:	f7fe f8a9 	bl	1a158 <__aeabi_dcmpun>
   1c006:	2800      	cmp	r0, #0
   1c008:	f040 82d0 	bne.w	1c5ac <_svfprintf_r+0xd74>
   1c00c:	f04f 32ff 	mov.w	r2, #4294967295
   1c010:	4b6c      	ldr	r3, [pc, #432]	; (1c1c4 <_svfprintf_r+0x98c>)
   1c012:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   1c016:	f7fc fe3b 	bl	18c90 <__aeabi_dcmple>
   1c01a:	2800      	cmp	r0, #0
   1c01c:	f040 82c6 	bne.w	1c5ac <_svfprintf_r+0xd74>
   1c020:	2200      	movs	r2, #0
   1c022:	2300      	movs	r3, #0
   1c024:	4620      	mov	r0, r4
   1c026:	4629      	mov	r1, r5
   1c028:	f7fc fe28 	bl	18c7c <__aeabi_dcmplt>
   1c02c:	2800      	cmp	r0, #0
   1c02e:	f040 863d 	bne.w	1ccac <_svfprintf_r+0x1474>
   1c032:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c036:	2003      	movs	r0, #3
   1c038:	4f63      	ldr	r7, [pc, #396]	; (1c1c8 <_svfprintf_r+0x990>)
   1c03a:	4b64      	ldr	r3, [pc, #400]	; (1c1cc <_svfprintf_r+0x994>)
   1c03c:	9005      	str	r0, [sp, #20]
   1c03e:	2100      	movs	r1, #0
   1c040:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   1c044:	9008      	str	r0, [sp, #32]
   1c046:	2e47      	cmp	r6, #71	; 0x47
   1c048:	bfd8      	it	le
   1c04a:	461f      	movle	r7, r3
   1c04c:	910b      	str	r1, [sp, #44]	; 0x2c
   1c04e:	9106      	str	r1, [sp, #24]
   1c050:	910e      	str	r1, [sp, #56]	; 0x38
   1c052:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
   1c056:	e516      	b.n	1ba86 <_svfprintf_r+0x24e>
   1c058:	2e00      	cmp	r6, #0
   1c05a:	f000 84a6 	beq.w	1c9aa <_svfprintf_r+0x1172>
   1c05e:	2201      	movs	r2, #1
   1c060:	2300      	movs	r3, #0
   1c062:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   1c066:	af3b      	add	r7, sp, #236	; 0xec
   1c068:	4611      	mov	r1, r2
   1c06a:	9205      	str	r2, [sp, #20]
   1c06c:	461a      	mov	r2, r3
   1c06e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1c072:	9108      	str	r1, [sp, #32]
   1c074:	920b      	str	r2, [sp, #44]	; 0x2c
   1c076:	9206      	str	r2, [sp, #24]
   1c078:	920e      	str	r2, [sp, #56]	; 0x38
   1c07a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   1c07e:	e506      	b.n	1ba8e <_svfprintf_r+0x256>
   1c080:	2e65      	cmp	r6, #101	; 0x65
   1c082:	f340 80ec 	ble.w	1c25e <_svfprintf_r+0xa26>
   1c086:	2200      	movs	r2, #0
   1c088:	2300      	movs	r3, #0
   1c08a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c08e:	f7fc fdeb 	bl	18c68 <__aeabi_dcmpeq>
   1c092:	2800      	cmp	r0, #0
   1c094:	f000 80a0 	beq.w	1c1d8 <_svfprintf_r+0x9a0>
   1c098:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c09a:	2201      	movs	r2, #1
   1c09c:	3401      	adds	r4, #1
   1c09e:	494c      	ldr	r1, [pc, #304]	; (1c1d0 <_svfprintf_r+0x998>)
   1c0a0:	4413      	add	r3, r2
   1c0a2:	f8c9 2004 	str.w	r2, [r9, #4]
   1c0a6:	942a      	str	r4, [sp, #168]	; 0xa8
   1c0a8:	2b07      	cmp	r3, #7
   1c0aa:	f8c9 1000 	str.w	r1, [r9]
   1c0ae:	9329      	str	r3, [sp, #164]	; 0xa4
   1c0b0:	f300 8456 	bgt.w	1c960 <_svfprintf_r+0x1128>
   1c0b4:	f109 0908 	add.w	r9, r9, #8
   1c0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c0ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c0bc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c0be:	4293      	cmp	r3, r2
   1c0c0:	f280 8226 	bge.w	1c510 <_svfprintf_r+0xcd8>
   1c0c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c0c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c0c8:	3301      	adds	r3, #1
   1c0ca:	9916      	ldr	r1, [sp, #88]	; 0x58
   1c0cc:	4414      	add	r4, r2
   1c0ce:	f8c9 2004 	str.w	r2, [r9, #4]
   1c0d2:	2b07      	cmp	r3, #7
   1c0d4:	f8c9 1000 	str.w	r1, [r9]
   1c0d8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1c0dc:	f300 8361 	bgt.w	1c7a2 <_svfprintf_r+0xf6a>
   1c0e0:	f109 0908 	add.w	r9, r9, #8
   1c0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c0e6:	1e5d      	subs	r5, r3, #1
   1c0e8:	2d00      	cmp	r5, #0
   1c0ea:	f77f ad94 	ble.w	1bc16 <_svfprintf_r+0x3de>
   1c0ee:	2d10      	cmp	r5, #16
   1c0f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c0f2:	4b38      	ldr	r3, [pc, #224]	; (1c1d4 <_svfprintf_r+0x99c>)
   1c0f4:	f340 841b 	ble.w	1c92e <_svfprintf_r+0x10f6>
   1c0f8:	4619      	mov	r1, r3
   1c0fa:	2610      	movs	r6, #16
   1c0fc:	4623      	mov	r3, r4
   1c0fe:	460c      	mov	r4, r1
   1c100:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   1c104:	e003      	b.n	1c10e <_svfprintf_r+0x8d6>
   1c106:	3d10      	subs	r5, #16
   1c108:	2d10      	cmp	r5, #16
   1c10a:	f340 840d 	ble.w	1c928 <_svfprintf_r+0x10f0>
   1c10e:	3201      	adds	r2, #1
   1c110:	3310      	adds	r3, #16
   1c112:	f8c9 4000 	str.w	r4, [r9]
   1c116:	f109 0908 	add.w	r9, r9, #8
   1c11a:	2a07      	cmp	r2, #7
   1c11c:	f849 6c04 	str.w	r6, [r9, #-4]
   1c120:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   1c124:	ddef      	ble.n	1c106 <_svfprintf_r+0x8ce>
   1c126:	aa28      	add	r2, sp, #160	; 0xa0
   1c128:	4651      	mov	r1, sl
   1c12a:	4638      	mov	r0, r7
   1c12c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c130:	f02a fcb0 	bl	46a94 <__ssprint_r>
   1c134:	2800      	cmp	r0, #0
   1c136:	f47f ac52 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c13a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   1c13e:	e7e2      	b.n	1c106 <_svfprintf_r+0x8ce>
   1c140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c142:	9a05      	ldr	r2, [sp, #20]
   1c144:	1a9d      	subs	r5, r3, r2
   1c146:	2d00      	cmp	r5, #0
   1c148:	f77f ad17 	ble.w	1bb7a <_svfprintf_r+0x342>
   1c14c:	2d10      	cmp	r5, #16
   1c14e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c150:	4b20      	ldr	r3, [pc, #128]	; (1c1d4 <_svfprintf_r+0x99c>)
   1c152:	dd24      	ble.n	1c19e <_svfprintf_r+0x966>
   1c154:	4621      	mov	r1, r4
   1c156:	f04f 0a10 	mov.w	sl, #16
   1c15a:	461c      	mov	r4, r3
   1c15c:	e002      	b.n	1c164 <_svfprintf_r+0x92c>
   1c15e:	3d10      	subs	r5, #16
   1c160:	2d10      	cmp	r5, #16
   1c162:	dd1a      	ble.n	1c19a <_svfprintf_r+0x962>
   1c164:	3201      	adds	r2, #1
   1c166:	3110      	adds	r1, #16
   1c168:	f8c9 4000 	str.w	r4, [r9]
   1c16c:	f109 0908 	add.w	r9, r9, #8
   1c170:	2a07      	cmp	r2, #7
   1c172:	f849 ac04 	str.w	sl, [r9, #-4]
   1c176:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1c17a:	ddf0      	ble.n	1c15e <_svfprintf_r+0x926>
   1c17c:	aa28      	add	r2, sp, #160	; 0xa0
   1c17e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c182:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c186:	f02a fc85 	bl	46a94 <__ssprint_r>
   1c18a:	2800      	cmp	r0, #0
   1c18c:	f47f ac27 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c190:	3d10      	subs	r5, #16
   1c192:	2d10      	cmp	r5, #16
   1c194:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1c198:	dce4      	bgt.n	1c164 <_svfprintf_r+0x92c>
   1c19a:	4623      	mov	r3, r4
   1c19c:	460c      	mov	r4, r1
   1c19e:	3201      	adds	r2, #1
   1c1a0:	442c      	add	r4, r5
   1c1a2:	f8c9 3000 	str.w	r3, [r9]
   1c1a6:	2a07      	cmp	r2, #7
   1c1a8:	f8c9 5004 	str.w	r5, [r9, #4]
   1c1ac:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c1b0:	f300 83c9 	bgt.w	1c946 <_svfprintf_r+0x110e>
   1c1b4:	f109 0908 	add.w	r9, r9, #8
   1c1b8:	e4df      	b.n	1bb7a <_svfprintf_r+0x342>
   1c1ba:	bf00      	nop
   1c1bc:	0004c61c 	.word	0x0004c61c
   1c1c0:	0004c630 	.word	0x0004c630
   1c1c4:	7fefffff 	.word	0x7fefffff
   1c1c8:	0004c610 	.word	0x0004c610
   1c1cc:	0004c60c 	.word	0x0004c60c
   1c1d0:	0004c64c 	.word	0x0004c64c
   1c1d4:	0004c660 	.word	0x0004c660
   1c1d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	f300 814c 	bgt.w	1c478 <_svfprintf_r+0xc40>
   1c1e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c1e2:	2101      	movs	r1, #1
   1c1e4:	3401      	adds	r4, #1
   1c1e6:	48c8      	ldr	r0, [pc, #800]	; (1c508 <_svfprintf_r+0xcd0>)
   1c1e8:	440a      	add	r2, r1
   1c1ea:	f8c9 1004 	str.w	r1, [r9, #4]
   1c1ee:	942a      	str	r4, [sp, #168]	; 0xa8
   1c1f0:	2a07      	cmp	r2, #7
   1c1f2:	f8c9 0000 	str.w	r0, [r9]
   1c1f6:	9229      	str	r2, [sp, #164]	; 0xa4
   1c1f8:	f300 862b 	bgt.w	1ce52 <_svfprintf_r+0x161a>
   1c1fc:	f109 0908 	add.w	r9, r9, #8
   1c200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c202:	431a      	orrs	r2, r3
   1c204:	f000 866a 	beq.w	1cedc <_svfprintf_r+0x16a4>
   1c208:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c20a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1c20c:	3201      	adds	r2, #1
   1c20e:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c210:	440c      	add	r4, r1
   1c212:	f8c9 1004 	str.w	r1, [r9, #4]
   1c216:	2a07      	cmp	r2, #7
   1c218:	f8c9 0000 	str.w	r0, [r9]
   1c21c:	942a      	str	r4, [sp, #168]	; 0xa8
   1c21e:	9229      	str	r2, [sp, #164]	; 0xa4
   1c220:	f300 8631 	bgt.w	1ce86 <_svfprintf_r+0x164e>
   1c224:	f109 0908 	add.w	r9, r9, #8
   1c228:	2b00      	cmp	r3, #0
   1c22a:	f2c0 86ca 	blt.w	1cfc2 <_svfprintf_r+0x178a>
   1c22e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c230:	3201      	adds	r2, #1
   1c232:	f8c9 7000 	str.w	r7, [r9]
   1c236:	441c      	add	r4, r3
   1c238:	2a07      	cmp	r2, #7
   1c23a:	f8c9 3004 	str.w	r3, [r9, #4]
   1c23e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c242:	f77f ace6 	ble.w	1bc12 <_svfprintf_r+0x3da>
   1c246:	aa28      	add	r2, sp, #160	; 0xa0
   1c248:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c24c:	f02a fc22 	bl	46a94 <__ssprint_r>
   1c250:	2800      	cmp	r0, #0
   1c252:	f47f abc4 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c256:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c258:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c25c:	e4db      	b.n	1bc16 <_svfprintf_r+0x3de>
   1c25e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c260:	3401      	adds	r4, #1
   1c262:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c264:	f109 0508 	add.w	r5, r9, #8
   1c268:	2a01      	cmp	r2, #1
   1c26a:	f103 0601 	add.w	r6, r3, #1
   1c26e:	f340 80f0 	ble.w	1c452 <_svfprintf_r+0xc1a>
   1c272:	2301      	movs	r3, #1
   1c274:	2e07      	cmp	r6, #7
   1c276:	f8c9 7000 	str.w	r7, [r9]
   1c27a:	f8c9 3004 	str.w	r3, [r9, #4]
   1c27e:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c282:	f300 8345 	bgt.w	1c910 <_svfprintf_r+0x10d8>
   1c286:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c288:	3601      	adds	r6, #1
   1c28a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1c28c:	441c      	add	r4, r3
   1c28e:	2e07      	cmp	r6, #7
   1c290:	602a      	str	r2, [r5, #0]
   1c292:	606b      	str	r3, [r5, #4]
   1c294:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c298:	f300 832e 	bgt.w	1c8f8 <_svfprintf_r+0x10c0>
   1c29c:	3508      	adds	r5, #8
   1c29e:	1c73      	adds	r3, r6, #1
   1c2a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c2a2:	f105 0908 	add.w	r9, r5, #8
   1c2a6:	9308      	str	r3, [sp, #32]
   1c2a8:	f102 3aff 	add.w	sl, r2, #4294967295
   1c2ac:	9306      	str	r3, [sp, #24]
   1c2ae:	2200      	movs	r2, #0
   1c2b0:	2300      	movs	r3, #0
   1c2b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c2b6:	f7fc fcd7 	bl	18c68 <__aeabi_dcmpeq>
   1c2ba:	2800      	cmp	r0, #0
   1c2bc:	d17c      	bne.n	1c3b8 <_svfprintf_r+0xb80>
   1c2be:	9b06      	ldr	r3, [sp, #24]
   1c2c0:	3701      	adds	r7, #1
   1c2c2:	4454      	add	r4, sl
   1c2c4:	2b07      	cmp	r3, #7
   1c2c6:	9329      	str	r3, [sp, #164]	; 0xa4
   1c2c8:	942a      	str	r4, [sp, #168]	; 0xa8
   1c2ca:	e9c5 7a00 	strd	r7, sl, [r5]
   1c2ce:	f300 8248 	bgt.w	1c762 <_svfprintf_r+0xf2a>
   1c2d2:	f105 0310 	add.w	r3, r5, #16
   1c2d6:	1cb2      	adds	r2, r6, #2
   1c2d8:	464d      	mov	r5, r9
   1c2da:	4699      	mov	r9, r3
   1c2dc:	9206      	str	r2, [sp, #24]
   1c2de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1c2e0:	ab24      	add	r3, sp, #144	; 0x90
   1c2e2:	4414      	add	r4, r2
   1c2e4:	606a      	str	r2, [r5, #4]
   1c2e6:	9a06      	ldr	r2, [sp, #24]
   1c2e8:	942a      	str	r4, [sp, #168]	; 0xa8
   1c2ea:	2a07      	cmp	r2, #7
   1c2ec:	9229      	str	r2, [sp, #164]	; 0xa4
   1c2ee:	602b      	str	r3, [r5, #0]
   1c2f0:	f77f ac91 	ble.w	1bc16 <_svfprintf_r+0x3de>
   1c2f4:	e7a7      	b.n	1c246 <_svfprintf_r+0xa0e>
   1c2f6:	9206      	str	r2, [sp, #24]
   1c2f8:	af54      	add	r7, sp, #336	; 0x150
   1c2fa:	9208      	str	r2, [sp, #32]
   1c2fc:	f7ff bbb6 	b.w	1ba6c <_svfprintf_r+0x234>
   1c300:	aa28      	add	r2, sp, #160	; 0xa0
   1c302:	931b      	str	r3, [sp, #108]	; 0x6c
   1c304:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c308:	f02a fbc4 	bl	46a94 <__ssprint_r>
   1c30c:	2800      	cmp	r0, #0
   1c30e:	f47f ab66 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c312:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c314:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c318:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c31a:	e419      	b.n	1bb50 <_svfprintf_r+0x318>
   1c31c:	aa28      	add	r2, sp, #160	; 0xa0
   1c31e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c322:	f02a fbb7 	bl	46a94 <__ssprint_r>
   1c326:	2800      	cmp	r0, #0
   1c328:	f47f ab59 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c32c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c32e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c332:	e41e      	b.n	1bb72 <_svfprintf_r+0x33a>
   1c334:	a954      	add	r1, sp, #336	; 0x150
   1c336:	e000      	b.n	1c33a <_svfprintf_r+0xb02>
   1c338:	4639      	mov	r1, r7
   1c33a:	08e2      	lsrs	r2, r4, #3
   1c33c:	f004 0307 	and.w	r3, r4, #7
   1c340:	08e8      	lsrs	r0, r5, #3
   1c342:	1e4f      	subs	r7, r1, #1
   1c344:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1c348:	3330      	adds	r3, #48	; 0x30
   1c34a:	4605      	mov	r5, r0
   1c34c:	4614      	mov	r4, r2
   1c34e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1c352:	ea54 0205 	orrs.w	r2, r4, r5
   1c356:	d1ef      	bne.n	1c338 <_svfprintf_r+0xb00>
   1c358:	2b30      	cmp	r3, #48	; 0x30
   1c35a:	f43f ad1a 	beq.w	1bd92 <_svfprintf_r+0x55a>
   1c35e:	f01a 0f01 	tst.w	sl, #1
   1c362:	f43f ad16 	beq.w	1bd92 <_svfprintf_r+0x55a>
   1c366:	3902      	subs	r1, #2
   1c368:	9a05      	ldr	r2, [sp, #20]
   1c36a:	2330      	movs	r3, #48	; 0x30
   1c36c:	46d0      	mov	r8, sl
   1c36e:	1a52      	subs	r2, r2, r1
   1c370:	f807 3c01 	strb.w	r3, [r7, #-1]
   1c374:	460f      	mov	r7, r1
   1c376:	9208      	str	r2, [sp, #32]
   1c378:	f7ff bb78 	b.w	1ba6c <_svfprintf_r+0x234>
   1c37c:	aa28      	add	r2, sp, #160	; 0xa0
   1c37e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c382:	f02a fb87 	bl	46a94 <__ssprint_r>
   1c386:	2800      	cmp	r0, #0
   1c388:	f47f ab29 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c38c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c38e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c392:	e42d      	b.n	1bbf0 <_svfprintf_r+0x3b8>
   1c394:	9306      	str	r3, [sp, #24]
   1c396:	af54      	add	r7, sp, #336	; 0x150
   1c398:	f7ff bb68 	b.w	1ba6c <_svfprintf_r+0x234>
   1c39c:	2d00      	cmp	r5, #0
   1c39e:	bf08      	it	eq
   1c3a0:	2c0a      	cmpeq	r4, #10
   1c3a2:	f080 8186 	bcs.w	1c6b2 <_svfprintf_r+0xe7a>
   1c3a6:	3430      	adds	r4, #48	; 0x30
   1c3a8:	af54      	add	r7, sp, #336	; 0x150
   1c3aa:	2301      	movs	r3, #1
   1c3ac:	46d0      	mov	r8, sl
   1c3ae:	f807 4d01 	strb.w	r4, [r7, #-1]!
   1c3b2:	9308      	str	r3, [sp, #32]
   1c3b4:	f7ff bb5a 	b.w	1ba6c <_svfprintf_r+0x234>
   1c3b8:	f1ba 0f00 	cmp.w	sl, #0
   1c3bc:	dd8f      	ble.n	1c2de <_svfprintf_r+0xaa6>
   1c3be:	f1ba 0f10 	cmp.w	sl, #16
   1c3c2:	f340 86a9 	ble.w	1d118 <_svfprintf_r+0x18e0>
   1c3c6:	4b51      	ldr	r3, [pc, #324]	; (1c50c <_svfprintf_r+0xcd4>)
   1c3c8:	4622      	mov	r2, r4
   1c3ca:	2710      	movs	r7, #16
   1c3cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1c3d0:	9908      	ldr	r1, [sp, #32]
   1c3d2:	461c      	mov	r4, r3
   1c3d4:	e006      	b.n	1c3e4 <_svfprintf_r+0xbac>
   1c3d6:	f1aa 0a10 	sub.w	sl, sl, #16
   1c3da:	1c71      	adds	r1, r6, #1
   1c3dc:	f1ba 0f10 	cmp.w	sl, #16
   1c3e0:	f340 82ca 	ble.w	1c978 <_svfprintf_r+0x1140>
   1c3e4:	3210      	adds	r2, #16
   1c3e6:	2907      	cmp	r1, #7
   1c3e8:	602c      	str	r4, [r5, #0]
   1c3ea:	460e      	mov	r6, r1
   1c3ec:	606f      	str	r7, [r5, #4]
   1c3ee:	f105 0508 	add.w	r5, r5, #8
   1c3f2:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1c3f6:	ddee      	ble.n	1c3d6 <_svfprintf_r+0xb9e>
   1c3f8:	aa28      	add	r2, sp, #160	; 0xa0
   1c3fa:	9904      	ldr	r1, [sp, #16]
   1c3fc:	4648      	mov	r0, r9
   1c3fe:	ad2b      	add	r5, sp, #172	; 0xac
   1c400:	f02a fb48 	bl	46a94 <__ssprint_r>
   1c404:	2800      	cmp	r0, #0
   1c406:	f47f aaea 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c40a:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   1c40e:	e7e2      	b.n	1c3d6 <_svfprintf_r+0xb9e>
   1c410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c412:	f018 0f10 	tst.w	r8, #16
   1c416:	f103 0204 	add.w	r2, r3, #4
   1c41a:	f040 8098 	bne.w	1c54e <_svfprintf_r+0xd16>
   1c41e:	f018 0f40 	tst.w	r8, #64	; 0x40
   1c422:	f000 808f 	beq.w	1c544 <_svfprintf_r+0xd0c>
   1c426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c428:	46c2      	mov	sl, r8
   1c42a:	2500      	movs	r5, #0
   1c42c:	920c      	str	r2, [sp, #48]	; 0x30
   1c42e:	881c      	ldrh	r4, [r3, #0]
   1c430:	2301      	movs	r3, #1
   1c432:	f7ff baf8 	b.w	1ba26 <_svfprintf_r+0x1ee>
   1c436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c438:	f018 0f10 	tst.w	r8, #16
   1c43c:	f102 0304 	add.w	r3, r2, #4
   1c440:	d17b      	bne.n	1c53a <_svfprintf_r+0xd02>
   1c442:	f018 0f40 	tst.w	r8, #64	; 0x40
   1c446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c448:	d073      	beq.n	1c532 <_svfprintf_r+0xcfa>
   1c44a:	8814      	ldrh	r4, [r2, #0]
   1c44c:	2500      	movs	r5, #0
   1c44e:	930c      	str	r3, [sp, #48]	; 0x30
   1c450:	e441      	b.n	1bcd6 <_svfprintf_r+0x49e>
   1c452:	f018 0f01 	tst.w	r8, #1
   1c456:	f47f af0c 	bne.w	1c272 <_svfprintf_r+0xa3a>
   1c45a:	2201      	movs	r2, #1
   1c45c:	2e07      	cmp	r6, #7
   1c45e:	f8c9 7000 	str.w	r7, [r9]
   1c462:	f8c9 2004 	str.w	r2, [r9, #4]
   1c466:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c46a:	f300 817a 	bgt.w	1c762 <_svfprintf_r+0xf2a>
   1c46e:	3302      	adds	r3, #2
   1c470:	f109 0910 	add.w	r9, r9, #16
   1c474:	9306      	str	r3, [sp, #24]
   1c476:	e732      	b.n	1c2de <_svfprintf_r+0xaa6>
   1c478:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   1c47c:	4293      	cmp	r3, r2
   1c47e:	bfa8      	it	ge
   1c480:	4613      	movge	r3, r2
   1c482:	2b00      	cmp	r3, #0
   1c484:	461d      	mov	r5, r3
   1c486:	dd0d      	ble.n	1c4a4 <_svfprintf_r+0xc6c>
   1c488:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c48a:	442c      	add	r4, r5
   1c48c:	f8c9 7000 	str.w	r7, [r9]
   1c490:	3301      	adds	r3, #1
   1c492:	942a      	str	r4, [sp, #168]	; 0xa8
   1c494:	f8c9 5004 	str.w	r5, [r9, #4]
   1c498:	2b07      	cmp	r3, #7
   1c49a:	9329      	str	r3, [sp, #164]	; 0xa4
   1c49c:	f300 841a 	bgt.w	1ccd4 <_svfprintf_r+0x149c>
   1c4a0:	f109 0908 	add.w	r9, r9, #8
   1c4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c4a6:	2d00      	cmp	r5, #0
   1c4a8:	bfa8      	it	ge
   1c4aa:	1b5b      	subge	r3, r3, r5
   1c4ac:	2b00      	cmp	r3, #0
   1c4ae:	461d      	mov	r5, r3
   1c4b0:	f340 81bd 	ble.w	1c82e <_svfprintf_r+0xff6>
   1c4b4:	2d10      	cmp	r5, #16
   1c4b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c4b8:	4b14      	ldr	r3, [pc, #80]	; (1c50c <_svfprintf_r+0xcd4>)
   1c4ba:	f340 81a2 	ble.w	1c802 <_svfprintf_r+0xfca>
   1c4be:	4621      	mov	r1, r4
   1c4c0:	9706      	str	r7, [sp, #24]
   1c4c2:	2610      	movs	r6, #16
   1c4c4:	461f      	mov	r7, r3
   1c4c6:	e9dd a403 	ldrd	sl, r4, [sp, #12]
   1c4ca:	e003      	b.n	1c4d4 <_svfprintf_r+0xc9c>
   1c4cc:	3d10      	subs	r5, #16
   1c4ce:	2d10      	cmp	r5, #16
   1c4d0:	f340 8194 	ble.w	1c7fc <_svfprintf_r+0xfc4>
   1c4d4:	3201      	adds	r2, #1
   1c4d6:	3110      	adds	r1, #16
   1c4d8:	f8c9 7000 	str.w	r7, [r9]
   1c4dc:	f109 0908 	add.w	r9, r9, #8
   1c4e0:	2a07      	cmp	r2, #7
   1c4e2:	f849 6c04 	str.w	r6, [r9, #-4]
   1c4e6:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1c4ea:	ddef      	ble.n	1c4cc <_svfprintf_r+0xc94>
   1c4ec:	aa28      	add	r2, sp, #160	; 0xa0
   1c4ee:	4621      	mov	r1, r4
   1c4f0:	4650      	mov	r0, sl
   1c4f2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c4f6:	f02a facd 	bl	46a94 <__ssprint_r>
   1c4fa:	2800      	cmp	r0, #0
   1c4fc:	f47f aa6f 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c500:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1c504:	e7e2      	b.n	1c4cc <_svfprintf_r+0xc94>
   1c506:	bf00      	nop
   1c508:	0004c64c 	.word	0x0004c64c
   1c50c:	0004c660 	.word	0x0004c660
   1c510:	f018 0f01 	tst.w	r8, #1
   1c514:	f47f add6 	bne.w	1c0c4 <_svfprintf_r+0x88c>
   1c518:	f7ff bb7d 	b.w	1bc16 <_svfprintf_r+0x3de>
   1c51c:	aa28      	add	r2, sp, #160	; 0xa0
   1c51e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c522:	f02a fab7 	bl	46a94 <__ssprint_r>
   1c526:	2800      	cmp	r0, #0
   1c528:	f47f aa59 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c52c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c52e:	f7ff bbac 	b.w	1bc8a <_svfprintf_r+0x452>
   1c532:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c536:	f040 8320 	bne.w	1cb7a <_svfprintf_r+0x1342>
   1c53a:	6814      	ldr	r4, [r2, #0]
   1c53c:	2500      	movs	r5, #0
   1c53e:	930c      	str	r3, [sp, #48]	; 0x30
   1c540:	f7ff bbc9 	b.w	1bcd6 <_svfprintf_r+0x49e>
   1c544:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c548:	f040 831c 	bne.w	1cb84 <_svfprintf_r+0x134c>
   1c54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c54e:	681c      	ldr	r4, [r3, #0]
   1c550:	46c2      	mov	sl, r8
   1c552:	920c      	str	r2, [sp, #48]	; 0x30
   1c554:	2301      	movs	r3, #1
   1c556:	2500      	movs	r5, #0
   1c558:	f7ff ba65 	b.w	1ba26 <_svfprintf_r+0x1ee>
   1c55c:	f41a 7f00 	tst.w	sl, #512	; 0x200
   1c560:	f040 831d 	bne.w	1cb9e <_svfprintf_r+0x1366>
   1c564:	6814      	ldr	r4, [r2, #0]
   1c566:	930c      	str	r3, [sp, #48]	; 0x30
   1c568:	17e5      	asrs	r5, r4, #31
   1c56a:	4622      	mov	r2, r4
   1c56c:	462b      	mov	r3, r5
   1c56e:	f7ff bbe0 	b.w	1bd32 <_svfprintf_r+0x4fa>
   1c572:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c576:	f040 830d 	bne.w	1cb94 <_svfprintf_r+0x135c>
   1c57a:	6814      	ldr	r4, [r2, #0]
   1c57c:	2500      	movs	r5, #0
   1c57e:	930c      	str	r3, [sp, #48]	; 0x30
   1c580:	f7ff bbbc 	b.w	1bcfc <_svfprintf_r+0x4c4>
   1c584:	9a07      	ldr	r2, [sp, #28]
   1c586:	465f      	mov	r7, fp
   1c588:	4610      	mov	r0, r2
   1c58a:	17d1      	asrs	r1, r2, #31
   1c58c:	e9c3 0100 	strd	r0, r1, [r3]
   1c590:	f7ff b97c 	b.w	1b88c <_svfprintf_r+0x54>
   1c594:	2330      	movs	r3, #48	; 0x30
   1c596:	f048 0802 	orr.w	r8, r8, #2
   1c59a:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   1c59e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   1c5a2:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1c5a6:	2302      	movs	r3, #2
   1c5a8:	f7ff ba3d 	b.w	1ba26 <_svfprintf_r+0x1ee>
   1c5ac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c5b0:	4602      	mov	r2, r0
   1c5b2:	460b      	mov	r3, r1
   1c5b4:	f7fd fdd0 	bl	1a158 <__aeabi_dcmpun>
   1c5b8:	2800      	cmp	r0, #0
   1c5ba:	f040 85a2 	bne.w	1d102 <_svfprintf_r+0x18ca>
   1c5be:	f026 0a20 	bic.w	sl, r6, #32
   1c5c2:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1c5c6:	f040 82be 	bne.w	1cb46 <_svfprintf_r+0x130e>
   1c5ca:	2e61      	cmp	r6, #97	; 0x61
   1c5cc:	f04f 0230 	mov.w	r2, #48	; 0x30
   1c5d0:	bf14      	ite	ne
   1c5d2:	2358      	movne	r3, #88	; 0x58
   1c5d4:	2378      	moveq	r3, #120	; 0x78
   1c5d6:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1c5da:	f048 0202 	orr.w	r2, r8, #2
   1c5de:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   1c5e2:	9b06      	ldr	r3, [sp, #24]
   1c5e4:	9205      	str	r2, [sp, #20]
   1c5e6:	2b63      	cmp	r3, #99	; 0x63
   1c5e8:	f300 82ed 	bgt.w	1cbc6 <_svfprintf_r+0x138e>
   1c5ec:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   1c5f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c5f2:	af3b      	add	r7, sp, #236	; 0xec
   1c5f4:	900b      	str	r0, [sp, #44]	; 0x2c
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	f2c0 837d 	blt.w	1ccf6 <_svfprintf_r+0x14be>
   1c5fc:	2300      	movs	r3, #0
   1c5fe:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1c602:	930d      	str	r3, [sp, #52]	; 0x34
   1c604:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
   1c608:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1c60c:	f000 837c 	beq.w	1cd08 <_svfprintf_r+0x14d0>
   1c610:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1c614:	f000 83f8 	beq.w	1ce08 <_svfprintf_r+0x15d0>
   1c618:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1c61c:	f040 8502 	bne.w	1d024 <_svfprintf_r+0x17ec>
   1c620:	9b06      	ldr	r3, [sp, #24]
   1c622:	a826      	add	r0, sp, #152	; 0x98
   1c624:	a923      	add	r1, sp, #140	; 0x8c
   1c626:	1c5c      	adds	r4, r3, #1
   1c628:	ab22      	add	r3, sp, #136	; 0x88
   1c62a:	e9cd 1000 	strd	r1, r0, [sp]
   1c62e:	4622      	mov	r2, r4
   1c630:	2102      	movs	r1, #2
   1c632:	9803      	ldr	r0, [sp, #12]
   1c634:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1c638:	f000 fdee 	bl	1d218 <_dtoa_r>
   1c63c:	4607      	mov	r7, r0
   1c63e:	443c      	add	r4, r7
   1c640:	2200      	movs	r2, #0
   1c642:	2300      	movs	r3, #0
   1c644:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   1c648:	f7fc fb0e 	bl	18c68 <__aeabi_dcmpeq>
   1c64c:	2800      	cmp	r0, #0
   1c64e:	f000 8456 	beq.w	1cefe <_svfprintf_r+0x16c6>
   1c652:	4623      	mov	r3, r4
   1c654:	1bdb      	subs	r3, r3, r7
   1c656:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1c65a:	930f      	str	r3, [sp, #60]	; 0x3c
   1c65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c65e:	930e      	str	r3, [sp, #56]	; 0x38
   1c660:	f000 82c6 	beq.w	1cbf0 <_svfprintf_r+0x13b8>
   1c664:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1c668:	f040 82ca 	bne.w	1cc00 <_svfprintf_r+0x13c8>
   1c66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c66e:	2b00      	cmp	r3, #0
   1c670:	9b06      	ldr	r3, [sp, #24]
   1c672:	f340 8560 	ble.w	1d136 <_svfprintf_r+0x18fe>
   1c676:	2b00      	cmp	r3, #0
   1c678:	f040 8537 	bne.w	1d0ea <_svfprintf_r+0x18b2>
   1c67c:	9b05      	ldr	r3, [sp, #20]
   1c67e:	07dd      	lsls	r5, r3, #31
   1c680:	f100 8533 	bmi.w	1d0ea <_svfprintf_r+0x18b2>
   1c684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c686:	2666      	movs	r6, #102	; 0x66
   1c688:	9308      	str	r3, [sp, #32]
   1c68a:	9b05      	ldr	r3, [sp, #20]
   1c68c:	055a      	lsls	r2, r3, #21
   1c68e:	f100 8471 	bmi.w	1cf74 <_svfprintf_r+0x173c>
   1c692:	9b08      	ldr	r3, [sp, #32]
   1c694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c698:	9305      	str	r3, [sp, #20]
   1c69a:	2300      	movs	r3, #0
   1c69c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1c6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	f040 829d 	bne.w	1cbe2 <_svfprintf_r+0x13aa>
   1c6a8:	9306      	str	r3, [sp, #24]
   1c6aa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c6ae:	f7ff b9ea 	b.w	1ba86 <_svfprintf_r+0x24e>
   1c6b2:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
   1c6b6:	2200      	movs	r2, #0
   1c6b8:	f8cd b020 	str.w	fp, [sp, #32]
   1c6bc:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
   1c6c0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1c6c4:	4693      	mov	fp, r2
   1c6c6:	46b1      	mov	r9, r6
   1c6c8:	461e      	mov	r6, r3
   1c6ca:	220a      	movs	r2, #10
   1c6cc:	2300      	movs	r3, #0
   1c6ce:	4620      	mov	r0, r4
   1c6d0:	4629      	mov	r1, r5
   1c6d2:	f7fc fb73 	bl	18dbc <__aeabi_uldivmod>
   1c6d6:	3230      	adds	r2, #48	; 0x30
   1c6d8:	f10b 0b01 	add.w	fp, fp, #1
   1c6dc:	f108 37ff 	add.w	r7, r8, #4294967295
   1c6e0:	f808 2c01 	strb.w	r2, [r8, #-1]
   1c6e4:	b186      	cbz	r6, 1c708 <_svfprintf_r+0xed0>
   1c6e6:	2d00      	cmp	r5, #0
   1c6e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c6ea:	bf08      	it	eq
   1c6ec:	2c0a      	cmpeq	r4, #10
   1c6ee:	781a      	ldrb	r2, [r3, #0]
   1c6f0:	bf2c      	ite	cs
   1c6f2:	2301      	movcs	r3, #1
   1c6f4:	2300      	movcc	r3, #0
   1c6f6:	2aff      	cmp	r2, #255	; 0xff
   1c6f8:	bf0c      	ite	eq
   1c6fa:	2300      	moveq	r3, #0
   1c6fc:	f003 0301 	andne.w	r3, r3, #1
   1c700:	b113      	cbz	r3, 1c708 <_svfprintf_r+0xed0>
   1c702:	455a      	cmp	r2, fp
   1c704:	f000 8423 	beq.w	1cf4e <_svfprintf_r+0x1716>
   1c708:	4620      	mov	r0, r4
   1c70a:	4629      	mov	r1, r5
   1c70c:	2300      	movs	r3, #0
   1c70e:	220a      	movs	r2, #10
   1c710:	f7fc fb54 	bl	18dbc <__aeabi_uldivmod>
   1c714:	4604      	mov	r4, r0
   1c716:	460d      	mov	r5, r1
   1c718:	46b8      	mov	r8, r7
   1c71a:	ea54 0305 	orrs.w	r3, r4, r5
   1c71e:	d1d4      	bne.n	1c6ca <_svfprintf_r+0xe92>
   1c720:	9b05      	ldr	r3, [sp, #20]
   1c722:	464e      	mov	r6, r9
   1c724:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1c728:	46d0      	mov	r8, sl
   1c72a:	1bdb      	subs	r3, r3, r7
   1c72c:	f8dd b020 	ldr.w	fp, [sp, #32]
   1c730:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1c734:	9308      	str	r3, [sp, #32]
   1c736:	f7ff b999 	b.w	1ba6c <_svfprintf_r+0x234>
   1c73a:	2140      	movs	r1, #64	; 0x40
   1c73c:	9803      	ldr	r0, [sp, #12]
   1c73e:	f024 f931 	bl	409a4 <_malloc_r>
   1c742:	9b04      	ldr	r3, [sp, #16]
   1c744:	6018      	str	r0, [r3, #0]
   1c746:	6118      	str	r0, [r3, #16]
   1c748:	2800      	cmp	r0, #0
   1c74a:	f000 854c 	beq.w	1d1e6 <_svfprintf_r+0x19ae>
   1c74e:	2340      	movs	r3, #64	; 0x40
   1c750:	9a04      	ldr	r2, [sp, #16]
   1c752:	6153      	str	r3, [r2, #20]
   1c754:	f7ff b887 	b.w	1b866 <_svfprintf_r+0x2e>
   1c758:	4252      	negs	r2, r2
   1c75a:	930c      	str	r3, [sp, #48]	; 0x30
   1c75c:	920a      	str	r2, [sp, #40]	; 0x28
   1c75e:	f7ff bb5b 	b.w	1be18 <_svfprintf_r+0x5e0>
   1c762:	aa28      	add	r2, sp, #160	; 0xa0
   1c764:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c768:	f02a f994 	bl	46a94 <__ssprint_r>
   1c76c:	2800      	cmp	r0, #0
   1c76e:	f47f a936 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c772:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c774:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
   1c778:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c77a:	ad2b      	add	r5, sp, #172	; 0xac
   1c77c:	3301      	adds	r3, #1
   1c77e:	9306      	str	r3, [sp, #24]
   1c780:	e5ad      	b.n	1c2de <_svfprintf_r+0xaa6>
   1c782:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1c786:	f048 0820 	orr.w	r8, r8, #32
   1c78a:	f10b 0b01 	add.w	fp, fp, #1
   1c78e:	f7ff b8ac 	b.w	1b8ea <_svfprintf_r+0xb2>
   1c792:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1c796:	f448 7800 	orr.w	r8, r8, #512	; 0x200
   1c79a:	f10b 0b01 	add.w	fp, fp, #1
   1c79e:	f7ff b8a4 	b.w	1b8ea <_svfprintf_r+0xb2>
   1c7a2:	aa28      	add	r2, sp, #160	; 0xa0
   1c7a4:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c7a8:	f02a f974 	bl	46a94 <__ssprint_r>
   1c7ac:	2800      	cmp	r0, #0
   1c7ae:	f47f a916 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c7b2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c7b4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c7b8:	e494      	b.n	1c0e4 <_svfprintf_r+0x8ac>
   1c7ba:	9b06      	ldr	r3, [sp, #24]
   1c7bc:	463a      	mov	r2, r7
   1c7be:	9706      	str	r7, [sp, #24]
   1c7c0:	2b06      	cmp	r3, #6
   1c7c2:	970e      	str	r7, [sp, #56]	; 0x38
   1c7c4:	bf28      	it	cs
   1c7c6:	2306      	movcs	r3, #6
   1c7c8:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
   1c7cc:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
   1c7d0:	9305      	str	r3, [sp, #20]
   1c7d2:	9308      	str	r3, [sp, #32]
   1c7d4:	4fc1      	ldr	r7, [pc, #772]	; (1cadc <_svfprintf_r+0x12a4>)
   1c7d6:	f7ff b956 	b.w	1ba86 <_svfprintf_r+0x24e>
   1c7da:	aa28      	add	r2, sp, #160	; 0xa0
   1c7dc:	931b      	str	r3, [sp, #108]	; 0x6c
   1c7de:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c7e2:	f02a f957 	bl	46a94 <__ssprint_r>
   1c7e6:	2800      	cmp	r0, #0
   1c7e8:	f47f a8f9 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c7ec:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c7f0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c7f4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c7f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c7f8:	f7ff b998 	b.w	1bb2c <_svfprintf_r+0x2f4>
   1c7fc:	463b      	mov	r3, r7
   1c7fe:	460c      	mov	r4, r1
   1c800:	9f06      	ldr	r7, [sp, #24]
   1c802:	3201      	adds	r2, #1
   1c804:	442c      	add	r4, r5
   1c806:	f8c9 3000 	str.w	r3, [r9]
   1c80a:	2a07      	cmp	r2, #7
   1c80c:	f8c9 5004 	str.w	r5, [r9, #4]
   1c810:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c814:	f340 81a9 	ble.w	1cb6a <_svfprintf_r+0x1332>
   1c818:	aa28      	add	r2, sp, #160	; 0xa0
   1c81a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c81e:	f02a f939 	bl	46a94 <__ssprint_r>
   1c822:	2800      	cmp	r0, #0
   1c824:	f47f a8db 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c828:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c82a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c830:	f418 6f80 	tst.w	r8, #1024	; 0x400
   1c834:	443b      	add	r3, r7
   1c836:	469a      	mov	sl, r3
   1c838:	f040 80c4 	bne.w	1c9c4 <_svfprintf_r+0x118c>
   1c83c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c83e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c840:	4293      	cmp	r3, r2
   1c842:	db48      	blt.n	1c8d6 <_svfprintf_r+0x109e>
   1c844:	f018 0f01 	tst.w	r8, #1
   1c848:	d145      	bne.n	1c8d6 <_svfprintf_r+0x109e>
   1c84a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c84c:	18bd      	adds	r5, r7, r2
   1c84e:	1ad3      	subs	r3, r2, r3
   1c850:	eba5 050a 	sub.w	r5, r5, sl
   1c854:	429d      	cmp	r5, r3
   1c856:	bfa8      	it	ge
   1c858:	461d      	movge	r5, r3
   1c85a:	2d00      	cmp	r5, #0
   1c85c:	dd0d      	ble.n	1c87a <_svfprintf_r+0x1042>
   1c85e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c860:	442c      	add	r4, r5
   1c862:	f8c9 a000 	str.w	sl, [r9]
   1c866:	3201      	adds	r2, #1
   1c868:	942a      	str	r4, [sp, #168]	; 0xa8
   1c86a:	f8c9 5004 	str.w	r5, [r9, #4]
   1c86e:	2a07      	cmp	r2, #7
   1c870:	9229      	str	r2, [sp, #164]	; 0xa4
   1c872:	f300 8324 	bgt.w	1cebe <_svfprintf_r+0x1686>
   1c876:	f109 0908 	add.w	r9, r9, #8
   1c87a:	2d00      	cmp	r5, #0
   1c87c:	bfac      	ite	ge
   1c87e:	1b5d      	subge	r5, r3, r5
   1c880:	461d      	movlt	r5, r3
   1c882:	2d00      	cmp	r5, #0
   1c884:	f77f a9c7 	ble.w	1bc16 <_svfprintf_r+0x3de>
   1c888:	2d10      	cmp	r5, #16
   1c88a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c88c:	4b94      	ldr	r3, [pc, #592]	; (1cae0 <_svfprintf_r+0x12a8>)
   1c88e:	dd4e      	ble.n	1c92e <_svfprintf_r+0x10f6>
   1c890:	4619      	mov	r1, r3
   1c892:	2610      	movs	r6, #16
   1c894:	4623      	mov	r3, r4
   1c896:	460c      	mov	r4, r1
   1c898:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   1c89c:	e002      	b.n	1c8a4 <_svfprintf_r+0x106c>
   1c89e:	3d10      	subs	r5, #16
   1c8a0:	2d10      	cmp	r5, #16
   1c8a2:	dd41      	ble.n	1c928 <_svfprintf_r+0x10f0>
   1c8a4:	3201      	adds	r2, #1
   1c8a6:	3310      	adds	r3, #16
   1c8a8:	f8c9 4000 	str.w	r4, [r9]
   1c8ac:	f109 0908 	add.w	r9, r9, #8
   1c8b0:	2a07      	cmp	r2, #7
   1c8b2:	f849 6c04 	str.w	r6, [r9, #-4]
   1c8b6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   1c8ba:	ddf0      	ble.n	1c89e <_svfprintf_r+0x1066>
   1c8bc:	aa28      	add	r2, sp, #160	; 0xa0
   1c8be:	4651      	mov	r1, sl
   1c8c0:	4638      	mov	r0, r7
   1c8c2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c8c6:	f02a f8e5 	bl	46a94 <__ssprint_r>
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	f47f a887 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c8d0:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   1c8d4:	e7e3      	b.n	1c89e <_svfprintf_r+0x1066>
   1c8d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c8d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   1c8da:	3201      	adds	r2, #1
   1c8dc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c8de:	440c      	add	r4, r1
   1c8e0:	f8c9 1004 	str.w	r1, [r9, #4]
   1c8e4:	2a07      	cmp	r2, #7
   1c8e6:	f8c9 0000 	str.w	r0, [r9]
   1c8ea:	942a      	str	r4, [sp, #168]	; 0xa8
   1c8ec:	9229      	str	r2, [sp, #164]	; 0xa4
   1c8ee:	f300 82d9 	bgt.w	1cea4 <_svfprintf_r+0x166c>
   1c8f2:	f109 0908 	add.w	r9, r9, #8
   1c8f6:	e7a8      	b.n	1c84a <_svfprintf_r+0x1012>
   1c8f8:	aa28      	add	r2, sp, #160	; 0xa0
   1c8fa:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c8fe:	f02a f8c9 	bl	46a94 <__ssprint_r>
   1c902:	2800      	cmp	r0, #0
   1c904:	f47f a86b 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c908:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c90a:	ad2b      	add	r5, sp, #172	; 0xac
   1c90c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   1c90e:	e4c6      	b.n	1c29e <_svfprintf_r+0xa66>
   1c910:	aa28      	add	r2, sp, #160	; 0xa0
   1c912:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c916:	f02a f8bd 	bl	46a94 <__ssprint_r>
   1c91a:	2800      	cmp	r0, #0
   1c91c:	f47f a85f 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c920:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c922:	ad2b      	add	r5, sp, #172	; 0xac
   1c924:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   1c926:	e4ae      	b.n	1c286 <_svfprintf_r+0xa4e>
   1c928:	4621      	mov	r1, r4
   1c92a:	461c      	mov	r4, r3
   1c92c:	460b      	mov	r3, r1
   1c92e:	3201      	adds	r2, #1
   1c930:	442c      	add	r4, r5
   1c932:	f8c9 3000 	str.w	r3, [r9]
   1c936:	2a07      	cmp	r2, #7
   1c938:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c93c:	f8c9 5004 	str.w	r5, [r9, #4]
   1c940:	f77f a967 	ble.w	1bc12 <_svfprintf_r+0x3da>
   1c944:	e47f      	b.n	1c246 <_svfprintf_r+0xa0e>
   1c946:	aa28      	add	r2, sp, #160	; 0xa0
   1c948:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c94c:	f02a f8a2 	bl	46a94 <__ssprint_r>
   1c950:	2800      	cmp	r0, #0
   1c952:	f47f a844 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c956:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c958:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c95c:	f7ff b90d 	b.w	1bb7a <_svfprintf_r+0x342>
   1c960:	aa28      	add	r2, sp, #160	; 0xa0
   1c962:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c966:	f02a f895 	bl	46a94 <__ssprint_r>
   1c96a:	2800      	cmp	r0, #0
   1c96c:	f47f a837 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1c970:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c974:	f7ff bba0 	b.w	1c0b8 <_svfprintf_r+0x880>
   1c978:	4623      	mov	r3, r4
   1c97a:	4614      	mov	r4, r2
   1c97c:	f105 0208 	add.w	r2, r5, #8
   1c980:	9106      	str	r1, [sp, #24]
   1c982:	4454      	add	r4, sl
   1c984:	e9c5 3a00 	strd	r3, sl, [r5]
   1c988:	9b06      	ldr	r3, [sp, #24]
   1c98a:	942a      	str	r4, [sp, #168]	; 0xa8
   1c98c:	2b07      	cmp	r3, #7
   1c98e:	9329      	str	r3, [sp, #164]	; 0xa4
   1c990:	f73f aee7 	bgt.w	1c762 <_svfprintf_r+0xf2a>
   1c994:	3301      	adds	r3, #1
   1c996:	f102 0908 	add.w	r9, r2, #8
   1c99a:	4615      	mov	r5, r2
   1c99c:	9306      	str	r3, [sp, #24]
   1c99e:	e49e      	b.n	1c2de <_svfprintf_r+0xaa6>
   1c9a0:	9a07      	ldr	r2, [sp, #28]
   1c9a2:	465f      	mov	r7, fp
   1c9a4:	601a      	str	r2, [r3, #0]
   1c9a6:	f7fe bf71 	b.w	1b88c <_svfprintf_r+0x54>
   1c9aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1c9ac:	2b00      	cmp	r3, #0
   1c9ae:	f43f a81c 	beq.w	1b9ea <_svfprintf_r+0x1b2>
   1c9b2:	9c04      	ldr	r4, [sp, #16]
   1c9b4:	aa28      	add	r2, sp, #160	; 0xa0
   1c9b6:	9803      	ldr	r0, [sp, #12]
   1c9b8:	4621      	mov	r1, r4
   1c9ba:	f02a f86b 	bl	46a94 <__ssprint_r>
   1c9be:	89a3      	ldrh	r3, [r4, #12]
   1c9c0:	f7ff b815 	b.w	1b9ee <_svfprintf_r+0x1b6>
   1c9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c9c6:	2b00      	cmp	r3, #0
   1c9c8:	dc0a      	bgt.n	1c9e0 <_svfprintf_r+0x11a8>
   1c9ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c9cc:	2b00      	cmp	r3, #0
   1c9ce:	dc07      	bgt.n	1c9e0 <_svfprintf_r+0x11a8>
   1c9d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c9d2:	18fb      	adds	r3, r7, r3
   1c9d4:	9306      	str	r3, [sp, #24]
   1c9d6:	9b06      	ldr	r3, [sp, #24]
   1c9d8:	459a      	cmp	sl, r3
   1c9da:	bf28      	it	cs
   1c9dc:	469a      	movcs	sl, r3
   1c9de:	e72d      	b.n	1c83c <_svfprintf_r+0x1004>
   1c9e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c9e2:	4622      	mov	r2, r4
   1c9e4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1c9e8:	46d0      	mov	r8, sl
   1c9ea:	18fb      	adds	r3, r7, r3
   1c9ec:	970e      	str	r7, [sp, #56]	; 0x38
   1c9ee:	4e3c      	ldr	r6, [pc, #240]	; (1cae0 <_svfprintf_r+0x12a8>)
   1c9f0:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
   1c9f4:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1c9f6:	9308      	str	r3, [sp, #32]
   1c9f8:	2f00      	cmp	r7, #0
   1c9fa:	d073      	beq.n	1cae4 <_svfprintf_r+0x12ac>
   1c9fc:	3f01      	subs	r7, #1
   1c9fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1ca00:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ca02:	3101      	adds	r1, #1
   1ca04:	9819      	ldr	r0, [sp, #100]	; 0x64
   1ca06:	441a      	add	r2, r3
   1ca08:	f8c9 3004 	str.w	r3, [r9, #4]
   1ca0c:	2907      	cmp	r1, #7
   1ca0e:	f8c9 0000 	str.w	r0, [r9]
   1ca12:	922a      	str	r2, [sp, #168]	; 0xa8
   1ca14:	9129      	str	r1, [sp, #164]	; 0xa4
   1ca16:	dc6b      	bgt.n	1caf0 <_svfprintf_r+0x12b8>
   1ca18:	f109 0908 	add.w	r9, r9, #8
   1ca1c:	9b08      	ldr	r3, [sp, #32]
   1ca1e:	f89a 1000 	ldrb.w	r1, [sl]
   1ca22:	eba3 0508 	sub.w	r5, r3, r8
   1ca26:	9306      	str	r3, [sp, #24]
   1ca28:	428d      	cmp	r5, r1
   1ca2a:	bfa8      	it	ge
   1ca2c:	460d      	movge	r5, r1
   1ca2e:	2d00      	cmp	r5, #0
   1ca30:	dd0e      	ble.n	1ca50 <_svfprintf_r+0x1218>
   1ca32:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1ca34:	442a      	add	r2, r5
   1ca36:	f8c9 8000 	str.w	r8, [r9]
   1ca3a:	3101      	adds	r1, #1
   1ca3c:	922a      	str	r2, [sp, #168]	; 0xa8
   1ca3e:	f8c9 5004 	str.w	r5, [r9, #4]
   1ca42:	2907      	cmp	r1, #7
   1ca44:	9129      	str	r1, [sp, #164]	; 0xa4
   1ca46:	dc5f      	bgt.n	1cb08 <_svfprintf_r+0x12d0>
   1ca48:	f109 0908 	add.w	r9, r9, #8
   1ca4c:	f89a 1000 	ldrb.w	r1, [sl]
   1ca50:	2d00      	cmp	r5, #0
   1ca52:	bfac      	ite	ge
   1ca54:	1b4d      	subge	r5, r1, r5
   1ca56:	460d      	movlt	r5, r1
   1ca58:	2d00      	cmp	r5, #0
   1ca5a:	dd31      	ble.n	1cac0 <_svfprintf_r+0x1288>
   1ca5c:	2d10      	cmp	r5, #16
   1ca5e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1ca60:	dd1f      	ble.n	1caa2 <_svfprintf_r+0x126a>
   1ca62:	2410      	movs	r4, #16
   1ca64:	e002      	b.n	1ca6c <_svfprintf_r+0x1234>
   1ca66:	3d10      	subs	r5, #16
   1ca68:	2d10      	cmp	r5, #16
   1ca6a:	dd1a      	ble.n	1caa2 <_svfprintf_r+0x126a>
   1ca6c:	3101      	adds	r1, #1
   1ca6e:	3210      	adds	r2, #16
   1ca70:	f8c9 6000 	str.w	r6, [r9]
   1ca74:	f109 0908 	add.w	r9, r9, #8
   1ca78:	2907      	cmp	r1, #7
   1ca7a:	f849 4c04 	str.w	r4, [r9, #-4]
   1ca7e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1ca82:	ddf0      	ble.n	1ca66 <_svfprintf_r+0x122e>
   1ca84:	aa28      	add	r2, sp, #160	; 0xa0
   1ca86:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ca8a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ca8e:	f02a f801 	bl	46a94 <__ssprint_r>
   1ca92:	2800      	cmp	r0, #0
   1ca94:	f47e afa3 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1ca98:	3d10      	subs	r5, #16
   1ca9a:	2d10      	cmp	r5, #16
   1ca9c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
   1caa0:	dce4      	bgt.n	1ca6c <_svfprintf_r+0x1234>
   1caa2:	3101      	adds	r1, #1
   1caa4:	442a      	add	r2, r5
   1caa6:	f8c9 6000 	str.w	r6, [r9]
   1caaa:	2907      	cmp	r1, #7
   1caac:	f8c9 5004 	str.w	r5, [r9, #4]
   1cab0:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1cab4:	f300 8100 	bgt.w	1ccb8 <_svfprintf_r+0x1480>
   1cab8:	f109 0908 	add.w	r9, r9, #8
   1cabc:	f89a 1000 	ldrb.w	r1, [sl]
   1cac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cac2:	4488      	add	r8, r1
   1cac4:	2b00      	cmp	r3, #0
   1cac6:	dc97      	bgt.n	1c9f8 <_svfprintf_r+0x11c0>
   1cac8:	2f00      	cmp	r7, #0
   1caca:	dc95      	bgt.n	1c9f8 <_svfprintf_r+0x11c0>
   1cacc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
   1cad0:	4614      	mov	r4, r2
   1cad2:	46c2      	mov	sl, r8
   1cad4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1cad6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1cada:	e77c      	b.n	1c9d6 <_svfprintf_r+0x119e>
   1cadc:	0004c644 	.word	0x0004c644
   1cae0:	0004c660 	.word	0x0004c660
   1cae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cae6:	f10a 3aff 	add.w	sl, sl, #4294967295
   1caea:	3b01      	subs	r3, #1
   1caec:	9310      	str	r3, [sp, #64]	; 0x40
   1caee:	e786      	b.n	1c9fe <_svfprintf_r+0x11c6>
   1caf0:	aa28      	add	r2, sp, #160	; 0xa0
   1caf2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1caf6:	f029 ffcd 	bl	46a94 <__ssprint_r>
   1cafa:	2800      	cmp	r0, #0
   1cafc:	f47e af6f 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1cb00:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1cb02:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cb06:	e789      	b.n	1ca1c <_svfprintf_r+0x11e4>
   1cb08:	aa28      	add	r2, sp, #160	; 0xa0
   1cb0a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cb0e:	f029 ffc1 	bl	46a94 <__ssprint_r>
   1cb12:	2800      	cmp	r0, #0
   1cb14:	f47e af63 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1cb18:	f89a 1000 	ldrb.w	r1, [sl]
   1cb1c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cb20:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1cb22:	e795      	b.n	1ca50 <_svfprintf_r+0x1218>
   1cb24:	4638      	mov	r0, r7
   1cb26:	9506      	str	r5, [sp, #24]
   1cb28:	f024 fe7c 	bl	41824 <strlen>
   1cb2c:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   1cb30:	9008      	str	r0, [sp, #32]
   1cb32:	9205      	str	r2, [sp, #20]
   1cb34:	940c      	str	r4, [sp, #48]	; 0x30
   1cb36:	950b      	str	r5, [sp, #44]	; 0x2c
   1cb38:	950e      	str	r5, [sp, #56]	; 0x38
   1cb3a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1cb3e:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1cb42:	f7fe bfa0 	b.w	1ba86 <_svfprintf_r+0x24e>
   1cb46:	9906      	ldr	r1, [sp, #24]
   1cb48:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   1cb4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cb4e:	1c4c      	adds	r4, r1, #1
   1cb50:	d032      	beq.n	1cbb8 <_svfprintf_r+0x1380>
   1cb52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1cb56:	f040 8279 	bne.w	1d04c <_svfprintf_r+0x1814>
   1cb5a:	f8cd 8014 	str.w	r8, [sp, #20]
   1cb5e:	2900      	cmp	r1, #0
   1cb60:	f000 82fe 	beq.w	1d160 <_svfprintf_r+0x1928>
   1cb64:	900b      	str	r0, [sp, #44]	; 0x2c
   1cb66:	4690      	mov	r8, r2
   1cb68:	e545      	b.n	1c5f6 <_svfprintf_r+0xdbe>
   1cb6a:	f109 0908 	add.w	r9, r9, #8
   1cb6e:	e65e      	b.n	1c82e <_svfprintf_r+0xff6>
   1cb70:	2300      	movs	r3, #0
   1cb72:	4693      	mov	fp, r2
   1cb74:	9306      	str	r3, [sp, #24]
   1cb76:	f7fe beba 	b.w	1b8ee <_svfprintf_r+0xb6>
   1cb7a:	7814      	ldrb	r4, [r2, #0]
   1cb7c:	2500      	movs	r5, #0
   1cb7e:	930c      	str	r3, [sp, #48]	; 0x30
   1cb80:	f7ff b8a9 	b.w	1bcd6 <_svfprintf_r+0x49e>
   1cb84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cb86:	46c2      	mov	sl, r8
   1cb88:	2500      	movs	r5, #0
   1cb8a:	920c      	str	r2, [sp, #48]	; 0x30
   1cb8c:	781c      	ldrb	r4, [r3, #0]
   1cb8e:	2301      	movs	r3, #1
   1cb90:	f7fe bf49 	b.w	1ba26 <_svfprintf_r+0x1ee>
   1cb94:	7814      	ldrb	r4, [r2, #0]
   1cb96:	2500      	movs	r5, #0
   1cb98:	930c      	str	r3, [sp, #48]	; 0x30
   1cb9a:	f7ff b8af 	b.w	1bcfc <_svfprintf_r+0x4c4>
   1cb9e:	f992 4000 	ldrsb.w	r4, [r2]
   1cba2:	930c      	str	r3, [sp, #48]	; 0x30
   1cba4:	17e5      	asrs	r5, r4, #31
   1cba6:	4622      	mov	r2, r4
   1cba8:	462b      	mov	r3, r5
   1cbaa:	f7ff b8c2 	b.w	1bd32 <_svfprintf_r+0x4fa>
   1cbae:	9a07      	ldr	r2, [sp, #28]
   1cbb0:	465f      	mov	r7, fp
   1cbb2:	801a      	strh	r2, [r3, #0]
   1cbb4:	f7fe be6a 	b.w	1b88c <_svfprintf_r+0x54>
   1cbb8:	f8cd 8014 	str.w	r8, [sp, #20]
   1cbbc:	4690      	mov	r8, r2
   1cbbe:	2206      	movs	r2, #6
   1cbc0:	900b      	str	r0, [sp, #44]	; 0x2c
   1cbc2:	9206      	str	r2, [sp, #24]
   1cbc4:	e517      	b.n	1c5f6 <_svfprintf_r+0xdbe>
   1cbc6:	9b06      	ldr	r3, [sp, #24]
   1cbc8:	9803      	ldr	r0, [sp, #12]
   1cbca:	1c59      	adds	r1, r3, #1
   1cbcc:	f023 feea 	bl	409a4 <_malloc_r>
   1cbd0:	4607      	mov	r7, r0
   1cbd2:	2800      	cmp	r0, #0
   1cbd4:	f000 830f 	beq.w	1d1f6 <_svfprintf_r+0x19be>
   1cbd8:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   1cbdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cbde:	900b      	str	r0, [sp, #44]	; 0x2c
   1cbe0:	e509      	b.n	1c5f6 <_svfprintf_r+0xdbe>
   1cbe2:	222d      	movs	r2, #45	; 0x2d
   1cbe4:	2300      	movs	r3, #0
   1cbe6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   1cbea:	9306      	str	r3, [sp, #24]
   1cbec:	f7fe bf4c 	b.w	1ba88 <_svfprintf_r+0x250>
   1cbf0:	9a06      	ldr	r2, [sp, #24]
   1cbf2:	429a      	cmp	r2, r3
   1cbf4:	db01      	blt.n	1cbfa <_svfprintf_r+0x13c2>
   1cbf6:	3303      	adds	r3, #3
   1cbf8:	da3e      	bge.n	1cc78 <_svfprintf_r+0x1440>
   1cbfa:	3e02      	subs	r6, #2
   1cbfc:	f026 0a20 	bic.w	sl, r6, #32
   1cc00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc02:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1cc06:	b2f2      	uxtb	r2, r6
   1cc08:	f103 33ff 	add.w	r3, r3, #4294967295
   1cc0c:	9322      	str	r3, [sp, #136]	; 0x88
   1cc0e:	d101      	bne.n	1cc14 <_svfprintf_r+0x13dc>
   1cc10:	320f      	adds	r2, #15
   1cc12:	b2d2      	uxtb	r2, r2
   1cc14:	2b00      	cmp	r3, #0
   1cc16:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   1cc1a:	f2c0 8280 	blt.w	1d11e <_svfprintf_r+0x18e6>
   1cc1e:	222b      	movs	r2, #43	; 0x2b
   1cc20:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   1cc24:	2b09      	cmp	r3, #9
   1cc26:	f300 8230 	bgt.w	1d08a <_svfprintf_r+0x1852>
   1cc2a:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1cc2e:	f000 82a4 	beq.w	1d17a <_svfprintf_r+0x1942>
   1cc32:	2230      	movs	r2, #48	; 0x30
   1cc34:	f10d 0193 	add.w	r1, sp, #147	; 0x93
   1cc38:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   1cc3c:	3330      	adds	r3, #48	; 0x30
   1cc3e:	1c4a      	adds	r2, r1, #1
   1cc40:	700b      	strb	r3, [r1, #0]
   1cc42:	ab24      	add	r3, sp, #144	; 0x90
   1cc44:	1ad3      	subs	r3, r2, r3
   1cc46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cc48:	931a      	str	r3, [sp, #104]	; 0x68
   1cc4a:	2a01      	cmp	r2, #1
   1cc4c:	4413      	add	r3, r2
   1cc4e:	9308      	str	r3, [sp, #32]
   1cc50:	f340 826c 	ble.w	1d12c <_svfprintf_r+0x18f4>
   1cc54:	9b08      	ldr	r3, [sp, #32]
   1cc56:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cc58:	4413      	add	r3, r2
   1cc5a:	9308      	str	r3, [sp, #32]
   1cc5c:	9b05      	ldr	r3, [sp, #20]
   1cc5e:	2200      	movs	r2, #0
   1cc60:	9908      	ldr	r1, [sp, #32]
   1cc62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1cc66:	9211      	str	r2, [sp, #68]	; 0x44
   1cc68:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1cc6c:	9210      	str	r2, [sp, #64]	; 0x40
   1cc6e:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1cc72:	920e      	str	r2, [sp, #56]	; 0x38
   1cc74:	9105      	str	r1, [sp, #20]
   1cc76:	e513      	b.n	1c6a0 <_svfprintf_r+0xe68>
   1cc78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cc7a:	4619      	mov	r1, r3
   1cc7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc7e:	4299      	cmp	r1, r3
   1cc80:	f300 8132 	bgt.w	1cee8 <_svfprintf_r+0x16b0>
   1cc84:	9a05      	ldr	r2, [sp, #20]
   1cc86:	07d0      	lsls	r0, r2, #31
   1cc88:	f140 822c 	bpl.w	1d0e4 <_svfprintf_r+0x18ac>
   1cc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cc8e:	4413      	add	r3, r2
   1cc90:	9308      	str	r3, [sp, #32]
   1cc92:	9b05      	ldr	r3, [sp, #20]
   1cc94:	0559      	lsls	r1, r3, #21
   1cc96:	d503      	bpl.n	1cca0 <_svfprintf_r+0x1468>
   1cc98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc9a:	2b00      	cmp	r3, #0
   1cc9c:	f300 8169 	bgt.w	1cf72 <_svfprintf_r+0x173a>
   1cca0:	9b08      	ldr	r3, [sp, #32]
   1cca2:	2667      	movs	r6, #103	; 0x67
   1cca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cca8:	9305      	str	r3, [sp, #20]
   1ccaa:	e4f6      	b.n	1c69a <_svfprintf_r+0xe62>
   1ccac:	232d      	movs	r3, #45	; 0x2d
   1ccae:	461a      	mov	r2, r3
   1ccb0:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1ccb4:	f7ff b9bf 	b.w	1c036 <_svfprintf_r+0x7fe>
   1ccb8:	aa28      	add	r2, sp, #160	; 0xa0
   1ccba:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ccbe:	f029 fee9 	bl	46a94 <__ssprint_r>
   1ccc2:	2800      	cmp	r0, #0
   1ccc4:	f47e ae8b 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1ccc8:	f89a 1000 	ldrb.w	r1, [sl]
   1cccc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ccd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1ccd2:	e6f5      	b.n	1cac0 <_svfprintf_r+0x1288>
   1ccd4:	aa28      	add	r2, sp, #160	; 0xa0
   1ccd6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ccda:	f029 fedb 	bl	46a94 <__ssprint_r>
   1ccde:	2800      	cmp	r0, #0
   1cce0:	f47e ae7d 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1cce4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cce6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ccea:	f7ff bbdb 	b.w	1c4a4 <_svfprintf_r+0xc6c>
   1ccee:	f8cd 8014 	str.w	r8, [sp, #20]
   1ccf2:	4690      	mov	r8, r2
   1ccf4:	900b      	str	r0, [sp, #44]	; 0x2c
   1ccf6:	232d      	movs	r3, #45	; 0x2d
   1ccf8:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   1ccfc:	930d      	str	r3, [sp, #52]	; 0x34
   1ccfe:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1cd02:	911e      	str	r1, [sp, #120]	; 0x78
   1cd04:	931f      	str	r3, [sp, #124]	; 0x7c
   1cd06:	e47f      	b.n	1c608 <_svfprintf_r+0xdd0>
   1cd08:	a822      	add	r0, sp, #136	; 0x88
   1cd0a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1cd0e:	f029 fc2d 	bl	4656c <frexp>
   1cd12:	2200      	movs	r2, #0
   1cd14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1cd18:	ec51 0b10 	vmov	r0, r1, d0
   1cd1c:	f7fb fd3c 	bl	18798 <__aeabi_dmul>
   1cd20:	2200      	movs	r2, #0
   1cd22:	2300      	movs	r3, #0
   1cd24:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1cd28:	f7fb ff9e 	bl	18c68 <__aeabi_dcmpeq>
   1cd2c:	b108      	cbz	r0, 1cd32 <_svfprintf_r+0x14fa>
   1cd2e:	2301      	movs	r3, #1
   1cd30:	9322      	str	r3, [sp, #136]	; 0x88
   1cd32:	9b06      	ldr	r3, [sp, #24]
   1cd34:	4639      	mov	r1, r7
   1cd36:	4ab6      	ldr	r2, [pc, #728]	; (1d010 <_svfprintf_r+0x17d8>)
   1cd38:	f103 38ff 	add.w	r8, r3, #4294967295
   1cd3c:	4bb5      	ldr	r3, [pc, #724]	; (1d014 <_svfprintf_r+0x17dc>)
   1cd3e:	9711      	str	r7, [sp, #68]	; 0x44
   1cd40:	2e61      	cmp	r6, #97	; 0x61
   1cd42:	bf08      	it	eq
   1cd44:	461a      	moveq	r2, r3
   1cd46:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   1cd4a:	e9cd b60e 	strd	fp, r6, [sp, #56]	; 0x38
   1cd4e:	9206      	str	r2, [sp, #24]
   1cd50:	4693      	mov	fp, r2
   1cd52:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1cd56:	f8cd a020 	str.w	sl, [sp, #32]
   1cd5a:	468a      	mov	sl, r1
   1cd5c:	e005      	b.n	1cd6a <_svfprintf_r+0x1532>
   1cd5e:	2200      	movs	r2, #0
   1cd60:	2300      	movs	r3, #0
   1cd62:	f7fb ff81 	bl	18c68 <__aeabi_dcmpeq>
   1cd66:	bb00      	cbnz	r0, 1cdaa <_svfprintf_r+0x1572>
   1cd68:	46a2      	mov	sl, r4
   1cd6a:	2200      	movs	r2, #0
   1cd6c:	4baa      	ldr	r3, [pc, #680]	; (1d018 <_svfprintf_r+0x17e0>)
   1cd6e:	4630      	mov	r0, r6
   1cd70:	4639      	mov	r1, r7
   1cd72:	f7fb fd11 	bl	18798 <__aeabi_dmul>
   1cd76:	460d      	mov	r5, r1
   1cd78:	4604      	mov	r4, r0
   1cd7a:	f7fb ffa7 	bl	18ccc <__aeabi_d2iz>
   1cd7e:	4681      	mov	r9, r0
   1cd80:	f7fb fca0 	bl	186c4 <__aeabi_i2d>
   1cd84:	460b      	mov	r3, r1
   1cd86:	4602      	mov	r2, r0
   1cd88:	4629      	mov	r1, r5
   1cd8a:	4620      	mov	r0, r4
   1cd8c:	f7fb fb4c 	bl	18428 <__aeabi_dsub>
   1cd90:	4654      	mov	r4, sl
   1cd92:	f81b 3009 	ldrb.w	r3, [fp, r9]
   1cd96:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cd9a:	4645      	mov	r5, r8
   1cd9c:	4606      	mov	r6, r0
   1cd9e:	460f      	mov	r7, r1
   1cda0:	f804 3b01 	strb.w	r3, [r4], #1
   1cda4:	f108 38ff 	add.w	r8, r8, #4294967295
   1cda8:	d1d9      	bne.n	1cd5e <_svfprintf_r+0x1526>
   1cdaa:	4630      	mov	r0, r6
   1cdac:	4639      	mov	r1, r7
   1cdae:	2200      	movs	r2, #0
   1cdb0:	4b9a      	ldr	r3, [pc, #616]	; (1d01c <_svfprintf_r+0x17e4>)
   1cdb2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1cdb6:	46c8      	mov	r8, r9
   1cdb8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   1cdbc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1cdbe:	f8dd a020 	ldr.w	sl, [sp, #32]
   1cdc2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1cdc6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cdc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1cdcc:	f7fb ff74 	bl	18cb8 <__aeabi_dcmpgt>
   1cdd0:	2800      	cmp	r0, #0
   1cdd2:	f040 80a1 	bne.w	1cf18 <_svfprintf_r+0x16e0>
   1cdd6:	2200      	movs	r2, #0
   1cdd8:	4b90      	ldr	r3, [pc, #576]	; (1d01c <_svfprintf_r+0x17e4>)
   1cdda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1cdde:	f7fb ff43 	bl	18c68 <__aeabi_dcmpeq>
   1cde2:	b118      	cbz	r0, 1cdec <_svfprintf_r+0x15b4>
   1cde4:	ea5f 72c8 	movs.w	r2, r8, lsl #31
   1cde8:	f100 8096 	bmi.w	1cf18 <_svfprintf_r+0x16e0>
   1cdec:	2d00      	cmp	r5, #0
   1cdee:	db06      	blt.n	1cdfe <_svfprintf_r+0x15c6>
   1cdf0:	1c6b      	adds	r3, r5, #1
   1cdf2:	2230      	movs	r2, #48	; 0x30
   1cdf4:	4423      	add	r3, r4
   1cdf6:	f804 2b01 	strb.w	r2, [r4], #1
   1cdfa:	42a3      	cmp	r3, r4
   1cdfc:	d1fb      	bne.n	1cdf6 <_svfprintf_r+0x15be>
   1cdfe:	1be3      	subs	r3, r4, r7
   1ce00:	930f      	str	r3, [sp, #60]	; 0x3c
   1ce02:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ce04:	930e      	str	r3, [sp, #56]	; 0x38
   1ce06:	e6fb      	b.n	1cc00 <_svfprintf_r+0x13c8>
   1ce08:	a926      	add	r1, sp, #152	; 0x98
   1ce0a:	a823      	add	r0, sp, #140	; 0x8c
   1ce0c:	ab22      	add	r3, sp, #136	; 0x88
   1ce0e:	9a06      	ldr	r2, [sp, #24]
   1ce10:	9101      	str	r1, [sp, #4]
   1ce12:	2103      	movs	r1, #3
   1ce14:	9000      	str	r0, [sp, #0]
   1ce16:	9803      	ldr	r0, [sp, #12]
   1ce18:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1ce1c:	f000 f9fc 	bl	1d218 <_dtoa_r>
   1ce20:	7803      	ldrb	r3, [r0, #0]
   1ce22:	4607      	mov	r7, r0
   1ce24:	2b30      	cmp	r3, #48	; 0x30
   1ce26:	d10e      	bne.n	1ce46 <_svfprintf_r+0x160e>
   1ce28:	2200      	movs	r2, #0
   1ce2a:	2300      	movs	r3, #0
   1ce2c:	f04f 0401 	mov.w	r4, #1
   1ce30:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   1ce34:	f7fb ff18 	bl	18c68 <__aeabi_dcmpeq>
   1ce38:	b108      	cbz	r0, 1ce3e <_svfprintf_r+0x1606>
   1ce3a:	f04f 0400 	mov.w	r4, #0
   1ce3e:	f014 0fff 	tst.w	r4, #255	; 0xff
   1ce42:	f040 81b8 	bne.w	1d1b6 <_svfprintf_r+0x197e>
   1ce46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ce48:	9a06      	ldr	r2, [sp, #24]
   1ce4a:	4413      	add	r3, r2
   1ce4c:	18fc      	adds	r4, r7, r3
   1ce4e:	f7ff bbf7 	b.w	1c640 <_svfprintf_r+0xe08>
   1ce52:	aa28      	add	r2, sp, #160	; 0xa0
   1ce54:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ce58:	f029 fe1c 	bl	46a94 <__ssprint_r>
   1ce5c:	2800      	cmp	r0, #0
   1ce5e:	f47e adbe 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1ce62:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ce64:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ce68:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1ce6a:	f7ff b9c9 	b.w	1c200 <_svfprintf_r+0x9c8>
   1ce6e:	9b06      	ldr	r3, [sp, #24]
   1ce70:	940c      	str	r4, [sp, #48]	; 0x30
   1ce72:	9305      	str	r3, [sp, #20]
   1ce74:	9308      	str	r3, [sp, #32]
   1ce76:	9006      	str	r0, [sp, #24]
   1ce78:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1ce7c:	900e      	str	r0, [sp, #56]	; 0x38
   1ce7e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1ce82:	f7fe be00 	b.w	1ba86 <_svfprintf_r+0x24e>
   1ce86:	aa28      	add	r2, sp, #160	; 0xa0
   1ce88:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ce8c:	f029 fe02 	bl	46a94 <__ssprint_r>
   1ce90:	2800      	cmp	r0, #0
   1ce92:	f47e ada4 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1ce96:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ce98:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ce9c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   1cea0:	f7ff b9c2 	b.w	1c228 <_svfprintf_r+0x9f0>
   1cea4:	aa28      	add	r2, sp, #160	; 0xa0
   1cea6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ceaa:	f029 fdf3 	bl	46a94 <__ssprint_r>
   1ceae:	2800      	cmp	r0, #0
   1ceb0:	f47e ad95 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1ceb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ceb6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ceba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cebc:	e4c5      	b.n	1c84a <_svfprintf_r+0x1012>
   1cebe:	aa28      	add	r2, sp, #160	; 0xa0
   1cec0:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cec4:	f029 fde6 	bl	46a94 <__ssprint_r>
   1cec8:	2800      	cmp	r0, #0
   1ceca:	f47e ad88 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1cece:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ced0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ced4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ced6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1ced8:	1ad3      	subs	r3, r2, r3
   1ceda:	e4ce      	b.n	1c87a <_svfprintf_r+0x1042>
   1cedc:	f018 0f01 	tst.w	r8, #1
   1cee0:	f43e ae99 	beq.w	1bc16 <_svfprintf_r+0x3de>
   1cee4:	f7ff b990 	b.w	1c208 <_svfprintf_r+0x9d0>
   1cee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ceea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ceec:	4413      	add	r3, r2
   1ceee:	9308      	str	r3, [sp, #32]
   1cef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cef2:	2b00      	cmp	r3, #0
   1cef4:	f340 8129 	ble.w	1d14a <_svfprintf_r+0x1912>
   1cef8:	2667      	movs	r6, #103	; 0x67
   1cefa:	f7ff bbc6 	b.w	1c68a <_svfprintf_r+0xe52>
   1cefe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cf00:	42a3      	cmp	r3, r4
   1cf02:	f4bf aba7 	bcs.w	1c654 <_svfprintf_r+0xe1c>
   1cf06:	2130      	movs	r1, #48	; 0x30
   1cf08:	1c5a      	adds	r2, r3, #1
   1cf0a:	9226      	str	r2, [sp, #152]	; 0x98
   1cf0c:	7019      	strb	r1, [r3, #0]
   1cf0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cf10:	429c      	cmp	r4, r3
   1cf12:	d8f9      	bhi.n	1cf08 <_svfprintf_r+0x16d0>
   1cf14:	f7ff bb9e 	b.w	1c654 <_svfprintf_r+0xe1c>
   1cf18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf1a:	9326      	str	r3, [sp, #152]	; 0x98
   1cf1c:	9b06      	ldr	r3, [sp, #24]
   1cf1e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1cf22:	7bd9      	ldrb	r1, [r3, #15]
   1cf24:	4623      	mov	r3, r4
   1cf26:	4291      	cmp	r1, r2
   1cf28:	d109      	bne.n	1cf3e <_svfprintf_r+0x1706>
   1cf2a:	2030      	movs	r0, #48	; 0x30
   1cf2c:	f803 0c01 	strb.w	r0, [r3, #-1]
   1cf30:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cf32:	1e5a      	subs	r2, r3, #1
   1cf34:	9226      	str	r2, [sp, #152]	; 0x98
   1cf36:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   1cf3a:	4291      	cmp	r1, r2
   1cf3c:	d0f6      	beq.n	1cf2c <_svfprintf_r+0x16f4>
   1cf3e:	2a39      	cmp	r2, #57	; 0x39
   1cf40:	f000 8123 	beq.w	1d18a <_svfprintf_r+0x1952>
   1cf44:	3201      	adds	r2, #1
   1cf46:	b2d2      	uxtb	r2, r2
   1cf48:	f803 2c01 	strb.w	r2, [r3, #-1]
   1cf4c:	e757      	b.n	1cdfe <_svfprintf_r+0x15c6>
   1cf4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1cf50:	f04f 0b00 	mov.w	fp, #0
   1cf54:	9919      	ldr	r1, [sp, #100]	; 0x64
   1cf56:	1aff      	subs	r7, r7, r3
   1cf58:	461a      	mov	r2, r3
   1cf5a:	4638      	mov	r0, r7
   1cf5c:	f024 fcd6 	bl	4190c <strncpy>
   1cf60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1cf62:	7853      	ldrb	r3, [r2, #1]
   1cf64:	2b00      	cmp	r3, #0
   1cf66:	f000 80c9 	beq.w	1d0fc <_svfprintf_r+0x18c4>
   1cf6a:	3201      	adds	r2, #1
   1cf6c:	9217      	str	r2, [sp, #92]	; 0x5c
   1cf6e:	f7ff bbcb 	b.w	1c708 <_svfprintf_r+0xed0>
   1cf72:	2667      	movs	r6, #103	; 0x67
   1cf74:	2200      	movs	r2, #0
   1cf76:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1cf78:	9211      	str	r2, [sp, #68]	; 0x44
   1cf7a:	9210      	str	r2, [sp, #64]	; 0x40
   1cf7c:	7803      	ldrb	r3, [r0, #0]
   1cf7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cf80:	2bff      	cmp	r3, #255	; 0xff
   1cf82:	d00b      	beq.n	1cf9c <_svfprintf_r+0x1764>
   1cf84:	4293      	cmp	r3, r2
   1cf86:	da09      	bge.n	1cf9c <_svfprintf_r+0x1764>
   1cf88:	7841      	ldrb	r1, [r0, #1]
   1cf8a:	1ad2      	subs	r2, r2, r3
   1cf8c:	b1a9      	cbz	r1, 1cfba <_svfprintf_r+0x1782>
   1cf8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cf90:	3001      	adds	r0, #1
   1cf92:	3301      	adds	r3, #1
   1cf94:	9310      	str	r3, [sp, #64]	; 0x40
   1cf96:	460b      	mov	r3, r1
   1cf98:	2bff      	cmp	r3, #255	; 0xff
   1cf9a:	d1f3      	bne.n	1cf84 <_svfprintf_r+0x174c>
   1cf9c:	920e      	str	r2, [sp, #56]	; 0x38
   1cf9e:	9908      	ldr	r1, [sp, #32]
   1cfa0:	9017      	str	r0, [sp, #92]	; 0x5c
   1cfa2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   1cfa6:	4413      	add	r3, r2
   1cfa8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1cfaa:	fb02 1303 	mla	r3, r2, r3, r1
   1cfae:	9308      	str	r3, [sp, #32]
   1cfb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cfb4:	9305      	str	r3, [sp, #20]
   1cfb6:	f7ff bb73 	b.w	1c6a0 <_svfprintf_r+0xe68>
   1cfba:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cfbc:	3101      	adds	r1, #1
   1cfbe:	9111      	str	r1, [sp, #68]	; 0x44
   1cfc0:	e7de      	b.n	1cf80 <_svfprintf_r+0x1748>
   1cfc2:	425d      	negs	r5, r3
   1cfc4:	3310      	adds	r3, #16
   1cfc6:	4b16      	ldr	r3, [pc, #88]	; (1d020 <_svfprintf_r+0x17e8>)
   1cfc8:	da50      	bge.n	1d06c <_svfprintf_r+0x1834>
   1cfca:	4621      	mov	r1, r4
   1cfcc:	2610      	movs	r6, #16
   1cfce:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1cfd2:	461c      	mov	r4, r3
   1cfd4:	e002      	b.n	1cfdc <_svfprintf_r+0x17a4>
   1cfd6:	3d10      	subs	r5, #16
   1cfd8:	2d10      	cmp	r5, #16
   1cfda:	dd45      	ble.n	1d068 <_svfprintf_r+0x1830>
   1cfdc:	3201      	adds	r2, #1
   1cfde:	3110      	adds	r1, #16
   1cfe0:	f8c9 4000 	str.w	r4, [r9]
   1cfe4:	f109 0908 	add.w	r9, r9, #8
   1cfe8:	2a07      	cmp	r2, #7
   1cfea:	f849 6c04 	str.w	r6, [r9, #-4]
   1cfee:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1cff2:	ddf0      	ble.n	1cfd6 <_svfprintf_r+0x179e>
   1cff4:	aa28      	add	r2, sp, #160	; 0xa0
   1cff6:	9904      	ldr	r1, [sp, #16]
   1cff8:	4650      	mov	r0, sl
   1cffa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cffe:	f029 fd49 	bl	46a94 <__ssprint_r>
   1d002:	2800      	cmp	r0, #0
   1d004:	f47e aceb 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1d008:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1d00c:	e7e3      	b.n	1cfd6 <_svfprintf_r+0x179e>
   1d00e:	bf00      	nop
   1d010:	0004c630 	.word	0x0004c630
   1d014:	0004c61c 	.word	0x0004c61c
   1d018:	40300000 	.word	0x40300000
   1d01c:	3fe00000 	.word	0x3fe00000
   1d020:	0004c660 	.word	0x0004c660
   1d024:	a926      	add	r1, sp, #152	; 0x98
   1d026:	a823      	add	r0, sp, #140	; 0x8c
   1d028:	ab22      	add	r3, sp, #136	; 0x88
   1d02a:	9a06      	ldr	r2, [sp, #24]
   1d02c:	9101      	str	r1, [sp, #4]
   1d02e:	2102      	movs	r1, #2
   1d030:	9000      	str	r0, [sp, #0]
   1d032:	9803      	ldr	r0, [sp, #12]
   1d034:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1d038:	f000 f8ee 	bl	1d218 <_dtoa_r>
   1d03c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1d040:	4607      	mov	r7, r0
   1d042:	f000 8094 	beq.w	1d16e <_svfprintf_r+0x1936>
   1d046:	9c06      	ldr	r4, [sp, #24]
   1d048:	f7ff baf9 	b.w	1c63e <_svfprintf_r+0xe06>
   1d04c:	2b00      	cmp	r3, #0
   1d04e:	f6ff ae4e 	blt.w	1ccee <_svfprintf_r+0x14b6>
   1d052:	f8cd 8014 	str.w	r8, [sp, #20]
   1d056:	4690      	mov	r8, r2
   1d058:	900d      	str	r0, [sp, #52]	; 0x34
   1d05a:	900b      	str	r0, [sp, #44]	; 0x2c
   1d05c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1d060:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
   1d064:	f7ff bad4 	b.w	1c610 <_svfprintf_r+0xdd8>
   1d068:	4623      	mov	r3, r4
   1d06a:	460c      	mov	r4, r1
   1d06c:	3201      	adds	r2, #1
   1d06e:	442c      	add	r4, r5
   1d070:	f8c9 3000 	str.w	r3, [r9]
   1d074:	2a07      	cmp	r2, #7
   1d076:	f8c9 5004 	str.w	r5, [r9, #4]
   1d07a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1d07e:	f300 808c 	bgt.w	1d19a <_svfprintf_r+0x1962>
   1d082:	f109 0908 	add.w	r9, r9, #8
   1d086:	f7ff b8d2 	b.w	1c22e <_svfprintf_r+0x9f6>
   1d08a:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   1d08e:	4d5d      	ldr	r5, [pc, #372]	; (1d204 <_svfprintf_r+0x19cc>)
   1d090:	4660      	mov	r0, ip
   1d092:	e000      	b.n	1d096 <_svfprintf_r+0x185e>
   1d094:	4620      	mov	r0, r4
   1d096:	fba5 2103 	umull	r2, r1, r5, r3
   1d09a:	1e44      	subs	r4, r0, #1
   1d09c:	08c9      	lsrs	r1, r1, #3
   1d09e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1d0a2:	2909      	cmp	r1, #9
   1d0a4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1d0a8:	460b      	mov	r3, r1
   1d0aa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1d0ae:	f800 2c01 	strb.w	r2, [r0, #-1]
   1d0b2:	dcef      	bgt.n	1d094 <_svfprintf_r+0x185c>
   1d0b4:	3330      	adds	r3, #48	; 0x30
   1d0b6:	3802      	subs	r0, #2
   1d0b8:	b2db      	uxtb	r3, r3
   1d0ba:	4584      	cmp	ip, r0
   1d0bc:	f804 3c01 	strb.w	r3, [r4, #-1]
   1d0c0:	f240 808a 	bls.w	1d1d8 <_svfprintf_r+0x19a0>
   1d0c4:	4622      	mov	r2, r4
   1d0c6:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   1d0ca:	e001      	b.n	1d0d0 <_svfprintf_r+0x1898>
   1d0cc:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d0d0:	4594      	cmp	ip, r2
   1d0d2:	f801 3b01 	strb.w	r3, [r1], #1
   1d0d6:	d1f9      	bne.n	1d0cc <_svfprintf_r+0x1894>
   1d0d8:	aa28      	add	r2, sp, #160	; 0xa0
   1d0da:	f10d 0392 	add.w	r3, sp, #146	; 0x92
   1d0de:	1b12      	subs	r2, r2, r4
   1d0e0:	441a      	add	r2, r3
   1d0e2:	e5ae      	b.n	1cc42 <_svfprintf_r+0x140a>
   1d0e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d0e6:	9308      	str	r3, [sp, #32]
   1d0e8:	e5d3      	b.n	1cc92 <_svfprintf_r+0x145a>
   1d0ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d0ec:	2666      	movs	r6, #102	; 0x66
   1d0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d0f0:	4413      	add	r3, r2
   1d0f2:	9a06      	ldr	r2, [sp, #24]
   1d0f4:	441a      	add	r2, r3
   1d0f6:	9208      	str	r2, [sp, #32]
   1d0f8:	f7ff bac7 	b.w	1c68a <_svfprintf_r+0xe52>
   1d0fc:	469b      	mov	fp, r3
   1d0fe:	f7ff bb03 	b.w	1c708 <_svfprintf_r+0xed0>
   1d102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d104:	2b00      	cmp	r3, #0
   1d106:	db43      	blt.n	1d190 <_svfprintf_r+0x1958>
   1d108:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1d10c:	2003      	movs	r0, #3
   1d10e:	4f3e      	ldr	r7, [pc, #248]	; (1d208 <_svfprintf_r+0x19d0>)
   1d110:	4b3e      	ldr	r3, [pc, #248]	; (1d20c <_svfprintf_r+0x19d4>)
   1d112:	9005      	str	r0, [sp, #20]
   1d114:	f7fe bf93 	b.w	1c03e <_svfprintf_r+0x806>
   1d118:	464a      	mov	r2, r9
   1d11a:	4b3d      	ldr	r3, [pc, #244]	; (1d210 <_svfprintf_r+0x19d8>)
   1d11c:	e431      	b.n	1c982 <_svfprintf_r+0x114a>
   1d11e:	222d      	movs	r2, #45	; 0x2d
   1d120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d122:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   1d126:	f1c3 0301 	rsb	r3, r3, #1
   1d12a:	e57b      	b.n	1cc24 <_svfprintf_r+0x13ec>
   1d12c:	9b05      	ldr	r3, [sp, #20]
   1d12e:	07db      	lsls	r3, r3, #31
   1d130:	f57f ad94 	bpl.w	1cc5c <_svfprintf_r+0x1424>
   1d134:	e58e      	b.n	1cc54 <_svfprintf_r+0x141c>
   1d136:	bb1b      	cbnz	r3, 1d180 <_svfprintf_r+0x1948>
   1d138:	9b05      	ldr	r3, [sp, #20]
   1d13a:	07dc      	lsls	r4, r3, #31
   1d13c:	d420      	bmi.n	1d180 <_svfprintf_r+0x1948>
   1d13e:	2301      	movs	r3, #1
   1d140:	2666      	movs	r6, #102	; 0x66
   1d142:	9305      	str	r3, [sp, #20]
   1d144:	9308      	str	r3, [sp, #32]
   1d146:	f7ff baa8 	b.w	1c69a <_svfprintf_r+0xe62>
   1d14a:	f1c3 0301 	rsb	r3, r3, #1
   1d14e:	2667      	movs	r6, #103	; 0x67
   1d150:	9a08      	ldr	r2, [sp, #32]
   1d152:	441a      	add	r2, r3
   1d154:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1d158:	9208      	str	r2, [sp, #32]
   1d15a:	9305      	str	r3, [sp, #20]
   1d15c:	f7ff ba9d 	b.w	1c69a <_svfprintf_r+0xe62>
   1d160:	9906      	ldr	r1, [sp, #24]
   1d162:	4690      	mov	r8, r2
   1d164:	2201      	movs	r2, #1
   1d166:	910b      	str	r1, [sp, #44]	; 0x2c
   1d168:	9206      	str	r2, [sp, #24]
   1d16a:	f7ff ba44 	b.w	1c5f6 <_svfprintf_r+0xdbe>
   1d16e:	9b05      	ldr	r3, [sp, #20]
   1d170:	07db      	lsls	r3, r3, #31
   1d172:	d434      	bmi.n	1d1de <_svfprintf_r+0x19a6>
   1d174:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1d176:	f7ff ba6d 	b.w	1c654 <_svfprintf_r+0xe1c>
   1d17a:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   1d17e:	e55d      	b.n	1cc3c <_svfprintf_r+0x1404>
   1d180:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d182:	2666      	movs	r6, #102	; 0x66
   1d184:	9a06      	ldr	r2, [sp, #24]
   1d186:	3301      	adds	r3, #1
   1d188:	e7e3      	b.n	1d152 <_svfprintf_r+0x191a>
   1d18a:	9a06      	ldr	r2, [sp, #24]
   1d18c:	7a92      	ldrb	r2, [r2, #10]
   1d18e:	e6db      	b.n	1cf48 <_svfprintf_r+0x1710>
   1d190:	232d      	movs	r3, #45	; 0x2d
   1d192:	461a      	mov	r2, r3
   1d194:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1d198:	e7b8      	b.n	1d10c <_svfprintf_r+0x18d4>
   1d19a:	aa28      	add	r2, sp, #160	; 0xa0
   1d19c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1d1a0:	f029 fc78 	bl	46a94 <__ssprint_r>
   1d1a4:	2800      	cmp	r0, #0
   1d1a6:	f47e ac1a 	bne.w	1b9de <_svfprintf_r+0x1a6>
   1d1aa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1d1ac:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1d1b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1d1b2:	f7ff b83c 	b.w	1c22e <_svfprintf_r+0x9f6>
   1d1b6:	9b06      	ldr	r3, [sp, #24]
   1d1b8:	f1c3 0301 	rsb	r3, r3, #1
   1d1bc:	9322      	str	r3, [sp, #136]	; 0x88
   1d1be:	e643      	b.n	1ce48 <_svfprintf_r+0x1610>
   1d1c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d1c2:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1d1c6:	4693      	mov	fp, r2
   1d1c8:	680b      	ldr	r3, [r1, #0]
   1d1ca:	3104      	adds	r1, #4
   1d1cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1d1d0:	910c      	str	r1, [sp, #48]	; 0x30
   1d1d2:	9306      	str	r3, [sp, #24]
   1d1d4:	f7fe bb89 	b.w	1b8ea <_svfprintf_r+0xb2>
   1d1d8:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   1d1dc:	e531      	b.n	1cc42 <_svfprintf_r+0x140a>
   1d1de:	9b06      	ldr	r3, [sp, #24]
   1d1e0:	18fc      	adds	r4, r7, r3
   1d1e2:	f7ff ba2d 	b.w	1c640 <_svfprintf_r+0xe08>
   1d1e6:	f04f 32ff 	mov.w	r2, #4294967295
   1d1ea:	230c      	movs	r3, #12
   1d1ec:	9207      	str	r2, [sp, #28]
   1d1ee:	9a03      	ldr	r2, [sp, #12]
   1d1f0:	6013      	str	r3, [r2, #0]
   1d1f2:	f7fe bc03 	b.w	1b9fc <_svfprintf_r+0x1c4>
   1d1f6:	9a04      	ldr	r2, [sp, #16]
   1d1f8:	8993      	ldrh	r3, [r2, #12]
   1d1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d1fe:	8193      	strh	r3, [r2, #12]
   1d200:	f7fe bbf5 	b.w	1b9ee <_svfprintf_r+0x1b6>
   1d204:	cccccccd 	.word	0xcccccccd
   1d208:	0004c618 	.word	0x0004c618
   1d20c:	0004c614 	.word	0x0004c614
   1d210:	0004c660 	.word	0x0004c660
   1d214:	00000000 	.word	0x00000000

0001d218 <_dtoa_r>:
   1d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d21c:	b099      	sub	sp, #100	; 0x64
   1d21e:	4604      	mov	r4, r0
   1d220:	ee10 aa10 	vmov	sl, s0
   1d224:	9100      	str	r1, [sp, #0]
   1d226:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d22a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d22c:	ec57 6b10 	vmov	r6, r7, d0
   1d230:	46bb      	mov	fp, r7
   1d232:	b14b      	cbz	r3, 1d248 <_dtoa_r+0x30>
   1d234:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1d236:	2201      	movs	r2, #1
   1d238:	4619      	mov	r1, r3
   1d23a:	40aa      	lsls	r2, r5
   1d23c:	e9c3 5201 	strd	r5, r2, [r3, #4]
   1d240:	f028 fd34 	bl	45cac <_Bfree>
   1d244:	2300      	movs	r3, #0
   1d246:	6423      	str	r3, [r4, #64]	; 0x40
   1d248:	f1b7 0900 	subs.w	r9, r7, #0
   1d24c:	f2c0 80af 	blt.w	1d3ae <_dtoa_r+0x196>
   1d250:	2300      	movs	r3, #0
   1d252:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d254:	6013      	str	r3, [r2, #0]
   1d256:	4b7a      	ldr	r3, [pc, #488]	; (1d440 <_dtoa_r+0x228>)
   1d258:	ea33 0309 	bics.w	r3, r3, r9
   1d25c:	f000 80b2 	beq.w	1d3c4 <_dtoa_r+0x1ac>
   1d260:	4650      	mov	r0, sl
   1d262:	4659      	mov	r1, fp
   1d264:	2200      	movs	r2, #0
   1d266:	2300      	movs	r3, #0
   1d268:	f7fb fcfe 	bl	18c68 <__aeabi_dcmpeq>
   1d26c:	4656      	mov	r6, sl
   1d26e:	465f      	mov	r7, fp
   1d270:	4680      	mov	r8, r0
   1d272:	b168      	cbz	r0, 1d290 <_dtoa_r+0x78>
   1d274:	2301      	movs	r3, #1
   1d276:	9a03      	ldr	r2, [sp, #12]
   1d278:	6013      	str	r3, [r2, #0]
   1d27a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	f000 80cc 	beq.w	1d41a <_dtoa_r+0x202>
   1d282:	4f70      	ldr	r7, [pc, #448]	; (1d444 <_dtoa_r+0x22c>)
   1d284:	601f      	str	r7, [r3, #0]
   1d286:	3f01      	subs	r7, #1
   1d288:	4638      	mov	r0, r7
   1d28a:	b019      	add	sp, #100	; 0x64
   1d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d290:	aa16      	add	r2, sp, #88	; 0x58
   1d292:	a917      	add	r1, sp, #92	; 0x5c
   1d294:	4620      	mov	r0, r4
   1d296:	ec47 6b10 	vmov	d0, r6, r7
   1d29a:	f029 f871 	bl	46380 <__d2b>
   1d29e:	9009      	str	r0, [sp, #36]	; 0x24
   1d2a0:	ea5f 5519 	movs.w	r5, r9, lsr #20
   1d2a4:	f040 80ac 	bne.w	1d400 <_dtoa_r+0x1e8>
   1d2a8:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   1d2ac:	4445      	add	r5, r8
   1d2ae:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1d2b2:	2b20      	cmp	r3, #32
   1d2b4:	f340 8292 	ble.w	1d7dc <_dtoa_r+0x5c4>
   1d2b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1d2bc:	f205 4012 	addw	r0, r5, #1042	; 0x412
   1d2c0:	fa09 f903 	lsl.w	r9, r9, r3
   1d2c4:	fa2a f000 	lsr.w	r0, sl, r0
   1d2c8:	ea49 0000 	orr.w	r0, r9, r0
   1d2cc:	f7fb f9ea 	bl	186a4 <__aeabi_ui2d>
   1d2d0:	3d01      	subs	r5, #1
   1d2d2:	2201      	movs	r2, #1
   1d2d4:	4606      	mov	r6, r0
   1d2d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1d2da:	9214      	str	r2, [sp, #80]	; 0x50
   1d2dc:	4630      	mov	r0, r6
   1d2de:	4639      	mov	r1, r7
   1d2e0:	2200      	movs	r2, #0
   1d2e2:	4b59      	ldr	r3, [pc, #356]	; (1d448 <_dtoa_r+0x230>)
   1d2e4:	f7fb f8a0 	bl	18428 <__aeabi_dsub>
   1d2e8:	a34f      	add	r3, pc, #316	; (adr r3, 1d428 <_dtoa_r+0x210>)
   1d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2ee:	f7fb fa53 	bl	18798 <__aeabi_dmul>
   1d2f2:	a34f      	add	r3, pc, #316	; (adr r3, 1d430 <_dtoa_r+0x218>)
   1d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2f8:	f7fb f898 	bl	1842c <__adddf3>
   1d2fc:	4606      	mov	r6, r0
   1d2fe:	460f      	mov	r7, r1
   1d300:	4628      	mov	r0, r5
   1d302:	f7fb f9df 	bl	186c4 <__aeabi_i2d>
   1d306:	a34c      	add	r3, pc, #304	; (adr r3, 1d438 <_dtoa_r+0x220>)
   1d308:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d30c:	f7fb fa44 	bl	18798 <__aeabi_dmul>
   1d310:	4602      	mov	r2, r0
   1d312:	460b      	mov	r3, r1
   1d314:	4630      	mov	r0, r6
   1d316:	4639      	mov	r1, r7
   1d318:	f7fb f888 	bl	1842c <__adddf3>
   1d31c:	4606      	mov	r6, r0
   1d31e:	460f      	mov	r7, r1
   1d320:	f7fb fcd4 	bl	18ccc <__aeabi_d2iz>
   1d324:	2200      	movs	r2, #0
   1d326:	4681      	mov	r9, r0
   1d328:	2300      	movs	r3, #0
   1d32a:	4630      	mov	r0, r6
   1d32c:	4639      	mov	r1, r7
   1d32e:	f7fb fca5 	bl	18c7c <__aeabi_dcmplt>
   1d332:	2800      	cmp	r0, #0
   1d334:	f040 8245 	bne.w	1d7c2 <_dtoa_r+0x5aa>
   1d338:	f1b9 0f16 	cmp.w	r9, #22
   1d33c:	f200 822e 	bhi.w	1d79c <_dtoa_r+0x584>
   1d340:	4942      	ldr	r1, [pc, #264]	; (1d44c <_dtoa_r+0x234>)
   1d342:	4652      	mov	r2, sl
   1d344:	465b      	mov	r3, fp
   1d346:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   1d34a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d34e:	f7fb fcb3 	bl	18cb8 <__aeabi_dcmpgt>
   1d352:	2800      	cmp	r0, #0
   1d354:	f000 8249 	beq.w	1d7ea <_dtoa_r+0x5d2>
   1d358:	2300      	movs	r3, #0
   1d35a:	f109 39ff 	add.w	r9, r9, #4294967295
   1d35e:	9310      	str	r3, [sp, #64]	; 0x40
   1d360:	eba8 0505 	sub.w	r5, r8, r5
   1d364:	1e6b      	subs	r3, r5, #1
   1d366:	9306      	str	r3, [sp, #24]
   1d368:	f100 8225 	bmi.w	1d7b6 <_dtoa_r+0x59e>
   1d36c:	2300      	movs	r3, #0
   1d36e:	9308      	str	r3, [sp, #32]
   1d370:	f1b9 0f00 	cmp.w	r9, #0
   1d374:	f2c0 8215 	blt.w	1d7a2 <_dtoa_r+0x58a>
   1d378:	9b06      	ldr	r3, [sp, #24]
   1d37a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   1d37e:	444b      	add	r3, r9
   1d380:	9306      	str	r3, [sp, #24]
   1d382:	2300      	movs	r3, #0
   1d384:	930e      	str	r3, [sp, #56]	; 0x38
   1d386:	9b00      	ldr	r3, [sp, #0]
   1d388:	2b09      	cmp	r3, #9
   1d38a:	d867      	bhi.n	1d45c <_dtoa_r+0x244>
   1d38c:	2b05      	cmp	r3, #5
   1d38e:	f340 822a 	ble.w	1d7e6 <_dtoa_r+0x5ce>
   1d392:	3b04      	subs	r3, #4
   1d394:	2500      	movs	r5, #0
   1d396:	9300      	str	r3, [sp, #0]
   1d398:	9b00      	ldr	r3, [sp, #0]
   1d39a:	3b02      	subs	r3, #2
   1d39c:	2b03      	cmp	r3, #3
   1d39e:	f200 824b 	bhi.w	1d838 <_dtoa_r+0x620>
   1d3a2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d3a6:	0283      	.short	0x0283
   1d3a8:	02ad02a1 	.word	0x02ad02a1
   1d3ac:	04a8      	.short	0x04a8
   1d3ae:	2301      	movs	r3, #1
   1d3b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d3b2:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   1d3b6:	6013      	str	r3, [r2, #0]
   1d3b8:	4b21      	ldr	r3, [pc, #132]	; (1d440 <_dtoa_r+0x228>)
   1d3ba:	46cb      	mov	fp, r9
   1d3bc:	ea33 0309 	bics.w	r3, r3, r9
   1d3c0:	f47f af4e 	bne.w	1d260 <_dtoa_r+0x48>
   1d3c4:	f242 730f 	movw	r3, #9999	; 0x270f
   1d3c8:	9a03      	ldr	r2, [sp, #12]
   1d3ca:	6013      	str	r3, [r2, #0]
   1d3cc:	f1ba 0f00 	cmp.w	sl, #0
   1d3d0:	d10f      	bne.n	1d3f2 <_dtoa_r+0x1da>
   1d3d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1d3d6:	b963      	cbnz	r3, 1d3f2 <_dtoa_r+0x1da>
   1d3d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d3da:	4f1d      	ldr	r7, [pc, #116]	; (1d450 <_dtoa_r+0x238>)
   1d3dc:	2b00      	cmp	r3, #0
   1d3de:	f43f af53 	beq.w	1d288 <_dtoa_r+0x70>
   1d3e2:	f107 0308 	add.w	r3, r7, #8
   1d3e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1d3e8:	4638      	mov	r0, r7
   1d3ea:	6013      	str	r3, [r2, #0]
   1d3ec:	b019      	add	sp, #100	; 0x64
   1d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d3f4:	4f17      	ldr	r7, [pc, #92]	; (1d454 <_dtoa_r+0x23c>)
   1d3f6:	2b00      	cmp	r3, #0
   1d3f8:	f43f af46 	beq.w	1d288 <_dtoa_r+0x70>
   1d3fc:	1cfb      	adds	r3, r7, #3
   1d3fe:	e7f2      	b.n	1d3e6 <_dtoa_r+0x1ce>
   1d400:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1d404:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1d408:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1d40c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1d410:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1d414:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1d418:	e760      	b.n	1d2dc <_dtoa_r+0xc4>
   1d41a:	4f0f      	ldr	r7, [pc, #60]	; (1d458 <_dtoa_r+0x240>)
   1d41c:	4638      	mov	r0, r7
   1d41e:	b019      	add	sp, #100	; 0x64
   1d420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d424:	f3af 8000 	nop.w
   1d428:	636f4361 	.word	0x636f4361
   1d42c:	3fd287a7 	.word	0x3fd287a7
   1d430:	8b60c8b3 	.word	0x8b60c8b3
   1d434:	3fc68a28 	.word	0x3fc68a28
   1d438:	509f79fb 	.word	0x509f79fb
   1d43c:	3fd34413 	.word	0x3fd34413
   1d440:	7ff00000 	.word	0x7ff00000
   1d444:	0004c64d 	.word	0x0004c64d
   1d448:	3ff80000 	.word	0x3ff80000
   1d44c:	0004a878 	.word	0x0004a878
   1d450:	0004c7f0 	.word	0x0004c7f0
   1d454:	0004c7fc 	.word	0x0004c7fc
   1d458:	0004c64c 	.word	0x0004c64c
   1d45c:	2300      	movs	r3, #0
   1d45e:	2201      	movs	r2, #1
   1d460:	461d      	mov	r5, r3
   1d462:	920c      	str	r2, [sp, #48]	; 0x30
   1d464:	f04f 32ff 	mov.w	r2, #4294967295
   1d468:	9300      	str	r3, [sp, #0]
   1d46a:	9304      	str	r3, [sp, #16]
   1d46c:	9207      	str	r2, [sp, #28]
   1d46e:	2100      	movs	r1, #0
   1d470:	9b07      	ldr	r3, [sp, #28]
   1d472:	6461      	str	r1, [r4, #68]	; 0x44
   1d474:	9311      	str	r3, [sp, #68]	; 0x44
   1d476:	4620      	mov	r0, r4
   1d478:	f028 fbf2 	bl	45c60 <_Balloc>
   1d47c:	9005      	str	r0, [sp, #20]
   1d47e:	6420      	str	r0, [r4, #64]	; 0x40
   1d480:	2d00      	cmp	r5, #0
   1d482:	f000 80e5 	beq.w	1d650 <_dtoa_r+0x438>
   1d486:	4650      	mov	r0, sl
   1d488:	4659      	mov	r1, fp
   1d48a:	f1b9 0f00 	cmp.w	r9, #0
   1d48e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1d492:	f340 831a 	ble.w	1daca <_dtoa_r+0x8b2>
   1d496:	4abb      	ldr	r2, [pc, #748]	; (1d784 <_dtoa_r+0x56c>)
   1d498:	f009 030f 	and.w	r3, r9, #15
   1d49c:	ea4f 1529 	mov.w	r5, r9, asr #4
   1d4a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d4a4:	e9d3 6700 	ldrd	r6, r7, [r3]
   1d4a8:	06eb      	lsls	r3, r5, #27
   1d4aa:	f140 81f8 	bpl.w	1d89e <_dtoa_r+0x686>
   1d4ae:	4bb6      	ldr	r3, [pc, #728]	; (1d788 <_dtoa_r+0x570>)
   1d4b0:	f005 050f 	and.w	r5, r5, #15
   1d4b4:	f04f 0a03 	mov.w	sl, #3
   1d4b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d4bc:	f7fb fa96 	bl	189ec <__aeabi_ddiv>
   1d4c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d4c4:	b195      	cbz	r5, 1d4ec <_dtoa_r+0x2d4>
   1d4c6:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 1d788 <_dtoa_r+0x570>
   1d4ca:	f015 0f01 	tst.w	r5, #1
   1d4ce:	4630      	mov	r0, r6
   1d4d0:	4639      	mov	r1, r7
   1d4d2:	d007      	beq.n	1d4e4 <_dtoa_r+0x2cc>
   1d4d4:	f10a 0a01 	add.w	sl, sl, #1
   1d4d8:	e9d8 2300 	ldrd	r2, r3, [r8]
   1d4dc:	f7fb f95c 	bl	18798 <__aeabi_dmul>
   1d4e0:	4606      	mov	r6, r0
   1d4e2:	460f      	mov	r7, r1
   1d4e4:	106d      	asrs	r5, r5, #1
   1d4e6:	f108 0808 	add.w	r8, r8, #8
   1d4ea:	d1ee      	bne.n	1d4ca <_dtoa_r+0x2b2>
   1d4ec:	4632      	mov	r2, r6
   1d4ee:	463b      	mov	r3, r7
   1d4f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d4f4:	f7fb fa7a 	bl	189ec <__aeabi_ddiv>
   1d4f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d4fe:	b143      	cbz	r3, 1d512 <_dtoa_r+0x2fa>
   1d500:	2200      	movs	r2, #0
   1d502:	4ba2      	ldr	r3, [pc, #648]	; (1d78c <_dtoa_r+0x574>)
   1d504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d508:	f7fb fbb8 	bl	18c7c <__aeabi_dcmplt>
   1d50c:	2800      	cmp	r0, #0
   1d50e:	f040 84ad 	bne.w	1de6c <_dtoa_r+0xc54>
   1d512:	4650      	mov	r0, sl
   1d514:	f7fb f8d6 	bl	186c4 <__aeabi_i2d>
   1d518:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d51c:	f7fb f93c 	bl	18798 <__aeabi_dmul>
   1d520:	4b9b      	ldr	r3, [pc, #620]	; (1d790 <_dtoa_r+0x578>)
   1d522:	2200      	movs	r2, #0
   1d524:	f7fa ff82 	bl	1842c <__adddf3>
   1d528:	9b07      	ldr	r3, [sp, #28]
   1d52a:	4682      	mov	sl, r0
   1d52c:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1d530:	2b00      	cmp	r3, #0
   1d532:	f000 81f6 	beq.w	1d922 <_dtoa_r+0x70a>
   1d536:	9b07      	ldr	r3, [sp, #28]
   1d538:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1d53c:	9315      	str	r3, [sp, #84]	; 0x54
   1d53e:	9b05      	ldr	r3, [sp, #20]
   1d540:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1d544:	1c5d      	adds	r5, r3, #1
   1d546:	4639      	mov	r1, r7
   1d548:	4630      	mov	r0, r6
   1d54a:	f7fb fbbf 	bl	18ccc <__aeabi_d2iz>
   1d54e:	4680      	mov	r8, r0
   1d550:	f7fb f8b8 	bl	186c4 <__aeabi_i2d>
   1d554:	4602      	mov	r2, r0
   1d556:	460b      	mov	r3, r1
   1d558:	4630      	mov	r0, r6
   1d55a:	4639      	mov	r1, r7
   1d55c:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1d560:	f7fa ff62 	bl	18428 <__aeabi_dsub>
   1d564:	4b87      	ldr	r3, [pc, #540]	; (1d784 <_dtoa_r+0x56c>)
   1d566:	460f      	mov	r7, r1
   1d568:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d56a:	4606      	mov	r6, r0
   1d56c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d56e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1d572:	fa5f f888 	uxtb.w	r8, r8
   1d576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d57a:	2800      	cmp	r0, #0
   1d57c:	f000 8363 	beq.w	1dc46 <_dtoa_r+0xa2e>
   1d580:	2000      	movs	r0, #0
   1d582:	4984      	ldr	r1, [pc, #528]	; (1d794 <_dtoa_r+0x57c>)
   1d584:	f7fb fa32 	bl	189ec <__aeabi_ddiv>
   1d588:	4652      	mov	r2, sl
   1d58a:	465b      	mov	r3, fp
   1d58c:	f7fa ff4c 	bl	18428 <__aeabi_dsub>
   1d590:	9a05      	ldr	r2, [sp, #20]
   1d592:	463b      	mov	r3, r7
   1d594:	4682      	mov	sl, r0
   1d596:	f882 8000 	strb.w	r8, [r2]
   1d59a:	4632      	mov	r2, r6
   1d59c:	468b      	mov	fp, r1
   1d59e:	f7fb fb8b 	bl	18cb8 <__aeabi_dcmpgt>
   1d5a2:	2800      	cmp	r0, #0
   1d5a4:	d14d      	bne.n	1d642 <_dtoa_r+0x42a>
   1d5a6:	4632      	mov	r2, r6
   1d5a8:	463b      	mov	r3, r7
   1d5aa:	2000      	movs	r0, #0
   1d5ac:	4977      	ldr	r1, [pc, #476]	; (1d78c <_dtoa_r+0x574>)
   1d5ae:	f7fa ff3b 	bl	18428 <__aeabi_dsub>
   1d5b2:	4652      	mov	r2, sl
   1d5b4:	465b      	mov	r3, fp
   1d5b6:	f7fb fb61 	bl	18c7c <__aeabi_dcmplt>
   1d5ba:	2800      	cmp	r0, #0
   1d5bc:	f040 84f9 	bne.w	1dfb2 <_dtoa_r+0xd9a>
   1d5c0:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d5c2:	2901      	cmp	r1, #1
   1d5c4:	d042      	beq.n	1d64c <_dtoa_r+0x434>
   1d5c6:	9a05      	ldr	r2, [sp, #20]
   1d5c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1d5cc:	4411      	add	r1, r2
   1d5ce:	4689      	mov	r9, r1
   1d5d0:	e00e      	b.n	1d5f0 <_dtoa_r+0x3d8>
   1d5d2:	4632      	mov	r2, r6
   1d5d4:	463b      	mov	r3, r7
   1d5d6:	2000      	movs	r0, #0
   1d5d8:	496c      	ldr	r1, [pc, #432]	; (1d78c <_dtoa_r+0x574>)
   1d5da:	f7fa ff25 	bl	18428 <__aeabi_dsub>
   1d5de:	4652      	mov	r2, sl
   1d5e0:	465b      	mov	r3, fp
   1d5e2:	f7fb fb4b 	bl	18c7c <__aeabi_dcmplt>
   1d5e6:	2800      	cmp	r0, #0
   1d5e8:	f040 84e3 	bne.w	1dfb2 <_dtoa_r+0xd9a>
   1d5ec:	454d      	cmp	r5, r9
   1d5ee:	d02b      	beq.n	1d648 <_dtoa_r+0x430>
   1d5f0:	4650      	mov	r0, sl
   1d5f2:	4659      	mov	r1, fp
   1d5f4:	2200      	movs	r2, #0
   1d5f6:	4b68      	ldr	r3, [pc, #416]	; (1d798 <_dtoa_r+0x580>)
   1d5f8:	f7fb f8ce 	bl	18798 <__aeabi_dmul>
   1d5fc:	2200      	movs	r2, #0
   1d5fe:	4b66      	ldr	r3, [pc, #408]	; (1d798 <_dtoa_r+0x580>)
   1d600:	4682      	mov	sl, r0
   1d602:	468b      	mov	fp, r1
   1d604:	4630      	mov	r0, r6
   1d606:	4639      	mov	r1, r7
   1d608:	f7fb f8c6 	bl	18798 <__aeabi_dmul>
   1d60c:	460f      	mov	r7, r1
   1d60e:	4606      	mov	r6, r0
   1d610:	f7fb fb5c 	bl	18ccc <__aeabi_d2iz>
   1d614:	4680      	mov	r8, r0
   1d616:	f7fb f855 	bl	186c4 <__aeabi_i2d>
   1d61a:	4602      	mov	r2, r0
   1d61c:	460b      	mov	r3, r1
   1d61e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1d622:	4630      	mov	r0, r6
   1d624:	4639      	mov	r1, r7
   1d626:	fa5f f888 	uxtb.w	r8, r8
   1d62a:	f7fa fefd 	bl	18428 <__aeabi_dsub>
   1d62e:	4652      	mov	r2, sl
   1d630:	465b      	mov	r3, fp
   1d632:	f805 8b01 	strb.w	r8, [r5], #1
   1d636:	4606      	mov	r6, r0
   1d638:	460f      	mov	r7, r1
   1d63a:	f7fb fb1f 	bl	18c7c <__aeabi_dcmplt>
   1d63e:	2800      	cmp	r0, #0
   1d640:	d0c7      	beq.n	1d5d2 <_dtoa_r+0x3ba>
   1d642:	9f05      	ldr	r7, [sp, #20]
   1d644:	9505      	str	r5, [sp, #20]
   1d646:	e089      	b.n	1d75c <_dtoa_r+0x544>
   1d648:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1d64c:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   1d650:	f1b9 0f0e 	cmp.w	r9, #14
   1d654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d656:	dc02      	bgt.n	1d65e <_dtoa_r+0x446>
   1d658:	2b00      	cmp	r3, #0
   1d65a:	f280 80ff 	bge.w	1d85c <_dtoa_r+0x644>
   1d65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d660:	2a00      	cmp	r2, #0
   1d662:	f040 80cc 	bne.w	1d7fe <_dtoa_r+0x5e6>
   1d666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d668:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d66a:	9f08      	ldr	r7, [sp, #32]
   1d66c:	930a      	str	r3, [sp, #40]	; 0x28
   1d66e:	2f00      	cmp	r7, #0
   1d670:	dd0c      	ble.n	1d68c <_dtoa_r+0x474>
   1d672:	9a06      	ldr	r2, [sp, #24]
   1d674:	2a00      	cmp	r2, #0
   1d676:	dd09      	ble.n	1d68c <_dtoa_r+0x474>
   1d678:	42ba      	cmp	r2, r7
   1d67a:	4613      	mov	r3, r2
   1d67c:	9908      	ldr	r1, [sp, #32]
   1d67e:	bfa8      	it	ge
   1d680:	463b      	movge	r3, r7
   1d682:	1ac9      	subs	r1, r1, r3
   1d684:	1aff      	subs	r7, r7, r3
   1d686:	1ad3      	subs	r3, r2, r3
   1d688:	9108      	str	r1, [sp, #32]
   1d68a:	9306      	str	r3, [sp, #24]
   1d68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d68e:	b16b      	cbz	r3, 1d6ac <_dtoa_r+0x494>
   1d690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d692:	2a00      	cmp	r2, #0
   1d694:	f000 83db 	beq.w	1de4e <_dtoa_r+0xc36>
   1d698:	1b9d      	subs	r5, r3, r6
   1d69a:	2e00      	cmp	r6, #0
   1d69c:	f040 840d 	bne.w	1deba <_dtoa_r+0xca2>
   1d6a0:	462a      	mov	r2, r5
   1d6a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d6a4:	4620      	mov	r0, r4
   1d6a6:	f028 fc9b 	bl	45fe0 <__pow5mult>
   1d6aa:	9009      	str	r0, [sp, #36]	; 0x24
   1d6ac:	2101      	movs	r1, #1
   1d6ae:	4620      	mov	r0, r4
   1d6b0:	f028 fbe4 	bl	45e7c <__i2b>
   1d6b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d6b6:	4606      	mov	r6, r0
   1d6b8:	2a00      	cmp	r2, #0
   1d6ba:	f040 8157 	bne.w	1d96c <_dtoa_r+0x754>
   1d6be:	9b00      	ldr	r3, [sp, #0]
   1d6c0:	2b01      	cmp	r3, #1
   1d6c2:	f340 8501 	ble.w	1e0c8 <_dtoa_r+0xeb0>
   1d6c6:	2001      	movs	r0, #1
   1d6c8:	9a06      	ldr	r2, [sp, #24]
   1d6ca:	4410      	add	r0, r2
   1d6cc:	f010 001f 	ands.w	r0, r0, #31
   1d6d0:	f000 8143 	beq.w	1d95a <_dtoa_r+0x742>
   1d6d4:	f1c0 0320 	rsb	r3, r0, #32
   1d6d8:	2b04      	cmp	r3, #4
   1d6da:	f340 84fb 	ble.w	1e0d4 <_dtoa_r+0xebc>
   1d6de:	f1c0 001c 	rsb	r0, r0, #28
   1d6e2:	9b08      	ldr	r3, [sp, #32]
   1d6e4:	4402      	add	r2, r0
   1d6e6:	4403      	add	r3, r0
   1d6e8:	4407      	add	r7, r0
   1d6ea:	9308      	str	r3, [sp, #32]
   1d6ec:	9206      	str	r2, [sp, #24]
   1d6ee:	9b08      	ldr	r3, [sp, #32]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	dd05      	ble.n	1d700 <_dtoa_r+0x4e8>
   1d6f4:	461a      	mov	r2, r3
   1d6f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d6f8:	4620      	mov	r0, r4
   1d6fa:	f028 fcc1 	bl	46080 <__lshift>
   1d6fe:	9009      	str	r0, [sp, #36]	; 0x24
   1d700:	9b06      	ldr	r3, [sp, #24]
   1d702:	2b00      	cmp	r3, #0
   1d704:	dd05      	ble.n	1d712 <_dtoa_r+0x4fa>
   1d706:	4631      	mov	r1, r6
   1d708:	461a      	mov	r2, r3
   1d70a:	4620      	mov	r0, r4
   1d70c:	f028 fcb8 	bl	46080 <__lshift>
   1d710:	4606      	mov	r6, r0
   1d712:	9b00      	ldr	r3, [sp, #0]
   1d714:	2b02      	cmp	r3, #2
   1d716:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d718:	bfd4      	ite	le
   1d71a:	f04f 0800 	movle.w	r8, #0
   1d71e:	f04f 0801 	movgt.w	r8, #1
   1d722:	2b00      	cmp	r3, #0
   1d724:	f040 821c 	bne.w	1db60 <_dtoa_r+0x948>
   1d728:	9b07      	ldr	r3, [sp, #28]
   1d72a:	2b00      	cmp	r3, #0
   1d72c:	f300 814a 	bgt.w	1d9c4 <_dtoa_r+0x7ac>
   1d730:	f1b8 0f00 	cmp.w	r8, #0
   1d734:	f000 8146 	beq.w	1d9c4 <_dtoa_r+0x7ac>
   1d738:	9b07      	ldr	r3, [sp, #28]
   1d73a:	2b00      	cmp	r3, #0
   1d73c:	f000 8379 	beq.w	1de32 <_dtoa_r+0xc1a>
   1d740:	9b04      	ldr	r3, [sp, #16]
   1d742:	9f05      	ldr	r7, [sp, #20]
   1d744:	43db      	mvns	r3, r3
   1d746:	930d      	str	r3, [sp, #52]	; 0x34
   1d748:	4631      	mov	r1, r6
   1d74a:	4620      	mov	r0, r4
   1d74c:	f028 faae 	bl	45cac <_Bfree>
   1d750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d752:	b11b      	cbz	r3, 1d75c <_dtoa_r+0x544>
   1d754:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d756:	4620      	mov	r0, r4
   1d758:	f028 faa8 	bl	45cac <_Bfree>
   1d75c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d75e:	4620      	mov	r0, r4
   1d760:	f028 faa4 	bl	45cac <_Bfree>
   1d764:	2200      	movs	r2, #0
   1d766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d768:	9905      	ldr	r1, [sp, #20]
   1d76a:	3301      	adds	r3, #1
   1d76c:	700a      	strb	r2, [r1, #0]
   1d76e:	9a03      	ldr	r2, [sp, #12]
   1d770:	6013      	str	r3, [r2, #0]
   1d772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d774:	2b00      	cmp	r3, #0
   1d776:	f43f ad87 	beq.w	1d288 <_dtoa_r+0x70>
   1d77a:	4638      	mov	r0, r7
   1d77c:	6019      	str	r1, [r3, #0]
   1d77e:	b019      	add	sp, #100	; 0x64
   1d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d784:	0004a878 	.word	0x0004a878
   1d788:	0004a850 	.word	0x0004a850
   1d78c:	3ff00000 	.word	0x3ff00000
   1d790:	401c0000 	.word	0x401c0000
   1d794:	3fe00000 	.word	0x3fe00000
   1d798:	40240000 	.word	0x40240000
   1d79c:	2301      	movs	r3, #1
   1d79e:	9310      	str	r3, [sp, #64]	; 0x40
   1d7a0:	e5de      	b.n	1d360 <_dtoa_r+0x148>
   1d7a2:	9b08      	ldr	r3, [sp, #32]
   1d7a4:	eba3 0309 	sub.w	r3, r3, r9
   1d7a8:	9308      	str	r3, [sp, #32]
   1d7aa:	f1c9 0300 	rsb	r3, r9, #0
   1d7ae:	930e      	str	r3, [sp, #56]	; 0x38
   1d7b0:	2300      	movs	r3, #0
   1d7b2:	930f      	str	r3, [sp, #60]	; 0x3c
   1d7b4:	e5e7      	b.n	1d386 <_dtoa_r+0x16e>
   1d7b6:	f1c5 0301 	rsb	r3, r5, #1
   1d7ba:	9308      	str	r3, [sp, #32]
   1d7bc:	2300      	movs	r3, #0
   1d7be:	9306      	str	r3, [sp, #24]
   1d7c0:	e5d6      	b.n	1d370 <_dtoa_r+0x158>
   1d7c2:	4648      	mov	r0, r9
   1d7c4:	f7fa ff7e 	bl	186c4 <__aeabi_i2d>
   1d7c8:	4632      	mov	r2, r6
   1d7ca:	463b      	mov	r3, r7
   1d7cc:	f7fb fa4c 	bl	18c68 <__aeabi_dcmpeq>
   1d7d0:	2800      	cmp	r0, #0
   1d7d2:	f47f adb1 	bne.w	1d338 <_dtoa_r+0x120>
   1d7d6:	f109 39ff 	add.w	r9, r9, #4294967295
   1d7da:	e5ad      	b.n	1d338 <_dtoa_r+0x120>
   1d7dc:	f1c3 0920 	rsb	r9, r3, #32
   1d7e0:	fa0a f009 	lsl.w	r0, sl, r9
   1d7e4:	e572      	b.n	1d2cc <_dtoa_r+0xb4>
   1d7e6:	2501      	movs	r5, #1
   1d7e8:	e5d6      	b.n	1d398 <_dtoa_r+0x180>
   1d7ea:	9010      	str	r0, [sp, #64]	; 0x40
   1d7ec:	e5b8      	b.n	1d360 <_dtoa_r+0x148>
   1d7ee:	2101      	movs	r1, #1
   1d7f0:	f04f 32ff 	mov.w	r2, #4294967295
   1d7f4:	910c      	str	r1, [sp, #48]	; 0x30
   1d7f6:	2100      	movs	r1, #0
   1d7f8:	9211      	str	r2, [sp, #68]	; 0x44
   1d7fa:	9104      	str	r1, [sp, #16]
   1d7fc:	9207      	str	r2, [sp, #28]
   1d7fe:	9a00      	ldr	r2, [sp, #0]
   1d800:	2a01      	cmp	r2, #1
   1d802:	f340 8372 	ble.w	1deea <_dtoa_r+0xcd2>
   1d806:	9b07      	ldr	r3, [sp, #28]
   1d808:	1e5e      	subs	r6, r3, #1
   1d80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d80c:	42b3      	cmp	r3, r6
   1d80e:	f2c0 837b 	blt.w	1df08 <_dtoa_r+0xcf0>
   1d812:	1b9e      	subs	r6, r3, r6
   1d814:	9b07      	ldr	r3, [sp, #28]
   1d816:	2b00      	cmp	r3, #0
   1d818:	f2c0 8398 	blt.w	1df4c <_dtoa_r+0xd34>
   1d81c:	9a06      	ldr	r2, [sp, #24]
   1d81e:	4611      	mov	r1, r2
   1d820:	9a08      	ldr	r2, [sp, #32]
   1d822:	4419      	add	r1, r3
   1d824:	4617      	mov	r7, r2
   1d826:	441a      	add	r2, r3
   1d828:	9106      	str	r1, [sp, #24]
   1d82a:	9208      	str	r2, [sp, #32]
   1d82c:	2101      	movs	r1, #1
   1d82e:	4620      	mov	r0, r4
   1d830:	f028 fb24 	bl	45e7c <__i2b>
   1d834:	900a      	str	r0, [sp, #40]	; 0x28
   1d836:	e71a      	b.n	1d66e <_dtoa_r+0x456>
   1d838:	2500      	movs	r5, #0
   1d83a:	4620      	mov	r0, r4
   1d83c:	6465      	str	r5, [r4, #68]	; 0x44
   1d83e:	4629      	mov	r1, r5
   1d840:	f028 fa0e 	bl	45c60 <_Balloc>
   1d844:	f1b9 0f0e 	cmp.w	r9, #14
   1d848:	9005      	str	r0, [sp, #20]
   1d84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d84c:	6420      	str	r0, [r4, #64]	; 0x40
   1d84e:	dcce      	bgt.n	1d7ee <_dtoa_r+0x5d6>
   1d850:	42ab      	cmp	r3, r5
   1d852:	dbcc      	blt.n	1d7ee <_dtoa_r+0x5d6>
   1d854:	f04f 33ff 	mov.w	r3, #4294967295
   1d858:	9504      	str	r5, [sp, #16]
   1d85a:	9307      	str	r3, [sp, #28]
   1d85c:	4bbc      	ldr	r3, [pc, #752]	; (1db50 <_dtoa_r+0x938>)
   1d85e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d862:	ed93 7b00 	vldr	d7, [r3]
   1d866:	9b04      	ldr	r3, [sp, #16]
   1d868:	2b00      	cmp	r3, #0
   1d86a:	ed8d 7b00 	vstr	d7, [sp]
   1d86e:	f280 8245 	bge.w	1dcfc <_dtoa_r+0xae4>
   1d872:	9e07      	ldr	r6, [sp, #28]
   1d874:	2e00      	cmp	r6, #0
   1d876:	f300 8241 	bgt.w	1dcfc <_dtoa_r+0xae4>
   1d87a:	2e00      	cmp	r6, #0
   1d87c:	d16a      	bne.n	1d954 <_dtoa_r+0x73c>
   1d87e:	2200      	movs	r2, #0
   1d880:	4bb4      	ldr	r3, [pc, #720]	; (1db54 <_dtoa_r+0x93c>)
   1d882:	ec51 0b17 	vmov	r0, r1, d7
   1d886:	f7fa ff87 	bl	18798 <__aeabi_dmul>
   1d88a:	4652      	mov	r2, sl
   1d88c:	465b      	mov	r3, fp
   1d88e:	f7fb fa09 	bl	18ca4 <__aeabi_dcmpge>
   1d892:	2800      	cmp	r0, #0
   1d894:	f000 8150 	beq.w	1db38 <_dtoa_r+0x920>
   1d898:	9e07      	ldr	r6, [sp, #28]
   1d89a:	960a      	str	r6, [sp, #40]	; 0x28
   1d89c:	e750      	b.n	1d740 <_dtoa_r+0x528>
   1d89e:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1d8a2:	f04f 0a02 	mov.w	sl, #2
   1d8a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1d8aa:	e60b      	b.n	1d4c4 <_dtoa_r+0x2ac>
   1d8ac:	2300      	movs	r3, #0
   1d8ae:	930c      	str	r3, [sp, #48]	; 0x30
   1d8b0:	9e04      	ldr	r6, [sp, #16]
   1d8b2:	2e00      	cmp	r6, #0
   1d8b4:	f340 821a 	ble.w	1dcec <_dtoa_r+0xad4>
   1d8b8:	9611      	str	r6, [sp, #68]	; 0x44
   1d8ba:	9607      	str	r6, [sp, #28]
   1d8bc:	9b07      	ldr	r3, [sp, #28]
   1d8be:	2100      	movs	r1, #0
   1d8c0:	2b0e      	cmp	r3, #14
   1d8c2:	bf8c      	ite	hi
   1d8c4:	2500      	movhi	r5, #0
   1d8c6:	f005 0501 	andls.w	r5, r5, #1
   1d8ca:	2e17      	cmp	r6, #23
   1d8cc:	6461      	str	r1, [r4, #68]	; 0x44
   1d8ce:	f77f add2 	ble.w	1d476 <_dtoa_r+0x25e>
   1d8d2:	2201      	movs	r2, #1
   1d8d4:	2304      	movs	r3, #4
   1d8d6:	005b      	lsls	r3, r3, #1
   1d8d8:	4611      	mov	r1, r2
   1d8da:	3201      	adds	r2, #1
   1d8dc:	f103 0014 	add.w	r0, r3, #20
   1d8e0:	42b0      	cmp	r0, r6
   1d8e2:	d9f8      	bls.n	1d8d6 <_dtoa_r+0x6be>
   1d8e4:	6461      	str	r1, [r4, #68]	; 0x44
   1d8e6:	e5c6      	b.n	1d476 <_dtoa_r+0x25e>
   1d8e8:	2300      	movs	r3, #0
   1d8ea:	930c      	str	r3, [sp, #48]	; 0x30
   1d8ec:	9b04      	ldr	r3, [sp, #16]
   1d8ee:	444b      	add	r3, r9
   1d8f0:	9311      	str	r3, [sp, #68]	; 0x44
   1d8f2:	3301      	adds	r3, #1
   1d8f4:	2b01      	cmp	r3, #1
   1d8f6:	461e      	mov	r6, r3
   1d8f8:	9307      	str	r3, [sp, #28]
   1d8fa:	bfb8      	it	lt
   1d8fc:	2601      	movlt	r6, #1
   1d8fe:	e7dd      	b.n	1d8bc <_dtoa_r+0x6a4>
   1d900:	2301      	movs	r3, #1
   1d902:	930c      	str	r3, [sp, #48]	; 0x30
   1d904:	e7d4      	b.n	1d8b0 <_dtoa_r+0x698>
   1d906:	4650      	mov	r0, sl
   1d908:	f7fa fedc 	bl	186c4 <__aeabi_i2d>
   1d90c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d910:	f7fa ff42 	bl	18798 <__aeabi_dmul>
   1d914:	2200      	movs	r2, #0
   1d916:	4b90      	ldr	r3, [pc, #576]	; (1db58 <_dtoa_r+0x940>)
   1d918:	f7fa fd88 	bl	1842c <__adddf3>
   1d91c:	4682      	mov	sl, r0
   1d91e:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1d922:	2200      	movs	r2, #0
   1d924:	4b8b      	ldr	r3, [pc, #556]	; (1db54 <_dtoa_r+0x93c>)
   1d926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d92a:	f7fa fd7d 	bl	18428 <__aeabi_dsub>
   1d92e:	4652      	mov	r2, sl
   1d930:	465b      	mov	r3, fp
   1d932:	4606      	mov	r6, r0
   1d934:	460f      	mov	r7, r1
   1d936:	f7fb f9bf 	bl	18cb8 <__aeabi_dcmpgt>
   1d93a:	2800      	cmp	r0, #0
   1d93c:	f040 80fb 	bne.w	1db36 <_dtoa_r+0x91e>
   1d940:	4630      	mov	r0, r6
   1d942:	4639      	mov	r1, r7
   1d944:	4652      	mov	r2, sl
   1d946:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1d94a:	f7fb f997 	bl	18c7c <__aeabi_dcmplt>
   1d94e:	2800      	cmp	r0, #0
   1d950:	f43f ae7c 	beq.w	1d64c <_dtoa_r+0x434>
   1d954:	2600      	movs	r6, #0
   1d956:	960a      	str	r6, [sp, #40]	; 0x28
   1d958:	e6f2      	b.n	1d740 <_dtoa_r+0x528>
   1d95a:	201c      	movs	r0, #28
   1d95c:	9b08      	ldr	r3, [sp, #32]
   1d95e:	4407      	add	r7, r0
   1d960:	4403      	add	r3, r0
   1d962:	9308      	str	r3, [sp, #32]
   1d964:	9b06      	ldr	r3, [sp, #24]
   1d966:	4403      	add	r3, r0
   1d968:	9306      	str	r3, [sp, #24]
   1d96a:	e6c0      	b.n	1d6ee <_dtoa_r+0x4d6>
   1d96c:	4601      	mov	r1, r0
   1d96e:	4620      	mov	r0, r4
   1d970:	f028 fb36 	bl	45fe0 <__pow5mult>
   1d974:	9b00      	ldr	r3, [sp, #0]
   1d976:	4606      	mov	r6, r0
   1d978:	2b01      	cmp	r3, #1
   1d97a:	f300 8161 	bgt.w	1dc40 <_dtoa_r+0xa28>
   1d97e:	f1ba 0f00 	cmp.w	sl, #0
   1d982:	f040 815d 	bne.w	1dc40 <_dtoa_r+0xa28>
   1d986:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1d98a:	2b00      	cmp	r3, #0
   1d98c:	f040 8313 	bne.w	1dfb6 <_dtoa_r+0xd9e>
   1d990:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1d994:	0d1b      	lsrs	r3, r3, #20
   1d996:	051b      	lsls	r3, r3, #20
   1d998:	b133      	cbz	r3, 1d9a8 <_dtoa_r+0x790>
   1d99a:	9b08      	ldr	r3, [sp, #32]
   1d99c:	3301      	adds	r3, #1
   1d99e:	9308      	str	r3, [sp, #32]
   1d9a0:	9b06      	ldr	r3, [sp, #24]
   1d9a2:	3301      	adds	r3, #1
   1d9a4:	9306      	str	r3, [sp, #24]
   1d9a6:	2301      	movs	r3, #1
   1d9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d9aa:	930f      	str	r3, [sp, #60]	; 0x3c
   1d9ac:	2a00      	cmp	r2, #0
   1d9ae:	f43f ae8a 	beq.w	1d6c6 <_dtoa_r+0x4ae>
   1d9b2:	6933      	ldr	r3, [r6, #16]
   1d9b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1d9b8:	6918      	ldr	r0, [r3, #16]
   1d9ba:	f028 fa0d 	bl	45dd8 <__hi0bits>
   1d9be:	f1c0 0020 	rsb	r0, r0, #32
   1d9c2:	e681      	b.n	1d6c8 <_dtoa_r+0x4b0>
   1d9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d9c6:	2b00      	cmp	r3, #0
   1d9c8:	f000 80e9 	beq.w	1db9e <_dtoa_r+0x986>
   1d9cc:	2f00      	cmp	r7, #0
   1d9ce:	dd05      	ble.n	1d9dc <_dtoa_r+0x7c4>
   1d9d0:	463a      	mov	r2, r7
   1d9d2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d9d4:	4620      	mov	r0, r4
   1d9d6:	f028 fb53 	bl	46080 <__lshift>
   1d9da:	900a      	str	r0, [sp, #40]	; 0x28
   1d9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d9de:	2b00      	cmp	r3, #0
   1d9e0:	f040 82f2 	bne.w	1dfc8 <_dtoa_r+0xdb0>
   1d9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d9e6:	9306      	str	r3, [sp, #24]
   1d9e8:	f00a 0201 	and.w	r2, sl, #1
   1d9ec:	9f05      	ldr	r7, [sp, #20]
   1d9ee:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   1d9f2:	46b0      	mov	r8, r6
   1d9f4:	1e7b      	subs	r3, r7, #1
   1d9f6:	9208      	str	r2, [sp, #32]
   1d9f8:	9a07      	ldr	r2, [sp, #28]
   1d9fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1d9fe:	441a      	add	r2, r3
   1da00:	f8dd a018 	ldr.w	sl, [sp, #24]
   1da04:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1da06:	9207      	str	r2, [sp, #28]
   1da08:	4641      	mov	r1, r8
   1da0a:	4630      	mov	r0, r6
   1da0c:	f026 fecc 	bl	447a8 <quorem>
   1da10:	4649      	mov	r1, r9
   1da12:	4683      	mov	fp, r0
   1da14:	4630      	mov	r0, r6
   1da16:	f028 fb8f 	bl	46138 <__mcmp>
   1da1a:	4652      	mov	r2, sl
   1da1c:	4605      	mov	r5, r0
   1da1e:	4641      	mov	r1, r8
   1da20:	4620      	mov	r0, r4
   1da22:	f028 fba5 	bl	46170 <__mdiff>
   1da26:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1da2a:	4602      	mov	r2, r0
   1da2c:	9304      	str	r3, [sp, #16]
   1da2e:	68c3      	ldr	r3, [r0, #12]
   1da30:	2b00      	cmp	r3, #0
   1da32:	d17e      	bne.n	1db32 <_dtoa_r+0x91a>
   1da34:	4601      	mov	r1, r0
   1da36:	9006      	str	r0, [sp, #24]
   1da38:	4630      	mov	r0, r6
   1da3a:	f028 fb7d 	bl	46138 <__mcmp>
   1da3e:	9a06      	ldr	r2, [sp, #24]
   1da40:	4603      	mov	r3, r0
   1da42:	4611      	mov	r1, r2
   1da44:	4620      	mov	r0, r4
   1da46:	9306      	str	r3, [sp, #24]
   1da48:	f028 f930 	bl	45cac <_Bfree>
   1da4c:	9b00      	ldr	r3, [sp, #0]
   1da4e:	461a      	mov	r2, r3
   1da50:	9b06      	ldr	r3, [sp, #24]
   1da52:	431a      	orrs	r2, r3
   1da54:	d103      	bne.n	1da5e <_dtoa_r+0x846>
   1da56:	9a08      	ldr	r2, [sp, #32]
   1da58:	2a00      	cmp	r2, #0
   1da5a:	f000 8305 	beq.w	1e068 <_dtoa_r+0xe50>
   1da5e:	2d00      	cmp	r5, #0
   1da60:	f2c0 8288 	blt.w	1df74 <_dtoa_r+0xd5c>
   1da64:	9a00      	ldr	r2, [sp, #0]
   1da66:	432a      	orrs	r2, r5
   1da68:	d103      	bne.n	1da72 <_dtoa_r+0x85a>
   1da6a:	9a08      	ldr	r2, [sp, #32]
   1da6c:	2a00      	cmp	r2, #0
   1da6e:	f000 8281 	beq.w	1df74 <_dtoa_r+0xd5c>
   1da72:	2b00      	cmp	r3, #0
   1da74:	f107 0501 	add.w	r5, r7, #1
   1da78:	f300 82bb 	bgt.w	1dff2 <_dtoa_r+0xdda>
   1da7c:	9b04      	ldr	r3, [sp, #16]
   1da7e:	703b      	strb	r3, [r7, #0]
   1da80:	9b07      	ldr	r3, [sp, #28]
   1da82:	42bb      	cmp	r3, r7
   1da84:	f000 82cd 	beq.w	1e022 <_dtoa_r+0xe0a>
   1da88:	4631      	mov	r1, r6
   1da8a:	2300      	movs	r3, #0
   1da8c:	220a      	movs	r2, #10
   1da8e:	4620      	mov	r0, r4
   1da90:	f028 f916 	bl	45cc0 <__multadd>
   1da94:	45d1      	cmp	r9, sl
   1da96:	4606      	mov	r6, r0
   1da98:	4649      	mov	r1, r9
   1da9a:	f04f 0300 	mov.w	r3, #0
   1da9e:	f04f 020a 	mov.w	r2, #10
   1daa2:	4620      	mov	r0, r4
   1daa4:	d00b      	beq.n	1dabe <_dtoa_r+0x8a6>
   1daa6:	f028 f90b 	bl	45cc0 <__multadd>
   1daaa:	4651      	mov	r1, sl
   1daac:	4681      	mov	r9, r0
   1daae:	2300      	movs	r3, #0
   1dab0:	220a      	movs	r2, #10
   1dab2:	4620      	mov	r0, r4
   1dab4:	f028 f904 	bl	45cc0 <__multadd>
   1dab8:	462f      	mov	r7, r5
   1daba:	4682      	mov	sl, r0
   1dabc:	e7a4      	b.n	1da08 <_dtoa_r+0x7f0>
   1dabe:	f028 f8ff 	bl	45cc0 <__multadd>
   1dac2:	462f      	mov	r7, r5
   1dac4:	4681      	mov	r9, r0
   1dac6:	4682      	mov	sl, r0
   1dac8:	e79e      	b.n	1da08 <_dtoa_r+0x7f0>
   1daca:	f000 81c7 	beq.w	1de5c <_dtoa_r+0xc44>
   1dace:	f1c9 0600 	rsb	r6, r9, #0
   1dad2:	4b1f      	ldr	r3, [pc, #124]	; (1db50 <_dtoa_r+0x938>)
   1dad4:	f006 020f 	and.w	r2, r6, #15
   1dad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1dadc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dae4:	f7fa fe58 	bl	18798 <__aeabi_dmul>
   1dae8:	1136      	asrs	r6, r6, #4
   1daea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1daee:	f000 82cf 	beq.w	1e090 <_dtoa_r+0xe78>
   1daf2:	4f1a      	ldr	r7, [pc, #104]	; (1db5c <_dtoa_r+0x944>)
   1daf4:	f04f 0c00 	mov.w	ip, #0
   1daf8:	f04f 0a02 	mov.w	sl, #2
   1dafc:	4602      	mov	r2, r0
   1dafe:	460b      	mov	r3, r1
   1db00:	f016 0f01 	tst.w	r6, #1
   1db04:	4610      	mov	r0, r2
   1db06:	4619      	mov	r1, r3
   1db08:	d008      	beq.n	1db1c <_dtoa_r+0x904>
   1db0a:	f10a 0a01 	add.w	sl, sl, #1
   1db0e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1db12:	f7fa fe41 	bl	18798 <__aeabi_dmul>
   1db16:	46ac      	mov	ip, r5
   1db18:	4602      	mov	r2, r0
   1db1a:	460b      	mov	r3, r1
   1db1c:	1076      	asrs	r6, r6, #1
   1db1e:	f107 0708 	add.w	r7, r7, #8
   1db22:	d1ed      	bne.n	1db00 <_dtoa_r+0x8e8>
   1db24:	f1bc 0f00 	cmp.w	ip, #0
   1db28:	f43f ace8 	beq.w	1d4fc <_dtoa_r+0x2e4>
   1db2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1db30:	e4e4      	b.n	1d4fc <_dtoa_r+0x2e4>
   1db32:	2301      	movs	r3, #1
   1db34:	e785      	b.n	1da42 <_dtoa_r+0x82a>
   1db36:	2600      	movs	r6, #0
   1db38:	960a      	str	r6, [sp, #40]	; 0x28
   1db3a:	f109 0201 	add.w	r2, r9, #1
   1db3e:	2331      	movs	r3, #49	; 0x31
   1db40:	920d      	str	r2, [sp, #52]	; 0x34
   1db42:	9a05      	ldr	r2, [sp, #20]
   1db44:	7013      	strb	r3, [r2, #0]
   1db46:	1c53      	adds	r3, r2, #1
   1db48:	4617      	mov	r7, r2
   1db4a:	9305      	str	r3, [sp, #20]
   1db4c:	e5fc      	b.n	1d748 <_dtoa_r+0x530>
   1db4e:	bf00      	nop
   1db50:	0004a878 	.word	0x0004a878
   1db54:	40140000 	.word	0x40140000
   1db58:	401c0000 	.word	0x401c0000
   1db5c:	0004a850 	.word	0x0004a850
   1db60:	4631      	mov	r1, r6
   1db62:	9809      	ldr	r0, [sp, #36]	; 0x24
   1db64:	f028 fae8 	bl	46138 <__mcmp>
   1db68:	2800      	cmp	r0, #0
   1db6a:	f6bf addd 	bge.w	1d728 <_dtoa_r+0x510>
   1db6e:	2300      	movs	r3, #0
   1db70:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1db72:	9909      	ldr	r1, [sp, #36]	; 0x24
   1db74:	220a      	movs	r2, #10
   1db76:	4620      	mov	r0, r4
   1db78:	429d      	cmp	r5, r3
   1db7a:	bfcc      	ite	gt
   1db7c:	2500      	movgt	r5, #0
   1db7e:	f008 0501 	andle.w	r5, r8, #1
   1db82:	f028 f89d 	bl	45cc0 <__multadd>
   1db86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1db88:	f109 39ff 	add.w	r9, r9, #4294967295
   1db8c:	9009      	str	r0, [sp, #36]	; 0x24
   1db8e:	2b00      	cmp	r3, #0
   1db90:	f040 8282 	bne.w	1e098 <_dtoa_r+0xe80>
   1db94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1db96:	9307      	str	r3, [sp, #28]
   1db98:	2d00      	cmp	r5, #0
   1db9a:	f47f adcd 	bne.w	1d738 <_dtoa_r+0x520>
   1db9e:	f8dd a014 	ldr.w	sl, [sp, #20]
   1dba2:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1dba6:	4655      	mov	r5, sl
   1dba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1dbaa:	e002      	b.n	1dbb2 <_dtoa_r+0x99a>
   1dbac:	f028 f888 	bl	45cc0 <__multadd>
   1dbb0:	4607      	mov	r7, r0
   1dbb2:	4631      	mov	r1, r6
   1dbb4:	4638      	mov	r0, r7
   1dbb6:	f026 fdf7 	bl	447a8 <quorem>
   1dbba:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1dbbe:	2300      	movs	r3, #0
   1dbc0:	220a      	movs	r2, #10
   1dbc2:	f805 8b01 	strb.w	r8, [r5], #1
   1dbc6:	eba5 0c0a 	sub.w	ip, r5, sl
   1dbca:	4639      	mov	r1, r7
   1dbcc:	4620      	mov	r0, r4
   1dbce:	45dc      	cmp	ip, fp
   1dbd0:	dbec      	blt.n	1dbac <_dtoa_r+0x994>
   1dbd2:	f04f 0a00 	mov.w	sl, #0
   1dbd6:	9709      	str	r7, [sp, #36]	; 0x24
   1dbd8:	2201      	movs	r2, #1
   1dbda:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dbdc:	4620      	mov	r0, r4
   1dbde:	f028 fa4f 	bl	46080 <__lshift>
   1dbe2:	4631      	mov	r1, r6
   1dbe4:	9009      	str	r0, [sp, #36]	; 0x24
   1dbe6:	f028 faa7 	bl	46138 <__mcmp>
   1dbea:	2800      	cmp	r0, #0
   1dbec:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1dbf0:	f340 81b0 	ble.w	1df54 <_dtoa_r+0xd3c>
   1dbf4:	9905      	ldr	r1, [sp, #20]
   1dbf6:	e005      	b.n	1dc04 <_dtoa_r+0x9ec>
   1dbf8:	428b      	cmp	r3, r1
   1dbfa:	f000 81a0 	beq.w	1df3e <_dtoa_r+0xd26>
   1dbfe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   1dc02:	461d      	mov	r5, r3
   1dc04:	2a39      	cmp	r2, #57	; 0x39
   1dc06:	f105 33ff 	add.w	r3, r5, #4294967295
   1dc0a:	d0f5      	beq.n	1dbf8 <_dtoa_r+0x9e0>
   1dc0c:	3201      	adds	r2, #1
   1dc0e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1dc12:	701a      	strb	r2, [r3, #0]
   1dc14:	4631      	mov	r1, r6
   1dc16:	4620      	mov	r0, r4
   1dc18:	f028 f848 	bl	45cac <_Bfree>
   1dc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dc1e:	2b00      	cmp	r3, #0
   1dc20:	f43f ad0f 	beq.w	1d642 <_dtoa_r+0x42a>
   1dc24:	f1ba 0f00 	cmp.w	sl, #0
   1dc28:	f000 824a 	beq.w	1e0c0 <_dtoa_r+0xea8>
   1dc2c:	459a      	cmp	sl, r3
   1dc2e:	f000 8247 	beq.w	1e0c0 <_dtoa_r+0xea8>
   1dc32:	4651      	mov	r1, sl
   1dc34:	4620      	mov	r0, r4
   1dc36:	9f05      	ldr	r7, [sp, #20]
   1dc38:	f028 f838 	bl	45cac <_Bfree>
   1dc3c:	9505      	str	r5, [sp, #20]
   1dc3e:	e589      	b.n	1d754 <_dtoa_r+0x53c>
   1dc40:	2300      	movs	r3, #0
   1dc42:	930f      	str	r3, [sp, #60]	; 0x3c
   1dc44:	e6b5      	b.n	1d9b2 <_dtoa_r+0x79a>
   1dc46:	4650      	mov	r0, sl
   1dc48:	4659      	mov	r1, fp
   1dc4a:	f7fa fda5 	bl	18798 <__aeabi_dmul>
   1dc4e:	9b05      	ldr	r3, [sp, #20]
   1dc50:	f883 8000 	strb.w	r8, [r3]
   1dc54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1dc56:	2b01      	cmp	r3, #1
   1dc58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1dc5c:	d026      	beq.n	1dcac <_dtoa_r+0xa94>
   1dc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1dc60:	f04f 0a00 	mov.w	sl, #0
   1dc64:	9a05      	ldr	r2, [sp, #20]
   1dc66:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
   1dc6a:	4413      	add	r3, r2
   1dc6c:	f8df b350 	ldr.w	fp, [pc, #848]	; 1dfc0 <_dtoa_r+0xda8>
   1dc70:	4699      	mov	r9, r3
   1dc72:	4652      	mov	r2, sl
   1dc74:	465b      	mov	r3, fp
   1dc76:	4630      	mov	r0, r6
   1dc78:	4639      	mov	r1, r7
   1dc7a:	f7fa fd8d 	bl	18798 <__aeabi_dmul>
   1dc7e:	460f      	mov	r7, r1
   1dc80:	4606      	mov	r6, r0
   1dc82:	f7fb f823 	bl	18ccc <__aeabi_d2iz>
   1dc86:	4680      	mov	r8, r0
   1dc88:	f7fa fd1c 	bl	186c4 <__aeabi_i2d>
   1dc8c:	4602      	mov	r2, r0
   1dc8e:	460b      	mov	r3, r1
   1dc90:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1dc94:	4630      	mov	r0, r6
   1dc96:	4639      	mov	r1, r7
   1dc98:	f7fa fbc6 	bl	18428 <__aeabi_dsub>
   1dc9c:	f805 8b01 	strb.w	r8, [r5], #1
   1dca0:	454d      	cmp	r5, r9
   1dca2:	4606      	mov	r6, r0
   1dca4:	460f      	mov	r7, r1
   1dca6:	d1e4      	bne.n	1dc72 <_dtoa_r+0xa5a>
   1dca8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   1dcac:	2200      	movs	r2, #0
   1dcae:	4bc3      	ldr	r3, [pc, #780]	; (1dfbc <_dtoa_r+0xda4>)
   1dcb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1dcb4:	f7fa fbba 	bl	1842c <__adddf3>
   1dcb8:	4632      	mov	r2, r6
   1dcba:	463b      	mov	r3, r7
   1dcbc:	f7fa ffde 	bl	18c7c <__aeabi_dcmplt>
   1dcc0:	2800      	cmp	r0, #0
   1dcc2:	f040 809f 	bne.w	1de04 <_dtoa_r+0xbec>
   1dcc6:	2000      	movs	r0, #0
   1dcc8:	49bc      	ldr	r1, [pc, #752]	; (1dfbc <_dtoa_r+0xda4>)
   1dcca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dcce:	f7fa fbab 	bl	18428 <__aeabi_dsub>
   1dcd2:	4632      	mov	r2, r6
   1dcd4:	463b      	mov	r3, r7
   1dcd6:	f7fa ffef 	bl	18cb8 <__aeabi_dcmpgt>
   1dcda:	b908      	cbnz	r0, 1dce0 <_dtoa_r+0xac8>
   1dcdc:	e4b6      	b.n	1d64c <_dtoa_r+0x434>
   1dcde:	4615      	mov	r5, r2
   1dce0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1dce4:	1e6a      	subs	r2, r5, #1
   1dce6:	2b30      	cmp	r3, #48	; 0x30
   1dce8:	d0f9      	beq.n	1dcde <_dtoa_r+0xac6>
   1dcea:	e4aa      	b.n	1d642 <_dtoa_r+0x42a>
   1dcec:	2301      	movs	r3, #1
   1dcee:	9304      	str	r3, [sp, #16]
   1dcf0:	9307      	str	r3, [sp, #28]
   1dcf2:	f7ff bbbc 	b.w	1d46e <_dtoa_r+0x256>
   1dcf6:	2301      	movs	r3, #1
   1dcf8:	930c      	str	r3, [sp, #48]	; 0x30
   1dcfa:	e5f7      	b.n	1d8ec <_dtoa_r+0x6d4>
   1dcfc:	e9dd 6700 	ldrd	r6, r7, [sp]
   1dd00:	4650      	mov	r0, sl
   1dd02:	4659      	mov	r1, fp
   1dd04:	4632      	mov	r2, r6
   1dd06:	463b      	mov	r3, r7
   1dd08:	f7fa fe70 	bl	189ec <__aeabi_ddiv>
   1dd0c:	9b05      	ldr	r3, [sp, #20]
   1dd0e:	1c5d      	adds	r5, r3, #1
   1dd10:	f7fa ffdc 	bl	18ccc <__aeabi_d2iz>
   1dd14:	4680      	mov	r8, r0
   1dd16:	f7fa fcd5 	bl	186c4 <__aeabi_i2d>
   1dd1a:	4632      	mov	r2, r6
   1dd1c:	463b      	mov	r3, r7
   1dd1e:	f7fa fd3b 	bl	18798 <__aeabi_dmul>
   1dd22:	4602      	mov	r2, r0
   1dd24:	460b      	mov	r3, r1
   1dd26:	4650      	mov	r0, sl
   1dd28:	4659      	mov	r1, fp
   1dd2a:	f7fa fb7d 	bl	18428 <__aeabi_dsub>
   1dd2e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1dd32:	9a05      	ldr	r2, [sp, #20]
   1dd34:	4606      	mov	r6, r0
   1dd36:	460f      	mov	r7, r1
   1dd38:	7013      	strb	r3, [r2, #0]
   1dd3a:	9b07      	ldr	r3, [sp, #28]
   1dd3c:	2b01      	cmp	r3, #1
   1dd3e:	d045      	beq.n	1ddcc <_dtoa_r+0xbb4>
   1dd40:	2200      	movs	r2, #0
   1dd42:	4b9f      	ldr	r3, [pc, #636]	; (1dfc0 <_dtoa_r+0xda8>)
   1dd44:	f7fa fd28 	bl	18798 <__aeabi_dmul>
   1dd48:	2200      	movs	r2, #0
   1dd4a:	2300      	movs	r3, #0
   1dd4c:	4606      	mov	r6, r0
   1dd4e:	460f      	mov	r7, r1
   1dd50:	f7fa ff8a 	bl	18c68 <__aeabi_dcmpeq>
   1dd54:	2800      	cmp	r0, #0
   1dd56:	f040 80e2 	bne.w	1df1e <_dtoa_r+0xd06>
   1dd5a:	f8cd 9010 	str.w	r9, [sp, #16]
   1dd5e:	f04f 0a00 	mov.w	sl, #0
   1dd62:	9406      	str	r4, [sp, #24]
   1dd64:	f8df b258 	ldr.w	fp, [pc, #600]	; 1dfc0 <_dtoa_r+0xda8>
   1dd68:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1dd6c:	9c05      	ldr	r4, [sp, #20]
   1dd6e:	e00a      	b.n	1dd86 <_dtoa_r+0xb6e>
   1dd70:	f7fa fd12 	bl	18798 <__aeabi_dmul>
   1dd74:	2200      	movs	r2, #0
   1dd76:	2300      	movs	r3, #0
   1dd78:	4606      	mov	r6, r0
   1dd7a:	460f      	mov	r7, r1
   1dd7c:	f7fa ff74 	bl	18c68 <__aeabi_dcmpeq>
   1dd80:	2800      	cmp	r0, #0
   1dd82:	f040 80c9 	bne.w	1df18 <_dtoa_r+0xd00>
   1dd86:	4630      	mov	r0, r6
   1dd88:	4639      	mov	r1, r7
   1dd8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1dd8e:	f7fa fe2d 	bl	189ec <__aeabi_ddiv>
   1dd92:	f7fa ff9b 	bl	18ccc <__aeabi_d2iz>
   1dd96:	4680      	mov	r8, r0
   1dd98:	f7fa fc94 	bl	186c4 <__aeabi_i2d>
   1dd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1dda0:	f7fa fcfa 	bl	18798 <__aeabi_dmul>
   1dda4:	4602      	mov	r2, r0
   1dda6:	460b      	mov	r3, r1
   1dda8:	4630      	mov	r0, r6
   1ddaa:	4639      	mov	r1, r7
   1ddac:	f7fa fb3c 	bl	18428 <__aeabi_dsub>
   1ddb0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1ddb4:	4606      	mov	r6, r0
   1ddb6:	460f      	mov	r7, r1
   1ddb8:	f805 3b01 	strb.w	r3, [r5], #1
   1ddbc:	1b2b      	subs	r3, r5, r4
   1ddbe:	4652      	mov	r2, sl
   1ddc0:	454b      	cmp	r3, r9
   1ddc2:	465b      	mov	r3, fp
   1ddc4:	d1d4      	bne.n	1dd70 <_dtoa_r+0xb58>
   1ddc6:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1ddca:	9c06      	ldr	r4, [sp, #24]
   1ddcc:	4632      	mov	r2, r6
   1ddce:	463b      	mov	r3, r7
   1ddd0:	4630      	mov	r0, r6
   1ddd2:	4639      	mov	r1, r7
   1ddd4:	f7fa fb2a 	bl	1842c <__adddf3>
   1ddd8:	4606      	mov	r6, r0
   1ddda:	460f      	mov	r7, r1
   1dddc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1dde0:	f7fa ff6a 	bl	18cb8 <__aeabi_dcmpgt>
   1dde4:	b960      	cbnz	r0, 1de00 <_dtoa_r+0xbe8>
   1dde6:	4630      	mov	r0, r6
   1dde8:	4639      	mov	r1, r7
   1ddea:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ddee:	f7fa ff3b 	bl	18c68 <__aeabi_dcmpeq>
   1ddf2:	2800      	cmp	r0, #0
   1ddf4:	f000 8093 	beq.w	1df1e <_dtoa_r+0xd06>
   1ddf8:	f018 0f01 	tst.w	r8, #1
   1ddfc:	f000 808f 	beq.w	1df1e <_dtoa_r+0xd06>
   1de00:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1de04:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1de08:	9a05      	ldr	r2, [sp, #20]
   1de0a:	e005      	b.n	1de18 <_dtoa_r+0xc00>
   1de0c:	4293      	cmp	r3, r2
   1de0e:	f000 808b 	beq.w	1df28 <_dtoa_r+0xd10>
   1de12:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   1de16:	461d      	mov	r5, r3
   1de18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1de1c:	f105 33ff 	add.w	r3, r5, #4294967295
   1de20:	d0f4      	beq.n	1de0c <_dtoa_r+0xbf4>
   1de22:	9205      	str	r2, [sp, #20]
   1de24:	f108 0801 	add.w	r8, r8, #1
   1de28:	9f05      	ldr	r7, [sp, #20]
   1de2a:	9505      	str	r5, [sp, #20]
   1de2c:	f883 8000 	strb.w	r8, [r3]
   1de30:	e494      	b.n	1d75c <_dtoa_r+0x544>
   1de32:	4631      	mov	r1, r6
   1de34:	2205      	movs	r2, #5
   1de36:	4620      	mov	r0, r4
   1de38:	f027 ff42 	bl	45cc0 <__multadd>
   1de3c:	4601      	mov	r1, r0
   1de3e:	4606      	mov	r6, r0
   1de40:	9809      	ldr	r0, [sp, #36]	; 0x24
   1de42:	f028 f979 	bl	46138 <__mcmp>
   1de46:	2800      	cmp	r0, #0
   1de48:	f73f ae77 	bgt.w	1db3a <_dtoa_r+0x922>
   1de4c:	e478      	b.n	1d740 <_dtoa_r+0x528>
   1de4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1de50:	4620      	mov	r0, r4
   1de52:	9909      	ldr	r1, [sp, #36]	; 0x24
   1de54:	f028 f8c4 	bl	45fe0 <__pow5mult>
   1de58:	9009      	str	r0, [sp, #36]	; 0x24
   1de5a:	e427      	b.n	1d6ac <_dtoa_r+0x494>
   1de5c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1de60:	f04f 0a02 	mov.w	sl, #2
   1de64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1de68:	f7ff bb48 	b.w	1d4fc <_dtoa_r+0x2e4>
   1de6c:	9b07      	ldr	r3, [sp, #28]
   1de6e:	2b00      	cmp	r3, #0
   1de70:	f43f ad49 	beq.w	1d906 <_dtoa_r+0x6ee>
   1de74:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1de76:	2d00      	cmp	r5, #0
   1de78:	f77f abe8 	ble.w	1d64c <_dtoa_r+0x434>
   1de7c:	f109 33ff 	add.w	r3, r9, #4294967295
   1de80:	2200      	movs	r2, #0
   1de82:	930d      	str	r3, [sp, #52]	; 0x34
   1de84:	4b4e      	ldr	r3, [pc, #312]	; (1dfc0 <_dtoa_r+0xda8>)
   1de86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1de8a:	f7fa fc85 	bl	18798 <__aeabi_dmul>
   1de8e:	4606      	mov	r6, r0
   1de90:	460f      	mov	r7, r1
   1de92:	f10a 0001 	add.w	r0, sl, #1
   1de96:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   1de9a:	f7fa fc13 	bl	186c4 <__aeabi_i2d>
   1de9e:	4632      	mov	r2, r6
   1dea0:	463b      	mov	r3, r7
   1dea2:	f7fa fc79 	bl	18798 <__aeabi_dmul>
   1dea6:	2200      	movs	r2, #0
   1dea8:	4b46      	ldr	r3, [pc, #280]	; (1dfc4 <_dtoa_r+0xdac>)
   1deaa:	f7fa fabf 	bl	1842c <__adddf3>
   1deae:	9515      	str	r5, [sp, #84]	; 0x54
   1deb0:	4682      	mov	sl, r0
   1deb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1deb6:	f7ff bb42 	b.w	1d53e <_dtoa_r+0x326>
   1deba:	4632      	mov	r2, r6
   1debc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1debe:	4620      	mov	r0, r4
   1dec0:	f028 f88e 	bl	45fe0 <__pow5mult>
   1dec4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1dec8:	4601      	mov	r1, r0
   1deca:	900a      	str	r0, [sp, #40]	; 0x28
   1decc:	4642      	mov	r2, r8
   1dece:	4620      	mov	r0, r4
   1ded0:	f027 ffde 	bl	45e90 <__multiply>
   1ded4:	4606      	mov	r6, r0
   1ded6:	4641      	mov	r1, r8
   1ded8:	4620      	mov	r0, r4
   1deda:	f027 fee7 	bl	45cac <_Bfree>
   1dede:	9609      	str	r6, [sp, #36]	; 0x24
   1dee0:	2d00      	cmp	r5, #0
   1dee2:	f43f abe3 	beq.w	1d6ac <_dtoa_r+0x494>
   1dee6:	f7ff bbdb 	b.w	1d6a0 <_dtoa_r+0x488>
   1deea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1deec:	2a00      	cmp	r2, #0
   1deee:	d059      	beq.n	1dfa4 <_dtoa_r+0xd8c>
   1def0:	9908      	ldr	r1, [sp, #32]
   1def2:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1def6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1def8:	460f      	mov	r7, r1
   1defa:	9a06      	ldr	r2, [sp, #24]
   1defc:	441a      	add	r2, r3
   1defe:	9206      	str	r2, [sp, #24]
   1df00:	460a      	mov	r2, r1
   1df02:	441a      	add	r2, r3
   1df04:	9208      	str	r2, [sp, #32]
   1df06:	e491      	b.n	1d82c <_dtoa_r+0x614>
   1df08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1df0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1df0c:	1af3      	subs	r3, r6, r3
   1df0e:	960e      	str	r6, [sp, #56]	; 0x38
   1df10:	2600      	movs	r6, #0
   1df12:	441a      	add	r2, r3
   1df14:	920f      	str	r2, [sp, #60]	; 0x3c
   1df16:	e47d      	b.n	1d814 <_dtoa_r+0x5fc>
   1df18:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1df1c:	9c06      	ldr	r4, [sp, #24]
   1df1e:	9f05      	ldr	r7, [sp, #20]
   1df20:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1df24:	9505      	str	r5, [sp, #20]
   1df26:	e419      	b.n	1d75c <_dtoa_r+0x544>
   1df28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1df2a:	4611      	mov	r1, r2
   1df2c:	9205      	str	r2, [sp, #20]
   1df2e:	2230      	movs	r2, #48	; 0x30
   1df30:	3301      	adds	r3, #1
   1df32:	700a      	strb	r2, [r1, #0]
   1df34:	930d      	str	r3, [sp, #52]	; 0x34
   1df36:	460b      	mov	r3, r1
   1df38:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1df3c:	e772      	b.n	1de24 <_dtoa_r+0xc0c>
   1df3e:	f109 0201 	add.w	r2, r9, #1
   1df42:	2331      	movs	r3, #49	; 0x31
   1df44:	920d      	str	r2, [sp, #52]	; 0x34
   1df46:	9a05      	ldr	r2, [sp, #20]
   1df48:	7013      	strb	r3, [r2, #0]
   1df4a:	e663      	b.n	1dc14 <_dtoa_r+0x9fc>
   1df4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   1df50:	1a9f      	subs	r7, r3, r2
   1df52:	e46b      	b.n	1d82c <_dtoa_r+0x614>
   1df54:	d107      	bne.n	1df66 <_dtoa_r+0xd4e>
   1df56:	f018 0f01 	tst.w	r8, #1
   1df5a:	f47f ae4b 	bne.w	1dbf4 <_dtoa_r+0x9dc>
   1df5e:	e002      	b.n	1df66 <_dtoa_r+0xd4e>
   1df60:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   1df64:	461d      	mov	r5, r3
   1df66:	2a30      	cmp	r2, #48	; 0x30
   1df68:	f105 33ff 	add.w	r3, r5, #4294967295
   1df6c:	d0f8      	beq.n	1df60 <_dtoa_r+0xd48>
   1df6e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1df72:	e64f      	b.n	1dc14 <_dtoa_r+0x9fc>
   1df74:	2b00      	cmp	r3, #0
   1df76:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1df7a:	4631      	mov	r1, r6
   1df7c:	9609      	str	r6, [sp, #36]	; 0x24
   1df7e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1df82:	4646      	mov	r6, r8
   1df84:	f8cd a018 	str.w	sl, [sp, #24]
   1df88:	f107 0501 	add.w	r5, r7, #1
   1df8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1df90:	dc52      	bgt.n	1e038 <_dtoa_r+0xe20>
   1df92:	9b06      	ldr	r3, [sp, #24]
   1df94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1df98:	f887 8000 	strb.w	r8, [r7]
   1df9c:	930a      	str	r3, [sp, #40]	; 0x28
   1df9e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1dfa2:	e637      	b.n	1dc14 <_dtoa_r+0x9fc>
   1dfa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dfa6:	9908      	ldr	r1, [sp, #32]
   1dfa8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1dfaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1dfae:	460f      	mov	r7, r1
   1dfb0:	e7a3      	b.n	1defa <_dtoa_r+0xce2>
   1dfb2:	9a05      	ldr	r2, [sp, #20]
   1dfb4:	e730      	b.n	1de18 <_dtoa_r+0xc00>
   1dfb6:	2300      	movs	r3, #0
   1dfb8:	e4f6      	b.n	1d9a8 <_dtoa_r+0x790>
   1dfba:	bf00      	nop
   1dfbc:	3fe00000 	.word	0x3fe00000
   1dfc0:	40240000 	.word	0x40240000
   1dfc4:	401c0000 	.word	0x401c0000
   1dfc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1dfca:	4620      	mov	r0, r4
   1dfcc:	6879      	ldr	r1, [r7, #4]
   1dfce:	f027 fe47 	bl	45c60 <_Balloc>
   1dfd2:	693b      	ldr	r3, [r7, #16]
   1dfd4:	4605      	mov	r5, r0
   1dfd6:	f107 010c 	add.w	r1, r7, #12
   1dfda:	3302      	adds	r3, #2
   1dfdc:	300c      	adds	r0, #12
   1dfde:	009a      	lsls	r2, r3, #2
   1dfe0:	f7fb ff66 	bl	19eb0 <memcpy>
   1dfe4:	4629      	mov	r1, r5
   1dfe6:	2201      	movs	r2, #1
   1dfe8:	4620      	mov	r0, r4
   1dfea:	f028 f849 	bl	46080 <__lshift>
   1dfee:	9006      	str	r0, [sp, #24]
   1dff0:	e4fa      	b.n	1d9e8 <_dtoa_r+0x7d0>
   1dff2:	9609      	str	r6, [sp, #36]	; 0x24
   1dff4:	4646      	mov	r6, r8
   1dff6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1dffa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1dffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e002:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e006:	f8cd a018 	str.w	sl, [sp, #24]
   1e00a:	d025      	beq.n	1e058 <_dtoa_r+0xe40>
   1e00c:	f108 0801 	add.w	r8, r8, #1
   1e010:	9b06      	ldr	r3, [sp, #24]
   1e012:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1e016:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1e01a:	930a      	str	r3, [sp, #40]	; 0x28
   1e01c:	f887 8000 	strb.w	r8, [r7]
   1e020:	e5f8      	b.n	1dc14 <_dtoa_r+0x9fc>
   1e022:	464a      	mov	r2, r9
   1e024:	4653      	mov	r3, sl
   1e026:	9609      	str	r6, [sp, #36]	; 0x24
   1e028:	4646      	mov	r6, r8
   1e02a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e02e:	4692      	mov	sl, r2
   1e030:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e034:	930a      	str	r3, [sp, #40]	; 0x28
   1e036:	e5cf      	b.n	1dbd8 <_dtoa_r+0x9c0>
   1e038:	2201      	movs	r2, #1
   1e03a:	4620      	mov	r0, r4
   1e03c:	f028 f820 	bl	46080 <__lshift>
   1e040:	4631      	mov	r1, r6
   1e042:	9009      	str	r0, [sp, #36]	; 0x24
   1e044:	f028 f878 	bl	46138 <__mcmp>
   1e048:	2800      	cmp	r0, #0
   1e04a:	dd32      	ble.n	1e0b2 <_dtoa_r+0xe9a>
   1e04c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e050:	d002      	beq.n	1e058 <_dtoa_r+0xe40>
   1e052:	f10b 0831 	add.w	r8, fp, #49	; 0x31
   1e056:	e79c      	b.n	1df92 <_dtoa_r+0xd7a>
   1e058:	2239      	movs	r2, #57	; 0x39
   1e05a:	9b06      	ldr	r3, [sp, #24]
   1e05c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1e060:	703a      	strb	r2, [r7, #0]
   1e062:	930a      	str	r3, [sp, #40]	; 0x28
   1e064:	9905      	ldr	r1, [sp, #20]
   1e066:	e5cd      	b.n	1dc04 <_dtoa_r+0x9ec>
   1e068:	9609      	str	r6, [sp, #36]	; 0x24
   1e06a:	4646      	mov	r6, r8
   1e06c:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e070:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1e074:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e078:	f8cd a018 	str.w	sl, [sp, #24]
   1e07c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e080:	46aa      	mov	sl, r5
   1e082:	f107 0501 	add.w	r5, r7, #1
   1e086:	d0e7      	beq.n	1e058 <_dtoa_r+0xe40>
   1e088:	f1ba 0f00 	cmp.w	sl, #0
   1e08c:	dce1      	bgt.n	1e052 <_dtoa_r+0xe3a>
   1e08e:	e780      	b.n	1df92 <_dtoa_r+0xd7a>
   1e090:	f04f 0a02 	mov.w	sl, #2
   1e094:	f7ff ba32 	b.w	1d4fc <_dtoa_r+0x2e4>
   1e098:	2300      	movs	r3, #0
   1e09a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e09c:	220a      	movs	r2, #10
   1e09e:	4620      	mov	r0, r4
   1e0a0:	f027 fe0e 	bl	45cc0 <__multadd>
   1e0a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e0a6:	900a      	str	r0, [sp, #40]	; 0x28
   1e0a8:	9307      	str	r3, [sp, #28]
   1e0aa:	2d00      	cmp	r5, #0
   1e0ac:	f47f ab44 	bne.w	1d738 <_dtoa_r+0x520>
   1e0b0:	e48c      	b.n	1d9cc <_dtoa_r+0x7b4>
   1e0b2:	f47f af6e 	bne.w	1df92 <_dtoa_r+0xd7a>
   1e0b6:	f018 0f01 	tst.w	r8, #1
   1e0ba:	f43f af6a 	beq.w	1df92 <_dtoa_r+0xd7a>
   1e0be:	e7c5      	b.n	1e04c <_dtoa_r+0xe34>
   1e0c0:	9f05      	ldr	r7, [sp, #20]
   1e0c2:	9505      	str	r5, [sp, #20]
   1e0c4:	f7ff bb46 	b.w	1d754 <_dtoa_r+0x53c>
   1e0c8:	f1ba 0f00 	cmp.w	sl, #0
   1e0cc:	f43f ac5b 	beq.w	1d986 <_dtoa_r+0x76e>
   1e0d0:	f7ff baf9 	b.w	1d6c6 <_dtoa_r+0x4ae>
   1e0d4:	f43f ab0b 	beq.w	1d6ee <_dtoa_r+0x4d6>
   1e0d8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1e0dc:	e43e      	b.n	1d95c <_dtoa_r+0x744>
   1e0de:	bf00      	nop

0001e0e0 <k_delayed_work_submit>:
   1e0e0:	460a      	mov	r2, r1
   1e0e2:	4601      	mov	r1, r0
   1e0e4:	4801      	ldr	r0, [pc, #4]	; (1e0ec <k_delayed_work_submit+0xc>)
   1e0e6:	f021 ba1f 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1e0ea:	bf00      	nop
   1e0ec:	2002a5c0 	.word	0x2002a5c0

0001e0f0 <long_press_handler>:
	}
}
#endif

static void long_press_handler(struct k_work *work)
{
   1e0f0:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   1e0f2:	480f      	ldr	r0, [pc, #60]	; (1e130 <long_press_handler+0x40>)
   1e0f4:	f028 ff80 	bl	46ff8 <atomic_get>
   1e0f8:	b920      	cbnz	r0, 1e104 <long_press_handler+0x14>
	} else {
		printk("Starting GPS\n");
		gps_control_enable();
		gps_control_start(K_SECONDS(1));
	}
}
   1e0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Link not ready, long press disregarded\n");
   1e0fe:	480d      	ldr	r0, [pc, #52]	; (1e134 <long_press_handler+0x44>)
   1e100:	f029 bbe3 	b.w	478ca <printk>
	if (gps_control_is_enabled()) {
   1e104:	f001 fc42 	bl	1f98c <gps_control_is_enabled>
   1e108:	b130      	cbz	r0, 1e118 <long_press_handler+0x28>
		printk("Stopping GPS\n");
   1e10a:	480b      	ldr	r0, [pc, #44]	; (1e138 <long_press_handler+0x48>)
   1e10c:	f029 fbdd 	bl	478ca <printk>
}
   1e110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_disable();
   1e114:	f001 bc58 	b.w	1f9c8 <gps_control_disable>
		printk("Starting GPS\n");
   1e118:	4808      	ldr	r0, [pc, #32]	; (1e13c <long_press_handler+0x4c>)
   1e11a:	f029 fbd6 	bl	478ca <printk>
		gps_control_enable();
   1e11e:	f001 fc77 	bl	1fa10 <gps_control_enable>
}
   1e122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_start(K_SECONDS(1));
   1e126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1e12a:	f001 bc5d 	b.w	1f9e8 <gps_control_start>
   1e12e:	bf00      	nop
   1e130:	20023ab8 	.word	0x20023ab8
   1e134:	0004cc60 	.word	0x0004cc60
   1e138:	0004cc88 	.word	0x0004cc88
   1e13c:	0004cc96 	.word	0x0004cc96

0001e140 <k_work_submit_to_queue.constprop.12>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1e140:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e142:	f100 0308 	add.w	r3, r0, #8
   1e146:	e8d3 2fef 	ldaex	r2, [r3]
   1e14a:	f042 0001 	orr.w	r0, r2, #1
   1e14e:	e8c3 0fec 	stlex	ip, r0, [r3]
   1e152:	f1bc 0f00 	cmp.w	ip, #0
   1e156:	d1f6      	bne.n	1e146 <k_work_submit_to_queue.constprop.12+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e158:	07d3      	lsls	r3, r2, #31
   1e15a:	d402      	bmi.n	1e162 <k_work_submit_to_queue.constprop.12+0x22>
		k_queue_append(&work_q->queue, work);
   1e15c:	4801      	ldr	r0, [pc, #4]	; (1e164 <k_work_submit_to_queue.constprop.12+0x24>)
   1e15e:	f02b bf75 	b.w	4a04c <k_queue_append>
}
   1e162:	4770      	bx	lr
   1e164:	2002a5c0 	.word	0x2002a5c0

0001e168 <sensor_trigger_handler>:
{
   1e168:	b510      	push	{r4, lr}
	if (!flip_mode_enabled || !atomic_get(&send_data_enable)) {
   1e16a:	4811      	ldr	r0, [pc, #68]	; (1e1b0 <sensor_trigger_handler+0x48>)
   1e16c:	f028 ff44 	bl	46ff8 <atomic_get>
   1e170:	b168      	cbz	r0, 1e18e <sensor_trigger_handler+0x26>
	if (orientation_detector_poll(&sensor_data) == 0) {
   1e172:	4c10      	ldr	r4, [pc, #64]	; (1e1b4 <sensor_trigger_handler+0x4c>)
   1e174:	4620      	mov	r0, r4
   1e176:	f7fc f877 	bl	1a268 <orientation_detector_poll>
   1e17a:	b940      	cbnz	r0, 1e18e <sensor_trigger_handler+0x26>
		if (sensor_data.orientation == last_orientation_state) {
   1e17c:	4b0e      	ldr	r3, [pc, #56]	; (1e1b8 <sensor_trigger_handler+0x50>)
   1e17e:	7e22      	ldrb	r2, [r4, #24]
   1e180:	7819      	ldrb	r1, [r3, #0]
   1e182:	4291      	cmp	r1, r2
   1e184:	d003      	beq.n	1e18e <sensor_trigger_handler+0x26>
		switch (sensor_data.orientation) {
   1e186:	2a01      	cmp	r2, #1
   1e188:	d002      	beq.n	1e190 <sensor_trigger_handler+0x28>
   1e18a:	2a02      	cmp	r2, #2
   1e18c:	d00b      	beq.n	1e1a6 <sensor_trigger_handler+0x3e>
}
   1e18e:	bd10      	pop	{r4, pc}
			flip_cloud_data.data.buf = "NORMAL";
   1e190:	480a      	ldr	r0, [pc, #40]	; (1e1bc <sensor_trigger_handler+0x54>)
   1e192:	490b      	ldr	r1, [pc, #44]	; (1e1c0 <sensor_trigger_handler+0x58>)
   1e194:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("NORMAL") - 1;
   1e196:	2006      	movs	r0, #6
}
   1e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1e19c:	6088      	str	r0, [r1, #8]
	k_work_submit_to_queue(&k_sys_work_q, work);
   1e19e:	4809      	ldr	r0, [pc, #36]	; (1e1c4 <sensor_trigger_handler+0x5c>)
		last_orientation_state = sensor_data.orientation;
   1e1a0:	701a      	strb	r2, [r3, #0]
   1e1a2:	f7ff bfcd 	b.w	1e140 <k_work_submit_to_queue.constprop.12>
			flip_cloud_data.data.buf = "UPSIDE_DOWN";
   1e1a6:	4808      	ldr	r0, [pc, #32]	; (1e1c8 <sensor_trigger_handler+0x60>)
   1e1a8:	4905      	ldr	r1, [pc, #20]	; (1e1c0 <sensor_trigger_handler+0x58>)
   1e1aa:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1e1ac:	200b      	movs	r0, #11
   1e1ae:	e7f3      	b.n	1e198 <sensor_trigger_handler+0x30>
   1e1b0:	20023ab8 	.word	0x20023ab8
   1e1b4:	20020938 	.word	0x20020938
   1e1b8:	2002a6d7 	.word	0x2002a6d7
   1e1bc:	0004d0b8 	.word	0x0004d0b8
   1e1c0:	20023a5c 	.word	0x20023a5c
   1e1c4:	20023adc 	.word	0x20023adc
   1e1c8:	0004d0bf 	.word	0x0004d0bf

0001e1cc <modem_rsrp_handler>:
	rsrp.value = rsrp_value;
   1e1cc:	4b03      	ldr	r3, [pc, #12]	; (1e1dc <modem_rsrp_handler+0x10>)
	if (rsrp.value == 255) {
   1e1ce:	28ff      	cmp	r0, #255	; 0xff
	rsrp.value = rsrp_value;
   1e1d0:	8018      	strh	r0, [r3, #0]
	if (rsrp.value == 255) {
   1e1d2:	d002      	beq.n	1e1da <modem_rsrp_handler+0xe>
   1e1d4:	4802      	ldr	r0, [pc, #8]	; (1e1e0 <modem_rsrp_handler+0x14>)
   1e1d6:	f7ff bfb3 	b.w	1e140 <k_work_submit_to_queue.constprop.12>
}
   1e1da:	4770      	bx	lr
   1e1dc:	20032138 	.word	0x20032138
   1e1e0:	20023aa0 	.word	0x20023aa0

0001e1e4 <gps_trigger_handler>:
{
   1e1e4:	b570      	push	{r4, r5, r6, lr}
   1e1e6:	4604      	mov	r4, r0
	if (!atomic_get(&send_data_enable)) {
   1e1e8:	4819      	ldr	r0, [pc, #100]	; (1e250 <gps_trigger_handler+0x6c>)
   1e1ea:	f028 ff05 	bl	46ff8 <atomic_get>
   1e1ee:	b128      	cbz	r0, 1e1fc <gps_trigger_handler+0x18>
	if (++fix_count < CONFIG_GPS_CONTROL_FIX_COUNT) {
   1e1f0:	4a18      	ldr	r2, [pc, #96]	; (1e254 <gps_trigger_handler+0x70>)
   1e1f2:	6813      	ldr	r3, [r2, #0]
   1e1f4:	3301      	adds	r3, #1
   1e1f6:	2b02      	cmp	r3, #2
   1e1f8:	d801      	bhi.n	1e1fe <gps_trigger_handler+0x1a>
   1e1fa:	6013      	str	r3, [r2, #0]
}
   1e1fc:	bd70      	pop	{r4, r5, r6, pc}
	fix_count = 0;
   1e1fe:	2600      	movs	r6, #0
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1e200:	200d      	movs	r0, #13
	fix_count = 0;
   1e202:	6016      	str	r6, [r2, #0]
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1e204:	f000 fe04 	bl	1ee10 <ui_led_set_pattern>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   1e208:	6863      	ldr	r3, [r4, #4]
   1e20a:	4620      	mov	r0, r4
   1e20c:	685b      	ldr	r3, [r3, #4]
   1e20e:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   1e210:	4d11      	ldr	r5, [pc, #68]	; (1e258 <gps_trigger_handler+0x74>)
   1e212:	6863      	ldr	r3, [r4, #4]
   1e214:	4631      	mov	r1, r6
   1e216:	462a      	mov	r2, r5
   1e218:	689b      	ldr	r3, [r3, #8]
   1e21a:	4620      	mov	r0, r4
   1e21c:	4798      	blx	r3
	gps_cloud_data.data.buf = gps_data.nmea.buf;
   1e21e:	4b0f      	ldr	r3, [pc, #60]	; (1e25c <gps_trigger_handler+0x78>)
   1e220:	f105 0208 	add.w	r2, r5, #8
   1e224:	605a      	str	r2, [r3, #4]
	gps_cloud_data.data.len = gps_data.nmea.len;
   1e226:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
	gps_control_stop(K_NO_WAIT);
   1e22a:	2000      	movs	r0, #0
	gps_cloud_data.data.len = gps_data.nmea.len;
   1e22c:	609a      	str	r2, [r3, #8]
	gps_cloud_data.tag += 1;
   1e22e:	68da      	ldr	r2, [r3, #12]
	if (gps_cloud_data.tag == 0) {
   1e230:	3201      	adds	r2, #1
		gps_cloud_data.tag = 0x1;
   1e232:	bf08      	it	eq
   1e234:	2201      	moveq	r2, #1
   1e236:	60da      	str	r2, [r3, #12]
	gps_control_stop(K_NO_WAIT);
   1e238:	f001 fbb2 	bl	1f9a0 <gps_control_stop>
   1e23c:	4808      	ldr	r0, [pc, #32]	; (1e260 <gps_trigger_handler+0x7c>)
   1e23e:	f7ff ff7f 	bl	1e140 <k_work_submit_to_queue.constprop.12>
}
   1e242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&send_env_data_work, K_NO_WAIT);
   1e246:	2100      	movs	r1, #0
   1e248:	4806      	ldr	r0, [pc, #24]	; (1e264 <gps_trigger_handler+0x80>)
   1e24a:	f7ff bf49 	b.w	1e0e0 <k_delayed_work_submit>
   1e24e:	bf00      	nop
   1e250:	20023ab8 	.word	0x20023ab8
   1e254:	20023a58 	.word	0x20023a58
   1e258:	20020000 	.word	0x20020000
   1e25c:	20023a6c 	.word	0x20023a6c
   1e260:	20023ae8 	.word	0x20023ae8
   1e264:	20023abc 	.word	0x20023abc

0001e268 <error_handler>:
{
   1e268:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   1e26a:	4604      	mov	r4, r0
   1e26c:	b9b8      	cbnz	r0, 1e29e <error_handler+0x36>
		if (gps_control_is_enabled()) {
   1e26e:	f001 fb8d 	bl	1f98c <gps_control_is_enabled>
   1e272:	b128      	cbz	r0, 1e280 <error_handler+0x18>
			printk("Reboot\n");
   1e274:	480d      	ldr	r0, [pc, #52]	; (1e2ac <error_handler+0x44>)
   1e276:	f029 fb28 	bl	478ca <printk>
			sys_reboot(0);
   1e27a:	4620      	mov	r0, r4
   1e27c:	f002 fea4 	bl	20fc8 <sys_reboot>
		printk("LTE link disconnect\n");
   1e280:	480b      	ldr	r0, [pc, #44]	; (1e2b0 <error_handler+0x48>)
   1e282:	f029 fb22 	bl	478ca <printk>
		int err = lte_lc_power_off();
   1e286:	f00d ff71 	bl	2c16c <lte_lc_power_off>
		if (err) {
   1e28a:	4601      	mov	r1, r0
   1e28c:	b110      	cbz	r0, 1e294 <error_handler+0x2c>
			printk("lte_lc_power_off failed: %d\n", err);
   1e28e:	4809      	ldr	r0, [pc, #36]	; (1e2b4 <error_handler+0x4c>)
   1e290:	f029 fb1b 	bl	478ca <printk>
		printk("Shutdown modem\n");
   1e294:	4808      	ldr	r0, [pc, #32]	; (1e2b8 <error_handler+0x50>)
   1e296:	f029 fb18 	bl	478ca <printk>
		bsdlib_shutdown();
   1e29a:	f02a fee4 	bl	49066 <bsdlib_shutdown>
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1e29e:	f002 fa3f 	bl	20720 <z_impl_log_panic>
}
   1e2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   1e2a6:	2000      	movs	r0, #0
   1e2a8:	f002 be8e 	b.w	20fc8 <sys_reboot>
   1e2ac:	0004cae7 	.word	0x0004cae7
   1e2b0:	0004caef 	.word	0x0004caef
   1e2b4:	0004cb04 	.word	0x0004cb04
   1e2b8:	0004cb21 	.word	0x0004cb21

0001e2bc <k_sys_fatal_error_handler>:
{
   1e2bc:	b508      	push	{r3, lr}
   1e2be:	f002 fa2f 	bl	20720 <z_impl_log_panic>
	printk("Running main.c error handler");
   1e2c2:	4804      	ldr	r0, [pc, #16]	; (1e2d4 <k_sys_fatal_error_handler+0x18>)
   1e2c4:	f029 fb01 	bl	478ca <printk>
   1e2c8:	f002 fa2a 	bl	20720 <z_impl_log_panic>
	sys_reboot(0);
   1e2cc:	2000      	movs	r0, #0
   1e2ce:	f002 fe7b 	bl	20fc8 <sys_reboot>
   1e2d2:	bf00      	nop
   1e2d4:	0004cbb4 	.word	0x0004cbb4

0001e2d8 <light_sensor_data_send>:
{
   1e2d8:	b510      	push	{r4, lr}
   1e2da:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = { .qos = CLOUD_QOS_AT_MOST_ONCE,
   1e2dc:	2218      	movs	r2, #24
   1e2de:	2100      	movs	r1, #0
   1e2e0:	a804      	add	r0, sp, #16
   1e2e2:	f022 fea9 	bl	41038 <memset>
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1e2e6:	4816      	ldr	r0, [pc, #88]	; (1e340 <light_sensor_data_send+0x68>)
   1e2e8:	f028 fe86 	bl	46ff8 <atomic_get>
   1e2ec:	b150      	cbz	r0, 1e304 <light_sensor_data_send+0x2c>
   1e2ee:	f001 fb43 	bl	1f978 <gps_control_is_active>
   1e2f2:	b938      	cbnz	r0, 1e304 <light_sensor_data_send+0x2c>
	err = light_sensor_get_data(&light_data);
   1e2f4:	4668      	mov	r0, sp
   1e2f6:	f001 fdc1 	bl	1fe7c <light_sensor_get_data>
	if (err) {
   1e2fa:	4601      	mov	r1, r0
   1e2fc:	b120      	cbz	r0, 1e308 <light_sensor_data_send+0x30>
		printk("Failed to get light sensor data, error %d\n", err);
   1e2fe:	4811      	ldr	r0, [pc, #68]	; (1e344 <light_sensor_data_send+0x6c>)
		printk("Failed to encode light sensor data, error %d\n", err);
   1e300:	f029 fae3 	bl	478ca <printk>
}
   1e304:	b00a      	add	sp, #40	; 0x28
   1e306:	bd10      	pop	{r4, pc}
	err = cloud_encode_light_sensor_data(&light_data, &msg);
   1e308:	a904      	add	r1, sp, #16
   1e30a:	4668      	mov	r0, sp
   1e30c:	f001 fa34 	bl	1f778 <cloud_encode_light_sensor_data>
	if (err) {
   1e310:	4601      	mov	r1, r0
   1e312:	b108      	cbz	r0, 1e318 <light_sensor_data_send+0x40>
		printk("Failed to encode light sensor data, error %d\n", err);
   1e314:	480c      	ldr	r0, [pc, #48]	; (1e348 <light_sensor_data_send+0x70>)
   1e316:	e7f3      	b.n	1e300 <light_sensor_data_send+0x28>
	err = cloud_send(cloud_backend, &msg);
   1e318:	4b0c      	ldr	r3, [pc, #48]	; (1e34c <light_sensor_data_send+0x74>)
   1e31a:	a904      	add	r1, sp, #16
   1e31c:	6818      	ldr	r0, [r3, #0]
   1e31e:	f028 fe62 	bl	46fe6 <cloud_send>
   1e322:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   1e324:	9804      	ldr	r0, [sp, #16]
   1e326:	f02b fe5c 	bl	49fe2 <k_free>
	if (err) {
   1e32a:	2c00      	cmp	r4, #0
   1e32c:	d0ea      	beq.n	1e304 <light_sensor_data_send+0x2c>
		printk("Failed to send light sensor data to cloud, error: %d\n",
   1e32e:	4621      	mov	r1, r4
   1e330:	4807      	ldr	r0, [pc, #28]	; (1e350 <light_sensor_data_send+0x78>)
   1e332:	f029 faca 	bl	478ca <printk>
		cloud_error_handler(err);
   1e336:	4620      	mov	r0, r4
   1e338:	f028 fe66 	bl	47008 <cloud_error_handler>
   1e33c:	e7e2      	b.n	1e304 <light_sensor_data_send+0x2c>
   1e33e:	bf00      	nop
   1e340:	20023ab8 	.word	0x20023ab8
   1e344:	0004cbd1 	.word	0x0004cbd1
   1e348:	0004cbfc 	.word	0x0004cbfc
   1e34c:	20023a28 	.word	0x20023a28
   1e350:	0004cc2a 	.word	0x0004cc2a

0001e354 <sensor_data_send>:
{
   1e354:	b510      	push	{r4, lr}
   1e356:	4604      	mov	r4, r0
   1e358:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   1e35a:	2218      	movs	r2, #24
   1e35c:	2100      	movs	r1, #0
   1e35e:	4668      	mov	r0, sp
   1e360:	f022 fe6a 	bl	41038 <memset>
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1e364:	7823      	ldrb	r3, [r4, #0]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1e366:	4817      	ldr	r0, [pc, #92]	; (1e3c4 <sensor_data_send+0x70>)
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1e368:	2b0c      	cmp	r3, #12
		msg.endpoint.type = CLOUD_EP_TOPIC_STATE;
   1e36a:	bf04      	itt	eq
   1e36c:	2301      	moveq	r3, #1
   1e36e:	f88d 300c 	strbeq.w	r3, [sp, #12]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1e372:	f028 fe41 	bl	46ff8 <atomic_get>
   1e376:	b1f8      	cbz	r0, 1e3b8 <sensor_data_send+0x64>
   1e378:	f001 fafe 	bl	1f978 <gps_control_is_active>
   1e37c:	b9e0      	cbnz	r0, 1e3b8 <sensor_data_send+0x64>
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1e37e:	7823      	ldrb	r3, [r4, #0]
		err = cloud_encode_data(data, &msg);
   1e380:	4669      	mov	r1, sp
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1e382:	2b0c      	cmp	r3, #12
		err = cloud_encode_data(data, &msg);
   1e384:	4620      	mov	r0, r4
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1e386:	d019      	beq.n	1e3bc <sensor_data_send+0x68>
		err = cloud_encode_data(data, &msg);
   1e388:	f001 f878 	bl	1f47c <cloud_encode_data>
	if (err) {
   1e38c:	b118      	cbz	r0, 1e396 <sensor_data_send+0x42>
		printk("Unable to encode cloud data: %d\n", err);
   1e38e:	4601      	mov	r1, r0
   1e390:	480d      	ldr	r0, [pc, #52]	; (1e3c8 <sensor_data_send+0x74>)
   1e392:	f029 fa9a 	bl	478ca <printk>
	err = cloud_send(cloud_backend, &msg);
   1e396:	4b0d      	ldr	r3, [pc, #52]	; (1e3cc <sensor_data_send+0x78>)
   1e398:	4669      	mov	r1, sp
   1e39a:	6818      	ldr	r0, [r3, #0]
   1e39c:	f028 fe23 	bl	46fe6 <cloud_send>
   1e3a0:	4604      	mov	r4, r0
   1e3a2:	9800      	ldr	r0, [sp, #0]
   1e3a4:	f02b fe1d 	bl	49fe2 <k_free>
	if (err) {
   1e3a8:	b134      	cbz	r4, 1e3b8 <sensor_data_send+0x64>
		printk("sensor_data_send failed: %d\n", err);
   1e3aa:	4809      	ldr	r0, [pc, #36]	; (1e3d0 <sensor_data_send+0x7c>)
   1e3ac:	4621      	mov	r1, r4
   1e3ae:	f029 fa8c 	bl	478ca <printk>
		cloud_error_handler(err);
   1e3b2:	4620      	mov	r0, r4
   1e3b4:	f028 fe28 	bl	47008 <cloud_error_handler>
}
   1e3b8:	b006      	add	sp, #24
   1e3ba:	bd10      	pop	{r4, pc}
		err = cloud_encode_digital_twin_data(data, &msg);
   1e3bc:	f001 f8c0 	bl	1f540 <cloud_encode_digital_twin_data>
   1e3c0:	e7e4      	b.n	1e38c <sensor_data_send+0x38>
   1e3c2:	bf00      	nop
   1e3c4:	20023ab8 	.word	0x20023ab8
   1e3c8:	0004d07a 	.word	0x0004d07a
   1e3cc:	20023a28 	.word	0x20023a28
   1e3d0:	0004d09b 	.word	0x0004d09b

0001e3d4 <device_status_send>:
{
   1e3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!atomic_get(&send_data_enable)) {
   1e3d6:	4824      	ldr	r0, [pc, #144]	; (1e468 <device_status_send+0x94>)
{
   1e3d8:	b08d      	sub	sp, #52	; 0x34
	if (!atomic_get(&send_data_enable)) {
   1e3da:	f028 fe0d 	bl	46ff8 <atomic_get>
   1e3de:	b130      	cbz	r0, 1e3ee <device_status_send+0x1a>
	cJSON *root_obj = cJSON_CreateObject();
   1e3e0:	f007 fa42 	bl	25868 <cJSON_CreateObject>
	if (root_obj == NULL) {
   1e3e4:	4607      	mov	r7, r0
   1e3e6:	b920      	cbnz	r0, 1e3f2 <device_status_send+0x1e>
		printk("Unable to allocate JSON object\n");
   1e3e8:	4820      	ldr	r0, [pc, #128]	; (1e46c <device_status_send+0x98>)
   1e3ea:	f029 fa6e 	bl	478ca <printk>
}
   1e3ee:	b00d      	add	sp, #52	; 0x34
   1e3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = modem_info_params_get(&modem_param);
   1e3f2:	481f      	ldr	r0, [pc, #124]	; (1e470 <device_status_send+0x9c>)
   1e3f4:	f008 fde6 	bl	26fc4 <modem_info_params_get>
	if (ret < 0) {
   1e3f8:	1e01      	subs	r1, r0, #0
   1e3fa:	da27      	bge.n	1e44c <device_status_send+0x78>
		printk("Unable to obtain modem parameters: %d\n", ret);
   1e3fc:	481d      	ldr	r0, [pc, #116]	; (1e474 <device_status_send+0xa0>)
   1e3fe:	f029 fa64 	bl	478ca <printk>
	size_t item_cnt = 0;
   1e402:	2600      	movs	r6, #0
	const char *const ui[] = {
   1e404:	4c1c      	ldr	r4, [pc, #112]	; (1e478 <device_status_send+0xa4>)
   1e406:	ad05      	add	r5, sp, #20
   1e408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1e40a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e40c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1e410:	2301      	movs	r3, #1
	const char *const ui[] = {
   1e412:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const char *const fota[] = {
   1e416:	340c      	adds	r4, #12
   1e418:	aa03      	add	r2, sp, #12
   1e41a:	e894 0003 	ldmia.w	r4, {r0, r1}
   1e41e:	e882 0003 	stmia.w	r2, {r0, r1}
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1e422:	9300      	str	r3, [sp, #0]
   1e424:	9701      	str	r7, [sp, #4]
   1e426:	2302      	movs	r3, #2
   1e428:	2107      	movs	r1, #7
   1e42a:	a805      	add	r0, sp, #20
   1e42c:	f001 f9c6 	bl	1f7bc <service_info_json_object_encode>
   1e430:	b998      	cbnz	r0, 1e45a <device_status_send+0x86>
		++item_cnt;
   1e432:	3601      	adds	r6, #1
	device_cloud_data.data.buf = (char *)root_obj;
   1e434:	4b11      	ldr	r3, [pc, #68]	; (1e47c <device_status_send+0xa8>)
	sensor_data_send(&device_cloud_data);
   1e436:	4811      	ldr	r0, [pc, #68]	; (1e47c <device_status_send+0xa8>)
	device_cloud_data.tag += 1;
   1e438:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = item_cnt;
   1e43a:	e9c3 7601 	strd	r7, r6, [r3, #4]
	if (device_cloud_data.tag == 0) {
   1e43e:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   1e440:	bf08      	it	eq
   1e442:	2201      	moveq	r2, #1
   1e444:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   1e446:	f7ff ff85 	bl	1e354 <sensor_data_send>
   1e44a:	e7d0      	b.n	1e3ee <device_status_send+0x1a>
		ret = modem_info_json_object_encode(&modem_param, root_obj);
   1e44c:	4639      	mov	r1, r7
   1e44e:	4808      	ldr	r0, [pc, #32]	; (1e470 <device_status_send+0x9c>)
   1e450:	f008 ff36 	bl	272c0 <modem_info_json_object_encode>
			item_cnt = (size_t)ret;
   1e454:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   1e458:	e7d4      	b.n	1e404 <device_status_send+0x30>
	if (item_cnt == 0) {
   1e45a:	2e00      	cmp	r6, #0
   1e45c:	d1ea      	bne.n	1e434 <device_status_send+0x60>
		cJSON_Delete(root_obj);
   1e45e:	4638      	mov	r0, r7
   1e460:	f007 f93c 	bl	256dc <cJSON_Delete>
		return;
   1e464:	e7c3      	b.n	1e3ee <device_status_send+0x1a>
   1e466:	bf00      	nop
   1e468:	20023ab8 	.word	0x20023ab8
   1e46c:	0004caa0 	.word	0x0004caa0
   1e470:	200200c0 	.word	0x200200c0
   1e474:	0004cac0 	.word	0x0004cac0
   1e478:	0004a7f0 	.word	0x0004a7f0
   1e47c:	20031478 	.word	0x20031478

0001e480 <modem_rsrp_data_send>:
{
   1e480:	b510      	push	{r4, lr}
   1e482:	b0a0      	sub	sp, #128	; 0x80
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1e484:	2280      	movs	r2, #128	; 0x80
   1e486:	2100      	movs	r1, #0
   1e488:	4668      	mov	r0, sp
   1e48a:	f022 fdd5 	bl	41038 <memset>
	if (!atomic_get(&send_data_enable)) {
   1e48e:	4813      	ldr	r0, [pc, #76]	; (1e4dc <modem_rsrp_data_send+0x5c>)
   1e490:	f028 fdb2 	bl	46ff8 <atomic_get>
   1e494:	b300      	cbz	r0, 1e4d8 <modem_rsrp_data_send+0x58>
		(void)z_arch_syscall_invoke1((u32_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
   1e496:	f02b feb7 	bl	4a208 <z_impl_k_uptime_get>
	if (k_uptime_get_32() - timestamp_prev <
   1e49a:	4c11      	ldr	r4, [pc, #68]	; (1e4e0 <modem_rsrp_data_send+0x60>)
   1e49c:	6822      	ldr	r2, [r4, #0]
   1e49e:	1a80      	subs	r0, r0, r2
   1e4a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
   1e4a4:	4290      	cmp	r0, r2
   1e4a6:	d917      	bls.n	1e4d8 <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   1e4a8:	4a0e      	ldr	r2, [pc, #56]	; (1e4e4 <modem_rsrp_data_send+0x64>)
   1e4aa:	4668      	mov	r0, sp
   1e4ac:	8811      	ldrh	r1, [r2, #0]
   1e4ae:	8853      	ldrh	r3, [r2, #2]
   1e4b0:	4a0d      	ldr	r2, [pc, #52]	; (1e4e8 <modem_rsrp_data_send+0x68>)
   1e4b2:	1acb      	subs	r3, r1, r3
   1e4b4:	2180      	movs	r1, #128	; 0x80
   1e4b6:	f022 ffe5 	bl	41484 <snprintf>
	signal_strength_cloud_data.data.buf = buf;
   1e4ba:	4b0c      	ldr	r3, [pc, #48]	; (1e4ec <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   1e4bc:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   1e4be:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   1e4c0:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1e4c2:	bf08      	it	eq
   1e4c4:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1e4c6:	4809      	ldr	r0, [pc, #36]	; (1e4ec <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.data.buf = buf;
   1e4c8:	f8c3 d004 	str.w	sp, [r3, #4]
		signal_strength_cloud_data.tag = 0x1;
   1e4cc:	60da      	str	r2, [r3, #12]
	sensor_data_send(&signal_strength_cloud_data);
   1e4ce:	f7ff ff41 	bl	1e354 <sensor_data_send>
   1e4d2:	f02b fe99 	bl	4a208 <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
   1e4d6:	6020      	str	r0, [r4, #0]
}
   1e4d8:	b020      	add	sp, #128	; 0x80
   1e4da:	bd10      	pop	{r4, pc}
   1e4dc:	20023ab8 	.word	0x20023ab8
   1e4e0:	20023b04 	.word	0x20023b04
   1e4e4:	20032138 	.word	0x20032138
   1e4e8:	000502db 	.word	0x000502db
   1e4ec:	20023af4 	.word	0x20023af4

0001e4f0 <send_flip_data_work_fn>:
	sensor_data_send(&flip_cloud_data);
   1e4f0:	4801      	ldr	r0, [pc, #4]	; (1e4f8 <send_flip_data_work_fn+0x8>)
   1e4f2:	f7ff bf2f 	b.w	1e354 <sensor_data_send>
   1e4f6:	bf00      	nop
   1e4f8:	20023a5c 	.word	0x20023a5c

0001e4fc <send_button_data_work_fn>:
	sensor_data_send(&button_cloud_data);
   1e4fc:	4801      	ldr	r0, [pc, #4]	; (1e504 <send_button_data_work_fn+0x8>)
   1e4fe:	f7ff bf29 	b.w	1e354 <sensor_data_send>
   1e502:	bf00      	nop
   1e504:	20023a10 	.word	0x20023a10

0001e508 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   1e508:	4801      	ldr	r0, [pc, #4]	; (1e510 <send_gps_data_work_fn+0x8>)
   1e50a:	f7ff bf23 	b.w	1e354 <sensor_data_send>
   1e50e:	bf00      	nop
   1e510:	20023a6c 	.word	0x20023a6c

0001e514 <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   1e514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e516:	b089      	sub	sp, #36	; 0x24
   1e518:	466b      	mov	r3, sp
	if (pattern_recording) {
   1e51a:	4d41      	ldr	r5, [pc, #260]	; (1e620 <ui_evt_handler+0x10c>)
{
   1e51c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (pattern_recording) {
   1e520:	682b      	ldr	r3, [r5, #0]
   1e522:	f89d 6000 	ldrb.w	r6, [sp]
   1e526:	2b00      	cmp	r3, #0
   1e528:	d054      	beq.n	1e5d4 <ui_evt_handler+0xc0>
	if (buttons_captured < buttons_to_capture) {
   1e52a:	4c3e      	ldr	r4, [pc, #248]	; (1e624 <ui_evt_handler+0x110>)
   1e52c:	4f3e      	ldr	r7, [pc, #248]	; (1e628 <ui_evt_handler+0x114>)
   1e52e:	6823      	ldr	r3, [r4, #0]
   1e530:	6838      	ldr	r0, [r7, #0]
   1e532:	4283      	cmp	r3, r0
   1e534:	da0a      	bge.n	1e54c <ui_evt_handler+0x38>
		if (evt->button == UI_BUTTON_1 &&
   1e536:	2901      	cmp	r1, #1
   1e538:	d12f      	bne.n	1e59a <ui_evt_handler+0x86>
   1e53a:	b93e      	cbnz	r6, 1e54c <ui_evt_handler+0x38>
			ua_pattern[buttons_captured++] =
   1e53c:	2103      	movs	r1, #3
   1e53e:	1c5a      	adds	r2, r3, #1
   1e540:	6022      	str	r2, [r4, #0]
   1e542:	4a3a      	ldr	r2, [pc, #232]	; (1e62c <ui_evt_handler+0x118>)
			printk("Button 1\n");
   1e544:	483a      	ldr	r0, [pc, #232]	; (1e630 <ui_evt_handler+0x11c>)
			ua_pattern[buttons_captured++] =
   1e546:	54d1      	strb	r1, [r2, r3]
			printk("Switch 2\n");
   1e548:	f029 f9bf 	bl	478ca <printk>
	if (buttons_captured == buttons_to_capture) {
   1e54c:	6824      	ldr	r4, [r4, #0]
   1e54e:	683b      	ldr	r3, [r7, #0]
   1e550:	429c      	cmp	r4, r3
   1e552:	d120      	bne.n	1e596 <ui_evt_handler+0x82>
	struct cloud_msg msg = {
   1e554:	2210      	movs	r2, #16
   1e556:	2100      	movs	r1, #0
   1e558:	eb0d 0002 	add.w	r0, sp, r2
   1e55c:	f022 fd6c 	bl	41038 <memset>
   1e560:	4b32      	ldr	r3, [pc, #200]	; (1e62c <ui_evt_handler+0x118>)
   1e562:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1e566:	2303      	movs	r3, #3
   1e568:	f88d 3014 	strb.w	r3, [sp, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e56c:	2300      	movs	r3, #0
   1e56e:	e8d5 2fef 	ldaex	r2, [r5]
   1e572:	e8c5 3fe1 	stlex	r1, r3, [r5]
   1e576:	2900      	cmp	r1, #0
   1e578:	d1f9      	bne.n	1e56e <ui_evt_handler+0x5a>
	err = cloud_send(cloud_backend, &msg);
   1e57a:	4b2e      	ldr	r3, [pc, #184]	; (1e634 <ui_evt_handler+0x120>)
   1e57c:	a902      	add	r1, sp, #8
   1e57e:	6818      	ldr	r0, [r3, #0]
   1e580:	f028 fd31 	bl	46fe6 <cloud_send>
	if (err) {
   1e584:	4604      	mov	r4, r0
   1e586:	b130      	cbz	r0, 1e596 <ui_evt_handler+0x82>
		printk("Could not send association message, error: %d\n", err);
   1e588:	4601      	mov	r1, r0
   1e58a:	482b      	ldr	r0, [pc, #172]	; (1e638 <ui_evt_handler+0x124>)
   1e58c:	f029 f99d 	bl	478ca <printk>
		cloud_error_handler(err);
   1e590:	4620      	mov	r0, r4
   1e592:	f028 fd39 	bl	47008 <cloud_error_handler>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   1e596:	b009      	add	sp, #36	; 0x24
   1e598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (evt->button == UI_BUTTON_2 &&
   1e59a:	2902      	cmp	r1, #2
   1e59c:	d108      	bne.n	1e5b0 <ui_evt_handler+0x9c>
   1e59e:	2e00      	cmp	r6, #0
   1e5a0:	d1d4      	bne.n	1e54c <ui_evt_handler+0x38>
			ua_pattern[buttons_captured++] =
   1e5a2:	2104      	movs	r1, #4
   1e5a4:	1c5a      	adds	r2, r3, #1
   1e5a6:	6022      	str	r2, [r4, #0]
   1e5a8:	4a20      	ldr	r2, [pc, #128]	; (1e62c <ui_evt_handler+0x118>)
			printk("Button 2\n");
   1e5aa:	4824      	ldr	r0, [pc, #144]	; (1e63c <ui_evt_handler+0x128>)
			ua_pattern[buttons_captured++] =
   1e5ac:	54d1      	strb	r1, [r2, r3]
   1e5ae:	e7cb      	b.n	1e548 <ui_evt_handler+0x34>
		} else if (evt->button == UI_SWITCH_1) {
   1e5b0:	2903      	cmp	r1, #3
   1e5b2:	d106      	bne.n	1e5c2 <ui_evt_handler+0xae>
			ua_pattern[buttons_captured++] =
   1e5b4:	2101      	movs	r1, #1
   1e5b6:	1c5a      	adds	r2, r3, #1
   1e5b8:	6022      	str	r2, [r4, #0]
   1e5ba:	4a1c      	ldr	r2, [pc, #112]	; (1e62c <ui_evt_handler+0x118>)
			printk("Switch 1\n");
   1e5bc:	4820      	ldr	r0, [pc, #128]	; (1e640 <ui_evt_handler+0x12c>)
			ua_pattern[buttons_captured++] =
   1e5be:	54d1      	strb	r1, [r2, r3]
   1e5c0:	e7c2      	b.n	1e548 <ui_evt_handler+0x34>
		} else if (evt->button == UI_SWITCH_2) {
   1e5c2:	2904      	cmp	r1, #4
   1e5c4:	d1c2      	bne.n	1e54c <ui_evt_handler+0x38>
			ua_pattern[buttons_captured++] =
   1e5c6:	2102      	movs	r1, #2
   1e5c8:	1c5a      	adds	r2, r3, #1
   1e5ca:	6022      	str	r2, [r4, #0]
   1e5cc:	4a17      	ldr	r2, [pc, #92]	; (1e62c <ui_evt_handler+0x118>)
			printk("Switch 2\n");
   1e5ce:	481d      	ldr	r0, [pc, #116]	; (1e644 <ui_evt_handler+0x130>)
			ua_pattern[buttons_captured++] =
   1e5d0:	54d1      	strb	r1, [r2, r3]
   1e5d2:	e7b9      	b.n	1e548 <ui_evt_handler+0x34>
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
   1e5d4:	2901      	cmp	r1, #1
   1e5d6:	d1de      	bne.n	1e596 <ui_evt_handler+0x82>
	if (!atomic_get(&send_data_enable)) {
   1e5d8:	481b      	ldr	r0, [pc, #108]	; (1e648 <ui_evt_handler+0x134>)
   1e5da:	f028 fd0d 	bl	46ff8 <atomic_get>
   1e5de:	b188      	cbz	r0, 1e604 <ui_evt_handler+0xf0>
   1e5e0:	4b1a      	ldr	r3, [pc, #104]	; (1e64c <ui_evt_handler+0x138>)
	if (pressed) {
   1e5e2:	b9b6      	cbnz	r6, 1e612 <ui_evt_handler+0xfe>
		data[0] = '1';
   1e5e4:	2231      	movs	r2, #49	; 0x31
	button_cloud_data.data.buf = data;
   1e5e6:	4c1a      	ldr	r4, [pc, #104]	; (1e650 <ui_evt_handler+0x13c>)
	button_cloud_data.data.len = strlen(data);
   1e5e8:	4818      	ldr	r0, [pc, #96]	; (1e64c <ui_evt_handler+0x138>)
		data[0] = '0';
   1e5ea:	701a      	strb	r2, [r3, #0]
	button_cloud_data.data.buf = data;
   1e5ec:	6063      	str	r3, [r4, #4]
	button_cloud_data.data.len = strlen(data);
   1e5ee:	f023 f919 	bl	41824 <strlen>
	button_cloud_data.tag += 1;
   1e5f2:	68e3      	ldr	r3, [r4, #12]
	button_cloud_data.data.len = strlen(data);
   1e5f4:	60a0      	str	r0, [r4, #8]
	if (button_cloud_data.tag == 0) {
   1e5f6:	3301      	adds	r3, #1
		button_cloud_data.tag = 0x1;
   1e5f8:	bf08      	it	eq
   1e5fa:	2301      	moveq	r3, #1
	k_work_submit_to_queue(&k_sys_work_q, work);
   1e5fc:	4815      	ldr	r0, [pc, #84]	; (1e654 <ui_evt_handler+0x140>)
   1e5fe:	60e3      	str	r3, [r4, #12]
   1e600:	f7ff fd9e 	bl	1e140 <k_work_submit_to_queue.constprop.12>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   1e604:	b93e      	cbnz	r6, 1e616 <ui_evt_handler+0x102>
			k_delayed_work_submit(&long_press_button_work,
   1e606:	f241 3188 	movw	r1, #5000	; 0x1388
   1e60a:	4813      	ldr	r0, [pc, #76]	; (1e658 <ui_evt_handler+0x144>)
   1e60c:	f7ff fd68 	bl	1e0e0 <k_delayed_work_submit>
   1e610:	e7c1      	b.n	1e596 <ui_evt_handler+0x82>
		data[0] = '0';
   1e612:	2230      	movs	r2, #48	; 0x30
   1e614:	e7e7      	b.n	1e5e6 <ui_evt_handler+0xd2>
			k_delayed_work_cancel(&long_press_button_work);
   1e616:	4810      	ldr	r0, [pc, #64]	; (1e658 <ui_evt_handler+0x144>)
   1e618:	f021 f810 	bl	3f63c <k_delayed_work_cancel>
   1e61c:	e7bb      	b.n	1e596 <ui_evt_handler+0x82>
   1e61e:	bf00      	nop
   1e620:	20023a9c 	.word	0x20023a9c
   1e624:	20023a20 	.word	0x20023a20
   1e628:	20023a24 	.word	0x20023a24
   1e62c:	2002a6d8 	.word	0x2002a6d8
   1e630:	0004d1bc 	.word	0x0004d1bc
   1e634:	20023a28 	.word	0x20023a28
   1e638:	0004d1e4 	.word	0x0004d1e4
   1e63c:	0004d1c6 	.word	0x0004d1c6
   1e640:	0004d1d0 	.word	0x0004d1d0
   1e644:	0004d1da 	.word	0x0004d1da
   1e648:	20023ab8 	.word	0x20023ab8
   1e64c:	2003231c 	.word	0x2003231c
   1e650:	20023a10 	.word	0x20023a10
   1e654:	20023aac 	.word	0x20023aac
   1e658:	20023a7c 	.word	0x20023a7c

0001e65c <send_env_data_work_fn>:
{
   1e65c:	b510      	push	{r4, lr}
   1e65e:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   1e660:	2218      	movs	r2, #24
   1e662:	2100      	movs	r1, #0
   1e664:	a804      	add	r0, sp, #16
   1e666:	f022 fce7 	bl	41038 <memset>
	if (!atomic_get(&send_data_enable)) {
   1e66a:	4839      	ldr	r0, [pc, #228]	; (1e750 <send_env_data_work_fn+0xf4>)
   1e66c:	f028 fcc4 	bl	46ff8 <atomic_get>
   1e670:	b138      	cbz	r0, 1e682 <send_env_data_work_fn+0x26>
	if (gps_control_is_active()) {
   1e672:	f001 f981 	bl	1f978 <gps_control_is_active>
   1e676:	b130      	cbz	r0, 1e686 <send_env_data_work_fn+0x2a>
		k_delayed_work_submit(&send_env_data_work,
   1e678:	f644 6120 	movw	r1, #20000	; 0x4e20
	k_delayed_work_submit(&send_env_data_work,
   1e67c:	4835      	ldr	r0, [pc, #212]	; (1e754 <send_env_data_work_fn+0xf8>)
   1e67e:	f7ff fd2f 	bl	1e0e0 <k_delayed_work_submit>
}
   1e682:	b00a      	add	sp, #40	; 0x28
   1e684:	bd10      	pop	{r4, pc}
	if (env_sensors_get_temperature(&env_data) == 0) {
   1e686:	4668      	mov	r0, sp
   1e688:	f001 fa46 	bl	1fb18 <env_sensors_get_temperature>
   1e68c:	b180      	cbz	r0, 1e6b0 <send_env_data_work_fn+0x54>
	if (env_sensors_get_humidity(&env_data) == 0) {
   1e68e:	4668      	mov	r0, sp
   1e690:	f001 fa9a 	bl	1fbc8 <env_sensors_get_humidity>
   1e694:	b328      	cbz	r0, 1e6e2 <send_env_data_work_fn+0x86>
	if (env_sensors_get_pressure(&env_data) == 0) {
   1e696:	4668      	mov	r0, sp
   1e698:	f001 faee 	bl	1fc78 <env_sensors_get_pressure>
   1e69c:	2800      	cmp	r0, #0
   1e69e:	d032      	beq.n	1e706 <send_env_data_work_fn+0xaa>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   1e6a0:	4668      	mov	r0, sp
   1e6a2:	f028 fd1b 	bl	470dc <env_sensors_get_air_quality>
   1e6a6:	2800      	cmp	r0, #0
   1e6a8:	d03f      	beq.n	1e72a <send_env_data_work_fn+0xce>
	k_delayed_work_submit(&send_env_data_work,
   1e6aa:	f247 5130 	movw	r1, #30000	; 0x7530
   1e6ae:	e7e5      	b.n	1e67c <send_env_data_work_fn+0x20>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1e6b0:	a904      	add	r1, sp, #16
   1e6b2:	4668      	mov	r0, sp
   1e6b4:	f001 f812 	bl	1f6dc <cloud_encode_env_sensors_data>
   1e6b8:	2800      	cmp	r0, #0
   1e6ba:	d1e8      	bne.n	1e68e <send_env_data_work_fn+0x32>
			err = cloud_send(cloud_backend, &msg);
   1e6bc:	4b26      	ldr	r3, [pc, #152]	; (1e758 <send_env_data_work_fn+0xfc>)
   1e6be:	a904      	add	r1, sp, #16
   1e6c0:	6818      	ldr	r0, [r3, #0]
   1e6c2:	f028 fc90 	bl	46fe6 <cloud_send>
   1e6c6:	4604      	mov	r4, r0
   1e6c8:	9804      	ldr	r0, [sp, #16]
   1e6ca:	f02b fc8a 	bl	49fe2 <k_free>
			if (err) {
   1e6ce:	2c00      	cmp	r4, #0
   1e6d0:	d0dd      	beq.n	1e68e <send_env_data_work_fn+0x32>
	printk("sensor_data_send failed: %d\n", err);
   1e6d2:	4621      	mov	r1, r4
   1e6d4:	4821      	ldr	r0, [pc, #132]	; (1e75c <send_env_data_work_fn+0x100>)
   1e6d6:	f029 f8f8 	bl	478ca <printk>
	cloud_error_handler(err);
   1e6da:	4620      	mov	r0, r4
   1e6dc:	f028 fc94 	bl	47008 <cloud_error_handler>
   1e6e0:	e7cf      	b.n	1e682 <send_env_data_work_fn+0x26>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1e6e2:	a904      	add	r1, sp, #16
   1e6e4:	4668      	mov	r0, sp
   1e6e6:	f000 fff9 	bl	1f6dc <cloud_encode_env_sensors_data>
   1e6ea:	2800      	cmp	r0, #0
   1e6ec:	d1d3      	bne.n	1e696 <send_env_data_work_fn+0x3a>
			err = cloud_send(cloud_backend, &msg);
   1e6ee:	4b1a      	ldr	r3, [pc, #104]	; (1e758 <send_env_data_work_fn+0xfc>)
   1e6f0:	a904      	add	r1, sp, #16
   1e6f2:	6818      	ldr	r0, [r3, #0]
   1e6f4:	f028 fc77 	bl	46fe6 <cloud_send>
   1e6f8:	4604      	mov	r4, r0
   1e6fa:	9804      	ldr	r0, [sp, #16]
   1e6fc:	f02b fc71 	bl	49fe2 <k_free>
			if (err) {
   1e700:	2c00      	cmp	r4, #0
   1e702:	d0c8      	beq.n	1e696 <send_env_data_work_fn+0x3a>
   1e704:	e7e5      	b.n	1e6d2 <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1e706:	a904      	add	r1, sp, #16
   1e708:	4668      	mov	r0, sp
   1e70a:	f000 ffe7 	bl	1f6dc <cloud_encode_env_sensors_data>
   1e70e:	2800      	cmp	r0, #0
   1e710:	d1c6      	bne.n	1e6a0 <send_env_data_work_fn+0x44>
			err = cloud_send(cloud_backend, &msg);
   1e712:	4b11      	ldr	r3, [pc, #68]	; (1e758 <send_env_data_work_fn+0xfc>)
   1e714:	a904      	add	r1, sp, #16
   1e716:	6818      	ldr	r0, [r3, #0]
   1e718:	f028 fc65 	bl	46fe6 <cloud_send>
   1e71c:	4604      	mov	r4, r0
   1e71e:	9804      	ldr	r0, [sp, #16]
   1e720:	f02b fc5f 	bl	49fe2 <k_free>
			if (err) {
   1e724:	2c00      	cmp	r4, #0
   1e726:	d0bb      	beq.n	1e6a0 <send_env_data_work_fn+0x44>
   1e728:	e7d3      	b.n	1e6d2 <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1e72a:	a904      	add	r1, sp, #16
   1e72c:	4668      	mov	r0, sp
   1e72e:	f000 ffd5 	bl	1f6dc <cloud_encode_env_sensors_data>
   1e732:	2800      	cmp	r0, #0
   1e734:	d1b9      	bne.n	1e6aa <send_env_data_work_fn+0x4e>
			err = cloud_send(cloud_backend, &msg);
   1e736:	4b08      	ldr	r3, [pc, #32]	; (1e758 <send_env_data_work_fn+0xfc>)
   1e738:	a904      	add	r1, sp, #16
   1e73a:	6818      	ldr	r0, [r3, #0]
   1e73c:	f028 fc53 	bl	46fe6 <cloud_send>
   1e740:	4604      	mov	r4, r0
   1e742:	9804      	ldr	r0, [sp, #16]
   1e744:	f02b fc4d 	bl	49fe2 <k_free>
			if (err) {
   1e748:	2c00      	cmp	r4, #0
   1e74a:	d0ae      	beq.n	1e6aa <send_env_data_work_fn+0x4e>
   1e74c:	e7c1      	b.n	1e6d2 <send_env_data_work_fn+0x76>
   1e74e:	bf00      	nop
   1e750:	20023ab8 	.word	0x20023ab8
   1e754:	20023abc 	.word	0x20023abc
   1e758:	20023a28 	.word	0x20023a28
   1e75c:	0004d09b 	.word	0x0004d09b

0001e760 <sensors_start>:
   1e760:	2201      	movs	r2, #1
{
   1e762:	b513      	push	{r0, r1, r4, lr}
   1e764:	4b35      	ldr	r3, [pc, #212]	; (1e83c <sensors_start+0xdc>)
   1e766:	e8d3 1fef 	ldaex	r1, [r3]
   1e76a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1e76e:	2800      	cmp	r0, #0
   1e770:	d1f9      	bne.n	1e766 <sensors_start+0x6>
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1e772:	4833      	ldr	r0, [pc, #204]	; (1e840 <sensors_start+0xe0>)
   1e774:	f01e fab8 	bl	3cce8 <z_impl_device_get_binding>
		if (accel_dev == NULL) {
   1e778:	4604      	mov	r4, r0
   1e77a:	2800      	cmp	r0, #0
   1e77c:	d137      	bne.n	1e7ee <sensors_start+0x8e>
			printk("Could not get %s device\n",
   1e77e:	4930      	ldr	r1, [pc, #192]	; (1e840 <sensors_start+0xe0>)
   1e780:	4830      	ldr	r0, [pc, #192]	; (1e844 <sensors_start+0xe4>)
   1e782:	f029 f8a2 	bl	478ca <printk>
   1e786:	482e      	ldr	r0, [pc, #184]	; (1e840 <sensors_start+0xe0>)
   1e788:	f01e faae 	bl	3cce8 <z_impl_device_get_binding>
	if (accel_dev == NULL) {
   1e78c:	2800      	cmp	r0, #0
   1e78e:	d145      	bne.n	1e81c <sensors_start+0xbc>
		printk("Could not get %s device\n", CONFIG_ACCEL_DEV_NAME);
   1e790:	492b      	ldr	r1, [pc, #172]	; (1e840 <sensors_start+0xe0>)
   1e792:	482c      	ldr	r0, [pc, #176]	; (1e844 <sensors_start+0xe4>)
   1e794:	f029 f899 	bl	478ca <printk>
	err = env_sensors_init_and_start();
   1e798:	f001 f980 	bl	1fa9c <env_sensors_init_and_start>
	if (err) {
   1e79c:	4601      	mov	r1, r0
   1e79e:	b110      	cbz	r0, 1e7a6 <sensors_start+0x46>
		printk("Environmental sensors init failed, error: %d\n", err);
   1e7a0:	4829      	ldr	r0, [pc, #164]	; (1e848 <sensors_start+0xe8>)
   1e7a2:	f029 f892 	bl	478ca <printk>
	err = light_sensor_init_and_start(light_sensor_data_send);
   1e7a6:	4829      	ldr	r0, [pc, #164]	; (1e84c <sensors_start+0xec>)
   1e7a8:	f001 fb42 	bl	1fe30 <light_sensor_init_and_start>
	if (err) {
   1e7ac:	4601      	mov	r1, r0
   1e7ae:	b110      	cbz	r0, 1e7b6 <sensors_start+0x56>
		printk("Light sensor init failed, error: %d\n", err);
   1e7b0:	4827      	ldr	r0, [pc, #156]	; (1e850 <sensors_start+0xf0>)
   1e7b2:	f029 f88a 	bl	478ca <printk>
	err = modem_info_init();
   1e7b6:	f008 fb65 	bl	26e84 <modem_info_init>
	if (err) {
   1e7ba:	4601      	mov	r1, r0
   1e7bc:	2800      	cmp	r0, #0
   1e7be:	d030      	beq.n	1e822 <sensors_start+0xc2>
		printk("Modem info could not be established: %d\n", err);
   1e7c0:	4824      	ldr	r0, [pc, #144]	; (1e854 <sensors_start+0xf4>)
   1e7c2:	f029 f882 	bl	478ca <printk>
   1e7c6:	4824      	ldr	r0, [pc, #144]	; (1e858 <sensors_start+0xf8>)
   1e7c8:	f7ff fcba 	bl	1e140 <k_work_submit_to_queue.constprop.12>
	button_cloud_data.tag = 0x1;
   1e7cc:	2401      	movs	r4, #1
	button_cloud_data.type = CLOUD_CHANNEL_BUTTON;
   1e7ce:	2203      	movs	r2, #3
   1e7d0:	4b22      	ldr	r3, [pc, #136]	; (1e85c <sensors_start+0xfc>)
	gps_control_init(gps_trigger_handler);
   1e7d2:	4823      	ldr	r0, [pc, #140]	; (1e860 <sensors_start+0x100>)
	button_cloud_data.type = CLOUD_CHANNEL_BUTTON;
   1e7d4:	701a      	strb	r2, [r3, #0]
	button_cloud_data.tag = 0x1;
   1e7d6:	60dc      	str	r4, [r3, #12]
	gps_control_init(gps_trigger_handler);
   1e7d8:	f001 f928 	bl	1fa2c <gps_control_init>
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1e7dc:	4b21      	ldr	r3, [pc, #132]	; (1e864 <sensors_start+0x104>)
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1e7de:	f241 3188 	movw	r1, #5000	; 0x1388
   1e7e2:	4821      	ldr	r0, [pc, #132]	; (1e868 <sensors_start+0x108>)
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1e7e4:	701c      	strb	r4, [r3, #0]
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1e7e6:	f7ff fc7b 	bl	1e0e0 <k_delayed_work_submit>
}
   1e7ea:	b002      	add	sp, #8
   1e7ec:	bd10      	pop	{r4, pc}
		struct sensor_trigger sensor_trig = {
   1e7ee:	2300      	movs	r3, #0
   1e7f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e7f4:	2304      	movs	r3, #4
		printk("Setting trigger\n");
   1e7f6:	481d      	ldr	r0, [pc, #116]	; (1e86c <sensors_start+0x10c>)
		struct sensor_trigger sensor_trig = {
   1e7f8:	f8ad 3004 	strh.w	r3, [sp, #4]
		printk("Setting trigger\n");
   1e7fc:	f029 f865 	bl	478ca <printk>
	if (api->trigger_set == NULL) {
   1e800:	6863      	ldr	r3, [r4, #4]
   1e802:	685b      	ldr	r3, [r3, #4]
   1e804:	b91b      	cbnz	r3, 1e80e <sensors_start+0xae>
			printk("Unable to set trigger\n");
   1e806:	481a      	ldr	r0, [pc, #104]	; (1e870 <sensors_start+0x110>)
   1e808:	f029 f85f 	bl	478ca <printk>
   1e80c:	e7bb      	b.n	1e786 <sensors_start+0x26>
	return api->trigger_set(dev, trig, handler);
   1e80e:	4a19      	ldr	r2, [pc, #100]	; (1e874 <sensors_start+0x114>)
   1e810:	a901      	add	r1, sp, #4
   1e812:	4620      	mov	r0, r4
   1e814:	4798      	blx	r3
		if (err) {
   1e816:	2800      	cmp	r0, #0
   1e818:	d0b5      	beq.n	1e786 <sensors_start+0x26>
   1e81a:	e7f4      	b.n	1e806 <sensors_start+0xa6>
	orientation_detector_init(accel_dev);
   1e81c:	f000 fac8 	bl	1edb0 <orientation_detector_init>
   1e820:	e7ba      	b.n	1e798 <sensors_start+0x38>
	modem_info_params_init(&modem_param);
   1e822:	4815      	ldr	r0, [pc, #84]	; (1e878 <sensors_start+0x118>)
   1e824:	f008 fb7e 	bl	26f24 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1e828:	220b      	movs	r2, #11
   1e82a:	4b14      	ldr	r3, [pc, #80]	; (1e87c <sensors_start+0x11c>)
	modem_info_rsrp_register(modem_rsrp_handler);
   1e82c:	4814      	ldr	r0, [pc, #80]	; (1e880 <sensors_start+0x120>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1e82e:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   1e830:	2201      	movs	r2, #1
   1e832:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   1e834:	f008 faf2 	bl	26e1c <modem_info_rsrp_register>
   1e838:	e7c5      	b.n	1e7c6 <sensors_start+0x66>
   1e83a:	bf00      	nop
   1e83c:	20023ab8 	.word	0x20023ab8
   1e840:	0004d0cb 	.word	0x0004d0cb
   1e844:	0004d0d3 	.word	0x0004d0d3
   1e848:	0004d114 	.word	0x0004d114
   1e84c:	0001e2d9 	.word	0x0001e2d9
   1e850:	0004d142 	.word	0x0004d142
   1e854:	0004d167 	.word	0x0004d167
   1e858:	20023a4c 	.word	0x20023a4c
   1e85c:	20023a10 	.word	0x20023a10
   1e860:	0001e1e5 	.word	0x0001e1e5
   1e864:	20023a5c 	.word	0x20023a5c
   1e868:	20023abc 	.word	0x20023abc
   1e86c:	0004d0ec 	.word	0x0004d0ec
   1e870:	0004d0fd 	.word	0x0004d0fd
   1e874:	0001e169 	.word	0x0001e169
   1e878:	200200c0 	.word	0x200200c0
   1e87c:	20023af4 	.word	0x20023af4
   1e880:	0001e1cd 	.word	0x0001e1cd

0001e884 <on_pairing_done>:
{
   1e884:	b510      	push	{r4, lr}
	if (association_with_pin || (buttons_captured > 0)) {
   1e886:	4c28      	ldr	r4, [pc, #160]	; (1e928 <on_pairing_done+0xa4>)
   1e888:	7822      	ldrb	r2, [r4, #0]
   1e88a:	b91a      	cbnz	r2, 1e894 <on_pairing_done+0x10>
   1e88c:	4b27      	ldr	r3, [pc, #156]	; (1e92c <on_pairing_done+0xa8>)
   1e88e:	681b      	ldr	r3, [r3, #0]
   1e890:	2b00      	cmp	r3, #0
   1e892:	dd11      	ble.n	1e8b8 <on_pairing_done+0x34>
		printk("Successful user association.\n");
   1e894:	4826      	ldr	r0, [pc, #152]	; (1e930 <on_pairing_done+0xac>)
   1e896:	f029 f818 	bl	478ca <printk>
		printk("The device will attempt to reconnect to ");
   1e89a:	4826      	ldr	r0, [pc, #152]	; (1e934 <on_pairing_done+0xb0>)
   1e89c:	f029 f815 	bl	478ca <printk>
		printk("nRF Cloud. It may reset in the process.\n");
   1e8a0:	4825      	ldr	r0, [pc, #148]	; (1e938 <on_pairing_done+0xb4>)
   1e8a2:	f029 f812 	bl	478ca <printk>
		printk("Manual reset may be required if connection ");
   1e8a6:	4825      	ldr	r0, [pc, #148]	; (1e93c <on_pairing_done+0xb8>)
   1e8a8:	f029 f80f 	bl	478ca <printk>
		printk("to nRF Cloud is not established within ");
   1e8ac:	4824      	ldr	r0, [pc, #144]	; (1e940 <on_pairing_done+0xbc>)
   1e8ae:	f029 f80c 	bl	478ca <printk>
		printk("20 - 30 seconds.\n");
   1e8b2:	4824      	ldr	r0, [pc, #144]	; (1e944 <on_pairing_done+0xc0>)
   1e8b4:	f029 f809 	bl	478ca <printk>
	if (!association_with_pin) {
   1e8b8:	7823      	ldrb	r3, [r4, #0]
   1e8ba:	2b00      	cmp	r3, #0
   1e8bc:	d032      	beq.n	1e924 <on_pairing_done+0xa0>
	err = cloud_disconnect(cloud_backend);
   1e8be:	4c22      	ldr	r4, [pc, #136]	; (1e948 <on_pairing_done+0xc4>)
	printk("Disconnecting from nRF cloud...\n");
   1e8c0:	4822      	ldr	r0, [pc, #136]	; (1e94c <on_pairing_done+0xc8>)
   1e8c2:	f029 f802 	bl	478ca <printk>
	err = cloud_disconnect(cloud_backend);
   1e8c6:	6820      	ldr	r0, [r4, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1e8c8:	b340      	cbz	r0, 1e91c <on_pairing_done+0x98>
	    || backend->api == NULL
   1e8ca:	6803      	ldr	r3, [r0, #0]
   1e8cc:	b333      	cbz	r3, 1e91c <on_pairing_done+0x98>
	    || backend->api->disconnect == NULL) {
   1e8ce:	68db      	ldr	r3, [r3, #12]
   1e8d0:	b323      	cbz	r3, 1e91c <on_pairing_done+0x98>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   1e8d2:	4798      	blx	r3
	if (err == 0) {
   1e8d4:	bb10      	cbnz	r0, 1e91c <on_pairing_done+0x98>
		printk("Reconnecting to cloud...\n");
   1e8d6:	481e      	ldr	r0, [pc, #120]	; (1e950 <on_pairing_done+0xcc>)
   1e8d8:	f028 fff7 	bl	478ca <printk>
		err = cloud_connect(cloud_backend);
   1e8dc:	6820      	ldr	r0, [r4, #0]
   1e8de:	f028 fb79 	bl	46fd4 <cloud_connect>
		if (err == 0) {
   1e8e2:	b1f8      	cbz	r0, 1e924 <on_pairing_done+0xa0>
		printk("Could not reconnect\n");
   1e8e4:	481b      	ldr	r0, [pc, #108]	; (1e954 <on_pairing_done+0xd0>)
		printk("Disconnection failed\n");
   1e8e6:	f028 fff0 	bl	478ca <printk>
	printk("Fallback to controlled reboot\n");
   1e8ea:	481b      	ldr	r0, [pc, #108]	; (1e958 <on_pairing_done+0xd4>)
   1e8ec:	f028 ffed 	bl	478ca <printk>
	printk("Shutting down LTE link...\n");
   1e8f0:	481a      	ldr	r0, [pc, #104]	; (1e95c <on_pairing_done+0xd8>)
   1e8f2:	f028 ffea 	bl	478ca <printk>
	err = lte_lc_power_off();
   1e8f6:	f00d fc39 	bl	2c16c <lte_lc_power_off>
	if (err) {
   1e8fa:	b188      	cbz	r0, 1e920 <on_pairing_done+0x9c>
		printk("Could not shut down link\n");
   1e8fc:	4818      	ldr	r0, [pc, #96]	; (1e960 <on_pairing_done+0xdc>)
		printk("LTE link disconnected\n");
   1e8fe:	f028 ffe4 	bl	478ca <printk>
	printk("Rebooting...\n");
   1e902:	4818      	ldr	r0, [pc, #96]	; (1e964 <on_pairing_done+0xe0>)
   1e904:	f028 ffe1 	bl	478ca <printk>
   1e908:	f001 ff0a 	bl	20720 <z_impl_log_panic>
	sys_reboot(SYS_REBOOT_COLD);
   1e90c:	2001      	movs	r0, #1
   1e90e:	f002 fb5b 	bl	20fc8 <sys_reboot>
}
   1e912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("**** Manual reboot required ***\n");
   1e916:	4814      	ldr	r0, [pc, #80]	; (1e968 <on_pairing_done+0xe4>)
   1e918:	f028 bfd7 	b.w	478ca <printk>
		printk("Disconnection failed\n");
   1e91c:	4813      	ldr	r0, [pc, #76]	; (1e96c <on_pairing_done+0xe8>)
   1e91e:	e7e2      	b.n	1e8e6 <on_pairing_done+0x62>
		printk("LTE link disconnected\n");
   1e920:	4813      	ldr	r0, [pc, #76]	; (1e970 <on_pairing_done+0xec>)
   1e922:	e7ec      	b.n	1e8fe <on_pairing_done+0x7a>
}
   1e924:	bd10      	pop	{r4, pc}
   1e926:	bf00      	nop
   1e928:	2002a6d6 	.word	0x2002a6d6
   1e92c:	20023a20 	.word	0x20023a20
   1e930:	0004cea4 	.word	0x0004cea4
   1e934:	0004cec2 	.word	0x0004cec2
   1e938:	0004ceeb 	.word	0x0004ceeb
   1e93c:	0004cf14 	.word	0x0004cf14
   1e940:	0004cf40 	.word	0x0004cf40
   1e944:	0004cf68 	.word	0x0004cf68
   1e948:	20023a28 	.word	0x20023a28
   1e94c:	0004cf7a 	.word	0x0004cf7a
   1e950:	0004cf9b 	.word	0x0004cf9b
   1e954:	0004cfb5 	.word	0x0004cfb5
   1e958:	0004cfe0 	.word	0x0004cfe0
   1e95c:	0004cfff 	.word	0x0004cfff
   1e960:	0004d01a 	.word	0x0004d01a
   1e964:	0004d04b 	.word	0x0004d04b
   1e968:	0004d059 	.word	0x0004d059
   1e96c:	0004cfca 	.word	0x0004cfca
   1e970:	0004d034 	.word	0x0004d034

0001e974 <cloud_event_handler>:
{
   1e974:	b570      	push	{r4, r5, r6, lr}
   1e976:	460c      	mov	r4, r1
	switch (evt->type) {
   1e978:	7809      	ldrb	r1, [r1, #0]
   1e97a:	2908      	cmp	r1, #8
   1e97c:	d869      	bhi.n	1ea52 <cloud_event_handler+0xde>
   1e97e:	e8df f001 	tbb	[pc, r1]
   1e982:	1c05      	.short	0x1c05
   1e984:	28262110 	.word	0x28262110
   1e988:	5930      	.short	0x5930
   1e98a:	60          	.byte	0x60
   1e98b:	00          	.byte	0x00
		printk("CLOUD_EVT_CONNECTED\n");
   1e98c:	4834      	ldr	r0, [pc, #208]	; (1ea60 <cloud_event_handler+0xec>)
   1e98e:	f028 ff9c 	bl	478ca <printk>
		k_delayed_work_cancel(&cloud_reboot_work);
   1e992:	4834      	ldr	r0, [pc, #208]	; (1ea64 <cloud_event_handler+0xf0>)
   1e994:	f020 fe52 	bl	3f63c <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1e998:	2004      	movs	r0, #4
}
   1e99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1e99e:	f000 ba37 	b.w	1ee10 <ui_led_set_pattern>
		printk("CLOUD_EVT_READY\n");
   1e9a2:	4831      	ldr	r0, [pc, #196]	; (1ea68 <cloud_event_handler+0xf4>)
   1e9a4:	f028 ff91 	bl	478ca <printk>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1e9a8:	2004      	movs	r0, #4
   1e9aa:	f000 fa31 	bl	1ee10 <ui_led_set_pattern>
		boot_write_img_confirmed();
   1e9ae:	f029 f80d 	bl	479cc <boot_write_img_confirmed>
}
   1e9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sensors_start();
   1e9b6:	f7ff bed3 	b.w	1e760 <sensors_start>
		printk("CLOUD_EVT_DISCONNECTED\n");
   1e9ba:	482c      	ldr	r0, [pc, #176]	; (1ea6c <cloud_event_handler+0xf8>)
   1e9bc:	f028 ff85 	bl	478ca <printk>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1e9c0:	2000      	movs	r0, #0
   1e9c2:	e7ea      	b.n	1e99a <cloud_event_handler+0x26>
		printk("CLOUD_EVT_ERROR\n");
   1e9c4:	482a      	ldr	r0, [pc, #168]	; (1ea70 <cloud_event_handler+0xfc>)
}
   1e9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("CLOUD_EVT_DATA_SENT\n");
   1e9ca:	f028 bf7e 	b.w	478ca <printk>
   1e9ce:	4829      	ldr	r0, [pc, #164]	; (1ea74 <cloud_event_handler+0x100>)
   1e9d0:	e7f9      	b.n	1e9c6 <cloud_event_handler+0x52>
		printk("CLOUD_EVT_DATA_RECEIVED\n");
   1e9d2:	4829      	ldr	r0, [pc, #164]	; (1ea78 <cloud_event_handler+0x104>)
   1e9d4:	f028 ff79 	bl	478ca <printk>
		cloud_decode_command(evt->data.msg.buf);
   1e9d8:	6860      	ldr	r0, [r4, #4]
}
   1e9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_decode_command(evt->data.msg.buf);
   1e9de:	f000 be45 	b.w	1f66c <cloud_decode_command>
		printk("CLOUD_EVT_PAIR_REQUEST\n");
   1e9e2:	4826      	ldr	r0, [pc, #152]	; (1ea7c <cloud_event_handler+0x108>)
   1e9e4:	f028 ff71 	bl	478ca <printk>
	if (evt->data.pair_info.type == CLOUD_PAIR_SEQUENCE) {
   1e9e8:	7923      	ldrb	r3, [r4, #4]
   1e9ea:	b9d3      	cbnz	r3, 1ea22 <cloud_event_handler+0xae>
		if (!atomic_get(&pattern_recording)) {
   1e9ec:	4d24      	ldr	r5, [pc, #144]	; (1ea80 <cloud_event_handler+0x10c>)
   1e9ee:	4628      	mov	r0, r5
   1e9f0:	f028 fb02 	bl	46ff8 <atomic_get>
   1e9f4:	4606      	mov	r6, r0
   1e9f6:	bb88      	cbnz	r0, 1ea5c <cloud_event_handler+0xe8>
			ui_led_set_pattern(UI_CLOUD_PAIRING);
   1e9f8:	2005      	movs	r0, #5
   1e9fa:	f000 fa09 	bl	1ee10 <ui_led_set_pattern>
   1e9fe:	2301      	movs	r3, #1
   1ea00:	e8d5 2fef 	ldaex	r2, [r5]
   1ea04:	e8c5 3fe1 	stlex	r1, r3, [r5]
   1ea08:	2900      	cmp	r1, #0
   1ea0a:	d1f9      	bne.n	1ea00 <cloud_event_handler+0x8c>
			buttons_captured = 0;
   1ea0c:	4b1d      	ldr	r3, [pc, #116]	; (1ea84 <cloud_event_handler+0x110>)
			printk("Please enter the user association pattern ");
   1ea0e:	481e      	ldr	r0, [pc, #120]	; (1ea88 <cloud_event_handler+0x114>)
			buttons_captured = 0;
   1ea10:	601e      	str	r6, [r3, #0]
			buttons_to_capture = *evt->data.pair_info.buf;
   1ea12:	68a3      	ldr	r3, [r4, #8]
   1ea14:	781a      	ldrb	r2, [r3, #0]
   1ea16:	4b1d      	ldr	r3, [pc, #116]	; (1ea8c <cloud_event_handler+0x118>)
   1ea18:	601a      	str	r2, [r3, #0]
			printk("Please enter the user association pattern ");
   1ea1a:	f028 ff56 	bl	478ca <printk>
			printk("using the buttons and switches\n");
   1ea1e:	481c      	ldr	r0, [pc, #112]	; (1ea90 <cloud_event_handler+0x11c>)
   1ea20:	e7d1      	b.n	1e9c6 <cloud_event_handler+0x52>
	} else if (evt->data.pair_info.type == CLOUD_PAIR_PIN) {
   1ea22:	2b01      	cmp	r3, #1
   1ea24:	d11a      	bne.n	1ea5c <cloud_event_handler+0xe8>
		association_with_pin = true;
   1ea26:	4a1b      	ldr	r2, [pc, #108]	; (1ea94 <cloud_event_handler+0x120>)
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1ea28:	2005      	movs	r0, #5
		association_with_pin = true;
   1ea2a:	7013      	strb	r3, [r2, #0]
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1ea2c:	f000 f9f0 	bl	1ee10 <ui_led_set_pattern>
		printk("Waiting for cloud association with PIN\n");
   1ea30:	4819      	ldr	r0, [pc, #100]	; (1ea98 <cloud_event_handler+0x124>)
   1ea32:	e7c8      	b.n	1e9c6 <cloud_event_handler+0x52>
		printk("CLOUD_EVT_PAIR_DONE\n");
   1ea34:	4819      	ldr	r0, [pc, #100]	; (1ea9c <cloud_event_handler+0x128>)
   1ea36:	f028 ff48 	bl	478ca <printk>
}
   1ea3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		on_pairing_done();
   1ea3e:	f7ff bf21 	b.w	1e884 <on_pairing_done>
		printk("CLOUD_EVT_FOTA_DONE\n");
   1ea42:	4817      	ldr	r0, [pc, #92]	; (1eaa0 <cloud_event_handler+0x12c>)
   1ea44:	f028 ff41 	bl	478ca <printk>
}
   1ea48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1ea4c:	2001      	movs	r0, #1
   1ea4e:	f002 babb 	b.w	20fc8 <sys_reboot>
		printk("Unknown cloud event type: %d\n", evt->type);
   1ea52:	4814      	ldr	r0, [pc, #80]	; (1eaa4 <cloud_event_handler+0x130>)
}
   1ea54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Unknown cloud event type: %d\n", evt->type);
   1ea58:	f028 bf37 	b.w	478ca <printk>
}
   1ea5c:	bd70      	pop	{r4, r5, r6, pc}
   1ea5e:	bf00      	nop
   1ea60:	0004c950 	.word	0x0004c950
   1ea64:	20023a2c 	.word	0x20023a2c
   1ea68:	0004c965 	.word	0x0004c965
   1ea6c:	0004c976 	.word	0x0004c976
   1ea70:	0004c98e 	.word	0x0004c98e
   1ea74:	0004c99f 	.word	0x0004c99f
   1ea78:	0004c9b4 	.word	0x0004c9b4
   1ea7c:	0004c9cd 	.word	0x0004c9cd
   1ea80:	20023a9c 	.word	0x20023a9c
   1ea84:	20023a20 	.word	0x20023a20
   1ea88:	0004c9e5 	.word	0x0004c9e5
   1ea8c:	20023a24 	.word	0x20023a24
   1ea90:	0004ca10 	.word	0x0004ca10
   1ea94:	2002a6d6 	.word	0x2002a6d6
   1ea98:	0004ca30 	.word	0x0004ca30
   1ea9c:	0004ca58 	.word	0x0004ca58
   1eaa0:	0004ca6d 	.word	0x0004ca6d
   1eaa4:	0004ca82 	.word	0x0004ca82

0001eaa8 <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   1eaa8:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   1eaaa:	f006 ff05 	bl	258b8 <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1eaae:	4b0e      	ldr	r3, [pc, #56]	; (1eae8 <handle_bsdlib_init_ret+0x40>)
	int ret = bsdlib_get_init_ret();
   1eab0:	4601      	mov	r1, r0
	switch (ret) {
   1eab2:	4298      	cmp	r0, r3
   1eab4:	dc06      	bgt.n	1eac4 <handle_bsdlib_init_ret+0x1c>
   1eab6:	3b01      	subs	r3, #1
   1eab8:	4298      	cmp	r0, r3
   1eaba:	da0e      	bge.n	1eada <handle_bsdlib_init_ret+0x32>
   1eabc:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   1eac0:	dc0f      	bgt.n	1eae2 <handle_bsdlib_init_ret+0x3a>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   1eac2:	bd08      	pop	{r3, pc}
	switch (ret) {
   1eac4:	4b09      	ldr	r3, [pc, #36]	; (1eaec <handle_bsdlib_init_ret+0x44>)
   1eac6:	4298      	cmp	r0, r3
   1eac8:	d1fb      	bne.n	1eac2 <handle_bsdlib_init_ret+0x1a>
		printk("MODEM UPDATE OK. Will run new firmware\n");
   1eaca:	4809      	ldr	r0, [pc, #36]	; (1eaf0 <handle_bsdlib_init_ret+0x48>)
   1eacc:	f028 fefd 	bl	478ca <printk>
}
   1ead0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1ead4:	2001      	movs	r0, #1
   1ead6:	f002 ba77 	b.w	20fc8 <sys_reboot>
		printk("MODEM UPDATE ERROR %d. Will run old firmware\n", ret);
   1eada:	4806      	ldr	r0, [pc, #24]	; (1eaf4 <handle_bsdlib_init_ret+0x4c>)
		printk("MODEM UPDATE FATAL ERROR %d. Modem failiure\n", ret);
   1eadc:	f028 fef5 	bl	478ca <printk>
   1eae0:	e7f6      	b.n	1ead0 <handle_bsdlib_init_ret+0x28>
   1eae2:	4805      	ldr	r0, [pc, #20]	; (1eaf8 <handle_bsdlib_init_ret+0x50>)
   1eae4:	e7fa      	b.n	1eadc <handle_bsdlib_init_ret+0x34>
   1eae6:	bf00      	nop
   1eae8:	04400004 	.word	0x04400004
   1eaec:	05500001 	.word	0x05500001
   1eaf0:	0004cb31 	.word	0x0004cb31
   1eaf4:	0004cb59 	.word	0x0004cb59
   1eaf8:	0004cb87 	.word	0x0004cb87

0001eafc <main>:

void main(void)
{
   1eafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	printk("Asset tracker started\n");
   1eb00:	4881      	ldr	r0, [pc, #516]	; (1ed08 <main+0x20c>)
   1eb02:	f028 fee2 	bl	478ca <printk>

	handle_bsdlib_init_ret();
   1eb06:	f7ff ffcf 	bl	1eaa8 <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   1eb0a:	4880      	ldr	r0, [pc, #512]	; (1ed0c <main+0x210>)
   1eb0c:	f008 fc38 	bl	27380 <cloud_get_binding>
   1eb10:	4d7f      	ldr	r5, [pc, #508]	; (1ed10 <main+0x214>)
   1eb12:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   1eb14:	b970      	cbnz	r0, 1eb34 <main+0x38>
   1eb16:	497f      	ldr	r1, [pc, #508]	; (1ed14 <main+0x218>)
   1eb18:	f240 4367 	movw	r3, #1127	; 0x467
   1eb1c:	4a7e      	ldr	r2, [pc, #504]	; (1ed18 <main+0x21c>)
   1eb1e:	487f      	ldr	r0, [pc, #508]	; (1ed1c <main+0x220>)
   1eb20:	f028 fed3 	bl	478ca <printk>
   1eb24:	487e      	ldr	r0, [pc, #504]	; (1ed20 <main+0x224>)
   1eb26:	f028 fed0 	bl	478ca <printk>
   1eb2a:	f240 4167 	movw	r1, #1127	; 0x467
   1eb2e:	487a      	ldr	r0, [pc, #488]	; (1ed18 <main+0x21c>)
   1eb30:	f028 fed8 	bl	478e4 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   1eb34:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL
   1eb36:	2800      	cmp	r0, #0
   1eb38:	f000 80a7 	beq.w	1ec8a <main+0x18e>
	    || backend->api == NULL
   1eb3c:	6803      	ldr	r3, [r0, #0]
   1eb3e:	2b00      	cmp	r3, #0
   1eb40:	f000 80a3 	beq.w	1ec8a <main+0x18e>
	    || backend->api->init == NULL) {
   1eb44:	681b      	ldr	r3, [r3, #0]
   1eb46:	2b00      	cmp	r3, #0
   1eb48:	f000 809f 	beq.w	1ec8a <main+0x18e>
	return backend->api->init(backend, handler);
   1eb4c:	4975      	ldr	r1, [pc, #468]	; (1ed24 <main+0x228>)
   1eb4e:	4798      	blx	r3
	if (ret) {
   1eb50:	4604      	mov	r4, r0
   1eb52:	b130      	cbz	r0, 1eb62 <main+0x66>
		printk("Cloud backend could not be initialized, error: %d\n",
   1eb54:	4874      	ldr	r0, [pc, #464]	; (1ed28 <main+0x22c>)
   1eb56:	4621      	mov	r1, r4
   1eb58:	f028 feb7 	bl	478ca <printk>
			ret);
		cloud_error_handler(ret);
   1eb5c:	4620      	mov	r0, r4
   1eb5e:	f028 fa53 	bl	47008 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   1eb62:	4872      	ldr	r0, [pc, #456]	; (1ed2c <main+0x230>)
   1eb64:	f000 f95a 	bl	1ee1c <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   1eb68:	4871      	ldr	r0, [pc, #452]	; (1ed30 <main+0x234>)
   1eb6a:	f000 fdb1 	bl	1f6d0 <cloud_decode_init>
	if (ret) {
   1eb6e:	4604      	mov	r4, r0
   1eb70:	b130      	cbz	r0, 1eb80 <main+0x84>
		printk("Cloud command decoder could not be initialized, error: %d\n", ret);
   1eb72:	4601      	mov	r1, r0
   1eb74:	486f      	ldr	r0, [pc, #444]	; (1ed34 <main+0x238>)
   1eb76:	f028 fea8 	bl	478ca <printk>
		cloud_error_handler(ret);
   1eb7a:	4620      	mov	r0, r4
   1eb7c:	f028 fa44 	bl	47008 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1eb80:	2400      	movs	r4, #0
   1eb82:	4b6d      	ldr	r3, [pc, #436]	; (1ed38 <main+0x23c>)
   1eb84:	4a6d      	ldr	r2, [pc, #436]	; (1ed3c <main+0x240>)
   1eb86:	601c      	str	r4, [r3, #0]
   1eb88:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1eb8c:	4b6c      	ldr	r3, [pc, #432]	; (1ed40 <main+0x244>)
   1eb8e:	4a6d      	ldr	r2, [pc, #436]	; (1ed44 <main+0x248>)
   1eb90:	601c      	str	r4, [r3, #0]
   1eb92:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1eb96:	4b6c      	ldr	r3, [pc, #432]	; (1ed48 <main+0x24c>)
   1eb98:	4a6c      	ldr	r2, [pc, #432]	; (1ed4c <main+0x250>)
	k_delayed_work_init(&send_env_data_work, send_env_data_work_fn);
   1eb9a:	496d      	ldr	r1, [pc, #436]	; (1ed50 <main+0x254>)
   1eb9c:	486d      	ldr	r0, [pc, #436]	; (1ed54 <main+0x258>)
   1eb9e:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1eba2:	601c      	str	r4, [r3, #0]
   1eba4:	f02b fb24 	bl	4a1f0 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   1eba8:	496b      	ldr	r1, [pc, #428]	; (1ed58 <main+0x25c>)
   1ebaa:	486c      	ldr	r0, [pc, #432]	; (1ed5c <main+0x260>)
   1ebac:	f02b fb20 	bl	4a1f0 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   1ebb0:	496b      	ldr	r1, [pc, #428]	; (1ed60 <main+0x264>)
   1ebb2:	486c      	ldr	r0, [pc, #432]	; (1ed64 <main+0x268>)
   1ebb4:	f02b fb1c 	bl	4a1f0 <k_delayed_work_init>
   1ebb8:	4b6b      	ldr	r3, [pc, #428]	; (1ed68 <main+0x26c>)
   1ebba:	4a6c      	ldr	r2, [pc, #432]	; (1ed6c <main+0x270>)
   1ebbc:	601c      	str	r4, [r3, #0]
   1ebbe:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1ebc2:	4b6b      	ldr	r3, [pc, #428]	; (1ed70 <main+0x274>)
   1ebc4:	4a6b      	ldr	r2, [pc, #428]	; (1ed74 <main+0x278>)
		printk("Connecting to LTE network. ");
   1ebc6:	486c      	ldr	r0, [pc, #432]	; (1ed78 <main+0x27c>)
   1ebc8:	601c      	str	r4, [r3, #0]
   1ebca:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1ebce:	f028 fe7c 	bl	478ca <printk>
		printk("This may take several minutes.\n");
   1ebd2:	486a      	ldr	r0, [pc, #424]	; (1ed7c <main+0x280>)
   1ebd4:	f028 fe79 	bl	478ca <printk>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   1ebd8:	2001      	movs	r0, #1
   1ebda:	f000 f919 	bl	1ee10 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   1ebde:	f02b f95e 	bl	49e9e <lte_lc_init_and_connect>
		if (err) {
   1ebe2:	b138      	cbz	r0, 1ebf4 <main+0xf8>
			printk("LTE link could not be established.\n");
   1ebe4:	4866      	ldr	r0, [pc, #408]	; (1ed80 <main+0x284>)
   1ebe6:	f028 fe70 	bl	478ca <printk>
   1ebea:	f001 fd99 	bl	20720 <z_impl_log_panic>
	sys_reboot(0);
   1ebee:	4620      	mov	r0, r4
   1ebf0:	f002 f9ea 	bl	20fc8 <sys_reboot>
		printk("Connected to LTE network\n");
   1ebf4:	4863      	ldr	r0, [pc, #396]	; (1ed84 <main+0x288>)
   1ebf6:	f028 fe68 	bl	478ca <printk>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   1ebfa:	2002      	movs	r0, #2
   1ebfc:	f000 f908 	bl	1ee10 <ui_led_set_pattern>
	}

	work_init();
	modem_configure();
connect:
	ret = cloud_connect(cloud_backend);
   1ec00:	6828      	ldr	r0, [r5, #0]
   1ec02:	f028 f9e7 	bl	46fd4 <cloud_connect>
	if (ret) {
   1ec06:	4604      	mov	r4, r0
   1ec08:	2800      	cmp	r0, #0
   1ec0a:	d041      	beq.n	1ec90 <main+0x194>
		printk("cloud_connect failed: %d\n", ret);
   1ec0c:	4601      	mov	r1, r0
   1ec0e:	485e      	ldr	r0, [pc, #376]	; (1ed88 <main+0x28c>)
   1ec10:	f028 fe5b 	bl	478ca <printk>
		cloud_error_handler(ret);
   1ec14:	4620      	mov	r0, r4
   1ec16:	f028 f9f7 	bl	47008 <cloud_error_handler>
	} else {
		k_delayed_work_submit(&cloud_reboot_work,
				      CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
   1ec1a:	2300      	movs	r3, #0
   1ec1c:	f8ad 3006 	strh.w	r3, [sp, #6]
		{
			.fd = cloud_backend->config->socket,
   1ec20:	682b      	ldr	r3, [r5, #0]
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   1ec22:	4e5a      	ldr	r6, [pc, #360]	; (1ed8c <main+0x290>)
   1ec24:	685b      	ldr	r3, [r3, #4]
   1ec26:	4637      	mov	r7, r6
	struct pollfd fds[] = {
   1ec28:	689b      	ldr	r3, [r3, #8]
   1ec2a:	4c59      	ldr	r4, [pc, #356]	; (1ed90 <main+0x294>)
   1ec2c:	9300      	str	r3, [sp, #0]
   1ec2e:	2301      	movs	r3, #1
   1ec30:	f8ad 3004 	strh.w	r3, [sp, #4]
   1ec34:	6833      	ldr	r3, [r6, #0]
   1ec36:	b94b      	cbnz	r3, 1ec4c <main+0x150>
   1ec38:	4956      	ldr	r1, [pc, #344]	; (1ed94 <main+0x298>)
   1ec3a:	4838      	ldr	r0, [pc, #224]	; (1ed1c <main+0x220>)
   1ec3c:	234d      	movs	r3, #77	; 0x4d
   1ec3e:	4622      	mov	r2, r4
   1ec40:	f028 fe43 	bl	478ca <printk>
   1ec44:	214d      	movs	r1, #77	; 0x4d
   1ec46:	4620      	mov	r0, r4
   1ec48:	f028 fe4c 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   1ec4c:	683b      	ldr	r3, [r7, #0]
   1ec4e:	699b      	ldr	r3, [r3, #24]
   1ec50:	b94b      	cbnz	r3, 1ec66 <main+0x16a>
   1ec52:	4951      	ldr	r1, [pc, #324]	; (1ed98 <main+0x29c>)
   1ec54:	4831      	ldr	r0, [pc, #196]	; (1ed1c <main+0x220>)
   1ec56:	234e      	movs	r3, #78	; 0x4e
   1ec58:	4622      	mov	r2, r4
   1ec5a:	f028 fe36 	bl	478ca <printk>
   1ec5e:	214e      	movs	r1, #78	; 0x4e
   1ec60:	4620      	mov	r0, r4
   1ec62:	f028 fe3f 	bl	478e4 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   1ec66:	683b      	ldr	r3, [r7, #0]
   1ec68:	4a4c      	ldr	r2, [pc, #304]	; (1ed9c <main+0x2a0>)
   1ec6a:	699b      	ldr	r3, [r3, #24]
   1ec6c:	2101      	movs	r1, #1
   1ec6e:	4668      	mov	r0, sp
   1ec70:	4798      	blx	r3
		 * must close the connection.
		 */
		ret = poll(fds, ARRAY_SIZE(fds),
			K_SECONDS(CONFIG_MQTT_KEEPALIVE / 3));

		if (ret < 0) {
   1ec72:	f1b0 0800 	subs.w	r8, r0, #0
   1ec76:	da11      	bge.n	1ec9c <main+0x1a0>
			printk("poll() returned an error: %d\n", ret);
   1ec78:	4641      	mov	r1, r8
   1ec7a:	4849      	ldr	r0, [pc, #292]	; (1eda0 <main+0x2a4>)
   1ec7c:	f028 fe25 	bl	478ca <printk>
			error_handler(ERROR_CLOUD, ret);
   1ec80:	4641      	mov	r1, r8
   1ec82:	2000      	movs	r0, #0
   1ec84:	f7ff faf0 	bl	1e268 <error_handler>
			continue;
   1ec88:	e7d4      	b.n	1ec34 <main+0x138>
		return -ENOTSUP;
   1ec8a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ec8e:	e761      	b.n	1eb54 <main+0x58>
		k_delayed_work_submit(&cloud_reboot_work,
   1ec90:	f247 5130 	movw	r1, #30000	; 0x7530
   1ec94:	4833      	ldr	r0, [pc, #204]	; (1ed64 <main+0x268>)
   1ec96:	f7ff fa23 	bl	1e0e0 <k_delayed_work_submit>
   1ec9a:	e7be      	b.n	1ec1a <main+0x11e>
		}

		if (ret == 0) {
   1ec9c:	d10a      	bne.n	1ecb4 <main+0x1b8>
			cloud_ping(cloud_backend);
   1ec9e:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_ping(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL) {
   1eca0:	2800      	cmp	r0, #0
   1eca2:	d0c7      	beq.n	1ec34 <main+0x138>
   1eca4:	6803      	ldr	r3, [r0, #0]
   1eca6:	2b00      	cmp	r3, #0
   1eca8:	d0c4      	beq.n	1ec34 <main+0x138>
		return -ENOTSUP;
	}

	/* Ping will only be sent if the backend has implemented it. */
	if (backend->api->ping != NULL) {
   1ecaa:	695b      	ldr	r3, [r3, #20]
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	d0c1      	beq.n	1ec34 <main+0x138>
		return backend->api->ping(backend);
   1ecb0:	4798      	blx	r3
   1ecb2:	e7bf      	b.n	1ec34 <main+0x138>
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   1ecb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ecb8:	07da      	lsls	r2, r3, #31
   1ecba:	d506      	bpl.n	1ecca <main+0x1ce>
			cloud_input(cloud_backend);
   1ecbc:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1ecbe:	b120      	cbz	r0, 1ecca <main+0x1ce>
	    || backend->api == NULL
   1ecc0:	6803      	ldr	r3, [r0, #0]
   1ecc2:	b113      	cbz	r3, 1ecca <main+0x1ce>
	    || backend->api->input == NULL) {
   1ecc4:	699b      	ldr	r3, [r3, #24]
   1ecc6:	b103      	cbz	r3, 1ecca <main+0x1ce>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   1ecc8:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   1ecca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ecce:	f013 0920 	ands.w	r9, r3, #32
   1ecd2:	d00a      	beq.n	1ecea <main+0x1ee>
			printk("Socket error: POLLNVAL\n");
   1ecd4:	4833      	ldr	r0, [pc, #204]	; (1eda4 <main+0x2a8>)
   1ecd6:	f028 fdf8 	bl	478ca <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1ecda:	f06f 0104 	mvn.w	r1, #4
   1ecde:	2000      	movs	r0, #0
			return;
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			printk("Socket error: POLLERR\n");
			error_handler(ERROR_CLOUD, -EIO);
   1ece0:	f7ff fac2 	bl	1e268 <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   1ece4:	b003      	add	sp, #12
   1ece6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   1ecea:	f013 0810 	ands.w	r8, r3, #16
   1ecee:	d001      	beq.n	1ecf4 <main+0x1f8>
			printk("Socket error: POLLHUP\n");
   1ecf0:	482d      	ldr	r0, [pc, #180]	; (1eda8 <main+0x2ac>)
   1ecf2:	e7f0      	b.n	1ecd6 <main+0x1da>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   1ecf4:	071b      	lsls	r3, r3, #28
   1ecf6:	d59d      	bpl.n	1ec34 <main+0x138>
			printk("Socket error: POLLERR\n");
   1ecf8:	482c      	ldr	r0, [pc, #176]	; (1edac <main+0x2b0>)
   1ecfa:	f028 fde6 	bl	478ca <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1ecfe:	f06f 0104 	mvn.w	r1, #4
   1ed02:	4640      	mov	r0, r8
   1ed04:	e7ec      	b.n	1ece0 <main+0x1e4>
   1ed06:	bf00      	nop
   1ed08:	0004cca4 	.word	0x0004cca4
   1ed0c:	0004ccbb 	.word	0x0004ccbb
   1ed10:	20023a28 	.word	0x20023a28
   1ed14:	0004ccd3 	.word	0x0004ccd3
   1ed18:	0004ccc5 	.word	0x0004ccc5
   1ed1c:	0004ccf0 	.word	0x0004ccf0
   1ed20:	0004cd0d 	.word	0x0004cd0d
   1ed24:	0001e975 	.word	0x0001e975
   1ed28:	0004cd2b 	.word	0x0004cd2b
   1ed2c:	0001e515 	.word	0x0001e515
   1ed30:	00047011 	.word	0x00047011
   1ed34:	0004cd5e 	.word	0x0004cd5e
   1ed38:	20023ae8 	.word	0x20023ae8
   1ed3c:	0001e509 	.word	0x0001e509
   1ed40:	20023aac 	.word	0x20023aac
   1ed44:	0001e4fd 	.word	0x0001e4fd
   1ed48:	20023adc 	.word	0x20023adc
   1ed4c:	0001e4f1 	.word	0x0001e4f1
   1ed50:	0001e65d 	.word	0x0001e65d
   1ed54:	20023abc 	.word	0x20023abc
   1ed58:	0001e0f1 	.word	0x0001e0f1
   1ed5c:	20023a7c 	.word	0x20023a7c
   1ed60:	00046fff 	.word	0x00046fff
   1ed64:	20023a2c 	.word	0x20023a2c
   1ed68:	20023a4c 	.word	0x20023a4c
   1ed6c:	0001e3d5 	.word	0x0001e3d5
   1ed70:	20023aa0 	.word	0x20023aa0
   1ed74:	0001e481 	.word	0x0001e481
   1ed78:	0004cd99 	.word	0x0004cd99
   1ed7c:	0004d6cc 	.word	0x0004d6cc
   1ed80:	0004cdb5 	.word	0x0004cdb5
   1ed84:	0004cdd9 	.word	0x0004cdd9
   1ed88:	0004c936 	.word	0x0004c936
   1ed8c:	20023bf8 	.word	0x20023bf8
   1ed90:	0004cdf3 	.word	0x0004cdf3
   1ed94:	0004ce24 	.word	0x0004ce24
   1ed98:	0004ce2f 	.word	0x0004ce2f
   1ed9c:	00061a80 	.word	0x00061a80
   1eda0:	0004ce40 	.word	0x0004ce40
   1eda4:	0004ce5e 	.word	0x0004ce5e
   1eda8:	0004ce76 	.word	0x0004ce76
   1edac:	0004ce8d 	.word	0x0004ce8d

0001edb0 <orientation_detector_init>:
	return 0;
}

void orientation_detector_init(struct device *accel_device)
{
	dev = accel_device;
   1edb0:	4b01      	ldr	r3, [pc, #4]	; (1edb8 <orientation_detector_init+0x8>)
   1edb2:	6018      	str	r0, [r3, #0]
}
   1edb4:	4770      	bx	lr
   1edb6:	bf00      	nop
   1edb8:	20023b08 	.word	0x20023b08

0001edbc <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   1edbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1edbe:	4605      	mov	r5, r0
   1edc0:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   1edc2:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   1edc4:	4f11      	ldr	r7, [pc, #68]	; (1ee0c <button_handler+0x50>)
	while (has_changed) {
   1edc6:	b90c      	cbnz	r4, 1edcc <button_handler+0x10>
	}
}
   1edc8:	b003      	add	sp, #12
   1edca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1edcc:	2300      	movs	r3, #0
   1edce:	1c59      	adds	r1, r3, #1
			if (has_changed & BIT(i)) {
   1edd0:	fa24 f303 	lsr.w	r3, r4, r3
   1edd4:	f013 0001 	ands.w	r0, r3, #1
   1edd8:	b2ca      	uxtb	r2, r1
   1edda:	d103      	bne.n	1ede4 <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   1eddc:	2920      	cmp	r1, #32
   1edde:	460b      	mov	r3, r1
   1ede0:	d1f5      	bne.n	1edce <button_handler+0x12>
		btn_num = 0;
   1ede2:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   1ede4:	1e53      	subs	r3, r2, #1
   1ede6:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   1edea:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   1edee:	43db      	mvns	r3, r3
		evt.button = btn_num;
   1edf0:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   1edf2:	f003 0301 	and.w	r3, r3, #1
   1edf6:	aa02      	add	r2, sp, #8
   1edf8:	f802 3d08 	strb.w	r3, [r2, #-8]!
		has_changed &= ~(1UL << (btn_num - 1));
   1edfc:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   1ee00:	683b      	ldr	r3, [r7, #0]
   1ee02:	e892 0003 	ldmia.w	r2, {r0, r1}
   1ee06:	4798      	blx	r3
   1ee08:	e7dd      	b.n	1edc6 <button_handler+0xa>
   1ee0a:	bf00      	nop
   1ee0c:	20023b0c 	.word	0x20023b0c

0001ee10 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   1ee10:	4b01      	ldr	r3, [pc, #4]	; (1ee18 <ui_led_set_pattern+0x8>)
   1ee12:	7018      	strb	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
   1ee14:	f000 ba88 	b.w	1f328 <ui_led_set_effect>
   1ee18:	2002a6de 	.word	0x2002a6de

0001ee1c <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   1ee1c:	b538      	push	{r3, r4, r5, lr}
   1ee1e:	4605      	mov	r5, r0
	int err = 0;

#ifdef CONFIG_UI_LED_USE_PWM
	err = ui_leds_init();
   1ee20:	f000 fa4c 	bl	1f2bc <ui_leds_init>
	if (err) {
   1ee24:	4604      	mov	r4, r0
   1ee26:	b188      	cbz	r0, 1ee4c <ui_init+0x30>
		LOG_ERR("Error when initializing PWM controlled LEDs");
   1ee28:	2301      	movs	r3, #1
   1ee2a:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1ee2e:	4a29      	ldr	r2, [pc, #164]	; (1eed4 <ui_init+0xb8>)
   1ee30:	f363 0002 	bfi	r0, r3, #0, #3
   1ee34:	4b28      	ldr	r3, [pc, #160]	; (1eed8 <ui_init+0xbc>)
   1ee36:	f36f 00c5 	bfc	r0, #3, #3
   1ee3a:	1a9b      	subs	r3, r3, r2
   1ee3c:	08db      	lsrs	r3, r3, #3
   1ee3e:	f363 108f 	bfi	r0, r3, #6, #10
   1ee42:	4926      	ldr	r1, [pc, #152]	; (1eedc <ui_init+0xc0>)
   1ee44:	f028 fd5e 	bl	47904 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   1ee48:	4620      	mov	r0, r4
   1ee4a:	bd38      	pop	{r3, r4, r5, pc}
	if (cb) {
   1ee4c:	b1c5      	cbz	r5, 1ee80 <ui_init+0x64>
		callback  = cb;
   1ee4e:	4b24      	ldr	r3, [pc, #144]	; (1eee0 <ui_init+0xc4>)
		err = dk_buttons_init(button_handler);
   1ee50:	4824      	ldr	r0, [pc, #144]	; (1eee4 <ui_init+0xc8>)
		callback  = cb;
   1ee52:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   1ee54:	f007 f914 	bl	26080 <dk_buttons_init>
		if (err) {
   1ee58:	4604      	mov	r4, r0
   1ee5a:	b188      	cbz	r0, 1ee80 <ui_init+0x64>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   1ee5c:	2301      	movs	r3, #1
   1ee5e:	f04f 0000 	mov.w	r0, #0
   1ee62:	4a1c      	ldr	r2, [pc, #112]	; (1eed4 <ui_init+0xb8>)
   1ee64:	f363 0002 	bfi	r0, r3, #0, #3
   1ee68:	4b1b      	ldr	r3, [pc, #108]	; (1eed8 <ui_init+0xbc>)
   1ee6a:	f36f 00c5 	bfc	r0, #3, #3
   1ee6e:	1a9b      	subs	r3, r3, r2
   1ee70:	4622      	mov	r2, r4
   1ee72:	08db      	lsrs	r3, r3, #3
   1ee74:	491c      	ldr	r1, [pc, #112]	; (1eee8 <ui_init+0xcc>)
   1ee76:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not enable NMOS control, err code: %d\n", err);
   1ee7a:	f028 fd43 	bl	47904 <log_string_sync>
		return err;
   1ee7e:	e7e3      	b.n	1ee48 <ui_init+0x2c>
	err = ui_buzzer_init();
   1ee80:	f000 f838 	bl	1eef4 <ui_buzzer_init>
	if (err) {
   1ee84:	4604      	mov	r4, r0
   1ee86:	b178      	cbz	r0, 1eea8 <ui_init+0x8c>
		LOG_ERR("Could not enable buzzer, err code: %d\n", err);
   1ee88:	2301      	movs	r3, #1
   1ee8a:	f04f 0000 	mov.w	r0, #0
   1ee8e:	4a11      	ldr	r2, [pc, #68]	; (1eed4 <ui_init+0xb8>)
   1ee90:	f363 0002 	bfi	r0, r3, #0, #3
   1ee94:	4b10      	ldr	r3, [pc, #64]	; (1eed8 <ui_init+0xbc>)
   1ee96:	f36f 00c5 	bfc	r0, #3, #3
   1ee9a:	1a9b      	subs	r3, r3, r2
   1ee9c:	08db      	lsrs	r3, r3, #3
   1ee9e:	f363 108f 	bfi	r0, r3, #6, #10
   1eea2:	4622      	mov	r2, r4
   1eea4:	4911      	ldr	r1, [pc, #68]	; (1eeec <ui_init+0xd0>)
   1eea6:	e7e8      	b.n	1ee7a <ui_init+0x5e>
	err = ui_nmos_init();
   1eea8:	f000 f8b0 	bl	1f00c <ui_nmos_init>
	if (err) {
   1eeac:	4604      	mov	r4, r0
   1eeae:	2800      	cmp	r0, #0
   1eeb0:	d0ca      	beq.n	1ee48 <ui_init+0x2c>
		LOG_ERR("Could not enable NMOS control, err code: %d\n", err);
   1eeb2:	2301      	movs	r3, #1
   1eeb4:	f04f 0000 	mov.w	r0, #0
   1eeb8:	4a06      	ldr	r2, [pc, #24]	; (1eed4 <ui_init+0xb8>)
   1eeba:	f363 0002 	bfi	r0, r3, #0, #3
   1eebe:	4b06      	ldr	r3, [pc, #24]	; (1eed8 <ui_init+0xbc>)
   1eec0:	f36f 00c5 	bfc	r0, #3, #3
   1eec4:	1a9b      	subs	r3, r3, r2
   1eec6:	08db      	lsrs	r3, r3, #3
   1eec8:	f363 108f 	bfi	r0, r3, #6, #10
   1eecc:	4622      	mov	r2, r4
   1eece:	4908      	ldr	r1, [pc, #32]	; (1eef0 <ui_init+0xd4>)
   1eed0:	e7d3      	b.n	1ee7a <ui_init+0x5e>
   1eed2:	bf00      	nop
   1eed4:	0004a688 	.word	0x0004a688
   1eed8:	0004a7c8 	.word	0x0004a7c8
   1eedc:	0004d24d 	.word	0x0004d24d
   1eee0:	20023b0c 	.word	0x20023b0c
   1eee4:	0001edbd 	.word	0x0001edbd
   1eee8:	0004d279 	.word	0x0004d279
   1eeec:	0004d2a5 	.word	0x0004d2a5
   1eef0:	0004d2cc 	.word	0x0004d2cc

0001eef4 <ui_buzzer_init>:

	return err;
}

int ui_buzzer_init(void)
{
   1eef4:	b510      	push	{r4, lr}
   1eef6:	4814      	ldr	r0, [pc, #80]	; (1ef48 <ui_buzzer_init+0x54>)
   1eef8:	f01d fef6 	bl	3cce8 <z_impl_device_get_binding>
	const char *dev_name = CONFIG_UI_BUZZER_PWM_DEV_NAME;
	int err = 0;

	pwm_dev = device_get_binding(dev_name);
   1eefc:	4b13      	ldr	r3, [pc, #76]	; (1ef4c <ui_buzzer_init+0x58>)
   1eefe:	6018      	str	r0, [r3, #0]
	if (!pwm_dev) {
   1ef00:	b9f8      	cbnz	r0, 1ef42 <ui_buzzer_init+0x4e>
		LOG_ERR("Could not bind to device %s", log_strdup(dev_name));
   1ef02:	2301      	movs	r3, #1
   1ef04:	f04f 0400 	mov.w	r4, #0
   1ef08:	4a11      	ldr	r2, [pc, #68]	; (1ef50 <ui_buzzer_init+0x5c>)
   1ef0a:	f363 0402 	bfi	r4, r3, #0, #3
   1ef0e:	4b11      	ldr	r3, [pc, #68]	; (1ef54 <ui_buzzer_init+0x60>)
   1ef10:	f360 04c5 	bfi	r4, r0, #3, #3
   1ef14:	1a9b      	subs	r3, r3, r2
   1ef16:	08db      	lsrs	r3, r3, #3
   1ef18:	480b      	ldr	r0, [pc, #44]	; (1ef48 <ui_buzzer_init+0x54>)
   1ef1a:	f363 148f 	bfi	r4, r3, #6, #10
   1ef1e:	f028 fd03 	bl	47928 <log_strdup>
   1ef22:	490d      	ldr	r1, [pc, #52]	; (1ef58 <ui_buzzer_init+0x64>)
   1ef24:	4602      	mov	r2, r0
   1ef26:	4620      	mov	r0, r4
   1ef28:	f028 fcec 	bl	47904 <log_string_sync>
		err = -ENODEV;
   1ef2c:	f06f 0012 	mvn.w	r0, #18
   1ef30:	2201      	movs	r2, #1
   1ef32:	4b0a      	ldr	r3, [pc, #40]	; (1ef5c <ui_buzzer_init+0x68>)
   1ef34:	e8d3 1fef 	ldaex	r1, [r3]
   1ef38:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1ef3c:	2c00      	cmp	r4, #0
   1ef3e:	d1f9      	bne.n	1ef34 <ui_buzzer_init+0x40>
	}

	buzzer_enable();

	return err;
}
   1ef40:	bd10      	pop	{r4, pc}
	int err = 0;
   1ef42:	2000      	movs	r0, #0
   1ef44:	e7f4      	b.n	1ef30 <ui_buzzer_init+0x3c>
   1ef46:	bf00      	nop
   1ef48:	0004d300 	.word	0x0004d300
   1ef4c:	20023b14 	.word	0x20023b14
   1ef50:	0004a688 	.word	0x0004a688
   1ef54:	0004a6d8 	.word	0x0004a6d8
   1ef58:	0004d306 	.word	0x0004d306
   1ef5c:	20023b10 	.word	0x20023b10

0001ef60 <pwm_pin_set_usec>:
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
				   u32_t period, u32_t pulse)
{
   1ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef64:	b085      	sub	sp, #20
   1ef66:	4605      	mov	r5, r0
   1ef68:	9101      	str	r1, [sp, #4]
   1ef6a:	4616      	mov	r6, r2
   1ef6c:	469b      	mov	fp, r3
	return api->get_cycles_per_sec(dev, pwm, cycles);
   1ef6e:	6843      	ldr	r3, [r0, #4]
   1ef70:	aa02      	add	r2, sp, #8
   1ef72:	685b      	ldr	r3, [r3, #4]
   1ef74:	4798      	blx	r3
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   1ef76:	bb40      	cbnz	r0, 1efca <pwm_pin_set_usec+0x6a>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1ef78:	e9dd 4a02 	ldrd	r4, sl, [sp, #8]
   1ef7c:	fba6 0104 	umull	r0, r1, r6, r4
   1ef80:	4a15      	ldr	r2, [pc, #84]	; (1efd8 <pwm_pin_set_usec+0x78>)
   1ef82:	fb06 110a 	mla	r1, r6, sl, r1
   1ef86:	2300      	movs	r3, #0
   1ef88:	f7f9 ff18 	bl	18dbc <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
   1ef8c:	f04f 0900 	mov.w	r9, #0
   1ef90:	f04f 38ff 	mov.w	r8, #4294967295
   1ef94:	4589      	cmp	r9, r1
   1ef96:	bf08      	it	eq
   1ef98:	4580      	cmpeq	r8, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1ef9a:	4606      	mov	r6, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
   1ef9c:	d318      	bcc.n	1efd0 <pwm_pin_set_usec+0x70>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1ef9e:	fbab 0104 	umull	r0, r1, fp, r4
   1efa2:	4a0d      	ldr	r2, [pc, #52]	; (1efd8 <pwm_pin_set_usec+0x78>)
   1efa4:	fb0b 110a 	mla	r1, fp, sl, r1
   1efa8:	2300      	movs	r3, #0
   1efaa:	f7f9 ff07 	bl	18dbc <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
   1efae:	4589      	cmp	r9, r1
   1efb0:	bf08      	it	eq
   1efb2:	4580      	cmpeq	r8, r0
   1efb4:	d30c      	bcc.n	1efd0 <pwm_pin_set_usec+0x70>
	return api->pin_set(dev, pwm, period, pulse);
   1efb6:	686b      	ldr	r3, [r5, #4]
   1efb8:	4632      	mov	r2, r6
   1efba:	681c      	ldr	r4, [r3, #0]
   1efbc:	9901      	ldr	r1, [sp, #4]
   1efbe:	4603      	mov	r3, r0
   1efc0:	4628      	mov	r0, r5
   1efc2:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
   1efc4:	b005      	add	sp, #20
   1efc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
   1efca:	f06f 0004 	mvn.w	r0, #4
   1efce:	e7f9      	b.n	1efc4 <pwm_pin_set_usec+0x64>
		return -ENOTSUP;
   1efd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1efd4:	e7f6      	b.n	1efc4 <pwm_pin_set_usec+0x64>
   1efd6:	bf00      	nop
   1efd8:	000f4240 	.word	0x000f4240

0001efdc <configure_gpio>:

	return err;
}

static int configure_gpio(u32_t pin)
{
   1efdc:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = gpio_pin_configure(gpio_dev, pin, GPIO_DIR_OUT);
   1efde:	4d0a      	ldr	r5, [pc, #40]	; (1f008 <configure_gpio+0x2c>)
{
   1efe0:	4604      	mov	r4, r0
	err = gpio_pin_configure(gpio_dev, pin, GPIO_DIR_OUT);
   1efe2:	6828      	ldr	r0, [r5, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   1efe4:	6843      	ldr	r3, [r0, #4]
   1efe6:	4622      	mov	r2, r4
   1efe8:	681e      	ldr	r6, [r3, #0]
   1efea:	2100      	movs	r1, #0
   1efec:	2301      	movs	r3, #1
   1efee:	47b0      	blx	r6
	if (err) {
   1eff0:	4603      	mov	r3, r0
   1eff2:	b940      	cbnz	r0, 1f006 <configure_gpio+0x2a>
		return err;
	}

	err = gpio_pin_write(gpio_dev, pin, 0);
   1eff4:	6828      	ldr	r0, [r5, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   1eff6:	6842      	ldr	r2, [r0, #4]
   1eff8:	4619      	mov	r1, r3
   1effa:	6855      	ldr	r5, [r2, #4]
   1effc:	4622      	mov	r2, r4
   1effe:	46ac      	mov	ip, r5
	if (err) {
		return err;
	}

	return err;
}
   1f000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f004:	4760      	bx	ip
   1f006:	bd70      	pop	{r4, r5, r6, pc}
   1f008:	20023b1c 	.word	0x20023b1c

0001f00c <ui_nmos_init>:

	return err;
}

int ui_nmos_init(void)
{
   1f00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f010:	4832      	ldr	r0, [pc, #200]	; (1f0dc <ui_nmos_init+0xd0>)
   1f012:	f01d fe69 	bl	3cce8 <z_impl_device_get_binding>
	int err = 0;

	gpio_dev = device_get_binding(DT_NORDIC_NRF_GPIO_GPIO_0_LABEL);
   1f016:	4b32      	ldr	r3, [pc, #200]	; (1f0e0 <ui_nmos_init+0xd4>)
   1f018:	4c32      	ldr	r4, [pc, #200]	; (1f0e4 <ui_nmos_init+0xd8>)
   1f01a:	6018      	str	r0, [r3, #0]
   1f01c:	4b32      	ldr	r3, [pc, #200]	; (1f0e8 <ui_nmos_init+0xdc>)
   1f01e:	1ae4      	subs	r4, r4, r3
   1f020:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (!gpio_dev) {
   1f024:	b9a8      	cbnz	r0, 1f052 <ui_nmos_init+0x46>
		LOG_ERR("Could not bind to device %s",
   1f026:	f04f 0500 	mov.w	r5, #0
   1f02a:	2301      	movs	r3, #1
   1f02c:	f363 0502 	bfi	r5, r3, #0, #3
   1f030:	f360 05c5 	bfi	r5, r0, #3, #3
   1f034:	4829      	ldr	r0, [pc, #164]	; (1f0dc <ui_nmos_init+0xd0>)
   1f036:	f364 158f 	bfi	r5, r4, #6, #10
		}
	}

	pwm_dev = device_get_binding(CONFIG_UI_NMOS_PWM_DEV_NAME);
	if (!pwm_dev) {
		LOG_ERR("Could not bind to device %s",
   1f03a:	f028 fc75 	bl	47928 <log_strdup>
   1f03e:	492b      	ldr	r1, [pc, #172]	; (1f0ec <ui_nmos_init+0xe0>)
   1f040:	4602      	mov	r2, r0
   1f042:	4628      	mov	r0, r5
   1f044:	f028 fc5e 	bl	47904 <log_string_sync>
			log_strdup(CONFIG_UI_NMOS_PWM_DEV_NAME));
		return -ENODEV;
   1f048:	f06f 0612 	mvn.w	r6, #18
	}

	current_period_us = DEFAULT_PERIOD_US;

	return err;
}
   1f04c:	4630      	mov	r0, r6
   1f04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f052:	2500      	movs	r5, #0
		if ((nmos_pins[i].pin < 0) ||
   1f054:	4f26      	ldr	r7, [pc, #152]	; (1f0f0 <ui_nmos_init+0xe4>)
	int err = 0;
   1f056:	462e      	mov	r6, r5
   1f058:	46b8      	mov	r8, r7
			LOG_ERR("Could not configure pin %d, error: %d",
   1f05a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1f100 <ui_nmos_init+0xf4>
		if ((nmos_pins[i].pin < 0) ||
   1f05e:	59e8      	ldr	r0, [r5, r7]
   1f060:	2800      	cmp	r0, #0
   1f062:	db16      	blt.n	1f092 <ui_nmos_init+0x86>
		    (nmos_pins[i].mode != NMOS_MODE_GPIO)) {
   1f064:	197b      	adds	r3, r7, r5
		if ((nmos_pins[i].pin < 0) ||
   1f066:	f893 a004 	ldrb.w	sl, [r3, #4]
   1f06a:	f1ba 0f00 	cmp.w	sl, #0
   1f06e:	d110      	bne.n	1f092 <ui_nmos_init+0x86>
		err = configure_gpio(nmos_pins[i].pin);
   1f070:	f7ff ffb4 	bl	1efdc <configure_gpio>
		if (err) {
   1f074:	4606      	mov	r6, r0
   1f076:	b160      	cbz	r0, 1f092 <ui_nmos_init+0x86>
			LOG_ERR("Could not configure pin %d, error: %d",
   1f078:	2301      	movs	r3, #1
   1f07a:	f363 0902 	bfi	r9, r3, #0, #3
   1f07e:	f36a 09c5 	bfi	r9, sl, #3, #3
   1f082:	f364 198f 	bfi	r9, r4, #6, #10
   1f086:	4603      	mov	r3, r0
   1f088:	59ea      	ldr	r2, [r5, r7]
   1f08a:	4659      	mov	r1, fp
   1f08c:	4648      	mov	r0, r9
   1f08e:	f028 fc39 	bl	47904 <log_string_sync>
   1f092:	3508      	adds	r5, #8
	for (size_t i = 0; i < ARRAY_SIZE(nmos_pins); i++) {
   1f094:	2d20      	cmp	r5, #32
   1f096:	d1e2      	bne.n	1f05e <ui_nmos_init+0x52>
   1f098:	4816      	ldr	r0, [pc, #88]	; (1f0f4 <ui_nmos_init+0xe8>)
   1f09a:	f01d fe25 	bl	3cce8 <z_impl_device_get_binding>
	pwm_dev = device_get_binding(CONFIG_UI_NMOS_PWM_DEV_NAME);
   1f09e:	4d16      	ldr	r5, [pc, #88]	; (1f0f8 <ui_nmos_init+0xec>)
   1f0a0:	6028      	str	r0, [r5, #0]
	if (!pwm_dev) {
   1f0a2:	b950      	cbnz	r0, 1f0ba <ui_nmos_init+0xae>
		LOG_ERR("Could not bind to device %s",
   1f0a4:	f04f 0500 	mov.w	r5, #0
   1f0a8:	2301      	movs	r3, #1
   1f0aa:	f363 0502 	bfi	r5, r3, #0, #3
   1f0ae:	f360 05c5 	bfi	r5, r0, #3, #3
   1f0b2:	f364 158f 	bfi	r5, r4, #6, #10
   1f0b6:	480f      	ldr	r0, [pc, #60]	; (1f0f4 <ui_nmos_init+0xe8>)
   1f0b8:	e7bf      	b.n	1f03a <ui_nmos_init+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(nmos_pins); i++) {
   1f0ba:	2400      	movs	r4, #0
		pwm_pin_set_usec(pwm_dev,
   1f0bc:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   1f0c0:	2300      	movs	r3, #0
   1f0c2:	f644 6220 	movw	r2, #20000	; 0x4e20
   1f0c6:	6828      	ldr	r0, [r5, #0]
	for (size_t i = 0; i < ARRAY_SIZE(nmos_pins); i++) {
   1f0c8:	3401      	adds	r4, #1
		pwm_pin_set_usec(pwm_dev,
   1f0ca:	f7ff ff49 	bl	1ef60 <pwm_pin_set_usec>
	for (size_t i = 0; i < ARRAY_SIZE(nmos_pins); i++) {
   1f0ce:	2c04      	cmp	r4, #4
   1f0d0:	d1f4      	bne.n	1f0bc <ui_nmos_init+0xb0>
	current_period_us = DEFAULT_PERIOD_US;
   1f0d2:	f644 6220 	movw	r2, #20000	; 0x4e20
   1f0d6:	4b09      	ldr	r3, [pc, #36]	; (1f0fc <ui_nmos_init+0xf0>)
   1f0d8:	601a      	str	r2, [r3, #0]
	return err;
   1f0da:	e7b7      	b.n	1f04c <ui_nmos_init+0x40>
   1f0dc:	0004d32a 	.word	0x0004d32a
   1f0e0:	20023b1c 	.word	0x20023b1c
   1f0e4:	0004a7d8 	.word	0x0004a7d8
   1f0e8:	0004a688 	.word	0x0004a688
   1f0ec:	0004d306 	.word	0x0004d306
   1f0f0:	20031488 	.word	0x20031488
   1f0f4:	0004d357 	.word	0x0004d357
   1f0f8:	20023b20 	.word	0x20023b20
   1f0fc:	20023b18 	.word	0x20023b18
   1f100:	0004d331 	.word	0x0004d331

0001f104 <pwm_out.isra.0>:
	CONFIG_UI_LED_RED_PIN,
	CONFIG_UI_LED_GREEN_PIN,
	CONFIG_UI_LED_BLUE_PIN,
};

static void pwm_out(struct led *led, struct led_color *color)
   1f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f108:	4682      	mov	sl, r0
   1f10a:	468b      	mov	fp, r1
{
	for (size_t i = 0; i < ARRAY_SIZE(color->c); i++) {
   1f10c:	2500      	movs	r5, #0
static void pwm_out(struct led *led, struct led_color *color)
   1f10e:	b085      	sub	sp, #20
		pwm_pin_set_usec(led->pwm_dev, led_pins[i], 255, color->c[i]);
   1f110:	4b1f      	ldr	r3, [pc, #124]	; (1f190 <pwm_out.isra.0+0x8c>)
   1f112:	f8da 6000 	ldr.w	r6, [sl]
   1f116:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
   1f11a:	f81b 7005 	ldrb.w	r7, [fp, r5]
	return api->get_cycles_per_sec(dev, pwm, cycles);
   1f11e:	6873      	ldr	r3, [r6, #4]
   1f120:	aa02      	add	r2, sp, #8
   1f122:	685b      	ldr	r3, [r3, #4]
   1f124:	4641      	mov	r1, r8
   1f126:	4630      	mov	r0, r6
   1f128:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   1f12a:	bb50      	cbnz	r0, 1f182 <pwm_out.isra.0+0x7e>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1f12c:	e9dd 4902 	ldrd	r4, r9, [sp, #8]
   1f130:	23ff      	movs	r3, #255	; 0xff
   1f132:	fba4 0103 	umull	r0, r1, r4, r3
   1f136:	4a17      	ldr	r2, [pc, #92]	; (1f194 <pwm_out.isra.0+0x90>)
   1f138:	fb03 1109 	mla	r1, r3, r9, r1
   1f13c:	2300      	movs	r3, #0
   1f13e:	f7f9 fe3d 	bl	18dbc <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
   1f142:	2300      	movs	r3, #0
   1f144:	f04f 32ff 	mov.w	r2, #4294967295
   1f148:	428b      	cmp	r3, r1
   1f14a:	bf08      	it	eq
   1f14c:	4282      	cmpeq	r2, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1f14e:	e9cd 0100 	strd	r0, r1, [sp]
	if (period_cycles >= ((u64_t)1 << 32)) {
   1f152:	d316      	bcc.n	1f182 <pwm_out.isra.0+0x7e>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1f154:	b2fa      	uxtb	r2, r7
   1f156:	fba2 0104 	umull	r0, r1, r2, r4
   1f15a:	2300      	movs	r3, #0
   1f15c:	fb09 1102 	mla	r1, r9, r2, r1
   1f160:	4a0c      	ldr	r2, [pc, #48]	; (1f194 <pwm_out.isra.0+0x90>)
   1f162:	f7f9 fe2b 	bl	18dbc <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
   1f166:	2300      	movs	r3, #0
   1f168:	f04f 32ff 	mov.w	r2, #4294967295
   1f16c:	428b      	cmp	r3, r1
   1f16e:	bf08      	it	eq
   1f170:	4282      	cmpeq	r2, r0
   1f172:	d306      	bcc.n	1f182 <pwm_out.isra.0+0x7e>
	return api->pin_set(dev, pwm, period, pulse);
   1f174:	6873      	ldr	r3, [r6, #4]
   1f176:	9a00      	ldr	r2, [sp, #0]
   1f178:	681c      	ldr	r4, [r3, #0]
   1f17a:	4641      	mov	r1, r8
   1f17c:	4603      	mov	r3, r0
   1f17e:	4630      	mov	r0, r6
   1f180:	47a0      	blx	r4
	for (size_t i = 0; i < ARRAY_SIZE(color->c); i++) {
   1f182:	3501      	adds	r5, #1
   1f184:	2d03      	cmp	r5, #3
   1f186:	d1c3      	bne.n	1f110 <pwm_out.isra.0+0xc>
	}
}
   1f188:	b005      	add	sp, #20
   1f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f18e:	bf00      	nop
   1f190:	0004a9b0 	.word	0x0004a9b0
   1f194:	000f4240 	.word	0x000f4240

0001f198 <work_handler>:

	pwm_out(led, &nocolor);
}

static void work_handler(struct k_work *work)
{
   1f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct led *led = CONTAINER_OF(work, struct led, work);
	const struct led_effect_step *effect_step =
		&leds.effect->steps[leds.effect_step];
   1f19a:	4c28      	ldr	r4, [pc, #160]	; (1f23c <work_handler+0xa4>)
	struct led *led = CONTAINER_OF(work, struct led, work);
   1f19c:	3814      	subs	r0, #20
		&leds.effect->steps[leds.effect_step];
   1f19e:	68e2      	ldr	r2, [r4, #12]
   1f1a0:	8a23      	ldrh	r3, [r4, #16]
	const struct led_effect_step *effect_step =
   1f1a2:	6815      	ldr	r5, [r2, #0]
   1f1a4:	1de6      	adds	r6, r4, #7
   1f1a6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
	int substeps_left = effect_step->substep_count - leds.effect_substep;
   1f1aa:	88af      	ldrh	r7, [r5, #4]
   1f1ac:	8a63      	ldrh	r3, [r4, #18]
   1f1ae:	1e69      	subs	r1, r5, #1
   1f1b0:	1aff      	subs	r7, r7, r3
   1f1b2:	f105 0c02 	add.w	ip, r5, #2

	for (size_t i = 0; i < ARRAY_SIZE(leds.color.c); i++) {
		int diff = (effect_step->color.c[i] - leds.color.c[i]) /
   1f1b6:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   1f1ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f1be:	1a9b      	subs	r3, r3, r2
   1f1c0:	fb93 f3f7 	sdiv	r3, r3, r7
	for (size_t i = 0; i < ARRAY_SIZE(leds.color.c); i++) {
   1f1c4:	4561      	cmp	r1, ip
			substeps_left;
		leds.color.c[i] += diff;
   1f1c6:	4413      	add	r3, r2
   1f1c8:	7033      	strb	r3, [r6, #0]
	for (size_t i = 0; i < ARRAY_SIZE(leds.color.c); i++) {
   1f1ca:	d1f4      	bne.n	1f1b6 <work_handler+0x1e>
	}

	pwm_out(led, &leds.color);
   1f1cc:	491c      	ldr	r1, [pc, #112]	; (1f240 <work_handler+0xa8>)
   1f1ce:	f7ff ff99 	bl	1f104 <pwm_out.isra.0>

	leds.effect_substep++;
   1f1d2:	8a63      	ldrh	r3, [r4, #18]
	if (leds.effect_substep == effect_step->substep_count) {
   1f1d4:	88aa      	ldrh	r2, [r5, #4]
	leds.effect_substep++;
   1f1d6:	3301      	adds	r3, #1
   1f1d8:	b29b      	uxth	r3, r3
	if (leds.effect_substep == effect_step->substep_count) {
   1f1da:	429a      	cmp	r2, r3
	leds.effect_substep++;
   1f1dc:	8263      	strh	r3, [r4, #18]
	if (leds.effect_substep == effect_step->substep_count) {
   1f1de:	d10c      	bne.n	1f1fa <work_handler+0x62>
		leds.effect_substep = 0;
   1f1e0:	2100      	movs	r1, #0
		leds.effect_step++;
   1f1e2:	8a23      	ldrh	r3, [r4, #16]

		if (leds.effect_step == leds.effect->step_count) {
   1f1e4:	68e2      	ldr	r2, [r4, #12]
		leds.effect_step++;
   1f1e6:	3301      	adds	r3, #1
		if (leds.effect_step == leds.effect->step_count) {
   1f1e8:	8890      	ldrh	r0, [r2, #4]
		leds.effect_step++;
   1f1ea:	b29b      	uxth	r3, r3
		if (leds.effect_step == leds.effect->step_count) {
   1f1ec:	4298      	cmp	r0, r3
		leds.effect_substep = 0;
   1f1ee:	8261      	strh	r1, [r4, #18]
		leds.effect_step++;
   1f1f0:	8223      	strh	r3, [r4, #16]
		if (leds.effect_step == leds.effect->step_count) {
   1f1f2:	d111      	bne.n	1f218 <work_handler+0x80>
			if (leds.effect->loop_forever) {
   1f1f4:	7993      	ldrb	r3, [r2, #6]
   1f1f6:	b303      	cbz	r3, 1f23a <work_handler+0xa2>
				leds.effect_step = 0;
   1f1f8:	8221      	strh	r1, [r4, #16]
		} else {
			__ASSERT_NO_MSG(leds.effect->steps[leds.effect_step].substep_count > 0);
		}
	}

	if (leds.effect_step < leds.effect->step_count) {
   1f1fa:	68e3      	ldr	r3, [r4, #12]
   1f1fc:	8a22      	ldrh	r2, [r4, #16]
   1f1fe:	8899      	ldrh	r1, [r3, #4]
   1f200:	4291      	cmp	r1, r2
   1f202:	d91a      	bls.n	1f23a <work_handler+0xa2>
		s32_t next_delay =
			leds.effect->steps[leds.effect_step].substep_time;
   1f204:	681b      	ldr	r3, [r3, #0]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1f206:	490f      	ldr	r1, [pc, #60]	; (1f244 <work_handler+0xac>)
   1f208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f20c:	88da      	ldrh	r2, [r3, #6]
   1f20e:	480e      	ldr	r0, [pc, #56]	; (1f248 <work_handler+0xb0>)

		k_delayed_work_submit(&leds.work, next_delay);
	}
}
   1f210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f214:	f020 b988 	b.w	3f528 <k_delayed_work_submit_to_queue>
			__ASSERT_NO_MSG(leds.effect->steps[leds.effect_step].substep_count > 0);
   1f218:	6812      	ldr	r2, [r2, #0]
   1f21a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f21e:	889b      	ldrh	r3, [r3, #4]
   1f220:	2b00      	cmp	r3, #0
   1f222:	d1ea      	bne.n	1f1fa <work_handler+0x62>
   1f224:	237e      	movs	r3, #126	; 0x7e
   1f226:	4a09      	ldr	r2, [pc, #36]	; (1f24c <work_handler+0xb4>)
   1f228:	4909      	ldr	r1, [pc, #36]	; (1f250 <work_handler+0xb8>)
   1f22a:	480a      	ldr	r0, [pc, #40]	; (1f254 <work_handler+0xbc>)
   1f22c:	f028 fb4d 	bl	478ca <printk>
   1f230:	217e      	movs	r1, #126	; 0x7e
   1f232:	4806      	ldr	r0, [pc, #24]	; (1f24c <work_handler+0xb4>)
   1f234:	f028 fb56 	bl	478e4 <assert_post_action>
   1f238:	e7df      	b.n	1f1fa <work_handler+0x62>
}
   1f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f23c:	20023b24 	.word	0x20023b24
   1f240:	20023b2c 	.word	0x20023b2c
   1f244:	20023b38 	.word	0x20023b38
   1f248:	2002a5c0 	.word	0x2002a5c0
   1f24c:	0004d381 	.word	0x0004d381
   1f250:	0004d395 	.word	0x0004d395
   1f254:	0004ccf0 	.word	0x0004ccf0

0001f258 <led_update.constprop.1>:

static void led_update(struct led *led)
   1f258:	b510      	push	{r4, lr}
{
	k_delayed_work_cancel(&led->work);
   1f25a:	4c12      	ldr	r4, [pc, #72]	; (1f2a4 <led_update.constprop.1+0x4c>)
   1f25c:	f104 0014 	add.w	r0, r4, #20
   1f260:	f020 f9ec 	bl	3f63c <k_delayed_work_cancel>

	led->effect_step = 0;
   1f264:	2300      	movs	r3, #0
   1f266:	6123      	str	r3, [r4, #16]
	led->effect_substep = 0;

	if (!led->effect) {
   1f268:	68e3      	ldr	r3, [r4, #12]
   1f26a:	b1cb      	cbz	r3, 1f2a0 <led_update.constprop.1+0x48>
		LOG_DBG("No effect set");
		return;
	}

	__ASSERT_NO_MSG(led->effect->steps);
   1f26c:	681b      	ldr	r3, [r3, #0]
   1f26e:	b94b      	cbnz	r3, 1f284 <led_update.constprop.1+0x2c>
   1f270:	490d      	ldr	r1, [pc, #52]	; (1f2a8 <led_update.constprop.1+0x50>)
   1f272:	480e      	ldr	r0, [pc, #56]	; (1f2ac <led_update.constprop.1+0x54>)
   1f274:	2396      	movs	r3, #150	; 0x96
   1f276:	4a0e      	ldr	r2, [pc, #56]	; (1f2b0 <led_update.constprop.1+0x58>)
   1f278:	f028 fb27 	bl	478ca <printk>
   1f27c:	2196      	movs	r1, #150	; 0x96
   1f27e:	480c      	ldr	r0, [pc, #48]	; (1f2b0 <led_update.constprop.1+0x58>)
   1f280:	f028 fb30 	bl	478e4 <assert_post_action>

	if (led->effect->step_count > 0) {
   1f284:	68e2      	ldr	r2, [r4, #12]
   1f286:	8893      	ldrh	r3, [r2, #4]
   1f288:	b153      	cbz	r3, 1f2a0 <led_update.constprop.1+0x48>
		s32_t next_delay =
			led->effect->steps[led->effect_step].substep_time;
   1f28a:	8a21      	ldrh	r1, [r4, #16]
   1f28c:	6813      	ldr	r3, [r2, #0]
   1f28e:	4809      	ldr	r0, [pc, #36]	; (1f2b4 <led_update.constprop.1+0x5c>)
   1f290:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1f294:	88da      	ldrh	r2, [r3, #6]
   1f296:	4908      	ldr	r1, [pc, #32]	; (1f2b8 <led_update.constprop.1+0x60>)

		k_delayed_work_submit(&led->work, next_delay);
	} else {
		LOG_DBG("LED effect with no effect");
	}
}
   1f298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f29c:	f020 b944 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1f2a0:	bd10      	pop	{r4, pc}
   1f2a2:	bf00      	nop
   1f2a4:	20023b24 	.word	0x20023b24
   1f2a8:	0004d35d 	.word	0x0004d35d
   1f2ac:	0004ccf0 	.word	0x0004ccf0
   1f2b0:	0004d381 	.word	0x0004d381
   1f2b4:	2002a5c0 	.word	0x2002a5c0
   1f2b8:	20023b38 	.word	0x20023b38

0001f2bc <ui_leds_init>:

int ui_leds_init(void)
{
   1f2bc:	b510      	push	{r4, lr}
   1f2be:	4813      	ldr	r0, [pc, #76]	; (1f30c <ui_leds_init+0x50>)
   1f2c0:	f01d fd12 	bl	3cce8 <z_impl_device_get_binding>
	const char *dev_name = CONFIG_UI_LED_PWM_DEV_NAME;
	int err = 0;

	leds.pwm_dev = device_get_binding(dev_name);
	leds.id = 0;
   1f2c4:	2400      	movs	r4, #0
   1f2c6:	4602      	mov	r2, r0
	leds.effect = &effect[UI_LTE_DISCONNECTED];
   1f2c8:	4911      	ldr	r1, [pc, #68]	; (1f310 <ui_leds_init+0x54>)
	leds.pwm_dev = device_get_binding(dev_name);
   1f2ca:	4812      	ldr	r0, [pc, #72]	; (1f314 <ui_leds_init+0x58>)
   1f2cc:	6002      	str	r2, [r0, #0]
	leds.id = 0;
   1f2ce:	6044      	str	r4, [r0, #4]
	leds.effect = &effect[UI_LTE_DISCONNECTED];
   1f2d0:	60c1      	str	r1, [r0, #12]

	if (!leds.pwm_dev) {
   1f2d2:	b99a      	cbnz	r2, 1f2fc <ui_leds_init+0x40>
		LOG_ERR("Could not bind to device %s", dev_name);
   1f2d4:	2301      	movs	r3, #1
   1f2d6:	f04f 0000 	mov.w	r0, #0
   1f2da:	f363 0002 	bfi	r0, r3, #0, #3
   1f2de:	f362 00c5 	bfi	r0, r2, #3, #3
   1f2e2:	4b0d      	ldr	r3, [pc, #52]	; (1f318 <ui_leds_init+0x5c>)
   1f2e4:	4a0d      	ldr	r2, [pc, #52]	; (1f31c <ui_leds_init+0x60>)
   1f2e6:	490e      	ldr	r1, [pc, #56]	; (1f320 <ui_leds_init+0x64>)
   1f2e8:	1a9b      	subs	r3, r3, r2
   1f2ea:	08db      	lsrs	r3, r3, #3
   1f2ec:	f363 108f 	bfi	r0, r3, #6, #10
   1f2f0:	4a06      	ldr	r2, [pc, #24]	; (1f30c <ui_leds_init+0x50>)
   1f2f2:	f028 fb07 	bl	47904 <log_string_sync>
		return -ENODEV;
   1f2f6:	f06f 0012 	mvn.w	r0, #18

	k_delayed_work_init(&leds.work, work_handler);
	led_update(&leds);

	return err;
}
   1f2fa:	bd10      	pop	{r4, pc}
	k_delayed_work_init(&leds.work, work_handler);
   1f2fc:	3014      	adds	r0, #20
   1f2fe:	4909      	ldr	r1, [pc, #36]	; (1f324 <ui_leds_init+0x68>)
   1f300:	f02a ff76 	bl	4a1f0 <k_delayed_work_init>
	led_update(&leds);
   1f304:	f7ff ffa8 	bl	1f258 <led_update.constprop.1>
	return err;
   1f308:	4620      	mov	r0, r4
   1f30a:	e7f6      	b.n	1f2fa <ui_leds_init+0x3e>
   1f30c:	0004d37b 	.word	0x0004d37b
   1f310:	0004a940 	.word	0x0004a940
   1f314:	20023b24 	.word	0x20023b24
   1f318:	0004a7d0 	.word	0x0004a7d0
   1f31c:	0004a688 	.word	0x0004a688
   1f320:	0004d306 	.word	0x0004d306
   1f324:	0001f199 	.word	0x0001f199

0001f328 <ui_led_set_effect>:
	pwm_off(&leds);
}

void ui_led_set_effect(enum ui_led_pattern state)
{
	leds.effect = &effect[state];
   1f328:	4b03      	ldr	r3, [pc, #12]	; (1f338 <ui_led_set_effect+0x10>)
   1f32a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f32e:	4b03      	ldr	r3, [pc, #12]	; (1f33c <ui_led_set_effect+0x14>)
   1f330:	60d8      	str	r0, [r3, #12]
	led_update(&leds);
   1f332:	f7ff bf91 	b.w	1f258 <led_update.constprop.1>
   1f336:	bf00      	nop
   1f338:	0004a940 	.word	0x0004a940
   1f33c:	20023b24 	.word	0x20023b24

0001f340 <ui_led_set_rgb>:
}

int ui_led_set_rgb(u8_t red, u8_t green, u8_t blue)
{
   1f340:	b570      	push	{r4, r5, r6, lr}
	struct led_effect effect =
		LED_EFFECT_LED_BREATHE(UI_LED_ON_PERIOD_NORMAL,
   1f342:	4b18      	ldr	r3, [pc, #96]	; (1f3a4 <ui_led_set_rgb+0x64>)
{
   1f344:	b088      	sub	sp, #32
		LED_EFFECT_LED_BREATHE(UI_LED_ON_PERIOD_NORMAL,
   1f346:	9303      	str	r3, [sp, #12]
   1f348:	2300      	movs	r3, #0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f34a:	466d      	mov	r5, sp
   1f34c:	4c16      	ldr	r4, [pc, #88]	; (1f3a8 <ui_led_set_rgb+0x68>)
   1f34e:	f88d 2002 	strb.w	r2, [sp, #2]
   1f352:	f88d 200a 	strb.w	r2, [sp, #10]
			UI_LED_OFF_PERIOD_NORMAL,
			LED_COLOR(red, green, blue));

	memcpy((void *)custom_effect.steps, (void *)effect.steps,
   1f356:	4a15      	ldr	r2, [pc, #84]	; (1f3ac <ui_led_set_rgb+0x6c>)
		LED_EFFECT_LED_BREATHE(UI_LED_ON_PERIOD_NORMAL,
   1f358:	f8ad 3010 	strh.w	r3, [sp, #16]
   1f35c:	f88d 3012 	strb.w	r3, [sp, #18]
   1f360:	f8ad 3018 	strh.w	r3, [sp, #24]
   1f364:	f88d 301a 	strb.w	r3, [sp, #26]
   1f368:	4b11      	ldr	r3, [pc, #68]	; (1f3b0 <ui_led_set_rgb+0x70>)
   1f36a:	9401      	str	r4, [sp, #4]
   1f36c:	9405      	str	r4, [sp, #20]
   1f36e:	6814      	ldr	r4, [r2, #0]
   1f370:	f88d 0000 	strb.w	r0, [sp]
   1f374:	f88d 1001 	strb.w	r1, [sp, #1]
   1f378:	f88d 0008 	strb.w	r0, [sp, #8]
   1f37c:	f88d 1009 	strb.w	r1, [sp, #9]
   1f380:	9307      	str	r3, [sp, #28]
   1f382:	ae08      	add	r6, sp, #32
   1f384:	462b      	mov	r3, r5
   1f386:	cb03      	ldmia	r3!, {r0, r1}
   1f388:	42b3      	cmp	r3, r6
   1f38a:	6020      	str	r0, [r4, #0]
   1f38c:	6061      	str	r1, [r4, #4]
   1f38e:	461d      	mov	r5, r3
   1f390:	f104 0408 	add.w	r4, r4, #8
   1f394:	d1f6      	bne.n	1f384 <ui_led_set_rgb+0x44>
		effect.step_count * sizeof(struct led_effect_step));

	leds.effect = &custom_effect;
   1f396:	4b07      	ldr	r3, [pc, #28]	; (1f3b4 <ui_led_set_rgb+0x74>)
   1f398:	60da      	str	r2, [r3, #12]
	led_update(&leds);
   1f39a:	f7ff ff5d 	bl	1f258 <led_update.constprop.1>

	return 0;
}
   1f39e:	2000      	movs	r0, #0
   1f3a0:	b008      	add	sp, #32
   1f3a2:	bd70      	pop	{r4, r5, r6, pc}
   1f3a4:	01f40001 	.word	0x01f40001
   1f3a8:	0022000f 	.word	0x0022000f
   1f3ac:	200314a8 	.word	0x200314a8
   1f3b0:	13880001 	.word	0x13880001
   1f3b4:	20023b24 	.word	0x20023b24

0001f3b8 <cloud_search_cmd>:

	return 0;
}

static int cloud_search_cmd(cJSON *group_obj, enum cloud_cmd_group group)
{
   1f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3bc:	b087      	sub	sp, #28
	struct cmd *cmd_group;
	cJSON *recipient_obj	= NULL;
	cJSON *channel_obj	= NULL;
	cJSON *type_obj		= NULL;

	if (group_obj == NULL) {
   1f3be:	9002      	str	r0, [sp, #8]
   1f3c0:	2800      	cmp	r0, #0
   1f3c2:	d050      	beq.n	1f466 <cloud_search_cmd+0xae>
		return -EINVAL;
	}

	if (group == CLOUD_CMD_GROUP_SET) {
   1f3c4:	b151      	cbz	r1, 1f3dc <cloud_search_cmd+0x24>
		cmd_group = &group_set;
	} else if (group == CLOUD_CMD_GROUP_GET) {
   1f3c6:	2901      	cmp	r1, #1
   1f3c8:	d14d      	bne.n	1f466 <cloud_search_cmd+0xae>
		cmd_group = &group_get;
   1f3ca:	4f28      	ldr	r7, [pc, #160]	; (1f46c <cloud_search_cmd+0xb4>)
	} else {
		return -EINVAL;
	}

	for (size_t i = 0; i < cmd_group->num_children; i++) {
   1f3cc:	2600      	movs	r6, #0
   1f3ce:	68fb      	ldr	r3, [r7, #12]
   1f3d0:	42b3      	cmp	r3, r6
   1f3d2:	d805      	bhi.n	1f3e0 <cloud_search_cmd+0x28>
				cloud_command_cb(&cmd_parsed);
			}
		}
	}

	return 0;
   1f3d4:	2000      	movs	r0, #0
}
   1f3d6:	b007      	add	sp, #28
   1f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmd_group = &group_set;
   1f3dc:	4f24      	ldr	r7, [pc, #144]	; (1f470 <cloud_search_cmd+0xb8>)
   1f3de:	e7f5      	b.n	1f3cc <cloud_search_cmd+0x14>
		struct cmd rcpt = cmd_group->children[i];
   1f3e0:	68b9      	ldr	r1, [r7, #8]
   1f3e2:	0133      	lsls	r3, r6, #4
   1f3e4:	18ca      	adds	r2, r1, r3
		recipient_obj = json_object_decode(group_obj,
   1f3e6:	9802      	ldr	r0, [sp, #8]
   1f3e8:	58c9      	ldr	r1, [r1, r3]
		struct cmd rcpt = cmd_group->children[i];
   1f3ea:	f892 8004 	ldrb.w	r8, [r2, #4]
   1f3ee:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
   1f3f2:	9203      	str	r2, [sp, #12]
		recipient_obj = json_object_decode(group_obj,
   1f3f4:	f027 fe36 	bl	47064 <json_object_decode>
		if (recipient_obj == NULL) {
   1f3f8:	4682      	mov	sl, r0
   1f3fa:	b908      	cbnz	r0, 1f400 <cloud_search_cmd+0x48>
	for (size_t i = 0; i < cmd_group->num_children; i++) {
   1f3fc:	3601      	adds	r6, #1
   1f3fe:	e7e6      	b.n	1f3ce <cloud_search_cmd+0x16>
		cmd_parsed.recipient = rcpt.recipient;
   1f400:	4d1c      	ldr	r5, [pc, #112]	; (1f474 <cloud_search_cmd+0xbc>)
   1f402:	f885 8001 	strb.w	r8, [r5, #1]
		for (size_t j = 0; j < rcpt.num_children; j++) {
   1f406:	f04f 0800 	mov.w	r8, #0
   1f40a:	9b03      	ldr	r3, [sp, #12]
   1f40c:	4598      	cmp	r8, r3
   1f40e:	d0f5      	beq.n	1f3fc <cloud_search_cmd+0x44>
			struct cmd chan = rcpt.children[j];
   1f410:	68a3      	ldr	r3, [r4, #8]
			channel_obj = json_object_decode(recipient_obj,
   1f412:	6821      	ldr	r1, [r4, #0]
			struct cmd chan = rcpt.children[j];
   1f414:	9301      	str	r3, [sp, #4]
   1f416:	68e3      	ldr	r3, [r4, #12]
			channel_obj = json_object_decode(recipient_obj,
   1f418:	4650      	mov	r0, sl
			struct cmd chan = rcpt.children[j];
   1f41a:	f894 9004 	ldrb.w	r9, [r4, #4]
   1f41e:	9304      	str	r3, [sp, #16]
			channel_obj = json_object_decode(recipient_obj,
   1f420:	f027 fe20 	bl	47064 <json_object_decode>
			if (channel_obj == NULL) {
   1f424:	4683      	mov	fp, r0
   1f426:	b918      	cbnz	r0, 1f430 <cloud_search_cmd+0x78>
		for (size_t j = 0; j < rcpt.num_children; j++) {
   1f428:	f108 0801 	add.w	r8, r8, #1
   1f42c:	3410      	adds	r4, #16
   1f42e:	e7ec      	b.n	1f40a <cloud_search_cmd+0x52>
			cmd_parsed.channel = chan.channel;
   1f430:	f885 9002 	strb.w	r9, [r5, #2]
			for (size_t k = 0; k < chan.num_children; k++) {
   1f434:	f04f 0900 	mov.w	r9, #0
   1f438:	9b04      	ldr	r3, [sp, #16]
   1f43a:	4599      	cmp	r9, r3
   1f43c:	d0f4      	beq.n	1f428 <cloud_search_cmd+0x70>
				struct cmd typ = chan.children[k];
   1f43e:	9b01      	ldr	r3, [sp, #4]
   1f440:	ea4f 1109 	mov.w	r1, r9, lsl #4
   1f444:	185a      	adds	r2, r3, r1
   1f446:	7912      	ldrb	r2, [r2, #4]
				type_obj = json_object_decode(channel_obj,
   1f448:	5859      	ldr	r1, [r3, r1]
   1f44a:	4658      	mov	r0, fp
				struct cmd typ = chan.children[k];
   1f44c:	9205      	str	r2, [sp, #20]
				type_obj = json_object_decode(channel_obj,
   1f44e:	f027 fe09 	bl	47064 <json_object_decode>
				if (type_obj == NULL) {
   1f452:	b128      	cbz	r0, 1f460 <cloud_search_cmd+0xa8>
				cmd_parsed.type = typ.type;
   1f454:	9a05      	ldr	r2, [sp, #20]
				cloud_command_cb(&cmd_parsed);
   1f456:	4b08      	ldr	r3, [pc, #32]	; (1f478 <cloud_search_cmd+0xc0>)
				cmd_parsed.type = typ.type;
   1f458:	70ea      	strb	r2, [r5, #3]
				cloud_command_cb(&cmd_parsed);
   1f45a:	4806      	ldr	r0, [pc, #24]	; (1f474 <cloud_search_cmd+0xbc>)
   1f45c:	681a      	ldr	r2, [r3, #0]
   1f45e:	4790      	blx	r2
			for (size_t k = 0; k < chan.num_children; k++) {
   1f460:	f109 0901 	add.w	r9, r9, #1
   1f464:	e7e8      	b.n	1f438 <cloud_search_cmd+0x80>
		return -EINVAL;
   1f466:	f06f 0015 	mvn.w	r0, #21
   1f46a:	e7b4      	b.n	1f3d6 <cloud_search_cmd+0x1e>
   1f46c:	20031a10 	.word	0x20031a10
   1f470:	20031a20 	.word	0x20031a20
   1f474:	20020970 	.word	0x20020970
   1f478:	20023b58 	.word	0x20023b58

0001f47c <cloud_encode_data>:
{
   1f47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f480:	460f      	mov	r7, r1
	if (channel == NULL || channel->data.buf == NULL ||
   1f482:	4606      	mov	r6, r0
   1f484:	2800      	cmp	r0, #0
   1f486:	d04d      	beq.n	1f524 <cloud_encode_data+0xa8>
   1f488:	6843      	ldr	r3, [r0, #4]
   1f48a:	2b00      	cmp	r3, #0
   1f48c:	d04a      	beq.n	1f524 <cloud_encode_data+0xa8>
   1f48e:	6883      	ldr	r3, [r0, #8]
   1f490:	2b00      	cmp	r3, #0
   1f492:	d047      	beq.n	1f524 <cloud_encode_data+0xa8>
	    channel->data.len == 0 || output == NULL) {
   1f494:	2900      	cmp	r1, #0
   1f496:	d045      	beq.n	1f524 <cloud_encode_data+0xa8>
	cJSON *root_obj = cJSON_CreateObject();
   1f498:	f006 f9e6 	bl	25868 <cJSON_CreateObject>
	if (root_obj == NULL) {
   1f49c:	4605      	mov	r5, r0
   1f49e:	b930      	cbnz	r0, 1f4ae <cloud_encode_data+0x32>
		cJSON_Delete(root_obj);
   1f4a0:	f006 f91c 	bl	256dc <cJSON_Delete>
		return -ENOMEM;
   1f4a4:	f06f 040b 	mvn.w	r4, #11
}
   1f4a8:	4620      	mov	r0, r4
   1f4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = json_add_str(root_obj, "appId", channel_type_str[channel->type]);
   1f4ae:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   1f4b0:	4b1e      	ldr	r3, [pc, #120]	; (1f52c <cloud_encode_data+0xb0>)
   1f4b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1f4b6:	f006 f9b3 	bl	25820 <cJSON_CreateString>
	if (json_str == NULL) {
   1f4ba:	4602      	mov	r2, r0
   1f4bc:	b348      	cbz	r0, 1f512 <cloud_encode_data+0x96>
	cJSON_AddItemToObject(parent, str, item);
   1f4be:	491c      	ldr	r1, [pc, #112]	; (1f530 <cloud_encode_data+0xb4>)
   1f4c0:	4628      	mov	r0, r5
   1f4c2:	f029 fd9e 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1f4c6:	f04f 0800 	mov.w	r8, #0
	json_str = cJSON_CreateString(item);
   1f4ca:	6870      	ldr	r0, [r6, #4]
   1f4cc:	f006 f9a8 	bl	25820 <cJSON_CreateString>
	if (json_str == NULL) {
   1f4d0:	4602      	mov	r2, r0
   1f4d2:	b308      	cbz	r0, 1f518 <cloud_encode_data+0x9c>
	cJSON_AddItemToObject(parent, str, item);
   1f4d4:	4917      	ldr	r1, [pc, #92]	; (1f534 <cloud_encode_data+0xb8>)
   1f4d6:	4628      	mov	r0, r5
   1f4d8:	f029 fd93 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1f4dc:	2400      	movs	r4, #0
	json_str = cJSON_CreateString(item);
   1f4de:	4816      	ldr	r0, [pc, #88]	; (1f538 <cloud_encode_data+0xbc>)
   1f4e0:	f006 f99e 	bl	25820 <cJSON_CreateString>
	ret += json_add_str(root_obj, "data", channel->data.buf);
   1f4e4:	4444      	add	r4, r8
	if (json_str == NULL) {
   1f4e6:	4602      	mov	r2, r0
   1f4e8:	b1c8      	cbz	r0, 1f51e <cloud_encode_data+0xa2>
	cJSON_AddItemToObject(parent, str, item);
   1f4ea:	4914      	ldr	r1, [pc, #80]	; (1f53c <cloud_encode_data+0xc0>)
   1f4ec:	4628      	mov	r0, r5
   1f4ee:	f029 fd88 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1f4f2:	2300      	movs	r3, #0
	if (ret != 0) {
   1f4f4:	18e4      	adds	r4, r4, r3
		cJSON_Delete(root_obj);
   1f4f6:	4628      	mov	r0, r5
	if (ret != 0) {
   1f4f8:	d1d2      	bne.n	1f4a0 <cloud_encode_data+0x24>
	buffer = cJSON_PrintUnformatted(root_obj);
   1f4fa:	f029 fd72 	bl	48fe2 <cJSON_PrintUnformatted>
   1f4fe:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   1f500:	4628      	mov	r0, r5
   1f502:	f006 f8eb 	bl	256dc <cJSON_Delete>
	output->buf = buffer;
   1f506:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   1f508:	4630      	mov	r0, r6
   1f50a:	f022 f98b 	bl	41824 <strlen>
   1f50e:	6078      	str	r0, [r7, #4]
	return 0;
   1f510:	e7ca      	b.n	1f4a8 <cloud_encode_data+0x2c>
		return -ENOMEM;
   1f512:	f06f 080b 	mvn.w	r8, #11
   1f516:	e7d8      	b.n	1f4ca <cloud_encode_data+0x4e>
   1f518:	f06f 040b 	mvn.w	r4, #11
   1f51c:	e7df      	b.n	1f4de <cloud_encode_data+0x62>
   1f51e:	f06f 030b 	mvn.w	r3, #11
   1f522:	e7e7      	b.n	1f4f4 <cloud_encode_data+0x78>
		return -EINVAL;
   1f524:	f06f 0415 	mvn.w	r4, #21
   1f528:	e7be      	b.n	1f4a8 <cloud_encode_data+0x2c>
   1f52a:	bf00      	nop
   1f52c:	0004a9bc 	.word	0x0004a9bc
   1f530:	0004d3cc 	.word	0x0004d3cc
   1f534:	0004d3d2 	.word	0x0004d3d2
   1f538:	0004f997 	.word	0x0004f997
   1f53c:	0004d3d7 	.word	0x0004d3d7

0001f540 <cloud_encode_digital_twin_data>:
{
   1f540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f544:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(channel != NULL);
   1f546:	4604      	mov	r4, r0
   1f548:	b958      	cbnz	r0, 1f562 <cloud_encode_digital_twin_data+0x22>
   1f54a:	493e      	ldr	r1, [pc, #248]	; (1f644 <cloud_encode_digital_twin_data+0x104>)
   1f54c:	483e      	ldr	r0, [pc, #248]	; (1f648 <cloud_encode_digital_twin_data+0x108>)
   1f54e:	f240 130b 	movw	r3, #267	; 0x10b
   1f552:	4a3e      	ldr	r2, [pc, #248]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f554:	f028 f9b9 	bl	478ca <printk>
   1f558:	f240 110b 	movw	r1, #267	; 0x10b
   1f55c:	483b      	ldr	r0, [pc, #236]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f55e:	f028 f9c1 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.buf != NULL);
   1f562:	6863      	ldr	r3, [r4, #4]
   1f564:	b95b      	cbnz	r3, 1f57e <cloud_encode_digital_twin_data+0x3e>
   1f566:	493a      	ldr	r1, [pc, #232]	; (1f650 <cloud_encode_digital_twin_data+0x110>)
   1f568:	4837      	ldr	r0, [pc, #220]	; (1f648 <cloud_encode_digital_twin_data+0x108>)
   1f56a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   1f56e:	4a37      	ldr	r2, [pc, #220]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f570:	f028 f9ab 	bl	478ca <printk>
   1f574:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1f578:	4834      	ldr	r0, [pc, #208]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f57a:	f028 f9b3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.len != 0);
   1f57e:	68a3      	ldr	r3, [r4, #8]
   1f580:	b95b      	cbnz	r3, 1f59a <cloud_encode_digital_twin_data+0x5a>
   1f582:	4934      	ldr	r1, [pc, #208]	; (1f654 <cloud_encode_digital_twin_data+0x114>)
   1f584:	4830      	ldr	r0, [pc, #192]	; (1f648 <cloud_encode_digital_twin_data+0x108>)
   1f586:	f240 130d 	movw	r3, #269	; 0x10d
   1f58a:	4a30      	ldr	r2, [pc, #192]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f58c:	f028 f99d 	bl	478ca <printk>
   1f590:	f240 110d 	movw	r1, #269	; 0x10d
   1f594:	482d      	ldr	r0, [pc, #180]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f596:	f028 f9a5 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1f59a:	f1b8 0f00 	cmp.w	r8, #0
   1f59e:	d10b      	bne.n	1f5b8 <cloud_encode_digital_twin_data+0x78>
   1f5a0:	492d      	ldr	r1, [pc, #180]	; (1f658 <cloud_encode_digital_twin_data+0x118>)
   1f5a2:	4829      	ldr	r0, [pc, #164]	; (1f648 <cloud_encode_digital_twin_data+0x108>)
   1f5a4:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1f5a8:	4a28      	ldr	r2, [pc, #160]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f5aa:	f028 f98e 	bl	478ca <printk>
   1f5ae:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1f5b2:	4826      	ldr	r0, [pc, #152]	; (1f64c <cloud_encode_digital_twin_data+0x10c>)
   1f5b4:	f028 f996 	bl	478e4 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   1f5b8:	f006 f956 	bl	25868 <cJSON_CreateObject>
   1f5bc:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   1f5be:	f006 f953 	bl	25868 <cJSON_CreateObject>
   1f5c2:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   1f5c4:	f006 f950 	bl	25868 <cJSON_CreateObject>
   1f5c8:	4606      	mov	r6, r0
	if (root_obj == NULL || state_obj == NULL || reported_obj == NULL) {
   1f5ca:	b10d      	cbz	r5, 1f5d0 <cloud_encode_digital_twin_data+0x90>
   1f5cc:	b107      	cbz	r7, 1f5d0 <cloud_encode_digital_twin_data+0x90>
   1f5ce:	b960      	cbnz	r0, 1f5ea <cloud_encode_digital_twin_data+0xaa>
		cJSON_Delete(root_obj);
   1f5d0:	4628      	mov	r0, r5
   1f5d2:	f006 f883 	bl	256dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   1f5d6:	4638      	mov	r0, r7
   1f5d8:	f006 f880 	bl	256dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1f5dc:	4630      	mov	r0, r6
   1f5de:	f006 f87d 	bl	256dc <cJSON_Delete>
		return -ENOMEM;
   1f5e2:	f06f 000b 	mvn.w	r0, #11
}
   1f5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (channel->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1f5ea:	7823      	ldrb	r3, [r4, #0]
   1f5ec:	2b0c      	cmp	r3, #12
   1f5ee:	d107      	bne.n	1f600 <cloud_encode_digital_twin_data+0xc0>
		cJSON *dummy_obj = cJSON_CreateNull();
   1f5f0:	f006 f90a 	bl	25808 <cJSON_CreateNull>
		if (dummy_obj == NULL) {
   1f5f4:	4602      	mov	r2, r0
   1f5f6:	b118      	cbz	r0, 1f600 <cloud_encode_digital_twin_data+0xc0>
	cJSON_AddItemToObject(parent, str, item);
   1f5f8:	4918      	ldr	r1, [pc, #96]	; (1f65c <cloud_encode_digital_twin_data+0x11c>)
   1f5fa:	4630      	mov	r0, r6
   1f5fc:	f029 fd01 	bl	49002 <cJSON_AddItemToObject>
   1f600:	4b17      	ldr	r3, [pc, #92]	; (1f660 <cloud_encode_digital_twin_data+0x120>)
	ret += json_add_obj(reported_obj, channel_type_str[channel->type],
   1f602:	7821      	ldrb	r1, [r4, #0]
	cJSON_AddItemToObject(parent, str, item);
   1f604:	6862      	ldr	r2, [r4, #4]
   1f606:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   1f60a:	4630      	mov	r0, r6
   1f60c:	f029 fcf9 	bl	49002 <cJSON_AddItemToObject>
   1f610:	4632      	mov	r2, r6
   1f612:	4914      	ldr	r1, [pc, #80]	; (1f664 <cloud_encode_digital_twin_data+0x124>)
   1f614:	4638      	mov	r0, r7
   1f616:	f029 fcf4 	bl	49002 <cJSON_AddItemToObject>
   1f61a:	463a      	mov	r2, r7
   1f61c:	4912      	ldr	r1, [pc, #72]	; (1f668 <cloud_encode_digital_twin_data+0x128>)
   1f61e:	4628      	mov	r0, r5
   1f620:	f029 fcef 	bl	49002 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   1f624:	4628      	mov	r0, r5
   1f626:	f029 fcdc 	bl	48fe2 <cJSON_PrintUnformatted>
   1f62a:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   1f62c:	4628      	mov	r0, r5
   1f62e:	f006 f855 	bl	256dc <cJSON_Delete>
	output->buf = buffer;
   1f632:	f8c8 4000 	str.w	r4, [r8]
	output->len = strlen(buffer);
   1f636:	4620      	mov	r0, r4
   1f638:	f022 f8f4 	bl	41824 <strlen>
   1f63c:	f8c8 0004 	str.w	r0, [r8, #4]
	return 0;
   1f640:	2000      	movs	r0, #0
   1f642:	e7d0      	b.n	1f5e6 <cloud_encode_digital_twin_data+0xa6>
   1f644:	0004d404 	.word	0x0004d404
   1f648:	0004ccf0 	.word	0x0004ccf0
   1f64c:	0004d3e3 	.word	0x0004d3e3
   1f650:	0004d41b 	.word	0x0004d41b
   1f654:	0004d43c 	.word	0x0004d43c
   1f658:	0004d453 	.word	0x0004d453
   1f65c:	0004d469 	.word	0x0004d469
   1f660:	0004a9bc 	.word	0x0004a9bc
   1f664:	0004d470 	.word	0x0004d470
   1f668:	0004d479 	.word	0x0004d479

0001f66c <cloud_decode_command>:

int cloud_decode_command(char const *input)
{
   1f66c:	b510      	push	{r4, lr}
	int ret;
	cJSON *root_obj		= NULL;
	cJSON *group_obj	= NULL;

	if (input == NULL) {
   1f66e:	b1f0      	cbz	r0, 1f6ae <cloud_decode_command+0x42>
		return -EINVAL;
	}

	root_obj = cJSON_Parse(input);
   1f670:	f029 fcb3 	bl	48fda <cJSON_Parse>
	if (root_obj == NULL) {
   1f674:	4604      	mov	r4, r0
   1f676:	b1e8      	cbz	r0, 1f6b4 <cloud_decode_command+0x48>
		return -ENOENT;
	}

	group_obj = json_object_decode(root_obj, "get");
   1f678:	4910      	ldr	r1, [pc, #64]	; (1f6bc <cloud_decode_command+0x50>)
   1f67a:	f027 fcf3 	bl	47064 <json_object_decode>
	if (group_obj != NULL) {
   1f67e:	b928      	cbnz	r0, 1f68c <cloud_decode_command+0x20>
		if (ret) {
			return ret;
		}
	}

	group_obj = json_object_decode(root_obj, "set");
   1f680:	490f      	ldr	r1, [pc, #60]	; (1f6c0 <cloud_decode_command+0x54>)
   1f682:	4620      	mov	r0, r4
   1f684:	f027 fcee 	bl	47064 <json_object_decode>
	if (group_obj != NULL) {
   1f688:	b948      	cbnz	r0, 1f69e <cloud_decode_command+0x32>
			return ret;
		}
	}

	return 0;
}
   1f68a:	bd10      	pop	{r4, pc}
		cmd_parsed.group = group_get.group;
   1f68c:	4b0d      	ldr	r3, [pc, #52]	; (1f6c4 <cloud_decode_command+0x58>)
   1f68e:	7919      	ldrb	r1, [r3, #4]
   1f690:	4b0d      	ldr	r3, [pc, #52]	; (1f6c8 <cloud_decode_command+0x5c>)
   1f692:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   1f694:	f7ff fe90 	bl	1f3b8 <cloud_search_cmd>
		if (ret) {
   1f698:	2800      	cmp	r0, #0
   1f69a:	d0f1      	beq.n	1f680 <cloud_decode_command+0x14>
   1f69c:	e7f5      	b.n	1f68a <cloud_decode_command+0x1e>
		cmd_parsed.group = group_set.group;
   1f69e:	4b0b      	ldr	r3, [pc, #44]	; (1f6cc <cloud_decode_command+0x60>)
}
   1f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cmd_parsed.group = group_set.group;
   1f6a4:	7919      	ldrb	r1, [r3, #4]
   1f6a6:	4b08      	ldr	r3, [pc, #32]	; (1f6c8 <cloud_decode_command+0x5c>)
   1f6a8:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   1f6aa:	f7ff be85 	b.w	1f3b8 <cloud_search_cmd>
		return -EINVAL;
   1f6ae:	f06f 0015 	mvn.w	r0, #21
   1f6b2:	e7ea      	b.n	1f68a <cloud_decode_command+0x1e>
		return -ENOENT;
   1f6b4:	f06f 0001 	mvn.w	r0, #1
   1f6b8:	e7e7      	b.n	1f68a <cloud_decode_command+0x1e>
   1f6ba:	bf00      	nop
   1f6bc:	00050bcf 	.word	0x00050bcf
   1f6c0:	0004d534 	.word	0x0004d534
   1f6c4:	20031a10 	.word	0x20031a10
   1f6c8:	20020970 	.word	0x20020970
   1f6cc:	20031a20 	.word	0x20031a20

0001f6d0 <cloud_decode_init>:

int cloud_decode_init(cloud_cmd_cb_t cb)
{
	cloud_command_cb = cb;
   1f6d0:	4b01      	ldr	r3, [pc, #4]	; (1f6d8 <cloud_decode_init+0x8>)
   1f6d2:	6018      	str	r0, [r3, #0]

	return 0;
}
   1f6d4:	2000      	movs	r0, #0
   1f6d6:	4770      	bx	lr
   1f6d8:	20023b58 	.word	0x20023b58

0001f6dc <cloud_encode_env_sensors_data>:

int cloud_encode_env_sensors_data(const env_sensor_data_t *sensor_data,
				 struct cloud_msg *output)
{
   1f6dc:	b570      	push	{r4, r5, r6, lr}
   1f6de:	460d      	mov	r5, r1
   1f6e0:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   1f6e2:	4604      	mov	r4, r0
   1f6e4:	b958      	cbnz	r0, 1f6fe <cloud_encode_env_sensors_data+0x22>
   1f6e6:	491f      	ldr	r1, [pc, #124]	; (1f764 <cloud_encode_env_sensors_data+0x88>)
   1f6e8:	481f      	ldr	r0, [pc, #124]	; (1f768 <cloud_encode_env_sensors_data+0x8c>)
   1f6ea:	f240 13a9 	movw	r3, #425	; 0x1a9
   1f6ee:	4a1f      	ldr	r2, [pc, #124]	; (1f76c <cloud_encode_env_sensors_data+0x90>)
   1f6f0:	f028 f8eb 	bl	478ca <printk>
   1f6f4:	f240 11a9 	movw	r1, #425	; 0x1a9
   1f6f8:	481c      	ldr	r0, [pc, #112]	; (1f76c <cloud_encode_env_sensors_data+0x90>)
   1f6fa:	f028 f8f3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1f6fe:	b95d      	cbnz	r5, 1f718 <cloud_encode_env_sensors_data+0x3c>
   1f700:	491b      	ldr	r1, [pc, #108]	; (1f770 <cloud_encode_env_sensors_data+0x94>)
   1f702:	4819      	ldr	r0, [pc, #100]	; (1f768 <cloud_encode_env_sensors_data+0x8c>)
   1f704:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1f708:	4a18      	ldr	r2, [pc, #96]	; (1f76c <cloud_encode_env_sensors_data+0x90>)
   1f70a:	f028 f8de 	bl	478ca <printk>
   1f70e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1f712:	4816      	ldr	r0, [pc, #88]	; (1f76c <cloud_encode_env_sensors_data+0x90>)
   1f714:	f028 f8e6 	bl	478e4 <assert_post_action>

	char buf[6];
	u8_t len;
	struct cloud_channel_data cloud_sensor;

	switch (sensor_data->type) {
   1f718:	7823      	ldrb	r3, [r4, #0]
   1f71a:	2b03      	cmp	r3, #3
   1f71c:	d81f      	bhi.n	1f75e <cloud_encode_env_sensors_data+0x82>
   1f71e:	e8df f003 	tbb	[pc, r3]
   1f722:	1802      	.short	0x1802
   1f724:	1c1a      	.short	0x1c1a
	case ENV_SENSOR_TEMPERATURE:
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   1f726:	2307      	movs	r3, #7

	default:
		return -1;
	}

	len = snprintf(buf, sizeof(buf), "%.1f",
   1f728:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1f72a:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   1f72e:	2106      	movs	r1, #6
   1f730:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1f734:	4630      	mov	r0, r6
   1f736:	e9cd 2300 	strd	r2, r3, [sp]
   1f73a:	4a0e      	ldr	r2, [pc, #56]	; (1f774 <cloud_encode_env_sensors_data+0x98>)
   1f73c:	f021 fea2 	bl	41484 <snprintf>
		sensor_data->value);
	cloud_sensor.data.buf = buf;
	cloud_sensor.data.len = len;
   1f740:	b2c0      	uxtb	r0, r0
   1f742:	9006      	str	r0, [sp, #24]

	return cloud_encode_data(&cloud_sensor, output);
   1f744:	4629      	mov	r1, r5
   1f746:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   1f748:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, output);
   1f74a:	f7ff fe97 	bl	1f47c <cloud_encode_data>
}
   1f74e:	b008      	add	sp, #32
   1f750:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   1f752:	2308      	movs	r3, #8
   1f754:	e7e8      	b.n	1f728 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   1f756:	2309      	movs	r3, #9
   1f758:	e7e6      	b.n	1f728 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1f75a:	230a      	movs	r3, #10
   1f75c:	e7e4      	b.n	1f728 <cloud_encode_env_sensors_data+0x4c>
		return -1;
   1f75e:	f04f 30ff 	mov.w	r0, #4294967295
   1f762:	e7f4      	b.n	1f74e <cloud_encode_env_sensors_data+0x72>
   1f764:	0004d47f 	.word	0x0004d47f
   1f768:	0004ccf0 	.word	0x0004ccf0
   1f76c:	0004d3e3 	.word	0x0004d3e3
   1f770:	0004d453 	.word	0x0004d453
   1f774:	0004d49a 	.word	0x0004d49a

0001f778 <cloud_encode_light_sensor_data>:
#if CONFIG_LIGHT_SENSOR
/* 4 32-bit ints, 3 spaces, NULL */
#define LIGHT_SENSOR_DATA_STRING_MAX_LEN ((4 * 11) + 3 + 1)
int cloud_encode_light_sensor_data(const struct light_sensor_data *sensor_data,
				   struct cloud_msg *output)
{
   1f778:	b530      	push	{r4, r5, lr}
   1f77a:	460c      	mov	r4, r1
   1f77c:	b095      	sub	sp, #84	; 0x54
	char buf[LIGHT_SENSOR_DATA_STRING_MAX_LEN];
	u8_t len;
	struct cloud_channel_data cloud_sensor;

	if ((sensor_data == NULL) || (output == NULL)) {
   1f77e:	b1c0      	cbz	r0, 1f7b2 <cloud_encode_light_sensor_data+0x3a>
   1f780:	b1b9      	cbz	r1, 1f7b2 <cloud_encode_light_sensor_data+0x3a>
		return -EINVAL;
	}

	len = snprintf(buf, sizeof(buf), "%d %d %d %d", sensor_data->red,
   1f782:	68c3      	ldr	r3, [r0, #12]
   1f784:	ad08      	add	r5, sp, #32
   1f786:	9302      	str	r3, [sp, #8]
   1f788:	6883      	ldr	r3, [r0, #8]
   1f78a:	2130      	movs	r1, #48	; 0x30
   1f78c:	9301      	str	r3, [sp, #4]
   1f78e:	6843      	ldr	r3, [r0, #4]
   1f790:	4a09      	ldr	r2, [pc, #36]	; (1f7b8 <cloud_encode_light_sensor_data+0x40>)
   1f792:	9300      	str	r3, [sp, #0]
   1f794:	6803      	ldr	r3, [r0, #0]
   1f796:	4628      	mov	r0, r5
   1f798:	f021 fe74 	bl	41484 <snprintf>
		       sensor_data->green, sensor_data->blue, sensor_data->ir);

	cloud_sensor.data.buf = buf;
	cloud_sensor.data.len = len;
	cloud_sensor.type = CLOUD_CHANNEL_LIGHT_SENSOR;
   1f79c:	230d      	movs	r3, #13
	cloud_sensor.data.len = len;
   1f79e:	e9cd 5005 	strd	r5, r0, [sp, #20]
	cloud_sensor.type = CLOUD_CHANNEL_LIGHT_SENSOR;
   1f7a2:	a814      	add	r0, sp, #80	; 0x50
   1f7a4:	f800 3d40 	strb.w	r3, [r0, #-64]!

	return cloud_encode_data(&cloud_sensor, output);
   1f7a8:	4621      	mov	r1, r4
   1f7aa:	f7ff fe67 	bl	1f47c <cloud_encode_data>
}
   1f7ae:	b015      	add	sp, #84	; 0x54
   1f7b0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1f7b2:	f06f 0015 	mvn.w	r0, #21
   1f7b6:	e7fa      	b.n	1f7ae <cloud_encode_light_sensor_data+0x36>
   1f7b8:	0004d49f 	.word	0x0004d49f

0001f7bc <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   1f7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f7c0:	b087      	sub	sp, #28
   1f7c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1f7c4:	4604      	mov	r4, r0
   1f7c6:	4689      	mov	r9, r1
   1f7c8:	4617      	mov	r7, r2
   1f7ca:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   1f7cc:	b386      	cbz	r6, 1f830 <service_info_json_object_encode+0x74>
   1f7ce:	b900      	cbnz	r0, 1f7d2 <service_info_json_object_encode+0x16>
   1f7d0:	bb71      	cbnz	r1, 1f830 <service_info_json_object_encode+0x74>
   1f7d2:	b917      	cbnz	r7, 1f7da <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   1f7d4:	f1b8 0f00 	cmp.w	r8, #0
   1f7d8:	d12a      	bne.n	1f830 <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   1f7da:	f006 f845 	bl	25868 <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   1f7de:	4605      	mov	r5, r0
   1f7e0:	b348      	cbz	r0, 1f836 <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   1f7e2:	4603      	mov	r3, r0
   1f7e4:	4a15      	ldr	r2, [pc, #84]	; (1f83c <service_info_json_object_encode+0x80>)
   1f7e6:	4620      	mov	r0, r4
   1f7e8:	4649      	mov	r1, r9
   1f7ea:	f027 fc3f 	bl	4706c <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1f7ee:	4604      	mov	r4, r0
   1f7f0:	b9d0      	cbnz	r0, 1f828 <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   1f7f2:	210c      	movs	r1, #12
   1f7f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f7f8:	4a11      	ldr	r2, [pc, #68]	; (1f840 <service_info_json_object_encode+0x84>)
   1f7fa:	9300      	str	r3, [sp, #0]
   1f7fc:	eb0d 0001 	add.w	r0, sp, r1
   1f800:	4b10      	ldr	r3, [pc, #64]	; (1f844 <service_info_json_object_encode+0x88>)
   1f802:	f021 fe3f 	bl	41484 <snprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   1f806:	462b      	mov	r3, r5
   1f808:	aa03      	add	r2, sp, #12
   1f80a:	4641      	mov	r1, r8
   1f80c:	4638      	mov	r0, r7
   1f80e:	f027 fc2d 	bl	4706c <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1f812:	4604      	mov	r4, r0
   1f814:	b940      	cbnz	r0, 1f828 <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   1f816:	462a      	mov	r2, r5
   1f818:	490b      	ldr	r1, [pc, #44]	; (1f848 <service_info_json_object_encode+0x8c>)
   1f81a:	4630      	mov	r0, r6
   1f81c:	f029 fbf1 	bl	49002 <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   1f820:	4620      	mov	r0, r4
   1f822:	b007      	add	sp, #28
   1f824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   1f828:	4628      	mov	r0, r5
   1f82a:	f005 ff57 	bl	256dc <cJSON_Delete>
   1f82e:	e7f7      	b.n	1f820 <service_info_json_object_encode+0x64>
		return -EINVAL;
   1f830:	f06f 0415 	mvn.w	r4, #21
   1f834:	e7f4      	b.n	1f820 <service_info_json_object_encode+0x64>
		return -ENOMEM;
   1f836:	f06f 040b 	mvn.w	r4, #11
   1f83a:	e7f1      	b.n	1f820 <service_info_json_object_encode+0x64>
   1f83c:	0004d24a 	.word	0x0004d24a
   1f840:	0004d59f 	.word	0x0004d59f
   1f844:	0004d598 	.word	0x0004d598
   1f848:	0004d5a5 	.word	0x0004d5a5

0001f84c <gps_work_handler>:

	return 0;
}

static void gps_work_handler(struct k_work *work)
{
   1f84c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (gps_work.type == GPS_WORK_START) {
   1f84e:	4c36      	ldr	r4, [pc, #216]	; (1f928 <gps_work_handler+0xdc>)
   1f850:	7823      	ldrb	r3, [r4, #0]
   1f852:	4625      	mov	r5, r4
   1f854:	2b00      	cmp	r3, #0
   1f856:	d146      	bne.n	1f8e6 <gps_work_handler+0x9a>
		printk("Enabling PSM\n");
   1f858:	4834      	ldr	r0, [pc, #208]	; (1f92c <gps_work_handler+0xe0>)
   1f85a:	f028 f836 	bl	478ca <printk>
		err = lte_lc_psm_req(true);
   1f85e:	2001      	movs	r0, #1
   1f860:	f00c fc92 	bl	2c188 <lte_lc_psm_req>
		if (err) {
   1f864:	b1c0      	cbz	r0, 1f898 <gps_work_handler+0x4c>
			printk("PSM mode could not be enabled");
   1f866:	4832      	ldr	r0, [pc, #200]	; (1f930 <gps_work_handler+0xe4>)
   1f868:	f028 f82f 	bl	478ca <printk>
			printk(" or was already enabled\n.");
   1f86c:	4831      	ldr	r0, [pc, #196]	; (1f934 <gps_work_handler+0xe8>)
			printk("PSM enabled\n");
   1f86e:	f028 f82c 	bl	478ca <printk>
	return z_impl_k_sleep(ms);
   1f872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1f876:	f02a fc36 	bl	4a0e6 <z_impl_k_sleep>
	err = gps_start(gps_work.dev);
   1f87a:	6a68      	ldr	r0, [r5, #36]	; 0x24
static inline int gps_start(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->start(dev);
   1f87c:	6843      	ldr	r3, [r0, #4]
   1f87e:	68db      	ldr	r3, [r3, #12]
   1f880:	4798      	blx	r3
	if (err) {
   1f882:	4604      	mov	r4, r0
   1f884:	b150      	cbz	r0, 1f89c <gps_work_handler+0x50>
		printk("Failed starting GPS!\n");
   1f886:	482c      	ldr	r0, [pc, #176]	; (1f938 <gps_work_handler+0xec>)
   1f888:	f028 f81f 	bl	478ca <printk>
		err = start();
		if (err) {
			printk("GPS could not be started, error: %d\n", err);
   1f88c:	4621      	mov	r1, r4
   1f88e:	482b      	ldr	r0, [pc, #172]	; (1f93c <gps_work_handler+0xf0>)
			CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL);

		k_delayed_work_submit(&gps_work.work,
			K_SECONDS(CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL));
	}
}
   1f890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("GPS could not be stopped, error: %d\n", err);
   1f894:	f028 b819 	b.w	478ca <printk>
			printk("PSM enabled\n");
   1f898:	4829      	ldr	r0, [pc, #164]	; (1f940 <gps_work_handler+0xf4>)
   1f89a:	e7e8      	b.n	1f86e <gps_work_handler+0x22>
	atomic_set(&gps_is_active, 1);
   1f89c:	2101      	movs	r1, #1
   1f89e:	4829      	ldr	r0, [pc, #164]	; (1f944 <gps_work_handler+0xf8>)
   1f8a0:	f027 fc14 	bl	470cc <atomic_set>
	printk("GPS started successfully.\nSearching for satellites ");
   1f8a4:	4828      	ldr	r0, [pc, #160]	; (1f948 <gps_work_handler+0xfc>)
   1f8a6:	f028 f810 	bl	478ca <printk>
	printk("to get position fix. This may take several minutes.\n");
   1f8aa:	4828      	ldr	r0, [pc, #160]	; (1f94c <gps_work_handler+0x100>)
   1f8ac:	f028 f80d 	bl	478ca <printk>
	printk("The device will attempt to get a fix for %d seconds, ",
   1f8b0:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1f8b4:	4826      	ldr	r0, [pc, #152]	; (1f950 <gps_work_handler+0x104>)
   1f8b6:	f028 f808 	bl	478ca <printk>
	printk("before the GPS is stopped.\n");
   1f8ba:	4826      	ldr	r0, [pc, #152]	; (1f954 <gps_work_handler+0x108>)
   1f8bc:	f028 f805 	bl	478ca <printk>
		printk("GPS operation started\n");
   1f8c0:	4825      	ldr	r0, [pc, #148]	; (1f958 <gps_work_handler+0x10c>)
   1f8c2:	f028 f802 	bl	478ca <printk>
		atomic_set(&gps_is_active, 1);
   1f8c6:	2101      	movs	r1, #1
   1f8c8:	481e      	ldr	r0, [pc, #120]	; (1f944 <gps_work_handler+0xf8>)
   1f8ca:	f027 fbff 	bl	470cc <atomic_set>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   1f8ce:	200c      	movs	r0, #12
   1f8d0:	f7ff fa9e 	bl	1ee10 <ui_led_set_pattern>
		gps_work.type = GPS_WORK_STOP;
   1f8d4:	2301      	movs	r3, #1
   1f8d6:	4a21      	ldr	r2, [pc, #132]	; (1f95c <gps_work_handler+0x110>)
   1f8d8:	4921      	ldr	r1, [pc, #132]	; (1f960 <gps_work_handler+0x114>)
   1f8da:	702b      	strb	r3, [r5, #0]
   1f8dc:	4821      	ldr	r0, [pc, #132]	; (1f964 <gps_work_handler+0x118>)
}
   1f8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f8e2:	f01f be21 	b.w	3f528 <k_delayed_work_submit_to_queue>
	} else if (gps_work.type == GPS_WORK_STOP) {
   1f8e6:	2b01      	cmp	r3, #1
   1f8e8:	d11c      	bne.n	1f924 <gps_work_handler+0xd8>
	err = gps_stop(gps_work.dev);
   1f8ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
static inline int gps_stop(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->stop(dev);
   1f8ec:	6843      	ldr	r3, [r0, #4]
   1f8ee:	691b      	ldr	r3, [r3, #16]
   1f8f0:	4798      	blx	r3
	if (err) {
   1f8f2:	4605      	mov	r5, r0
   1f8f4:	b110      	cbz	r0, 1f8fc <gps_work_handler+0xb0>
			printk("GPS could not be stopped, error: %d\n", err);
   1f8f6:	4601      	mov	r1, r0
   1f8f8:	481b      	ldr	r0, [pc, #108]	; (1f968 <gps_work_handler+0x11c>)
   1f8fa:	e7c9      	b.n	1f890 <gps_work_handler+0x44>
		printk("GPS operation was stopped\n");
   1f8fc:	481b      	ldr	r0, [pc, #108]	; (1f96c <gps_work_handler+0x120>)
   1f8fe:	f027 ffe4 	bl	478ca <printk>
		atomic_set(&gps_is_active, 0);
   1f902:	4629      	mov	r1, r5
   1f904:	480f      	ldr	r0, [pc, #60]	; (1f944 <gps_work_handler+0xf8>)
   1f906:	f027 fbe1 	bl	470cc <atomic_set>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f90a:	4b19      	ldr	r3, [pc, #100]	; (1f970 <gps_work_handler+0x124>)
   1f90c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&gps_is_enabled) == 0) {
   1f910:	b143      	cbz	r3, 1f924 <gps_work_handler+0xd8>
		printk("The device will try to get fix again in %d seconds\n",
   1f912:	211e      	movs	r1, #30
   1f914:	4817      	ldr	r0, [pc, #92]	; (1f974 <gps_work_handler+0x128>)
		gps_work.type = GPS_WORK_START;
   1f916:	7025      	strb	r5, [r4, #0]
		printk("The device will try to get fix again in %d seconds\n",
   1f918:	f027 ffd7 	bl	478ca <printk>
   1f91c:	f247 5230 	movw	r2, #30000	; 0x7530
   1f920:	1d21      	adds	r1, r4, #4
   1f922:	e7db      	b.n	1f8dc <gps_work_handler+0x90>
}
   1f924:	bd38      	pop	{r3, r4, r5, pc}
   1f926:	bf00      	nop
   1f928:	20023b64 	.word	0x20023b64
   1f92c:	0004d5f5 	.word	0x0004d5f5
   1f930:	0004d603 	.word	0x0004d603
   1f934:	0004d621 	.word	0x0004d621
   1f938:	0004d648 	.word	0x0004d648
   1f93c:	0004d65e 	.word	0x0004d65e
   1f940:	0004d63b 	.word	0x0004d63b
   1f944:	20023b5c 	.word	0x20023b5c
   1f948:	0004d683 	.word	0x0004d683
   1f94c:	0004d6b7 	.word	0x0004d6b7
   1f950:	0004d6ec 	.word	0x0004d6ec
   1f954:	0004d722 	.word	0x0004d722
   1f958:	0004d73e 	.word	0x0004d73e
   1f95c:	00057e40 	.word	0x00057e40
   1f960:	20023b68 	.word	0x20023b68
   1f964:	2002a5c0 	.word	0x2002a5c0
   1f968:	0004d755 	.word	0x0004d755
   1f96c:	0004d77a 	.word	0x0004d77a
   1f970:	20023b60 	.word	0x20023b60
   1f974:	0004d795 	.word	0x0004d795

0001f978 <gps_control_is_active>:
   1f978:	4b03      	ldr	r3, [pc, #12]	; (1f988 <gps_control_is_active+0x10>)
   1f97a:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_active);
#else
	return false;
#endif
}
   1f97e:	3000      	adds	r0, #0
   1f980:	bf18      	it	ne
   1f982:	2001      	movne	r0, #1
   1f984:	4770      	bx	lr
   1f986:	bf00      	nop
   1f988:	20023b5c 	.word	0x20023b5c

0001f98c <gps_control_is_enabled>:
   1f98c:	4b03      	ldr	r3, [pc, #12]	; (1f99c <gps_control_is_enabled+0x10>)
   1f98e:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_enabled);
#else
	return false;
#endif
}
   1f992:	3000      	adds	r0, #0
   1f994:	bf18      	it	ne
   1f996:	2001      	movne	r0, #1
   1f998:	4770      	bx	lr
   1f99a:	bf00      	nop
   1f99c:	20023b60 	.word	0x20023b60

0001f9a0 <gps_control_stop>:
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
#endif
}

void gps_control_stop(u32_t delay_ms)
{
   1f9a0:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1f9a2:	4d07      	ldr	r5, [pc, #28]	; (1f9c0 <gps_control_stop+0x20>)
{
   1f9a4:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1f9a6:	1d2c      	adds	r4, r5, #4
   1f9a8:	4620      	mov	r0, r4
   1f9aa:	f01f fe47 	bl	3f63c <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_STOP;
   1f9ae:	2301      	movs	r3, #1
   1f9b0:	4632      	mov	r2, r6
   1f9b2:	702b      	strb	r3, [r5, #0]
   1f9b4:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1f9b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f9ba:	4802      	ldr	r0, [pc, #8]	; (1f9c4 <gps_control_stop+0x24>)
   1f9bc:	f01f bdb4 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1f9c0:	20023b64 	.word	0x20023b64
   1f9c4:	2002a5c0 	.word	0x2002a5c0

0001f9c8 <gps_control_disable>:
{
   1f9c8:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 0);
   1f9ca:	2100      	movs	r1, #0
   1f9cc:	4805      	ldr	r0, [pc, #20]	; (1f9e4 <gps_control_disable+0x1c>)
   1f9ce:	f027 fb7d 	bl	470cc <atomic_set>
	gps_control_stop(K_NO_WAIT);
   1f9d2:	2000      	movs	r0, #0
   1f9d4:	f7ff ffe4 	bl	1f9a0 <gps_control_stop>
}
   1f9d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1f9dc:	2004      	movs	r0, #4
   1f9de:	f7ff ba17 	b.w	1ee10 <ui_led_set_pattern>
   1f9e2:	bf00      	nop
   1f9e4:	20023b60 	.word	0x20023b60

0001f9e8 <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
   1f9e8:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1f9ea:	4d07      	ldr	r5, [pc, #28]	; (1fa08 <gps_control_start+0x20>)
{
   1f9ec:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1f9ee:	1d2c      	adds	r4, r5, #4
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	f01f fe23 	bl	3f63c <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_START;
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	4632      	mov	r2, r6
   1f9fa:	702b      	strb	r3, [r5, #0]
   1f9fc:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1f9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fa02:	4802      	ldr	r0, [pc, #8]	; (1fa0c <gps_control_start+0x24>)
   1fa04:	f01f bd90 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1fa08:	20023b64 	.word	0x20023b64
   1fa0c:	2002a5c0 	.word	0x2002a5c0

0001fa10 <gps_control_enable>:
{
   1fa10:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 1);
   1fa12:	2101      	movs	r1, #1
   1fa14:	4804      	ldr	r0, [pc, #16]	; (1fa28 <gps_control_enable+0x18>)
   1fa16:	f027 fb59 	bl	470cc <atomic_set>
}
   1fa1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_start(K_SECONDS(1));
   1fa1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1fa22:	f7ff bfe1 	b.w	1f9e8 <gps_control_start>
   1fa26:	bf00      	nop
   1fa28:	20023b60 	.word	0x20023b60

0001fa2c <gps_control_init>:
#ifdef CONFIG_GPS_SIM
	struct gps_trigger gps_trig = {
		.type = GPS_TRIG_DATA_READY
	};
#else
	struct gps_trigger gps_trig = {
   1fa2c:	2302      	movs	r3, #2
{
   1fa2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct gps_trigger gps_trig = {
   1fa30:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa34:	2300      	movs	r3, #0
{
   1fa36:	4604      	mov	r4, r0
	struct gps_trigger gps_trig = {
   1fa38:	f88d 3005 	strb.w	r3, [sp, #5]
   1fa3c:	4811      	ldr	r0, [pc, #68]	; (1fa84 <gps_control_init+0x58>)
   1fa3e:	f01d f953 	bl	3cce8 <z_impl_device_get_binding>
		.chan = GPS_CHAN_NMEA
	};
#endif /* CONFIG_GPS_SIM */

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	if (gps_dev == NULL) {
   1fa42:	4606      	mov	r6, r0
   1fa44:	b940      	cbnz	r0, 1fa58 <gps_control_init+0x2c>
		printk("Could not get %s device\n", CONFIG_GPS_DEV_NAME);
   1fa46:	490f      	ldr	r1, [pc, #60]	; (1fa84 <gps_control_init+0x58>)
   1fa48:	480f      	ldr	r0, [pc, #60]	; (1fa88 <gps_control_init+0x5c>)
   1fa4a:	f027 ff3e 	bl	478ca <printk>
		return -ENODEV;
   1fa4e:	f06f 0412 	mvn.w	r4, #18
	gps_work.dev = gps_dev;
#endif
	printk("GPS initialized\n");

	return 0;
}
   1fa52:	4620      	mov	r0, r4
   1fa54:	b002      	add	sp, #8
   1fa56:	bd70      	pop	{r4, r5, r6, pc}
	return api->trigger_set(dev, trigger, handler);
   1fa58:	6843      	ldr	r3, [r0, #4]
   1fa5a:	4622      	mov	r2, r4
   1fa5c:	681b      	ldr	r3, [r3, #0]
   1fa5e:	a901      	add	r1, sp, #4
   1fa60:	4798      	blx	r3
	if (err) {
   1fa62:	4604      	mov	r4, r0
   1fa64:	b120      	cbz	r0, 1fa70 <gps_control_init+0x44>
		printk("Could not set trigger, error code: %d\n", err);
   1fa66:	4601      	mov	r1, r0
   1fa68:	4808      	ldr	r0, [pc, #32]	; (1fa8c <gps_control_init+0x60>)
   1fa6a:	f027 ff2e 	bl	478ca <printk>
		return err;
   1fa6e:	e7f0      	b.n	1fa52 <gps_control_init+0x26>
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   1fa70:	4d07      	ldr	r5, [pc, #28]	; (1fa90 <gps_control_init+0x64>)
   1fa72:	4908      	ldr	r1, [pc, #32]	; (1fa94 <gps_control_init+0x68>)
   1fa74:	1d28      	adds	r0, r5, #4
   1fa76:	f02a fbbb 	bl	4a1f0 <k_delayed_work_init>
	printk("GPS initialized\n");
   1fa7a:	4807      	ldr	r0, [pc, #28]	; (1fa98 <gps_control_init+0x6c>)
	gps_work.dev = gps_dev;
   1fa7c:	626e      	str	r6, [r5, #36]	; 0x24
	printk("GPS initialized\n");
   1fa7e:	f027 ff24 	bl	478ca <printk>
	return 0;
   1fa82:	e7e6      	b.n	1fa52 <gps_control_init+0x26>
   1fa84:	0004d5b1 	.word	0x0004d5b1
   1fa88:	0004d0d3 	.word	0x0004d0d3
   1fa8c:	0004d5bd 	.word	0x0004d5bd
   1fa90:	20023b64 	.word	0x20023b64
   1fa94:	0001f84d 	.word	0x0001f84d
   1fa98:	0004d5e4 	.word	0x0004d5e4

0001fa9c <env_sensors_init_and_start>:
/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(void)
{
   1fa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   1faa0:	2400      	movs	r4, #0
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
   1faa2:	4f15      	ldr	r7, [pc, #84]	; (1faf8 <env_sensors_init_and_start+0x5c>)
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1faa4:	4e15      	ldr	r6, [pc, #84]	; (1fafc <env_sensors_init_and_start+0x60>)
   1faa6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1fb14 <env_sensors_init_and_start+0x78>
			device_get_binding(env_sensors[i]->dev_name);
   1faaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   1faae:	6968      	ldr	r0, [r5, #20]
   1fab0:	f01d f91a 	bl	3cce8 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   1fab4:	61a8      	str	r0, [r5, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1fab6:	b968      	cbnz	r0, 1fad4 <env_sensors_init_and_start+0x38>
   1fab8:	2368      	movs	r3, #104	; 0x68
   1faba:	4632      	mov	r2, r6
   1fabc:	4641      	mov	r1, r8
   1fabe:	4810      	ldr	r0, [pc, #64]	; (1fb00 <env_sensors_init_and_start+0x64>)
   1fac0:	f027 ff03 	bl	478ca <printk>
   1fac4:	6969      	ldr	r1, [r5, #20]
   1fac6:	480f      	ldr	r0, [pc, #60]	; (1fb04 <env_sensors_init_and_start+0x68>)
   1fac8:	f027 feff 	bl	478ca <printk>
   1facc:	2168      	movs	r1, #104	; 0x68
   1face:	4630      	mov	r0, r6
   1fad0:	f027 ff08 	bl	478e4 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   1fad4:	3401      	adds	r4, #1
   1fad6:	2c03      	cmp	r4, #3
   1fad8:	d1e7      	bne.n	1faaa <env_sensors_init_and_start+0xe>
			env_sensors[i]->dev_name);
	}

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   1fada:	490b      	ldr	r1, [pc, #44]	; (1fb08 <env_sensors_init_and_start+0x6c>)
   1fadc:	480b      	ldr	r0, [pc, #44]	; (1fb0c <env_sensors_init_and_start+0x70>)
   1fade:	f02a fb87 	bl	4a1f0 <k_delayed_work_init>
	env_sensors_poll_fn(NULL);
   1fae2:	2000      	movs	r0, #0
   1fae4:	f7fa fc38 	bl	1a358 <env_sensors_poll_fn>

	return k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   1fae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1faec:	f242 7210 	movw	r2, #10000	; 0x2710
   1faf0:	4906      	ldr	r1, [pc, #24]	; (1fb0c <env_sensors_init_and_start+0x70>)
   1faf2:	4807      	ldr	r0, [pc, #28]	; (1fb10 <env_sensors_init_and_start+0x74>)
   1faf4:	f01f bd18 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1faf8:	0004a9f4 	.word	0x0004a9f4
   1fafc:	0004d7d5 	.word	0x0004d7d5
   1fb00:	0004ccf0 	.word	0x0004ccf0
   1fb04:	0004d80a 	.word	0x0004d80a
   1fb08:	0001a359 	.word	0x0001a359
   1fb0c:	20023b8c 	.word	0x20023b8c
   1fb10:	2002a5c0 	.word	0x2002a5c0
   1fb14:	0004d7f6 	.word	0x0004d7f6

0001fb18 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   1fb18:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1fb1a:	4604      	mov	r4, r0
   1fb1c:	2800      	cmp	r0, #0
   1fb1e:	d03f      	beq.n	1fba0 <env_sensors_get_temperature+0x88>
	__asm__ volatile(
   1fb20:	f04f 0320 	mov.w	r3, #32
   1fb24:	f3ef 8611 	mrs	r6, BASEPRI
   1fb28:	f383 8811 	msr	BASEPRI, r3
   1fb2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fb30:	481d      	ldr	r0, [pc, #116]	; (1fba8 <env_sensors_get_temperature+0x90>)
   1fb32:	f01f fa9b 	bl	3f06c <z_spin_lock_valid>
   1fb36:	b960      	cbnz	r0, 1fb52 <env_sensors_get_temperature+0x3a>
   1fb38:	491c      	ldr	r1, [pc, #112]	; (1fbac <env_sensors_get_temperature+0x94>)
   1fb3a:	235f      	movs	r3, #95	; 0x5f
   1fb3c:	4a1c      	ldr	r2, [pc, #112]	; (1fbb0 <env_sensors_get_temperature+0x98>)
   1fb3e:	481d      	ldr	r0, [pc, #116]	; (1fbb4 <env_sensors_get_temperature+0x9c>)
   1fb40:	f027 fec3 	bl	478ca <printk>
   1fb44:	481c      	ldr	r0, [pc, #112]	; (1fbb8 <env_sensors_get_temperature+0xa0>)
   1fb46:	f027 fec0 	bl	478ca <printk>
   1fb4a:	215f      	movs	r1, #95	; 0x5f
   1fb4c:	4818      	ldr	r0, [pc, #96]	; (1fbb0 <env_sensors_get_temperature+0x98>)
   1fb4e:	f027 fec9 	bl	478e4 <assert_post_action>
   1fb52:	4d1a      	ldr	r5, [pc, #104]	; (1fbbc <env_sensors_get_temperature+0xa4>)
	z_spin_lock_set_owner(l);
   1fb54:	4814      	ldr	r0, [pc, #80]	; (1fba8 <env_sensors_get_temperature+0x90>)
   1fb56:	f01f faa7 	bl	3f0a8 <z_spin_lock_set_owner>
   1fb5a:	4623      	mov	r3, r4
   1fb5c:	f105 0410 	add.w	r4, r5, #16
   1fb60:	462a      	mov	r2, r5
   1fb62:	ca03      	ldmia	r2!, {r0, r1}
   1fb64:	42a2      	cmp	r2, r4
   1fb66:	6018      	str	r0, [r3, #0]
   1fb68:	6059      	str	r1, [r3, #4]
   1fb6a:	4615      	mov	r5, r2
   1fb6c:	f103 0308 	add.w	r3, r3, #8
   1fb70:	d1f6      	bne.n	1fb60 <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fb72:	480d      	ldr	r0, [pc, #52]	; (1fba8 <env_sensors_get_temperature+0x90>)
   1fb74:	f01f fa88 	bl	3f088 <z_spin_unlock_valid>
   1fb78:	b960      	cbnz	r0, 1fb94 <env_sensors_get_temperature+0x7c>
   1fb7a:	4911      	ldr	r1, [pc, #68]	; (1fbc0 <env_sensors_get_temperature+0xa8>)
   1fb7c:	2372      	movs	r3, #114	; 0x72
   1fb7e:	4a0c      	ldr	r2, [pc, #48]	; (1fbb0 <env_sensors_get_temperature+0x98>)
   1fb80:	480c      	ldr	r0, [pc, #48]	; (1fbb4 <env_sensors_get_temperature+0x9c>)
   1fb82:	f027 fea2 	bl	478ca <printk>
   1fb86:	480f      	ldr	r0, [pc, #60]	; (1fbc4 <env_sensors_get_temperature+0xac>)
   1fb88:	f027 fe9f 	bl	478ca <printk>
   1fb8c:	2172      	movs	r1, #114	; 0x72
   1fb8e:	4808      	ldr	r0, [pc, #32]	; (1fbb0 <env_sensors_get_temperature+0x98>)
   1fb90:	f027 fea8 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   1fb94:	f386 8811 	msr	BASEPRI, r6
   1fb98:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   1fb9c:	2000      	movs	r0, #0
}
   1fb9e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1fba0:	f04f 30ff 	mov.w	r0, #4294967295
   1fba4:	e7fb      	b.n	1fb9e <env_sensors_get_temperature+0x86>
   1fba6:	bf00      	nop
   1fba8:	2003104c 	.word	0x2003104c
   1fbac:	0004d875 	.word	0x0004d875
   1fbb0:	0004d84e 	.word	0x0004d84e
   1fbb4:	0004ccf0 	.word	0x0004ccf0
   1fbb8:	0004d88a 	.word	0x0004d88a
   1fbbc:	20031030 	.word	0x20031030
   1fbc0:	0004d89f 	.word	0x0004d89f
   1fbc4:	0004d8b6 	.word	0x0004d8b6

0001fbc8 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   1fbc8:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1fbca:	4604      	mov	r4, r0
   1fbcc:	2800      	cmp	r0, #0
   1fbce:	d03f      	beq.n	1fc50 <env_sensors_get_humidity+0x88>
	__asm__ volatile(
   1fbd0:	f04f 0320 	mov.w	r3, #32
   1fbd4:	f3ef 8611 	mrs	r6, BASEPRI
   1fbd8:	f383 8811 	msr	BASEPRI, r3
   1fbdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fbe0:	481d      	ldr	r0, [pc, #116]	; (1fc58 <env_sensors_get_humidity+0x90>)
   1fbe2:	f01f fa43 	bl	3f06c <z_spin_lock_valid>
   1fbe6:	b960      	cbnz	r0, 1fc02 <env_sensors_get_humidity+0x3a>
   1fbe8:	491c      	ldr	r1, [pc, #112]	; (1fc5c <env_sensors_get_humidity+0x94>)
   1fbea:	235f      	movs	r3, #95	; 0x5f
   1fbec:	4a1c      	ldr	r2, [pc, #112]	; (1fc60 <env_sensors_get_humidity+0x98>)
   1fbee:	481d      	ldr	r0, [pc, #116]	; (1fc64 <env_sensors_get_humidity+0x9c>)
   1fbf0:	f027 fe6b 	bl	478ca <printk>
   1fbf4:	481c      	ldr	r0, [pc, #112]	; (1fc68 <env_sensors_get_humidity+0xa0>)
   1fbf6:	f027 fe68 	bl	478ca <printk>
   1fbfa:	215f      	movs	r1, #95	; 0x5f
   1fbfc:	4818      	ldr	r0, [pc, #96]	; (1fc60 <env_sensors_get_humidity+0x98>)
   1fbfe:	f027 fe71 	bl	478e4 <assert_post_action>
   1fc02:	4d1a      	ldr	r5, [pc, #104]	; (1fc6c <env_sensors_get_humidity+0xa4>)
	z_spin_lock_set_owner(l);
   1fc04:	4814      	ldr	r0, [pc, #80]	; (1fc58 <env_sensors_get_humidity+0x90>)
   1fc06:	f01f fa4f 	bl	3f0a8 <z_spin_lock_set_owner>
   1fc0a:	4623      	mov	r3, r4
   1fc0c:	f105 0410 	add.w	r4, r5, #16
   1fc10:	462a      	mov	r2, r5
   1fc12:	ca03      	ldmia	r2!, {r0, r1}
   1fc14:	42a2      	cmp	r2, r4
   1fc16:	6018      	str	r0, [r3, #0]
   1fc18:	6059      	str	r1, [r3, #4]
   1fc1a:	4615      	mov	r5, r2
   1fc1c:	f103 0308 	add.w	r3, r3, #8
   1fc20:	d1f6      	bne.n	1fc10 <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fc22:	480d      	ldr	r0, [pc, #52]	; (1fc58 <env_sensors_get_humidity+0x90>)
   1fc24:	f01f fa30 	bl	3f088 <z_spin_unlock_valid>
   1fc28:	b960      	cbnz	r0, 1fc44 <env_sensors_get_humidity+0x7c>
   1fc2a:	4911      	ldr	r1, [pc, #68]	; (1fc70 <env_sensors_get_humidity+0xa8>)
   1fc2c:	2372      	movs	r3, #114	; 0x72
   1fc2e:	4a0c      	ldr	r2, [pc, #48]	; (1fc60 <env_sensors_get_humidity+0x98>)
   1fc30:	480c      	ldr	r0, [pc, #48]	; (1fc64 <env_sensors_get_humidity+0x9c>)
   1fc32:	f027 fe4a 	bl	478ca <printk>
   1fc36:	480f      	ldr	r0, [pc, #60]	; (1fc74 <env_sensors_get_humidity+0xac>)
   1fc38:	f027 fe47 	bl	478ca <printk>
   1fc3c:	2172      	movs	r1, #114	; 0x72
   1fc3e:	4808      	ldr	r0, [pc, #32]	; (1fc60 <env_sensors_get_humidity+0x98>)
   1fc40:	f027 fe50 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   1fc44:	f386 8811 	msr	BASEPRI, r6
   1fc48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   1fc4c:	2000      	movs	r0, #0
}
   1fc4e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1fc50:	f04f 30ff 	mov.w	r0, #4294967295
   1fc54:	e7fb      	b.n	1fc4e <env_sensors_get_humidity+0x86>
   1fc56:	bf00      	nop
   1fc58:	2003100c 	.word	0x2003100c
   1fc5c:	0004d875 	.word	0x0004d875
   1fc60:	0004d84e 	.word	0x0004d84e
   1fc64:	0004ccf0 	.word	0x0004ccf0
   1fc68:	0004d88a 	.word	0x0004d88a
   1fc6c:	20030ff0 	.word	0x20030ff0
   1fc70:	0004d89f 	.word	0x0004d89f
   1fc74:	0004d8b6 	.word	0x0004d8b6

0001fc78 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   1fc78:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1fc7a:	4604      	mov	r4, r0
   1fc7c:	2800      	cmp	r0, #0
   1fc7e:	d03f      	beq.n	1fd00 <env_sensors_get_pressure+0x88>
	__asm__ volatile(
   1fc80:	f04f 0320 	mov.w	r3, #32
   1fc84:	f3ef 8611 	mrs	r6, BASEPRI
   1fc88:	f383 8811 	msr	BASEPRI, r3
   1fc8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fc90:	481d      	ldr	r0, [pc, #116]	; (1fd08 <env_sensors_get_pressure+0x90>)
   1fc92:	f01f f9eb 	bl	3f06c <z_spin_lock_valid>
   1fc96:	b960      	cbnz	r0, 1fcb2 <env_sensors_get_pressure+0x3a>
   1fc98:	491c      	ldr	r1, [pc, #112]	; (1fd0c <env_sensors_get_pressure+0x94>)
   1fc9a:	235f      	movs	r3, #95	; 0x5f
   1fc9c:	4a1c      	ldr	r2, [pc, #112]	; (1fd10 <env_sensors_get_pressure+0x98>)
   1fc9e:	481d      	ldr	r0, [pc, #116]	; (1fd14 <env_sensors_get_pressure+0x9c>)
   1fca0:	f027 fe13 	bl	478ca <printk>
   1fca4:	481c      	ldr	r0, [pc, #112]	; (1fd18 <env_sensors_get_pressure+0xa0>)
   1fca6:	f027 fe10 	bl	478ca <printk>
   1fcaa:	215f      	movs	r1, #95	; 0x5f
   1fcac:	4818      	ldr	r0, [pc, #96]	; (1fd10 <env_sensors_get_pressure+0x98>)
   1fcae:	f027 fe19 	bl	478e4 <assert_post_action>
   1fcb2:	4d1a      	ldr	r5, [pc, #104]	; (1fd1c <env_sensors_get_pressure+0xa4>)
	z_spin_lock_set_owner(l);
   1fcb4:	4814      	ldr	r0, [pc, #80]	; (1fd08 <env_sensors_get_pressure+0x90>)
   1fcb6:	f01f f9f7 	bl	3f0a8 <z_spin_lock_set_owner>
   1fcba:	4623      	mov	r3, r4
   1fcbc:	f105 0410 	add.w	r4, r5, #16
   1fcc0:	462a      	mov	r2, r5
   1fcc2:	ca03      	ldmia	r2!, {r0, r1}
   1fcc4:	42a2      	cmp	r2, r4
   1fcc6:	6018      	str	r0, [r3, #0]
   1fcc8:	6059      	str	r1, [r3, #4]
   1fcca:	4615      	mov	r5, r2
   1fccc:	f103 0308 	add.w	r3, r3, #8
   1fcd0:	d1f6      	bne.n	1fcc0 <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fcd2:	480d      	ldr	r0, [pc, #52]	; (1fd08 <env_sensors_get_pressure+0x90>)
   1fcd4:	f01f f9d8 	bl	3f088 <z_spin_unlock_valid>
   1fcd8:	b960      	cbnz	r0, 1fcf4 <env_sensors_get_pressure+0x7c>
   1fcda:	4911      	ldr	r1, [pc, #68]	; (1fd20 <env_sensors_get_pressure+0xa8>)
   1fcdc:	2372      	movs	r3, #114	; 0x72
   1fcde:	4a0c      	ldr	r2, [pc, #48]	; (1fd10 <env_sensors_get_pressure+0x98>)
   1fce0:	480c      	ldr	r0, [pc, #48]	; (1fd14 <env_sensors_get_pressure+0x9c>)
   1fce2:	f027 fdf2 	bl	478ca <printk>
   1fce6:	480f      	ldr	r0, [pc, #60]	; (1fd24 <env_sensors_get_pressure+0xac>)
   1fce8:	f027 fdef 	bl	478ca <printk>
   1fcec:	2172      	movs	r1, #114	; 0x72
   1fcee:	4808      	ldr	r0, [pc, #32]	; (1fd10 <env_sensors_get_pressure+0x98>)
   1fcf0:	f027 fdf8 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   1fcf4:	f386 8811 	msr	BASEPRI, r6
   1fcf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   1fcfc:	2000      	movs	r0, #0
}
   1fcfe:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1fd00:	f04f 30ff 	mov.w	r0, #4294967295
   1fd04:	e7fb      	b.n	1fcfe <env_sensors_get_pressure+0x86>
   1fd06:	bf00      	nop
   1fd08:	2003102c 	.word	0x2003102c
   1fd0c:	0004d875 	.word	0x0004d875
   1fd10:	0004d84e 	.word	0x0004d84e
   1fd14:	0004ccf0 	.word	0x0004ccf0
   1fd18:	0004d88a 	.word	0x0004d88a
   1fd1c:	20031010 	.word	0x20031010
   1fd20:	0004d89f 	.word	0x0004d89f
   1fd24:	0004d8b6 	.word	0x0004d8b6

0001fd28 <light_sensor_poll_fn>:

	return 0;
}

void light_sensor_poll_fn(struct k_work *work)
{
   1fd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_spinlock_key_t key;

	int err = sensor_sample_fetch_chan(ls_dev, SENSOR_CHAN_ALL);
   1fd2c:	4d31      	ldr	r5, [pc, #196]	; (1fdf4 <light_sensor_poll_fn+0xcc>)
   1fd2e:	6828      	ldr	r0, [r5, #0]
	return api->sample_fetch(dev, type);
   1fd30:	6843      	ldr	r3, [r0, #4]
   1fd32:	2125      	movs	r1, #37	; 0x25
   1fd34:	689b      	ldr	r3, [r3, #8]
   1fd36:	4798      	blx	r3

	if (err) {
   1fd38:	4602      	mov	r2, r0
   1fd3a:	b118      	cbz	r0, 1fd44 <light_sensor_poll_fn+0x1c>
		printk("Failed to fetch data from %s, error: %d\n", ls_dev_name,
   1fd3c:	492e      	ldr	r1, [pc, #184]	; (1fdf8 <light_sensor_poll_fn+0xd0>)
   1fd3e:	482f      	ldr	r0, [pc, #188]	; (1fdfc <light_sensor_poll_fn+0xd4>)
   1fd40:	f027 fdc3 	bl	478ca <printk>
	__asm__ volatile(
   1fd44:	f04f 0320 	mov.w	r3, #32
   1fd48:	f3ef 8711 	mrs	r7, BASEPRI
   1fd4c:	f383 8811 	msr	BASEPRI, r3
   1fd50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fd54:	482a      	ldr	r0, [pc, #168]	; (1fe00 <light_sensor_poll_fn+0xd8>)
   1fd56:	f01f f989 	bl	3f06c <z_spin_lock_valid>
   1fd5a:	b960      	cbnz	r0, 1fd76 <light_sensor_poll_fn+0x4e>
   1fd5c:	4929      	ldr	r1, [pc, #164]	; (1fe04 <light_sensor_poll_fn+0xdc>)
   1fd5e:	235f      	movs	r3, #95	; 0x5f
   1fd60:	4a29      	ldr	r2, [pc, #164]	; (1fe08 <light_sensor_poll_fn+0xe0>)
   1fd62:	482a      	ldr	r0, [pc, #168]	; (1fe0c <light_sensor_poll_fn+0xe4>)
   1fd64:	f027 fdb1 	bl	478ca <printk>
   1fd68:	4829      	ldr	r0, [pc, #164]	; (1fe10 <light_sensor_poll_fn+0xe8>)
   1fd6a:	f027 fdae 	bl	478ca <printk>
   1fd6e:	215f      	movs	r1, #95	; 0x5f
   1fd70:	4825      	ldr	r0, [pc, #148]	; (1fe08 <light_sensor_poll_fn+0xe0>)
   1fd72:	f027 fdb7 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd76:	4822      	ldr	r0, [pc, #136]	; (1fe00 <light_sensor_poll_fn+0xd8>)
   1fd78:	f01f f996 	bl	3f0a8 <z_spin_lock_set_owner>
   1fd7c:	2400      	movs	r4, #0
	}

	key = k_spin_lock(&ls_lock);

	for (enum ls_ch_type ch = LS_CH__BEGIN; ch < LS_CH__END; ++ch) {
		err = sensor_channel_get(ls_dev, ls_data[ch]->type,
   1fd7e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1fe28 <light_sensor_poll_fn+0x100>
					 &ls_data[ch]->data);
		if (err) {
			printk("Failed to get data from %s, sensor ch: %d , error: %d\n",
   1fd82:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1fdf8 <light_sensor_poll_fn+0xd0>
   1fd86:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1fe2c <light_sensor_poll_fn+0x104>
		err = sensor_channel_get(ls_dev, ls_data[ch]->type,
   1fd8a:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
   1fd8e:	6828      	ldr	r0, [r5, #0]
   1fd90:	4632      	mov	r2, r6
   1fd92:	f832 1b04 	ldrh.w	r1, [r2], #4
	return api->channel_get(dev, chan, val);
   1fd96:	6843      	ldr	r3, [r0, #4]
   1fd98:	68db      	ldr	r3, [r3, #12]
   1fd9a:	4798      	blx	r3
		if (err) {
   1fd9c:	4603      	mov	r3, r0
   1fd9e:	b120      	cbz	r0, 1fdaa <light_sensor_poll_fn+0x82>
			printk("Failed to get data from %s, sensor ch: %d , error: %d\n",
   1fda0:	8832      	ldrh	r2, [r6, #0]
   1fda2:	4649      	mov	r1, r9
   1fda4:	4650      	mov	r0, sl
   1fda6:	f027 fd90 	bl	478ca <printk>
   1fdaa:	3401      	adds	r4, #1
	for (enum ls_ch_type ch = LS_CH__BEGIN; ch < LS_CH__END; ++ch) {
   1fdac:	2c04      	cmp	r4, #4
   1fdae:	d1ec      	bne.n	1fd8a <light_sensor_poll_fn+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fdb0:	4813      	ldr	r0, [pc, #76]	; (1fe00 <light_sensor_poll_fn+0xd8>)
   1fdb2:	f01f f969 	bl	3f088 <z_spin_unlock_valid>
   1fdb6:	b960      	cbnz	r0, 1fdd2 <light_sensor_poll_fn+0xaa>
   1fdb8:	4916      	ldr	r1, [pc, #88]	; (1fe14 <light_sensor_poll_fn+0xec>)
   1fdba:	2372      	movs	r3, #114	; 0x72
   1fdbc:	4a12      	ldr	r2, [pc, #72]	; (1fe08 <light_sensor_poll_fn+0xe0>)
   1fdbe:	4813      	ldr	r0, [pc, #76]	; (1fe0c <light_sensor_poll_fn+0xe4>)
   1fdc0:	f027 fd83 	bl	478ca <printk>
   1fdc4:	4814      	ldr	r0, [pc, #80]	; (1fe18 <light_sensor_poll_fn+0xf0>)
   1fdc6:	f027 fd80 	bl	478ca <printk>
   1fdca:	2172      	movs	r1, #114	; 0x72
   1fdcc:	480e      	ldr	r0, [pc, #56]	; (1fe08 <light_sensor_poll_fn+0xe0>)
   1fdce:	f027 fd89 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   1fdd2:	f387 8811 	msr	BASEPRI, r7
   1fdd6:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&ls_lock, key);

	if (ls_cb != NULL) {
   1fdda:	4b10      	ldr	r3, [pc, #64]	; (1fe1c <light_sensor_poll_fn+0xf4>)
   1fddc:	681b      	ldr	r3, [r3, #0]
   1fdde:	b103      	cbz	r3, 1fde2 <light_sensor_poll_fn+0xba>
		ls_cb();
   1fde0:	4798      	blx	r3
	}

	k_delayed_work_submit(
		&ls_poller, K_SECONDS(CONFIG_LIGHT_SENSOR_DATA_SEND_INTERVAL));
}
   1fde2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fde6:	f64e 2260 	movw	r2, #60000	; 0xea60
   1fdea:	490d      	ldr	r1, [pc, #52]	; (1fe20 <light_sensor_poll_fn+0xf8>)
   1fdec:	480d      	ldr	r0, [pc, #52]	; (1fe24 <light_sensor_poll_fn+0xfc>)
   1fdee:	f01f bb9b 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1fdf2:	bf00      	nop
   1fdf4:	20023bb0 	.word	0x20023bb0
   1fdf8:	0004d8d0 	.word	0x0004d8d0
   1fdfc:	0004d825 	.word	0x0004d825
   1fe00:	20023bb4 	.word	0x20023bb4
   1fe04:	0004d875 	.word	0x0004d875
   1fe08:	0004d84e 	.word	0x0004d84e
   1fe0c:	0004ccf0 	.word	0x0004ccf0
   1fe10:	0004d88a 	.word	0x0004d88a
   1fe14:	0004d89f 	.word	0x0004d89f
   1fe18:	0004d8b6 	.word	0x0004d8b6
   1fe1c:	20023bac 	.word	0x20023bac
   1fe20:	20023bb8 	.word	0x20023bb8
   1fe24:	2002a5c0 	.word	0x2002a5c0
   1fe28:	0004aa00 	.word	0x0004aa00
   1fe2c:	0004d8d7 	.word	0x0004d8d7

0001fe30 <light_sensor_init_and_start>:
{
   1fe30:	b510      	push	{r4, lr}
   1fe32:	4604      	mov	r4, r0
   1fe34:	480b      	ldr	r0, [pc, #44]	; (1fe64 <light_sensor_init_and_start+0x34>)
   1fe36:	f01c ff57 	bl	3cce8 <z_impl_device_get_binding>
	ls_dev = device_get_binding(ls_dev_name);
   1fe3a:	4b0b      	ldr	r3, [pc, #44]	; (1fe68 <light_sensor_init_and_start+0x38>)
   1fe3c:	6018      	str	r0, [r3, #0]
	if (ls_dev == NULL) {
   1fe3e:	b168      	cbz	r0, 1fe5c <light_sensor_init_and_start+0x2c>
	ls_cb = cb;
   1fe40:	4b0a      	ldr	r3, [pc, #40]	; (1fe6c <light_sensor_init_and_start+0x3c>)
	k_delayed_work_init(&ls_poller, light_sensor_poll_fn);
   1fe42:	490b      	ldr	r1, [pc, #44]	; (1fe70 <light_sensor_init_and_start+0x40>)
   1fe44:	480b      	ldr	r0, [pc, #44]	; (1fe74 <light_sensor_init_and_start+0x44>)
	ls_cb = cb;
   1fe46:	601c      	str	r4, [r3, #0]
	k_delayed_work_init(&ls_poller, light_sensor_poll_fn);
   1fe48:	f02a f9d2 	bl	4a1f0 <k_delayed_work_init>
}
   1fe4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe50:	f241 3288 	movw	r2, #5000	; 0x1388
   1fe54:	4907      	ldr	r1, [pc, #28]	; (1fe74 <light_sensor_init_and_start+0x44>)
   1fe56:	4808      	ldr	r0, [pc, #32]	; (1fe78 <light_sensor_init_and_start+0x48>)
   1fe58:	f01f bb66 	b.w	3f528 <k_delayed_work_submit_to_queue>
   1fe5c:	f06f 0012 	mvn.w	r0, #18
   1fe60:	bd10      	pop	{r4, pc}
   1fe62:	bf00      	nop
   1fe64:	0004d8d0 	.word	0x0004d8d0
   1fe68:	20023bb0 	.word	0x20023bb0
   1fe6c:	20023bac 	.word	0x20023bac
   1fe70:	0001fd29 	.word	0x0001fd29
   1fe74:	20023bb8 	.word	0x20023bb8
   1fe78:	2002a5c0 	.word	0x2002a5c0

0001fe7c <light_sensor_get_data>:
{
   1fe7c:	b538      	push	{r3, r4, r5, lr}
	if (data == NULL) {
   1fe7e:	4604      	mov	r4, r0
   1fe80:	2800      	cmp	r0, #0
   1fe82:	d03e      	beq.n	1ff02 <light_sensor_get_data+0x86>
	__asm__ volatile(
   1fe84:	f04f 0320 	mov.w	r3, #32
   1fe88:	f3ef 8511 	mrs	r5, BASEPRI
   1fe8c:	f383 8811 	msr	BASEPRI, r3
   1fe90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fe94:	481c      	ldr	r0, [pc, #112]	; (1ff08 <light_sensor_get_data+0x8c>)
   1fe96:	f01f f8e9 	bl	3f06c <z_spin_lock_valid>
   1fe9a:	b960      	cbnz	r0, 1feb6 <light_sensor_get_data+0x3a>
   1fe9c:	491b      	ldr	r1, [pc, #108]	; (1ff0c <light_sensor_get_data+0x90>)
   1fe9e:	235f      	movs	r3, #95	; 0x5f
   1fea0:	4a1b      	ldr	r2, [pc, #108]	; (1ff10 <light_sensor_get_data+0x94>)
   1fea2:	481c      	ldr	r0, [pc, #112]	; (1ff14 <light_sensor_get_data+0x98>)
   1fea4:	f027 fd11 	bl	478ca <printk>
   1fea8:	481b      	ldr	r0, [pc, #108]	; (1ff18 <light_sensor_get_data+0x9c>)
   1feaa:	f027 fd0e 	bl	478ca <printk>
   1feae:	215f      	movs	r1, #95	; 0x5f
   1feb0:	4817      	ldr	r0, [pc, #92]	; (1ff10 <light_sensor_get_data+0x94>)
   1feb2:	f027 fd17 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1feb6:	4814      	ldr	r0, [pc, #80]	; (1ff08 <light_sensor_get_data+0x8c>)
   1feb8:	f01f f8f6 	bl	3f0a8 <z_spin_lock_set_owner>
	data->red = ls_data[LS_CH_RED]->data.val1;
   1febc:	4b17      	ldr	r3, [pc, #92]	; (1ff1c <light_sensor_get_data+0xa0>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1febe:	4812      	ldr	r0, [pc, #72]	; (1ff08 <light_sensor_get_data+0x8c>)
   1fec0:	685b      	ldr	r3, [r3, #4]
   1fec2:	6023      	str	r3, [r4, #0]
	data->green = ls_data[LS_CH_GREEN]->data.val1;
   1fec4:	4b16      	ldr	r3, [pc, #88]	; (1ff20 <light_sensor_get_data+0xa4>)
   1fec6:	685b      	ldr	r3, [r3, #4]
   1fec8:	6063      	str	r3, [r4, #4]
	data->blue = ls_data[LS_CH_BLUE]->data.val1;
   1feca:	4b16      	ldr	r3, [pc, #88]	; (1ff24 <light_sensor_get_data+0xa8>)
   1fecc:	685b      	ldr	r3, [r3, #4]
   1fece:	60a3      	str	r3, [r4, #8]
	data->ir = ls_data[LS_CH_IR]->data.val1;
   1fed0:	4b15      	ldr	r3, [pc, #84]	; (1ff28 <light_sensor_get_data+0xac>)
   1fed2:	685b      	ldr	r3, [r3, #4]
   1fed4:	60e3      	str	r3, [r4, #12]
   1fed6:	f01f f8d7 	bl	3f088 <z_spin_unlock_valid>
   1feda:	b960      	cbnz	r0, 1fef6 <light_sensor_get_data+0x7a>
   1fedc:	4913      	ldr	r1, [pc, #76]	; (1ff2c <light_sensor_get_data+0xb0>)
   1fede:	2372      	movs	r3, #114	; 0x72
   1fee0:	4a0b      	ldr	r2, [pc, #44]	; (1ff10 <light_sensor_get_data+0x94>)
   1fee2:	480c      	ldr	r0, [pc, #48]	; (1ff14 <light_sensor_get_data+0x98>)
   1fee4:	f027 fcf1 	bl	478ca <printk>
   1fee8:	4811      	ldr	r0, [pc, #68]	; (1ff30 <light_sensor_get_data+0xb4>)
   1feea:	f027 fcee 	bl	478ca <printk>
   1feee:	2172      	movs	r1, #114	; 0x72
   1fef0:	4807      	ldr	r0, [pc, #28]	; (1ff10 <light_sensor_get_data+0x94>)
   1fef2:	f027 fcf7 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   1fef6:	f385 8811 	msr	BASEPRI, r5
   1fefa:	f3bf 8f6f 	isb	sy
	return 0;
   1fefe:	2000      	movs	r0, #0
}
   1ff00:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ff02:	f06f 0015 	mvn.w	r0, #21
   1ff06:	e7fb      	b.n	1ff00 <light_sensor_get_data+0x84>
   1ff08:	20023bb4 	.word	0x20023bb4
   1ff0c:	0004d875 	.word	0x0004d875
   1ff10:	0004d84e 	.word	0x0004d84e
   1ff14:	0004ccf0 	.word	0x0004ccf0
   1ff18:	0004d88a 	.word	0x0004d88a
   1ff1c:	20031a54 	.word	0x20031a54
   1ff20:	20031a3c 	.word	0x20031a3c
   1ff24:	20031a30 	.word	0x20031a30
   1ff28:	20031a48 	.word	0x20031a48
   1ff2c:	0004d89f 	.word	0x0004d89f
   1ff30:	0004d8b6 	.word	0x0004d8b6

0001ff34 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1ff34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff38:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1ff3a:	7a83      	ldrb	r3, [r0, #10]
{
   1ff3c:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1ff3e:	009b      	lsls	r3, r3, #2
   1ff40:	330a      	adds	r3, #10
   1ff42:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1ff46:	ebad 0d03 	sub.w	sp, sp, r3
   1ff4a:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1ff4c:	6843      	ldr	r3, [r0, #4]
{
   1ff4e:	4605      	mov	r5, r0
   1ff50:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1ff52:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1ff54:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1ff58:	4281      	cmp	r1, r0
   1ff5a:	d221      	bcs.n	1ffa0 <z_sys_mem_pool_block_free+0x6c>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ff5c:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1ff5e:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ff60:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1ff64:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ff66:	d001      	beq.n	1ff6c <z_sys_mem_pool_block_free+0x38>
   1ff68:	f027 f8da 	bl	47120 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1ff6c:	4604      	mov	r4, r0
	while (level >= 0) {
   1ff6e:	2e00      	cmp	r6, #0
   1ff70:	da1e      	bge.n	1ffb0 <z_sys_mem_pool_block_free+0x7c>
	__ASSERT(0, "out of levels");
   1ff72:	23b0      	movs	r3, #176	; 0xb0
   1ff74:	4a40      	ldr	r2, [pc, #256]	; (20078 <__kernel_ram_size+0x78>)
   1ff76:	4941      	ldr	r1, [pc, #260]	; (2007c <__kernel_ram_size+0x7c>)
   1ff78:	4841      	ldr	r0, [pc, #260]	; (20080 <__kernel_ram_size+0x80>)
   1ff7a:	f027 fca6 	bl	478ca <printk>
   1ff7e:	4841      	ldr	r0, [pc, #260]	; (20084 <__kernel_ram_size+0x84>)
   1ff80:	f027 fca3 	bl	478ca <printk>
   1ff84:	21b0      	movs	r1, #176	; 0xb0
   1ff86:	483c      	ldr	r0, [pc, #240]	; (20078 <__kernel_ram_size+0x78>)
   1ff88:	f027 fcac 	bl	478e4 <assert_post_action>
	return -1;
   1ff8c:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   1ff90:	4621      	mov	r1, r4
   1ff92:	7c28      	ldrb	r0, [r5, #16]
   1ff94:	f027 f8cd 	bl	47132 <pool_irq_unlock.isra.4>
}
   1ff98:	3714      	adds	r7, #20
   1ff9a:	46bd      	mov	sp, r7
   1ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ffa0:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1ffa2:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ffa4:	089b      	lsrs	r3, r3, #2
   1ffa6:	f023 0303 	bic.w	r3, r3, #3
   1ffaa:	f844 3f04 	str.w	r3, [r4, #4]!
   1ffae:	e7d3      	b.n	1ff58 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1ffb0:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ffb4:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   1ffb6:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   1ffba:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1ffbc:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ffbe:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   1ffc0:	eb03 090a 	add.w	r9, r3, sl
   1ffc4:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ffc6:	4628      	mov	r0, r5
   1ffc8:	f107 030c 	add.w	r3, r7, #12
   1ffcc:	f027 f892 	bl	470f4 <get_bit_ptr>
	*word &= ~(1<<bit);
   1ffd0:	2301      	movs	r3, #1
   1ffd2:	68fa      	ldr	r2, [r7, #12]
   1ffd4:	fa03 f000 	lsl.w	r0, r3, r0
   1ffd8:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1ffda:	6839      	ldr	r1, [r7, #0]
   1ffdc:	ea23 0300 	bic.w	r3, r3, r0
   1ffe0:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1ffe2:	220c      	movs	r2, #12
   1ffe4:	68eb      	ldr	r3, [r5, #12]
   1ffe6:	fb02 3306 	mla	r3, r2, r6, r3
   1ffea:	1d1a      	adds	r2, r3, #4
   1ffec:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1fff0:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1fff2:	4621      	mov	r1, r4
   1fff4:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   1fff8:	689a      	ldr	r2, [r3, #8]
   1fffa:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1fffe:	f8c3 9008 	str.w	r9, [r3, #8]
   20002:	7c28      	ldrb	r0, [r5, #16]
   20004:	f027 f895 	bl	47132 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   20008:	7c28      	ldrb	r0, [r5, #16]
   2000a:	f010 0001 	ands.w	r0, r0, #1
   2000e:	d001      	beq.n	20014 <__kernel_ram_size+0x14>
   20010:	f027 f886 	bl	47120 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   20014:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   20016:	2e00      	cmp	r6, #0
   20018:	d0ba      	beq.n	1ff90 <z_sys_mem_pool_block_free+0x5c>
	int bit = get_bit_ptr(p, level, bn, &word);
   2001a:	f107 030c 	add.w	r3, r7, #12
   2001e:	4642      	mov	r2, r8
   20020:	4631      	mov	r1, r6
   20022:	4628      	mov	r0, r5
   20024:	f027 f866 	bl	470f4 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   20028:	2304      	movs	r3, #4
   2002a:	fb90 f0f3 	sdiv	r0, r0, r3
   2002e:	68fb      	ldr	r3, [r7, #12]
   20030:	0080      	lsls	r0, r0, #2
   20032:	681b      	ldr	r3, [r3, #0]
   20034:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   20038:	f010 000f 	ands.w	r0, r0, #15
   2003c:	d1a8      	bne.n	1ff90 <z_sys_mem_pool_block_free+0x5c>
	node->next = NULL;
   2003e:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   20040:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   20044:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   20046:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   2004a:	4353      	muls	r3, r2
   2004c:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   2004e:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   20050:	eb02 0c03 	add.w	ip, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20054:	58d1      	ldr	r1, [r2, r3]
   20056:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   2005a:	2804      	cmp	r0, #4
   2005c:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   20060:	58d1      	ldr	r1, [r2, r3]
   20062:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   20066:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   2006a:	f8cc e004 	str.w	lr, [ip, #4]
   2006e:	d1e9      	bne.n	20044 <__kernel_ram_size+0x44>
		level = level - 1;
   20070:	3e01      	subs	r6, #1
		bn = bn / 4;
   20072:	fb98 f8f0 	sdiv	r8, r8, r0
   20076:	e77a      	b.n	1ff6e <z_sys_mem_pool_block_free+0x3a>
   20078:	0004d90e 	.word	0x0004d90e
   2007c:	00052aa7 	.word	0x00052aa7
   20080:	0004ccf0 	.word	0x0004ccf0
   20084:	0004d933 	.word	0x0004d933

00020088 <lexer_boolean>:

	return 0;
}

static void *lexer_boolean(struct lexer *lexer)
{
   20088:	b538      	push	{r3, r4, r5, lr}
	lexer->pos--;
   2008a:	6883      	ldr	r3, [r0, #8]
{
   2008c:	4604      	mov	r4, r0
	lexer->pos--;
   2008e:	3b01      	subs	r3, #1
   20090:	6083      	str	r3, [r0, #8]
	backup(lexer);

	switch (next(lexer)) {
   20092:	f027 f992 	bl	473ba <next>
   20096:	2866      	cmp	r0, #102	; 0x66
   20098:	4605      	mov	r5, r0
   2009a:	d00e      	beq.n	200ba <lexer_boolean+0x32>
   2009c:	2874      	cmp	r0, #116	; 0x74
   2009e:	d10e      	bne.n	200be <lexer_boolean+0x36>
	case 't':
		if (!accept_run(lexer, "rue")) {
   200a0:	490b      	ldr	r1, [pc, #44]	; (200d0 <lexer_boolean+0x48>)
			emit(lexer, JSON_TOK_TRUE);
			return lexer_json;
		}
		break;
	case 'f':
		if (!accept_run(lexer, "alse")) {
   200a2:	4620      	mov	r0, r4
   200a4:	f027 f995 	bl	473d2 <accept_run>
   200a8:	b948      	cbnz	r0, 200be <lexer_boolean+0x36>
	lexer->token.start = lexer->start;
   200aa:	6863      	ldr	r3, [r4, #4]
			emit(lexer, JSON_TOK_FALSE);
			return lexer_json;
   200ac:	4809      	ldr	r0, [pc, #36]	; (200d4 <lexer_boolean+0x4c>)
	lexer->token.start = lexer->start;
   200ae:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   200b0:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   200b2:	7425      	strb	r5, [r4, #16]
	lexer->token.end = lexer->pos;
   200b4:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   200b6:	6063      	str	r3, [r4, #4]
		break;
	}

	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   200b8:	bd38      	pop	{r3, r4, r5, pc}
		if (!accept_run(lexer, "alse")) {
   200ba:	4907      	ldr	r1, [pc, #28]	; (200d8 <lexer_boolean+0x50>)
   200bc:	e7f1      	b.n	200a2 <lexer_boolean+0x1a>
	lexer->token.type = token;
   200be:	2321      	movs	r3, #33	; 0x21
   200c0:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   200c2:	6863      	ldr	r3, [r4, #4]
	return NULL;
   200c4:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   200c6:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   200c8:	68a3      	ldr	r3, [r4, #8]
   200ca:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   200cc:	6063      	str	r3, [r4, #4]
	return NULL;
   200ce:	e7f3      	b.n	200b8 <lexer_boolean+0x30>
   200d0:	0004f172 	.word	0x0004f172
   200d4:	000200dd 	.word	0x000200dd
   200d8:	0004f16c 	.word	0x0004f16c

000200dc <lexer_json>:
		return lexer_json;
	}
}

static void *lexer_json(struct lexer *lexer)
{
   200dc:	b538      	push	{r3, r4, r5, lr}
   200de:	4605      	mov	r5, r0
	while (true) {
		int chr = next(lexer);
   200e0:	4628      	mov	r0, r5
   200e2:	f027 f96a 	bl	473ba <next>

		switch (chr) {
   200e6:	285b      	cmp	r0, #91	; 0x5b
		int chr = next(lexer);
   200e8:	4604      	mov	r4, r0
		switch (chr) {
   200ea:	d013      	beq.n	20114 <lexer_json+0x38>
   200ec:	dc1a      	bgt.n	20124 <lexer_json+0x48>
   200ee:	282c      	cmp	r0, #44	; 0x2c
   200f0:	d010      	beq.n	20114 <lexer_json+0x38>
   200f2:	dc0b      	bgt.n	2010c <lexer_json+0x30>
   200f4:	b338      	cbz	r0, 20146 <lexer_json+0x6a>
   200f6:	2822      	cmp	r0, #34	; 0x22
   200f8:	d045      	beq.n	20186 <lexer_json+0xaa>
				return lexer_number;
			}

			/* fallthrough */
		default:
			if (isspace(chr)) {
   200fa:	f020 fc35 	bl	40968 <__locale_ctype_ptr>
   200fe:	3401      	adds	r4, #1
   20100:	5d03      	ldrb	r3, [r0, r4]
   20102:	071b      	lsls	r3, r3, #28
   20104:	d536      	bpl.n	20174 <lexer_json+0x98>
	lexer->start = lexer->pos;
   20106:	68ab      	ldr	r3, [r5, #8]
   20108:	606b      	str	r3, [r5, #4]
	while (true) {
   2010a:	e7e9      	b.n	200e0 <lexer_json+0x4>
		switch (chr) {
   2010c:	282d      	cmp	r0, #45	; 0x2d
   2010e:	d022      	beq.n	20156 <lexer_json+0x7a>
   20110:	283a      	cmp	r0, #58	; 0x3a
   20112:	d1f2      	bne.n	200fa <lexer_json+0x1e>
	lexer->token.start = lexer->start;
   20114:	686b      	ldr	r3, [r5, #4]
			emit(lexer, (enum json_tokens)chr);
   20116:	742c      	strb	r4, [r5, #16]
	lexer->token.start = lexer->start;
   20118:	616b      	str	r3, [r5, #20]
	lexer->token.end = lexer->pos;
   2011a:	68ab      	ldr	r3, [r5, #8]
			return lexer_json;
   2011c:	481b      	ldr	r0, [pc, #108]	; (2018c <lexer_json+0xb0>)
	lexer->token.end = lexer->pos;
   2011e:	61ab      	str	r3, [r5, #24]
	lexer->start = lexer->pos;
   20120:	606b      	str	r3, [r5, #4]
			return lexer_json;
   20122:	e00f      	b.n	20144 <lexer_json+0x68>
		switch (chr) {
   20124:	286e      	cmp	r0, #110	; 0x6e
   20126:	d00c      	beq.n	20142 <lexer_json+0x66>
   20128:	dc05      	bgt.n	20136 <lexer_json+0x5a>
   2012a:	285d      	cmp	r0, #93	; 0x5d
   2012c:	d0f2      	beq.n	20114 <lexer_json+0x38>
   2012e:	2866      	cmp	r0, #102	; 0x66
   20130:	d1e3      	bne.n	200fa <lexer_json+0x1e>
			return lexer_boolean;
   20132:	4817      	ldr	r0, [pc, #92]	; (20190 <lexer_json+0xb4>)
   20134:	e006      	b.n	20144 <lexer_json+0x68>
		switch (chr) {
   20136:	287b      	cmp	r0, #123	; 0x7b
   20138:	d0ec      	beq.n	20114 <lexer_json+0x38>
   2013a:	287d      	cmp	r0, #125	; 0x7d
   2013c:	d0ea      	beq.n	20114 <lexer_json+0x38>
   2013e:	2874      	cmp	r0, #116	; 0x74
   20140:	e7f6      	b.n	20130 <lexer_json+0x54>
			return lexer_null;
   20142:	4814      	ldr	r0, [pc, #80]	; (20194 <lexer_json+0xb8>)

			emit(lexer, JSON_TOK_ERROR);
			return NULL;
		}
	}
}
   20144:	bd38      	pop	{r3, r4, r5, pc}
	lexer->token.type = token;
   20146:	7428      	strb	r0, [r5, #16]
	lexer->token.start = lexer->start;
   20148:	686b      	ldr	r3, [r5, #4]
			return NULL;
   2014a:	4620      	mov	r0, r4
	lexer->token.start = lexer->start;
   2014c:	616b      	str	r3, [r5, #20]
	lexer->token.end = lexer->pos;
   2014e:	68ab      	ldr	r3, [r5, #8]
   20150:	61ab      	str	r3, [r5, #24]
	lexer->start = lexer->pos;
   20152:	606b      	str	r3, [r5, #4]
			return NULL;
   20154:	e7f6      	b.n	20144 <lexer_json+0x68>
			if (isdigit(peek(lexer))) {
   20156:	f020 fc07 	bl	40968 <__locale_ctype_ptr>
   2015a:	4601      	mov	r1, r0
	int chr = next(lexer);
   2015c:	4628      	mov	r0, r5
   2015e:	f027 f92c 	bl	473ba <next>
	lexer->pos--;
   20162:	68ab      	ldr	r3, [r5, #8]
			if (isdigit(peek(lexer))) {
   20164:	4408      	add	r0, r1
	lexer->pos--;
   20166:	3b01      	subs	r3, #1
   20168:	60ab      	str	r3, [r5, #8]
			if (isdigit(peek(lexer))) {
   2016a:	7843      	ldrb	r3, [r0, #1]
   2016c:	075a      	lsls	r2, r3, #29
   2016e:	d5c4      	bpl.n	200fa <lexer_json+0x1e>
				return lexer_number;
   20170:	4809      	ldr	r0, [pc, #36]	; (20198 <lexer_json+0xbc>)
   20172:	e7e7      	b.n	20144 <lexer_json+0x68>
			if (isdigit(chr)) {
   20174:	f020 fbf8 	bl	40968 <__locale_ctype_ptr>
   20178:	5d04      	ldrb	r4, [r0, r4]
   2017a:	f014 0404 	ands.w	r4, r4, #4
   2017e:	d1f7      	bne.n	20170 <lexer_json+0x94>
	lexer->token.type = token;
   20180:	2321      	movs	r3, #33	; 0x21
   20182:	742b      	strb	r3, [r5, #16]
   20184:	e7e0      	b.n	20148 <lexer_json+0x6c>
			return lexer_string;
   20186:	4805      	ldr	r0, [pc, #20]	; (2019c <lexer_json+0xc0>)
   20188:	e7dc      	b.n	20144 <lexer_json+0x68>
   2018a:	bf00      	nop
   2018c:	000200dd 	.word	0x000200dd
   20190:	00020089 	.word	0x00020089
   20194:	000202c1 	.word	0x000202c1
   20198:	000201a1 	.word	0x000201a1
   2019c:	000201d9 	.word	0x000201d9

000201a0 <lexer_number>:
{
   201a0:	b538      	push	{r3, r4, r5, lr}
   201a2:	4604      	mov	r4, r0
		int chr = next(lexer);
   201a4:	4620      	mov	r0, r4
   201a6:	f027 f908 	bl	473ba <next>
   201aa:	4605      	mov	r5, r0
		if (isdigit(chr) || chr == '.') {
   201ac:	f020 fbdc 	bl	40968 <__locale_ctype_ptr>
   201b0:	4428      	add	r0, r5
   201b2:	7843      	ldrb	r3, [r0, #1]
   201b4:	075b      	lsls	r3, r3, #29
   201b6:	d4f5      	bmi.n	201a4 <lexer_number+0x4>
   201b8:	2d2e      	cmp	r5, #46	; 0x2e
   201ba:	d0f3      	beq.n	201a4 <lexer_number+0x4>
	lexer->token.type = token;
   201bc:	2230      	movs	r2, #48	; 0x30
	lexer->pos--;
   201be:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   201c0:	7422      	strb	r2, [r4, #16]
	lexer->token.start = lexer->start;
   201c2:	6862      	ldr	r2, [r4, #4]
	lexer->pos--;
   201c4:	3b01      	subs	r3, #1
   201c6:	60a3      	str	r3, [r4, #8]
	lexer->token.end = lexer->pos;
   201c8:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->start = lexer->pos;
   201cc:	6063      	str	r3, [r4, #4]
}
   201ce:	4801      	ldr	r0, [pc, #4]	; (201d4 <lexer_number+0x34>)
   201d0:	bd38      	pop	{r3, r4, r5, pc}
   201d2:	bf00      	nop
   201d4:	000200dd 	.word	0x000200dd

000201d8 <lexer_string>:
{
   201d8:	b510      	push	{r4, lr}
   201da:	4604      	mov	r4, r0
	lexer->start = lexer->pos;
   201dc:	6883      	ldr	r3, [r0, #8]
   201de:	6043      	str	r3, [r0, #4]
		int chr = next(lexer);
   201e0:	4620      	mov	r0, r4
   201e2:	f027 f8ea 	bl	473ba <next>
		if (chr == '\0') {
   201e6:	b938      	cbnz	r0, 201f8 <lexer_string+0x20>
	lexer->token.type = token;
   201e8:	2321      	movs	r3, #33	; 0x21
   201ea:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   201ec:	6863      	ldr	r3, [r4, #4]
   201ee:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   201f0:	68a3      	ldr	r3, [r4, #8]
   201f2:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   201f4:	6063      	str	r3, [r4, #4]
}
   201f6:	bd10      	pop	{r4, pc}
		if (chr == '\\') {
   201f8:	285c      	cmp	r0, #92	; 0x5c
   201fa:	d14d      	bne.n	20298 <lexer_string+0xc0>
			switch (next(lexer)) {
   201fc:	4620      	mov	r0, r4
   201fe:	f027 f8dc 	bl	473ba <next>
   20202:	2866      	cmp	r0, #102	; 0x66
   20204:	d0ec      	beq.n	201e0 <lexer_string+0x8>
   20206:	dc11      	bgt.n	2022c <lexer_string+0x54>
   20208:	282f      	cmp	r0, #47	; 0x2f
   2020a:	d0e9      	beq.n	201e0 <lexer_string+0x8>
   2020c:	dc0a      	bgt.n	20224 <lexer_string+0x4c>
   2020e:	2822      	cmp	r0, #34	; 0x22
   20210:	d0e6      	beq.n	201e0 <lexer_string+0x8>
	lexer->token.type = token;
   20212:	2321      	movs	r3, #33	; 0x21
   20214:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   20216:	6863      	ldr	r3, [r4, #4]
	return NULL;
   20218:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   2021a:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   2021c:	68a3      	ldr	r3, [r4, #8]
   2021e:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   20220:	6063      	str	r3, [r4, #4]
	return NULL;
   20222:	e7e8      	b.n	201f6 <lexer_string+0x1e>
			switch (next(lexer)) {
   20224:	285c      	cmp	r0, #92	; 0x5c
   20226:	d0db      	beq.n	201e0 <lexer_string+0x8>
   20228:	2862      	cmp	r0, #98	; 0x62
   2022a:	e7f1      	b.n	20210 <lexer_string+0x38>
   2022c:	2872      	cmp	r0, #114	; 0x72
   2022e:	d0d7      	beq.n	201e0 <lexer_string+0x8>
   20230:	dc01      	bgt.n	20236 <lexer_string+0x5e>
   20232:	286e      	cmp	r0, #110	; 0x6e
   20234:	e7ec      	b.n	20210 <lexer_string+0x38>
   20236:	2874      	cmp	r0, #116	; 0x74
   20238:	d0d2      	beq.n	201e0 <lexer_string+0x8>
   2023a:	2875      	cmp	r0, #117	; 0x75
   2023c:	d1e9      	bne.n	20212 <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   2023e:	f020 fb93 	bl	40968 <__locale_ctype_ptr>
   20242:	4601      	mov	r1, r0
   20244:	4620      	mov	r0, r4
   20246:	f027 f8b8 	bl	473ba <next>
   2024a:	4408      	add	r0, r1
   2024c:	7843      	ldrb	r3, [r0, #1]
   2024e:	f013 0f44 	tst.w	r3, #68	; 0x44
   20252:	d0de      	beq.n	20212 <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20254:	f020 fb88 	bl	40968 <__locale_ctype_ptr>
   20258:	4601      	mov	r1, r0
   2025a:	4620      	mov	r0, r4
   2025c:	f027 f8ad 	bl	473ba <next>
   20260:	4408      	add	r0, r1
   20262:	7843      	ldrb	r3, [r0, #1]
   20264:	f013 0f44 	tst.w	r3, #68	; 0x44
   20268:	d0d3      	beq.n	20212 <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   2026a:	f020 fb7d 	bl	40968 <__locale_ctype_ptr>
   2026e:	4601      	mov	r1, r0
   20270:	4620      	mov	r0, r4
   20272:	f027 f8a2 	bl	473ba <next>
   20276:	4408      	add	r0, r1
   20278:	7843      	ldrb	r3, [r0, #1]
   2027a:	f013 0f44 	tst.w	r3, #68	; 0x44
   2027e:	d0c8      	beq.n	20212 <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20280:	f020 fb72 	bl	40968 <__locale_ctype_ptr>
   20284:	4601      	mov	r1, r0
   20286:	4620      	mov	r0, r4
   20288:	f027 f897 	bl	473ba <next>
   2028c:	4408      	add	r0, r1
   2028e:	7843      	ldrb	r3, [r0, #1]
   20290:	f013 0f44 	tst.w	r3, #68	; 0x44
   20294:	d1a4      	bne.n	201e0 <lexer_string+0x8>
   20296:	e7bc      	b.n	20212 <lexer_string+0x3a>
		if (chr == '"') {
   20298:	2822      	cmp	r0, #34	; 0x22
   2029a:	d1a1      	bne.n	201e0 <lexer_string+0x8>
	lexer->pos--;
   2029c:	68a3      	ldr	r3, [r4, #8]
	lexer->token.start = lexer->start;
   2029e:	6862      	ldr	r2, [r4, #4]
	lexer->pos--;
   202a0:	3b01      	subs	r3, #1
   202a2:	60a3      	str	r3, [r4, #8]
	lexer->token.type = token;
   202a4:	7420      	strb	r0, [r4, #16]
	lexer->token.end = lexer->pos;
   202a6:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->start = lexer->pos;
   202aa:	6063      	str	r3, [r4, #4]
			next(lexer);
   202ac:	4620      	mov	r0, r4
   202ae:	f027 f884 	bl	473ba <next>
	lexer->start = lexer->pos;
   202b2:	68a3      	ldr	r3, [r4, #8]
			return lexer_json;
   202b4:	4801      	ldr	r0, [pc, #4]	; (202bc <lexer_string+0xe4>)
	lexer->start = lexer->pos;
   202b6:	6063      	str	r3, [r4, #4]
			return lexer_json;
   202b8:	e79d      	b.n	201f6 <lexer_string+0x1e>
   202ba:	bf00      	nop
   202bc:	000200dd 	.word	0x000200dd

000202c0 <lexer_null>:
{
   202c0:	b510      	push	{r4, lr}
	if (accept_run(lexer, "ull") < 0) {
   202c2:	490b      	ldr	r1, [pc, #44]	; (202f0 <lexer_null+0x30>)
{
   202c4:	4604      	mov	r4, r0
	if (accept_run(lexer, "ull") < 0) {
   202c6:	f027 f884 	bl	473d2 <accept_run>
   202ca:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   202ce:	2800      	cmp	r0, #0
   202d0:	da06      	bge.n	202e0 <lexer_null+0x20>
	lexer->token.type = token;
   202d2:	2121      	movs	r1, #33	; 0x21
	lexer->start = lexer->pos;
   202d4:	2000      	movs	r0, #0
	lexer->token.end = lexer->pos;
   202d6:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   202da:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   202dc:	6063      	str	r3, [r4, #4]
}
   202de:	bd10      	pop	{r4, pc}
	lexer->token.type = token;
   202e0:	216e      	movs	r1, #110	; 0x6e
	lexer->token.end = lexer->pos;
   202e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   202e6:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   202e8:	6063      	str	r3, [r4, #4]
	return lexer_json;
   202ea:	4802      	ldr	r0, [pc, #8]	; (202f4 <lexer_null+0x34>)
   202ec:	e7f7      	b.n	202de <lexer_null+0x1e>
   202ee:	bf00      	nop
   202f0:	0004f155 	.word	0x0004f155
   202f4:	000200dd 	.word	0x000200dd

000202f8 <decode_value>:
		     size_t max_elements, void *field, void *val);

static int decode_value(struct json_obj *obj,
			const struct json_obj_descr *descr,
			struct token *value, void *field, void *val)
{
   202f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202fc:	4615      	mov	r5, r2

	if (!equivalent_types(value->type, descr->type)) {
   202fe:	7812      	ldrb	r2, [r2, #0]
{
   20300:	461c      	mov	r4, r3
	if (!equivalent_types(value->type, descr->type)) {
   20302:	794b      	ldrb	r3, [r1, #5]
{
   20304:	b086      	sub	sp, #24
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   20306:	2a74      	cmp	r2, #116	; 0x74
{
   20308:	4606      	mov	r6, r0
   2030a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (!equivalent_types(value->type, descr->type)) {
   2030c:	ea4f 0353 	mov.w	r3, r3, lsr #1
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   20310:	d001      	beq.n	20316 <decode_value+0x1e>
   20312:	2a66      	cmp	r2, #102	; 0x66
   20314:	d113      	bne.n	2033e <decode_value+0x46>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   20316:	2b74      	cmp	r3, #116	; 0x74
   20318:	d004      	beq.n	20324 <decode_value+0x2c>
   2031a:	2b66      	cmp	r3, #102	; 0x66
	return type1 == type2;
   2031c:	bf14      	ite	ne
   2031e:	2000      	movne	r0, #0
   20320:	2001      	moveq	r0, #1
   20322:	e000      	b.n	20326 <decode_value+0x2e>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   20324:	2001      	movs	r0, #1
	if (!equivalent_types(value->type, descr->type)) {
   20326:	b138      	cbz	r0, 20338 <decode_value+0x40>
		return -EINVAL;
	}

	switch (descr->type) {
   20328:	2b5b      	cmp	r3, #91	; 0x5b
   2032a:	d020      	beq.n	2036e <decode_value+0x76>
   2032c:	d809      	bhi.n	20342 <decode_value+0x4a>
   2032e:	2b22      	cmp	r3, #34	; 0x22
   20330:	f000 8084 	beq.w	2043c <decode_value+0x144>
   20334:	2b30      	cmp	r3, #48	; 0x30
   20336:	d062      	beq.n	203fe <decode_value+0x106>
		*str = value->start;

		return 0;
	}
	default:
		return -EINVAL;
   20338:	f06f 0015 	mvn.w	r0, #21
   2033c:	e014      	b.n	20368 <decode_value+0x70>
	return type1 == type2;
   2033e:	429a      	cmp	r2, r3
   20340:	e7ec      	b.n	2031c <decode_value+0x24>
	switch (descr->type) {
   20342:	2b74      	cmp	r3, #116	; 0x74
   20344:	d003      	beq.n	2034e <decode_value+0x56>
   20346:	2b7b      	cmp	r3, #123	; 0x7b
   20348:	d008      	beq.n	2035c <decode_value+0x64>
   2034a:	2b66      	cmp	r3, #102	; 0x66
   2034c:	d1f4      	bne.n	20338 <decode_value+0x40>
		*v = value->type == JSON_TOK_TRUE;
   2034e:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
   20352:	425a      	negs	r2, r3
   20354:	415a      	adcs	r2, r3
   20356:	7022      	strb	r2, [r4, #0]
		return 0;
   20358:	2000      	movs	r0, #0
   2035a:	e005      	b.n	20368 <decode_value+0x70>
		return obj_parse(obj, descr->object.sub_descr,
   2035c:	4623      	mov	r3, r4
   2035e:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   20362:	4630      	mov	r0, r6
   20364:	f027 f8ae 	bl	474c4 <obj_parse>
	}
}
   20368:	b006      	add	sp, #24
   2036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return arr_parse(obj, descr->array.element_descr,
   2036e:	688d      	ldr	r5, [r1, #8]

static int arr_parse(struct json_obj *obj,
		     const struct json_obj_descr *elem_descr,
		     size_t max_elements, void *field, void *val)
{
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   20370:	4628      	mov	r0, r5
   20372:	f027 f850 	bl	47416 <get_elem_size>
	void *last_elem = (char *)field + elem_size * max_elements;
   20376:	68cb      	ldr	r3, [r1, #12]
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
	struct token value;

	assert(elem_size > 0);
   20378:	2800      	cmp	r0, #0
	void *last_elem = (char *)field + elem_size * max_elements;
   2037a:	fb03 4900 	mla	r9, r3, r0, r4
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   2037e:	88eb      	ldrh	r3, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   20380:	4680      	mov	r8, r0
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   20382:	eb07 0a03 	add.w	sl, r7, r3
	assert(elem_size > 0);
   20386:	dc06      	bgt.n	20396 <decode_value+0x9e>
   20388:	4b2f      	ldr	r3, [pc, #188]	; (20448 <decode_value+0x150>)
   2038a:	4a30      	ldr	r2, [pc, #192]	; (2044c <decode_value+0x154>)
   2038c:	f240 2103 	movw	r1, #515	; 0x203
   20390:	482f      	ldr	r0, [pc, #188]	; (20450 <decode_value+0x158>)
   20392:	f020 faa1 	bl	408d8 <__assert_func>

	*elements = 0;
   20396:	2200      	movs	r2, #0
   20398:	50fa      	str	r2, [r7, r3]
	if (!lexer_next(&json->lexer, value)) {
   2039a:	a903      	add	r1, sp, #12
   2039c:	4630      	mov	r0, r6
   2039e:	f027 f874 	bl	4748a <lexer_next>
   203a2:	2800      	cmp	r0, #0
   203a4:	d0c8      	beq.n	20338 <decode_value+0x40>
	if (value->type == JSON_TOK_LIST_END) {
   203a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   203aa:	2b5d      	cmp	r3, #93	; 0x5d
   203ac:	d007      	beq.n	203be <decode_value+0xc6>
	if (value->type == JSON_TOK_COMMA) {
   203ae:	2b2c      	cmp	r3, #44	; 0x2c
   203b0:	d01b      	beq.n	203ea <decode_value+0xf2>
	return element_token(value->type);
   203b2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   203b6:	f027 f81c 	bl	473f2 <element_token>

	while (!arr_next(obj, &value)) {
   203ba:	2800      	cmp	r0, #0
   203bc:	d1bc      	bne.n	20338 <decode_value+0x40>
		if (value.type == JSON_TOK_LIST_END) {
   203be:	f89d 300c 	ldrb.w	r3, [sp, #12]
   203c2:	2b5d      	cmp	r3, #93	; 0x5d
   203c4:	d0c8      	beq.n	20358 <decode_value+0x60>
			return 0;
		}

		if (field == last_elem) {
   203c6:	45a1      	cmp	r9, r4
   203c8:	d016      	beq.n	203f8 <decode_value+0x100>
			return -ENOSPC;
		}

		if (decode_value(obj, elem_descr, &value, field, val) < 0) {
   203ca:	9700      	str	r7, [sp, #0]
   203cc:	4623      	mov	r3, r4
   203ce:	aa03      	add	r2, sp, #12
   203d0:	4629      	mov	r1, r5
   203d2:	4630      	mov	r0, r6
   203d4:	f7ff ff90 	bl	202f8 <decode_value>
   203d8:	2800      	cmp	r0, #0
   203da:	dbad      	blt.n	20338 <decode_value+0x40>
			return -EINVAL;
		}

		(*elements)++;
   203dc:	f8da 3000 	ldr.w	r3, [sl]
		field = (char *)field + elem_size;
   203e0:	4444      	add	r4, r8
		(*elements)++;
   203e2:	3301      	adds	r3, #1
   203e4:	f8ca 3000 	str.w	r3, [sl]
   203e8:	e7d7      	b.n	2039a <decode_value+0xa2>
		if (!lexer_next(&json->lexer, value)) {
   203ea:	a903      	add	r1, sp, #12
   203ec:	4630      	mov	r0, r6
   203ee:	f027 f84c 	bl	4748a <lexer_next>
   203f2:	2800      	cmp	r0, #0
   203f4:	d1dd      	bne.n	203b2 <decode_value+0xba>
   203f6:	e79f      	b.n	20338 <decode_value+0x40>
			return -ENOSPC;
   203f8:	f06f 001b 	mvn.w	r0, #27
		return arr_parse(obj, descr->array.element_descr,
   203fc:	e7b4      	b.n	20368 <decode_value+0x70>
	*token->end = '\0';
   203fe:	2600      	movs	r6, #0
	prev_end = *token->end;
   20400:	68ab      	ldr	r3, [r5, #8]
   20402:	781f      	ldrb	r7, [r3, #0]
	*token->end = '\0';
   20404:	701e      	strb	r6, [r3, #0]
	errno = 0;
   20406:	f027 fc87 	bl	47d18 <__errno>
	*num = strtol(token->start, &endptr, 10);
   2040a:	220a      	movs	r2, #10
	errno = 0;
   2040c:	6006      	str	r6, [r0, #0]
	*num = strtol(token->start, &endptr, 10);
   2040e:	a903      	add	r1, sp, #12
   20410:	6868      	ldr	r0, [r5, #4]
   20412:	f021 fdd7 	bl	41fc4 <strtol>
	*token->end = prev_end;
   20416:	68ab      	ldr	r3, [r5, #8]
	*num = strtol(token->start, &endptr, 10);
   20418:	6020      	str	r0, [r4, #0]
	*token->end = prev_end;
   2041a:	701f      	strb	r7, [r3, #0]
	if (errno != 0) {
   2041c:	f027 fc7c 	bl	47d18 <__errno>
   20420:	6800      	ldr	r0, [r0, #0]
   20422:	b120      	cbz	r0, 2042e <decode_value+0x136>
		return -errno;
   20424:	f027 fc78 	bl	47d18 <__errno>
   20428:	6800      	ldr	r0, [r0, #0]
   2042a:	4240      	negs	r0, r0
   2042c:	e79c      	b.n	20368 <decode_value+0x70>
	if (endptr != token->end) {
   2042e:	68aa      	ldr	r2, [r5, #8]
   20430:	9b03      	ldr	r3, [sp, #12]
		return -EINVAL;
   20432:	429a      	cmp	r2, r3
   20434:	bf18      	it	ne
   20436:	f06f 0015 	mvnne.w	r0, #21
   2043a:	e795      	b.n	20368 <decode_value+0x70>
		*value->end = '\0';
   2043c:	2000      	movs	r0, #0
   2043e:	68ab      	ldr	r3, [r5, #8]
   20440:	7018      	strb	r0, [r3, #0]
		*str = value->start;
   20442:	686b      	ldr	r3, [r5, #4]
   20444:	6023      	str	r3, [r4, #0]
		return 0;
   20446:	e78f      	b.n	20368 <decode_value+0x70>
   20448:	0004d95c 	.word	0x0004d95c
   2044c:	0004d943 	.word	0x0004d943
   20450:	0004d96a 	.word	0x0004d96a

00020454 <json_obj_parse>:
}

int json_obj_parse(char *payload, size_t len,
		   const struct json_obj_descr *descr, size_t descr_len,
		   void *val)
{
   20454:	b530      	push	{r4, r5, lr}
	struct json_obj obj;
	int ret;

	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   20456:	2b1e      	cmp	r3, #30
{
   20458:	b08b      	sub	sp, #44	; 0x2c
   2045a:	4615      	mov	r5, r2
   2045c:	461c      	mov	r4, r3
	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   2045e:	d906      	bls.n	2046e <json_obj_parse+0x1a>
   20460:	4b11      	ldr	r3, [pc, #68]	; (204a8 <json_obj_parse+0x54>)
   20462:	4a12      	ldr	r2, [pc, #72]	; (204ac <json_obj_parse+0x58>)
   20464:	f44f 7114 	mov.w	r1, #592	; 0x250
   20468:	4811      	ldr	r0, [pc, #68]	; (204b0 <json_obj_parse+0x5c>)
   2046a:	f020 fa35 	bl	408d8 <__assert_func>
	lexer->state = lexer_json;
   2046e:	4b11      	ldr	r3, [pc, #68]	; (204b4 <json_obj_parse+0x60>)
	lexer->pos = data;
   20470:	9005      	str	r0, [sp, #20]
	lexer->start = data;
   20472:	e9cd 3003 	strd	r3, r0, [sp, #12]
	lexer->token.type = JSON_TOK_NONE;
   20476:	235f      	movs	r3, #95	; 0x5f
	lexer->end = data + len;
   20478:	4408      	add	r0, r1
   2047a:	9006      	str	r0, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   2047c:	4669      	mov	r1, sp
   2047e:	a803      	add	r0, sp, #12
	lexer->token.type = JSON_TOK_NONE;
   20480:	f88d 301c 	strb.w	r3, [sp, #28]
	if (!lexer_next(&json->lexer, &token)) {
   20484:	f027 f801 	bl	4748a <lexer_next>
   20488:	b918      	cbnz	r0, 20492 <json_obj_parse+0x3e>
		return -EINVAL;
   2048a:	f06f 0015 	mvn.w	r0, #21
	if (ret < 0) {
		return ret;
	}

	return obj_parse(&obj, descr, descr_len, val);
}
   2048e:	b00b      	add	sp, #44	; 0x2c
   20490:	bd30      	pop	{r4, r5, pc}
	if (token.type != JSON_TOK_OBJECT_START) {
   20492:	f89d 3000 	ldrb.w	r3, [sp]
   20496:	2b7b      	cmp	r3, #123	; 0x7b
   20498:	d1f7      	bne.n	2048a <json_obj_parse+0x36>
	return obj_parse(&obj, descr, descr_len, val);
   2049a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2049c:	4622      	mov	r2, r4
   2049e:	4629      	mov	r1, r5
   204a0:	a803      	add	r0, sp, #12
   204a2:	f027 f80f 	bl	474c4 <obj_parse>
   204a6:	e7f2      	b.n	2048e <json_obj_parse+0x3a>
   204a8:	0004d98c 	.word	0x0004d98c
   204ac:	0004d94d 	.word	0x0004d94d
   204b0:	0004d96a 	.word	0x0004d96a
   204b4:	000200dd 	.word	0x000200dd

000204b8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   204b8:	680b      	ldr	r3, [r1, #0]
   204ba:	3301      	adds	r3, #1
   204bc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   204be:	4b01      	ldr	r3, [pc, #4]	; (204c4 <char_out+0xc>)
   204c0:	681b      	ldr	r3, [r3, #0]
   204c2:	4718      	bx	r3
   204c4:	20031a60 	.word	0x20031a60

000204c8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   204c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204cc:	b085      	sub	sp, #20
   204ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   204d0:	469b      	mov	fp, r3
   204d2:	2c01      	cmp	r4, #1
   204d4:	bfb8      	it	lt
   204d6:	2401      	movlt	r4, #1
   204d8:	2b01      	cmp	r3, #1
   204da:	bf0c      	ite	eq
   204dc:	2330      	moveq	r3, #48	; 0x30
   204de:	2320      	movne	r3, #32
   204e0:	4616      	mov	r6, r2
   204e2:	4682      	mov	sl, r0
   204e4:	4688      	mov	r8, r1
   204e6:	2501      	movs	r5, #1
   204e8:	270a      	movs	r7, #10
   204ea:	2200      	movs	r2, #0
   204ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2055c <_printk_dec_ulong+0x94>
   204f0:	9302      	str	r3, [sp, #8]
   204f2:	fbb6 f3f9 	udiv	r3, r6, r9
   204f6:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   204f8:	b90a      	cbnz	r2, 204fe <_printk_dec_ulong+0x36>
   204fa:	45b1      	cmp	r9, r6
   204fc:	d81c      	bhi.n	20538 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   204fe:	9b01      	ldr	r3, [sp, #4]
   20500:	4641      	mov	r1, r8
   20502:	f103 0030 	add.w	r0, r3, #48	; 0x30
   20506:	47d0      	blx	sl
			found_largest_digit = 1;
   20508:	2201      	movs	r2, #1
			digits++;
   2050a:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   2050c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   2050e:	3f01      	subs	r7, #1
		remainder %= pos;
   20510:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   20514:	230a      	movs	r3, #10
	while (pos >= 10) {
   20516:	2f01      	cmp	r7, #1
		pos /= 10;
   20518:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   2051c:	d1e9      	bne.n	204f2 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   2051e:	4641      	mov	r1, r8
   20520:	f106 0030 	add.w	r0, r6, #48	; 0x30
   20524:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   20526:	f1bb 0f03 	cmp.w	fp, #3
   2052a:	d102      	bne.n	20532 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   2052c:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   2052e:	2c00      	cmp	r4, #0
   20530:	dc0e      	bgt.n	20550 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   20532:	b005      	add	sp, #20
   20534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   20538:	42bc      	cmp	r4, r7
   2053a:	dbe7      	blt.n	2050c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   2053c:	f1bb 0f02 	cmp.w	fp, #2
   20540:	d8e4      	bhi.n	2050c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   20542:	4641      	mov	r1, r8
   20544:	9802      	ldr	r0, [sp, #8]
   20546:	9203      	str	r2, [sp, #12]
			digits++;
   20548:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   2054a:	47d0      	blx	sl
			digits++;
   2054c:	9a03      	ldr	r2, [sp, #12]
   2054e:	e7dd      	b.n	2050c <_printk_dec_ulong+0x44>
			out(' ', ctx);
   20550:	4641      	mov	r1, r8
   20552:	2020      	movs	r0, #32
   20554:	47d0      	blx	sl
   20556:	3c01      	subs	r4, #1
   20558:	e7e9      	b.n	2052e <_printk_dec_ulong+0x66>
   2055a:	bf00      	nop
   2055c:	3b9aca00 	.word	0x3b9aca00

00020560 <__printk_hook_install>:
	_char_out = fn;
   20560:	4b01      	ldr	r3, [pc, #4]	; (20568 <__printk_hook_install+0x8>)
   20562:	6018      	str	r0, [r3, #0]
}
   20564:	4770      	bx	lr
   20566:	bf00      	nop
   20568:	20031a60 	.word	0x20031a60

0002056c <vprintk>:
	struct out_context ctx = { 0 };
   2056c:	2300      	movs	r3, #0
{
   2056e:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
   20570:	ac02      	add	r4, sp, #8
   20572:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
   20576:	4602      	mov	r2, r0
   20578:	460b      	mov	r3, r1
   2057a:	4803      	ldr	r0, [pc, #12]	; (20588 <vprintk+0x1c>)
   2057c:	4621      	mov	r1, r4
   2057e:	f027 f82e 	bl	475de <z_vprintk>
}
   20582:	b002      	add	sp, #8
   20584:	bd10      	pop	{r4, pc}
   20586:	bf00      	nop
   20588:	000204b9 	.word	0x000204b9

0002058c <nordicsemi_nrf91_init>:
	__asm__ volatile(
   2058c:	f04f 0220 	mov.w	r2, #32
   20590:	f3ef 8311 	mrs	r3, BASEPRI
   20594:	f382 8811 	msr	BASEPRI, r2
   20598:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2059c:	2101      	movs	r1, #1
   2059e:	4a04      	ldr	r2, [pc, #16]	; (205b0 <nordicsemi_nrf91_init+0x24>)
   205a0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   205a4:	f383 8811 	msr	BASEPRI, r3
   205a8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   205ac:	2000      	movs	r0, #0
   205ae:	4770      	bx	lr
   205b0:	40039000 	.word	0x40039000

000205b4 <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   205b4:	b120      	cbz	r0, 205c0 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   205b6:	4b03      	ldr	r3, [pc, #12]	; (205c4 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   205b8:	0180      	lsls	r0, r0, #6
   205ba:	f043 0301 	orr.w	r3, r3, #1
   205be:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   205c0:	4770      	bx	lr
   205c2:	bf00      	nop
   205c4:	0004a820 	.word	0x0004a820

000205c8 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
   205c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   205cc:	4b12      	ldr	r3, [pc, #72]	; (20618 <log_generic+0x50>)
{
   205ce:	b085      	sub	sp, #20
		u32_t timestamp = timestamp_func();
   205d0:	681b      	ldr	r3, [r3, #0]
{
   205d2:	4681      	mov	r9, r0
   205d4:	468a      	mov	sl, r1
   205d6:	9203      	str	r2, [sp, #12]
		u32_t timestamp = timestamp_func();
   205d8:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   205da:	2500      	movs	r5, #0
		u32_t timestamp = timestamp_func();
   205dc:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   205de:	4c0f      	ldr	r4, [pc, #60]	; (2061c <log_generic+0x54>)
   205e0:	4b0f      	ldr	r3, [pc, #60]	; (20620 <log_generic+0x58>)
   205e2:	1b1b      	subs	r3, r3, r4
   205e4:	ea4f 1b23 	mov.w	fp, r3, asr #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   205e8:	455d      	cmp	r5, fp
   205ea:	db02      	blt.n	205f2 <log_generic+0x2a>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   205ec:	b005      	add	sp, #20
   205ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205f2:	012a      	lsls	r2, r5, #4
   205f4:	18a7      	adds	r7, r4, r2
			if (log_backend_is_active(backend)) {
   205f6:	4638      	mov	r0, r7
   205f8:	f027 f97d 	bl	478f6 <log_backend_is_active>
   205fc:	b148      	cbz	r0, 20612 <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   205fe:	58a3      	ldr	r3, [r4, r2]
   20600:	685e      	ldr	r6, [r3, #4]
   20602:	b136      	cbz	r6, 20612 <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   20604:	9b03      	ldr	r3, [sp, #12]
   20606:	4642      	mov	r2, r8
   20608:	9300      	str	r3, [sp, #0]
   2060a:	4649      	mov	r1, r9
   2060c:	4653      	mov	r3, sl
   2060e:	4638      	mov	r0, r7
   20610:	47b0      	blx	r6
		for (int i = 0; i < log_backend_count_get(); i++) {
   20612:	3501      	adds	r5, #1
   20614:	e7e8      	b.n	205e8 <log_generic+0x20>
   20616:	bf00      	nop
   20618:	20031a64 	.word	0x20031a64
   2061c:	0004a7e0 	.word	0x0004a7e0
   20620:	0004a7f0 	.word	0x0004a7f0

00020624 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   20624:	4b03      	ldr	r3, [pc, #12]	; (20634 <log_core_init+0x10>)
   20626:	4a04      	ldr	r2, [pc, #16]	; (20638 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   20628:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   2062c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   2062e:	f000 ba61 	b.w	20af4 <log_output_timestamp_freq_set>
   20632:	bf00      	nop
   20634:	20031a64 	.word	0x20031a64
   20638:	000478fd 	.word	0x000478fd

0002063c <log_source_name_get>:
   2063c:	4a04      	ldr	r2, [pc, #16]	; (20650 <log_source_name_get+0x14>)
   2063e:	4b05      	ldr	r3, [pc, #20]	; (20654 <log_source_name_get+0x18>)
   20640:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   20642:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   20646:	bf34      	ite	cc
   20648:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   2064c:	2000      	movcs	r0, #0
}
   2064e:	4770      	bx	lr
   20650:	0004a688 	.word	0x0004a688
   20654:	0004a7e0 	.word	0x0004a7e0

00020658 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   20658:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   2065a:	4c10      	ldr	r4, [pc, #64]	; (2069c <log_backend_enable+0x44>)
{
   2065c:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   2065e:	1b04      	subs	r4, r0, r4
   20660:	1124      	asrs	r4, r4, #4
   20662:	3401      	adds	r4, #1
{
   20664:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   20666:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   20668:	b948      	cbnz	r0, 2067e <log_backend_enable+0x26>
   2066a:	490d      	ldr	r1, [pc, #52]	; (206a0 <log_backend_enable+0x48>)
   2066c:	480d      	ldr	r0, [pc, #52]	; (206a4 <log_backend_enable+0x4c>)
   2066e:	23bf      	movs	r3, #191	; 0xbf
   20670:	4a0d      	ldr	r2, [pc, #52]	; (206a8 <log_backend_enable+0x50>)
   20672:	f027 f92a 	bl	478ca <printk>
   20676:	21bf      	movs	r1, #191	; 0xbf
   20678:	480b      	ldr	r0, [pc, #44]	; (206a8 <log_backend_enable+0x50>)
   2067a:	f027 f933 	bl	478e4 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   2067e:	2201      	movs	r2, #1
	backend->cb->id = id;
   20680:	686b      	ldr	r3, [r5, #4]
   20682:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   20684:	4c09      	ldr	r4, [pc, #36]	; (206ac <log_backend_enable+0x54>)
	backend->cb->active = true;
   20686:	715a      	strb	r2, [r3, #5]
   20688:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   2068a:	601e      	str	r6, [r3, #0]
   2068c:	b912      	cbnz	r2, 20694 <log_backend_enable+0x3c>
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   2068e:	4808      	ldr	r0, [pc, #32]	; (206b0 <log_backend_enable+0x58>)
   20690:	f01e fbda 	bl	3ee48 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   20694:	2301      	movs	r3, #1
   20696:	7023      	strb	r3, [r4, #0]
}
   20698:	bd70      	pop	{r4, r5, r6, pc}
   2069a:	bf00      	nop
   2069c:	0004a7e0 	.word	0x0004a7e0
   206a0:	0004ccd9 	.word	0x0004ccd9
   206a4:	0004ccf0 	.word	0x0004ccf0
   206a8:	0004d9d1 	.word	0x0004d9d1
   206ac:	2002a6df 	.word	0x2002a6df
   206b0:	200324c0 	.word	0x200324c0

000206b4 <log_init>:
{
   206b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
   206b6:	4e14      	ldr	r6, [pc, #80]	; (20708 <log_init+0x54>)
   206b8:	4b14      	ldr	r3, [pc, #80]	; (2070c <log_init+0x58>)
   206ba:	1b9b      	subs	r3, r3, r6
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   206bc:	2b90      	cmp	r3, #144	; 0x90
   206be:	dd06      	ble.n	206ce <log_init+0x1a>
   206c0:	4b13      	ldr	r3, [pc, #76]	; (20710 <log_init+0x5c>)
   206c2:	4a14      	ldr	r2, [pc, #80]	; (20714 <log_init+0x60>)
   206c4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   206c8:	4813      	ldr	r0, [pc, #76]	; (20718 <log_init+0x64>)
   206ca:	f020 f905 	bl	408d8 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   206ce:	4a13      	ldr	r2, [pc, #76]	; (2071c <log_init+0x68>)
   206d0:	e8d2 4fef 	ldaex	r4, [r2]
   206d4:	1c61      	adds	r1, r4, #1
   206d6:	e8c2 1fe0 	stlex	r0, r1, [r2]
   206da:	2800      	cmp	r0, #0
   206dc:	d1f8      	bne.n	206d0 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   206de:	b914      	cbnz	r4, 206e6 <log_init+0x32>
   206e0:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   206e2:	42ac      	cmp	r4, r5
   206e4:	db00      	blt.n	206e8 <log_init+0x34>
}
   206e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   206e8:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
   206ea:	19f3      	adds	r3, r6, r7
   206ec:	7b1b      	ldrb	r3, [r3, #12]
   206ee:	b143      	cbz	r3, 20702 <log_init+0x4e>
			if (backend->api->init != NULL) {
   206f0:	59f3      	ldr	r3, [r6, r7]
   206f2:	695b      	ldr	r3, [r3, #20]
   206f4:	b103      	cbz	r3, 206f8 <log_init+0x44>
				backend->api->init();
   206f6:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   206f8:	2204      	movs	r2, #4
   206fa:	2100      	movs	r1, #0
   206fc:	19f0      	adds	r0, r6, r7
   206fe:	f7ff ffab 	bl	20658 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   20702:	3401      	adds	r4, #1
   20704:	e7ed      	b.n	206e2 <log_init+0x2e>
   20706:	bf00      	nop
   20708:	0004a7e0 	.word	0x0004a7e0
   2070c:	0004a7f0 	.word	0x0004a7f0
   20710:	0004da03 	.word	0x0004da03
   20714:	0004d9c8 	.word	0x0004d9c8
   20718:	0004da57 	.word	0x0004da57
   2071c:	20023bd8 	.word	0x20023bd8

00020720 <z_impl_log_panic>:
{
   20720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   20722:	4f0d      	ldr	r7, [pc, #52]	; (20758 <z_impl_log_panic+0x38>)
   20724:	783c      	ldrb	r4, [r7, #0]
   20726:	b94c      	cbnz	r4, 2073c <z_impl_log_panic+0x1c>
	log_init();
   20728:	f7ff ffc4 	bl	206b4 <log_init>
   2072c:	4e0b      	ldr	r6, [pc, #44]	; (2075c <z_impl_log_panic+0x3c>)
   2072e:	4d0c      	ldr	r5, [pc, #48]	; (20760 <z_impl_log_panic+0x40>)
   20730:	1bad      	subs	r5, r5, r6
   20732:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   20734:	42ac      	cmp	r4, r5
   20736:	db02      	blt.n	2073e <z_impl_log_panic+0x1e>
	panic_mode = true;
   20738:	2301      	movs	r3, #1
   2073a:	703b      	strb	r3, [r7, #0]
}
   2073c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2073e:	0121      	lsls	r1, r4, #4
   20740:	1872      	adds	r2, r6, r1
		if (log_backend_is_active(backend)) {
   20742:	4610      	mov	r0, r2
   20744:	f027 f8d7 	bl	478f6 <log_backend_is_active>
   20748:	b118      	cbz	r0, 20752 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   2074a:	5873      	ldr	r3, [r6, r1]
   2074c:	4610      	mov	r0, r2
   2074e:	691b      	ldr	r3, [r3, #16]
   20750:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   20752:	3401      	adds	r4, #1
   20754:	e7ee      	b.n	20734 <z_impl_log_panic+0x14>
   20756:	bf00      	nop
   20758:	2002a6e0 	.word	0x2002a6e0
   2075c:	0004a7e0 	.word	0x0004a7e0
   20760:	0004a7f0 	.word	0x0004a7f0

00020764 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   20764:	b40e      	push	{r1, r2, r3}
   20766:	b503      	push	{r0, r1, lr}
   20768:	ab03      	add	r3, sp, #12
   2076a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   2076e:	4601      	mov	r1, r0
   20770:	4804      	ldr	r0, [pc, #16]	; (20784 <print_formatted+0x20>)
	va_start(args, fmt);
   20772:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   20774:	f026 ff33 	bl	475de <z_vprintk>
#endif
	va_end(args);

	return length;
}
   20778:	2000      	movs	r0, #0
   2077a:	b002      	add	sp, #8
   2077c:	f85d eb04 	ldr.w	lr, [sp], #4
   20780:	b003      	add	sp, #12
   20782:	4770      	bx	lr
   20784:	000209c1 	.word	0x000209c1

00020788 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   20788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   2078c:	f011 0402 	ands.w	r4, r1, #2
{
   20790:	b085      	sub	sp, #20
   20792:	4606      	mov	r6, r0
   20794:	4690      	mov	r8, r2
   20796:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2079a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2079e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   207a2:	d007      	beq.n	207b4 <prefix_print+0x2c>
	if (!format) {
   207a4:	f011 0f44 	tst.w	r1, #68	; 0x44
   207a8:	d137      	bne.n	2081a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   207aa:	461a      	mov	r2, r3
   207ac:	4932      	ldr	r1, [pc, #200]	; (20878 <prefix_print+0xf0>)
   207ae:	f7ff ffd9 	bl	20764 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   207b2:	4604      	mov	r4, r0
	if (color) {
   207b4:	f1b9 0f00 	cmp.w	r9, #0
   207b8:	d00a      	beq.n	207d0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   207ba:	4b30      	ldr	r3, [pc, #192]	; (2087c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   207bc:	4930      	ldr	r1, [pc, #192]	; (20880 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   207be:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   207c2:	4b30      	ldr	r3, [pc, #192]	; (20884 <prefix_print+0xfc>)
   207c4:	4630      	mov	r0, r6
   207c6:	2a00      	cmp	r2, #0
   207c8:	bf08      	it	eq
   207ca:	461a      	moveq	r2, r3
   207cc:	f7ff ffca 	bl	20764 <print_formatted>
	if (level_on) {
   207d0:	b13d      	cbz	r5, 207e2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   207d2:	4b2d      	ldr	r3, [pc, #180]	; (20888 <prefix_print+0x100>)
   207d4:	492d      	ldr	r1, [pc, #180]	; (2088c <prefix_print+0x104>)
   207d6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   207da:	4630      	mov	r0, r6
   207dc:	f7ff ffc2 	bl	20764 <print_formatted>
   207e0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   207e2:	f1b8 0f00 	cmp.w	r8, #0
   207e6:	d044      	beq.n	20872 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   207e8:	2301      	movs	r3, #1
   207ea:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   207ee:	4b28      	ldr	r3, [pc, #160]	; (20890 <prefix_print+0x108>)
   207f0:	f017 0f10 	tst.w	r7, #16
   207f4:	4f27      	ldr	r7, [pc, #156]	; (20894 <prefix_print+0x10c>)
   207f6:	bf18      	it	ne
   207f8:	461f      	movne	r7, r3
   207fa:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   207fe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   20802:	f7ff ff1b 	bl	2063c <log_source_name_get>
   20806:	4639      	mov	r1, r7
   20808:	4602      	mov	r2, r0
   2080a:	4630      	mov	r0, r6
   2080c:	f7ff ffaa 	bl	20764 <print_formatted>
   20810:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   20812:	4420      	add	r0, r4
   20814:	b005      	add	sp, #20
   20816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2081a:	4a1f      	ldr	r2, [pc, #124]	; (20898 <prefix_print+0x110>)
   2081c:	6811      	ldr	r1, [r2, #0]
   2081e:	b331      	cbz	r1, 2086e <prefix_print+0xe6>
		timestamp /= timestamp_div;
   20820:	4a1e      	ldr	r2, [pc, #120]	; (2089c <prefix_print+0x114>)
   20822:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   20826:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   20828:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   2082c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   20830:	fbb3 f4f1 	udiv	r4, r3, r1
   20834:	fbb4 f2fe 	udiv	r2, r4, lr
   20838:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   2083c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   20840:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20844:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   20848:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2084c:	fb01 441b 	mls	r4, r1, fp, r4
   20850:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   20854:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20858:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   2085c:	e9cd b101 	strd	fp, r1, [sp, #4]
   20860:	fb0a e113 	mls	r1, sl, r3, lr
   20864:	9100      	str	r1, [sp, #0]
   20866:	490e      	ldr	r1, [pc, #56]	; (208a0 <prefix_print+0x118>)
   20868:	f7ff ff7c 	bl	20764 <print_formatted>
   2086c:	e7a1      	b.n	207b2 <prefix_print+0x2a>
		length = 0;
   2086e:	4608      	mov	r0, r1
   20870:	e79f      	b.n	207b2 <prefix_print+0x2a>
	total += print_formatted(log_output,
   20872:	4f08      	ldr	r7, [pc, #32]	; (20894 <prefix_print+0x10c>)
   20874:	e7c1      	b.n	207fa <prefix_print+0x72>
   20876:	bf00      	nop
   20878:	0004db15 	.word	0x0004db15
   2087c:	0004aa38 	.word	0x0004aa38
   20880:	00051ac7 	.word	0x00051ac7
   20884:	0004db07 	.word	0x0004db07
   20888:	0004aa4c 	.word	0x0004aa4c
   2088c:	0004db3a 	.word	0x0004db3a
   20890:	0004db0c 	.word	0x0004db0c
   20894:	0004db10 	.word	0x0004db10
   20898:	20023bdc 	.word	0x20023bdc
   2089c:	20023be0 	.word	0x20023be0
   208a0:	0004db1e 	.word	0x0004db1e

000208a4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   208a4:	b538      	push	{r3, r4, r5, lr}
   208a6:	460c      	mov	r4, r1
	if (color) {
   208a8:	07e1      	lsls	r1, r4, #31
{
   208aa:	4605      	mov	r5, r0
	if (color) {
   208ac:	d503      	bpl.n	208b6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   208ae:	4a08      	ldr	r2, [pc, #32]	; (208d0 <postfix_print+0x2c>)
   208b0:	4908      	ldr	r1, [pc, #32]	; (208d4 <postfix_print+0x30>)
   208b2:	f7ff ff57 	bl	20764 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   208b6:	06e2      	lsls	r2, r4, #27
   208b8:	d408      	bmi.n	208cc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   208ba:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   208bc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   208be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   208c2:	bf4c      	ite	mi
   208c4:	4904      	ldrmi	r1, [pc, #16]	; (208d8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   208c6:	4905      	ldrpl	r1, [pc, #20]	; (208dc <postfix_print+0x38>)
   208c8:	f7ff bf4c 	b.w	20764 <print_formatted>
}
   208cc:	bd38      	pop	{r3, r4, r5, pc}
   208ce:	bf00      	nop
   208d0:	0004db07 	.word	0x0004db07
   208d4:	00051ac7 	.word	0x00051ac7
   208d8:	0005294b 	.word	0x0005294b
   208dc:	000507c2 	.word	0x000507c2

000208e0 <hexdump_line_print>:
{
   208e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   208e4:	4698      	mov	r8, r3
   208e6:	9b08      	ldr	r3, [sp, #32]
   208e8:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   208ea:	06dd      	lsls	r5, r3, #27
{
   208ec:	460e      	mov	r6, r1
   208ee:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   208f0:	d405      	bmi.n	208fe <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   208f2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   208f4:	bf4c      	ite	mi
   208f6:	492b      	ldrmi	r1, [pc, #172]	; (209a4 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   208f8:	492b      	ldrpl	r1, [pc, #172]	; (209a8 <hexdump_line_print+0xc8>)
   208fa:	f7ff ff33 	bl	20764 <print_formatted>
{
   208fe:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   20900:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 209b0 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   20904:	4545      	cmp	r5, r8
   20906:	db2f      	blt.n	20968 <hexdump_line_print+0x88>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20908:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   2090a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 209b4 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   2090e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 209b8 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   20912:	f8df a09c 	ldr.w	sl, [pc, #156]	; 209b0 <hexdump_line_print+0xd0>
		if (i < length) {
   20916:	42af      	cmp	r7, r5
   20918:	d933      	bls.n	20982 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   2091a:	5d72      	ldrb	r2, [r6, r5]
   2091c:	4649      	mov	r1, r9
   2091e:	4620      	mov	r0, r4
   20920:	f7ff ff20 	bl	20764 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20924:	3501      	adds	r5, #1
   20926:	2d10      	cmp	r5, #16
   20928:	d124      	bne.n	20974 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   2092a:	4920      	ldr	r1, [pc, #128]	; (209ac <hexdump_line_print+0xcc>)
   2092c:	4620      	mov	r0, r4
   2092e:	f7ff ff19 	bl	20764 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20932:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   20934:	f8df 8078 	ldr.w	r8, [pc, #120]	; 209b0 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%c",
   20938:	f8df a080 	ldr.w	sl, [pc, #128]	; 209bc <hexdump_line_print+0xdc>
		if (i < length) {
   2093c:	42af      	cmp	r7, r5
   2093e:	d92c      	bls.n	2099a <hexdump_line_print+0xba>
			char c = (char)data[i];
   20940:	f816 9005 	ldrb.w	r9, [r6, r5]
			      isprint((int)c) ? c : '.');
   20944:	f020 f810 	bl	40968 <__locale_ctype_ptr>
   20948:	4448      	add	r0, r9
			print_formatted(log_output, "%c",
   2094a:	7843      	ldrb	r3, [r0, #1]
   2094c:	4651      	mov	r1, sl
   2094e:	f013 0f97 	tst.w	r3, #151	; 0x97
   20952:	bf14      	ite	ne
   20954:	464a      	movne	r2, r9
   20956:	222e      	moveq	r2, #46	; 0x2e
   20958:	4620      	mov	r0, r4
   2095a:	f7ff ff03 	bl	20764 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2095e:	3501      	adds	r5, #1
   20960:	2d10      	cmp	r5, #16
   20962:	d113      	bne.n	2098c <hexdump_line_print+0xac>
}
   20964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   20968:	4649      	mov	r1, r9
   2096a:	4620      	mov	r0, r4
   2096c:	f7ff fefa 	bl	20764 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   20970:	3501      	adds	r5, #1
   20972:	e7c7      	b.n	20904 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   20974:	076a      	lsls	r2, r5, #29
   20976:	d1ce      	bne.n	20916 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   20978:	4651      	mov	r1, sl
   2097a:	4620      	mov	r0, r4
   2097c:	f7ff fef2 	bl	20764 <print_formatted>
   20980:	e7c9      	b.n	20916 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   20982:	4641      	mov	r1, r8
   20984:	4620      	mov	r0, r4
   20986:	f7ff feed 	bl	20764 <print_formatted>
   2098a:	e7cb      	b.n	20924 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   2098c:	076b      	lsls	r3, r5, #29
   2098e:	d1d5      	bne.n	2093c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   20990:	4641      	mov	r1, r8
   20992:	4620      	mov	r0, r4
   20994:	f7ff fee6 	bl	20764 <print_formatted>
   20998:	e7d0      	b.n	2093c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   2099a:	4641      	mov	r1, r8
   2099c:	4620      	mov	r0, r4
   2099e:	f7ff fee1 	bl	20764 <print_formatted>
   209a2:	e7dc      	b.n	2095e <hexdump_line_print+0x7e>
   209a4:	0005294b 	.word	0x0005294b
   209a8:	000507c2 	.word	0x000507c2
   209ac:	0004da8f 	.word	0x0004da8f
   209b0:	0004da8d 	.word	0x0004da8d
   209b4:	0004da8b 	.word	0x0004da8b
   209b8:	0004da85 	.word	0x0004da85
   209bc:	0004da91 	.word	0x0004da91

000209c0 <out_func>:
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   209c0:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   209c4:	681b      	ldr	r3, [r3, #0]
{
   209c6:	b510      	push	{r4, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   209c8:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   209ca:	684a      	ldr	r2, [r1, #4]
{
   209cc:	460c      	mov	r4, r1
	out_ctx->control_block->offset++;
   209ce:	6813      	ldr	r3, [r2, #0]
   209d0:	3301      	adds	r3, #1
   209d2:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   209d4:	68ca      	ldr	r2, [r1, #12]
   209d6:	4293      	cmp	r3, r2
   209d8:	d909      	bls.n	209ee <out_func+0x2e>
   209da:	490a      	ldr	r1, [pc, #40]	; (20a04 <out_func+0x44>)
   209dc:	480a      	ldr	r0, [pc, #40]	; (20a08 <out_func+0x48>)
   209de:	2365      	movs	r3, #101	; 0x65
   209e0:	4a0a      	ldr	r2, [pc, #40]	; (20a0c <out_func+0x4c>)
   209e2:	f026 ff72 	bl	478ca <printk>
   209e6:	2165      	movs	r1, #101	; 0x65
   209e8:	4808      	ldr	r0, [pc, #32]	; (20a0c <out_func+0x4c>)
   209ea:	f026 ff7b 	bl	478e4 <assert_post_action>
	if (out_ctx->control_block->offset == out_ctx->size) {
   209ee:	6863      	ldr	r3, [r4, #4]
   209f0:	681a      	ldr	r2, [r3, #0]
   209f2:	68e3      	ldr	r3, [r4, #12]
   209f4:	429a      	cmp	r2, r3
   209f6:	d102      	bne.n	209fe <out_func+0x3e>
		log_output_flush(out_ctx);
   209f8:	4620      	mov	r0, r4
   209fa:	f026 ffa3 	bl	47944 <log_output_flush>
}
   209fe:	2000      	movs	r0, #0
   20a00:	bd10      	pop	{r4, pc}
   20a02:	bf00      	nop
   20a04:	0004dad7 	.word	0x0004dad7
   20a08:	0004ccf0 	.word	0x0004ccf0
   20a0c:	0004daa7 	.word	0x0004daa7

00020a10 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   20a10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);

	if (!raw_string) {
   20a14:	f011 0407 	ands.w	r4, r1, #7
{
   20a18:	4607      	mov	r7, r0
   20a1a:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   20a1e:	461d      	mov	r5, r3
	if (!raw_string) {
   20a20:	d00b      	beq.n	20a3a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   20a22:	f3c1 1389 	ubfx	r3, r1, #6, #10
   20a26:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   20a2a:	9302      	str	r3, [sp, #8]
   20a2c:	e9cd 4100 	strd	r4, r1, [sp]
   20a30:	4613      	mov	r3, r2
   20a32:	4631      	mov	r1, r6
   20a34:	2201      	movs	r2, #1
   20a36:	f7ff fea7 	bl	20788 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   20a3a:	4643      	mov	r3, r8
   20a3c:	462a      	mov	r2, r5
   20a3e:	4639      	mov	r1, r7
   20a40:	480d      	ldr	r0, [pc, #52]	; (20a78 <log_output_string+0x68>)
   20a42:	f026 fdcc 	bl	475de <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   20a46:	b98c      	cbnz	r4, 20a6c <log_output_string+0x5c>
   20a48:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   20a4a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   20a4e:	b95b      	cbnz	r3, 20a68 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   20a50:	2c0a      	cmp	r4, #10
   20a52:	d103      	bne.n	20a5c <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   20a54:	4909      	ldr	r1, [pc, #36]	; (20a7c <log_output_string+0x6c>)
   20a56:	4638      	mov	r0, r7
   20a58:	f7ff fe84 	bl	20764 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   20a5c:	4638      	mov	r0, r7
}
   20a5e:	b004      	add	sp, #16
   20a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   20a64:	f026 bf6e 	b.w	47944 <log_output_flush>
	while (*fmt != '\0') {
   20a68:	461c      	mov	r4, r3
   20a6a:	e7ee      	b.n	20a4a <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   20a6c:	4622      	mov	r2, r4
   20a6e:	4631      	mov	r1, r6
   20a70:	4638      	mov	r0, r7
   20a72:	f7ff ff17 	bl	208a4 <postfix_print>
   20a76:	e7f1      	b.n	20a5c <log_output_string+0x4c>
   20a78:	000209c1 	.word	0x000209c1
   20a7c:	0004daa5 	.word	0x0004daa5

00020a80 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   20a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20a84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   20a86:	4698      	mov	r8, r3
   20a88:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   20a8c:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   20a90:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   20a94:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   20a98:	9302      	str	r3, [sp, #8]
   20a9a:	e9cd 9100 	strd	r9, r1, [sp]
   20a9e:	4613      	mov	r3, r2
   20aa0:	4631      	mov	r1, r6
   20aa2:	2201      	movs	r2, #1
{
   20aa4:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   20aa6:	f7ff fe6f 	bl	20788 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   20aaa:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   20aac:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   20aae:	4910      	ldr	r1, [pc, #64]	; (20af0 <log_output_hexdump+0x70>)
   20ab0:	4620      	mov	r0, r4
   20ab2:	f7ff fe57 	bl	20764 <print_formatted>

	while (length) {
   20ab6:	b955      	cbnz	r5, 20ace <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   20ab8:	4620      	mov	r0, r4
   20aba:	464a      	mov	r2, r9
   20abc:	4631      	mov	r1, r6
   20abe:	f7ff fef1 	bl	208a4 <postfix_print>
	log_output_flush(log_output);
   20ac2:	4620      	mov	r0, r4
}
   20ac4:	b004      	add	sp, #16
   20ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   20aca:	f026 bf3b 	b.w	47944 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   20ace:	2d10      	cmp	r5, #16
   20ad0:	46a8      	mov	r8, r5
   20ad2:	bf28      	it	cs
   20ad4:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   20ad8:	4639      	mov	r1, r7
   20ada:	9600      	str	r6, [sp, #0]
   20adc:	4653      	mov	r3, sl
   20ade:	4642      	mov	r2, r8
   20ae0:	4620      	mov	r0, r4
   20ae2:	f7ff fefd 	bl	208e0 <hexdump_line_print>
		data += part_len;
   20ae6:	4447      	add	r7, r8
		length -= part_len;
   20ae8:	eba5 0508 	sub.w	r5, r5, r8
   20aec:	e7e3      	b.n	20ab6 <log_output_hexdump+0x36>
   20aee:	bf00      	nop
   20af0:	00051ac7 	.word	0x00051ac7

00020af4 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   20af4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   20af6:	2100      	movs	r1, #0
	timestamp_div = 1U;
   20af8:	4a07      	ldr	r2, [pc, #28]	; (20b18 <log_output_timestamp_freq_set+0x24>)
{
   20afa:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   20afc:	4c07      	ldr	r4, [pc, #28]	; (20b1c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   20afe:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   20b00:	42a0      	cmp	r0, r4
   20b02:	d804      	bhi.n	20b0e <log_output_timestamp_freq_set+0x1a>
   20b04:	b101      	cbz	r1, 20b08 <log_output_timestamp_freq_set+0x14>
   20b06:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   20b08:	4b05      	ldr	r3, [pc, #20]	; (20b20 <log_output_timestamp_freq_set+0x2c>)
   20b0a:	6018      	str	r0, [r3, #0]
}
   20b0c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   20b0e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   20b10:	005b      	lsls	r3, r3, #1
   20b12:	2101      	movs	r1, #1
   20b14:	e7f4      	b.n	20b00 <log_output_timestamp_freq_set+0xc>
   20b16:	bf00      	nop
   20b18:	20023be0 	.word	0x20023be0
   20b1c:	000f4240 	.word	0x000f4240
   20b20:	20023bdc 	.word	0x20023bdc

00020b24 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   20b24:	4801      	ldr	r0, [pc, #4]	; (20b2c <panic+0x8>)
   20b26:	f026 bf0d 	b.w	47944 <log_output_flush>
   20b2a:	bf00      	nop
   20b2c:	0004aa78 	.word	0x0004aa78

00020b30 <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
   20b30:	b508      	push	{r3, lr}
   20b32:	4806      	ldr	r0, [pc, #24]	; (20b4c <log_backend_uart_init+0x1c>)
   20b34:	f01c f8d8 	bl	3cce8 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   20b38:	b928      	cbnz	r0, 20b46 <log_backend_uart_init+0x16>
   20b3a:	4b05      	ldr	r3, [pc, #20]	; (20b50 <log_backend_uart_init+0x20>)
   20b3c:	4a05      	ldr	r2, [pc, #20]	; (20b54 <log_backend_uart_init+0x24>)
   20b3e:	212a      	movs	r1, #42	; 0x2a
   20b40:	4805      	ldr	r0, [pc, #20]	; (20b58 <log_backend_uart_init+0x28>)
   20b42:	f01f fec9 	bl	408d8 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   20b46:	4b05      	ldr	r3, [pc, #20]	; (20b5c <log_backend_uart_init+0x2c>)
   20b48:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   20b4a:	bd08      	pop	{r3, pc}
   20b4c:	0004db76 	.word	0x0004db76
   20b50:	0004d806 	.word	0x0004d806
   20b54:	0004db60 	.word	0x0004db60
   20b58:	0004db7d 	.word	0x0004db7d
   20b5c:	20023bec 	.word	0x20023bec

00020b60 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   20b60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20b64:	460e      	mov	r6, r1
   20b66:	4617      	mov	r7, r2
   20b68:	4698      	mov	r8, r3
	__asm__ volatile(
   20b6a:	f04f 0320 	mov.w	r3, #32
   20b6e:	f3ef 8511 	mrs	r5, BASEPRI
   20b72:	f383 8811 	msr	BASEPRI, r3
   20b76:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
   20b7a:	4c0b      	ldr	r4, [pc, #44]	; (20ba8 <sync_hexdump+0x48>)
   20b7c:	4620      	mov	r0, r4
   20b7e:	f026 fee1 	bl	47944 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   20b82:	230f      	movs	r3, #15
   20b84:	9302      	str	r3, [sp, #8]
   20b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20b88:	463a      	mov	r2, r7
   20b8a:	9301      	str	r3, [sp, #4]
   20b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20b8e:	4631      	mov	r1, r6
   20b90:	9300      	str	r3, [sp, #0]
   20b92:	4620      	mov	r0, r4
   20b94:	4643      	mov	r3, r8
   20b96:	f7ff ff73 	bl	20a80 <log_output_hexdump>
	__asm__ volatile(
   20b9a:	f385 8811 	msr	BASEPRI, r5
   20b9e:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
   20ba2:	b004      	add	sp, #16
   20ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20ba8:	0004aa78 	.word	0x0004aa78

00020bac <sync_string>:
{
   20bac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20bb0:	460e      	mov	r6, r1
   20bb2:	4617      	mov	r7, r2
   20bb4:	4698      	mov	r8, r3
	__asm__ volatile(
   20bb6:	f04f 0320 	mov.w	r3, #32
   20bba:	f3ef 8511 	mrs	r5, BASEPRI
   20bbe:	f383 8811 	msr	BASEPRI, r3
   20bc2:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   20bc6:	4c0a      	ldr	r4, [pc, #40]	; (20bf0 <sync_string+0x44>)
   20bc8:	4620      	mov	r0, r4
   20bca:	f026 febb 	bl	47944 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   20bce:	230f      	movs	r3, #15
   20bd0:	9301      	str	r3, [sp, #4]
   20bd2:	9b08      	ldr	r3, [sp, #32]
   20bd4:	463a      	mov	r2, r7
   20bd6:	9300      	str	r3, [sp, #0]
   20bd8:	4631      	mov	r1, r6
   20bda:	4643      	mov	r3, r8
   20bdc:	4620      	mov	r0, r4
   20bde:	f7ff ff17 	bl	20a10 <log_output_string>
	__asm__ volatile(
   20be2:	f385 8811 	msr	BASEPRI, r5
   20be6:	f3bf 8f6f 	isb	sy
}
   20bea:	b002      	add	sp, #8
   20bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20bf0:	0004aa78 	.word	0x0004aa78

00020bf4 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   20bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20bf6:	4604      	mov	r4, r0
   20bf8:	460d      	mov	r5, r1
   20bfa:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   20bfc:	f026 ffc2 	bl	47b84 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   20c00:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   20c02:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   20c04:	d906      	bls.n	20c14 <boot_write_trailer_byte+0x20>
   20c06:	4b0c      	ldr	r3, [pc, #48]	; (20c38 <boot_write_trailer_byte+0x44>)
   20c08:	4a0c      	ldr	r2, [pc, #48]	; (20c3c <boot_write_trailer_byte+0x48>)
   20c0a:	f44f 719b 	mov.w	r1, #310	; 0x136
   20c0e:	480c      	ldr	r0, [pc, #48]	; (20c40 <boot_write_trailer_byte+0x4c>)
   20c10:	f01f fe62 	bl	408d8 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   20c14:	f04f 30ff 	mov.w	r0, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   20c18:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   20c1a:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   20c1e:	4629      	mov	r1, r5
   20c20:	4620      	mov	r0, r4
	buf[0] = val;
   20c22:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   20c26:	f026 ff5e 	bl	47ae6 <flash_area_write>
	if (rc != 0) {
   20c2a:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   20c2c:	bf18      	it	ne
   20c2e:	f06f 0004 	mvnne.w	r0, #4
   20c32:	b002      	add	sp, #8
   20c34:	bd70      	pop	{r4, r5, r6, pc}
   20c36:	bf00      	nop
   20c38:	0004dbdc 	.word	0x0004dbdc
   20c3c:	0004dbc4 	.word	0x0004dbc4
   20c40:	0004dbf4 	.word	0x0004dbf4

00020c44 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   20c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20c46:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   20c48:	a901      	add	r1, sp, #4
   20c4a:	2006      	movs	r0, #6
   20c4c:	f000 f9a8 	bl	20fa0 <flash_area_open>
	if (rc) {
   20c50:	4604      	mov	r4, r0
   20c52:	bb10      	cbnz	r0, 20c9a <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   20c54:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   20c56:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   20c58:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   20c5a:	4a12      	ldr	r2, [pc, #72]	; (20ca4 <boot_request_upgrade+0x60>)
   20c5c:	3910      	subs	r1, #16
   20c5e:	f026 ff42 	bl	47ae6 <flash_area_write>
   20c62:	4604      	mov	r4, r0
	flash_area_close(fa);
   20c64:	9801      	ldr	r0, [sp, #4]
   20c66:	f026 ff20 	bl	47aaa <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   20c6a:	b9b4      	cbnz	r4, 20c9a <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   20c6c:	b1c5      	cbz	r5, 20ca0 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   20c6e:	2006      	movs	r0, #6
   20c70:	f026 fe99 	bl	479a6 <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   20c74:	4604      	mov	r4, r0
   20c76:	b980      	cbnz	r0, 20c9a <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   20c78:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   20c7a:	a901      	add	r1, sp, #4
   20c7c:	2006      	movs	r0, #6
   20c7e:	f000 f98f 	bl	20fa0 <flash_area_open>
	if (rc) {
   20c82:	4604      	mov	r4, r0
   20c84:	b948      	cbnz	r0, 20c9a <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   20c86:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   20c88:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   20c8a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   20c8c:	3928      	subs	r1, #40	; 0x28
   20c8e:	f7ff ffb1 	bl	20bf4 <boot_write_trailer_byte>
   20c92:	4604      	mov	r4, r0
	flash_area_close(fa);
   20c94:	9801      	ldr	r0, [sp, #4]
   20c96:	f026 ff08 	bl	47aaa <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   20c9a:	4620      	mov	r0, r4
   20c9c:	b003      	add	sp, #12
   20c9e:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   20ca0:	2502      	movs	r5, #2
   20ca2:	e7ea      	b.n	20c7a <boot_request_upgrade+0x36>
   20ca4:	0004aa88 	.word	0x0004aa88

00020ca8 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   20ca8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20cac:	4606      	mov	r6, r0
	flash_dev = flash_area_get_device(fap);
   20cae:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
{
   20cb2:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   20cb4:	f026 ff6d 	bl	47b92 <flash_area_get_device>
	if (flash_dev) {
   20cb8:	b990      	cbnz	r0, 20ce0 <flash_progressive_erase+0x38>
	int rc = -ENODEV;
   20cba:	f06f 0412 	mvn.w	r4, #18
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   20cbe:	2301      	movs	r3, #1
   20cc0:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   20cc4:	4a24      	ldr	r2, [pc, #144]	; (20d58 <flash_progressive_erase+0xb0>)
   20cc6:	f363 0002 	bfi	r0, r3, #0, #3
   20cca:	4b24      	ldr	r3, [pc, #144]	; (20d5c <flash_progressive_erase+0xb4>)
   20ccc:	f36f 00c5 	bfc	r0, #3, #3
   20cd0:	1a9b      	subs	r3, r3, r2
   20cd2:	08db      	lsrs	r3, r3, #3
   20cd4:	f363 108f 	bfi	r0, r3, #6, #10
   20cd8:	4921      	ldr	r1, [pc, #132]	; (20d60 <flash_progressive_erase+0xb8>)
   20cda:	f026 fe13 	bl	47904 <log_string_sync>
   20cde:	e00c      	b.n	20cfa <flash_progressive_erase+0x52>
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&dev, *(u32_t *)&offset, *(u32_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   20ce0:	4621      	mov	r1, r4
   20ce2:	aa01      	add	r2, sp, #4
   20ce4:	f027 ff8b 	bl	48bfe <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   20ce8:	4604      	mov	r4, r0
   20cea:	2800      	cmp	r0, #0
   20cec:	d1e7      	bne.n	20cbe <flash_progressive_erase+0x16>
			sector->fs_size = page.size;
   20cee:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
	} else {
		if (ctx->off_last != sector.fs_off) {
   20cf2:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
   20cf6:	42bb      	cmp	r3, r7
   20cf8:	d103      	bne.n	20d02 <flash_progressive_erase+0x5a>
			}
		}
	}

	return rc;
}
   20cfa:	4620      	mov	r0, r4
   20cfc:	b004      	add	sp, #16
   20cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Erasing sector at offset 0x%08lx",
   20d02:	2303      	movs	r3, #3
   20d04:	f04f 0000 	mov.w	r0, #0
   20d08:	4d14      	ldr	r5, [pc, #80]	; (20d5c <flash_progressive_erase+0xb4>)
   20d0a:	f363 0002 	bfi	r0, r3, #0, #3
   20d0e:	4b12      	ldr	r3, [pc, #72]	; (20d58 <flash_progressive_erase+0xb0>)
   20d10:	f364 00c5 	bfi	r0, r4, #3, #3
   20d14:	1aed      	subs	r5, r5, r3
   20d16:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   20d1a:	f365 108f 	bfi	r0, r5, #6, #10
   20d1e:	463a      	mov	r2, r7
   20d20:	4910      	ldr	r1, [pc, #64]	; (20d64 <flash_progressive_erase+0xbc>)
			ctx->off_last = sector.fs_off;
   20d22:	f8c6 720c 	str.w	r7, [r6, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   20d26:	f026 fded 	bl	47904 <log_string_sync>
			rc = flash_area_erase(ctx->flash_area, sector.fs_off,
   20d2a:	4642      	mov	r2, r8
   20d2c:	4639      	mov	r1, r7
   20d2e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   20d32:	f026 ff01 	bl	47b38 <flash_area_erase>
			if (rc) {
   20d36:	4604      	mov	r4, r0
   20d38:	2800      	cmp	r0, #0
   20d3a:	d0de      	beq.n	20cfa <flash_progressive_erase+0x52>
				LOG_ERR("Error %d while erasing sector", rc);
   20d3c:	2301      	movs	r3, #1
   20d3e:	f04f 0000 	mov.w	r0, #0
   20d42:	f363 0002 	bfi	r0, r3, #0, #3
   20d46:	f36f 00c5 	bfc	r0, #3, #3
   20d4a:	f365 108f 	bfi	r0, r5, #6, #10
   20d4e:	4622      	mov	r2, r4
   20d50:	4905      	ldr	r1, [pc, #20]	; (20d68 <flash_progressive_erase+0xc0>)
   20d52:	f026 fdd7 	bl	47904 <log_string_sync>
	return rc;
   20d56:	e7d0      	b.n	20cfa <flash_progressive_erase+0x52>
   20d58:	0004a688 	.word	0x0004a688
   20d5c:	0004a718 	.word	0x0004a718
   20d60:	0004dc22 	.word	0x0004dc22
   20d64:	0004dc48 	.word	0x0004dc48
   20d68:	0004dc69 	.word	0x0004dc69

00020d6c <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   20d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d70:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   20d72:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
{
   20d76:	b085      	sub	sp, #20
	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   20d78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   20d7c:	46a0      	mov	r8, r4
   20d7e:	d205      	bcs.n	20d8c <flash_sync+0x20>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   20d80:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   20d84:	21ff      	movs	r1, #255	; 0xff
   20d86:	4420      	add	r0, r4
   20d88:	f020 f956 	bl	41038 <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	flash_progressive_erase(ctx, ctx->bytes_written +
   20d8c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   20d90:	4620      	mov	r0, r4
   20d92:	f501 7100 	add.w	r1, r1, #512	; 0x200
   20d96:	f7ff ff87 	bl	20ca8 <flash_progressive_erase>
				CONFIG_IMG_BLOCK_BUF_SIZE);
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   20d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
   20d9e:	4622      	mov	r2, r4
   20da0:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   20da4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   20da8:	f026 fe9d 	bl	47ae6 <flash_area_write>
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   20dac:	4605      	mov	r5, r0
   20dae:	b1b0      	cbz	r0, 20dde <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   20db0:	2301      	movs	r3, #1
   20db2:	f04f 0000 	mov.w	r0, #0
   20db6:	4a33      	ldr	r2, [pc, #204]	; (20e84 <flash_sync+0x118>)
   20db8:	f363 0002 	bfi	r0, r3, #0, #3
   20dbc:	4b32      	ldr	r3, [pc, #200]	; (20e88 <flash_sync+0x11c>)
   20dbe:	f36f 00c5 	bfc	r0, #3, #3
   20dc2:	1a9b      	subs	r3, r3, r2
   20dc4:	08db      	lsrs	r3, r3, #3
   20dc6:	f363 108f 	bfi	r0, r3, #6, #10
   20dca:	462a      	mov	r2, r5
   20dcc:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   20dd0:	492e      	ldr	r1, [pc, #184]	; (20e8c <flash_sync+0x120>)
   20dd2:	f026 fd97 	bl	47904 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   20dd6:	4628      	mov	r0, r5
   20dd8:	b005      	add	sp, #20
   20dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   20dde:	f44f 7a00 	mov.w	sl, #512	; 0x200
   20de2:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
   20de6:	f8d4 7204 	ldr.w	r7, [r4, #516]	; 0x204
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   20dea:	4656      	mov	r6, sl
   20dec:	2e04      	cmp	r6, #4
   20dee:	bf28      	it	cs
   20df0:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   20df2:	aa03      	add	r2, sp, #12
   20df4:	4633      	mov	r3, r6
   20df6:	4639      	mov	r1, r7
   20df8:	4658      	mov	r0, fp
   20dfa:	f026 fe57 	bl	47aac <flash_area_read>
		if (rc) {
   20dfe:	4681      	mov	r9, r0
   20e00:	b1a0      	cbz	r0, 20e2c <flash_sync+0xc0>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   20e02:	2301      	movs	r3, #1
   20e04:	f04f 0000 	mov.w	r0, #0
   20e08:	4a1e      	ldr	r2, [pc, #120]	; (20e84 <flash_sync+0x118>)
   20e0a:	f363 0002 	bfi	r0, r3, #0, #3
   20e0e:	4b1e      	ldr	r3, [pc, #120]	; (20e88 <flash_sync+0x11c>)
   20e10:	f36f 00c5 	bfc	r0, #3, #3
   20e14:	1a9b      	subs	r3, r3, r2
   20e16:	08db      	lsrs	r3, r3, #3
   20e18:	f363 108f 	bfi	r0, r3, #6, #10
   20e1c:	464a      	mov	r2, r9
   20e1e:	463b      	mov	r3, r7
   20e20:	491b      	ldr	r1, [pc, #108]	; (20e90 <flash_sync+0x124>)
   20e22:	f026 fd6f 	bl	47904 <log_string_sync>
		return -EIO;
   20e26:	f06f 0504 	mvn.w	r5, #4
   20e2a:	e7d4      	b.n	20dd6 <flash_sync+0x6a>
		if (memcmp(data, &temp, size)) {
   20e2c:	4632      	mov	r2, r6
   20e2e:	a903      	add	r1, sp, #12
   20e30:	4640      	mov	r0, r8
   20e32:	f020 f8bf 	bl	40fb4 <memcmp>
   20e36:	4605      	mov	r5, r0
   20e38:	b1a8      	cbz	r0, 20e66 <flash_sync+0xfa>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   20e3a:	2301      	movs	r3, #1
   20e3c:	f04f 0000 	mov.w	r0, #0
   20e40:	4a10      	ldr	r2, [pc, #64]	; (20e84 <flash_sync+0x118>)
   20e42:	f363 0002 	bfi	r0, r3, #0, #3
   20e46:	4b10      	ldr	r3, [pc, #64]	; (20e88 <flash_sync+0x11c>)
   20e48:	f369 00c5 	bfi	r0, r9, #3, #3
   20e4c:	1a9b      	subs	r3, r3, r2
   20e4e:	08db      	lsrs	r3, r3, #3
   20e50:	f363 108f 	bfi	r0, r3, #6, #10
   20e54:	f898 3000 	ldrb.w	r3, [r8]
   20e58:	463a      	mov	r2, r7
   20e5a:	9300      	str	r3, [sp, #0]
   20e5c:	490d      	ldr	r1, [pc, #52]	; (20e94 <flash_sync+0x128>)
   20e5e:	9b03      	ldr	r3, [sp, #12]
   20e60:	f026 fd50 	bl	47904 <log_string_sync>
   20e64:	e7df      	b.n	20e26 <flash_sync+0xba>
	while (len) {
   20e66:	ebba 0a06 	subs.w	sl, sl, r6
		offset += size;
   20e6a:	4437      	add	r7, r6
		data += size;
   20e6c:	44b0      	add	r8, r6
	while (len) {
   20e6e:	d1bc      	bne.n	20dea <flash_sync+0x7e>
	ctx->bytes_written += ctx->buf_bytes;
   20e70:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   20e74:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   20e78:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	ctx->bytes_written += ctx->buf_bytes;
   20e7c:	4413      	add	r3, r2
   20e7e:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	return rc;
   20e82:	e7a8      	b.n	20dd6 <flash_sync+0x6a>
   20e84:	0004a688 	.word	0x0004a688
   20e88:	0004a718 	.word	0x0004a718
   20e8c:	0004dc87 	.word	0x0004dc87
   20e90:	0004dcab 	.word	0x0004dcab
   20e94:	0004dcce 	.word	0x0004dcce

00020e98 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   20e98:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   20e9a:	4605      	mov	r5, r0
   20e9c:	b948      	cbnz	r0, 20eb2 <socket_offload_register+0x1a>
   20e9e:	490c      	ldr	r1, [pc, #48]	; (20ed0 <socket_offload_register+0x38>)
   20ea0:	480c      	ldr	r0, [pc, #48]	; (20ed4 <socket_offload_register+0x3c>)
   20ea2:	2311      	movs	r3, #17
   20ea4:	4a0c      	ldr	r2, [pc, #48]	; (20ed8 <socket_offload_register+0x40>)
   20ea6:	f026 fd10 	bl	478ca <printk>
   20eaa:	2111      	movs	r1, #17
   20eac:	480a      	ldr	r0, [pc, #40]	; (20ed8 <socket_offload_register+0x40>)
   20eae:	f026 fd19 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   20eb2:	4c0a      	ldr	r4, [pc, #40]	; (20edc <socket_offload_register+0x44>)
   20eb4:	6822      	ldr	r2, [r4, #0]
   20eb6:	b14a      	cbz	r2, 20ecc <socket_offload_register+0x34>
   20eb8:	4909      	ldr	r1, [pc, #36]	; (20ee0 <socket_offload_register+0x48>)
   20eba:	4806      	ldr	r0, [pc, #24]	; (20ed4 <socket_offload_register+0x3c>)
   20ebc:	2312      	movs	r3, #18
   20ebe:	4a06      	ldr	r2, [pc, #24]	; (20ed8 <socket_offload_register+0x40>)
   20ec0:	f026 fd03 	bl	478ca <printk>
   20ec4:	2112      	movs	r1, #18
   20ec6:	4804      	ldr	r0, [pc, #16]	; (20ed8 <socket_offload_register+0x40>)
   20ec8:	f026 fd0c 	bl	478e4 <assert_post_action>

	socket_ops = ops;
   20ecc:	6025      	str	r5, [r4, #0]
}
   20ece:	bd38      	pop	{r3, r4, r5, pc}
   20ed0:	0004ce2b 	.word	0x0004ce2b
   20ed4:	0004ccf0 	.word	0x0004ccf0
   20ed8:	0004dd1c 	.word	0x0004dd1c
   20edc:	20023bf8 	.word	0x20023bf8
   20ee0:	0004dd58 	.word	0x0004dd58

00020ee4 <sys_rand32_get>:
#include <drivers/entropy.h>

static struct device *entropy_driver;

u32_t sys_rand32_get(void)
{
   20ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   20ee6:	4d1a      	ldr	r5, [pc, #104]	; (20f50 <sys_rand32_get+0x6c>)
   20ee8:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   20eea:	b99c      	cbnz	r4, 20f14 <sys_rand32_get+0x30>
   20eec:	4819      	ldr	r0, [pc, #100]	; (20f54 <sys_rand32_get+0x70>)
   20eee:	f01b fefb 	bl	3cce8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   20ef2:	4604      	mov	r4, r0
   20ef4:	b968      	cbnz	r0, 20f12 <sys_rand32_get+0x2e>
   20ef6:	231b      	movs	r3, #27
   20ef8:	4a17      	ldr	r2, [pc, #92]	; (20f58 <sys_rand32_get+0x74>)
   20efa:	4918      	ldr	r1, [pc, #96]	; (20f5c <sys_rand32_get+0x78>)
   20efc:	4818      	ldr	r0, [pc, #96]	; (20f60 <sys_rand32_get+0x7c>)
   20efe:	f026 fce4 	bl	478ca <printk>
   20f02:	4914      	ldr	r1, [pc, #80]	; (20f54 <sys_rand32_get+0x70>)
   20f04:	4817      	ldr	r0, [pc, #92]	; (20f64 <sys_rand32_get+0x80>)
   20f06:	f026 fce0 	bl	478ca <printk>
   20f0a:	211b      	movs	r1, #27
   20f0c:	4812      	ldr	r0, [pc, #72]	; (20f58 <sys_rand32_get+0x74>)
   20f0e:	f026 fce9 	bl	478e4 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   20f12:	602c      	str	r4, [r5, #0]

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api =
   20f14:	6865      	ldr	r5, [r4, #4]
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   20f16:	682b      	ldr	r3, [r5, #0]
   20f18:	b963      	cbnz	r3, 20f34 <sys_rand32_get+0x50>
   20f1a:	4913      	ldr	r1, [pc, #76]	; (20f68 <sys_rand32_get+0x84>)
   20f1c:	234c      	movs	r3, #76	; 0x4c
   20f1e:	4a13      	ldr	r2, [pc, #76]	; (20f6c <sys_rand32_get+0x88>)
   20f20:	480f      	ldr	r0, [pc, #60]	; (20f60 <sys_rand32_get+0x7c>)
   20f22:	f026 fcd2 	bl	478ca <printk>
   20f26:	4812      	ldr	r0, [pc, #72]	; (20f70 <sys_rand32_get+0x8c>)
   20f28:	f026 fccf 	bl	478ca <printk>
   20f2c:	214c      	movs	r1, #76	; 0x4c
   20f2e:	480f      	ldr	r0, [pc, #60]	; (20f6c <sys_rand32_get+0x88>)
   20f30:	f026 fcd8 	bl	478e4 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   20f34:	2204      	movs	r2, #4
   20f36:	682b      	ldr	r3, [r5, #0]
   20f38:	eb0d 0102 	add.w	r1, sp, r2
   20f3c:	4620      	mov	r0, r4
   20f3e:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   20f40:	2800      	cmp	r0, #0
   20f42:	da02      	bge.n	20f4a <sys_rand32_get+0x66>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   20f44:	f000 faa6 	bl	21494 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   20f48:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   20f4a:	9801      	ldr	r0, [sp, #4]
   20f4c:	b003      	add	sp, #12
   20f4e:	bd30      	pop	{r4, r5, pc}
   20f50:	20023bfc 	.word	0x20023bfc
   20f54:	0004dd72 	.word	0x0004dd72
   20f58:	0004dd7c 	.word	0x0004dd7c
   20f5c:	0004ddb6 	.word	0x0004ddb6
   20f60:	0004ccf0 	.word	0x0004ccf0
   20f64:	0004ddcb 	.word	0x0004ddcb
   20f68:	0004de51 	.word	0x0004de51
   20f6c:	0004de23 	.word	0x0004de23
   20f70:	0004de71 	.word	0x0004de71

00020f74 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   20f74:	2200      	movs	r2, #0
   20f76:	4b08      	ldr	r3, [pc, #32]	; (20f98 <get_flash_area_from_id+0x24>)
{
   20f78:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   20f7a:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   20f7c:	4b07      	ldr	r3, [pc, #28]	; (20f9c <get_flash_area_from_id+0x28>)
   20f7e:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   20f80:	4294      	cmp	r4, r2
   20f82:	dc02      	bgt.n	20f8a <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   20f84:	2300      	movs	r3, #0
}
   20f86:	4618      	mov	r0, r3
   20f88:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   20f8a:	460b      	mov	r3, r1
   20f8c:	781d      	ldrb	r5, [r3, #0]
   20f8e:	3110      	adds	r1, #16
   20f90:	4285      	cmp	r5, r0
   20f92:	d0f8      	beq.n	20f86 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   20f94:	3201      	adds	r2, #1
   20f96:	e7f3      	b.n	20f80 <get_flash_area_from_id+0xc>
   20f98:	0004ab28 	.word	0x0004ab28
   20f9c:	20031a68 	.word	0x20031a68

00020fa0 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   20fa0:	4b08      	ldr	r3, [pc, #32]	; (20fc4 <flash_area_open+0x24>)
{
   20fa2:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   20fa4:	681b      	ldr	r3, [r3, #0]
{
   20fa6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   20fa8:	b12b      	cbz	r3, 20fb6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   20faa:	f7ff ffe3 	bl	20f74 <get_flash_area_from_id>
	if (area == NULL) {
   20fae:	b128      	cbz	r0, 20fbc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   20fb0:	6020      	str	r0, [r4, #0]
	return 0;
   20fb2:	2000      	movs	r0, #0
}
   20fb4:	bd10      	pop	{r4, pc}
		return -EACCES;
   20fb6:	f06f 000c 	mvn.w	r0, #12
   20fba:	e7fb      	b.n	20fb4 <flash_area_open+0x14>
		return -ENOENT;
   20fbc:	f06f 0001 	mvn.w	r0, #1
   20fc0:	e7f8      	b.n	20fb4 <flash_area_open+0x14>
   20fc2:	bf00      	nop
   20fc4:	20031a68 	.word	0x20031a68

00020fc8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   20fc8:	b508      	push	{r3, lr}
   20fca:	4604      	mov	r4, r0
	__asm__ volatile(
   20fcc:	f04f 0220 	mov.w	r2, #32
   20fd0:	f3ef 8311 	mrs	r3, BASEPRI
   20fd4:	f382 8811 	msr	BASEPRI, r2
   20fd8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   20fdc:	f026 fe49 	bl	47c72 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   20fe0:	4620      	mov	r0, r4
   20fe2:	f001 f801 	bl	21fe8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   20fe6:	4803      	ldr	r0, [pc, #12]	; (20ff4 <sys_reboot+0x2c>)
   20fe8:	f026 fc6f 	bl	478ca <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   20fec:	f000 fb28 	bl	21640 <z_arch_cpu_idle>
   20ff0:	e7fc      	b.n	20fec <sys_reboot+0x24>
   20ff2:	bf00      	nop
   20ff4:	0004deb9 	.word	0x0004deb9

00020ff8 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   20ff8:	4b0a      	ldr	r3, [pc, #40]	; (21024 <console_out+0x2c>)
{
   20ffa:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   20ffc:	b2c5      	uxtb	r5, r0
{
   20ffe:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   21000:	681b      	ldr	r3, [r3, #0]
   21002:	4628      	mov	r0, r5
   21004:	4798      	blx	r3

	if (handled_by_debug_server) {
   21006:	2801      	cmp	r0, #1
   21008:	d00a      	beq.n	21020 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   2100a:	2c0a      	cmp	r4, #10
   2100c:	4e06      	ldr	r6, [pc, #24]	; (21028 <console_out+0x30>)
   2100e:	d103      	bne.n	21018 <console_out+0x20>
   21010:	6830      	ldr	r0, [r6, #0]
		z_arch_syscall_invoke2(*(u32_t *)&dev, *(u32_t *)&out_char, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
   21012:	210d      	movs	r1, #13
   21014:	f026 fdc0 	bl	47b98 <z_impl_uart_poll_out>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   21018:	6830      	ldr	r0, [r6, #0]
   2101a:	4629      	mov	r1, r5
   2101c:	f026 fdbc 	bl	47b98 <z_impl_uart_poll_out>

	return c;
}
   21020:	4620      	mov	r0, r4
   21022:	bd70      	pop	{r4, r5, r6, pc}
   21024:	20031a6c 	.word	0x20031a6c
   21028:	20023c00 	.word	0x20023c00

0002102c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   2102c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   2102e:	4c04      	ldr	r4, [pc, #16]	; (21040 <uart_console_hook_install+0x14>)
   21030:	4620      	mov	r0, r4
   21032:	f001 fa93 	bl	2255c <__stdout_hook_install>
	__printk_hook_install(console_out);
   21036:	4620      	mov	r0, r4
}
   21038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   2103c:	f7ff ba90 	b.w	20560 <__printk_hook_install>
   21040:	00020ff9 	.word	0x00020ff9

00021044 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   21044:	b508      	push	{r3, lr}
   21046:	4804      	ldr	r0, [pc, #16]	; (21058 <uart_console_init+0x14>)
   21048:	f01b fe4e 	bl	3cce8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   2104c:	4b03      	ldr	r3, [pc, #12]	; (2105c <uart_console_init+0x18>)
   2104e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   21050:	f7ff ffec 	bl	2102c <uart_console_hook_install>

	return 0;
}
   21054:	2000      	movs	r0, #0
   21056:	bd08      	pop	{r3, pc}
   21058:	0004db76 	.word	0x0004db76
   2105c:	20023c00 	.word	0x20023c00

00021060 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
   21060:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   21062:	2200      	movs	r2, #0
{
   21064:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   21066:	2101      	movs	r1, #1
   21068:	2005      	movs	r0, #5
   2106a:	f000 fb4f 	bl	2170c <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   2106e:	2005      	movs	r0, #5
   21070:	f000 fb3c 	bl	216ec <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   21074:	2202      	movs	r2, #2
   21076:	4b05      	ldr	r3, [pc, #20]	; (2108c <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   21078:	2000      	movs	r0, #0
   2107a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   2107e:	2203      	movs	r2, #3
   21080:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   21084:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   21086:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
   2108a:	bd10      	pop	{r4, pc}
   2108c:	40005000 	.word	0x40005000

00021090 <clock_async_start>:
{
   21090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   21092:	6803      	ldr	r3, [r0, #0]
{
   21094:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
   21096:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   21098:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   2109a:	4614      	mov	r4, r2
   2109c:	b15a      	cbz	r2, 210b6 <clock_async_start+0x26>
   2109e:	6853      	ldr	r3, [r2, #4]
   210a0:	b94b      	cbnz	r3, 210b6 <clock_async_start+0x26>
   210a2:	4927      	ldr	r1, [pc, #156]	; (21140 <clock_async_start+0xb0>)
   210a4:	4827      	ldr	r0, [pc, #156]	; (21144 <clock_async_start+0xb4>)
   210a6:	2392      	movs	r3, #146	; 0x92
   210a8:	4a27      	ldr	r2, [pc, #156]	; (21148 <clock_async_start+0xb8>)
   210aa:	f026 fc0e 	bl	478ca <printk>
   210ae:	2192      	movs	r1, #146	; 0x92
   210b0:	4825      	ldr	r0, [pc, #148]	; (21148 <clock_async_start+0xb8>)
   210b2:	f026 fc17 	bl	478e4 <assert_post_action>
   210b6:	f04f 0320 	mov.w	r3, #32
   210ba:	f3ef 8211 	mrs	r2, BASEPRI
   210be:	f383 8811 	msr	BASEPRI, r3
   210c2:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   210c6:	7a2b      	ldrb	r3, [r5, #8]
   210c8:	3301      	adds	r3, #1
   210ca:	b25b      	sxtb	r3, r3
   210cc:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   210ce:	f382 8811 	msr	BASEPRI, r2
   210d2:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   210d6:	7a6a      	ldrb	r2, [r5, #9]
   210d8:	b13a      	cbz	r2, 210ea <clock_async_start+0x5a>
		if (data) {
   210da:	b90c      	cbnz	r4, 210e0 <clock_async_start+0x50>
	return 0;
   210dc:	2000      	movs	r0, #0
}
   210de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   210e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   210e4:	4630      	mov	r0, r6
   210e6:	4798      	blx	r3
   210e8:	e7f8      	b.n	210dc <clock_async_start+0x4c>
		if (ref == 1) {
   210ea:	2b01      	cmp	r3, #1
   210ec:	d108      	bne.n	21100 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
   210ee:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   210f0:	b943      	cbnz	r3, 21104 <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   210f2:	2201      	movs	r2, #1
   210f4:	7abb      	ldrb	r3, [r7, #10]
   210f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   210fa:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   210fe:	601a      	str	r2, [r3, #0]
		if (data) {
   21100:	b954      	cbnz	r4, 21118 <clock_async_start+0x88>
   21102:	e7eb      	b.n	210dc <clock_async_start+0x4c>
					config->start_handler(dev) : true;
   21104:	4630      	mov	r0, r6
   21106:	4798      	blx	r3
   21108:	2800      	cmp	r0, #0
   2110a:	d1f2      	bne.n	210f2 <clock_async_start+0x62>
			} else if (data) {
   2110c:	2c00      	cmp	r4, #0
   2110e:	d0e5      	beq.n	210dc <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
   21110:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   21114:	4630      	mov	r0, r6
   21116:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   21118:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   2111a:	429c      	cmp	r4, r3
   2111c:	d00d      	beq.n	2113a <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   2111e:	b113      	cbz	r3, 21126 <clock_async_start+0x96>
	return node->next;
   21120:	681b      	ldr	r3, [r3, #0]
	} while (item);
   21122:	2b00      	cmp	r3, #0
   21124:	d1f9      	bne.n	2111a <clock_async_start+0x8a>
	parent->next = child;
   21126:	2000      	movs	r0, #0
   21128:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2112a:	686b      	ldr	r3, [r5, #4]
   2112c:	b913      	cbnz	r3, 21134 <clock_async_start+0xa4>
	list->head = node;
   2112e:	e9c5 4400 	strd	r4, r4, [r5]
   21132:	e7d3      	b.n	210dc <clock_async_start+0x4c>
	parent->next = child;
   21134:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21136:	606c      	str	r4, [r5, #4]
   21138:	e7d1      	b.n	210de <clock_async_start+0x4e>
				return -EALREADY;
   2113a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2113e:	e7ce      	b.n	210de <clock_async_start+0x4e>
   21140:	0004df1e 	.word	0x0004df1e
   21144:	0004ccf0 	.word	0x0004ccf0
   21148:	0004dee2 	.word	0x0004dee2

0002114c <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   2114c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   2114e:	4b10      	ldr	r3, [pc, #64]	; (21190 <nrf_power_clock_isr+0x44>)
   21150:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   21152:	b162      	cbz	r2, 2116e <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   21154:	4a0f      	ldr	r2, [pc, #60]	; (21194 <nrf_power_clock_isr+0x48>)
   21156:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   2115a:	07d1      	lsls	r1, r2, #31
   2115c:	d507      	bpl.n	2116e <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   2115e:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
   21160:	480d      	ldr	r0, [pc, #52]	; (21198 <nrf_power_clock_isr+0x4c>)
   21162:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   21164:	6883      	ldr	r3, [r0, #8]
   21166:	7a5b      	ldrb	r3, [r3, #9]
   21168:	b90b      	cbnz	r3, 2116e <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
   2116a:	f026 fd64 	bl	47c36 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   2116e:	4b0b      	ldr	r3, [pc, #44]	; (2119c <nrf_power_clock_isr+0x50>)
   21170:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   21172:	b15a      	cbz	r2, 2118c <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   21174:	4a07      	ldr	r2, [pc, #28]	; (21194 <nrf_power_clock_isr+0x48>)
   21176:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   2117a:	0792      	lsls	r2, r2, #30
   2117c:	d506      	bpl.n	2118c <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   2117e:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
   21180:	4807      	ldr	r0, [pc, #28]	; (211a0 <nrf_power_clock_isr+0x54>)
   21182:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   21184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
   21188:	f026 bd55 	b.w	47c36 <clkstarted_handle>
}
   2118c:	bd08      	pop	{r3, pc}
   2118e:	bf00      	nop
   21190:	40005100 	.word	0x40005100
   21194:	40005000 	.word	0x40005000
   21198:	20032350 	.word	0x20032350
   2119c:	40005104 	.word	0x40005104
   211a0:	2003235c 	.word	0x2003235c

000211a4 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   211a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   211a6:	4c06      	ldr	r4, [pc, #24]	; (211c0 <z_clock_isr+0x1c>)
   211a8:	4906      	ldr	r1, [pc, #24]	; (211c4 <z_clock_isr+0x20>)
   211aa:	4622      	mov	r2, r4
   211ac:	4806      	ldr	r0, [pc, #24]	; (211c8 <z_clock_isr+0x24>)
   211ae:	2317      	movs	r3, #23
   211b0:	f026 fb8b 	bl	478ca <printk>
   211b4:	4620      	mov	r0, r4
}
   211b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   211ba:	2117      	movs	r1, #23
   211bc:	f026 bb92 	b.w	478e4 <assert_post_action>
   211c0:	0004df98 	.word	0x0004df98
   211c4:	00052aa7 	.word	0x00052aa7
   211c8:	0004ccf0 	.word	0x0004ccf0

000211cc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   211cc:	2200      	movs	r2, #0
{
   211ce:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   211d0:	4b21      	ldr	r3, [pc, #132]	; (21258 <rtc1_nrf_isr+0x8c>)
   211d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   211d6:	f04f 0320 	mov.w	r3, #32
   211da:	f3ef 8511 	mrs	r5, BASEPRI
   211de:	f383 8811 	msr	BASEPRI, r3
   211e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   211e6:	481d      	ldr	r0, [pc, #116]	; (2125c <rtc1_nrf_isr+0x90>)
   211e8:	f01d ff40 	bl	3f06c <z_spin_lock_valid>
   211ec:	b960      	cbnz	r0, 21208 <rtc1_nrf_isr+0x3c>
   211ee:	491c      	ldr	r1, [pc, #112]	; (21260 <rtc1_nrf_isr+0x94>)
   211f0:	235f      	movs	r3, #95	; 0x5f
   211f2:	4a1c      	ldr	r2, [pc, #112]	; (21264 <rtc1_nrf_isr+0x98>)
   211f4:	481c      	ldr	r0, [pc, #112]	; (21268 <rtc1_nrf_isr+0x9c>)
   211f6:	f026 fb68 	bl	478ca <printk>
   211fa:	481c      	ldr	r0, [pc, #112]	; (2126c <rtc1_nrf_isr+0xa0>)
   211fc:	f026 fb65 	bl	478ca <printk>
   21200:	215f      	movs	r1, #95	; 0x5f
   21202:	4818      	ldr	r0, [pc, #96]	; (21264 <rtc1_nrf_isr+0x98>)
   21204:	f026 fb6e 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   21208:	4814      	ldr	r0, [pc, #80]	; (2125c <rtc1_nrf_isr+0x90>)
   2120a:	f01d ff4d 	bl	3f0a8 <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   2120e:	4b12      	ldr	r3, [pc, #72]	; (21258 <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   21210:	4a17      	ldr	r2, [pc, #92]	; (21270 <rtc1_nrf_isr+0xa4>)
   21212:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   21216:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21218:	4810      	ldr	r0, [pc, #64]	; (2125c <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
   2121a:	1ae4      	subs	r4, r4, r3
   2121c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   21220:	4423      	add	r3, r4
   21222:	6013      	str	r3, [r2, #0]
   21224:	f01d ff30 	bl	3f088 <z_spin_unlock_valid>
   21228:	b960      	cbnz	r0, 21244 <rtc1_nrf_isr+0x78>
   2122a:	4912      	ldr	r1, [pc, #72]	; (21274 <rtc1_nrf_isr+0xa8>)
   2122c:	2372      	movs	r3, #114	; 0x72
   2122e:	4a0d      	ldr	r2, [pc, #52]	; (21264 <rtc1_nrf_isr+0x98>)
   21230:	480d      	ldr	r0, [pc, #52]	; (21268 <rtc1_nrf_isr+0x9c>)
   21232:	f026 fb4a 	bl	478ca <printk>
   21236:	4810      	ldr	r0, [pc, #64]	; (21278 <rtc1_nrf_isr+0xac>)
   21238:	f026 fb47 	bl	478ca <printk>
   2123c:	2172      	movs	r1, #114	; 0x72
   2123e:	4809      	ldr	r0, [pc, #36]	; (21264 <rtc1_nrf_isr+0x98>)
   21240:	f026 fb50 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   21244:	f385 8811 	msr	BASEPRI, r5
   21248:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   2124c:	4620      	mov	r0, r4
}
   2124e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   21252:	f01e bc03 	b.w	3fa5c <z_clock_announce>
   21256:	bf00      	nop
   21258:	40015000 	.word	0x40015000
   2125c:	20023c20 	.word	0x20023c20
   21260:	0004d875 	.word	0x0004d875
   21264:	0004d84e 	.word	0x0004d84e
   21268:	0004ccf0 	.word	0x0004ccf0
   2126c:	0004d88a 	.word	0x0004d88a
   21270:	20023c1c 	.word	0x20023c1c
   21274:	0004d89f 	.word	0x0004d89f
   21278:	0004d8b6 	.word	0x0004d8b6

0002127c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   2127c:	b570      	push	{r4, r5, r6, lr}
   2127e:	4818      	ldr	r0, [pc, #96]	; (212e0 <z_clock_driver_init+0x64>)
   21280:	f01b fd32 	bl	3cce8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
   21284:	b348      	cbz	r0, 212da <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   21286:	6843      	ldr	r3, [r0, #4]
   21288:	2100      	movs	r1, #0
   2128a:	681b      	ldr	r3, [r3, #0]
   2128c:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
   2128e:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   21290:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   21292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21296:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   2129a:	4d12      	ldr	r5, [pc, #72]	; (212e4 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   2129c:	4631      	mov	r1, r6
   2129e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   212a2:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   212a6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   212aa:	4b0f      	ldr	r3, [pc, #60]	; (212e8 <z_clock_driver_init+0x6c>)
   212ac:	2015      	movs	r0, #21
   212ae:	601c      	str	r4, [r3, #0]
   212b0:	4b0e      	ldr	r3, [pc, #56]	; (212ec <z_clock_driver_init+0x70>)
   212b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   212b6:	4622      	mov	r2, r4
   212b8:	f000 fa28 	bl	2170c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   212bc:	2015      	movs	r0, #21
   212be:	f000 fa15 	bl	216ec <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   212c2:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   212c4:	4b0a      	ldr	r3, [pc, #40]	; (212f0 <z_clock_driver_init+0x74>)
   212c6:	601e      	str	r6, [r3, #0]
   212c8:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
   212ca:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   212ce:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   212d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   212d4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   212d8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   212da:	f04f 30ff 	mov.w	r0, #4294967295
   212de:	e7fb      	b.n	212d8 <z_clock_driver_init+0x5c>
   212e0:	0004df6c 	.word	0x0004df6c
   212e4:	40015000 	.word	0x40015000
   212e8:	40015140 	.word	0x40015140
   212ec:	e000e100 	.word	0xe000e100
   212f0:	40015008 	.word	0x40015008

000212f4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   212f4:	b538      	push	{r3, r4, r5, lr}
   212f6:	4b34      	ldr	r3, [pc, #208]	; (213c8 <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   212f8:	f1b0 3fff 	cmp.w	r0, #4294967295
   212fc:	bf08      	it	eq
   212fe:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   21300:	1e44      	subs	r4, r0, #1
   21302:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   21306:	429c      	cmp	r4, r3
   21308:	bfa8      	it	ge
   2130a:	461c      	movge	r4, r3
	__asm__ volatile(
   2130c:	f04f 0320 	mov.w	r3, #32
   21310:	f3ef 8511 	mrs	r5, BASEPRI
   21314:	f383 8811 	msr	BASEPRI, r3
   21318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2131c:	482b      	ldr	r0, [pc, #172]	; (213cc <z_clock_set_timeout+0xd8>)
   2131e:	f01d fea5 	bl	3f06c <z_spin_lock_valid>
   21322:	b960      	cbnz	r0, 2133e <z_clock_set_timeout+0x4a>
   21324:	492a      	ldr	r1, [pc, #168]	; (213d0 <z_clock_set_timeout+0xdc>)
   21326:	235f      	movs	r3, #95	; 0x5f
   21328:	4a2a      	ldr	r2, [pc, #168]	; (213d4 <z_clock_set_timeout+0xe0>)
   2132a:	482b      	ldr	r0, [pc, #172]	; (213d8 <z_clock_set_timeout+0xe4>)
   2132c:	f026 facd 	bl	478ca <printk>
   21330:	482a      	ldr	r0, [pc, #168]	; (213dc <z_clock_set_timeout+0xe8>)
   21332:	f026 faca 	bl	478ca <printk>
   21336:	215f      	movs	r1, #95	; 0x5f
   21338:	4826      	ldr	r0, [pc, #152]	; (213d4 <z_clock_set_timeout+0xe0>)
   2133a:	f026 fad3 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2133e:	4823      	ldr	r0, [pc, #140]	; (213cc <z_clock_set_timeout+0xd8>)
   21340:	f01d feb2 	bl	3f0a8 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   21344:	4a26      	ldr	r2, [pc, #152]	; (213e0 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
   21346:	4927      	ldr	r1, [pc, #156]	; (213e4 <z_clock_set_timeout+0xf0>)
   21348:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   2134c:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
   2134e:	1a58      	subs	r0, r3, r1
   21350:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
   21354:	3101      	adds	r1, #1
   21356:	4408      	add	r0, r1
   21358:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
   2135a:	1ac3      	subs	r3, r0, r3
   2135c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21360:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   21364:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
   21366:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   2136a:	d915      	bls.n	21398 <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2136c:	4817      	ldr	r0, [pc, #92]	; (213cc <z_clock_set_timeout+0xd8>)
   2136e:	f01d fe8b 	bl	3f088 <z_spin_unlock_valid>
   21372:	b960      	cbnz	r0, 2138e <z_clock_set_timeout+0x9a>
   21374:	491c      	ldr	r1, [pc, #112]	; (213e8 <z_clock_set_timeout+0xf4>)
   21376:	2372      	movs	r3, #114	; 0x72
   21378:	4a16      	ldr	r2, [pc, #88]	; (213d4 <z_clock_set_timeout+0xe0>)
   2137a:	4817      	ldr	r0, [pc, #92]	; (213d8 <z_clock_set_timeout+0xe4>)
   2137c:	f026 faa5 	bl	478ca <printk>
   21380:	481a      	ldr	r0, [pc, #104]	; (213ec <z_clock_set_timeout+0xf8>)
   21382:	f026 faa2 	bl	478ca <printk>
   21386:	2172      	movs	r1, #114	; 0x72
   21388:	4812      	ldr	r0, [pc, #72]	; (213d4 <z_clock_set_timeout+0xe0>)
   2138a:	f026 faab 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   2138e:	f385 8811 	msr	BASEPRI, r5
   21392:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   21396:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
   21398:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   2139c:	4914      	ldr	r1, [pc, #80]	; (213f0 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
   2139e:	1ac3      	subs	r3, r0, r3
   213a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   213a4:	1e5c      	subs	r4, r3, #1
   213a6:	428c      	cmp	r4, r1
   213a8:	d905      	bls.n	213b6 <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   213aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   213ae:	4b11      	ldr	r3, [pc, #68]	; (213f4 <z_clock_set_timeout+0x100>)
   213b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   213b4:	e7da      	b.n	2136c <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
   213b6:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   213b8:	bf02      	ittt	eq
   213ba:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   213bc:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   213c0:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   213c4:	e7d2      	b.n	2136c <z_clock_set_timeout+0x78>
   213c6:	bf00      	nop
   213c8:	00fffffe 	.word	0x00fffffe
   213cc:	20023c20 	.word	0x20023c20
   213d0:	0004d875 	.word	0x0004d875
   213d4:	0004d84e 	.word	0x0004d84e
   213d8:	0004ccf0 	.word	0x0004ccf0
   213dc:	0004d88a 	.word	0x0004d88a
   213e0:	40015000 	.word	0x40015000
   213e4:	20023c1c 	.word	0x20023c1c
   213e8:	0004d89f 	.word	0x0004d89f
   213ec:	0004d8b6 	.word	0x0004d8b6
   213f0:	007ffffe 	.word	0x007ffffe
   213f4:	e000e100 	.word	0xe000e100

000213f8 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   213f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   213fa:	f04f 0320 	mov.w	r3, #32
   213fe:	f3ef 8511 	mrs	r5, BASEPRI
   21402:	f383 8811 	msr	BASEPRI, r3
   21406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2140a:	4819      	ldr	r0, [pc, #100]	; (21470 <z_clock_elapsed+0x78>)
   2140c:	f01d fe2e 	bl	3f06c <z_spin_lock_valid>
   21410:	b960      	cbnz	r0, 2142c <z_clock_elapsed+0x34>
   21412:	4918      	ldr	r1, [pc, #96]	; (21474 <z_clock_elapsed+0x7c>)
   21414:	235f      	movs	r3, #95	; 0x5f
   21416:	4a18      	ldr	r2, [pc, #96]	; (21478 <z_clock_elapsed+0x80>)
   21418:	4818      	ldr	r0, [pc, #96]	; (2147c <z_clock_elapsed+0x84>)
   2141a:	f026 fa56 	bl	478ca <printk>
   2141e:	4818      	ldr	r0, [pc, #96]	; (21480 <z_clock_elapsed+0x88>)
   21420:	f026 fa53 	bl	478ca <printk>
   21424:	215f      	movs	r1, #95	; 0x5f
   21426:	4814      	ldr	r0, [pc, #80]	; (21478 <z_clock_elapsed+0x80>)
   21428:	f026 fa5c 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2142c:	4810      	ldr	r0, [pc, #64]	; (21470 <z_clock_elapsed+0x78>)
   2142e:	f01d fe3b 	bl	3f0a8 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   21432:	4b14      	ldr	r3, [pc, #80]	; (21484 <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21434:	480e      	ldr	r0, [pc, #56]	; (21470 <z_clock_elapsed+0x78>)
   21436:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   2143a:	4b13      	ldr	r3, [pc, #76]	; (21488 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   2143c:	681b      	ldr	r3, [r3, #0]
   2143e:	1ae4      	subs	r4, r4, r3
   21440:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   21444:	f01d fe20 	bl	3f088 <z_spin_unlock_valid>
   21448:	b960      	cbnz	r0, 21464 <z_clock_elapsed+0x6c>
   2144a:	4910      	ldr	r1, [pc, #64]	; (2148c <z_clock_elapsed+0x94>)
   2144c:	2372      	movs	r3, #114	; 0x72
   2144e:	4a0a      	ldr	r2, [pc, #40]	; (21478 <z_clock_elapsed+0x80>)
   21450:	480a      	ldr	r0, [pc, #40]	; (2147c <z_clock_elapsed+0x84>)
   21452:	f026 fa3a 	bl	478ca <printk>
   21456:	480e      	ldr	r0, [pc, #56]	; (21490 <z_clock_elapsed+0x98>)
   21458:	f026 fa37 	bl	478ca <printk>
   2145c:	2172      	movs	r1, #114	; 0x72
   2145e:	4806      	ldr	r0, [pc, #24]	; (21478 <z_clock_elapsed+0x80>)
   21460:	f026 fa40 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   21464:	f385 8811 	msr	BASEPRI, r5
   21468:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2146c:	4620      	mov	r0, r4
   2146e:	bd38      	pop	{r3, r4, r5, pc}
   21470:	20023c20 	.word	0x20023c20
   21474:	0004d875 	.word	0x0004d875
   21478:	0004d84e 	.word	0x0004d84e
   2147c:	0004ccf0 	.word	0x0004ccf0
   21480:	0004d88a 	.word	0x0004d88a
   21484:	40015000 	.word	0x40015000
   21488:	20023c1c 	.word	0x20023c1c
   2148c:	0004d89f 	.word	0x0004d89f
   21490:	0004d8b6 	.word	0x0004d8b6

00021494 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   21494:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21496:	f04f 0320 	mov.w	r3, #32
   2149a:	f3ef 8511 	mrs	r5, BASEPRI
   2149e:	f383 8811 	msr	BASEPRI, r3
   214a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   214a6:	481a      	ldr	r0, [pc, #104]	; (21510 <z_timer_cycle_get_32+0x7c>)
   214a8:	f01d fde0 	bl	3f06c <z_spin_lock_valid>
   214ac:	b960      	cbnz	r0, 214c8 <z_timer_cycle_get_32+0x34>
   214ae:	4919      	ldr	r1, [pc, #100]	; (21514 <z_timer_cycle_get_32+0x80>)
   214b0:	235f      	movs	r3, #95	; 0x5f
   214b2:	4a19      	ldr	r2, [pc, #100]	; (21518 <z_timer_cycle_get_32+0x84>)
   214b4:	4819      	ldr	r0, [pc, #100]	; (2151c <z_timer_cycle_get_32+0x88>)
   214b6:	f026 fa08 	bl	478ca <printk>
   214ba:	4819      	ldr	r0, [pc, #100]	; (21520 <z_timer_cycle_get_32+0x8c>)
   214bc:	f026 fa05 	bl	478ca <printk>
   214c0:	215f      	movs	r1, #95	; 0x5f
   214c2:	4815      	ldr	r0, [pc, #84]	; (21518 <z_timer_cycle_get_32+0x84>)
   214c4:	f026 fa0e 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   214c8:	4811      	ldr	r0, [pc, #68]	; (21510 <z_timer_cycle_get_32+0x7c>)
   214ca:	f01d fded 	bl	3f0a8 <z_spin_lock_set_owner>
   214ce:	4b15      	ldr	r3, [pc, #84]	; (21524 <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   214d0:	480f      	ldr	r0, [pc, #60]	; (21510 <z_timer_cycle_get_32+0x7c>)
   214d2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   214d6:	4b14      	ldr	r3, [pc, #80]	; (21528 <z_timer_cycle_get_32+0x94>)
   214d8:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   214da:	1ae4      	subs	r4, r4, r3
   214dc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   214e0:	441c      	add	r4, r3
   214e2:	f01d fdd1 	bl	3f088 <z_spin_unlock_valid>
   214e6:	b960      	cbnz	r0, 21502 <z_timer_cycle_get_32+0x6e>
   214e8:	4910      	ldr	r1, [pc, #64]	; (2152c <z_timer_cycle_get_32+0x98>)
   214ea:	2372      	movs	r3, #114	; 0x72
   214ec:	4a0a      	ldr	r2, [pc, #40]	; (21518 <z_timer_cycle_get_32+0x84>)
   214ee:	480b      	ldr	r0, [pc, #44]	; (2151c <z_timer_cycle_get_32+0x88>)
   214f0:	f026 f9eb 	bl	478ca <printk>
   214f4:	480e      	ldr	r0, [pc, #56]	; (21530 <z_timer_cycle_get_32+0x9c>)
   214f6:	f026 f9e8 	bl	478ca <printk>
   214fa:	2172      	movs	r1, #114	; 0x72
   214fc:	4806      	ldr	r0, [pc, #24]	; (21518 <z_timer_cycle_get_32+0x84>)
   214fe:	f026 f9f1 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   21502:	f385 8811 	msr	BASEPRI, r5
   21506:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2150a:	4620      	mov	r0, r4
   2150c:	bd38      	pop	{r3, r4, r5, pc}
   2150e:	bf00      	nop
   21510:	20023c20 	.word	0x20023c20
   21514:	0004d875 	.word	0x0004d875
   21518:	0004d84e 	.word	0x0004d84e
   2151c:	0004ccf0 	.word	0x0004ccf0
   21520:	0004d88a 	.word	0x0004d88a
   21524:	40015000 	.word	0x40015000
   21528:	20023c1c 	.word	0x20023c1c
   2152c:	0004d89f 	.word	0x0004d89f
   21530:	0004d8b6 	.word	0x0004d8b6

00021534 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   21534:	4804      	ldr	r0, [pc, #16]	; (21548 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   21536:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   21538:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   2153a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   2153c:	d003      	beq.n	21546 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   2153e:	4903      	ldr	r1, [pc, #12]	; (2154c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   21540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   21544:	600a      	str	r2, [r1, #0]

00021546 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   21546:	4770      	bx	lr
    ldr r0, =_kernel
   21548:	2002a578 	.word	0x2002a578
    ldr r1, =_SCS_ICSR
   2154c:	e000ed04 	.word	0xe000ed04

00021550 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   21550:	492e      	ldr	r1, [pc, #184]	; (2160c <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   21552:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   21554:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   21558:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2155a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2155e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   21562:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   21566:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   2156a:	d004      	beq.n	21576 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   2156c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   21570:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   21574:	e007      	b.n	21586 <out_fp_endif>

00021576 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   21576:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   2157a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   2157e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   21582:	f050 0004 	orrs.w	r0, r0, #4

00021586 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   21586:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2158a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2158c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   21590:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   21594:	4f1e      	ldr	r7, [pc, #120]	; (21610 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   21596:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2159a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   2159c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2159e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   215a0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   215a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   215a4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   215a6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   215aa:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   215ae:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   215b2:	d105      	bne.n	215c0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   215b4:	2300      	movs	r3, #0
    vmsr fpscr, r3
   215b6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   215ba:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   215be:	e005      	b.n	215cc <in_fp_endif>

000215c0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   215c0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   215c4:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   215c8:	ec90 8a10 	vldmia	r0, {s16-s31}

000215cc <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   215cc:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   215d0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   215d4:	f383 8814 	msr	CONTROL, r3
    isb
   215d8:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   215dc:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   215de:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   215e0:	f026 fb5a 	bl	47c98 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   215e4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   215e8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   215ec:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   215f0:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   215f4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   215f8:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   215fc:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   21600:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   21602:	f026 fb3a 	bl	47c7a <configure_builtin_stack_guard>
    pop {r2, lr}
   21606:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   2160a:	4770      	bx	lr
    ldr r1, =_kernel
   2160c:	2002a578 	.word	0x2002a578
    ldr v4, =_SCS_ICSR
   21610:	e000ed04 	.word	0xe000ed04

00021614 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
   21614:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   21618:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2161a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2161e:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   21622:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
   21624:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   21628:	2902      	cmp	r1, #2
    beq _oops
   2162a:	d0ff      	beq.n	2162c <_oops>

0002162c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2162c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2162e:	f026 fb28 	bl	47c82 <z_do_kernel_oops>
    pop {r0, pc}
   21632:	bd01      	pop	{r0, pc}

00021634 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   21634:	4901      	ldr	r1, [pc, #4]	; (2163c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   21636:	2210      	movs	r2, #16
	str r2, [r1]
   21638:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   2163a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   2163c:	e000ed10 	.word	0xe000ed10

00021640 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   21640:	4040      	eors	r0, r0
	msr BASEPRI, r0
   21642:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   21646:	bf30      	wfi

	bx lr
   21648:	4770      	bx	lr
   2164a:	bf00      	nop

0002164c <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   2164c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   2164e:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   21652:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   21656:	4671      	mov	r1, lr
	tst r1, r0
   21658:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   2165a:	d002      	beq.n	21662 <_s_stack_frame_msp>
	mrs r0, PSP
   2165c:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   21660:	d101      	bne.n	21666 <_s_stack_frame_endif>

00021662 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   21662:	f3ef 8008 	mrs	r0, MSP

00021666 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   21666:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   21668:	b501      	push	{r0, lr}
	bl z_arm_fault
   2166a:	f000 fbdf 	bl	21e2c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   2166e:	bd01      	pop	{r0, pc}

00021670 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   21670:	bf30      	wfi
    b z_SysNmiOnReset
   21672:	f7ff bffd 	b.w	21670 <z_SysNmiOnReset>
   21676:	bf00      	nop

00021678 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   21678:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   2167a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2167c:	4a0b      	ldr	r2, [pc, #44]	; (216ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2167e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   21680:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   21682:	bf1e      	ittt	ne
	movne	r1, #0
   21684:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   21686:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   21688:	f028 fc96 	blne	49fb8 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2168c:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2168e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   21692:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   21696:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   2169a:	4905      	ldr	r1, [pc, #20]	; (216b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2169c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2169e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   216a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   216a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   216a6:	4903      	ldr	r1, [pc, #12]	; (216b4 <_isr_wrapper+0x3c>)
	bx r1
   216a8:	4708      	bx	r1
   216aa:	0000      	.short	0x0000
	ldr r2, =_kernel
   216ac:	2002a578 	.word	0x2002a578
	ldr r1, =_sw_isr_table
   216b0:	0004a318 	.word	0x0004a318
	ldr r1, =z_arm_int_exit
   216b4:	00021535 	.word	0x00021535

000216b8 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   216b8:	4a09      	ldr	r2, [pc, #36]	; (216e0 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   216ba:	490a      	ldr	r1, [pc, #40]	; (216e4 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
   216bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   216be:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   216c0:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   216c2:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   216c4:	4908      	ldr	r1, [pc, #32]	; (216e8 <z_arch_swap+0x30>)
   216c6:	684b      	ldr	r3, [r1, #4]
   216c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   216cc:	604b      	str	r3, [r1, #4]
   216ce:	2300      	movs	r3, #0
   216d0:	f383 8811 	msr	BASEPRI, r3
   216d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   216d8:	6893      	ldr	r3, [r2, #8]
}
   216da:	6e98      	ldr	r0, [r3, #104]	; 0x68
   216dc:	4770      	bx	lr
   216de:	bf00      	nop
   216e0:	2002a578 	.word	0x2002a578
   216e4:	0004c46c 	.word	0x0004c46c
   216e8:	e000ed00 	.word	0xe000ed00

000216ec <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   216ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   216ee:	2b00      	cmp	r3, #0
   216f0:	db08      	blt.n	21704 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   216f2:	2201      	movs	r2, #1
   216f4:	f000 001f 	and.w	r0, r0, #31
   216f8:	fa02 f000 	lsl.w	r0, r2, r0
   216fc:	4a02      	ldr	r2, [pc, #8]	; (21708 <z_arch_irq_enable+0x1c>)
   216fe:	095b      	lsrs	r3, r3, #5
   21700:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   21704:	4770      	bx	lr
   21706:	bf00      	nop
   21708:	e000e100 	.word	0xe000e100

0002170c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   2170c:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   2170e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   21710:	2c07      	cmp	r4, #7
{
   21712:	4605      	mov	r5, r0
   21714:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   21716:	d90e      	bls.n	21736 <z_arm_irq_priority_set+0x2a>
   21718:	2360      	movs	r3, #96	; 0x60
   2171a:	4a10      	ldr	r2, [pc, #64]	; (2175c <z_arm_irq_priority_set+0x50>)
   2171c:	4910      	ldr	r1, [pc, #64]	; (21760 <z_arm_irq_priority_set+0x54>)
   2171e:	4811      	ldr	r0, [pc, #68]	; (21764 <z_arm_irq_priority_set+0x58>)
   21720:	f026 f8d3 	bl	478ca <printk>
   21724:	4631      	mov	r1, r6
   21726:	4810      	ldr	r0, [pc, #64]	; (21768 <z_arm_irq_priority_set+0x5c>)
   21728:	2207      	movs	r2, #7
   2172a:	f026 f8ce 	bl	478ca <printk>
   2172e:	2160      	movs	r1, #96	; 0x60
   21730:	480a      	ldr	r0, [pc, #40]	; (2175c <z_arm_irq_priority_set+0x50>)
   21732:	f026 f8d7 	bl	478e4 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   21736:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   21738:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2173a:	bfa8      	it	ge
   2173c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   21740:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21744:	bfb8      	it	lt
   21746:	4b09      	ldrlt	r3, [pc, #36]	; (2176c <z_arm_irq_priority_set+0x60>)
   21748:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2174a:	bfab      	itete	ge
   2174c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21750:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21754:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21758:	555c      	strblt	r4, [r3, r5]
}
   2175a:	bd70      	pop	{r4, r5, r6, pc}
   2175c:	0004dfcb 	.word	0x0004dfcb
   21760:	0004dffa 	.word	0x0004dffa
   21764:	0004ccf0 	.word	0x0004ccf0
   21768:	0004e015 	.word	0x0004e015
   2176c:	e000ed14 	.word	0xe000ed14

00021770 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   21770:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   21772:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   21774:	4b04      	ldr	r3, [pc, #16]	; (21788 <_arch_isr_direct_pm+0x18>)
   21776:	6a18      	ldr	r0, [r3, #32]
   21778:	b118      	cbz	r0, 21782 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   2177a:	2200      	movs	r2, #0
   2177c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   2177e:	f028 fc1b 	bl	49fb8 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   21782:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   21784:	bd08      	pop	{r3, pc}
   21786:	bf00      	nop
   21788:	2002a578 	.word	0x2002a578

0002178c <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
   2178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21790:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   21792:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   21794:	2e0f      	cmp	r6, #15
{
   21796:	4689      	mov	r9, r1
   21798:	4690      	mov	r8, r2
   2179a:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   2179c:	d102      	bne.n	217a4 <z_arch_new_thread+0x18>
   2179e:	4b1e      	ldr	r3, [pc, #120]	; (21818 <z_arch_new_thread+0x8c>)
   217a0:	429f      	cmp	r7, r3
   217a2:	d014      	beq.n	217ce <z_arch_new_thread+0x42>
   217a4:	f106 0310 	add.w	r3, r6, #16
   217a8:	2b1e      	cmp	r3, #30
   217aa:	d910      	bls.n	217ce <z_arch_new_thread+0x42>
   217ac:	232e      	movs	r3, #46	; 0x2e
   217ae:	4a1b      	ldr	r2, [pc, #108]	; (2181c <z_arch_new_thread+0x90>)
   217b0:	491b      	ldr	r1, [pc, #108]	; (21820 <z_arch_new_thread+0x94>)
   217b2:	481c      	ldr	r0, [pc, #112]	; (21824 <z_arch_new_thread+0x98>)
   217b4:	f026 f889 	bl	478ca <printk>
   217b8:	4631      	mov	r1, r6
   217ba:	481b      	ldr	r0, [pc, #108]	; (21828 <z_arch_new_thread+0x9c>)
   217bc:	f06f 030f 	mvn.w	r3, #15
   217c0:	220e      	movs	r2, #14
   217c2:	f026 f882 	bl	478ca <printk>
   217c6:	212e      	movs	r1, #46	; 0x2e
   217c8:	4814      	ldr	r0, [pc, #80]	; (2181c <z_arch_new_thread+0x90>)
   217ca:	f026 f88b 	bl	478e4 <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   217ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   217d0:	2204      	movs	r2, #4
   217d2:	4631      	mov	r1, r6
   217d4:	4628      	mov	r0, r5
   217d6:	f028 fcea 	bl	4a1ae <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   217da:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   217dc:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   217e0:	4912      	ldr	r1, [pc, #72]	; (2182c <z_arch_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   217e2:	f1a4 0320 	sub.w	r3, r4, #32
   217e6:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   217ea:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   217ee:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   217f2:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   217f6:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   217f8:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   217fa:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   217fc:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   217fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   21800:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   21802:	990a      	ldr	r1, [sp, #40]	; 0x28
   21804:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   21806:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   2180a:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   2180c:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   2180e:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   21810:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   21814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21818:	0003ce41 	.word	0x0003ce41
   2181c:	0004e04a 	.word	0x0004e04a
   21820:	0004e075 	.word	0x0004e075
   21824:	0004ccf0 	.word	0x0004ccf0
   21828:	0004e102 	.word	0x0004e102
   2182c:	00047371 	.word	0x00047371

00021830 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
   21830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21832:	461f      	mov	r7, r3
   21834:	4606      	mov	r6, r0
   21836:	460d      	mov	r5, r1
   21838:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   2183a:	2300      	movs	r3, #0
   2183c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21840:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21844:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21848:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   2184c:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21850:	f000 fc26 	bl	220a0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   21854:	4b0c      	ldr	r3, [pc, #48]	; (21888 <z_arch_switch_to_main_thread+0x58>)
	start_of_main_stack =
   21856:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   21858:	4630      	mov	r0, r6
	_current = main_thread;
   2185a:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   2185c:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   21860:	f026 fa1a 	bl	47c98 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   21864:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   21868:	4638      	mov	r0, r7
   2186a:	f384 8809 	msr	PSP, r4
   2186e:	b663      	cpsie	if
   21870:	f04f 0100 	mov.w	r1, #0
   21874:	f381 8811 	msr	BASEPRI, r1
   21878:	f3bf 8f6f 	isb	sy
   2187c:	2100      	movs	r1, #0
   2187e:	2200      	movs	r2, #0
   21880:	2300      	movs	r3, #0
   21882:	f025 fd75 	bl	47370 <z_thread_entry>
   21886:	bf00      	nop
   21888:	2002a578 	.word	0x2002a578

0002188c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21890:	4681      	mov	r9, r0
   21892:	b087      	sub	sp, #28

	if (esf != NULL) {
   21894:	460c      	mov	r4, r1
   21896:	2900      	cmp	r1, #0
   21898:	d07a      	beq.n	21990 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2189a:	f04f 0801 	mov.w	r8, #1
   2189e:	f04f 0000 	mov.w	r0, #0
   218a2:	4b3f      	ldr	r3, [pc, #252]	; (219a0 <z_arm_fatal_error+0x114>)
   218a4:	4d3f      	ldr	r5, [pc, #252]	; (219a4 <z_arm_fatal_error+0x118>)
   218a6:	f368 0002 	bfi	r0, r8, #0, #3
   218aa:	1aed      	subs	r5, r5, r3
   218ac:	688b      	ldr	r3, [r1, #8]
   218ae:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   218b2:	9300      	str	r3, [sp, #0]
   218b4:	f36f 00c5 	bfc	r0, #3, #3
   218b8:	e9d1 2300 	ldrd	r2, r3, [r1]
   218bc:	f365 108f 	bfi	r0, r5, #6, #10
   218c0:	4939      	ldr	r1, [pc, #228]	; (219a8 <z_arm_fatal_error+0x11c>)
   218c2:	f026 f81f 	bl	47904 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   218c6:	f04f 0000 	mov.w	r0, #0
   218ca:	6963      	ldr	r3, [r4, #20]
   218cc:	f368 0002 	bfi	r0, r8, #0, #3
   218d0:	9300      	str	r3, [sp, #0]
   218d2:	f36f 00c5 	bfc	r0, #3, #3
   218d6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   218da:	f365 108f 	bfi	r0, r5, #6, #10
   218de:	4933      	ldr	r1, [pc, #204]	; (219ac <z_arm_fatal_error+0x120>)
   218e0:	f026 f810 	bl	47904 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   218e4:	f04f 0000 	mov.w	r0, #0
   218e8:	f368 0002 	bfi	r0, r8, #0, #3
   218ec:	f36f 00c5 	bfc	r0, #3, #3
   218f0:	f365 108f 	bfi	r0, r5, #6, #10
   218f4:	69e2      	ldr	r2, [r4, #28]
   218f6:	492e      	ldr	r1, [pc, #184]	; (219b0 <z_arm_fatal_error+0x124>)
   218f8:	f026 f804 	bl	47904 <log_string_sync>
   218fc:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
   218fe:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   21900:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 219bc <z_arm_fatal_error+0x130>
   21904:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   21908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2190c:	1cf3      	adds	r3, r6, #3
   2190e:	ed97 7a08 	vldr	s14, [r7, #32]
   21912:	9304      	str	r3, [sp, #16]
   21914:	edcd 7a05 	vstr	s15, [sp, #20]
   21918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   2191c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21920:	1cb3      	adds	r3, r6, #2
   21922:	9302      	str	r3, [sp, #8]
   21924:	edcd 7a03 	vstr	s15, [sp, #12]
   21928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   2192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21930:	edcd 7a01 	vstr	s15, [sp, #4]
   21934:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   21938:	f368 0a02 	bfi	sl, r8, #0, #3
   2193c:	f36f 0ac5 	bfc	sl, #3, #3
   21940:	1c73      	adds	r3, r6, #1
   21942:	f365 1a8f 	bfi	sl, r5, #6, #10
   21946:	9300      	str	r3, [sp, #0]
   21948:	4632      	mov	r2, r6
   2194a:	ee17 3a90 	vmov	r3, s15
   2194e:	4659      	mov	r1, fp
   21950:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
   21952:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   21954:	f025 ffd6 	bl	47904 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   21958:	2e10      	cmp	r6, #16
   2195a:	f107 0710 	add.w	r7, r7, #16
   2195e:	d1d1      	bne.n	21904 <z_arm_fatal_error+0x78>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   21960:	f04f 0000 	mov.w	r0, #0
   21964:	f368 0002 	bfi	r0, r8, #0, #3
   21968:	f36f 00c5 	bfc	r0, #3, #3
   2196c:	f365 108f 	bfi	r0, r5, #6, #10
   21970:	6e22      	ldr	r2, [r4, #96]	; 0x60
   21972:	4910      	ldr	r1, [pc, #64]	; (219b4 <z_arm_fatal_error+0x128>)
   21974:	f025 ffc6 	bl	47904 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   21978:	f04f 0000 	mov.w	r0, #0
   2197c:	f368 0002 	bfi	r0, r8, #0, #3
   21980:	f36f 00c5 	bfc	r0, #3, #3
   21984:	f365 108f 	bfi	r0, r5, #6, #10
   21988:	69a2      	ldr	r2, [r4, #24]
   2198a:	490b      	ldr	r1, [pc, #44]	; (219b8 <z_arm_fatal_error+0x12c>)
   2198c:	f025 ffba 	bl	47904 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   21990:	4621      	mov	r1, r4
   21992:	4648      	mov	r0, r9
}
   21994:	b007      	add	sp, #28
   21996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_fatal_error(reason, esf);
   2199a:	f01b b9d1 	b.w	3cd40 <z_fatal_error>
   2199e:	bf00      	nop
   219a0:	0004a688 	.word	0x0004a688
   219a4:	0004a790 	.word	0x0004a790
   219a8:	0004e133 	.word	0x0004e133
   219ac:	0004e162 	.word	0x0004e162
   219b0:	0004e191 	.word	0x0004e191
   219b4:	0004e1e0 	.word	0x0004e1e0
   219b8:	0004e1f0 	.word	0x0004e1f0
   219bc:	0004e1a0 	.word	0x0004e1a0

000219c0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   219c0:	4a11      	ldr	r2, [pc, #68]	; (21a08 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   219c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   219c4:	4b11      	ldr	r3, [pc, #68]	; (21a0c <z_arm_prep_c+0x4c>)
   219c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   219ca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   219cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   219d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   219d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   219d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   219dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   219e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   219e4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   219e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   219ec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   219f0:	2300      	movs	r3, #0
   219f2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   219f6:	f01b fa3d 	bl	3ce74 <z_bss_zero>
	z_data_copy();
   219fa:	f01b fa45 	bl	3ce88 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   219fe:	f000 fb05 	bl	2200c <z_arm_int_lib_init>
	z_cstart();
   21a02:	f01b fa73 	bl	3ceec <z_cstart>
   21a06:	bf00      	nop
   21a08:	00018200 	.word	0x00018200
   21a0c:	e000ed00 	.word	0xe000ed00

00021a10 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   21a10:	f025 ff6f 	bl	478f2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21a14:	2020      	movs	r0, #32
    msr BASEPRI, r0
   21a16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   21a1a:	4808      	ldr	r0, [pc, #32]	; (21a3c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   21a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   21a20:	1840      	adds	r0, r0, r1
    msr PSP, r0
   21a22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   21a26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   21a2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   21a2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   21a2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   21a32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   21a36:	f7ff ffc3 	bl	219c0 <z_arm_prep_c>
   21a3a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   21a3c:	2002eaa8 	.word	0x2002eaa8

00021a40 <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a44:	4607      	mov	r7, r0
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   21a46:	f04f 0801 	mov.w	r8, #1
   21a4a:	f04f 0000 	mov.w	r0, #0
   21a4e:	4b44      	ldr	r3, [pc, #272]	; (21b60 <bus_fault.isra.2+0x120>)
   21a50:	4c44      	ldr	r4, [pc, #272]	; (21b64 <bus_fault.isra.2+0x124>)
   21a52:	f368 0002 	bfi	r0, r8, #0, #3
   21a56:	1ae4      	subs	r4, r4, r3
   21a58:	f36f 00c5 	bfc	r0, #3, #3
   21a5c:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   21a60:	4d41      	ldr	r5, [pc, #260]	; (21b68 <bus_fault.isra.2+0x128>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21a62:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   21a64:	f364 108f 	bfi	r0, r4, #6, #10
   21a68:	4940      	ldr	r1, [pc, #256]	; (21b6c <bus_fault.isra.2+0x12c>)
   21a6a:	f025 ff4b 	bl	47904 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   21a6e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21a70:	04d1      	lsls	r1, r2, #19
   21a72:	d50a      	bpl.n	21a8a <bus_fault.isra.2+0x4a>
		PR_FAULT_INFO("  Stacking error");
   21a74:	f04f 0000 	mov.w	r0, #0
   21a78:	f368 0002 	bfi	r0, r8, #0, #3
   21a7c:	f36f 00c5 	bfc	r0, #3, #3
   21a80:	f364 108f 	bfi	r0, r4, #6, #10
   21a84:	493a      	ldr	r1, [pc, #232]	; (21b70 <bus_fault.isra.2+0x130>)
   21a86:	f025 ff3d 	bl	47904 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   21a8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21a8c:	051a      	lsls	r2, r3, #20
   21a8e:	d50b      	bpl.n	21aa8 <bus_fault.isra.2+0x68>
		PR_FAULT_INFO("  Unstacking error");
   21a90:	f04f 0000 	mov.w	r0, #0
   21a94:	2301      	movs	r3, #1
   21a96:	f363 0002 	bfi	r0, r3, #0, #3
   21a9a:	f36f 00c5 	bfc	r0, #3, #3
   21a9e:	f364 108f 	bfi	r0, r4, #6, #10
   21aa2:	4934      	ldr	r1, [pc, #208]	; (21b74 <bus_fault.isra.2+0x134>)
   21aa4:	f025 ff2e 	bl	47904 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   21aa8:	4d2f      	ldr	r5, [pc, #188]	; (21b68 <bus_fault.isra.2+0x128>)
   21aaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21aac:	059b      	lsls	r3, r3, #22
   21aae:	d520      	bpl.n	21af2 <bus_fault.isra.2+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   21ab0:	f04f 0801 	mov.w	r8, #1
   21ab4:	f04f 0000 	mov.w	r0, #0
   21ab8:	f368 0002 	bfi	r0, r8, #0, #3
   21abc:	f36f 00c5 	bfc	r0, #3, #3
   21ac0:	f364 108f 	bfi	r0, r4, #6, #10
   21ac4:	492c      	ldr	r1, [pc, #176]	; (21b78 <bus_fault.isra.2+0x138>)
   21ac6:	f025 ff1d 	bl	47904 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   21aca:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   21acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21ace:	0418      	lsls	r0, r3, #16
   21ad0:	d50f      	bpl.n	21af2 <bus_fault.isra.2+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   21ad2:	f04f 0000 	mov.w	r0, #0
   21ad6:	f368 0002 	bfi	r0, r8, #0, #3
   21ada:	f36f 00c5 	bfc	r0, #3, #3
   21ade:	f364 108f 	bfi	r0, r4, #6, #10
   21ae2:	4926      	ldr	r1, [pc, #152]	; (21b7c <bus_fault.isra.2+0x13c>)
   21ae4:	f025 ff0e 	bl	47904 <log_string_sync>
			if (from_hard_fault) {
   21ae8:	b11f      	cbz	r7, 21af2 <bus_fault.isra.2+0xb2>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   21aea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21aec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   21af0:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   21af2:	4d1d      	ldr	r5, [pc, #116]	; (21b68 <bus_fault.isra.2+0x128>)
   21af4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21af6:	0559      	lsls	r1, r3, #21
   21af8:	d50b      	bpl.n	21b12 <bus_fault.isra.2+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   21afa:	f04f 0000 	mov.w	r0, #0
   21afe:	2301      	movs	r3, #1
   21b00:	f363 0002 	bfi	r0, r3, #0, #3
   21b04:	f36f 00c5 	bfc	r0, #3, #3
   21b08:	f364 108f 	bfi	r0, r4, #6, #10
   21b0c:	491c      	ldr	r1, [pc, #112]	; (21b80 <bus_fault.isra.2+0x140>)
   21b0e:	f025 fef9 	bl	47904 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   21b12:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21b14:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   21b18:	d014      	beq.n	21b44 <bus_fault.isra.2+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   21b1a:	f04f 0000 	mov.w	r0, #0
   21b1e:	2301      	movs	r3, #1
   21b20:	f363 0002 	bfi	r0, r3, #0, #3
   21b24:	f36f 00c5 	bfc	r0, #3, #3
   21b28:	4916      	ldr	r1, [pc, #88]	; (21b84 <bus_fault.isra.2+0x144>)
   21b2a:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   21b2e:	f025 fee9 	bl	47904 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   21b32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   21b34:	4a0c      	ldr	r2, [pc, #48]	; (21b68 <bus_fault.isra.2+0x128>)
   21b36:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21b38:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   21b3c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   21b3e:	7030      	strb	r0, [r6, #0]

	return reason;
}
   21b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   21b44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21b46:	0492      	lsls	r2, r2, #18
   21b48:	d5f3      	bpl.n	21b32 <bus_fault.isra.2+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   21b4a:	f04f 0000 	mov.w	r0, #0
   21b4e:	2201      	movs	r2, #1
   21b50:	f362 0002 	bfi	r0, r2, #0, #3
   21b54:	f363 00c5 	bfi	r0, r3, #3, #3
   21b58:	f364 108f 	bfi	r0, r4, #6, #10
   21b5c:	490a      	ldr	r1, [pc, #40]	; (21b88 <bus_fault.isra.2+0x148>)
   21b5e:	e7e6      	b.n	21b2e <bus_fault.isra.2+0xee>
   21b60:	0004a688 	.word	0x0004a688
   21b64:	0004a790 	.word	0x0004a790
   21b68:	e000ed00 	.word	0xe000ed00
   21b6c:	0004e21e 	.word	0x0004e21e
   21b70:	0004e234 	.word	0x0004e234
   21b74:	0004e245 	.word	0x0004e245
   21b78:	0004e258 	.word	0x0004e258
   21b7c:	0004e271 	.word	0x0004e271
   21b80:	0004e286 	.word	0x0004e286
   21b84:	0004e2a1 	.word	0x0004e2a1
   21b88:	0004e2b9 	.word	0x0004e2b9

00021b8c <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   21b8c:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   21b8e:	f04f 0000 	mov.w	r0, #0
   21b92:	2601      	movs	r6, #1
   21b94:	4b42      	ldr	r3, [pc, #264]	; (21ca0 <usage_fault.isra.3+0x114>)
   21b96:	4c43      	ldr	r4, [pc, #268]	; (21ca4 <usage_fault.isra.3+0x118>)
   21b98:	f366 0002 	bfi	r0, r6, #0, #3
   21b9c:	1ae4      	subs	r4, r4, r3
   21b9e:	f36f 00c5 	bfc	r0, #3, #3
   21ba2:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   21ba6:	4d40      	ldr	r5, [pc, #256]	; (21ca8 <usage_fault.isra.3+0x11c>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   21ba8:	f364 108f 	bfi	r0, r4, #6, #10
   21bac:	493f      	ldr	r1, [pc, #252]	; (21cac <usage_fault.isra.3+0x120>)
   21bae:	f025 fea9 	bl	47904 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   21bb2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21bb4:	0193      	lsls	r3, r2, #6
   21bb6:	d50a      	bpl.n	21bce <usage_fault.isra.3+0x42>
		PR_FAULT_INFO("  Division by zero");
   21bb8:	f04f 0000 	mov.w	r0, #0
   21bbc:	f366 0002 	bfi	r0, r6, #0, #3
   21bc0:	f36f 00c5 	bfc	r0, #3, #3
   21bc4:	f364 108f 	bfi	r0, r4, #6, #10
   21bc8:	4939      	ldr	r1, [pc, #228]	; (21cb0 <usage_fault.isra.3+0x124>)
   21bca:	f025 fe9b 	bl	47904 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   21bce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21bd0:	01dd      	lsls	r5, r3, #7
   21bd2:	d50b      	bpl.n	21bec <usage_fault.isra.3+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
   21bd4:	f04f 0000 	mov.w	r0, #0
   21bd8:	2301      	movs	r3, #1
   21bda:	f363 0002 	bfi	r0, r3, #0, #3
   21bde:	f36f 00c5 	bfc	r0, #3, #3
   21be2:	f364 108f 	bfi	r0, r4, #6, #10
   21be6:	4933      	ldr	r1, [pc, #204]	; (21cb4 <usage_fault.isra.3+0x128>)
   21be8:	f025 fe8c 	bl	47904 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   21bec:	4b2e      	ldr	r3, [pc, #184]	; (21ca8 <usage_fault.isra.3+0x11c>)
   21bee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   21bf0:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   21bf4:	d00c      	beq.n	21c10 <usage_fault.isra.3+0x84>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   21bf6:	2301      	movs	r3, #1
   21bf8:	f04f 0000 	mov.w	r0, #0
   21bfc:	f363 0002 	bfi	r0, r3, #0, #3
   21c00:	f36f 00c5 	bfc	r0, #3, #3
   21c04:	f364 108f 	bfi	r0, r4, #6, #10
   21c08:	492b      	ldr	r1, [pc, #172]	; (21cb8 <usage_fault.isra.3+0x12c>)
   21c0a:	f025 fe7b 	bl	47904 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   21c0e:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   21c10:	4e25      	ldr	r6, [pc, #148]	; (21ca8 <usage_fault.isra.3+0x11c>)
   21c12:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   21c14:	0310      	lsls	r0, r2, #12
   21c16:	d50b      	bpl.n	21c30 <usage_fault.isra.3+0xa4>
		PR_FAULT_INFO("  No coprocessor instructions");
   21c18:	f04f 0000 	mov.w	r0, #0
   21c1c:	2301      	movs	r3, #1
   21c1e:	f363 0002 	bfi	r0, r3, #0, #3
   21c22:	f36f 00c5 	bfc	r0, #3, #3
   21c26:	f364 108f 	bfi	r0, r4, #6, #10
   21c2a:	4924      	ldr	r1, [pc, #144]	; (21cbc <usage_fault.isra.3+0x130>)
   21c2c:	f025 fe6a 	bl	47904 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   21c30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   21c32:	0359      	lsls	r1, r3, #13
   21c34:	d50b      	bpl.n	21c4e <usage_fault.isra.3+0xc2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   21c36:	f04f 0000 	mov.w	r0, #0
   21c3a:	2301      	movs	r3, #1
   21c3c:	f363 0002 	bfi	r0, r3, #0, #3
   21c40:	f36f 00c5 	bfc	r0, #3, #3
   21c44:	f364 108f 	bfi	r0, r4, #6, #10
   21c48:	491d      	ldr	r1, [pc, #116]	; (21cc0 <usage_fault.isra.3+0x134>)
   21c4a:	f025 fe5b 	bl	47904 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   21c4e:	4e16      	ldr	r6, [pc, #88]	; (21ca8 <usage_fault.isra.3+0x11c>)
   21c50:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   21c52:	0392      	lsls	r2, r2, #14
   21c54:	d50b      	bpl.n	21c6e <usage_fault.isra.3+0xe2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   21c56:	f04f 0000 	mov.w	r0, #0
   21c5a:	2301      	movs	r3, #1
   21c5c:	f363 0002 	bfi	r0, r3, #0, #3
   21c60:	f36f 00c5 	bfc	r0, #3, #3
   21c64:	f364 108f 	bfi	r0, r4, #6, #10
   21c68:	4916      	ldr	r1, [pc, #88]	; (21cc4 <usage_fault.isra.3+0x138>)
   21c6a:	f025 fe4b 	bl	47904 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   21c6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   21c70:	03db      	lsls	r3, r3, #15
   21c72:	d50b      	bpl.n	21c8c <usage_fault.isra.3+0x100>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   21c74:	f04f 0000 	mov.w	r0, #0
   21c78:	2301      	movs	r3, #1
   21c7a:	f363 0002 	bfi	r0, r3, #0, #3
   21c7e:	f36f 00c5 	bfc	r0, #3, #3
   21c82:	f364 108f 	bfi	r0, r4, #6, #10
   21c86:	4910      	ldr	r1, [pc, #64]	; (21cc8 <usage_fault.isra.3+0x13c>)
   21c88:	f025 fe3c 	bl	47904 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21c8c:	4a06      	ldr	r2, [pc, #24]	; (21ca8 <usage_fault.isra.3+0x11c>)

	return reason;
}
   21c8e:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21c90:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21c92:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   21c96:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   21c9a:	6293      	str	r3, [r2, #40]	; 0x28
}
   21c9c:	bd70      	pop	{r4, r5, r6, pc}
   21c9e:	bf00      	nop
   21ca0:	0004a688 	.word	0x0004a688
   21ca4:	0004a790 	.word	0x0004a790
   21ca8:	e000ed00 	.word	0xe000ed00
   21cac:	0004e3eb 	.word	0x0004e3eb
   21cb0:	0004e403 	.word	0x0004e403
   21cb4:	0004e416 	.word	0x0004e416
   21cb8:	0004e430 	.word	0x0004e430
   21cbc:	0004e45a 	.word	0x0004e45a
   21cc0:	0004e478 	.word	0x0004e478
   21cc4:	0004e49d 	.word	0x0004e49d
   21cc8:	0004e4b7 	.word	0x0004e4b7

00021ccc <mem_manage_fault.isra.6>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cd0:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   21cd2:	f04f 0801 	mov.w	r8, #1
   21cd6:	f04f 0000 	mov.w	r0, #0
   21cda:	4b46      	ldr	r3, [pc, #280]	; (21df4 <mem_manage_fault.isra.6+0x128>)
   21cdc:	4c46      	ldr	r4, [pc, #280]	; (21df8 <mem_manage_fault.isra.6+0x12c>)
   21cde:	f368 0002 	bfi	r0, r8, #0, #3
   21ce2:	1ae4      	subs	r4, r4, r3
   21ce4:	f36f 00c5 	bfc	r0, #3, #3
   21ce8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   21cec:	4d43      	ldr	r5, [pc, #268]	; (21dfc <mem_manage_fault.isra.6+0x130>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21cee:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   21cf0:	f364 108f 	bfi	r0, r4, #6, #10
   21cf4:	4942      	ldr	r1, [pc, #264]	; (21e00 <mem_manage_fault.isra.6+0x134>)
   21cf6:	f025 fe05 	bl	47904 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   21cfa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21cfc:	06d1      	lsls	r1, r2, #27
   21cfe:	d50a      	bpl.n	21d16 <mem_manage_fault.isra.6+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   21d00:	f04f 0000 	mov.w	r0, #0
   21d04:	f368 0002 	bfi	r0, r8, #0, #3
   21d08:	f36f 00c5 	bfc	r0, #3, #3
   21d0c:	f364 108f 	bfi	r0, r4, #6, #10
   21d10:	493c      	ldr	r1, [pc, #240]	; (21e04 <mem_manage_fault.isra.6+0x138>)
   21d12:	f025 fdf7 	bl	47904 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   21d16:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21d18:	071a      	lsls	r2, r3, #28
   21d1a:	d50b      	bpl.n	21d34 <mem_manage_fault.isra.6+0x68>
		PR_FAULT_INFO("  Unstacking error");
   21d1c:	f04f 0000 	mov.w	r0, #0
   21d20:	2301      	movs	r3, #1
   21d22:	f363 0002 	bfi	r0, r3, #0, #3
   21d26:	f36f 00c5 	bfc	r0, #3, #3
   21d2a:	f364 108f 	bfi	r0, r4, #6, #10
   21d2e:	4936      	ldr	r1, [pc, #216]	; (21e08 <mem_manage_fault.isra.6+0x13c>)
   21d30:	f025 fde8 	bl	47904 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   21d34:	4d31      	ldr	r5, [pc, #196]	; (21dfc <mem_manage_fault.isra.6+0x130>)
   21d36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21d38:	079b      	lsls	r3, r3, #30
   21d3a:	d520      	bpl.n	21d7e <mem_manage_fault.isra.6+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   21d3c:	f04f 0801 	mov.w	r8, #1
   21d40:	f04f 0000 	mov.w	r0, #0
   21d44:	f368 0002 	bfi	r0, r8, #0, #3
   21d48:	f36f 00c5 	bfc	r0, #3, #3
   21d4c:	f364 108f 	bfi	r0, r4, #6, #10
   21d50:	492e      	ldr	r1, [pc, #184]	; (21e0c <mem_manage_fault.isra.6+0x140>)
   21d52:	f025 fdd7 	bl	47904 <log_string_sync>
		mmfar = SCB->MMFAR;
   21d56:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   21d58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21d5a:	0618      	lsls	r0, r3, #24
   21d5c:	d50f      	bpl.n	21d7e <mem_manage_fault.isra.6+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   21d5e:	f04f 0000 	mov.w	r0, #0
   21d62:	f368 0002 	bfi	r0, r8, #0, #3
   21d66:	f36f 00c5 	bfc	r0, #3, #3
   21d6a:	f364 108f 	bfi	r0, r4, #6, #10
   21d6e:	4928      	ldr	r1, [pc, #160]	; (21e10 <mem_manage_fault.isra.6+0x144>)
   21d70:	f025 fdc8 	bl	47904 <log_string_sync>
			if (from_hard_fault) {
   21d74:	b11f      	cbz	r7, 21d7e <mem_manage_fault.isra.6+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   21d76:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   21d7c:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   21d7e:	4d1f      	ldr	r5, [pc, #124]	; (21dfc <mem_manage_fault.isra.6+0x130>)
   21d80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21d82:	07d1      	lsls	r1, r2, #31
   21d84:	d50b      	bpl.n	21d9e <mem_manage_fault.isra.6+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   21d86:	f04f 0000 	mov.w	r0, #0
   21d8a:	2301      	movs	r3, #1
   21d8c:	f363 0002 	bfi	r0, r3, #0, #3
   21d90:	f36f 00c5 	bfc	r0, #3, #3
   21d94:	f364 108f 	bfi	r0, r4, #6, #10
   21d98:	491e      	ldr	r1, [pc, #120]	; (21e14 <mem_manage_fault.isra.6+0x148>)
   21d9a:	f025 fdb3 	bl	47904 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   21d9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21da0:	069a      	lsls	r2, r3, #26
   21da2:	d50b      	bpl.n	21dbc <mem_manage_fault.isra.6+0xf0>
		PR_FAULT_INFO(
   21da4:	f04f 0000 	mov.w	r0, #0
   21da8:	2301      	movs	r3, #1
   21daa:	f363 0002 	bfi	r0, r3, #0, #3
   21dae:	f36f 00c5 	bfc	r0, #3, #3
   21db2:	f364 108f 	bfi	r0, r4, #6, #10
   21db6:	4918      	ldr	r1, [pc, #96]	; (21e18 <mem_manage_fault.isra.6+0x14c>)
   21db8:	f025 fda4 	bl	47904 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   21dbc:	4b0f      	ldr	r3, [pc, #60]	; (21dfc <mem_manage_fault.isra.6+0x130>)
   21dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21dc0:	06db      	lsls	r3, r3, #27
   21dc2:	d50e      	bpl.n	21de2 <mem_manage_fault.isra.6+0x116>
	__ASSERT(0,
   21dc4:	4915      	ldr	r1, [pc, #84]	; (21e1c <mem_manage_fault.isra.6+0x150>)
   21dc6:	f240 133d 	movw	r3, #317	; 0x13d
   21dca:	4a15      	ldr	r2, [pc, #84]	; (21e20 <mem_manage_fault.isra.6+0x154>)
   21dcc:	4815      	ldr	r0, [pc, #84]	; (21e24 <mem_manage_fault.isra.6+0x158>)
   21dce:	f025 fd7c 	bl	478ca <printk>
   21dd2:	4815      	ldr	r0, [pc, #84]	; (21e28 <mem_manage_fault.isra.6+0x15c>)
   21dd4:	f025 fd79 	bl	478ca <printk>
   21dd8:	f240 113d 	movw	r1, #317	; 0x13d
   21ddc:	4810      	ldr	r0, [pc, #64]	; (21e20 <mem_manage_fault.isra.6+0x154>)
   21dde:	f025 fd81 	bl	478e4 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   21de2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   21de4:	4a05      	ldr	r2, [pc, #20]	; (21dfc <mem_manage_fault.isra.6+0x130>)
   21de6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21de8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   21dec:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   21dee:	7030      	strb	r0, [r6, #0]
}
   21df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21df4:	0004a688 	.word	0x0004a688
   21df8:	0004a790 	.word	0x0004a790
   21dfc:	e000ed00 	.word	0xe000ed00
   21e00:	0004e2e8 	.word	0x0004e2e8
   21e04:	0004e2fe 	.word	0x0004e2fe
   21e08:	0004e245 	.word	0x0004e245
   21e0c:	0004e331 	.word	0x0004e331
   21e10:	0004e349 	.word	0x0004e349
   21e14:	0004e35f 	.word	0x0004e35f
   21e18:	0004e2b9 	.word	0x0004e2b9
   21e1c:	00052aa7 	.word	0x00052aa7
   21e20:	0004e37e 	.word	0x0004e37e
   21e24:	0004ccf0 	.word	0x0004ccf0
   21e28:	0004e3b1 	.word	0x0004e3b1

00021e2c <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   21e2c:	4b5a      	ldr	r3, [pc, #360]	; (21f98 <z_arm_fault+0x16c>)
{
   21e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   21e30:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   21e32:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   21e36:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
   21e3a:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   21e3c:	f040 80aa 	bne.w	21f94 <z_arm_fault+0x168>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   21e40:	f011 0301 	ands.w	r3, r1, #1
   21e44:	f040 80a6 	bne.w	21f94 <z_arm_fault+0x168>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   21e48:	064a      	lsls	r2, r1, #25
   21e4a:	d50f      	bpl.n	21e6c <z_arm_fault+0x40>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
   21e4c:	2201      	movs	r2, #1
   21e4e:	f04f 0000 	mov.w	r0, #0
   21e52:	f362 0002 	bfi	r0, r2, #0, #3
   21e56:	f363 00c5 	bfi	r0, r3, #3, #3
   21e5a:	4a50      	ldr	r2, [pc, #320]	; (21f9c <z_arm_fault+0x170>)
   21e5c:	4b50      	ldr	r3, [pc, #320]	; (21fa0 <z_arm_fault+0x174>)
   21e5e:	4951      	ldr	r1, [pc, #324]	; (21fa4 <z_arm_fault+0x178>)
   21e60:	1a9b      	subs	r3, r3, r2
   21e62:	08db      	lsrs	r3, r3, #3
   21e64:	f363 108f 	bfi	r0, r3, #6, #10
   21e68:	f025 fd4c 	bl	47904 <log_string_sync>
	*recoverable = false;
   21e6c:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   21e6e:	f3c4 0108 	ubfx	r1, r4, #0, #9
	*recoverable = false;
   21e72:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   21e76:	1ecb      	subs	r3, r1, #3
   21e78:	2b09      	cmp	r3, #9
   21e7a:	d873      	bhi.n	21f64 <z_arm_fault+0x138>
   21e7c:	e8df f003 	tbb	[pc, r3]
   21e80:	585f5b05 	.word	0x585f5b05
   21e84:	72727272 	.word	0x72727272
   21e88:	6372      	.short	0x6372
	PR_FAULT_INFO("***** HARD FAULT *****");
   21e8a:	2701      	movs	r7, #1
   21e8c:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   21e90:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   21e92:	4b42      	ldr	r3, [pc, #264]	; (21f9c <z_arm_fault+0x170>)
   21e94:	4d42      	ldr	r5, [pc, #264]	; (21fa0 <z_arm_fault+0x174>)
   21e96:	f367 0002 	bfi	r0, r7, #0, #3
   21e9a:	1aed      	subs	r5, r5, r3
   21e9c:	f36f 00c5 	bfc	r0, #3, #3
   21ea0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   21ea4:	f365 108f 	bfi	r0, r5, #6, #10
   21ea8:	493f      	ldr	r1, [pc, #252]	; (21fa8 <z_arm_fault+0x17c>)
   21eaa:	f025 fd2b 	bl	47904 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   21eae:	4a3a      	ldr	r2, [pc, #232]	; (21f98 <z_arm_fault+0x16c>)
	*recoverable = false;
   21eb0:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   21eb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21eb6:	f013 0302 	ands.w	r3, r3, #2
   21eba:	d00c      	beq.n	21ed6 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   21ebc:	f04f 0000 	mov.w	r0, #0
   21ec0:	f367 0002 	bfi	r0, r7, #0, #3
   21ec4:	f364 00c5 	bfi	r0, r4, #3, #3
   21ec8:	4938      	ldr	r1, [pc, #224]	; (21fac <z_arm_fault+0x180>)
   21eca:	f365 108f 	bfi	r0, r5, #6, #10
	PR_FAULT_INFO(
   21ece:	f025 fd19 	bl	47904 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   21ed2:	2000      	movs	r0, #0
   21ed4:	e016      	b.n	21f04 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   21ed6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   21ed8:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   21edc:	d015      	beq.n	21f0a <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   21ede:	f04f 0000 	mov.w	r0, #0
   21ee2:	f367 0002 	bfi	r0, r7, #0, #3
   21ee6:	f363 00c5 	bfi	r0, r3, #3, #3
   21eea:	f365 108f 	bfi	r0, r5, #6, #10
   21eee:	4930      	ldr	r1, [pc, #192]	; (21fb0 <z_arm_fault+0x184>)
   21ef0:	f025 fd08 	bl	47904 <log_string_sync>
		if (SCB_MMFSR != 0) {
   21ef4:	4b2f      	ldr	r3, [pc, #188]	; (21fb4 <z_arm_fault+0x188>)
   21ef6:	781b      	ldrb	r3, [r3, #0]
   21ef8:	b163      	cbz	r3, 21f14 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   21efa:	4638      	mov	r0, r7
   21efc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   21f00:	f7ff fee4 	bl	21ccc <mem_manage_fault.isra.6>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   21f04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21f08:	b913      	cbnz	r3, 21f10 <z_arm_fault+0xe4>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
   21f0a:	4631      	mov	r1, r6
   21f0c:	f7ff fcbe 	bl	2188c <z_arm_fatal_error>
}
   21f10:	b003      	add	sp, #12
   21f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   21f14:	4b28      	ldr	r3, [pc, #160]	; (21fb8 <z_arm_fault+0x18c>)
   21f16:	781b      	ldrb	r3, [r3, #0]
   21f18:	b12b      	cbz	r3, 21f26 <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   21f1a:	4638      	mov	r0, r7
   21f1c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   21f20:	f7ff fd8e 	bl	21a40 <bus_fault.isra.2>
   21f24:	e7ee      	b.n	21f04 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
   21f26:	4b25      	ldr	r3, [pc, #148]	; (21fbc <z_arm_fault+0x190>)
   21f28:	8818      	ldrh	r0, [r3, #0]
   21f2a:	b280      	uxth	r0, r0
   21f2c:	2800      	cmp	r0, #0
   21f2e:	d0e9      	beq.n	21f04 <z_arm_fault+0xd8>
		reason = usage_fault(esf);
   21f30:	f7ff fe2c 	bl	21b8c <usage_fault.isra.3>
   21f34:	e7e6      	b.n	21f04 <z_arm_fault+0xd8>
		reason = mem_manage_fault(esf, 0, recoverable);
   21f36:	f10d 0107 	add.w	r1, sp, #7
   21f3a:	2000      	movs	r0, #0
   21f3c:	e7e0      	b.n	21f00 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
   21f3e:	f10d 0107 	add.w	r1, sp, #7
   21f42:	2000      	movs	r0, #0
   21f44:	e7ec      	b.n	21f20 <z_arm_fault+0xf4>
	PR_FAULT_INFO(
   21f46:	2301      	movs	r3, #1
   21f48:	f04f 0000 	mov.w	r0, #0
   21f4c:	4a13      	ldr	r2, [pc, #76]	; (21f9c <z_arm_fault+0x170>)
   21f4e:	f363 0002 	bfi	r0, r3, #0, #3
   21f52:	4b13      	ldr	r3, [pc, #76]	; (21fa0 <z_arm_fault+0x174>)
   21f54:	f36f 00c5 	bfc	r0, #3, #3
   21f58:	1a9b      	subs	r3, r3, r2
   21f5a:	08db      	lsrs	r3, r3, #3
   21f5c:	f363 108f 	bfi	r0, r3, #6, #10
   21f60:	4917      	ldr	r1, [pc, #92]	; (21fc0 <z_arm_fault+0x194>)
   21f62:	e7b4      	b.n	21ece <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   21f64:	2301      	movs	r3, #1
   21f66:	f04f 0000 	mov.w	r0, #0
   21f6a:	4a0c      	ldr	r2, [pc, #48]	; (21f9c <z_arm_fault+0x170>)
   21f6c:	f363 0002 	bfi	r0, r3, #0, #3
   21f70:	4b0b      	ldr	r3, [pc, #44]	; (21fa0 <z_arm_fault+0x174>)
   21f72:	4c14      	ldr	r4, [pc, #80]	; (21fc4 <z_arm_fault+0x198>)
   21f74:	1a9b      	subs	r3, r3, r2
   21f76:	4a14      	ldr	r2, [pc, #80]	; (21fc8 <z_arm_fault+0x19c>)
   21f78:	08db      	lsrs	r3, r3, #3
   21f7a:	f36f 00c5 	bfc	r0, #3, #3
   21f7e:	f363 108f 	bfi	r0, r3, #6, #10
   21f82:	290f      	cmp	r1, #15
   21f84:	bfd8      	it	le
   21f86:	4622      	movle	r2, r4
   21f88:	f1a1 0310 	sub.w	r3, r1, #16
   21f8c:	490f      	ldr	r1, [pc, #60]	; (21fcc <z_arm_fault+0x1a0>)
   21f8e:	f025 fcb9 	bl	47904 <log_string_sync>
   21f92:	e79e      	b.n	21ed2 <z_arm_fault+0xa6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   21f94:	2000      	movs	r0, #0
   21f96:	e7b8      	b.n	21f0a <z_arm_fault+0xde>
   21f98:	e000ed00 	.word	0xe000ed00
   21f9c:	0004a688 	.word	0x0004a688
   21fa0:	0004a790 	.word	0x0004a790
   21fa4:	0004e510 	.word	0x0004e510
   21fa8:	0004e533 	.word	0x0004e533
   21fac:	0004e54a 	.word	0x0004e54a
   21fb0:	0004e56b 	.word	0x0004e56b
   21fb4:	e000ed28 	.word	0xe000ed28
   21fb8:	e000ed29 	.word	0xe000ed29
   21fbc:	e000ed2a 	.word	0xe000ed2a
   21fc0:	0004e58a 	.word	0x0004e58a
   21fc4:	0004e4e2 	.word	0x0004e4e2
   21fc8:	0004e4f7 	.word	0x0004e4f7
   21fcc:	0004e5c0 	.word	0x0004e5c0

00021fd0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   21fd0:	4b04      	ldr	r3, [pc, #16]	; (21fe4 <z_arm_fault_init+0x14>)
   21fd2:	695a      	ldr	r2, [r3, #20]
   21fd4:	f042 0210 	orr.w	r2, r2, #16
   21fd8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   21fda:	695a      	ldr	r2, [r3, #20]
   21fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   21fe0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   21fe2:	4770      	bx	lr
   21fe4:	e000ed00 	.word	0xe000ed00

00021fe8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   21fe8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   21fec:	4905      	ldr	r1, [pc, #20]	; (22004 <sys_arch_reboot+0x1c>)
   21fee:	4b06      	ldr	r3, [pc, #24]	; (22008 <sys_arch_reboot+0x20>)
   21ff0:	68ca      	ldr	r2, [r1, #12]
   21ff2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   21ff6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   21ff8:	60cb      	str	r3, [r1, #12]
   21ffa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   21ffe:	bf00      	nop
   22000:	e7fd      	b.n	21ffe <sys_arch_reboot+0x16>
   22002:	bf00      	nop
   22004:	e000ed00 	.word	0xe000ed00
   22008:	05fa0004 	.word	0x05fa0004

0002200c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   2200c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2200e:	2120      	movs	r1, #32
   22010:	4803      	ldr	r0, [pc, #12]	; (22020 <z_arm_int_lib_init+0x14>)
   22012:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22014:	3301      	adds	r3, #1
   22016:	2b41      	cmp	r3, #65	; 0x41
   22018:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2201c:	d1f9      	bne.n	22012 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2201e:	4770      	bx	lr
   22020:	e000e100 	.word	0xe000e100

00022024 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   22024:	b538      	push	{r3, r4, r5, lr}
   22026:	4604      	mov	r4, r0
	__asm__ volatile(
   22028:	f04f 0320 	mov.w	r3, #32
   2202c:	f3ef 8511 	mrs	r5, BASEPRI
   22030:	f383 8811 	msr	BASEPRI, r3
   22034:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   22038:	7b03      	ldrb	r3, [r0, #12]
   2203a:	07db      	lsls	r3, r3, #31
   2203c:	d50c      	bpl.n	22058 <z_impl_k_thread_abort+0x34>
   2203e:	4912      	ldr	r1, [pc, #72]	; (22088 <z_impl_k_thread_abort+0x64>)
   22040:	2325      	movs	r3, #37	; 0x25
   22042:	4a12      	ldr	r2, [pc, #72]	; (2208c <z_impl_k_thread_abort+0x68>)
   22044:	4812      	ldr	r0, [pc, #72]	; (22090 <z_impl_k_thread_abort+0x6c>)
   22046:	f025 fc40 	bl	478ca <printk>
   2204a:	4812      	ldr	r0, [pc, #72]	; (22094 <z_impl_k_thread_abort+0x70>)
   2204c:	f025 fc3d 	bl	478ca <printk>
   22050:	2125      	movs	r1, #37	; 0x25
   22052:	480e      	ldr	r0, [pc, #56]	; (2208c <z_impl_k_thread_abort+0x68>)
   22054:	f025 fc46 	bl	478e4 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   22058:	4620      	mov	r0, r4
   2205a:	f028 f889 	bl	4a170 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   2205e:	4b0e      	ldr	r3, [pc, #56]	; (22098 <z_impl_k_thread_abort+0x74>)
   22060:	689b      	ldr	r3, [r3, #8]
   22062:	42a3      	cmp	r3, r4
   22064:	d10b      	bne.n	2207e <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   22066:	4b0d      	ldr	r3, [pc, #52]	; (2209c <z_impl_k_thread_abort+0x78>)
   22068:	685a      	ldr	r2, [r3, #4]
   2206a:	f3c2 0208 	ubfx	r2, r2, #0, #9
   2206e:	b912      	cbnz	r2, 22076 <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
   22070:	4628      	mov	r0, r5
   22072:	f7ff fb21 	bl	216b8 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22076:	685a      	ldr	r2, [r3, #4]
   22078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2207c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   2207e:	4628      	mov	r0, r5
}
   22080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   22084:	f027 bff9 	b.w	4a07a <z_reschedule_irqlock>
   22088:	0004e60d 	.word	0x0004e60d
   2208c:	0004e5d3 	.word	0x0004e5d3
   22090:	0004ccf0 	.word	0x0004ccf0
   22094:	0004e63b 	.word	0x0004e63b
   22098:	2002a578 	.word	0x2002a578
   2209c:	e000ed00 	.word	0xe000ed00

000220a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   220a0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   220a2:	4b0e      	ldr	r3, [pc, #56]	; (220dc <z_arm_configure_static_mpu_regions+0x3c>)
{
   220a4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   220a6:	9302      	str	r3, [sp, #8]
   220a8:	4b0d      	ldr	r3, [pc, #52]	; (220e0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   220aa:	4c0e      	ldr	r4, [pc, #56]	; (220e4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   220ac:	9303      	str	r3, [sp, #12]
   220ae:	4b0e      	ldr	r3, [pc, #56]	; (220e8 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   220b0:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   220b2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   220b4:	ab02      	add	r3, sp, #8
   220b6:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   220ba:	4a0c      	ldr	r2, [pc, #48]	; (220ec <z_arm_configure_static_mpu_regions+0x4c>)
   220bc:	4623      	mov	r3, r4
   220be:	2101      	movs	r1, #1
   220c0:	f000 f982 	bl	223c8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   220c4:	2300      	movs	r3, #0
   220c6:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   220c8:	4b09      	ldr	r3, [pc, #36]	; (220f0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   220ca:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   220cc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   220ce:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   220d0:	9305      	str	r3, [sp, #20]
   220d2:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   220d4:	f000 f99c 	bl	22410 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   220d8:	b008      	add	sp, #32
   220da:	bd10      	pop	{r4, pc}
   220dc:	20020000 	.word	0x20020000
   220e0:	00000000 	.word	0x00000000
   220e4:	20040000 	.word	0x20040000
   220e8:	00010006 	.word	0x00010006
   220ec:	20020000 	.word	0x20020000
   220f0:	20020000 	.word	0x20020000

000220f4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   220f4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   220f6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   220f8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   220fa:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   220fe:	f004 021f 	and.w	r2, r4, #31
   22102:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22104:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   22106:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22108:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   2210c:	4904      	ldr	r1, [pc, #16]	; (22120 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2210e:	f043 0301 	orr.w	r3, r3, #1
   22112:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   22116:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   22118:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   2211a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   2211c:	bd10      	pop	{r4, pc}
   2211e:	bf00      	nop
   22120:	e000ed90 	.word	0xe000ed90

00022124 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   22124:	280f      	cmp	r0, #15
{
   22126:	b510      	push	{r4, lr}
   22128:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   2212a:	d914      	bls.n	22156 <region_allocate_and_init+0x32>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2212c:	2301      	movs	r3, #1
   2212e:	f04f 0000 	mov.w	r0, #0
   22132:	4a0a      	ldr	r2, [pc, #40]	; (2215c <region_allocate_and_init+0x38>)
   22134:	f363 0002 	bfi	r0, r3, #0, #3
   22138:	4b09      	ldr	r3, [pc, #36]	; (22160 <region_allocate_and_init+0x3c>)
   2213a:	f36f 00c5 	bfc	r0, #3, #3
   2213e:	1a9b      	subs	r3, r3, r2
   22140:	08db      	lsrs	r3, r3, #3
   22142:	4622      	mov	r2, r4
   22144:	f363 108f 	bfi	r0, r3, #6, #10
   22148:	4906      	ldr	r1, [pc, #24]	; (22164 <region_allocate_and_init+0x40>)
   2214a:	f025 fbdb 	bl	47904 <log_string_sync>
		return -EINVAL;
   2214e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   22152:	4620      	mov	r0, r4
   22154:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   22156:	f7ff ffcd 	bl	220f4 <region_init>
	return index;
   2215a:	e7fa      	b.n	22152 <region_allocate_and_init+0x2e>
   2215c:	0004a688 	.word	0x0004a688
   22160:	0004a758 	.word	0x0004a758
   22164:	0004e807 	.word	0x0004e807

00022168 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   22168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2216c:	4607      	mov	r7, r0
   2216e:	4688      	mov	r8, r1
   22170:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   22172:	2600      	movs	r6, #0
	MPU->RNR = index;
   22174:	4d5a      	ldr	r5, [pc, #360]	; (222e0 <mpu_configure_regions.constprop.2+0x178>)
static int mpu_configure_regions(const struct k_mem_partition
   22176:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   22178:	4546      	cmp	r6, r8
   2217a:	da41      	bge.n	22200 <mpu_configure_regions.constprop.2+0x98>
		if (regions[i]->size == 0U) {
   2217c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   22180:	f8d3 9004 	ldr.w	r9, [r3, #4]
   22184:	f1b9 0f00 	cmp.w	r9, #0
   22188:	d05d      	beq.n	22246 <mpu_configure_regions.constprop.2+0xde>
		&&
   2218a:	f1b9 0f1f 	cmp.w	r9, #31
   2218e:	d924      	bls.n	221da <mpu_configure_regions.constprop.2+0x72>
		&&
   22190:	f019 0f1f 	tst.w	r9, #31
   22194:	d121      	bne.n	221da <mpu_configure_regions.constprop.2+0x72>
		((part->start &
   22196:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   2219a:	f01a 0f1f 	tst.w	sl, #31
   2219e:	d11c      	bne.n	221da <mpu_configure_regions.constprop.2+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   221a0:	4650      	mov	r0, sl
   221a2:	f024 ff9e 	bl	470e2 <arm_cmse_mpu_region_get>
   221a6:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   221a8:	eb09 000a 	add.w	r0, r9, sl
   221ac:	3801      	subs	r0, #1
   221ae:	f024 ff98 	bl	470e2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   221b2:	4583      	cmp	fp, r0
   221b4:	d028      	beq.n	22208 <mpu_configure_regions.constprop.2+0xa0>
	return -EINVAL;
   221b6:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   221ba:	2301      	movs	r3, #1
   221bc:	f04f 0000 	mov.w	r0, #0
   221c0:	4a48      	ldr	r2, [pc, #288]	; (222e4 <mpu_configure_regions.constprop.2+0x17c>)
   221c2:	f363 0002 	bfi	r0, r3, #0, #3
   221c6:	4b48      	ldr	r3, [pc, #288]	; (222e8 <mpu_configure_regions.constprop.2+0x180>)
   221c8:	f36f 00c5 	bfc	r0, #3, #3
   221cc:	1a9b      	subs	r3, r3, r2
   221ce:	08db      	lsrs	r3, r3, #3
   221d0:	f363 108f 	bfi	r0, r3, #6, #10
   221d4:	465a      	mov	r2, fp
   221d6:	4945      	ldr	r1, [pc, #276]	; (222ec <mpu_configure_regions.constprop.2+0x184>)
   221d8:	e00e      	b.n	221f8 <mpu_configure_regions.constprop.2+0x90>
			LOG_ERR("Partition %u: sanity check failed.", i);
   221da:	2301      	movs	r3, #1
   221dc:	f04f 0000 	mov.w	r0, #0
   221e0:	4a40      	ldr	r2, [pc, #256]	; (222e4 <mpu_configure_regions.constprop.2+0x17c>)
   221e2:	f363 0002 	bfi	r0, r3, #0, #3
   221e6:	4b40      	ldr	r3, [pc, #256]	; (222e8 <mpu_configure_regions.constprop.2+0x180>)
   221e8:	f36f 00c5 	bfc	r0, #3, #3
   221ec:	1a9b      	subs	r3, r3, r2
   221ee:	4632      	mov	r2, r6
   221f0:	08db      	lsrs	r3, r3, #3
   221f2:	493f      	ldr	r1, [pc, #252]	; (222f0 <mpu_configure_regions.constprop.2+0x188>)
   221f4:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   221f8:	f025 fb84 	bl	47904 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   221fc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   22200:	4620      	mov	r0, r4
   22202:	b005      	add	sp, #20
   22204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   22208:	f11b 0f16 	cmn.w	fp, #22
   2220c:	d0d5      	beq.n	221ba <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   2220e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   22210:	455b      	cmp	r3, fp
   22212:	dbd2      	blt.n	221ba <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
   22214:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   22218:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   2221a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2221e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   22220:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   22224:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   22228:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   2222c:	e9d1 3200 	ldrd	r3, r2, [r1]
   22230:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   22232:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   22234:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   22238:	d118      	bne.n	2226c <mpu_configure_regions.constprop.2+0x104>
   2223a:	45ca      	cmp	sl, r9
   2223c:	d105      	bne.n	2224a <mpu_configure_regions.constprop.2+0xe2>
			mpu_configure_region(u_reg_index, regions[i]);
   2223e:	fa5f f08b 	uxtb.w	r0, fp
   22242:	f025 fd31 	bl	47ca8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   22246:	3601      	adds	r6, #1
   22248:	e796      	b.n	22178 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   2224a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2224e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   22250:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   22254:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   22258:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2225a:	60ea      	str	r2, [r5, #12]
			reg_index =
   2225c:	b2e0      	uxtb	r0, r4
			reg_index =
   2225e:	f025 fd23 	bl	47ca8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   22262:	f110 0f16 	cmn.w	r0, #22
   22266:	d0c9      	beq.n	221fc <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
   22268:	1c44      	adds	r4, r0, #1
   2226a:	e7ec      	b.n	22246 <mpu_configure_regions.constprop.2+0xde>
	MPU->RNR = index;
   2226c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   22270:	692a      	ldr	r2, [r5, #16]
   22272:	3b01      	subs	r3, #1
   22274:	f023 031f 	bic.w	r3, r3, #31
   22278:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   2227c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   2227e:	45ca      	cmp	sl, r9
   22280:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   22282:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   22284:	d0eb      	beq.n	2225e <mpu_configure_regions.constprop.2+0xf6>
			reg_index =
   22286:	f025 fd0f 	bl	47ca8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2228a:	f110 0f16 	cmn.w	r0, #22
   2228e:	d0b5      	beq.n	221fc <mpu_configure_regions.constprop.2+0x94>
	MPU->RNR = index;
   22290:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   22294:	68ea      	ldr	r2, [r5, #12]
   22296:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   2229a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   2229e:	f362 0304 	bfi	r3, r2, #0, #5
   222a2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   222a6:	692b      	ldr	r3, [r5, #16]
   222a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   222ac:	085b      	lsrs	r3, r3, #1
   222ae:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   222b2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   222b6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   222ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   222be:	4413      	add	r3, r2
   222c0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   222c2:	f023 031f 	bic.w	r3, r3, #31
   222c6:	4453      	add	r3, sl
   222c8:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   222cc:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   222ce:	f023 031f 	bic.w	r3, r3, #31
			reg_index =
   222d2:	4669      	mov	r1, sp
   222d4:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   222d6:	9303      	str	r3, [sp, #12]
			reg_index =
   222d8:	f7ff ff24 	bl	22124 <region_allocate_and_init>
   222dc:	e7c1      	b.n	22262 <mpu_configure_regions.constprop.2+0xfa>
   222de:	bf00      	nop
   222e0:	e000ed90 	.word	0xe000ed90
   222e4:	0004a688 	.word	0x0004a688
   222e8:	0004a758 	.word	0x0004a758
   222ec:	0004e7e4 	.word	0x0004e7e4
   222f0:	0004e7c1 	.word	0x0004e7c1

000222f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   222f4:	2205      	movs	r2, #5
   222f6:	4b03      	ldr	r3, [pc, #12]	; (22304 <arm_core_mpu_enable+0x10>)
   222f8:	605a      	str	r2, [r3, #4]
   222fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   222fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   22302:	4770      	bx	lr
   22304:	e000ed90 	.word	0xe000ed90

00022308 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   22308:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2230c:	2200      	movs	r2, #0
   2230e:	4b01      	ldr	r3, [pc, #4]	; (22314 <arm_core_mpu_disable+0xc>)
   22310:	605a      	str	r2, [r3, #4]
}
   22312:	4770      	bx	lr
   22314:	e000ed90 	.word	0xe000ed90

00022318 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   22318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2231a:	4f21      	ldr	r7, [pc, #132]	; (223a0 <arm_mpu_init+0x88>)
   2231c:	683e      	ldr	r6, [r7, #0]
   2231e:	2e10      	cmp	r6, #16
   22320:	d913      	bls.n	2234a <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   22322:	f240 1307 	movw	r3, #263	; 0x107
   22326:	4a1f      	ldr	r2, [pc, #124]	; (223a4 <arm_mpu_init+0x8c>)
   22328:	491f      	ldr	r1, [pc, #124]	; (223a8 <arm_mpu_init+0x90>)
   2232a:	4820      	ldr	r0, [pc, #128]	; (223ac <arm_mpu_init+0x94>)
   2232c:	f025 facd 	bl	478ca <printk>
   22330:	2210      	movs	r2, #16
   22332:	4631      	mov	r1, r6
   22334:	481e      	ldr	r0, [pc, #120]	; (223b0 <arm_mpu_init+0x98>)
   22336:	f025 fac8 	bl	478ca <printk>
   2233a:	481a      	ldr	r0, [pc, #104]	; (223a4 <arm_mpu_init+0x8c>)
   2233c:	f240 1107 	movw	r1, #263	; 0x107
   22340:	f025 fad0 	bl	478e4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   22344:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   22348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2234a:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   2234c:	f7ff ffdc 	bl	22308 <arm_core_mpu_disable>
	MPU->MAIR0 =
   22350:	4d18      	ldr	r5, [pc, #96]	; (223b4 <arm_mpu_init+0x9c>)
   22352:	4a19      	ldr	r2, [pc, #100]	; (223b8 <arm_mpu_init+0xa0>)
   22354:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22356:	42a6      	cmp	r6, r4
   22358:	d119      	bne.n	2238e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   2235a:	4b18      	ldr	r3, [pc, #96]	; (223bc <arm_mpu_init+0xa4>)
   2235c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   2235e:	f7ff ffc9 	bl	222f4 <arm_core_mpu_enable>
	__ASSERT(
   22362:	682b      	ldr	r3, [r5, #0]
   22364:	f3c3 2307 	ubfx	r3, r3, #8, #8
   22368:	2b10      	cmp	r3, #16
   2236a:	d00e      	beq.n	2238a <arm_mpu_init+0x72>
   2236c:	4914      	ldr	r1, [pc, #80]	; (223c0 <arm_mpu_init+0xa8>)
   2236e:	f44f 7394 	mov.w	r3, #296	; 0x128
   22372:	4a0c      	ldr	r2, [pc, #48]	; (223a4 <arm_mpu_init+0x8c>)
   22374:	480d      	ldr	r0, [pc, #52]	; (223ac <arm_mpu_init+0x94>)
   22376:	f025 faa8 	bl	478ca <printk>
   2237a:	4812      	ldr	r0, [pc, #72]	; (223c4 <arm_mpu_init+0xac>)
   2237c:	f025 faa5 	bl	478ca <printk>
   22380:	f44f 7194 	mov.w	r1, #296	; 0x128
   22384:	4807      	ldr	r0, [pc, #28]	; (223a4 <arm_mpu_init+0x8c>)
   22386:	f025 faad 	bl	478e4 <assert_post_action>
	return 0;
   2238a:	2000      	movs	r0, #0
   2238c:	e7dc      	b.n	22348 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   2238e:	6879      	ldr	r1, [r7, #4]
   22390:	4620      	mov	r0, r4
   22392:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   22396:	f7ff fead 	bl	220f4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2239a:	3401      	adds	r4, #1
   2239c:	e7db      	b.n	22356 <arm_mpu_init+0x3e>
   2239e:	bf00      	nop
   223a0:	0004aa10 	.word	0x0004aa10
   223a4:	0004e6e2 	.word	0x0004e6e2
   223a8:	00052aa7 	.word	0x00052aa7
   223ac:	0004ccf0 	.word	0x0004ccf0
   223b0:	0004e71b 	.word	0x0004e71b
   223b4:	e000ed90 	.word	0xe000ed90
   223b8:	0044ffaa 	.word	0x0044ffaa
   223bc:	2002a6e2 	.word	0x2002a6e2
   223c0:	0004e74f 	.word	0x0004e74f
   223c4:	0004e7a0 	.word	0x0004e7a0

000223c8 <arm_core_mpu_configure_static_mpu_regions>:
{
   223c8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   223ca:	4c0c      	ldr	r4, [pc, #48]	; (223fc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   223cc:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   223ce:	7822      	ldrb	r2, [r4, #0]
   223d0:	f7ff feca 	bl	22168 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   223d4:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   223d6:	3016      	adds	r0, #22
   223d8:	d10f      	bne.n	223fa <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   223da:	23cd      	movs	r3, #205	; 0xcd
   223dc:	4a08      	ldr	r2, [pc, #32]	; (22400 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   223de:	4909      	ldr	r1, [pc, #36]	; (22404 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   223e0:	4809      	ldr	r0, [pc, #36]	; (22408 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   223e2:	f025 fa72 	bl	478ca <printk>
   223e6:	4629      	mov	r1, r5
   223e8:	4808      	ldr	r0, [pc, #32]	; (2240c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   223ea:	f025 fa6e 	bl	478ca <printk>
}
   223ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   223f2:	21cd      	movs	r1, #205	; 0xcd
   223f4:	4802      	ldr	r0, [pc, #8]	; (22400 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   223f6:	f025 ba75 	b.w	478e4 <assert_post_action>
}
   223fa:	bd38      	pop	{r3, r4, r5, pc}
   223fc:	2002a6e2 	.word	0x2002a6e2
   22400:	0004e6e2 	.word	0x0004e6e2
   22404:	00052aa7 	.word	0x00052aa7
   22408:	0004ccf0 	.word	0x0004ccf0
   2240c:	0004e687 	.word	0x0004e687

00022410 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   22410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22414:	460f      	mov	r7, r1
   22416:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22418:	2600      	movs	r6, #0
   2241a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 224e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   2241e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 224e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
   22422:	4c2a      	ldr	r4, [pc, #168]	; (224cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22424:	42be      	cmp	r6, r7
   22426:	db02      	blt.n	2242e <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   22428:	b003      	add	sp, #12
   2242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   2242e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   22432:	f1bb 0f00 	cmp.w	fp, #0
   22436:	d045      	beq.n	224c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
   22438:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2243c:	4618      	mov	r0, r3
   2243e:	9301      	str	r3, [sp, #4]
   22440:	f024 fe4f 	bl	470e2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22444:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   22446:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22448:	eb0b 0003 	add.w	r0, fp, r3
   2244c:	3801      	subs	r0, #1
   2244e:	f024 fe48 	bl	470e2 <arm_cmse_mpu_region_get>
   22452:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   22454:	4285      	cmp	r5, r0
   22456:	fb03 f306 	mul.w	r3, r3, r6
   2245a:	d014      	beq.n	22486 <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   2245c:	f06f 0215 	mvn.w	r2, #21
   22460:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   22464:	23dd      	movs	r3, #221	; 0xdd
   22466:	4a1a      	ldr	r2, [pc, #104]	; (224d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   22468:	491a      	ldr	r1, [pc, #104]	; (224d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   2246a:	481b      	ldr	r0, [pc, #108]	; (224d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   2246c:	f025 fa2d 	bl	478ca <printk>
   22470:	4639      	mov	r1, r7
   22472:	481a      	ldr	r0, [pc, #104]	; (224dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   22474:	f025 fa29 	bl	478ca <printk>
   22478:	21dd      	movs	r1, #221	; 0xdd
   2247a:	4815      	ldr	r0, [pc, #84]	; (224d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
   2247c:	b003      	add	sp, #12
   2247e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   22482:	f025 ba2f 	b.w	478e4 <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
   22486:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   2248a:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   2248e:	d0e9      	beq.n	22464 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
   22490:	f89a 2000 	ldrb.w	r2, [sl]
   22494:	42aa      	cmp	r2, r5
   22496:	dde5      	ble.n	22464 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
   22498:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   2249a:	444b      	add	r3, r9
	MPU->RNR = index;
   2249c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   2249e:	68e0      	ldr	r0, [r4, #12]
   224a0:	7b19      	ldrb	r1, [r3, #12]
   224a2:	f360 0104 	bfi	r1, r0, #0, #5
   224a6:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   224a8:	6921      	ldr	r1, [r4, #16]
   224aa:	7b18      	ldrb	r0, [r3, #12]
   224ac:	0849      	lsrs	r1, r1, #1
   224ae:	f361 1047 	bfi	r0, r1, #5, #3
   224b2:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   224b4:	68e2      	ldr	r2, [r4, #12]
   224b6:	f022 021f 	bic.w	r2, r2, #31
   224ba:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   224bc:	6922      	ldr	r2, [r4, #16]
   224be:	f022 021f 	bic.w	r2, r2, #31
   224c2:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   224c4:	3601      	adds	r6, #1
   224c6:	f108 080c 	add.w	r8, r8, #12
   224ca:	e7ab      	b.n	22424 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   224cc:	e000ed90 	.word	0xe000ed90
   224d0:	0004e6e2 	.word	0x0004e6e2
   224d4:	00052aa7 	.word	0x00052aa7
   224d8:	0004ccf0 	.word	0x0004ccf0
   224dc:	0004e6b3 	.word	0x0004e6b3
   224e0:	20023c24 	.word	0x20023c24
   224e4:	2002a6e2 	.word	0x2002a6e2

000224e8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   224e8:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   224ea:	4b15      	ldr	r3, [pc, #84]	; (22540 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   224ec:	460c      	mov	r4, r1
   224ee:	781d      	ldrb	r5, [r3, #0]
   224f0:	4606      	mov	r6, r0
   224f2:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   224f4:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   224f6:	4a13      	ldr	r2, [pc, #76]	; (22544 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   224f8:	2b0f      	cmp	r3, #15
   224fa:	dd1b      	ble.n	22534 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   224fc:	4b12      	ldr	r3, [pc, #72]	; (22548 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   224fe:	1d19      	adds	r1, r3, #4
   22500:	6818      	ldr	r0, [r3, #0]
   22502:	f7ff fdf7 	bl	220f4 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   22506:	462a      	mov	r2, r5
   22508:	4621      	mov	r1, r4
   2250a:	4630      	mov	r0, r6
   2250c:	f7ff fe2c 	bl	22168 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   22510:	3016      	adds	r0, #22
   22512:	d113      	bne.n	2253c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   22514:	23ec      	movs	r3, #236	; 0xec
   22516:	4a0d      	ldr	r2, [pc, #52]	; (2254c <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   22518:	490d      	ldr	r1, [pc, #52]	; (22550 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   2251a:	480e      	ldr	r0, [pc, #56]	; (22554 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   2251c:	f025 f9d5 	bl	478ca <printk>
   22520:	4621      	mov	r1, r4
   22522:	480d      	ldr	r0, [pc, #52]	; (22558 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   22524:	f025 f9d1 	bl	478ca <printk>
}
   22528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   2252c:	21ec      	movs	r1, #236	; 0xec
   2252e:	4807      	ldr	r0, [pc, #28]	; (2254c <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   22530:	f025 b9d8 	b.w	478e4 <assert_post_action>
   22534:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   22536:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   22538:	3301      	adds	r3, #1
   2253a:	e7dd      	b.n	224f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   2253c:	bd70      	pop	{r4, r5, r6, pc}
   2253e:	bf00      	nop
   22540:	2002a6e2 	.word	0x2002a6e2
   22544:	e000ed90 	.word	0xe000ed90
   22548:	20023c24 	.word	0x20023c24
   2254c:	0004e6e2 	.word	0x0004e6e2
   22550:	00052aa7 	.word	0x00052aa7
   22554:	0004ccf0 	.word	0x0004ccf0
   22558:	0004e65a 	.word	0x0004e65a

0002255c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   2255c:	4b01      	ldr	r3, [pc, #4]	; (22564 <__stdout_hook_install+0x8>)
   2255e:	6018      	str	r0, [r3, #0]
}
   22560:	4770      	bx	lr
   22562:	bf00      	nop
   22564:	20031a74 	.word	0x20031a74

00022568 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   22568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2256a:	4606      	mov	r6, r0
   2256c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   2256e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   22570:	4f06      	ldr	r7, [pc, #24]	; (2258c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   22572:	42ac      	cmp	r4, r5
   22574:	da08      	bge.n	22588 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   22576:	683b      	ldr	r3, [r7, #0]
   22578:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2257a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   2257c:	5530      	strb	r0, [r6, r4]
   2257e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   22582:	d001      	beq.n	22588 <z_impl_zephyr_read_stdin+0x20>
   22584:	280d      	cmp	r0, #13
   22586:	d1f4      	bne.n	22572 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   22588:	4620      	mov	r0, r4
   2258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2258c:	20031a70 	.word	0x20031a70

00022590 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   22590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22594:	4606      	mov	r6, r0
   22596:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   22598:	4604      	mov	r4, r0
   2259a:	4f0a      	ldr	r7, [pc, #40]	; (225c4 <z_impl_zephyr_write_stdout+0x34>)
   2259c:	1ba3      	subs	r3, r4, r6
   2259e:	429d      	cmp	r5, r3
   225a0:	dc02      	bgt.n	225a8 <z_impl_zephyr_write_stdout+0x18>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   225a2:	4628      	mov	r0, r5
   225a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*(buf + i) == '\n') {
   225a8:	7823      	ldrb	r3, [r4, #0]
   225aa:	46a0      	mov	r8, r4
   225ac:	2b0a      	cmp	r3, #10
   225ae:	d102      	bne.n	225b6 <z_impl_zephyr_write_stdout+0x26>
			_stdout_hook('\r');
   225b0:	683b      	ldr	r3, [r7, #0]
   225b2:	200d      	movs	r0, #13
   225b4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   225b6:	683b      	ldr	r3, [r7, #0]
   225b8:	f898 0000 	ldrb.w	r0, [r8]
   225bc:	3401      	adds	r4, #1
   225be:	4798      	blx	r3
   225c0:	e7ec      	b.n	2259c <z_impl_zephyr_write_stdout+0xc>
   225c2:	bf00      	nop
   225c4:	20031a74 	.word	0x20031a74

000225c8 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   225c8:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   225ca:	2105      	movs	r1, #5
   225cc:	4801      	ldr	r0, [pc, #4]	; (225d4 <_exit+0xc>)
   225ce:	f7ff ffdf 	bl	22590 <z_impl_zephyr_write_stdout>
   225d2:	e7fe      	b.n	225d2 <_exit+0xa>
   225d4:	0004e82d 	.word	0x0004e82d

000225d8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   225d8:	b538      	push	{r3, r4, r5, lr}
   225da:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   225dc:	f04f 31ff 	mov.w	r1, #4294967295
   225e0:	480b      	ldr	r0, [pc, #44]	; (22610 <_sbrk+0x38>)
   225e2:	f024 feb6 	bl	47352 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   225e6:	4a0b      	ldr	r2, [pc, #44]	; (22614 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   225e8:	490b      	ldr	r1, [pc, #44]	; (22618 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   225ea:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   225ec:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   225f0:	4425      	add	r5, r4
   225f2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   225f6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   225f8:	bf2c      	ite	cs
   225fa:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   225fe:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   22600:	4803      	ldr	r0, [pc, #12]	; (22610 <_sbrk+0x38>)
		heap_sz += count;
   22602:	bf38      	it	cc
   22604:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   22606:	f024 fe9f 	bl	47348 <sys_sem_give>

	return ret;
}
   2260a:	4620      	mov	r0, r4
   2260c:	bd38      	pop	{r3, r4, r5, pc}
   2260e:	bf00      	nop
   22610:	200324f0 	.word	0x200324f0
   22614:	20023c38 	.word	0x20023c38
   22618:	200325bc 	.word	0x200325bc

0002261c <close>:
{
   2261c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2261e:	4c10      	ldr	r4, [pc, #64]	; (22660 <close+0x44>)
{
   22620:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   22622:	6823      	ldr	r3, [r4, #0]
   22624:	b94b      	cbnz	r3, 2263a <close+0x1e>
   22626:	490f      	ldr	r1, [pc, #60]	; (22664 <close+0x48>)
   22628:	480f      	ldr	r0, [pc, #60]	; (22668 <close+0x4c>)
   2262a:	2321      	movs	r3, #33	; 0x21
   2262c:	4a0f      	ldr	r2, [pc, #60]	; (2266c <close+0x50>)
   2262e:	f025 f94c 	bl	478ca <printk>
   22632:	2121      	movs	r1, #33	; 0x21
   22634:	480d      	ldr	r0, [pc, #52]	; (2266c <close+0x50>)
   22636:	f025 f955 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2263a:	6823      	ldr	r3, [r4, #0]
   2263c:	685b      	ldr	r3, [r3, #4]
   2263e:	b94b      	cbnz	r3, 22654 <close+0x38>
   22640:	490b      	ldr	r1, [pc, #44]	; (22670 <close+0x54>)
   22642:	4809      	ldr	r0, [pc, #36]	; (22668 <close+0x4c>)
   22644:	2322      	movs	r3, #34	; 0x22
   22646:	4a09      	ldr	r2, [pc, #36]	; (2266c <close+0x50>)
   22648:	f025 f93f 	bl	478ca <printk>
   2264c:	2122      	movs	r1, #34	; 0x22
   2264e:	4807      	ldr	r0, [pc, #28]	; (2266c <close+0x50>)
   22650:	f025 f948 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   22654:	6823      	ldr	r3, [r4, #0]
   22656:	4628      	mov	r0, r5
}
   22658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2265c:	685b      	ldr	r3, [r3, #4]
   2265e:	4718      	bx	r3
   22660:	20023bf8 	.word	0x20023bf8
   22664:	0004ce24 	.word	0x0004ce24
   22668:	0004ccf0 	.word	0x0004ccf0
   2266c:	0004cdf3 	.word	0x0004cdf3
   22670:	0004e833 	.word	0x0004e833

00022674 <send.constprop.0>:
	__ASSERT_NO_MSG(socket_ops->recvfrom);

	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
}

static inline ssize_t send(int sock, const void *buf, size_t len,
   22674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   22678:	4c13      	ldr	r4, [pc, #76]	; (226c8 <send.constprop.0+0x54>)
static inline ssize_t send(int sock, const void *buf, size_t len,
   2267a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2267c:	6823      	ldr	r3, [r4, #0]
static inline ssize_t send(int sock, const void *buf, size_t len,
   2267e:	460e      	mov	r6, r1
   22680:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   22682:	b94b      	cbnz	r3, 22698 <send.constprop.0+0x24>
   22684:	4911      	ldr	r1, [pc, #68]	; (226cc <send.constprop.0+0x58>)
   22686:	4812      	ldr	r0, [pc, #72]	; (226d0 <send.constprop.0+0x5c>)
   22688:	237e      	movs	r3, #126	; 0x7e
   2268a:	4a12      	ldr	r2, [pc, #72]	; (226d4 <send.constprop.0+0x60>)
   2268c:	f025 f91d 	bl	478ca <printk>
   22690:	217e      	movs	r1, #126	; 0x7e
   22692:	4810      	ldr	r0, [pc, #64]	; (226d4 <send.constprop.0+0x60>)
   22694:	f025 f926 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   22698:	6823      	ldr	r3, [r4, #0]
   2269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2269c:	b94b      	cbnz	r3, 226b2 <send.constprop.0+0x3e>
   2269e:	490e      	ldr	r1, [pc, #56]	; (226d8 <send.constprop.0+0x64>)
   226a0:	480b      	ldr	r0, [pc, #44]	; (226d0 <send.constprop.0+0x5c>)
   226a2:	237f      	movs	r3, #127	; 0x7f
   226a4:	4a0b      	ldr	r2, [pc, #44]	; (226d4 <send.constprop.0+0x60>)
   226a6:	f025 f910 	bl	478ca <printk>
   226aa:	217f      	movs	r1, #127	; 0x7f
   226ac:	4809      	ldr	r0, [pc, #36]	; (226d4 <send.constprop.0+0x60>)
   226ae:	f025 f919 	bl	478e4 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   226b2:	6823      	ldr	r3, [r4, #0]
   226b4:	463a      	mov	r2, r7
   226b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   226b8:	4631      	mov	r1, r6
   226ba:	4628      	mov	r0, r5
   226bc:	46a4      	mov	ip, r4
}
   226be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return socket_ops->send(sock, buf, len, flags);
   226c2:	2300      	movs	r3, #0
   226c4:	4760      	bx	ip
   226c6:	bf00      	nop
   226c8:	20023bf8 	.word	0x20023bf8
   226cc:	0004ce24 	.word	0x0004ce24
   226d0:	0004ccf0 	.word	0x0004ccf0
   226d4:	0004cdf3 	.word	0x0004cdf3
   226d8:	0004e9c1 	.word	0x0004e9c1

000226dc <recv.constprop.1>:
static inline ssize_t recv(int sock, void *buf, size_t max_len,
   226dc:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   226de:	4c13      	ldr	r4, [pc, #76]	; (2272c <recv.constprop.1+0x50>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
   226e0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   226e2:	6823      	ldr	r3, [r4, #0]
static inline ssize_t recv(int sock, void *buf, size_t max_len,
   226e4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(socket_ops);
   226e6:	b94b      	cbnz	r3, 226fc <recv.constprop.1+0x20>
   226e8:	4911      	ldr	r1, [pc, #68]	; (22730 <recv.constprop.1+0x54>)
   226ea:	4812      	ldr	r0, [pc, #72]	; (22734 <recv.constprop.1+0x58>)
   226ec:	2369      	movs	r3, #105	; 0x69
   226ee:	4a12      	ldr	r2, [pc, #72]	; (22738 <recv.constprop.1+0x5c>)
   226f0:	f025 f8eb 	bl	478ca <printk>
   226f4:	2169      	movs	r1, #105	; 0x69
   226f6:	4810      	ldr	r0, [pc, #64]	; (22738 <recv.constprop.1+0x5c>)
   226f8:	f025 f8f4 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   226fc:	6823      	ldr	r3, [r4, #0]
   226fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22700:	b94b      	cbnz	r3, 22716 <recv.constprop.1+0x3a>
   22702:	490e      	ldr	r1, [pc, #56]	; (2273c <recv.constprop.1+0x60>)
   22704:	480b      	ldr	r0, [pc, #44]	; (22734 <recv.constprop.1+0x58>)
   22706:	236a      	movs	r3, #106	; 0x6a
   22708:	4a0b      	ldr	r2, [pc, #44]	; (22738 <recv.constprop.1+0x5c>)
   2270a:	f025 f8de 	bl	478ca <printk>
   2270e:	216a      	movs	r1, #106	; 0x6a
   22710:	4809      	ldr	r0, [pc, #36]	; (22738 <recv.constprop.1+0x5c>)
   22712:	f025 f8e7 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   22716:	6823      	ldr	r3, [r4, #0]
   22718:	4631      	mov	r1, r6
   2271a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2271c:	4628      	mov	r0, r5
   2271e:	46a4      	mov	ip, r4
}
   22720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->recv(sock, buf, max_len, flags);
   22724:	2300      	movs	r3, #0
   22726:	2280      	movs	r2, #128	; 0x80
   22728:	4760      	bx	ip
   2272a:	bf00      	nop
   2272c:	20023bf8 	.word	0x20023bf8
   22730:	0004ce24 	.word	0x0004ce24
   22734:	0004ccf0 	.word	0x0004ccf0
   22738:	0004cdf3 	.word	0x0004cdf3
   2273c:	0004e9b0 	.word	0x0004e9b0

00022740 <pca20035_board_init>:
#endif
	return 0;
}

static int pca20035_board_init(struct device *dev)
{
   22740:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(socket_ops);
   22742:	4c67      	ldr	r4, [pc, #412]	; (228e0 <pca20035_board_init+0x1a0>)
   22744:	b0a1      	sub	sp, #132	; 0x84
   22746:	6823      	ldr	r3, [r4, #0]
   22748:	b94b      	cbnz	r3, 2275e <pca20035_board_init+0x1e>
   2274a:	4966      	ldr	r1, [pc, #408]	; (228e4 <pca20035_board_init+0x1a4>)
   2274c:	4866      	ldr	r0, [pc, #408]	; (228e8 <pca20035_board_init+0x1a8>)
   2274e:	2319      	movs	r3, #25
   22750:	4a66      	ldr	r2, [pc, #408]	; (228ec <pca20035_board_init+0x1ac>)
   22752:	f025 f8ba 	bl	478ca <printk>
   22756:	2119      	movs	r1, #25
   22758:	4864      	ldr	r0, [pc, #400]	; (228ec <pca20035_board_init+0x1ac>)
   2275a:	f025 f8c3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2275e:	6823      	ldr	r3, [r4, #0]
   22760:	681b      	ldr	r3, [r3, #0]
   22762:	b94b      	cbnz	r3, 22778 <pca20035_board_init+0x38>
   22764:	4962      	ldr	r1, [pc, #392]	; (228f0 <pca20035_board_init+0x1b0>)
   22766:	4860      	ldr	r0, [pc, #384]	; (228e8 <pca20035_board_init+0x1a8>)
   22768:	231a      	movs	r3, #26
   2276a:	4a60      	ldr	r2, [pc, #384]	; (228ec <pca20035_board_init+0x1ac>)
   2276c:	f025 f8ad 	bl	478ca <printk>
   22770:	211a      	movs	r1, #26
   22772:	485e      	ldr	r0, [pc, #376]	; (228ec <pca20035_board_init+0x1ac>)
   22774:	f025 f8b6 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   22778:	6823      	ldr	r3, [r4, #0]
   2277a:	f240 2201 	movw	r2, #513	; 0x201
   2277e:	681b      	ldr	r3, [r3, #0]
   22780:	2100      	movs	r1, #0
   22782:	2066      	movs	r0, #102	; 0x66
   22784:	4798      	blx	r3
	if (at_socket_fd == -1) {
   22786:	1c43      	adds	r3, r0, #1
   22788:	4604      	mov	r4, r0
   2278a:	d123      	bne.n	227d4 <pca20035_board_init+0x94>
		LOG_ERR("AT socket could not be opened");
   2278c:	2301      	movs	r3, #1
   2278e:	f04f 0000 	mov.w	r0, #0
   22792:	4a58      	ldr	r2, [pc, #352]	; (228f4 <pca20035_board_init+0x1b4>)
   22794:	f363 0002 	bfi	r0, r3, #0, #3
   22798:	4b57      	ldr	r3, [pc, #348]	; (228f8 <pca20035_board_init+0x1b8>)
   2279a:	f36f 00c5 	bfc	r0, #3, #3
   2279e:	1a9b      	subs	r3, r3, r2
   227a0:	08db      	lsrs	r3, r3, #3
   227a2:	f363 108f 	bfi	r0, r3, #6, #10
   227a6:	4955      	ldr	r1, [pc, #340]	; (228fc <pca20035_board_init+0x1bc>)
   227a8:	f025 f8ac 	bl	47904 <log_string_sync>
		return -EFAULT;
   227ac:	f06f 050d 	mvn.w	r5, #13
	int err;

	err = pca20035_magpio_configure();
	if (err) {
		LOG_ERR("pca20035_magpio_configure failed with error: %d", err);
   227b0:	2301      	movs	r3, #1
   227b2:	f04f 0000 	mov.w	r0, #0
   227b6:	4a4f      	ldr	r2, [pc, #316]	; (228f4 <pca20035_board_init+0x1b4>)
   227b8:	f363 0002 	bfi	r0, r3, #0, #3
   227bc:	4b4e      	ldr	r3, [pc, #312]	; (228f8 <pca20035_board_init+0x1b8>)
   227be:	f36f 00c5 	bfc	r0, #3, #3
   227c2:	1a9b      	subs	r3, r3, r2
   227c4:	08db      	lsrs	r3, r3, #3
   227c6:	f363 108f 	bfi	r0, r3, #6, #10
   227ca:	462a      	mov	r2, r5
   227cc:	494c      	ldr	r1, [pc, #304]	; (22900 <pca20035_board_init+0x1c0>)
   227ce:	f025 f899 	bl	47904 <log_string_sync>
		return err;
   227d2:	e082      	b.n	228da <pca20035_board_init+0x19a>
	buffer = send(at_socket_fd, AT_CMD_TRACE, AT_CMD_LEN(AT_CMD_TRACE), 0);
   227d4:	2210      	movs	r2, #16
   227d6:	494b      	ldr	r1, [pc, #300]	; (22904 <pca20035_board_init+0x1c4>)
   227d8:	f7ff ff4c 	bl	22674 <send.constprop.0>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   227dc:	2810      	cmp	r0, #16
   227de:	d01f      	beq.n	22820 <pca20035_board_init+0xe0>
		LOG_ERR("XMODEMTRACE command failed");
   227e0:	2301      	movs	r3, #1
   227e2:	f04f 0000 	mov.w	r0, #0
   227e6:	4a43      	ldr	r2, [pc, #268]	; (228f4 <pca20035_board_init+0x1b4>)
   227e8:	f363 0002 	bfi	r0, r3, #0, #3
   227ec:	4b42      	ldr	r3, [pc, #264]	; (228f8 <pca20035_board_init+0x1b8>)
   227ee:	f36f 00c5 	bfc	r0, #3, #3
   227f2:	1a9b      	subs	r3, r3, r2
   227f4:	08db      	lsrs	r3, r3, #3
   227f6:	f363 108f 	bfi	r0, r3, #6, #10
   227fa:	4943      	ldr	r1, [pc, #268]	; (22908 <pca20035_board_init+0x1c8>)
   227fc:	f025 f882 	bl	47904 <log_string_sync>
		close(at_socket_fd);
   22800:	4620      	mov	r0, r4
   22802:	f7ff ff0b 	bl	2261c <close>
		__ASSERT_NO_MSG(false);
   22806:	4941      	ldr	r1, [pc, #260]	; (2290c <pca20035_board_init+0x1cc>)
   22808:	2329      	movs	r3, #41	; 0x29
   2280a:	4a41      	ldr	r2, [pc, #260]	; (22910 <pca20035_board_init+0x1d0>)
   2280c:	4836      	ldr	r0, [pc, #216]	; (228e8 <pca20035_board_init+0x1a8>)
   2280e:	f025 f85c 	bl	478ca <printk>
   22812:	2129      	movs	r1, #41	; 0x29
		__ASSERT_NO_MSG(false);
   22814:	483e      	ldr	r0, [pc, #248]	; (22910 <pca20035_board_init+0x1d0>)
   22816:	f025 f865 	bl	478e4 <assert_post_action>
		return -EIO;
   2281a:	f06f 0504 	mvn.w	r5, #4
   2281e:	e7c7      	b.n	227b0 <pca20035_board_init+0x70>
	buffer = recv(at_socket_fd, read_buffer, AT_CMD_MAX_READ_LENGTH, 0);
   22820:	4669      	mov	r1, sp
   22822:	4620      	mov	r0, r4
   22824:	f7ff ff5a 	bl	226dc <recv.constprop.1>
	if ((buffer < 2) ||
   22828:	2801      	cmp	r0, #1
   2282a:	dc1a      	bgt.n	22862 <pca20035_board_init+0x122>
		LOG_ERR("XMODEMTRACE received unexpected response");
   2282c:	2301      	movs	r3, #1
   2282e:	f04f 0000 	mov.w	r0, #0
   22832:	4a30      	ldr	r2, [pc, #192]	; (228f4 <pca20035_board_init+0x1b4>)
   22834:	f363 0002 	bfi	r0, r3, #0, #3
   22838:	4b2f      	ldr	r3, [pc, #188]	; (228f8 <pca20035_board_init+0x1b8>)
   2283a:	f36f 00c5 	bfc	r0, #3, #3
   2283e:	1a9b      	subs	r3, r3, r2
   22840:	08db      	lsrs	r3, r3, #3
   22842:	f363 108f 	bfi	r0, r3, #6, #10
   22846:	4933      	ldr	r1, [pc, #204]	; (22914 <pca20035_board_init+0x1d4>)
   22848:	f025 f85c 	bl	47904 <log_string_sync>
		close(at_socket_fd);
   2284c:	4620      	mov	r0, r4
   2284e:	f7ff fee5 	bl	2261c <close>
		__ASSERT_NO_MSG(false);
   22852:	492e      	ldr	r1, [pc, #184]	; (2290c <pca20035_board_init+0x1cc>)
   22854:	2333      	movs	r3, #51	; 0x33
   22856:	4a2e      	ldr	r2, [pc, #184]	; (22910 <pca20035_board_init+0x1d0>)
   22858:	4823      	ldr	r0, [pc, #140]	; (228e8 <pca20035_board_init+0x1a8>)
   2285a:	f025 f836 	bl	478ca <printk>
   2285e:	2133      	movs	r1, #51	; 0x33
   22860:	e7d8      	b.n	22814 <pca20035_board_init+0xd4>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   22862:	2201      	movs	r2, #1
   22864:	4669      	mov	r1, sp
   22866:	482c      	ldr	r0, [pc, #176]	; (22918 <pca20035_board_init+0x1d8>)
   22868:	f01e fba4 	bl	40fb4 <memcmp>
	if ((buffer < 2) ||
   2286c:	4605      	mov	r5, r0
   2286e:	2800      	cmp	r0, #0
   22870:	d1dc      	bne.n	2282c <pca20035_board_init+0xec>
	buffer = send(at_socket_fd, AT_CMD_MAGPIO,
   22872:	225c      	movs	r2, #92	; 0x5c
   22874:	4929      	ldr	r1, [pc, #164]	; (2291c <pca20035_board_init+0x1dc>)
   22876:	4620      	mov	r0, r4
   22878:	f7ff fefc 	bl	22674 <send.constprop.0>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   2287c:	285c      	cmp	r0, #92	; 0x5c
   2287e:	d013      	beq.n	228a8 <pca20035_board_init+0x168>
		LOG_ERR("MAGPIO command failed");
   22880:	f04f 0000 	mov.w	r0, #0
   22884:	2301      	movs	r3, #1
   22886:	f363 0002 	bfi	r0, r3, #0, #3
   2288a:	f365 00c5 	bfi	r0, r5, #3, #3
   2288e:	4a19      	ldr	r2, [pc, #100]	; (228f4 <pca20035_board_init+0x1b4>)
   22890:	4b19      	ldr	r3, [pc, #100]	; (228f8 <pca20035_board_init+0x1b8>)
   22892:	4923      	ldr	r1, [pc, #140]	; (22920 <pca20035_board_init+0x1e0>)
   22894:	1a9b      	subs	r3, r3, r2
   22896:	08db      	lsrs	r3, r3, #3
   22898:	f363 108f 	bfi	r0, r3, #6, #10
   2289c:	f025 f832 	bl	47904 <log_string_sync>
		close(at_socket_fd);
   228a0:	4620      	mov	r0, r4
   228a2:	f7ff febb 	bl	2261c <close>
   228a6:	e7b8      	b.n	2281a <pca20035_board_init+0xda>
	buffer = recv(at_socket_fd, read_buffer, AT_CMD_MAX_READ_LENGTH, 0);
   228a8:	4669      	mov	r1, sp
   228aa:	4620      	mov	r0, r4
   228ac:	f7ff ff16 	bl	226dc <recv.constprop.1>
	if ((buffer < 2) ||
   228b0:	2801      	cmp	r0, #1
   228b2:	dc07      	bgt.n	228c4 <pca20035_board_init+0x184>
		LOG_ERR("MAGPIO command failed");
   228b4:	f04f 0000 	mov.w	r0, #0
   228b8:	2301      	movs	r3, #1
   228ba:	f363 0002 	bfi	r0, r3, #0, #3
   228be:	f36f 00c5 	bfc	r0, #3, #3
   228c2:	e7e4      	b.n	2288e <pca20035_board_init+0x14e>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   228c4:	2201      	movs	r2, #1
   228c6:	4669      	mov	r1, sp
   228c8:	4813      	ldr	r0, [pc, #76]	; (22918 <pca20035_board_init+0x1d8>)
   228ca:	f01e fb73 	bl	40fb4 <memcmp>
	if ((buffer < 2) ||
   228ce:	4605      	mov	r5, r0
   228d0:	2800      	cmp	r0, #0
   228d2:	d1ef      	bne.n	228b4 <pca20035_board_init+0x174>
	close(at_socket_fd);
   228d4:	4620      	mov	r0, r4
   228d6:	f7ff fea1 	bl	2261c <close>
	}

	return 0;
}
   228da:	4628      	mov	r0, r5
   228dc:	b021      	add	sp, #132	; 0x84
   228de:	bd30      	pop	{r4, r5, pc}
   228e0:	20023bf8 	.word	0x20023bf8
   228e4:	0004ce24 	.word	0x0004ce24
   228e8:	0004ccf0 	.word	0x0004ccf0
   228ec:	0004cdf3 	.word	0x0004cdf3
   228f0:	0004e845 	.word	0x0004e845
   228f4:	0004a688 	.word	0x0004a688
   228f8:	0004a6c8 	.word	0x0004a6c8
   228fc:	0004e858 	.word	0x0004e858
   22900:	0004e980 	.word	0x0004e980
   22904:	0004e876 	.word	0x0004e876
   22908:	0004e887 	.word	0x0004e887
   2290c:	00052aa7 	.word	0x00052aa7
   22910:	0004e8a2 	.word	0x0004e8a2
   22914:	0004e8e1 	.word	0x0004e8e1
   22918:	0004e90a 	.word	0x0004e90a
   2291c:	0004e90d 	.word	0x0004e90d
   22920:	0004e96a 	.word	0x0004e96a

00022924 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   22924:	b538      	push	{r3, r4, r5, lr}
   22926:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   22928:	4604      	mov	r4, r0
   2292a:	b958      	cbnz	r0, 22944 <net_if_flag_is_set+0x20>
   2292c:	4909      	ldr	r1, [pc, #36]	; (22954 <net_if_flag_is_set+0x30>)
   2292e:	480a      	ldr	r0, [pc, #40]	; (22958 <net_if_flag_is_set+0x34>)
   22930:	f240 2311 	movw	r3, #529	; 0x211
   22934:	4a09      	ldr	r2, [pc, #36]	; (2295c <net_if_flag_is_set+0x38>)
   22936:	f024 ffc8 	bl	478ca <printk>
   2293a:	f240 2111 	movw	r1, #529	; 0x211
   2293e:	4807      	ldr	r0, [pc, #28]	; (2295c <net_if_flag_is_set+0x38>)
   22940:	f024 ffd0 	bl	478e4 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22944:	6823      	ldr	r3, [r4, #0]
   22946:	330c      	adds	r3, #12
   22948:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2294c:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   2294e:	f000 0001 	and.w	r0, r0, #1
   22952:	bd38      	pop	{r3, r4, r5, pc}
   22954:	0004ea13 	.word	0x0004ea13
   22958:	0004ccf0 	.word	0x0004ccf0
   2295c:	0004e9ea 	.word	0x0004e9ea

00022960 <net_if_flag_set.constprop.23>:
static inline void net_if_flag_set(struct net_if *iface,
   22960:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   22962:	4604      	mov	r4, r0
   22964:	b958      	cbnz	r0, 2297e <net_if_flag_set.constprop.23+0x1e>
   22966:	490b      	ldr	r1, [pc, #44]	; (22994 <net_if_flag_set.constprop.23+0x34>)
   22968:	480b      	ldr	r0, [pc, #44]	; (22998 <net_if_flag_set.constprop.23+0x38>)
   2296a:	f240 13e3 	movw	r3, #483	; 0x1e3
   2296e:	4a0b      	ldr	r2, [pc, #44]	; (2299c <net_if_flag_set.constprop.23+0x3c>)
   22970:	f024 ffab 	bl	478ca <printk>
   22974:	f240 11e3 	movw	r1, #483	; 0x1e3
   22978:	4808      	ldr	r0, [pc, #32]	; (2299c <net_if_flag_set.constprop.23+0x3c>)
   2297a:	f024 ffb3 	bl	478e4 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2297e:	6823      	ldr	r3, [r4, #0]
   22980:	330c      	adds	r3, #12
   22982:	e8d3 2fef 	ldaex	r2, [r3]
   22986:	f042 0201 	orr.w	r2, r2, #1
   2298a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2298e:	2900      	cmp	r1, #0
   22990:	d1f7      	bne.n	22982 <net_if_flag_set.constprop.23+0x22>
}
   22992:	bd10      	pop	{r4, pc}
   22994:	0004ea13 	.word	0x0004ea13
   22998:	0004ccf0 	.word	0x0004ccf0
   2299c:	0004e9ea 	.word	0x0004e9ea

000229a0 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   229a0:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   229a2:	2100      	movs	r1, #0
{
   229a4:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   229a6:	f7ff ffbd 	bl	22924 <net_if_flag_is_set>
   229aa:	b928      	cbnz	r0, 229b8 <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
   229ac:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   229ae:	7e9a      	ldrb	r2, [r3, #26]
   229b0:	b122      	cbz	r2, 229bc <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   229b2:	4628      	mov	r0, r5
   229b4:	f7ff ffd4 	bl	22960 <net_if_flag_set.constprop.23>
		return 0;
   229b8:	2000      	movs	r0, #0
   229ba:	e01f      	b.n	229fc <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
   229bc:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   229be:	b9ab      	cbnz	r3, 229ec <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   229c0:	682b      	ldr	r3, [r5, #0]
   229c2:	691b      	ldr	r3, [r3, #16]
   229c4:	b95b      	cbnz	r3, 229de <net_if_up+0x3e>
   229c6:	490e      	ldr	r1, [pc, #56]	; (22a00 <net_if_up+0x60>)
   229c8:	480e      	ldr	r0, [pc, #56]	; (22a04 <net_if_up+0x64>)
   229ca:	f640 5389 	movw	r3, #3465	; 0xd89
   229ce:	4a0e      	ldr	r2, [pc, #56]	; (22a08 <net_if_up+0x68>)
   229d0:	f024 ff7b 	bl	478ca <printk>
   229d4:	f640 5189 	movw	r1, #3465	; 0xd89
   229d8:	480b      	ldr	r0, [pc, #44]	; (22a08 <net_if_up+0x68>)
   229da:	f024 ff83 	bl	478e4 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   229de:	4628      	mov	r0, r5
   229e0:	f7ff ffbe 	bl	22960 <net_if_flag_set.constprop.23>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   229e4:	4628      	mov	r0, r5
   229e6:	f025 f9a0 	bl	47d2a <l2_flags_get>
   229ea:	e7e5      	b.n	229b8 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   229ec:	689b      	ldr	r3, [r3, #8]
   229ee:	2b00      	cmp	r3, #0
   229f0:	d0e6      	beq.n	229c0 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
   229f2:	2101      	movs	r1, #1
   229f4:	4628      	mov	r0, r5
   229f6:	4798      	blx	r3
	if (status < 0) {
   229f8:	2800      	cmp	r0, #0
   229fa:	dae1      	bge.n	229c0 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   229fc:	bd38      	pop	{r3, r4, r5, pc}
   229fe:	bf00      	nop
   22a00:	0004ea19 	.word	0x0004ea19
   22a04:	0004ccf0 	.word	0x0004ccf0
   22a08:	0004ea4a 	.word	0x0004ea4a

00022a0c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   22a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a0e:	4e09      	ldr	r6, [pc, #36]	; (22a34 <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   22a10:	2400      	movs	r4, #0
   22a12:	4637      	mov	r7, r6
   22a14:	4d08      	ldr	r5, [pc, #32]	; (22a38 <net_if_init+0x2c>)
   22a16:	1bad      	subs	r5, r5, r6
   22a18:	42ac      	cmp	r4, r5
   22a1a:	eb06 0004 	add.w	r0, r6, r4
   22a1e:	d100      	bne.n	22a22 <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   22a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   22a22:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   22a24:	681b      	ldr	r3, [r3, #0]
   22a26:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   22a28:	b113      	cbz	r3, 22a30 <net_if_init+0x24>
   22a2a:	681b      	ldr	r3, [r3, #0]
   22a2c:	b103      	cbz	r3, 22a30 <net_if_init+0x24>
	api->init(iface);
   22a2e:	4798      	blx	r3
   22a30:	3420      	adds	r4, #32
   22a32:	e7f1      	b.n	22a18 <net_if_init+0xc>
   22a34:	20032580 	.word	0x20032580
   22a38:	200325a0 	.word	0x200325a0

00022a3c <net_if_post_init>:

void net_if_post_init(void)
{
   22a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   22a3e:	2400      	movs	r4, #0
   22a40:	4f08      	ldr	r7, [pc, #32]	; (22a64 <net_if_post_init+0x28>)
   22a42:	4d09      	ldr	r5, [pc, #36]	; (22a68 <net_if_post_init+0x2c>)
   22a44:	1bed      	subs	r5, r5, r7
   22a46:	42ac      	cmp	r4, r5
   22a48:	eb04 0607 	add.w	r6, r4, r7
   22a4c:	d100      	bne.n	22a50 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   22a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   22a50:	2103      	movs	r1, #3
   22a52:	4630      	mov	r0, r6
   22a54:	f7ff ff66 	bl	22924 <net_if_flag_is_set>
   22a58:	b910      	cbnz	r0, 22a60 <net_if_post_init+0x24>
			net_if_up(iface);
   22a5a:	4630      	mov	r0, r6
   22a5c:	f7ff ffa0 	bl	229a0 <net_if_up>
   22a60:	3420      	adds	r4, #32
   22a62:	e7f0      	b.n	22a46 <net_if_post_init+0xa>
   22a64:	20032580 	.word	0x20032580
   22a68:	200325a0 	.word	0x200325a0

00022a6c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   22a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   22a70:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   22a72:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   22a76:	4b3b      	ldr	r3, [pc, #236]	; (22b64 <connect_request_encode+0xf8>)
   22a78:	4a3b      	ldr	r2, [pc, #236]	; (22b68 <connect_request_encode+0xfc>)
{
   22a7a:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   22a7c:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   22a80:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   22a82:	2804      	cmp	r0, #4
   22a84:	bf0c      	ite	eq
   22a86:	4610      	moveq	r0, r2
   22a88:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   22a8a:	600f      	str	r7, [r1, #0]
{
   22a8c:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   22a8e:	f025 fa1e 	bl	47ece <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   22a92:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   22a96:	4603      	mov	r3, r0
   22a98:	b938      	cbnz	r0, 22aaa <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   22a9a:	e9d4 2000 	ldrd	r2, r0, [r4]
   22a9e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   22aa0:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   22aa4:	d104      	bne.n	22ab0 <connect_request_encode+0x44>
		return -ENOMEM;
   22aa6:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   22aaa:	4618      	mov	r0, r3
   22aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   22ab0:	1c50      	adds	r0, r2, #1
   22ab2:	6020      	str	r0, [r4, #0]
   22ab4:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   22ab6:	e9d4 8200 	ldrd	r8, r2, [r4]
   22aba:	4542      	cmp	r2, r8
   22abc:	d0f3      	beq.n	22aa6 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   22abe:	f108 0201 	add.w	r2, r8, #1
   22ac2:	6022      	str	r2, [r4, #0]
   22ac4:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   22ac8:	4621      	mov	r1, r4
   22aca:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   22ace:	f025 f9ec 	bl	47eaa <pack_uint16>
	if (err_code != 0) {
   22ad2:	4603      	mov	r3, r0
   22ad4:	2800      	cmp	r0, #0
   22ad6:	d1e8      	bne.n	22aaa <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   22ad8:	f106 0044 	add.w	r0, r6, #68	; 0x44
   22adc:	f025 f9f7 	bl	47ece <pack_utf8_str>
	if (err_code != 0) {
   22ae0:	4603      	mov	r3, r0
   22ae2:	2800      	cmp	r0, #0
   22ae4:	d1e1      	bne.n	22aaa <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   22ae6:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   22ae8:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   22aea:	b1d8      	cbz	r0, 22b24 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   22aec:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   22af0:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   22af4:	f003 0301 	and.w	r3, r3, #1
   22af8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   22afc:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   22afe:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   22b00:	00db      	lsls	r3, r3, #3
   22b02:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   22b06:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   22b08:	f025 f9e1 	bl	47ece <pack_utf8_str>
		if (err_code != 0) {
   22b0c:	4603      	mov	r3, r0
   22b0e:	2800      	cmp	r0, #0
   22b10:	d1cb      	bne.n	22aaa <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   22b12:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   22b14:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   22b16:	b313      	cbz	r3, 22b5e <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   22b18:	4618      	mov	r0, r3
   22b1a:	f025 f9d8 	bl	47ece <pack_utf8_str>
			if (err_code != 0) {
   22b1e:	4603      	mov	r3, r0
   22b20:	2800      	cmp	r0, #0
   22b22:	d1c2      	bne.n	22aaa <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   22b24:	6d30      	ldr	r0, [r6, #80]	; 0x50
   22b26:	b138      	cbz	r0, 22b38 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   22b28:	4621      	mov	r1, r4
   22b2a:	f025 f9d0 	bl	47ece <pack_utf8_str>
		if (err_code != 0) {
   22b2e:	4603      	mov	r3, r0
   22b30:	2800      	cmp	r0, #0
   22b32:	d1ba      	bne.n	22aaa <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   22b34:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   22b38:	6d70      	ldr	r0, [r6, #84]	; 0x54
   22b3a:	b138      	cbz	r0, 22b4c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   22b3c:	4621      	mov	r1, r4
   22b3e:	f025 f9c6 	bl	47ece <pack_utf8_str>
		if (err_code != 0) {
   22b42:	4603      	mov	r3, r0
   22b44:	2800      	cmp	r0, #0
   22b46:	d1b0      	bne.n	22aaa <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   22b48:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   22b4c:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   22b50:	4622      	mov	r2, r4
   22b52:	4639      	mov	r1, r7
}
   22b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   22b58:	2010      	movs	r0, #16
   22b5a:	f025 b9d3 	b.w	47f04 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   22b5e:	f025 f9a4 	bl	47eaa <pack_uint16>
   22b62:	e7dc      	b.n	22b1e <connect_request_encode+0xb2>
   22b64:	0004ab58 	.word	0x0004ab58
   22b68:	0004ab60 	.word	0x0004ab60

00022b6c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   22b6c:	e9d0 2300 	ldrd	r2, r3, [r0]
   22b70:	1a9b      	subs	r3, r3, r2
   22b72:	2b01      	cmp	r3, #1
   22b74:	bf81      	itttt	hi
   22b76:	4b05      	ldrhi	r3, [pc, #20]	; (22b8c <disconnect_encode+0x20>)
   22b78:	881b      	ldrhhi	r3, [r3, #0]
   22b7a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   22b7c:	6803      	ldrhi	r3, [r0, #0]
   22b7e:	bf83      	ittte	hi
   22b80:	3302      	addhi	r3, #2
   22b82:	6043      	strhi	r3, [r0, #4]

	return 0;
   22b84:	2000      	movhi	r0, #0
		return -ENOMEM;
   22b86:	f06f 000b 	mvnls.w	r0, #11
}
   22b8a:	4770      	bx	lr
   22b8c:	0004ea75 	.word	0x0004ea75

00022b90 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   22b90:	e9d0 2300 	ldrd	r2, r3, [r0]
   22b94:	1a9b      	subs	r3, r3, r2
   22b96:	2b01      	cmp	r3, #1
   22b98:	bf81      	itttt	hi
   22b9a:	4b05      	ldrhi	r3, [pc, #20]	; (22bb0 <ping_request_encode+0x20>)
   22b9c:	881b      	ldrhhi	r3, [r3, #0]
   22b9e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   22ba0:	6803      	ldrhi	r3, [r0, #0]
   22ba2:	bf83      	ittte	hi
   22ba4:	3302      	addhi	r3, #2
   22ba6:	6043      	strhi	r3, [r0, #4]

	return 0;
   22ba8:	2000      	movhi	r0, #0
		return -ENOMEM;
   22baa:	f06f 000b 	mvnls.w	r0, #11
}
   22bae:	4770      	bx	lr
   22bb0:	0004ea81 	.word	0x0004ea81

00022bb4 <close>:
{
   22bb4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   22bb6:	4c10      	ldr	r4, [pc, #64]	; (22bf8 <close+0x44>)
{
   22bb8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   22bba:	6823      	ldr	r3, [r4, #0]
   22bbc:	b94b      	cbnz	r3, 22bd2 <close+0x1e>
   22bbe:	490f      	ldr	r1, [pc, #60]	; (22bfc <close+0x48>)
   22bc0:	480f      	ldr	r0, [pc, #60]	; (22c00 <close+0x4c>)
   22bc2:	2321      	movs	r3, #33	; 0x21
   22bc4:	4a0f      	ldr	r2, [pc, #60]	; (22c04 <close+0x50>)
   22bc6:	f024 fe80 	bl	478ca <printk>
   22bca:	2121      	movs	r1, #33	; 0x21
   22bcc:	480d      	ldr	r0, [pc, #52]	; (22c04 <close+0x50>)
   22bce:	f024 fe89 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   22bd2:	6823      	ldr	r3, [r4, #0]
   22bd4:	685b      	ldr	r3, [r3, #4]
   22bd6:	b94b      	cbnz	r3, 22bec <close+0x38>
   22bd8:	490b      	ldr	r1, [pc, #44]	; (22c08 <close+0x54>)
   22bda:	4809      	ldr	r0, [pc, #36]	; (22c00 <close+0x4c>)
   22bdc:	2322      	movs	r3, #34	; 0x22
   22bde:	4a09      	ldr	r2, [pc, #36]	; (22c04 <close+0x50>)
   22be0:	f024 fe73 	bl	478ca <printk>
   22be4:	2122      	movs	r1, #34	; 0x22
   22be6:	4807      	ldr	r0, [pc, #28]	; (22c04 <close+0x50>)
   22be8:	f024 fe7c 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   22bec:	6823      	ldr	r3, [r4, #0]
   22bee:	4628      	mov	r0, r5
}
   22bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   22bf4:	685b      	ldr	r3, [r3, #4]
   22bf6:	4718      	bx	r3
   22bf8:	20023bf8 	.word	0x20023bf8
   22bfc:	0004ce24 	.word	0x0004ce24
   22c00:	0004ccf0 	.word	0x0004ccf0
   22c04:	0004cdf3 	.word	0x0004cdf3
   22c08:	0004e833 	.word	0x0004e833

00022c0c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   22c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   22c10:	4c2d      	ldr	r4, [pc, #180]	; (22cc8 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   22c12:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   22c14:	6823      	ldr	r3, [r4, #0]
{
   22c16:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   22c18:	882f      	ldrh	r7, [r5, #0]
   22c1a:	b94b      	cbnz	r3, 22c30 <mqtt_client_tcp_connect+0x24>
   22c1c:	492b      	ldr	r1, [pc, #172]	; (22ccc <mqtt_client_tcp_connect+0xc0>)
   22c1e:	482c      	ldr	r0, [pc, #176]	; (22cd0 <mqtt_client_tcp_connect+0xc4>)
   22c20:	2319      	movs	r3, #25
   22c22:	4a2c      	ldr	r2, [pc, #176]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c24:	f024 fe51 	bl	478ca <printk>
   22c28:	2119      	movs	r1, #25
   22c2a:	482a      	ldr	r0, [pc, #168]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c2c:	f024 fe5a 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   22c30:	6823      	ldr	r3, [r4, #0]
   22c32:	681b      	ldr	r3, [r3, #0]
   22c34:	b94b      	cbnz	r3, 22c4a <mqtt_client_tcp_connect+0x3e>
   22c36:	4928      	ldr	r1, [pc, #160]	; (22cd8 <mqtt_client_tcp_connect+0xcc>)
   22c38:	4825      	ldr	r0, [pc, #148]	; (22cd0 <mqtt_client_tcp_connect+0xc4>)
   22c3a:	231a      	movs	r3, #26
   22c3c:	4a25      	ldr	r2, [pc, #148]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c3e:	f024 fe44 	bl	478ca <printk>
   22c42:	211a      	movs	r1, #26
   22c44:	4823      	ldr	r0, [pc, #140]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c46:	f024 fe4d 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   22c4a:	6823      	ldr	r3, [r4, #0]
   22c4c:	4638      	mov	r0, r7
   22c4e:	681b      	ldr	r3, [r3, #0]
   22c50:	2206      	movs	r2, #6
   22c52:	2101      	movs	r1, #1
   22c54:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   22c56:	2800      	cmp	r0, #0
   22c58:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   22c5a:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   22c5c:	da05      	bge.n	22c6a <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   22c5e:	f025 f85b 	bl	47d18 <__errno>
   22c62:	6800      	ldr	r0, [r0, #0]
   22c64:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   22c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   22c6a:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   22c6c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   22c6e:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   22c70:	6823      	ldr	r3, [r4, #0]
   22c72:	bf14      	ite	ne
   22c74:	f04f 0818 	movne.w	r8, #24
   22c78:	f04f 0808 	moveq.w	r8, #8
   22c7c:	b94b      	cbnz	r3, 22c92 <mqtt_client_tcp_connect+0x86>
   22c7e:	4913      	ldr	r1, [pc, #76]	; (22ccc <mqtt_client_tcp_connect+0xc0>)
   22c80:	4813      	ldr	r0, [pc, #76]	; (22cd0 <mqtt_client_tcp_connect+0xc4>)
   22c82:	2345      	movs	r3, #69	; 0x45
   22c84:	4a13      	ldr	r2, [pc, #76]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c86:	f024 fe20 	bl	478ca <printk>
   22c8a:	2145      	movs	r1, #69	; 0x45
   22c8c:	4811      	ldr	r0, [pc, #68]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22c8e:	f024 fe29 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   22c92:	6823      	ldr	r3, [r4, #0]
   22c94:	695b      	ldr	r3, [r3, #20]
   22c96:	b94b      	cbnz	r3, 22cac <mqtt_client_tcp_connect+0xa0>
   22c98:	4910      	ldr	r1, [pc, #64]	; (22cdc <mqtt_client_tcp_connect+0xd0>)
   22c9a:	480d      	ldr	r0, [pc, #52]	; (22cd0 <mqtt_client_tcp_connect+0xc4>)
   22c9c:	2346      	movs	r3, #70	; 0x46
   22c9e:	4a0d      	ldr	r2, [pc, #52]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22ca0:	f024 fe13 	bl	478ca <printk>
   22ca4:	2146      	movs	r1, #70	; 0x46
   22ca6:	480b      	ldr	r0, [pc, #44]	; (22cd4 <mqtt_client_tcp_connect+0xc8>)
   22ca8:	f024 fe1c 	bl	478e4 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   22cac:	6823      	ldr	r3, [r4, #0]
   22cae:	4642      	mov	r2, r8
   22cb0:	695b      	ldr	r3, [r3, #20]
   22cb2:	4629      	mov	r1, r5
   22cb4:	4638      	mov	r0, r7
   22cb6:	4798      	blx	r3
	if (ret < 0) {
   22cb8:	2800      	cmp	r0, #0
   22cba:	da03      	bge.n	22cc4 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   22cbc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   22cbe:	f7ff ff79 	bl	22bb4 <close>
   22cc2:	e7cc      	b.n	22c5e <mqtt_client_tcp_connect+0x52>
	return 0;
   22cc4:	2000      	movs	r0, #0
   22cc6:	e7ce      	b.n	22c66 <mqtt_client_tcp_connect+0x5a>
   22cc8:	20023bf8 	.word	0x20023bf8
   22ccc:	0004ce24 	.word	0x0004ce24
   22cd0:	0004ccf0 	.word	0x0004ccf0
   22cd4:	0004cdf3 	.word	0x0004cdf3
   22cd8:	0004e845 	.word	0x0004e845
   22cdc:	0004ea83 	.word	0x0004ea83

00022ce0 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   22ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ce4:	4680      	mov	r8, r0
   22ce6:	4689      	mov	r9, r1
   22ce8:	4617      	mov	r7, r2
	u32_t offset = 0U;
   22cea:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   22cec:	4d1d      	ldr	r5, [pc, #116]	; (22d64 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   22cee:	42bc      	cmp	r4, r7
   22cf0:	d301      	bcc.n	22cf6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   22cf2:	2000      	movs	r0, #0
   22cf4:	e031      	b.n	22d5a <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   22cf6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22cfa:	eb09 0a04 	add.w	sl, r9, r4
   22cfe:	461e      	mov	r6, r3
   22d00:	4b19      	ldr	r3, [pc, #100]	; (22d68 <mqtt_client_tcp_write+0x88>)
   22d02:	eba7 0b04 	sub.w	fp, r7, r4
   22d06:	681b      	ldr	r3, [r3, #0]
   22d08:	b94b      	cbnz	r3, 22d1e <mqtt_client_tcp_write+0x3e>
   22d0a:	4918      	ldr	r1, [pc, #96]	; (22d6c <mqtt_client_tcp_write+0x8c>)
   22d0c:	4818      	ldr	r0, [pc, #96]	; (22d70 <mqtt_client_tcp_write+0x90>)
   22d0e:	237e      	movs	r3, #126	; 0x7e
   22d10:	462a      	mov	r2, r5
   22d12:	f024 fdda 	bl	478ca <printk>
   22d16:	217e      	movs	r1, #126	; 0x7e
   22d18:	4628      	mov	r0, r5
   22d1a:	f024 fde3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   22d1e:	4b12      	ldr	r3, [pc, #72]	; (22d68 <mqtt_client_tcp_write+0x88>)
   22d20:	681b      	ldr	r3, [r3, #0]
   22d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22d24:	b94b      	cbnz	r3, 22d3a <mqtt_client_tcp_write+0x5a>
   22d26:	4913      	ldr	r1, [pc, #76]	; (22d74 <mqtt_client_tcp_write+0x94>)
   22d28:	4811      	ldr	r0, [pc, #68]	; (22d70 <mqtt_client_tcp_write+0x90>)
   22d2a:	237f      	movs	r3, #127	; 0x7f
   22d2c:	462a      	mov	r2, r5
   22d2e:	f024 fdcc 	bl	478ca <printk>
   22d32:	217f      	movs	r1, #127	; 0x7f
   22d34:	4628      	mov	r0, r5
   22d36:	f024 fdd5 	bl	478e4 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   22d3a:	4b0b      	ldr	r3, [pc, #44]	; (22d68 <mqtt_client_tcp_write+0x88>)
   22d3c:	4630      	mov	r0, r6
   22d3e:	681b      	ldr	r3, [r3, #0]
   22d40:	465a      	mov	r2, fp
   22d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22d44:	4651      	mov	r1, sl
   22d46:	469c      	mov	ip, r3
   22d48:	2300      	movs	r3, #0
   22d4a:	4666      	mov	r6, ip
   22d4c:	47b0      	blx	r6
		if (ret < 0) {
   22d4e:	2800      	cmp	r0, #0
   22d50:	da05      	bge.n	22d5e <mqtt_client_tcp_write+0x7e>
			return -errno;
   22d52:	f024 ffe1 	bl	47d18 <__errno>
   22d56:	6800      	ldr	r0, [r0, #0]
   22d58:	4240      	negs	r0, r0
}
   22d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   22d5e:	4404      	add	r4, r0
   22d60:	e7c5      	b.n	22cee <mqtt_client_tcp_write+0xe>
   22d62:	bf00      	nop
   22d64:	0004cdf3 	.word	0x0004cdf3
   22d68:	20023bf8 	.word	0x20023bf8
   22d6c:	0004ce24 	.word	0x0004ce24
   22d70:	0004ccf0 	.word	0x0004ccf0
   22d74:	0004e9c1 	.word	0x0004e9c1

00022d78 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   22d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   22d7c:	4c18      	ldr	r4, [pc, #96]	; (22de0 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   22d7e:	2b00      	cmp	r3, #0
   22d80:	6823      	ldr	r3, [r4, #0]
{
   22d82:	460e      	mov	r6, r1
   22d84:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   22d86:	bf14      	ite	ne
   22d88:	f04f 0800 	movne.w	r8, #0
   22d8c:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   22d90:	6a85      	ldr	r5, [r0, #40]	; 0x28
   22d92:	b94b      	cbnz	r3, 22da8 <mqtt_client_tcp_read+0x30>
   22d94:	4913      	ldr	r1, [pc, #76]	; (22de4 <mqtt_client_tcp_read+0x6c>)
   22d96:	4814      	ldr	r0, [pc, #80]	; (22de8 <mqtt_client_tcp_read+0x70>)
   22d98:	2369      	movs	r3, #105	; 0x69
   22d9a:	4a14      	ldr	r2, [pc, #80]	; (22dec <mqtt_client_tcp_read+0x74>)
   22d9c:	f024 fd95 	bl	478ca <printk>
   22da0:	2169      	movs	r1, #105	; 0x69
   22da2:	4812      	ldr	r0, [pc, #72]	; (22dec <mqtt_client_tcp_read+0x74>)
   22da4:	f024 fd9e 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   22da8:	6823      	ldr	r3, [r4, #0]
   22daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22dac:	b94b      	cbnz	r3, 22dc2 <mqtt_client_tcp_read+0x4a>
   22dae:	4910      	ldr	r1, [pc, #64]	; (22df0 <mqtt_client_tcp_read+0x78>)
   22db0:	480d      	ldr	r0, [pc, #52]	; (22de8 <mqtt_client_tcp_read+0x70>)
   22db2:	236a      	movs	r3, #106	; 0x6a
   22db4:	4a0d      	ldr	r2, [pc, #52]	; (22dec <mqtt_client_tcp_read+0x74>)
   22db6:	f024 fd88 	bl	478ca <printk>
   22dba:	216a      	movs	r1, #106	; 0x6a
   22dbc:	480b      	ldr	r0, [pc, #44]	; (22dec <mqtt_client_tcp_read+0x74>)
   22dbe:	f024 fd91 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   22dc2:	6823      	ldr	r3, [r4, #0]
   22dc4:	463a      	mov	r2, r7
   22dc6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   22dc8:	4631      	mov	r1, r6
   22dca:	4643      	mov	r3, r8
   22dcc:	4628      	mov	r0, r5
   22dce:	47a0      	blx	r4
	if (ret < 0) {
   22dd0:	2800      	cmp	r0, #0
   22dd2:	da03      	bge.n	22ddc <mqtt_client_tcp_read+0x64>
		return -errno;
   22dd4:	f024 ffa0 	bl	47d18 <__errno>
   22dd8:	6800      	ldr	r0, [r0, #0]
   22dda:	4240      	negs	r0, r0
	}

	return ret;
}
   22ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22de0:	20023bf8 	.word	0x20023bf8
   22de4:	0004ce24 	.word	0x0004ce24
   22de8:	0004ccf0 	.word	0x0004ccf0
   22dec:	0004cdf3 	.word	0x0004cdf3
   22df0:	0004e9b0 	.word	0x0004e9b0

00022df4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   22df4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   22df8:	4a01      	ldr	r2, [pc, #4]	; (22e00 <mqtt_transport_connect+0xc>)
   22dfa:	011b      	lsls	r3, r3, #4
   22dfc:	58d3      	ldr	r3, [r2, r3]
   22dfe:	4718      	bx	r3
   22e00:	0004ab68 	.word	0x0004ab68

00022e04 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   22e04:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   22e06:	4b04      	ldr	r3, [pc, #16]	; (22e18 <mqtt_transport_write+0x14>)
   22e08:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   22e0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22e10:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   22e12:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   22e16:	4718      	bx	r3
   22e18:	0004ab68 	.word	0x0004ab68

00022e1c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   22e1c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   22e1e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   22e22:	4c03      	ldr	r4, [pc, #12]	; (22e30 <mqtt_transport_read+0x14>)
   22e24:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   22e28:	68a4      	ldr	r4, [r4, #8]
   22e2a:	46a4      	mov	ip, r4
							 shall_block);
}
   22e2c:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   22e2e:	4760      	bx	ip
   22e30:	0004ab68 	.word	0x0004ab68

00022e34 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   22e34:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   22e38:	4b02      	ldr	r3, [pc, #8]	; (22e44 <mqtt_transport_disconnect+0x10>)
   22e3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   22e3e:	68db      	ldr	r3, [r3, #12]
   22e40:	4718      	bx	r3
   22e42:	bf00      	nop
   22e44:	0004ab68 	.word	0x0004ab68

00022e48 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   22e48:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   22e4a:	b510      	push	{r4, lr}
   22e4c:	b142      	cbz	r2, 22e60 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   22e4e:	4b0f      	ldr	r3, [pc, #60]	; (22e8c <mqtt_mutex_unlock+0x44>)
   22e50:	6882      	ldr	r2, [r0, #8]
   22e52:	689b      	ldr	r3, [r3, #8]
   22e54:	429a      	cmp	r2, r3
   22e56:	d115      	bne.n	22e84 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   22e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_impl_k_mutex_unlock(mutex);
   22e5c:	f01a bd26 	b.w	3d8ac <z_impl_k_mutex_unlock>
		return -EINVAL;
   22e60:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   22e64:	2343      	movs	r3, #67	; 0x43
   22e66:	4a0a      	ldr	r2, [pc, #40]	; (22e90 <mqtt_mutex_unlock+0x48>)
   22e68:	490a      	ldr	r1, [pc, #40]	; (22e94 <mqtt_mutex_unlock+0x4c>)
   22e6a:	480b      	ldr	r0, [pc, #44]	; (22e98 <mqtt_mutex_unlock+0x50>)
   22e6c:	f024 fd2d 	bl	478ca <printk>
   22e70:	4621      	mov	r1, r4
   22e72:	480a      	ldr	r0, [pc, #40]	; (22e9c <mqtt_mutex_unlock+0x54>)
   22e74:	f024 fd29 	bl	478ca <printk>
}
   22e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   22e7c:	2143      	movs	r1, #67	; 0x43
   22e7e:	4804      	ldr	r0, [pc, #16]	; (22e90 <mqtt_mutex_unlock+0x48>)
   22e80:	f024 bd30 	b.w	478e4 <assert_post_action>
		return -EPERM;
   22e84:	f04f 34ff 	mov.w	r4, #4294967295
   22e88:	e7ec      	b.n	22e64 <mqtt_mutex_unlock+0x1c>
   22e8a:	bf00      	nop
   22e8c:	2002a578 	.word	0x2002a578
   22e90:	0004eab7 	.word	0x0004eab7
   22e94:	0004eae9 	.word	0x0004eae9
   22e98:	0004ccf0 	.word	0x0004ccf0
   22e9c:	0004eaf2 	.word	0x0004eaf2

00022ea0 <mqtt_mutex_lock>:
{
   22ea0:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   22ea2:	f04f 31ff 	mov.w	r1, #4294967295
   22ea6:	f01a fc27 	bl	3d6f8 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   22eaa:	4604      	mov	r4, r0
   22eac:	b178      	cbz	r0, 22ece <mqtt_mutex_lock+0x2e>
   22eae:	2339      	movs	r3, #57	; 0x39
   22eb0:	4a07      	ldr	r2, [pc, #28]	; (22ed0 <mqtt_mutex_lock+0x30>)
   22eb2:	4908      	ldr	r1, [pc, #32]	; (22ed4 <mqtt_mutex_lock+0x34>)
   22eb4:	4808      	ldr	r0, [pc, #32]	; (22ed8 <mqtt_mutex_lock+0x38>)
   22eb6:	f024 fd08 	bl	478ca <printk>
   22eba:	4621      	mov	r1, r4
   22ebc:	4807      	ldr	r0, [pc, #28]	; (22edc <mqtt_mutex_lock+0x3c>)
   22ebe:	f024 fd04 	bl	478ca <printk>
}
   22ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   22ec6:	2139      	movs	r1, #57	; 0x39
   22ec8:	4801      	ldr	r0, [pc, #4]	; (22ed0 <mqtt_mutex_lock+0x30>)
   22eca:	f024 bd0b 	b.w	478e4 <assert_post_action>
}
   22ece:	bd10      	pop	{r4, pc}
   22ed0:	0004eab7 	.word	0x0004eab7
   22ed4:	0004eae9 	.word	0x0004eae9
   22ed8:	0004ccf0 	.word	0x0004ccf0
   22edc:	0004ea97 	.word	0x0004ea97

00022ee0 <close>:
{
   22ee0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   22ee2:	4c10      	ldr	r4, [pc, #64]	; (22f24 <close+0x44>)
{
   22ee4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   22ee6:	6823      	ldr	r3, [r4, #0]
   22ee8:	b94b      	cbnz	r3, 22efe <close+0x1e>
   22eea:	490f      	ldr	r1, [pc, #60]	; (22f28 <close+0x48>)
   22eec:	480f      	ldr	r0, [pc, #60]	; (22f2c <close+0x4c>)
   22eee:	2321      	movs	r3, #33	; 0x21
   22ef0:	4a0f      	ldr	r2, [pc, #60]	; (22f30 <close+0x50>)
   22ef2:	f024 fcea 	bl	478ca <printk>
   22ef6:	2121      	movs	r1, #33	; 0x21
   22ef8:	480d      	ldr	r0, [pc, #52]	; (22f30 <close+0x50>)
   22efa:	f024 fcf3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   22efe:	6823      	ldr	r3, [r4, #0]
   22f00:	685b      	ldr	r3, [r3, #4]
   22f02:	b94b      	cbnz	r3, 22f18 <close+0x38>
   22f04:	490b      	ldr	r1, [pc, #44]	; (22f34 <close+0x54>)
   22f06:	4809      	ldr	r0, [pc, #36]	; (22f2c <close+0x4c>)
   22f08:	2322      	movs	r3, #34	; 0x22
   22f0a:	4a09      	ldr	r2, [pc, #36]	; (22f30 <close+0x50>)
   22f0c:	f024 fcdd 	bl	478ca <printk>
   22f10:	2122      	movs	r1, #34	; 0x22
   22f12:	4807      	ldr	r0, [pc, #28]	; (22f30 <close+0x50>)
   22f14:	f024 fce6 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   22f18:	6823      	ldr	r3, [r4, #0]
   22f1a:	4628      	mov	r0, r5
}
   22f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   22f20:	685b      	ldr	r3, [r3, #4]
   22f22:	4718      	bx	r3
   22f24:	20023bf8 	.word	0x20023bf8
   22f28:	0004ce24 	.word	0x0004ce24
   22f2c:	0004ccf0 	.word	0x0004ccf0
   22f30:	0004cdf3 	.word	0x0004cdf3
   22f34:	0004e833 	.word	0x0004e833

00022f38 <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   22f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   22f3c:	4c15      	ldr	r4, [pc, #84]	; (22f94 <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   22f3e:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   22f40:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   22f42:	4605      	mov	r5, r0
   22f44:	460e      	mov	r6, r1
   22f46:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   22f48:	b94b      	cbnz	r3, 22f5e <setsockopt.constprop.1+0x26>
   22f4a:	4913      	ldr	r1, [pc, #76]	; (22f98 <setsockopt.constprop.1+0x60>)
   22f4c:	4813      	ldr	r0, [pc, #76]	; (22f9c <setsockopt.constprop.1+0x64>)
   22f4e:	2357      	movs	r3, #87	; 0x57
   22f50:	4a13      	ldr	r2, [pc, #76]	; (22fa0 <setsockopt.constprop.1+0x68>)
   22f52:	f024 fcba 	bl	478ca <printk>
   22f56:	2157      	movs	r1, #87	; 0x57
   22f58:	4811      	ldr	r0, [pc, #68]	; (22fa0 <setsockopt.constprop.1+0x68>)
   22f5a:	f024 fcc3 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   22f5e:	6823      	ldr	r3, [r4, #0]
   22f60:	69db      	ldr	r3, [r3, #28]
   22f62:	b94b      	cbnz	r3, 22f78 <setsockopt.constprop.1+0x40>
   22f64:	490f      	ldr	r1, [pc, #60]	; (22fa4 <setsockopt.constprop.1+0x6c>)
   22f66:	480d      	ldr	r0, [pc, #52]	; (22f9c <setsockopt.constprop.1+0x64>)
   22f68:	2358      	movs	r3, #88	; 0x58
   22f6a:	4a0d      	ldr	r2, [pc, #52]	; (22fa0 <setsockopt.constprop.1+0x68>)
   22f6c:	f024 fcad 	bl	478ca <printk>
   22f70:	2158      	movs	r1, #88	; 0x58
   22f72:	480b      	ldr	r0, [pc, #44]	; (22fa0 <setsockopt.constprop.1+0x68>)
   22f74:	f024 fcb6 	bl	478e4 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   22f78:	6823      	ldr	r3, [r4, #0]
   22f7a:	f8cd 8000 	str.w	r8, [sp]
   22f7e:	69dc      	ldr	r4, [r3, #28]
   22f80:	4632      	mov	r2, r6
   22f82:	463b      	mov	r3, r7
   22f84:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22f88:	4628      	mov	r0, r5
   22f8a:	47a0      	blx	r4
}
   22f8c:	b002      	add	sp, #8
   22f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f92:	bf00      	nop
   22f94:	20023bf8 	.word	0x20023bf8
   22f98:	0004ce24 	.word	0x0004ce24
   22f9c:	0004ccf0 	.word	0x0004ccf0
   22fa0:	0004cdf3 	.word	0x0004cdf3
   22fa4:	0004eb14 	.word	0x0004eb14

00022fa8 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   22fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   22fac:	4d48      	ldr	r5, [pc, #288]	; (230d0 <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   22fae:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   22fb0:	682b      	ldr	r3, [r5, #0]
{
   22fb2:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   22fb4:	883e      	ldrh	r6, [r7, #0]
   22fb6:	b94b      	cbnz	r3, 22fcc <mqtt_client_tls_connect+0x24>
   22fb8:	4946      	ldr	r1, [pc, #280]	; (230d4 <mqtt_client_tls_connect+0x12c>)
   22fba:	4847      	ldr	r0, [pc, #284]	; (230d8 <mqtt_client_tls_connect+0x130>)
   22fbc:	2319      	movs	r3, #25
   22fbe:	4a47      	ldr	r2, [pc, #284]	; (230dc <mqtt_client_tls_connect+0x134>)
   22fc0:	f024 fc83 	bl	478ca <printk>
   22fc4:	2119      	movs	r1, #25
   22fc6:	4845      	ldr	r0, [pc, #276]	; (230dc <mqtt_client_tls_connect+0x134>)
   22fc8:	f024 fc8c 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   22fcc:	682b      	ldr	r3, [r5, #0]
   22fce:	681b      	ldr	r3, [r3, #0]
   22fd0:	b94b      	cbnz	r3, 22fe6 <mqtt_client_tls_connect+0x3e>
   22fd2:	4943      	ldr	r1, [pc, #268]	; (230e0 <mqtt_client_tls_connect+0x138>)
   22fd4:	4840      	ldr	r0, [pc, #256]	; (230d8 <mqtt_client_tls_connect+0x130>)
   22fd6:	231a      	movs	r3, #26
   22fd8:	4a40      	ldr	r2, [pc, #256]	; (230dc <mqtt_client_tls_connect+0x134>)
   22fda:	f024 fc76 	bl	478ca <printk>
   22fde:	211a      	movs	r1, #26
   22fe0:	483e      	ldr	r0, [pc, #248]	; (230dc <mqtt_client_tls_connect+0x134>)
   22fe2:	f024 fc7f 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   22fe6:	682b      	ldr	r3, [r5, #0]
   22fe8:	f44f 7281 	mov.w	r2, #258	; 0x102
   22fec:	681b      	ldr	r3, [r3, #0]
   22fee:	2101      	movs	r1, #1
   22ff0:	4630      	mov	r0, r6
   22ff2:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   22ff4:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   22ff6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   22ff8:	da05      	bge.n	23006 <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   22ffa:	f024 fe8d 	bl	47d18 <__errno>
   22ffe:	6800      	ldr	r0, [r0, #0]
   23000:	4240      	negs	r0, r0
}
   23002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   23006:	2304      	movs	r3, #4
   23008:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   2300c:	2105      	movs	r1, #5
   2300e:	f7ff ff93 	bl	22f38 <setsockopt.constprop.1>
	if (ret < 0) {
   23012:	2800      	cmp	r0, #0
   23014:	da03      	bge.n	2301e <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   23016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   23018:	f7ff ff62 	bl	22ee0 <close>
   2301c:	e7ed      	b.n	22ffa <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   2301e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   23020:	2a00      	cmp	r2, #0
   23022:	d131      	bne.n	23088 <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   23024:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   23026:	2a00      	cmp	r2, #0
   23028:	d139      	bne.n	2309e <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   2302a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   2302c:	2e00      	cmp	r6, #0
   2302e:	d141      	bne.n	230b4 <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   23030:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   23032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   23034:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   23036:	682b      	ldr	r3, [r5, #0]
   23038:	bf0c      	ite	eq
   2303a:	f04f 0808 	moveq.w	r8, #8
   2303e:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   23042:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   23044:	b94b      	cbnz	r3, 2305a <mqtt_client_tls_connect+0xb2>
   23046:	4923      	ldr	r1, [pc, #140]	; (230d4 <mqtt_client_tls_connect+0x12c>)
   23048:	4823      	ldr	r0, [pc, #140]	; (230d8 <mqtt_client_tls_connect+0x130>)
   2304a:	2345      	movs	r3, #69	; 0x45
   2304c:	4a23      	ldr	r2, [pc, #140]	; (230dc <mqtt_client_tls_connect+0x134>)
   2304e:	f024 fc3c 	bl	478ca <printk>
   23052:	2145      	movs	r1, #69	; 0x45
   23054:	4821      	ldr	r0, [pc, #132]	; (230dc <mqtt_client_tls_connect+0x134>)
   23056:	f024 fc45 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2305a:	682b      	ldr	r3, [r5, #0]
   2305c:	695b      	ldr	r3, [r3, #20]
   2305e:	b94b      	cbnz	r3, 23074 <mqtt_client_tls_connect+0xcc>
   23060:	4920      	ldr	r1, [pc, #128]	; (230e4 <mqtt_client_tls_connect+0x13c>)
   23062:	481d      	ldr	r0, [pc, #116]	; (230d8 <mqtt_client_tls_connect+0x130>)
   23064:	2346      	movs	r3, #70	; 0x46
   23066:	4a1d      	ldr	r2, [pc, #116]	; (230dc <mqtt_client_tls_connect+0x134>)
   23068:	f024 fc2f 	bl	478ca <printk>
   2306c:	2146      	movs	r1, #70	; 0x46
   2306e:	481b      	ldr	r0, [pc, #108]	; (230dc <mqtt_client_tls_connect+0x134>)
   23070:	f024 fc38 	bl	478e4 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   23074:	682b      	ldr	r3, [r5, #0]
   23076:	4642      	mov	r2, r8
   23078:	695b      	ldr	r3, [r3, #20]
   2307a:	4639      	mov	r1, r7
   2307c:	4630      	mov	r0, r6
   2307e:	4798      	blx	r3
	if (ret < 0) {
   23080:	2800      	cmp	r0, #0
   23082:	dbc8      	blt.n	23016 <mqtt_client_tls_connect+0x6e>
	return 0;
   23084:	2000      	movs	r0, #0
   23086:	e7bc      	b.n	23002 <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   23088:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2308a:	2b00      	cmp	r3, #0
   2308c:	d0ca      	beq.n	23024 <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   2308e:	009b      	lsls	r3, r3, #2
   23090:	2103      	movs	r1, #3
   23092:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   23094:	f7ff ff50 	bl	22f38 <setsockopt.constprop.1>
		if (ret < 0) {
   23098:	2800      	cmp	r0, #0
   2309a:	dac3      	bge.n	23024 <mqtt_client_tls_connect+0x7c>
   2309c:	e7bb      	b.n	23016 <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2309e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   230a0:	2b00      	cmp	r3, #0
   230a2:	d0c2      	beq.n	2302a <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   230a4:	009b      	lsls	r3, r3, #2
   230a6:	2101      	movs	r1, #1
   230a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   230aa:	f7ff ff45 	bl	22f38 <setsockopt.constprop.1>
		if (ret < 0) {
   230ae:	2800      	cmp	r0, #0
   230b0:	dabb      	bge.n	2302a <mqtt_client_tls_connect+0x82>
   230b2:	e7b0      	b.n	23016 <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   230b4:	4630      	mov	r0, r6
   230b6:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   230ba:	f01e fbb3 	bl	41824 <strlen>
   230be:	4632      	mov	r2, r6
   230c0:	4603      	mov	r3, r0
   230c2:	2102      	movs	r1, #2
   230c4:	4640      	mov	r0, r8
   230c6:	f7ff ff37 	bl	22f38 <setsockopt.constprop.1>
		if (ret < 0) {
   230ca:	2800      	cmp	r0, #0
   230cc:	dab0      	bge.n	23030 <mqtt_client_tls_connect+0x88>
   230ce:	e7a2      	b.n	23016 <mqtt_client_tls_connect+0x6e>
   230d0:	20023bf8 	.word	0x20023bf8
   230d4:	0004ce24 	.word	0x0004ce24
   230d8:	0004ccf0 	.word	0x0004ccf0
   230dc:	0004cdf3 	.word	0x0004cdf3
   230e0:	0004e845 	.word	0x0004e845
   230e4:	0004ea83 	.word	0x0004ea83

000230e8 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   230e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230ec:	4680      	mov	r8, r0
   230ee:	4689      	mov	r9, r1
   230f0:	4617      	mov	r7, r2
	u32_t offset = 0U;
   230f2:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   230f4:	4d1d      	ldr	r5, [pc, #116]	; (2316c <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   230f6:	42bc      	cmp	r4, r7
   230f8:	d301      	bcc.n	230fe <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   230fa:	2000      	movs	r0, #0
   230fc:	e031      	b.n	23162 <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   230fe:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   23102:	eb09 0a04 	add.w	sl, r9, r4
   23106:	461e      	mov	r6, r3
   23108:	4b19      	ldr	r3, [pc, #100]	; (23170 <mqtt_client_tls_write+0x88>)
   2310a:	eba7 0b04 	sub.w	fp, r7, r4
   2310e:	681b      	ldr	r3, [r3, #0]
   23110:	b94b      	cbnz	r3, 23126 <mqtt_client_tls_write+0x3e>
   23112:	4918      	ldr	r1, [pc, #96]	; (23174 <mqtt_client_tls_write+0x8c>)
   23114:	4818      	ldr	r0, [pc, #96]	; (23178 <mqtt_client_tls_write+0x90>)
   23116:	237e      	movs	r3, #126	; 0x7e
   23118:	462a      	mov	r2, r5
   2311a:	f024 fbd6 	bl	478ca <printk>
   2311e:	217e      	movs	r1, #126	; 0x7e
   23120:	4628      	mov	r0, r5
   23122:	f024 fbdf 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   23126:	4b12      	ldr	r3, [pc, #72]	; (23170 <mqtt_client_tls_write+0x88>)
   23128:	681b      	ldr	r3, [r3, #0]
   2312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2312c:	b94b      	cbnz	r3, 23142 <mqtt_client_tls_write+0x5a>
   2312e:	4913      	ldr	r1, [pc, #76]	; (2317c <mqtt_client_tls_write+0x94>)
   23130:	4811      	ldr	r0, [pc, #68]	; (23178 <mqtt_client_tls_write+0x90>)
   23132:	237f      	movs	r3, #127	; 0x7f
   23134:	462a      	mov	r2, r5
   23136:	f024 fbc8 	bl	478ca <printk>
   2313a:	217f      	movs	r1, #127	; 0x7f
   2313c:	4628      	mov	r0, r5
   2313e:	f024 fbd1 	bl	478e4 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   23142:	4b0b      	ldr	r3, [pc, #44]	; (23170 <mqtt_client_tls_write+0x88>)
   23144:	4630      	mov	r0, r6
   23146:	681b      	ldr	r3, [r3, #0]
   23148:	465a      	mov	r2, fp
   2314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2314c:	4651      	mov	r1, sl
   2314e:	469c      	mov	ip, r3
   23150:	2300      	movs	r3, #0
   23152:	4666      	mov	r6, ip
   23154:	47b0      	blx	r6
		if (ret < 0) {
   23156:	2800      	cmp	r0, #0
   23158:	da05      	bge.n	23166 <mqtt_client_tls_write+0x7e>
			return -errno;
   2315a:	f024 fddd 	bl	47d18 <__errno>
   2315e:	6800      	ldr	r0, [r0, #0]
   23160:	4240      	negs	r0, r0
}
   23162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   23166:	4404      	add	r4, r0
   23168:	e7c5      	b.n	230f6 <mqtt_client_tls_write+0xe>
   2316a:	bf00      	nop
   2316c:	0004cdf3 	.word	0x0004cdf3
   23170:	20023bf8 	.word	0x20023bf8
   23174:	0004ce24 	.word	0x0004ce24
   23178:	0004ccf0 	.word	0x0004ccf0
   2317c:	0004e9c1 	.word	0x0004e9c1

00023180 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   23180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   23184:	4c18      	ldr	r4, [pc, #96]	; (231e8 <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   23186:	2b00      	cmp	r3, #0
   23188:	6823      	ldr	r3, [r4, #0]
{
   2318a:	460e      	mov	r6, r1
   2318c:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   2318e:	bf14      	ite	ne
   23190:	f04f 0800 	movne.w	r8, #0
   23194:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   23198:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2319a:	b94b      	cbnz	r3, 231b0 <mqtt_client_tls_read+0x30>
   2319c:	4913      	ldr	r1, [pc, #76]	; (231ec <mqtt_client_tls_read+0x6c>)
   2319e:	4814      	ldr	r0, [pc, #80]	; (231f0 <mqtt_client_tls_read+0x70>)
   231a0:	2369      	movs	r3, #105	; 0x69
   231a2:	4a14      	ldr	r2, [pc, #80]	; (231f4 <mqtt_client_tls_read+0x74>)
   231a4:	f024 fb91 	bl	478ca <printk>
   231a8:	2169      	movs	r1, #105	; 0x69
   231aa:	4812      	ldr	r0, [pc, #72]	; (231f4 <mqtt_client_tls_read+0x74>)
   231ac:	f024 fb9a 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   231b0:	6823      	ldr	r3, [r4, #0]
   231b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   231b4:	b94b      	cbnz	r3, 231ca <mqtt_client_tls_read+0x4a>
   231b6:	4910      	ldr	r1, [pc, #64]	; (231f8 <mqtt_client_tls_read+0x78>)
   231b8:	480d      	ldr	r0, [pc, #52]	; (231f0 <mqtt_client_tls_read+0x70>)
   231ba:	236a      	movs	r3, #106	; 0x6a
   231bc:	4a0d      	ldr	r2, [pc, #52]	; (231f4 <mqtt_client_tls_read+0x74>)
   231be:	f024 fb84 	bl	478ca <printk>
   231c2:	216a      	movs	r1, #106	; 0x6a
   231c4:	480b      	ldr	r0, [pc, #44]	; (231f4 <mqtt_client_tls_read+0x74>)
   231c6:	f024 fb8d 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   231ca:	6823      	ldr	r3, [r4, #0]
   231cc:	463a      	mov	r2, r7
   231ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   231d0:	4631      	mov	r1, r6
   231d2:	4643      	mov	r3, r8
   231d4:	4628      	mov	r0, r5
   231d6:	47a0      	blx	r4
	if (ret < 0) {
   231d8:	2800      	cmp	r0, #0
   231da:	da03      	bge.n	231e4 <mqtt_client_tls_read+0x64>
		return -errno;
   231dc:	f024 fd9c 	bl	47d18 <__errno>
   231e0:	6800      	ldr	r0, [r0, #0]
   231e2:	4240      	negs	r0, r0
	}

	return ret;
}
   231e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   231e8:	20023bf8 	.word	0x20023bf8
   231ec:	0004ce24 	.word	0x0004ce24
   231f0:	0004ccf0 	.word	0x0004ccf0
   231f4:	0004cdf3 	.word	0x0004cdf3
   231f8:	0004e9b0 	.word	0x0004e9b0

000231fc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   231fc:	b570      	push	{r4, r5, r6, lr}
   231fe:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23200:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   23202:	460d      	mov	r5, r1
   23204:	b961      	cbnz	r1, 23220 <gpio_nrfx_manage_callback+0x24>
   23206:	4922      	ldr	r1, [pc, #136]	; (23290 <gpio_nrfx_manage_callback+0x94>)
   23208:	231c      	movs	r3, #28
   2320a:	4a22      	ldr	r2, [pc, #136]	; (23294 <gpio_nrfx_manage_callback+0x98>)
   2320c:	4822      	ldr	r0, [pc, #136]	; (23298 <gpio_nrfx_manage_callback+0x9c>)
   2320e:	f024 fb5c 	bl	478ca <printk>
   23212:	4822      	ldr	r0, [pc, #136]	; (2329c <gpio_nrfx_manage_callback+0xa0>)
   23214:	f024 fb59 	bl	478ca <printk>
   23218:	211c      	movs	r1, #28
   2321a:	481e      	ldr	r0, [pc, #120]	; (23294 <gpio_nrfx_manage_callback+0x98>)
   2321c:	f024 fb62 	bl	478e4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   23220:	686b      	ldr	r3, [r5, #4]
   23222:	b963      	cbnz	r3, 2323e <gpio_nrfx_manage_callback+0x42>
   23224:	491e      	ldr	r1, [pc, #120]	; (232a0 <gpio_nrfx_manage_callback+0xa4>)
   23226:	231d      	movs	r3, #29
   23228:	4a1a      	ldr	r2, [pc, #104]	; (23294 <gpio_nrfx_manage_callback+0x98>)
   2322a:	481b      	ldr	r0, [pc, #108]	; (23298 <gpio_nrfx_manage_callback+0x9c>)
   2322c:	f024 fb4d 	bl	478ca <printk>
   23230:	481c      	ldr	r0, [pc, #112]	; (232a4 <gpio_nrfx_manage_callback+0xa8>)
   23232:	f024 fb4a 	bl	478ca <printk>
   23236:	211d      	movs	r1, #29
   23238:	4816      	ldr	r0, [pc, #88]	; (23294 <gpio_nrfx_manage_callback+0x98>)
   2323a:	f024 fb53 	bl	478e4 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2323e:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   23240:	b15b      	cbz	r3, 2325a <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23242:	2200      	movs	r2, #0
   23244:	429d      	cmp	r5, r3
   23246:	d113      	bne.n	23270 <gpio_nrfx_manage_callback+0x74>
   23248:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   2324a:	b95a      	cbnz	r2, 23264 <gpio_nrfx_manage_callback+0x68>
   2324c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2324e:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   23250:	4295      	cmp	r5, r2
   23252:	d100      	bne.n	23256 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   23254:	6063      	str	r3, [r4, #4]
	parent->next = child;
   23256:	2300      	movs	r3, #0
   23258:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2325a:	b976      	cbnz	r6, 2327a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2325c:	2000      	movs	r0, #0
				     callback, set);
}
   2325e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23260:	460b      	mov	r3, r1
   23262:	e7ef      	b.n	23244 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   23264:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23266:	6863      	ldr	r3, [r4, #4]
   23268:	429d      	cmp	r5, r3
	list->tail = node;
   2326a:	bf08      	it	eq
   2326c:	6062      	streq	r2, [r4, #4]
   2326e:	e7f2      	b.n	23256 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
   23270:	6819      	ldr	r1, [r3, #0]
   23272:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23274:	2900      	cmp	r1, #0
   23276:	d1f3      	bne.n	23260 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   23278:	b13e      	cbz	r6, 2328a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   2327a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2327c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2327e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   23280:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23282:	2800      	cmp	r0, #0
   23284:	d1ea      	bne.n	2325c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   23286:	6065      	str	r5, [r4, #4]
   23288:	e7e9      	b.n	2325e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   2328a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2328e:	e7e6      	b.n	2325e <gpio_nrfx_manage_callback+0x62>
   23290:	0004f2fa 	.word	0x0004f2fa
   23294:	0004eb44 	.word	0x0004eb44
   23298:	0004ccf0 	.word	0x0004ccf0
   2329c:	0004eb72 	.word	0x0004eb72
   232a0:	0004eb81 	.word	0x0004eb81
   232a4:	0004eb93 	.word	0x0004eb93

000232a8 <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   232a8:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   232aa:	4a03      	ldr	r2, [pc, #12]	; (232b8 <nrf_gpio_pin_port_decode.isra.6.part.7+0x10>)
   232ac:	4b03      	ldr	r3, [pc, #12]	; (232bc <nrf_gpio_pin_port_decode.isra.6.part.7+0x14>)
   232ae:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   232b2:	4803      	ldr	r0, [pc, #12]	; (232c0 <nrf_gpio_pin_port_decode.isra.6.part.7+0x18>)
   232b4:	f01d fb10 	bl	408d8 <__assert_func>
   232b8:	0004eb2b 	.word	0x0004eb2b
   232bc:	0004ebd7 	.word	0x0004ebd7
   232c0:	0004ebe5 	.word	0x0004ebe5

000232c4 <nrf_gpio_cfg_sense_set>:
   232c4:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   232c6:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   232c8:	d901      	bls.n	232ce <nrf_gpio_cfg_sense_set+0xa>
   232ca:	f7ff ffed 	bl	232a8 <nrf_gpio_pin_port_decode.isra.6.part.7>
   232ce:	4b08      	ldr	r3, [pc, #32]	; (232f0 <nrf_gpio_cfg_sense_set+0x2c>)
   232d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   232d4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   232d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   232dc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   232e0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   232e4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   232e8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   232ec:	bd08      	pop	{r3, pc}
   232ee:	bf00      	nop
   232f0:	40842500 	.word	0x40842500

000232f4 <gpiote_pin_int_cfg>:
{
   232f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   232f8:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   232fa:	f001 041f 	and.w	r4, r1, #31
   232fe:	689b      	ldr	r3, [r3, #8]
{
   23300:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23302:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   23304:	4e48      	ldr	r6, [pc, #288]	; (23428 <gpiote_pin_int_cfg+0x134>)
   23306:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2330a:	2300      	movs	r3, #0
   2330c:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   23310:	6887      	ldr	r7, [r0, #8]
   23312:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23314:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   23318:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   2331c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   23320:	428c      	cmp	r4, r1
   23322:	d166      	bne.n	233f2 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   23324:	fa22 f103 	lsr.w	r1, r2, r3
   23328:	07c9      	lsls	r1, r1, #31
   2332a:	d562      	bpl.n	233f2 <gpiote_pin_int_cfg+0xfe>
   2332c:	009a      	lsls	r2, r3, #2
   2332e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23332:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   23336:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   2333a:	f021 0101 	bic.w	r1, r1, #1
   2333e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   23342:	2201      	movs	r2, #1
   23344:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   23348:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2334c:	4620      	mov	r0, r4
   2334e:	2100      	movs	r1, #0
   23350:	f7ff ffb8 	bl	232c4 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   23354:	68b8      	ldr	r0, [r7, #8]
   23356:	40e8      	lsrs	r0, r5
   23358:	f010 0001 	ands.w	r0, r0, #1
   2335c:	d047      	beq.n	233ee <gpiote_pin_int_cfg+0xfa>
   2335e:	68f8      	ldr	r0, [r7, #12]
   23360:	40e8      	lsrs	r0, r5
   23362:	f010 0001 	ands.w	r0, r0, #1
   23366:	d042      	beq.n	233ee <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   23368:	6978      	ldr	r0, [r7, #20]
   2336a:	40e8      	lsrs	r0, r5
   2336c:	f010 0801 	ands.w	r8, r0, #1
   23370:	d04b      	beq.n	2340a <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   23372:	69bb      	ldr	r3, [r7, #24]
   23374:	40eb      	lsrs	r3, r5
   23376:	07db      	lsls	r3, r3, #31
   23378:	d43f      	bmi.n	233fa <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
   2337a:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2337c:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   2337e:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   23380:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   23384:	f003 0301 	and.w	r3, r3, #1
   23388:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   2338c:	42ab      	cmp	r3, r5
   2338e:	bf0c      	ite	eq
   23390:	2502      	moveq	r5, #2
   23392:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   23394:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   23396:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   2339a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   2339e:	f010 0003 	ands.w	r0, r0, #3
   233a2:	d12c      	bne.n	233fe <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   233a4:	0093      	lsls	r3, r2, #2
   233a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   233aa:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   233ae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   233b2:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   233b4:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   233b8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   233bc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   233c0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   233c4:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   233c8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   233cc:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   233ce:	4917      	ldr	r1, [pc, #92]	; (2342c <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   233d0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   233d4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   233d8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   233dc:	f041 0101 	orr.w	r1, r1, #1
   233e0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   233e4:	2301      	movs	r3, #1
   233e6:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   233ea:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
   233ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   233f2:	3301      	adds	r3, #1
   233f4:	2b08      	cmp	r3, #8
   233f6:	d18d      	bne.n	23314 <gpiote_pin_int_cfg+0x20>
   233f8:	e7a8      	b.n	2334c <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   233fa:	2503      	movs	r5, #3
   233fc:	e7ca      	b.n	23394 <gpiote_pin_int_cfg+0xa0>
   233fe:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   23400:	2a08      	cmp	r2, #8
   23402:	d1c8      	bne.n	23396 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   23404:	f06f 0012 	mvn.w	r0, #18
   23408:	e7f1      	b.n	233ee <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2340a:	693b      	ldr	r3, [r7, #16]
   2340c:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2340e:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   23410:	4053      	eors	r3, r2
   23412:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   23416:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2341a:	bf0c      	ite	eq
   2341c:	2103      	moveq	r1, #3
   2341e:	2102      	movne	r1, #2
   23420:	f7ff ff50 	bl	232c4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   23424:	4640      	mov	r0, r8
   23426:	e7e2      	b.n	233ee <gpiote_pin_int_cfg+0xfa>
   23428:	40031000 	.word	0x40031000
   2342c:	40031100 	.word	0x40031100

00023430 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   23430:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   23432:	4b09      	ldr	r3, [pc, #36]	; (23458 <gpio_nrfx_init+0x28>)
   23434:	781a      	ldrb	r2, [r3, #0]
   23436:	b96a      	cbnz	r2, 23454 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   23438:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   2343a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   2343c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   2343e:	2105      	movs	r1, #5
   23440:	f7fe f964 	bl	2170c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   23444:	2031      	movs	r0, #49	; 0x31
   23446:	f7fe f951 	bl	216ec <z_arch_irq_enable>
   2344a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2344e:	4b03      	ldr	r3, [pc, #12]	; (2345c <gpio_nrfx_init+0x2c>)
   23450:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   23454:	2000      	movs	r0, #0
   23456:	bd08      	pop	{r3, pc}
   23458:	2002a6e3 	.word	0x2002a6e3
   2345c:	40031000 	.word	0x40031000

00023460 <gpio_nrfx_config>:
{
   23460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23464:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   23466:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   23468:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2346c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   23470:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   23472:	d049      	beq.n	23508 <gpio_nrfx_config+0xa8>
   23474:	dc2c      	bgt.n	234d0 <gpio_nrfx_config+0x70>
   23476:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2347a:	d03d      	beq.n	234f8 <gpio_nrfx_config+0x98>
   2347c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   23480:	d03e      	beq.n	23500 <gpio_nrfx_config+0xa0>
   23482:	bb60      	cbnz	r0, 234de <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   23484:	f406 7740 	and.w	r7, r6, #768	; 0x300
   23488:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2348c:	d03e      	beq.n	2350c <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   2348e:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   23492:	4263      	negs	r3, r4
   23494:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23496:	2901      	cmp	r1, #1
		from_pin = pin;
   23498:	bf19      	ittee	ne
   2349a:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   2349c:	46a1      	movne	r9, r4
		to_pin   = 31U;
   2349e:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   234a2:	2400      	moveq	r4, #0
   234a4:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   234a8:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   234ac:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   234b0:	ea47 070c 	orr.w	r7, r7, ip
   234b4:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   234b8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2358c <gpio_nrfx_config+0x12c>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   234bc:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   234c0:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   234c4:	45a1      	cmp	r9, r4
   234c6:	d223      	bcs.n	23510 <gpio_nrfx_config+0xb0>
	return 0;
   234c8:	2000      	movs	r0, #0
}
   234ca:	b003      	add	sp, #12
   234cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   234d0:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   234d4:	d016      	beq.n	23504 <gpio_nrfx_config+0xa4>
   234d6:	dc05      	bgt.n	234e4 <gpio_nrfx_config+0x84>
   234d8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   234dc:	d00e      	beq.n	234fc <gpio_nrfx_config+0x9c>
		return -EINVAL;
   234de:	f06f 0015 	mvn.w	r0, #21
   234e2:	e7f2      	b.n	234ca <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   234e4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   234e8:	d004      	beq.n	234f4 <gpio_nrfx_config+0x94>
   234ea:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   234ee:	d1f6      	bne.n	234de <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   234f0:	2007      	movs	r0, #7
		break;
   234f2:	e7c7      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   234f4:	2006      	movs	r0, #6
		break;
   234f6:	e7c5      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   234f8:	2001      	movs	r0, #1
		break;
   234fa:	e7c3      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   234fc:	2003      	movs	r0, #3
		break;
   234fe:	e7c1      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   23500:	2004      	movs	r0, #4
		break;
   23502:	e7bf      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   23504:	2005      	movs	r0, #5
		break;
   23506:	e7bd      	b.n	23484 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   23508:	2002      	movs	r0, #2
   2350a:	e7bb      	b.n	23484 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   2350c:	2303      	movs	r3, #3
   2350e:	e7c2      	b.n	23496 <gpio_nrfx_config+0x36>
	return port->config->config_info;
   23510:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   23514:	6892      	ldr	r2, [r2, #8]
   23516:	7911      	ldrb	r1, [r2, #4]
   23518:	f004 021f 	and.w	r2, r4, #31
   2351c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   23520:	2a1f      	cmp	r2, #31
   23522:	dd01      	ble.n	23528 <gpio_nrfx_config+0xc8>
   23524:	f7ff fec0 	bl	232a8 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   23528:	3280      	adds	r2, #128	; 0x80
   2352a:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   2352e:	68a9      	ldr	r1, [r5, #8]
   23530:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   23534:	2b00      	cmp	r3, #0
   23536:	d025      	beq.n	23584 <gpio_nrfx_config+0x124>
   23538:	4311      	orrs	r1, r2
   2353a:	60a9      	str	r1, [r5, #8]
   2353c:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2353e:	06b0      	lsls	r0, r6, #26
   23540:	bf4c      	ite	mi
   23542:	4311      	orrmi	r1, r2
   23544:	4391      	bicpl	r1, r2
   23546:	6169      	str	r1, [r5, #20]
   23548:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   2354a:	0670      	lsls	r0, r6, #25
   2354c:	bf4c      	ite	mi
   2354e:	4311      	orrmi	r1, r2
   23550:	4391      	bicpl	r1, r2
   23552:	61a9      	str	r1, [r5, #24]
   23554:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   23556:	0770      	lsls	r0, r6, #29
   23558:	bf4c      	ite	mi
   2355a:	4311      	orrmi	r1, r2
   2355c:	4391      	bicpl	r1, r2
   2355e:	6129      	str	r1, [r5, #16]
   23560:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   23562:	0630      	lsls	r0, r6, #24
   23564:	bf4c      	ite	mi
   23566:	430a      	orrmi	r2, r1
   23568:	ea21 0202 	bicpl.w	r2, r1, r2
   2356c:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2356e:	4621      	mov	r1, r4
   23570:	4640      	mov	r0, r8
   23572:	9301      	str	r3, [sp, #4]
   23574:	f7ff febe 	bl	232f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   23578:	2800      	cmp	r0, #0
   2357a:	d1a6      	bne.n	234ca <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2357c:	3401      	adds	r4, #1
   2357e:	b2e4      	uxtb	r4, r4
   23580:	9b01      	ldr	r3, [sp, #4]
   23582:	e79f      	b.n	234c4 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   23584:	ea21 0102 	bic.w	r1, r1, r2
   23588:	e7d7      	b.n	2353a <gpio_nrfx_config+0xda>
   2358a:	bf00      	nop
   2358c:	40842500 	.word	0x40842500

00023590 <gpiote_event_handler>:
{
   23590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   23594:	4f56      	ldr	r7, [pc, #344]	; (236f0 <gpiote_event_handler+0x160>)
   23596:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   23598:	2e01      	cmp	r6, #1
   2359a:	d17c      	bne.n	23696 <gpiote_event_handler+0x106>
	u32_t bit = 1U << pin;
   2359c:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   2359e:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   235a2:	4a54      	ldr	r2, [pc, #336]	; (236f4 <gpiote_event_handler+0x164>)
   235a4:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   235a6:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   235a8:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   235aa:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   235ae:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   235b2:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   235b4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   235b8:	430a      	orrs	r2, r1
   235ba:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   235be:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   235c2:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   235c4:	6912      	ldr	r2, [r2, #16]
   235c6:	405c      	eors	r4, r3
   235c8:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   235ca:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   235ce:	2d00      	cmp	r5, #0
   235d0:	d14e      	bne.n	23670 <gpiote_event_handler+0xe0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   235d2:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   235d4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   235d6:	2701      	movs	r7, #1
   235d8:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   235da:	4d47      	ldr	r5, [pc, #284]	; (236f8 <gpiote_event_handler+0x168>)
   235dc:	f8df c124 	ldr.w	ip, [pc, #292]	; 23704 <gpiote_event_handler+0x174>
   235e0:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   235e4:	fa07 f103 	lsl.w	r1, r7, r3
   235e8:	4211      	tst	r1, r2
   235ea:	d00f      	beq.n	2360c <gpiote_event_handler+0x7c>
   235ec:	eb03 020c 	add.w	r2, r3, ip
   235f0:	0092      	lsls	r2, r2, #2
   235f2:	6811      	ldr	r1, [r2, #0]
   235f4:	2901      	cmp	r1, #1
   235f6:	d109      	bne.n	2360c <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   235f8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   235fc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   23600:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23604:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   23608:	4081      	lsls	r1, r0
   2360a:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2360c:	3301      	adds	r3, #1
   2360e:	2b08      	cmp	r3, #8
   23610:	d1e6      	bne.n	235e0 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   23612:	2c00      	cmp	r4, #0
   23614:	d041      	beq.n	2369a <gpiote_event_handler+0x10a>
	struct gpio_nrfx_data *data = get_port_data(port);
   23616:	4b37      	ldr	r3, [pc, #220]	; (236f4 <gpiote_event_handler+0x164>)
   23618:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2361c:	f8d9 5000 	ldr.w	r5, [r9]
   23620:	2d00      	cmp	r5, #0
   23622:	d03a      	beq.n	2369a <gpiote_event_handler+0x10a>
			cb->handler(port, cb, pins);
   23624:	4698      	mov	r8, r3
	return node->next;
   23626:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   23628:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 23708 <gpiote_event_handler+0x178>
   2362c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 2370c <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   23630:	f8d9 300c 	ldr.w	r3, [r9, #12]
   23634:	68aa      	ldr	r2, [r5, #8]
   23636:	4023      	ands	r3, r4
   23638:	4213      	tst	r3, r2
   2363a:	d015      	beq.n	23668 <gpiote_event_handler+0xd8>
			__ASSERT(cb->handler, "No callback handler!");
   2363c:	686b      	ldr	r3, [r5, #4]
   2363e:	b973      	cbnz	r3, 2365e <gpiote_event_handler+0xce>
   23640:	4659      	mov	r1, fp
   23642:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   23646:	4652      	mov	r2, sl
   23648:	482c      	ldr	r0, [pc, #176]	; (236fc <gpiote_event_handler+0x16c>)
   2364a:	f024 f93e 	bl	478ca <printk>
   2364e:	482c      	ldr	r0, [pc, #176]	; (23700 <gpiote_event_handler+0x170>)
   23650:	f024 f93b 	bl	478ca <printk>
   23654:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   23658:	4650      	mov	r0, sl
   2365a:	f024 f943 	bl	478e4 <assert_post_action>
			cb->handler(port, cb, pins);
   2365e:	686b      	ldr	r3, [r5, #4]
   23660:	4622      	mov	r2, r4
   23662:	4629      	mov	r1, r5
   23664:	4640      	mov	r0, r8
   23666:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23668:	b1bf      	cbz	r7, 2369a <gpiote_event_handler+0x10a>
   2366a:	463d      	mov	r5, r7
   2366c:	683f      	ldr	r7, [r7, #0]
   2366e:	e7df      	b.n	23630 <gpiote_event_handler+0xa0>
		if (level_pins & bit) {
   23670:	ea15 0f08 	tst.w	r5, r8
   23674:	d00a      	beq.n	2368c <gpiote_event_handler+0xfc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23676:	f899 3004 	ldrb.w	r3, [r9, #4]
   2367a:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2367e:	2100      	movs	r1, #0
   23680:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   23684:	f7ff fe1e 	bl	232c4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   23688:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   2368c:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   23690:	ea4f 0848 	mov.w	r8, r8, lsl #1
   23694:	e79b      	b.n	235ce <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   23696:	2400      	movs	r4, #0
   23698:	e79c      	b.n	235d4 <gpiote_event_handler+0x44>
	if (port_event) {
   2369a:	2e01      	cmp	r6, #1
   2369c:	d10e      	bne.n	236bc <gpiote_event_handler+0x12c>
	u32_t pin = 0U;
   2369e:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   236a0:	4b14      	ldr	r3, [pc, #80]	; (236f4 <gpiote_event_handler+0x164>)
   236a2:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   236a4:	681b      	ldr	r3, [r3, #0]
   236a6:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   236aa:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   236ae:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   236b0:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   236b4:	4313      	orrs	r3, r2
   236b6:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   236ba:	b90c      	cbnz	r4, 236c0 <gpiote_event_handler+0x130>
}
   236bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   236c0:	4226      	tst	r6, r4
   236c2:	d012      	beq.n	236ea <gpiote_event_handler+0x15a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   236c4:	692b      	ldr	r3, [r5, #16]
   236c6:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   236c8:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   236cc:	4053      	eors	r3, r2
   236ce:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   236d0:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   236d4:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   236d8:	bf0c      	ite	eq
   236da:	2103      	moveq	r1, #3
   236dc:	2102      	movne	r1, #2
   236de:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   236e2:	f7ff fdef 	bl	232c4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   236e6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   236ea:	3701      	adds	r7, #1
		bit <<= 1;
   236ec:	0076      	lsls	r6, r6, #1
   236ee:	e7e4      	b.n	236ba <gpiote_event_handler+0x12a>
   236f0:	4003117c 	.word	0x4003117c
   236f4:	200323b0 	.word	0x200323b0
   236f8:	40031000 	.word	0x40031000
   236fc:	0004ccf0 	.word	0x0004ccf0
   23700:	0004eb93 	.word	0x0004eb93
   23704:	1000c440 	.word	0x1000c440
   23708:	0004ebaa 	.word	0x0004ebaa
   2370c:	00052295 	.word	0x00052295

00023710 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   23710:	b510      	push	{r4, lr}
   23712:	4604      	mov	r4, r0
   23714:	2200      	movs	r2, #0
   23716:	2101      	movs	r1, #1
   23718:	200a      	movs	r0, #10
   2371a:	f7fd fff7 	bl	2170c <z_arm_irq_priority_set>
	return dev->config->config_info;
   2371e:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   23720:	4a10      	ldr	r2, [pc, #64]	; (23764 <twim_2_init+0x54>)
	return dev->config->config_info;
   23722:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   23724:	4623      	mov	r3, r4
   23726:	f100 0108 	add.w	r1, r0, #8
   2372a:	f019 f80b 	bl	3c744 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   2372e:	4b0e      	ldr	r3, [pc, #56]	; (23768 <twim_2_init+0x58>)
   23730:	4298      	cmp	r0, r3
   23732:	d014      	beq.n	2375e <twim_2_init+0x4e>
		LOG_ERR("Failed to initialize device: %s",
   23734:	2301      	movs	r3, #1
   23736:	f04f 0000 	mov.w	r0, #0
   2373a:	4a0c      	ldr	r2, [pc, #48]	; (2376c <twim_2_init+0x5c>)
   2373c:	f363 0002 	bfi	r0, r3, #0, #3
   23740:	4b0b      	ldr	r3, [pc, #44]	; (23770 <twim_2_init+0x60>)
   23742:	f36f 00c5 	bfc	r0, #3, #3
   23746:	1a9b      	subs	r3, r3, r2
   23748:	08db      	lsrs	r3, r3, #3
   2374a:	f363 108f 	bfi	r0, r3, #6, #10
   2374e:	6823      	ldr	r3, [r4, #0]
   23750:	4908      	ldr	r1, [pc, #32]	; (23774 <twim_2_init+0x64>)
   23752:	681a      	ldr	r2, [r3, #0]
   23754:	f024 f8d6 	bl	47904 <log_string_sync>
		return -EBUSY;
   23758:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   2375c:	bd10      	pop	{r4, pc}
	return 0;
   2375e:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   23760:	e7fc      	b.n	2375c <twim_2_init+0x4c>
   23762:	bf00      	nop
   23764:	00023779 	.word	0x00023779
   23768:	0bad0000 	.word	0x0bad0000
   2376c:	0004a688 	.word	0x0004a688
   23770:	0004a728 	.word	0x0004a728
   23774:	0004ec60 	.word	0x0004ec60

00023778 <event_handler>:
	switch (p_event->type) {
   23778:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   2377a:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
   2377c:	2a01      	cmp	r2, #1
   2377e:	d00a      	beq.n	23796 <event_handler+0x1e>
   23780:	d303      	bcc.n	2378a <event_handler+0x12>
   23782:	2a02      	cmp	r2, #2
   23784:	d009      	beq.n	2379a <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
   23786:	4a06      	ldr	r2, [pc, #24]	; (237a0 <event_handler+0x28>)
   23788:	e000      	b.n	2378c <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   2378a:	4a06      	ldr	r2, [pc, #24]	; (237a4 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   2378c:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
   2378e:	f103 0018 	add.w	r0, r3, #24
   23792:	f01b bb59 	b.w	3ee48 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   23796:	4a04      	ldr	r2, [pc, #16]	; (237a8 <event_handler+0x30>)
   23798:	e7f8      	b.n	2378c <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2379a:	4a04      	ldr	r2, [pc, #16]	; (237ac <event_handler+0x34>)
   2379c:	e7f6      	b.n	2378c <event_handler+0x14>
   2379e:	bf00      	nop
   237a0:	0bad0001 	.word	0x0bad0001
   237a4:	0bad0000 	.word	0x0bad0000
   237a8:	0bae0001 	.word	0x0bae0001
   237ac:	0bae0002 	.word	0x0bae0002

000237b0 <i2c_nrfx_twim_configure>:
	return dev->config->config_info;
   237b0:	6803      	ldr	r3, [r0, #0]
{
   237b2:	b510      	push	{r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
   237b4:	f011 0401 	ands.w	r4, r1, #1
	return dev->config->config_info;
   237b8:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   237ba:	d115      	bne.n	237e8 <i2c_nrfx_twim_configure+0x38>
	switch (I2C_SPEED_GET(dev_config)) {
   237bc:	f3c1 0242 	ubfx	r2, r1, #1, #3
   237c0:	2a01      	cmp	r2, #1
   237c2:	d014      	beq.n	237ee <i2c_nrfx_twim_configure+0x3e>
   237c4:	2a02      	cmp	r2, #2
   237c6:	d01b      	beq.n	23800 <i2c_nrfx_twim_configure+0x50>
		LOG_ERR("unsupported speed");
   237c8:	2301      	movs	r3, #1
   237ca:	f04f 0000 	mov.w	r0, #0
   237ce:	4a0e      	ldr	r2, [pc, #56]	; (23808 <i2c_nrfx_twim_configure+0x58>)
   237d0:	f363 0002 	bfi	r0, r3, #0, #3
   237d4:	4b0d      	ldr	r3, [pc, #52]	; (2380c <i2c_nrfx_twim_configure+0x5c>)
   237d6:	f364 00c5 	bfi	r0, r4, #3, #3
   237da:	1a9b      	subs	r3, r3, r2
   237dc:	08db      	lsrs	r3, r3, #3
   237de:	f363 108f 	bfi	r0, r3, #6, #10
   237e2:	490b      	ldr	r1, [pc, #44]	; (23810 <i2c_nrfx_twim_configure+0x60>)
   237e4:	f024 f88e 	bl	47904 <log_string_sync>
		return -EINVAL;
   237e8:	f06f 0015 	mvn.w	r0, #21
   237ec:	e007      	b.n	237fe <i2c_nrfx_twim_configure+0x4e>
}

__STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                            nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   237ee:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   237f2:	681b      	ldr	r3, [r3, #0]
   237f4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   237f8:	6883      	ldr	r3, [r0, #8]
	return 0;
   237fa:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   237fc:	6359      	str	r1, [r3, #52]	; 0x34
}
   237fe:	bd10      	pop	{r4, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   23800:	681b      	ldr	r3, [r3, #0]
   23802:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   23806:	e7f5      	b.n	237f4 <i2c_nrfx_twim_configure+0x44>
   23808:	0004a688 	.word	0x0004a688
   2380c:	0004a728 	.word	0x0004a728
   23810:	0004ec19 	.word	0x0004ec19

00023814 <i2c_nrfx_twim_transfer>:
{
   23814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23818:	4604      	mov	r4, r0
   2381a:	b089      	sub	sp, #36	; 0x24
   2381c:	460d      	mov	r5, r1
   2381e:	4692      	mov	sl, r2
   23820:	469b      	mov	fp, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   23822:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
   23824:	f04f 31ff 	mov.w	r1, #4294967295
   23828:	f01b fb56 	bl	3eed8 <z_impl_k_sem_take>
	return dev->config->config_info;
   2382c:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
   2382e:	2600      	movs	r6, #0
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   23830:	6898      	ldr	r0, [r3, #8]
   23832:	f018 ffe7 	bl	3c804 <nrfx_twim_enable>
		if (res != NRFX_SUCCESS) {
   23836:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23904 <i2c_nrfx_twim_transfer+0xf0>
   2383a:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
   2383c:	4556      	cmp	r6, sl
   2383e:	689b      	ldr	r3, [r3, #8]
   23840:	d301      	bcc.n	23846 <i2c_nrfx_twim_transfer+0x32>
	int ret = 0;
   23842:	2500      	movs	r5, #0
   23844:	e027      	b.n	23896 <i2c_nrfx_twim_transfer+0x82>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   23846:	7a2f      	ldrb	r7, [r5, #8]
   23848:	9301      	str	r3, [sp, #4]
   2384a:	f017 0908 	ands.w	r9, r7, #8
   2384e:	d14e      	bne.n	238ee <i2c_nrfx_twim_transfer+0xda>
		nrfx_twim_xfer_desc_t cur_xfer = {
   23850:	2212      	movs	r2, #18
   23852:	4649      	mov	r1, r9
   23854:	f10d 000e 	add.w	r0, sp, #14
   23858:	f01d fbee 	bl	41038 <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
   2385c:	f007 0201 	and.w	r2, r7, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
   23860:	f88d 200c 	strb.w	r2, [sp, #12]
   23864:	686a      	ldr	r2, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   23866:	9b01      	ldr	r3, [sp, #4]
		nrfx_twim_xfer_desc_t cur_xfer = {
   23868:	9204      	str	r2, [sp, #16]
   2386a:	682a      	ldr	r2, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   2386c:	f017 0f02 	tst.w	r7, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
   23870:	9206      	str	r2, [sp, #24]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   23872:	a903      	add	r1, sp, #12
   23874:	bf0c      	ite	eq
   23876:	2220      	moveq	r2, #32
   23878:	2200      	movne	r2, #0
   2387a:	4618      	mov	r0, r3
		nrfx_twim_xfer_desc_t cur_xfer = {
   2387c:	f88d b00d 	strb.w	fp, [sp, #13]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   23880:	f019 f80e 	bl	3c8a0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   23884:	4540      	cmp	r0, r8
   23886:	d011      	beq.n	238ac <i2c_nrfx_twim_transfer+0x98>
			if (res == NRFX_ERROR_BUSY) {
   23888:	4b1a      	ldr	r3, [pc, #104]	; (238f4 <i2c_nrfx_twim_transfer+0xe0>)
				ret = -EBUSY;
   2388a:	4298      	cmp	r0, r3
   2388c:	bf14      	ite	ne
   2388e:	f06f 0504 	mvnne.w	r5, #4
   23892:	f06f 050f 	mvneq.w	r5, #15
	return dev->config->config_info;
   23896:	6823      	ldr	r3, [r4, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   23898:	6898      	ldr	r0, [r3, #8]
   2389a:	f018 ffd5 	bl	3c848 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   2389e:	68a0      	ldr	r0, [r4, #8]
	z_impl_k_sem_give(sem);
   238a0:	f01b fad2 	bl	3ee48 <z_impl_k_sem_give>
}
   238a4:	4628      	mov	r0, r5
   238a6:	b009      	add	sp, #36	; 0x24
   238a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   238ac:	68a0      	ldr	r0, [r4, #8]
   238ae:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   238b0:	f04f 31ff 	mov.w	r1, #4294967295
   238b4:	f01b fb10 	bl	3eed8 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   238b8:	68a3      	ldr	r3, [r4, #8]
   238ba:	350c      	adds	r5, #12
   238bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   238be:	4542      	cmp	r2, r8
   238c0:	d013      	beq.n	238ea <i2c_nrfx_twim_transfer+0xd6>
			LOG_ERR("Error %d occurred for message %d", res, i);
   238c2:	2301      	movs	r3, #1
   238c4:	f04f 0000 	mov.w	r0, #0
   238c8:	490b      	ldr	r1, [pc, #44]	; (238f8 <i2c_nrfx_twim_transfer+0xe4>)
   238ca:	f363 0002 	bfi	r0, r3, #0, #3
   238ce:	4b0b      	ldr	r3, [pc, #44]	; (238fc <i2c_nrfx_twim_transfer+0xe8>)
   238d0:	f369 00c5 	bfi	r0, r9, #3, #3
   238d4:	1ac9      	subs	r1, r1, r3
   238d6:	08c9      	lsrs	r1, r1, #3
   238d8:	f361 108f 	bfi	r0, r1, #6, #10
   238dc:	4633      	mov	r3, r6
   238de:	4908      	ldr	r1, [pc, #32]	; (23900 <i2c_nrfx_twim_transfer+0xec>)
   238e0:	f024 f810 	bl	47904 <log_string_sync>
			ret = -EIO;
   238e4:	f06f 0504 	mvn.w	r5, #4
			break;
   238e8:	e7d5      	b.n	23896 <i2c_nrfx_twim_transfer+0x82>
	for (size_t i = 0; i < num_msgs; i++) {
   238ea:	3601      	adds	r6, #1
   238ec:	e7a5      	b.n	2383a <i2c_nrfx_twim_transfer+0x26>
			ret = -ENOTSUP;
   238ee:	f06f 0585 	mvn.w	r5, #133	; 0x85
   238f2:	e7d0      	b.n	23896 <i2c_nrfx_twim_transfer+0x82>
   238f4:	0bad000b 	.word	0x0bad000b
   238f8:	0004a728 	.word	0x0004a728
   238fc:	0004a688 	.word	0x0004a688
   23900:	0004ec2b 	.word	0x0004ec2b
   23904:	0bad0000 	.word	0x0bad0000

00023908 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   23908:	2100      	movs	r1, #0
   2390a:	4802      	ldr	r0, [pc, #8]	; (23914 <pwm_nrfx_get_cycles_per_sec+0xc>)
   2390c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   23910:	2000      	movs	r0, #0
   23912:	4770      	bx	lr
   23914:	00f42400 	.word	0x00f42400

00023918 <pwm_nrfx_init>:
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config->config_info;
   23918:	6803      	ldr	r3, [r0, #0]
{
   2391a:	b510      	push	{r4, lr}
   2391c:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config->config_info;
   2391e:	6898      	ldr	r0, [r3, #8]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   23920:	2200      	movs	r2, #0
   23922:	f100 0108 	add.w	r1, r0, #8
   23926:	f018 fbf5 	bl	3c114 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL);
	if (result != NRFX_SUCCESS) {
   2392a:	4b0d      	ldr	r3, [pc, #52]	; (23960 <pwm_nrfx_init+0x48>)
   2392c:	4298      	cmp	r0, r3
   2392e:	d014      	beq.n	2395a <pwm_nrfx_init+0x42>
		LOG_ERR("Failed to initialize device: %s", dev->config->name);
   23930:	2301      	movs	r3, #1
   23932:	f04f 0000 	mov.w	r0, #0
   23936:	4a0b      	ldr	r2, [pc, #44]	; (23964 <pwm_nrfx_init+0x4c>)
   23938:	f363 0002 	bfi	r0, r3, #0, #3
   2393c:	4b0a      	ldr	r3, [pc, #40]	; (23968 <pwm_nrfx_init+0x50>)
   2393e:	f36f 00c5 	bfc	r0, #3, #3
   23942:	1a9b      	subs	r3, r3, r2
   23944:	08db      	lsrs	r3, r3, #3
   23946:	f363 108f 	bfi	r0, r3, #6, #10
   2394a:	6823      	ldr	r3, [r4, #0]
   2394c:	4907      	ldr	r1, [pc, #28]	; (2396c <pwm_nrfx_init+0x54>)
   2394e:	681a      	ldr	r2, [r3, #0]
   23950:	f023 ffd8 	bl	47904 <log_string_sync>
   23954:	f06f 000f 	mvn.w	r0, #15
		return -EBUSY;
	}

	return 0;
}
   23958:	bd10      	pop	{r4, pc}
	return 0;
   2395a:	2000      	movs	r0, #0
   2395c:	e7fc      	b.n	23958 <pwm_nrfx_init+0x40>
   2395e:	bf00      	nop
   23960:	0bad0000 	.word	0x0bad0000
   23964:	0004a688 	.word	0x0004a688
   23968:	0004a7a0 	.word	0x0004a7a0
   2396c:	0004ec60 	.word	0x0004ec60

00023970 <nrf_gpio_pin_port_decode.isra.2.part.3>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   23970:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   23972:	4a03      	ldr	r2, [pc, #12]	; (23980 <nrf_gpio_pin_port_decode.isra.2.part.3+0x10>)
   23974:	4b03      	ldr	r3, [pc, #12]	; (23984 <nrf_gpio_pin_port_decode.isra.2.part.3+0x14>)
   23976:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   2397a:	4803      	ldr	r0, [pc, #12]	; (23988 <nrf_gpio_pin_port_decode.isra.2.part.3+0x18>)
   2397c:	f01c ffac 	bl	408d8 <__assert_func>
   23980:	0004ec80 	.word	0x0004ec80
   23984:	0004ebd7 	.word	0x0004ebd7
   23988:	0004ebe5 	.word	0x0004ebe5

0002398c <pwm_nrfx_pin_set>:
{
   2398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23990:	461f      	mov	r7, r3
	const struct pwm_nrfx_config *config = dev->config->config_info;
   23992:	6803      	ldr	r3, [r0, #0]
{
   23994:	4688      	mov	r8, r1
	const struct pwm_nrfx_config *config = dev->config->config_info;
   23996:	689e      	ldr	r6, [r3, #8]
{
   23998:	4614      	mov	r4, r2
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
   2399a:	f106 0108 	add.w	r1, r6, #8
   2399e:	460b      	mov	r3, r1
	struct pwm_nrfx_data *data = dev->driver_data;
   239a0:	6885      	ldr	r5, [r0, #8]
   239a2:	f106 000c 	add.w	r0, r6, #12
   239a6:	eba3 0901 	sub.w	r9, r3, r1
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   239aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   239ae:	fa5f f989 	uxtb.w	r9, r9
   239b2:	2aff      	cmp	r2, #255	; 0xff
   239b4:	d004      	beq.n	239c0 <pwm_nrfx_pin_set+0x34>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   239b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   239ba:	4590      	cmp	r8, r2
   239bc:	f000 8093 	beq.w	23ae6 <pwm_nrfx_pin_set+0x15a>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   239c0:	4298      	cmp	r0, r3
   239c2:	d1f0      	bne.n	239a6 <pwm_nrfx_pin_set+0x1a>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   239c4:	2301      	movs	r3, #1
   239c6:	f04f 0000 	mov.w	r0, #0
   239ca:	4a6c      	ldr	r2, [pc, #432]	; (23b7c <pwm_nrfx_pin_set+0x1f0>)
   239cc:	f363 0002 	bfi	r0, r3, #0, #3
   239d0:	4b6b      	ldr	r3, [pc, #428]	; (23b80 <pwm_nrfx_pin_set+0x1f4>)
   239d2:	f36f 00c5 	bfc	r0, #3, #3
   239d6:	1a9b      	subs	r3, r3, r2
   239d8:	08db      	lsrs	r3, r3, #3
   239da:	f363 108f 	bfi	r0, r3, #6, #10
   239de:	4642      	mov	r2, r8
   239e0:	4968      	ldr	r1, [pc, #416]	; (23b84 <pwm_nrfx_pin_set+0x1f8>)
   239e2:	e0b1      	b.n	23b48 <pwm_nrfx_pin_set+0x1bc>
	if (period_cycles > PWM_COUNTERTOP_COUNTERTOP_Msk) {
   239e4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   239e8:	d32a      	bcc.n	23a40 <pwm_nrfx_pin_set+0xb4>
   239ea:	2301      	movs	r3, #1
			u32_t new_countertop = period_cycles >> prescaler;
   239ec:	fa24 f203 	lsr.w	r2, r4, r3
			if (new_countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   239f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   239f4:	b2d9      	uxtb	r1, r3
   239f6:	d20e      	bcs.n	23a16 <pwm_nrfx_pin_set+0x8a>
				data->prescaler = prescaler;
   239f8:	73a9      	strb	r1, [r5, #14]
				data->countertop = new_countertop;
   239fa:	81aa      	strh	r2, [r5, #12]
	nrf_pwm_configure(pwm_instance,
   239fc:	89ab      	ldrh	r3, [r5, #12]
		data->period_cycles = period_cycles;
   239fe:	602c      	str	r4, [r5, #0]
__STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                       nrf_pwm_clk_t  base_clock,
                                       nrf_pwm_mode_t mode,
                                       uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   23a00:	0418      	lsls	r0, r3, #16
			  data->prescaler,
   23a02:	7ba9      	ldrb	r1, [r5, #14]
	nrf_pwm_configure(pwm_instance,
   23a04:	7bb2      	ldrb	r2, [r6, #14]
   23a06:	d51f      	bpl.n	23a48 <pwm_nrfx_pin_set+0xbc>
   23a08:	4b5f      	ldr	r3, [pc, #380]	; (23b88 <pwm_nrfx_pin_set+0x1fc>)
   23a0a:	4a60      	ldr	r2, [pc, #384]	; (23b8c <pwm_nrfx_pin_set+0x200>)
   23a0c:	f240 2197 	movw	r1, #663	; 0x297
   23a10:	485f      	ldr	r0, [pc, #380]	; (23b90 <pwm_nrfx_pin_set+0x204>)
   23a12:	f01c ff61 	bl	408d8 <__assert_func>
   23a16:	3301      	adds	r3, #1
		for (u8_t prescaler = 1;
   23a18:	2b08      	cmp	r3, #8
   23a1a:	d1e7      	bne.n	239ec <pwm_nrfx_pin_set+0x60>
			LOG_ERR("Prescaler for period_cycles %d not found.\n",
   23a1c:	2301      	movs	r3, #1
   23a1e:	f04f 0000 	mov.w	r0, #0
   23a22:	4a56      	ldr	r2, [pc, #344]	; (23b7c <pwm_nrfx_pin_set+0x1f0>)
   23a24:	f363 0002 	bfi	r0, r3, #0, #3
   23a28:	4b55      	ldr	r3, [pc, #340]	; (23b80 <pwm_nrfx_pin_set+0x1f4>)
   23a2a:	f36f 00c5 	bfc	r0, #3, #3
   23a2e:	1a9b      	subs	r3, r3, r2
   23a30:	08db      	lsrs	r3, r3, #3
   23a32:	f363 108f 	bfi	r0, r3, #6, #10
   23a36:	4622      	mov	r2, r4
   23a38:	4956      	ldr	r1, [pc, #344]	; (23b94 <pwm_nrfx_pin_set+0x208>)
   23a3a:	f023 ff63 	bl	47904 <log_string_sync>
   23a3e:	e074      	b.n	23b2a <pwm_nrfx_pin_set+0x19e>
		data->prescaler = 0U;
   23a40:	2300      	movs	r3, #0
		data->countertop = period_cycles;
   23a42:	81ac      	strh	r4, [r5, #12]
		data->prescaler = 0U;
   23a44:	73ab      	strb	r3, [r5, #14]
   23a46:	e7d9      	b.n	239fc <pwm_nrfx_pin_set+0x70>

    p_reg->PRESCALER  = base_clock;
   23a48:	f8ca 150c 	str.w	r1, [sl, #1292]	; 0x50c
    p_reg->MODE       = mode;
   23a4c:	f8ca 2504 	str.w	r2, [sl, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   23a50:	f8ca 3508 	str.w	r3, [sl, #1288]	; 0x508
	if (pulse_cycles > period_cycles) {
   23a54:	42a7      	cmp	r7, r4
   23a56:	d915      	bls.n	23a84 <pwm_nrfx_pin_set+0xf8>
		LOG_ERR("Invalid pulse_cycles %d, > period_cycles %d.",
   23a58:	2301      	movs	r3, #1
   23a5a:	f04f 0000 	mov.w	r0, #0
   23a5e:	4a47      	ldr	r2, [pc, #284]	; (23b7c <pwm_nrfx_pin_set+0x1f0>)
   23a60:	f363 0002 	bfi	r0, r3, #0, #3
   23a64:	4b46      	ldr	r3, [pc, #280]	; (23b80 <pwm_nrfx_pin_set+0x1f4>)
   23a66:	f36f 00c5 	bfc	r0, #3, #3
   23a6a:	1a9b      	subs	r3, r3, r2
   23a6c:	08db      	lsrs	r3, r3, #3
   23a6e:	f363 108f 	bfi	r0, r3, #6, #10
   23a72:	463a      	mov	r2, r7
   23a74:	4623      	mov	r3, r4
   23a76:	4948      	ldr	r1, [pc, #288]	; (23b98 <pwm_nrfx_pin_set+0x20c>)
   23a78:	f023 ff44 	bl	47904 <log_string_sync>
		return -EINVAL;
   23a7c:	f06f 0015 	mvn.w	r0, #21
}
   23a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23a84:	eb05 0149 	add.w	r1, r5, r9, lsl #1
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   23a88:	888b      	ldrh	r3, [r1, #4]
		| (pulse_cycles >> data->prescaler));
   23a8a:	7baa      	ldrb	r2, [r5, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   23a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   23a90:	fa27 f202 	lsr.w	r2, r7, r2
   23a94:	4313      	orrs	r3, r2
	data->current[channel] = (
   23a96:	808b      	strh	r3, [r1, #4]
	if (pulse_cycles == 0U || pulse_cycles == period_cycles) {
   23a98:	b10f      	cbz	r7, 23a9e <pwm_nrfx_pin_set+0x112>
   23a9a:	42a7      	cmp	r7, r4
   23a9c:	d110      	bne.n	23ac0 <pwm_nrfx_pin_set+0x134>
			config->initial_config.output_pins[channel]
   23a9e:	44b1      	add	r9, r6
   23aa0:	f999 2008 	ldrsb.w	r2, [r9, #8]
   23aa4:	4b3d      	ldr	r3, [pc, #244]	; (23b9c <pwm_nrfx_pin_set+0x210>)
			&& !channel_inverted_state;
   23aa6:	2f00      	cmp	r7, #0
   23aa8:	d163      	bne.n	23b72 <pwm_nrfx_pin_set+0x1e6>
			&& channel_inverted_state;
   23aaa:	2c00      	cmp	r4, #0
   23aac:	d157      	bne.n	23b5e <pwm_nrfx_pin_set+0x1d2>
   23aae:	f1b8 0f1f 	cmp.w	r8, #31
   23ab2:	d901      	bls.n	23ab8 <pwm_nrfx_pin_set+0x12c>
   23ab4:	f7ff ff5c 	bl	23970 <nrf_gpio_pin_port_decode.isra.2.part.3>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23ab8:	2101      	movs	r1, #1
   23aba:	fa01 f108 	lsl.w	r1, r1, r8
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   23abe:	60d9      	str	r1, [r3, #12]
   23ac0:	1d2a      	adds	r2, r5, #4
   23ac2:	f105 010c 	add.w	r1, r5, #12
			data->current[channel]
   23ac6:	f832 3b02 	ldrh.w	r3, [r2], #2
		u16_t channel_pulse_cycle =
   23aca:	f3c3 030e 	ubfx	r3, r3, #0, #15
		if (channel_pulse_cycle > 0
   23ace:	b113      	cbz	r3, 23ad6 <pwm_nrfx_pin_set+0x14a>
		    && channel_pulse_cycle < data->countertop) {
   23ad0:	89a8      	ldrh	r0, [r5, #12]
   23ad2:	4298      	cmp	r0, r3
   23ad4:	d83b      	bhi.n	23b4e <pwm_nrfx_pin_set+0x1c2>
	for (channel = 0U; channel < NRF_PWM_CHANNEL_COUNT; channel++) {
   23ad6:	4291      	cmp	r1, r2
   23ad8:	d1f5      	bne.n	23ac6 <pwm_nrfx_pin_set+0x13a>
		nrfx_pwm_stop(&config->pwm, false);
   23ada:	2100      	movs	r1, #0
   23adc:	4630      	mov	r0, r6
   23ade:	f018 fc2b 	bl	3c338 <nrfx_pwm_stop>
	return 0;
   23ae2:	2000      	movs	r0, #0
   23ae4:	e7cc      	b.n	23a80 <pwm_nrfx_pin_set+0xf4>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   23ae6:	7bb3      	ldrb	r3, [r6, #14]
   23ae8:	2b01      	cmp	r3, #1
   23aea:	d101      	bne.n	23af0 <pwm_nrfx_pin_set+0x164>
		period_cycles /= 2;
   23aec:	0864      	lsrs	r4, r4, #1
		pulse_cycles /= 2;
   23aee:	087f      	lsrs	r7, r7, #1
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
   23af0:	4630      	mov	r0, r6
	NRF_PWM_Type *pwm_instance = config->pwm.p_registers;
   23af2:	f8d6 a000 	ldr.w	sl, [r6]
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
   23af6:	f018 fbfb 	bl	3c2f0 <nrfx_pwm_is_stopped>
   23afa:	4602      	mov	r2, r0
   23afc:	2800      	cmp	r0, #0
   23afe:	f47f af71 	bne.w	239e4 <pwm_nrfx_pin_set+0x58>
		if (period_cycles == data->period_cycles) {
   23b02:	682b      	ldr	r3, [r5, #0]
   23b04:	429c      	cmp	r4, r3
   23b06:	d0a5      	beq.n	23a54 <pwm_nrfx_pin_set+0xc8>
		LOG_ERR("Fail:requested period cycles:%d, != used %d\n",
   23b08:	2101      	movs	r1, #1
   23b0a:	f04f 0000 	mov.w	r0, #0
   23b0e:	f361 0002 	bfi	r0, r1, #0, #3
   23b12:	f362 00c5 	bfi	r0, r2, #3, #3
   23b16:	4919      	ldr	r1, [pc, #100]	; (23b7c <pwm_nrfx_pin_set+0x1f0>)
   23b18:	4a19      	ldr	r2, [pc, #100]	; (23b80 <pwm_nrfx_pin_set+0x1f4>)
   23b1a:	1a52      	subs	r2, r2, r1
   23b1c:	08d2      	lsrs	r2, r2, #3
   23b1e:	f362 108f 	bfi	r0, r2, #6, #10
   23b22:	491f      	ldr	r1, [pc, #124]	; (23ba0 <pwm_nrfx_pin_set+0x214>)
   23b24:	4622      	mov	r2, r4
   23b26:	f023 feed 	bl	47904 <log_string_sync>
		LOG_ERR("Incompatible period %d", period_cycles);
   23b2a:	2301      	movs	r3, #1
   23b2c:	f04f 0000 	mov.w	r0, #0
   23b30:	4a12      	ldr	r2, [pc, #72]	; (23b7c <pwm_nrfx_pin_set+0x1f0>)
   23b32:	f363 0002 	bfi	r0, r3, #0, #3
   23b36:	4b12      	ldr	r3, [pc, #72]	; (23b80 <pwm_nrfx_pin_set+0x1f4>)
   23b38:	f36f 00c5 	bfc	r0, #3, #3
   23b3c:	1a9b      	subs	r3, r3, r2
   23b3e:	4622      	mov	r2, r4
   23b40:	08db      	lsrs	r3, r3, #3
   23b42:	4918      	ldr	r1, [pc, #96]	; (23ba4 <pwm_nrfx_pin_set+0x218>)
   23b44:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   23b48:	f023 fedc 	bl	47904 <log_string_sync>
   23b4c:	e796      	b.n	23a7c <pwm_nrfx_pin_set+0xf0>
		nrfx_pwm_simple_playback(&config->pwm,
   23b4e:	2302      	movs	r3, #2
   23b50:	2201      	movs	r2, #1
   23b52:	f106 0114 	add.w	r1, r6, #20
   23b56:	4630      	mov	r0, r6
   23b58:	f018 fb70 	bl	3c23c <nrfx_pwm_simple_playback>
   23b5c:	e7c1      	b.n	23ae2 <pwm_nrfx_pin_set+0x156>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   23b5e:	2a00      	cmp	r2, #0
   23b60:	daa5      	bge.n	23aae <pwm_nrfx_pin_set+0x122>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   23b62:	f1b8 0f1f 	cmp.w	r8, #31
   23b66:	d8a5      	bhi.n	23ab4 <pwm_nrfx_pin_set+0x128>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23b68:	2101      	movs	r1, #1
   23b6a:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   23b6e:	6099      	str	r1, [r3, #8]
   23b70:	e7a6      	b.n	23ac0 <pwm_nrfx_pin_set+0x134>
			&& channel_inverted_state;
   23b72:	42a7      	cmp	r7, r4
   23b74:	d1f5      	bne.n	23b62 <pwm_nrfx_pin_set+0x1d6>
   23b76:	2a00      	cmp	r2, #0
   23b78:	db99      	blt.n	23aae <pwm_nrfx_pin_set+0x122>
   23b7a:	e7f2      	b.n	23b62 <pwm_nrfx_pin_set+0x1d6>
   23b7c:	0004a688 	.word	0x0004a688
   23b80:	0004a7a0 	.word	0x0004a7a0
   23b84:	0004ed9b 	.word	0x0004ed9b
   23b88:	0004ed03 	.word	0x0004ed03
   23b8c:	0004ec99 	.word	0x0004ec99
   23b90:	0004ed24 	.word	0x0004ed24
   23b94:	0004ecd8 	.word	0x0004ecd8
   23b98:	0004ed6e 	.word	0x0004ed6e
   23b9c:	40842500 	.word	0x40842500
   23ba0:	0004ecab 	.word	0x0004ecab
   23ba4:	0004ed57 	.word	0x0004ed57

00023ba8 <adxl362_accel_convert>:
	}
}

static void adxl362_accel_convert(struct sensor_value *val, int accel,
				  int range)
{
   23ba8:	2a02      	cmp	r2, #2
   23baa:	b570      	push	{r4, r5, r6, lr}
   23bac:	bfcc      	ite	gt
   23bae:	f06f 0415 	mvngt.w	r4, #21
   23bb2:	4b11      	ldrle	r3, [pc, #68]	; (23bf8 <adxl362_accel_convert+0x50>)
   23bb4:	4605      	mov	r5, r0
   23bb6:	bfd8      	it	le
   23bb8:	f933 4012 	ldrshle.w	r4, [r3, r2, lsl #1]
	int scale = adxl362_range_to_scale(range);
	long micro_ms2 = accel * SENSOR_G / scale;
   23bbc:	480f      	ldr	r0, [pc, #60]	; (23bfc <adxl362_accel_convert+0x54>)
   23bbe:	4622      	mov	r2, r4
   23bc0:	17e3      	asrs	r3, r4, #31
   23bc2:	fb81 0100 	smull	r0, r1, r1, r0
   23bc6:	f7f5 f8a9 	bl	18d1c <__aeabi_ldivmod>

	__ASSERT_NO_MSG(scale != -EINVAL);
   23bca:	3416      	adds	r4, #22
	long micro_ms2 = accel * SENSOR_G / scale;
   23bcc:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(scale != -EINVAL);
   23bce:	d10b      	bne.n	23be8 <adxl362_accel_convert+0x40>
   23bd0:	490b      	ldr	r1, [pc, #44]	; (23c00 <adxl362_accel_convert+0x58>)
   23bd2:	480c      	ldr	r0, [pc, #48]	; (23c04 <adxl362_accel_convert+0x5c>)
   23bd4:	f240 233d 	movw	r3, #573	; 0x23d
   23bd8:	4a0b      	ldr	r2, [pc, #44]	; (23c08 <adxl362_accel_convert+0x60>)
   23bda:	f023 fe76 	bl	478ca <printk>
   23bde:	f240 213d 	movw	r1, #573	; 0x23d
   23be2:	4809      	ldr	r0, [pc, #36]	; (23c08 <adxl362_accel_convert+0x60>)
   23be4:	f023 fe7e 	bl	478e4 <assert_post_action>

	val->val1 = micro_ms2 / 1000000;
   23be8:	4a08      	ldr	r2, [pc, #32]	; (23c0c <adxl362_accel_convert+0x64>)
   23bea:	fb96 f3f2 	sdiv	r3, r6, r2
   23bee:	602b      	str	r3, [r5, #0]
	val->val2 = micro_ms2 % 1000000;
   23bf0:	fb02 6313 	mls	r3, r2, r3, r6
   23bf4:	606b      	str	r3, [r5, #4]
}
   23bf6:	bd70      	pop	{r4, r5, r6, pc}
   23bf8:	0004c90c 	.word	0x0004c90c
   23bfc:	0095a33a 	.word	0x0095a33a
   23c00:	0004ee0b 	.word	0x0004ee0b
   23c04:	0004ccf0 	.word	0x0004ccf0
   23c08:	0004edd6 	.word	0x0004edd6
   23c0c:	000f4240 	.word	0x000f4240

00023c10 <adxl362_sample_fetch>:
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   23c10:	2925      	cmp	r1, #37	; 0x25
{
   23c12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23c14:	4605      	mov	r5, r0
	struct adxl362_data *data = dev->driver_data;
   23c16:	6884      	ldr	r4, [r0, #8]
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   23c18:	d00b      	beq.n	23c32 <adxl362_sample_fetch+0x22>
   23c1a:	4910      	ldr	r1, [pc, #64]	; (23c5c <adxl362_sample_fetch+0x4c>)
   23c1c:	4810      	ldr	r0, [pc, #64]	; (23c60 <adxl362_sample_fetch+0x50>)
   23c1e:	f44f 7306 	mov.w	r3, #536	; 0x218
   23c22:	4a10      	ldr	r2, [pc, #64]	; (23c64 <adxl362_sample_fetch+0x54>)
   23c24:	f023 fe51 	bl	478ca <printk>
   23c28:	f44f 7106 	mov.w	r1, #536	; 0x218
   23c2c:	480d      	ldr	r0, [pc, #52]	; (23c64 <adxl362_sample_fetch+0x54>)
   23c2e:	f023 fe59 	bl	478e4 <assert_post_action>
	ret = adxl362_get_reg(dev, (u8_t *)buf, ADXL362_REG_XDATA_L,
   23c32:	2308      	movs	r3, #8
   23c34:	220e      	movs	r2, #14
   23c36:	4669      	mov	r1, sp
   23c38:	68a8      	ldr	r0, [r5, #8]
   23c3a:	f024 fe4d 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   23c3e:	b958      	cbnz	r0, 23c58 <adxl362_sample_fetch+0x48>
	data->acc_x = sys_le16_to_cpu(buf[0]);
   23c40:	f8bd 3000 	ldrh.w	r3, [sp]
   23c44:	83a3      	strh	r3, [r4, #28]
	data->acc_y = sys_le16_to_cpu(buf[1]);
   23c46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   23c4a:	83e3      	strh	r3, [r4, #30]
	data->acc_z = sys_le16_to_cpu(buf[2]);
   23c4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   23c50:	8423      	strh	r3, [r4, #32]
	data->temp = sys_le16_to_cpu(buf[3]);
   23c52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   23c56:	8463      	strh	r3, [r4, #34]	; 0x22
}
   23c58:	b003      	add	sp, #12
   23c5a:	bd30      	pop	{r4, r5, pc}
   23c5c:	0004eeac 	.word	0x0004eeac
   23c60:	0004ccf0 	.word	0x0004ccf0
   23c64:	0004edd6 	.word	0x0004edd6

00023c68 <adxl362_init>:
 * @return  0 - the initialization was successful and the device is present;
 *         -1 - an error occurred.
 *
 */
static int adxl362_init(struct device *dev)
{
   23c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct adxl362_config *config = dev->config->config_info;
   23c6a:	6803      	ldr	r3, [r0, #0]
{
   23c6c:	4604      	mov	r4, r0
	const struct adxl362_config *config = dev->config->config_info;
   23c6e:	689e      	ldr	r6, [r3, #8]
	struct adxl362_data *data = dev->driver_data;
   23c70:	6885      	ldr	r5, [r0, #8]
{
   23c72:	b085      	sub	sp, #20
	u8_t value;
	int err;

	data->spi = device_get_binding(config->spi_name);
   23c74:	6830      	ldr	r0, [r6, #0]
   23c76:	f019 f837 	bl	3cce8 <z_impl_device_get_binding>
   23c7a:	6028      	str	r0, [r5, #0]
	if (!data->spi) {
   23c7c:	2800      	cmp	r0, #0
   23c7e:	f000 8120 	beq.w	23ec2 <adxl362_init+0x25a>
		LOG_DBG("spi device not found: %s", config->spi_name);
		return -EINVAL;
	}

	data->spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
   23c82:	f44f 7380 	mov.w	r3, #256	; 0x100
   23c86:	812b      	strh	r3, [r5, #8]
	data->spi_cfg.frequency = config->spi_max_frequency;
   23c88:	6873      	ldr	r3, [r6, #4]
	data->spi_cfg.slave = config->spi_slave;

#if defined(DT_INST_0_ADI_ADXL362_CS_GPIOS_CONTROLLER)
	data->adxl362_cs_ctrl.gpio_dev =
				device_get_binding(config->gpio_cs_port);
   23c8a:	68f0      	ldr	r0, [r6, #12]
	data->spi_cfg.frequency = config->spi_max_frequency;
   23c8c:	606b      	str	r3, [r5, #4]
	data->spi_cfg.slave = config->spi_slave;
   23c8e:	8933      	ldrh	r3, [r6, #8]
   23c90:	816b      	strh	r3, [r5, #10]
   23c92:	f019 f829 	bl	3cce8 <z_impl_device_get_binding>
	data->adxl362_cs_ctrl.gpio_dev =
   23c96:	6128      	str	r0, [r5, #16]
	if (!data->adxl362_cs_ctrl.gpio_dev) {
   23c98:	b998      	cbnz	r0, 23cc2 <adxl362_init+0x5a>
		LOG_ERR("Unable to get GPIO SPI CS device");
   23c9a:	2301      	movs	r3, #1
   23c9c:	f04f 0200 	mov.w	r2, #0
   23ca0:	4989      	ldr	r1, [pc, #548]	; (23ec8 <adxl362_init+0x260>)
   23ca2:	f363 0202 	bfi	r2, r3, #0, #3
   23ca6:	4b89      	ldr	r3, [pc, #548]	; (23ecc <adxl362_init+0x264>)
   23ca8:	f360 02c5 	bfi	r2, r0, #3, #3
   23cac:	1a5b      	subs	r3, r3, r1
   23cae:	08db      	lsrs	r3, r3, #3
   23cb0:	f363 128f 	bfi	r2, r3, #6, #10
   23cb4:	4986      	ldr	r1, [pc, #536]	; (23ed0 <adxl362_init+0x268>)
   23cb6:	4610      	mov	r0, r2
   23cb8:	f023 fe24 	bl	47904 <log_string_sync>
		LOG_ERR("Failed: %d\n", value);
		return -ENODEV;
	}

	if (adxl362_chip_init(dev) < 0) {
		return -ENODEV;
   23cbc:	f06f 0512 	mvn.w	r5, #18
   23cc0:	e0cf      	b.n	23e62 <adxl362_init+0x1fa>
	data->adxl362_cs_ctrl.delay = 0U;
   23cc2:	2700      	movs	r7, #0
	data->adxl362_cs_ctrl.gpio_pin = config->cs_gpio;
   23cc4:	7c33      	ldrb	r3, [r6, #16]
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   23cc6:	221f      	movs	r2, #31
	data->adxl362_cs_ctrl.gpio_pin = config->cs_gpio;
   23cc8:	616b      	str	r3, [r5, #20]
	data->spi_cfg.cs = &data->adxl362_cs_ctrl;
   23cca:	f105 0310 	add.w	r3, r5, #16
   23cce:	60eb      	str	r3, [r5, #12]
	data->adxl362_cs_ctrl.delay = 0U;
   23cd0:	61af      	str	r7, [r5, #24]
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   23cd2:	2301      	movs	r3, #1
   23cd4:	2152      	movs	r1, #82	; 0x52
   23cd6:	68a0      	ldr	r0, [r4, #8]
   23cd8:	f024 fdf3 	bl	488c2 <adxl362_set_reg.isra.0>
	if (err) {
   23cdc:	4605      	mov	r5, r0
   23cde:	b188      	cbz	r0, 23d04 <adxl362_init+0x9c>
		LOG_ERR("adxl362_software_reset failed, error %d\n", err);
   23ce0:	2301      	movs	r3, #1
   23ce2:	f04f 0000 	mov.w	r0, #0
   23ce6:	4a78      	ldr	r2, [pc, #480]	; (23ec8 <adxl362_init+0x260>)
   23ce8:	f363 0002 	bfi	r0, r3, #0, #3
   23cec:	4b77      	ldr	r3, [pc, #476]	; (23ecc <adxl362_init+0x264>)
   23cee:	f367 00c5 	bfi	r0, r7, #3, #3
   23cf2:	1a9b      	subs	r3, r3, r2
   23cf4:	462a      	mov	r2, r5
   23cf6:	08db      	lsrs	r3, r3, #3
   23cf8:	4976      	ldr	r1, [pc, #472]	; (23ed4 <adxl362_init+0x26c>)
   23cfa:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Failed: %d\n", value);
   23cfe:	f023 fe01 	bl	47904 <log_string_sync>
   23d02:	e7db      	b.n	23cbc <adxl362_init+0x54>
	return z_impl_k_sleep(ms);
   23d04:	2005      	movs	r0, #5
   23d06:	f026 f9ee 	bl	4a0e6 <z_impl_k_sleep>
	adxl362_get_reg(dev, &value, ADXL362_REG_PARTID, 1);
   23d0a:	2202      	movs	r2, #2
   23d0c:	2301      	movs	r3, #1
   23d0e:	f10d 010d 	add.w	r1, sp, #13
   23d12:	68a0      	ldr	r0, [r4, #8]
   23d14:	f024 fde0 	bl	488d8 <adxl362_get_reg.isra.1>
	if (value != ADXL362_PART_ID) {
   23d18:	f89d 200d 	ldrb.w	r2, [sp, #13]
   23d1c:	2af2      	cmp	r2, #242	; 0xf2
   23d1e:	d00e      	beq.n	23d3e <adxl362_init+0xd6>
		LOG_ERR("Failed: %d\n", value);
   23d20:	2301      	movs	r3, #1
   23d22:	f04f 0000 	mov.w	r0, #0
   23d26:	4968      	ldr	r1, [pc, #416]	; (23ec8 <adxl362_init+0x260>)
   23d28:	f363 0002 	bfi	r0, r3, #0, #3
   23d2c:	4b67      	ldr	r3, [pc, #412]	; (23ecc <adxl362_init+0x264>)
   23d2e:	f365 00c5 	bfi	r0, r5, #3, #3
   23d32:	1a5b      	subs	r3, r3, r1
   23d34:	08db      	lsrs	r3, r3, #3
   23d36:	f363 108f 	bfi	r0, r3, #6, #10
   23d3a:	4967      	ldr	r1, [pc, #412]	; (23ed8 <adxl362_init+0x270>)
   23d3c:	e7df      	b.n	23cfe <adxl362_init+0x96>
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   23d3e:	2302      	movs	r3, #2
   23d40:	2220      	movs	r2, #32
   23d42:	21c8      	movs	r1, #200	; 0xc8
   23d44:	68a0      	ldr	r0, [r4, #8]
   23d46:	f024 fdbc 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23d4a:	2800      	cmp	r0, #0
   23d4c:	f040 808c 	bne.w	23e68 <adxl362_init+0x200>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_ACT, 1);
   23d50:	2301      	movs	r3, #1
   23d52:	2222      	movs	r2, #34	; 0x22
   23d54:	4619      	mov	r1, r3
   23d56:	68a0      	ldr	r0, [r4, #8]
   23d58:	f024 fdb3 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23d5c:	2800      	cmp	r0, #0
   23d5e:	f040 8083 	bne.w	23e68 <adxl362_init+0x200>
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   23d62:	2301      	movs	r3, #1
   23d64:	2227      	movs	r2, #39	; 0x27
   23d66:	f10d 010f 	add.w	r1, sp, #15
   23d6a:	68a0      	ldr	r0, [r4, #8]
   23d6c:	f024 fdb4 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   23d70:	2800      	cmp	r0, #0
   23d72:	d179      	bne.n	23e68 <adxl362_init+0x200>
	new_act_inact_reg = old_act_inact_reg & ~ADXL362_ACT_INACT_CTL_ACT_REF;
   23d74:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   23d78:	2301      	movs	r3, #1
	new_act_inact_reg = old_act_inact_reg & ~ADXL362_ACT_INACT_CTL_ACT_REF;
   23d7a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   23d7e:	2227      	movs	r2, #39	; 0x27
   23d80:	f041 0103 	orr.w	r1, r1, #3
   23d84:	68a0      	ldr	r0, [r4, #8]
   23d86:	f024 fd9c 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23d8a:	2800      	cmp	r0, #0
   23d8c:	d16c      	bne.n	23e68 <adxl362_init+0x200>
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   23d8e:	2302      	movs	r3, #2
   23d90:	2223      	movs	r2, #35	; 0x23
   23d92:	21c8      	movs	r1, #200	; 0xc8
   23d94:	68a0      	ldr	r0, [r4, #8]
   23d96:	f024 fd94 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23d9a:	2800      	cmp	r0, #0
   23d9c:	d164      	bne.n	23e68 <adxl362_init+0x200>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_INACT_L, 2);
   23d9e:	2302      	movs	r3, #2
   23da0:	2225      	movs	r2, #37	; 0x25
   23da2:	2101      	movs	r1, #1
   23da4:	68a0      	ldr	r0, [r4, #8]
   23da6:	f024 fd8c 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23daa:	2800      	cmp	r0, #0
   23dac:	d15c      	bne.n	23e68 <adxl362_init+0x200>
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   23dae:	2301      	movs	r3, #1
   23db0:	2227      	movs	r2, #39	; 0x27
   23db2:	f10d 010f 	add.w	r1, sp, #15
   23db6:	68a0      	ldr	r0, [r4, #8]
   23db8:	f024 fd8e 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   23dbc:	2800      	cmp	r0, #0
   23dbe:	d153      	bne.n	23e68 <adxl362_init+0x200>
	new_act_inact_reg = old_act_inact_reg &
   23dc0:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   23dc4:	2301      	movs	r3, #1
	new_act_inact_reg = old_act_inact_reg &
   23dc6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   23dca:	2227      	movs	r2, #39	; 0x27
   23dcc:	f041 010c 	orr.w	r1, r1, #12
   23dd0:	68a0      	ldr	r0, [r4, #8]
   23dd2:	f024 fd76 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23dd6:	2800      	cmp	r0, #0
   23dd8:	d146      	bne.n	23e68 <adxl362_init+0x200>
	ret = adxl362_set_reg(dev, write_val, ADXL362_REG_FIFO_CTL, 1);
   23dda:	2301      	movs	r3, #1
   23ddc:	2228      	movs	r2, #40	; 0x28
   23dde:	2108      	movs	r1, #8
   23de0:	68a0      	ldr	r0, [r4, #8]
   23de2:	f024 fd6e 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23de6:	2800      	cmp	r0, #0
   23de8:	d13e      	bne.n	23e68 <adxl362_init+0x200>
	ret = adxl362_set_reg(dev, water_mark_lvl, ADXL362_REG_FIFO_SAMPLES, 2);
   23dea:	4601      	mov	r1, r0
   23dec:	2302      	movs	r3, #2
   23dee:	2229      	movs	r2, #41	; 0x29
   23df0:	68a0      	ldr	r0, [r4, #8]
   23df2:	f024 fd66 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23df6:	bbb8      	cbnz	r0, 23e68 <adxl362_init+0x200>
	ret = adxl362_set_range(dev, ADXL362_DEFAULT_RANGE_ACC);
   23df8:	4601      	mov	r1, r0
   23dfa:	4620      	mov	r0, r4
   23dfc:	f024 fd75 	bl	488ea <adxl362_set_range>
	if (ret) {
   23e00:	bb90      	cbnz	r0, 23e68 <adxl362_init+0x200>
	ret = adxl362_set_output_rate(dev, ADXL362_DEFAULT_ODR_ACC);
   23e02:	4601      	mov	r1, r0
   23e04:	4620      	mov	r0, r4
   23e06:	f024 fd8d 	bl	48924 <adxl362_set_output_rate>
	if (ret) {
   23e0a:	bb68      	cbnz	r0, 23e68 <adxl362_init+0x200>
	ret = adxl362_get_reg(dev, &old_power_ctl, ADXL362_REG_POWER_CTL, 1);
   23e0c:	2301      	movs	r3, #1
   23e0e:	222d      	movs	r2, #45	; 0x2d
   23e10:	f10d 010f 	add.w	r1, sp, #15
   23e14:	68a0      	ldr	r0, [r4, #8]
   23e16:	f024 fd5f 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   23e1a:	bb28      	cbnz	r0, 23e68 <adxl362_init+0x200>
	new_power_ctl = old_power_ctl & ~ADXL362_POWER_CTL_MEASURE(0x3);
   23e1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
	return adxl362_set_reg(dev, new_power_ctl, ADXL362_REG_POWER_CTL, 1);
   23e20:	2301      	movs	r3, #1
	new_power_ctl = old_power_ctl & ~ADXL362_POWER_CTL_MEASURE(0x3);
   23e22:	f021 0103 	bic.w	r1, r1, #3
	return adxl362_set_reg(dev, new_power_ctl, ADXL362_REG_POWER_CTL, 1);
   23e26:	222d      	movs	r2, #45	; 0x2d
   23e28:	f041 0102 	orr.w	r1, r1, #2
   23e2c:	68a0      	ldr	r0, [r4, #8]
   23e2e:	f024 fd48 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   23e32:	b9c8      	cbnz	r0, 23e68 <adxl362_init+0x200>
	}

#if defined(CONFIG_ADXL362_TRIGGER)
	if (adxl362_init_interrupt(dev) < 0) {
   23e34:	4620      	mov	r0, r4
   23e36:	f000 f92f 	bl	24098 <adxl362_init_interrupt>
   23e3a:	2800      	cmp	r0, #0
   23e3c:	da17      	bge.n	23e6e <adxl362_init+0x206>
		LOG_ERR("Failed to initialize interrupt!");
   23e3e:	2301      	movs	r3, #1
   23e40:	f04f 0000 	mov.w	r0, #0
   23e44:	4a20      	ldr	r2, [pc, #128]	; (23ec8 <adxl362_init+0x260>)
   23e46:	f363 0002 	bfi	r0, r3, #0, #3
   23e4a:	4b20      	ldr	r3, [pc, #128]	; (23ecc <adxl362_init+0x264>)
   23e4c:	f36f 00c5 	bfc	r0, #3, #3
   23e50:	1a9b      	subs	r3, r3, r2
   23e52:	08db      	lsrs	r3, r3, #3
   23e54:	4921      	ldr	r1, [pc, #132]	; (23edc <adxl362_init+0x274>)
   23e56:	f363 108f 	bfi	r0, r3, #6, #10
	}

	if (adxl362_interrupt_config(dev,
				     config->int1_config,
				     config->int2_config) < 0) {
		LOG_ERR("Failed to configure interrupt");
   23e5a:	f023 fd53 	bl	47904 <log_string_sync>
		return -EIO;
   23e5e:	f06f 0504 	mvn.w	r5, #4
	}
#endif

	return 0;
}
   23e62:	4628      	mov	r0, r5
   23e64:	b005      	add	sp, #20
   23e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (adxl362_chip_init(dev) < 0) {
   23e68:	2800      	cmp	r0, #0
   23e6a:	dae3      	bge.n	23e34 <adxl362_init+0x1cc>
   23e6c:	e726      	b.n	23cbc <adxl362_init+0x54>
   23e6e:	7e72      	ldrb	r2, [r6, #25]
	if (adxl362_interrupt_config(dev,
   23e70:	7eb3      	ldrb	r3, [r6, #26]
	ret = adxl362_reg_access(adxl362_data,
   23e72:	2601      	movs	r6, #1
	if (adxl362_interrupt_config(dev,
   23e74:	68a4      	ldr	r4, [r4, #8]
   23e76:	f88d 200e 	strb.w	r2, [sp, #14]
   23e7a:	f88d 300f 	strb.w	r3, [sp, #15]
	ret = adxl362_reg_access(adxl362_data,
   23e7e:	9600      	str	r6, [sp, #0]
   23e80:	f10d 030e 	add.w	r3, sp, #14
   23e84:	222a      	movs	r2, #42	; 0x2a
   23e86:	210a      	movs	r1, #10
   23e88:	4620      	mov	r0, r4
   23e8a:	f024 fcf4 	bl	48876 <adxl362_reg_access>
	if (ret) {
   23e8e:	b938      	cbnz	r0, 23ea0 <adxl362_init+0x238>
	return ret = adxl362_reg_access(adxl362_data,
   23e90:	9600      	str	r6, [sp, #0]
   23e92:	f10d 030f 	add.w	r3, sp, #15
   23e96:	222b      	movs	r2, #43	; 0x2b
   23e98:	210a      	movs	r1, #10
   23e9a:	4620      	mov	r0, r4
   23e9c:	f024 fceb 	bl	48876 <adxl362_reg_access>
	if (adxl362_interrupt_config(dev,
   23ea0:	2800      	cmp	r0, #0
   23ea2:	dade      	bge.n	23e62 <adxl362_init+0x1fa>
		LOG_ERR("Failed to configure interrupt");
   23ea4:	2301      	movs	r3, #1
   23ea6:	f04f 0000 	mov.w	r0, #0
   23eaa:	4a07      	ldr	r2, [pc, #28]	; (23ec8 <adxl362_init+0x260>)
   23eac:	f363 0002 	bfi	r0, r3, #0, #3
   23eb0:	4b06      	ldr	r3, [pc, #24]	; (23ecc <adxl362_init+0x264>)
   23eb2:	f36f 00c5 	bfc	r0, #3, #3
   23eb6:	1a9b      	subs	r3, r3, r2
   23eb8:	08db      	lsrs	r3, r3, #3
   23eba:	f363 108f 	bfi	r0, r3, #6, #10
   23ebe:	4908      	ldr	r1, [pc, #32]	; (23ee0 <adxl362_init+0x278>)
   23ec0:	e7cb      	b.n	23e5a <adxl362_init+0x1f2>
		return -EINVAL;
   23ec2:	f06f 0515 	mvn.w	r5, #21
   23ec6:	e7cc      	b.n	23e62 <adxl362_init+0x1fa>
   23ec8:	0004a688 	.word	0x0004a688
   23ecc:	0004a688 	.word	0x0004a688
   23ed0:	0004ee18 	.word	0x0004ee18
   23ed4:	0004ee39 	.word	0x0004ee39
   23ed8:	0004ee62 	.word	0x0004ee62
   23edc:	0004ee6e 	.word	0x0004ee6e
   23ee0:	0004ee8e 	.word	0x0004ee8e

00023ee4 <adxl362_set_interrupt_mode>:
	if (mode != ADXL362_MODE_DEFAULT &&
   23ee4:	2901      	cmp	r1, #1
{
   23ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23ee8:	4605      	mov	r5, r0
   23eea:	460c      	mov	r4, r1
	if (mode != ADXL362_MODE_DEFAULT &&
   23eec:	d915      	bls.n	23f1a <adxl362_set_interrupt_mode+0x36>
	    mode != ADXL362_MODE_LINK &&
   23eee:	2903      	cmp	r1, #3
   23ef0:	d013      	beq.n	23f1a <adxl362_set_interrupt_mode+0x36>
		    LOG_ERR("Wrong mode");
   23ef2:	2301      	movs	r3, #1
   23ef4:	f04f 0000 	mov.w	r0, #0
   23ef8:	4a12      	ldr	r2, [pc, #72]	; (23f44 <adxl362_set_interrupt_mode+0x60>)
   23efa:	f363 0002 	bfi	r0, r3, #0, #3
   23efe:	4b12      	ldr	r3, [pc, #72]	; (23f48 <adxl362_set_interrupt_mode+0x64>)
   23f00:	f36f 00c5 	bfc	r0, #3, #3
   23f04:	1a9b      	subs	r3, r3, r2
   23f06:	08db      	lsrs	r3, r3, #3
   23f08:	f363 108f 	bfi	r0, r3, #6, #10
   23f0c:	490f      	ldr	r1, [pc, #60]	; (23f4c <adxl362_set_interrupt_mode+0x68>)
   23f0e:	f023 fcf9 	bl	47904 <log_string_sync>
		    return -EINVAL;
   23f12:	f06f 0015 	mvn.w	r0, #21
}
   23f16:	b003      	add	sp, #12
   23f18:	bd30      	pop	{r4, r5, pc}
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   23f1a:	2301      	movs	r3, #1
   23f1c:	2227      	movs	r2, #39	; 0x27
   23f1e:	f10d 0107 	add.w	r1, sp, #7
   23f22:	68a8      	ldr	r0, [r5, #8]
   23f24:	f024 fcd8 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   23f28:	2800      	cmp	r0, #0
   23f2a:	d1f4      	bne.n	23f16 <adxl362_set_interrupt_mode+0x32>
	new_act_inact_reg |= old_act_inact_reg |
   23f2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
			    ADXL362_ACT_INACT_CTL_LINKLOOP(mode);
   23f30:	0124      	lsls	r4, r4, #4
   23f32:	f004 0430 	and.w	r4, r4, #48	; 0x30
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   23f36:	2301      	movs	r3, #1
   23f38:	2227      	movs	r2, #39	; 0x27
   23f3a:	4321      	orrs	r1, r4
   23f3c:	68a8      	ldr	r0, [r5, #8]
   23f3e:	f024 fcc0 	bl	488c2 <adxl362_set_reg.isra.0>
   23f42:	e7e8      	b.n	23f16 <adxl362_set_interrupt_mode+0x32>
   23f44:	0004a688 	.word	0x0004a688
   23f48:	0004a688 	.word	0x0004a688
   23f4c:	0004eec4 	.word	0x0004eec4

00023f50 <adxl362_thread>:
#endif
}

#if defined(CONFIG_ADXL362_TRIGGER_OWN_THREAD)
static void adxl362_thread(int dev_ptr, int unused)
{
   23f50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   23f54:	4604      	mov	r4, r0
		LOG_ERR("Unable to get status.");
   23f56:	4d22      	ldr	r5, [pc, #136]	; (23fe0 <adxl362_thread+0x90>)
   23f58:	4a22      	ldr	r2, [pc, #136]	; (23fe4 <adxl362_thread+0x94>)
	struct device *dev = INT_TO_POINTER(dev_ptr);
	struct adxl362_data *drv_data = dev->driver_data;
   23f5a:	6883      	ldr	r3, [r0, #8]
		LOG_ERR("Unable to get status.");
   23f5c:	1aad      	subs	r5, r5, r2
   23f5e:	f8df a088 	ldr.w	sl, [pc, #136]	; 23fe8 <adxl362_thread+0x98>
   23f62:	f3c5 05c9 	ubfx	r5, r5, #3, #10

	ARG_UNUSED(unused);

	while (true) {
		k_sem_take(&drv_data->gpio_sem, K_FOREVER);
   23f66:	f503 688c 	add.w	r8, r3, #1120	; 0x460
	return z_impl_k_sem_take(sem, timeout);
   23f6a:	f04f 31ff 	mov.w	r1, #4294967295
   23f6e:	4640      	mov	r0, r8
   23f70:	f01a ffb2 	bl	3eed8 <z_impl_k_sem_take>
	if (adxl362_get_status(dev, &status_buf)) {
   23f74:	f10d 0107 	add.w	r1, sp, #7
   23f78:	4620      	mov	r0, r4
	struct adxl362_data *drv_data = dev->driver_data;
   23f7a:	68a6      	ldr	r6, [r4, #8]
	if (adxl362_get_status(dev, &status_buf)) {
   23f7c:	f024 fd0d 	bl	4899a <adxl362_get_status>
   23f80:	b158      	cbz	r0, 23f9a <adxl362_thread+0x4a>
		LOG_ERR("Unable to get status.");
   23f82:	2301      	movs	r3, #1
   23f84:	f363 0702 	bfi	r7, r3, #0, #3
   23f88:	f36f 07c5 	bfc	r7, #3, #3
   23f8c:	f365 178f 	bfi	r7, r5, #6, #10
   23f90:	4651      	mov	r1, sl
   23f92:	4638      	mov	r0, r7
   23f94:	f023 fcb6 	bl	47904 <log_string_sync>
   23f98:	e7e7      	b.n	23f6a <adxl362_thread+0x1a>
	k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   23f9a:	f106 0938 	add.w	r9, r6, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
   23f9e:	f04f 31ff 	mov.w	r1, #4294967295
   23fa2:	4648      	mov	r0, r9
   23fa4:	f019 fba8 	bl	3d6f8 <z_impl_k_mutex_lock>
	if (drv_data->th_handler != NULL) {
   23fa8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   23faa:	b152      	cbz	r2, 23fc2 <adxl362_thread+0x72>
		if (ADXL362_STATUS_CHECK_INACT(status_buf) ||
   23fac:	f89d 1007 	ldrb.w	r1, [sp, #7]
		    ADXL362_STATUS_CHECK_ACTIVITY(status_buf)) {
   23fb0:	090b      	lsrs	r3, r1, #4
		if (ADXL362_STATUS_CHECK_INACT(status_buf) ||
   23fb2:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
   23fb6:	07d9      	lsls	r1, r3, #31
   23fb8:	d503      	bpl.n	23fc2 <adxl362_thread+0x72>
			drv_data->th_handler(dev, &drv_data->th_trigger);
   23fba:	f106 0150 	add.w	r1, r6, #80	; 0x50
   23fbe:	4620      	mov	r0, r4
   23fc0:	4790      	blx	r2
	if (drv_data->drdy_handler != NULL &&
   23fc2:	6d73      	ldr	r3, [r6, #84]	; 0x54
   23fc4:	b13b      	cbz	r3, 23fd6 <adxl362_thread+0x86>
   23fc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23fca:	07d2      	lsls	r2, r2, #31
   23fcc:	d503      	bpl.n	23fd6 <adxl362_thread+0x86>
		drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   23fce:	f106 0158 	add.w	r1, r6, #88	; 0x58
   23fd2:	4620      	mov	r0, r4
   23fd4:	4798      	blx	r3
	z_impl_k_mutex_unlock(mutex);
   23fd6:	4648      	mov	r0, r9
   23fd8:	f019 fc68 	bl	3d8ac <z_impl_k_mutex_unlock>
   23fdc:	e7c5      	b.n	23f6a <adxl362_thread+0x1a>
   23fde:	bf00      	nop
   23fe0:	0004a688 	.word	0x0004a688
   23fe4:	0004a688 	.word	0x0004a688
   23fe8:	0004ef16 	.word	0x0004ef16

00023fec <adxl362_trigger_set>:
#endif

int adxl362_trigger_set(struct device *dev,
			const struct sensor_trigger *trig,
			sensor_trigger_handler_t handler)
{
   23fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct adxl362_data *drv_data = dev->driver_data;
	u8_t int_mask, int_en, status_buf;

	switch (trig->type) {
   23ff0:	880c      	ldrh	r4, [r1, #0]
{
   23ff2:	4606      	mov	r6, r0
	switch (trig->type) {
   23ff4:	2c01      	cmp	r4, #1
{
   23ff6:	4688      	mov	r8, r1
   23ff8:	4617      	mov	r7, r2
	struct adxl362_data *drv_data = dev->driver_data;
   23ffa:	6885      	ldr	r5, [r0, #8]
	switch (trig->type) {
   23ffc:	d01e      	beq.n	2403c <adxl362_trigger_set+0x50>
   23ffe:	2c04      	cmp	r4, #4
   24000:	d12f      	bne.n	24062 <adxl362_trigger_set+0x76>
	case SENSOR_TRIG_THRESHOLD:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   24002:	f105 0438 	add.w	r4, r5, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
   24006:	f04f 31ff 	mov.w	r1, #4294967295
   2400a:	4620      	mov	r0, r4
   2400c:	f019 fb74 	bl	3d6f8 <z_impl_k_mutex_lock>
		drv_data->th_handler = handler;
		drv_data->th_trigger = *trig;
   24010:	f8d8 0000 	ldr.w	r0, [r8]
		drv_data->th_handler = handler;
   24014:	64ef      	str	r7, [r5, #76]	; 0x4c
		drv_data->th_trigger = *trig;
   24016:	6528      	str	r0, [r5, #80]	; 0x50
	z_impl_k_mutex_unlock(mutex);
   24018:	4620      	mov	r0, r4
   2401a:	f019 fc47 	bl	3d8ac <z_impl_k_mutex_unlock>
		k_mutex_unlock(&drv_data->trigger_mutex);
		int_mask = ADXL362_INTMAP1_ACT |
			   ADXL362_INTMAP1_INACT;
		/* Clear activity and inactivity interrupts */
		adxl362_get_status(dev, &status_buf);
   2401e:	f10d 0107 	add.w	r1, sp, #7
   24022:	4630      	mov	r0, r6
   24024:	f024 fcb9 	bl	4899a <adxl362_get_status>
		int_mask = ADXL362_INTMAP1_ACT |
   24028:	2230      	movs	r2, #48	; 0x30
	default:
		LOG_ERR("Unsupported sensor trigger");
		return -ENOTSUP;
	}

	if (handler) {
   2402a:	2f00      	cmp	r7, #0
		int_en = int_mask;
	} else {
		int_en = 0U;
	}

	return adxl362_reg_write_mask(dev, ADXL362_REG_INTMAP1, int_mask, int_en);
   2402c:	bf14      	ite	ne
   2402e:	4613      	movne	r3, r2
   24030:	2300      	moveq	r3, #0
   24032:	212a      	movs	r1, #42	; 0x2a
   24034:	4630      	mov	r0, r6
   24036:	f024 fc8e 	bl	48956 <adxl362_reg_write_mask>
   2403a:	e024      	b.n	24086 <adxl362_trigger_set+0x9a>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2403c:	f105 0938 	add.w	r9, r5, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
   24040:	f04f 31ff 	mov.w	r1, #4294967295
   24044:	4648      	mov	r0, r9
   24046:	f019 fb57 	bl	3d6f8 <z_impl_k_mutex_lock>
		drv_data->drdy_trigger = *trig;
   2404a:	f8d8 0000 	ldr.w	r0, [r8]
		drv_data->drdy_handler = handler;
   2404e:	656f      	str	r7, [r5, #84]	; 0x54
		drv_data->drdy_trigger = *trig;
   24050:	65a8      	str	r0, [r5, #88]	; 0x58
	z_impl_k_mutex_unlock(mutex);
   24052:	4648      	mov	r0, r9
   24054:	f019 fc2a 	bl	3d8ac <z_impl_k_mutex_unlock>
		adxl362_clear_data_ready(dev);
   24058:	4630      	mov	r0, r6
   2405a:	f024 fca3 	bl	489a4 <adxl362_clear_data_ready>
		int_mask = ADXL362_INTMAP1_DATA_READY;
   2405e:	4622      	mov	r2, r4
		break;
   24060:	e7e3      	b.n	2402a <adxl362_trigger_set+0x3e>
		LOG_ERR("Unsupported sensor trigger");
   24062:	2301      	movs	r3, #1
   24064:	f04f 0000 	mov.w	r0, #0
   24068:	4a08      	ldr	r2, [pc, #32]	; (2408c <adxl362_trigger_set+0xa0>)
   2406a:	f363 0002 	bfi	r0, r3, #0, #3
   2406e:	4b08      	ldr	r3, [pc, #32]	; (24090 <adxl362_trigger_set+0xa4>)
   24070:	f36f 00c5 	bfc	r0, #3, #3
   24074:	1a9b      	subs	r3, r3, r2
   24076:	08db      	lsrs	r3, r3, #3
   24078:	f363 108f 	bfi	r0, r3, #6, #10
   2407c:	4905      	ldr	r1, [pc, #20]	; (24094 <adxl362_trigger_set+0xa8>)
   2407e:	f023 fc41 	bl	47904 <log_string_sync>
		return -ENOTSUP;
   24082:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   24086:	b003      	add	sp, #12
   24088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2408c:	0004a688 	.word	0x0004a688
   24090:	0004a688 	.word	0x0004a688
   24094:	0004ef2c 	.word	0x0004ef2c

00024098 <adxl362_init_interrupt>:

int adxl362_init_interrupt(struct device *dev)
{
   24098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct adxl362_data *drv_data = dev->driver_data;
	const struct adxl362_config *cfg = dev->config->config_info;
   2409c:	6803      	ldr	r3, [r0, #0]
{
   2409e:	b086      	sub	sp, #24
   240a0:	4607      	mov	r7, r0
	struct adxl362_data *drv_data = dev->driver_data;
   240a2:	6885      	ldr	r5, [r0, #8]
	const struct adxl362_config *cfg = dev->config->config_info;
   240a4:	689e      	ldr	r6, [r3, #8]
	z_impl_k_mutex_init(mutex);
   240a6:	f105 0038 	add.w	r0, r5, #56	; 0x38
   240aa:	f025 ffb4 	bl	4a016 <z_impl_k_mutex_init>
	int ret;

	k_mutex_init(&drv_data->trigger_mutex);

	drv_data->gpio = device_get_binding(cfg->gpio_port);
   240ae:	6970      	ldr	r0, [r6, #20]
   240b0:	f018 fe1a 	bl	3cce8 <z_impl_device_get_binding>
   240b4:	4603      	mov	r3, r0
   240b6:	62a8      	str	r0, [r5, #40]	; 0x28
	if (drv_data->gpio == NULL) {
   240b8:	b9b0      	cbnz	r0, 240e8 <adxl362_init_interrupt+0x50>
		LOG_ERR("Failed to get pointer to %s device!",
   240ba:	2201      	movs	r2, #1
   240bc:	f04f 0000 	mov.w	r0, #0
   240c0:	f362 0002 	bfi	r0, r2, #0, #3
   240c4:	f363 00c5 	bfi	r0, r3, #3, #3
   240c8:	4a32      	ldr	r2, [pc, #200]	; (24194 <adxl362_init_interrupt+0xfc>)
   240ca:	4b33      	ldr	r3, [pc, #204]	; (24198 <adxl362_init_interrupt+0x100>)
   240cc:	4933      	ldr	r1, [pc, #204]	; (2419c <adxl362_init_interrupt+0x104>)
   240ce:	1a9b      	subs	r3, r3, r2
   240d0:	08db      	lsrs	r3, r3, #3
   240d2:	f363 108f 	bfi	r0, r3, #6, #10
   240d6:	6972      	ldr	r2, [r6, #20]
   240d8:	f023 fc14 	bl	47904 <log_string_sync>
			cfg->gpio_port);
		return -EINVAL;
   240dc:	f06f 0415 	mvn.w	r4, #21
#endif

	gpio_pin_enable_callback(drv_data->gpio, cfg->int_gpio);

	return 0;
}
   240e0:	4620      	mov	r0, r4
   240e2:	b006      	add	sp, #24
   240e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = adxl362_set_interrupt_mode(dev, CONFIG_ADXL362_INTERRUPT_MODE);
   240e8:	2101      	movs	r1, #1
   240ea:	4638      	mov	r0, r7
   240ec:	f7ff fefa 	bl	23ee4 <adxl362_set_interrupt_mode>
	if (ret) {
   240f0:	4604      	mov	r4, r0
   240f2:	2800      	cmp	r0, #0
   240f4:	d14b      	bne.n	2418e <adxl362_init_interrupt+0xf6>
	gpio_pin_configure(drv_data->gpio, cfg->int_gpio,
   240f6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   240f8:	7e32      	ldrb	r2, [r6, #24]
	return api->config(port, access_op, pin, flags);
   240fa:	6843      	ldr	r3, [r0, #4]
   240fc:	4621      	mov	r1, r4
   240fe:	f8d3 8000 	ldr.w	r8, [r3]
   24102:	2336      	movs	r3, #54	; 0x36
   24104:	47c0      	blx	r8
			   BIT(cfg->int_gpio));
   24106:	2201      	movs	r2, #1
   24108:	7e33      	ldrb	r3, [r6, #24]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2410a:	4825      	ldr	r0, [pc, #148]	; (241a0 <adxl362_init_interrupt+0x108>)
   2410c:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
   24110:	e9c5 030c 	strd	r0, r3, [r5, #48]	; 0x30
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   24114:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	gpio_init_callback(&drv_data->gpio_cb,
   24116:	f105 012c 	add.w	r1, r5, #44	; 0x2c
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   2411a:	6843      	ldr	r3, [r0, #4]
   2411c:	68db      	ldr	r3, [r3, #12]
   2411e:	b993      	cbnz	r3, 24146 <adxl362_init_interrupt+0xae>
		LOG_ERR("Failed to set gpio callback!");
   24120:	2301      	movs	r3, #1
   24122:	f04f 0000 	mov.w	r0, #0
   24126:	4a1b      	ldr	r2, [pc, #108]	; (24194 <adxl362_init_interrupt+0xfc>)
   24128:	f363 0002 	bfi	r0, r3, #0, #3
   2412c:	4b1a      	ldr	r3, [pc, #104]	; (24198 <adxl362_init_interrupt+0x100>)
   2412e:	f36f 00c5 	bfc	r0, #3, #3
   24132:	1a9b      	subs	r3, r3, r2
   24134:	08db      	lsrs	r3, r3, #3
   24136:	f363 108f 	bfi	r0, r3, #6, #10
   2413a:	491a      	ldr	r1, [pc, #104]	; (241a4 <adxl362_init_interrupt+0x10c>)
   2413c:	f023 fbe2 	bl	47904 <log_string_sync>
		return -EIO;
   24140:	f06f 0404 	mvn.w	r4, #4
   24144:	e7cc      	b.n	240e0 <adxl362_init_interrupt+0x48>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   24146:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   24148:	2800      	cmp	r0, #0
   2414a:	dbe9      	blt.n	24120 <adxl362_init_interrupt+0x88>
	z_impl_k_sem_init(sem, initial_count, limit);
   2414c:	f04f 32ff 	mov.w	r2, #4294967295
   24150:	4621      	mov	r1, r4
   24152:	f505 608c 	add.w	r0, r5, #1120	; 0x460
   24156:	f01a fe41 	bl	3eddc <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2415a:	f06f 0305 	mvn.w	r3, #5
   2415e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   24162:	e9cd 4302 	strd	r4, r3, [sp, #8]
   24166:	e9cd 7400 	strd	r7, r4, [sp]
   2416a:	4b0f      	ldr	r3, [pc, #60]	; (241a8 <adxl362_init_interrupt+0x110>)
   2416c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24170:	f105 0160 	add.w	r1, r5, #96	; 0x60
   24174:	f505 608f 	add.w	r0, r5, #1144	; 0x478
   24178:	f01a fff4 	bl	3f164 <z_impl_k_thread_create>
	gpio_pin_enable_callback(drv_data->gpio, cfg->int_gpio);
   2417c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   2417e:	7e32      	ldrb	r2, [r6, #24]
	if (api->enable_callback == NULL) {
   24180:	6843      	ldr	r3, [r0, #4]
   24182:	691b      	ldr	r3, [r3, #16]
   24184:	2b00      	cmp	r3, #0
   24186:	d0ab      	beq.n	240e0 <adxl362_init_interrupt+0x48>
	return api->enable_callback(port, access_op, pin);
   24188:	4621      	mov	r1, r4
   2418a:	4798      	blx	r3
   2418c:	e7a8      	b.n	240e0 <adxl362_init_interrupt+0x48>
		return -EFAULT;
   2418e:	f06f 040d 	mvn.w	r4, #13
   24192:	e7a5      	b.n	240e0 <adxl362_init_interrupt+0x48>
   24194:	0004a688 	.word	0x0004a688
   24198:	0004a688 	.word	0x0004a688
   2419c:	0004eed5 	.word	0x0004eed5
   241a0:	000489bb 	.word	0x000489bb
   241a4:	0004eef9 	.word	0x0004eef9
   241a8:	00023f51 	.word	0x00023f51

000241ac <bme680_init>:

	return 0;
}

static int bme680_init(struct device *dev)
{
   241ac:	b530      	push	{r4, r5, lr}
   241ae:	4604      	mov	r4, r0
   241b0:	b08d      	sub	sp, #52	; 0x34
	struct bme680_data *data = dev->driver_data;
   241b2:	6885      	ldr	r5, [r0, #8]
   241b4:	48a1      	ldr	r0, [pc, #644]	; (2443c <bme680_init+0x290>)
   241b6:	f018 fd97 	bl	3cce8 <z_impl_device_get_binding>
   241ba:	4603      	mov	r3, r0

	data->i2c_master = device_get_binding(
   241bc:	6028      	str	r0, [r5, #0]
		DT_INST_0_BOSCH_BME680_BUS_NAME);
	if (!data->i2c_master) {
   241be:	b988      	cbnz	r0, 241e4 <bme680_init+0x38>
		LOG_ERR("I2C master not found: %s",
   241c0:	2201      	movs	r2, #1
   241c2:	f04f 0000 	mov.w	r0, #0
   241c6:	f362 0002 	bfi	r0, r2, #0, #3
   241ca:	f363 00c5 	bfi	r0, r3, #3, #3
   241ce:	4a9c      	ldr	r2, [pc, #624]	; (24440 <bme680_init+0x294>)
   241d0:	4b9c      	ldr	r3, [pc, #624]	; (24444 <bme680_init+0x298>)
   241d2:	499d      	ldr	r1, [pc, #628]	; (24448 <bme680_init+0x29c>)
   241d4:	1a9b      	subs	r3, r3, r2
   241d6:	08db      	lsrs	r3, r3, #3
   241d8:	4a98      	ldr	r2, [pc, #608]	; (2443c <bme680_init+0x290>)
   241da:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Bad BME680 chip id 0x%x", data->chip_id);
   241de:	f023 fb91 	bl	47904 <log_string_sync>
   241e2:	e0ca      	b.n	2437a <bme680_init+0x1ce>
			    DT_INST_0_BOSCH_BME680_BUS_NAME);
		return -EINVAL;
	}

	data->i2c_slave_addr = DT_INST_0_BOSCH_BME680_BASE_ADDRESS;
   241e4:	2376      	movs	r3, #118	; 0x76

	if (bme680_chip_init(dev) < 0) {
   241e6:	68a4      	ldr	r4, [r4, #8]
	data->i2c_slave_addr = DT_INST_0_BOSCH_BME680_BASE_ADDRESS;
   241e8:	80ab      	strh	r3, [r5, #4]
	err = bme680_reg_read(data, BME680_REG_CHIP_ID, &data->chip_id, 1);
   241ea:	f104 0248 	add.w	r2, r4, #72	; 0x48
   241ee:	2301      	movs	r3, #1
   241f0:	21d0      	movs	r1, #208	; 0xd0
   241f2:	4620      	mov	r0, r4
   241f4:	f024 fc0f 	bl	48a16 <bme680_reg_read>
	if (err < 0) {
   241f8:	2800      	cmp	r0, #0
   241fa:	f2c0 80be 	blt.w	2437a <bme680_init+0x1ce>
		LOG_ERR("BME680 chip detected");
   241fe:	f04f 0000 	mov.w	r0, #0
   24202:	2501      	movs	r5, #1
   24204:	4b8f      	ldr	r3, [pc, #572]	; (24444 <bme680_init+0x298>)
   24206:	498e      	ldr	r1, [pc, #568]	; (24440 <bme680_init+0x294>)
	if (data->chip_id == BME680_CHIP_ID) {
   24208:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   2420c:	1a5b      	subs	r3, r3, r1
		LOG_ERR("BME680 chip detected");
   2420e:	f365 0002 	bfi	r0, r5, #0, #3
   24212:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   24216:	f36f 00c5 	bfc	r0, #3, #3
	if (data->chip_id == BME680_CHIP_ID) {
   2421a:	2a61      	cmp	r2, #97	; 0x61
		LOG_ERR("BME680 chip detected");
   2421c:	f363 108f 	bfi	r0, r3, #6, #10
	if (data->chip_id == BME680_CHIP_ID) {
   24220:	f040 80ae 	bne.w	24380 <bme680_init+0x1d4>
		LOG_ERR("BME680 chip detected");
   24224:	4989      	ldr	r1, [pc, #548]	; (2444c <bme680_init+0x2a0>)
   24226:	f023 fb6d 	bl	47904 <log_string_sync>
	err = bme680_reg_read(data, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
   2422a:	2317      	movs	r3, #23
   2422c:	aa01      	add	r2, sp, #4
   2422e:	218a      	movs	r1, #138	; 0x8a
   24230:	4620      	mov	r0, r4
   24232:	f024 fbf0 	bl	48a16 <bme680_reg_read>
	if (err < 0) {
   24236:	2800      	cmp	r0, #0
   24238:	f2c0 809f 	blt.w	2437a <bme680_init+0x1ce>
	err = bme680_reg_read(data, BME680_REG_COEFF2, &buff[BME680_LEN_COEFF1],
   2423c:	2310      	movs	r3, #16
   2423e:	f10d 021b 	add.w	r2, sp, #27
   24242:	21e1      	movs	r1, #225	; 0xe1
   24244:	4620      	mov	r0, r4
   24246:	f024 fbe6 	bl	48a16 <bme680_reg_read>
	if (err < 0) {
   2424a:	2800      	cmp	r0, #0
   2424c:	f2c0 8095 	blt.w	2437a <bme680_init+0x1ce>
	err = bme680_reg_read(data, BME680_REG_COEFF3,
   24250:	2305      	movs	r3, #5
   24252:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   24256:	2100      	movs	r1, #0
   24258:	4620      	mov	r0, r4
   2425a:	f024 fbdc 	bl	48a16 <bme680_reg_read>
	if (err < 0) {
   2425e:	2800      	cmp	r0, #0
   24260:	f2c0 808b 	blt.w	2437a <bme680_init+0x1ce>
	data->par_t1 = (u16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   24264:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   24268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   2426c:	4620      	mov	r0, r4
	data->par_t1 = (u16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   2426e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24272:	82a3      	strh	r3, [r4, #20]
	data->par_t2 = (s16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   24274:	f89d 2005 	ldrb.w	r2, [sp, #5]
   24278:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2427c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24280:	82e3      	strh	r3, [r4, #22]
	data->par_t3 = (u8_t)(buff[2]);
   24282:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24286:	7623      	strb	r3, [r4, #24]
	data->par_p1 = (u16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
   24288:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2428c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   24290:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24294:	8363      	strh	r3, [r4, #26]
	data->par_p2 = (s16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
   24296:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2429a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2429e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   242a2:	83a3      	strh	r3, [r4, #28]
	data->par_p3 = (s8_t)buff[8];
   242a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   242a8:	77a3      	strb	r3, [r4, #30]
	data->par_p4 = (s16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   242aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   242ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
   242b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   242b6:	8423      	strh	r3, [r4, #32]
	data->par_p5 = (s16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
   242b8:	f89d 2011 	ldrb.w	r2, [sp, #17]
   242bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   242c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   242c4:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p6 = (s8_t)(buff[15]);
   242c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   242ca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	data->par_p7 = (s8_t)(buff[14]);
   242ce:	f89d 3012 	ldrb.w	r3, [sp, #18]
   242d2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	data->par_p8 = (s16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
   242d6:	f89d 2017 	ldrb.w	r2, [sp, #23]
   242da:	f89d 3016 	ldrb.w	r3, [sp, #22]
   242de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   242e2:	84e3      	strh	r3, [r4, #38]	; 0x26
	data->par_p9 = (s16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
   242e4:	f89d 2019 	ldrb.w	r2, [sp, #25]
   242e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   242ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   242f0:	8523      	strh	r3, [r4, #40]	; 0x28
	data->par_p10 = (u8_t)(buff[22]);
   242f2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   242f6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	data->par_h1 = (u16_t)(((u16_t)buff[25] << 4) | (buff[24] & 0x0f));
   242fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   242fe:	f89d 101d 	ldrb.w	r1, [sp, #29]
   24302:	f003 020f 	and.w	r2, r3, #15
   24306:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   2430a:	80e2      	strh	r2, [r4, #6]
	data->par_h2 = (u16_t)(((u16_t)buff[23] << 4) | ((buff[24]) >> 4));
   2430c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   24310:	091b      	lsrs	r3, r3, #4
   24312:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   24316:	8123      	strh	r3, [r4, #8]
	data->par_h3 = (s8_t)buff[26];
   24318:	f89d 301e 	ldrb.w	r3, [sp, #30]
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   2431c:	2172      	movs	r1, #114	; 0x72
	data->par_h3 = (s8_t)buff[26];
   2431e:	72a3      	strb	r3, [r4, #10]
	data->par_h4 = (s8_t)buff[27];
   24320:	f89d 301f 	ldrb.w	r3, [sp, #31]
   24324:	72e3      	strb	r3, [r4, #11]
	data->par_h5 = (s8_t)buff[28];
   24326:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2432a:	7323      	strb	r3, [r4, #12]
	data->par_h6 = (u8_t)buff[29];
   2432c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   24330:	7363      	strb	r3, [r4, #13]
	data->par_h7 = (s8_t)buff[30];
   24332:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   24336:	73a3      	strb	r3, [r4, #14]
	data->par_gh1 = (s8_t)buff[35];
   24338:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2433c:	73e3      	strb	r3, [r4, #15]
	data->par_gh2 = (s16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
   2433e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   24342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   24346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2434a:	8223      	strh	r3, [r4, #16]
	data->par_gh3 = (s8_t)buff[36];
   2434c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   24350:	462a      	mov	r2, r5
	data->par_gh3 = (s8_t)buff[36];
   24352:	74a3      	strb	r3, [r4, #18]
	data->res_heat_val = (s8_t)buff[37];
   24354:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   24358:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
   2435c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   24360:	f3c3 1301 	ubfx	r3, r3, #4, #2
   24364:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	data->range_sw_err = ((s8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
   24368:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
   2436c:	111b      	asrs	r3, r3, #4
   2436e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   24372:	f024 fb6b 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   24376:	2800      	cmp	r0, #0
   24378:	da04      	bge.n	24384 <bme680_init+0x1d8>
		return -EINVAL;
   2437a:	f06f 0015 	mvn.w	r0, #21
   2437e:	e05b      	b.n	24438 <bme680_init+0x28c>
		LOG_ERR("Bad BME680 chip id 0x%x", data->chip_id);
   24380:	4933      	ldr	r1, [pc, #204]	; (24450 <bme680_init+0x2a4>)
   24382:	e72c      	b.n	241de <bme680_init+0x32>
	err = bme680_reg_write(data, BME680_REG_CONFIG, BME680_CONFIG_VAL);
   24384:	2200      	movs	r2, #0
   24386:	2175      	movs	r1, #117	; 0x75
   24388:	4620      	mov	r0, r4
   2438a:	f024 fb5f 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   2438e:	2800      	cmp	r0, #0
   24390:	dbf3      	blt.n	2437a <bme680_init+0x1ce>
	err = bme680_reg_write(data, BME680_REG_CTRL_GAS_1,
   24392:	2210      	movs	r2, #16
   24394:	2171      	movs	r1, #113	; 0x71
   24396:	4620      	mov	r0, r4
   24398:	f024 fb58 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   2439c:	2800      	cmp	r0, #0
   2439e:	dbec      	blt.n	2437a <bme680_init+0x1ce>
					   * heatr_temp * 5) / 100)
   243a0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   243a4:	2264      	movs	r2, #100	; 0x64
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   243a6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   243aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   243ae:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
   243b2:	f203 1399 	addw	r3, r3, #409	; 0x199
					   * heatr_temp * 5) / 100)
   243b6:	4359      	muls	r1, r3
   243b8:	fb91 f1f2 	sdiv	r1, r1, r2
					 + 3276800) / 10);
   243bc:	230a      	movs	r3, #10
   243be:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
   243c2:	fb91 f1f3 	sdiv	r1, r1, r3
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   243c6:	f994 300f 	ldrsb.w	r3, [r4, #15]
   243ca:	f503 7344 	add.w	r3, r3, #784	; 0x310
   243ce:	4359      	muls	r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   243d0:	f994 3012 	ldrsb.w	r3, [r4, #18]
   243d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   243d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   243dc:	fb93 f3f0 	sdiv	r3, r3, r0
   243e0:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   243e2:	eb03 0361 	add.w	r3, r3, r1, asr #1
	var4 = (var3 / (data->res_heat_range + 4));
   243e6:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
	var5 = (131 * data->res_heat_val) + 65536;
   243ea:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
	var4 = (var3 / (data->res_heat_range + 4));
   243ee:	3104      	adds	r1, #4
   243f0:	fb93 f3f1 	sdiv	r3, r3, r1
	var5 = (131 * data->res_heat_val) + 65536;
   243f4:	2183      	movs	r1, #131	; 0x83
   243f6:	4341      	muls	r1, r0
   243f8:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
   243fc:	fb93 f3f1 	sdiv	r3, r3, r1
   24400:	2122      	movs	r1, #34	; 0x22
   24402:	3bfa      	subs	r3, #250	; 0xfa
   24404:	434b      	muls	r3, r1
	heatr_res = (heatr_res_x100 + 50) / 100;
   24406:	3332      	adds	r3, #50	; 0x32
   24408:	fb93 f2f2 	sdiv	r2, r3, r2
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
   2440c:	215a      	movs	r1, #90	; 0x5a
   2440e:	b2d2      	uxtb	r2, r2
   24410:	4620      	mov	r0, r4
   24412:	f024 fb1b 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   24416:	2800      	cmp	r0, #0
   24418:	dbaf      	blt.n	2437a <bme680_init+0x1ce>
	err = bme680_reg_write(data, BME680_REG_GAS_WAIT0,
   2441a:	2271      	movs	r2, #113	; 0x71
   2441c:	2164      	movs	r1, #100	; 0x64
   2441e:	4620      	mov	r0, r4
   24420:	f024 fb14 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   24424:	2800      	cmp	r0, #0
   24426:	dba8      	blt.n	2437a <bme680_init+0x1ce>
	err = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   24428:	2255      	movs	r2, #85	; 0x55
   2442a:	2174      	movs	r1, #116	; 0x74
   2442c:	4620      	mov	r0, r4
   2442e:	f024 fb0d 	bl	48a4c <bme680_reg_write>
	if (err < 0) {
   24432:	2800      	cmp	r0, #0
   24434:	dba1      	blt.n	2437a <bme680_init+0x1ce>
	}

	return 0;
   24436:	2000      	movs	r0, #0
}
   24438:	b00d      	add	sp, #52	; 0x34
   2443a:	bd30      	pop	{r4, r5, pc}
   2443c:	0004ec4c 	.word	0x0004ec4c
   24440:	0004a688 	.word	0x0004a688
   24444:	0004a6c0 	.word	0x0004a6c0
   24448:	0004ef47 	.word	0x0004ef47
   2444c:	0004ef60 	.word	0x0004ef60
   24450:	0004ef75 	.word	0x0004ef75

00024454 <bme680_sample_fetch>:
{
   24454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24458:	460d      	mov	r5, r1
   2445a:	b085      	sub	sp, #20
	struct bme680_data *data = dev->driver_data;
   2445c:	6884      	ldr	r4, [r0, #8]
	u8_t buff[BME680_LEN_FIELD] = { 0 };
   2445e:	220f      	movs	r2, #15
   24460:	2100      	movs	r1, #0
   24462:	4668      	mov	r0, sp
   24464:	f01c fde8 	bl	41038 <memset>
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   24468:	2d25      	cmp	r5, #37	; 0x25
   2446a:	d009      	beq.n	24480 <bme680_sample_fetch+0x2c>
   2446c:	49aa      	ldr	r1, [pc, #680]	; (24718 <bme680_sample_fetch+0x2c4>)
   2446e:	48ab      	ldr	r0, [pc, #684]	; (2471c <bme680_sample_fetch+0x2c8>)
   24470:	23c7      	movs	r3, #199	; 0xc7
   24472:	4aab      	ldr	r2, [pc, #684]	; (24720 <bme680_sample_fetch+0x2cc>)
   24474:	f023 fa29 	bl	478ca <printk>
   24478:	21c7      	movs	r1, #199	; 0xc7
   2447a:	48a9      	ldr	r0, [pc, #676]	; (24720 <bme680_sample_fetch+0x2cc>)
   2447c:	f023 fa32 	bl	478e4 <assert_post_action>
	ret = bme680_reg_read(data, BME680_REG_FIELD0, buff, size);
   24480:	230f      	movs	r3, #15
   24482:	466a      	mov	r2, sp
   24484:	211d      	movs	r1, #29
   24486:	4620      	mov	r0, r4
   24488:	f024 fac5 	bl	48a16 <bme680_reg_read>
	if (ret < 0) {
   2448c:	2800      	cmp	r0, #0
   2448e:	f2c0 8140 	blt.w	24712 <bme680_sample_fetch+0x2be>
	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   24492:	f89d 3000 	ldrb.w	r3, [sp]
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   24496:	f89d 000e 	ldrb.w	r0, [sp, #14]
	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   2449a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   2449e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	if (data->new_data) {
   244a2:	061b      	lsls	r3, r3, #24
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   244a4:	f000 0210 	and.w	r2, r0, #16
   244a8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	if (data->new_data) {
   244ac:	f140 812a 	bpl.w	24704 <bme680_sample_fetch+0x2b0>
			   | ((u32_t)buff[7] >> 4));
   244b0:	f89d 5007 	ldrb.w	r5, [sp, #7]
	adc_temp = (u32_t)(((u32_t)buff[5] << 12) | ((u32_t)buff[6] << 4)
   244b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
			   | ((u32_t)buff[7] >> 4));
   244b8:	092d      	lsrs	r5, r5, #4
	adc_temp = (u32_t)(((u32_t)buff[5] << 12) | ((u32_t)buff[6] << 4)
   244ba:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
   244be:	f89d 3005 	ldrb.w	r3, [sp, #5]
			    | ((u32_t)buff[4] >> 4));
   244c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
	adc_temp = (u32_t)(((u32_t)buff[5] << 12) | ((u32_t)buff[6] << 4)
   244c6:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
	var1 = ((s32_t)adc_temp >> 3) - ((s32_t)data->par_t1 << 1);
   244ca:	8aa5      	ldrh	r5, [r4, #20]
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
   244cc:	f89d 6003 	ldrb.w	r6, [sp, #3]
	var1 = ((s32_t)adc_temp >> 3) - ((s32_t)data->par_t1 << 1);
   244d0:	006d      	lsls	r5, r5, #1
   244d2:	ebc5 05d3 	rsb	r5, r5, r3, lsr #3
   244d6:	462a      	mov	r2, r5
   244d8:	17eb      	asrs	r3, r5, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   244da:	105b      	asrs	r3, r3, #1
   244dc:	ea4f 0232 	mov.w	r2, r2, rrx
   244e0:	fb02 f803 	mul.w	r8, r2, r3
   244e4:	fba2 2302 	umull	r2, r3, r2, r2
   244e8:	ea4f 3a12 	mov.w	sl, r2, lsr #12
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
   244ec:	f994 2018 	ldrsb.w	r2, [r4, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   244f0:	eb03 0348 	add.w	r3, r3, r8, lsl #1
   244f4:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
   244f8:	ea4f 3b23 	mov.w	fp, r3, asr #12
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
   244fc:	0113      	lsls	r3, r2, #4
   244fe:	ea4f 79e3 	mov.w	r9, r3, asr #31
   24502:	fb0a f809 	mul.w	r8, sl, r9
   24506:	fb03 880b 	mla	r8, r3, fp, r8
   2450a:	fbaa ab03 	umull	sl, fp, sl, r3
   2450e:	44c3      	add	fp, r8
	var2 = (var1 * (s32_t)data->par_t2) >> 11;
   24510:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
   24514:	ea4f 329a 	mov.w	r2, sl, lsr #14
	var2 = (var1 * (s32_t)data->par_t2) >> 11;
   24518:	fb88 8905 	smull	r8, r9, r8, r5
   2451c:	ea4f 25d8 	mov.w	r5, r8, lsr #11
   24520:	ea45 5549 	orr.w	r5, r5, r9, lsl #21
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
   24524:	ea42 428b 	orr.w	r2, r2, fp, lsl #18
	data->t_fine = var2 + var3;
   24528:	442a      	add	r2, r5
   2452a:	6462      	str	r2, [r4, #68]	; 0x44
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   2452c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
	var1 = (((s32_t)data->t_fine) >> 1) - 64000;
   24530:	1052      	asrs	r2, r2, #1
   24532:	f5a2 487a 	sub.w	r8, r2, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   24536:	ea4f 02a8 	mov.w	r2, r8, asr #2
   2453a:	4352      	muls	r2, r2
		(s32_t)data->par_p6) >> 2;
   2453c:	f994 5024 	ldrsb.w	r5, [r4, #36]	; 0x24
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   24540:	ea4f 29e2 	mov.w	r9, r2, asr #11
   24544:	fb05 f909 	mul.w	r9, r5, r9
	var2 = var2 + ((var1 * (s32_t)data->par_p5) << 1);
   24548:	f9b4 5022 	ldrsh.w	r5, [r4, #34]	; 0x22
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   2454c:	1352      	asrs	r2, r2, #13
	var2 = var2 + ((var1 * (s32_t)data->par_p5) << 1);
   2454e:	fb08 f505 	mul.w	r5, r8, r5
   24552:	006d      	lsls	r5, r5, #1
   24554:	eb05 05a9 	add.w	r5, r5, r9, asr #2
	       + (((s32_t)data->par_p2 * var1) >> 1);
   24558:	f9b4 901c 	ldrsh.w	r9, [r4, #28]
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
   2455c:	f89d 7002 	ldrb.w	r7, [sp, #2]
	       + (((s32_t)data->par_p2 * var1) >> 1);
   24560:	fb08 f809 	mul.w	r8, r8, r9
		 ((s32_t)data->par_p3 << 5)) >> 3)
   24564:	f994 901e 	ldrsb.w	r9, [r4, #30]
			    | ((u32_t)buff[4] >> 4));
   24568:	0909      	lsrs	r1, r1, #4
		 ((s32_t)data->par_p3 << 5)) >> 3)
   2456a:	ea4f 1949 	mov.w	r9, r9, lsl #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   2456e:	fb02 f209 	mul.w	r2, r2, r9
		 ((s32_t)data->par_p3 << 5)) >> 3)
   24572:	10d2      	asrs	r2, r2, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   24574:	eb02 0268 	add.w	r2, r2, r8, asr #1
	var1 = var1 >> 18;
   24578:	1492      	asrs	r2, r2, #18
	var1 = ((32768 + var1) * (s32_t)data->par_p1) >> 15;
   2457a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
   2457e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   24582:	fb08 f202 	mul.w	r2, r8, r2
   24586:	ea4f 38e2 	mov.w	r8, r2, asr #15
	var2 = (var2 >> 2) + ((s32_t)data->par_p4 << 16);
   2458a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
   2458e:	ea41 1606 	orr.w	r6, r1, r6, lsl #4
	var2 = (var2 >> 2) + ((s32_t)data->par_p4 << 16);
   24592:	0412      	lsls	r2, r2, #16
   24594:	eb02 05a5 	add.w	r5, r2, r5, asr #2
	calc_press = (calc_press - (var2 >> 12)) * ((u32_t)3125);
   24598:	f640 4235 	movw	r2, #3125	; 0xc35
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
   2459c:	ea46 3707 	orr.w	r7, r6, r7, lsl #12
	calc_press = 1048576 - adc_press;
   245a0:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
	calc_press = (calc_press - (var2 >> 12)) * ((u32_t)3125);
   245a4:	eba7 3525 	sub.w	r5, r7, r5, asr #12
   245a8:	4355      	muls	r5, r2
	if (calc_press >= (s32_t)0x40000000) {
   245aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
		calc_press = ((calc_press / var1) << 1);
   245ae:	bfad      	iteet	ge
   245b0:	fb95 f2f8 	sdivge	r2, r5, r8
		calc_press = ((calc_press << 1) / var1);
   245b4:	006d      	lsllt	r5, r5, #1
   245b6:	fb95 f2f8 	sdivlt	r2, r5, r8
		calc_press = ((calc_press / var1) << 1);
   245ba:	0052      	lslge	r2, r2, #1
		(s32_t)(((calc_press >> 3)
   245bc:	10d5      	asrs	r5, r2, #3
			 * (calc_press >> 3)) >> 13)) >> 12;
   245be:	436d      	muls	r5, r5
	var1 = ((s32_t)data->par_p9 *
   245c0:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
			 * (calc_press >> 3)) >> 13)) >> 12;
   245c4:	136d      	asrs	r5, r5, #13
	var1 = ((s32_t)data->par_p9 *
   245c6:	434d      	muls	r5, r1
	var2 = ((s32_t)(calc_press >> 2) * (s32_t)data->par_p8) >> 13;
   245c8:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
   245cc:	1097      	asrs	r7, r2, #2
   245ce:	4379      	muls	r1, r7
	var3 = ((s32_t)(calc_press >> 8) * (s32_t)(calc_press >> 8)
   245d0:	1216      	asrs	r6, r2, #8
	var2 = ((s32_t)(calc_press >> 2) * (s32_t)data->par_p8) >> 13;
   245d2:	1349      	asrs	r1, r1, #13
			   + ((var1 + var2 + var3
   245d4:	eb01 3125 	add.w	r1, r1, r5, asr #12
	var3 = ((s32_t)(calc_press >> 8) * (s32_t)(calc_press >> 8)
   245d8:	fb06 f506 	mul.w	r5, r6, r6
		* (s32_t)(calc_press >> 8)
   245dc:	4375      	muls	r5, r6
		* (s32_t)data->par_p10) >> 17;
   245de:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   245e2:	3380      	adds	r3, #128	; 0x80
		* (s32_t)data->par_p10) >> 17;
   245e4:	4375      	muls	r5, r6
			   + ((var1 + var2 + var3
   245e6:	eb01 4165 	add.w	r1, r1, r5, asr #17
			       + ((s32_t)data->par_p7 << 7)) >> 4);
   245ea:	f994 5025 	ldrsb.w	r5, [r4, #37]	; 0x25
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   245ee:	121b      	asrs	r3, r3, #8
			       + ((s32_t)data->par_p7 << 7)) >> 4);
   245f0:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
			   + ((var1 + var2 + var3
   245f4:	eb02 1221 	add.w	r2, r2, r1, asr #4
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
   245f8:	2164      	movs	r1, #100	; 0x64
	data->calc_press = calc_press
   245fa:	6362      	str	r2, [r4, #52]	; 0x34
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
   245fc:	f994 200c 	ldrsb.w	r2, [r4, #12]
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
   24600:	f994 500b 	ldrsb.w	r5, [r4, #11]
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
   24604:	435a      	muls	r2, r3
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
   24606:	fb92 f2f1 	sdiv	r2, r2, r1
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
   2460a:	435a      	muls	r2, r3
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
   2460c:	435d      	muls	r5, r3
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
   2460e:	1192      	asrs	r2, r2, #6
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
   24610:	fb95 f5f1 	sdiv	r5, r5, r1
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
   24614:	fb92 f2f1 	sdiv	r2, r2, r1
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
   24618:	442a      	add	r2, r5
	var2_1 = (s32_t)data->par_h2;
   2461a:	8925      	ldrh	r5, [r4, #8]
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
   2461c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
	var2 = (var2_1 * var2_2) >> 10;
   24620:	436a      	muls	r2, r5
   24622:	f8bd c008 	ldrh.w	ip, [sp, #8]
   24626:	1295      	asrs	r5, r2, #10
	var1 = (s32_t)(adc_humidity - ((s32_t)((s32_t)data->par_h1 * 16))) -
   24628:	fa9c f29c 	rev16.w	r2, ip
   2462c:	f8b4 c006 	ldrh.w	ip, [r4, #6]
   24630:	b292      	uxth	r2, r2
   24632:	eba2 120c 	sub.w	r2, r2, ip, lsl #4
	       (((temp_scaled * (s32_t)data->par_h3)
   24636:	f994 c00a 	ldrsb.w	ip, [r4, #10]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   2463a:	6323      	str	r3, [r4, #48]	; 0x30
	       (((temp_scaled * (s32_t)data->par_h3)
   2463c:	fb03 fc0c 	mul.w	ip, r3, ip
		 / ((s32_t)100)) >> 1);
   24640:	fb9c fcf1 	sdiv	ip, ip, r1
	var1 = (s32_t)(adc_humidity - ((s32_t)((s32_t)data->par_h1 * 16))) -
   24644:	eba2 026c 	sub.w	r2, r2, ip, asr #1
	var3 = var1 * var2;
   24648:	436a      	muls	r2, r5
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
   2464a:	f994 500e 	ldrsb.w	r5, [r4, #14]
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   2464e:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
   24652:	436b      	muls	r3, r5
   24654:	fb93 f3f1 	sdiv	r3, r3, r1
	var4 = (s32_t)data->par_h6 << 7;
   24658:	7b61      	ldrb	r1, [r4, #13]
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   2465a:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
   2465c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   24660:	1391      	asrs	r1, r2, #14
   24662:	4349      	muls	r1, r1
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
   24664:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   24666:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
   24668:	434b      	muls	r3, r1
	calc_hum = (((var3 + var6) >> 10) * ((s32_t)1000)) >> 12;
   2466a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   2466e:	129a      	asrs	r2, r3, #10
   24670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24674:	4353      	muls	r3, r2
	data->calc_humidity = calc_hum;
   24676:	4a2b      	ldr	r2, [pc, #172]	; (24724 <bme680_sample_fetch+0x2d0>)
	calc_hum = (((var3 + var6) >> 10) * ((s32_t)1000)) >> 12;
   24678:	131b      	asrs	r3, r3, #12
   2467a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	data->calc_humidity = calc_hum;
   2467e:	4293      	cmp	r3, r2
   24680:	bfd4      	ite	le
   24682:	63a3      	strle	r3, [r4, #56]	; 0x38
   24684:	63a2      	strgt	r2, [r4, #56]	; 0x38
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   24686:	2205      	movs	r2, #5
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
   24688:	f89d e00d 	ldrb.w	lr, [sp, #13]
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   2468c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
		       ((s64_t)look_up1[gas_range])) >> 16;
   24690:	f000 050f 	and.w	r5, r0, #15
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   24694:	fbc3 6702 	smlal	r6, r7, r3, r2
		       ((s64_t)look_up1[gas_range])) >> 16;
   24698:	4b23      	ldr	r3, [pc, #140]	; (24728 <bme680_sample_fetch+0x2d4>)
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
   2469a:	0980      	lsrs	r0, r0, #6
		       ((s64_t)look_up1[gas_range])) >> 16;
   2469c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
   246a0:	ea40 008e 	orr.w	r0, r0, lr, lsl #2
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   246a4:	fba6 2301 	umull	r2, r3, r6, r1
   246a8:	fb01 3307 	mla	r3, r1, r7, r3
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
   246ac:	b280      	uxth	r0, r0
   246ae:	ea4f 38c0 	mov.w	r8, r0, lsl #15
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   246b2:	0c16      	lsrs	r6, r2, #16
   246b4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
   246b8:	f118 427f 	adds.w	r2, r8, #4278190080	; 0xff000000
   246bc:	ea4f 4950 	mov.w	r9, r0, lsr #17
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
   246c0:	ea4f 4723 	mov.w	r7, r3, asr #16
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
   246c4:	f149 33ff 	adc.w	r3, r9, #4294967295
   246c8:	1990      	adds	r0, r2, r6
   246ca:	eb43 0107 	adc.w	r1, r3, r7
   246ce:	460b      	mov	r3, r1
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
   246d0:	4916      	ldr	r1, [pc, #88]	; (2472c <bme680_sample_fetch+0x2d8>)
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
   246d2:	4602      	mov	r2, r0
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
   246d4:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
   246d8:	fba1 8906 	umull	r8, r9, r1, r6
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
   246dc:	4606      	mov	r6, r0
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
   246de:	fb01 9907 	mla	r9, r1, r7, r9
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
   246e2:	461f      	mov	r7, r3
   246e4:	107f      	asrs	r7, r7, #1
   246e6:	ea4f 0636 	mov.w	r6, r6, rrx
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
   246ea:	ea4f 2a58 	mov.w	sl, r8, lsr #9
   246ee:	ea4a 5ac9 	orr.w	sl, sl, r9, lsl #23
					    / (s64_t)var2);
   246f2:	eb1a 0006 	adds.w	r0, sl, r6
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
   246f6:	ea4f 2b69 	mov.w	fp, r9, asr #9
					    / (s64_t)var2);
   246fa:	eb4b 0107 	adc.w	r1, fp, r7
   246fe:	f7f4 fb0d 	bl	18d1c <__aeabi_ldivmod>
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
   24702:	63e0      	str	r0, [r4, #60]	; 0x3c
	ret = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   24704:	2255      	movs	r2, #85	; 0x55
   24706:	2174      	movs	r1, #116	; 0x74
   24708:	4620      	mov	r0, r4
   2470a:	f024 f99f 	bl	48a4c <bme680_reg_write>
   2470e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
   24712:	b005      	add	sp, #20
   24714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24718:	0004eeac 	.word	0x0004eeac
   2471c:	0004ccf0 	.word	0x0004ccf0
   24720:	0004ef8d 	.word	0x0004ef8d
   24724:	000186a0 	.word	0x000186a0
   24728:	0004ac84 	.word	0x0004ac84
   2472c:	0004acc4 	.word	0x0004acc4

00024730 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   24730:	b510      	push	{r4, lr}
   24732:	4604      	mov	r4, r0
   24734:	2200      	movs	r2, #0
   24736:	2101      	movs	r1, #1
   24738:	200b      	movs	r0, #11
   2473a:	f7fc ffe7 	bl	2170c <z_arm_irq_priority_set>
	return dev->config->config_info;
   2473e:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
   24740:	4a11      	ldr	r2, [pc, #68]	; (24788 <spi_3_init+0x58>)
	return dev->config->config_info;
   24742:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
   24744:	4623      	mov	r3, r4
   24746:	f100 010c 	add.w	r1, r0, #12
   2474a:	f017 fe47 	bl	3c3dc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   2474e:	4b0f      	ldr	r3, [pc, #60]	; (2478c <spi_3_init+0x5c>)
   24750:	4298      	cmp	r0, r3
   24752:	d014      	beq.n	2477e <spi_3_init+0x4e>
		LOG_ERR("Failed to initialize device: %s",
   24754:	2301      	movs	r3, #1
   24756:	f04f 0000 	mov.w	r0, #0
   2475a:	4a0d      	ldr	r2, [pc, #52]	; (24790 <spi_3_init+0x60>)
   2475c:	f363 0002 	bfi	r0, r3, #0, #3
   24760:	4b0c      	ldr	r3, [pc, #48]	; (24794 <spi_3_init+0x64>)
   24762:	f36f 00c5 	bfc	r0, #3, #3
   24766:	1a9b      	subs	r3, r3, r2
   24768:	08db      	lsrs	r3, r3, #3
   2476a:	f363 108f 	bfi	r0, r3, #6, #10
   2476e:	6823      	ldr	r3, [r4, #0]
   24770:	4909      	ldr	r1, [pc, #36]	; (24798 <spi_3_init+0x68>)
   24772:	681a      	ldr	r2, [r3, #0]
   24774:	f023 f8c6 	bl	47904 <log_string_sync>
		return -EBUSY;
   24778:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
   2477c:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   2477e:	68a0      	ldr	r0, [r4, #8]
   24780:	f024 f9ad 	bl	48ade <spi_context_unlock_unconditionally>
	return 0;
   24784:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
   24786:	e7f9      	b.n	2477c <spi_3_init+0x4c>
   24788:	00024829 	.word	0x00024829
   2478c:	0bad0000 	.word	0x0bad0000
   24790:	0004a688 	.word	0x0004a688
   24794:	0004a7b8 	.word	0x0004a7b8
   24798:	0004ec60 	.word	0x0004ec60

0002479c <transfer_next_chunk>:
{
   2479c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2479e:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   247a0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   247a2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   247a4:	b98a      	cbnz	r2, 247ca <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   247a6:	2b00      	cmp	r3, #0
   247a8:	d133      	bne.n	24812 <transfer_next_chunk+0x76>
	int error = 0;
   247aa:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   247ac:	2200      	movs	r2, #0
   247ae:	4628      	mov	r0, r5
   247b0:	4611      	mov	r1, r2
   247b2:	f024 f96a 	bl	48a8a <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
   247b6:	636c      	str	r4, [r5, #52]	; 0x34
	z_impl_k_sem_give(sem);
   247b8:	f105 001c 	add.w	r0, r5, #28
   247bc:	f01a fb44 	bl	3ee48 <z_impl_k_sem_give>
	dev_data->busy = false;
   247c0:	2300      	movs	r3, #0
   247c2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   247c6:	b004      	add	sp, #16
   247c8:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   247ca:	b323      	cbz	r3, 24816 <transfer_next_chunk+0x7a>
   247cc:	4293      	cmp	r3, r2
   247ce:	4619      	mov	r1, r3
   247d0:	bf28      	it	cs
   247d2:	4611      	movcs	r1, r2
	return dev->config->config_info;
   247d4:	6800      	ldr	r0, [r0, #0]
		const u8_t *tx_buf = ctx->tx_buf;
   247d6:	6cac      	ldr	r4, [r5, #72]	; 0x48
	return dev->config->config_info;
   247d8:	6880      	ldr	r0, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
   247da:	9400      	str	r4, [sp, #0]
   247dc:	6886      	ldr	r6, [r0, #8]
   247de:	42b1      	cmp	r1, r6
   247e0:	bf28      	it	cs
   247e2:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
   247e4:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
   247e6:	b1c4      	cbz	r4, 2481a <transfer_next_chunk+0x7e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   247e8:	2a00      	cmp	r2, #0
   247ea:	bf18      	it	ne
   247ec:	460a      	movne	r2, r1
   247ee:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   247f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   247f2:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   247f4:	b19a      	cbz	r2, 2481e <transfer_next_chunk+0x82>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   247f6:	2b00      	cmp	r3, #0
   247f8:	bf18      	it	ne
   247fa:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   247fc:	2200      	movs	r2, #0
   247fe:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   24800:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   24802:	f017 fea3 	bl	3c54c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   24806:	4b07      	ldr	r3, [pc, #28]	; (24824 <transfer_next_chunk+0x88>)
   24808:	4298      	cmp	r0, r3
   2480a:	d0dc      	beq.n	247c6 <transfer_next_chunk+0x2a>
   2480c:	f06f 0404 	mvn.w	r4, #4
   24810:	e7cc      	b.n	247ac <transfer_next_chunk+0x10>
   24812:	4619      	mov	r1, r3
   24814:	e7de      	b.n	247d4 <transfer_next_chunk+0x38>
	} else if (!ctx->rx_len) {
   24816:	4611      	mov	r1, r2
   24818:	e7dc      	b.n	247d4 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   2481a:	4622      	mov	r2, r4
   2481c:	e7e7      	b.n	247ee <transfer_next_chunk+0x52>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2481e:	4613      	mov	r3, r2
   24820:	e7ec      	b.n	247fc <transfer_next_chunk+0x60>
   24822:	bf00      	nop
   24824:	0bad0000 	.word	0x0bad0000

00024828 <event_handler>:
{
   24828:	b538      	push	{r3, r4, r5, lr}
   2482a:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2482c:	7801      	ldrb	r1, [r0, #0]
   2482e:	2900      	cmp	r1, #0
   24830:	d15b      	bne.n	248ea <event_handler+0xc2>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   24832:	68ac      	ldr	r4, [r5, #8]
	if (!ctx->tx_len) {
   24834:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   24836:	b193      	cbz	r3, 2485e <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   24838:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->tx_len) {
   2483a:	429a      	cmp	r2, r3
   2483c:	d929      	bls.n	24892 <event_handler+0x6a>
		LOG_ERR("Update exceeds current buffer");
   2483e:	2301      	movs	r3, #1
   24840:	f04f 0000 	mov.w	r0, #0
   24844:	4a29      	ldr	r2, [pc, #164]	; (248ec <event_handler+0xc4>)
   24846:	f363 0002 	bfi	r0, r3, #0, #3
   2484a:	4b29      	ldr	r3, [pc, #164]	; (248f0 <event_handler+0xc8>)
   2484c:	f361 00c5 	bfi	r0, r1, #3, #3
   24850:	1a9b      	subs	r3, r3, r2
   24852:	08db      	lsrs	r3, r3, #3
   24854:	f363 108f 	bfi	r0, r3, #6, #10
   24858:	4926      	ldr	r1, [pc, #152]	; (248f4 <event_handler+0xcc>)
   2485a:	f023 f853 	bl	47904 <log_string_sync>
	if (!ctx->rx_len) {
   2485e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   24860:	b193      	cbz	r3, 24888 <event_handler+0x60>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   24862:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   24864:	429a      	cmp	r2, r3
   24866:	d92a      	bls.n	248be <event_handler+0x96>
		LOG_ERR("Update exceeds current buffer");
   24868:	2301      	movs	r3, #1
   2486a:	f04f 0000 	mov.w	r0, #0
   2486e:	4a1f      	ldr	r2, [pc, #124]	; (248ec <event_handler+0xc4>)
   24870:	f363 0002 	bfi	r0, r3, #0, #3
   24874:	4b1e      	ldr	r3, [pc, #120]	; (248f0 <event_handler+0xc8>)
   24876:	f36f 00c5 	bfc	r0, #3, #3
   2487a:	1a9b      	subs	r3, r3, r2
   2487c:	08db      	lsrs	r3, r3, #3
   2487e:	f363 108f 	bfi	r0, r3, #6, #10
   24882:	491c      	ldr	r1, [pc, #112]	; (248f4 <event_handler+0xcc>)
   24884:	f023 f83e 	bl	47904 <log_string_sync>
		transfer_next_chunk(dev);
   24888:	4628      	mov	r0, r5
}
   2488a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
   2488e:	f7ff bf85 	b.w	2479c <transfer_next_chunk>
	ctx->tx_len -= len;
   24892:	1a9b      	subs	r3, r3, r2
   24894:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
   24896:	b963      	cbnz	r3, 248b2 <event_handler+0x8a>
		ctx->tx_count--;
   24898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2489a:	3b01      	subs	r3, #1
   2489c:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
   2489e:	b163      	cbz	r3, 248ba <event_handler+0x92>
			ctx->current_tx++;
   248a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   248a2:	f103 0208 	add.w	r2, r3, #8
   248a6:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   248a8:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   248aa:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   248ac:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   248ae:	64e3      	str	r3, [r4, #76]	; 0x4c
   248b0:	e7d5      	b.n	2485e <event_handler+0x36>
	} else if (ctx->tx_buf) {
   248b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   248b4:	2b00      	cmp	r3, #0
   248b6:	d0d2      	beq.n	2485e <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   248b8:	4413      	add	r3, r2
   248ba:	64a3      	str	r3, [r4, #72]	; 0x48
   248bc:	e7cf      	b.n	2485e <event_handler+0x36>
	ctx->rx_len -= len;
   248be:	1a9b      	subs	r3, r3, r2
   248c0:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   248c2:	b963      	cbnz	r3, 248de <event_handler+0xb6>
		ctx->rx_count--;
   248c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   248c6:	3b01      	subs	r3, #1
   248c8:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
   248ca:	b163      	cbz	r3, 248e6 <event_handler+0xbe>
			ctx->current_rx++;
   248cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   248ce:	f103 0208 	add.w	r2, r3, #8
   248d2:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   248d4:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   248d6:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   248d8:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   248da:	6563      	str	r3, [r4, #84]	; 0x54
   248dc:	e7d4      	b.n	24888 <event_handler+0x60>
	} else if (ctx->rx_buf) {
   248de:	6d23      	ldr	r3, [r4, #80]	; 0x50
   248e0:	2b00      	cmp	r3, #0
   248e2:	d0d1      	beq.n	24888 <event_handler+0x60>
		ctx->rx_buf += dfs * len;
   248e4:	4413      	add	r3, r2
   248e6:	6523      	str	r3, [r4, #80]	; 0x50
   248e8:	e7ce      	b.n	24888 <event_handler+0x60>
}
   248ea:	bd38      	pop	{r3, r4, r5, pc}
   248ec:	0004a688 	.word	0x0004a688
   248f0:	0004a7b8 	.word	0x0004a7b8
   248f4:	0004efc7 	.word	0x0004efc7

000248f8 <spi_nrfx_transceive>:
{
   248f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   248fc:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
   248fe:	6880      	ldr	r0, [r0, #8]
   24900:	4688      	mov	r8, r1
   24902:	4616      	mov	r6, r2
   24904:	461d      	mov	r5, r3
   24906:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   24908:	f04f 31ff 	mov.w	r1, #4294967295
   2490c:	f01a fae4 	bl	3eed8 <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   24910:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
   24912:	6823      	ldr	r3, [r4, #0]
   24914:	4598      	cmp	r8, r3
   24916:	f000 80bc 	beq.w	24a92 <spi_nrfx_transceive+0x19a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   2491a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   2491e:	683a      	ldr	r2, [r7, #0]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   24920:	f013 0101 	ands.w	r1, r3, #1
   24924:	d018      	beq.n	24958 <spi_nrfx_transceive+0x60>
		LOG_ERR("Slave mode is not supported on %s",
   24926:	2301      	movs	r3, #1
   24928:	f04f 0000 	mov.w	r0, #0
   2492c:	4987      	ldr	r1, [pc, #540]	; (24b4c <spi_nrfx_transceive+0x254>)
   2492e:	f363 0002 	bfi	r0, r3, #0, #3
   24932:	4b87      	ldr	r3, [pc, #540]	; (24b50 <spi_nrfx_transceive+0x258>)
   24934:	f36f 00c5 	bfc	r0, #3, #3
   24938:	1a5b      	subs	r3, r3, r1
   2493a:	08db      	lsrs	r3, r3, #3
   2493c:	f363 108f 	bfi	r0, r3, #6, #10
   24940:	6812      	ldr	r2, [r2, #0]
   24942:	4984      	ldr	r1, [pc, #528]	; (24b54 <spi_nrfx_transceive+0x25c>)
   24944:	f022 ffde 	bl	47904 <log_string_sync>
		return -EINVAL;
   24948:	f06f 0515 	mvn.w	r5, #21
	z_impl_k_sem_give(sem);
   2494c:	1d20      	adds	r0, r4, #4
   2494e:	f01a fa7b 	bl	3ee48 <z_impl_k_sem_give>
}
   24952:	4628      	mov	r0, r5
   24954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   24958:	f013 0c08 	ands.w	ip, r3, #8
   2495c:	d010      	beq.n	24980 <spi_nrfx_transceive+0x88>
		LOG_ERR("Loopback mode is not supported");
   2495e:	2301      	movs	r3, #1
   24960:	f04f 0000 	mov.w	r0, #0
   24964:	4a79      	ldr	r2, [pc, #484]	; (24b4c <spi_nrfx_transceive+0x254>)
   24966:	f363 0002 	bfi	r0, r3, #0, #3
   2496a:	4b79      	ldr	r3, [pc, #484]	; (24b50 <spi_nrfx_transceive+0x258>)
   2496c:	f361 00c5 	bfi	r0, r1, #3, #3
   24970:	1a9b      	subs	r3, r3, r2
   24972:	08db      	lsrs	r3, r3, #3
   24974:	4978      	ldr	r1, [pc, #480]	; (24b58 <spi_nrfx_transceive+0x260>)
   24976:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
   2497a:	f022 ffc3 	bl	47904 <log_string_sync>
   2497e:	e7e3      	b.n	24948 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   24980:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
   24984:	d00e      	beq.n	249a4 <spi_nrfx_transceive+0xac>
		LOG_ERR("Only single line mode is supported");
   24986:	2301      	movs	r3, #1
   24988:	f04f 0000 	mov.w	r0, #0
   2498c:	4a6f      	ldr	r2, [pc, #444]	; (24b4c <spi_nrfx_transceive+0x254>)
   2498e:	f363 0002 	bfi	r0, r3, #0, #3
   24992:	4b6f      	ldr	r3, [pc, #444]	; (24b50 <spi_nrfx_transceive+0x258>)
   24994:	f36c 00c5 	bfi	r0, ip, #3, #3
   24998:	1a9b      	subs	r3, r3, r2
   2499a:	08db      	lsrs	r3, r3, #3
   2499c:	f363 108f 	bfi	r0, r3, #6, #10
   249a0:	496e      	ldr	r1, [pc, #440]	; (24b5c <spi_nrfx_transceive+0x264>)
   249a2:	e7ea      	b.n	2497a <spi_nrfx_transceive+0x82>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   249a4:	f3c3 1345 	ubfx	r3, r3, #5, #6
   249a8:	2b08      	cmp	r3, #8
   249aa:	d00e      	beq.n	249ca <spi_nrfx_transceive+0xd2>
		LOG_ERR("Word sizes other than 8 bits"
   249ac:	2301      	movs	r3, #1
   249ae:	f04f 0000 	mov.w	r0, #0
   249b2:	4a66      	ldr	r2, [pc, #408]	; (24b4c <spi_nrfx_transceive+0x254>)
   249b4:	f363 0002 	bfi	r0, r3, #0, #3
   249b8:	4b65      	ldr	r3, [pc, #404]	; (24b50 <spi_nrfx_transceive+0x258>)
   249ba:	f361 00c5 	bfi	r0, r1, #3, #3
   249be:	1a9b      	subs	r3, r3, r2
   249c0:	08db      	lsrs	r3, r3, #3
   249c2:	f363 108f 	bfi	r0, r3, #6, #10
   249c6:	4966      	ldr	r1, [pc, #408]	; (24b60 <spi_nrfx_transceive+0x268>)
   249c8:	e7d7      	b.n	2497a <spi_nrfx_transceive+0x82>
	if (spi_cfg->frequency < 125000) {
   249ca:	f8d8 0000 	ldr.w	r0, [r8]
   249ce:	4b65      	ldr	r3, [pc, #404]	; (24b64 <spi_nrfx_transceive+0x26c>)
   249d0:	4298      	cmp	r0, r3
   249d2:	d80e      	bhi.n	249f2 <spi_nrfx_transceive+0xfa>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   249d4:	2301      	movs	r3, #1
   249d6:	f04f 0000 	mov.w	r0, #0
   249da:	4a5c      	ldr	r2, [pc, #368]	; (24b4c <spi_nrfx_transceive+0x254>)
   249dc:	f363 0002 	bfi	r0, r3, #0, #3
   249e0:	4b5b      	ldr	r3, [pc, #364]	; (24b50 <spi_nrfx_transceive+0x258>)
   249e2:	f361 00c5 	bfi	r0, r1, #3, #3
   249e6:	1a9b      	subs	r3, r3, r2
   249e8:	08db      	lsrs	r3, r3, #3
   249ea:	f363 108f 	bfi	r0, r3, #6, #10
   249ee:	495e      	ldr	r1, [pc, #376]	; (24b68 <spi_nrfx_transceive+0x270>)
   249f0:	e7c3      	b.n	2497a <spi_nrfx_transceive+0x82>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   249f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return dev->config->config_info;
   249f6:	f8d2 9008 	ldr.w	r9, [r2, #8]
	ctx->config = spi_cfg;
   249fa:	f8c4 8000 	str.w	r8, [r4]
   249fe:	2b00      	cmp	r3, #0
   24a00:	d06f      	beq.n	24ae2 <spi_nrfx_transceive+0x1ea>
   24a02:	6818      	ldr	r0, [r3, #0]
   24a04:	2800      	cmp	r0, #0
   24a06:	d06c      	beq.n	24ae2 <spi_nrfx_transceive+0x1ea>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   24a08:	685a      	ldr	r2, [r3, #4]
	return api->config(port, access_op, pin, flags);
   24a0a:	6843      	ldr	r3, [r0, #4]
   24a0c:	f8d3 a000 	ldr.w	sl, [r3]
   24a10:	2301      	movs	r3, #1
   24a12:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
   24a14:	6822      	ldr	r2, [r4, #0]
   24a16:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   24a18:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
   24a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
   24a20:	43d2      	mvns	r2, r2
   24a22:	0fd2      	lsrs	r2, r2, #31
   24a24:	f024 f827 	bl	48a76 <gpio_pin_write>
	nrf_spim_configure(spim->p_reg,
   24a28:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   24a2c:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   24a30:	0798      	lsls	r0, r3, #30
   24a32:	f003 0204 	and.w	r2, r3, #4
   24a36:	d565      	bpl.n	24b04 <spi_nrfx_transceive+0x20c>
			return NRF_SPIM_MODE_3;
   24a38:	2a00      	cmp	r2, #0
   24a3a:	bf0c      	ite	eq
   24a3c:	2202      	moveq	r2, #2
   24a3e:	2203      	movne	r2, #3
                                        nrf_spim_mode_t      spi_mode,
                                        nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   24a40:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   24a42:	f3c3 1300 	ubfx	r3, r3, #4, #1
   24a46:	d061      	beq.n	24b0c <spi_nrfx_transceive+0x214>
   24a48:	2a03      	cmp	r2, #3
   24a4a:	d062      	beq.n	24b12 <spi_nrfx_transceive+0x21a>
   24a4c:	2a01      	cmp	r2, #1
   24a4e:	d101      	bne.n	24a54 <spi_nrfx_transceive+0x15c>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   24a50:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   24a54:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   24a58:	4a44      	ldr	r2, [pc, #272]	; (24b6c <spi_nrfx_transceive+0x274>)
	nrf_spim_frequency_set(spim->p_reg,
   24a5a:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
   24a5e:	4293      	cmp	r3, r2
   24a60:	d95a      	bls.n	24b18 <spi_nrfx_transceive+0x220>
	} else if (frequency < 500000) {
   24a62:	4a43      	ldr	r2, [pc, #268]	; (24b70 <spi_nrfx_transceive+0x278>)
   24a64:	4293      	cmp	r3, r2
   24a66:	d95a      	bls.n	24b1e <spi_nrfx_transceive+0x226>
	} else if (frequency < 1000000) {
   24a68:	4a42      	ldr	r2, [pc, #264]	; (24b74 <spi_nrfx_transceive+0x27c>)
   24a6a:	4293      	cmp	r3, r2
   24a6c:	d95a      	bls.n	24b24 <spi_nrfx_transceive+0x22c>
	} else if (frequency < 2000000) {
   24a6e:	4a42      	ldr	r2, [pc, #264]	; (24b78 <spi_nrfx_transceive+0x280>)
   24a70:	4293      	cmp	r3, r2
   24a72:	d95a      	bls.n	24b2a <spi_nrfx_transceive+0x232>
	} else if (frequency < 4000000) {
   24a74:	4a41      	ldr	r2, [pc, #260]	; (24b7c <spi_nrfx_transceive+0x284>)
   24a76:	4293      	cmp	r3, r2
   24a78:	d95a      	bls.n	24b30 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_4M;
   24a7a:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   24a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   24a82:	4293      	cmp	r3, r2
   24a84:	bf8c      	ite	hi
   24a86:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
   24a8a:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   24a8e:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   24a92:	2301      	movs	r3, #1
   24a94:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   24a98:	2e00      	cmp	r6, #0
   24a9a:	d04c      	beq.n	24b36 <spi_nrfx_transceive+0x23e>
		ctx->current_tx = tx_bufs->buffers;
   24a9c:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   24a9e:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   24aa0:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   24aa2:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   24aa4:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   24aa6:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   24aa8:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   24aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   24aac:	2d00      	cmp	r5, #0
   24aae:	d047      	beq.n	24b40 <spi_nrfx_transceive+0x248>
		ctx->current_rx = rx_bufs->buffers;
   24ab0:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   24ab2:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   24ab4:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   24ab6:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   24ab8:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   24aba:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   24abc:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   24abe:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   24ac0:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   24ac2:	2101      	movs	r1, #1
	ctx->sync_status = 0;
   24ac4:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   24ac6:	4620      	mov	r0, r4
   24ac8:	f023 ffdf 	bl	48a8a <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
   24acc:	4638      	mov	r0, r7
   24ace:	f7ff fe65 	bl	2479c <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   24ad2:	f04f 31ff 	mov.w	r1, #4294967295
   24ad6:	f104 001c 	add.w	r0, r4, #28
   24ada:	f01a f9fd 	bl	3eed8 <z_impl_k_sem_take>
	status = ctx->sync_status;
   24ade:	6b65      	ldr	r5, [r4, #52]	; 0x34
   24ae0:	e734      	b.n	2494c <spi_nrfx_transceive+0x54>
		LOG_INF("CS control inhibited (no GPIO device)");
   24ae2:	2303      	movs	r3, #3
   24ae4:	f04f 0000 	mov.w	r0, #0
   24ae8:	4a18      	ldr	r2, [pc, #96]	; (24b4c <spi_nrfx_transceive+0x254>)
   24aea:	f363 0002 	bfi	r0, r3, #0, #3
   24aee:	4b18      	ldr	r3, [pc, #96]	; (24b50 <spi_nrfx_transceive+0x258>)
   24af0:	f36f 00c5 	bfc	r0, #3, #3
   24af4:	1a9b      	subs	r3, r3, r2
   24af6:	08db      	lsrs	r3, r3, #3
   24af8:	f363 108f 	bfi	r0, r3, #6, #10
   24afc:	4920      	ldr	r1, [pc, #128]	; (24b80 <spi_nrfx_transceive+0x288>)
   24afe:	f022 ff01 	bl	47904 <log_string_sync>
   24b02:	e791      	b.n	24a28 <spi_nrfx_transceive+0x130>
			return NRF_SPIM_MODE_3;
   24b04:	3200      	adds	r2, #0
   24b06:	bf18      	it	ne
   24b08:	2201      	movne	r2, #1
   24b0a:	e799      	b.n	24a40 <spi_nrfx_transceive+0x148>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   24b0c:	f043 0304 	orr.w	r3, r3, #4
   24b10:	e7a0      	b.n	24a54 <spi_nrfx_transceive+0x15c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   24b12:	f043 0306 	orr.w	r3, r3, #6
   24b16:	e79d      	b.n	24a54 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_125K;
   24b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   24b1c:	e7b7      	b.n	24a8e <spi_nrfx_transceive+0x196>
		return NRF_SPIM_FREQ_250K;
   24b1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24b22:	e7b4      	b.n	24a8e <spi_nrfx_transceive+0x196>
		return NRF_SPIM_FREQ_500K;
   24b24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   24b28:	e7b1      	b.n	24a8e <spi_nrfx_transceive+0x196>
		return NRF_SPIM_FREQ_1M;
   24b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24b2e:	e7ae      	b.n	24a8e <spi_nrfx_transceive+0x196>
		return NRF_SPIM_FREQ_2M;
   24b30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   24b34:	e7ab      	b.n	24a8e <spi_nrfx_transceive+0x196>
		ctx->tx_count = 0;
   24b36:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   24b3a:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   24b3e:	e7b5      	b.n	24aac <spi_nrfx_transceive+0x1b4>
		ctx->rx_count = 0;
   24b40:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   24b44:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   24b48:	e7ba      	b.n	24ac0 <spi_nrfx_transceive+0x1c8>
   24b4a:	bf00      	nop
   24b4c:	0004a688 	.word	0x0004a688
   24b50:	0004a7b8 	.word	0x0004a7b8
   24b54:	0004efe5 	.word	0x0004efe5
   24b58:	0004f007 	.word	0x0004f007
   24b5c:	0004f026 	.word	0x0004f026
   24b60:	0004f049 	.word	0x0004f049
   24b64:	0001e847 	.word	0x0001e847
   24b68:	0004f078 	.word	0x0004f078
   24b6c:	0003d08f 	.word	0x0003d08f
   24b70:	0007a11f 	.word	0x0007a11f
   24b74:	000f423f 	.word	0x000f423f
   24b78:	001e847f 	.word	0x001e847f
   24b7c:	003d08ff 	.word	0x003d08ff
   24b80:	0004f0a9 	.word	0x0004f0a9

00024b84 <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   24b84:	4b01      	ldr	r3, [pc, #4]	; (24b8c <flash_nrf_write_protection+0x8>)

	return 0;
}
   24b86:	2000      	movs	r0, #0
	write_protect = enable;
   24b88:	7019      	strb	r1, [r3, #0]
}
   24b8a:	4770      	bx	lr
   24b8c:	2002a6e4 	.word	0x2002a6e4

00024b90 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24b90:	4b02      	ldr	r3, [pc, #8]	; (24b9c <flash_nrf_pages_layout+0xc>)
   24b92:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24b94:	2301      	movs	r3, #1
   24b96:	6013      	str	r3, [r2, #0]
}
   24b98:	4770      	bx	lr
   24b9a:	bf00      	nop
   24b9c:	20023ca8 	.word	0x20023ca8

00024ba0 <nrf_flash_init>:
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
   24ba0:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   24ba2:	2201      	movs	r2, #1
   24ba4:	4807      	ldr	r0, [pc, #28]	; (24bc4 <nrf_flash_init+0x24>)
   24ba6:	4611      	mov	r1, r2
   24ba8:	f01a f918 	bl	3eddc <z_impl_k_sem_init>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24bac:	f025 f9e0 	bl	49f70 <nrfx_nvmc_flash_page_count_get>
   24bb0:	4c05      	ldr	r4, [pc, #20]	; (24bc8 <nrf_flash_init+0x28>)
   24bb2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24bb4:	f025 f9d9 	bl	49f6a <nrfx_nvmc_flash_page_size_get>
#endif
	write_protect = true;
   24bb8:	2201      	movs	r2, #1
   24bba:	4b04      	ldr	r3, [pc, #16]	; (24bcc <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24bbc:	6060      	str	r0, [r4, #4]
	write_protect = true;
   24bbe:	701a      	strb	r2, [r3, #0]

	return 0;
}
   24bc0:	2000      	movs	r0, #0
   24bc2:	bd10      	pop	{r4, pc}
   24bc4:	20023cb0 	.word	0x20023cb0
   24bc8:	20023ca8 	.word	0x20023ca8
   24bcc:	2002a6e4 	.word	0x2002a6e4

00024bd0 <flash_nrf_erase>:
{
   24bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bd2:	4616      	mov	r6, r2
   24bd4:	460d      	mov	r5, r1
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24bd6:	f025 f9c8 	bl	49f6a <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   24bda:	4b17      	ldr	r3, [pc, #92]	; (24c38 <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24bdc:	4607      	mov	r7, r0
	if (write_protect) {
   24bde:	781b      	ldrb	r3, [r3, #0]
	u32_t n_pages = size / pg_size;
   24be0:	fbb6 f4f0 	udiv	r4, r6, r0
	if (write_protect) {
   24be4:	bb03      	cbnz	r3, 24c28 <flash_nrf_erase+0x58>
	if (is_regular_addr_valid(addr, size)) {
   24be6:	4631      	mov	r1, r6
   24be8:	4628      	mov	r0, r5
   24bea:	f023 ff98 	bl	48b1e <is_regular_addr_valid>
   24bee:	b1f0      	cbz	r0, 24c2e <flash_nrf_erase+0x5e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24bf0:	fbb5 f3f7 	udiv	r3, r5, r7
   24bf4:	fb07 5313 	mls	r3, r7, r3, r5
   24bf8:	b9cb      	cbnz	r3, 24c2e <flash_nrf_erase+0x5e>
   24bfa:	fb07 6714 	mls	r7, r7, r4, r6
   24bfe:	b9b7      	cbnz	r7, 24c2e <flash_nrf_erase+0x5e>
		if (!n_pages) {
   24c00:	b1c4      	cbz	r4, 24c34 <flash_nrf_erase+0x64>
	return z_impl_k_sem_take(sem, timeout);
   24c02:	f04f 31ff 	mov.w	r1, #4294967295
   24c06:	480d      	ldr	r0, [pc, #52]	; (24c3c <flash_nrf_erase+0x6c>)
   24c08:	f01a f966 	bl	3eed8 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24c0c:	f025 f9ad 	bl	49f6a <nrfx_nvmc_flash_page_size_get>
   24c10:	4604      	mov	r4, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24c12:	4628      	mov	r0, r5
   24c14:	f017 f976 	bl	3bf04 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   24c18:	1b36      	subs	r6, r6, r4
   24c1a:	4425      	add	r5, r4
   24c1c:	d1f9      	bne.n	24c12 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   24c1e:	4807      	ldr	r0, [pc, #28]	; (24c3c <flash_nrf_erase+0x6c>)
   24c20:	f01a f912 	bl	3ee48 <z_impl_k_sem_give>
	return ret;
   24c24:	4630      	mov	r0, r6
}
   24c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EACCES;
   24c28:	f06f 000c 	mvn.w	r0, #12
   24c2c:	e7fb      	b.n	24c26 <flash_nrf_erase+0x56>
		return -EINVAL;
   24c2e:	f06f 0015 	mvn.w	r0, #21
   24c32:	e7f8      	b.n	24c26 <flash_nrf_erase+0x56>
			return 0;
   24c34:	4620      	mov	r0, r4
   24c36:	e7f6      	b.n	24c26 <flash_nrf_erase+0x56>
   24c38:	2002a6e4 	.word	0x2002a6e4
   24c3c:	20023cb0 	.word	0x20023cb0

00024c40 <flash_nrf_write>:
{
   24c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c44:	461d      	mov	r5, r3
	if (write_protect) {
   24c46:	4b28      	ldr	r3, [pc, #160]	; (24ce8 <flash_nrf_write+0xa8>)
{
   24c48:	460c      	mov	r4, r1
	if (write_protect) {
   24c4a:	781b      	ldrb	r3, [r3, #0]
{
   24c4c:	4616      	mov	r6, r2
	if (write_protect) {
   24c4e:	2b00      	cmp	r3, #0
   24c50:	d141      	bne.n	24cd6 <flash_nrf_write+0x96>
	return is_regular_addr_valid(addr, len) ||
   24c52:	4629      	mov	r1, r5
   24c54:	4620      	mov	r0, r4
   24c56:	f023 ff62 	bl	48b1e <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   24c5a:	2800      	cmp	r0, #0
   24c5c:	d03e      	beq.n	24cdc <flash_nrf_write+0x9c>
	if (!len) {
   24c5e:	2d00      	cmp	r5, #0
   24c60:	d03f      	beq.n	24ce2 <flash_nrf_write+0xa2>
	return z_impl_k_sem_take(sem, timeout);
   24c62:	f04f 31ff 	mov.w	r1, #4294967295
   24c66:	4821      	ldr	r0, [pc, #132]	; (24cec <flash_nrf_write+0xac>)
   24c68:	f01a f936 	bl	3eed8 <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   24c6c:	f014 0703 	ands.w	r7, r4, #3
   24c70:	d00c      	beq.n	24c8c <flash_nrf_write+0x4c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   24c72:	f1c7 0704 	rsb	r7, r7, #4
   24c76:	42af      	cmp	r7, r5
   24c78:	bf28      	it	cs
   24c7a:	462f      	movcs	r7, r5
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   24c7c:	4631      	mov	r1, r6
   24c7e:	4620      	mov	r0, r4
   24c80:	463a      	mov	r2, r7
   24c82:	f017 f991 	bl	3bfa8 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   24c86:	443c      	add	r4, r7
	w_ctx->data_addr += shift;
   24c88:	443e      	add	r6, r7
	w_ctx->len -= shift;
   24c8a:	1bed      	subs	r5, r5, r7
   24c8c:	f025 0803 	bic.w	r8, r5, #3
   24c90:	eb04 0708 	add.w	r7, r4, r8
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
   24c94:	eba6 0904 	sub.w	r9, r6, r4
   24c98:	e005      	b.n	24ca6 <flash_nrf_write+0x66>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24c9a:	f859 1004 	ldr.w	r1, [r9, r4]
   24c9e:	4620      	mov	r0, r4
   24ca0:	f017 f95c 	bl	3bf5c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   24ca4:	3404      	adds	r4, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   24ca6:	42a7      	cmp	r7, r4
   24ca8:	d1f7      	bne.n	24c9a <flash_nrf_write+0x5a>
   24caa:	f06f 0303 	mvn.w	r3, #3
   24cae:	08aa      	lsrs	r2, r5, #2
   24cb0:	fb03 5202 	mla	r2, r3, r2, r5
   24cb4:	eb06 0108 	add.w	r1, r6, r8
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   24cb8:	b112      	cbz	r2, 24cc0 <flash_nrf_write+0x80>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   24cba:	4638      	mov	r0, r7
   24cbc:	f017 f974 	bl	3bfa8 <nrfx_nvmc_bytes_write>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24cc0:	4a0b      	ldr	r2, [pc, #44]	; (24cf0 <flash_nrf_write+0xb0>)
   24cc2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24cc6:	07db      	lsls	r3, r3, #31
   24cc8:	d5fb      	bpl.n	24cc2 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   24cca:	4808      	ldr	r0, [pc, #32]	; (24cec <flash_nrf_write+0xac>)
   24ccc:	f01a f8bc 	bl	3ee48 <z_impl_k_sem_give>
   24cd0:	2000      	movs	r0, #0
}
   24cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EACCES;
   24cd6:	f06f 000c 	mvn.w	r0, #12
   24cda:	e7fa      	b.n	24cd2 <flash_nrf_write+0x92>
		return -EINVAL;
   24cdc:	f06f 0015 	mvn.w	r0, #21
   24ce0:	e7f7      	b.n	24cd2 <flash_nrf_write+0x92>
		return 0;
   24ce2:	4628      	mov	r0, r5
   24ce4:	e7f5      	b.n	24cd2 <flash_nrf_write+0x92>
   24ce6:	bf00      	nop
   24ce8:	2002a6e4 	.word	0x2002a6e4
   24cec:	20023cb0 	.word	0x20023cb0
   24cf0:	40039000 	.word	0x40039000

00024cf4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   24cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
   24cf6:	794b      	ldrb	r3, [r1, #5]
   24cf8:	2b01      	cmp	r3, #1
   24cfa:	d029      	beq.n	24d50 <uarte_nrfx_configure+0x5c>
   24cfc:	2b03      	cmp	r3, #3
   24cfe:	d124      	bne.n	24d4a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
   24d00:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24d02:	798b      	ldrb	r3, [r1, #6]
   24d04:	2b03      	cmp	r3, #3
   24d06:	d120      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24d08:	79cd      	ldrb	r5, [r1, #7]
   24d0a:	b12d      	cbz	r5, 24d18 <uarte_nrfx_configure+0x24>
   24d0c:	2d01      	cmp	r5, #1
   24d0e:	d11c      	bne.n	24d4a <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   24d10:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   24d12:	689b      	ldr	r3, [r3, #8]
   24d14:	791b      	ldrb	r3, [r3, #4]
   24d16:	b1c3      	cbz	r3, 24d4a <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   24d18:	790a      	ldrb	r2, [r1, #4]
   24d1a:	b112      	cbz	r2, 24d22 <uarte_nrfx_configure+0x2e>
   24d1c:	2a02      	cmp	r2, #2
   24d1e:	d114      	bne.n	24d4a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   24d20:	220e      	movs	r2, #14
	switch (baudrate) {
   24d22:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   24d26:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24d28:	689b      	ldr	r3, [r3, #8]
   24d2a:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
   24d2c:	680b      	ldr	r3, [r1, #0]
   24d2e:	42bb      	cmp	r3, r7
   24d30:	d074      	beq.n	24e1c <uarte_nrfx_configure+0x128>
   24d32:	d829      	bhi.n	24d88 <uarte_nrfx_configure+0x94>
   24d34:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24d38:	d06a      	beq.n	24e10 <uarte_nrfx_configure+0x11c>
   24d3a:	d814      	bhi.n	24d66 <uarte_nrfx_configure+0x72>
   24d3c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24d40:	d04f      	beq.n	24de2 <uarte_nrfx_configure+0xee>
   24d42:	d807      	bhi.n	24d54 <uarte_nrfx_configure+0x60>
   24d44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24d48:	d07d      	beq.n	24e46 <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
   24d4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24d4e:	e05b      	b.n	24e08 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
   24d50:	2600      	movs	r6, #0
   24d52:	e7d6      	b.n	24d02 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24d54:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24d58:	d057      	beq.n	24e0a <uarte_nrfx_configure+0x116>
   24d5a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24d5e:	d1f4      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24d60:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24d64:	e03f      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24d66:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24d6a:	d053      	beq.n	24e14 <uarte_nrfx_configure+0x120>
   24d6c:	d804      	bhi.n	24d78 <uarte_nrfx_configure+0x84>
   24d6e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24d72:	d1ea      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24d74:	4b35      	ldr	r3, [pc, #212]	; (24e4c <uarte_nrfx_configure+0x158>)
   24d76:	e036      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24d78:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24d7c:	d04c      	beq.n	24e18 <uarte_nrfx_configure+0x124>
   24d7e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24d82:	d1e2      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24d84:	4b32      	ldr	r3, [pc, #200]	; (24e50 <uarte_nrfx_configure+0x15c>)
   24d86:	e02e      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24d88:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24d8c:	d04f      	beq.n	24e2e <uarte_nrfx_configure+0x13a>
   24d8e:	d812      	bhi.n	24db6 <uarte_nrfx_configure+0xc2>
   24d90:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24d94:	42bb      	cmp	r3, r7
   24d96:	d044      	beq.n	24e22 <uarte_nrfx_configure+0x12e>
   24d98:	d805      	bhi.n	24da6 <uarte_nrfx_configure+0xb2>
   24d9a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   24d9e:	d1d4      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24da0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24da4:	e01f      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24da6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24daa:	d03d      	beq.n	24e28 <uarte_nrfx_configure+0x134>
   24dac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24db0:	d1cb      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24db2:	4b28      	ldr	r3, [pc, #160]	; (24e54 <uarte_nrfx_configure+0x160>)
   24db4:	e017      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24db6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24dba:	d03e      	beq.n	24e3a <uarte_nrfx_configure+0x146>
   24dbc:	d808      	bhi.n	24dd0 <uarte_nrfx_configure+0xdc>
   24dbe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24dc2:	d037      	beq.n	24e34 <uarte_nrfx_configure+0x140>
   24dc4:	4f24      	ldr	r7, [pc, #144]	; (24e58 <uarte_nrfx_configure+0x164>)
   24dc6:	42bb      	cmp	r3, r7
   24dc8:	d1bf      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   24dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24dce:	e00a      	b.n	24de6 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   24dd0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24dd4:	d034      	beq.n	24e40 <uarte_nrfx_configure+0x14c>
   24dd6:	4f21      	ldr	r7, [pc, #132]	; (24e5c <uarte_nrfx_configure+0x168>)
   24dd8:	42bb      	cmp	r3, r7
   24dda:	d1b6      	bne.n	24d4a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24de0:	e001      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   24de2:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   24de6:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24de8:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   24dec:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
   24df0:	b12e      	cbz	r6, 24dfe <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
   24df2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
   24df6:	f043 0310 	orr.w	r3, r3, #16
   24dfa:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
   24dfe:	6883      	ldr	r3, [r0, #8]
   24e00:	c903      	ldmia	r1, {r0, r1}
   24e02:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24e06:	2000      	movs	r0, #0
}
   24e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24e0a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24e0e:	e7ea      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24e10:	4b13      	ldr	r3, [pc, #76]	; (24e60 <uarte_nrfx_configure+0x16c>)
   24e12:	e7e8      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24e14:	4b13      	ldr	r3, [pc, #76]	; (24e64 <uarte_nrfx_configure+0x170>)
   24e16:	e7e6      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24e18:	4b13      	ldr	r3, [pc, #76]	; (24e68 <uarte_nrfx_configure+0x174>)
   24e1a:	e7e4      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24e1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24e20:	e7e1      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24e22:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24e26:	e7de      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24e28:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24e2c:	e7db      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24e2e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24e32:	e7d8      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24e34:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24e38:	e7d5      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24e3a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24e3e:	e7d2      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24e40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24e44:	e7cf      	b.n	24de6 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   24e46:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24e4a:	e7cc      	b.n	24de6 <uarte_nrfx_configure+0xf2>
   24e4c:	00275000 	.word	0x00275000
   24e50:	0075c000 	.word	0x0075c000
   24e54:	013a9000 	.word	0x013a9000
   24e58:	0003d090 	.word	0x0003d090
   24e5c:	000f4240 	.word	0x000f4240
   24e60:	0013b000 	.word	0x0013b000
   24e64:	003af000 	.word	0x003af000
   24e68:	004ea000 	.word	0x004ea000

00024e6c <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   24e6c:	b570      	push	{r4, r5, r6, lr}
   24e6e:	4606      	mov	r6, r0
   24e70:	2200      	movs	r2, #0
   24e72:	2101      	movs	r1, #1
   24e74:	2008      	movs	r0, #8
   24e76:	f7fc fc49 	bl	2170c <z_arm_irq_priority_set>
   24e7a:	2008      	movs	r0, #8
   24e7c:	f7fc fc36 	bl	216ec <z_arch_irq_enable>
   24e80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	return dev->config->config_info;
   24e84:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24e86:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   24e88:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24e8a:	2103      	movs	r1, #3
   24e8c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   24e8e:	4b1a      	ldr	r3, [pc, #104]	; (24ef8 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   24e90:	2012      	movs	r0, #18
   24e92:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24e94:	2200      	movs	r2, #0
   24e96:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
   24e9a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
   24e9e:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   24ea2:	2013      	movs	r0, #19
   24ea4:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   24ea8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   24eac:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24eae:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
   24eb2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    p_reg->PSEL.RTS = pselrts;
   24eb6:	2314      	movs	r3, #20
   24eb8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   24ebc:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   24ebe:	4629      	mov	r1, r5
   24ec0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   24ec4:	4630      	mov	r0, r6
   24ec6:	f7ff ff15 	bl	24cf4 <uarte_nrfx_configure>
	if (err) {
   24eca:	b9a0      	cbnz	r0, 24ef6 <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24ecc:	2308      	movs	r3, #8
   24ece:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   24ed2:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ed6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24eda:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24ede:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   24ee0:	68aa      	ldr	r2, [r5, #8]
   24ee2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24ee6:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ee8:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24eea:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24eee:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ef2:	60a3      	str	r3, [r4, #8]
   24ef4:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   24ef6:	bd70      	pop	{r4, r5, r6, pc}
   24ef8:	40842500 	.word	0x40842500

00024efc <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   24efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24efe:	460d      	mov	r5, r1
   24f00:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   24f02:	b948      	cbnz	r0, 24f18 <entropy_cc310_rng_get_entropy+0x1c>
   24f04:	4910      	ldr	r1, [pc, #64]	; (24f48 <entropy_cc310_rng_get_entropy+0x4c>)
   24f06:	4811      	ldr	r0, [pc, #68]	; (24f4c <entropy_cc310_rng_get_entropy+0x50>)
   24f08:	231e      	movs	r3, #30
   24f0a:	4a11      	ldr	r2, [pc, #68]	; (24f50 <entropy_cc310_rng_get_entropy+0x54>)
   24f0c:	f022 fcdd 	bl	478ca <printk>
   24f10:	211e      	movs	r1, #30
   24f12:	480f      	ldr	r0, [pc, #60]	; (24f50 <entropy_cc310_rng_get_entropy+0x54>)
   24f14:	f022 fce6 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   24f18:	b94d      	cbnz	r5, 24f2e <entropy_cc310_rng_get_entropy+0x32>
   24f1a:	490e      	ldr	r1, [pc, #56]	; (24f54 <entropy_cc310_rng_get_entropy+0x58>)
   24f1c:	480b      	ldr	r0, [pc, #44]	; (24f4c <entropy_cc310_rng_get_entropy+0x50>)
   24f1e:	231f      	movs	r3, #31
   24f20:	4a0b      	ldr	r2, [pc, #44]	; (24f50 <entropy_cc310_rng_get_entropy+0x54>)
   24f22:	f022 fcd2 	bl	478ca <printk>
   24f26:	211f      	movs	r1, #31
   24f28:	4809      	ldr	r0, [pc, #36]	; (24f50 <entropy_cc310_rng_get_entropy+0x54>)
   24f2a:	f022 fcdb 	bl	478e4 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   24f2e:	aa01      	add	r2, sp, #4
   24f30:	4621      	mov	r1, r4
   24f32:	4628      	mov	r0, r5
   24f34:	f7f3 f85c 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   24f38:	9b01      	ldr	r3, [sp, #4]
   24f3a:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   24f3c:	bf18      	it	ne
   24f3e:	f06f 0015 	mvnne.w	r0, #21
   24f42:	b003      	add	sp, #12
   24f44:	bd30      	pop	{r4, r5, pc}
   24f46:	bf00      	nop
   24f48:	0004f11e 	.word	0x0004f11e
   24f4c:	0004ccf0 	.word	0x0004ccf0
   24f50:	0004f0ed 	.word	0x0004f0ed
   24f54:	0004f131 	.word	0x0004f131

00024f58 <parse_string>:
{
   24f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24f5c:	680a      	ldr	r2, [r1, #0]
   24f5e:	688b      	ldr	r3, [r1, #8]
{
   24f60:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24f62:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24f64:	18d0      	adds	r0, r2, r3
   24f66:	5cd3      	ldrb	r3, [r2, r3]
{
   24f68:	468b      	mov	fp, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24f6a:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24f6c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24f6e:	f040 80ce 	bne.w	2510e <parse_string+0x1b6>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   24f72:	462e      	mov	r6, r5
        size_t skipped_bytes = 0;
   24f74:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   24f76:	684c      	ldr	r4, [r1, #4]
   24f78:	1ab1      	subs	r1, r6, r2
   24f7a:	42a1      	cmp	r1, r4
   24f7c:	f080 80c7 	bcs.w	2510e <parse_string+0x1b6>
   24f80:	7831      	ldrb	r1, [r6, #0]
   24f82:	2922      	cmp	r1, #34	; 0x22
   24f84:	d11d      	bne.n	24fc2 <parse_string+0x6a>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   24f86:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   24f8a:	1a30      	subs	r0, r6, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   24f8c:	f8db 2010 	ldr.w	r2, [fp, #16]
   24f90:	4418      	add	r0, r3
   24f92:	4790      	blx	r2
        if (output == NULL)
   24f94:	4681      	mov	r9, r0
   24f96:	2800      	cmp	r0, #0
   24f98:	f000 80b9 	beq.w	2510e <parse_string+0x1b6>
   24f9c:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   24f9e:	f04f 0a0c 	mov.w	sl, #12
    while (input_pointer < input_end)
   24fa2:	42b5      	cmp	r5, r6
   24fa4:	d317      	bcc.n	24fd6 <parse_string+0x7e>
    *output_pointer = '\0';
   24fa6:	2300      	movs	r3, #0
   24fa8:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   24faa:	2310      	movs	r3, #16
    return true;
   24fac:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   24fae:	e9c8 3903 	strd	r3, r9, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   24fb2:	f8db 3000 	ldr.w	r3, [fp]
   24fb6:	1af6      	subs	r6, r6, r3
    input_buffer->offset++;
   24fb8:	3601      	adds	r6, #1
   24fba:	f8cb 6008 	str.w	r6, [fp, #8]
}
   24fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (input_end[0] == '\\')
   24fc2:	295c      	cmp	r1, #92	; 0x5c
   24fc4:	d105      	bne.n	24fd2 <parse_string+0x7a>
   24fc6:	3601      	adds	r6, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   24fc8:	1ab1      	subs	r1, r6, r2
   24fca:	428c      	cmp	r4, r1
   24fcc:	f240 809f 	bls.w	2510e <parse_string+0x1b6>
                skipped_bytes++;
   24fd0:	3301      	adds	r3, #1
            input_end++;
   24fd2:	3601      	adds	r6, #1
   24fd4:	e7d0      	b.n	24f78 <parse_string+0x20>
        if (*input_pointer != '\\')
   24fd6:	782b      	ldrb	r3, [r5, #0]
   24fd8:	2b5c      	cmp	r3, #92	; 0x5c
   24fda:	d003      	beq.n	24fe4 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   24fdc:	7023      	strb	r3, [r4, #0]
   24fde:	3501      	adds	r5, #1
   24fe0:	3401      	adds	r4, #1
   24fe2:	e7de      	b.n	24fa2 <parse_string+0x4a>
            if ((input_end - input_pointer) < 1)
   24fe4:	1b72      	subs	r2, r6, r5
   24fe6:	2a00      	cmp	r2, #0
   24fe8:	dd08      	ble.n	24ffc <parse_string+0xa4>
            switch (input_pointer[1])
   24fea:	786b      	ldrb	r3, [r5, #1]
   24fec:	2b66      	cmp	r3, #102	; 0x66
   24fee:	d067      	beq.n	250c0 <parse_string+0x168>
   24ff0:	d816      	bhi.n	25020 <parse_string+0xc8>
   24ff2:	2b2f      	cmp	r3, #47	; 0x2f
   24ff4:	d012      	beq.n	2501c <parse_string+0xc4>
   24ff6:	d80c      	bhi.n	25012 <parse_string+0xba>
   24ff8:	2b22      	cmp	r3, #34	; 0x22
   24ffa:	d00f      	beq.n	2501c <parse_string+0xc4>
        input_buffer->hooks.deallocate(output);
   24ffc:	f8db 3014 	ldr.w	r3, [fp, #20]
   25000:	4648      	mov	r0, r9
   25002:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   25004:	f8db 0000 	ldr.w	r0, [fp]
   25008:	1a28      	subs	r0, r5, r0
   2500a:	f8cb 0008 	str.w	r0, [fp, #8]
    return false;
   2500e:	2000      	movs	r0, #0
   25010:	e7d5      	b.n	24fbe <parse_string+0x66>
            switch (input_pointer[1])
   25012:	2b5c      	cmp	r3, #92	; 0x5c
   25014:	d002      	beq.n	2501c <parse_string+0xc4>
   25016:	2b62      	cmp	r3, #98	; 0x62
   25018:	d1f0      	bne.n	24ffc <parse_string+0xa4>
                    *output_pointer++ = '\b';
   2501a:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   2501c:	7023      	strb	r3, [r4, #0]
   2501e:	e051      	b.n	250c4 <parse_string+0x16c>
            switch (input_pointer[1])
   25020:	2b72      	cmp	r3, #114	; 0x72
   25022:	d053      	beq.n	250cc <parse_string+0x174>
   25024:	d803      	bhi.n	2502e <parse_string+0xd6>
   25026:	2b6e      	cmp	r3, #110	; 0x6e
   25028:	d1e8      	bne.n	24ffc <parse_string+0xa4>
                    *output_pointer++ = '\n';
   2502a:	230a      	movs	r3, #10
   2502c:	e7f6      	b.n	2501c <parse_string+0xc4>
            switch (input_pointer[1])
   2502e:	2b74      	cmp	r3, #116	; 0x74
   25030:	d04f      	beq.n	250d2 <parse_string+0x17a>
   25032:	2b75      	cmp	r3, #117	; 0x75
   25034:	d1e2      	bne.n	24ffc <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   25036:	2a05      	cmp	r2, #5
   25038:	dde0      	ble.n	24ffc <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   2503a:	1ca8      	adds	r0, r5, #2
   2503c:	f023 fed1 	bl	48de2 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   25040:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   25044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   25048:	4607      	mov	r7, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2504a:	d3d7      	bcc.n	24ffc <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   2504c:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   25050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   25054:	d240      	bcs.n	250d8 <parse_string+0x180>
        const unsigned char *second_sequence = first_sequence + 6;
   25056:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   25058:	1af3      	subs	r3, r6, r3
   2505a:	2b05      	cmp	r3, #5
   2505c:	ddce      	ble.n	24ffc <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   2505e:	79ab      	ldrb	r3, [r5, #6]
   25060:	2b5c      	cmp	r3, #92	; 0x5c
   25062:	d1cb      	bne.n	24ffc <parse_string+0xa4>
   25064:	79eb      	ldrb	r3, [r5, #7]
   25066:	2b75      	cmp	r3, #117	; 0x75
   25068:	d1c8      	bne.n	24ffc <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   2506a:	f105 0008 	add.w	r0, r5, #8
   2506e:	f023 feb8 	bl	48de2 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   25072:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   25076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2507a:	d2bf      	bcs.n	24ffc <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2507c:	4b26      	ldr	r3, [pc, #152]	; (25118 <parse_string+0x1c0>)
   2507e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   25082:	ea03 2787 	and.w	r7, r3, r7, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   25086:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   25088:	4338      	orrs	r0, r7
   2508a:	f500 3780 	add.w	r7, r0, #65536	; 0x10000
    else if (codepoint < 0x10000)
   2508e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   25092:	d330      	bcc.n	250f6 <parse_string+0x19e>
    else if (codepoint <= 0x10FFFF)
   25094:	4a21      	ldr	r2, [pc, #132]	; (2511c <parse_string+0x1c4>)
   25096:	4297      	cmp	r7, r2
   25098:	d8b0      	bhi.n	24ffc <parse_string+0xa4>
        first_byte_mark = 0xF0; /* 11110000 */
   2509a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   2509e:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   250a0:	f100 3eff 	add.w	lr, r0, #4294967295
   250a4:	fa54 fe8e 	uxtab	lr, r4, lr
   250a8:	45a6      	cmp	lr, r4
   250aa:	b2fa      	uxtb	r2, r7
   250ac:	d127      	bne.n	250fe <parse_string+0x1a6>
    if (utf8_length > 1)
   250ae:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   250b0:	bf14      	ite	ne
   250b2:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   250b6:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   250ba:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   250bc:	4404      	add	r4, r0
   250be:	e003      	b.n	250c8 <parse_string+0x170>
                    *output_pointer++ = '\f';
   250c0:	f884 a000 	strb.w	sl, [r4]
            unsigned char sequence_length = 2;
   250c4:	2302      	movs	r3, #2
                    *output_pointer++ = '\f';
   250c6:	3401      	adds	r4, #1
            input_pointer += sequence_length;
   250c8:	441d      	add	r5, r3
   250ca:	e76a      	b.n	24fa2 <parse_string+0x4a>
                    *output_pointer++ = '\r';
   250cc:	f04f 030d 	mov.w	r3, #13
   250d0:	e7a4      	b.n	2501c <parse_string+0xc4>
                    *output_pointer++ = '\t';
   250d2:	f04f 0309 	mov.w	r3, #9
   250d6:	e7a1      	b.n	2501c <parse_string+0xc4>
    if (codepoint < 0x80)
   250d8:	287f      	cmp	r0, #127	; 0x7f
        sequence_length = 6; /* \uXXXX */
   250da:	f04f 0306 	mov.w	r3, #6
    if (codepoint < 0x80)
   250de:	d906      	bls.n	250ee <parse_string+0x196>
    else if (codepoint < 0x800)
   250e0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   250e4:	d2d3      	bcs.n	2508e <parse_string+0x136>
        first_byte_mark = 0xC0; /* 11000000 */
   250e6:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   250ea:	2002      	movs	r0, #2
   250ec:	e7d8      	b.n	250a0 <parse_string+0x148>
    unsigned char first_byte_mark = 0;
   250ee:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   250f2:	2001      	movs	r0, #1
   250f4:	e7d4      	b.n	250a0 <parse_string+0x148>
        first_byte_mark = 0xE0; /* 11100000 */
   250f6:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   250fa:	2003      	movs	r0, #3
   250fc:	e7d0      	b.n	250a0 <parse_string+0x148>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   250fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   25102:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25106:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   2510a:	09bf      	lsrs	r7, r7, #6
   2510c:	e7cc      	b.n	250a8 <parse_string+0x150>
    if (input_pointer != NULL)
   2510e:	2d00      	cmp	r5, #0
   25110:	f47f af78 	bne.w	25004 <parse_string+0xac>
    return false;
   25114:	4628      	mov	r0, r5
   25116:	e752      	b.n	24fbe <parse_string+0x66>
   25118:	000ffc00 	.word	0x000ffc00
   2511c:	0010ffff 	.word	0x0010ffff

00025120 <print_string_ptr>:
{
   25120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25124:	4683      	mov	fp, r0
   25126:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   25128:	460f      	mov	r7, r1
   2512a:	b919      	cbnz	r1, 25134 <print_string_ptr+0x14>
        return false;
   2512c:	2000      	movs	r0, #0
}
   2512e:	b005      	add	sp, #20
   25130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   25134:	4b4a      	ldr	r3, [pc, #296]	; (25260 <print_string_ptr+0x140>)
   25136:	881a      	ldrh	r2, [r3, #0]
   25138:	789b      	ldrb	r3, [r3, #2]
   2513a:	f8ad 200c 	strh.w	r2, [sp, #12]
   2513e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   25142:	2800      	cmp	r0, #0
   25144:	d07d      	beq.n	25242 <print_string_ptr+0x122>
   25146:	4682      	mov	sl, r0
    size_t escape_characters = 0;
   25148:	2500      	movs	r5, #0
    for (input_pointer = input; *input_pointer; input_pointer++)
   2514a:	4652      	mov	r2, sl
   2514c:	f812 3b01 	ldrb.w	r3, [r2], #1
   25150:	b9fb      	cbnz	r3, 25192 <print_string_ptr+0x72>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   25152:	ebaa 0a0b 	sub.w	sl, sl, fp
   25156:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   25158:	f10a 0103 	add.w	r1, sl, #3
   2515c:	4638      	mov	r0, r7
   2515e:	f023 fefb 	bl	48f58 <ensure>
    if (output == NULL)
   25162:	4606      	mov	r6, r0
   25164:	2800      	cmp	r0, #0
   25166:	d0e1      	beq.n	2512c <print_string_ptr+0xc>
   25168:	2322      	movs	r3, #34	; 0x22
   2516a:	1c44      	adds	r4, r0, #1
   2516c:	f10a 0901 	add.w	r9, sl, #1
   25170:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   25174:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   25176:	b9fd      	cbnz	r5, 251b8 <print_string_ptr+0x98>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25178:	4652      	mov	r2, sl
   2517a:	4659      	mov	r1, fp
   2517c:	4620      	mov	r0, r4
        output[0] = '\"';
   2517e:	9301      	str	r3, [sp, #4]
   25180:	f7f4 fe96 	bl	19eb0 <memcpy>
        output[output_length + 1] = '\"';
   25184:	9b01      	ldr	r3, [sp, #4]
   25186:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2518a:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   2518e:	2001      	movs	r0, #1
   25190:	e7cd      	b.n	2512e <print_string_ptr+0xe>
        switch (*input_pointer)
   25192:	2b0d      	cmp	r3, #13
   25194:	d808      	bhi.n	251a8 <print_string_ptr+0x88>
   25196:	2b0c      	cmp	r3, #12
   25198:	d203      	bcs.n	251a2 <print_string_ptr+0x82>
   2519a:	f1a3 0108 	sub.w	r1, r3, #8
   2519e:	2902      	cmp	r1, #2
   251a0:	d806      	bhi.n	251b0 <print_string_ptr+0x90>
                escape_characters++;
   251a2:	3501      	adds	r5, #1
    size_t escape_characters = 0;
   251a4:	4692      	mov	sl, r2
   251a6:	e7d0      	b.n	2514a <print_string_ptr+0x2a>
        switch (*input_pointer)
   251a8:	2b22      	cmp	r3, #34	; 0x22
   251aa:	d0fa      	beq.n	251a2 <print_string_ptr+0x82>
   251ac:	2b5c      	cmp	r3, #92	; 0x5c
   251ae:	d0f8      	beq.n	251a2 <print_string_ptr+0x82>
                if (*input_pointer < 32)
   251b0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   251b2:	bf98      	it	ls
   251b4:	3505      	addls	r5, #5
   251b6:	e7f5      	b.n	251a4 <print_string_ptr+0x84>
   251b8:	f10b 33ff 	add.w	r3, fp, #4294967295
                    *output_pointer = 'f';
   251bc:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   251c0:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   251c4:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   251c6:	9a01      	ldr	r2, [sp, #4]
   251c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   251cc:	9201      	str	r2, [sp, #4]
   251ce:	b92b      	cbnz	r3, 251dc <print_string_ptr+0xbc>
    output[output_length + 1] = '\"';
   251d0:	2222      	movs	r2, #34	; 0x22
   251d2:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   251d6:	f806 3008 	strb.w	r3, [r6, r8]
   251da:	e7d8      	b.n	2518e <print_string_ptr+0x6e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   251dc:	2b1f      	cmp	r3, #31
   251de:	d907      	bls.n	251f0 <print_string_ptr+0xd0>
   251e0:	2b22      	cmp	r3, #34	; 0x22
   251e2:	d005      	beq.n	251f0 <print_string_ptr+0xd0>
   251e4:	2b5c      	cmp	r3, #92	; 0x5c
   251e6:	d003      	beq.n	251f0 <print_string_ptr+0xd0>
            *output_pointer = *input_pointer;
   251e8:	4620      	mov	r0, r4
   251ea:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   251ec:	1c44      	adds	r4, r0, #1
   251ee:	e7ea      	b.n	251c6 <print_string_ptr+0xa6>
            switch (*input_pointer)
   251f0:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   251f2:	f884 b000 	strb.w	fp, [r4]
            switch (*input_pointer)
   251f6:	781b      	ldrb	r3, [r3, #0]
            *output_pointer++ = '\\';
   251f8:	1c60      	adds	r0, r4, #1
            switch (*input_pointer)
   251fa:	2b0c      	cmp	r3, #12
   251fc:	d011      	beq.n	25222 <print_string_ptr+0x102>
   251fe:	d808      	bhi.n	25212 <print_string_ptr+0xf2>
   25200:	2b09      	cmp	r3, #9
   25202:	d013      	beq.n	2522c <print_string_ptr+0x10c>
   25204:	2b0a      	cmp	r3, #10
   25206:	d00f      	beq.n	25228 <print_string_ptr+0x108>
   25208:	2b08      	cmp	r3, #8
   2520a:	d111      	bne.n	25230 <print_string_ptr+0x110>
                    *output_pointer = 'b';
   2520c:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   2520e:	7063      	strb	r3, [r4, #1]
   25210:	e7ec      	b.n	251ec <print_string_ptr+0xcc>
            switch (*input_pointer)
   25212:	2b22      	cmp	r3, #34	; 0x22
   25214:	d0fb      	beq.n	2520e <print_string_ptr+0xee>
   25216:	2b5c      	cmp	r3, #92	; 0x5c
   25218:	d0f9      	beq.n	2520e <print_string_ptr+0xee>
   2521a:	2b0d      	cmp	r3, #13
   2521c:	d108      	bne.n	25230 <print_string_ptr+0x110>
                    *output_pointer = 'r';
   2521e:	2372      	movs	r3, #114	; 0x72
   25220:	e7f5      	b.n	2520e <print_string_ptr+0xee>
                    *output_pointer = 'f';
   25222:	f884 a001 	strb.w	sl, [r4, #1]
   25226:	e7e1      	b.n	251ec <print_string_ptr+0xcc>
                    *output_pointer = 'n';
   25228:	236e      	movs	r3, #110	; 0x6e
   2522a:	e7f0      	b.n	2520e <print_string_ptr+0xee>
                    *output_pointer = 't';
   2522c:	2374      	movs	r3, #116	; 0x74
   2522e:	e7ee      	b.n	2520e <print_string_ptr+0xee>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   25230:	6839      	ldr	r1, [r7, #0]
   25232:	687d      	ldr	r5, [r7, #4]
   25234:	1a41      	subs	r1, r0, r1
   25236:	4a0b      	ldr	r2, [pc, #44]	; (25264 <print_string_ptr+0x144>)
   25238:	1a69      	subs	r1, r5, r1
   2523a:	f01c f923 	bl	41484 <snprintf>
                    output_pointer += 4;
   2523e:	1d60      	adds	r0, r4, #5
   25240:	e7d4      	b.n	251ec <print_string_ptr+0xcc>
        output = ensure(output_buffer, sizeof(quotes));
   25242:	2103      	movs	r1, #3
   25244:	4638      	mov	r0, r7
   25246:	f023 fe87 	bl	48f58 <ensure>
        if (output == NULL)
   2524a:	2800      	cmp	r0, #0
   2524c:	f43f af6e 	beq.w	2512c <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   25250:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   25254:	a903      	add	r1, sp, #12
   25256:	1ad2      	subs	r2, r2, r3
   25258:	f01c fb58 	bl	4190c <strncpy>
   2525c:	e797      	b.n	2518e <print_string_ptr+0x6e>
   2525e:	bf00      	nop
   25260:	0004f151 	.word	0x0004f151
   25264:	0004f14b 	.word	0x0004f14b

00025268 <print_value>:
{
   25268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2526c:	460c      	mov	r4, r1
   2526e:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   25270:	4606      	mov	r6, r0
   25272:	b908      	cbnz	r0, 25278 <print_value+0x10>
            return false;
   25274:	2000      	movs	r0, #0
   25276:	e027      	b.n	252c8 <print_value+0x60>
    if ((item == NULL) || (output_buffer == NULL))
   25278:	2900      	cmp	r1, #0
   2527a:	d0fb      	beq.n	25274 <print_value+0xc>
    switch ((item->type) & 0xFF)
   2527c:	7b05      	ldrb	r5, [r0, #12]
   2527e:	2d08      	cmp	r5, #8
   25280:	d045      	beq.n	2530e <print_value+0xa6>
   25282:	dc19      	bgt.n	252b8 <print_value+0x50>
   25284:	2d02      	cmp	r5, #2
   25286:	d040      	beq.n	2530a <print_value+0xa2>
   25288:	2d04      	cmp	r5, #4
   2528a:	d036      	beq.n	252fa <print_value+0x92>
   2528c:	2d01      	cmp	r5, #1
   2528e:	d1f1      	bne.n	25274 <print_value+0xc>
            output = ensure(output_buffer, sizeof(buff));
   25290:	2106      	movs	r1, #6
            const char buff[] = "false";
   25292:	4bb0      	ldr	r3, [pc, #704]	; (25554 <print_value+0x2ec>)
   25294:	6818      	ldr	r0, [r3, #0]
   25296:	889b      	ldrh	r3, [r3, #4]
   25298:	9005      	str	r0, [sp, #20]
   2529a:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   2529e:	4620      	mov	r0, r4
   252a0:	f023 fe5a 	bl	48f58 <ensure>
            if (output == NULL)
   252a4:	2800      	cmp	r0, #0
   252a6:	d0e5      	beq.n	25274 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   252a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   252ac:	a905      	add	r1, sp, #20
   252ae:	1ad2      	subs	r2, r2, r3
   252b0:	f01c fb2c 	bl	4190c <strncpy>
    return true;
   252b4:	2001      	movs	r0, #1
   252b6:	e007      	b.n	252c8 <print_value+0x60>
    switch ((item->type) & 0xFF)
   252b8:	2d20      	cmp	r5, #32
   252ba:	d06f      	beq.n	2539c <print_value+0x134>
   252bc:	dc07      	bgt.n	252ce <print_value+0x66>
   252be:	2d10      	cmp	r5, #16
   252c0:	d1d8      	bne.n	25274 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   252c2:	6900      	ldr	r0, [r0, #16]
   252c4:	f7ff ff2c 	bl	25120 <print_string_ptr>
}
   252c8:	b00d      	add	sp, #52	; 0x34
   252ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   252ce:	2d40      	cmp	r5, #64	; 0x40
   252d0:	f000 80af 	beq.w	25432 <print_value+0x1ca>
   252d4:	2d80      	cmp	r5, #128	; 0x80
   252d6:	d1cd      	bne.n	25274 <print_value+0xc>
            if (item->valuestring == NULL)
   252d8:	6900      	ldr	r0, [r0, #16]
   252da:	2800      	cmp	r0, #0
   252dc:	d0ca      	beq.n	25274 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   252de:	f01c faa1 	bl	41824 <strlen>
   252e2:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   252e4:	4629      	mov	r1, r5
   252e6:	4620      	mov	r0, r4
   252e8:	f023 fe36 	bl	48f58 <ensure>
            if (output == NULL)
   252ec:	2800      	cmp	r0, #0
   252ee:	d0c1      	beq.n	25274 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   252f0:	462a      	mov	r2, r5
   252f2:	6931      	ldr	r1, [r6, #16]
   252f4:	f7f4 fddc 	bl	19eb0 <memcpy>
   252f8:	e7dc      	b.n	252b4 <print_value+0x4c>
            const char buff[] = "null";
   252fa:	4b97      	ldr	r3, [pc, #604]	; (25558 <print_value+0x2f0>)
            const char buff[] = "true";
   252fc:	6818      	ldr	r0, [r3, #0]
   252fe:	791b      	ldrb	r3, [r3, #4]
   25300:	9005      	str	r0, [sp, #20]
   25302:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   25306:	2105      	movs	r1, #5
   25308:	e7c9      	b.n	2529e <print_value+0x36>
            const char buff[] = "true";
   2530a:	4b94      	ldr	r3, [pc, #592]	; (2555c <print_value+0x2f4>)
   2530c:	e7f6      	b.n	252fc <print_value+0x94>
    double d = item->valuedouble;
   2530e:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   25312:	2200      	movs	r2, #0
   25314:	2300      	movs	r3, #0
   25316:	4640      	mov	r0, r8
   25318:	4649      	mov	r1, r9
   2531a:	f7f3 fa3d 	bl	18798 <__aeabi_dmul>
   2531e:	2200      	movs	r2, #0
   25320:	2300      	movs	r3, #0
   25322:	f7f3 fca1 	bl	18c68 <__aeabi_dcmpeq>
   25326:	ae05      	add	r6, sp, #20
   25328:	b9b0      	cbnz	r0, 25358 <print_value+0xf0>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   2532a:	498b      	ldr	r1, [pc, #556]	; (25558 <print_value+0x2f0>)
   2532c:	4630      	mov	r0, r6
   2532e:	f01c fa1b 	bl	41768 <strcpy>
   25332:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   25334:	1c69      	adds	r1, r5, #1
   25336:	4620      	mov	r0, r4
   25338:	f023 fe0e 	bl	48f58 <ensure>
    if (output_pointer == NULL)
   2533c:	2800      	cmp	r0, #0
   2533e:	d099      	beq.n	25274 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   25340:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   25342:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   25344:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   25346:	3301      	adds	r3, #1
   25348:	429d      	cmp	r5, r3
   2534a:	d1fa      	bne.n	25342 <print_value+0xda>
    output_pointer[i] = '\0';
   2534c:	2300      	movs	r3, #0
   2534e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   25350:	68a3      	ldr	r3, [r4, #8]
   25352:	441d      	add	r5, r3
   25354:	60a5      	str	r5, [r4, #8]
   25356:	e7ad      	b.n	252b4 <print_value+0x4c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   25358:	4a81      	ldr	r2, [pc, #516]	; (25560 <print_value+0x2f8>)
   2535a:	211a      	movs	r1, #26
   2535c:	e9cd 8900 	strd	r8, r9, [sp]
   25360:	4630      	mov	r0, r6
   25362:	f01c f88f 	bl	41484 <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   25366:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   25368:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   2536a:	497e      	ldr	r1, [pc, #504]	; (25564 <print_value+0x2fc>)
   2536c:	4630      	mov	r0, r6
   2536e:	f01c f8f1 	bl	41554 <sscanf>
   25372:	2801      	cmp	r0, #1
   25374:	d106      	bne.n	25384 <print_value+0x11c>
   25376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2537a:	4640      	mov	r0, r8
   2537c:	4649      	mov	r1, r9
   2537e:	f7f3 fc73 	bl	18c68 <__aeabi_dcmpeq>
   25382:	b938      	cbnz	r0, 25394 <print_value+0x12c>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   25384:	e9cd 8900 	strd	r8, r9, [sp]
   25388:	4a77      	ldr	r2, [pc, #476]	; (25568 <print_value+0x300>)
   2538a:	211a      	movs	r1, #26
   2538c:	4630      	mov	r0, r6
   2538e:	f01c f879 	bl	41484 <snprintf>
   25392:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   25394:	2d19      	cmp	r5, #25
   25396:	f73f af6d 	bgt.w	25274 <print_value+0xc>
   2539a:	e7cb      	b.n	25334 <print_value+0xcc>
            return print_array(item, output_buffer);
   2539c:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   2539e:	2101      	movs	r1, #1
   253a0:	4620      	mov	r0, r4
   253a2:	f023 fdd9 	bl	48f58 <ensure>
    if (output_pointer == NULL)
   253a6:	2800      	cmp	r0, #0
   253a8:	f43f af64 	beq.w	25274 <print_value+0xc>
    *output_pointer = '[';
   253ac:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   253ae:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   253b0:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   253b4:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   253b6:	68a3      	ldr	r3, [r4, #8]
   253b8:	3301      	adds	r3, #1
   253ba:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   253bc:	68e3      	ldr	r3, [r4, #12]
   253be:	3301      	adds	r3, #1
   253c0:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   253c2:	b96e      	cbnz	r6, 253e0 <print_value+0x178>
    output_pointer = ensure(output_buffer, 2);
   253c4:	2102      	movs	r1, #2
   253c6:	4620      	mov	r0, r4
   253c8:	f023 fdc6 	bl	48f58 <ensure>
    if (output_pointer == NULL)
   253cc:	2800      	cmp	r0, #0
   253ce:	f43f af51 	beq.w	25274 <print_value+0xc>
    *output_pointer++ = ']';
   253d2:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   253d4:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   253d6:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   253d8:	68e3      	ldr	r3, [r4, #12]
   253da:	3b01      	subs	r3, #1
   253dc:	60e3      	str	r3, [r4, #12]
   253de:	e769      	b.n	252b4 <print_value+0x4c>
        if (!print_value(current_element, output_buffer))
   253e0:	4621      	mov	r1, r4
   253e2:	4630      	mov	r0, r6
   253e4:	f7ff ff40 	bl	25268 <print_value>
   253e8:	2800      	cmp	r0, #0
   253ea:	f43f af43 	beq.w	25274 <print_value+0xc>
        update_offset(output_buffer);
   253ee:	4620      	mov	r0, r4
   253f0:	f023 fd2d 	bl	48e4e <update_offset>
        if (current_element->next)
   253f4:	6833      	ldr	r3, [r6, #0]
   253f6:	b1bb      	cbz	r3, 25428 <print_value+0x1c0>
            length = (size_t) (output_buffer->format ? 2 : 1);
   253f8:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   253fa:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   253fc:	2b00      	cmp	r3, #0
   253fe:	bf0c      	ite	eq
   25400:	f04f 0901 	moveq.w	r9, #1
   25404:	f04f 0902 	movne.w	r9, #2
            output_pointer = ensure(output_buffer, length + 1);
   25408:	f109 0101 	add.w	r1, r9, #1
   2540c:	f023 fda4 	bl	48f58 <ensure>
            if (output_pointer == NULL)
   25410:	2800      	cmp	r0, #0
   25412:	f43f af2f 	beq.w	25274 <print_value+0xc>
            *output_pointer++ = ',';
   25416:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   25418:	6963      	ldr	r3, [r4, #20]
   2541a:	b93b      	cbnz	r3, 2542c <print_value+0x1c4>
            *output_pointer++ = ',';
   2541c:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   2541e:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   25422:	68a3      	ldr	r3, [r4, #8]
   25424:	444b      	add	r3, r9
   25426:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   25428:	6836      	ldr	r6, [r6, #0]
   2542a:	e7ca      	b.n	253c2 <print_value+0x15a>
                *output_pointer++ = ' ';
   2542c:	1c83      	adds	r3, r0, #2
   2542e:	7045      	strb	r5, [r0, #1]
   25430:	e7f5      	b.n	2541e <print_value+0x1b6>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   25432:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   25434:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   25436:	2b00      	cmp	r3, #0
   25438:	bf0c      	ite	eq
   2543a:	2701      	moveq	r7, #1
   2543c:	2702      	movne	r7, #2
    output_pointer = ensure(output_buffer, length + 1);
   2543e:	4620      	mov	r0, r4
   25440:	1c79      	adds	r1, r7, #1
   25442:	f023 fd89 	bl	48f58 <ensure>
    if (output_pointer == NULL)
   25446:	2800      	cmp	r0, #0
   25448:	f43f af14 	beq.w	25274 <print_value+0xc>
    *output_pointer++ = '{';
   2544c:	237b      	movs	r3, #123	; 0x7b
   2544e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   25450:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   25452:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   25454:	3201      	adds	r2, #1
   25456:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   25458:	b10b      	cbz	r3, 2545e <print_value+0x1f6>
        *output_pointer++ = '\n';
   2545a:	230a      	movs	r3, #10
   2545c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   2545e:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   25460:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   25464:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   25466:	2709      	movs	r7, #9
    output_buffer->offset += length;
   25468:	60a3      	str	r3, [r4, #8]
   2546a:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   2546c:	b995      	cbnz	r5, 25494 <print_value+0x22c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2546e:	2b00      	cmp	r3, #0
   25470:	d06d      	beq.n	2554e <print_value+0x2e6>
   25472:	68e1      	ldr	r1, [r4, #12]
   25474:	3101      	adds	r1, #1
   25476:	4620      	mov	r0, r4
   25478:	f023 fd6e 	bl	48f58 <ensure>
    if (output_pointer == NULL)
   2547c:	2800      	cmp	r0, #0
   2547e:	f43f aef9 	beq.w	25274 <print_value+0xc>
    if (output_buffer->format)
   25482:	6963      	ldr	r3, [r4, #20]
   25484:	2b00      	cmp	r3, #0
   25486:	d179      	bne.n	2557c <print_value+0x314>
   25488:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   2548a:	227d      	movs	r2, #125	; 0x7d
   2548c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   2548e:	2200      	movs	r2, #0
   25490:	705a      	strb	r2, [r3, #1]
   25492:	e7a1      	b.n	253d8 <print_value+0x170>
        if (output_buffer->format)
   25494:	b173      	cbz	r3, 254b4 <print_value+0x24c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   25496:	68e1      	ldr	r1, [r4, #12]
   25498:	4620      	mov	r0, r4
   2549a:	f023 fd5d 	bl	48f58 <ensure>
            if (output_pointer == NULL)
   2549e:	2800      	cmp	r0, #0
   254a0:	f43f aee8 	beq.w	25274 <print_value+0xc>
   254a4:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   254a6:	68e1      	ldr	r1, [r4, #12]
   254a8:	1a13      	subs	r3, r2, r0
   254aa:	428b      	cmp	r3, r1
   254ac:	d34c      	bcc.n	25548 <print_value+0x2e0>
            output_buffer->offset += output_buffer->depth;
   254ae:	68a3      	ldr	r3, [r4, #8]
   254b0:	440b      	add	r3, r1
   254b2:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   254b4:	4621      	mov	r1, r4
   254b6:	6a28      	ldr	r0, [r5, #32]
   254b8:	f7ff fe32 	bl	25120 <print_string_ptr>
   254bc:	2800      	cmp	r0, #0
   254be:	f43f aed9 	beq.w	25274 <print_value+0xc>
        update_offset(output_buffer);
   254c2:	4620      	mov	r0, r4
   254c4:	f023 fcc3 	bl	48e4e <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   254c8:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   254ca:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   254cc:	2b00      	cmp	r3, #0
   254ce:	bf0c      	ite	eq
   254d0:	2601      	moveq	r6, #1
   254d2:	2602      	movne	r6, #2
        output_pointer = ensure(output_buffer, length);
   254d4:	4631      	mov	r1, r6
   254d6:	f023 fd3f 	bl	48f58 <ensure>
        if (output_pointer == NULL)
   254da:	2800      	cmp	r0, #0
   254dc:	f43f aeca 	beq.w	25274 <print_value+0xc>
        *output_pointer++ = ':';
   254e0:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   254e4:	6963      	ldr	r3, [r4, #20]
   254e6:	b103      	cbz	r3, 254ea <print_value+0x282>
            *output_pointer++ = '\t';
   254e8:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   254ea:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   254ec:	4628      	mov	r0, r5
        output_buffer->offset += length;
   254ee:	4431      	add	r1, r6
   254f0:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   254f2:	4621      	mov	r1, r4
   254f4:	f7ff feb8 	bl	25268 <print_value>
   254f8:	2800      	cmp	r0, #0
   254fa:	f43f aebb 	beq.w	25274 <print_value+0xc>
        update_offset(output_buffer);
   254fe:	4620      	mov	r0, r4
   25500:	f023 fca5 	bl	48e4e <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   25504:	682e      	ldr	r6, [r5, #0]
   25506:	6963      	ldr	r3, [r4, #20]
   25508:	3600      	adds	r6, #0
   2550a:	bf18      	it	ne
   2550c:	2601      	movne	r6, #1
   2550e:	2b00      	cmp	r3, #0
   25510:	bf18      	it	ne
   25512:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   25514:	4620      	mov	r0, r4
   25516:	1c71      	adds	r1, r6, #1
   25518:	f023 fd1e 	bl	48f58 <ensure>
        if (output_pointer == NULL)
   2551c:	2800      	cmp	r0, #0
   2551e:	f43f aea9 	beq.w	25274 <print_value+0xc>
        if (current_item->next)
   25522:	682b      	ldr	r3, [r5, #0]
   25524:	b11b      	cbz	r3, 2552e <print_value+0x2c6>
            *output_pointer++ = ',';
   25526:	232c      	movs	r3, #44	; 0x2c
   25528:	3001      	adds	r0, #1
   2552a:	f800 3c01 	strb.w	r3, [r0, #-1]
        if (output_buffer->format)
   2552e:	6963      	ldr	r3, [r4, #20]
   25530:	b11b      	cbz	r3, 2553a <print_value+0x2d2>
            *output_pointer++ = '\n';
   25532:	230a      	movs	r3, #10
   25534:	3001      	adds	r0, #1
   25536:	f800 3c01 	strb.w	r3, [r0, #-1]
        *output_pointer = '\0';
   2553a:	2300      	movs	r3, #0
   2553c:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   2553e:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   25540:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   25542:	441e      	add	r6, r3
   25544:	60a6      	str	r6, [r4, #8]
   25546:	e790      	b.n	2546a <print_value+0x202>
                *output_pointer++ = '\t';
   25548:	f802 7b01 	strb.w	r7, [r2], #1
   2554c:	e7ab      	b.n	254a6 <print_value+0x23e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2554e:	2102      	movs	r1, #2
   25550:	e791      	b.n	25476 <print_value+0x20e>
   25552:	bf00      	nop
   25554:	0004f16b 	.word	0x0004f16b
   25558:	0004f154 	.word	0x0004f154
   2555c:	0004f171 	.word	0x0004f171
   25560:	0004f159 	.word	0x0004f159
   25564:	0004f160 	.word	0x0004f160
   25568:	0004f164 	.word	0x0004f164
            *output_pointer++ = '\t';
   2556c:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   25570:	68e2      	ldr	r2, [r4, #12]
   25572:	1a19      	subs	r1, r3, r0
   25574:	3a01      	subs	r2, #1
   25576:	4291      	cmp	r1, r2
   25578:	d3f8      	bcc.n	2556c <print_value+0x304>
   2557a:	e786      	b.n	2548a <print_value+0x222>
    if (output_buffer->format)
   2557c:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   2557e:	2509      	movs	r5, #9
   25580:	e7f6      	b.n	25570 <print_value+0x308>
   25582:	bf00      	nop

00025584 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   25584:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   25586:	4d24      	ldr	r5, [pc, #144]	; (25618 <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   25588:	b08b      	sub	sp, #44	; 0x2c
   2558a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   2558c:	2224      	movs	r2, #36	; 0x24
   2558e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   25590:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   25592:	a801      	add	r0, sp, #4
   25594:	f01b fd50 	bl	41038 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   25598:	682b      	ldr	r3, [r5, #0]
   2559a:	f44f 7080 	mov.w	r0, #256	; 0x100
   2559e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   255a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   255a4:	4603      	mov	r3, r0
    buffer->format = format;
   255a6:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   255a8:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   255aa:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   255ac:	9202      	str	r2, [sp, #8]
   255ae:	462f      	mov	r7, r5
    buffer->hooks = *hooks;
   255b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   255b4:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   255b8:	b17b      	cbz	r3, 255da <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   255ba:	a901      	add	r1, sp, #4
   255bc:	4620      	mov	r0, r4
   255be:	f7ff fe53 	bl	25268 <print_value>
   255c2:	b150      	cbz	r0, 255da <print.constprop.14+0x56>
    update_offset(buffer);
   255c4:	a801      	add	r0, sp, #4
   255c6:	f023 fc42 	bl	48e4e <update_offset>
    if (hooks->reallocate != NULL)
   255ca:	68ae      	ldr	r6, [r5, #8]
   255cc:	9903      	ldr	r1, [sp, #12]
   255ce:	b15e      	cbz	r6, 255e8 <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   255d0:	3101      	adds	r1, #1
   255d2:	9801      	ldr	r0, [sp, #4]
   255d4:	47b0      	blx	r6
        if (printed == NULL) {
   255d6:	4604      	mov	r4, r0
   255d8:	b9d0      	cbnz	r0, 25610 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   255da:	9c01      	ldr	r4, [sp, #4]
   255dc:	b1c4      	cbz	r4, 25610 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   255de:	4620      	mov	r0, r4
   255e0:	687b      	ldr	r3, [r7, #4]
   255e2:	4798      	blx	r3
    return NULL;
   255e4:	2400      	movs	r4, #0
   255e6:	e013      	b.n	25610 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   255e8:	682b      	ldr	r3, [r5, #0]
   255ea:	1c48      	adds	r0, r1, #1
   255ec:	4798      	blx	r3
        if (printed == NULL)
   255ee:	4604      	mov	r4, r0
   255f0:	2800      	cmp	r0, #0
   255f2:	d0f2      	beq.n	255da <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   255f4:	9a03      	ldr	r2, [sp, #12]
   255f6:	9b02      	ldr	r3, [sp, #8]
   255f8:	3201      	adds	r2, #1
   255fa:	429a      	cmp	r2, r3
   255fc:	bf28      	it	cs
   255fe:	461a      	movcs	r2, r3
   25600:	9901      	ldr	r1, [sp, #4]
   25602:	f7f4 fc55 	bl	19eb0 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   25606:	9b03      	ldr	r3, [sp, #12]
   25608:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2560a:	686b      	ldr	r3, [r5, #4]
   2560c:	9801      	ldr	r0, [sp, #4]
   2560e:	4798      	blx	r3
}
   25610:	4620      	mov	r0, r4
   25612:	b00b      	add	sp, #44	; 0x2c
   25614:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25616:	bf00      	nop
   25618:	20031b60 	.word	0x20031b60

0002561c <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   2561c:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   2561e:	4605      	mov	r5, r0
   25620:	b170      	cbz	r0, 25640 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   25622:	f01c f8ff 	bl	41824 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   25626:	4b07      	ldr	r3, [pc, #28]	; (25644 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   25628:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2562a:	681b      	ldr	r3, [r3, #0]
   2562c:	4630      	mov	r0, r6
   2562e:	4798      	blx	r3
    if (copy == NULL)
   25630:	4604      	mov	r4, r0
   25632:	b118      	cbz	r0, 2563c <cJSON_strdup.isra.2.constprop.16+0x20>
   25634:	4632      	mov	r2, r6
   25636:	4629      	mov	r1, r5
   25638:	f7f4 fc3a 	bl	19eb0 <memcpy>
}
   2563c:	4620      	mov	r0, r4
   2563e:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   25640:	4604      	mov	r4, r0
   25642:	e7fb      	b.n	2563c <cJSON_strdup.isra.2.constprop.16+0x20>
   25644:	20031b60 	.word	0x20031b60

00025648 <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   25648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2564a:	460e      	mov	r6, r1
   2564c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   2564e:	4607      	mov	r7, r0
   25650:	b1f0      	cbz	r0, 25690 <add_item_to_object.constprop.12+0x48>
   25652:	b1e9      	cbz	r1, 25690 <add_item_to_object.constprop.12+0x48>
   25654:	b1e2      	cbz	r2, 25690 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   25656:	b193      	cbz	r3, 2567e <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   25658:	68d5      	ldr	r5, [r2, #12]
   2565a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2565e:	68e3      	ldr	r3, [r4, #12]
   25660:	059b      	lsls	r3, r3, #22
   25662:	d404      	bmi.n	2566e <add_item_to_object.constprop.12+0x26>
   25664:	6a20      	ldr	r0, [r4, #32]
   25666:	b110      	cbz	r0, 2566e <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   25668:	4b0a      	ldr	r3, [pc, #40]	; (25694 <add_item_to_object.constprop.12+0x4c>)
   2566a:	685b      	ldr	r3, [r3, #4]
   2566c:	4798      	blx	r3
    item->string = new_key;
   2566e:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   25670:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   25672:	4621      	mov	r1, r4
   25674:	4638      	mov	r0, r7
}
   25676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2567a:	f023 bc51 	b.w	48f20 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   2567e:	4608      	mov	r0, r1
   25680:	f7ff ffcc 	bl	2561c <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   25684:	4606      	mov	r6, r0
   25686:	b118      	cbz	r0, 25690 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   25688:	68e5      	ldr	r5, [r4, #12]
   2568a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   2568e:	e7e6      	b.n	2565e <add_item_to_object.constprop.12+0x16>
}
   25690:	2000      	movs	r0, #0
   25692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25694:	20031b60 	.word	0x20031b60

00025698 <cJSON_InitHooks>:
{
   25698:	4b0c      	ldr	r3, [pc, #48]	; (256cc <cJSON_InitHooks+0x34>)
   2569a:	490d      	ldr	r1, [pc, #52]	; (256d0 <cJSON_InitHooks+0x38>)
   2569c:	b510      	push	{r4, lr}
   2569e:	4a0d      	ldr	r2, [pc, #52]	; (256d4 <cJSON_InitHooks+0x3c>)
        global_hooks.allocate = malloc;
   256a0:	6019      	str	r1, [r3, #0]
    if (hooks == NULL)
   256a2:	b918      	cbnz	r0, 256ac <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   256a4:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
   256a6:	4a0c      	ldr	r2, [pc, #48]	; (256d8 <cJSON_InitHooks+0x40>)
   256a8:	609a      	str	r2, [r3, #8]
   256aa:	e00e      	b.n	256ca <cJSON_InitHooks+0x32>
    if (hooks->malloc_fn != NULL)
   256ac:	6804      	ldr	r4, [r0, #0]
   256ae:	b104      	cbz	r4, 256b2 <cJSON_InitHooks+0x1a>
        global_hooks.allocate = hooks->malloc_fn;
   256b0:	601c      	str	r4, [r3, #0]
    if (hooks->free_fn != NULL)
   256b2:	6840      	ldr	r0, [r0, #4]
    global_hooks.deallocate = free;
   256b4:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
   256b6:	b100      	cbz	r0, 256ba <cJSON_InitHooks+0x22>
        global_hooks.deallocate = hooks->free_fn;
   256b8:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   256ba:	2000      	movs	r0, #0
   256bc:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   256be:	6818      	ldr	r0, [r3, #0]
   256c0:	4288      	cmp	r0, r1
   256c2:	d102      	bne.n	256ca <cJSON_InitHooks+0x32>
   256c4:	6859      	ldr	r1, [r3, #4]
   256c6:	4291      	cmp	r1, r2
   256c8:	d0ed      	beq.n	256a6 <cJSON_InitHooks+0xe>
}
   256ca:	bd10      	pop	{r4, pc}
   256cc:	20031b60 	.word	0x20031b60
   256d0:	00040985 	.word	0x00040985
   256d4:	00040995 	.word	0x00040995
   256d8:	000410e5 	.word	0x000410e5

000256dc <cJSON_Delete>:
{
   256dc:	b570      	push	{r4, r5, r6, lr}
   256de:	4604      	mov	r4, r0
   256e0:	4d0e      	ldr	r5, [pc, #56]	; (2571c <cJSON_Delete+0x40>)
    while (item != NULL)
   256e2:	b904      	cbnz	r4, 256e6 <cJSON_Delete+0xa>
}
   256e4:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   256e6:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   256e8:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   256ea:	05d9      	lsls	r1, r3, #23
   256ec:	d403      	bmi.n	256f6 <cJSON_Delete+0x1a>
   256ee:	68a0      	ldr	r0, [r4, #8]
   256f0:	b108      	cbz	r0, 256f6 <cJSON_Delete+0x1a>
            cJSON_Delete(item->child);
   256f2:	f7ff fff3 	bl	256dc <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   256f6:	68e3      	ldr	r3, [r4, #12]
   256f8:	05da      	lsls	r2, r3, #23
   256fa:	d403      	bmi.n	25704 <cJSON_Delete+0x28>
   256fc:	6920      	ldr	r0, [r4, #16]
   256fe:	b108      	cbz	r0, 25704 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->valuestring);
   25700:	686b      	ldr	r3, [r5, #4]
   25702:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   25704:	68e3      	ldr	r3, [r4, #12]
   25706:	059b      	lsls	r3, r3, #22
   25708:	d403      	bmi.n	25712 <cJSON_Delete+0x36>
   2570a:	6a20      	ldr	r0, [r4, #32]
   2570c:	b108      	cbz	r0, 25712 <cJSON_Delete+0x36>
            global_hooks.deallocate(item->string);
   2570e:	686b      	ldr	r3, [r5, #4]
   25710:	4798      	blx	r3
        global_hooks.deallocate(item);
   25712:	4620      	mov	r0, r4
   25714:	686b      	ldr	r3, [r5, #4]
   25716:	4798      	blx	r3
        item = next;
   25718:	4634      	mov	r4, r6
   2571a:	e7e2      	b.n	256e2 <cJSON_Delete+0x6>
   2571c:	20031b60 	.word	0x20031b60

00025720 <cJSON_ParseWithOpts>:
{
   25720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25724:	4606      	mov	r6, r0
    global_error.json = NULL;
   25726:	2400      	movs	r4, #0
{
   25728:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   2572a:	4f34      	ldr	r7, [pc, #208]	; (257fc <cJSON_ParseWithOpts+0xdc>)
{
   2572c:	4688      	mov	r8, r1
   2572e:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   25730:	2100      	movs	r1, #0
   25732:	221c      	movs	r2, #28
   25734:	a801      	add	r0, sp, #4
   25736:	f01b fc7f 	bl	41038 <memset>
    global_error.position = 0;
   2573a:	e9c7 4400 	strd	r4, r4, [r7]
    if (value == NULL)
   2573e:	2e00      	cmp	r6, #0
   25740:	d052      	beq.n	257e8 <cJSON_ParseWithOpts+0xc8>
    buffer.length = strlen((const char*)value) + sizeof("");
   25742:	4630      	mov	r0, r6
    buffer.content = (const unsigned char*)value;
   25744:	9601      	str	r6, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   25746:	f01c f86d 	bl	41824 <strlen>
    buffer.hooks = global_hooks;
   2574a:	4b2d      	ldr	r3, [pc, #180]	; (25800 <cJSON_ParseWithOpts+0xe0>)
    buffer.length = strlen((const char*)value) + sizeof("");
   2574c:	3001      	adds	r0, #1
    buffer.offset = 0;
   2574e:	e9cd 0402 	strd	r0, r4, [sp, #8]
    buffer.hooks = global_hooks;
   25752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   25756:	ab08      	add	r3, sp, #32
   25758:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   2575c:	f023 fbf0 	bl	48f40 <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   25760:	4605      	mov	r5, r0
   25762:	2800      	cmp	r0, #0
   25764:	d032      	beq.n	257cc <cJSON_ParseWithOpts+0xac>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   25766:	9801      	ldr	r0, [sp, #4]
   25768:	b128      	cbz	r0, 25776 <cJSON_ParseWithOpts+0x56>
   2576a:	9b03      	ldr	r3, [sp, #12]
   2576c:	b9f3      	cbnz	r3, 257ac <cJSON_ParseWithOpts+0x8c>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2576e:	9b02      	ldr	r3, [sp, #8]
   25770:	2b04      	cmp	r3, #4
   25772:	d811      	bhi.n	25798 <cJSON_ParseWithOpts+0x78>
    return buffer;
   25774:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   25776:	f023 fb55 	bl	48e24 <buffer_skip_whitespace>
   2577a:	4601      	mov	r1, r0
   2577c:	4628      	mov	r0, r5
   2577e:	f7f4 ff0f 	bl	1a5a0 <parse_value>
   25782:	b300      	cbz	r0, 257c6 <cJSON_ParseWithOpts+0xa6>
    if (require_null_terminated)
   25784:	f1b9 0f00 	cmp.w	r9, #0
   25788:	d112      	bne.n	257b0 <cJSON_ParseWithOpts+0x90>
    if (return_parse_end)
   2578a:	f1b8 0f00 	cmp.w	r8, #0
   2578e:	d12d      	bne.n	257ec <cJSON_ParseWithOpts+0xcc>
}
   25790:	4628      	mov	r0, r5
   25792:	b009      	add	sp, #36	; 0x24
   25794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   25798:	2203      	movs	r2, #3
   2579a:	491a      	ldr	r1, [pc, #104]	; (25804 <cJSON_ParseWithOpts+0xe4>)
   2579c:	f01c f870 	bl	41880 <strncmp>
   257a0:	2800      	cmp	r0, #0
   257a2:	d1e7      	bne.n	25774 <cJSON_ParseWithOpts+0x54>
        buffer->offset += 3;
   257a4:	9b03      	ldr	r3, [sp, #12]
   257a6:	3303      	adds	r3, #3
   257a8:	9303      	str	r3, [sp, #12]
   257aa:	e7e3      	b.n	25774 <cJSON_ParseWithOpts+0x54>
        return NULL;
   257ac:	4620      	mov	r0, r4
   257ae:	e7e2      	b.n	25776 <cJSON_ParseWithOpts+0x56>
        buffer_skip_whitespace(&buffer);
   257b0:	a801      	add	r0, sp, #4
   257b2:	f023 fb37 	bl	48e24 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   257b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   257ba:	4293      	cmp	r3, r2
   257bc:	d203      	bcs.n	257c6 <cJSON_ParseWithOpts+0xa6>
   257be:	9a01      	ldr	r2, [sp, #4]
   257c0:	5cd3      	ldrb	r3, [r2, r3]
   257c2:	2b00      	cmp	r3, #0
   257c4:	d0e1      	beq.n	2578a <cJSON_ParseWithOpts+0x6a>
        cJSON_Delete(item);
   257c6:	4628      	mov	r0, r5
   257c8:	f7ff ff88 	bl	256dc <cJSON_Delete>
        if (buffer.offset < buffer.length)
   257cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   257d0:	4293      	cmp	r3, r2
   257d2:	d301      	bcc.n	257d8 <cJSON_ParseWithOpts+0xb8>
        else if (buffer.length > 0)
   257d4:	b182      	cbz	r2, 257f8 <cJSON_ParseWithOpts+0xd8>
            local_error.position = buffer.length - 1;
   257d6:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
   257d8:	f1b8 0f00 	cmp.w	r8, #0
   257dc:	d002      	beq.n	257e4 <cJSON_ParseWithOpts+0xc4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   257de:	18f2      	adds	r2, r6, r3
   257e0:	f8c8 2000 	str.w	r2, [r8]
        global_error = local_error;
   257e4:	e9c7 6300 	strd	r6, r3, [r7]
    return NULL;
   257e8:	2500      	movs	r5, #0
   257ea:	e7d1      	b.n	25790 <cJSON_ParseWithOpts+0x70>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   257ec:	9b01      	ldr	r3, [sp, #4]
   257ee:	9a03      	ldr	r2, [sp, #12]
   257f0:	4413      	add	r3, r2
   257f2:	f8c8 3000 	str.w	r3, [r8]
   257f6:	e7cb      	b.n	25790 <cJSON_ParseWithOpts+0x70>
        local_error.position = 0;
   257f8:	4613      	mov	r3, r2
   257fa:	e7ed      	b.n	257d8 <cJSON_ParseWithOpts+0xb8>
   257fc:	20023cc8 	.word	0x20023cc8
   25800:	20031b60 	.word	0x20031b60
   25804:	0004f147 	.word	0x0004f147

00025808 <cJSON_CreateNull>:
{
   25808:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2580a:	4b04      	ldr	r3, [pc, #16]	; (2581c <cJSON_CreateNull+0x14>)
   2580c:	6818      	ldr	r0, [r3, #0]
   2580e:	f023 fb97 	bl	48f40 <cJSON_New_Item.isra.1>
    if(item)
   25812:	b108      	cbz	r0, 25818 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   25814:	2304      	movs	r3, #4
   25816:	60c3      	str	r3, [r0, #12]
}
   25818:	bd08      	pop	{r3, pc}
   2581a:	bf00      	nop
   2581c:	20031b60 	.word	0x20031b60

00025820 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   25820:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   25822:	4b0a      	ldr	r3, [pc, #40]	; (2584c <cJSON_CreateString+0x2c>)
{
   25824:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   25826:	6818      	ldr	r0, [r3, #0]
   25828:	f023 fb8a 	bl	48f40 <cJSON_New_Item.isra.1>
    if(item)
   2582c:	4604      	mov	r4, r0
   2582e:	b158      	cbz	r0, 25848 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   25830:	2310      	movs	r3, #16
   25832:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   25834:	4628      	mov	r0, r5
   25836:	f7ff fef1 	bl	2561c <cJSON_strdup.isra.2.constprop.16>
   2583a:	4605      	mov	r5, r0
   2583c:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   2583e:	b918      	cbnz	r0, 25848 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   25840:	4620      	mov	r0, r4
   25842:	f7ff ff4b 	bl	256dc <cJSON_Delete>
            return NULL;
   25846:	462c      	mov	r4, r5
        }
    }

    return item;
}
   25848:	4620      	mov	r0, r4
   2584a:	bd38      	pop	{r3, r4, r5, pc}
   2584c:	20031b60 	.word	0x20031b60

00025850 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   25850:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   25852:	4b04      	ldr	r3, [pc, #16]	; (25864 <cJSON_CreateArray+0x14>)
   25854:	6818      	ldr	r0, [r3, #0]
   25856:	f023 fb73 	bl	48f40 <cJSON_New_Item.isra.1>
    if(item)
   2585a:	b108      	cbz	r0, 25860 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   2585c:	2320      	movs	r3, #32
   2585e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   25860:	bd08      	pop	{r3, pc}
   25862:	bf00      	nop
   25864:	20031b60 	.word	0x20031b60

00025868 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   25868:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2586a:	4b04      	ldr	r3, [pc, #16]	; (2587c <cJSON_CreateObject+0x14>)
   2586c:	6818      	ldr	r0, [r3, #0]
   2586e:	f023 fb67 	bl	48f40 <cJSON_New_Item.isra.1>
    if (item)
   25872:	b108      	cbz	r0, 25878 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   25874:	2340      	movs	r3, #64	; 0x40
   25876:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   25878:	bd08      	pop	{r3, pc}
   2587a:	bf00      	nop
   2587c:	20031b60 	.word	0x20031b60

00025880 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   25880:	4803      	ldr	r0, [pc, #12]	; (25890 <cJSON_Init+0x10>)
   25882:	4b04      	ldr	r3, [pc, #16]	; (25894 <cJSON_Init+0x14>)
   25884:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   25886:	4b04      	ldr	r3, [pc, #16]	; (25898 <cJSON_Init+0x18>)
   25888:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   2588a:	f7ff bf05 	b.w	25698 <cJSON_InitHooks>
   2588e:	bf00      	nop
   25890:	20023cd0 	.word	0x20023cd0
   25894:	00049063 	.word	0x00049063
   25898:	0004905f 	.word	0x0004905f

0002589c <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2589c:	2200      	movs	r2, #0
{
   2589e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   258a0:	4611      	mov	r1, r2
   258a2:	202a      	movs	r0, #42	; 0x2a
   258a4:	f7fb ff32 	bl	2170c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   258a8:	f008 ff54 	bl	2e754 <bsd_init>
   258ac:	4b01      	ldr	r3, [pc, #4]	; (258b4 <_bsdlib_init+0x18>)
   258ae:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   258b0:	2000      	movs	r0, #0
   258b2:	bd08      	pop	{r3, pc}
   258b4:	20023cd8 	.word	0x20023cd8

000258b8 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   258b8:	4b01      	ldr	r3, [pc, #4]	; (258c0 <bsdlib_get_init_ret+0x8>)
   258ba:	6818      	ldr	r0, [r3, #0]
   258bc:	4770      	bx	lr
   258be:	bf00      	nop
   258c0:	20023cd8 	.word	0x20023cd8

000258c4 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   258c4:	2200      	movs	r2, #0
   258c6:	4b0e      	ldr	r3, [pc, #56]	; (25900 <thread_monitor_entry_get+0x3c>)
{
   258c8:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   258ca:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   258cc:	4b0d      	ldr	r3, [pc, #52]	; (25904 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   258ce:	4616      	mov	r6, r2
   258d0:	461f      	mov	r7, r3
		if (entry->id == id) {
   258d2:	58bd      	ldr	r5, [r7, r2]
   258d4:	18b9      	adds	r1, r7, r2
   258d6:	4285      	cmp	r5, r0
   258d8:	d00d      	beq.n	258f6 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   258da:	b175      	cbz	r5, 258fa <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   258dc:	684d      	ldr	r5, [r1, #4]
   258de:	3208      	adds	r2, #8
   258e0:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   258e2:	42b5      	cmp	r5, r6
   258e4:	bfc4      	itt	gt
   258e6:	462e      	movgt	r6, r5
   258e8:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   258ea:	2a50      	cmp	r2, #80	; 0x50
   258ec:	d1f1      	bne.n	258d2 <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   258ee:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   258f0:	3c01      	subs	r4, #1
	new_entry->id = id;
   258f2:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   258f4:	605c      	str	r4, [r3, #4]
}
   258f6:	4608      	mov	r0, r1
   258f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   258fa:	460b      	mov	r3, r1
   258fc:	e7f7      	b.n	258ee <thread_monitor_entry_get+0x2a>
   258fe:	bf00      	nop
   25900:	20023cdc 	.word	0x20023cdc
   25904:	20023ce8 	.word	0x20023ce8

00025908 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   25908:	4668      	mov	r0, sp
   2590a:	f020 0107 	bic.w	r1, r0, #7
   2590e:	468d      	mov	sp, r1
   25910:	b519      	push	{r0, r3, r4, lr}
   25912:	f022 f9b1 	bl	47c78 <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25916:	4b0d      	ldr	r3, [pc, #52]	; (2594c <rpc_proxy_irq_handler+0x44>)
   25918:	e8d3 2fef 	ldaex	r2, [r3]
   2591c:	3201      	adds	r2, #1
   2591e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25922:	2900      	cmp	r1, #0
   25924:	d1f8      	bne.n	25918 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   25926:	f012 ff2d 	bl	38784 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2592a:	4b09      	ldr	r3, [pc, #36]	; (25950 <rpc_proxy_irq_handler+0x48>)
   2592c:	681c      	ldr	r4, [r3, #0]
   2592e:	b124      	cbz	r4, 2593a <rpc_proxy_irq_handler+0x32>
   25930:	1d20      	adds	r0, r4, #4
   25932:	f019 fa89 	bl	3ee48 <z_impl_k_sem_give>
   25936:	6824      	ldr	r4, [r4, #0]
   25938:	e7f9      	b.n	2592e <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2593a:	f7fb ff19 	bl	21770 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2593e:	f7fb fdf9 	bl	21534 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   25942:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   25946:	4685      	mov	sp, r0
   25948:	4770      	bx	lr
   2594a:	bf00      	nop
   2594c:	20023cdc 	.word	0x20023cdc
   25950:	20023ce0 	.word	0x20023ce0

00025954 <bsd_os_timedwait>:
{
   25954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25958:	460d      	mov	r5, r1
   2595a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   2595c:	f024 fc54 	bl	4a208 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   25960:	682b      	ldr	r3, [r5, #0]
   25962:	4606      	mov	r6, r0
   25964:	2b00      	cmp	r3, #0
   25966:	460f      	mov	r7, r1
   25968:	d103      	bne.n	25972 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   2596a:	f019 f8dd 	bl	3eb28 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   2596e:	203c      	movs	r0, #60	; 0x3c
   25970:	e06a      	b.n	25a48 <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   25972:	bfbc      	itt	lt
   25974:	f04f 33ff 	movlt.w	r3, #4294967295
   25978:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   2597a:	2201      	movs	r2, #1
   2597c:	2100      	movs	r1, #0
   2597e:	a802      	add	r0, sp, #8
   25980:	f019 fa2c 	bl	3eddc <z_impl_k_sem_init>
   25984:	f10d 0804 	add.w	r8, sp, #4
   25988:	f04f 0320 	mov.w	r3, #32
   2598c:	f3ef 8911 	mrs	r9, BASEPRI
   25990:	f383 8811 	msr	BASEPRI, r3
   25994:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   25998:	f019 fa1a 	bl	3edd0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2599c:	f7ff ff92 	bl	258c4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   259a0:	4c32      	ldr	r4, [pc, #200]	; (25a6c <bsd_os_timedwait+0x118>)
   259a2:	6843      	ldr	r3, [r0, #4]
   259a4:	6822      	ldr	r2, [r4, #0]
   259a6:	4293      	cmp	r3, r2
   259a8:	f04f 0300 	mov.w	r3, #0
   259ac:	d108      	bne.n	259c0 <bsd_os_timedwait+0x6c>
	parent->next = child;
   259ae:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   259b0:	4b2f      	ldr	r3, [pc, #188]	; (25a70 <bsd_os_timedwait+0x11c>)
   259b2:	685a      	ldr	r2, [r3, #4]
   259b4:	2a00      	cmp	r2, #0
   259b6:	d14a      	bne.n	25a4e <bsd_os_timedwait+0xfa>
	list->head = node;
   259b8:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   259bc:	2301      	movs	r3, #1
   259be:	e000      	b.n	259c2 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   259c0:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   259c2:	f389 8811 	msr	BASEPRI, r9
   259c6:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   259ca:	2b00      	cmp	r3, #0
   259cc:	d03b      	beq.n	25a46 <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   259ce:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   259d0:	a802      	add	r0, sp, #8
   259d2:	f019 fa81 	bl	3eed8 <z_impl_k_sem_take>
	__asm__ volatile(
   259d6:	f04f 0320 	mov.w	r3, #32
   259da:	f3ef 8911 	mrs	r9, BASEPRI
   259de:	f383 8811 	msr	BASEPRI, r3
   259e2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   259e6:	2100      	movs	r1, #0
   259e8:	4b21      	ldr	r3, [pc, #132]	; (25a70 <bsd_os_timedwait+0x11c>)
   259ea:	681a      	ldr	r2, [r3, #0]
   259ec:	b15a      	cbz	r2, 25a06 <bsd_os_timedwait+0xb2>
   259ee:	4542      	cmp	r2, r8
   259f0:	d138      	bne.n	25a64 <bsd_os_timedwait+0x110>
   259f2:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   259f4:	2900      	cmp	r1, #0
   259f6:	d12f      	bne.n	25a58 <bsd_os_timedwait+0x104>
   259f8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   259fa:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   259fc:	4291      	cmp	r1, r2
   259fe:	d100      	bne.n	25a02 <bsd_os_timedwait+0xae>
	list->tail = node;
   25a00:	6058      	str	r0, [r3, #4]
	parent->next = child;
   25a02:	2300      	movs	r3, #0
   25a04:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   25a06:	f019 f9e3 	bl	3edd0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25a0a:	f7ff ff5b 	bl	258c4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   25a0e:	6823      	ldr	r3, [r4, #0]
   25a10:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   25a12:	f389 8811 	msr	BASEPRI, r9
   25a16:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   25a1a:	682c      	ldr	r4, [r5, #0]
   25a1c:	1c63      	adds	r3, r4, #1
   25a1e:	d012      	beq.n	25a46 <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   25a20:	f024 fbf2 	bl	4a208 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   25a24:	1b86      	subs	r6, r0, r6
   25a26:	eb61 0707 	sbc.w	r7, r1, r7
   25a2a:	17e3      	asrs	r3, r4, #31
   25a2c:	1ba2      	subs	r2, r4, r6
   25a2e:	eb63 0307 	sbc.w	r3, r3, r7
   25a32:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   25a34:	2a00      	cmp	r2, #0
   25a36:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   25a3a:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   25a3c:	bfb8      	it	lt
   25a3e:	2000      	movlt	r0, #0
   25a40:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   25a42:	2800      	cmp	r0, #0
   25a44:	d093      	beq.n	2596e <bsd_os_timedwait+0x1a>
	return 0;
   25a46:	2000      	movs	r0, #0
}
   25a48:	b009      	add	sp, #36	; 0x24
   25a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a4e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   25a52:	f8c3 8004 	str.w	r8, [r3, #4]
   25a56:	e7b1      	b.n	259bc <bsd_os_timedwait+0x68>
	parent->next = child;
   25a58:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25a5a:	6858      	ldr	r0, [r3, #4]
   25a5c:	4290      	cmp	r0, r2
	list->tail = node;
   25a5e:	bf08      	it	eq
   25a60:	6059      	streq	r1, [r3, #4]
   25a62:	e7ce      	b.n	25a02 <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25a64:	4611      	mov	r1, r2
   25a66:	6812      	ldr	r2, [r2, #0]
   25a68:	e7c0      	b.n	259ec <bsd_os_timedwait+0x98>
   25a6a:	bf00      	nop
   25a6c:	20023cdc 	.word	0x20023cdc
   25a70:	20023ce0 	.word	0x20023ce0

00025a74 <bsd_os_errno_set>:
	switch (err_code) {
   25a74:	282d      	cmp	r0, #45	; 0x2d
{
   25a76:	b510      	push	{r4, lr}
   25a78:	4604      	mov	r4, r0
	switch (err_code) {
   25a7a:	f000 809b 	beq.w	25bb4 <bsd_os_errno_set+0x140>
   25a7e:	dc4a      	bgt.n	25b16 <bsd_os_errno_set+0xa2>
   25a80:	280e      	cmp	r0, #14
   25a82:	d009      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25a84:	dc11      	bgt.n	25aaa <bsd_os_errno_set+0x36>
   25a86:	2808      	cmp	r0, #8
   25a88:	d006      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25a8a:	dc09      	bgt.n	25aa0 <bsd_os_errno_set+0x2c>
   25a8c:	2802      	cmp	r0, #2
   25a8e:	d003      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25a90:	2805      	cmp	r0, #5
   25a92:	d001      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25a94:	2801      	cmp	r0, #1
   25a96:	d119      	bne.n	25acc <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   25a98:	f022 f93e 	bl	47d18 <__errno>
   25a9c:	6004      	str	r4, [r0, #0]
}
   25a9e:	bd10      	pop	{r4, pc}
	switch (err_code) {
   25aa0:	280c      	cmp	r0, #12
   25aa2:	d0f9      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25aa4:	dc6d      	bgt.n	25b82 <bsd_os_errno_set+0x10e>
   25aa6:	2809      	cmp	r0, #9
   25aa8:	e7f5      	b.n	25a96 <bsd_os_errno_set+0x22>
   25aaa:	2828      	cmp	r0, #40	; 0x28
   25aac:	f000 80b9 	beq.w	25c22 <bsd_os_errno_set+0x1ae>
   25ab0:	dc05      	bgt.n	25abe <bsd_os_errno_set+0x4a>
   25ab2:	2818      	cmp	r0, #24
   25ab4:	d0f0      	beq.n	25a98 <bsd_os_errno_set+0x24>
   25ab6:	2823      	cmp	r0, #35	; 0x23
   25ab8:	d068      	beq.n	25b8c <bsd_os_errno_set+0x118>
   25aba:	2816      	cmp	r0, #22
   25abc:	e7eb      	b.n	25a96 <bsd_os_errno_set+0x22>
   25abe:	282a      	cmp	r0, #42	; 0x2a
   25ac0:	d06c      	beq.n	25b9c <bsd_os_errno_set+0x128>
   25ac2:	db67      	blt.n	25b94 <bsd_os_errno_set+0x120>
   25ac4:	282b      	cmp	r0, #43	; 0x2b
   25ac6:	d06d      	beq.n	25ba4 <bsd_os_errno_set+0x130>
   25ac8:	282c      	cmp	r0, #44	; 0x2c
   25aca:	d06f      	beq.n	25bac <bsd_os_errno_set+0x138>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   25acc:	f44f 73a2 	mov.w	r3, #324	; 0x144
   25ad0:	4a56      	ldr	r2, [pc, #344]	; (25c2c <bsd_os_errno_set+0x1b8>)
   25ad2:	4957      	ldr	r1, [pc, #348]	; (25c30 <bsd_os_errno_set+0x1bc>)
   25ad4:	4857      	ldr	r0, [pc, #348]	; (25c34 <bsd_os_errno_set+0x1c0>)
   25ad6:	f021 fef8 	bl	478ca <printk>
   25ada:	4621      	mov	r1, r4
   25adc:	4856      	ldr	r0, [pc, #344]	; (25c38 <bsd_os_errno_set+0x1c4>)
   25ade:	f021 fef4 	bl	478ca <printk>
   25ae2:	f44f 71a2 	mov.w	r1, #324	; 0x144
   25ae6:	4851      	ldr	r0, [pc, #324]	; (25c2c <bsd_os_errno_set+0x1b8>)
   25ae8:	f021 fefc 	bl	478e4 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   25aec:	2301      	movs	r3, #1
   25aee:	f04f 0000 	mov.w	r0, #0
   25af2:	4a52      	ldr	r2, [pc, #328]	; (25c3c <bsd_os_errno_set+0x1c8>)
   25af4:	f363 0002 	bfi	r0, r3, #0, #3
   25af8:	4b51      	ldr	r3, [pc, #324]	; (25c40 <bsd_os_errno_set+0x1cc>)
   25afa:	f36f 00c5 	bfc	r0, #3, #3
   25afe:	1a9b      	subs	r3, r3, r2
   25b00:	08db      	lsrs	r3, r3, #3
   25b02:	f363 108f 	bfi	r0, r3, #6, #10
   25b06:	4622      	mov	r2, r4
   25b08:	494e      	ldr	r1, [pc, #312]	; (25c44 <bsd_os_errno_set+0x1d0>)
   25b0a:	f021 fefb 	bl	47904 <log_string_sync>
		errno = 0xBAADBAAD;
   25b0e:	f022 f903 	bl	47d18 <__errno>
   25b12:	4b4d      	ldr	r3, [pc, #308]	; (25c48 <bsd_os_errno_set+0x1d4>)
   25b14:	e038      	b.n	25b88 <bsd_os_errno_set+0x114>
	switch (err_code) {
   25b16:	283c      	cmp	r0, #60	; 0x3c
   25b18:	d064      	beq.n	25be4 <bsd_os_errno_set+0x170>
   25b1a:	dc1d      	bgt.n	25b58 <bsd_os_errno_set+0xe4>
   25b1c:	2833      	cmp	r0, #51	; 0x33
   25b1e:	d055      	beq.n	25bcc <bsd_os_errno_set+0x158>
   25b20:	dc09      	bgt.n	25b36 <bsd_os_errno_set+0xc2>
   25b22:	2830      	cmp	r0, #48	; 0x30
   25b24:	d04a      	beq.n	25bbc <bsd_os_errno_set+0x148>
   25b26:	2832      	cmp	r0, #50	; 0x32
   25b28:	d04c      	beq.n	25bc4 <bsd_os_errno_set+0x150>
   25b2a:	282f      	cmp	r0, #47	; 0x2f
   25b2c:	d1ce      	bne.n	25acc <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   25b2e:	f022 f8f3 	bl	47d18 <__errno>
   25b32:	236a      	movs	r3, #106	; 0x6a
   25b34:	e028      	b.n	25b88 <bsd_os_errno_set+0x114>
	switch (err_code) {
   25b36:	2836      	cmp	r0, #54	; 0x36
   25b38:	d04c      	beq.n	25bd4 <bsd_os_errno_set+0x160>
   25b3a:	dc05      	bgt.n	25b48 <bsd_os_errno_set+0xd4>
   25b3c:	2834      	cmp	r0, #52	; 0x34
   25b3e:	d1c5      	bne.n	25acc <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   25b40:	f022 f8ea 	bl	47d18 <__errno>
   25b44:	237e      	movs	r3, #126	; 0x7e
   25b46:	e01f      	b.n	25b88 <bsd_os_errno_set+0x114>
	switch (err_code) {
   25b48:	2838      	cmp	r0, #56	; 0x38
   25b4a:	d047      	beq.n	25bdc <bsd_os_errno_set+0x168>
   25b4c:	2839      	cmp	r0, #57	; 0x39
   25b4e:	d1bd      	bne.n	25acc <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   25b50:	f022 f8e2 	bl	47d18 <__errno>
   25b54:	2380      	movs	r3, #128	; 0x80
   25b56:	e017      	b.n	25b88 <bsd_os_errno_set+0x114>
	switch (err_code) {
   25b58:	287d      	cmp	r0, #125	; 0x7d
   25b5a:	d04f      	beq.n	25bfc <bsd_os_errno_set+0x188>
   25b5c:	dc05      	bgt.n	25b6a <bsd_os_errno_set+0xf6>
   25b5e:	2870      	cmp	r0, #112	; 0x70
   25b60:	d044      	beq.n	25bec <bsd_os_errno_set+0x178>
   25b62:	2873      	cmp	r0, #115	; 0x73
   25b64:	d046      	beq.n	25bf4 <bsd_os_errno_set+0x180>
   25b66:	2869      	cmp	r0, #105	; 0x69
   25b68:	e795      	b.n	25a96 <bsd_os_errno_set+0x22>
   25b6a:	287f      	cmp	r0, #127	; 0x7f
   25b6c:	d04f      	beq.n	25c0e <bsd_os_errno_set+0x19a>
   25b6e:	db49      	blt.n	25c04 <bsd_os_errno_set+0x190>
   25b70:	2880      	cmp	r0, #128	; 0x80
   25b72:	d051      	beq.n	25c18 <bsd_os_errno_set+0x1a4>
   25b74:	2881      	cmp	r0, #129	; 0x81
   25b76:	d1a9      	bne.n	25acc <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   25b78:	f022 f8ce 	bl	47d18 <__errno>
   25b7c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   25b80:	e002      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EACCES;
   25b82:	f022 f8c9 	bl	47d18 <__errno>
   25b86:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   25b88:	6003      	str	r3, [r0, #0]
}
   25b8a:	e788      	b.n	25a9e <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   25b8c:	f022 f8c4 	bl	47d18 <__errno>
   25b90:	230b      	movs	r3, #11
   25b92:	e7f9      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EPROTOTYPE;
   25b94:	f022 f8c0 	bl	47d18 <__errno>
   25b98:	236b      	movs	r3, #107	; 0x6b
   25b9a:	e7f5      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ENOPROTOOPT;
   25b9c:	f022 f8bc 	bl	47d18 <__errno>
   25ba0:	236d      	movs	r3, #109	; 0x6d
   25ba2:	e7f1      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EPROTONOSUPPORT;
   25ba4:	f022 f8b8 	bl	47d18 <__errno>
   25ba8:	237b      	movs	r3, #123	; 0x7b
   25baa:	e7ed      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ESOCKTNOSUPPORT;
   25bac:	f022 f8b4 	bl	47d18 <__errno>
   25bb0:	237c      	movs	r3, #124	; 0x7c
   25bb2:	e7e9      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EOPNOTSUPP;
   25bb4:	f022 f8b0 	bl	47d18 <__errno>
   25bb8:	235f      	movs	r3, #95	; 0x5f
   25bba:	e7e5      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EADDRINUSE;
   25bbc:	f022 f8ac 	bl	47d18 <__errno>
   25bc0:	2370      	movs	r3, #112	; 0x70
   25bc2:	e7e1      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ENETDOWN;
   25bc4:	f022 f8a8 	bl	47d18 <__errno>
   25bc8:	2373      	movs	r3, #115	; 0x73
   25bca:	e7dd      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ENETUNREACH;
   25bcc:	f022 f8a4 	bl	47d18 <__errno>
   25bd0:	2372      	movs	r3, #114	; 0x72
   25bd2:	e7d9      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ECONNRESET;
   25bd4:	f022 f8a0 	bl	47d18 <__errno>
   25bd8:	2368      	movs	r3, #104	; 0x68
   25bda:	e7d5      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EISCONN;
   25bdc:	f022 f89c 	bl	47d18 <__errno>
   25be0:	237f      	movs	r3, #127	; 0x7f
   25be2:	e7d1      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ETIMEDOUT;
   25be4:	f022 f898 	bl	47d18 <__errno>
   25be8:	2374      	movs	r3, #116	; 0x74
   25bea:	e7cd      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EHOSTDOWN;
   25bec:	f022 f894 	bl	47d18 <__errno>
   25bf0:	2375      	movs	r3, #117	; 0x75
   25bf2:	e7c9      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EINPROGRESS;
   25bf4:	f022 f890 	bl	47d18 <__errno>
   25bf8:	2377      	movs	r3, #119	; 0x77
   25bfa:	e7c5      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ECANCELED;
   25bfc:	f022 f88c 	bl	47d18 <__errno>
   25c00:	238c      	movs	r3, #140	; 0x8c
   25c02:	e7c1      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = ENOKEY;
   25c04:	f022 f888 	bl	47d18 <__errno>
   25c08:	f240 73d1 	movw	r3, #2001	; 0x7d1
   25c0c:	e7bc      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EKEYEXPIRED;
   25c0e:	f022 f883 	bl	47d18 <__errno>
   25c12:	f240 73d2 	movw	r3, #2002	; 0x7d2
   25c16:	e7b7      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EKEYREVOKED;
   25c18:	f022 f87e 	bl	47d18 <__errno>
   25c1c:	f240 73d3 	movw	r3, #2003	; 0x7d3
   25c20:	e7b2      	b.n	25b88 <bsd_os_errno_set+0x114>
		errno = EMSGSIZE;
   25c22:	f022 f879 	bl	47d18 <__errno>
   25c26:	237a      	movs	r3, #122	; 0x7a
   25c28:	e7ae      	b.n	25b88 <bsd_os_errno_set+0x114>
   25c2a:	bf00      	nop
   25c2c:	0004f176 	.word	0x0004f176
   25c30:	00052aa7 	.word	0x00052aa7
   25c34:	0004ccf0 	.word	0x0004ccf0
   25c38:	0004f19b 	.word	0x0004f19b
   25c3c:	0004a688 	.word	0x0004a688
   25c40:	0004a6d0 	.word	0x0004a6d0
   25c44:	0004f1c2 	.word	0x0004f1c2
   25c48:	baadbaad 	.word	0xbaadbaad

00025c4c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25c50:	4b01      	ldr	r3, [pc, #4]	; (25c58 <bsd_os_application_irq_set+0xc>)
   25c52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25c56:	4770      	bx	lr
   25c58:	e000e100 	.word	0xe000e100

00025c5c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25c60:	4b01      	ldr	r3, [pc, #4]	; (25c68 <bsd_os_application_irq_clear+0xc>)
   25c62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25c66:	4770      	bx	lr
   25c68:	e000e100 	.word	0xe000e100

00025c6c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25c70:	4b01      	ldr	r3, [pc, #4]	; (25c78 <bsd_os_trace_irq_set+0xc>)
   25c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25c76:	4770      	bx	lr
   25c78:	e000e100 	.word	0xe000e100

00025c7c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25c80:	4b01      	ldr	r3, [pc, #4]	; (25c88 <bsd_os_trace_irq_clear+0xc>)
   25c82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25c86:	4770      	bx	lr
   25c88:	e000e100 	.word	0xe000e100

00025c8c <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   25c8c:	b508      	push	{r3, lr}
	list->head = NULL;
   25c8e:	2300      	movs	r3, #0
   25c90:	4a07      	ldr	r2, [pc, #28]	; (25cb0 <bsd_os_init+0x24>)
	list->tail = NULL;
   25c92:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25c96:	4a07      	ldr	r2, [pc, #28]	; (25cb4 <bsd_os_init+0x28>)
   25c98:	e8d2 1fef 	ldaex	r1, [r2]
   25c9c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   25ca0:	2800      	cmp	r0, #0
   25ca2:	d1f9      	bne.n	25c98 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   25ca4:	f023 fa11 	bl	490ca <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   25ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   25cac:	f023 ba02 	b.w	490b4 <trace_task_create>
   25cb0:	20023ce0 	.word	0x20023ce0
   25cb4:	20023cdc 	.word	0x20023cdc

00025cb8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25cb8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25cbc:	d03c      	beq.n	25d38 <z_to_nrf_optname+0x80>
   25cbe:	dc04      	bgt.n	25cca <z_to_nrf_optname+0x12>
   25cc0:	2801      	cmp	r0, #1
   25cc2:	d047      	beq.n	25d54 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   25cc4:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   25cc8:	4770      	bx	lr
	switch (z_in_level) {
   25cca:	f240 2302 	movw	r3, #514	; 0x202
   25cce:	4298      	cmp	r0, r3
   25cd0:	d052      	beq.n	25d78 <z_to_nrf_optname+0xc0>
   25cd2:	f240 2303 	movw	r3, #515	; 0x203
   25cd6:	4298      	cmp	r0, r3
   25cd8:	d1f4      	bne.n	25cc4 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   25cda:	3901      	subs	r1, #1
   25cdc:	2913      	cmp	r1, #19
   25cde:	d8f1      	bhi.n	25cc4 <z_to_nrf_optname+0xc>
   25ce0:	a301      	add	r3, pc, #4	; (adr r3, 25ce8 <z_to_nrf_optname+0x30>)
   25ce2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25ce6:	bf00      	nop
   25ce8:	00025d85 	.word	0x00025d85
   25cec:	00025d49 	.word	0x00025d49
   25cf0:	00025d6d 	.word	0x00025d6d
   25cf4:	00025d61 	.word	0x00025d61
   25cf8:	00025d51 	.word	0x00025d51
   25cfc:	00025d71 	.word	0x00025d71
   25d00:	00025d75 	.word	0x00025d75
   25d04:	00025cc5 	.word	0x00025cc5
   25d08:	00025cc5 	.word	0x00025cc5
   25d0c:	00025cc5 	.word	0x00025cc5
   25d10:	00025cc5 	.word	0x00025cc5
   25d14:	00025cc5 	.word	0x00025cc5
   25d18:	00025cc5 	.word	0x00025cc5
   25d1c:	00025cc5 	.word	0x00025cc5
   25d20:	00025cc5 	.word	0x00025cc5
   25d24:	00025cc5 	.word	0x00025cc5
   25d28:	00025cc5 	.word	0x00025cc5
   25d2c:	00025cc5 	.word	0x00025cc5
   25d30:	00025cc5 	.word	0x00025cc5
   25d34:	00025d65 	.word	0x00025d65
		switch (z_in_optname) {
   25d38:	3901      	subs	r1, #1
   25d3a:	2905      	cmp	r1, #5
   25d3c:	d8c2      	bhi.n	25cc4 <z_to_nrf_optname+0xc>
   25d3e:	e8df f001 	tbb	[pc, r1]
   25d42:	0703      	.short	0x0703
   25d44:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   25d48:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   25d4a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   25d4c:	2000      	movs	r0, #0
			break;
   25d4e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   25d50:	2305      	movs	r3, #5
   25d52:	e7fa      	b.n	25d4a <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   25d54:	2914      	cmp	r1, #20
   25d56:	d005      	beq.n	25d64 <z_to_nrf_optname+0xac>
   25d58:	2919      	cmp	r1, #25
   25d5a:	d005      	beq.n	25d68 <z_to_nrf_optname+0xb0>
   25d5c:	2904      	cmp	r1, #4
   25d5e:	d1b1      	bne.n	25cc4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   25d60:	2304      	movs	r3, #4
   25d62:	e7f2      	b.n	25d4a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   25d64:	2314      	movs	r3, #20
   25d66:	e7f0      	b.n	25d4a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   25d68:	6011      	str	r1, [r2, #0]
   25d6a:	e7ef      	b.n	25d4c <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   25d6c:	2303      	movs	r3, #3
   25d6e:	e7ec      	b.n	25d4a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   25d70:	2306      	movs	r3, #6
   25d72:	e7ea      	b.n	25d4a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   25d74:	2307      	movs	r3, #7
   25d76:	e7e8      	b.n	25d4a <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   25d78:	2902      	cmp	r1, #2
   25d7a:	d0e5      	beq.n	25d48 <z_to_nrf_optname+0x90>
   25d7c:	2903      	cmp	r1, #3
   25d7e:	d0f5      	beq.n	25d6c <z_to_nrf_optname+0xb4>
   25d80:	2901      	cmp	r1, #1
   25d82:	d19f      	bne.n	25cc4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   25d84:	2301      	movs	r3, #1
   25d86:	e7e0      	b.n	25d4a <z_to_nrf_optname+0x92>

00025d88 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   25d88:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   25d8a:	4b03      	ldr	r3, [pc, #12]	; (25d98 <nrf91_socket_iface_init+0x10>)
   25d8c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   25d8e:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   25d90:	4802      	ldr	r0, [pc, #8]	; (25d9c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   25d92:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   25d94:	f7fb b880 	b.w	20e98 <socket_offload_register>
   25d98:	20023d38 	.word	0x20023d38
   25d9c:	0004ad9c 	.word	0x0004ad9c

00025da0 <button_pressed>:
	return err;
}

static void button_pressed(struct device *gpio_dev, struct gpio_callback *cb,
		    u32_t pins)
{
   25da0:	b510      	push	{r4, lr}
	__asm__ volatile(
   25da2:	f04f 0320 	mov.w	r3, #32
   25da6:	f3ef 8411 	mrs	r4, BASEPRI
   25daa:	f383 8811 	msr	BASEPRI, r3
   25dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   25db2:	482c      	ldr	r0, [pc, #176]	; (25e64 <button_pressed+0xc4>)
   25db4:	f019 f95a 	bl	3f06c <z_spin_lock_valid>
   25db8:	b960      	cbnz	r0, 25dd4 <button_pressed+0x34>
   25dba:	492b      	ldr	r1, [pc, #172]	; (25e68 <button_pressed+0xc8>)
   25dbc:	235f      	movs	r3, #95	; 0x5f
   25dbe:	4a2b      	ldr	r2, [pc, #172]	; (25e6c <button_pressed+0xcc>)
   25dc0:	482b      	ldr	r0, [pc, #172]	; (25e70 <button_pressed+0xd0>)
   25dc2:	f021 fd82 	bl	478ca <printk>
   25dc6:	482b      	ldr	r0, [pc, #172]	; (25e74 <button_pressed+0xd4>)
   25dc8:	f021 fd7f 	bl	478ca <printk>
   25dcc:	215f      	movs	r1, #95	; 0x5f
   25dce:	4827      	ldr	r0, [pc, #156]	; (25e6c <button_pressed+0xcc>)
   25dd0:	f021 fd88 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25dd4:	4823      	ldr	r0, [pc, #140]	; (25e64 <button_pressed+0xc4>)
   25dd6:	f019 f967 	bl	3f0a8 <z_spin_lock_set_owner>
			err = gpio_pin_disable_callback(button_devs[i],
   25dda:	4b27      	ldr	r3, [pc, #156]	; (25e78 <button_pressed+0xd8>)
   25ddc:	6818      	ldr	r0, [r3, #0]
	if (api->disable_callback == NULL) {
   25dde:	6843      	ldr	r3, [r0, #4]
   25de0:	695b      	ldr	r3, [r3, #20]
   25de2:	bb73      	cbnz	r3, 25e42 <button_pressed+0xa2>

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);

	if (err) {
		LOG_ERR("Cannot disable callbacks");
   25de4:	2301      	movs	r3, #1
   25de6:	f04f 0000 	mov.w	r0, #0
   25dea:	4a24      	ldr	r2, [pc, #144]	; (25e7c <button_pressed+0xdc>)
   25dec:	f363 0002 	bfi	r0, r3, #0, #3
   25df0:	4b23      	ldr	r3, [pc, #140]	; (25e80 <button_pressed+0xe0>)
   25df2:	f36f 00c5 	bfc	r0, #3, #3
   25df6:	1a9b      	subs	r3, r3, r2
   25df8:	08db      	lsrs	r3, r3, #3
   25dfa:	f363 108f 	bfi	r0, r3, #6, #10
   25dfe:	4921      	ldr	r1, [pc, #132]	; (25e84 <button_pressed+0xe4>)
   25e00:	f021 fd80 	bl	47904 <log_string_sync>
	}

	switch (state) {
   25e04:	4b20      	ldr	r3, [pc, #128]	; (25e88 <button_pressed+0xe8>)
   25e06:	781a      	ldrb	r2, [r3, #0]
   25e08:	bb0a      	cbnz	r2, 25e4e <button_pressed+0xae>
	case STATE_WAITING:
		state = STATE_SCANNING;
   25e0a:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   25e0c:	491f      	ldr	r1, [pc, #124]	; (25e8c <button_pressed+0xec>)
   25e0e:	4820      	ldr	r0, [pc, #128]	; (25e90 <button_pressed+0xf0>)
   25e10:	701a      	strb	r2, [r3, #0]
   25e12:	f019 fb89 	bl	3f528 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   25e16:	4813      	ldr	r0, [pc, #76]	; (25e64 <button_pressed+0xc4>)
   25e18:	f019 f936 	bl	3f088 <z_spin_unlock_valid>
   25e1c:	b960      	cbnz	r0, 25e38 <button_pressed+0x98>
   25e1e:	491d      	ldr	r1, [pc, #116]	; (25e94 <button_pressed+0xf4>)
   25e20:	2372      	movs	r3, #114	; 0x72
   25e22:	4a12      	ldr	r2, [pc, #72]	; (25e6c <button_pressed+0xcc>)
   25e24:	4812      	ldr	r0, [pc, #72]	; (25e70 <button_pressed+0xd0>)
   25e26:	f021 fd50 	bl	478ca <printk>
   25e2a:	481b      	ldr	r0, [pc, #108]	; (25e98 <button_pressed+0xf8>)
   25e2c:	f021 fd4d 	bl	478ca <printk>
   25e30:	2172      	movs	r1, #114	; 0x72
   25e32:	480e      	ldr	r0, [pc, #56]	; (25e6c <button_pressed+0xcc>)
   25e34:	f021 fd56 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   25e38:	f384 8811 	msr	BASEPRI, r4
   25e3c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   25e40:	bd10      	pop	{r4, pc}
	return api->disable_callback(port, access_op, pin);
   25e42:	221a      	movs	r2, #26
   25e44:	2100      	movs	r1, #0
   25e46:	4798      	blx	r3
	if (err) {
   25e48:	2800      	cmp	r0, #0
   25e4a:	d0db      	beq.n	25e04 <button_pressed+0x64>
   25e4c:	e7ca      	b.n	25de4 <button_pressed+0x44>
		__ASSERT_NO_MSG(false);
   25e4e:	23e2      	movs	r3, #226	; 0xe2
   25e50:	4a12      	ldr	r2, [pc, #72]	; (25e9c <button_pressed+0xfc>)
   25e52:	4913      	ldr	r1, [pc, #76]	; (25ea0 <button_pressed+0x100>)
   25e54:	4806      	ldr	r0, [pc, #24]	; (25e70 <button_pressed+0xd0>)
   25e56:	f021 fd38 	bl	478ca <printk>
   25e5a:	21e2      	movs	r1, #226	; 0xe2
   25e5c:	480f      	ldr	r0, [pc, #60]	; (25e9c <button_pressed+0xfc>)
   25e5e:	f021 fd41 	bl	478e4 <assert_post_action>
		break;
   25e62:	e7d8      	b.n	25e16 <button_pressed+0x76>
   25e64:	20023d78 	.word	0x20023d78
   25e68:	0004d875 	.word	0x0004d875
   25e6c:	0004d84e 	.word	0x0004d84e
   25e70:	0004ccf0 	.word	0x0004ccf0
   25e74:	0004d88a 	.word	0x0004d88a
   25e78:	20023d3c 	.word	0x20023d3c
   25e7c:	0004a688 	.word	0x0004a688
   25e80:	0004a700 	.word	0x0004a700
   25e84:	0004f1fb 	.word	0x0004f1fb
   25e88:	2002a705 	.word	0x2002a705
   25e8c:	20023d44 	.word	0x20023d44
   25e90:	2002a5c0 	.word	0x2002a5c0
   25e94:	0004d89f 	.word	0x0004d89f
   25e98:	0004d8b6 	.word	0x0004d8b6
   25e9c:	0004f214 	.word	0x0004f214
   25ea0:	00052aa7 	.word	0x00052aa7

00025ea4 <buttons_scan_fn>:
{
   25ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if (gpio_pin_read(
   25ea6:	4d58      	ldr	r5, [pc, #352]	; (26008 <buttons_scan_fn+0x164>)
   25ea8:	6828      	ldr	r0, [r5, #0]
	return api->read(port, access_op, pin, value);
   25eaa:	6843      	ldr	r3, [r0, #4]
   25eac:	221a      	movs	r2, #26
   25eae:	689c      	ldr	r4, [r3, #8]
   25eb0:	2100      	movs	r1, #0
   25eb2:	ab01      	add	r3, sp, #4
   25eb4:	47a0      	blx	r4
   25eb6:	2800      	cmp	r0, #0
   25eb8:	d03e      	beq.n	25f38 <buttons_scan_fn+0x94>
			LOG_ERR("Cannot read gpio pin");
   25eba:	2301      	movs	r3, #1
   25ebc:	f04f 0000 	mov.w	r0, #0
   25ec0:	4a52      	ldr	r2, [pc, #328]	; (2600c <buttons_scan_fn+0x168>)
   25ec2:	f363 0002 	bfi	r0, r3, #0, #3
   25ec6:	4b52      	ldr	r3, [pc, #328]	; (26010 <buttons_scan_fn+0x16c>)
   25ec8:	f36f 00c5 	bfc	r0, #3, #3
   25ecc:	1a9b      	subs	r3, r3, r2
   25ece:	08db      	lsrs	r3, r3, #3
   25ed0:	f363 108f 	bfi	r0, r3, #6, #10
   25ed4:	494f      	ldr	r1, [pc, #316]	; (26014 <buttons_scan_fn+0x170>)
   25ed6:	f021 fd15 	bl	47904 <log_string_sync>
			return 0;
   25eda:	2400      	movs	r4, #0
   25edc:	4b4e      	ldr	r3, [pc, #312]	; (26018 <buttons_scan_fn+0x174>)
   25ede:	e8d3 2fef 	ldaex	r2, [r3]
   25ee2:	e8c3 4fe1 	stlex	r1, r4, [r3]
   25ee6:	2900      	cmp	r1, #0
   25ee8:	d1f9      	bne.n	25ede <buttons_scan_fn+0x3a>
	if (!initial_run) {
   25eea:	4b4c      	ldr	r3, [pc, #304]	; (2601c <buttons_scan_fn+0x178>)
   25eec:	4e4c      	ldr	r6, [pc, #304]	; (26020 <buttons_scan_fn+0x17c>)
   25eee:	781a      	ldrb	r2, [r3, #0]
   25ef0:	bb3a      	cbnz	r2, 25f42 <buttons_scan_fn+0x9e>
		if (button_handler_cb != NULL) {
   25ef2:	4b4c      	ldr	r3, [pc, #304]	; (26024 <buttons_scan_fn+0x180>)
   25ef4:	681b      	ldr	r3, [r3, #0]
   25ef6:	b12b      	cbz	r3, 25f04 <buttons_scan_fn+0x60>
			if (button_scan != last_button_scan) {
   25ef8:	6831      	ldr	r1, [r6, #0]
   25efa:	42a1      	cmp	r1, r4
   25efc:	d002      	beq.n	25f04 <buttons_scan_fn+0x60>
				button_handler_cb(button_scan, has_changed);
   25efe:	4061      	eors	r1, r4
   25f00:	4620      	mov	r0, r4
   25f02:	4798      	blx	r3
	last_button_scan = button_scan;
   25f04:	6034      	str	r4, [r6, #0]
	if (button_scan != 0) {
   25f06:	b1fc      	cbz	r4, 25f48 <buttons_scan_fn+0xa4>
   25f08:	220a      	movs	r2, #10
   25f0a:	4947      	ldr	r1, [pc, #284]	; (26028 <buttons_scan_fn+0x184>)
   25f0c:	4847      	ldr	r0, [pc, #284]	; (2602c <buttons_scan_fn+0x188>)
   25f0e:	f019 fb0b 	bl	3f528 <k_delayed_work_submit_to_queue>
		if (err) {
   25f12:	b178      	cbz	r0, 25f34 <buttons_scan_fn+0x90>
			LOG_ERR("Cannot add work to workqueue");
   25f14:	2301      	movs	r3, #1
   25f16:	f04f 0000 	mov.w	r0, #0
   25f1a:	4a3c      	ldr	r2, [pc, #240]	; (2600c <buttons_scan_fn+0x168>)
   25f1c:	f363 0002 	bfi	r0, r3, #0, #3
   25f20:	4b3b      	ldr	r3, [pc, #236]	; (26010 <buttons_scan_fn+0x16c>)
   25f22:	f36f 00c5 	bfc	r0, #3, #3
   25f26:	1a9b      	subs	r3, r3, r2
   25f28:	08db      	lsrs	r3, r3, #3
   25f2a:	4941      	ldr	r1, [pc, #260]	; (26030 <buttons_scan_fn+0x18c>)
   25f2c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   25f30:	f021 fce8 	bl	47904 <log_string_sync>
}
   25f34:	b002      	add	sp, #8
   25f36:	bd70      	pop	{r4, r5, r6, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   25f38:	9c01      	ldr	r4, [sp, #4]
   25f3a:	fab4 f484 	clz	r4, r4
   25f3e:	0964      	lsrs	r4, r4, #5
   25f40:	e7cc      	b.n	25edc <buttons_scan_fn+0x38>
		initial_run = false;
   25f42:	2200      	movs	r2, #0
   25f44:	701a      	strb	r2, [r3, #0]
   25f46:	e7dd      	b.n	25f04 <buttons_scan_fn+0x60>
	__asm__ volatile(
   25f48:	f04f 0320 	mov.w	r3, #32
   25f4c:	f3ef 8611 	mrs	r6, BASEPRI
   25f50:	f383 8811 	msr	BASEPRI, r3
   25f54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   25f58:	4836      	ldr	r0, [pc, #216]	; (26034 <buttons_scan_fn+0x190>)
   25f5a:	f019 f887 	bl	3f06c <z_spin_lock_valid>
   25f5e:	b960      	cbnz	r0, 25f7a <buttons_scan_fn+0xd6>
   25f60:	4935      	ldr	r1, [pc, #212]	; (26038 <buttons_scan_fn+0x194>)
   25f62:	235f      	movs	r3, #95	; 0x5f
   25f64:	4a35      	ldr	r2, [pc, #212]	; (2603c <buttons_scan_fn+0x198>)
   25f66:	4836      	ldr	r0, [pc, #216]	; (26040 <buttons_scan_fn+0x19c>)
   25f68:	f021 fcaf 	bl	478ca <printk>
   25f6c:	4835      	ldr	r0, [pc, #212]	; (26044 <buttons_scan_fn+0x1a0>)
   25f6e:	f021 fcac 	bl	478ca <printk>
   25f72:	215f      	movs	r1, #95	; 0x5f
   25f74:	4831      	ldr	r0, [pc, #196]	; (2603c <buttons_scan_fn+0x198>)
   25f76:	f021 fcb5 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25f7a:	482e      	ldr	r0, [pc, #184]	; (26034 <buttons_scan_fn+0x190>)
   25f7c:	f019 f894 	bl	3f0a8 <z_spin_lock_set_owner>
		switch (state) {
   25f80:	4b31      	ldr	r3, [pc, #196]	; (26048 <buttons_scan_fn+0x1a4>)
   25f82:	781a      	ldrb	r2, [r3, #0]
   25f84:	2a01      	cmp	r2, #1
   25f86:	d12f      	bne.n	25fe8 <buttons_scan_fn+0x144>
			state = STATE_WAITING;
   25f88:	2100      	movs	r1, #0
			err = gpio_pin_enable_callback(button_devs[i],
   25f8a:	6828      	ldr	r0, [r5, #0]
			state = STATE_WAITING;
   25f8c:	7019      	strb	r1, [r3, #0]
	if (api->enable_callback == NULL) {
   25f8e:	6843      	ldr	r3, [r0, #4]
   25f90:	691b      	ldr	r3, [r3, #16]
   25f92:	2b00      	cmp	r3, #0
   25f94:	d034      	beq.n	26000 <buttons_scan_fn+0x15c>
	return api->enable_callback(port, access_op, pin);
   25f96:	221a      	movs	r2, #26
   25f98:	4798      	blx	r3
   25f9a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   25f9c:	4825      	ldr	r0, [pc, #148]	; (26034 <buttons_scan_fn+0x190>)
   25f9e:	f019 f873 	bl	3f088 <z_spin_unlock_valid>
   25fa2:	b960      	cbnz	r0, 25fbe <buttons_scan_fn+0x11a>
   25fa4:	4929      	ldr	r1, [pc, #164]	; (2604c <buttons_scan_fn+0x1a8>)
   25fa6:	2372      	movs	r3, #114	; 0x72
   25fa8:	4a24      	ldr	r2, [pc, #144]	; (2603c <buttons_scan_fn+0x198>)
   25faa:	4825      	ldr	r0, [pc, #148]	; (26040 <buttons_scan_fn+0x19c>)
   25fac:	f021 fc8d 	bl	478ca <printk>
   25fb0:	4827      	ldr	r0, [pc, #156]	; (26050 <buttons_scan_fn+0x1ac>)
   25fb2:	f021 fc8a 	bl	478ca <printk>
   25fb6:	2172      	movs	r1, #114	; 0x72
   25fb8:	4820      	ldr	r0, [pc, #128]	; (2603c <buttons_scan_fn+0x198>)
   25fba:	f021 fc93 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   25fbe:	f386 8811 	msr	BASEPRI, r6
   25fc2:	f3bf 8f6f 	isb	sy
		if (err) {
   25fc6:	2c00      	cmp	r4, #0
   25fc8:	d0b4      	beq.n	25f34 <buttons_scan_fn+0x90>
			LOG_ERR("Cannot enable callbacks");
   25fca:	2301      	movs	r3, #1
   25fcc:	f04f 0000 	mov.w	r0, #0
   25fd0:	4a0e      	ldr	r2, [pc, #56]	; (2600c <buttons_scan_fn+0x168>)
   25fd2:	f363 0002 	bfi	r0, r3, #0, #3
   25fd6:	4b0e      	ldr	r3, [pc, #56]	; (26010 <buttons_scan_fn+0x16c>)
   25fd8:	f36f 00c5 	bfc	r0, #3, #3
   25fdc:	1a9b      	subs	r3, r3, r2
   25fde:	08db      	lsrs	r3, r3, #3
   25fe0:	f363 108f 	bfi	r0, r3, #6, #10
   25fe4:	491b      	ldr	r1, [pc, #108]	; (26054 <buttons_scan_fn+0x1b0>)
   25fe6:	e7a3      	b.n	25f30 <buttons_scan_fn+0x8c>
			__ASSERT_NO_MSG(false);
   25fe8:	2398      	movs	r3, #152	; 0x98
   25fea:	4a1b      	ldr	r2, [pc, #108]	; (26058 <buttons_scan_fn+0x1b4>)
   25fec:	491b      	ldr	r1, [pc, #108]	; (2605c <buttons_scan_fn+0x1b8>)
   25fee:	4814      	ldr	r0, [pc, #80]	; (26040 <buttons_scan_fn+0x19c>)
   25ff0:	f021 fc6b 	bl	478ca <printk>
   25ff4:	2198      	movs	r1, #152	; 0x98
   25ff6:	4818      	ldr	r0, [pc, #96]	; (26058 <buttons_scan_fn+0x1b4>)
   25ff8:	f021 fc74 	bl	478e4 <assert_post_action>
		int err = 0;
   25ffc:	2400      	movs	r4, #0
			break;
   25ffe:	e7cd      	b.n	25f9c <buttons_scan_fn+0xf8>
		return -ENOTSUP;
   26000:	f06f 0485 	mvn.w	r4, #133	; 0x85
   26004:	e7ca      	b.n	25f9c <buttons_scan_fn+0xf8>
   26006:	bf00      	nop
   26008:	20023d3c 	.word	0x20023d3c
   2600c:	0004a688 	.word	0x0004a688
   26010:	0004a700 	.word	0x0004a700
   26014:	0004f253 	.word	0x0004f253
   26018:	20023d7c 	.word	0x20023d7c
   2601c:	2003231e 	.word	0x2003231e
   26020:	20023d70 	.word	0x20023d70
   26024:	20023d40 	.word	0x20023d40
   26028:	20023d44 	.word	0x20023d44
   2602c:	2002a5c0 	.word	0x2002a5c0
   26030:	0004f268 	.word	0x0004f268
   26034:	20023d78 	.word	0x20023d78
   26038:	0004d875 	.word	0x0004d875
   2603c:	0004d84e 	.word	0x0004d84e
   26040:	0004ccf0 	.word	0x0004ccf0
   26044:	0004d88a 	.word	0x0004d88a
   26048:	2002a705 	.word	0x2002a705
   2604c:	0004d89f 	.word	0x0004d89f
   26050:	0004d8b6 	.word	0x0004d8b6
   26054:	0004f285 	.word	0x0004f285
   26058:	0004f214 	.word	0x0004f214
   2605c:	00052aa7 	.word	0x00052aa7

00026060 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26060:	4b05      	ldr	r3, [pc, #20]	; (26078 <dk_read_buttons+0x18>)
   26062:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(u32_t *button_state, u32_t *has_changed)
{
	static u32_t last_state;
	u32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   26066:	b100      	cbz	r0, 2606a <dk_read_buttons+0xa>
		*button_state = current_state;
   26068:	6003      	str	r3, [r0, #0]
   2606a:	4804      	ldr	r0, [pc, #16]	; (2607c <dk_read_buttons+0x1c>)
	}

	if (has_changed != NULL) {
   2606c:	b111      	cbz	r1, 26074 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2606e:	6802      	ldr	r2, [r0, #0]
   26070:	405a      	eors	r2, r3
   26072:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   26074:	6003      	str	r3, [r0, #0]
}
   26076:	4770      	bx	lr
   26078:	20023d7c 	.word	0x20023d7c
   2607c:	20023d74 	.word	0x20023d74

00026080 <dk_buttons_init>:
	button_handler_cb = button_handler;
   26080:	4b56      	ldr	r3, [pc, #344]	; (261dc <dk_buttons_init+0x15c>)
{
   26082:	b570      	push	{r4, r5, r6, lr}
	button_handler_cb = button_handler;
   26084:	6018      	str	r0, [r3, #0]
   26086:	4856      	ldr	r0, [pc, #344]	; (261e0 <dk_buttons_init+0x160>)
   26088:	f016 fe2e 	bl	3cce8 <z_impl_device_get_binding>
		button_devs[i] = device_get_binding(button_pins[i].port);
   2608c:	4d55      	ldr	r5, [pc, #340]	; (261e4 <dk_buttons_init+0x164>)
   2608e:	4603      	mov	r3, r0
   26090:	6028      	str	r0, [r5, #0]
		if (!button_devs[i]) {
   26092:	b998      	cbnz	r0, 260bc <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   26094:	2201      	movs	r2, #1
   26096:	f04f 0000 	mov.w	r0, #0
   2609a:	f362 0002 	bfi	r0, r2, #0, #3
   2609e:	f363 00c5 	bfi	r0, r3, #3, #3
   260a2:	4a51      	ldr	r2, [pc, #324]	; (261e8 <dk_buttons_init+0x168>)
   260a4:	4b51      	ldr	r3, [pc, #324]	; (261ec <dk_buttons_init+0x16c>)
   260a6:	4952      	ldr	r1, [pc, #328]	; (261f0 <dk_buttons_init+0x170>)
   260a8:	1a9b      	subs	r3, r3, r2
   260aa:	08db      	lsrs	r3, r3, #3
   260ac:	f363 108f 	bfi	r0, r3, #6, #10
   260b0:	f021 fc28 	bl	47904 <log_string_sync>
			return -ENODEV;
   260b4:	f06f 0412 	mvn.w	r4, #18
}
   260b8:	4620      	mov	r0, r4
   260ba:	bd70      	pop	{r4, r5, r6, pc}
	return api->config(port, access_op, pin, flags);
   260bc:	6843      	ldr	r3, [r0, #4]
   260be:	221a      	movs	r2, #26
   260c0:	681c      	ldr	r4, [r3, #0]
   260c2:	2100      	movs	r1, #0
   260c4:	f44f 7380 	mov.w	r3, #256	; 0x100
   260c8:	47a0      	blx	r4
		if (err) {
   260ca:	4604      	mov	r4, r0
   260cc:	2800      	cmp	r0, #0
   260ce:	d06b      	beq.n	261a8 <dk_buttons_init+0x128>
			LOG_ERR("Cannot configure button gpio");
   260d0:	2301      	movs	r3, #1
   260d2:	f04f 0000 	mov.w	r0, #0
   260d6:	4a44      	ldr	r2, [pc, #272]	; (261e8 <dk_buttons_init+0x168>)
   260d8:	f363 0002 	bfi	r0, r3, #0, #3
   260dc:	4b43      	ldr	r3, [pc, #268]	; (261ec <dk_buttons_init+0x16c>)
   260de:	f36f 00c5 	bfc	r0, #3, #3
   260e2:	1a9b      	subs	r3, r3, r2
   260e4:	08db      	lsrs	r3, r3, #3
   260e6:	4943      	ldr	r1, [pc, #268]	; (261f4 <dk_buttons_init+0x174>)
   260e8:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   260ec:	f021 fc0a 	bl	47904 <log_string_sync>
		return err;
   260f0:	e7e2      	b.n	260b8 <dk_buttons_init+0x38>
	return api->disable_callback(port, access_op, pin);
   260f2:	4621      	mov	r1, r4
   260f4:	221a      	movs	r2, #26
   260f6:	4798      	blx	r3
		if (err) {
   260f8:	4604      	mov	r4, r0
   260fa:	bb08      	cbnz	r0, 26140 <dk_buttons_init+0xc0>
	callback->handler = handler;
   260fc:	493e      	ldr	r1, [pc, #248]	; (261f8 <dk_buttons_init+0x178>)
   260fe:	4b3f      	ldr	r3, [pc, #252]	; (261fc <dk_buttons_init+0x17c>)
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   26100:	6828      	ldr	r0, [r5, #0]
   26102:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   26104:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   26108:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   2610a:	6843      	ldr	r3, [r0, #4]
   2610c:	68db      	ldr	r3, [r3, #12]
   2610e:	bb33      	cbnz	r3, 2615e <dk_buttons_init+0xde>
		return -ENOTSUP;
   26110:	f06f 0485 	mvn.w	r4, #133	; 0x85
			LOG_ERR("Cannot add callback");
   26114:	2301      	movs	r3, #1
   26116:	f04f 0000 	mov.w	r0, #0
   2611a:	4a33      	ldr	r2, [pc, #204]	; (261e8 <dk_buttons_init+0x168>)
   2611c:	f363 0002 	bfi	r0, r3, #0, #3
   26120:	4b32      	ldr	r3, [pc, #200]	; (261ec <dk_buttons_init+0x16c>)
   26122:	f36f 00c5 	bfc	r0, #3, #3
   26126:	1a9b      	subs	r3, r3, r2
   26128:	08db      	lsrs	r3, r3, #3
   2612a:	f363 108f 	bfi	r0, r3, #6, #10
   2612e:	4934      	ldr	r1, [pc, #208]	; (26200 <dk_buttons_init+0x180>)
   26130:	e7dc      	b.n	260ec <dk_buttons_init+0x6c>
		err = gpio_pin_disable_callback(button_devs[i],
   26132:	6828      	ldr	r0, [r5, #0]
	if (api->disable_callback == NULL) {
   26134:	6843      	ldr	r3, [r0, #4]
   26136:	695b      	ldr	r3, [r3, #20]
   26138:	2b00      	cmp	r3, #0
   2613a:	d1da      	bne.n	260f2 <dk_buttons_init+0x72>
		return -ENOTSUP;
   2613c:	f06f 0485 	mvn.w	r4, #133	; 0x85
			LOG_ERR("Cannot disable callbacks()");
   26140:	2301      	movs	r3, #1
   26142:	f04f 0000 	mov.w	r0, #0
   26146:	4a28      	ldr	r2, [pc, #160]	; (261e8 <dk_buttons_init+0x168>)
   26148:	f363 0002 	bfi	r0, r3, #0, #3
   2614c:	4b27      	ldr	r3, [pc, #156]	; (261ec <dk_buttons_init+0x16c>)
   2614e:	f36f 00c5 	bfc	r0, #3, #3
   26152:	1a9b      	subs	r3, r3, r2
   26154:	08db      	lsrs	r3, r3, #3
   26156:	f363 108f 	bfi	r0, r3, #6, #10
   2615a:	492a      	ldr	r1, [pc, #168]	; (26204 <dk_buttons_init+0x184>)
   2615c:	e7c6      	b.n	260ec <dk_buttons_init+0x6c>
	return api->manage_callback(port, callback, true);
   2615e:	2201      	movs	r2, #1
   26160:	4798      	blx	r3
		if (err) {
   26162:	4604      	mov	r4, r0
   26164:	2800      	cmp	r0, #0
   26166:	d1d5      	bne.n	26114 <dk_buttons_init+0x94>
	state = STATE_SCANNING;
   26168:	2501      	movs	r5, #1
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   2616a:	4927      	ldr	r1, [pc, #156]	; (26208 <dk_buttons_init+0x188>)
   2616c:	4827      	ldr	r0, [pc, #156]	; (2620c <dk_buttons_init+0x18c>)
   2616e:	f024 f83f 	bl	4a1f0 <k_delayed_work_init>
	state = STATE_SCANNING;
   26172:	4b27      	ldr	r3, [pc, #156]	; (26210 <dk_buttons_init+0x190>)
   26174:	4622      	mov	r2, r4
   26176:	4925      	ldr	r1, [pc, #148]	; (2620c <dk_buttons_init+0x18c>)
   26178:	4826      	ldr	r0, [pc, #152]	; (26214 <dk_buttons_init+0x194>)
   2617a:	701d      	strb	r5, [r3, #0]
   2617c:	f019 f9d4 	bl	3f528 <k_delayed_work_submit_to_queue>
	if (err) {
   26180:	4604      	mov	r4, r0
   26182:	b168      	cbz	r0, 261a0 <dk_buttons_init+0x120>
		LOG_ERR("Cannot add work to workqueue");
   26184:	f04f 0000 	mov.w	r0, #0
   26188:	4b18      	ldr	r3, [pc, #96]	; (261ec <dk_buttons_init+0x16c>)
   2618a:	4a17      	ldr	r2, [pc, #92]	; (261e8 <dk_buttons_init+0x168>)
   2618c:	f365 0002 	bfi	r0, r5, #0, #3
   26190:	1a9b      	subs	r3, r3, r2
   26192:	f36f 00c5 	bfc	r0, #3, #3
   26196:	08db      	lsrs	r3, r3, #3
   26198:	f363 108f 	bfi	r0, r3, #6, #10
   2619c:	491e      	ldr	r1, [pc, #120]	; (26218 <dk_buttons_init+0x198>)
   2619e:	e7a5      	b.n	260ec <dk_buttons_init+0x6c>
	dk_read_buttons(NULL, NULL);
   261a0:	4601      	mov	r1, r0
   261a2:	f7ff ff5d 	bl	26060 <dk_read_buttons>
	return 0;
   261a6:	e787      	b.n	260b8 <dk_buttons_init+0x38>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   261a8:	6828      	ldr	r0, [r5, #0]
	return api->config(port, access_op, pin, flags);
   261aa:	6843      	ldr	r3, [r0, #4]
   261ac:	4621      	mov	r1, r4
   261ae:	681e      	ldr	r6, [r3, #0]
   261b0:	221a      	movs	r2, #26
   261b2:	f44f 7381 	mov.w	r3, #258	; 0x102
   261b6:	47b0      	blx	r6
	if (err) {
   261b8:	4604      	mov	r4, r0
   261ba:	2800      	cmp	r0, #0
   261bc:	d0b9      	beq.n	26132 <dk_buttons_init+0xb2>
		LOG_ERR("Cannot set interrupt mode");
   261be:	2301      	movs	r3, #1
   261c0:	f04f 0000 	mov.w	r0, #0
   261c4:	4a08      	ldr	r2, [pc, #32]	; (261e8 <dk_buttons_init+0x168>)
   261c6:	f363 0002 	bfi	r0, r3, #0, #3
   261ca:	4b08      	ldr	r3, [pc, #32]	; (261ec <dk_buttons_init+0x16c>)
   261cc:	f36f 00c5 	bfc	r0, #3, #3
   261d0:	1a9b      	subs	r3, r3, r2
   261d2:	08db      	lsrs	r3, r3, #3
   261d4:	f363 108f 	bfi	r0, r3, #6, #10
   261d8:	4910      	ldr	r1, [pc, #64]	; (2621c <dk_buttons_init+0x19c>)
   261da:	e787      	b.n	260ec <dk_buttons_init+0x6c>
   261dc:	20023d40 	.word	0x20023d40
   261e0:	0004d32a 	.word	0x0004d32a
   261e4:	20023d3c 	.word	0x20023d3c
   261e8:	0004a688 	.word	0x0004a688
   261ec:	0004a700 	.word	0x0004a700
   261f0:	0004f303 	.word	0x0004f303
   261f4:	0004f29d 	.word	0x0004f29d
   261f8:	20023d64 	.word	0x20023d64
   261fc:	00025da1 	.word	0x00025da1
   26200:	0004f2ef 	.word	0x0004f2ef
   26204:	0004f2d4 	.word	0x0004f2d4
   26208:	00025ea5 	.word	0x00025ea5
   2620c:	20023d44 	.word	0x20023d44
   26210:	2002a705 	.word	0x2002a705
   26214:	2002a5c0 	.word	0x2002a5c0
   26218:	0004f268 	.word	0x0004f268
   2621c:	0004f2ba 	.word	0x0004f2ba

00026220 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   26220:	4b0a      	ldr	r3, [pc, #40]	; (2624c <find_node+0x2c>)
{
   26222:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   26224:	681b      	ldr	r3, [r3, #0]
{
   26226:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   26228:	b143      	cbz	r3, 2623c <find_node+0x1c>
	return node->next;
   2622a:	2400      	movs	r4, #0
   2622c:	6818      	ldr	r0, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   2622e:	685e      	ldr	r6, [r3, #4]
   26230:	428e      	cmp	r6, r1
   26232:	d105      	bne.n	26240 <find_node+0x20>
   26234:	689e      	ldr	r6, [r3, #8]
   26236:	4296      	cmp	r6, r2
   26238:	d102      	bne.n	26240 <find_node+0x20>
			*prev_out = prev;
   2623a:	602c      	str	r4, [r5, #0]
			return curr;
		}
		prev = curr;
	}
	return NULL;
   2623c:	4618      	mov	r0, r3
}
   2623e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   26240:	2800      	cmp	r0, #0
   26242:	d0fc      	beq.n	2623e <find_node+0x1e>
   26244:	461c      	mov	r4, r3
   26246:	4603      	mov	r3, r0
   26248:	6800      	ldr	r0, [r0, #0]
   2624a:	e7f0      	b.n	2622e <find_node+0xe>
   2624c:	20023d80 	.word	0x20023d80

00026250 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   26250:	b510      	push	{r4, lr}
	list->head = NULL;
   26252:	2400      	movs	r4, #0
   26254:	4b03      	ldr	r3, [pc, #12]	; (26264 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   26256:	4804      	ldr	r0, [pc, #16]	; (26268 <module_init+0x18>)
	list->tail = NULL;
   26258:	e9c3 4400 	strd	r4, r4, [r3]
   2625c:	f005 fdac 	bl	2bdb8 <at_cmd_set_notification_handler>
	return 0;
}
   26260:	4620      	mov	r0, r4
   26262:	bd10      	pop	{r4, pc}
   26264:	20023d80 	.word	0x20023d80
   26268:	0002626d 	.word	0x0002626d

0002626c <notif_dispatch>:
{
   2626c:	b538      	push	{r3, r4, r5, lr}
   2626e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   26270:	f04f 31ff 	mov.w	r1, #4294967295
   26274:	4809      	ldr	r0, [pc, #36]	; (2629c <notif_dispatch+0x30>)
   26276:	f017 fa3f 	bl	3d6f8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2627a:	4b09      	ldr	r3, [pc, #36]	; (262a0 <notif_dispatch+0x34>)
   2627c:	681b      	ldr	r3, [r3, #0]
   2627e:	b143      	cbz	r3, 26292 <notif_dispatch+0x26>
	return node->next;
   26280:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   26282:	689a      	ldr	r2, [r3, #8]
   26284:	4629      	mov	r1, r5
   26286:	6858      	ldr	r0, [r3, #4]
   26288:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2628a:	b114      	cbz	r4, 26292 <notif_dispatch+0x26>
   2628c:	4623      	mov	r3, r4
   2628e:	6824      	ldr	r4, [r4, #0]
   26290:	e7f7      	b.n	26282 <notif_dispatch+0x16>
	z_impl_k_mutex_unlock(mutex);
   26292:	4802      	ldr	r0, [pc, #8]	; (2629c <notif_dispatch+0x30>)
}
   26294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26298:	f017 bb08 	b.w	3d8ac <z_impl_k_mutex_unlock>
   2629c:	20032530 	.word	0x20032530
   262a0:	20023d80 	.word	0x20023d80

000262a4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   262a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   262a6:	4606      	mov	r6, r0
	if (handler == NULL) {
   262a8:	460d      	mov	r5, r1
   262aa:	b361      	cbz	r1, 26306 <at_notif_register_handler+0x62>
	return z_impl_k_mutex_lock(mutex, timeout);
   262ac:	f04f 31ff 	mov.w	r1, #4294967295
   262b0:	4816      	ldr	r0, [pc, #88]	; (2630c <at_notif_register_handler+0x68>)
   262b2:	f017 fa21 	bl	3d6f8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   262b6:	462a      	mov	r2, r5
   262b8:	4631      	mov	r1, r6
   262ba:	a801      	add	r0, sp, #4
   262bc:	f7ff ffb0 	bl	26220 <find_node>
   262c0:	4604      	mov	r4, r0
   262c2:	b120      	cbz	r0, 262ce <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   262c4:	4811      	ldr	r0, [pc, #68]	; (2630c <at_notif_register_handler+0x68>)
   262c6:	f017 faf1 	bl	3d8ac <z_impl_k_mutex_unlock>
	return 0;
   262ca:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   262cc:	e009      	b.n	262e2 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   262ce:	200c      	movs	r0, #12
   262d0:	f017 f8aa 	bl	3d428 <k_malloc>
   262d4:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   262d6:	b930      	cbnz	r0, 262e6 <at_notif_register_handler+0x42>
   262d8:	480c      	ldr	r0, [pc, #48]	; (2630c <at_notif_register_handler+0x68>)
   262da:	f017 fae7 	bl	3d8ac <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   262de:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   262e2:	b002      	add	sp, #8
   262e4:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   262e6:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   262e8:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   262ea:	4a09      	ldr	r2, [pc, #36]	; (26310 <at_notif_register_handler+0x6c>)
   262ec:	6044      	str	r4, [r0, #4]
   262ee:	6084      	str	r4, [r0, #8]
	parent->next = child;
   262f0:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   262f2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   262f4:	e9c3 6501 	strd	r6, r5, [r3, #4]
   262f8:	b911      	cbnz	r1, 26300 <at_notif_register_handler+0x5c>
	list->head = node;
   262fa:	e9c2 3300 	strd	r3, r3, [r2]
   262fe:	e7e1      	b.n	262c4 <at_notif_register_handler+0x20>
	parent->next = child;
   26300:	600b      	str	r3, [r1, #0]
	list->tail = node;
   26302:	6053      	str	r3, [r2, #4]
   26304:	e7de      	b.n	262c4 <at_notif_register_handler+0x20>
		return -EINVAL;
   26306:	f06f 0015 	mvn.w	r0, #21
   2630a:	e7ea      	b.n	262e2 <at_notif_register_handler+0x3e>
   2630c:	20032530 	.word	0x20032530
   26310:	20023d80 	.word	0x20023d80

00026314 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   26314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26316:	4606      	mov	r6, r0
	if (handler == NULL) {
   26318:	460d      	mov	r5, r1
   2631a:	b369      	cbz	r1, 26378 <at_notif_deregister_handler+0x64>
	struct notif_handler *curr, *prev = NULL;
   2631c:	2300      	movs	r3, #0
   2631e:	ac02      	add	r4, sp, #8
   26320:	f844 3d04 	str.w	r3, [r4, #-4]!
	return z_impl_k_mutex_lock(mutex, timeout);
   26324:	f04f 31ff 	mov.w	r1, #4294967295
   26328:	4815      	ldr	r0, [pc, #84]	; (26380 <at_notif_deregister_handler+0x6c>)
   2632a:	f017 f9e5 	bl	3d6f8 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2632e:	462a      	mov	r2, r5
   26330:	4631      	mov	r1, r6
   26332:	4620      	mov	r0, r4
   26334:	f7ff ff74 	bl	26220 <find_node>
	if (curr == NULL) {
   26338:	b930      	cbnz	r0, 26348 <at_notif_deregister_handler+0x34>
	z_impl_k_mutex_unlock(mutex);
   2633a:	4811      	ldr	r0, [pc, #68]	; (26380 <at_notif_deregister_handler+0x6c>)
   2633c:	f017 fab6 	bl	3d8ac <z_impl_k_mutex_unlock>
		return -ENXIO;
   26340:	f06f 0005 	mvn.w	r0, #5
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return remove_notif_handler(context, handler);
}
   26344:	b002      	add	sp, #8
   26346:	bd70      	pop	{r4, r5, r6, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   26348:	9a01      	ldr	r2, [sp, #4]
   2634a:	6801      	ldr	r1, [r0, #0]
   2634c:	4b0d      	ldr	r3, [pc, #52]	; (26384 <at_notif_deregister_handler+0x70>)
Z_GENLIST_REMOVE(slist, snode)
   2634e:	b96a      	cbnz	r2, 2636c <at_notif_deregister_handler+0x58>
   26350:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   26352:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26354:	4290      	cmp	r0, r2
   26356:	d100      	bne.n	2635a <at_notif_deregister_handler+0x46>
	list->tail = node;
   26358:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2635a:	2400      	movs	r4, #0
   2635c:	6004      	str	r4, [r0, #0]
	k_free(curr);
   2635e:	f023 fe40 	bl	49fe2 <k_free>
   26362:	4807      	ldr	r0, [pc, #28]	; (26380 <at_notif_deregister_handler+0x6c>)
   26364:	f017 faa2 	bl	3d8ac <z_impl_k_mutex_unlock>
	return 0;
   26368:	4620      	mov	r0, r4
	return remove_notif_handler(context, handler);
   2636a:	e7eb      	b.n	26344 <at_notif_deregister_handler+0x30>
   2636c:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2636e:	6859      	ldr	r1, [r3, #4]
   26370:	4288      	cmp	r0, r1
	list->tail = node;
   26372:	bf08      	it	eq
   26374:	605a      	streq	r2, [r3, #4]
   26376:	e7f0      	b.n	2635a <at_notif_deregister_handler+0x46>
		return -EINVAL;
   26378:	f06f 0015 	mvn.w	r0, #21
   2637c:	e7e2      	b.n	26344 <at_notif_deregister_handler+0x30>
   2637e:	bf00      	nop
   26380:	20032530 	.word	0x20032530
   26384:	20023d80 	.word	0x20023d80

00026388 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
   26388:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2638a:	4d05      	ldr	r5, [pc, #20]	; (263a0 <write_uart_string+0x18>)
   2638c:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2638e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   26392:	b901      	cbnz	r1, 26396 <write_uart_string+0xe>
	}
}
   26394:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   26396:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   26398:	6843      	ldr	r3, [r0, #4]
   2639a:	685b      	ldr	r3, [r3, #4]
   2639c:	4798      	blx	r3
   2639e:	e7f6      	b.n	2638e <write_uart_string+0x6>
   263a0:	20023e5c 	.word	0x20023e5c

000263a4 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   263a4:	b530      	push	{r4, r5, lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   263a6:	4920      	ldr	r1, [pc, #128]	; (26428 <cmd_send+0x84>)
{
   263a8:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   263aa:	f10d 030b 	add.w	r3, sp, #11
   263ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   263b2:	4608      	mov	r0, r1
   263b4:	f005 fcde 	bl	2bd74 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   263b8:	1e04      	subs	r4, r0, #0
   263ba:	da12      	bge.n	263e2 <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   263bc:	2501      	movs	r5, #1
   263be:	f04f 0000 	mov.w	r0, #0
   263c2:	4a1a      	ldr	r2, [pc, #104]	; (2642c <cmd_send+0x88>)
   263c4:	4b1a      	ldr	r3, [pc, #104]	; (26430 <cmd_send+0x8c>)
   263c6:	f365 0002 	bfi	r0, r5, #0, #3
   263ca:	1a9b      	subs	r3, r3, r2
   263cc:	08db      	lsrs	r3, r3, #3
   263ce:	f36f 00c5 	bfc	r0, #3, #3
   263d2:	f363 108f 	bfi	r0, r3, #6, #10
   263d6:	4622      	mov	r2, r4
   263d8:	4916      	ldr	r1, [pc, #88]	; (26434 <cmd_send+0x90>)
   263da:	f021 fa93 	bl	47904 <log_string_sync>
		state = AT_CMD_ERROR;
   263de:	f88d 500b 	strb.w	r5, [sp, #11]
	}

	/* Handle the various error responses from modem */
	switch (state) {
   263e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   263e6:	2b03      	cmp	r3, #3
   263e8:	d809      	bhi.n	263fe <cmd_send+0x5a>
   263ea:	e8df f003 	tbb	[pc, r3]
   263ee:	0e02      	.short	0x0e02
   263f0:	1910      	.short	0x1910
	case AT_CMD_OK:
		write_uart_string(at_buf);
   263f2:	480d      	ldr	r0, [pc, #52]	; (26428 <cmd_send+0x84>)
   263f4:	f7ff ffc8 	bl	26388 <write_uart_string>
		write_uart_string(OK_STR);
   263f8:	480f      	ldr	r0, [pc, #60]	; (26438 <cmd_send+0x94>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   263fa:	f7ff ffc5 	bl	26388 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   263fe:	4b0f      	ldr	r3, [pc, #60]	; (2643c <cmd_send+0x98>)
   26400:	6818      	ldr	r0, [r3, #0]
		z_arch_syscall_invoke1(*(u32_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   26402:	f023 fa27 	bl	49854 <z_impl_uart_irq_rx_enable>
}
   26406:	b009      	add	sp, #36	; 0x24
   26408:	bd30      	pop	{r4, r5, pc}
		write_uart_string(ERROR_STR);
   2640a:	480d      	ldr	r0, [pc, #52]	; (26440 <cmd_send+0x9c>)
   2640c:	e7f5      	b.n	263fa <cmd_send+0x56>
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2640e:	4b0d      	ldr	r3, [pc, #52]	; (26444 <cmd_send+0xa0>)
   26410:	9400      	str	r4, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   26412:	2213      	movs	r2, #19
   26414:	2100      	movs	r1, #0
   26416:	a803      	add	r0, sp, #12
   26418:	f01b f87c 	bl	41514 <__sprintf_chk>
		write_uart_string(str);
   2641c:	a803      	add	r0, sp, #12
   2641e:	e7ec      	b.n	263fa <cmd_send+0x56>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   26420:	9400      	str	r4, [sp, #0]
   26422:	4b09      	ldr	r3, [pc, #36]	; (26448 <cmd_send+0xa4>)
   26424:	e7f5      	b.n	26412 <cmd_send+0x6e>
   26426:	bf00      	nop
   26428:	2002a706 	.word	0x2002a706
   2642c:	0004a688 	.word	0x0004a688
   26430:	0004a6a0 	.word	0x0004a6a0
   26434:	0004f3d7 	.word	0x0004f3d7
   26438:	0004f3fd 	.word	0x0004f3fd
   2643c:	20023e5c 	.word	0x20023e5c
   26440:	0004f402 	.word	0x0004f402
   26444:	0004f40a 	.word	0x0004f40a
   26448:	0004f41b 	.word	0x0004f41b

0002644c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   2644c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26450:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   26452:	6843      	ldr	r3, [r0, #4]
   26454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26456:	b103      	cbz	r3, 2645a <isr+0xe>
		return api->irq_update(dev);
   26458:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2645a:	686b      	ldr	r3, [r5, #4]
   2645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2645e:	b1c3      	cbz	r3, 26492 <isr+0x46>
		return api->irq_rx_ready(dev);
   26460:	4628      	mov	r0, r5
   26462:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   26464:	b1a8      	cbz	r0, 26492 <isr+0x46>
   26466:	f8df 813c 	ldr.w	r8, [pc, #316]	; 265a4 <isr+0x158>
   2646a:	4e43      	ldr	r6, [pc, #268]	; (26578 <isr+0x12c>)
   2646c:	4647      	mov	r7, r8
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2646e:	4b43      	ldr	r3, [pc, #268]	; (2657c <isr+0x130>)
		if (at_cmd_len > 0) {
   26470:	4c43      	ldr	r4, [pc, #268]	; (26580 <isr+0x134>)
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   26472:	1af6      	subs	r6, r6, r3
   26474:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   26478:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   2647c:	07db      	lsls	r3, r3, #31
   2647e:	d408      	bmi.n	26492 <isr+0x46>
	if (api->fifo_read) {
   26480:	686b      	ldr	r3, [r5, #4]
   26482:	699b      	ldr	r3, [r3, #24]
   26484:	b12b      	cbz	r3, 26492 <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   26486:	2201      	movs	r2, #1
   26488:	f10d 0107 	add.w	r1, sp, #7
   2648c:	4628      	mov	r0, r5
   2648e:	4798      	blx	r3
   26490:	b910      	cbnz	r0, 26498 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   26492:	b003      	add	sp, #12
   26494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uart_rx_handler(character);
   26498:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   2649c:	2a08      	cmp	r2, #8
   2649e:	d001      	beq.n	264a4 <isr+0x58>
   264a0:	2a7f      	cmp	r2, #127	; 0x7f
   264a2:	d105      	bne.n	264b0 <isr+0x64>
		if (at_cmd_len > 0) {
   264a4:	6823      	ldr	r3, [r4, #0]
   264a6:	2b00      	cmp	r3, #0
   264a8:	d0e6      	beq.n	26478 <isr+0x2c>
			at_cmd_len--;
   264aa:	3b01      	subs	r3, #1
   264ac:	6023      	str	r3, [r4, #0]
   264ae:	e7e3      	b.n	26478 <isr+0x2c>
	if (!inside_quotes) {
   264b0:	4934      	ldr	r1, [pc, #208]	; (26584 <isr+0x138>)
   264b2:	780b      	ldrb	r3, [r1, #0]
   264b4:	2b00      	cmp	r3, #0
   264b6:	d140      	bne.n	2653a <isr+0xee>
		switch (character) {
   264b8:	2a0a      	cmp	r2, #10
   264ba:	d031      	beq.n	26520 <isr+0xd4>
   264bc:	2a0d      	cmp	r2, #13
   264be:	d025      	beq.n	2650c <isr+0xc0>
   264c0:	2a00      	cmp	r2, #0
   264c2:	d138      	bne.n	26536 <isr+0xea>
			if (term_mode == MODE_NULL_TERM) {
   264c4:	4b30      	ldr	r3, [pc, #192]	; (26588 <isr+0x13c>)
   264c6:	781b      	ldrb	r3, [r3, #0]
   264c8:	2b00      	cmp	r3, #0
   264ca:	d1d5      	bne.n	26478 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   264cc:	2300      	movs	r3, #0
   264ce:	6822      	ldr	r2, [r4, #0]
   264d0:	482e      	ldr	r0, [pc, #184]	; (2658c <isr+0x140>)
	inside_quotes = false;
   264d2:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   264d4:	5483      	strb	r3, [r0, r2]
	cr_state = false;
   264d6:	4a2e      	ldr	r2, [pc, #184]	; (26590 <isr+0x144>)
	at_cmd_len = 0;
   264d8:	6023      	str	r3, [r4, #0]
	cr_state = false;
   264da:	7013      	strb	r3, [r2, #0]
	if (at_buf[0]) {
   264dc:	7803      	ldrb	r3, [r0, #0]
   264de:	2b00      	cmp	r3, #0
   264e0:	d0ca      	beq.n	26478 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   264e2:	4b2c      	ldr	r3, [pc, #176]	; (26594 <isr+0x148>)
   264e4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   264e6:	6843      	ldr	r3, [r0, #4]
   264e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   264ea:	b103      	cbz	r3, 264ee <isr+0xa2>
		api->irq_rx_disable(dev);
   264ec:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   264ee:	e8d7 3fef 	ldaex	r3, [r7]
   264f2:	f043 0201 	orr.w	r2, r3, #1
   264f6:	e8c7 2fe1 	stlex	r1, r2, [r7]
   264fa:	2900      	cmp	r1, #0
   264fc:	d1f7      	bne.n	264ee <isr+0xa2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   264fe:	07da      	lsls	r2, r3, #31
   26500:	d4ba      	bmi.n	26478 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   26502:	4925      	ldr	r1, [pc, #148]	; (26598 <isr+0x14c>)
   26504:	4825      	ldr	r0, [pc, #148]	; (2659c <isr+0x150>)
   26506:	f023 fda1 	bl	4a04c <k_queue_append>
   2650a:	e7b5      	b.n	26478 <isr+0x2c>
			if (term_mode == MODE_CR) {
   2650c:	4b1e      	ldr	r3, [pc, #120]	; (26588 <isr+0x13c>)
   2650e:	781b      	ldrb	r3, [r3, #0]
   26510:	2b01      	cmp	r3, #1
   26512:	d0db      	beq.n	264cc <isr+0x80>
			if (term_mode == MODE_CR_LF) {
   26514:	2b03      	cmp	r3, #3
   26516:	d1af      	bne.n	26478 <isr+0x2c>
				cr_state = true;
   26518:	2201      	movs	r2, #1
   2651a:	4b1d      	ldr	r3, [pc, #116]	; (26590 <isr+0x144>)
   2651c:	701a      	strb	r2, [r3, #0]
   2651e:	e7ab      	b.n	26478 <isr+0x2c>
			if (term_mode == MODE_LF) {
   26520:	4b19      	ldr	r3, [pc, #100]	; (26588 <isr+0x13c>)
   26522:	781b      	ldrb	r3, [r3, #0]
   26524:	2b02      	cmp	r3, #2
   26526:	d0d1      	beq.n	264cc <isr+0x80>
			if (term_mode == MODE_CR_LF && cr_state) {
   26528:	2b03      	cmp	r3, #3
   2652a:	d1a5      	bne.n	26478 <isr+0x2c>
   2652c:	4b18      	ldr	r3, [pc, #96]	; (26590 <isr+0x144>)
   2652e:	781b      	ldrb	r3, [r3, #0]
   26530:	2b00      	cmp	r3, #0
   26532:	d1cb      	bne.n	264cc <isr+0x80>
   26534:	e7a0      	b.n	26478 <isr+0x2c>
		cr_state = false;
   26536:	4816      	ldr	r0, [pc, #88]	; (26590 <isr+0x144>)
   26538:	7003      	strb	r3, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2653a:	f8d4 c000 	ldr.w	ip, [r4]
   2653e:	f10c 0001 	add.w	r0, ip, #1
   26542:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   26546:	d30b      	bcc.n	26560 <isr+0x114>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   26548:	2301      	movs	r3, #1
   2654a:	f363 0902 	bfi	r9, r3, #0, #3
   2654e:	f36f 09c5 	bfc	r9, #3, #3
   26552:	f366 198f 	bfi	r9, r6, #6, #10
   26556:	4912      	ldr	r1, [pc, #72]	; (265a0 <isr+0x154>)
   26558:	4648      	mov	r0, r9
   2655a:	f021 f9d3 	bl	47904 <log_string_sync>
   2655e:	e78b      	b.n	26478 <isr+0x2c>
	at_buf[at_cmd_len] = character;
   26560:	f8df e028 	ldr.w	lr, [pc, #40]	; 2658c <isr+0x140>
	if (character == '"') {
   26564:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   26566:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   2656a:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   2656c:	d184      	bne.n	26478 <isr+0x2c>
	if (!inside_quotes) {
   2656e:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   26572:	700b      	strb	r3, [r1, #0]
   26574:	e780      	b.n	26478 <isr+0x2c>
   26576:	bf00      	nop
   26578:	0004a6a0 	.word	0x0004a6a0
   2657c:	0004a688 	.word	0x0004a688
   26580:	20023d88 	.word	0x20023d88
   26584:	2002b707 	.word	0x2002b707
   26588:	2002b708 	.word	0x2002b708
   2658c:	2002a706 	.word	0x2002a706
   26590:	2002b706 	.word	0x2002b706
   26594:	20023e5c 	.word	0x20023e5c
   26598:	20023e50 	.word	0x20023e50
   2659c:	20023d8c 	.word	0x20023d8c
   265a0:	0004f42c 	.word	0x0004f42c
   265a4:	20023e58 	.word	0x20023e58

000265a8 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(struct device *arg)
{
   265a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   265ac:	f04f 0801 	mov.w	r8, #1
   265b0:	4b45      	ldr	r3, [pc, #276]	; (266c8 <at_host_init+0x120>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   265b2:	4946      	ldr	r1, [pc, #280]	; (266cc <at_host_init+0x124>)
   265b4:	2000      	movs	r0, #0
		term_mode = mode;
   265b6:	f883 8000 	strb.w	r8, [r3]
	err = at_notif_register_handler(NULL, response_handler);
   265ba:	f7ff fe73 	bl	262a4 <at_notif_register_handler>
   265be:	4c44      	ldr	r4, [pc, #272]	; (266d0 <at_host_init+0x128>)
   265c0:	4b44      	ldr	r3, [pc, #272]	; (266d4 <at_host_init+0x12c>)
	if (err != 0) {
   265c2:	4606      	mov	r6, r0
   265c4:	1ae4      	subs	r4, r4, r3
   265c6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   265ca:	b178      	cbz	r0, 265ec <at_host_init+0x44>
		LOG_ERR("Can't register handler err=%d", err);
   265cc:	f04f 0000 	mov.w	r0, #0
   265d0:	f368 0002 	bfi	r0, r8, #0, #3
   265d4:	f36f 00c5 	bfc	r0, #3, #3
   265d8:	f364 108f 	bfi	r0, r4, #6, #10
   265dc:	4632      	mov	r2, r6
   265de:	493e      	ldr	r1, [pc, #248]	; (266d8 <at_host_init+0x130>)
   265e0:	f021 f990 	bl	47904 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   265e4:	4630      	mov	r0, r6
   265e6:	b002      	add	sp, #8
   265e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   265ec:	483b      	ldr	r0, [pc, #236]	; (266dc <at_host_init+0x134>)
   265ee:	f016 fb7b 	bl	3cce8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   265f2:	4d3b      	ldr	r5, [pc, #236]	; (266e0 <at_host_init+0x138>)
   265f4:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   265f6:	b9e8      	cbnz	r0, 26634 <at_host_init+0x8c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   265f8:	f04f 0300 	mov.w	r3, #0
   265fc:	f368 0302 	bfi	r3, r8, #0, #3
   26600:	f360 03c5 	bfi	r3, r0, #3, #3
   26604:	f364 138f 	bfi	r3, r4, #6, #10
   26608:	4a34      	ldr	r2, [pc, #208]	; (266dc <at_host_init+0x134>)
   2660a:	4936      	ldr	r1, [pc, #216]	; (266e4 <at_host_init+0x13c>)
   2660c:	4618      	mov	r0, r3
   2660e:	f021 f979 	bl	47904 <log_string_sync>
		return -EINVAL;
   26612:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   26616:	2301      	movs	r3, #1
   26618:	f04f 0000 	mov.w	r0, #0
   2661c:	f363 0002 	bfi	r0, r3, #0, #3
   26620:	f36f 00c5 	bfc	r0, #3, #3
   26624:	f364 108f 	bfi	r0, r4, #6, #10
   26628:	492f      	ldr	r1, [pc, #188]	; (266e8 <at_host_init+0x140>)
   2662a:	f021 f96b 	bl	47904 <log_string_sync>
		return -EFAULT;
   2662e:	f06f 060d 	mvn.w	r6, #13
   26632:	e7d7      	b.n	265e4 <at_host_init+0x3c>
	return z_impl_k_uptime_get();
   26634:	f023 fde8 	bl	4a208 <z_impl_k_uptime_get>
   26638:	4680      	mov	r8, r0
			LOG_ERR("UART check failed: %d. "
   2663a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 26700 <at_host_init+0x158>
		err = uart_err_check(uart_dev);
   2663e:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   26640:	6843      	ldr	r3, [r0, #4]
   26642:	689b      	ldr	r3, [r3, #8]
   26644:	b333      	cbz	r3, 26694 <at_host_init+0xec>
		return api->err_check(dev);
   26646:	4798      	blx	r3
		if (err) {
   26648:	4682      	mov	sl, r0
   2664a:	b318      	cbz	r0, 26694 <at_host_init+0xec>
   2664c:	f023 fddc 	bl	4a208 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   26650:	eba0 0008 	sub.w	r0, r0, r8
   26654:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   26658:	d819      	bhi.n	2668e <at_host_init+0xe6>
			LOG_ERR("UART check failed: %d. "
   2665a:	2301      	movs	r3, #1
   2665c:	f363 0702 	bfi	r7, r3, #0, #3
   26660:	f36f 07c5 	bfc	r7, #3, #3
   26664:	f364 178f 	bfi	r7, r4, #6, #10
   26668:	4652      	mov	r2, sl
   2666a:	4649      	mov	r1, r9
   2666c:	4638      	mov	r0, r7
   2666e:	f021 f949 	bl	47904 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   26672:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   26674:	6843      	ldr	r3, [r0, #4]
   26676:	699b      	ldr	r3, [r3, #24]
   26678:	b12b      	cbz	r3, 26686 <at_host_init+0xde>
		return api->fifo_read(dev, rx_data, size);
   2667a:	2201      	movs	r2, #1
   2667c:	f10d 0107 	add.w	r1, sp, #7
   26680:	4798      	blx	r3
   26682:	2800      	cmp	r0, #0
   26684:	d1f5      	bne.n	26672 <at_host_init+0xca>
	return z_impl_k_sleep(ms);
   26686:	200a      	movs	r0, #10
   26688:	f023 fd2d 	bl	4a0e6 <z_impl_k_sleep>
   2668c:	e7d7      	b.n	2663e <at_host_init+0x96>
   2668e:	f06f 0204 	mvn.w	r2, #4
   26692:	e7c0      	b.n	26616 <at_host_init+0x6e>
	uart_irq_callback_set(uart_dev, isr);
   26694:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   26696:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   26698:	b123      	cbz	r3, 266a4 <at_host_init+0xfc>
   2669a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2669c:	b113      	cbz	r3, 266a4 <at_host_init+0xfc>
		api->irq_callback_set(dev, cb, user_data);
   2669e:	4913      	ldr	r1, [pc, #76]	; (266ec <at_host_init+0x144>)
   266a0:	4610      	mov	r0, r2
   266a2:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   266a4:	2200      	movs	r2, #0
   266a6:	4b12      	ldr	r3, [pc, #72]	; (266f0 <at_host_init+0x148>)
   266a8:	4912      	ldr	r1, [pc, #72]	; (266f4 <at_host_init+0x14c>)
   266aa:	601a      	str	r2, [r3, #0]
   266ac:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   266b0:	4811      	ldr	r0, [pc, #68]	; (266f8 <at_host_init+0x150>)
   266b2:	230a      	movs	r3, #10
   266b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   266b8:	4910      	ldr	r1, [pc, #64]	; (266fc <at_host_init+0x154>)
   266ba:	f018 ff11 	bl	3f4e0 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   266be:	6828      	ldr	r0, [r5, #0]
   266c0:	f023 f8c8 	bl	49854 <z_impl_uart_irq_rx_enable>
   266c4:	e78e      	b.n	265e4 <at_host_init+0x3c>
   266c6:	bf00      	nop
   266c8:	2002b708 	.word	0x2002b708
   266cc:	0004985f 	.word	0x0004985f
   266d0:	0004a6a0 	.word	0x0004a6a0
   266d4:	0004a688 	.word	0x0004a688
   266d8:	0004f352 	.word	0x0004f352
   266dc:	0004db76 	.word	0x0004db76
   266e0:	20023e5c 	.word	0x20023e5c
   266e4:	0004f370 	.word	0x0004f370
   266e8:	0004f3b5 	.word	0x0004f3b5
   266ec:	0002644d 	.word	0x0002644d
   266f0:	20023e50 	.word	0x20023e50
   266f4:	000263a5 	.word	0x000263a5
   266f8:	20023d8c 	.word	0x20023d8c
   266fc:	2002c368 	.word	0x2002c368
   26700:	0004f380 	.word	0x0004f380

00026704 <at_parse_process_element>:
}

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   26704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const char *tmpstr = *str;
   26708:	6804      	ldr	r4, [r0, #0]
{
   2670a:	b0a2      	sub	sp, #136	; 0x88
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2670c:	7823      	ldrb	r3, [r4, #0]
   2670e:	4680      	mov	r8, r0
   26710:	460f      	mov	r7, r1
   26712:	4616      	mov	r6, r2
   26714:	2b00      	cmp	r3, #0
   26716:	f000 80ab 	beq.w	26870 <at_parse_process_element+0x16c>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2671a:	4b57      	ldr	r3, [pc, #348]	; (26878 <at_parse_process_element+0x174>)
   2671c:	781d      	ldrb	r5, [r3, #0]
   2671e:	2d05      	cmp	r5, #5
   26720:	d123      	bne.n	2676a <at_parse_process_element+0x66>
		const char *start_ptr = tmpstr++;
   26722:	f104 0901 	add.w	r9, r4, #1

		while (is_valid_notification_char(*tmpstr)) {
   26726:	46ca      	mov	sl, r9
   26728:	f81a 5b01 	ldrb.w	r5, [sl], #1
	chr = toupper(chr);
   2672c:	f01a f91c 	bl	40968 <__locale_ctype_ptr>
   26730:	462b      	mov	r3, r5
   26732:	4428      	add	r0, r5
   26734:	7842      	ldrb	r2, [r0, #1]
   26736:	f002 0203 	and.w	r2, r2, #3
   2673a:	2a02      	cmp	r2, #2
   2673c:	bf08      	it	eq
   2673e:	f1a5 0320 	subeq.w	r3, r5, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   26742:	3b41      	subs	r3, #65	; 0x41
   26744:	b2db      	uxtb	r3, r3
   26746:	2b19      	cmp	r3, #25
   26748:	d90d      	bls.n	26766 <at_parse_process_element+0x62>
			tmpstr++;
		}

		at_params_string_put(list,
   2674a:	eba9 0304 	sub.w	r3, r9, r4
   2674e:	4622      	mov	r2, r4
   26750:	4639      	mov	r1, r7
   26752:	4630      	mov	r0, r6
   26754:	f023 f8e5 	bl	49922 <at_params_string_put>
   26758:	464c      	mov	r4, r9
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2675a:	2000      	movs	r0, #0
	*str = tmpstr;
   2675c:	f8c8 4000 	str.w	r4, [r8]
}
   26760:	b022      	add	sp, #136	; 0x88
   26762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26766:	46d1      	mov	r9, sl
   26768:	e7dd      	b.n	26726 <at_parse_process_element+0x22>
	} else if (state == OPTIONAL) {
   2676a:	2d06      	cmp	r5, #6
   2676c:	d103      	bne.n	26776 <at_parse_process_element+0x72>
		at_params_empty_put(list, index);
   2676e:	4610      	mov	r0, r2
   26770:	f023 f8ae 	bl	498d0 <at_params_empty_put>
   26774:	e7f1      	b.n	2675a <at_parse_process_element+0x56>
	} else if (state == STRING) {
   26776:	2d02      	cmp	r5, #2
   26778:	d117      	bne.n	267aa <at_parse_process_element+0xa6>
   2677a:	4623      	mov	r3, r4
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2677c:	f242 4101 	movw	r1, #9217	; 0x2401
		while (!is_dblquote(*tmpstr) &&
   26780:	461d      	mov	r5, r3
   26782:	f815 2b01 	ldrb.w	r2, [r5], #1
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   26786:	2a22      	cmp	r2, #34	; 0x22
   26788:	d005      	beq.n	26796 <at_parse_process_element+0x92>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2678a:	2a0d      	cmp	r2, #13
   2678c:	d80b      	bhi.n	267a6 <at_parse_process_element+0xa2>
   2678e:	fa21 f202 	lsr.w	r2, r1, r2
   26792:	07d2      	lsls	r2, r2, #31
   26794:	d507      	bpl.n	267a6 <at_parse_process_element+0xa2>
		at_params_string_put(list,
   26796:	1b1b      	subs	r3, r3, r4
		at_params_string_put(list,
   26798:	4622      	mov	r2, r4
   2679a:	4639      	mov	r1, r7
   2679c:	4630      	mov	r0, r6
   2679e:	f023 f8c0 	bl	49922 <at_params_string_put>
   267a2:	462c      	mov	r4, r5
   267a4:	e7d9      	b.n	2675a <at_parse_process_element+0x56>
	if ((chr >= 'A') && (chr <= 'Z')) {
   267a6:	462b      	mov	r3, r5
   267a8:	e7ea      	b.n	26780 <at_parse_process_element+0x7c>
	} else if (state == ARRAY) {
   267aa:	2d01      	cmp	r5, #1
   267ac:	d139      	bne.n	26822 <at_parse_process_element+0x11e>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   267ae:	4620      	mov	r0, r4
   267b0:	220a      	movs	r2, #10
   267b2:	a901      	add	r1, sp, #4
   267b4:	f01b fcca 	bl	4214c <strtoul>
		tmpstr = next;
   267b8:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   267ba:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   267bc:	46a1      	mov	r9, r4
   267be:	f819 3b01 	ldrb.w	r3, [r9], #1
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   267c2:	2b29      	cmp	r3, #41	; 0x29
   267c4:	d02b      	beq.n	2681e <at_parse_process_element+0x11a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   267c6:	b353      	cbz	r3, 2681e <at_parse_process_element+0x11a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   267c8:	2b2c      	cmp	r3, #44	; 0x2c
   267ca:	d003      	beq.n	267d4 <at_parse_process_element+0xd0>
   267cc:	2b3a      	cmp	r3, #58	; 0x3a
   267ce:	d001      	beq.n	267d4 <at_parse_process_element+0xd0>
				tmpstr++;
   267d0:	464c      	mov	r4, r9
   267d2:	e7f3      	b.n	267bc <at_parse_process_element+0xb8>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   267d4:	220a      	movs	r2, #10
   267d6:	a901      	add	r1, sp, #4
   267d8:	4648      	mov	r0, r9
   267da:	f01b fcb7 	bl	4214c <strtoul>
				tmparray[i++] =
   267de:	ab22      	add	r3, sp, #136	; 0x88
   267e0:	f105 0a01 	add.w	sl, r5, #1
   267e4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   267e8:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   267ec:	4648      	mov	r0, r9
   267ee:	f01b f819 	bl	41824 <strlen>
   267f2:	4604      	mov	r4, r0
   267f4:	9801      	ldr	r0, [sp, #4]
   267f6:	f01b f815 	bl	41824 <strlen>
   267fa:	4284      	cmp	r4, r0
   267fc:	d005      	beq.n	2680a <at_parse_process_element+0x106>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   267fe:	f1ba 0f20 	cmp.w	sl, #32
					tmpstr = next;
   26802:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26804:	d002      	beq.n	2680c <at_parse_process_element+0x108>
   26806:	4655      	mov	r5, sl
   26808:	e7d8      	b.n	267bc <at_parse_process_element+0xb8>
				tmparray[i++] =
   2680a:	464c      	mov	r4, r9
		at_params_array_put(list, index,
   2680c:	ea4f 038a 	mov.w	r3, sl, lsl #2
   26810:	aa02      	add	r2, sp, #8
   26812:	4639      	mov	r1, r7
   26814:	4630      	mov	r0, r6
   26816:	f023 f8aa 	bl	4996e <at_params_array_put>
		tmpstr++;
   2681a:	3401      	adds	r4, #1
   2681c:	e79d      	b.n	2675a <at_parse_process_element+0x56>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2681e:	46aa      	mov	sl, r5
   26820:	e7f4      	b.n	2680c <at_parse_process_element+0x108>
	} else if (state == NUMBER) {
   26822:	2d03      	cmp	r5, #3
   26824:	d114      	bne.n	26850 <at_parse_process_element+0x14c>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   26826:	220a      	movs	r2, #10
   26828:	4620      	mov	r0, r4
   2682a:	a902      	add	r1, sp, #8
   2682c:	f01b fc8e 	bl	4214c <strtoul>
		if (value <= USHRT_MAX) {
   26830:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   26834:	4602      	mov	r2, r0
		tmpstr = next;
   26836:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   26838:	da05      	bge.n	26846 <at_parse_process_element+0x142>
			at_params_short_put(list, index, (u16_t)value);
   2683a:	b282      	uxth	r2, r0
   2683c:	4639      	mov	r1, r7
   2683e:	4630      	mov	r0, r6
   26840:	f023 f831 	bl	498a6 <at_params_short_put>
   26844:	e789      	b.n	2675a <at_parse_process_element+0x56>
			at_params_int_put(list, index, value);
   26846:	4639      	mov	r1, r7
   26848:	4630      	mov	r0, r6
   2684a:	f023 f855 	bl	498f8 <at_params_int_put>
   2684e:	e784      	b.n	2675a <at_parse_process_element+0x56>
	} else if (state == SMS_PDU) {
   26850:	2d04      	cmp	r5, #4
   26852:	d182      	bne.n	2675a <at_parse_process_element+0x56>
   26854:	4625      	mov	r5, r4
		while (isxdigit(*tmpstr)) {
   26856:	f01a f887 	bl	40968 <__locale_ctype_ptr>
   2685a:	782b      	ldrb	r3, [r5, #0]
   2685c:	1c6a      	adds	r2, r5, #1
   2685e:	4418      	add	r0, r3
   26860:	7843      	ldrb	r3, [r0, #1]
   26862:	f013 0f44 	tst.w	r3, #68	; 0x44
   26866:	d101      	bne.n	2686c <at_parse_process_element+0x168>
		at_params_string_put(list,
   26868:	1b2b      	subs	r3, r5, r4
   2686a:	e795      	b.n	26798 <at_parse_process_element+0x94>
   2686c:	4615      	mov	r5, r2
   2686e:	e7f2      	b.n	26856 <at_parse_process_element+0x152>
		return -1;
   26870:	f04f 30ff 	mov.w	r0, #4294967295
   26874:	e774      	b.n	26760 <at_parse_process_element+0x5c>
   26876:	bf00      	nop
   26878:	2002b709 	.word	0x2002b709

0002687c <at_parse_detect_type>:
{
   2687c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2687e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) &&
   26880:	2900      	cmp	r1, #0
{
   26882:	4606      	mov	r6, r0
   26884:	7825      	ldrb	r5, [r4, #0]
	if ((index == 0) &&
   26886:	d109      	bne.n	2689c <at_parse_detect_type+0x20>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26888:	2d2b      	cmp	r5, #43	; 0x2b
   2688a:	4b26      	ldr	r3, [pc, #152]	; (26924 <at_parse_detect_type+0xa8>)
   2688c:	d001      	beq.n	26892 <at_parse_detect_type+0x16>
   2688e:	2d25      	cmp	r5, #37	; 0x25
   26890:	d102      	bne.n	26898 <at_parse_detect_type+0x1c>
	state = new_state;
   26892:	2205      	movs	r2, #5
   26894:	701a      	strb	r2, [r3, #0]
   26896:	e017      	b.n	268c8 <at_parse_detect_type+0x4c>
   26898:	2202      	movs	r2, #2
   2689a:	e7fb      	b.n	26894 <at_parse_detect_type+0x18>
	} else if ((index > 0) &&
   2689c:	dd03      	ble.n	268a6 <at_parse_detect_type+0x2a>
   2689e:	2d2b      	cmp	r5, #43	; 0x2b
   268a0:	d03d      	beq.n	2691e <at_parse_detect_type+0xa2>
   268a2:	2d25      	cmp	r5, #37	; 0x25
   268a4:	d03b      	beq.n	2691e <at_parse_detect_type+0xa2>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
   268a6:	f01a f85f 	bl	40968 <__locale_ctype_ptr>
   268aa:	4428      	add	r0, r5
   268ac:	7843      	ldrb	r3, [r0, #1]
   268ae:	075b      	lsls	r3, r3, #29
   268b0:	d40d      	bmi.n	268ce <at_parse_detect_type+0x52>
   268b2:	2d2d      	cmp	r5, #45	; 0x2d
   268b4:	d00b      	beq.n	268ce <at_parse_detect_type+0x52>
	    (chr == '-') ||
   268b6:	2d2b      	cmp	r5, #43	; 0x2b
   268b8:	d009      	beq.n	268ce <at_parse_detect_type+0x52>
	} else if (is_dblquote(*tmpstr)) {
   268ba:	7823      	ldrb	r3, [r4, #0]
	if (chr == '"') {
   268bc:	2b22      	cmp	r3, #34	; 0x22
   268be:	d109      	bne.n	268d4 <at_parse_detect_type+0x58>
	state = new_state;
   268c0:	2202      	movs	r2, #2
   268c2:	4b18      	ldr	r3, [pc, #96]	; (26924 <at_parse_detect_type+0xa8>)
		tmpstr++;
   268c4:	3401      	adds	r4, #1
	state = new_state;
   268c6:	701a      	strb	r2, [r3, #0]
	return 0;
   268c8:	2000      	movs	r0, #0
	*str = tmpstr;
   268ca:	6034      	str	r4, [r6, #0]
}
   268cc:	bd70      	pop	{r4, r5, r6, pc}
	state = new_state;
   268ce:	4b15      	ldr	r3, [pc, #84]	; (26924 <at_parse_detect_type+0xa8>)
   268d0:	2203      	movs	r2, #3
   268d2:	e7df      	b.n	26894 <at_parse_detect_type+0x18>
	if (chr == '(') {
   268d4:	2b28      	cmp	r3, #40	; 0x28
   268d6:	d013      	beq.n	26900 <at_parse_detect_type+0x84>
	if ((chr == '\r') ||
   268d8:	2b0d      	cmp	r3, #13
   268da:	d001      	beq.n	268e0 <at_parse_detect_type+0x64>
   268dc:	2b0a      	cmp	r3, #10
   268de:	d119      	bne.n	26914 <at_parse_detect_type+0x98>
		  (state == NUMBER)) {
   268e0:	4a10      	ldr	r2, [pc, #64]	; (26924 <at_parse_detect_type+0xa8>)
   268e2:	7811      	ldrb	r1, [r2, #0]
	} else if (is_lfcr(*tmpstr) &&
   268e4:	2903      	cmp	r1, #3
   268e6:	d113      	bne.n	26910 <at_parse_detect_type+0x94>
   268e8:	4621      	mov	r1, r4
		while (is_lfcr(*tmpstr)) {
   268ea:	780b      	ldrb	r3, [r1, #0]
   268ec:	460c      	mov	r4, r1
   268ee:	2b0d      	cmp	r3, #13
   268f0:	f101 0101 	add.w	r1, r1, #1
   268f4:	d0f9      	beq.n	268ea <at_parse_detect_type+0x6e>
   268f6:	2b0a      	cmp	r3, #10
   268f8:	d0f7      	beq.n	268ea <at_parse_detect_type+0x6e>
	state = new_state;
   268fa:	2304      	movs	r3, #4
   268fc:	7013      	strb	r3, [r2, #0]
   268fe:	e7e3      	b.n	268c8 <at_parse_detect_type+0x4c>
   26900:	2201      	movs	r2, #1
   26902:	4b08      	ldr	r3, [pc, #32]	; (26924 <at_parse_detect_type+0xa8>)
		tmpstr++;
   26904:	4414      	add	r4, r2
	state = new_state;
   26906:	701a      	strb	r2, [r3, #0]
   26908:	e7de      	b.n	268c8 <at_parse_detect_type+0x4c>
   2690a:	4b06      	ldr	r3, [pc, #24]	; (26924 <at_parse_detect_type+0xa8>)
   2690c:	2206      	movs	r2, #6
   2690e:	e7c1      	b.n	26894 <at_parse_detect_type+0x18>
	} else if (is_lfcr(*tmpstr) &&
   26910:	2906      	cmp	r1, #6
   26912:	d0d9      	beq.n	268c8 <at_parse_detect_type+0x4c>
	if ((chr == AT_PARAM_SEPARATOR) ||
   26914:	2b2c      	cmp	r3, #44	; 0x2c
   26916:	d0f8      	beq.n	2690a <at_parse_detect_type+0x8e>
   26918:	2b3a      	cmp	r3, #58	; 0x3a
   2691a:	d0f6      	beq.n	2690a <at_parse_detect_type+0x8e>
		*str = tmpstr;
   2691c:	6034      	str	r4, [r6, #0]
		return -1;
   2691e:	f04f 30ff 	mov.w	r0, #4294967295
   26922:	e7d3      	b.n	268cc <at_parse_detect_type+0x50>
   26924:	2002b709 	.word	0x2002b709

00026928 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   26928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2692c:	4689      	mov	r9, r1
   2692e:	4616      	mov	r6, r2
   26930:	4698      	mov	r8, r3
	int err = 0;

	if (at_params_str == NULL ||
   26932:	4604      	mov	r4, r0
   26934:	2800      	cmp	r0, #0
   26936:	d07c      	beq.n	26a32 <at_parser_max_params_from_str+0x10a>
   26938:	2a00      	cmp	r2, #0
   2693a:	d07a      	beq.n	26a32 <at_parser_max_params_from_str+0x10a>
	    list == NULL || list->params == NULL) {
   2693c:	6853      	ldr	r3, [r2, #4]
   2693e:	2b00      	cmp	r3, #0
   26940:	d077      	beq.n	26a32 <at_parser_max_params_from_str+0x10a>
	state      = IDLE;
   26942:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   26944:	4610      	mov	r0, r2
   26946:	f000 f8e5 	bl	26b14 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2694a:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   2694c:	af02      	add	r7, sp, #8
	max_params_count = MIN(max_params_count, list->param_count);
   2694e:	4590      	cmp	r8, r2
	const char *str = *at_params_str;
   26950:	f847 4d04 	str.w	r4, [r7, #-4]!
	max_params_count = MIN(max_params_count, list->param_count);
   26954:	bf28      	it	cs
   26956:	4690      	movcs	r8, r2
	int index = 0;
   26958:	462c      	mov	r4, r5
	state      = IDLE;
   2695a:	4b37      	ldr	r3, [pc, #220]	; (26a38 <at_parser_max_params_from_str+0x110>)
   2695c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   2695e:	9b01      	ldr	r3, [sp, #4]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26960:	781b      	ldrb	r3, [r3, #0]
   26962:	2b00      	cmp	r3, #0
   26964:	d049      	beq.n	269fa <at_parser_max_params_from_str+0xd2>
   26966:	45a0      	cmp	r8, r4
   26968:	d947      	bls.n	269fa <at_parser_max_params_from_str+0xd2>
		if (isspace(*str)) {
   2696a:	f019 fffd 	bl	40968 <__locale_ctype_ptr>
   2696e:	9b01      	ldr	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   26970:	4621      	mov	r1, r4
		if (isspace(*str)) {
   26972:	781a      	ldrb	r2, [r3, #0]
   26974:	4410      	add	r0, r2
   26976:	7842      	ldrb	r2, [r0, #1]
		if (at_parse_detect_type(&str, index) == -1) {
   26978:	4638      	mov	r0, r7
		if (isspace(*str)) {
   2697a:	0712      	lsls	r2, r2, #28
			str++;
   2697c:	bf44      	itt	mi
   2697e:	3301      	addmi	r3, #1
   26980:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   26982:	f7ff ff7b 	bl	2687c <at_parse_detect_type>
   26986:	1c43      	adds	r3, r0, #1
   26988:	d037      	beq.n	269fa <at_parser_max_params_from_str+0xd2>
		if (at_parse_process_element(&str, index, list) == -1) {
   2698a:	4621      	mov	r1, r4
   2698c:	4632      	mov	r2, r6
   2698e:	4638      	mov	r0, r7
   26990:	f7ff feb8 	bl	26704 <at_parse_process_element>
   26994:	1c41      	adds	r1, r0, #1
   26996:	d030      	beq.n	269fa <at_parser_max_params_from_str+0xd2>
		if (is_separator(*str)) {
   26998:	9b01      	ldr	r3, [sp, #4]
   2699a:	781a      	ldrb	r2, [r3, #0]
	if ((chr == AT_PARAM_SEPARATOR) ||
   2699c:	2a2c      	cmp	r2, #44	; 0x2c
   2699e:	d001      	beq.n	269a4 <at_parser_max_params_from_str+0x7c>
   269a0:	2a3a      	cmp	r2, #58	; 0x3a
   269a2:	d117      	bne.n	269d4 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str+1))) {
   269a4:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   269a6:	2b0d      	cmp	r3, #13
   269a8:	d001      	beq.n	269ae <at_parser_max_params_from_str+0x86>
   269aa:	2b0a      	cmp	r3, #10
   269ac:	d10f      	bne.n	269ce <at_parser_max_params_from_str+0xa6>
				index++;
   269ae:	3401      	adds	r4, #1
				if (index == max_params) {
   269b0:	45a0      	cmp	r8, r4
   269b2:	d039      	beq.n	26a28 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   269b4:	4621      	mov	r1, r4
   269b6:	4638      	mov	r0, r7
   269b8:	f7ff ff60 	bl	2687c <at_parse_detect_type>
   269bc:	1c42      	adds	r2, r0, #1
   269be:	d01c      	beq.n	269fa <at_parser_max_params_from_str+0xd2>
				if (at_parse_process_element(&str,
   269c0:	4632      	mov	r2, r6
   269c2:	4621      	mov	r1, r4
   269c4:	4638      	mov	r0, r7
   269c6:	f7ff fe9d 	bl	26704 <at_parse_process_element>
   269ca:	1c43      	adds	r3, r0, #1
   269cc:	d015      	beq.n	269fa <at_parser_max_params_from_str+0xd2>
			str++;
   269ce:	9b01      	ldr	r3, [sp, #4]
   269d0:	3301      	adds	r3, #1
   269d2:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   269d4:	9a01      	ldr	r2, [sp, #4]
   269d6:	7813      	ldrb	r3, [r2, #0]
   269d8:	2b0d      	cmp	r3, #13
   269da:	d11e      	bne.n	26a1a <at_parser_max_params_from_str+0xf2>
   269dc:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   269de:	7813      	ldrb	r3, [r2, #0]
   269e0:	4611      	mov	r1, r2
   269e2:	2b0d      	cmp	r3, #13
   269e4:	f102 0201 	add.w	r2, r2, #1
   269e8:	d0f9      	beq.n	269de <at_parser_max_params_from_str+0xb6>
   269ea:	2b0a      	cmp	r3, #10
   269ec:	d0f7      	beq.n	269de <at_parser_max_params_from_str+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   269ee:	b11b      	cbz	r3, 269f8 <at_parser_max_params_from_str+0xd0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   269f0:	2b2b      	cmp	r3, #43	; 0x2b
   269f2:	d001      	beq.n	269f8 <at_parser_max_params_from_str+0xd0>
   269f4:	2b25      	cmp	r3, #37	; 0x25
   269f6:	d112      	bne.n	26a1e <at_parser_max_params_from_str+0xf6>
				str += i;
   269f8:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   269fa:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   269fc:	b9b5      	cbnz	r5, 26a2c <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   269fe:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   26a00:	2a00      	cmp	r2, #0
   26a02:	bf0c      	ite	eq
   26a04:	2000      	moveq	r0, #0
   26a06:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26a0a:	f1b9 0f00 	cmp.w	r9, #0
   26a0e:	d001      	beq.n	26a14 <at_parser_max_params_from_str+0xec>
		*next_param_str = (char *)at_params_str;
   26a10:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   26a14:	b003      	add	sp, #12
   26a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((chr == '\r') ||
   26a1a:	2b0a      	cmp	r3, #10
   26a1c:	d0de      	beq.n	269dc <at_parser_max_params_from_str+0xb4>
		index++;
   26a1e:	3401      	adds	r4, #1
			oversized = true;
   26a20:	45a0      	cmp	r8, r4
   26a22:	bf08      	it	eq
   26a24:	2501      	moveq	r5, #1
   26a26:	e79a      	b.n	2695e <at_parser_max_params_from_str+0x36>
					oversized = true;
   26a28:	2501      	movs	r5, #1
   26a2a:	e7e6      	b.n	269fa <at_parser_max_params_from_str+0xd2>
		return -E2BIG;
   26a2c:	f06f 0006 	mvn.w	r0, #6
   26a30:	e7eb      	b.n	26a0a <at_parser_max_params_from_str+0xe2>
		return -EINVAL;
   26a32:	f06f 0015 	mvn.w	r0, #21
   26a36:	e7ed      	b.n	26a14 <at_parser_max_params_from_str+0xec>
   26a38:	2002b709 	.word	0x2002b709

00026a3c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   26a3c:	b538      	push	{r3, r4, r5, lr}
   26a3e:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   26a40:	4605      	mov	r5, r0
   26a42:	b960      	cbnz	r0, 26a5e <at_params_get+0x22>
   26a44:	490a      	ldr	r1, [pc, #40]	; (26a70 <at_params_get+0x34>)
   26a46:	232b      	movs	r3, #43	; 0x2b
   26a48:	4a0a      	ldr	r2, [pc, #40]	; (26a74 <at_params_get+0x38>)
   26a4a:	480b      	ldr	r0, [pc, #44]	; (26a78 <at_params_get+0x3c>)
   26a4c:	f020 ff3d 	bl	478ca <printk>
   26a50:	480a      	ldr	r0, [pc, #40]	; (26a7c <at_params_get+0x40>)
   26a52:	f020 ff3a 	bl	478ca <printk>
   26a56:	212b      	movs	r1, #43	; 0x2b
   26a58:	4806      	ldr	r0, [pc, #24]	; (26a74 <at_params_get+0x38>)
   26a5a:	f020 ff43 	bl	478e4 <assert_post_action>

	if (index >= list->param_count) {
   26a5e:	682b      	ldr	r3, [r5, #0]
   26a60:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26a62:	bf85      	ittet	hi
   26a64:	230c      	movhi	r3, #12
   26a66:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   26a68:	2000      	movls	r0, #0
	return &param[index];
   26a6a:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   26a6e:	bd38      	pop	{r3, r4, r5, pc}
   26a70:	0004f4b4 	.word	0x0004f4b4
   26a74:	0004f485 	.word	0x0004f485
   26a78:	0004ccf0 	.word	0x0004ccf0
   26a7c:	0004f4c8 	.word	0x0004f4c8

00026a80 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   26a80:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26a82:	4604      	mov	r4, r0
   26a84:	b960      	cbnz	r0, 26aa0 <at_param_size+0x20>
   26a86:	490e      	ldr	r1, [pc, #56]	; (26ac0 <at_param_size+0x40>)
   26a88:	2339      	movs	r3, #57	; 0x39
   26a8a:	4a0e      	ldr	r2, [pc, #56]	; (26ac4 <at_param_size+0x44>)
   26a8c:	480e      	ldr	r0, [pc, #56]	; (26ac8 <at_param_size+0x48>)
   26a8e:	f020 ff1c 	bl	478ca <printk>
   26a92:	480e      	ldr	r0, [pc, #56]	; (26acc <at_param_size+0x4c>)
   26a94:	f020 ff19 	bl	478ca <printk>
   26a98:	2139      	movs	r1, #57	; 0x39
   26a9a:	480a      	ldr	r0, [pc, #40]	; (26ac4 <at_param_size+0x44>)
   26a9c:	f020 ff22 	bl	478e4 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   26aa0:	7823      	ldrb	r3, [r4, #0]
   26aa2:	2b01      	cmp	r3, #1
   26aa4:	d006      	beq.n	26ab4 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   26aa6:	2b02      	cmp	r3, #2
   26aa8:	d006      	beq.n	26ab8 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   26aaa:	3b03      	subs	r3, #3
   26aac:	2b01      	cmp	r3, #1
   26aae:	d805      	bhi.n	26abc <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   26ab0:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   26ab2:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   26ab4:	2002      	movs	r0, #2
   26ab6:	e7fc      	b.n	26ab2 <at_param_size+0x32>
		return sizeof(u32_t);
   26ab8:	2004      	movs	r0, #4
   26aba:	e7fa      	b.n	26ab2 <at_param_size+0x32>
	return 0;
   26abc:	2000      	movs	r0, #0
   26abe:	e7f8      	b.n	26ab2 <at_param_size+0x32>
   26ac0:	0004f454 	.word	0x0004f454
   26ac4:	0004f485 	.word	0x0004f485
   26ac8:	0004ccf0 	.word	0x0004ccf0
   26acc:	0004f469 	.word	0x0004f469

00026ad0 <at_param_clear>:
{
   26ad0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26ad2:	4604      	mov	r4, r0
   26ad4:	b960      	cbnz	r0, 26af0 <at_param_clear+0x20>
   26ad6:	490b      	ldr	r1, [pc, #44]	; (26b04 <at_param_clear+0x34>)
   26ad8:	231d      	movs	r3, #29
   26ada:	4a0b      	ldr	r2, [pc, #44]	; (26b08 <at_param_clear+0x38>)
   26adc:	480b      	ldr	r0, [pc, #44]	; (26b0c <at_param_clear+0x3c>)
   26ade:	f020 fef4 	bl	478ca <printk>
   26ae2:	480b      	ldr	r0, [pc, #44]	; (26b10 <at_param_clear+0x40>)
   26ae4:	f020 fef1 	bl	478ca <printk>
   26ae8:	211d      	movs	r1, #29
   26aea:	4807      	ldr	r0, [pc, #28]	; (26b08 <at_param_clear+0x38>)
   26aec:	f020 fefa 	bl	478e4 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26af0:	7823      	ldrb	r3, [r4, #0]
   26af2:	3b03      	subs	r3, #3
   26af4:	2b01      	cmp	r3, #1
   26af6:	d802      	bhi.n	26afe <at_param_clear+0x2e>
		k_free(param->value.str_val);
   26af8:	68a0      	ldr	r0, [r4, #8]
   26afa:	f023 fa72 	bl	49fe2 <k_free>
	param->value.int_val = 0;
   26afe:	2300      	movs	r3, #0
   26b00:	60a3      	str	r3, [r4, #8]
}
   26b02:	bd10      	pop	{r4, pc}
   26b04:	0004f454 	.word	0x0004f454
   26b08:	0004f485 	.word	0x0004f485
   26b0c:	0004ccf0 	.word	0x0004ccf0
   26b10:	0004f469 	.word	0x0004f469

00026b14 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   26b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   26b18:	4605      	mov	r5, r0
   26b1a:	b158      	cbz	r0, 26b34 <at_params_list_clear+0x20>
   26b1c:	6843      	ldr	r3, [r0, #4]
   26b1e:	b14b      	cbz	r3, 26b34 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26b20:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26b22:	f8df 8054 	ldr.w	r8, [pc, #84]	; 26b78 <at_params_list_clear+0x64>
   26b26:	f8df a054 	ldr.w	sl, [pc, #84]	; 26b7c <at_params_list_clear+0x68>
   26b2a:	f8df b054 	ldr.w	fp, [pc, #84]	; 26b80 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   26b2e:	682b      	ldr	r3, [r5, #0]
   26b30:	429c      	cmp	r4, r3
   26b32:	d301      	bcc.n	26b38 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   26b38:	270c      	movs	r7, #12
   26b3a:	4367      	muls	r7, r4
   26b3c:	f8d5 9004 	ldr.w	r9, [r5, #4]
   26b40:	eb09 0607 	add.w	r6, r9, r7
   26b44:	4630      	mov	r0, r6
   26b46:	f7ff ffc3 	bl	26ad0 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26b4a:	b966      	cbnz	r6, 26b66 <at_params_list_clear+0x52>
   26b4c:	4651      	mov	r1, sl
   26b4e:	2314      	movs	r3, #20
   26b50:	4642      	mov	r2, r8
   26b52:	4658      	mov	r0, fp
   26b54:	f020 feb9 	bl	478ca <printk>
   26b58:	4806      	ldr	r0, [pc, #24]	; (26b74 <at_params_list_clear+0x60>)
   26b5a:	f020 feb6 	bl	478ca <printk>
   26b5e:	2114      	movs	r1, #20
   26b60:	4640      	mov	r0, r8
   26b62:	f020 febf 	bl	478e4 <assert_post_action>
   26b66:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   26b68:	3401      	adds	r4, #1
   26b6a:	f849 3007 	str.w	r3, [r9, r7]
   26b6e:	6073      	str	r3, [r6, #4]
   26b70:	60b3      	str	r3, [r6, #8]
   26b72:	e7dc      	b.n	26b2e <at_params_list_clear+0x1a>
   26b74:	0004f469 	.word	0x0004f469
   26b78:	0004f485 	.word	0x0004f485
   26b7c:	0004f454 	.word	0x0004f454
   26b80:	0004ccf0 	.word	0x0004ccf0

00026b84 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   26b84:	b538      	push	{r3, r4, r5, lr}
   26b86:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26b88:	4a08      	ldr	r2, [pc, #32]	; (26bac <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   26b8a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26b8c:	782b      	ldrb	r3, [r5, #0]
   26b8e:	2100      	movs	r1, #0
   26b90:	f7ff feca 	bl	26928 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   26b94:	4604      	mov	r4, r0
   26b96:	b938      	cbnz	r0, 26ba8 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   26b98:	4804      	ldr	r0, [pc, #16]	; (26bac <modem_info_parse.isra.0+0x28>)
   26b9a:	f022 ff62 	bl	49a62 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   26b9e:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   26ba0:	4298      	cmp	r0, r3
   26ba2:	bf88      	it	hi
   26ba4:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   26ba8:	4620      	mov	r0, r4
   26baa:	bd38      	pop	{r3, r4, r5, pc}
   26bac:	20023e60 	.word	0x20023e60

00026bb0 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, char *response)
{
   26bb0:	b513      	push	{r0, r1, r4, lr}
   26bb2:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   26bb4:	4608      	mov	r0, r1
   26bb6:	f01a fe35 	bl	41824 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   26bba:	491d      	ldr	r1, [pc, #116]	; (26c30 <modem_info_rsrp_subscribe_handler+0x80>)
   26bbc:	4620      	mov	r0, r4
   26bbe:	f01b f841 	bl	41c44 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   26bc2:	b1b0      	cbz	r0, 26bf2 <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   26bc4:	4621      	mov	r1, r4
   26bc6:	481b      	ldr	r0, [pc, #108]	; (26c34 <modem_info_rsrp_subscribe_handler+0x84>)
   26bc8:	f7ff ffdc 	bl	26b84 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   26bcc:	4604      	mov	r4, r0
   26bce:	b190      	cbz	r0, 26bf6 <modem_info_rsrp_subscribe_handler+0x46>
		LOG_ERR("modem_info_parse failed to parse "
   26bd0:	2301      	movs	r3, #1
   26bd2:	f04f 0000 	mov.w	r0, #0
   26bd6:	4a18      	ldr	r2, [pc, #96]	; (26c38 <modem_info_rsrp_subscribe_handler+0x88>)
   26bd8:	f363 0002 	bfi	r0, r3, #0, #3
   26bdc:	4b17      	ldr	r3, [pc, #92]	; (26c3c <modem_info_rsrp_subscribe_handler+0x8c>)
   26bde:	f36f 00c5 	bfc	r0, #3, #3
   26be2:	1a9b      	subs	r3, r3, r2
   26be4:	4622      	mov	r2, r4
   26be6:	08db      	lsrs	r3, r3, #3
   26be8:	4915      	ldr	r1, [pc, #84]	; (26c40 <modem_info_rsrp_subscribe_handler+0x90>)
   26bea:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   26bee:	f020 fe89 	bl	47904 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   26bf2:	b002      	add	sp, #8
   26bf4:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   26bf6:	f10d 0206 	add.w	r2, sp, #6
   26bfa:	2101      	movs	r1, #1
   26bfc:	4811      	ldr	r0, [pc, #68]	; (26c44 <modem_info_rsrp_subscribe_handler+0x94>)
   26bfe:	f022 fedc 	bl	499ba <at_params_short_get>
	if (err != 0) {
   26c02:	4602      	mov	r2, r0
   26c04:	b170      	cbz	r0, 26c24 <modem_info_rsrp_subscribe_handler+0x74>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   26c06:	2301      	movs	r3, #1
   26c08:	f04f 0000 	mov.w	r0, #0
   26c0c:	490a      	ldr	r1, [pc, #40]	; (26c38 <modem_info_rsrp_subscribe_handler+0x88>)
   26c0e:	f363 0002 	bfi	r0, r3, #0, #3
   26c12:	4b0a      	ldr	r3, [pc, #40]	; (26c3c <modem_info_rsrp_subscribe_handler+0x8c>)
   26c14:	f364 00c5 	bfi	r0, r4, #3, #3
   26c18:	1a5b      	subs	r3, r3, r1
   26c1a:	08db      	lsrs	r3, r3, #3
   26c1c:	f363 108f 	bfi	r0, r3, #6, #10
   26c20:	4909      	ldr	r1, [pc, #36]	; (26c48 <modem_info_rsrp_subscribe_handler+0x98>)
   26c22:	e7e4      	b.n	26bee <modem_info_rsrp_subscribe_handler+0x3e>
	modem_info_rsrp_cb(param_value);
   26c24:	4b09      	ldr	r3, [pc, #36]	; (26c4c <modem_info_rsrp_subscribe_handler+0x9c>)
   26c26:	f89d 0006 	ldrb.w	r0, [sp, #6]
   26c2a:	681b      	ldr	r3, [r3, #0]
   26c2c:	4798      	blx	r3
   26c2e:	e7e0      	b.n	26bf2 <modem_info_rsrp_subscribe_handler+0x42>
   26c30:	0004f510 	.word	0x0004f510
   26c34:	0004af11 	.word	0x0004af11
   26c38:	0004a688 	.word	0x0004a688
   26c3c:	0004a740 	.word	0x0004a740
   26c40:	0004f516 	.word	0x0004f516
   26c44:	20023e60 	.word	0x20023e60
   26c48:	0004f54d 	.word	0x0004f54d
   26c4c:	20023e68 	.word	0x20023e68

00026c50 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   26c50:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   26c52:	bf9d      	ittte	ls
   26c54:	4b02      	ldrls	r3, [pc, #8]	; (26c60 <modem_info_type_get+0x10>)
   26c56:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   26c5a:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   26c5c:	20ea      	movhi	r0, #234	; 0xea
}
   26c5e:	4770      	bx	lr
   26c60:	0004ae9c 	.word	0x0004ae9c

00026c64 <modem_info_name_get>:
{
   26c64:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   26c66:	460d      	mov	r5, r1
   26c68:	b919      	cbnz	r1, 26c72 <modem_info_name_get+0xe>
		return -EINVAL;
   26c6a:	f06f 0415 	mvn.w	r4, #21
}
   26c6e:	4620      	mov	r0, r4
   26c70:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   26c72:	4b07      	ldr	r3, [pc, #28]	; (26c90 <modem_info_name_get+0x2c>)
   26c74:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   26c78:	6870      	ldr	r0, [r6, #4]
   26c7a:	f01a fdd3 	bl	41824 <strlen>
	if (len <= 0) {
   26c7e:	1e04      	subs	r4, r0, #0
   26c80:	ddf3      	ble.n	26c6a <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26c82:	4622      	mov	r2, r4
   26c84:	6871      	ldr	r1, [r6, #4]
   26c86:	4628      	mov	r0, r5
   26c88:	f7f3 f912 	bl	19eb0 <memcpy>
   26c8c:	e7ef      	b.n	26c6e <modem_info_name_get+0xa>
   26c8e:	bf00      	nop
   26c90:	0004ae9c 	.word	0x0004ae9c

00026c94 <modem_info_short_get>:
{
   26c94:	b530      	push	{r4, r5, lr}
   26c96:	460d      	mov	r5, r1
   26c98:	b0a1      	sub	sp, #132	; 0x84
   26c9a:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26c9c:	2280      	movs	r2, #128	; 0x80
   26c9e:	2100      	movs	r1, #0
   26ca0:	4668      	mov	r0, sp
   26ca2:	f01a f9c9 	bl	41038 <memset>
	if (buf == NULL) {
   26ca6:	b1e5      	cbz	r5, 26ce2 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   26ca8:	4b11      	ldr	r3, [pc, #68]	; (26cf0 <modem_info_short_get+0x5c>)
   26caa:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   26cae:	7aa3      	ldrb	r3, [r4, #10]
   26cb0:	2b03      	cmp	r3, #3
   26cb2:	d016      	beq.n	26ce2 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   26cb4:	2300      	movs	r3, #0
   26cb6:	2280      	movs	r2, #128	; 0x80
   26cb8:	4669      	mov	r1, sp
   26cba:	6820      	ldr	r0, [r4, #0]
   26cbc:	f005 f85a 	bl	2bd74 <at_cmd_write>
	if (err != 0) {
   26cc0:	b990      	cbnz	r0, 26ce8 <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   26cc2:	4669      	mov	r1, sp
   26cc4:	f104 0009 	add.w	r0, r4, #9
   26cc8:	f7ff ff5c 	bl	26b84 <modem_info_parse.isra.0>
	if (err) {
   26ccc:	b938      	cbnz	r0, 26cde <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   26cce:	462a      	mov	r2, r5
   26cd0:	7a21      	ldrb	r1, [r4, #8]
   26cd2:	4808      	ldr	r0, [pc, #32]	; (26cf4 <modem_info_short_get+0x60>)
   26cd4:	f022 fe71 	bl	499ba <at_params_short_get>
	return sizeof(u16_t);
   26cd8:	2800      	cmp	r0, #0
   26cda:	bf08      	it	eq
   26cdc:	2002      	moveq	r0, #2
}
   26cde:	b021      	add	sp, #132	; 0x84
   26ce0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26ce2:	f06f 0015 	mvn.w	r0, #21
   26ce6:	e7fa      	b.n	26cde <modem_info_short_get+0x4a>
		return -EIO;
   26ce8:	f06f 0004 	mvn.w	r0, #4
   26cec:	e7f7      	b.n	26cde <modem_info_short_get+0x4a>
   26cee:	bf00      	nop
   26cf0:	0004ae9c 	.word	0x0004ae9c
   26cf4:	20023e60 	.word	0x20023e60

00026cf8 <modem_info_string_get>:
{
   26cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t len = 0;
   26cfc:	2400      	movs	r4, #0
{
   26cfe:	460d      	mov	r5, r1
   26d00:	b0a3      	sub	sp, #140	; 0x8c
   26d02:	4681      	mov	r9, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26d04:	2280      	movs	r2, #128	; 0x80
   26d06:	4621      	mov	r1, r4
   26d08:	a802      	add	r0, sp, #8
	size_t len = 0;
   26d0a:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26d0c:	f01a f994 	bl	41038 <memset>
	if (buf == NULL) {
   26d10:	2d00      	cmp	r5, #0
   26d12:	d06f      	beq.n	26df4 <modem_info_string_get+0xfc>
	err = at_cmd_write(modem_data[info]->cmd,
   26d14:	4b3a      	ldr	r3, [pc, #232]	; (26e00 <modem_info_string_get+0x108>)
   26d16:	2280      	movs	r2, #128	; 0x80
   26d18:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
   26d1c:	a902      	add	r1, sp, #8
   26d1e:	4623      	mov	r3, r4
   26d20:	6830      	ldr	r0, [r6, #0]
   26d22:	f005 f827 	bl	2bd74 <at_cmd_write>
	if (err != 0) {
   26d26:	4680      	mov	r8, r0
   26d28:	2800      	cmp	r0, #0
   26d2a:	d166      	bne.n	26dfa <modem_info_string_get+0x102>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   26d2c:	a902      	add	r1, sp, #8
   26d2e:	f106 0009 	add.w	r0, r6, #9
   26d32:	f7ff ff27 	bl	26b84 <modem_info_parse.isra.0>
	if (err) {
   26d36:	4604      	mov	r4, r0
   26d38:	b1a0      	cbz	r0, 26d64 <modem_info_string_get+0x6c>
		LOG_ERR("Unable to parse data: %d", err);
   26d3a:	2301      	movs	r3, #1
   26d3c:	f04f 0000 	mov.w	r0, #0
   26d40:	4a30      	ldr	r2, [pc, #192]	; (26e04 <modem_info_string_get+0x10c>)
   26d42:	f363 0002 	bfi	r0, r3, #0, #3
   26d46:	4b30      	ldr	r3, [pc, #192]	; (26e08 <modem_info_string_get+0x110>)
   26d48:	f368 00c5 	bfi	r0, r8, #3, #3
   26d4c:	1a9b      	subs	r3, r3, r2
   26d4e:	4622      	mov	r2, r4
   26d50:	08db      	lsrs	r3, r3, #3
   26d52:	492e      	ldr	r1, [pc, #184]	; (26e0c <modem_info_string_get+0x114>)
   26d54:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   26d58:	f020 fdd4 	bl	47904 <log_string_sync>
}
   26d5c:	4620      	mov	r0, r4
   26d5e:	b023      	add	sp, #140	; 0x8c
   26d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   26d64:	7ab7      	ldrb	r7, [r6, #10]
   26d66:	2f01      	cmp	r7, #1
   26d68:	d12f      	bne.n	26dca <modem_info_string_get+0xd2>
		err = at_params_short_get(&m_param_list,
   26d6a:	f10d 0202 	add.w	r2, sp, #2
   26d6e:	7a31      	ldrb	r1, [r6, #8]
   26d70:	4827      	ldr	r0, [pc, #156]	; (26e10 <modem_info_string_get+0x118>)
   26d72:	f022 fe22 	bl	499ba <at_params_short_get>
		if (err) {
   26d76:	4604      	mov	r4, r0
   26d78:	b170      	cbz	r0, 26d98 <modem_info_string_get+0xa0>
			LOG_ERR("Unable to obtain short: %d", err);
   26d7a:	f04f 0000 	mov.w	r0, #0
   26d7e:	4a21      	ldr	r2, [pc, #132]	; (26e04 <modem_info_string_get+0x10c>)
   26d80:	4b21      	ldr	r3, [pc, #132]	; (26e08 <modem_info_string_get+0x110>)
   26d82:	f367 0002 	bfi	r0, r7, #0, #3
   26d86:	1a9b      	subs	r3, r3, r2
   26d88:	f368 00c5 	bfi	r0, r8, #3, #3
   26d8c:	08db      	lsrs	r3, r3, #3
   26d8e:	f363 108f 	bfi	r0, r3, #6, #10
   26d92:	4622      	mov	r2, r4
   26d94:	491f      	ldr	r1, [pc, #124]	; (26e14 <modem_info_string_get+0x11c>)
   26d96:	e7df      	b.n	26d58 <modem_info_string_get+0x60>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   26d98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   26d9c:	4a1e      	ldr	r2, [pc, #120]	; (26e18 <modem_info_string_get+0x120>)
   26d9e:	2164      	movs	r1, #100	; 0x64
   26da0:	4628      	mov	r0, r5
   26da2:	f01a fb6f 	bl	41484 <snprintf>
	if (info == MODEM_INFO_ICCID) {
   26da6:	f1b9 0f0e 	cmp.w	r9, #14
   26daa:	d108      	bne.n	26dbe <modem_info_string_get+0xc6>
   26dac:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   26dae:	4628      	mov	r0, r5
   26db0:	f01a fd38 	bl	41824 <strlen>
   26db4:	1b66      	subs	r6, r4, r5
   26db6:	42b0      	cmp	r0, r6
   26db8:	f104 0402 	add.w	r4, r4, #2
   26dbc:	d811      	bhi.n	26de2 <modem_info_string_get+0xea>
	return len <= 0 ? -ENOTSUP : len;
   26dbe:	9c01      	ldr	r4, [sp, #4]
   26dc0:	2c00      	cmp	r4, #0
   26dc2:	bf08      	it	eq
   26dc4:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   26dc8:	e7c8      	b.n	26d5c <modem_info_string_get+0x64>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   26dca:	2f03      	cmp	r7, #3
   26dcc:	d1eb      	bne.n	26da6 <modem_info_string_get+0xae>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   26dce:	2264      	movs	r2, #100	; 0x64
   26dd0:	ab22      	add	r3, sp, #136	; 0x88
   26dd2:	f843 2d84 	str.w	r2, [r3, #-132]!
		err = at_params_string_get(&m_param_list,
   26dd6:	7a31      	ldrb	r1, [r6, #8]
   26dd8:	462a      	mov	r2, r5
   26dda:	480d      	ldr	r0, [pc, #52]	; (26e10 <modem_info_string_get+0x118>)
   26ddc:	f022 fe1a 	bl	49a14 <at_params_string_get>
   26de0:	e7e1      	b.n	26da6 <modem_info_string_get+0xae>
		current_char = buf[i];
   26de2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
		buf[i] = next_char;
   26de6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
		buf[i + 1] = current_char;
   26dea:	f804 3c01 	strb.w	r3, [r4, #-1]
		buf[i] = next_char;
   26dee:	f804 2c02 	strb.w	r2, [r4, #-2]
   26df2:	e7dc      	b.n	26dae <modem_info_string_get+0xb6>
		return -EINVAL;
   26df4:	f06f 0415 	mvn.w	r4, #21
   26df8:	e7b0      	b.n	26d5c <modem_info_string_get+0x64>
		return -EIO;
   26dfa:	f06f 0404 	mvn.w	r4, #4
   26dfe:	e7ad      	b.n	26d5c <modem_info_string_get+0x64>
   26e00:	0004ae9c 	.word	0x0004ae9c
   26e04:	0004a688 	.word	0x0004a688
   26e08:	0004a740 	.word	0x0004a740
   26e0c:	0004f56d 	.word	0x0004f56d
   26e10:	20023e60 	.word	0x20023e60
   26e14:	0004f586 	.word	0x0004f586
   26e18:	000502db 	.word	0x000502db

00026e1c <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   26e1c:	4b13      	ldr	r3, [pc, #76]	; (26e6c <modem_info_rsrp_register+0x50>)
{
   26e1e:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   26e20:	4913      	ldr	r1, [pc, #76]	; (26e70 <modem_info_rsrp_register+0x54>)
	modem_info_rsrp_cb = cb;
   26e22:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   26e24:	2000      	movs	r0, #0
   26e26:	f7ff fa3d 	bl	262a4 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   26e2a:	4604      	mov	r4, r0
   26e2c:	b190      	cbz	r0, 26e54 <modem_info_rsrp_register+0x38>
		LOG_ERR("Can't register handler rc=%d", rc);
   26e2e:	2301      	movs	r3, #1
   26e30:	f04f 0000 	mov.w	r0, #0
   26e34:	4a0f      	ldr	r2, [pc, #60]	; (26e74 <modem_info_rsrp_register+0x58>)
   26e36:	f363 0002 	bfi	r0, r3, #0, #3
   26e3a:	4b0f      	ldr	r3, [pc, #60]	; (26e78 <modem_info_rsrp_register+0x5c>)
   26e3c:	f36f 00c5 	bfc	r0, #3, #3
   26e40:	1a9b      	subs	r3, r3, r2
   26e42:	08db      	lsrs	r3, r3, #3
   26e44:	f363 108f 	bfi	r0, r3, #6, #10
   26e48:	4622      	mov	r2, r4
   26e4a:	490c      	ldr	r1, [pc, #48]	; (26e7c <modem_info_rsrp_register+0x60>)
   26e4c:	f020 fd5a 	bl	47904 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   26e50:	4620      	mov	r0, r4
   26e52:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   26e54:	4603      	mov	r3, r0
   26e56:	4602      	mov	r2, r0
   26e58:	4601      	mov	r1, r0
   26e5a:	4809      	ldr	r0, [pc, #36]	; (26e80 <modem_info_rsrp_register+0x64>)
   26e5c:	f004 ff8a 	bl	2bd74 <at_cmd_write>
   26e60:	1e04      	subs	r4, r0, #0
		return -EIO;
   26e62:	bf18      	it	ne
   26e64:	f06f 0404 	mvnne.w	r4, #4
   26e68:	e7f2      	b.n	26e50 <modem_info_rsrp_register+0x34>
   26e6a:	bf00      	nop
   26e6c:	20023e68 	.word	0x20023e68
   26e70:	00026bb1 	.word	0x00026bb1
   26e74:	0004a688 	.word	0x0004a688
   26e78:	0004a740 	.word	0x0004a740
   26e7c:	0004f4e9 	.word	0x0004f4e9
   26e80:	0004f506 	.word	0x0004f506

00026e84 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   26e84:	210a      	movs	r1, #10
   26e86:	4801      	ldr	r0, [pc, #4]	; (26e8c <modem_info_init+0x8>)
   26e88:	f022 bcec 	b.w	49864 <at_params_list_init>
   26e8c:	20023e60 	.word	0x20023e60

00026e90 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   26e90:	b570      	push	{r4, r5, r6, lr}
   26e92:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   26e94:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   26e98:	f7ff feda 	bl	26c50 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   26e9c:	2803      	cmp	r0, #3
	data_type = modem_info_type_get(param->type);
   26e9e:	4606      	mov	r6, r0
	if (data_type == AT_PARAM_TYPE_STRING) {
   26ea0:	d11d      	bne.n	26ede <modem_data_get+0x4e>
		ret = modem_info_string_get(param->type, param->value_string);
   26ea2:	1ca9      	adds	r1, r5, #2
   26ea4:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   26ea8:	f7ff ff26 	bl	26cf8 <modem_info_string_get>
		if (ret < 0) {
   26eac:	1e04      	subs	r4, r0, #0
   26eae:	db02      	blt.n	26eb6 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   26eb0:	2400      	movs	r4, #0
}
   26eb2:	4620      	mov	r0, r4
   26eb4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   26eb6:	2301      	movs	r3, #1
   26eb8:	f04f 0000 	mov.w	r0, #0
   26ebc:	4a15      	ldr	r2, [pc, #84]	; (26f14 <modem_data_get+0x84>)
   26ebe:	f363 0002 	bfi	r0, r3, #0, #3
   26ec2:	4b15      	ldr	r3, [pc, #84]	; (26f18 <modem_data_get+0x88>)
   26ec4:	f36f 00c5 	bfc	r0, #3, #3
   26ec8:	1a9b      	subs	r3, r3, r2
   26eca:	08db      	lsrs	r3, r3, #3
   26ecc:	f363 108f 	bfi	r0, r3, #6, #10
   26ed0:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   26ed4:	4623      	mov	r3, r4
   26ed6:	4911      	ldr	r1, [pc, #68]	; (26f1c <modem_data_get+0x8c>)
   26ed8:	f020 fd14 	bl	47904 <log_string_sync>
			return ret;
   26edc:	e7e9      	b.n	26eb2 <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   26ede:	2801      	cmp	r0, #1
   26ee0:	d1e6      	bne.n	26eb0 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   26ee2:	4629      	mov	r1, r5
   26ee4:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   26ee8:	f7ff fed4 	bl	26c94 <modem_info_short_get>
		if (ret < 0) {
   26eec:	1e04      	subs	r4, r0, #0
   26eee:	dadf      	bge.n	26eb0 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   26ef0:	f04f 0000 	mov.w	r0, #0
   26ef4:	4a07      	ldr	r2, [pc, #28]	; (26f14 <modem_data_get+0x84>)
   26ef6:	4b08      	ldr	r3, [pc, #32]	; (26f18 <modem_data_get+0x88>)
   26ef8:	f366 0002 	bfi	r0, r6, #0, #3
   26efc:	1a9b      	subs	r3, r3, r2
   26efe:	08db      	lsrs	r3, r3, #3
   26f00:	f36f 00c5 	bfc	r0, #3, #3
   26f04:	f363 108f 	bfi	r0, r3, #6, #10
   26f08:	4622      	mov	r2, r4
   26f0a:	4905      	ldr	r1, [pc, #20]	; (26f20 <modem_data_get+0x90>)
   26f0c:	f020 fcfa 	bl	47904 <log_string_sync>
   26f10:	e7cf      	b.n	26eb2 <modem_data_get+0x22>
   26f12:	bf00      	nop
   26f14:	0004a688 	.word	0x0004a688
   26f18:	0004a750 	.word	0x0004a750
   26f1c:	0004f6ee 	.word	0x0004f6ee
   26f20:	0004f70c 	.word	0x0004f70c

00026f24 <modem_info_params_init>:
	if (modem == NULL) {
   26f24:	2800      	cmp	r0, #0
   26f26:	d043      	beq.n	26fb0 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   26f28:	2301      	movs	r3, #1
   26f2a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   26f2e:	2302      	movs	r3, #2
   26f30:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   26f34:	2303      	movs	r3, #3
   26f36:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   26f3a:	2305      	movs	r3, #5
   26f3c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   26f40:	2306      	movs	r3, #6
   26f42:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   26f46:	2307      	movs	r3, #7
   26f48:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   26f4c:	2308      	movs	r3, #8
   26f4e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   26f52:	2309      	movs	r3, #9
   26f54:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   26f58:	2304      	movs	r3, #4
   26f5a:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   26f5e:	230f      	movs	r3, #15
   26f60:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   26f64:	2310      	movs	r3, #16
   26f66:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   26f6a:	2311      	movs	r3, #17
   26f6c:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   26f70:	2314      	movs	r3, #20
   26f72:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   26f76:	230a      	movs	r3, #10
   26f78:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   26f7c:	230e      	movs	r3, #14
   26f7e:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   26f82:	2312      	movs	r3, #18
   26f84:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   26f88:	230d      	movs	r3, #13
   26f8a:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   26f8e:	230b      	movs	r3, #11
   26f90:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   26f94:	2313      	movs	r3, #19
   26f96:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   26f9a:	4b07      	ldr	r3, [pc, #28]	; (26fb8 <modem_info_params_init+0x94>)
   26f9c:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   26fa0:	4b06      	ldr	r3, [pc, #24]	; (26fbc <modem_info_params_init+0x98>)
   26fa2:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   26fa6:	4b06      	ldr	r3, [pc, #24]	; (26fc0 <modem_info_params_init+0x9c>)
   26fa8:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   26fac:	2000      	movs	r0, #0
   26fae:	4770      	bx	lr
		return -EINVAL;
   26fb0:	f06f 0015 	mvn.w	r0, #21
}
   26fb4:	4770      	bx	lr
   26fb6:	bf00      	nop
   26fb8:	0004f77c 	.word	0x0004f77c
   26fbc:	0004f78d 	.word	0x0004f78d
   26fc0:	0004f794 	.word	0x0004f794

00026fc4 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   26fc4:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   26fc6:	4604      	mov	r4, r0
   26fc8:	2800      	cmp	r0, #0
   26fca:	f000 80bd 	beq.w	27148 <modem_info_params_get+0x184>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   26fce:	f7ff ff5f 	bl	26e90 <modem_data_get>
   26fd2:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   26fd4:	f104 0070 	add.w	r0, r4, #112	; 0x70
   26fd8:	f7ff ff5a 	bl	26e90 <modem_data_get>
   26fdc:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   26fde:	f504 7044 	add.w	r0, r4, #784	; 0x310
   26fe2:	f7ff ff55 	bl	26e90 <modem_data_get>
   26fe6:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   26fe8:	f504 7060 	add.w	r0, r4, #896	; 0x380
   26fec:	f7ff ff50 	bl	26e90 <modem_data_get>
   26ff0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   26ff2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   26ff6:	f7ff ff4b 	bl	26e90 <modem_data_get>
   26ffa:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   26ffc:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   27000:	f7ff ff46 	bl	26e90 <modem_data_get>
   27004:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   27006:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2700a:	f7ff ff41 	bl	26e90 <modem_data_get>
   2700e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   27010:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   27014:	f7ff ff3c 	bl	26e90 <modem_data_get>
   27018:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2701a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2701e:	f7ff ff37 	bl	26e90 <modem_data_get>
   27022:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   27024:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   27028:	f7ff ff32 	bl	26e90 <modem_data_get>
   2702c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.date_time);
   2702e:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   27032:	f7ff ff2d 	bl	26e90 <modem_data_get>
   27036:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   2703a:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2703e:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   27040:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   27044:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   27048:	7083      	strb	r3, [r0, #2]
   2704a:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   2704e:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   27052:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   27056:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2705a:	2100      	movs	r1, #0
   2705c:	220a      	movs	r2, #10
   2705e:	f01a ffb1 	bl	41fc4 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   27062:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   27066:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2706a:	220a      	movs	r2, #10
   2706c:	2100      	movs	r1, #0
   2706e:	4630      	mov	r0, r6
   27070:	f01a ffa8 	bl	41fc4 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   27074:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   27076:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2707a:	2100      	movs	r1, #0
   2707c:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   27080:	f01a ffa0 	bl	41fc4 <strtol>
   27084:	f7f1 fb1e 	bl	186c4 <__aeabi_i2d>
   27088:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   2708c:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   27090:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   27092:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   27094:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   27098:	4631      	mov	r1, r6
   2709a:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2709e:	f01a ff91 	bl	41fc4 <strtol>
   270a2:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   270a6:	b19d      	cbz	r5, 270d0 <modem_info_params_get+0x10c>
			LOG_ERR("Network data not obtained: %d", ret);
   270a8:	2301      	movs	r3, #1
   270aa:	f04f 0000 	mov.w	r0, #0
   270ae:	4a28      	ldr	r2, [pc, #160]	; (27150 <modem_info_params_get+0x18c>)
   270b0:	f363 0002 	bfi	r0, r3, #0, #3
   270b4:	4b27      	ldr	r3, [pc, #156]	; (27154 <modem_info_params_get+0x190>)
   270b6:	f366 00c5 	bfi	r0, r6, #3, #3
   270ba:	1a9b      	subs	r3, r3, r2
   270bc:	462a      	mov	r2, r5
   270be:	08db      	lsrs	r3, r3, #3
   270c0:	4925      	ldr	r1, [pc, #148]	; (27158 <modem_info_params_get+0x194>)
   270c2:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   270c6:	f020 fc1d 	bl	47904 <log_string_sync>
			return -EAGAIN;
   270ca:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   270ce:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   270d0:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   270d4:	f7ff fedc 	bl	26e90 <modem_data_get>
   270d8:	4606      	mov	r6, r0
			ret += modem_data_get(&modem->sim.imsi);
   270da:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   270de:	f7ff fed7 	bl	26e90 <modem_data_get>
		if (ret) {
   270e2:	1836      	adds	r6, r6, r0
   270e4:	d00f      	beq.n	27106 <modem_info_params_get+0x142>
			LOG_ERR("Sim data not obtained: %d", ret);
   270e6:	2301      	movs	r3, #1
   270e8:	f04f 0000 	mov.w	r0, #0
   270ec:	4a18      	ldr	r2, [pc, #96]	; (27150 <modem_info_params_get+0x18c>)
   270ee:	f363 0002 	bfi	r0, r3, #0, #3
   270f2:	4b18      	ldr	r3, [pc, #96]	; (27154 <modem_info_params_get+0x190>)
   270f4:	f365 00c5 	bfi	r0, r5, #3, #3
   270f8:	1a9b      	subs	r3, r3, r2
   270fa:	08db      	lsrs	r3, r3, #3
   270fc:	f363 108f 	bfi	r0, r3, #6, #10
   27100:	4632      	mov	r2, r6
   27102:	4916      	ldr	r1, [pc, #88]	; (2715c <modem_info_params_get+0x198>)
   27104:	e7df      	b.n	270c6 <modem_info_params_get+0x102>
		ret = modem_data_get(&modem->device.modem_fw);
   27106:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2710a:	f7ff fec1 	bl	26e90 <modem_data_get>
   2710e:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   27110:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   27114:	f7ff febc 	bl	26e90 <modem_data_get>
   27118:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2711a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2711e:	f7ff feb7 	bl	26e90 <modem_data_get>
		if (ret) {
   27122:	1828      	adds	r0, r5, r0
   27124:	d0d3      	beq.n	270ce <modem_info_params_get+0x10a>
			LOG_ERR("Device data not obtained: %d", ret);
   27126:	2301      	movs	r3, #1
   27128:	f04f 0400 	mov.w	r4, #0
   2712c:	4a08      	ldr	r2, [pc, #32]	; (27150 <modem_info_params_get+0x18c>)
   2712e:	f363 0402 	bfi	r4, r3, #0, #3
   27132:	4b08      	ldr	r3, [pc, #32]	; (27154 <modem_info_params_get+0x190>)
   27134:	f366 04c5 	bfi	r4, r6, #3, #3
   27138:	1a9b      	subs	r3, r3, r2
   2713a:	08db      	lsrs	r3, r3, #3
   2713c:	f363 148f 	bfi	r4, r3, #6, #10
   27140:	4602      	mov	r2, r0
   27142:	4907      	ldr	r1, [pc, #28]	; (27160 <modem_info_params_get+0x19c>)
   27144:	4620      	mov	r0, r4
   27146:	e7be      	b.n	270c6 <modem_info_params_get+0x102>
		return -EINVAL;
   27148:	f06f 0015 	mvn.w	r0, #21
   2714c:	e7bf      	b.n	270ce <modem_info_params_get+0x10a>
   2714e:	bf00      	nop
   27150:	0004a688 	.word	0x0004a688
   27154:	0004a750 	.word	0x0004a750
   27158:	0004f727 	.word	0x0004f727
   2715c:	0004f745 	.word	0x0004f745
   27160:	0004f75f 	.word	0x0004f75f

00027164 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   27164:	b570      	push	{r4, r5, r6, lr}
   27166:	460e      	mov	r6, r1
   27168:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2716a:	4605      	mov	r5, r0
   2716c:	2800      	cmp	r0, #0
   2716e:	d065      	beq.n	2723c <network_data_add+0xd8>
   27170:	2900      	cmp	r1, #0
   27172:	d063      	beq.n	2723c <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   27174:	f022 fca2 	bl	49abc <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   27178:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   2717a:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2717c:	f105 0070 	add.w	r0, r5, #112	; 0x70
   27180:	f022 fc9c 	bl	49abc <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   27184:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   27186:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   27188:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   2718c:	f022 fc96 	bl	49abc <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   27190:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   27192:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   27194:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   27198:	f022 fc90 	bl	49abc <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2719c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   2719e:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   271a0:	f505 7044 	add.w	r0, r5, #784	; 0x310
   271a4:	f022 fc8a 	bl	49abc <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   271a8:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   271aa:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   271ac:	f505 7060 	add.w	r0, r5, #896	; 0x380
   271b0:	f022 fc84 	bl	49abc <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   271b4:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   271b6:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   271b8:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   271bc:	f7ff fd52 	bl	26c64 <modem_info_name_get>
	data_name[len] =  '\0';
   271c0:	ab1a      	add	r3, sp, #104	; 0x68
   271c2:	4418      	add	r0, r3
   271c4:	2300      	movs	r3, #0
   271c6:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   271ca:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   271ce:	ed93 0b00 	vldr	d0, [r3]
   271d2:	f7f3 fb61 	bl	1a898 <cJSON_CreateNumber>
	if (json_num == NULL) {
   271d6:	4602      	mov	r2, r0
   271d8:	b120      	cbz	r0, 271e4 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   271da:	a901      	add	r1, sp, #4
   271dc:	4630      	mov	r0, r6
   271de:	f021 ff10 	bl	49002 <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   271e2:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   271e4:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   271e8:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   271ec:	2b01      	cmp	r3, #1
   271ee:	d11a      	bne.n	27226 <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   271f0:	4610      	mov	r0, r2
   271f2:	4914      	ldr	r1, [pc, #80]	; (27244 <network_data_add+0xe0>)
   271f4:	f01a fa22 	bl	4163c <strcat>
   271f8:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   271fa:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   271fc:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   27200:	2b01      	cmp	r3, #1
   27202:	d105      	bne.n	27210 <network_data_add+0xac>
   27204:	4610      	mov	r0, r2
   27206:	4910      	ldr	r1, [pc, #64]	; (27248 <network_data_add+0xe4>)
   27208:	f01a fa18 	bl	4163c <strcat>
   2720c:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   2720e:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   27210:	490e      	ldr	r1, [pc, #56]	; (2724c <network_data_add+0xe8>)
   27212:	4630      	mov	r0, r6
   27214:	f022 fc3c 	bl	49a90 <json_add_str>

	if (ret) {
   27218:	b110      	cbz	r0, 27220 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   2721a:	480d      	ldr	r0, [pc, #52]	; (27250 <network_data_add+0xec>)
   2721c:	f020 fb55 	bl	478ca <printk>
	}

	return total_len;
}
   27220:	4620      	mov	r0, r4
   27222:	b01a      	add	sp, #104	; 0x68
   27224:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   27226:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   2722a:	2b01      	cmp	r3, #1
   2722c:	d1e6      	bne.n	271fc <network_data_add+0x98>
   2722e:	4610      	mov	r0, r2
   27230:	4908      	ldr	r1, [pc, #32]	; (27254 <network_data_add+0xf0>)
   27232:	f01a fa03 	bl	4163c <strcat>
		total_len += sizeof(nbiot_string);
   27236:	3407      	adds	r4, #7
   27238:	4602      	mov	r2, r0
   2723a:	e7df      	b.n	271fc <network_data_add+0x98>
		return -EINVAL;
   2723c:	f06f 0415 	mvn.w	r4, #21
   27240:	e7ee      	b.n	27220 <network_data_add+0xbc>
   27242:	bf00      	nop
   27244:	0004f7d2 	.word	0x0004f7d2
   27248:	0004f7cd 	.word	0x0004f7cd
   2724c:	0004f7fe 	.word	0x0004f7fe
   27250:	0004f80a 	.word	0x0004f80a
   27254:	0004f7f7 	.word	0x0004f7f7

00027258 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   27258:	b570      	push	{r4, r5, r6, lr}
   2725a:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2725c:	4606      	mov	r6, r0
   2725e:	b328      	cbz	r0, 272ac <device_data_add+0x54>
   27260:	b321      	cbz	r1, 272ac <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   27262:	f022 fc2b 	bl	49abc <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   27266:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   27268:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   2726a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2726e:	f022 fc25 	bl	49abc <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   27272:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   27274:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   27276:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   2727a:	f022 fc1f 	bl	49abc <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2727e:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   27282:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   27284:	490b      	ldr	r1, [pc, #44]	; (272b4 <device_data_add+0x5c>)
   27286:	4628      	mov	r0, r5
   27288:	f022 fc02 	bl	49a90 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2728c:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   27290:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   27292:	4909      	ldr	r1, [pc, #36]	; (272b8 <device_data_add+0x60>)
   27294:	4628      	mov	r0, r5
   27296:	f022 fbfb 	bl	49a90 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2729a:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2729e:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   272a0:	4906      	ldr	r1, [pc, #24]	; (272bc <device_data_add+0x64>)
   272a2:	4628      	mov	r0, r5
   272a4:	f022 fbf4 	bl	49a90 <json_add_str>
   272a8:	4420      	add	r0, r4

	return total_len;
}
   272aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   272ac:	f06f 0015 	mvn.w	r0, #21
   272b0:	e7fb      	b.n	272aa <device_data_add+0x52>
   272b2:	bf00      	nop
   272b4:	0004f7b4 	.word	0x0004f7b4
   272b8:	0004f7ba 	.word	0x0004f7ba
   272bc:	0004f7c5 	.word	0x0004f7c5

000272c0 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   272c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   272c4:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   272c6:	460d      	mov	r5, r1
   272c8:	2900      	cmp	r1, #0
   272ca:	d04f      	beq.n	2736c <modem_info_json_object_encode+0xac>
   272cc:	2800      	cmp	r0, #0
   272ce:	d04d      	beq.n	2736c <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   272d0:	4608      	mov	r0, r1
   272d2:	f021 fe89 	bl	48fe8 <cJSON_GetArraySize>
   272d6:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   272d8:	f7fe fac6 	bl	25868 <cJSON_CreateObject>
   272dc:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   272de:	f7fe fac3 	bl	25868 <cJSON_CreateObject>
   272e2:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   272e4:	f7fe fac0 	bl	25868 <cJSON_CreateObject>
   272e8:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   272ea:	f1b8 0f00 	cmp.w	r8, #0
   272ee:	d03a      	beq.n	27366 <modem_info_json_object_encode+0xa6>
   272f0:	b3cf      	cbz	r7, 27366 <modem_info_json_object_encode+0xa6>
   272f2:	b3c0      	cbz	r0, 27366 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   272f4:	4641      	mov	r1, r8
   272f6:	4648      	mov	r0, r9
   272f8:	f7ff ff34 	bl	27164 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   272fc:	2800      	cmp	r0, #0
   272fe:	dd06      	ble.n	2730e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   27300:	4642      	mov	r2, r8
   27302:	491c      	ldr	r1, [pc, #112]	; (27374 <modem_info_json_object_encode+0xb4>)
   27304:	4628      	mov	r0, r5
   27306:	f021 fe7c 	bl	49002 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   2730a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   2730e:	4639      	mov	r1, r7
   27310:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   27314:	f022 fc15 	bl	49b42 <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   27318:	2800      	cmp	r0, #0
   2731a:	dd05      	ble.n	27328 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   2731c:	463a      	mov	r2, r7
   2731e:	4916      	ldr	r1, [pc, #88]	; (27378 <modem_info_json_object_encode+0xb8>)
   27320:	4628      	mov	r0, r5
   27322:	f021 fe6e 	bl	49002 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   27326:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   27328:	4631      	mov	r1, r6
   2732a:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   2732e:	f7ff ff93 	bl	27258 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   27332:	2800      	cmp	r0, #0
   27334:	dd05      	ble.n	27342 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   27336:	4632      	mov	r2, r6
   27338:	4910      	ldr	r1, [pc, #64]	; (2737c <modem_info_json_object_encode+0xbc>)
   2733a:	4628      	mov	r0, r5
   2733c:	f021 fe61 	bl	49002 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   27340:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   27342:	4640      	mov	r0, r8
   27344:	f7fe f9ca 	bl	256dc <cJSON_Delete>
	cJSON_Delete(sim_obj);
   27348:	4638      	mov	r0, r7
   2734a:	f7fe f9c7 	bl	256dc <cJSON_Delete>
	cJSON_Delete(device_obj);
   2734e:	4630      	mov	r0, r6
   27350:	f7fe f9c4 	bl	256dc <cJSON_Delete>

	if (obj_count >= 0) {
   27354:	2c00      	cmp	r4, #0
   27356:	db03      	blt.n	27360 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   27358:	4628      	mov	r0, r5
   2735a:	f021 fe45 	bl	48fe8 <cJSON_GetArraySize>
   2735e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   27360:	4620      	mov	r0, r4
   27362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   27366:	f06f 040b 	mvn.w	r4, #11
   2736a:	e7ea      	b.n	27342 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2736c:	f06f 0415 	mvn.w	r4, #21
   27370:	e7f6      	b.n	27360 <modem_info_json_object_encode+0xa0>
   27372:	bf00      	nop
   27374:	0004f7d8 	.word	0x0004f7d8
   27378:	0004f7e4 	.word	0x0004f7e4
   2737c:	0004f7ec 	.word	0x0004f7ec

00027380 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   27380:	b570      	push	{r4, r5, r6, lr}
   27382:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   27384:	4c09      	ldr	r4, [pc, #36]	; (273ac <cloud_get_binding+0x2c>)
   27386:	4d0a      	ldr	r5, [pc, #40]	; (273b0 <cloud_get_binding+0x30>)
   27388:	42ac      	cmp	r4, r5
   2738a:	d101      	bne.n	27390 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2738c:	2400      	movs	r4, #0
   2738e:	e00a      	b.n	273a6 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   27390:	6823      	ldr	r3, [r4, #0]
   27392:	b90b      	cbnz	r3, 27398 <cloud_get_binding+0x18>
	     info++) {
   27394:	3408      	adds	r4, #8
   27396:	e7f7      	b.n	27388 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   27398:	6863      	ldr	r3, [r4, #4]
   2739a:	4630      	mov	r0, r6
   2739c:	6819      	ldr	r1, [r3, #0]
   2739e:	f7f2 fdfd 	bl	19f9c <strcmp>
   273a2:	2800      	cmp	r0, #0
   273a4:	d1f6      	bne.n	27394 <cloud_get_binding+0x14>
}
   273a6:	4620      	mov	r0, r4
   273a8:	bd70      	pop	{r4, r5, r6, pc}
   273aa:	bf00      	nop
   273ac:	000544f0 	.word	0x000544f0
   273b0:	000544f8 	.word	0x000544f8

000273b4 <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   273b4:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   273b6:	f04f 0000 	mov.w	r0, #0
   273ba:	2303      	movs	r3, #3
   273bc:	4a07      	ldr	r2, [pc, #28]	; (273dc <uninit+0x28>)
   273be:	f363 0002 	bfi	r0, r3, #0, #3
   273c2:	4b07      	ldr	r3, [pc, #28]	; (273e0 <uninit+0x2c>)
   273c4:	f36f 00c5 	bfc	r0, #3, #3
   273c8:	1a9b      	subs	r3, r3, r2
   273ca:	08db      	lsrs	r3, r3, #3
   273cc:	f363 108f 	bfi	r0, r3, #6, #10
   273d0:	4904      	ldr	r1, [pc, #16]	; (273e4 <uninit+0x30>)
   273d2:	f020 fa97 	bl	47904 <log_string_sync>

	return 0;
}
   273d6:	2000      	movs	r0, #0
   273d8:	bd08      	pop	{r3, pc}
   273da:	bf00      	nop
   273dc:	0004a688 	.word	0x0004a688
   273e0:	0004a770 	.word	0x0004a770
   273e4:	0004fa6c 	.word	0x0004fa6c

000273e8 <event_handler>:
{
   273e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   273ea:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   273ec:	4c75      	ldr	r4, [pc, #468]	; (275c4 <event_handler+0x1dc>)
{
   273ee:	b089      	sub	sp, #36	; 0x24
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   273f0:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   273f2:	221c      	movs	r2, #28
   273f4:	2100      	movs	r1, #0
   273f6:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   273f8:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   273fa:	f019 fe1d 	bl	41038 <memset>
	switch (nrf_cloud_evt->type) {
   273fe:	7833      	ldrb	r3, [r6, #0]
   27400:	4a71      	ldr	r2, [pc, #452]	; (275c8 <event_handler+0x1e0>)
   27402:	4972      	ldr	r1, [pc, #456]	; (275cc <event_handler+0x1e4>)
   27404:	2b05      	cmp	r3, #5
   27406:	eba2 0201 	sub.w	r2, r2, r1
   2740a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2740e:	4627      	mov	r7, r4
   27410:	f000 8098 	beq.w	27544 <event_handler+0x15c>
   27414:	d824      	bhi.n	27460 <event_handler+0x78>
   27416:	2b02      	cmp	r3, #2
   27418:	d063      	beq.n	274e2 <event_handler+0xfa>
   2741a:	d80f      	bhi.n	2743c <event_handler+0x54>
   2741c:	2b01      	cmp	r3, #1
   2741e:	d04f      	beq.n	274c0 <event_handler+0xd8>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   27420:	2104      	movs	r1, #4
   27422:	f04f 0000 	mov.w	r0, #0
   27426:	f361 0002 	bfi	r0, r1, #0, #3
   2742a:	f36f 00c5 	bfc	r0, #3, #3
   2742e:	f362 108f 	bfi	r0, r2, #6, #10
   27432:	4967      	ldr	r1, [pc, #412]	; (275d0 <event_handler+0x1e8>)
   27434:	4a67      	ldr	r2, [pc, #412]	; (275d4 <event_handler+0x1ec>)
   27436:	f020 fa65 	bl	47904 <log_string_sync>
}
   2743a:	e090      	b.n	2755e <event_handler+0x176>
	switch (nrf_cloud_evt->type) {
   2743c:	2b03      	cmp	r3, #3
   2743e:	d072      	beq.n	27526 <event_handler+0x13e>
   27440:	2b04      	cmp	r3, #4
   27442:	d1ed      	bne.n	27420 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   27444:	f04f 0000 	mov.w	r0, #0
   27448:	f363 0002 	bfi	r0, r3, #0, #3
   2744c:	f36f 00c5 	bfc	r0, #3, #3
   27450:	f362 108f 	bfi	r0, r2, #6, #10
   27454:	4960      	ldr	r1, [pc, #384]	; (275d8 <event_handler+0x1f0>)
   27456:	4a5f      	ldr	r2, [pc, #380]	; (275d4 <event_handler+0x1ec>)
   27458:	f020 fa54 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2745c:	2302      	movs	r3, #2
   2745e:	e03d      	b.n	274dc <event_handler+0xf4>
	switch (nrf_cloud_evt->type) {
   27460:	2b08      	cmp	r3, #8
   27462:	f04f 0704 	mov.w	r7, #4
   27466:	d07c      	beq.n	27562 <event_handler+0x17a>
   27468:	d816      	bhi.n	27498 <event_handler+0xb0>
   2746a:	2b06      	cmp	r3, #6
   2746c:	f000 8087 	beq.w	2757e <event_handler+0x196>
   27470:	2b07      	cmp	r3, #7
   27472:	d1d5      	bne.n	27420 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   27474:	f04f 0000 	mov.w	r0, #0
   27478:	f367 0002 	bfi	r0, r7, #0, #3
   2747c:	f36f 00c5 	bfc	r0, #3, #3
   27480:	f362 108f 	bfi	r0, r2, #6, #10
   27484:	4955      	ldr	r1, [pc, #340]	; (275dc <event_handler+0x1f4>)
   27486:	4a53      	ldr	r2, [pc, #332]	; (275d4 <event_handler+0x1ec>)
   27488:	f020 fa3c 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2748c:	f88d 7004 	strb.w	r7, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   27490:	68ea      	ldr	r2, [r5, #12]
   27492:	a901      	add	r1, sp, #4
   27494:	6820      	ldr	r0, [r4, #0]
   27496:	e03f      	b.n	27518 <event_handler+0x130>
	switch (nrf_cloud_evt->type) {
   27498:	2b09      	cmp	r3, #9
   2749a:	f000 8084 	beq.w	275a6 <event_handler+0x1be>
   2749e:	2bff      	cmp	r3, #255	; 0xff
   274a0:	d1be      	bne.n	27420 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   274a2:	f04f 0000 	mov.w	r0, #0
   274a6:	f367 0002 	bfi	r0, r7, #0, #3
   274aa:	f36f 00c5 	bfc	r0, #3, #3
   274ae:	f362 108f 	bfi	r0, r2, #6, #10
   274b2:	6873      	ldr	r3, [r6, #4]
   274b4:	4a47      	ldr	r2, [pc, #284]	; (275d4 <event_handler+0x1ec>)
   274b6:	494a      	ldr	r1, [pc, #296]	; (275e0 <event_handler+0x1f8>)
   274b8:	f020 fa24 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   274bc:	2303      	movs	r3, #3
   274be:	e00d      	b.n	274dc <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   274c0:	2304      	movs	r3, #4
   274c2:	f04f 0000 	mov.w	r0, #0
   274c6:	f363 0002 	bfi	r0, r3, #0, #3
   274ca:	f36f 00c5 	bfc	r0, #3, #3
   274ce:	f362 108f 	bfi	r0, r2, #6, #10
   274d2:	4944      	ldr	r1, [pc, #272]	; (275e4 <event_handler+0x1fc>)
   274d4:	4a3f      	ldr	r2, [pc, #252]	; (275d4 <event_handler+0x1ec>)
   274d6:	f020 fa15 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   274da:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_FOTA_DONE;
   274dc:	f88d 3004 	strb.w	r3, [sp, #4]
   274e0:	e7d6      	b.n	27490 <event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   274e2:	2404      	movs	r4, #4
   274e4:	f04f 0000 	mov.w	r0, #0
   274e8:	f364 0002 	bfi	r0, r4, #0, #3
   274ec:	f36f 00c5 	bfc	r0, #3, #3
   274f0:	f362 108f 	bfi	r0, r2, #6, #10
   274f4:	493c      	ldr	r1, [pc, #240]	; (275e8 <event_handler+0x200>)
   274f6:	4a37      	ldr	r2, [pc, #220]	; (275d4 <event_handler+0x1ec>)
   274f8:	f020 fa04 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   274fc:	2306      	movs	r3, #6
   274fe:	f88d 3004 	strb.w	r3, [sp, #4]
		if (nrf_cloud_evt->param.ua_req.sequence.len > 0) {
   27502:	68f3      	ldr	r3, [r6, #12]
   27504:	b15b      	cbz	r3, 2751e <event_handler+0x136>
			evt.data.pair_info.type = CLOUD_PAIR_SEQUENCE;
   27506:	2300      	movs	r3, #0
			      (u8_t *)&nrf_cloud_evt->param.ua_req.sequence.len;
   27508:	360c      	adds	r6, #12
			evt.data.pair_info.len =
   2750a:	e9cd 6403 	strd	r6, r4, [sp, #12]
			evt.data.pair_info.type = CLOUD_PAIR_SEQUENCE;
   2750e:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   27512:	68ea      	ldr	r2, [r5, #12]
   27514:	6838      	ldr	r0, [r7, #0]
   27516:	a901      	add	r1, sp, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   27518:	f022 fb2b 	bl	49b72 <cloud_notify_event>
		break;
   2751c:	e01f      	b.n	2755e <event_handler+0x176>
			evt.data.pair_info.type = CLOUD_PAIR_PIN;
   2751e:	2301      	movs	r3, #1
   27520:	f88d 3008 	strb.w	r3, [sp, #8]
   27524:	e7f5      	b.n	27512 <event_handler+0x12a>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   27526:	2304      	movs	r3, #4
   27528:	f04f 0000 	mov.w	r0, #0
   2752c:	f363 0002 	bfi	r0, r3, #0, #3
   27530:	f36f 00c5 	bfc	r0, #3, #3
   27534:	f362 108f 	bfi	r0, r2, #6, #10
   27538:	492c      	ldr	r1, [pc, #176]	; (275ec <event_handler+0x204>)
   2753a:	4a26      	ldr	r2, [pc, #152]	; (275d4 <event_handler+0x1ec>)
   2753c:	f020 f9e2 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   27540:	2307      	movs	r3, #7
   27542:	e7cb      	b.n	274dc <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   27544:	f04f 0000 	mov.w	r0, #0
   27548:	2304      	movs	r3, #4
   2754a:	f363 0002 	bfi	r0, r3, #0, #3
   2754e:	f36f 00c5 	bfc	r0, #3, #3
   27552:	f362 108f 	bfi	r0, r2, #6, #10
   27556:	4926      	ldr	r1, [pc, #152]	; (275f0 <event_handler+0x208>)
   27558:	4a1e      	ldr	r2, [pc, #120]	; (275d4 <event_handler+0x1ec>)
   2755a:	f020 f9d3 	bl	47904 <log_string_sync>
}
   2755e:	b009      	add	sp, #36	; 0x24
   27560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   27562:	f04f 0000 	mov.w	r0, #0
   27566:	f367 0002 	bfi	r0, r7, #0, #3
   2756a:	f36f 00c5 	bfc	r0, #3, #3
   2756e:	f362 108f 	bfi	r0, r2, #6, #10
   27572:	4920      	ldr	r1, [pc, #128]	; (275f4 <event_handler+0x20c>)
   27574:	4a17      	ldr	r2, [pc, #92]	; (275d4 <event_handler+0x1ec>)
   27576:	f020 f9c5 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   2757a:	2301      	movs	r3, #1
   2757c:	e7ae      	b.n	274dc <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2757e:	f04f 0000 	mov.w	r0, #0
   27582:	f367 0002 	bfi	r0, r7, #0, #3
   27586:	f36f 00c5 	bfc	r0, #3, #3
   2758a:	f362 108f 	bfi	r0, r2, #6, #10
   2758e:	491a      	ldr	r1, [pc, #104]	; (275f8 <event_handler+0x210>)
   27590:	4a10      	ldr	r2, [pc, #64]	; (275d4 <event_handler+0x1ec>)
   27592:	f020 f9b7 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   27596:	2305      	movs	r3, #5
   27598:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->param.data.ptr;
   2759c:	68f3      	ldr	r3, [r6, #12]
   2759e:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->param.data.len;
   275a0:	68b3      	ldr	r3, [r6, #8]
   275a2:	9303      	str	r3, [sp, #12]
   275a4:	e774      	b.n	27490 <event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   275a6:	f04f 0000 	mov.w	r0, #0
   275aa:	f367 0002 	bfi	r0, r7, #0, #3
   275ae:	f36f 00c5 	bfc	r0, #3, #3
   275b2:	f362 108f 	bfi	r0, r2, #6, #10
   275b6:	4911      	ldr	r1, [pc, #68]	; (275fc <event_handler+0x214>)
   275b8:	4a06      	ldr	r2, [pc, #24]	; (275d4 <event_handler+0x1ec>)
   275ba:	f020 f9a3 	bl	47904 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   275be:	2308      	movs	r3, #8
   275c0:	e78c      	b.n	274dc <event_handler+0xf4>
   275c2:	bf00      	nop
   275c4:	20023e70 	.word	0x20023e70
   275c8:	0004a770 	.word	0x0004a770
   275cc:	0004a688 	.word	0x0004a688
   275d0:	0004f9b8 	.word	0x0004f9b8
   275d4:	0004f85b 	.word	0x0004f85b
   275d8:	0004f8e1 	.word	0x0004f8e1
   275dc:	0004f91b 	.word	0x0004f91b
   275e0:	0004f966 	.word	0x0004f966
   275e4:	0004f86e 	.word	0x0004f86e
   275e8:	0004f894 	.word	0x0004f894
   275ec:	0004f8bf 	.word	0x0004f8bf
   275f0:	0004f8f9 	.word	0x0004f8f9
   275f4:	0004f93d 	.word	0x0004f93d
   275f8:	0004f982 	.word	0x0004f982
   275fc:	0004f99c 	.word	0x0004f99c

00027600 <nfsm_get_current_state>:
	return m_current_state;
   27600:	4b01      	ldr	r3, [pc, #4]	; (27608 <nfsm_get_current_state+0x8>)
   27602:	7818      	ldrb	r0, [r3, #0]
}
   27604:	4770      	bx	lr
   27606:	bf00      	nop
   27608:	2002b70a 	.word	0x2002b70a

0002760c <nfsm_set_current_state_and_notify>:
{
   2760c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   2760e:	2304      	movs	r3, #4
{
   27610:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   27612:	f04f 0000 	mov.w	r0, #0
   27616:	4a0d      	ldr	r2, [pc, #52]	; (2764c <nfsm_set_current_state_and_notify+0x40>)
   27618:	f363 0002 	bfi	r0, r3, #0, #3
   2761c:	4b0c      	ldr	r3, [pc, #48]	; (27650 <nfsm_set_current_state_and_notify+0x44>)
   2761e:	f36f 00c5 	bfc	r0, #3, #3
   27622:	1a9b      	subs	r3, r3, r2
   27624:	08db      	lsrs	r3, r3, #3
   27626:	f363 108f 	bfi	r0, r3, #6, #10
{
   2762a:	460c      	mov	r4, r1
	LOG_DBG("state: %d", state);
   2762c:	462b      	mov	r3, r5
   2762e:	4a09      	ldr	r2, [pc, #36]	; (27654 <nfsm_set_current_state_and_notify+0x48>)
   27630:	4909      	ldr	r1, [pc, #36]	; (27658 <nfsm_set_current_state_and_notify+0x4c>)
   27632:	f020 f967 	bl	47904 <log_string_sync>
	m_current_state = state;
   27636:	4b09      	ldr	r3, [pc, #36]	; (2765c <nfsm_set_current_state_and_notify+0x50>)
   27638:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   2763a:	4b09      	ldr	r3, [pc, #36]	; (27660 <nfsm_set_current_state_and_notify+0x54>)
   2763c:	681b      	ldr	r3, [r3, #0]
   2763e:	b123      	cbz	r3, 2764a <nfsm_set_current_state_and_notify+0x3e>
   27640:	b11c      	cbz	r4, 2764a <nfsm_set_current_state_and_notify+0x3e>
		m_event_handler(evt);
   27642:	4620      	mov	r0, r4
}
   27644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   27648:	4718      	bx	r3
}
   2764a:	bd70      	pop	{r4, r5, r6, pc}
   2764c:	0004a688 	.word	0x0004a688
   27650:	0004a770 	.word	0x0004a770
   27654:	0004f839 	.word	0x0004f839
   27658:	0004f9d3 	.word	0x0004f9d3
   2765c:	2002b70a 	.word	0x2002b70a
   27660:	20023e6c 	.word	0x20023e6c

00027664 <nrf_cloud_init>:
{
   27664:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   27666:	4c0d      	ldr	r4, [pc, #52]	; (2769c <nrf_cloud_init+0x38>)
{
   27668:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   2766a:	7823      	ldrb	r3, [r4, #0]
   2766c:	b983      	cbnz	r3, 27690 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   2766e:	6803      	ldr	r3, [r0, #0]
   27670:	b18b      	cbz	r3, 27696 <nrf_cloud_init+0x32>
	err = nfsm_init();
   27672:	f022 fb92 	bl	49d9a <nfsm_init>
	if (err) {
   27676:	b950      	cbnz	r0, 2768e <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   27678:	f022 fb01 	bl	49c7e <nrf_codec_init>
	if (err) {
   2767c:	b938      	cbnz	r0, 2768e <nrf_cloud_init+0x2a>
	err = nct_init();
   2767e:	f001 fb33 	bl	28ce8 <nct_init>
	if (err) {
   27682:	b920      	cbnz	r0, 2768e <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   27684:	4b06      	ldr	r3, [pc, #24]	; (276a0 <nrf_cloud_init+0x3c>)
   27686:	682a      	ldr	r2, [r5, #0]
   27688:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   2768a:	2301      	movs	r3, #1
   2768c:	7023      	strb	r3, [r4, #0]
}
   2768e:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   27690:	f06f 000c 	mvn.w	r0, #12
   27694:	e7fb      	b.n	2768e <nrf_cloud_init+0x2a>
		return -EINVAL;
   27696:	f06f 0015 	mvn.w	r0, #21
   2769a:	e7f8      	b.n	2768e <nrf_cloud_init+0x2a>
   2769c:	2002b70a 	.word	0x2002b70a
   276a0:	20023e6c 	.word	0x20023e6c

000276a4 <init>:
{
   276a4:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   276a6:	4a07      	ldr	r2, [pc, #28]	; (276c4 <init+0x20>)
   276a8:	ab02      	add	r3, sp, #8
   276aa:	f843 2d04 	str.w	r2, [r3, #-4]!
	backend->config->handler = handler;
   276ae:	6842      	ldr	r2, [r0, #4]
   276b0:	6051      	str	r1, [r2, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   276b2:	4a05      	ldr	r2, [pc, #20]	; (276c8 <init+0x24>)
   276b4:	6010      	str	r0, [r2, #0]
	return nrf_cloud_init(&params);
   276b6:	4618      	mov	r0, r3
   276b8:	f7ff ffd4 	bl	27664 <nrf_cloud_init>
}
   276bc:	b003      	add	sp, #12
   276be:	f85d fb04 	ldr.w	pc, [sp], #4
   276c2:	bf00      	nop
   276c4:	000273e9 	.word	0x000273e9
   276c8:	20023e70 	.word	0x20023e70

000276cc <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   276cc:	4b04      	ldr	r3, [pc, #16]	; (276e0 <nrf_cloud_connect+0x14>)
   276ce:	781b      	ldrb	r3, [r3, #0]
   276d0:	2b01      	cmp	r3, #1
   276d2:	d801      	bhi.n	276d8 <nrf_cloud_connect+0xc>
	return nct_connect();
   276d4:	f001 bc64 	b.w	28fa0 <nct_connect>
}
   276d8:	f06f 000c 	mvn.w	r0, #12
   276dc:	4770      	bx	lr
   276de:	bf00      	nop
   276e0:	2002b70a 	.word	0x2002b70a

000276e4 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   276e4:	4b04      	ldr	r3, [pc, #16]	; (276f8 <nrf_cloud_disconnect+0x14>)
   276e6:	781b      	ldrb	r3, [r3, #0]
   276e8:	2b0e      	cmp	r3, #14
   276ea:	d801      	bhi.n	276f0 <nrf_cloud_disconnect+0xc>
	return nct_disconnect();
   276ec:	f001 be8c 	b.w	29408 <nct_disconnect>
}
   276f0:	f06f 000c 	mvn.w	r0, #12
   276f4:	4770      	bx	lr
   276f6:	bf00      	nop
   276f8:	2002b70a 	.word	0x2002b70a

000276fc <nrf_cloud_user_associate>:
{
   276fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (param == NULL) {
   276fe:	4604      	mov	r4, r0
   27700:	b1f0      	cbz	r0, 27740 <nrf_cloud_user_associate+0x44>
	if (NOT_VALID_STATE(STATE_UA_INPUT_WAIT)) {
   27702:	4b12      	ldr	r3, [pc, #72]	; (2774c <nrf_cloud_user_associate+0x50>)
   27704:	781b      	ldrb	r3, [r3, #0]
   27706:	2b09      	cmp	r3, #9
   27708:	d81d      	bhi.n	27746 <nrf_cloud_user_associate+0x4a>
	struct nct_cc_data ua_msg = {
   2770a:	2210      	movs	r2, #16
   2770c:	2100      	movs	r1, #0
   2770e:	4668      	mov	r0, sp
   27710:	f019 fc92 	bl	41038 <memset>
   27714:	f242 534b 	movw	r3, #9547	; 0x254b
   27718:	9302      	str	r3, [sp, #8]
   2771a:	2301      	movs	r3, #1
	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   2771c:	4620      	mov	r0, r4
   2771e:	4669      	mov	r1, sp
	struct nct_cc_data ua_msg = {
   27720:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   27724:	f000 f8f8 	bl	27918 <nrf_cloud_encode_ua>
	if (err) {
   27728:	4604      	mov	r4, r0
   2772a:	b930      	cbnz	r0, 2773a <nrf_cloud_user_associate+0x3e>
	err = nct_cc_send(&ua_msg);
   2772c:	4668      	mov	r0, sp
   2772e:	f001 fd1b 	bl	29168 <nct_cc_send>
   27732:	4604      	mov	r4, r0
	nrf_cloud_free((void *)ua_msg.data.ptr);
   27734:	9801      	ldr	r0, [sp, #4]
   27736:	f022 fc54 	bl	49fe2 <k_free>
}
   2773a:	4620      	mov	r0, r4
   2773c:	b004      	add	sp, #16
   2773e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27740:	f06f 0415 	mvn.w	r4, #21
   27744:	e7f9      	b.n	2773a <nrf_cloud_user_associate+0x3e>
		return -EACCES;
   27746:	f06f 040c 	mvn.w	r4, #12
   2774a:	e7f6      	b.n	2773a <nrf_cloud_user_associate+0x3e>
   2774c:	2002b70a 	.word	0x2002b70a

00027750 <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   27750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   27752:	694d      	ldr	r5, [r1, #20]
   27754:	2d00      	cmp	r5, #0
   27756:	d17b      	bne.n	27850 <send+0x100>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   27758:	7b0e      	ldrb	r6, [r1, #12]
   2775a:	2e01      	cmp	r6, #1
   2775c:	d05b      	beq.n	27816 <send+0xc6>
   2775e:	d315      	bcc.n	2778c <send+0x3c>
   27760:	2e03      	cmp	r6, #3
   27762:	d03a      	beq.n	277da <send+0x8a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   27764:	2304      	movs	r3, #4
   27766:	f04f 0000 	mov.w	r0, #0
   2776a:	4a3b      	ldr	r2, [pc, #236]	; (27858 <send+0x108>)
   2776c:	f363 0002 	bfi	r0, r3, #0, #3
   27770:	4b3a      	ldr	r3, [pc, #232]	; (2785c <send+0x10c>)
   27772:	f365 00c5 	bfi	r0, r5, #3, #3
   27776:	1a9b      	subs	r3, r3, r2
   27778:	08db      	lsrs	r3, r3, #3
   2777a:	f363 108f 	bfi	r0, r3, #6, #10
   2777e:	4a38      	ldr	r2, [pc, #224]	; (27860 <send+0x110>)
   27780:	4633      	mov	r3, r6
   27782:	4938      	ldr	r1, [pc, #224]	; (27864 <send+0x114>)
   27784:	f020 f8be 	bl	47904 <log_string_sync>

	if (err) {
		return err;
	}

	return 0;
   27788:	462c      	mov	r4, r5
   2778a:	e00a      	b.n	277a2 <send+0x52>
		const struct nct_dc_data buf = {
   2778c:	684b      	ldr	r3, [r1, #4]
   2778e:	9502      	str	r5, [sp, #8]
   27790:	9300      	str	r3, [sp, #0]
   27792:	680b      	ldr	r3, [r1, #0]
   27794:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   27796:	7a0b      	ldrb	r3, [r1, #8]
   27798:	b933      	cbnz	r3, 277a8 <send+0x58>
			err = nct_dc_stream(&buf);
   2779a:	4668      	mov	r0, sp
   2779c:	f022 fb02 	bl	49da4 <nct_dc_stream>
			err = nct_dc_send(&buf);
   277a0:	4604      	mov	r4, r0
}
   277a2:	4620      	mov	r0, r4
   277a4:	b004      	add	sp, #16
   277a6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   277a8:	2b01      	cmp	r3, #1
   277aa:	d103      	bne.n	277b4 <send+0x64>
			err = nct_dc_send(&buf);
   277ac:	4668      	mov	r0, sp
   277ae:	f022 faf6 	bl	49d9e <nct_dc_send>
   277b2:	e7f5      	b.n	277a0 <send+0x50>
			LOG_ERR("Unsupported QoS setting.");
   277b4:	2301      	movs	r3, #1
   277b6:	f04f 0000 	mov.w	r0, #0
   277ba:	4a27      	ldr	r2, [pc, #156]	; (27858 <send+0x108>)
   277bc:	f363 0002 	bfi	r0, r3, #0, #3
   277c0:	4b26      	ldr	r3, [pc, #152]	; (2785c <send+0x10c>)
   277c2:	f365 00c5 	bfi	r0, r5, #3, #3
   277c6:	1a9b      	subs	r3, r3, r2
   277c8:	08db      	lsrs	r3, r3, #3
   277ca:	f363 108f 	bfi	r0, r3, #6, #10
   277ce:	4926      	ldr	r1, [pc, #152]	; (27868 <send+0x118>)
   277d0:	f020 f898 	bl	47904 <log_string_sync>
			return err;
   277d4:	f06f 0415 	mvn.w	r4, #21
   277d8:	e7e3      	b.n	277a2 <send+0x52>
		const struct nrf_cloud_ua_param ua = {
   277da:	684b      	ldr	r3, [r1, #4]
		err = nrf_cloud_user_associate(&ua);
   277dc:	4668      	mov	r0, sp
		const struct nrf_cloud_ua_param ua = {
   277de:	9301      	str	r3, [sp, #4]
   277e0:	680b      	ldr	r3, [r1, #0]
   277e2:	f88d 5000 	strb.w	r5, [sp]
   277e6:	9302      	str	r3, [sp, #8]
		err = nrf_cloud_user_associate(&ua);
   277e8:	f7ff ff88 	bl	276fc <nrf_cloud_user_associate>
		if (err) {
   277ec:	4604      	mov	r4, r0
   277ee:	2800      	cmp	r0, #0
   277f0:	d0d7      	beq.n	277a2 <send+0x52>
			LOG_ERR("nrf_cloud_user_associate failed: %d\n", err);
   277f2:	2301      	movs	r3, #1
   277f4:	f04f 0000 	mov.w	r0, #0
   277f8:	4a17      	ldr	r2, [pc, #92]	; (27858 <send+0x108>)
   277fa:	f363 0002 	bfi	r0, r3, #0, #3
   277fe:	4b17      	ldr	r3, [pc, #92]	; (2785c <send+0x10c>)
   27800:	f365 00c5 	bfi	r0, r5, #3, #3
   27804:	1a9b      	subs	r3, r3, r2
   27806:	4622      	mov	r2, r4
   27808:	08db      	lsrs	r3, r3, #3
   2780a:	4918      	ldr	r1, [pc, #96]	; (2786c <send+0x11c>)
   2780c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   27810:	f020 f878 	bl	47904 <log_string_sync>
   27814:	e7c5      	b.n	277a2 <send+0x52>
		struct nct_cc_data shadow_data = {
   27816:	684b      	ldr	r3, [r1, #4]
		err = nct_cc_send(&shadow_data);
   27818:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2781a:	9300      	str	r3, [sp, #0]
   2781c:	680b      	ldr	r3, [r1, #0]
   2781e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   27822:	9301      	str	r3, [sp, #4]
   27824:	f88d 600c 	strb.w	r6, [sp, #12]
		err = nct_cc_send(&shadow_data);
   27828:	f001 fc9e 	bl	29168 <nct_cc_send>
		if (err) {
   2782c:	4604      	mov	r4, r0
   2782e:	2800      	cmp	r0, #0
   27830:	d0b7      	beq.n	277a2 <send+0x52>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   27832:	f04f 0000 	mov.w	r0, #0
   27836:	4a08      	ldr	r2, [pc, #32]	; (27858 <send+0x108>)
   27838:	4b08      	ldr	r3, [pc, #32]	; (2785c <send+0x10c>)
   2783a:	f366 0002 	bfi	r0, r6, #0, #3
   2783e:	1a9b      	subs	r3, r3, r2
   27840:	f365 00c5 	bfi	r0, r5, #3, #3
   27844:	08db      	lsrs	r3, r3, #3
   27846:	f363 108f 	bfi	r0, r3, #6, #10
   2784a:	4622      	mov	r2, r4
   2784c:	4908      	ldr	r1, [pc, #32]	; (27870 <send+0x120>)
   2784e:	e7df      	b.n	27810 <send+0xc0>
		return -ENOTSUP;
   27850:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27854:	e7a5      	b.n	277a2 <send+0x52>
   27856:	bf00      	nop
   27858:	0004a688 	.word	0x0004a688
   2785c:	0004a770 	.word	0x0004a770
   27860:	0004f869 	.word	0x0004f869
   27864:	0004fa3e 	.word	0x0004fa3e
   27868:	0004f9e1 	.word	0x0004f9e1
   2786c:	0004f9fa 	.word	0x0004f9fa
   27870:	0004fa1f 	.word	0x0004fa1f

00027874 <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   27874:	4b01      	ldr	r3, [pc, #4]	; (2787c <nct_input+0x8>)
   27876:	7819      	ldrb	r1, [r3, #0]
   27878:	f000 bf8e 	b.w	28798 <nfsm_handle_incoming_event>
   2787c:	2002b70a 	.word	0x2002b70a

00027880 <nct_apply_update>:
	m_event_handler(&evt);
   27880:	4b01      	ldr	r3, [pc, #4]	; (27888 <nct_apply_update+0x8>)
   27882:	4802      	ldr	r0, [pc, #8]	; (2788c <nct_apply_update+0xc>)
   27884:	681b      	ldr	r3, [r3, #0]
   27886:	4718      	bx	r3
   27888:	20023e6c 	.word	0x20023e6c
   2788c:	0004af2c 	.word	0x0004af2c

00027890 <encode_ua_button_sequence>:
	}
};

static void encode_ua_button_sequence(const struct nrf_cloud_data *sequence,
				      struct nrf_cloud_data *output)
{
   27890:	b570      	push	{r4, r5, r6, lr}
   27892:	460c      	mov	r4, r1
	u32_t len = 0;
	const u8_t *input = sequence->ptr;
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   27894:	2101      	movs	r1, #1
{
   27896:	4606      	mov	r6, r0
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   27898:	e9d0 0500 	ldrd	r0, r5, [r0]
   2789c:	0840      	lsrs	r0, r0, #1
   2789e:	4408      	add	r0, r1
   278a0:	f022 fba4 	bl	49fec <k_calloc>

	if (encoded == NULL) {
   278a4:	4601      	mov	r1, r0
   278a6:	bb70      	cbnz	r0, 27906 <encode_ua_button_sequence+0x76>
		encoded[len++] = ((input[sequence->len - 1] << 4) & 0xF0);
	}

	output->ptr = encoded;
	output->len = len;
}
   278a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Mem alloc failed!");
   278ac:	2301      	movs	r3, #1
   278ae:	f04f 0000 	mov.w	r0, #0
   278b2:	4a16      	ldr	r2, [pc, #88]	; (2790c <encode_ua_button_sequence+0x7c>)
   278b4:	f363 0002 	bfi	r0, r3, #0, #3
   278b8:	4b15      	ldr	r3, [pc, #84]	; (27910 <encode_ua_button_sequence+0x80>)
   278ba:	f361 00c5 	bfi	r0, r1, #3, #3
   278be:	1a9b      	subs	r3, r3, r2
   278c0:	08db      	lsrs	r3, r3, #3
   278c2:	f363 108f 	bfi	r0, r3, #6, #10
   278c6:	4913      	ldr	r1, [pc, #76]	; (27914 <encode_ua_button_sequence+0x84>)
   278c8:	f020 b81c 	b.w	47904 <log_string_sync>
		    ((input[i] << 4) & 0xF0) + (input[i + 1] & 0x0F);
   278cc:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
   278d0:	4428      	add	r0, r5
   278d2:	7840      	ldrb	r0, [r0, #1]
   278d4:	0112      	lsls	r2, r2, #4
   278d6:	b2d2      	uxtb	r2, r2
   278d8:	f000 000f 	and.w	r0, r0, #15
   278dc:	4402      	add	r2, r0
		encoded[len++] =
   278de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   278e2:	3301      	adds	r3, #1
	for (u32_t i = 0; i < sequence->len; i += 2) {
   278e4:	6832      	ldr	r2, [r6, #0]
   278e6:	0058      	lsls	r0, r3, #1
   278e8:	4282      	cmp	r2, r0
   278ea:	d8ef      	bhi.n	278cc <encode_ua_button_sequence+0x3c>
	if (sequence->len % 2) {
   278ec:	07d0      	lsls	r0, r2, #31
   278ee:	d507      	bpl.n	27900 <encode_ua_button_sequence+0x70>
		encoded[len++] = ((input[sequence->len - 1] << 4) & 0xF0);
   278f0:	4415      	add	r5, r2
   278f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   278f6:	0112      	lsls	r2, r2, #4
   278f8:	b2d2      	uxtb	r2, r2
   278fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   278fe:	3301      	adds	r3, #1
	output->len = len;
   27900:	e9c4 3100 	strd	r3, r1, [r4]
}
   27904:	bd70      	pop	{r4, r5, r6, pc}
   27906:	2300      	movs	r3, #0
   27908:	e7ec      	b.n	278e4 <encode_ua_button_sequence+0x54>
   2790a:	bf00      	nop
   2790c:	0004a688 	.word	0x0004a688
   27910:	0004a778 	.word	0x0004a778
   27914:	0004faa9 	.word	0x0004faa9

00027918 <nrf_cloud_encode_ua>:
	return 0;
}

int nrf_cloud_encode_ua(const struct nrf_cloud_ua_param *input,
			struct nrf_cloud_data *output)
{
   27918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2791c:	b085      	sub	sp, #20
   2791e:	9100      	str	r1, [sp, #0]
	__ASSERT_NO_MSG(input != NULL);
   27920:	4604      	mov	r4, r0
   27922:	b948      	cbnz	r0, 27938 <nrf_cloud_encode_ua+0x20>
   27924:	495c      	ldr	r1, [pc, #368]	; (27a98 <nrf_cloud_encode_ua+0x180>)
   27926:	485d      	ldr	r0, [pc, #372]	; (27a9c <nrf_cloud_encode_ua+0x184>)
   27928:	23a3      	movs	r3, #163	; 0xa3
   2792a:	4a5d      	ldr	r2, [pc, #372]	; (27aa0 <nrf_cloud_encode_ua+0x188>)
   2792c:	f01f ffcd 	bl	478ca <printk>
   27930:	21a3      	movs	r1, #163	; 0xa3
   27932:	485b      	ldr	r0, [pc, #364]	; (27aa0 <nrf_cloud_encode_ua+0x188>)
   27934:	f01f ffd6 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   27938:	9b00      	ldr	r3, [sp, #0]
   2793a:	b94b      	cbnz	r3, 27950 <nrf_cloud_encode_ua+0x38>
   2793c:	4959      	ldr	r1, [pc, #356]	; (27aa4 <nrf_cloud_encode_ua+0x18c>)
   2793e:	4857      	ldr	r0, [pc, #348]	; (27a9c <nrf_cloud_encode_ua+0x184>)
   27940:	23a4      	movs	r3, #164	; 0xa4
   27942:	4a57      	ldr	r2, [pc, #348]	; (27aa0 <nrf_cloud_encode_ua+0x188>)
   27944:	f01f ffc1 	bl	478ca <printk>
   27948:	21a4      	movs	r1, #164	; 0xa4
   2794a:	4855      	ldr	r0, [pc, #340]	; (27aa0 <nrf_cloud_encode_ua+0x188>)
   2794c:	f01f ffca 	bl	478e4 <assert_post_action>

	/* Encoded sequence. */
	struct nrf_cloud_data enc_seq = {0};
	const char *method = ua_encode_info[input->type].desc_str;
   27950:	4620      	mov	r0, r4
	struct nrf_cloud_data enc_seq = {0};
   27952:	2300      	movs	r3, #0
	const char *method = ua_encode_info[input->type].desc_str;
   27954:	f810 2b04 	ldrb.w	r2, [r0], #4
	struct nrf_cloud_data enc_seq = {0};
   27958:	e9cd 3302 	strd	r3, r3, [sp, #8]
	const char *method = ua_encode_info[input->type].desc_str;
   2795c:	4b52      	ldr	r3, [pc, #328]	; (27aa8 <nrf_cloud_encode_ua+0x190>)
	int ret;

	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   2795e:	a902      	add	r1, sp, #8
	const char *method = ua_encode_info[input->type].desc_str;
   27960:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   27964:	9301      	str	r3, [sp, #4]
	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   27966:	f7ff ff93 	bl	27890 <encode_ua_button_sequence>

	cJSON *root_obj = cJSON_CreateObject();
   2796a:	f7fd ff7d 	bl	25868 <cJSON_CreateObject>
   2796e:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   27970:	f7fd ff7a 	bl	25868 <cJSON_CreateObject>
   27974:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   27976:	f7fd ff77 	bl	25868 <cJSON_CreateObject>
   2797a:	4681      	mov	r9, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2797c:	f7fd ff74 	bl	25868 <cJSON_CreateObject>
   27980:	4680      	mov	r8, r0
	cJSON *config_obj = cJSON_CreateObject();
   27982:	f7fd ff71 	bl	25868 <cJSON_CreateObject>
   27986:	4605      	mov	r5, r0
	cJSON *status_obj = cJSON_CreateObject();
   27988:	f7fd ff6e 	bl	25868 <cJSON_CreateObject>
   2798c:	4607      	mov	r7, r0
	cJSON *pattern_obj = cJSON_CreateIntArray(enc_seq.ptr, enc_seq.len);
   2798e:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   27992:	f021 fb39 	bl	49008 <cJSON_CreateIntArray>
   27996:	4683      	mov	fp, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   27998:	b15e      	cbz	r6, 279b2 <nrf_cloud_encode_ua+0x9a>
   2799a:	f1ba 0f00 	cmp.w	sl, #0
   2799e:	d008      	beq.n	279b2 <nrf_cloud_encode_ua+0x9a>
   279a0:	f1b9 0f00 	cmp.w	r9, #0
   279a4:	d005      	beq.n	279b2 <nrf_cloud_encode_ua+0x9a>
	    (reported_obj == NULL) || (pairing_obj == NULL) ||
   279a6:	f1b8 0f00 	cmp.w	r8, #0
   279aa:	d002      	beq.n	279b2 <nrf_cloud_encode_ua+0x9a>
   279ac:	b10d      	cbz	r5, 279b2 <nrf_cloud_encode_ua+0x9a>
	    (config_obj == NULL) || (status_obj == NULL)   ||
   279ae:	b107      	cbz	r7, 279b2 <nrf_cloud_encode_ua+0x9a>
   279b0:	b9e8      	cbnz	r0, 279ee <nrf_cloud_encode_ua+0xd6>
	    (pattern_obj == NULL)) {
		cJSON_Delete(root_obj);
   279b2:	4630      	mov	r0, r6
	ret += json_add_obj(reported_obj, "pairingStatus", status_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   279b4:	f7fd fe92 	bl	256dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   279b8:	4650      	mov	r0, sl
   279ba:	f7fd fe8f 	bl	256dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   279be:	4648      	mov	r0, r9
   279c0:	f7fd fe8c 	bl	256dc <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   279c4:	4640      	mov	r0, r8
   279c6:	f7fd fe89 	bl	256dc <cJSON_Delete>
		cJSON_Delete(config_obj);
   279ca:	4628      	mov	r0, r5
   279cc:	f7fd fe86 	bl	256dc <cJSON_Delete>
		cJSON_Delete(status_obj);
   279d0:	4638      	mov	r0, r7
   279d2:	f7fd fe83 	bl	256dc <cJSON_Delete>
		cJSON_Delete(pattern_obj);
   279d6:	4658      	mov	r0, fp
   279d8:	f7fd fe80 	bl	256dc <cJSON_Delete>

		nrf_cloud_free((void *)enc_seq.ptr);
   279dc:	9803      	ldr	r0, [sp, #12]
   279de:	f022 fb00 	bl	49fe2 <k_free>
		return -ENOMEM;
   279e2:	f06f 040b 	mvn.w	r4, #11

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   279e6:	4620      	mov	r0, r4
   279e8:	b005      	add	sp, #20
   279ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = json_add_num(config_obj, "iteration", 1);
   279ee:	4b2f      	ldr	r3, [pc, #188]	; (27aac <nrf_cloud_encode_ua+0x194>)
   279f0:	2200      	movs	r2, #0
   279f2:	492f      	ldr	r1, [pc, #188]	; (27ab0 <nrf_cloud_encode_ua+0x198>)
   279f4:	4628      	mov	r0, r5
   279f6:	f022 f8dd 	bl	49bb4 <json_add_num>
	ret += json_add_str(config_obj, "method", method);
   279fa:	9a01      	ldr	r2, [sp, #4]
	ret = json_add_num(config_obj, "iteration", 1);
   279fc:	4604      	mov	r4, r0
	ret += json_add_str(config_obj, "method", method);
   279fe:	492d      	ldr	r1, [pc, #180]	; (27ab4 <nrf_cloud_encode_ua+0x19c>)
   27a00:	4628      	mov	r0, r5
   27a02:	f022 f8e9 	bl	49bd8 <json_add_str>
   27a06:	4404      	add	r4, r0
	ret += json_add_num(config_obj, "length", enc_seq.len);
   27a08:	9802      	ldr	r0, [sp, #8]
   27a0a:	f7f0 fe4b 	bl	186a4 <__aeabi_ui2d>
   27a0e:	460b      	mov	r3, r1
   27a10:	4602      	mov	r2, r0
   27a12:	4929      	ldr	r1, [pc, #164]	; (27ab8 <nrf_cloud_encode_ua+0x1a0>)
   27a14:	4628      	mov	r0, r5
   27a16:	f022 f8cd 	bl	49bb4 <json_add_num>
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27a1a:	4a28      	ldr	r2, [pc, #160]	; (27abc <nrf_cloud_encode_ua+0x1a4>)
	ret += json_add_num(config_obj, "length", enc_seq.len);
   27a1c:	4404      	add	r4, r0
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27a1e:	4928      	ldr	r1, [pc, #160]	; (27ac0 <nrf_cloud_encode_ua+0x1a8>)
   27a20:	4640      	mov	r0, r8
   27a22:	f022 f8d9 	bl	49bd8 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27a26:	462a      	mov	r2, r5
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27a28:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27a2a:	4926      	ldr	r1, [pc, #152]	; (27ac4 <nrf_cloud_encode_ua+0x1ac>)
   27a2c:	4640      	mov	r0, r8
   27a2e:	f021 fae8 	bl	49002 <cJSON_AddItemToObject>
	ret += json_add_str(status_obj, "method", method);
   27a32:	9a01      	ldr	r2, [sp, #4]
   27a34:	491f      	ldr	r1, [pc, #124]	; (27ab4 <nrf_cloud_encode_ua+0x19c>)
   27a36:	4638      	mov	r0, r7
   27a38:	f022 f8ce 	bl	49bd8 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27a3c:	465a      	mov	r2, fp
   27a3e:	4922      	ldr	r1, [pc, #136]	; (27ac8 <nrf_cloud_encode_ua+0x1b0>)
	ret += json_add_str(status_obj, "method", method);
   27a40:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27a42:	4638      	mov	r0, r7
   27a44:	f021 fadd 	bl	49002 <cJSON_AddItemToObject>
   27a48:	4642      	mov	r2, r8
   27a4a:	4920      	ldr	r1, [pc, #128]	; (27acc <nrf_cloud_encode_ua+0x1b4>)
   27a4c:	4648      	mov	r0, r9
   27a4e:	f021 fad8 	bl	49002 <cJSON_AddItemToObject>
   27a52:	463a      	mov	r2, r7
   27a54:	491e      	ldr	r1, [pc, #120]	; (27ad0 <nrf_cloud_encode_ua+0x1b8>)
   27a56:	4648      	mov	r0, r9
   27a58:	f021 fad3 	bl	49002 <cJSON_AddItemToObject>
   27a5c:	464a      	mov	r2, r9
   27a5e:	491d      	ldr	r1, [pc, #116]	; (27ad4 <nrf_cloud_encode_ua+0x1bc>)
   27a60:	4650      	mov	r0, sl
   27a62:	f021 face 	bl	49002 <cJSON_AddItemToObject>
   27a66:	4630      	mov	r0, r6
   27a68:	4652      	mov	r2, sl
   27a6a:	4915      	ldr	r1, [pc, #84]	; (27ac0 <nrf_cloud_encode_ua+0x1a8>)
   27a6c:	f021 fac9 	bl	49002 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   27a70:	4630      	mov	r0, r6
	if (ret != 0) {
   27a72:	2c00      	cmp	r4, #0
   27a74:	d19e      	bne.n	279b4 <nrf_cloud_encode_ua+0x9c>
	buffer = cJSON_PrintUnformatted(root_obj);
   27a76:	f021 fab4 	bl	48fe2 <cJSON_PrintUnformatted>
   27a7a:	4605      	mov	r5, r0
	nrf_cloud_free((void *)enc_seq.ptr);
   27a7c:	9803      	ldr	r0, [sp, #12]
   27a7e:	f022 fab0 	bl	49fe2 <k_free>
	cJSON_Delete(root_obj);
   27a82:	4630      	mov	r0, r6
   27a84:	f7fd fe2a 	bl	256dc <cJSON_Delete>
	output->ptr = buffer;
   27a88:	9b00      	ldr	r3, [sp, #0]
	output->len = strlen(buffer);
   27a8a:	4628      	mov	r0, r5
	output->ptr = buffer;
   27a8c:	605d      	str	r5, [r3, #4]
	output->len = strlen(buffer);
   27a8e:	f019 fec9 	bl	41824 <strlen>
   27a92:	9b00      	ldr	r3, [sp, #0]
   27a94:	6018      	str	r0, [r3, #0]
	return 0;
   27a96:	e7a6      	b.n	279e6 <nrf_cloud_encode_ua+0xce>
   27a98:	0004fc28 	.word	0x0004fc28
   27a9c:	0004ccf0 	.word	0x0004ccf0
   27aa0:	0004fbe8 	.word	0x0004fbe8
   27aa4:	0004d453 	.word	0x0004d453
   27aa8:	0004af60 	.word	0x0004af60
   27aac:	3ff00000 	.word	0x3ff00000
   27ab0:	0004fc3d 	.word	0x0004fc3d
   27ab4:	0004fc47 	.word	0x0004fc47
   27ab8:	0004d56e 	.word	0x0004d56e
   27abc:	0004fc4e 	.word	0x0004fc4e
   27ac0:	0004d479 	.word	0x0004d479
   27ac4:	00052160 	.word	0x00052160
   27ac8:	0004fc5b 	.word	0x0004fc5b
   27acc:	0004fc63 	.word	0x0004fc63
   27ad0:	0004fc6b 	.word	0x0004fc6b
   27ad4:	0004d470 	.word	0x0004d470

00027ad8 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   27ad8:	b570      	push	{r4, r5, r6, lr}
   27ada:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   27adc:	460c      	mov	r4, r1
   27ade:	b959      	cbnz	r1, 27af8 <nrf_cloud_decode_requested_state+0x20>
   27ae0:	4958      	ldr	r1, [pc, #352]	; (27c44 <nrf_cloud_decode_requested_state+0x16c>)
   27ae2:	4859      	ldr	r0, [pc, #356]	; (27c48 <nrf_cloud_decode_requested_state+0x170>)
   27ae4:	f44f 739e 	mov.w	r3, #316	; 0x13c
   27ae8:	4a58      	ldr	r2, [pc, #352]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27aea:	f01f feee 	bl	478ca <printk>
   27aee:	f44f 719e 	mov.w	r1, #316	; 0x13c
   27af2:	4856      	ldr	r0, [pc, #344]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27af4:	f01f fef6 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   27af8:	b95d      	cbnz	r5, 27b12 <nrf_cloud_decode_requested_state+0x3a>
   27afa:	4955      	ldr	r1, [pc, #340]	; (27c50 <nrf_cloud_decode_requested_state+0x178>)
   27afc:	4852      	ldr	r0, [pc, #328]	; (27c48 <nrf_cloud_decode_requested_state+0x170>)
   27afe:	f240 133d 	movw	r3, #317	; 0x13d
   27b02:	4a52      	ldr	r2, [pc, #328]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b04:	f01f fee1 	bl	478ca <printk>
   27b08:	f240 113d 	movw	r1, #317	; 0x13d
   27b0c:	484f      	ldr	r0, [pc, #316]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b0e:	f01f fee9 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   27b12:	686b      	ldr	r3, [r5, #4]
   27b14:	b95b      	cbnz	r3, 27b2e <nrf_cloud_decode_requested_state+0x56>
   27b16:	494f      	ldr	r1, [pc, #316]	; (27c54 <nrf_cloud_decode_requested_state+0x17c>)
   27b18:	484b      	ldr	r0, [pc, #300]	; (27c48 <nrf_cloud_decode_requested_state+0x170>)
   27b1a:	f44f 739f 	mov.w	r3, #318	; 0x13e
   27b1e:	4a4b      	ldr	r2, [pc, #300]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b20:	f01f fed3 	bl	478ca <printk>
   27b24:	f44f 719f 	mov.w	r1, #318	; 0x13e
   27b28:	4848      	ldr	r0, [pc, #288]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b2a:	f01f fedb 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   27b2e:	682b      	ldr	r3, [r5, #0]
   27b30:	b95b      	cbnz	r3, 27b4a <nrf_cloud_decode_requested_state+0x72>
   27b32:	4949      	ldr	r1, [pc, #292]	; (27c58 <nrf_cloud_decode_requested_state+0x180>)
   27b34:	4844      	ldr	r0, [pc, #272]	; (27c48 <nrf_cloud_decode_requested_state+0x170>)
   27b36:	f240 133f 	movw	r3, #319	; 0x13f
   27b3a:	4a44      	ldr	r2, [pc, #272]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b3c:	f01f fec5 	bl	478ca <printk>
   27b40:	f240 113f 	movw	r1, #319	; 0x13f
   27b44:	4841      	ldr	r0, [pc, #260]	; (27c4c <nrf_cloud_decode_requested_state+0x174>)
   27b46:	f01f fecd 	bl	478e4 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   27b4a:	6868      	ldr	r0, [r5, #4]
   27b4c:	f021 fa45 	bl	48fda <cJSON_Parse>
	if (root_obj == NULL) {
   27b50:	4606      	mov	r6, r0
   27b52:	b9b8      	cbnz	r0, 27b84 <nrf_cloud_decode_requested_state+0xac>
		LOG_ERR("cJSON_Parse failed: %s",
   27b54:	2301      	movs	r3, #1
   27b56:	f04f 0400 	mov.w	r4, #0
   27b5a:	4a40      	ldr	r2, [pc, #256]	; (27c5c <nrf_cloud_decode_requested_state+0x184>)
   27b5c:	f363 0402 	bfi	r4, r3, #0, #3
   27b60:	4b3f      	ldr	r3, [pc, #252]	; (27c60 <nrf_cloud_decode_requested_state+0x188>)
   27b62:	f360 04c5 	bfi	r4, r0, #3, #3
   27b66:	1a9b      	subs	r3, r3, r2
   27b68:	08db      	lsrs	r3, r3, #3
   27b6a:	6868      	ldr	r0, [r5, #4]
   27b6c:	f363 148f 	bfi	r4, r3, #6, #10
   27b70:	f01f feda 	bl	47928 <log_strdup>
   27b74:	493b      	ldr	r1, [pc, #236]	; (27c64 <nrf_cloud_decode_requested_state+0x18c>)
   27b76:	4602      	mov	r2, r0
   27b78:	4620      	mov	r0, r4
   27b7a:	f01f fec3 	bl	47904 <log_string_sync>
	pairing_state_obj = json_object_decode(pairing_obj, "state");

	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		LOG_DBG("No valid state found!");
		cJSON_Delete(root_obj);
		return -ENOENT;
   27b7e:	f06f 0001 	mvn.w	r0, #1
	}

	cJSON_Delete(root_obj);

	return 0;
}
   27b82:	bd70      	pop	{r4, r5, r6, pc}
	state_obj = json_object_decode(root_obj, "state");
   27b84:	4938      	ldr	r1, [pc, #224]	; (27c68 <nrf_cloud_decode_requested_state+0x190>)
   27b86:	f022 f838 	bl	49bfa <json_object_decode>
		desired_obj = json_object_decode(root_obj, "desired");
   27b8a:	4938      	ldr	r1, [pc, #224]	; (27c6c <nrf_cloud_decode_requested_state+0x194>)
	if (state_obj == NULL) {
   27b8c:	b900      	cbnz	r0, 27b90 <nrf_cloud_decode_requested_state+0xb8>
		desired_obj = json_object_decode(root_obj, "desired");
   27b8e:	4630      	mov	r0, r6
		desired_obj = json_object_decode(state_obj, "desired");
   27b90:	f022 f833 	bl	49bfa <json_object_decode>
	topic_prefix_obj = json_object_decode(desired_obj,
   27b94:	4936      	ldr	r1, [pc, #216]	; (27c70 <nrf_cloud_decode_requested_state+0x198>)
		desired_obj = json_object_decode(state_obj, "desired");
   27b96:	4605      	mov	r5, r0
	topic_prefix_obj = json_object_decode(desired_obj,
   27b98:	f022 f82f 	bl	49bfa <json_object_decode>
	if (topic_prefix_obj != NULL) {
   27b9c:	b130      	cbz	r0, 27bac <nrf_cloud_decode_requested_state+0xd4>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   27b9e:	2307      	movs	r3, #7
		(*requested_state) = STATE_UA_PIN_WAIT;
   27ba0:	7023      	strb	r3, [r4, #0]
	cJSON_Delete(root_obj);
   27ba2:	4630      	mov	r0, r6
   27ba4:	f7fd fd9a 	bl	256dc <cJSON_Delete>
	return 0;
   27ba8:	2000      	movs	r0, #0
   27baa:	e7ea      	b.n	27b82 <nrf_cloud_decode_requested_state+0xaa>
	pairing_obj = json_object_decode(desired_obj, "pairing");
   27bac:	4931      	ldr	r1, [pc, #196]	; (27c74 <nrf_cloud_decode_requested_state+0x19c>)
   27bae:	4628      	mov	r0, r5
   27bb0:	f022 f823 	bl	49bfa <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   27bb4:	492c      	ldr	r1, [pc, #176]	; (27c68 <nrf_cloud_decode_requested_state+0x190>)
   27bb6:	f022 f820 	bl	49bfa <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   27bba:	b110      	cbz	r0, 27bc2 <nrf_cloud_decode_requested_state+0xea>
   27bbc:	68c3      	ldr	r3, [r0, #12]
   27bbe:	2b10      	cmp	r3, #16
   27bc0:	d014      	beq.n	27bec <nrf_cloud_decode_requested_state+0x114>
		LOG_DBG("No valid state found!");
   27bc2:	2304      	movs	r3, #4
   27bc4:	f04f 0000 	mov.w	r0, #0
   27bc8:	4a24      	ldr	r2, [pc, #144]	; (27c5c <nrf_cloud_decode_requested_state+0x184>)
   27bca:	f363 0002 	bfi	r0, r3, #0, #3
   27bce:	4b24      	ldr	r3, [pc, #144]	; (27c60 <nrf_cloud_decode_requested_state+0x188>)
   27bd0:	f36f 00c5 	bfc	r0, #3, #3
   27bd4:	1a9b      	subs	r3, r3, r2
   27bd6:	08db      	lsrs	r3, r3, #3
   27bd8:	f363 108f 	bfi	r0, r3, #6, #10
   27bdc:	4a26      	ldr	r2, [pc, #152]	; (27c78 <nrf_cloud_decode_requested_state+0x1a0>)
   27bde:	4927      	ldr	r1, [pc, #156]	; (27c7c <nrf_cloud_decode_requested_state+0x1a4>)
   27be0:	f01f fe90 	bl	47904 <log_string_sync>
		cJSON_Delete(root_obj);
   27be4:	4630      	mov	r0, r6
   27be6:	f7fd fd79 	bl	256dc <cJSON_Delete>
   27bea:	e7c8      	b.n	27b7e <nrf_cloud_decode_requested_state+0xa6>
	const char *state_str = pairing_state_obj->valuestring;
   27bec:	6905      	ldr	r5, [r0, #16]
	if (compare(state_str, INITIATE_STR)) {
   27bee:	4924      	ldr	r1, [pc, #144]	; (27c80 <nrf_cloud_decode_requested_state+0x1a8>)
   27bf0:	4628      	mov	r0, r5
   27bf2:	f022 f806 	bl	49c02 <compare>
   27bf6:	b108      	cbz	r0, 27bfc <nrf_cloud_decode_requested_state+0x124>
		(*requested_state) = STATE_UA_INITIATE;
   27bf8:	2308      	movs	r3, #8
   27bfa:	e7d1      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PATTERN_WAIT_STR)) {
   27bfc:	4921      	ldr	r1, [pc, #132]	; (27c84 <nrf_cloud_decode_requested_state+0x1ac>)
   27bfe:	4628      	mov	r0, r5
   27c00:	f021 ffff 	bl	49c02 <compare>
   27c04:	b108      	cbz	r0, 27c0a <nrf_cloud_decode_requested_state+0x132>
		(*requested_state) = STATE_UA_INPUT_WAIT;
   27c06:	2309      	movs	r3, #9
   27c08:	e7ca      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PATTERN_MISMATCH_STR)) {
   27c0a:	491f      	ldr	r1, [pc, #124]	; (27c88 <nrf_cloud_decode_requested_state+0x1b0>)
   27c0c:	4628      	mov	r0, r5
   27c0e:	f021 fff8 	bl	49c02 <compare>
   27c12:	b108      	cbz	r0, 27c18 <nrf_cloud_decode_requested_state+0x140>
		(*requested_state) = STATE_UA_INPUT_MISMATCH;
   27c14:	230a      	movs	r3, #10
   27c16:	e7c3      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, TIMEOUT_STR)) {
   27c18:	491c      	ldr	r1, [pc, #112]	; (27c8c <nrf_cloud_decode_requested_state+0x1b4>)
   27c1a:	4628      	mov	r0, r5
   27c1c:	f021 fff1 	bl	49c02 <compare>
   27c20:	b108      	cbz	r0, 27c26 <nrf_cloud_decode_requested_state+0x14e>
		(*requested_state) = STATE_UA_INPUT_TIMEOUT;
   27c22:	230b      	movs	r3, #11
   27c24:	e7bc      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PAIRED_STR)) {
   27c26:	491a      	ldr	r1, [pc, #104]	; (27c90 <nrf_cloud_decode_requested_state+0x1b8>)
   27c28:	4628      	mov	r0, r5
   27c2a:	f021 ffea 	bl	49c02 <compare>
   27c2e:	b108      	cbz	r0, 27c34 <nrf_cloud_decode_requested_state+0x15c>
		(*requested_state) = STATE_UA_COMPLETE;
   27c30:	230c      	movs	r3, #12
   27c32:	e7b5      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, DUA_PIN_STR)) {
   27c34:	4917      	ldr	r1, [pc, #92]	; (27c94 <nrf_cloud_decode_requested_state+0x1bc>)
   27c36:	4628      	mov	r0, r5
   27c38:	f021 ffe3 	bl	49c02 <compare>
   27c3c:	2800      	cmp	r0, #0
   27c3e:	d0b0      	beq.n	27ba2 <nrf_cloud_decode_requested_state+0xca>
		(*requested_state) = STATE_UA_PIN_WAIT;
   27c40:	2306      	movs	r3, #6
   27c42:	e7ad      	b.n	27ba0 <nrf_cloud_decode_requested_state+0xc8>
   27c44:	0004faf1 	.word	0x0004faf1
   27c48:	0004ccf0 	.word	0x0004ccf0
   27c4c:	0004fbe8 	.word	0x0004fbe8
   27c50:	0004fc28 	.word	0x0004fc28
   27c54:	0004fb10 	.word	0x0004fb10
   27c58:	0004fb2a 	.word	0x0004fb2a
   27c5c:	0004a688 	.word	0x0004a688
   27c60:	0004a778 	.word	0x0004a778
   27c64:	0004fb3a 	.word	0x0004fb3a
   27c68:	0004d479 	.word	0x0004d479
   27c6c:	0004fb51 	.word	0x0004fb51
   27c70:	0004fb59 	.word	0x0004fb59
   27c74:	0004fc63 	.word	0x0004fc63
   27c78:	0004fa88 	.word	0x0004fa88
   27c7c:	0004fb74 	.word	0x0004fb74
   27c80:	0004fb8e 	.word	0x0004fb8e
   27c84:	0004fc4e 	.word	0x0004fc4e
   27c88:	0004fb97 	.word	0x0004fb97
   27c8c:	0004fba8 	.word	0x0004fba8
   27c90:	0004fbb0 	.word	0x0004fbb0
   27c94:	0004fbb7 	.word	0x0004fbb7

00027c98 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   27c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c9c:	4604      	mov	r4, r0
   27c9e:	b087      	sub	sp, #28
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   27ca0:	4689      	mov	r9, r1
   27ca2:	b959      	cbnz	r1, 27cbc <nrf_cloud_encode_state+0x24>
   27ca4:	4991      	ldr	r1, [pc, #580]	; (27eec <nrf_cloud_encode_state+0x254>)
   27ca6:	4892      	ldr	r0, [pc, #584]	; (27ef0 <nrf_cloud_encode_state+0x258>)
   27ca8:	f44f 73c0 	mov.w	r3, #384	; 0x180
   27cac:	4a91      	ldr	r2, [pc, #580]	; (27ef4 <nrf_cloud_encode_state+0x25c>)
   27cae:	f01f fe0c 	bl	478ca <printk>
   27cb2:	f44f 71c0 	mov.w	r1, #384	; 0x180
   27cb6:	488f      	ldr	r0, [pc, #572]	; (27ef4 <nrf_cloud_encode_state+0x25c>)
   27cb8:	f01f fe14 	bl	478e4 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   27cbc:	f7fd fdd4 	bl	25868 <cJSON_CreateObject>
   27cc0:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   27cc2:	f7fd fdd1 	bl	25868 <cJSON_CreateObject>
   27cc6:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   27cc8:	f7fd fdce 	bl	25868 <cJSON_CreateObject>
   27ccc:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   27cce:	f7fd fdcb 	bl	25868 <cJSON_CreateObject>
   27cd2:	4605      	mov	r5, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   27cd4:	b127      	cbz	r7, 27ce0 <nrf_cloud_encode_state+0x48>
   27cd6:	f1b8 0f00 	cmp.w	r8, #0
   27cda:	d001      	beq.n	27ce0 <nrf_cloud_encode_state+0x48>
   27cdc:	b106      	cbz	r6, 27ce0 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   27cde:	b950      	cbnz	r0, 27cf6 <nrf_cloud_encode_state+0x5e>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   27ce0:	4638      	mov	r0, r7
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {

		cJSON_Delete(root_obj);
   27ce2:	f7fd fcfb 	bl	256dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   27ce6:	4640      	mov	r0, r8
   27ce8:	f7fd fcf8 	bl	256dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   27cec:	4630      	mov	r0, r6
   27cee:	f7fd fcf5 	bl	256dc <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   27cf2:	4628      	mov	r0, r5
   27cf4:	e077      	b.n	27de6 <nrf_cloud_encode_state+0x14e>
	switch (reported_state) {
   27cf6:	1fa0      	subs	r0, r4, #6
   27cf8:	2806      	cmp	r0, #6
   27cfa:	f200 80e4 	bhi.w	27ec6 <nrf_cloud_encode_state+0x22e>
   27cfe:	e8df f010 	tbh	[pc, r0, lsl #1]
   27d02:	0007      	.short	0x0007
   27d04:	004300a5 	.word	0x004300a5
   27d08:	009e0057 	.word	0x009e0057
   27d0c:	00e000e2 	.word	0x00e000e2
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   27d10:	4a79      	ldr	r2, [pc, #484]	; (27ef8 <nrf_cloud_encode_state+0x260>)
   27d12:	497a      	ldr	r1, [pc, #488]	; (27efc <nrf_cloud_encode_state+0x264>)
   27d14:	4628      	mov	r0, r5
   27d16:	f021 ff5f 	bl	49bd8 <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   27d1a:	4979      	ldr	r1, [pc, #484]	; (27f00 <nrf_cloud_encode_state+0x268>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   27d1c:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   27d1e:	4628      	mov	r0, r5
   27d20:	f021 ff7e 	bl	49c20 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   27d24:	4977      	ldr	r1, [pc, #476]	; (27f04 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_null(pairing_obj, "topics");
   27d26:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   27d28:	4628      	mov	r0, r5
   27d2a:	f021 ff79 	bl	49c20 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   27d2e:	4976      	ldr	r1, [pc, #472]	; (27f08 <nrf_cloud_encode_state+0x270>)
		ret += json_add_null(pairing_obj, "config");
   27d30:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   27d32:	4630      	mov	r0, r6
   27d34:	f021 ff74 	bl	49c20 <json_add_null>
   27d38:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   27d3a:	4630      	mov	r0, r6
   27d3c:	4973      	ldr	r1, [pc, #460]	; (27f0c <nrf_cloud_encode_state+0x274>)
		ret += json_add_null(pairing_obj, "topics");
   27d3e:	f021 ff6f 	bl	49c20 <json_add_null>
   27d42:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27d44:	462a      	mov	r2, r5
   27d46:	4972      	ldr	r1, [pc, #456]	; (27f10 <nrf_cloud_encode_state+0x278>)
   27d48:	4630      	mov	r0, r6
   27d4a:	f021 f95a 	bl	49002 <cJSON_AddItemToObject>
   27d4e:	4632      	mov	r2, r6
   27d50:	4970      	ldr	r1, [pc, #448]	; (27f14 <nrf_cloud_encode_state+0x27c>)
   27d52:	4640      	mov	r0, r8
   27d54:	f021 f955 	bl	49002 <cJSON_AddItemToObject>
   27d58:	4638      	mov	r0, r7
   27d5a:	4642      	mov	r2, r8
   27d5c:	4967      	ldr	r1, [pc, #412]	; (27efc <nrf_cloud_encode_state+0x264>)
   27d5e:	f021 f950 	bl	49002 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   27d62:	4638      	mov	r0, r7
	if (ret != 0) {
   27d64:	2c00      	cmp	r4, #0
   27d66:	d1bc      	bne.n	27ce2 <nrf_cloud_encode_state+0x4a>
		return -ENOMEM;
	}

	char *buffer;

	buffer = cJSON_PrintUnformatted(root_obj);
   27d68:	f021 f93b 	bl	48fe2 <cJSON_PrintUnformatted>
   27d6c:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   27d6e:	4638      	mov	r0, r7
   27d70:	f7fd fcb4 	bl	256dc <cJSON_Delete>

	if (buffer == NULL) {
   27d74:	2d00      	cmp	r5, #0
   27d76:	d038      	beq.n	27dea <nrf_cloud_encode_state+0x152>
		return -ENOMEM;
	}

	output->ptr = buffer;
   27d78:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   27d7c:	4628      	mov	r0, r5
   27d7e:	f019 fd51 	bl	41824 <strlen>
   27d82:	f8c9 0000 	str.w	r0, [r9]

	return 0;
   27d86:	e0ac      	b.n	27ee2 <nrf_cloud_encode_state+0x24a>
		ret += json_add_str(reported_obj, "stage", "prod");
   27d88:	4a63      	ldr	r2, [pc, #396]	; (27f18 <nrf_cloud_encode_state+0x280>)
   27d8a:	495f      	ldr	r1, [pc, #380]	; (27f08 <nrf_cloud_encode_state+0x270>)
   27d8c:	4630      	mov	r0, r6
   27d8e:	f021 ff23 	bl	49bd8 <json_add_str>
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   27d92:	4a62      	ldr	r2, [pc, #392]	; (27f1c <nrf_cloud_encode_state+0x284>)
		ret += json_add_str(reported_obj, "stage", "prod");
   27d94:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   27d96:	4959      	ldr	r1, [pc, #356]	; (27efc <nrf_cloud_encode_state+0x264>)
   27d98:	4628      	mov	r0, r5
   27d9a:	f021 ff1d 	bl	49bd8 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   27d9e:	4959      	ldr	r1, [pc, #356]	; (27f04 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   27da0:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   27da2:	4628      	mov	r0, r5
   27da4:	f021 ff3c 	bl	49c20 <json_add_null>
		ret += json_add_null(pairing_obj, "topics");
   27da8:	4955      	ldr	r1, [pc, #340]	; (27f00 <nrf_cloud_encode_state+0x268>)
		ret += json_add_null(pairing_obj, "config");
   27daa:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   27dac:	4628      	mov	r0, r5
   27dae:	e7c6      	b.n	27d3e <nrf_cloud_encode_state+0xa6>
		cJSON *config_obj = cJSON_CreateObject();
   27db0:	f7fd fd5a 	bl	25868 <cJSON_CreateObject>
   27db4:	4682      	mov	sl, r0
		cJSON *method_obj = cJSON_CreateString(
   27db6:	485a      	ldr	r0, [pc, #360]	; (27f20 <nrf_cloud_encode_state+0x288>)
   27db8:	f7fd fd32 	bl	25820 <cJSON_CreateString>
   27dbc:	4683      	mov	fp, r0
		if ((config_obj == NULL) || (method_obj == NULL)) {
   27dbe:	f1ba 0f00 	cmp.w	sl, #0
   27dc2:	d000      	beq.n	27dc6 <nrf_cloud_encode_state+0x12e>
   27dc4:	b9a0      	cbnz	r0, 27df0 <nrf_cloud_encode_state+0x158>
			cJSON_Delete(root_obj);
   27dc6:	4638      	mov	r0, r7
   27dc8:	f7fd fc88 	bl	256dc <cJSON_Delete>
			cJSON_Delete(state_obj);
   27dcc:	4640      	mov	r0, r8
   27dce:	f7fd fc85 	bl	256dc <cJSON_Delete>
			cJSON_Delete(reported_obj);
   27dd2:	4630      	mov	r0, r6
   27dd4:	f7fd fc82 	bl	256dc <cJSON_Delete>
			cJSON_Delete(pairing_obj);
   27dd8:	4628      	mov	r0, r5
   27dda:	f7fd fc7f 	bl	256dc <cJSON_Delete>
			cJSON_Delete(config_obj);
   27dde:	4650      	mov	r0, sl
   27de0:	f7fd fc7c 	bl	256dc <cJSON_Delete>
			cJSON_Delete(method_obj);
   27de4:	4658      	mov	r0, fp
		cJSON_Delete(pairing_obj);
   27de6:	f7fd fc79 	bl	256dc <cJSON_Delete>
		return -ENOMEM;
   27dea:	f06f 040b 	mvn.w	r4, #11
   27dee:	e078      	b.n	27ee2 <nrf_cloud_encode_state+0x24a>
		ret += json_add_num(config_obj, "iteration", 1);
   27df0:	4b4c      	ldr	r3, [pc, #304]	; (27f24 <nrf_cloud_encode_state+0x28c>)
   27df2:	2200      	movs	r2, #0
   27df4:	494c      	ldr	r1, [pc, #304]	; (27f28 <nrf_cloud_encode_state+0x290>)
   27df6:	4650      	mov	r0, sl
   27df8:	f021 fedc 	bl	49bb4 <json_add_num>
	cJSON_AddItemToObject(parent, str, item);
   27dfc:	465a      	mov	r2, fp
		ret += json_add_num(config_obj, "iteration", 1);
   27dfe:	4604      	mov	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27e00:	494a      	ldr	r1, [pc, #296]	; (27f2c <nrf_cloud_encode_state+0x294>)
   27e02:	4650      	mov	r0, sl
   27e04:	f021 f8fd 	bl	49002 <cJSON_AddItemToObject>
		ret += json_add_num(config_obj, "length", 6);
   27e08:	2200      	movs	r2, #0
   27e0a:	4b49      	ldr	r3, [pc, #292]	; (27f30 <nrf_cloud_encode_state+0x298>)
   27e0c:	4949      	ldr	r1, [pc, #292]	; (27f34 <nrf_cloud_encode_state+0x29c>)
   27e0e:	4650      	mov	r0, sl
   27e10:	f021 fed0 	bl	49bb4 <json_add_num>
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27e14:	4a48      	ldr	r2, [pc, #288]	; (27f38 <nrf_cloud_encode_state+0x2a0>)
		ret += json_add_num(config_obj, "length", 6);
   27e16:	4404      	add	r4, r0
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27e18:	4938      	ldr	r1, [pc, #224]	; (27efc <nrf_cloud_encode_state+0x264>)
   27e1a:	4628      	mov	r0, r5
   27e1c:	f021 fedc 	bl	49bd8 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27e20:	4652      	mov	r2, sl
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27e22:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27e24:	4937      	ldr	r1, [pc, #220]	; (27f04 <nrf_cloud_encode_state+0x26c>)
   27e26:	4628      	mov	r0, r5
   27e28:	f021 f8eb 	bl	49002 <cJSON_AddItemToObject>
		if (ret != 0) {
   27e2c:	2c00      	cmp	r4, #0
   27e2e:	d089      	beq.n	27d44 <nrf_cloud_encode_state+0xac>
			cJSON_Delete(config_obj);
   27e30:	4650      	mov	r0, sl
   27e32:	f7fd fc53 	bl	256dc <cJSON_Delete>
			cJSON_Delete(method_obj);
   27e36:	4658      	mov	r0, fp
			cJSON_Delete(topics_obj);
   27e38:	f7fd fc50 	bl	256dc <cJSON_Delete>
   27e3c:	e782      	b.n	27d44 <nrf_cloud_encode_state+0xac>
		ret += json_add_str(pairing_obj, "state", PATTERN_MISMATCH_STR);
   27e3e:	4a3f      	ldr	r2, [pc, #252]	; (27f3c <nrf_cloud_encode_state+0x2a4>)
   27e40:	492e      	ldr	r1, [pc, #184]	; (27efc <nrf_cloud_encode_state+0x264>)
   27e42:	4628      	mov	r0, r5
   27e44:	f021 fec8 	bl	49bd8 <json_add_str>
   27e48:	4604      	mov	r4, r0
		break;
   27e4a:	e77b      	b.n	27d44 <nrf_cloud_encode_state+0xac>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   27e4c:	aa04      	add	r2, sp, #16
   27e4e:	4669      	mov	r1, sp
   27e50:	a802      	add	r0, sp, #8
   27e52:	f001 fa45 	bl	292e0 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   27e56:	9a05      	ldr	r2, [sp, #20]
   27e58:	492c      	ldr	r1, [pc, #176]	; (27f0c <nrf_cloud_encode_state+0x274>)
   27e5a:	4630      	mov	r0, r6
   27e5c:	f021 febc 	bl	49bd8 <json_add_str>
   27e60:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   27e62:	4a37      	ldr	r2, [pc, #220]	; (27f40 <nrf_cloud_encode_state+0x2a8>)
   27e64:	4925      	ldr	r1, [pc, #148]	; (27efc <nrf_cloud_encode_state+0x264>)
   27e66:	4628      	mov	r0, r5
   27e68:	f021 feb6 	bl	49bd8 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   27e6c:	4925      	ldr	r1, [pc, #148]	; (27f04 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   27e6e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   27e70:	4628      	mov	r0, r5
   27e72:	f021 fed5 	bl	49c20 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   27e76:	4933      	ldr	r1, [pc, #204]	; (27f44 <nrf_cloud_encode_state+0x2ac>)
		ret += json_add_null(pairing_obj, "config");
   27e78:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   27e7a:	4630      	mov	r0, r6
   27e7c:	f021 fed0 	bl	49c20 <json_add_null>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL);
   27e80:	2200      	movs	r2, #0
   27e82:	a902      	add	r1, sp, #8
		ret += json_add_null(reported_obj, "pairingStatus");
   27e84:	4404      	add	r4, r0
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL);
   27e86:	a804      	add	r0, sp, #16
   27e88:	f001 fa2a 	bl	292e0 <nct_dc_endpoint_get>
		cJSON *topics_obj = cJSON_CreateObject();
   27e8c:	f7fd fcec 	bl	25868 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   27e90:	4682      	mov	sl, r0
   27e92:	2800      	cmp	r0, #0
   27e94:	f43f af24 	beq.w	27ce0 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   27e98:	9a05      	ldr	r2, [sp, #20]
   27e9a:	492b      	ldr	r1, [pc, #172]	; (27f48 <nrf_cloud_encode_state+0x2b0>)
   27e9c:	f021 fe9c 	bl	49bd8 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   27ea0:	9a03      	ldr	r2, [sp, #12]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   27ea2:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   27ea4:	4929      	ldr	r1, [pc, #164]	; (27f4c <nrf_cloud_encode_state+0x2b4>)
   27ea6:	4650      	mov	r0, sl
   27ea8:	f021 fe96 	bl	49bd8 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27eac:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   27eae:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27eb0:	4913      	ldr	r1, [pc, #76]	; (27f00 <nrf_cloud_encode_state+0x268>)
   27eb2:	4628      	mov	r0, r5
   27eb4:	f021 f8a5 	bl	49002 <cJSON_AddItemToObject>
		if (ret != 0) {
   27eb8:	2c00      	cmp	r4, #0
   27eba:	f43f af43 	beq.w	27d44 <nrf_cloud_encode_state+0xac>
			cJSON_Delete(topics_obj);
   27ebe:	4650      	mov	r0, sl
   27ec0:	e7ba      	b.n	27e38 <nrf_cloud_encode_state+0x1a0>
	ret = 0;
   27ec2:	2400      	movs	r4, #0
   27ec4:	e7cd      	b.n	27e62 <nrf_cloud_encode_state+0x1ca>
		cJSON_Delete(root_obj);
   27ec6:	4638      	mov	r0, r7
   27ec8:	f7fd fc08 	bl	256dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   27ecc:	4640      	mov	r0, r8
   27ece:	f7fd fc05 	bl	256dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   27ed2:	4630      	mov	r0, r6
   27ed4:	f7fd fc02 	bl	256dc <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   27ed8:	4628      	mov	r0, r5
   27eda:	f7fd fbff 	bl	256dc <cJSON_Delete>
		return -ENOTSUP;
   27ede:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   27ee2:	4620      	mov	r0, r4
   27ee4:	b007      	add	sp, #28
   27ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27eea:	bf00      	nop
   27eec:	0004d453 	.word	0x0004d453
   27ef0:	0004ccf0 	.word	0x0004ccf0
   27ef4:	0004fbe8 	.word	0x0004fbe8
   27ef8:	0004fbb7 	.word	0x0004fbb7
   27efc:	0004d479 	.word	0x0004d479
   27f00:	0004fbc6 	.word	0x0004fbc6
   27f04:	00052160 	.word	0x00052160
   27f08:	0004fbcd 	.word	0x0004fbcd
   27f0c:	0004fb59 	.word	0x0004fb59
   27f10:	0004fc63 	.word	0x0004fc63
   27f14:	0004d470 	.word	0x0004d470
   27f18:	0004fbd3 	.word	0x0004fbd3
   27f1c:	0004fb8e 	.word	0x0004fb8e
   27f20:	0004fbd8 	.word	0x0004fbd8
   27f24:	3ff00000 	.word	0x3ff00000
   27f28:	0004fc3d 	.word	0x0004fc3d
   27f2c:	0004fc47 	.word	0x0004fc47
   27f30:	40180000 	.word	0x40180000
   27f34:	0004d56e 	.word	0x0004d56e
   27f38:	0004fc4e 	.word	0x0004fc4e
   27f3c:	0004fb97 	.word	0x0004fb97
   27f40:	0004fbb0 	.word	0x0004fbb0
   27f44:	0004fc6b 	.word	0x0004fc6b
   27f48:	0004fbe0 	.word	0x0004fbe0
   27f4c:	0004fbe4 	.word	0x0004fbe4

00027f50 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   27f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f54:	4689      	mov	r9, r1
   27f56:	4690      	mov	r8, r2
   27f58:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   27f5a:	4604      	mov	r4, r0
   27f5c:	b958      	cbnz	r0, 27f76 <nrf_cloud_decode_data_endpoint+0x26>
   27f5e:	494f      	ldr	r1, [pc, #316]	; (2809c <nrf_cloud_decode_data_endpoint+0x14c>)
   27f60:	484f      	ldr	r0, [pc, #316]	; (280a0 <nrf_cloud_decode_data_endpoint+0x150>)
   27f62:	f240 2329 	movw	r3, #553	; 0x229
   27f66:	4a4f      	ldr	r2, [pc, #316]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27f68:	f01f fcaf 	bl	478ca <printk>
   27f6c:	f240 2129 	movw	r1, #553	; 0x229
   27f70:	484c      	ldr	r0, [pc, #304]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27f72:	f01f fcb7 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   27f76:	6863      	ldr	r3, [r4, #4]
   27f78:	b95b      	cbnz	r3, 27f92 <nrf_cloud_decode_data_endpoint+0x42>
   27f7a:	494b      	ldr	r1, [pc, #300]	; (280a8 <nrf_cloud_decode_data_endpoint+0x158>)
   27f7c:	4848      	ldr	r0, [pc, #288]	; (280a0 <nrf_cloud_decode_data_endpoint+0x150>)
   27f7e:	f240 232a 	movw	r3, #554	; 0x22a
   27f82:	4a48      	ldr	r2, [pc, #288]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27f84:	f01f fca1 	bl	478ca <printk>
   27f88:	f240 212a 	movw	r1, #554	; 0x22a
   27f8c:	4845      	ldr	r0, [pc, #276]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27f8e:	f01f fca9 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   27f92:	6823      	ldr	r3, [r4, #0]
   27f94:	b95b      	cbnz	r3, 27fae <nrf_cloud_decode_data_endpoint+0x5e>
   27f96:	4945      	ldr	r1, [pc, #276]	; (280ac <nrf_cloud_decode_data_endpoint+0x15c>)
   27f98:	4841      	ldr	r0, [pc, #260]	; (280a0 <nrf_cloud_decode_data_endpoint+0x150>)
   27f9a:	f240 232b 	movw	r3, #555	; 0x22b
   27f9e:	4a41      	ldr	r2, [pc, #260]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27fa0:	f01f fc93 	bl	478ca <printk>
   27fa4:	f240 212b 	movw	r1, #555	; 0x22b
   27fa8:	483e      	ldr	r0, [pc, #248]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27faa:	f01f fc9b 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   27fae:	f1b9 0f00 	cmp.w	r9, #0
   27fb2:	d10b      	bne.n	27fcc <nrf_cloud_decode_data_endpoint+0x7c>
   27fb4:	493e      	ldr	r1, [pc, #248]	; (280b0 <nrf_cloud_decode_data_endpoint+0x160>)
   27fb6:	483a      	ldr	r0, [pc, #232]	; (280a0 <nrf_cloud_decode_data_endpoint+0x150>)
   27fb8:	f44f 730b 	mov.w	r3, #556	; 0x22c
   27fbc:	4a39      	ldr	r2, [pc, #228]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27fbe:	f01f fc84 	bl	478ca <printk>
   27fc2:	f44f 710b 	mov.w	r1, #556	; 0x22c
   27fc6:	4837      	ldr	r0, [pc, #220]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27fc8:	f01f fc8c 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   27fcc:	f1b8 0f00 	cmp.w	r8, #0
   27fd0:	d10b      	bne.n	27fea <nrf_cloud_decode_data_endpoint+0x9a>
   27fd2:	4938      	ldr	r1, [pc, #224]	; (280b4 <nrf_cloud_decode_data_endpoint+0x164>)
   27fd4:	4832      	ldr	r0, [pc, #200]	; (280a0 <nrf_cloud_decode_data_endpoint+0x150>)
   27fd6:	f240 232d 	movw	r3, #557	; 0x22d
   27fda:	4a32      	ldr	r2, [pc, #200]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27fdc:	f01f fc75 	bl	478ca <printk>
   27fe0:	f240 212d 	movw	r1, #557	; 0x22d
   27fe4:	482f      	ldr	r0, [pc, #188]	; (280a4 <nrf_cloud_decode_data_endpoint+0x154>)
   27fe6:	f01f fc7d 	bl	478e4 <assert_post_action>
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *state_obj;
	cJSON *parent_obj;

	root_obj = cJSON_Parse(input->ptr);
   27fea:	6860      	ldr	r0, [r4, #4]
   27fec:	f020 fff5 	bl	48fda <cJSON_Parse>
	if (root_obj == NULL) {
   27ff0:	4605      	mov	r5, r0
   27ff2:	b330      	cbz	r0, 28042 <nrf_cloud_decode_data_endpoint+0xf2>
		return -ENOENT;
	}

	state_obj = json_object_decode(root_obj, "state");
   27ff4:	4930      	ldr	r1, [pc, #192]	; (280b8 <nrf_cloud_decode_data_endpoint+0x168>)
   27ff6:	f021 fe00 	bl	49bfa <json_object_decode>
	if (state_obj == NULL) {
		parent_obj = json_object_decode(root_obj, "desired");
   27ffa:	4930      	ldr	r1, [pc, #192]	; (280bc <nrf_cloud_decode_data_endpoint+0x16c>)
	if (state_obj == NULL) {
   27ffc:	b900      	cbnz	r0, 28000 <nrf_cloud_decode_data_endpoint+0xb0>
		parent_obj = json_object_decode(root_obj, "desired");
   27ffe:	4628      	mov	r0, r5
	} else {
		parent_obj = json_object_decode(state_obj, "desired");
   28000:	f021 fdfb 	bl	49bfa <json_object_decode>
   28004:	4606      	mov	r6, r0
	}

	if (m_endpoint != NULL) {
   28006:	b1ff      	cbz	r7, 28048 <nrf_cloud_decode_data_endpoint+0xf8>
		m_endpoint_obj = json_object_decode(parent_obj,
   28008:	492d      	ldr	r1, [pc, #180]	; (280c0 <nrf_cloud_decode_data_endpoint+0x170>)
   2800a:	f021 fdf6 	bl	49bfa <json_object_decode>
   2800e:	4604      	mov	r4, r0
						  "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   28010:	492c      	ldr	r1, [pc, #176]	; (280c4 <nrf_cloud_decode_data_endpoint+0x174>)
   28012:	4630      	mov	r0, r6
   28014:	f021 fdf1 	bl	49bfa <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   28018:	4927      	ldr	r1, [pc, #156]	; (280b8 <nrf_cloud_decode_data_endpoint+0x168>)
	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   2801a:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2801c:	f021 fded 	bl	49bfa <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   28020:	4929      	ldr	r1, [pc, #164]	; (280c8 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   28022:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   28024:	4630      	mov	r0, r6
   28026:	f021 fde8 	bl	49bfa <json_object_decode>
   2802a:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2802c:	f1ba 0f00 	cmp.w	sl, #0
   28030:	d004      	beq.n	2803c <nrf_cloud_decode_data_endpoint+0xec>
   28032:	b118      	cbz	r0, 2803c <nrf_cloud_decode_data_endpoint+0xec>
   28034:	f8da 300c 	ldr.w	r3, [sl, #12]
   28038:	2b10      	cmp	r3, #16
   2803a:	d007      	beq.n	2804c <nrf_cloud_decode_data_endpoint+0xfc>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2803c:	4628      	mov	r0, r5
   2803e:	f7fd fb4d 	bl	256dc <cJSON_Delete>
		return -ENOENT;
   28042:	f06f 0401 	mvn.w	r4, #1
   28046:	e012      	b.n	2806e <nrf_cloud_decode_data_endpoint+0x11e>
	cJSON *m_endpoint_obj = NULL;
   28048:	463c      	mov	r4, r7
   2804a:	e7e1      	b.n	28010 <nrf_cloud_decode_data_endpoint+0xc0>
	if (!compare(state_str, PAIRED_STR)) {
   2804c:	491f      	ldr	r1, [pc, #124]	; (280cc <nrf_cloud_decode_data_endpoint+0x17c>)
   2804e:	f8da 0010 	ldr.w	r0, [sl, #16]
   28052:	f021 fdd6 	bl	49c02 <compare>
   28056:	2800      	cmp	r0, #0
   28058:	d0f0      	beq.n	2803c <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2805a:	b15c      	cbz	r4, 28074 <nrf_cloud_decode_data_endpoint+0x124>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2805c:	4620      	mov	r0, r4
   2805e:	4639      	mov	r1, r7
   28060:	f021 fdee 	bl	49c40 <json_decode_and_alloc>
		if (err) {
   28064:	4604      	mov	r4, r0
   28066:	b128      	cbz	r0, 28074 <nrf_cloud_decode_data_endpoint+0x124>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   28068:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2806a:	f7fd fb37 	bl	256dc <cJSON_Delete>

	return err;
}
   2806e:	4620      	mov	r0, r4
   28070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   28074:	4916      	ldr	r1, [pc, #88]	; (280d0 <nrf_cloud_decode_data_endpoint+0x180>)
   28076:	4630      	mov	r0, r6
   28078:	f021 fdbf 	bl	49bfa <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2807c:	4649      	mov	r1, r9
   2807e:	f021 fddf 	bl	49c40 <json_decode_and_alloc>
	if (err) {
   28082:	4604      	mov	r4, r0
   28084:	2800      	cmp	r0, #0
   28086:	d1ef      	bne.n	28068 <nrf_cloud_decode_data_endpoint+0x118>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   28088:	4912      	ldr	r1, [pc, #72]	; (280d4 <nrf_cloud_decode_data_endpoint+0x184>)
   2808a:	4630      	mov	r0, r6
   2808c:	f021 fdb5 	bl	49bfa <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   28090:	4641      	mov	r1, r8
   28092:	f021 fdd5 	bl	49c40 <json_decode_and_alloc>
	if (err) {
   28096:	4604      	mov	r4, r0
   28098:	e7e6      	b.n	28068 <nrf_cloud_decode_data_endpoint+0x118>
   2809a:	bf00      	nop
   2809c:	0004fc28 	.word	0x0004fc28
   280a0:	0004ccf0 	.word	0x0004ccf0
   280a4:	0004fbe8 	.word	0x0004fbe8
   280a8:	0004fb10 	.word	0x0004fb10
   280ac:	0004fb2a 	.word	0x0004fb2a
   280b0:	0004fabb 	.word	0x0004fabb
   280b4:	0004fad6 	.word	0x0004fad6
   280b8:	0004d479 	.word	0x0004d479
   280bc:	0004fb51 	.word	0x0004fb51
   280c0:	0004fb59 	.word	0x0004fb59
   280c4:	0004fc63 	.word	0x0004fc63
   280c8:	0004fbc6 	.word	0x0004fbc6
   280cc:	0004fbb0 	.word	0x0004fbb0
   280d0:	0004fbe0 	.word	0x0004fbe0
   280d4:	0004fbe4 	.word	0x0004fbe4

000280d8 <drop_event_handler>:

	return err;
}

static int drop_event_handler(const struct nct_evt *nct_evt)
{
   280d8:	b510      	push	{r4, lr}
	LOG_DBG("Dropping FSM transition %d", nct_evt->type);
   280da:	2304      	movs	r3, #4
   280dc:	f04f 0400 	mov.w	r4, #0
   280e0:	4a08      	ldr	r2, [pc, #32]	; (28104 <drop_event_handler+0x2c>)
   280e2:	f363 0402 	bfi	r4, r3, #0, #3
   280e6:	4b08      	ldr	r3, [pc, #32]	; (28108 <drop_event_handler+0x30>)
   280e8:	f36f 04c5 	bfc	r4, #3, #3
   280ec:	1a9b      	subs	r3, r3, r2
   280ee:	08db      	lsrs	r3, r3, #3
   280f0:	f363 148f 	bfi	r4, r3, #6, #10
   280f4:	4a05      	ldr	r2, [pc, #20]	; (2810c <drop_event_handler+0x34>)
   280f6:	7a03      	ldrb	r3, [r0, #8]
   280f8:	4905      	ldr	r1, [pc, #20]	; (28110 <drop_event_handler+0x38>)
   280fa:	4620      	mov	r0, r4
   280fc:	f01f fc02 	bl	47904 <log_string_sync>
	return 0;
}
   28100:	2000      	movs	r0, #0
   28102:	bd10      	pop	{r4, pc}
   28104:	0004a688 	.word	0x0004a688
   28108:	0004a780 	.word	0x0004a780
   2810c:	0004fc89 	.word	0x0004fc89
   28110:	0004fce5 	.word	0x0004fce5

00028114 <state_ua_initiate>:
{
   28114:	b530      	push	{r4, r5, lr}
   28116:	b085      	sub	sp, #20
	struct nct_cc_data msg = {
   28118:	2210      	movs	r2, #16
   2811a:	2100      	movs	r1, #0
   2811c:	4668      	mov	r0, sp
   2811e:	f018 ff8b 	bl	41038 <memset>
   28122:	2501      	movs	r5, #1
   28124:	f641 2385 	movw	r3, #6789	; 0x1a85
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   28128:	4669      	mov	r1, sp
   2812a:	2008      	movs	r0, #8
	struct nct_cc_data msg = {
   2812c:	9302      	str	r3, [sp, #8]
   2812e:	f88d 500c 	strb.w	r5, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   28132:	f7ff fdb1 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   28136:	4604      	mov	r4, r0
   28138:	b190      	cbz	r0, 28160 <state_ua_initiate+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2813a:	f04f 0000 	mov.w	r0, #0
   2813e:	4a0e      	ldr	r2, [pc, #56]	; (28178 <state_ua_initiate+0x64>)
   28140:	4b0e      	ldr	r3, [pc, #56]	; (2817c <state_ua_initiate+0x68>)
   28142:	f365 0002 	bfi	r0, r5, #0, #3
   28146:	1a9b      	subs	r3, r3, r2
   28148:	f36f 00c5 	bfc	r0, #3, #3
   2814c:	08db      	lsrs	r3, r3, #3
   2814e:	f363 108f 	bfi	r0, r3, #6, #10
   28152:	4622      	mov	r2, r4
   28154:	490a      	ldr	r1, [pc, #40]	; (28180 <state_ua_initiate+0x6c>)
   28156:	f01f fbd5 	bl	47904 <log_string_sync>
}
   2815a:	4620      	mov	r0, r4
   2815c:	b005      	add	sp, #20
   2815e:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   28160:	4668      	mov	r0, sp
   28162:	f001 f801 	bl	29168 <nct_cc_send>
   28166:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   28168:	9801      	ldr	r0, [sp, #4]
   2816a:	f021 ff3a 	bl	49fe2 <k_free>
	nfsm_set_current_state_and_notify(STATE_UA_INITIATE, NULL);
   2816e:	2100      	movs	r1, #0
   28170:	2008      	movs	r0, #8
   28172:	f7ff fa4b 	bl	2760c <nfsm_set_current_state_and_notify>
	return err;
   28176:	e7f0      	b.n	2815a <state_ua_initiate+0x46>
   28178:	0004a688 	.word	0x0004a688
   2817c:	0004a780 	.word	0x0004a780
   28180:	0004fde5 	.word	0x0004fde5

00028184 <state_ua_pin_wait>:
{
   28184:	b530      	push	{r4, r5, lr}
	struct nct_cc_data msg = {
   28186:	2501      	movs	r5, #1
{
   28188:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   2818a:	2210      	movs	r2, #16
   2818c:	2100      	movs	r1, #0
   2818e:	a801      	add	r0, sp, #4
   28190:	f018 ff52 	bl	41038 <memset>
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   28194:	a901      	add	r1, sp, #4
   28196:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   28198:	9503      	str	r5, [sp, #12]
   2819a:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2819e:	f7ff fd7b 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   281a2:	4604      	mov	r4, r0
   281a4:	b190      	cbz	r0, 281cc <state_ua_pin_wait+0x48>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   281a6:	f04f 0000 	mov.w	r0, #0
   281aa:	4a1d      	ldr	r2, [pc, #116]	; (28220 <state_ua_pin_wait+0x9c>)
   281ac:	4b1d      	ldr	r3, [pc, #116]	; (28224 <state_ua_pin_wait+0xa0>)
   281ae:	f365 0002 	bfi	r0, r5, #0, #3
   281b2:	1a9b      	subs	r3, r3, r2
   281b4:	f36f 00c5 	bfc	r0, #3, #3
   281b8:	08db      	lsrs	r3, r3, #3
   281ba:	f363 108f 	bfi	r0, r3, #6, #10
   281be:	4622      	mov	r2, r4
   281c0:	4919      	ldr	r1, [pc, #100]	; (28228 <state_ua_pin_wait+0xa4>)
   281c2:	f01f fb9f 	bl	47904 <log_string_sync>
}
   281c6:	4620      	mov	r0, r4
   281c8:	b00b      	add	sp, #44	; 0x2c
   281ca:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   281cc:	a801      	add	r0, sp, #4
   281ce:	f000 ffcb 	bl	29168 <nct_cc_send>
	if (err) {
   281d2:	4604      	mov	r4, r0
   281d4:	b198      	cbz	r0, 281fe <state_ua_pin_wait+0x7a>
		LOG_ERR("nct_cc_send failed %d", err);
   281d6:	f04f 0000 	mov.w	r0, #0
   281da:	4a11      	ldr	r2, [pc, #68]	; (28220 <state_ua_pin_wait+0x9c>)
   281dc:	4b11      	ldr	r3, [pc, #68]	; (28224 <state_ua_pin_wait+0xa0>)
   281de:	f365 0002 	bfi	r0, r5, #0, #3
   281e2:	1a9b      	subs	r3, r3, r2
   281e4:	08db      	lsrs	r3, r3, #3
   281e6:	f36f 00c5 	bfc	r0, #3, #3
   281ea:	f363 108f 	bfi	r0, r3, #6, #10
   281ee:	4622      	mov	r2, r4
   281f0:	490e      	ldr	r1, [pc, #56]	; (2822c <state_ua_pin_wait+0xa8>)
   281f2:	f01f fb87 	bl	47904 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   281f6:	9802      	ldr	r0, [sp, #8]
   281f8:	f021 fef3 	bl	49fe2 <k_free>
		return err;
   281fc:	e7e3      	b.n	281c6 <state_ua_pin_wait+0x42>
	nrf_cloud_free((void *)msg.data.ptr);
   281fe:	9802      	ldr	r0, [sp, #8]
   28200:	f021 feef 	bl	49fe2 <k_free>
	struct nrf_cloud_evt evt = {
   28204:	2214      	movs	r2, #20
   28206:	4621      	mov	r1, r4
   28208:	eb0d 0002 	add.w	r0, sp, r2
   2820c:	f018 ff14 	bl	41038 <memset>
   28210:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   28212:	a905      	add	r1, sp, #20
   28214:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   28216:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2821a:	f7ff f9f7 	bl	2760c <nfsm_set_current_state_and_notify>
	return 0;
   2821e:	e7d2      	b.n	281c6 <state_ua_pin_wait+0x42>
   28220:	0004a688 	.word	0x0004a688
   28224:	0004a780 	.word	0x0004a780
   28228:	0004fde5 	.word	0x0004fde5
   2822c:	0004fe06 	.word	0x0004fe06

00028230 <initiate_cmd_handler>:
	}
	}
}

static int initiate_cmd_handler(const struct nct_evt *nct_evt)
{
   28230:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   28232:	6840      	ldr	r0, [r0, #4]
   28234:	f10d 0107 	add.w	r1, sp, #7
   28238:	f7ff fc4e 	bl	27ad8 <nrf_cloud_decode_requested_state>
	if (err) {
   2823c:	4604      	mov	r4, r0
   2823e:	b198      	cbz	r0, 28268 <initiate_cmd_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   28240:	2301      	movs	r3, #1
   28242:	f04f 0000 	mov.w	r0, #0
   28246:	4a0f      	ldr	r2, [pc, #60]	; (28284 <initiate_cmd_handler+0x54>)
   28248:	f363 0002 	bfi	r0, r3, #0, #3
   2824c:	4b0e      	ldr	r3, [pc, #56]	; (28288 <initiate_cmd_handler+0x58>)
   2824e:	f36f 00c5 	bfc	r0, #3, #3
   28252:	1a9b      	subs	r3, r3, r2
   28254:	08db      	lsrs	r3, r3, #3
   28256:	f363 108f 	bfi	r0, r3, #6, #10
   2825a:	4622      	mov	r2, r4
   2825c:	490b      	ldr	r1, [pc, #44]	; (2828c <initiate_cmd_handler+0x5c>)
   2825e:	f01f fb51 	bl	47904 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   28262:	4620      	mov	r0, r4
   28264:	b002      	add	sp, #8
   28266:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_INITIATE) {
   28268:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2826c:	2b08      	cmp	r3, #8
   2826e:	d103      	bne.n	28278 <initiate_cmd_handler+0x48>
		return state_ua_initiate();
   28270:	f7ff ff50 	bl	28114 <state_ua_initiate>
		return state_ua_pin_wait();
   28274:	4604      	mov	r4, r0
   28276:	e7f4      	b.n	28262 <initiate_cmd_handler+0x32>
	} else if (expected_state == STATE_UA_PIN_WAIT) {
   28278:	2b06      	cmp	r3, #6
   2827a:	d1f2      	bne.n	28262 <initiate_cmd_handler+0x32>
		return state_ua_pin_wait();
   2827c:	f7ff ff82 	bl	28184 <state_ua_pin_wait>
   28280:	e7f8      	b.n	28274 <initiate_cmd_handler+0x44>
   28282:	bf00      	nop
   28284:	0004a688 	.word	0x0004a688
   28288:	0004a780 	.word	0x0004a780
   2828c:	0004fd04 	.word	0x0004fd04

00028290 <state_ua_pin_complete>:
{
   28290:	b530      	push	{r4, r5, lr}
   28292:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   28294:	2210      	movs	r2, #16
   28296:	2100      	movs	r1, #0
   28298:	a801      	add	r0, sp, #4
   2829a:	f018 fecd 	bl	41038 <memset>
   2829e:	2501      	movs	r5, #1
   282a0:	f641 63d2 	movw	r3, #7890	; 0x1ed2
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   282a4:	a901      	add	r1, sp, #4
   282a6:	2007      	movs	r0, #7
	struct nct_cc_data msg = {
   282a8:	9303      	str	r3, [sp, #12]
   282aa:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   282ae:	f7ff fcf3 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   282b2:	4604      	mov	r4, r0
   282b4:	b190      	cbz	r0, 282dc <state_ua_pin_complete+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   282b6:	f04f 0000 	mov.w	r0, #0
   282ba:	4a1d      	ldr	r2, [pc, #116]	; (28330 <state_ua_pin_complete+0xa0>)
   282bc:	4b1d      	ldr	r3, [pc, #116]	; (28334 <state_ua_pin_complete+0xa4>)
   282be:	f365 0002 	bfi	r0, r5, #0, #3
   282c2:	1a9b      	subs	r3, r3, r2
   282c4:	f36f 00c5 	bfc	r0, #3, #3
   282c8:	08db      	lsrs	r3, r3, #3
   282ca:	f363 108f 	bfi	r0, r3, #6, #10
   282ce:	4622      	mov	r2, r4
   282d0:	4919      	ldr	r1, [pc, #100]	; (28338 <state_ua_pin_complete+0xa8>)
   282d2:	f01f fb17 	bl	47904 <log_string_sync>
}
   282d6:	4620      	mov	r0, r4
   282d8:	b00b      	add	sp, #44	; 0x2c
   282da:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   282dc:	a801      	add	r0, sp, #4
   282de:	f000 ff43 	bl	29168 <nct_cc_send>
	if (err) {
   282e2:	4604      	mov	r4, r0
   282e4:	b198      	cbz	r0, 2830e <state_ua_pin_complete+0x7e>
		LOG_ERR("nct_cc_send failed %d", err);
   282e6:	f04f 0000 	mov.w	r0, #0
   282ea:	4a11      	ldr	r2, [pc, #68]	; (28330 <state_ua_pin_complete+0xa0>)
   282ec:	4b11      	ldr	r3, [pc, #68]	; (28334 <state_ua_pin_complete+0xa4>)
   282ee:	f365 0002 	bfi	r0, r5, #0, #3
   282f2:	1a9b      	subs	r3, r3, r2
   282f4:	08db      	lsrs	r3, r3, #3
   282f6:	f36f 00c5 	bfc	r0, #3, #3
   282fa:	f363 108f 	bfi	r0, r3, #6, #10
   282fe:	4622      	mov	r2, r4
   28300:	490e      	ldr	r1, [pc, #56]	; (2833c <state_ua_pin_complete+0xac>)
   28302:	f01f faff 	bl	47904 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   28306:	9802      	ldr	r0, [sp, #8]
   28308:	f021 fe6b 	bl	49fe2 <k_free>
		return err;
   2830c:	e7e3      	b.n	282d6 <state_ua_pin_complete+0x46>
	nrf_cloud_free((void *)msg.data.ptr);
   2830e:	9802      	ldr	r0, [sp, #8]
   28310:	f021 fe67 	bl	49fe2 <k_free>
	struct nrf_cloud_evt evt = {
   28314:	2214      	movs	r2, #20
   28316:	4621      	mov	r1, r4
   28318:	eb0d 0002 	add.w	r0, sp, r2
   2831c:	f018 fe8c 	bl	41038 <memset>
   28320:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   28322:	a905      	add	r1, sp, #20
   28324:	2007      	movs	r0, #7
	struct nrf_cloud_evt evt = {
   28326:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2832a:	f7ff f96f 	bl	2760c <nfsm_set_current_state_and_notify>
	return err;
   2832e:	e7d2      	b.n	282d6 <state_ua_pin_complete+0x46>
   28330:	0004a688 	.word	0x0004a688
   28334:	0004a780 	.word	0x0004a780
   28338:	0004fde5 	.word	0x0004fde5
   2833c:	0004fe06 	.word	0x0004fe06

00028340 <state_ua_input_wait>:
{
   28340:	b530      	push	{r4, r5, lr}
	struct nct_cc_data msg = {
   28342:	2501      	movs	r5, #1
{
   28344:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   28346:	2210      	movs	r2, #16
   28348:	2100      	movs	r1, #0
   2834a:	a801      	add	r0, sp, #4
   2834c:	f018 fe74 	bl	41038 <memset>
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   28350:	a901      	add	r1, sp, #4
   28352:	2009      	movs	r0, #9
	struct nct_cc_data msg = {
   28354:	9503      	str	r5, [sp, #12]
   28356:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   2835a:	f7ff fc9d 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   2835e:	4604      	mov	r4, r0
   28360:	b190      	cbz	r0, 28388 <state_ua_input_wait+0x48>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   28362:	f04f 0000 	mov.w	r0, #0
   28366:	4a14      	ldr	r2, [pc, #80]	; (283b8 <state_ua_input_wait+0x78>)
   28368:	4b14      	ldr	r3, [pc, #80]	; (283bc <state_ua_input_wait+0x7c>)
   2836a:	f365 0002 	bfi	r0, r5, #0, #3
   2836e:	1a9b      	subs	r3, r3, r2
   28370:	f36f 00c5 	bfc	r0, #3, #3
   28374:	08db      	lsrs	r3, r3, #3
   28376:	f363 108f 	bfi	r0, r3, #6, #10
   2837a:	4622      	mov	r2, r4
   2837c:	4910      	ldr	r1, [pc, #64]	; (283c0 <state_ua_input_wait+0x80>)
   2837e:	f01f fac1 	bl	47904 <log_string_sync>
}
   28382:	4620      	mov	r0, r4
   28384:	b00b      	add	sp, #44	; 0x2c
   28386:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   28388:	a801      	add	r0, sp, #4
   2838a:	f000 feed 	bl	29168 <nct_cc_send>
   2838e:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   28390:	9802      	ldr	r0, [sp, #8]
   28392:	f021 fe26 	bl	49fe2 <k_free>
	struct nrf_cloud_evt evt = {
   28396:	2214      	movs	r2, #20
   28398:	2100      	movs	r1, #0
   2839a:	eb0d 0002 	add.w	r0, sp, r2
   2839e:	f018 fe4b 	bl	41038 <memset>
   283a2:	2302      	movs	r3, #2
   283a4:	f88d 3014 	strb.w	r3, [sp, #20]
   283a8:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   283aa:	a905      	add	r1, sp, #20
   283ac:	2009      	movs	r0, #9
	struct nrf_cloud_evt evt = {
   283ae:	9308      	str	r3, [sp, #32]
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   283b0:	f7ff f92c 	bl	2760c <nfsm_set_current_state_and_notify>
	return err;
   283b4:	e7e5      	b.n	28382 <state_ua_input_wait+0x42>
   283b6:	bf00      	nop
   283b8:	0004a688 	.word	0x0004a688
   283bc:	0004a780 	.word	0x0004a780
   283c0:	0004fde5 	.word	0x0004fde5

000283c4 <state_ua_complete>:
{
   283c4:	b530      	push	{r4, r5, lr}
   283c6:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   283c8:	2210      	movs	r2, #16
   283ca:	2100      	movs	r1, #0
   283cc:	a801      	add	r0, sp, #4
   283ce:	f018 fe33 	bl	41038 <memset>
   283d2:	2501      	movs	r5, #1
   283d4:	f641 63d2 	movw	r3, #7890	; 0x1ed2
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   283d8:	a901      	add	r1, sp, #4
   283da:	200c      	movs	r0, #12
	struct nct_cc_data msg = {
   283dc:	9303      	str	r3, [sp, #12]
   283de:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   283e2:	f7ff fc59 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   283e6:	4604      	mov	r4, r0
   283e8:	b190      	cbz	r0, 28410 <state_ua_complete+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   283ea:	f04f 0000 	mov.w	r0, #0
   283ee:	4a13      	ldr	r2, [pc, #76]	; (2843c <state_ua_complete+0x78>)
   283f0:	4b13      	ldr	r3, [pc, #76]	; (28440 <state_ua_complete+0x7c>)
   283f2:	f365 0002 	bfi	r0, r5, #0, #3
   283f6:	1a9b      	subs	r3, r3, r2
   283f8:	f36f 00c5 	bfc	r0, #3, #3
   283fc:	08db      	lsrs	r3, r3, #3
   283fe:	f363 108f 	bfi	r0, r3, #6, #10
   28402:	4622      	mov	r2, r4
   28404:	490f      	ldr	r1, [pc, #60]	; (28444 <state_ua_complete+0x80>)
   28406:	f01f fa7d 	bl	47904 <log_string_sync>
}
   2840a:	4620      	mov	r0, r4
   2840c:	b00b      	add	sp, #44	; 0x2c
   2840e:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   28410:	a801      	add	r0, sp, #4
   28412:	f000 fea9 	bl	29168 <nct_cc_send>
   28416:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   28418:	9802      	ldr	r0, [sp, #8]
   2841a:	f021 fde2 	bl	49fe2 <k_free>
	struct nrf_cloud_evt evt = {
   2841e:	2214      	movs	r2, #20
   28420:	2100      	movs	r1, #0
   28422:	eb0d 0002 	add.w	r0, sp, r2
   28426:	f018 fe07 	bl	41038 <memset>
   2842a:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   2842c:	a905      	add	r1, sp, #20
   2842e:	200c      	movs	r0, #12
	struct nrf_cloud_evt evt = {
   28430:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   28434:	f7ff f8ea 	bl	2760c <nfsm_set_current_state_and_notify>
	return err;
   28438:	e7e7      	b.n	2840a <state_ua_complete+0x46>
   2843a:	bf00      	nop
   2843c:	0004a688 	.word	0x0004a688
   28440:	0004a780 	.word	0x0004a780
   28444:	0004fde5 	.word	0x0004fde5

00028448 <initiate_n_complete_request_handler>:
{
   28448:	b530      	push	{r4, r5, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2844a:	6845      	ldr	r5, [r0, #4]
{
   2844c:	b089      	sub	sp, #36	; 0x24
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   2844e:	f10d 0107 	add.w	r1, sp, #7
   28452:	4628      	mov	r0, r5
   28454:	f7ff fb40 	bl	27ad8 <nrf_cloud_decode_requested_state>
	if (err) {
   28458:	4604      	mov	r4, r0
   2845a:	b198      	cbz	r0, 28484 <initiate_n_complete_request_handler+0x3c>
		LOG_ERR("nrf_cloud_decode_requested_state failed %d", err);
   2845c:	2301      	movs	r3, #1
   2845e:	f04f 0000 	mov.w	r0, #0
   28462:	4a31      	ldr	r2, [pc, #196]	; (28528 <initiate_n_complete_request_handler+0xe0>)
   28464:	f363 0002 	bfi	r0, r3, #0, #3
   28468:	4b30      	ldr	r3, [pc, #192]	; (2852c <initiate_n_complete_request_handler+0xe4>)
   2846a:	f36f 00c5 	bfc	r0, #3, #3
   2846e:	1a9b      	subs	r3, r3, r2
   28470:	4622      	mov	r2, r4
   28472:	08db      	lsrs	r3, r3, #3
   28474:	492e      	ldr	r1, [pc, #184]	; (28530 <initiate_n_complete_request_handler+0xe8>)
   28476:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   2847a:	f01f fa43 	bl	47904 <log_string_sync>
}
   2847e:	4620      	mov	r0, r4
   28480:	b009      	add	sp, #36	; 0x24
   28482:	bd30      	pop	{r4, r5, pc}
	switch (expected_state) {
   28484:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28488:	3b06      	subs	r3, #6
   2848a:	2b06      	cmp	r3, #6
   2848c:	d8f7      	bhi.n	2847e <initiate_n_complete_request_handler+0x36>
   2848e:	a201      	add	r2, pc, #4	; (adr r2, 28494 <initiate_n_complete_request_handler+0x4c>)
   28490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28494:	000284b1 	.word	0x000284b1
   28498:	000284b9 	.word	0x000284b9
   2849c:	000284f9 	.word	0x000284f9
   284a0:	000284ff 	.word	0x000284ff
   284a4:	0002847f 	.word	0x0002847f
   284a8:	0002847f 	.word	0x0002847f
   284ac:	00028505 	.word	0x00028505
		return state_ua_pin_wait();
   284b0:	f7ff fe68 	bl	28184 <state_ua_pin_wait>
		return state_ua_complete();
   284b4:	4604      	mov	r4, r0
   284b6:	e7e2      	b.n	2847e <initiate_n_complete_request_handler+0x36>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   284b8:	ab06      	add	r3, sp, #24
   284ba:	aa02      	add	r2, sp, #8
   284bc:	a904      	add	r1, sp, #16
   284be:	4628      	mov	r0, r5
   284c0:	f7ff fd46 	bl	27f50 <nrf_cloud_decode_data_endpoint>
		if (err) {
   284c4:	4604      	mov	r4, r0
   284c6:	b178      	cbz	r0, 284e8 <initiate_n_complete_request_handler+0xa0>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   284c8:	2301      	movs	r3, #1
   284ca:	f04f 0000 	mov.w	r0, #0
   284ce:	4a16      	ldr	r2, [pc, #88]	; (28528 <initiate_n_complete_request_handler+0xe0>)
   284d0:	f363 0002 	bfi	r0, r3, #0, #3
   284d4:	4b15      	ldr	r3, [pc, #84]	; (2852c <initiate_n_complete_request_handler+0xe4>)
   284d6:	f36f 00c5 	bfc	r0, #3, #3
   284da:	1a9b      	subs	r3, r3, r2
   284dc:	08db      	lsrs	r3, r3, #3
   284de:	f363 108f 	bfi	r0, r3, #6, #10
   284e2:	4622      	mov	r2, r4
   284e4:	4913      	ldr	r1, [pc, #76]	; (28534 <initiate_n_complete_request_handler+0xec>)
   284e6:	e7c8      	b.n	2847a <initiate_n_complete_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   284e8:	aa06      	add	r2, sp, #24
   284ea:	a902      	add	r1, sp, #8
   284ec:	a804      	add	r0, sp, #16
   284ee:	f000 fec1 	bl	29274 <nct_dc_endpoint_set>
		return state_ua_pin_complete();
   284f2:	f7ff fecd 	bl	28290 <state_ua_pin_complete>
   284f6:	e7dd      	b.n	284b4 <initiate_n_complete_request_handler+0x6c>
		return state_ua_initiate();
   284f8:	f7ff fe0c 	bl	28114 <state_ua_initiate>
   284fc:	e7da      	b.n	284b4 <initiate_n_complete_request_handler+0x6c>
		return state_ua_input_wait();
   284fe:	f7ff ff1f 	bl	28340 <state_ua_input_wait>
   28502:	e7d7      	b.n	284b4 <initiate_n_complete_request_handler+0x6c>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, NULL);
   28504:	2300      	movs	r3, #0
   28506:	aa04      	add	r2, sp, #16
   28508:	a906      	add	r1, sp, #24
   2850a:	4628      	mov	r0, r5
   2850c:	f7ff fd20 	bl	27f50 <nrf_cloud_decode_data_endpoint>
		if (err) {
   28510:	4604      	mov	r4, r0
   28512:	2800      	cmp	r0, #0
   28514:	d1d8      	bne.n	284c8 <initiate_n_complete_request_handler+0x80>
		nct_dc_endpoint_set(&tx, &rx, NULL);
   28516:	4602      	mov	r2, r0
   28518:	a904      	add	r1, sp, #16
   2851a:	a806      	add	r0, sp, #24
   2851c:	f000 feaa 	bl	29274 <nct_dc_endpoint_set>
		return state_ua_complete();
   28520:	f7ff ff50 	bl	283c4 <state_ua_complete>
   28524:	e7c6      	b.n	284b4 <initiate_n_complete_request_handler+0x6c>
   28526:	bf00      	nop
   28528:	0004a688 	.word	0x0004a688
   2852c:	0004a780 	.word	0x0004a780
   28530:	0004fd2f 	.word	0x0004fd2f
   28534:	0004fd5a 	.word	0x0004fd5a

00028538 <all_ua_request_handler>:
{
   28538:	b530      	push	{r4, r5, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2853a:	6845      	ldr	r5, [r0, #4]
{
   2853c:	b08d      	sub	sp, #52	; 0x34
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   2853e:	f10d 0103 	add.w	r1, sp, #3
   28542:	4628      	mov	r0, r5
   28544:	f7ff fac8 	bl	27ad8 <nrf_cloud_decode_requested_state>
	if (err) {
   28548:	4604      	mov	r4, r0
   2854a:	b188      	cbz	r0, 28570 <all_ua_request_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   2854c:	2301      	movs	r3, #1
   2854e:	f04f 0000 	mov.w	r0, #0
   28552:	4a5c      	ldr	r2, [pc, #368]	; (286c4 <all_ua_request_handler+0x18c>)
   28554:	f363 0002 	bfi	r0, r3, #0, #3
   28558:	4b5b      	ldr	r3, [pc, #364]	; (286c8 <all_ua_request_handler+0x190>)
   2855a:	f36f 00c5 	bfc	r0, #3, #3
   2855e:	1a9b      	subs	r3, r3, r2
   28560:	4622      	mov	r2, r4
   28562:	08db      	lsrs	r3, r3, #3
   28564:	4959      	ldr	r1, [pc, #356]	; (286cc <all_ua_request_handler+0x194>)
   28566:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2856a:	f01f f9cb 	bl	47904 <log_string_sync>
   2856e:	e00d      	b.n	2858c <all_ua_request_handler+0x54>
	switch (expected_state) {
   28570:	f89d 3003 	ldrb.w	r3, [sp, #3]
   28574:	3b06      	subs	r3, #6
   28576:	2b06      	cmp	r3, #6
   28578:	d808      	bhi.n	2858c <all_ua_request_handler+0x54>
   2857a:	e8df f003 	tbb	[pc, r3]
   2857e:	0a04      	.short	0x0a04
   28580:	98643e3b 	.word	0x98643e3b
   28584:	41          	.byte	0x41
   28585:	00          	.byte	0x00
		return state_ua_pin_wait();
   28586:	f7ff fdfd 	bl	28184 <state_ua_pin_wait>
		return state_ua_initiate();
   2858a:	4604      	mov	r4, r0
}
   2858c:	4620      	mov	r0, r4
   2858e:	b00d      	add	sp, #52	; 0x34
   28590:	bd30      	pop	{r4, r5, pc}
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   28592:	ab07      	add	r3, sp, #28
   28594:	aa01      	add	r2, sp, #4
   28596:	a903      	add	r1, sp, #12
   28598:	4628      	mov	r0, r5
   2859a:	f7ff fcd9 	bl	27f50 <nrf_cloud_decode_data_endpoint>
		if (err) {
   2859e:	4604      	mov	r4, r0
   285a0:	b178      	cbz	r0, 285c2 <all_ua_request_handler+0x8a>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   285a2:	2301      	movs	r3, #1
   285a4:	f04f 0000 	mov.w	r0, #0
   285a8:	4a46      	ldr	r2, [pc, #280]	; (286c4 <all_ua_request_handler+0x18c>)
   285aa:	f363 0002 	bfi	r0, r3, #0, #3
   285ae:	4b46      	ldr	r3, [pc, #280]	; (286c8 <all_ua_request_handler+0x190>)
   285b0:	f36f 00c5 	bfc	r0, #3, #3
   285b4:	1a9b      	subs	r3, r3, r2
   285b6:	08db      	lsrs	r3, r3, #3
   285b8:	f363 108f 	bfi	r0, r3, #6, #10
   285bc:	4622      	mov	r2, r4
   285be:	4944      	ldr	r1, [pc, #272]	; (286d0 <all_ua_request_handler+0x198>)
   285c0:	e7d3      	b.n	2856a <all_ua_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   285c2:	aa07      	add	r2, sp, #28
   285c4:	a901      	add	r1, sp, #4
   285c6:	a803      	add	r0, sp, #12
   285c8:	f000 fe54 	bl	29274 <nct_dc_endpoint_set>
		err = state_ua_pin_complete();
   285cc:	f7ff fe60 	bl	28290 <state_ua_pin_complete>
		if (err) {
   285d0:	4604      	mov	r4, r0
   285d2:	b3a8      	cbz	r0, 28640 <all_ua_request_handler+0x108>
			LOG_ERR("state_ua_pin_complete failed %d", err);
   285d4:	2301      	movs	r3, #1
   285d6:	f04f 0000 	mov.w	r0, #0
   285da:	4a3a      	ldr	r2, [pc, #232]	; (286c4 <all_ua_request_handler+0x18c>)
   285dc:	f363 0002 	bfi	r0, r3, #0, #3
   285e0:	4b39      	ldr	r3, [pc, #228]	; (286c8 <all_ua_request_handler+0x190>)
   285e2:	f36f 00c5 	bfc	r0, #3, #3
   285e6:	1a9b      	subs	r3, r3, r2
   285e8:	08db      	lsrs	r3, r3, #3
   285ea:	f363 108f 	bfi	r0, r3, #6, #10
   285ee:	4622      	mov	r2, r4
   285f0:	4938      	ldr	r1, [pc, #224]	; (286d4 <all_ua_request_handler+0x19c>)
   285f2:	e7ba      	b.n	2856a <all_ua_request_handler+0x32>
		return state_ua_initiate();
   285f4:	f7ff fd8e 	bl	28114 <state_ua_initiate>
   285f8:	e7c7      	b.n	2858a <all_ua_request_handler+0x52>
		return state_ua_input_wait();
   285fa:	f7ff fea1 	bl	28340 <state_ua_input_wait>
   285fe:	e7c4      	b.n	2858a <all_ua_request_handler+0x52>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, NULL);
   28600:	2300      	movs	r3, #0
   28602:	aa03      	add	r2, sp, #12
   28604:	a907      	add	r1, sp, #28
   28606:	4628      	mov	r0, r5
   28608:	f7ff fca2 	bl	27f50 <nrf_cloud_decode_data_endpoint>
		if (err) {
   2860c:	4604      	mov	r4, r0
   2860e:	b178      	cbz	r0, 28630 <all_ua_request_handler+0xf8>
			LOG_ERR("nrf_cloud_decode_data_endpoint Failed %d",
   28610:	2301      	movs	r3, #1
   28612:	f04f 0000 	mov.w	r0, #0
   28616:	4a2b      	ldr	r2, [pc, #172]	; (286c4 <all_ua_request_handler+0x18c>)
   28618:	f363 0002 	bfi	r0, r3, #0, #3
   2861c:	4b2a      	ldr	r3, [pc, #168]	; (286c8 <all_ua_request_handler+0x190>)
   2861e:	f36f 00c5 	bfc	r0, #3, #3
   28622:	1a9b      	subs	r3, r3, r2
   28624:	08db      	lsrs	r3, r3, #3
   28626:	f363 108f 	bfi	r0, r3, #6, #10
   2862a:	4622      	mov	r2, r4
   2862c:	492a      	ldr	r1, [pc, #168]	; (286d8 <all_ua_request_handler+0x1a0>)
   2862e:	e79c      	b.n	2856a <all_ua_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, NULL);
   28630:	4602      	mov	r2, r0
   28632:	a903      	add	r1, sp, #12
   28634:	a807      	add	r0, sp, #28
   28636:	f000 fe1d 	bl	29274 <nct_dc_endpoint_set>
		err = state_ua_complete();
   2863a:	f7ff fec3 	bl	283c4 <state_ua_complete>
   2863e:	4604      	mov	r4, r0
		(void) nct_disconnect();
   28640:	f000 fee2 	bl	29408 <nct_disconnect>
		return err;
   28644:	e7a2      	b.n	2858c <all_ua_request_handler+0x54>
	struct nct_cc_data msg = {
   28646:	2501      	movs	r5, #1
   28648:	2210      	movs	r2, #16
   2864a:	2100      	movs	r1, #0
   2864c:	a803      	add	r0, sp, #12
   2864e:	f018 fcf3 	bl	41038 <memset>
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   28652:	a903      	add	r1, sp, #12
   28654:	200a      	movs	r0, #10
	struct nct_cc_data msg = {
   28656:	9505      	str	r5, [sp, #20]
   28658:	f88d 5018 	strb.w	r5, [sp, #24]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   2865c:	f7ff fb1c 	bl	27c98 <nrf_cloud_encode_state>
	if (err) {
   28660:	4604      	mov	r4, r0
   28662:	b170      	cbz	r0, 28682 <all_ua_request_handler+0x14a>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   28664:	f04f 0000 	mov.w	r0, #0
   28668:	4a16      	ldr	r2, [pc, #88]	; (286c4 <all_ua_request_handler+0x18c>)
   2866a:	4b17      	ldr	r3, [pc, #92]	; (286c8 <all_ua_request_handler+0x190>)
   2866c:	f365 0002 	bfi	r0, r5, #0, #3
   28670:	1a9b      	subs	r3, r3, r2
   28672:	f36f 00c5 	bfc	r0, #3, #3
   28676:	08db      	lsrs	r3, r3, #3
   28678:	f363 108f 	bfi	r0, r3, #6, #10
   2867c:	4622      	mov	r2, r4
   2867e:	4917      	ldr	r1, [pc, #92]	; (286dc <all_ua_request_handler+0x1a4>)
   28680:	e773      	b.n	2856a <all_ua_request_handler+0x32>
	err = nct_cc_send(&msg);
   28682:	a803      	add	r0, sp, #12
   28684:	f000 fd70 	bl	29168 <nct_cc_send>
   28688:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   2868a:	9804      	ldr	r0, [sp, #16]
   2868c:	f021 fca9 	bl	49fe2 <k_free>
	struct nrf_cloud_evt evt = {
   28690:	2100      	movs	r1, #0
   28692:	2214      	movs	r2, #20
   28694:	a807      	add	r0, sp, #28
   28696:	f018 fccf 	bl	41038 <memset>
   2869a:	2302      	movs	r3, #2
   2869c:	f88d 301c 	strb.w	r3, [sp, #28]
   286a0:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   286a2:	2009      	movs	r0, #9
	struct nrf_cloud_evt evt = {
   286a4:	930a      	str	r3, [sp, #40]	; 0x28
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   286a6:	a907      	add	r1, sp, #28
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   286a8:	f7fe ffb0 	bl	2760c <nfsm_set_current_state_and_notify>
   286ac:	e76e      	b.n	2858c <all_ua_request_handler+0x54>
		const struct nrf_cloud_evt evt = {
   286ae:	2100      	movs	r1, #0
   286b0:	2214      	movs	r2, #20
   286b2:	a807      	add	r0, sp, #28
   286b4:	f018 fcc0 	bl	41038 <memset>
   286b8:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   286ba:	a907      	add	r1, sp, #28
		const struct nrf_cloud_evt evt = {
   286bc:	f88d 301c 	strb.w	r3, [sp, #28]
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   286c0:	2011      	movs	r0, #17
   286c2:	e7f1      	b.n	286a8 <all_ua_request_handler+0x170>
   286c4:	0004a688 	.word	0x0004a688
   286c8:	0004a780 	.word	0x0004a780
   286cc:	0004fd04 	.word	0x0004fd04
   286d0:	0004fd5a 	.word	0x0004fd5a
   286d4:	0004fc9c 	.word	0x0004fc9c
   286d8:	0004fcbc 	.word	0x0004fcbc
   286dc:	0004fde5 	.word	0x0004fde5

000286e0 <cc_connection_handler>:
{
   286e0:	b510      	push	{r4, lr}
   286e2:	4604      	mov	r4, r0
   286e4:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   286e6:	2100      	movs	r1, #0
   286e8:	2214      	movs	r2, #20
   286ea:	a801      	add	r0, sp, #4
   286ec:	f018 fca4 	bl	41038 <memset>
   286f0:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   286f2:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   286f4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (nct_evt->status != 0) {
   286f8:	b139      	cbz	r1, 2870a <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   286fa:	a901      	add	r1, sp, #4
   286fc:	2011      	movs	r0, #17
   286fe:	f7fe ff85 	bl	2760c <nfsm_set_current_state_and_notify>
		return 0;
   28702:	2400      	movs	r4, #0
}
   28704:	4620      	mov	r0, r4
   28706:	b006      	add	sp, #24
   28708:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2870a:	2004      	movs	r0, #4
   2870c:	f7fe ff7e 	bl	2760c <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   28710:	4806      	ldr	r0, [pc, #24]	; (2872c <cc_connection_handler+0x4c>)
   28712:	f000 fd29 	bl	29168 <nct_cc_send>
	if (err) {
   28716:	4604      	mov	r4, r0
   28718:	b120      	cbz	r0, 28724 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2871a:	2002      	movs	r0, #2
   2871c:	a901      	add	r1, sp, #4
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2871e:	f7fe ff75 	bl	2760c <nfsm_set_current_state_and_notify>
   28722:	e7ef      	b.n	28704 <cc_connection_handler+0x24>
   28724:	4601      	mov	r1, r0
   28726:	2005      	movs	r0, #5
   28728:	e7f9      	b.n	2871e <cc_connection_handler+0x3e>
   2872a:	bf00      	nop
   2872c:	0004b058 	.word	0x0004b058

00028730 <initiate_cmd_in_dc_conn_handler>:

static int initiate_cmd_in_dc_conn_handler(const struct nct_evt *nct_evt)
{
   28730:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   28732:	6840      	ldr	r0, [r0, #4]
   28734:	f10d 0107 	add.w	r1, sp, #7
   28738:	f7ff f9ce 	bl	27ad8 <nrf_cloud_decode_requested_state>
	if (err) {
   2873c:	4604      	mov	r4, r0
   2873e:	b198      	cbz	r0, 28768 <initiate_cmd_in_dc_conn_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   28740:	2301      	movs	r3, #1
   28742:	f04f 0000 	mov.w	r0, #0
   28746:	4a11      	ldr	r2, [pc, #68]	; (2878c <initiate_cmd_in_dc_conn_handler+0x5c>)
   28748:	f363 0002 	bfi	r0, r3, #0, #3
   2874c:	4b10      	ldr	r3, [pc, #64]	; (28790 <initiate_cmd_in_dc_conn_handler+0x60>)
   2874e:	f36f 00c5 	bfc	r0, #3, #3
   28752:	1a9b      	subs	r3, r3, r2
   28754:	08db      	lsrs	r3, r3, #3
   28756:	f363 108f 	bfi	r0, r3, #6, #10
   2875a:	4622      	mov	r2, r4
   2875c:	490d      	ldr	r1, [pc, #52]	; (28794 <initiate_cmd_in_dc_conn_handler+0x64>)
   2875e:	f01f f8d1 	bl	47904 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   28762:	4620      	mov	r0, r4
   28764:	b002      	add	sp, #8
   28766:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_INITIATE) {
   28768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2876c:	2b08      	cmp	r3, #8
   2876e:	d105      	bne.n	2877c <initiate_cmd_in_dc_conn_handler+0x4c>
		(void) nct_dc_disconnect();
   28770:	f000 fe1e 	bl	293b0 <nct_dc_disconnect>
		return state_ua_initiate();
   28774:	f7ff fcce 	bl	28114 <state_ua_initiate>
		return state_ua_pin_wait();
   28778:	4604      	mov	r4, r0
   2877a:	e7f2      	b.n	28762 <initiate_cmd_in_dc_conn_handler+0x32>
	} else if (expected_state == STATE_UA_PIN_WAIT) {
   2877c:	2b06      	cmp	r3, #6
   2877e:	d1f0      	bne.n	28762 <initiate_cmd_in_dc_conn_handler+0x32>
		(void) nct_dc_disconnect();
   28780:	f000 fe16 	bl	293b0 <nct_dc_disconnect>
		return state_ua_pin_wait();
   28784:	f7ff fcfe 	bl	28184 <state_ua_pin_wait>
   28788:	e7f6      	b.n	28778 <initiate_cmd_in_dc_conn_handler+0x48>
   2878a:	bf00      	nop
   2878c:	0004a688 	.word	0x0004a688
   28790:	0004a780 	.word	0x0004a780
   28794:	0004fd04 	.word	0x0004fd04

00028798 <nfsm_handle_incoming_event>:
	if (state < STATE_TOTAL) {
   28798:	2911      	cmp	r1, #17
{
   2879a:	b570      	push	{r4, r5, r6, lr}
   2879c:	4606      	mov	r6, r0
   2879e:	460d      	mov	r5, r1
	if (state < STATE_TOTAL) {
   287a0:	d81c      	bhi.n	287dc <nfsm_handle_incoming_event+0x44>
		int err = state_event_handlers[state][nct_evt->type](nct_evt);
   287a2:	4b16      	ldr	r3, [pc, #88]	; (287fc <nfsm_handle_incoming_event+0x64>)
   287a4:	7a02      	ldrb	r2, [r0, #8]
   287a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   287aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   287ae:	4798      	blx	r3
		if (err) {
   287b0:	4604      	mov	r4, r0
   287b2:	b188      	cbz	r0, 287d8 <nfsm_handle_incoming_event+0x40>
			LOG_ERR("Handler failed! state: %d, type: %d",
   287b4:	2301      	movs	r3, #1
   287b6:	f04f 0000 	mov.w	r0, #0
   287ba:	4a11      	ldr	r2, [pc, #68]	; (28800 <nfsm_handle_incoming_event+0x68>)
   287bc:	f363 0002 	bfi	r0, r3, #0, #3
   287c0:	4b10      	ldr	r3, [pc, #64]	; (28804 <nfsm_handle_incoming_event+0x6c>)
   287c2:	f36f 00c5 	bfc	r0, #3, #3
   287c6:	1a9b      	subs	r3, r3, r2
   287c8:	08db      	lsrs	r3, r3, #3
   287ca:	f363 108f 	bfi	r0, r3, #6, #10
   287ce:	462a      	mov	r2, r5
   287d0:	7a33      	ldrb	r3, [r6, #8]
   287d2:	490d      	ldr	r1, [pc, #52]	; (28808 <nfsm_handle_incoming_event+0x70>)
   287d4:	f01f f896 	bl	47904 <log_string_sync>
}
   287d8:	4620      	mov	r0, r4
   287da:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(false);
   287dc:	f240 1305 	movw	r3, #261	; 0x105
   287e0:	4a0a      	ldr	r2, [pc, #40]	; (2880c <nfsm_handle_incoming_event+0x74>)
   287e2:	490b      	ldr	r1, [pc, #44]	; (28810 <nfsm_handle_incoming_event+0x78>)
   287e4:	480b      	ldr	r0, [pc, #44]	; (28814 <nfsm_handle_incoming_event+0x7c>)
   287e6:	f01f f870 	bl	478ca <printk>
   287ea:	f240 1105 	movw	r1, #261	; 0x105
   287ee:	4807      	ldr	r0, [pc, #28]	; (2880c <nfsm_handle_incoming_event+0x74>)
   287f0:	f01f f878 	bl	478e4 <assert_post_action>
	return -EINVAL;
   287f4:	f06f 0415 	mvn.w	r4, #21
   287f8:	e7ee      	b.n	287d8 <nfsm_handle_incoming_event+0x40>
   287fa:	bf00      	nop
   287fc:	0004b0b8 	.word	0x0004b0b8
   28800:	0004a688 	.word	0x0004a688
   28804:	0004a780 	.word	0x0004a780
   28808:	0004fd83 	.word	0x0004fd83
   2880c:	0004fda7 	.word	0x0004fda7
   28810:	00052aa7 	.word	0x00052aa7
   28814:	0004ccf0 	.word	0x0004ccf0

00028818 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   28818:	2200      	movs	r2, #0
   2881a:	4b04      	ldr	r3, [pc, #16]	; (2882c <dc_endpoint_reset+0x14>)
	nct.dc_rx_endp.size = 0;
   2881c:	e9c3 222c 	strd	r2, r2, [r3, #176]	; 0xb0

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   28820:	e9c3 222a 	strd	r2, r2, [r3, #168]	; 0xa8

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   28824:	e9c3 222e 	strd	r2, r2, [r3, #184]	; 0xb8
}
   28828:	4770      	bx	lr
   2882a:	bf00      	nop
   2882c:	20023e78 	.word	0x20023e78

00028830 <dc_send>:
	}
	dc_endpoint_reset();
}

static u32_t dc_send(const struct nct_dc_data *dc_data, u8_t qos)
{
   28830:	b530      	push	{r4, r5, lr}
   28832:	460d      	mov	r5, r1
   28834:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   28836:	4604      	mov	r4, r0
   28838:	b368      	cbz	r0, 28896 <dc_send+0x66>
		return -EINVAL;
	}

	struct mqtt_publish_param publish = {
   2883a:	2210      	movs	r2, #16
   2883c:	2100      	movs	r1, #0
   2883e:	a802      	add	r0, sp, #8
   28840:	f018 fbfa 	bl	41038 <memset>
		.message.topic.qos = qos,
		.message.topic.topic.size = nct.dc_tx_endp.size,
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   28844:	4b15      	ldr	r3, [pc, #84]	; (2889c <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   28846:	f88d 5008 	strb.w	r5, [sp, #8]
   2884a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   2884e:	9200      	str	r2, [sp, #0]
   28850:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   28854:	9201      	str	r2, [sp, #4]
	};

	/* Populate payload. */
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   28856:	6822      	ldr	r2, [r4, #0]
   28858:	b11a      	cbz	r2, 28862 <dc_send+0x32>
   2885a:	6861      	ldr	r1, [r4, #4]
   2885c:	b109      	cbz	r1, 28862 <dc_send+0x32>
		publish.message.payload.data = (u8_t *)dc_data->data.ptr;
		publish.message.payload.len = dc_data->data.len;
   2885e:	e9cd 1203 	strd	r1, r2, [sp, #12]
	}

	if (dc_data->id != 0) {
   28862:	68a2      	ldr	r2, [r4, #8]
   28864:	b13a      	cbz	r2, 28876 <dc_send+0x46>
		publish.message_id = dc_data->id;
   28866:	f8ad 2014 	strh.w	r2, [sp, #20]
	} else {
		publish.message_id = dc_get_next_message_id();
	}

	return mqtt_publish(&nct.client, &publish);
   2886a:	4669      	mov	r1, sp
   2886c:	480c      	ldr	r0, [pc, #48]	; (288a0 <dc_send+0x70>)
   2886e:	f01f fdf6 	bl	4845e <mqtt_publish>
}
   28872:	b007      	add	sp, #28
   28874:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   28876:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2887a:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   2887c:	b288      	uxth	r0, r1
   2887e:	b130      	cbz	r0, 2888e <dc_send+0x5e>
	nct.message_id++;
   28880:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		publish.message_id = dc_get_next_message_id();
   28884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   28888:	f8ad 3014 	strh.w	r3, [sp, #20]
   2888c:	e7ed      	b.n	2886a <dc_send+0x3a>
		nct.message_id++;
   2888e:	3202      	adds	r2, #2
   28890:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   28894:	e7f6      	b.n	28884 <dc_send+0x54>
		return -EINVAL;
   28896:	f06f 0015 	mvn.w	r0, #21
   2889a:	e7ea      	b.n	28872 <dc_send+0x42>
   2889c:	20023e78 	.word	0x20023e78
   288a0:	20023e90 	.word	0x20023e90

000288a4 <dc_endpoint_free>:
{
   288a4:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   288a6:	4c0a      	ldr	r4, [pc, #40]	; (288d0 <dc_endpoint_free+0x2c>)
   288a8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   288ac:	b108      	cbz	r0, 288b2 <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   288ae:	f021 fb98 	bl	49fe2 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   288b2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   288b6:	b108      	cbz	r0, 288bc <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   288b8:	f021 fb93 	bl	49fe2 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   288bc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   288c0:	b108      	cbz	r0, 288c6 <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   288c2:	f021 fb8e 	bl	49fe2 <k_free>
}
   288c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   288ca:	f7ff bfa5 	b.w	28818 <dc_endpoint_reset>
   288ce:	bf00      	nop
   288d0:	20023e78 	.word	0x20023e78

000288d4 <aws_fota_cb_handler>:
}

#if defined(CONFIG_AWS_FOTA)
/* Handle AWS FOTA events */
static void aws_fota_cb_handler(enum aws_fota_evt_id evt)
{
   288d4:	b508      	push	{r3, lr}
	switch (evt) {
   288d6:	4603      	mov	r3, r0
   288d8:	b110      	cbz	r0, 288e0 <aws_fota_cb_handler+0xc>
   288da:	2801      	cmp	r0, #1
   288dc:	d015      	beq.n	2890a <aws_fota_cb_handler+0x36>

	case AWS_FOTA_EVT_ERROR:
		LOG_ERR("AWS_FOTA_EVT_ERROR");
		break;
	}
}
   288de:	bd08      	pop	{r3, pc}
		LOG_DBG("AWS_FOTA_EVT_DONE, rebooting to apply update.");
   288e0:	2204      	movs	r2, #4
   288e2:	f04f 0000 	mov.w	r0, #0
   288e6:	f362 0002 	bfi	r0, r2, #0, #3
   288ea:	f363 00c5 	bfi	r0, r3, #3, #3
   288ee:	4a0f      	ldr	r2, [pc, #60]	; (2892c <aws_fota_cb_handler+0x58>)
   288f0:	4b0f      	ldr	r3, [pc, #60]	; (28930 <aws_fota_cb_handler+0x5c>)
   288f2:	4910      	ldr	r1, [pc, #64]	; (28934 <aws_fota_cb_handler+0x60>)
   288f4:	1a9b      	subs	r3, r3, r2
   288f6:	08db      	lsrs	r3, r3, #3
   288f8:	f363 108f 	bfi	r0, r3, #6, #10
   288fc:	4a0e      	ldr	r2, [pc, #56]	; (28938 <aws_fota_cb_handler+0x64>)
   288fe:	f01f f801 	bl	47904 <log_string_sync>
}
   28902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   28906:	f7fe bfbb 	b.w	27880 <nct_apply_update>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2890a:	f04f 0000 	mov.w	r0, #0
   2890e:	4907      	ldr	r1, [pc, #28]	; (2892c <aws_fota_cb_handler+0x58>)
   28910:	f363 0002 	bfi	r0, r3, #0, #3
   28914:	4b06      	ldr	r3, [pc, #24]	; (28930 <aws_fota_cb_handler+0x5c>)
   28916:	f36f 00c5 	bfc	r0, #3, #3
   2891a:	1a5b      	subs	r3, r3, r1
   2891c:	08db      	lsrs	r3, r3, #3
   2891e:	f363 108f 	bfi	r0, r3, #6, #10
   28922:	4906      	ldr	r1, [pc, #24]	; (2893c <aws_fota_cb_handler+0x68>)
}
   28924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   28928:	f01e bfec 	b.w	47904 <log_string_sync>
   2892c:	0004a688 	.word	0x0004a688
   28930:	0004a788 	.word	0x0004a788
   28934:	0004fef8 	.word	0x0004fef8
   28938:	0004fe50 	.word	0x0004fe50
   2893c:	0004ff2a 	.word	0x0004ff2a

00028940 <nct_mqtt_evt_handler>:
}

/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
   28940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;
	struct nct_evt evt = {
   28944:	2700      	movs	r7, #0
   28946:	69cb      	ldr	r3, [r1, #28]
{
   28948:	b08e      	sub	sp, #56	; 0x38
   2894a:	4606      	mov	r6, r0
   2894c:	460c      	mov	r4, r1
	struct nct_evt evt = {
   2894e:	e9cd 7705 	strd	r7, r7, [sp, #20]
   28952:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   28954:	f001 ffd2 	bl	2a8fc <aws_fota_mqtt_evt_handler>
	if (err > 0) {
   28958:	1e02      	subs	r2, r0, #0
   2895a:	f300 8081 	bgt.w	28a60 <nct_mqtt_evt_handler+0x120>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   2895e:	d02e      	beq.n	289be <nct_mqtt_evt_handler+0x7e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   28960:	f04f 0801 	mov.w	r8, #1
   28964:	f04f 0000 	mov.w	r0, #0
   28968:	4b9d      	ldr	r3, [pc, #628]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   2896a:	4d9e      	ldr	r5, [pc, #632]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   2896c:	f368 0002 	bfi	r0, r8, #0, #3
   28970:	1aed      	subs	r5, r5, r3
   28972:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   28976:	f367 00c5 	bfi	r0, r7, #3, #3
   2897a:	f365 108f 	bfi	r0, r5, #6, #10
   2897e:	499a      	ldr	r1, [pc, #616]	; (28be8 <nct_mqtt_evt_handler+0x2a8>)
   28980:	f01e ffc0 	bl	47904 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   28984:	2304      	movs	r3, #4
   28986:	f04f 0000 	mov.w	r0, #0
   2898a:	f363 0002 	bfi	r0, r3, #0, #3
   2898e:	f367 00c5 	bfi	r0, r7, #3, #3
   28992:	4a96      	ldr	r2, [pc, #600]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28994:	f365 108f 	bfi	r0, r5, #6, #10
   28998:	4995      	ldr	r1, [pc, #596]	; (28bf0 <nct_mqtt_evt_handler+0x2b0>)
   2899a:	f01e ffb3 	bl	47904 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   2899e:	4630      	mov	r0, r6
   289a0:	f01f fdb2 	bl	48508 <mqtt_disconnect>
		if (err) {
   289a4:	4602      	mov	r2, r0
   289a6:	b150      	cbz	r0, 289be <nct_mqtt_evt_handler+0x7e>
			LOG_ERR("Could not disconnect: %d", err);
   289a8:	f04f 0000 	mov.w	r0, #0
   289ac:	f368 0002 	bfi	r0, r8, #0, #3
   289b0:	f367 00c5 	bfi	r0, r7, #3, #3
   289b4:	f365 108f 	bfi	r0, r5, #6, #10
   289b8:	498e      	ldr	r1, [pc, #568]	; (28bf4 <nct_mqtt_evt_handler+0x2b4>)
   289ba:	f01e ffa3 	bl	47904 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   289be:	7823      	ldrb	r3, [r4, #0]
   289c0:	2b08      	cmp	r3, #8
   289c2:	d84d      	bhi.n	28a60 <nct_mqtt_evt_handler+0x120>
   289c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   289c8:	00f00009 	.word	0x00f00009
   289cc:	00d7001e 	.word	0x00d7001e
   289d0:	004c004c 	.word	0x004c004c
   289d4:	00a3004c 	.word	0x00a3004c
   289d8:	00be      	.short	0x00be
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   289da:	2304      	movs	r3, #4
   289dc:	f04f 0000 	mov.w	r0, #0
   289e0:	4a7f      	ldr	r2, [pc, #508]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   289e2:	f363 0002 	bfi	r0, r3, #0, #3
   289e6:	4b7f      	ldr	r3, [pc, #508]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   289e8:	f36f 00c5 	bfc	r0, #3, #3
   289ec:	1a9b      	subs	r3, r3, r2
   289ee:	08db      	lsrs	r3, r3, #3
   289f0:	f363 108f 	bfi	r0, r3, #6, #10
   289f4:	4a7d      	ldr	r2, [pc, #500]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   289f6:	4980      	ldr	r1, [pc, #512]	; (28bf8 <nct_mqtt_evt_handler+0x2b8>)
   289f8:	f01e ff84 	bl	47904 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   289fc:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   289fe:	f88d 3018 	strb.w	r3, [sp, #24]
   28a02:	e05f      	b.n	28ac4 <nct_mqtt_evt_handler+0x184>
		LOG_DBG("MQTT_EVT_PUBLISH: id=%d len=%d ",
   28a04:	2304      	movs	r3, #4
   28a06:	f04f 0000 	mov.w	r0, #0
   28a0a:	4a75      	ldr	r2, [pc, #468]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28a0c:	f363 0002 	bfi	r0, r3, #0, #3
   28a10:	4b74      	ldr	r3, [pc, #464]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28a12:	f36f 00c5 	bfc	r0, #3, #3
   28a16:	1a9b      	subs	r3, r3, r2
   28a18:	6962      	ldr	r2, [r4, #20]
   28a1a:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   28a1e:	9200      	str	r2, [sp, #0]
   28a20:	f365 108f 	bfi	r0, r5, #6, #10
   28a24:	4a71      	ldr	r2, [pc, #452]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28a26:	8b23      	ldrh	r3, [r4, #24]
   28a28:	4974      	ldr	r1, [pc, #464]	; (28bfc <nct_mqtt_evt_handler+0x2bc>)
   28a2a:	f01e ff6b 	bl	47904 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   28a2e:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   28a30:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28a34:	d817      	bhi.n	28a66 <nct_mqtt_evt_handler+0x126>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   28a36:	4972      	ldr	r1, [pc, #456]	; (28c00 <nct_mqtt_evt_handler+0x2c0>)
   28a38:	4630      	mov	r0, r6
   28a3a:	f01f fe52 	bl	486e2 <mqtt_readall_publish_payload>
		if (err < 0) {
   28a3e:	1e02      	subs	r2, r0, #0
   28a40:	da14      	bge.n	28a6c <nct_mqtt_evt_handler+0x12c>
			LOG_ERR("publish_get_payload: failed %d", err);
   28a42:	2301      	movs	r3, #1
   28a44:	f04f 0000 	mov.w	r0, #0
   28a48:	f363 0002 	bfi	r0, r3, #0, #3
   28a4c:	f36f 00c5 	bfc	r0, #3, #3
   28a50:	f365 108f 	bfi	r0, r5, #6, #10
   28a54:	496b      	ldr	r1, [pc, #428]	; (28c04 <nct_mqtt_evt_handler+0x2c4>)
   28a56:	f01e ff55 	bl	47904 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   28a5a:	4630      	mov	r0, r6
   28a5c:	f01f fd54 	bl	48508 <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   28a60:	b00e      	add	sp, #56	; 0x38
   28a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
   28a66:	f06f 0279 	mvn.w	r2, #121	; 0x79
   28a6a:	e7ea      	b.n	28a42 <nct_mqtt_evt_handler+0x102>
	for (u32_t index = 0; index < list_size; index++) {
   28a6c:	2500      	movs	r5, #0
   28a6e:	f04f 080c 	mov.w	r8, #12
		if (strings_compare(
   28a72:	4f65      	ldr	r7, [pc, #404]	; (28c08 <nct_mqtt_evt_handler+0x2c8>)
   28a74:	fb08 f305 	mul.w	r3, r8, r5
   28a78:	18fa      	adds	r2, r7, r3
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   28a7a:	6851      	ldr	r1, [r2, #4]
   28a7c:	68a2      	ldr	r2, [r4, #8]
   28a7e:	6860      	ldr	r0, [r4, #4]
   28a80:	428a      	cmp	r2, r1
   28a82:	bf28      	it	cs
   28a84:	460a      	movcs	r2, r1
   28a86:	59d9      	ldr	r1, [r3, r7]
   28a88:	f018 fefa 	bl	41880 <strncmp>
		if (strings_compare(
   28a8c:	2800      	cmp	r0, #0
   28a8e:	d130      	bne.n	28af2 <nct_mqtt_evt_handler+0x1b2>
			*opcode = nct_cc_rx_opcode_map[index];
   28a90:	4b5e      	ldr	r3, [pc, #376]	; (28c0c <nct_mqtt_evt_handler+0x2cc>)
   28a92:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   28a96:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   28a9a:	8b23      	ldrh	r3, [r4, #24]
   28a9c:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   28a9e:	4b58      	ldr	r3, [pc, #352]	; (28c00 <nct_mqtt_evt_handler+0x2c0>)
   28aa0:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   28aa2:	6963      	ldr	r3, [r4, #20]
   28aa4:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   28aa6:	2303      	movs	r3, #3
   28aa8:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   28aac:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   28aae:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   28ab0:	7b23      	ldrb	r3, [r4, #12]
   28ab2:	2b01      	cmp	r3, #1
   28ab4:	d106      	bne.n	28ac4 <nct_mqtt_evt_handler+0x184>
			const struct mqtt_puback_param ack = {
   28ab6:	8b23      	ldrh	r3, [r4, #24]
   28ab8:	a90e      	add	r1, sp, #56	; 0x38
   28aba:	f821 3d2c 	strh.w	r3, [r1, #-44]!
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   28abe:	4630      	mov	r0, r6
   28ac0:	f01f fcfb 	bl	484ba <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   28ac4:	a804      	add	r0, sp, #16
   28ac6:	f7fe fed5 	bl	27874 <nct_input>
		if (err != 0) {
   28aca:	4602      	mov	r2, r0
   28acc:	2800      	cmp	r0, #0
   28ace:	d0c7      	beq.n	28a60 <nct_mqtt_evt_handler+0x120>
			LOG_ERR("nct_input: failed %d", err);
   28ad0:	2301      	movs	r3, #1
   28ad2:	f04f 0000 	mov.w	r0, #0
   28ad6:	4942      	ldr	r1, [pc, #264]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28ad8:	f363 0002 	bfi	r0, r3, #0, #3
   28adc:	4b41      	ldr	r3, [pc, #260]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28ade:	f36f 00c5 	bfc	r0, #3, #3
   28ae2:	1a5b      	subs	r3, r3, r1
   28ae4:	08db      	lsrs	r3, r3, #3
   28ae6:	f363 108f 	bfi	r0, r3, #6, #10
   28aea:	4949      	ldr	r1, [pc, #292]	; (28c10 <nct_mqtt_evt_handler+0x2d0>)
   28aec:	f01e ff0a 	bl	47904 <log_string_sync>
   28af0:	e7b6      	b.n	28a60 <nct_mqtt_evt_handler+0x120>
	for (u32_t index = 0; index < list_size; index++) {
   28af2:	3501      	adds	r5, #1
   28af4:	2d03      	cmp	r5, #3
   28af6:	d1bd      	bne.n	28a74 <nct_mqtt_evt_handler+0x134>
			dc.id = p->message_id;
   28af8:	8b23      	ldrh	r3, [r4, #24]
   28afa:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = p->message.payload.data;
   28afc:	6923      	ldr	r3, [r4, #16]
   28afe:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   28b00:	6963      	ldr	r3, [r4, #20]
   28b02:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   28b04:	2305      	movs	r3, #5
   28b06:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   28b0a:	ab07      	add	r3, sp, #28
   28b0c:	e7cf      	b.n	28aae <nct_mqtt_evt_handler+0x16e>
		LOG_DBG("MQTT_EVT_SUBACK: id=%d result=%d",
   28b0e:	2304      	movs	r3, #4
   28b10:	f04f 0000 	mov.w	r0, #0
   28b14:	4a32      	ldr	r2, [pc, #200]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28b16:	f363 0002 	bfi	r0, r3, #0, #3
   28b1a:	4b32      	ldr	r3, [pc, #200]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28b1c:	f36f 00c5 	bfc	r0, #3, #3
   28b20:	1a9b      	subs	r3, r3, r2
   28b22:	69e2      	ldr	r2, [r4, #28]
   28b24:	08db      	lsrs	r3, r3, #3
   28b26:	f363 108f 	bfi	r0, r3, #6, #10
   28b2a:	9200      	str	r2, [sp, #0]
   28b2c:	88a3      	ldrh	r3, [r4, #4]
   28b2e:	4a2f      	ldr	r2, [pc, #188]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28b30:	4938      	ldr	r1, [pc, #224]	; (28c14 <nct_mqtt_evt_handler+0x2d4>)
   28b32:	f01e fee7 	bl	47904 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   28b36:	f240 42d2 	movw	r2, #1234	; 0x4d2
   28b3a:	88a3      	ldrh	r3, [r4, #4]
   28b3c:	4293      	cmp	r3, r2
   28b3e:	d147      	bne.n	28bd0 <nct_mqtt_evt_handler+0x290>
			evt.type = NCT_EVT_CC_CONNECTED;
   28b40:	2301      	movs	r3, #1
   28b42:	e75c      	b.n	289fe <nct_mqtt_evt_handler+0xbe>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   28b44:	2304      	movs	r3, #4
   28b46:	f04f 0000 	mov.w	r0, #0
   28b4a:	4a25      	ldr	r2, [pc, #148]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28b4c:	f363 0002 	bfi	r0, r3, #0, #3
   28b50:	4b24      	ldr	r3, [pc, #144]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28b52:	f36f 00c5 	bfc	r0, #3, #3
   28b56:	1a9b      	subs	r3, r3, r2
   28b58:	08db      	lsrs	r3, r3, #3
   28b5a:	f363 108f 	bfi	r0, r3, #6, #10
   28b5e:	4a23      	ldr	r2, [pc, #140]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28b60:	492d      	ldr	r1, [pc, #180]	; (28c18 <nct_mqtt_evt_handler+0x2d8>)
   28b62:	f01e fecf 	bl	47904 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   28b66:	f240 43d2 	movw	r3, #1234	; 0x4d2
   28b6a:	88a2      	ldrh	r2, [r4, #4]
   28b6c:	429a      	cmp	r2, r3
   28b6e:	f47f af77 	bne.w	28a60 <nct_mqtt_evt_handler+0x120>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   28b72:	2307      	movs	r3, #7
   28b74:	e743      	b.n	289fe <nct_mqtt_evt_handler+0xbe>
		LOG_DBG("MQTT_EVT_PUBACK: id=%d result=%d",
   28b76:	2504      	movs	r5, #4
   28b78:	f04f 0000 	mov.w	r0, #0
   28b7c:	4a18      	ldr	r2, [pc, #96]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28b7e:	4b19      	ldr	r3, [pc, #100]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28b80:	f365 0002 	bfi	r0, r5, #0, #3
   28b84:	1a9b      	subs	r3, r3, r2
   28b86:	69e2      	ldr	r2, [r4, #28]
   28b88:	08db      	lsrs	r3, r3, #3
   28b8a:	f36f 00c5 	bfc	r0, #3, #3
   28b8e:	f363 108f 	bfi	r0, r3, #6, #10
   28b92:	9200      	str	r2, [sp, #0]
   28b94:	88a3      	ldrh	r3, [r4, #4]
   28b96:	4a15      	ldr	r2, [pc, #84]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28b98:	4920      	ldr	r1, [pc, #128]	; (28c1c <nct_mqtt_evt_handler+0x2dc>)
   28b9a:	f01e feb3 	bl	47904 <log_string_sync>
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   28b9e:	88a3      	ldrh	r3, [r4, #4]
		evt.type = NCT_EVT_CC_TX_DATA_CNF;
   28ba0:	f88d 5018 	strb.w	r5, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   28ba4:	9305      	str	r3, [sp, #20]
   28ba6:	e78d      	b.n	28ac4 <nct_mqtt_evt_handler+0x184>
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);
   28ba8:	2304      	movs	r3, #4
   28baa:	f04f 0000 	mov.w	r0, #0
   28bae:	4a0c      	ldr	r2, [pc, #48]	; (28be0 <nct_mqtt_evt_handler+0x2a0>)
   28bb0:	f363 0002 	bfi	r0, r3, #0, #3
   28bb4:	4b0b      	ldr	r3, [pc, #44]	; (28be4 <nct_mqtt_evt_handler+0x2a4>)
   28bb6:	f36f 00c5 	bfc	r0, #3, #3
   28bba:	1a9b      	subs	r3, r3, r2
   28bbc:	08db      	lsrs	r3, r3, #3
   28bbe:	f363 108f 	bfi	r0, r3, #6, #10
   28bc2:	4a0a      	ldr	r2, [pc, #40]	; (28bec <nct_mqtt_evt_handler+0x2ac>)
   28bc4:	69e3      	ldr	r3, [r4, #28]
   28bc6:	4916      	ldr	r1, [pc, #88]	; (28c20 <nct_mqtt_evt_handler+0x2e0>)
   28bc8:	f01e fe9c 	bl	47904 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   28bcc:	2309      	movs	r3, #9
   28bce:	e716      	b.n	289fe <nct_mqtt_evt_handler+0xbe>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   28bd0:	f242 223d 	movw	r2, #8765	; 0x223d
   28bd4:	4293      	cmp	r3, r2
   28bd6:	f47f af43 	bne.w	28a60 <nct_mqtt_evt_handler+0x120>
			evt.type = NCT_EVT_DC_CONNECTED;
   28bda:	2302      	movs	r3, #2
   28bdc:	e70f      	b.n	289fe <nct_mqtt_evt_handler+0xbe>
   28bde:	bf00      	nop
   28be0:	0004a688 	.word	0x0004a688
   28be4:	0004a788 	.word	0x0004a788
   28be8:	000502b8 	.word	0x000502b8
   28bec:	0004fe64 	.word	0x0004fe64
   28bf0:	000502de 	.word	0x000502de
   28bf4:	000502ff 	.word	0x000502ff
   28bf8:	00050318 	.word	0x00050318
   28bfc:	0005032d 	.word	0x0005032d
   28c00:	2002413c 	.word	0x2002413c
   28c04:	00050351 	.word	0x00050351
   28c08:	0004b178 	.word	0x0004b178
   28c0c:	0004b19c 	.word	0x0004b19c
   28c10:	000503f3 	.word	0x000503f3
   28c14:	00050370 	.word	0x00050370
   28c18:	00050395 	.word	0x00050395
   28c1c:	000503ab 	.word	0x000503ab
   28c20:	000503d0 	.word	0x000503d0

00028c24 <nct_mqtt_connect>:
{
   28c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	mqtt_client_init(&nct.client);
   28c28:	4c27      	ldr	r4, [pc, #156]	; (28cc8 <nct_mqtt_connect+0xa4>)
	nct.client.password = NULL;
   28c2a:	2700      	movs	r7, #0
	mqtt_client_init(&nct.client);
   28c2c:	f104 0018 	add.w	r0, r4, #24
   28c30:	f01f fbb9 	bl	483a6 <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   28c34:	4b25      	ldr	r3, [pc, #148]	; (28ccc <nct_mqtt_connect+0xa8>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   28c36:	4826      	ldr	r0, [pc, #152]	; (28cd0 <nct_mqtt_connect+0xac>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   28c38:	f104 0990 	add.w	r9, r4, #144	; 0x90
	nct.client.evt_cb = nct_mqtt_evt_handler;
   28c3c:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   28c3e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   28c42:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   28c44:	f018 fdee 	bl	41824 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   28c48:	2304      	movs	r3, #4
   28c4a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.rx_buf = nct.rx_buf;
   28c4e:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   28c52:	67e3      	str	r3, [r4, #124]	; 0x7c
   28c54:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   28c56:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   28c5a:	f04f 0801 	mov.w	r8, #1
	nct.client.tx_buf = nct.tx_buf;
   28c5e:	f504 72e2 	add.w	r2, r4, #452	; 0x1c4
   28c62:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   28c66:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   28c68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   28c6c:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
   28c70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   28c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   28c74:	e896 0003 	ldmia.w	r6, {r0, r1}
	nct.client.user_name = NULL;
   28c78:	e9c4 771a 	strd	r7, r7, [r4, #104]	; 0x68
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   28c7c:	4a15      	ldr	r2, [pc, #84]	; (28cd4 <nct_mqtt_connect+0xb0>)
   28c7e:	e885 0003 	stmia.w	r5, {r0, r1}
   28c82:	4915      	ldr	r1, [pc, #84]	; (28cd8 <nct_mqtt_connect+0xb4>)
   28c84:	f104 0018 	add.w	r0, r4, #24
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   28c88:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   28c8c:	f002 f8b0 	bl	2adf0 <aws_fota_init>
	if (err != 0) {
   28c90:	4605      	mov	r5, r0
   28c92:	b928      	cbnz	r0, 28ca0 <nct_mqtt_connect+0x7c>
	return mqtt_connect(&nct.client);
   28c94:	f104 0018 	add.w	r0, r4, #24
}
   28c98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_connect(&nct.client);
   28c9c:	f01f bb9d 	b.w	483da <mqtt_connect>
		LOG_ERR("ERROR: aws_fota_init %d", err);
   28ca0:	f04f 0000 	mov.w	r0, #0
   28ca4:	4a0d      	ldr	r2, [pc, #52]	; (28cdc <nct_mqtt_connect+0xb8>)
   28ca6:	4b0e      	ldr	r3, [pc, #56]	; (28ce0 <nct_mqtt_connect+0xbc>)
   28ca8:	f368 0002 	bfi	r0, r8, #0, #3
   28cac:	1a9b      	subs	r3, r3, r2
   28cae:	08db      	lsrs	r3, r3, #3
   28cb0:	f367 00c5 	bfi	r0, r7, #3, #3
   28cb4:	f363 108f 	bfi	r0, r3, #6, #10
   28cb8:	462a      	mov	r2, r5
   28cba:	490a      	ldr	r1, [pc, #40]	; (28ce4 <nct_mqtt_connect+0xc0>)
   28cbc:	f01e fe22 	bl	47904 <log_string_sync>
}
   28cc0:	4628      	mov	r0, r5
   28cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28cc6:	bf00      	nop
   28cc8:	20023e78 	.word	0x20023e78
   28ccc:	00028941 	.word	0x00028941
   28cd0:	2002b733 	.word	0x2002b733
   28cd4:	000288d5 	.word	0x000288d5
   28cd8:	0004f78d 	.word	0x0004f78d
   28cdc:	0004a688 	.word	0x0004a688
   28ce0:	0004a788 	.word	0x0004a788
   28ce4:	000502a0 	.word	0x000502a0

00028ce8 <nct_init>:

int nct_init(void)
{
   28ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	dc_endpoint_reset();
   28cea:	f7ff fd95 	bl	28818 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   28cee:	f240 2201 	movw	r2, #513	; 0x201
   28cf2:	2100      	movs	r1, #0
   28cf4:	2066      	movs	r0, #102	; 0x66
   28cf6:	f005 fbe7 	bl	2e4c8 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   28cfa:	1e04      	subs	r4, r0, #0
   28cfc:	da0b      	bge.n	28d16 <nct_init+0x2e>
   28cfe:	4985      	ldr	r1, [pc, #532]	; (28f14 <nct_init+0x22c>)
   28d00:	4885      	ldr	r0, [pc, #532]	; (28f18 <nct_init+0x230>)
   28d02:	f240 1309 	movw	r3, #265	; 0x109
   28d06:	4a85      	ldr	r2, [pc, #532]	; (28f1c <nct_init+0x234>)
   28d08:	f01e fddf 	bl	478ca <printk>
   28d0c:	f240 1109 	movw	r1, #265	; 0x109
   28d10:	4882      	ldr	r0, [pc, #520]	; (28f1c <nct_init+0x234>)
   28d12:	f01e fde7 	bl	478e4 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   28d16:	2207      	movs	r2, #7
   28d18:	4981      	ldr	r1, [pc, #516]	; (28f20 <nct_init+0x238>)
   28d1a:	4620      	mov	r0, r4
   28d1c:	f005 fc2a 	bl	2e574 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   28d20:	2807      	cmp	r0, #7
   28d22:	d00b      	beq.n	28d3c <nct_init+0x54>
   28d24:	497f      	ldr	r1, [pc, #508]	; (28f24 <nct_init+0x23c>)
   28d26:	487c      	ldr	r0, [pc, #496]	; (28f18 <nct_init+0x230>)
   28d28:	f44f 7386 	mov.w	r3, #268	; 0x10c
   28d2c:	4a7b      	ldr	r2, [pc, #492]	; (28f1c <nct_init+0x234>)
   28d2e:	f01e fdcc 	bl	478ca <printk>
   28d32:	f44f 7186 	mov.w	r1, #268	; 0x10c
   28d36:	4879      	ldr	r0, [pc, #484]	; (28f1c <nct_init+0x234>)
   28d38:	f01e fdd4 	bl	478e4 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   28d3c:	220f      	movs	r2, #15
   28d3e:	4669      	mov	r1, sp
   28d40:	4620      	mov	r0, r4
   28d42:	f005 fc63 	bl	2e60c <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   28d46:	280f      	cmp	r0, #15
   28d48:	d00b      	beq.n	28d62 <nct_init+0x7a>
   28d4a:	4977      	ldr	r1, [pc, #476]	; (28f28 <nct_init+0x240>)
   28d4c:	4872      	ldr	r0, [pc, #456]	; (28f18 <nct_init+0x230>)
   28d4e:	f240 130f 	movw	r3, #271	; 0x10f
   28d52:	4a72      	ldr	r2, [pc, #456]	; (28f1c <nct_init+0x234>)
   28d54:	f01e fdb9 	bl	478ca <printk>
   28d58:	f240 110f 	movw	r1, #271	; 0x10f
   28d5c:	486f      	ldr	r0, [pc, #444]	; (28f1c <nct_init+0x234>)
   28d5e:	f01e fdc1 	bl	478e4 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   28d62:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   28d64:	4a71      	ldr	r2, [pc, #452]	; (28f2c <nct_init+0x244>)
	imei_buf[NRF_IMEI_LEN] = 0;
   28d66:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   28d6a:	2114      	movs	r1, #20
   28d6c:	466b      	mov	r3, sp
   28d6e:	4870      	ldr	r0, [pc, #448]	; (28f30 <nct_init+0x248>)
   28d70:	f018 fb88 	bl	41484 <snprintf>
	ret = nrf_close(at_socket_fd);
   28d74:	4620      	mov	r0, r4
   28d76:	f005 fbb9 	bl	2e4ec <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   28d7a:	b158      	cbz	r0, 28d94 <nct_init+0xac>
   28d7c:	496d      	ldr	r1, [pc, #436]	; (28f34 <nct_init+0x24c>)
   28d7e:	4866      	ldr	r0, [pc, #408]	; (28f18 <nct_init+0x230>)
   28d80:	f240 1315 	movw	r3, #277	; 0x115
   28d84:	4a65      	ldr	r2, [pc, #404]	; (28f1c <nct_init+0x234>)
   28d86:	f01e fda0 	bl	478ca <printk>
   28d8a:	f240 1115 	movw	r1, #277	; 0x115
   28d8e:	4863      	ldr	r0, [pc, #396]	; (28f1c <nct_init+0x234>)
   28d90:	f01e fda8 	bl	478e4 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   28d94:	2504      	movs	r5, #4
   28d96:	f04f 0600 	mov.w	r6, #0
   28d9a:	4b67      	ldr	r3, [pc, #412]	; (28f38 <nct_init+0x250>)
   28d9c:	4c67      	ldr	r4, [pc, #412]	; (28f3c <nct_init+0x254>)
   28d9e:	4864      	ldr	r0, [pc, #400]	; (28f30 <nct_init+0x248>)
   28da0:	1ae4      	subs	r4, r4, r3
   28da2:	f01e fdc1 	bl	47928 <log_strdup>
   28da6:	f365 0602 	bfi	r6, r5, #0, #3
   28daa:	f36f 06c5 	bfc	r6, #3, #3
   28dae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   28db2:	f364 168f 	bfi	r6, r4, #6, #10
   28db6:	4603      	mov	r3, r0
   28db8:	4a61      	ldr	r2, [pc, #388]	; (28f40 <nct_init+0x258>)
   28dba:	4962      	ldr	r1, [pc, #392]	; (28f44 <nct_init+0x25c>)
   28dbc:	4630      	mov	r0, r6
   28dbe:	f01e fda1 	bl	47904 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   28dc2:	4b5b      	ldr	r3, [pc, #364]	; (28f30 <nct_init+0x248>)
   28dc4:	4a60      	ldr	r2, [pc, #384]	; (28f48 <nct_init+0x260>)
   28dc6:	2127      	movs	r1, #39	; 0x27
   28dc8:	4860      	ldr	r0, [pc, #384]	; (28f4c <nct_init+0x264>)
   28dca:	f018 fb5b 	bl	41484 <snprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   28dce:	2826      	cmp	r0, #38	; 0x26
   28dd0:	d003      	beq.n	28dda <nct_init+0xf2>
		return -ENOMEM;
   28dd2:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   28dd6:	b004      	add	sp, #16
   28dd8:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   28dda:	f04f 0600 	mov.w	r6, #0
   28dde:	485b      	ldr	r0, [pc, #364]	; (28f4c <nct_init+0x264>)
   28de0:	f01e fda2 	bl	47928 <log_strdup>
   28de4:	f365 0602 	bfi	r6, r5, #0, #3
   28de8:	f36f 06c5 	bfc	r6, #3, #3
   28dec:	f364 168f 	bfi	r6, r4, #6, #10
   28df0:	4603      	mov	r3, r0
   28df2:	4a57      	ldr	r2, [pc, #348]	; (28f50 <nct_init+0x268>)
   28df4:	4957      	ldr	r1, [pc, #348]	; (28f54 <nct_init+0x26c>)
   28df6:	4630      	mov	r0, r6
   28df8:	f01e fd84 	bl	47904 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   28dfc:	4b4c      	ldr	r3, [pc, #304]	; (28f30 <nct_init+0x248>)
   28dfe:	4a56      	ldr	r2, [pc, #344]	; (28f58 <nct_init+0x270>)
   28e00:	2128      	movs	r1, #40	; 0x28
   28e02:	4856      	ldr	r0, [pc, #344]	; (28f5c <nct_init+0x274>)
   28e04:	f018 fb3e 	bl	41484 <snprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   28e08:	2827      	cmp	r0, #39	; 0x27
   28e0a:	d1e2      	bne.n	28dd2 <nct_init+0xea>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   28e0c:	f04f 0600 	mov.w	r6, #0
   28e10:	4852      	ldr	r0, [pc, #328]	; (28f5c <nct_init+0x274>)
   28e12:	f01e fd89 	bl	47928 <log_strdup>
   28e16:	f365 0602 	bfi	r6, r5, #0, #3
   28e1a:	f36f 06c5 	bfc	r6, #3, #3
   28e1e:	f364 168f 	bfi	r6, r4, #6, #10
   28e22:	4603      	mov	r3, r0
   28e24:	4a4a      	ldr	r2, [pc, #296]	; (28f50 <nct_init+0x268>)
   28e26:	494e      	ldr	r1, [pc, #312]	; (28f60 <nct_init+0x278>)
   28e28:	4630      	mov	r0, r6
   28e2a:	f01e fd6b 	bl	47904 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   28e2e:	4b40      	ldr	r3, [pc, #256]	; (28f30 <nct_init+0x248>)
   28e30:	4a4c      	ldr	r2, [pc, #304]	; (28f64 <nct_init+0x27c>)
   28e32:	2134      	movs	r1, #52	; 0x34
   28e34:	484c      	ldr	r0, [pc, #304]	; (28f68 <nct_init+0x280>)
   28e36:	f018 fb25 	bl	41484 <snprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   28e3a:	2833      	cmp	r0, #51	; 0x33
   28e3c:	d1c9      	bne.n	28dd2 <nct_init+0xea>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   28e3e:	f04f 0600 	mov.w	r6, #0
   28e42:	4849      	ldr	r0, [pc, #292]	; (28f68 <nct_init+0x280>)
   28e44:	f01e fd70 	bl	47928 <log_strdup>
   28e48:	f365 0602 	bfi	r6, r5, #0, #3
   28e4c:	f36f 06c5 	bfc	r6, #3, #3
   28e50:	f364 168f 	bfi	r6, r4, #6, #10
   28e54:	4603      	mov	r3, r0
   28e56:	4a3e      	ldr	r2, [pc, #248]	; (28f50 <nct_init+0x268>)
   28e58:	4944      	ldr	r1, [pc, #272]	; (28f6c <nct_init+0x284>)
   28e5a:	4630      	mov	r0, r6
   28e5c:	f01e fd52 	bl	47904 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   28e60:	4b33      	ldr	r3, [pc, #204]	; (28f30 <nct_init+0x248>)
   28e62:	4a43      	ldr	r2, [pc, #268]	; (28f70 <nct_init+0x288>)
   28e64:	2134      	movs	r1, #52	; 0x34
   28e66:	4843      	ldr	r0, [pc, #268]	; (28f74 <nct_init+0x28c>)
   28e68:	f018 fb0c 	bl	41484 <snprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   28e6c:	2833      	cmp	r0, #51	; 0x33
   28e6e:	d1b0      	bne.n	28dd2 <nct_init+0xea>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   28e70:	f04f 0600 	mov.w	r6, #0
   28e74:	483f      	ldr	r0, [pc, #252]	; (28f74 <nct_init+0x28c>)
   28e76:	f01e fd57 	bl	47928 <log_strdup>
   28e7a:	f365 0602 	bfi	r6, r5, #0, #3
   28e7e:	f36f 06c5 	bfc	r6, #3, #3
   28e82:	f364 168f 	bfi	r6, r4, #6, #10
   28e86:	4603      	mov	r3, r0
   28e88:	4a31      	ldr	r2, [pc, #196]	; (28f50 <nct_init+0x268>)
   28e8a:	493b      	ldr	r1, [pc, #236]	; (28f78 <nct_init+0x290>)
   28e8c:	4630      	mov	r0, r6
   28e8e:	f01e fd39 	bl	47904 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic),
   28e92:	4b27      	ldr	r3, [pc, #156]	; (28f30 <nct_init+0x248>)
   28e94:	4a39      	ldr	r2, [pc, #228]	; (28f7c <nct_init+0x294>)
   28e96:	212e      	movs	r1, #46	; 0x2e
   28e98:	4839      	ldr	r0, [pc, #228]	; (28f80 <nct_init+0x298>)
   28e9a:	f018 faf3 	bl	41484 <snprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   28e9e:	282d      	cmp	r0, #45	; 0x2d
   28ea0:	d197      	bne.n	28dd2 <nct_init+0xea>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   28ea2:	f04f 0600 	mov.w	r6, #0
   28ea6:	4836      	ldr	r0, [pc, #216]	; (28f80 <nct_init+0x298>)
   28ea8:	f01e fd3e 	bl	47928 <log_strdup>
   28eac:	f365 0602 	bfi	r6, r5, #0, #3
   28eb0:	f36f 06c5 	bfc	r6, #3, #3
   28eb4:	f364 168f 	bfi	r6, r4, #6, #10
   28eb8:	4603      	mov	r3, r0
   28eba:	4a25      	ldr	r2, [pc, #148]	; (28f50 <nct_init+0x268>)
   28ebc:	4931      	ldr	r1, [pc, #196]	; (28f84 <nct_init+0x29c>)
   28ebe:	4630      	mov	r0, r6
   28ec0:	f01e fd20 	bl	47904 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   28ec4:	4b1a      	ldr	r3, [pc, #104]	; (28f30 <nct_init+0x248>)
   28ec6:	4a30      	ldr	r2, [pc, #192]	; (28f88 <nct_init+0x2a0>)
   28ec8:	212b      	movs	r1, #43	; 0x2b
   28eca:	4830      	ldr	r0, [pc, #192]	; (28f8c <nct_init+0x2a4>)
   28ecc:	f018 fada 	bl	41484 <snprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   28ed0:	282a      	cmp	r0, #42	; 0x2a
   28ed2:	f47f af7e 	bne.w	28dd2 <nct_init+0xea>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   28ed6:	f04f 0600 	mov.w	r6, #0
   28eda:	482c      	ldr	r0, [pc, #176]	; (28f8c <nct_init+0x2a4>)
   28edc:	f01e fd24 	bl	47928 <log_strdup>
   28ee0:	f365 0602 	bfi	r6, r5, #0, #3
   28ee4:	f36f 06c5 	bfc	r6, #3, #3
   28ee8:	f364 168f 	bfi	r6, r4, #6, #10
   28eec:	4603      	mov	r3, r0
   28eee:	4a18      	ldr	r2, [pc, #96]	; (28f50 <nct_init+0x268>)
   28ef0:	4630      	mov	r0, r6
   28ef2:	4927      	ldr	r1, [pc, #156]	; (28f90 <nct_init+0x2a8>)
   28ef4:	f01e fd06 	bl	47904 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   28ef8:	2202      	movs	r2, #2
   28efa:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   28efc:	4b25      	ldr	r3, [pc, #148]	; (28f94 <nct_init+0x2ac>)
	nct.tls_config.cipher_count = 0;
   28efe:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   28f02:	2201      	movs	r2, #1
   28f04:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   28f06:	4a24      	ldr	r2, [pc, #144]	; (28f98 <nct_init+0x2b0>)
	nct.tls_config.cipher_list = NULL;
   28f08:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   28f0a:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   28f0c:	4a23      	ldr	r2, [pc, #140]	; (28f9c <nct_init+0x2b4>)
   28f0e:	615a      	str	r2, [r3, #20]
	return nct_provision();
   28f10:	e761      	b.n	28dd6 <nct_init+0xee>
   28f12:	bf00      	nop
   28f14:	000500e6 	.word	0x000500e6
   28f18:	0004ccf0 	.word	0x0004ccf0
   28f1c:	000500a2 	.word	0x000500a2
   28f20:	0004f5b3 	.word	0x0004f5b3
   28f24:	000500f8 	.word	0x000500f8
   28f28:	0005010b 	.word	0x0005010b
   28f2c:	0005011c 	.word	0x0005011c
   28f30:	2002b733 	.word	0x2002b733
   28f34:	0004eae9 	.word	0x0004eae9
   28f38:	0004a688 	.word	0x0004a688
   28f3c:	0004a788 	.word	0x0004a788
   28f40:	0004fe2a 	.word	0x0004fe2a
   28f44:	00050123 	.word	0x00050123
   28f48:	00050136 	.word	0x00050136
   28f4c:	2002b77b 	.word	0x2002b77b
   28f50:	0004fe3c 	.word	0x0004fe3c
   28f54:	0005014c 	.word	0x0005014c
   28f58:	00050166 	.word	0x00050166
   28f5c:	2002b70b 	.word	0x2002b70b
   28f60:	0005017d 	.word	0x0005017d
   28f64:	00050194 	.word	0x00050194
   28f68:	2002b747 	.word	0x2002b747
   28f6c:	000501b7 	.word	0x000501b7
   28f70:	000501ce 	.word	0x000501ce
   28f74:	2002b7cd 	.word	0x2002b7cd
   28f78:	000501f1 	.word	0x000501f1
   28f7c:	0005020c 	.word	0x0005020c
   28f80:	2002b801 	.word	0x2002b801
   28f84:	00050229 	.word	0x00050229
   28f88:	0005023e 	.word	0x0005023e
   28f8c:	2002b7a2 	.word	0x2002b7a2
   28f90:	00050258 	.word	0x00050258
   28f94:	20023e78 	.word	0x20023e78
   28f98:	20031b80 	.word	0x20031b80
   28f9c:	00050271 	.word	0x00050271

00028fa0 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   28fa0:	b570      	push	{r4, r5, r6, lr}
   28fa2:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   28fa4:	2220      	movs	r2, #32
   28fa6:	2100      	movs	r1, #0
   28fa8:	a804      	add	r0, sp, #16
   28faa:	f018 f845 	bl	41038 <memset>
   28fae:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   28fb0:	4d48      	ldr	r5, [pc, #288]	; (290d4 <nct_connect+0x134>)
   28fb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
   28fb6:	682b      	ldr	r3, [r5, #0]
   28fb8:	b94b      	cbnz	r3, 28fce <nct_connect+0x2e>
   28fba:	4947      	ldr	r1, [pc, #284]	; (290d8 <nct_connect+0x138>)
   28fbc:	4847      	ldr	r0, [pc, #284]	; (290dc <nct_connect+0x13c>)
   28fbe:	2393      	movs	r3, #147	; 0x93
   28fc0:	4a47      	ldr	r2, [pc, #284]	; (290e0 <nct_connect+0x140>)
   28fc2:	f01e fc82 	bl	478ca <printk>
   28fc6:	2193      	movs	r1, #147	; 0x93
   28fc8:	4845      	ldr	r0, [pc, #276]	; (290e0 <nct_connect+0x140>)
   28fca:	f01e fc8b 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   28fce:	682b      	ldr	r3, [r5, #0]
   28fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28fd2:	b94b      	cbnz	r3, 28fe8 <nct_connect+0x48>
   28fd4:	4943      	ldr	r1, [pc, #268]	; (290e4 <nct_connect+0x144>)
   28fd6:	4841      	ldr	r0, [pc, #260]	; (290dc <nct_connect+0x13c>)
   28fd8:	2394      	movs	r3, #148	; 0x94
   28fda:	4a41      	ldr	r2, [pc, #260]	; (290e0 <nct_connect+0x140>)
   28fdc:	f01e fc75 	bl	478ca <printk>
   28fe0:	2194      	movs	r1, #148	; 0x94
   28fe2:	483f      	ldr	r0, [pc, #252]	; (290e0 <nct_connect+0x140>)
   28fe4:	f01e fc7e 	bl	478e4 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   28fe8:	682b      	ldr	r3, [r5, #0]
   28fea:	aa04      	add	r2, sp, #16
   28fec:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   28fee:	2100      	movs	r1, #0
   28ff0:	ab03      	add	r3, sp, #12
   28ff2:	483d      	ldr	r0, [pc, #244]	; (290e8 <nct_connect+0x148>)
   28ff4:	47a0      	blx	r4
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   28ff6:	4604      	mov	r4, r0
   28ff8:	b1a0      	cbz	r0, 29024 <nct_connect+0x84>
		LOG_DBG("getaddrinfo failed %d", err);
   28ffa:	2304      	movs	r3, #4
   28ffc:	f04f 0000 	mov.w	r0, #0
   29000:	4a3a      	ldr	r2, [pc, #232]	; (290ec <nct_connect+0x14c>)
   29002:	f363 0002 	bfi	r0, r3, #0, #3
   29006:	4b3a      	ldr	r3, [pc, #232]	; (290f0 <nct_connect+0x150>)
   29008:	f36f 00c5 	bfc	r0, #3, #3
   2900c:	1a9b      	subs	r3, r3, r2
   2900e:	08db      	lsrs	r3, r3, #3
   29010:	f363 108f 	bfi	r0, r3, #6, #10
   29014:	4a37      	ldr	r2, [pc, #220]	; (290f4 <nct_connect+0x154>)
   29016:	4623      	mov	r3, r4
   29018:	4937      	ldr	r1, [pc, #220]	; (290f8 <nct_connect+0x158>)
   2901a:	f01e fc73 	bl	47904 <log_string_sync>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2901e:	4620      	mov	r0, r4
   29020:	b00c      	add	sp, #48	; 0x30
   29022:	bd70      	pop	{r4, r5, r6, pc}
	addr = result;
   29024:	9903      	ldr	r1, [sp, #12]
	while (addr != NULL) {
   29026:	2900      	cmp	r1, #0
   29028:	d050      	beq.n	290cc <nct_connect+0x12c>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2902a:	690b      	ldr	r3, [r1, #16]
   2902c:	4a30      	ldr	r2, [pc, #192]	; (290f0 <nct_connect+0x150>)
   2902e:	482f      	ldr	r0, [pc, #188]	; (290ec <nct_connect+0x14c>)
   29030:	2b08      	cmp	r3, #8
   29032:	eba2 0200 	sub.w	r2, r2, r0
   29036:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2903a:	d136      	bne.n	290aa <nct_connect+0x10a>
				->sin_addr.s_addr;
   2903c:	694b      	ldr	r3, [r1, #20]
			broker->sin_family = AF_INET;
   2903e:	482f      	ldr	r0, [pc, #188]	; (290fc <nct_connect+0x15c>)
				->sin_addr.s_addr;
   29040:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   29042:	492f      	ldr	r1, [pc, #188]	; (29100 <nct_connect+0x160>)
   29044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
			broker->sin_family = AF_INET;
   29048:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   2904c:	2104      	movs	r1, #4
   2904e:	f04f 0000 	mov.w	r0, #0
   29052:	f361 0002 	bfi	r0, r1, #0, #3
   29056:	f364 00c5 	bfi	r0, r4, #3, #3
   2905a:	f362 108f 	bfi	r0, r2, #6, #10
   2905e:	4929      	ldr	r1, [pc, #164]	; (29104 <nct_connect+0x164>)
   29060:	4a24      	ldr	r2, [pc, #144]	; (290f4 <nct_connect+0x154>)
   29062:	f01e fc4f 	bl	47904 <log_string_sync>
			err = nct_mqtt_connect();
   29066:	f7ff fddd 	bl	28c24 <nct_mqtt_connect>
   2906a:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   2906c:	682b      	ldr	r3, [r5, #0]
	freeaddrinfo(result);
   2906e:	9e03      	ldr	r6, [sp, #12]
   29070:	b94b      	cbnz	r3, 29086 <nct_connect+0xe6>
   29072:	4919      	ldr	r1, [pc, #100]	; (290d8 <nct_connect+0x138>)
   29074:	4819      	ldr	r0, [pc, #100]	; (290dc <nct_connect+0x13c>)
   29076:	239b      	movs	r3, #155	; 0x9b
   29078:	4a19      	ldr	r2, [pc, #100]	; (290e0 <nct_connect+0x140>)
   2907a:	f01e fc26 	bl	478ca <printk>
   2907e:	219b      	movs	r1, #155	; 0x9b
   29080:	4817      	ldr	r0, [pc, #92]	; (290e0 <nct_connect+0x140>)
   29082:	f01e fc2f 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   29086:	682b      	ldr	r3, [r5, #0]
   29088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2908a:	b94b      	cbnz	r3, 290a0 <nct_connect+0x100>
   2908c:	491e      	ldr	r1, [pc, #120]	; (29108 <nct_connect+0x168>)
   2908e:	4813      	ldr	r0, [pc, #76]	; (290dc <nct_connect+0x13c>)
   29090:	239c      	movs	r3, #156	; 0x9c
   29092:	4a13      	ldr	r2, [pc, #76]	; (290e0 <nct_connect+0x140>)
   29094:	f01e fc19 	bl	478ca <printk>
   29098:	219c      	movs	r1, #156	; 0x9c
   2909a:	4811      	ldr	r0, [pc, #68]	; (290e0 <nct_connect+0x140>)
   2909c:	f01e fc22 	bl	478e4 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   290a0:	682b      	ldr	r3, [r5, #0]
   290a2:	4630      	mov	r0, r6
   290a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   290a6:	4798      	blx	r3
   290a8:	e7b9      	b.n	2901e <nct_connect+0x7e>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   290aa:	2104      	movs	r1, #4
   290ac:	f04f 0000 	mov.w	r0, #0
   290b0:	f361 0002 	bfi	r0, r1, #0, #3
   290b4:	f364 00c5 	bfi	r0, r4, #3, #3
   290b8:	2118      	movs	r1, #24
   290ba:	f362 108f 	bfi	r0, r2, #6, #10
   290be:	2208      	movs	r2, #8
   290c0:	e9cd 2100 	strd	r2, r1, [sp]
   290c4:	4a0b      	ldr	r2, [pc, #44]	; (290f4 <nct_connect+0x154>)
   290c6:	4911      	ldr	r1, [pc, #68]	; (2910c <nct_connect+0x16c>)
   290c8:	f01e fc1c 	bl	47904 <log_string_sync>
	err = -ENOENT;
   290cc:	f06f 0401 	mvn.w	r4, #1
   290d0:	e7cc      	b.n	2906c <nct_connect+0xcc>
   290d2:	bf00      	nop
   290d4:	20023bf8 	.word	0x20023bf8
   290d8:	0004ce24 	.word	0x0004ce24
   290dc:	0004ccf0 	.word	0x0004ccf0
   290e0:	0004cdf3 	.word	0x0004cdf3
   290e4:	0004ffac 	.word	0x0004ffac
   290e8:	00050271 	.word	0x00050271
   290ec:	0004a688 	.word	0x0004a688
   290f0:	0004a788 	.word	0x0004a788
   290f4:	0004fe79 	.word	0x0004fe79
   290f8:	0004ffc4 	.word	0x0004ffc4
   290fc:	b3220001 	.word	0xb3220001
   29100:	20023e78 	.word	0x20023e78
   29104:	0004ffde 	.word	0x0004ffde
   29108:	0005001d 	.word	0x0005001d
   2910c:	0004fff6 	.word	0x0004fff6

00029110 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   29110:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   29112:	2304      	movs	r3, #4
   29114:	f04f 0000 	mov.w	r0, #0
   29118:	4a0c      	ldr	r2, [pc, #48]	; (2914c <nct_cc_connect+0x3c>)
   2911a:	f363 0002 	bfi	r0, r3, #0, #3
   2911e:	4b0c      	ldr	r3, [pc, #48]	; (29150 <nct_cc_connect+0x40>)
   29120:	f36f 00c5 	bfc	r0, #3, #3
   29124:	1a9b      	subs	r3, r3, r2
   29126:	08db      	lsrs	r3, r3, #3
   29128:	f363 108f 	bfi	r0, r3, #6, #10
   2912c:	4a09      	ldr	r2, [pc, #36]	; (29154 <nct_cc_connect+0x44>)
   2912e:	490a      	ldr	r1, [pc, #40]	; (29158 <nct_cc_connect+0x48>)
   29130:	f01e fbe8 	bl	47904 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   29134:	4b09      	ldr	r3, [pc, #36]	; (2915c <nct_cc_connect+0x4c>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   29136:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   29138:	9300      	str	r3, [sp, #0]
   2913a:	4b09      	ldr	r3, [pc, #36]	; (29160 <nct_cc_connect+0x50>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2913c:	4809      	ldr	r0, [pc, #36]	; (29164 <nct_cc_connect+0x54>)
	const struct mqtt_subscription_list subscription_list = {
   2913e:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   29140:	f01f fa09 	bl	48556 <mqtt_subscribe>
}
   29144:	b003      	add	sp, #12
   29146:	f85d fb04 	ldr.w	pc, [sp], #4
   2914a:	bf00      	nop
   2914c:	0004a688 	.word	0x0004a688
   29150:	0004a788 	.word	0x0004a788
   29154:	0004fe85 	.word	0x0004fe85
   29158:	0004ff3d 	.word	0x0004ff3d
   2915c:	0004b178 	.word	0x0004b178
   29160:	04d20003 	.word	0x04d20003
   29164:	20023e90 	.word	0x20023e90

00029168 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   29168:	b570      	push	{r4, r5, r6, lr}
   2916a:	4b38      	ldr	r3, [pc, #224]	; (2924c <nct_cc_send+0xe4>)
   2916c:	4c38      	ldr	r4, [pc, #224]	; (29250 <nct_cc_send+0xe8>)
   2916e:	b088      	sub	sp, #32
   29170:	1ae4      	subs	r4, r4, r3
   29172:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   29176:	4605      	mov	r5, r0
   29178:	b980      	cbnz	r0, 2919c <nct_cc_send+0x34>
		LOG_ERR("cc_data == NULL");
   2917a:	2301      	movs	r3, #1
   2917c:	f04f 0000 	mov.w	r0, #0
   29180:	f363 0002 	bfi	r0, r3, #0, #3
   29184:	f365 00c5 	bfi	r0, r5, #3, #3
   29188:	f364 108f 	bfi	r0, r4, #6, #10
   2918c:	4931      	ldr	r1, [pc, #196]	; (29254 <nct_cc_send+0xec>)
   2918e:	f01e fbb9 	bl	47904 <log_string_sync>
		return -EINVAL;
   29192:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   29196:	4628      	mov	r0, r5
   29198:	b008      	add	sp, #32
   2919a:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2919c:	7b06      	ldrb	r6, [r0, #12]
   2919e:	2e01      	cmp	r6, #1
   291a0:	d90f      	bls.n	291c2 <nct_cc_send+0x5a>
		LOG_ERR("opcode = %d", cc_data->opcode);
   291a2:	2301      	movs	r3, #1
   291a4:	f04f 0000 	mov.w	r0, #0
   291a8:	f363 0002 	bfi	r0, r3, #0, #3
   291ac:	f36f 00c5 	bfc	r0, #3, #3
   291b0:	f364 108f 	bfi	r0, r4, #6, #10
   291b4:	4632      	mov	r2, r6
   291b6:	4928      	ldr	r1, [pc, #160]	; (29258 <nct_cc_send+0xf0>)
   291b8:	f01e fba4 	bl	47904 <log_string_sync>
		return -ENOTSUP;
   291bc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   291c0:	e7e9      	b.n	29196 <nct_cc_send+0x2e>
	struct mqtt_publish_param publish = {
   291c2:	2210      	movs	r2, #16
   291c4:	2100      	movs	r1, #0
   291c6:	eb0d 0002 	add.w	r0, sp, r2
   291ca:	f017 ff35 	bl	41038 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   291ce:	230c      	movs	r3, #12
   291d0:	4373      	muls	r3, r6
   291d2:	4922      	ldr	r1, [pc, #136]	; (2925c <nct_cc_send+0xf4>)
   291d4:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   291d6:	58cb      	ldr	r3, [r1, r3]
   291d8:	9302      	str	r3, [sp, #8]
   291da:	6853      	ldr	r3, [r2, #4]
   291dc:	9303      	str	r3, [sp, #12]
   291de:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   291e0:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   291e2:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   291e6:	b11a      	cbz	r2, 291f0 <nct_cc_send+0x88>
   291e8:	686b      	ldr	r3, [r5, #4]
   291ea:	b10b      	cbz	r3, 291f0 <nct_cc_send+0x88>
		publish.message.payload.len = cc_data->data.len;
   291ec:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   291f0:	68ab      	ldr	r3, [r5, #8]
   291f2:	b333      	cbz	r3, 29242 <nct_cc_send+0xda>
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   291f4:	2104      	movs	r1, #4
   291f6:	f04f 0000 	mov.w	r0, #0
   291fa:	f361 0002 	bfi	r0, r1, #0, #3
   291fe:	f36f 00c5 	bfc	r0, #3, #3
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   29202:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   29204:	f364 108f 	bfi	r0, r4, #6, #10
   29208:	e9cd 6200 	strd	r6, r2, [sp]
   2920c:	4914      	ldr	r1, [pc, #80]	; (29260 <nct_cc_send+0xf8>)
   2920e:	4a15      	ldr	r2, [pc, #84]	; (29264 <nct_cc_send+0xfc>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   29210:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   29214:	f01e fb76 	bl	47904 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   29218:	a902      	add	r1, sp, #8
   2921a:	4813      	ldr	r0, [pc, #76]	; (29268 <nct_cc_send+0x100>)
   2921c:	f01f f91f 	bl	4845e <mqtt_publish>
	if (err) {
   29220:	4605      	mov	r5, r0
   29222:	2800      	cmp	r0, #0
   29224:	d0b7      	beq.n	29196 <nct_cc_send+0x2e>
		LOG_ERR("mqtt_publish failed %d", err);
   29226:	2301      	movs	r3, #1
   29228:	f04f 0000 	mov.w	r0, #0
   2922c:	f363 0002 	bfi	r0, r3, #0, #3
   29230:	f36f 00c5 	bfc	r0, #3, #3
   29234:	f364 108f 	bfi	r0, r4, #6, #10
   29238:	462a      	mov	r2, r5
   2923a:	490c      	ldr	r1, [pc, #48]	; (2926c <nct_cc_send+0x104>)
   2923c:	f01e fb62 	bl	47904 <log_string_sync>
   29240:	e7a9      	b.n	29196 <nct_cc_send+0x2e>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   29242:	490b      	ldr	r1, [pc, #44]	; (29270 <nct_cc_send+0x108>)
   29244:	680b      	ldr	r3, [r1, #0]
   29246:	3301      	adds	r3, #1
   29248:	600b      	str	r3, [r1, #0]
   2924a:	e7d3      	b.n	291f4 <nct_cc_send+0x8c>
   2924c:	0004a688 	.word	0x0004a688
   29250:	0004a788 	.word	0x0004a788
   29254:	0004ff50 	.word	0x0004ff50
   29258:	0004ff60 	.word	0x0004ff60
   2925c:	0004b1a8 	.word	0x0004b1a8
   29260:	0004ff6c 	.word	0x0004ff6c
   29264:	0004fe94 	.word	0x0004fe94
   29268:	20023e90 	.word	0x20023e90
   2926c:	0004ff95 	.word	0x0004ff95
   29270:	20023e74 	.word	0x20023e74

00029274 <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   29274:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   29276:	2304      	movs	r3, #4
{
   29278:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   2927a:	f04f 0000 	mov.w	r0, #0
{
   2927e:	460d      	mov	r5, r1
   29280:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   29282:	f363 0002 	bfi	r0, r3, #0, #3
   29286:	4a11      	ldr	r2, [pc, #68]	; (292cc <nct_dc_endpoint_set+0x58>)
   29288:	4b11      	ldr	r3, [pc, #68]	; (292d0 <nct_dc_endpoint_set+0x5c>)
   2928a:	f36f 00c5 	bfc	r0, #3, #3
   2928e:	1a9b      	subs	r3, r3, r2
   29290:	08db      	lsrs	r3, r3, #3
   29292:	f363 108f 	bfi	r0, r3, #6, #10
   29296:	4a0f      	ldr	r2, [pc, #60]	; (292d4 <nct_dc_endpoint_set+0x60>)
   29298:	490f      	ldr	r1, [pc, #60]	; (292d8 <nct_dc_endpoint_set+0x64>)
   2929a:	f01e fb33 	bl	47904 <log_string_sync>

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2929e:	f7ff fb01 	bl	288a4 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   292a2:	6872      	ldr	r2, [r6, #4]
   292a4:	4b0d      	ldr	r3, [pc, #52]	; (292dc <nct_dc_endpoint_set+0x68>)
   292a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	nct.dc_tx_endp.size = tx_endp->len;
   292aa:	6832      	ldr	r2, [r6, #0]
   292ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   292b0:	686a      	ldr	r2, [r5, #4]
   292b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	nct.dc_rx_endp.size = rx_endp->len;
   292b6:	682a      	ldr	r2, [r5, #0]
   292b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	if (m_endp != NULL) {
   292bc:	b12c      	cbz	r4, 292ca <nct_dc_endpoint_set+0x56>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   292be:	6862      	ldr	r2, [r4, #4]
   292c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		nct.dc_m_endp.size = m_endp->len;
   292c4:	6822      	ldr	r2, [r4, #0]
   292c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
   292ca:	bd70      	pop	{r4, r5, r6, pc}
   292cc:	0004a688 	.word	0x0004a688
   292d0:	0004a788 	.word	0x0004a788
   292d4:	0004fea0 	.word	0x0004fea0
   292d8:	00050077 	.word	0x00050077
   292dc:	20023e78 	.word	0x20023e78

000292e0 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   292e0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   292e2:	2304      	movs	r3, #4
{
   292e4:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   292e6:	f04f 0000 	mov.w	r0, #0
{
   292ea:	460d      	mov	r5, r1
   292ec:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   292ee:	f363 0002 	bfi	r0, r3, #0, #3
   292f2:	4a10      	ldr	r2, [pc, #64]	; (29334 <nct_dc_endpoint_get+0x54>)
   292f4:	4b10      	ldr	r3, [pc, #64]	; (29338 <nct_dc_endpoint_get+0x58>)
   292f6:	f36f 00c5 	bfc	r0, #3, #3
   292fa:	1a9b      	subs	r3, r3, r2
   292fc:	08db      	lsrs	r3, r3, #3
   292fe:	f363 108f 	bfi	r0, r3, #6, #10
   29302:	4a0e      	ldr	r2, [pc, #56]	; (2933c <nct_dc_endpoint_get+0x5c>)
   29304:	490e      	ldr	r1, [pc, #56]	; (29340 <nct_dc_endpoint_get+0x60>)
   29306:	f01e fafd 	bl	47904 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2930a:	4b0e      	ldr	r3, [pc, #56]	; (29344 <nct_dc_endpoint_get+0x64>)
   2930c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   29310:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   29312:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   29316:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   29318:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   2931c:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2931e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   29322:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   29324:	b12c      	cbz	r4, 29332 <nct_dc_endpoint_get+0x52>
		m_endp->ptr = nct.dc_m_endp.utf8;
   29326:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
		m_endp->len = nct.dc_m_endp.size;
   2932a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		m_endp->ptr = nct.dc_m_endp.utf8;
   2932e:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   29330:	6023      	str	r3, [r4, #0]
	}
}
   29332:	bd70      	pop	{r4, r5, r6, pc}
   29334:	0004a688 	.word	0x0004a688
   29338:	0004a788 	.word	0x0004a788
   2933c:	0004feb4 	.word	0x0004feb4
   29340:	0005005f 	.word	0x0005005f
   29344:	20023e78 	.word	0x20023e78

00029348 <nct_dc_connect>:

int nct_dc_connect(void)
{
   29348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   2934a:	2304      	movs	r3, #4
   2934c:	f04f 0000 	mov.w	r0, #0
   29350:	4a11      	ldr	r2, [pc, #68]	; (29398 <nct_dc_connect+0x50>)
   29352:	f363 0002 	bfi	r0, r3, #0, #3
   29356:	4b11      	ldr	r3, [pc, #68]	; (2939c <nct_dc_connect+0x54>)
   29358:	f36f 00c5 	bfc	r0, #3, #3
   2935c:	1a9b      	subs	r3, r3, r2
   2935e:	08db      	lsrs	r3, r3, #3
   29360:	f363 108f 	bfi	r0, r3, #6, #10
   29364:	4a0e      	ldr	r2, [pc, #56]	; (293a0 <nct_dc_connect+0x58>)
   29366:	490f      	ldr	r1, [pc, #60]	; (293a4 <nct_dc_connect+0x5c>)
   29368:	f01e facc 	bl	47904 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2936c:	480e      	ldr	r0, [pc, #56]	; (293a8 <nct_dc_connect+0x60>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2936e:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   29370:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
	return mqtt_subscribe(&nct.client, &subscription_list);
   29374:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   29376:	9303      	str	r3, [sp, #12]
   29378:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2937c:	9304      	str	r3, [sp, #16]
   2937e:	2301      	movs	r3, #1
   29380:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   29384:	ab03      	add	r3, sp, #12
   29386:	9301      	str	r3, [sp, #4]
   29388:	4b08      	ldr	r3, [pc, #32]	; (293ac <nct_dc_connect+0x64>)
   2938a:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2938c:	f01f f8e3 	bl	48556 <mqtt_subscribe>
}
   29390:	b007      	add	sp, #28
   29392:	f85d fb04 	ldr.w	pc, [sp], #4
   29396:	bf00      	nop
   29398:	0004a688 	.word	0x0004a688
   2939c:	0004a788 	.word	0x0004a788
   293a0:	0004fec8 	.word	0x0004fec8
   293a4:	00050036 	.word	0x00050036
   293a8:	20023e78 	.word	0x20023e78
   293ac:	223d0001 	.word	0x223d0001

000293b0 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   293b0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   293b2:	2304      	movs	r3, #4
   293b4:	f04f 0000 	mov.w	r0, #0
   293b8:	4a0d      	ldr	r2, [pc, #52]	; (293f0 <nct_dc_disconnect+0x40>)
   293ba:	f363 0002 	bfi	r0, r3, #0, #3
   293be:	4b0d      	ldr	r3, [pc, #52]	; (293f4 <nct_dc_disconnect+0x44>)
   293c0:	f36f 00c5 	bfc	r0, #3, #3
   293c4:	1a9b      	subs	r3, r3, r2
   293c6:	08db      	lsrs	r3, r3, #3
   293c8:	f363 108f 	bfi	r0, r3, #6, #10
   293cc:	4a0a      	ldr	r2, [pc, #40]	; (293f8 <nct_dc_disconnect+0x48>)
   293ce:	490b      	ldr	r1, [pc, #44]	; (293fc <nct_dc_disconnect+0x4c>)
   293d0:	f01e fa98 	bl	47904 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   293d4:	480a      	ldr	r0, [pc, #40]	; (29400 <nct_dc_disconnect+0x50>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   293d6:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   293d8:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   293dc:	9300      	str	r3, [sp, #0]
   293de:	4b09      	ldr	r3, [pc, #36]	; (29404 <nct_dc_disconnect+0x54>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   293e0:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   293e2:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   293e4:	f01f f8de 	bl	485a4 <mqtt_unsubscribe>
}
   293e8:	b003      	add	sp, #12
   293ea:	f85d fb04 	ldr.w	pc, [sp], #4
   293ee:	bf00      	nop
   293f0:	0004a688 	.word	0x0004a688
   293f4:	0004a788 	.word	0x0004a788
   293f8:	0004fed7 	.word	0x0004fed7
   293fc:	00050049 	.word	0x00050049
   29400:	20023e78 	.word	0x20023e78
   29404:	223d0001 	.word	0x223d0001

00029408 <nct_disconnect>:

int nct_disconnect(void)
{
   29408:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   2940a:	f04f 0000 	mov.w	r0, #0
   2940e:	2304      	movs	r3, #4
   29410:	4a0a      	ldr	r2, [pc, #40]	; (2943c <nct_disconnect+0x34>)
   29412:	f363 0002 	bfi	r0, r3, #0, #3
   29416:	4b0a      	ldr	r3, [pc, #40]	; (29440 <nct_disconnect+0x38>)
   29418:	f36f 00c5 	bfc	r0, #3, #3
   2941c:	1a9b      	subs	r3, r3, r2
   2941e:	08db      	lsrs	r3, r3, #3
   29420:	f363 108f 	bfi	r0, r3, #6, #10
   29424:	4a07      	ldr	r2, [pc, #28]	; (29444 <nct_disconnect+0x3c>)
   29426:	4908      	ldr	r1, [pc, #32]	; (29448 <nct_disconnect+0x40>)
   29428:	f01e fa6c 	bl	47904 <log_string_sync>

	dc_endpoint_free();
   2942c:	f7ff fa3a 	bl	288a4 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   29430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   29434:	4805      	ldr	r0, [pc, #20]	; (2944c <nct_disconnect+0x44>)
   29436:	f01f b867 	b.w	48508 <mqtt_disconnect>
   2943a:	bf00      	nop
   2943c:	0004a688 	.word	0x0004a688
   29440:	0004a788 	.word	0x0004a788
   29444:	0004fee9 	.word	0x0004fee9
   29448:	0005008f 	.word	0x0005008f
   2944c:	20023e90 	.word	0x20023e90

00029450 <nct_process>:

void nct_process(void)
{
   29450:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   29452:	4c04      	ldr	r4, [pc, #16]	; (29464 <nct_process+0x14>)
   29454:	4620      	mov	r0, r4
   29456:	f01f f918 	bl	4868a <mqtt_input>
	mqtt_live(&nct.client);
   2945a:	4620      	mov	r0, r4
}
   2945c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   29460:	f01f b8eb 	b.w	4863a <mqtt_live>
   29464:	20023e90 	.word	0x20023e90

00029468 <nct_socket_get>:

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   29468:	4b01      	ldr	r3, [pc, #4]	; (29470 <nct_socket_get+0x8>)
   2946a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2946c:	4770      	bx	lr
   2946e:	bf00      	nop
   29470:	20023e78 	.word	0x20023e78

00029474 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   29474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   29476:	f241 0304 	movw	r3, #4100	; 0x1004
   2947a:	58c3      	ldr	r3, [r0, r3]
{
   2947c:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   2947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   29482:	d90e      	bls.n	294a2 <fragment_evt_send+0x2e>
   29484:	4919      	ldr	r1, [pc, #100]	; (294ec <fragment_evt_send+0x78>)
   29486:	f44f 73b1 	mov.w	r3, #354	; 0x162
   2948a:	4a19      	ldr	r2, [pc, #100]	; (294f0 <fragment_evt_send+0x7c>)
   2948c:	4819      	ldr	r0, [pc, #100]	; (294f4 <fragment_evt_send+0x80>)
   2948e:	f01e fa1c 	bl	478ca <printk>
   29492:	4819      	ldr	r0, [pc, #100]	; (294f8 <fragment_evt_send+0x84>)
   29494:	f01e fa19 	bl	478ca <printk>
   29498:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2949c:	4814      	ldr	r0, [pc, #80]	; (294f0 <fragment_evt_send+0x7c>)
   2949e:	f01e fa21 	bl	478e4 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   294a2:	f241 0304 	movw	r3, #4100	; 0x1004
   294a6:	58e3      	ldr	r3, [r4, r3]
   294a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   294ac:	d90e      	bls.n	294cc <fragment_evt_send+0x58>
   294ae:	490f      	ldr	r1, [pc, #60]	; (294ec <fragment_evt_send+0x78>)
   294b0:	f240 1365 	movw	r3, #357	; 0x165
   294b4:	4a0e      	ldr	r2, [pc, #56]	; (294f0 <fragment_evt_send+0x7c>)
   294b6:	480f      	ldr	r0, [pc, #60]	; (294f4 <fragment_evt_send+0x80>)
   294b8:	f01e fa07 	bl	478ca <printk>
   294bc:	480f      	ldr	r0, [pc, #60]	; (294fc <fragment_evt_send+0x88>)
   294be:	f01e fa04 	bl	478ca <printk>
   294c2:	f240 1165 	movw	r1, #357	; 0x165
   294c6:	480a      	ldr	r0, [pc, #40]	; (294f0 <fragment_evt_send+0x7c>)
   294c8:	f01e fa0c 	bl	478e4 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   294cc:	2300      	movs	r3, #0
   294ce:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   294d2:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   294d4:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   294d6:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   294da:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   294dc:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   294de:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   294e0:	f242 03d8 	movw	r3, #8408	; 0x20d8
   294e4:	58e3      	ldr	r3, [r4, r3]
   294e6:	4798      	blx	r3
}
   294e8:	b004      	add	sp, #16
   294ea:	bd10      	pop	{r4, pc}
   294ec:	00050721 	.word	0x00050721
   294f0:	000506db 	.word	0x000506db
   294f4:	0004ccf0 	.word	0x0004ccf0
   294f8:	00050738 	.word	0x00050738
   294fc:	0005074d 	.word	0x0005074d

00029500 <setsockopt>:
{
   29500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   29504:	4c15      	ldr	r4, [pc, #84]	; (2955c <setsockopt+0x5c>)
{
   29506:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   29508:	6823      	ldr	r3, [r4, #0]
{
   2950a:	4605      	mov	r5, r0
   2950c:	460e      	mov	r6, r1
   2950e:	4617      	mov	r7, r2
   29510:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   29514:	b94b      	cbnz	r3, 2952a <setsockopt+0x2a>
   29516:	4912      	ldr	r1, [pc, #72]	; (29560 <setsockopt+0x60>)
   29518:	4812      	ldr	r0, [pc, #72]	; (29564 <setsockopt+0x64>)
   2951a:	2357      	movs	r3, #87	; 0x57
   2951c:	4a12      	ldr	r2, [pc, #72]	; (29568 <setsockopt+0x68>)
   2951e:	f01e f9d4 	bl	478ca <printk>
   29522:	2157      	movs	r1, #87	; 0x57
   29524:	4810      	ldr	r0, [pc, #64]	; (29568 <setsockopt+0x68>)
   29526:	f01e f9dd 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2952a:	6823      	ldr	r3, [r4, #0]
   2952c:	69db      	ldr	r3, [r3, #28]
   2952e:	b94b      	cbnz	r3, 29544 <setsockopt+0x44>
   29530:	490e      	ldr	r1, [pc, #56]	; (2956c <setsockopt+0x6c>)
   29532:	480c      	ldr	r0, [pc, #48]	; (29564 <setsockopt+0x64>)
   29534:	2358      	movs	r3, #88	; 0x58
   29536:	4a0c      	ldr	r2, [pc, #48]	; (29568 <setsockopt+0x68>)
   29538:	f01e f9c7 	bl	478ca <printk>
   2953c:	2158      	movs	r1, #88	; 0x58
   2953e:	480a      	ldr	r0, [pc, #40]	; (29568 <setsockopt+0x68>)
   29540:	f01e f9d0 	bl	478e4 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   29544:	6823      	ldr	r3, [r4, #0]
   29546:	f8cd 9020 	str.w	r9, [sp, #32]
   2954a:	69dc      	ldr	r4, [r3, #28]
   2954c:	463a      	mov	r2, r7
   2954e:	4643      	mov	r3, r8
   29550:	4631      	mov	r1, r6
   29552:	4628      	mov	r0, r5
   29554:	46a4      	mov	ip, r4
}
   29556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2955a:	4760      	bx	ip
   2955c:	20023bf8 	.word	0x20023bf8
   29560:	0004ce24 	.word	0x0004ce24
   29564:	0004ccf0 	.word	0x0004ccf0
   29568:	0004cdf3 	.word	0x0004cdf3
   2956c:	0004eb14 	.word	0x0004eb14

00029570 <close>:
{
   29570:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   29572:	4c10      	ldr	r4, [pc, #64]	; (295b4 <close+0x44>)
{
   29574:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   29576:	6823      	ldr	r3, [r4, #0]
   29578:	b94b      	cbnz	r3, 2958e <close+0x1e>
   2957a:	490f      	ldr	r1, [pc, #60]	; (295b8 <close+0x48>)
   2957c:	480f      	ldr	r0, [pc, #60]	; (295bc <close+0x4c>)
   2957e:	2321      	movs	r3, #33	; 0x21
   29580:	4a0f      	ldr	r2, [pc, #60]	; (295c0 <close+0x50>)
   29582:	f01e f9a2 	bl	478ca <printk>
   29586:	2121      	movs	r1, #33	; 0x21
   29588:	480d      	ldr	r0, [pc, #52]	; (295c0 <close+0x50>)
   2958a:	f01e f9ab 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2958e:	6823      	ldr	r3, [r4, #0]
   29590:	685b      	ldr	r3, [r3, #4]
   29592:	b94b      	cbnz	r3, 295a8 <close+0x38>
   29594:	490b      	ldr	r1, [pc, #44]	; (295c4 <close+0x54>)
   29596:	4809      	ldr	r0, [pc, #36]	; (295bc <close+0x4c>)
   29598:	2322      	movs	r3, #34	; 0x22
   2959a:	4a09      	ldr	r2, [pc, #36]	; (295c0 <close+0x50>)
   2959c:	f01e f995 	bl	478ca <printk>
   295a0:	2122      	movs	r1, #34	; 0x22
   295a2:	4807      	ldr	r0, [pc, #28]	; (295c0 <close+0x50>)
   295a4:	f01e f99e 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   295a8:	6823      	ldr	r3, [r4, #0]
   295aa:	4628      	mov	r0, r5
}
   295ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   295b0:	685b      	ldr	r3, [r3, #4]
   295b2:	4718      	bx	r3
   295b4:	20023bf8 	.word	0x20023bf8
   295b8:	0004ce24 	.word	0x0004ce24
   295bc:	0004ccf0 	.word	0x0004ccf0
   295c0:	0004cdf3 	.word	0x0004cdf3
   295c4:	0004e833 	.word	0x0004e833

000295c8 <get_request_send>:
{
   295c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   295cc:	4605      	mov	r5, r0
{
   295ce:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   295d0:	b948      	cbnz	r0, 295e6 <get_request_send+0x1e>
   295d2:	4956      	ldr	r1, [pc, #344]	; (2972c <get_request_send+0x164>)
   295d4:	4856      	ldr	r0, [pc, #344]	; (29730 <get_request_send+0x168>)
   295d6:	23f2      	movs	r3, #242	; 0xf2
   295d8:	4a56      	ldr	r2, [pc, #344]	; (29734 <get_request_send+0x16c>)
   295da:	f01e f976 	bl	478ca <printk>
   295de:	21f2      	movs	r1, #242	; 0xf2
   295e0:	4854      	ldr	r0, [pc, #336]	; (29734 <get_request_send+0x16c>)
   295e2:	f01e f97f 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   295e6:	f241 0314 	movw	r3, #4116	; 0x1014
   295ea:	58eb      	ldr	r3, [r5, r3]
   295ec:	b94b      	cbnz	r3, 29602 <get_request_send+0x3a>
   295ee:	4952      	ldr	r1, [pc, #328]	; (29738 <get_request_send+0x170>)
   295f0:	484f      	ldr	r0, [pc, #316]	; (29730 <get_request_send+0x168>)
   295f2:	23f3      	movs	r3, #243	; 0xf3
   295f4:	4a4f      	ldr	r2, [pc, #316]	; (29734 <get_request_send+0x16c>)
   295f6:	f01e f968 	bl	478ca <printk>
   295fa:	21f3      	movs	r1, #243	; 0xf3
   295fc:	484d      	ldr	r0, [pc, #308]	; (29734 <get_request_send+0x16c>)
   295fe:	f01e f971 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   29602:	f241 0318 	movw	r3, #4120	; 0x1018
   29606:	58eb      	ldr	r3, [r5, r3]
   29608:	b94b      	cbnz	r3, 2961e <get_request_send+0x56>
   2960a:	494c      	ldr	r1, [pc, #304]	; (2973c <get_request_send+0x174>)
   2960c:	4848      	ldr	r0, [pc, #288]	; (29730 <get_request_send+0x168>)
   2960e:	23f4      	movs	r3, #244	; 0xf4
   29610:	4a48      	ldr	r2, [pc, #288]	; (29734 <get_request_send+0x16c>)
   29612:	f01e f95a 	bl	478ca <printk>
   29616:	21f4      	movs	r1, #244	; 0xf4
   29618:	4846      	ldr	r0, [pc, #280]	; (29734 <get_request_send+0x16c>)
   2961a:	f01e f963 	bl	478e4 <assert_post_action>
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   2961e:	f241 030c 	movw	r3, #4108	; 0x100c
	if (client->file_size != 0) {
   29622:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   29626:	58ea      	ldr	r2, [r5, r3]
	if (client->file_size != 0) {
   29628:	5869      	ldr	r1, [r5, r1]
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   2962a:	f602 73ff 	addw	r3, r2, #4095	; 0xfff
	if (client->file_size != 0) {
   2962e:	b111      	cbz	r1, 29636 <get_request_send+0x6e>
		off = MIN(off, client->file_size);
   29630:	428b      	cmp	r3, r1
   29632:	bf28      	it	cs
   29634:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   29636:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2963a:	f241 0314 	movw	r3, #4116	; 0x1014
   2963e:	58eb      	ldr	r3, [r5, r3]
   29640:	f105 0904 	add.w	r9, r5, #4
   29644:	9300      	str	r3, [sp, #0]
   29646:	f241 0318 	movw	r3, #4120	; 0x1018
   2964a:	4a3d      	ldr	r2, [pc, #244]	; (29740 <get_request_send+0x178>)
   2964c:	58eb      	ldr	r3, [r5, r3]
   2964e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   29652:	4648      	mov	r0, r9
   29654:	f017 ff16 	bl	41484 <snprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   29658:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2965c:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2965e:	d947      	bls.n	296f0 <get_request_send+0x128>
		LOG_ERR("Cannot create GET request, buffer too small");
   29660:	2301      	movs	r3, #1
   29662:	f04f 0000 	mov.w	r0, #0
   29666:	4a37      	ldr	r2, [pc, #220]	; (29744 <get_request_send+0x17c>)
   29668:	f363 0002 	bfi	r0, r3, #0, #3
   2966c:	4b36      	ldr	r3, [pc, #216]	; (29748 <get_request_send+0x180>)
   2966e:	f36f 00c5 	bfc	r0, #3, #3
   29672:	1a9b      	subs	r3, r3, r2
   29674:	08db      	lsrs	r3, r3, #3
   29676:	f363 108f 	bfi	r0, r3, #6, #10
   2967a:	4934      	ldr	r1, [pc, #208]	; (2974c <get_request_send+0x184>)
   2967c:	f01e f942 	bl	47904 <log_string_sync>
		return -ENOMEM;
   29680:	f06f 000b 	mvn.w	r0, #11
}
   29684:	b007      	add	sp, #28
   29686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2968a:	9b05      	ldr	r3, [sp, #20]
   2968c:	f8d5 a000 	ldr.w	sl, [r5]
   29690:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   29694:	f8d8 3000 	ldr.w	r3, [r8]
   29698:	b94b      	cbnz	r3, 296ae <get_request_send+0xe6>
   2969a:	492d      	ldr	r1, [pc, #180]	; (29750 <get_request_send+0x188>)
   2969c:	4824      	ldr	r0, [pc, #144]	; (29730 <get_request_send+0x168>)
   2969e:	237e      	movs	r3, #126	; 0x7e
   296a0:	4632      	mov	r2, r6
   296a2:	f01e f912 	bl	478ca <printk>
   296a6:	217e      	movs	r1, #126	; 0x7e
   296a8:	4630      	mov	r0, r6
   296aa:	f01e f91b 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   296ae:	f8d8 3000 	ldr.w	r3, [r8]
   296b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   296b4:	b94b      	cbnz	r3, 296ca <get_request_send+0x102>
   296b6:	4927      	ldr	r1, [pc, #156]	; (29754 <get_request_send+0x18c>)
   296b8:	481d      	ldr	r0, [pc, #116]	; (29730 <get_request_send+0x168>)
   296ba:	237f      	movs	r3, #127	; 0x7f
   296bc:	4632      	mov	r2, r6
   296be:	f01e f904 	bl	478ca <printk>
   296c2:	217f      	movs	r1, #127	; 0x7f
   296c4:	4630      	mov	r0, r6
   296c6:	f01e f90d 	bl	478e4 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   296ca:	f8d8 3000 	ldr.w	r3, [r8]
   296ce:	4622      	mov	r2, r4
   296d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   296d2:	4659      	mov	r1, fp
   296d4:	461f      	mov	r7, r3
   296d6:	4650      	mov	r0, sl
   296d8:	2300      	movs	r3, #0
   296da:	47b8      	blx	r7
		if (sent <= 0) {
   296dc:	2800      	cmp	r0, #0
   296de:	dd0d      	ble.n	296fc <get_request_send+0x134>
		off += sent;
   296e0:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   296e2:	1a24      	subs	r4, r4, r0
		off += sent;
   296e4:	4403      	add	r3, r0
   296e6:	9305      	str	r3, [sp, #20]
	while (len) {
   296e8:	2c00      	cmp	r4, #0
   296ea:	d1ce      	bne.n	2968a <get_request_send+0xc2>
	return 0;
   296ec:	4620      	mov	r0, r4
   296ee:	e7c9      	b.n	29684 <get_request_send+0xbc>
	size_t off = 0;
   296f0:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   296f2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 29760 <get_request_send+0x198>
   296f6:	9305      	str	r3, [sp, #20]
   296f8:	4e17      	ldr	r6, [pc, #92]	; (29758 <get_request_send+0x190>)
   296fa:	e7f5      	b.n	296e8 <get_request_send+0x120>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   296fc:	2301      	movs	r3, #1
   296fe:	f04f 0400 	mov.w	r4, #0
   29702:	4a10      	ldr	r2, [pc, #64]	; (29744 <get_request_send+0x17c>)
   29704:	f363 0402 	bfi	r4, r3, #0, #3
   29708:	4b0f      	ldr	r3, [pc, #60]	; (29748 <get_request_send+0x180>)
   2970a:	f36f 04c5 	bfc	r4, #3, #3
   2970e:	1a9b      	subs	r3, r3, r2
   29710:	08db      	lsrs	r3, r3, #3
   29712:	f363 148f 	bfi	r4, r3, #6, #10
   29716:	f01e faff 	bl	47d18 <__errno>
   2971a:	4910      	ldr	r1, [pc, #64]	; (2975c <get_request_send+0x194>)
   2971c:	6802      	ldr	r2, [r0, #0]
   2971e:	4620      	mov	r0, r4
   29720:	f01e f8f0 	bl	47904 <log_string_sync>
			return -EIO;
   29724:	f06f 0004 	mvn.w	r0, #4
		return err;
   29728:	e7ac      	b.n	29684 <get_request_send+0xbc>
   2972a:	bf00      	nop
   2972c:	0005082f 	.word	0x0005082f
   29730:	0004ccf0 	.word	0x0004ccf0
   29734:	000506db 	.word	0x000506db
   29738:	00050760 	.word	0x00050760
   2973c:	0005076d 	.word	0x0005076d
   29740:	0005077a 	.word	0x0005077a
   29744:	0004a688 	.word	0x0004a688
   29748:	0004a708 	.word	0x0004a708
   2974c:	000507c5 	.word	0x000507c5
   29750:	0004ce24 	.word	0x0004ce24
   29754:	0004e9c1 	.word	0x0004e9c1
   29758:	0004cdf3 	.word	0x0004cdf3
   2975c:	000507f1 	.word	0x000507f1
   29760:	20023bf8 	.word	0x20023bf8

00029764 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   29764:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   29766:	4605      	mov	r5, r0
{
   29768:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   2976a:	b1f8      	cbz	r0, 297ac <download_client_init+0x48>
   2976c:	b1f1      	cbz	r1, 297ac <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   2976e:	f04f 33ff 	mov.w	r3, #4294967295
   29772:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   29774:	f242 03d8 	movw	r3, #8408	; 0x20d8
   29778:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2977a:	2400      	movs	r4, #0
   2977c:	230e      	movs	r3, #14
   2977e:	e9cd 0400 	strd	r0, r4, [sp]
   29782:	f500 5186 	add.w	r1, r0, #4288	; 0x10c0
   29786:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   2978a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2978e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   29792:	4b08      	ldr	r3, [pc, #32]	; (297b4 <download_client_init+0x50>)
   29794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   29798:	3118      	adds	r1, #24
   2979a:	3008      	adds	r0, #8
   2979c:	f015 fce2 	bl	3f164 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   297a0:	f241 0324 	movw	r3, #4132	; 0x1024
   297a4:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   297a6:	4620      	mov	r0, r4
}
   297a8:	b007      	add	sp, #28
   297aa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   297ac:	f06f 0015 	mvn.w	r0, #21
   297b0:	e7fa      	b.n	297a8 <download_client_init+0x44>
   297b2:	bf00      	nop
   297b4:	00029bed 	.word	0x00029bed

000297b8 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   297b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297bc:	b0a1      	sub	sp, #132	; 0x84
   297be:	9104      	str	r1, [sp, #16]
   297c0:	4690      	mov	r8, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   297c2:	4606      	mov	r6, r0
   297c4:	b928      	cbnz	r0, 297d2 <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   297c6:	f06f 0715 	mvn.w	r7, #21
	if (err) {
		return err;
	}

	return 0;
}
   297ca:	4638      	mov	r0, r7
   297cc:	b021      	add	sp, #132	; 0x84
   297ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   297d2:	9b04      	ldr	r3, [sp, #16]
   297d4:	2b00      	cmp	r3, #0
   297d6:	d0f6      	beq.n	297c6 <download_client_connect+0xe>
   297d8:	2a00      	cmp	r2, #0
   297da:	d0f4      	beq.n	297c6 <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   297dc:	6813      	ldr	r3, [r2, #0]
   297de:	3301      	adds	r3, #1
   297e0:	d1f1      	bne.n	297c6 <download_client_connect+0xe>
	if (client->fd != -1) {
   297e2:	6807      	ldr	r7, [r0, #0]
   297e4:	1c7b      	adds	r3, r7, #1
   297e6:	f040 81a5 	bne.w	29b34 <download_client_connect+0x37c>
	struct addrinfo hints = {
   297ea:	2220      	movs	r2, #32
   297ec:	2100      	movs	r1, #0
   297ee:	eb0d 0002 	add.w	r0, sp, r2
   297f2:	f017 fc21 	bl	41038 <memset>
   297f6:	2301      	movs	r3, #1
   297f8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   297fc:	2306      	movs	r3, #6
	__ASSERT_NO_MSG(socket_ops);
   297fe:	4ca8      	ldr	r4, [pc, #672]	; (29aa0 <download_client_connect+0x2e8>)
   29800:	930b      	str	r3, [sp, #44]	; 0x2c
   29802:	f8d8 3004 	ldr.w	r3, [r8, #4]
   29806:	930e      	str	r3, [sp, #56]	; 0x38
   29808:	6823      	ldr	r3, [r4, #0]
   2980a:	b94b      	cbnz	r3, 29820 <download_client_connect+0x68>
   2980c:	49a5      	ldr	r1, [pc, #660]	; (29aa4 <download_client_connect+0x2ec>)
   2980e:	48a6      	ldr	r0, [pc, #664]	; (29aa8 <download_client_connect+0x2f0>)
   29810:	2393      	movs	r3, #147	; 0x93
   29812:	4aa6      	ldr	r2, [pc, #664]	; (29aac <download_client_connect+0x2f4>)
   29814:	f01e f859 	bl	478ca <printk>
   29818:	2193      	movs	r1, #147	; 0x93
   2981a:	48a4      	ldr	r0, [pc, #656]	; (29aac <download_client_connect+0x2f4>)
   2981c:	f01e f862 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   29820:	6823      	ldr	r3, [r4, #0]
   29822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   29824:	b94b      	cbnz	r3, 2983a <download_client_connect+0x82>
   29826:	49a2      	ldr	r1, [pc, #648]	; (29ab0 <download_client_connect+0x2f8>)
   29828:	489f      	ldr	r0, [pc, #636]	; (29aa8 <download_client_connect+0x2f0>)
   2982a:	2394      	movs	r3, #148	; 0x94
   2982c:	4a9f      	ldr	r2, [pc, #636]	; (29aac <download_client_connect+0x2f4>)
   2982e:	f01e f84c 	bl	478ca <printk>
   29832:	2194      	movs	r1, #148	; 0x94
   29834:	489d      	ldr	r0, [pc, #628]	; (29aac <download_client_connect+0x2f4>)
   29836:	f01e f855 	bl	478e4 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   2983a:	6823      	ldr	r3, [r4, #0]
   2983c:	aa08      	add	r2, sp, #32
   2983e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   29840:	2100      	movs	r1, #0
   29842:	ab07      	add	r3, sp, #28
   29844:	9804      	ldr	r0, [sp, #16]
   29846:	47a8      	blx	r5
   29848:	4d9a      	ldr	r5, [pc, #616]	; (29ab4 <download_client_connect+0x2fc>)
   2984a:	4b9b      	ldr	r3, [pc, #620]	; (29ab8 <download_client_connect+0x300>)
   2984c:	1aed      	subs	r5, r5, r3
   2984e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (err) {
   29852:	b1a8      	cbz	r0, 29880 <download_client_connect+0xc8>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   29854:	2302      	movs	r3, #2
   29856:	f04f 0400 	mov.w	r4, #0
   2985a:	9804      	ldr	r0, [sp, #16]
   2985c:	f363 0402 	bfi	r4, r3, #0, #3
   29860:	f01e f862 	bl	47928 <log_strdup>
   29864:	f36f 04c5 	bfc	r4, #3, #3
   29868:	f365 148f 	bfi	r4, r5, #6, #10
   2986c:	4602      	mov	r2, r0
   2986e:	4b93      	ldr	r3, [pc, #588]	; (29abc <download_client_connect+0x304>)
   29870:	4993      	ldr	r1, [pc, #588]	; (29ac0 <download_client_connect+0x308>)
   29872:	4620      	mov	r0, r4
   29874:	f01e f846 	bl	47904 <log_string_sync>
		client->fd =
   29878:	f04f 33ff 	mov.w	r3, #4294967295
   2987c:	6033      	str	r3, [r6, #0]
   2987e:	e7a2      	b.n	297c6 <download_client_connect+0xe>
	LOG_INF("Attempting to connect over %s",
   29880:	2303      	movs	r3, #3
   29882:	f04f 0a00 	mov.w	sl, #0
   29886:	f363 0a02 	bfi	sl, r3, #0, #3
   2988a:	f360 0ac5 	bfi	sl, r0, #3, #3
   2988e:	488b      	ldr	r0, [pc, #556]	; (29abc <download_client_connect+0x304>)
   29890:	f01e f84a 	bl	47928 <log_strdup>
   29894:	f365 1a8f 	bfi	sl, r5, #6, #10
   29898:	4602      	mov	r2, r0
   2989a:	498a      	ldr	r1, [pc, #552]	; (29ac4 <download_client_connect+0x30c>)
   2989c:	4650      	mov	r0, sl
   2989e:	f01e f831 	bl	47904 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   298a2:	6823      	ldr	r3, [r4, #0]
   298a4:	b94b      	cbnz	r3, 298ba <download_client_connect+0x102>
   298a6:	497f      	ldr	r1, [pc, #508]	; (29aa4 <download_client_connect+0x2ec>)
   298a8:	487f      	ldr	r0, [pc, #508]	; (29aa8 <download_client_connect+0x2f0>)
   298aa:	2319      	movs	r3, #25
   298ac:	4a7f      	ldr	r2, [pc, #508]	; (29aac <download_client_connect+0x2f4>)
   298ae:	f01e f80c 	bl	478ca <printk>
   298b2:	2119      	movs	r1, #25
   298b4:	487d      	ldr	r0, [pc, #500]	; (29aac <download_client_connect+0x2f4>)
   298b6:	f01e f815 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   298ba:	6823      	ldr	r3, [r4, #0]
   298bc:	681b      	ldr	r3, [r3, #0]
   298be:	b94b      	cbnz	r3, 298d4 <download_client_connect+0x11c>
   298c0:	4981      	ldr	r1, [pc, #516]	; (29ac8 <download_client_connect+0x310>)
   298c2:	4879      	ldr	r0, [pc, #484]	; (29aa8 <download_client_connect+0x2f0>)
   298c4:	231a      	movs	r3, #26
   298c6:	4a79      	ldr	r2, [pc, #484]	; (29aac <download_client_connect+0x2f4>)
   298c8:	f01d ffff 	bl	478ca <printk>
   298cc:	211a      	movs	r1, #26
   298ce:	4877      	ldr	r0, [pc, #476]	; (29aac <download_client_connect+0x2f4>)
   298d0:	f01e f808 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   298d4:	2101      	movs	r1, #1
   298d6:	6823      	ldr	r3, [r4, #0]
   298d8:	2206      	movs	r2, #6
   298da:	681b      	ldr	r3, [r3, #0]
   298dc:	4608      	mov	r0, r1
   298de:	4798      	blx	r3
	if (fd < 0) {
   298e0:	1e03      	subs	r3, r0, #0
   298e2:	9303      	str	r3, [sp, #12]
   298e4:	da36      	bge.n	29954 <download_client_connect+0x19c>
		LOG_ERR("Failed to create socket, errno %d", errno);
   298e6:	2301      	movs	r3, #1
   298e8:	f04f 0700 	mov.w	r7, #0
   298ec:	f363 0702 	bfi	r7, r3, #0, #3
   298f0:	f01e fa12 	bl	47d18 <__errno>
   298f4:	f36f 07c5 	bfc	r7, #3, #3
   298f8:	f365 178f 	bfi	r7, r5, #6, #10
   298fc:	6802      	ldr	r2, [r0, #0]
   298fe:	4973      	ldr	r1, [pc, #460]	; (29acc <download_client_connect+0x314>)
   29900:	4638      	mov	r0, r7
   29902:	f01d ffff 	bl	47904 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   29906:	2700      	movs	r7, #0
	__ASSERT_NO_MSG(socket_ops);
   29908:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(info);
   2990a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2990e:	b94b      	cbnz	r3, 29924 <download_client_connect+0x16c>
   29910:	4964      	ldr	r1, [pc, #400]	; (29aa4 <download_client_connect+0x2ec>)
   29912:	4865      	ldr	r0, [pc, #404]	; (29aa8 <download_client_connect+0x2f0>)
   29914:	239b      	movs	r3, #155	; 0x9b
   29916:	4a65      	ldr	r2, [pc, #404]	; (29aac <download_client_connect+0x2f4>)
   29918:	f01d ffd7 	bl	478ca <printk>
   2991c:	219b      	movs	r1, #155	; 0x9b
   2991e:	4863      	ldr	r0, [pc, #396]	; (29aac <download_client_connect+0x2f4>)
   29920:	f01d ffe0 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   29924:	6823      	ldr	r3, [r4, #0]
   29926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   29928:	b94b      	cbnz	r3, 2993e <download_client_connect+0x186>
   2992a:	4969      	ldr	r1, [pc, #420]	; (29ad0 <download_client_connect+0x318>)
   2992c:	485e      	ldr	r0, [pc, #376]	; (29aa8 <download_client_connect+0x2f0>)
   2992e:	239c      	movs	r3, #156	; 0x9c
   29930:	4a5e      	ldr	r2, [pc, #376]	; (29aac <download_client_connect+0x2f4>)
   29932:	f01d ffca 	bl	478ca <printk>
   29936:	219c      	movs	r1, #156	; 0x9c
   29938:	485c      	ldr	r0, [pc, #368]	; (29aac <download_client_connect+0x2f4>)
   2993a:	f01d ffd3 	bl	478e4 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   2993e:	6823      	ldr	r3, [r4, #0]
   29940:	4648      	mov	r0, r9
   29942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   29944:	4798      	blx	r3
	if (err) {
   29946:	2f00      	cmp	r7, #0
   29948:	f000 80d2 	beq.w	29af0 <download_client_connect+0x338>
		close(fd);
   2994c:	9803      	ldr	r0, [sp, #12]
   2994e:	f7ff fe0f 	bl	29570 <close>
   29952:	e791      	b.n	29878 <download_client_connect+0xc0>
	if (cfg->apn != NULL) {
   29954:	f8d8 0004 	ldr.w	r0, [r8, #4]
   29958:	2800      	cmp	r0, #0
   2995a:	d058      	beq.n	29a0e <download_client_connect+0x256>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   2995c:	2303      	movs	r3, #3
   2995e:	f04f 0a00 	mov.w	sl, #0
   29962:	f363 0a02 	bfi	sl, r3, #0, #3
   29966:	f01d ffdf 	bl	47928 <log_strdup>
   2996a:	f36f 0ac5 	bfc	sl, #3, #3
   2996e:	f365 1a8f 	bfi	sl, r5, #6, #10
   29972:	4602      	mov	r2, r0
   29974:	4957      	ldr	r1, [pc, #348]	; (29ad4 <download_client_connect+0x31c>)
   29976:	4650      	mov	r0, sl
   29978:	f01d ffc4 	bl	47904 <log_string_sync>
	struct ifreq ifr = {0};
   2997c:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   2997e:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct ifreq ifr = {0};
   29982:	2100      	movs	r1, #0
   29984:	eb0d 0002 	add.w	r0, sp, r2
   29988:	f017 fb56 	bl	41038 <memset>
	__ASSERT_NO_MSG(apn);
   2998c:	f1bb 0f00 	cmp.w	fp, #0
   29990:	d109      	bne.n	299a6 <download_client_connect+0x1ee>
   29992:	4951      	ldr	r1, [pc, #324]	; (29ad8 <download_client_connect+0x320>)
   29994:	4844      	ldr	r0, [pc, #272]	; (29aa8 <download_client_connect+0x2f0>)
   29996:	2362      	movs	r3, #98	; 0x62
   29998:	4a50      	ldr	r2, [pc, #320]	; (29adc <download_client_connect+0x324>)
   2999a:	f01d ff96 	bl	478ca <printk>
   2999e:	2162      	movs	r1, #98	; 0x62
   299a0:	484e      	ldr	r0, [pc, #312]	; (29adc <download_client_connect+0x324>)
   299a2:	f01d ff9f 	bl	478e4 <assert_post_action>
	len = strlen(apn);
   299a6:	4658      	mov	r0, fp
   299a8:	f017 ff3c 	bl	41824 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   299ac:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   299ae:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   299b0:	d90c      	bls.n	299cc <download_client_connect+0x214>
		LOG_ERR("Access point name is too long.");
   299b2:	2301      	movs	r3, #1
   299b4:	f04f 0000 	mov.w	r0, #0
   299b8:	f363 0002 	bfi	r0, r3, #0, #3
   299bc:	f36f 00c5 	bfc	r0, #3, #3
   299c0:	f365 108f 	bfi	r0, r5, #6, #10
   299c4:	4946      	ldr	r1, [pc, #280]	; (29ae0 <download_client_connect+0x328>)
   299c6:	f01d ff9d 	bl	47904 <log_string_sync>
   299ca:	e79d      	b.n	29908 <download_client_connect+0x150>
	memcpy(ifr.ifr_name, apn, len);
   299cc:	2340      	movs	r3, #64	; 0x40
   299ce:	4602      	mov	r2, r0
   299d0:	4659      	mov	r1, fp
   299d2:	eb0d 0003 	add.w	r0, sp, r3
   299d6:	f017 fb1b 	bl	41010 <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   299da:	f8cd a000 	str.w	sl, [sp]
   299de:	ab10      	add	r3, sp, #64	; 0x40
   299e0:	2219      	movs	r2, #25
   299e2:	2101      	movs	r1, #1
   299e4:	9803      	ldr	r0, [sp, #12]
   299e6:	f7ff fd8b 	bl	29500 <setsockopt>
	if (err) {
   299ea:	b180      	cbz	r0, 29a0e <download_client_connect+0x256>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   299ec:	2301      	movs	r3, #1
   299ee:	f04f 0900 	mov.w	r9, #0
   299f2:	f363 0902 	bfi	r9, r3, #0, #3
   299f6:	f01e f98f 	bl	47d18 <__errno>
   299fa:	f36f 09c5 	bfc	r9, #3, #3
   299fe:	f365 198f 	bfi	r9, r5, #6, #10
   29a02:	6802      	ldr	r2, [r0, #0]
   29a04:	4937      	ldr	r1, [pc, #220]	; (29ae4 <download_client_connect+0x32c>)
   29a06:	4648      	mov	r0, r9
   29a08:	f01d ff7c 	bl	47904 <log_string_sync>
   29a0c:	e77c      	b.n	29908 <download_client_connect+0x150>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   29a0e:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   29a12:	f8df b098 	ldr.w	fp, [pc, #152]	; 29aac <download_client_connect+0x2f4>
   29a16:	f1ba 0f00 	cmp.w	sl, #0
   29a1a:	f43f af75 	beq.w	29908 <download_client_connect+0x150>
		struct sockaddr * const sa = addr->ai_addr;
   29a1e:	f8da 7014 	ldr.w	r7, [sl, #20]
		switch (sa->sa_family) {
   29a22:	883b      	ldrh	r3, [r7, #0]
   29a24:	2b01      	cmp	r3, #1
   29a26:	d001      	beq.n	29a2c <download_client_connect+0x274>
   29a28:	2b02      	cmp	r3, #2
   29a2a:	d102      	bne.n	29a32 <download_client_connect+0x27a>
			((struct sockaddr_in *)sa)->sin_port = port;
   29a2c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   29a30:	807b      	strh	r3, [r7, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   29a32:	f8da 3010 	ldr.w	r3, [sl, #16]
   29a36:	9305      	str	r3, [sp, #20]
   29a38:	6823      	ldr	r3, [r4, #0]
   29a3a:	b94b      	cbnz	r3, 29a50 <download_client_connect+0x298>
   29a3c:	4919      	ldr	r1, [pc, #100]	; (29aa4 <download_client_connect+0x2ec>)
   29a3e:	481a      	ldr	r0, [pc, #104]	; (29aa8 <download_client_connect+0x2f0>)
   29a40:	2345      	movs	r3, #69	; 0x45
   29a42:	465a      	mov	r2, fp
   29a44:	f01d ff41 	bl	478ca <printk>
   29a48:	2145      	movs	r1, #69	; 0x45
   29a4a:	4658      	mov	r0, fp
   29a4c:	f01d ff4a 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   29a50:	6823      	ldr	r3, [r4, #0]
   29a52:	695b      	ldr	r3, [r3, #20]
   29a54:	b94b      	cbnz	r3, 29a6a <download_client_connect+0x2b2>
   29a56:	4924      	ldr	r1, [pc, #144]	; (29ae8 <download_client_connect+0x330>)
   29a58:	4813      	ldr	r0, [pc, #76]	; (29aa8 <download_client_connect+0x2f0>)
   29a5a:	2346      	movs	r3, #70	; 0x46
   29a5c:	465a      	mov	r2, fp
   29a5e:	f01d ff34 	bl	478ca <printk>
   29a62:	2146      	movs	r1, #70	; 0x46
   29a64:	4658      	mov	r0, fp
   29a66:	f01d ff3d 	bl	478e4 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   29a6a:	6823      	ldr	r3, [r4, #0]
   29a6c:	4639      	mov	r1, r7
   29a6e:	695b      	ldr	r3, [r3, #20]
   29a70:	9a05      	ldr	r2, [sp, #20]
   29a72:	9803      	ldr	r0, [sp, #12]
   29a74:	4798      	blx	r3
		if (err) {
   29a76:	4607      	mov	r7, r0
   29a78:	2800      	cmp	r0, #0
   29a7a:	f43f af45 	beq.w	29908 <download_client_connect+0x150>
			LOG_ERR("Unable to connect, errno %d", errno);
   29a7e:	2301      	movs	r3, #1
   29a80:	f363 0902 	bfi	r9, r3, #0, #3
   29a84:	f01e f948 	bl	47d18 <__errno>
   29a88:	f36f 09c5 	bfc	r9, #3, #3
   29a8c:	f365 198f 	bfi	r9, r5, #6, #10
   29a90:	6802      	ldr	r2, [r0, #0]
   29a92:	4916      	ldr	r1, [pc, #88]	; (29aec <download_client_connect+0x334>)
   29a94:	4648      	mov	r0, r9
   29a96:	f01d ff35 	bl	47904 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   29a9a:	f8da a01c 	ldr.w	sl, [sl, #28]
   29a9e:	e7ba      	b.n	29a16 <download_client_connect+0x25e>
   29aa0:	20023bf8 	.word	0x20023bf8
   29aa4:	0004ce24 	.word	0x0004ce24
   29aa8:	0004ccf0 	.word	0x0004ccf0
   29aac:	0004cdf3 	.word	0x0004cdf3
   29ab0:	0004ffac 	.word	0x0004ffac
   29ab4:	0004a708 	.word	0x0004a708
   29ab8:	0004a688 	.word	0x0004a688
   29abc:	0005041c 	.word	0x0005041c
   29ac0:	00050421 	.word	0x00050421
   29ac4:	00050445 	.word	0x00050445
   29ac8:	0004e845 	.word	0x0004e845
   29acc:	00050463 	.word	0x00050463
   29ad0:	0005001d 	.word	0x0005001d
   29ad4:	00050485 	.word	0x00050485
   29ad8:	00050498 	.word	0x00050498
   29adc:	000506db 	.word	0x000506db
   29ae0:	0005049c 	.word	0x0005049c
   29ae4:	000504bb 	.word	0x000504bb
   29ae8:	0004ea83 	.word	0x0004ea83
   29aec:	000504db 	.word	0x000504db
		client->fd =
   29af0:	9b03      	ldr	r3, [sp, #12]
	if (client->fd < 0) {
   29af2:	2b00      	cmp	r3, #0
		client->fd =
   29af4:	6033      	str	r3, [r6, #0]
	if (client->fd < 0) {
   29af6:	f6ff ae66 	blt.w	297c6 <download_client_connect+0xe>
	client->config = *config;
   29afa:	e898 0003 	ldmia.w	r8, {r0, r1}
	client->host = host;
   29afe:	f241 0314 	movw	r3, #4116	; 0x1014
   29b02:	9a04      	ldr	r2, [sp, #16]
	LOG_INF("Connected to %s", log_strdup(host));
   29b04:	f04f 0400 	mov.w	r4, #0
	client->host = host;
   29b08:	50f2      	str	r2, [r6, r3]
	LOG_INF("Connected to %s", log_strdup(host));
   29b0a:	2303      	movs	r3, #3
	client->config = *config;
   29b0c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   29b10:	361c      	adds	r6, #28
   29b12:	e886 0003 	stmia.w	r6, {r0, r1}
	LOG_INF("Connected to %s", log_strdup(host));
   29b16:	4610      	mov	r0, r2
   29b18:	f363 0402 	bfi	r4, r3, #0, #3
   29b1c:	f01d ff04 	bl	47928 <log_strdup>
   29b20:	f367 04c5 	bfi	r4, r7, #3, #3
   29b24:	f365 148f 	bfi	r4, r5, #6, #10
   29b28:	4602      	mov	r2, r0
   29b2a:	4903      	ldr	r1, [pc, #12]	; (29b38 <download_client_connect+0x380>)
   29b2c:	4620      	mov	r0, r4
   29b2e:	f01d fee9 	bl	47904 <log_string_sync>
   29b32:	e64a      	b.n	297ca <download_client_connect+0x12>
		return 0;
   29b34:	2700      	movs	r7, #0
   29b36:	e648      	b.n	297ca <download_client_connect+0x12>
   29b38:	000504f7 	.word	0x000504f7

00029b3c <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   29b3c:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   29b3e:	4604      	mov	r4, r0
   29b40:	b310      	cbz	r0, 29b88 <download_client_disconnect+0x4c>
   29b42:	6800      	ldr	r0, [r0, #0]
   29b44:	2800      	cmp	r0, #0
   29b46:	db1f      	blt.n	29b88 <download_client_disconnect+0x4c>
		return -EINVAL;
	}

	err = close(client->fd);
   29b48:	f7ff fd12 	bl	29570 <close>
	if (err) {
   29b4c:	b1c0      	cbz	r0, 29b80 <download_client_disconnect+0x44>
		LOG_ERR("Failed to close socket, errno %d", errno);
   29b4e:	2301      	movs	r3, #1
   29b50:	f04f 0400 	mov.w	r4, #0
   29b54:	4a0e      	ldr	r2, [pc, #56]	; (29b90 <download_client_disconnect+0x54>)
   29b56:	f363 0402 	bfi	r4, r3, #0, #3
   29b5a:	4b0e      	ldr	r3, [pc, #56]	; (29b94 <download_client_disconnect+0x58>)
   29b5c:	f36f 04c5 	bfc	r4, #3, #3
   29b60:	1a9b      	subs	r3, r3, r2
   29b62:	08db      	lsrs	r3, r3, #3
   29b64:	f363 148f 	bfi	r4, r3, #6, #10
   29b68:	f01e f8d6 	bl	47d18 <__errno>
   29b6c:	490a      	ldr	r1, [pc, #40]	; (29b98 <download_client_disconnect+0x5c>)
   29b6e:	6802      	ldr	r2, [r0, #0]
   29b70:	4620      	mov	r0, r4
   29b72:	f01d fec7 	bl	47904 <log_string_sync>
		return -errno;
   29b76:	f01e f8cf 	bl	47d18 <__errno>
   29b7a:	6800      	ldr	r0, [r0, #0]
   29b7c:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   29b7e:	bd10      	pop	{r4, pc}
	client->fd = -1;
   29b80:	f04f 33ff 	mov.w	r3, #4294967295
   29b84:	6023      	str	r3, [r4, #0]
	return 0;
   29b86:	e7fa      	b.n	29b7e <download_client_disconnect+0x42>
		return -EINVAL;
   29b88:	f06f 0015 	mvn.w	r0, #21
   29b8c:	e7f7      	b.n	29b7e <download_client_disconnect+0x42>
   29b8e:	bf00      	nop
   29b90:	0004a688 	.word	0x0004a688
   29b94:	0004a708 	.word	0x0004a708
   29b98:	00050507 	.word	0x00050507

00029b9c <reconnect>:
{
   29b9c:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   29b9e:	2303      	movs	r3, #3
{
   29ba0:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   29ba2:	f04f 0000 	mov.w	r0, #0
   29ba6:	4a0e      	ldr	r2, [pc, #56]	; (29be0 <reconnect+0x44>)
   29ba8:	f363 0002 	bfi	r0, r3, #0, #3
   29bac:	4b0d      	ldr	r3, [pc, #52]	; (29be4 <reconnect+0x48>)
   29bae:	f36f 00c5 	bfc	r0, #3, #3
   29bb2:	1a9b      	subs	r3, r3, r2
   29bb4:	08db      	lsrs	r3, r3, #3
   29bb6:	f363 108f 	bfi	r0, r3, #6, #10
   29bba:	490b      	ldr	r1, [pc, #44]	; (29be8 <reconnect+0x4c>)
   29bbc:	f01d fea2 	bl	47904 <log_string_sync>
	err = download_client_disconnect(dl);
   29bc0:	4620      	mov	r0, r4
   29bc2:	f7ff ffbb 	bl	29b3c <download_client_disconnect>
	if (err) {
   29bc6:	b950      	cbnz	r0, 29bde <reconnect+0x42>
	err = download_client_connect(dl, dl->host, &dl->config);
   29bc8:	f241 0314 	movw	r3, #4116	; 0x1014
   29bcc:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
   29bd0:	58e1      	ldr	r1, [r4, r3]
   29bd2:	4620      	mov	r0, r4
}
   29bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   29bd8:	321c      	adds	r2, #28
   29bda:	f7ff bded 	b.w	297b8 <download_client_connect>
}
   29bde:	bd10      	pop	{r4, pc}
   29be0:	0004a688 	.word	0x0004a688
   29be4:	0004a708 	.word	0x0004a708
   29be8:	00050817 	.word	0x00050817

00029bec <download_thread>:
{
   29bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bf0:	4604      	mov	r4, r0
   29bf2:	4b86      	ldr	r3, [pc, #536]	; (29e0c <download_thread+0x220>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   29bf4:	4a86      	ldr	r2, [pc, #536]	; (29e10 <download_thread+0x224>)
{
   29bf6:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   29bf8:	1a9b      	subs	r3, r3, r2
   29bfa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   29bfe:	9302      	str	r3, [sp, #8]
	k_thread_suspend(dl->tid);
   29c00:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   29c04:	3304      	adds	r3, #4
   29c06:	930a      	str	r3, [sp, #40]	; 0x28
   29c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c0a:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   29c0c:	f015 fb90 	bl	3f330 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   29c10:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
   29c14:	3504      	adds	r5, #4
   29c16:	682b      	ldr	r3, [r5, #0]
   29c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   29c1c:	d30e      	bcc.n	29c3c <download_thread+0x50>
   29c1e:	497d      	ldr	r1, [pc, #500]	; (29e14 <download_thread+0x228>)
   29c20:	f240 139b 	movw	r3, #411	; 0x19b
   29c24:	4a7c      	ldr	r2, [pc, #496]	; (29e18 <download_thread+0x22c>)
   29c26:	487d      	ldr	r0, [pc, #500]	; (29e1c <download_thread+0x230>)
   29c28:	f01d fe4f 	bl	478ca <printk>
   29c2c:	487c      	ldr	r0, [pc, #496]	; (29e20 <download_thread+0x234>)
   29c2e:	f01d fe4c 	bl	478ca <printk>
   29c32:	f240 119b 	movw	r1, #411	; 0x19b
   29c36:	4878      	ldr	r0, [pc, #480]	; (29e18 <download_thread+0x22c>)
   29c38:	f01d fe54 	bl	478e4 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   29c3c:	4626      	mov	r6, r4
   29c3e:	f856 3b04 	ldr.w	r3, [r6], #4
   29c42:	682f      	ldr	r7, [r5, #0]
   29c44:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT_NO_MSG(socket_ops);
   29c46:	4b77      	ldr	r3, [pc, #476]	; (29e24 <download_thread+0x238>)
   29c48:	eb06 0907 	add.w	r9, r6, r7
   29c4c:	681b      	ldr	r3, [r3, #0]
   29c4e:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   29c52:	b94b      	cbnz	r3, 29c68 <download_thread+0x7c>
   29c54:	4974      	ldr	r1, [pc, #464]	; (29e28 <download_thread+0x23c>)
   29c56:	4871      	ldr	r0, [pc, #452]	; (29e1c <download_thread+0x230>)
   29c58:	2369      	movs	r3, #105	; 0x69
   29c5a:	4a74      	ldr	r2, [pc, #464]	; (29e2c <download_thread+0x240>)
   29c5c:	f01d fe35 	bl	478ca <printk>
   29c60:	2169      	movs	r1, #105	; 0x69
   29c62:	4872      	ldr	r0, [pc, #456]	; (29e2c <download_thread+0x240>)
   29c64:	f01d fe3e 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   29c68:	4b6e      	ldr	r3, [pc, #440]	; (29e24 <download_thread+0x238>)
   29c6a:	681b      	ldr	r3, [r3, #0]
   29c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29c6e:	b94b      	cbnz	r3, 29c84 <download_thread+0x98>
   29c70:	496f      	ldr	r1, [pc, #444]	; (29e30 <download_thread+0x244>)
   29c72:	486a      	ldr	r0, [pc, #424]	; (29e1c <download_thread+0x230>)
   29c74:	236a      	movs	r3, #106	; 0x6a
   29c76:	4a6d      	ldr	r2, [pc, #436]	; (29e2c <download_thread+0x240>)
   29c78:	f01d fe27 	bl	478ca <printk>
   29c7c:	216a      	movs	r1, #106	; 0x6a
   29c7e:	486b      	ldr	r0, [pc, #428]	; (29e2c <download_thread+0x240>)
   29c80:	f01d fe30 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   29c84:	4b67      	ldr	r3, [pc, #412]	; (29e24 <download_thread+0x238>)
   29c86:	463a      	mov	r2, r7
   29c88:	681b      	ldr	r3, [r3, #0]
   29c8a:	4649      	mov	r1, r9
   29c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29c8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   29c90:	469c      	mov	ip, r3
   29c92:	2300      	movs	r3, #0
   29c94:	4667      	mov	r7, ip
   29c96:	47b8      	blx	r7
		if ((len == 0) || (len == -1)) {
   29c98:	1e43      	subs	r3, r0, #1
   29c9a:	3303      	adds	r3, #3
   29c9c:	4681      	mov	r9, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   29c9e:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   29ca0:	d95f      	bls.n	29d62 <download_thread+0x176>
			if ((dl->offset > 0) && (dl->has_header)) {
   29ca2:	b1d3      	cbz	r3, 29cda <download_thread+0xee>
   29ca4:	f241 0310 	movw	r3, #4112	; 0x1010
   29ca8:	5ce3      	ldrb	r3, [r4, r3]
   29caa:	b1b3      	cbz	r3, 29cda <download_thread+0xee>
				rc = fragment_evt_send(dl);
   29cac:	4620      	mov	r0, r4
   29cae:	f7ff fbe1 	bl	29474 <fragment_evt_send>
				if (rc) {
   29cb2:	b190      	cbz	r0, 29cda <download_thread+0xee>
					LOG_INF("Fragment refused, download "
   29cb4:	2303      	movs	r3, #3
   29cb6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   29cba:	f363 0202 	bfi	r2, r3, #0, #3
   29cbe:	b293      	uxth	r3, r2
   29cc0:	f36f 03c5 	bfc	r3, #3, #3
   29cc4:	9a02      	ldr	r2, [sp, #8]
   29cc6:	b29b      	uxth	r3, r3
   29cc8:	f362 138f 	bfi	r3, r2, #6, #10
   29ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
			LOG_INF("Fragment refused, download stopped.");
   29cd0:	4958      	ldr	r1, [pc, #352]	; (29e34 <download_thread+0x248>)
   29cd2:	b298      	uxth	r0, r3
   29cd4:	f01d fe16 	bl	47904 <log_string_sync>
   29cd8:	e796      	b.n	29c08 <download_thread+0x1c>
   29cda:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
			if (len == -1) {
   29cde:	f1b9 3fff 	cmp.w	r9, #4294967295
   29ce2:	f106 0618 	add.w	r6, r6, #24
   29ce6:	f040 815f 	bne.w	29fa8 <download_thread+0x3bc>
				LOG_ERR("Error in recv(), errno %d", errno);
   29cea:	2301      	movs	r3, #1
   29cec:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   29cf0:	f363 0202 	bfi	r2, r3, #0, #3
   29cf4:	b293      	uxth	r3, r2
   29cf6:	f36f 03c5 	bfc	r3, #3, #3
   29cfa:	9a02      	ldr	r2, [sp, #8]
   29cfc:	b29b      	uxth	r3, r3
   29cfe:	f362 138f 	bfi	r3, r2, #6, #10
   29d02:	f8ad 3018 	strh.w	r3, [sp, #24]
   29d06:	f01e f807 	bl	47d18 <__errno>
   29d0a:	494b      	ldr	r1, [pc, #300]	; (29e38 <download_thread+0x24c>)
   29d0c:	6802      	ldr	r2, [r0, #0]
   29d0e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   29d12:	f01d fdf7 	bl	47904 <log_string_sync>
				rc = error_evt_send(dl, ENOTCONN);
   29d16:	2180      	movs	r1, #128	; 0x80
   29d18:	4630      	mov	r0, r6
   29d1a:	f020 f846 	bl	49daa <error_evt_send.isra.1>
			if (rc) {
   29d1e:	2800      	cmp	r0, #0
   29d20:	f47f af72 	bne.w	29c08 <download_thread+0x1c>
			reconnect(dl);
   29d24:	4620      	mov	r0, r4
   29d26:	f7ff ff39 	bl	29b9c <reconnect>
		dl->offset = 0;
   29d2a:	2700      	movs	r7, #0
			rc = error_evt_send(dl, ECONNRESET);
   29d2c:	f242 09d8 	movw	r9, #8408	; 0x20d8
		dl->has_header = false;
   29d30:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   29d34:	3610      	adds	r6, #16
   29d36:	f04f 0300 	mov.w	r3, #0
		dl->offset = 0;
   29d3a:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   29d3c:	4620      	mov	r0, r4
		dl->has_header = false;
   29d3e:	7033      	strb	r3, [r6, #0]
		rc = get_request_send(dl);
   29d40:	f7ff fc42 	bl	295c8 <get_request_send>
		if (rc) {
   29d44:	2800      	cmp	r0, #0
   29d46:	f43f af66 	beq.w	29c16 <download_thread+0x2a>
			rc = error_evt_send(dl, ECONNRESET);
   29d4a:	2168      	movs	r1, #104	; 0x68
   29d4c:	eb04 0009 	add.w	r0, r4, r9
   29d50:	f020 f82b 	bl	49daa <error_evt_send.isra.1>
			if (rc) {
   29d54:	2800      	cmp	r0, #0
   29d56:	f47f af57 	bne.w	29c08 <download_thread+0x1c>
			reconnect(dl);
   29d5a:	4620      	mov	r0, r4
   29d5c:	f7ff ff1e 	bl	29b9c <reconnect>
			goto send_again;
   29d60:	e7e9      	b.n	29d36 <download_thread+0x14a>
		dl->offset += len;
   29d62:	4403      	add	r3, r0
   29d64:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   29d66:	f241 0310 	movw	r3, #4112	; 0x1010
   29d6a:	5ce3      	ldrb	r3, [r4, r3]
   29d6c:	2b00      	cmp	r3, #0
   29d6e:	f040 80b5 	bne.w	29edc <download_thread+0x2f0>
	p = strstr(client->buf, "\r\n\r\n");
   29d72:	4932      	ldr	r1, [pc, #200]	; (29e3c <download_thread+0x250>)
   29d74:	4630      	mov	r0, r6
   29d76:	f017 ff65 	bl	41c44 <strstr>
	if (!p) {
   29d7a:	4607      	mov	r7, r0
   29d7c:	2800      	cmp	r0, #0
   29d7e:	f43f af4a 	beq.w	29c16 <download_thread+0x2a>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   29d82:	482e      	ldr	r0, [pc, #184]	; (29e3c <download_thread+0x250>)
   29d84:	f017 fd4e 	bl	41824 <strlen>
   29d88:	183b      	adds	r3, r7, r0
   29d8a:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   29d8c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   29d90:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   29d92:	d30e      	bcc.n	29db2 <download_thread+0x1c6>
   29d94:	492a      	ldr	r1, [pc, #168]	; (29e40 <download_thread+0x254>)
   29d96:	f240 1329 	movw	r3, #297	; 0x129
   29d9a:	4a1f      	ldr	r2, [pc, #124]	; (29e18 <download_thread+0x22c>)
   29d9c:	481f      	ldr	r0, [pc, #124]	; (29e1c <download_thread+0x230>)
   29d9e:	f01d fd94 	bl	478ca <printk>
   29da2:	481f      	ldr	r0, [pc, #124]	; (29e20 <download_thread+0x234>)
   29da4:	f01d fd91 	bl	478ca <printk>
   29da8:	f240 1129 	movw	r1, #297	; 0x129
   29dac:	481a      	ldr	r0, [pc, #104]	; (29e18 <download_thread+0x22c>)
   29dae:	f01d fd99 	bl	478e4 <assert_post_action>
	if (client->file_size == 0) {
   29db2:	f241 0308 	movw	r3, #4104	; 0x1008
   29db6:	58e3      	ldr	r3, [r4, r3]
   29db8:	2b00      	cmp	r3, #0
   29dba:	d151      	bne.n	29e60 <download_thread+0x274>
		p = strstr(client->buf, "Content-Range: bytes");
   29dbc:	4921      	ldr	r1, [pc, #132]	; (29e44 <download_thread+0x258>)
   29dbe:	4630      	mov	r0, r6
   29dc0:	f017 ff40 	bl	41c44 <strstr>
		if (!p) {
   29dc4:	b990      	cbnz	r0, 29dec <download_thread+0x200>
			LOG_ERR("Server did not send "
   29dc6:	2201      	movs	r2, #1
   29dc8:	9b02      	ldr	r3, [sp, #8]
   29dca:	f362 0802 	bfi	r8, r2, #0, #3
   29dce:	f360 08c5 	bfi	r8, r0, #3, #3
   29dd2:	f363 188f 	bfi	r8, r3, #6, #10
   29dd6:	4640      	mov	r0, r8
   29dd8:	491b      	ldr	r1, [pc, #108]	; (29e48 <download_thread+0x25c>)
			LOG_ERR("Server did not send file size in response");
   29dda:	f01d fd93 	bl	47904 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   29dde:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   29de2:	214d      	movs	r1, #77	; 0x4d
   29de4:	3018      	adds	r0, #24
   29de6:	f01f ffe0 	bl	49daa <error_evt_send.isra.1>
				break;
   29dea:	e70d      	b.n	29c08 <download_thread+0x1c>
		p = strstr(p, "/");
   29dec:	4917      	ldr	r1, [pc, #92]	; (29e4c <download_thread+0x260>)
   29dee:	f017 ff29 	bl	41c44 <strstr>
		if (!p) {
   29df2:	bb78      	cbnz	r0, 29e54 <download_thread+0x268>
			LOG_ERR("Server did not send file size in response");
   29df4:	2301      	movs	r3, #1
   29df6:	f363 0b02 	bfi	fp, r3, #0, #3
   29dfa:	9b02      	ldr	r3, [sp, #8]
   29dfc:	f360 0bc5 	bfi	fp, r0, #3, #3
   29e00:	f363 1b8f 	bfi	fp, r3, #6, #10
   29e04:	4912      	ldr	r1, [pc, #72]	; (29e50 <download_thread+0x264>)
   29e06:	4658      	mov	r0, fp
   29e08:	e7e7      	b.n	29dda <download_thread+0x1ee>
   29e0a:	bf00      	nop
   29e0c:	0004a708 	.word	0x0004a708
   29e10:	0004a688 	.word	0x0004a688
   29e14:	0005053d 	.word	0x0005053d
   29e18:	000506db 	.word	0x000506db
   29e1c:	0004ccf0 	.word	0x0004ccf0
   29e20:	0005055a 	.word	0x0005055a
   29e24:	20023bf8 	.word	0x20023bf8
   29e28:	0004ce24 	.word	0x0004ce24
   29e2c:	0004cdf3 	.word	0x0004cdf3
   29e30:	0004e9b0 	.word	0x0004e9b0
   29e34:	0005056c 	.word	0x0005056c
   29e38:	00050590 	.word	0x00050590
   29e3c:	000507c0 	.word	0x000507c0
   29e40:	000505aa 	.word	0x000505aa
   29e44:	000505c4 	.word	0x000505c4
   29e48:	000505d9 	.word	0x000505d9
   29e4c:	00050609 	.word	0x00050609
   29e50:	0005060b 	.word	0x0005060b
		client->file_size = atoi(p + 1);
   29e54:	3001      	adds	r0, #1
   29e56:	f016 fd5d 	bl	40914 <atoi>
   29e5a:	f241 0308 	movw	r3, #4104	; 0x1008
   29e5e:	50e0      	str	r0, [r4, r3]
	p = strstr(client->buf, "Connection: close");
   29e60:	495b      	ldr	r1, [pc, #364]	; (29fd0 <download_thread+0x3e4>)
   29e62:	4630      	mov	r0, r6
   29e64:	f017 feee 	bl	41c44 <strstr>
	if (p) {
   29e68:	b1a8      	cbz	r0, 29e96 <download_thread+0x2aa>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   29e6a:	2302      	movs	r3, #2
   29e6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   29e70:	4958      	ldr	r1, [pc, #352]	; (29fd4 <download_thread+0x3e8>)
   29e72:	f363 0202 	bfi	r2, r3, #0, #3
   29e76:	b293      	uxth	r3, r2
   29e78:	f36f 03c5 	bfc	r3, #3, #3
   29e7c:	9a02      	ldr	r2, [sp, #8]
   29e7e:	b29b      	uxth	r3, r3
   29e80:	f362 138f 	bfi	r3, r2, #6, #10
   29e84:	b298      	uxth	r0, r3
   29e86:	f8ad 300c 	strh.w	r3, [sp, #12]
   29e8a:	f01d fd3b 	bl	47904 <log_string_sync>
		client->connection_close = true;
   29e8e:	f241 0311 	movw	r3, #4113	; 0x1011
   29e92:	2201      	movs	r2, #1
   29e94:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   29e96:	682a      	ldr	r2, [r5, #0]
   29e98:	4297      	cmp	r7, r2
   29e9a:	d05c      	beq.n	29f56 <download_thread+0x36a>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   29e9c:	2302      	movs	r3, #2
   29e9e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29ea2:	1bd2      	subs	r2, r2, r7
   29ea4:	f363 0102 	bfi	r1, r3, #0, #3
   29ea8:	b28b      	uxth	r3, r1
   29eaa:	f36f 03c5 	bfc	r3, #3, #3
   29eae:	9902      	ldr	r1, [sp, #8]
   29eb0:	b29b      	uxth	r3, r3
   29eb2:	f361 138f 	bfi	r3, r1, #6, #10
   29eb6:	b298      	uxth	r0, r3
   29eb8:	4947      	ldr	r1, [pc, #284]	; (29fd8 <download_thread+0x3ec>)
   29eba:	f8ad 3010 	strh.w	r3, [sp, #16]
   29ebe:	f01d fd21 	bl	47904 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   29ec2:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29ec6:	1bd2      	subs	r2, r2, r7
   29ec8:	4630      	mov	r0, r6
   29eca:	f7ef fff1 	bl	19eb0 <memcpy>
		client->offset -= hdr;
   29ece:	682b      	ldr	r3, [r5, #0]
   29ed0:	1bdf      	subs	r7, r3, r7
   29ed2:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   29ed4:	2301      	movs	r3, #1
   29ed6:	f241 0210 	movw	r2, #4112	; 0x1010
   29eda:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   29edc:	f241 070c 	movw	r7, #4108	; 0x100c
   29ee0:	6829      	ldr	r1, [r5, #0]
   29ee2:	59e2      	ldr	r2, [r4, r7]
   29ee4:	f241 0308 	movw	r3, #4104	; 0x1008
   29ee8:	4549      	cmp	r1, r9
   29eea:	bf94      	ite	ls
   29eec:	1852      	addls	r2, r2, r1
   29eee:	444a      	addhi	r2, r9
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   29ef0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
		dl->progress += MIN(dl->offset, len);
   29ef4:	51e2      	str	r2, [r4, r7]
   29ef6:	58e3      	ldr	r3, [r4, r3]
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   29ef8:	d202      	bcs.n	29f00 <download_thread+0x314>
   29efa:	429a      	cmp	r2, r3
   29efc:	f47f ae8b 	bne.w	29c16 <download_thread+0x2a>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   29f00:	2603      	movs	r6, #3
   29f02:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   29f06:	9802      	ldr	r0, [sp, #8]
   29f08:	f366 0102 	bfi	r1, r6, #0, #3
   29f0c:	b289      	uxth	r1, r1
   29f0e:	f36f 01c5 	bfc	r1, #3, #3
   29f12:	b289      	uxth	r1, r1
   29f14:	f360 118f 	bfi	r1, r0, #6, #10
   29f18:	f8ad 1020 	strh.w	r1, [sp, #32]
   29f1c:	2164      	movs	r1, #100	; 0x64
   29f1e:	4351      	muls	r1, r2
   29f20:	fbb1 f1f3 	udiv	r1, r1, r3
   29f24:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   29f28:	9100      	str	r1, [sp, #0]
   29f2a:	492c      	ldr	r1, [pc, #176]	; (29fdc <download_thread+0x3f0>)
   29f2c:	f01d fcea 	bl	47904 <log_string_sync>
		rc = fragment_evt_send(dl);
   29f30:	4620      	mov	r0, r4
   29f32:	f7ff fa9f 	bl	29474 <fragment_evt_send>
		if (rc) {
   29f36:	4681      	mov	r9, r0
   29f38:	b180      	cbz	r0, 29f5c <download_thread+0x370>
			LOG_INF("Fragment refused, download stopped.");
   29f3a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   29f3e:	9a02      	ldr	r2, [sp, #8]
   29f40:	f366 0302 	bfi	r3, r6, #0, #3
   29f44:	b29b      	uxth	r3, r3
   29f46:	f36f 03c5 	bfc	r3, #3, #3
   29f4a:	b29b      	uxth	r3, r3
   29f4c:	f362 138f 	bfi	r3, r2, #6, #10
   29f50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   29f54:	e6bc      	b.n	29cd0 <download_thread+0xe4>
		client->offset = 0;
   29f56:	2300      	movs	r3, #0
   29f58:	602b      	str	r3, [r5, #0]
   29f5a:	e7bb      	b.n	29ed4 <download_thread+0x2e8>
		if (dl->progress == dl->file_size) {
   29f5c:	f241 0308 	movw	r3, #4104	; 0x1008
   29f60:	59e2      	ldr	r2, [r4, r7]
   29f62:	58e3      	ldr	r3, [r4, r3]
   29f64:	429a      	cmp	r2, r3
   29f66:	d117      	bne.n	29f98 <download_thread+0x3ac>
			LOG_INF("Download complete");
   29f68:	9b02      	ldr	r3, [sp, #8]
   29f6a:	f366 0a02 	bfi	sl, r6, #0, #3
   29f6e:	f360 0ac5 	bfi	sl, r0, #3, #3
   29f72:	f363 1a8f 	bfi	sl, r3, #6, #10
   29f76:	4650      	mov	r0, sl
   29f78:	4919      	ldr	r1, [pc, #100]	; (29fe0 <download_thread+0x3f4>)
   29f7a:	f01d fcc3 	bl	47904 <log_string_sync>
			const struct download_client_evt evt = {
   29f7e:	2302      	movs	r3, #2
   29f80:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
   29f84:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   29f88:	f242 03d8 	movw	r3, #8408	; 0x20d8
			const struct download_client_evt evt = {
   29f8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
			dl->callback(&evt);
   29f90:	58e3      	ldr	r3, [r4, r3]
   29f92:	a80d      	add	r0, sp, #52	; 0x34
   29f94:	4798      	blx	r3
   29f96:	e637      	b.n	29c08 <download_thread+0x1c>
		if (dl->connection_close) {
   29f98:	f241 0311 	movw	r3, #4113	; 0x1011
   29f9c:	5ce2      	ldrb	r2, [r4, r3]
   29f9e:	2a00      	cmp	r2, #0
   29fa0:	f43f aec3 	beq.w	29d2a <download_thread+0x13e>
			dl->connection_close = false;
   29fa4:	54e0      	strb	r0, [r4, r3]
   29fa6:	e6bd      	b.n	29d24 <download_thread+0x138>
				LOG_WRN("Peer closed connection!");
   29fa8:	2302      	movs	r3, #2
   29faa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   29fae:	490d      	ldr	r1, [pc, #52]	; (29fe4 <download_thread+0x3f8>)
   29fb0:	f363 0202 	bfi	r2, r3, #0, #3
   29fb4:	b293      	uxth	r3, r2
   29fb6:	f36f 03c5 	bfc	r3, #3, #3
   29fba:	9a02      	ldr	r2, [sp, #8]
   29fbc:	b29b      	uxth	r3, r3
   29fbe:	f362 138f 	bfi	r3, r2, #6, #10
   29fc2:	b298      	uxth	r0, r3
   29fc4:	f8ad 301c 	strh.w	r3, [sp, #28]
   29fc8:	f01d fc9c 	bl	47904 <log_string_sync>
				rc = error_evt_send(dl, ECONNRESET);
   29fcc:	2168      	movs	r1, #104	; 0x68
   29fce:	e6a3      	b.n	29d18 <download_thread+0x12c>
   29fd0:	00050635 	.word	0x00050635
   29fd4:	00050647 	.word	0x00050647
   29fd8:	0005067a 	.word	0x0005067a
   29fdc:	00050693 	.word	0x00050693
   29fe0:	000506b1 	.word	0x000506b1
   29fe4:	000506c3 	.word	0x000506c3

00029fe8 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   29fe8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   29fea:	4604      	mov	r4, r0
   29fec:	b3a0      	cbz	r0, 2a058 <download_client_start+0x70>
   29fee:	6803      	ldr	r3, [r0, #0]
   29ff0:	2b00      	cmp	r3, #0
   29ff2:	db31      	blt.n	2a058 <download_client_start+0x70>
		return -EINVAL;
	}

	client->file = file;
   29ff4:	f241 0318 	movw	r3, #4120	; 0x1018
	client->file_size = 0;
	client->progress = from;
   29ff8:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   29ffc:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   29ffe:	2300      	movs	r3, #0
   2a000:	f241 0008 	movw	r0, #4104	; 0x1008
   2a004:	5023      	str	r3, [r4, r0]
	client->progress = from;
   2a006:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   2a008:	f241 0204 	movw	r2, #4100	; 0x1004
   2a00c:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   2a00e:	f241 0210 	movw	r2, #4112	; 0x1010

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2a012:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   2a016:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2a018:	2203      	movs	r2, #3
   2a01a:	f362 0502 	bfi	r5, r2, #0, #3
   2a01e:	f363 05c5 	bfi	r5, r3, #3, #3
   2a022:	4a0f      	ldr	r2, [pc, #60]	; (2a060 <download_client_start+0x78>)
   2a024:	4b0f      	ldr	r3, [pc, #60]	; (2a064 <download_client_start+0x7c>)
   2a026:	4608      	mov	r0, r1
   2a028:	1a9b      	subs	r3, r3, r2
   2a02a:	08db      	lsrs	r3, r3, #3
   2a02c:	f363 158f 	bfi	r5, r3, #6, #10
   2a030:	f01d fc7a 	bl	47928 <log_strdup>
   2a034:	59a3      	ldr	r3, [r4, r6]
   2a036:	4602      	mov	r2, r0
   2a038:	490b      	ldr	r1, [pc, #44]	; (2a068 <download_client_start+0x80>)
   2a03a:	4628      	mov	r0, r5
   2a03c:	f01d fc62 	bl	47904 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   2a040:	4620      	mov	r0, r4
   2a042:	f7ff fac1 	bl	295c8 <get_request_send>
	if (err) {
   2a046:	4605      	mov	r5, r0
   2a048:	b920      	cbnz	r0, 2a054 <download_client_start+0x6c>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   2a04a:	f241 0324 	movw	r3, #4132	; 0x1024
   2a04e:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   2a050:	f015 f9c0 	bl	3f3d4 <z_impl_k_thread_resume>

	return 0;
}
   2a054:	4628      	mov	r0, r5
   2a056:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a058:	f06f 0515 	mvn.w	r5, #21
   2a05c:	e7fa      	b.n	2a054 <download_client_start+0x6c>
   2a05e:	bf00      	nop
   2a060:	0004a688 	.word	0x0004a688
   2a064:	0004a708 	.word	0x0004a708
   2a068:	00050528 	.word	0x00050528

0002a06c <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2a06e:	a801      	add	r0, sp, #4
   2a070:	f000 ff88 	bl	2af84 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   2a074:	f241 0318 	movw	r3, #4120	; 0x1018
   2a078:	4814      	ldr	r0, [pc, #80]	; (2a0cc <download_with_offset+0x60>)
   2a07a:	9a01      	ldr	r2, [sp, #4]
   2a07c:	58c1      	ldr	r1, [r0, r3]
   2a07e:	f7ff ffb3 	bl	29fe8 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   2a082:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   2a084:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   2a086:	f04f 0000 	mov.w	r0, #0
   2a08a:	4c11      	ldr	r4, [pc, #68]	; (2a0d0 <download_with_offset+0x64>)
   2a08c:	f363 0002 	bfi	r0, r3, #0, #3
   2a090:	4b10      	ldr	r3, [pc, #64]	; (2a0d4 <download_with_offset+0x68>)
   2a092:	f36f 00c5 	bfc	r0, #3, #3
   2a096:	1ae4      	subs	r4, r4, r3
   2a098:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a09c:	f364 108f 	bfi	r0, r4, #6, #10
   2a0a0:	9a01      	ldr	r2, [sp, #4]
   2a0a2:	490d      	ldr	r1, [pc, #52]	; (2a0d8 <download_with_offset+0x6c>)
   2a0a4:	f01d fc2e 	bl	47904 <log_string_sync>
	if (err != 0) {
   2a0a8:	b16d      	cbz	r5, 2a0c6 <download_with_offset+0x5a>
		LOG_ERR("%s failed with error %d", __func__, err);
   2a0aa:	2301      	movs	r3, #1
   2a0ac:	f04f 0000 	mov.w	r0, #0
   2a0b0:	f363 0002 	bfi	r0, r3, #0, #3
   2a0b4:	f36f 00c5 	bfc	r0, #3, #3
   2a0b8:	f364 108f 	bfi	r0, r4, #6, #10
   2a0bc:	462b      	mov	r3, r5
   2a0be:	4a07      	ldr	r2, [pc, #28]	; (2a0dc <download_with_offset+0x70>)
   2a0c0:	4907      	ldr	r1, [pc, #28]	; (2a0e0 <download_with_offset+0x74>)
   2a0c2:	f01d fc1f 	bl	47904 <log_string_sync>
	}
}
   2a0c6:	b003      	add	sp, #12
   2a0c8:	bd30      	pop	{r4, r5, pc}
   2a0ca:	bf00      	nop
   2a0cc:	20020eb0 	.word	0x20020eb0
   2a0d0:	0004a710 	.word	0x0004a710
   2a0d4:	0004a688 	.word	0x0004a688
   2a0d8:	00050914 	.word	0x00050914
   2a0dc:	00050836 	.word	0x00050836
   2a0e0:	00050932 	.word	0x00050932

0002a0e4 <download_client_callback>:
{
   2a0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   2a0e6:	4605      	mov	r5, r0
   2a0e8:	2800      	cmp	r0, #0
   2a0ea:	f000 80cf 	beq.w	2a28c <download_client_callback+0x1a8>
	switch (event->id) {
   2a0ee:	7806      	ldrb	r6, [r0, #0]
   2a0f0:	2e01      	cmp	r6, #1
   2a0f2:	f000 80a1 	beq.w	2a238 <download_client_callback+0x154>
   2a0f6:	d303      	bcc.n	2a100 <download_client_callback+0x1c>
   2a0f8:	2e02      	cmp	r6, #2
   2a0fa:	d077      	beq.n	2a1ec <download_client_callback+0x108>
	return 0;
   2a0fc:	2400      	movs	r4, #0
   2a0fe:	e00d      	b.n	2a11c <download_client_callback+0x38>
		if (first_fragment) {
   2a100:	4e64      	ldr	r6, [pc, #400]	; (2a294 <download_client_callback+0x1b0>)
   2a102:	7833      	ldrb	r3, [r6, #0]
   2a104:	2b00      	cmp	r3, #0
   2a106:	d054      	beq.n	2a1b2 <download_client_callback+0xce>
			err = download_client_file_size_get(&dlc, &file_size);
   2a108:	4669      	mov	r1, sp
   2a10a:	4863      	ldr	r0, [pc, #396]	; (2a298 <download_client_callback+0x1b4>)
   2a10c:	f01f fe5c 	bl	49dc8 <download_client_file_size_get>
			if (err != 0) {
   2a110:	4604      	mov	r4, r0
   2a112:	b130      	cbz	r0, 2a122 <download_client_callback+0x3e>
				callback(FOTA_DOWNLOAD_EVT_ERROR);
   2a114:	4b61      	ldr	r3, [pc, #388]	; (2a29c <download_client_callback+0x1b8>)
   2a116:	681b      	ldr	r3, [r3, #0]
   2a118:	2001      	movs	r0, #1
   2a11a:	4798      	blx	r3
}
   2a11c:	4620      	mov	r0, r4
   2a11e:	b003      	add	sp, #12
   2a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
			first_fragment = false;
   2a122:	7030      	strb	r0, [r6, #0]
   2a124:	4607      	mov	r7, r0
			int img_type = dfu_target_img_type(event->fragment.buf,
   2a126:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2a12a:	f000 fec7 	bl	2aebc <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size);
   2a12e:	9900      	ldr	r1, [sp, #0]
   2a130:	f000 fef2 	bl	2af18 <dfu_target_init>
   2a134:	4e5a      	ldr	r6, [pc, #360]	; (2a2a0 <download_client_callback+0x1bc>)
   2a136:	4b5b      	ldr	r3, [pc, #364]	; (2a2a4 <download_client_callback+0x1c0>)
			if ((err < 0) && (err != -EBUSY)) {
   2a138:	1e04      	subs	r4, r0, #0
   2a13a:	eba6 0603 	sub.w	r6, r6, r3
   2a13e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   2a142:	da10      	bge.n	2a166 <download_client_callback+0x82>
   2a144:	f114 0f10 	cmn.w	r4, #16
   2a148:	d00d      	beq.n	2a166 <download_client_callback+0x82>
				LOG_ERR("dfu_target_init error %d", err);
   2a14a:	2301      	movs	r3, #1
   2a14c:	f04f 0000 	mov.w	r0, #0
   2a150:	f363 0002 	bfi	r0, r3, #0, #3
   2a154:	f367 00c5 	bfi	r0, r7, #3, #3
   2a158:	f366 108f 	bfi	r0, r6, #6, #10
   2a15c:	4622      	mov	r2, r4
   2a15e:	4952      	ldr	r1, [pc, #328]	; (2a2a8 <download_client_callback+0x1c4>)
   2a160:	f01d fbd0 	bl	47904 <log_string_sync>
				return err;
   2a164:	e7da      	b.n	2a11c <download_client_callback+0x38>
			err = dfu_target_offset_get(&offset);
   2a166:	a801      	add	r0, sp, #4
   2a168:	f000 ff0c 	bl	2af84 <dfu_target_offset_get>
			LOG_INF("Offset: 0x%x", offset);
   2a16c:	2403      	movs	r4, #3
   2a16e:	f04f 0000 	mov.w	r0, #0
   2a172:	f364 0002 	bfi	r0, r4, #0, #3
   2a176:	f36f 00c5 	bfc	r0, #3, #3
   2a17a:	f366 108f 	bfi	r0, r6, #6, #10
   2a17e:	9a01      	ldr	r2, [sp, #4]
   2a180:	494a      	ldr	r1, [pc, #296]	; (2a2ac <download_client_callback+0x1c8>)
   2a182:	f01d fbbf 	bl	47904 <log_string_sync>
			if (offset != 0) {
   2a186:	9b01      	ldr	r3, [sp, #4]
   2a188:	b19b      	cbz	r3, 2a1b2 <download_client_callback+0xce>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a18a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a18e:	4948      	ldr	r1, [pc, #288]	; (2a2b0 <download_client_callback+0x1cc>)
   2a190:	4848      	ldr	r0, [pc, #288]	; (2a2b4 <download_client_callback+0x1d0>)
   2a192:	f015 f9c9 	bl	3f528 <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   2a196:	f04f 0000 	mov.w	r0, #0
   2a19a:	f364 0002 	bfi	r0, r4, #0, #3
   2a19e:	f36f 00c5 	bfc	r0, #3, #3
   2a1a2:	f366 108f 	bfi	r0, r6, #6, #10
   2a1a6:	4944      	ldr	r1, [pc, #272]	; (2a2b8 <download_client_callback+0x1d4>)
   2a1a8:	f01d fbac 	bl	47904 <log_string_sync>
				return -1;
   2a1ac:	f04f 34ff 	mov.w	r4, #4294967295
   2a1b0:	e7b4      	b.n	2a11c <download_client_callback+0x38>
		err = dfu_target_write(event->fragment.buf,
   2a1b2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2a1b6:	f000 feef 	bl	2af98 <dfu_target_write>
		if (err != 0) {
   2a1ba:	4604      	mov	r4, r0
   2a1bc:	2800      	cmp	r0, #0
   2a1be:	d0ad      	beq.n	2a11c <download_client_callback+0x38>
			LOG_ERR("dfu_target_write error %d", err);
   2a1c0:	2501      	movs	r5, #1
   2a1c2:	f04f 0000 	mov.w	r0, #0
   2a1c6:	4a37      	ldr	r2, [pc, #220]	; (2a2a4 <download_client_callback+0x1c0>)
   2a1c8:	4b35      	ldr	r3, [pc, #212]	; (2a2a0 <download_client_callback+0x1bc>)
   2a1ca:	f365 0002 	bfi	r0, r5, #0, #3
   2a1ce:	1a9b      	subs	r3, r3, r2
   2a1d0:	08db      	lsrs	r3, r3, #3
   2a1d2:	f36f 00c5 	bfc	r0, #3, #3
   2a1d6:	f363 108f 	bfi	r0, r3, #6, #10
   2a1da:	4622      	mov	r2, r4
   2a1dc:	4937      	ldr	r1, [pc, #220]	; (2a2bc <download_client_callback+0x1d8>)
   2a1de:	f01d fb91 	bl	47904 <log_string_sync>
			err = download_client_disconnect(&dlc);
   2a1e2:	482d      	ldr	r0, [pc, #180]	; (2a298 <download_client_callback+0x1b4>)
   2a1e4:	f7ff fcaa 	bl	29b3c <download_client_disconnect>
   2a1e8:	4604      	mov	r4, r0
   2a1ea:	e793      	b.n	2a114 <download_client_callback+0x30>
		err = dfu_target_done(true);
   2a1ec:	2001      	movs	r0, #1
   2a1ee:	f000 fedf 	bl	2afb0 <dfu_target_done>
   2a1f2:	4d2a      	ldr	r5, [pc, #168]	; (2a29c <download_client_callback+0x1b8>)
		if (err != 0) {
   2a1f4:	4604      	mov	r4, r0
   2a1f6:	b190      	cbz	r0, 2a21e <download_client_callback+0x13a>
			LOG_ERR("dfu_target_done error: %d", err);
   2a1f8:	2601      	movs	r6, #1
   2a1fa:	f04f 0000 	mov.w	r0, #0
   2a1fe:	4a29      	ldr	r2, [pc, #164]	; (2a2a4 <download_client_callback+0x1c0>)
   2a200:	4b27      	ldr	r3, [pc, #156]	; (2a2a0 <download_client_callback+0x1bc>)
   2a202:	f366 0002 	bfi	r0, r6, #0, #3
   2a206:	1a9b      	subs	r3, r3, r2
   2a208:	08db      	lsrs	r3, r3, #3
   2a20a:	f36f 00c5 	bfc	r0, #3, #3
   2a20e:	f363 108f 	bfi	r0, r3, #6, #10
   2a212:	4622      	mov	r2, r4
   2a214:	492a      	ldr	r1, [pc, #168]	; (2a2c0 <download_client_callback+0x1dc>)
   2a216:	f01d fb75 	bl	47904 <log_string_sync>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   2a21a:	682b      	ldr	r3, [r5, #0]
   2a21c:	e77c      	b.n	2a118 <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   2a21e:	481e      	ldr	r0, [pc, #120]	; (2a298 <download_client_callback+0x1b4>)
   2a220:	f7ff fc8c 	bl	29b3c <download_client_disconnect>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   2a224:	682b      	ldr	r3, [r5, #0]
		if (err != 0) {
   2a226:	4604      	mov	r4, r0
   2a228:	2800      	cmp	r0, #0
   2a22a:	f47f af75 	bne.w	2a118 <download_client_callback+0x34>
		callback(FOTA_DOWNLOAD_EVT_FINISHED);
   2a22e:	4798      	blx	r3
		first_fragment = true;
   2a230:	2201      	movs	r2, #1
   2a232:	4b18      	ldr	r3, [pc, #96]	; (2a294 <download_client_callback+0x1b0>)
   2a234:	701a      	strb	r2, [r3, #0]
		break;
   2a236:	e771      	b.n	2a11c <download_client_callback+0x38>
		download_client_disconnect(&dlc);
   2a238:	4817      	ldr	r0, [pc, #92]	; (2a298 <download_client_callback+0x1b4>)
   2a23a:	f7ff fc7f 	bl	29b3c <download_client_disconnect>
		LOG_ERR("Download client error");
   2a23e:	f04f 0000 	mov.w	r0, #0
   2a242:	4b18      	ldr	r3, [pc, #96]	; (2a2a4 <download_client_callback+0x1c0>)
   2a244:	4c16      	ldr	r4, [pc, #88]	; (2a2a0 <download_client_callback+0x1bc>)
   2a246:	f366 0002 	bfi	r0, r6, #0, #3
   2a24a:	1ae4      	subs	r4, r4, r3
   2a24c:	f36f 00c5 	bfc	r0, #3, #3
   2a250:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a254:	f364 108f 	bfi	r0, r4, #6, #10
   2a258:	491a      	ldr	r1, [pc, #104]	; (2a2c4 <download_client_callback+0x1e0>)
   2a25a:	f01d fb53 	bl	47904 <log_string_sync>
		err = dfu_target_done(false);
   2a25e:	2000      	movs	r0, #0
   2a260:	f000 fea6 	bl	2afb0 <dfu_target_done>
		if (err != 0) {
   2a264:	b150      	cbz	r0, 2a27c <download_client_callback+0x198>
			LOG_ERR("Unable to deinitialze resources used "
   2a266:	f04f 0000 	mov.w	r0, #0
   2a26a:	f366 0002 	bfi	r0, r6, #0, #3
   2a26e:	f36f 00c5 	bfc	r0, #3, #3
   2a272:	f364 108f 	bfi	r0, r4, #6, #10
   2a276:	4914      	ldr	r1, [pc, #80]	; (2a2c8 <download_client_callback+0x1e4>)
   2a278:	f01d fb44 	bl	47904 <log_string_sync>
		first_fragment = true;
   2a27c:	2001      	movs	r0, #1
   2a27e:	4b05      	ldr	r3, [pc, #20]	; (2a294 <download_client_callback+0x1b0>)
   2a280:	7018      	strb	r0, [r3, #0]
		callback(FOTA_DOWNLOAD_EVT_ERROR);
   2a282:	4b06      	ldr	r3, [pc, #24]	; (2a29c <download_client_callback+0x1b8>)
   2a284:	681b      	ldr	r3, [r3, #0]
   2a286:	4798      	blx	r3
		return event->error;
   2a288:	686c      	ldr	r4, [r5, #4]
   2a28a:	e747      	b.n	2a11c <download_client_callback+0x38>
		return -EINVAL;
   2a28c:	f06f 0415 	mvn.w	r4, #21
   2a290:	e744      	b.n	2a11c <download_client_callback+0x38>
   2a292:	bf00      	nop
   2a294:	2003231f 	.word	0x2003231f
   2a298:	20020eb0 	.word	0x20020eb0
   2a29c:	2002493c 	.word	0x2002493c
   2a2a0:	0004a710 	.word	0x0004a710
   2a2a4:	0004a688 	.word	0x0004a688
   2a2a8:	0005084b 	.word	0x0005084b
   2a2ac:	00050864 	.word	0x00050864
   2a2b0:	20024940 	.word	0x20024940
   2a2b4:	2002a5c0 	.word	0x2002a5c0
   2a2b8:	00050871 	.word	0x00050871
   2a2bc:	00050896 	.word	0x00050896
   2a2c0:	000508b0 	.word	0x000508b0
   2a2c4:	000508ca 	.word	0x000508ca
   2a2c8:	000508e0 	.word	0x000508e0

0002a2cc <fota_download_start>:

int fota_download_start(char *host, char *file)
{
   2a2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -1;

	struct download_client_cfg config = {
   2a2ce:	f04f 33ff 	mov.w	r3, #4294967295
   2a2d2:	2200      	movs	r2, #0
{
   2a2d4:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   2a2d6:	e9cd 3200 	strd	r3, r2, [sp]
		.sec_tag = -1, /* HTTP */
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2a2da:	4601      	mov	r1, r0
   2a2dc:	b1b0      	cbz	r0, 2a30c <fota_download_start+0x40>
   2a2de:	b1ad      	cbz	r5, 2a30c <fota_download_start+0x40>
   2a2e0:	4b0c      	ldr	r3, [pc, #48]	; (2a314 <fota_download_start+0x48>)
   2a2e2:	681b      	ldr	r3, [r3, #0]
   2a2e4:	b193      	cbz	r3, 2a30c <fota_download_start+0x40>
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2a2e6:	466a      	mov	r2, sp
   2a2e8:	480b      	ldr	r0, [pc, #44]	; (2a318 <fota_download_start+0x4c>)
   2a2ea:	f7ff fa65 	bl	297b8 <download_client_connect>
	if (err != 0) {
   2a2ee:	4604      	mov	r4, r0
   2a2f0:	b948      	cbnz	r0, 2a306 <fota_download_start+0x3a>
		return err;
	}


	err = download_client_start(&dlc, file, 0);
   2a2f2:	4602      	mov	r2, r0
   2a2f4:	4629      	mov	r1, r5
   2a2f6:	4808      	ldr	r0, [pc, #32]	; (2a318 <fota_download_start+0x4c>)
   2a2f8:	f7ff fe76 	bl	29fe8 <download_client_start>
	if (err != 0) {
   2a2fc:	4604      	mov	r4, r0
   2a2fe:	b110      	cbz	r0, 2a306 <fota_download_start+0x3a>
		download_client_disconnect(&dlc);
   2a300:	4805      	ldr	r0, [pc, #20]	; (2a318 <fota_download_start+0x4c>)
   2a302:	f7ff fc1b 	bl	29b3c <download_client_disconnect>
		return err;
	}

	return 0;
}
   2a306:	4620      	mov	r0, r4
   2a308:	b003      	add	sp, #12
   2a30a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2a30c:	f06f 0415 	mvn.w	r4, #21
   2a310:	e7f9      	b.n	2a306 <fota_download_start+0x3a>
   2a312:	bf00      	nop
   2a314:	2002493c 	.word	0x2002493c
   2a318:	20020eb0 	.word	0x20020eb0

0002a31c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   2a31c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   2a31e:	b158      	cbz	r0, 2a338 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   2a320:	4b07      	ldr	r3, [pc, #28]	; (2a340 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2a322:	4908      	ldr	r1, [pc, #32]	; (2a344 <fota_download_init+0x28>)
	callback = client_callback;
   2a324:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2a326:	4808      	ldr	r0, [pc, #32]	; (2a348 <fota_download_init+0x2c>)
   2a328:	f01f ff62 	bl	4a1f0 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   2a32c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   2a330:	4906      	ldr	r1, [pc, #24]	; (2a34c <fota_download_init+0x30>)
   2a332:	4807      	ldr	r0, [pc, #28]	; (2a350 <fota_download_init+0x34>)
   2a334:	f7ff ba16 	b.w	29764 <download_client_init>
}
   2a338:	f06f 0015 	mvn.w	r0, #21
   2a33c:	bd08      	pop	{r3, pc}
   2a33e:	bf00      	nop
   2a340:	2002493c 	.word	0x2002493c
   2a344:	0002a06d 	.word	0x0002a06d
   2a348:	20024940 	.word	0x20024940
   2a34c:	0002a0e5 	.word	0x0002a0e5
   2a350:	20020eb0 	.word	0x20020eb0

0002a354 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   2a354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2a358:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2a35a:	4688      	mov	r8, r1
   2a35c:	4615      	mov	r5, r2
   2a35e:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   2a360:	4681      	mov	r9, r0
   2a362:	2800      	cmp	r0, #0
   2a364:	d060      	beq.n	2a428 <construct_topic+0xd4>
   2a366:	2900      	cmp	r1, #0
   2a368:	d05e      	beq.n	2a428 <construct_topic+0xd4>
   2a36a:	6853      	ldr	r3, [r2, #4]
   2a36c:	2b00      	cmp	r3, #0
   2a36e:	d05b      	beq.n	2a428 <construct_topic+0xd4>
	    conf->name == NULL || conf->suffix == NULL ||
   2a370:	6894      	ldr	r4, [r2, #8]
   2a372:	2c00      	cmp	r4, #0
   2a374:	d058      	beq.n	2a428 <construct_topic+0xd4>
   2a376:	2f00      	cmp	r7, #0
   2a378:	d056      	beq.n	2a428 <construct_topic+0xd4>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2a37a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2a37e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2a448 <construct_topic+0xf4>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2a382:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2a384:	2b00      	cmp	r3, #0
   2a386:	bf18      	it	ne
   2a388:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2a38a:	f017 fa4b 	bl	41824 <strlen>
   2a38e:	4a28      	ldr	r2, [pc, #160]	; (2a430 <construct_topic+0xdc>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2a390:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2a392:	2800      	cmp	r0, #0
   2a394:	bf14      	ite	ne
   2a396:	4610      	movne	r0, r2
   2a398:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2a39a:	9403      	str	r4, [sp, #12]
   2a39c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   2a3a0:	f8cd 8000 	str.w	r8, [sp]
   2a3a4:	464b      	mov	r3, r9
   2a3a6:	4a23      	ldr	r2, [pc, #140]	; (2a434 <construct_topic+0xe0>)
   2a3a8:	2195      	movs	r1, #149	; 0x95
   2a3aa:	4638      	mov	r0, r7
   2a3ac:	f017 f86a 	bl	41484 <snprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2a3b0:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2a3b2:	4604      	mov	r4, r0
   2a3b4:	f04f 0301 	mov.w	r3, #1
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2a3b8:	dd19      	ble.n	2a3ee <construct_topic+0x9a>
		LOG_ERR("Unable to fit formated string into to allocate "
   2a3ba:	f04f 0400 	mov.w	r4, #0
   2a3be:	4a1e      	ldr	r2, [pc, #120]	; (2a438 <construct_topic+0xe4>)
   2a3c0:	f363 0402 	bfi	r4, r3, #0, #3
   2a3c4:	4b1d      	ldr	r3, [pc, #116]	; (2a43c <construct_topic+0xe8>)
   2a3c6:	f36f 04c5 	bfc	r4, #3, #3
   2a3ca:	1a9b      	subs	r3, r3, r2
   2a3cc:	08db      	lsrs	r3, r3, #3
   2a3ce:	6868      	ldr	r0, [r5, #4]
   2a3d0:	f363 148f 	bfi	r4, r3, #6, #10
   2a3d4:	f01d faa8 	bl	47928 <log_strdup>
   2a3d8:	4919      	ldr	r1, [pc, #100]	; (2a440 <construct_topic+0xec>)
   2a3da:	4602      	mov	r2, r0
   2a3dc:	4620      	mov	r0, r4
   2a3de:	f01d fa91 	bl	47904 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   2a3e2:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   2a3e6:	4620      	mov	r0, r4
   2a3e8:	b004      	add	sp, #16
   2a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   2a3ee:	2800      	cmp	r0, #0
   2a3f0:	da15      	bge.n	2a41e <construct_topic+0xca>
		LOG_ERR("Output error for %s was encountered with return value "
   2a3f2:	f04f 0600 	mov.w	r6, #0
   2a3f6:	4a10      	ldr	r2, [pc, #64]	; (2a438 <construct_topic+0xe4>)
   2a3f8:	f363 0602 	bfi	r6, r3, #0, #3
   2a3fc:	4b0f      	ldr	r3, [pc, #60]	; (2a43c <construct_topic+0xe8>)
   2a3fe:	6868      	ldr	r0, [r5, #4]
   2a400:	1a9b      	subs	r3, r3, r2
   2a402:	08db      	lsrs	r3, r3, #3
   2a404:	f36f 06c5 	bfc	r6, #3, #3
   2a408:	f363 168f 	bfi	r6, r3, #6, #10
   2a40c:	f01d fa8c 	bl	47928 <log_strdup>
   2a410:	4623      	mov	r3, r4
   2a412:	4602      	mov	r2, r0
   2a414:	490b      	ldr	r1, [pc, #44]	; (2a444 <construct_topic+0xf0>)
   2a416:	4630      	mov	r0, r6
   2a418:	f01d fa74 	bl	47904 <log_string_sync>
		return ret;
   2a41c:	e7e3      	b.n	2a3e6 <construct_topic+0x92>
	topic->topic.utf8 = out_buf;
   2a41e:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2a422:	7233      	strb	r3, [r6, #8]
	return 0;
   2a424:	2400      	movs	r4, #0
   2a426:	e7de      	b.n	2a3e6 <construct_topic+0x92>
		return -EINVAL;
   2a428:	f06f 0415 	mvn.w	r4, #21
   2a42c:	e7db      	b.n	2a3e6 <construct_topic+0x92>
   2a42e:	bf00      	nop
   2a430:	00050609 	.word	0x00050609
   2a434:	00050a0d 	.word	0x00050a0d
   2a438:	0004a688 	.word	0x0004a688
   2a43c:	0004a6b8 	.word	0x0004a6b8
   2a440:	00050a2a 	.word	0x00050a2a
   2a444:	00050a67 	.word	0x00050a67
   2a448:	0005294c 	.word	0x0005294c

0002a44c <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   2a44c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a44e:	b089      	sub	sp, #36	; 0x24
   2a450:	468c      	mov	ip, r1
   2a452:	4617      	mov	r7, r2
   2a454:	4619      	mov	r1, r3
   2a456:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
	if (client == NULL) {
   2a45a:	4604      	mov	r4, r0
   2a45c:	2800      	cmp	r0, #0
   2a45e:	d042      	beq.n	2a4e6 <reg_topic+0x9a>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   2a460:	2300      	movs	r3, #0
   2a462:	ae05      	add	r6, sp, #20
   2a464:	9301      	str	r3, [sp, #4]
   2a466:	9600      	str	r6, [sp, #0]
   2a468:	4663      	mov	r3, ip
   2a46a:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2a46c:	f7ff ff72 	bl	2a354 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   2a470:	2301      	movs	r3, #1
   2a472:	f8ad 3010 	strh.w	r3, [sp, #16]
   2a476:	683b      	ldr	r3, [r7, #0]
   2a478:	9603      	str	r6, [sp, #12]
   2a47a:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   2a47e:	b9d8      	cbnz	r0, 2a4b8 <reg_topic+0x6c>
   2a480:	4a1a      	ldr	r2, [pc, #104]	; (2a4ec <reg_topic+0xa0>)
   2a482:	4b1b      	ldr	r3, [pc, #108]	; (2a4f0 <reg_topic+0xa4>)
   2a484:	2103      	movs	r1, #3
   2a486:	1a9b      	subs	r3, r3, r2
   2a488:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2a48c:	9a05      	ldr	r2, [sp, #20]
		return err;
	}

	if (subscribe) {
   2a48e:	b1ad      	cbz	r5, 2a4bc <reg_topic+0x70>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   2a490:	f04f 0500 	mov.w	r5, #0
   2a494:	f361 0502 	bfi	r5, r1, #0, #3
   2a498:	f360 05c5 	bfi	r5, r0, #3, #3
   2a49c:	4610      	mov	r0, r2
   2a49e:	f363 158f 	bfi	r5, r3, #6, #10
   2a4a2:	f01d fa41 	bl	47928 <log_strdup>
   2a4a6:	4913      	ldr	r1, [pc, #76]	; (2a4f4 <reg_topic+0xa8>)
   2a4a8:	4602      	mov	r2, r0
   2a4aa:	4628      	mov	r0, r5
   2a4ac:	f01d fa2a 	bl	47904 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   2a4b0:	a903      	add	r1, sp, #12
   2a4b2:	4620      	mov	r0, r4
   2a4b4:	f01e f84f 	bl	48556 <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   2a4b8:	b009      	add	sp, #36	; 0x24
   2a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   2a4bc:	f04f 0500 	mov.w	r5, #0
   2a4c0:	f361 0502 	bfi	r5, r1, #0, #3
   2a4c4:	f360 05c5 	bfi	r5, r0, #3, #3
   2a4c8:	4610      	mov	r0, r2
   2a4ca:	f363 158f 	bfi	r5, r3, #6, #10
   2a4ce:	f01d fa2b 	bl	47928 <log_strdup>
   2a4d2:	4909      	ldr	r1, [pc, #36]	; (2a4f8 <reg_topic+0xac>)
   2a4d4:	4602      	mov	r2, r0
   2a4d6:	4628      	mov	r0, r5
   2a4d8:	f01d fa14 	bl	47904 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   2a4dc:	a903      	add	r1, sp, #12
   2a4de:	4620      	mov	r0, r4
   2a4e0:	f01e f860 	bl	485a4 <mqtt_unsubscribe>
   2a4e4:	e7e8      	b.n	2a4b8 <reg_topic+0x6c>
		return -EINVAL;
   2a4e6:	f06f 0015 	mvn.w	r0, #21
   2a4ea:	e7e5      	b.n	2a4b8 <reg_topic+0x6c>
   2a4ec:	0004a688 	.word	0x0004a688
   2a4f0:	0004a6b8 	.word	0x0004a6b8
   2a4f4:	00050ac5 	.word	0x00050ac5
   2a4f8:	00050ad3 	.word	0x00050ad3

0002a4fc <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   2a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a500:	4698      	mov	r8, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2a502:	2301      	movs	r3, #1
{
   2a504:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2a506:	af03      	add	r7, sp, #12
   2a508:	9301      	str	r3, [sp, #4]
   2a50a:	9700      	str	r7, [sp, #0]
{
   2a50c:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2a50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2a510:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2a512:	f7ff ff1f 	bl	2a354 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   2a516:	4604      	mov	r4, r0
   2a518:	2800      	cmp	r0, #0
   2a51a:	d140      	bne.n	2a59e <publish+0xa2>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   2a51c:	f04f 0a03 	mov.w	sl, #3
   2a520:	f04f 0900 	mov.w	r9, #0
   2a524:	4b20      	ldr	r3, [pc, #128]	; (2a5a8 <publish+0xac>)
   2a526:	f36a 0902 	bfi	r9, sl, #0, #3
   2a52a:	4d20      	ldr	r5, [pc, #128]	; (2a5ac <publish+0xb0>)
   2a52c:	f360 09c5 	bfi	r9, r0, #3, #3
   2a530:	9803      	ldr	r0, [sp, #12]
   2a532:	1aed      	subs	r5, r5, r3
   2a534:	f01d f9f8 	bl	47928 <log_strdup>
   2a538:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2a53c:	f365 198f 	bfi	r9, r5, #6, #10
   2a540:	4602      	mov	r2, r0
   2a542:	4648      	mov	r0, r9
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   2a544:	f04f 0900 	mov.w	r9, #0
	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   2a548:	4919      	ldr	r1, [pc, #100]	; (2a5b0 <publish+0xb4>)
   2a54a:	f01d f9db 	bl	47904 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   2a54e:	4640      	mov	r0, r8
   2a550:	f01d f9ea 	bl	47928 <log_strdup>
   2a554:	f36a 0902 	bfi	r9, sl, #0, #3
   2a558:	f364 09c5 	bfi	r9, r4, #3, #3
   2a55c:	f365 198f 	bfi	r9, r5, #6, #10
   2a560:	4602      	mov	r2, r0
   2a562:	4914      	ldr	r1, [pc, #80]	; (2a5b4 <publish+0xb8>)
   2a564:	4648      	mov	r0, r9
   2a566:	f01d f9cd 	bl	47904 <log_string_sync>

	struct mqtt_publish_param param = {
   2a56a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2a56e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a570:	ad06      	add	r5, sp, #24
   2a572:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   2a576:	930a      	str	r3, [sp, #40]	; 0x28
   2a578:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   2a57c:	f7f6 fcb2 	bl	20ee4 <sys_rand32_get>
	struct mqtt_publish_param param = {
   2a580:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   2a584:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   2a588:	f364 0300 	bfi	r3, r4, #0, #1
   2a58c:	f364 0341 	bfi	r3, r4, #1, #1
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   2a590:	4629      	mov	r1, r5
   2a592:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   2a594:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   2a598:	f01d ff61 	bl	4845e <mqtt_publish>
   2a59c:	4604      	mov	r4, r0
}
   2a59e:	4620      	mov	r0, r4
   2a5a0:	b00c      	add	sp, #48	; 0x30
   2a5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a5a6:	bf00      	nop
   2a5a8:	0004a688 	.word	0x0004a688
   2a5ac:	0004a6b8 	.word	0x0004a6b8
   2a5b0:	00050aa0 	.word	0x00050aa0
   2a5b4:	00050ab2 	.word	0x00050ab2

0002a5b8 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2a5b8:	2301      	movs	r3, #1
{
   2a5ba:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2a5bc:	4a03      	ldr	r2, [pc, #12]	; (2a5cc <aws_jobs_subscribe_topic_notify_next+0x14>)
   2a5be:	9300      	str	r3, [sp, #0]
   2a5c0:	4b03      	ldr	r3, [pc, #12]	; (2a5d0 <aws_jobs_subscribe_topic_notify_next+0x18>)
   2a5c2:	f7ff ff43 	bl	2a44c <reg_topic>
}
   2a5c6:	b003      	add	sp, #12
   2a5c8:	f85d fb04 	ldr.w	pc, [sp], #4
   2a5cc:	0004b1cc 	.word	0x0004b1cc
   2a5d0:	0005294c 	.word	0x0005294c

0002a5d4 <aws_jobs_unsubscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   2a5d4:	2300      	movs	r3, #0
{
   2a5d6:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   2a5d8:	4a03      	ldr	r2, [pc, #12]	; (2a5e8 <aws_jobs_unsubscribe_topic_notify_next+0x14>)
   2a5da:	9300      	str	r3, [sp, #0]
   2a5dc:	4b03      	ldr	r3, [pc, #12]	; (2a5ec <aws_jobs_unsubscribe_topic_notify_next+0x18>)
   2a5de:	f7ff ff35 	bl	2a44c <reg_topic>
}
   2a5e2:	b003      	add	sp, #12
   2a5e4:	f85d fb04 	ldr.w	pc, [sp], #4
   2a5e8:	0004b1cc 	.word	0x0004b1cc
   2a5ec:	0005294c 	.word	0x0005294c

0002a5f0 <aws_jobs_subscribe_topic_get>:
{
   2a5f0:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2a5f2:	2301      	movs	r3, #1
{
   2a5f4:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2a5f6:	9300      	str	r3, [sp, #0]
   2a5f8:	4a03      	ldr	r2, [pc, #12]	; (2a608 <aws_jobs_subscribe_topic_get+0x18>)
   2a5fa:	460b      	mov	r3, r1
   2a5fc:	4621      	mov	r1, r4
   2a5fe:	f7ff ff25 	bl	2a44c <reg_topic>
}
   2a602:	b002      	add	sp, #8
   2a604:	bd10      	pop	{r4, pc}
   2a606:	bf00      	nop
   2a608:	0004b1c0 	.word	0x0004b1c0

0002a60c <aws_jobs_subscribe_topic_update>:
{
   2a60c:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2a60e:	2301      	movs	r3, #1
{
   2a610:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2a612:	9300      	str	r3, [sp, #0]
   2a614:	4a03      	ldr	r2, [pc, #12]	; (2a624 <aws_jobs_subscribe_topic_update+0x18>)
   2a616:	460b      	mov	r3, r1
   2a618:	4621      	mov	r1, r4
   2a61a:	f7ff ff17 	bl	2a44c <reg_topic>
}
   2a61e:	b002      	add	sp, #8
   2a620:	bd10      	pop	{r4, pc}
   2a622:	bf00      	nop
   2a624:	0004b1d8 	.word	0x0004b1d8

0002a628 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   2a628:	b570      	push	{r4, r5, r6, lr}
   2a62a:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   2a62e:	460e      	mov	r6, r1
   2a630:	4605      	mov	r5, r0
   2a632:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
	/* The rest of the parameters are checked later */
	if (status_details == NULL || client_token == NULL) {
   2a636:	2b00      	cmp	r3, #0
   2a638:	d04a      	beq.n	2a6d0 <aws_jobs_update_job_execution+0xa8>
   2a63a:	2900      	cmp	r1, #0
   2a63c:	d048      	beq.n	2a6d0 <aws_jobs_update_job_execution+0xa8>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2a63e:	9102      	str	r1, [sp, #8]
   2a640:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   2a644:	a804      	add	r0, sp, #16
   2a646:	e9cd 3100 	strd	r3, r1, [sp]
   2a64a:	4b23      	ldr	r3, [pc, #140]	; (2a6d8 <aws_jobs_update_job_execution+0xb0>)
   2a64c:	f240 5146 	movw	r1, #1350	; 0x546
   2a650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2a654:	4a21      	ldr	r2, [pc, #132]	; (2a6dc <aws_jobs_update_job_execution+0xb4>)
   2a656:	f016 ff15 	bl	41484 <snprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   status_details, expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2a65a:	f240 5345 	movw	r3, #1349	; 0x545
   2a65e:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2a660:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2a662:	dd15      	ble.n	2a690 <aws_jobs_update_job_execution+0x68>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   2a664:	2301      	movs	r3, #1
   2a666:	f04f 0000 	mov.w	r0, #0
   2a66a:	4a1d      	ldr	r2, [pc, #116]	; (2a6e0 <aws_jobs_update_job_execution+0xb8>)
   2a66c:	f363 0002 	bfi	r0, r3, #0, #3
   2a670:	4b1c      	ldr	r3, [pc, #112]	; (2a6e4 <aws_jobs_update_job_execution+0xbc>)
   2a672:	f36f 00c5 	bfc	r0, #3, #3
   2a676:	1a9b      	subs	r3, r3, r2
   2a678:	08db      	lsrs	r3, r3, #3
   2a67a:	f363 108f 	bfi	r0, r3, #6, #10
   2a67e:	491a      	ldr	r1, [pc, #104]	; (2a6e8 <aws_jobs_update_job_execution+0xc0>)
   2a680:	f01d f940 	bl	47904 <log_string_sync>
		return -ENOMEM;
   2a684:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   2a688:	4620      	mov	r0, r4
   2a68a:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   2a68e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   2a690:	2800      	cmp	r0, #0
   2a692:	da11      	bge.n	2a6b8 <aws_jobs_update_job_execution+0x90>
		LOG_ERR("Error when creating payload %d", ret);
   2a694:	2301      	movs	r3, #1
   2a696:	f04f 0000 	mov.w	r0, #0
   2a69a:	4a11      	ldr	r2, [pc, #68]	; (2a6e0 <aws_jobs_update_job_execution+0xb8>)
   2a69c:	f363 0002 	bfi	r0, r3, #0, #3
   2a6a0:	4b10      	ldr	r3, [pc, #64]	; (2a6e4 <aws_jobs_update_job_execution+0xbc>)
   2a6a2:	f36f 00c5 	bfc	r0, #3, #3
   2a6a6:	1a9b      	subs	r3, r3, r2
   2a6a8:	08db      	lsrs	r3, r3, #3
   2a6aa:	f363 108f 	bfi	r0, r3, #6, #10
   2a6ae:	4622      	mov	r2, r4
   2a6b0:	490e      	ldr	r1, [pc, #56]	; (2a6ec <aws_jobs_update_job_execution+0xc4>)
   2a6b2:	f01d f927 	bl	47904 <log_string_sync>
		return ret;
   2a6b6:	e7e7      	b.n	2a688 <aws_jobs_update_job_execution+0x60>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   2a6b8:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   2a6bc:	4a0c      	ldr	r2, [pc, #48]	; (2a6f0 <aws_jobs_update_job_execution+0xc8>)
   2a6be:	e9cd 0300 	strd	r0, r3, [sp]
   2a6c2:	4631      	mov	r1, r6
   2a6c4:	ab04      	add	r3, sp, #16
   2a6c6:	4628      	mov	r0, r5
   2a6c8:	f7ff ff18 	bl	2a4fc <publish>
   2a6cc:	4604      	mov	r4, r0
   2a6ce:	e7db      	b.n	2a688 <aws_jobs_update_job_execution+0x60>
		return -EINVAL;
   2a6d0:	f06f 0415 	mvn.w	r4, #21
   2a6d4:	e7d8      	b.n	2a688 <aws_jobs_update_job_execution+0x60>
   2a6d6:	bf00      	nop
   2a6d8:	0004b1e4 	.word	0x0004b1e4
   2a6dc:	0005096c 	.word	0x0005096c
   2a6e0:	0004a688 	.word	0x0004a688
   2a6e4:	0004a6b8 	.word	0x0004a6b8
   2a6e8:	000509bc 	.word	0x000509bc
   2a6ec:	000509ee 	.word	0x000509ee
   2a6f0:	0004b1d8 	.word	0x0004b1d8

0002a6f4 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   2a6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a6f6:	4c08      	ldr	r4, [pc, #32]	; (2a718 <aws_jobs_get_job_execution+0x24>)
{
   2a6f8:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a6fa:	4620      	mov	r0, r4
{
   2a6fc:	4617      	mov	r7, r2
   2a6fe:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a700:	f017 f890 	bl	41824 <strlen>
   2a704:	4623      	mov	r3, r4
   2a706:	e9cd 0700 	strd	r0, r7, [sp]
   2a70a:	4a04      	ldr	r2, [pc, #16]	; (2a71c <aws_jobs_get_job_execution+0x28>)
   2a70c:	4631      	mov	r1, r6
   2a70e:	4628      	mov	r0, r5
   2a710:	f7ff fef4 	bl	2a4fc <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   2a714:	b003      	add	sp, #12
   2a716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a718:	00050958 	.word	0x00050958
   2a71c:	0004b1c0 	.word	0x0004b1c0

0002a720 <update_job_execution.constprop.0>:

#define AWS_FOTA_STATUS_DETAILS_TEMPLATE "{\"nextState\":\"%s\"}"
#define STATUS_DETAILS_MAX_LEN  (sizeof("{\"nextState\":\"\"}") \
				+ (sizeof("download_firmware") + 2))

static int update_job_execution(struct mqtt_client *const client,
   2a720:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a722:	461f      	mov	r7, r3
				enum fota_status next_state,
				int version_number,
				const char *client_token)
{
	char status_details[STATUS_DETAILS_MAX_LEN + 1];
	int ret = snprintf(status_details,
   2a724:	4b25      	ldr	r3, [pc, #148]	; (2a7bc <update_job_execution.constprop.0+0x9c>)
static int update_job_execution(struct mqtt_client *const client,
   2a726:	b08f      	sub	sp, #60	; 0x3c
	int ret = snprintf(status_details,
   2a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
static int update_job_execution(struct mqtt_client *const client,
   2a72c:	4605      	mov	r5, r0
   2a72e:	460e      	mov	r6, r1
	int ret = snprintf(status_details,
   2a730:	4a23      	ldr	r2, [pc, #140]	; (2a7c0 <update_job_execution.constprop.0+0xa0>)
   2a732:	2126      	movs	r1, #38	; 0x26
   2a734:	a804      	add	r0, sp, #16
   2a736:	f016 fea5 	bl	41484 <snprintf>
			   sizeof(status_details),
			   AWS_FOTA_STATUS_DETAILS_TEMPLATE,
			   fota_status_strings[next_state]);
	__ASSERT(ret >= 0, "snprintf returned error %d\n", ret);
   2a73a:	1e04      	subs	r4, r0, #0
   2a73c:	da0d      	bge.n	2a75a <update_job_execution.constprop.0+0x3a>
   2a73e:	2361      	movs	r3, #97	; 0x61
   2a740:	4a20      	ldr	r2, [pc, #128]	; (2a7c4 <update_job_execution.constprop.0+0xa4>)
   2a742:	4921      	ldr	r1, [pc, #132]	; (2a7c8 <update_job_execution.constprop.0+0xa8>)
   2a744:	4821      	ldr	r0, [pc, #132]	; (2a7cc <update_job_execution.constprop.0+0xac>)
   2a746:	f01d f8c0 	bl	478ca <printk>
   2a74a:	4621      	mov	r1, r4
   2a74c:	4820      	ldr	r0, [pc, #128]	; (2a7d0 <update_job_execution.constprop.0+0xb0>)
   2a74e:	f01d f8bc 	bl	478ca <printk>
   2a752:	2161      	movs	r1, #97	; 0x61
   2a754:	481b      	ldr	r0, [pc, #108]	; (2a7c4 <update_job_execution.constprop.0+0xa4>)
   2a756:	f01d f8c5 	bl	478e4 <assert_post_action>
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   2a75a:	2c24      	cmp	r4, #36	; 0x24
   2a75c:	d90d      	bls.n	2a77a <update_job_execution.constprop.0+0x5a>
   2a75e:	2363      	movs	r3, #99	; 0x63
   2a760:	4a18      	ldr	r2, [pc, #96]	; (2a7c4 <update_job_execution.constprop.0+0xa4>)
   2a762:	491c      	ldr	r1, [pc, #112]	; (2a7d4 <update_job_execution.constprop.0+0xb4>)
   2a764:	4819      	ldr	r0, [pc, #100]	; (2a7cc <update_job_execution.constprop.0+0xac>)
   2a766:	f01d f8b0 	bl	478ca <printk>
   2a76a:	1c61      	adds	r1, r4, #1
   2a76c:	481a      	ldr	r0, [pc, #104]	; (2a7d8 <update_job_execution.constprop.0+0xb8>)
   2a76e:	f01d f8ac 	bl	478ca <printk>
   2a772:	2163      	movs	r1, #99	; 0x63
   2a774:	4813      	ldr	r0, [pc, #76]	; (2a7c4 <update_job_execution.constprop.0+0xa4>)
   2a776:	f01d f8b5 	bl	478e4 <assert_post_action>
		"Not enough space for status, need %d bytes\n", ret+1);

	ret =  aws_jobs_update_job_execution(client, job_id, state,
   2a77a:	4b18      	ldr	r3, [pc, #96]	; (2a7dc <update_job_execution.constprop.0+0xbc>)
   2a77c:	4632      	mov	r2, r6
   2a77e:	9302      	str	r3, [sp, #8]
   2a780:	4b17      	ldr	r3, [pc, #92]	; (2a7e0 <update_job_execution.constprop.0+0xc0>)
   2a782:	4918      	ldr	r1, [pc, #96]	; (2a7e4 <update_job_execution.constprop.0+0xc4>)
   2a784:	e9cd 7300 	strd	r7, r3, [sp]
   2a788:	4628      	mov	r0, r5
   2a78a:	ab04      	add	r3, sp, #16
   2a78c:	f7ff ff4c 	bl	2a628 <aws_jobs_update_job_execution>
					     status_details, version_number,
					     client_token, update_topic);

	if (ret < 0) {
   2a790:	1e04      	subs	r4, r0, #0
   2a792:	da10      	bge.n	2a7b6 <update_job_execution.constprop.0+0x96>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   2a794:	2301      	movs	r3, #1
   2a796:	f04f 0000 	mov.w	r0, #0
   2a79a:	4a13      	ldr	r2, [pc, #76]	; (2a7e8 <update_job_execution.constprop.0+0xc8>)
   2a79c:	f363 0002 	bfi	r0, r3, #0, #3
   2a7a0:	4b12      	ldr	r3, [pc, #72]	; (2a7ec <update_job_execution.constprop.0+0xcc>)
   2a7a2:	f36f 00c5 	bfc	r0, #3, #3
   2a7a6:	1a9b      	subs	r3, r3, r2
   2a7a8:	08db      	lsrs	r3, r3, #3
   2a7aa:	f363 108f 	bfi	r0, r3, #6, #10
   2a7ae:	4622      	mov	r2, r4
   2a7b0:	490f      	ldr	r1, [pc, #60]	; (2a7f0 <update_job_execution.constprop.0+0xd0>)
   2a7b2:	f01d f8a7 	bl	47904 <log_string_sync>
	}

	return ret;
}
   2a7b6:	4620      	mov	r0, r4
   2a7b8:	b00f      	add	sp, #60	; 0x3c
   2a7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a7bc:	0004b204 	.word	0x0004b204
   2a7c0:	00050e88 	.word	0x00050e88
   2a7c4:	00050e9b 	.word	0x00050e9b
   2a7c8:	00050ed3 	.word	0x00050ed3
   2a7cc:	0004ccf0 	.word	0x0004ccf0
   2a7d0:	00050edc 	.word	0x00050edc
   2a7d4:	00050efa 	.word	0x00050efa
   2a7d8:	00050f45 	.word	0x00050f45
   2a7dc:	2002c0e0 	.word	0x2002c0e0
   2a7e0:	0005294c 	.word	0x0005294c
   2a7e4:	2002bac4 	.word	0x2002bac4
   2a7e8:	0004a688 	.word	0x0004a688
   2a7ec:	0004a6b0 	.word	0x0004a6b0
   2a7f0:	00050f73 	.word	0x00050f73

0002a7f4 <http_fota_handler>:
	}
	return 0;
}

static void http_fota_handler(enum fota_download_evt_id evt)
{
   2a7f4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   2a7f6:	4d26      	ldr	r5, [pc, #152]	; (2a890 <http_fota_handler+0x9c>)
{
   2a7f8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(c != NULL);
   2a7fa:	682b      	ldr	r3, [r5, #0]
   2a7fc:	b95b      	cbnz	r3, 2a816 <http_fota_handler+0x22>
   2a7fe:	4925      	ldr	r1, [pc, #148]	; (2a894 <http_fota_handler+0xa0>)
   2a800:	4825      	ldr	r0, [pc, #148]	; (2a898 <http_fota_handler+0xa4>)
   2a802:	f240 1355 	movw	r3, #341	; 0x155
   2a806:	4a25      	ldr	r2, [pc, #148]	; (2a89c <http_fota_handler+0xa8>)
   2a808:	f01d f85f 	bl	478ca <printk>
   2a80c:	f240 1155 	movw	r1, #341	; 0x155
   2a810:	4822      	ldr	r0, [pc, #136]	; (2a89c <http_fota_handler+0xa8>)
   2a812:	f01d f867 	bl	478e4 <assert_post_action>

	int err = 0;

	switch (evt) {
   2a816:	b114      	cbz	r4, 2a81e <http_fota_handler+0x2a>
   2a818:	2c01      	cmp	r4, #1
   2a81a:	d021      	beq.n	2a860 <http_fota_handler+0x6c>
				     fota_state, doc_version_number, "");
		callback(AWS_FOTA_EVT_ERROR);
		break;
	}

}
   2a81c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("FOTA download completed evt recived");
   2a81e:	2303      	movs	r3, #3
   2a820:	f04f 0000 	mov.w	r0, #0
   2a824:	4a1e      	ldr	r2, [pc, #120]	; (2a8a0 <http_fota_handler+0xac>)
   2a826:	f363 0002 	bfi	r0, r3, #0, #3
   2a82a:	4b1e      	ldr	r3, [pc, #120]	; (2a8a4 <http_fota_handler+0xb0>)
   2a82c:	f364 00c5 	bfi	r0, r4, #3, #3
   2a830:	1a9b      	subs	r3, r3, r2
   2a832:	08db      	lsrs	r3, r3, #3
   2a834:	f363 108f 	bfi	r0, r3, #6, #10
   2a838:	491b      	ldr	r1, [pc, #108]	; (2a8a8 <http_fota_handler+0xb4>)
   2a83a:	f01d f863 	bl	47904 <log_string_sync>
		fota_state = APPLY_UPDATE;
   2a83e:	2202      	movs	r2, #2
   2a840:	4b1a      	ldr	r3, [pc, #104]	; (2a8ac <http_fota_handler+0xb8>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2a842:	2101      	movs	r1, #1
		fota_state = APPLY_UPDATE;
   2a844:	701a      	strb	r2, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2a846:	4b1a      	ldr	r3, [pc, #104]	; (2a8b0 <http_fota_handler+0xbc>)
   2a848:	6828      	ldr	r0, [r5, #0]
   2a84a:	681b      	ldr	r3, [r3, #0]
   2a84c:	f7ff ff68 	bl	2a720 <update_job_execution.constprop.0>
		if (err != 0) {
   2a850:	2800      	cmp	r0, #0
   2a852:	d0e3      	beq.n	2a81c <http_fota_handler+0x28>
}
   2a854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			callback(AWS_FOTA_EVT_ERROR);
   2a858:	4b16      	ldr	r3, [pc, #88]	; (2a8b4 <http_fota_handler+0xc0>)
   2a85a:	2001      	movs	r0, #1
   2a85c:	681b      	ldr	r3, [r3, #0]
   2a85e:	4718      	bx	r3
		LOG_ERR("FOTA download failed, report back");
   2a860:	f04f 0000 	mov.w	r0, #0
   2a864:	4a0e      	ldr	r2, [pc, #56]	; (2a8a0 <http_fota_handler+0xac>)
   2a866:	4b0f      	ldr	r3, [pc, #60]	; (2a8a4 <http_fota_handler+0xb0>)
   2a868:	f364 0002 	bfi	r0, r4, #0, #3
   2a86c:	1a9b      	subs	r3, r3, r2
   2a86e:	08db      	lsrs	r3, r3, #3
   2a870:	f36f 00c5 	bfc	r0, #3, #3
   2a874:	f363 108f 	bfi	r0, r3, #6, #10
   2a878:	490f      	ldr	r1, [pc, #60]	; (2a8b8 <http_fota_handler+0xc4>)
   2a87a:	f01d f843 	bl	47904 <log_string_sync>
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   2a87e:	4b0c      	ldr	r3, [pc, #48]	; (2a8b0 <http_fota_handler+0xbc>)
   2a880:	4a0a      	ldr	r2, [pc, #40]	; (2a8ac <http_fota_handler+0xb8>)
   2a882:	681b      	ldr	r3, [r3, #0]
   2a884:	7812      	ldrb	r2, [r2, #0]
   2a886:	2103      	movs	r1, #3
   2a888:	6828      	ldr	r0, [r5, #0]
   2a88a:	f7ff ff49 	bl	2a720 <update_job_execution.constprop.0>
   2a88e:	e7e1      	b.n	2a854 <http_fota_handler+0x60>
   2a890:	20024960 	.word	0x20024960
   2a894:	00050e04 	.word	0x00050e04
   2a898:	0004ccf0 	.word	0x0004ccf0
   2a89c:	00050e9b 	.word	0x00050e9b
   2a8a0:	0004a688 	.word	0x0004a688
   2a8a4:	0004a6b0 	.word	0x0004a6b0
   2a8a8:	00050e15 	.word	0x00050e15
   2a8ac:	2002b92f 	.word	0x2002b92f
   2a8b0:	20031b84 	.word	0x20031b84
   2a8b4:	20024964 	.word	0x20024964
   2a8b8:	00050e39 	.word	0x00050e39

0002a8bc <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   2a8bc:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2a8c0:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   2a8c2:	4c0d      	ldr	r4, [pc, #52]	; (2a8f8 <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   2a8c4:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2a8c6:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   2a8c8:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   2a8cc:	d80d      	bhi.n	2a8ea <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   2a8ce:	42a5      	cmp	r5, r4
   2a8d0:	d801      	bhi.n	2a8d6 <get_published_payload.constprop.1+0x1a>
	return 0;
   2a8d2:	2000      	movs	r0, #0
}
   2a8d4:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf, end - buf);
   2a8d6:	1b2a      	subs	r2, r5, r4
   2a8d8:	4621      	mov	r1, r4
   2a8da:	4630      	mov	r0, r6
   2a8dc:	f01d fefe 	bl	486dc <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   2a8e0:	2800      	cmp	r0, #0
   2a8e2:	dbf7      	blt.n	2a8d4 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   2a8e4:	d004      	beq.n	2a8f0 <get_published_payload.constprop.1+0x34>
		buf += ret;
   2a8e6:	4404      	add	r4, r0
   2a8e8:	e7f1      	b.n	2a8ce <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   2a8ea:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2a8ee:	e7f1      	b.n	2a8d4 <get_published_payload.constprop.1+0x18>
			return -EIO;
   2a8f0:	f06f 0004 	mvn.w	r0, #4
   2a8f4:	e7ee      	b.n	2a8d4 <get_published_payload.constprop.1+0x18>
   2a8f6:	bf00      	nop
   2a8f8:	2002bb9a 	.word	0x2002bb9a

0002a8fc <aws_fota_mqtt_evt_handler>:
{
   2a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (evt->type) {
   2a900:	780b      	ldrb	r3, [r1, #0]
{
   2a902:	b087      	sub	sp, #28
   2a904:	4605      	mov	r5, r0
   2a906:	460e      	mov	r6, r1
	switch (evt->type) {
   2a908:	2b07      	cmp	r3, #7
   2a90a:	f200 81f4 	bhi.w	2acf6 <aws_fota_mqtt_evt_handler+0x3fa>
   2a90e:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a912:	0008      	.short	0x0008
   2a914:	003c01f2 	.word	0x003c01f2
   2a918:	01f20201 	.word	0x01f20201
   2a91c:	01f201f2 	.word	0x01f201f2
   2a920:	0213      	.short	0x0213
		if (evt->result != 0) {
   2a922:	69cc      	ldr	r4, [r1, #28]
   2a924:	2c00      	cmp	r4, #0
   2a926:	f040 81e6 	bne.w	2acf6 <aws_fota_mqtt_evt_handler+0x3fa>
		err = aws_jobs_subscribe_topic_notify_next(client,
   2a92a:	49c6      	ldr	r1, [pc, #792]	; (2ac44 <aws_fota_mqtt_evt_handler+0x348>)
   2a92c:	f7ff fe44 	bl	2a5b8 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   2a930:	4607      	mov	r7, r0
   2a932:	b198      	cbz	r0, 2a95c <aws_fota_mqtt_evt_handler+0x60>
			LOG_ERR("Unable to subscribe to notify-next topic");
   2a934:	2301      	movs	r3, #1
   2a936:	f04f 0000 	mov.w	r0, #0
   2a93a:	4ac3      	ldr	r2, [pc, #780]	; (2ac48 <aws_fota_mqtt_evt_handler+0x34c>)
   2a93c:	f363 0002 	bfi	r0, r3, #0, #3
   2a940:	4bc2      	ldr	r3, [pc, #776]	; (2ac4c <aws_fota_mqtt_evt_handler+0x350>)
   2a942:	f364 00c5 	bfi	r0, r4, #3, #3
   2a946:	1a9b      	subs	r3, r3, r2
   2a948:	08db      	lsrs	r3, r3, #3
   2a94a:	49c1      	ldr	r1, [pc, #772]	; (2ac50 <aws_fota_mqtt_evt_handler+0x354>)
   2a94c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2a950:	f01c ffd8 	bl	47904 <log_string_sync>
}
   2a954:	4638      	mov	r0, r7
   2a956:	b007      	add	sp, #28
   2a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   2a95c:	4abd      	ldr	r2, [pc, #756]	; (2ac54 <aws_fota_mqtt_evt_handler+0x358>)
   2a95e:	49be      	ldr	r1, [pc, #760]	; (2ac58 <aws_fota_mqtt_evt_handler+0x35c>)
   2a960:	4628      	mov	r0, r5
   2a962:	f7ff fe45 	bl	2a5f0 <aws_jobs_subscribe_topic_get>
		if (err) {
   2a966:	4607      	mov	r7, r0
   2a968:	2800      	cmp	r0, #0
   2a96a:	d0f3      	beq.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2a96c:	2301      	movs	r3, #1
   2a96e:	f04f 0000 	mov.w	r0, #0
   2a972:	4ab5      	ldr	r2, [pc, #724]	; (2ac48 <aws_fota_mqtt_evt_handler+0x34c>)
   2a974:	f363 0002 	bfi	r0, r3, #0, #3
   2a978:	4bb4      	ldr	r3, [pc, #720]	; (2ac4c <aws_fota_mqtt_evt_handler+0x350>)
   2a97a:	f364 00c5 	bfi	r0, r4, #3, #3
   2a97e:	1a9b      	subs	r3, r3, r2
   2a980:	08db      	lsrs	r3, r3, #3
   2a982:	f363 108f 	bfi	r0, r3, #6, #10
   2a986:	49b5      	ldr	r1, [pc, #724]	; (2ac5c <aws_fota_mqtt_evt_handler+0x360>)
   2a988:	e7e2      	b.n	2a950 <aws_fota_mqtt_evt_handler+0x54>
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a98a:	f04f 0803 	mov.w	r8, #3
		err = aws_fota_on_publish_evt(client,
   2a98e:	e9d1 7a01 	ldrd	r7, sl, [r1, #4]
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a992:	f04f 0b00 	mov.w	fp, #0
   2a996:	4bac      	ldr	r3, [pc, #688]	; (2ac48 <aws_fota_mqtt_evt_handler+0x34c>)
   2a998:	4cac      	ldr	r4, [pc, #688]	; (2ac4c <aws_fota_mqtt_evt_handler+0x350>)
   2a99a:	4638      	mov	r0, r7
   2a99c:	1ae4      	subs	r4, r4, r3
		err = aws_fota_on_publish_evt(client,
   2a99e:	f8d1 9014 	ldr.w	r9, [r1, #20]
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a9a2:	f01c ffc1 	bl	47928 <log_strdup>
   2a9a6:	f368 0b02 	bfi	fp, r8, #0, #3
   2a9aa:	f36f 0bc5 	bfc	fp, #3, #3
   2a9ae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a9b2:	f364 1b8f 	bfi	fp, r4, #6, #10
   2a9b6:	4602      	mov	r2, r0
   2a9b8:	49a9      	ldr	r1, [pc, #676]	; (2ac60 <aws_fota_mqtt_evt_handler+0x364>)
   2a9ba:	4658      	mov	r0, fp
   2a9bc:	f01c ffa2 	bl	47904 <log_string_sync>
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   2a9c0:	4ba8      	ldr	r3, [pc, #672]	; (2ac64 <aws_fota_mqtt_evt_handler+0x368>)
   2a9c2:	4652      	mov	r2, sl
   2a9c4:	4639      	mov	r1, r7
   2a9c6:	48a3      	ldr	r0, [pc, #652]	; (2ac54 <aws_fota_mqtt_evt_handler+0x358>)
   2a9c8:	f01f fa09 	bl	49dde <aws_jobs_cmp>
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   2a9cc:	4ba5      	ldr	r3, [pc, #660]	; (2ac64 <aws_fota_mqtt_evt_handler+0x368>)
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   2a9ce:	4683      	mov	fp, r0
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   2a9d0:	4652      	mov	r2, sl
   2a9d2:	4639      	mov	r1, r7
   2a9d4:	489b      	ldr	r0, [pc, #620]	; (2ac44 <aws_fota_mqtt_evt_handler+0x348>)
   2a9d6:	f01f fa02 	bl	49dde <aws_jobs_cmp>
	if (is_notify_next_topic || is_get_next_topic) {
   2a9da:	b910      	cbnz	r0, 2a9e2 <aws_fota_mqtt_evt_handler+0xe6>
   2a9dc:	f1bb 0f00 	cmp.w	fp, #0
   2a9e0:	d06c      	beq.n	2aabc <aws_fota_mqtt_evt_handler+0x1c0>
		err = get_published_payload(client, payload_buf, payload_len);
   2a9e2:	4649      	mov	r1, r9
   2a9e4:	4628      	mov	r0, r5
   2a9e6:	f7ff ff69 	bl	2a8bc <get_published_payload.constprop.1>
		if (err) {
   2a9ea:	4607      	mov	r7, r0
   2a9ec:	b158      	cbz	r0, 2aa06 <aws_fota_mqtt_evt_handler+0x10a>
			LOG_ERR("Error when getting the payload: %d", err);
   2a9ee:	f04f 0000 	mov.w	r0, #0
   2a9f2:	2301      	movs	r3, #1
   2a9f4:	f363 0002 	bfi	r0, r3, #0, #3
   2a9f8:	f36f 00c5 	bfc	r0, #3, #3
			LOG_ERR("Error when getting the payload: %d", err);
   2a9fc:	f364 108f 	bfi	r0, r4, #6, #10
   2aa00:	463a      	mov	r2, r7
   2aa02:	4999      	ldr	r1, [pc, #612]	; (2ac68 <aws_fota_mqtt_evt_handler+0x36c>)
   2aa04:	e041      	b.n	2aa8a <aws_fota_mqtt_evt_handler+0x18e>
		err = aws_fota_parse_notify_next_document(payload_buf,
   2aa06:	4b99      	ldr	r3, [pc, #612]	; (2ac6c <aws_fota_mqtt_evt_handler+0x370>)
   2aa08:	4a99      	ldr	r2, [pc, #612]	; (2ac70 <aws_fota_mqtt_evt_handler+0x374>)
   2aa0a:	9300      	str	r3, [sp, #0]
   2aa0c:	4649      	mov	r1, r9
   2aa0e:	4b99      	ldr	r3, [pc, #612]	; (2ac74 <aws_fota_mqtt_evt_handler+0x378>)
   2aa10:	4899      	ldr	r0, [pc, #612]	; (2ac78 <aws_fota_mqtt_evt_handler+0x37c>)
   2aa12:	f000 fa2f 	bl	2ae74 <aws_fota_parse_notify_next_document>
		if (err < 0) {
   2aa16:	1e07      	subs	r7, r0, #0
   2aa18:	da0d      	bge.n	2aa36 <aws_fota_mqtt_evt_handler+0x13a>
			LOG_ERR("Error when parsing the json: %d", err);
   2aa1a:	2301      	movs	r3, #1
   2aa1c:	f04f 0000 	mov.w	r0, #0
   2aa20:	f363 0002 	bfi	r0, r3, #0, #3
   2aa24:	f36f 00c5 	bfc	r0, #3, #3
   2aa28:	f364 108f 	bfi	r0, r4, #6, #10
   2aa2c:	463a      	mov	r2, r7
   2aa2e:	4993      	ldr	r1, [pc, #588]	; (2ac7c <aws_fota_mqtt_evt_handler+0x380>)
   2aa30:	f01c ff68 	bl	47904 <log_string_sync>
   2aa34:	e78e      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
		} else  if (err == 1) {
   2aa36:	2f01      	cmp	r7, #1
   2aa38:	d116      	bne.n	2aa68 <aws_fota_mqtt_evt_handler+0x16c>
			LOG_INF("Got only one field: %s",
   2aa3a:	2303      	movs	r3, #3
   2aa3c:	f04f 0500 	mov.w	r5, #0
   2aa40:	488d      	ldr	r0, [pc, #564]	; (2ac78 <aws_fota_mqtt_evt_handler+0x37c>)
   2aa42:	f363 0502 	bfi	r5, r3, #0, #3
   2aa46:	f01c ff6f 	bl	47928 <log_strdup>
   2aa4a:	f36f 05c5 	bfc	r5, #3, #3
   2aa4e:	f364 158f 	bfi	r5, r4, #6, #10
   2aa52:	4602      	mov	r2, r0
   2aa54:	498a      	ldr	r1, [pc, #552]	; (2ac80 <aws_fota_mqtt_evt_handler+0x384>)
   2aa56:	4628      	mov	r0, r5
   2aa58:	f01c ff54 	bl	47904 <log_string_sync>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2aa5c:	7b33      	ldrb	r3, [r6, #12]
   2aa5e:	2b01      	cmp	r3, #1
   2aa60:	f000 814b 	beq.w	2acfa <aws_fota_mqtt_evt_handler+0x3fe>
		return 1;
   2aa64:	2701      	movs	r7, #1
   2aa66:	e775      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
		err = aws_jobs_unsubscribe_topic_notify_next(client,
   2aa68:	4976      	ldr	r1, [pc, #472]	; (2ac44 <aws_fota_mqtt_evt_handler+0x348>)
   2aa6a:	4628      	mov	r0, r5
   2aa6c:	f7ff fdb2 	bl	2a5d4 <aws_jobs_unsubscribe_topic_notify_next>
		if (err) {
   2aa70:	4607      	mov	r7, r0
   2aa72:	b168      	cbz	r0, 2aa90 <aws_fota_mqtt_evt_handler+0x194>
			LOG_ERR("Error when unsubscribing notify_next_topic: "
   2aa74:	f04f 0000 	mov.w	r0, #0
   2aa78:	2301      	movs	r3, #1
   2aa7a:	463a      	mov	r2, r7
   2aa7c:	f363 0002 	bfi	r0, r3, #0, #3
   2aa80:	f36f 00c5 	bfc	r0, #3, #3
   2aa84:	497f      	ldr	r1, [pc, #508]	; (2ac84 <aws_fota_mqtt_evt_handler+0x388>)
   2aa86:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Error when getting the payload: %d", err);
   2aa8a:	f01c ff3b 	bl	47904 <log_string_sync>
   2aa8e:	e08d      	b.n	2abac <aws_fota_mqtt_evt_handler+0x2b0>
		err = aws_jobs_subscribe_topic_update(client, job_id,
   2aa90:	4a7d      	ldr	r2, [pc, #500]	; (2ac88 <aws_fota_mqtt_evt_handler+0x38c>)
   2aa92:	4977      	ldr	r1, [pc, #476]	; (2ac70 <aws_fota_mqtt_evt_handler+0x374>)
   2aa94:	4628      	mov	r0, r5
   2aa96:	f7ff fdb9 	bl	2a60c <aws_jobs_subscribe_topic_update>
   2aa9a:	2301      	movs	r3, #1
		if (err) {
   2aa9c:	4607      	mov	r7, r0
   2aa9e:	b150      	cbz	r0, 2aab6 <aws_fota_mqtt_evt_handler+0x1ba>
			LOG_ERR("Error when subscribing job_id_update: "
   2aaa0:	f04f 0000 	mov.w	r0, #0
   2aaa4:	f363 0002 	bfi	r0, r3, #0, #3
   2aaa8:	f36f 00c5 	bfc	r0, #3, #3
   2aaac:	f364 108f 	bfi	r0, r4, #6, #10
   2aab0:	463a      	mov	r2, r7
   2aab2:	4976      	ldr	r1, [pc, #472]	; (2ac8c <aws_fota_mqtt_evt_handler+0x390>)
   2aab4:	e7e9      	b.n	2aa8a <aws_fota_mqtt_evt_handler+0x18e>
		fota_state = DOWNLOAD_FIRMWARE;
   2aab6:	4a76      	ldr	r2, [pc, #472]	; (2ac90 <aws_fota_mqtt_evt_handler+0x394>)
   2aab8:	7013      	strb	r3, [r2, #0]
   2aaba:	e7cf      	b.n	2aa5c <aws_fota_mqtt_evt_handler+0x160>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "accepted")) {
   2aabc:	4b75      	ldr	r3, [pc, #468]	; (2ac94 <aws_fota_mqtt_evt_handler+0x398>)
   2aabe:	4652      	mov	r2, sl
   2aac0:	4639      	mov	r1, r7
   2aac2:	4871      	ldr	r0, [pc, #452]	; (2ac88 <aws_fota_mqtt_evt_handler+0x38c>)
   2aac4:	f01f f98b 	bl	49dde <aws_jobs_cmp>
   2aac8:	9002      	str	r0, [sp, #8]
   2aaca:	2800      	cmp	r0, #0
   2aacc:	f000 8094 	beq.w	2abf8 <aws_fota_mqtt_evt_handler+0x2fc>
		LOG_DBG("Job document update was accepted");
   2aad0:	2304      	movs	r3, #4
   2aad2:	f04f 0000 	mov.w	r0, #0
   2aad6:	f363 0002 	bfi	r0, r3, #0, #3
   2aada:	f36b 00c5 	bfi	r0, fp, #3, #3
   2aade:	f364 108f 	bfi	r0, r4, #6, #10
   2aae2:	4a6d      	ldr	r2, [pc, #436]	; (2ac98 <aws_fota_mqtt_evt_handler+0x39c>)
   2aae4:	496d      	ldr	r1, [pc, #436]	; (2ac9c <aws_fota_mqtt_evt_handler+0x3a0>)
   2aae6:	f01c ff0d 	bl	47904 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   2aaea:	4649      	mov	r1, r9
   2aaec:	4628      	mov	r0, r5
   2aaee:	f7ff fee5 	bl	2a8bc <get_published_payload.constprop.1>
		if (err) {
   2aaf2:	4607      	mov	r7, r0
   2aaf4:	2800      	cmp	r0, #0
   2aaf6:	d159      	bne.n	2abac <aws_fota_mqtt_evt_handler+0x2b0>
		doc_version_number++;
   2aaf8:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 2acc4 <aws_fota_mqtt_evt_handler+0x3c8>
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2aafc:	4a64      	ldr	r2, [pc, #400]	; (2ac90 <aws_fota_mqtt_evt_handler+0x394>)
		doc_version_number++;
   2aafe:	f8da 3000 	ldr.w	r3, [sl]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2ab02:	f892 9000 	ldrb.w	r9, [r2]
		doc_version_number++;
   2ab06:	3301      	adds	r3, #1
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2ab08:	f1b9 0f01 	cmp.w	r9, #1
		doc_version_number++;
   2ab0c:	f8ca 3000 	str.w	r3, [sl]
   2ab10:	4b63      	ldr	r3, [pc, #396]	; (2aca0 <aws_fota_mqtt_evt_handler+0x3a4>)
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2ab12:	d128      	bne.n	2ab66 <aws_fota_mqtt_evt_handler+0x26a>
			LOG_INF("Start downloading firmware from %s%s",
   2ab14:	f04f 0500 	mov.w	r5, #0
   2ab18:	f368 0502 	bfi	r5, r8, #0, #3
   2ab1c:	f360 05c5 	bfi	r5, r0, #3, #3
   2ab20:	4854      	ldr	r0, [pc, #336]	; (2ac74 <aws_fota_mqtt_evt_handler+0x378>)
			execution_state = AWS_JOBS_IN_PROGRESS;
   2ab22:	f883 9000 	strb.w	r9, [r3]
			LOG_INF("Start downloading firmware from %s%s",
   2ab26:	f01c feff 	bl	47928 <log_strdup>
   2ab2a:	4607      	mov	r7, r0
   2ab2c:	484f      	ldr	r0, [pc, #316]	; (2ac6c <aws_fota_mqtt_evt_handler+0x370>)
   2ab2e:	f01c fefb 	bl	47928 <log_strdup>
   2ab32:	f364 158f 	bfi	r5, r4, #6, #10
   2ab36:	4603      	mov	r3, r0
   2ab38:	463a      	mov	r2, r7
   2ab3a:	495a      	ldr	r1, [pc, #360]	; (2aca4 <aws_fota_mqtt_evt_handler+0x3a8>)
   2ab3c:	4628      	mov	r0, r5
   2ab3e:	f01c fee1 	bl	47904 <log_string_sync>
			err = fota_download_start(hostname, file_path);
   2ab42:	494a      	ldr	r1, [pc, #296]	; (2ac6c <aws_fota_mqtt_evt_handler+0x370>)
   2ab44:	484b      	ldr	r0, [pc, #300]	; (2ac74 <aws_fota_mqtt_evt_handler+0x378>)
   2ab46:	f7ff fbc1 	bl	2a2cc <fota_download_start>
			if (err) {
   2ab4a:	4607      	mov	r7, r0
   2ab4c:	2800      	cmp	r0, #0
   2ab4e:	d085      	beq.n	2aa5c <aws_fota_mqtt_evt_handler+0x160>
				LOG_ERR("Error when trying to start firmware"
   2ab50:	f04f 0000 	mov.w	r0, #0
   2ab54:	f369 0002 	bfi	r0, r9, #0, #3
   2ab58:	f36b 00c5 	bfi	r0, fp, #3, #3
   2ab5c:	f364 108f 	bfi	r0, r4, #6, #10
   2ab60:	463a      	mov	r2, r7
   2ab62:	4951      	ldr	r1, [pc, #324]	; (2aca8 <aws_fota_mqtt_evt_handler+0x3ac>)
   2ab64:	e791      	b.n	2aa8a <aws_fota_mqtt_evt_handler+0x18e>
		} else if (execution_state == AWS_JOBS_IN_PROGRESS &&
   2ab66:	7819      	ldrb	r1, [r3, #0]
   2ab68:	2901      	cmp	r1, #1
   2ab6a:	d123      	bne.n	2abb4 <aws_fota_mqtt_evt_handler+0x2b8>
   2ab6c:	f1b9 0f02 	cmp.w	r9, #2
   2ab70:	f47f af74 	bne.w	2aa5c <aws_fota_mqtt_evt_handler+0x160>
			LOG_INF("Firmware download completed");
   2ab74:	f04f 0000 	mov.w	r0, #0
   2ab78:	f368 0002 	bfi	r0, r8, #0, #3
   2ab7c:	f367 00c5 	bfi	r0, r7, #3, #3
   2ab80:	f364 108f 	bfi	r0, r4, #6, #10
   2ab84:	4949      	ldr	r1, [pc, #292]	; (2acac <aws_fota_mqtt_evt_handler+0x3b0>)
   2ab86:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2ab8a:	f01c febb 	bl	47904 <log_string_sync>
			execution_state = AWS_JOBS_SUCCEEDED;
   2ab8e:	9b03      	ldr	r3, [sp, #12]
			err = update_job_execution(client, job_id,
   2ab90:	9a02      	ldr	r2, [sp, #8]
			execution_state = AWS_JOBS_SUCCEEDED;
   2ab92:	f883 9000 	strb.w	r9, [r3]
			err = update_job_execution(client, job_id,
   2ab96:	7812      	ldrb	r2, [r2, #0]
   2ab98:	f8da 3000 	ldr.w	r3, [sl]
   2ab9c:	4649      	mov	r1, r9
   2ab9e:	4628      	mov	r0, r5
   2aba0:	f7ff fdbe 	bl	2a720 <update_job_execution.constprop.0>
			if (err) {
   2aba4:	4607      	mov	r7, r0
   2aba6:	2800      	cmp	r0, #0
   2aba8:	f43f af58 	beq.w	2aa5c <aws_fota_mqtt_evt_handler+0x160>
		if (err < 1) {
   2abac:	2f00      	cmp	r7, #0
   2abae:	f73f af55 	bgt.w	2aa5c <aws_fota_mqtt_evt_handler+0x160>
   2abb2:	e6cf      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
		} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   2abb4:	2902      	cmp	r1, #2
   2abb6:	f47f af51 	bne.w	2aa5c <aws_fota_mqtt_evt_handler+0x160>
   2abba:	f1b9 0f02 	cmp.w	r9, #2
   2abbe:	f47f af4d 	bne.w	2aa5c <aws_fota_mqtt_evt_handler+0x160>
			LOG_INF("Job document updated with SUCCEDED");
   2abc2:	f04f 0000 	mov.w	r0, #0
   2abc6:	f368 0002 	bfi	r0, r8, #0, #3
   2abca:	f367 00c5 	bfi	r0, r7, #3, #3
   2abce:	f364 108f 	bfi	r0, r4, #6, #10
   2abd2:	4937      	ldr	r1, [pc, #220]	; (2acb0 <aws_fota_mqtt_evt_handler+0x3b4>)
   2abd4:	f01c fe96 	bl	47904 <log_string_sync>
			LOG_INF("Ready to reboot");
   2abd8:	f04f 0000 	mov.w	r0, #0
   2abdc:	f368 0002 	bfi	r0, r8, #0, #3
   2abe0:	f367 00c5 	bfi	r0, r7, #3, #3
   2abe4:	f364 108f 	bfi	r0, r4, #6, #10
   2abe8:	4932      	ldr	r1, [pc, #200]	; (2acb4 <aws_fota_mqtt_evt_handler+0x3b8>)
   2abea:	f01c fe8b 	bl	47904 <log_string_sync>
			callback(AWS_FOTA_EVT_DONE);
   2abee:	4b32      	ldr	r3, [pc, #200]	; (2acb8 <aws_fota_mqtt_evt_handler+0x3bc>)
   2abf0:	4638      	mov	r0, r7
   2abf2:	681b      	ldr	r3, [r3, #0]
   2abf4:	4798      	blx	r3
   2abf6:	e731      	b.n	2aa5c <aws_fota_mqtt_evt_handler+0x160>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "rejected")) {
   2abf8:	4b30      	ldr	r3, [pc, #192]	; (2acbc <aws_fota_mqtt_evt_handler+0x3c0>)
   2abfa:	4652      	mov	r2, sl
   2abfc:	4639      	mov	r1, r7
   2abfe:	4822      	ldr	r0, [pc, #136]	; (2ac88 <aws_fota_mqtt_evt_handler+0x38c>)
   2ac00:	f01f f8ed 	bl	49dde <aws_jobs_cmp>
   2ac04:	2800      	cmp	r0, #0
   2ac06:	d066      	beq.n	2acd6 <aws_fota_mqtt_evt_handler+0x3da>
		LOG_ERR("Job document update was rejected");
   2ac08:	f04f 0801 	mov.w	r8, #1
   2ac0c:	f04f 0000 	mov.w	r0, #0
   2ac10:	9b02      	ldr	r3, [sp, #8]
   2ac12:	f368 0002 	bfi	r0, r8, #0, #3
   2ac16:	f363 00c5 	bfi	r0, r3, #3, #3
   2ac1a:	f364 108f 	bfi	r0, r4, #6, #10
   2ac1e:	4928      	ldr	r1, [pc, #160]	; (2acc0 <aws_fota_mqtt_evt_handler+0x3c4>)
   2ac20:	f01c fe70 	bl	47904 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   2ac24:	4649      	mov	r1, r9
   2ac26:	4628      	mov	r0, r5
   2ac28:	f7ff fe48 	bl	2a8bc <get_published_payload.constprop.1>
		if (err) {
   2ac2c:	4607      	mov	r7, r0
   2ac2e:	2800      	cmp	r0, #0
   2ac30:	d04a      	beq.n	2acc8 <aws_fota_mqtt_evt_handler+0x3cc>
			LOG_ERR("Error when getting the payload: %d", err);
   2ac32:	f04f 0000 	mov.w	r0, #0
   2ac36:	9b02      	ldr	r3, [sp, #8]
   2ac38:	f368 0002 	bfi	r0, r8, #0, #3
   2ac3c:	f363 00c5 	bfi	r0, r3, #3, #3
   2ac40:	e6dc      	b.n	2a9fc <aws_fota_mqtt_evt_handler+0x100>
   2ac42:	bf00      	nop
   2ac44:	2002bb05 	.word	0x2002bb05
   2ac48:	0004a688 	.word	0x0004a688
   2ac4c:	0004a6b0 	.word	0x0004a6b0
   2ac50:	00050b7e 	.word	0x00050b7e
   2ac54:	2002b930 	.word	0x2002b930
   2ac58:	00050ba7 	.word	0x00050ba7
   2ac5c:	00050bad 	.word	0x00050bad
   2ac60:	00050bd3 	.word	0x00050bd3
   2ac64:	0005294c 	.word	0x0005294c
   2ac68:	00050be6 	.word	0x00050be6
   2ac6c:	2002b830 	.word	0x2002b830
   2ac70:	2002bac4 	.word	0x2002bac4
   2ac74:	2002b9c5 	.word	0x2002b9c5
   2ac78:	2002bb9a 	.word	0x2002bb9a
   2ac7c:	00050c09 	.word	0x00050c09
   2ac80:	00050c29 	.word	0x00050c29
   2ac84:	00050c40 	.word	0x00050c40
   2ac88:	2002c0e0 	.word	0x2002c0e0
   2ac8c:	00050c6f 	.word	0x00050c6f
   2ac90:	2002b92f 	.word	0x2002b92f
   2ac94:	00050cb4 	.word	0x00050cb4
   2ac98:	00050b4a 	.word	0x00050b4a
   2ac9c:	00050c98 	.word	0x00050c98
   2aca0:	2002b82f 	.word	0x2002b82f
   2aca4:	00050cbd 	.word	0x00050cbd
   2aca8:	00050ce2 	.word	0x00050ce2
   2acac:	00050d12 	.word	0x00050d12
   2acb0:	00050d2e 	.word	0x00050d2e
   2acb4:	00050d51 	.word	0x00050d51
   2acb8:	20024964 	.word	0x20024964
   2acbc:	00050d79 	.word	0x00050d79
   2acc0:	00050d61 	.word	0x00050d61
   2acc4:	20031b84 	.word	0x20031b84
		callback(AWS_FOTA_EVT_ERROR);
   2acc8:	4b3d      	ldr	r3, [pc, #244]	; (2adc0 <aws_fota_mqtt_evt_handler+0x4c4>)
   2acca:	4640      	mov	r0, r8
   2accc:	681b      	ldr	r3, [r3, #0]
   2acce:	4798      	blx	r3
		return -EFAULT;
   2acd0:	f06f 070d 	mvn.w	r7, #13
   2acd4:	e63e      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
	LOG_INF("Recived an unhandled MQTT publish event on topic: %s",
   2acd6:	f04f 0500 	mov.w	r5, #0
   2acda:	f368 0502 	bfi	r5, r8, #0, #3
   2acde:	f360 05c5 	bfi	r5, r0, #3, #3
   2ace2:	4638      	mov	r0, r7
   2ace4:	f01c fe20 	bl	47928 <log_strdup>
   2ace8:	f364 158f 	bfi	r5, r4, #6, #10
   2acec:	4602      	mov	r2, r0
   2acee:	4628      	mov	r0, r5
   2acf0:	4934      	ldr	r1, [pc, #208]	; (2adc4 <aws_fota_mqtt_evt_handler+0x4c8>)
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2acf2:	f01c fe07 	bl	47904 <log_string_sync>
			return 0;
   2acf6:	2700      	movs	r7, #0
   2acf8:	e62c      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
			const struct mqtt_puback_param ack = {
   2acfa:	8b33      	ldrh	r3, [r6, #24]
   2acfc:	a906      	add	r1, sp, #24
   2acfe:	f821 3d04 	strh.w	r3, [r1, #-4]!
			err = mqtt_publish_qos1_ack(c, &ack);
   2ad02:	4b31      	ldr	r3, [pc, #196]	; (2adc8 <aws_fota_mqtt_evt_handler+0x4cc>)
   2ad04:	6818      	ldr	r0, [r3, #0]
   2ad06:	f01d fbd8 	bl	484ba <mqtt_publish_qos1_ack>
		return 1;
   2ad0a:	2800      	cmp	r0, #0
   2ad0c:	bf14      	ite	ne
   2ad0e:	4607      	movne	r7, r0
   2ad10:	2701      	moveq	r7, #1
   2ad12:	e61f      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
		if (evt->result != 0) {
   2ad14:	69ca      	ldr	r2, [r1, #28]
   2ad16:	2a00      	cmp	r2, #0
   2ad18:	d0ed      	beq.n	2acf6 <aws_fota_mqtt_evt_handler+0x3fa>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2ad1a:	2301      	movs	r3, #1
   2ad1c:	f04f 0000 	mov.w	r0, #0
   2ad20:	492a      	ldr	r1, [pc, #168]	; (2adcc <aws_fota_mqtt_evt_handler+0x4d0>)
   2ad22:	f363 0002 	bfi	r0, r3, #0, #3
   2ad26:	4b2a      	ldr	r3, [pc, #168]	; (2add0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2ad28:	f36f 00c5 	bfc	r0, #3, #3
   2ad2c:	1a5b      	subs	r3, r3, r1
   2ad2e:	08db      	lsrs	r3, r3, #3
   2ad30:	f363 108f 	bfi	r0, r3, #6, #10
   2ad34:	4927      	ldr	r1, [pc, #156]	; (2add4 <aws_fota_mqtt_evt_handler+0x4d8>)
   2ad36:	e7dc      	b.n	2acf2 <aws_fota_mqtt_evt_handler+0x3f6>
		if (evt->result != 0) {
   2ad38:	69cf      	ldr	r7, [r1, #28]
   2ad3a:	2f00      	cmp	r7, #0
   2ad3c:	d1db      	bne.n	2acf6 <aws_fota_mqtt_evt_handler+0x3fa>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   2ad3e:	888b      	ldrh	r3, [r1, #4]
   2ad40:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   2ad44:	d119      	bne.n	2ad7a <aws_fota_mqtt_evt_handler+0x47e>
			LOG_INF("subscribed to notify-next topic");
   2ad46:	2303      	movs	r3, #3
   2ad48:	f04f 0000 	mov.w	r0, #0
   2ad4c:	4a1f      	ldr	r2, [pc, #124]	; (2adcc <aws_fota_mqtt_evt_handler+0x4d0>)
   2ad4e:	f363 0002 	bfi	r0, r3, #0, #3
   2ad52:	4b1f      	ldr	r3, [pc, #124]	; (2add0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2ad54:	f367 00c5 	bfi	r0, r7, #3, #3
   2ad58:	1a9b      	subs	r3, r3, r2
   2ad5a:	08db      	lsrs	r3, r3, #3
   2ad5c:	f363 108f 	bfi	r0, r3, #6, #10
   2ad60:	491d      	ldr	r1, [pc, #116]	; (2add8 <aws_fota_mqtt_evt_handler+0x4dc>)
   2ad62:	f01c fdcf 	bl	47904 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   2ad66:	4a1d      	ldr	r2, [pc, #116]	; (2addc <aws_fota_mqtt_evt_handler+0x4e0>)
   2ad68:	491d      	ldr	r1, [pc, #116]	; (2ade0 <aws_fota_mqtt_evt_handler+0x4e4>)
   2ad6a:	4628      	mov	r0, r5
   2ad6c:	f7ff fcc2 	bl	2a6f4 <aws_jobs_get_job_execution>
			if (err) {
   2ad70:	4607      	mov	r7, r0
   2ad72:	2800      	cmp	r0, #0
   2ad74:	f43f ae76 	beq.w	2aa64 <aws_fota_mqtt_evt_handler+0x168>
   2ad78:	e5ec      	b.n	2a954 <aws_fota_mqtt_evt_handler+0x58>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   2ad7a:	f640 0241 	movw	r2, #2113	; 0x841
   2ad7e:	4293      	cmp	r3, r2
   2ad80:	d10e      	bne.n	2ada0 <aws_fota_mqtt_evt_handler+0x4a4>
			LOG_INF("subscribed to get topic");
   2ad82:	2303      	movs	r3, #3
   2ad84:	f04f 0000 	mov.w	r0, #0
   2ad88:	4a10      	ldr	r2, [pc, #64]	; (2adcc <aws_fota_mqtt_evt_handler+0x4d0>)
   2ad8a:	f363 0002 	bfi	r0, r3, #0, #3
   2ad8e:	4b10      	ldr	r3, [pc, #64]	; (2add0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2ad90:	f367 00c5 	bfi	r0, r7, #3, #3
   2ad94:	1a9b      	subs	r3, r3, r2
   2ad96:	08db      	lsrs	r3, r3, #3
   2ad98:	f363 108f 	bfi	r0, r3, #6, #10
   2ad9c:	4911      	ldr	r1, [pc, #68]	; (2ade4 <aws_fota_mqtt_evt_handler+0x4e8>)
   2ad9e:	e5d7      	b.n	2a950 <aws_fota_mqtt_evt_handler+0x54>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   2ada0:	4a11      	ldr	r2, [pc, #68]	; (2ade8 <aws_fota_mqtt_evt_handler+0x4ec>)
   2ada2:	7812      	ldrb	r2, [r2, #0]
   2ada4:	2a01      	cmp	r2, #1
   2ada6:	f47f add5 	bne.w	2a954 <aws_fota_mqtt_evt_handler+0x58>
   2adaa:	f640 0143 	movw	r1, #2115	; 0x843
   2adae:	428b      	cmp	r3, r1
   2adb0:	f47f add0 	bne.w	2a954 <aws_fota_mqtt_evt_handler+0x58>
			err = update_job_execution(client, job_id,
   2adb4:	4b0d      	ldr	r3, [pc, #52]	; (2adec <aws_fota_mqtt_evt_handler+0x4f0>)
   2adb6:	4611      	mov	r1, r2
   2adb8:	681b      	ldr	r3, [r3, #0]
   2adba:	f7ff fcb1 	bl	2a720 <update_job_execution.constprop.0>
   2adbe:	e7d7      	b.n	2ad70 <aws_fota_mqtt_evt_handler+0x474>
   2adc0:	20024964 	.word	0x20024964
   2adc4:	00050d82 	.word	0x00050d82
   2adc8:	20024960 	.word	0x20024960
   2adcc:	0004a688 	.word	0x0004a688
   2add0:	0004a6b0 	.word	0x0004a6b0
   2add4:	00050db7 	.word	0x00050db7
   2add8:	00050dcc 	.word	0x00050dcc
   2addc:	2002b930 	.word	0x2002b930
   2ade0:	00050ba7 	.word	0x00050ba7
   2ade4:	00050dec 	.word	0x00050dec
   2ade8:	2002b92f 	.word	0x2002b92f
   2adec:	20031b84 	.word	0x20031b84

0002adf0 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  const char *app_version,
		  aws_fota_callback_t evt_handler)
{
   2adf0:	b570      	push	{r4, r5, r6, lr}
   2adf2:	460d      	mov	r5, r1
   2adf4:	4614      	mov	r4, r2
	int err;

	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2adf6:	4606      	mov	r6, r0
   2adf8:	b918      	cbnz	r0, 2ae02 <aws_fota_init+0x12>
		return -EINVAL;
   2adfa:	f06f 0415 	mvn.w	r4, #21
	}

	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);

	return 0;
}
   2adfe:	4620      	mov	r0, r4
   2ae00:	bd70      	pop	{r4, r5, r6, pc}
	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2ae02:	2900      	cmp	r1, #0
   2ae04:	d0f9      	beq.n	2adfa <aws_fota_init+0xa>
   2ae06:	2a00      	cmp	r2, #0
   2ae08:	d0f7      	beq.n	2adfa <aws_fota_init+0xa>
	if (strlen(app_version) >= CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN) {
   2ae0a:	4608      	mov	r0, r1
   2ae0c:	f016 fd0a 	bl	41824 <strlen>
   2ae10:	287f      	cmp	r0, #127	; 0x7f
   2ae12:	d8f2      	bhi.n	2adfa <aws_fota_init+0xa>
	c = client;
   2ae14:	4b10      	ldr	r3, [pc, #64]	; (2ae58 <aws_fota_init+0x68>)
	err = fota_download_init(http_fota_handler);
   2ae16:	4811      	ldr	r0, [pc, #68]	; (2ae5c <aws_fota_init+0x6c>)
	c = client;
   2ae18:	601e      	str	r6, [r3, #0]
	callback = evt_handler;
   2ae1a:	4b11      	ldr	r3, [pc, #68]	; (2ae60 <aws_fota_init+0x70>)
   2ae1c:	601c      	str	r4, [r3, #0]
	err = fota_download_init(http_fota_handler);
   2ae1e:	f7ff fa7d 	bl	2a31c <fota_download_init>
	if (err != 0) {
   2ae22:	4604      	mov	r4, r0
   2ae24:	b188      	cbz	r0, 2ae4a <aws_fota_init+0x5a>
		LOG_ERR("fota_download_init error %d", err);
   2ae26:	2301      	movs	r3, #1
   2ae28:	f04f 0000 	mov.w	r0, #0
   2ae2c:	4a0d      	ldr	r2, [pc, #52]	; (2ae64 <aws_fota_init+0x74>)
   2ae2e:	f363 0002 	bfi	r0, r3, #0, #3
   2ae32:	4b0d      	ldr	r3, [pc, #52]	; (2ae68 <aws_fota_init+0x78>)
   2ae34:	f36f 00c5 	bfc	r0, #3, #3
   2ae38:	1a9b      	subs	r3, r3, r2
   2ae3a:	08db      	lsrs	r3, r3, #3
   2ae3c:	f363 108f 	bfi	r0, r3, #6, #10
   2ae40:	4622      	mov	r2, r4
   2ae42:	490a      	ldr	r1, [pc, #40]	; (2ae6c <aws_fota_init+0x7c>)
   2ae44:	f01c fd5e 	bl	47904 <log_string_sync>
		return err;
   2ae48:	e7d9      	b.n	2adfe <aws_fota_init+0xe>
	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);
   2ae4a:	2280      	movs	r2, #128	; 0x80
   2ae4c:	4629      	mov	r1, r5
   2ae4e:	4808      	ldr	r0, [pc, #32]	; (2ae70 <aws_fota_init+0x80>)
   2ae50:	f016 fd5c 	bl	4190c <strncpy>
	return 0;
   2ae54:	e7d3      	b.n	2adfe <aws_fota_init+0xe>
   2ae56:	bf00      	nop
   2ae58:	20024960 	.word	0x20024960
   2ae5c:	0002a7f5 	.word	0x0002a7f5
   2ae60:	20024964 	.word	0x20024964
   2ae64:	0004a688 	.word	0x0004a688
   2ae68:	0004a6b0 	.word	0x0004a6b0
   2ae6c:	00050b62 	.word	0x00050b62
   2ae70:	2002c175 	.word	0x2002c175

0002ae74 <aws_fota_parse_notify_next_document>:
}

int aws_fota_parse_notify_next_document(char *job_document,
		u32_t payload_len, char *job_id_buf, char *hostname_buf,
		char *file_path_buf)
{
   2ae74:	b570      	push	{r4, r5, r6, lr}
   2ae76:	b090      	sub	sp, #64	; 0x40
   2ae78:	461d      	mov	r5, r3
	struct notify_next_obj job;
	struct job_document_obj *job_doc_obj;

	int ret = json_obj_parse(job_document,
   2ae7a:	ab03      	add	r3, sp, #12
   2ae7c:	9300      	str	r3, [sp, #0]
{
   2ae7e:	4616      	mov	r6, r2
	int ret = json_obj_parse(job_document,
   2ae80:	2302      	movs	r3, #2
   2ae82:	4a0d      	ldr	r2, [pc, #52]	; (2aeb8 <aws_fota_parse_notify_next_document+0x44>)
   2ae84:	f7f5 fae6 	bl	20454 <json_obj_parse>
				 ARRAY_SIZE(notify_next_obj_descr),
				 &job);
	job_doc_obj = &job.execution.job_document;

	/* Check if the execution field of the object has been parsed */
	if (ret & 0x02) {
   2ae88:	0783      	lsls	r3, r0, #30
	int ret = json_obj_parse(job_document,
   2ae8a:	4604      	mov	r4, r0
	if (ret & 0x02) {
   2ae8c:	d511      	bpl.n	2aeb2 <aws_fota_parse_notify_next_document+0x3e>
		if (job.execution.job_id != 0) {
   2ae8e:	9904      	ldr	r1, [sp, #16]
   2ae90:	b119      	cbz	r1, 2ae9a <aws_fota_parse_notify_next_document+0x26>
			strncpy_nullterm(job_id_buf, job.execution.job_id,
   2ae92:	2241      	movs	r2, #65	; 0x41
   2ae94:	4630      	mov	r0, r6
   2ae96:	f01e ffd7 	bl	49e48 <strncpy_nullterm>
				      AWS_JOBS_JOB_ID_MAX_LEN);
		}
		if (job_doc_obj->location.host != 0) {
   2ae9a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2ae9c:	b119      	cbz	r1, 2aea6 <aws_fota_parse_notify_next_document+0x32>
			strncpy_nullterm(hostname_buf,
   2ae9e:	22ff      	movs	r2, #255	; 0xff
   2aea0:	4628      	mov	r0, r5
   2aea2:	f01e ffd1 	bl	49e48 <strncpy_nullterm>
					 job_doc_obj->location.host,
					 CONFIG_AWS_FOTA_HOSTNAME_MAX_LEN);
		}
		if (job_doc_obj->location.path != 0) {
   2aea6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2aea8:	b119      	cbz	r1, 2aeb2 <aws_fota_parse_notify_next_document+0x3e>
			strncpy_nullterm(file_path_buf,
   2aeaa:	22ff      	movs	r2, #255	; 0xff
   2aeac:	9814      	ldr	r0, [sp, #80]	; 0x50
   2aeae:	f01e ffcb 	bl	49e48 <strncpy_nullterm>
					  CONFIG_AWS_FOTA_FILE_PATH_MAX_LEN);
		}

	}
	return ret;
}
   2aeb2:	4620      	mov	r0, r4
   2aeb4:	b010      	add	sp, #64	; 0x40
   2aeb6:	bd70      	pop	{r4, r5, r6, pc}
   2aeb8:	0004b2f0 	.word	0x0004b2f0

0002aebc <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   2aebc:	b538      	push	{r3, r4, r5, lr}
   2aebe:	4605      	mov	r5, r0
   2aec0:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
	    dfu_target_mcuboot_identify(buf)) {
   2aec2:	f000 fbc7 	bl	2b654 <dfu_target_mcuboot_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   2aec6:	b9c8      	cbnz	r0, 2aefc <dfu_target_img_type+0x40>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}

	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
	    dfu_target_modem_identify(buf)) {
   2aec8:	4628      	mov	r0, r5
   2aeca:	f000 f9b1 	bl	2b230 <dfu_target_modem_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2aece:	b9b8      	cbnz	r0, 2af00 <dfu_target_img_type+0x44>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}

	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2aed0:	2c1f      	cmp	r4, #31
   2aed2:	d917      	bls.n	2af04 <dfu_target_img_type+0x48>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2aed4:	2301      	movs	r3, #1
   2aed6:	f04f 0200 	mov.w	r2, #0
   2aeda:	490c      	ldr	r1, [pc, #48]	; (2af0c <dfu_target_img_type+0x50>)
   2aedc:	f363 0202 	bfi	r2, r3, #0, #3
   2aee0:	4b0b      	ldr	r3, [pc, #44]	; (2af10 <dfu_target_img_type+0x54>)
   2aee2:	f360 02c5 	bfi	r2, r0, #3, #3
   2aee6:	1a5b      	subs	r3, r3, r1
   2aee8:	08db      	lsrs	r3, r3, #3
   2aeea:	f363 128f 	bfi	r2, r3, #6, #10
   2aeee:	4610      	mov	r0, r2
   2aef0:	4908      	ldr	r1, [pc, #32]	; (2af14 <dfu_target_img_type+0x58>)
   2aef2:	f01c fd07 	bl	47904 <log_string_sync>
	return -ENOTSUP;
   2aef6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2aefa:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2aefc:	2001      	movs	r0, #1
   2aefe:	e7fc      	b.n	2aefa <dfu_target_img_type+0x3e>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2af00:	2002      	movs	r0, #2
   2af02:	e7fa      	b.n	2aefa <dfu_target_img_type+0x3e>
		return -EAGAIN;
   2af04:	f06f 000a 	mvn.w	r0, #10
   2af08:	e7f7      	b.n	2aefa <dfu_target_img_type+0x3e>
   2af0a:	bf00      	nop
   2af0c:	0004a688 	.word	0x0004a688
   2af10:	0004a6e8 	.word	0x0004a6e8
   2af14:	00051074 	.word	0x00051074

0002af18 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size)
{
	const struct dfu_target *new_target = NULL;

	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   2af18:	2801      	cmp	r0, #1
{
   2af1a:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   2af1c:	d00e      	beq.n	2af3c <dfu_target_init+0x24>
	    img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	} else if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2af1e:	2802      	cmp	r0, #2
   2af20:	d10e      	bne.n	2af40 <dfu_target_init+0x28>
		   img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		new_target = &dfu_target_modem;
   2af22:	4b12      	ldr	r3, [pc, #72]	; (2af6c <dfu_target_init+0x54>)
	/* The user is re-initializing with an previously aborted target.
	 * Avoid re-initializing generally to ensure that the download can
	 * continue where it left off. Re-initializing is required for modem
	 * upgrades to re-open the DFU socket that is closed on abort.
	 */
	if (new_target == current_target
   2af24:	4a12      	ldr	r2, [pc, #72]	; (2af70 <dfu_target_init+0x58>)
   2af26:	6814      	ldr	r4, [r2, #0]
   2af28:	42a3      	cmp	r3, r4
   2af2a:	d101      	bne.n	2af30 <dfu_target_init+0x18>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2af2c:	2802      	cmp	r0, #2
   2af2e:	d11a      	bne.n	2af66 <dfu_target_init+0x4e>
	}

	current_target = new_target;

	return current_target->init(file_size);
}
   2af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_target = new_target;
   2af34:	6013      	str	r3, [r2, #0]
	return current_target->init(file_size);
   2af36:	4608      	mov	r0, r1
   2af38:	681b      	ldr	r3, [r3, #0]
   2af3a:	4718      	bx	r3
		new_target = &dfu_target_mcuboot;
   2af3c:	4b0d      	ldr	r3, [pc, #52]	; (2af74 <dfu_target_init+0x5c>)
   2af3e:	e7f1      	b.n	2af24 <dfu_target_init+0xc>
		LOG_ERR("Unknown image type");
   2af40:	2301      	movs	r3, #1
   2af42:	f04f 0000 	mov.w	r0, #0
   2af46:	4a0c      	ldr	r2, [pc, #48]	; (2af78 <dfu_target_init+0x60>)
   2af48:	f363 0002 	bfi	r0, r3, #0, #3
   2af4c:	4b0b      	ldr	r3, [pc, #44]	; (2af7c <dfu_target_init+0x64>)
   2af4e:	f36f 00c5 	bfc	r0, #3, #3
   2af52:	1a9b      	subs	r3, r3, r2
   2af54:	08db      	lsrs	r3, r3, #3
   2af56:	f363 108f 	bfi	r0, r3, #6, #10
   2af5a:	4909      	ldr	r1, [pc, #36]	; (2af80 <dfu_target_init+0x68>)
   2af5c:	f01c fcd2 	bl	47904 <log_string_sync>
		return -ENOTSUP;
   2af60:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2af64:	bd10      	pop	{r4, pc}
		return 0;
   2af66:	2000      	movs	r0, #0
   2af68:	e7fc      	b.n	2af64 <dfu_target_init+0x4c>
   2af6a:	bf00      	nop
   2af6c:	0004b320 	.word	0x0004b320
   2af70:	20024968 	.word	0x20024968
   2af74:	0004b310 	.word	0x0004b310
   2af78:	0004a688 	.word	0x0004a688
   2af7c:	0004a6e8 	.word	0x0004a6e8
   2af80:	00051092 	.word	0x00051092

0002af84 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2af84:	4b03      	ldr	r3, [pc, #12]	; (2af94 <dfu_target_offset_get+0x10>)
   2af86:	681b      	ldr	r3, [r3, #0]
   2af88:	b10b      	cbz	r3, 2af8e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2af8a:	685b      	ldr	r3, [r3, #4]
   2af8c:	4718      	bx	r3
}
   2af8e:	f06f 000c 	mvn.w	r0, #12
   2af92:	4770      	bx	lr
   2af94:	20024968 	.word	0x20024968

0002af98 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2af98:	4b04      	ldr	r3, [pc, #16]	; (2afac <dfu_target_write+0x14>)
   2af9a:	681b      	ldr	r3, [r3, #0]
   2af9c:	b113      	cbz	r3, 2afa4 <dfu_target_write+0xc>
   2af9e:	b108      	cbz	r0, 2afa4 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2afa0:	689b      	ldr	r3, [r3, #8]
   2afa2:	4718      	bx	r3
}
   2afa4:	f06f 000c 	mvn.w	r0, #12
   2afa8:	4770      	bx	lr
   2afaa:	bf00      	nop
   2afac:	20024968 	.word	0x20024968

0002afb0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2afb0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2afb2:	4d10      	ldr	r5, [pc, #64]	; (2aff4 <dfu_target_done+0x44>)
{
   2afb4:	4606      	mov	r6, r0
	if (current_target == NULL) {
   2afb6:	682b      	ldr	r3, [r5, #0]
   2afb8:	b1c3      	cbz	r3, 2afec <dfu_target_done+0x3c>
		return -EACCES;
	}

	err = current_target->done(successful);
   2afba:	68db      	ldr	r3, [r3, #12]
   2afbc:	4798      	blx	r3
   2afbe:	4604      	mov	r4, r0

	if (successful) {
   2afc0:	b10e      	cbz	r6, 2afc6 <dfu_target_done+0x16>
		current_target = NULL;
   2afc2:	2300      	movs	r3, #0
   2afc4:	602b      	str	r3, [r5, #0]
	}

	if (err != 0) {
   2afc6:	b17c      	cbz	r4, 2afe8 <dfu_target_done+0x38>
		LOG_ERR("Unable to clean up dfu_target");
   2afc8:	2301      	movs	r3, #1
   2afca:	f04f 0000 	mov.w	r0, #0
   2afce:	4a0a      	ldr	r2, [pc, #40]	; (2aff8 <dfu_target_done+0x48>)
   2afd0:	f363 0002 	bfi	r0, r3, #0, #3
   2afd4:	4b09      	ldr	r3, [pc, #36]	; (2affc <dfu_target_done+0x4c>)
   2afd6:	f36f 00c5 	bfc	r0, #3, #3
   2afda:	1a9b      	subs	r3, r3, r2
   2afdc:	08db      	lsrs	r3, r3, #3
   2afde:	f363 108f 	bfi	r0, r3, #6, #10
   2afe2:	4907      	ldr	r1, [pc, #28]	; (2b000 <dfu_target_done+0x50>)
   2afe4:	f01c fc8e 	bl	47904 <log_string_sync>
		return err;
	}

	return 0;
}
   2afe8:	4620      	mov	r0, r4
   2afea:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   2afec:	f06f 040c 	mvn.w	r4, #12
   2aff0:	e7fa      	b.n	2afe8 <dfu_target_done+0x38>
   2aff2:	bf00      	nop
   2aff4:	20024968 	.word	0x20024968
   2aff8:	0004a688 	.word	0x0004a688
   2affc:	0004a6e8 	.word	0x0004a6e8
   2b000:	00051056 	.word	0x00051056

0002b004 <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   2b004:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b008:	4c15      	ldr	r4, [pc, #84]	; (2b060 <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   2b00a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2b00c:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   2b00e:	4605      	mov	r5, r0
   2b010:	460e      	mov	r6, r1
   2b012:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2b014:	b94b      	cbnz	r3, 2b02a <getsockopt.constprop.2+0x26>
   2b016:	4913      	ldr	r1, [pc, #76]	; (2b064 <getsockopt.constprop.2+0x60>)
   2b018:	4813      	ldr	r0, [pc, #76]	; (2b068 <getsockopt.constprop.2+0x64>)
   2b01a:	2360      	movs	r3, #96	; 0x60
   2b01c:	4a13      	ldr	r2, [pc, #76]	; (2b06c <getsockopt.constprop.2+0x68>)
   2b01e:	f01c fc54 	bl	478ca <printk>
   2b022:	2160      	movs	r1, #96	; 0x60
   2b024:	4811      	ldr	r0, [pc, #68]	; (2b06c <getsockopt.constprop.2+0x68>)
   2b026:	f01c fc5d 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   2b02a:	6823      	ldr	r3, [r4, #0]
   2b02c:	6a1b      	ldr	r3, [r3, #32]
   2b02e:	b94b      	cbnz	r3, 2b044 <getsockopt.constprop.2+0x40>
   2b030:	490f      	ldr	r1, [pc, #60]	; (2b070 <getsockopt.constprop.2+0x6c>)
   2b032:	480d      	ldr	r0, [pc, #52]	; (2b068 <getsockopt.constprop.2+0x64>)
   2b034:	2361      	movs	r3, #97	; 0x61
   2b036:	4a0d      	ldr	r2, [pc, #52]	; (2b06c <getsockopt.constprop.2+0x68>)
   2b038:	f01c fc47 	bl	478ca <printk>
   2b03c:	2161      	movs	r1, #97	; 0x61
   2b03e:	480b      	ldr	r0, [pc, #44]	; (2b06c <getsockopt.constprop.2+0x68>)
   2b040:	f01c fc50 	bl	478e4 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   2b044:	6823      	ldr	r3, [r4, #0]
   2b046:	f8cd 8000 	str.w	r8, [sp]
   2b04a:	6a1c      	ldr	r4, [r3, #32]
   2b04c:	4632      	mov	r2, r6
   2b04e:	463b      	mov	r3, r7
   2b050:	f240 2103 	movw	r1, #515	; 0x203
   2b054:	4628      	mov	r0, r5
   2b056:	47a0      	blx	r4
}
   2b058:	b002      	add	sp, #8
   2b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b05e:	bf00      	nop
   2b060:	20023bf8 	.word	0x20023bf8
   2b064:	0004ce24 	.word	0x0004ce24
   2b068:	0004ccf0 	.word	0x0004ccf0
   2b06c:	0004cdf3 	.word	0x0004cdf3
   2b070:	000512e6 	.word	0x000512e6

0002b074 <get_modem_error>:

static int  fd;
static int  offset;

static int get_modem_error(void)
{
   2b074:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2b076:	2204      	movs	r2, #4
	int err = 0;
   2b078:	2500      	movs	r5, #0
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2b07a:	4811      	ldr	r0, [pc, #68]	; (2b0c0 <get_modem_error+0x4c>)
	len = sizeof(err);
   2b07c:	ab02      	add	r3, sp, #8
   2b07e:	f843 2d04 	str.w	r2, [r3, #-4]!
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2b082:	2114      	movs	r1, #20
   2b084:	466a      	mov	r2, sp
   2b086:	6800      	ldr	r0, [r0, #0]
	int err = 0;
   2b088:	9500      	str	r5, [sp, #0]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2b08a:	f7ff ffbb 	bl	2b004 <getsockopt.constprop.2>
	if (rc) {
   2b08e:	b198      	cbz	r0, 2b0b8 <get_modem_error+0x44>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2b090:	2301      	movs	r3, #1
   2b092:	f04f 0400 	mov.w	r4, #0
   2b096:	4a0b      	ldr	r2, [pc, #44]	; (2b0c4 <get_modem_error+0x50>)
   2b098:	f363 0402 	bfi	r4, r3, #0, #3
   2b09c:	4b0a      	ldr	r3, [pc, #40]	; (2b0c8 <get_modem_error+0x54>)
   2b09e:	f365 04c5 	bfi	r4, r5, #3, #3
   2b0a2:	1a9b      	subs	r3, r3, r2
   2b0a4:	08db      	lsrs	r3, r3, #3
   2b0a6:	f363 148f 	bfi	r4, r3, #6, #10
   2b0aa:	f01c fe35 	bl	47d18 <__errno>
   2b0ae:	4907      	ldr	r1, [pc, #28]	; (2b0cc <get_modem_error+0x58>)
   2b0b0:	6802      	ldr	r2, [r0, #0]
   2b0b2:	4620      	mov	r0, r4
   2b0b4:	f01c fc26 	bl	47904 <log_string_sync>
	}

	return err;
}
   2b0b8:	9800      	ldr	r0, [sp, #0]
   2b0ba:	b003      	add	sp, #12
   2b0bc:	bd30      	pop	{r4, r5, pc}
   2b0be:	bf00      	nop
   2b0c0:	2002496c 	.word	0x2002496c
   2b0c4:	0004a688 	.word	0x0004a688
   2b0c8:	0004a6f8 	.word	0x0004a6f8
   2b0cc:	000512c0 	.word	0x000512c0

0002b0d0 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   2b0d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b0d4:	4c15      	ldr	r4, [pc, #84]	; (2b12c <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   2b0d6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2b0d8:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   2b0da:	4605      	mov	r5, r0
   2b0dc:	460e      	mov	r6, r1
   2b0de:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2b0e0:	b94b      	cbnz	r3, 2b0f6 <setsockopt.constprop.3+0x26>
   2b0e2:	4913      	ldr	r1, [pc, #76]	; (2b130 <setsockopt.constprop.3+0x60>)
   2b0e4:	4813      	ldr	r0, [pc, #76]	; (2b134 <setsockopt.constprop.3+0x64>)
   2b0e6:	2357      	movs	r3, #87	; 0x57
   2b0e8:	4a13      	ldr	r2, [pc, #76]	; (2b138 <setsockopt.constprop.3+0x68>)
   2b0ea:	f01c fbee 	bl	478ca <printk>
   2b0ee:	2157      	movs	r1, #87	; 0x57
   2b0f0:	4811      	ldr	r0, [pc, #68]	; (2b138 <setsockopt.constprop.3+0x68>)
   2b0f2:	f01c fbf7 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2b0f6:	6823      	ldr	r3, [r4, #0]
   2b0f8:	69db      	ldr	r3, [r3, #28]
   2b0fa:	b94b      	cbnz	r3, 2b110 <setsockopt.constprop.3+0x40>
   2b0fc:	490f      	ldr	r1, [pc, #60]	; (2b13c <setsockopt.constprop.3+0x6c>)
   2b0fe:	480d      	ldr	r0, [pc, #52]	; (2b134 <setsockopt.constprop.3+0x64>)
   2b100:	2358      	movs	r3, #88	; 0x58
   2b102:	4a0d      	ldr	r2, [pc, #52]	; (2b138 <setsockopt.constprop.3+0x68>)
   2b104:	f01c fbe1 	bl	478ca <printk>
   2b108:	2158      	movs	r1, #88	; 0x58
   2b10a:	480b      	ldr	r0, [pc, #44]	; (2b138 <setsockopt.constprop.3+0x68>)
   2b10c:	f01c fbea 	bl	478e4 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2b110:	6823      	ldr	r3, [r4, #0]
   2b112:	f8cd 8000 	str.w	r8, [sp]
   2b116:	69dc      	ldr	r4, [r3, #28]
   2b118:	4632      	mov	r2, r6
   2b11a:	463b      	mov	r3, r7
   2b11c:	f240 2103 	movw	r1, #515	; 0x203
   2b120:	4628      	mov	r0, r5
   2b122:	47a0      	blx	r4
}
   2b124:	b002      	add	sp, #8
   2b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b12a:	bf00      	nop
   2b12c:	20023bf8 	.word	0x20023bf8
   2b130:	0004ce24 	.word	0x0004ce24
   2b134:	0004ccf0 	.word	0x0004ccf0
   2b138:	0004cdf3 	.word	0x0004cdf3
   2b13c:	0004eb14 	.word	0x0004eb14

0002b140 <delete_banked_modem_fw>:
}

static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2b140:	2304      	movs	r3, #4
{
   2b142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	LOG_INF("Deleting firmware image, this can take several minutes");
   2b146:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   2b14a:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2b14c:	2303      	movs	r3, #3
   2b14e:	4c30      	ldr	r4, [pc, #192]	; (2b210 <delete_banked_modem_fw+0xd0>)
   2b150:	f363 0002 	bfi	r0, r3, #0, #3
   2b154:	4b2f      	ldr	r3, [pc, #188]	; (2b214 <delete_banked_modem_fw+0xd4>)
   2b156:	f36f 00c5 	bfc	r0, #3, #3
   2b15a:	1ae4      	subs	r4, r4, r3
   2b15c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b160:	f364 108f 	bfi	r0, r4, #6, #10
   2b164:	492c      	ldr	r1, [pc, #176]	; (2b218 <delete_banked_modem_fw+0xd8>)
   2b166:	f01c fbcd 	bl	47904 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2b16a:	2300      	movs	r3, #0
   2b16c:	4d2b      	ldr	r5, [pc, #172]	; (2b21c <delete_banked_modem_fw+0xdc>)
   2b16e:	461a      	mov	r2, r3
   2b170:	2106      	movs	r1, #6
   2b172:	6828      	ldr	r0, [r5, #0]
   2b174:	f7ff ffac 	bl	2b0d0 <setsockopt.constprop.3>
	if (err < 0) {
   2b178:	2800      	cmp	r0, #0
   2b17a:	db25      	blt.n	2b1c8 <delete_banked_modem_fw+0x88>
		LOG_ERR("Failed to delete backup, errno %d", errno);
		return -EFAULT;
	}

	while (true) {
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2b17c:	4f28      	ldr	r7, [pc, #160]	; (2b220 <delete_banked_modem_fw+0xe0>)
		if (err < 0) {
			if (errno == ENOEXEC) {
				err = get_modem_error();
				if (err != DFU_ERASE_PENDING) {
					LOG_ERR("DFU error: %d", err);
   2b17e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2b22c <delete_banked_modem_fw+0xec>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2b182:	ab01      	add	r3, sp, #4
   2b184:	463a      	mov	r2, r7
   2b186:	2107      	movs	r1, #7
   2b188:	6828      	ldr	r0, [r5, #0]
   2b18a:	f7ff ff3b 	bl	2b004 <getsockopt.constprop.2>
		if (err < 0) {
   2b18e:	2800      	cmp	r0, #0
   2b190:	da2f      	bge.n	2b1f2 <delete_banked_modem_fw+0xb2>
			if (errno == ENOEXEC) {
   2b192:	f01c fdc1 	bl	47d18 <__errno>
   2b196:	6803      	ldr	r3, [r0, #0]
   2b198:	2b08      	cmp	r3, #8
   2b19a:	d1f2      	bne.n	2b182 <delete_banked_modem_fw+0x42>
				err = get_modem_error();
   2b19c:	f7ff ff6a 	bl	2b074 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2b1a0:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2b1a4:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   2b1a6:	d00a      	beq.n	2b1be <delete_banked_modem_fw+0x7e>
					LOG_ERR("DFU error: %d", err);
   2b1a8:	2301      	movs	r3, #1
   2b1aa:	f363 0602 	bfi	r6, r3, #0, #3
   2b1ae:	f36f 06c5 	bfc	r6, #3, #3
   2b1b2:	f364 168f 	bfi	r6, r4, #6, #10
   2b1b6:	4641      	mov	r1, r8
   2b1b8:	4630      	mov	r0, r6
   2b1ba:	f01c fba3 	bl	47904 <log_string_sync>
	return z_impl_k_sleep(ms);
   2b1be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2b1c2:	f01e ff90 	bl	4a0e6 <z_impl_k_sleep>
   2b1c6:	e7dc      	b.n	2b182 <delete_banked_modem_fw+0x42>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2b1c8:	2301      	movs	r3, #1
   2b1ca:	f04f 0500 	mov.w	r5, #0
   2b1ce:	f363 0502 	bfi	r5, r3, #0, #3
   2b1d2:	f01c fda1 	bl	47d18 <__errno>
   2b1d6:	f36f 05c5 	bfc	r5, #3, #3
   2b1da:	f364 158f 	bfi	r5, r4, #6, #10
   2b1de:	6802      	ldr	r2, [r0, #0]
   2b1e0:	4910      	ldr	r1, [pc, #64]	; (2b224 <delete_banked_modem_fw+0xe4>)
   2b1e2:	4628      	mov	r0, r5
   2b1e4:	f01c fb8e 	bl	47904 <log_string_sync>
		return -EFAULT;
   2b1e8:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2b1ec:	b002      	add	sp, #8
   2b1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Modem FW delete complete");
   2b1f2:	2303      	movs	r3, #3
   2b1f4:	f04f 0000 	mov.w	r0, #0
   2b1f8:	f363 0002 	bfi	r0, r3, #0, #3
   2b1fc:	f36f 00c5 	bfc	r0, #3, #3
   2b200:	f364 108f 	bfi	r0, r4, #6, #10
   2b204:	4908      	ldr	r1, [pc, #32]	; (2b228 <delete_banked_modem_fw+0xe8>)
   2b206:	f01c fb7d 	bl	47904 <log_string_sync>
	return 0;
   2b20a:	2000      	movs	r0, #0
   2b20c:	e7ee      	b.n	2b1ec <delete_banked_modem_fw+0xac>
   2b20e:	bf00      	nop
   2b210:	0004a6f8 	.word	0x0004a6f8
   2b214:	0004a688 	.word	0x0004a688
   2b218:	000510a5 	.word	0x000510a5
   2b21c:	2002496c 	.word	0x2002496c
   2b220:	20024970 	.word	0x20024970
   2b224:	000510dc 	.word	0x000510dc
   2b228:	0005110c 	.word	0x0005110c
   2b22c:	000510fe 	.word	0x000510fe

0002b230 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2b230:	6840      	ldr	r0, [r0, #4]

}
   2b232:	4b02      	ldr	r3, [pc, #8]	; (2b23c <dfu_target_modem_identify+0xc>)
   2b234:	1ac3      	subs	r3, r0, r3
   2b236:	4258      	negs	r0, r3
   2b238:	4158      	adcs	r0, r3
   2b23a:	4770      	bx	lr
   2b23c:	7544656d 	.word	0x7544656d

0002b240 <dfu_target_modem_init>:
	/* We have no way of checking the amount of flash available in the modem
	 * with the current API
	 */
	ARG_UNUSED(file_size);
	int err;
	socklen_t len = sizeof(offset);
   2b240:	2304      	movs	r3, #4
{
   2b242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b246:	4c6a      	ldr	r4, [pc, #424]	; (2b3f0 <dfu_target_modem_init+0x1b0>)
   2b248:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2b24a:	9303      	str	r3, [sp, #12]
   2b24c:	6823      	ldr	r3, [r4, #0]
   2b24e:	b94b      	cbnz	r3, 2b264 <dfu_target_modem_init+0x24>
   2b250:	4968      	ldr	r1, [pc, #416]	; (2b3f4 <dfu_target_modem_init+0x1b4>)
   2b252:	4869      	ldr	r0, [pc, #420]	; (2b3f8 <dfu_target_modem_init+0x1b8>)
   2b254:	2319      	movs	r3, #25
   2b256:	4a69      	ldr	r2, [pc, #420]	; (2b3fc <dfu_target_modem_init+0x1bc>)
   2b258:	f01c fb37 	bl	478ca <printk>
   2b25c:	2119      	movs	r1, #25
   2b25e:	4867      	ldr	r0, [pc, #412]	; (2b3fc <dfu_target_modem_init+0x1bc>)
   2b260:	f01c fb40 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2b264:	6823      	ldr	r3, [r4, #0]
   2b266:	681b      	ldr	r3, [r3, #0]
   2b268:	b94b      	cbnz	r3, 2b27e <dfu_target_modem_init+0x3e>
   2b26a:	4965      	ldr	r1, [pc, #404]	; (2b400 <dfu_target_modem_init+0x1c0>)
   2b26c:	4862      	ldr	r0, [pc, #392]	; (2b3f8 <dfu_target_modem_init+0x1b8>)
   2b26e:	231a      	movs	r3, #26
   2b270:	4a62      	ldr	r2, [pc, #392]	; (2b3fc <dfu_target_modem_init+0x1bc>)
   2b272:	f01c fb2a 	bl	478ca <printk>
   2b276:	211a      	movs	r1, #26
   2b278:	4860      	ldr	r0, [pc, #384]	; (2b3fc <dfu_target_modem_init+0x1bc>)
   2b27a:	f01c fb33 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2b27e:	6823      	ldr	r3, [r4, #0]
   2b280:	f240 2203 	movw	r2, #515	; 0x203
   2b284:	681b      	ldr	r3, [r3, #0]
   2b286:	2101      	movs	r1, #1
   2b288:	2067      	movs	r0, #103	; 0x67
   2b28a:	4798      	blx	r3
   2b28c:	4c5d      	ldr	r4, [pc, #372]	; (2b404 <dfu_target_modem_init+0x1c4>)
   2b28e:	4b5e      	ldr	r3, [pc, #376]	; (2b408 <dfu_target_modem_init+0x1c8>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2b290:	4d5e      	ldr	r5, [pc, #376]	; (2b40c <dfu_target_modem_init+0x1cc>)
   2b292:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   2b294:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2b296:	6028      	str	r0, [r5, #0]
   2b298:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b29c:	462e      	mov	r6, r5
	if (fd < 0) {
   2b29e:	da35      	bge.n	2b30c <dfu_target_modem_init+0xcc>
		LOG_ERR("Failed to open Modem DFU socket.");
   2b2a0:	2301      	movs	r3, #1
   2b2a2:	f04f 0000 	mov.w	r0, #0
   2b2a6:	f363 0002 	bfi	r0, r3, #0, #3
   2b2aa:	f36f 00c5 	bfc	r0, #3, #3
   2b2ae:	f364 108f 	bfi	r0, r4, #6, #10
   2b2b2:	4957      	ldr	r1, [pc, #348]	; (2b410 <dfu_target_modem_init+0x1d0>)
   2b2b4:	f01c fb26 	bl	47904 <log_string_sync>
		return fd;
   2b2b8:	6828      	ldr	r0, [r5, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2b2ba:	2800      	cmp	r0, #0
   2b2bc:	db52      	blt.n	2b364 <dfu_target_modem_init+0x124>
		return err;
	}

	/* Check offset, store to local variable */
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2b2be:	ab03      	add	r3, sp, #12
   2b2c0:	4a54      	ldr	r2, [pc, #336]	; (2b414 <dfu_target_modem_init+0x1d4>)
   2b2c2:	2107      	movs	r1, #7
   2b2c4:	6830      	ldr	r0, [r6, #0]
   2b2c6:	f7ff fe9d 	bl	2b004 <getsockopt.constprop.2>
	if (err < 0) {
   2b2ca:	2800      	cmp	r0, #0
   2b2cc:	da15      	bge.n	2b2fa <dfu_target_modem_init+0xba>
		if (errno == ENOEXEC) {
   2b2ce:	f01c fd23 	bl	47d18 <__errno>
   2b2d2:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2b2d4:	f04f 0500 	mov.w	r5, #0
		if (errno == ENOEXEC) {
   2b2d8:	2b08      	cmp	r3, #8
   2b2da:	f04f 0301 	mov.w	r3, #1
			LOG_ERR("Modem error: %d", get_modem_error());
   2b2de:	f363 0502 	bfi	r5, r3, #0, #3
   2b2e2:	f36f 05c5 	bfc	r5, #3, #3
   2b2e6:	f364 158f 	bfi	r5, r4, #6, #10
		if (errno == ENOEXEC) {
   2b2ea:	d157      	bne.n	2b39c <dfu_target_modem_init+0x15c>
			LOG_ERR("Modem error: %d", get_modem_error());
   2b2ec:	f7ff fec2 	bl	2b074 <get_modem_error>
   2b2f0:	4602      	mov	r2, r0
   2b2f2:	4949      	ldr	r1, [pc, #292]	; (2b418 <dfu_target_modem_init+0x1d8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2b2f4:	4628      	mov	r0, r5
   2b2f6:	f01c fb05 	bl	47904 <log_string_sync>
		}
	}

	if (offset == DIRTY_IMAGE) {
   2b2fa:	4d46      	ldr	r5, [pc, #280]	; (2b414 <dfu_target_modem_init+0x1d4>)
   2b2fc:	682a      	ldr	r2, [r5, #0]
   2b2fe:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2b302:	d150      	bne.n	2b3a6 <dfu_target_modem_init+0x166>
		delete_banked_modem_fw();
   2b304:	f7ff ff1c 	bl	2b140 <delete_banked_modem_fw>
		if (err != 0) {
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
   2b308:	2000      	movs	r0, #0
   2b30a:	e02b      	b.n	2b364 <dfu_target_modem_init+0x124>
	LOG_INF("Modem DFU Socket created");
   2b30c:	2703      	movs	r7, #3
   2b30e:	f04f 0000 	mov.w	r0, #0
	len = sizeof(version);
   2b312:	f04f 0824 	mov.w	r8, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2b316:	f367 0002 	bfi	r0, r7, #0, #3
   2b31a:	f36f 00c5 	bfc	r0, #3, #3
   2b31e:	f364 108f 	bfi	r0, r4, #6, #10
   2b322:	493e      	ldr	r1, [pc, #248]	; (2b41c <dfu_target_modem_init+0x1dc>)
   2b324:	f01c faee 	bl	47904 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2b328:	f10d 0914 	add.w	r9, sp, #20
	len = sizeof(version);
   2b32c:	ab18      	add	r3, sp, #96	; 0x60
   2b32e:	f843 8d50 	str.w	r8, [r3, #-80]!
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2b332:	464a      	mov	r2, r9
   2b334:	2101      	movs	r1, #1
   2b336:	6828      	ldr	r0, [r5, #0]
   2b338:	f7ff fe64 	bl	2b004 <getsockopt.constprop.2>
	if (err < 0) {
   2b33c:	2800      	cmp	r0, #0
   2b33e:	da14      	bge.n	2b36a <dfu_target_modem_init+0x12a>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2b340:	2301      	movs	r3, #1
   2b342:	f04f 0500 	mov.w	r5, #0
   2b346:	f363 0502 	bfi	r5, r3, #0, #3
   2b34a:	f01c fce5 	bl	47d18 <__errno>
   2b34e:	f36f 05c5 	bfc	r5, #3, #3
   2b352:	f364 158f 	bfi	r5, r4, #6, #10
   2b356:	6802      	ldr	r2, [r0, #0]
   2b358:	4931      	ldr	r1, [pc, #196]	; (2b420 <dfu_target_modem_init+0x1e0>)
   2b35a:	4628      	mov	r0, r5
   2b35c:	f01c fad2 	bl	47904 <log_string_sync>
		return -1;
   2b360:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b364:	b019      	add	sp, #100	; 0x64
   2b366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2b36a:	f04f 0500 	mov.w	r5, #0
	snprintf(version_string, sizeof(version_string), "%.*s",
   2b36e:	4643      	mov	r3, r8
   2b370:	4a2c      	ldr	r2, [pc, #176]	; (2b424 <dfu_target_modem_init+0x1e4>)
   2b372:	2125      	movs	r1, #37	; 0x25
   2b374:	f8cd 9000 	str.w	r9, [sp]
   2b378:	a80e      	add	r0, sp, #56	; 0x38
   2b37a:	f016 f883 	bl	41484 <snprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2b37e:	a80e      	add	r0, sp, #56	; 0x38
   2b380:	f01c fad2 	bl	47928 <log_strdup>
   2b384:	f367 0502 	bfi	r5, r7, #0, #3
   2b388:	f36f 05c5 	bfc	r5, #3, #3
   2b38c:	f364 158f 	bfi	r5, r4, #6, #10
   2b390:	4602      	mov	r2, r0
   2b392:	4925      	ldr	r1, [pc, #148]	; (2b428 <dfu_target_modem_init+0x1e8>)
   2b394:	4628      	mov	r0, r5
   2b396:	f01c fab5 	bl	47904 <log_string_sync>
   2b39a:	e790      	b.n	2b2be <dfu_target_modem_init+0x7e>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2b39c:	f01c fcbc 	bl	47d18 <__errno>
   2b3a0:	4922      	ldr	r1, [pc, #136]	; (2b42c <dfu_target_modem_init+0x1ec>)
   2b3a2:	6802      	ldr	r2, [r0, #0]
   2b3a4:	e7a6      	b.n	2b2f4 <dfu_target_modem_init+0xb4>
	} else if (offset != 0) {
   2b3a6:	2a00      	cmp	r2, #0
   2b3a8:	d0ae      	beq.n	2b308 <dfu_target_modem_init+0xc8>
		LOG_INF("Setting offset to 0x%x", offset);
   2b3aa:	2703      	movs	r7, #3
   2b3ac:	f04f 0000 	mov.w	r0, #0
   2b3b0:	f367 0002 	bfi	r0, r7, #0, #3
   2b3b4:	f36f 00c5 	bfc	r0, #3, #3
   2b3b8:	f364 108f 	bfi	r0, r4, #6, #10
   2b3bc:	491c      	ldr	r1, [pc, #112]	; (2b430 <dfu_target_modem_init+0x1f0>)
   2b3be:	f01c faa1 	bl	47904 <log_string_sync>
		len = sizeof(offset);
   2b3c2:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2b3c4:	462a      	mov	r2, r5
   2b3c6:	2107      	movs	r1, #7
   2b3c8:	6830      	ldr	r0, [r6, #0]
		len = sizeof(offset);
   2b3ca:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2b3cc:	f7ff fe80 	bl	2b0d0 <setsockopt.constprop.3>
		if (err != 0) {
   2b3d0:	2800      	cmp	r0, #0
   2b3d2:	d099      	beq.n	2b308 <dfu_target_modem_init+0xc8>
			LOG_INF("Error while setting offset: %d", offset);
   2b3d4:	f04f 0000 	mov.w	r0, #0
   2b3d8:	f367 0002 	bfi	r0, r7, #0, #3
   2b3dc:	f36f 00c5 	bfc	r0, #3, #3
   2b3e0:	f364 108f 	bfi	r0, r4, #6, #10
   2b3e4:	682a      	ldr	r2, [r5, #0]
   2b3e6:	4913      	ldr	r1, [pc, #76]	; (2b434 <dfu_target_modem_init+0x1f4>)
   2b3e8:	f01c fa8c 	bl	47904 <log_string_sync>
   2b3ec:	e78c      	b.n	2b308 <dfu_target_modem_init+0xc8>
   2b3ee:	bf00      	nop
   2b3f0:	20023bf8 	.word	0x20023bf8
   2b3f4:	0004ce24 	.word	0x0004ce24
   2b3f8:	0004ccf0 	.word	0x0004ccf0
   2b3fc:	0004cdf3 	.word	0x0004cdf3
   2b400:	0004e845 	.word	0x0004e845
   2b404:	0004a6f8 	.word	0x0004a6f8
   2b408:	0004a688 	.word	0x0004a688
   2b40c:	2002496c 	.word	0x2002496c
   2b410:	000511b1 	.word	0x000511b1
   2b414:	20024970 	.word	0x20024970
   2b418:	00051235 	.word	0x00051235
   2b41c:	000511d2 	.word	0x000511d2
   2b420:	000511eb 	.word	0x000511eb
   2b424:	00051215 	.word	0x00051215
   2b428:	0005121a 	.word	0x0005121a
   2b42c:	00051245 	.word	0x00051245
   2b430:	00051262 	.word	0x00051262
   2b434:	00051279 	.word	0x00051279

0002b438 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2b438:	4b02      	ldr	r3, [pc, #8]	; (2b444 <dfu_target_modem_offset_get+0xc>)
   2b43a:	681b      	ldr	r3, [r3, #0]
   2b43c:	6003      	str	r3, [r0, #0]
	return 0;
}
   2b43e:	2000      	movs	r0, #0
   2b440:	4770      	bx	lr
   2b442:	bf00      	nop
   2b444:	20024970 	.word	0x20024970

0002b448 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   2b44a:	4b2f      	ldr	r3, [pc, #188]	; (2b508 <dfu_target_modem_write+0xc0>)
	__ASSERT_NO_MSG(socket_ops);
   2b44c:	4c2f      	ldr	r4, [pc, #188]	; (2b50c <dfu_target_modem_write+0xc4>)
   2b44e:	681f      	ldr	r7, [r3, #0]
   2b450:	6823      	ldr	r3, [r4, #0]
{
   2b452:	4605      	mov	r5, r0
   2b454:	460e      	mov	r6, r1
   2b456:	b94b      	cbnz	r3, 2b46c <dfu_target_modem_write+0x24>
   2b458:	492d      	ldr	r1, [pc, #180]	; (2b510 <dfu_target_modem_write+0xc8>)
   2b45a:	482e      	ldr	r0, [pc, #184]	; (2b514 <dfu_target_modem_write+0xcc>)
   2b45c:	237e      	movs	r3, #126	; 0x7e
   2b45e:	4a2e      	ldr	r2, [pc, #184]	; (2b518 <dfu_target_modem_write+0xd0>)
   2b460:	f01c fa33 	bl	478ca <printk>
   2b464:	217e      	movs	r1, #126	; 0x7e
   2b466:	482c      	ldr	r0, [pc, #176]	; (2b518 <dfu_target_modem_write+0xd0>)
   2b468:	f01c fa3c 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2b46c:	6823      	ldr	r3, [r4, #0]
   2b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b470:	b94b      	cbnz	r3, 2b486 <dfu_target_modem_write+0x3e>
   2b472:	492a      	ldr	r1, [pc, #168]	; (2b51c <dfu_target_modem_write+0xd4>)
   2b474:	4827      	ldr	r0, [pc, #156]	; (2b514 <dfu_target_modem_write+0xcc>)
   2b476:	237f      	movs	r3, #127	; 0x7f
   2b478:	4a27      	ldr	r2, [pc, #156]	; (2b518 <dfu_target_modem_write+0xd0>)
   2b47a:	f01c fa26 	bl	478ca <printk>
   2b47e:	217f      	movs	r1, #127	; 0x7f
   2b480:	4825      	ldr	r0, [pc, #148]	; (2b518 <dfu_target_modem_write+0xd0>)
   2b482:	f01c fa2f 	bl	478e4 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2b486:	6823      	ldr	r3, [r4, #0]
   2b488:	4632      	mov	r2, r6
   2b48a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2b48c:	4629      	mov	r1, r5
   2b48e:	2300      	movs	r3, #0
   2b490:	4638      	mov	r0, r7
   2b492:	47a0      	blx	r4
	if (sent > 0) {
   2b494:	2800      	cmp	r0, #0
   2b496:	dc2e      	bgt.n	2b4f6 <dfu_target_modem_write+0xae>
		return 0;
	}

	if (errno != ENOEXEC) {
   2b498:	f01c fc3e 	bl	47d18 <__errno>
   2b49c:	6803      	ldr	r3, [r0, #0]
   2b49e:	2b08      	cmp	r3, #8
   2b4a0:	d12b      	bne.n	2b4fa <dfu_target_modem_write+0xb2>
		return -EFAULT;
	}

	modem_error = get_modem_error();
   2b4a2:	f7ff fde7 	bl	2b074 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2b4a6:	f04f 0400 	mov.w	r4, #0
   2b4aa:	2301      	movs	r3, #1
   2b4ac:	4a1c      	ldr	r2, [pc, #112]	; (2b520 <dfu_target_modem_write+0xd8>)
   2b4ae:	f363 0402 	bfi	r4, r3, #0, #3
   2b4b2:	4b1c      	ldr	r3, [pc, #112]	; (2b524 <dfu_target_modem_write+0xdc>)
   2b4b4:	f36f 04c5 	bfc	r4, #3, #3
   2b4b8:	1a9b      	subs	r3, r3, r2
   2b4ba:	08db      	lsrs	r3, r3, #3
	modem_error = get_modem_error();
   2b4bc:	4607      	mov	r7, r0
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2b4be:	f363 148f 	bfi	r4, r3, #6, #10
   2b4c2:	f01c fc29 	bl	47d18 <__errno>
   2b4c6:	463b      	mov	r3, r7
   2b4c8:	6802      	ldr	r2, [r0, #0]
   2b4ca:	4917      	ldr	r1, [pc, #92]	; (2b528 <dfu_target_modem_write+0xe0>)
   2b4cc:	4620      	mov	r0, r4
   2b4ce:	f01c fa19 	bl	47904 <log_string_sync>
	switch (modem_error) {
   2b4d2:	f117 0f0e 	cmn.w	r7, #14
   2b4d6:	d006      	beq.n	2b4e6 <dfu_target_modem_write+0x9e>
		} else {
			return 0;
		}
	}

	return -EFAULT;
   2b4d8:	3709      	adds	r7, #9
   2b4da:	bf0c      	ite	eq
   2b4dc:	f06f 0015 	mvneq.w	r0, #21
   2b4e0:	f06f 000d 	mvnne.w	r0, #13
}
   2b4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delete_banked_modem_fw();
   2b4e6:	f7ff fe2b 	bl	2b140 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2b4ea:	4631      	mov	r1, r6
   2b4ec:	4628      	mov	r0, r5
   2b4ee:	f7ff ffab 	bl	2b448 <dfu_target_modem_write>
		if (err < 0) {
   2b4f2:	2800      	cmp	r0, #0
   2b4f4:	db04      	blt.n	2b500 <dfu_target_modem_write+0xb8>
			return 0;
   2b4f6:	2000      	movs	r0, #0
   2b4f8:	e7f4      	b.n	2b4e4 <dfu_target_modem_write+0x9c>
		return -EFAULT;
   2b4fa:	f06f 000d 	mvn.w	r0, #13
   2b4fe:	e7f1      	b.n	2b4e4 <dfu_target_modem_write+0x9c>
			return -EINVAL;
   2b500:	f06f 0015 	mvn.w	r0, #21
   2b504:	e7ee      	b.n	2b4e4 <dfu_target_modem_write+0x9c>
   2b506:	bf00      	nop
   2b508:	2002496c 	.word	0x2002496c
   2b50c:	20023bf8 	.word	0x20023bf8
   2b510:	0004ce24 	.word	0x0004ce24
   2b514:	0004ccf0 	.word	0x0004ccf0
   2b518:	0004cdf3 	.word	0x0004cdf3
   2b51c:	0004e9c1 	.word	0x0004e9c1
   2b520:	0004a688 	.word	0x0004a688
   2b524:	0004a6f8 	.word	0x0004a6f8
   2b528:	00051298 	.word	0x00051298

0002b52c <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2b52c:	b570      	push	{r4, r5, r6, lr}
   2b52e:	4b3d      	ldr	r3, [pc, #244]	; (2b624 <dfu_target_modem_done+0xf8>)
   2b530:	4c3d      	ldr	r4, [pc, #244]	; (2b628 <dfu_target_modem_done+0xfc>)
   2b532:	2203      	movs	r2, #3
   2b534:	1ae4      	subs	r4, r4, r3
   2b536:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b53a:	4e3c      	ldr	r6, [pc, #240]	; (2b62c <dfu_target_modem_done+0x100>)
	int err = 0;

	if (successful) {
   2b53c:	2800      	cmp	r0, #0
   2b53e:	d062      	beq.n	2b606 <dfu_target_modem_done+0xda>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2b540:	f04f 0000 	mov.w	r0, #0
   2b544:	f362 0002 	bfi	r0, r2, #0, #3
   2b548:	f36f 00c5 	bfc	r0, #3, #3
   2b54c:	f364 108f 	bfi	r0, r4, #6, #10
   2b550:	4937      	ldr	r1, [pc, #220]	; (2b630 <dfu_target_modem_done+0x104>)
   2b552:	f01c f9d7 	bl	47904 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2b556:	2300      	movs	r3, #0
   2b558:	2104      	movs	r1, #4
   2b55a:	461a      	mov	r2, r3
   2b55c:	6830      	ldr	r0, [r6, #0]
   2b55e:	f7ff fdb7 	bl	2b0d0 <setsockopt.constprop.3>
	if (err < 0) {
   2b562:	1e05      	subs	r5, r0, #0
   2b564:	da15      	bge.n	2b592 <dfu_target_modem_done+0x66>
		if (errno == ENOEXEC) {
   2b566:	f01c fbd7 	bl	47d18 <__errno>
   2b56a:	6803      	ldr	r3, [r0, #0]
   2b56c:	2b08      	cmp	r3, #8
   2b56e:	f04f 0301 	mov.w	r3, #1
   2b572:	d13d      	bne.n	2b5f0 <dfu_target_modem_done+0xc4>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2b574:	f04f 0500 	mov.w	r5, #0
   2b578:	f363 0502 	bfi	r5, r3, #0, #3
   2b57c:	f7ff fd7a 	bl	2b074 <get_modem_error>
   2b580:	f36f 05c5 	bfc	r5, #3, #3
   2b584:	f364 158f 	bfi	r5, r4, #6, #10
   2b588:	4602      	mov	r2, r0
   2b58a:	4628      	mov	r0, r5
   2b58c:	4929      	ldr	r1, [pc, #164]	; (2b634 <dfu_target_modem_done+0x108>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2b58e:	f01c f9b9 	bl	47904 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2b592:	4d29      	ldr	r5, [pc, #164]	; (2b638 <dfu_target_modem_done+0x10c>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2b594:	6836      	ldr	r6, [r6, #0]
   2b596:	682b      	ldr	r3, [r5, #0]
   2b598:	b94b      	cbnz	r3, 2b5ae <dfu_target_modem_done+0x82>
   2b59a:	4928      	ldr	r1, [pc, #160]	; (2b63c <dfu_target_modem_done+0x110>)
   2b59c:	4828      	ldr	r0, [pc, #160]	; (2b640 <dfu_target_modem_done+0x114>)
   2b59e:	2321      	movs	r3, #33	; 0x21
   2b5a0:	4a28      	ldr	r2, [pc, #160]	; (2b644 <dfu_target_modem_done+0x118>)
   2b5a2:	f01c f992 	bl	478ca <printk>
   2b5a6:	2121      	movs	r1, #33	; 0x21
   2b5a8:	4826      	ldr	r0, [pc, #152]	; (2b644 <dfu_target_modem_done+0x118>)
   2b5aa:	f01c f99b 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2b5ae:	682b      	ldr	r3, [r5, #0]
   2b5b0:	685b      	ldr	r3, [r3, #4]
   2b5b2:	b94b      	cbnz	r3, 2b5c8 <dfu_target_modem_done+0x9c>
   2b5b4:	4924      	ldr	r1, [pc, #144]	; (2b648 <dfu_target_modem_done+0x11c>)
   2b5b6:	4822      	ldr	r0, [pc, #136]	; (2b640 <dfu_target_modem_done+0x114>)
   2b5b8:	2322      	movs	r3, #34	; 0x22
   2b5ba:	4a22      	ldr	r2, [pc, #136]	; (2b644 <dfu_target_modem_done+0x118>)
   2b5bc:	f01c f985 	bl	478ca <printk>
   2b5c0:	2122      	movs	r1, #34	; 0x22
   2b5c2:	4820      	ldr	r0, [pc, #128]	; (2b644 <dfu_target_modem_done+0x118>)
   2b5c4:	f01c f98e 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   2b5c8:	682b      	ldr	r3, [r5, #0]
   2b5ca:	4630      	mov	r0, r6
   2b5cc:	685b      	ldr	r3, [r3, #4]
   2b5ce:	4798      	blx	r3
	if (err < 0) {
   2b5d0:	1e05      	subs	r5, r0, #0
   2b5d2:	da25      	bge.n	2b620 <dfu_target_modem_done+0xf4>
		LOG_ERR("Failed to close modem DFU socket.");
   2b5d4:	f04f 0000 	mov.w	r0, #0
   2b5d8:	2301      	movs	r3, #1
   2b5da:	f363 0002 	bfi	r0, r3, #0, #3
   2b5de:	f36f 00c5 	bfc	r0, #3, #3
   2b5e2:	f364 108f 	bfi	r0, r4, #6, #10
   2b5e6:	4919      	ldr	r1, [pc, #100]	; (2b64c <dfu_target_modem_done+0x120>)
   2b5e8:	f01c f98c 	bl	47904 <log_string_sync>
		return err;
	}

	return 0;
}
   2b5ec:	4628      	mov	r0, r5
   2b5ee:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2b5f0:	f04f 0000 	mov.w	r0, #0
   2b5f4:	f363 0002 	bfi	r0, r3, #0, #3
   2b5f8:	f36f 00c5 	bfc	r0, #3, #3
   2b5fc:	f364 108f 	bfi	r0, r4, #6, #10
   2b600:	462a      	mov	r2, r5
   2b602:	490c      	ldr	r1, [pc, #48]	; (2b634 <dfu_target_modem_done+0x108>)
   2b604:	e7c3      	b.n	2b58e <dfu_target_modem_done+0x62>
		LOG_INF("Modem upgrade aborted.");
   2b606:	f04f 0300 	mov.w	r3, #0
   2b60a:	f362 0302 	bfi	r3, r2, #0, #3
   2b60e:	f360 03c5 	bfi	r3, r0, #3, #3
   2b612:	f364 138f 	bfi	r3, r4, #6, #10
   2b616:	490e      	ldr	r1, [pc, #56]	; (2b650 <dfu_target_modem_done+0x124>)
   2b618:	4618      	mov	r0, r3
   2b61a:	f01c f973 	bl	47904 <log_string_sync>
   2b61e:	e7b8      	b.n	2b592 <dfu_target_modem_done+0x66>
	return 0;
   2b620:	2500      	movs	r5, #0
   2b622:	e7e3      	b.n	2b5ec <dfu_target_modem_done+0xc0>
   2b624:	0004a688 	.word	0x0004a688
   2b628:	0004a6f8 	.word	0x0004a6f8
   2b62c:	2002496c 	.word	0x2002496c
   2b630:	00051125 	.word	0x00051125
   2b634:	00051154 	.word	0x00051154
   2b638:	20023bf8 	.word	0x20023bf8
   2b63c:	0004ce24 	.word	0x0004ce24
   2b640:	0004ccf0 	.word	0x0004ccf0
   2b644:	0004cdf3 	.word	0x0004cdf3
   2b648:	0004e833 	.word	0x0004e833
   2b64c:	0005118f 	.word	0x0005118f
   2b650:	00051178 	.word	0x00051178

0002b654 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2b654:	6800      	ldr	r0, [r0, #0]
}
   2b656:	4b02      	ldr	r3, [pc, #8]	; (2b660 <dfu_target_mcuboot_identify+0xc>)
   2b658:	1ac3      	subs	r3, r0, r3
   2b65a:	4258      	negs	r0, r3
   2b65c:	4158      	adcs	r0, r3
   2b65e:	4770      	bx	lr
   2b660:	96f3b83d 	.word	0x96f3b83d

0002b664 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size)
{
   2b664:	b538      	push	{r3, r4, r5, lr}
   2b666:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2b668:	4818      	ldr	r0, [pc, #96]	; (2b6cc <dfu_target_mcuboot_init+0x68>)
   2b66a:	f01c fa0d 	bl	47a88 <flash_img_init>

	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2b66e:	f5b5 2fd2 	cmp.w	r5, #430080	; 0x69000
	int err = flash_img_init(&flash_img);
   2b672:	4604      	mov	r4, r0
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2b674:	d913      	bls.n	2b69e <dfu_target_mcuboot_init+0x3a>
		LOG_ERR("Requested file too big to fit in flash");
   2b676:	2301      	movs	r3, #1
   2b678:	f04f 0000 	mov.w	r0, #0
   2b67c:	4a14      	ldr	r2, [pc, #80]	; (2b6d0 <dfu_target_mcuboot_init+0x6c>)
   2b67e:	f363 0002 	bfi	r0, r3, #0, #3
   2b682:	4b14      	ldr	r3, [pc, #80]	; (2b6d4 <dfu_target_mcuboot_init+0x70>)
   2b684:	f36f 00c5 	bfc	r0, #3, #3
   2b688:	1a9b      	subs	r3, r3, r2
   2b68a:	08db      	lsrs	r3, r3, #3
   2b68c:	f363 108f 	bfi	r0, r3, #6, #10
   2b690:	4911      	ldr	r1, [pc, #68]	; (2b6d8 <dfu_target_mcuboot_init+0x74>)
   2b692:	f01c f937 	bl	47904 <log_string_sync>
		return -EFBIG;
   2b696:	f06f 041a 	mvn.w	r4, #26
	}

	offset = 0;

	return 0;
}
   2b69a:	4620      	mov	r0, r4
   2b69c:	bd38      	pop	{r3, r4, r5, pc}
	if (err != 0) {
   2b69e:	b188      	cbz	r0, 2b6c4 <dfu_target_mcuboot_init+0x60>
		LOG_ERR("flash_img_init error %d", err);
   2b6a0:	2301      	movs	r3, #1
   2b6a2:	f04f 0000 	mov.w	r0, #0
   2b6a6:	4a0a      	ldr	r2, [pc, #40]	; (2b6d0 <dfu_target_mcuboot_init+0x6c>)
   2b6a8:	f363 0002 	bfi	r0, r3, #0, #3
   2b6ac:	4b09      	ldr	r3, [pc, #36]	; (2b6d4 <dfu_target_mcuboot_init+0x70>)
   2b6ae:	f36f 00c5 	bfc	r0, #3, #3
   2b6b2:	1a9b      	subs	r3, r3, r2
   2b6b4:	08db      	lsrs	r3, r3, #3
   2b6b6:	f363 108f 	bfi	r0, r3, #6, #10
   2b6ba:	4622      	mov	r2, r4
   2b6bc:	4907      	ldr	r1, [pc, #28]	; (2b6dc <dfu_target_mcuboot_init+0x78>)
   2b6be:	f01c f921 	bl	47904 <log_string_sync>
		return err;
   2b6c2:	e7ea      	b.n	2b69a <dfu_target_mcuboot_init+0x36>
	offset = 0;
   2b6c4:	4b06      	ldr	r3, [pc, #24]	; (2b6e0 <dfu_target_mcuboot_init+0x7c>)
   2b6c6:	6018      	str	r0, [r3, #0]
	return 0;
   2b6c8:	e7e7      	b.n	2b69a <dfu_target_mcuboot_init+0x36>
   2b6ca:	bf00      	nop
   2b6cc:	20024974 	.word	0x20024974
   2b6d0:	0004a688 	.word	0x0004a688
   2b6d4:	0004a6f0 	.word	0x0004a6f0
   2b6d8:	00051386 	.word	0x00051386
   2b6dc:	000513ad 	.word	0x000513ad
   2b6e0:	20024b84 	.word	0x20024b84

0002b6e4 <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
	*out = offset;
   2b6e4:	4b02      	ldr	r3, [pc, #8]	; (2b6f0 <dfu_target_mcuboot_offset_get+0xc>)
   2b6e6:	681b      	ldr	r3, [r3, #0]
   2b6e8:	6003      	str	r3, [r0, #0]
	return 0;
}
   2b6ea:	2000      	movs	r0, #0
   2b6ec:	4770      	bx	lr
   2b6ee:	bf00      	nop
   2b6f0:	20024b84 	.word	0x20024b84

0002b6f4 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   2b6f4:	b538      	push	{r3, r4, r5, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2b6f6:	460a      	mov	r2, r1
{
   2b6f8:	460d      	mov	r5, r1
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2b6fa:	2300      	movs	r3, #0
   2b6fc:	4601      	mov	r1, r0
   2b6fe:	480e      	ldr	r0, [pc, #56]	; (2b738 <dfu_target_mcuboot_write+0x44>)
   2b700:	f01c f97a 	bl	479f8 <flash_img_buffered_write>

	if (err != 0) {
   2b704:	4604      	mov	r4, r0
   2b706:	b190      	cbz	r0, 2b72e <dfu_target_mcuboot_write+0x3a>
		LOG_ERR("flash_img_buffered_write error %d", err);
   2b708:	2301      	movs	r3, #1
   2b70a:	f04f 0000 	mov.w	r0, #0
   2b70e:	4a0b      	ldr	r2, [pc, #44]	; (2b73c <dfu_target_mcuboot_write+0x48>)
   2b710:	f363 0002 	bfi	r0, r3, #0, #3
   2b714:	4b0a      	ldr	r3, [pc, #40]	; (2b740 <dfu_target_mcuboot_write+0x4c>)
   2b716:	f36f 00c5 	bfc	r0, #3, #3
   2b71a:	1a9b      	subs	r3, r3, r2
   2b71c:	08db      	lsrs	r3, r3, #3
   2b71e:	f363 108f 	bfi	r0, r3, #6, #10
   2b722:	4622      	mov	r2, r4
   2b724:	4907      	ldr	r1, [pc, #28]	; (2b744 <dfu_target_mcuboot_write+0x50>)
   2b726:	f01c f8ed 	bl	47904 <log_string_sync>
	}

	offset += len;

	return 0;
}
   2b72a:	4620      	mov	r0, r4
   2b72c:	bd38      	pop	{r3, r4, r5, pc}
	offset += len;
   2b72e:	4b06      	ldr	r3, [pc, #24]	; (2b748 <dfu_target_mcuboot_write+0x54>)
   2b730:	6819      	ldr	r1, [r3, #0]
   2b732:	4429      	add	r1, r5
   2b734:	6019      	str	r1, [r3, #0]
	return 0;
   2b736:	e7f8      	b.n	2b72a <dfu_target_mcuboot_write+0x36>
   2b738:	20024974 	.word	0x20024974
   2b73c:	0004a688 	.word	0x0004a688
   2b740:	0004a6f0 	.word	0x0004a6f0
   2b744:	000513c5 	.word	0x000513c5
   2b748:	20024b84 	.word	0x20024b84

0002b74c <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2b74c:	b538      	push	{r3, r4, r5, lr}
   2b74e:	4d22      	ldr	r5, [pc, #136]	; (2b7d8 <dfu_target_mcuboot_done+0x8c>)
   2b750:	4b22      	ldr	r3, [pc, #136]	; (2b7dc <dfu_target_mcuboot_done+0x90>)
	if (successful) {
   2b752:	4604      	mov	r4, r0
   2b754:	1aed      	subs	r5, r5, r3
   2b756:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2b75a:	b388      	cbz	r0, 2b7c0 <dfu_target_mcuboot_done+0x74>
		int err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2b75c:	2200      	movs	r2, #0
   2b75e:	2301      	movs	r3, #1
   2b760:	4611      	mov	r1, r2
   2b762:	481f      	ldr	r0, [pc, #124]	; (2b7e0 <dfu_target_mcuboot_done+0x94>)
   2b764:	f01c f948 	bl	479f8 <flash_img_buffered_write>

		if (err != 0) {
   2b768:	4604      	mov	r4, r0
   2b76a:	b170      	cbz	r0, 2b78a <dfu_target_mcuboot_done+0x3e>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2b76c:	f04f 0000 	mov.w	r0, #0
   2b770:	2301      	movs	r3, #1
   2b772:	4622      	mov	r2, r4
   2b774:	f363 0002 	bfi	r0, r3, #0, #3
   2b778:	f36f 00c5 	bfc	r0, #3, #3
   2b77c:	4919      	ldr	r1, [pc, #100]	; (2b7e4 <dfu_target_mcuboot_done+0x98>)
   2b77e:	f365 108f 	bfi	r0, r5, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2b782:	f01c f8bf 	bl	47904 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return 0;
}
   2b786:	4620      	mov	r0, r4
   2b788:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2b78a:	f7f5 fa5b 	bl	20c44 <boot_request_upgrade>
		if (err != 0) {
   2b78e:	4604      	mov	r4, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   2b790:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   2b794:	b14c      	cbz	r4, 2b7aa <dfu_target_mcuboot_done+0x5e>
			LOG_ERR("boot_request_upgrade error %d", err);
   2b796:	2301      	movs	r3, #1
   2b798:	f363 0002 	bfi	r0, r3, #0, #3
   2b79c:	f36f 00c5 	bfc	r0, #3, #3
   2b7a0:	f365 108f 	bfi	r0, r5, #6, #10
   2b7a4:	4622      	mov	r2, r4
   2b7a6:	4910      	ldr	r1, [pc, #64]	; (2b7e8 <dfu_target_mcuboot_done+0x9c>)
   2b7a8:	e7eb      	b.n	2b782 <dfu_target_mcuboot_done+0x36>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2b7aa:	2303      	movs	r3, #3
   2b7ac:	f363 0002 	bfi	r0, r3, #0, #3
   2b7b0:	f364 00c5 	bfi	r0, r4, #3, #3
   2b7b4:	490d      	ldr	r1, [pc, #52]	; (2b7ec <dfu_target_mcuboot_done+0xa0>)
   2b7b6:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   2b7ba:	f01c f8a3 	bl	47904 <log_string_sync>
   2b7be:	e7e2      	b.n	2b786 <dfu_target_mcuboot_done+0x3a>
   2b7c0:	f04f 0000 	mov.w	r0, #0
   2b7c4:	2303      	movs	r3, #3
   2b7c6:	f363 0002 	bfi	r0, r3, #0, #3
   2b7ca:	f364 00c5 	bfi	r0, r4, #3, #3
   2b7ce:	f365 108f 	bfi	r0, r5, #6, #10
   2b7d2:	4907      	ldr	r1, [pc, #28]	; (2b7f0 <dfu_target_mcuboot_done+0xa4>)
   2b7d4:	e7f1      	b.n	2b7ba <dfu_target_mcuboot_done+0x6e>
   2b7d6:	bf00      	nop
   2b7d8:	0004a6f0 	.word	0x0004a6f0
   2b7dc:	0004a688 	.word	0x0004a688
   2b7e0:	20024974 	.word	0x20024974
   2b7e4:	000513c5 	.word	0x000513c5
   2b7e8:	0005130e 	.word	0x0005130e
   2b7ec:	0005132c 	.word	0x0005132c
   2b7f0:	00051367 	.word	0x00051367

0002b7f4 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   2b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   2b7f6:	b1da      	cbz	r2, 2b830 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b7f8:	2300      	movs	r3, #0
	bool id_found = false;
   2b7fa:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b7fc:	4e0e      	ldr	r6, [pc, #56]	; (2b838 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   2b7fe:	4f0f      	ldr	r7, [pc, #60]	; (2b83c <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b800:	42b3      	cmp	r3, r6
   2b802:	d306      	bcc.n	2b812 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   2b804:	2c00      	cmp	r4, #0
   2b806:	bf14      	ite	ne
   2b808:	f06f 0008 	mvnne.w	r0, #8
   2b80c:	f06f 0001 	mvneq.w	r0, #1
   2b810:	e009      	b.n	2b826 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   2b812:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   2b816:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   2b81a:	4560      	cmp	r0, ip
   2b81c:	d106      	bne.n	2b82c <abi_getter+0x38>
			if (index-- == 0) {
   2b81e:	1e4c      	subs	r4, r1, #1
   2b820:	b911      	cbnz	r1, 2b828 <abi_getter+0x34>
				return 0;
   2b822:	4608      	mov	r0, r1
				*abi = ext_abi;
   2b824:	6015      	str	r5, [r2, #0]
}
   2b826:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   2b828:	4621      	mov	r1, r4
			id_found = true;
   2b82a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b82c:	3301      	adds	r3, #1
   2b82e:	e7e7      	b.n	2b800 <abi_getter+0xc>
		return -EFAULT;
   2b830:	f06f 000d 	mvn.w	r0, #13
   2b834:	e7f7      	b.n	2b826 <abi_getter+0x32>
   2b836:	bf00      	nop
   2b838:	00000000 	.word	0x00000000
   2b83c:	00052f20 	.word	0x00052f20

0002b840 <close>:
{
   2b840:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b842:	4c10      	ldr	r4, [pc, #64]	; (2b884 <close+0x44>)
{
   2b844:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2b846:	6823      	ldr	r3, [r4, #0]
   2b848:	b94b      	cbnz	r3, 2b85e <close+0x1e>
   2b84a:	490f      	ldr	r1, [pc, #60]	; (2b888 <close+0x48>)
   2b84c:	480f      	ldr	r0, [pc, #60]	; (2b88c <close+0x4c>)
   2b84e:	2321      	movs	r3, #33	; 0x21
   2b850:	4a0f      	ldr	r2, [pc, #60]	; (2b890 <close+0x50>)
   2b852:	f01c f83a 	bl	478ca <printk>
   2b856:	2121      	movs	r1, #33	; 0x21
   2b858:	480d      	ldr	r0, [pc, #52]	; (2b890 <close+0x50>)
   2b85a:	f01c f843 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2b85e:	6823      	ldr	r3, [r4, #0]
   2b860:	685b      	ldr	r3, [r3, #4]
   2b862:	b94b      	cbnz	r3, 2b878 <close+0x38>
   2b864:	490b      	ldr	r1, [pc, #44]	; (2b894 <close+0x54>)
   2b866:	4809      	ldr	r0, [pc, #36]	; (2b88c <close+0x4c>)
   2b868:	2322      	movs	r3, #34	; 0x22
   2b86a:	4a09      	ldr	r2, [pc, #36]	; (2b890 <close+0x50>)
   2b86c:	f01c f82d 	bl	478ca <printk>
   2b870:	2122      	movs	r1, #34	; 0x22
   2b872:	4807      	ldr	r0, [pc, #28]	; (2b890 <close+0x50>)
   2b874:	f01c f836 	bl	478e4 <assert_post_action>
	return socket_ops->close(sock);
   2b878:	6823      	ldr	r3, [r4, #0]
   2b87a:	4628      	mov	r0, r5
}
   2b87c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2b880:	685b      	ldr	r3, [r3, #4]
   2b882:	4718      	bx	r3
   2b884:	20023bf8 	.word	0x20023bf8
   2b888:	0004ce24 	.word	0x0004ce24
   2b88c:	0004ccf0 	.word	0x0004ccf0
   2b890:	0004cdf3 	.word	0x0004cdf3
   2b894:	0004e833 	.word	0x0004e833

0002b898 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   2b898:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   2b89a:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   2b89c:	b118      	cbz	r0, 2b8a6 <callback_worker+0xe>
		data->callback(data->data);
   2b89e:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   2b8a2:	300c      	adds	r0, #12
   2b8a4:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   2b8a6:	a901      	add	r1, sp, #4
   2b8a8:	4802      	ldr	r0, [pc, #8]	; (2b8b4 <callback_worker+0x1c>)
   2b8aa:	f011 fc63 	bl	3d174 <k_mem_slab_free>
}
   2b8ae:	b003      	add	sp, #12
   2b8b0:	f85d fb04 	ldr.w	pc, [sp], #4
   2b8b4:	20032488 	.word	0x20032488

0002b8b8 <open_socket>:
{
   2b8b8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b8ba:	4c16      	ldr	r4, [pc, #88]	; (2b914 <open_socket+0x5c>)
   2b8bc:	6823      	ldr	r3, [r4, #0]
   2b8be:	b94b      	cbnz	r3, 2b8d4 <open_socket+0x1c>
   2b8c0:	4915      	ldr	r1, [pc, #84]	; (2b918 <open_socket+0x60>)
   2b8c2:	4816      	ldr	r0, [pc, #88]	; (2b91c <open_socket+0x64>)
   2b8c4:	2319      	movs	r3, #25
   2b8c6:	4a16      	ldr	r2, [pc, #88]	; (2b920 <open_socket+0x68>)
   2b8c8:	f01b ffff 	bl	478ca <printk>
   2b8cc:	2119      	movs	r1, #25
   2b8ce:	4814      	ldr	r0, [pc, #80]	; (2b920 <open_socket+0x68>)
   2b8d0:	f01c f808 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2b8d4:	6823      	ldr	r3, [r4, #0]
   2b8d6:	681b      	ldr	r3, [r3, #0]
   2b8d8:	b94b      	cbnz	r3, 2b8ee <open_socket+0x36>
   2b8da:	4912      	ldr	r1, [pc, #72]	; (2b924 <open_socket+0x6c>)
   2b8dc:	480f      	ldr	r0, [pc, #60]	; (2b91c <open_socket+0x64>)
   2b8de:	231a      	movs	r3, #26
   2b8e0:	4a0f      	ldr	r2, [pc, #60]	; (2b920 <open_socket+0x68>)
   2b8e2:	f01b fff2 	bl	478ca <printk>
   2b8e6:	211a      	movs	r1, #26
   2b8e8:	480d      	ldr	r0, [pc, #52]	; (2b920 <open_socket+0x68>)
   2b8ea:	f01b fffb 	bl	478e4 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2b8ee:	6823      	ldr	r3, [r4, #0]
   2b8f0:	f240 2201 	movw	r2, #513	; 0x201
   2b8f4:	681b      	ldr	r3, [r3, #0]
   2b8f6:	2100      	movs	r1, #0
   2b8f8:	2066      	movs	r0, #102	; 0x66
   2b8fa:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   2b8fc:	4b0a      	ldr	r3, [pc, #40]	; (2b928 <open_socket+0x70>)
   2b8fe:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   2b900:	3001      	adds	r0, #1
   2b902:	d104      	bne.n	2b90e <open_socket+0x56>
		return -errno;
   2b904:	f01c fa08 	bl	47d18 <__errno>
   2b908:	6800      	ldr	r0, [r0, #0]
   2b90a:	4240      	negs	r0, r0
}
   2b90c:	bd10      	pop	{r4, pc}
	return 0;
   2b90e:	2000      	movs	r0, #0
   2b910:	e7fc      	b.n	2b90c <open_socket+0x54>
   2b912:	bf00      	nop
   2b914:	20023bf8 	.word	0x20023bf8
   2b918:	0004ce24 	.word	0x0004ce24
   2b91c:	0004ccf0 	.word	0x0004ccf0
   2b920:	0004cdf3 	.word	0x0004cdf3
   2b924:	0004e845 	.word	0x0004e845
   2b928:	20024b88 	.word	0x20024b88

0002b92c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   2b92c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b930:	4680      	mov	r8, r0
   2b932:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   2b934:	f015 ff76 	bl	41824 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   2b938:	4c32      	ldr	r4, [pc, #200]	; (2ba04 <at_write+0xd8>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2b93a:	4b33      	ldr	r3, [pc, #204]	; (2ba08 <at_write+0xdc>)
	int bytes_to_send = strlen(cmd);
   2b93c:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2b93e:	681f      	ldr	r7, [r3, #0]
   2b940:	6823      	ldr	r3, [r4, #0]
   2b942:	b94b      	cbnz	r3, 2b958 <at_write+0x2c>
   2b944:	4931      	ldr	r1, [pc, #196]	; (2ba0c <at_write+0xe0>)
   2b946:	4832      	ldr	r0, [pc, #200]	; (2ba10 <at_write+0xe4>)
   2b948:	237e      	movs	r3, #126	; 0x7e
   2b94a:	4a32      	ldr	r2, [pc, #200]	; (2ba14 <at_write+0xe8>)
   2b94c:	f01b ffbd 	bl	478ca <printk>
   2b950:	217e      	movs	r1, #126	; 0x7e
   2b952:	4830      	ldr	r0, [pc, #192]	; (2ba14 <at_write+0xe8>)
   2b954:	f01b ffc6 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2b958:	6823      	ldr	r3, [r4, #0]
   2b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b95c:	b94b      	cbnz	r3, 2b972 <at_write+0x46>
   2b95e:	492e      	ldr	r1, [pc, #184]	; (2ba18 <at_write+0xec>)
   2b960:	482b      	ldr	r0, [pc, #172]	; (2ba10 <at_write+0xe4>)
   2b962:	237f      	movs	r3, #127	; 0x7f
   2b964:	4a2b      	ldr	r2, [pc, #172]	; (2ba14 <at_write+0xe8>)
   2b966:	f01b ffb0 	bl	478ca <printk>
   2b96a:	217f      	movs	r1, #127	; 0x7f
   2b96c:	4829      	ldr	r0, [pc, #164]	; (2ba14 <at_write+0xe8>)
   2b96e:	f01b ffb9 	bl	478e4 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2b972:	6823      	ldr	r3, [r4, #0]
   2b974:	4632      	mov	r2, r6
   2b976:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2b978:	4641      	mov	r1, r8
   2b97a:	2300      	movs	r3, #0
   2b97c:	4638      	mov	r0, r7
   2b97e:	47a0      	blx	r4

	if (bytes_sent == -1) {
   2b980:	1c43      	adds	r3, r0, #1
   2b982:	4604      	mov	r4, r0
   2b984:	d122      	bne.n	2b9cc <at_write+0xa0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2b986:	2601      	movs	r6, #1
   2b988:	f04f 0400 	mov.w	r4, #0
   2b98c:	4a23      	ldr	r2, [pc, #140]	; (2ba1c <at_write+0xf0>)
   2b98e:	4b24      	ldr	r3, [pc, #144]	; (2ba20 <at_write+0xf4>)
   2b990:	f366 0402 	bfi	r4, r6, #0, #3
   2b994:	1a9b      	subs	r3, r3, r2
   2b996:	08db      	lsrs	r3, r3, #3
   2b998:	f36f 04c5 	bfc	r4, #3, #3
   2b99c:	f363 148f 	bfi	r4, r3, #6, #10
   2b9a0:	f01c f9ba 	bl	47d18 <__errno>
   2b9a4:	491f      	ldr	r1, [pc, #124]	; (2ba24 <at_write+0xf8>)
   2b9a6:	6802      	ldr	r2, [r0, #0]
   2b9a8:	4620      	mov	r0, r4
   2b9aa:	f01b ffab 	bl	47904 <log_string_sync>
		ret.code  = -errno;
   2b9ae:	f01c f9b3 	bl	47d18 <__errno>
   2b9b2:	6803      	ldr	r3, [r0, #0]
		ret.state = AT_CMD_ERROR;
   2b9b4:	f88d 6004 	strb.w	r6, [sp, #4]
		ret.code  = -errno;
   2b9b8:	425b      	negs	r3, r3
   2b9ba:	9300      	str	r3, [sp, #0]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   2b9bc:	b115      	cbz	r5, 2b9c4 <at_write+0x98>
		*state = ret.state;
   2b9be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2b9c2:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   2b9c4:	9800      	ldr	r0, [sp, #0]
   2b9c6:	b002      	add	sp, #8
   2b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&q, *(u32_t *)&data, *(u32_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   2b9cc:	f04f 32ff 	mov.w	r2, #4294967295
   2b9d0:	4669      	mov	r1, sp
   2b9d2:	4815      	ldr	r0, [pc, #84]	; (2ba28 <at_write+0xfc>)
   2b9d4:	f011 fdde 	bl	3d594 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   2b9d8:	42a6      	cmp	r6, r4
   2b9da:	d0ef      	beq.n	2b9bc <at_write+0x90>
			LOG_ERR("Bytes sent (%d) was not the "
   2b9dc:	2301      	movs	r3, #1
   2b9de:	f04f 0000 	mov.w	r0, #0
   2b9e2:	4a0e      	ldr	r2, [pc, #56]	; (2ba1c <at_write+0xf0>)
   2b9e4:	f363 0002 	bfi	r0, r3, #0, #3
   2b9e8:	4b0d      	ldr	r3, [pc, #52]	; (2ba20 <at_write+0xf4>)
   2b9ea:	f36f 00c5 	bfc	r0, #3, #3
   2b9ee:	1a9b      	subs	r3, r3, r2
   2b9f0:	08db      	lsrs	r3, r3, #3
   2b9f2:	f363 108f 	bfi	r0, r3, #6, #10
   2b9f6:	4622      	mov	r2, r4
   2b9f8:	4633      	mov	r3, r6
   2b9fa:	490c      	ldr	r1, [pc, #48]	; (2ba2c <at_write+0x100>)
   2b9fc:	f01b ff82 	bl	47904 <log_string_sync>
   2ba00:	e7dc      	b.n	2b9bc <at_write+0x90>
   2ba02:	bf00      	nop
   2ba04:	20023bf8 	.word	0x20023bf8
   2ba08:	20024b88 	.word	0x20024b88
   2ba0c:	0004ce24 	.word	0x0004ce24
   2ba10:	0004ccf0 	.word	0x0004ccf0
   2ba14:	0004cdf3 	.word	0x0004cdf3
   2ba18:	0004e9c1 	.word	0x0004e9c1
   2ba1c:	0004a688 	.word	0x0004a688
   2ba20:	0004a698 	.word	0x0004a698
   2ba24:	0005141c 	.word	0x0005141c
   2ba28:	20032544 	.word	0x20032544
   2ba2c:	0005143f 	.word	0x0005143f

0002ba30 <socket_thread_fn>:
{
   2ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   2ba34:	4b9a      	ldr	r3, [pc, #616]	; (2bca0 <socket_thread_fn+0x270>)
   2ba36:	4c9b      	ldr	r4, [pc, #620]	; (2bca4 <socket_thread_fn+0x274>)
{
   2ba38:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   2ba3a:	1ae4      	subs	r4, r4, r3
   2ba3c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   2ba40:	f04f 32ff 	mov.w	r2, #4294967295
   2ba44:	a903      	add	r1, sp, #12
   2ba46:	4898      	ldr	r0, [pc, #608]	; (2bca8 <socket_thread_fn+0x278>)
   2ba48:	f011 fb30 	bl	3d0ac <k_mem_slab_alloc>
		ret.code  = 0;
   2ba4c:	2300      	movs	r3, #0
		item->callback = NULL;
   2ba4e:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   2ba50:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   2ba52:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   2ba56:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   2ba5a:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 2bd00 <socket_thread_fn+0x2d0>
		bytes_read = recv(common_socket_fd, item->data,
   2ba5e:	4b93      	ldr	r3, [pc, #588]	; (2bcac <socket_thread_fn+0x27c>)
   2ba60:	350c      	adds	r5, #12
   2ba62:	f8d3 b000 	ldr.w	fp, [r3]
   2ba66:	f8da 3000 	ldr.w	r3, [sl]
   2ba6a:	b94b      	cbnz	r3, 2ba80 <socket_thread_fn+0x50>
   2ba6c:	4990      	ldr	r1, [pc, #576]	; (2bcb0 <socket_thread_fn+0x280>)
   2ba6e:	4891      	ldr	r0, [pc, #580]	; (2bcb4 <socket_thread_fn+0x284>)
   2ba70:	2369      	movs	r3, #105	; 0x69
   2ba72:	4a91      	ldr	r2, [pc, #580]	; (2bcb8 <socket_thread_fn+0x288>)
   2ba74:	f01b ff29 	bl	478ca <printk>
   2ba78:	2169      	movs	r1, #105	; 0x69
   2ba7a:	488f      	ldr	r0, [pc, #572]	; (2bcb8 <socket_thread_fn+0x288>)
   2ba7c:	f01b ff32 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2ba80:	f8da 3000 	ldr.w	r3, [sl]
   2ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ba86:	b94b      	cbnz	r3, 2ba9c <socket_thread_fn+0x6c>
   2ba88:	498c      	ldr	r1, [pc, #560]	; (2bcbc <socket_thread_fn+0x28c>)
   2ba8a:	488a      	ldr	r0, [pc, #552]	; (2bcb4 <socket_thread_fn+0x284>)
   2ba8c:	236a      	movs	r3, #106	; 0x6a
   2ba8e:	4a8a      	ldr	r2, [pc, #552]	; (2bcb8 <socket_thread_fn+0x288>)
   2ba90:	f01b ff1b 	bl	478ca <printk>
   2ba94:	216a      	movs	r1, #106	; 0x6a
   2ba96:	4888      	ldr	r0, [pc, #544]	; (2bcb8 <socket_thread_fn+0x288>)
   2ba98:	f01b ff24 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2ba9c:	f8da 3000 	ldr.w	r3, [sl]
   2baa0:	f640 228c 	movw	r2, #2700	; 0xa8c
   2baa4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   2baa8:	4629      	mov	r1, r5
   2baaa:	2300      	movs	r3, #0
   2baac:	4658      	mov	r0, fp
   2baae:	47d0      	blx	sl
		if (bytes_read < 0) {
   2bab0:	1e02      	subs	r2, r0, #0
   2bab2:	da56      	bge.n	2bb62 <socket_thread_fn+0x132>
			LOG_ERR("AT socket recv failed with err %d",
   2bab4:	2501      	movs	r5, #1
   2bab6:	f365 0602 	bfi	r6, r5, #0, #3
   2baba:	f36f 06c5 	bfc	r6, #3, #3
   2babe:	f364 168f 	bfi	r6, r4, #6, #10
   2bac2:	4630      	mov	r0, r6
   2bac4:	497e      	ldr	r1, [pc, #504]	; (2bcc0 <socket_thread_fn+0x290>)
   2bac6:	f01b ff1d 	bl	47904 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2baca:	4b78      	ldr	r3, [pc, #480]	; (2bcac <socket_thread_fn+0x27c>)
   2bacc:	6818      	ldr	r0, [r3, #0]
   2bace:	f7ff feb7 	bl	2b840 <close>
   2bad2:	bb78      	cbnz	r0, 2bb34 <socket_thread_fn+0x104>
			    (open_socket() == 0)) {
   2bad4:	f7ff fef0 	bl	2b8b8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2bad8:	bb60      	cbnz	r0, 2bb34 <socket_thread_fn+0x104>
				LOG_INF("AT socket recovered");
   2bada:	2303      	movs	r3, #3
   2badc:	f363 0702 	bfi	r7, r3, #0, #3
   2bae0:	f360 07c5 	bfi	r7, r0, #3, #3
   2bae4:	f364 178f 	bfi	r7, r4, #6, #10
   2bae8:	4976      	ldr	r1, [pc, #472]	; (2bcc4 <socket_thread_fn+0x294>)
   2baea:	4638      	mov	r0, r7
   2baec:	f01b ff0a 	bl	47904 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   2baf0:	f88d 5014 	strb.w	r5, [sp, #20]
				ret.code  = -errno;
   2baf4:	f01c f910 	bl	47d18 <__errno>
   2baf8:	6803      	ldr	r3, [r0, #0]
   2bafa:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   2bafc:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   2bafe:	9903      	ldr	r1, [sp, #12]
   2bb00:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   2bb04:	2b00      	cmp	r3, #0
   2bb06:	f040 80a7 	bne.w	2bc58 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   2bb0a:	a903      	add	r1, sp, #12
   2bb0c:	4866      	ldr	r0, [pc, #408]	; (2bca8 <socket_thread_fn+0x278>)
   2bb0e:	f011 fb31 	bl	3d174 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   2bb12:	4b6d      	ldr	r3, [pc, #436]	; (2bcc8 <socket_thread_fn+0x298>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   2bb14:	689b      	ldr	r3, [r3, #8]
   2bb16:	2b00      	cmp	r3, #0
   2bb18:	d192      	bne.n	2ba40 <socket_thread_fn+0x10>
   2bb1a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2bb1e:	2a04      	cmp	r2, #4
   2bb20:	d08e      	beq.n	2ba40 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   2bb22:	4a6a      	ldr	r2, [pc, #424]	; (2bccc <socket_thread_fn+0x29c>)
   2bb24:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   2bb26:	f04f 32ff 	mov.w	r2, #4294967295
   2bb2a:	a904      	add	r1, sp, #16
   2bb2c:	4868      	ldr	r0, [pc, #416]	; (2bcd0 <socket_thread_fn+0x2a0>)
   2bb2e:	f011 fc8b 	bl	3d448 <z_impl_k_msgq_put>
   2bb32:	e785      	b.n	2ba40 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2bb34:	2301      	movs	r3, #1
   2bb36:	f04f 0500 	mov.w	r5, #0
   2bb3a:	f363 0502 	bfi	r5, r3, #0, #3
   2bb3e:	f01c f8eb 	bl	47d18 <__errno>
   2bb42:	f36f 05c5 	bfc	r5, #3, #3
   2bb46:	f364 158f 	bfi	r5, r4, #6, #10
   2bb4a:	6802      	ldr	r2, [r0, #0]
   2bb4c:	4961      	ldr	r1, [pc, #388]	; (2bcd4 <socket_thread_fn+0x2a4>)
   2bb4e:	4628      	mov	r0, r5
   2bb50:	f01b fed8 	bl	47904 <log_string_sync>
			close(common_socket_fd);
   2bb54:	4b55      	ldr	r3, [pc, #340]	; (2bcac <socket_thread_fn+0x27c>)
   2bb56:	6818      	ldr	r0, [r3, #0]
   2bb58:	f7ff fe72 	bl	2b840 <close>
}
   2bb5c:	b007      	add	sp, #28
   2bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   2bb62:	f640 238c 	movw	r3, #2700	; 0xa8c
   2bb66:	429a      	cmp	r2, r3
   2bb68:	d004      	beq.n	2bb74 <socket_thread_fn+0x144>
			   item->data[bytes_read - 1] != '\0') {
   2bb6a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2bb6e:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   2bb70:	7ad3      	ldrb	r3, [r2, #11]
   2bb72:	b16b      	cbz	r3, 2bb90 <socket_thread_fn+0x160>
			LOG_ERR("AT message to large for reception buffer or "
   2bb74:	2301      	movs	r3, #1
   2bb76:	f363 0802 	bfi	r8, r3, #0, #3
   2bb7a:	f36f 08c5 	bfc	r8, #3, #3
   2bb7e:	f364 188f 	bfi	r8, r4, #6, #10
   2bb82:	4955      	ldr	r1, [pc, #340]	; (2bcd8 <socket_thread_fn+0x2a8>)
   2bb84:	4640      	mov	r0, r8
   2bb86:	f01b febd 	bl	47904 <log_string_sync>
			ret.code  = -ENOBUFS;
   2bb8a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2bb8e:	e7b5      	b.n	2bafc <socket_thread_fn+0xcc>
	ret->state = AT_CMD_NOTIFICATION;
   2bb90:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   2bb92:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2bb96:	4951      	ldr	r1, [pc, #324]	; (2bcdc <socket_thread_fn+0x2ac>)
   2bb98:	4628      	mov	r0, r5
   2bb9a:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   2bb9c:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2bba0:	f016 f850 	bl	41c44 <strstr>
		if (tmpstr) {
   2bba4:	4683      	mov	fp, r0
   2bba6:	b120      	cbz	r0, 2bbb2 <socket_thread_fn+0x182>
			ret->state = AT_CMD_OK;
   2bba8:	9b01      	ldr	r3, [sp, #4]
   2bbaa:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2bbae:	9304      	str	r3, [sp, #16]
   2bbb0:	e00d      	b.n	2bbce <socket_thread_fn+0x19e>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2bbb2:	494b      	ldr	r1, [pc, #300]	; (2bce0 <socket_thread_fn+0x2b0>)
   2bbb4:	4628      	mov	r0, r5
   2bbb6:	f016 f845 	bl	41c44 <strstr>
		if (tmpstr) {
   2bbba:	4683      	mov	fp, r0
   2bbbc:	b320      	cbz	r0, 2bc08 <socket_thread_fn+0x1d8>
			ret->state = AT_CMD_ERROR_CMS;
   2bbbe:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2bbc0:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   2bbc4:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2bbc8:	f014 fea4 	bl	40914 <atoi>
   2bbcc:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   2bbce:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2bbd0:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   2bbd4:	3201      	adds	r2, #1
   2bbd6:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   2bbda:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2bbde:	2b04      	cmp	r3, #4
   2bbe0:	d055      	beq.n	2bc8e <socket_thread_fn+0x25e>
			if ((response_buf_len > 0) &&
   2bbe2:	f8df a120 	ldr.w	sl, [pc, #288]	; 2bd04 <socket_thread_fn+0x2d4>
   2bbe6:	f8da 3000 	ldr.w	r3, [sl]
   2bbea:	b383      	cbz	r3, 2bc4e <socket_thread_fn+0x21e>
			    (response_buf != NULL)) {
   2bbec:	4d3d      	ldr	r5, [pc, #244]	; (2bce4 <socket_thread_fn+0x2b4>)
   2bbee:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   2bbf0:	b368      	cbz	r0, 2bc4e <socket_thread_fn+0x21e>
				if (response_buf_len > payload_len) {
   2bbf2:	4293      	cmp	r3, r2
   2bbf4:	d91c      	bls.n	2bc30 <socket_thread_fn+0x200>
   2bbf6:	9903      	ldr	r1, [sp, #12]
   2bbf8:	310c      	adds	r1, #12
   2bbfa:	f7ee f959 	bl	19eb0 <memcpy>
				response_buf_len = 0;
   2bbfe:	2300      	movs	r3, #0
   2bc00:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   2bc04:	602b      	str	r3, [r5, #0]
				goto next;
   2bc06:	e77a      	b.n	2bafe <socket_thread_fn+0xce>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2bc08:	4937      	ldr	r1, [pc, #220]	; (2bce8 <socket_thread_fn+0x2b8>)
   2bc0a:	4628      	mov	r0, r5
   2bc0c:	f016 f81a 	bl	41c44 <strstr>
		if (tmpstr) {
   2bc10:	4683      	mov	fp, r0
   2bc12:	b108      	cbz	r0, 2bc18 <socket_thread_fn+0x1e8>
			ret->state = AT_CMD_ERROR_CME;
   2bc14:	2303      	movs	r3, #3
   2bc16:	e7d3      	b.n	2bbc0 <socket_thread_fn+0x190>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   2bc18:	4934      	ldr	r1, [pc, #208]	; (2bcec <socket_thread_fn+0x2bc>)
   2bc1a:	4628      	mov	r0, r5
   2bc1c:	f016 f812 	bl	41c44 <strstr>
		if (tmpstr) {
   2bc20:	4683      	mov	fp, r0
   2bc22:	b378      	cbz	r0, 2bc84 <socket_thread_fn+0x254>
			ret->state = AT_CMD_ERROR;
   2bc24:	2301      	movs	r3, #1
   2bc26:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2bc2a:	f06f 0307 	mvn.w	r3, #7
   2bc2e:	e7be      	b.n	2bbae <socket_thread_fn+0x17e>
					LOG_ERR("Response buffer not large "
   2bc30:	2301      	movs	r3, #1
   2bc32:	f363 0902 	bfi	r9, r3, #0, #3
   2bc36:	f36f 09c5 	bfc	r9, #3, #3
   2bc3a:	f364 198f 	bfi	r9, r4, #6, #10
   2bc3e:	492c      	ldr	r1, [pc, #176]	; (2bcf0 <socket_thread_fn+0x2c0>)
   2bc40:	4648      	mov	r0, r9
   2bc42:	f01b fe5f 	bl	47904 <log_string_sync>
					ret.code  = -EMSGSIZE;
   2bc46:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2bc4a:	9304      	str	r3, [sp, #16]
   2bc4c:	e7d7      	b.n	2bbfe <socket_thread_fn+0x1ce>
		if (payload_len == 0) {
   2bc4e:	2a00      	cmp	r2, #0
   2bc50:	f43f af55 	beq.w	2bafe <socket_thread_fn+0xce>
			item->callback = current_cmd_handler;
   2bc54:	4b1d      	ldr	r3, [pc, #116]	; (2bccc <socket_thread_fn+0x29c>)
   2bc56:	e01e      	b.n	2bc96 <socket_thread_fn+0x266>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2bc58:	4b26      	ldr	r3, [pc, #152]	; (2bcf4 <socket_thread_fn+0x2c4>)
   2bc5a:	2200      	movs	r2, #0
   2bc5c:	604b      	str	r3, [r1, #4]
   2bc5e:	460b      	mov	r3, r1
   2bc60:	600a      	str	r2, [r1, #0]
   2bc62:	f843 2f08 	str.w	r2, [r3, #8]!
   2bc66:	e8d3 2fef 	ldaex	r2, [r3]
   2bc6a:	f042 0001 	orr.w	r0, r2, #1
   2bc6e:	e8c3 0fe5 	stlex	r5, r0, [r3]
   2bc72:	2d00      	cmp	r5, #0
   2bc74:	d1f7      	bne.n	2bc66 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2bc76:	07d3      	lsls	r3, r2, #31
   2bc78:	f53f af4b 	bmi.w	2bb12 <socket_thread_fn+0xe2>
		k_queue_append(&work_q->queue, work);
   2bc7c:	481e      	ldr	r0, [pc, #120]	; (2bcf8 <socket_thread_fn+0x2c8>)
   2bc7e:	f01e f9e5 	bl	4a04c <k_queue_append>
   2bc82:	e746      	b.n	2bb12 <socket_thread_fn+0xe2>
		new_len = strlen(buf) + 1;
   2bc84:	4628      	mov	r0, r5
   2bc86:	f015 fdcd 	bl	41824 <strlen>
   2bc8a:	1c42      	adds	r2, r0, #1
   2bc8c:	e7a5      	b.n	2bbda <socket_thread_fn+0x1aa>
		if (payload_len == 0) {
   2bc8e:	2a00      	cmp	r2, #0
   2bc90:	f43f af35 	beq.w	2bafe <socket_thread_fn+0xce>
			item->callback = notification_handler;
   2bc94:	4b19      	ldr	r3, [pc, #100]	; (2bcfc <socket_thread_fn+0x2cc>)
			item->callback = current_cmd_handler;
   2bc96:	681a      	ldr	r2, [r3, #0]
   2bc98:	9b03      	ldr	r3, [sp, #12]
   2bc9a:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   2bc9e:	e72e      	b.n	2bafe <socket_thread_fn+0xce>
   2bca0:	0004a688 	.word	0x0004a688
   2bca4:	0004a698 	.word	0x0004a698
   2bca8:	20032488 	.word	0x20032488
   2bcac:	20024b88 	.word	0x20024b88
   2bcb0:	0004ce24 	.word	0x0004ce24
   2bcb4:	0004ccf0 	.word	0x0004ccf0
   2bcb8:	0004cdf3 	.word	0x0004cdf3
   2bcbc:	0004e9b0 	.word	0x0004e9b0
   2bcc0:	00051471 	.word	0x00051471
   2bcc4:	00051493 	.word	0x00051493
   2bcc8:	200324d8 	.word	0x200324d8
   2bccc:	20024b8c 	.word	0x20024b8c
   2bcd0:	20032544 	.word	0x20032544
   2bcd4:	000514a7 	.word	0x000514a7
   2bcd8:	000514de 	.word	0x000514de
   2bcdc:	0004e90a 	.word	0x0004e90a
   2bce0:	00051528 	.word	0x00051528
   2bce4:	20024b94 	.word	0x20024b94
   2bce8:	00051534 	.word	0x00051534
   2bcec:	0004ff37 	.word	0x0004ff37
   2bcf0:	00051540 	.word	0x00051540
   2bcf4:	0002b899 	.word	0x0002b899
   2bcf8:	2002a5c0 	.word	0x2002a5c0
   2bcfc:	20024b90 	.word	0x20024b90
   2bd00:	20023bf8 	.word	0x20023bf8
   2bd04:	20024b98 	.word	0x20024b98

0002bd08 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   2bd08:	b510      	push	{r4, lr}
   2bd0a:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2bd0c:	f7ff fdd4 	bl	2b8b8 <open_socket>
	if (err) {
   2bd10:	4604      	mov	r4, r0
   2bd12:	b198      	cbz	r0, 2bd3c <at_cmd_driver_init+0x34>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2bd14:	2301      	movs	r3, #1
   2bd16:	f04f 0000 	mov.w	r0, #0
   2bd1a:	4a10      	ldr	r2, [pc, #64]	; (2bd5c <at_cmd_driver_init+0x54>)
   2bd1c:	f363 0002 	bfi	r0, r3, #0, #3
   2bd20:	4b0f      	ldr	r3, [pc, #60]	; (2bd60 <at_cmd_driver_init+0x58>)
   2bd22:	f36f 00c5 	bfc	r0, #3, #3
   2bd26:	1a9b      	subs	r3, r3, r2
   2bd28:	08db      	lsrs	r3, r3, #3
   2bd2a:	f363 108f 	bfi	r0, r3, #6, #10
   2bd2e:	4622      	mov	r2, r4
   2bd30:	490c      	ldr	r1, [pc, #48]	; (2bd64 <at_cmd_driver_init+0x5c>)
   2bd32:	f01b fde7 	bl	47904 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2bd36:	4620      	mov	r0, r4
   2bd38:	b006      	add	sp, #24
   2bd3a:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2bd3c:	230a      	movs	r3, #10
   2bd3e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2bd42:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2bd46:	e9cd 0000 	strd	r0, r0, [sp]
   2bd4a:	4b07      	ldr	r3, [pc, #28]	; (2bd68 <at_cmd_driver_init+0x60>)
   2bd4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2bd50:	4906      	ldr	r1, [pc, #24]	; (2bd6c <at_cmd_driver_init+0x64>)
   2bd52:	4807      	ldr	r0, [pc, #28]	; (2bd70 <at_cmd_driver_init+0x68>)
   2bd54:	f013 fa06 	bl	3f164 <z_impl_k_thread_create>
   2bd58:	e7ed      	b.n	2bd36 <at_cmd_driver_init+0x2e>
   2bd5a:	bf00      	nop
   2bd5c:	0004a688 	.word	0x0004a688
   2bd60:	0004a698 	.word	0x0004a698
   2bd64:	000513fa 	.word	0x000513fa
   2bd68:	0002ba31 	.word	0x0002ba31
   2bd6c:	2002c568 	.word	0x2002c568
   2bd70:	20024b9c 	.word	0x20024b9c

0002bd74 <at_cmd_write>:
{
   2bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd78:	4605      	mov	r5, r0
   2bd7a:	4688      	mov	r8, r1
   2bd7c:	4617      	mov	r7, r2
   2bd7e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   2bd80:	4c0a      	ldr	r4, [pc, #40]	; (2bdac <at_cmd_write+0x38>)
   2bd82:	f04f 31ff 	mov.w	r1, #4294967295
   2bd86:	4620      	mov	r0, r4
   2bd88:	f013 f8a6 	bl	3eed8 <z_impl_k_sem_take>
	response_buf     = buf;
   2bd8c:	4b08      	ldr	r3, [pc, #32]	; (2bdb0 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   2bd8e:	4631      	mov	r1, r6
	response_buf     = buf;
   2bd90:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   2bd94:	4b07      	ldr	r3, [pc, #28]	; (2bdb4 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   2bd96:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   2bd98:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   2bd9a:	f7ff fdc7 	bl	2b92c <at_write>
   2bd9e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2bda0:	4620      	mov	r0, r4
   2bda2:	f013 f851 	bl	3ee48 <z_impl_k_sem_give>
}
   2bda6:	4628      	mov	r0, r5
   2bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bdac:	200324d8 	.word	0x200324d8
   2bdb0:	20024b94 	.word	0x20024b94
   2bdb4:	20024b98 	.word	0x20024b98

0002bdb8 <at_cmd_set_notification_handler>:
{
   2bdb8:	b538      	push	{r3, r4, r5, lr}
   2bdba:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   2bdbc:	4c06      	ldr	r4, [pc, #24]	; (2bdd8 <at_cmd_set_notification_handler+0x20>)
   2bdbe:	f04f 31ff 	mov.w	r1, #4294967295
   2bdc2:	4620      	mov	r0, r4
   2bdc4:	f013 f888 	bl	3eed8 <z_impl_k_sem_take>
	notification_handler = handler;
   2bdc8:	4b04      	ldr	r3, [pc, #16]	; (2bddc <at_cmd_set_notification_handler+0x24>)
   2bdca:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   2bdcc:	4620      	mov	r0, r4
}
   2bdce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bdd2:	f013 b839 	b.w	3ee48 <z_impl_k_sem_give>
   2bdd6:	bf00      	nop
   2bdd8:	200324d8 	.word	0x200324d8
   2bddc:	20024b90 	.word	0x20024b90

0002bde0 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   2bde0:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   2bde2:	2300      	movs	r3, #0
   2bde4:	480c      	ldr	r0, [pc, #48]	; (2be18 <w_lte_lc_init+0x38>)
   2bde6:	461a      	mov	r2, r3
   2bde8:	4619      	mov	r1, r3
   2bdea:	f7ff ffc3 	bl	2bd74 <at_cmd_write>
   2bdee:	4603      	mov	r3, r0
   2bdf0:	b110      	cbz	r0, 2bdf8 <w_lte_lc_init+0x18>
		return -EIO;
   2bdf2:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   2bdf6:	bd08      	pop	{r3, pc}
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2bdf8:	4602      	mov	r2, r0
   2bdfa:	4601      	mov	r1, r0
   2bdfc:	4807      	ldr	r0, [pc, #28]	; (2be1c <w_lte_lc_init+0x3c>)
   2bdfe:	f7ff ffb9 	bl	2bd74 <at_cmd_write>
   2be02:	4603      	mov	r3, r0
   2be04:	2800      	cmp	r0, #0
   2be06:	d1f4      	bne.n	2bdf2 <w_lte_lc_init+0x12>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   2be08:	4602      	mov	r2, r0
   2be0a:	4601      	mov	r1, r0
   2be0c:	4804      	ldr	r0, [pc, #16]	; (2be20 <w_lte_lc_init+0x40>)
   2be0e:	f7ff ffb1 	bl	2bd74 <at_cmd_write>
   2be12:	2800      	cmp	r0, #0
   2be14:	d0ef      	beq.n	2bdf6 <w_lte_lc_init+0x16>
   2be16:	e7ec      	b.n	2bdf2 <w_lte_lc_init+0x12>
   2be18:	00051631 	.word	0x00051631
   2be1c:	000515d7 	.word	0x000515d7
   2be20:	000515e2 	.word	0x000515e2

0002be24 <parse_nw_reg_status>:
 *
 * @return Zero on success or (negative) error code otherwise.
 */
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status)
{
   2be24:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err, reg_status;
	struct at_param_list resp_list = {0};
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2be26:	2307      	movs	r3, #7
	struct at_param_list resp_list = {0};
   2be28:	2500      	movs	r5, #0
{
   2be2a:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2be2c:	9502      	str	r5, [sp, #8]
{
   2be2e:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   2be30:	e9cd 5504 	strd	r5, r5, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2be34:	f8cd 500b 	str.w	r5, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   2be38:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   2be3a:	4607      	mov	r7, r0
   2be3c:	2800      	cmp	r0, #0
   2be3e:	f000 8098 	beq.w	2bf72 <parse_nw_reg_status+0x14e>
   2be42:	2900      	cmp	r1, #0
   2be44:	f000 8095 	beq.w	2bf72 <parse_nw_reg_status+0x14e>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT);
   2be48:	210a      	movs	r1, #10
   2be4a:	a804      	add	r0, sp, #16
   2be4c:	f01d fd0a 	bl	49864 <at_params_list_init>
	if (err) {
   2be50:	4604      	mov	r4, r0
   2be52:	b198      	cbz	r0, 2be7c <parse_nw_reg_status+0x58>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2be54:	2301      	movs	r3, #1
   2be56:	f04f 0000 	mov.w	r0, #0
   2be5a:	4a47      	ldr	r2, [pc, #284]	; (2bf78 <parse_nw_reg_status+0x154>)
   2be5c:	f363 0002 	bfi	r0, r3, #0, #3
   2be60:	4b46      	ldr	r3, [pc, #280]	; (2bf7c <parse_nw_reg_status+0x158>)
   2be62:	f365 00c5 	bfi	r0, r5, #3, #3
   2be66:	1a9b      	subs	r3, r3, r2
   2be68:	08db      	lsrs	r3, r3, #3
   2be6a:	f363 108f 	bfi	r0, r3, #6, #10
   2be6e:	4622      	mov	r2, r4
   2be70:	4943      	ldr	r1, [pc, #268]	; (2bf80 <parse_nw_reg_status+0x15c>)
   2be72:	f01b fd47 	bl	47904 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2be76:	4620      	mov	r0, r4
   2be78:	b007      	add	sp, #28
   2be7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   2be7c:	4601      	mov	r1, r0
   2be7e:	230a      	movs	r3, #10
   2be80:	aa04      	add	r2, sp, #16
   2be82:	4638      	mov	r0, r7
   2be84:	f7fa fd50 	bl	26928 <at_parser_max_params_from_str>
	if (err) {
   2be88:	4604      	mov	r4, r0
   2be8a:	b1a0      	cbz	r0, 2beb6 <parse_nw_reg_status+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2be8c:	2301      	movs	r3, #1
   2be8e:	f04f 0000 	mov.w	r0, #0
   2be92:	4a39      	ldr	r2, [pc, #228]	; (2bf78 <parse_nw_reg_status+0x154>)
   2be94:	f363 0002 	bfi	r0, r3, #0, #3
   2be98:	4b38      	ldr	r3, [pc, #224]	; (2bf7c <parse_nw_reg_status+0x158>)
   2be9a:	f365 00c5 	bfi	r0, r5, #3, #3
   2be9e:	1a9b      	subs	r3, r3, r2
   2bea0:	4622      	mov	r2, r4
   2bea2:	08db      	lsrs	r3, r3, #3
   2bea4:	4937      	ldr	r1, [pc, #220]	; (2bf84 <parse_nw_reg_status+0x160>)
   2bea6:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2beaa:	f01b fd2b 	bl	47904 <log_string_sync>
	at_params_list_free(&resp_list);
   2beae:	a804      	add	r0, sp, #16
   2beb0:	f01d fceb 	bl	4988a <at_params_list_free>
	return err;
   2beb4:	e7df      	b.n	2be76 <parse_nw_reg_status+0x52>
	err = at_params_string_get(&resp_list,
   2beb6:	4601      	mov	r1, r0
   2beb8:	ab01      	add	r3, sp, #4
   2beba:	aa02      	add	r2, sp, #8
   2bebc:	a804      	add	r0, sp, #16
   2bebe:	f01d fda9 	bl	49a14 <at_params_string_get>
	if (err) {
   2bec2:	4604      	mov	r4, r0
   2bec4:	b178      	cbz	r0, 2bee6 <parse_nw_reg_status+0xc2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bec6:	2301      	movs	r3, #1
   2bec8:	f04f 0000 	mov.w	r0, #0
   2becc:	4a2a      	ldr	r2, [pc, #168]	; (2bf78 <parse_nw_reg_status+0x154>)
   2bece:	f363 0002 	bfi	r0, r3, #0, #3
   2bed2:	4b2a      	ldr	r3, [pc, #168]	; (2bf7c <parse_nw_reg_status+0x158>)
   2bed4:	f365 00c5 	bfi	r0, r5, #3, #3
   2bed8:	1a9b      	subs	r3, r3, r2
   2beda:	08db      	lsrs	r3, r3, #3
   2bedc:	f363 108f 	bfi	r0, r3, #6, #10
   2bee0:	4622      	mov	r2, r4
   2bee2:	4929      	ldr	r1, [pc, #164]	; (2bf88 <parse_nw_reg_status+0x164>)
   2bee4:	e7e1      	b.n	2beaa <parse_nw_reg_status+0x86>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bee6:	4a29      	ldr	r2, [pc, #164]	; (2bf8c <parse_nw_reg_status+0x168>)
   2bee8:	9901      	ldr	r1, [sp, #4]
   2beea:	a802      	add	r0, sp, #8
   2beec:	f01d ffc3 	bl	49e76 <response_is_valid>
   2bef0:	2800      	cmp	r0, #0
   2bef2:	d0dc      	beq.n	2beae <parse_nw_reg_status+0x8a>
	err = at_params_int_get(&resp_list, AT_CEREG_REG_STATUS_INDEX,
   2bef4:	2101      	movs	r1, #1
   2bef6:	466a      	mov	r2, sp
   2bef8:	a804      	add	r0, sp, #16
   2befa:	f01d fd74 	bl	499e6 <at_params_int_get>
   2befe:	491f      	ldr	r1, [pc, #124]	; (2bf7c <parse_nw_reg_status+0x158>)
   2bf00:	4b1d      	ldr	r3, [pc, #116]	; (2bf78 <parse_nw_reg_status+0x154>)
	if (err) {
   2bf02:	4604      	mov	r4, r0
   2bf04:	1ac9      	subs	r1, r1, r3
   2bf06:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   2bf0a:	b158      	cbz	r0, 2bf24 <parse_nw_reg_status+0x100>
		LOG_ERR("Could not get registration status, error: %d", err);
   2bf0c:	f04f 0000 	mov.w	r0, #0
   2bf10:	2301      	movs	r3, #1
   2bf12:	f363 0002 	bfi	r0, r3, #0, #3
   2bf16:	f365 00c5 	bfi	r0, r5, #3, #3
   2bf1a:	f361 108f 	bfi	r0, r1, #6, #10
   2bf1e:	4622      	mov	r2, r4
   2bf20:	491b      	ldr	r1, [pc, #108]	; (2bf90 <parse_nw_reg_status+0x16c>)
   2bf22:	e7c2      	b.n	2beaa <parse_nw_reg_status+0x86>
	switch (reg_status) {
   2bf24:	9b00      	ldr	r3, [sp, #0]
   2bf26:	2b08      	cmp	r3, #8
   2bf28:	d002      	beq.n	2bf30 <parse_nw_reg_status+0x10c>
   2bf2a:	dc10      	bgt.n	2bf4e <parse_nw_reg_status+0x12a>
   2bf2c:	2b05      	cmp	r3, #5
   2bf2e:	d810      	bhi.n	2bf52 <parse_nw_reg_status+0x12e>
		LOG_DBG("Network registration status: %d", reg_status);
   2bf30:	2204      	movs	r2, #4
   2bf32:	f04f 0000 	mov.w	r0, #0
   2bf36:	f362 0002 	bfi	r0, r2, #0, #3
   2bf3a:	f36f 00c5 	bfc	r0, #3, #3
   2bf3e:	f361 108f 	bfi	r0, r1, #6, #10
		*status = reg_status;
   2bf42:	7033      	strb	r3, [r6, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   2bf44:	4a13      	ldr	r2, [pc, #76]	; (2bf94 <parse_nw_reg_status+0x170>)
   2bf46:	4914      	ldr	r1, [pc, #80]	; (2bf98 <parse_nw_reg_status+0x174>)
   2bf48:	f01b fcdc 	bl	47904 <log_string_sync>
   2bf4c:	e7af      	b.n	2beae <parse_nw_reg_status+0x8a>
	switch (reg_status) {
   2bf4e:	2b5a      	cmp	r3, #90	; 0x5a
   2bf50:	d0ee      	beq.n	2bf30 <parse_nw_reg_status+0x10c>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   2bf52:	2201      	movs	r2, #1
   2bf54:	f04f 0000 	mov.w	r0, #0
   2bf58:	f362 0002 	bfi	r0, r2, #0, #3
   2bf5c:	f36f 00c5 	bfc	r0, #3, #3
   2bf60:	f361 108f 	bfi	r0, r1, #6, #10
   2bf64:	461a      	mov	r2, r3
   2bf66:	490d      	ldr	r1, [pc, #52]	; (2bf9c <parse_nw_reg_status+0x178>)
   2bf68:	f01b fccc 	bl	47904 <log_string_sync>
		err = -EIO;
   2bf6c:	f06f 0404 	mvn.w	r4, #4
   2bf70:	e79d      	b.n	2beae <parse_nw_reg_status+0x8a>
		return -EINVAL;
   2bf72:	f06f 0415 	mvn.w	r4, #21
   2bf76:	e77e      	b.n	2be76 <parse_nw_reg_status+0x52>
   2bf78:	0004a688 	.word	0x0004a688
   2bf7c:	0004a738 	.word	0x0004a738
   2bf80:	00051652 	.word	0x00051652
   2bf84:	0005167b 	.word	0x0005167b
   2bf88:	000516a8 	.word	0x000516a8
   2bf8c:	000516d1 	.word	0x000516d1
   2bf90:	000516d8 	.word	0x000516d8
   2bf94:	00051579 	.word	0x00051579
   2bf98:	00051705 	.word	0x00051705
   2bf9c:	00051729 	.word	0x00051729

0002bfa0 <at_handler>:
{
   2bfa0:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   2bfa2:	4608      	mov	r0, r1
   2bfa4:	b999      	cbnz	r1, 2bfce <at_handler+0x2e>
		LOG_ERR("Response buffer is NULL-pointer");
   2bfa6:	2301      	movs	r3, #1
   2bfa8:	f04f 0200 	mov.w	r2, #0
   2bfac:	f363 0202 	bfi	r2, r3, #0, #3
   2bfb0:	f361 02c5 	bfi	r2, r1, #3, #3
   2bfb4:	4b15      	ldr	r3, [pc, #84]	; (2c00c <at_handler+0x6c>)
   2bfb6:	4916      	ldr	r1, [pc, #88]	; (2c010 <at_handler+0x70>)
   2bfb8:	1a5b      	subs	r3, r3, r1
   2bfba:	08db      	lsrs	r3, r3, #3
   2bfbc:	f363 128f 	bfi	r2, r3, #6, #10
   2bfc0:	4610      	mov	r0, r2
   2bfc2:	4914      	ldr	r1, [pc, #80]	; (2c014 <at_handler+0x74>)
		LOG_ERR("Could not get network registration status");
   2bfc4:	f01b fc9e 	bl	47904 <log_string_sync>
}
   2bfc8:	b003      	add	sp, #12
   2bfca:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status);
   2bfce:	f10d 0107 	add.w	r1, sp, #7
   2bfd2:	f7ff ff27 	bl	2be24 <parse_nw_reg_status>
	if (err) {
   2bfd6:	b170      	cbz	r0, 2bff6 <at_handler+0x56>
		LOG_ERR("Could not get network registration status");
   2bfd8:	2301      	movs	r3, #1
   2bfda:	f04f 0000 	mov.w	r0, #0
   2bfde:	4a0c      	ldr	r2, [pc, #48]	; (2c010 <at_handler+0x70>)
   2bfe0:	f363 0002 	bfi	r0, r3, #0, #3
   2bfe4:	4b09      	ldr	r3, [pc, #36]	; (2c00c <at_handler+0x6c>)
   2bfe6:	f36f 00c5 	bfc	r0, #3, #3
   2bfea:	1a9b      	subs	r3, r3, r2
   2bfec:	08db      	lsrs	r3, r3, #3
   2bfee:	f363 108f 	bfi	r0, r3, #6, #10
   2bff2:	4909      	ldr	r1, [pc, #36]	; (2c018 <at_handler+0x78>)
   2bff4:	e7e6      	b.n	2bfc4 <at_handler+0x24>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2bff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2bffa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2bffe:	2b01      	cmp	r3, #1
   2c000:	d1e2      	bne.n	2bfc8 <at_handler+0x28>
   2c002:	4806      	ldr	r0, [pc, #24]	; (2c01c <at_handler+0x7c>)
   2c004:	f012 ff20 	bl	3ee48 <z_impl_k_sem_give>
   2c008:	e7de      	b.n	2bfc8 <at_handler+0x28>
   2c00a:	bf00      	nop
   2c00c:	0004a738 	.word	0x0004a738
   2c010:	0004a688 	.word	0x0004a688
   2c014:	0005158d 	.word	0x0005158d
   2c018:	000515ad 	.word	0x000515ad
   2c01c:	20024c4c 	.word	0x20024c4c

0002c020 <w_lte_lc_connect>:
{
   2c020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   2c024:	2201      	movs	r2, #1
   2c026:	2100      	movs	r1, #0
   2c028:	4841      	ldr	r0, [pc, #260]	; (2c130 <w_lte_lc_connect+0x110>)
   2c02a:	f012 fed7 	bl	3eddc <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   2c02e:	4941      	ldr	r1, [pc, #260]	; (2c134 <w_lte_lc_connect+0x114>)
   2c030:	2000      	movs	r0, #0
   2c032:	f7fa f937 	bl	262a4 <at_notif_register_handler>
   2c036:	4c40      	ldr	r4, [pc, #256]	; (2c138 <w_lte_lc_connect+0x118>)
   2c038:	4b40      	ldr	r3, [pc, #256]	; (2c13c <w_lte_lc_connect+0x11c>)
	if (rc != 0) {
   2c03a:	4605      	mov	r5, r0
   2c03c:	1ae4      	subs	r4, r4, r3
   2c03e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2c042:	b178      	cbz	r0, 2c064 <w_lte_lc_connect+0x44>
		LOG_ERR("Can't register handler rc=%d", rc);
   2c044:	f04f 0000 	mov.w	r0, #0
   2c048:	2301      	movs	r3, #1
   2c04a:	462a      	mov	r2, r5
   2c04c:	f363 0002 	bfi	r0, r3, #0, #3
   2c050:	f36f 00c5 	bfc	r0, #3, #3
   2c054:	493a      	ldr	r1, [pc, #232]	; (2c140 <w_lte_lc_connect+0x120>)
   2c056:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   2c05a:	f01b fc53 	bl	47904 <log_string_sync>
}
   2c05e:	4628      	mov	r0, r5
   2c060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c064:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   2c068:	4d36      	ldr	r5, [pc, #216]	; (2c144 <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2c06a:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 2c168 <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   2c06e:	2304      	movs	r3, #4
   2c070:	4628      	mov	r0, r5
   2c072:	f363 0702 	bfi	r7, r3, #0, #3
   2c076:	f01b fc57 	bl	47928 <log_strdup>
   2c07a:	f36f 07c5 	bfc	r7, #3, #3
   2c07e:	f364 178f 	bfi	r7, r4, #6, #10
   2c082:	4603      	mov	r3, r0
   2c084:	4a30      	ldr	r2, [pc, #192]	; (2c148 <w_lte_lc_connect+0x128>)
   2c086:	4931      	ldr	r1, [pc, #196]	; (2c14c <w_lte_lc_connect+0x12c>)
   2c088:	4638      	mov	r0, r7
   2c08a:	f01b fc3b 	bl	47904 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   2c08e:	2300      	movs	r3, #0
   2c090:	4628      	mov	r0, r5
   2c092:	461a      	mov	r2, r3
   2c094:	4619      	mov	r1, r3
   2c096:	f7ff fe6d 	bl	2bd74 <at_cmd_write>
   2c09a:	4603      	mov	r3, r0
   2c09c:	bb88      	cbnz	r0, 2c102 <w_lte_lc_connect+0xe2>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2c09e:	4602      	mov	r2, r0
   2c0a0:	4601      	mov	r1, r0
   2c0a2:	4658      	mov	r0, fp
   2c0a4:	f7ff fe66 	bl	2bd74 <at_cmd_write>
   2c0a8:	4682      	mov	sl, r0
   2c0aa:	bb50      	cbnz	r0, 2c102 <w_lte_lc_connect+0xe2>
	return z_impl_k_sem_take(sem, timeout);
   2c0ac:	4928      	ldr	r1, [pc, #160]	; (2c150 <w_lte_lc_connect+0x130>)
   2c0ae:	4820      	ldr	r0, [pc, #128]	; (2c130 <w_lte_lc_connect+0x110>)
   2c0b0:	f012 ff12 	bl	3eed8 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2c0b4:	f110 0f0b 	cmn.w	r0, #11
   2c0b8:	4605      	mov	r5, r0
   2c0ba:	d124      	bne.n	2c106 <w_lte_lc_connect+0xe6>
			LOG_INF("Network connection attempt timed out");
   2c0bc:	2503      	movs	r5, #3
   2c0be:	f365 0802 	bfi	r8, r5, #0, #3
   2c0c2:	f36a 08c5 	bfi	r8, sl, #3, #3
   2c0c6:	f364 188f 	bfi	r8, r4, #6, #10
   2c0ca:	4922      	ldr	r1, [pc, #136]	; (2c154 <w_lte_lc_connect+0x134>)
   2c0cc:	4640      	mov	r0, r8
   2c0ce:	f01b fc19 	bl	47904 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2c0d2:	f1b9 0f01 	cmp.w	r9, #1
   2c0d6:	d028      	beq.n	2c12a <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2c0d8:	4653      	mov	r3, sl
   2c0da:	4652      	mov	r2, sl
   2c0dc:	4651      	mov	r1, sl
   2c0de:	481e      	ldr	r0, [pc, #120]	; (2c158 <w_lte_lc_connect+0x138>)
   2c0e0:	f7ff fe48 	bl	2bd74 <at_cmd_write>
   2c0e4:	b968      	cbnz	r0, 2c102 <w_lte_lc_connect+0xe2>
				LOG_INF("Using fallback network mode");
   2c0e6:	f365 0602 	bfi	r6, r5, #0, #3
   2c0ea:	f360 06c5 	bfi	r6, r0, #3, #3
   2c0ee:	f364 168f 	bfi	r6, r4, #6, #10
   2c0f2:	491a      	ldr	r1, [pc, #104]	; (2c15c <w_lte_lc_connect+0x13c>)
   2c0f4:	4630      	mov	r0, r6
   2c0f6:	f01b fc05 	bl	47904 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   2c0fa:	4d19      	ldr	r5, [pc, #100]	; (2c160 <w_lte_lc_connect+0x140>)
   2c0fc:	f04f 0901 	mov.w	r9, #1
   2c100:	e7b5      	b.n	2c06e <w_lte_lc_connect+0x4e>
			err = -EIO;
   2c102:	f06f 0504 	mvn.w	r5, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   2c106:	490b      	ldr	r1, [pc, #44]	; (2c134 <w_lte_lc_connect+0x114>)
   2c108:	2000      	movs	r0, #0
   2c10a:	f7fa f903 	bl	26314 <at_notif_deregister_handler>
	if (rc != 0) {
   2c10e:	4602      	mov	r2, r0
   2c110:	2800      	cmp	r0, #0
   2c112:	d0a4      	beq.n	2c05e <w_lte_lc_connect+0x3e>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   2c114:	2101      	movs	r1, #1
   2c116:	f04f 0000 	mov.w	r0, #0
   2c11a:	f361 0002 	bfi	r0, r1, #0, #3
   2c11e:	f36f 00c5 	bfc	r0, #3, #3
   2c122:	f364 108f 	bfi	r0, r4, #6, #10
   2c126:	490f      	ldr	r1, [pc, #60]	; (2c164 <w_lte_lc_connect+0x144>)
   2c128:	e797      	b.n	2c05a <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   2c12a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   2c12e:	e7ea      	b.n	2c106 <w_lte_lc_connect+0xe6>
   2c130:	20024c4c 	.word	0x20024c4c
   2c134:	0002bfa1 	.word	0x0002bfa1
   2c138:	0004a738 	.word	0x0004a738
   2c13c:	0004a688 	.word	0x0004a688
   2c140:	0004f4e9 	.word	0x0004f4e9
   2c144:	00051631 	.word	0x00051631
   2c148:	00051568 	.word	0x00051568
   2c14c:	0005178f 	.word	0x0005178f
   2c150:	000927c0 	.word	0x000927c0
   2c154:	000517a4 	.word	0x000517a4
   2c158:	00051648 	.word	0x00051648
   2c15c:	000517c9 	.word	0x000517c9
   2c160:	0005161a 	.word	0x0005161a
   2c164:	000517e5 	.word	0x000517e5
   2c168:	00051610 	.word	0x00051610

0002c16c <lte_lc_power_off>:
{
   2c16c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2c16e:	2300      	movs	r3, #0
   2c170:	4804      	ldr	r0, [pc, #16]	; (2c184 <lte_lc_power_off+0x18>)
   2c172:	461a      	mov	r2, r3
   2c174:	4619      	mov	r1, r3
   2c176:	f7ff fdfd 	bl	2bd74 <at_cmd_write>
   2c17a:	2800      	cmp	r0, #0
}
   2c17c:	bf18      	it	ne
   2c17e:	f06f 0004 	mvnne.w	r0, #4
   2c182:	bd08      	pop	{r3, pc}
   2c184:	00051751 	.word	0x00051751

0002c188 <lte_lc_psm_req>:
{
   2c188:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   2c18a:	2300      	movs	r3, #0
   2c18c:	4d07      	ldr	r5, [pc, #28]	; (2c1ac <lte_lc_psm_req+0x24>)
   2c18e:	4c08      	ldr	r4, [pc, #32]	; (2c1b0 <lte_lc_psm_req+0x28>)
   2c190:	461a      	mov	r2, r3
   2c192:	4298      	cmp	r0, r3
   2c194:	bf14      	ite	ne
   2c196:	4628      	movne	r0, r5
   2c198:	4620      	moveq	r0, r4
   2c19a:	4619      	mov	r1, r3
   2c19c:	f7ff fdea 	bl	2bd74 <at_cmd_write>
   2c1a0:	2800      	cmp	r0, #0
}
   2c1a2:	bf18      	it	ne
   2c1a4:	f06f 0004 	mvnne.w	r0, #4
   2c1a8:	bd38      	pop	{r3, r4, r5, pc}
   2c1aa:	bf00      	nop
   2c1ac:	00051765 	.word	0x00051765
   2c1b0:	0005175b 	.word	0x0005175b

0002c1b4 <bh1749_channel_get>:

static int bh1749_channel_get(struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bh1749_data *data = dev->driver_data;
   2c1b4:	6883      	ldr	r3, [r0, #8]
{
   2c1b6:	b510      	push	{r4, lr}

	if (unlikely(!data->ready)) {
   2c1b8:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
   2c1bc:	b994      	cbnz	r4, 2c1e4 <bh1749_channel_get+0x30>
		LOG_INF("Device is not initialized yet");
   2c1be:	2303      	movs	r3, #3
   2c1c0:	f04f 0000 	mov.w	r0, #0
   2c1c4:	4a12      	ldr	r2, [pc, #72]	; (2c210 <bh1749_channel_get+0x5c>)
   2c1c6:	f363 0002 	bfi	r0, r3, #0, #3
   2c1ca:	4b12      	ldr	r3, [pc, #72]	; (2c214 <bh1749_channel_get+0x60>)
   2c1cc:	f364 00c5 	bfi	r0, r4, #3, #3
   2c1d0:	1a9b      	subs	r3, r3, r2
   2c1d2:	08db      	lsrs	r3, r3, #3
   2c1d4:	f363 108f 	bfi	r0, r3, #6, #10
   2c1d8:	490f      	ldr	r1, [pc, #60]	; (2c218 <bh1749_channel_get+0x64>)
   2c1da:	f01b fb93 	bl	47904 <log_string_sync>
   2c1de:	f06f 000f 	mvn.w	r0, #15
	default:
		return -ENOTSUP;
	}

	return 0;
}
   2c1e2:	bd10      	pop	{r4, pc}
	switch (chan) {
   2c1e4:	3912      	subs	r1, #18
   2c1e6:	2903      	cmp	r1, #3
   2c1e8:	d80e      	bhi.n	2c208 <bh1749_channel_get+0x54>
   2c1ea:	e8df f001 	tbb	[pc, r1]
   2c1ee:	020b      	.short	0x020b
   2c1f0:	0907      	.short	0x0907
		val->val1 = sys_le16_to_cpu(
   2c1f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		val->val2 = 0;
   2c1f4:	2000      	movs	r0, #0
		val->val1 = sys_le16_to_cpu(
   2c1f6:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   2c1f8:	6050      	str	r0, [r2, #4]
		break;
   2c1fa:	e7f2      	b.n	2c1e2 <bh1749_channel_get+0x2e>
		val->val1 = sys_le16_to_cpu(
   2c1fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   2c1fe:	e7f9      	b.n	2c1f4 <bh1749_channel_get+0x40>
		val->val1 = sys_le16_to_cpu(
   2c200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2c202:	e7f7      	b.n	2c1f4 <bh1749_channel_get+0x40>
		val->val1 = sys_le16_to_cpu(
   2c204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2c206:	e7f5      	b.n	2c1f4 <bh1749_channel_get+0x40>
		return -ENOTSUP;
   2c208:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c20c:	e7e9      	b.n	2c1e2 <bh1749_channel_get+0x2e>
   2c20e:	bf00      	nop
   2c210:	0004a688 	.word	0x0004a688
   2c214:	0004a690 	.word	0x0004a690
   2c218:	00051953 	.word	0x00051953

0002c21c <bh1749_async_init>:
}


static void bh1749_async_init(struct k_work *work)
{
	struct bh1749_data *data = bh1749_dev->driver_data;
   2c21c:	4b20      	ldr	r3, [pc, #128]	; (2c2a0 <bh1749_async_init+0x84>)
{
   2c21e:	b510      	push	{r4, lr}
	struct bh1749_data *data = bh1749_dev->driver_data;
   2c220:	681b      	ldr	r3, [r3, #0]
   2c222:	689c      	ldr	r4, [r3, #8]



	LOG_DBG("BH1749 async init step %d", data->async_init_step);

	data->err = async_init_fn[data->async_init_step](data);
   2c224:	4b1f      	ldr	r3, [pc, #124]	; (2c2a4 <bh1749_async_init+0x88>)
   2c226:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2c22a:	4620      	mov	r0, r4
   2c22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2c230:	4798      	blx	r3
   2c232:	6320      	str	r0, [r4, #48]	; 0x30

	if (data->err) {
   2c234:	b188      	cbz	r0, 2c25a <bh1749_async_init+0x3e>
		LOG_ERR("BH1749 initialization failed");
   2c236:	2301      	movs	r3, #1
   2c238:	f04f 0000 	mov.w	r0, #0
   2c23c:	4a1a      	ldr	r2, [pc, #104]	; (2c2a8 <bh1749_async_init+0x8c>)
   2c23e:	f363 0002 	bfi	r0, r3, #0, #3
   2c242:	4b1a      	ldr	r3, [pc, #104]	; (2c2ac <bh1749_async_init+0x90>)
   2c244:	f36f 00c5 	bfc	r0, #3, #3
   2c248:	1a9b      	subs	r3, r3, r2
   2c24a:	08db      	lsrs	r3, r3, #3
   2c24c:	4918      	ldr	r1, [pc, #96]	; (2c2b0 <bh1749_async_init+0x94>)
   2c24e:	f363 108f 	bfi	r0, r3, #6, #10
		} else {
			k_delayed_work_submit(&bh1749_init_work,
					      async_init_delay[data->async_init_step]);
		}
	}
}
   2c252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_INF("BH1749 initialized");
   2c256:	f01b bb55 	b.w	47904 <log_string_sync>
		data->async_init_step++;
   2c25a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2c25e:	3301      	adds	r3, #1
   2c260:	b2db      	uxtb	r3, r3
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
   2c262:	2b03      	cmp	r3, #3
		data->async_init_step++;
   2c264:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
   2c268:	d111      	bne.n	2c28e <bh1749_async_init+0x72>
			data->ready = true;
   2c26a:	2201      	movs	r2, #1
   2c26c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
			LOG_INF("BH1749 initialized");
   2c270:	f04f 0200 	mov.w	r2, #0
   2c274:	490c      	ldr	r1, [pc, #48]	; (2c2a8 <bh1749_async_init+0x8c>)
   2c276:	f363 0202 	bfi	r2, r3, #0, #3
   2c27a:	4b0c      	ldr	r3, [pc, #48]	; (2c2ac <bh1749_async_init+0x90>)
   2c27c:	f360 02c5 	bfi	r2, r0, #3, #3
   2c280:	1a5b      	subs	r3, r3, r1
   2c282:	08db      	lsrs	r3, r3, #3
   2c284:	f363 128f 	bfi	r2, r3, #6, #10
   2c288:	490a      	ldr	r1, [pc, #40]	; (2c2b4 <bh1749_async_init+0x98>)
   2c28a:	4610      	mov	r0, r2
   2c28c:	e7e1      	b.n	2c252 <bh1749_async_init+0x36>
			k_delayed_work_submit(&bh1749_init_work,
   2c28e:	4a0a      	ldr	r2, [pc, #40]	; (2c2b8 <bh1749_async_init+0x9c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2c290:	490a      	ldr	r1, [pc, #40]	; (2c2bc <bh1749_async_init+0xa0>)
   2c292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2c296:	480a      	ldr	r0, [pc, #40]	; (2c2c0 <bh1749_async_init+0xa4>)
}
   2c298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c29c:	f013 b944 	b.w	3f528 <k_delayed_work_submit_to_queue>
   2c2a0:	20024c9c 	.word	0x20024c9c
   2c2a4:	0004b33c 	.word	0x0004b33c
   2c2a8:	0004a688 	.word	0x0004a688
   2c2ac:	0004a690 	.word	0x0004a690
   2c2b0:	00051805 	.word	0x00051805
   2c2b4:	00051822 	.word	0x00051822
   2c2b8:	0004b330 	.word	0x0004b330
   2c2bc:	20024ca0 	.word	0x20024ca0
   2c2c0:	2002a5c0 	.word	0x2002a5c0

0002c2c4 <bh1749_init>:
	return 0;
}

static int bh1749_init(struct device *dev)
{
	bh1749_dev = dev;
   2c2c4:	4b16      	ldr	r3, [pc, #88]	; (2c320 <bh1749_init+0x5c>)
{
   2c2c6:	b510      	push	{r4, lr}
	bh1749_dev = dev;
   2c2c8:	6018      	str	r0, [r3, #0]

	struct bh1749_data *data = bh1749_dev->driver_data;
   2c2ca:	6884      	ldr	r4, [r0, #8]
   2c2cc:	4815      	ldr	r0, [pc, #84]	; (2c324 <bh1749_init+0x60>)
   2c2ce:	f010 fd0b 	bl	3cce8 <z_impl_device_get_binding>
   2c2d2:	4603      	mov	r3, r0
	data->i2c = device_get_binding(DT_INST_0_ROHM_BH1749_BUS_NAME);
   2c2d4:	6020      	str	r0, [r4, #0]

	if (data->i2c == NULL) {
   2c2d6:	b170      	cbz	r0, 2c2f6 <bh1749_init+0x32>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_0_ROHM_BH1749_BUS_NAME);

		return -EINVAL;
	}
	k_delayed_work_init(&bh1749_init_work, bh1749_async_init);
   2c2d8:	4913      	ldr	r1, [pc, #76]	; (2c328 <bh1749_init+0x64>)
   2c2da:	4814      	ldr	r0, [pc, #80]	; (2c32c <bh1749_init+0x68>)
   2c2dc:	f01d ff88 	bl	4a1f0 <k_delayed_work_init>
	return k_delayed_work_submit(&bh1749_init_work, async_init_delay[data->async_init_step]);
   2c2e0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2c2e4:	4b12      	ldr	r3, [pc, #72]	; (2c330 <bh1749_init+0x6c>)
   2c2e6:	4911      	ldr	r1, [pc, #68]	; (2c32c <bh1749_init+0x68>)
   2c2e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2c2ec:	4811      	ldr	r0, [pc, #68]	; (2c334 <bh1749_init+0x70>)
};
   2c2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c2f2:	f013 b919 	b.w	3f528 <k_delayed_work_submit_to_queue>
		LOG_ERR("Failed to get pointer to %s device!",
   2c2f6:	2201      	movs	r2, #1
   2c2f8:	f04f 0000 	mov.w	r0, #0
   2c2fc:	f362 0002 	bfi	r0, r2, #0, #3
   2c300:	f363 00c5 	bfi	r0, r3, #3, #3
   2c304:	4a0c      	ldr	r2, [pc, #48]	; (2c338 <bh1749_init+0x74>)
   2c306:	4b0d      	ldr	r3, [pc, #52]	; (2c33c <bh1749_init+0x78>)
   2c308:	490d      	ldr	r1, [pc, #52]	; (2c340 <bh1749_init+0x7c>)
   2c30a:	1a9b      	subs	r3, r3, r2
   2c30c:	08db      	lsrs	r3, r3, #3
   2c30e:	f363 108f 	bfi	r0, r3, #6, #10
   2c312:	4a04      	ldr	r2, [pc, #16]	; (2c324 <bh1749_init+0x60>)
   2c314:	f01b faf6 	bl	47904 <log_string_sync>
};
   2c318:	f06f 0015 	mvn.w	r0, #21
   2c31c:	bd10      	pop	{r4, pc}
   2c31e:	bf00      	nop
   2c320:	20024c9c 	.word	0x20024c9c
   2c324:	0004ec4c 	.word	0x0004ec4c
   2c328:	0002c21d 	.word	0x0002c21d
   2c32c:	20024ca0 	.word	0x20024ca0
   2c330:	0004b330 	.word	0x0004b330
   2c334:	2002a5c0 	.word	0x2002a5c0
   2c338:	0004a688 	.word	0x0004a688
   2c33c:	0004a690 	.word	0x0004a690
   2c340:	0004eed5 	.word	0x0004eed5

0002c344 <bh1749_async_init_configure>:
{
   2c344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
   2c346:	f642 2241 	movw	r2, #10817	; 0x2a41
   2c34a:	ab04      	add	r3, sp, #16
   2c34c:	f823 2d10 	strh.w	r2, [r3, #-16]!
	msg.buf = (u8_t *)buf;
   2c350:	9301      	str	r3, [sp, #4]
	msg.len = num_bytes;
   2c352:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(data->i2c, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c354:	6800      	ldr	r0, [r0, #0]
   2c356:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c358:	f88d 300c 	strb.w	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke4(*(u32_t *)&dev, *(u32_t *)&msgs, *(u32_t *)&num_msgs, *(u32_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   2c35c:	2338      	movs	r3, #56	; 0x38
   2c35e:	2201      	movs	r2, #1
   2c360:	a901      	add	r1, sp, #4
   2c362:	f01d fda5 	bl	49eb0 <z_impl_i2c_transfer>
   2c366:	b188      	cbz	r0, 2c38c <bh1749_async_init_configure+0x48>
		LOG_ERR(
   2c368:	2301      	movs	r3, #1
   2c36a:	f04f 0000 	mov.w	r0, #0
   2c36e:	4a09      	ldr	r2, [pc, #36]	; (2c394 <bh1749_async_init_configure+0x50>)
   2c370:	f363 0002 	bfi	r0, r3, #0, #3
   2c374:	4b08      	ldr	r3, [pc, #32]	; (2c398 <bh1749_async_init_configure+0x54>)
   2c376:	f36f 00c5 	bfc	r0, #3, #3
   2c37a:	1a9b      	subs	r3, r3, r2
   2c37c:	08db      	lsrs	r3, r3, #3
   2c37e:	f363 108f 	bfi	r0, r3, #6, #10
   2c382:	4906      	ldr	r1, [pc, #24]	; (2c39c <bh1749_async_init_configure+0x58>)
   2c384:	f01b fabe 	bl	47904 <log_string_sync>
   2c388:	f06f 0004 	mvn.w	r0, #4
}
   2c38c:	b005      	add	sp, #20
   2c38e:	f85d fb04 	ldr.w	pc, [sp], #4
   2c392:	bf00      	nop
   2c394:	0004a688 	.word	0x0004a688
   2c398:	0004a690 	.word	0x0004a690
   2c39c:	00051835 	.word	0x00051835

0002c3a0 <bh1749_async_init_rgb_enable>:
{
   2c3a0:	b508      	push	{r3, lr}
	return i2c_reg_update_byte(data->i2c,
   2c3a2:	2310      	movs	r3, #16
   2c3a4:	2142      	movs	r1, #66	; 0x42
   2c3a6:	461a      	mov	r2, r3
   2c3a8:	6800      	ldr	r0, [r0, #0]
   2c3aa:	f01d fd88 	bl	49ebe <i2c_reg_update_byte.constprop.9>
	if (err) {
   2c3ae:	b188      	cbz	r0, 2c3d4 <bh1749_async_init_rgb_enable+0x34>
		LOG_ERR("Could not set measurement mode.");
   2c3b0:	2301      	movs	r3, #1
   2c3b2:	f04f 0000 	mov.w	r0, #0
   2c3b6:	4a08      	ldr	r2, [pc, #32]	; (2c3d8 <bh1749_async_init_rgb_enable+0x38>)
   2c3b8:	f363 0002 	bfi	r0, r3, #0, #3
   2c3bc:	4b07      	ldr	r3, [pc, #28]	; (2c3dc <bh1749_async_init_rgb_enable+0x3c>)
   2c3be:	f36f 00c5 	bfc	r0, #3, #3
   2c3c2:	1a9b      	subs	r3, r3, r2
   2c3c4:	08db      	lsrs	r3, r3, #3
   2c3c6:	f363 108f 	bfi	r0, r3, #6, #10
   2c3ca:	4905      	ldr	r1, [pc, #20]	; (2c3e0 <bh1749_async_init_rgb_enable+0x40>)
   2c3cc:	f01b fa9a 	bl	47904 <log_string_sync>
   2c3d0:	f06f 0004 	mvn.w	r0, #4
}
   2c3d4:	bd08      	pop	{r3, pc}
   2c3d6:	bf00      	nop
   2c3d8:	0004a688 	.word	0x0004a688
   2c3dc:	0004a690 	.word	0x0004a690
   2c3e0:	00051933 	.word	0x00051933

0002c3e4 <bh1749_async_init_reset_check>:
{
   2c3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return i2c_reg_update_byte(dev, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c3e6:	2340      	movs	r3, #64	; 0x40
__ssp_bos_icheck3(memset, void *, int)
   2c3e8:	2500      	movs	r5, #0
{
   2c3ea:	4604      	mov	r4, r0
   2c3ec:	6245      	str	r5, [r0, #36]	; 0x24
   2c3ee:	6285      	str	r5, [r0, #40]	; 0x28
   2c3f0:	8585      	strh	r5, [r0, #44]	; 0x2c
	return i2c_reg_update_byte(dev, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c3f2:	461a      	mov	r2, r3
   2c3f4:	4619      	mov	r1, r3
   2c3f6:	6800      	ldr	r0, [r0, #0]
   2c3f8:	f01d fd61 	bl	49ebe <i2c_reg_update_byte.constprop.9>
	if (err) {
   2c3fc:	4606      	mov	r6, r0
   2c3fe:	b198      	cbz	r0, 2c428 <bh1749_async_init_reset_check+0x44>
		LOG_ERR("Could not apply software reset.");
   2c400:	2301      	movs	r3, #1
   2c402:	f04f 0000 	mov.w	r0, #0
   2c406:	4a3f      	ldr	r2, [pc, #252]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c408:	f363 0002 	bfi	r0, r3, #0, #3
   2c40c:	4b3e      	ldr	r3, [pc, #248]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c40e:	f365 00c5 	bfi	r0, r5, #3, #3
   2c412:	1a9b      	subs	r3, r3, r2
   2c414:	08db      	lsrs	r3, r3, #3
   2c416:	f363 108f 	bfi	r0, r3, #6, #10
   2c41a:	493c      	ldr	r1, [pc, #240]	; (2c50c <bh1749_async_init_reset_check+0x128>)
   2c41c:	f01b fa72 	bl	47904 <log_string_sync>
		return -EIO;
   2c420:	f06f 0004 	mvn.w	r0, #4
}
   2c424:	b002      	add	sp, #8
   2c426:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_reg_read_byte(data->i2c, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c428:	f10d 0306 	add.w	r3, sp, #6
   2c42c:	2292      	movs	r2, #146	; 0x92
   2c42e:	2138      	movs	r1, #56	; 0x38
   2c430:	6820      	ldr	r0, [r4, #0]
   2c432:	f01d fd7d 	bl	49f30 <i2c_reg_read_byte>
   2c436:	4605      	mov	r5, r0
   2c438:	b310      	cbz	r0, 2c480 <bh1749_async_init_reset_check+0x9c>
		LOG_ERR("Failed when reading manufacturer ID");
   2c43a:	2301      	movs	r3, #1
   2c43c:	f04f 0000 	mov.w	r0, #0
   2c440:	4a30      	ldr	r2, [pc, #192]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c442:	f363 0002 	bfi	r0, r3, #0, #3
   2c446:	4b30      	ldr	r3, [pc, #192]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c448:	f366 00c5 	bfi	r0, r6, #3, #3
   2c44c:	1a9b      	subs	r3, r3, r2
   2c44e:	08db      	lsrs	r3, r3, #3
   2c450:	492f      	ldr	r1, [pc, #188]	; (2c510 <bh1749_async_init_reset_check+0x12c>)
   2c452:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Failed when reading part ID");
   2c456:	f01b fa55 	bl	47904 <log_string_sync>
		LOG_ERR("Communication with BH1749 failed with error %d", err);
   2c45a:	2301      	movs	r3, #1
   2c45c:	f04f 0000 	mov.w	r0, #0
   2c460:	4a28      	ldr	r2, [pc, #160]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c462:	f363 0002 	bfi	r0, r3, #0, #3
   2c466:	4b28      	ldr	r3, [pc, #160]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c468:	f36f 00c5 	bfc	r0, #3, #3
   2c46c:	1a9b      	subs	r3, r3, r2
   2c46e:	08db      	lsrs	r3, r3, #3
   2c470:	f363 108f 	bfi	r0, r3, #6, #10
   2c474:	f06f 0204 	mvn.w	r2, #4
   2c478:	4926      	ldr	r1, [pc, #152]	; (2c514 <bh1749_async_init_reset_check+0x130>)
   2c47a:	f01b fa43 	bl	47904 <log_string_sync>
   2c47e:	e7cf      	b.n	2c420 <bh1749_async_init_reset_check+0x3c>
	if (manufacturer_id != BH1749_MANUFACTURER_ID_DEFAULT) {
   2c480:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2c484:	2ae0      	cmp	r2, #224	; 0xe0
   2c486:	d010      	beq.n	2c4aa <bh1749_async_init_reset_check+0xc6>
		LOG_ERR("Invalid manufacturer ID: 0x%02x", manufacturer_id);
   2c488:	2301      	movs	r3, #1
   2c48a:	f04f 0000 	mov.w	r0, #0
   2c48e:	491d      	ldr	r1, [pc, #116]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c490:	f363 0002 	bfi	r0, r3, #0, #3
   2c494:	4b1c      	ldr	r3, [pc, #112]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c496:	f365 00c5 	bfi	r0, r5, #3, #3
   2c49a:	1a5b      	subs	r3, r3, r1
   2c49c:	08db      	lsrs	r3, r3, #3
   2c49e:	491e      	ldr	r1, [pc, #120]	; (2c518 <bh1749_async_init_reset_check+0x134>)
   2c4a0:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Invalid part ID: 0x%02x", part_id);
   2c4a4:	f01b fa2e 	bl	47904 <log_string_sync>
   2c4a8:	e7d7      	b.n	2c45a <bh1749_async_init_reset_check+0x76>
	if (i2c_reg_read_byte(data->i2c, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c4aa:	f10d 0307 	add.w	r3, sp, #7
   2c4ae:	2240      	movs	r2, #64	; 0x40
   2c4b0:	2138      	movs	r1, #56	; 0x38
   2c4b2:	6820      	ldr	r0, [r4, #0]
   2c4b4:	f01d fd3c 	bl	49f30 <i2c_reg_read_byte>
   2c4b8:	b170      	cbz	r0, 2c4d8 <bh1749_async_init_reset_check+0xf4>
		LOG_ERR("Failed when reading part ID");
   2c4ba:	2301      	movs	r3, #1
   2c4bc:	f04f 0000 	mov.w	r0, #0
   2c4c0:	4a10      	ldr	r2, [pc, #64]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c4c2:	f363 0002 	bfi	r0, r3, #0, #3
   2c4c6:	4b10      	ldr	r3, [pc, #64]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c4c8:	f365 00c5 	bfi	r0, r5, #3, #3
   2c4cc:	1a9b      	subs	r3, r3, r2
   2c4ce:	08db      	lsrs	r3, r3, #3
   2c4d0:	f363 108f 	bfi	r0, r3, #6, #10
   2c4d4:	4911      	ldr	r1, [pc, #68]	; (2c51c <bh1749_async_init_reset_check+0x138>)
   2c4d6:	e7be      	b.n	2c456 <bh1749_async_init_reset_check+0x72>
	if ((part_id & BH1749_SYSTEM_CONTROL_PART_ID_Msk) !=
   2c4d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2c4dc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
   2c4e0:	2b0d      	cmp	r3, #13
   2c4e2:	d09f      	beq.n	2c424 <bh1749_async_init_reset_check+0x40>
		LOG_ERR("Invalid part ID: 0x%02x", part_id);
   2c4e4:	2301      	movs	r3, #1
   2c4e6:	f04f 0400 	mov.w	r4, #0
   2c4ea:	4906      	ldr	r1, [pc, #24]	; (2c504 <bh1749_async_init_reset_check+0x120>)
   2c4ec:	f363 0402 	bfi	r4, r3, #0, #3
   2c4f0:	4b05      	ldr	r3, [pc, #20]	; (2c508 <bh1749_async_init_reset_check+0x124>)
   2c4f2:	f360 04c5 	bfi	r4, r0, #3, #3
   2c4f6:	1a5b      	subs	r3, r3, r1
   2c4f8:	08db      	lsrs	r3, r3, #3
   2c4fa:	f363 148f 	bfi	r4, r3, #6, #10
   2c4fe:	4908      	ldr	r1, [pc, #32]	; (2c520 <bh1749_async_init_reset_check+0x13c>)
   2c500:	4620      	mov	r0, r4
   2c502:	e7cf      	b.n	2c4a4 <bh1749_async_init_reset_check+0xc0>
   2c504:	0004a688 	.word	0x0004a688
   2c508:	0004a690 	.word	0x0004a690
   2c50c:	0005186c 	.word	0x0005186c
   2c510:	0005188c 	.word	0x0005188c
   2c514:	00051904 	.word	0x00051904
   2c518:	000518b0 	.word	0x000518b0
   2c51c:	000518d0 	.word	0x000518d0
   2c520:	000518ec 	.word	0x000518ec

0002c524 <bh1749_sample_fetch>:
{
   2c524:	b570      	push	{r4, r5, r6, lr}
	if (chan != SENSOR_CHAN_ALL) {
   2c526:	2925      	cmp	r1, #37	; 0x25
{
   2c528:	b088      	sub	sp, #32
	struct bh1749_data *data = dev->driver_data;
   2c52a:	6884      	ldr	r4, [r0, #8]
	if (chan != SENSOR_CHAN_ALL) {
   2c52c:	d013      	beq.n	2c556 <bh1749_sample_fetch+0x32>
		LOG_ERR("Unsupported sensor channel");
   2c52e:	2301      	movs	r3, #1
   2c530:	f04f 0000 	mov.w	r0, #0
   2c534:	4a3c      	ldr	r2, [pc, #240]	; (2c628 <bh1749_sample_fetch+0x104>)
   2c536:	f363 0002 	bfi	r0, r3, #0, #3
   2c53a:	4b3c      	ldr	r3, [pc, #240]	; (2c62c <bh1749_sample_fetch+0x108>)
   2c53c:	f36f 00c5 	bfc	r0, #3, #3
   2c540:	1a9b      	subs	r3, r3, r2
   2c542:	08db      	lsrs	r3, r3, #3
   2c544:	f363 108f 	bfi	r0, r3, #6, #10
   2c548:	4939      	ldr	r1, [pc, #228]	; (2c630 <bh1749_sample_fetch+0x10c>)
   2c54a:	f01b f9db 	bl	47904 <log_string_sync>
		return -ENOTSUP;
   2c54e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c552:	b008      	add	sp, #32
   2c554:	bd70      	pop	{r4, r5, r6, pc}
	if (unlikely(!data->ready)) {
   2c556:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2c55a:	b993      	cbnz	r3, 2c582 <bh1749_sample_fetch+0x5e>
		LOG_INF("Device is not initialized yet");
   2c55c:	2203      	movs	r2, #3
   2c55e:	f04f 0000 	mov.w	r0, #0
   2c562:	f362 0002 	bfi	r0, r2, #0, #3
   2c566:	f363 00c5 	bfi	r0, r3, #3, #3
   2c56a:	4a2f      	ldr	r2, [pc, #188]	; (2c628 <bh1749_sample_fetch+0x104>)
   2c56c:	4b2f      	ldr	r3, [pc, #188]	; (2c62c <bh1749_sample_fetch+0x108>)
   2c56e:	4931      	ldr	r1, [pc, #196]	; (2c634 <bh1749_sample_fetch+0x110>)
   2c570:	1a9b      	subs	r3, r3, r2
   2c572:	08db      	lsrs	r3, r3, #3
   2c574:	f363 108f 	bfi	r0, r3, #6, #10
   2c578:	f01b f9c4 	bl	47904 <log_string_sync>
		return -EBUSY;
   2c57c:	f06f 000f 	mvn.w	r0, #15
   2c580:	e7e7      	b.n	2c552 <bh1749_sample_fetch+0x2e>
	if (i2c_reg_read_byte(data->i2c, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c582:	f10d 0306 	add.w	r3, sp, #6
   2c586:	2242      	movs	r2, #66	; 0x42
   2c588:	2138      	movs	r1, #56	; 0x38
   2c58a:	6820      	ldr	r0, [r4, #0]
   2c58c:	f01d fcd0 	bl	49f30 <i2c_reg_read_byte>
   2c590:	2601      	movs	r6, #1
   2c592:	4605      	mov	r5, r0
   2c594:	b188      	cbz	r0, 2c5ba <bh1749_sample_fetch+0x96>
		LOG_ERR("Could not read status register CONTROL2");
   2c596:	f04f 0000 	mov.w	r0, #0
   2c59a:	4b24      	ldr	r3, [pc, #144]	; (2c62c <bh1749_sample_fetch+0x108>)
   2c59c:	4a22      	ldr	r2, [pc, #136]	; (2c628 <bh1749_sample_fetch+0x104>)
   2c59e:	f366 0002 	bfi	r0, r6, #0, #3
   2c5a2:	1a9b      	subs	r3, r3, r2
   2c5a4:	f36f 00c5 	bfc	r0, #3, #3
   2c5a8:	08db      	lsrs	r3, r3, #3
   2c5aa:	4923      	ldr	r1, [pc, #140]	; (2c638 <bh1749_sample_fetch+0x114>)
   2c5ac:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not read sensor samples");
   2c5b0:	f01b f9a8 	bl	47904 <log_string_sync>
		return -EIO;
   2c5b4:	f06f 0004 	mvn.w	r0, #4
   2c5b8:	e7cb      	b.n	2c552 <bh1749_sample_fetch+0x2e>
	if ((status & (BH1749_MODE_CONTROL2_VALID_Msk)) == 0) {
   2c5ba:	f99d 3006 	ldrsb.w	r3, [sp, #6]
   2c5be:	2b00      	cmp	r3, #0
   2c5c0:	db0d      	blt.n	2c5de <bh1749_sample_fetch+0xba>
		LOG_ERR("No valid data to fetch.");
   2c5c2:	f04f 0000 	mov.w	r0, #0
   2c5c6:	4b19      	ldr	r3, [pc, #100]	; (2c62c <bh1749_sample_fetch+0x108>)
   2c5c8:	4a17      	ldr	r2, [pc, #92]	; (2c628 <bh1749_sample_fetch+0x104>)
   2c5ca:	f366 0002 	bfi	r0, r6, #0, #3
   2c5ce:	1a9b      	subs	r3, r3, r2
   2c5d0:	f365 00c5 	bfi	r0, r5, #3, #3
   2c5d4:	08db      	lsrs	r3, r3, #3
   2c5d6:	f363 108f 	bfi	r0, r3, #6, #10
   2c5da:	4918      	ldr	r1, [pc, #96]	; (2c63c <bh1749_sample_fetch+0x118>)
   2c5dc:	e7e8      	b.n	2c5b0 <bh1749_sample_fetch+0x8c>
   2c5de:	2250      	movs	r2, #80	; 0x50
   2c5e0:	ab08      	add	r3, sp, #32
	if (i2c_burst_read(data->i2c, DT_INST_0_ROHM_BH1749_BASE_ADDRESS,
   2c5e2:	f854 0b24 	ldr.w	r0, [r4], #36
   2c5e6:	f803 2d19 	strb.w	r2, [r3, #-25]!
	msg[0].len = num_write;
   2c5ea:	e9cd 3602 	strd	r3, r6, [sp, #8]
	msg[1].len = num_read;
   2c5ee:	230a      	movs	r3, #10
   2c5f0:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c5f2:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   2c5f4:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].buf = (u8_t *)read_buf;
   2c5f8:	9405      	str	r4, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c5fa:	f88d 301c 	strb.w	r3, [sp, #28]
   2c5fe:	2338      	movs	r3, #56	; 0x38
   2c600:	2202      	movs	r2, #2
   2c602:	a902      	add	r1, sp, #8
   2c604:	f01d fc54 	bl	49eb0 <z_impl_i2c_transfer>
   2c608:	2800      	cmp	r0, #0
   2c60a:	d0a2      	beq.n	2c552 <bh1749_sample_fetch+0x2e>
		LOG_ERR("Could not read sensor samples");
   2c60c:	f04f 0000 	mov.w	r0, #0
   2c610:	4b06      	ldr	r3, [pc, #24]	; (2c62c <bh1749_sample_fetch+0x108>)
   2c612:	4a05      	ldr	r2, [pc, #20]	; (2c628 <bh1749_sample_fetch+0x104>)
   2c614:	f366 0002 	bfi	r0, r6, #0, #3
   2c618:	1a9b      	subs	r3, r3, r2
   2c61a:	f365 00c5 	bfi	r0, r5, #3, #3
   2c61e:	08db      	lsrs	r3, r3, #3
   2c620:	f363 108f 	bfi	r0, r3, #6, #10
   2c624:	4906      	ldr	r1, [pc, #24]	; (2c640 <bh1749_sample_fetch+0x11c>)
   2c626:	e7c3      	b.n	2c5b0 <bh1749_sample_fetch+0x8c>
   2c628:	0004a688 	.word	0x0004a688
   2c62c:	0004a690 	.word	0x0004a690
   2c630:	00051971 	.word	0x00051971
   2c634:	00051953 	.word	0x00051953
   2c638:	0005198c 	.word	0x0005198c
   2c63c:	000519b4 	.word	0x000519b4
   2c640:	000519cc 	.word	0x000519cc

0002c644 <start>:
	return err;
}
#endif

static int start(struct device *dev)
{
   2c644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int retval;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2c648:	2400      	movs	r4, #0
	nrf_gnss_fix_interval_t fix_interval = 1;
   2c64a:	2501      	movs	r5, #1
{
   2c64c:	b0a1      	sub	sp, #132	; 0x84
	struct gps_drv_data *drv_data = dev->driver_data;
   2c64e:	6887      	ldr	r7, [r0, #8]
	char buf[50] = {0};
   2c650:	2232      	movs	r2, #50	; 0x32
   2c652:	4621      	mov	r1, r4
   2c654:	a813      	add	r0, sp, #76	; 0x4c
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2c656:	f8ad 4010 	strh.w	r4, [sp, #16]
	nrf_gnss_fix_interval_t fix_interval = 1;
   2c65a:	f8ad 5012 	strh.w	r5, [sp, #18]
	nrf_gnss_nmea_mask_t    nmea_mask    = 0;
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   2c65e:	9406      	str	r4, [sp, #24]
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GLL
	nmea_mask |= NRF_GNSS_NMEA_GLL_MASK;
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GGA
	nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   2c660:	f8ad 5014 	strh.w	r5, [sp, #20]
	char buf[50] = {0};
   2c664:	f014 fce8 	bl	41038 <memset>
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2c668:	2105      	movs	r1, #5
   2c66a:	a807      	add	r0, sp, #28
	struct at_param_list at_resp_list = {0};
   2c66c:	e9cd 4407 	strd	r4, r4, [sp, #28]
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2c670:	f01d f8f8 	bl	49864 <at_params_list_init>
   2c674:	4ec0      	ldr	r6, [pc, #768]	; (2c978 <start+0x334>)
   2c676:	4bc1      	ldr	r3, [pc, #772]	; (2c97c <start+0x338>)
	if (err) {
   2c678:	4681      	mov	r9, r0
   2c67a:	1af6      	subs	r6, r6, r3
   2c67c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   2c680:	b1c0      	cbz	r0, 2c6b4 <start+0x70>
		LOG_ERR("Could init AT params list, error: %d", err);
   2c682:	f04f 0000 	mov.w	r0, #0
   2c686:	f365 0002 	bfi	r0, r5, #0, #3
   2c68a:	f364 00c5 	bfi	r0, r4, #3, #3
   2c68e:	f366 108f 	bfi	r0, r6, #6, #10
   2c692:	464a      	mov	r2, r9
   2c694:	49ba      	ldr	r1, [pc, #744]	; (2c980 <start+0x33c>)
   2c696:	f01b f935 	bl	47904 <log_string_sync>
	nmea_mask |= NRF_GNSS_NMEA_RMC_MASK;
#endif

#ifdef CONFIG_NRF9160_GPS_HANDLE_MODEM_CONFIGURATION
	if (enable_gps(dev) != 0) {
		LOG_ERR("Failed to enable GPS");
   2c69a:	f04f 0000 	mov.w	r0, #0
   2c69e:	2301      	movs	r3, #1
   2c6a0:	f363 0002 	bfi	r0, r3, #0, #3
   2c6a4:	f36f 00c5 	bfc	r0, #3, #3
   2c6a8:	49b6      	ldr	r1, [pc, #728]	; (2c984 <start+0x340>)
   2c6aa:	f366 108f 	bfi	r0, r6, #6, #10
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));

	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
   2c6ae:	f01b f929 	bl	47904 <log_string_sync>
   2c6b2:	e15b      	b.n	2c96c <start+0x328>
	err = at_cmd_write(AT_XSYSTEMMODE_REQUEST, buf, sizeof(buf), NULL);
   2c6b4:	4603      	mov	r3, r0
   2c6b6:	2232      	movs	r2, #50	; 0x32
   2c6b8:	a913      	add	r1, sp, #76	; 0x4c
   2c6ba:	48b3      	ldr	r0, [pc, #716]	; (2c988 <start+0x344>)
   2c6bc:	f7ff fb5a 	bl	2bd74 <at_cmd_write>
	if (err) {
   2c6c0:	4680      	mov	r8, r0
   2c6c2:	2800      	cmp	r0, #0
   2c6c4:	d044      	beq.n	2c750 <start+0x10c>
		LOG_ERR("Could not get modem's system mode");
   2c6c6:	f04f 0000 	mov.w	r0, #0
   2c6ca:	f365 0002 	bfi	r0, r5, #0, #3
   2c6ce:	f369 00c5 	bfi	r0, r9, #3, #3
   2c6d2:	f366 108f 	bfi	r0, r6, #6, #10
   2c6d6:	49ad      	ldr	r1, [pc, #692]	; (2c98c <start+0x348>)
   2c6d8:	f01b f914 	bl	47904 <log_string_sync>
		err = -EIO;
   2c6dc:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&at_resp_list);
   2c6e0:	a807      	add	r0, sp, #28
   2c6e2:	f01d f8d2 	bl	4988a <at_params_list_free>
	if (enable_gps(dev) != 0) {
   2c6e6:	2c00      	cmp	r4, #0
   2c6e8:	d1d7      	bne.n	2c69a <start+0x56>
	if (drv_data->socket < 0) {
   2c6ea:	6a3b      	ldr	r3, [r7, #32]
   2c6ec:	2b00      	cmp	r3, #0
   2c6ee:	da17      	bge.n	2c720 <start+0xdc>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2c6f0:	f44f 7201 	mov.w	r2, #516	; 0x204
   2c6f4:	2102      	movs	r1, #2
   2c6f6:	2001      	movs	r0, #1
   2c6f8:	f001 fee6 	bl	2e4c8 <nrf_socket>
   2c6fc:	4602      	mov	r2, r0
		if (drv_data->socket >= 0) {
   2c6fe:	2a00      	cmp	r2, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2c700:	6238      	str	r0, [r7, #32]
			LOG_DBG("GPS socket created");
   2c702:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   2c706:	f2c0 8127 	blt.w	2c958 <start+0x314>
			LOG_DBG("GPS socket created");
   2c70a:	2304      	movs	r3, #4
   2c70c:	f363 0002 	bfi	r0, r3, #0, #3
   2c710:	f364 00c5 	bfi	r0, r4, #3, #3
   2c714:	f366 108f 	bfi	r0, r6, #6, #10
   2c718:	4a9d      	ldr	r2, [pc, #628]	; (2c990 <start+0x34c>)
   2c71a:	499e      	ldr	r1, [pc, #632]	; (2c994 <start+0x350>)
   2c71c:	f01b f8f2 	bl	47904 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   2c720:	2402      	movs	r4, #2
   2c722:	9400      	str	r4, [sp, #0]
   2c724:	ab04      	add	r3, sp, #16
   2c726:	4622      	mov	r2, r4
   2c728:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c72c:	6a38      	ldr	r0, [r7, #32]
   2c72e:	f001 ffcd 	bl	2e6cc <nrf_setsockopt>
	if (retval != 0) {
   2c732:	4680      	mov	r8, r0
   2c734:	2800      	cmp	r0, #0
   2c736:	f000 8155 	beq.w	2c9e4 <start+0x3a0>
		LOG_ERR("Failed to set fix retry value");
   2c73a:	f04f 0000 	mov.w	r0, #0
   2c73e:	2301      	movs	r3, #1
   2c740:	f363 0002 	bfi	r0, r3, #0, #3
   2c744:	f36f 00c5 	bfc	r0, #3, #3
   2c748:	f366 108f 	bfi	r0, r6, #6, #10
   2c74c:	4992      	ldr	r1, [pc, #584]	; (2c998 <start+0x354>)
   2c74e:	e7ae      	b.n	2c6ae <start+0x6a>
	err = at_parser_max_params_from_str(buf,
   2c750:	4601      	mov	r1, r0
   2c752:	2305      	movs	r3, #5
   2c754:	aa07      	add	r2, sp, #28
   2c756:	a813      	add	r0, sp, #76	; 0x4c
   2c758:	f7fa f8e6 	bl	26928 <at_parser_max_params_from_str>
	if (err) {
   2c75c:	4604      	mov	r4, r0
   2c75e:	b160      	cbz	r0, 2c77a <start+0x136>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2c760:	f04f 0000 	mov.w	r0, #0
   2c764:	4622      	mov	r2, r4
   2c766:	f365 0002 	bfi	r0, r5, #0, #3
   2c76a:	f368 00c5 	bfi	r0, r8, #3, #3
   2c76e:	498b      	ldr	r1, [pc, #556]	; (2c99c <start+0x358>)
   2c770:	f366 108f 	bfi	r0, r6, #6, #10
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2c774:	f01b f8c6 	bl	47904 <log_string_sync>
   2c778:	e7b2      	b.n	2c6e0 <start+0x9c>
	err = at_params_short_get(&at_resp_list,
   2c77a:	f10d 0216 	add.w	r2, sp, #22
   2c77e:	2103      	movs	r1, #3
   2c780:	a807      	add	r0, sp, #28
   2c782:	f01d f91a 	bl	499ba <at_params_short_get>
	if (err) {
   2c786:	4604      	mov	r4, r0
   2c788:	b150      	cbz	r0, 2c7a0 <start+0x15c>
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2c78a:	f04f 0000 	mov.w	r0, #0
   2c78e:	f365 0002 	bfi	r0, r5, #0, #3
   2c792:	f368 00c5 	bfi	r0, r8, #3, #3
   2c796:	f366 108f 	bfi	r0, r6, #6, #10
   2c79a:	4622      	mov	r2, r4
   2c79c:	4980      	ldr	r1, [pc, #512]	; (2c9a0 <start+0x35c>)
   2c79e:	e7e9      	b.n	2c774 <start+0x130>
	if (gps_param_value != 1) {
   2c7a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2c7a4:	2b01      	cmp	r3, #1
   2c7a6:	d050      	beq.n	2c84a <start+0x206>
		u16_t values[AT_XSYSTEMMODE_PARAMS_COUNT] = {0};
   2c7a8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   2c7ac:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   2c7b0:	2304      	movs	r3, #4
   2c7b2:	f04f 0000 	mov.w	r0, #0
   2c7b6:	f363 0002 	bfi	r0, r3, #0, #3
   2c7ba:	f364 00c5 	bfi	r0, r4, #3, #3
   2c7be:	f366 108f 	bfi	r0, r6, #6, #10
   2c7c2:	4a78      	ldr	r2, [pc, #480]	; (2c9a4 <start+0x360>)
   2c7c4:	4978      	ldr	r1, [pc, #480]	; (2c9a8 <start+0x364>)
   2c7c6:	f01b f89d 	bl	47904 <log_string_sync>
			at_params_short_get(&at_resp_list, i, &values[i]);
   2c7ca:	ab09      	add	r3, sp, #36	; 0x24
   2c7cc:	eb03 0244 	add.w	r2, r3, r4, lsl #1
   2c7d0:	4621      	mov	r1, r4
   2c7d2:	a807      	add	r0, sp, #28
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2c7d4:	3401      	adds	r4, #1
			at_params_short_get(&at_resp_list, i, &values[i]);
   2c7d6:	f01d f8f0 	bl	499ba <at_params_short_get>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2c7da:	2c05      	cmp	r4, #5
   2c7dc:	d1f5      	bne.n	2c7ca <start+0x186>
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2c7de:	2501      	movs	r5, #1
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   2c7e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2c7e4:	211c      	movs	r1, #28
   2c7e6:	9201      	str	r2, [sp, #4]
   2c7e8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   2c7ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2c7f0:	9200      	str	r2, [sp, #0]
   2c7f2:	9502      	str	r5, [sp, #8]
   2c7f4:	4a6d      	ldr	r2, [pc, #436]	; (2c9ac <start+0x368>)
   2c7f6:	a80c      	add	r0, sp, #48	; 0x30
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2c7f8:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2c7fc:	f04f 0400 	mov.w	r4, #0
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   2c800:	f014 fe40 	bl	41484 <snprintf>
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2c804:	2304      	movs	r3, #4
   2c806:	a80c      	add	r0, sp, #48	; 0x30
   2c808:	f363 0402 	bfi	r4, r3, #0, #3
   2c80c:	f01b f88c 	bl	47928 <log_strdup>
   2c810:	f36f 04c5 	bfc	r4, #3, #3
   2c814:	f366 148f 	bfi	r4, r6, #6, #10
   2c818:	4603      	mov	r3, r0
   2c81a:	4a62      	ldr	r2, [pc, #392]	; (2c9a4 <start+0x360>)
   2c81c:	4620      	mov	r0, r4
   2c81e:	4964      	ldr	r1, [pc, #400]	; (2c9b0 <start+0x36c>)
   2c820:	f01b f870 	bl	47904 <log_string_sync>
		err = at_cmd_write(cmd, NULL, 0, NULL);
   2c824:	2300      	movs	r3, #0
   2c826:	a80c      	add	r0, sp, #48	; 0x30
   2c828:	461a      	mov	r2, r3
   2c82a:	4619      	mov	r1, r3
   2c82c:	f7ff faa2 	bl	2bd74 <at_cmd_write>
		if (err) {
   2c830:	4604      	mov	r4, r0
   2c832:	b150      	cbz	r0, 2c84a <start+0x206>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   2c834:	f04f 0000 	mov.w	r0, #0
   2c838:	f365 0002 	bfi	r0, r5, #0, #3
   2c83c:	f36f 00c5 	bfc	r0, #3, #3
   2c840:	f366 108f 	bfi	r0, r6, #6, #10
   2c844:	4622      	mov	r2, r4
   2c846:	495b      	ldr	r1, [pc, #364]	; (2c9b4 <start+0x370>)
   2c848:	e794      	b.n	2c774 <start+0x130>
	LOG_DBG("GPS mode is enabled");
   2c84a:	f04f 0804 	mov.w	r8, #4
   2c84e:	f04f 0000 	mov.w	r0, #0
   2c852:	f368 0002 	bfi	r0, r8, #0, #3
   2c856:	f36f 00c5 	bfc	r0, #3, #3
   2c85a:	f366 108f 	bfi	r0, r6, #6, #10
   2c85e:	4a51      	ldr	r2, [pc, #324]	; (2c9a4 <start+0x360>)
   2c860:	4955      	ldr	r1, [pc, #340]	; (2c9b8 <start+0x374>)
   2c862:	f01b f84f 	bl	47904 <log_string_sync>
	err = at_cmd_write(AT_CFUN_REQUEST, buf, sizeof(buf), NULL);
   2c866:	2300      	movs	r3, #0
   2c868:	2232      	movs	r2, #50	; 0x32
   2c86a:	a913      	add	r1, sp, #76	; 0x4c
   2c86c:	4853      	ldr	r0, [pc, #332]	; (2c9bc <start+0x378>)
   2c86e:	f7ff fa81 	bl	2bd74 <at_cmd_write>
	if (err) {
   2c872:	4604      	mov	r4, r0
   2c874:	b158      	cbz	r0, 2c88e <start+0x24a>
		LOG_ERR("Could not get functional mode, error: %d", err);
   2c876:	f04f 0000 	mov.w	r0, #0
   2c87a:	2301      	movs	r3, #1
   2c87c:	f363 0002 	bfi	r0, r3, #0, #3
   2c880:	f36f 00c5 	bfc	r0, #3, #3
   2c884:	f366 108f 	bfi	r0, r6, #6, #10
   2c888:	4622      	mov	r2, r4
   2c88a:	494d      	ldr	r1, [pc, #308]	; (2c9c0 <start+0x37c>)
   2c88c:	e772      	b.n	2c774 <start+0x130>
	err = at_parser_max_params_from_str(buf,
   2c88e:	4601      	mov	r1, r0
   2c890:	2302      	movs	r3, #2
   2c892:	aa07      	add	r2, sp, #28
   2c894:	a813      	add	r0, sp, #76	; 0x4c
   2c896:	f7fa f847 	bl	26928 <at_parser_max_params_from_str>
	if (err) {
   2c89a:	4604      	mov	r4, r0
   2c89c:	b158      	cbz	r0, 2c8b6 <start+0x272>
		LOG_ERR("Could not parse functional mode response, error: %d",
   2c89e:	f04f 0000 	mov.w	r0, #0
   2c8a2:	2301      	movs	r3, #1
   2c8a4:	f363 0002 	bfi	r0, r3, #0, #3
   2c8a8:	f36f 00c5 	bfc	r0, #3, #3
   2c8ac:	f366 108f 	bfi	r0, r6, #6, #10
   2c8b0:	4622      	mov	r2, r4
   2c8b2:	4944      	ldr	r1, [pc, #272]	; (2c9c4 <start+0x380>)
   2c8b4:	e75e      	b.n	2c774 <start+0x130>
	err = at_params_short_get(&at_resp_list, 1, &functional_mode);
   2c8b6:	aa0c      	add	r2, sp, #48	; 0x30
   2c8b8:	2101      	movs	r1, #1
   2c8ba:	a807      	add	r0, sp, #28
   2c8bc:	f01d f87d 	bl	499ba <at_params_short_get>
	if (err) {
   2c8c0:	4604      	mov	r4, r0
		LOG_ERR("Could not get value of functional mode, error: %d",
   2c8c2:	f04f 0000 	mov.w	r0, #0
	if (err) {
   2c8c6:	b14c      	cbz	r4, 2c8dc <start+0x298>
		LOG_ERR("Could not get value of functional mode, error: %d",
   2c8c8:	2301      	movs	r3, #1
   2c8ca:	f363 0002 	bfi	r0, r3, #0, #3
   2c8ce:	f36f 00c5 	bfc	r0, #3, #3
   2c8d2:	f366 108f 	bfi	r0, r6, #6, #10
   2c8d6:	4622      	mov	r2, r4
   2c8d8:	493b      	ldr	r1, [pc, #236]	; (2c9c8 <start+0x384>)
   2c8da:	e74b      	b.n	2c774 <start+0x130>
	LOG_DBG("Functional mode: %d", functional_mode);
   2c8dc:	f368 0002 	bfi	r0, r8, #0, #3
   2c8e0:	f364 00c5 	bfi	r0, r4, #3, #3
   2c8e4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2c8e8:	f366 108f 	bfi	r0, r6, #6, #10
   2c8ec:	4a2d      	ldr	r2, [pc, #180]	; (2c9a4 <start+0x360>)
   2c8ee:	4937      	ldr	r1, [pc, #220]	; (2c9cc <start+0x388>)
   2c8f0:	f01b f808 	bl	47904 <log_string_sync>
	if (functional_mode != FUNCTIONAL_MODE_ENABLED) {
   2c8f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2c8f8:	2b01      	cmp	r3, #1
   2c8fa:	f43f aef1 	beq.w	2c6e0 <start+0x9c>
		LOG_DBG("Functional mode was %d, attemping to set to %d",
   2c8fe:	f04f 0000 	mov.w	r0, #0
   2c902:	2501      	movs	r5, #1
   2c904:	f368 0002 	bfi	r0, r8, #0, #3
   2c908:	f364 00c5 	bfi	r0, r4, #3, #3
   2c90c:	f366 108f 	bfi	r0, r6, #6, #10
   2c910:	4a24      	ldr	r2, [pc, #144]	; (2c9a4 <start+0x360>)
   2c912:	492f      	ldr	r1, [pc, #188]	; (2c9d0 <start+0x38c>)
   2c914:	9500      	str	r5, [sp, #0]
   2c916:	f01a fff5 	bl	47904 <log_string_sync>
		err = at_cmd_write(AT_CFUN_1, NULL, 0, NULL);
   2c91a:	4623      	mov	r3, r4
   2c91c:	4622      	mov	r2, r4
   2c91e:	4621      	mov	r1, r4
   2c920:	482c      	ldr	r0, [pc, #176]	; (2c9d4 <start+0x390>)
   2c922:	f7ff fa27 	bl	2bd74 <at_cmd_write>
		if (err) {
   2c926:	4604      	mov	r4, r0
			LOG_ERR("Could not set functional mode to %d",
   2c928:	f04f 0000 	mov.w	r0, #0
		if (err) {
   2c92c:	b144      	cbz	r4, 2c940 <start+0x2fc>
			LOG_ERR("Could not set functional mode to %d",
   2c92e:	f365 0002 	bfi	r0, r5, #0, #3
   2c932:	f36f 00c5 	bfc	r0, #3, #3
   2c936:	f366 108f 	bfi	r0, r6, #6, #10
   2c93a:	462a      	mov	r2, r5
   2c93c:	4926      	ldr	r1, [pc, #152]	; (2c9d8 <start+0x394>)
   2c93e:	e719      	b.n	2c774 <start+0x130>
		LOG_DBG("Functional mode set to %d", FUNCTIONAL_MODE_ENABLED);
   2c940:	f368 0002 	bfi	r0, r8, #0, #3
   2c944:	f364 00c5 	bfi	r0, r4, #3, #3
   2c948:	f366 108f 	bfi	r0, r6, #6, #10
   2c94c:	462b      	mov	r3, r5
   2c94e:	4a15      	ldr	r2, [pc, #84]	; (2c9a4 <start+0x360>)
   2c950:	4922      	ldr	r1, [pc, #136]	; (2c9dc <start+0x398>)
   2c952:	f01a ffd7 	bl	47904 <log_string_sync>
   2c956:	e6c3      	b.n	2c6e0 <start+0x9c>
			LOG_ERR("Could not init socket (err: %d)",
   2c958:	2101      	movs	r1, #1
   2c95a:	f361 0002 	bfi	r0, r1, #0, #3
   2c95e:	f364 00c5 	bfi	r0, r4, #3, #3
   2c962:	f366 108f 	bfi	r0, r6, #6, #10
   2c966:	491e      	ldr	r1, [pc, #120]	; (2c9e0 <start+0x39c>)
   2c968:	f01a ffcc 	bl	47904 <log_string_sync>
		return -EIO;
   2c96c:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(&drv_data->thread_run_sem);

	LOG_DBG("GPS operational");

	return retval;
}
   2c970:	4620      	mov	r0, r4
   2c972:	b021      	add	sp, #132	; 0x84
   2c974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c978:	0004a768 	.word	0x0004a768
   2c97c:	0004a688 	.word	0x0004a688
   2c980:	00051b67 	.word	0x00051b67
   2c984:	00051dd5 	.word	0x00051dd5
   2c988:	0004f5cd 	.word	0x0004f5cd
   2c98c:	00051b8c 	.word	0x00051b8c
   2c990:	00051a16 	.word	0x00051a16
   2c994:	00051dea 	.word	0x00051dea
   2c998:	00051e21 	.word	0x00051e21
   2c99c:	00051bae 	.word	0x00051bae
   2c9a0:	00051bd5 	.word	0x00051bd5
   2c9a4:	00051a0b 	.word	0x00051a0b
   2c9a8:	00051bfd 	.word	0x00051bfd
   2c9ac:	00051c32 	.word	0x00051c32
   2c9b0:	00051c4e 	.word	0x00051c4e
   2c9b4:	00051c69 	.word	0x00051c69
   2c9b8:	00051c8e 	.word	0x00051c8e
   2c9bc:	00051ca6 	.word	0x00051ca6
   2c9c0:	00051caf 	.word	0x00051caf
   2c9c4:	00051cd8 	.word	0x00051cd8
   2c9c8:	00051d0c 	.word	0x00051d0c
   2c9cc:	00051d3e 	.word	0x00051d3e
   2c9d0:	00051d56 	.word	0x00051d56
   2c9d4:	00051d89 	.word	0x00051d89
   2c9d8:	00051d93 	.word	0x00051d93
   2c9dc:	00051db7 	.word	0x00051db7
   2c9e0:	00051e01 	.word	0x00051e01
	retval = nrf_setsockopt(drv_data->socket,
   2c9e4:	9400      	str	r4, [sp, #0]
   2c9e6:	f10d 0312 	add.w	r3, sp, #18
   2c9ea:	2201      	movs	r2, #1
   2c9ec:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c9f0:	6a38      	ldr	r0, [r7, #32]
   2c9f2:	f001 fe6b 	bl	2e6cc <nrf_setsockopt>
	if (retval != 0) {
   2c9f6:	4605      	mov	r5, r0
   2c9f8:	b150      	cbz	r0, 2ca10 <start+0x3cc>
		LOG_ERR("Failed to set fix interval value");
   2c9fa:	f04f 0000 	mov.w	r0, #0
   2c9fe:	2301      	movs	r3, #1
   2ca00:	f363 0002 	bfi	r0, r3, #0, #3
   2ca04:	f368 00c5 	bfi	r0, r8, #3, #3
   2ca08:	f366 108f 	bfi	r0, r6, #6, #10
   2ca0c:	4922      	ldr	r1, [pc, #136]	; (2ca98 <start+0x454>)
   2ca0e:	e64e      	b.n	2c6ae <start+0x6a>
	retval = nrf_setsockopt(drv_data->socket,
   2ca10:	9400      	str	r4, [sp, #0]
   2ca12:	ab05      	add	r3, sp, #20
   2ca14:	2204      	movs	r2, #4
   2ca16:	f44f 7101 	mov.w	r1, #516	; 0x204
   2ca1a:	6a38      	ldr	r0, [r7, #32]
   2ca1c:	f001 fe56 	bl	2e6cc <nrf_setsockopt>
	if (retval != 0) {
   2ca20:	4680      	mov	r8, r0
   2ca22:	b150      	cbz	r0, 2ca3a <start+0x3f6>
		LOG_ERR("Failed to set nmea mask");
   2ca24:	f04f 0000 	mov.w	r0, #0
   2ca28:	2301      	movs	r3, #1
   2ca2a:	f363 0002 	bfi	r0, r3, #0, #3
   2ca2e:	f365 00c5 	bfi	r0, r5, #3, #3
   2ca32:	f366 108f 	bfi	r0, r6, #6, #10
   2ca36:	4919      	ldr	r1, [pc, #100]	; (2ca9c <start+0x458>)
   2ca38:	e639      	b.n	2c6ae <start+0x6a>
	retval = nrf_setsockopt(drv_data->socket,
   2ca3a:	2504      	movs	r5, #4
   2ca3c:	9500      	str	r5, [sp, #0]
   2ca3e:	2207      	movs	r2, #7
   2ca40:	ab06      	add	r3, sp, #24
   2ca42:	f44f 7101 	mov.w	r1, #516	; 0x204
   2ca46:	6a38      	ldr	r0, [r7, #32]
   2ca48:	f001 fe40 	bl	2e6cc <nrf_setsockopt>
   2ca4c:	2201      	movs	r2, #1
	if (retval != 0) {
   2ca4e:	4604      	mov	r4, r0
   2ca50:	b148      	cbz	r0, 2ca66 <start+0x422>
		LOG_ERR("Failed to start GPS");
   2ca52:	f04f 0000 	mov.w	r0, #0
   2ca56:	f362 0002 	bfi	r0, r2, #0, #3
   2ca5a:	f368 00c5 	bfi	r0, r8, #3, #3
   2ca5e:	f366 108f 	bfi	r0, r6, #6, #10
   2ca62:	490f      	ldr	r1, [pc, #60]	; (2caa0 <start+0x45c>)
   2ca64:	e623      	b.n	2c6ae <start+0x6a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ca66:	f107 031c 	add.w	r3, r7, #28
   2ca6a:	e8d3 1fef 	ldaex	r1, [r3]
   2ca6e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2ca72:	2800      	cmp	r0, #0
   2ca74:	d1f9      	bne.n	2ca6a <start+0x426>
	z_impl_k_sem_give(sem);
   2ca76:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
   2ca7a:	f012 f9e5 	bl	3ee48 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   2ca7e:	f04f 0000 	mov.w	r0, #0
   2ca82:	f365 0002 	bfi	r0, r5, #0, #3
   2ca86:	f364 00c5 	bfi	r0, r4, #3, #3
   2ca8a:	f366 108f 	bfi	r0, r6, #6, #10
   2ca8e:	4a05      	ldr	r2, [pc, #20]	; (2caa4 <start+0x460>)
   2ca90:	4905      	ldr	r1, [pc, #20]	; (2caa8 <start+0x464>)
   2ca92:	f01a ff37 	bl	47904 <log_string_sync>
	return retval;
   2ca96:	e76b      	b.n	2c970 <start+0x32c>
   2ca98:	00051e3f 	.word	0x00051e3f
   2ca9c:	00051e60 	.word	0x00051e60
   2caa0:	00051e78 	.word	0x00051e78
   2caa4:	00051a16 	.word	0x00051a16
   2caa8:	00051e8c 	.word	0x00051e8c

0002caac <channel_get>:
	return 0;
}

static int channel_get(struct device *dev, enum gps_channel chan,
		       struct gps_data *sample)
{
   2caac:	b570      	push	{r4, r5, r6, lr}
   2caae:	4615      	mov	r5, r2
	switch (chan) {
   2cab0:	b121      	cbz	r1, 2cabc <channel_get+0x10>
   2cab2:	2901      	cmp	r1, #1
   2cab4:	d011      	beq.n	2cada <channel_get+0x2e>
		break;
	case GPS_CHAN_PVT:
		memcpy(sample, &fresh_pvt, sizeof(struct gps_data));
		break;
	default:
		return -ENOTSUP;
   2cab6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2caba:	e00d      	b.n	2cad8 <channel_get+0x2c>
		memcpy(sample->nmea.buf, fresh_nmea.nmea.buf,
   2cabc:	4e0a      	ldr	r6, [pc, #40]	; (2cae8 <channel_get+0x3c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cabe:	f105 0008 	add.w	r0, r5, #8
   2cac2:	f896 205b 	ldrb.w	r2, [r6, #91]	; 0x5b
   2cac6:	f106 0108 	add.w	r1, r6, #8
   2caca:	f7ed f9f1 	bl	19eb0 <memcpy>
		sample->nmea.len = fresh_nmea.nmea.len;
   2cace:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
   2cad2:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
   2cad6:	2000      	movs	r0, #0
	}

	return 0;
}
   2cad8:	bd70      	pop	{r4, r5, r6, pc}
   2cada:	22c0      	movs	r2, #192	; 0xc0
   2cadc:	4903      	ldr	r1, [pc, #12]	; (2caec <channel_get+0x40>)
   2cade:	4628      	mov	r0, r5
   2cae0:	f7ed f9e6 	bl	19eb0 <memcpy>
   2cae4:	e7f7      	b.n	2cad6 <channel_get+0x2a>
   2cae6:	bf00      	nop
   2cae8:	20022f98 	.word	0x20022f98
   2caec:	20023058 	.word	0x20023058

0002caf0 <trigger_set>:
}

static int trigger_set(struct device *dev,
			       const struct gps_trigger *trig,
			       gps_trigger_handler_t handler)
{
   2caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct gps_drv_data *drv_data = dev->driver_data;
	(void)drv_data;

	switch (trig->type) {
   2caf2:	780b      	ldrb	r3, [r1, #0]
{
   2caf4:	460e      	mov	r6, r1
	switch (trig->type) {
   2caf6:	3b01      	subs	r3, #1
   2caf8:	2b01      	cmp	r3, #1
{
   2cafa:	4617      	mov	r7, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   2cafc:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   2cafe:	d80e      	bhi.n	2cb1e <trigger_set+0x2e>
	case GPS_TRIG_DATA_READY:
	case GPS_TRIG_FIX:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2cb00:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2cb04:	f04f 31ff 	mov.w	r1, #4294967295
   2cb08:	4628      	mov	r0, r5
   2cb0a:	f010 fdf5 	bl	3d6f8 <z_impl_k_mutex_lock>
		drv_data->trigger_handler = handler;
		drv_data->trigger = *trig;
   2cb0e:	8833      	ldrh	r3, [r6, #0]
		drv_data->trigger_handler = handler;
   2cb10:	6027      	str	r7, [r4, #0]
		drv_data->trigger = *trig;
   2cb12:	80a3      	strh	r3, [r4, #4]
	z_impl_k_mutex_unlock(mutex);
   2cb14:	4628      	mov	r0, r5
   2cb16:	f010 fec9 	bl	3d8ac <z_impl_k_mutex_unlock>
	int ret = 0;
   2cb1a:	2000      	movs	r0, #0
		ret = -ENOTSUP;
		break;
	}

	return ret;
}
   2cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Unsupported GPS trigger");
   2cb1e:	2301      	movs	r3, #1
   2cb20:	f04f 0000 	mov.w	r0, #0
   2cb24:	4a07      	ldr	r2, [pc, #28]	; (2cb44 <trigger_set+0x54>)
   2cb26:	f363 0002 	bfi	r0, r3, #0, #3
   2cb2a:	4b07      	ldr	r3, [pc, #28]	; (2cb48 <trigger_set+0x58>)
   2cb2c:	f36f 00c5 	bfc	r0, #3, #3
   2cb30:	1a9b      	subs	r3, r3, r2
   2cb32:	08db      	lsrs	r3, r3, #3
   2cb34:	f363 108f 	bfi	r0, r3, #6, #10
   2cb38:	4904      	ldr	r1, [pc, #16]	; (2cb4c <trigger_set+0x5c>)
   2cb3a:	f01a fee3 	bl	47904 <log_string_sync>
   2cb3e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
   2cb42:	e7eb      	b.n	2cb1c <trigger_set+0x2c>
   2cb44:	0004a688 	.word	0x0004a688
   2cb48:	0004a768 	.word	0x0004a768
   2cb4c:	00051ed0 	.word	0x00051ed0

0002cb50 <gps_thread>:
{
   2cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool operation_blocked = false;
   2cb54:	2500      	movs	r5, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2cb56:	6883      	ldr	r3, [r0, #8]
{
   2cb58:	b0c3      	sub	sp, #268	; 0x10c
	struct gps_drv_data *drv_data = dev->driver_data;
   2cb5a:	9303      	str	r3, [sp, #12]
				LOG_DBG("NMEA data ready");
   2cb5c:	4a62      	ldr	r2, [pc, #392]	; (2cce8 <gps_thread+0x198>)
   2cb5e:	4b63      	ldr	r3, [pc, #396]	; (2ccec <gps_thread+0x19c>)
{
   2cb60:	900b      	str	r0, [sp, #44]	; 0x2c
				LOG_DBG("NMEA data ready");
   2cb62:	1a9b      	subs	r3, r3, r2
   2cb64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2cb68:	9304      	str	r3, [sp, #16]
	return z_impl_k_sem_take(sem, timeout);
   2cb6a:	9b03      	ldr	r3, [sp, #12]
   2cb6c:	f04f 31ff 	mov.w	r1, #4294967295
   2cb70:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
   2cb74:	f012 f9b0 	bl	3eed8 <z_impl_k_sem_take>
		len = recv(drv_data->socket, &raw_gps_data,
   2cb78:	9b03      	ldr	r3, [sp, #12]
   2cb7a:	6a1b      	ldr	r3, [r3, #32]
   2cb7c:	9309      	str	r3, [sp, #36]	; 0x24
	__ASSERT_NO_MSG(socket_ops);
   2cb7e:	4b5c      	ldr	r3, [pc, #368]	; (2ccf0 <gps_thread+0x1a0>)
   2cb80:	681b      	ldr	r3, [r3, #0]
   2cb82:	b94b      	cbnz	r3, 2cb98 <gps_thread+0x48>
   2cb84:	495b      	ldr	r1, [pc, #364]	; (2ccf4 <gps_thread+0x1a4>)
   2cb86:	485c      	ldr	r0, [pc, #368]	; (2ccf8 <gps_thread+0x1a8>)
   2cb88:	2369      	movs	r3, #105	; 0x69
   2cb8a:	4a5c      	ldr	r2, [pc, #368]	; (2ccfc <gps_thread+0x1ac>)
   2cb8c:	f01a fe9d 	bl	478ca <printk>
   2cb90:	2169      	movs	r1, #105	; 0x69
   2cb92:	485a      	ldr	r0, [pc, #360]	; (2ccfc <gps_thread+0x1ac>)
   2cb94:	f01a fea6 	bl	478e4 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2cb98:	4b55      	ldr	r3, [pc, #340]	; (2ccf0 <gps_thread+0x1a0>)
   2cb9a:	681b      	ldr	r3, [r3, #0]
   2cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cb9e:	b94b      	cbnz	r3, 2cbb4 <gps_thread+0x64>
   2cba0:	4957      	ldr	r1, [pc, #348]	; (2cd00 <gps_thread+0x1b0>)
   2cba2:	4855      	ldr	r0, [pc, #340]	; (2ccf8 <gps_thread+0x1a8>)
   2cba4:	236a      	movs	r3, #106	; 0x6a
   2cba6:	4a55      	ldr	r2, [pc, #340]	; (2ccfc <gps_thread+0x1ac>)
   2cba8:	f01a fe8f 	bl	478ca <printk>
   2cbac:	216a      	movs	r1, #106	; 0x6a
   2cbae:	4853      	ldr	r0, [pc, #332]	; (2ccfc <gps_thread+0x1ac>)
   2cbb0:	f01a fe98 	bl	478e4 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2cbb4:	4b4e      	ldr	r3, [pc, #312]	; (2ccf0 <gps_thread+0x1a0>)
   2cbb6:	22d8      	movs	r2, #216	; 0xd8
   2cbb8:	681b      	ldr	r3, [r3, #0]
   2cbba:	a90c      	add	r1, sp, #48	; 0x30
   2cbbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2cbbe:	9809      	ldr	r0, [sp, #36]	; 0x24
   2cbc0:	2300      	movs	r3, #0
   2cbc2:	47a0      	blx	r4
		if (len <= 0) {
   2cbc4:	1e02      	subs	r2, r0, #0
   2cbc6:	dc12      	bgt.n	2cbee <gps_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cbc8:	9b03      	ldr	r3, [sp, #12]
   2cbca:	331c      	adds	r3, #28
   2cbcc:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->gps_is_active)) {
   2cbd0:	2b00      	cmp	r3, #0
   2cbd2:	d0ca      	beq.n	2cb6a <gps_thread+0x1a>
			LOG_ERR("recv() returned error: %d", len);
   2cbd4:	2301      	movs	r3, #1
   2cbd6:	f363 0b02 	bfi	fp, r3, #0, #3
   2cbda:	9b04      	ldr	r3, [sp, #16]
   2cbdc:	f36f 0bc5 	bfc	fp, #3, #3
   2cbe0:	f363 1b8f 	bfi	fp, r3, #6, #10
   2cbe4:	4947      	ldr	r1, [pc, #284]	; (2cd04 <gps_thread+0x1b4>)
   2cbe6:	4658      	mov	r0, fp
   2cbe8:	f01a fe8c 	bl	47904 <log_string_sync>
			continue;
   2cbec:	e7c4      	b.n	2cb78 <gps_thread+0x28>
		switch (raw_gps_data.data_id) {
   2cbee:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
   2cbf2:	2c01      	cmp	r4, #1
   2cbf4:	d040      	beq.n	2cc78 <gps_thread+0x128>
   2cbf6:	2c02      	cmp	r4, #2
   2cbf8:	d1be      	bne.n	2cb78 <gps_thread+0x28>
			if (operation_blocked) {
   2cbfa:	2d00      	cmp	r5, #0
   2cbfc:	d1bc      	bne.n	2cb78 <gps_thread+0x28>
			memcpy(fresh_nmea.nmea.buf, raw_gps_data.nmea, len);
   2cbfe:	4c42      	ldr	r4, [pc, #264]	; (2cd08 <gps_thread+0x1b8>)
   2cc00:	23b8      	movs	r3, #184	; 0xb8
   2cc02:	a90e      	add	r1, sp, #56	; 0x38
   2cc04:	f104 0008 	add.w	r0, r4, #8
   2cc08:	f014 fa02 	bl	41010 <__memcpy_chk>
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2cc0c:	a80e      	add	r0, sp, #56	; 0x38
   2cc0e:	f014 fe09 	bl	41824 <strlen>
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   2cc12:	9b03      	ldr	r3, [sp, #12]
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2cc14:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   2cc18:	889c      	ldrh	r4, [r3, #4]
   2cc1a:	2c01      	cmp	r4, #1
   2cc1c:	d10d      	bne.n	2cc3a <gps_thread+0xea>
				LOG_DBG("NMEA data ready");
   2cc1e:	2304      	movs	r3, #4
   2cc20:	f363 0802 	bfi	r8, r3, #0, #3
   2cc24:	9b04      	ldr	r3, [sp, #16]
   2cc26:	f365 08c5 	bfi	r8, r5, #3, #3
   2cc2a:	f363 188f 	bfi	r8, r3, #6, #10
   2cc2e:	4a37      	ldr	r2, [pc, #220]	; (2cd0c <gps_thread+0x1bc>)
   2cc30:	4937      	ldr	r1, [pc, #220]	; (2cd10 <gps_thread+0x1c0>)
   2cc32:	4640      	mov	r0, r8
   2cc34:	f01a fe66 	bl	47904 <log_string_sync>
				trigger_send = true;
   2cc38:	4625      	mov	r5, r4
			if ((drv_data->trigger.type == GPS_TRIG_FIX)
   2cc3a:	9b03      	ldr	r3, [sp, #12]
   2cc3c:	791b      	ldrb	r3, [r3, #4]
   2cc3e:	2b02      	cmp	r3, #2
   2cc40:	f040 816d 	bne.w	2cf1e <gps_thread+0x3ce>
			    && is_fix(&fresh_pvt.pvt)) {
   2cc44:	4b33      	ldr	r3, [pc, #204]	; (2cd14 <gps_thread+0x1c4>)
   2cc46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2cc4a:	07db      	lsls	r3, r3, #31
   2cc4c:	f140 8167 	bpl.w	2cf1e <gps_thread+0x3ce>
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   2cc50:	9b03      	ldr	r3, [sp, #12]
				LOG_DBG("NMEA: Position fix");
   2cc52:	4a2e      	ldr	r2, [pc, #184]	; (2cd0c <gps_thread+0x1bc>)
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   2cc54:	795b      	ldrb	r3, [r3, #5]
				LOG_DBG("NMEA: Position fix");
   2cc56:	4930      	ldr	r1, [pc, #192]	; (2cd18 <gps_thread+0x1c8>)
					trigger_send = true;
   2cc58:	2b00      	cmp	r3, #0
				LOG_DBG("NMEA: Position fix");
   2cc5a:	f04f 0304 	mov.w	r3, #4
   2cc5e:	f363 0902 	bfi	r9, r3, #0, #3
   2cc62:	9b04      	ldr	r3, [sp, #16]
   2cc64:	f36f 09c5 	bfc	r9, #3, #3
   2cc68:	f363 198f 	bfi	r9, r3, #6, #10
   2cc6c:	4648      	mov	r0, r9
					trigger_send = true;
   2cc6e:	bf08      	it	eq
   2cc70:	2501      	moveq	r5, #1
				LOG_DBG("NMEA: Position fix");
   2cc72:	f01a fe47 	bl	47904 <log_string_sync>
   2cc76:	e152      	b.n	2cf1e <gps_thread+0x3ce>
			if (gps_is_blocked(&raw_gps_data.pvt)) {
   2cc78:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   2cc7c:	f013 0210 	ands.w	r2, r3, #16
   2cc80:	9209      	str	r2, [sp, #36]	; 0x24
   2cc82:	d017      	beq.n	2ccb4 <gps_thread+0x164>
				if (operation_blocked) {
   2cc84:	2d00      	cmp	r5, #0
   2cc86:	f47f af77 	bne.w	2cb78 <gps_thread+0x28>
				LOG_DBG("Waiting for time window to operate");
   2cc8a:	2304      	movs	r3, #4
   2cc8c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2cc90:	4922      	ldr	r1, [pc, #136]	; (2cd1c <gps_thread+0x1cc>)
   2cc92:	f363 0202 	bfi	r2, r3, #0, #3
   2cc96:	b293      	uxth	r3, r2
   2cc98:	f365 03c5 	bfi	r3, r5, #3, #3
   2cc9c:	9a04      	ldr	r2, [sp, #16]
   2cc9e:	b29b      	uxth	r3, r3
   2cca0:	f362 138f 	bfi	r3, r2, #6, #10
   2cca4:	b298      	uxth	r0, r3
   2cca6:	4a19      	ldr	r2, [pc, #100]	; (2cd0c <gps_thread+0x1bc>)
   2cca8:	f8ad 3014 	strh.w	r3, [sp, #20]
				operation_blocked = true;
   2ccac:	4625      	mov	r5, r4
				LOG_DBG("Waiting for time window to operate");
   2ccae:	f01a fe29 	bl	47904 <log_string_sync>
				continue;
   2ccb2:	e761      	b.n	2cb78 <gps_thread+0x28>
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   2ccb4:	f013 0408 	ands.w	r4, r3, #8
   2ccb8:	d034      	beq.n	2cd24 <gps_thread+0x1d4>
				LOG_DBG("Invalid PVT frame, discarding");
   2ccba:	2304      	movs	r3, #4
   2ccbc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2ccc0:	4917      	ldr	r1, [pc, #92]	; (2cd20 <gps_thread+0x1d0>)
   2ccc2:	f363 0202 	bfi	r2, r3, #0, #3
   2ccc6:	b293      	uxth	r3, r2
   2ccc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ccca:	f362 03c5 	bfi	r3, r2, #3, #3
   2ccce:	9a04      	ldr	r2, [sp, #16]
   2ccd0:	b29b      	uxth	r3, r3
   2ccd2:	f362 138f 	bfi	r3, r2, #6, #10
   2ccd6:	b298      	uxth	r0, r3
   2ccd8:	4a0c      	ldr	r2, [pc, #48]	; (2cd0c <gps_thread+0x1bc>)
   2ccda:	f8ad 3018 	strh.w	r3, [sp, #24]
   2ccde:	f01a fe11 	bl	47904 <log_string_sync>
	z_impl_k_mutex_unlock(mutex);
   2cce2:	2500      	movs	r5, #0
   2cce4:	e748      	b.n	2cb78 <gps_thread+0x28>
   2cce6:	bf00      	nop
   2cce8:	0004a688 	.word	0x0004a688
   2ccec:	0004a768 	.word	0x0004a768
   2ccf0:	20023bf8 	.word	0x20023bf8
   2ccf4:	0004ce24 	.word	0x0004ce24
   2ccf8:	0004ccf0 	.word	0x0004ccf0
   2ccfc:	0004cdf3 	.word	0x0004cdf3
   2cd00:	0004e9b0 	.word	0x0004e9b0
   2cd04:	00051a4b 	.word	0x00051a4b
   2cd08:	20022f98 	.word	0x20022f98
   2cd0c:	00051a00 	.word	0x00051a00
   2cd10:	00051b3c 	.word	0x00051b3c
   2cd14:	20023058 	.word	0x20023058
   2cd18:	00051b50 	.word	0x00051b50
   2cd1c:	00051a65 	.word	0x00051a65
   2cd20:	00051a8c 	.word	0x00051a8c
	u8_t  n_tracked = 0;
   2cd24:	4625      	mov	r5, r4
	u8_t  n_used = 0;
   2cd26:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   2cd2a:	ab0c      	add	r3, sp, #48	; 0x30
   2cd2c:	191a      	adds	r2, r3, r4
		u8_t sv = pvt_data->pvt.sv[i].sv;
   2cd2e:	f892 c046 	ldrb.w	ip, [r2, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   2cd32:	f1bc 0f00 	cmp.w	ip, #0
   2cd36:	d02c      	beq.n	2cd92 <gps_thread+0x242>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2cd38:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
			n_tracked++;
   2cd3c:	3501      	adds	r5, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2cd3e:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   2cd42:	b2ed      	uxtb	r5, r5
			if (used) {
   2cd44:	b119      	cbz	r1, 2cd4e <gps_thread+0x1fe>
				n_used++;
   2cd46:	9809      	ldr	r0, [sp, #36]	; 0x24
   2cd48:	3001      	adds	r0, #1
   2cd4a:	b2c3      	uxtb	r3, r0
   2cd4c:	9309      	str	r3, [sp, #36]	; 0x24
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   2cd4e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   2cd52:	b11a      	cbz	r2, 2cd5c <gps_thread+0x20c>
				n_unhealthy++;
   2cd54:	980a      	ldr	r0, [sp, #40]	; 0x28
   2cd56:	3001      	adds	r0, #1
   2cd58:	b2c3      	uxtb	r3, r0
   2cd5a:	930a      	str	r3, [sp, #40]	; 0x28
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   2cd5c:	2004      	movs	r0, #4
   2cd5e:	9b04      	ldr	r3, [sp, #16]
   2cd60:	f360 0702 	bfi	r7, r0, #0, #3
   2cd64:	f36f 07c5 	bfc	r7, #3, #3
   2cd68:	f363 178f 	bfi	r7, r3, #6, #10
   2cd6c:	4878      	ldr	r0, [pc, #480]	; (2cf50 <gps_thread+0x400>)
   2cd6e:	4b79      	ldr	r3, [pc, #484]	; (2cf54 <gps_thread+0x404>)
   2cd70:	2900      	cmp	r1, #0
   2cd72:	bf18      	it	ne
   2cd74:	4618      	movne	r0, r3
   2cd76:	4b78      	ldr	r3, [pc, #480]	; (2cf58 <gps_thread+0x408>)
   2cd78:	4601      	mov	r1, r0
   2cd7a:	4878      	ldr	r0, [pc, #480]	; (2cf5c <gps_thread+0x40c>)
   2cd7c:	2a00      	cmp	r2, #0
   2cd7e:	bf18      	it	ne
   2cd80:	4603      	movne	r3, r0
   2cd82:	4a77      	ldr	r2, [pc, #476]	; (2cf60 <gps_thread+0x410>)
   2cd84:	e9cd 1300 	strd	r1, r3, [sp]
   2cd88:	4638      	mov	r0, r7
   2cd8a:	4663      	mov	r3, ip
   2cd8c:	4975      	ldr	r1, [pc, #468]	; (2cf64 <gps_thread+0x414>)
   2cd8e:	f01a fdb9 	bl	47904 <log_string_sync>
   2cd92:	340c      	adds	r4, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2cd94:	2c90      	cmp	r4, #144	; 0x90
   2cd96:	d1c8      	bne.n	2cd2a <gps_thread+0x1da>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   2cd98:	2404      	movs	r4, #4
   2cd9a:	9b04      	ldr	r3, [sp, #16]
   2cd9c:	f364 0a02 	bfi	sl, r4, #0, #3
   2cda0:	f36f 0ac5 	bfc	sl, #3, #3
   2cda4:	f363 1a8f 	bfi	sl, r3, #6, #10
   2cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cdaa:	4a6d      	ldr	r2, [pc, #436]	; (2cf60 <gps_thread+0x410>)
   2cdac:	9301      	str	r3, [sp, #4]
   2cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cdb0:	496d      	ldr	r1, [pc, #436]	; (2cf68 <gps_thread+0x418>)
   2cdb2:	9300      	str	r3, [sp, #0]
   2cdb4:	4650      	mov	r0, sl
   2cdb6:	462b      	mov	r3, r5
   2cdb8:	f01a fda4 	bl	47904 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   2cdbc:	f364 0602 	bfi	r6, r4, #0, #3
   2cdc0:	9b04      	ldr	r3, [sp, #16]
   2cdc2:	f36f 06c5 	bfc	r6, #3, #3
   2cdc6:	f363 168f 	bfi	r6, r3, #6, #10
	return z_impl_k_uptime_get();
   2cdca:	f01d fa1d 	bl	4a208 <z_impl_k_uptime_get>
   2cdce:	4b67      	ldr	r3, [pc, #412]	; (2cf6c <gps_thread+0x41c>)
   2cdd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2cdd4:	e9d3 4500 	ldrd	r4, r5, [r3]
   2cdd8:	1b00      	subs	r0, r0, r4
   2cdda:	f04f 0300 	mov.w	r3, #0
   2cdde:	eb61 0105 	sbc.w	r1, r1, r5
   2cde2:	f7eb ffeb 	bl	18dbc <__aeabi_uldivmod>
   2cde6:	4a5e      	ldr	r2, [pc, #376]	; (2cf60 <gps_thread+0x410>)
   2cde8:	e9cd 0100 	strd	r0, r1, [sp]
   2cdec:	4960      	ldr	r1, [pc, #384]	; (2cf70 <gps_thread+0x420>)
   2cdee:	4630      	mov	r0, r6
   2cdf0:	f01a fd88 	bl	47904 <log_string_sync>
	dest->latitude = src->latitude;
   2cdf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2cdf8:	4b5e      	ldr	r3, [pc, #376]	; (2cf74 <gps_thread+0x424>)
	dest->altitude = src->altitude;
   2cdfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
	dest->latitude = src->latitude;
   2cdfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
	dest->longitude = src->longitude;
   2ce00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
	dest->altitude = src->altitude;
   2ce04:	619a      	str	r2, [r3, #24]
	dest->accuracy = src->accuracy;
   2ce06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	dest->longitude = src->longitude;
   2ce08:	e9c3 0104 	strd	r0, r1, [r3, #16]
	dest->accuracy = src->accuracy;
   2ce0c:	61da      	str	r2, [r3, #28]
	dest->speed = src->speed;
   2ce0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ce10:	f103 0178 	add.w	r1, r3, #120	; 0x78
   2ce14:	621a      	str	r2, [r3, #32]
	dest->heading = src->heading;
   2ce16:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2ce18:	625a      	str	r2, [r3, #36]	; 0x24
	dest->flags = src->flags;
   2ce1a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   2ce1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dest->datetime.year = src->datetime.year;
   2ce22:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   2ce26:	875a      	strh	r2, [r3, #58]	; 0x3a
	dest->datetime.month = src->datetime.month;
   2ce28:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   2ce2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	dest->datetime.day = src->datetime.day;
   2ce30:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   2ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	dest->datetime.hour = src->datetime.hour;
   2ce38:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   2ce3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dest->datetime.minute = src->datetime.minute;
   2ce40:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2ce44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	dest->datetime.seconds = src->datetime.seconds;
   2ce48:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
   2ce4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dest->datetime.ms = src->datetime.ms;
   2ce50:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   2ce54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dest->pdop = src->pdop;
   2ce58:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2ce5a:	629a      	str	r2, [r3, #40]	; 0x28
	dest->hdop = src->hdop;
   2ce5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2ce5e:	62da      	str	r2, [r3, #44]	; 0x2c
	dest->vdop = src->vdop;
   2ce60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2ce62:	631a      	str	r2, [r3, #48]	; 0x30
	dest->tdop = src->tdop;
   2ce64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2ce66:	635a      	str	r2, [r3, #52]	; 0x34
   2ce68:	aa0c      	add	r2, sp, #48	; 0x30
		dest->sv[i].sv = src->sv[i].sv;
   2ce6a:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
   2ce6e:	330a      	adds	r3, #10
   2ce70:	8758      	strh	r0, [r3, #58]	; 0x3a
		dest->sv[i].cn0 = src->sv[i].cn0;
   2ce72:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
   2ce76:	320c      	adds	r2, #12
   2ce78:	8798      	strh	r0, [r3, #60]	; 0x3c
		dest->sv[i].elevation = src->sv[i].elevation;
   2ce7a:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   2ce7e:	87d8      	strh	r0, [r3, #62]	; 0x3e
		dest->sv[i].azimuth = src->sv[i].azimuth;
   2ce80:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
   2ce84:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].flags = src->sv[i].flags;
   2ce88:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   2ce8c:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   2ce90:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   2ce94:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	for (size_t i = 0;
   2ce98:	428b      	cmp	r3, r1
   2ce9a:	d1e6      	bne.n	2ce6a <gps_thread+0x31a>
			if ((drv_data->trigger.chan == GPS_CHAN_PVT)
   2ce9c:	9b03      	ldr	r3, [sp, #12]
   2ce9e:	889a      	ldrh	r2, [r3, #4]
   2cea0:	f240 1301 	movw	r3, #257	; 0x101
   2cea4:	429a      	cmp	r2, r3
   2cea6:	d150      	bne.n	2cf4a <gps_thread+0x3fa>
				LOG_DBG("PVT data ready");
   2cea8:	2304      	movs	r3, #4
   2ceaa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2ceae:	4932      	ldr	r1, [pc, #200]	; (2cf78 <gps_thread+0x428>)
   2ceb0:	f363 0202 	bfi	r2, r3, #0, #3
   2ceb4:	b293      	uxth	r3, r2
   2ceb6:	f36f 03c5 	bfc	r3, #3, #3
   2ceba:	9a04      	ldr	r2, [sp, #16]
   2cebc:	b29b      	uxth	r3, r3
   2cebe:	f362 138f 	bfi	r3, r2, #6, #10
   2cec2:	b298      	uxth	r0, r3
   2cec4:	4a2d      	ldr	r2, [pc, #180]	; (2cf7c <gps_thread+0x42c>)
   2cec6:	f8ad 301c 	strh.w	r3, [sp, #28]
				trigger_send = true;
   2ceca:	2501      	movs	r5, #1
				LOG_DBG("PVT data ready");
   2cecc:	f01a fd1a 	bl	47904 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2ced0:	9b03      	ldr	r3, [sp, #12]
   2ced2:	791b      	ldrb	r3, [r3, #4]
   2ced4:	2b02      	cmp	r3, #2
   2ced6:	d122      	bne.n	2cf1e <gps_thread+0x3ce>
			    is_fix(&fresh_pvt.pvt)) {
   2ced8:	4b26      	ldr	r3, [pc, #152]	; (2cf74 <gps_thread+0x424>)
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2ceda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2cede:	07da      	lsls	r2, r3, #31
   2cee0:	d51d      	bpl.n	2cf1e <gps_thread+0x3ce>
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   2cee2:	9b03      	ldr	r3, [sp, #12]
				LOG_DBG("PVT: Position fix");
   2cee4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   2cee8:	795b      	ldrb	r3, [r3, #5]
				LOG_DBG("PVT: Position fix");
   2ceea:	4925      	ldr	r1, [pc, #148]	; (2cf80 <gps_thread+0x430>)
					trigger_send = true;
   2ceec:	2b01      	cmp	r3, #1
				LOG_DBG("PVT: Position fix");
   2ceee:	f04f 0304 	mov.w	r3, #4
   2cef2:	f363 0202 	bfi	r2, r3, #0, #3
   2cef6:	b293      	uxth	r3, r2
   2cef8:	f36f 03c5 	bfc	r3, #3, #3
   2cefc:	9a04      	ldr	r2, [sp, #16]
   2cefe:	b29b      	uxth	r3, r3
   2cf00:	f362 138f 	bfi	r3, r2, #6, #10
   2cf04:	b298      	uxth	r0, r3
   2cf06:	4a1d      	ldr	r2, [pc, #116]	; (2cf7c <gps_thread+0x42c>)
					trigger_send = true;
   2cf08:	bf08      	it	eq
   2cf0a:	2501      	moveq	r5, #1
				LOG_DBG("PVT: Position fix");
   2cf0c:	f8ad 3020 	strh.w	r3, [sp, #32]
   2cf10:	f01a fcf8 	bl	47904 <log_string_sync>
   2cf14:	f01d f978 	bl	4a208 <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   2cf18:	4b14      	ldr	r3, [pc, #80]	; (2cf6c <gps_thread+0x41c>)
   2cf1a:	e9c3 0100 	strd	r0, r1, [r3]
		if (!trigger_send) {
   2cf1e:	2d00      	cmp	r5, #0
   2cf20:	f43f ae2a 	beq.w	2cb78 <gps_thread+0x28>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2cf24:	9b03      	ldr	r3, [sp, #12]
   2cf26:	f103 0408 	add.w	r4, r3, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2cf2a:	f04f 31ff 	mov.w	r1, #4294967295
   2cf2e:	4620      	mov	r0, r4
   2cf30:	f010 fbe2 	bl	3d6f8 <z_impl_k_mutex_lock>
		if (drv_data->trigger_handler != NULL) {
   2cf34:	9b03      	ldr	r3, [sp, #12]
   2cf36:	681b      	ldr	r3, [r3, #0]
   2cf38:	b11b      	cbz	r3, 2cf42 <gps_thread+0x3f2>
			drv_data->trigger_handler(dev, &drv_data->trigger);
   2cf3a:	9a03      	ldr	r2, [sp, #12]
   2cf3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2cf3e:	1d11      	adds	r1, r2, #4
   2cf40:	4798      	blx	r3
	z_impl_k_mutex_unlock(mutex);
   2cf42:	4620      	mov	r0, r4
   2cf44:	f010 fcb2 	bl	3d8ac <z_impl_k_mutex_unlock>
   2cf48:	e6cb      	b.n	2cce2 <gps_thread+0x192>
   2cf4a:	2500      	movs	r5, #0
   2cf4c:	e7c0      	b.n	2ced0 <gps_thread+0x380>
   2cf4e:	bf00      	nop
   2cf50:	00051a2a 	.word	0x00051a2a
   2cf54:	00051a21 	.word	0x00051a21
   2cf58:	00051a3f 	.word	0x00051a3f
   2cf5c:	00051a33 	.word	0x00051a33
   2cf60:	000519ea 	.word	0x000519ea
   2cf64:	00051aae 	.word	0x00051aae
   2cf68:	00051aca 	.word	0x00051aca
   2cf6c:	20022f90 	.word	0x20022f90
   2cf70:	00051af3 	.word	0x00051af3
   2cf74:	20023058 	.word	0x20023058
   2cf78:	00051b13 	.word	0x00051b13
   2cf7c:	00051a00 	.word	0x00051a00
   2cf80:	00051b26 	.word	0x00051b26

0002cf84 <init>:
	drv_data->socket = -1;
   2cf84:	f04f 33ff 	mov.w	r3, #4294967295
{
   2cf88:	b570      	push	{r4, r5, r6, lr}
   2cf8a:	4606      	mov	r6, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cf8c:	2400      	movs	r4, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2cf8e:	6885      	ldr	r5, [r0, #8]
{
   2cf90:	b086      	sub	sp, #24
	drv_data->socket = -1;
   2cf92:	622b      	str	r3, [r5, #32]
   2cf94:	f105 031c 	add.w	r3, r5, #28
   2cf98:	e8d3 2fef 	ldaex	r2, [r3]
   2cf9c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2cfa0:	2900      	cmp	r1, #0
   2cfa2:	d1f9      	bne.n	2cf98 <init+0x14>
	z_impl_k_sem_init(sem, initial_count, limit);
   2cfa4:	2201      	movs	r2, #1
   2cfa6:	4621      	mov	r1, r4
   2cfa8:	f605 00d8 	addw	r0, r5, #2264	; 0x8d8
   2cfac:	f011 ff16 	bl	3eddc <z_impl_k_sem_init>
	z_impl_k_mutex_init(mutex);
   2cfb0:	f105 0008 	add.w	r0, r5, #8
   2cfb4:	f01d f82f 	bl	4a016 <z_impl_k_mutex_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   2cfb8:	68b0      	ldr	r0, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2cfba:	230a      	movs	r3, #10
   2cfbc:	f100 0128 	add.w	r1, r0, #40	; 0x28
   2cfc0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2cfc4:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2cfc8:	e9cd 6400 	strd	r6, r4, [sp]
   2cfcc:	4b04      	ldr	r3, [pc, #16]	; (2cfe0 <init+0x5c>)
   2cfce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2cfd2:	f600 0028 	addw	r0, r0, #2088	; 0x828
   2cfd6:	f012 f8c5 	bl	3f164 <z_impl_k_thread_create>
}
   2cfda:	4620      	mov	r0, r4
   2cfdc:	b006      	add	sp, #24
   2cfde:	bd70      	pop	{r4, r5, r6, pc}
   2cfe0:	0002cb51 	.word	0x0002cb51

0002cfe4 <stop>:
{
   2cfe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("Stopping GPS");
   2cfe6:	2304      	movs	r3, #4
	struct gps_drv_data *drv_data = dev->driver_data;
   2cfe8:	6886      	ldr	r6, [r0, #8]
	LOG_DBG("Stopping GPS");
   2cfea:	f04f 0000 	mov.w	r0, #0
   2cfee:	2500      	movs	r5, #0
   2cff0:	f363 0002 	bfi	r0, r3, #0, #3
   2cff4:	4c16      	ldr	r4, [pc, #88]	; (2d050 <stop+0x6c>)
   2cff6:	4b17      	ldr	r3, [pc, #92]	; (2d054 <stop+0x70>)
   2cff8:	f36f 00c5 	bfc	r0, #3, #3
   2cffc:	1ae4      	subs	r4, r4, r3
   2cffe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d002:	f364 108f 	bfi	r0, r4, #6, #10
   2d006:	4a14      	ldr	r2, [pc, #80]	; (2d058 <stop+0x74>)
   2d008:	4914      	ldr	r1, [pc, #80]	; (2d05c <stop+0x78>)
   2d00a:	f01a fc7b 	bl	47904 <log_string_sync>
   2d00e:	f106 031c 	add.w	r3, r6, #28
   2d012:	e8d3 2fef 	ldaex	r2, [r3]
   2d016:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2d01a:	2900      	cmp	r1, #0
   2d01c:	d1f9      	bne.n	2d012 <stop+0x2e>
	retval = nrf_setsockopt(drv_data->socket,
   2d01e:	9500      	str	r5, [sp, #0]
   2d020:	462b      	mov	r3, r5
   2d022:	2208      	movs	r2, #8
   2d024:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d028:	6a30      	ldr	r0, [r6, #32]
   2d02a:	f001 fb4f 	bl	2e6cc <nrf_setsockopt>
	if (retval != 0) {
   2d02e:	b168      	cbz	r0, 2d04c <stop+0x68>
		LOG_ERR("Failed to stop GPS");
   2d030:	2301      	movs	r3, #1
   2d032:	f04f 0000 	mov.w	r0, #0
   2d036:	f363 0002 	bfi	r0, r3, #0, #3
   2d03a:	f365 00c5 	bfi	r0, r5, #3, #3
   2d03e:	f364 108f 	bfi	r0, r4, #6, #10
   2d042:	4907      	ldr	r1, [pc, #28]	; (2d060 <stop+0x7c>)
   2d044:	f01a fc5e 	bl	47904 <log_string_sync>
		return -EIO;
   2d048:	f06f 0004 	mvn.w	r0, #4
}
   2d04c:	b002      	add	sp, #8
   2d04e:	bd70      	pop	{r4, r5, r6, pc}
   2d050:	0004a768 	.word	0x0004a768
   2d054:	0004a688 	.word	0x0004a688
   2d058:	00051a1c 	.word	0x00051a1c
   2d05c:	00051ea0 	.word	0x00051ea0
   2d060:	00051eb1 	.word	0x00051eb1

0002d064 <ip_client_event_handler>:
   2d064:	1b08f850 	.word	0x1b08f850
   2d068:	f0060c09 	.word	0xf0060c09
   2d06c:	bf00bc4d 	.word	0xbf00bc4d

0002d070 <rpc_ip_client_init>:
   2d070:	f00b4801 	.word	0xf00b4801
   2d074:	bf00bc01 	.word	0xbf00bc01
   2d078:	0004b36c 	.word	0x0004b36c

0002d07c <rpc_ip_client_request_alloc>:
   2d07c:	b5102300 	.word	0xb5102300
   2d080:	9301b082 	.word	0x9301b082
   2d084:	4604b158 	.word	0x4604b158
   2d088:	2004aa01 	.word	0x2004aa01
   2d08c:	fe2cf00b 	.word	0xfe2cf00b
   2d090:	9b01b918 	.word	0x9b01b918
   2d094:	3308b10b 	.word	0x3308b10b
   2d098:	b0026023 	.word	0xb0026023
   2d09c:	2007bd10 	.word	0x2007bd10
   2d0a0:	bd10b002 	.word	0xbd10b002

0002d0a4 <rpc_ip_client_request_send>:
   2d0a4:	4370f401 	.word	0x4370f401
   2d0a8:	4fe0f5b3 	.word	0x4fe0f5b3
   2d0ac:	b160d10b 	.word	0xb160d10b
   2d0b0:	f8304603 	.word	0xf8304603
   2d0b4:	20042c08 	.word	0x20042c08
   2d0b8:	4101ea42 	.word	0x4101ea42
   2d0bc:	1d08f843 	.word	0x1d08f843
   2d0c0:	f00b4619 	.word	0xf00b4619
   2d0c4:	200fbdf9 	.word	0x200fbdf9
   2d0c8:	20074770 	.word	0x20074770
   2d0cc:	bf004770 	.word	0xbf004770

0002d0d0 <rpc_ip_client_message_free>:
   2d0d0:	f1a0b120 	.word	0xf1a0b120
   2d0d4:	20040108 	.word	0x20040108
   2d0d8:	be38f00b 	.word	0xbe38f00b
   2d0dc:	47702007 	.word	0x47702007

0002d0e0 <rpc_ip_client_data_free>:
   2d0e0:	4601b118 	.word	0x4601b118
   2d0e4:	f00b2004 	.word	0xf00b2004
   2d0e8:	2007bf43 	.word	0x2007bf43
   2d0ec:	bf004770 	.word	0xbf004770

0002d0f0 <symbol_0001c77>:
   2d0f0:	4603b430 	.word	0x4603b430
   2d0f4:	f5b26800 	.word	0xf5b26800
   2d0f8:	eba03f80 	.word	0xeba03f80
   2d0fc:	d2140101 	.word	0xd2140101
   2d100:	dd512902 	.word	0xdd512902
   2d104:	60191e41 	.word	0x60191e41
   2d108:	2c01f800 	.word	0x2c01f800
   2d10c:	24826819 	.word	0x24826819
   2d110:	60181e48 	.word	0x60181e48
   2d114:	0a122003 	.word	0x0a122003
   2d118:	2c01f801 	.word	0x2c01f801
   2d11c:	1e51681a 	.word	0x1e51681a
   2d120:	f8026019 	.word	0xf8026019
   2d124:	bc304c01 	.word	0xbc304c01
   2d128:	f1b24770 	.word	0xf1b24770
   2d12c:	d21a7f80 	.word	0xd21a7f80
   2d130:	dd392903 	.word	0xdd392903
   2d134:	1e412483 	.word	0x1e412483
   2d138:	f8006019 	.word	0xf8006019
   2d13c:	68192c01 	.word	0x68192c01
   2d140:	1e4d0a10 	.word	0x1e4d0a10
   2d144:	f801601d 	.word	0xf801601d
   2d148:	68190c01 	.word	0x68190c01
   2d14c:	1e480c12 	.word	0x1e480c12
   2d150:	f8016018 	.word	0xf8016018
   2d154:	681a2c01 	.word	0x681a2c01
   2d158:	1e512004 	.word	0x1e512004
   2d15c:	f8026019 	.word	0xf8026019
   2d160:	bc304c01 	.word	0xbc304c01
   2d164:	29044770 	.word	0x29044770
   2d168:	2484dd1e 	.word	0x2484dd1e
   2d16c:	60191e41 	.word	0x60191e41
   2d170:	2c01f800 	.word	0x2c01f800
   2d174:	0a106819 	.word	0x0a106819
   2d178:	601d1e4d 	.word	0x601d1e4d
   2d17c:	0c01f801 	.word	0x0c01f801
   2d180:	0c106819 	.word	0x0c106819
   2d184:	601d1e4d 	.word	0x601d1e4d
   2d188:	0c01f801 	.word	0x0c01f801
   2d18c:	0e126819 	.word	0x0e126819
   2d190:	60181e48 	.word	0x60181e48
   2d194:	2c01f801 	.word	0x2c01f801
   2d198:	2005681a 	.word	0x2005681a
   2d19c:	60191e51 	.word	0x60191e51
   2d1a0:	4c01f802 	.word	0x4c01f802
   2d1a4:	4770bc30 	.word	0x4770bc30
   2d1a8:	006bf06f 	.word	0x006bf06f
   2d1ac:	bf00e7bb 	.word	0xbf00e7bb

0002d1b0 <symbol_000646e>:
   2d1b0:	6804b430 	.word	0x6804b430
   2d1b4:	46032a7f 	.word	0x46032a7f
   2d1b8:	0101eba4 	.word	0x0101eba4
   2d1bc:	2900d808 	.word	0x2900d808
   2d1c0:	1e61dd6c 	.word	0x1e61dd6c
   2d1c4:	20016001 	.word	0x20016001
   2d1c8:	2c01f804 	.word	0x2c01f804
   2d1cc:	4770bc30 	.word	0x4770bc30
   2d1d0:	d80e2aff 	.word	0xd80e2aff
   2d1d4:	dd612901 	.word	0xdd612901
   2d1d8:	1e602181 	.word	0x1e602181
   2d1dc:	f8046018 	.word	0xf8046018
   2d1e0:	681a2c01 	.word	0x681a2c01
   2d1e4:	1e542002 	.word	0x1e542002
   2d1e8:	f802601c 	.word	0xf802601c
   2d1ec:	bc301c01 	.word	0xbc301c01
   2d1f0:	f5b24770 	.word	0xf5b24770
   2d1f4:	d31c3f80 	.word	0xd31c3f80
   2d1f8:	7f80f1b2 	.word	0x7f80f1b2
   2d1fc:	2903d22e 	.word	0x2903d22e
   2d200:	2583dd4c 	.word	0x2583dd4c
   2d204:	60011e61 	.word	0x60011e61
   2d208:	2c01f804 	.word	0x2c01f804
   2d20c:	0a106801 	.word	0x0a106801
   2d210:	601c1e4c 	.word	0x601c1e4c
   2d214:	0c01f801 	.word	0x0c01f801
   2d218:	0c126819 	.word	0x0c126819
   2d21c:	60181e48 	.word	0x60181e48
   2d220:	2c01f801 	.word	0x2c01f801
   2d224:	2004681a 	.word	0x2004681a
   2d228:	60191e51 	.word	0x60191e51
   2d22c:	5c01f802 	.word	0x5c01f802
   2d230:	2902e7cc 	.word	0x2902e7cc
   2d234:	2582dd32 	.word	0x2582dd32
   2d238:	60011e61 	.word	0x60011e61
   2d23c:	2c01f804 	.word	0x2c01f804
   2d240:	0a126801 	.word	0x0a126801
   2d244:	60181e48 	.word	0x60181e48
   2d248:	2c01f801 	.word	0x2c01f801
   2d24c:	2003681a 	.word	0x2003681a
   2d250:	60191e51 	.word	0x60191e51
   2d254:	5c01f802 	.word	0x5c01f802
   2d258:	4770bc30 	.word	0x4770bc30
   2d25c:	dd1d2904 	.word	0xdd1d2904
   2d260:	1e612584 	.word	0x1e612584
   2d264:	f8046001 	.word	0xf8046001
   2d268:	68012c01 	.word	0x68012c01
   2d26c:	1e4c0a10 	.word	0x1e4c0a10
   2d270:	f801601c 	.word	0xf801601c
   2d274:	68190c01 	.word	0x68190c01
   2d278:	1e4c0c10 	.word	0x1e4c0c10
   2d27c:	f801601c 	.word	0xf801601c
   2d280:	68190c01 	.word	0x68190c01
   2d284:	1e480e12 	.word	0x1e480e12
   2d288:	f8016018 	.word	0xf8016018
   2d28c:	681a2c01 	.word	0x681a2c01
   2d290:	1e512005 	.word	0x1e512005
   2d294:	f8026019 	.word	0xf8026019
   2d298:	e7975c01 	.word	0xe7975c01
   2d29c:	006bf06f 	.word	0x006bf06f
   2d2a0:	bf00e794 	.word	0xbf00e794

0002d2a4 <symbol_00036c0>:
   2d2a4:	1a596803 	.word	0x1a596803
   2d2a8:	dd052900 	.word	0xdd052900
   2d2ac:	60011e59 	.word	0x60011e59
   2d2b0:	f8032001 	.word	0xf8032001
   2d2b4:	47702c01 	.word	0x47702c01
   2d2b8:	006bf06f 	.word	0x006bf06f
   2d2bc:	bf004770 	.word	0xbf004770

0002d2c0 <symbol_0008475>:
   2d2c0:	6805b5f8 	.word	0x6805b5f8
   2d2c4:	d83f42a9 	.word	0xd83f42a9
   2d2c8:	1a69460f 	.word	0x1a69460f
   2d2cc:	d83b428b 	.word	0xd83b428b
   2d2d0:	461c4606 	.word	0x461c4606
   2d2d4:	46111ae8 	.word	0x46111ae8
   2d2d8:	461a6030 	.word	0x461a6030
   2d2dc:	fde8f7ec 	.word	0xfde8f7ec
   2d2e0:	46202c00 	.word	0x46202c00
   2d2e4:	2c7fdb15 	.word	0x2c7fdb15
   2d2e8:	6833d814 	.word	0x6833d814
   2d2ec:	2a001bda 	.word	0x2a001bda
   2d2f0:	2001dd2a 	.word	0x2001dd2a
   2d2f4:	60321e5a 	.word	0x60321e5a
   2d2f8:	4c01f803 	.word	0x4c01f803
   2d2fc:	34016833 	.word	0x34016833
   2d300:	2f001bdf 	.word	0x2f001bdf
   2d304:	2206dd20 	.word	0x2206dd20
   2d308:	60311e59 	.word	0x60311e59
   2d30c:	f8034420 	.word	0xf8034420
   2d310:	bdf82c01 	.word	0xbdf82c01
   2d314:	d80f2cff 	.word	0xd80f2cff
   2d318:	1bda6833 	.word	0x1bda6833
   2d31c:	dd132a01 	.word	0xdd132a01
   2d320:	1e592281 	.word	0x1e592281
   2d324:	f8036031 	.word	0xf8036031
   2d328:	68334c01 	.word	0x68334c01
   2d32c:	1e592002 	.word	0x1e592002
   2d330:	f8036031 	.word	0xf8036031
   2d334:	e7e12c01 	.word	0xe7e12c01
   2d338:	46394622 	.word	0x46394622
   2d33c:	f7ff4630 	.word	0xf7ff4630
   2d340:	2800fed7 	.word	0x2800fed7
   2d344:	bdf8dada 	.word	0xbdf8dada
   2d348:	006bf06f 	.word	0x006bf06f
   2d34c:	bf00bdf8 	.word	0xbf00bdf8

0002d350 <symbol_0002662>:
   2d350:	41f0e92d 	.word	0x41f0e92d
   2d354:	8018f8dd 	.word	0x8018f8dd
   2d358:	f1b86805 	.word	0xf1b86805
   2d35c:	d1130f00 	.word	0xd1130f00
   2d360:	2c001a6c 	.word	0x2c001a6c
   2d364:	8087f340 	.word	0x8087f340
   2d368:	60041e6c 	.word	0x60041e6c
   2d36c:	8c01f805 	.word	0x8c01f805
   2d370:	1a656804 	.word	0x1a656804
   2d374:	dd7e2d00 	.word	0xdd7e2d00
   2d378:	f04f2505 	.word	0xf04f2505
   2d37c:	1e660802 	.word	0x1e660802
   2d380:	f8046006 	.word	0xf8046006
   2d384:	68055c01 	.word	0x68055c01
   2d388:	d87442a9 	.word	0xd87442a9
   2d38c:	42a31a6c 	.word	0x42a31a6c
   2d390:	4606d871 	.word	0x4606d871
   2d394:	1ae8461c 	.word	0x1ae8461c
   2d398:	6030460f 	.word	0x6030460f
   2d39c:	461a4611 	.word	0x461a4611
   2d3a0:	fd86f7ec 	.word	0xfd86f7ec
   2d3a4:	46202c00 	.word	0x46202c00
   2d3a8:	2c7fdb2f 	.word	0x2c7fdb2f
   2d3ac:	6833d841 	.word	0x6833d841
   2d3b0:	2a001bda 	.word	0x2a001bda
   2d3b4:	2001dd5f 	.word	0x2001dd5f
   2d3b8:	60321e5a 	.word	0x60321e5a
   2d3bc:	4c01f803 	.word	0x4c01f803
   2d3c0:	34016833 	.word	0x34016833
   2d3c4:	2a001bda 	.word	0x2a001bda
   2d3c8:	2206dd55 	.word	0x2206dd55
   2d3cc:	1e594404 	.word	0x1e594404
   2d3d0:	60312c00 	.word	0x60312c00
   2d3d4:	f8034620 	.word	0xf8034620
   2d3d8:	db162c01 	.word	0xdb162c01
   2d3dc:	2c7f4444 	.word	0x2c7f4444
   2d3e0:	6833d815 	.word	0x6833d815
   2d3e4:	2a001bda 	.word	0x2a001bda
   2d3e8:	2001dd45 	.word	0x2001dd45
   2d3ec:	60321e5a 	.word	0x60321e5a
   2d3f0:	4c01f803 	.word	0x4c01f803
   2d3f4:	34016833 	.word	0x34016833
   2d3f8:	2f001bdf 	.word	0x2f001bdf
   2d3fc:	2230dd3b 	.word	0x2230dd3b
   2d400:	60311e59 	.word	0x60311e59
   2d404:	f8034420 	.word	0xf8034420
   2d408:	e8bd2c01 	.word	0xe8bd2c01
   2d40c:	2cff81f0 	.word	0x2cff81f0
   2d410:	6833d821 	.word	0x6833d821
   2d414:	2a011bda 	.word	0x2a011bda
   2d418:	2281dd2d 	.word	0x2281dd2d
   2d41c:	60311e59 	.word	0x60311e59
   2d420:	4c01f803 	.word	0x4c01f803
   2d424:	20026833 	.word	0x20026833
   2d428:	60311e59 	.word	0x60311e59
   2d42c:	2c01f803 	.word	0x2c01f803
   2d430:	2cffe7e0 	.word	0x2cffe7e0
   2d434:	6833d817 	.word	0x6833d817
   2d438:	2a011bda 	.word	0x2a011bda
   2d43c:	2281dd1b 	.word	0x2281dd1b
   2d440:	60311e59 	.word	0x60311e59
   2d444:	4c01f803 	.word	0x4c01f803
   2d448:	20026833 	.word	0x20026833
   2d44c:	60311e59 	.word	0x60311e59
   2d450:	2c01f803 	.word	0x2c01f803
   2d454:	4622e7b4 	.word	0x4622e7b4
   2d458:	46304639 	.word	0x46304639
   2d45c:	fe48f7ff 	.word	0xfe48f7ff
   2d460:	dbd22800 	.word	0xdbd22800
   2d464:	4622e7c6 	.word	0x4622e7c6
   2d468:	46304639 	.word	0x46304639
   2d46c:	fe40f7ff 	.word	0xfe40f7ff
   2d470:	daa52800 	.word	0xdaa52800
   2d474:	f06fe7c9 	.word	0xf06fe7c9
   2d478:	e7c6006b 	.word	0xe7c6006b

0002d47c <symbol_0005bf5>:
   2d47c:	4ff0e92d 	.word	0x4ff0e92d
   2d480:	b0d72400 	.word	0xb0d72400
   2d484:	73abf50d 	.word	0x73abf50d
   2d488:	46914688 	.word	0x46914688
   2d48c:	4306e9cd 	.word	0x4306e9cd
   2d490:	f0014607 	.word	0xf0014607
   2d494:	2802f9a9 	.word	0x2802f9a9
   2d498:	2385d159 	.word	0x2385d159
   2d49c:	ae0b6878 	.word	0xae0b6878
   2d4a0:	46229301 	.word	0x46229301
   2d4a4:	0188f100 	.word	0x0188f100
   2d4a8:	ab0a9600 	.word	0xab0a9600
   2d4ac:	f004940a 	.word	0xf004940a
   2d4b0:	ad2dfca7 	.word	0xad2dfca7
   2d4b4:	b9684604 	.word	0xb9684604
   2d4b8:	42a89807 	.word	0x42a89807
   2d4bc:	9a0ad37f 	.word	0x9a0ad37f
   2d4c0:	42931b43 	.word	0x42931b43
   2d4c4:	1a83d37b 	.word	0x1a83d37b
   2d4c8:	46314618 	.word	0x46314618
   2d4cc:	f7ec9307 	.word	0xf7ec9307
   2d4d0:	9c0afcef 	.word	0x9c0afcef
   2d4d4:	db312c00 	.word	0xdb312c00
   2d4d8:	1b5a9b07 	.word	0x1b5a9b07
   2d4dc:	dd6e2a00 	.word	0xdd6e2a00
   2d4e0:	1e5a2100 	.word	0x1e5a2100
   2d4e4:	0a01f104 	.word	0x0a01f104
   2d4e8:	a8079207 	.word	0xa8079207
   2d4ec:	1c01f803 	.word	0x1c01f803
   2d4f0:	46294652 	.word	0x46294652
   2d4f4:	fe5cf7ff 	.word	0xfe5cf7ff
   2d4f8:	db1f1e04 	.word	0xdb1f1e04
   2d4fc:	46292203 	.word	0x46292203
   2d500:	f7ffa807 	.word	0xf7ffa807
   2d504:	f1b0fecf 	.word	0xf1b0fecf
   2d508:	db1b0b00 	.word	0xdb1b0b00
   2d50c:	f0014638 	.word	0xf0014638
   2d510:	aa08f96b 	.word	0xaa08f96b
   2d514:	f00ba909 	.word	0xf00ba909
   2d518:	4603fe3b 	.word	0x4603fe3b
   2d51c:	2b00b1c8 	.word	0x2b00b1c8
   2d520:	f1c3db50 	.word	0xf1c3db50
   2d524:	a90602a2 	.word	0xa90602a2
   2d528:	9101e9cd 	.word	0x9101e9cd
   2d52c:	8000f8cd 	.word	0x8000f8cd
   2d530:	4925442a 	.word	0x4925442a
   2d534:	f0054825 	.word	0xf0054825
   2d538:	4604f8b1 	.word	0x4604f8b1
   2d53c:	b0574620 	.word	0xb0574620
   2d540:	8ff0e8bd 	.word	0x8ff0e8bd
   2d544:	4620465c 	.word	0x4620465c
   2d548:	e8bdb057 	.word	0xe8bdb057
   2d54c:	4c208ff0 	.word	0x4c208ff0
   2d550:	9005e7f4 	.word	0x9005e7f4
   2d554:	f0014638 	.word	0xf0014638
   2d558:	2802f947 	.word	0x2802f947
   2d55c:	d01d9b05 	.word	0xd01d9b05
   2d560:	e9dd4618 	.word	0xe9dd4618
   2d564:	90003208 	.word	0x90003208
   2d568:	a8074629 	.word	0xa8074629
   2d56c:	fef0f7ff 	.word	0xfef0f7ff
   2d570:	db222800 	.word	0xdb222800
   2d574:	44a34454 	.word	0x44a34454
   2d578:	465a4483 	.word	0x465a4483
   2d57c:	a8074629 	.word	0xa8074629
   2d580:	fe16f7ff 	.word	0xfe16f7ff
   2d584:	dbd91e04 	.word	0xdbd91e04
   2d588:	2230a807 	.word	0x2230a807
   2d58c:	f7ff4629 	.word	0xf7ff4629
   2d590:	1e03fe89 	.word	0x1e03fe89
   2d594:	44a3db16 	.word	0x44a3db16
   2d598:	e7c0445b 	.word	0xe7c0445b
   2d59c:	4632687b 	.word	0x4632687b
   2d5a0:	a90a7818 	.word	0xa90a7818
   2d5a4:	fe10f00b 	.word	0xfe10f00b
   2d5a8:	6833b928 	.word	0x6833b928
   2d5ac:	46299a0a 	.word	0x46299a0a
   2d5b0:	f7ffa807 	.word	0xf7ffa807
   2d5b4:	2800fe85 	.word	0x2800fe85
   2d5b8:	4604dad3 	.word	0x4604dad3
   2d5bc:	f06fe7be 	.word	0xf06fe7be
   2d5c0:	e7bb046b 	.word	0xe7bb046b
   2d5c4:	e7b9461c 	.word	0xe7b9461c
   2d5c8:	0004b37c 	.word	0x0004b37c
   2d5cc:	0004b398 	.word	0x0004b398
   2d5d0:	ffffc680 	.word	0xffffc680

0002d5d4 <authenticated_atcmd_init>:
   2d5d4:	4c3bb5f0 	.word	0x4c3bb5f0
   2d5d8:	6826b0c7 	.word	0x6826b0c7
   2d5dc:	2701bb16 	.word	0x2701bb16
   2d5e0:	60274839 	.word	0x60274839
   2d5e4:	f91ef014 	.word	0xf91ef014
   2d5e8:	f5c04605 	.word	0xf5c04605
   2d5ec:	46317380 	.word	0x46317380
   2d5f0:	7280f44f 	.word	0x7280f44f
   2d5f4:	9302a806 	.word	0x9302a806
   2d5f8:	fd1ef013 	.word	0xfd1ef013
   2d5fc:	4932462a 	.word	0x4932462a
   2d600:	f7eca806 	.word	0xf7eca806
   2d604:	aa06fc55 	.word	0xaa06fc55
   2d608:	ab029700 	.word	0xab029700
   2d60c:	2120442a 	.word	0x2120442a
   2d610:	f00b482e 	.word	0xf00b482e
   2d614:	4606f839 	.word	0x4606f839
   2d618:	2300b138 	.word	0x2300b138
   2d61c:	60232023 	.word	0x60232023
   2d620:	bdf0b047 	.word	0xbdf0b047
   2d624:	b047200e 	.word	0xb047200e
   2d628:	2022bdf0 	.word	0x2022bdf0
   2d62c:	60279b02 	.word	0x60279b02
   2d630:	af06441d 	.word	0xaf06441d
   2d634:	5578ab06 	.word	0x5578ab06
   2d638:	f240442b 	.word	0xf240442b
   2d63c:	21022201 	.word	0x21022201
   2d640:	705e2066 	.word	0x705e2066
   2d644:	f9c6f000 	.word	0xf9c6f000
   2d648:	dbe61e07 	.word	0xdbe61e07
   2d64c:	f0144820 	.word	0xf0144820
   2d650:	4633f8e9 	.word	0x4633f8e9
   2d654:	491e4602 	.word	0x491e4602
   2d658:	6600e9cd 	.word	0x6600e9cd
   2d65c:	f0004638 	.word	0xf0004638
   2d660:	3502f963 	.word	0x3502f963
   2d664:	4633a903 	.word	0x4633a903
   2d668:	e9cd220a 	.word	0xe9cd220a
   2d66c:	46386600 	.word	0x46386600
   2d670:	fa42f000 	.word	0xfa42f000
   2d674:	6600e9cd 	.word	0x6600e9cd
   2d678:	462aa906 	.word	0x462aa906
   2d67c:	46384633 	.word	0x46384633
   2d680:	f952f000 	.word	0xf952f000
   2d684:	d00342a8 	.word	0xd00342a8
   2d688:	f0004638 	.word	0xf0004638
   2d68c:	e7c4f9ed 	.word	0xe7c4f9ed
   2d690:	6600e9cd 	.word	0x6600e9cd
   2d694:	220a4633 	.word	0x220a4633
   2d698:	4638a903 	.word	0x4638a903
   2d69c:	fa2cf000 	.word	0xfa2cf000
   2d6a0:	ddf12801 	.word	0xddf12801
   2d6a4:	2202a803 	.word	0x2202a803
   2d6a8:	f014490a 	.word	0xf014490a
   2d6ac:	4605f8e9 	.word	0x4605f8e9
   2d6b0:	d1e92800 	.word	0xd1e92800
   2d6b4:	46382302 	.word	0x46382302
   2d6b8:	f0006023 	.word	0xf0006023
   2d6bc:	4628f9d5 	.word	0x4628f9d5
   2d6c0:	bf00e7ae 	.word	0xbf00e7ae
   2d6c4:	20024cc0 	.word	0x20024cc0
   2d6c8:	0004b3b4 	.word	0x0004b3b4
   2d6cc:	2002c1fc 	.word	0x2002c1fc
   2d6d0:	0004b3c4 	.word	0x0004b3c4
   2d6d4:	0004b3d4 	.word	0x0004b3d4

0002d6d8 <authenticated_atcmd_shutdown>:
   2d6d8:	4b012200 	.word	0x4b012200
   2d6dc:	4770601a 	.word	0x4770601a
   2d6e0:	20024cc0 	.word	0x20024cc0

0002d6e4 <gnss_client_event_handler>:
   2d6e4:	1b08f850 	.word	0x1b08f850
   2d6e8:	f0060c09 	.word	0xf0060c09
   2d6ec:	bf00bee9 	.word	0xbf00bee9

0002d6f0 <rpc_gnss_client_init>:
   2d6f0:	f00b4801 	.word	0xf00b4801
   2d6f4:	bf00b8c1 	.word	0xbf00b8c1
   2d6f8:	0004b45c 	.word	0x0004b45c

0002d6fc <rpc_gnss_client_request_alloc>:
   2d6fc:	b5102300 	.word	0xb5102300
   2d700:	9301b082 	.word	0x9301b082
   2d704:	4604b158 	.word	0x4604b158
   2d708:	2007aa01 	.word	0x2007aa01
   2d70c:	faecf00b 	.word	0xfaecf00b
   2d710:	9b01b918 	.word	0x9b01b918
   2d714:	3308b10b 	.word	0x3308b10b
   2d718:	b0026023 	.word	0xb0026023
   2d71c:	2007bd10 	.word	0x2007bd10
   2d720:	bd10b002 	.word	0xbd10b002

0002d724 <rpc_gnss_client_request_send>:
   2d724:	4370f401 	.word	0x4370f401
   2d728:	5f80f5b3 	.word	0x5f80f5b3
   2d72c:	b160d10b 	.word	0xb160d10b
   2d730:	f8304603 	.word	0xf8304603
   2d734:	20072c08 	.word	0x20072c08
   2d738:	4101ea42 	.word	0x4101ea42
   2d73c:	1d08f843 	.word	0x1d08f843
   2d740:	f00b4619 	.word	0xf00b4619
   2d744:	200fbab9 	.word	0x200fbab9
   2d748:	20074770 	.word	0x20074770
   2d74c:	bf004770 	.word	0xbf004770

0002d750 <rpc_gnss_client_message_free>:
   2d750:	f1a0b120 	.word	0xf1a0b120
   2d754:	20070108 	.word	0x20070108
   2d758:	baf8f00b 	.word	0xbaf8f00b
   2d75c:	47702007 	.word	0x47702007

0002d760 <rpc_gnss_client_data_free>:
   2d760:	4601b118 	.word	0x4601b118
   2d764:	f00b2007 	.word	0xf00b2007
   2d768:	2007bc03 	.word	0x2007bc03
   2d76c:	bf004770 	.word	0xbf004770

0002d770 <eckey_can_do>:
   2d770:	28023802 	.word	0x28023802
   2d774:	2000bf8c 	.word	0x2000bf8c
   2d778:	47702001 	.word	0x47702001

0002d77c <eckey_get_bitlen>:
   2d77c:	47706d80 	.word	0x47706d80

0002d780 <eckey_debug>:
   2d780:	4b032202 	.word	0x4b032202
   2d784:	60883088 	.word	0x60883088
   2d788:	604b700a 	.word	0x604b700a
   2d78c:	bf004770 	.word	0xbf004770
   2d790:	0004b46c 	.word	0x0004b46c

0002d794 <eckeydh_can_do>:
   2d794:	28013802 	.word	0x28013802
   2d798:	2000bf8c 	.word	0x2000bf8c
   2d79c:	47702001 	.word	0x47702001

0002d7a0 <eckey_free_wrap>:
   2d7a0:	4604b510 	.word	0x4604b510
   2d7a4:	fd24f003 	.word	0xfd24f003
   2d7a8:	e8bd4620 	.word	0xe8bd4620
   2d7ac:	f00c4010 	.word	0xf00c4010
   2d7b0:	bf00b947 	.word	0xbf00b947

0002d7b4 <eckey_alloc_wrap>:
   2d7b4:	21acb510 	.word	0x21acb510
   2d7b8:	f00c2001 	.word	0xf00c2001
   2d7bc:	4604f92d 	.word	0x4604f92d
   2d7c0:	f003b108 	.word	0xf003b108
   2d7c4:	4620fcaf 	.word	0x4620fcaf
   2d7c8:	bf00bd10 	.word	0xbf00bd10

0002d7cc <eckey_check_pair>:
   2d7cc:	bc88f004 	.word	0xbc88f004

0002d7d0 <symbol_0005c7f>:
   2d7d0:	4ff0e92d 	.word	0x4ff0e92d
   2d7d4:	c024f8dd 	.word	0xc024f8dd
   2d7d8:	0f00f1bc 	.word	0x0f00f1bc
   2d7dc:	4c42d065 	.word	0x4c42d065
   2d7e0:	540cfba4 	.word	0x540cfba4
   2d7e4:	eb040864 	.word	0xeb040864
   2d7e8:	45c40844 	.word	0x45c40844
   2d7ec:	3401bf18 	.word	0x3401bf18
   2d7f0:	4f80f1b4 	.word	0x4f80f1b4
   2d7f4:	00a4d271 	.word	0x00a4d271
   2d7f8:	428c3401 	.word	0x428c3401
   2d7fc:	2800d869 	.word	0x2800d869
   2d800:	f1b8d067 	.word	0xf1b8d067
   2d804:	d0610f00 	.word	0xd0610f00
   2d808:	27004686 	.word	0x27004686
   2d80c:	1cdc4e37 	.word	0x1cdc4e37
   2d810:	f8142500 	.word	0xf8142500
   2d814:	f8141c03 	.word	0xf8141c03
   2d818:	f8143c02 	.word	0xf8143c02
   2d81c:	ea4fbc01 	.word	0xea4fbc01
   2d820:	010909a1 	.word	0x010909a1
   2d824:	0130f001 	.word	0x0130f001
   2d828:	1a13eb06 	.word	0x1a13eb06
   2d82c:	9009f816 	.word	0x9009f816
   2d830:	f81a009b 	.word	0xf81a009b
   2d834:	f003a001 	.word	0xf003a001
   2d838:	eb06013c 	.word	0xeb06013c
   2d83c:	5c59139b 	.word	0x5c59139b
   2d840:	0507f369 	.word	0x0507f369
   2d844:	033ff00b 	.word	0x033ff00b
   2d848:	f36a5cf3 	.word	0xf36a5cf3
   2d84c:	f361250f 	.word	0xf361250f
   2d850:	37034517 	.word	0x37034517
   2d854:	651ff363 	.word	0x651ff363
   2d858:	0104f10e 	.word	0x0104f10e
   2d85c:	f8ce45b8 	.word	0xf8ce45b8
   2d860:	46235000 	.word	0x46235000
   2d864:	f104468e 	.word	0xf104468e
   2d868:	d8d10403 	.word	0xd8d10403
   2d86c:	d91445bc 	.word	0xd91445bc
   2d870:	4d1e781c 	.word	0x4d1e781c
   2d874:	10a63701 	.word	0x10a63701
   2d878:	ea4f4567 	.word	0xea4f4567
   2d87c:	f0041404 	.word	0xf0041404
   2d880:	f8150430 	.word	0xf8150430
   2d884:	d315e006 	.word	0xd315e006
   2d888:	5d2b263d 	.word	0x5d2b263d
   2d88c:	e000f881 	.word	0xe000f881
   2d890:	233d704b 	.word	0x233d704b
   2d894:	70cb708e 	.word	0x70cb708e
   2d898:	23003104 	.word	0x23003104
   2d89c:	1a08469c 	.word	0x1a08469c
   2d8a0:	700b6010 	.word	0x700b6010
   2d8a4:	e8bd4660 	.word	0xe8bd4660
   2d8a8:	f8c28ff0 	.word	0xf8c28ff0
   2d8ac:	4660c000 	.word	0x4660c000
   2d8b0:	8ff0e8bd 	.word	0x8ff0e8bd
   2d8b4:	f881785b 	.word	0xf881785b
   2d8b8:	eb05e000 	.word	0xeb05e000
   2d8bc:	5d341613 	.word	0x5d341613
   2d8c0:	f003009b 	.word	0xf003009b
   2d8c4:	704c033c 	.word	0x704c033c
   2d8c8:	e7e25cee 	.word	0xe7e25cee
   2d8cc:	46014647 	.word	0x46014647
   2d8d0:	6014e7cc 	.word	0x6014e7cc
   2d8d4:	0c29f06f 	.word	0x0c29f06f
   2d8d8:	f04fe7e4 	.word	0xf04fe7e4
   2d8dc:	f06f33ff 	.word	0xf06f33ff
   2d8e0:	60130c29 	.word	0x60130c29
   2d8e4:	bf00e7de 	.word	0xbf00e7de
   2d8e8:	aaaaaaab 	.word	0xaaaaaaab
   2d8ec:	0004b4d4 	.word	0x0004b4d4

0002d8f0 <packet_free_cb>:
   2d8f0:	f0006800 	.word	0xf0006800
   2d8f4:	bf00b9eb 	.word	0xbf00b9eb

0002d8f8 <packet_free_cb>:
   2d8f8:	4604b510 	.word	0x4604b510
   2d8fc:	f0066800 	.word	0xf0066800
   2d900:	68a0faaf 	.word	0x68a0faaf
   2d904:	e8bdb118 	.word	0xe8bdb118
   2d908:	f00c4010 	.word	0xf00c4010
   2d90c:	bd10b899 	.word	0xbd10b899

0002d910 <packet_free_cb>:
   2d910:	4604b510 	.word	0x4604b510
   2d914:	f7ff6800 	.word	0xf7ff6800
   2d918:	68a0ff23 	.word	0x68a0ff23
   2d91c:	e8bdb118 	.word	0xe8bdb118
   2d920:	f00c4010 	.word	0xf00c4010
   2d924:	bd10b88d 	.word	0xbd10b88d

0002d928 <at_interface_write>:
   2d928:	b083b5f0 	.word	0xb083b5f0
   2d92c:	4615460f 	.word	0x4615460f
   2d930:	f0044606 	.word	0xf0044606
   2d934:	2800fdcf 	.word	0x2800fdcf
   2d938:	6803d047 	.word	0x6803d047
   2d93c:	039b4604 	.word	0x039b4604
   2d940:	6803d543 	.word	0x6803d543
   2d944:	f4234629 	.word	0xf4234629
   2d948:	60033300 	.word	0x60033300
   2d94c:	a8016803 	.word	0xa8016803
   2d950:	1300f443 	.word	0x1300f443
   2d954:	f0006023 	.word	0xf0006023
   2d958:	bba0f98f 	.word	0xbba0f98f
   2d95c:	9b012204 	.word	0x9b012204
   2d960:	7258721a 	.word	0x7258721a
   2d964:	72d87298 	.word	0x72d87298
   2d968:	b98560de 	.word	0xb98560de
   2d96c:	21014618 	.word	0x21014618
   2d970:	f996f000 	.word	0xf996f000
   2d974:	f44fb9d0 	.word	0xf44fb9d0
   2d978:	46303200 	.word	0x46303200
   2d97c:	f04f4611 	.word	0xf04f4611
   2d980:	f00433ff 	.word	0xf00433ff
   2d984:	b9a8fd3b 	.word	0xb9a8fd3b
   2d988:	b0034628 	.word	0xb0034628
   2d98c:	4639bdf0 	.word	0x4639bdf0
   2d990:	462a6818 	.word	0x462a6818
   2d994:	fa8cf7ec 	.word	0xfa8cf7ec
   2d998:	98012101 	.word	0x98012101
   2d99c:	f980f000 	.word	0xf980f000
   2d9a0:	d0e82800 	.word	0xd0e82800
   2d9a4:	68189b01 	.word	0x68189b01
   2d9a8:	f990f000 	.word	0xf990f000
   2d9ac:	f0009801 	.word	0xf0009801
   2d9b0:	2023f985 	.word	0x2023f985
   2d9b4:	f4436823 	.word	0xf4436823
   2d9b8:	60233300 	.word	0x60233300
   2d9bc:	f85af7f8 	.word	0xf85af7f8
   2d9c0:	30fff04f 	.word	0x30fff04f
   2d9c4:	200ce7e1 	.word	0x200ce7e1
   2d9c8:	2016e7f4 	.word	0x2016e7f4
   2d9cc:	bf00e7f6 	.word	0xbf00e7f6

0002d9d0 <at_interface_init>:
   2d9d0:	b94cf000 	.word	0xb94cf000

0002d9d4 <at_interface_open>:
   2d9d4:	41f0e92d 	.word	0x41f0e92d
   2d9d8:	b0822500 	.word	0xb0822500
   2d9dc:	f843ab02 	.word	0xf843ab02
   2d9e0:	46805d08 	.word	0x46805d08
   2d9e4:	4618460f 	.word	0x4618460f
   2d9e8:	21024616 	.word	0x21024616
   2d9ec:	f0044a1d 	.word	0xf0044a1d
   2d9f0:	9b00fc61 	.word	0x9b00fc61
   2d9f4:	b30b4604 	.word	0xb30b4604
   2d9f8:	8703e9c3 	.word	0x8703e9c3
   2d9fc:	4629615e 	.word	0x4629615e
   2da00:	f000a801 	.word	0xf000a801
   2da04:	b9e8f939 	.word	0xb9e8f939
   2da08:	9b012204 	.word	0x9b012204
   2da0c:	72582105 	.word	0x72582105
   2da10:	72d87298 	.word	0x72d87298
   2da14:	60dc721a 	.word	0x60dc721a
   2da18:	f0004618 	.word	0xf0004618
   2da1c:	b9d8f941 	.word	0xb9d8f941
   2da20:	f04f2202 	.word	0xf04f2202
   2da24:	461133ff 	.word	0x461133ff
   2da28:	f0044620 	.word	0xf0044620
   2da2c:	4605fce7 	.word	0x4605fce7
   2da30:	9a00b948 	.word	0x9a00b948
   2da34:	f4436813 	.word	0xf4436813
   2da38:	60133300 	.word	0x60133300
   2da3c:	b0024620 	.word	0xb0024620
   2da40:	81f0e8bd 	.word	0x81f0e8bd
   2da44:	4620250c 	.word	0x4620250c
   2da48:	fc8af004 	.word	0xfc8af004
   2da4c:	f7f84628 	.word	0xf7f84628
   2da50:	f04ff811 	.word	0xf04ff811
   2da54:	e7f134ff 	.word	0xe7f134ff
   2da58:	f0009801 	.word	0xf0009801
   2da5c:	2523f92f 	.word	0x2523f92f
   2da60:	bf00e7f1 	.word	0xbf00e7f1
   2da64:	0002d8f1 	.word	0x0002d8f1

0002da68 <at_interface_close>:
   2da68:	b083b5f0 	.word	0xb083b5f0
   2da6c:	f0044606 	.word	0xf0044606
   2da70:	2800fd31 	.word	0x2800fd31
   2da74:	230dd03d 	.word	0x230dd03d
   2da78:	60036807 	.word	0x60036807
   2da7c:	46046803 	.word	0x46046803
   2da80:	d41f039b 	.word	0xd41f039b
   2da84:	a8012100 	.word	0xa8012100
   2da88:	f8f6f000 	.word	0xf8f6f000
   2da8c:	2204bb20 	.word	0x2204bb20
   2da90:	21069b01 	.word	0x21069b01
   2da94:	72987258 	.word	0x72987258
   2da98:	721a72d8 	.word	0x721a72d8
   2da9c:	461860de 	.word	0x461860de
   2daa0:	f8fef000 	.word	0xf8fef000
   2daa4:	220eb9d0 	.word	0x220eb9d0
   2daa8:	33fff04f 	.word	0x33fff04f
   2daac:	46304611 	.word	0x46304611
   2dab0:	fca4f004 	.word	0xfca4f004
   2dab4:	b9a84605 	.word	0xb9a84605
   2dab8:	f0044630 	.word	0xf0044630
   2dabc:	4628fc51 	.word	0x4628fc51
   2dac0:	bdf0b003 	.word	0xbdf0b003
   2dac4:	21006803 	.word	0x21006803
   2dac8:	3300f423 	.word	0x3300f423
   2dacc:	a8016003 	.word	0xa8016003
   2dad0:	f8d2f000 	.word	0xf8d2f000
   2dad4:	d0da2800 	.word	0xd0da2800
   2dad8:	e003250c 	.word	0xe003250c
   2dadc:	f0009801 	.word	0xf0009801
   2dae0:	2523f8ed 	.word	0x2523f8ed
   2dae4:	46286027 	.word	0x46286027
   2dae8:	ffc4f7f7 	.word	0xffc4f7f7
   2daec:	35fff04f 	.word	0x35fff04f
   2daf0:	2516e7e5 	.word	0x2516e7e5
   2daf4:	bf00e7f7 	.word	0xbf00e7f7

0002daf8 <at_interface_read>:
   2daf8:	41f0e92d 	.word	0x41f0e92d
   2dafc:	4688b084 	.word	0x4688b084
   2db00:	461e4615 	.word	0x461e4615
   2db04:	f0044607 	.word	0xf0044607
   2db08:	2800fce5 	.word	0x2800fce5
   2db0c:	2300d049 	.word	0x2300d049
   2db10:	8500e9cd 	.word	0x8500e9cd
   2db14:	0502f016 	.word	0x0502f016
   2db18:	e9cd4604 	.word	0xe9cd4604
   2db1c:	d00e3302 	.word	0xd00e3302
   2db20:	2d00e01e 	.word	0x2d00e01e
   2db24:	f44fd133 	.word	0xf44fd133
   2db28:	6a233280 	.word	0x6a233280
   2db2c:	2b004611 	.word	0x2b004611
   2db30:	f04fbf08 	.word	0xf04fbf08
   2db34:	463833ff 	.word	0x463833ff
   2db38:	fc60f004 	.word	0xfc60f004
   2db3c:	68234605 	.word	0x68234605
   2db40:	f42369e0 	.word	0xf42369e0
   2db44:	60233380 	.word	0x60233380
   2db48:	46326803 	.word	0x46326803
   2db4c:	4669689b 	.word	0x4669689b
   2db50:	f1b04798 	.word	0xf1b04798
   2db54:	dbe40800 	.word	0xdbe40800
   2db58:	b0044640 	.word	0xb0044640
   2db5c:	81f0e8bd 	.word	0x81f0e8bd
   2db60:	69c06803 	.word	0x69c06803
   2db64:	3380f423 	.word	0x3380f423
   2db68:	68036023 	.word	0x68036023
   2db6c:	689b4632 	.word	0x689b4632
   2db70:	47984669 	.word	0x47984669
   2db74:	0800f1b0 	.word	0x0800f1b0
   2db78:	f1b8daee 	.word	0xf1b8daee
   2db7c:	d1eb3fff 	.word	0xd1eb3fff
   2db80:	f7f72023 	.word	0xf7f72023
   2db84:	4640ff77 	.word	0x4640ff77
   2db88:	e8bdb004 	.word	0xe8bdb004
   2db8c:	f1b881f0 	.word	0xf1b881f0
   2db90:	d1e13fff 	.word	0xd1e13fff
   2db94:	f7f74628 	.word	0xf7f74628
   2db98:	4640ff6d 	.word	0x4640ff6d
   2db9c:	e8bdb004 	.word	0xe8bdb004
   2dba0:	201681f0 	.word	0x201681f0
   2dba4:	ff66f7f7 	.word	0xff66f7f7
   2dba8:	38fff04f 	.word	0x38fff04f
   2dbac:	bf00e7d4 	.word	0xbf00e7d4

0002dbb0 <at_interface_getopt>:
   2dbb0:	bceef004 	.word	0xbceef004

0002dbb4 <at_interface_setopt>:
   2dbb4:	bcb6f004 	.word	0xbcb6f004

0002dbb8 <rpc_at_event_handler>:
   2dbb8:	4606b570 	.word	0x4606b570
   2dbbc:	68c0b084 	.word	0x68c0b084
   2dbc0:	f004460d 	.word	0xf004460d
   2dbc4:	4604fc87 	.word	0x4604fc87
   2dbc8:	6803b348 	.word	0x6803b348
   2dbcc:	2b01b29b 	.word	0x2b01b29b
   2dbd0:	6803d01f 	.word	0x6803d01f
   2dbd4:	2b0db29b 	.word	0x2b0db29b
   2dbd8:	6803d029 	.word	0x6803d029
   2dbdc:	2b02b29b 	.word	0x2b02b29b
   2dbe0:	3d03d02d 	.word	0x3d03d02d
   2dbe4:	d8172d01 	.word	0xd8172d01
   2dbe8:	68732500 	.word	0x68732500
   2dbec:	e9cd6832 	.word	0xe9cd6832
   2dbf0:	e9cd5502 	.word	0xe9cd5502
   2dbf4:	69e02300 	.word	0x69e02300
   2dbf8:	68034669 	.word	0x68034669
   2dbfc:	4798685b 	.word	0x4798685b
   2dc00:	d0193001 	.word	0xd0193001
   2dc04:	68234628 	.word	0x68234628
   2dc08:	3380f443 	.word	0x3380f443
   2dc0c:	b0046023 	.word	0xb0046023
   2dc10:	2d02bd70 	.word	0x2d02bd70
   2dc14:	6005d1e5 	.word	0x6005d1e5
   2dc18:	b0042000 	.word	0xb0042000
   2dc1c:	6830bd70 	.word	0x6830bd70
   2dc20:	d0f92800 	.word	0xd0f92800
   2dc24:	f852f000 	.word	0xf852f000
   2dc28:	b0044620 	.word	0xb0044620
   2dc2c:	2d02bd70 	.word	0x2d02bd70
   2dc30:	230ed1d7 	.word	0x230ed1d7
   2dc34:	e7ef6003 	.word	0xe7ef6003
   2dc38:	b0042002 	.word	0xb0042002
   2dc3c:	6803bd70 	.word	0x6803bd70
   2dc40:	d5ce029b 	.word	0xd5ce029b
   2dc44:	d1cc2d02 	.word	0xd1cc2d02
   2dc48:	f4236803 	.word	0xf4236803
   2dc4c:	60031300 	.word	0x60031300
   2dc50:	f4436803 	.word	0xf4436803
   2dc54:	60033300 	.word	0x60033300
   2dc58:	bf00e7de 	.word	0xbf00e7de

0002dc5c <at_client_evt_handler>:
   2dc5c:	f850b120 	.word	0xf850b120
   2dc60:	0c091b08 	.word	0x0c091b08
   2dc64:	bfa8f7ff 	.word	0xbfa8f7ff
   2dc68:	bf004770 	.word	0xbf004770

0002dc6c <rpc_at_client_init>:
   2dc6c:	f00a4801 	.word	0xf00a4801
   2dc70:	bf00be03 	.word	0xbf00be03
   2dc74:	0004b514 	.word	0x0004b514

0002dc78 <rpc_at_client_request_alloc>:
   2dc78:	2300b180 	.word	0x2300b180
   2dc7c:	b082b510 	.word	0xb082b510
   2dc80:	4604aa02 	.word	0x4604aa02
   2dc84:	3d04f842 	.word	0x3d04f842
   2dc88:	f00b2003 	.word	0xf00b2003
   2dc8c:	b918f82d 	.word	0xb918f82d
   2dc90:	b10b9b01 	.word	0xb10b9b01
   2dc94:	60233308 	.word	0x60233308
   2dc98:	bd10b002 	.word	0xbd10b002
   2dc9c:	4770200e 	.word	0x4770200e

0002dca0 <rpc_at_client_request_send>:
   2dca0:	4603b150 	.word	0x4603b150
   2dca4:	2c08f830 	.word	0x2c08f830
   2dca8:	ea422003 	.word	0xea422003
   2dcac:	f8434101 	.word	0xf8434101
   2dcb0:	46191d08 	.word	0x46191d08
   2dcb4:	b800f00b 	.word	0xb800f00b
   2dcb8:	4770200e 	.word	0x4770200e

0002dcbc <rpc_at_client_message_free>:
   2dcbc:	f1a0b120 	.word	0xf1a0b120
   2dcc0:	20030108 	.word	0x20030108
   2dcc4:	b842f00b 	.word	0xb842f00b
   2dcc8:	4770200e 	.word	0x4770200e

0002dccc <rpc_at_client_data_free>:
   2dccc:	4601b118 	.word	0x4601b118
   2dcd0:	f00b2003 	.word	0xf00b2003
   2dcd4:	200eb94d 	.word	0x200eb94d
   2dcd8:	bf004770 	.word	0xbf004770

0002dcdc <logobj_event_handler>:
   2dcdc:	4b3bb530 	.word	0x4b3bb530
   2dce0:	681db085 	.word	0x681db085
   2dce4:	d04c2d00 	.word	0xd04c2d00
   2dce8:	0302f248 	.word	0x0302f248
   2dcec:	d0534299 	.word	0xd0534299
   2dcf0:	f248d91c 	.word	0xf248d91c
   2dcf4:	42990303 	.word	0x42990303
   2dcf8:	f249d05a 	.word	0xf249d05a
   2dcfc:	42990301 	.word	0x42990301
   2dd00:	2400d147 	.word	0x2400d147
   2dd04:	68026843 	.word	0x68026843
   2dd08:	4402e9cd 	.word	0x4402e9cd
   2dd0c:	2300e9cd 	.word	0x2300e9cd
   2dd10:	466969e8 	.word	0x466969e8
   2dd14:	685b6803 	.word	0x685b6803
   2dd18:	30014798 	.word	0x30014798
   2dd1c:	4620d04e 	.word	0x4620d04e
   2dd20:	f443682b 	.word	0xf443682b
   2dd24:	602b3380 	.word	0x602b3380
   2dd28:	bd30b005 	.word	0xbd30b005
   2dd2c:	0301f248 	.word	0x0301f248
   2dd30:	d12e4299 	.word	0xd12e4299
   2dd34:	2b0068c3 	.word	0x2b0068c3
   2dd38:	6828d135 	.word	0x6828d135
   2dd3c:	0080f410 	.word	0x0080f410
   2dd40:	682bd03e 	.word	0x682bd03e
   2dd44:	2b01b29b 	.word	0x2b01b29b
   2dd48:	682bd105 	.word	0x682bd105
   2dd4c:	041b0c1b 	.word	0x041b0c1b
   2dd50:	0302f043 	.word	0x0302f043
   2dd54:	4b1e602b 	.word	0x4b1e602b
   2dd58:	f002781a 	.word	0xf002781a
   2dd5c:	2a0001ff 	.word	0x2a0001ff
   2dd60:	4a1cd031 	.word	0x4a1cd031
   2dd64:	b9097811 	.word	0xb9097811
   2dd68:	70112101 	.word	0x70112101
   2dd6c:	70182000 	.word	0x70182000
   2dd70:	f423682b 	.word	0xf423682b
   2dd74:	602b0380 	.word	0x602b0380
   2dd78:	f443682b 	.word	0xf443682b
   2dd7c:	602b0300 	.word	0x602b0300
   2dd80:	6800e7d2 	.word	0x6800e7d2
   2dd84:	d0cf2800 	.word	0xd0cf2800
   2dd88:	f86af006 	.word	0xf86af006
   2dd8c:	b0054628 	.word	0xb0054628
   2dd90:	2000bd30 	.word	0x2000bd30
   2dd94:	bd30b005 	.word	0xbd30b005
   2dd98:	f413682b 	.word	0xf413682b
   2dd9c:	d00b0380 	.word	0xd00b0380
   2dda0:	280068c0 	.word	0x280068c0
   2dda4:	230ed0e4 	.word	0x230ed0e4
   2dda8:	606b2000 	.word	0x606b2000
   2ddac:	bd30b005 	.word	0xbd30b005
   2ddb0:	2b0168c3 	.word	0x2b0168c3
   2ddb4:	e7f6d1a5 	.word	0xe7f6d1a5
   2ddb8:	e7b54618 	.word	0xe7b54618
   2ddbc:	e7b32002 	.word	0xe7b32002
   2ddc0:	606b230e 	.word	0x606b230e
   2ddc4:	4a03e7b0 	.word	0x4a03e7b0
   2ddc8:	e7cf7011 	.word	0xe7cf7011
   2ddcc:	20024cc8 	.word	0x20024cc8
   2ddd0:	2002c1f5 	.word	0x2002c1f5
   2ddd4:	2002c1f6 	.word	0x2002c1f6

0002ddd8 <logobj_interface_init>:
   2ddd8:	b5102300 	.word	0xb5102300
   2dddc:	4a084907 	.word	0x4a084907
   2dde0:	48094c08 	.word	0x48094c08
   2dde4:	60037023 	.word	0x60037023
   2dde8:	6013700b 	.word	0x6013700b
   2ddec:	fffcf005 	.word	0xfffcf005
   2ddf0:	bf183000 	.word	0xbf183000
   2ddf4:	42402001 	.word	0x42402001
   2ddf8:	bf00bd10 	.word	0xbf00bd10
   2ddfc:	2002c1f5 	.word	0x2002c1f5
   2de00:	20024cc4 	.word	0x20024cc4
   2de04:	2002c1f6 	.word	0x2002c1f6
   2de08:	20024cc8 	.word	0x20024cc8

0002de0c <logobj_interface_open>:
   2de0c:	e92d2300 	.word	0xe92d2300
   2de10:	286647f0 	.word	0x286647f0
   2de14:	9300b082 	.word	0x9300b082
   2de18:	2902d172 	.word	0x2902d172
   2de1c:	d16f4689 	.word	0xd16f4689
   2de20:	2305f240 	.word	0x2305f240
   2de24:	4692429a 	.word	0x4692429a
   2de28:	4f48d16a 	.word	0x4f48d16a
   2de2c:	2d00683d 	.word	0x2d00683d
   2de30:	4680d17c 	.word	0x4680d17c
   2de34:	46684a46 	.word	0x46684a46
   2de38:	fa3cf004 	.word	0xfa3cf004
   2de3c:	46069b00 	.word	0x46069b00
   2de40:	d07d2b00 	.word	0xd07d2b00
   2de44:	22044629 	.word	0x22044629
   2de48:	603b4842 	.word	0x603b4842
   2de4c:	f8f4f013 	.word	0xf8f4f013
   2de50:	46299c00 	.word	0x46299c00
   2de54:	8903e9c4 	.word	0x8903e9c4
   2de58:	a014f8c4 	.word	0xa014f8c4
   2de5c:	f005a801 	.word	0xf005a801
   2de60:	2800ffc9 	.word	0x2800ffc9
   2de64:	2201d13c 	.word	0x2201d13c
   2de68:	9b012104 	.word	0x9b012104
   2de6c:	73584d3a 	.word	0x73584d3a
   2de70:	73d87398 	.word	0x73d87398
   2de74:	72987258 	.word	0x72987258
   2de78:	721972d8 	.word	0x721972d8
   2de7c:	731a702a 	.word	0x731a702a
   2de80:	46186822 	.word	0x46186822
   2de84:	0280f442 	.word	0x0280f442
   2de88:	f2476022 	.word	0xf2476022
   2de8c:	f0050101 	.word	0xf0050101
   2de90:	bb38ffc9 	.word	0xbb38ffc9
   2de94:	0200f44f 	.word	0x0200f44f
   2de98:	33fff04f 	.word	0x33fff04f
   2de9c:	46304611 	.word	0x46304611
   2dea0:	faacf004 	.word	0xfaacf004
   2dea4:	b3104604 	.word	0xb3104604
   2dea8:	2e009a00 	.word	0x2e009a00
   2deac:	f4436813 	.word	0xf4436813
   2deb0:	60133300 	.word	0x60133300
   2deb4:	68139a00 	.word	0x68139a00
   2deb8:	0380f423 	.word	0x0380f423
   2debc:	9a006013 	.word	0x9a006013
   2dec0:	f4236813 	.word	0xf4236813
   2dec4:	60130300 	.word	0x60130300
   2dec8:	2300da36 	.word	0x2300da36
   2decc:	603b4620 	.word	0x603b4620
   2ded0:	36fff04f 	.word	0x36fff04f
   2ded4:	fdcef7f7 	.word	0xfdcef7f7
   2ded8:	b0024630 	.word	0xb0024630
   2dedc:	87f0e8bd 	.word	0x87f0e8bd
   2dee0:	e7e1240c 	.word	0xe7e1240c
   2dee4:	f0059801 	.word	0xf0059801
   2dee8:	2405ffb3 	.word	0x2405ffb3
   2deec:	4630e7dc 	.word	0x4630e7dc
   2def0:	faf0f004 	.word	0xfaf0f004
   2def4:	6844b150 	.word	0x6844b150
   2def8:	2300b144 	.word	0x2300b144
   2defc:	e7d36043 	.word	0xe7d36043
   2df00:	f7f72016 	.word	0xf7f72016
   2df04:	f04ffdb7 	.word	0xf04ffdb7
   2df08:	e7e536ff 	.word	0xe7e536ff
   2df0c:	68139a00 	.word	0x68139a00
   2df10:	3300f443 	.word	0x3300f443
   2df14:	9a006013 	.word	0x9a006013
   2df18:	f4236813 	.word	0xf4236813
   2df1c:	60130380 	.word	0x60130380
   2df20:	68139a00 	.word	0x68139a00
   2df24:	0300f423 	.word	0x0300f423
   2df28:	e7d56013 	.word	0xe7d56013
   2df2c:	f7f72001 	.word	0xf7f72001
   2df30:	f04ffda1 	.word	0xf04ffda1
   2df34:	e7cf36ff 	.word	0xe7cf36ff
   2df38:	f0044630 	.word	0xf0044630
   2df3c:	e7c4fa11 	.word	0xe7c4fa11
   2df40:	f7f72018 	.word	0xf7f72018
   2df44:	f04ffd97 	.word	0xf04ffd97
   2df48:	e7c536ff 	.word	0xe7c536ff
   2df4c:	20024cc8 	.word	0x20024cc8
   2df50:	0002d8f9 	.word	0x0002d8f9
   2df54:	20024cc4 	.word	0x20024cc4
   2df58:	2002c1f5 	.word	0x2002c1f5

0002df5c <logobj_interface_read>:
   2df5c:	43f0e92d 	.word	0x43f0e92d
   2df60:	2900b085 	.word	0x2900b085
   2df64:	2a00d05e 	.word	0x2a00d05e
   2df68:	dd5b4616 	.word	0xdd5b4616
   2df6c:	4680461f 	.word	0x4680461f
   2df70:	f004460d 	.word	0xf004460d
   2df74:	4604faaf 	.word	0x4604faaf
   2df78:	d0592800 	.word	0xd0592800
   2df7c:	07ba69c0 	.word	0x07ba69c0
   2df80:	68db6803 	.word	0x68db6803
   2df84:	4798d524 	.word	0x4798d524
   2df88:	d03b3001 	.word	0xd03b3001
   2df8c:	69e06823 	.word	0x69e06823
   2df90:	3380f413 	.word	0x3380f413
   2df94:	2100d038 	.word	0x2100d038
   2df98:	463a6823 	.word	0x463a6823
   2df9c:	3380f423 	.word	0x3380f423
   2dfa0:	e9cd6023 	.word	0xe9cd6023
   2dfa4:	e9cd1102 	.word	0xe9cd1102
   2dfa8:	68035600 	.word	0x68035600
   2dfac:	689b4669 	.word	0x689b4669
   2dfb0:	46054798 	.word	0x46054798
   2dfb4:	680369e0 	.word	0x680369e0
   2dfb8:	479868db 	.word	0x479868db
   2dfbc:	d0033001 	.word	0xd0033001
   2dfc0:	f4436823 	.word	0xf4436823
   2dfc4:	60233380 	.word	0x60233380
   2dfc8:	b0054628 	.word	0xb0054628
   2dfcc:	83f0e8bd 	.word	0x83f0e8bd
   2dfd0:	f0126822 	.word	0xf0126822
   2dfd4:	d1d65980 	.word	0xd1d65980
   2dfd8:	1c434798 	.word	0x1c434798
   2dfdc:	f44fd1d6 	.word	0xf44fd1d6
   2dfe0:	6a233280 	.word	0x6a233280
   2dfe4:	2b004611 	.word	0x2b004611
   2dfe8:	4603bf08 	.word	0x4603bf08
   2dfec:	f0044640 	.word	0xf0044640
   2dff0:	b158fa05 	.word	0xb158fa05
   2dff4:	35fff04f 	.word	0x35fff04f
   2dff8:	fd3cf7f7 	.word	0xfd3cf7f7
   2dffc:	b0054628 	.word	0xb0054628
   2e000:	83f0e8bd 	.word	0x83f0e8bd
   2e004:	e7f52023 	.word	0xe7f52023
   2e008:	e7d4461d 	.word	0xe7d4461d
   2e00c:	f0044640 	.word	0xf0044640
   2e010:	4603fa61 	.word	0x4603fa61
   2e014:	d0b92800 	.word	0xd0b92800
   2e018:	28006840 	.word	0x28006840
   2e01c:	f8c3d0b6 	.word	0xf8c3d0b6
   2e020:	e7e79004 	.word	0xe7e79004
   2e024:	f7f72016 	.word	0xf7f72016
   2e028:	f04ffd25 	.word	0xf04ffd25
   2e02c:	e7cb35ff 	.word	0xe7cb35ff
   2e030:	f7f72009 	.word	0xf7f72009
   2e034:	f04ffd1f 	.word	0xf04ffd1f
   2e038:	e7c535ff 	.word	0xe7c535ff

0002e03c <logobj_interface_write>:
   2e03c:	41f0e92d 	.word	0x41f0e92d
   2e040:	2900b082 	.word	0x2900b082
   2e044:	2a04d05b 	.word	0x2a04d05b
   2e048:	461ed159 	.word	0x461ed159
   2e04c:	460d4607 	.word	0x460d4607
   2e050:	fa40f004 	.word	0xfa40f004
   2e054:	28004604 	.word	0x28004604
   2e058:	07b0d067 	.word	0x07b0d067
   2e05c:	6823d526 	.word	0x6823d526
   2e060:	d55e039b 	.word	0xd55e039b
   2e064:	68232600 	.word	0x68232600
   2e068:	f4232100 	.word	0xf4232100
   2e06c:	60233300 	.word	0x60233300
   2e070:	f8d5a801 	.word	0xf8d5a801
   2e074:	f0058000 	.word	0xf0058000
   2e078:	b9f8febd 	.word	0xb9f8febd
   2e07c:	9b012504 	.word	0x9b012504
   2e080:	0103f247 	.word	0x0103f247
   2e084:	800cf8c3 	.word	0x800cf8c3
   2e088:	72987258 	.word	0x72987258
   2e08c:	721d72d8 	.word	0x721d72d8
   2e090:	f0054618 	.word	0xf0054618
   2e094:	4680fec7 	.word	0x4680fec7
   2e098:	b9cebb40 	.word	0xb9cebb40
   2e09c:	68234628 	.word	0x68234628
   2e0a0:	3300f443 	.word	0x3300f443
   2e0a4:	b0026023 	.word	0xb0026023
   2e0a8:	81f0e8bd 	.word	0x81f0e8bd
   2e0ac:	00d96823 	.word	0x00d96823
   2e0b0:	6823d4d5 	.word	0x6823d4d5
   2e0b4:	d536039a 	.word	0xd536039a
   2e0b8:	e7d42601 	.word	0xe7d42601
   2e0bc:	6823200c 	.word	0x6823200c
   2e0c0:	3300f443 	.word	0x3300f443
   2e0c4:	f7f76023 	.word	0xf7f76023
   2e0c8:	f04ffcd5 	.word	0xf04ffcd5
   2e0cc:	e7ea30ff 	.word	0xe7ea30ff
   2e0d0:	3280f44f 	.word	0x3280f44f
   2e0d4:	33fff04f 	.word	0x33fff04f
   2e0d8:	46384611 	.word	0x46384611
   2e0dc:	f98ef004 	.word	0xf98ef004
   2e0e0:	6823b198 	.word	0x6823b198
   2e0e4:	3300f443 	.word	0x3300f443
   2e0e8:	e7ec6023 	.word	0xe7ec6023
   2e0ec:	f0059801 	.word	0xf0059801
   2e0f0:	6823feaf 	.word	0x6823feaf
   2e0f4:	f4432005 	.word	0xf4432005
   2e0f8:	60233300 	.word	0x60233300
   2e0fc:	2016e7e3 	.word	0x2016e7e3
   2e100:	fcb8f7f7 	.word	0xfcb8f7f7
   2e104:	30fff04f 	.word	0x30fff04f
   2e108:	4638e7cd 	.word	0x4638e7cd
   2e10c:	f9e2f004 	.word	0xf9e2f004
   2e110:	28004603 	.word	0x28004603
   2e114:	6840d0c2 	.word	0x6840d0c2
   2e118:	d0bf2800 	.word	0xd0bf2800
   2e11c:	8004f8c3 	.word	0x8004f8c3
   2e120:	2073e7df 	.word	0x2073e7df
   2e124:	2009e7cf 	.word	0x2009e7cf
   2e128:	2009e7cd 	.word	0x2009e7cd
   2e12c:	fca2f7f7 	.word	0xfca2f7f7
   2e130:	30fff04f 	.word	0x30fff04f
   2e134:	bf00e7b7 	.word	0xbf00e7b7

0002e138 <logobj_interface_setopt>:
   2e138:	2901b5f0 	.word	0x2901b5f0
   2e13c:	d068b085 	.word	0xd068b085
   2e140:	f240461e 	.word	0xf240461e
   2e144:	42992305 	.word	0x42992305
   2e148:	8095f040 	.word	0x8095f040
   2e14c:	46154607 	.word	0x46154607
   2e150:	f9c0f004 	.word	0xf9c0f004
   2e154:	28004604 	.word	0x28004604
   2e158:	80b2f000 	.word	0x80b2f000
   2e15c:	d0192d01 	.word	0xd0192d01
   2e160:	d0102d02 	.word	0xd0102d02
   2e164:	6803252a 	.word	0x6803252a
   2e168:	0380f423 	.word	0x0380f423
   2e16c:	68236023 	.word	0x68236023
   2e170:	f4234628 	.word	0xf4234628
   2e174:	60230300 	.word	0x60230300
   2e178:	fc7cf7f7 	.word	0xfc7cf7f7
   2e17c:	35fff04f 	.word	0x35fff04f
   2e180:	b0054628 	.word	0xb0054628
   2e184:	b116bdf0 	.word	0xb116bdf0
   2e188:	2b019b0a 	.word	0x2b019b0a
   2e18c:	6823d049 	.word	0x6823d049
   2e190:	e7e92516 	.word	0xe7e92516
   2e194:	d0fa2e00 	.word	0xd0fa2e00
   2e198:	2b049b0a 	.word	0x2b049b0a
   2e19c:	2100d1f7 	.word	0x2100d1f7
   2e1a0:	f005a803 	.word	0xf005a803
   2e1a4:	4605fe27 	.word	0x4605fe27
   2e1a8:	d16a2800 	.word	0xd16a2800
   2e1ac:	22089803 	.word	0x22089803
   2e1b0:	300c4629 	.word	0x300c4629
   2e1b4:	ff40f012 	.word	0xff40f012
   2e1b8:	46319803 	.word	0x46319803
   2e1bc:	300c9a0a 	.word	0x300c9a0a
   2e1c0:	fe76f7eb 	.word	0xfe76f7eb
   2e1c4:	98032308 	.word	0x98032308
   2e1c8:	0102f247 	.word	0x0102f247
   2e1cc:	72457203 	.word	0x72457203
   2e1d0:	72c57285 	.word	0x72c57285
   2e1d4:	f4436823 	.word	0xf4436823
   2e1d8:	60230380 	.word	0x60230380
   2e1dc:	fe22f005 	.word	0xfe22f005
   2e1e0:	d1512800 	.word	0xd1512800
   2e1e4:	0200f44f 	.word	0x0200f44f
   2e1e8:	33fff04f 	.word	0x33fff04f
   2e1ec:	46384611 	.word	0x46384611
   2e1f0:	f904f004 	.word	0xf904f004
   2e1f4:	28004605 	.word	0x28004605
   2e1f8:	4638d13b 	.word	0x4638d13b
   2e1fc:	f96af004 	.word	0xf96af004
   2e200:	d04f2800 	.word	0xd04f2800
   2e204:	2b006843 	.word	0x2b006843
   2e208:	2200d04c 	.word	0x2200d04c
   2e20c:	6042461d 	.word	0x6042461d
   2e210:	9c0ae02f 	.word	0x9c0ae02f
   2e214:	f0049400 	.word	0xf0049400
   2e218:	4605f985 	.word	0x4605f985
   2e21c:	b0054628 	.word	0xb0054628
   2e220:	2100bdf0 	.word	0x2100bdf0
   2e224:	7835a803 	.word	0x7835a803
   2e228:	fde4f005 	.word	0xfde4f005
   2e22c:	2d01bb48 	.word	0x2d01bb48
   2e230:	4b26bf08 	.word	0x4b26bf08
   2e234:	0204f04f 	.word	0x0204f04f
   2e238:	701dbf08 	.word	0x701dbf08
   2e23c:	98032300 	.word	0x98032300
   2e240:	0101f247 	.word	0x0101f247
   2e244:	60c57243 	.word	0x60c57243
   2e248:	72c37283 	.word	0x72c37283
   2e24c:	68237202 	.word	0x68237202
   2e250:	0380f443 	.word	0x0380f443
   2e254:	f0056023 	.word	0xf0056023
   2e258:	4606fde5 	.word	0x4606fde5
   2e25c:	f44fb9a0 	.word	0xf44fb9a0
   2e260:	f04f0200 	.word	0xf04f0200
   2e264:	461133ff 	.word	0x461133ff
   2e268:	f0044638 	.word	0xf0044638
   2e26c:	4605f8c7 	.word	0x4605f8c7
   2e270:	6823b180 	.word	0x6823b180
   2e274:	202ae778 	.word	0x202ae778
   2e278:	fbfcf7f7 	.word	0xfbfcf7f7
   2e27c:	35fff04f 	.word	0x35fff04f
   2e280:	6823e77e 	.word	0x6823e77e
   2e284:	e76f250c 	.word	0xe76f250c
   2e288:	f0059803 	.word	0xf0059803
   2e28c:	2505fde1 	.word	0x2505fde1
   2e290:	e7696823 	.word	0xe7696823
   2e294:	f0044638 	.word	0xf0044638
   2e298:	b140f91d 	.word	0xb140f91d
   2e29c:	b1356845 	.word	0xb1356845
   2e2a0:	e7e66046 	.word	0xe7e66046
   2e2a4:	22044631 	.word	0x22044631
   2e2a8:	f7eb4809 	.word	0xf7eb4809
   2e2ac:	6823fe01 	.word	0x6823fe01
   2e2b0:	0380f423 	.word	0x0380f423
   2e2b4:	68236023 	.word	0x68236023
   2e2b8:	0300f423 	.word	0x0300f423
   2e2bc:	e75f6023 	.word	0xe75f6023
   2e2c0:	f7f72009 	.word	0xf7f72009
   2e2c4:	f04ffbd7 	.word	0xf04ffbd7
   2e2c8:	e75935ff 	.word	0xe75935ff
   2e2cc:	2002c1f5 	.word	0x2002c1f5
   2e2d0:	20024cc4 	.word	0x20024cc4

0002e2d4 <logobj_interface_getopt>:
   2e2d4:	2901b5f0 	.word	0x2901b5f0
   2e2d8:	9e08b083 	.word	0x9e08b083
   2e2dc:	461fd030 	.word	0x461fd030
   2e2e0:	2305f240 	.word	0x2305f240
   2e2e4:	d1344299 	.word	0xd1344299
   2e2e8:	f0044615 	.word	0xf0044615
   2e2ec:	2800f8f3 	.word	0x2800f8f3
   2e2f0:	2d01d037 	.word	0x2d01d037
   2e2f4:	2d02d015 	.word	0x2d02d015
   2e2f8:	b387d10b 	.word	0xb387d10b
   2e2fc:	b3736833 	.word	0xb3736833
   2e300:	22012300 	.word	0x22012300
   2e304:	491a4618 	.word	0x491a4618
   2e308:	70397809 	.word	0x70397809
   2e30c:	b0036032 	.word	0xb0036032
   2e310:	2009bdf0 	.word	0x2009bdf0
   2e314:	fbaef7f7 	.word	0xfbaef7f7
   2e318:	33fff04f 	.word	0x33fff04f
   2e31c:	b0034618 	.word	0xb0034618
   2e320:	b1e7bdf0 	.word	0xb1e7bdf0
   2e324:	2b036833 	.word	0x2b036833
   2e328:	4638d919 	.word	0x4638d919
   2e32c:	49112204 	.word	0x49112204
   2e330:	fdbef7eb 	.word	0xfdbef7eb
   2e334:	22042300 	.word	0x22042300
   2e338:	60324618 	.word	0x60324618
   2e33c:	bdf0b003 	.word	0xbdf0b003
   2e340:	f0049600 	.word	0xf0049600
   2e344:	4603f925 	.word	0x4603f925
   2e348:	d1e32800 	.word	0xd1e32800
   2e34c:	b0034618 	.word	0xb0034618
   2e350:	202abdf0 	.word	0x202abdf0
   2e354:	fb8ef7f7 	.word	0xfb8ef7f7
   2e358:	33fff04f 	.word	0x33fff04f
   2e35c:	2016e7de 	.word	0x2016e7de
   2e360:	2009e7d8 	.word	0x2009e7d8
   2e364:	fb86f7f7 	.word	0xfb86f7f7
   2e368:	33fff04f 	.word	0x33fff04f
   2e36c:	bf00e7d6 	.word	0xbf00e7d6
   2e370:	2002c1f6 	.word	0x2002c1f6
   2e374:	20024cc4 	.word	0x20024cc4

0002e378 <logobj_interface_close>:
   2e378:	4604b510 	.word	0x4604b510
   2e37c:	f8aaf004 	.word	0xf8aaf004
   2e380:	4620b138 	.word	0x4620b138
   2e384:	ffecf003 	.word	0xffecf003
   2e388:	4a052300 	.word	0x4a052300
   2e38c:	60134618 	.word	0x60134618
   2e390:	2009bd10 	.word	0x2009bd10
   2e394:	fb6ef7f7 	.word	0xfb6ef7f7
   2e398:	30fff04f 	.word	0x30fff04f
   2e39c:	bf00bd10 	.word	0xbf00bd10
   2e3a0:	20024cc8 	.word	0x20024cc8

0002e3a4 <transport_reset>:
   2e3a4:	47702000 	.word	0x47702000

0002e3a8 <transport_data_free>:
   2e3a8:	e9d34b0b 	.word	0xe9d34b0b
   2e3ac:	44132300 	.word	0x44132300
   2e3b0:	d20d4298 	.word	0xd20d4298
   2e3b4:	d80b4282 	.word	0xd80b4282
   2e3b8:	4604b510 	.word	0x4604b510
   2e3bc:	fff6f005 	.word	0xfff6f005
   2e3c0:	4a06b140 	.word	0x4a06b140
   2e3c4:	60026084 	.word	0x60026084
   2e3c8:	4010e8bd 	.word	0x4010e8bd
   2e3cc:	bf36f005 	.word	0xbf36f005
   2e3d0:	bb4cf00b 	.word	0xbb4cf00b
   2e3d4:	bf00bd10 	.word	0xbf00bd10
   2e3d8:	20024ccc 	.word	0x20024ccc
   2e3dc:	00020001 	.word	0x00020001

0002e3e0 <rpc_transport_ipc_init>:
   2e3e0:	d02b2800 	.word	0xd02b2800
   2e3e4:	b089b530 	.word	0xb089b530
   2e3e8:	4669aa01 	.word	0x4669aa01
   2e3ec:	f0054604 	.word	0xf0054604
   2e3f0:	4603fe3b 	.word	0x4603fe3b
   2e3f4:	4a13b140 	.word	0x4a13b140
   2e3f8:	0028f104 	.word	0x0028f104
   2e3fc:	e882c803 	.word	0xe882c803
   2e400:	46180003 	.word	0x46180003
   2e404:	bd30b009 	.word	0xbd30b009
   2e408:	1200e9dd 	.word	0x1200e9dd
   2e40c:	f0004620 	.word	0xf0004620
   2e410:	4603f9f1 	.word	0x4603f9f1
   2e414:	d1ee2800 	.word	0xd1ee2800
   2e418:	490c4b0b 	.word	0x490c4b0b
   2e41c:	4a0d480c 	.word	0x4a0d480c
   2e420:	4d0d9303 	.word	0x4d0d9303
   2e424:	91044b0d 	.word	0x91044b0d
   2e428:	490d9005 	.word	0x490d9005
   2e42c:	9307a802 	.word	0x9307a802
   2e430:	92029506 	.word	0x92029506
   2e434:	fb98f00a 	.word	0xfb98f00a
   2e438:	e7dc4603 	.word	0xe7dc4603
   2e43c:	4618230e 	.word	0x4618230e
   2e440:	bf004770 	.word	0xbf004770
   2e444:	20024ccc 	.word	0x20024ccc
   2e448:	0003433d 	.word	0x0003433d
   2e44c:	0003440d 	.word	0x0003440d
   2e450:	0002ee11 	.word	0x0002ee11
   2e454:	0003423d 	.word	0x0003423d
   2e458:	0002e3a9 	.word	0x0002e3a9
   2e45c:	0002e3a5 	.word	0x0002e3a5
   2e460:	20024cd4 	.word	0x20024cd4

0002e464 <rpc_transport_rx_handle>:
   2e464:	b508b160 	.word	0xb508b160
   2e468:	b2db6843 	.word	0xb2db6843
   2e46c:	d00e2b02 	.word	0xd00e2b02
   2e470:	0c1b6803 	.word	0x0c1b6803
   2e474:	d0052b02 	.word	0xd0052b02
   2e478:	d00e2b04 	.word	0xd00e2b04
   2e47c:	bd082000 	.word	0xbd082000
   2e480:	47702000 	.word	0x47702000
   2e484:	f00b6880 	.word	0xf00b6880
   2e488:	2000faf1 	.word	0x2000faf1
   2e48c:	4601bd08 	.word	0x4601bd08
   2e490:	4008e8bd 	.word	0x4008e8bd
   2e494:	f00a4803 	.word	0xf00a4803
   2e498:	4802ba59 	.word	0x4802ba59
   2e49c:	fbc4f00a 	.word	0xfbc4f00a
   2e4a0:	bd082000 	.word	0xbd082000
   2e4a4:	20024cd4 	.word	0x20024cd4
   2e4a8:	bf004770 	.word	0xbf004770

0002e4ac <rpc_transport_ipc_fault_handler>:
   2e4ac:	b94ef000 	.word	0xb94ef000

0002e4b0 <rpc_transport_ipc_shutdown>:
   2e4b0:	f005b508 	.word	0xf005b508
   2e4b4:	f000ffb5 	.word	0xf000ffb5
   2e4b8:	f005fce1 	.word	0xf005fce1
   2e4bc:	e8bdffb7 	.word	0xe8bdffb7
   2e4c0:	f0004008 	.word	0xf0004008
   2e4c4:	bf00bcfb 	.word	0xbf00bcfb

0002e4c8 <nrf_socket>:
   2e4c8:	4604b570 	.word	0x4604b570
   2e4cc:	4616460d 	.word	0x4616460d
   2e4d0:	fa02f007 	.word	0xfa02f007
   2e4d4:	6803b130 	.word	0x6803b130
   2e4d8:	46294632 	.word	0x46294632
   2e4dc:	e8bd4620 	.word	0xe8bd4620
   2e4e0:	47184070 	.word	0x47184070
   2e4e4:	30fff04f 	.word	0x30fff04f
   2e4e8:	bf00bd70 	.word	0xbf00bd70

0002e4ec <nrf_close>:
   2e4ec:	4604b510 	.word	0x4604b510
   2e4f0:	fa46f007 	.word	0xfa46f007
   2e4f4:	6843b120 	.word	0x6843b120
   2e4f8:	e8bd4620 	.word	0xe8bd4620
   2e4fc:	47184010 	.word	0x47184010
   2e500:	30fff04f 	.word	0x30fff04f
   2e504:	bf00bd10 	.word	0xbf00bd10

0002e508 <nrf_sendto>:
   2e508:	47f0e92d 	.word	0x47f0e92d
   2e50c:	e9dd460d 	.word	0xe9dd460d
   2e510:	46168908 	.word	0x46168908
   2e514:	4604461f 	.word	0x4604461f
   2e518:	fa32f007 	.word	0xfa32f007
   2e51c:	e9cdb158 	.word	0xe9cdb158
   2e520:	f8d08908 	.word	0xf8d08908
   2e524:	463be008 	.word	0x463be008
   2e528:	46294632 	.word	0x46294632
   2e52c:	46f44620 	.word	0x46f44620
   2e530:	47f0e8bd 	.word	0x47f0e8bd
   2e534:	f04f4760 	.word	0xf04f4760
   2e538:	e8bd30ff 	.word	0xe8bd30ff
   2e53c:	bf0087f0 	.word	0xbf0087f0

0002e540 <nrf_send>:
   2e540:	41f0e92d 	.word	0x41f0e92d
   2e544:	460eb082 	.word	0x460eb082
   2e548:	46984617 	.word	0x46984617
   2e54c:	f0074605 	.word	0xf0074605
   2e550:	b160fa17 	.word	0xb160fa17
   2e554:	20004604 	.word	0x20004604
   2e558:	0000e9cd 	.word	0x0000e9cd
   2e55c:	463a4643 	.word	0x463a4643
   2e560:	46284631 	.word	0x46284631
   2e564:	47a068a4 	.word	0x47a068a4
   2e568:	e8bdb002 	.word	0xe8bdb002
   2e56c:	f04f81f0 	.word	0xf04f81f0
   2e570:	e7f930ff 	.word	0xe7f930ff

0002e574 <nrf_write>:
   2e574:	b083b5f0 	.word	0xb083b5f0
   2e578:	4617460e 	.word	0x4617460e
   2e57c:	f0074605 	.word	0xf0074605
   2e580:	b150f9ff 	.word	0xb150f9ff
   2e584:	46042300 	.word	0x46042300
   2e588:	3300e9cd 	.word	0x3300e9cd
   2e58c:	4631463a 	.word	0x4631463a
   2e590:	68a44628 	.word	0x68a44628
   2e594:	b00347a0 	.word	0xb00347a0
   2e598:	f04fbdf0 	.word	0xf04fbdf0
   2e59c:	e7fa30ff 	.word	0xe7fa30ff

0002e5a0 <nrf_recvfrom>:
   2e5a0:	47f0e92d 	.word	0x47f0e92d
   2e5a4:	e9dd460d 	.word	0xe9dd460d
   2e5a8:	46168908 	.word	0x46168908
   2e5ac:	4604461f 	.word	0x4604461f
   2e5b0:	f9e6f007 	.word	0xf9e6f007
   2e5b4:	e9cdb158 	.word	0xe9cdb158
   2e5b8:	f8d08908 	.word	0xf8d08908
   2e5bc:	463be00c 	.word	0x463be00c
   2e5c0:	46294632 	.word	0x46294632
   2e5c4:	46f44620 	.word	0x46f44620
   2e5c8:	47f0e8bd 	.word	0x47f0e8bd
   2e5cc:	f04f4760 	.word	0xf04f4760
   2e5d0:	e8bd30ff 	.word	0xe8bd30ff
   2e5d4:	bf0087f0 	.word	0xbf0087f0

0002e5d8 <nrf_recv>:
   2e5d8:	41f0e92d 	.word	0x41f0e92d
   2e5dc:	460eb082 	.word	0x460eb082
   2e5e0:	46984617 	.word	0x46984617
   2e5e4:	f0074605 	.word	0xf0074605
   2e5e8:	b160f9cb 	.word	0xb160f9cb
   2e5ec:	20004604 	.word	0x20004604
   2e5f0:	0000e9cd 	.word	0x0000e9cd
   2e5f4:	463a4643 	.word	0x463a4643
   2e5f8:	46284631 	.word	0x46284631
   2e5fc:	47a068e4 	.word	0x47a068e4
   2e600:	e8bdb002 	.word	0xe8bdb002
   2e604:	f04f81f0 	.word	0xf04f81f0
   2e608:	e7f930ff 	.word	0xe7f930ff

0002e60c <nrf_read>:
   2e60c:	b083b5f0 	.word	0xb083b5f0
   2e610:	4617460e 	.word	0x4617460e
   2e614:	f0074605 	.word	0xf0074605
   2e618:	b150f9b3 	.word	0xb150f9b3
   2e61c:	46042300 	.word	0x46042300
   2e620:	3300e9cd 	.word	0x3300e9cd
   2e624:	4631463a 	.word	0x4631463a
   2e628:	68e44628 	.word	0x68e44628
   2e62c:	b00347a0 	.word	0xb00347a0
   2e630:	f04fbdf0 	.word	0xf04fbdf0
   2e634:	e7fa30ff 	.word	0xe7fa30ff

0002e638 <nrf_connect>:
   2e638:	460db570 	.word	0x460db570
   2e63c:	46044616 	.word	0x46044616
   2e640:	f99ef007 	.word	0xf99ef007
   2e644:	6943b130 	.word	0x6943b130
   2e648:	46294632 	.word	0x46294632
   2e64c:	e8bd4620 	.word	0xe8bd4620
   2e650:	47184070 	.word	0x47184070
   2e654:	30fff04f 	.word	0x30fff04f
   2e658:	bf00bd70 	.word	0xbf00bd70

0002e65c <nrf_listen>:
   2e65c:	460db570 	.word	0x460db570
   2e660:	f0074604 	.word	0xf0074604
   2e664:	b128f98d 	.word	0xb128f98d
   2e668:	46296983 	.word	0x46296983
   2e66c:	e8bd4620 	.word	0xe8bd4620
   2e670:	47184070 	.word	0x47184070
   2e674:	30fff04f 	.word	0x30fff04f
   2e678:	bf00bd70 	.word	0xbf00bd70

0002e67c <nrf_accept>:
   2e67c:	41f0e92d 	.word	0x41f0e92d
   2e680:	4616460d 	.word	0x4616460d
   2e684:	f0074604 	.word	0xf0074604
   2e688:	b140f97b 	.word	0xb140f97b
   2e68c:	463269c7 	.word	0x463269c7
   2e690:	46204629 	.word	0x46204629
   2e694:	e8bd46bc 	.word	0xe8bd46bc
   2e698:	230041f0 	.word	0x230041f0
   2e69c:	f04f4760 	.word	0xf04f4760
   2e6a0:	e8bd30ff 	.word	0xe8bd30ff
   2e6a4:	bf0081f0 	.word	0xbf0081f0

0002e6a8 <nrf_bind>:
   2e6a8:	460db570 	.word	0x460db570
   2e6ac:	46044616 	.word	0x46044616
   2e6b0:	f966f007 	.word	0xf966f007
   2e6b4:	6903b130 	.word	0x6903b130
   2e6b8:	46294632 	.word	0x46294632
   2e6bc:	e8bd4620 	.word	0xe8bd4620
   2e6c0:	47184070 	.word	0x47184070
   2e6c4:	30fff04f 	.word	0x30fff04f
   2e6c8:	bf00bd70 	.word	0xbf00bd70

0002e6cc <nrf_setsockopt>:
   2e6cc:	41f0e92d 	.word	0x41f0e92d
   2e6d0:	8018f8dd 	.word	0x8018f8dd
   2e6d4:	4616460d 	.word	0x4616460d
   2e6d8:	4604461f 	.word	0x4604461f
   2e6dc:	f950f007 	.word	0xf950f007
   2e6e0:	f8cdb158 	.word	0xf8cdb158
   2e6e4:	f8d08018 	.word	0xf8d08018
   2e6e8:	463be020 	.word	0x463be020
   2e6ec:	46294632 	.word	0x46294632
   2e6f0:	46f44620 	.word	0x46f44620
   2e6f4:	41f0e8bd 	.word	0x41f0e8bd
   2e6f8:	f04f4760 	.word	0xf04f4760
   2e6fc:	e8bd30ff 	.word	0xe8bd30ff
   2e700:	bf0081f0 	.word	0xbf0081f0

0002e704 <nrf_getsockopt>:
   2e704:	41f0e92d 	.word	0x41f0e92d
   2e708:	8018f8dd 	.word	0x8018f8dd
   2e70c:	4616460d 	.word	0x4616460d
   2e710:	4604461f 	.word	0x4604461f
   2e714:	f934f007 	.word	0xf934f007
   2e718:	f8cdb158 	.word	0xf8cdb158
   2e71c:	f8d08018 	.word	0xf8d08018
   2e720:	463be024 	.word	0x463be024
   2e724:	46294632 	.word	0x46294632
   2e728:	46f44620 	.word	0x46f44620
   2e72c:	41f0e8bd 	.word	0x41f0e8bd
   2e730:	f04f4760 	.word	0xf04f4760
   2e734:	e8bd30ff 	.word	0xe8bd30ff
   2e738:	bf0081f0 	.word	0xbf0081f0

0002e73c <nrf_getaddrinfo>:
   2e73c:	ba1ef00d 	.word	0xba1ef00d

0002e740 <nrf_freeaddrinfo>:
   2e740:	ba1ef00d 	.word	0xba1ef00d

0002e744 <nrf_poll>:
   2e744:	ba1ef00d 	.word	0xba1ef00d

0002e748 <nrf_fcntl>:
   2e748:	ba76f00d 	.word	0xba76f00d

0002e74c <bsd_platform_error_handler>:
   2e74c:	f018b508 	.word	0xf018b508
   2e750:	bd08fc7f 	.word	0xbd08fc7f

0002e754 <bsd_init>:
   2e754:	4c06b510 	.word	0x4c06b510
   2e758:	b92b7823 	.word	0xb92b7823
   2e75c:	f844f007 	.word	0xf844f007
   2e760:	2301b908 	.word	0x2301b908
   2e764:	bd107023 	.word	0xbd107023
   2e768:	30fff04f 	.word	0x30fff04f
   2e76c:	bf00bd10 	.word	0xbf00bd10
   2e770:	2002c1f7 	.word	0x2002c1f7

0002e774 <bsd_shutdown>:
   2e774:	4c05b510 	.word	0x4c05b510
   2e778:	b1237823 	.word	0xb1237823
   2e77c:	f8a0f007 	.word	0xf8a0f007
   2e780:	7020b900 	.word	0x7020b900
   2e784:	f04fbd10 	.word	0xf04fbd10
   2e788:	bd1030ff 	.word	0xbd1030ff
   2e78c:	2002c1f7 	.word	0x2002c1f7

0002e790 <symbol_000fa2a>:
   2e790:	2300b110 	.word	0x2300b110
   2e794:	3300e9c0 	.word	0x3300e9c0
   2e798:	bf004770 	.word	0xbf004770

0002e79c <symbol_00066b4>:
   2e79c:	d0052802 	.word	0xd0052802
   2e7a0:	28034b03 	.word	0x28034b03
   2e7a4:	4618bf0c 	.word	0x4618bf0c
   2e7a8:	47702000 	.word	0x47702000
   2e7ac:	47704801 	.word	0x47704801
   2e7b0:	0004b4a4 	.word	0x0004b4a4
   2e7b4:	0004b474 	.word	0x0004b474

0002e7b8 <symbol_000194a>:
   2e7b8:	b159b160 	.word	0xb159b160
   2e7bc:	6806b570 	.word	0x6806b570
   2e7c0:	6a4bb966 	.word	0x6a4bb966
   2e7c4:	460d4604 	.word	0x460d4604
   2e7c8:	60604798 	.word	0x60604798
   2e7cc:	6025b120 	.word	0x6025b120
   2e7d0:	bd704630 	.word	0xbd704630
   2e7d4:	47704802 	.word	0x47704802
   2e7d8:	bd704802 	.word	0xbd704802
   2e7dc:	bd704800 	.word	0xbd704800
   2e7e0:	ffffc180 	.word	0xffffc180
   2e7e4:	ffffc080 	.word	0xffffc080

0002e7e8 <symbol_00005ae>:
   2e7e8:	6800b110 	.word	0x6800b110
   2e7ec:	7800b100 	.word	0x7800b100
   2e7f0:	bf004770 	.word	0xbf004770

0002e7f4 <rpc_transport_ipc_rx_init>:
   2e7f4:	f0002800 	.word	0xf0002800
   2e7f8:	e92d80ff 	.word	0xe92d80ff
   2e7fc:	68054ff0 	.word	0x68054ff0
   2e800:	2d00b095 	.word	0x2d00b095
   2e804:	80eef000 	.word	0x80eef000
   2e808:	2b006883 	.word	0x2b006883
   2e80c:	80eaf000 	.word	0x80eaf000
   2e810:	2f006907 	.word	0x2f006907
   2e814:	80e6f000 	.word	0x80e6f000
   2e818:	2c006a84 	.word	0x2c006a84
   2e81c:	80e2f000 	.word	0x80e2f000
   2e820:	2c1b6844 	.word	0x2c1b6844
   2e824:	80e3f240 	.word	0x80e3f240
   2e828:	2c0b68c4 	.word	0x2c0b68c4
   2e82c:	80dff240 	.word	0x80dff240
   2e830:	e014f8d0 	.word	0xe014f8d0
   2e834:	0f17f1be 	.word	0x0f17f1be
   2e838:	80d9f240 	.word	0x80d9f240
   2e83c:	46042600 	.word	0x46042600
   2e840:	e9cd486f 	.word	0xe9cd486f
   2e844:	f8df1200 	.word	0xf8df1200
   2e848:	496ea1d8 	.word	0x496ea1d8
   2e84c:	6ba08006 	.word	0x6ba08006
   2e850:	c1d0f8df 	.word	0xc1d0f8df
   2e854:	81d0f8df 	.word	0x81d0f8df
   2e858:	b1d0f8df 	.word	0xb1d0f8df
   2e85c:	91d0f8df 	.word	0x91d0f8df
   2e860:	600e4672 	.word	0x600e4672
   2e864:	0000f8ca 	.word	0x0000f8ca
   2e868:	46384631 	.word	0x46384631
   2e86c:	6000f8cc 	.word	0x6000f8cc
   2e870:	3000f8cb 	.word	0x3000f8cb
   2e874:	6000f8c8 	.word	0x6000f8c8
   2e878:	6000f8c9 	.word	0x6000f8c9
   2e87c:	fbdcf012 	.word	0xfbdcf012
   2e880:	463869e3 	.word	0x463869e3
   2e884:	69a3603b 	.word	0x69a3603b
   2e888:	f001607b 	.word	0xf001607b
   2e88c:	2201fddb 	.word	0x2201fddb
   2e890:	0c04f04f 	.word	0x0c04f04f
   2e894:	495d4b5c 	.word	0x495d4b5c
   2e898:	5610f8c3 	.word	0x5610f8c3
   2e89c:	20806809 	.word	0x20806809
   2e8a0:	495b9104 	.word	0x495b9104
   2e8a4:	e010f8dd 	.word	0xe010f8dd
   2e8a8:	6614f8c3 	.word	0x6614f8c3
   2e8ac:	702e6809 	.word	0x702e6809
   2e8b0:	706e9103 	.word	0x706e9103
   2e8b4:	70aa70ee 	.word	0x70aa70ee
   2e8b8:	6aa19903 	.word	0x6aa19903
   2e8bc:	e000f8db 	.word	0xe000f8db
   2e8c0:	6ae16069 	.word	0x6ae16069
   2e8c4:	60a99c01 	.word	0x60a99c01
   2e8c8:	9c0060ec 	.word	0x9c0060ec
   2e8cc:	61af4951 	.word	0x61af4951
   2e8d0:	e014f8c5 	.word	0xe014f8c5
   2e8d4:	f8c3612c 	.word	0xf8c3612c
   2e8d8:	680c2590 	.word	0x680c2590
   2e8dc:	6192f5a1 	.word	0x6192f5a1
   2e8e0:	9c059405 	.word	0x9c059405
   2e8e4:	c598f8c3 	.word	0xc598f8c3
   2e8e8:	4498f8d1 	.word	0x4498f8d1
   2e8ec:	6780f44f 	.word	0x6780f44f
   2e8f0:	9c069406 	.word	0x9c069406
   2e8f4:	f8c32410 	.word	0xf8c32410
   2e8f8:	f8d145a0 	.word	0xf8d145a0
   2e8fc:	4d4644a0 	.word	0x4d4644a0
   2e900:	9c079407 	.word	0x9c079407
   2e904:	f8c32440 	.word	0xf8c32440
   2e908:	f8d145a8 	.word	0xf8d145a8
   2e90c:	940844a8 	.word	0x940844a8
   2e910:	f8c39c08 	.word	0xf8c39c08
   2e914:	f8d105ac 	.word	0xf8d105ac
   2e918:	900904ac 	.word	0x900904ac
   2e91c:	f8c39809 	.word	0xf8c39809
   2e920:	68086100 	.word	0x68086100
   2e924:	980a900a 	.word	0x980a900a
   2e928:	6108f8c3 	.word	0x6108f8c3
   2e92c:	900b6888 	.word	0x900b6888
   2e930:	f8c3980b 	.word	0xf8c3980b
   2e934:	69086110 	.word	0x69086110
   2e938:	980c900c 	.word	0x980c900c
   2e93c:	6118f8c3 	.word	0x6118f8c3
   2e940:	900d6988 	.word	0x900d6988
   2e944:	f8c3980d 	.word	0xf8c3980d
   2e948:	69c8611c 	.word	0x69c8611c
   2e94c:	7101f501 	.word	0x7101f501
   2e950:	980e900e 	.word	0x980e900e
   2e954:	0304f8d3 	.word	0x0304f8d3
   2e958:	f8c34310 	.word	0xf8c34310
   2e95c:	680c0304 	.word	0x680c0304
   2e960:	940f482e 	.word	0x940f482e
   2e964:	f8d39c0f 	.word	0xf8d39c0f
   2e968:	ea444304 	.word	0xea444304
   2e96c:	f8c3040c 	.word	0xf8c3040c
   2e970:	680c4304 	.word	0x680c4304
   2e974:	9c109410 	.word	0x9c109410
   2e978:	4304f8d3 	.word	0x4304f8d3
   2e97c:	0410f044 	.word	0x0410f044
   2e980:	4304f8c3 	.word	0x4304f8c3
   2e984:	9411680c 	.word	0x9411680c
   2e988:	f8d39c11 	.word	0xf8d39c11
   2e98c:	f0444304 	.word	0xf0444304
   2e990:	f8c30440 	.word	0xf8c30440
   2e994:	680c4304 	.word	0x680c4304
   2e998:	9c129412 	.word	0x9c129412
   2e99c:	4304f8d3 	.word	0x4304f8d3
   2e9a0:	0480f044 	.word	0x0480f044
   2e9a4:	4304f8c3 	.word	0x4304f8c3
   2e9a8:	3000f8da 	.word	0x3000f8da
   2e9ac:	015b6809 	.word	0x015b6809
   2e9b0:	b2db9113 	.word	0xb2db9113
   2e9b4:	f8c89913 	.word	0xf8c89913
   2e9b8:	f8802000 	.word	0xf8802000
   2e9bc:	f8c0332a 	.word	0xf8c0332a
   2e9c0:	60477184 	.word	0x60477184
   2e9c4:	f8c59602 	.word	0xf8c59602
   2e9c8:	f8d56610 	.word	0xf8d56610
   2e9cc:	93023610 	.word	0x93023610
   2e9d0:	f8d89b02 	.word	0xf8d89b02
   2e9d4:	2b013000 	.word	0x2b013000
   2e9d8:	f8d9d0fb 	.word	0xf8d9d0fb
   2e9dc:	b0150000 	.word	0xb0150000
   2e9e0:	8ff0e8bd 	.word	0x8ff0e8bd
   2e9e4:	000ef24c 	.word	0x000ef24c
   2e9e8:	e8bdb015 	.word	0xe8bdb015
   2e9ec:	f24c8ff0 	.word	0xf24c8ff0
   2e9f0:	b0150009 	.word	0xb0150009
   2e9f4:	8ff0e8bd 	.word	0x8ff0e8bd
   2e9f8:	000ef24c 	.word	0x000ef24c
   2e9fc:	bf004770 	.word	0xbf004770
   2ea00:	2002a6cc 	.word	0x2002a6cc
   2ea04:	20024ce4 	.word	0x20024ce4
   2ea08:	4002a000 	.word	0x4002a000
   2ea0c:	4002a610 	.word	0x4002a610
   2ea10:	4002a614 	.word	0x4002a614
   2ea14:	4002a590 	.word	0x4002a590
   2ea18:	40005000 	.word	0x40005000
   2ea1c:	e000e100 	.word	0xe000e100
   2ea20:	20024cdc 	.word	0x20024cdc
   2ea24:	20024ce8 	.word	0x20024ce8
   2ea28:	20024ce0 	.word	0x20024ce0
   2ea2c:	20024cec 	.word	0x20024cec
   2ea30:	20024cd8 	.word	0x20024cd8

0002ea34 <IPC_IRQHandler>:
   2ea34:	4ff0e92d 	.word	0x4ff0e92d
   2ea38:	6580f44f 	.word	0x6580f44f
   2ea3c:	b0874ca7 	.word	0xb0874ca7
   2ea40:	5084f8c4 	.word	0x5084f8c4
   2ea44:	8f4ff3bf 	.word	0x8f4ff3bf
   2ea48:	8f6ff3bf 	.word	0x8f6ff3bf
   2ea4c:	f8c44ea4 	.word	0xf8c44ea4
   2ea50:	f8d65184 	.word	0xf8d65184
   2ea54:	061f330c 	.word	0x061f330c
   2ea58:	80c8f100 	.word	0x80c8f100
   2ea5c:	f8d34ba0 	.word	0xf8d34ba0
   2ea60:	07d0230c 	.word	0x07d0230c
   2ea64:	80d4f100 	.word	0x80d4f100
   2ea68:	230cf8d3 	.word	0x230cf8d3
   2ea6c:	0240f012 	.word	0x0240f012
   2ea70:	80b6f040 	.word	0x80b6f040
   2ea74:	130cf8d3 	.word	0x130cf8d3
   2ea78:	f1000749 	.word	0xf1000749
   2ea7c:	f8d380e6 	.word	0xf8d380e6
   2ea80:	06da330c 	.word	0x06da330c
   2ea84:	809df140 	.word	0x809df140
   2ea88:	4a952100 	.word	0x4a952100
   2ea8c:	f8c24b95 	.word	0xf8c24b95
   2ea90:	681b1110 	.word	0x681b1110
   2ea94:	9b049304 	.word	0x9b049304
   2ea98:	8270f8df 	.word	0x8270f8df
   2ea9c:	f8df4f92 	.word	0xf8df4f92
   2eaa0:	f8d89270 	.word	0xf8d89270
   2eaa4:	f8daa000 	.word	0xf8daa000
   2eaa8:	29001000 	.word	0x29001000
   2eaac:	2200d03f 	.word	0x2200d03f
   2eab0:	e0024614 	.word	0xe0024614
   2eab4:	428c3401 	.word	0x428c3401
   2eab8:	eb0ad227 	.word	0xeb0ad227
   2eabc:	68ab05c4 	.word	0x68ab05c4
   2eac0:	d0f72b00 	.word	0xd0f72b00
   2eac4:	b2f6686e 	.word	0xb2f6686e
   2eac8:	d1f32e01 	.word	0xd1f32e01
   2eacc:	f8b96868 	.word	0xf8b96868
   2ead0:	ebb33000 	.word	0xebb33000
   2ead4:	d1ed4f10 	.word	0xd1ed4f10
   2ead8:	3301686a 	.word	0x3301686a
   2eadc:	02fff022 	.word	0x02fff022
   2eae0:	0202f042 	.word	0x0202f042
   2eae4:	68a8606a 	.word	0x68a8606a
   2eae8:	3000f8a9 	.word	0x3000f8a9
   2eaec:	fcbaf7ff 	.word	0xfcbaf7ff
   2eaf0:	b9284632 	.word	0xb9284632
   2eaf4:	f023686b 	.word	0xf023686b
   2eaf8:	f04303ff 	.word	0xf04303ff
   2eafc:	606b0303 	.word	0x606b0303
   2eb00:	1000f8da 	.word	0x1000f8da
   2eb04:	428c3401 	.word	0x428c3401
   2eb08:	2a00d3d7 	.word	0x2a00d3d7
   2eb0c:	b171d1cd 	.word	0xb171d1cd
   2eb10:	eb0a4613 	.word	0xeb0a4613
   2eb14:	689002c3 	.word	0x689002c3
   2eb18:	b1303301 	.word	0xb1303301
   2eb1c:	b004f8d2 	.word	0xb004f8d2
   2eb20:	fb8bfa5f 	.word	0xfb8bfa5f
   2eb24:	0f01f1bb 	.word	0x0f01f1bb
   2eb28:	428bd003 	.word	0x428bd003
   2eb2c:	f04fd1f1 	.word	0xf04fd1f1
   2eb30:	f8d70b00 	.word	0xf8d70b00
   2eb34:	f8daa000 	.word	0xf8daa000
   2eb38:	2a002000 	.word	0x2a002000
   2eb3c:	2100d03d 	.word	0x2100d03d
   2eb40:	e002460c 	.word	0xe002460c
   2eb44:	42943401 	.word	0x42943401
   2eb48:	eb0ad227 	.word	0xeb0ad227
   2eb4c:	68ab05c4 	.word	0x68ab05c4
   2eb50:	d0f72b00 	.word	0xd0f72b00
   2eb54:	b2f6686e 	.word	0xb2f6686e
   2eb58:	d1f32e01 	.word	0xd1f32e01
   2eb5c:	f8b96868 	.word	0xf8b96868
   2eb60:	ebb33000 	.word	0xebb33000
   2eb64:	d1ed4f10 	.word	0xd1ed4f10
   2eb68:	3301686a 	.word	0x3301686a
   2eb6c:	02fff022 	.word	0x02fff022
   2eb70:	0202f042 	.word	0x0202f042
   2eb74:	68a8606a 	.word	0x68a8606a
   2eb78:	3000f8a9 	.word	0x3000f8a9
   2eb7c:	fc72f7ff 	.word	0xfc72f7ff
   2eb80:	b9284631 	.word	0xb9284631
   2eb84:	f022686a 	.word	0xf022686a
   2eb88:	f04303ff 	.word	0xf04303ff
   2eb8c:	606b0303 	.word	0x606b0303
   2eb90:	2000f8da 	.word	0x2000f8da
   2eb94:	42943401 	.word	0x42943401
   2eb98:	2900d3d7 	.word	0x2900d3d7
   2eb9c:	b162d1cd 	.word	0xb162d1cd
   2eba0:	eb0a460b 	.word	0xeb0a460b
   2eba4:	688801c3 	.word	0x688801c3
   2eba8:	b1203301 	.word	0xb1203301
   2ebac:	b2c96849 	.word	0xb2c96849
   2ebb0:	f43f2901 	.word	0xf43f2901
   2ebb4:	4293af76 	.word	0x4293af76
   2ebb8:	f1bbd1f3 	.word	0xf1bbd1f3
   2ebbc:	f47f0f00 	.word	0xf47f0f00
   2ebc0:	f44faf70 	.word	0xf44faf70
   2ebc4:	4b496180 	.word	0x4b496180
   2ebc8:	681b4a44 	.word	0x681b4a44
   2ebcc:	b2db015b 	.word	0xb2db015b
   2ebd0:	332af882 	.word	0x332af882
   2ebd4:	1184f8c2 	.word	0x1184f8c2
   2ebd8:	b0076051 	.word	0xb0076051
   2ebdc:	8ff0e8bd 	.word	0x8ff0e8bd
   2ebe0:	4b432206 	.word	0x4b432206
   2ebe4:	b007601a 	.word	0xb007601a
   2ebe8:	8ff0e8bd 	.word	0x8ff0e8bd
   2ebec:	fd12f001 	.word	0xfd12f001
   2ebf0:	fe7ef001 	.word	0xfe7ef001
   2ebf4:	d1492800 	.word	0xd1492800
   2ebf8:	f8c64b3e 	.word	0xf8c64b3e
   2ebfc:	681b011c 	.word	0x681b011c
   2ec00:	9b019301 	.word	0x9b019301
   2ec04:	f8d34b36 	.word	0xf8d34b36
   2ec08:	07d0230c 	.word	0x07d0230c
   2ec0c:	af2cf57f 	.word	0xaf2cf57f
   2ec10:	f2482000 	.word	0xf2482000
   2ec14:	49380202 	.word	0x49380202
   2ec18:	0100f8c3 	.word	0x0100f8c3
   2ec1c:	91026809 	.word	0x91026809
   2ec20:	f8d39902 	.word	0xf8d39902
   2ec24:	42933614 	.word	0x42933614
   2ec28:	d81ed040 	.word	0xd81ed040
   2ec2c:	d04f2b00 	.word	0xd04f2b00
   2ec30:	d9422b02 	.word	0xd9422b02
   2ec34:	0201f248 	.word	0x0201f248
   2ec38:	d1494293 	.word	0xd1494293
   2ec3c:	22072003 	.word	0x22072003
   2ec40:	4b2e492b 	.word	0x4b2e492b
   2ec44:	601a6008 	.word	0x601a6008
   2ec48:	4d29e7cd 	.word	0x4d29e7cd
   2ec4c:	f8c36829 	.word	0xf8c36829
   2ec50:	29012108 	.word	0x29012108
   2ec54:	d05d492a 	.word	0xd05d492a
   2ec58:	9203680a 	.word	0x9203680a
   2ec5c:	f8d39a03 	.word	0xf8d39a03
   2ec60:	06db330c 	.word	0x06db330c
   2ec64:	af10f53f 	.word	0xaf10f53f
   2ec68:	4a26e716 	.word	0x4a26e716
   2ec6c:	d8144293 	.word	0xd8144293
   2ec70:	6f88f1b3 	.word	0x6f88f1b3
   2ec74:	f248d814 	.word	0xf248d814
   2ec78:	42930203 	.word	0x42930203
   2ec7c:	2003d128 	.word	0x2003d128
   2ec80:	491b2204 	.word	0x491b2204
   2ec84:	60084b1d 	.word	0x60084b1d
   2ec88:	e7ac601a 	.word	0xe7ac601a
   2ec8c:	f88423e0 	.word	0xf88423e0
   2ec90:	6065332a 	.word	0x6065332a
   2ec94:	e8bdb007 	.word	0xe8bdb007
   2ec98:	4a1b8ff0 	.word	0x4a1b8ff0
   2ec9c:	d1174293 	.word	0xd1174293
   2eca0:	49132003 	.word	0x49132003
   2eca4:	60084a15 	.word	0x60084a15
   2eca8:	e79c6013 	.word	0xe79c6013
   2ecac:	22062003 	.word	0x22062003
   2ecb0:	4b12490f 	.word	0x4b12490f
   2ecb4:	601a6008 	.word	0x601a6008
   2ecb8:	2303e795 	.word	0x2303e795
   2ecbc:	490c4618 	.word	0x490c4618
   2ecc0:	600b4a0e 	.word	0x600b4a0e
   2ecc4:	b0076013 	.word	0xb0076013
   2ecc8:	4ff0e8bd 	.word	0x4ff0e8bd
   2eccc:	bbeef7ff 	.word	0xbbeef7ff
   2ecd0:	49072303 	.word	0x49072303
   2ecd4:	600b4a09 	.word	0x600b4a09
   2ecd8:	e7846013 	.word	0xe7846013
   2ecdc:	e000e100 	.word	0xe000e100
   2ece0:	4002a000 	.word	0x4002a000
   2ece4:	4002a110 	.word	0x4002a110
   2ece8:	20024ce4 	.word	0x20024ce4
   2ecec:	20024cdc 	.word	0x20024cdc
   2ecf0:	20024ce0 	.word	0x20024ce0
   2ecf4:	4002a11c 	.word	0x4002a11c
   2ecf8:	4002a100 	.word	0x4002a100
   2ecfc:	20024cd8 	.word	0x20024cd8
   2ed00:	4002a108 	.word	0x4002a108
   2ed04:	04400004 	.word	0x04400004
   2ed08:	05500001 	.word	0x05500001
   2ed0c:	20024ce8 	.word	0x20024ce8
   2ed10:	2002a6cc 	.word	0x2002a6cc
   2ed14:	680b4a37 	.word	0x680b4a37
   2ed18:	93056812 	.word	0x93056812
   2ed1c:	48366893 	.word	0x48366893
   2ed20:	60034936 	.word	0x60034936
   2ed24:	9a056854 	.word	0x9a056854
   2ed28:	b16b600c 	.word	0xb16b600c
   2ed2c:	681bb164 	.word	0x681bb164
   2ed30:	d8022b10 	.word	0xd8022b10
   2ed34:	2a106822 	.word	0x2a106822
   2ed38:	2103d90c 	.word	0x2103d90c
   2ed3c:	0206f24c 	.word	0x0206f24c
   2ed40:	60294b2f 	.word	0x60294b2f
   2ed44:	e74e601a 	.word	0xe74e601a
   2ed48:	22102103 	.word	0x22102103
   2ed4c:	60294b2c 	.word	0x60294b2c
   2ed50:	e748601a 	.word	0xe748601a
   2ed54:	80b4f8df 	.word	0x80b4f8df
   2ed58:	d0422a00 	.word	0xd0422a00
   2ed5c:	f1042300 	.word	0xf1042300
   2ed60:	461e0904 	.word	0x461e0904
   2ed64:	3601e002 	.word	0x3601e002
   2ed68:	d22a4296 	.word	0xd22a4296
   2ed6c:	19e100f7 	.word	0x19e100f7
   2ed70:	28006888 	.word	0x28006888
   2ed74:	f8d1d0f7 	.word	0xf8d1d0f7
   2ed78:	fa5fa004 	.word	0xfa5fa004
   2ed7c:	f1bafa8a 	.word	0xf1bafa8a
   2ed80:	d1f00f01 	.word	0xd1f00f01
   2ed84:	c004f8d1 	.word	0xc004f8d1
   2ed88:	0000f8b8 	.word	0x0000f8b8
   2ed8c:	4f1cebb0 	.word	0x4f1cebb0
   2ed90:	684bd1e9 	.word	0x684bd1e9
   2ed94:	f0231c42 	.word	0xf0231c42
   2ed98:	f04303ff 	.word	0xf04303ff
   2ed9c:	604b0302 	.word	0x604b0302
   2eda0:	f8a86888 	.word	0xf8a86888
   2eda4:	f7ff2000 	.word	0xf7ff2000
   2eda8:	4653fb5d 	.word	0x4653fb5d
   2edac:	f859b938 	.word	0xf859b938
   2edb0:	f0222007 	.word	0xf0222007
   2edb4:	f04202ff 	.word	0xf04202ff
   2edb8:	f8490203 	.word	0xf8490203
   2edbc:	68222007 	.word	0x68222007
   2edc0:	2b00e7d1 	.word	0x2b00e7d1
   2edc4:	b912d1c8 	.word	0xb912d1c8
   2edc8:	4293e00b 	.word	0x4293e00b
   2edcc:	eb04d009 	.word	0xeb04d009
   2edd0:	688801c3 	.word	0x688801c3
   2edd4:	28003301 	.word	0x28003301
   2edd8:	6849d0f7 	.word	0x6849d0f7
   2eddc:	2901b2c9 	.word	0x2901b2c9
   2ede0:	2002d1f3 	.word	0x2002d1f3
   2ede4:	f44f4b07 	.word	0xf44f4b07
   2ede8:	4a076180 	.word	0x4a076180
   2edec:	6028681b 	.word	0x6028681b
   2edf0:	bf00e6ec 	.word	0xbf00e6ec
   2edf4:	20024cec 	.word	0x20024cec
   2edf8:	20024ce8 	.word	0x20024ce8
   2edfc:	20024ce4 	.word	0x20024ce4
   2ee00:	20024cd8 	.word	0x20024cd8
   2ee04:	20024cdc 	.word	0x20024cdc
   2ee08:	e000e100 	.word	0xe000e100
   2ee0c:	2002a6cc 	.word	0x2002a6cc

0002ee10 <rpc_transport_msg_free>:
   2ee10:	4b18b430 	.word	0x4b18b430
   2ee14:	6825681c 	.word	0x6825681c
   2ee18:	68a3b16d 	.word	0x68a3b16d
   2ee1c:	d0274283 	.word	0xd0274283
   2ee20:	e0022300 	.word	0xe0022300
   2ee24:	42816889 	.word	0x42816889
   2ee28:	3301d019 	.word	0x3301d019
   2ee2c:	42ab00da 	.word	0x42ab00da
   2ee30:	0102eb04 	.word	0x0102eb04
   2ee34:	4b10d1f6 	.word	0x4b10d1f6
   2ee38:	6825681c 	.word	0x6825681c
   2ee3c:	68a3b16d 	.word	0x68a3b16d
   2ee40:	d0154283 	.word	0xd0154283
   2ee44:	e0022300 	.word	0xe0022300
   2ee48:	42816889 	.word	0x42816889
   2ee4c:	3301d007 	.word	0x3301d007
   2ee50:	429d00da 	.word	0x429d00da
   2ee54:	0102eb04 	.word	0x0102eb04
   2ee58:	bc30d1f6 	.word	0xbc30d1f6
   2ee5c:	32044770 	.word	0x32044770
   2ee60:	f02358a3 	.word	0xf02358a3
   2ee64:	f04303ff 	.word	0xf04303ff
   2ee68:	50a30303 	.word	0x50a30303
   2ee6c:	4770bc30 	.word	0x4770bc30
   2ee70:	e7f52204 	.word	0xe7f52204
   2ee74:	20024ce8 	.word	0x20024ce8
   2ee78:	20024ce4 	.word	0x20024ce4

0002ee7c <rpc_transport_ipc_rx_suspend>:
   2ee7c:	2400b410 	.word	0x2400b410
   2ee80:	22042010 	.word	0x22042010
   2ee84:	490b4b0a 	.word	0x490b4b0a
   2ee88:	45a0f8c3 	.word	0x45a0f8c3
   2ee8c:	b083680c 	.word	0xb083680c
   2ee90:	9c019401 	.word	0x9c019401
   2ee94:	7126f5a1 	.word	0x7126f5a1
   2ee98:	0308f8c3 	.word	0x0308f8c3
   2ee9c:	4b066809 	.word	0x4b066809
   2eea0:	99009100 	.word	0x99009100
   2eea4:	b003601a 	.word	0xb003601a
   2eea8:	4b04f85d 	.word	0x4b04f85d
   2eeac:	bf004770 	.word	0xbf004770
   2eeb0:	4002a000 	.word	0x4002a000
   2eeb4:	4002a5a0 	.word	0x4002a5a0
   2eeb8:	20024ce0 	.word	0x20024ce0

0002eebc <rpc_transport_ipc_rx_shutdown>:
   2eebc:	4a32b4f0 	.word	0x4a32b4f0
   2eec0:	6813b08c 	.word	0x6813b08c
   2eec4:	d1fc2b06 	.word	0xd1fc2b06
   2eec8:	22012000 	.word	0x22012000
   2eecc:	4b2f210a 	.word	0x4b2f210a
   2eed0:	f8c39000 	.word	0xf8c39000
   2eed4:	f8d32610 	.word	0xf8d32610
   2eed8:	90000610 	.word	0x90000610
   2eedc:	f8c39800 	.word	0xf8c39800
   2eee0:	91012614 	.word	0x91012614
   2eee4:	b12b9b01 	.word	0xb12b9b01
   2eee8:	3b019b01 	.word	0x3b019b01
   2eeec:	9b019301 	.word	0x9b019301
   2eef0:	d1f92b00 	.word	0xd1f92b00
   2eef4:	26012200 	.word	0x26012200
   2eef8:	24102504 	.word	0x24102504
   2eefc:	4b244923 	.word	0x4b244923
   2ef00:	2614f8c1 	.word	0x2614f8c1
   2ef04:	3115f501 	.word	0x3115f501
   2ef08:	2590f8c3 	.word	0x2590f8c3
   2ef0c:	71c8f501 	.word	0x71c8f501
   2ef10:	20406809 	.word	0x20406809
   2ef14:	491f9102 	.word	0x491f9102
   2ef18:	f8c39f02 	.word	0xf8c39f02
   2ef1c:	680f2598 	.word	0x680f2598
   2ef20:	97032180 	.word	0x97032180
   2ef24:	f8dd4f1c 	.word	0xf8dd4f1c
   2ef28:	f8c3c00c 	.word	0xf8c3c00c
   2ef2c:	683f25a0 	.word	0x683f25a0
   2ef30:	4f1a9704 	.word	0x4f1a9704
   2ef34:	c010f8dd 	.word	0xc010f8dd
   2ef38:	25a8f8c3 	.word	0x25a8f8c3
   2ef3c:	9705683f 	.word	0x9705683f
   2ef40:	f8c39f05 	.word	0xf8c39f05
   2ef44:	4a1625ac 	.word	0x4a1625ac
   2ef48:	92066812 	.word	0x92066812
   2ef4c:	9f064a15 	.word	0x9f064a15
   2ef50:	6308f8c3 	.word	0x6308f8c3
   2ef54:	96076816 	.word	0x96076816
   2ef58:	f8c39e07 	.word	0xf8c39e07
   2ef5c:	68155308 	.word	0x68155308
   2ef60:	9d089508 	.word	0x9d089508
   2ef64:	4308f8c3 	.word	0x4308f8c3
   2ef68:	94096814 	.word	0x94096814
   2ef6c:	f8c39c09 	.word	0xf8c39c09
   2ef70:	68100308 	.word	0x68100308
   2ef74:	980a900a 	.word	0x980a900a
   2ef78:	1308f8c3 	.word	0x1308f8c3
   2ef7c:	930b6813 	.word	0x930b6813
   2ef80:	b00c9b0b 	.word	0xb00c9b0b
   2ef84:	4770bcf0 	.word	0x4770bcf0
   2ef88:	20024ce0 	.word	0x20024ce0
   2ef8c:	40005000 	.word	0x40005000
   2ef90:	4002a000 	.word	0x4002a000
   2ef94:	4002a598 	.word	0x4002a598
   2ef98:	4002a5a0 	.word	0x4002a5a0
   2ef9c:	4002a5a8 	.word	0x4002a5a8
   2efa0:	4002a5ac 	.word	0x4002a5ac
   2efa4:	4002a308 	.word	0x4002a308

0002efa8 <block_cipher_df>:
   2efa8:	4ff0e92d 	.word	0x4ff0e92d
   2efac:	7fc0f5b2 	.word	0x7fc0f5b2
   2efb0:	7d49f5ad 	.word	0x7d49f5ad
   2efb4:	8119f200 	.word	0x8119f200
   2efb8:	460c4692 	.word	0x460c4692
   2efbc:	72d0f44f 	.word	0x72d0f44f
   2efc0:	46812100 	.word	0x46812100
   2efc4:	f012a860 	.word	0xf012a860
   2efc8:	a81af837 	.word	0xa81af837
   2efcc:	fd5af00a 	.word	0xfd5af00a
   2efd0:	23302000 	.word	0x23302000
   2efd4:	ea4fad66 	.word	0xea4fad66
   2efd8:	f8ad221a 	.word	0xf8ad221a
   2efdc:	f88d0190 	.word	0xf88d0190
   2efe0:	46212192 	.word	0x46212192
   2efe4:	46284652 	.word	0x46284652
   2efe8:	3197f88d 	.word	0x3197f88d
   2efec:	a193f88d 	.word	0xa193f88d
   2eff0:	f7eaae06 	.word	0xf7eaae06
   2eff4:	2280ff5d 	.word	0x2280ff5d
   2eff8:	f8054633 	.word	0xf8054633
   2effc:	af0e200a 	.word	0xaf0e200a
   2f000:	f8031b99 	.word	0xf8031b99
   2f004:	429f1b01 	.word	0x429f1b01
   2f008:	f44fd1fa 	.word	0xf44fd1fa
   2f00c:	46317280 	.word	0x46317280
   2f010:	f00aa81a 	.word	0xf00aa81a
   2f014:	4683fd43 	.word	0x4683fd43
   2f018:	f0402800 	.word	0xf0402800
   2f01c:	900180c8 	.word	0x900180c8
   2f020:	0a19f10a 	.word	0x0a19f10a
   2f024:	2210ac02 	.word	0x2210ac02
   2f028:	46202100 	.word	0x46202100
   2f02c:	f804f012 	.word	0xf804f012
   2f030:	ad6446d0 	.word	0xad6446d0
   2f034:	f8157822 	.word	0xf8157822
   2f038:	f8943c10 	.word	0xf8943c10
   2f03c:	f815c001 	.word	0xf815c001
   2f040:	78a01c0f 	.word	0x78a01c0f
   2f044:	f8154053 	.word	0xf8154053
   2f048:	ea8c2c0e 	.word	0xea8c2c0e
   2f04c:	40500c01 	.word	0x40500c01
   2f050:	f81578e1 	.word	0xf81578e1
   2f054:	f8942c0d 	.word	0xf8942c0d
   2f058:	4051e004 	.word	0x4051e004
   2f05c:	2c0cf815 	.word	0x2c0cf815
   2f060:	ea8e7023 	.word	0xea8e7023
   2f064:	f8150202 	.word	0xf8150202
   2f068:	f8943c0b 	.word	0xf8943c0b
   2f06c:	f884e005 	.word	0xf884e005
   2f070:	ea8ec001 	.word	0xea8ec001
   2f074:	f8150303 	.word	0xf8150303
   2f078:	f894cc0a 	.word	0xf894cc0a
   2f07c:	70a0e006 	.word	0x70a0e006
   2f080:	0c0cea8e 	.word	0x0c0cea8e
   2f084:	0c09f815 	.word	0x0c09f815
   2f088:	e007f894 	.word	0xe007f894
   2f08c:	ea8e70e1 	.word	0xea8e70e1
   2f090:	f8150000 	.word	0xf8150000
   2f094:	f8941c08 	.word	0xf8941c08
   2f098:	7122e008 	.word	0x7122e008
   2f09c:	0101ea8e 	.word	0x0101ea8e
   2f0a0:	2c07f815 	.word	0x2c07f815
   2f0a4:	e009f894 	.word	0xe009f894
   2f0a8:	ea8e7163 	.word	0xea8e7163
   2f0ac:	7aa30202 	.word	0x7aa30202
   2f0b0:	ec06f815 	.word	0xec06f815
   2f0b4:	c006f884 	.word	0xc006f884
   2f0b8:	030eea83 	.word	0x030eea83
   2f0bc:	722171e0 	.word	0x722171e0
   2f0c0:	72a37262 	.word	0x72a37262
   2f0c4:	f8157ae1 	.word	0xf8157ae1
   2f0c8:	f8943c05 	.word	0xf8943c05
   2f0cc:	7b60c00c 	.word	0x7b60c00c
   2f0d0:	f815404b 	.word	0xf815404b
   2f0d4:	f8152c04 	.word	0xf8152c04
   2f0d8:	ea8c1c03 	.word	0xea8c1c03
   2f0dc:	40410202 	.word	0x40410202
   2f0e0:	c00ef894 	.word	0xc00ef894
   2f0e4:	0c02f815 	.word	0x0c02f815
   2f0e8:	e00ff894 	.word	0xe00ff894
   2f0ec:	0000ea8c 	.word	0x0000ea8c
   2f0f0:	cc01f815 	.word	0xcc01f815
   2f0f4:	ea8e72e3 	.word	0xea8e72e3
   2f0f8:	73220c0c 	.word	0x73220c0c
   2f0fc:	73a07361 	.word	0x73a07361
   2f100:	46224623 	.word	0x46224623
   2f104:	a81a2101 	.word	0xa81a2101
   2f108:	c00ff884 	.word	0xc00ff884
   2f10c:	fc44f00b 	.word	0xfc44f00b
   2f110:	0f10f1b8 	.word	0x0f10f1b8
   2f114:	bf944683 	.word	0xbf944683
   2f118:	0808eba8 	.word	0x0808eba8
   2f11c:	0810f1a8 	.word	0x0810f1a8
   2f120:	d1452800 	.word	0xd1452800
   2f124:	f1b83510 	.word	0xf1b83510
   2f128:	d1830f00 	.word	0xd1830f00
   2f12c:	22109d01 	.word	0x22109d01
   2f130:	19784621 	.word	0x19784621
   2f134:	febcf7ea 	.word	0xfebcf7ea
   2f138:	3183f89d 	.word	0x3183f89d
   2f13c:	0210f105 	.word	0x0210f105
   2f140:	2a303301 	.word	0x2a303301
   2f144:	f88d9201 	.word	0xf88d9201
   2f148:	f47f3183 	.word	0xf47f3183
   2f14c:	f44faf6c 	.word	0xf44faf6c
   2f150:	46397280 	.word	0x46397280
   2f154:	f00aa81a 	.word	0xf00aa81a
   2f158:	4683fca1 	.word	0x4683fca1
   2f15c:	464dbb40 	.word	0x464dbb40
   2f160:	0830f109 	.word	0x0830f109
   2f164:	461aab16 	.word	0x461aab16
   2f168:	a81a2101 	.word	0xa81a2101
   2f16c:	fc14f00b 	.word	0xfc14f00b
   2f170:	b9e84683 	.word	0xb9e84683
   2f174:	46282210 	.word	0x46282210
   2f178:	4415a916 	.word	0x4415a916
   2f17c:	fe98f7ea 	.word	0xfe98f7ea
   2f180:	d1ef4545 	.word	0xd1ef4545
   2f184:	f00aa81a 	.word	0xf00aa81a
   2f188:	a860fc83 	.word	0xa860fc83
   2f18c:	71d0f44f 	.word	0x71d0f44f
   2f190:	fcbaf006 	.word	0xfcbaf006
   2f194:	21304638 	.word	0x21304638
   2f198:	fcb6f006 	.word	0xfcb6f006
   2f19c:	21204630 	.word	0x21204630
   2f1a0:	fcb2f006 	.word	0xfcb2f006
   2f1a4:	21104620 	.word	0x21104620
   2f1a8:	fcaef006 	.word	0xfcaef006
   2f1ac:	ac02e018 	.word	0xac02e018
   2f1b0:	f00aa81a 	.word	0xf00aa81a
   2f1b4:	a860fc6d 	.word	0xa860fc6d
   2f1b8:	71d0f44f 	.word	0x71d0f44f
   2f1bc:	fca4f006 	.word	0xfca4f006
   2f1c0:	21304638 	.word	0x21304638
   2f1c4:	fca0f006 	.word	0xfca0f006
   2f1c8:	21204630 	.word	0x21204630
   2f1cc:	fc9cf006 	.word	0xfc9cf006
   2f1d0:	21104620 	.word	0x21104620
   2f1d4:	fc98f006 	.word	0xfc98f006
   2f1d8:	21304648 	.word	0x21304648
   2f1dc:	fc94f006 	.word	0xfc94f006
   2f1e0:	f50d4658 	.word	0xf50d4658
   2f1e4:	e8bd7d49 	.word	0xe8bd7d49
   2f1e8:	f06f8ff0 	.word	0xf06f8ff0
   2f1ec:	e7f70b37 	.word	0xe7f70b37

0002f1f0 <symbol_000078b>:
   2f1f0:	72a0f44f 	.word	0x72a0f44f
   2f1f4:	f0112100 	.word	0xf0112100
   2f1f8:	bf00bf1f 	.word	0xbf00bf1f

0002f1fc <symbol_0001c64>:
   2f1fc:	b510b158 	.word	0xb510b158
   2f200:	30204604 	.word	0x30204604
   2f204:	fc44f00a 	.word	0xfc44f00a
   2f208:	e8bd4620 	.word	0xe8bd4620
   2f20c:	f44f4010 	.word	0xf44f4010
   2f210:	f00671a0 	.word	0xf00671a0
   2f214:	4770bc79 	.word	0x4770bc79

0002f218 <symbol_000ccf0>:
   2f218:	6983b5f0 	.word	0x6983b5f0
   2f21c:	f5b3b0ed 	.word	0xf5b3b0ed
   2f220:	f2007fc0 	.word	0xf2007fc0
   2f224:	f5c380e1 	.word	0xf5c380e1
   2f228:	429373c0 	.word	0x429373c0
   2f22c:	80dcf0c0 	.word	0x80dcf0c0
   2f230:	46154604 	.word	0x46154604
   2f234:	f44f460e 	.word	0xf44f460e
   2f238:	210072c0 	.word	0x210072c0
   2f23c:	f011a80c 	.word	0xf011a80c
   2f240:	a90cfefb 	.word	0xa90cfefb
   2f244:	3138f8d4 	.word	0x3138f8d4
   2f248:	f8d469a2 	.word	0xf8d469a2
   2f24c:	4798013c 	.word	0x4798013c
   2f250:	f0402800 	.word	0xf0402800
   2f254:	69a780cc 	.word	0x69a780cc
   2f258:	b94db106 	.word	0xb94db106
   2f25c:	463aa90c 	.word	0x463aa90c
   2f260:	f7ff4608 	.word	0xf7ff4608
   2f264:	4605fea1 	.word	0x4605fea1
   2f268:	4628b188 	.word	0x4628b188
   2f26c:	bdf0b06d 	.word	0xbdf0b06d
   2f270:	462aab0c 	.word	0x462aab0c
   2f274:	463119d8 	.word	0x463119d8
   2f278:	fe1af7ea 	.word	0xfe1af7ea
   2f27c:	a90c442f 	.word	0xa90c442f
   2f280:	4608463a 	.word	0x4608463a
   2f284:	fe90f7ff 	.word	0xfe90f7ff
   2f288:	28004605 	.word	0x28004605
   2f28c:	4668d1ed 	.word	0x4668d1ed
   2f290:	46292230 	.word	0x46292230
   2f294:	fed0f011 	.word	0xfed0f011
   2f298:	f104462e 	.word	0xf104462e
   2f29c:	7be20720 	.word	0x7be20720
   2f2a0:	0306eb0d 	.word	0x0306eb0d
   2f2a4:	b2d23201 	.word	0xb2d23201
   2f2a8:	2a0073e2 	.word	0x2a0073e2
   2f2ac:	7ba2d14d 	.word	0x7ba2d14d
   2f2b0:	b2d23201 	.word	0xb2d23201
   2f2b4:	2a0073a2 	.word	0x2a0073a2
   2f2b8:	7b62d147 	.word	0x7b62d147
   2f2bc:	b2d23201 	.word	0xb2d23201
   2f2c0:	2a007362 	.word	0x2a007362
   2f2c4:	7b22d141 	.word	0x7b22d141
   2f2c8:	b2d23201 	.word	0xb2d23201
   2f2cc:	2a007322 	.word	0x2a007322
   2f2d0:	7ae2d13b 	.word	0x7ae2d13b
   2f2d4:	b2d23201 	.word	0xb2d23201
   2f2d8:	2a0072e2 	.word	0x2a0072e2
   2f2dc:	7aa2d135 	.word	0x7aa2d135
   2f2e0:	b2d23201 	.word	0xb2d23201
   2f2e4:	2a0072a2 	.word	0x2a0072a2
   2f2e8:	7a62d12f 	.word	0x7a62d12f
   2f2ec:	b2d23201 	.word	0xb2d23201
   2f2f0:	bb527262 	.word	0xbb527262
   2f2f4:	32017a22 	.word	0x32017a22
   2f2f8:	7222b2d2 	.word	0x7222b2d2
   2f2fc:	79e2bb2a 	.word	0x79e2bb2a
   2f300:	b2d23201 	.word	0xb2d23201
   2f304:	bb0271e2 	.word	0xbb0271e2
   2f308:	320179a2 	.word	0x320179a2
   2f30c:	71a2b2d2 	.word	0x71a2b2d2
   2f310:	7962b9da 	.word	0x7962b9da
   2f314:	b2d23201 	.word	0xb2d23201
   2f318:	b9b27162 	.word	0xb9b27162
   2f31c:	32017922 	.word	0x32017922
   2f320:	7122b2d2 	.word	0x7122b2d2
   2f324:	78e2b98a 	.word	0x78e2b98a
   2f328:	b2d23201 	.word	0xb2d23201
   2f32c:	b96270e2 	.word	0xb96270e2
   2f330:	320178a2 	.word	0x320178a2
   2f334:	70a2b2d2 	.word	0x70a2b2d2
   2f338:	7862b93a 	.word	0x7862b93a
   2f33c:	b2d23201 	.word	0xb2d23201
   2f340:	b9127062 	.word	0xb9127062
   2f344:	32017822 	.word	0x32017822
   2f348:	46227022 	.word	0x46227022
   2f34c:	46382101 	.word	0x46382101
   2f350:	fb22f00b 	.word	0xfb22f00b
   2f354:	28004605 	.word	0x28004605
   2f358:	3610d187 	.word	0x3610d187
   2f35c:	d19e2e30 	.word	0xd19e2e30
   2f360:	9b0c9901 	.word	0x9b0c9901
   2f364:	9a0d9800 	.word	0x9a0d9800
   2f368:	404a4058 	.word	0x404a4058
   2f36c:	99029b0e 	.word	0x99029b0e
   2f370:	40599000 	.word	0x40599000
   2f374:	9b0f9803 	.word	0x9b0f9803
   2f378:	40439201 	.word	0x40439201
   2f37c:	98049a10 	.word	0x98049a10
   2f380:	40509102 	.word	0x40509102
   2f384:	9a119905 	.word	0x9a119905
   2f388:	40519303 	.word	0x40519303
   2f38c:	9a069b12 	.word	0x9a069b12
   2f390:	405a9004 	.word	0x405a9004
   2f394:	9b139807 	.word	0x9b139807
   2f398:	40589105 	.word	0x40589105
   2f39c:	9b149908 	.word	0x9b149908
   2f3a0:	40599206 	.word	0x40599206
   2f3a4:	9b159a09 	.word	0x9b159a09
   2f3a8:	405a9007 	.word	0x405a9007
   2f3ac:	9b16980a 	.word	0x9b16980a
   2f3b0:	40439108 	.word	0x40439108
   2f3b4:	2309e9cd 	.word	0x2309e9cd
   2f3b8:	9b179a0b 	.word	0x9b179a0b
   2f3bc:	40534638 	.word	0x40534638
   2f3c0:	f44f4669 	.word	0xf44f4669
   2f3c4:	930b7280 	.word	0x930b7280
   2f3c8:	fb68f00a 	.word	0xfb68f00a
   2f3cc:	28004605 	.word	0x28004605
   2f3d0:	af4bf47f 	.word	0xaf4bf47f
   2f3d4:	a9082210 	.word	0xa9082210
   2f3d8:	f7ea4620 	.word	0xf7ea4620
   2f3dc:	2301fd69 	.word	0x2301fd69
   2f3e0:	61234628 	.word	0x61234628
   2f3e4:	bdf0b06d 	.word	0xbdf0b06d
   2f3e8:	0537f06f 	.word	0x0537f06f
   2f3ec:	f06fe73d 	.word	0xf06fe73d
   2f3f0:	e73a0533 	.word	0xe73a0533

0002f3f4 <symbol_0001e1e>:
   2f3f4:	41f0e92d 	.word	0x41f0e92d
   2f3f8:	46164604 	.word	0x46164604
   2f3fc:	b0882220 	.word	0xb0882220
   2f400:	460f18a5 	.word	0x460f18a5
   2f404:	21004668 	.word	0x21004668
   2f408:	f0114698 	.word	0xf0114698
   2f40c:	4628fe15 	.word	0x4628fe15
   2f410:	fb38f00a 	.word	0xfb38f00a
   2f414:	f2422220 	.word	0xf2422220
   2f418:	f8c47310 	.word	0xf8c47310
   2f41c:	e9c47138 	.word	0xe9c47138
   2f420:	46282306 	.word	0x46282306
   2f424:	613cf8c4 	.word	0x613cf8c4
   2f428:	f44f4669 	.word	0xf44f4669
   2f42c:	f00a7280 	.word	0xf00a7280
   2f430:	b920fb35 	.word	0xb920fb35
   2f434:	46204641 	.word	0x46204641
   2f438:	f7ff9a0e 	.word	0xf7ff9a0e
   2f43c:	b008feed 	.word	0xb008feed
   2f440:	81f0e8bd 	.word	0x81f0e8bd

0002f444 <symbol_000268c>:
   2f444:	4ff0e92d 	.word	0x4ff0e92d
   2f448:	6f80f5b2 	.word	0x6f80f5b2
   2f44c:	f200b0f9 	.word	0xf200b0f9
   2f450:	46048226 	.word	0x46048226
   2f454:	460f4615 	.word	0x460f4615
   2f458:	46682230 	.word	0x46682230
   2f45c:	f0112100 	.word	0xf0112100
   2f460:	6922fdeb 	.word	0x6922fdeb
   2f464:	429a69e3 	.word	0x429a69e3
   2f468:	6963dc01 	.word	0x6963dc01
   2f46c:	69a3b313 	.word	0x69a3b313
   2f470:	7fc0f5b3 	.word	0x7fc0f5b3
   2f474:	8216f200 	.word	0x8216f200
   2f478:	0a60f10d 	.word	0x0a60f10d
   2f47c:	72c0f44f 	.word	0x72c0f44f
   2f480:	46502100 	.word	0x46502100
   2f484:	fdd8f011 	.word	0xfdd8f011
   2f488:	f8d44651 	.word	0xf8d44651
   2f48c:	69a23138 	.word	0x69a23138
   2f490:	013cf8d4 	.word	0x013cf8d4
   2f494:	f06f4798 	.word	0xf06f4798
   2f498:	b9380933 	.word	0xb9380933
   2f49c:	465169a2 	.word	0x465169a2
   2f4a0:	f7ff4650 	.word	0xf7ff4650
   2f4a4:	4681fd81 	.word	0x4681fd81
   2f4a8:	d0772800 	.word	0xd0772800
   2f4ac:	b0794648 	.word	0xb0794648
   2f4b0:	8ff0e8bd 	.word	0x8ff0e8bd
   2f4b4:	0820f104 	.word	0x0820f104
   2f4b8:	f0002d00 	.word	0xf0002d00
   2f4bc:	ae0c812b 	.word	0xae0c812b
   2f4c0:	2d10e00e 	.word	0x2d10e00e
   2f4c4:	bf2846a9 	.word	0xbf2846a9
   2f4c8:	0910f04f 	.word	0x0910f04f
   2f4cc:	46314638 	.word	0x46314638
   2f4d0:	f7ea464a 	.word	0xf7ea464a
   2f4d4:	ebb5fced 	.word	0xebb5fced
   2f4d8:	444f0509 	.word	0x444f0509
   2f4dc:	811af000 	.word	0x811af000
   2f4e0:	33017be3 	.word	0x33017be3
   2f4e4:	73e3b2db 	.word	0x73e3b2db
   2f4e8:	d14d2b00 	.word	0xd14d2b00
   2f4ec:	33017ba3 	.word	0x33017ba3
   2f4f0:	73a3b2db 	.word	0x73a3b2db
   2f4f4:	d1472b00 	.word	0xd1472b00
   2f4f8:	33017b63 	.word	0x33017b63
   2f4fc:	7363b2db 	.word	0x7363b2db
   2f500:	d1412b00 	.word	0xd1412b00
   2f504:	33017b23 	.word	0x33017b23
   2f508:	7323b2db 	.word	0x7323b2db
   2f50c:	d13b2b00 	.word	0xd13b2b00
   2f510:	33017ae3 	.word	0x33017ae3
   2f514:	72e3b2db 	.word	0x72e3b2db
   2f518:	d1352b00 	.word	0xd1352b00
   2f51c:	33017aa3 	.word	0x33017aa3
   2f520:	72a3b2db 	.word	0x72a3b2db
   2f524:	d12f2b00 	.word	0xd12f2b00
   2f528:	33017a63 	.word	0x33017a63
   2f52c:	7263b2db 	.word	0x7263b2db
   2f530:	7a23bb53 	.word	0x7a23bb53
   2f534:	b2db3301 	.word	0xb2db3301
   2f538:	bb2b7223 	.word	0xbb2b7223
   2f53c:	330179e3 	.word	0x330179e3
   2f540:	71e3b2db 	.word	0x71e3b2db
   2f544:	79a3bb03 	.word	0x79a3bb03
   2f548:	b2db3301 	.word	0xb2db3301
   2f54c:	b9db71a3 	.word	0xb9db71a3
   2f550:	33017963 	.word	0x33017963
   2f554:	7163b2db 	.word	0x7163b2db
   2f558:	7923b9b3 	.word	0x7923b9b3
   2f55c:	b2db3301 	.word	0xb2db3301
   2f560:	b98b7123 	.word	0xb98b7123
   2f564:	330178e3 	.word	0x330178e3
   2f568:	70e3b2db 	.word	0x70e3b2db
   2f56c:	78a3b963 	.word	0x78a3b963
   2f570:	b2db3301 	.word	0xb2db3301
   2f574:	b93b70a3 	.word	0xb93b70a3
   2f578:	33017863 	.word	0x33017863
   2f57c:	7063b2db 	.word	0x7063b2db
   2f580:	7823b913 	.word	0x7823b913
   2f584:	70233301 	.word	0x70233301
   2f588:	46224633 	.word	0x46224633
   2f58c:	46402101 	.word	0x46402101
   2f590:	fa02f00b 	.word	0xfa02f00b
   2f594:	28004681 	.word	0x28004681
   2f598:	e787d093 	.word	0xe787d093
   2f59c:	4630ae0c 	.word	0x4630ae0c
   2f5a0:	46492230 	.word	0x46492230
   2f5a4:	fd48f011 	.word	0xfd48f011
   2f5a8:	f10446cb 	.word	0xf10446cb
   2f5ac:	7be20820 	.word	0x7be20820
   2f5b0:	030beb06 	.word	0x030beb06
   2f5b4:	b2d23201 	.word	0xb2d23201
   2f5b8:	2a0073e2 	.word	0x2a0073e2
   2f5bc:	7ba2d14d 	.word	0x7ba2d14d
   2f5c0:	b2d23201 	.word	0xb2d23201
   2f5c4:	2a0073a2 	.word	0x2a0073a2
   2f5c8:	7b62d147 	.word	0x7b62d147
   2f5cc:	b2d23201 	.word	0xb2d23201
   2f5d0:	2a007362 	.word	0x2a007362
   2f5d4:	7b22d141 	.word	0x7b22d141
   2f5d8:	b2d23201 	.word	0xb2d23201
   2f5dc:	2a007322 	.word	0x2a007322
   2f5e0:	7ae2d13b 	.word	0x7ae2d13b
   2f5e4:	b2d23201 	.word	0xb2d23201
   2f5e8:	2a0072e2 	.word	0x2a0072e2
   2f5ec:	7aa2d135 	.word	0x7aa2d135
   2f5f0:	b2d23201 	.word	0xb2d23201
   2f5f4:	2a0072a2 	.word	0x2a0072a2
   2f5f8:	7a62d12f 	.word	0x7a62d12f
   2f5fc:	b2d23201 	.word	0xb2d23201
   2f600:	bb527262 	.word	0xbb527262
   2f604:	32017a22 	.word	0x32017a22
   2f608:	7222b2d2 	.word	0x7222b2d2
   2f60c:	79e2bb2a 	.word	0x79e2bb2a
   2f610:	b2d23201 	.word	0xb2d23201
   2f614:	bb0271e2 	.word	0xbb0271e2
   2f618:	320179a2 	.word	0x320179a2
   2f61c:	71a2b2d2 	.word	0x71a2b2d2
   2f620:	7962b9da 	.word	0x7962b9da
   2f624:	b2d23201 	.word	0xb2d23201
   2f628:	b9b27162 	.word	0xb9b27162
   2f62c:	32017922 	.word	0x32017922
   2f630:	7122b2d2 	.word	0x7122b2d2
   2f634:	78e2b98a 	.word	0x78e2b98a
   2f638:	b2d23201 	.word	0xb2d23201
   2f63c:	b96270e2 	.word	0xb96270e2
   2f640:	320178a2 	.word	0x320178a2
   2f644:	70a2b2d2 	.word	0x70a2b2d2
   2f648:	7862b93a 	.word	0x7862b93a
   2f64c:	b2d23201 	.word	0xb2d23201
   2f650:	b9127062 	.word	0xb9127062
   2f654:	32017822 	.word	0x32017822
   2f658:	46227022 	.word	0x46227022
   2f65c:	46402101 	.word	0x46402101
   2f660:	f99af00b 	.word	0xf99af00b
   2f664:	28004681 	.word	0x28004681
   2f668:	af20f47f 	.word	0xaf20f47f
   2f66c:	0b10f10b 	.word	0x0b10f10b
   2f670:	0f30f1bb 	.word	0x0f30f1bb
   2f674:	6870d19b 	.word	0x6870d19b
   2f678:	3000f8da 	.word	0x3000f8da
   2f67c:	f8da6831 	.word	0xf8da6831
   2f680:	40592004 	.word	0x40592004
   2f684:	f8da4042 	.word	0xf8da4042
   2f688:	68b03008 	.word	0x68b03008
   2f68c:	ea836031 	.word	0xea836031
   2f690:	f8da0100 	.word	0xf8da0100
   2f694:	68f0300c 	.word	0x68f0300c
   2f698:	40586072 	.word	0x40586072
   2f69c:	f8da6932 	.word	0xf8da6932
   2f6a0:	60b13010 	.word	0x60b13010
   2f6a4:	f8da4053 	.word	0xf8da4053
   2f6a8:	69721014 	.word	0x69721014
   2f6ac:	404a60f0 	.word	0x404a60f0
   2f6b0:	f8da69b0 	.word	0xf8da69b0
   2f6b4:	61331018 	.word	0x61331018
   2f6b8:	f8da4048 	.word	0xf8da4048
   2f6bc:	69f1301c 	.word	0x69f1301c
   2f6c0:	404b6172 	.word	0x404b6172
   2f6c4:	f8da6a32 	.word	0xf8da6a32
   2f6c8:	61b01020 	.word	0x61b01020
   2f6cc:	6a704051 	.word	0x6a704051
   2f6d0:	2024f8da 	.word	0x2024f8da
   2f6d4:	405061f3 	.word	0x405061f3
   2f6d8:	3028f8da 	.word	0x3028f8da
   2f6dc:	62316ab2 	.word	0x62316ab2
   2f6e0:	e9c64053 	.word	0xe9c64053
   2f6e4:	6af20309 	.word	0x6af20309
   2f6e8:	302cf8da 	.word	0x302cf8da
   2f6ec:	40534631 	.word	0x40534631
   2f6f0:	f44f4640 	.word	0xf44f4640
   2f6f4:	62f37280 	.word	0x62f37280
   2f6f8:	f9d0f00a 	.word	0xf9d0f00a
   2f6fc:	28004681 	.word	0x28004681
   2f700:	aed4f47f 	.word	0xaed4f47f
   2f704:	a9142210 	.word	0xa9142210
   2f708:	f7ea4620 	.word	0xf7ea4620
   2f70c:	2301fbd1 	.word	0x2301fbd1
   2f710:	e6d16123 	.word	0xe6d16123
   2f714:	0a60f10d 	.word	0x0a60f10d
   2f718:	22304650 	.word	0x22304650
   2f71c:	f0112100 	.word	0xf0112100
   2f720:	2500fc8b 	.word	0x2500fc8b
   2f724:	eb0a7be2 	.word	0xeb0a7be2
   2f728:	32010305 	.word	0x32010305
   2f72c:	73e2b2d2 	.word	0x73e2b2d2
   2f730:	d14d2a00 	.word	0xd14d2a00
   2f734:	32017ba2 	.word	0x32017ba2
   2f738:	73a2b2d2 	.word	0x73a2b2d2
   2f73c:	d1472a00 	.word	0xd1472a00
   2f740:	32017b62 	.word	0x32017b62
   2f744:	7362b2d2 	.word	0x7362b2d2
   2f748:	d1412a00 	.word	0xd1412a00
   2f74c:	32017b22 	.word	0x32017b22
   2f750:	7322b2d2 	.word	0x7322b2d2
   2f754:	d13b2a00 	.word	0xd13b2a00
   2f758:	32017ae2 	.word	0x32017ae2
   2f75c:	72e2b2d2 	.word	0x72e2b2d2
   2f760:	d1352a00 	.word	0xd1352a00
   2f764:	32017aa2 	.word	0x32017aa2
   2f768:	72a2b2d2 	.word	0x72a2b2d2
   2f76c:	d12f2a00 	.word	0xd12f2a00
   2f770:	32017a62 	.word	0x32017a62
   2f774:	7262b2d2 	.word	0x7262b2d2
   2f778:	7a22bb52 	.word	0x7a22bb52
   2f77c:	b2d23201 	.word	0xb2d23201
   2f780:	bb2a7222 	.word	0xbb2a7222
   2f784:	320179e2 	.word	0x320179e2
   2f788:	71e2b2d2 	.word	0x71e2b2d2
   2f78c:	79a2bb02 	.word	0x79a2bb02
   2f790:	b2d23201 	.word	0xb2d23201
   2f794:	b9da71a2 	.word	0xb9da71a2
   2f798:	32017962 	.word	0x32017962
   2f79c:	7162b2d2 	.word	0x7162b2d2
   2f7a0:	7922b9b2 	.word	0x7922b9b2
   2f7a4:	b2d23201 	.word	0xb2d23201
   2f7a8:	b98a7122 	.word	0xb98a7122
   2f7ac:	320178e2 	.word	0x320178e2
   2f7b0:	70e2b2d2 	.word	0x70e2b2d2
   2f7b4:	78a2b962 	.word	0x78a2b962
   2f7b8:	b2d23201 	.word	0xb2d23201
   2f7bc:	b93a70a2 	.word	0xb93a70a2
   2f7c0:	32017862 	.word	0x32017862
   2f7c4:	7062b2d2 	.word	0x7062b2d2
   2f7c8:	7822b912 	.word	0x7822b912
   2f7cc:	70223201 	.word	0x70223201
   2f7d0:	21014622 	.word	0x21014622
   2f7d4:	f00b4640 	.word	0xf00b4640
   2f7d8:	4681f8df 	.word	0x4681f8df
   2f7dc:	f47f2800 	.word	0xf47f2800
   2f7e0:	3510ae65 	.word	0x3510ae65
   2f7e4:	d19d2d30 	.word	0xd19d2d30
   2f7e8:	1200e9da 	.word	0x1200e9da
   2f7ec:	98019b00 	.word	0x98019b00
   2f7f0:	40424059 	.word	0x40424059
   2f7f4:	3008f8da 	.word	0x3008f8da
   2f7f8:	f8ca9802 	.word	0xf8ca9802
   2f7fc:	ea831000 	.word	0xea831000
   2f800:	f8da0100 	.word	0xf8da0100
   2f804:	9803300c 	.word	0x9803300c
   2f808:	2004f8ca 	.word	0x2004f8ca
   2f80c:	9a044058 	.word	0x9a044058
   2f810:	3010f8da 	.word	0x3010f8da
   2f814:	1008f8ca 	.word	0x1008f8ca
   2f818:	99054053 	.word	0x99054053
   2f81c:	2014f8da 	.word	0x2014f8da
   2f820:	000cf8ca 	.word	0x000cf8ca
   2f824:	9806404a 	.word	0x9806404a
   2f828:	1018f8da 	.word	0x1018f8da
   2f82c:	3010f8ca 	.word	0x3010f8ca
   2f830:	9b074048 	.word	0x9b074048
   2f834:	101cf8da 	.word	0x101cf8da
   2f838:	2014f8ca 	.word	0x2014f8ca
   2f83c:	f8da404b 	.word	0xf8da404b
   2f840:	99082020 	.word	0x99082020
   2f844:	0018f8ca 	.word	0x0018f8ca
   2f848:	f8da4051 	.word	0xf8da4051
   2f84c:	9a090024 	.word	0x9a090024
   2f850:	301cf8ca 	.word	0x301cf8ca
   2f854:	f8da4050 	.word	0xf8da4050
   2f858:	9a0a3028 	.word	0x9a0a3028
   2f85c:	1020f8ca 	.word	0x1020f8ca
   2f860:	e9ca4053 	.word	0xe9ca4053
   2f864:	9a0b0309 	.word	0x9a0b0309
   2f868:	302cf8da 	.word	0x302cf8da
   2f86c:	40534640 	.word	0x40534640
   2f870:	f44f4651 	.word	0xf44f4651
   2f874:	f8ca7280 	.word	0xf8ca7280
   2f878:	f00a302c 	.word	0xf00a302c
   2f87c:	4681f90f 	.word	0x4681f90f
   2f880:	f47f2800 	.word	0xf47f2800
   2f884:	2210ae13 	.word	0x2210ae13
   2f888:	4620a920 	.word	0x4620a920
   2f88c:	fb10f7ea 	.word	0xfb10f7ea
   2f890:	69234648 	.word	0x69234648
   2f894:	61233301 	.word	0x61233301
   2f898:	e8bdb079 	.word	0xe8bdb079
   2f89c:	f06f8ff0 	.word	0xf06f8ff0
   2f8a0:	e6030935 	.word	0xe6030935
   2f8a4:	0937f06f 	.word	0x0937f06f
   2f8a8:	bf00e600 	.word	0xbf00e600

0002f8ac <packet_handler_create>:
   2f8ac:	b5382801 	.word	0xb5382801
   2f8b0:	4614460d 	.word	0x4614460d
   2f8b4:	db11d00d 	.word	0xdb11d00d
   2f8b8:	dc0f2803 	.word	0xdc0f2803
   2f8bc:	f00a2010 	.word	0xf00a2010
   2f8c0:	2218f8a1 	.word	0x2218f8a1
   2f8c4:	4b08b120 	.word	0x4b08b120
   2f8c8:	44136045 	.word	0x44136045
   2f8cc:	60036084 	.word	0x60036084
   2f8d0:	2014bd38 	.word	0x2014bd38
   2f8d4:	f896f00a 	.word	0xf896f00a
   2f8d8:	e7f32230 	.word	0xe7f32230
   2f8dc:	f00a200c 	.word	0xf00a200c
   2f8e0:	2200f891 	.word	0x2200f891
   2f8e4:	bf00e7ee 	.word	0xbf00e7ee
   2f8e8:	0004b524 	.word	0x0004b524

0002f8ec <packet_handler_delete>:
   2f8ec:	4604b510 	.word	0x4604b510
   2f8f0:	691b6803 	.word	0x691b6803
   2f8f4:	68234798 	.word	0x68234798
   2f8f8:	695b4620 	.word	0x695b4620
   2f8fc:	46204798 	.word	0x46204798
   2f900:	4010e8bd 	.word	0x4010e8bd
   2f904:	b89cf00a 	.word	0xb89cf00a

0002f908 <symbol_0002469>:
   2f908:	460db570 	.word	0x460db570
   2f90c:	f0014604 	.word	0xf0014604
   2f910:	2d03fc23 	.word	0x2d03fc23
   2f914:	d1257025 	.word	0xd1257025
   2f918:	25012308 	.word	0x25012308
   2f91c:	49154a14 	.word	0x49154a14
   2f920:	622360a3 	.word	0x622360a3
   2f924:	62e36523 	.word	0x62e36523
   2f928:	60e263a3 	.word	0x60e263a3
   2f92c:	4a134b12 	.word	0x4a134b12
   2f930:	48144e13 	.word	0x48144e13
   2f934:	65606321 	.word	0x65606321
   2f938:	64a363e2 	.word	0x64a363e2
   2f93c:	61e56065 	.word	0x61e56065
   2f940:	62a564e5 	.word	0x62a564e5
   2f944:	e9c46365 	.word	0xe9c46365
   2f948:	62665510 	.word	0x62665510
   2f94c:	f0061d20 	.word	0xf0061d20
   2f950:	65a0fe69 	.word	0x65a0fe69
   2f954:	004cf104 	.word	0x004cf104
   2f958:	fe64f006 	.word	0xfe64f006
   2f95c:	0517e9c4 	.word	0x0517e9c4
   2f960:	bd702000 	.word	0xbd702000
   2f964:	f0014620 	.word	0xf0014620
   2f968:	4807fbf7 	.word	0x4807fbf7
   2f96c:	bf00bd70 	.word	0xbf00bd70
   2f970:	0004b5ec 	.word	0x0004b5ec
   2f974:	0004b58c 	.word	0x0004b58c
   2f978:	20031b88 	.word	0x20031b88
   2f97c:	0004b5ac 	.word	0x0004b5ac
   2f980:	0004b56c 	.word	0x0004b56c
   2f984:	0004b5cc 	.word	0x0004b5cc
   2f988:	ffffb180 	.word	0xffffb180

0002f98c <secure_client_socket>:
   2f98c:	41f0e92d 	.word	0x41f0e92d
   2f990:	680b460c 	.word	0x680b460c
   2f994:	f4236989 	.word	0xf4236989
   2f998:	60233300 	.word	0x60233300
   2f99c:	23006822 	.word	0x23006822
   2f9a0:	1280f422 	.word	0x1280f422
   2f9a4:	f2476022 	.word	0xf2476022
   2f9a8:	68270281 	.word	0x68270281
   2f9ac:	f0024606 	.word	0xf0024606
   2f9b0:	2800ff09 	.word	0x2800ff09
   2f9b4:	4605d03b 	.word	0x4605d03b
   2f9b8:	eb064b28 	.word	0xeb064b28
   2f9bc:	eb0301c6 	.word	0xeb0301c6
   2f9c0:	22240181 	.word	0x22240181
   2f9c4:	f7ea3014 	.word	0xf7ea3014
   2f9c8:	68abfa73 	.word	0x68abfa73
   2f9cc:	8090f8df 	.word	0x8090f8df
   2f9d0:	60ab3324 	.word	0x60ab3324
   2f9d4:	46296823 	.word	0x46296823
   2f9d8:	0308ea03 	.word	0x0308ea03
   2f9dc:	030af043 	.word	0x030af043
   2f9e0:	f2476023 	.word	0xf2476023
   2f9e4:	463b0281 	.word	0x463b0281
   2f9e8:	f0024620 	.word	0xf0024620
   2f9ec:	b960ff0b 	.word	0xb960ff0b
   2f9f0:	00db6823 	.word	0x00db6823
   2f9f4:	f04fd40b 	.word	0xf04fd40b
   2f9f8:	f64f33ff 	.word	0xf64f33ff
   2f9fc:	210b72ff 	.word	0x210b72ff
   2fa00:	f0024630 	.word	0xf0024630
   2fa04:	b128ff13 	.word	0xb128ff13
   2fa08:	e8bd6027 	.word	0xe8bd6027
   2fa0c:	207381f0 	.word	0x207381f0
   2fa10:	81f0e8bd 	.word	0x81f0e8bd
   2fa14:	6280f04f 	.word	0x6280f04f
   2fa18:	46114630 	.word	0x46114630
   2fa1c:	33fff04f 	.word	0x33fff04f
   2fa20:	ff04f002 	.word	0xff04f002
   2fa24:	2873b130 	.word	0x2873b130
   2fa28:	6027d0ef 	.word	0x6027d0ef
   2fa2c:	200ce7ed 	.word	0x200ce7ed
   2fa30:	81f0e8bd 	.word	0x81f0e8bd
   2fa34:	f0236823 	.word	0xf0236823
   2fa38:	60236380 	.word	0x60236380
   2fa3c:	ea036823 	.word	0xea036823
   2fa40:	f0480808 	.word	0xf0480808
   2fa44:	6023030c 	.word	0x6023030c
   2fa48:	f4436823 	.word	0xf4436823
   2fa4c:	60233300 	.word	0x60233300
   2fa50:	f4436823 	.word	0xf4436823
   2fa54:	60231380 	.word	0x60231380
   2fa58:	81f0e8bd 	.word	0x81f0e8bd
   2fa5c:	20024cf0 	.word	0x20024cf0
   2fa60:	ffff0000 	.word	0xffff0000

0002fa64 <tls_interface_init>:
   2fa64:	47702000 	.word	0x47702000

0002fa68 <tls_interface_open>:
   2fa68:	f020b538 	.word	0xf020b538
   2fa6c:	2b020308 	.word	0x2b020308
   2fa70:	202fd006 	.word	0x202fd006
   2fa74:	fffef7f5 	.word	0xfffef7f5
   2fa78:	35fff04f 	.word	0x35fff04f
   2fa7c:	bd384628 	.word	0xbd384628
   2fa80:	1e4a4614 	.word	0x1e4a4614
   2fa84:	d8282a01 	.word	0xd8282a01
   2fa88:	2901bb14 	.word	0x2901bb14
   2fa8c:	2301bf06 	.word	0x2301bf06
   2fa90:	7482f44f 	.word	0x7482f44f
   2fa94:	7487f44f 	.word	0x7487f44f
   2fa98:	f002461a 	.word	0xf002461a
   2fa9c:	1e05fef3 	.word	0x1e05fef3
   2faa0:	4b15db26 	.word	0x4b15db26
   2faa4:	00c5eb05 	.word	0x00c5eb05
   2faa8:	0080eb03 	.word	0x0080eb03
   2faac:	49132224 	.word	0x49132224
   2fab0:	f9fef7ea 	.word	0xf9fef7ea
   2fab4:	f0024628 	.word	0xf0024628
   2fab8:	6803fd0d 	.word	0x6803fd0d
   2fabc:	f4236144 	.word	0xf4236144
   2fac0:	60031380 	.word	0x60031380
   2fac4:	f4236803 	.word	0xf4236803
   2fac8:	60033300 	.word	0x60033300
   2facc:	bd384628 	.word	0xbd384628
   2fad0:	d0082901 	.word	0xd0082901
   2fad4:	7f87f5b4 	.word	0x7f87f5b4
   2fad8:	2016d0de 	.word	0x2016d0de
   2fadc:	ffcaf7f5 	.word	0xffcaf7f5
   2fae0:	35fff04f 	.word	0x35fff04f
   2fae4:	f5b4e7ca 	.word	0xf5b4e7ca
   2fae8:	d1f67f82 	.word	0xd1f67f82
   2faec:	e7d3460b 	.word	0xe7d3460b
   2faf0:	35fff04f 	.word	0x35fff04f
   2faf4:	bf00e7c2 	.word	0xbf00e7c2
   2faf8:	20024cf0 	.word	0x20024cf0
   2fafc:	0004b60c 	.word	0x0004b60c

0002fb00 <tls_interface_close>:
   2fb00:	4604b510 	.word	0x4604b510
   2fb04:	fce6f002 	.word	0xfce6f002
   2fb08:	4620b120 	.word	0x4620b120
   2fb0c:	4010e8bd 	.word	0x4010e8bd
   2fb10:	bf64f002 	.word	0xbf64f002
   2fb14:	f7f52009 	.word	0xf7f52009
   2fb18:	f04fffad 	.word	0xf04fffad
   2fb1c:	bd1030ff 	.word	0xbd1030ff

0002fb20 <tls_interface_sendto>:
   2fb20:	47f0e92d 	.word	0x47f0e92d
   2fb24:	e9dd460d 	.word	0xe9dd460d
   2fb28:	46168908 	.word	0x46168908
   2fb2c:	4604461f 	.word	0x4604461f
   2fb30:	fcd0f002 	.word	0xfcd0f002
   2fb34:	d03b2800 	.word	0xd03b2800
   2fb38:	b29b6803 	.word	0xb29b6803
   2fb3c:	d0392b0c 	.word	0xd0392b0c
   2fb40:	b29b6803 	.word	0xb29b6803
   2fb44:	d1112b0b 	.word	0xd1112b0b
   2fb48:	eb044b20 	.word	0xeb044b20
   2fb4c:	f81304c4 	.word	0xf81304c4
   2fb50:	2b023024 	.word	0x2b023024
   2fb54:	6903d038 	.word	0x6903d038
   2fb58:	bf142b01 	.word	0xbf142b01
   2fb5c:	202a2039 	.word	0x202a2039
   2fb60:	ff88f7f5 	.word	0xff88f7f5
   2fb64:	30fff04f 	.word	0x30fff04f
   2fb68:	87f0e8bd 	.word	0x87f0e8bd
   2fb6c:	2b016903 	.word	0x2b016903
   2fb70:	2b02d00b 	.word	0x2b02d00b
   2fb74:	2039d001 	.word	0x2039d001
   2fb78:	6803e7f2 	.word	0x6803e7f2
   2fb7c:	2b02b29b 	.word	0x2b02b29b
   2fb80:	6803d007 	.word	0x6803d007
   2fb84:	2b04b29b 	.word	0x2b04b29b
   2fb88:	6803d003 	.word	0x6803d003
   2fb8c:	2b05b29b 	.word	0x2b05b29b
   2fb90:	4b0ed1f1 	.word	0x4b0ed1f1
   2fb94:	02c4eb04 	.word	0x02c4eb04
   2fb98:	3022f813 	.word	0x3022f813
   2fb9c:	d1ea2b02 	.word	0xd1ea2b02
   2fba0:	46204601 	.word	0x46204601
   2fba4:	fef2f7ff 	.word	0xfef2f7ff
   2fba8:	d0032800 	.word	0xd0032800
   2fbac:	e7d9dcd8 	.word	0xe7d9dcd8
   2fbb0:	e7d52009 	.word	0xe7d52009
   2fbb4:	8908e9cd 	.word	0x8908e9cd
   2fbb8:	4632463b 	.word	0x4632463b
   2fbbc:	46204629 	.word	0x46204629
   2fbc0:	47f0e8bd 	.word	0x47f0e8bd
   2fbc4:	bf7af002 	.word	0xbf7af002
   2fbc8:	e7c92023 	.word	0xe7c92023
   2fbcc:	20024cf0 	.word	0x20024cf0

0002fbd0 <tls_interface_recvfrom>:
   2fbd0:	47f0e92d 	.word	0x47f0e92d
   2fbd4:	e9dd460d 	.word	0xe9dd460d
   2fbd8:	46168908 	.word	0x46168908
   2fbdc:	4604461f 	.word	0x4604461f
   2fbe0:	fc78f002 	.word	0xfc78f002
   2fbe4:	d0382800 	.word	0xd0382800
   2fbe8:	b29b6803 	.word	0xb29b6803
   2fbec:	d00f2b0c 	.word	0xd00f2b0c
   2fbf0:	b29b6803 	.word	0xb29b6803
   2fbf4:	d00b2b0d 	.word	0xd00b2b0d
   2fbf8:	2b016903 	.word	0x2b016903
   2fbfc:	2b02d01a 	.word	0x2b02d01a
   2fc00:	2023d010 	.word	0x2023d010
   2fc04:	ff36f7f5 	.word	0xff36f7f5
   2fc08:	30fff04f 	.word	0x30fff04f
   2fc0c:	87f0e8bd 	.word	0x87f0e8bd
   2fc10:	8908e9cd 	.word	0x8908e9cd
   2fc14:	4632463b 	.word	0x4632463b
   2fc18:	46204629 	.word	0x46204629
   2fc1c:	47f0e8bd 	.word	0x47f0e8bd
   2fc20:	b886f003 	.word	0xb886f003
   2fc24:	b29b6803 	.word	0xb29b6803
   2fc28:	d0072b02 	.word	0xd0072b02
   2fc2c:	b29b6803 	.word	0xb29b6803
   2fc30:	d0032b04 	.word	0xd0032b04
   2fc34:	b29b6803 	.word	0xb29b6803
   2fc38:	d1e22b05 	.word	0xd1e22b05
   2fc3c:	eb044b08 	.word	0xeb044b08
   2fc40:	f81302c4 	.word	0xf81302c4
   2fc44:	2b023022 	.word	0x2b023022
   2fc48:	4601d1db 	.word	0x4601d1db
   2fc4c:	f7ff4620 	.word	0xf7ff4620
   2fc50:	2800fe9d 	.word	0x2800fe9d
   2fc54:	dcd5d0dc 	.word	0xdcd5d0dc
   2fc58:	2009e7d6 	.word	0x2009e7d6
   2fc5c:	bf00e7d2 	.word	0xbf00e7d2
   2fc60:	20024cf0 	.word	0x20024cf0

0002fc64 <tls_interface_bind>:
   2fc64:	43f8e92d 	.word	0x43f8e92d
   2fc68:	4617460c 	.word	0x4617460c
   2fc6c:	f0024606 	.word	0xf0024606
   2fc70:	2800fc31 	.word	0x2800fc31
   2fc74:	6803d04c 	.word	0x6803d04c
   2fc78:	b29b4605 	.word	0xb29b4605
   2fc7c:	d1502b02 	.word	0xd1502b02
   2fc80:	463a4621 	.word	0x463a4621
   2fc84:	f0034630 	.word	0xf0034630
   2fc88:	4604fa29 	.word	0x4604fa29
   2fc8c:	2c00b120 	.word	0x2c00b120
   2fc90:	4620dc3f 	.word	0x4620dc3f
   2fc94:	83f8e8bd 	.word	0x83f8e8bd
   2fc98:	07c6eb06 	.word	0x07c6eb06
   2fc9c:	8094f8df 	.word	0x8094f8df
   2fca0:	f81800bf 	.word	0xf81800bf
   2fca4:	2b013007 	.word	0x2b013007
   2fca8:	4603d1f3 	.word	0x4603d1f3
   2fcac:	0281f247 	.word	0x0281f247
   2fcb0:	463069a9 	.word	0x463069a9
   2fcb4:	fd86f002 	.word	0xfd86f002
   2fcb8:	b3b04681 	.word	0xb3b04681
   2fcbc:	0107eb08 	.word	0x0107eb08
   2fcc0:	30142224 	.word	0x30142224
   2fcc4:	f8f4f7ea 	.word	0xf8f4f7ea
   2fcc8:	3008f8d9 	.word	0x3008f8d9
   2fccc:	33244649 	.word	0x33244649
   2fcd0:	3008f8c9 	.word	0x3008f8c9
   2fcd4:	2304682a 	.word	0x2304682a
   2fcd8:	04120c12 	.word	0x04120c12
   2fcdc:	020af042 	.word	0x020af042
   2fce0:	4628602a 	.word	0x4628602a
   2fce4:	0281f247 	.word	0x0281f247
   2fce8:	fd8cf002 	.word	0xfd8cf002
   2fcec:	682bb9f8 	.word	0x682bb9f8
   2fcf0:	d41800db 	.word	0xd41800db
   2fcf4:	f04f4630 	.word	0xf04f4630
   2fcf8:	f64f33ff 	.word	0xf64f33ff
   2fcfc:	210b72ff 	.word	0x210b72ff
   2fd00:	fd94f002 	.word	0xfd94f002
   2fd04:	d0c42800 	.word	0xd0c42800
   2fd08:	46042304 	.word	0x46042304
   2fd0c:	e7be602b 	.word	0xe7be602b
   2fd10:	46202409 	.word	0x46202409
   2fd14:	34fff04f 	.word	0x34fff04f
   2fd18:	feacf7f5 	.word	0xfeacf7f5
   2fd1c:	e8bd4620 	.word	0xe8bd4620
   2fd20:	242d83f8 	.word	0x242d83f8
   2fd24:	2473e7f5 	.word	0x2473e7f5
   2fd28:	240ce7f3 	.word	0x240ce7f3
   2fd2c:	4604e7f1 	.word	0x4604e7f1
   2fd30:	bf00e7ad 	.word	0xbf00e7ad
   2fd34:	20024cf0 	.word	0x20024cf0

0002fd38 <tls_interface_connect>:
   2fd38:	460eb5f8 	.word	0x460eb5f8
   2fd3c:	46044617 	.word	0x46044617
   2fd40:	fbc8f002 	.word	0xfbc8f002
   2fd44:	4b13b1e8 	.word	0x4b13b1e8
   2fd48:	02c4eb04 	.word	0x02c4eb04
   2fd4c:	3022f813 	.word	0x3022f813
   2fd50:	d11c2b02 	.word	0xd11c2b02
   2fd54:	46056803 	.word	0x46056803
   2fd58:	2b02b29b 	.word	0x2b02b29b
   2fd5c:	6803d003 	.word	0x6803d003
   2fd60:	2b04b29b 	.word	0x2b04b29b
   2fd64:	463ad113 	.word	0x463ad113
   2fd68:	46204631 	.word	0x46204631
   2fd6c:	f90cf003 	.word	0xf90cf003
   2fd70:	2800b110 	.word	0x2800b110
   2fd74:	bdf8dc06 	.word	0xbdf8dc06
   2fd78:	46204629 	.word	0x46204629
   2fd7c:	fe06f7ff 	.word	0xfe06f7ff
   2fd80:	2009e7f7 	.word	0x2009e7f7
   2fd84:	fe76f7f5 	.word	0xfe76f7f5
   2fd88:	30fff04f 	.word	0x30fff04f
   2fd8c:	202dbdf8 	.word	0x202dbdf8
   2fd90:	bf00e7f8 	.word	0xbf00e7f8
   2fd94:	20024cf0 	.word	0x20024cf0

0002fd98 <tls_interface_listen>:
   2fd98:	47f0e92d 	.word	0x47f0e92d
   2fd9c:	4606460f 	.word	0x4606460f
   2fda0:	fb98f002 	.word	0xfb98f002
   2fda4:	d06b2800 	.word	0xd06b2800
   2fda8:	46046903 	.word	0x46046903
   2fdac:	d1652b01 	.word	0xd1652b01
   2fdb0:	b29b6803 	.word	0xb29b6803
   2fdb4:	d0562b04 	.word	0xd0562b04
   2fdb8:	b29b6823 	.word	0xb29b6823
   2fdbc:	d15d2b0b 	.word	0xd15d2b0b
   2fdc0:	f8df00f3 	.word	0xf8df00f3
   2fdc4:	199a90c0 	.word	0x199a90c0
   2fdc8:	2022f819 	.word	0x2022f819
   2fdcc:	d1552a01 	.word	0xd1552a01
   2fdd0:	44332201 	.word	0x44332201
   2fdd4:	f809009d 	.word	0xf809009d
   2fdd8:	69a12005 	.word	0x69a12005
   2fddc:	f2472300 	.word	0xf2472300
   2fde0:	46300281 	.word	0x46300281
   2fde4:	8000f8d4 	.word	0x8000f8d4
   2fde8:	fcecf002 	.word	0xfcecf002
   2fdec:	28004682 	.word	0x28004682
   2fdf0:	eb09d042 	.word	0xeb09d042
   2fdf4:	22240105 	.word	0x22240105
   2fdf8:	f7ea3014 	.word	0xf7ea3014
   2fdfc:	f8daf859 	.word	0xf8daf859
   2fe00:	46513008 	.word	0x46513008
   2fe04:	f8ca3324 	.word	0xf8ca3324
   2fe08:	68223008 	.word	0x68223008
   2fe0c:	0c124643 	.word	0x0c124643
   2fe10:	f0420412 	.word	0xf0420412
   2fe14:	6022020a 	.word	0x6022020a
   2fe18:	f2474620 	.word	0xf2474620
   2fe1c:	f0020281 	.word	0xf0020281
   2fe20:	b9e0fcf1 	.word	0xb9e0fcf1
   2fe24:	00db6823 	.word	0x00db6823
   2fe28:	f04fd40e 	.word	0xf04fd40e
   2fe2c:	f64f33ff 	.word	0xf64f33ff
   2fe30:	210b72ff 	.word	0x210b72ff
   2fe34:	f0024630 	.word	0xf0024630
   2fe38:	b160fcf9 	.word	0xb160fcf9
   2fe3c:	f8c42800 	.word	0xf8c42800
   2fe40:	dc028000 	.word	0xdc028000
   2fe44:	87f0e8bd 	.word	0x87f0e8bd
   2fe48:	f7f52073 	.word	0xf7f52073
   2fe4c:	f04ffe13 	.word	0xf04ffe13
   2fe50:	e8bd30ff 	.word	0xe8bd30ff
   2fe54:	463987f0 	.word	0x463987f0
   2fe58:	f0034630 	.word	0xf0034630
   2fe5c:	2800f9d5 	.word	0x2800f9d5
   2fe60:	e8bddcf3 	.word	0xe8bddcf3
   2fe64:	00f387f0 	.word	0x00f387f0
   2fe68:	9018f8df 	.word	0x9018f8df
   2fe6c:	f819199a 	.word	0xf819199a
   2fe70:	2a022022 	.word	0x2a022022
   2fe74:	e7abd1a0 	.word	0xe7abd1a0
   2fe78:	e7e6200c 	.word	0xe7e6200c
   2fe7c:	e7e4202d 	.word	0xe7e4202d
   2fe80:	e7e22009 	.word	0xe7e22009
   2fe84:	20024cf0 	.word	0x20024cf0

0002fe88 <tls_interface_accept>:
   2fe88:	460cb5f8 	.word	0x460cb5f8
   2fe8c:	461f4616 	.word	0x461f4616
   2fe90:	f0024605 	.word	0xf0024605
   2fe94:	2800fb1f 	.word	0x2800fb1f
   2fe98:	6800d03b 	.word	0x6800d03b
   2fe9c:	2806b280 	.word	0x2806b280
   2fea0:	4621d137 	.word	0x4621d137
   2fea4:	4632463b 	.word	0x4632463b
   2fea8:	f0034628 	.word	0xf0034628
   2feac:	4604fa23 	.word	0x4604fa23
   2feb0:	2c00b118 	.word	0x2c00b118
   2feb4:	4620dc2e 	.word	0x4620dc2e
   2feb8:	4628bdf8 	.word	0x4628bdf8
   2febc:	fb0af002 	.word	0xfb0af002
   2fec0:	4f186803 	.word	0x4f186803
   2fec4:	3300f423 	.word	0x3300f423
   2fec8:	68036003 	.word	0x68036003
   2fecc:	05c5eb05 	.word	0x05c5eb05
   2fed0:	1380f423 	.word	0x1380f423
   2fed4:	60034606 	.word	0x60034606
   2fed8:	0185eb07 	.word	0x0185eb07
   2fedc:	46382224 	.word	0x46382224
   2fee0:	ffe6f7e9 	.word	0xffe6f7e9
   2fee4:	703b2302 	.word	0x703b2302
   2fee8:	46206833 	.word	0x46206833
   2feec:	041b0c1b 	.word	0x041b0c1b
   2fef0:	030bf043 	.word	0x030bf043
   2fef4:	f64f6033 	.word	0xf64f6033
   2fef8:	f04f72ff 	.word	0xf04f72ff
   2fefc:	210c33ff 	.word	0x210c33ff
   2ff00:	fc94f002 	.word	0xfc94f002
   2ff04:	28004604 	.word	0x28004604
   2ff08:	2000d0d5 	.word	0x2000d0d5
   2ff0c:	fd66f002 	.word	0xfd66f002
   2ff10:	2409e7cf 	.word	0x2409e7cf
   2ff14:	f04f4620 	.word	0xf04f4620
   2ff18:	f7f534ff 	.word	0xf7f534ff
   2ff1c:	4620fdab 	.word	0x4620fdab
   2ff20:	bf00bdf8 	.word	0xbf00bdf8
   2ff24:	20024cf0 	.word	0x20024cf0

0002ff28 <tls_interface_setopt>:
   2ff28:	41f0e92d 	.word	0x41f0e92d
   2ff2c:	7f8df5b1 	.word	0x7f8df5b1
   2ff30:	d11d9f06 	.word	0xd11d9f06
   2ff34:	b1c3461c 	.word	0xb1c3461c
   2ff38:	4605b1bf 	.word	0x4605b1bf
   2ff3c:	f0024616 	.word	0xf0024616
   2ff40:	b1c8fac9 	.word	0xb1c8fac9
   2ff44:	b29b6803 	.word	0xb29b6803
   2ff48:	d0072b02 	.word	0xd0072b02
   2ff4c:	b29b6803 	.word	0xb29b6803
   2ff50:	d0032b04 	.word	0xd0032b04
   2ff54:	b29b6803 	.word	0xb29b6803
   2ff58:	d10d2b05 	.word	0xd10d2b05
   2ff5c:	2e033e01 	.word	0x2e033e01
   2ff60:	e8dfd851 	.word	0xe8dfd851
   2ff64:	3225f006 	.word	0x3225f006
   2ff68:	200e0b18 	.word	0x200e0b18
   2ff6c:	81f0e8bd 	.word	0x81f0e8bd
   2ff70:	41f0e8bd 	.word	0x41f0e8bd
   2ff74:	baf6f003 	.word	0xbaf6f003
   2ff78:	e7f72009 	.word	0xe7f72009
   2ff7c:	d1392f04 	.word	0xd1392f04
   2ff80:	2b026823 	.word	0x2b026823
   2ff84:	4a21d836 	.word	0x4a21d836
   2ff88:	05c5eb05 	.word	0x05c5eb05
   2ff8c:	0585eb02 	.word	0x0585eb02
   2ff90:	200070ab 	.word	0x200070ab
   2ff94:	2f01e7ea 	.word	0x2f01e7ea
   2ff98:	7823d12c 	.word	0x7823d12c
   2ff9c:	d8292b01 	.word	0xd8292b01
   2ffa0:	eb054a1a 	.word	0xeb054a1a
   2ffa4:	eb0205c5 	.word	0xeb0205c5
   2ffa8:	70530285 	.word	0x70530285
   2ffac:	e7dd2000 	.word	0xe7dd2000
   2ffb0:	d11f2f04 	.word	0xd11f2f04
   2ffb4:	b1f86820 	.word	0xb1f86820
   2ffb8:	d11b2801 	.word	0xd11b2801
   2ffbc:	eb054b13 	.word	0xeb054b13
   2ffc0:	f80305c5 	.word	0xf80305c5
   2ffc4:	20000025 	.word	0x20000025
   2ffc8:	ea5fe7d0 	.word	0xea5fe7d0
   2ffcc:	d0110c97 	.word	0xd0110c97
   2ffd0:	0603f017 	.word	0x0603f017
   2ffd4:	eb05d10e 	.word	0xeb05d10e
   2ffd8:	00ad05c5 	.word	0x00ad05c5
   2ffdc:	1d284b0b 	.word	0x1d284b0b
   2ffe0:	442b4418 	.word	0x442b4418
   2ffe4:	4621463a 	.word	0x4621463a
   2ffe8:	c003f883 	.word	0xc003f883
   2ffec:	ff60f7e9 	.word	0xff60f7e9
   2fff0:	e7bb4630 	.word	0xe7bb4630
   2fff4:	e7b92016 	.word	0xe7b92016
   2fff8:	4b042202 	.word	0x4b042202
   2fffc:	05c5eb05 	.word	0x05c5eb05
   30000:	2025f803 	.word	0x2025f803
   30004:	202ae7b2 	.word	0x202ae7b2
   30008:	bf00e7b0 	.word	0xbf00e7b0
   3000c:	20024cf0 	.word	0x20024cf0

00030010 <tls_interface_getopt>:
   30010:	41f0e92d 	.word	0x41f0e92d
   30014:	7f8df5b1 	.word	0x7f8df5b1
   30018:	d1129f06 	.word	0xd1129f06
   3001c:	b16b461d 	.word	0xb16b461d
   30020:	4606b167 	.word	0x4606b167
   30024:	f0024614 	.word	0xf0024614
   30028:	2800fa55 	.word	0x2800fa55
   3002c:	3c01d04f 	.word	0x3c01d04f
   30030:	d8522c03 	.word	0xd8522c03
   30034:	f004e8df 	.word	0xf004e8df
   30038:	09152139 	.word	0x09152139
   3003c:	e8bd200e 	.word	0xe8bd200e
   30040:	e8bd81f0 	.word	0xe8bd81f0
   30044:	f00341f0 	.word	0xf00341f0
   30048:	683bbb49 	.word	0x683bbb49
   3004c:	d13c2b04 	.word	0xd13c2b04
   30050:	eb064b23 	.word	0xeb064b23
   30054:	eb0306c6 	.word	0xeb0306c6
   30058:	78b30686 	.word	0x78b30686
   3005c:	602b2000 	.word	0x602b2000
   30060:	683be7ed 	.word	0x683be7ed
   30064:	d1302b04 	.word	0xd1302b04
   30068:	eb064b1d 	.word	0xeb064b1d
   3006c:	eb0306c6 	.word	0xeb0306c6
   30070:	78730686 	.word	0x78730686
   30074:	602b2000 	.word	0x602b2000
   30078:	eb06e7e1 	.word	0xeb06e7e1
   3007c:	491806c6 	.word	0x491806c6
   30080:	00b6683b 	.word	0x00b6683b
   30084:	f013198a 	.word	0xf013198a
   30088:	78d00403 	.word	0x78d00403
   3008c:	089bd121 	.word	0x089bd121
   30090:	bf284283 	.word	0xbf284283
   30094:	009a4603 	.word	0x009a4603
   30098:	3604b1db 	.word	0x3604b1db
   3009c:	603a4431 	.word	0x603a4431
   300a0:	f7e94628 	.word	0xf7e94628
   300a4:	4620ff05 	.word	0x4620ff05
   300a8:	683be7c9 	.word	0x683be7c9
   300ac:	d10c2b04 	.word	0xd10c2b04
   300b0:	eb064b0b 	.word	0xeb064b0b
   300b4:	f81306c6 	.word	0xf81306c6
   300b8:	20003026 	.word	0x20003026
   300bc:	0301f1a3 	.word	0x0301f1a3
   300c0:	f383fab3 	.word	0xf383fab3
   300c4:	602b095b 	.word	0x602b095b
   300c8:	2016e7b9 	.word	0x2016e7b9
   300cc:	2009e7b7 	.word	0x2009e7b7
   300d0:	2800e7b5 	.word	0x2800e7b5
   300d4:	6038d1f9 	.word	0x6038d1f9
   300d8:	202ae7b1 	.word	0x202ae7b1
   300dc:	bf00e7af 	.word	0xbf00e7af
   300e0:	20024cf0 	.word	0x20024cf0

000300e4 <tls_rpc_ip_event_handler>:
   300e4:	f248b538 	.word	0xf248b538
   300e8:	42ab0581 	.word	0x42ab0581
   300ec:	d053460c 	.word	0xd053460c
   300f0:	0182f249 	.word	0x0182f249
   300f4:	d02d428b 	.word	0xd02d428b
   300f8:	0102f248 	.word	0x0102f248
   300fc:	d001428b 	.word	0xd001428b
   30100:	bd382001 	.word	0xbd382001
   30104:	d0fb2c00 	.word	0xd0fb2c00
   30108:	f5b36963 	.word	0xf5b36963
   3010c:	d0027f82 	.word	0xd0027f82
   30110:	7f87f5b3 	.word	0x7f87f5b3
   30114:	6823d1f4 	.word	0x6823d1f4
   30118:	5300f023 	.word	0x5300f023
   3011c:	69556023 	.word	0x69556023
   30120:	d1482d00 	.word	0xd1482d00
   30124:	0c1b6823 	.word	0x0c1b6823
   30128:	f043041b 	.word	0xf043041b
   3012c:	60230305 	.word	0x60230305
   30130:	00da6823 	.word	0x00da6823
   30134:	4b25d50c 	.word	0x4b25d50c
   30138:	02c0eb00 	.word	0x02c0eb00
   3013c:	3022f813 	.word	0x3022f813
   30140:	d1052b02 	.word	0xd1052b02
   30144:	f7ff4621 	.word	0xf7ff4621
   30148:	b108fc21 	.word	0xb108fc21
   3014c:	d1352873 	.word	0xd1352873
   30150:	bd382000 	.word	0xbd382000
   30154:	d0fb2c00 	.word	0xd0fb2c00
   30158:	b29b6823 	.word	0xb29b6823
   3015c:	d1f72b0b 	.word	0xd1f72b0b
   30160:	bb486910 	.word	0xbb486910
   30164:	f0436823 	.word	0xf0436823
   30168:	60236380 	.word	0x60236380
   3016c:	00db6823 	.word	0x00db6823
   30170:	6823d5ee 	.word	0x6823d5ee
   30174:	6380f023 	.word	0x6380f023
   30178:	68236023 	.word	0x68236023
   3017c:	041b0c1b 	.word	0x041b0c1b
   30180:	030cf043 	.word	0x030cf043
   30184:	68236023 	.word	0x68236023
   30188:	3300f443 	.word	0x3300f443
   3018c:	68236023 	.word	0x68236023
   30190:	1380f443 	.word	0x1380f443
   30194:	bd386023 	.word	0xbd386023
   30198:	d0d92900 	.word	0xd0d92900
   3019c:	b29b680b 	.word	0xb29b680b
   301a0:	d1d52b0a 	.word	0xd1d52b0a
   301a4:	b9386950 	.word	0xb9386950
   301a8:	0c1b680b 	.word	0x0c1b680b
   301ac:	f043041b 	.word	0xf043041b
   301b0:	600b030b 	.word	0x600b030b
   301b4:	4628bd38 	.word	0x4628bd38
   301b8:	fafaf002 	.word	0xfafaf002
   301bc:	68236060 	.word	0x68236060
   301c0:	f4432000 	.word	0xf4432000
   301c4:	60232380 	.word	0x60232380
   301c8:	bf00bd38 	.word	0xbf00bd38
   301cc:	20024cf0 	.word	0x20024cf0

000301d0 <rpc_gnss_serialize_utc>:
   301d0:	b1d84603 	.word	0xb1d84603
   301d4:	2000b1d1 	.word	0x2000b1d1
   301d8:	70482201 	.word	0x70482201
   301dc:	685a700a 	.word	0x685a700a
   301e0:	f8c12010 	.word	0xf8c12010
   301e4:	681a2006 	.word	0x681a2006
   301e8:	2002f8c1 	.word	0x2002f8c1
   301ec:	200af993 	.word	0x200af993
   301f0:	f993730a 	.word	0xf993730a
   301f4:	73ca200d 	.word	0x73ca200d
   301f8:	200cf993 	.word	0x200cf993
   301fc:	7a1a738a 	.word	0x7a1a738a
   30200:	7ada728a 	.word	0x7ada728a
   30204:	7a5b734a 	.word	0x7a5b734a
   30208:	477072cb 	.word	0x477072cb
   3020c:	30fff04f 	.word	0x30fff04f
   30210:	bf004770 	.word	0xbf004770

00030214 <rpc_gnss_serialize_ephe>:
   30214:	28004603 	.word	0x28004603
   30218:	2900d04b 	.word	0x2900d04b
   3021c:	2000d049 	.word	0x2000d049
   30220:	70482202 	.word	0x70482202
   30224:	68da700a 	.word	0x68da700a
   30228:	f8c12040 	.word	0xf8c12040
   3022c:	f9b3200b 	.word	0xf9b3200b
   30230:	f8a12008 	.word	0xf8a12008
   30234:	f9932009 	.word	0xf9932009
   30238:	720a2006 	.word	0x720a2006
   3023c:	2044f9b3 	.word	0x2044f9b3
   30240:	f9b3878a 	.word	0xf9b3878a
   30244:	86ca203e 	.word	0x86ca203e
   30248:	2042f9b3 	.word	0x2042f9b3
   3024c:	f9b3874a 	.word	0xf9b3874a
   30250:	868a203c 	.word	0x868a203c
   30254:	2046f9b3 	.word	0x2046f9b3
   30258:	f9b387ca 	.word	0xf9b387ca
   3025c:	870a2040 	.word	0x870a2040
   30260:	201cf9b3 	.word	0x201cf9b3
   30264:	6a9a830a 	.word	0x6a9a830a
   30268:	2022f8c1 	.word	0x2022f8c1
   3026c:	744a7c9a 	.word	0x744a7c9a
   30270:	70ca785a 	.word	0x70ca785a
   30274:	62ca6b5a 	.word	0x62ca6b5a
   30278:	202cf9b3 	.word	0x202cf9b3
   3027c:	885a84ca 	.word	0x885a84ca
   30280:	6a1a808a 	.word	0x6a1a808a
   30284:	201af8c1 	.word	0x201af8c1
   30288:	630a6b9a 	.word	0x630a6b9a
   3028c:	f8c16a5a 	.word	0xf8c16a5a
   30290:	6b1a201e 	.word	0x6b1a201e
   30294:	781a628a 	.word	0x781a628a
   30298:	f993708a 	.word	0xf993708a
   3029c:	73ca2010 	.word	0x73ca2010
   302a0:	80ca889a 	.word	0x80ca889a
   302a4:	824a8a9a 	.word	0x824a8a9a
   302a8:	740a7c5a 	.word	0x740a7c5a
   302ac:	614b699b 	.word	0x614b699b
   302b0:	f04f4770 	.word	0xf04f4770
   302b4:	477030ff 	.word	0x477030ff

000302b8 <rpc_gnss_serialize_alm>:
   302b8:	b3604603 	.word	0xb3604603
   302bc:	2000b359 	.word	0x2000b359
   302c0:	70482203 	.word	0x70482203
   302c4:	f9b3700a 	.word	0xf9b3700a
   302c8:	2021201c 	.word	0x2021201c
   302cc:	201df8a1 	.word	0x201df8a1
   302d0:	201ef9b3 	.word	0x201ef9b3
   302d4:	201ff8a1 	.word	0x201ff8a1
   302d8:	2006f9b3 	.word	0x2006f9b3
   302dc:	889a810a 	.word	0x889a810a
   302e0:	78da80ca 	.word	0x78da80ca
   302e4:	699a714a 	.word	0x699a714a
   302e8:	2019f8c1 	.word	0x2019f8c1
   302ec:	f8c1691a 	.word	0xf8c1691a
   302f0:	f9b32011 	.word	0xf9b32011
   302f4:	814a2008 	.word	0x814a2008
   302f8:	f8c168da 	.word	0xf8c168da
   302fc:	7a9a200d 	.word	0x7a9a200d
   30300:	781a730a 	.word	0x781a730a
   30304:	789a708a 	.word	0x789a708a
   30308:	695a710a 	.word	0x695a710a
   3030c:	2015f8c1 	.word	0x2015f8c1
   30310:	70cb785b 	.word	0x70cb785b
   30314:	f04f4770 	.word	0xf04f4770
   30318:	477030ff 	.word	0x477030ff

0003031c <rpc_gnss_serialize_klob>:
   3031c:	b1f04603 	.word	0xb1f04603
   30320:	2000b1e9 	.word	0x2000b1e9
   30324:	70482204 	.word	0x70482204
   30328:	f993700a 	.word	0xf993700a
   3032c:	200a2000 	.word	0x200a2000
   30330:	f993708a 	.word	0xf993708a
   30334:	70ca2001 	.word	0x70ca2001
   30338:	2002f993 	.word	0x2002f993
   3033c:	f993710a 	.word	0xf993710a
   30340:	714a2003 	.word	0x714a2003
   30344:	2004f993 	.word	0x2004f993
   30348:	f993718a 	.word	0xf993718a
   3034c:	71ca2005 	.word	0x71ca2005
   30350:	2006f993 	.word	0x2006f993
   30354:	f993720a 	.word	0xf993720a
   30358:	724b3007 	.word	0x724b3007
   3035c:	f04f4770 	.word	0xf04f4770
   30360:	477030ff 	.word	0x477030ff

00030364 <rpc_gnss_serialize_nequick>:
   30364:	b1984603 	.word	0xb1984603
   30368:	2000b191 	.word	0x2000b191
   3036c:	70482205 	.word	0x70482205
   30370:	f9b3700a 	.word	0xf9b3700a
   30374:	200a2000 	.word	0x200a2000
   30378:	f9b3804a 	.word	0xf9b3804a
   3037c:	808a2002 	.word	0x808a2002
   30380:	2004f9b3 	.word	0x2004f9b3
   30384:	799a80ca 	.word	0x799a80ca
   30388:	79db720a 	.word	0x79db720a
   3038c:	4770724b 	.word	0x4770724b
   30390:	30fff04f 	.word	0x30fff04f
   30394:	bf004770 	.word	0xbf004770

00030398 <rpc_gnss_serialize_time_and_sv_tow>:
   30398:	b309b310 	.word	0xb309b310
   3039c:	2500b470 	.word	0x2500b470
   303a0:	460c2606 	.word	0x460c2606
   303a4:	700e704d 	.word	0x700e704d
   303a8:	8805462b 	.word	0x8805462b
   303ac:	804d4602 	.word	0x804d4602
   303b0:	f8c168c5 	.word	0xf8c168c5
   303b4:	8905500a 	.word	0x8905500a
   303b8:	6840810d 	.word	0x6840810d
   303bc:	8a156048 	.word	0x8a156048
   303c0:	0043eb03 	.word	0x0043eb03
   303c4:	81c54408 	.word	0x81c54408
   303c8:	33017c90 	.word	0x33017c90
   303cc:	74202b20 	.word	0x74202b20
   303d0:	0204f102 	.word	0x0204f102
   303d4:	0403f104 	.word	0x0403f104
   303d8:	206ed1f1 	.word	0x206ed1f1
   303dc:	4770bc70 	.word	0x4770bc70
   303e0:	30fff04f 	.word	0x30fff04f
   303e4:	bf004770 	.word	0xbf004770

000303e8 <rpc_gnss_serialize_location>:
   303e8:	b1c84603 	.word	0xb1c84603
   303ec:	2000b1c1 	.word	0x2000b1c1
   303f0:	70482207 	.word	0x70482207
   303f4:	f9b3700a 	.word	0xf9b3700a
   303f8:	20112008 	.word	0x20112008
   303fc:	7b9a814a 	.word	0x7b9a814a
   30400:	681a740a 	.word	0x681a740a
   30404:	2002f8c1 	.word	0x2002f8c1
   30408:	f8c1685a 	.word	0xf8c1685a
   3040c:	7b1a2006 	.word	0x7b1a2006
   30410:	7b5a738a 	.word	0x7b5a738a
   30414:	7a9a73ca 	.word	0x7a9a73ca
   30418:	7adb730a 	.word	0x7adb730a
   3041c:	4770734b 	.word	0x4770734b
   30420:	30fff04f 	.word	0x30fff04f
   30424:	bf004770 	.word	0xbf004770

00030428 <rpc_gnss_serialize_integrity>:
   30428:	b141b148 	.word	0xb141b148
   3042c:	23082200 	.word	0x23082200
   30430:	700b704a 	.word	0x700b704a
   30434:	20066803 	.word	0x20066803
   30438:	3002f8c1 	.word	0x3002f8c1
   3043c:	f04f4770 	.word	0xf04f4770
   30440:	477030ff 	.word	0x477030ff

00030444 <ipc_trace_init>:
   30444:	60184b01 	.word	0x60184b01
   30448:	bf004770 	.word	0xbf004770
   3044c:	20024e1c 	.word	0x20024e1c

00030450 <bsd_os_trace_irq_handler>:
   30450:	4b6cb5f0 	.word	0x4b6cb5f0
   30454:	781bb083 	.word	0x781bb083
   30458:	f0002b00 	.word	0xf0002b00
   3045c:	4b6a80ad 	.word	0x4b6a80ad
   30460:	68a2681c 	.word	0x68a2681c
   30464:	429a6863 	.word	0x429a6863
   30468:	f64bd02d 	.word	0xf64bd02d
   3046c:	f8ad63ef 	.word	0xf8ad63ef
   30470:	78233000 	.word	0x78233000
   30474:	f88d466e 	.word	0xf88d466e
   30478:	68633004 	.word	0x68633004
   3047c:	429a2105 	.word	0x429a2105
   30480:	6927bf2a 	.word	0x6927bf2a
   30484:	1abf1a9f 	.word	0x1abf1a9f
   30488:	bf94429a 	.word	0xbf94429a
   3048c:	68e52500 	.word	0x68e52500
   30490:	bf88b2bf 	.word	0xbf88b2bf
   30494:	46301b5b 	.word	0x46301b5b
   30498:	b29dbf88 	.word	0xb29dbf88
   3049c:	7002f8ad 	.word	0x7002f8ad
   304a0:	fe1ef018 	.word	0xfe1ef018
   304a4:	1002f8bd 	.word	0x1002f8bd
   304a8:	f01868a0 	.word	0xf01868a0
   304ac:	68a3fe19 	.word	0x68a3fe19
   304b0:	441f6922 	.word	0x441f6922
   304b4:	bf084297 	.word	0xbf084297
   304b8:	60a768e3 	.word	0x60a768e3
   304bc:	60a3bf08 	.word	0x60a3bf08
   304c0:	f0402d00 	.word	0xf0402d00
   304c4:	4b51808d 	.word	0x4b51808d
   304c8:	68a2681c 	.word	0x68a2681c
   304cc:	429a6863 	.word	0x429a6863
   304d0:	f64bd02c 	.word	0xf64bd02c
   304d4:	f8ad63ef 	.word	0xf8ad63ef
   304d8:	78233000 	.word	0x78233000
   304dc:	f88d466e 	.word	0xf88d466e
   304e0:	68633004 	.word	0x68633004
   304e4:	429a2105 	.word	0x429a2105
   304e8:	6927bf2a 	.word	0x6927bf2a
   304ec:	1abf1a9f 	.word	0x1abf1a9f
   304f0:	bf94429a 	.word	0xbf94429a
   304f4:	68e52500 	.word	0x68e52500
   304f8:	bf88b2bf 	.word	0xbf88b2bf
   304fc:	46301b5b 	.word	0x46301b5b
   30500:	b29dbf88 	.word	0xb29dbf88
   30504:	7002f8ad 	.word	0x7002f8ad
   30508:	fdeaf018 	.word	0xfdeaf018
   3050c:	1002f8bd 	.word	0x1002f8bd
   30510:	f01868a0 	.word	0xf01868a0
   30514:	68a3fde5 	.word	0x68a3fde5
   30518:	441f6922 	.word	0x441f6922
   3051c:	bf084297 	.word	0xbf084297
   30520:	60a768e3 	.word	0x60a768e3
   30524:	60a3bf08 	.word	0x60a3bf08
   30528:	d1482d00 	.word	0xd1482d00
   3052c:	681c4b38 	.word	0x681c4b38
   30530:	686368a2 	.word	0x686368a2
   30534:	d02b429a 	.word	0xd02b429a
   30538:	63eff64b 	.word	0x63eff64b
   3053c:	3000f8ad 	.word	0x3000f8ad
   30540:	466e7823 	.word	0x466e7823
   30544:	3004f88d 	.word	0x3004f88d
   30548:	21056863 	.word	0x21056863
   3054c:	bf2a429a 	.word	0xbf2a429a
   30550:	1a9f6927 	.word	0x1a9f6927
   30554:	429a1abf 	.word	0x429a1abf
   30558:	2500bf94 	.word	0x2500bf94
   3055c:	b2bf68e5 	.word	0xb2bf68e5
   30560:	1b5bbf88 	.word	0x1b5bbf88
   30564:	bf884630 	.word	0xbf884630
   30568:	f8adb29d 	.word	0xf8adb29d
   3056c:	f0187002 	.word	0xf0187002
   30570:	f8bdfdb7 	.word	0xf8bdfdb7
   30574:	68a01002 	.word	0x68a01002
   30578:	fdb2f018 	.word	0xfdb2f018
   3057c:	692268a3 	.word	0x692268a3
   30580:	4297441f 	.word	0x4297441f
   30584:	68e3bf08 	.word	0x68e3bf08
   30588:	bf0860a7 	.word	0xbf0860a7
   3058c:	b90d60a3 	.word	0xb90d60a3
   30590:	bdf0b003 	.word	0xbdf0b003
   30594:	21054630 	.word	0x21054630
   30598:	5002f8ad 	.word	0x5002f8ad
   3059c:	fda0f018 	.word	0xfda0f018
   305a0:	1002f8bd 	.word	0x1002f8bd
   305a4:	f01868e0 	.word	0xf01868e0
   305a8:	f8bdfd9b 	.word	0xf8bdfd9b
   305ac:	68e32002 	.word	0x68e32002
   305b0:	60a34413 	.word	0x60a34413
   305b4:	bdf0b003 	.word	0xbdf0b003
   305b8:	fb60f7f5 	.word	0xfb60f7f5
   305bc:	2105e74f 	.word	0x2105e74f
   305c0:	f8ad4630 	.word	0xf8ad4630
   305c4:	f0185002 	.word	0xf0185002
   305c8:	f8bdfd8b 	.word	0xf8bdfd8b
   305cc:	68e01002 	.word	0x68e01002
   305d0:	fd86f018 	.word	0xfd86f018
   305d4:	2002f8bd 	.word	0x2002f8bd
   305d8:	441368e3 	.word	0x441368e3
   305dc:	e7a560a3 	.word	0xe7a560a3
   305e0:	46302105 	.word	0x46302105
   305e4:	5002f8ad 	.word	0x5002f8ad
   305e8:	fd7af018 	.word	0xfd7af018
   305ec:	1002f8bd 	.word	0x1002f8bd
   305f0:	f01868e0 	.word	0xf01868e0
   305f4:	f8bdfd75 	.word	0xf8bdfd75
   305f8:	68e32002 	.word	0x68e32002
   305fc:	60a34413 	.word	0x60a34413
   30600:	bf00e761 	.word	0xbf00e761
   30604:	2002c1f8 	.word	0x2002c1f8
   30608:	20024e18 	.word	0x20024e18
   3060c:	20024e10 	.word	0x20024e10
   30610:	20024e14 	.word	0x20024e14

00030614 <ipc_trace_handle>:
   30614:	e92d2200 	.word	0xe92d2200
   30618:	4bb04ff0 	.word	0x4bb04ff0
   3061c:	681bb083 	.word	0x681bb083
   30620:	695c6919 	.word	0x695c6919
   30624:	741a7c18 	.word	0x741a7c18
   30628:	745a7c58 	.word	0x745a7c58
   3062c:	749a7c98 	.word	0x749a7c98
   30630:	74da7cd8 	.word	0x74da7cd8
   30634:	751a7d18 	.word	0x751a7d18
   30638:	755a7d58 	.word	0x755a7d58
   3063c:	759a7d98 	.word	0x759a7d98
   30640:	75da7dd8 	.word	0x75da7dd8
   30644:	3901b1b9 	.word	0x3901b1b9
   30648:	d8142903 	.word	0xd8142903
   3064c:	f011e8df 	.word	0xf011e8df
   30650:	010300d6 	.word	0x010300d6
   30654:	00160004 	.word	0x00160004
   30658:	20032501 	.word	0x20032501
   3065c:	f06f2200 	.word	0xf06f2200
   30660:	4c9f015f 	.word	0x4c9f015f
   30664:	7a1c7025 	.word	0x7a1c7025
   30668:	7a587218 	.word	0x7a587218
   3066c:	7a98725a 	.word	0x7a98725a
   30670:	7ada729a 	.word	0x7ada729a
   30674:	b00372d9 	.word	0xb00372d9
   30678:	8ff0e8bd 	.word	0x8ff0e8bd
   3067c:	22002104 	.word	0x22002104
   30680:	005ff06f 	.word	0x005ff06f
   30684:	72197a1c 	.word	0x72197a1c
   30688:	725a7a59 	.word	0x725a7a59
   3068c:	7a9c4994 	.word	0x7a9c4994
   30690:	7adc729a 	.word	0x7adc729a
   30694:	700a72d8 	.word	0x700a72d8
   30698:	2b00780b 	.word	0x2b00780b
   3069c:	8117f000 	.word	0x8117f000
   306a0:	681c4b90 	.word	0x681c4b90
   306a4:	686368a2 	.word	0x686368a2
   306a8:	d02d429a 	.word	0xd02d429a
   306ac:	63eff64b 	.word	0x63eff64b
   306b0:	3000f8ad 	.word	0x3000f8ad
   306b4:	466e7823 	.word	0x466e7823
   306b8:	3004f88d 	.word	0x3004f88d
   306bc:	21056863 	.word	0x21056863
   306c0:	bf2a429a 	.word	0xbf2a429a
   306c4:	1a9f6927 	.word	0x1a9f6927
   306c8:	429a1abf 	.word	0x429a1abf
   306cc:	2500bf94 	.word	0x2500bf94
   306d0:	b2bf68e5 	.word	0xb2bf68e5
   306d4:	1b5bbf88 	.word	0x1b5bbf88
   306d8:	bf884630 	.word	0xbf884630
   306dc:	f8adb29d 	.word	0xf8adb29d
   306e0:	f0187002 	.word	0xf0187002
   306e4:	f8bdfcfd 	.word	0xf8bdfcfd
   306e8:	68a01002 	.word	0x68a01002
   306ec:	fcf8f018 	.word	0xfcf8f018
   306f0:	692268a3 	.word	0x692268a3
   306f4:	4297441f 	.word	0x4297441f
   306f8:	68e3bf08 	.word	0x68e3bf08
   306fc:	bf0860a7 	.word	0xbf0860a7
   30700:	2d0060a3 	.word	0x2d0060a3
   30704:	80d2f040 	.word	0x80d2f040
   30708:	681c4b77 	.word	0x681c4b77
   3070c:	686368a2 	.word	0x686368a2
   30710:	d02d429a 	.word	0xd02d429a
   30714:	63eff64b 	.word	0x63eff64b
   30718:	3000f8ad 	.word	0x3000f8ad
   3071c:	466e7823 	.word	0x466e7823
   30720:	3004f88d 	.word	0x3004f88d
   30724:	21056863 	.word	0x21056863
   30728:	bf2a429a 	.word	0xbf2a429a
   3072c:	1a9f6927 	.word	0x1a9f6927
   30730:	429a1abf 	.word	0x429a1abf
   30734:	2500bf94 	.word	0x2500bf94
   30738:	b2bf68e5 	.word	0xb2bf68e5
   3073c:	1b5bbf88 	.word	0x1b5bbf88
   30740:	bf884630 	.word	0xbf884630
   30744:	f8adb29d 	.word	0xf8adb29d
   30748:	f0187002 	.word	0xf0187002
   3074c:	f8bdfcc9 	.word	0xf8bdfcc9
   30750:	68a01002 	.word	0x68a01002
   30754:	fcc4f018 	.word	0xfcc4f018
   30758:	692268a3 	.word	0x692268a3
   3075c:	4297441f 	.word	0x4297441f
   30760:	68e3bf08 	.word	0x68e3bf08
   30764:	bf0860a7 	.word	0xbf0860a7
   30768:	2d0060a3 	.word	0x2d0060a3
   3076c:	808df040 	.word	0x808df040
   30770:	681c4b5e 	.word	0x681c4b5e
   30774:	686368a2 	.word	0x686368a2
   30778:	f43f429a 	.word	0xf43f429a
   3077c:	f64baf7c 	.word	0xf64baf7c
   30780:	f8ad63ef 	.word	0xf8ad63ef
   30784:	78233000 	.word	0x78233000
   30788:	f88d466e 	.word	0xf88d466e
   3078c:	68633004 	.word	0x68633004
   30790:	429a2105 	.word	0x429a2105
   30794:	6927bf2a 	.word	0x6927bf2a
   30798:	1abf1a9f 	.word	0x1abf1a9f
   3079c:	bf94429a 	.word	0xbf94429a
   307a0:	68e52500 	.word	0x68e52500
   307a4:	bf88b2bf 	.word	0xbf88b2bf
   307a8:	46301b5b 	.word	0x46301b5b
   307ac:	b29dbf88 	.word	0xb29dbf88
   307b0:	7002f8ad 	.word	0x7002f8ad
   307b4:	fc94f018 	.word	0xfc94f018
   307b8:	1002f8bd 	.word	0x1002f8bd
   307bc:	f01868a0 	.word	0xf01868a0
   307c0:	68a3fc8f 	.word	0x68a3fc8f
   307c4:	441f6922 	.word	0x441f6922
   307c8:	bf084297 	.word	0xbf084297
   307cc:	60a768e3 	.word	0x60a768e3
   307d0:	60a3bf08 	.word	0x60a3bf08
   307d4:	f43f2d00 	.word	0xf43f2d00
   307d8:	2105af4e 	.word	0x2105af4e
   307dc:	f8ad4630 	.word	0xf8ad4630
   307e0:	f0185002 	.word	0xf0185002
   307e4:	f8bdfc7d 	.word	0xf8bdfc7d
   307e8:	68e01002 	.word	0x68e01002
   307ec:	fc78f018 	.word	0xfc78f018
   307f0:	2002f8bd 	.word	0x2002f8bd
   307f4:	441368e3 	.word	0x441368e3
   307f8:	e73c60a3 	.word	0xe73c60a3
   307fc:	78114a38 	.word	0x78114a38
   30800:	2100b109 	.word	0x2100b109
   30804:	68a57011 	.word	0x68a57011
   30808:	d0392d00 	.word	0xd0392d00
   3080c:	0c00f04f 	.word	0x0c00f04f
   30810:	a0d4f8df 	.word	0xa0d4f8df
   30814:	b0ccf8df 	.word	0xb0ccf8df
   30818:	46e14934 	.word	0x46e14934
   3081c:	46624666 	.word	0x46624666
   30820:	e000f8d1 	.word	0xe000f8d1
   30824:	8000f8da 	.word	0x8000f8da
   30828:	7000f8db 	.word	0x7000f8db
   3082c:	2963e008 	.word	0x2963e008
   30830:	2961d016 	.word	0x2961d016
   30834:	4607bf04 	.word	0x4607bf04
   30838:	32012601 	.word	0x32012601
   3083c:	d01342aa 	.word	0xd01342aa
   30840:	eb041c91 	.word	0xeb041c91
   30844:	68480181 	.word	0x68480181
   30848:	29627801 	.word	0x29627801
   3084c:	4680d1ef 	.word	0x4680d1ef
   30850:	0901f04f 	.word	0x0901f04f
   30854:	f7f5e7f1 	.word	0xf7f5e7f1
   30858:	b003fa09 	.word	0xb003fa09
   3085c:	8ff0e8bd 	.word	0x8ff0e8bd
   30860:	f04f4686 	.word	0xf04f4686
   30864:	e7e80c01 	.word	0xe7e80c01
   30868:	f1b9bba6 	.word	0xf1b9bba6
   3086c:	d0010f00 	.word	0xd0010f00
   30870:	8000f8ca 	.word	0x8000f8ca
   30874:	0f00f1bc 	.word	0x0f00f1bc
   30878:	4a1cd002 	.word	0x4a1cd002
   3087c:	e000f8c2 	.word	0xe000f8c2
   30880:	22002001 	.word	0x22002001
   30884:	015ff06f 	.word	0x015ff06f
   30888:	2105e6ed 	.word	0x2105e6ed
   3088c:	f8ad4630 	.word	0xf8ad4630
   30890:	f0185002 	.word	0xf0185002
   30894:	f8bdfc25 	.word	0xf8bdfc25
   30898:	68e01002 	.word	0x68e01002
   3089c:	fc20f018 	.word	0xfc20f018
   308a0:	2002f8bd 	.word	0x2002f8bd
   308a4:	441368e3 	.word	0x441368e3
   308a8:	e76160a3 	.word	0xe76160a3
   308ac:	46302105 	.word	0x46302105
   308b0:	5002f8ad 	.word	0x5002f8ad
   308b4:	fc14f018 	.word	0xfc14f018
   308b8:	1002f8bd 	.word	0x1002f8bd
   308bc:	f01868e0 	.word	0xf01868e0
   308c0:	f8bdfc0f 	.word	0xf8bdfc0f
   308c4:	68e32002 	.word	0x68e32002
   308c8:	60a34413 	.word	0x60a34413
   308cc:	f7f5e71c 	.word	0xf7f5e71c
   308d0:	e6e5f9d5 	.word	0xe6e5f9d5
   308d4:	7000f8cb 	.word	0x7000f8cb
   308d8:	bf00e7c7 	.word	0xbf00e7c7
   308dc:	20024e1c 	.word	0x20024e1c
   308e0:	2002c1f8 	.word	0x2002c1f8
   308e4:	20024e18 	.word	0x20024e18
   308e8:	20024e10 	.word	0x20024e10
   308ec:	20024e14 	.word	0x20024e14

000308f0 <rpc_trace_coredump_in_progress>:
   308f0:	78184b01 	.word	0x78184b01
   308f4:	bf004770 	.word	0xbf004770
   308f8:	2002c1f8 	.word	0x2002c1f8

000308fc <ecp_modp>:
   308fc:	6e4bb570 	.word	0x6e4bb570
   30900:	2b004604 	.word	0x2b004604
   30904:	6803d03d 	.word	0x6803d03d
   30908:	2b00460d 	.word	0x2b00460d
   3090c:	4620db2f 	.word	0x4620db2f
   30910:	fe88f005 	.word	0xfe88f005
   30914:	ebb06dab 	.word	0xebb06dab
   30918:	d82d0f43 	.word	0xd82d0f43
   3091c:	46206e6b 	.word	0x46206e6b
   30920:	46064798 	.word	0x46064798
   30924:	3504bb08 	.word	0x3504bb08
   30928:	2100e00a 	.word	0x2100e00a
   3092c:	f0064620 	.word	0xf0064620
   30930:	b1a0f949 	.word	0xb1a0f949
   30934:	4621462a 	.word	0x4621462a
   30938:	f0064620 	.word	0xf0064620
   3093c:	b9e8fafb 	.word	0xb9e8fafb
   30940:	2b006823 	.word	0x2b006823
   30944:	4629dbf1 	.word	0x4629dbf1
   30948:	f0064620 	.word	0xf0064620
   3094c:	2800f8d3 	.word	0x2800f8d3
   30950:	462adb0b 	.word	0x462adb0b
   30954:	46204621 	.word	0x46204621
   30958:	fa2cf006 	.word	0xfa2cf006
   3095c:	4629b970 	.word	0x4629b970
   30960:	f0064620 	.word	0xf0064620
   30964:	2800f8c7 	.word	0x2800f8c7
   30968:	4630daf3 	.word	0x4630daf3
   3096c:	2100bd70 	.word	0x2100bd70
   30970:	f928f006 	.word	0xf928f006
   30974:	d0ca2800 	.word	0xd0ca2800
   30978:	e7f64e05 	.word	0xe7f64e05
   3097c:	46304606 	.word	0x46304606
   30980:	1d0abd70 	.word	0x1d0abd70
   30984:	4070e8bd 	.word	0x4070e8bd
   30988:	f0074601 	.word	0xf0074601
   3098c:	bf00b8cf 	.word	0xbf00b8cf
   30990:	ffffb080 	.word	0xffffb080

00030994 <ecp_double_jac>:
   30994:	43f0e92d 	.word	0x43f0e92d
   30998:	b08d4606 	.word	0xb08d4606
   3099c:	46884668 	.word	0x46884668
   309a0:	f0054615 	.word	0xf0054615
   309a4:	a803fbe5 	.word	0xa803fbe5
   309a8:	fbe2f005 	.word	0xfbe2f005
   309ac:	f005a806 	.word	0xf005a806
   309b0:	a809fbdf 	.word	0xa809fbdf
   309b4:	fbdcf005 	.word	0xfbdcf005
   309b8:	2b0069b3 	.word	0x2b0069b3
   309bc:	80b2f000 	.word	0x80b2f000
   309c0:	4629462a 	.word	0x4629462a
   309c4:	f006a803 	.word	0xf006a803
   309c8:	4604fbe9 	.word	0x4604fbe9
   309cc:	4668b178 	.word	0x4668b178
   309d0:	fbd6f005 	.word	0xfbd6f005
   309d4:	f005a803 	.word	0xf005a803
   309d8:	a806fbd3 	.word	0xa806fbd3
   309dc:	fbd0f005 	.word	0xfbd0f005
   309e0:	f005a809 	.word	0xf005a809
   309e4:	4620fbcd 	.word	0x4620fbcd
   309e8:	e8bdb00d 	.word	0xe8bdb00d
   309ec:	463183f0 	.word	0x463183f0
   309f0:	f7ffa803 	.word	0xf7ffa803
   309f4:	4604ff83 	.word	0x4604ff83
   309f8:	d1e82800 	.word	0xd1e82800
   309fc:	a9032203 	.word	0xa9032203
   30a00:	f0064668 	.word	0xf0064668
   30a04:	4604fcc3 	.word	0x4604fcc3
   30a08:	d1e02800 	.word	0xd1e02800
   30a0c:	e0071d37 	.word	0xe0071d37
   30a10:	4669463a 	.word	0x4669463a
   30a14:	f0064668 	.word	0xf0064668
   30a18:	4604f9cd 	.word	0x4604f9cd
   30a1c:	d1d62800 	.word	0xd1d62800
   30a20:	46684639 	.word	0x46684639
   30a24:	f866f006 	.word	0xf866f006
   30a28:	daf12800 	.word	0xdaf12800
   30a2c:	0910f106 	.word	0x0910f106
   30a30:	21004648 	.word	0x21004648
   30a34:	f8c6f006 	.word	0xf8c6f006
   30a38:	f0402800 	.word	0xf0402800
   30a3c:	f10580e2 	.word	0xf10580e2
   30a40:	464a090c 	.word	0x464a090c
   30a44:	a8064649 	.word	0xa8064649
   30a48:	fba8f006 	.word	0xfba8f006
   30a4c:	28004604 	.word	0x28004604
   30a50:	4631d1bd 	.word	0x4631d1bd
   30a54:	f7ffa806 	.word	0xf7ffa806
   30a58:	4604ff51 	.word	0x4604ff51
   30a5c:	d1b62800 	.word	0xd1b62800
   30a60:	a8062101 	.word	0xa8062101
   30a64:	ff20f005 	.word	0xff20f005
   30a68:	b1404604 	.word	0xb1404604
   30a6c:	a906e7af 	.word	0xa906e7af
   30a70:	4608463a 	.word	0x4608463a
   30a74:	f99ef006 	.word	0xf99ef006
   30a78:	28004604 	.word	0x28004604
   30a7c:	4639d1a7 	.word	0x4639d1a7
   30a80:	f006a806 	.word	0xf006a806
   30a84:	2800f837 	.word	0x2800f837
   30a88:	aa06daf1 	.word	0xaa06daf1
   30a8c:	a8034629 	.word	0xa8034629
   30a90:	fb84f006 	.word	0xfb84f006
   30a94:	28004604 	.word	0x28004604
   30a98:	4631d199 	.word	0x4631d199
   30a9c:	f7ffa803 	.word	0xf7ffa803
   30aa0:	4604ff2d 	.word	0x4604ff2d
   30aa4:	d1922800 	.word	0xd1922800
   30aa8:	a8032101 	.word	0xa8032101
   30aac:	fefcf005 	.word	0xfefcf005
   30ab0:	b1404604 	.word	0xb1404604
   30ab4:	a903e78b 	.word	0xa903e78b
   30ab8:	4608463a 	.word	0x4608463a
   30abc:	f97af006 	.word	0xf97af006
   30ac0:	28004604 	.word	0x28004604
   30ac4:	4639d183 	.word	0x4639d183
   30ac8:	f006a803 	.word	0xf006a803
   30acc:	2800f813 	.word	0x2800f813
   30ad0:	aa06daf1 	.word	0xaa06daf1
   30ad4:	a8094611 	.word	0xa8094611
   30ad8:	fb60f006 	.word	0xfb60f006
   30adc:	28004604 	.word	0x28004604
   30ae0:	af75f47f 	.word	0xaf75f47f
   30ae4:	a8094631 	.word	0xa8094631
   30ae8:	ff08f7ff 	.word	0xff08f7ff
   30aec:	28004604 	.word	0x28004604
   30af0:	af6df47f 	.word	0xaf6df47f
   30af4:	a8092101 	.word	0xa8092101
   30af8:	fed6f005 	.word	0xfed6f005
   30afc:	28004604 	.word	0x28004604
   30b00:	af65f47f 	.word	0xaf65f47f
   30b04:	a8094639 	.word	0xa8094639
   30b08:	fff4f005 	.word	0xfff4f005
   30b0c:	f2c02800 	.word	0xf2c02800
   30b10:	a90980c5 	.word	0xa90980c5
   30b14:	4608463a 	.word	0x4608463a
   30b18:	f94cf006 	.word	0xf94cf006
   30b1c:	28004604 	.word	0x28004604
   30b20:	e754d0f0 	.word	0xe754d0f0
   30b24:	0218f105 	.word	0x0218f105
   30b28:	a8034611 	.word	0xa8034611
   30b2c:	fb36f006 	.word	0xfb36f006
   30b30:	28004604 	.word	0x28004604
   30b34:	af4bf47f 	.word	0xaf4bf47f
   30b38:	a8034631 	.word	0xa8034631
   30b3c:	fedef7ff 	.word	0xfedef7ff
   30b40:	28004604 	.word	0x28004604
   30b44:	af43f47f 	.word	0xaf43f47f
   30b48:	4629aa03 	.word	0x4629aa03
   30b4c:	f006a806 	.word	0xf006a806
   30b50:	4604f9f1 	.word	0x4604f9f1
   30b54:	f47f2800 	.word	0xf47f2800
   30b58:	1d37af3a 	.word	0x1d37af3a
   30b5c:	a906e008 	.word	0xa906e008
   30b60:	4608463a 	.word	0x4608463a
   30b64:	f926f006 	.word	0xf926f006
   30b68:	28004604 	.word	0x28004604
   30b6c:	af2ff47f 	.word	0xaf2ff47f
   30b70:	a8064639 	.word	0xa8064639
   30b74:	ffbef005 	.word	0xffbef005
   30b78:	daf02800 	.word	0xdaf02800
   30b7c:	4629aa03 	.word	0x4629aa03
   30b80:	f006a809 	.word	0xf006a809
   30b84:	4604fa4b 	.word	0x4604fa4b
   30b88:	e720b170 	.word	0xe720b170
   30b8c:	a8092100 	.word	0xa8092100
   30b90:	f818f006 	.word	0xf818f006
   30b94:	a909b158 	.word	0xa909b158
   30b98:	4608463a 	.word	0x4608463a
   30b9c:	f9caf006 	.word	0xf9caf006
   30ba0:	28004604 	.word	0x28004604
   30ba4:	af13f47f 	.word	0xaf13f47f
   30ba8:	2b009b09 	.word	0x2b009b09
   30bac:	aa09dbee 	.word	0xaa09dbee
   30bb0:	a803a906 	.word	0xa803a906
   30bb4:	faf2f006 	.word	0xfaf2f006
   30bb8:	28004604 	.word	0x28004604
   30bbc:	af07f47f 	.word	0xaf07f47f
   30bc0:	a8034631 	.word	0xa8034631
   30bc4:	fe9af7ff 	.word	0xfe9af7ff
   30bc8:	28004604 	.word	0x28004604
   30bcc:	aefff47f 	.word	0xaefff47f
   30bd0:	a9032203 	.word	0xa9032203
   30bd4:	f0064668 	.word	0xf0064668
   30bd8:	4604fbd9 	.word	0x4604fbd9
   30bdc:	f47f2800 	.word	0xf47f2800
   30be0:	4639aef6 	.word	0x4639aef6
   30be4:	f0054668 	.word	0xf0054668
   30be8:	2800ff85 	.word	0x2800ff85
   30bec:	af27f6ff 	.word	0xaf27f6ff
   30bf0:	4669463a 	.word	0x4669463a
   30bf4:	f0064668 	.word	0xf0064668
   30bf8:	4604f8dd 	.word	0x4604f8dd
   30bfc:	d0f02800 	.word	0xd0f02800
   30c00:	f105e6e5 	.word	0xf105e6e5
   30c04:	46110218 	.word	0x46110218
   30c08:	f006a803 	.word	0xf006a803
   30c0c:	4604fac7 	.word	0x4604fac7
   30c10:	f47f2800 	.word	0xf47f2800
   30c14:	4631aedc 	.word	0x4631aedc
   30c18:	f7ffa803 	.word	0xf7ffa803
   30c1c:	4604fe6f 	.word	0x4604fe6f
   30c20:	f47f2800 	.word	0xf47f2800
   30c24:	aa03aed4 	.word	0xaa03aed4
   30c28:	a8064611 	.word	0xa8064611
   30c2c:	fab6f006 	.word	0xfab6f006
   30c30:	28004604 	.word	0x28004604
   30c34:	aecbf47f 	.word	0xaecbf47f
   30c38:	a8064631 	.word	0xa8064631
   30c3c:	fe5ef7ff 	.word	0xfe5ef7ff
   30c40:	28004604 	.word	0x28004604
   30c44:	aec3f47f 	.word	0xaec3f47f
   30c48:	a906464a 	.word	0xa906464a
   30c4c:	f006a803 	.word	0xf006a803
   30c50:	4604faa5 	.word	0x4604faa5
   30c54:	f47f2800 	.word	0xf47f2800
   30c58:	4631aeba 	.word	0x4631aeba
   30c5c:	f7ffa803 	.word	0xf7ffa803
   30c60:	4604fe4d 	.word	0x4604fe4d
   30c64:	f47f2800 	.word	0xf47f2800
   30c68:	aa03aeb2 	.word	0xaa03aeb2
   30c6c:	46684669 	.word	0x46684669
   30c70:	f960f006 	.word	0xf960f006
   30c74:	28004604 	.word	0x28004604
   30c78:	aea9f47f 	.word	0xaea9f47f
   30c7c:	46684639 	.word	0x46684639
   30c80:	ff38f005 	.word	0xff38f005
   30c84:	f6ff2800 	.word	0xf6ff2800
   30c88:	463aaeda 	.word	0x463aaeda
   30c8c:	46684669 	.word	0x46684669
   30c90:	f890f006 	.word	0xf890f006
   30c94:	28004604 	.word	0x28004604
   30c98:	e698d0f0 	.word	0xe698d0f0
   30c9c:	4669466a 	.word	0x4669466a
   30ca0:	f006a806 	.word	0xf006a806
   30ca4:	4604fa7b 	.word	0x4604fa7b
   30ca8:	f47f2800 	.word	0xf47f2800
   30cac:	4631ae90 	.word	0x4631ae90
   30cb0:	f7ffa806 	.word	0xf7ffa806
   30cb4:	4604fe23 	.word	0x4604fe23
   30cb8:	f47f2800 	.word	0xf47f2800
   30cbc:	a906ae88 	.word	0xa906ae88
   30cc0:	4608aa03 	.word	0x4608aa03
   30cc4:	f9aaf006 	.word	0xf9aaf006
   30cc8:	28004604 	.word	0x28004604
   30ccc:	ae7ff47f 	.word	0xae7ff47f
   30cd0:	2b009b06 	.word	0x2b009b06
   30cd4:	2100da0d 	.word	0x2100da0d
   30cd8:	f005a806 	.word	0xf005a806
   30cdc:	b140ff73 	.word	0xb140ff73
   30ce0:	463aa906 	.word	0x463aa906
   30ce4:	f0064608 	.word	0xf0064608
   30ce8:	4604f925 	.word	0x4604f925
   30cec:	d0ef2800 	.word	0xd0ef2800
   30cf0:	a906e66d 	.word	0xa906e66d
   30cf4:	4608aa03 	.word	0x4608aa03
   30cf8:	f990f006 	.word	0xf990f006
   30cfc:	28004604 	.word	0x28004604
   30d00:	ae65f47f 	.word	0xae65f47f
   30d04:	2b009b06 	.word	0x2b009b06
   30d08:	2100da0d 	.word	0x2100da0d
   30d0c:	f005a806 	.word	0xf005a806
   30d10:	b140ff59 	.word	0xb140ff59
   30d14:	463aa906 	.word	0x463aa906
   30d18:	f0064608 	.word	0xf0064608
   30d1c:	4604f90b 	.word	0x4604f90b
   30d20:	d0ef2800 	.word	0xd0ef2800
   30d24:	a903e653 	.word	0xa903e653
   30d28:	4608aa06 	.word	0x4608aa06
   30d2c:	f976f006 	.word	0xf976f006
   30d30:	28004604 	.word	0x28004604
   30d34:	ae4bf47f 	.word	0xae4bf47f
   30d38:	2b009b03 	.word	0x2b009b03
   30d3c:	2100da0d 	.word	0x2100da0d
   30d40:	f005a803 	.word	0xf005a803
   30d44:	b140ff3f 	.word	0xb140ff3f
   30d48:	463aa903 	.word	0x463aa903
   30d4c:	f0064608 	.word	0xf0064608
   30d50:	4604f8f1 	.word	0x4604f8f1
   30d54:	d0ef2800 	.word	0xd0ef2800
   30d58:	a903e639 	.word	0xa903e639
   30d5c:	4608466a 	.word	0x4608466a
   30d60:	fa1cf006 	.word	0xfa1cf006
   30d64:	28004604 	.word	0x28004604
   30d68:	ae31f47f 	.word	0xae31f47f
   30d6c:	a8034631 	.word	0xa8034631
   30d70:	fdc4f7ff 	.word	0xfdc4f7ff
   30d74:	28004604 	.word	0x28004604
   30d78:	ae29f47f 	.word	0xae29f47f
   30d7c:	aa09a903 	.word	0xaa09a903
   30d80:	f0064608 	.word	0xf0064608
   30d84:	4604f94b 	.word	0x4604f94b
   30d88:	f47f2800 	.word	0xf47f2800
   30d8c:	9b03ae20 	.word	0x9b03ae20
   30d90:	da0d2b00 	.word	0xda0d2b00
   30d94:	a8032100 	.word	0xa8032100
   30d98:	ff14f005 	.word	0xff14f005
   30d9c:	a903b140 	.word	0xa903b140
   30da0:	4608463a 	.word	0x4608463a
   30da4:	f8c6f006 	.word	0xf8c6f006
   30da8:	28004604 	.word	0x28004604
   30dac:	e60ed0ef 	.word	0xe60ed0ef
   30db0:	0218f105 	.word	0x0218f105
   30db4:	a8094649 	.word	0xa8094649
   30db8:	f9f0f006 	.word	0xf9f0f006
   30dbc:	28004604 	.word	0x28004604
   30dc0:	ae05f47f 	.word	0xae05f47f
   30dc4:	a8094631 	.word	0xa8094631
   30dc8:	fd98f7ff 	.word	0xfd98f7ff
   30dcc:	28004604 	.word	0x28004604
   30dd0:	adfdf47f 	.word	0xadfdf47f
   30dd4:	a8092101 	.word	0xa8092101
   30dd8:	fd66f005 	.word	0xfd66f005
   30ddc:	28004604 	.word	0x28004604
   30de0:	adf5f47f 	.word	0xadf5f47f
   30de4:	a8094639 	.word	0xa8094639
   30de8:	fe84f005 	.word	0xfe84f005
   30dec:	db082800 	.word	0xdb082800
   30df0:	463aa909 	.word	0x463aa909
   30df4:	f0054608 	.word	0xf0054608
   30df8:	4604ffdd 	.word	0x4604ffdd
   30dfc:	d0f12800 	.word	0xd0f12800
   30e00:	a906e5e5 	.word	0xa906e5e5
   30e04:	f0054640 	.word	0xf0054640
   30e08:	4604fa37 	.word	0x4604fa37
   30e0c:	f47f2800 	.word	0xf47f2800
   30e10:	a903adde 	.word	0xa903adde
   30e14:	000cf108 	.word	0x000cf108
   30e18:	fa2ef005 	.word	0xfa2ef005
   30e1c:	28004604 	.word	0x28004604
   30e20:	add5f47f 	.word	0xadd5f47f
   30e24:	0018f108 	.word	0x0018f108
   30e28:	f005a909 	.word	0xf005a909
   30e2c:	4604fa25 	.word	0x4604fa25
   30e30:	bf00e5cd 	.word	0xbf00e5cd

00030e34 <ecp_normalize_jac>:
   30e34:	f101b5f0 	.word	0xf101b5f0
   30e38:	b0870518 	.word	0xb0870518
   30e3c:	4607460e 	.word	0x4607460e
   30e40:	46282100 	.word	0x46282100
   30e44:	febef005 	.word	0xfebef005
   30e48:	4604b918 	.word	0x4604b918
   30e4c:	b0074620 	.word	0xb0074620
   30e50:	4668bdf0 	.word	0x4668bdf0
   30e54:	f98cf005 	.word	0xf98cf005
   30e58:	f005a803 	.word	0xf005a803
   30e5c:	4668f989 	.word	0x4668f989
   30e60:	46291d3a 	.word	0x46291d3a
   30e64:	f9b8f007 	.word	0xf9b8f007
   30e68:	b1404604 	.word	0xb1404604
   30e6c:	f0054668 	.word	0xf0054668
   30e70:	a803f987 	.word	0xa803f987
   30e74:	f984f005 	.word	0xf984f005
   30e78:	b0074620 	.word	0xb0074620
   30e7c:	466abdf0 	.word	0x466abdf0
   30e80:	a8034669 	.word	0xa8034669
   30e84:	f98af006 	.word	0xf98af006
   30e88:	28004604 	.word	0x28004604
   30e8c:	4639d1ee 	.word	0x4639d1ee
   30e90:	f7ffa803 	.word	0xf7ffa803
   30e94:	4604fd33 	.word	0x4604fd33
   30e98:	d1e72800 	.word	0xd1e72800
   30e9c:	4631aa03 	.word	0x4631aa03
   30ea0:	f0064630 	.word	0xf0064630
   30ea4:	4604f97b 	.word	0x4604f97b
   30ea8:	d1df2800 	.word	0xd1df2800
   30eac:	46304639 	.word	0x46304639
   30eb0:	fd24f7ff 	.word	0xfd24f7ff
   30eb4:	28004604 	.word	0x28004604
   30eb8:	360cd1d8 	.word	0x360cd1d8
   30ebc:	46304631 	.word	0x46304631
   30ec0:	f006aa03 	.word	0xf006aa03
   30ec4:	4604f96b 	.word	0x4604f96b
   30ec8:	d1cf2800 	.word	0xd1cf2800
   30ecc:	46304639 	.word	0x46304639
   30ed0:	fd14f7ff 	.word	0xfd14f7ff
   30ed4:	28004604 	.word	0x28004604
   30ed8:	466ad1c8 	.word	0x466ad1c8
   30edc:	46304631 	.word	0x46304631
   30ee0:	f95cf006 	.word	0xf95cf006
   30ee4:	28004604 	.word	0x28004604
   30ee8:	4639d1c0 	.word	0x4639d1c0
   30eec:	f7ff4630 	.word	0xf7ff4630
   30ef0:	4604fd05 	.word	0x4604fd05
   30ef4:	d1b92800 	.word	0xd1b92800
   30ef8:	21014628 	.word	0x21014628
   30efc:	fb48f005 	.word	0xfb48f005
   30f00:	e7b34604 	.word	0xe7b34604

00030f04 <ecp_normalize_jac_many.part.3>:
   30f04:	4ff0e92d 	.word	0x4ff0e92d
   30f08:	b08b4682 	.word	0xb08b4682
   30f0c:	4610468b 	.word	0x4610468b
   30f10:	4616210c 	.word	0x4616210c
   30f14:	fd80f008 	.word	0xfd80f008
   30f18:	f0002800 	.word	0xf0002800
   30f1c:	468080fe 	.word	0x468080fe
   30f20:	f005a801 	.word	0xf005a801
   30f24:	a804f925 	.word	0xa804f925
   30f28:	f922f005 	.word	0xf922f005
   30f2c:	f005a807 	.word	0xf005a807
   30f30:	f8dbf91f 	.word	0xf8dbf91f
   30f34:	46401000 	.word	0x46401000
   30f38:	f0053118 	.word	0xf0053118
   30f3c:	4604f99d 	.word	0x4604f99d
   30f40:	2e01bb60 	.word	0x2e01bb60
   30f44:	46d9d946 	.word	0x46d9d946
   30f48:	f1082701 	.word	0xf1082701
   30f4c:	e008050c 	.word	0xe008050c
   30f50:	46514628 	.word	0x46514628
   30f54:	fcd2f7ff 	.word	0xfcd2f7ff
   30f58:	4604350c 	.word	0x4604350c
   30f5c:	42beb968 	.word	0x42beb968
   30f60:	f859d038 	.word	0xf859d038
   30f64:	f1a52f04 	.word	0xf1a52f04
   30f68:	3218010c 	.word	0x3218010c
   30f6c:	f0064628 	.word	0xf0064628
   30f70:	3701f915 	.word	0x3701f915
   30f74:	28004604 	.word	0x28004604
   30f78:	a801d0ea 	.word	0xa801d0ea
   30f7c:	f900f005 	.word	0xf900f005
   30f80:	f005a804 	.word	0xf005a804
   30f84:	a807f8fd 	.word	0xa807f8fd
   30f88:	f8faf005 	.word	0xf8faf005
   30f8c:	a901e010 	.word	0xa901e010
   30f90:	f005a804 	.word	0xf005a804
   30f94:	4604f971 	.word	0x4604f971
   30f98:	d0532800 	.word	0xd0532800
   30f9c:	f005a801 	.word	0xf005a801
   30fa0:	a804f8ef 	.word	0xa804f8ef
   30fa4:	f8ecf005 	.word	0xf8ecf005
   30fa8:	f005a807 	.word	0xf005a807
   30fac:	b156f8e9 	.word	0xb156f8e9
   30fb0:	eb064645 	.word	0xeb064645
   30fb4:	eb080646 	.word	0xeb080646
   30fb8:	46280686 	.word	0x46280686
   30fbc:	f005350c 	.word	0xf005350c
   30fc0:	42b5f8df 	.word	0x42b5f8df
   30fc4:	4640d1f9 	.word	0x4640d1f9
   30fc8:	fd3af008 	.word	0xfd3af008
   30fcc:	b00b4620 	.word	0xb00b4620
   30fd0:	8ff0e8bd 	.word	0x8ff0e8bd
   30fd4:	0546eb06 	.word	0x0546eb06
   30fd8:	f1a500ad 	.word	0xf1a500ad
   30fdc:	4441010c 	.word	0x4441010c
   30fe0:	0204f10a 	.word	0x0204f10a
   30fe4:	f007a801 	.word	0xf007a801
   30fe8:	4604f8f7 	.word	0x4604f8f7
   30fec:	d1d52800 	.word	0xd1d52800
   30ff0:	4380f106 	.word	0x4380f106
   30ff4:	3b013d18 	.word	0x3b013d18
   30ff8:	eb0b4445 	.word	0xeb0b4445
   30ffc:	1e770b83 	.word	0x1e770b83
   31000:	d0c42f00 	.word	0xd0c42f00
   31004:	a901462a 	.word	0xa901462a
   31008:	f006a804 	.word	0xf006a804
   3100c:	4604f8c7 	.word	0x4604f8c7
   31010:	d1c32800 	.word	0xd1c32800
   31014:	a8044651 	.word	0xa8044651
   31018:	fc70f7ff 	.word	0xfc70f7ff
   3101c:	28004604 	.word	0x28004604
   31020:	f8dbd1bc 	.word	0xf8dbd1bc
   31024:	a9012000 	.word	0xa9012000
   31028:	46083218 	.word	0x46083218
   3102c:	f8b6f006 	.word	0xf8b6f006
   31030:	28004604 	.word	0x28004604
   31034:	4651d1b2 	.word	0x4651d1b2
   31038:	f7ffa801 	.word	0xf7ffa801
   3103c:	4604fc5f 	.word	0x4604fc5f
   31040:	d1ab2800 	.word	0xd1ab2800
   31044:	4611aa04 	.word	0x4611aa04
   31048:	f006a807 	.word	0xf006a807
   3104c:	4604f8a7 	.word	0x4604f8a7
   31050:	d1a32800 	.word	0xd1a32800
   31054:	a8074651 	.word	0xa8074651
   31058:	fc50f7ff 	.word	0xfc50f7ff
   3105c:	28004604 	.word	0x28004604
   31060:	f8dbd19c 	.word	0xf8dbd19c
   31064:	aa071000 	.word	0xaa071000
   31068:	f0064608 	.word	0xf0064608
   3106c:	4604f897 	.word	0x4604f897
   31070:	d1932800 	.word	0xd1932800
   31074:	f8db4651 	.word	0xf8db4651
   31078:	f7ff0000 	.word	0xf7ff0000
   3107c:	4604fc3f 	.word	0x4604fc3f
   31080:	d18b2800 	.word	0xd18b2800
   31084:	1000f8db 	.word	0x1000f8db
   31088:	310caa07 	.word	0x310caa07
   3108c:	f0064608 	.word	0xf0064608
   31090:	4604f885 	.word	0x4604f885
   31094:	d1812800 	.word	0xd1812800
   31098:	0000f8db 	.word	0x0000f8db
   3109c:	300c4651 	.word	0x300c4651
   310a0:	fc2cf7ff 	.word	0xfc2cf7ff
   310a4:	28004604 	.word	0x28004604
   310a8:	af78f47f 	.word	0xaf78f47f
   310ac:	1000f8db 	.word	0x1000f8db
   310b0:	310caa04 	.word	0x310caa04
   310b4:	f0064608 	.word	0xf0064608
   310b8:	4604f871 	.word	0x4604f871
   310bc:	f47f2800 	.word	0xf47f2800
   310c0:	f8dbaf6d 	.word	0xf8dbaf6d
   310c4:	46510000 	.word	0x46510000
   310c8:	f7ff300c 	.word	0xf7ff300c
   310cc:	4604fc17 	.word	0x4604fc17
   310d0:	f47f2800 	.word	0xf47f2800
   310d4:	f8daaf63 	.word	0xf8daaf63
   310d8:	f8db1008 	.word	0xf8db1008
   310dc:	f0050000 	.word	0xf0050000
   310e0:	4604f869 	.word	0x4604f869
   310e4:	f47f2800 	.word	0xf47f2800
   310e8:	f8dbaf59 	.word	0xf8dbaf59
   310ec:	f8da0000 	.word	0xf8da0000
   310f0:	300c1008 	.word	0x300c1008
   310f4:	f85ef005 	.word	0xf85ef005
   310f8:	28004604 	.word	0x28004604
   310fc:	af4ef47f 	.word	0xaf4ef47f
   31100:	0000f8db 	.word	0x0000f8db
   31104:	30183d0c 	.word	0x30183d0c
   31108:	0b04f1ab 	.word	0x0b04f1ab
   3110c:	f838f005 	.word	0xf838f005
   31110:	f43f2f00 	.word	0xf43f2f00
   31114:	3f01af43 	.word	0x3f01af43
   31118:	4c01e772 	.word	0x4c01e772
   3111c:	bf00e756 	.word	0xbf00e756
   31120:	ffffb280 	.word	0xffffb280

00031124 <symbol_0002b14>:
   31124:	b510b1b8 	.word	0xb510b1b8
   31128:	227c4604 	.word	0x227c4604
   3112c:	f00f2100 	.word	0xf00f2100
   31130:	f104ff83 	.word	0xf104ff83
   31134:	f005007c 	.word	0xf005007c
   31138:	f104f81b 	.word	0xf104f81b
   3113c:	f0050088 	.word	0xf0050088
   31140:	f104f817 	.word	0xf104f817
   31144:	f0050094 	.word	0xf0050094
   31148:	f104f813 	.word	0xf104f813
   3114c:	e8bd00a0 	.word	0xe8bd00a0
   31150:	f0054010 	.word	0xf0054010
   31154:	4770b80d 	.word	0x4770b80d

00031158 <symbol_0000ef7>:
   31158:	d0482800 	.word	0xd0482800
   3115c:	6e03b570 	.word	0x6e03b570
   31160:	2b014604 	.word	0x2b014604
   31164:	6f60d123 	.word	0x6f60d123
   31168:	6fa2b1c8 	.word	0x6fa2b1c8
   3116c:	2600b1aa 	.word	0x2600b1aa
   31170:	03c6eb06 	.word	0x03c6eb06
   31174:	0583eb10 	.word	0x0583eb10
   31178:	4628d035 	.word	0x4628d035
   3117c:	f800f005 	.word	0xf800f005
   31180:	000cf105 	.word	0x000cf105
   31184:	fffcf004 	.word	0xfffcf004
   31188:	0018f105 	.word	0x0018f105
   3118c:	fff8f004 	.word	0xfff8f004
   31190:	36016fa2 	.word	0x36016fa2
   31194:	6f604296 	.word	0x6f604296
   31198:	f008d3ea 	.word	0xf008d3ea
   3119c:	2200fc51 	.word	0x2200fc51
   311a0:	037cf104 	.word	0x037cf104
   311a4:	34017022 	.word	0x34017022
   311a8:	d1fb429c 	.word	0xd1fb429c
   311ac:	3004bd70 	.word	0x3004bd70
   311b0:	ffe6f004 	.word	0xffe6f004
   311b4:	0010f104 	.word	0x0010f104
   311b8:	ffe2f004 	.word	0xffe2f004
   311bc:	001cf104 	.word	0x001cf104
   311c0:	ffdef004 	.word	0xffdef004
   311c4:	0028f104 	.word	0x0028f104
   311c8:	ffdaf004 	.word	0xffdaf004
   311cc:	0034f104 	.word	0x0034f104
   311d0:	ffd6f004 	.word	0xffd6f004
   311d4:	0040f104 	.word	0x0040f104
   311d8:	ffd2f004 	.word	0xffd2f004
   311dc:	004cf104 	.word	0x004cf104
   311e0:	ffcef004 	.word	0xffcef004
   311e4:	3601e7bf 	.word	0x3601e7bf
   311e8:	d3c14296 	.word	0xd3c14296
   311ec:	4770e7d5 	.word	0x4770e7d5

000311f0 <symbol_0001d5f>:
   311f0:	b510b1a8 	.word	0xb510b1a8
   311f4:	f7ff4604 	.word	0xf7ff4604
   311f8:	f104ffaf 	.word	0xf104ffaf
   311fc:	f004007c 	.word	0xf004007c
   31200:	f104ffbf 	.word	0xf104ffbf
   31204:	f0040088 	.word	0xf0040088
   31208:	f104ffbb 	.word	0xf104ffbb
   3120c:	f0040094 	.word	0xf0040094
   31210:	f104ffb7 	.word	0xf104ffb7
   31214:	e8bd00a0 	.word	0xe8bd00a0
   31218:	f0044010 	.word	0xf0044010
   3121c:	4770bfb1 	.word	0x4770bfb1

00031220 <symbol_000d41f>:
   31220:	2101b510 	.word	0x2101b510
   31224:	f0054604 	.word	0xf0054604
   31228:	b100f9b3 	.word	0xb100f9b3
   3122c:	2101bd10 	.word	0x2101bd10
   31230:	000cf104 	.word	0x000cf104
   31234:	f9acf005 	.word	0xf9acf005
   31238:	d1f72800 	.word	0xd1f72800
   3123c:	f1044601 	.word	0xf1044601
   31240:	e8bd0018 	.word	0xe8bd0018
   31244:	f0054010 	.word	0xf0054010
   31248:	bf00b9a3 	.word	0xbf00b9a3

0003124c <ecp_add_mixed>:
   3124c:	47f0e92d 	.word	0x47f0e92d
   31250:	0518f102 	.word	0x0518f102
   31254:	4681b096 	.word	0x4681b096
   31258:	46284688 	.word	0x46284688
   3125c:	46172100 	.word	0x46172100
   31260:	f005461e 	.word	0xf005461e
   31264:	2800fcaf 	.word	0x2800fcaf
   31268:	6a33d048 	.word	0x6a33d048
   3126c:	f106b18b 	.word	0xf106b18b
   31270:	46200418 	.word	0x46200418
   31274:	f0052100 	.word	0xf0052100
   31278:	2800fca5 	.word	0x2800fca5
   3127c:	80d7f000 	.word	0x80d7f000
   31280:	b1336a33 	.word	0xb1336a33
   31284:	21014620 	.word	0x21014620
   31288:	fc9cf005 	.word	0xfc9cf005
   3128c:	f0402800 	.word	0xf0402800
   31290:	a80180e7 	.word	0xa80180e7
   31294:	ff6cf004 	.word	0xff6cf004
   31298:	f004a804 	.word	0xf004a804
   3129c:	a807ff69 	.word	0xa807ff69
   312a0:	ff66f004 	.word	0xff66f004
   312a4:	f004a80a 	.word	0xf004a80a
   312a8:	a80dff63 	.word	0xa80dff63
   312ac:	ff60f004 	.word	0xff60f004
   312b0:	f004a810 	.word	0xf004a810
   312b4:	a813ff5d 	.word	0xa813ff5d
   312b8:	ff5af004 	.word	0xff5af004
   312bc:	4629462a 	.word	0x4629462a
   312c0:	f005a801 	.word	0xf005a801
   312c4:	4604ff6b 	.word	0x4604ff6b
   312c8:	a801b380 	.word	0xa801b380
   312cc:	ff58f004 	.word	0xff58f004
   312d0:	f004a804 	.word	0xf004a804
   312d4:	a807ff55 	.word	0xa807ff55
   312d8:	ff52f004 	.word	0xff52f004
   312dc:	f004a80a 	.word	0xf004a80a
   312e0:	a80dff4f 	.word	0xa80dff4f
   312e4:	ff4cf004 	.word	0xff4cf004
   312e8:	f004a810 	.word	0xf004a810
   312ec:	a813ff49 	.word	0xa813ff49
   312f0:	ff46f004 	.word	0xff46f004
   312f4:	b0164620 	.word	0xb0164620
   312f8:	87f0e8bd 	.word	0x87f0e8bd
   312fc:	46404631 	.word	0x46404631
   31300:	ffbaf004 	.word	0xffbaf004
   31304:	28004604 	.word	0x28004604
   31308:	f106d1f4 	.word	0xf106d1f4
   3130c:	f108010c 	.word	0xf108010c
   31310:	f004000c 	.word	0xf004000c
   31314:	4604ffb1 	.word	0x4604ffb1
   31318:	d1eb2800 	.word	0xd1eb2800
   3131c:	0118f106 	.word	0x0118f106
   31320:	0018f108 	.word	0x0018f108
   31324:	ffa8f004 	.word	0xffa8f004
   31328:	e7e34604 	.word	0xe7e34604
   3132c:	a8014649 	.word	0xa8014649
   31330:	fae4f7ff 	.word	0xfae4f7ff
   31334:	28004604 	.word	0x28004604
   31338:	462ad1c7 	.word	0x462ad1c7
   3133c:	a804a901 	.word	0xa804a901
   31340:	ff2cf005 	.word	0xff2cf005
   31344:	28004604 	.word	0x28004604
   31348:	4649d1bf 	.word	0x4649d1bf
   3134c:	f7ffa804 	.word	0xf7ffa804
   31350:	4604fad5 	.word	0x4604fad5
   31354:	d1b82800 	.word	0xd1b82800
   31358:	4632a901 	.word	0x4632a901
   3135c:	f0054608 	.word	0xf0054608
   31360:	4604ff1d 	.word	0x4604ff1d
   31364:	d1b02800 	.word	0xd1b02800
   31368:	a8014649 	.word	0xa8014649
   3136c:	fac6f7ff 	.word	0xfac6f7ff
   31370:	28004604 	.word	0x28004604
   31374:	a904d1a9 	.word	0xa904d1a9
   31378:	020cf106 	.word	0x020cf106
   3137c:	f0054608 	.word	0xf0054608
   31380:	4604ff0d 	.word	0x4604ff0d
   31384:	d1a02800 	.word	0xd1a02800
   31388:	a8044649 	.word	0xa8044649
   3138c:	fab6f7ff 	.word	0xfab6f7ff
   31390:	28004604 	.word	0x28004604
   31394:	a901d199 	.word	0xa901d199
   31398:	4608463a 	.word	0x4608463a
   3139c:	fe3ef005 	.word	0xfe3ef005
   313a0:	28004604 	.word	0x28004604
   313a4:	f109d191 	.word	0xf109d191
   313a8:	e00c0604 	.word	0xe00c0604
   313ac:	a8012100 	.word	0xa8012100
   313b0:	fc08f005 	.word	0xfc08f005
   313b4:	a901b150 	.word	0xa901b150
   313b8:	46084632 	.word	0x46084632
   313bc:	fdbaf005 	.word	0xfdbaf005
   313c0:	28004604 	.word	0x28004604
   313c4:	9b01d181 	.word	0x9b01d181
   313c8:	dbef2b00 	.word	0xdbef2b00
   313cc:	f107a904 	.word	0xf107a904
   313d0:	4632060c 	.word	0x4632060c
   313d4:	f0054608 	.word	0xf0054608
   313d8:	4604fe21 	.word	0x4604fe21
   313dc:	f47f2800 	.word	0xf47f2800
   313e0:	f109af74 	.word	0xf109af74
   313e4:	e00d0a04 	.word	0xe00d0a04
   313e8:	a8042100 	.word	0xa8042100
   313ec:	fbeaf005 	.word	0xfbeaf005
   313f0:	a904b158 	.word	0xa904b158
   313f4:	46084652 	.word	0x46084652
   313f8:	fd9cf005 	.word	0xfd9cf005
   313fc:	28004604 	.word	0x28004604
   31400:	af63f47f 	.word	0xaf63f47f
   31404:	2b009b04 	.word	0x2b009b04
   31408:	2100dbee 	.word	0x2100dbee
   3140c:	f005a801 	.word	0xf005a801
   31410:	4601fbd9 	.word	0x4601fbd9
   31414:	a804bb30 	.word	0xa804bb30
   31418:	fbd4f005 	.word	0xfbd4f005
   3141c:	d17f2800 	.word	0xd17f2800
   31420:	4641463a 	.word	0x4641463a
   31424:	f7ff4648 	.word	0xf7ff4648
   31428:	4604fab5 	.word	0x4604fab5
   3142c:	4639e74d 	.word	0x4639e74d
   31430:	f0044640 	.word	0xf0044640
   31434:	4604ff21 	.word	0x4604ff21
   31438:	f47f2800 	.word	0xf47f2800
   3143c:	f107af5b 	.word	0xf107af5b
   31440:	f108010c 	.word	0xf108010c
   31444:	f004000c 	.word	0xf004000c
   31448:	4604ff17 	.word	0x4604ff17
   3144c:	f47f2800 	.word	0xf47f2800
   31450:	4629af51 	.word	0x4629af51
   31454:	0018f108 	.word	0x0018f108
   31458:	ff0ef004 	.word	0xff0ef004
   3145c:	e7494604 	.word	0xe7494604
   31460:	e7474c8b 	.word	0xe7474c8b
   31464:	aa014629 	.word	0xaa014629
   31468:	f005a813 	.word	0xf005a813
   3146c:	4604fe97 	.word	0x4604fe97
   31470:	f47f2800 	.word	0xf47f2800
   31474:	4649af2a 	.word	0x4649af2a
   31478:	f7ffa813 	.word	0xf7ffa813
   3147c:	4604fa3f 	.word	0x4604fa3f
   31480:	f47f2800 	.word	0xf47f2800
   31484:	aa01af22 	.word	0xaa01af22
   31488:	a8074611 	.word	0xa8074611
   3148c:	fe86f005 	.word	0xfe86f005
   31490:	28004604 	.word	0x28004604
   31494:	af19f47f 	.word	0xaf19f47f
   31498:	a8074649 	.word	0xa8074649
   3149c:	fa2ef7ff 	.word	0xfa2ef7ff
   314a0:	28004604 	.word	0x28004604
   314a4:	af11f47f 	.word	0xaf11f47f
   314a8:	a907aa01 	.word	0xa907aa01
   314ac:	f005a80a 	.word	0xf005a80a
   314b0:	4604fe75 	.word	0x4604fe75
   314b4:	f47f2800 	.word	0xf47f2800
   314b8:	4649af08 	.word	0x4649af08
   314bc:	f7ffa80a 	.word	0xf7ffa80a
   314c0:	4604fa1d 	.word	0x4604fa1d
   314c4:	f47f2800 	.word	0xf47f2800
   314c8:	a907af00 	.word	0xa907af00
   314cc:	4608463a 	.word	0x4608463a
   314d0:	fe64f005 	.word	0xfe64f005
   314d4:	28004604 	.word	0x28004604
   314d8:	aef7f47f 	.word	0xaef7f47f
   314dc:	a8074649 	.word	0xa8074649
   314e0:	fa0cf7ff 	.word	0xfa0cf7ff
   314e4:	28004604 	.word	0x28004604
   314e8:	aeeff47f 	.word	0xaeeff47f
   314ec:	a9072202 	.word	0xa9072202
   314f0:	f005a801 	.word	0xf005a801
   314f4:	4604ff4b 	.word	0x4604ff4b
   314f8:	f47f2800 	.word	0xf47f2800
   314fc:	f109aee6 	.word	0xf109aee6
   31500:	46290504 	.word	0x46290504
   31504:	f005a801 	.word	0xf005a801
   31508:	2800faf5 	.word	0x2800faf5
   3150c:	a901db0d 	.word	0xa901db0d
   31510:	4608462a 	.word	0x4608462a
   31514:	fc4ef005 	.word	0xfc4ef005
   31518:	28004604 	.word	0x28004604
   3151c:	e6d4d0f1 	.word	0xe6d4d0f1
   31520:	f7ff4640 	.word	0xf7ff4640
   31524:	4604fe7d 	.word	0x4604fe7d
   31528:	aa04e6cf 	.word	0xaa04e6cf
   3152c:	a80d4611 	.word	0xa80d4611
   31530:	fe34f005 	.word	0xfe34f005
   31534:	28004604 	.word	0x28004604
   31538:	aec7f47f 	.word	0xaec7f47f
   3153c:	a80d4649 	.word	0xa80d4649
   31540:	f9dcf7ff 	.word	0xf9dcf7ff
   31544:	28004604 	.word	0x28004604
   31548:	aebff47f 	.word	0xaebff47f
   3154c:	aa01a90d 	.word	0xaa01a90d
   31550:	f0054608 	.word	0xf0054608
   31554:	4604fd63 	.word	0x4604fd63
   31558:	f47f2800 	.word	0xf47f2800
   3155c:	9b0daeb6 	.word	0x9b0daeb6
   31560:	da0d2b00 	.word	0xda0d2b00
   31564:	a80d2100 	.word	0xa80d2100
   31568:	fb2cf005 	.word	0xfb2cf005
   3156c:	a90db140 	.word	0xa90db140
   31570:	4608462a 	.word	0x4608462a
   31574:	fcdef005 	.word	0xfcdef005
   31578:	28004604 	.word	0x28004604
   3157c:	e6a4d0ef 	.word	0xe6a4d0ef
   31580:	aa0aa90d 	.word	0xaa0aa90d
   31584:	f0054608 	.word	0xf0054608
   31588:	4604fd49 	.word	0x4604fd49
   3158c:	f47f2800 	.word	0xf47f2800
   31590:	9b0dae9c 	.word	0x9b0dae9c
   31594:	da0d2b00 	.word	0xda0d2b00
   31598:	a80d2100 	.word	0xa80d2100
   3159c:	fb12f005 	.word	0xfb12f005
   315a0:	a90db140 	.word	0xa90db140
   315a4:	4608462a 	.word	0x4608462a
   315a8:	fcc4f005 	.word	0xfcc4f005
   315ac:	28004604 	.word	0x28004604
   315b0:	e68ad0ef 	.word	0xe68ad0ef
   315b4:	aa0da907 	.word	0xaa0da907
   315b8:	f0054608 	.word	0xf0054608
   315bc:	4604fd2f 	.word	0x4604fd2f
   315c0:	f47f2800 	.word	0xf47f2800
   315c4:	9b07ae82 	.word	0x9b07ae82
   315c8:	da0d2b00 	.word	0xda0d2b00
   315cc:	a8072100 	.word	0xa8072100
   315d0:	faf8f005 	.word	0xfaf8f005
   315d4:	a907b140 	.word	0xa907b140
   315d8:	4608462a 	.word	0x4608462a
   315dc:	fcaaf005 	.word	0xfcaaf005
   315e0:	28004604 	.word	0x28004604
   315e4:	e670d0ef 	.word	0xe670d0ef
   315e8:	aa04a907 	.word	0xaa04a907
   315ec:	f0054608 	.word	0xf0054608
   315f0:	4604fdd5 	.word	0x4604fdd5
   315f4:	f47f2800 	.word	0xf47f2800
   315f8:	4649ae68 	.word	0x4649ae68
   315fc:	f7ffa807 	.word	0xf7ffa807
   31600:	4604f97d 	.word	0x4604f97d
   31604:	f47f2800 	.word	0xf47f2800
   31608:	a90aae60 	.word	0xa90aae60
   3160c:	46084632 	.word	0x46084632
   31610:	fdc4f005 	.word	0xfdc4f005
   31614:	28004604 	.word	0x28004604
   31618:	ae57f47f 	.word	0xae57f47f
   3161c:	a80a4649 	.word	0xa80a4649
   31620:	f96cf7ff 	.word	0xf96cf7ff
   31624:	28004604 	.word	0x28004604
   31628:	ae4ff47f 	.word	0xae4ff47f
   3162c:	a907aa0a 	.word	0xa907aa0a
   31630:	f005a810 	.word	0xf005a810
   31634:	4604fcf3 	.word	0x4604fcf3
   31638:	f47f2800 	.word	0xf47f2800
   3163c:	9b10ae46 	.word	0x9b10ae46
   31640:	da0d2b00 	.word	0xda0d2b00
   31644:	a8102100 	.word	0xa8102100
   31648:	fabcf005 	.word	0xfabcf005
   3164c:	a910b140 	.word	0xa910b140
   31650:	4608462a 	.word	0x4608462a
   31654:	fc6ef005 	.word	0xfc6ef005
   31658:	28004604 	.word	0x28004604
   3165c:	e634d0ef 	.word	0xe634d0ef
   31660:	4640a90d 	.word	0x4640a90d
   31664:	fe08f004 	.word	0xfe08f004
   31668:	28004604 	.word	0x28004604
   3166c:	ae2df47f 	.word	0xae2df47f
   31670:	f108a910 	.word	0xf108a910
   31674:	f004000c 	.word	0xf004000c
   31678:	4604fdff 	.word	0x4604fdff
   3167c:	f47f2800 	.word	0xf47f2800
   31680:	f108ae24 	.word	0xf108ae24
   31684:	a9130018 	.word	0xa9130018
   31688:	fdf6f004 	.word	0xfdf6f004
   3168c:	e61c4604 	.word	0xe61c4604
   31690:	ffffb080 	.word	0xffffb080

00031694 <ecp_mul_comb>:
   31694:	4ff0e92d 	.word	0x4ff0e92d
   31698:	46984605 	.word	0x46984605
   3169c:	034cf105 	.word	0x034cf105
   316a0:	b0e5461c 	.word	0xb0e5461c
   316a4:	9104a80d 	.word	0x9104a80d
   316a8:	93084617 	.word	0x93084617
   316ac:	fd60f004 	.word	0xfd60f004
   316b0:	f004a810 	.word	0xf004a810
   316b4:	4620fd5d 	.word	0x4620fd5d
   316b8:	f0042100 	.word	0xf0042100
   316bc:	2801ffa3 	.word	0x2801ffa3
   316c0:	f0409007 	.word	0xf0409007
   316c4:	6deb81c9 	.word	0x6deb81c9
   316c8:	090cf108 	.word	0x090cf108
   316cc:	7fc0f5b3 	.word	0x7fc0f5b3
   316d0:	2605bf2c 	.word	0x2605bf2c
   316d4:	46482604 	.word	0x46482604
   316d8:	0134f105 	.word	0x0134f105
   316dc:	f04fbf2c 	.word	0xf04fbf2c
   316e0:	f04f0a06 	.word	0xf04f0a06
   316e4:	46b30a05 	.word	0x46b30a05
   316e8:	fa04f005 	.word	0xfa04f005
   316ec:	d0722800 	.word	0xd0722800
   316f0:	42a66dec 	.word	0x42a66dec
   316f4:	2301d245 	.word	0x2301d245
   316f8:	32fff10b 	.word	0x32fff10b
   316fc:	93024093 	.word	0x93024093
   31700:	b2db4434 	.word	0xb2db4434
   31704:	93033c01 	.word	0x93033c01
   31708:	fbb42300 	.word	0xfbb42300
   3170c:	9802f4f6 	.word	0x9802f4f6
   31710:	93059206 	.word	0x93059206
   31714:	f0082124 	.word	0xf0082124
   31718:	9001f97f 	.word	0x9001f97f
   3171c:	d0402800 	.word	0xd0402800
   31720:	f0044641 	.word	0xf0044641
   31724:	f8ddfda9 	.word	0xf8ddfda9
   31728:	4683a004 	.word	0x4683a004
   3172c:	f0002800 	.word	0xf0002800
   31730:	9b058086 	.word	0x9b058086
   31734:	d17b2b00 	.word	0xd17b2b00
   31738:	9c012500 	.word	0x9c012500
   3173c:	35019e03 	.word	0x35019e03
   31740:	4620b154 	.word	0x4620b154
   31744:	fd1cf004 	.word	0xfd1cf004
   31748:	000cf104 	.word	0x000cf104
   3174c:	fd18f004 	.word	0xfd18f004
   31750:	0018f104 	.word	0x0018f104
   31754:	fd14f004 	.word	0xfd14f004
   31758:	429eb2eb 	.word	0x429eb2eb
   3175c:	0424f104 	.word	0x0424f104
   31760:	9801d8ed 	.word	0x9801d8ed
   31764:	f96cf008 	.word	0xf96cf008
   31768:	f004a80d 	.word	0xf004a80d
   3176c:	a810fd09 	.word	0xa810fd09
   31770:	fd06f004 	.word	0xfd06f004
   31774:	0f00f1bb 	.word	0x0f00f1bb
   31778:	4658d11b 	.word	0x4658d11b
   3177c:	e8bdb065 	.word	0xe8bdb065
   31780:	26028ff0 	.word	0x26028ff0
   31784:	22012300 	.word	0x22012300
   31788:	21244630 	.word	0x21244630
   3178c:	6602e9cd 	.word	0x6602e9cd
   31790:	3205e9cd 	.word	0x3205e9cd
   31794:	f940f008 	.word	0xf940f008
   31798:	08643401 	.word	0x08643401
   3179c:	28009001 	.word	0x28009001
   317a0:	a80dd1be 	.word	0xa80dd1be
   317a4:	fcecf004 	.word	0xfcecf004
   317a8:	f004a810 	.word	0xf004a810
   317ac:	f8dffce9 	.word	0xf8dffce9
   317b0:	9c04b644 	.word	0x9c04b644
   317b4:	d0e02c00 	.word	0xd0e02c00
   317b8:	f0044620 	.word	0xf0044620
   317bc:	f104fce1 	.word	0xf104fce1
   317c0:	f004000c 	.word	0xf004000c
   317c4:	f104fcdd 	.word	0xf104fcdd
   317c8:	f0040018 	.word	0xf0040018
   317cc:	4658fcd9 	.word	0x4658fcd9
   317d0:	e8bdb065 	.word	0xe8bdb065
   317d4:	f1058ff0 	.word	0xf1058ff0
   317d8:	46400128 	.word	0x46400128
   317dc:	f98af005 	.word	0xf98af005
   317e0:	d1852800 	.word	0xd1852800
   317e4:	459a6deb 	.word	0x459a6deb
   317e8:	82f4f0c0 	.word	0x82f4f0c0
   317ec:	1c5c2602 	.word	0x1c5c2602
   317f0:	e9cd2301 	.word	0xe9cd2301
   317f4:	08646602 	.word	0x08646602
   317f8:	6f6b9306 	.word	0x6f6b9306
   317fc:	2b009301 	.word	0x2b009301
   31800:	80eaf000 	.word	0x80eaf000
   31804:	46382100 	.word	0x46382100
   31808:	fefcf004 	.word	0xfefcf004
   3180c:	46804639 	.word	0x46804639
   31810:	f004a80d 	.word	0xf004a80d
   31814:	4683fd31 	.word	0x4683fd31
   31818:	463ab950 	.word	0x463ab950
   3181c:	a8109908 	.word	0xa8109908
   31820:	fbfcf005 	.word	0xfbfcf005
   31824:	28004683 	.word	0x28004683
   31828:	9b07d036 	.word	0x9b07d036
   3182c:	d0832b00 	.word	0xd0832b00
   31830:	f004a80d 	.word	0xf004a80d
   31834:	a810fca5 	.word	0xa810fca5
   31838:	fca2f004 	.word	0xfca2f004
   3183c:	4649e7b9 	.word	0x4649e7b9
   31840:	000cf10a 	.word	0x000cf10a
   31844:	fd18f004 	.word	0xfd18f004
   31848:	28004683 	.word	0x28004683
   3184c:	af71f47f 	.word	0xaf71f47f
   31850:	f1089b01 	.word	0xf1089b01
   31854:	f1030118 	.word	0xf1030118
   31858:	f0040018 	.word	0xf0040018
   3185c:	4683fd0d 	.word	0x4683fd0d
   31860:	f47f2800 	.word	0xf47f2800
   31864:	462aaf66 	.word	0x462aaf66
   31868:	0901f04f 	.word	0x0901f04f
   3186c:	46254651 	.word	0x46254651
   31870:	464c4682 	.word	0x464c4682
   31874:	96094690 	.word	0x96094690
   31878:	9e06970a 	.word	0x9e06970a
   3187c:	eb049f01 	.word	0xeb049f01
   31880:	eb0704c4 	.word	0xeb0704c4
   31884:	46200484 	.word	0x46200484
   31888:	fcf6f004 	.word	0xfcf6f004
   3188c:	f0002800 	.word	0xf0002800
   31890:	468380a7 	.word	0x468380a7
   31894:	e74d9b05 	.word	0xe74d9b05
   31898:	33fff118 	.word	0x33fff118
   3189c:	2301bf18 	.word	0x2301bf18
   318a0:	461aa910 	.word	0x461aa910
   318a4:	9302a80d 	.word	0x9302a80d
   318a8:	fe14f004 	.word	0xfe14f004
   318ac:	28004683 	.word	0x28004683
   318b0:	a822d1bb 	.word	0xa822d1bb
   318b4:	46591c62 	.word	0x46591c62
   318b8:	fbbef00f 	.word	0xfbbef00f
   318bc:	f10db3d4 	.word	0xf10db3d4
   318c0:	46d80988 	.word	0x46d80988
   318c4:	46c246cb 	.word	0x46c246cb
   318c8:	46512700 	.word	0x46512700
   318cc:	f004a80d 	.word	0xf004a80d
   318d0:	f89bfe99 	.word	0xf89bfe99
   318d4:	40b83000 	.word	0x40b83000
   318d8:	43033701 	.word	0x43033701
   318dc:	44a242b7 	.word	0x44a242b7
   318e0:	3000f88b 	.word	0x3000f88b
   318e4:	f108d1f1 	.word	0xf108d1f1
   318e8:	45a00801 	.word	0x45a00801
   318ec:	0b01f10b 	.word	0x0b01f10b
   318f0:	2300d1e9 	.word	0x2300d1e9
   318f4:	0c01f04f 	.word	0x0c01f04f
   318f8:	1088f89d 	.word	0x1088f89d
   318fc:	6f01f819 	.word	0x6f01f819
   31900:	0c01f10c 	.word	0x0c01f10c
   31904:	0203ea86 	.word	0x0203ea86
   31908:	f00043d0 	.word	0xf00043d0
   3190c:	fb000001 	.word	0xfb000001
   31910:	b252f701 	.word	0xb252f701
   31914:	4033b27f 	.word	0x4033b27f
   31918:	0607ea02 	.word	0x0607ea02
   3191c:	ea41407a 	.word	0xea41407a
   31920:	433310c0 	.word	0x433310c0
   31924:	45e0b2d1 	.word	0x45e0b2d1
   31928:	0c01f809 	.word	0x0c01f809
   3192c:	f889b2db 	.word	0xf889b2db
   31930:	d2e31000 	.word	0xd2e31000
   31934:	a8192600 	.word	0xa8192600
   31938:	fc1af004 	.word	0xfc1af004
   3193c:	f004a81c 	.word	0xf004a81c
   31940:	a81ffc17 	.word	0xa81ffc17
   31944:	fc14f004 	.word	0xfc14f004
   31948:	f813ab22 	.word	0xf813ab22
   3194c:	44239004 	.word	0x44239004
   31950:	9b049306 	.word	0x9b049306
   31954:	469b4632 	.word	0x469b4632
   31958:	95059f01 	.word	0x95059f01
   3195c:	9f03463d 	.word	0x9f03463d
   31960:	0845f3c9 	.word	0x0845f3c9
   31964:	0a0cf103 	.word	0x0a0cf103
   31968:	0408eba2 	.word	0x0408eba2
   3196c:	f484fab4 	.word	0xf484fab4
   31970:	46290964 	.word	0x46290964
   31974:	46584622 	.word	0x46584622
   31978:	fdacf004 	.word	0xfdacf004
   3197c:	f1053601 	.word	0xf1053601
   31980:	3524010c 	.word	0x3524010c
   31984:	d16a2800 	.word	0xd16a2800
   31988:	46504622 	.word	0x46504622
   3198c:	fda2f004 	.word	0xfda2f004
   31990:	2800b2f2 	.word	0x2800b2f2
   31994:	42bad163 	.word	0x42bad163
   31998:	9d05d3e6 	.word	0x9d05d3e6
   3199c:	1d2ba816 	.word	0x1d2ba816
   319a0:	9308461c 	.word	0x9308461c
   319a4:	fbe4f004 	.word	0xfbe4f004
   319a8:	4621a816 	.word	0x4621a816
   319ac:	f0054652 	.word	0xf0054652
   319b0:	4683fb35 	.word	0x4683fb35
   319b4:	f0002800 	.word	0xf0002800
   319b8:	a81680c3 	.word	0xa81680c3
   319bc:	fbe0f004 	.word	0xfbe0f004
   319c0:	f004a819 	.word	0xf004a819
   319c4:	a81cfbdd 	.word	0xa81cfbdd
   319c8:	fbdaf004 	.word	0xfbdaf004
   319cc:	f004a81f 	.word	0xf004a81f
   319d0:	9b07fbd7 	.word	0x9b07fbd7
   319d4:	e6ac9305 	.word	0xe6ac9305
   319d8:	98022301 	.word	0x98022301
   319dc:	e6999305 	.word	0xe6999305
   319e0:	0b59ea4f 	.word	0x0b59ea4f
   319e4:	0bcbeb0b 	.word	0x0bcbeb0b
   319e8:	0b8beb07 	.word	0x0b8beb07
   319ec:	010cf10b 	.word	0x010cf10b
   319f0:	000cf104 	.word	0x000cf104
   319f4:	fc40f004 	.word	0xfc40f004
   319f8:	f47f2800 	.word	0xf47f2800
   319fc:	f10baf4a 	.word	0xf10baf4a
   31a00:	f1040118 	.word	0xf1040118
   31a04:	f0040018 	.word	0xf0040018
   31a08:	2800fc37 	.word	0x2800fc37
   31a0c:	af41f47f 	.word	0xaf41f47f
   31a10:	4683b165 	.word	0x4683b165
   31a14:	46214622 	.word	0x46214622
   31a18:	f7fe4640 	.word	0xf7fe4640
   31a1c:	f10bffbb 	.word	0xf10bffbb
   31a20:	28000b01 	.word	0x28000b01
   31a24:	af35f47f 	.word	0xaf35f47f
   31a28:	d1f345ab 	.word	0xd1f345ab
   31a2c:	0949ea4f 	.word	0x0949ea4f
   31a30:	f989fa5f 	.word	0xf989fa5f
   31a34:	0301f10a 	.word	0x0301f10a
   31a38:	f842aa22 	.word	0xf842aa22
   31a3c:	fa5f402a 	.word	0xfa5f402a
   31a40:	fa39fa83 	.word	0xfa39fa83
   31a44:	464cf306 	.word	0x464cf306
   31a48:	ea4fd10b 	.word	0xea4fd10b
   31a4c:	eb010159 	.word	0xeb010159
   31a50:	eb0701c1 	.word	0xeb0701c1
   31a54:	e7120181 	.word	0xe7120181
   31a58:	b39cf8df 	.word	0xb39cf8df
   31a5c:	4683e68d 	.word	0x4683e68d
   31a60:	4652e7ae 	.word	0x4652e7ae
   31a64:	462c2a01 	.word	0x462c2a01
   31a68:	46459e09 	.word	0x46459e09
   31a6c:	d9619f0a 	.word	0xd9619f0a
   31a70:	4640a922 	.word	0x4640a922
   31a74:	fa46f7ff 	.word	0xfa46f7ff
   31a78:	f1bb4683 	.word	0xf1bb4683
   31a7c:	f47f0f00 	.word	0xf47f0f00
   31a80:	2301ae58 	.word	0x2301ae58
   31a84:	46da9a01 	.word	0x46da9a01
   31a88:	970b3a24 	.word	0x970b3a24
   31a8c:	461f4693 	.word	0x461f4693
   31a90:	4609e9cd 	.word	0x4609e9cd
   31a94:	eb03b303 	.word	0xeb03b303
   31a98:	ea4f03c3 	.word	0xea4f03c3
   31a9c:	9b010883 	.word	0x9b010883
   31aa0:	0424f1a8 	.word	0x0424f1a8
   31aa4:	eb03441c 	.word	0xeb03441c
   31aa8:	e0050908 	.word	0xe0050908
   31aac:	45a3aa22 	.word	0x45a3aa22
   31ab0:	602af842 	.word	0x602af842
   31ab4:	d00f469a 	.word	0xd00f469a
   31ab8:	0604eb08 	.word	0x0604eb08
   31abc:	4622464b 	.word	0x4622464b
   31ac0:	46284631 	.word	0x46284631
   31ac4:	fbc2f7ff 	.word	0xfbc2f7ff
   31ac8:	0301f10a 	.word	0x0301f10a
   31acc:	b2db3c24 	.word	0xb2db3c24
   31ad0:	d0eb2800 	.word	0xd0eb2800
   31ad4:	e6dd4683 	.word	0xe6dd4683
   31ad8:	9a06007b 	.word	0x9a06007b
   31adc:	fa37b2df 	.word	0xfa37b2df
   31ae0:	463bf202 	.word	0x463bf202
   31ae4:	f1bad0d6 	.word	0xf1bad0d6
   31ae8:	e9dd0f01 	.word	0xe9dd0f01
   31aec:	9f0b4609 	.word	0x9f0b4609
   31af0:	8167f240 	.word	0x8167f240
   31af4:	a9224652 	.word	0xa9224652
   31af8:	f7ff4628 	.word	0xf7ff4628
   31afc:	4683fa03 	.word	0x4683fa03
   31b00:	f1bb9b05 	.word	0xf1bb9b05
   31b04:	f47f0f00 	.word	0xf47f0f00
   31b08:	b123ae15 	.word	0xb123ae15
   31b0c:	676b9b01 	.word	0x676b9b01
   31b10:	67ab9b02 	.word	0x67ab9b02
   31b14:	4619e676 	.word	0x4619e676
   31b18:	f0044638 	.word	0xf0044638
   31b1c:	4639fd73 	.word	0x4639fd73
   31b20:	a80d4680 	.word	0xa80d4680
   31b24:	fba8f004 	.word	0xfba8f004
   31b28:	28004683 	.word	0x28004683
   31b2c:	ae04f47f 	.word	0xae04f47f
   31b30:	e6729007 	.word	0xe6729007
   31b34:	46289922 	.word	0x46289922
   31b38:	f97cf7ff 	.word	0xf97cf7ff
   31b3c:	e79c4683 	.word	0xe79c4683
   31b40:	46504601 	.word	0x46504601
   31b44:	f83ef005 	.word	0xf83ef005
   31b48:	bf181c02 	.word	0xbf181c02
   31b4c:	a9162201 	.word	0xa9162201
   31b50:	12d9ea02 	.word	0x12d9ea02
   31b54:	f0044650 	.word	0xf0044650
   31b58:	4683fcbd 	.word	0x4683fcbd
   31b5c:	f004a816 	.word	0xf004a816
   31b60:	f1bbfb0f 	.word	0xf1bbfb0f
   31b64:	f47f0f00 	.word	0xf47f0f00
   31b68:	9b04af2b 	.word	0x9b04af2b
   31b6c:	f1032101 	.word	0xf1032101
   31b70:	46200418 	.word	0x46200418
   31b74:	fd0cf004 	.word	0xfd0cf004
   31b78:	28004683 	.word	0x28004683
   31b7c:	af20f47f 	.word	0xaf20f47f
   31b80:	2b009b6e 	.word	0x2b009b6e
   31b84:	8082f000 	.word	0x8082f000
   31b88:	6dab260c 	.word	0x6dab260c
   31b8c:	3307a813 	.word	0x3307a813
   31b90:	f00408df 	.word	0xf00408df
   31b94:	a816faed 	.word	0xa816faed
   31b98:	faeaf004 	.word	0xfaeaf004
   31b9c:	8020f8dd 	.word	0x8020f8dd
   31ba0:	9a6e9b6f 	.word	0x9a6e9b6f
   31ba4:	a8134639 	.word	0xa8134639
   31ba8:	fa64f006 	.word	0xfa64f006
   31bac:	2101e006 	.word	0x2101e006
   31bb0:	f004a813 	.word	0xf004a813
   31bb4:	2800ff2f 	.word	0x2800ff2f
   31bb8:	80c8f040 	.word	0x80c8f040
   31bbc:	a8134641 	.word	0xa8134641
   31bc0:	ff98f004 	.word	0xff98f004
   31bc4:	daf22800 	.word	0xdaf22800
   31bc8:	f0003e01 	.word	0xf0003e01
   31bcc:	21018100 	.word	0x21018100
   31bd0:	f004a813 	.word	0xf004a813
   31bd4:	2800fff7 	.word	0x2800fff7
   31bd8:	aa13dde2 	.word	0xaa13dde2
   31bdc:	46204621 	.word	0x46204621
   31be0:	fadcf005 	.word	0xfadcf005
   31be4:	b1304683 	.word	0xb1304683
   31be8:	f004a813 	.word	0xf004a813
   31bec:	a816fac9 	.word	0xa816fac9
   31bf0:	fac6f004 	.word	0xfac6f004
   31bf4:	4620e6e4 	.word	0x4620e6e4
   31bf8:	f7fe4629 	.word	0xf7fe4629
   31bfc:	4683fe7f 	.word	0x4683fe7f
   31c00:	d1f12800 	.word	0xd1f12800
   31c04:	4611aa13 	.word	0x4611aa13
   31c08:	f005a816 	.word	0xf005a816
   31c0c:	4683fac7 	.word	0x4683fac7
   31c10:	d1e92800 	.word	0xd1e92800
   31c14:	a8164629 	.word	0xa8164629
   31c18:	fe70f7fe 	.word	0xfe70f7fe
   31c1c:	28004683 	.word	0x28004683
   31c20:	9804d1e2 	.word	0x9804d1e2
   31c24:	4601aa16 	.word	0x4601aa16
   31c28:	fab8f005 	.word	0xfab8f005
   31c2c:	28004683 	.word	0x28004683
   31c30:	4629d1da 	.word	0x4629d1da
   31c34:	f7fe9804 	.word	0xf7fe9804
   31c38:	4683fe61 	.word	0x4683fe61
   31c3c:	d1d32800 	.word	0xd1d32800
   31c40:	aa13a916 	.word	0xaa13a916
   31c44:	f0054608 	.word	0xf0054608
   31c48:	4683faa9 	.word	0x4683faa9
   31c4c:	d1cb2800 	.word	0xd1cb2800
   31c50:	a8164629 	.word	0xa8164629
   31c54:	fe52f7fe 	.word	0xfe52f7fe
   31c58:	28004683 	.word	0x28004683
   31c5c:	aa16d1c4 	.word	0xaa16d1c4
   31c60:	46504651 	.word	0x46504651
   31c64:	fa9af005 	.word	0xfa9af005
   31c68:	28004683 	.word	0x28004683
   31c6c:	4629d1bc 	.word	0x4629d1bc
   31c70:	f7fe4650 	.word	0xf7fe4650
   31c74:	4683fe43 	.word	0x4683fe43
   31c78:	f004a813 	.word	0xf004a813
   31c7c:	a816fa81 	.word	0xa816fa81
   31c80:	fa7ef004 	.word	0xfa7ef004
   31c84:	0f00f1bb 	.word	0x0f00f1bb
   31c88:	ae9af47f 	.word	0xae9af47f
   31c8c:	f8dd46ab 	.word	0xf8dd46ab
   31c90:	f8dd8018 	.word	0xf8dd8018
   31c94:	f8cd900c 	.word	0xf8cd900c
   31c98:	f8dda018 	.word	0xf8dda018
   31c9c:	ab22a010 	.word	0xab22a010
   31ca0:	d0554543 	.word	0xd0554543
   31ca4:	46514652 	.word	0x46514652
   31ca8:	f7fe4658 	.word	0xf7fe4658
   31cac:	4602fe73 	.word	0x4602fe73
   31cb0:	d1492800 	.word	0xd1492800
   31cb4:	46044606 	.word	0x46044606
   31cb8:	3d01f818 	.word	0x3d01f818
   31cbc:	93059d01 	.word	0x93059d01
   31cc0:	0745f3c3 	.word	0x0745f3c3
   31cc4:	fab41be4 	.word	0xfab41be4
   31cc8:	0964f484 	.word	0x0964f484
   31ccc:	46224629 	.word	0x46224629
   31cd0:	f004a819 	.word	0xf004a819
   31cd4:	3601fbff 	.word	0x3601fbff
   31cd8:	010cf105 	.word	0x010cf105
   31cdc:	28003524 	.word	0x28003524
   31ce0:	aebdf47f 	.word	0xaebdf47f
   31ce4:	a81c4622 	.word	0xa81c4622
   31ce8:	fbf4f004 	.word	0xfbf4f004
   31cec:	2800b2f4 	.word	0x2800b2f4
   31cf0:	aeb5f47f 	.word	0xaeb5f47f
   31cf4:	d8e545a1 	.word	0xd8e545a1
   31cf8:	f004a816 	.word	0xf004a816
   31cfc:	aa1cfa39 	.word	0xaa1cfa39
   31d00:	a8169908 	.word	0xa8169908
   31d04:	f98af005 	.word	0xf98af005
   31d08:	4683b108 	.word	0x4683b108
   31d0c:	4601e655 	.word	0x4601e655
   31d10:	f004a81c 	.word	0xf004a81c
   31d14:	1c02ff57 	.word	0x1c02ff57
   31d18:	2201bf18 	.word	0x2201bf18
   31d1c:	a9169b05 	.word	0xa9169b05
   31d20:	12d3ea02 	.word	0x12d3ea02
   31d24:	f004a81c 	.word	0xf004a81c
   31d28:	9005fbd5 	.word	0x9005fbd5
   31d2c:	f004a816 	.word	0xf004a816
   31d30:	9a05fa27 	.word	0x9a05fa27
   31d34:	4652b942 	.word	0x4652b942
   31d38:	4651ab19 	.word	0x4651ab19
   31d3c:	f7ff4658 	.word	0xf7ff4658
   31d40:	4602fa85 	.word	0x4602fa85
   31d44:	d0aa2800 	.word	0xd0aa2800
   31d48:	e6394693 	.word	0xe6394693
   31d4c:	e74b4683 	.word	0xe74b4683
   31d50:	f8dda819 	.word	0xf8dda819
   31d54:	f004a018 	.word	0xf004a018
   31d58:	a81cfa13 	.word	0xa81cfa13
   31d5c:	fa10f004 	.word	0xfa10f004
   31d60:	f004a81f 	.word	0xf004a81f
   31d64:	a819fa0d 	.word	0xa819fa0d
   31d68:	fa02f004 	.word	0xfa02f004
   31d6c:	99084652 	.word	0x99084652
   31d70:	f005a819 	.word	0xf005a819
   31d74:	465df953 	.word	0x465df953
   31d78:	b1184683 	.word	0xb1184683
   31d7c:	f004a819 	.word	0xf004a819
   31d80:	e552f9ff 	.word	0xe552f9ff
   31d84:	46504659 	.word	0x46504659
   31d88:	ff1cf004 	.word	0xff1cf004
   31d8c:	a9199b02 	.word	0xa9199b02
   31d90:	bf082800 	.word	0xbf082800
   31d94:	46502300 	.word	0x46502300
   31d98:	f004461a 	.word	0xf004461a
   31d9c:	4683fb9b 	.word	0x4683fb9b
   31da0:	f004a819 	.word	0xf004a819
   31da4:	f1bbf9ed 	.word	0xf1bbf9ed
   31da8:	f47f0f00 	.word	0xf47f0f00
   31dac:	4628ad3e 	.word	0x4628ad3e
   31db0:	f7ff9904 	.word	0xf7ff9904
   31db4:	9b07f83f 	.word	0x9b07f83f
   31db8:	2b004683 	.word	0x2b004683
   31dbc:	acd4f47f 	.word	0xacd4f47f
   31dc0:	9922e4ba 	.word	0x9922e4ba
   31dc4:	f7ff4628 	.word	0xf7ff4628
   31dc8:	4683f835 	.word	0x4683f835
   31dcc:	f8dfe698 	.word	0xf8dfe698
   31dd0:	e5f5b02c 	.word	0xe5f5b02c
   31dd4:	f10a2201 	.word	0xf10a2201
   31dd8:	eb0a31ff 	.word	0xeb0a31ff
   31ddc:	fa020403 	.word	0xfa020403
   31de0:	3c01f301 	.word	0x3c01f301
   31de4:	b2db9302 	.word	0xb2db9302
   31de8:	fbb49106 	.word	0xfbb49106
   31dec:	4656f4fa 	.word	0x4656f4fa
   31df0:	e5029303 	.word	0xe5029303
   31df4:	ffffb280 	.word	0xffffb280
   31df8:	ffffb080 	.word	0xffffb080
   31dfc:	ffffb300 	.word	0xffffb300

00031e00 <symbol_000637b>:
   31e00:	43f8e92d 	.word	0x43f8e92d
   31e04:	e9dd2a01 	.word	0xe9dd2a01
   31e08:	d8437808 	.word	0xd8437808
   31e0c:	4681460d 	.word	0x4681460d
   31e10:	f1052100 	.word	0xf1052100
   31e14:	461e0018 	.word	0x461e0018
   31e18:	f0044614 	.word	0xf0044614
   31e1c:	b938fed3 	.word	0xb938fed3
   31e20:	0f00f1b8 	.word	0x0f00f1b8
   31e24:	2301d038 	.word	0x2301d038
   31e28:	60337038 	.word	0x60337038
   31e2c:	83f8e8bd 	.word	0x83f8e8bd
   31e30:	0004f109 	.word	0x0004f109
   31e34:	fc24f004 	.word	0xfc24f004
   31e38:	b9c44681 	.word	0xb9c44681
   31e3c:	33010043 	.word	0x33010043
   31e40:	60334598 	.word	0x60334598
   31e44:	2304d328 	.word	0x2304d328
   31e48:	46024639 	.word	0x46024639
   31e4c:	3b01f801 	.word	0x3b01f801
   31e50:	f0044628 	.word	0xf0044628
   31e54:	2800fcd7 	.word	0x2800fcd7
   31e58:	f109d1e8 	.word	0xf109d1e8
   31e5c:	f1050101 	.word	0xf1050101
   31e60:	4439000c 	.word	0x4439000c
   31e64:	e8bd464a 	.word	0xe8bd464a
   31e68:	f00443f8 	.word	0xf00443f8
   31e6c:	1c43bccb 	.word	0x1c43bccb
   31e70:	60334598 	.word	0x60334598
   31e74:	2100d310 	.word	0x2100d310
   31e78:	000cf105 	.word	0x000cf105
   31e7c:	fbc2f004 	.word	0xfbc2f004
   31e80:	30024639 	.word	0x30024639
   31e84:	0b01f801 	.word	0x0b01f801
   31e88:	4628464a 	.word	0x4628464a
   31e8c:	43f8e8bd 	.word	0x43f8e8bd
   31e90:	bcb8f004 	.word	0xbcb8f004
   31e94:	e7c94801 	.word	0xe7c94801
   31e98:	e7c74801 	.word	0xe7c74801
   31e9c:	ffffb080 	.word	0xffffb080
   31ea0:	ffffb100 	.word	0xffffb100

00031ea4 <symbol_0007a22>:
   31ea4:	d0412b00 	.word	0xd0412b00
   31ea8:	461eb5f8 	.word	0x461eb5f8
   31eac:	46147813 	.word	0x46147813
   31eb0:	b9ab460d 	.word	0xb9ab460d
   31eb4:	d1352e01 	.word	0xd1352e01
   31eb8:	46284631 	.word	0x46284631
   31ebc:	fb68f004 	.word	0xfb68f004
   31ec0:	bdf8b100 	.word	0xbdf8b100
   31ec4:	f1054631 	.word	0xf1054631
   31ec8:	f004000c 	.word	0xf004000c
   31ecc:	2800fb61 	.word	0x2800fb61
   31ed0:	4601d1f7 	.word	0x4601d1f7
   31ed4:	0018f105 	.word	0x0018f105
   31ed8:	40f8e8bd 	.word	0x40f8e8bd
   31edc:	bb58f004 	.word	0xbb58f004
   31ee0:	f0043004 	.word	0xf0043004
   31ee4:	7823fbcd 	.word	0x7823fbcd
   31ee8:	2b044607 	.word	0x2b044607
   31eec:	0043d11c 	.word	0x0043d11c
   31ef0:	429e3301 	.word	0x429e3301
   31ef4:	4602d116 	.word	0x4602d116
   31ef8:	46281c61 	.word	0x46281c61
   31efc:	fbf0f004 	.word	0xfbf0f004
   31f00:	d1de2800 	.word	0xd1de2800
   31f04:	44211c79 	.word	0x44211c79
   31f08:	f105463a 	.word	0xf105463a
   31f0c:	f004000c 	.word	0xf004000c
   31f10:	2800fbe7 	.word	0x2800fbe7
   31f14:	f105d1d5 	.word	0xf105d1d5
   31f18:	21010018 	.word	0x21010018
   31f1c:	40f8e8bd 	.word	0x40f8e8bd
   31f20:	bb36f004 	.word	0xbb36f004
   31f24:	bdf84802 	.word	0xbdf84802
   31f28:	bdf84802 	.word	0xbdf84802
   31f2c:	47704800 	.word	0x47704800
   31f30:	ffffb080 	.word	0xffffb080
   31f34:	ffffb180 	.word	0xffffb180

00031f38 <symbol_000e8bc>:
   31f38:	41f0e92d 	.word	0x41f0e92d
   31f3c:	b086460c 	.word	0xb086460c
   31f40:	21014605 	.word	0x21014605
   31f44:	0018f104 	.word	0x0018f104
   31f48:	fe3cf004 	.word	0xfe3cf004
   31f4c:	f0402800 	.word	0xf0402800
   31f50:	6b2b809f 	.word	0x6b2b809f
   31f54:	f0002b00 	.word	0xf0002b00
   31f58:	6beb80a0 	.word	0x6beb80a0
   31f5c:	f0002b00 	.word	0xf0002b00
   31f60:	4601809c 	.word	0x4601809c
   31f64:	46204606 	.word	0x46204606
   31f68:	fe2cf004 	.word	0xfe2cf004
   31f6c:	f2c02800 	.word	0xf2c02800
   31f70:	f104808f 	.word	0xf104808f
   31f74:	4631070c 	.word	0x4631070c
   31f78:	f0044638 	.word	0xf0044638
   31f7c:	2800fe23 	.word	0x2800fe23
   31f80:	8086f2c0 	.word	0x8086f2c0
   31f84:	0804f105 	.word	0x0804f105
   31f88:	46204641 	.word	0x46204641
   31f8c:	fdb2f004 	.word	0xfdb2f004
   31f90:	da7d2800 	.word	0xda7d2800
   31f94:	46384641 	.word	0x46384641
   31f98:	fdacf004 	.word	0xfdacf004
   31f9c:	da772800 	.word	0xda772800
   31fa0:	f0044668 	.word	0xf0044668
   31fa4:	a803f8e5 	.word	0xa803f8e5
   31fa8:	f8e2f004 	.word	0xf8e2f004
   31fac:	4639463a 	.word	0x4639463a
   31fb0:	f0054668 	.word	0xf0054668
   31fb4:	4606f8f3 	.word	0x4606f8f3
   31fb8:	4668b148 	.word	0x4668b148
   31fbc:	f8e0f004 	.word	0xf8e0f004
   31fc0:	f004a803 	.word	0xf004a803
   31fc4:	4630f8dd 	.word	0x4630f8dd
   31fc8:	e8bdb006 	.word	0xe8bdb006
   31fcc:	462981f0 	.word	0x462981f0
   31fd0:	f7fe4668 	.word	0xf7fe4668
   31fd4:	4606fc93 	.word	0x4606fc93
   31fd8:	d1ee2800 	.word	0xd1ee2800
   31fdc:	46214622 	.word	0x46214622
   31fe0:	f005a803 	.word	0xf005a803
   31fe4:	4606f8db 	.word	0x4606f8db
   31fe8:	d1e62800 	.word	0xd1e62800
   31fec:	a8034629 	.word	0xa8034629
   31ff0:	fc84f7fe 	.word	0xfc84f7fe
   31ff4:	28004606 	.word	0x28004606
   31ff8:	69abd1df 	.word	0x69abd1df
   31ffc:	d04e2b00 	.word	0xd04e2b00
   32000:	f105a903 	.word	0xf105a903
   32004:	46080210 	.word	0x46080210
   32008:	ff94f004 	.word	0xff94f004
   3200c:	28004606 	.word	0x28004606
   32010:	e007d1d3 	.word	0xe007d1d3
   32014:	4642a903 	.word	0x4642a903
   32018:	f0044608 	.word	0xf0044608
   3201c:	4606fecb 	.word	0x4606fecb
   32020:	d1ca2800 	.word	0xd1ca2800
   32024:	a8034641 	.word	0xa8034641
   32028:	fd64f004 	.word	0xfd64f004
   3202c:	daf12800 	.word	0xdaf12800
   32030:	4622a903 	.word	0x4622a903
   32034:	f0054608 	.word	0xf0054608
   32038:	4606f8b1 	.word	0x4606f8b1
   3203c:	d1bc2800 	.word	0xd1bc2800
   32040:	a8034629 	.word	0xa8034629
   32044:	fc5af7fe 	.word	0xfc5af7fe
   32048:	28004606 	.word	0x28004606
   3204c:	a903d1b5 	.word	0xa903d1b5
   32050:	021cf105 	.word	0x021cf105
   32054:	f0044608 	.word	0xf0044608
   32058:	4606ff6d 	.word	0x4606ff6d
   3205c:	d1ac2800 	.word	0xd1ac2800
   32060:	a903e007 	.word	0xa903e007
   32064:	46084642 	.word	0x46084642
   32068:	fea4f004 	.word	0xfea4f004
   3206c:	28004606 	.word	0x28004606
   32070:	4641d1a3 	.word	0x4641d1a3
   32074:	f004a803 	.word	0xf004a803
   32078:	2800fd3d 	.word	0x2800fd3d
   3207c:	a903daf1 	.word	0xa903daf1
   32080:	f0044668 	.word	0xf0044668
   32084:	4e14fd37 	.word	0x4e14fd37
   32088:	bf082800 	.word	0xbf082800
   3208c:	e7942600 	.word	0xe7942600
   32090:	46304e11 	.word	0x46304e11
   32094:	e8bdb006 	.word	0xe8bdb006
   32098:	4e1081f0 	.word	0x4e1081f0
   3209c:	a903e793 	.word	0xa903e793
   320a0:	46082203 	.word	0x46082203
   320a4:	f82ef005 	.word	0xf82ef005
   320a8:	28004606 	.word	0x28004606
   320ac:	e00ed185 	.word	0xe00ed185
   320b0:	a8032100 	.word	0xa8032100
   320b4:	fd86f004 	.word	0xfd86f004
   320b8:	d0b92800 	.word	0xd0b92800
   320bc:	4642a903 	.word	0x4642a903
   320c0:	f0044608 	.word	0xf0044608
   320c4:	4606ff37 	.word	0x4606ff37
   320c8:	f47f2800 	.word	0xf47f2800
   320cc:	9b03af76 	.word	0x9b03af76
   320d0:	dbed2b00 	.word	0xdbed2b00
   320d4:	bf00e7ac 	.word	0xbf00e7ac
   320d8:	ffffb380 	.word	0xffffb380
   320dc:	ffffb080 	.word	0xffffb080

000320e0 <symbol_0001f66>:
   320e0:	43f0e92d 	.word	0x43f0e92d
   320e4:	b0ab7803 	.word	0xb0ab7803
   320e8:	f0002b00 	.word	0xf0002b00
   320ec:	780a80c4 	.word	0x780a80c4
   320f0:	f040429a 	.word	0xf040429a
   320f4:	f10180c0 	.word	0xf10180c0
   320f8:	460c0788 	.word	0x460c0788
   320fc:	46394605 	.word	0x46394605
   32100:	f0043088 	.word	0xf0043088
   32104:	2800fcf7 	.word	0x2800fcf7
   32108:	80b5f040 	.word	0x80b5f040
   3210c:	0994f104 	.word	0x0994f104
   32110:	f1054649 	.word	0xf1054649
   32114:	f0040094 	.word	0xf0040094
   32118:	2800fced 	.word	0x2800fced
   3211c:	80abf040 	.word	0x80abf040
   32120:	08a0f104 	.word	0x08a0f104
   32124:	00a0f105 	.word	0x00a0f105
   32128:	f0044641 	.word	0xf0044641
   3212c:	4606fce3 	.word	0x4606fce3
   32130:	f0402800 	.word	0xf0402800
   32134:	462580a0 	.word	0x462580a0
   32138:	f004a802 	.word	0xf004a802
   3213c:	a805f819 	.word	0xa805f819
   32140:	f816f004 	.word	0xf816f004
   32144:	f004a808 	.word	0xf004a808
   32148:	4631f813 	.word	0x4631f813
   3214c:	a80b227c 	.word	0xa80b227c
   32150:	ff72f00e 	.word	0xff72f00e
   32154:	1b7cf815 	.word	0x1b7cf815
   32158:	f7fda80b 	.word	0xf7fda80b
   3215c:	f104fbd5 	.word	0xf104fbd5
   32160:	21010040 	.word	0x21010040
   32164:	f0043428 	.word	0xf0043428
   32168:	2800fd2d 	.word	0x2800fd2d
   3216c:	8081f040 	.word	0x8081f040
   32170:	2b009b17 	.word	0x2b009b17
   32174:	9b1ad07d 	.word	0x9b1ad07d
   32178:	d07a2b00 	.word	0xd07a2b00
   3217c:	46282101 	.word	0x46282101
   32180:	fd20f004 	.word	0xfd20f004
   32184:	f2c02800 	.word	0xf2c02800
   32188:	a91e8083 	.word	0xa91e8083
   3218c:	f0044628 	.word	0xf0044628
   32190:	2800fcb1 	.word	0x2800fcb1
   32194:	4621da7c 	.word	0x4621da7c
   32198:	f7ffa80b 	.word	0xf7ffa80b
   3219c:	4606fecd 	.word	0x4606fecd
   321a0:	9b17b980 	.word	0x9b17b980
   321a4:	d0642b00 	.word	0xd0642b00
   321a8:	2b009b1a 	.word	0x2b009b1a
   321ac:	e9cdd061 	.word	0xe9cdd061
   321b0:	46230000 	.word	0x46230000
   321b4:	a902462a 	.word	0xa902462a
   321b8:	f7ffa80b 	.word	0xf7ffa80b
   321bc:	4606fa6b 	.word	0x4606fa6b
   321c0:	d04c2800 	.word	0xd04c2800
   321c4:	f003a802 	.word	0xf003a802
   321c8:	a805ffdb 	.word	0xa805ffdb
   321cc:	ffd8f003 	.word	0xffd8f003
   321d0:	f003a808 	.word	0xf003a808
   321d4:	9b23ffd5 	.word	0x9b23ffd5
   321d8:	d1262b01 	.word	0xd1262b01
   321dc:	b1c89828 	.word	0xb1c89828
   321e0:	b1aa9a29 	.word	0xb1aa9a29
   321e4:	eb052500 	.word	0xeb052500
   321e8:	eb1003c5 	.word	0xeb1003c5
   321ec:	d0320483 	.word	0xd0320483
   321f0:	f0034620 	.word	0xf0034620
   321f4:	f104ffc5 	.word	0xf104ffc5
   321f8:	f003000c 	.word	0xf003000c
   321fc:	f104ffc1 	.word	0xf104ffc1
   32200:	f0030018 	.word	0xf0030018
   32204:	9a29ffbd 	.word	0x9a29ffbd
   32208:	42953501 	.word	0x42953501
   3220c:	d3ea9828 	.word	0xd3ea9828
   32210:	fc16f007 	.word	0xfc16f007
   32214:	ab0b2200 	.word	0xab0b2200
   32218:	a92a701a 	.word	0xa92a701a
   3221c:	428b3301 	.word	0x428b3301
   32220:	4630d1fa 	.word	0x4630d1fa
   32224:	e8bdb02b 	.word	0xe8bdb02b
   32228:	a80c83f0 	.word	0xa80c83f0
   3222c:	ffa8f003 	.word	0xffa8f003
   32230:	f003a80f 	.word	0xf003a80f
   32234:	a812ffa5 	.word	0xa812ffa5
   32238:	ffa2f003 	.word	0xffa2f003
   3223c:	f003a815 	.word	0xf003a815
   32240:	a818ff9f 	.word	0xa818ff9f
   32244:	ff9cf003 	.word	0xff9cf003
   32248:	f003a81b 	.word	0xf003a81b
   3224c:	a81eff99 	.word	0xa81eff99
   32250:	ff96f003 	.word	0xff96f003
   32254:	3501e7c2 	.word	0x3501e7c2
   32258:	d3c44295 	.word	0xd3c44295
   3225c:	4639e7d8 	.word	0x4639e7d8
   32260:	f004a802 	.word	0xf004a802
   32264:	b920fc47 	.word	0xb920fc47
   32268:	a8054649 	.word	0xa8054649
   3226c:	fc42f004 	.word	0xfc42f004
   32270:	4e08b130 	.word	0x4e08b130
   32274:	4e07e7a6 	.word	0x4e07e7a6
   32278:	b02b4630 	.word	0xb02b4630
   3227c:	83f0e8bd 	.word	0x83f0e8bd
   32280:	a8084641 	.word	0xa8084641
   32284:	fc36f004 	.word	0xfc36f004
   32288:	28004606 	.word	0x28004606
   3228c:	e7f0d09a 	.word	0xe7f0d09a
   32290:	e7974e01 	.word	0xe7974e01
   32294:	ffffb080 	.word	0xffffb080
   32298:	ffffb380 	.word	0xffffb380

0003229c <interface_init>:
   3229c:	f44fb508 	.word	0xf44fb508
   322a0:	21007290 	.word	0x21007290
   322a4:	f00e4802 	.word	0xf00e4802
   322a8:	2000fec7 	.word	0x2000fec7
   322ac:	bf00bd08 	.word	0xbf00bd08
   322b0:	2002c21c 	.word	0x2002c21c

000322b4 <interface_socket_allocate>:
   322b4:	4b29b5f8 	.word	0x4b29b5f8
   322b8:	681d4606 	.word	0x681d4606
   322bc:	b1e54608 	.word	0xb1e54608
   322c0:	2c006a5c 	.word	0x2c006a5c
   322c4:	6c9cd03d 	.word	0x6c9cd03d
   322c8:	d03c2c00 	.word	0xd03c2c00
   322cc:	2c006edc 	.word	0x2c006edc
   322d0:	f8d3d03b 	.word	0xf8d3d03b
   322d4:	b1791090 	.word	0xb1791090
   322d8:	10b4f8d3 	.word	0x10b4f8d3
   322dc:	f8d3b3b9 	.word	0xf8d3b3b9
   322e0:	b3b110d8 	.word	0xb3b110d8
   322e4:	10fcf8d3 	.word	0x10fcf8d3
   322e8:	f04fb3a9 	.word	0xf04fb3a9
   322ec:	200c35ff 	.word	0x200c35ff
   322f0:	fbc0f7f3 	.word	0xfbc0f7f3
   322f4:	bdf84628 	.word	0xbdf84628
   322f8:	f04f2504 	.word	0xf04f2504
   322fc:	f04f0c01 	.word	0xf04f0c01
   32300:	eb0537ff 	.word	0xeb0537ff
   32304:	00a404c5 	.word	0x00a404c5
   32308:	c004f843 	.word	0xc004f843
   3230c:	4611441c 	.word	0x4611441c
   32310:	462261a7 	.word	0x462261a7
   32314:	facaf7fd 	.word	0xfacaf7fd
   32318:	61e04603 	.word	0x61e04603
   3231c:	681bb158 	.word	0x681bb158
   32320:	4798681b 	.word	0x4798681b
   32324:	6034b910 	.word	0x6034b910
   32328:	bdf84628 	.word	0xbdf84628
   3232c:	f7fd69e0 	.word	0xf7fd69e0
   32330:	2300fadd 	.word	0x2300fadd
   32334:	462061e3 	.word	0x462061e3
   32338:	21002224 	.word	0x21002224
   3233c:	fe7cf00e 	.word	0xfe7cf00e
   32340:	2501e7d3 	.word	0x2501e7d3
   32344:	2502e7d9 	.word	0x2502e7d9
   32348:	2503e7d7 	.word	0x2503e7d7
   3234c:	2505e7d5 	.word	0x2505e7d5
   32350:	2506e7d3 	.word	0x2506e7d3
   32354:	2507e7d1 	.word	0x2507e7d1
   32358:	bf00e7cf 	.word	0xbf00e7cf
   3235c:	2002c21c 	.word	0x2002c21c

00032360 <interface_socket_free>:
   32360:	d9002807 	.word	0xd9002807
   32364:	b5104770 	.word	0xb5104770
   32368:	eb004c07 	.word	0xeb004c07
   3236c:	eb0400c0 	.word	0xeb0400c0
   32370:	69e00480 	.word	0x69e00480
   32374:	f7fdb108 	.word	0xf7fdb108
   32378:	4620fab9 	.word	0x4620fab9
   3237c:	4010e8bd 	.word	0x4010e8bd
   32380:	21002224 	.word	0x21002224
   32384:	be58f00e 	.word	0xbe58f00e
   32388:	2002c21c 	.word	0x2002c21c

0003238c <interface_socket_packet_handler_update>:
   3238c:	e92d2807 	.word	0xe92d2807
   32390:	d81e43f8 	.word	0xd81e43f8
   32394:	08c0ea4f 	.word	0x08c0ea4f
   32398:	eb084e17 	.word	0xeb084e17
   3239c:	009b0300 	.word	0x009b0300
   323a0:	18f558f4 	.word	0x18f558f4
   323a4:	460bb1ac 	.word	0x460bb1ac
   323a8:	46114604 	.word	0x46114604
   323ac:	462a4618 	.word	0x462a4618
   323b0:	901cf8d5 	.word	0x901cf8d5
   323b4:	fa7af7fd 	.word	0xfa7af7fd
   323b8:	b1d061e8 	.word	0xb1d061e8
   323bc:	681b6803 	.word	0x681b6803
   323c0:	46074798 	.word	0x46074798
   323c4:	4648b948 	.word	0x4648b948
   323c8:	fa90f7fd 	.word	0xfa90f7fd
   323cc:	e8bd4638 	.word	0xe8bd4638
   323d0:	270583f8 	.word	0x270583f8
   323d4:	e8bd4638 	.word	0xe8bd4638
   323d8:	69e883f8 	.word	0x69e883f8
   323dc:	fa86f7fd 	.word	0xfa86f7fd
   323e0:	0004eb08 	.word	0x0004eb08
   323e4:	0680eb06 	.word	0x0680eb06
   323e8:	901cf8c6 	.word	0x901cf8c6
   323ec:	e8bd4638 	.word	0xe8bd4638
   323f0:	270483f8 	.word	0x270483f8
   323f4:	bf00e7f4 	.word	0xbf00e7f4
   323f8:	2002c21c 	.word	0x2002c21c

000323fc <interface_socket_wait>:
   323fc:	eb00b5f0 	.word	0xeb00b5f0
   32400:	4c0e00c0 	.word	0x4c0e00c0
   32404:	58250080 	.word	0x58250080
   32408:	4015b083 	.word	0x4015b083
   3240c:	9301428d 	.word	0x9301428d
   32410:	d0104404 	.word	0xd0104404
   32414:	b9736863 	.word	0xb9736863
   32418:	4616460f 	.word	0x4616460f
   3241c:	e0064625 	.word	0xe0064625
   32420:	b943686b 	.word	0xb943686b
   32424:	4620a901 	.word	0x4620a901
   32428:	fa94f7f3 	.word	0xfa94f7f3
   3242c:	682bb920 	.word	0x682bb920
   32430:	42bb4033 	.word	0x42bb4033
   32434:	2000d1f4 	.word	0x2000d1f4
   32438:	bdf0b003 	.word	0xbdf0b003
   3243c:	2002c21c 	.word	0x2002c21c

00032440 <interface_from_internal_id_search>:
   32440:	681a4b23 	.word	0x681a4b23
   32444:	699ab112 	.word	0x699ab112
   32448:	d0324282 	.word	0xd0324282
   3244c:	b1126a5a 	.word	0xb1126a5a
   32450:	42826bda 	.word	0x42826bda
   32454:	6c9ad02f 	.word	0x6c9ad02f
   32458:	6e1ab112 	.word	0x6e1ab112
   3245c:	d02c4282 	.word	0xd02c4282
   32460:	b11a6eda 	.word	0xb11a6eda
   32464:	2084f8d3 	.word	0x2084f8d3
   32468:	d0284282 	.word	0xd0284282
   3246c:	2090f8d3 	.word	0x2090f8d3
   32470:	f8d3b11a 	.word	0xf8d3b11a
   32474:	428220a8 	.word	0x428220a8
   32478:	f8d3d023 	.word	0xf8d3d023
   3247c:	b11a20b4 	.word	0xb11a20b4
   32480:	20ccf8d3 	.word	0x20ccf8d3
   32484:	d01e4282 	.word	0xd01e4282
   32488:	20d8f8d3 	.word	0x20d8f8d3
   3248c:	f8d3b11a 	.word	0xf8d3b11a
   32490:	428220f0 	.word	0x428220f0
   32494:	f8d3d019 	.word	0xf8d3d019
   32498:	b13a20fc 	.word	0xb13a20fc
   3249c:	3114f8d3 	.word	0x3114f8d3
   324a0:	bf144283 	.word	0xbf144283
   324a4:	30fff04f 	.word	0x30fff04f
   324a8:	47702007 	.word	0x47702007
   324ac:	30fff04f 	.word	0x30fff04f
   324b0:	20004770 	.word	0x20004770
   324b4:	20014770 	.word	0x20014770
   324b8:	20024770 	.word	0x20024770
   324bc:	20034770 	.word	0x20034770
   324c0:	20044770 	.word	0x20044770
   324c4:	20054770 	.word	0x20054770
   324c8:	20064770 	.word	0x20064770
   324cc:	bf004770 	.word	0xbf004770
   324d0:	2002c21c 	.word	0x2002c21c

000324d4 <interface_socket_from_handle_get>:
   324d4:	d8072807 	.word	0xd8072807
   324d8:	00c0eb00 	.word	0x00c0eb00
   324dc:	00804b03 	.word	0x00804b03
   324e0:	b10a581a 	.word	0xb10a581a
   324e4:	47704418 	.word	0x47704418
   324e8:	47702000 	.word	0x47702000
   324ec:	2002c21c 	.word	0x2002c21c

000324f0 <interface_socket_event_get>:
   324f0:	2807b119 	.word	0x2807b119
   324f4:	2310d902 	.word	0x2310d902
   324f8:	4770600b 	.word	0x4770600b
   324fc:	00c0eb00 	.word	0x00c0eb00
   32500:	00804b07 	.word	0x00804b07
   32504:	2a00581a 	.word	0x2a00581a
   32508:	581bd0f5 	.word	0x581bd0f5
   3250c:	f0030c1b 	.word	0xf0030c1b
   32510:	2a0a020a 	.word	0x2a0a020a
   32514:	f003bf14 	.word	0xf003bf14
   32518:	f003030f 	.word	0xf003030f
   3251c:	e7eb030d 	.word	0xe7eb030d
   32520:	2002c21c 	.word	0x2002c21c

00032524 <interface_socket_setopt>:
   32524:	b5702807 	.word	0xb5702807
   32528:	eb00d827 	.word	0xeb00d827
   3252c:	4c1600c0 	.word	0x4c1600c0
   32530:	58250080 	.word	0x58250080
   32534:	2901b30d 	.word	0x2901b30d
   32538:	2a14d119 	.word	0x2a14d119
   3253c:	b183d117 	.word	0xb183d117
   32540:	2a089a04 	.word	0x2a089a04
   32544:	f44fd10d 	.word	0xf44fd10d
   32548:	685a757a 	.word	0x685a757a
   3254c:	68194e0f 	.word	0x68194e0f
   32550:	2302fba6 	.word	0x2302fba6
   32554:	fb05099b 	.word	0xfb05099b
   32558:	44203301 	.word	0x44203301
   3255c:	20006203 	.word	0x20006203
   32560:	2016bd70 	.word	0x2016bd70
   32564:	fa86f7f3 	.word	0xfa86f7f3
   32568:	30fff04f 	.word	0x30fff04f
   3256c:	202abd70 	.word	0x202abd70
   32570:	fa80f7f3 	.word	0xfa80f7f3
   32574:	30fff04f 	.word	0x30fff04f
   32578:	2009bd70 	.word	0x2009bd70
   3257c:	fa7af7f3 	.word	0xfa7af7f3
   32580:	30fff04f 	.word	0x30fff04f
   32584:	bf00bd70 	.word	0xbf00bd70
   32588:	2002c21c 	.word	0x2002c21c
   3258c:	10624dd3 	.word	0x10624dd3

00032590 <interface_socket_getopt>:
   32590:	2807b570 	.word	0x2807b570
   32594:	d8219d04 	.word	0xd8219d04
   32598:	eb004c13 	.word	0xeb004c13
   3259c:	008000c0 	.word	0x008000c0
   325a0:	44045826 	.word	0x44045826
   325a4:	2901b1d6 	.word	0x2901b1d6
   325a8:	2a04d112 	.word	0x2a04d112
   325ac:	b14bd110 	.word	0xb14bd110
   325b0:	682ab145 	.word	0x682ab145
   325b4:	d1052a04 	.word	0xd1052a04
   325b8:	68612200 	.word	0x68612200
   325bc:	60194610 	.word	0x60194610
   325c0:	bd706062 	.word	0xbd706062
   325c4:	f7f32016 	.word	0xf7f32016
   325c8:	f04ffa55 	.word	0xf04ffa55
   325cc:	bd7030ff 	.word	0xbd7030ff
   325d0:	f7f3202a 	.word	0xf7f3202a
   325d4:	f04ffa4f 	.word	0xf04ffa4f
   325d8:	bd7030ff 	.word	0xbd7030ff
   325dc:	f7f32009 	.word	0xf7f32009
   325e0:	f04ffa49 	.word	0xf04ffa49
   325e4:	bd7030ff 	.word	0xbd7030ff
   325e8:	2002c21c 	.word	0x2002c21c

000325ec <interface_shutdown>:
   325ec:	681a4b15 	.word	0x681a4b15
   325f0:	2270b10a 	.word	0x2270b10a
   325f4:	6a5a605a 	.word	0x6a5a605a
   325f8:	2270b10a 	.word	0x2270b10a
   325fc:	6c9a629a 	.word	0x6c9a629a
   32600:	2270b10a 	.word	0x2270b10a
   32604:	6eda64da 	.word	0x6eda64da
   32608:	2270b10a 	.word	0x2270b10a
   3260c:	f8d3671a 	.word	0xf8d3671a
   32610:	b1122090 	.word	0xb1122090
   32614:	f8c32270 	.word	0xf8c32270
   32618:	f8d32094 	.word	0xf8d32094
   3261c:	b11220b4 	.word	0xb11220b4
   32620:	f8c32270 	.word	0xf8c32270
   32624:	f8d320b8 	.word	0xf8d320b8
   32628:	b11220d8 	.word	0xb11220d8
   3262c:	f8c32270 	.word	0xf8c32270
   32630:	f8d320dc 	.word	0xf8d320dc
   32634:	b11220fc 	.word	0xb11220fc
   32638:	f8c32270 	.word	0xf8c32270
   3263c:	20002100 	.word	0x20002100
   32640:	bf004770 	.word	0xbf004770
   32644:	2002c21c 	.word	0x2002c21c

00032648 <interface_socket_fcntl>:
   32648:	b5102807 	.word	0xb5102807
   3264c:	eb00d818 	.word	0xeb00d818
   32650:	4c1100c0 	.word	0x4c1100c0
   32654:	58e00083 	.word	0x58e00083
   32658:	2901b190 	.word	0x2901b190
   3265c:	2902d005 	.word	0x2902d005
   32660:	58e0d114 	.word	0x58e0d114
   32664:	7000f3c0 	.word	0x7000f3c0
   32668:	f012bd10 	.word	0xf012bd10
   3266c:	58e20001 	.word	0x58e20001
   32670:	2000bf1a 	.word	0x2000bf1a
   32674:	5280f042 	.word	0x5280f042
   32678:	5280f022 	.word	0x5280f022
   3267c:	bd1050e2 	.word	0xbd1050e2
   32680:	f7f32009 	.word	0xf7f32009
   32684:	f04ff9f7 	.word	0xf04ff9f7
   32688:	bd1030ff 	.word	0xbd1030ff
   3268c:	f7f32016 	.word	0xf7f32016
   32690:	f04ff9f1 	.word	0xf04ff9f1
   32694:	bd1030ff 	.word	0xbd1030ff
   32698:	2002c21c 	.word	0x2002c21c

0003269c <symbol_00026c2>:
   3269c:	4ff0e92d 	.word	0x4ff0e92d
   326a0:	2100460e 	.word	0x2100460e
   326a4:	b0854605 	.word	0xb0854605
   326a8:	93004608 	.word	0x93004608
   326ac:	461c4617 	.word	0x461c4617
   326b0:	aa034613 	.word	0xaa034613
   326b4:	9038f8dd 	.word	0x9038f8dd
   326b8:	f88af7fb 	.word	0xf88af7fb
   326bc:	f00f4628 	.word	0xf00f4628
   326c0:	4682f8b1 	.word	0x4682f8b1
   326c4:	f00f4630 	.word	0xf00f4630
   326c8:	9903f8ad 	.word	0x9903f8ad
   326cc:	eb031c4b 	.word	0xeb031c4b
   326d0:	44531391 	.word	0x44531391
   326d4:	9b0f4418 	.word	0x9b0f4418
   326d8:	d8534298 	.word	0xd8534298
   326dc:	f0072001 	.word	0xf0072001
   326e0:	4682f99b 	.word	0x4682f99b
   326e4:	d0522800 	.word	0xd0522800
   326e8:	94009903 	.word	0x94009903
   326ec:	aa03463b 	.word	0xaa03463b
   326f0:	f86ef7fb 	.word	0xf86ef7fb
   326f4:	28004680 	.word	0x28004680
   326f8:	4628d13d 	.word	0x4628d13d
   326fc:	f892f00f 	.word	0xf892f00f
   32700:	46024629 	.word	0x46024629
   32704:	f7e74648 	.word	0xf7e74648
   32708:	4628fbd3 	.word	0x4628fbd3
   3270c:	f88af00f 	.word	0xf88af00f
   32710:	eb099b03 	.word	0xeb099b03
   32714:	b19b0400 	.word	0xb19b0400
   32718:	270a46d3 	.word	0x270a46d3
   3271c:	bf282b40 	.word	0xbf282b40
   32720:	461d2340 	.word	0x461d2340
   32724:	461a4659 	.word	0x461a4659
   32728:	f7e74620 	.word	0xf7e74620
   3272c:	9b03fbc1 	.word	0x9b03fbc1
   32730:	1b5b442c 	.word	0x1b5b442c
   32734:	44ab7027 	.word	0x44ab7027
   32738:	93033401 	.word	0x93033401
   3273c:	d1ed2b00 	.word	0xd1ed2b00
   32740:	f00f4630 	.word	0xf00f4630
   32744:	4631f86f 	.word	0x4631f86f
   32748:	46204602 	.word	0x46204602
   3274c:	fbb0f7e7 	.word	0xfbb0f7e7
   32750:	f00f4630 	.word	0xf00f4630
   32754:	2100f867 	.word	0x2100f867
   32758:	18234602 	.word	0x18234602
   3275c:	330154a1 	.word	0x330154a1
   32760:	eba39a10 	.word	0xeba39a10
   32764:	46500309 	.word	0x46500309
   32768:	f0076013 	.word	0xf0076013
   3276c:	4640f969 	.word	0x4640f969
   32770:	e8bdb005 	.word	0xe8bdb005
   32774:	46508ff0 	.word	0x46508ff0
   32778:	f962f007 	.word	0xf962f007
   3277c:	b0054640 	.word	0xb0054640
   32780:	8ff0e8bd 	.word	0x8ff0e8bd
   32784:	f06f9b10 	.word	0xf06f9b10
   32788:	60180829 	.word	0x60180829
   3278c:	f8dfe7ef 	.word	0xf8dfe7ef
   32790:	e7ec8004 	.word	0xe7ec8004
   32794:	ffffee80 	.word	0xffffee80

00032798 <ip_recvd_packet_free_cb>:
   32798:	4604b510 	.word	0x4604b510
   3279c:	f7fa6800 	.word	0xf7fa6800
   327a0:	68a0fc9f 	.word	0x68a0fc9f
   327a4:	e8bdb118 	.word	0xe8bdb118
   327a8:	f0074010 	.word	0xf0074010
   327ac:	bd10b949 	.word	0xbd10b949

000327b0 <rpc_error_to_nrf_bsd_error>:
   327b0:	bf9a2810 	.word	0xbf9a2810
   327b4:	f8534b02 	.word	0xf8534b02
   327b8:	202d0020 	.word	0x202d0020
   327bc:	bf004770 	.word	0xbf004770
   327c0:	0004b630 	.word	0x0004b630

000327c4 <ip_interface_request_create>:
   327c4:	2500b570 	.word	0x2500b570
   327c8:	ac02b082 	.word	0xac02b082
   327cc:	5d04f844 	.word	0x5d04f844
   327d0:	460d4606 	.word	0x460d4606
   327d4:	46194620 	.word	0x46194620
   327d8:	f7fa4614 	.word	0xf7fa4614
   327dc:	b960fc4f 	.word	0xb960fc4f
   327e0:	22089b01 	.word	0x22089b01
   327e4:	72987258 	.word	0x72987258
   327e8:	461872d8 	.word	0x461872d8
   327ec:	4406ea44 	.word	0x4406ea44
   327f0:	611d60dc 	.word	0x611d60dc
   327f4:	b002721a 	.word	0xb002721a
   327f8:	9b01bd70 	.word	0x9b01bd70
   327fc:	b0024618 	.word	0xb0024618
   32800:	bf00bd70 	.word	0xbf00bd70

00032804 <ip_interface_request_send>:
   32804:	460cb570 	.word	0x460cb570
   32808:	46114605 	.word	0x46114605
   3280c:	461e4620 	.word	0x461e4620
   32810:	fc48f7fa 	.word	0xfc48f7fa
   32814:	bd70b900 	.word	0xbd70b900
   32818:	b1086820 	.word	0xb1086820
   3281c:	fc60f7fa 	.word	0xfc60f7fa
   32820:	f7fa4620 	.word	0xf7fa4620
   32824:	602efc55 	.word	0x602efc55
   32828:	bd702023 	.word	0xbd702023

0003282c <ip_interface_wait>:
   3282c:	4605b538 	.word	0x4605b538
   32830:	fde4f7ff 	.word	0xfde4f7ff
   32834:	b1084604 	.word	0xb1084604
   32838:	bd384620 	.word	0xbd384620
   3283c:	f7ff4628 	.word	0xf7ff4628
   32840:	2800fe49 	.word	0x2800fe49
   32844:	6844d0f8 	.word	0x6844d0f8
   32848:	d0f52c00 	.word	0xd0f52c00
   3284c:	60432300 	.word	0x60432300
   32850:	bd384620 	.word	0xbd384620

00032854 <ip_interface_init>:
   32854:	2300b538 	.word	0x2300b538
   32858:	4c084d07 	.word	0x4c084d07
   3285c:	22204619 	.word	0x22204619
   32860:	602b4807 	.word	0x602b4807
   32864:	f00e6023 	.word	0xf00e6023
   32868:	f7fafbe7 	.word	0xf7fafbe7
   3286c:	3000fc01 	.word	0x3000fc01
   32870:	2001bf18 	.word	0x2001bf18
   32874:	bd384240 	.word	0xbd384240
   32878:	20024e30 	.word	0x20024e30
   3287c:	20024e2c 	.word	0x20024e2c
   32880:	20024e38 	.word	0x20024e38

00032884 <ip_interface_open>:
   32884:	41f0e92d 	.word	0x41f0e92d
   32888:	20004606 	.word	0x20004606
   3288c:	0308f026 	.word	0x0308f026
   32890:	2b02b082 	.word	0x2b02b082
   32894:	4617460c 	.word	0x4617460c
   32898:	d0029000 	.word	0xd0029000
   3289c:	f0402e05 	.word	0xf0402e05
   328a0:	1e638084 	.word	0x1e638084
   328a4:	d85c2b02 	.word	0xd85c2b02
   328a8:	d1542f00 	.word	0xd1542f00
   328ac:	d0672c01 	.word	0xd0672c01
   328b0:	bf182c03 	.word	0xbf182c03
   328b4:	4a482702 	.word	0x4a482702
   328b8:	46684621 	.word	0x46684621
   328bc:	fcfaf7ff 	.word	0xfcfaf7ff
   328c0:	46809b00 	.word	0x46809b00
   328c4:	d0592b00 	.word	0xd0592b00
   328c8:	a8022100 	.word	0xa8022100
   328cc:	1d04f840 	.word	0x1d04f840
   328d0:	6403e9c3 	.word	0x6403e9c3
   328d4:	f7fa615f 	.word	0xf7fa615f
   328d8:	2800fbd1 	.word	0x2800fbd1
   328dc:	f247d14b 	.word	0xf247d14b
   328e0:	f04f0201 	.word	0xf04f0201
   328e4:	210833ff 	.word	0x210833ff
   328e8:	ea429d01 	.word	0xea429d01
   328ec:	60ea4208 	.word	0x60ea4208
   328f0:	72a87268 	.word	0x72a87268
   328f4:	722972e8 	.word	0x722972e8
   328f8:	746b742b 	.word	0x746b742b
   328fc:	74eb74ab 	.word	0x74eb74ab
   32900:	2e0568ab 	.word	0x2e0568ab
   32904:	030cf103 	.word	0x030cf103
   32908:	d00360ab 	.word	0xd00360ab
   3290c:	bf142e0a 	.word	0xbf142e0a
   32910:	26022601 	.word	0x26022601
   32914:	61ef616e 	.word	0x61ef616e
   32918:	f24761ac 	.word	0xf24761ac
   3291c:	46280101 	.word	0x46280101
   32920:	f7fa9f00 	.word	0xf7fa9f00
   32924:	4606fbbf 	.word	0x4606fbbf
   32928:	6828b360 	.word	0x6828b360
   3292c:	f7fab108 	.word	0xf7fab108
   32930:	4628fbd7 	.word	0x4628fbd7
   32934:	fbccf7fa 	.word	0xfbccf7fa
   32938:	25232301 	.word	0x25232301
   3293c:	4640603b 	.word	0x4640603b
   32940:	fd0ef7ff 	.word	0xfd0ef7ff
   32944:	f7f34628 	.word	0xf7f34628
   32948:	f04ff895 	.word	0xf04ff895
   3294c:	464038ff 	.word	0x464038ff
   32950:	e8bdb002 	.word	0xe8bdb002
   32954:	2c0181f0 	.word	0x2c0181f0
   32958:	2c02d009 	.word	0x2c02d009
   3295c:	2f02d109 	.word	0x2f02d109
   32960:	2016d0a9 	.word	0x2016d0a9
   32964:	f886f7f3 	.word	0xf886f7f3
   32968:	38fff04f 	.word	0x38fff04f
   3296c:	2f01e7ef 	.word	0x2f01e7ef
   32970:	2702d1f7 	.word	0x2702d1f7
   32974:	9d01e79f 	.word	0x9d01e79f
   32978:	d1c12d00 	.word	0xd1c12d00
   3297c:	e7de250c 	.word	0xe7de250c
   32980:	e7984627 	.word	0xe7984627
   32984:	33fff04f 	.word	0x33fff04f
   32988:	72fff64f 	.word	0x72fff64f
   3298c:	46402102 	.word	0x46402102
   32990:	fd34f7ff 	.word	0xfd34f7ff
   32994:	28004605 	.word	0x28004605
   32998:	4640d1d1 	.word	0x4640d1d1
   3299c:	fd9af7ff 	.word	0xfd9af7ff
   329a0:	6845b148 	.word	0x6845b148
   329a4:	6046b13d 	.word	0x6046b13d
   329a8:	202fe7c9 	.word	0x202fe7c9
   329ac:	f862f7f3 	.word	0xf862f7f3
   329b0:	38fff04f 	.word	0x38fff04f
   329b4:	3c02e7cb 	.word	0x3c02e7cb
   329b8:	d8c82c01 	.word	0xd8c82c01
   329bc:	9b004640 	.word	0x9b004640
   329c0:	f442681a 	.word	0xf442681a
   329c4:	601a3200 	.word	0x601a3200
   329c8:	f442681a 	.word	0xf442681a
   329cc:	601a1280 	.word	0x601a1280
   329d0:	e8bdb002 	.word	0xe8bdb002
   329d4:	bf0081f0 	.word	0xbf0081f0
   329d8:	00032799 	.word	0x00032799

000329dc <ip_interface_close>:
   329dc:	41f0e92d 	.word	0x41f0e92d
   329e0:	4606b082 	.word	0x4606b082
   329e4:	fd76f7ff 	.word	0xfd76f7ff
   329e8:	d0632800 	.word	0xd0632800
   329ec:	21004604 	.word	0x21004604
   329f0:	6827a802 	.word	0x6827a802
   329f4:	1d04f840 	.word	0x1d04f840
   329f8:	8018f8d4 	.word	0x8018f8d4
   329fc:	fb3ef7fa 	.word	0xfb3ef7fa
   32a00:	d13a2800 	.word	0xd13a2800
   32a04:	0309f247 	.word	0x0309f247
   32a08:	9d012208 	.word	0x9d012208
   32a0c:	4306ea43 	.word	0x4306ea43
   32a10:	f8c560eb 	.word	0xf8c560eb
   32a14:	72688010 	.word	0x72688010
   32a18:	72e872a8 	.word	0x72e872a8
   32a1c:	6823722a 	.word	0x6823722a
   32a20:	0109f247 	.word	0x0109f247
   32a24:	041b0c1b 	.word	0x041b0c1b
   32a28:	030df043 	.word	0x030df043
   32a2c:	68236023 	.word	0x68236023
   32a30:	f4234628 	.word	0xf4234628
   32a34:	60233300 	.word	0x60233300
   32a38:	f4236823 	.word	0xf4236823
   32a3c:	60231380 	.word	0x60231380
   32a40:	fb30f7fa 	.word	0xfb30f7fa
   32a44:	f04fbb40 	.word	0xf04fbb40
   32a48:	f64f33ff 	.word	0xf64f33ff
   32a4c:	210e72ff 	.word	0x210e72ff
   32a50:	f7ff4630 	.word	0xf7ff4630
   32a54:	4604fcd3 	.word	0x4604fcd3
   32a58:	4c17b1a0 	.word	0x4c17b1a0
   32a5c:	0026f854 	.word	0x0026f854
   32a60:	f7fab120 	.word	0xf7fab120
   32a64:	2300fb35 	.word	0x2300fb35
   32a68:	3026f844 	.word	0x3026f844
   32a6c:	f7ff4630 	.word	0xf7ff4630
   32a70:	2000fc77 	.word	0x2000fc77
   32a74:	e8bdb002 	.word	0xe8bdb002
   32a78:	9d0181f0 	.word	0x9d0181f0
   32a7c:	2d00200c 	.word	0x2d00200c
   32a80:	e012d1cd 	.word	0xe012d1cd
   32a84:	f7ff4630 	.word	0xf7ff4630
   32a88:	2800fd25 	.word	0x2800fd25
   32a8c:	6843d0e5 	.word	0x6843d0e5
   32a90:	d0e22b00 	.word	0xd0e22b00
   32a94:	e7e06044 	.word	0xe7e06044
   32a98:	b1086828 	.word	0xb1086828
   32a9c:	fb20f7fa 	.word	0xfb20f7fa
   32aa0:	f7fa4628 	.word	0xf7fa4628
   32aa4:	2023fb15 	.word	0x2023fb15
   32aa8:	f7f26027 	.word	0xf7f26027
   32aac:	f04fffe3 	.word	0xf04fffe3
   32ab0:	e7df30ff 	.word	0xe7df30ff
   32ab4:	e7f82009 	.word	0xe7f82009
   32ab8:	20024e38 	.word	0x20024e38

00032abc <ip_interface_sendto>:
   32abc:	4ff0e92d 	.word	0x4ff0e92d
   32ac0:	b0892500 	.word	0xb0892500
   32ac4:	46149103 	.word	0x46149103
   32ac8:	95079301 	.word	0x95079301
   32acc:	9e124607 	.word	0x9e124607
   32ad0:	fd00f7ff 	.word	0xfd00f7ff
   32ad4:	f0002800 	.word	0xf0002800
   32ad8:	f5b48124 	.word	0xf5b48124
   32adc:	f3005f80 	.word	0xf3005f80
   32ae0:	69038118 	.word	0x69038118
   32ae4:	2b014605 	.word	0x2b014605
   32ae8:	80d1f000 	.word	0x80d1f000
   32aec:	0390682a 	.word	0x0390682a
   32af0:	682ad423 	.word	0x682ad423
   32af4:	d4060091 	.word	0xd4060091
   32af8:	f0002b01 	.word	0xf0002b01
   32afc:	682b80ed 	.word	0x682b80ed
   32b00:	f140031a 	.word	0xf140031a
   32b04:	682b8102 	.word	0x682b8102
   32b08:	f140031b 	.word	0xf140031b
   32b0c:	68a88106 	.word	0x68a88106
   32b10:	9218f8df 	.word	0x9218f8df
   32b14:	f0402800 	.word	0xf0402800
   32b18:	682b8096 	.word	0x682b8096
   32b1c:	f1400118 	.word	0xf1400118
   32b20:	682b8082 	.word	0x682b8082
   32b24:	6300f023 	.word	0x6300f023
   32b28:	f859602b 	.word	0xf859602b
   32b2c:	28000027 	.word	0x28000027
   32b30:	4620d17c 	.word	0x4620d17c
   32b34:	e8bdb009 	.word	0xe8bdb009
   32b38:	f2478ff0 	.word	0xf2478ff0
   32b3c:	f04f0806 	.word	0xf04f0806
   32b40:	043b0a0c 	.word	0x043b0a0c
   32b44:	91e4f8df 	.word	0x91e4f8df
   32b48:	46219304 	.word	0x46219304
   32b4c:	f7faa807 	.word	0xf7faa807
   32b50:	2804fa95 	.word	0x2804fa95
   32b54:	2800d0f9 	.word	0x2800d0f9
   32b58:	9b07d171 	.word	0x9b07d171
   32b5c:	a008f883 	.word	0xa008f883
   32b60:	72987258 	.word	0x72987258
   32b64:	b33e72d8 	.word	0xb33e72d8
   32b68:	687168ea 	.word	0x687168ea
   32b6c:	d10a428a 	.word	0xd10a428a
   32b70:	f1032a02 	.word	0xf1032a02
   32b74:	7831001c 	.word	0x7831001c
   32b78:	8090f000 	.word	0x8090f000
   32b7c:	d1022a0a 	.word	0xd1022a0a
   32b80:	f0002924 	.word	0xf0002924
   32b84:	681880af 	.word	0x681880af
   32b88:	f7fab110 	.word	0xf7fab110
   32b8c:	9b07faa9 	.word	0x9b07faa9
   32b90:	f7fa4618 	.word	0xf7fa4618
   32b94:	2016fa9d 	.word	0x2016fa9d
   32b98:	031a682b 	.word	0x031a682b
   32b9c:	682bd453 	.word	0x682bd453
   32ba0:	2b0db29b 	.word	0x2b0db29b
   32ba4:	682bd0b6 	.word	0x682bd0b6
   32ba8:	1300f423 	.word	0x1300f423
   32bac:	682b602b 	.word	0x682b602b
   32bb0:	3300f443 	.word	0x3300f443
   32bb4:	e7ad602b 	.word	0xe7ad602b
   32bb8:	99014642 	.word	0x99014642
   32bbc:	69a96159 	.word	0x69a96159
   32bc0:	61199804 	.word	0x61199804
   32bc4:	43029903 	.word	0x43029903
   32bc8:	605c60da 	.word	0x605c60da
   32bcc:	6818b119 	.word	0x6818b119
   32bd0:	f7e74622 	.word	0xf7e74622
   32bd4:	682bf96d 	.word	0x682bf96d
   32bd8:	93054641 	.word	0x93054641
   32bdc:	f423682b 	.word	0xf423682b
   32be0:	602b3300 	.word	0x602b3300
   32be4:	f443682b 	.word	0xf443682b
   32be8:	602b1300 	.word	0x602b1300
   32bec:	46189b07 	.word	0x46189b07
   32bf0:	f7fa9302 	.word	0xf7fa9302
   32bf4:	9b02fa57 	.word	0x9b02fa57
   32bf8:	bb584683 	.word	0xbb584683
   32bfc:	3200f44f 	.word	0x3200f44f
   32c00:	33fff04f 	.word	0x33fff04f
   32c04:	46384611 	.word	0x46384611
   32c08:	fbf8f7ff 	.word	0xfbf8f7ff
   32c0c:	682bb370 	.word	0x682bb370
   32c10:	d4370319 	.word	0xd4370319
   32c14:	d1bf280c 	.word	0xd1bf280c
   32c18:	0027f859 	.word	0x0027f859
   32c1c:	d0942800 	.word	0xd0942800
   32c20:	fa56f7fa 	.word	0xfa56f7fa
   32c24:	f859e791 	.word	0xf859e791
   32c28:	69840027 	.word	0x69840027
   32c2c:	fa50f7fa 	.word	0xfa50f7fa
   32c30:	46202300 	.word	0x46202300
   32c34:	3027f849 	.word	0x3027f849
   32c38:	e8bdb009 	.word	0xe8bdb009
   32c3c:	682b8ff0 	.word	0x682b8ff0
   32c40:	031a200c 	.word	0x031a200c
   32c44:	f7f2d5ab 	.word	0xf7f2d5ab
   32c48:	f04fff15 	.word	0xf04fff15
   32c4c:	f85934ff 	.word	0xf85934ff
   32c50:	e76c0027 	.word	0xe76c0027
   32c54:	469b6818 	.word	0x469b6818
   32c58:	f7fab108 	.word	0xf7fab108
   32c5c:	4658fa41 	.word	0x4658fa41
   32c60:	fa36f7fa 	.word	0xfa36f7fa
   32c64:	20239b05 	.word	0x20239b05
   32c68:	e795602b 	.word	0xe795602b
   32c6c:	f7ff4638 	.word	0xf7ff4638
   32c70:	4603fc31 	.word	0x4603fc31
   32c74:	6840b1f0 	.word	0x6840b1f0
   32c78:	f8c3b1e0 	.word	0xf8c3b1e0
   32c7c:	682bb004 	.word	0x682bb004
   32c80:	d5c70319 	.word	0xd5c70319
   32c84:	682b68a8 	.word	0x682b68a8
   32c88:	d588031e 	.word	0xd588031e
   32c8c:	2e00e742 	.word	0x2e00e742
   32c90:	af2cf43f 	.word	0xaf2cf43f
   32c94:	f8df2016 	.word	0xf8df2016
   32c98:	e7d49094 	.word	0xe7d49094
   32c9c:	f47f2910 	.word	0xf47f2910
   32ca0:	2204af72 	.word	0x2204af72
   32ca4:	835a8931 	.word	0x835a8931
   32ca8:	f1068319 	.word	0xf1068319
   32cac:	f7e7010c 	.word	0xf7e7010c
   32cb0:	e01ef8ff 	.word	0xe01ef8ff
   32cb4:	031b682b 	.word	0x031b682b
   32cb8:	af2ff53f 	.word	0xaf2ff53f
   32cbc:	b29b682b 	.word	0xb29b682b
   32cc0:	f43f2b0d 	.word	0xf43f2b0d
   32cc4:	682baf2a 	.word	0x682baf2a
   32cc8:	1300f423 	.word	0x1300f423
   32ccc:	682b602b 	.word	0x682b602b
   32cd0:	3300f443 	.word	0x3300f443
   32cd4:	e720602b 	.word	0xe720602b
   32cd8:	b29b682b 	.word	0xb29b682b
   32cdc:	f47f2b05 	.word	0xf47f2b05
   32ce0:	e70caf12 	.word	0xe70caf12
   32ce4:	89312210 	.word	0x89312210
   32ce8:	8319835a 	.word	0x8319835a
   32cec:	f7e718b1 	.word	0xf7e718b1
   32cf0:	f247f8df 	.word	0xf247f8df
   32cf4:	9b070207 	.word	0x9b070207
   32cf8:	68994690 	.word	0x68994690
   32cfc:	31048b58 	.word	0x31048b58
   32d00:	98014401 	.word	0x98014401
   32d04:	61586099 	.word	0x61586099
   32d08:	2023e759 	.word	0x2023e759
   32d0c:	901cf8df 	.word	0x901cf8df
   32d10:	2028e799 	.word	0x2028e799
   32d14:	9014f8df 	.word	0x9014f8df
   32d18:	2039e795 	.word	0x2039e795
   32d1c:	900cf8df 	.word	0x900cf8df
   32d20:	2009e791 	.word	0x2009e791
   32d24:	9004f8df 	.word	0x9004f8df
   32d28:	bf00e78d 	.word	0xbf00e78d
   32d2c:	20024e38 	.word	0x20024e38

00032d30 <ip_interface_recvfrom>:
   32d30:	4ff0e92d 	.word	0x4ff0e92d
   32d34:	2a00b085 	.word	0x2a00b085
   32d38:	8110f000 	.word	0x8110f000
   32d3c:	4699468a 	.word	0x4699468a
   32d40:	46164607 	.word	0x46164607
   32d44:	fbc6f7ff 	.word	0xfbc6f7ff
   32d48:	28004604 	.word	0x28004604
   32d4c:	810df000 	.word	0x810df000
   32d50:	02d96803 	.word	0x02d96803
   32d54:	f019d565 	.word	0xf019d565
   32d58:	bf180f02 	.word	0xbf180f02
   32d5c:	0800f04f 	.word	0x0800f04f
   32d60:	3bfff04f 	.word	0x3bfff04f
   32d64:	6803bf08 	.word	0x6803bf08
   32d68:	0510f009 	.word	0x0510f009
   32d6c:	f083bf04 	.word	0xf083bf04
   32d70:	f3c85880 	.word	0xf3c85880
   32d74:	68237800 	.word	0x68237800
   32d78:	d56d03da 	.word	0xd56d03da
   32d7c:	69e06823 	.word	0x69e06823
   32d80:	3380f423 	.word	0x3380f423
   32d84:	68036023 	.word	0x68036023
   32d88:	479868db 	.word	0x479868db
   32d8c:	3ffff1b0 	.word	0x3ffff1b0
   32d90:	f0004683 	.word	0xf0004683
   32d94:	42868081 	.word	0x42868081
   32d98:	6923dd03 	.word	0x6923dd03
   32d9c:	f0002b01 	.word	0xf0002b01
   32da0:	250080a7 	.word	0x250080a7
   32da4:	9b0f69e0 	.word	0x9b0f69e0
   32da8:	681bb103 	.word	0x681bb103
   32dac:	e9cd9a0e 	.word	0xe9cd9a0e
   32db0:	e9cda600 	.word	0xe9cda600
   32db4:	68032302 	.word	0x68032302
   32db8:	689b464a 	.word	0x689b464a
   32dbc:	47984669 	.word	0x47984669
   32dc0:	69e04683 	.word	0x69e04683
   32dc4:	3ffff1bb 	.word	0x3ffff1bb
   32dc8:	bf186803 	.word	0xbf186803
   32dcc:	68db2601 	.word	0x68db2601
   32dd0:	2600bf0a 	.word	0x2600bf0a
   32dd4:	0800f04f 	.word	0x0800f04f
   32dd8:	0823f04f 	.word	0x0823f04f
   32ddc:	30014798 	.word	0x30014798
   32de0:	2d00d135 	.word	0x2d00d135
   32de4:	80b6f000 	.word	0x80b6f000
   32de8:	f0002e00 	.word	0xf0002e00
   32dec:	682380a6 	.word	0x682380a6
   32df0:	d5060319 	.word	0xd5060319
   32df4:	b29b6823 	.word	0xb29b6823
   32df8:	d0022b0d 	.word	0xd0022b0d
   32dfc:	2b016923 	.word	0x2b016923
   32e00:	6823d025 	.word	0x6823d025
   32e04:	4f80f013 	.word	0x4f80f013
   32e08:	f0406823 	.word	0xf0406823
   32e0c:	031a80b1 	.word	0x031a80b1
   32e10:	f1b8d475 	.word	0xf1b8d475
   32e14:	f0400f00 	.word	0xf0400f00
   32e18:	4658808a 	.word	0x4658808a
   32e1c:	e8bdb005 	.word	0xe8bdb005
   32e20:	68038ff0 	.word	0x68038ff0
   32e24:	2b06b29b 	.word	0x2b06b29b
   32e28:	6803d073 	.word	0x6803d073
   32e2c:	2b07b29b 	.word	0x2b07b29b
   32e30:	f04fbf0c 	.word	0xf04fbf0c
   32e34:	f04f0809 	.word	0xf04f0809
   32e38:	69e00839 	.word	0x69e00839
   32e3c:	68db6803 	.word	0x68db6803
   32e40:	f1b04798 	.word	0xf1b04798
   32e44:	46833fff 	.word	0x46833fff
   32e48:	f04fd0db 	.word	0xf04fd0db
   32e4c:	68233bff 	.word	0x68233bff
   32e50:	3380f443 	.word	0x3380f443
   32e54:	e7dc6023 	.word	0xe7dc6023
   32e58:	0f00f1b8 	.word	0x0f00f1b8
   32e5c:	8081f000 	.word	0x8081f000
   32e60:	3280f44f 	.word	0x3280f44f
   32e64:	46116a23 	.word	0x46116a23
   32e68:	bf082b00 	.word	0xbf082b00
   32e6c:	33fff04f 	.word	0x33fff04f
   32e70:	f7ff4638 	.word	0xf7ff4638
   32e74:	4680fac3 	.word	0x4680fac3
   32e78:	6823b358 	.word	0x6823b358
   32e7c:	031b69e0 	.word	0x031b69e0
   32e80:	6823d521 	.word	0x6823d521
   32e84:	2b0db29b 	.word	0x2b0db29b
   32e88:	6925d01d 	.word	0x6925d01d
   32e8c:	0501f1a5 	.word	0x0501f1a5
   32e90:	f585fab5 	.word	0xf585fab5
   32e94:	e786096d 	.word	0xe786096d
   32e98:	03186823 	.word	0x03186823
   32e9c:	6823d5dc 	.word	0x6823d5dc
   32ea0:	2b0db29b 	.word	0x2b0db29b
   32ea4:	6923d0d8 	.word	0x6923d0d8
   32ea8:	2b0169e0 	.word	0x2b0169e0
   32eac:	f04fd034 	.word	0xf04fd034
   32eb0:	68230839 	.word	0x68230839
   32eb4:	041b0c1b 	.word	0x041b0c1b
   32eb8:	030df043 	.word	0x030df043
   32ebc:	68236023 	.word	0x68236023
   32ec0:	1380f423 	.word	0x1380f423
   32ec4:	68036023 	.word	0x68036023
   32ec8:	479868db 	.word	0x479868db
   32ecc:	d1be3001 	.word	0xd1be3001
   32ed0:	4638e797 	.word	0x4638e797
   32ed4:	fafef7ff 	.word	0xfafef7ff
   32ed8:	f8d0b138 	.word	0xf8d0b138
   32edc:	f1b88004 	.word	0xf1b88004
   32ee0:	d0020f00 	.word	0xd0020f00
   32ee4:	60432300 	.word	0x60432300
   32ee8:	f04fe7c7 	.word	0xf04fe7c7
   32eec:	e7420801 	.word	0xe7420801
   32ef0:	6823b11d 	.word	0x6823b11d
   32ef4:	d5b300db 	.word	0xd5b300db
   32ef8:	69e0e753 	.word	0x69e0e753
   32efc:	6823e753 	.word	0x6823e753
   32f00:	2b0db29b 	.word	0x2b0db29b
   32f04:	68a3d185 	.word	0x68a3d185
   32f08:	d0822b00 	.word	0xd0822b00
   32f0c:	8008f8d4 	.word	0x8008f8d4
   32f10:	f04fe77f 	.word	0xf04fe77f
   32f14:	e7900809 	.word	0xe7900809
   32f18:	68db6803 	.word	0x68db6803
   32f1c:	30014798 	.word	0x30014798
   32f20:	f04fd00b 	.word	0xf04fd00b
   32f24:	68230823 	.word	0x68230823
   32f28:	3380f443 	.word	0x3380f443
   32f2c:	46406023 	.word	0x46406023
   32f30:	fda0f7f2 	.word	0xfda0f7f2
   32f34:	3bfff04f 	.word	0x3bfff04f
   32f38:	6823e76f 	.word	0x6823e76f
   32f3c:	0b00f04f 	.word	0x0b00f04f
   32f40:	041b0c1b 	.word	0x041b0c1b
   32f44:	030df043 	.word	0x030df043
   32f48:	68236023 	.word	0x68236023
   32f4c:	1380f423 	.word	0x1380f423
   32f50:	e7626023 	.word	0xe7626023
   32f54:	f47f2e00 	.word	0xf47f2e00
   32f58:	e752af4a 	.word	0xe752af4a
   32f5c:	0816f04f 	.word	0x0816f04f
   32f60:	f04fe7e5 	.word	0xf04fe7e5
   32f64:	69e00823 	.word	0x69e00823
   32f68:	f04fe7ad 	.word	0xf04fe7ad
   32f6c:	e7de0809 	.word	0xe7de0809
   32f70:	4380f023 	.word	0x4380f023
   32f74:	68236023 	.word	0x68236023
   32f78:	0869f04f 	.word	0x0869f04f
   32f7c:	041b0c1b 	.word	0x041b0c1b
   32f80:	030df043 	.word	0x030df043
   32f84:	e7d26023 	.word	0xe7d26023

00032f88 <ip_interface_connect>:
   32f88:	41f0e92d 	.word	0x41f0e92d
   32f8c:	2900b082 	.word	0x2900b082
   32f90:	2a00d044 	.word	0x2a00d044
   32f94:	4606d042 	.word	0x4606d042
   32f98:	f7ff460f 	.word	0xf7ff460f
   32f9c:	4605fa9b 	.word	0x4605fa9b
   32fa0:	f0002800 	.word	0xf0002800
   32fa4:	68038096 	.word	0x68038096
   32fa8:	2b02b29b 	.word	0x2b02b29b
   32fac:	6803d004 	.word	0x6803d004
   32fb0:	2b04b29b 	.word	0x2b04b29b
   32fb4:	808df040 	.word	0x808df040
   32fb8:	f0116829 	.word	0xf0116829
   32fbc:	f0405100 	.word	0xf0405100
   32fc0:	a8028084 	.word	0xa8028084
   32fc4:	1d04f840 	.word	0x1d04f840
   32fc8:	8018f8d5 	.word	0x8018f8d5
   32fcc:	f856f7fa 	.word	0xf856f7fa
   32fd0:	2108bb70 	.word	0x2108bb70
   32fd4:	9c010433 	.word	0x9c010433
   32fd8:	42e0f443 	.word	0x42e0f443
   32fdc:	0202f042 	.word	0x0202f042
   32fe0:	f8c460e2 	.word	0xf8c460e2
   32fe4:	72608010 	.word	0x72608010
   32fe8:	72e072a0 	.word	0x72e072a0
   32fec:	f4437221 	.word	0xf4437221
   32ff0:	f04343e0 	.word	0xf04343e0
   32ff4:	60e30302 	.word	0x60e30302
   32ff8:	69aa68a3 	.word	0x69aa68a3
   32ffc:	61223304 	.word	0x61223304
   33000:	68eb60a3 	.word	0x68eb60a3
   33004:	4293687a 	.word	0x4293687a
   33008:	2b02d108 	.word	0x2b02d108
   3300c:	0018f104 	.word	0x0018f104
   33010:	d03a783a 	.word	0xd03a783a
   33014:	d1012b0a 	.word	0xd1012b0a
   33018:	d00e2a24 	.word	0xd00e2a24
   3301c:	46202416 	.word	0x46202416
   33020:	fd28f7f2 	.word	0xfd28f7f2
   33024:	34fff04f 	.word	0x34fff04f
   33028:	b0024620 	.word	0xb0024620
   3302c:	81f0e8bd 	.word	0x81f0e8bd
   33030:	2c009c01 	.word	0x2c009c01
   33034:	0433d04f 	.word	0x0433d04f
   33038:	2210e7d9 	.word	0x2210e7d9
   3303c:	18b9893b 	.word	0x18b9893b
   33040:	82a382e2 	.word	0x82a382e2
   33044:	ff34f7e6 	.word	0xff34f7e6
   33048:	8ae268a3 	.word	0x8ae268a3
   3304c:	0102f247 	.word	0x0102f247
   33050:	60a34413 	.word	0x60a34413
   33054:	682b682f 	.word	0x682b682f
   33058:	f0434620 	.word	0xf0434620
   3305c:	602b5300 	.word	0x602b5300
   33060:	f820f7fa 	.word	0xf820f7fa
   33064:	682bb9e0 	.word	0x682bb9e0
   33068:	5880f013 	.word	0x5880f013
   3306c:	f04fd12f 	.word	0xf04fd12f
   33070:	f64f33ff 	.word	0xf64f33ff
   33074:	210572ff 	.word	0x210572ff
   33078:	f7ff4630 	.word	0xf7ff4630
   3307c:	4604f9bf 	.word	0x4604f9bf
   33080:	2c73b1c0 	.word	0x2c73b1c0
   33084:	602fd0cb 	.word	0x602fd0cb
   33088:	2a10e7c9 	.word	0x2a10e7c9
   3308c:	2204d1c6 	.word	0x2204d1c6
   33090:	f107893b 	.word	0xf107893b
   33094:	82e2010c 	.word	0x82e2010c
   33098:	f7e682a3 	.word	0xf7e682a3
   3309c:	e7d3ff09 	.word	0xe7d3ff09
   330a0:	b1086820 	.word	0xb1086820
   330a4:	f81cf7fa 	.word	0xf81cf7fa
   330a8:	f7fa4620 	.word	0xf7fa4620
   330ac:	2423f811 	.word	0x2423f811
   330b0:	e7b4602f 	.word	0xe7b4602f
   330b4:	f7ff4630 	.word	0xf7ff4630
   330b8:	2800fa0d 	.word	0x2800fa0d
   330bc:	6844d0b4 	.word	0x6844d0b4
   330c0:	d0b12c00 	.word	0xd0b12c00
   330c4:	8004f8c0 	.word	0x8004f8c0
   330c8:	2472e7db 	.word	0x2472e7db
   330cc:	2473e7a7 	.word	0x2473e7a7
   330d0:	2409e7a5 	.word	0x2409e7a5
   330d4:	240ce7a3 	.word	0x240ce7a3
   330d8:	bf00e7a1 	.word	0xbf00e7a1

000330dc <ip_interface_bind>:
   330dc:	41f0e92d 	.word	0x41f0e92d
   330e0:	b389b082 	.word	0xb389b082
   330e4:	4607b382 	.word	0x4607b382
   330e8:	f7ff460e 	.word	0xf7ff460e
   330ec:	4605f9f3 	.word	0x4605f9f3
   330f0:	d07b2800 	.word	0xd07b2800
   330f4:	b29b6803 	.word	0xb29b6803
   330f8:	d1772b02 	.word	0xd1772b02
   330fc:	a8022100 	.word	0xa8022100
   33100:	1d04f840 	.word	0x1d04f840
   33104:	8018f8d5 	.word	0x8018f8d5
   33108:	ffb8f7f9 	.word	0xffb8f7f9
   3310c:	f247bb30 	.word	0xf247bb30
   33110:	22080305 	.word	0x22080305
   33114:	ea439c01 	.word	0xea439c01
   33118:	60e34307 	.word	0x60e34307
   3311c:	8010f8c4 	.word	0x8010f8c4
   33120:	72a07260 	.word	0x72a07260
   33124:	722272e0 	.word	0x722272e0
   33128:	330468a3 	.word	0x330468a3
   3312c:	68eb60a3 	.word	0x68eb60a3
   33130:	42936872 	.word	0x42936872
   33134:	2b02d108 	.word	0x2b02d108
   33138:	0018f104 	.word	0x0018f104
   3313c:	d03c7832 	.word	0xd03c7832
   33140:	d1012b0a 	.word	0xd1012b0a
   33144:	d00e2a24 	.word	0xd00e2a24
   33148:	46202416 	.word	0x46202416
   3314c:	fc92f7f2 	.word	0xfc92f7f2
   33150:	34fff04f 	.word	0x34fff04f
   33154:	b0024620 	.word	0xb0024620
   33158:	81f0e8bd 	.word	0x81f0e8bd
   3315c:	2c009c01 	.word	0x2c009c01
   33160:	240cd1e2 	.word	0x240cd1e2
   33164:	2210e7f1 	.word	0x2210e7f1
   33168:	18b18933 	.word	0x18b18933
   3316c:	82a382e2 	.word	0x82a382e2
   33170:	fe9ef7e6 	.word	0xfe9ef7e6
   33174:	8ae268a3 	.word	0x8ae268a3
   33178:	0105f247 	.word	0x0105f247
   3317c:	60a34413 	.word	0x60a34413
   33180:	4620682b 	.word	0x4620682b
   33184:	041b0c1b 	.word	0x041b0c1b
   33188:	0303f043 	.word	0x0303f043
   3318c:	682e602b 	.word	0x682e602b
   33190:	ff88f7f9 	.word	0xff88f7f9
   33194:	b9d84680 	.word	0xb9d84680
   33198:	33fff04f 	.word	0x33fff04f
   3319c:	72fff64f 	.word	0x72fff64f
   331a0:	46382104 	.word	0x46382104
   331a4:	f92af7ff 	.word	0xf92af7ff
   331a8:	b3084604 	.word	0xb3084604
   331ac:	0c1b682b 	.word	0x0c1b682b
   331b0:	f043041b 	.word	0xf043041b
   331b4:	602b0302 	.word	0x602b0302
   331b8:	2a10e7c7 	.word	0x2a10e7c7
   331bc:	2204d1c4 	.word	0x2204d1c4
   331c0:	f1068933 	.word	0xf1068933
   331c4:	82e2010c 	.word	0x82e2010c
   331c8:	f7e682a3 	.word	0xf7e682a3
   331cc:	e7d1fe71 	.word	0xe7d1fe71
   331d0:	b1086820 	.word	0xb1086820
   331d4:	ff84f7f9 	.word	0xff84f7f9
   331d8:	04360c36 	.word	0x04360c36
   331dc:	f0464620 	.word	0xf0464620
   331e0:	f7f90602 	.word	0xf7f90602
   331e4:	2423ff75 	.word	0x2423ff75
   331e8:	e7ae602e 	.word	0xe7ae602e
   331ec:	e7ac2409 	.word	0xe7ac2409
   331f0:	f7ff4638 	.word	0xf7ff4638
   331f4:	2800f96f 	.word	0x2800f96f
   331f8:	6844d0ac 	.word	0x6844d0ac
   331fc:	d0a92c00 	.word	0xd0a92c00
   33200:	8004f8c0 	.word	0x8004f8c0
   33204:	bf00e7d2 	.word	0xbf00e7d2

00033208 <ip_interface_listen>:
   33208:	41f0e92d 	.word	0x41f0e92d
   3320c:	4606b082 	.word	0x4606b082
   33210:	f960f7ff 	.word	0xf960f7ff
   33214:	d0672800 	.word	0xd0672800
   33218:	46056803 	.word	0x46056803
   3321c:	2b04b29b 	.word	0x2b04b29b
   33220:	2100d162 	.word	0x2100d162
   33224:	46304a32 	.word	0x46304a32
   33228:	f8b0f7ff 	.word	0xf8b0f7ff
   3322c:	28004601 	.word	0x28004601
   33230:	a802d15c 	.word	0xa802d15c
   33234:	1d04f840 	.word	0x1d04f840
   33238:	f7f969af 	.word	0xf7f969af
   3323c:	bba8ff1f 	.word	0xbba8ff1f
   33240:	0308f247 	.word	0x0308f247
   33244:	9c012208 	.word	0x9c012208
   33248:	4306ea43 	.word	0x4306ea43
   3324c:	612760e3 	.word	0x612760e3
   33250:	72a07260 	.word	0x72a07260
   33254:	722272e0 	.word	0x722272e0
   33258:	f24768a3 	.word	0xf24768a3
   3325c:	33040108 	.word	0x33040108
   33260:	682b60a3 	.word	0x682b60a3
   33264:	0c1b4620 	.word	0x0c1b4620
   33268:	f043041b 	.word	0xf043041b
   3326c:	602b0306 	.word	0x602b0306
   33270:	f7f9682f 	.word	0xf7f9682f
   33274:	4680ff17 	.word	0x4680ff17
   33278:	f04fb9e8 	.word	0xf04fb9e8
   3327c:	f64f33ff 	.word	0xf64f33ff
   33280:	210772ff 	.word	0x210772ff
   33284:	f7ff4630 	.word	0xf7ff4630
   33288:	4604f8b9 	.word	0x4604f8b9
   3328c:	682bb308 	.word	0x682bb308
   33290:	041b0c1b 	.word	0x041b0c1b
   33294:	0304f043 	.word	0x0304f043
   33298:	4620602b 	.word	0x4620602b
   3329c:	fbeaf7f2 	.word	0xfbeaf7f2
   332a0:	34fff04f 	.word	0x34fff04f
   332a4:	b0024620 	.word	0xb0024620
   332a8:	81f0e8bd 	.word	0x81f0e8bd
   332ac:	2c009c01 	.word	0x2c009c01
   332b0:	240cd1d2 	.word	0x240cd1d2
   332b4:	6820e7f1 	.word	0x6820e7f1
   332b8:	f7f9b108 	.word	0xf7f9b108
   332bc:	0c3fff11 	.word	0x0c3fff11
   332c0:	4620043f 	.word	0x4620043f
   332c4:	0704f047 	.word	0x0704f047
   332c8:	ff02f7f9 	.word	0xff02f7f9
   332cc:	602f2423 	.word	0x602f2423
   332d0:	4630e7e3 	.word	0x4630e7e3
   332d4:	f8fef7ff 	.word	0xf8fef7ff
   332d8:	d0e32800 	.word	0xd0e32800
   332dc:	2c006844 	.word	0x2c006844
   332e0:	f8c0d0e0 	.word	0xf8c0d0e0
   332e4:	e7d28004 	.word	0xe7d28004
   332e8:	e7d62409 	.word	0xe7d62409
   332ec:	e7d42423 	.word	0xe7d42423
   332f0:	00032799 	.word	0x00032799

000332f4 <ip_interface_accept>:
   332f4:	4ff0e92d 	.word	0x4ff0e92d
   332f8:	b0852500 	.word	0xb0852500
   332fc:	4690460f 	.word	0x4690460f
   33300:	46069502 	.word	0x46069502
   33304:	f8e6f7ff 	.word	0xf8e6f7ff
   33308:	28004604 	.word	0x28004604
   3330c:	811cf000 	.word	0x811cf000
   33310:	b29b6803 	.word	0xb29b6803
   33314:	d10a2b07 	.word	0xd10a2b07
   33318:	68056803 	.word	0x68056803
   3331c:	d41600db 	.word	0xd41600db
   33320:	3580f415 	.word	0x3580f415
   33324:	6805d019 	.word	0x6805d019
   33328:	3580f415 	.word	0x3580f415
   3332c:	f04fd124 	.word	0xf04fd124
   33330:	9b020909 	.word	0x9b020909
   33334:	4628b113 	.word	0x4628b113
   33338:	f812f7ff 	.word	0xf812f7ff
   3333c:	f04f4648 	.word	0xf04f4648
   33340:	f7f239ff 	.word	0xf7f239ff
   33344:	4648fb97 	.word	0x4648fb97
   33348:	e8bdb005 	.word	0xe8bdb005
   3334c:	f4158ff0 	.word	0xf4158ff0
   33350:	d16d3580 	.word	0xd16d3580
   33354:	0923f04f 	.word	0x0923f04f
   33358:	f44fe7eb 	.word	0xf44fe7eb
   3335c:	f04f3280 	.word	0xf04f3280
   33360:	461133ff 	.word	0x461133ff
   33364:	f7ff4630 	.word	0xf7ff4630
   33368:	4681f849 	.word	0x4681f849
   3336c:	d07e2800 	.word	0xd07e2800
   33370:	f4156825 	.word	0xf4156825
   33374:	d0dc3580 	.word	0xd0dc3580
   33378:	30fff04f 	.word	0x30fff04f
   3337c:	e9cd2300 	.word	0xe9cd2300
   33380:	4a750300 	.word	0x4a750300
   33384:	a8026921 	.word	0xa8026921
   33388:	ff94f7fe 	.word	0xff94f7fe
   3338c:	46059b02 	.word	0x46059b02
   33390:	f0002b00 	.word	0xf0002b00
   33394:	210080dd 	.word	0x210080dd
   33398:	a8046962 	.word	0xa8046962
   3339c:	68e2615a 	.word	0x68e2615a
   333a0:	1d04f840 	.word	0x1d04f840
   333a4:	692260da 	.word	0x692260da
   333a8:	f8d4611a 	.word	0xf8d4611a
   333ac:	f7f99018 	.word	0xf7f99018
   333b0:	2800fe65 	.word	0x2800fe65
   333b4:	f247d143 	.word	0xf247d143
   333b8:	2108030c 	.word	0x2108030c
   333bc:	b00cf8dd 	.word	0xb00cf8dd
   333c0:	4306ea43 	.word	0x4306ea43
   333c4:	300cf8cb 	.word	0x300cf8cb
   333c8:	9010f8cb 	.word	0x9010f8cb
   333cc:	0009f88b 	.word	0x0009f88b
   333d0:	000af88b 	.word	0x000af88b
   333d4:	000bf88b 	.word	0x000bf88b
   333d8:	1008f88b 	.word	0x1008f88b
   333dc:	f2476823 	.word	0xf2476823
   333e0:	0c1b010c 	.word	0x0c1b010c
   333e4:	f043041b 	.word	0xf043041b
   333e8:	60230308 	.word	0x60230308
   333ec:	f8d44658 	.word	0xf8d44658
   333f0:	f7f99000 	.word	0xf7f99000
   333f4:	4682fe57 	.word	0x4682fe57
   333f8:	6822bb48 	.word	0x6822bb48
   333fc:	f04f9900 	.word	0xf04f9900
   33400:	400a33ff 	.word	0x400a33ff
   33404:	21096022 	.word	0x21096022
   33408:	72fff64f 	.word	0x72fff64f
   3340c:	f7fe4630 	.word	0xf7fe4630
   33410:	4681fff5 	.word	0x4681fff5
   33414:	f0002800 	.word	0xf0002800
   33418:	68238085 	.word	0x68238085
   3341c:	431a9a01 	.word	0x431a9a01
   33420:	68236022 	.word	0x68236022
   33424:	041b0c1b 	.word	0x041b0c1b
   33428:	0307f043 	.word	0x0307f043
   3342c:	e7806023 	.word	0xe7806023
   33430:	5280f06f 	.word	0x5280f06f
   33434:	5380f04f 	.word	0x5380f04f
   33438:	2300e9cd 	.word	0x2300e9cd
   3343c:	f8dde7a1 	.word	0xf8dde7a1
   33440:	f04fb00c 	.word	0xf04fb00c
   33444:	f1bb090c 	.word	0xf1bb090c
   33448:	d1c70f00 	.word	0xd1c70f00
   3344c:	f8dbe771 	.word	0xf8dbe771
   33450:	b1080000 	.word	0xb1080000
   33454:	fe44f7f9 	.word	0xfe44f7f9
   33458:	4919ea4f 	.word	0x4919ea4f
   3345c:	ea4f4658 	.word	0xea4f4658
   33460:	f7f94909 	.word	0xf7f94909
   33464:	f049fe35 	.word	0xf049fe35
   33468:	60230307 	.word	0x60230307
   3346c:	4630e772 	.word	0x4630e772
   33470:	f830f7ff 	.word	0xf830f7ff
   33474:	f8d0b130 	.word	0xf8d0b130
   33478:	f1b99004 	.word	0xf1b99004
   3347c:	d0010f00 	.word	0xd0010f00
   33480:	e7756045 	.word	0xe7756045
   33484:	03d96823 	.word	0x03d96823
   33488:	af76f53f 	.word	0xaf76f53f
   3348c:	99024d33 	.word	0x99024d33
   33490:	3026f855 	.word	0x3026f855
   33494:	618b699b 	.word	0x618b699b
   33498:	68cbb147 	.word	0x68cbb147
   3349c:	d0242b0a 	.word	0xd0242b0a
   334a0:	d1032b02 	.word	0xd1032b02
   334a4:	2000f8d8 	.word	0x2000f8d8
   334a8:	d0322a10 	.word	0xd0322a10
   334ac:	482c680a 	.word	0x482c680a
   334b0:	f0424002 	.word	0xf0424002
   334b4:	600a0205 	.word	0x600a0205
   334b8:	68119a02 	.word	0x68119a02
   334bc:	3100f441 	.word	0x3100f441
   334c0:	68116011 	.word	0x68116011
   334c4:	1180f441 	.word	0x1180f441
   334c8:	68236011 	.word	0x68236011
   334cc:	f0434003 	.word	0xf0434003
   334d0:	60230307 	.word	0x60230307
   334d4:	0026f855 	.word	0x0026f855
   334d8:	fdfaf7f9 	.word	0xfdfaf7f9
   334dc:	46482300 	.word	0x46482300
   334e0:	3026f845 	.word	0x3026f845
   334e4:	e8bdb005 	.word	0xe8bdb005
   334e8:	f8d88ff0 	.word	0xf8d88ff0
   334ec:	2a242000 	.word	0x2a242000
   334f0:	703ad1dc 	.word	0x703ad1dc
   334f4:	607b2210 	.word	0x607b2210
   334f8:	3026f855 	.word	0x3026f855
   334fc:	0010f107 	.word	0x0010f107
   33500:	813b8b9b 	.word	0x813b8b9b
   33504:	1026f855 	.word	0x1026f855
   33508:	f7e63120 	.word	0xf7e63120
   3350c:	9902fcd1 	.word	0x9902fcd1
   33510:	703ae7cc 	.word	0x703ae7cc
   33514:	f855607b 	.word	0xf855607b
   33518:	f1073026 	.word	0xf1073026
   3351c:	8b9b000c 	.word	0x8b9b000c
   33520:	e7ee2204 	.word	0xe7ee2204
   33524:	f7fe4630 	.word	0xf7fe4630
   33528:	b138ffd5 	.word	0xb138ffd5
   3352c:	9004f8d0 	.word	0x9004f8d0
   33530:	0f00f1b9 	.word	0x0f00f1b9
   33534:	f8c0d002 	.word	0xf8c0d002
   33538:	e76ea004 	.word	0xe76ea004
   3353c:	9a016823 	.word	0x9a016823
   33540:	431346a9 	.word	0x431346a9
   33544:	e7a16023 	.word	0xe7a16023
   33548:	f04f4605 	.word	0xf04f4605
   3354c:	e6f00909 	.word	0xe6f00909
   33550:	090cf04f 	.word	0x090cf04f
   33554:	bf00e6f2 	.word	0xbf00e6f2
   33558:	00032799 	.word	0x00032799
   3355c:	20024e38 	.word	0x20024e38
   33560:	ffff0000 	.word	0xffff0000

00033564 <ip_interface_setopt>:
   33564:	41f0e92d 	.word	0x41f0e92d
   33568:	b0842901 	.word	0xb0842901
   3356c:	809cf040 	.word	0x809cf040
   33570:	4690460e 	.word	0x4690460e
   33574:	4607461d 	.word	0x4607461d
   33578:	ffacf7fe 	.word	0xffacf7fe
   3357c:	28004604 	.word	0x28004604
   33580:	80a5f000 	.word	0x80a5f000
   33584:	0f19f1b8 	.word	0x0f19f1b8
   33588:	2d00d16e 	.word	0x2d00d16e
   3358c:	8092f000 	.word	0x8092f000
   33590:	f00e4628 	.word	0xf00e4628
   33594:	9b0af947 	.word	0x9b0af947
   33598:	f0404298 	.word	0xf0404298
   3359c:	6823808b 	.word	0x6823808b
   335a0:	2b02b29b 	.word	0x2b02b29b
   335a4:	4629d173 	.word	0x4629d173
   335a8:	f00768e0 	.word	0xf00768e0
   335ac:	9002ff0d 	.word	0x9002ff0d
   335b0:	bf083001 	.word	0xbf083001
   335b4:	d04e2516 	.word	0xd04e2516
   335b8:	025b6823 	.word	0x025b6823
   335bc:	6823d44a 	.word	0x6823d44a
   335c0:	0300f413 	.word	0x0300f413
   335c4:	6826d146 	.word	0x6826d146
   335c8:	a8046822 	.word	0xa8046822
   335cc:	0280f442 	.word	0x0280f442
   335d0:	21046022 	.word	0x21046022
   335d4:	3d04f840 	.word	0x3d04f840
   335d8:	8018f8d4 	.word	0x8018f8d4
   335dc:	fd4ef7f9 	.word	0xfd4ef7f9
   335e0:	d14e2800 	.word	0xd14e2800
   335e4:	0203f247 	.word	0x0203f247
   335e8:	21082300 	.word	0x21082300
   335ec:	ea429d03 	.word	0xea429d03
   335f0:	60ea4207 	.word	0x60ea4207
   335f4:	8010f8c5 	.word	0x8010f8c5
   335f8:	726b7229 	.word	0x726b7229
   335fc:	72eb72ab 	.word	0x72eb72ab
   33600:	0c08f04f 	.word	0x0c08f04f
   33604:	20102300 	.word	0x20102300
   33608:	68aa2130 	.word	0x68aa2130
   3360c:	4462756b 	.word	0x4462756b
   33610:	75ab60aa 	.word	0x75ab60aa
   33614:	76ab75eb 	.word	0x76ab75eb
   33618:	f88576eb 	.word	0xf88576eb
   3361c:	7628c014 	.word	0x7628c014
   33620:	22047669 	.word	0x22047669
   33624:	010ceb0d 	.word	0x010ceb0d
   33628:	f7e66828 	.word	0xf7e66828
   3362c:	f247fc41 	.word	0xf247fc41
   33630:	46280103 	.word	0x46280103
   33634:	fd36f7f9 	.word	0xfd36f7f9
   33638:	bb504680 	.word	0xbb504680
   3363c:	0200f44f 	.word	0x0200f44f
   33640:	33fff04f 	.word	0x33fff04f
   33644:	46384611 	.word	0x46384611
   33648:	fed8f7fe 	.word	0xfed8f7fe
   3364c:	b3984605 	.word	0xb3984605
   33650:	e0006026 	.word	0xe0006026
   33654:	46282523 	.word	0x46282523
   33658:	fa0cf7f2 	.word	0xfa0cf7f2
   3365c:	35fff04f 	.word	0x35fff04f
   33660:	b0044628 	.word	0xb0044628
   33664:	81f0e8bd 	.word	0x81f0e8bd
   33668:	46429b0a 	.word	0x46429b0a
   3366c:	46319300 	.word	0x46319300
   33670:	4638462b 	.word	0x4638462b
   33674:	ff56f7fe 	.word	0xff56f7fe
   33678:	46284605 	.word	0x46284605
   3367c:	e8bdb004 	.word	0xe8bdb004
   33680:	9d0381f0 	.word	0x9d0381f0
   33684:	d1bb2d00 	.word	0xd1bb2d00
   33688:	250c6026 	.word	0x250c6026
   3368c:	2509e7e3 	.word	0x2509e7e3
   33690:	6828e7e1 	.word	0x6828e7e1
   33694:	f7f9b108 	.word	0xf7f9b108
   33698:	4628fd23 	.word	0x4628fd23
   3369c:	fd18f7f9 	.word	0xfd18f7f9
   336a0:	60262523 	.word	0x60262523
   336a4:	e7d66026 	.word	0xe7d66026
   336a8:	f7f2202a 	.word	0xf7f2202a
   336ac:	f04ff9e3 	.word	0xf04ff9e3
   336b0:	e7d535ff 	.word	0xe7d535ff
   336b4:	e7ce250e 	.word	0xe7ce250e
   336b8:	f7fe4638 	.word	0xf7fe4638
   336bc:	b120ff0b 	.word	0xb120ff0b
   336c0:	b1156845 	.word	0xb1156845
   336c4:	8004f8c0 	.word	0x8004f8c0
   336c8:	6026e7c2 	.word	0x6026e7c2
   336cc:	2009e7c8 	.word	0x2009e7c8
   336d0:	f9d0f7f2 	.word	0xf9d0f7f2
   336d4:	35fff04f 	.word	0x35fff04f
   336d8:	bf00e7c2 	.word	0xbf00e7c2

000336dc <ip_interface_getopt>:
   336dc:	bf58f7fe 	.word	0xbf58f7fe

000336e0 <ip_interface_getaddrinfo>:
   336e0:	4ff0e92d 	.word	0x4ff0e92d
   336e4:	0c00f04f 	.word	0x0c00f04f
   336e8:	4e722401 	.word	0x4e722401
   336ec:	a1d0f8df 	.word	0xa1d0f8df
   336f0:	91d0f8df 	.word	0x91d0f8df
   336f4:	4607b085 	.word	0x4607b085
   336f8:	93014615 	.word	0x93014615
   336fc:	c000f8a6 	.word	0xc000f8a6
   33700:	4000f8ca 	.word	0x4000f8ca
   33704:	4000f8c9 	.word	0x4000f8c9
   33708:	4608b171 	.word	0x4608b171
   3370c:	4661220a 	.word	0x4661220a
   33710:	fc58f00e 	.word	0xfc58f00e
   33714:	73fef64f 	.word	0x73fef64f
   33718:	429a1e42 	.word	0x429a1e42
   3371c:	8083f200 	.word	0x8083f200
   33720:	ea430203 	.word	0xea430203
   33724:	80302020 	.word	0x80302020
   33728:	819cf8df 	.word	0x819cf8df
   3372c:	3000f8d8 	.word	0x3000f8d8
   33730:	d1742b00 	.word	0xd1742b00
   33734:	60134a60 	.word	0x60134a60
   33738:	60134a60 	.word	0x60134a60
   3373c:	d0622f00 	.word	0xd0622f00
   33740:	f00e4638 	.word	0xf00e4638
   33744:	4683f86f 	.word	0x4683f86f
   33748:	69eab125 	.word	0x69eab125
   3374c:	6851b112 	.word	0x6851b112
   33750:	d06c2966 	.word	0xd06c2966
   33754:	32fff04f 	.word	0x32fff04f
   33758:	ae042100 	.word	0xae042100
   3375c:	1d04f846 	.word	0x1d04f846
   33760:	46594630 	.word	0x46594630
   33764:	f7f99200 	.word	0xf7f99200
   33768:	9a00fc89 	.word	0x9a00fc89
   3376c:	d14c2800 	.word	0xd14c2800
   33770:	010df247 	.word	0x010df247
   33774:	0c08f04f 	.word	0x0c08f04f
   33778:	ea419c03 	.word	0xea419c03
   3377c:	60e14102 	.word	0x60e14102
   33780:	72606122 	.word	0x72606122
   33784:	72e072a0 	.word	0x72e072a0
   33788:	c008f884 	.word	0xc008f884
   3378c:	d0762d00 	.word	0xd0762d00
   33790:	f022686a 	.word	0xf022686a
   33794:	29020108 	.word	0x29020108
   33798:	2a05d05c 	.word	0x2a05d05c
   3379c:	68a9d178 	.word	0x68a9d178
   337a0:	f8c92902 	.word	0xf8c92902
   337a4:	d0611000 	.word	0xd0611000
   337a8:	68ea61a2 	.word	0x68ea61a2
   337ac:	68aa6222 	.word	0x68aa6222
   337b0:	682a61e2 	.word	0x682a61e2
   337b4:	68a26162 	.word	0x68a26162
   337b8:	60a23210 	.word	0x60a23210
   337bc:	6820b12f 	.word	0x6820b12f
   337c0:	465ab118 	.word	0x465ab118
   337c4:	f7e64639 	.word	0xf7e64639
   337c8:	2301fb73 	.word	0x2301fb73
   337cc:	010df247 	.word	0x010df247
   337d0:	f8c84620 	.word	0xf8c84620
   337d4:	f7f93000 	.word	0xf7f93000
   337d8:	2800fc65 	.word	0x2800fc65
   337dc:	f04fd156 	.word	0xf04fd156
   337e0:	930333ff 	.word	0x930333ff
   337e4:	46204631 	.word	0x46204631
   337e8:	f8b4f7f2 	.word	0xf8b4f7f2
   337ec:	3000f8d8 	.word	0x3000f8d8
   337f0:	d0f72b01 	.word	0xd0f72b01
   337f4:	68184b31 	.word	0x68184b31
   337f8:	d13b2800 	.word	0xd13b2800
   337fc:	9a014b2e 	.word	0x9a014b2e
   33800:	6013681b 	.word	0x6013681b
   33804:	46bbe00c 	.word	0x46bbe00c
   33808:	9c03e79e 	.word	0x9c03e79e
   3380c:	d1bd2c00 	.word	0xd1bd2c00
   33810:	2300200c 	.word	0x2300200c
   33814:	3000f8c8 	.word	0x3000f8c8
   33818:	e8bdb005 	.word	0xe8bdb005
   3381c:	20738ff0 	.word	0x20738ff0
   33820:	e8bdb005 	.word	0xe8bdb005
   33824:	20168ff0 	.word	0x20168ff0
   33828:	e8bdb005 	.word	0xe8bdb005
   3382c:	68918ff0 	.word	0x68918ff0
   33830:	7f00f5b1 	.word	0x7f00f5b1
   33834:	f240d18e 	.word	0xf240d18e
   33838:	68d02102 	.word	0x68d02102
   3383c:	d1894288 	.word	0xd1894288
   33840:	29006991 	.word	0x29006991
   33844:	6868d086 	.word	0x6868d086
   33848:	fdbef007 	.word	0xfdbef007
   3384c:	d0811c43 	.word	0xd0811c43
   33850:	e7814602 	.word	0xe7814602
   33854:	290268a9 	.word	0x290268a9
   33858:	1000f8c9 	.word	0x1000f8c9
   3385c:	2a05d006 	.word	0x2a05d006
   33860:	2a0ad0a2 	.word	0x2a0ad0a2
   33864:	2201bf14 	.word	0x2201bf14
   33868:	e79d2202 	.word	0xe79d2202
   3386c:	f8ca2102 	.word	0xf8ca2102
   33870:	e7f41000 	.word	0xe7f41000
   33874:	68184b11 	.word	0x68184b11
   33878:	d0d12800 	.word	0xd0d12800
   3387c:	4629e7c9 	.word	0x4629e7c9
   33880:	f1042210 	.word	0xf1042210
   33884:	f00d0014 	.word	0xf00d0014
   33888:	e794fbd7 	.word	0xe794fbd7
   3388c:	e7c02023 	.word	0xe7c02023
   33890:	f7f2202f 	.word	0xf7f2202f
   33894:	68a2f8ef 	.word	0x68a2f8ef
   33898:	60a23210 	.word	0x60a23210
   3389c:	f04fb917 	.word	0xf04fb917
   338a0:	e7b630ff 	.word	0xe7b630ff
   338a4:	28006820 	.word	0x28006820
   338a8:	465ad0f9 	.word	0x465ad0f9
   338ac:	f7e64639 	.word	0xf7e64639
   338b0:	e7f4faff 	.word	0xe7f4faff
   338b4:	2002a6ce 	.word	0x2002a6ce
   338b8:	20024e30 	.word	0x20024e30
   338bc:	20024e28 	.word	0x20024e28
   338c0:	20024e20 	.word	0x20024e20
   338c4:	20024e24 	.word	0x20024e24
   338c8:	20024e2c 	.word	0x20024e2c

000338cc <ip_interface_freeaddrinfo>:
   338cc:	4c0bb538 	.word	0x4c0bb538
   338d0:	2b026823 	.word	0x2b026823
   338d4:	bd38d000 	.word	0xbd38d000
   338d8:	4605b130 	.word	0x4605b130
   338dc:	f0066940 	.word	0xf0066940
   338e0:	4628f8af 	.word	0x4628f8af
   338e4:	f8acf006 	.word	0xf8acf006
   338e8:	4a052300 	.word	0x4a052300
   338ec:	60234905 	.word	0x60234905
   338f0:	68086013 	.word	0x68086013
   338f4:	4038e8bd 	.word	0x4038e8bd
   338f8:	bbf2f7f9 	.word	0xbbf2f7f9
   338fc:	20024e2c 	.word	0x20024e2c
   33900:	20024e28 	.word	0x20024e28
   33904:	20024e34 	.word	0x20024e34

00033908 <rpc_ip_event_handler>:
   33908:	4ff0e92d 	.word	0x4ff0e92d
   3390c:	4310f401 	.word	0x4310f401
   33910:	4f10f5b3 	.word	0x4f10f5b3
   33914:	b0894605 	.word	0xb0894605
   33918:	68c0460e 	.word	0x68c0460e
   3391c:	0c04d05e 	.word	0x0c04d05e
   33920:	f7fe4620 	.word	0xf7fe4620
   33924:	f248fdd7 	.word	0xf248fdd7
   33928:	429e030d 	.word	0x429e030d
   3392c:	46a04607 	.word	0x46a04607
   33930:	2f00d041 	.word	0x2f00d041
   33934:	4640d04e 	.word	0x4640d04e
   33938:	462a4633 	.word	0x462a4633
   3393c:	f7fc4639 	.word	0xf7fc4639
   33940:	2800fbd1 	.word	0x2800fbd1
   33944:	f248d042 	.word	0xf248d042
   33948:	429e0307 	.word	0x429e0307
   3394c:	f248d961 	.word	0xf248d961
   33950:	429e030c 	.word	0x429e030c
   33954:	816bf000 	.word	0x816bf000
   33958:	8106f240 	.word	0x8106f240
   3395c:	0302f249 	.word	0x0302f249
   33960:	f000429e 	.word	0xf000429e
   33964:	f249808c 	.word	0xf249808c
   33968:	429e0303 	.word	0x429e0303
   3396c:	8180f000 	.word	0x8180f000
   33970:	0301f249 	.word	0x0301f249
   33974:	d12d429e 	.word	0xd12d429e
   33978:	f414683c 	.word	0xf414683c
   3397c:	f0001480 	.word	0xf0001480
   33980:	68ab81c3 	.word	0x68ab81c3
   33984:	f2002b04 	.word	0xf2002b04
   33988:	240081eb 	.word	0x240081eb
   3398c:	68294626 	.word	0x68294626
   33990:	e9cd686a 	.word	0xe9cd686a
   33994:	e9cd6406 	.word	0xe9cd6406
   33998:	69f81204 	.word	0x69f81204
   3399c:	6803a904 	.word	0x6803a904
   339a0:	4798685b 	.word	0x4798685b
   339a4:	f0003001 	.word	0xf0003001
   339a8:	683b81cc 	.word	0x683b81cc
   339ac:	f4432000 	.word	0xf4432000
   339b0:	603b3380 	.word	0x603b3380
   339b4:	f8dfe00b 	.word	0xf8dfe00b
   339b8:	682f9344 	.word	0x682f9344
   339bc:	3000f8d9 	.word	0x3000f8d9
   339c0:	d0152b01 	.word	0xd0152b01
   339c4:	4638b117 	.word	0x4638b117
   339c8:	fb8af7f9 	.word	0xfb8af7f9
   339cc:	b0092000 	.word	0xb0092000
   339d0:	8ff0e8bd 	.word	0x8ff0e8bd
   339d4:	28006828 	.word	0x28006828
   339d8:	e7f7d1f6 	.word	0xe7f7d1f6
   339dc:	fd30f7fe 	.word	0xfd30f7fe
   339e0:	f7fe4680 	.word	0xf7fe4680
   339e4:	4607fd77 	.word	0x4607fd77
   339e8:	2f004644 	.word	0x2f004644
   339ec:	e7f1d1a3 	.word	0xe7f1d1a3
   339f0:	2b00696b 	.word	0x2b00696b
   339f4:	2b10d048 	.word	0x2b10d048
   339f8:	4ababf96 	.word	0x4ababf96
   339fc:	f852212d 	.word	0xf852212d
   33a00:	23021023 	.word	0x23021023
   33a04:	60114ab8 	.word	0x60114ab8
   33a08:	3000f8c9 	.word	0x3000f8c9
   33a0c:	d1da2f00 	.word	0xd1da2f00
   33a10:	f248e7dc 	.word	0xf248e7dc
   33a14:	429e0306 	.word	0x429e0306
   33a18:	80e6f080 	.word	0x80e6f080
   33a1c:	0302f248 	.word	0x0302f248
   33a20:	f000429e 	.word	0xf000429e
   33a24:	d91880c8 	.word	0xd91880c8
   33a28:	0303f248 	.word	0x0303f248
   33a2c:	f000429e 	.word	0xf000429e
   33a30:	f2488112 	.word	0xf2488112
   33a34:	429e0305 	.word	0x429e0305
   33a38:	683bd1cc 	.word	0x683bd1cc
   33a3c:	2b03b29b 	.word	0x2b03b29b
   33a40:	696bd1c4 	.word	0x696bd1c4
   33a44:	f0002b00 	.word	0xf0002b00
   33a48:	2b10817e 	.word	0x2b10817e
   33a4c:	813bf200 	.word	0x813bf200
   33a50:	f8524aa4 	.word	0xf8524aa4
   33a54:	607b3023 	.word	0x607b3023
   33a58:	f248e7b8 	.word	0xf248e7b8
   33a5c:	429e0301 	.word	0x429e0301
   33a60:	683bd1b8 	.word	0x683bd1b8
   33a64:	d1b12b01 	.word	0xd1b12b01
   33a68:	28006968 	.word	0x28006968
   33a6c:	8173f000 	.word	0x8173f000
   33a70:	f2002810 	.word	0xf2002810
   33a74:	4b9b8128 	.word	0x4b9b8128
   33a78:	3020f853 	.word	0x3020f853
   33a7c:	683be7eb 	.word	0x683be7eb
   33a80:	2b07b29b 	.word	0x2b07b29b
   33a84:	e790d1a2 	.word	0xe790d1a2
   33a88:	601f4b98 	.word	0x601f4b98
   33a8c:	016369ac 	.word	0x016369ac
   33a90:	93034618 	.word	0x93034618
   33a94:	ffb6f005 	.word	0xffb6f005
   33a98:	28009002 	.word	0x28009002
   33a9c:	8103f000 	.word	0x8103f000
   33aa0:	192800e5 	.word	0x192800e5
   33aa4:	f0050080 	.word	0xf0050080
   33aa8:	2800ffad 	.word	0x2800ffad
   33aac:	810df000 	.word	0x810df000
   33ab0:	d0782c00 	.word	0xd0782c00
   33ab4:	0210f105 	.word	0x0210f105
   33ab8:	93011883 	.word	0x93011883
   33abc:	24049b02 	.word	0x24049b02
   33ac0:	a23cf8df 	.word	0xa23cf8df
   33ac4:	b23cf8df 	.word	0xb23cf8df
   33ac8:	0810f100 	.word	0x0810f100
   33acc:	0620f103 	.word	0x0620f103
   33ad0:	220ae01d 	.word	0x220ae01d
   33ad4:	2c0cf848 	.word	0x2c0cf848
   33ad8:	0224f04f 	.word	0x0224f04f
   33adc:	f8084640 	.word	0xf8084640
   33ae0:	f8282c10 	.word	0xf8282c10
   33ae4:	f8563c08 	.word	0xf8563c08
   33ae8:	f7e62c10 	.word	0xf7e62c10
   33aec:	f856f9e1 	.word	0xf856f9e1
   33af0:	f1083c10 	.word	0xf1083c10
   33af4:	441c0808 	.word	0x441c0808
   33af8:	f846193b 	.word	0xf846193b
   33afc:	9b013c08 	.word	0x9b013c08
   33b00:	6c04f846 	.word	0x6c04f846
   33b04:	442c4598 	.word	0x442c4598
   33b08:	0620f106 	.word	0x0620f106
   33b0c:	593bd045 	.word	0x593bd045
   33b10:	f846193a 	.word	0xf846193a
   33b14:	68533c20 	.word	0x68533c20
   33b18:	1000f8da 	.word	0x1000f8da
   33b1c:	bf142b02 	.word	0xbf142b02
   33b20:	200a2002 	.word	0x200a2002
   33b24:	3000f8db 	.word	0x3000f8db
   33b28:	0107e946 	.word	0x0107e946
   33b2c:	3c14f846 	.word	0x3c14f846
   33b30:	f1a88a10 	.word	0xf1a88a10
   33b34:	f8460310 	.word	0xf8460310
   33b38:	8a550c10 	.word	0x8a550c10
   33b3c:	3c0cf846 	.word	0x3c0cf846
   33b40:	34144b6b 	.word	0x34144b6b
   33b44:	eb072804 	.word	0xeb072804
   33b48:	881b0104 	.word	0x881b0104
   33b4c:	2210d1c1 	.word	0x2210d1c1
   33b50:	f8282002 	.word	0xf8282002
   33b54:	f8483c08 	.word	0xf8483c08
   33b58:	f8080c0c 	.word	0xf8080c0c
   33b5c:	f8562c10 	.word	0xf8562c10
   33b60:	f1a82c10 	.word	0xf1a82c10
   33b64:	e7c00004 	.word	0xe7c00004
   33b68:	0308f248 	.word	0x0308f248
   33b6c:	d04e429e 	.word	0xd04e429e
   33b70:	0309f248 	.word	0x0309f248
   33b74:	f47f429e 	.word	0xf47f429e
   33b78:	683baf2d 	.word	0x683baf2d
   33b7c:	2b0db29b 	.word	0x2b0db29b
   33b80:	af24f47f 	.word	0xaf24f47f
   33b84:	28006968 	.word	0x28006968
   33b88:	af72f47f 	.word	0xaf72f47f
   33b8c:	0c1b683b 	.word	0x0c1b683b
   33b90:	f043041b 	.word	0xf043041b
   33b94:	603b030e 	.word	0x603b030e
   33b98:	2200e719 	.word	0x2200e719
   33b9c:	1302e9dd 	.word	0x1302e9dd
   33ba0:	f843440b 	.word	0xf843440b
   33ba4:	22022c04 	.word	0x22022c04
   33ba8:	f8c94b52 	.word	0xf8c94b52
   33bac:	9a022000 	.word	0x9a022000
   33bb0:	601a2000 	.word	0x601a2000
   33bb4:	683be70b 	.word	0x683be70b
   33bb8:	f57f0099 	.word	0xf57f0099
   33bbc:	683baf07 	.word	0x683baf07
   33bc0:	5300f023 	.word	0x5300f023
   33bc4:	6968603b 	.word	0x6968603b
   33bc8:	f0002800 	.word	0xf0002800
   33bcc:	281080a2 	.word	0x281080a2
   33bd0:	232dbf8e 	.word	0x232dbf8e
   33bd4:	f8534b43 	.word	0xf8534b43
   33bd8:	20003020 	.word	0x20003020
   33bdc:	683b607b 	.word	0x683b607b
   33be0:	2380f443 	.word	0x2380f443
   33be4:	e6f2603b 	.word	0xe6f2603b
   33be8:	029a683b 	.word	0x029a683b
   33bec:	aeeef57f 	.word	0xaeeef57f
   33bf0:	2b00696b 	.word	0x2b00696b
   33bf4:	809cf000 	.word	0x809cf000
   33bf8:	f47f2b6b 	.word	0xf47f2b6b
   33bfc:	693baf26 	.word	0x693baf26
   33c00:	f0002b01 	.word	0xf0002b01
   33c04:	230c80b1 	.word	0x230c80b1
   33c08:	607b2000 	.word	0x607b2000
   33c0c:	683be6df 	.word	0x683be6df
   33c10:	2b06b29b 	.word	0x2b06b29b
   33c14:	aedaf47f 	.word	0xaedaf47f
   33c18:	28006968 	.word	0x28006968
   33c1c:	af28f47f 	.word	0xaf28f47f
   33c20:	0c1b683b 	.word	0x0c1b683b
   33c24:	f043041b 	.word	0xf043041b
   33c28:	603b0307 	.word	0x603b0307
   33c2c:	683be6cf 	.word	0x683be6cf
   33c30:	2b08b29b 	.word	0x2b08b29b
   33c34:	aecaf47f 	.word	0xaecaf47f
   33c38:	2b00696b 	.word	0x2b00696b
   33c3c:	af05f47f 	.word	0xaf05f47f
   33c40:	20014b2d 	.word	0x20014b2d
   33c44:	5024f843 	.word	0x5024f843
   33c48:	0c1b683b 	.word	0x0c1b683b
   33c4c:	f043041b 	.word	0xf043041b
   33c50:	603b0309 	.word	0x603b0309
   33c54:	683be6bb 	.word	0x683be6bb
   33c58:	f57f025b 	.word	0xf57f025b
   33c5c:	6968aeb7 	.word	0x6968aeb7
   33c60:	f47f2800 	.word	0xf47f2800
   33c64:	683baf05 	.word	0x683baf05
   33c68:	0300f443 	.word	0x0300f443
   33c6c:	e6ae603b 	.word	0xe6ae603b
   33c70:	f443683b 	.word	0xf443683b
   33c74:	603b2300 	.word	0x603b2300
   33c78:	f423683b 	.word	0xf423683b
   33c7c:	603b1300 	.word	0x603b1300
   33c80:	f423683b 	.word	0xf423683b
   33c84:	603b3300 	.word	0x603b3300
   33c88:	2b6c692b 	.word	0x2b6c692b
   33c8c:	2b10d021 	.word	0x2b10d021
   33c90:	232dbf8c 	.word	0x232dbf8c
   33c94:	f04f4a13 	.word	0xf04f4a13
   33c98:	bf980000 	.word	0xbf980000
   33c9c:	3023f852 	.word	0x3023f852
   33ca0:	60bb607b 	.word	0x60bb607b
   33ca4:	f005e693 	.word	0xf005e693
   33ca8:	200cfecb 	.word	0x200cfecb
   33cac:	490e2302 	.word	0x490e2302
   33cb0:	60084a10 	.word	0x60084a10
   33cb4:	9902682f 	.word	0x9902682f
   33cb8:	f8c96011 	.word	0xf8c96011
   33cbc:	2f003000 	.word	0x2f003000
   33cc0:	ae81f47f 	.word	0xae81f47f
   33cc4:	232de682 	.word	0x232de682
   33cc8:	220ce6c5 	.word	0x220ce6c5
   33ccc:	601a4b06 	.word	0x601a4b06
   33cd0:	2239e769 	.word	0x2239e769
   33cd4:	2000683b 	.word	0x2000683b
   33cd8:	4380f043 	.word	0x4380f043
   33cdc:	607a603b 	.word	0x607a603b
   33ce0:	e67460ba 	.word	0xe67460ba
   33ce4:	0004b630 	.word	0x0004b630
   33ce8:	20024e28 	.word	0x20024e28
   33cec:	20024e34 	.word	0x20024e34
   33cf0:	2002a6ce 	.word	0x2002a6ce
   33cf4:	20024e30 	.word	0x20024e30
   33cf8:	20024e38 	.word	0x20024e38
   33cfc:	20024e2c 	.word	0x20024e2c
   33d00:	20024e24 	.word	0x20024e24
   33d04:	20024e20 	.word	0x20024e20
   33d08:	f7f96828 	.word	0xf7f96828
   33d0c:	4620f9e9 	.word	0x4620f9e9
   33d10:	683be65d 	.word	0x683be65d
   33d14:	3300f443 	.word	0x3300f443
   33d18:	683b603b 	.word	0x683b603b
   33d1c:	1380f443 	.word	0x1380f443
   33d20:	683b603b 	.word	0x683b603b
   33d24:	041b0c1b 	.word	0x041b0c1b
   33d28:	0305f043 	.word	0x0305f043
   33d2c:	e64e603b 	.word	0xe64e603b
   33d30:	4a28683b 	.word	0x4a28683b
   33d34:	3300f443 	.word	0x3300f443
   33d38:	2001603b 	.word	0x2001603b
   33d3c:	5024f842 	.word	0x5024f842
   33d40:	2002e645 	.word	0x2002e645
   33d44:	683be643 	.word	0x683be643
   33d48:	0c1b2000 	.word	0x0c1b2000
   33d4c:	f043041b 	.word	0xf043041b
   33d50:	603b0304 	.word	0x603b0304
   33d54:	2302e63b 	.word	0x2302e63b
   33d58:	69ab603b 	.word	0x69ab603b
   33d5c:	e63661bb 	.word	0xe63661bb
   33d60:	b94c8a6c 	.word	0xb94c8a6c
   33d64:	e6124626 	.word	0xe6124626
   33d68:	683b220c 	.word	0x683b220c
   33d6c:	f0432000 	.word	0xf0432000
   33d70:	603b6300 	.word	0x603b6300
   33d74:	e62a607a 	.word	0xe62a607a
   33d78:	f0052024 	.word	0xf0052024
   33d7c:	4606fe43 	.word	0x4606fe43
   33d80:	8a6ab158 	.word	0x8a6ab158
   33d84:	d0182a10 	.word	0xd0182a10
   33d88:	d00a2a04 	.word	0xd00a2a04
   33d8c:	f7f96828 	.word	0xf7f96828
   33d90:	4630f9a7 	.word	0x4630f9a7
   33d94:	fe54f005 	.word	0xfe54f005
   33d98:	6828e618 	.word	0x6828e618
   33d9c:	f9a0f7f9 	.word	0xf9a0f7f9
   33da0:	2302e614 	.word	0x2302e614
   33da4:	60432410 	.word	0x60432410
   33da8:	8a2b7004 	.word	0x8a2b7004
   33dac:	0114f105 	.word	0x0114f105
   33db0:	300c8103 	.word	0x300c8103
   33db4:	f87cf7e6 	.word	0xf87cf7e6
   33db8:	230ae5e9 	.word	0x230ae5e9
   33dbc:	60432424 	.word	0x60432424
   33dc0:	8a2b7004 	.word	0x8a2b7004
   33dc4:	0114f105 	.word	0x0114f105
   33dc8:	30108103 	.word	0x30108103
   33dcc:	f870f7e6 	.word	0xf870f7e6
   33dd0:	bf00e5dd 	.word	0xbf00e5dd
   33dd4:	20024e38 	.word	0x20024e38

00033dd8 <rpc_logobj_client_evt_handler>:
   33dd8:	f850b120 	.word	0xf850b120
   33ddc:	0c091b08 	.word	0x0c091b08
   33de0:	bf7cf7f9 	.word	0xbf7cf7f9
   33de4:	bf004770 	.word	0xbf004770

00033de8 <rpc_logobj_client_init>:
   33de8:	f0044801 	.word	0xf0044801
   33dec:	bf00bd45 	.word	0xbf00bd45
   33df0:	0004b674 	.word	0x0004b674

00033df4 <rpc_logobj_client_request_alloc>:
   33df4:	b5102300 	.word	0xb5102300
   33df8:	9301b082 	.word	0x9301b082
   33dfc:	b170b961 	.word	0xb170b961
   33e00:	aa014604 	.word	0xaa014604
   33e04:	f0042009 	.word	0xf0042009
   33e08:	b918ff6f 	.word	0xb918ff6f
   33e0c:	b10b9b01 	.word	0xb10b9b01
   33e10:	60233308 	.word	0x60233308
   33e14:	bd10b002 	.word	0xbd10b002
   33e18:	b002200f 	.word	0xb002200f
   33e1c:	200ebd10 	.word	0x200ebd10
   33e20:	bd10b002 	.word	0xbd10b002

00033e24 <rpc_logobj_client_request_send>:
   33e24:	4370f401 	.word	0x4370f401
   33e28:	4fe0f5b3 	.word	0x4fe0f5b3
   33e2c:	b160d10b 	.word	0xb160d10b
   33e30:	f8304603 	.word	0xf8304603
   33e34:	20092c08 	.word	0x20092c08
   33e38:	4101ea42 	.word	0x4101ea42
   33e3c:	1d08f843 	.word	0x1d08f843
   33e40:	f0044619 	.word	0xf0044619
   33e44:	200fbf39 	.word	0x200fbf39
   33e48:	200e4770 	.word	0x200e4770
   33e4c:	bf004770 	.word	0xbf004770

00033e50 <rpc_logobj_client_message_free>:
   33e50:	f1a0b120 	.word	0xf1a0b120
   33e54:	20090108 	.word	0x20090108
   33e58:	bf78f004 	.word	0xbf78f004
   33e5c:	4770200e 	.word	0x4770200e

00033e60 <rpc_logobj_client_data_free>:
   33e60:	4601b118 	.word	0x4601b118
   33e64:	f0052009 	.word	0xf0052009
   33e68:	200eb883 	.word	0x200eb883
   33e6c:	bf004770 	.word	0xbf004770

00033e70 <datagram_handler_init>:
   33e70:	4604b510 	.word	0x4604b510
   33e74:	f005200c 	.word	0xf005200c
   33e78:	60e0fdc5 	.word	0x60e0fdc5
   33e7c:	e8bdb118 	.word	0xe8bdb118
   33e80:	f0004010 	.word	0xf0004010
   33e84:	2004b8bd 	.word	0x2004b8bd
   33e88:	bf00bd10 	.word	0xbf00bd10

00033e8c <datagram_handler_put>:
   33e8c:	4606b570 	.word	0x4606b570
   33e90:	460d2014 	.word	0x460d2014
   33e94:	fdb6f005 	.word	0xfdb6f005
   33e98:	682bb178 	.word	0x682bb178
   33e9c:	60434604 	.word	0x60434604
   33ea0:	4601686b 	.word	0x4601686b
   33ea4:	68eb6083 	.word	0x68eb6083
   33ea8:	68ab60c3 	.word	0x68ab60c3
   33eac:	68f06103 	.word	0x68f06103
   33eb0:	f8b0f000 	.word	0xf8b0f000
   33eb4:	6868b920 	.word	0x6868b920
   33eb8:	f04fbd70 	.word	0xf04fbd70
   33ebc:	bd7030ff 	.word	0xbd7030ff
   33ec0:	f0054620 	.word	0xf0054620
   33ec4:	f04ffdbd 	.word	0xf04ffdbd
   33ec8:	bd7030ff 	.word	0xbd7030ff

00033ecc <datagram_handler_get>:
   33ecc:	4606b5f0 	.word	0x4606b5f0
   33ed0:	68c0b085 	.word	0x68c0b085
   33ed4:	4617460c 	.word	0x4617460c
   33ed8:	f8bcf000 	.word	0xf8bcf000
   33edc:	d0372800 	.word	0xd0372800
   33ee0:	46056882 	.word	0x46056882
   33ee4:	0300e9d4 	.word	0x0300e9d4
   33ee8:	bf28429a 	.word	0xbf28429a
   33eec:	6062461a 	.word	0x6062461a
   33ef0:	6869b110 	.word	0x6869b110
   33ef4:	ffdcf7e5 	.word	0xffdcf7e5
   33ef8:	b11868a0 	.word	0xb11868a0
   33efc:	b10b692b 	.word	0xb10b692b
   33f00:	b9e268ea 	.word	0xb9e268ea
   33f04:	60e32300 	.word	0x60e32300
   33f08:	d502073b 	.word	0xd502073b
   33f0c:	b0056860 	.word	0xb0056860
   33f10:	68f0bdf0 	.word	0x68f0bdf0
   33f14:	f894f000 	.word	0xf894f000
   33f18:	28004605 	.word	0x28004605
   33f1c:	e9d0d0f6 	.word	0xe9d0d0f6
   33f20:	69023101 	.word	0x69023101
   33f24:	68c39300 	.word	0x68c39300
   33f28:	1201e9cd 	.word	0x1201e9cd
   33f2c:	46689303 	.word	0x46689303
   33f30:	3101e9d6 	.word	0x3101e9d6
   33f34:	46284798 	.word	0x46284798
   33f38:	fd82f005 	.word	0xfd82f005
   33f3c:	68e3e7e6 	.word	0x68e3e7e6
   33f40:	bf28429a 	.word	0xbf28429a
   33f44:	60e2461a 	.word	0x60e2461a
   33f48:	f7e56929 	.word	0xf7e56929
   33f4c:	e7dbffb1 	.word	0xe7dbffb1
   33f50:	30fff04f 	.word	0x30fff04f
   33f54:	bf00e7db 	.word	0xbf00e7db

00033f58 <datagram_handler_available>:
   33f58:	68c0b508 	.word	0x68c0b508
   33f5c:	f87af000 	.word	0xf87af000
   33f60:	6880b108 	.word	0x6880b108
   33f64:	f04fbd08 	.word	0xf04fbd08
   33f68:	bd0830ff 	.word	0xbd0830ff

00033f6c <datagram_handler_flush>:
   33f6c:	4605b530 	.word	0x4605b530
   33f70:	b08568c0 	.word	0xb08568c0
   33f74:	e01ab9a8 	.word	0xe01ab9a8
   33f78:	f00068e8 	.word	0xf00068e8
   33f7c:	4604f861 	.word	0x4604f861
   33f80:	e9d0b170 	.word	0xe9d0b170
   33f84:	e9d40101 	.word	0xe9d40101
   33f88:	e9cd3203 	.word	0xe9cd3203
   33f8c:	e9cd0100 	.word	0xe9cd0100
   33f90:	e9d52302 	.word	0xe9d52302
   33f94:	46683101 	.word	0x46683101
   33f98:	46204798 	.word	0x46204798
   33f9c:	fd50f005 	.word	0xfd50f005
   33fa0:	f00068e8 	.word	0xf00068e8
   33fa4:	2800f85d 	.word	0x2800f85d
   33fa8:	b005d1e6 	.word	0xb005d1e6
   33fac:	2008bd30 	.word	0x2008bd30
   33fb0:	bd30b005 	.word	0xbd30b005

00033fb4 <datagram_handler_free>:
   33fb4:	4605b530 	.word	0x4605b530
   33fb8:	b08568c0 	.word	0xb08568c0
   33fbc:	e01cb9a0 	.word	0xe01cb9a0
   33fc0:	f83ef000 	.word	0xf83ef000
   33fc4:	b1704604 	.word	0xb1704604
   33fc8:	0101e9d0 	.word	0x0101e9d0
   33fcc:	3203e9d4 	.word	0x3203e9d4
   33fd0:	0100e9cd 	.word	0x0100e9cd
   33fd4:	2302e9cd 	.word	0x2302e9cd
   33fd8:	3101e9d5 	.word	0x3101e9d5
   33fdc:	47984668 	.word	0x47984668
   33fe0:	f0054620 	.word	0xf0054620
   33fe4:	68e8fd2d 	.word	0x68e8fd2d
   33fe8:	f83af000 	.word	0xf83af000
   33fec:	68e84604 	.word	0x68e84604
   33ff0:	d1e52c00 	.word	0xd1e52c00
   33ff4:	fd24f005 	.word	0xfd24f005
   33ff8:	b00560ec 	.word	0xb00560ec
   33ffc:	bf00bd30 	.word	0xbf00bd30

00034000 <linked_list_init>:
   34000:	2300b128 	.word	0x2300b128
   34004:	e9c06003 	.word	0xe9c06003
   34008:	46183301 	.word	0x46183301
   3400c:	20074770 	.word	0x20074770
   34010:	bf004770 	.word	0xbf004770

00034014 <linked_list_push>:
   34014:	46036802 	.word	0x46036802
   34018:	d00e3201 	.word	0xd00e3201
   3401c:	600a2200 	.word	0x600a2200
   34020:	b13a6802 	.word	0xb13a6802
   34024:	60116882 	.word	0x60116882
   34028:	681a6081 	.word	0x681a6081
   3402c:	32012000 	.word	0x32012000
   34030:	4770601a 	.word	0x4770601a
   34034:	1101e9c0 	.word	0x1101e9c0
   34038:	2004e7f7 	.word	0x2004e7f7
   3403c:	bf004770 	.word	0xbf004770

00034040 <linked_list_pop>:
   34040:	68004603 	.word	0x68004603
   34044:	6858b128 	.word	0x6858b128
   34048:	6801681a 	.word	0x6801681a
   3404c:	60593a01 	.word	0x60593a01
   34050:	4770601a 	.word	0x4770601a

00034054 <linked_list_peek>:
   34054:	b10b6803 	.word	0xb10b6803
   34058:	47706840 	.word	0x47706840
   3405c:	47704618 	.word	0x47704618

00034060 <linked_list_size_get>:
   34060:	47706800 	.word	0x47706800

00034064 <linked_list_get_next>:
   34064:	47706800 	.word	0x47706800

00034068 <rpc_transport_ipc_tx_init>:
   34068:	f0002800 	.word	0xf0002800
   3406c:	290080b8 	.word	0x290080b8
   34070:	80b5f000 	.word	0x80b5f000
   34074:	f0002a00 	.word	0xf0002a00
   34078:	e92d80b2 	.word	0xe92d80b2
   3407c:	6a044ff0 	.word	0x6a044ff0
   34080:	2c00b085 	.word	0x2c00b085
   34084:	80a6f000 	.word	0x80a6f000
   34088:	28006a40 	.word	0x28006a40
   3408c:	80a2f000 	.word	0x80a2f000
   34090:	4587f642 	.word	0x4587f642
   34094:	0a00f04f 	.word	0x0a00f04f
   34098:	42a84e55 	.word	0x42a84e55
   3409c:	a000f886 	.word	0xa000f886
   340a0:	80a0f240 	.word	0x80a0f240
   340a4:	f8df2708 	.word	0xf8df2708
   340a8:	46209180 	.word	0x46209180
   340ac:	460d4616 	.word	0x460d4616
   340b0:	46512244 	.word	0x46512244
   340b4:	4000f8c9 	.word	0x4000f8c9
   340b8:	ffbef00c 	.word	0xffbef00c
   340bc:	2000f8d9 	.word	0x2000f8d9
   340c0:	0344f104 	.word	0x0344f104
   340c4:	8164f8df 	.word	0x8164f8df
   340c8:	a001f882 	.word	0xa001f882
   340cc:	a002f882 	.word	0xa002f882
   340d0:	a003f882 	.word	0xa003f882
   340d4:	46187017 	.word	0x46187017
   340d8:	46512244 	.word	0x46512244
   340dc:	3000f8c8 	.word	0x3000f8c8
   340e0:	ffaaf00c 	.word	0xffaaf00c
   340e4:	2000f8d8 	.word	0x2000f8d8
   340e8:	0388f104 	.word	0x0388f104
   340ec:	b140f8df 	.word	0xb140f8df
   340f0:	f8827017 	.word	0xf8827017
   340f4:	f882a001 	.word	0xf882a001
   340f8:	f882a002 	.word	0xf882a002
   340fc:	4618a003 	.word	0x4618a003
   34100:	7200f44f 	.word	0x7200f44f
   34104:	f8cb4651 	.word	0xf8cb4651
   34108:	f00c3000 	.word	0xf00c3000
   3410c:	4b39ff95 	.word	0x4b39ff95
   34110:	7c22f504 	.word	0x7c22f504
   34114:	c000f8c3 	.word	0xc000f8c3
   34118:	46604651 	.word	0x46604651
   3411c:	7200f44f 	.word	0x7200f44f
   34120:	ff8af00c 	.word	0xff8af00c
   34124:	5c20f44f 	.word	0x5c20f44f
   34128:	f04f2106 	.word	0xf04f2106
   3412c:	f44f0e01 	.word	0xf44f0e01
   34130:	f44f3001 	.word	0xf44f3001
   34134:	4b303288 	.word	0x4b303288
   34138:	6491f504 	.word	0x6491f504
   3413c:	4c2f605c 	.word	0x4c2f605c
   34140:	c008f8c3 	.word	0xc008f8c3
   34144:	f8a38199 	.word	0xf8a38199
   34148:	4619e000 	.word	0x4619e000
   3414c:	4b2c611c 	.word	0x4b2c611c
   34150:	c0e0f8df 	.word	0xc0e0f8df
   34154:	482b6120 	.word	0x482b6120
   34158:	f5036063 	.word	0xf5036063
   3415c:	60a073c0 	.word	0x60a073c0
   34160:	c000f8c4 	.word	0xc000f8c4
   34164:	60e34828 	.word	0x60e34828
   34168:	f0056162 	.word	0xf0056162
   3416c:	2800fb31 	.word	0x2800fb31
   34170:	f04fd132 	.word	0xf04fd132
   34174:	24200c02 	.word	0x24200c02
   34178:	1000f8d9 	.word	0x1000f8d9
   3417c:	2000f8db 	.word	0x2000f8db
   34180:	4b1c6029 	.word	0x4b1c6029
   34184:	1000f8d8 	.word	0x1000f8d8
   34188:	e0acf8df 	.word	0xe0acf8df
   3418c:	60314d1f 	.word	0x60314d1f
   34190:	2000f8ce 	.word	0x2000f8ce
   34194:	491e681b 	.word	0x491e681b
   34198:	7200f502 	.word	0x7200f502
   3419c:	4e1d602a 	.word	0x4e1d602a
   341a0:	4d1e4a1d 	.word	0x4d1e4a1d
   341a4:	f503600b 	.word	0xf503600b
   341a8:	491d7300 	.word	0x491d7300
   341ac:	80286033 	.word	0x80286033
   341b0:	c514f8c2 	.word	0xc514f8c2
   341b4:	4b1b6809 	.word	0x4b1b6809
   341b8:	99039103 	.word	0x99039103
   341bc:	751cf8c2 	.word	0x751cf8c2
   341c0:	443b6819 	.word	0x443b6819
   341c4:	99029102 	.word	0x99029102
   341c8:	4524f8c2 	.word	0x4524f8c2
   341cc:	9301681b 	.word	0x9301681b
   341d0:	e0019b01 	.word	0xe0019b01
   341d4:	0007f24c 	.word	0x0007f24c
   341d8:	e8bdb005 	.word	0xe8bdb005
   341dc:	f24c8ff0 	.word	0xf24c8ff0
   341e0:	4770000e 	.word	0x4770000e
   341e4:	0004f24c 	.word	0x0004f24c
   341e8:	e8bdb005 	.word	0xe8bdb005
   341ec:	bf008ff0 	.word	0xbf008ff0
   341f0:	2002c1f9 	.word	0x2002c1f9
   341f4:	20024e88 	.word	0x20024e88
   341f8:	20024e74 	.word	0x20024e74
   341fc:	20024e98 	.word	0x20024e98
   34200:	00040080 	.word	0x00040080
   34204:	00040100 	.word	0x00040100
   34208:	20024e60 	.word	0x20024e60
   3420c:	20024e6c 	.word	0x20024e6c
   34210:	20024e68 	.word	0x20024e68
   34214:	20024e64 	.word	0x20024e64
   34218:	4002a000 	.word	0x4002a000
   3421c:	2002a6d0 	.word	0x2002a6d0
   34220:	4002a514 	.word	0x4002a514
   34224:	4002a51c 	.word	0x4002a51c
   34228:	20024e94 	.word	0x20024e94
   3422c:	20024e8c 	.word	0x20024e8c
   34230:	20024e90 	.word	0x20024e90
   34234:	00080040 	.word	0x00080040
   34238:	20024e70 	.word	0x20024e70

0003423c <rpc_transport_ipc_tx_send>:
   3423c:	d05f2800 	.word	0xd05f2800
   34240:	4b33b470 	.word	0x4b33b470
   34244:	681ab083 	.word	0x681ab083
   34248:	42824b32 	.word	0x42824b32
   3424c:	681bd81e 	.word	0x681bd81e
   34250:	42834931 	.word	0x42834931
   34254:	d8036809 	.word	0xd8036809
   34258:	68244c30 	.word	0x68244c30
   3425c:	d8474284 	.word	0xd8474284
   34260:	d90e4281 	.word	0xd90e4281
   34264:	781b4b2e 	.word	0x781b4b2e
   34268:	d14c2b00 	.word	0xd14c2b00
   3426c:	492d1a83 	.word	0x492d1a83
   34270:	069b099e 	.word	0x069b099e
   34274:	4c2c680a 	.word	0x4c2c680a
   34278:	0103f04f 	.word	0x0103f04f
   3427c:	0502f04f 	.word	0x0502f04f
   34280:	f24cd014 	.word	0xf24cd014
   34284:	b0030010 	.word	0xb0030010
   34288:	4770bc70 	.word	0x4770bc70
   3428c:	4298681b 	.word	0x4298681b
   34290:	4a22d3f7 	.word	0x4a22d3f7
   34294:	42906812 	.word	0x42906812
   34298:	2101d2f3 	.word	0x2101d2f3
   3429c:	4a231ac3 	.word	0x4a231ac3
   342a0:	069b099e 	.word	0x069b099e
   342a4:	6812460d 	.word	0x6812460d
   342a8:	d1ea4c21 	.word	0xd1ea4c21
   342ac:	b2db6843 	.word	0xb2db6843
   342b0:	d120429d 	.word	0xd120429d
   342b4:	eb022020 	.word	0xeb022020
   342b8:	4d1e02c6 	.word	0x4d1e02c6
   342bc:	882e6853 	.word	0x882e6853
   342c0:	ea43b29b 	.word	0xea43b29b
   342c4:	f0234306 	.word	0xf0234306
   342c8:	f04303ff 	.word	0xf04303ff
   342cc:	60530301 	.word	0x60530301
   342d0:	3801bf00 	.word	0x3801bf00
   342d4:	2201d1fc 	.word	0x2201d1fc
   342d8:	f8434b17 	.word	0xf8434b17
   342dc:	68222021 	.word	0x68222021
   342e0:	9201882b 	.word	0x9201882b
   342e4:	33019a01 	.word	0x33019a01
   342e8:	b003802b 	.word	0xb003802b
   342ec:	4770bc70 	.word	0x4770bc70
   342f0:	d9d24281 	.word	0xd9d24281
   342f4:	f24ce7b6 	.word	0xf24ce7b6
   342f8:	b0030007 	.word	0xb0030007
   342fc:	4770bc70 	.word	0x4770bc70
   34300:	000ef24c 	.word	0x000ef24c
   34304:	f24c4770 	.word	0xf24c4770
   34308:	b003000f 	.word	0xb003000f
   3430c:	4770bc70 	.word	0x4770bc70
   34310:	20024e70 	.word	0x20024e70
   34314:	20024e68 	.word	0x20024e68
   34318:	20024e6c 	.word	0x20024e6c
   3431c:	20024e64 	.word	0x20024e64
   34320:	2002c1f9 	.word	0x2002c1f9
   34324:	20024e94 	.word	0x20024e94
   34328:	4002a00c 	.word	0x4002a00c
   3432c:	20024e8c 	.word	0x20024e8c
   34330:	4002a004 	.word	0x4002a004
   34334:	2002a6d0 	.word	0x2002a6d0
   34338:	4002a000 	.word	0x4002a000

0003433c <rpc_transport_ipc_tx_rpc_data_alloc>:
   3433c:	781b4b18 	.word	0x781b4b18
   34340:	b4f0bb63 	.word	0xb4f0bb63
   34344:	f0034a17 	.word	0xf0034a17
   34348:	681400ff 	.word	0x681400ff
   3434c:	68254b16 	.word	0x68254b16
   34350:	b1a5681e 	.word	0xb1a5681e
   34354:	00c14607 	.word	0x00c14607
   34358:	685a1863 	.word	0x685a1863
   3435c:	2a03b2d2 	.word	0x2a03b2d2
   34360:	609fd104 	.word	0x609fd104
   34364:	f022685a 	.word	0xf022685a
   34368:	605a02ff 	.word	0x605a02ff
   3436c:	f012685a 	.word	0xf012685a
   34370:	d1010fff 	.word	0xd1010fff
   34374:	b12b689b 	.word	0xb12b689b
   34378:	42a83001 	.word	0x42a83001
   3437c:	2000d1eb 	.word	0x2000d1eb
   34380:	4770bcf0 	.word	0x4770bcf0
   34384:	1080eb06 	.word	0x1080eb06
   34388:	60884421 	.word	0x60884421
   3438c:	f0236843 	.word	0xf0236843
   34390:	f04303ff 	.word	0xf04303ff
   34394:	60430302 	.word	0x60430302
   34398:	4770bcf0 	.word	0x4770bcf0
   3439c:	47702000 	.word	0x47702000
   343a0:	2002c1f9 	.word	0x2002c1f9
   343a4:	20024e94 	.word	0x20024e94
   343a8:	20024e90 	.word	0x20024e90

000343ac <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   343ac:	4a15b4f0 	.word	0x4a15b4f0
   343b0:	68144b15 	.word	0x68144b15
   343b4:	6825681e 	.word	0x6825681e
   343b8:	2000b1ad 	.word	0x2000b1ad
   343bc:	00c14607 	.word	0x00c14607
   343c0:	685a1863 	.word	0x685a1863
   343c4:	2a03b2d2 	.word	0x2a03b2d2
   343c8:	609fd104 	.word	0x609fd104
   343cc:	f022685a 	.word	0xf022685a
   343d0:	605a02ff 	.word	0x605a02ff
   343d4:	f012685a 	.word	0xf012685a
   343d8:	d1010fff 	.word	0xd1010fff
   343dc:	b12b689b 	.word	0xb12b689b
   343e0:	42853001 	.word	0x42853001
   343e4:	2000d1eb 	.word	0x2000d1eb
   343e8:	4770bcf0 	.word	0x4770bcf0
   343ec:	1080eb06 	.word	0x1080eb06
   343f0:	60884421 	.word	0x60884421
   343f4:	f0236843 	.word	0xf0236843
   343f8:	f04303ff 	.word	0xf04303ff
   343fc:	60430301 	.word	0x60430301
   34400:	4770bcf0 	.word	0x4770bcf0
   34404:	20024e8c 	.word	0x20024e8c
   34408:	20024e88 	.word	0x20024e88

0003440c <rpc_transport_ipc_tx_data_alloc>:
   3440c:	781b4b03 	.word	0x781b4b03
   34410:	f005b90b 	.word	0xf005b90b
   34414:	2000bb21 	.word	0x2000bb21
   34418:	bf004770 	.word	0xbf004770
   3441c:	2002c1f9 	.word	0x2002c1f9

00034420 <rpc_transport_ipc_tx_suspend>:
   34420:	4b012201 	.word	0x4b012201
   34424:	4770701a 	.word	0x4770701a
   34428:	2002c1f9 	.word	0x2002c1f9

0003442c <rpc_transport_ipc_tx_shutdown>:
   3442c:	4a16b4f0 	.word	0x4a16b4f0
   34430:	68144b16 	.word	0x68144b16
   34434:	6825681e 	.word	0x6825681e
   34438:	2200b1ad 	.word	0x2200b1ad
   3443c:	00d04617 	.word	0x00d04617
   34440:	68591823 	.word	0x68591823
   34444:	2903b2c9 	.word	0x2903b2c9
   34448:	609fd104 	.word	0x609fd104
   3444c:	f0216859 	.word	0xf0216859
   34450:	605901ff 	.word	0x605901ff
   34454:	f0116859 	.word	0xf0116859
   34458:	d1010fff 	.word	0xd1010fff
   3445c:	b123689b 	.word	0xb123689b
   34460:	42aa3201 	.word	0x42aa3201
   34464:	bcf0d1eb 	.word	0xbcf0d1eb
   34468:	01924770 	.word	0x01924770
   3446c:	18b04404 	.word	0x18b04404
   34470:	684360a0 	.word	0x684360a0
   34474:	f0234906 	.word	0xf0234906
   34478:	f04303ff 	.word	0xf04303ff
   3447c:	60430301 	.word	0x60430301
   34480:	bcf050b1 	.word	0xbcf050b1
   34484:	bedaf7ff 	.word	0xbedaf7ff
   34488:	20024e8c 	.word	0x20024e8c
   3448c:	20024e88 	.word	0x20024e88
   34490:	00030001 	.word	0x00030001

00034494 <null_handler_init>:
   34494:	47702000 	.word	0x47702000

00034498 <null_handler_put>:
   34498:	460cb510 	.word	0x460cb510
   3449c:	3101e9d0 	.word	0x3101e9d0
   344a0:	47984620 	.word	0x47984620
   344a4:	bd106860 	.word	0xbd106860

000344a8 <null_handler_get>:
   344a8:	30fff04f 	.word	0x30fff04f
   344ac:	bf004770 	.word	0xbf004770

000344b0 <null_handler_available>:
   344b0:	30fff04f 	.word	0x30fff04f
   344b4:	bf004770 	.word	0xbf004770

000344b8 <null_handler_flush>:
   344b8:	47702000 	.word	0x47702000

000344bc <null_handler_free>:
   344bc:	bf004770 	.word	0xbf004770

000344c0 <rpc_gnss_event_handler>:
   344c0:	4b5db5f0 	.word	0x4b5db5f0
   344c4:	68004606 	.word	0x68004606
   344c8:	6802881b 	.word	0x6802881b
   344cc:	ebb34c5b 	.word	0xebb34c5b
   344d0:	b0854f12 	.word	0xb0854f12
   344d4:	6020460d 	.word	0x6020460d
   344d8:	f505d033 	.word	0xf505d033
   344dc:	33ff433f 	.word	0x33ff433f
   344e0:	2b02b29b 	.word	0x2b02b29b
   344e4:	4c56d80e 	.word	0x4c56d80e
   344e8:	075a6823 	.word	0x075a6823
   344ec:	6823d40d 	.word	0x6823d40d
   344f0:	d503079b 	.word	0xd503079b
   344f4:	0303f244 	.word	0x0303f244
   344f8:	d006429d 	.word	0xd006429d
   344fc:	b1086830 	.word	0xb1086830
   34500:	f92ef7f9 	.word	0xf92ef7f9
   34504:	b0052000 	.word	0xb0052000
   34508:	2002bdf0 	.word	0x2002bdf0
   3450c:	fa7af005 	.word	0xfa7af005
   34510:	28004607 	.word	0x28004607
   34514:	2302d0f2 	.word	0x2302d0f2
   34518:	68318005 	.word	0x68318005
   3451c:	48496872 	.word	0x48496872
   34520:	0086e88d 	.word	0x0086e88d
   34524:	93036800 	.word	0x93036800
   34528:	46696803 	.word	0x46696803
   3452c:	4798685b 	.word	0x4798685b
   34530:	d06d3001 	.word	0xd06d3001
   34534:	68232000 	.word	0x68232000
   34538:	3380f443 	.word	0x3380f443
   3453c:	b0056023 	.word	0xb0056023
   34540:	4c3fbdf0 	.word	0x4c3fbdf0
   34544:	01da6823 	.word	0x01da6823
   34548:	f242d523 	.word	0xf242d523
   3454c:	42991302 	.word	0x42991302
   34550:	6843d11f 	.word	0x6843d11f
   34554:	6823b91b 	.word	0x6823b91b
   34558:	7300f043 	.word	0x7300f043
   3455c:	68236023 	.word	0x68236023
   34560:	7380f023 	.word	0x7380f023
   34564:	68236023 	.word	0x68236023
   34568:	d430025b 	.word	0xd430025b
   3456c:	0305f242 	.word	0x0305f242
   34570:	d12c429d 	.word	0xd12c429d
   34574:	02996823 	.word	0x02996823
   34578:	6843d529 	.word	0x6843d529
   3457c:	d1552b00 	.word	0xd1552b00
   34580:	f4236823 	.word	0xf4236823
   34584:	60231300 	.word	0x60231300
   34588:	f4436823 	.word	0xf4436823
   3458c:	60233300 	.word	0x60233300
   34590:	6823e01d 	.word	0x6823e01d
   34594:	d50e025f 	.word	0xd50e025f
   34598:	1303f242 	.word	0x1303f242
   3459c:	d10a429d 	.word	0xd10a429d
   345a0:	b91b6843 	.word	0xb91b6843
   345a4:	f4436823 	.word	0xf4436823
   345a8:	60230300 	.word	0x60230300
   345ac:	f4236823 	.word	0xf4236823
   345b0:	60230380 	.word	0x60230380
   345b4:	f242e00b 	.word	0xf242e00b
   345b8:	429d0301 	.word	0x429d0301
   345bc:	6843d10a 	.word	0x6843d10a
   345c0:	6823b92b 	.word	0x6823b92b
   345c4:	041b0c1b 	.word	0x041b0c1b
   345c8:	0302f043 	.word	0x0302f043
   345cc:	f7f96023 	.word	0xf7f96023
   345d0:	e782f8c7 	.word	0xe782f8c7
   345d4:	0304f242 	.word	0x0304f242
   345d8:	d1c7429d 	.word	0xd1c7429d
   345dc:	b9936843 	.word	0xb9936843
   345e0:	f4436823 	.word	0xf4436823
   345e4:	60230300 	.word	0x60230300
   345e8:	b29b6823 	.word	0xb29b6823
   345ec:	68232b03 	.word	0x68232b03
   345f0:	b29bd016 	.word	0xb29bd016
   345f4:	d1d92b04 	.word	0xd1d92b04
   345f8:	0c1b6823 	.word	0x0c1b6823
   345fc:	f043041b 	.word	0xf043041b
   34600:	60230302 	.word	0x60230302
   34604:	6823e7d2 	.word	0x6823e7d2
   34608:	2b03b29b 	.word	0x2b03b29b
   3460c:	e7f3d1ce 	.word	0xe7f3d1ce
   34610:	f0054638 	.word	0xf0054638
   34614:	6830fa15 	.word	0x6830fa15
   34618:	f47f2800 	.word	0xf47f2800
   3461c:	e771af71 	.word	0xe771af71
   34620:	041b0c1b 	.word	0x041b0c1b
   34624:	0304f043 	.word	0x0304f043
   34628:	e7bf6023 	.word	0xe7bf6023
   3462c:	f4236823 	.word	0xf4236823
   34630:	60231300 	.word	0x60231300
   34634:	bf00e7cb 	.word	0xbf00e7cb
   34638:	2002a6d2 	.word	0x2002a6d2
   3463c:	20024e58 	.word	0x20024e58
   34640:	20024eb0 	.word	0x20024eb0
   34644:	20024eb4 	.word	0x20024eb4

00034648 <gnss_interface_write>:
   34648:	43f0e92d 	.word	0x43f0e92d
   3464c:	b09f4a75 	.word	0xb09f4a75
   34650:	9d264290 	.word	0x9d264290
   34654:	80d3f040 	.word	0x80d3f040
   34658:	f0002900 	.word	0xf0002900
   3465c:	2d0080c8 	.word	0x2d0080c8
   34660:	80c5f000 	.word	0x80c5f000
   34664:	2a029a27 	.word	0x2a029a27
   34668:	80c1f040 	.word	0x80c1f040
   3466c:	68224c6e 	.word	0x68224c6e
   34670:	2a02b292 	.word	0x2a02b292
   34674:	6822d004 	.word	0x6822d004
   34678:	2a04b292 	.word	0x2a04b292
   3467c:	80c5f040 	.word	0x80c5f040
   34680:	f1000798 	.word	0xf1000798
   34684:	682080c8 	.word	0x682080c8
   34688:	3000f410 	.word	0x3000f410
   3468c:	6822d065 	.word	0x6822d065
   34690:	f422882b 	.word	0xf422882b
   34694:	60223200 	.word	0x60223200
   34698:	3b016822 	.word	0x3b016822
   3469c:	1200f442 	.word	0x1200f442
   346a0:	2b076022 	.word	0x2b076022
   346a4:	80a3f200 	.word	0x80a3f200
   346a8:	f003e8df 	.word	0xf003e8df
   346ac:	696e7378 	.word	0x696e7378
   346b0:	045f5a64 	.word	0x045f5a64
   346b4:	a9024608 	.word	0xa9024608
   346b8:	feb6f7fb 	.word	0xfeb6f7fb
   346bc:	46682172 	.word	0x46682172
   346c0:	f81cf7f9 	.word	0xf81cf7f9
   346c4:	98004605 	.word	0x98004605
   346c8:	d16c2d00 	.word	0xd16c2d00
   346cc:	d06a2800 	.word	0xd06a2800
   346d0:	0605f241 	.word	0x0605f241
   346d4:	0c49f04f 	.word	0x0c49f04f
   346d8:	f04f2272 	.word	0xf04f2272
   346dc:	f04f0e76 	.word	0xf04f0e76
   346e0:	f04f0943 	.word	0xf04f0943
   346e4:	4f510854 	.word	0x4f510854
   346e8:	883ba91e 	.word	0x883ba91e
   346ec:	c00ff880 	.word	0xc00ff880
   346f0:	b29b3301 	.word	0xb29b3301
   346f4:	4c03ea46 	.word	0x4c03ea46
   346f8:	cd74f841 	.word	0xcd74f841
   346fc:	71857145 	.word	0x71857145
   34700:	720571c5 	.word	0x720571c5
   34704:	72857245 	.word	0x72857245
   34708:	710272c5 	.word	0x710272c5
   3470c:	900cf880 	.word	0x900cf880
   34710:	800df880 	.word	0x800df880
   34714:	e00ef880 	.word	0xe00ef880
   34718:	803b6800 	.word	0x803b6800
   3471c:	fbc8f7e5 	.word	0xfbc8f7e5
   34720:	46314b43 	.word	0x46314b43
   34724:	601d9800 	.word	0x601d9800
   34728:	fffcf7f8 	.word	0xfffcf7f8
   3472c:	d1472800 	.word	0xd1472800
   34730:	02996823 	.word	0x02996823
   34734:	4e3fd50d 	.word	0x4e3fd50d
   34738:	e0014d3a 	.word	0xe0014d3a
   3473c:	d14f2800 	.word	0xd14f2800
   34740:	46284631 	.word	0x46284631
   34744:	f906f7f1 	.word	0xf906f7f1
   34748:	029a6823 	.word	0x029a6823
   3474c:	2800d4f6 	.word	0x2800d4f6
   34750:	6823d146 	.word	0x6823d146
   34754:	d53e039b 	.word	0xd53e039b
   34758:	b01f2000 	.word	0xb01f2000
   3475c:	83f0e8bd 	.word	0x83f0e8bd
   34760:	a9024608 	.word	0xa9024608
   34764:	fe18f7fb 	.word	0xfe18f7fb
   34768:	4608e7a8 	.word	0x4608e7a8
   3476c:	f7fba902 	.word	0xf7fba902
   34770:	e7a3fe3b 	.word	0xe7a3fe3b
   34774:	a9024608 	.word	0xa9024608
   34778:	fdf4f7fb 	.word	0xfdf4f7fb
   3477c:	4608e79e 	.word	0x4608e79e
   34780:	f7fba902 	.word	0xf7fba902
   34784:	e799fdcb 	.word	0xe799fdcb
   34788:	a9024608 	.word	0xa9024608
   3478c:	fd94f7fb 	.word	0xfd94f7fb
   34790:	4608e794 	.word	0x4608e794
   34794:	f7fba902 	.word	0xf7fba902
   34798:	e78ffd3d 	.word	0xe78ffd3d
   3479c:	a9024608 	.word	0xa9024608
   347a0:	fd16f7fb 	.word	0xfd16f7fb
   347a4:	6803e78a 	.word	0x6803e78a
   347a8:	4618b11b 	.word	0x4618b11b
   347ac:	ffd8f7f8 	.word	0xffd8f7f8
   347b0:	f7f89800 	.word	0xf7f89800
   347b4:	2023ffcd 	.word	0x2023ffcd
   347b8:	f95cf7f1 	.word	0xf95cf7f1
   347bc:	30fff04f 	.word	0x30fff04f
   347c0:	f4236823 	.word	0xf4236823
   347c4:	60231300 	.word	0x60231300
   347c8:	f4436823 	.word	0xf4436823
   347cc:	60233300 	.word	0x60233300
   347d0:	e8bdb01f 	.word	0xe8bdb01f
   347d4:	200583f0 	.word	0x200583f0
   347d8:	f4436823 	.word	0xf4436823
   347dc:	60233300 	.word	0x60233300
   347e0:	f948f7f1 	.word	0xf948f7f1
   347e4:	30fff04f 	.word	0x30fff04f
   347e8:	e8bdb01f 	.word	0xe8bdb01f
   347ec:	201683f0 	.word	0x201683f0
   347f0:	f940f7f1 	.word	0xf940f7f1
   347f4:	30fff04f 	.word	0x30fff04f
   347f8:	e8bdb01f 	.word	0xe8bdb01f
   347fc:	200983f0 	.word	0x200983f0
   34800:	f938f7f1 	.word	0xf938f7f1
   34804:	30fff04f 	.word	0x30fff04f
   34808:	2039e7a7 	.word	0x2039e7a7
   3480c:	f932f7f1 	.word	0xf932f7f1
   34810:	30fff04f 	.word	0x30fff04f
   34814:	202de7a1 	.word	0x202de7a1
   34818:	f92cf7f1 	.word	0xf92cf7f1
   3481c:	30fff04f 	.word	0x30fff04f
   34820:	bf00e79b 	.word	0xbf00e79b
   34824:	49765443 	.word	0x49765443
   34828:	20024eb0 	.word	0x20024eb0
   3482c:	2002a6d2 	.word	0x2002a6d2
   34830:	20024e58 	.word	0x20024e58
   34834:	20031b8c 	.word	0x20031b8c

00034838 <gnss_interface_read>:
   34838:	4ff0e92d 	.word	0x4ff0e92d
   3483c:	b0b74c4a 	.word	0xb0b74c4a
   34840:	f04042a0 	.word	0xf04042a0
   34844:	468881ec 	.word	0x468881ec
   34848:	f0002900 	.word	0xf0002900
   3484c:	2ad781e2 	.word	0x2ad781e2
   34850:	81dff240 	.word	0x81dff240
   34854:	46994d45 	.word	0x46994d45
   34858:	b29b682b 	.word	0xb29b682b
   3485c:	d0042b04 	.word	0xd0042b04
   34860:	b29b682b 	.word	0xb29b682b
   34864:	f0402b02 	.word	0xf0402b02
   34868:	210281e0 	.word	0x210281e0
   3486c:	240020b6 	.word	0x240020b6
   34870:	f10d682b 	.word	0xf10d682b
   34874:	f423020e 	.word	0xf423020e
   34878:	602b3380 	.word	0x602b3380
   3487c:	a0f4f8df 	.word	0xa0f4f8df
   34880:	4f3bab08 	.word	0x4f3bab08
   34884:	90054e38 	.word	0x90054e38
   34888:	93049107 	.word	0x93049107
   3488c:	ea099206 	.word	0xea099206
   34890:	f8da0b01 	.word	0xf8da0b01
   34894:	464a0000 	.word	0x464a0000
   34898:	a9046803 	.word	0xa9046803
   3489c:	4798689b 	.word	0x4798689b
   348a0:	da112800 	.word	0xda112800
   348a4:	0f00f1bb 	.word	0x0f00f1bb
   348a8:	682bd138 	.word	0x682bd138
   348ac:	d4f003d8 	.word	0xd4f003d8
   348b0:	e7eeb10c 	.word	0xe7eeb10c
   348b4:	4639b930 	.word	0x4639b930
   348b8:	f7f14630 	.word	0xf7f14630
   348bc:	682bf84b 	.word	0x682bf84b
   348c0:	d5f703d9 	.word	0xd5f703d9
   348c4:	e7e44604 	.word	0xe7e44604
   348c8:	0202f244 	.word	0x0202f244
   348cc:	300ef8bd 	.word	0x300ef8bd
   348d0:	d0394293 	.word	0xd0394293
   348d4:	0201f244 	.word	0x0201f244
   348d8:	d04d4293 	.word	0xd04d4293
   348dc:	0203f244 	.word	0x0203f244
   348e0:	f0404293 	.word	0xf0404293
   348e4:	22018196 	.word	0x22018196
   348e8:	9b082414 	.word	0x9b082414
   348ec:	2000f888 	.word	0x2000f888
   348f0:	f8c89a09 	.word	0xf8c89a09
   348f4:	f8bd3008 	.word	0xf8bd3008
   348f8:	e9c83028 	.word	0xe9c83028
   348fc:	f8da2303 	.word	0xf8da2303
   34900:	68030000 	.word	0x68030000
   34904:	479868db 	.word	0x479868db
   34908:	dd032800 	.word	0xdd032800
   3490c:	f443682b 	.word	0xf443682b
   34910:	602b3380 	.word	0x602b3380
   34914:	b0374620 	.word	0xb0374620
   34918:	8ff0e8bd 	.word	0x8ff0e8bd
   3491c:	46031c42 	.word	0x46031c42
   34920:	b93cd1d2 	.word	0xb93cd1d2
   34924:	2023461c 	.word	0x2023461c
   34928:	f8a4f7f1 	.word	0xf8a4f7f1
   3492c:	b0374620 	.word	0xb0374620
   34930:	8ff0e8bd 	.word	0x8ff0e8bd
   34934:	46209001 	.word	0x46209001
   34938:	f89cf7f1 	.word	0xf89cf7f1
   3493c:	461c9b01 	.word	0x461c9b01
   34940:	b0374620 	.word	0xb0374620
   34944:	8ff0e8bd 	.word	0x8ff0e8bd
   34948:	f00ca808 	.word	0xf00ca808
   3494c:	2302ff6b 	.word	0x2302ff6b
   34950:	b2a41c44 	.word	0xb2a41c44
   34954:	3b08f808 	.word	0x3b08f808
   34958:	a9084622 	.word	0xa9084622
   3495c:	f7e54640 	.word	0xf7e54640
   34960:	3408faa7 	.word	0x3408faa7
   34964:	bf00e7cb 	.word	0xbf00e7cb
   34968:	49765443 	.word	0x49765443
   3496c:	20024eb0 	.word	0x20024eb0
   34970:	20031b8c 	.word	0x20031b8c
   34974:	20024eb4 	.word	0x20024eb4
   34978:	a8092401 	.word	0xa8092401
   3497c:	e9c8c80f 	.word	0xe9c8c80f
   34980:	e9c80102 	.word	0xe9c80102
   34984:	990d2304 	.word	0x990d2304
   34988:	f8889a0e 	.word	0xf8889a0e
   3498c:	9b0f4000 	.word	0x9b0f4000
   34990:	1018f8c8 	.word	0x1018f8c8
   34994:	f8c89910 	.word	0xf8c89910
   34998:	f8c8201c 	.word	0xf8c8201c
   3499c:	f89d3020 	.word	0xf89d3020
   349a0:	f8dd205d 	.word	0xf8dd205d
   349a4:	f8c8304d 	.word	0xf8c8304d
   349a8:	f8dd1024 	.word	0xf8dd1024
   349ac:	f8881051 	.word	0xf8881051
   349b0:	f8dd2044 	.word	0xf8dd2044
   349b4:	f8c82055 	.word	0xf8c82055
   349b8:	f8dd3034 	.word	0xf8dd3034
   349bc:	f8c83059 	.word	0xf8c83059
   349c0:	f8bd1038 	.word	0xf8bd1038
   349c4:	f8c81044 	.word	0xf8c81044
   349c8:	f8c8203c 	.word	0xf8c8203c
   349cc:	f8dd3040 	.word	0xf8dd3040
   349d0:	f89d2046 	.word	0xf89d2046
   349d4:	f8a8304a 	.word	0xf8a8304a
   349d8:	f8881028 	.word	0xf8881028
   349dc:	f8c8302e 	.word	0xf8c8302e
   349e0:	f89d202a 	.word	0xf89d202a
   349e4:	f89d004b 	.word	0xf89d004b
   349e8:	9b18204c 	.word	0x9b18204c
   349ec:	406cf89d 	.word	0x406cf89d
   349f0:	2002ea40 	.word	0x2002ea40
   349f4:	206bf89d 	.word	0x206bf89d
   349f8:	210ff3c3 	.word	0x210ff3c3
   349fc:	ea429b1d 	.word	0xea429b1d
   34a00:	f8a82204 	.word	0xf8a82204
   34a04:	f8a80030 	.word	0xf8a80030
   34a08:	f8bd104a 	.word	0xf8bd104a
   34a0c:	f3c3105e 	.word	0xf3c3105e
   34a10:	f8a8230f 	.word	0xf8a8230f
   34a14:	f89d2056 	.word	0xf89d2056
   34a18:	f8a82060 	.word	0xf8a82060
   34a1c:	f8dd3062 	.word	0xf8dd3062
   34a20:	f8a83063 	.word	0xf8a83063
   34a24:	f8881046 	.word	0xf8881046
   34a28:	f8bd2048 	.word	0xf8bd2048
   34a2c:	f89d2068 	.word	0xf89d2068
   34a30:	f8c81067 	.word	0xf8c81067
   34a34:	f89d304c 	.word	0xf89d304c
   34a38:	f888306a 	.word	0xf888306a
   34a3c:	f8a81050 	.word	0xf8a81050
   34a40:	f8882052 	.word	0xf8882052
   34a44:	f8bd3054 	.word	0xf8bd3054
   34a48:	f8dd3072 	.word	0xf8dd3072
   34a4c:	f89d106d 	.word	0xf89d106d
   34a50:	f8c82071 	.word	0xf8c82071
   34a54:	f8881058 	.word	0xf8881058
   34a58:	f89d205c 	.word	0xf89d205c
   34a5c:	f8dd1074 	.word	0xf8dd1074
   34a60:	f8a82077 	.word	0xf8a82077
   34a64:	f89d305e 	.word	0xf89d305e
   34a68:	f888307b 	.word	0xf888307b
   34a6c:	f8c81060 	.word	0xf8c81060
   34a70:	f8882064 	.word	0xf8882064
   34a74:	f89d3068 	.word	0xf89d3068
   34a78:	f89d3080 	.word	0xf89d3080
   34a7c:	9a22107f 	.word	0x9a22107f
   34a80:	0094f89d 	.word	0x0094f89d
   34a84:	2103ea41 	.word	0x2103ea41
   34a88:	3093f89d 	.word	0x3093f89d
   34a8c:	220ff3c2 	.word	0x220ff3c2
   34a90:	106ef8a8 	.word	0x106ef8a8
   34a94:	107cf8bd 	.word	0x107cf8bd
   34a98:	2300ea43 	.word	0x2300ea43
   34a9c:	207af8a8 	.word	0x207af8a8
   34aa0:	207ef89d 	.word	0x207ef89d
   34aa4:	3086f8a8 	.word	0x3086f8a8
   34aa8:	3081f8dd 	.word	0x3081f8dd
   34aac:	106af8a8 	.word	0x106af8a8
   34ab0:	206cf888 	.word	0x206cf888
   34ab4:	2086f8bd 	.word	0x2086f8bd
   34ab8:	1085f89d 	.word	0x1085f89d
   34abc:	3070f8c8 	.word	0x3070f8c8
   34ac0:	3088f89d 	.word	0x3088f89d
   34ac4:	1074f888 	.word	0x1074f888
   34ac8:	2076f8a8 	.word	0x2076f8a8
   34acc:	3078f888 	.word	0x3078f888
   34ad0:	3090f8bd 	.word	0x3090f8bd
   34ad4:	108bf8dd 	.word	0x108bf8dd
   34ad8:	208ff89d 	.word	0x208ff89d
   34adc:	107cf8c8 	.word	0x107cf8c8
   34ae0:	2080f888 	.word	0x2080f888
   34ae4:	1092f89d 	.word	0x1092f89d
   34ae8:	2095f8dd 	.word	0x2095f8dd
   34aec:	3082f8a8 	.word	0x3082f8a8
   34af0:	3099f89d 	.word	0x3099f89d
   34af4:	1084f888 	.word	0x1084f888
   34af8:	2088f8c8 	.word	0x2088f8c8
   34afc:	308cf888 	.word	0x308cf888
   34b00:	009af8bd 	.word	0x009af8bd
   34b04:	f89d9b27 	.word	0xf89d9b27
   34b08:	f89d40a8 	.word	0xf89d40a8
   34b0c:	f3c320a7 	.word	0xf3c320a7
   34b10:	9b2c210f 	.word	0x9b2c210f
   34b14:	2204ea42 	.word	0x2204ea42
   34b18:	1092f8a8 	.word	0x1092f8a8
   34b1c:	109cf89d 	.word	0x109cf89d
   34b20:	209ef8a8 	.word	0x209ef8a8
   34b24:	230ff3c3 	.word	0x230ff3c3
   34b28:	209ff8dd 	.word	0x209ff8dd
   34b2c:	008ef8a8 	.word	0x008ef8a8
   34b30:	30aaf8a8 	.word	0x30aaf8a8
   34b34:	1090f888 	.word	0x1090f888
   34b38:	30a3f89d 	.word	0x30a3f89d
   34b3c:	10a4f8bd 	.word	0x10a4f8bd
   34b40:	2094f8c8 	.word	0x2094f8c8
   34b44:	20a6f89d 	.word	0x20a6f89d
   34b48:	3098f888 	.word	0x3098f888
   34b4c:	30a9f8dd 	.word	0x30a9f8dd
   34b50:	109af8a8 	.word	0x109af8a8
   34b54:	209cf888 	.word	0x209cf888
   34b58:	20aef8bd 	.word	0x20aef8bd
   34b5c:	10adf89d 	.word	0x10adf89d
   34b60:	30a0f8c8 	.word	0x30a0f8c8
   34b64:	30b0f89d 	.word	0x30b0f89d
   34b68:	10a4f888 	.word	0x10a4f888
   34b6c:	20a6f8a8 	.word	0x20a6f8a8
   34b70:	30a8f888 	.word	0x30a8f888
   34b74:	30b8f8bd 	.word	0x30b8f8bd
   34b78:	10b3f8dd 	.word	0x10b3f8dd
   34b7c:	20b7f89d 	.word	0x20b7f89d
   34b80:	10acf8c8 	.word	0x10acf8c8
   34b84:	20b0f888 	.word	0x20b0f888
   34b88:	30b2f8a8 	.word	0x30b2f8a8
   34b8c:	30bcf89d 	.word	0x30bcf89d
   34b90:	10bbf89d 	.word	0x10bbf89d
   34b94:	00d0f89d 	.word	0x00d0f89d
   34b98:	ea419a31 	.word	0xea419a31
   34b9c:	f89d2103 	.word	0xf89d2103
   34ba0:	f89d30cf 	.word	0xf89d30cf
   34ba4:	ea4340ba 	.word	0xea4340ba
   34ba8:	f3c22300 	.word	0xf3c22300
   34bac:	f8a8220f 	.word	0xf8a8220f
   34bb0:	f8a810b6 	.word	0xf8a810b6
   34bb4:	f88830ce 	.word	0xf88830ce
   34bb8:	f8a840b4 	.word	0xf8a840b4
   34bbc:	f8bd20c2 	.word	0xf8bd20c2
   34bc0:	f89d20c2 	.word	0xf89d20c2
   34bc4:	f89d10c1 	.word	0xf89d10c1
   34bc8:	f8dd30c4 	.word	0xf8dd30c4
   34bcc:	f88800bd 	.word	0xf88800bd
   34bd0:	f8a810bc 	.word	0xf8a810bc
   34bd4:	f8c820be 	.word	0xf8c820be
   34bd8:	f88800b8 	.word	0xf88800b8
   34bdc:	f8bd30c0 	.word	0xf8bd30c0
   34be0:	f8dd30cc 	.word	0xf8dd30cc
   34be4:	f89d10c7 	.word	0xf89d10c7
   34be8:	f8c820cb 	.word	0xf8c820cb
   34bec:	f88810c4 	.word	0xf88810c4
   34bf0:	f89d20c8 	.word	0xf89d20c8
   34bf4:	f8dd10ce 	.word	0xf8dd10ce
   34bf8:	f8a820d1 	.word	0xf8a820d1
   34bfc:	f89d30ca 	.word	0xf89d30ca
   34c00:	f88830d5 	.word	0xf88830d5
   34c04:	f8c810cc 	.word	0xf8c810cc
   34c08:	f88820d0 	.word	0xf88820d0
   34c0c:	24d830d4 	.word	0x24d830d4
   34c10:	2016e675 	.word	0x2016e675
   34c14:	ff2ef7f0 	.word	0xff2ef7f0
   34c18:	34fff04f 	.word	0x34fff04f
   34c1c:	2009e67a 	.word	0x2009e67a
   34c20:	ff28f7f0 	.word	0xff28f7f0
   34c24:	34fff04f 	.word	0x34fff04f
   34c28:	2039e674 	.word	0x2039e674
   34c2c:	ff22f7f0 	.word	0xff22f7f0
   34c30:	34fff04f 	.word	0x34fff04f
   34c34:	bf00e66e 	.word	0xbf00e66e

00034c38 <gnss_interface_setopt>:
   34c38:	47f0e92d 	.word	0x47f0e92d
   34c3c:	1402f241 	.word	0x1402f241
   34c40:	b0864222 	.word	0xb0864222
   34c44:	d0044d9b 	.word	0xd0044d9b
   34c48:	b2a4682c 	.word	0xb2a4682c
   34c4c:	f0402c02 	.word	0xf0402c02
   34c50:	682c8104 	.word	0x682c8104
   34c54:	f1000264 	.word	0xf1000264
   34c58:	f5b18127 	.word	0xf5b18127
   34c5c:	f0407f01 	.word	0xf0407f01
   34c60:	4995811d 	.word	0x4995811d
   34c64:	f0404288 	.word	0xf0404288
   34c68:	3a018113 	.word	0x3a018113
   34c6c:	f2002a08 	.word	0xf2002a08
   34c70:	e8df80ec 	.word	0xe8df80ec
   34c74:	0075f012 	.word	0x0075f012
   34c78:	00c200d8 	.word	0x00c200d8
   34c7c:	008100cc 	.word	0x008100cc
   34c80:	0098008c 	.word	0x0098008c
   34c84:	000900af 	.word	0x000900af
   34c88:	2a019a0e 	.word	0x2a019a0e
   34c8c:	80ddf040 	.word	0x80ddf040
   34c90:	1603f241 	.word	0x1603f241
   34c94:	46372240 	.word	0x46372240
   34c98:	9202781b 	.word	0x9202781b
   34c9c:	3015f88d 	.word	0x3015f88d
   34ca0:	2112682b 	.word	0x2112682b
   34ca4:	0380f443 	.word	0x0380f443
   34ca8:	602b4668 	.word	0x602b4668
   34cac:	fd26f7f8 	.word	0xfd26f7f8
   34cb0:	98004604 	.word	0x98004604
   34cb4:	f0402c00 	.word	0xf0402c00
   34cb8:	280080d6 	.word	0x280080d6
   34cbc:	80d3f000 	.word	0x80d3f000
   34cc0:	f04f2212 	.word	0xf04f2212
   34cc4:	f04f0876 	.word	0xf04f0876
   34cc8:	f04f0e49 	.word	0xf04f0e49
   34ccc:	f04f0a43 	.word	0xf04f0a43
   34cd0:	f8df0954 	.word	0xf8df0954
   34cd4:	a906c1ec 	.word	0xa906c1ec
   34cd8:	3000f8bc 	.word	0x3000f8bc
   34cdc:	800ef880 	.word	0x800ef880
   34ce0:	b29b3301 	.word	0xb29b3301
   34ce4:	4603ea46 	.word	0x4603ea46
   34ce8:	6d14f841 	.word	0x6d14f841
   34cec:	71847144 	.word	0x71847144
   34cf0:	720471c4 	.word	0x720471c4
   34cf4:	72847244 	.word	0x72847244
   34cf8:	710272c4 	.word	0x710272c4
   34cfc:	a00cf880 	.word	0xa00cf880
   34d00:	900df880 	.word	0x900df880
   34d04:	e00ff880 	.word	0xe00ff880
   34d08:	81b8f8df 	.word	0x81b8f8df
   34d0c:	f8ac6800 	.word	0xf8ac6800
   34d10:	f7e53000 	.word	0xf7e53000
   34d14:	4639f8cd 	.word	0x4639f8cd
   34d18:	f8c89800 	.word	0xf8c89800
   34d1c:	f7f84000 	.word	0xf7f84000
   34d20:	2800fd01 	.word	0x2800fd01
   34d24:	80aaf040 	.word	0x80aaf040
   34d28:	4e634f64 	.word	0x4e634f64
   34d2c:	46304639 	.word	0x46304639
   34d30:	fe10f7f0 	.word	0xfe10f7f0
   34d34:	f414682c 	.word	0xf414682c
   34d38:	d1f70480 	.word	0xd1f70480
   34d3c:	0000f8d8 	.word	0x0000f8d8
   34d40:	f7f8b118 	.word	0xf7f8b118
   34d44:	f8c8fd0d 	.word	0xf8c8fd0d
   34d48:	682b4000 	.word	0x682b4000
   34d4c:	d576021b 	.word	0xd576021b
   34d50:	682b2000 	.word	0x682b2000
   34d54:	0300f423 	.word	0x0300f423
   34d58:	b006602b 	.word	0xb006602b
   34d5c:	87f0e8bd 	.word	0x87f0e8bd
   34d60:	2a029a0e 	.word	0x2a029a0e
   34d64:	2208d171 	.word	0x2208d171
   34d68:	1603f241 	.word	0x1603f241
   34d6c:	9202881b 	.word	0x9202881b
   34d70:	300ff8ad 	.word	0x300ff8ad
   34d74:	e7934637 	.word	0xe7934637
   34d78:	2a019a0e 	.word	0x2a019a0e
   34d7c:	f241d165 	.word	0xf241d165
   34d80:	781b1603 	.word	0x781b1603
   34d84:	f88d9202 	.word	0xf88d9202
   34d88:	4637300c 	.word	0x4637300c
   34d8c:	9a0ee788 	.word	0x9a0ee788
   34d90:	d15a2a01 	.word	0xd15a2a01
   34d94:	f2412202 	.word	0xf2412202
   34d98:	781b1603 	.word	0x781b1603
   34d9c:	f88d9202 	.word	0xf88d9202
   34da0:	4637300d 	.word	0x4637300d
   34da4:	682ae77c 	.word	0x682ae77c
   34da8:	2a02b292 	.word	0x2a02b292
   34dac:	9a0ed155 	.word	0x9a0ed155
   34db0:	d14a2a04 	.word	0xd14a2a04
   34db4:	f2412101 	.word	0xf2412101
   34db8:	682a0604 	.word	0x682a0604
   34dbc:	0c136818 	.word	0x0c136818
   34dc0:	f043041b 	.word	0xf043041b
   34dc4:	f8cd0303 	.word	0xf8cd0303
   34dc8:	602b0009 	.word	0x602b0009
   34dcc:	1008f88d 	.word	0x1008f88d
   34dd0:	e7654637 	.word	0xe7654637
   34dd4:	b29b682b 	.word	0xb29b682b
   34dd8:	d13e2b04 	.word	0xd13e2b04
   34ddc:	f2412300 	.word	0xf2412300
   34de0:	f88d0604 	.word	0xf88d0604
   34de4:	f88d3008 	.word	0xf88d3008
   34de8:	f88d3009 	.word	0xf88d3009
   34dec:	f88d300a 	.word	0xf88d300a
   34df0:	f88d300b 	.word	0xf88d300b
   34df4:	4637300c 	.word	0x4637300c
   34df8:	9a0ee752 	.word	0x9a0ee752
   34dfc:	d1242a01 	.word	0xd1242a01
   34e00:	2b01781b 	.word	0x2b01781b
   34e04:	f241d121 	.word	0xf241d121
   34e08:	46371603 	.word	0x46371603
   34e0c:	9a0ee748 	.word	0x9a0ee748
   34e10:	d11a2a02 	.word	0xd11a2a02
   34e14:	f2412220 	.word	0xf2412220
   34e18:	881b1603 	.word	0x881b1603
   34e1c:	f8ad9202 	.word	0xf8ad9202
   34e20:	46373013 	.word	0x46373013
   34e24:	9a0ee73c 	.word	0x9a0ee73c
   34e28:	d10e2a02 	.word	0xd10e2a02
   34e2c:	f2412210 	.word	0xf2412210
   34e30:	881b1603 	.word	0x881b1603
   34e34:	f8ad9202 	.word	0xf8ad9202
   34e38:	46373011 	.word	0x46373011
   34e3c:	200ee730 	.word	0x200ee730
   34e40:	fe18f7f0 	.word	0xfe18f7f0
   34e44:	30fff04f 	.word	0x30fff04f
   34e48:	2016e783 	.word	0x2016e783
   34e4c:	fe12f7f0 	.word	0xfe12f7f0
   34e50:	30fff04f 	.word	0x30fff04f
   34e54:	e8bdb006 	.word	0xe8bdb006
   34e58:	200e87f0 	.word	0x200e87f0
   34e5c:	fe0af7f0 	.word	0xfe0af7f0
   34e60:	30fff04f 	.word	0x30fff04f
   34e64:	6803e779 	.word	0x6803e779
   34e68:	4618b11b 	.word	0x4618b11b
   34e6c:	fc78f7f8 	.word	0xfc78f7f8
   34e70:	f7f89800 	.word	0xf7f89800
   34e74:	2023fc6d 	.word	0x2023fc6d
   34e78:	fdfcf7f0 	.word	0xfdfcf7f0
   34e7c:	200e682b 	.word	0x200e682b
   34e80:	0380f423 	.word	0x0380f423
   34e84:	f7f0602b 	.word	0xf7f0602b
   34e88:	f04ffdf5 	.word	0xf04ffdf5
   34e8c:	e76430ff 	.word	0xe76430ff
   34e90:	f7f02009 	.word	0xf7f02009
   34e94:	f04ffdef 	.word	0xf04ffdef
   34e98:	e75e30ff 	.word	0xe75e30ff
   34e9c:	f7f0202a 	.word	0xf7f0202a
   34ea0:	f04ffde9 	.word	0xf04ffde9
   34ea4:	e75830ff 	.word	0xe75830ff
   34ea8:	f7f02073 	.word	0xf7f02073
   34eac:	f04ffde3 	.word	0xf04ffde3
   34eb0:	e75230ff 	.word	0xe75230ff
   34eb4:	20024eb0 	.word	0x20024eb0
   34eb8:	49765443 	.word	0x49765443
   34ebc:	20031b8c 	.word	0x20031b8c
   34ec0:	2002a6d2 	.word	0x2002a6d2
   34ec4:	20024e58 	.word	0x20024e58

00034ec8 <gnss_interface_getopt>:
   34ec8:	4ff0e92d 	.word	0x4ff0e92d
   34ecc:	b0874c81 	.word	0xb0874c81
   34ed0:	46986825 	.word	0x46986825
   34ed4:	2d02b2ad 	.word	0x2d02b2ad
   34ed8:	f0409b10 	.word	0xf0409b10
   34edc:	682580dc 	.word	0x682580dc
   34ee0:	f10003ee 	.word	0xf10003ee
   34ee4:	682580f0 	.word	0x682580f0
   34ee8:	f10001ed 	.word	0xf10001ed
   34eec:	f5b180e6 	.word	0xf5b180e6
   34ef0:	f0407f01 	.word	0xf0407f01
   34ef4:	497880d6 	.word	0x497880d6
   34ef8:	f0404288 	.word	0xf0404288
   34efc:	f1b880d8 	.word	0xf1b880d8
   34f00:	d00b0f00 	.word	0xd00b0f00
   34f04:	1e57b153 	.word	0x1e57b153
   34f08:	d8072f05 	.word	0xd8072f05
   34f0c:	f007e8df 	.word	0xf007e8df
   34f10:	0f030f0f 	.word	0x0f030f0f
   34f14:	681b0303 	.word	0x681b0303
   34f18:	d00b2b01 	.word	0xd00b2b01
   34f1c:	f7f02016 	.word	0xf7f02016
   34f20:	f04ffda9 	.word	0xf04ffda9
   34f24:	462835ff 	.word	0x462835ff
   34f28:	e8bdb007 	.word	0xe8bdb007
   34f2c:	681b8ff0 	.word	0x681b8ff0
   34f30:	d1f32b02 	.word	0xd1f32b02
   34f34:	22126823 	.word	0x22126823
   34f38:	7380f043 	.word	0x7380f043
   34f3c:	a8012100 	.word	0xa8012100
   34f40:	f00c6023 	.word	0xf00c6023
   34f44:	2112f879 	.word	0x2112f879
   34f48:	f7f84668 	.word	0xf7f84668
   34f4c:	4605fbd7 	.word	0x4605fbd7
   34f50:	2d009800 	.word	0x2d009800
   34f54:	808af040 	.word	0x808af040
   34f58:	f0002800 	.word	0xf0002800
   34f5c:	f2418087 	.word	0xf2418087
   34f60:	f04f1602 	.word	0xf04f1602
   34f64:	22120e49 	.word	0x22120e49
   34f68:	0976f04f 	.word	0x0976f04f
   34f6c:	0b43f04f 	.word	0x0b43f04f
   34f70:	0a54f04f 	.word	0x0a54f04f
   34f74:	c168f8df 	.word	0xc168f8df
   34f78:	e00ff880 	.word	0xe00ff880
   34f7c:	3000f8bc 	.word	0x3000f8bc
   34f80:	900ef880 	.word	0x900ef880
   34f84:	b29b3301 	.word	0xb29b3301
   34f88:	4e03ea46 	.word	0x4e03ea46
   34f8c:	e004f8cd 	.word	0xe004f8cd
   34f90:	71857145 	.word	0x71857145
   34f94:	720571c5 	.word	0x720571c5
   34f98:	72857245 	.word	0x72857245
   34f9c:	a90172c5 	.word	0xa90172c5
   34fa0:	f8807102 	.word	0xf8807102
   34fa4:	f880b00c 	.word	0xf880b00c
   34fa8:	f8dfa00d 	.word	0xf8dfa00d
   34fac:	68009138 	.word	0x68009138
   34fb0:	3000f8ac 	.word	0x3000f8ac
   34fb4:	ff7cf7e4 	.word	0xff7cf7e4
   34fb8:	98004631 	.word	0x98004631
   34fbc:	5000f8c9 	.word	0x5000f8c9
   34fc0:	fbb0f7f8 	.word	0xfbb0f7f8
   34fc4:	d15c2800 	.word	0xd15c2800
   34fc8:	4d434e44 	.word	0x4d434e44
   34fcc:	46284631 	.word	0x46284631
   34fd0:	fcc0f7f0 	.word	0xfcc0f7f0
   34fd4:	01db6823 	.word	0x01db6823
   34fd8:	f8d9d4f8 	.word	0xf8d9d4f8
   34fdc:	b1d80000 	.word	0xb1d80000
   34fe0:	f0156825 	.word	0xf0156825
   34fe4:	d00f7500 	.word	0xd00f7500
   34fe8:	d8372f05 	.word	0xd8372f05
   34fec:	f007e8df 	.word	0xf007e8df
   34ff0:	2b26201a 	.word	0x2b26201a
   34ff4:	25000331 	.word	0x25000331
   34ff8:	f8887b43 	.word	0xf8887b43
   34ffc:	f7f83000 	.word	0xf7f83000
   35000:	2300fbaf 	.word	0x2300fbaf
   35004:	3000f8c9 	.word	0x3000f8c9
   35008:	f0236823 	.word	0xf0236823
   3500c:	60237300 	.word	0x60237300
   35010:	b0074628 	.word	0xb0074628
   35014:	8ff0e8bd 	.word	0x8ff0e8bd
   35018:	46056823 	.word	0x46056823
   3501c:	7300f023 	.word	0x7300f023
   35020:	e7f56023 	.word	0xe7f56023
   35024:	300ff8b0 	.word	0x300ff8b0
   35028:	f8a82500 	.word	0xf8a82500
   3502c:	e7e63000 	.word	0xe7e63000
   35030:	3011f8b0 	.word	0x3011f8b0
   35034:	f8a82500 	.word	0xf8a82500
   35038:	e7e03000 	.word	0xe7e03000
   3503c:	25007b83 	.word	0x25007b83
   35040:	3000f888 	.word	0x3000f888
   35044:	f8b0e7db 	.word	0xf8b0e7db
   35048:	25003013 	.word	0x25003013
   3504c:	3000f8a8 	.word	0x3000f8a8
   35050:	7b03e7d5 	.word	0x7b03e7d5
   35054:	f8882500 	.word	0xf8882500
   35058:	e7d03000 	.word	0xe7d03000
   3505c:	f7f02016 	.word	0xf7f02016
   35060:	f04ffd09 	.word	0xf04ffd09
   35064:	f8d935ff 	.word	0xf8d935ff
   35068:	e7c80000 	.word	0xe7c80000
   3506c:	b11b6803 	.word	0xb11b6803
   35070:	f7f84618 	.word	0xf7f84618
   35074:	9800fb75 	.word	0x9800fb75
   35078:	fb6af7f8 	.word	0xfb6af7f8
   3507c:	f7f02023 	.word	0xf7f02023
   35080:	6823fcf9 	.word	0x6823fcf9
   35084:	f023200e 	.word	0xf023200e
   35088:	60237380 	.word	0x60237380
   3508c:	35fff04f 	.word	0x35fff04f
   35090:	fcf0f7f0 	.word	0xfcf0f7f0
   35094:	200ee747 	.word	0x200ee747
   35098:	fcecf7f0 	.word	0xfcecf7f0
   3509c:	35fff04f 	.word	0x35fff04f
   350a0:	202ae741 	.word	0x202ae741
   350a4:	fce6f7f0 	.word	0xfce6f7f0
   350a8:	35fff04f 	.word	0x35fff04f
   350ac:	2009e73b 	.word	0x2009e73b
   350b0:	fce0f7f0 	.word	0xfce0f7f0
   350b4:	35fff04f 	.word	0x35fff04f
   350b8:	2073e735 	.word	0x2073e735
   350bc:	fcdaf7f0 	.word	0xfcdaf7f0
   350c0:	35fff04f 	.word	0x35fff04f
   350c4:	2005e72f 	.word	0x2005e72f
   350c8:	fcd4f7f0 	.word	0xfcd4f7f0
   350cc:	35fff04f 	.word	0x35fff04f
   350d0:	bf00e729 	.word	0xbf00e729
   350d4:	20024eb0 	.word	0x20024eb0
   350d8:	49765443 	.word	0x49765443
   350dc:	20031b8c 	.word	0x20031b8c
   350e0:	2002a6d2 	.word	0x2002a6d2
   350e4:	20024e58 	.word	0x20024e58

000350e8 <gnss_interface_init>:
   350e8:	b5382100 	.word	0xb5382100
   350ec:	4d0a4c09 	.word	0x4d0a4c09
   350f0:	480a6822 	.word	0x480a6822
   350f4:	402a4b0a 	.word	0x402a4b0a
   350f8:	80016022 	.word	0x80016022
   350fc:	f7f86019 	.word	0xf7f86019
   35100:	b928faf7 	.word	0xb928faf7
   35104:	402b6823 	.word	0x402b6823
   35108:	0301f043 	.word	0x0301f043
   3510c:	bd386023 	.word	0xbd386023
   35110:	bd382003 	.word	0xbd382003
   35114:	20024eb0 	.word	0x20024eb0
   35118:	ffff0000 	.word	0xffff0000
   3511c:	2002a6d2 	.word	0x2002a6d2
   35120:	20024e58 	.word	0x20024e58

00035124 <gnss_interface_open>:
   35124:	b5102801 	.word	0xb5102801
   35128:	f5b2d120 	.word	0xf5b2d120
   3512c:	d11d7f01 	.word	0xd11d7f01
   35130:	d11b2902 	.word	0xd11b2902
   35134:	68234c13 	.word	0x68234c13
   35138:	2b01b29b 	.word	0x2b01b29b
   3513c:	6823d11c 	.word	0x6823d11c
   35140:	0c1b4608 	.word	0x0c1b4608
   35144:	f043041b 	.word	0xf043041b
   35148:	22000302 	.word	0x22000302
   3514c:	6023490e 	.word	0x6023490e
   35150:	fbacf7fa 	.word	0xfbacf7fa
   35154:	60104a0d 	.word	0x60104a0d
   35158:	6823b170 	.word	0x6823b170
   3515c:	f4436802 	.word	0xf4436802
   35160:	68123300 	.word	0x68123300
   35164:	47906023 	.word	0x47906023
   35168:	bd104809 	.word	0xbd104809
   3516c:	f7f02016 	.word	0xf7f02016
   35170:	f04ffc81 	.word	0xf04ffc81
   35174:	bd1030ff 	.word	0xbd1030ff
   35178:	f7f0200e 	.word	0xf7f0200e
   3517c:	f04ffc7b 	.word	0xf04ffc7b
   35180:	bd1030ff 	.word	0xbd1030ff
   35184:	20024eb0 	.word	0x20024eb0
   35188:	0002d911 	.word	0x0002d911
   3518c:	20024eb4 	.word	0x20024eb4
   35190:	49765443 	.word	0x49765443

00035194 <gnss_interface_close>:
   35194:	4b13b530 	.word	0x4b13b530
   35198:	4298b083 	.word	0x4298b083
   3519c:	4c12d11c 	.word	0x4c12d11c
   351a0:	b29b6823 	.word	0xb29b6823
   351a4:	d00f2b04 	.word	0xd00f2b04
   351a8:	68284d10 	.word	0x68284d10
   351ac:	f7fab118 	.word	0xf7fab118
   351b0:	2300fb9d 	.word	0x2300fb9d
   351b4:	2000602b 	.word	0x2000602b
   351b8:	0c1b6823 	.word	0x0c1b6823
   351bc:	f043041b 	.word	0xf043041b
   351c0:	60230301 	.word	0x60230301
   351c4:	bd30b003 	.word	0xbd30b003
   351c8:	22082300 	.word	0x22082300
   351cc:	f44f9300 	.word	0xf44f9300
   351d0:	f7f97101 	.word	0xf7f97101
   351d4:	e7e7fa7b 	.word	0xe7e7fa7b
   351d8:	f7f02009 	.word	0xf7f02009
   351dc:	f04ffc4b 	.word	0xf04ffc4b
   351e0:	e7ef30ff 	.word	0xe7ef30ff
   351e4:	49765443 	.word	0x49765443
   351e8:	20024eb0 	.word	0x20024eb0
   351ec:	20024eb4 	.word	0x20024eb4

000351f0 <rpc_dfu_event_handler>:
   351f0:	4a08b508 	.word	0x4a08b508
   351f4:	881268c1 	.word	0x881268c1
   351f8:	ebb24603 	.word	0xebb24603
   351fc:	d0054f11 	.word	0xd0054f11
   35200:	b1106800 	.word	0xb1106800
   35204:	f838f004 	.word	0xf838f004
   35208:	bd082000 	.word	0xbd082000
   3520c:	20014a02 	.word	0x20014a02
   35210:	bd086013 	.word	0xbd086013
   35214:	2002a6d4 	.word	0x2002a6d4
   35218:	20024e5c 	.word	0x20024e5c

0003521c <mfu_interface_init>:
   3521c:	b5102300 	.word	0xb5102300
   35220:	49094808 	.word	0x49094808
   35224:	4c0a4a09 	.word	0x4c0a4a09
   35228:	600b8003 	.word	0x600b8003
   3522c:	60236013 	.word	0x60236013
   35230:	ffecf003 	.word	0xffecf003
   35234:	2301b910 	.word	0x2301b910
   35238:	bd106023 	.word	0xbd106023
   3523c:	30fff04f 	.word	0x30fff04f
   35240:	bf00bd10 	.word	0xbf00bd10
   35244:	2002a6d4 	.word	0x2002a6d4
   35248:	20024e5c 	.word	0x20024e5c
   3524c:	20024ec0 	.word	0x20024ec0
   35250:	20024eb8 	.word	0x20024eb8

00035254 <mfu_interface_open>:
   35254:	b5082801 	.word	0xb5082801
   35258:	f240d10b 	.word	0xf240d10b
   3525c:	429a2303 	.word	0x429a2303
   35260:	4b09d107 	.word	0x4b09d107
   35264:	2a01681a 	.word	0x2a01681a
   35268:	2202d109 	.word	0x2202d109
   3526c:	4807601a 	.word	0x4807601a
   35270:	2016bd08 	.word	0x2016bd08
   35274:	fbfef7f0 	.word	0xfbfef7f0
   35278:	30fff04f 	.word	0x30fff04f
   3527c:	f7f0bd08 	.word	0xf7f0bd08
   35280:	f04ffbf9 	.word	0xf04ffbf9
   35284:	bd0830ff 	.word	0xbd0830ff
   35288:	20024eb8 	.word	0x20024eb8
   3528c:	49765432 	.word	0x49765432

00035290 <mfu_interface_close>:
   35290:	4c32b5f0 	.word	0x4c32b5f0
   35294:	6823b083 	.word	0x6823b083
   35298:	2a011e9a 	.word	0x2a011e9a
   3529c:	2b03d857 	.word	0x2b03d857
   352a0:	2301d004 	.word	0x2301d004
   352a4:	60232000 	.word	0x60232000
   352a8:	bdf0b003 	.word	0xbdf0b003
   352ac:	46682100 	.word	0x46682100
   352b0:	ffb2f003 	.word	0xffb2f003
   352b4:	28004603 	.word	0x28004603
   352b8:	2104d13d 	.word	0x2104d13d
   352bc:	98004e28 	.word	0x98004e28
   352c0:	72018832 	.word	0x72018832
   352c4:	b2923201 	.word	0xb2923201
   352c8:	f0410411 	.word	0xf0410411
   352cc:	4d250106 	.word	0x4d250106
   352d0:	710360c1 	.word	0x710360c1
   352d4:	71837143 	.word	0x71837143
   352d8:	724371c3 	.word	0x724371c3
   352dc:	72c37283 	.word	0x72c37283
   352e0:	80322106 	.word	0x80322106
   352e4:	f003602b 	.word	0xf003602b
   352e8:	b9d8ffab 	.word	0xb9d8ffab
   352ec:	33fff04f 	.word	0x33fff04f
   352f0:	4627ae02 	.word	0x4627ae02
   352f4:	3d04f846 	.word	0x3d04f846
   352f8:	4631e004 	.word	0x4631e004
   352fc:	f7f04638 	.word	0xf7f04638
   35300:	b9f0fb29 	.word	0xb9f0fb29
   35304:	28006828 	.word	0x28006828
   35308:	6905d0f7 	.word	0x6905d0f7
   3530c:	ffacf003 	.word	0xffacf003
   35310:	d0c62d00 	.word	0xd0c62d00
   35314:	20084b14 	.word	0x20084b14
   35318:	f7f0601d 	.word	0xf7f0601d
   3531c:	f04ffbab 	.word	0xf04ffbab
   35320:	e7c130ff 	.word	0xe7c130ff
   35324:	68039800 	.word	0x68039800
   35328:	4618b11b 	.word	0x4618b11b
   3532c:	ffa4f003 	.word	0xffa4f003
   35330:	f0039800 	.word	0xf0039800
   35334:	200cff99 	.word	0x200cff99
   35338:	fb9cf7f0 	.word	0xfb9cf7f0
   3533c:	30fff04f 	.word	0x30fff04f
   35340:	203ce7b2 	.word	0x203ce7b2
   35344:	fb96f7f0 	.word	0xfb96f7f0
   35348:	30fff04f 	.word	0x30fff04f
   3534c:	2001e7ac 	.word	0x2001e7ac
   35350:	fb90f7f0 	.word	0xfb90f7f0
   35354:	30fff04f 	.word	0x30fff04f
   35358:	bf00e7a6 	.word	0xbf00e7a6
   3535c:	20024eb8 	.word	0x20024eb8
   35360:	2002a6d4 	.word	0x2002a6d4
   35364:	20024e5c 	.word	0x20024e5c
   35368:	20024ebc 	.word	0x20024ebc

0003536c <mfu_interface_sendto>:
   3536c:	47f0e92d 	.word	0x47f0e92d
   35370:	46154e5a 	.word	0x46154e5a
   35374:	b0826833 	.word	0xb0826833
   35378:	2a011e9a 	.word	0x2a011e9a
   3537c:	80a7f200 	.word	0x80a7f200
   35380:	2900460f 	.word	0x2900460f
   35384:	809df000 	.word	0x809df000
   35388:	f0002d00 	.word	0xf0002d00
   3538c:	2b02809a 	.word	0x2b02809a
   35390:	d04e46e8 	.word	0xd04e46e8
   35394:	46294640 	.word	0x46294640
   35398:	ff3ef003 	.word	0xff3ef003
   3539c:	b1404606 	.word	0xb1404606
   353a0:	f7f0200c 	.word	0xf7f0200c
   353a4:	f04ffb67 	.word	0xf04ffb67
   353a8:	462835ff 	.word	0x462835ff
   353ac:	e8bdb002 	.word	0xe8bdb002
   353b0:	9b0087f0 	.word	0x9b0087f0
   353b4:	68184639 	.word	0x68184639
   353b8:	f7e4462a 	.word	0xf7e4462a
   353bc:	2104fd79 	.word	0x2104fd79
   353c0:	98004c47 	.word	0x98004c47
   353c4:	60458823 	.word	0x60458823
   353c8:	b29b3301 	.word	0xb29b3301
   353cc:	8023041a 	.word	0x8023041a
   353d0:	4c44430a 	.word	0x4c44430a
   353d4:	724660c2 	.word	0x724660c2
   353d8:	72c67286 	.word	0x72c67286
   353dc:	60267201 	.word	0x60267201
   353e0:	ff2ef003 	.word	0xff2ef003
   353e4:	d1622800 	.word	0xd1622800
   353e8:	33fff04f 	.word	0x33fff04f
   353ec:	4f3bae02 	.word	0x4f3bae02
   353f0:	3d04f846 	.word	0x3d04f846
   353f4:	4631e004 	.word	0x4631e004
   353f8:	f7f04638 	.word	0xf7f04638
   353fc:	b978faab 	.word	0xb978faab
   35400:	28006820 	.word	0x28006820
   35404:	6904d0f7 	.word	0x6904d0f7
   35408:	ff2ef003 	.word	0xff2ef003
   3540c:	d0cc2c00 	.word	0xd0cc2c00
   35410:	20084b35 	.word	0x20084b35
   35414:	f04f601c 	.word	0xf04f601c
   35418:	f7f035ff 	.word	0xf7f035ff
   3541c:	e7c4fb2b 	.word	0xe7c4fb2b
   35420:	35fff04f 	.word	0x35fff04f
   35424:	f7f0203c 	.word	0xf7f0203c
   35428:	4628fb25 	.word	0x4628fb25
   3542c:	e8bdb002 	.word	0xe8bdb002
   35430:	464087f0 	.word	0x464087f0
   35434:	f0032100 	.word	0xf0032100
   35438:	4602feef 	.word	0x4602feef
   3543c:	d1af2800 	.word	0xd1af2800
   35440:	0c08f04f 	.word	0x0c08f04f
   35444:	48294926 	.word	0x48294926
   35448:	6804880b 	.word	0x6804880b
   3544c:	98003301 	.word	0x98003301
   35450:	800bb29b 	.word	0x800bb29b
   35454:	f043041b 	.word	0xf043041b
   35458:	61040303 	.word	0x61040303
   3545c:	60c34c21 	.word	0x60c34c21
   35460:	71427102 	.word	0x71427102
   35464:	71c27182 	.word	0x71c27182
   35468:	72827242 	.word	0x72827242
   3546c:	f88072c2 	.word	0xf88072c2
   35470:	2103c008 	.word	0x2103c008
   35474:	f0036022 	.word	0xf0036022
   35478:	b9c0fee3 	.word	0xb9c0fee3
   3547c:	33fff04f 	.word	0x33fff04f
   35480:	0908f10d 	.word	0x0908f10d
   35484:	3d04f849 	.word	0x3d04f849
   35488:	e00546b2 	.word	0xe00546b2
   3548c:	46504649 	.word	0x46504649
   35490:	fa60f7f0 	.word	0xfa60f7f0
   35494:	d1c32800 	.word	0xd1c32800
   35498:	28006820 	.word	0x28006820
   3549c:	6904d0f6 	.word	0x6904d0f6
   354a0:	fee2f003 	.word	0xfee2f003
   354a4:	d1b32c00 	.word	0xd1b32c00
   354a8:	60332303 	.word	0x60332303
   354ac:	9800e772 	.word	0x9800e772
   354b0:	b11b6803 	.word	0xb11b6803
   354b4:	f0034618 	.word	0xf0034618
   354b8:	9800fedf 	.word	0x9800fedf
   354bc:	fed4f003 	.word	0xfed4f003
   354c0:	2016e76e 	.word	0x2016e76e
   354c4:	fad6f7f0 	.word	0xfad6f7f0
   354c8:	35fff04f 	.word	0x35fff04f
   354cc:	2001e76d 	.word	0x2001e76d
   354d0:	fad0f7f0 	.word	0xfad0f7f0
   354d4:	35fff04f 	.word	0x35fff04f
   354d8:	bf00e767 	.word	0xbf00e767
   354dc:	20024eb8 	.word	0x20024eb8
   354e0:	2002a6d4 	.word	0x2002a6d4
   354e4:	20024e5c 	.word	0x20024e5c
   354e8:	20024ebc 	.word	0x20024ebc
   354ec:	20024ec0 	.word	0x20024ec0

000354f0 <mfu_interface_setopt>:
   354f0:	4846b5f0 	.word	0x4846b5f0
   354f4:	6800b083 	.word	0x6800b083
   354f8:	28013802 	.word	0x28013802
   354fc:	f240d877 	.word	0xf240d877
   35500:	42812003 	.word	0x42812003
   35504:	3a04d16d 	.word	0x3a04d16d
   35508:	d85c2a03 	.word	0xd85c2a03
   3550c:	f002e8df 	.word	0xf002e8df
   35510:	514e024b 	.word	0x514e024b
   35514:	46252407 	.word	0x46252407
   35518:	46682100 	.word	0x46682100
   3551c:	fe7cf003 	.word	0xfe7cf003
   35520:	28004603 	.word	0x28004603
   35524:	2704d138 	.word	0x2704d138
   35528:	98004e39 	.word	0x98004e39
   3552c:	46298832 	.word	0x46298832
   35530:	b2923201 	.word	0xb2923201
   35534:	4502ea44 	.word	0x4502ea44
   35538:	60c54c36 	.word	0x60c54c36
   3553c:	71437103 	.word	0x71437103
   35540:	71c37183 	.word	0x71c37183
   35544:	72837243 	.word	0x72837243
   35548:	720772c3 	.word	0x720772c3
   3554c:	60238032 	.word	0x60238032
   35550:	fe76f003 	.word	0xfe76f003
   35554:	f04fb9b8 	.word	0xf04fb9b8
   35558:	ad0233ff 	.word	0xad0233ff
   3555c:	f8454e2b 	.word	0xf8454e2b
   35560:	e0053d04 	.word	0xe0053d04
   35564:	46304629 	.word	0x46304629
   35568:	f9f4f7f0 	.word	0xf9f4f7f0
   3556c:	d1312800 	.word	0xd1312800
   35570:	28006820 	.word	0x28006820
   35574:	6904d0f6 	.word	0x6904d0f6
   35578:	fe76f003 	.word	0xfe76f003
   3557c:	d13c2c00 	.word	0xd13c2c00
   35580:	b0034620 	.word	0xb0034620
   35584:	9800bdf0 	.word	0x9800bdf0
   35588:	b11b6803 	.word	0xb11b6803
   3558c:	f0034618 	.word	0xf0034618
   35590:	9800fe73 	.word	0x9800fe73
   35594:	fe68f003 	.word	0xfe68f003
   35598:	f7f0200c 	.word	0xf7f0200c
   3559c:	f04ffa6b 	.word	0xf04ffa6b
   355a0:	b00330ff 	.word	0xb00330ff
   355a4:	2405bdf0 	.word	0x2405bdf0
   355a8:	e7b54625 	.word	0xe7b54625
   355ac:	46252408 	.word	0x46252408
   355b0:	b1b3e7b2 	.word	0xb1b3e7b2
   355b4:	2a049a08 	.word	0x2a049a08
   355b8:	2000d113 	.word	0x2000d113
   355bc:	4b16681a 	.word	0x4b16681a
   355c0:	b003601a 	.word	0xb003601a
   355c4:	202abdf0 	.word	0x202abdf0
   355c8:	fa54f7f0 	.word	0xfa54f7f0
   355cc:	30fff04f 	.word	0x30fff04f
   355d0:	bdf0b003 	.word	0xbdf0b003
   355d4:	f7f0203c 	.word	0xf7f0203c
   355d8:	f04ffa4d 	.word	0xf04ffa4d
   355dc:	b00330ff 	.word	0xb00330ff
   355e0:	2016bdf0 	.word	0x2016bdf0
   355e4:	fa46f7f0 	.word	0xfa46f7f0
   355e8:	30fff04f 	.word	0x30fff04f
   355ec:	2001e7c9 	.word	0x2001e7c9
   355f0:	fa40f7f0 	.word	0xfa40f7f0
   355f4:	30fff04f 	.word	0x30fff04f
   355f8:	4b08e7c3 	.word	0x4b08e7c3
   355fc:	601c2008 	.word	0x601c2008
   35600:	fa38f7f0 	.word	0xfa38f7f0
   35604:	30fff04f 	.word	0x30fff04f
   35608:	bf00e7bb 	.word	0xbf00e7bb
   3560c:	20024eb8 	.word	0x20024eb8
   35610:	2002a6d4 	.word	0x2002a6d4
   35614:	20024e5c 	.word	0x20024e5c
   35618:	20024ec0 	.word	0x20024ec0
   3561c:	20024ebc 	.word	0x20024ebc

00035620 <mfu_interface_getopt>:
   35620:	2003f240 	.word	0x2003f240
   35624:	41f0e92d 	.word	0x41f0e92d
   35628:	b0824281 	.word	0xb0824281
   3562c:	f0409e08 	.word	0xf0409e08
   35630:	461d80ae 	.word	0x461d80ae
   35634:	f0002b00 	.word	0xf0002b00
   35638:	2e0080aa 	.word	0x2e0080aa
   3563c:	80a7f000 	.word	0x80a7f000
   35640:	681b4b5e 	.word	0x681b4b5e
   35644:	2b013b02 	.word	0x2b013b02
   35648:	80a7f200 	.word	0x80a7f200
   3564c:	2a133a01 	.word	0x2a133a01
   35650:	e8dfd879 	.word	0xe8dfd879
   35654:	5f17f002 	.word	0x5f17f002
   35658:	78787878 	.word	0x78787878
   3565c:	78787872 	.word	0x78787872
   35660:	78787878 	.word	0x78787878
   35664:	78787878 	.word	0x78787878
   35668:	68330a78 	.word	0x68330a78
   3566c:	f0402b04 	.word	0xf0402b04
   35670:	2200808e 	.word	0x2200808e
   35674:	4b524610 	.word	0x4b524610
   35678:	601a6819 	.word	0x601a6819
   3567c:	b0026029 	.word	0xb0026029
   35680:	81f0e8bd 	.word	0x81f0e8bd
   35684:	2b246833 	.word	0x2b246833
   35688:	8081f040 	.word	0x8081f040
   3568c:	46a02401 	.word	0x46a02401
   35690:	46682100 	.word	0x46682100
   35694:	fdc0f003 	.word	0xfdc0f003
   35698:	d1462800 	.word	0xd1462800
   3569c:	9b004949 	.word	0x9b004949
   356a0:	f1b8880a 	.word	0xf1b8880a
   356a4:	f1020f03 	.word	0xf1020f03
   356a8:	b2920201 	.word	0xb2920201
   356ac:	4402ea44 	.word	0x4402ea44
   356b0:	800a7118 	.word	0x800a7118
   356b4:	715860dc 	.word	0x715860dc
   356b8:	71d87198 	.word	0x71d87198
   356bc:	2104d04b 	.word	0x2104d04b
   356c0:	4f412200 	.word	0x4f412200
   356c4:	46186099 	.word	0x46186099
   356c8:	603a4641 	.word	0x603a4641
   356cc:	fdb8f003 	.word	0xfdb8f003
   356d0:	d14d2800 	.word	0xd14d2800
   356d4:	33fff04f 	.word	0x33fff04f
   356d8:	f844ac02 	.word	0xf844ac02
   356dc:	f8df3d04 	.word	0xf8df3d04
   356e0:	e00580dc 	.word	0xe00580dc
   356e4:	46404621 	.word	0x46404621
   356e8:	f934f7f0 	.word	0xf934f7f0
   356ec:	d1372800 	.word	0xd1372800
   356f0:	29006839 	.word	0x29006839
   356f4:	690cd0f6 	.word	0x690cd0f6
   356f8:	d1542c00 	.word	0xd1542c00
   356fc:	31146832 	.word	0x31146832
   35700:	f7e44628 	.word	0xf7e44628
   35704:	6838fbd5 	.word	0x6838fbd5
   35708:	fdaef003 	.word	0xfdaef003
   3570c:	b0024620 	.word	0xb0024620
   35710:	81f0e8bd 	.word	0x81f0e8bd
   35714:	2b046833 	.word	0x2b046833
   35718:	2402d139 	.word	0x2402d139
   3571c:	46682100 	.word	0x46682100
   35720:	f00346a0 	.word	0xf00346a0
   35724:	2800fd79 	.word	0x2800fd79
   35728:	200cd0b8 	.word	0x200cd0b8
   3572c:	f9a2f7f0 	.word	0xf9a2f7f0
   35730:	30fff04f 	.word	0x30fff04f
   35734:	e8bdb002 	.word	0xe8bdb002
   35738:	683381f0 	.word	0x683381f0
   3573c:	d1262b04 	.word	0xd1262b04
   35740:	46a02409 	.word	0x46a02409
   35744:	202ae7a4 	.word	0x202ae7a4
   35748:	f994f7f0 	.word	0xf994f7f0
   3574c:	30fff04f 	.word	0x30fff04f
   35750:	e8bdb002 	.word	0xe8bdb002
   35754:	4a1d81f0 	.word	0x4a1d81f0
   35758:	68122108 	.word	0x68122108
   3575c:	e7af611a 	.word	0xe7af611a
   35760:	f7f0203c 	.word	0xf7f0203c
   35764:	f04ff987 	.word	0xf04ff987
   35768:	b00230ff 	.word	0xb00230ff
   3576c:	81f0e8bd 	.word	0x81f0e8bd
   35770:	68039800 	.word	0x68039800
   35774:	4618b11b 	.word	0x4618b11b
   35778:	fd7ef003 	.word	0xfd7ef003
   3577c:	f0039800 	.word	0xf0039800
   35780:	200cfd73 	.word	0x200cfd73
   35784:	f976f7f0 	.word	0xf976f7f0
   35788:	30fff04f 	.word	0x30fff04f
   3578c:	2016e7d2 	.word	0x2016e7d2
   35790:	f970f7f0 	.word	0xf970f7f0
   35794:	30fff04f 	.word	0x30fff04f
   35798:	2001e771 	.word	0x2001e771
   3579c:	f96af7f0 	.word	0xf96af7f0
   357a0:	30fff04f 	.word	0x30fff04f
   357a4:	4b06e76b 	.word	0x4b06e76b
   357a8:	601c2008 	.word	0x601c2008
   357ac:	f962f7f0 	.word	0xf962f7f0
   357b0:	f0036838 	.word	0xf0036838
   357b4:	f04ffd59 	.word	0xf04ffd59
   357b8:	e76030ff 	.word	0xe76030ff
   357bc:	20024eb8 	.word	0x20024eb8
   357c0:	20024ebc 	.word	0x20024ebc
   357c4:	2002a6d4 	.word	0x2002a6d4
   357c8:	20024e5c 	.word	0x20024e5c
   357cc:	20024ec0 	.word	0x20024ec0

000357d0 <unimplemented_method>:
   357d0:	b508b40f 	.word	0xb508b40f
   357d4:	f7f0202d 	.word	0xf7f0202d
   357d8:	e8bdf94d 	.word	0xe8bdf94d
   357dc:	f04f4008 	.word	0xf04f4008
   357e0:	b00430ff 	.word	0xb00430ff
   357e4:	bf004770 	.word	0xbf004770

000357e8 <bsd_platform_init>:
   357e8:	b093b5f0 	.word	0xb093b5f0
   357ec:	ff7cf003 	.word	0xff7cf003
   357f0:	d1522800 	.word	0xd1522800
   357f4:	a801492b 	.word	0xa801492b
   357f8:	ffeaf003 	.word	0xffeaf003
   357fc:	d14c2800 	.word	0xd14c2800
   35800:	fa44f7f0 	.word	0xfa44f7f0
   35804:	f82ef003 	.word	0xf82ef003
   35808:	d1462800 	.word	0xd1462800
   3580c:	f44f2320 	.word	0xf44f2320
   35810:	22084180 	.word	0x22084180
   35814:	5c40f44f 	.word	0x5c40f44f
   35818:	4e244f23 	.word	0x4e244f23
   3581c:	93059303 	.word	0x93059303
   35820:	4d239307 	.word	0x4d239307
   35824:	910d9109 	.word	0x910d9109
   35828:	49234c22 	.word	0x49234c22
   3582c:	e9cd4b23 	.word	0xe9cd4b23
   35830:	eb0d0010 	.word	0xeb0d0010
   35834:	f8cd0002 	.word	0xf8cd0002
   35838:	e9cdc02c 	.word	0xe9cdc02c
   3583c:	9702220e 	.word	0x9702220e
   35840:	95069604 	.word	0x95069604
   35844:	910a9408 	.word	0x910a9408
   35848:	f7f8930c 	.word	0xf7f8930c
   3584c:	b108fdc9 	.word	0xb108fdc9
   35850:	bdf0b013 	.word	0xbdf0b013
   35854:	fd22f7fc 	.word	0xfd22f7fc
   35858:	f7f8b9f8 	.word	0xf7f8b9f8
   3585c:	b9e0f8b9 	.word	0xb9e0f8b9
   35860:	fff8f7fc 	.word	0xfff8f7fc
   35864:	f7fab9c8 	.word	0xf7fab9c8
   35868:	b9b0f8fd 	.word	0xb9b0f8fd
   3586c:	fcd6f7ff 	.word	0xfcd6f7ff
   35870:	f7f7b998 	.word	0xf7f7b998
   35874:	b980feaf 	.word	0xb980feaf
   35878:	f8f2f000 	.word	0xf8f2f000
   3587c:	f005b968 	.word	0xf005b968
   35880:	b950f929 	.word	0xb950f929
   35884:	fc30f7ff 	.word	0xfc30f7ff
   35888:	f7f8b938 	.word	0xf7f8b938
   3588c:	3000faa5 	.word	0x3000faa5
   35890:	2001bf18 	.word	0x2001bf18
   35894:	b0134240 	.word	0xb0134240
   35898:	f04fbdf0 	.word	0xf04fbdf0
   3589c:	b01330ff 	.word	0xb01330ff
   358a0:	bf00bdf0 	.word	0xbf00bdf0
   358a4:	0004b7e0 	.word	0x0004b7e0
   358a8:	20010000 	.word	0x20010000
   358ac:	20010040 	.word	0x20010040
   358b0:	20010020 	.word	0x20010020
   358b4:	20017060 	.word	0x20017060
   358b8:	20010060 	.word	0x20010060
   358bc:	20013060 	.word	0x20013060

000358c0 <bsd_platform_shutdown>:
   358c0:	f000b508 	.word	0xf000b508
   358c4:	f7f7f913 	.word	0xf7f7f913
   358c8:	f7fcff07 	.word	0xf7fcff07
   358cc:	f7f8fe8f 	.word	0xf7f8fe8f
   358d0:	2000fdef 	.word	0x2000fdef
   358d4:	bf00bd08 	.word	0xbf00bd08

000358d8 <bsd_platform_af_method_table_get>:
   358d8:	d02a2805 	.word	0xd02a2805
   358dc:	d914b508 	.word	0xd914b508
   358e0:	d016280a 	.word	0xd016280a
   358e4:	d10b2866 	.word	0xd10b2866
   358e8:	2302f240 	.word	0x2302f240
   358ec:	d032429a 	.word	0xd032429a
   358f0:	2305f240 	.word	0x2305f240
   358f4:	d032429a 	.word	0xd032429a
   358f8:	2301f240 	.word	0x2301f240
   358fc:	d02c429a 	.word	0xd02c429a
   35900:	f7f02016 	.word	0xf7f02016
   35904:	2000f8b7 	.word	0x2000f8b7
   35908:	2801bd08 	.word	0x2801bd08
   3590c:	2802d016 	.word	0x2802d016
   35910:	f5a2d1f6 	.word	0xf5a2d1f6
   35914:	2a0a7282 	.word	0x2a0a7282
   35918:	2301d819 	.word	0x2301d819
   3591c:	4103f240 	.word	0x4103f240
   35920:	fa034810 	.word	0xfa034810
   35924:	420af202 	.word	0x420af202
   35928:	0328f100 	.word	0x0328f100
   3592c:	4618bf18 	.word	0x4618bf18
   35930:	2903bd08 	.word	0x2903bd08
   35934:	bf18480c 	.word	0xbf18480c
   35938:	47702000 	.word	0x47702000
   3593c:	2303f240 	.word	0x2303f240
   35940:	d006429a 	.word	0xd006429a
   35944:	7f01f5b2 	.word	0x7f01f5b2
   35948:	4808d1da 	.word	0x4808d1da
   3594c:	4805bd08 	.word	0x4805bd08
   35950:	4807bd08 	.word	0x4807bd08
   35954:	4807bd08 	.word	0x4807bd08
   35958:	4807bd08 	.word	0x4807bd08
   3595c:	4807bd08 	.word	0x4807bd08
   35960:	bf00bd08 	.word	0xbf00bd08
   35964:	0004b6ac 	.word	0x0004b6ac
   35968:	0004b79c 	.word	0x0004b79c
   3596c:	0004b74c 	.word	0x0004b74c
   35970:	0004b6fc 	.word	0x0004b6fc
   35974:	0004b724 	.word	0x0004b724
   35978:	0004b684 	.word	0x0004b684
   3597c:	0004b774 	.word	0x0004b774

00035980 <bsd_platform_fd_method_table_get>:
   35980:	4605b538 	.word	0x4605b538
   35984:	fda6f7fc 	.word	0xfda6f7fc
   35988:	b9504604 	.word	0xb9504604
   3598c:	43ab4b2a 	.word	0x43ab4b2a
   35990:	4b2ad032 	.word	0x4b2ad032
   35994:	d04343ab 	.word	0xd04343ab
   35998:	43ab4b29 	.word	0x43ab4b29
   3599c:	4829d146 	.word	0x4829d146
   359a0:	68c3bd38 	.word	0x68c3bd38
   359a4:	2b056942 	.word	0x2b056942
   359a8:	d911d034 	.word	0xd911d034
   359ac:	d0132b0a 	.word	0xd0132b0a
   359b0:	d12a2b66 	.word	0xd12a2b66
   359b4:	2302f240 	.word	0x2302f240
   359b8:	d031429a 	.word	0xd031429a
   359bc:	2305f240 	.word	0x2305f240
   359c0:	d031429a 	.word	0xd031429a
   359c4:	2301f240 	.word	0x2301f240
   359c8:	d11e429a 	.word	0xd11e429a
   359cc:	bd38481e 	.word	0xbd38481e
   359d0:	d0132b01 	.word	0xd0132b01
   359d4:	d1182b02 	.word	0xd1182b02
   359d8:	7282f5a2 	.word	0x7282f5a2
   359dc:	d8212a0a 	.word	0xd8212a0a
   359e0:	f2402301 	.word	0xf2402301
   359e4:	48194103 	.word	0x48194103
   359e8:	f202fa03 	.word	0xf202fa03
   359ec:	f100420a 	.word	0xf100420a
   359f0:	bf180428 	.word	0xbf180428
   359f4:	bd384620 	.word	0xbd384620
   359f8:	bd384815 	.word	0xbd384815
   359fc:	2303f240 	.word	0x2303f240
   35a00:	d0f9429a 	.word	0xd0f9429a
   35a04:	7f01f5b2 	.word	0x7f01f5b2
   35a08:	2016d0c9 	.word	0x2016d0c9
   35a0c:	f832f7f0 	.word	0xf832f7f0
   35a10:	bd382000 	.word	0xbd382000
   35a14:	480f6903 	.word	0x480f6903
   35a18:	bf182b03 	.word	0xbf182b03
   35a1c:	bd382000 	.word	0xbd382000
   35a20:	bd38480d 	.word	0xbd38480d
   35a24:	bd384809 	.word	0xbd384809
   35a28:	bd38480c 	.word	0xbd38480c
   35a2c:	f7f02009 	.word	0xf7f02009
   35a30:	4620f821 	.word	0x4620f821
   35a34:	bf00bd38 	.word	0xbf00bd38
   35a38:	49765432 	.word	0x49765432
   35a3c:	789a0000 	.word	0x789a0000
   35a40:	49765443 	.word	0x49765443
   35a44:	0004b74c 	.word	0x0004b74c
   35a48:	0004b684 	.word	0x0004b684
   35a4c:	0004b6ac 	.word	0x0004b6ac
   35a50:	0004b6fc 	.word	0x0004b6fc
   35a54:	0004b79c 	.word	0x0004b79c
   35a58:	0004b724 	.word	0x0004b724
   35a5c:	0004b774 	.word	0x0004b774

00035a60 <nrf_inbuilt_key_init>:
   35a60:	b086b570 	.word	0xb086b570
   35a64:	a802491d 	.word	0xa802491d
   35a68:	feb2f003 	.word	0xfeb2f003
   35a6c:	4601bb00 	.word	0x4601bb00
   35a70:	f2404604 	.word	0xf2404604
   35a74:	20662201 	.word	0x20662201
   35a78:	ffacf7f7 	.word	0xffacf7f7
   35a7c:	28004e18 	.word	0x28004e18
   35a80:	60304605 	.word	0x60304605
   35a84:	4817db10 	.word	0x4817db10
   35a88:	feccf00b 	.word	0xfeccf00b
   35a8c:	46024623 	.word	0x46024623
   35a90:	46284914 	.word	0x46284914
   35a94:	94009401 	.word	0x94009401
   35a98:	ff46f7f7 	.word	0xff46f7f7
   35a9c:	48114605 	.word	0x48114605
   35aa0:	fec0f00b 	.word	0xfec0f00b
   35aa4:	d00742a8 	.word	0xd00742a8
   35aa8:	46202405 	.word	0x46202405
   35aac:	bd70b006 	.word	0xbd70b006
   35ab0:	46202469 	.word	0x46202469
   35ab4:	bd70b006 	.word	0xbd70b006
   35ab8:	e9cd6830 	.word	0xe9cd6830
   35abc:	a9034400 	.word	0xa9034400
   35ac0:	220a4623 	.word	0x220a4623
   35ac4:	f818f7f8 	.word	0xf818f7f8
   35ac8:	dded2801 	.word	0xdded2801
   35acc:	2202a803 	.word	0x2202a803
   35ad0:	f00b4905 	.word	0xf00b4905
   35ad4:	2800fed5 	.word	0x2800fed5
   35ad8:	e7e5d0e7 	.word	0xe7e5d0e7
   35adc:	20031b94 	.word	0x20031b94
   35ae0:	20031b90 	.word	0x20031b90
   35ae4:	0004b7f4 	.word	0x0004b7f4
   35ae8:	0004b3d4 	.word	0x0004b3d4

00035aec <nrf_inbuilt_key_deinit>:
   35aec:	4c05b510 	.word	0x4c05b510
   35af0:	28006820 	.word	0x28006820
   35af4:	f7f7db01 	.word	0xf7f7db01
   35af8:	f04fffb7 	.word	0xf04fffb7
   35afc:	200033ff 	.word	0x200033ff
   35b00:	bd106023 	.word	0xbd106023
   35b04:	20031b90 	.word	0x20031b90

00035b08 <symbol_0005436>:
   35b08:	460a4b02 	.word	0x460a4b02
   35b0c:	2100681b 	.word	0x2100681b
   35b10:	bf004718 	.word	0xbf004718
   35b14:	20031ba8 	.word	0x20031ba8

00035b18 <mpi_mul_hlp>:
   35b18:	e92d280f 	.word	0xe92d280f
   35b1c:	46864ff0 	.word	0x46864ff0
   35b20:	82e0f240 	.word	0x82e0f240
   35b24:	0800f04f 	.word	0x0800f04f
   35b28:	f1014684 	.word	0xf1014684
   35b2c:	f1020440 	.word	0xf1020440
   35b30:	f8540040 	.word	0xf8540040
   35b34:	f8506c40 	.word	0xf8506c40
   35b38:	fba35c40 	.word	0xfba35c40
   35b3c:	eb186706 	.word	0xeb186706
   35b40:	bf2c0806 	.word	0xbf2c0806
   35b44:	0901f04f 	.word	0x0901f04f
   35b48:	0900f04f 	.word	0x0900f04f
   35b4c:	0508eb15 	.word	0x0508eb15
   35b50:	f04f444f 	.word	0xf04f444f
   35b54:	bf280900 	.word	0xbf280900
   35b58:	0901f04f 	.word	0x0901f04f
   35b5c:	5c40f840 	.word	0x5c40f840
   35b60:	6c3cf854 	.word	0x6c3cf854
   35b64:	fba344b9 	.word	0xfba344b9
   35b68:	eb19ab06 	.word	0xeb19ab06
   35b6c:	bf2c090a 	.word	0xbf2c090a
   35b70:	0801f04f 	.word	0x0801f04f
   35b74:	0800f04f 	.word	0x0800f04f
   35b78:	6c3cf850 	.word	0x6c3cf850
   35b7c:	050beb08 	.word	0x050beb08
   35b80:	0609eb16 	.word	0x0609eb16
   35b84:	0800f04f 	.word	0x0800f04f
   35b88:	f04fbf28 	.word	0xf04fbf28
   35b8c:	f8400801 	.word	0xf8400801
   35b90:	f8546c3c 	.word	0xf8546c3c
   35b94:	44a86c38 	.word	0x44a86c38
   35b98:	6706fba3 	.word	0x6706fba3
   35b9c:	0806eb18 	.word	0x0806eb18
   35ba0:	f04fbf2c 	.word	0xf04fbf2c
   35ba4:	f04f0901 	.word	0xf04f0901
   35ba8:	f8500900 	.word	0xf8500900
   35bac:	444f5c38 	.word	0x444f5c38
   35bb0:	0508eb15 	.word	0x0508eb15
   35bb4:	0900f04f 	.word	0x0900f04f
   35bb8:	f04fbf28 	.word	0xf04fbf28
   35bbc:	f8400901 	.word	0xf8400901
   35bc0:	f8545c38 	.word	0xf8545c38
   35bc4:	44b96c34 	.word	0x44b96c34
   35bc8:	ab06fba3 	.word	0xab06fba3
   35bcc:	090aeb19 	.word	0x090aeb19
   35bd0:	f04fbf2c 	.word	0xf04fbf2c
   35bd4:	f04f0801 	.word	0xf04f0801
   35bd8:	f8500800 	.word	0xf8500800
   35bdc:	eb086c34 	.word	0xeb086c34
   35be0:	eb16050b 	.word	0xeb16050b
   35be4:	f04f0609 	.word	0xf04f0609
   35be8:	bf280800 	.word	0xbf280800
   35bec:	0801f04f 	.word	0x0801f04f
   35bf0:	6c34f840 	.word	0x6c34f840
   35bf4:	6c30f854 	.word	0x6c30f854
   35bf8:	fba344a8 	.word	0xfba344a8
   35bfc:	eb186706 	.word	0xeb186706
   35c00:	bf2c0806 	.word	0xbf2c0806
   35c04:	0901f04f 	.word	0x0901f04f
   35c08:	0900f04f 	.word	0x0900f04f
   35c0c:	5c30f850 	.word	0x5c30f850
   35c10:	eb15444f 	.word	0xeb15444f
   35c14:	f04f0508 	.word	0xf04f0508
   35c18:	bf280900 	.word	0xbf280900
   35c1c:	0901f04f 	.word	0x0901f04f
   35c20:	5c30f840 	.word	0x5c30f840
   35c24:	6c2cf854 	.word	0x6c2cf854
   35c28:	fba344b9 	.word	0xfba344b9
   35c2c:	eb19ab06 	.word	0xeb19ab06
   35c30:	bf2c090a 	.word	0xbf2c090a
   35c34:	0801f04f 	.word	0x0801f04f
   35c38:	0800f04f 	.word	0x0800f04f
   35c3c:	6c2cf850 	.word	0x6c2cf850
   35c40:	050beb08 	.word	0x050beb08
   35c44:	0609eb16 	.word	0x0609eb16
   35c48:	0800f04f 	.word	0x0800f04f
   35c4c:	f04fbf28 	.word	0xf04fbf28
   35c50:	f8400801 	.word	0xf8400801
   35c54:	f8546c2c 	.word	0xf8546c2c
   35c58:	44a86c28 	.word	0x44a86c28
   35c5c:	6706fba3 	.word	0x6706fba3
   35c60:	0806eb18 	.word	0x0806eb18
   35c64:	f04fbf2c 	.word	0xf04fbf2c
   35c68:	f04f0901 	.word	0xf04f0901
   35c6c:	f8500900 	.word	0xf8500900
   35c70:	444f5c28 	.word	0x444f5c28
   35c74:	0508eb15 	.word	0x0508eb15
   35c78:	0900f04f 	.word	0x0900f04f
   35c7c:	f04fbf28 	.word	0xf04fbf28
   35c80:	f8400901 	.word	0xf8400901
   35c84:	f8545c28 	.word	0xf8545c28
   35c88:	44b96c24 	.word	0x44b96c24
   35c8c:	ab06fba3 	.word	0xab06fba3
   35c90:	090aeb19 	.word	0x090aeb19
   35c94:	f04fbf2c 	.word	0xf04fbf2c
   35c98:	f04f0801 	.word	0xf04f0801
   35c9c:	f8500800 	.word	0xf8500800
   35ca0:	eb086c24 	.word	0xeb086c24
   35ca4:	eb16050b 	.word	0xeb16050b
   35ca8:	f04f0609 	.word	0xf04f0609
   35cac:	bf280800 	.word	0xbf280800
   35cb0:	0801f04f 	.word	0x0801f04f
   35cb4:	6c24f840 	.word	0x6c24f840
   35cb8:	6c20f854 	.word	0x6c20f854
   35cbc:	fba344a8 	.word	0xfba344a8
   35cc0:	eb186706 	.word	0xeb186706
   35cc4:	bf2c0806 	.word	0xbf2c0806
   35cc8:	0901f04f 	.word	0x0901f04f
   35ccc:	0900f04f 	.word	0x0900f04f
   35cd0:	5c20f850 	.word	0x5c20f850
   35cd4:	eb15444f 	.word	0xeb15444f
   35cd8:	f04f0508 	.word	0xf04f0508
   35cdc:	bf280900 	.word	0xbf280900
   35ce0:	0901f04f 	.word	0x0901f04f
   35ce4:	5c20f840 	.word	0x5c20f840
   35ce8:	6c1cf854 	.word	0x6c1cf854
   35cec:	fba344b9 	.word	0xfba344b9
   35cf0:	eb19ab06 	.word	0xeb19ab06
   35cf4:	bf2c090a 	.word	0xbf2c090a
   35cf8:	0801f04f 	.word	0x0801f04f
   35cfc:	0800f04f 	.word	0x0800f04f
   35d00:	6c1cf850 	.word	0x6c1cf850
   35d04:	050beb08 	.word	0x050beb08
   35d08:	0609eb16 	.word	0x0609eb16
   35d0c:	0800f04f 	.word	0x0800f04f
   35d10:	f04fbf28 	.word	0xf04fbf28
   35d14:	f8400801 	.word	0xf8400801
   35d18:	f8546c1c 	.word	0xf8546c1c
   35d1c:	44a86c18 	.word	0x44a86c18
   35d20:	6706fba3 	.word	0x6706fba3
   35d24:	0806eb18 	.word	0x0806eb18
   35d28:	f04fbf2c 	.word	0xf04fbf2c
   35d2c:	f04f0901 	.word	0xf04f0901
   35d30:	f8500900 	.word	0xf8500900
   35d34:	444f5c18 	.word	0x444f5c18
   35d38:	0508eb15 	.word	0x0508eb15
   35d3c:	0900f04f 	.word	0x0900f04f
   35d40:	f04fbf28 	.word	0xf04fbf28
   35d44:	f8400901 	.word	0xf8400901
   35d48:	f8545c18 	.word	0xf8545c18
   35d4c:	44b96c14 	.word	0x44b96c14
   35d50:	ab06fba3 	.word	0xab06fba3
   35d54:	090aeb19 	.word	0x090aeb19
   35d58:	f04fbf2c 	.word	0xf04fbf2c
   35d5c:	f04f0801 	.word	0xf04f0801
   35d60:	f8500800 	.word	0xf8500800
   35d64:	eb086c14 	.word	0xeb086c14
   35d68:	eb16050b 	.word	0xeb16050b
   35d6c:	f04f0609 	.word	0xf04f0609
   35d70:	bf280800 	.word	0xbf280800
   35d74:	0801f04f 	.word	0x0801f04f
   35d78:	6c14f840 	.word	0x6c14f840
   35d7c:	6c10f854 	.word	0x6c10f854
   35d80:	fba344a8 	.word	0xfba344a8
   35d84:	eb186706 	.word	0xeb186706
   35d88:	bf2c0806 	.word	0xbf2c0806
   35d8c:	0901f04f 	.word	0x0901f04f
   35d90:	0900f04f 	.word	0x0900f04f
   35d94:	5c10f850 	.word	0x5c10f850
   35d98:	eb15444f 	.word	0xeb15444f
   35d9c:	f04f0508 	.word	0xf04f0508
   35da0:	bf280900 	.word	0xbf280900
   35da4:	0901f04f 	.word	0x0901f04f
   35da8:	5c10f840 	.word	0x5c10f840
   35dac:	6c0cf854 	.word	0x6c0cf854
   35db0:	fba344b9 	.word	0xfba344b9
   35db4:	eb19ab06 	.word	0xeb19ab06
   35db8:	bf2c090a 	.word	0xbf2c090a
   35dbc:	0801f04f 	.word	0x0801f04f
   35dc0:	0800f04f 	.word	0x0800f04f
   35dc4:	6c0cf850 	.word	0x6c0cf850
   35dc8:	050beb08 	.word	0x050beb08
   35dcc:	0609eb16 	.word	0x0609eb16
   35dd0:	0800f04f 	.word	0x0800f04f
   35dd4:	f04fbf28 	.word	0xf04fbf28
   35dd8:	f8400801 	.word	0xf8400801
   35ddc:	f8546c0c 	.word	0xf8546c0c
   35de0:	44a86c08 	.word	0x44a86c08
   35de4:	6706fba3 	.word	0x6706fba3
   35de8:	0806eb18 	.word	0x0806eb18
   35dec:	f04fbf2c 	.word	0xf04fbf2c
   35df0:	f04f0901 	.word	0xf04f0901
   35df4:	f8500900 	.word	0xf8500900
   35df8:	444f5c08 	.word	0x444f5c08
   35dfc:	0508eb15 	.word	0x0508eb15
   35e00:	0900f04f 	.word	0x0900f04f
   35e04:	f04fbf28 	.word	0xf04fbf28
   35e08:	f8400901 	.word	0xf8400901
   35e0c:	f8545c08 	.word	0xf8545c08
   35e10:	44b96c04 	.word	0x44b96c04
   35e14:	ab06fba3 	.word	0xab06fba3
   35e18:	090aeb19 	.word	0x090aeb19
   35e1c:	f04fbf2c 	.word	0xf04fbf2c
   35e20:	f04f0801 	.word	0xf04f0801
   35e24:	f8500800 	.word	0xf8500800
   35e28:	eb086c04 	.word	0xeb086c04
   35e2c:	eb16050b 	.word	0xeb16050b
   35e30:	f04f0609 	.word	0xf04f0609
   35e34:	bf280800 	.word	0xbf280800
   35e38:	0801f04f 	.word	0x0801f04f
   35e3c:	0c10f1ac 	.word	0x0c10f1ac
   35e40:	0f0ff1bc 	.word	0x0f0ff1bc
   35e44:	6c04f840 	.word	0x6c04f840
   35e48:	f10444a8 	.word	0xf10444a8
   35e4c:	f1000440 	.word	0xf1000440
   35e50:	f63f0040 	.word	0xf63f0040
   35e54:	f1aeae6e 	.word	0xf1aeae6e
   35e58:	09000010 	.word	0x09000010
   35e5c:	01803001 	.word	0x01803001
   35e60:	44024401 	.word	0x44024401
   35e64:	000ff00e 	.word	0x000ff00e
   35e68:	68172807 	.word	0x68172807
   35e6c:	8092f240 	.word	0x8092f240
   35e70:	6856680c 	.word	0x6856680c
   35e74:	9a04fba3 	.word	0x9a04fba3
   35e78:	0809eb18 	.word	0x0809eb18
   35e7c:	f04fbf2c 	.word	0xf04fbf2c
   35e80:	f04f0c01 	.word	0xf04f0c01
   35e84:	eb170c00 	.word	0xeb170c00
   35e88:	bf2c0708 	.word	0xbf2c0708
   35e8c:	24002401 	.word	0x24002401
   35e90:	684f6017 	.word	0x684f6017
   35e94:	050ceb0a 	.word	0x050ceb0a
   35e98:	8907fba3 	.word	0x8907fba3
   35e9c:	eb14442c 	.word	0xeb14442c
   35ea0:	bf2c0408 	.word	0xbf2c0408
   35ea4:	25002501 	.word	0x25002501
   35ea8:	eb0519a6 	.word	0xeb0519a6
   35eac:	f04f0709 	.word	0xf04f0709
   35eb0:	bf280500 	.word	0xbf280500
   35eb4:	60562501 	.word	0x60562501
   35eb8:	443d688e 	.word	0x443d688e
   35ebc:	7806fba3 	.word	0x7806fba3
   35ec0:	bf2c19ed 	.word	0xbf2c19ed
   35ec4:	24002401 	.word	0x24002401
   35ec8:	eb086896 	.word	0xeb086896
   35ecc:	19ad0704 	.word	0x19ad0704
   35ed0:	0400f04f 	.word	0x0400f04f
   35ed4:	2401bf28 	.word	0x2401bf28
   35ed8:	68ce6095 	.word	0x68ce6095
   35edc:	fba3443c 	.word	0xfba3443c
   35ee0:	19e47806 	.word	0x19e47806
   35ee4:	2501bf2c 	.word	0x2501bf2c
   35ee8:	68d62500 	.word	0x68d62500
   35eec:	0705eb08 	.word	0x0705eb08
   35ef0:	f04f19a4 	.word	0xf04f19a4
   35ef4:	bf280500 	.word	0xbf280500
   35ef8:	60d42501 	.word	0x60d42501
   35efc:	443d690e 	.word	0x443d690e
   35f00:	7806fba3 	.word	0x7806fba3
   35f04:	bf2c19ed 	.word	0xbf2c19ed
   35f08:	24002401 	.word	0x24002401
   35f0c:	eb086916 	.word	0xeb086916
   35f10:	19ad0704 	.word	0x19ad0704
   35f14:	0400f04f 	.word	0x0400f04f
   35f18:	2401bf28 	.word	0x2401bf28
   35f1c:	694e6115 	.word	0x694e6115
   35f20:	fba3443c 	.word	0xfba3443c
   35f24:	19e47806 	.word	0x19e47806
   35f28:	2501bf2c 	.word	0x2501bf2c
   35f2c:	69562500 	.word	0x69562500
   35f30:	0705eb08 	.word	0x0705eb08
   35f34:	f04f19a4 	.word	0xf04f19a4
   35f38:	bf280500 	.word	0xbf280500
   35f3c:	61542501 	.word	0x61542501
   35f40:	443d698e 	.word	0x443d698e
   35f44:	7806fba3 	.word	0x7806fba3
   35f48:	bf2c19ed 	.word	0xbf2c19ed
   35f4c:	24002401 	.word	0x24002401
   35f50:	eb086996 	.word	0xeb086996
   35f54:	19ad0704 	.word	0x19ad0704
   35f58:	0400f04f 	.word	0x0400f04f
   35f5c:	2401bf28 	.word	0x2401bf28
   35f60:	69ce6195 	.word	0x69ce6195
   35f64:	fba3443c 	.word	0xfba3443c
   35f68:	eb149a06 	.word	0xeb149a06
   35f6c:	bf2c0409 	.word	0xbf2c0409
   35f70:	0801f04f 	.word	0x0801f04f
   35f74:	0800f04f 	.word	0x0800f04f
   35f78:	eb0869d6 	.word	0xeb0869d6
   35f7c:	19a4050a 	.word	0x19a4050a
   35f80:	0800f04f 	.word	0x0800f04f
   35f84:	f04fbf28 	.word	0xf04fbf28
   35f88:	61d40801 	.word	0x61d40801
   35f8c:	44a83120 	.word	0x44a83120
   35f90:	32203808 	.word	0x32203808
   35f94:	f0002800 	.word	0xf0002800
   35f98:	680c8097 	.word	0x680c8097
   35f9c:	fba36816 	.word	0xfba36816
   35fa0:	eb199a04 	.word	0xeb199a04
   35fa4:	bf2c0808 	.word	0xbf2c0808
   35fa8:	24002401 	.word	0x24002401
   35fac:	0608eb16 	.word	0x0608eb16
   35fb0:	0500f04f 	.word	0x0500f04f
   35fb4:	2501bf28 	.word	0x2501bf28
   35fb8:	28014454 	.word	0x28014454
   35fbc:	0804eb05 	.word	0x0804eb05
   35fc0:	d07f6016 	.word	0xd07f6016
   35fc4:	6856684c 	.word	0x6856684c
   35fc8:	9a04fba3 	.word	0x9a04fba3
   35fcc:	0808eb19 	.word	0x0808eb19
   35fd0:	2401bf2c 	.word	0x2401bf2c
   35fd4:	eb162400 	.word	0xeb162400
   35fd8:	f04f0608 	.word	0xf04f0608
   35fdc:	bf280500 	.word	0xbf280500
   35fe0:	44542501 	.word	0x44542501
   35fe4:	eb052802 	.word	0xeb052802
   35fe8:	60560804 	.word	0x60560804
   35fec:	688cd06a 	.word	0x688cd06a
   35ff0:	fba36896 	.word	0xfba36896
   35ff4:	eb199a04 	.word	0xeb199a04
   35ff8:	bf2c0808 	.word	0xbf2c0808
   35ffc:	24002401 	.word	0x24002401
   36000:	0608eb16 	.word	0x0608eb16
   36004:	0500f04f 	.word	0x0500f04f
   36008:	2501bf28 	.word	0x2501bf28
   3600c:	28034454 	.word	0x28034454
   36010:	0804eb05 	.word	0x0804eb05
   36014:	d0556096 	.word	0xd0556096
   36018:	68d668cc 	.word	0x68d668cc
   3601c:	9a04fba3 	.word	0x9a04fba3
   36020:	0808eb19 	.word	0x0808eb19
   36024:	2401bf2c 	.word	0x2401bf2c
   36028:	eb162400 	.word	0xeb162400
   3602c:	f04f0608 	.word	0xf04f0608
   36030:	bf280500 	.word	0xbf280500
   36034:	44542501 	.word	0x44542501
   36038:	eb052804 	.word	0xeb052804
   3603c:	60d60804 	.word	0x60d60804
   36040:	690cd040 	.word	0x690cd040
   36044:	fba36916 	.word	0xfba36916
   36048:	eb199a04 	.word	0xeb199a04
   3604c:	bf2c0408 	.word	0xbf2c0408
   36050:	0801f04f 	.word	0x0801f04f
   36054:	0800f04f 	.word	0x0800f04f
   36058:	eb0a19a6 	.word	0xeb0a19a6
   3605c:	f04f0508 	.word	0xf04f0508
   36060:	bf280800 	.word	0xbf280800
   36064:	0801f04f 	.word	0x0801f04f
   36068:	44a82805 	.word	0x44a82805
   3606c:	d0296116 	.word	0xd0296116
   36070:	6956694c 	.word	0x6956694c
   36074:	9a04fba3 	.word	0x9a04fba3
   36078:	0409eb18 	.word	0x0409eb18
   3607c:	f04fbf2c 	.word	0xf04fbf2c
   36080:	f04f0801 	.word	0xf04f0801
   36084:	19a60800 	.word	0x19a60800
   36088:	0508eb0a 	.word	0x0508eb0a
   3608c:	0800f04f 	.word	0x0800f04f
   36090:	f04fbf28 	.word	0xf04fbf28
   36094:	28060801 	.word	0x28060801
   36098:	615644a8 	.word	0x615644a8
   3609c:	698cd012 	.word	0x698cd012
   360a0:	fba36991 	.word	0xfba36991
   360a4:	eb144504 	.word	0xeb144504
   360a8:	bf2c0808 	.word	0xbf2c0808
   360ac:	23002301 	.word	0x23002301
   360b0:	0108eb11 	.word	0x0108eb11
   360b4:	0400f04f 	.word	0x0400f04f
   360b8:	2401bf28 	.word	0x2401bf28
   360bc:	eb04442b 	.word	0xeb04442b
   360c0:	61910803 	.word	0x61910803
   360c4:	0280eb02 	.word	0x0280eb02
   360c8:	23006815 	.word	0x23006815
   360cc:	0508eb15 	.word	0x0508eb15
   360d0:	2301bf28 	.word	0x2301bf28
   360d4:	5b04f842 	.word	0x5b04f842
   360d8:	0801f04f 	.word	0x0801f04f
   360dc:	d1f32b00 	.word	0xd1f32b00
   360e0:	8ff0e8bd 	.word	0x8ff0e8bd
   360e4:	0800f04f 	.word	0x0800f04f
   360e8:	bf00e6be 	.word	0xbf00e6be

000360ec <symbol_0002616>:
   360ec:	2b006843 	.word	0x2b006843
   360f0:	b430d033 	.word	0xb430d033
   360f4:	4280f103 	.word	0x4280f103
   360f8:	3a016885 	.word	0x3a016885
   360fc:	4022f855 	.word	0x4022f855
   36100:	0282eb05 	.word	0x0282eb05
   36104:	e009b11c 	.word	0xe009b11c
   36108:	4d04f852 	.word	0x4d04f852
   3610c:	3b01b934 	.word	0x3b01b934
   36110:	688bd1fa 	.word	0x688bd1fa
   36114:	b9d06818 	.word	0xb9d06818
   36118:	4770bc30 	.word	0x4770bc30
   3611c:	6812688a 	.word	0x6812688a
   36120:	2b01b192 	.word	0x2b01b192
   36124:	6800d810 	.word	0x6800d810
   36128:	2800680b 	.word	0x2800680b
   3612c:	2b00dd01 	.word	0x2b00dd01
   36130:	2b00db11 	.word	0x2b00db11
   36134:	2800dd01 	.word	0x2800dd01
   36138:	682bdb16 	.word	0x682bdb16
   3613c:	d8eb4293 	.word	0xd8eb4293
   36140:	bc30d306 	.word	0xbc30d306
   36144:	47702000 	.word	0x47702000
   36148:	bc306800 	.word	0xbc306800
   3614c:	68084770 	.word	0x68084770
   36150:	bc304240 	.word	0xbc304240
   36154:	20014770 	.word	0x20014770
   36158:	688be7de 	.word	0x688be7de
   3615c:	b9006818 	.word	0xb9006818
   36160:	68084770 	.word	0x68084770
   36164:	e7fb4240 	.word	0xe7fb4240
   36168:	30fff04f 	.word	0x30fff04f
   3616c:	bf00e7d4 	.word	0xbf00e7d4

00036170 <symbol_00038d0>:
   36170:	2300b120 	.word	0x2300b120
   36174:	e9c02201 	.word	0xe9c02201
   36178:	60832300 	.word	0x60832300
   3617c:	bf004770 	.word	0xbf004770

00036180 <symbol_000fb6e>:
   36180:	b510b1b0 	.word	0xb510b1b0
   36184:	68804604 	.word	0x68804604
   36188:	6862b160 	.word	0x6862b160
   3618c:	b13a1e53 	.word	0xb13a1e53
   36190:	3b012200 	.word	0x3b012200
   36194:	60021c59 	.word	0x60021c59
   36198:	0004f100 	.word	0x0004f100
   3619c:	68a0d1f9 	.word	0x68a0d1f9
   361a0:	fc4ef003 	.word	0xfc4ef003
   361a4:	22012300 	.word	0x22012300
   361a8:	2300e9c4 	.word	0x2300e9c4
   361ac:	bd1060a3 	.word	0xbd1060a3
   361b0:	bf004770 	.word	0xbf004770

000361b4 <symbol_0006423>:
   361b4:	6842b570 	.word	0x6842b570
   361b8:	428a4605 	.word	0x428a4605
   361bc:	d807460c 	.word	0xd807460c
   361c0:	7310f242 	.word	0x7310f242
   361c4:	d8514299 	.word	0xd8514299
   361c8:	d335428a 	.word	0xd335428a
   361cc:	bd702000 	.word	0xbd702000
   361d0:	d0101e51 	.word	0xd0101e51
   361d4:	f8536883 	.word	0xf8536883
   361d8:	28000021 	.word	0x28000021
   361dc:	f102d149 	.word	0xf102d149
   361e0:	3a014280 	.word	0x3a014280
   361e4:	0382eb03 	.word	0x0382eb03
   361e8:	f853e003 	.word	0xf853e003
   361ec:	b9180d04 	.word	0xb9180d04
   361f0:	1e4a4611 	.word	0x1e4a4611
   361f4:	2101d1f9 	.word	0x2101d1f9
   361f8:	bf38428c 	.word	0xbf38428c
   361fc:	2104460c 	.word	0x2104460c
   36200:	f0034620 	.word	0xf0034620
   36204:	4606fc09 	.word	0x4606fc09
   36208:	68a9b380 	.word	0x68a9b380
   3620c:	00a2b181 	.word	0x00a2b181
   36210:	fe4ef7e3 	.word	0xfe4ef7e3
   36214:	2001e9d5 	.word	0x2001e9d5
   36218:	b13a1e53 	.word	0xb13a1e53
   3621c:	3b012200 	.word	0x3b012200
   36220:	60021c59 	.word	0x60021c59
   36224:	0004f100 	.word	0x0004f100
   36228:	68a8d1f9 	.word	0x68a8d1f9
   3622c:	fc08f003 	.word	0xfc08f003
   36230:	4601e9c5 	.word	0x4601e9c5
   36234:	bd702000 	.word	0xbd702000
   36238:	46202104 	.word	0x46202104
   3623c:	fbecf003 	.word	0xfbecf003
   36240:	b1984606 	.word	0xb1984606
   36244:	290068a9 	.word	0x290068a9
   36248:	686ad0f2 	.word	0x686ad0f2
   3624c:	f7e30092 	.word	0xf7e30092
   36250:	e9d5fe2f 	.word	0xe9d5fe2f
   36254:	1e532001 	.word	0x1e532001
   36258:	d0e72a00 	.word	0xd0e72a00
   3625c:	3b012200 	.word	0x3b012200
   36260:	60021c59 	.word	0x60021c59
   36264:	0004f100 	.word	0x0004f100
   36268:	e7ded1f9 	.word	0xe7ded1f9
   3626c:	000ff06f 	.word	0x000ff06f
   36270:	4611bd70 	.word	0x4611bd70
   36274:	bf00e7c0 	.word	0xbf00e7c0

00036278 <symbol_00084df>:
   36278:	d0524288 	.word	0xd0524288
   3627c:	688ab5f8 	.word	0x688ab5f8
   36280:	4605460e 	.word	0x4605460e
   36284:	d04e2a00 	.word	0xd04e2a00
   36288:	1e4b6849 	.word	0x1e4b6849
   3628c:	f852d00e 	.word	0xf852d00e
   36290:	28000023 	.word	0x28000023
   36294:	f101d13b 	.word	0xf101d13b
   36298:	39014180 	.word	0x39014180
   3629c:	0281eb02 	.word	0x0281eb02
   362a0:	f852e002 	.word	0xf852e002
   362a4:	bb900d04 	.word	0xbb900d04
   362a8:	d1fa3b01 	.word	0xd1fa3b01
   362ac:	68332401 	.word	0x68332401
   362b0:	686a602b 	.word	0x686a602b
   362b4:	d30c42a2 	.word	0xd30c42a2
   362b8:	009268af 	.word	0x009268af
   362bc:	46382100 	.word	0x46382100
   362c0:	febaf00a 	.word	0xfebaf00a
   362c4:	68b100a2 	.word	0x68b100a2
   362c8:	f7e368a8 	.word	0xf7e368a8
   362cc:	2000fdf1 	.word	0x2000fdf1
   362d0:	2104bdf8 	.word	0x2104bdf8
   362d4:	f0034620 	.word	0xf0034620
   362d8:	4607fb9f 	.word	0x4607fb9f
   362dc:	68a9b1f0 	.word	0x68a9b1f0
   362e0:	686ab189 	.word	0x686ab189
   362e4:	f7e30092 	.word	0xf7e30092
   362e8:	e9d5fde3 	.word	0xe9d5fde3
   362ec:	1e532001 	.word	0x1e532001
   362f0:	2200b13a 	.word	0x2200b13a
   362f4:	1c593b01 	.word	0x1c593b01
   362f8:	f1006002 	.word	0xf1006002
   362fc:	d1f90004 	.word	0xd1f90004
   36300:	f00368a8 	.word	0xf00368a8
   36304:	4622fb9d 	.word	0x4622fb9d
   36308:	4701e9c5 	.word	0x4701e9c5
   3630c:	f242e7d5 	.word	0xf242e7d5
   36310:	68317210 	.word	0x68317210
   36314:	42941c5c 	.word	0x42941c5c
   36318:	d9ca6029 	.word	0xd9ca6029
   3631c:	000ff06f 	.word	0x000ff06f
   36320:	2000bdf8 	.word	0x2000bdf8
   36324:	28004770 	.word	0x28004770
   36328:	6880d0d1 	.word	0x6880d0d1
   3632c:	6869b158 	.word	0x6869b158
   36330:	b1311e4b 	.word	0xb1311e4b
   36334:	1c5c3b01 	.word	0x1c5c3b01
   36338:	f1006002 	.word	0xf1006002
   3633c:	d1f90004 	.word	0xd1f90004
   36340:	f00368a8 	.word	0xf00368a8
   36344:	2000fb7d 	.word	0x2000fb7d
   36348:	e9c52301 	.word	0xe9c52301
   3634c:	60a83000 	.word	0x60a83000
   36350:	bf00bdf8 	.word	0xbf00bdf8

00036354 <symbol_000fa6b>:
   36354:	684bb5f0 	.word	0x684bb5f0
   36358:	b085460d 	.word	0xb085460d
   3635c:	46064614 	.word	0x46064614
   36360:	b17b6851 	.word	0xb17b6851
   36364:	f10368a8 	.word	0xf10368a8
   36368:	3a014280 	.word	0x3a014280
   3636c:	7022f850 	.word	0x7022f850
   36370:	0082eb00 	.word	0x0082eb00
   36374:	e04fb127 	.word	0xe04fb127
   36378:	2d04f850 	.word	0x2d04f850
   3637c:	d14b2a00 	.word	0xd14b2a00
   36380:	d1f93b01 	.word	0xd1f93b01
   36384:	f101b189 	.word	0xf101b189
   36388:	68a74080 	.word	0x68a74080
   3638c:	f8573801 	.word	0xf8573801
   36390:	2a002020 	.word	0x2a002020
   36394:	8099f040 	.word	0x8099f040
   36398:	0080eb07 	.word	0x0080eb07
   3639c:	f850e003 	.word	0xf850e003
   363a0:	2a002d04 	.word	0x2a002d04
   363a4:	3901d142 	.word	0x3901d142
   363a8:	2300d1f9 	.word	0x2300d1f9
   363ac:	42b42201 	.word	0x42b42201
   363b0:	2301e9cd 	.word	0x2301e9cd
   363b4:	d07f9303 	.word	0xd07f9303
   363b8:	d00542b5 	.word	0xd00542b5
   363bc:	46304629 	.word	0x46304629
   363c0:	ff5af7ff 	.word	0xff5af7ff
   363c4:	b9a84607 	.word	0xb9a84607
   363c8:	60332301 	.word	0x60332301
   363cc:	b1806860 	.word	0xb1806860
   363d0:	c008f8d4 	.word	0xc008f8d4
   363d4:	4380f100 	.word	0x4380f100
   363d8:	f85c3b01 	.word	0xf85c3b01
   363dc:	eb0c2023 	.word	0xeb0c2023
   363e0:	b1220383 	.word	0xb1220383
   363e4:	f853e042 	.word	0xf853e042
   363e8:	2a002d04 	.word	0x2a002d04
   363ec:	3801d13e 	.word	0x3801d13e
   363f0:	2700d1f9 	.word	0x2700d1f9
   363f4:	b1609803 	.word	0xb1609803
   363f8:	1e539a02 	.word	0x1e539a02
   363fc:	2200b13a 	.word	0x2200b13a
   36400:	1c593b01 	.word	0x1c593b01
   36404:	f1006002 	.word	0xf1006002
   36408:	d1f90004 	.word	0xd1f90004
   3640c:	f0039803 	.word	0xf0039803
   36410:	4638fb17 	.word	0x4638fb17
   36414:	bdf0b005 	.word	0xbdf0b005
   36418:	d0c62900 	.word	0xd0c62900
   3641c:	4080f101 	.word	0x4080f101
   36420:	380168a7 	.word	0x380168a7
   36424:	2020f857 	.word	0x2020f857
   36428:	d0b52a00 	.word	0xd0b52a00
   3642c:	d8bc428b 	.word	0xd8bc428b
   36430:	2b00d34b 	.word	0x2b00d34b
   36434:	68a8d0b9 	.word	0x68a8d0b9
   36438:	4180f103 	.word	0x4180f103
   3643c:	f8503901 	.word	0xf8503901
   36440:	f857c021 	.word	0xf857c021
   36444:	0089e021 	.word	0x0089e021
   36448:	440845e6 	.word	0x440845e6
   3644c:	0201eb07 	.word	0x0201eb07
   36450:	d83ad3ab 	.word	0xd83ad3ab
   36454:	e0064601 	.word	0xe0064601
   36458:	7d04f851 	.word	0x7d04f851
   3645c:	0d04f852 	.word	0x0d04f852
   36460:	d8a24287 	.word	0xd8a24287
   36464:	3b01d331 	.word	0x3b01d331
   36468:	e79ed1f6 	.word	0xe79ed1f6
   3646c:	462b2500 	.word	0x462b2500
   36470:	f85168b1 	.word	0xf85168b1
   36474:	35016b04 	.word	0x35016b04
   36478:	f8411af2 	.word	0xf8411af2
   3647c:	f85c2c04 	.word	0xf85c2c04
   36480:	460c7b04 	.word	0x460c7b04
   36484:	bf2c42ba 	.word	0xbf2c42ba
   36488:	0e00f04f 	.word	0x0e00f04f
   3648c:	0e01f04f 	.word	0x0e01f04f
   36490:	429e1bd2 	.word	0x429e1bd2
   36494:	4673bf2c 	.word	0x4673bf2c
   36498:	0301f10e 	.word	0x0301f10e
   3649c:	f8414285 	.word	0xf8414285
   364a0:	d3e62c04 	.word	0xd3e62c04
   364a4:	e7a4b90b 	.word	0xe7a4b90b
   364a8:	68222301 	.word	0x68222301
   364ac:	429a1ad1 	.word	0x429a1ad1
   364b0:	1b04f844 	.word	0x1b04f844
   364b4:	e79cd3f8 	.word	0xe79cd3f8
   364b8:	a8014621 	.word	0xa8014621
   364bc:	fedcf7ff 	.word	0xfedcf7ff
   364c0:	28004607 	.word	0x28004607
   364c4:	ac01d196 	.word	0xac01d196
   364c8:	f06fe776 	.word	0xf06fe776
   364cc:	46380709 	.word	0x46380709
   364d0:	bdf0b005 	.word	0xbdf0b005

000364d4 <symbol_0006ccd>:
   364d4:	7310f242 	.word	0x7310f242
   364d8:	41f0e92d 	.word	0x41f0e92d
   364dc:	4256684f 	.word	0x4256684f
   364e0:	429f4316 	.word	0x429f4316
   364e4:	16c0f3c6 	.word	0x16c0f3c6
   364e8:	6842d84f 	.word	0x6842d84f
   364ec:	42974604 	.word	0x42974604
   364f0:	d82c460d 	.word	0xd82c460d
   364f4:	68236829 	.word	0x68236829
   364f8:	f106fb01 	.word	0xf106fb01
   364fc:	0701f1c6 	.word	0x0701f1c6
   36500:	1307fb03 	.word	0x1307fb03
   36504:	686b6023 	.word	0x686b6023
   36508:	2300b18b 	.word	0x2300b18b
   3650c:	68aa68a1 	.word	0x68aa68a1
   36510:	0023f851 	.word	0x0023f851
   36514:	2023f852 	.word	0x2023f852
   36518:	f007fb00 	.word	0xf007fb00
   3651c:	0206fb02 	.word	0x0206fb02
   36520:	2023f841 	.word	0x2023f841
   36524:	3301686a 	.word	0x3301686a
   36528:	d8ef429a 	.word	0xd8ef429a
   3652c:	42936862 	.word	0x42936862
   36530:	009ad20a 	.word	0x009ad20a
   36534:	330168a0 	.word	0x330168a0
   36538:	fb075881 	.word	0xfb075881
   3653c:	5081f101 	.word	0x5081f101
   36540:	32046861 	.word	0x32046861
   36544:	d8f54299 	.word	0xd8f54299
   36548:	e8bd2000 	.word	0xe8bd2000
   3654c:	210481f0 	.word	0x210481f0
   36550:	f0034638 	.word	0xf0034638
   36554:	4680fa61 	.word	0x4680fa61
   36558:	68a1b1b8 	.word	0x68a1b1b8
   3655c:	6862b189 	.word	0x6862b189
   36560:	f7e30092 	.word	0xf7e30092
   36564:	e9d4fca5 	.word	0xe9d4fca5
   36568:	1e532001 	.word	0x1e532001
   3656c:	2200b13a 	.word	0x2200b13a
   36570:	1c593b01 	.word	0x1c593b01
   36574:	f1006002 	.word	0xf1006002
   36578:	d1f90004 	.word	0xd1f90004
   3657c:	f00368a0 	.word	0xf00368a0
   36580:	463afa5f 	.word	0x463afa5f
   36584:	7801e9c4 	.word	0x7801e9c4
   36588:	f06fe7b4 	.word	0xf06fe7b4
   3658c:	e7dc000f 	.word	0xe7dc000f

00036590 <symbol_000b345>:
   36590:	6845b5f8 	.word	0x6845b5f8
   36594:	460e4604 	.word	0x460e4604
   36598:	6887b19d 	.word	0x6887b19d
   3659c:	463800aa 	.word	0x463800aa
   365a0:	f00a2100 	.word	0xf00a2100
   365a4:	2e00fd49 	.word	0x2e00fd49
   365a8:	2301bfac 	.word	0x2301bfac
   365ac:	33fff04f 	.word	0x33fff04f
   365b0:	71e6ea86 	.word	0x71e6ea86
   365b4:	eba168a2 	.word	0xeba168a2
   365b8:	601171e6 	.word	0x601171e6
   365bc:	20006023 	.word	0x20006023
   365c0:	2104bdf8 	.word	0x2104bdf8
   365c4:	f0032001 	.word	0xf0032001
   365c8:	4607fa27 	.word	0x4607fa27
   365cc:	68a1b1b8 	.word	0x68a1b1b8
   365d0:	6862b181 	.word	0x6862b181
   365d4:	f7e30092 	.word	0xf7e30092
   365d8:	e9d4fc6b 	.word	0xe9d4fc6b
   365dc:	1e532001 	.word	0x1e532001
   365e0:	3b01b132 	.word	0x3b01b132
   365e4:	60051c5a 	.word	0x60051c5a
   365e8:	0004f100 	.word	0x0004f100
   365ec:	68a0d1f9 	.word	0x68a0d1f9
   365f0:	fa26f003 	.word	0xfa26f003
   365f4:	22042301 	.word	0x22042301
   365f8:	3701e9c4 	.word	0x3701e9c4
   365fc:	f06fe7cf 	.word	0xf06fe7cf
   36600:	bdf8000f 	.word	0xbdf8000f

00036604 <symbol_0007f0f>:
   36604:	ebb16843 	.word	0xebb16843
   36608:	d2091f43 	.word	0xd2091f43
   3660c:	094a6883 	.word	0x094a6883
   36610:	0022f853 	.word	0x0022f853
   36614:	011ff001 	.word	0x011ff001
   36618:	f00040c8 	.word	0xf00040c8
   3661c:	47700001 	.word	0x47700001
   36620:	47702000 	.word	0x47702000

00036624 <symbol_00030c0>:
   36624:	b3136843 	.word	0xb3136843
   36628:	6882b410 	.word	0x6882b410
   3662c:	d0241e58 	.word	0xd0241e58
   36630:	1020f852 	.word	0x1020f852
   36634:	f103b9e9 	.word	0xf103b9e9
   36638:	3b014380 	.word	0x3b014380
   3663c:	0383eb02 	.word	0x0383eb02
   36640:	f853e002 	.word	0xf853e002
   36644:	b9a11d04 	.word	0xb9a11d04
   36648:	d1fa3801 	.word	0xd1fa3801
   3664c:	68112420 	.word	0x68112420
   36650:	f04f2200 	.word	0xf04f2200
   36654:	e0024300 	.word	0xe0024300
   36658:	2a203201 	.word	0x2a203201
   3665c:	420bd004 	.word	0x420bd004
   36660:	0353ea4f 	.word	0x0353ea4f
   36664:	1aa0d0f8 	.word	0x1aa0d0f8
   36668:	4b04f85d 	.word	0x4b04f85d
   3666c:	46184770 	.word	0x46184770
   36670:	01404770 	.word	0x01404770
   36674:	0420f100 	.word	0x0420f100
   36678:	6811e7ea 	.word	0x6811e7ea
   3667c:	e7e72420 	.word	0xe7e72420

00036680 <symbol_000b7da>:
   36680:	b3236843 	.word	0xb3236843
   36684:	6882b410 	.word	0x6882b410
   36688:	d0261e58 	.word	0xd0261e58
   3668c:	1020f852 	.word	0x1020f852
   36690:	f103b9f9 	.word	0xf103b9f9
   36694:	3b014380 	.word	0x3b014380
   36698:	0383eb02 	.word	0x0383eb02
   3669c:	f853e002 	.word	0xf853e002
   366a0:	b9b11d04 	.word	0xb9b11d04
   366a4:	d1fa3801 	.word	0xd1fa3801
   366a8:	68112420 	.word	0x68112420
   366ac:	f04f2200 	.word	0xf04f2200
   366b0:	e0024300 	.word	0xe0024300
   366b4:	2a203201 	.word	0x2a203201
   366b8:	420bd004 	.word	0x420bd004
   366bc:	0353ea4f 	.word	0x0353ea4f
   366c0:	1aa0d0f8 	.word	0x1aa0d0f8
   366c4:	08c03007 	.word	0x08c03007
   366c8:	4b04f85d 	.word	0x4b04f85d
   366cc:	46184770 	.word	0x46184770
   366d0:	01404770 	.word	0x01404770
   366d4:	0420f100 	.word	0x0420f100
   366d8:	6811e7e8 	.word	0x6811e7e8
   366dc:	e7e52420 	.word	0xe7e52420

000366e0 <symbol_000eaf4>:
   366e0:	43f8e92d 	.word	0x43f8e92d
   366e4:	460f4605 	.word	0x460f4605
   366e8:	2a004616 	.word	0x2a004616
   366ec:	780cd07e 	.word	0x780cd07e
   366f0:	b124460b 	.word	0xb124460b
   366f4:	f813e07e 	.word	0xf813e07e
   366f8:	2a002f01 	.word	0x2a002f01
   366fc:	3401d146 	.word	0x3401d146
   36700:	d1f842a6 	.word	0xd1f842a6
   36704:	8004f8d5 	.word	0x8004f8d5
   36708:	0f00f1b8 	.word	0x0f00f1b8
   3670c:	2104d169 	.word	0x2104d169
   36710:	f0032001 	.word	0xf0032001
   36714:	4681f981 	.word	0x4681f981
   36718:	d06d2800 	.word	0xd06d2800
   3671c:	b18968a9 	.word	0xb18968a9
   36720:	0092686a 	.word	0x0092686a
   36724:	fbc4f7e3 	.word	0xfbc4f7e3
   36728:	2001e9d5 	.word	0x2001e9d5
   3672c:	b13a1e53 	.word	0xb13a1e53
   36730:	3b014642 	.word	0x3b014642
   36734:	60021c59 	.word	0x60021c59
   36738:	0004f100 	.word	0x0004f100
   3673c:	68a8d1f9 	.word	0x68a8d1f9
   36740:	f97ef003 	.word	0xf97ef003
   36744:	22042301 	.word	0x22042301
   36748:	3901e9c5 	.word	0x3901e9c5
   3674c:	46482100 	.word	0x46482100
   36750:	fc72f00a 	.word	0xfc72f00a
   36754:	22012300 	.word	0x22012300
   36758:	42a668a9 	.word	0x42a668a9
   3675c:	602a600b 	.word	0x602a600b
   36760:	eb07d911 	.word	0xeb07d911
   36764:	1b340c06 	.word	0x1b340c06
   36768:	f02368ae 	.word	0xf02368ae
   3676c:	00df0103 	.word	0x00df0103
   36770:	0d01f81c 	.word	0x0d01f81c
   36774:	f0075872 	.word	0xf0075872
   36778:	40b80718 	.word	0x40b80718
   3677c:	43023301 	.word	0x43023301
   36780:	507242a3 	.word	0x507242a3
   36784:	2000d1f0 	.word	0x2000d1f0
   36788:	83f8e8bd 	.word	0x83f8e8bd
   3678c:	f0121b32 	.word	0xf0121b32
   36790:	bf180803 	.word	0xbf180803
   36794:	0801f04f 	.word	0x0801f04f
   36798:	7310f242 	.word	0x7310f242
   3679c:	0892eb08 	.word	0x0892eb08
   367a0:	d8294598 	.word	0xd8294598
   367a4:	4598686b 	.word	0x4598686b
   367a8:	2104d929 	.word	0x2104d929
   367ac:	f0034640 	.word	0xf0034640
   367b0:	4681f933 	.word	0x4681f933
   367b4:	68a9b300 	.word	0x68a9b300
   367b8:	686ab189 	.word	0x686ab189
   367bc:	f7e30092 	.word	0xf7e30092
   367c0:	e9d5fb77 	.word	0xe9d5fb77
   367c4:	1e532001 	.word	0x1e532001
   367c8:	2200b13a 	.word	0x2200b13a
   367cc:	1c593b01 	.word	0x1c593b01
   367d0:	f1006002 	.word	0xf1006002
   367d4:	d1f90004 	.word	0xd1f90004
   367d8:	f00368a8 	.word	0xf00368a8
   367dc:	e9c5f931 	.word	0xe9c5f931
   367e0:	ea4f8901 	.word	0xea4f8901
   367e4:	f8d50288 	.word	0xf8d50288
   367e8:	e7af9008 	.word	0xe7af9008
   367ec:	8004f8d0 	.word	0x8004f8d0
   367f0:	e7894614 	.word	0xe7894614
   367f4:	e7ca2400 	.word	0xe7ca2400
   367f8:	000ff06f 	.word	0x000ff06f
   367fc:	4698e7c4 	.word	0x4698e7c4
   36800:	bf00e782 	.word	0xbf00e782

00036804 <symbol_000116e>:
   36804:	41f0e92d 	.word	0x41f0e92d
   36808:	46886844 	.word	0x46886844
   3680c:	d03e2c00 	.word	0xd03e2c00
   36810:	1e624615 	.word	0x1e624615
   36814:	68804607 	.word	0x68804607
   36818:	f850d040 	.word	0xf850d040
   3681c:	bb991022 	.word	0xbb991022
   36820:	4380f104 	.word	0x4380f104
   36824:	eb003b01 	.word	0xeb003b01
   36828:	e0020383 	.word	0xe0020383
   3682c:	1d04f853 	.word	0x1d04f853
   36830:	3a01bb51 	.word	0x3a01bb51
   36834:	2627d1fa 	.word	0x2627d1fa
   36838:	22006801 	.word	0x22006801
   3683c:	4300f04f 	.word	0x4300f04f
   36840:	3201e002 	.word	0x3201e002
   36844:	d0032a20 	.word	0xd0032a20
   36848:	ea4f420b 	.word	0xea4f420b
   3684c:	d0f80353 	.word	0xd0f80353
   36850:	08f61ab6 	.word	0x08f61ab6
   36854:	d32442b5 	.word	0xd32442b5
   36858:	2100462a 	.word	0x2100462a
   3685c:	f00a4640 	.word	0xf00a4640
   36860:	b176fbeb 	.word	0xb176fbeb
   36864:	44a82300 	.word	0x44a82300
   36868:	f02368b9 	.word	0xf02368b9
   3686c:	588c0203 	.word	0x588c0203
   36870:	f00500dd 	.word	0xf00500dd
   36874:	33010518 	.word	0x33010518
   36878:	42b340ec 	.word	0x42b340ec
   3687c:	4d01f808 	.word	0x4d01f808
   36880:	2000d1f2 	.word	0x2000d1f2
   36884:	81f0e8bd 	.word	0x81f0e8bd
   36888:	36270156 	.word	0x36270156
   3688c:	4608e7d5 	.word	0x4608e7d5
   36890:	f00a4621 	.word	0xf00a4621
   36894:	4620fbd1 	.word	0x4620fbd1
   36898:	81f0e8bd 	.word	0x81f0e8bd
   3689c:	26276801 	.word	0x26276801
   368a0:	f06fe7cb 	.word	0xf06fe7cb
   368a4:	e7ed0007 	.word	0xe7ed0007

000368a8 <symbol_0004fb7>:
   368a8:	41f0e92d 	.word	0x41f0e92d
   368ac:	46046843 	.word	0x46046843
   368b0:	f001094d 	.word	0xf001094d
   368b4:	b343061f 	.word	0xb343061f
   368b8:	f8d01e5a 	.word	0xf8d01e5a
   368bc:	f000e008 	.word	0xf000e008
   368c0:	f85e8099 	.word	0xf85e8099
   368c4:	f1bcc022 	.word	0xf1bcc022
   368c8:	f0400f00 	.word	0xf0400f00
   368cc:	f103809c 	.word	0xf103809c
   368d0:	38014080 	.word	0x38014080
   368d4:	0080eb0e 	.word	0x0080eb0e
   368d8:	f850e003 	.word	0xf850e003
   368dc:	2f007d04 	.word	0x2f007d04
   368e0:	3a01d15e 	.word	0x3a01d15e
   368e4:	f04fd1f9 	.word	0xf04fd1f9
   368e8:	f8de0820 	.word	0xf8de0820
   368ec:	20007000 	.word	0x20007000
   368f0:	4200f04f 	.word	0x4200f04f
   368f4:	3001e002 	.word	0x3001e002
   368f8:	d0052820 	.word	0xd0052820
   368fc:	ea4f423a 	.word	0xea4f423a
   36900:	d0f80252 	.word	0xd0f80252
   36904:	0c00eba8 	.word	0x0c00eba8
   36908:	ebb14461 	.word	0xebb14461
   3690c:	d90b1f43 	.word	0xd90b1f43
   36910:	021ff011 	.word	0x021ff011
   36914:	2201bf18 	.word	0x2201bf18
   36918:	7010f242 	.word	0x7010f242
   3691c:	1751eb02 	.word	0x1751eb02
   36920:	d86d4287 	.word	0xd86d4287
   36924:	d840429f 	.word	0xd840429f
   36928:	429db1f5 	.word	0x429db1f5
   3692c:	f06fd25d 	.word	0xf06fd25d
   36930:	1b7f4740 	.word	0x1b7f4740
   36934:	ebc719da 	.word	0xebc719da
   36938:	00927787 	.word	0x00927787
   3693c:	68a000bf 	.word	0x68a000bf
   36940:	19c13b01 	.word	0x19c13b01
   36944:	44115880 	.word	0x44115880
   36948:	f841429d 	.word	0xf841429d
   3694c:	f1a20c04 	.word	0xf1a20c04
   36950:	d1f40204 	.word	0xd1f40204
   36954:	f1032100 	.word	0xf1032100
   36958:	3b014380 	.word	0x3b014380
   3695c:	68a2009b 	.word	0x68a2009b
   36960:	3b0450d1 	.word	0x3b0450d1
   36964:	d1fa1d1a 	.word	0xd1fa1d1a
   36968:	6863b1be 	.word	0x6863b1be
   3696c:	d214429d 	.word	0xd214429d
   36970:	f1c62700 	.word	0xf1c62700
   36974:	00ab0c20 	.word	0x00ab0c20
   36978:	350168a0 	.word	0x350168a0
   3697c:	fa0158c1 	.word	0xfa0158c1
   36980:	50c2f206 	.word	0x50c2f206
   36984:	58c268a0 	.word	0x58c268a0
   36988:	50c2433a 	.word	0x50c2433a
   3698c:	fa216862 	.word	0xfa216862
   36990:	42aaf70c 	.word	0x42aaf70c
   36994:	0304f103 	.word	0x0304f103
   36998:	2000d8ee 	.word	0x2000d8ee
   3699c:	81f0e8bd 	.word	0x81f0e8bd
   369a0:	1c42ea4f 	.word	0x1c42ea4f
   369a4:	0820f10c 	.word	0x0820f10c
   369a8:	2104e7a1 	.word	0x2104e7a1
   369ac:	f0034638 	.word	0xf0034638
   369b0:	4680f833 	.word	0x4680f833
   369b4:	68a1b320 	.word	0x68a1b320
   369b8:	6862b189 	.word	0x6862b189
   369bc:	f7e30092 	.word	0xf7e30092
   369c0:	e9d4fa77 	.word	0xe9d4fa77
   369c4:	1e532001 	.word	0x1e532001
   369c8:	2200b13a 	.word	0x2200b13a
   369cc:	1c593b01 	.word	0x1c593b01
   369d0:	f1006002 	.word	0xf1006002
   369d4:	d1f90004 	.word	0xd1f90004
   369d8:	f00368a0 	.word	0xf00368a0
   369dc:	463bf831 	.word	0x463bf831
   369e0:	7801e9c4 	.word	0x7801e9c4
   369e4:	d0bf2d00 	.word	0xd0bf2d00
   369e8:	2b00e79f 	.word	0x2b00e79f
   369ec:	2e00d1b2 	.word	0x2e00d1b2
   369f0:	e7d2d1bb 	.word	0xe7d2d1bb
   369f4:	7000f8de 	.word	0x7000f8de
   369f8:	f04f4694 	.word	0xf04f4694
   369fc:	e7760820 	.word	0xe7760820
   36a00:	000ff06f 	.word	0x000ff06f
   36a04:	0152e7ca 	.word	0x0152e7ca
   36a08:	f1024667 	.word	0xf1024667
   36a0c:	46940820 	.word	0x46940820
   36a10:	bf00e76d 	.word	0xbf00e76d

00036a14 <symbol_0000994>:
   36a14:	6844b5f8 	.word	0x6844b5f8
   36a18:	42ac094d 	.word	0x42ac094d
   36a1c:	f001d33a 	.word	0xf001d33a
   36a20:	d032011f 	.word	0xd032011f
   36a24:	2300b1b5 	.word	0x2300b1b5
   36a28:	688400aa 	.word	0x688400aa
   36a2c:	320458a6 	.word	0x320458a6
   36a30:	6023f844 	.word	0x6023f844
   36a34:	33016844 	.word	0x33016844
   36a38:	429e1b66 	.word	0x429e1b66
   36a3c:	429cd8f5 	.word	0x429cd8f5
   36a40:	2500d908 	.word	0x2500d908
   36a44:	6884009a 	.word	0x6884009a
   36a48:	50a53301 	.word	0x50a53301
   36a4c:	32046844 	.word	0x32046844
   36a50:	d8f8429c 	.word	0xd8f8429c
   36a54:	b1b4b1b9 	.word	0xb1b4b1b9
   36a58:	f1042700 	.word	0xf1042700
   36a5c:	3b014380 	.word	0x3b014380
   36a60:	f1c1009b 	.word	0xf1c1009b
   36a64:	68860c20 	.word	0x68860c20
   36a68:	58f53c01 	.word	0x58f53c01
   36a6c:	f201fa25 	.word	0xf201fa25
   36a70:	688650f2 	.word	0x688650f2
   36a74:	ea4258f2 	.word	0xea4258f2
   36a78:	50f20207 	.word	0x50f20207
   36a7c:	f70cfa05 	.word	0xf70cfa05
   36a80:	0304f1a3 	.word	0x0304f1a3
   36a84:	2000d1ef 	.word	0x2000d1ef
   36a88:	b919bdf8 	.word	0xb919bdf8
   36a8c:	d0fa2c00 	.word	0xd0fa2c00
   36a90:	e7d6460b 	.word	0xe7d6460b
   36a94:	b1644605 	.word	0xb1644605
   36a98:	00a26886 	.word	0x00a26886
   36a9c:	21004630 	.word	0x21004630
   36aa0:	facaf00a 	.word	0xfacaf00a
   36aa4:	22012300 	.word	0x22012300
   36aa8:	461868a9 	.word	0x461868a9
   36aac:	602a600b 	.word	0x602a600b
   36ab0:	2104bdf8 	.word	0x2104bdf8
   36ab4:	f0022001 	.word	0xf0022001
   36ab8:	4606ffaf 	.word	0x4606ffaf
   36abc:	68a9b1b8 	.word	0x68a9b1b8
   36ac0:	686ab181 	.word	0x686ab181
   36ac4:	f7e30092 	.word	0xf7e30092
   36ac8:	e9d5f9f3 	.word	0xe9d5f9f3
   36acc:	1e532001 	.word	0x1e532001
   36ad0:	3b01b132 	.word	0x3b01b132
   36ad4:	60041c5a 	.word	0x60041c5a
   36ad8:	0004f100 	.word	0x0004f100
   36adc:	68a8d1f9 	.word	0x68a8d1f9
   36ae0:	ffaef002 	.word	0xffaef002
   36ae4:	22042301 	.word	0x22042301
   36ae8:	3601e9c5 	.word	0x3601e9c5
   36aec:	f06fe7d6 	.word	0xf06fe7d6
   36af0:	bdf8000f 	.word	0xbdf8000f

00036af4 <symbol_000242f>:
   36af4:	6843b470 	.word	0x6843b470
   36af8:	b173684a 	.word	0xb173684a
   36afc:	f1036884 	.word	0xf1036884
   36b00:	3d014580 	.word	0x3d014580
   36b04:	6025f854 	.word	0x6025f854
   36b08:	0485eb04 	.word	0x0485eb04
   36b0c:	e01ab11e 	.word	0xe01ab11e
   36b10:	5d04f854 	.word	0x5d04f854
   36b14:	3b01b9bd 	.word	0x3b01b9bd
   36b18:	b18ad1fa 	.word	0xb18ad1fa
   36b1c:	4480f102 	.word	0x4480f102
   36b20:	3c01688e 	.word	0x3c01688e
   36b24:	5024f856 	.word	0x5024f856
   36b28:	eb06b9cd 	.word	0xeb06b9cd
   36b2c:	e0020484 	.word	0xe0020484
   36b30:	5d04f854 	.word	0x5d04f854
   36b34:	3a01b98d 	.word	0x3a01b98d
   36b38:	2b00d1fa 	.word	0x2b00d1fa
   36b3c:	6802d037 	.word	0x6802d037
   36b40:	bc704610 	.word	0xbc704610
   36b44:	2a004770 	.word	0x2a004770
   36b48:	f102d0f9 	.word	0xf102d0f9
   36b4c:	688e4480 	.word	0x688e4480
   36b50:	f8563c01 	.word	0xf8563c01
   36b54:	2d005024 	.word	0x2d005024
   36b58:	4293d0e7 	.word	0x4293d0e7
   36b5c:	4293d8ef 	.word	0x4293d8ef
   36b60:	d2036809 	.word	0xd2036809
   36b64:	424abc70 	.word	0x424abc70
   36b68:	47704610 	.word	0x47704610
   36b6c:	2a006802 	.word	0x2a006802
   36b70:	2900dd01 	.word	0x2900dd01
   36b74:	2900db24 	.word	0x2900db24
   36b78:	2a00dd01 	.word	0x2a00dd01
   36b7c:	b1b3db1d 	.word	0xb1b3db1d
   36b80:	f1036884 	.word	0xf1036884
   36b84:	39014180 	.word	0x39014180
   36b88:	5021f854 	.word	0x5021f854
   36b8c:	0021f856 	.word	0x0021f856
   36b90:	42850089 	.word	0x42850089
   36b94:	4431440c 	.word	0x4431440c
   36b98:	d30cd8d2 	.word	0xd30cd8d2
   36b9c:	d0063b01 	.word	0xd0063b01
   36ba0:	5d04f854 	.word	0x5d04f854
   36ba4:	0d04f851 	.word	0x0d04f851
   36ba8:	d9f64285 	.word	0xd9f64285
   36bac:	461ae7c8 	.word	0x461ae7c8
   36bb0:	4610bc70 	.word	0x4610bc70
   36bb4:	42524770 	.word	0x42524770
   36bb8:	f04fe7c2 	.word	0xf04fe7c2
   36bbc:	e7bf32ff 	.word	0xe7bf32ff
   36bc0:	e7bd2201 	.word	0xe7bd2201

00036bc4 <symbol_000ccad>:
   36bc4:	2900b4f0 	.word	0x2900b4f0
   36bc8:	68434605 	.word	0x68434605
   36bcc:	2b00db32 	.word	0x2b00db32
   36bd0:	6886d042 	.word	0x6886d042
   36bd4:	4280f103 	.word	0x4280f103
   36bd8:	f8563a01 	.word	0xf8563a01
   36bdc:	eb060022 	.word	0xeb060022
   36be0:	b9680282 	.word	0xb9680282
   36be4:	30fff04f 	.word	0x30fff04f
   36be8:	e0022701 	.word	0xe0022701
   36bec:	4d04f852 	.word	0x4d04f852
   36bf0:	3b01b93c 	.word	0x3b01b93c
   36bf4:	2900d1fa 	.word	0x2900d1fa
   36bf8:	2000bf08 	.word	0x2000bf08
   36bfc:	4770bcf0 	.word	0x4770bcf0
   36c00:	b1a12701 	.word	0xb1a12701
   36c04:	d8122b01 	.word	0xd8122b01
   36c08:	28006828 	.word	0x28006828
   36c0c:	1c7bdd01 	.word	0x1c7bdd01
   36c10:	2f01d01e 	.word	0x2f01d01e
   36c14:	2800d101 	.word	0x2800d101
   36c18:	2900db24 	.word	0x2900db24
   36c1c:	bfb86833 	.word	0xbfb86833
   36c20:	42994249 	.word	0x42994249
   36c24:	d815d3ea 	.word	0xd815d3ea
   36c28:	2000bcf0 	.word	0x2000bcf0
   36c2c:	68284770 	.word	0x68284770
   36c30:	4770bcf0 	.word	0x4770bcf0
   36c34:	6886b163 	.word	0x6886b163
   36c38:	4280f103 	.word	0x4280f103
   36c3c:	f8563a01 	.word	0xf8563a01
   36c40:	eb060022 	.word	0xeb060022
   36c44:	b9500282 	.word	0xb9500282
   36c48:	f04f2001 	.word	0xf04f2001
   36c4c:	e7d037ff 	.word	0xe7d037ff
   36c50:	e7d32001 	.word	0xe7d32001
   36c54:	e7d14240 	.word	0xe7d14240
   36c58:	30fff04f 	.word	0x30fff04f
   36c5c:	f04fe7cb 	.word	0xf04fe7cb
   36c60:	e7cf37ff 	.word	0xe7cf37ff
   36c64:	30fff04f 	.word	0x30fff04f
   36c68:	bf00e7c8 	.word	0xbf00e7c8

00036c6c <symbol_000c914>:
   36c6c:	e92d4290 	.word	0xe92d4290
   36c70:	460747f0 	.word	0x460747f0
   36c74:	d006460c 	.word	0xd006460c
   36c78:	46154288 	.word	0x46154288
   36c7c:	f7ffd002 	.word	0xf7ffd002
   36c80:	b9a0fafb 	.word	0xb9a0fafb
   36c84:	2301462c 	.word	0x2301462c
   36c88:	6865603b 	.word	0x6865603b
   36c8c:	68a3b175 	.word	0x68a3b175
   36c90:	4280f105 	.word	0x4280f105
   36c94:	f8533a01 	.word	0xf8533a01
   36c98:	eb031022 	.word	0xeb031022
   36c9c:	b1190282 	.word	0xb1190282
   36ca0:	f852e007 	.word	0xf852e007
   36ca4:	b9211d04 	.word	0xb9211d04
   36ca8:	d1fa3d01 	.word	0xd1fa3d01
   36cac:	e8bd2000 	.word	0xe8bd2000
   36cb0:	f24287f0 	.word	0xf24287f0
   36cb4:	42957210 	.word	0x42957210
   36cb8:	687ad875 	.word	0x687ad875
   36cbc:	d27642aa 	.word	0xd27642aa
   36cc0:	46282104 	.word	0x46282104
   36cc4:	fea8f002 	.word	0xfea8f002
   36cc8:	28004606 	.word	0x28004606
   36ccc:	68b9d06b 	.word	0x68b9d06b
   36cd0:	687ab189 	.word	0x687ab189
   36cd4:	f7e30092 	.word	0xf7e30092
   36cd8:	e9d7f8eb 	.word	0xe9d7f8eb
   36cdc:	1e532001 	.word	0x1e532001
   36ce0:	2200b13a 	.word	0x2200b13a
   36ce4:	1c593b01 	.word	0x1c593b01
   36ce8:	f1006002 	.word	0xf1006002
   36cec:	d1f90004 	.word	0xd1f90004
   36cf0:	f00268b8 	.word	0xf00268b8
   36cf4:	e9c7fea5 	.word	0xe9c7fea5
   36cf8:	68a35601 	.word	0x68a35601
   36cfc:	ea4f2400 	.word	0xea4f2400
   36d00:	f1a30a85 	.word	0xf1a30a85
   36d04:	eb060c04 	.word	0xeb060c04
   36d08:	2200000a 	.word	0x2200000a
   36d0c:	f10c6833 	.word	0xf10c6833
   36d10:	f8dc0c04 	.word	0xf8dc0c04
   36d14:	191b1000 	.word	0x191b1000
   36d18:	bf284614 	.word	0xbf284614
   36d1c:	185b2201 	.word	0x185b2201
   36d20:	2401bf28 	.word	0x2401bf28
   36d24:	3b04f846 	.word	0x3b04f846
   36d28:	44144286 	.word	0x44144286
   36d2c:	2c00d1ed 	.word	0x2c00d1ed
   36d30:	f242d0bc 	.word	0xf242d0bc
   36d34:	f04f7810 	.word	0xf04f7810
   36d38:	e00f0900 	.word	0xe00f0900
   36d3c:	eb0568bd 	.word	0xeb0568bd
   36d40:	6803000a 	.word	0x6803000a
   36d44:	191c2200 	.word	0x191c2200
   36d48:	2201bf28 	.word	0x2201bf28
   36d4c:	4b04f840 	.word	0x4b04f840
   36d50:	0a04f10a 	.word	0x0a04f10a
   36d54:	24014635 	.word	0x24014635
   36d58:	d0a72a00 	.word	0xd0a72a00
   36d5c:	1c6e687b 	.word	0x1c6e687b
   36d60:	d8ee42ab 	.word	0xd8ee42ab
   36d64:	d81e4546 	.word	0xd81e4546
   36d68:	d2e742b3 	.word	0xd2e742b3
   36d6c:	46302104 	.word	0x46302104
   36d70:	fe52f002 	.word	0xfe52f002
   36d74:	b1b04605 	.word	0xb1b04605
   36d78:	b18968b9 	.word	0xb18968b9
   36d7c:	0092687a 	.word	0x0092687a
   36d80:	f896f7e3 	.word	0xf896f7e3
   36d84:	2001e9d7 	.word	0x2001e9d7
   36d88:	b13a1e53 	.word	0xb13a1e53
   36d8c:	1c5a3b01 	.word	0x1c5a3b01
   36d90:	9000f8c0 	.word	0x9000f8c0
   36d94:	0004f100 	.word	0x0004f100
   36d98:	68b8d1f8 	.word	0x68b8d1f8
   36d9c:	fe50f002 	.word	0xfe50f002
   36da0:	6501e9c7 	.word	0x6501e9c7
   36da4:	f06fe7cb 	.word	0xf06fe7cb
   36da8:	e8bd000f 	.word	0xe8bd000f
   36dac:	68be87f0 	.word	0x68be87f0
   36db0:	bf00e7a4 	.word	0xbf00e7a4

00036db4 <symbol_0004fdf>:
   36db4:	684bb5f0 	.word	0x684bb5f0
   36db8:	b085460d 	.word	0xb085460d
   36dbc:	46064614 	.word	0x46064614
   36dc0:	b17b6851 	.word	0xb17b6851
   36dc4:	f10368a8 	.word	0xf10368a8
   36dc8:	3a014280 	.word	0x3a014280
   36dcc:	7022f850 	.word	0x7022f850
   36dd0:	0082eb00 	.word	0x0082eb00
   36dd4:	e04fb127 	.word	0xe04fb127
   36dd8:	2d04f850 	.word	0x2d04f850
   36ddc:	d14b2a00 	.word	0xd14b2a00
   36de0:	d1f93b01 	.word	0xd1f93b01
   36de4:	f101b189 	.word	0xf101b189
   36de8:	68a74080 	.word	0x68a74080
   36dec:	f8573801 	.word	0xf8573801
   36df0:	2a002020 	.word	0x2a002020
   36df4:	8099f040 	.word	0x8099f040
   36df8:	0080eb07 	.word	0x0080eb07
   36dfc:	f850e003 	.word	0xf850e003
   36e00:	2a002d04 	.word	0x2a002d04
   36e04:	3901d142 	.word	0x3901d142
   36e08:	2300d1f9 	.word	0x2300d1f9
   36e0c:	42b42201 	.word	0x42b42201
   36e10:	2301e9cd 	.word	0x2301e9cd
   36e14:	d07f9303 	.word	0xd07f9303
   36e18:	d00542b5 	.word	0xd00542b5
   36e1c:	46304629 	.word	0x46304629
   36e20:	fa2af7ff 	.word	0xfa2af7ff
   36e24:	b9a84607 	.word	0xb9a84607
   36e28:	60332301 	.word	0x60332301
   36e2c:	b1806860 	.word	0xb1806860
   36e30:	c008f8d4 	.word	0xc008f8d4
   36e34:	4380f100 	.word	0x4380f100
   36e38:	f85c3b01 	.word	0xf85c3b01
   36e3c:	eb0c2023 	.word	0xeb0c2023
   36e40:	b1220383 	.word	0xb1220383
   36e44:	f853e042 	.word	0xf853e042
   36e48:	2a002d04 	.word	0x2a002d04
   36e4c:	3801d13e 	.word	0x3801d13e
   36e50:	2700d1f9 	.word	0x2700d1f9
   36e54:	b1609803 	.word	0xb1609803
   36e58:	1e539a02 	.word	0x1e539a02
   36e5c:	2200b13a 	.word	0x2200b13a
   36e60:	1c593b01 	.word	0x1c593b01
   36e64:	f1006002 	.word	0xf1006002
   36e68:	d1f90004 	.word	0xd1f90004
   36e6c:	f0029803 	.word	0xf0029803
   36e70:	4638fde7 	.word	0x4638fde7
   36e74:	bdf0b005 	.word	0xbdf0b005
   36e78:	d0c62900 	.word	0xd0c62900
   36e7c:	4080f101 	.word	0x4080f101
   36e80:	380168a7 	.word	0x380168a7
   36e84:	2020f857 	.word	0x2020f857
   36e88:	d0b52a00 	.word	0xd0b52a00
   36e8c:	d8bc428b 	.word	0xd8bc428b
   36e90:	2b00d34b 	.word	0x2b00d34b
   36e94:	68a8d0b9 	.word	0x68a8d0b9
   36e98:	4180f103 	.word	0x4180f103
   36e9c:	f8503901 	.word	0xf8503901
   36ea0:	f857c021 	.word	0xf857c021
   36ea4:	0089e021 	.word	0x0089e021
   36ea8:	440845e6 	.word	0x440845e6
   36eac:	0201eb07 	.word	0x0201eb07
   36eb0:	d83ad3ab 	.word	0xd83ad3ab
   36eb4:	e0064601 	.word	0xe0064601
   36eb8:	7d04f851 	.word	0x7d04f851
   36ebc:	0d04f852 	.word	0x0d04f852
   36ec0:	d8a24287 	.word	0xd8a24287
   36ec4:	3b01d331 	.word	0x3b01d331
   36ec8:	e79ed1f6 	.word	0xe79ed1f6
   36ecc:	462b2500 	.word	0x462b2500
   36ed0:	f85168b1 	.word	0xf85168b1
   36ed4:	35016b04 	.word	0x35016b04
   36ed8:	f8411af2 	.word	0xf8411af2
   36edc:	f85c2c04 	.word	0xf85c2c04
   36ee0:	460c7b04 	.word	0x460c7b04
   36ee4:	bf2c42ba 	.word	0xbf2c42ba
   36ee8:	0e00f04f 	.word	0x0e00f04f
   36eec:	0e01f04f 	.word	0x0e01f04f
   36ef0:	429e1bd2 	.word	0x429e1bd2
   36ef4:	4673bf2c 	.word	0x4673bf2c
   36ef8:	0301f10e 	.word	0x0301f10e
   36efc:	f8414285 	.word	0xf8414285
   36f00:	d3e62c04 	.word	0xd3e62c04
   36f04:	e7a4b90b 	.word	0xe7a4b90b
   36f08:	68222301 	.word	0x68222301
   36f0c:	429a1ad1 	.word	0x429a1ad1
   36f10:	1b04f844 	.word	0x1b04f844
   36f14:	e79cd3f8 	.word	0xe79cd3f8
   36f18:	a8014621 	.word	0xa8014621
   36f1c:	f9acf7ff 	.word	0xf9acf7ff
   36f20:	28004607 	.word	0x28004607
   36f24:	ac01d196 	.word	0xac01d196
   36f28:	f06fe776 	.word	0xf06fe776
   36f2c:	46380709 	.word	0x46380709
   36f30:	bdf0b005 	.word	0xbdf0b005

00036f34 <symbol_0005cc7>:
   36f34:	41f0e92d 	.word	0x41f0e92d
   36f38:	6813680c 	.word	0x6813680c
   36f3c:	fb034605 	.word	0xfb034605
   36f40:	2b00f304 	.word	0x2b00f304
   36f44:	684bda39 	.word	0x684bda39
   36f48:	460e4617 	.word	0x460e4617
   36f4c:	b1836852 	.word	0xb1836852
   36f50:	f1036889 	.word	0xf1036889
   36f54:	38014080 	.word	0x38014080
   36f58:	c020f851 	.word	0xc020f851
   36f5c:	0180eb01 	.word	0x0180eb01
   36f60:	0f00f1bc 	.word	0x0f00f1bc
   36f64:	e02ed003 	.word	0xe02ed003
   36f68:	0d04f851 	.word	0x0d04f851
   36f6c:	3b01bb58 	.word	0x3b01bb58
   36f70:	b17ad1fa 	.word	0xb17ad1fa
   36f74:	4180f102 	.word	0x4180f102
   36f78:	c008f8d7 	.word	0xc008f8d7
   36f7c:	f85c3901 	.word	0xf85c3901
   36f80:	b9780021 	.word	0xb9780021
   36f84:	0181eb0c 	.word	0x0181eb0c
   36f88:	f851e002 	.word	0xf851e002
   36f8c:	bb280d04 	.word	0xbb280d04
   36f90:	d1fa3a01 	.word	0xd1fa3a01
   36f94:	4631463a 	.word	0x4631463a
   36f98:	f7ff4628 	.word	0xf7ff4628
   36f9c:	b148ff0b 	.word	0xb148ff0b
   36fa0:	81f0e8bd 	.word	0x81f0e8bd
   36fa4:	46394632 	.word	0x46394632
   36fa8:	f7ff4628 	.word	0xf7ff4628
   36fac:	2800ff03 	.word	0x2800ff03
   36fb0:	4264d1f6 	.word	0x4264d1f6
   36fb4:	e8bd602c 	.word	0xe8bd602c
   36fb8:	f7ff81f0 	.word	0xf7ff81f0
   36fbc:	2800fe57 	.word	0x2800fe57
   36fc0:	602cd1ee 	.word	0x602cd1ee
   36fc4:	2a00e7f7 	.word	0x2a00e7f7
   36fc8:	f102d0e4 	.word	0xf102d0e4
   36fcc:	f8d74180 	.word	0xf8d74180
   36fd0:	3901c008 	.word	0x3901c008
   36fd4:	0021f85c 	.word	0x0021f85c
   36fd8:	d0d32800 	.word	0xd0d32800
   36fdc:	d8d94293 	.word	0xd8d94293
   36fe0:	2b00d3e0 	.word	0x2b00d3e0
   36fe4:	68b0d0d6 	.word	0x68b0d0d6
   36fe8:	4180f103 	.word	0x4180f103
   36fec:	f8503901 	.word	0xf8503901
   36ff0:	f85c8021 	.word	0xf85c8021
   36ff4:	0089e021 	.word	0x0089e021
   36ff8:	440845f0 	.word	0x440845f0
   36ffc:	0201eb0c 	.word	0x0201eb0c
   37000:	d3cfd8c8 	.word	0xd3cfd8c8
   37004:	e0064601 	.word	0xe0064601
   37008:	cd04f851 	.word	0xcd04f851
   3700c:	0d04f852 	.word	0x0d04f852
   37010:	d8bf4584 	.word	0xd8bf4584
   37014:	3b01d3c6 	.word	0x3b01d3c6
   37018:	e7bbd1f6 	.word	0xe7bbd1f6

0003701c <symbol_000d773>:
   3701c:	41f0e92d 	.word	0x41f0e92d
   37020:	6813680c 	.word	0x6813680c
   37024:	fb034605 	.word	0xfb034605
   37028:	2b00f304 	.word	0x2b00f304
   3702c:	684bdd64 	.word	0x684bdd64
   37030:	460e4617 	.word	0x460e4617
   37034:	b1836852 	.word	0xb1836852
   37038:	f1036889 	.word	0xf1036889
   3703c:	38014080 	.word	0x38014080
   37040:	c020f851 	.word	0xc020f851
   37044:	0180eb01 	.word	0x0180eb01
   37048:	0f00f1bc 	.word	0x0f00f1bc
   3704c:	e01fd003 	.word	0xe01fd003
   37050:	0d04f851 	.word	0x0d04f851
   37054:	3b01b9e0 	.word	0x3b01b9e0
   37058:	b182d1fa 	.word	0xb182d1fa
   3705c:	4180f102 	.word	0x4180f102
   37060:	c008f8d7 	.word	0xc008f8d7
   37064:	f85c3901 	.word	0xf85c3901
   37068:	28000021 	.word	0x28000021
   3706c:	eb0cd13b 	.word	0xeb0cd13b
   37070:	e0020181 	.word	0xe0020181
   37074:	0d04f851 	.word	0x0d04f851
   37078:	3a01b9a8 	.word	0x3a01b9a8
   3707c:	463ad1fa 	.word	0x463ad1fa
   37080:	46284631 	.word	0x46284631
   37084:	fe96f7ff 	.word	0xfe96f7ff
   37088:	602cb900 	.word	0x602cb900
   3708c:	81f0e8bd 	.word	0x81f0e8bd
   37090:	d0f42a00 	.word	0xd0f42a00
   37094:	4180f102 	.word	0x4180f102
   37098:	c008f8d7 	.word	0xc008f8d7
   3709c:	f85c3901 	.word	0xf85c3901
   370a0:	28000021 	.word	0x28000021
   370a4:	4293d0e3 	.word	0x4293d0e3
   370a8:	d31cd8e9 	.word	0xd31cd8e9
   370ac:	d0e62b00 	.word	0xd0e62b00
   370b0:	f10368b0 	.word	0xf10368b0
   370b4:	39014180 	.word	0x39014180
   370b8:	8021f850 	.word	0x8021f850
   370bc:	e021f85c 	.word	0xe021f85c
   370c0:	45f00089 	.word	0x45f00089
   370c4:	eb0c4408 	.word	0xeb0c4408
   370c8:	d8d80201 	.word	0xd8d80201
   370cc:	4601d30b 	.word	0x4601d30b
   370d0:	f851e006 	.word	0xf851e006
   370d4:	f852cd04 	.word	0xf852cd04
   370d8:	45840d04 	.word	0x45840d04
   370dc:	d302d8cf 	.word	0xd302d8cf
   370e0:	d1f63b01 	.word	0xd1f63b01
   370e4:	4632e7cb 	.word	0x4632e7cb
   370e8:	46284639 	.word	0x46284639
   370ec:	fe62f7ff 	.word	0xfe62f7ff
   370f0:	d1cb2800 	.word	0xd1cb2800
   370f4:	e7c84264 	.word	0xe7c84264
   370f8:	fdb8f7ff 	.word	0xfdb8f7ff
   370fc:	d0c42800 	.word	0xd0c42800
   37100:	81f0e8bd 	.word	0x81f0e8bd

00037104 <symbol_000f268>:
   37104:	bfac2a00 	.word	0xbfac2a00
   37108:	f04f2301 	.word	0xf04f2301
   3710c:	b5f033ff 	.word	0xb5f033ff
   37110:	680d2601 	.word	0x680d2601
   37114:	7ce2ea82 	.word	0x7ce2ea82
   37118:	f703fb05 	.word	0xf703fb05
   3711c:	ebacb085 	.word	0xebacb085
   37120:	2f007ce2 	.word	0x2f007ce2
   37124:	e9cd9602 	.word	0xe9cd9602
   37128:	f8cdc300 	.word	0xf8cdc300
   3712c:	4606d00c 	.word	0x4606d00c
   37130:	684bdd2c 	.word	0x684bdd2c
   37134:	b173460c 	.word	0xb173460c
   37138:	f10368a7 	.word	0xf10368a7
   3713c:	39014180 	.word	0x39014180
   37140:	0021f857 	.word	0x0021f857
   37144:	0181eb07 	.word	0x0181eb07
   37148:	e00eb118 	.word	0xe00eb118
   3714c:	0d04f851 	.word	0x0d04f851
   37150:	3b01b958 	.word	0x3b01b958
   37154:	b982d1fa 	.word	0xb982d1fa
   37158:	aa014621 	.word	0xaa014621
   3715c:	f7ff4630 	.word	0xf7ff4630
   37160:	b900f8f9 	.word	0xb900f8f9
   37164:	b0056035 	.word	0xb0056035
   37168:	2a00bdf0 	.word	0x2a00bdf0
   3716c:	2b01d0f4 	.word	0x2b01d0f4
   37170:	683bd8f2 	.word	0x683bd8f2
   37174:	d3ef459c 	.word	0xd3ef459c
   37178:	4622d9ee 	.word	0x4622d9ee
   3717c:	4630a901 	.word	0x4630a901
   37180:	fe18f7ff 	.word	0xfe18f7ff
   37184:	d1ee2800 	.word	0xd1ee2800
   37188:	e7eb426d 	.word	0xe7eb426d
   3718c:	f7ffaa01 	.word	0xf7ffaa01
   37190:	2800fd6d 	.word	0x2800fd6d
   37194:	b005d0e6 	.word	0xb005d0e6
   37198:	bf00bdf0 	.word	0xbf00bdf0

0003719c <symbol_000b923>:
   3719c:	47f0e92d 	.word	0x47f0e92d
   371a0:	23004606 	.word	0x23004606
   371a4:	b0862001 	.word	0xb0862001
   371a8:	4690428e 	.word	0x4690428e
   371ac:	90039000 	.word	0x90039000
   371b0:	3301e9cd 	.word	0x3301e9cd
   371b4:	3304e9cd 	.word	0x3304e9cd
   371b8:	80d1f000 	.word	0x80d1f000
   371bc:	4546460f 	.word	0x4546460f
   371c0:	80d5f000 	.word	0x80d5f000
   371c4:	b185687d 	.word	0xb185687d
   371c8:	f10568bb 	.word	0xf10568bb
   371cc:	3a014280 	.word	0x3a014280
   371d0:	1022f853 	.word	0x1022f853
   371d4:	0382eb03 	.word	0x0382eb03
   371d8:	e0bab129 	.word	0xe0bab129
   371dc:	2d04f853 	.word	0x2d04f853
   371e0:	f0402a00 	.word	0xf0402a00
   371e4:	3d0180b6 	.word	0x3d0180b6
   371e8:	f8d8d1f8 	.word	0xf8d8d1f8
   371ec:	25004004 	.word	0x25004004
   371f0:	d03d2c00 	.word	0xd03d2c00
   371f4:	3008f8d8 	.word	0x3008f8d8
   371f8:	4280f104 	.word	0x4280f104
   371fc:	f8533a01 	.word	0xf8533a01
   37200:	eb031022 	.word	0xeb031022
   37204:	b1190382 	.word	0xb1190382
   37208:	f853e004 	.word	0xf853e004
   3720c:	b90a2d04 	.word	0xb90a2d04
   37210:	d1fa3c01 	.word	0xd1fa3c01
   37214:	7310f242 	.word	0x7310f242
   37218:	0905eb04 	.word	0x0905eb04
   3721c:	f2004599 	.word	0xf2004599
   37220:	f8d680b0 	.word	0xf8d680b0
   37224:	45d1a004 	.word	0x45d1a004
   37228:	2104d925 	.word	0x2104d925
   3722c:	f0024648 	.word	0xf0024648
   37230:	4682fbf3 	.word	0x4682fbf3
   37234:	f0002800 	.word	0xf0002800
   37238:	68b180a4 	.word	0x68b180a4
   3723c:	6872b189 	.word	0x6872b189
   37240:	f7e20092 	.word	0xf7e20092
   37244:	e9d6fe35 	.word	0xe9d6fe35
   37248:	1e532001 	.word	0x1e532001
   3724c:	2200b13a 	.word	0x2200b13a
   37250:	1c593b01 	.word	0x1c593b01
   37254:	f1006002 	.word	0xf1006002
   37258:	d1f90004 	.word	0xd1f90004
   3725c:	f00268b0 	.word	0xf00268b0
   37260:	e9c6fbef 	.word	0xe9c6fbef
   37264:	ea4f9a01 	.word	0xea4f9a01
   37268:	f8d60289 	.word	0xf8d60289
   3726c:	e0259008 	.word	0xe0259008
   37270:	f8d64625 	.word	0xf8d64625
   37274:	f1baa004 	.word	0xf1baa004
   37278:	f0400f00 	.word	0xf0400f00
   3727c:	21048085 	.word	0x21048085
   37280:	f0022001 	.word	0xf0022001
   37284:	4681fbc9 	.word	0x4681fbc9
   37288:	d07a2800 	.word	0xd07a2800
   3728c:	b18968b1 	.word	0xb18968b1
   37290:	00926872 	.word	0x00926872
   37294:	fe0cf7e2 	.word	0xfe0cf7e2
   37298:	2001e9d6 	.word	0x2001e9d6
   3729c:	b13a1e53 	.word	0xb13a1e53
   372a0:	3b014652 	.word	0x3b014652
   372a4:	60021c59 	.word	0x60021c59
   372a8:	0004f100 	.word	0x0004f100
   372ac:	68b0d1f9 	.word	0x68b0d1f9
   372b0:	fbc6f002 	.word	0xfbc6f002
   372b4:	22042301 	.word	0x22042301
   372b8:	3901e9c6 	.word	0x3901e9c6
   372bc:	46482100 	.word	0x46482100
   372c0:	febaf009 	.word	0xfebaf009
   372c4:	23012100 	.word	0x23012100
   372c8:	601168b2 	.word	0x601168b2
   372cc:	b19c6033 	.word	0xb19c6033
   372d0:	4980f104 	.word	0x4980f104
   372d4:	39fff109 	.word	0x39fff109
   372d8:	0989ea4f 	.word	0x0989ea4f
   372dc:	3008f8d8 	.word	0x3008f8d8
   372e0:	f85368b2 	.word	0xf85368b2
   372e4:	444a3009 	.word	0x444a3009
   372e8:	462868b9 	.word	0x462868b9
   372ec:	fc14f7fe 	.word	0xfc14f7fe
   372f0:	f1a93c01 	.word	0xf1a93c01
   372f4:	d1f10904 	.word	0xd1f10904
   372f8:	683a2400 	.word	0x683a2400
   372fc:	3000f8d8 	.word	0x3000f8d8
   37300:	f302fb03 	.word	0xf302fb03
   37304:	98056033 	.word	0x98056033
   37308:	9a04b160 	.word	0x9a04b160
   3730c:	b13a1e53 	.word	0xb13a1e53
   37310:	3b012200 	.word	0x3b012200
   37314:	60021c5d 	.word	0x60021c5d
   37318:	0004f100 	.word	0x0004f100
   3731c:	9805d1f9 	.word	0x9805d1f9
   37320:	fb8ef002 	.word	0xfb8ef002
   37324:	23012200 	.word	0x23012200
   37328:	e9cd9802 	.word	0xe9cd9802
   3732c:	92053203 	.word	0x92053203
   37330:	9901b158 	.word	0x9901b158
   37334:	b1311e4b 	.word	0xb1311e4b
   37338:	1c593b01 	.word	0x1c593b01
   3733c:	f1006002 	.word	0xf1006002
   37340:	d1f90004 	.word	0xd1f90004
   37344:	f0029802 	.word	0xf0029802
   37348:	4620fb7b 	.word	0x4620fb7b
   3734c:	e8bdb006 	.word	0xe8bdb006
   37350:	f8d887f0 	.word	0xf8d887f0
   37354:	2c004004 	.word	0x2c004004
   37358:	af4cf47f 	.word	0xaf4cf47f
   3735c:	4668e75a 	.word	0x4668e75a
   37360:	ff8af7fe 	.word	0xff8af7fe
   37364:	28004604 	.word	0x28004604
   37368:	466fd1cd 	.word	0x466fd1cd
   3736c:	a803e727 	.word	0xa803e727
   37370:	f7fe4631 	.word	0xf7fe4631
   37374:	4604ff81 	.word	0x4604ff81
   37378:	d1c42800 	.word	0xd1c42800
   3737c:	080cf10d 	.word	0x080cf10d
   37380:	f06fe720 	.word	0xf06fe720
   37384:	e7be040f 	.word	0xe7be040f
   37388:	e76c46d1 	.word	0xe76c46d1

0003738c <symbol_0008c0f>:
   3738c:	b5002301 	.word	0xb5002301
   37390:	9200b085 	.word	0x9200b085
   37394:	e9cdaa01 	.word	0xe9cdaa01
   37398:	f8cd3301 	.word	0xf8cd3301
   3739c:	f7ffd00c 	.word	0xf7ffd00c
   373a0:	b005fefd 	.word	0xb005fefd
   373a4:	fb04f85d 	.word	0xfb04f85d

000373a8 <symbol_0007bb0>:
   373a8:	4ff0e92d 	.word	0x4ff0e92d
   373ac:	b0a3685e 	.word	0xb0a3685e
   373b0:	f8d3b196 	.word	0xf8d3b196
   373b4:	f1068008 	.word	0xf1068008
   373b8:	f1094980 	.word	0xf1094980
   373bc:	f85839ff 	.word	0xf85839ff
   373c0:	eb085029 	.word	0xeb085029
   373c4:	b96d0e89 	.word	0xb96d0e89
   373c8:	463746f4 	.word	0x463746f4
   373cc:	f85ce002 	.word	0xf85ce002
   373d0:	b93c4d04 	.word	0xb93c4d04
   373d4:	d1fa3f01 	.word	0xd1fa3f01
   373d8:	060bf06f 	.word	0x060bf06f
   373dc:	b0234630 	.word	0xb0234630
   373e0:	8ff0e8bd 	.word	0x8ff0e8bd
   373e4:	2d00681d 	.word	0x2d00681d
   373e8:	4614d0f6 	.word	0x4614d0f6
   373ec:	2200468a 	.word	0x2200468a
   373f0:	469b2101 	.word	0x469b2101
   373f4:	46056863 	.word	0x46056863
   373f8:	91139110 	.word	0x91139110
   373fc:	91199116 	.word	0x91199116
   37400:	e9cd911c 	.word	0xe9cd911c
   37404:	e9cd2211 	.word	0xe9cd2211
   37408:	e9cd2214 	.word	0xe9cd2214
   3740c:	e9cd2217 	.word	0xe9cd2217
   37410:	e9cd221a 	.word	0xe9cd221a
   37414:	2b00221d 	.word	0x2b00221d
   37418:	821af000 	.word	0x821af000
   3741c:	f10368a2 	.word	0xf10368a2
   37420:	39014180 	.word	0x39014180
   37424:	0021f852 	.word	0x0021f852
   37428:	0281eb02 	.word	0x0281eb02
   3742c:	e07bb120 	.word	0xe07bb120
   37430:	1d04f852 	.word	0x1d04f852
   37434:	d1772900 	.word	0xd1772900
   37438:	d1f93b01 	.word	0xd1f93b01
   3743c:	2029f858 	.word	0x2029f858
   37440:	d1772a00 	.word	0xd1772a00
   37444:	e0034672 	.word	0xe0034672
   37448:	1d04f852 	.word	0x1d04f852
   3744c:	d16f2900 	.word	0xd16f2900
   37450:	d1f93e01 	.word	0xd1f93e01
   37454:	4621a810 	.word	0x4621a810
   37458:	ff0ef7fe 	.word	0xff0ef7fe
   3745c:	28004606 	.word	0x28004606
   37460:	8092f000 	.word	0x8092f000
   37464:	98122700 	.word	0x98122700
   37468:	9a11b160 	.word	0x9a11b160
   3746c:	b13a1e53 	.word	0xb13a1e53
   37470:	3b012200 	.word	0x3b012200
   37474:	60021c5c 	.word	0x60021c5c
   37478:	0004f100 	.word	0x0004f100
   3747c:	9812d1f9 	.word	0x9812d1f9
   37480:	fadef002 	.word	0xfadef002
   37484:	23012200 	.word	0x23012200
   37488:	e9cd9815 	.word	0xe9cd9815
   3748c:	92123210 	.word	0x92123210
   37490:	9914b158 	.word	0x9914b158
   37494:	b1311e4b 	.word	0xb1311e4b
   37498:	1c593b01 	.word	0x1c593b01
   3749c:	f1006002 	.word	0xf1006002
   374a0:	d1f90004 	.word	0xd1f90004
   374a4:	f0029815 	.word	0xf0029815
   374a8:	2200facb 	.word	0x2200facb
   374ac:	98182301 	.word	0x98182301
   374b0:	3213e9cd 	.word	0x3213e9cd
   374b4:	b1589215 	.word	0xb1589215
   374b8:	1e4b9917 	.word	0x1e4b9917
   374bc:	3b01b131 	.word	0x3b01b131
   374c0:	60021c5d 	.word	0x60021c5d
   374c4:	0004f100 	.word	0x0004f100
   374c8:	9818d1f9 	.word	0x9818d1f9
   374cc:	fab8f002 	.word	0xfab8f002
   374d0:	23012200 	.word	0x23012200
   374d4:	e9cd981b 	.word	0xe9cd981b
   374d8:	92183216 	.word	0x92183216
   374dc:	991ab158 	.word	0x991ab158
   374e0:	b1311e4b 	.word	0xb1311e4b
   374e4:	1c5c3b01 	.word	0x1c5c3b01
   374e8:	f1006002 	.word	0xf1006002
   374ec:	d1f90004 	.word	0xd1f90004
   374f0:	f002981b 	.word	0xf002981b
   374f4:	2100faa5 	.word	0x2100faa5
   374f8:	911b2301 	.word	0x911b2301
   374fc:	3119e9cd 	.word	0x3119e9cd
   37500:	f43f2f00 	.word	0xf43f2f00
   37504:	9a1daf6b 	.word	0x9a1daf6b
   37508:	b1321e53 	.word	0xb1321e53
   3750c:	3b01463a 	.word	0x3b01463a
   37510:	60111c58 	.word	0x60111c58
   37514:	0204f102 	.word	0x0204f102
   37518:	4638d1f9 	.word	0x4638d1f9
   3751c:	fa90f002 	.word	0xfa90f002
   37520:	b0234630 	.word	0xb0234630
   37524:	8ff0e8bd 	.word	0x8ff0e8bd
   37528:	2029f858 	.word	0x2029f858
   3752c:	d0892a00 	.word	0xd0892a00
   37530:	d38f429e 	.word	0xd38f429e
   37534:	f200429e 	.word	0xf200429e
   37538:	2b008190 	.word	0x2b008190
   3753c:	68a1d08a 	.word	0x68a1d08a
   37540:	4280f103 	.word	0x4280f103
   37544:	f8513a01 	.word	0xf8513a01
   37548:	f8580022 	.word	0xf8580022
   3754c:	00926022 	.word	0x00926022
   37550:	44114286 	.word	0x44114286
   37554:	f4ff4490 	.word	0xf4ff4490
   37558:	f200af7d 	.word	0xf200af7d
   3755c:	460a817e 	.word	0x460a817e
   37560:	f852e008 	.word	0xf852e008
   37564:	f8580d04 	.word	0xf8580d04
   37568:	42881d04 	.word	0x42881d04
   3756c:	af72f63f 	.word	0xaf72f63f
   37570:	8173f0c0 	.word	0x8173f0c0
   37574:	d1f43b01 	.word	0xd1f43b01
   37578:	4621a810 	.word	0x4621a810
   3757c:	fe7cf7fe 	.word	0xfe7cf7fe
   37580:	28004606 	.word	0x28004606
   37584:	af6ef47f 	.word	0xaf6ef47f
   37588:	4659a813 	.word	0x4659a813
   3758c:	fe74f7fe 	.word	0xfe74f7fe
   37590:	28004606 	.word	0x28004606
   37594:	af66f47f 	.word	0xaf66f47f
   37598:	7210f242 	.word	0x7210f242
   3759c:	68672301 	.word	0x68672301
   375a0:	37029313 	.word	0x37029313
   375a4:	93104297 	.word	0x93104297
   375a8:	8193f200 	.word	0x8193f200
   375ac:	805cf8dd 	.word	0x805cf8dd
   375b0:	d91d4547 	.word	0xd91d4547
   375b4:	46382104 	.word	0x46382104
   375b8:	fa2ef002 	.word	0xfa2ef002
   375bc:	28004681 	.word	0x28004681
   375c0:	8187f000 	.word	0x8187f000
   375c4:	b1819918 	.word	0xb1819918
   375c8:	00929a17 	.word	0x00929a17
   375cc:	fc70f7e2 	.word	0xfc70f7e2
   375d0:	2017e9dd 	.word	0x2017e9dd
   375d4:	b1321e53 	.word	0xb1321e53
   375d8:	1c5a3b01 	.word	0x1c5a3b01
   375dc:	f1006006 	.word	0xf1006006
   375e0:	d1f90004 	.word	0xd1f90004
   375e4:	f0029818 	.word	0xf0029818
   375e8:	46b8fa2b 	.word	0x46b8fa2b
   375ec:	7917e9cd 	.word	0x7917e9cd
   375f0:	0f00f1b8 	.word	0x0f00f1b8
   375f4:	8171f000 	.word	0x8171f000
   375f8:	ea4f9e18 	.word	0xea4f9e18
   375fc:	27000288 	.word	0x27000288
   37600:	46394630 	.word	0x46394630
   37604:	fd18f009 	.word	0xfd18f009
   37608:	9b182201 	.word	0x9b182201
   3760c:	9b1a601f 	.word	0x9b1a601f
   37610:	42939216 	.word	0x42939216
   37614:	81b2f240 	.word	0x81b2f240
   37618:	20032104 	.word	0x20032104
   3761c:	f9fcf002 	.word	0xf9fcf002
   37620:	28004607 	.word	0x28004607
   37624:	8155f000 	.word	0x8155f000
   37628:	9a142303 	.word	0x9a142303
   3762c:	301de9cd 	.word	0x301de9cd
   37630:	2a009203 	.word	0x2a009203
   37634:	8171f000 	.word	0x8171f000
   37638:	0901f1b2 	.word	0x0901f1b2
   3763c:	f0009915 	.word	0xf0009915
   37640:	f85181cf 	.word	0xf85181cf
   37644:	28000029 	.word	0x28000029
   37648:	81c5f040 	.word	0x81c5f040
   3764c:	4280f102 	.word	0x4280f102
   37650:	464b3a01 	.word	0x464b3a01
   37654:	0282eb01 	.word	0x0282eb01
   37658:	f852e004 	.word	0xf852e004
   3765c:	28000d04 	.word	0x28000d04
   37660:	81aef040 	.word	0x81aef040
   37664:	d1f83b01 	.word	0xd1f83b01
   37668:	68082620 	.word	0x68082620
   3766c:	f04f2200 	.word	0xf04f2200
   37670:	e0024100 	.word	0xe0024100
   37674:	2a203201 	.word	0x2a203201
   37678:	4201d004 	.word	0x4201d004
   3767c:	0151ea4f 	.word	0x0151ea4f
   37680:	1ab3d0f8 	.word	0x1ab3d0f8
   37684:	031ff003 	.word	0x031ff003
   37688:	f0402b1f 	.word	0xf0402b1f
   3768c:	2300819f 	.word	0x2300819f
   37690:	9b119302 	.word	0x9b119302
   37694:	9304a813 	.word	0x9304a813
   37698:	eba33b01 	.word	0xeba33b01
   3769c:	93010809 	.word	0x93010809
   376a0:	1348ea4f 	.word	0x1348ea4f
   376a4:	93054619 	.word	0x93054619
   376a8:	f8fef7ff 	.word	0xf8fef7ff
   376ac:	28004606 	.word	0x28004606
   376b0:	aed9f47f 	.word	0xaed9f47f
   376b4:	0888ea4f 	.word	0x0888ea4f
   376b8:	9818e00d 	.word	0x9818e00d
   376bc:	f850a910 	.word	0xf850a910
   376c0:	aa133008 	.word	0xaa133008
   376c4:	f8403301 	.word	0xf8403301
   376c8:	46083008 	.word	0x46083008
   376cc:	fca6f7ff 	.word	0xfca6f7ff
   376d0:	f0402800 	.word	0xf0402800
   376d4:	a9138179 	.word	0xa9138179
   376d8:	f7ffa810 	.word	0xf7ffa810
   376dc:	2800fa0b 	.word	0x2800fa0b
   376e0:	9905daeb 	.word	0x9905daeb
   376e4:	f7ffa813 	.word	0xf7ffa813
   376e8:	4606f995 	.word	0x4606f995
   376ec:	f47f2800 	.word	0xf47f2800
   376f0:	f06faeba 	.word	0xf06faeba
   376f4:	9a030303 	.word	0x9a030303
   376f8:	b508e9cd 	.word	0xb508e9cd
   376fc:	4780f102 	.word	0x4780f102
   37700:	fb039a04 	.word	0xfb039a04
   37704:	f102f309 	.word	0xf102f309
   37708:	3a024280 	.word	0x3a024280
   3770c:	46150092 	.word	0x46150092
   37710:	ea4f9305 	.word	0xea4f9305
   37714:	93030389 	.word	0x93030389
   37718:	63c9ebc9 	.word	0x63c9ebc9
   3771c:	e9cd3f02 	.word	0xe9cd3f02
   37720:	e9cd3006 	.word	0xe9cd3006
   37724:	00b9a40a 	.word	0x00b9a40a
   37728:	9b019104 	.word	0x9b019104
   3772c:	f240454b 	.word	0xf240454b
   37730:	98038173 	.word	0x98038173
   37734:	9a159912 	.word	0x9a159912
   37738:	0a04f105 	.word	0x0a04f105
   3773c:	f8515812 	.word	0xf8515812
   37740:	9805300a 	.word	0x9805300a
   37744:	eb004293 	.word	0xeb004293
   37748:	9e180405 	.word	0x9e180405
   3774c:	814cf0c0 	.word	0x814cf0c0
   37750:	33fff04f 	.word	0x33fff04f
   37754:	26015133 	.word	0x26015133
   37758:	9f1e9a18 	.word	0x9f1e9a18
   3775c:	f1a55913 	.word	0xf1a55913
   37760:	44330b04 	.word	0x44330b04
   37764:	e04b5113 	.word	0xe04b5113
   37768:	806cf8dd 	.word	0x806cf8dd
   3776c:	46400092 	.word	0x46400092
   37770:	f0092100 	.word	0xf0092100
   37774:	2200fc61 	.word	0x2200fc61
   37778:	601a9b1b 	.word	0x601a9b1b
   3777c:	f1b99619 	.word	0xf1b99619
   37780:	f0000f00 	.word	0xf0000f00
   37784:	9b1580f9 	.word	0x9b1580f9
   37788:	589b9a04 	.word	0x589b9a04
   3778c:	99039a1b 	.word	0x99039a1b
   37790:	9a156013 	.word	0x9a156013
   37794:	58529b1b 	.word	0x58529b1b
   37798:	605aa919 	.word	0x605aa919
   3779c:	f10d9b18 	.word	0xf10d9b18
   377a0:	591b083c 	.word	0x591b083c
   377a4:	4608aa1f 	.word	0x4608aa1f
   377a8:	e9cd930f 	.word	0xe9cd930f
   377ac:	f8cd661f 	.word	0xf8cd661f
   377b0:	f7ff8084 	.word	0xf7ff8084
   377b4:	2800fcf3 	.word	0x2800fcf3
   377b8:	8106f040 	.word	0x8106f040
   377bc:	2a009a1d 	.word	0x2a009a1d
   377c0:	80c2f000 	.word	0x80c2f000
   377c4:	21000092 	.word	0x21000092
   377c8:	f0094638 	.word	0xf0094638
   377cc:	2300fc35 	.word	0x2300fc35
   377d0:	9b01603b 	.word	0x9b01603b
   377d4:	2b01961c 	.word	0x2b01961c
   377d8:	9b12a91c 	.word	0x9b12a91c
   377dc:	80edf000 	.word	0x80edf000
   377e0:	300bf853 	.word	0x300bf853
   377e4:	603ba819 	.word	0x603ba819
   377e8:	595b9b12 	.word	0x595b9b12
   377ec:	9b12607b 	.word	0x9b12607b
   377f0:	300af853 	.word	0x300af853
   377f4:	f7ff60bb 	.word	0xf7ff60bb
   377f8:	2800f97d 	.word	0x2800f97d
   377fc:	811cf340 	.word	0x811cf340
   37800:	59139a18 	.word	0x59139a18
   37804:	51133b01 	.word	0x51133b01
   37808:	2a009a1a 	.word	0x2a009a1a
   3780c:	2104d1ac 	.word	0x2104d1ac
   37810:	f0022001 	.word	0xf0022001
   37814:	4680f901 	.word	0x4680f901
   37818:	f0002800 	.word	0xf0002800
   3781c:	991b8140 	.word	0x991b8140
   37820:	9a1ab191 	.word	0x9a1ab191
   37824:	f7e20092 	.word	0xf7e20092
   37828:	e9ddfb43 	.word	0xe9ddfb43
   3782c:	4602101a 	.word	0x4602101a
   37830:	b1391e4b 	.word	0xb1391e4b
   37834:	3b012100 	.word	0x3b012100
   37838:	1c596011 	.word	0x1c596011
   3783c:	0204f102 	.word	0x0204f102
   37840:	981bd1f8 	.word	0x981bd1f8
   37844:	f8fcf002 	.word	0xf8fcf002
   37848:	e9cd2204 	.word	0xe9cd2204
   3784c:	e78e681a 	.word	0xe78e681a
   37850:	2029f858 	.word	0x2029f858
   37854:	f43f2a00 	.word	0xf43f2a00
   37858:	b355adf5 	.word	0xb355adf5
   3785c:	b9ee686e 	.word	0xb9ee686e
   37860:	20012104 	.word	0x20012104
   37864:	f8d8f002 	.word	0xf8d8f002
   37868:	b3904607 	.word	0xb3904607
   3786c:	b18168a9 	.word	0xb18168a9
   37870:	0092686a 	.word	0x0092686a
   37874:	fb1cf7e2 	.word	0xfb1cf7e2
   37878:	2001e9d5 	.word	0x2001e9d5
   3787c:	b1321e53 	.word	0xb1321e53
   37880:	1c593b01 	.word	0x1c593b01
   37884:	f1006006 	.word	0xf1006006
   37888:	d1f90004 	.word	0xd1f90004
   3788c:	f00268a8 	.word	0xf00268a8
   37890:	2301f8d7 	.word	0x2301f8d7
   37894:	e9c52204 	.word	0xe9c52204
   37898:	e0013701 	.word	0xe0013701
   3789c:	00b268af 	.word	0x00b268af
   378a0:	46382100 	.word	0x46382100
   378a4:	fbc8f009 	.word	0xfbc8f009
   378a8:	23012100 	.word	0x23012100
   378ac:	601168aa 	.word	0x601168aa
   378b0:	f1ba602b 	.word	0xf1ba602b
   378b4:	d0070f00 	.word	0xd0070f00
   378b8:	46504621 	.word	0x46504621
   378bc:	fcdcf7fe 	.word	0xfcdcf7fe
   378c0:	28004606 	.word	0x28004606
   378c4:	adcef47f 	.word	0xadcef47f
   378c8:	46302600 	.word	0x46302600
   378cc:	e8bdb023 	.word	0xe8bdb023
   378d0:	27008ff0 	.word	0x27008ff0
   378d4:	060ff06f 	.word	0x060ff06f
   378d8:	2104e5c5 	.word	0x2104e5c5
   378dc:	f0022001 	.word	0xf0022001
   378e0:	4606f89b 	.word	0x4606f89b
   378e4:	d0f42800 	.word	0xd0f42800
   378e8:	b1899918 	.word	0xb1899918
   378ec:	00929a17 	.word	0x00929a17
   378f0:	fadef7e2 	.word	0xfadef7e2
   378f4:	3017e9dd 	.word	0x3017e9dd
   378f8:	b13b1e5a 	.word	0xb13b1e5a
   378fc:	3a014643 	.word	0x3a014643
   37900:	60031c57 	.word	0x60031c57
   37904:	0004f100 	.word	0x0004f100
   37908:	9818d1f9 	.word	0x9818d1f9
   3790c:	f898f002 	.word	0xf898f002
   37910:	22042301 	.word	0x22042301
   37914:	3617e9cd 	.word	0x3617e9cd
   37918:	231fe671 	.word	0x231fe671
   3791c:	93024619 	.word	0x93024619
   37920:	f7fea810 	.word	0xf7fea810
   37924:	4606ffc1 	.word	0x4606ffc1
   37928:	f47f2800 	.word	0xf47f2800
   3792c:	9902ad9c 	.word	0x9902ad9c
   37930:	f7fea813 	.word	0xf7fea813
   37934:	4606ffb9 	.word	0x4606ffb9
   37938:	f47f2800 	.word	0xf47f2800
   3793c:	9b14ad94 	.word	0x9b14ad94
   37940:	f1039303 	.word	0xf1039303
   37944:	e6a439ff 	.word	0xe6a439ff
   37948:	20012104 	.word	0x20012104
   3794c:	f002920d 	.word	0xf002920d
   37950:	4603f863 	.word	0x4603f863
   37954:	f0002800 	.word	0xf0002800
   37958:	b14780a2 	.word	0xb14780a2
   3795c:	46399a0d 	.word	0x46399a0d
   37960:	f7e2900c 	.word	0xf7e2900c
   37964:	4638faa5 	.word	0x4638faa5
   37968:	f86af002 	.word	0xf86af002
   3796c:	461f9b0c 	.word	0x461f9b0c
   37970:	e9cd2204 	.word	0xe9cd2204
   37974:	e726631d 	.word	0xe726631d
   37978:	e707464b 	.word	0xe707464b
   3797c:	20022104 	.word	0x20022104
   37980:	f84af002 	.word	0xf84af002
   37984:	28004606 	.word	0x28004606
   37988:	991bd0a3 	.word	0x991bd0a3
   3798c:	9a1ab189 	.word	0x9a1ab189
   37990:	f7e20092 	.word	0xf7e20092
   37994:	e9ddfa8d 	.word	0xe9ddfa8d
   37998:	4618131a 	.word	0x4618131a
   3799c:	b1311e4a 	.word	0xb1311e4a
   379a0:	1c503a01 	.word	0x1c503a01
   379a4:	f103601f 	.word	0xf103601f
   379a8:	d1f90304 	.word	0xd1f90304
   379ac:	f002981b 	.word	0xf002981b
   379b0:	2302f847 	.word	0x2302f847
   379b4:	361ae9cd 	.word	0x361ae9cd
   379b8:	595be62e 	.word	0x595be62e
   379bc:	e715a819 	.word	0xe715a819
   379c0:	f103015b 	.word	0xf103015b
   379c4:	e6510620 	.word	0xe6510620
   379c8:	e54c4606 	.word	0xe54c4606
   379cc:	031ff1c3 	.word	0x031ff1c3
   379d0:	46199302 	.word	0x46199302
   379d4:	ea4fe7a4 	.word	0xea4fe7a4
   379d8:	f1031349 	.word	0xf1031349
   379dc:	e6450620 	.word	0xe6450620
   379e0:	26206808 	.word	0x26206808
   379e4:	e641464b 	.word	0xe641464b
   379e8:	b192594f 	.word	0xb192594f
   379ec:	f04f469c 	.word	0xf04f469c
   379f0:	46610b00 	.word	0x46610b00
   379f4:	ea4b465b 	.word	0xea4b465b
   379f8:	f7e10007 	.word	0xf7e10007
   379fc:	2300f9df 	.word	0x2300f9df
   37a00:	32fff04f 	.word	0x32fff04f
   37a04:	bf08428b 	.word	0xbf08428b
   37a08:	d2004282 	.word	0xd2004282
   37a0c:	51304610 	.word	0x51304610
   37a10:	f04fe6a1 	.word	0xf04fe6a1
   37a14:	e7fa30ff 	.word	0xe7fa30ff
   37a18:	6b07e9dd 	.word	0x6b07e9dd
   37a1c:	5a09e9dd 	.word	0x5a09e9dd
   37a20:	2d009c0b 	.word	0x2d009c0b
   37a24:	a916d05f 	.word	0xa916d05f
   37a28:	f7fe4628 	.word	0xf7fe4628
   37a2c:	2800fc25 	.word	0x2800fc25
   37a30:	4606d053 	.word	0x4606d053
   37a34:	e5169f1e 	.word	0xe5169f1e
   37a38:	9b182501 	.word	0x9b182501
   37a3c:	591baa1f 	.word	0x591baa1f
   37a40:	a819a913 	.word	0xa819a913
   37a44:	f8cd930f 	.word	0xf8cd930f
   37a48:	e9cd8084 	.word	0xe9cd8084
   37a4c:	f7ff551f 	.word	0xf7ff551f
   37a50:	2800fba5 	.word	0x2800fba5
   37a54:	9b06d1b8 	.word	0x9b06d1b8
   37a58:	f1039a01 	.word	0xf1039a01
   37a5c:	3b016300 	.word	0x3b016300
   37a60:	015e4413 	.word	0x015e4413
   37a64:	a8194631 	.word	0xa8194631
   37a68:	ff1ef7fe 	.word	0xff1ef7fe
   37a6c:	d1ab2800 	.word	0xd1ab2800
   37a70:	aa19a910 	.word	0xaa19a910
   37a74:	f7ff4608 	.word	0xf7ff4608
   37a78:	4603fad1 	.word	0x4603fad1
   37a7c:	a91fbb58 	.word	0xa91fbb58
   37a80:	930fa810 	.word	0x930fa810
   37a84:	551fe9cd 	.word	0x551fe9cd
   37a88:	8084f8cd 	.word	0x8084f8cd
   37a8c:	fb2ef7fe 	.word	0xfb2ef7fe
   37a90:	db072800 	.word	0xdb072800
   37a94:	465d9b01 	.word	0x465d9b01
   37a98:	93013b01 	.word	0x93013b01
   37a9c:	f06fe645 	.word	0xf06fe645
   37aa0:	e4e0060f 	.word	0xe4e0060f
   37aa4:	a819a913 	.word	0xa819a913
   37aa8:	fbe6f7fe 	.word	0xfbe6f7fe
   37aac:	d18b2800 	.word	0xd18b2800
   37ab0:	a8194631 	.word	0xa8194631
   37ab4:	fef8f7fe 	.word	0xfef8f7fe
   37ab8:	d1852800 	.word	0xd1852800
   37abc:	aa19a910 	.word	0xaa19a910
   37ac0:	f7ff4608 	.word	0xf7ff4608
   37ac4:	2800fa37 	.word	0x2800fa37
   37ac8:	af7ef47f 	.word	0xaf7ef47f
   37acc:	59139a18 	.word	0x59139a18
   37ad0:	51133b01 	.word	0x51133b01
   37ad4:	4606e7de 	.word	0x4606e7de
   37ad8:	f8dbe4c5 	.word	0xf8dbe4c5
   37adc:	68223000 	.word	0x68223000
   37ae0:	f302fb03 	.word	0xf302fb03
   37ae4:	f1ba602b 	.word	0xf1ba602b
   37ae8:	d0050f00 	.word	0xd0050f00
   37aec:	a8109902 	.word	0xa8109902
   37af0:	ff90f7fe 	.word	0xff90f7fe
   37af4:	b1084606 	.word	0xb1084606
   37af8:	e4b49f1e 	.word	0xe4b49f1e
   37afc:	a9106823 	.word	0xa9106823
   37b00:	93104650 	.word	0x93104650
   37b04:	fbb8f7fe 	.word	0xfbb8f7fe
   37b08:	28004606 	.word	0x28004606
   37b0c:	2401d1f4 	.word	0x2401d1f4
   37b10:	a91fab0f 	.word	0xa91fab0f
   37b14:	960f4650 	.word	0x960f4650
   37b18:	441fe9cd 	.word	0x441fe9cd
   37b1c:	f7fe9321 	.word	0xf7fe9321
   37b20:	2800fae5 	.word	0x2800fae5
   37b24:	f8cad1e8 	.word	0xf8cad1e8
   37b28:	e7e54000 	.word	0xe7e54000

00037b2c <symbol_000dbba>:
   37b2c:	41f0e92d 	.word	0x41f0e92d
   37b30:	46176853 	.word	0x46176853
   37b34:	6894b183 	.word	0x6894b183
   37b38:	4580f103 	.word	0x4580f103
   37b3c:	f8543d01 	.word	0xf8543d01
   37b40:	eb042025 	.word	0xeb042025
   37b44:	b12a0485 	.word	0xb12a0485
   37b48:	f854e11a 	.word	0xf854e11a
   37b4c:	2d005d04 	.word	0x2d005d04
   37b50:	8116f040 	.word	0x8116f040
   37b54:	d1f83b01 	.word	0xd1f83b01
   37b58:	4606460a 	.word	0x4606460a
   37b5c:	463b4601 	.word	0x463b4601
   37b60:	f7ff2000 	.word	0xf7ff2000
   37b64:	2800fc21 	.word	0x2800fc21
   37b68:	f06fd151 	.word	0xf06fd151
   37b6c:	68714840 	.word	0x68714840
   37b70:	68b0b191 	.word	0x68b0b191
   37b74:	0308eb01 	.word	0x0308eb01
   37b78:	c023f850 	.word	0xc023f850
   37b7c:	0283eb00 	.word	0x0283eb00
   37b80:	0f00f1bc 	.word	0x0f00f1bc
   37b84:	4614d156 	.word	0x4614d156
   37b88:	e003460b 	.word	0xe003460b
   37b8c:	5d04f854 	.word	0x5d04f854
   37b90:	d14f2d00 	.word	0xd14f2d00
   37b94:	d1f93b01 	.word	0xd1f93b01
   37b98:	4440f06f 	.word	0x4440f06f
   37b9c:	46304639 	.word	0x46304639
   37ba0:	ffa8f7fe 	.word	0xffa8f7fe
   37ba4:	db422800 	.word	0xdb422800
   37ba8:	683b6835 	.word	0x683b6835
   37bac:	f305fb03 	.word	0xf305fb03
   37bb0:	dd2e2b00 	.word	0xdd2e2b00
   37bb4:	687a6873 	.word	0x687a6873
   37bb8:	68b1b183 	.word	0x68b1b183
   37bbc:	f8511918 	.word	0xf8511918
   37bc0:	eb01c020 	.word	0xeb01c020
   37bc4:	f1bc0180 	.word	0xf1bc0180
   37bc8:	d0050f00 	.word	0xd0050f00
   37bcc:	f851e090 	.word	0xf851e090
   37bd0:	28000d04 	.word	0x28000d04
   37bd4:	808cf040 	.word	0x808cf040
   37bd8:	d1f83b01 	.word	0xd1f83b01
   37bdc:	f8d7b18a 	.word	0xf8d7b18a
   37be0:	1911c008 	.word	0x1911c008
   37be4:	0021f85c 	.word	0x0021f85c
   37be8:	f0402800 	.word	0xf0402800
   37bec:	eb0c80be 	.word	0xeb0c80be
   37bf0:	e0040181 	.word	0xe0040181
   37bf4:	0d04f851 	.word	0x0d04f851
   37bf8:	f0402800 	.word	0xf0402800
   37bfc:	3a018083 	.word	0x3a018083
   37c00:	463ad1f8 	.word	0x463ad1f8
   37c04:	46304631 	.word	0x46304631
   37c08:	f8d4f7ff 	.word	0xf8d4f7ff
   37c0c:	e8bdb140 	.word	0xe8bdb140
   37c10:	463a81f0 	.word	0x463a81f0
   37c14:	46304631 	.word	0x46304631
   37c18:	f828f7ff 	.word	0xf828f7ff
   37c1c:	d1f62800 	.word	0xd1f62800
   37c20:	46396035 	.word	0x46396035
   37c24:	f7fe4630 	.word	0xf7fe4630
   37c28:	2800ff65 	.word	0x2800ff65
   37c2c:	2000dabc 	.word	0x2000dabc
   37c30:	81f0e8bd 	.word	0x81f0e8bd
   37c34:	2c006834 	.word	0x2c006834
   37c38:	683bdaae 	.word	0x683bdaae
   37c3c:	f304fb03 	.word	0xf304fb03
   37c40:	da232b00 	.word	0xda232b00
   37c44:	0f00f1bc 	.word	0x0f00f1bc
   37c48:	4613d129 	.word	0x4613d129
   37c4c:	f853e002 	.word	0xf853e002
   37c50:	bb222d04 	.word	0xbb222d04
   37c54:	d1fa3901 	.word	0xd1fa3901
   37c58:	b173687b 	.word	0xb173687b
   37c5c:	c008f8d7 	.word	0xc008f8d7
   37c60:	0208eb03 	.word	0x0208eb03
   37c64:	5022f85c 	.word	0x5022f85c
   37c68:	0282eb0c 	.word	0x0282eb0c
   37c6c:	e071b11d 	.word	0xe071b11d
   37c70:	5d04f852 	.word	0x5d04f852
   37c74:	3b01bb05 	.word	0x3b01bb05
   37c78:	463ad1fa 	.word	0x463ad1fa
   37c7c:	46304631 	.word	0x46304631
   37c80:	f898f7ff 	.word	0xf898f7ff
   37c84:	d1c22800 	.word	0xd1c22800
   37c88:	e7706034 	.word	0xe7706034
   37c8c:	4631463a 	.word	0x4631463a
   37c90:	f7fe4630 	.word	0xf7fe4630
   37c94:	2800ffeb 	.word	0x2800ffeb
   37c98:	e8bdd0f6 	.word	0xe8bdd0f6
   37c9c:	687b81f0 	.word	0x687b81f0
   37ca0:	d0ea2b00 	.word	0xd0ea2b00
   37ca4:	c008f8d7 	.word	0xc008f8d7
   37ca8:	0208eb03 	.word	0x0208eb03
   37cac:	5022f85c 	.word	0x5022f85c
   37cb0:	0282eb0c 	.word	0x0282eb0c
   37cb4:	d0de2d00 	.word	0xd0de2d00
   37cb8:	d8de4299 	.word	0xd8de4299
   37cbc:	2900d34a 	.word	0x2900d34a
   37cc0:	eb01d0db 	.word	0xeb01d0db
   37cc4:	f8500308 	.word	0xf8500308
   37cc8:	f85c2023 	.word	0xf85c2023
   37ccc:	009b5023 	.word	0x009b5023
   37cd0:	44184295 	.word	0x44184295
   37cd4:	d3d04463 	.word	0xd3d04463
   37cd8:	e03bd907 	.word	0xe03bd907
   37cdc:	5d04f850 	.word	0x5d04f850
   37ce0:	2d04f853 	.word	0x2d04f853
   37ce4:	d8c84295 	.word	0xd8c84295
   37ce8:	3901d334 	.word	0x3901d334
   37cec:	e7c4d1f6 	.word	0xe7c4d1f6
   37cf0:	d0862a00 	.word	0xd0862a00
   37cf4:	c008f8d7 	.word	0xc008f8d7
   37cf8:	f85c1911 	.word	0xf85c1911
   37cfc:	28000021 	.word	0x28000021
   37d00:	af75f43f 	.word	0xaf75f43f
   37d04:	f63f4293 	.word	0xf63f4293
   37d08:	d32eaf7c 	.word	0xd32eaf7c
   37d0c:	f43f2b00 	.word	0xf43f2b00
   37d10:	68b1af78 	.word	0x68b1af78
   37d14:	f851191a 	.word	0xf851191a
   37d18:	f85c0022 	.word	0xf85c0022
   37d1c:	0092e022 	.word	0x0092e022
   37d20:	44114586 	.word	0x44114586
   37d24:	f4ff4462 	.word	0xf4ff4462
   37d28:	d908af6c 	.word	0xd908af6c
   37d2c:	f851e01d 	.word	0xf851e01d
   37d30:	f852cd04 	.word	0xf852cd04
   37d34:	45840d04 	.word	0x45840d04
   37d38:	af63f63f 	.word	0xaf63f63f
   37d3c:	3b01d315 	.word	0x3b01d315
   37d40:	463ad1f5 	.word	0x463ad1f5
   37d44:	46304631 	.word	0x46304631
   37d48:	f834f7ff 	.word	0xf834f7ff
   37d4c:	f47f2800 	.word	0xf47f2800
   37d50:	e765af5e 	.word	0xe765af5e
   37d54:	46394632 	.word	0x46394632
   37d58:	f7ff4630 	.word	0xf7ff4630
   37d5c:	2800f82b 	.word	0x2800f82b
   37d60:	af55f47f 	.word	0xaf55f47f
   37d64:	60344264 	.word	0x60344264
   37d68:	4632e701 	.word	0x4632e701
   37d6c:	46304639 	.word	0x46304639
   37d70:	f820f7ff 	.word	0xf820f7ff
   37d74:	f47f2800 	.word	0xf47f2800
   37d78:	426daf4a 	.word	0x426daf4a
   37d7c:	e70d6035 	.word	0xe70d6035
   37d80:	2b00683b 	.word	0x2b00683b
   37d84:	aee8f6bf 	.word	0xaee8f6bf
   37d88:	0009f06f 	.word	0x0009f06f
   37d8c:	bf00e73f 	.word	0xbf00e73f

00037d90 <symbol_0005f38>:
   37d90:	41f0e92d 	.word	0x41f0e92d
   37d94:	2501460f 	.word	0x2501460f
   37d98:	68bb2100 	.word	0x68bb2100
   37d9c:	4604b086 	.word	0x4604b086
   37da0:	95004616 	.word	0x95004616
   37da4:	e9cd9503 	.word	0xe9cd9503
   37da8:	e9cd1101 	.word	0xe9cd1101
   37dac:	2b001104 	.word	0x2b001104
   37db0:	6879d040 	.word	0x6879d040
   37db4:	d0111e4a 	.word	0xd0111e4a
   37db8:	0022f853 	.word	0x0022f853
   37dbc:	f0402800 	.word	0xf0402800
   37dc0:	f10180c4 	.word	0xf10180c4
   37dc4:	39014180 	.word	0x39014180
   37dc8:	0381eb03 	.word	0x0381eb03
   37dcc:	f853e004 	.word	0xf853e004
   37dd0:	29001d04 	.word	0x29001d04
   37dd4:	80b9f040 	.word	0x80b9f040
   37dd8:	d1f83a01 	.word	0xd1f83a01
   37ddc:	683b2501 	.word	0x683b2501
   37de0:	21049300 	.word	0x21049300
   37de4:	f0014628 	.word	0xf0014628
   37de8:	4680fe17 	.word	0x4680fe17
   37dec:	f0002800 	.word	0xf0002800
   37df0:	9902813c 	.word	0x9902813c
   37df4:	9a01b189 	.word	0x9a01b189
   37df8:	f7e20092 	.word	0xf7e20092
   37dfc:	e9ddf859 	.word	0xe9ddf859
   37e00:	1e532001 	.word	0x1e532001
   37e04:	2200b13a 	.word	0x2200b13a
   37e08:	1c593b01 	.word	0x1c593b01
   37e0c:	f1006002 	.word	0xf1006002
   37e10:	d1f90004 	.word	0xd1f90004
   37e14:	f0019802 	.word	0xf0019802
   37e18:	e9cdfe13 	.word	0xe9cdfe13
   37e1c:	00ad5801 	.word	0x00ad5801
   37e20:	2100462a 	.word	0x2100462a
   37e24:	f0094640 	.word	0xf0094640
   37e28:	462af907 	.word	0x462af907
   37e2c:	980268b9 	.word	0x980268b9
   37e30:	f83ef7e2 	.word	0xf83ef7e2
   37e34:	a8034631 	.word	0xa8034631
   37e38:	fa1ef7fe 	.word	0xfa1ef7fe
   37e3c:	28004607 	.word	0x28004607
   37e40:	9e01d15d 	.word	0x9e01d15d
   37e44:	f0002e00 	.word	0xf0002e00
   37e48:	4601810e 	.word	0x4601810e
   37e4c:	3d049d02 	.word	0x3d049d02
   37e50:	f8552200 	.word	0xf8552200
   37e54:	e0040f04 	.word	0xe0040f04
   37e58:	f1012a20 	.word	0xf1012a20
   37e5c:	f0000101 	.word	0xf0000101
   37e60:	fa208081 	.word	0xfa208081
   37e64:	f013f302 	.word	0xf013f302
   37e68:	f1020301 	.word	0xf1020301
   37e6c:	d0f30201 	.word	0xd0f30201
   37e70:	b1b59d04 	.word	0xb1b59d04
   37e74:	46842000 	.word	0x46842000
   37e78:	3f049f05 	.word	0x3f049f05
   37e7c:	f8572200 	.word	0xf8572200
   37e80:	e0036f04 	.word	0xe0036f04
   37e84:	f1002a20 	.word	0xf1002a20
   37e88:	d0710001 	.word	0xd0710001
   37e8c:	f302fa26 	.word	0xf302fa26
   37e90:	0301f013 	.word	0x0301f013
   37e94:	0201f102 	.word	0x0201f102
   37e98:	4281d0f4 	.word	0x4281d0f4
   37e9c:	4601bf28 	.word	0x4601bf28
   37ea0:	4668460d 	.word	0x4668460d
   37ea4:	f7fe4629 	.word	0xf7fe4629
   37ea8:	4607fdb5 	.word	0x4607fdb5
   37eac:	4629bb38 	.word	0x4629bb38
   37eb0:	f7fea803 	.word	0xf7fea803
   37eb4:	4607fdaf 	.word	0x4607fdaf
   37eb8:	2301bb08 	.word	0x2301bb08
   37ebc:	4640f06f 	.word	0x4640f06f
   37ec0:	93009303 	.word	0x93009303
   37ec4:	b17f9f01 	.word	0xb17f9f01
   37ec8:	19ba9802 	.word	0x19ba9802
   37ecc:	3022f850 	.word	0x3022f850
   37ed0:	0282eb00 	.word	0x0282eb00
   37ed4:	d1512b00 	.word	0xd1512b00
   37ed8:	e003463b 	.word	0xe003463b
   37edc:	1d04f852 	.word	0x1d04f852
   37ee0:	d14b2900 	.word	0xd14b2900
   37ee4:	d1f93b01 	.word	0xd1f93b01
   37ee8:	a8034629 	.word	0xa8034629
   37eec:	fcdcf7fe 	.word	0xfcdcf7fe
   37ef0:	b9204607 	.word	0xb9204607
   37ef4:	4620a903 	.word	0x4620a903
   37ef8:	f9bef7fe 	.word	0xf9bef7fe
   37efc:	98024607 	.word	0x98024607
   37f00:	9a01b160 	.word	0x9a01b160
   37f04:	b13a1e53 	.word	0xb13a1e53
   37f08:	3b012200 	.word	0x3b012200
   37f0c:	60021c5c 	.word	0x60021c5c
   37f10:	0004f100 	.word	0x0004f100
   37f14:	9802d1f9 	.word	0x9802d1f9
   37f18:	fd92f001 	.word	0xfd92f001
   37f1c:	23012200 	.word	0x23012200
   37f20:	e9cd9805 	.word	0xe9cd9805
   37f24:	92023200 	.word	0x92023200
   37f28:	9904b158 	.word	0x9904b158
   37f2c:	b1311e4b 	.word	0xb1311e4b
   37f30:	1c593b01 	.word	0x1c593b01
   37f34:	f1006002 	.word	0xf1006002
   37f38:	d1f90004 	.word	0xd1f90004
   37f3c:	f0019805 	.word	0xf0019805
   37f40:	4638fd7f 	.word	0x4638fd7f
   37f44:	e8bdb006 	.word	0xe8bdb006
   37f48:	f24281f0 	.word	0xf24281f0
   37f4c:	68397310 	.word	0x68397310
   37f50:	429d1c55 	.word	0x429d1c55
   37f54:	f2009100 	.word	0xf2009100
   37f58:	2d008083 	.word	0x2d008083
   37f5c:	af41f47f 	.word	0xaf41f47f
   37f60:	e75d46a8 	.word	0xe75d46a8
   37f64:	42be3701 	.word	0x42be3701
   37f68:	af72f47f 	.word	0xaf72f47f
   37f6c:	e77f4619 	.word	0xe77f4619
   37f70:	0c01f10c 	.word	0x0c01f10c
   37f74:	d18145ac 	.word	0xd18145ac
   37f78:	e792461d 	.word	0xe792461d
   37f7c:	2b009b00 	.word	0x2b009b00
   37f80:	2100d0b2 	.word	0x2100d0b2
   37f84:	f1a0468e 	.word	0xf1a0468e
   37f88:	22000c04 	.word	0x22000c04
   37f8c:	0f04f85c 	.word	0x0f04f85c
   37f90:	2a20e003 	.word	0x2a20e003
   37f94:	0101f101 	.word	0x0101f101
   37f98:	fa20d042 	.word	0xfa20d042
   37f9c:	f013f302 	.word	0xf013f302
   37fa0:	f1020301 	.word	0xf1020301
   37fa4:	d0f40201 	.word	0xd0f40201
   37fa8:	f7fe4668 	.word	0xf7fe4668
   37fac:	4607fd33 	.word	0x4607fd33
   37fb0:	d1a42800 	.word	0xd1a42800
   37fb4:	c010f8dd 	.word	0xc010f8dd
   37fb8:	0f00f1bc 	.word	0x0f00f1bc
   37fbc:	4601d04e 	.word	0x4601d04e
   37fc0:	9f054686 	.word	0x9f054686
   37fc4:	22003f04 	.word	0x22003f04
   37fc8:	0f04f857 	.word	0x0f04f857
   37fcc:	2a20e003 	.word	0x2a20e003
   37fd0:	0101f101 	.word	0x0101f101
   37fd4:	fa20d02a 	.word	0xfa20d02a
   37fd8:	f013f302 	.word	0xf013f302
   37fdc:	f1020301 	.word	0xf1020301
   37fe0:	d0f40201 	.word	0xd0f40201
   37fe4:	f7fea803 	.word	0xf7fea803
   37fe8:	4607fd15 	.word	0x4607fd15
   37fec:	d1862800 	.word	0xd1862800
   37ff0:	4668a903 	.word	0x4668a903
   37ff4:	fd7ef7fe 	.word	0xfd7ef7fe
   37ff8:	db1d2800 	.word	0xdb1d2800
   37ffc:	4669aa03 	.word	0x4669aa03
   38000:	f7fe4668 	.word	0xf7fe4668
   38004:	4607fed7 	.word	0x4607fed7
   38008:	f47f2800 	.word	0xf47f2800
   3800c:	2101af78 	.word	0x2101af78
   38010:	f7fe4668 	.word	0xf7fe4668
   38014:	4607fcff 	.word	0x4607fcff
   38018:	f43f2800 	.word	0xf43f2800
   3801c:	e76eaf53 	.word	0xe76eaf53
   38020:	0e01f10e 	.word	0x0e01f10e
   38024:	d1b045be 	.word	0xd1b045be
   38028:	e7bd4619 	.word	0xe7bd4619
   3802c:	0e01f10e 	.word	0x0e01f10e
   38030:	d1c845e6 	.word	0xd1c845e6
   38034:	e7d54619 	.word	0xe7d54619
   38038:	466aa903 	.word	0x466aa903
   3803c:	f7fe4608 	.word	0xf7fe4608
   38040:	4607feb9 	.word	0x4607feb9
   38044:	f47f2800 	.word	0xf47f2800
   38048:	2101af5a 	.word	0x2101af5a
   3804c:	f7fea803 	.word	0xf7fea803
   38050:	4607fce1 	.word	0x4607fce1
   38054:	f43f2800 	.word	0xf43f2800
   38058:	e750af35 	.word	0xe750af35
   3805c:	e7c14661 	.word	0xe7c14661
   38060:	070ff06f 	.word	0x070ff06f
   38064:	4631e75a 	.word	0x4631e75a
   38068:	9802e702 	.word	0x9802e702
   3806c:	070ff06f 	.word	0x070ff06f
   38070:	bf00e746 	.word	0xbf00e746

00038074 <symbol_000644e>:
   38074:	43f0e92d 	.word	0x43f0e92d
   38078:	6f80f5b1 	.word	0x6f80f5b1
   3807c:	4d04f2ad 	.word	0x4d04f2ad
   38080:	80a5f200 	.word	0x80a5f200
   38084:	4617460d 	.word	0x4617460d
   38088:	46694606 	.word	0x46694606
   3808c:	462a4618 	.word	0x462a4618
   38090:	460747b8 	.word	0x460747b8
   38094:	4638b120 	.word	0x4638b120
   38098:	4d04f20d 	.word	0x4d04f20d
   3809c:	83f0e8bd 	.word	0x83f0e8bd
   380a0:	f0002d00 	.word	0xf0002d00
   380a4:	f89d808a 	.word	0xf89d808a
   380a8:	2b003000 	.word	0x2b003000
   380ac:	8089f040 	.word	0x8089f040
   380b0:	4604466b 	.word	0x4604466b
   380b4:	f813e003 	.word	0xf813e003
   380b8:	2a002f01 	.word	0x2a002f01
   380bc:	3401d14d 	.word	0x3401d14d
   380c0:	d1f842a5 	.word	0xd1f842a5
   380c4:	8004f8d6 	.word	0x8004f8d6
   380c8:	0f00f1b8 	.word	0x0f00f1b8
   380cc:	2104d170 	.word	0x2104d170
   380d0:	f0012001 	.word	0xf0012001
   380d4:	4681fca1 	.word	0x4681fca1
   380d8:	d0752800 	.word	0xd0752800
   380dc:	b18968b1 	.word	0xb18968b1
   380e0:	00926872 	.word	0x00926872
   380e4:	fee4f7e1 	.word	0xfee4f7e1
   380e8:	2001e9d6 	.word	0x2001e9d6
   380ec:	b13a1e53 	.word	0xb13a1e53
   380f0:	3b014642 	.word	0x3b014642
   380f4:	60021c59 	.word	0x60021c59
   380f8:	0004f100 	.word	0x0004f100
   380fc:	68b0d1f9 	.word	0x68b0d1f9
   38100:	fc9ef001 	.word	0xfc9ef001
   38104:	22042301 	.word	0x22042301
   38108:	3901e9c6 	.word	0x3901e9c6
   3810c:	46482100 	.word	0x46482100
   38110:	ff92f008 	.word	0xff92f008
   38114:	22012300 	.word	0x22012300
   38118:	42a568b1 	.word	0x42a568b1
   3811c:	6032600b 	.word	0x6032600b
   38120:	eb0dd9b9 	.word	0xeb0dd9b9
   38124:	1b2c0205 	.word	0x1b2c0205
   38128:	f02368b1 	.word	0xf02368b1
   3812c:	ea4f0803 	.word	0xea4f0803
   38130:	f8120ec3 	.word	0xf8120ec3
   38134:	f851cd01 	.word	0xf851cd01
   38138:	f00e0008 	.word	0xf00e0008
   3813c:	fa0c0e18 	.word	0xfa0c0e18
   38140:	3301fc0e 	.word	0x3301fc0e
   38144:	000cea40 	.word	0x000cea40
   38148:	f84142a3 	.word	0xf84142a3
   3814c:	d1eb0008 	.word	0xd1eb0008
   38150:	f20d4638 	.word	0xf20d4638
   38154:	e8bd4d04 	.word	0xe8bd4d04
   38158:	1b2a83f0 	.word	0x1b2a83f0
   3815c:	0803f012 	.word	0x0803f012
   38160:	f04fbf18 	.word	0xf04fbf18
   38164:	f2420801 	.word	0xf2420801
   38168:	eb087310 	.word	0xeb087310
   3816c:	45980892 	.word	0x45980892
   38170:	6873d82a 	.word	0x6873d82a
   38174:	d92d4598 	.word	0xd92d4598
   38178:	46402104 	.word	0x46402104
   3817c:	fc4cf001 	.word	0xfc4cf001
   38180:	b3084681 	.word	0xb3084681
   38184:	b18968b1 	.word	0xb18968b1
   38188:	00926872 	.word	0x00926872
   3818c:	fe90f7e1 	.word	0xfe90f7e1
   38190:	2001e9d6 	.word	0x2001e9d6
   38194:	b13a1e53 	.word	0xb13a1e53
   38198:	3b012200 	.word	0x3b012200
   3819c:	60021c59 	.word	0x60021c59
   381a0:	0004f100 	.word	0x0004f100
   381a4:	68b0d1f9 	.word	0x68b0d1f9
   381a8:	fc4af001 	.word	0xfc4af001
   381ac:	8901e9c6 	.word	0x8901e9c6
   381b0:	0288ea4f 	.word	0x0288ea4f
   381b4:	9008f8d6 	.word	0x9008f8d6
   381b8:	f8d6e7a8 	.word	0xf8d6e7a8
   381bc:	462c8004 	.word	0x462c8004
   381c0:	462ae782 	.word	0x462ae782
   381c4:	e7c94604 	.word	0xe7c94604
   381c8:	070ff06f 	.word	0x070ff06f
   381cc:	f06fe763 	.word	0xf06fe763
   381d0:	e7600703 	.word	0xe7600703
   381d4:	e7774698 	.word	0xe7774698

000381d8 <symbol_0004482>:
   381d8:	43f0e92d 	.word	0x43f0e92d
   381dc:	b0a16853 	.word	0xb0a16853
   381e0:	6894b17b 	.word	0x6894b17b
   381e4:	4c80f103 	.word	0x4c80f103
   381e8:	3cfff10c 	.word	0x3cfff10c
   381ec:	502cf854 	.word	0x502cf854
   381f0:	048ceb04 	.word	0x048ceb04
   381f4:	e00ab11d 	.word	0xe00ab11d
   381f8:	5d04f854 	.word	0x5d04f854
   381fc:	3b01b93d 	.word	0x3b01b93d
   38200:	f06fd1fa 	.word	0xf06fd1fa
   38204:	46200403 	.word	0x46200403
   38208:	e8bdb021 	.word	0xe8bdb021
   3820c:	681383f0 	.word	0x681383f0
   38210:	ddf62b00 	.word	0xddf62b00
   38214:	23002401 	.word	0x23002401
   38218:	a8024606 	.word	0xa8024606
   3821c:	94089405 	.word	0x94089405
   38220:	940e940b 	.word	0x940e940b
   38224:	94119402 	.word	0x94119402
   38228:	94179414 	.word	0x94179414
   3822c:	460f941a 	.word	0x460f941a
   38230:	e9cd4615 	.word	0xe9cd4615
   38234:	e9cd3306 	.word	0xe9cd3306
   38238:	e9cd3309 	.word	0xe9cd3309
   3823c:	e9cd330c 	.word	0xe9cd330c
   38240:	e9cd330f 	.word	0xe9cd330f
   38244:	e9cd3303 	.word	0xe9cd3303
   38248:	e9cd3312 	.word	0xe9cd3312
   3824c:	e9cd3315 	.word	0xe9cd3315
   38250:	e9cd3318 	.word	0xe9cd3318
   38254:	f7ff331b 	.word	0xf7ff331b
   38258:	4604fd9b 	.word	0x4604fd9b
   3825c:	9b03b9a0 	.word	0x9b03b9a0
   38260:	9904b183 	.word	0x9904b183
   38264:	4480f103 	.word	0x4480f103
   38268:	f8513c01 	.word	0xf8513c01
   3826c:	eb012024 	.word	0xeb012024
   38270:	b12a0484 	.word	0xb12a0484
   38274:	f854e0b5 	.word	0xf854e0b5
   38278:	2a002d04 	.word	0x2a002d04
   3827c:	80b1f040 	.word	0x80b1f040
   38280:	d1f83b01 	.word	0xd1f83b01
   38284:	040df06f 	.word	0x040df06f
   38288:	b1609807 	.word	0xb1609807
   3828c:	1e539a06 	.word	0x1e539a06
   38290:	2200b13a 	.word	0x2200b13a
   38294:	1c593b01 	.word	0x1c593b01
   38298:	f1006002 	.word	0xf1006002
   3829c:	d1f90004 	.word	0xd1f90004
   382a0:	f0019807 	.word	0xf0019807
   382a4:	2200fbcd 	.word	0x2200fbcd
   382a8:	980a2301 	.word	0x980a2301
   382ac:	3205e9cd 	.word	0x3205e9cd
   382b0:	b1589207 	.word	0xb1589207
   382b4:	1e4b9909 	.word	0x1e4b9909
   382b8:	3b01b131 	.word	0x3b01b131
   382bc:	60021c5f 	.word	0x60021c5f
   382c0:	0004f100 	.word	0x0004f100
   382c4:	980ad1f9 	.word	0x980ad1f9
   382c8:	fbbaf001 	.word	0xfbbaf001
   382cc:	23012200 	.word	0x23012200
   382d0:	e9cd980d 	.word	0xe9cd980d
   382d4:	920a3208 	.word	0x920a3208
   382d8:	990cb158 	.word	0x990cb158
   382dc:	b1311e4b 	.word	0xb1311e4b
   382e0:	1c5e3b01 	.word	0x1c5e3b01
   382e4:	f1006002 	.word	0xf1006002
   382e8:	d1f90004 	.word	0xd1f90004
   382ec:	f001980d 	.word	0xf001980d
   382f0:	2200fba7 	.word	0x2200fba7
   382f4:	98102301 	.word	0x98102301
   382f8:	320be9cd 	.word	0x320be9cd
   382fc:	b158920d 	.word	0xb158920d
   38300:	1e4b990f 	.word	0x1e4b990f
   38304:	3b01b131 	.word	0x3b01b131
   38308:	60021c5d 	.word	0x60021c5d
   3830c:	0004f100 	.word	0x0004f100
   38310:	9810d1f9 	.word	0x9810d1f9
   38314:	fb94f001 	.word	0xfb94f001
   38318:	23012200 	.word	0x23012200
   3831c:	e9cd9804 	.word	0xe9cd9804
   38320:	9210320e 	.word	0x9210320e
   38324:	9903b158 	.word	0x9903b158
   38328:	b1311e4b 	.word	0xb1311e4b
   3832c:	1c593b01 	.word	0x1c593b01
   38330:	f1006002 	.word	0xf1006002
   38334:	d1f90004 	.word	0xd1f90004
   38338:	f0019804 	.word	0xf0019804
   3833c:	2200fb81 	.word	0x2200fb81
   38340:	98132301 	.word	0x98132301
   38344:	3202e9cd 	.word	0x3202e9cd
   38348:	b1589204 	.word	0xb1589204
   3834c:	1e4b9912 	.word	0x1e4b9912
   38350:	3b01b131 	.word	0x3b01b131
   38354:	60021c5f 	.word	0x60021c5f
   38358:	0004f100 	.word	0x0004f100
   3835c:	9813d1f9 	.word	0x9813d1f9
   38360:	fb6ef001 	.word	0xfb6ef001
   38364:	23012200 	.word	0x23012200
   38368:	e9cd9816 	.word	0xe9cd9816
   3836c:	92133211 	.word	0x92133211
   38370:	9915b158 	.word	0x9915b158
   38374:	b1311e4b 	.word	0xb1311e4b
   38378:	1c5e3b01 	.word	0x1c5e3b01
   3837c:	f1006002 	.word	0xf1006002
   38380:	d1f90004 	.word	0xd1f90004
   38384:	f0019816 	.word	0xf0019816
   38388:	2200fb5b 	.word	0x2200fb5b
   3838c:	98192301 	.word	0x98192301
   38390:	3214e9cd 	.word	0x3214e9cd
   38394:	b1589216 	.word	0xb1589216
   38398:	1e4b9918 	.word	0x1e4b9918
   3839c:	3b01b131 	.word	0x3b01b131
   383a0:	60021c5d 	.word	0x60021c5d
   383a4:	0004f100 	.word	0x0004f100
   383a8:	9819d1f9 	.word	0x9819d1f9
   383ac:	fb48f001 	.word	0xfb48f001
   383b0:	23012200 	.word	0x23012200
   383b4:	e9cd981c 	.word	0xe9cd981c
   383b8:	92193217 	.word	0x92193217
   383bc:	f43f2800 	.word	0xf43f2800
   383c0:	991baf22 	.word	0x991baf22
   383c4:	b1311e4b 	.word	0xb1311e4b
   383c8:	1c593b01 	.word	0x1c593b01
   383cc:	f1006002 	.word	0xf1006002
   383d0:	d1f90004 	.word	0xd1f90004
   383d4:	f001981c 	.word	0xf001981c
   383d8:	4620fb33 	.word	0x4620fb33
   383dc:	e8bdb021 	.word	0xe8bdb021
   383e0:	2b0183f0 	.word	0x2b0183f0
   383e4:	d96b9a02 	.word	0xd96b9a02
   383e8:	f47f2a00 	.word	0xf47f2a00
   383ec:	4639af4b 	.word	0x4639af4b
   383f0:	462aa805 	.word	0x462aa805
   383f4:	fb9af7ff 	.word	0xfb9af7ff
   383f8:	28004604 	.word	0x28004604
   383fc:	af44f47f 	.word	0xaf44f47f
   38400:	a905a808 	.word	0xa905a808
   38404:	ff38f7fd 	.word	0xff38f7fd
   38408:	28004604 	.word	0x28004604
   3840c:	af3cf47f 	.word	0xaf3cf47f
   38410:	4629a811 	.word	0x4629a811
   38414:	ff30f7fd 	.word	0xff30f7fd
   38418:	28004604 	.word	0x28004604
   3841c:	af34f47f 	.word	0xaf34f47f
   38420:	4629a814 	.word	0x4629a814
   38424:	ff28f7fd 	.word	0xff28f7fd
   38428:	28004604 	.word	0x28004604
   3842c:	af2cf47f 	.word	0xaf2cf47f
   38430:	2101a80b 	.word	0x2101a80b
   38434:	f8acf7fe 	.word	0xf8acf7fe
   38438:	28004604 	.word	0x28004604
   3843c:	af24f47f 	.word	0xaf24f47f
   38440:	a80e4601 	.word	0xa80e4601
   38444:	f8a4f7fe 	.word	0xf8a4f7fe
   38448:	28004604 	.word	0x28004604
   3844c:	af1cf47f 	.word	0xaf1cf47f
   38450:	a8174601 	.word	0xa8174601
   38454:	f89cf7fe 	.word	0xf89cf7fe
   38458:	28004604 	.word	0x28004604
   3845c:	af14f47f 	.word	0xaf14f47f
   38460:	2101a81a 	.word	0x2101a81a
   38464:	f894f7fe 	.word	0xf894f7fe
   38468:	28004604 	.word	0x28004604
   3846c:	af0cf47f 	.word	0xaf0cf47f
   38470:	f04f4681 	.word	0xf04f4681
   38474:	af010801 	.word	0xaf010801
   38478:	681b9b0a 	.word	0x681b9b0a
   3847c:	d42c07da 	.word	0xd42c07da
   38480:	a8082101 	.word	0xa8082101
   38484:	fac6f7fe 	.word	0xfac6f7fe
   38488:	28004604 	.word	0x28004604
   3848c:	aefcf47f 	.word	0xaefcf47f
   38490:	681b9b0d 	.word	0x681b9b0d
   38494:	d44407d8 	.word	0xd44407d8
   38498:	681b9b10 	.word	0x681b9b10
   3849c:	d44007d9 	.word	0xd44007d9
   384a0:	a80b2101 	.word	0xa80b2101
   384a4:	fab6f7fe 	.word	0xfab6f7fe
   384a8:	28004604 	.word	0x28004604
   384ac:	aeecf47f 	.word	0xaeecf47f
   384b0:	a80e2101 	.word	0xa80e2101
   384b4:	faaef7fe 	.word	0xfaaef7fe
   384b8:	28004604 	.word	0x28004604
   384bc:	e6e3d0dc 	.word	0xe6e3d0dc
   384c0:	f6ff2a00 	.word	0xf6ff2a00
   384c4:	680baedf 	.word	0x680baedf
   384c8:	d88d2b01 	.word	0xd88d2b01
   384cc:	d18e2b00 	.word	0xd18e2b00
   384d0:	2a004252 	.word	0x2a004252
   384d4:	aed6f47f 	.word	0xaed6f47f
   384d8:	9b16e789 	.word	0x9b16e789
   384dc:	07d8681b 	.word	0x07d8681b
   384e0:	2101d443 	.word	0x2101d443
   384e4:	f7fea814 	.word	0xf7fea814
   384e8:	4604fa95 	.word	0x4604fa95
   384ec:	f47f2800 	.word	0xf47f2800
   384f0:	9b19aecb 	.word	0x9b19aecb
   384f4:	07db681b 	.word	0x07db681b
   384f8:	9b1cd425 	.word	0x9b1cd425
   384fc:	07dc681b 	.word	0x07dc681b
   38500:	2101d421 	.word	0x2101d421
   38504:	f7fea817 	.word	0xf7fea817
   38508:	4604fa85 	.word	0x4604fa85
   3850c:	f47f2800 	.word	0xf47f2800
   38510:	2101aebb 	.word	0x2101aebb
   38514:	f7fea81a 	.word	0xf7fea81a
   38518:	4604fa7d 	.word	0x4604fa7d
   3851c:	d0dc2800 	.word	0xd0dc2800
   38520:	a90be6b2 	.word	0xa90be6b2
   38524:	4608aa11 	.word	0x4608aa11
   38528:	fd04f7fe 	.word	0xfd04f7fe
   3852c:	28004604 	.word	0x28004604
   38530:	aeaaf47f 	.word	0xaeaaf47f
   38534:	aa05a90e 	.word	0xaa05a90e
   38538:	f7fe4608 	.word	0xf7fe4608
   3853c:	4604fd6f 	.word	0x4604fd6f
   38540:	d0ad2800 	.word	0xd0ad2800
   38544:	a917e6a0 	.word	0xa917e6a0
   38548:	4608aa11 	.word	0x4608aa11
   3854c:	fcf2f7fe 	.word	0xfcf2f7fe
   38550:	28004604 	.word	0x28004604
   38554:	ae98f47f 	.word	0xae98f47f
   38558:	aa05a91a 	.word	0xaa05a91a
   3855c:	f7fe4608 	.word	0xf7fe4608
   38560:	4604fd5d 	.word	0x4604fd5d
   38564:	d0cc2800 	.word	0xd0cc2800
   38568:	a914e68e 	.word	0xa914e68e
   3856c:	f7fea808 	.word	0xf7fea808
   38570:	2800fac1 	.word	0x2800fac1
   38574:	a908db3d 	.word	0xa908db3d
   38578:	4608aa14 	.word	0x4608aa14
   3857c:	fd4ef7fe 	.word	0xfd4ef7fe
   38580:	28004604 	.word	0x28004604
   38584:	ae80f47f 	.word	0xae80f47f
   38588:	aa17a90b 	.word	0xaa17a90b
   3858c:	f7fe4608 	.word	0xf7fe4608
   38590:	4604fd45 	.word	0x4604fd45
   38594:	f47f2800 	.word	0xf47f2800
   38598:	a90eae77 	.word	0xa90eae77
   3859c:	4608aa1a 	.word	0x4608aa1a
   385a0:	fd3cf7fe 	.word	0xfd3cf7fe
   385a4:	28004604 	.word	0x28004604
   385a8:	ae6ef47f 	.word	0xae6ef47f
   385ac:	a808a91d 	.word	0xa808a91d
   385b0:	9004f8cd 	.word	0x9004f8cd
   385b4:	881de9cd 	.word	0x881de9cd
   385b8:	f7fd971f 	.word	0xf7fd971f
   385bc:	2800fd97 	.word	0x2800fd97
   385c0:	af5af47f 	.word	0xaf5af47f
   385c4:	f04f4680 	.word	0xf04f4680
   385c8:	a91d0901 	.word	0xa91d0901
   385cc:	f8cda817 	.word	0xf8cda817
   385d0:	e9cd8004 	.word	0xe9cd8004
   385d4:	971f991d 	.word	0x971f991d
   385d8:	fd88f7fd 	.word	0xfd88f7fd
   385dc:	da232800 	.word	0xda232800
   385e0:	462aa917 	.word	0x462aa917
   385e4:	f7fe4608 	.word	0xf7fe4608
   385e8:	4604fca5 	.word	0x4604fca5
   385ec:	d0ec2800 	.word	0xd0ec2800
   385f0:	a914e64a 	.word	0xa914e64a
   385f4:	4608aa08 	.word	0x4608aa08
   385f8:	fd10f7fe 	.word	0xfd10f7fe
   385fc:	28004604 	.word	0x28004604
   38600:	ae42f47f 	.word	0xae42f47f
   38604:	aa0ba917 	.word	0xaa0ba917
   38608:	f7fe4608 	.word	0xf7fe4608
   3860c:	4604fd07 	.word	0x4604fd07
   38610:	f47f2800 	.word	0xf47f2800
   38614:	a91aae39 	.word	0xa91aae39
   38618:	4608aa0e 	.word	0x4608aa0e
   3861c:	fcfef7fe 	.word	0xfcfef7fe
   38620:	28004604 	.word	0x28004604
   38624:	e62fd0c2 	.word	0xe62fd0c2
   38628:	a8174629 	.word	0xa8174629
   3862c:	fa62f7fe 	.word	0xfa62f7fe
   38630:	db082800 	.word	0xdb082800
   38634:	462aa917 	.word	0x462aa917
   38638:	f7fe4608 	.word	0xf7fe4608
   3863c:	4604fcef 	.word	0x4604fcef
   38640:	d0f12800 	.word	0xd0f12800
   38644:	a917e620 	.word	0xa917e620
   38648:	f7fd4630 	.word	0xf7fd4630
   3864c:	4604fe15 	.word	0x4604fe15
   38650:	bf00e61a 	.word	0xbf00e61a

00038654 <entropy_callback>:
   38654:	4c0ab538 	.word	0x4c0ab538
   38658:	78254b0a 	.word	0x78254b0a
   3865c:	bf282a07 	.word	0xbf282a07
   38660:	46082207 	.word	0x46082207
   38664:	1145eb03 	.word	0x1145eb03
   38668:	fc22f7e1 	.word	0xfc22f7e1
   3866c:	20007823 	.word	0x20007823
   38670:	b2db3301 	.word	0xb2db3301
   38674:	bf082b07 	.word	0xbf082b07
   38678:	70232300 	.word	0x70232300
   3867c:	bf00bd38 	.word	0xbf00bd38
   38680:	2002c1fa 	.word	0x2002c1fa
   38684:	0004b800 	.word	0x0004b800

00038688 <es256_key_generate>:
   38688:	b0e5b5f0 	.word	0xb0e5b5f0
   3868c:	71a8f89d 	.word	0x71a8f89d
   38690:	b152b158 	.word	0xb152b158
   38694:	291fb14b 	.word	0x291fb14b
   38698:	6819d907 	.word	0x6819d907
   3869c:	d904293f 	.word	0xd904293f
   386a0:	2955b13f 	.word	0x2955b13f
   386a4:	240cd805 	.word	0x240cd805
   386a8:	2416e000 	.word	0x2416e000
   386ac:	b0654620 	.word	0xb0654620
   386b0:	461dbdf0 	.word	0x461dbdf0
   386b4:	21002304 	.word	0x21002304
   386b8:	46164604 	.word	0x46164604
   386bc:	f44fa814 	.word	0xf44fa814
   386c0:	f88d72a0 	.word	0xf88d72a0
   386c4:	f008300c 	.word	0xf008300c
   386c8:	a814fcb7 	.word	0xa814fcb7
   386cc:	fd90f7f6 	.word	0xfd90f7f6
   386d0:	49292300 	.word	0x49292300
   386d4:	a814461a 	.word	0xa814461a
   386d8:	f7f69300 	.word	0xf7f69300
   386dc:	a814fe8b 	.word	0xa814fe8b
   386e0:	46212220 	.word	0x46212220
   386e4:	feaef7f6 	.word	0xfeaef7f6
   386e8:	a814b9b8 	.word	0xa814b9b8
   386ec:	fd86f7f6 	.word	0xfd86f7f6
   386f0:	f10d4621 	.word	0xf10d4621
   386f4:	f007000d 	.word	0xf007000d
   386f8:	4604fdf9 	.word	0x4604fdf9
   386fc:	b1c7b9b8 	.word	0xb1c7b9b8
   38700:	f7f6a814 	.word	0xf7f6a814
   38704:	2002f845 	.word	0x2002f845
   38708:	f848f7f6 	.word	0xf848f7f6
   3870c:	a8144601 	.word	0xa8144601
   38710:	f852f7f6 	.word	0xf852f7f6
   38714:	240eb1a8 	.word	0x240eb1a8
   38718:	4a18e7c8 	.word	0x4a18e7c8
   3871c:	78114b18 	.word	0x78114b18
   38720:	22074620 	.word	0x22074620
   38724:	1141eb03 	.word	0x1141eb03
   38728:	fbc2f7e1 	.word	0xfbc2f7e1
   3872c:	2423e7dd 	.word	0x2423e7dd
   38730:	a903e7bc 	.word	0xa903e7bc
   38734:	22401c70 	.word	0x22401c70
   38738:	fbbaf7e1 	.word	0xfbbaf7e1
   3873c:	602b2341 	.word	0x602b2341
   38740:	2103e7b4 	.word	0x2103e7b4
   38744:	f7f79815 	.word	0xf7f79815
   38748:	2800f8df 	.word	0x2800f8df
   3874c:	9815d1e3 	.word	0x9815d1e3
   38750:	f100aa03 	.word	0xf100aa03
   38754:	23410188 	.word	0x23410188
   38758:	fba4f7f9 	.word	0xfba4f7f9
   3875c:	d1da2800 	.word	0xd1da2800
   38760:	a8144631 	.word	0xa8144631
   38764:	f7f4682a 	.word	0xf7f4682a
   38768:	23b2fe89 	.word	0x23b2fe89
   3876c:	602b4604 	.word	0x602b4604
   38770:	d09b2800 	.word	0xd09b2800
   38774:	bf00e7cf 	.word	0xbf00e7cf
   38778:	00038655 	.word	0x00038655
   3877c:	2002c1fa 	.word	0x2002c1fa
   38780:	0004b800 	.word	0x0004b800

00038784 <bsd_os_application_irq_handler>:
   38784:	41f0e92d 	.word	0x41f0e92d
   38788:	f7ed4c33 	.word	0xf7ed4c33
   3878c:	f04ffa67 	.word	0xf04ffa67
   38790:	4d320803 	.word	0x4d320803
   38794:	f1044f32 	.word	0xf1044f32
   38798:	e0040680 	.word	0xe0040680
   3879c:	d0062b04 	.word	0xd0062b04
   387a0:	42b43408 	.word	0x42b43408
   387a4:	f814d03b 	.word	0xf814d03b
   387a8:	2b023c04 	.word	0x2b023c04
   387ac:	6820d1f6 	.word	0x6820d1f6
   387b0:	6803882a 	.word	0x6803882a
   387b4:	429ab29b 	.word	0x429ab29b
   387b8:	8a2ad033 	.word	0x8a2ad033
   387bc:	d032429a 	.word	0xd032429a
   387c0:	429a8c2a 	.word	0x429a8c2a
   387c4:	8e2ad031 	.word	0x8e2ad031
   387c8:	d030429a 	.word	0xd030429a
   387cc:	2040f8b5 	.word	0x2040f8b5
   387d0:	d036429a 	.word	0xd036429a
   387d4:	2050f8b5 	.word	0x2050f8b5
   387d8:	d034429a 	.word	0xd034429a
   387dc:	2060f8b5 	.word	0x2060f8b5
   387e0:	d032429a 	.word	0xd032429a
   387e4:	2070f8b5 	.word	0x2070f8b5
   387e8:	d030429a 	.word	0xd030429a
   387ec:	2080f8b5 	.word	0x2080f8b5
   387f0:	d02e429a 	.word	0xd02e429a
   387f4:	2090f8b5 	.word	0x2090f8b5
   387f8:	bf08429a 	.word	0xbf08429a
   387fc:	d1cf2309 	.word	0xd1cf2309
   38800:	1303eb05 	.word	0x1303eb05
   38804:	68d9685a 	.word	0x68d9685a
   38808:	b9904790 	.word	0xb9904790
   3880c:	68202201 	.word	0x68202201
   38810:	2c04f804 	.word	0x2c04f804
   38814:	340868fb 	.word	0x340868fb
   38818:	42b44798 	.word	0x42b44798
   3881c:	e8bdd1c3 	.word	0xe8bdd1c3
   38820:	230081f0 	.word	0x230081f0
   38824:	2301e7ec 	.word	0x2301e7ec
   38828:	2302e7ea 	.word	0x2302e7ea
   3882c:	2303e7e8 	.word	0x2303e7e8
   38830:	2802e7e6 	.word	0x2802e7e6
   38834:	2304bf0a 	.word	0x2304bf0a
   38838:	8c04f804 	.word	0x8c04f804
   3883c:	3c04f804 	.word	0x3c04f804
   38840:	2304e7ae 	.word	0x2304e7ae
   38844:	2305e7dc 	.word	0x2305e7dc
   38848:	2306e7da 	.word	0x2306e7da
   3884c:	2307e7d8 	.word	0x2307e7d8
   38850:	2308e7d6 	.word	0x2308e7d6
   38854:	bf00e7d4 	.word	0xbf00e7d4
   38858:	20026000 	.word	0x20026000
   3885c:	20025ec4 	.word	0x20025ec4
   38860:	20025f64 	.word	0x20025f64

00038864 <rpc_framework_init>:
   38864:	22a0b508 	.word	0x22a0b508
   38868:	48022100 	.word	0x48022100
   3886c:	fbe4f008 	.word	0xfbe4f008
   38870:	bd082000 	.word	0xbd082000
   38874:	20025ec4 	.word	0x20025ec4

00038878 <rpc_client_register>:
   38878:	2b008803 	.word	0x2b008803
   3887c:	6842d045 	.word	0x6842d045
   38880:	2a004601 	.word	0x2a004601
   38884:	4a30d050 	.word	0x4a30d050
   38888:	42838810 	.word	0x42838810
   3888c:	e92dd03d 	.word	0xe92dd03d
   38890:	8a1447f0 	.word	0x8a1447f0
   38894:	d03542a3 	.word	0xd03542a3
   38898:	42ab8c15 	.word	0x42ab8c15
   3889c:	8e16d032 	.word	0x8e16d032
   388a0:	d02f42b3 	.word	0xd02f42b3
   388a4:	7040f8b2 	.word	0x7040f8b2
   388a8:	d02b42bb 	.word	0xd02b42bb
   388ac:	c050f8b2 	.word	0xc050f8b2
   388b0:	d0274563 	.word	0xd0274563
   388b4:	e060f8b2 	.word	0xe060f8b2
   388b8:	d0234573 	.word	0xd0234573
   388bc:	8070f8b2 	.word	0x8070f8b2
   388c0:	d01f4543 	.word	0xd01f4543
   388c4:	9080f8b2 	.word	0x9080f8b2
   388c8:	d01b454b 	.word	0xd01b454b
   388cc:	a090f8b2 	.word	0xa090f8b2
   388d0:	d0174553 	.word	0xd0174553
   388d4:	b35cb1e0 	.word	0xb35cb1e0
   388d8:	b36eb365 	.word	0xb36eb365
   388dc:	f1bcb377 	.word	0xf1bcb377
   388e0:	d02d0f00 	.word	0xd02d0f00
   388e4:	0f00f1be 	.word	0x0f00f1be
   388e8:	f1b8d020 	.word	0xf1b8d020
   388ec:	d0290f00 	.word	0xd0290f00
   388f0:	0f00f1b9 	.word	0x0f00f1b9
   388f4:	2009d00b 	.word	0x2009d00b
   388f8:	0f00f1ba 	.word	0x0f00f1ba
   388fc:	2004d008 	.word	0x2004d008
   38900:	87f0e8bd 	.word	0x87f0e8bd
   38904:	e8bd2007 	.word	0xe8bd2007
   38908:	200787f0 	.word	0x200787f0
   3890c:	20084770 	.word	0x20084770
   38910:	52130100 	.word	0x52130100
   38914:	4402684b 	.word	0x4402684b
   38918:	688b6053 	.word	0x688b6053
   3891c:	60932000 	.word	0x60932000
   38920:	60d368cb 	.word	0x60d368cb
   38924:	87f0e8bd 	.word	0x87f0e8bd
   38928:	4770200e 	.word	0x4770200e
   3892c:	e7ef2006 	.word	0xe7ef2006
   38930:	e7ed2001 	.word	0xe7ed2001
   38934:	e7eb2002 	.word	0xe7eb2002
   38938:	e7e92003 	.word	0xe7e92003
   3893c:	e7e72004 	.word	0xe7e72004
   38940:	e7e52005 	.word	0xe7e52005
   38944:	e7e32007 	.word	0xe7e32007
   38948:	20025ec4 	.word	0x20025ec4

0003894c <rpc_transport_input>:
   3894c:	4a82b538 	.word	0x4a82b538
   38950:	8810680b 	.word	0x8810680b
   38954:	4298b29b 	.word	0x4298b29b
   38958:	8a10d027 	.word	0x8a10d027
   3895c:	d0244298 	.word	0xd0244298
   38960:	42988c10 	.word	0x42988c10
   38964:	8e10d021 	.word	0x8e10d021
   38968:	d01e4298 	.word	0xd01e4298
   3896c:	0040f8b2 	.word	0x0040f8b2
   38970:	d01a4298 	.word	0xd01a4298
   38974:	0050f8b2 	.word	0x0050f8b2
   38978:	d0164298 	.word	0xd0164298
   3897c:	0060f8b2 	.word	0x0060f8b2
   38980:	d0124298 	.word	0xd0124298
   38984:	0070f8b2 	.word	0x0070f8b2
   38988:	d00e4298 	.word	0xd00e4298
   3898c:	0080f8b2 	.word	0x0080f8b2
   38990:	d00a4298 	.word	0xd00a4298
   38994:	2090f8b2 	.word	0x2090f8b2
   38998:	d006429a 	.word	0xd006429a
   3899c:	b1186888 	.word	0xb1186888
   389a0:	691b4b6e 	.word	0x691b4b6e
   389a4:	20004798 	.word	0x20004798
   389a8:	6888bd38 	.word	0x6888bd38
   389ac:	f0002800 	.word	0xf0002800
   389b0:	4a6b8098 	.word	0x4a6b8098
   389b4:	2c006814 	.word	0x2c006814
   389b8:	6894d03c 	.word	0x6894d03c
   389bc:	f0002c00 	.word	0xf0002c00
   389c0:	6914809a 	.word	0x6914809a
   389c4:	f0002c00 	.word	0xf0002c00
   389c8:	6994809a 	.word	0x6994809a
   389cc:	f0002c00 	.word	0xf0002c00
   389d0:	6a14809a 	.word	0x6a14809a
   389d4:	f0002c00 	.word	0xf0002c00
   389d8:	6a94809a 	.word	0x6a94809a
   389dc:	f0002c00 	.word	0xf0002c00
   389e0:	6b148084 	.word	0x6b148084
   389e4:	f0002c00 	.word	0xf0002c00
   389e8:	6b948098 	.word	0x6b948098
   389ec:	f0002c00 	.word	0xf0002c00
   389f0:	6c148096 	.word	0x6c148096
   389f4:	f0002c00 	.word	0xf0002c00
   389f8:	6c948096 	.word	0x6c948096
   389fc:	f0002c00 	.word	0xf0002c00
   38a00:	6d148096 	.word	0x6d148096
   38a04:	f0002c00 	.word	0xf0002c00
   38a08:	6d948096 	.word	0x6d948096
   38a0c:	f0002c00 	.word	0xf0002c00
   38a10:	6e148098 	.word	0x6e148098
   38a14:	f0002c00 	.word	0xf0002c00
   38a18:	6e948098 	.word	0x6e948098
   38a1c:	f0002c00 	.word	0xf0002c00
   38a20:	6f148096 	.word	0x6f148096
   38a24:	f0002c00 	.word	0xf0002c00
   38a28:	6f948094 	.word	0x6f948094
   38a2c:	2001b10c 	.word	0x2001b10c
   38a30:	240fbd38 	.word	0x240fbd38
   38a34:	05c4eb02 	.word	0x05c4eb02
   38a38:	0034f842 	.word	0x0034f842
   38a3c:	4b4980ab 	.word	0x4b4980ab
   38a40:	2a01781a 	.word	0x2a01781a
   38a44:	7a1ad053 	.word	0x7a1ad053
   38a48:	d0412a01 	.word	0xd0412a01
   38a4c:	2a017c1a 	.word	0x2a017c1a
   38a50:	7e1ad04f 	.word	0x7e1ad04f
   38a54:	d0502a01 	.word	0xd0502a01
   38a58:	2020f893 	.word	0x2020f893
   38a5c:	d0502a01 	.word	0xd0502a01
   38a60:	2028f893 	.word	0x2028f893
   38a64:	d0502a01 	.word	0xd0502a01
   38a68:	2030f893 	.word	0x2030f893
   38a6c:	d03a2a01 	.word	0xd03a2a01
   38a70:	2038f893 	.word	0x2038f893
   38a74:	d04c2a01 	.word	0xd04c2a01
   38a78:	2040f893 	.word	0x2040f893
   38a7c:	d04a2a01 	.word	0xd04a2a01
   38a80:	2048f893 	.word	0x2048f893
   38a84:	d04c2a01 	.word	0xd04c2a01
   38a88:	2050f893 	.word	0x2050f893
   38a8c:	d04c2a01 	.word	0xd04c2a01
   38a90:	2058f893 	.word	0x2058f893
   38a94:	d04c2a01 	.word	0xd04c2a01
   38a98:	2060f893 	.word	0x2060f893
   38a9c:	d04c2a01 	.word	0xd04c2a01
   38aa0:	2068f893 	.word	0x2068f893
   38aa4:	d04a2a01 	.word	0xd04a2a01
   38aa8:	2070f893 	.word	0x2070f893
   38aac:	d04a2a01 	.word	0xd04a2a01
   38ab0:	2078f893 	.word	0x2078f893
   38ab4:	d00a2a01 	.word	0xd00a2a01
   38ab8:	d0b82c10 	.word	0xd0b82c10
   38abc:	4b282200 	.word	0x4b282200
   38ac0:	eb032001 	.word	0xeb032001
   38ac4:	808a01c4 	.word	0x808a01c4
   38ac8:	2034f843 	.word	0x2034f843
   38acc:	220fbd38 	.word	0x220fbd38
   38ad0:	eb032402 	.word	0xeb032402
   38ad4:	f80300c2 	.word	0xf80300c2
   38ad8:	60414032 	.word	0x60414032
   38adc:	f8b6f7ed 	.word	0xf8b6f7ed
   38ae0:	2410e7a5 	.word	0x2410e7a5
   38ae4:	2206e7ab 	.word	0x2206e7ab
   38ae8:	2405e7f2 	.word	0x2405e7f2
   38aec:	2200e7a2 	.word	0x2200e7a2
   38af0:	2202e7ee 	.word	0x2202e7ee
   38af4:	2401e7ec 	.word	0x2401e7ec
   38af8:	2203e79c 	.word	0x2203e79c
   38afc:	2402e7e8 	.word	0x2402e7e8
   38b00:	2204e798 	.word	0x2204e798
   38b04:	2403e7e4 	.word	0x2403e7e4
   38b08:	2205e794 	.word	0x2205e794
   38b0c:	2404e7e0 	.word	0x2404e7e0
   38b10:	2207e790 	.word	0x2207e790
   38b14:	2208e7dc 	.word	0x2208e7dc
   38b18:	2406e7da 	.word	0x2406e7da
   38b1c:	2407e78a 	.word	0x2407e78a
   38b20:	2209e788 	.word	0x2209e788
   38b24:	2408e7d4 	.word	0x2408e7d4
   38b28:	220ae784 	.word	0x220ae784
   38b2c:	2409e7d0 	.word	0x2409e7d0
   38b30:	220be780 	.word	0x220be780
   38b34:	240ae7cc 	.word	0x240ae7cc
   38b38:	220ce77c 	.word	0x220ce77c
   38b3c:	220de7c8 	.word	0x220de7c8
   38b40:	240be7c6 	.word	0x240be7c6
   38b44:	220ee776 	.word	0x220ee776
   38b48:	240ce7c2 	.word	0x240ce7c2
   38b4c:	240de772 	.word	0x240de772
   38b50:	240ee770 	.word	0x240ee770
   38b54:	bf00e76e 	.word	0xbf00e76e
   38b58:	20025ec4 	.word	0x20025ec4
   38b5c:	20025f64 	.word	0x20025f64
   38b60:	20025f7c 	.word	0x20025f7c
   38b64:	20025ffc 	.word	0x20025ffc

00038b68 <rpc_transport_register>:
   38b68:	2900b4f0 	.word	0x2900b4f0
   38b6c:	2800d052 	.word	0x2800d052
   38b70:	6883d050 	.word	0x6883d050
   38b74:	d04d2b00 	.word	0xd04d2b00
   38b78:	2b006903 	.word	0x2b006903
   38b7c:	6843d04a 	.word	0x6843d04a
   38b80:	d0472b00 	.word	0xd0472b00
   38b84:	2b0068c3 	.word	0x2b0068c3
   38b88:	6803d044 	.word	0x6803d044
   38b8c:	d0412b00 	.word	0xd0412b00
   38b90:	2b006943 	.word	0x2b006943
   38b94:	2601d03e 	.word	0x2601d03e
   38b98:	46042500 	.word	0x46042500
   38b9c:	4a1f460f 	.word	0x4a1f460f
   38ba0:	f8df4b1f 	.word	0xf8df4b1f
   38ba4:	7416c080 	.word	0x7416c080
   38ba8:	f8827616 	.word	0xf8827616
   38bac:	f8826020 	.word	0xf8826020
   38bb0:	f8826028 	.word	0xf8826028
   38bb4:	f8826030 	.word	0xf8826030
   38bb8:	f8826038 	.word	0xf8826038
   38bbc:	f8826040 	.word	0xf8826040
   38bc0:	f8826048 	.word	0xf8826048
   38bc4:	f8826050 	.word	0xf8826050
   38bc8:	f8826058 	.word	0xf8826058
   38bcc:	f8826060 	.word	0xf8826060
   38bd0:	f8826068 	.word	0xf8826068
   38bd4:	f8826070 	.word	0xf8826070
   38bd8:	611d6078 	.word	0x611d6078
   38bdc:	621d619d 	.word	0x621d619d
   38be0:	631d629d 	.word	0x631d629d
   38be4:	641d639d 	.word	0x641d639d
   38be8:	651d649d 	.word	0x651d649d
   38bec:	661d659d 	.word	0x661d659d
   38bf0:	671d669d 	.word	0x671d669d
   38bf4:	7016679d 	.word	0x7016679d
   38bf8:	601d7216 	.word	0x601d7216
   38bfc:	cc0f609d 	.word	0xcc0f609d
   38c00:	000fe8ac 	.word	0x000fe8ac
   38c04:	0003e894 	.word	0x0003e894
   38c08:	0003e88c 	.word	0x0003e88c
   38c0c:	4628603e 	.word	0x4628603e
   38c10:	4770bcf0 	.word	0x4770bcf0
   38c14:	4628250e 	.word	0x4628250e
   38c18:	4770bcf0 	.word	0x4770bcf0
   38c1c:	20025ffc 	.word	0x20025ffc
   38c20:	20025f7c 	.word	0x20025f7c
   38c24:	20025f64 	.word	0x20025f64

00038c28 <rpc_transport_unregister>:
   38c28:	d03a2800 	.word	0xd03a2800
   38c2c:	47f0e92d 	.word	0x47f0e92d
   38c30:	4c1d4680 	.word	0x4c1d4680
   38c34:	05a0f104 	.word	0x05a0f104
   38c38:	341068a3 	.word	0x341068a3
   38c3c:	4798b103 	.word	0x4798b103
   38c40:	d1f942ac 	.word	0xd1f942ac
   38c44:	0901f04f 	.word	0x0901f04f
   38c48:	4c182600 	.word	0x4c182600
   38c4c:	f8df4d18 	.word	0xf8df4d18
   38c50:	f104a064 	.word	0xf104a064
   38c54:	f8140780 	.word	0xf8140780
   38c58:	2b013c04 	.word	0x2b013c04
   38c5c:	f8dad005 	.word	0xf8dad005
   38c60:	6820300c 	.word	0x6820300c
   38c64:	f8044798 	.word	0xf8044798
   38c68:	f8559c04 	.word	0xf8559c04
   38c6c:	34080c04 	.word	0x34080c04
   38c70:	f8dab128 	.word	0xf8dab128
   38c74:	47983010 	.word	0x47983010
   38c78:	f845802e 	.word	0xf845802e
   38c7c:	42bc6c04 	.word	0x42bc6c04
   38c80:	0508f105 	.word	0x0508f105
   38c84:	f8d8d1e7 	.word	0xf8d8d1e7
   38c88:	22180000 	.word	0x22180000
   38c8c:	eb003801 	.word	0xeb003801
   38c90:	eb0a0040 	.word	0xeb0a0040
   38c94:	210000c0 	.word	0x210000c0
   38c98:	f9cef008 	.word	0xf9cef008
   38c9c:	e8bd2000 	.word	0xe8bd2000
   38ca0:	200e87f0 	.word	0x200e87f0
   38ca4:	bf004770 	.word	0xbf004770
   38ca8:	20025ec4 	.word	0x20025ec4
   38cac:	20026000 	.word	0x20026000
   38cb0:	20025f80 	.word	0x20025f80
   38cb4:	20025f64 	.word	0x20025f64

00038cb8 <rpc_message_send>:
   38cb8:	b171b168 	.word	0xb171b168
   38cbc:	68534a09 	.word	0x68534a09
   38cc0:	684bb16b 	.word	0x684bb16b
   38cc4:	f0238008 	.word	0xf0238008
   38cc8:	f04303ff 	.word	0xf04303ff
   38ccc:	68120302 	.word	0x68120302
   38cd0:	4608604b 	.word	0x4608604b
   38cd4:	20074710 	.word	0x20074710
   38cd8:	200e4770 	.word	0x200e4770
   38cdc:	20084770 	.word	0x20084770
   38ce0:	bf004770 	.word	0xbf004770
   38ce4:	20025f64 	.word	0x20025f64

00038ce8 <rpc_message_alloc>:
   38ce8:	b330b35a 	.word	0xb330b35a
   38cec:	e92d2300 	.word	0xe92d2300
   38cf0:	4f1541f0 	.word	0x4f1541f0
   38cf4:	687b6013 	.word	0x687b6013
   38cf8:	4615b30b 	.word	0x4615b30b
   38cfc:	4606460c 	.word	0x4606460c
   38d00:	4798b959 	.word	0x4798b959
   38d04:	b1a84603 	.word	0xb1a84603
   38d08:	60dc46a0 	.word	0x60dc46a0
   38d0c:	8008f8c3 	.word	0x8008f8c3
   38d10:	602b801e 	.word	0x602b801e
   38d14:	e8bd2000 	.word	0xe8bd2000
   38d18:	68bb81f0 	.word	0x68bb81f0
   38d1c:	47984608 	.word	0x47984608
   38d20:	b1384680 	.word	0xb1384680
   38d24:	4798687b 	.word	0x4798687b
   38d28:	28004603 	.word	0x28004603
   38d2c:	693bd1ed 	.word	0x693bd1ed
   38d30:	47984640 	.word	0x47984640
   38d34:	e8bd2004 	.word	0xe8bd2004
   38d38:	200781f0 	.word	0x200781f0
   38d3c:	20084770 	.word	0x20084770
   38d40:	200ee7f9 	.word	0x200ee7f9
   38d44:	bf004770 	.word	0xbf004770
   38d48:	20025f64 	.word	0x20025f64

00038d4c <rpc_message_free>:
   38d4c:	f0002800 	.word	0xf0002800
   38d50:	2900808c 	.word	0x2900808c
   38d54:	80e9f000 	.word	0x80e9f000
   38d58:	4a83b538 	.word	0x4a83b538
   38d5c:	2b006853 	.word	0x2b006853
   38d60:	8085f000 	.word	0x8085f000
   38d64:	46084c81 	.word	0x46084c81
   38d68:	42996863 	.word	0x42996863
   38d6c:	8085f000 	.word	0x8085f000
   38d70:	429868e3 	.word	0x429868e3
   38d74:	808ef000 	.word	0x808ef000
   38d78:	42986963 	.word	0x42986963
   38d7c:	8090f000 	.word	0x8090f000
   38d80:	429869e3 	.word	0x429869e3
   38d84:	8092f000 	.word	0x8092f000
   38d88:	42986a63 	.word	0x42986a63
   38d8c:	8095f000 	.word	0x8095f000
   38d90:	42986ae3 	.word	0x42986ae3
   38d94:	8098f000 	.word	0x8098f000
   38d98:	42986b63 	.word	0x42986b63
   38d9c:	809bf000 	.word	0x809bf000
   38da0:	42986be3 	.word	0x42986be3
   38da4:	809ef000 	.word	0x809ef000
   38da8:	42986c63 	.word	0x42986c63
   38dac:	80a1f000 	.word	0x80a1f000
   38db0:	42986ce3 	.word	0x42986ce3
   38db4:	80a4f000 	.word	0x80a4f000
   38db8:	42986d63 	.word	0x42986d63
   38dbc:	80a7f000 	.word	0x80a7f000
   38dc0:	42986de3 	.word	0x42986de3
   38dc4:	80aaf000 	.word	0x80aaf000
   38dc8:	42986e63 	.word	0x42986e63
   38dcc:	80aff000 	.word	0x80aff000
   38dd0:	42986ee3 	.word	0x42986ee3
   38dd4:	80b2f000 	.word	0x80b2f000
   38dd8:	42986f63 	.word	0x42986f63
   38ddc:	80b5f000 	.word	0x80b5f000
   38de0:	42836fe3 	.word	0x42836fe3
   38de4:	80b8f000 	.word	0x80b8f000
   38de8:	479868d3 	.word	0x479868d3
   38dec:	2b047823 	.word	0x2b047823
   38df0:	7a23d03f 	.word	0x7a23d03f
   38df4:	d03c2b04 	.word	0xd03c2b04
   38df8:	2b047c23 	.word	0x2b047c23
   38dfc:	7e23d039 	.word	0x7e23d039
   38e00:	d0362b04 	.word	0xd0362b04
   38e04:	3020f894 	.word	0x3020f894
   38e08:	d0322b04 	.word	0xd0322b04
   38e0c:	3028f894 	.word	0x3028f894
   38e10:	d02e2b04 	.word	0xd02e2b04
   38e14:	3030f894 	.word	0x3030f894
   38e18:	d02a2b04 	.word	0xd02a2b04
   38e1c:	3038f894 	.word	0x3038f894
   38e20:	d0262b04 	.word	0xd0262b04
   38e24:	3040f894 	.word	0x3040f894
   38e28:	d0222b04 	.word	0xd0222b04
   38e2c:	3048f894 	.word	0x3048f894
   38e30:	d01e2b04 	.word	0xd01e2b04
   38e34:	3050f894 	.word	0x3050f894
   38e38:	d01a2b04 	.word	0xd01a2b04
   38e3c:	3058f894 	.word	0x3058f894
   38e40:	d0162b04 	.word	0xd0162b04
   38e44:	3060f894 	.word	0x3060f894
   38e48:	d0122b04 	.word	0xd0122b04
   38e4c:	3068f894 	.word	0x3068f894
   38e50:	d00e2b04 	.word	0xd00e2b04
   38e54:	3070f894 	.word	0x3070f894
   38e58:	d00a2b04 	.word	0xd00a2b04
   38e5c:	3078f894 	.word	0x3078f894
   38e60:	bf182b04 	.word	0xbf182b04
   38e64:	d0042000 	.word	0xd0042000
   38e68:	2007bd38 	.word	0x2007bd38
   38e6c:	20084770 	.word	0x20084770
   38e70:	f7ecbd38 	.word	0xf7ecbd38
   38e74:	2000feeb 	.word	0x2000feeb
   38e78:	7821bd38 	.word	0x7821bd38
   38e7c:	f47f2903 	.word	0xf47f2903
   38e80:	2100af77 	.word	0x2100af77
   38e84:	46182501 	.word	0x46182501
   38e88:	f80468d2 	.word	0xf80468d2
   38e8c:	47905031 	.word	0x47905031
   38e90:	bd382000 	.word	0xbd382000
   38e94:	29037a21 	.word	0x29037a21
   38e98:	af6ef47f 	.word	0xaf6ef47f
   38e9c:	e7f12101 	.word	0xe7f12101
   38ea0:	29037c21 	.word	0x29037c21
   38ea4:	af6cf47f 	.word	0xaf6cf47f
   38ea8:	e7eb2102 	.word	0xe7eb2102
   38eac:	29037e21 	.word	0x29037e21
   38eb0:	6a63d0e8 	.word	0x6a63d0e8
   38eb4:	f47f4298 	.word	0xf47f4298
   38eb8:	f894af6b 	.word	0xf894af6b
   38ebc:	29031020 	.word	0x29031020
   38ec0:	af66f47f 	.word	0xaf66f47f
   38ec4:	e7dd2104 	.word	0xe7dd2104
   38ec8:	1028f894 	.word	0x1028f894
   38ecc:	f47f2903 	.word	0xf47f2903
   38ed0:	2105af63 	.word	0x2105af63
   38ed4:	f894e7d6 	.word	0xf894e7d6
   38ed8:	29031030 	.word	0x29031030
   38edc:	af60f47f 	.word	0xaf60f47f
   38ee0:	e7cf2106 	.word	0xe7cf2106
   38ee4:	1038f894 	.word	0x1038f894
   38ee8:	f47f2903 	.word	0xf47f2903
   38eec:	2107af5d 	.word	0x2107af5d
   38ef0:	f894e7c8 	.word	0xf894e7c8
   38ef4:	29031040 	.word	0x29031040
   38ef8:	af5af47f 	.word	0xaf5af47f
   38efc:	e7c12108 	.word	0xe7c12108
   38f00:	1048f894 	.word	0x1048f894
   38f04:	f47f2903 	.word	0xf47f2903
   38f08:	2109af57 	.word	0x2109af57
   38f0c:	f894e7ba 	.word	0xf894e7ba
   38f10:	29031050 	.word	0x29031050
   38f14:	af54f47f 	.word	0xaf54f47f
   38f18:	e7b3210a 	.word	0xe7b3210a
   38f1c:	1058f894 	.word	0x1058f894
   38f20:	f47f2903 	.word	0xf47f2903
   38f24:	210baf51 	.word	0x210baf51
   38f28:	200ee7ac 	.word	0x200ee7ac
   38f2c:	f8944770 	.word	0xf8944770
   38f30:	29031060 	.word	0x29031060
   38f34:	af4cf47f 	.word	0xaf4cf47f
   38f38:	e7a3210c 	.word	0xe7a3210c
   38f3c:	1068f894 	.word	0x1068f894
   38f40:	f47f2903 	.word	0xf47f2903
   38f44:	210daf49 	.word	0x210daf49
   38f48:	f894e79c 	.word	0xf894e79c
   38f4c:	29031070 	.word	0x29031070
   38f50:	af46f47f 	.word	0xaf46f47f
   38f54:	e795210e 	.word	0xe795210e
   38f58:	3078f894 	.word	0x3078f894
   38f5c:	f47f2b03 	.word	0xf47f2b03
   38f60:	4603af43 	.word	0x4603af43
   38f64:	e78d210f 	.word	0xe78d210f
   38f68:	20025f64 	.word	0x20025f64
   38f6c:	20025ffc 	.word	0x20025ffc

00038f70 <rpc_message_data_free>:
   38f70:	f0002800 	.word	0xf0002800
   38f74:	29008091 	.word	0x29008091
   38f78:	80e4f000 	.word	0x80e4f000
   38f7c:	4a81b538 	.word	0x4a81b538
   38f80:	2b006853 	.word	0x2b006853
   38f84:	808af000 	.word	0x808af000
   38f88:	681c4b7f 	.word	0x681c4b7f
   38f8c:	f00042a1 	.word	0xf00042a1
   38f90:	689c8087 	.word	0x689c8087
   38f94:	f00042a1 	.word	0xf00042a1
   38f98:	691c808f 	.word	0x691c808f
   38f9c:	f00042a1 	.word	0xf00042a1
   38fa0:	699c8091 	.word	0x699c8091
   38fa4:	f00042a1 	.word	0xf00042a1
   38fa8:	6a1c8093 	.word	0x6a1c8093
   38fac:	f00042a1 	.word	0xf00042a1
   38fb0:	6a9c8095 	.word	0x6a9c8095
   38fb4:	f00042a1 	.word	0xf00042a1
   38fb8:	6b1c8097 	.word	0x6b1c8097
   38fbc:	f00042a1 	.word	0xf00042a1
   38fc0:	6b9c8099 	.word	0x6b9c8099
   38fc4:	f00042a1 	.word	0xf00042a1
   38fc8:	6c1c809b 	.word	0x6c1c809b
   38fcc:	f00042a1 	.word	0xf00042a1
   38fd0:	6c9c809d 	.word	0x6c9c809d
   38fd4:	f00042a1 	.word	0xf00042a1
   38fd8:	6d1c80a0 	.word	0x6d1c80a0
   38fdc:	f00042a1 	.word	0xf00042a1
   38fe0:	6d9c80a3 	.word	0x6d9c80a3
   38fe4:	f00042a1 	.word	0xf00042a1
   38fe8:	6e1c80a6 	.word	0x6e1c80a6
   38fec:	f00042a1 	.word	0xf00042a1
   38ff0:	6e9c80ab 	.word	0x6e9c80ab
   38ff4:	f00042a1 	.word	0xf00042a1
   38ff8:	6f1c80ae 	.word	0x6f1c80ae
   38ffc:	f00042a1 	.word	0xf00042a1
   39000:	6f9c80b1 	.word	0x6f9c80b1
   39004:	f000428c 	.word	0xf000428c
   39008:	691380b4 	.word	0x691380b4
   3900c:	47984608 	.word	0x47984608
   39010:	781a4b5e 	.word	0x781a4b5e
   39014:	d03b2a04 	.word	0xd03b2a04
   39018:	2a047a1a 	.word	0x2a047a1a
   3901c:	7c1ad038 	.word	0x7c1ad038
   39020:	d0352a04 	.word	0xd0352a04
   39024:	2a047e1a 	.word	0x2a047e1a
   39028:	f893d032 	.word	0xf893d032
   3902c:	2a042020 	.word	0x2a042020
   39030:	f893d02e 	.word	0xf893d02e
   39034:	2a042028 	.word	0x2a042028
   39038:	f893d02a 	.word	0xf893d02a
   3903c:	2a042030 	.word	0x2a042030
   39040:	f893d026 	.word	0xf893d026
   39044:	2a042038 	.word	0x2a042038
   39048:	f893d022 	.word	0xf893d022
   3904c:	2a042040 	.word	0x2a042040
   39050:	f893d01e 	.word	0xf893d01e
   39054:	2a042048 	.word	0x2a042048
   39058:	f893d01a 	.word	0xf893d01a
   3905c:	2a042050 	.word	0x2a042050
   39060:	f893d016 	.word	0xf893d016
   39064:	2a042058 	.word	0x2a042058
   39068:	f893d012 	.word	0xf893d012
   3906c:	2a042060 	.word	0x2a042060
   39070:	f893d00e 	.word	0xf893d00e
   39074:	2a042068 	.word	0x2a042068
   39078:	f893d00a 	.word	0xf893d00a
   3907c:	2a042070 	.word	0x2a042070
   39080:	f893d006 	.word	0xf893d006
   39084:	2b043078 	.word	0x2b043078
   39088:	2000bf18 	.word	0x2000bf18
   3908c:	bd38d000 	.word	0xbd38d000
   39090:	fddcf7ec 	.word	0xfddcf7ec
   39094:	bd382000 	.word	0xbd382000
   39098:	47702007 	.word	0x47702007
   3909c:	bd382008 	.word	0xbd382008
   390a0:	4284889c 	.word	0x4284889c
   390a4:	af75f47f 	.word	0xaf75f47f
   390a8:	20002400 	.word	0x20002400
   390ac:	05c4eb03 	.word	0x05c4eb03
   390b0:	0034f843 	.word	0x0034f843
   390b4:	e7a880a8 	.word	0xe7a880a8
   390b8:	4284899c 	.word	0x4284899c
   390bc:	af6df47f 	.word	0xaf6df47f
   390c0:	e7f22401 	.word	0xe7f22401
   390c4:	42848a9c 	.word	0x42848a9c
   390c8:	af6bf47f 	.word	0xaf6bf47f
   390cc:	e7ec2402 	.word	0xe7ec2402
   390d0:	42848b9c 	.word	0x42848b9c
   390d4:	af69f47f 	.word	0xaf69f47f
   390d8:	e7e62403 	.word	0xe7e62403
   390dc:	42848c9c 	.word	0x42848c9c
   390e0:	af67f47f 	.word	0xaf67f47f
   390e4:	e7e02404 	.word	0xe7e02404
   390e8:	42848d9c 	.word	0x42848d9c
   390ec:	af65f47f 	.word	0xaf65f47f
   390f0:	e7da2405 	.word	0xe7da2405
   390f4:	42848e9c 	.word	0x42848e9c
   390f8:	af63f47f 	.word	0xaf63f47f
   390fc:	e7d42406 	.word	0xe7d42406
   39100:	42848f9c 	.word	0x42848f9c
   39104:	af61f47f 	.word	0xaf61f47f
   39108:	e7ce2407 	.word	0xe7ce2407
   3910c:	4044f8b3 	.word	0x4044f8b3
   39110:	f47f4284 	.word	0xf47f4284
   39114:	2408af5e 	.word	0x2408af5e
   39118:	f8b3e7c7 	.word	0xf8b3e7c7
   3911c:	4284404c 	.word	0x4284404c
   39120:	af5bf47f 	.word	0xaf5bf47f
   39124:	e7c02409 	.word	0xe7c02409
   39128:	4054f8b3 	.word	0x4054f8b3
   3912c:	f47f4284 	.word	0xf47f4284
   39130:	240aaf58 	.word	0x240aaf58
   39134:	f8b3e7b9 	.word	0xf8b3e7b9
   39138:	4284405c 	.word	0x4284405c
   3913c:	af55f47f 	.word	0xaf55f47f
   39140:	e7b2240b 	.word	0xe7b2240b
   39144:	4770200e 	.word	0x4770200e
   39148:	4064f8b3 	.word	0x4064f8b3
   3914c:	f47f4284 	.word	0xf47f4284
   39150:	240caf50 	.word	0x240caf50
   39154:	f8b3e7a9 	.word	0xf8b3e7a9
   39158:	4284406c 	.word	0x4284406c
   3915c:	af4df47f 	.word	0xaf4df47f
   39160:	e7a2240d 	.word	0xe7a2240d
   39164:	4074f8b3 	.word	0x4074f8b3
   39168:	f47f4284 	.word	0xf47f4284
   3916c:	240eaf4a 	.word	0x240eaf4a
   39170:	f8b3e79b 	.word	0xf8b3e79b
   39174:	4284407c 	.word	0x4284407c
   39178:	240fbf08 	.word	0x240fbf08
   3917c:	af45f47f 	.word	0xaf45f47f
   39180:	bf00e793 	.word	0xbf00e793
   39184:	20025f64 	.word	0x20025f64
   39188:	20025f7c 	.word	0x20025f7c
   3918c:	20025ffc 	.word	0x20025ffc

00039190 <symbol_000fb79>:
   39190:	b4302801 	.word	0xb4302801
   39194:	d1034b0a 	.word	0xd1034b0a
   39198:	7c1de00a 	.word	0x7c1de00a
   3919c:	d0084285 	.word	0xd0084285
   391a0:	4f14f853 	.word	0x4f14f853
   391a4:	d1f82c00 	.word	0xd1f82c00
   391a8:	002df06f 	.word	0x002df06f
   391ac:	4770bc30 	.word	0x4770bc30
   391b0:	600c4c04 	.word	0x600c4c04
   391b4:	2000685b 	.word	0x2000685b
   391b8:	6013bc30 	.word	0x6013bc30
   391bc:	bf004770 	.word	0xbf004770
   391c0:	0004b920 	.word	0x0004b920
   391c4:	0004b8ec 	.word	0x0004b8ec

000391c8 <symbol_000494c>:
   391c8:	b4302803 	.word	0xb4302803
   391cc:	d1034b0a 	.word	0xd1034b0a
   391d0:	7c1de00a 	.word	0x7c1de00a
   391d4:	d0084285 	.word	0xd0084285
   391d8:	4f14f853 	.word	0x4f14f853
   391dc:	d1f82c00 	.word	0xd1f82c00
   391e0:	002df06f 	.word	0x002df06f
   391e4:	4770bc30 	.word	0x4770bc30
   391e8:	600c4c04 	.word	0x600c4c04
   391ec:	2000685b 	.word	0x2000685b
   391f0:	6013bc30 	.word	0x6013bc30
   391f4:	bf004770 	.word	0xbf004770
   391f8:	0004b8f8 	.word	0x0004b8f8
   391fc:	0004b8e0 	.word	0x0004b8e0

00039200 <dfu_client_event_handler>:
   39200:	1b08f850 	.word	0x1b08f850
   39204:	f7fb0c09 	.word	0xf7fb0c09
   39208:	bf00bff3 	.word	0xbf00bff3

0003920c <rpc_dfu_client_init>:
   3920c:	f7ff4801 	.word	0xf7ff4801
   39210:	bf00bb33 	.word	0xbf00bb33
   39214:	0004b970 	.word	0x0004b970

00039218 <rpc_dfu_client_request_alloc>:
   39218:	b5102300 	.word	0xb5102300
   3921c:	9301b082 	.word	0x9301b082
   39220:	4604b158 	.word	0x4604b158
   39224:	2006aa01 	.word	0x2006aa01
   39228:	fd5ef7ff 	.word	0xfd5ef7ff
   3922c:	9b01b918 	.word	0x9b01b918
   39230:	3308b10b 	.word	0x3308b10b
   39234:	b0026023 	.word	0xb0026023
   39238:	2007bd10 	.word	0x2007bd10
   3923c:	bd10b002 	.word	0xbd10b002

00039240 <rpc_dfu_client_request_send>:
   39240:	4f70f411 	.word	0x4f70f411
   39244:	b160d10b 	.word	0xb160d10b
   39248:	f8304603 	.word	0xf8304603
   3924c:	20062c08 	.word	0x20062c08
   39250:	4101ea42 	.word	0x4101ea42
   39254:	1d08f843 	.word	0x1d08f843
   39258:	f7ff4619 	.word	0xf7ff4619
   3925c:	200fbd2d 	.word	0x200fbd2d
   39260:	20074770 	.word	0x20074770
   39264:	bf004770 	.word	0xbf004770

00039268 <rpc_dfu_client_message_free>:
   39268:	f1a0b120 	.word	0xf1a0b120
   3926c:	20060108 	.word	0x20060108
   39270:	bd6cf7ff 	.word	0xbd6cf7ff
   39274:	47702007 	.word	0x47702007

00039278 <rpc_dfu_client_data_free>:
   39278:	4601b118 	.word	0x4601b118
   3927c:	f7ff2006 	.word	0xf7ff2006
   39280:	2007be77 	.word	0x2007be77
   39284:	bf004770 	.word	0xbf004770

00039288 <mem_free>:
   39288:	4ff0e92d 	.word	0x4ff0e92d
   3928c:	c0ccf8df 	.word	0xc0ccf8df
   39290:	9000b083 	.word	0x9000b083
   39294:	0b3cf10c 	.word	0x0b3cf10c
   39298:	3008f8dc 	.word	0x3008f8dc
   3929c:	f8dcb12b 	.word	0xf8dcb12b
   392a0:	9c002000 	.word	0x9c002000
   392a4:	42a07810 	.word	0x42a07810
   392a8:	f10cd006 	.word	0xf10cd006
   392ac:	45e30c0c 	.word	0x45e30c0c
   392b0:	b003d1f2 	.word	0xb003d1f2
   392b4:	8ff0e8bd 	.word	0x8ff0e8bd
   392b8:	a004f8dc 	.word	0xa004f8dc
   392bc:	080aeb03 	.word	0x080aeb03
   392c0:	d2f245c2 	.word	0xd2f245c2
   392c4:	f8cd6853 	.word	0xf8cd6853
   392c8:	46d6c004 	.word	0x46d6c004
   392cc:	f8d2469c 	.word	0xf8d2469c
   392d0:	89979010 	.word	0x89979010
   392d4:	000aebae 	.word	0x000aebae
   392d8:	f8b9b3df 	.word	0xf8b9b3df
   392dc:	42902002 	.word	0x42902002
   392e0:	4665d31c 	.word	0x4665d31c
   392e4:	f1092400 	.word	0xf1092400
   392e8:	e0030304 	.word	0xe0030304
   392ec:	3304885a 	.word	0x3304885a
   392f0:	d8154282 	.word	0xd8154282
   392f4:	6c04f833 	.word	0x6c04f833
   392f8:	42a73401 	.word	0x42a73401
   392fc:	5506fb02 	.word	0x5506fb02
   39300:	0002eba0 	.word	0x0002eba0
   39304:	d1f1461e 	.word	0xd1f1461e
   39308:	42812000 	.word	0x42812000
   3930c:	f10ed00d 	.word	0xf10ed00d
   39310:	45f00e01 	.word	0x45f00e01
   39314:	f8ddd1de 	.word	0xf8ddd1de
   39318:	e7c6c004 	.word	0xe7c6c004
   3931c:	464e4665 	.word	0x464e4665
   39320:	fb008833 	.word	0xfb008833
   39324:	42815003 	.word	0x42815003
   39328:	f5bed1f1 	.word	0xf5bed1f1
   3932c:	f8dd7f00 	.word	0xf8dd7f00
   39330:	d0bac004 	.word	0xd0bac004
   39334:	4a082301 	.word	0x4a082301
   39338:	115eea4f 	.word	0x115eea4f
   3933c:	0021f852 	.word	0x0021f852
   39340:	0e1ff00e 	.word	0x0e1ff00e
   39344:	fe0efa03 	.word	0xfe0efa03
   39348:	0000ea4e 	.word	0x0000ea4e
   3934c:	0021f842 	.word	0x0021f842
   39350:	4638e7af 	.word	0x4638e7af
   39354:	bf00e7d9 	.word	0xbf00e7d9
   39358:	2002607c 	.word	0x2002607c
   3935c:	200260c0 	.word	0x200260c0

00039360 <mem_alloc.constprop.5>:
   39360:	d0502800 	.word	0xd0502800
   39364:	f8d34b6d 	.word	0xf8d34b6d
   39368:	42902088 	.word	0x42902088
   3936c:	e92dd84b 	.word	0xe92dd84b
   39370:	f8d34ff0 	.word	0xf8d34ff0
   39374:	b083b08c 	.word	0xb083b08c
   39378:	0f00f1bb 	.word	0x0f00f1bb
   3937c:	f10bd054 	.word	0xf10bd054
   39380:	469132ff 	.word	0x469132ff
   39384:	f04f2600 	.word	0xf04f2600
   39388:	4f650812 	.word	0x4f650812
   3938c:	f10b9201 	.word	0xf10b9201
   39390:	eb060e11 	.word	0xeb060e11
   39394:	f8530209 	.word	0xf8530209
   39398:	32014038 	.word	0x32014038
   3939c:	eb040852 	.word	0xeb040852
   393a0:	f1020c44 	.word	0xf1020c44
   393a4:	f8530112 	.word	0xf8530112
   393a8:	f8575031 	.word	0xf8575031
   393ac:	f853a02c 	.word	0xf853a02c
   393b0:	eb03403e 	.word	0xeb03403e
   393b4:	f8dc0cc8 	.word	0xf8dc0cc8
   393b8:	eb05c004 	.word	0xeb05c004
   393bc:	eb040545 	.word	0xeb040545
   393c0:	f8da0444 	.word	0xf8da0444
   393c4:	f857a010 	.word	0xf857a010
   393c8:	f8575025 	.word	0xf8575025
   393cc:	f83a4024 	.word	0xf83a4024
   393d0:	eb03a02c 	.word	0xeb03a02c
   393d4:	eb0301c1 	.word	0xeb0301c1
   393d8:	68490cce 	.word	0x68490cce
   393dc:	6924692d 	.word	0x6924692d
   393e0:	c004f8dc 	.word	0xc004f8dc
   393e4:	f8354550 	.word	0xf8354550
   393e8:	f8345021 	.word	0xf8345021
   393ec:	d915102c 	.word	0xd915102c
   393f0:	d2114288 	.word	0xd2114288
   393f4:	d90842a8 	.word	0xd90842a8
   393f8:	45b11c56 	.word	0x45b11c56
   393fc:	8087f0c0 	.word	0x8087f0c0
   39400:	0813f102 	.word	0x0813f102
   39404:	2000e7c5 	.word	0x2000e7c5
   39408:	f1024770 	.word	0xf1024770
   3940c:	454e39ff 	.word	0x454e39ff
   39410:	f102d87d 	.word	0xf102d87d
   39414:	e7bc0e11 	.word	0xe7bc0e11
   39418:	0601f109 	.word	0x0601f109
   3941c:	d00745b3 	.word	0xd00745b3
   39420:	d0012e10 	.word	0xd0012e10
   39424:	d80845b3 	.word	0xd80845b3
   39428:	b0032000 	.word	0xb0032000
   3942c:	8ff0e8bd 	.word	0x8ff0e8bd
   39430:	2a109a01 	.word	0x2a109a01
   39434:	4616bf18 	.word	0x4616bf18
   39438:	f8dfd0f6 	.word	0xf8dfd0f6
   3943c:	eb03c0e8 	.word	0xeb03c0e8
   39440:	e9d808c6 	.word	0xe9d808c6
   39444:	eb022424 	.word	0xeb022424
   39448:	f8570242 	.word	0xf8570242
   3944c:	eb073022 	.word	0xeb073022
   39450:	f8d20282 	.word	0xf8d20282
   39454:	691de004 	.word	0x691de004
   39458:	d0562c00 	.word	0xd0562c00
   3945c:	4670462a 	.word	0x4670462a
   39460:	eb0500a4 	.word	0xeb0500a4
   39464:	88510904 	.word	0x88510904
   39468:	45913204 	.word	0x45913204
   3946c:	d1fa4408 	.word	0xd1fa4408
   39470:	f8b11929 	.word	0xf8b11929
   39474:	4482a002 	.word	0x4482a002
   39478:	d9184582 	.word	0xd9184582
   3947c:	f85c0941 	.word	0xf85c0941
   39480:	f0002021 	.word	0xf0002021
   39484:	fa22041f 	.word	0xfa22041f
   39488:	f019f904 	.word	0xf019f904
   3948c:	d0070f01 	.word	0xd0070f01
   39490:	f85ce013 	.word	0xf85ce013
   39494:	fa222021 	.word	0xfa222021
   39498:	f019f904 	.word	0xf019f904
   3949c:	d10c0f01 	.word	0xd10c0f01
   394a0:	45823001 	.word	0x45823001
   394a4:	1150ea4f 	.word	0x1150ea4f
   394a8:	041ff000 	.word	0x041ff000
   394ac:	3601d1f1 	.word	0x3601d1f1
   394b0:	f108455e 	.word	0xf108455e
   394b4:	d3c40808 	.word	0xd3c40808
   394b8:	2601e7b6 	.word	0x2601e7b6
   394bc:	f404fa06 	.word	0xf404fa06
   394c0:	ea22899e 	.word	0xea22899e
   394c4:	eba00204 	.word	0xeba00204
   394c8:	f84c000e 	.word	0xf84c000e
   394cc:	685c2021 	.word	0x685c2021
   394d0:	d0a92e00 	.word	0xd0a92e00
   394d4:	4282886a 	.word	0x4282886a
   394d8:	2100d811 	.word	0x2100d811
   394dc:	e0031d2b 	.word	0xe0031d2b
   394e0:	3304885a 	.word	0x3304885a
   394e4:	d80a4282 	.word	0xd80a4282
   394e8:	5c04f833 	.word	0x5c04f833
   394ec:	428e3101 	.word	0x428e3101
   394f0:	4405fb02 	.word	0x4405fb02
   394f4:	0002eba0 	.word	0x0002eba0
   394f8:	d1f1461d 	.word	0xd1f1461d
   394fc:	882be794 	.word	0x882be794
   39500:	4003fb00 	.word	0x4003fb00
   39504:	e8bdb003 	.word	0xe8bdb003
   39508:	46708ff0 	.word	0x46708ff0
   3950c:	f1bbe7b0 	.word	0xf1bbe7b0
   39510:	bf080f10 	.word	0xbf080f10
   39514:	d090260f 	.word	0xd090260f
   39518:	bf00e786 	.word	0xbf00e786
   3951c:	200260fc 	.word	0x200260fc
   39520:	200260c0 	.word	0x200260c0
   39524:	2002607c 	.word	0x2002607c

00039528 <mem_alloc.constprop.4>:
   39528:	d04c2800 	.word	0xd04c2800
   3952c:	681a4b6b 	.word	0x681a4b6b
   39530:	d8484290 	.word	0xd8484290
   39534:	4ff0e92d 	.word	0x4ff0e92d
   39538:	b083685f 	.word	0xb083685f
   3953c:	2f009700 	.word	0x2f009700
   39540:	1e7ad051 	.word	0x1e7ad051
   39544:	21004696 	.word	0x21004696
   39548:	0c01f04f 	.word	0x0c01f04f
   3954c:	92014c64 	.word	0x92014c64
   39550:	020eeb01 	.word	0x020eeb01
   39554:	f8533201 	.word	0xf8533201
   39558:	0852503c 	.word	0x0852503c
   3955c:	0801f102 	.word	0x0801f102
   39560:	0545eb05 	.word	0x0545eb05
   39564:	9037f853 	.word	0x9037f853
   39568:	a025f854 	.word	0xa025f854
   3956c:	6038f853 	.word	0x6038f853
   39570:	0549eb09 	.word	0x0549eb09
   39574:	09cceb03 	.word	0x09cceb03
   39578:	9004f8d9 	.word	0x9004f8d9
   3957c:	0646eb06 	.word	0x0646eb06
   39580:	a010f8da 	.word	0xa010f8da
   39584:	6026f854 	.word	0x6026f854
   39588:	5025f854 	.word	0x5025f854
   3958c:	a029f83a 	.word	0xa029f83a
   39590:	0bc8eb03 	.word	0x0bc8eb03
   39594:	09c7eb03 	.word	0x09c7eb03
   39598:	f8db6936 	.word	0xf8db6936
   3959c:	692db004 	.word	0x692db004
   395a0:	9004f8d9 	.word	0x9004f8d9
   395a4:	f8364550 	.word	0xf8364550
   395a8:	f835602b 	.word	0xf835602b
   395ac:	d9135029 	.word	0xd9135029
   395b0:	d21042a8 	.word	0xd21042a8
   395b4:	d90842b0 	.word	0xd90842b0
   395b8:	464145c6 	.word	0x464145c6
   395bc:	8087f0c0 	.word	0x8087f0c0
   395c0:	0c01f108 	.word	0x0c01f108
   395c4:	2000e7c4 	.word	0x2000e7c4
   395c8:	f1024770 	.word	0xf1024770
   395cc:	45713eff 	.word	0x45713eff
   395d0:	4617d87d 	.word	0x4617d87d
   395d4:	4639e7bc 	.word	0x4639e7bc
   395d8:	428a9a00 	.word	0x428a9a00
   395dc:	2910d007 	.word	0x2910d007
   395e0:	428ad001 	.word	0x428ad001
   395e4:	2000d808 	.word	0x2000d808
   395e8:	e8bdb003 	.word	0xe8bdb003
   395ec:	9a018ff0 	.word	0x9a018ff0
   395f0:	bf182a10 	.word	0xbf182a10
   395f4:	d0f64611 	.word	0xd0f64611
   395f8:	c0e8f8df 	.word	0xc0e8f8df
   395fc:	9000f8dd 	.word	0x9000f8dd
   39600:	08c1eb03 	.word	0x08c1eb03
   39604:	2602e9d8 	.word	0x2602e9d8
   39608:	0242eb02 	.word	0x0242eb02
   3960c:	3022f854 	.word	0x3022f854
   39610:	0282eb04 	.word	0x0282eb04
   39614:	e004f8d2 	.word	0xe004f8d2
   39618:	2e00691f 	.word	0x2e00691f
   3961c:	463ad055 	.word	0x463ad055
   39620:	00b64670 	.word	0x00b64670
   39624:	0a06eb07 	.word	0x0a06eb07
   39628:	32048855 	.word	0x32048855
   3962c:	44284592 	.word	0x44284592
   39630:	19bdd1fa 	.word	0x19bdd1fa
   39634:	b002f8b5 	.word	0xb002f8b5
   39638:	45834483 	.word	0x45834483
   3963c:	0945d918 	.word	0x0945d918
   39640:	2025f85c 	.word	0x2025f85c
   39644:	061ff000 	.word	0x061ff000
   39648:	fa06fa22 	.word	0xfa06fa22
   3964c:	0f01f01a 	.word	0x0f01f01a
   39650:	e013d007 	.word	0xe013d007
   39654:	2025f85c 	.word	0x2025f85c
   39658:	fa06fa22 	.word	0xfa06fa22
   3965c:	0f01f01a 	.word	0x0f01f01a
   39660:	3001d10c 	.word	0x3001d10c
   39664:	ea4f4583 	.word	0xea4f4583
   39668:	f0001550 	.word	0xf0001550
   3966c:	d1f1061f 	.word	0xd1f1061f
   39670:	45493101 	.word	0x45493101
   39674:	0808f108 	.word	0x0808f108
   39678:	e7b4d3c4 	.word	0xe7b4d3c4
   3967c:	40b12101 	.word	0x40b12101
   39680:	ea22899e 	.word	0xea22899e
   39684:	eba00201 	.word	0xeba00201
   39688:	f84c000e 	.word	0xf84c000e
   3968c:	685c2025 	.word	0x685c2025
   39690:	d0a82e00 	.word	0xd0a82e00
   39694:	4282887a 	.word	0x4282887a
   39698:	2100d811 	.word	0x2100d811
   3969c:	e0031d3b 	.word	0xe0031d3b
   396a0:	3304885a 	.word	0x3304885a
   396a4:	d80a4282 	.word	0xd80a4282
   396a8:	5c04f833 	.word	0x5c04f833
   396ac:	428e3101 	.word	0x428e3101
   396b0:	0002eba0 	.word	0x0002eba0
   396b4:	4405fb02 	.word	0x4405fb02
   396b8:	d1f1461f 	.word	0xd1f1461f
   396bc:	883be793 	.word	0x883be793
   396c0:	4003fb00 	.word	0x4003fb00
   396c4:	e8bdb003 	.word	0xe8bdb003
   396c8:	46708ff0 	.word	0x46708ff0
   396cc:	9a00e7b1 	.word	0x9a00e7b1
   396d0:	bf082a10 	.word	0xbf082a10
   396d4:	d08f210f 	.word	0xd08f210f
   396d8:	bf00e785 	.word	0xbf00e785
   396dc:	200260fc 	.word	0x200260fc
   396e0:	200260c0 	.word	0x200260c0
   396e4:	2002607c 	.word	0x2002607c

000396e8 <nrf_mem_init>:
   396e8:	2200b570 	.word	0x2200b570
   396ec:	48332501 	.word	0x48332501
   396f0:	f8500951 	.word	0xf8500951
   396f4:	f0024021 	.word	0xf0024021
   396f8:	fa05031f 	.word	0xfa05031f
   396fc:	3201f303 	.word	0x3201f303
   39700:	f5b24323 	.word	0xf5b24323
   39704:	f8407f00 	.word	0xf8407f00
   39708:	d1f13021 	.word	0xd1f13021
   3970c:	4b2c2400 	.word	0x4b2c2400
   39710:	223c4621 	.word	0x223c4621
   39714:	601c482b 	.word	0x601c482b
   39718:	fc8ef007 	.word	0xfc8ef007
   3971c:	22052110 	.word	0x22052110
   39720:	4e2a4b29 	.word	0x4e2a4b29
   39724:	4400e9c3 	.word	0x4400e9c3
   39728:	615960d9 	.word	0x615960d9
   3972c:	625961d9 	.word	0x625961d9
   39730:	635962d9 	.word	0x635962d9
   39734:	645963d9 	.word	0x645963d9
   39738:	655964d9 	.word	0x655964d9
   3973c:	665965d9 	.word	0x665965d9
   39740:	675966d9 	.word	0x675966d9
   39744:	609a67d9 	.word	0x609a67d9
   39748:	619a611a 	.word	0x619a611a
   3974c:	629a621a 	.word	0x629a621a
   39750:	639a631a 	.word	0x639a631a
   39754:	649a641a 	.word	0x649a641a
   39758:	659a651a 	.word	0x659a651a
   3975c:	669a661a 	.word	0x669a661a
   39760:	679a671a 	.word	0x679a671a
   39764:	2120e9c3 	.word	0x2120e9c3
   39768:	4422e9c3 	.word	0x4422e9c3
   3976c:	2124e9c3 	.word	0x2124e9c3
   39770:	2126e9c3 	.word	0x2126e9c3
   39774:	2128e9c3 	.word	0x2128e9c3
   39778:	212ae9c3 	.word	0x212ae9c3
   3977c:	212ce9c3 	.word	0x212ce9c3
   39780:	212ee9c3 	.word	0x212ee9c3
   39784:	2130e9c3 	.word	0x2130e9c3
   39788:	2132e9c3 	.word	0x2132e9c3
   3978c:	2134e9c3 	.word	0x2134e9c3
   39790:	2136e9c3 	.word	0x2136e9c3
   39794:	2138e9c3 	.word	0x2138e9c3
   39798:	213ae9c3 	.word	0x213ae9c3
   3979c:	213ce9c3 	.word	0x213ce9c3
   397a0:	213ee9c3 	.word	0x213ee9c3
   397a4:	1104f8c3 	.word	0x1104f8c3
   397a8:	2100f8c3 	.word	0x2100f8c3
   397ac:	110cf8c3 	.word	0x110cf8c3
   397b0:	2108f8c3 	.word	0x2108f8c3
   397b4:	70354620 	.word	0x70354620
   397b8:	bf00bd70 	.word	0xbf00bd70
   397bc:	2002607c 	.word	0x2002607c
   397c0:	200260bc 	.word	0x200260bc
   397c4:	200260c0 	.word	0x200260c0
   397c8:	200260fc 	.word	0x200260fc
   397cc:	2002c1fb 	.word	0x2002c1fb

000397d0 <nrf_mem_register>:
   397d0:	4ff0e92d 	.word	0x4ff0e92d
   397d4:	b0874b87 	.word	0xb0874b87
   397d8:	2b00781b 	.word	0x2b00781b
   397dc:	808cf000 	.word	0x808cf000
   397e0:	b321b328 	.word	0xb321b328
   397e4:	f8df780b 	.word	0xf8df780b
   397e8:	eb038218 	.word	0xeb038218
   397ec:	eb081303 	.word	0xeb081303
   397f0:	685b03c3 	.word	0x685b03c3
   397f4:	c00cf8b1 	.word	0xc00cf8b1
   397f8:	2b104463 	.word	0x2b104463
   397fc:	f04fd811 	.word	0xf04fd811
   39800:	46890a00 	.word	0x46890a00
   39804:	4f7d4b7c 	.word	0x4f7d4b7c
   39808:	ea4f681b 	.word	0xea4f681b
   3980c:	93000e8c 	.word	0x93000e8c
   39810:	b19168b9 	.word	0xb19168b9
   39814:	0a01f10a 	.word	0x0a01f10a
   39818:	0f05f1ba 	.word	0x0f05f1ba
   3981c:	070cf107 	.word	0x070cf107
   39820:	f248d1f6 	.word	0xf248d1f6
   39824:	46581b07 	.word	0x46581b07
   39828:	e8bdb007 	.word	0xe8bdb007
   3982c:	f2488ff0 	.word	0xf2488ff0
   39830:	46581b0e 	.word	0x46581b0e
   39834:	e8bdb007 	.word	0xe8bdb007
   39838:	f1bc8ff0 	.word	0xf1bc8ff0
   3983c:	d0610f00 	.word	0xd0610f00
   39840:	460c460d 	.word	0x460c460d
   39844:	3010f8d9 	.word	0x3010f8d9
   39848:	0b03eb0e 	.word	0x0b03eb0e
   3984c:	f833885a 	.word	0xf833885a
   39850:	44156b04 	.word	0x44156b04
   39854:	fb02459b 	.word	0xfb02459b
   39858:	d1f74406 	.word	0xd1f74406
   3985c:	3008f8d9 	.word	0x3008f8d9
   39860:	d3d742a3 	.word	0xd3d742a3
   39864:	442b9b00 	.word	0x442b9b00
   39868:	7f00f5b3 	.word	0x7f00f5b3
   3986c:	4c63d2d2 	.word	0x4c63d2d2
   39870:	024aeb0a 	.word	0x024aeb0a
   39874:	f8c00092 	.word	0xf8c00092
   39878:	18a0a000 	.word	0x18a0a000
   3987c:	9002f844 	.word	0x9002f844
   39880:	468b9a00 	.word	0x468b9a00
   39884:	2501e9c0 	.word	0x2501e9c0
   39888:	2001f899 	.word	0x2001f899
   3988c:	2a01485a 	.word	0x2a01485a
   39890:	d0c86003 	.word	0xd0c86003
   39894:	300cf8b9 	.word	0x300cf8b9
   39898:	d0c42b00 	.word	0xd0c42b00
   3989c:	f8cd2500 	.word	0xf8cd2500
   398a0:	f8cd9004 	.word	0xf8cd9004
   398a4:	f8cda00c 	.word	0xf8cda00c
   398a8:	9b01b014 	.word	0x9b01b014
   398ac:	691a781f 	.word	0x691a781f
   398b0:	eb03013b 	.word	0xeb03013b
   398b4:	93000907 	.word	0x93000907
   398b8:	03c9eb08 	.word	0x03c9eb08
   398bc:	f8326859 	.word	0xf8326859
   398c0:	91024025 	.word	0x91024025
   398c4:	9a03bb39 	.word	0x9a03bb39
   398c8:	609a60dd 	.word	0x609a60dd
   398cc:	443b9b00 	.word	0x443b9b00
   398d0:	eb08461f 	.word	0xeb08461f
   398d4:	684b01c3 	.word	0x684b01c3
   398d8:	2037f858 	.word	0x2037f858
   398dc:	42943301 	.word	0x42943301
   398e0:	d912604b 	.word	0xd912604b
   398e4:	f8489b01 	.word	0xf8489b01
   398e8:	899b4037 	.word	0x899b4037
   398ec:	429d3501 	.word	0x429d3501
   398f0:	f8ddd3db 	.word	0xf8ddd3db
   398f4:	e796b014 	.word	0xe796b014
   398f8:	1b08f248 	.word	0x1b08f248
   398fc:	b0074658 	.word	0xb0074658
   39900:	8ff0e8bd 	.word	0x8ff0e8bd
   39904:	46659b00 	.word	0x46659b00
   39908:	9b01e7ae 	.word	0x9b01e7ae
   3990c:	899b3501 	.word	0x899b3501
   39910:	d8ca42ab 	.word	0xd8ca42ab
   39914:	2600e7ed 	.word	0x2600e7ed
   39918:	3afff101 	.word	0x3afff101
   3991c:	eb069504 	.word	0xeb069504
   39920:	eb09000a 	.word	0xeb09000a
   39924:	32010206 	.word	0x32010206
   39928:	f8583001 	.word	0xf8583001
   3992c:	0840c032 	.word	0x0840c032
   39930:	eb094d32 	.word	0xeb094d32
   39934:	eb090100 	.word	0xeb090100
   39938:	3101030a 	.word	0x3101030a
   3993c:	eb0c3301 	.word	0xeb0c3301
   39940:	f8580c4c 	.word	0xf8580c4c
   39944:	f855e031 	.word	0xf855e031
   39948:	f858b02c 	.word	0xf858b02c
   3994c:	eb08c033 	.word	0xeb08c033
   39950:	eb0e02c2 	.word	0xeb0e02c2
   39954:	eb0c0e4e 	.word	0xeb0c0e4e
   39958:	f8db0c4c 	.word	0xf8db0c4c
   3995c:	6852b010 	.word	0x6852b010
   39960:	e02ef855 	.word	0xe02ef855
   39964:	c02cf855 	.word	0xc02cf855
   39968:	01c1eb08 	.word	0x01c1eb08
   3996c:	03c3eb08 	.word	0x03c3eb08
   39970:	2022f83b 	.word	0x2022f83b
   39974:	e010f8de 	.word	0xe010f8de
   39978:	f8dc6849 	.word	0xf8dc6849
   3997c:	685bc010 	.word	0x685bc010
   39980:	f83e4294 	.word	0xf83e4294
   39984:	f83c1021 	.word	0xf83c1021
   39988:	d92d3023 	.word	0xd92d3023
   3998c:	d22d429c 	.word	0xd22d429c
   39990:	d924428c 	.word	0xd924428c
   39994:	45b21c46 	.word	0x45b21c46
   39998:	2610d2c1 	.word	0x2610d2c1
   3999c:	9a029d04 	.word	0x9a029d04
   399a0:	d91142b2 	.word	0xd91142b2
   399a4:	443b9b00 	.word	0x443b9b00
   399a8:	4433441a 	.word	0x4433441a
   399ac:	0ac2eb08 	.word	0x0ac2eb08
   399b0:	09c3eb08 	.word	0x09c3eb08
   399b4:	46512208 	.word	0x46512208
   399b8:	0002eb0a 	.word	0x0002eb0a
   399bc:	0a08f1aa 	.word	0x0a08f1aa
   399c0:	fa76f7e0 	.word	0xfa76f7e0
   399c4:	d1f545d1 	.word	0xd1f545d1
   399c8:	99039b00 	.word	0x99039b00
   399cc:	4433443b 	.word	0x4433443b
   399d0:	eb083301 	.word	0xeb083301
   399d4:	f84802c3 	.word	0xf84802c3
   399d8:	60551033 	.word	0x60551033
   399dc:	f100e776 	.word	0xf100e776
   399e0:	45563aff 	.word	0x45563aff
   399e4:	e7d8d99b 	.word	0xe7d8d99b
   399e8:	e7d89d04 	.word	0xe7d89d04
   399ec:	f10a9d04 	.word	0xf10a9d04
   399f0:	e7d40601 	.word	0xe7d40601
   399f4:	2002c1fb 	.word	0x2002c1fb
   399f8:	200260bc 	.word	0x200260bc
   399fc:	200260c0 	.word	0x200260c0
   39a00:	200260fc 	.word	0x200260fc

00039a04 <nrf_malloc>:
   39a04:	781b4b03 	.word	0x781b4b03
   39a08:	f7ffb10b 	.word	0xf7ffb10b
   39a0c:	4618bd8d 	.word	0x4618bd8d
   39a10:	bf004770 	.word	0xbf004770
   39a14:	2002c1fb 	.word	0x2002c1fb

00039a18 <nrf_calloc>:
   39a18:	4b08b538 	.word	0x4b08b538
   39a1c:	b155781d 	.word	0xb155781d
   39a20:	f400fb01 	.word	0xf400fb01
   39a24:	f7ff4620 	.word	0xf7ff4620
   39a28:	4605fd7f 	.word	0x4605fd7f
   39a2c:	4622b118 	.word	0x4622b118
   39a30:	f0072100 	.word	0xf0072100
   39a34:	4628fb01 	.word	0x4628fb01
   39a38:	bf00bd38 	.word	0xbf00bd38
   39a3c:	2002c1fb 	.word	0x2002c1fb

00039a40 <nrf_free>:
   39a40:	781b4b04 	.word	0x781b4b04
   39a44:	b118b123 	.word	0xb118b123
   39a48:	20004601 	.word	0x20004601
   39a4c:	bc1cf7ff 	.word	0xbc1cf7ff
   39a50:	bf004770 	.word	0xbf004770
   39a54:	2002c1fb 	.word	0x2002c1fb

00039a58 <nrf_shared_malloc>:
   39a58:	781b4b03 	.word	0x781b4b03
   39a5c:	f7ffb10b 	.word	0xf7ffb10b
   39a60:	4618bc7f 	.word	0x4618bc7f
   39a64:	bf004770 	.word	0xbf004770
   39a68:	2002c1fb 	.word	0x2002c1fb

00039a6c <nrf_shared_free>:
   39a6c:	781b4b04 	.word	0x781b4b04
   39a70:	b118b123 	.word	0xb118b123
   39a74:	20014601 	.word	0x20014601
   39a78:	bc06f7ff 	.word	0xbc06f7ff
   39a7c:	bf004770 	.word	0xbf004770
   39a80:	2002c1fb 	.word	0x2002c1fb

00039a84 <symbol_0003897>:
   39a84:	728cf44f 	.word	0x728cf44f
   39a88:	f0072100 	.word	0xf0072100
   39a8c:	bf00bad5 	.word	0xbf00bad5

00039a90 <symbol_0006f61>:
   39a90:	f44fb118 	.word	0xf44fb118
   39a94:	f7fc718c 	.word	0xf7fc718c
   39a98:	4770b837 	.word	0x4770b837

00039a9c <symbol_000468b>:
   39a9c:	f0002ac0 	.word	0xf0002ac0
   39aa0:	f5b28184 	.word	0xf5b28184
   39aa4:	f0007f80 	.word	0xf0007f80
   39aa8:	2a80817d 	.word	0x2a80817d
   39aac:	f06fd002 	.word	0xf06fd002
   39ab0:	4770001f 	.word	0x4770001f
   39ab4:	6003230a 	.word	0x6003230a
   39ab8:	4ff0e92d 	.word	0x4ff0e92d
   39abc:	f04f4607 	.word	0xf04f4607
   39ac0:	f1000c00 	.word	0xf1000c00
   39ac4:	b0850408 	.word	0xb0850408
   39ac8:	f8470952 	.word	0xf8470952
   39acc:	788b4f04 	.word	0x788b4f04
   39ad0:	780e784d 	.word	0x780e784d
   39ad4:	ea43041b 	.word	0xea43041b
   39ad8:	78cd2305 	.word	0x78cd2305
   39adc:	f10c4333 	.word	0xf10c4333
   39ae0:	ea430c01 	.word	0xea430c01
   39ae4:	45946305 	.word	0x45946305
   39ae8:	3f04f847 	.word	0x3f04f847
   39aec:	0104f101 	.word	0x0104f101
   39af0:	6803d3ed 	.word	0x6803d3ed
   39af4:	f0002b0c 	.word	0xf0002b0c
   39af8:	2b0e81bf 	.word	0x2b0e81bf
   39afc:	8158f000 	.word	0x8158f000
   39b00:	f0402b0a 	.word	0xf0402b0a
   39b04:	6944814b 	.word	0x6944814b
   39b08:	f3c44bd8 	.word	0xf3c44bd8
   39b0c:	68812207 	.word	0x68812207
   39b10:	0e255c9a 	.word	0x0e255c9a
   39b14:	f0815d5e 	.word	0xf0815d5e
   39b18:	b2e50101 	.word	0xb2e50101
   39b1c:	404a5d5d 	.word	0x404a5d5d
   39b20:	4107f3c4 	.word	0x4107f3c4
   39b24:	4206ea82 	.word	0x4206ea82
   39b28:	ea825c5e 	.word	0xea825c5e
   39b2c:	68c16505 	.word	0x68c16505
   39b30:	2206ea85 	.word	0x2206ea85
   39b34:	40516907 	.word	0x40516907
   39b38:	0907ea81 	.word	0x0907ea81
   39b3c:	0404ea89 	.word	0x0404ea89
   39b40:	2507f3c4 	.word	0x2507f3c4
   39b44:	0e265d5d 	.word	0x0e265d5d
   39b48:	f0825d9e 	.word	0xf0825d9e
   39b4c:	ea850c02 	.word	0xea850c02
   39b50:	ea85050c 	.word	0xea85050c
   39b54:	b2e64506 	.word	0xb2e64506
   39b58:	c006f813 	.word	0xc006f813
   39b5c:	4607f3c4 	.word	0x4607f3c4
   39b60:	ea855d9e 	.word	0xea855d9e
   39b64:	ea85650c 	.word	0xea85650c
   39b68:	406f2506 	.word	0x406f2506
   39b6c:	0c04ea87 	.word	0x0c04ea87
   39b70:	2607f3cc 	.word	0x2607f3cc
   39b74:	ea4f5d9e 	.word	0xea4f5d9e
   39b78:	f8136e1c 	.word	0xf8136e1c
   39b7c:	f085e00e 	.word	0xf085e00e
   39b80:	ea860804 	.word	0xea860804
   39b84:	ea860608 	.word	0xea860608
   39b88:	fa5f460e 	.word	0xfa5f460e
   39b8c:	f813fe8c 	.word	0xf813fe8c
   39b90:	6182e00e 	.word	0x6182e00e
   39b94:	4207f3cc 	.word	0x4207f3cc
   39b98:	660eea86 	.word	0x660eea86
   39b9c:	e002f813 	.word	0xe002f813
   39ba0:	0201ea85 	.word	0x0201ea85
   39ba4:	260eea86 	.word	0x260eea86
   39ba8:	0802ea86 	.word	0x0802ea86
   39bac:	0e04ea88 	.word	0x0e04ea88
   39bb0:	f3ce61c1 	.word	0xf3ce61c1
   39bb4:	5c592107 	.word	0x5c592107
   39bb8:	6a1eea4f 	.word	0x6a1eea4f
   39bbc:	a00af813 	.word	0xa00af813
   39bc0:	0b08f086 	.word	0x0b08f086
   39bc4:	010bea81 	.word	0x010bea81
   39bc8:	410aea81 	.word	0x410aea81
   39bcc:	fa8efa5f 	.word	0xfa8efa5f
   39bd0:	a00af813 	.word	0xa00af813
   39bd4:	f3ce6244 	.word	0xf3ce6244
   39bd8:	5d1c4407 	.word	0x5d1c4407
   39bdc:	610aea81 	.word	0x610aea81
   39be0:	2104ea81 	.word	0x2104ea81
   39be4:	0a07ea81 	.word	0x0a07ea81
   39be8:	040eea8a 	.word	0x040eea8a
   39bec:	630762c2 	.word	0x630762c2
   39bf0:	2207f3c4 	.word	0x2207f3c4
   39bf4:	0707ea88 	.word	0x0707ea88
   39bf8:	680ee9c0 	.word	0x680ee9c0
   39bfc:	9020f8c0 	.word	0x9020f8c0
   39c00:	f8c06285 	.word	0xf8c06285
   39c04:	f8c0c034 	.word	0xf8c0c034
   39c08:	6407e044 	.word	0x6407e044
   39c0c:	f8136481 	.word	0xf8136481
   39c10:	0e22c002 	.word	0x0e22c002
   39c14:	f0815c9a 	.word	0xf0815c9a
   39c18:	ea8c0510 	.word	0xea8c0510
   39c1c:	ea8c0c05 	.word	0xea8c0c05
   39c20:	b2e24c02 	.word	0xb2e24c02
   39c24:	f3c45c9d 	.word	0xf3c45c9d
   39c28:	5c9a4207 	.word	0x5c9a4207
   39c2c:	6c05ea8c 	.word	0x6c05ea8c
   39c30:	2c02ea8c 	.word	0x2c02ea8c
   39c34:	0108ea81 	.word	0x0108ea81
   39c38:	090cea81 	.word	0x090cea81
   39c3c:	0209ea8e 	.word	0x0209ea8e
   39c40:	2507f3c2 	.word	0x2507f3c2
   39c44:	0e155d5e 	.word	0x0e155d5e
   39c48:	f08c5d5d 	.word	0xf08c5d5d
   39c4c:	407e0720 	.word	0x407e0720
   39c50:	4605ea86 	.word	0x4605ea86
   39c54:	5d5db2d5 	.word	0x5d5db2d5
   39c58:	f3c264c1 	.word	0xf3c264c1
   39c5c:	5c594107 	.word	0x5c594107
   39c60:	6605ea86 	.word	0x6605ea86
   39c64:	2601ea86 	.word	0x2601ea86
   39c68:	0e06ea8a 	.word	0x0e06ea8a
   39c6c:	080eea82 	.word	0x080eea82
   39c70:	2107f3c8 	.word	0x2107f3c8
   39c74:	ea4f5c5f 	.word	0xea4f5c5f
   39c78:	5c596118 	.word	0x5c596118
   39c7c:	0540f086 	.word	0x0540f086
   39c80:	ea87406f 	.word	0xea87406f
   39c84:	fa5f4701 	.word	0xfa5f4701
   39c88:	5c59f188 	.word	0x5c59f188
   39c8c:	0509ea8a 	.word	0x0509ea8a
   39c90:	6701ea87 	.word	0x6701ea87
   39c94:	4107f3c8 	.word	0x4107f3c8
   39c98:	f8c05c59 	.word	0xf8c05c59
   39c9c:	ea87a050 	.word	0xea87a050
   39ca0:	ea892701 	.word	0xea892701
   39ca4:	66050a06 	.word	0x66050a06
   39ca8:	0507ea8a 	.word	0x0507ea8a
   39cac:	0105ea82 	.word	0x0105ea82
   39cb0:	f3c16544 	.word	0xf3c16544
   39cb4:	5d1c2407 	.word	0x5d1c2407
   39cb8:	6b11ea4f 	.word	0x6b11ea4f
   39cbc:	b00bf813 	.word	0xb00bf813
   39cc0:	f0876642 	.word	0xf0876642
   39cc4:	40620280 	.word	0x40620280
   39cc8:	ea82b2cc 	.word	0xea82b2cc
   39ccc:	f813420b 	.word	0xf813420b
   39cd0:	f3c1b004 	.word	0xf3c1b004
   39cd4:	5d1c4407 	.word	0x5d1c4407
   39cd8:	620bea82 	.word	0x620bea82
   39cdc:	2204ea82 	.word	0x2204ea82
   39ce0:	0402ea8e 	.word	0x0402ea8e
   39ce4:	c058f8c0 	.word	0xc058f8c0
   39ce8:	0c04ea81 	.word	0x0c04ea81
   39cec:	67c56686 	.word	0x67c56686
   39cf0:	0605ea8e 	.word	0x0605ea8e
   39cf4:	40556787 	.word	0x40556787
   39cf8:	2707f3cc 	.word	0x2707f3cc
   39cfc:	ae1be9c0 	.word	0xae1be9c0
   39d00:	1084f8c0 	.word	0x1084f8c0
   39d04:	2088f8c0 	.word	0x2088f8c0
   39d08:	6080f8c0 	.word	0x6080f8c0
   39d0c:	905cf8c0 	.word	0x905cf8c0
   39d10:	8074f8c0 	.word	0x8074f8c0
   39d14:	508cf8c0 	.word	0x508cf8c0
   39d18:	f0825dde 	.word	0xf0825dde
   39d1c:	ea4f021b 	.word	0xea4f021b
   39d20:	f813671c 	.word	0xf813671c
   39d24:	4056e007 	.word	0x4056e007
   39d28:	f28cfa5f 	.word	0xf28cfa5f
   39d2c:	f3cc5c9f 	.word	0xf3cc5c9f
   39d30:	5c9a4207 	.word	0x5c9a4207
   39d34:	460eea86 	.word	0x460eea86
   39d38:	6607ea86 	.word	0x6607ea86
   39d3c:	2602ea86 	.word	0x2602ea86
   39d40:	40694075 	.word	0x40694075
   39d44:	2207f3c1 	.word	0x2207f3c1
   39d48:	0e0f5c9a 	.word	0x0e0f5c9a
   39d4c:	f0865ddf 	.word	0xf0865ddf
   39d50:	ea820e36 	.word	0xea820e36
   39d54:	ea82020e 	.word	0xea82020e
   39d58:	b2cf4207 	.word	0xb2cf4207
   39d5c:	e007f813 	.word	0xe007f813
   39d60:	4707f3c1 	.word	0x4707f3c1
   39d64:	ea825ddf 	.word	0xea825ddf
   39d68:	ea83630e 	.word	0xea83630e
   39d6c:	ea832307 	.word	0xea832307
   39d70:	ea820204 	.word	0xea820204
   39d74:	e9c00e01 	.word	0xe9c00e01
   39d78:	e9c06526 	.word	0xe9c06526
   39d7c:	f8c02e2c 	.word	0xf8c02e2c
   39d80:	ea834090 	.word	0xea834090
   39d84:	406c0705 	.word	0x406c0705
   39d88:	c094f8c0 	.word	0xc094f8c0
   39d8c:	10a4f8c0 	.word	0x10a4f8c0
   39d90:	30a8f8c0 	.word	0x30a8f8c0
   39d94:	70acf8c0 	.word	0x70acf8c0
   39d98:	40a0f8c0 	.word	0x40a0f8c0
   39d9c:	b0052000 	.word	0xb0052000
   39da0:	8ff0e8bd 	.word	0x8ff0e8bd
   39da4:	6003230e 	.word	0x6003230e
   39da8:	230ce686 	.word	0x230ce686
   39dac:	e6836003 	.word	0xe6836003
   39db0:	ce03e9d0 	.word	0xce03e9d0
   39db4:	8907e9d0 	.word	0x8907e9d0
   39db8:	7205e9d0 	.word	0x7205e9d0
   39dbc:	68836a46 	.word	0x68836a46
   39dc0:	f8df4670 	.word	0xf8df4670
   39dc4:	4d29a0b0 	.word	0x4d29a0b0
   39dc8:	c000f8cd 	.word	0xc000f8cd
   39dcc:	bf04f85a 	.word	0xbf04f85a
   39dd0:	2c07f3c6 	.word	0x2c07f3c6
   39dd4:	e00cf815 	.word	0xe00cf815
   39dd8:	6c16ea4f 	.word	0x6c16ea4f
   39ddc:	030bea83 	.word	0x030bea83
   39de0:	b00cf815 	.word	0xb00cf815
   39de4:	fc86fa5f 	.word	0xfc86fa5f
   39de8:	0303ea8e 	.word	0x0303ea8e
   39dec:	c00cf815 	.word	0xc00cf815
   39df0:	4e07f3c6 	.word	0x4e07f3c6
   39df4:	430bea83 	.word	0x430bea83
   39df8:	e00ef815 	.word	0xe00ef815
   39dfc:	630cea83 	.word	0x630cea83
   39e00:	ea839900 	.word	0xea839900
   39e04:	4059230e 	.word	0x4059230e
   39e08:	40474048 	.word	0x40474048
   39e0c:	fc87fa5f 	.word	0xfc87fa5f
   39e10:	e00cf815 	.word	0xe00cf815
   39e14:	6c17ea4f 	.word	0x6c17ea4f
   39e18:	b00cf815 	.word	0xb00cf815
   39e1c:	2c07f3c7 	.word	0x2c07f3c7
   39e20:	0202ea8e 	.word	0x0202ea8e
   39e24:	c00cf815 	.word	0xc00cf815
   39e28:	4e07f3c7 	.word	0x4e07f3c7
   39e2c:	620bea82 	.word	0x620bea82
   39e30:	e00ef815 	.word	0xe00ef815
   39e34:	220cea82 	.word	0x220cea82
   39e38:	420eea82 	.word	0x420eea82
   39e3c:	0802ea88 	.word	0x0802ea88
   39e40:	3108e9c4 	.word	0x3108e9c4
   39e44:	490a9100 	.word	0x490a9100
   39e48:	0908ea89 	.word	0x0908ea89
   39e4c:	0609ea86 	.word	0x0609ea86
   39e50:	e9c4458a 	.word	0xe9c4458a
   39e54:	e9c4070a 	.word	0xe9c4070a
   39e58:	e9c4960e 	.word	0xe9c4960e
   39e5c:	f104280c 	.word	0xf104280c
   39e60:	d1b30420 	.word	0xd1b30420
   39e64:	b0052000 	.word	0xb0052000
   39e68:	8ff0e8bd 	.word	0x8ff0e8bd
   39e6c:	0004b980 	.word	0x0004b980
   39e70:	0004be98 	.word	0x0004be98
   39e74:	0004be7c 	.word	0x0004be7c
   39e78:	4bb269c2 	.word	0x4bb269c2
   39e7c:	2407f3c2 	.word	0x2407f3c2
   39e80:	5d1d6881 	.word	0x5d1d6881
   39e84:	5d1e0e14 	.word	0x5d1e0e14
   39e88:	0101f081 	.word	0x0101f081
   39e8c:	5d1cb2d4 	.word	0x5d1cb2d4
   39e90:	f3c2404d 	.word	0xf3c2404d
   39e94:	5c594107 	.word	0x5c594107
   39e98:	4506ea85 	.word	0x4506ea85
   39e9c:	ea8568c7 	.word	0xea8568c7
   39ea0:	ea856504 	.word	0xea856504
   39ea4:	69012501 	.word	0x69012501
   39ea8:	6946406f 	.word	0x6946406f
   39eac:	0907ea81 	.word	0x0907ea81
   39eb0:	ea866984 	.word	0xea866984
   39eb4:	ea840609 	.word	0xea840609
   39eb8:	ea820806 	.word	0xea820806
   39ebc:	f3c20208 	.word	0xf3c20208
   39ec0:	f8132407 	.word	0xf8132407
   39ec4:	ea4fe004 	.word	0xea4fe004
   39ec8:	f8136c12 	.word	0xf8136c12
   39ecc:	f085a00c 	.word	0xf085a00c
   39ed0:	fa5f0402 	.word	0xfa5f0402
   39ed4:	ea8efc82 	.word	0xea8efc82
   39ed8:	f8130404 	.word	0xf8130404
   39edc:	f3c2e00c 	.word	0xf3c2e00c
   39ee0:	f8134c07 	.word	0xf8134c07
   39ee4:	ea84c00c 	.word	0xea84c00c
   39ee8:	ea84440a 	.word	0xea84440a
   39eec:	ea84640e 	.word	0xea84640e
   39ef0:	4061240c 	.word	0x4061240c
   39ef4:	460c9401 	.word	0x460c9401
   39ef8:	62056981 	.word	0x62056981
   39efc:	ea824061 	.word	0xea824061
   39f00:	91030c01 	.word	0x91030c01
   39f04:	2e07f3cc 	.word	0x2e07f3cc
   39f08:	f8139901 	.word	0xf8139901
   39f0c:	ea4fe00e 	.word	0xea4fe00e
   39f10:	f8136a1c 	.word	0xf8136a1c
   39f14:	f081a00a 	.word	0xf081a00a
   39f18:	ea8e0b04 	.word	0xea8e0b04
   39f1c:	ea8e0e0b 	.word	0xea8e0e0b
   39f20:	fa5f4a0a 	.word	0xfa5f4a0a
   39f24:	f813fe8c 	.word	0xf813fe8c
   39f28:	e9c0e00e 	.word	0xe9c0e00e
   39f2c:	ea8a960a 	.word	0xea8a960a
   39f30:	f3cc650e 	.word	0xf3cc650e
   39f34:	f8134e07 	.word	0xf8134e07
   39f38:	ea87e00e 	.word	0xea87e00e
   39f3c:	ea850a01 	.word	0xea850a01
   39f40:	ea8a250e 	.word	0xea8a250e
   39f44:	ea860e05 	.word	0xea860e05
   39f48:	9100010e 	.word	0x9100010e
   39f4c:	ea864621 	.word	0xea864621
   39f50:	9c000904 	.word	0x9c000904
   39f54:	820ce9c0 	.word	0x820ce9c0
   39f58:	0604ea82 	.word	0x0604ea82
   39f5c:	f8c06247 	.word	0xf8c06247
   39f60:	9102a03c 	.word	0x9102a03c
   39f64:	9f036401 	.word	0x9f036401
   39f68:	2407f3c6 	.word	0x2407f3c6
   39f6c:	080eea81 	.word	0x080eea81
   39f70:	7c12e9c0 	.word	0x7c12e9c0
   39f74:	ea4f5d1c 	.word	0xea4f5d1c
   39f78:	e9c06c16 	.word	0xe9c06c16
   39f7c:	f8c05e14 	.word	0xf8c05e14
   39f80:	f0858058 	.word	0xf0858058
   39f84:	f8130508 	.word	0xf8130508
   39f88:	fa5f800c 	.word	0xfa5f800c
   39f8c:	9901fc86 	.word	0x9901fc86
   39f90:	c00cf813 	.word	0xc00cf813
   39f94:	f3c64065 	.word	0xf3c64065
   39f98:	5d1c4407 	.word	0x5d1c4407
   39f9c:	4508ea85 	.word	0x4508ea85
   39fa0:	ea856381 	.word	0xea856381
   39fa4:	9902650c 	.word	0x9902650c
   39fa8:	2504ea85 	.word	0x2504ea85
   39fac:	91014069 	.word	0x91014069
   39fb0:	69844639 	.word	0x69844639
   39fb4:	9044f8c0 	.word	0x9044f8c0
   39fb8:	0805ea84 	.word	0x0805ea84
   39fbc:	0908ea86 	.word	0x0908ea86
   39fc0:	2407f3c9 	.word	0x2407f3c9
   39fc4:	a004f813 	.word	0xa004f813
   39fc8:	6419ea4f 	.word	0x6419ea4f
   39fcc:	f0855d1c 	.word	0xf0855d1c
   39fd0:	ea8a0c10 	.word	0xea8a0c10
   39fd4:	fa5f0c0c 	.word	0xfa5f0c0c
   39fd8:	f813fa89 	.word	0xf813fa89
   39fdc:	ea8ca00a 	.word	0xea8ca00a
   39fe0:	f3c94c04 	.word	0xf3c94c04
   39fe4:	5d1c4407 	.word	0x5d1c4407
   39fe8:	6c0aea8c 	.word	0x6c0aea8c
   39fec:	0e05ea8e 	.word	0x0e05ea8e
   39ff0:	2c04ea8c 	.word	0x2c04ea8c
   39ff4:	040cea8e 	.word	0x040cea8e
   39ff8:	f8c04062 	.word	0xf8c04062
   39ffc:	f3c2e06c 	.word	0xf3c2e06c
   3a000:	f8132e07 	.word	0xf8132e07
   3a004:	ea4fe00e 	.word	0xea4fe00e
   3a008:	f8136a12 	.word	0xf8136a12
   3a00c:	f08ca00a 	.word	0xf08ca00a
   3a010:	ea8e0b20 	.word	0xea8e0b20
   3a014:	ea8e0e0b 	.word	0xea8e0e0b
   3a018:	fa5f4a0a 	.word	0xfa5f4a0a
   3a01c:	f813fe82 	.word	0xf813fe82
   3a020:	9f00e00e 	.word	0x9f00e00e
   3a024:	6a0eea8a 	.word	0x6a0eea8a
   3a028:	4e07f3c2 	.word	0x4e07f3c2
   3a02c:	b00ef813 	.word	0xb00ef813
   3a030:	0e07ea81 	.word	0x0e07ea81
   3a034:	ea8a9901 	.word	0xea8a9901
   3a038:	ea812b0b 	.word	0xea812b0b
   3a03c:	9f000a0b 	.word	0x9f000a0b
   3a040:	e060f8c0 	.word	0xe060f8c0
   3a044:	0e0aea88 	.word	0x0e0aea88
   3a048:	664665c7 	.word	0x664665c7
   3a04c:	907cf8c0 	.word	0x907cf8c0
   3a050:	060eea82 	.word	0x060eea82
   3a054:	ea876701 	.word	0xea876701
   3a058:	404f0904 	.word	0x404f0904
   3a05c:	66854061 	.word	0x66854061
   3a060:	1088f8c0 	.word	0x1088f8c0
   3a064:	2507f3c6 	.word	0x2507f3c6
   3a068:	0109ea88 	.word	0x0109ea88
   3a06c:	1090f8c0 	.word	0x1090f8c0
   3a070:	0e315d5d 	.word	0x0e315d5d
   3a074:	f8c05c59 	.word	0xf8c05c59
   3a078:	f8c04084 	.word	0xf8c04084
   3a07c:	ea84b098 	.word	0xea84b098
   3a080:	6747040b 	.word	0x6747040b
   3a084:	0b40f08b 	.word	0x0b40f08b
   3a088:	5ddfb2f7 	.word	0x5ddfb2f7
   3a08c:	60acf8c0 	.word	0x60acf8c0
   3a090:	050bea85 	.word	0x050bea85
   3a094:	4607f3c6 	.word	0x4607f3c6
   3a098:	4501ea85 	.word	0x4501ea85
   3a09c:	ea855d99 	.word	0xea855d99
   3a0a0:	ea856507 	.word	0xea856507
   3a0a4:	f8c02501 	.word	0xf8c02501
   3a0a8:	406c409c 	.word	0x406c409c
   3a0ac:	0604ea89 	.word	0x0604ea89
   3a0b0:	2094f8c0 	.word	0x2094f8c0
   3a0b4:	f3c24072 	.word	0xf3c24072
   3a0b8:	f8c02107 	.word	0xf8c02107
   3a0bc:	5c59c080 	.word	0x5c59c080
   3a0c0:	0c0aea89 	.word	0x0c0aea89
   3a0c4:	f8c00e17 	.word	0xf8c00e17
   3a0c8:	f8c0908c 	.word	0xf8c0908c
   3a0cc:	f813c0a4 	.word	0xf813c0a4
   3a0d0:	f0859007 	.word	0xf0859007
   3a0d4:	b2d70c80 	.word	0xb2d70c80
   3a0d8:	010cea81 	.word	0x010cea81
   3a0dc:	c007f813 	.word	0xc007f813
   3a0e0:	4707f3c2 	.word	0x4707f3c2
   3a0e4:	ea815ddf 	.word	0xea815ddf
   3a0e8:	ea814109 	.word	0xea814109
   3a0ec:	ea83630c 	.word	0xea83630c
   3a0f0:	f8c02307 	.word	0xf8c02307
   3a0f4:	ea838078 	.word	0xea838078
   3a0f8:	ea830c0a 	.word	0xea830c0a
   3a0fc:	f8c00808 	.word	0xf8c00808
   3a100:	ea8ee0a8 	.word	0xea8ee0a8
   3a104:	ea880706 	.word	0xea880706
   3a108:	ea8c0b02 	.word	0xea8c0b02
   3a10c:	ea830906 	.word	0xea830906
   3a110:	ea8a0e04 	.word	0xea8a0e04
   3a114:	f8c00104 	.word	0xf8c00104
   3a118:	e9c0a0a0 	.word	0xe9c0a0a0
   3a11c:	f8c07230 	.word	0xf8c07230
   3a120:	e9c060bc 	.word	0xe9c060bc
   3a124:	e9c0542c 	.word	0xe9c0542c
   3a128:	f8c08b36 	.word	0xf8c08b36
   3a12c:	e9c030c8 	.word	0xe9c030c8
   3a130:	f8c0c934 	.word	0xf8c0c934
   3a134:	f8c0e0cc 	.word	0xf8c0e0cc
   3a138:	200010b8 	.word	0x200010b8
   3a13c:	e8bdb005 	.word	0xe8bdb005
   3a140:	bf008ff0 	.word	0xbf008ff0
   3a144:	0004b980 	.word	0x0004b980

0003a148 <symbol_000e9b3>:
   3a148:	4ff0e92d 	.word	0x4ff0e92d
   3a14c:	0400e9d0 	.word	0x0400e9d0
   3a150:	46061040 	.word	0x46061040
   3a154:	f8d16823 	.word	0xf8d16823
   3a158:	b089a000 	.word	0xb089a000
   3a15c:	0a03ea8a 	.word	0x0a03ea8a
   3a160:	800cf8d1 	.word	0x800cf8d1
   3a164:	3e0168e3 	.word	0x3e0168e3
   3a168:	68659006 	.word	0x68659006
   3a16c:	68a0684f 	.word	0x68a0684f
   3a170:	688a9205 	.word	0x688a9205
   3a174:	0803ea88 	.word	0x0803ea88
   3a178:	f1042e00 	.word	0xf1042e00
   3a17c:	96010310 	.word	0x96010310
   3a180:	0507ea85 	.word	0x0507ea85
   3a184:	0200ea82 	.word	0x0200ea82
   3a188:	f8df9304 	.word	0xf8df9304
   3a18c:	f340b3e8 	.word	0xf340b3e8
   3a190:	462b80db 	.word	0x462b80db
   3a194:	0930f104 	.word	0x0930f104
   3a198:	f18afa5f 	.word	0xf18afa5f
   3a19c:	f788fa5f 	.word	0xf788fa5f
   3a1a0:	b2d4b2de 	.word	0xb2d4b2de
   3a1a4:	0021f85b 	.word	0x0021f85b
   3a1a8:	5027f85b 	.word	0x5027f85b
   3a1ac:	7026f85b 	.word	0x7026f85b
   3a1b0:	6024f85b 	.word	0x6024f85b
   3a1b4:	4c20f859 	.word	0x4c20f859
   3a1b8:	6118ea4f 	.word	0x6118ea4f
   3a1bc:	0c04ea80 	.word	0x0c04ea80
   3a1c0:	0c14f859 	.word	0x0c14f859
   3a1c4:	1021f85b 	.word	0x1021f85b
   3a1c8:	0e00ea85 	.word	0x0e00ea85
   3a1cc:	f85b0e10 	.word	0xf85b0e10
   3a1d0:	f3c35020 	.word	0xf3c35020
   3a1d4:	ea8c2407 	.word	0xea8c2407
   3a1d8:	f3c22c31 	.word	0xf3c22c31
   3a1dc:	f3c24107 	.word	0xf3c24107
   3a1e0:	f85b2207 	.word	0xf85b2207
   3a1e4:	f85b4024 	.word	0xf85b4024
   3a1e8:	ea8e0022 	.word	0xea8e0022
   3a1ec:	0e1d2235 	.word	0x0e1d2235
   3a1f0:	4307f3c3 	.word	0x4307f3c3
   3a1f4:	3023f85b 	.word	0x3023f85b
   3a1f8:	6c34ea8c 	.word	0x6c34ea8c
   3a1fc:	4c18f859 	.word	0x4c18f859
   3a200:	f85b9302 	.word	0xf85b9302
   3a204:	f8595025 	.word	0xf8595025
   3a208:	ea4f3c1c 	.word	0xea4f3c1c
   3a20c:	f85b6e1a 	.word	0xf85b6e1a
   3a210:	4066e02e 	.word	0x4066e02e
   3a214:	f3ca405f 	.word	0xf3ca405f
   3a218:	ea862407 	.word	0xea862407
   3a21c:	f3c82635 	.word	0xf3c82635
   3a220:	f3c82507 	.word	0xf3c82507
   3a224:	ea874807 	.word	0xea874807
   3a228:	f85b273e 	.word	0xf85b273e
   3a22c:	f85b4024 	.word	0xf85b4024
   3a230:	f85be025 	.word	0xf85be025
   3a234:	9b025028 	.word	0x9b025028
   3a238:	6030ea87 	.word	0x6030ea87
   3a23c:	4035ea80 	.word	0x4035ea80
   3a240:	1021f85b 	.word	0x1021f85b
   3a244:	6434ea82 	.word	0x6434ea82
   3a248:	4433ea84 	.word	0x4433ea84
   3a24c:	ea8cb2c3 	.word	0xea8cb2c3
   3a250:	f85b4131 	.word	0xf85b4131
   3a254:	f3ca3023 	.word	0xf3ca3023
   3a258:	f85b4a07 	.word	0xf85b4a07
   3a25c:	b2ca702a 	.word	0xb2ca702a
   3a260:	6c14ea4f 	.word	0x6c14ea4f
   3a264:	2022f85b 	.word	0x2022f85b
   3a268:	663eea86 	.word	0x663eea86
   3a26c:	f8599302 	.word	0xf8599302
   3a270:	ea863c10 	.word	0xea863c10
   3a274:	f85b4637 	.word	0xf85b4637
   3a278:	f3c0e02c 	.word	0xf3c0e02c
   3a27c:	f85b2707 	.word	0xf85b2707
   3a280:	ea82c027 	.word	0xea82c027
   3a284:	f3c60a03 	.word	0xf3c60a03
   3a288:	f3c64507 	.word	0xf3c64507
   3a28c:	f85b2207 	.word	0xf85b2207
   3a290:	f85b3022 	.word	0xf85b3022
   3a294:	ea8a5025 	.word	0xea8a5025
   3a298:	f3c42a3e 	.word	0xf3c42a3e
   3a29c:	0e0f4207 	.word	0x0e0f4207
   3a2a0:	6a3cea8a 	.word	0x6a3cea8a
   3a2a4:	7027f85b 	.word	0x7027f85b
   3a2a8:	ea8a9303 	.word	0xea8a9303
   3a2ac:	f85b4a35 	.word	0xf85b4a35
   3a2b0:	f8598022 	.word	0xf8598022
   3a2b4:	9b025c0c 	.word	0x9b025c0c
   3a2b8:	406bb2f2 	.word	0x406bb2f2
   3a2bc:	2022f85b 	.word	0x2022f85b
   3a2c0:	2337ea83 	.word	0x2337ea83
   3a2c4:	7c08f859 	.word	0x7c08f859
   3a2c8:	fc84fa5f 	.word	0xfc84fa5f
   3a2cc:	2407f3c4 	.word	0x2407f3c4
   3a2d0:	502cf85b 	.word	0x502cf85b
   3a2d4:	0e364057 	.word	0x0e364057
   3a2d8:	2024f85b 	.word	0x2024f85b
   3a2dc:	4c04f859 	.word	0x4c04f859
   3a2e0:	6e10ea4f 	.word	0x6e10ea4f
   3a2e4:	6026f85b 	.word	0x6026f85b
   3a2e8:	f85b406c 	.word	0xf85b406c
   3a2ec:	ea84e02e 	.word	0xea84e02e
   3a2f0:	f3c12636 	.word	0xf3c12636
   3a2f4:	f3c12407 	.word	0xf3c12407
   3a2f8:	f85b4107 	.word	0xf85b4107
   3a2fc:	ea871021 	.word	0xea871021
   3a300:	ea8e2e3e 	.word	0xea8e2e3e
   3a304:	f3c06232 	.word	0xf3c06232
   3a308:	f85b4007 	.word	0xf85b4007
   3a30c:	9d034024 	.word	0x9d034024
   3a310:	4231ea82 	.word	0x4231ea82
   3a314:	f85b9901 	.word	0xf85b9901
   3a318:	ea830020 	.word	0xea830020
   3a31c:	ea866335 	.word	0xea866335
   3a320:	39016634 	.word	0x39016634
   3a324:	4338ea83 	.word	0x4338ea83
   3a328:	0920f109 	.word	0x0920f109
   3a32c:	4830ea86 	.word	0x4830ea86
   3a330:	f47f9101 	.word	0xf47f9101
   3a334:	461daf31 	.word	0x461daf31
   3a338:	99049b06 	.word	0x99049b06
   3a33c:	6300f103 	.word	0x6300f103
   3a340:	eb013b01 	.word	0xeb013b01
   3a344:	93041343 	.word	0x93041343
   3a348:	fa5f2400 	.word	0xfa5f2400
   3a34c:	f85bf38a 	.word	0xf85bf38a
   3a350:	9b047023 	.word	0x9b047023
   3a354:	fa5f46a1 	.word	0xfa5f46a1
   3a358:	6819fc85 	.word	0x6819fc85
   3a35c:	6318ea4f 	.word	0x6318ea4f
   3a360:	46a69407 	.word	0x46a69407
   3a364:	402cf85b 	.word	0x402cf85b
   3a368:	c023f85b 	.word	0xc023f85b
   3a36c:	f3c54079 	.word	0xf3c54079
   3a370:	f85b2307 	.word	0xf85b2307
   3a374:	f3c23023 	.word	0xf3c23023
   3a378:	ea814707 	.word	0xea814707
   3a37c:	fa5f213c 	.word	0xfa5f213c
   3a380:	f85bfc82 	.word	0xf85bfc82
   3a384:	f85b002c 	.word	0xf85b002c
   3a388:	ea817027 	.word	0xea817027
   3a38c:	90036133 	.word	0x90036133
   3a390:	4037ea81 	.word	0x4037ea81
   3a394:	fa5f9f04 	.word	0xfa5f9f04
   3a398:	f85bf688 	.word	0xf85bf688
   3a39c:	68fb6026 	.word	0x68fb6026
   3a3a0:	40739001 	.word	0x40739001
   3a3a4:	f85b0e16 	.word	0xf85b0e16
   3a3a8:	98046026 	.word	0x98046026
   3a3ac:	2636ea83 	.word	0x2636ea83
   3a3b0:	f85b0e2b 	.word	0xf85b0e2b
   3a3b4:	f3c53023 	.word	0xf3c53023
   3a3b8:	496d4507 	.word	0x496d4507
   3a3bc:	7025f85b 	.word	0x7025f85b
   3a3c0:	f89d9306 	.word	0xf89d9306
   3a3c4:	6843c004 	.word	0x6843c004
   3a3c8:	651aea4f 	.word	0x651aea4f
   3a3cc:	5025f85b 	.word	0x5025f85b
   3a3d0:	2207f3c2 	.word	0x2207f3c2
   3a3d4:	2022f85b 	.word	0x2022f85b
   3a3d8:	c00cf811 	.word	0xc00cf811
   3a3dc:	69044063 	.word	0x69044063
   3a3e0:	2535ea83 	.word	0x2535ea83
   3a3e4:	2307f3ca 	.word	0x2307f3ca
   3a3e8:	3023f85b 	.word	0x3023f85b
   3a3ec:	0c04ea8c 	.word	0x0c04ea8c
   3a3f0:	6532ea85 	.word	0x6532ea85
   3a3f4:	68829c03 	.word	0x68829c03
   3a3f8:	6633ea86 	.word	0x6633ea86
   3a3fc:	f3c84660 	.word	0xf3c84660
   3a400:	ea842307 	.word	0xea842307
   3a404:	9c060c02 	.word	0x9c060c02
   3a408:	3023f85b 	.word	0x3023f85b
   3a40c:	4a07f3ca 	.word	0x4a07f3ca
   3a410:	202af85b 	.word	0x202af85b
   3a414:	2c34ea8c 	.word	0x2c34ea8c
   3a418:	4807f3c8 	.word	0x4807f3c8
   3a41c:	4637ea86 	.word	0x4637ea86
   3a420:	6c33ea8c 	.word	0x6c33ea8c
   3a424:	7028f85b 	.word	0x7028f85b
   3a428:	4232ea8c 	.word	0x4232ea8c
   3a42c:	4537ea85 	.word	0x4537ea85
   3a430:	4c07f3c2 	.word	0x4c07f3c2
   3a434:	5ccb0e33 	.word	0x5ccb0e33
   3a438:	a00cf811 	.word	0xa00cf811
   3a43c:	fc85fa5f 	.word	0xfc85fa5f
   3a440:	400cf811 	.word	0x400cf811
   3a444:	2707f3c5 	.word	0x2707f3c5
   3a448:	464c9403 	.word	0x464c9403
   3a44c:	ea805dcf 	.word	0xea805dcf
   3a450:	98016303 	.word	0x98016303
   3a454:	2307ea83 	.word	0x2307ea83
   3a458:	fb82fa5f 	.word	0xfb82fa5f
   3a45c:	430aea83 	.word	0x430aea83
   3a460:	b00bf811 	.word	0xb00bf811
   3a464:	6c10ea4f 	.word	0x6c10ea4f
   3a468:	f3639804 	.word	0xf3639804
   3a46c:	f8110407 	.word	0xf8110407
   3a470:	f8cd800c 	.word	0xf8cd800c
   3a474:	9402b018 	.word	0x9402b018
   3a478:	2c07f3c2 	.word	0x2c07f3c2
   3a47c:	ea4f9c03 	.word	0xea4f9c03
   3a480:	69426b12 	.word	0x69426b12
   3a484:	c00cf811 	.word	0xc00cf811
   3a488:	f3c64062 	.word	0xf3c64062
   3a48c:	5dcf4707 	.word	0x5dcf4707
   3a490:	6808ea82 	.word	0x6808ea82
   3a494:	6a15ea4f 	.word	0x6a15ea4f
   3a498:	ea886982 	.word	0xea886982
   3a49c:	9c062c0c 	.word	0x9c062c0c
   3a4a0:	f886fa5f 	.word	0xf886fa5f
   3a4a4:	4707ea8c 	.word	0x4707ea8c
   3a4a8:	8008f811 	.word	0x8008f811
   3a4ac:	c00af811 	.word	0xc00af811
   3a4b0:	a01cf8d0 	.word	0xa01cf8d0
   3a4b4:	40629801 	.word	0x40629801
   3a4b8:	0a0aea88 	.word	0x0a0aea88
   3a4bc:	620cea82 	.word	0x620cea82
   3a4c0:	4807f3c0 	.word	0x4807f3c0
   3a4c4:	2c07f3c0 	.word	0x2c07f3c0
   3a4c8:	f8112000 	.word	0xf8112000
   3a4cc:	f3c6b00b 	.word	0xf3c6b00b
   3a4d0:	5d8e2607 	.word	0x5d8e2607
   3a4d4:	6b0bea8a 	.word	0x6b0bea8a
   3a4d8:	4507f3c5 	.word	0x4507f3c5
   3a4dc:	a00cf811 	.word	0xa00cf811
   3a4e0:	f8115d4d 	.word	0xf8115d4d
   3a4e4:	ea821008 	.word	0xea821008
   3a4e8:	ea8b2606 	.word	0xea8b2606
   3a4ec:	9c022b0a 	.word	0x9c022b0a
   3a4f0:	4b05ea8b 	.word	0x4b05ea8b
   3a4f4:	4601ea86 	.word	0x4601ea86
   3a4f8:	2c13ea4f 	.word	0x2c13ea4f
   3a4fc:	ea4f0a31 	.word	0xea4f0a31
   3a500:	f366221b 	.word	0xf366221b
   3a504:	f36b0e07 	.word	0xf36b0e07
   3a508:	f36c0007 	.word	0xf36c0007
   3a50c:	ea4f240f 	.word	0xea4f240f
   3a510:	f3624c13 	.word	0xf3624c13
   3a514:	f361200f 	.word	0xf361200f
   3a518:	f36c2e0f 	.word	0xf36c2e0f
   3a51c:	0c314417 	.word	0x0c314417
   3a520:	4e17f361 	.word	0x4e17f361
   3a524:	46204601 	.word	0x46204601
   3a528:	f3630e1b 	.word	0xf3630e1b
   3a52c:	9b05601f 	.word	0x9b05601f
   3a530:	60180a3d 	.word	0x60180a3d
   3a534:	f3672000 	.word	0xf3672000
   3a538:	ea4f0907 	.word	0xea4f0907
   3a53c:	f365421b 	.word	0xf365421b
   3a540:	0c3d290f 	.word	0x0c3d290f
   3a544:	4917f365 	.word	0x4917f365
   3a548:	0e360e3f 	.word	0x0e360e3f
   3a54c:	4117f362 	.word	0x4117f362
   3a550:	6b1bea4f 	.word	0x6b1bea4f
   3a554:	691ff367 	.word	0x691ff367
   3a558:	6e1ff366 	.word	0x6e1ff366
   3a55c:	611ff36b 	.word	0x611ff36b
   3a560:	9004f8c3 	.word	0x9004f8c3
   3a564:	e008f8c3 	.word	0xe008f8c3
   3a568:	b00960d9 	.word	0xb00960d9
   3a56c:	8ff0e8bd 	.word	0x8ff0e8bd
   3a570:	0004b980 	.word	0x0004b980
   3a574:	0004ba80 	.word	0x0004ba80

0003a578 <symbol_000e471>:
   3a578:	4ff0e92d 	.word	0x4ff0e92d
   3a57c:	3500e9d0 	.word	0x3500e9d0
   3a580:	682fb089 	.word	0x682fb089
   3a584:	f8d1105b 	.word	0xf8d1105b
   3a588:	9306a000 	.word	0x9306a000
   3a58c:	684c3b01 	.word	0x684c3b01
   3a590:	ea8a9301 	.word	0xea8a9301
   3a594:	68eb0a07 	.word	0x68eb0a07
   3a598:	68c9688f 	.word	0x68c9688f
   3a59c:	40596868 	.word	0x40596868
   3a5a0:	68ae9b01 	.word	0x68ae9b01
   3a5a4:	2b009205 	.word	0x2b009205
   3a5a8:	0210f105 	.word	0x0210f105
   3a5ac:	0004ea80 	.word	0x0004ea80
   3a5b0:	0706ea87 	.word	0x0706ea87
   3a5b4:	f8df9204 	.word	0xf8df9204
   3a5b8:	f340b3dc 	.word	0xf340b3dc
   3a5bc:	46d180d7 	.word	0x46d180d7
   3a5c0:	0830f105 	.word	0x0830f105
   3a5c4:	f489fa5f 	.word	0xf489fa5f
   3a5c8:	5024f85b 	.word	0x5024f85b
   3a5cc:	6c20f858 	.word	0x6c20f858
   3a5d0:	fc80fa5f 	.word	0xfc80fa5f
   3a5d4:	f85b0e04 	.word	0xf85b0e04
   3a5d8:	f85bc02c 	.word	0xf85bc02c
   3a5dc:	406e4024 	.word	0x406e4024
   3a5e0:	5c1cf858 	.word	0x5c1cf858
   3a5e4:	2e07f3c1 	.word	0x2e07f3c1
   3a5e8:	a02ef85b 	.word	0xa02ef85b
   3a5ec:	0505ea8c 	.word	0x0505ea8c
   3a5f0:	2e34ea86 	.word	0x2e34ea86
   3a5f4:	b2fbb2ca 	.word	0xb2fbb2ca
   3a5f8:	6c17ea4f 	.word	0x6c17ea4f
   3a5fc:	4407f3c7 	.word	0x4407f3c7
   3a600:	2707f3c7 	.word	0x2707f3c7
   3a604:	6027f85b 	.word	0x6027f85b
   3a608:	2022f85b 	.word	0x2022f85b
   3a60c:	7c14f858 	.word	0x7c14f858
   3a610:	3023f85b 	.word	0x3023f85b
   3a614:	ea4f407a 	.word	0xea4f407a
   3a618:	f85b6719 	.word	0xf85b6719
   3a61c:	f85b7027 	.word	0xf85b7027
   3a620:	ea82c02c 	.word	0xea82c02c
   3a624:	ea822237 	.word	0xea822237
   3a628:	f8586636 	.word	0xf8586636
   3a62c:	ea852c18 	.word	0xea852c18
   3a630:	ea8e2c3c 	.word	0xea8e2c3c
   3a634:	0e0d6e3a 	.word	0x0e0d6e3a
   3a638:	0a02ea83 	.word	0x0a02ea83
   3a63c:	2307f3c9 	.word	0x2307f3c9
   3a640:	3023f85b 	.word	0x3023f85b
   3a644:	5025f85b 	.word	0x5025f85b
   3a648:	4107f3c1 	.word	0x4107f3c1
   3a64c:	1021f85b 	.word	0x1021f85b
   3a650:	2707f3c0 	.word	0x2707f3c0
   3a654:	2535ea8a 	.word	0x2535ea8a
   3a658:	4a07f3c0 	.word	0x4a07f3c0
   3a65c:	6033ea8c 	.word	0x6033ea8c
   3a660:	4031ea80 	.word	0x4031ea80
   3a664:	4024f85b 	.word	0x4024f85b
   3a668:	ea8e0e03 	.word	0xea8e0e03
   3a66c:	f85b4434 	.word	0xf85b4434
   3a670:	b2e13023 	.word	0xb2e13023
   3a674:	f3c99302 	.word	0xf3c99302
   3a678:	f8584907 	.word	0xf8584907
   3a67c:	f85b3c10 	.word	0xf85b3c10
   3a680:	f85b1021 	.word	0xf85b1021
   3a684:	f3c42029 	.word	0xf3c42029
   3a688:	f85b2c07 	.word	0xf85b2c07
   3a68c:	f85b9027 	.word	0xf85b9027
   3a690:	4059702a 	.word	0x4059702a
   3a694:	302cf85b 	.word	0x302cf85b
   3a698:	4637ea86 	.word	0x4637ea86
   3a69c:	6539ea85 	.word	0x6539ea85
   3a6a0:	4532ea85 	.word	0x4532ea85
   3a6a4:	2707f3c6 	.word	0x2707f3c6
   3a6a8:	9b029303 	.word	0x9b029303
   3a6ac:	4e07f3c5 	.word	0x4e07f3c5
   3a6b0:	7027f85b 	.word	0x7027f85b
   3a6b4:	902ef85b 	.word	0x902ef85b
   3a6b8:	4c07f3c6 	.word	0x4c07f3c6
   3a6bc:	ea4fb2c2 	.word	0xea4fb2c2
   3a6c0:	ea816e15 	.word	0xea816e15
   3a6c4:	b2e92333 	.word	0xb2e92333
   3a6c8:	a02cf85b 	.word	0xa02cf85b
   3a6cc:	6337ea83 	.word	0x6337ea83
   3a6d0:	2022f85b 	.word	0x2022f85b
   3a6d4:	e02ef85b 	.word	0xe02ef85b
   3a6d8:	1021f85b 	.word	0x1021f85b
   3a6dc:	7c0cf858 	.word	0x7c0cf858
   3a6e0:	6c16ea4f 	.word	0x6c16ea4f
   3a6e4:	b2f6407a 	.word	0xb2f6407a
   3a6e8:	2e3eea82 	.word	0x2e3eea82
   3a6ec:	2026f85b 	.word	0x2026f85b
   3a6f0:	6c08f858 	.word	0x6c08f858
   3a6f4:	4939ea83 	.word	0x4939ea83
   3a6f8:	40710e23 	.word	0x40710e23
   3a6fc:	6023f85b 	.word	0x6023f85b
   3a700:	3c04f858 	.word	0x3c04f858
   3a704:	702cf85b 	.word	0x702cf85b
   3a708:	f3c54053 	.word	0xf3c54053
   3a70c:	ea832507 	.word	0xea832507
   3a710:	f85b2636 	.word	0xf85b2636
   3a714:	f3c05025 	.word	0xf3c05025
   3a718:	f3c02307 	.word	0xf3c02307
   3a71c:	ea814007 	.word	0xea814007
   3a720:	f85b2137 	.word	0xf85b2137
   3a724:	f85b7023 	.word	0xf85b7023
   3a728:	ea863020 	.word	0xea863020
   3a72c:	ea816635 	.word	0xea816635
   3a730:	f3c46737 	.word	0xf3c46737
   3a734:	9a034407 	.word	0x9a034407
   3a738:	4133ea86 	.word	0x4133ea86
   3a73c:	f85b9b01 	.word	0xf85b9b01
   3a740:	ea8e4024 	.word	0xea8e4024
   3a744:	3b016e32 	.word	0x3b016e32
   3a748:	403aea8e 	.word	0x403aea8e
   3a74c:	4734ea87 	.word	0x4734ea87
   3a750:	0820f108 	.word	0x0820f108
   3a754:	f47f9301 	.word	0xf47f9301
   3a758:	46caaf35 	.word	0x46caaf35
   3a75c:	9a049b06 	.word	0x9a049b06
   3a760:	6300f103 	.word	0x6300f103
   3a764:	eb023b01 	.word	0xeb023b01
   3a768:	93041343 	.word	0x93041343
   3a76c:	f38afa5f 	.word	0xf38afa5f
   3a770:	5023f85b 	.word	0x5023f85b
   3a774:	fa5f9b04 	.word	0xfa5f9b04
   3a778:	681cf881 	.word	0x681cf881
   3a77c:	f85b0e03 	.word	0xf85b0e03
   3a780:	f85b2028 	.word	0xf85b2028
   3a784:	f3c18023 	.word	0xf3c18023
   3a788:	f85b2307 	.word	0xf85b2307
   3a78c:	406c3023 	.word	0x406c3023
   3a790:	4507f3c7 	.word	0x4507f3c7
   3a794:	5025f85b 	.word	0x5025f85b
   3a798:	2438ea84 	.word	0x2438ea84
   3a79c:	f887fa5f 	.word	0xf887fa5f
   3a7a0:	6028f85b 	.word	0x6028f85b
   3a7a4:	6433ea84 	.word	0x6433ea84
   3a7a8:	4535ea84 	.word	0x4535ea84
   3a7ac:	462e9602 	.word	0x462e9602
   3a7b0:	fa5f9c04 	.word	0xfa5f9c04
   3a7b4:	f85bf980 	.word	0xf85bf980
   3a7b8:	68639029 	.word	0x68639029
   3a7bc:	f85b0e3c 	.word	0xf85b0e3c
   3a7c0:	96014024 	.word	0x96014024
   3a7c4:	0303ea89 	.word	0x0303ea89
   3a7c8:	ea839e04 	.word	0xea839e04
   3a7cc:	f3c72434 	.word	0xf3c72434
   3a7d0:	0e0b2707 	.word	0x0e0b2707
   3a7d4:	f85b4d6e 	.word	0xf85b4d6e
   3a7d8:	f89d9027 	.word	0xf89d9027
   3a7dc:	f85b8004 	.word	0xf85b8004
   3a7e0:	68f37023 	.word	0x68f37023
   3a7e4:	0e00f04f 	.word	0x0e00f04f
   3a7e8:	8008f815 	.word	0x8008f815
   3a7ec:	69324053 	.word	0x69324053
   3a7f0:	4107f3c1 	.word	0x4107f3c1
   3a7f4:	0802ea88 	.word	0x0802ea88
   3a7f8:	97034642 	.word	0x97034642
   3a7fc:	7021f85b 	.word	0x7021f85b
   3a800:	611aea4f 	.word	0x611aea4f
   3a804:	1021f85b 	.word	0x1021f85b
   3a808:	e018f8cd 	.word	0xe018f8cd
   3a80c:	2331ea83 	.word	0x2331ea83
   3a810:	6939ea83 	.word	0x6939ea83
   3a814:	2307f3ca 	.word	0x2307f3ca
   3a818:	3023f85b 	.word	0x3023f85b
   3a81c:	9e0268b1 	.word	0x9e0268b1
   3a820:	6333ea84 	.word	0x6333ea84
   3a824:	4737ea83 	.word	0x4737ea83
   3a828:	0801ea86 	.word	0x0801ea86
   3a82c:	2307f3c0 	.word	0x2307f3c0
   3a830:	f3ca9e03 	.word	0xf3ca9e03
   3a834:	f3c04a07 	.word	0xf3c04a07
   3a838:	f85b4007 	.word	0xf85b4007
   3a83c:	f85b102a 	.word	0xf85b102a
   3a840:	f8cd4023 	.word	0xf8cd4023
   3a844:	f85be01c 	.word	0xf85be01c
   3a848:	0e383020 	.word	0x0e383020
   3a84c:	ea885c28 	.word	0xea885c28
   3a850:	ea892836 	.word	0xea892836
   3a854:	ea884933 	.word	0xea884933
   3a858:	ea886834 	.word	0xea886834
   3a85c:	f3c94131 	.word	0xf3c94131
   3a860:	ea822407 	.word	0xea822407
   3a864:	9a016000 	.word	0x9a016000
   3a868:	8004f815 	.word	0x8004f815
   3a86c:	4307f3c1 	.word	0x4307f3c1
   3a870:	6a11ea4f 	.word	0x6a11ea4f
   3a874:	f8155cec 	.word	0xf8155cec
   3a878:	f3c2b00a 	.word	0xf3c2b00a
   3a87c:	9a042a07 	.word	0x9a042a07
   3a880:	ea80b2fb 	.word	0xea80b2fb
   3a884:	ea802008 	.word	0xea802008
   3a888:	5ceb4004 	.word	0x5ceb4004
   3a88c:	f8156954 	.word	0xf8156954
   3a890:	f3c9a00a 	.word	0xf3c9a00a
   3a894:	40634807 	.word	0x40634807
   3a898:	6008f815 	.word	0x6008f815
   3a89c:	6b0bea83 	.word	0x6b0bea83
   3a8a0:	2b0aea8b 	.word	0x2b0aea8b
   3a8a4:	4b06ea8b 	.word	0x4b06ea8b
   3a8a8:	260046f4 	.word	0x260046f4
   3a8ac:	f881fa5f 	.word	0xf881fa5f
   3a8b0:	f8156994 	.word	0xf8156994
   3a8b4:	ea4f8008 	.word	0xea4f8008
   3a8b8:	f8d26319 	.word	0xf8d26319
   3a8bc:	5ceba01c 	.word	0x5ceba01c
   3a8c0:	fa5f9a01 	.word	0xfa5f9a01
   3a8c4:	f815f989 	.word	0xf815f989
   3a8c8:	ea889009 	.word	0xea889009
   3a8cc:	ea880804 	.word	0xea880804
   3a8d0:	0e136803 	.word	0x0e136803
   3a8d4:	090aea89 	.word	0x090aea89
   3a8d8:	a003f815 	.word	0xa003f815
   3a8dc:	4307f3c2 	.word	0x4307f3c2
   3a8e0:	f3c75cec 	.word	0xf3c75cec
   3a8e4:	5ceb2307 	.word	0x5ceb2307
   3a8e8:	2107f3c1 	.word	0x2107f3c1
   3a8ec:	ea885c69 	.word	0xea885c69
   3a8f0:	ea882803 	.word	0xea882803
   3a8f4:	ea894804 	.word	0xea894804
   3a8f8:	ea4f690a 	.word	0xea4f690a
   3a8fc:	ea89241b 	.word	0xea89241b
   3a900:	f36b2901 	.word	0xf36b2901
   3a904:	ea4f0c07 	.word	0xea4f0c07
   3a908:	f3682118 	.word	0xf3682118
   3a90c:	22000607 	.word	0x22000607
   3a910:	260ff361 	.word	0x260ff361
   3a914:	2c0ff364 	.word	0x2c0ff364
   3a918:	441bea4f 	.word	0x441bea4f
   3a91c:	4c17f364 	.word	0x4c17f364
   3a920:	f3c74634 	.word	0xf3c74634
   3a924:	5ded4707 	.word	0x5ded4707
   3a928:	0e07f360 	.word	0x0e07f360
   3a92c:	4905ea89 	.word	0x4905ea89
   3a930:	2319ea4f 	.word	0x2319ea4f
   3a934:	f3690a05 	.word	0xf3690a05
   3a938:	ea4f0207 	.word	0xea4f0207
   3a93c:	f3634118 	.word	0xf3634118
   3a940:	f365220f 	.word	0xf365220f
   3a944:	0c052e0f 	.word	0x0c052e0f
   3a948:	4417f361 	.word	0x4417f361
   3a94c:	4e17f365 	.word	0x4e17f365
   3a950:	46110e00 	.word	0x46110e00
   3a954:	6e1ff360 	.word	0x6e1ff360
   3a958:	ea4f4620 	.word	0xea4f4620
   3a95c:	ea4f4319 	.word	0xea4f4319
   3a960:	f3636818 	.word	0xf3636818
   3a964:	9b054117 	.word	0x9b054117
   3a968:	601ff368 	.word	0x601ff368
   3a96c:	20006098 	.word	0x20006098
   3a970:	6b1bea4f 	.word	0x6b1bea4f
   3a974:	6919ea4f 	.word	0x6919ea4f
   3a978:	6c1ff36b 	.word	0x6c1ff36b
   3a97c:	611ff369 	.word	0x611ff369
   3a980:	e000f8c3 	.word	0xe000f8c3
   3a984:	c004f8c3 	.word	0xc004f8c3
   3a988:	b00960d9 	.word	0xb00960d9
   3a98c:	8ff0e8bd 	.word	0x8ff0e8bd
   3a990:	0004bea8 	.word	0x0004bea8
   3a994:	0004bfa8 	.word	0x0004bfa8

0003a998 <symbol_0005bab>:
   3a998:	4614b410 	.word	0x4614b410
   3a99c:	461a2901 	.word	0x461a2901
   3a9a0:	d0034621 	.word	0xd0034621
   3a9a4:	4b04f85d 	.word	0x4b04f85d
   3a9a8:	bde6f7ff 	.word	0xbde6f7ff
   3a9ac:	4b04f85d 	.word	0x4b04f85d
   3a9b0:	bbcaf7ff 	.word	0xbbcaf7ff

0003a9b4 <ok_rsp_parser>:
   3a9b4:	47702000 	.word	0x47702000

0003a9b8 <pdn_state_get_parser>:
   3a9b8:	b5702200 	.word	0xb5702200
   3a9bc:	b084780b 	.word	0xb084780b
   3a9c0:	e9cd460e 	.word	0xe9cd460e
   3a9c4:	e9cd2200 	.word	0xe9cd2200
   3a9c8:	b3232202 	.word	0xb3232202
   3a9cc:	2b20460c 	.word	0x2b20460c
   3a9d0:	d01b460d 	.word	0xd01b460d
   3a9d4:	3201700b 	.word	0x3201700b
   3a9d8:	3f01f814 	.word	0x3f01f814
   3a9dc:	460d18b1 	.word	0x460d18b1
   3a9e0:	d1f42b00 	.word	0xd1f42b00
   3a9e4:	4b0d2200 	.word	0x4b0d2200
   3a9e8:	f853702a 	.word	0xf853702a
   3a9ec:	4a0c3020 	.word	0x4a0c3020
   3a9f0:	2110681b 	.word	0x2110681b
   3a9f4:	f0064668 	.word	0xf0064668
   3a9f8:	4669fd45 	.word	0x4669fd45
   3a9fc:	f0074630 	.word	0xf0074630
   3aa00:	3000f921 	.word	0x3000f921
   3aa04:	2001bf18 	.word	0x2001bf18
   3aa08:	bd70b004 	.word	0xbd70b004
   3aa0c:	3f01f814 	.word	0x3f01f814
   3aa10:	d1dc2b00 	.word	0xd1dc2b00
   3aa14:	460de7e6 	.word	0x460de7e6
   3aa18:	bf00e7e4 	.word	0xbf00e7e4
   3aa1c:	20026310 	.word	0x20026310
   3aa20:	0004c44c 	.word	0x0004c44c

0003aa24 <pdn_id_get_parser>:
   3aa24:	780bb570 	.word	0x780bb570
   3aa28:	b3134606 	.word	0xb3134606
   3aa2c:	24004608 	.word	0x24004608
   3aa30:	2b20460a 	.word	0x2b20460a
   3aa34:	d0174615 	.word	0xd0174615
   3aa38:	34017013 	.word	0x34017013
   3aa3c:	3f01f810 	.word	0x3f01f810
   3aa40:	4615190a 	.word	0x4615190a
   3aa44:	d1f42b00 	.word	0xd1f42b00
   3aa48:	46082300 	.word	0x46082300
   3aa4c:	213a702b 	.word	0x213a702b
   3aa50:	fe14f006 	.word	0xfe14f006
   3aa54:	3001b130 	.word	0x3001b130
   3aa58:	ff5cf005 	.word	0xff5cf005
   3aa5c:	f8534b06 	.word	0xf8534b06
   3aa60:	60583026 	.word	0x60583026
   3aa64:	bd702000 	.word	0xbd702000
   3aa68:	3f01f810 	.word	0x3f01f810
   3aa6c:	d1e02b00 	.word	0xd1e02b00
   3aa70:	460de7ea 	.word	0x460de7ea
   3aa74:	bf00e7e8 	.word	0xbf00e7e8
   3aa78:	20026310 	.word	0x20026310

0003aa7c <context_create_parser>:
   3aa7c:	780bb570 	.word	0x780bb570
   3aa80:	b3134606 	.word	0xb3134606
   3aa84:	24004608 	.word	0x24004608
   3aa88:	2b20460a 	.word	0x2b20460a
   3aa8c:	d0174615 	.word	0xd0174615
   3aa90:	34017013 	.word	0x34017013
   3aa94:	3f01f810 	.word	0x3f01f810
   3aa98:	4615190a 	.word	0x4615190a
   3aa9c:	d1f42b00 	.word	0xd1f42b00
   3aaa0:	46082300 	.word	0x46082300
   3aaa4:	213a702b 	.word	0x213a702b
   3aaa8:	fde8f006 	.word	0xfde8f006
   3aaac:	4b08b130 	.word	0x4b08b130
   3aab0:	f8533001 	.word	0xf8533001
   3aab4:	f0054026 	.word	0xf0054026
   3aab8:	6020ff2d 	.word	0x6020ff2d
   3aabc:	bd702000 	.word	0xbd702000
   3aac0:	3f01f810 	.word	0x3f01f810
   3aac4:	d1e02b00 	.word	0xd1e02b00
   3aac8:	460de7ea 	.word	0x460de7ea
   3aacc:	bf00e7e8 	.word	0xbf00e7e8
   3aad0:	20026310 	.word	0x20026310

0003aad4 <pdn_interface_init>:
   3aad4:	33fff04f 	.word	0x33fff04f
   3aad8:	4c09b510 	.word	0x4c09b510
   3aadc:	21002228 	.word	0x21002228
   3aae0:	60234808 	.word	0x60234808
   3aae4:	faa8f006 	.word	0xfaa8f006
   3aae8:	2201f240 	.word	0x2201f240
   3aaec:	20662100 	.word	0x20662100
   3aaf0:	ff70f7f2 	.word	0xff70f7f2
   3aaf4:	60202800 	.word	0x60202800
   3aaf8:	2003bfb4 	.word	0x2003bfb4
   3aafc:	bd102000 	.word	0xbd102000
   3ab00:	2002620c 	.word	0x2002620c
   3ab04:	20026310 	.word	0x20026310

0003ab08 <pdn_interface_open>:
   3ab08:	43f0e92d 	.word	0x43f0e92d
   3ab0c:	b0832866 	.word	0xb0832866
   3ab10:	80bcf040 	.word	0x80bcf040
   3ab14:	7f00f5b1 	.word	0x7f00f5b1
   3ab18:	80aaf040 	.word	0x80aaf040
   3ab1c:	2302f240 	.word	0x2302f240
   3ab20:	f040429a 	.word	0xf040429a
   3ab24:	4c6280a5 	.word	0x4c6280a5
   3ab28:	b34d6825 	.word	0xb34d6825
   3ab2c:	2b006863 	.word	0x2b006863
   3ab30:	8098f000 	.word	0x8098f000
   3ab34:	2b0068a3 	.word	0x2b0068a3
   3ab38:	8096f000 	.word	0x8096f000
   3ab3c:	2b0068e3 	.word	0x2b0068e3
   3ab40:	8094f000 	.word	0x8094f000
   3ab44:	2b006923 	.word	0x2b006923
   3ab48:	8098f000 	.word	0x8098f000
   3ab4c:	2b006963 	.word	0x2b006963
   3ab50:	8098f000 	.word	0x8098f000
   3ab54:	2b0069a3 	.word	0x2b0069a3
   3ab58:	8096f000 	.word	0x8096f000
   3ab5c:	2b0069e3 	.word	0x2b0069e3
   3ab60:	808ef000 	.word	0x808ef000
   3ab64:	b1536a23 	.word	0xb1536a23
   3ab68:	25096a63 	.word	0x25096a63
   3ab6c:	200cb143 	.word	0x200cb143
   3ab70:	ff80f7ea 	.word	0xff80f7ea
   3ab74:	30fff04f 	.word	0x30fff04f
   3ab78:	e8bdb003 	.word	0xe8bdb003
   3ab7c:	250883f0 	.word	0x250883f0
   3ab80:	f7fe2074 	.word	0xf7fe2074
   3ab84:	f844ff3f 	.word	0xf844ff3f
   3ab88:	28000025 	.word	0x28000025
   3ab8c:	2274d0ef 	.word	0x2274d0ef
   3ab90:	f0062100 	.word	0xf0062100
   3ab94:	2101fa51 	.word	0x2101fa51
   3ab98:	f04f2003 	.word	0xf04f2003
   3ab9c:	f85437ff 	.word	0xf85437ff
   3aba0:	4a443025 	.word	0x4a443025
   3aba4:	f8546099 	.word	0xf8546099
   3aba8:	f44f3025 	.word	0xf44f3025
   3abac:	67187180 	.word	0x67187180
   3abb0:	4841605f 	.word	0x4841605f
   3abb4:	810cf8df 	.word	0x810cf8df
   3abb8:	fc64f006 	.word	0xfc64f006
   3abbc:	f8d8483e 	.word	0xf8d8483e
   3abc0:	26009000 	.word	0x26009000
   3abc4:	fe2ef006 	.word	0xfe2ef006
   3abc8:	46024633 	.word	0x46024633
   3abcc:	4648493a 	.word	0x4648493a
   3abd0:	96009601 	.word	0x96009601
   3abd4:	fea8f7f2 	.word	0xfea8f7f2
   3abd8:	48374681 	.word	0x48374681
   3abdc:	fe22f006 	.word	0xfe22f006
   3abe0:	d1594548 	.word	0xd1594548
   3abe4:	e9cd4633 	.word	0xe9cd4633
   3abe8:	f44f6600 	.word	0xf44f6600
   3abec:	49327280 	.word	0x49327280
   3abf0:	0000f8d8 	.word	0x0000f8d8
   3abf4:	ff80f7f2 	.word	0xff80f7f2
   3abf8:	48304606 	.word	0x48304606
   3abfc:	fe12f006 	.word	0xfe12f006
   3ac00:	db154286 	.word	0xdb154286
   3ac04:	492c4602 	.word	0x492c4602
   3ac08:	f006482c 	.word	0xf006482c
   3ac0c:	b978fe39 	.word	0xb978fe39
   3ac10:	46284929 	.word	0x46284929
   3ac14:	ff32f7ff 	.word	0xff32f7ff
   3ac18:	2202b9b0 	.word	0x2202b9b0
   3ac1c:	3025f854 	.word	0x3025f854
   3ac20:	40f1f045 	.word	0x40f1f045
   3ac24:	10d0f440 	.word	0x10d0f440
   3ac28:	b003609a 	.word	0xb003609a
   3ac2c:	83f0e8bd 	.word	0x83f0e8bd
   3ac30:	f0064823 	.word	0xf0064823
   3ac34:	4920fdf7 	.word	0x4920fdf7
   3ac38:	48214602 	.word	0x48214602
   3ac3c:	fe20f006 	.word	0xfe20f006
   3ac40:	2008b960 	.word	0x2008b960
   3ac44:	ff16f7ea 	.word	0xff16f7ea
   3ac48:	0025f854 	.word	0x0025f854
   3ac4c:	fef8f7fe 	.word	0xfef8f7fe
   3ac50:	f04f2300 	.word	0xf04f2300
   3ac54:	f84430ff 	.word	0xf84430ff
   3ac58:	e78d3025 	.word	0xe78d3025
   3ac5c:	f7ea2005 	.word	0xf7ea2005
   3ac60:	e7f1ff09 	.word	0xe7f1ff09
   3ac64:	e78b2501 	.word	0xe78b2501
   3ac68:	e7892502 	.word	0xe7892502
   3ac6c:	e7872503 	.word	0xe7872503
   3ac70:	f7ea2016 	.word	0xf7ea2016
   3ac74:	f04ffeff 	.word	0xf04ffeff
   3ac78:	e77d30ff 	.word	0xe77d30ff
   3ac7c:	e77f2504 	.word	0xe77f2504
   3ac80:	e77d2507 	.word	0xe77d2507
   3ac84:	e77b2505 	.word	0xe77b2505
   3ac88:	e7792506 	.word	0xe7792506
   3ac8c:	f7ea202f 	.word	0xf7ea202f
   3ac90:	f04ffef1 	.word	0xf04ffef1
   3ac94:	e76f30ff 	.word	0xe76f30ff
   3ac98:	f7ea2005 	.word	0xf7ea2005
   3ac9c:	f854feeb 	.word	0xf854feeb
   3aca0:	f7fe0025 	.word	0xf7fe0025
   3aca4:	f844fecd 	.word	0xf844fecd
   3aca8:	46386025 	.word	0x46386025
   3acac:	bf00e764 	.word	0xbf00e764
   3acb0:	20026310 	.word	0x20026310
   3acb4:	0004c428 	.word	0x0004c428
   3acb8:	20026210 	.word	0x20026210
   3acbc:	0004c438 	.word	0x0004c438
   3acc0:	0004c444 	.word	0x0004c444
   3acc4:	2002620c 	.word	0x2002620c

0003acc8 <pdn_interface_connect>:
   3acc8:	4ff0e92d 	.word	0x4ff0e92d
   3accc:	2900b083 	.word	0x2900b083
   3acd0:	813ef000 	.word	0x813ef000
   3acd4:	46912a64 	.word	0x46912a64
   3acd8:	813af200 	.word	0x813af200
   3acdc:	46084605 	.word	0x46084605
   3ace0:	f0064688 	.word	0xf0064688
   3ace4:	2864fd9f 	.word	0x2864fd9f
   3ace8:	8132f200 	.word	0x8132f200
   3acec:	43ab4ba5 	.word	0x43ab4ba5
   3acf0:	8125f040 	.word	0x8125f040
   3acf4:	45f1f025 	.word	0x45f1f025
   3acf8:	15d0f425 	.word	0x15d0f425
   3acfc:	f3002d09 	.word	0xf3002d09
   3ad00:	4fa1811e 	.word	0x4fa1811e
   3ad04:	3025f857 	.word	0x3025f857
   3ad08:	f0002b00 	.word	0xf0002b00
   3ad0c:	689a8118 	.word	0x689a8118
   3ad10:	f0002a00 	.word	0xf0002a00
   3ad14:	2d008114 	.word	0x2d008114
   3ad18:	8111f2c0 	.word	0x8111f2c0
   3ad1c:	2b02689b 	.word	0x2b02689b
   3ad20:	810df040 	.word	0x810df040
   3ad24:	4a9a4e99 	.word	0x4a9a4e99
   3ad28:	7180f44f 	.word	0x7180f44f
   3ad2c:	f0064630 	.word	0xf0064630
   3ad30:	f857fba9 	.word	0xf857fba9
   3ad34:	46043025 	.word	0x46043025
   3ad38:	7180f5c0 	.word	0x7180f5c0
   3ad3c:	4a95681b 	.word	0x4a95681b
   3ad40:	f0061830 	.word	0xf0061830
   3ad44:	f857fb9f 	.word	0xf857fb9f
   3ad48:	44043025 	.word	0x44043025
   3ad4c:	f0036f1b 	.word	0xf0036f1b
   3ad50:	2a030203 	.word	0x2a030203
   3ad54:	80eaf000 	.word	0x80eaf000
   3ad58:	eb06079b 	.word	0xeb06079b
   3ad5c:	f5c40004 	.word	0xf5c40004
   3ad60:	bf4c7180 	.word	0xbf4c7180
   3ad64:	4b8d4b8c 	.word	0x4b8d4b8c
   3ad68:	f0064a8d 	.word	0xf0064a8d
   3ad6c:	4404fb8b 	.word	0x4404fb8b
   3ad70:	4a8c4643 	.word	0x4a8c4643
   3ad74:	7180f5c4 	.word	0x7180f5c4
   3ad78:	f0061930 	.word	0xf0061930
   3ad7c:	4420fb83 	.word	0x4420fb83
   3ad80:	7f80f5b0 	.word	0x7f80f5b0
   3ad84:	80f7f300 	.word	0x80f7f300
   3ad88:	a238f8df 	.word	0xa238f8df
   3ad8c:	f8da487f 	.word	0xf8da487f
   3ad90:	2400b000 	.word	0x2400b000
   3ad94:	fd46f006 	.word	0xfd46f006
   3ad98:	46024623 	.word	0x46024623
   3ad9c:	4658497b 	.word	0x4658497b
   3ada0:	94009401 	.word	0x94009401
   3ada4:	fdc0f7f2 	.word	0xfdc0f7f2
   3ada8:	48784683 	.word	0x48784683
   3adac:	fd3af006 	.word	0xfd3af006
   3adb0:	d0084558 	.word	0xd0084558
   3adb4:	f7ea2005 	.word	0xf7ea2005
   3adb8:	f04ffe5d 	.word	0xf04ffe5d
   3adbc:	462034ff 	.word	0x462034ff
   3adc0:	e8bdb003 	.word	0xe8bdb003
   3adc4:	46238ff0 	.word	0x46238ff0
   3adc8:	4400e9cd 	.word	0x4400e9cd
   3adcc:	7280f44f 	.word	0x7280f44f
   3add0:	f8da496e 	.word	0xf8da496e
   3add4:	f7f20000 	.word	0xf7f20000
   3add8:	4604fe8f 	.word	0x4604fe8f
   3addc:	f0064872 	.word	0xf0064872
   3ade0:	4284fd21 	.word	0x4284fd21
   3ade4:	8091f2c0 	.word	0x8091f2c0
   3ade8:	49684602 	.word	0x49684602
   3adec:	f006486e 	.word	0xf006486e
   3adf0:	2800fd47 	.word	0x2800fd47
   3adf4:	8089f040 	.word	0x8089f040
   3adf8:	46284964 	.word	0x46284964
   3adfc:	fddaf7ff 	.word	0xfddaf7ff
   3ae00:	28004604 	.word	0x28004604
   3ae04:	4a69d1db 	.word	0x4a69d1db
   3ae08:	7180f44f 	.word	0x7180f44f
   3ae0c:	f006485f 	.word	0xf006485f
   3ae10:	f857fb39 	.word	0xf857fb39
   3ae14:	f5c03025 	.word	0xf5c03025
   3ae18:	681b7180 	.word	0x681b7180
   3ae1c:	44304a64 	.word	0x44304a64
   3ae20:	fb30f006 	.word	0xfb30f006
   3ae24:	f8da4859 	.word	0xf8da4859
   3ae28:	f006b000 	.word	0xf006b000
   3ae2c:	4623fcfb 	.word	0x4623fcfb
   3ae30:	49564602 	.word	0x49564602
   3ae34:	94014658 	.word	0x94014658
   3ae38:	f7f29400 	.word	0xf7f29400
   3ae3c:	4683fd75 	.word	0x4683fd75
   3ae40:	f0064852 	.word	0xf0064852
   3ae44:	4558fcef 	.word	0x4558fcef
   3ae48:	4623d1b4 	.word	0x4623d1b4
   3ae4c:	7280f44f 	.word	0x7280f44f
   3ae50:	f8da494e 	.word	0xf8da494e
   3ae54:	e9cd0000 	.word	0xe9cd0000
   3ae58:	f7f24400 	.word	0xf7f24400
   3ae5c:	4683fe4d 	.word	0x4683fe4d
   3ae60:	f0064851 	.word	0xf0064851
   3ae64:	4583fcdf 	.word	0x4583fcdf
   3ae68:	4602db4f 	.word	0x4602db4f
   3ae6c:	484e4947 	.word	0x484e4947
   3ae70:	fd06f006 	.word	0xfd06f006
   3ae74:	d1482800 	.word	0xd1482800
   3ae78:	f8572103 	.word	0xf8572103
   3ae7c:	464a3025 	.word	0x464a3025
   3ae80:	f8576099 	.word	0xf8576099
   3ae84:	46410025 	.word	0x46410025
   3ae88:	f7df300c 	.word	0xf7df300c
   3ae8c:	4a49f811 	.word	0x4a49f811
   3ae90:	7180f44f 	.word	0x7180f44f
   3ae94:	f006483d 	.word	0xf006483d
   3ae98:	4601faf5 	.word	0x4601faf5
   3ae9c:	3025f857 	.word	0x3025f857
   3aea0:	7180f5c1 	.word	0x7180f5c1
   3aea4:	4a42681b 	.word	0x4a42681b
   3aea8:	f0061830 	.word	0xf0061830
   3aeac:	4837faeb 	.word	0x4837faeb
   3aeb0:	6000f8da 	.word	0x6000f8da
   3aeb4:	fcb6f006 	.word	0xfcb6f006
   3aeb8:	46024623 	.word	0x46024623
   3aebc:	46304933 	.word	0x46304933
   3aec0:	94009401 	.word	0x94009401
   3aec4:	fd30f7f2 	.word	0xfd30f7f2
   3aec8:	48304606 	.word	0x48304606
   3aecc:	fcaaf006 	.word	0xfcaaf006
   3aed0:	d15342b0 	.word	0xd15342b0
   3aed4:	f44f4623 	.word	0xf44f4623
   3aed8:	492c7280 	.word	0x492c7280
   3aedc:	0000f8da 	.word	0x0000f8da
   3aee0:	4400e9cd 	.word	0x4400e9cd
   3aee4:	fe08f7f2 	.word	0xfe08f7f2
   3aee8:	48334606 	.word	0x48334606
   3aeec:	fc9af006 	.word	0xfc9af006
   3aef0:	db334286 	.word	0xdb334286
   3aef4:	49254602 	.word	0x49254602
   3aef8:	f006482f 	.word	0xf006482f
   3aefc:	bb68fcc1 	.word	0xbb68fcc1
   3af00:	49224628 	.word	0x49224628
   3af04:	fd8ef7ff 	.word	0xfd8ef7ff
   3af08:	482ce759 	.word	0x482ce759
   3af0c:	fc8af006 	.word	0xfc8af006
   3af10:	4602491e 	.word	0x4602491e
   3af14:	f0064829 	.word	0xf0064829
   3af18:	2800fcb3 	.word	0x2800fcb3
   3af1c:	af4af47f 	.word	0xaf4af47f
   3af20:	f7ea2008 	.word	0xf7ea2008
   3af24:	f04ffda7 	.word	0xf04ffda7
   3af28:	e74834ff 	.word	0xe74834ff
   3af2c:	7180f5c4 	.word	0x7180f5c4
   3af30:	4b231930 	.word	0x4b231930
   3af34:	f0064a1a 	.word	0xf0064a1a
   3af38:	4404faa5 	.word	0x4404faa5
   3af3c:	f04fe718 	.word	0xf04fe718
   3af40:	200934ff 	.word	0x200934ff
   3af44:	fd96f7ea 	.word	0xfd96f7ea
   3af48:	b0034620 	.word	0xb0034620
   3af4c:	8ff0e8bd 	.word	0x8ff0e8bd
   3af50:	f7ea2016 	.word	0xf7ea2016
   3af54:	f04ffd8f 	.word	0xf04ffd8f
   3af58:	e73034ff 	.word	0xe73034ff
   3af5c:	f0064817 	.word	0xf0064817
   3af60:	490afc61 	.word	0x490afc61
   3af64:	48154602 	.word	0x48154602
   3af68:	fc8af006 	.word	0xfc8af006
   3af6c:	2008b930 	.word	0x2008b930
   3af70:	fd80f7ea 	.word	0xfd80f7ea
   3af74:	f04fe723 	.word	0xf04fe723
   3af78:	e72034ff 	.word	0xe72034ff
   3af7c:	f7ea2005 	.word	0xf7ea2005
   3af80:	e71cfd79 	.word	0xe71cfd79
   3af84:	789a0000 	.word	0x789a0000
   3af88:	20026310 	.word	0x20026310
   3af8c:	20026210 	.word	0x20026210
   3af90:	0004c3b4 	.word	0x0004c3b4
   3af94:	0004c3c0 	.word	0x0004c3c0
   3af98:	0004c3d4 	.word	0x0004c3d4
   3af9c:	0004c3dc 	.word	0x0004c3dc
   3afa0:	0004c3cc 	.word	0x0004c3cc
   3afa4:	0004c40c 	.word	0x0004c40c
   3afa8:	0004b3d4 	.word	0x0004b3d4
   3afac:	0004c3e0 	.word	0x0004c3e0
   3afb0:	0004c3ec 	.word	0x0004c3ec
   3afb4:	0004c3f0 	.word	0x0004c3f0
   3afb8:	0004c400 	.word	0x0004c400
   3afbc:	0004c444 	.word	0x0004c444
   3afc0:	0004c3c4 	.word	0x0004c3c4
   3afc4:	2002620c 	.word	0x2002620c

0003afc8 <pdn_interface_close>:
   3afc8:	43f0e92d 	.word	0x43f0e92d
   3afcc:	b0834b63 	.word	0xb0834b63
   3afd0:	f0404383 	.word	0xf0404383
   3afd4:	f020809d 	.word	0xf020809d
   3afd8:	f42444f1 	.word	0xf42444f1
   3afdc:	2c0914d0 	.word	0x2c0914d0
   3afe0:	8096f300 	.word	0x8096f300
   3afe4:	f8554d5e 	.word	0xf8554d5e
   3afe8:	28000024 	.word	0x28000024
   3afec:	8090f000 	.word	0x8090f000
   3aff0:	2b006883 	.word	0x2b006883
   3aff4:	808cf000 	.word	0x808cf000
   3aff8:	2b036883 	.word	0x2b036883
   3affc:	f7fed008 	.word	0xf7fed008
   3b000:	2300fd1f 	.word	0x2300fd1f
   3b004:	f8454618 	.word	0xf8454618
   3b008:	b0033024 	.word	0xb0033024
   3b00c:	83f0e8bd 	.word	0x83f0e8bd
   3b010:	4a554e54 	.word	0x4a554e54
   3b014:	7180f44f 	.word	0x7180f44f
   3b018:	f0064630 	.word	0xf0064630
   3b01c:	f855fa33 	.word	0xf855fa33
   3b020:	f5c03024 	.word	0xf5c03024
   3b024:	681b7180 	.word	0x681b7180
   3b028:	44304a50 	.word	0x44304a50
   3b02c:	814cf8df 	.word	0x814cf8df
   3b030:	fa28f006 	.word	0xfa28f006
   3b034:	f8d84630 	.word	0xf8d84630
   3b038:	27009000 	.word	0x27009000
   3b03c:	fbf2f006 	.word	0xfbf2f006
   3b040:	46024631 	.word	0x46024631
   3b044:	4648463b 	.word	0x4648463b
   3b048:	97009701 	.word	0x97009701
   3b04c:	fc6cf7f2 	.word	0xfc6cf7f2
   3b050:	46304681 	.word	0x46304681
   3b054:	fbe6f006 	.word	0xfbe6f006
   3b058:	d1764548 	.word	0xd1764548
   3b05c:	e9cd463b 	.word	0xe9cd463b
   3b060:	f44f7700 	.word	0xf44f7700
   3b064:	46317280 	.word	0x46317280
   3b068:	0000f8d8 	.word	0x0000f8d8
   3b06c:	fd44f7f2 	.word	0xfd44f7f2
   3b070:	483f4607 	.word	0x483f4607
   3b074:	fbd6f006 	.word	0xfbd6f006
   3b078:	da4f4287 	.word	0xda4f4287
   3b07c:	f006483d 	.word	0xf006483d
   3b080:	4938fbd1 	.word	0x4938fbd1
   3b084:	483b4602 	.word	0x483b4602
   3b088:	fbfaf006 	.word	0xfbfaf006
   3b08c:	d15c2800 	.word	0xd15c2800
   3b090:	f7ea2008 	.word	0xf7ea2008
   3b094:	4a38fcef 	.word	0x4a38fcef
   3b098:	7180f44f 	.word	0x7180f44f
   3b09c:	f0064831 	.word	0xf0064831
   3b0a0:	4601f9f1 	.word	0x4601f9f1
   3b0a4:	3024f855 	.word	0x3024f855
   3b0a8:	7180f5c1 	.word	0x7180f5c1
   3b0ac:	4a2f681b 	.word	0x4a2f681b
   3b0b0:	f0061830 	.word	0xf0061830
   3b0b4:	482bf9e7 	.word	0x482bf9e7
   3b0b8:	7000f8d8 	.word	0x7000f8d8
   3b0bc:	f0062600 	.word	0xf0062600
   3b0c0:	4633fbb1 	.word	0x4633fbb1
   3b0c4:	49274602 	.word	0x49274602
   3b0c8:	96014638 	.word	0x96014638
   3b0cc:	f7f29600 	.word	0xf7f29600
   3b0d0:	4607fc2b 	.word	0x4607fc2b
   3b0d4:	f0064823 	.word	0xf0064823
   3b0d8:	42b8fba5 	.word	0x42b8fba5
   3b0dc:	4633d139 	.word	0x4633d139
   3b0e0:	6600e9cd 	.word	0x6600e9cd
   3b0e4:	7280f44f 	.word	0x7280f44f
   3b0e8:	f8d8491e 	.word	0xf8d8491e
   3b0ec:	f7f20000 	.word	0xf7f20000
   3b0f0:	4606fd03 	.word	0x4606fd03
   3b0f4:	f006481e 	.word	0xf006481e
   3b0f8:	4286fb95 	.word	0x4286fb95
   3b0fc:	4602db16 	.word	0x4602db16
   3b100:	481b4918 	.word	0x481b4918
   3b104:	fbbcf006 	.word	0xfbbcf006
   3b108:	f855b980 	.word	0xf855b980
   3b10c:	e7760024 	.word	0xe7760024
   3b110:	f7ea2009 	.word	0xf7ea2009
   3b114:	f04ffcaf 	.word	0xf04ffcaf
   3b118:	e77630ff 	.word	0xe77630ff
   3b11c:	46314602 	.word	0x46314602
   3b120:	f0064813 	.word	0xf0064813
   3b124:	2800fbad 	.word	0x2800fbad
   3b128:	e7a7d0b5 	.word	0xe7a7d0b5
   3b12c:	f0064811 	.word	0xf0064811
   3b130:	490cfb79 	.word	0x490cfb79
   3b134:	480f4602 	.word	0x480f4602
   3b138:	fba2f006 	.word	0xfba2f006
   3b13c:	2008b948 	.word	0x2008b948
   3b140:	fc98f7ea 	.word	0xfc98f7ea
   3b144:	0024f855 	.word	0x0024f855
   3b148:	2005e759 	.word	0x2005e759
   3b14c:	fc92f7ea 	.word	0xfc92f7ea
   3b150:	2005e7a1 	.word	0x2005e7a1
   3b154:	fc8ef7ea 	.word	0xfc8ef7ea
   3b158:	bf00e7d7 	.word	0xbf00e7d7
   3b15c:	789a0000 	.word	0x789a0000
   3b160:	20026310 	.word	0x20026310
   3b164:	20026210 	.word	0x20026210
   3b168:	0004c3a8 	.word	0x0004c3a8
   3b16c:	0004c3ec 	.word	0x0004c3ec
   3b170:	0004b3d4 	.word	0x0004b3d4
   3b174:	0004c444 	.word	0x0004c444
   3b178:	0004c3b4 	.word	0x0004c3b4
   3b17c:	2002620c 	.word	0x2002620c

0003b180 <pdn_interface_setopt>:
   3b180:	f240b510 	.word	0xf240b510
   3b184:	42a12402 	.word	0x42a12402
   3b188:	b153d10b 	.word	0xb153d10b
   3b18c:	b1419902 	.word	0xb1419902
   3b190:	43814925 	.word	0x43814925
   3b194:	2009d00b 	.word	0x2009d00b
   3b198:	fc6cf7ea 	.word	0xfc6cf7ea
   3b19c:	30fff04f 	.word	0x30fff04f
   3b1a0:	2016bd10 	.word	0x2016bd10
   3b1a4:	fc66f7ea 	.word	0xfc66f7ea
   3b1a8:	30fff04f 	.word	0x30fff04f
   3b1ac:	f020bd10 	.word	0xf020bd10
   3b1b0:	f42040f1 	.word	0xf42040f1
   3b1b4:	280910d0 	.word	0x280910d0
   3b1b8:	491cdced 	.word	0x491cdced
   3b1bc:	1020f851 	.word	0x1020f851
   3b1c0:	d0e82900 	.word	0xd0e82900
   3b1c4:	2c00688c 	.word	0x2c00688c
   3b1c8:	2800d0e5 	.word	0x2800d0e5
   3b1cc:	2a01dbe3 	.word	0x2a01dbe3
   3b1d0:	202dd001 	.word	0x202dd001
   3b1d4:	688ae7e6 	.word	0x688ae7e6
   3b1d8:	688ab1fa 	.word	0x688ab1fa
   3b1dc:	d01c2a03 	.word	0xd01c2a03
   3b1e0:	2a04688a 	.word	0x2a04688a
   3b1e4:	9a02d019 	.word	0x9a02d019
   3b1e8:	1e420890 	.word	0x1e420890
   3b1ec:	d8d82a01 	.word	0xd8d82a01
   3b1f0:	07929a02 	.word	0x07929a02
   3b1f4:	681ad1d5 	.word	0x681ad1d5
   3b1f8:	d0102a02 	.word	0xd0102a02
   3b1fc:	d1d02a0a 	.word	0xd1d02a0a
   3b200:	28022202 	.word	0x28022202
   3b204:	685bd106 	.word	0x685bd106
   3b208:	d00a2b02 	.word	0xd00a2b02
   3b20c:	d1c82b0a 	.word	0xd1c82b0a
   3b210:	0202f042 	.word	0x0202f042
   3b214:	2000670a 	.word	0x2000670a
   3b218:	200ee7c4 	.word	0x200ee7c4
   3b21c:	2201e7c2 	.word	0x2201e7c2
   3b220:	f042e7ef 	.word	0xf042e7ef
   3b224:	e7f50201 	.word	0xe7f50201
   3b228:	789a0000 	.word	0x789a0000
   3b22c:	20026310 	.word	0x20026310

0003b230 <pdn_interface_getopt>:
   3b230:	43f0e92d 	.word	0x43f0e92d
   3b234:	2402f240 	.word	0x2402f240
   3b238:	42a1b083 	.word	0x42a1b083
   3b23c:	f0409d0a 	.word	0xf0409d0a
   3b240:	461e80a9 	.word	0x461e80a9
   3b244:	f0002b00 	.word	0xf0002b00
   3b248:	2d0080a5 	.word	0x2d0080a5
   3b24c:	80a2f000 	.word	0x80a2f000
   3b250:	43834b56 	.word	0x43834b56
   3b254:	8084f040 	.word	0x8084f040
   3b258:	44f1f020 	.word	0x44f1f020
   3b25c:	14d0f424 	.word	0x14d0f424
   3b260:	dc7d2c09 	.word	0xdc7d2c09
   3b264:	f8534b52 	.word	0xf8534b52
   3b268:	2b003024 	.word	0x2b003024
   3b26c:	6899d078 	.word	0x6899d078
   3b270:	d0752900 	.word	0xd0752900
   3b274:	db732c00 	.word	0xdb732c00
   3b278:	d00e2a02 	.word	0xd00e2a02
   3b27c:	d0082a03 	.word	0xd0082a03
   3b280:	d0152a01 	.word	0xd0152a01
   3b284:	f7ea202d 	.word	0xf7ea202d
   3b288:	2000fbf5 	.word	0x2000fbf5
   3b28c:	e8bdb003 	.word	0xe8bdb003
   3b290:	682b83f0 	.word	0x682b83f0
   3b294:	2016bb23 	.word	0x2016bb23
   3b298:	682ae7f5 	.word	0x682ae7f5
   3b29c:	d0fa2a00 	.word	0xd0fa2a00
   3b2a0:	20002201 	.word	0x20002201
   3b2a4:	7033681b 	.word	0x7033681b
   3b2a8:	b003602a 	.word	0xb003602a
   3b2ac:	83f0e8bd 	.word	0x83f0e8bd
   3b2b0:	2a00689a 	.word	0x2a00689a
   3b2b4:	689ad052 	.word	0x689ad052
   3b2b8:	d04f2a04 	.word	0xd04f2a04
   3b2bc:	2a07682a 	.word	0x2a07682a
   3b2c0:	f012d9e9 	.word	0xf012d9e9
   3b2c4:	d1e60203 	.word	0xd1e60203
   3b2c8:	07996f1b 	.word	0x07996f1b
   3b2cc:	2104d45d 	.word	0x2104d45d
   3b2d0:	d50207db 	.word	0xd50207db
   3b2d4:	50b32302 	.word	0x50b32302
   3b2d8:	602a460a 	.word	0x602a460a
   3b2dc:	e7d52000 	.word	0xe7d52000
   3b2e0:	f44f4a34 	.word	0xf44f4a34
   3b2e4:	48347180 	.word	0x48347180
   3b2e8:	80d8f8df 	.word	0x80d8f8df
   3b2ec:	f8caf006 	.word	0xf8caf006
   3b2f0:	f8d84831 	.word	0xf8d84831
   3b2f4:	27009000 	.word	0x27009000
   3b2f8:	fa94f006 	.word	0xfa94f006
   3b2fc:	4602463b 	.word	0x4602463b
   3b300:	4648492d 	.word	0x4648492d
   3b304:	97009701 	.word	0x97009701
   3b308:	fb0ef7f2 	.word	0xfb0ef7f2
   3b30c:	482a4681 	.word	0x482a4681
   3b310:	fa88f006 	.word	0xfa88f006
   3b314:	d1434548 	.word	0xd1434548
   3b318:	e9cd463b 	.word	0xe9cd463b
   3b31c:	f44f7700 	.word	0xf44f7700
   3b320:	49257280 	.word	0x49257280
   3b324:	0000f8d8 	.word	0x0000f8d8
   3b328:	fbe6f7f2 	.word	0xfbe6f7f2
   3b32c:	48234607 	.word	0x48234607
   3b330:	fa78f006 	.word	0xfa78f006
   3b334:	db194287 	.word	0xdb194287
   3b338:	491f4602 	.word	0x491f4602
   3b33c:	f006481f 	.word	0xf006481f
   3b340:	4607fa9f 	.word	0x4607fa9f
   3b344:	4620b990 	.word	0x4620b990
   3b348:	f7ff491b 	.word	0xf7ff491b
   3b34c:	2800fb35 	.word	0x2800fb35
   3b350:	2301db99 	.word	0x2301db99
   3b354:	46387030 	.word	0x46387030
   3b358:	e797602b 	.word	0xe797602b
   3b35c:	e792200e 	.word	0xe792200e
   3b360:	f7ea2009 	.word	0xf7ea2009
   3b364:	f04ffb87 	.word	0xf04ffb87
   3b368:	e78f30ff 	.word	0xe78f30ff
   3b36c:	f0064814 	.word	0xf0064814
   3b370:	4911fa59 	.word	0x4911fa59
   3b374:	48124602 	.word	0x48124602
   3b378:	fa82f006 	.word	0xfa82f006
   3b37c:	2008b980 	.word	0x2008b980
   3b380:	fb78f7ea 	.word	0xfb78f7ea
   3b384:	30fff04f 	.word	0x30fff04f
   3b388:	220ae77d 	.word	0x220ae77d
   3b38c:	60322108 	.word	0x60322108
   3b390:	e79d2204 	.word	0xe79d2204
   3b394:	f7ea2016 	.word	0xf7ea2016
   3b398:	f04ffb6d 	.word	0xf04ffb6d
   3b39c:	e77530ff 	.word	0xe77530ff
   3b3a0:	f7ea2005 	.word	0xf7ea2005
   3b3a4:	f04ffb67 	.word	0xf04ffb67
   3b3a8:	e76c30ff 	.word	0xe76c30ff
   3b3ac:	789a0000 	.word	0x789a0000
   3b3b0:	20026310 	.word	0x20026310
   3b3b4:	0004c414 	.word	0x0004c414
   3b3b8:	20026210 	.word	0x20026210
   3b3bc:	0004c420 	.word	0x0004c420
   3b3c0:	0004c444 	.word	0x0004c444
   3b3c4:	2002620c 	.word	0x2002620c

0003b3c8 <pdn_interface_pdn_id_get>:
   3b3c8:	f0002900 	.word	0xf0002900
   3b3cc:	e92d83b9 	.word	0xe92d83b9
   3b3d0:	4ca343f0 	.word	0x4ca343f0
   3b3d4:	b0832802 	.word	0xb0832802
   3b3d8:	6823460d 	.word	0x6823460d
   3b3dc:	8094f000 	.word	0x8094f000
   3b3e0:	d03f280a 	.word	0xd03f280a
   3b3e4:	689bb11b 	.word	0x689bb11b
   3b3e8:	f0002b03 	.word	0xf0002b03
   3b3ec:	68638127 	.word	0x68638127
   3b3f0:	689bb11b 	.word	0x689bb11b
   3b3f4:	f0002b03 	.word	0xf0002b03
   3b3f8:	68a38110 	.word	0x68a38110
   3b3fc:	689bb11b 	.word	0x689bb11b
   3b400:	f0002b03 	.word	0xf0002b03
   3b404:	68e380f9 	.word	0x68e380f9
   3b408:	689bb11b 	.word	0x689bb11b
   3b40c:	f0002b03 	.word	0xf0002b03
   3b410:	692380e2 	.word	0x692380e2
   3b414:	689bb11b 	.word	0x689bb11b
   3b418:	f0002b03 	.word	0xf0002b03
   3b41c:	69638123 	.word	0x69638123
   3b420:	689bb11b 	.word	0x689bb11b
   3b424:	f0002b03 	.word	0xf0002b03
   3b428:	69a38161 	.word	0x69a38161
   3b42c:	689bb11b 	.word	0x689bb11b
   3b430:	f0002b03 	.word	0xf0002b03
   3b434:	69e3814a 	.word	0x69e3814a
   3b438:	689bb11b 	.word	0x689bb11b
   3b43c:	f0002b03 	.word	0xf0002b03
   3b440:	6a238133 	.word	0x6a238133
   3b444:	689bb11b 	.word	0x689bb11b
   3b448:	f0002b03 	.word	0xf0002b03
   3b44c:	6a63811c 	.word	0x6a63811c
   3b450:	689bb11b 	.word	0x689bb11b
   3b454:	f0002b03 	.word	0xf0002b03
   3b458:	f04f80ad 	.word	0xf04f80ad
   3b45c:	b00330ff 	.word	0xb00330ff
   3b460:	83f0e8bd 	.word	0x83f0e8bd
   3b464:	689bb11b 	.word	0x689bb11b
   3b468:	f0002b03 	.word	0xf0002b03
   3b46c:	68638335 	.word	0x68638335
   3b470:	689bb11b 	.word	0x689bb11b
   3b474:	f0002b03 	.word	0xf0002b03
   3b478:	68a382fd 	.word	0x68a382fd
   3b47c:	689bb11b 	.word	0x689bb11b
   3b480:	f0002b03 	.word	0xf0002b03
   3b484:	68e382d5 	.word	0x68e382d5
   3b488:	689eb11b 	.word	0x689eb11b
   3b48c:	f0002e03 	.word	0xf0002e03
   3b490:	692381f0 	.word	0x692381f0
   3b494:	689bb11b 	.word	0x689bb11b
   3b498:	f0002b03 	.word	0xf0002b03
   3b49c:	69638203 	.word	0x69638203
   3b4a0:	689bb11b 	.word	0x689bb11b
   3b4a4:	f0002b03 	.word	0xf0002b03
   3b4a8:	69a38215 	.word	0x69a38215
   3b4ac:	689bb11b 	.word	0x689bb11b
   3b4b0:	f0002b03 	.word	0xf0002b03
   3b4b4:	69e38227 	.word	0x69e38227
   3b4b8:	689bb11b 	.word	0x689bb11b
   3b4bc:	f0002b03 	.word	0xf0002b03
   3b4c0:	6a238239 	.word	0x6a238239
   3b4c4:	689bb11b 	.word	0x689bb11b
   3b4c8:	f0002b03 	.word	0xf0002b03
   3b4cc:	6a63824d 	.word	0x6a63824d
   3b4d0:	d0c22b00 	.word	0xd0c22b00
   3b4d4:	2b03689b 	.word	0x2b03689b
   3b4d8:	4628d1bf 	.word	0x4628d1bf
   3b4dc:	f9a2f006 	.word	0xf9a2f006
   3b4e0:	6a604606 	.word	0x6a604606
   3b4e4:	f006300c 	.word	0xf006300c
   3b4e8:	42b0f99d 	.word	0x42b0f99d
   3b4ec:	6a61d1b5 	.word	0x6a61d1b5
   3b4f0:	310c4628 	.word	0x310c4628
   3b4f4:	fd52f7de 	.word	0xfd52f7de
   3b4f8:	d1ae2800 	.word	0xd1ae2800
   3b4fc:	6f1a6a63 	.word	0x6f1a6a63
   3b500:	d5aa0792 	.word	0xd5aa0792
   3b504:	e11a2609 	.word	0xe11a2609
   3b508:	689bb11b 	.word	0x689bb11b
   3b50c:	f0002b03 	.word	0xf0002b03
   3b510:	686382fd 	.word	0x686382fd
   3b514:	689bb11b 	.word	0x689bb11b
   3b518:	f0002b03 	.word	0xf0002b03
   3b51c:	68a382c5 	.word	0x68a382c5
   3b520:	689bb11b 	.word	0x689bb11b
   3b524:	f0002b03 	.word	0xf0002b03
   3b528:	68e38269 	.word	0x68e38269
   3b52c:	689eb11b 	.word	0x689eb11b
   3b530:	f0002e03 	.word	0xf0002e03
   3b534:	692380ec 	.word	0x692380ec
   3b538:	689bb11b 	.word	0x689bb11b
   3b53c:	f0002b03 	.word	0xf0002b03
   3b540:	6963814a 	.word	0x6963814a
   3b544:	689bb11b 	.word	0x689bb11b
   3b548:	f0002b03 	.word	0xf0002b03
   3b54c:	69a3815e 	.word	0x69a3815e
   3b550:	689bb11b 	.word	0x689bb11b
   3b554:	f0002b03 	.word	0xf0002b03
   3b558:	69e38172 	.word	0x69e38172
   3b55c:	689bb11b 	.word	0x689bb11b
   3b560:	f0002b03 	.word	0xf0002b03
   3b564:	6a23821b 	.word	0x6a23821b
   3b568:	689bb11b 	.word	0x689bb11b
   3b56c:	f0002b03 	.word	0xf0002b03
   3b570:	6a63822d 	.word	0x6a63822d
   3b574:	f43f2b00 	.word	0xf43f2b00
   3b578:	689baf70 	.word	0x689baf70
   3b57c:	f47f2b03 	.word	0xf47f2b03
   3b580:	4628af6c 	.word	0x4628af6c
   3b584:	f94ef006 	.word	0xf94ef006
   3b588:	6a604606 	.word	0x6a604606
   3b58c:	f006300c 	.word	0xf006300c
   3b590:	4286f949 	.word	0x4286f949
   3b594:	af61f47f 	.word	0xaf61f47f
   3b598:	46286a61 	.word	0x46286a61
   3b59c:	f7de310c 	.word	0xf7de310c
   3b5a0:	2800fcfd 	.word	0x2800fcfd
   3b5a4:	af59f47f 	.word	0xaf59f47f
   3b5a8:	6f1a6a63 	.word	0x6f1a6a63
   3b5ac:	f57f07d2 	.word	0xf57f07d2
   3b5b0:	e7a7af54 	.word	0xe7a7af54
   3b5b4:	f0064628 	.word	0xf0064628
   3b5b8:	4606f935 	.word	0x4606f935
   3b5bc:	300c6a60 	.word	0x300c6a60
   3b5c0:	f930f006 	.word	0xf930f006
   3b5c4:	f47f42b0 	.word	0xf47f42b0
   3b5c8:	6a61af48 	.word	0x6a61af48
   3b5cc:	310c4628 	.word	0x310c4628
   3b5d0:	fce4f7de 	.word	0xfce4f7de
   3b5d4:	4628e741 	.word	0x4628e741
   3b5d8:	f924f006 	.word	0xf924f006
   3b5dc:	68e04606 	.word	0x68e04606
   3b5e0:	f006300c 	.word	0xf006300c
   3b5e4:	4286f91f 	.word	0x4286f91f
   3b5e8:	af13f47f 	.word	0xaf13f47f
   3b5ec:	462868e1 	.word	0x462868e1
   3b5f0:	f7de310c 	.word	0xf7de310c
   3b5f4:	e70cfcd3 	.word	0xe70cfcd3
   3b5f8:	f0064628 	.word	0xf0064628
   3b5fc:	4606f913 	.word	0x4606f913
   3b600:	300c68a0 	.word	0x300c68a0
   3b604:	f90ef006 	.word	0xf90ef006
   3b608:	f47f4286 	.word	0xf47f4286
   3b60c:	68a1aefc 	.word	0x68a1aefc
   3b610:	310c4628 	.word	0x310c4628
   3b614:	fcc2f7de 	.word	0xfcc2f7de
   3b618:	4628e6f5 	.word	0x4628e6f5
   3b61c:	f902f006 	.word	0xf902f006
   3b620:	68604606 	.word	0x68604606
   3b624:	f006300c 	.word	0xf006300c
   3b628:	4286f8fd 	.word	0x4286f8fd
   3b62c:	aee5f47f 	.word	0xaee5f47f
   3b630:	46286861 	.word	0x46286861
   3b634:	f7de310c 	.word	0xf7de310c
   3b638:	e6defcb1 	.word	0xe6defcb1
   3b63c:	f0064608 	.word	0xf0064608
   3b640:	4606f8f1 	.word	0x4606f8f1
   3b644:	300c6820 	.word	0x300c6820
   3b648:	f8ecf006 	.word	0xf8ecf006
   3b64c:	f47f4286 	.word	0xf47f4286
   3b650:	6821aece 	.word	0x6821aece
   3b654:	310c4628 	.word	0x310c4628
   3b658:	fca0f7de 	.word	0xfca0f7de
   3b65c:	bf00e6c7 	.word	0xbf00e6c7
   3b660:	20026310 	.word	0x20026310
   3b664:	f0064628 	.word	0xf0064628
   3b668:	4606f8dd 	.word	0x4606f8dd
   3b66c:	300c6920 	.word	0x300c6920
   3b670:	f8d8f006 	.word	0xf8d8f006
   3b674:	f47f4286 	.word	0xf47f4286
   3b678:	6921aed2 	.word	0x6921aed2
   3b67c:	310c4628 	.word	0x310c4628
   3b680:	fc8cf7de 	.word	0xfc8cf7de
   3b684:	4628e6cb 	.word	0x4628e6cb
   3b688:	f8ccf006 	.word	0xf8ccf006
   3b68c:	6a204606 	.word	0x6a204606
   3b690:	f006300c 	.word	0xf006300c
   3b694:	4286f8c7 	.word	0x4286f8c7
   3b698:	aed9f47f 	.word	0xaed9f47f
   3b69c:	46286a21 	.word	0x46286a21
   3b6a0:	f7de310c 	.word	0xf7de310c
   3b6a4:	e6d2fc7b 	.word	0xe6d2fc7b
   3b6a8:	f0064628 	.word	0xf0064628
   3b6ac:	4606f8bb 	.word	0x4606f8bb
   3b6b0:	300c69e0 	.word	0x300c69e0
   3b6b4:	f8b6f006 	.word	0xf8b6f006
   3b6b8:	f47f4286 	.word	0xf47f4286
   3b6bc:	69e1aec2 	.word	0x69e1aec2
   3b6c0:	310c4628 	.word	0x310c4628
   3b6c4:	fc6af7de 	.word	0xfc6af7de
   3b6c8:	4628e6bb 	.word	0x4628e6bb
   3b6cc:	f8aaf006 	.word	0xf8aaf006
   3b6d0:	69a04606 	.word	0x69a04606
   3b6d4:	f006300c 	.word	0xf006300c
   3b6d8:	4286f8a5 	.word	0x4286f8a5
   3b6dc:	aeabf47f 	.word	0xaeabf47f
   3b6e0:	462869a1 	.word	0x462869a1
   3b6e4:	f7de310c 	.word	0xf7de310c
   3b6e8:	e6a4fc59 	.word	0xe6a4fc59
   3b6ec:	f0064628 	.word	0xf0064628
   3b6f0:	4606f899 	.word	0x4606f899
   3b6f4:	300c6960 	.word	0x300c6960
   3b6f8:	f894f006 	.word	0xf894f006
   3b6fc:	f47f4286 	.word	0xf47f4286
   3b700:	6961ae94 	.word	0x6961ae94
   3b704:	310c4628 	.word	0x310c4628
   3b708:	fc48f7de 	.word	0xfc48f7de
   3b70c:	4628e68d 	.word	0x4628e68d
   3b710:	f888f006 	.word	0xf888f006
   3b714:	68e04607 	.word	0x68e04607
   3b718:	f006300c 	.word	0xf006300c
   3b71c:	4287f883 	.word	0x4287f883
   3b720:	af09f47f 	.word	0xaf09f47f
   3b724:	462868e1 	.word	0x462868e1
   3b728:	f7de310c 	.word	0xf7de310c
   3b72c:	2800fc37 	.word	0x2800fc37
   3b730:	af01f47f 	.word	0xaf01f47f
   3b734:	6f1a68e3 	.word	0x6f1a68e3
   3b738:	f57f07d1 	.word	0xf57f07d1
   3b73c:	6858aefc 	.word	0x6858aefc
   3b740:	f47f1c43 	.word	0xf47f1c43
   3b744:	4dc6ae8c 	.word	0x4dc6ae8c
   3b748:	f44f4ac6 	.word	0xf44f4ac6
   3b74c:	46287180 	.word	0x46287180
   3b750:	fe98f005 	.word	0xfe98f005
   3b754:	3026f854 	.word	0x3026f854
   3b758:	7180f5c0 	.word	0x7180f5c0
   3b75c:	4ac2681b 	.word	0x4ac2681b
   3b760:	f8df4428 	.word	0xf8df4428
   3b764:	f005830c 	.word	0xf005830c
   3b768:	4628fe8d 	.word	0x4628fe8d
   3b76c:	9000f8d8 	.word	0x9000f8d8
   3b770:	f0062700 	.word	0xf0062700
   3b774:	4629f857 	.word	0x4629f857
   3b778:	463b4602 	.word	0x463b4602
   3b77c:	97014648 	.word	0x97014648
   3b780:	f7f29700 	.word	0xf7f29700
   3b784:	4681f8d1 	.word	0x4681f8d1
   3b788:	f0064628 	.word	0xf0064628
   3b78c:	4548f84b 	.word	0x4548f84b
   3b790:	81e9f040 	.word	0x81e9f040
   3b794:	f44f463b 	.word	0xf44f463b
   3b798:	e9cd7280 	.word	0xe9cd7280
   3b79c:	46297700 	.word	0x46297700
   3b7a0:	0000f8d8 	.word	0x0000f8d8
   3b7a4:	f9a8f7f2 	.word	0xf9a8f7f2
   3b7a8:	48b04607 	.word	0x48b04607
   3b7ac:	f83af006 	.word	0xf83af006
   3b7b0:	46024287 	.word	0x46024287
   3b7b4:	81c7f2c0 	.word	0x81c7f2c0
   3b7b8:	48ac4629 	.word	0x48ac4629
   3b7bc:	f860f006 	.word	0xf860f006
   3b7c0:	f0402800 	.word	0xf0402800
   3b7c4:	462981c0 	.word	0x462981c0
   3b7c8:	f7ff4630 	.word	0xf7ff4630
   3b7cc:	f854f92b 	.word	0xf854f92b
   3b7d0:	68583026 	.word	0x68583026
   3b7d4:	4628e643 	.word	0x4628e643
   3b7d8:	f824f006 	.word	0xf824f006
   3b7dc:	69204606 	.word	0x69204606
   3b7e0:	f006300c 	.word	0xf006300c
   3b7e4:	4286f81f 	.word	0x4286f81f
   3b7e8:	aeabf47f 	.word	0xaeabf47f
   3b7ec:	46286921 	.word	0x46286921
   3b7f0:	f7de310c 	.word	0xf7de310c
   3b7f4:	2800fbd3 	.word	0x2800fbd3
   3b7f8:	aea3f47f 	.word	0xaea3f47f
   3b7fc:	6f1a6923 	.word	0x6f1a6923
   3b800:	f57f07d2 	.word	0xf57f07d2
   3b804:	2604ae9e 	.word	0x2604ae9e
   3b808:	4628e799 	.word	0x4628e799
   3b80c:	f80af006 	.word	0xf80af006
   3b810:	69604606 	.word	0x69604606
   3b814:	f006300c 	.word	0xf006300c
   3b818:	4286f805 	.word	0x4286f805
   3b81c:	ae97f47f 	.word	0xae97f47f
   3b820:	46286961 	.word	0x46286961
   3b824:	f7de310c 	.word	0xf7de310c
   3b828:	2800fbb9 	.word	0x2800fbb9
   3b82c:	ae8ff47f 	.word	0xae8ff47f
   3b830:	6f1a6963 	.word	0x6f1a6963
   3b834:	f57f07d7 	.word	0xf57f07d7
   3b838:	2605ae8a 	.word	0x2605ae8a
   3b83c:	4628e77f 	.word	0x4628e77f
   3b840:	fff0f005 	.word	0xfff0f005
   3b844:	69a04606 	.word	0x69a04606
   3b848:	f005300c 	.word	0xf005300c
   3b84c:	4286ffeb 	.word	0x4286ffeb
   3b850:	ae83f47f 	.word	0xae83f47f
   3b854:	462869a1 	.word	0x462869a1
   3b858:	f7de310c 	.word	0xf7de310c
   3b85c:	2800fb9f 	.word	0x2800fb9f
   3b860:	ae7bf47f 	.word	0xae7bf47f
   3b864:	6f1a69a3 	.word	0x6f1a69a3
   3b868:	f57f07d6 	.word	0xf57f07d6
   3b86c:	2606ae76 	.word	0x2606ae76
   3b870:	4628e765 	.word	0x4628e765
   3b874:	ffd6f005 	.word	0xffd6f005
   3b878:	68e04607 	.word	0x68e04607
   3b87c:	f005300c 	.word	0xf005300c
   3b880:	4287ffd1 	.word	0x4287ffd1
   3b884:	ae05f47f 	.word	0xae05f47f
   3b888:	462868e1 	.word	0x462868e1
   3b88c:	f7de310c 	.word	0xf7de310c
   3b890:	2800fb85 	.word	0x2800fb85
   3b894:	adfdf47f 	.word	0xadfdf47f
   3b898:	6f1a68e3 	.word	0x6f1a68e3
   3b89c:	f53f0791 	.word	0xf53f0791
   3b8a0:	e5f6af4e 	.word	0xe5f6af4e
   3b8a4:	f0054628 	.word	0xf0054628
   3b8a8:	4606ffbd 	.word	0x4606ffbd
   3b8ac:	300c6920 	.word	0x300c6920
   3b8b0:	ffb8f005 	.word	0xffb8f005
   3b8b4:	f47f4286 	.word	0xf47f4286
   3b8b8:	6921adf2 	.word	0x6921adf2
   3b8bc:	310c4628 	.word	0x310c4628
   3b8c0:	fb6cf7de 	.word	0xfb6cf7de
   3b8c4:	f47f2800 	.word	0xf47f2800
   3b8c8:	6923adea 	.word	0x6923adea
   3b8cc:	07926f1a 	.word	0x07926f1a
   3b8d0:	e5e4d499 	.word	0xe5e4d499
   3b8d4:	f0054628 	.word	0xf0054628
   3b8d8:	4606ffa5 	.word	0x4606ffa5
   3b8dc:	300c6960 	.word	0x300c6960
   3b8e0:	ffa0f005 	.word	0xffa0f005
   3b8e4:	f47f4286 	.word	0xf47f4286
   3b8e8:	6961ade0 	.word	0x6961ade0
   3b8ec:	310c4628 	.word	0x310c4628
   3b8f0:	fb54f7de 	.word	0xfb54f7de
   3b8f4:	f47f2800 	.word	0xf47f2800
   3b8f8:	6963add8 	.word	0x6963add8
   3b8fc:	07976f1a 	.word	0x07976f1a
   3b900:	e5d2d49b 	.word	0xe5d2d49b
   3b904:	f0054628 	.word	0xf0054628
   3b908:	4606ff8d 	.word	0x4606ff8d
   3b90c:	300c69a0 	.word	0x300c69a0
   3b910:	ff88f005 	.word	0xff88f005
   3b914:	f47f4286 	.word	0xf47f4286
   3b918:	69a1adce 	.word	0x69a1adce
   3b91c:	310c4628 	.word	0x310c4628
   3b920:	fb3cf7de 	.word	0xfb3cf7de
   3b924:	f47f2800 	.word	0xf47f2800
   3b928:	69a3adc6 	.word	0x69a3adc6
   3b92c:	07966f1a 	.word	0x07966f1a
   3b930:	e5c0d49d 	.word	0xe5c0d49d
   3b934:	f0054628 	.word	0xf0054628
   3b938:	4606ff75 	.word	0x4606ff75
   3b93c:	300c69e0 	.word	0x300c69e0
   3b940:	ff70f005 	.word	0xff70f005
   3b944:	f47f4286 	.word	0xf47f4286
   3b948:	69e1adbc 	.word	0x69e1adbc
   3b94c:	310c4628 	.word	0x310c4628
   3b950:	fb24f7de 	.word	0xfb24f7de
   3b954:	f47f2800 	.word	0xf47f2800
   3b958:	69e3adb4 	.word	0x69e3adb4
   3b95c:	07906f1a 	.word	0x07906f1a
   3b960:	adaff57f 	.word	0xadaff57f
   3b964:	e6ea2607 	.word	0xe6ea2607
   3b968:	f0054628 	.word	0xf0054628
   3b96c:	4606ff5b 	.word	0x4606ff5b
   3b970:	300c6a20 	.word	0x300c6a20
   3b974:	ff56f005 	.word	0xff56f005
   3b978:	f47f4286 	.word	0xf47f4286
   3b97c:	6a21ada8 	.word	0x6a21ada8
   3b980:	310c4628 	.word	0x310c4628
   3b984:	fb0af7de 	.word	0xfb0af7de
   3b988:	f47f2800 	.word	0xf47f2800
   3b98c:	6a23ada0 	.word	0x6a23ada0
   3b990:	07916f1a 	.word	0x07916f1a
   3b994:	ad9bf57f 	.word	0xad9bf57f
   3b998:	e6d02608 	.word	0xe6d02608
   3b99c:	f0054628 	.word	0xf0054628
   3b9a0:	4606ff41 	.word	0x4606ff41
   3b9a4:	300c69e0 	.word	0x300c69e0
   3b9a8:	ff3cf005 	.word	0xff3cf005
   3b9ac:	f47f4286 	.word	0xf47f4286
   3b9b0:	69e1adda 	.word	0x69e1adda
   3b9b4:	310c4628 	.word	0x310c4628
   3b9b8:	faf0f7de 	.word	0xfaf0f7de
   3b9bc:	f47f2800 	.word	0xf47f2800
   3b9c0:	69e3add2 	.word	0x69e3add2
   3b9c4:	07d06f1a 	.word	0x07d06f1a
   3b9c8:	e5ccd4cc 	.word	0xe5ccd4cc
   3b9cc:	f0054628 	.word	0xf0054628
   3b9d0:	4606ff29 	.word	0x4606ff29
   3b9d4:	300c6a20 	.word	0x300c6a20
   3b9d8:	ff24f005 	.word	0xff24f005
   3b9dc:	f47f4286 	.word	0xf47f4286
   3b9e0:	6a21adc8 	.word	0x6a21adc8
   3b9e4:	310c4628 	.word	0x310c4628
   3b9e8:	fad8f7de 	.word	0xfad8f7de
   3b9ec:	f47f2800 	.word	0xf47f2800
   3b9f0:	6a23adc0 	.word	0x6a23adc0
   3b9f4:	07d16f1a 	.word	0x07d16f1a
   3b9f8:	e5bad4ce 	.word	0xe5bad4ce
   3b9fc:	f0054628 	.word	0xf0054628
   3ba00:	4606ff11 	.word	0x4606ff11
   3ba04:	300c68a0 	.word	0x300c68a0
   3ba08:	ff0cf005 	.word	0xff0cf005
   3ba0c:	f47f4286 	.word	0xf47f4286
   3ba10:	68a1ad8c 	.word	0x68a1ad8c
   3ba14:	310c4628 	.word	0x310c4628
   3ba18:	fac0f7de 	.word	0xfac0f7de
   3ba1c:	f47f2800 	.word	0xf47f2800
   3ba20:	68a3ad84 	.word	0x68a3ad84
   3ba24:	07d06f1a 	.word	0x07d06f1a
   3ba28:	ad7ff57f 	.word	0xad7ff57f
   3ba2c:	e6862602 	.word	0xe6862602
   3ba30:	f0054628 	.word	0xf0054628
   3ba34:	4606fef7 	.word	0x4606fef7
   3ba38:	300c68a0 	.word	0x300c68a0
   3ba3c:	fef2f005 	.word	0xfef2f005
   3ba40:	f47f4286 	.word	0xf47f4286
   3ba44:	68a1ad20 	.word	0x68a1ad20
   3ba48:	310c4628 	.word	0x310c4628
   3ba4c:	faa6f7de 	.word	0xfaa6f7de
   3ba50:	f47f2800 	.word	0xf47f2800
   3ba54:	68a3ad18 	.word	0x68a3ad18
   3ba58:	07906f1a 	.word	0x07906f1a
   3ba5c:	e512d4e6 	.word	0xe512d4e6
   3ba60:	20026210 	.word	0x20026210
   3ba64:	0004c3f0 	.word	0x0004c3f0
   3ba68:	0004c3ec 	.word	0x0004c3ec
   3ba6c:	0004c400 	.word	0x0004c400
   3ba70:	2002620c 	.word	0x2002620c
   3ba74:	f0054628 	.word	0xf0054628
   3ba78:	4606fed5 	.word	0x4606fed5
   3ba7c:	300c6860 	.word	0x300c6860
   3ba80:	fed0f005 	.word	0xfed0f005
   3ba84:	f47f4286 	.word	0xf47f4286
   3ba88:	6861acf8 	.word	0x6861acf8
   3ba8c:	310c4628 	.word	0x310c4628
   3ba90:	fa84f7de 	.word	0xfa84f7de
   3ba94:	f47f2800 	.word	0xf47f2800
   3ba98:	6863acf0 	.word	0x6863acf0
   3ba9c:	07966f1a 	.word	0x07966f1a
   3baa0:	acebf57f 	.word	0xacebf57f
   3baa4:	e64a2601 	.word	0xe64a2601
   3baa8:	f0054628 	.word	0xf0054628
   3baac:	4606febb 	.word	0x4606febb
   3bab0:	300c6860 	.word	0x300c6860
   3bab4:	feb6f005 	.word	0xfeb6f005
   3bab8:	f47f4286 	.word	0xf47f4286
   3babc:	6861ad30 	.word	0x6861ad30
   3bac0:	310c4628 	.word	0x310c4628
   3bac4:	fa6af7de 	.word	0xfa6af7de
   3bac8:	f47f2800 	.word	0xf47f2800
   3bacc:	6863ad28 	.word	0x6863ad28
   3bad0:	07d66f1a 	.word	0x07d66f1a
   3bad4:	e522d4e6 	.word	0xe522d4e6
   3bad8:	f0054608 	.word	0xf0054608
   3badc:	4606fea3 	.word	0x4606fea3
   3bae0:	300c6820 	.word	0x300c6820
   3bae4:	fe9ef005 	.word	0xfe9ef005
   3bae8:	f47f4286 	.word	0xf47f4286
   3baec:	6821acc0 	.word	0x6821acc0
   3baf0:	310c4628 	.word	0x310c4628
   3baf4:	fa52f7de 	.word	0xfa52f7de
   3baf8:	28004606 	.word	0x28004606
   3bafc:	acb7f47f 	.word	0xacb7f47f
   3bb00:	6f1a6823 	.word	0x6f1a6823
   3bb04:	f53f0797 	.word	0xf53f0797
   3bb08:	e4b0ae1a 	.word	0xe4b0ae1a
   3bb0c:	f0054608 	.word	0xf0054608
   3bb10:	4606fe89 	.word	0x4606fe89
   3bb14:	300c6820 	.word	0x300c6820
   3bb18:	fe84f005 	.word	0xfe84f005
   3bb1c:	f47f4286 	.word	0xf47f4286
   3bb20:	6821acf8 	.word	0x6821acf8
   3bb24:	310c4628 	.word	0x310c4628
   3bb28:	fa38f7de 	.word	0xfa38f7de
   3bb2c:	28004606 	.word	0x28004606
   3bb30:	aceff47f 	.word	0xaceff47f
   3bb34:	6f1a6823 	.word	0x6f1a6823
   3bb38:	f53f07d7 	.word	0xf53f07d7
   3bb3c:	e4e8ae00 	.word	0xe4e8ae00
   3bb40:	30fff04f 	.word	0x30fff04f
   3bb44:	480b4770 	.word	0x480b4770
   3bb48:	fe6cf005 	.word	0xfe6cf005
   3bb4c:	4602490a 	.word	0x4602490a
   3bb50:	f0054808 	.word	0xf0054808
   3bb54:	b930fe95 	.word	0xb930fe95
   3bb58:	f7e92008 	.word	0xf7e92008
   3bb5c:	f854ff8b 	.word	0xf854ff8b
   3bb60:	68583026 	.word	0x68583026
   3bb64:	2005e47b 	.word	0x2005e47b
   3bb68:	ff84f7e9 	.word	0xff84f7e9
   3bb6c:	3026f854 	.word	0x3026f854
   3bb70:	e4746858 	.word	0xe4746858
   3bb74:	0004c444 	.word	0x0004c444
   3bb78:	20026210 	.word	0x20026210

0003bb7c <bsd_platform_getaddrinfo>:
   3bb7c:	bdb0f7f7 	.word	0xbdb0f7f7

0003bb80 <bsd_platform_freeaddrinfo>:
   3bb80:	bea4f7f7 	.word	0xbea4f7f7

0003bb84 <bsd_platform_poll>:
   3bb84:	43f0e92d 	.word	0x43f0e92d
   3bb88:	72e2ea42 	.word	0x72e2ea42
   3bb8c:	9200b083 	.word	0x9200b083
   3bb90:	d0482800 	.word	0xd0482800
   3bb94:	2b071e4b 	.word	0x2b071e4b
   3bb98:	4680d845 	.word	0x4680d845
   3bb9c:	24004605 	.word	0x24004605
   3bba0:	07c1eb00 	.word	0x07c1eb00
   3bba4:	682888ab 	.word	0x682888ab
   3bba8:	0303f003 	.word	0x0303f003
   3bbac:	f043a901 	.word	0xf043a901
   3bbb0:	f7f6061c 	.word	0xf7f6061c
   3bbb4:	9b01fc9d 	.word	0x9b01fc9d
   3bbb8:	40333508 	.word	0x40333508
   3bbbc:	3c02f825 	.word	0x3c02f825
   3bbc0:	3401b103 	.word	0x3401b103
   3bbc4:	d1ed42af 	.word	0xd1ed42af
   3bbc8:	4669bb9c 	.word	0x4669bb9c
   3bbcc:	f7e94640 	.word	0xf7e94640
   3bbd0:	4607fec1 	.word	0x4607fec1
   3bbd4:	283cb108 	.word	0x283cb108
   3bbd8:	46c1d11d 	.word	0x46c1d11d
   3bbdc:	f8b92600 	.word	0xf8b92600
   3bbe0:	f8d93004 	.word	0xf8d93004
   3bbe4:	f0030000 	.word	0xf0030000
   3bbe8:	a9010303 	.word	0xa9010303
   3bbec:	041cf043 	.word	0x041cf043
   3bbf0:	fc7ef7f6 	.word	0xfc7ef7f6
   3bbf4:	f1099b01 	.word	0xf1099b01
   3bbf8:	40230908 	.word	0x40230908
   3bbfc:	3c02f829 	.word	0x3c02f829
   3bc00:	3601b103 	.word	0x3601b103
   3bc04:	d1ea454d 	.word	0xd1ea454d
   3bc08:	2f00b90e 	.word	0x2f00b90e
   3bc0c:	4630d0dd 	.word	0x4630d0dd
   3bc10:	e8bdb003 	.word	0xe8bdb003
   3bc14:	202383f0 	.word	0x202383f0
   3bc18:	ff2cf7e9 	.word	0xff2cf7e9
   3bc1c:	30fff04f 	.word	0x30fff04f
   3bc20:	e8bdb003 	.word	0xe8bdb003
   3bc24:	201683f0 	.word	0x201683f0
   3bc28:	ff24f7e9 	.word	0xff24f7e9
   3bc2c:	30fff04f 	.word	0x30fff04f
   3bc30:	4620e7ee 	.word	0x4620e7ee
   3bc34:	bf00e7ec 	.word	0xbf00e7ec

0003bc38 <bsd_platform_fcntl>:
   3bc38:	4b06b508 	.word	0x4b06b508
   3bc3c:	d0034383 	.word	0xd0034383
   3bc40:	4008e8bd 	.word	0x4008e8bd
   3bc44:	bd00f7f6 	.word	0xbd00f7f6
   3bc48:	f7e9202d 	.word	0xf7e9202d
   3bc4c:	f04fff13 	.word	0xf04fff13
   3bc50:	bd0830ff 	.word	0xbd0830ff
   3bc54:	49765432 	.word	0x49765432

0003bc58 <stream_handler_init>:
   3bc58:	4604b510 	.word	0x4604b510
   3bc5c:	f7fd200c 	.word	0xf7fd200c
   3bc60:	60e0fed1 	.word	0x60e0fed1
   3bc64:	2300b128 	.word	0x2300b128
   3bc68:	e8bd6123 	.word	0xe8bd6123
   3bc6c:	f7f84010 	.word	0xf7f84010
   3bc70:	2004b9c7 	.word	0x2004b9c7
   3bc74:	bf00bd10 	.word	0xbf00bd10

0003bc78 <stream_handler_put>:
   3bc78:	4606b570 	.word	0x4606b570
   3bc7c:	460d2014 	.word	0x460d2014
   3bc80:	fec0f7fd 	.word	0xfec0f7fd
   3bc84:	682bb178 	.word	0x682bb178
   3bc88:	60434604 	.word	0x60434604
   3bc8c:	4601686b 	.word	0x4601686b
   3bc90:	68eb6083 	.word	0x68eb6083
   3bc94:	68ab60c3 	.word	0x68ab60c3
   3bc98:	68f06103 	.word	0x68f06103
   3bc9c:	f9baf7f8 	.word	0xf9baf7f8
   3bca0:	6868b920 	.word	0x6868b920
   3bca4:	f04fbd70 	.word	0xf04fbd70
   3bca8:	bd7030ff 	.word	0xbd7030ff
   3bcac:	f7fd4620 	.word	0xf7fd4620
   3bcb0:	f04ffec7 	.word	0xf04ffec7
   3bcb4:	bd7030ff 	.word	0xbd7030ff

0003bcb8 <stream_handler_get>:
   3bcb8:	4ff0e92d 	.word	0x4ff0e92d
   3bcbc:	b0874682 	.word	0xb0874682
   3bcc0:	468968c0 	.word	0x468968c0
   3bcc4:	f7f84693 	.word	0xf7f84693
   3bcc8:	2800f9c5 	.word	0x2800f9c5
   3bccc:	4605d072 	.word	0x4605d072
   3bcd0:	0008f8d9 	.word	0x0008f8d9
   3bcd4:	692bb120 	.word	0x692bb120
   3bcd8:	68eab113 	.word	0x68eab113
   3bcdc:	d15c2a00 	.word	0xd15c2a00
   3bce0:	f8c92300 	.word	0xf8c92300
   3bce4:	f8d9300c 	.word	0xf8d9300c
   3bce8:	f8d92000 	.word	0xf8d92000
   3bcec:	f8da8004 	.word	0xf8da8004
   3bcf0:	92011010 	.word	0x92011010
   3bcf4:	0f00f1b8 	.word	0x0f00f1b8
   3bcf8:	f00bd05a 	.word	0xf00bd05a
   3bcfc:	24000308 	.word	0x24000308
   3bd00:	e0109300 	.word	0xe0109300
   3bd04:	3010f8da 	.word	0x3010f8da
   3bd08:	f8ca443b 	.word	0xf8ca443b
   3bd0c:	46283010 	.word	0x46283010
   3bd10:	f9a8f7f8 	.word	0xf9a8f7f8
   3bd14:	4605443c 	.word	0x4605443c
   3bd18:	d0382800 	.word	0xd0382800
   3bd1c:	d93645a0 	.word	0xd93645a0
   3bd20:	f8d92100 	.word	0xf8d92100
   3bd24:	68ae2000 	.word	0x68ae2000
   3bd28:	0b04eba8 	.word	0x0b04eba8
   3bd2c:	455e1a76 	.word	0x455e1a76
   3bd30:	bf284637 	.word	0xbf284637
   3bd34:	b132465f 	.word	0xb132465f
   3bd38:	9b016868 	.word	0x9b016868
   3bd3c:	463a4401 	.word	0x463a4401
   3bd40:	f7de1918 	.word	0xf7de1918
   3bd44:	9b00f8b5 	.word	0x9b00f8b5
   3bd48:	d1e02b00 	.word	0xd1e02b00
   3bd4c:	d8d9455e 	.word	0xd8d9455e
   3bd50:	000cf8da 	.word	0x000cf8da
   3bd54:	f974f7f8 	.word	0xf974f7f8
   3bd58:	b1704606 	.word	0xb1704606
   3bd5c:	2301e9d0 	.word	0x2301e9d0
   3bd60:	0103e9d0 	.word	0x0103e9d0
   3bd64:	2302e9cd 	.word	0x2302e9cd
   3bd68:	1004e9cd 	.word	0x1004e9cd
   3bd6c:	3101e9da 	.word	0x3101e9da
   3bd70:	4798a802 	.word	0x4798a802
   3bd74:	f7fd4630 	.word	0xf7fd4630
   3bd78:	2300fe63 	.word	0x2300fe63
   3bd7c:	f8ca4628 	.word	0xf8ca4628
   3bd80:	f7f83010 	.word	0xf7f83010
   3bd84:	443cf96f 	.word	0x443cf96f
   3bd88:	28004605 	.word	0x28004605
   3bd8c:	4620d1c6 	.word	0x4620d1c6
   3bd90:	4004f8c9 	.word	0x4004f8c9
   3bd94:	e8bdb007 	.word	0xe8bdb007
   3bd98:	f8d98ff0 	.word	0xf8d98ff0
   3bd9c:	429a300c 	.word	0x429a300c
   3bda0:	461abf28 	.word	0x461abf28
   3bda4:	200cf8c9 	.word	0x200cf8c9
   3bda8:	f7de6929 	.word	0xf7de6929
   3bdac:	e79af881 	.word	0xe79af881
   3bdb0:	e7ec4644 	.word	0xe7ec4644
   3bdb4:	30fff04f 	.word	0x30fff04f
   3bdb8:	bf00e7ec 	.word	0xbf00e7ec

0003bdbc <stream_handler_available>:
   3bdbc:	4604b510 	.word	0x4604b510
   3bdc0:	f7f868c0 	.word	0xf7f868c0
   3bdc4:	b150f947 	.word	0xb150f947
   3bdc8:	42646924 	.word	0x42646924
   3bdcc:	441c6883 	.word	0x441c6883
   3bdd0:	f948f7f8 	.word	0xf948f7f8
   3bdd4:	d1f92800 	.word	0xd1f92800
   3bdd8:	70e4ea24 	.word	0x70e4ea24
   3bddc:	f04fbd10 	.word	0xf04fbd10
   3bde0:	bd1030ff 	.word	0xbd1030ff

0003bde4 <stream_handler_flush>:
   3bde4:	4605b530 	.word	0x4605b530
   3bde8:	b08568c0 	.word	0xb08568c0
   3bdec:	e01ab9a8 	.word	0xe01ab9a8
   3bdf0:	f7f868e8 	.word	0xf7f868e8
   3bdf4:	4604f925 	.word	0x4604f925
   3bdf8:	e9d0b170 	.word	0xe9d0b170
   3bdfc:	e9d40101 	.word	0xe9d40101
   3be00:	e9cd3203 	.word	0xe9cd3203
   3be04:	e9cd0100 	.word	0xe9cd0100
   3be08:	e9d52302 	.word	0xe9d52302
   3be0c:	46683101 	.word	0x46683101
   3be10:	46204798 	.word	0x46204798
   3be14:	fe14f7fd 	.word	0xfe14f7fd
   3be18:	f7f868e8 	.word	0xf7f868e8
   3be1c:	2800f921 	.word	0x2800f921
   3be20:	b005d1e6 	.word	0xb005d1e6
   3be24:	2008bd30 	.word	0x2008bd30
   3be28:	bd30b005 	.word	0xbd30b005

0003be2c <stream_handler_free>:
   3be2c:	4605b530 	.word	0x4605b530
   3be30:	b08568c0 	.word	0xb08568c0
   3be34:	e01cb9a0 	.word	0xe01cb9a0
   3be38:	f902f7f8 	.word	0xf902f7f8
   3be3c:	b1704604 	.word	0xb1704604
   3be40:	0101e9d0 	.word	0x0101e9d0
   3be44:	3203e9d4 	.word	0x3203e9d4
   3be48:	0100e9cd 	.word	0x0100e9cd
   3be4c:	2302e9cd 	.word	0x2302e9cd
   3be50:	3101e9d5 	.word	0x3101e9d5
   3be54:	47984668 	.word	0x47984668
   3be58:	f7fd4620 	.word	0xf7fd4620
   3be5c:	68e8fdf1 	.word	0x68e8fdf1
   3be60:	f8fef7f8 	.word	0xf8fef7f8
   3be64:	68e84604 	.word	0x68e84604
   3be68:	d1e52c00 	.word	0xd1e52c00
   3be6c:	fde8f7fd 	.word	0xfde8f7fd
   3be70:	b00560ec 	.word	0xb00560ec
   3be74:	bf00bd30 	.word	0xbf00bd30

0003be78 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3be78:	4a07      	ldr	r2, [pc, #28]	; (3be98 <SystemInit+0x20>)
   3be7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3be7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3be82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3be86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3be8a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3be8e:	4b03      	ldr	r3, [pc, #12]	; (3be9c <SystemInit+0x24>)
   3be90:	4a03      	ldr	r2, [pc, #12]	; (3bea0 <SystemInit+0x28>)
   3be92:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3be94:	4770      	bx	lr
   3be96:	bf00      	nop
   3be98:	e000ed00 	.word	0xe000ed00
   3be9c:	20031bac 	.word	0x20031bac
   3bea0:	03d09000 	.word	0x03d09000

0003bea4 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
__STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3bea4:	4a04      	ldr	r2, [pc, #16]	; (3beb8 <nvmc_word_write+0x14>)
   3bea6:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3beaa:	07db      	lsls	r3, r3, #31
   3beac:	d5fb      	bpl.n	3bea6 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3beae:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3beb0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3beb4:	4770      	bx	lr
   3beb6:	bf00      	nop
   3beb8:	40039000 	.word	0x40039000

0003bebc <partial_word_create>:
{
   3bebc:	b513      	push	{r0, r1, r4, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   3bebe:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   3bec2:	f1c0 0304 	rsb	r3, r0, #4
   3bec6:	4293      	cmp	r3, r2
   3bec8:	d205      	bcs.n	3bed6 <partial_word_create+0x1a>
   3beca:	4b0b      	ldr	r3, [pc, #44]	; (3bef8 <partial_word_create+0x3c>)
   3becc:	4a0b      	ldr	r2, [pc, #44]	; (3befc <partial_word_create+0x40>)
   3bece:	2192      	movs	r1, #146	; 0x92
   3bed0:	480b      	ldr	r0, [pc, #44]	; (3bf00 <partial_word_create+0x44>)
   3bed2:	f004 fd01 	bl	408d8 <__assert_func>
    value32 = 0xFFFFFFFF;
   3bed6:	f04f 33ff 	mov.w	r3, #4294967295
   3beda:	ac02      	add	r4, sp, #8
   3bedc:	f844 3d04 	str.w	r3, [r4, #-4]!
    for (uint32_t i = 0; i < bytes_count; i++)
   3bee0:	2300      	movs	r3, #0
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   3bee2:	4404      	add	r4, r0
    for (uint32_t i = 0; i < bytes_count; i++)
   3bee4:	4293      	cmp	r3, r2
   3bee6:	d102      	bne.n	3beee <partial_word_create+0x32>
}
   3bee8:	9801      	ldr	r0, [sp, #4]
   3beea:	b002      	add	sp, #8
   3beec:	bd10      	pop	{r4, pc}
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   3beee:	5cc8      	ldrb	r0, [r1, r3]
   3bef0:	54e0      	strb	r0, [r4, r3]
    for (uint32_t i = 0; i < bytes_count; i++)
   3bef2:	3301      	adds	r3, #1
   3bef4:	e7f6      	b.n	3bee4 <partial_word_create+0x28>
   3bef6:	bf00      	nop
   3bef8:	00051f83 	.word	0x00051f83
   3befc:	00051ee8 	.word	0x00051ee8
   3bf00:	00051fa3 	.word	0x00051fa3

0003bf04 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3bf04:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3bf08:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   3bf0a:	d305      	bcc.n	3bf18 <nrfx_nvmc_page_erase+0x14>
   3bf0c:	4b0d      	ldr	r3, [pc, #52]	; (3bf44 <nrfx_nvmc_page_erase+0x40>)
   3bf0e:	4a0e      	ldr	r2, [pc, #56]	; (3bf48 <nrfx_nvmc_page_erase+0x44>)
   3bf10:	21d1      	movs	r1, #209	; 0xd1
   3bf12:	480e      	ldr	r0, [pc, #56]	; (3bf4c <nrfx_nvmc_page_erase+0x48>)
   3bf14:	f004 fce0 	bl	408d8 <__assert_func>
    return !(addr % flash_page_size_get());
   3bf18:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   3bf1c:	b97b      	cbnz	r3, 3bf3e <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
__STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                 nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3bf1e:	2202      	movs	r2, #2
   3bf20:	4b0b      	ldr	r3, [pc, #44]	; (3bf50 <nrfx_nvmc_page_erase+0x4c>)
   3bf22:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3bf26:	f04f 32ff 	mov.w	r2, #4294967295
   3bf2a:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3bf2c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3bf30:	07d2      	lsls	r2, r2, #31
   3bf32:	d5fb      	bpl.n	3bf2c <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   3bf34:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3bf36:	4807      	ldr	r0, [pc, #28]	; (3bf54 <nrfx_nvmc_page_erase+0x50>)
   3bf38:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3bf3c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3bf3e:	4806      	ldr	r0, [pc, #24]	; (3bf58 <nrfx_nvmc_page_erase+0x54>)
   3bf40:	e7fc      	b.n	3bf3c <nrfx_nvmc_page_erase+0x38>
   3bf42:	bf00      	nop
   3bf44:	00051f3c 	.word	0x00051f3c
   3bf48:	00051efc 	.word	0x00051efc
   3bf4c:	00051fa3 	.word	0x00051fa3
   3bf50:	40039000 	.word	0x40039000
   3bf54:	0bad0000 	.word	0x0bad0000
   3bf58:	0bad000a 	.word	0x0bad000a

0003bf5c <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3bf5c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3bf60:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   3bf62:	d306      	bcc.n	3bf72 <nrfx_nvmc_word_write+0x16>
   3bf64:	f240 1141 	movw	r1, #321	; 0x141
   3bf68:	4b0a      	ldr	r3, [pc, #40]	; (3bf94 <nrfx_nvmc_word_write+0x38>)
   3bf6a:	4a0b      	ldr	r2, [pc, #44]	; (3bf98 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3bf6c:	480b      	ldr	r0, [pc, #44]	; (3bf9c <nrfx_nvmc_word_write+0x40>)
   3bf6e:	f004 fcb3 	bl	408d8 <__assert_func>
   3bf72:	f010 0403 	ands.w	r4, r0, #3
   3bf76:	d004      	beq.n	3bf82 <nrfx_nvmc_word_write+0x26>
   3bf78:	4b09      	ldr	r3, [pc, #36]	; (3bfa0 <nrfx_nvmc_word_write+0x44>)
   3bf7a:	4a07      	ldr	r2, [pc, #28]	; (3bf98 <nrfx_nvmc_word_write+0x3c>)
   3bf7c:	f44f 71a1 	mov.w	r1, #322	; 0x142
   3bf80:	e7f4      	b.n	3bf6c <nrfx_nvmc_word_write+0x10>
   3bf82:	2301      	movs	r3, #1
   3bf84:	4d07      	ldr	r5, [pc, #28]	; (3bfa4 <nrfx_nvmc_word_write+0x48>)
   3bf86:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3bf8a:	f7ff ff8b 	bl	3bea4 <nvmc_word_write>
   3bf8e:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   3bf92:	bd38      	pop	{r3, r4, r5, pc}
   3bf94:	00051f3c 	.word	0x00051f3c
   3bf98:	00051f11 	.word	0x00051f11
   3bf9c:	00051fa3 	.word	0x00051fa3
   3bfa0:	00051f5a 	.word	0x00051f5a
   3bfa4:	40039000 	.word	0x40039000

0003bfa8 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3bfa8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bfb0:	4604      	mov	r4, r0
   3bfb2:	460e      	mov	r6, r1
   3bfb4:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   3bfb6:	d306      	bcc.n	3bfc6 <nrfx_nvmc_bytes_write+0x1e>
   3bfb8:	4b20      	ldr	r3, [pc, #128]	; (3c03c <nrfx_nvmc_bytes_write+0x94>)
   3bfba:	4a21      	ldr	r2, [pc, #132]	; (3c040 <nrfx_nvmc_bytes_write+0x98>)
   3bfbc:	f240 114d 	movw	r1, #333	; 0x14d
   3bfc0:	4820      	ldr	r0, [pc, #128]	; (3c044 <nrfx_nvmc_bytes_write+0x9c>)
   3bfc2:	f004 fc89 	bl	408d8 <__assert_func>
   3bfc6:	2201      	movs	r2, #1
   3bfc8:	4b1f      	ldr	r3, [pc, #124]	; (3c048 <nrfx_nvmc_bytes_write+0xa0>)
   3bfca:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   3bfce:	f010 0303 	ands.w	r3, r0, #3
   3bfd2:	d010      	beq.n	3bff6 <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   3bfd4:	f1c3 0704 	rsb	r7, r3, #4
   3bfd8:	42af      	cmp	r7, r5
   3bfda:	bf28      	it	cs
   3bfdc:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   3bfde:	463a      	mov	r2, r7
   3bfe0:	eba0 0803 	sub.w	r8, r0, r3
   3bfe4:	f7ff ff6a 	bl	3bebc <partial_word_create>
   3bfe8:	4601      	mov	r1, r0
   3bfea:	4640      	mov	r0, r8
   3bfec:	f7ff ff5a 	bl	3bea4 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   3bff0:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   3bff2:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   3bff4:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   3bff6:	4637      	mov	r7, r6
   3bff8:	f025 0803 	bic.w	r8, r5, #3
   3bffc:	44b0      	add	r8, r6
   3bffe:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   3c002:	45b8      	cmp	r8, r7
   3c004:	d113      	bne.n	3c02e <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   3c006:	f015 0203 	ands.w	r2, r5, #3
   3c00a:	d00a      	beq.n	3c022 <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   3c00c:	f025 0103 	bic.w	r1, r5, #3
   3c010:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   3c012:	4620      	mov	r0, r4
   3c014:	4431      	add	r1, r6
   3c016:	f7ff ff51 	bl	3bebc <partial_word_create>
   3c01a:	4601      	mov	r1, r0
   3c01c:	4620      	mov	r0, r4
   3c01e:	f7ff ff41 	bl	3bea4 <nvmc_word_write>
   3c022:	2200      	movs	r2, #0
   3c024:	4b08      	ldr	r3, [pc, #32]	; (3c048 <nrfx_nvmc_bytes_write+0xa0>)
   3c026:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   3c02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c02e:	eb09 0007 	add.w	r0, r9, r7
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   3c032:	f857 1b04 	ldr.w	r1, [r7], #4
   3c036:	f7ff ff35 	bl	3bea4 <nvmc_word_write>
   3c03a:	e7e2      	b.n	3c002 <nrfx_nvmc_bytes_write+0x5a>
   3c03c:	00051f3c 	.word	0x00051f3c
   3c040:	00051f26 	.word	0x00051f26
   3c044:	00051fa3 	.word	0x00051fa3
   3c048:	40039000 	.word	0x40039000

0003c04c <nrf_gpio_pin_port_decode.isra.1.part.2>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   3c04c:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c04e:	4a03      	ldr	r2, [pc, #12]	; (3c05c <nrf_gpio_pin_port_decode.isra.1.part.2+0x10>)
   3c050:	4b03      	ldr	r3, [pc, #12]	; (3c060 <nrf_gpio_pin_port_decode.isra.1.part.2+0x14>)
   3c052:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   3c056:	4803      	ldr	r0, [pc, #12]	; (3c064 <nrf_gpio_pin_port_decode.isra.1.part.2+0x18>)
   3c058:	f004 fc3e 	bl	408d8 <__assert_func>
   3c05c:	00052061 	.word	0x00052061
   3c060:	0004ebd7 	.word	0x0004ebd7
   3c064:	0004ebe5 	.word	0x0004ebe5

0003c068 <nrf_pwm_sequence_set>:
}

__STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type * p_reg,
                                          uint8_t                    seq_id,
                                          nrf_pwm_sequence_t const * p_seq)
{
   3c068:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   3c06a:	b932      	cbnz	r2, 3c07a <nrf_pwm_sequence_set+0x12>
   3c06c:	f240 21a2 	movw	r1, #674	; 0x2a2
   3c070:	4b1c      	ldr	r3, [pc, #112]	; (3c0e4 <nrf_pwm_sequence_set+0x7c>)
   3c072:	4a1d      	ldr	r2, [pc, #116]	; (3c0e8 <nrf_pwm_sequence_set+0x80>)
__STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type * p_reg,
                                         uint8_t          seq_id,
                                         uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   3c074:	481d      	ldr	r0, [pc, #116]	; (3c0ec <nrf_pwm_sequence_set+0x84>)
   3c076:	f004 fc2f 	bl	408d8 <__assert_func>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   3c07a:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   3c07c:	b923      	cbnz	r3, 3c088 <nrf_pwm_sequence_set+0x20>
   3c07e:	4b1c      	ldr	r3, [pc, #112]	; (3c0f0 <nrf_pwm_sequence_set+0x88>)
   3c080:	4a1c      	ldr	r2, [pc, #112]	; (3c0f4 <nrf_pwm_sequence_set+0x8c>)
   3c082:	f240 21af 	movw	r1, #687	; 0x2af
   3c086:	e7f5      	b.n	3c074 <nrf_pwm_sequence_set+0xc>
   3c088:	eb00 1441 	add.w	r4, r0, r1, lsl #5
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   3c08c:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   3c090:	8893      	ldrh	r3, [r2, #4]
__STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                         uint8_t  seq_id,
                                         uint16_t length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   3c092:	b923      	cbnz	r3, 3c09e <nrf_pwm_sequence_set+0x36>
   3c094:	4b18      	ldr	r3, [pc, #96]	; (3c0f8 <nrf_pwm_sequence_set+0x90>)
   3c096:	4a19      	ldr	r2, [pc, #100]	; (3c0fc <nrf_pwm_sequence_set+0x94>)
   3c098:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   3c09c:	e7ea      	b.n	3c074 <nrf_pwm_sequence_set+0xc>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   3c09e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   3c0a2:	d004      	beq.n	3c0ae <nrf_pwm_sequence_set+0x46>
   3c0a4:	4b16      	ldr	r3, [pc, #88]	; (3c100 <nrf_pwm_sequence_set+0x98>)
   3c0a6:	4a15      	ldr	r2, [pc, #84]	; (3c0fc <nrf_pwm_sequence_set+0x94>)
   3c0a8:	f240 21b9 	movw	r1, #697	; 0x2b9
   3c0ac:	e7e2      	b.n	3c074 <nrf_pwm_sequence_set+0xc>
    p_reg->SEQ[seq_id].CNT = length;
   3c0ae:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   3c0b2:	6893      	ldr	r3, [r2, #8]
__STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                             uint8_t  seq_id,
                                             uint32_t refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   3c0b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   3c0b8:	d304      	bcc.n	3c0c4 <nrf_pwm_sequence_set+0x5c>
   3c0ba:	4b12      	ldr	r3, [pc, #72]	; (3c104 <nrf_pwm_sequence_set+0x9c>)
   3c0bc:	4a12      	ldr	r2, [pc, #72]	; (3c108 <nrf_pwm_sequence_set+0xa0>)
   3c0be:	f240 21c2 	movw	r1, #706	; 0x2c2
   3c0c2:	e7d7      	b.n	3c074 <nrf_pwm_sequence_set+0xc>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   3c0c4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   3c0c8:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   3c0cc:	68d3      	ldr	r3, [r2, #12]
__STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                               uint8_t  seq_id,
                                               uint32_t end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   3c0ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   3c0d2:	d304      	bcc.n	3c0de <nrf_pwm_sequence_set+0x76>
   3c0d4:	4b0d      	ldr	r3, [pc, #52]	; (3c10c <nrf_pwm_sequence_set+0xa4>)
   3c0d6:	4a0e      	ldr	r2, [pc, #56]	; (3c110 <nrf_pwm_sequence_set+0xa8>)
   3c0d8:	f240 21cb 	movw	r1, #715	; 0x2cb
   3c0dc:	e7ca      	b.n	3c074 <nrf_pwm_sequence_set+0xc>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   3c0de:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   3c0e2:	bd10      	pop	{r4, pc}
   3c0e4:	000520c3 	.word	0x000520c3
   3c0e8:	00051ff2 	.word	0x00051ff2
   3c0ec:	0004ed24 	.word	0x0004ed24
   3c0f0:	000520d8 	.word	0x000520d8
   3c0f4:	00052007 	.word	0x00052007
   3c0f8:	000520f0 	.word	0x000520f0
   3c0fc:	0005201b 	.word	0x0005201b
   3c100:	000520fc 	.word	0x000520fc
   3c104:	0005211a 	.word	0x0005211a
   3c108:	0005202f 	.word	0x0005202f
   3c10c:	0005213b 	.word	0x0005213b
   3c110:	00052047 	.word	0x00052047

0003c114 <nrfx_pwm_init>:


nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const * const p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler)
{
   3c114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c118:	b085      	sub	sp, #20
    NRFX_ASSERT(p_config);
   3c11a:	b929      	cbnz	r1, 3c128 <nrfx_pwm_init+0x14>
   3c11c:	2177      	movs	r1, #119	; 0x77
   3c11e:	4b3d      	ldr	r3, [pc, #244]	; (3c214 <nrfx_pwm_init+0x100>)
   3c120:	4a3d      	ldr	r2, [pc, #244]	; (3c218 <nrfx_pwm_init+0x104>)
   3c122:	483e      	ldr	r0, [pc, #248]	; (3c21c <nrfx_pwm_init+0x108>)
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   3c124:	f004 fbd8 	bl	408d8 <__assert_func>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3c128:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3c12a:	4c3d      	ldr	r4, [pc, #244]	; (3c220 <nrfx_pwm_init+0x10c>)
   3c12c:	ea4f 08c6 	mov.w	r8, r6, lsl #3
   3c130:	eb04 0308 	add.w	r3, r4, r8
   3c134:	791b      	ldrb	r3, [r3, #4]
   3c136:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   3c13a:	2b00      	cmp	r3, #0
   3c13c:	d167      	bne.n	3c20e <nrfx_pwm_init+0xfa>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   3c13e:	f04f 39ff 	mov.w	r9, #4294967295
   3c142:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c146:	f04f 0e03 	mov.w	lr, #3
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   3c14a:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
   3c14e:	462a      	mov	r2, r5
   3c150:	4d34      	ldr	r5, [pc, #208]	; (3c224 <nrfx_pwm_init+0x110>)
        uint8_t output_pin = p_config->output_pins[i];
   3c152:	5c8f      	ldrb	r7, [r1, r2]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   3c154:	2fff      	cmp	r7, #255	; 0xff
   3c156:	d016      	beq.n	3c186 <nrfx_pwm_init+0x72>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   3c158:	f027 0380 	bic.w	r3, r7, #128	; 0x80
            if (inverted)
   3c15c:	063f      	lsls	r7, r7, #24
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   3c15e:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
            if (inverted)
   3c162:	d50a      	bpl.n	3c17a <nrfx_pwm_init+0x66>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c164:	2b1f      	cmp	r3, #31
   3c166:	d901      	bls.n	3c16c <nrfx_pwm_init+0x58>
   3c168:	f7ff ff70 	bl	3c04c <nrf_gpio_pin_port_decode.isra.1.part.2>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3c16c:	fa0c f703 	lsl.w	r7, ip, r3
    p_reg->OUTSET = set_mask;
   3c170:	60af      	str	r7, [r5, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c172:	3380      	adds	r3, #128	; 0x80
   3c174:	f845 e023 	str.w	lr, [r5, r3, lsl #2]
   3c178:	e007      	b.n	3c18a <nrfx_pwm_init+0x76>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c17a:	2b1f      	cmp	r3, #31
   3c17c:	d8f4      	bhi.n	3c168 <nrfx_pwm_init+0x54>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3c17e:	fa0c f703 	lsl.w	r7, ip, r3
    p_reg->OUTCLR = clr_mask;
   3c182:	60ef      	str	r7, [r5, #12]
   3c184:	e7f5      	b.n	3c172 <nrfx_pwm_init+0x5e>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   3c186:	f84d 9022 	str.w	r9, [sp, r2, lsl #2]
   3c18a:	3201      	adds	r2, #1
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   3c18c:	2a04      	cmp	r2, #4
   3c18e:	d1e0      	bne.n	3c152 <nrfx_pwm_init+0x3e>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   3c190:	6800      	ldr	r0, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   3c192:	9b00      	ldr	r3, [sp, #0]

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   3c194:	794d      	ldrb	r5, [r1, #5]
   3c196:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
   3c19a:	9b01      	ldr	r3, [sp, #4]
   3c19c:	798a      	ldrb	r2, [r1, #6]
   3c19e:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
   3c1a2:	9b02      	ldr	r3, [sp, #8]
   3c1a4:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
   3c1a8:	9b03      	ldr	r3, [sp, #12]
   3c1aa:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   3c1ae:	2301      	movs	r3, #1
   3c1b0:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
   3c1b4:	890b      	ldrh	r3, [r1, #8]
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   3c1b6:	041f      	lsls	r7, r3, #16
   3c1b8:	d505      	bpl.n	3c1c6 <nrfx_pwm_init+0xb2>
   3c1ba:	4b1b      	ldr	r3, [pc, #108]	; (3c228 <nrfx_pwm_init+0x114>)
   3c1bc:	4a1b      	ldr	r2, [pc, #108]	; (3c22c <nrfx_pwm_init+0x118>)
   3c1be:	f240 2197 	movw	r1, #663	; 0x297
   3c1c2:	481b      	ldr	r0, [pc, #108]	; (3c230 <nrfx_pwm_init+0x11c>)
   3c1c4:	e7ae      	b.n	3c124 <nrfx_pwm_init+0x10>
    p_reg->PRESCALER  = base_clock;
   3c1c6:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   3c1ca:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   3c1ce:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

__STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type * p_reg,
                                         nrf_pwm_dec_load_t dec_load,
                                         nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   3c1d2:	894b      	ldrh	r3, [r1, #10]
   3c1d4:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   3c1d8:	2300      	movs	r3, #0
   3c1da:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   3c1de:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c1e2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   3c1e6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   3c1ea:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   3c1ee:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   3c1f2:	f854 3036 	ldr.w	r3, [r4, r6, lsl #3]
   3c1f6:	b11b      	cbz	r3, 3c200 <nrfx_pwm_init+0xec>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   3c1f8:	f340 3007 	sbfx	r0, r0, #12, #8
   3c1fc:	f7e5 fa76 	bl	216ec <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c200:	2301      	movs	r3, #1
   3c202:	4444      	add	r4, r8

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3c204:	480b      	ldr	r0, [pc, #44]	; (3c234 <nrfx_pwm_init+0x120>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c206:	7123      	strb	r3, [r4, #4]
}
   3c208:	b005      	add	sp, #20
   3c20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   3c20e:	480a      	ldr	r0, [pc, #40]	; (3c238 <nrfx_pwm_init+0x124>)
   3c210:	e7fa      	b.n	3c208 <nrfx_pwm_init+0xf4>
   3c212:	bf00      	nop
   3c214:	0005215e 	.word	0x0005215e
   3c218:	0005207a 	.word	0x0005207a
   3c21c:	00052167 	.word	0x00052167
   3c220:	20026338 	.word	0x20026338
   3c224:	40842500 	.word	0x40842500
   3c228:	0004ed03 	.word	0x0004ed03
   3c22c:	00051fe0 	.word	0x00051fe0
   3c230:	0004ed24 	.word	0x0004ed24
   3c234:	0bad0000 	.word	0x0bad0000
   3c238:	0bad0005 	.word	0x0bad0005

0003c23c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const * const p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   3c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c240:	4614      	mov	r4, r2
   3c242:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3c244:	7902      	ldrb	r2, [r0, #4]
   3c246:	4b24      	ldr	r3, [pc, #144]	; (3c2d8 <nrfx_pwm_simple_playback+0x9c>)
{
   3c248:	4606      	mov	r6, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3c24a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c24e:	793b      	ldrb	r3, [r7, #4]
{
   3c250:	4688      	mov	r8, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c252:	b933      	cbnz	r3, 3c262 <nrfx_pwm_simple_playback+0x26>
   3c254:	f240 1111 	movw	r1, #273	; 0x111
   3c258:	4b20      	ldr	r3, [pc, #128]	; (3c2dc <nrfx_pwm_simple_playback+0xa0>)
   3c25a:	4a21      	ldr	r2, [pc, #132]	; (3c2e0 <nrfx_pwm_simple_playback+0xa4>)
    NRFX_ASSERT(playback_count > 0);
   3c25c:	4821      	ldr	r0, [pc, #132]	; (3c2e4 <nrfx_pwm_simple_playback+0xa8>)
   3c25e:	f004 fb3b 	bl	408d8 <__assert_func>
   3c262:	b924      	cbnz	r4, 3c26e <nrfx_pwm_simple_playback+0x32>
   3c264:	4b20      	ldr	r3, [pc, #128]	; (3c2e8 <nrfx_pwm_simple_playback+0xac>)
   3c266:	4a1e      	ldr	r2, [pc, #120]	; (3c2e0 <nrfx_pwm_simple_playback+0xa4>)
   3c268:	f44f 7189 	mov.w	r1, #274	; 0x112
   3c26c:	e7f6      	b.n	3c25c <nrfx_pwm_simple_playback+0x20>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   3c26e:	680b      	ldr	r3, [r1, #0]
   3c270:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   3c274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3c278:	d004      	beq.n	3c284 <nrfx_pwm_simple_playback+0x48>
   3c27a:	4b1c      	ldr	r3, [pc, #112]	; (3c2ec <nrfx_pwm_simple_playback+0xb0>)
   3c27c:	4a18      	ldr	r2, [pc, #96]	; (3c2e0 <nrfx_pwm_simple_playback+0xa4>)
   3c27e:	f240 1113 	movw	r1, #275	; 0x113
   3c282:	e7eb      	b.n	3c25c <nrfx_pwm_simple_playback+0x20>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   3c284:	460a      	mov	r2, r1
   3c286:	6800      	ldr	r0, [r0, #0]
   3c288:	2100      	movs	r1, #0
   3c28a:	f7ff feed 	bl	3c068 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   3c28e:	4642      	mov	r2, r8
   3c290:	6830      	ldr	r0, [r6, #0]
   3c292:	2101      	movs	r1, #1
   3c294:	f7ff fee8 	bl	3c068 <nrf_pwm_sequence_set>
   3c298:	f004 0301 	and.w	r3, r4, #1
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   3c29c:	6830      	ldr	r0, [r6, #0]
}

__STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                      uint16_t loop_count)
{
    p_reg->LOOP = loop_count;
   3c29e:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   3c2a2:	07ea      	lsls	r2, r5, #31
   3c2a4:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
   3c2a8:	d413      	bmi.n	3c2d2 <nrfx_pwm_simple_playback+0x96>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   3c2aa:	f015 0202 	ands.w	r2, r5, #2
   3c2ae:	d003      	beq.n	3c2b8 <nrfx_pwm_simple_playback+0x7c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   3c2b0:	2b00      	cmp	r3, #0
   3c2b2:	bf14      	ite	ne
   3c2b4:	2208      	movne	r2, #8
   3c2b6:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   3c2b8:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   3c2ba:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   3c2be:	4639      	mov	r1, r7
   3c2c0:	b2ea      	uxtb	r2, r5
   3c2c2:	bf18      	it	ne
   3c2c4:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   3c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   3c2ca:	bf08      	it	eq
   3c2cc:	2308      	moveq	r3, #8
   3c2ce:	f00d be52 	b.w	49f76 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   3c2d2:	2210      	movs	r2, #16
   3c2d4:	e7f0      	b.n	3c2b8 <nrfx_pwm_simple_playback+0x7c>
   3c2d6:	bf00      	nop
   3c2d8:	20026338 	.word	0x20026338
   3c2dc:	00052224 	.word	0x00052224
   3c2e0:	00052088 	.word	0x00052088
   3c2e4:	00052167 	.word	0x00052167
   3c2e8:	000521a3 	.word	0x000521a3
   3c2ec:	000521b6 	.word	0x000521b6

0003c2f0 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * const p_instance)
{
   3c2f0:	b508      	push	{r3, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c2f2:	4a0d      	ldr	r2, [pc, #52]	; (3c328 <_flash_used+0x30>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3c2f4:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c2f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3c2fa:	7913      	ldrb	r3, [r2, #4]
   3c2fc:	b933      	cbnz	r3, 3c30c <_flash_used+0x14>
   3c2fe:	4b0b      	ldr	r3, [pc, #44]	; (3c32c <_flash_used+0x34>)
   3c300:	4a0b      	ldr	r2, [pc, #44]	; (3c330 <_flash_used+0x38>)
   3c302:	f240 1187 	movw	r1, #391	; 0x187
   3c306:	480b      	ldr	r0, [pc, #44]	; (3c334 <_flash_used+0x3c>)
   3c308:	f004 fae6 	bl	408d8 <__assert_func>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   3c30c:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   3c30e:	7913      	ldrb	r3, [r2, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c310:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   3c314:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   3c316:	b919      	cbnz	r1, 3c320 <_flash_used+0x28>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   3c318:	1e98      	subs	r0, r3, #2
   3c31a:	bf18      	it	ne
   3c31c:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   3c31e:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c320:	2001      	movs	r0, #1
   3c322:	7110      	strb	r0, [r2, #4]
   3c324:	e7fb      	b.n	3c31e <_flash_used+0x26>
   3c326:	bf00      	nop
   3c328:	20026338 	.word	0x20026338
   3c32c:	00052224 	.word	0x00052224
   3c330:	000520af 	.word	0x000520af
   3c334:	00052167 	.word	0x00052167

0003c338 <nrfx_pwm_stop>:
{
   3c338:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   3c33a:	4b0f      	ldr	r3, [pc, #60]	; (3c378 <nrfx_pwm_stop+0x40>)
   3c33c:	7902      	ldrb	r2, [r0, #4]
{
   3c33e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   3c340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3c344:	791b      	ldrb	r3, [r3, #4]
{
   3c346:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   3c348:	b933      	cbnz	r3, 3c358 <nrfx_pwm_stop+0x20>
   3c34a:	4b0c      	ldr	r3, [pc, #48]	; (3c37c <nrfx_pwm_stop+0x44>)
   3c34c:	4a0c      	ldr	r2, [pc, #48]	; (3c380 <nrfx_pwm_stop+0x48>)
   3c34e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   3c352:	480c      	ldr	r0, [pc, #48]	; (3c384 <nrfx_pwm_stop+0x4c>)
   3c354:	f004 fac0 	bl	408d8 <__assert_func>
    if (nrfx_pwm_is_stopped(p_instance))
   3c358:	f7ff ffca 	bl	3c2f0 <nrfx_pwm_is_stopped>
   3c35c:	b950      	cbnz	r0, 3c374 <nrfx_pwm_stop+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c35e:	2201      	movs	r2, #1
        nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   3c360:	682b      	ldr	r3, [r5, #0]
   3c362:	605a      	str	r2, [r3, #4]
            if (nrfx_pwm_is_stopped(p_instance))
   3c364:	4628      	mov	r0, r5
   3c366:	f7ff ffc3 	bl	3c2f0 <nrfx_pwm_is_stopped>
   3c36a:	b918      	cbnz	r0, 3c374 <nrfx_pwm_stop+0x3c>
        } while (wait_until_stopped);
   3c36c:	2c00      	cmp	r4, #0
   3c36e:	d1f9      	bne.n	3c364 <nrfx_pwm_stop+0x2c>
}
   3c370:	4620      	mov	r0, r4
   3c372:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   3c374:	2401      	movs	r4, #1
   3c376:	e7fb      	b.n	3c370 <nrfx_pwm_stop+0x38>
   3c378:	20026338 	.word	0x20026338
   3c37c:	000521df 	.word	0x000521df
   3c380:	000520a1 	.word	0x000520a1
   3c384:	00052167 	.word	0x00052167

0003c388 <nrf_gpio_pin_port_decode.isra.0.part.1>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   3c388:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c38a:	4a03      	ldr	r2, [pc, #12]	; (3c398 <nrf_gpio_pin_port_decode.isra.0.part.1+0x10>)
   3c38c:	4b03      	ldr	r3, [pc, #12]	; (3c39c <nrf_gpio_pin_port_decode.isra.0.part.1+0x14>)
   3c38e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   3c392:	4803      	ldr	r0, [pc, #12]	; (3c3a0 <nrf_gpio_pin_port_decode.isra.0.part.1+0x18>)
   3c394:	f004 faa0 	bl	408d8 <__assert_func>
   3c398:	00052250 	.word	0x00052250
   3c39c:	0004ebd7 	.word	0x0004ebd7
   3c3a0:	0004ebe5 	.word	0x0004ebe5

0003c3a4 <nrf_gpio_pin_clear>:
   3c3a4:	281f      	cmp	r0, #31
{
   3c3a6:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c3a8:	d901      	bls.n	3c3ae <nrf_gpio_pin_clear+0xa>
   3c3aa:	f7ff ffed 	bl	3c388 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3c3ae:	2301      	movs	r3, #1
   3c3b0:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->OUTCLR = clr_mask;
   3c3b4:	4b01      	ldr	r3, [pc, #4]	; (3c3bc <nrf_gpio_pin_clear+0x18>)
   3c3b6:	60d8      	str	r0, [r3, #12]
}
   3c3b8:	bd08      	pop	{r3, pc}
   3c3ba:	bf00      	nop
   3c3bc:	40842500 	.word	0x40842500

0003c3c0 <nrf_gpio_pin_set>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c3c0:	281f      	cmp	r0, #31
{
   3c3c2:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c3c4:	d901      	bls.n	3c3ca <nrf_gpio_pin_set+0xa>
   3c3c6:	f7ff ffdf 	bl	3c388 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3c3ca:	2301      	movs	r3, #1
   3c3cc:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->OUTSET = set_mask;
   3c3d0:	4b01      	ldr	r3, [pc, #4]	; (3c3d8 <nrf_gpio_pin_set+0x18>)
   3c3d2:	6098      	str	r0, [r3, #8]
}
   3c3d4:	bd08      	pop	{r3, pc}
   3c3d6:	bf00      	nop
   3c3d8:	40842500 	.word	0x40842500

0003c3dc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t  const * const p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void                     * p_context)
{
   3c3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3e0:	4681      	mov	r9, r0
    NRFX_ASSERT(p_config);
   3c3e2:	460c      	mov	r4, r1
   3c3e4:	b929      	cbnz	r1, 3c3f2 <nrfx_spim_init+0x16>
   3c3e6:	4b52      	ldr	r3, [pc, #328]	; (3c530 <nrfx_spim_init+0x154>)
   3c3e8:	4a52      	ldr	r2, [pc, #328]	; (3c534 <nrfx_spim_init+0x158>)
   3c3ea:	21a4      	movs	r1, #164	; 0xa4
   3c3ec:	4852      	ldr	r0, [pc, #328]	; (3c538 <nrfx_spim_init+0x15c>)
   3c3ee:	f004 fa73 	bl	408d8 <__assert_func>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3c3f2:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3c3f4:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3c3f6:	4e51      	ldr	r6, [pc, #324]	; (3c53c <nrfx_spim_init+0x160>)
   3c3f8:	4369      	muls	r1, r5
   3c3fa:	1870      	adds	r0, r6, r1
   3c3fc:	7f07      	ldrb	r7, [r0, #28]
   3c3fe:	2f00      	cmp	r7, #0
   3c400:	f040 8093 	bne.w	3c52a <nrfx_spim_init+0x14e>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   3c404:	f8d9 7000 	ldr.w	r7, [r9]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   3c408:	6043      	str	r3, [r0, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   3c40a:	7b23      	ldrb	r3, [r4, #12]
    p_cb->handler = handler;
   3c40c:	5072      	str	r2, [r6, r1]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   3c40e:	2b01      	cmp	r3, #1
   3c410:	7820      	ldrb	r0, [r4, #0]
   3c412:	d806      	bhi.n	3c422 <nrfx_spim_init+0x46>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   3c414:	f7ff ffc6 	bl	3c3a4 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   3c418:	7823      	ldrb	r3, [r4, #0]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c41a:	2b1f      	cmp	r3, #31
   3c41c:	d904      	bls.n	3c428 <nrfx_spim_init+0x4c>
   3c41e:	f7ff ffb3 	bl	3c388 <nrf_gpio_pin_port_decode.isra.0.part.1>
        nrf_gpio_pin_set(p_config->sck_pin);
   3c422:	f7ff ffcd 	bl	3c3c0 <nrf_gpio_pin_set>
   3c426:	e7f7      	b.n	3c418 <nrfx_spim_init+0x3c>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c428:	2101      	movs	r1, #1
   3c42a:	4a45      	ldr	r2, [pc, #276]	; (3c540 <nrfx_spim_init+0x164>)
   3c42c:	3380      	adds	r3, #128	; 0x80
   3c42e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   3c432:	f894 8001 	ldrb.w	r8, [r4, #1]
   3c436:	4692      	mov	sl, r2
   3c438:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3c43c:	d066      	beq.n	3c50c <nrfx_spim_init+0x130>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   3c43e:	4640      	mov	r0, r8
   3c440:	f7ff ffb0 	bl	3c3a4 <nrf_gpio_pin_clear>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c444:	f1b8 0f1f 	cmp.w	r8, #31
   3c448:	d8e9      	bhi.n	3c41e <nrfx_spim_init+0x42>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c44a:	2203      	movs	r2, #3
   3c44c:	f108 0380 	add.w	r3, r8, #128	; 0x80
   3c450:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   3c454:	78a3      	ldrb	r3, [r4, #2]
   3c456:	2bff      	cmp	r3, #255	; 0xff
   3c458:	d05b      	beq.n	3c512 <nrfx_spim_init+0x136>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c45a:	2b1f      	cmp	r3, #31
    {
        miso_pin = p_config->miso_pin;
   3c45c:	469b      	mov	fp, r3
   3c45e:	d8de      	bhi.n	3c41e <nrfx_spim_init+0x42>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c460:	2100      	movs	r1, #0
   3c462:	f103 0280 	add.w	r2, r3, #128	; 0x80
   3c466:	f84a 1022 	str.w	r1, [sl, r2, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    p_cb->miso_pin = p_config->miso_pin;
   3c46a:	2224      	movs	r2, #36	; 0x24
   3c46c:	fb02 6205 	mla	r2, r2, r5, r6
   3c470:	f882 3020 	strb.w	r3, [r2, #32]
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   3c474:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3c476:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   3c478:	77d0      	strb	r0, [r2, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3c47a:	d010      	beq.n	3c49e <nrfx_spim_init+0xc2>
    {
        if (p_config->ss_active_high)
   3c47c:	7923      	ldrb	r3, [r4, #4]
   3c47e:	2b00      	cmp	r3, #0
   3c480:	d04a      	beq.n	3c518 <nrfx_spim_init+0x13c>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   3c482:	f7ff ff8f 	bl	3c3a4 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
   3c486:	78e3      	ldrb	r3, [r4, #3]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c488:	2b1f      	cmp	r3, #31
   3c48a:	d8c8      	bhi.n	3c41e <nrfx_spim_init+0x42>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c48c:	2203      	movs	r2, #3
   3c48e:	3380      	adds	r3, #128	; 0x80
   3c490:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   3c494:	2324      	movs	r3, #36	; 0x24
   3c496:	fb03 6305 	mla	r3, r3, r5, r6
   3c49a:	7922      	ldrb	r2, [r4, #4]
   3c49c:	779a      	strb	r2, [r3, #30]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   3c49e:	7823      	ldrb	r3, [r4, #0]
    switch (spi_mode)
   3c4a0:	7b22      	ldrb	r2, [r4, #12]
    p_reg->PSEL.SCK  = sck_pin;
   3c4a2:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   3c4a6:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   3c4a8:	f8c7 850c 	str.w	r8, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   3c4ac:	f8c7 b510 	str.w	fp, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   3c4b0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   3c4b4:	7b63      	ldrb	r3, [r4, #13]
   3c4b6:	3300      	adds	r3, #0
   3c4b8:	bf18      	it	ne
   3c4ba:	2301      	movne	r3, #1
    switch (spi_mode)
   3c4bc:	2a02      	cmp	r2, #2
   3c4be:	d02e      	beq.n	3c51e <nrfx_spim_init+0x142>
   3c4c0:	2a03      	cmp	r2, #3
   3c4c2:	d02f      	beq.n	3c524 <nrfx_spim_init+0x148>
   3c4c4:	2a01      	cmp	r2, #1
   3c4c6:	d101      	bne.n	3c4cc <nrfx_spim_init+0xf0>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   3c4c8:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   3c4cc:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                      uint8_t         orc)
{
    p_reg->ORC = orc;
   3c4d0:	79a3      	ldrb	r3, [r4, #6]
   3c4d2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);

    nrf_spim_orc_set(p_spim, p_config->orc);

    if (p_cb->handler)
   3c4d6:	2324      	movs	r3, #36	; 0x24
   3c4d8:	436b      	muls	r3, r5
   3c4da:	58f3      	ldr	r3, [r6, r3]
   3c4dc:	b113      	cbz	r3, 3c4e4 <nrfx_spim_init+0x108>
    p_reg->INTENSET = mask;
   3c4de:	2240      	movs	r2, #64	; 0x40
   3c4e0:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   3c4e4:	2207      	movs	r2, #7
   3c4e6:	f8c7 2500 	str.w	r2, [r7, #1280]	; 0x500
        nrf_spim_int_enable(p_spim, NRF_SPIM_INT_END_MASK);
    }

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   3c4ea:	b12b      	cbz	r3, 3c4f8 <nrfx_spim_init+0x11c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   3c4ec:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   3c4f0:	f340 3007 	sbfx	r0, r0, #12, #8
   3c4f4:	f7e5 f8fa 	bl	216ec <z_arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   3c4f8:	2324      	movs	r3, #36	; 0x24
   3c4fa:	fb03 6505 	mla	r5, r3, r5, r6
   3c4fe:	2300      	movs	r3, #0
   3c500:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c502:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3c504:	480f      	ldr	r0, [pc, #60]	; (3c544 <nrfx_spim_init+0x168>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c506:	772b      	strb	r3, [r5, #28]
}
   3c508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   3c50c:	f04f 38ff 	mov.w	r8, #4294967295
   3c510:	e7a0      	b.n	3c454 <nrfx_spim_init+0x78>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   3c512:	f04f 3bff 	mov.w	fp, #4294967295
   3c516:	e7a8      	b.n	3c46a <nrfx_spim_init+0x8e>
            nrf_gpio_pin_set(p_config->ss_pin);
   3c518:	f7ff ff52 	bl	3c3c0 <nrf_gpio_pin_set>
   3c51c:	e7b3      	b.n	3c486 <nrfx_spim_init+0xaa>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   3c51e:	f043 0304 	orr.w	r3, r3, #4
   3c522:	e7d3      	b.n	3c4cc <nrfx_spim_init+0xf0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   3c524:	f043 0306 	orr.w	r3, r3, #6
   3c528:	e7d0      	b.n	3c4cc <nrfx_spim_init+0xf0>
        return err_code;
   3c52a:	4807      	ldr	r0, [pc, #28]	; (3c548 <nrfx_spim_init+0x16c>)
   3c52c:	e7ec      	b.n	3c508 <nrfx_spim_init+0x12c>
   3c52e:	bf00      	nop
   3c530:	0005215e 	.word	0x0005215e
   3c534:	00052269 	.word	0x00052269
   3c538:	000522a1 	.word	0x000522a1
   3c53c:	20026350 	.word	0x20026350
   3c540:	40842500 	.word	0x40842500
   3c544:	0bad0000 	.word	0x0bad0000
   3c548:	0bad0005 	.word	0x0bad0005

0003c54c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t     const * const p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   3c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c550:	4616      	mov	r6, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c552:	2224      	movs	r2, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3c554:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c556:	4d4d      	ldr	r5, [pc, #308]	; (3c68c <nrfx_spim_xfer+0x140>)
{
   3c558:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c55a:	fb02 5203 	mla	r2, r2, r3, r5
   3c55e:	7f12      	ldrb	r2, [r2, #28]
{
   3c560:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c562:	b932      	cbnz	r2, 3c572 <nrfx_spim_xfer+0x26>
   3c564:	f240 2129 	movw	r1, #553	; 0x229
   3c568:	4b49      	ldr	r3, [pc, #292]	; (3c690 <nrfx_spim_xfer+0x144>)
   3c56a:	4a4a      	ldr	r2, [pc, #296]	; (3c694 <nrfx_spim_xfer+0x148>)
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   3c56c:	484a      	ldr	r0, [pc, #296]	; (3c698 <nrfx_spim_xfer+0x14c>)
   3c56e:	f004 f9b3 	bl	408d8 <__assert_func>
   3c572:	680a      	ldr	r2, [r1, #0]
   3c574:	b932      	cbnz	r2, 3c584 <nrfx_spim_xfer+0x38>
   3c576:	684a      	ldr	r2, [r1, #4]
   3c578:	b122      	cbz	r2, 3c584 <nrfx_spim_xfer+0x38>
   3c57a:	4b48      	ldr	r3, [pc, #288]	; (3c69c <nrfx_spim_xfer+0x150>)
   3c57c:	4a45      	ldr	r2, [pc, #276]	; (3c694 <nrfx_spim_xfer+0x148>)
   3c57e:	f240 212a 	movw	r1, #554	; 0x22a
   3c582:	e7f3      	b.n	3c56c <nrfx_spim_xfer+0x20>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   3c584:	68a2      	ldr	r2, [r4, #8]
   3c586:	b93a      	cbnz	r2, 3c598 <nrfx_spim_xfer+0x4c>
   3c588:	68e2      	ldr	r2, [r4, #12]
   3c58a:	2a00      	cmp	r2, #0
   3c58c:	d07a      	beq.n	3c684 <nrfx_spim_xfer+0x138>
   3c58e:	4b44      	ldr	r3, [pc, #272]	; (3c6a0 <nrfx_spim_xfer+0x154>)
   3c590:	4a40      	ldr	r2, [pc, #256]	; (3c694 <nrfx_spim_xfer+0x148>)
   3c592:	f240 212b 	movw	r1, #555	; 0x22b
   3c596:	e7e9      	b.n	3c56c <nrfx_spim_xfer+0x20>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   3c598:	b93b      	cbnz	r3, 3c5aa <nrfx_spim_xfer+0x5e>
   3c59a:	68e3      	ldr	r3, [r4, #12]
   3c59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3c5a0:	d203      	bcs.n	3c5aa <nrfx_spim_xfer+0x5e>
   3c5a2:	6863      	ldr	r3, [r4, #4]
   3c5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3c5a8:	d304      	bcc.n	3c5b4 <nrfx_spim_xfer+0x68>
   3c5aa:	4b3e      	ldr	r3, [pc, #248]	; (3c6a4 <nrfx_spim_xfer+0x158>)
   3c5ac:	4a39      	ldr	r2, [pc, #228]	; (3c694 <nrfx_spim_xfer+0x148>)
   3c5ae:	f240 212e 	movw	r1, #558	; 0x22e
   3c5b2:	e7db      	b.n	3c56c <nrfx_spim_xfer+0x20>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   3c5b4:	7f6b      	ldrb	r3, [r5, #29]
   3c5b6:	2b00      	cmp	r3, #0
   3c5b8:	d162      	bne.n	3c680 <nrfx_spim_xfer+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   3c5ba:	682b      	ldr	r3, [r5, #0]
   3c5bc:	b123      	cbz	r3, 3c5c8 <nrfx_spim_xfer+0x7c>
   3c5be:	f016 0f14 	tst.w	r6, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   3c5c2:	bf04      	itt	eq
   3c5c4:	2301      	moveq	r3, #1
   3c5c6:	776b      	strbeq	r3, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   3c5c8:	4f37      	ldr	r7, [pc, #220]	; (3c6a8 <nrfx_spim_xfer+0x15c>)
   3c5ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   3c5ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3c5d2:	7fe8      	ldrb	r0, [r5, #31]
   3c5d4:	28ff      	cmp	r0, #255	; 0xff
   3c5d6:	d003      	beq.n	3c5e0 <nrfx_spim_xfer+0x94>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   3c5d8:	7fab      	ldrb	r3, [r5, #30]
   3c5da:	b1a3      	cbz	r3, 3c606 <nrfx_spim_xfer+0xba>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   3c5dc:	f7ff fef0 	bl	3c3c0 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   3c5e0:	6821      	ldr	r1, [r4, #0]
   3c5e2:	b121      	cbz	r1, 3c5ee <nrfx_spim_xfer+0xa2>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   3c5e4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   3c5e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3c5ec:	d106      	bne.n	3c5fc <nrfx_spim_xfer+0xb0>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   3c5ee:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   3c5f0:	b162      	cbz	r2, 3c60c <nrfx_spim_xfer+0xc0>
   3c5f2:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   3c5f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3c5fa:	d007      	beq.n	3c60c <nrfx_spim_xfer+0xc0>
        p_cb->transfer_in_progress = false;
   3c5fc:	2300      	movs	r3, #0
        return err_code;
   3c5fe:	482b      	ldr	r0, [pc, #172]	; (3c6ac <nrfx_spim_xfer+0x160>)
        p_cb->transfer_in_progress = false;
   3c600:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   3c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   3c606:	f7ff fecd 	bl	3c3a4 <nrf_gpio_pin_clear>
   3c60a:	e7e9      	b.n	3c5e0 <nrfx_spim_xfer+0x94>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   3c60c:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   3c610:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3c612:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3c616:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   3c61a:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3c61c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c620:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   3c622:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c626:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   3c62a:	f016 0201 	ands.w	r2, r6, #1
}


__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
   3c62e:	bf18      	it	ne
   3c630:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
   3c632:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   3c636:	f016 0202 	ands.w	r2, r6, #2
}

__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
   3c63a:	bf18      	it	ne
   3c63c:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
   3c63e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   3c642:	0732      	lsls	r2, r6, #28
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c644:	bf5c      	itt	pl
   3c646:	2201      	movpl	r2, #1
   3c648:	611a      	strpl	r2, [r3, #16]
    if (!p_cb->handler)
   3c64a:	682a      	ldr	r2, [r5, #0]
   3c64c:	b97a      	cbnz	r2, 3c66e <nrfx_spim_xfer+0x122>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c64e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END)){}
   3c652:	2a00      	cmp	r2, #0
   3c654:	d0fb      	beq.n	3c64e <nrfx_spim_xfer+0x102>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3c656:	7fe8      	ldrb	r0, [r5, #31]
   3c658:	28ff      	cmp	r0, #255	; 0xff
   3c65a:	d003      	beq.n	3c664 <nrfx_spim_xfer+0x118>
                if (p_cb->ss_active_high)
   3c65c:	7fab      	ldrb	r3, [r5, #30]
   3c65e:	b11b      	cbz	r3, 3c668 <nrfx_spim_xfer+0x11c>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   3c660:	f7ff fea0 	bl	3c3a4 <nrf_gpio_pin_clear>
    return err_code;
   3c664:	4812      	ldr	r0, [pc, #72]	; (3c6b0 <nrfx_spim_xfer+0x164>)
   3c666:	e7cc      	b.n	3c602 <nrfx_spim_xfer+0xb6>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   3c668:	f7ff feaa 	bl	3c3c0 <nrf_gpio_pin_set>
   3c66c:	e7fa      	b.n	3c664 <nrfx_spim_xfer+0x118>
   3c66e:	2240      	movs	r2, #64	; 0x40
    if (!enable)
   3c670:	f016 0f04 	tst.w	r6, #4
    p_reg->INTENCLR = mask;
   3c674:	bf14      	ite	ne
   3c676:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   3c67a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   3c67e:	e7f1      	b.n	3c664 <nrfx_spim_xfer+0x118>
        return err_code;
   3c680:	480c      	ldr	r0, [pc, #48]	; (3c6b4 <nrfx_spim_xfer+0x168>)
   3c682:	e7be      	b.n	3c602 <nrfx_spim_xfer+0xb6>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   3c684:	2b00      	cmp	r3, #0
   3c686:	d08c      	beq.n	3c5a2 <nrfx_spim_xfer+0x56>
   3c688:	e78f      	b.n	3c5aa <nrfx_spim_xfer+0x5e>
   3c68a:	bf00      	nop
   3c68c:	20026350 	.word	0x20026350
   3c690:	00052224 	.word	0x00052224
   3c694:	00052278 	.word	0x00052278
   3c698:	000522a1 	.word	0x000522a1
   3c69c:	000522de 	.word	0x000522de
   3c6a0:	00052325 	.word	0x00052325
   3c6a4:	0005236c 	.word	0x0005236c
   3c6a8:	2002635c 	.word	0x2002635c
   3c6ac:	0bad000a 	.word	0x0bad000a
   3c6b0:	0bad0000 	.word	0x0bad0000
   3c6b4:	0bad000b 	.word	0x0bad000b

0003c6b8 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c6b8:	4b12      	ldr	r3, [pc, #72]	; (3c704 <nrfx_spim_3_irq_handler+0x4c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   3c6ba:	b510      	push	{r4, lr}
   3c6bc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   3c6c0:	b1fa      	cbz	r2, 3c702 <nrfx_spim_3_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c6c2:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   3c6c4:	4c10      	ldr	r4, [pc, #64]	; (3c708 <nrfx_spim_3_irq_handler+0x50>)
   3c6c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   3c6ca:	6823      	ldr	r3, [r4, #0]
   3c6cc:	b933      	cbnz	r3, 3c6dc <nrfx_spim_3_irq_handler+0x24>
   3c6ce:	4b0f      	ldr	r3, [pc, #60]	; (3c70c <nrfx_spim_3_irq_handler+0x54>)
   3c6d0:	4a0f      	ldr	r2, [pc, #60]	; (3c710 <nrfx_spim_3_irq_handler+0x58>)
   3c6d2:	f240 2193 	movw	r1, #659	; 0x293
   3c6d6:	480f      	ldr	r0, [pc, #60]	; (3c714 <nrfx_spim_3_irq_handler+0x5c>)
   3c6d8:	f004 f8fe 	bl	408d8 <__assert_func>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3c6dc:	7fe0      	ldrb	r0, [r4, #31]
   3c6de:	28ff      	cmp	r0, #255	; 0xff
   3c6e0:	d003      	beq.n	3c6ea <nrfx_spim_3_irq_handler+0x32>
            if (p_cb->ss_active_high)
   3c6e2:	7fa3      	ldrb	r3, [r4, #30]
   3c6e4:	b153      	cbz	r3, 3c6fc <nrfx_spim_3_irq_handler+0x44>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   3c6e6:	f7ff fe5d 	bl	3c3a4 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   3c6ea:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   3c6ec:	480a      	ldr	r0, [pc, #40]	; (3c718 <nrfx_spim_3_irq_handler+0x60>)
    p_cb->transfer_in_progress = false;
   3c6ee:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   3c6f0:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   3c6f2:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   3c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   3c6fa:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   3c6fc:	f7ff fe60 	bl	3c3c0 <nrf_gpio_pin_set>
   3c700:	e7f3      	b.n	3c6ea <nrfx_spim_3_irq_handler+0x32>
}
   3c702:	bd10      	pop	{r4, pc}
   3c704:	4000b000 	.word	0x4000b000
   3c708:	20026350 	.word	0x20026350
   3c70c:	00052293 	.word	0x00052293
   3c710:	00052287 	.word	0x00052287
   3c714:	000522a1 	.word	0x000522a1
   3c718:	20026358 	.word	0x20026358

0003c71c <nrf_gpio_pin_port_decode.isra.0>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c71c:	281f      	cmp	r0, #31
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   3c71e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3c720:	d906      	bls.n	3c730 <nrf_gpio_pin_port_decode.isra.0+0x14>
   3c722:	4b04      	ldr	r3, [pc, #16]	; (3c734 <nrf_gpio_pin_port_decode.isra.0+0x18>)
   3c724:	4a04      	ldr	r2, [pc, #16]	; (3c738 <nrf_gpio_pin_port_decode.isra.0+0x1c>)
   3c726:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   3c72a:	4804      	ldr	r0, [pc, #16]	; (3c73c <nrf_gpio_pin_port_decode.isra.0+0x20>)
   3c72c:	f004 f8d4 	bl	408d8 <__assert_func>
}
   3c730:	4803      	ldr	r0, [pc, #12]	; (3c740 <nrf_gpio_pin_port_decode.isra.0+0x24>)
   3c732:	bd08      	pop	{r3, pc}
   3c734:	0004ebd7 	.word	0x0004ebd7
   3c738:	0005240b 	.word	0x0005240b
   3c73c:	0004ebe5 	.word	0x0004ebe5
   3c740:	40842500 	.word	0x40842500

0003c744 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   3c744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c748:	4682      	mov	sl, r0
   3c74a:	4691      	mov	r9, r2
    NRFX_ASSERT(p_config);
   3c74c:	460d      	mov	r5, r1
   3c74e:	b929      	cbnz	r1, 3c75c <nrfx_twim_init+0x18>
   3c750:	21a0      	movs	r1, #160	; 0xa0
   3c752:	4b25      	ldr	r3, [pc, #148]	; (3c7e8 <nrfx_twim_init+0xa4>)
   3c754:	4a25      	ldr	r2, [pc, #148]	; (3c7ec <nrfx_twim_init+0xa8>)
    NRFX_ASSERT(p_config->scl != p_config->sda);
   3c756:	4826      	ldr	r0, [pc, #152]	; (3c7f0 <nrfx_twim_init+0xac>)
   3c758:	f004 f8be 	bl	408d8 <__assert_func>
   3c75c:	e9d1 8700 	ldrd	r8, r7, [r1]
   3c760:	45b8      	cmp	r8, r7
   3c762:	d103      	bne.n	3c76c <nrfx_twim_init+0x28>
   3c764:	4b23      	ldr	r3, [pc, #140]	; (3c7f4 <nrfx_twim_init+0xb0>)
   3c766:	4a21      	ldr	r2, [pc, #132]	; (3c7ec <nrfx_twim_init+0xa8>)
   3c768:	21a1      	movs	r1, #161	; 0xa1
   3c76a:	e7f4      	b.n	3c756 <nrfx_twim_init+0x12>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3c76c:	2134      	movs	r1, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3c76e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3c770:	4c21      	ldr	r4, [pc, #132]	; (3c7f8 <nrfx_twim_init+0xb4>)
   3c772:	4371      	muls	r1, r6
   3c774:	1860      	adds	r0, r4, r1
   3c776:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
   3c77a:	bb9a      	cbnz	r2, 3c7e4 <nrfx_twim_init+0xa0>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
   3c77c:	6043      	str	r3, [r0, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   3c77e:	7b6b      	ldrb	r3, [r5, #13]
    p_cb->int_mask        = 0;
   3c780:	6082      	str	r2, [r0, #8]
    p_cb->repeated        = false;
   3c782:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    p_cb->busy            = false;
   3c786:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   3c78a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    p_cb->handler         = event_handler;
   3c78e:	f844 9001 	str.w	r9, [r4, r1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c792:	4640      	mov	r0, r8
   3c794:	f7ff ffc2 	bl	3c71c <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c798:	f240 6b0c 	movw	fp, #1548	; 0x60c
   3c79c:	f108 0380 	add.w	r3, r8, #128	; 0x80
   3c7a0:	f840 b023 	str.w	fp, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c7a4:	4638      	mov	r0, r7
   3c7a6:	f7ff ffb9 	bl	3c71c <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3c7aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
   3c7ae:	f840 b023 	str.w	fp, [r0, r3, lsl #2]
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    TWIM_PIN_INIT(p_config->sda);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   3c7b2:	f8da 0000 	ldr.w	r0, [sl]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   3c7b6:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.SCL = scl_pin;
   3c7b8:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   3c7bc:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   3c7c0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   3c7c4:	f1b9 0f00 	cmp.w	r9, #0
   3c7c8:	d003      	beq.n	3c7d2 <nrfx_twim_init+0x8e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   3c7ca:	f340 3007 	sbfx	r0, r0, #12, #8
   3c7ce:	f7e4 ff8d 	bl	216ec <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c7d2:	2334      	movs	r3, #52	; 0x34
   3c7d4:	fb03 4406 	mla	r4, r3, r6, r4
   3c7d8:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3c7da:	4808      	ldr	r0, [pc, #32]	; (3c7fc <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c7dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
   3c7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   3c7e4:	4806      	ldr	r0, [pc, #24]	; (3c800 <nrfx_twim_init+0xbc>)
   3c7e6:	e7fb      	b.n	3c7e0 <nrfx_twim_init+0x9c>
   3c7e8:	0005215e 	.word	0x0005215e
   3c7ec:	00052424 	.word	0x00052424
   3c7f0:	000524aa 	.word	0x000524aa
   3c7f4:	000524e7 	.word	0x000524e7
   3c7f8:	20026374 	.word	0x20026374
   3c7fc:	0bad0000 	.word	0x0bad0000
   3c800:	0bad0005 	.word	0x0bad0005

0003c804 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3c804:	2134      	movs	r1, #52	; 0x34
{
   3c806:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3c808:	4a0b      	ldr	r2, [pc, #44]	; (3c838 <nrfx_twim_enable+0x34>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3c80a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3c80c:	fb01 2303 	mla	r3, r1, r3, r2
   3c810:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   3c814:	2a01      	cmp	r2, #1
   3c816:	d006      	beq.n	3c826 <nrfx_twim_enable+0x22>
   3c818:	4b08      	ldr	r3, [pc, #32]	; (3c83c <nrfx_twim_enable+0x38>)
   3c81a:	4a09      	ldr	r2, [pc, #36]	; (3c840 <nrfx_twim_enable+0x3c>)
   3c81c:	f44f 7184 	mov.w	r1, #264	; 0x108
   3c820:	4808      	ldr	r0, [pc, #32]	; (3c844 <nrfx_twim_enable+0x40>)
   3c822:	f004 f859 	bl	408d8 <__assert_func>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3c826:	2106      	movs	r1, #6

    nrf_twim_enable(p_instance->p_twim);
   3c828:	6802      	ldr	r2, [r0, #0]
   3c82a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3c82e:	2202      	movs	r2, #2
   3c830:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   3c834:	bd08      	pop	{r3, pc}
   3c836:	bf00      	nop
   3c838:	20026374 	.word	0x20026374
   3c83c:	00052480 	.word	0x00052480
   3c840:	00052433 	.word	0x00052433
   3c844:	000524aa 	.word	0x000524aa

0003c848 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c848:	2134      	movs	r1, #52	; 0x34
{
   3c84a:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c84c:	4a0f      	ldr	r2, [pc, #60]	; (3c88c <nrfx_twim_disable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3c84e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3c850:	fb01 2303 	mla	r3, r1, r3, r2
   3c854:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   3c858:	b932      	cbnz	r2, 3c868 <nrfx_twim_disable+0x20>
   3c85a:	4b0d      	ldr	r3, [pc, #52]	; (3c890 <nrfx_twim_disable+0x48>)
   3c85c:	4a0d      	ldr	r2, [pc, #52]	; (3c894 <nrfx_twim_disable+0x4c>)
   3c85e:	f240 1113 	movw	r1, #275	; 0x113
   3c862:	480d      	ldr	r0, [pc, #52]	; (3c898 <nrfx_twim_disable+0x50>)
   3c864:	f004 f838 	bl	408d8 <__assert_func>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   3c868:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   3c86a:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   3c86c:	490b      	ldr	r1, [pc, #44]	; (3c89c <nrfx_twim_disable+0x54>)
   3c86e:	6098      	str	r0, [r3, #8]
   3c870:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   3c874:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   3c878:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
   3c87c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3c880:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3c884:	2201      	movs	r2, #1
   3c886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   3c88a:	bd08      	pop	{r3, pc}
   3c88c:	20026374 	.word	0x20026374
   3c890:	00052224 	.word	0x00052224
   3c894:	00052444 	.word	0x00052444
   3c898:	000524aa 	.word	0x000524aa
   3c89c:	019c0202 	.word	0x019c0202

0003c8a0 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   3c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   3c8a4:	7903      	ldrb	r3, [r0, #4]
{
   3c8a6:	460d      	mov	r5, r1
   3c8a8:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   3c8aa:	b93b      	cbnz	r3, 3c8bc <nrfx_twim_xfer+0x1c>
   3c8ac:	684b      	ldr	r3, [r1, #4]
   3c8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3c8b2:	d203      	bcs.n	3c8bc <nrfx_twim_xfer+0x1c>
   3c8b4:	688b      	ldr	r3, [r1, #8]
   3c8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3c8ba:	d306      	bcc.n	3c8ca <nrfx_twim_xfer+0x2a>
   3c8bc:	f240 11e7 	movw	r1, #487	; 0x1e7
   3c8c0:	4b96      	ldr	r3, [pc, #600]	; (3cb1c <nrfx_twim_xfer+0x27c>)
   3c8c2:	4a97      	ldr	r2, [pc, #604]	; (3cb20 <nrfx_twim_xfer+0x280>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   3c8c4:	4897      	ldr	r0, [pc, #604]	; (3cb24 <nrfx_twim_xfer+0x284>)
   3c8c6:	f004 f807 	bl	408d8 <__assert_func>
   3c8ca:	4e97      	ldr	r6, [pc, #604]	; (3cb28 <nrfx_twim_xfer+0x288>)
   3c8cc:	6833      	ldr	r3, [r6, #0]
   3c8ce:	b973      	cbnz	r3, 3c8ee <nrfx_twim_xfer+0x4e>
   3c8d0:	780b      	ldrb	r3, [r1, #0]
   3c8d2:	2b02      	cmp	r3, #2
   3c8d4:	d104      	bne.n	3c8e0 <nrfx_twim_xfer+0x40>
   3c8d6:	4b95      	ldr	r3, [pc, #596]	; (3cb2c <nrfx_twim_xfer+0x28c>)
   3c8d8:	4a91      	ldr	r2, [pc, #580]	; (3cb20 <nrfx_twim_xfer+0x280>)
   3c8da:	f240 11ed 	movw	r1, #493	; 0x1ed
   3c8de:	e7f1      	b.n	3c8c4 <nrfx_twim_xfer+0x24>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   3c8e0:	2b03      	cmp	r3, #3
   3c8e2:	d104      	bne.n	3c8ee <nrfx_twim_xfer+0x4e>
   3c8e4:	4b92      	ldr	r3, [pc, #584]	; (3cb30 <nrfx_twim_xfer+0x290>)
   3c8e6:	4a8e      	ldr	r2, [pc, #568]	; (3cb20 <nrfx_twim_xfer+0x280>)
   3c8e8:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   3c8ec:	e7ea      	b.n	3c8c4 <nrfx_twim_xfer+0x24>
   3c8ee:	68eb      	ldr	r3, [r5, #12]
   3c8f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   3c8f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3c8f8:	d002      	beq.n	3c900 <nrfx_twim_xfer+0x60>
        return err_code;
   3c8fa:	488e      	ldr	r0, [pc, #568]	; (3cb34 <nrfx_twim_xfer+0x294>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->INTENCLR = mask;
   3c900:	4b8d      	ldr	r3, [pc, #564]	; (3cb38 <nrfx_twim_xfer+0x298>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   3c902:	6804      	ldr	r4, [r0, #0]
   3c904:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   3c908:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   3c90c:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   3c910:	b123      	cbz	r3, 3c91c <nrfx_twim_xfer+0x7c>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3c912:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   3c914:	4889      	ldr	r0, [pc, #548]	; (3cb3c <nrfx_twim_xfer+0x29c>)
    p_reg->INTENSET = mask;
   3c916:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   3c91a:	e7ef      	b.n	3c8fc <nrfx_twim_xfer+0x5c>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   3c91c:	f017 0f14 	tst.w	r7, #20
   3c920:	bf0c      	ite	eq
   3c922:	2301      	moveq	r3, #1
   3c924:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   3c926:	46ae      	mov	lr, r5
   3c928:	f8df c23c 	ldr.w	ip, [pc, #572]	; 3cb68 <nrfx_twim_xfer+0x2c8>
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   3c92c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   3c930:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   3c934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3c938:	f8de 3000 	ldr.w	r3, [lr]
   3c93c:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   3c940:	f3c7 1300 	ubfx	r3, r7, #4, #1
   3c944:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

__STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                          uint8_t address)
{
    p_reg->ADDRESS = address;
   3c948:	786b      	ldrb	r3, [r5, #1]
    switch (p_xfer_desc->type)
   3c94a:	7829      	ldrb	r1, [r5, #0]
   3c94c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   3c950:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
   3c954:	bf18      	it	ne
   3c956:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c958:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   3c95c:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
}

__STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
   3c960:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   3c964:	f017 0302 	ands.w	r3, r7, #2
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
   3c968:	bf18      	it	ne
   3c96a:	2301      	movne	r3, #1
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
   3c96c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   3c970:	2903      	cmp	r1, #3
   3c972:	f200 80b9 	bhi.w	3cae8 <nrfx_twim_xfer+0x248>
   3c976:	e8df f001 	tbb	[pc, r1]
   3c97a:	a484      	.short	0xa484
   3c97c:	0268      	.short	0x0268
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   3c97e:	06f8      	lsls	r0, r7, #27
   3c980:	d504      	bpl.n	3c98c <nrfx_twim_xfer+0xec>
   3c982:	4b6f      	ldr	r3, [pc, #444]	; (3cb40 <nrfx_twim_xfer+0x2a0>)
   3c984:	4a6f      	ldr	r2, [pc, #444]	; (3cb44 <nrfx_twim_xfer+0x2a4>)
   3c986:	f44f 71b4 	mov.w	r1, #360	; 0x168
   3c98a:	e79b      	b.n	3c8c4 <nrfx_twim_xfer+0x24>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   3c98c:	073a      	lsls	r2, r7, #28
   3c98e:	d504      	bpl.n	3c99a <nrfx_twim_xfer+0xfa>
   3c990:	4b6d      	ldr	r3, [pc, #436]	; (3cb48 <nrfx_twim_xfer+0x2a8>)
   3c992:	4a6c      	ldr	r2, [pc, #432]	; (3cb44 <nrfx_twim_xfer+0x2a4>)
   3c994:	f240 1169 	movw	r1, #361	; 0x169
   3c998:	e794      	b.n	3c8c4 <nrfx_twim_xfer+0x24>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   3c99a:	f017 0304 	ands.w	r3, r7, #4
   3c99e:	d004      	beq.n	3c9aa <nrfx_twim_xfer+0x10a>
   3c9a0:	4b6a      	ldr	r3, [pc, #424]	; (3cb4c <nrfx_twim_xfer+0x2ac>)
   3c9a2:	4a68      	ldr	r2, [pc, #416]	; (3cb44 <nrfx_twim_xfer+0x2a4>)
   3c9a4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   3c9a8:	e78c      	b.n	3c8c4 <nrfx_twim_xfer+0x24>
   3c9aa:	692a      	ldr	r2, [r5, #16]
   3c9ac:	f002 4060 	and.w	r0, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3c9b0:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   3c9b4:	d1a1      	bne.n	3c8fa <nrfx_twim_xfer+0x5a>
    p_reg->SHORTS = mask;
   3c9b6:	f44f 7080 	mov.w	r0, #256	; 0x100
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3c9ba:	f8d5 c004 	ldr.w	ip, [r5, #4]
   3c9be:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3c9c2:	68e8      	ldr	r0, [r5, #12]
   3c9c4:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3c9c8:	f8c4 c548 	str.w	ip, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c9cc:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   3c9d0:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   3c9d4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c9d8:	2301      	movs	r3, #1
   3c9da:	6223      	str	r3, [r4, #32]
   3c9dc:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c9de:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   3c9e2:	2b00      	cmp	r3, #0
   3c9e4:	d0fb      	beq.n	3c9de <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c9e6:	2300      	movs	r3, #0
   3c9e8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   3c9ec:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3c9ee:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3c9f2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3c9f6:	4b56      	ldr	r3, [pc, #344]	; (3cb50 <nrfx_twim_xfer+0x2b0>)
   3c9f8:	60b3      	str	r3, [r6, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   3c9fa:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   3c9fe:	2208      	movs	r2, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   3ca00:	4854      	ldr	r0, [pc, #336]	; (3cb54 <nrfx_twim_xfer+0x2b4>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   3ca02:	073d      	lsls	r5, r7, #28
   3ca04:	d403      	bmi.n	3ca0e <nrfx_twim_xfer+0x16e>
   3ca06:	2903      	cmp	r1, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ca08:	bf1c      	itt	ne
   3ca0a:	2101      	movne	r1, #1
   3ca0c:	50a1      	strne	r1, [r4, r2]
    if (p_cb->handler)
   3ca0e:	6832      	ldr	r2, [r6, #0]
   3ca10:	2a00      	cmp	r2, #0
   3ca12:	d16e      	bne.n	3caf2 <nrfx_twim_xfer+0x252>
   3ca14:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ca16:	4423      	add	r3, r4
   3ca18:	681a      	ldr	r2, [r3, #0]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
   3ca1a:	2a00      	cmp	r2, #0
   3ca1c:	d072      	beq.n	3cb04 <nrfx_twim_xfer+0x264>
        p_cb->busy = false;
   3ca1e:	2200      	movs	r2, #0
    uint32_t error_source = p_reg->ERRORSRC;
   3ca20:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   3ca24:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   3ca28:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
        if (errorsrc)
   3ca2c:	2b00      	cmp	r3, #0
   3ca2e:	f43f af65 	beq.w	3c8fc <nrfx_twim_xfer+0x5c>
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   3ca32:	4a49      	ldr	r2, [pc, #292]	; (3cb58 <nrfx_twim_xfer+0x2b8>)
   3ca34:	f013 0f02 	tst.w	r3, #2
   3ca38:	4848      	ldr	r0, [pc, #288]	; (3cb5c <nrfx_twim_xfer+0x2bc>)
   3ca3a:	bf08      	it	eq
   3ca3c:	4610      	moveq	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   3ca3e:	f013 0f04 	tst.w	r3, #4
   3ca42:	4b47      	ldr	r3, [pc, #284]	; (3cb60 <nrfx_twim_xfer+0x2c0>)
   3ca44:	bf18      	it	ne
   3ca46:	4618      	movne	r0, r3
   3ca48:	e758      	b.n	3c8fc <nrfx_twim_xfer+0x5c>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3ca4a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3ca4c:	68ea      	ldr	r2, [r5, #12]
   3ca4e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3ca52:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   3ca56:	692b      	ldr	r3, [r5, #16]
   3ca58:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3ca5c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   3ca60:	f47f af4b 	bne.w	3c8fa <nrfx_twim_xfer+0x5a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   3ca64:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3ca66:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   3ca6a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   3ca6e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3ca72:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3ca76:	f240 2302 	movw	r3, #514	; 0x202
   3ca7a:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ca7c:	2301      	movs	r3, #1
   3ca7e:	6223      	str	r3, [r4, #32]
   3ca80:	e7bb      	b.n	3c9fa <nrfx_twim_xfer+0x15a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3ca82:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3ca84:	68ea      	ldr	r2, [r5, #12]
   3ca86:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3ca8a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   3ca8e:	06bb      	lsls	r3, r7, #26
   3ca90:	d50d      	bpl.n	3caae <nrfx_twim_xfer+0x20e>
    p_reg->SHORTS = mask;
   3ca92:	f44f 7380 	mov.w	r3, #256	; 0x100
   3ca96:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3ca9a:	4b2d      	ldr	r3, [pc, #180]	; (3cb50 <nrfx_twim_xfer+0x2b0>)
   3ca9c:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ca9e:	2300      	movs	r3, #0
   3caa0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
   3caa4:	f44f 73a4 	mov.w	r3, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3caa8:	2201      	movs	r2, #1
   3caaa:	6222      	str	r2, [r4, #32]
   3caac:	e7a7      	b.n	3c9fe <nrfx_twim_xfer+0x15e>
    p_reg->SHORTS = mask;
   3caae:	f44f 7300 	mov.w	r3, #512	; 0x200
   3cab2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3cab6:	f240 2302 	movw	r3, #514	; 0x202
   3caba:	60b3      	str	r3, [r6, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   3cabc:	f44f 7382 	mov.w	r3, #260	; 0x104
   3cac0:	e7f2      	b.n	3caa8 <nrfx_twim_xfer+0x208>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3cac2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3cac4:	68ea      	ldr	r2, [r5, #12]
   3cac6:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3caca:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3cace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   3cad2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3cad6:	f240 2302 	movw	r3, #514	; 0x202
   3cada:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cadc:	2301      	movs	r3, #1
        start_task = NRF_TWIM_TASK_STARTRX;
   3cade:	2200      	movs	r2, #0
   3cae0:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   3cae2:	f44f 7382 	mov.w	r3, #260	; 0x104
   3cae6:	e78b      	b.n	3ca00 <nrfx_twim_xfer+0x160>
   3cae8:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   3caec:	2208      	movs	r2, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
   3caee:	481d      	ldr	r0, [pc, #116]	; (3cb64 <nrfx_twim_xfer+0x2c4>)
   3caf0:	e787      	b.n	3ca02 <nrfx_twim_xfer+0x162>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   3caf2:	077b      	lsls	r3, r7, #29
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
   3caf4:	bf44      	itt	mi
   3caf6:	f44f 7300 	movmi.w	r3, #512	; 0x200
   3cafa:	60b3      	strmi	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3cafc:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   3cafe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   3cb02:	e6fb      	b.n	3c8fc <nrfx_twim_xfer+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cb04:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   3cb08:	2d00      	cmp	r5, #0
   3cb0a:	d085      	beq.n	3ca18 <nrfx_twim_xfer+0x178>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cb0c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   3cb10:	f44f 7382 	mov.w	r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cb14:	6221      	str	r1, [r4, #32]
   3cb16:	6161      	str	r1, [r4, #20]
   3cb18:	e77d      	b.n	3ca16 <nrfx_twim_xfer+0x176>
   3cb1a:	bf00      	nop
   3cb1c:	00052506 	.word	0x00052506
   3cb20:	00052460 	.word	0x00052460
   3cb24:	000524aa 	.word	0x000524aa
   3cb28:	20026374 	.word	0x20026374
   3cb2c:	000525b1 	.word	0x000525b1
   3cb30:	00052601 	.word	0x00052601
   3cb34:	0bad000a 	.word	0x0bad000a
   3cb38:	019c0202 	.word	0x019c0202
   3cb3c:	0bad000b 	.word	0x0bad000b
   3cb40:	00052651 	.word	0x00052651
   3cb44:	00052456 	.word	0x00052456
   3cb48:	00052667 	.word	0x00052667
   3cb4c:	0005267d 	.word	0x0005267d
   3cb50:	00040200 	.word	0x00040200
   3cb54:	0bad0000 	.word	0x0bad0000
   3cb58:	0bad0001 	.word	0x0bad0001
   3cb5c:	0bae0001 	.word	0x0bae0001
   3cb60:	0bae0002 	.word	0x0bae0002
   3cb64:	0bad0004 	.word	0x0bad0004
   3cb68:	20026380 	.word	0x20026380

0003cb6c <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   3cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_cb->handler);
   3cb70:	4a4b      	ldr	r2, [pc, #300]	; (3cca0 <nrfx_twim_2_irq_handler+0x134>)
{
   3cb72:	b086      	sub	sp, #24
    NRFX_ASSERT(p_cb->handler);
   3cb74:	f8d2 8000 	ldr.w	r8, [r2]
   3cb78:	4614      	mov	r4, r2
   3cb7a:	f1b8 0f00 	cmp.w	r8, #0
   3cb7e:	d106      	bne.n	3cb8e <nrfx_twim_2_irq_handler+0x22>
   3cb80:	4b48      	ldr	r3, [pc, #288]	; (3cca4 <nrfx_twim_2_irq_handler+0x138>)
   3cb82:	4a49      	ldr	r2, [pc, #292]	; (3cca8 <nrfx_twim_2_irq_handler+0x13c>)
   3cb84:	f44f 710f 	mov.w	r1, #572	; 0x23c
   3cb88:	4848      	ldr	r0, [pc, #288]	; (3ccac <nrfx_twim_2_irq_handler+0x140>)
   3cb8a:	f003 fea5 	bl	408d8 <__assert_func>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cb8e:	4b48      	ldr	r3, [pc, #288]	; (3ccb0 <nrfx_twim_2_irq_handler+0x144>)
   3cb90:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
   3cb94:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   3cb96:	b199      	cbz	r1, 3cbc0 <nrfx_twim_2_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cb98:	2100      	movs	r1, #0
   3cb9a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cb9e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   3cba2:	b969      	cbnz	r1, 3cbc0 <nrfx_twim_2_irq_handler+0x54>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   3cba4:	6891      	ldr	r1, [r2, #8]
    p_reg->INTENCLR = mask;
   3cba6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3cbaa:	2102      	movs	r1, #2
   3cbac:	6091      	str	r1, [r2, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3cbae:	6892      	ldr	r2, [r2, #8]
    p_reg->INTENSET = mask;
   3cbb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cbb4:	2201      	movs	r2, #1
   3cbb6:	621a      	str	r2, [r3, #32]
   3cbb8:	615a      	str	r2, [r3, #20]
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   3cbba:	b006      	add	sp, #24
   3cbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cbc0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   3cbc4:	2b00      	cmp	r3, #0
   3cbc6:	d03e      	beq.n	3cc46 <nrfx_twim_2_irq_handler+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cbc8:	2300      	movs	r3, #0
        event.xfer_desc = p_cb->xfer_desc;
   3cbca:	4f3a      	ldr	r7, [pc, #232]	; (3ccb4 <nrfx_twim_2_irq_handler+0x148>)
   3cbcc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   3cbd0:	ae01      	add	r6, sp, #4
   3cbd2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3cbd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3cbd6:	683b      	ldr	r3, [r7, #0]
        if (p_cb->error)
   3cbd8:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        event.xfer_desc = p_cb->xfer_desc;
   3cbdc:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
   3cbde:	b179      	cbz	r1, 3cc00 <nrfx_twim_2_irq_handler+0x94>
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   3cbe0:	7b23      	ldrb	r3, [r4, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   3cbe2:	2b01      	cmp	r3, #1
    return p_reg->RXD.AMOUNT;
   3cbe4:	bf0c      	ite	eq
   3cbe6:	f8d5 253c 	ldreq.w	r2, [r5, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   3cbea:	f8d5 254c 	ldrne.w	r2, [r5, #1356]	; 0x54c
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   3cbee:	2b02      	cmp	r3, #2
   3cbf0:	4b2f      	ldr	r3, [pc, #188]	; (3ccb0 <nrfx_twim_2_irq_handler+0x144>)
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   3cbf2:	9202      	str	r2, [sp, #8]
    return p_reg->RXD.AMOUNT;
   3cbf4:	bf0c      	ite	eq
   3cbf6:	f8d3 353c 	ldreq.w	r3, [r3, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   3cbfa:	f8d3 354c 	ldrne.w	r3, [r3, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
   3cbfe:	9303      	str	r3, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cc00:	2200      	movs	r2, #0
   3cc02:	4b2b      	ldr	r3, [pc, #172]	; (3ccb0 <nrfx_twim_2_irq_handler+0x144>)
        if (!p_cb->repeated || p_cb->error)
   3cc04:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   3cc08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   3cc0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   3cc10:	b100      	cbz	r0, 3cc14 <nrfx_twim_2_irq_handler+0xa8>
   3cc12:	b129      	cbz	r1, 3cc20 <nrfx_twim_2_irq_handler+0xb4>
    p_reg->SHORTS = mask;
   3cc14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            p_cb->int_mask = 0;
   3cc18:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   3cc1a:	4a27      	ldr	r2, [pc, #156]	; (3ccb8 <nrfx_twim_2_irq_handler+0x14c>)
   3cc1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
   3cc20:	4a23      	ldr	r2, [pc, #140]	; (3ccb0 <nrfx_twim_2_irq_handler+0x144>)
   3cc22:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   3cc26:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   3cc2a:	079a      	lsls	r2, r3, #30
   3cc2c:	d532      	bpl.n	3cc94 <nrfx_twim_2_irq_handler+0x128>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   3cc2e:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   3cc30:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   3cc34:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   3cc38:	b90b      	cbnz	r3, 3cc3e <nrfx_twim_2_irq_handler+0xd2>
        p_cb->busy = false;
   3cc3a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->handler(&event, p_cb->p_context);
   3cc3e:	6861      	ldr	r1, [r4, #4]
   3cc40:	4668      	mov	r0, sp
   3cc42:	47c0      	blx	r8
   3cc44:	e7b9      	b.n	3cbba <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cc46:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   3cc4a:	7b23      	ldrb	r3, [r4, #12]
   3cc4c:	b983      	cbnz	r3, 3cc70 <nrfx_twim_2_irq_handler+0x104>
            event.xfer_desc = p_cb->xfer_desc;
   3cc4e:	4f19      	ldr	r7, [pc, #100]	; (3ccb4 <nrfx_twim_2_irq_handler+0x148>)
   3cc50:	ae01      	add	r6, sp, #4
   3cc52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3cc54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3cc56:	683b      	ldr	r3, [r7, #0]
   3cc58:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   3cc5a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   3cc5e:	2b00      	cmp	r3, #0
   3cc60:	d1de      	bne.n	3cc20 <nrfx_twim_2_irq_handler+0xb4>
    p_reg->SHORTS = mask;
   3cc62:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   3cc66:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   3cc68:	4b13      	ldr	r3, [pc, #76]	; (3ccb8 <nrfx_twim_2_irq_handler+0x14c>)
   3cc6a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   3cc6e:	e7d7      	b.n	3cc20 <nrfx_twim_2_irq_handler+0xb4>
    p_reg->SHORTS = mask;
   3cc70:	f44f 7300 	mov.w	r3, #512	; 0x200
   3cc74:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3cc78:	f240 2302 	movw	r3, #514	; 0x202
   3cc7c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   3cc7e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   3cc82:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3cc86:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   3cc88:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cc8c:	2301      	movs	r3, #1
   3cc8e:	60ab      	str	r3, [r5, #8]
   3cc90:	622b      	str	r3, [r5, #32]
   3cc92:	e792      	b.n	3cbba <nrfx_twim_2_irq_handler+0x4e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   3cc94:	f013 0304 	ands.w	r3, r3, #4
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   3cc98:	bf18      	it	ne
   3cc9a:	2302      	movne	r3, #2
   3cc9c:	e7c8      	b.n	3cc30 <nrfx_twim_2_irq_handler+0xc4>
   3cc9e:	bf00      	nop
   3cca0:	20026374 	.word	0x20026374
   3cca4:	00052293 	.word	0x00052293
   3cca8:	0005246f 	.word	0x0005246f
   3ccac:	000524aa 	.word	0x000524aa
   3ccb0:	4000a000 	.word	0x4000a000
   3ccb4:	20026380 	.word	0x20026380
   3ccb8:	019c0202 	.word	0x019c0202

0003ccbc <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   3ccbc:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   3ccbe:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   3ccc0:	4b08      	ldr	r3, [pc, #32]	; (3cce4 <z_sys_device_do_config_level+0x28>)
   3ccc2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   3ccc6:	3001      	adds	r0, #1
   3ccc8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3cccc:	42a5      	cmp	r5, r4
   3ccce:	d800      	bhi.n	3ccd2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   3ccd0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   3ccd2:	6823      	ldr	r3, [r4, #0]
   3ccd4:	4620      	mov	r0, r4
   3ccd6:	685b      	ldr	r3, [r3, #4]
   3ccd8:	4798      	blx	r3
		if (retval != 0) {
   3ccda:	b100      	cbz	r0, 3ccde <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   3ccdc:	6066      	str	r6, [r4, #4]
								info++) {
   3ccde:	340c      	adds	r4, #12
   3cce0:	e7f4      	b.n	3cccc <z_sys_device_do_config_level+0x10>
   3cce2:	bf00      	nop
   3cce4:	0004c458 	.word	0x0004c458

0003cce8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   3cce8:	4b10      	ldr	r3, [pc, #64]	; (3cd2c <z_impl_device_get_binding+0x44>)
{
   3ccea:	b570      	push	{r4, r5, r6, lr}
   3ccec:	4605      	mov	r5, r0
   3ccee:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   3ccf0:	4c0f      	ldr	r4, [pc, #60]	; (3cd30 <z_impl_device_get_binding+0x48>)
   3ccf2:	429c      	cmp	r4, r3
   3ccf4:	d104      	bne.n	3cd00 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   3ccf6:	4c0e      	ldr	r4, [pc, #56]	; (3cd30 <z_impl_device_get_binding+0x48>)
   3ccf8:	42b4      	cmp	r4, r6
   3ccfa:	d109      	bne.n	3cd10 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   3ccfc:	2400      	movs	r4, #0
   3ccfe:	e012      	b.n	3cd26 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   3cd00:	6862      	ldr	r2, [r4, #4]
   3cd02:	b11a      	cbz	r2, 3cd0c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   3cd04:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   3cd06:	6812      	ldr	r2, [r2, #0]
   3cd08:	42aa      	cmp	r2, r5
   3cd0a:	d00c      	beq.n	3cd26 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3cd0c:	340c      	adds	r4, #12
   3cd0e:	e7f0      	b.n	3ccf2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   3cd10:	6863      	ldr	r3, [r4, #4]
   3cd12:	b90b      	cbnz	r3, 3cd18 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3cd14:	340c      	adds	r4, #12
   3cd16:	e7ef      	b.n	3ccf8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   3cd18:	6823      	ldr	r3, [r4, #0]
   3cd1a:	4628      	mov	r0, r5
   3cd1c:	6819      	ldr	r1, [r3, #0]
   3cd1e:	f7dd f93d 	bl	19f9c <strcmp>
   3cd22:	2800      	cmp	r0, #0
   3cd24:	d1f6      	bne.n	3cd14 <z_impl_device_get_binding+0x2c>
}
   3cd26:	4620      	mov	r0, r4
   3cd28:	bd70      	pop	{r4, r5, r6, pc}
   3cd2a:	bf00      	nop
   3cd2c:	20032488 	.word	0x20032488
   3cd30:	20032320 	.word	0x20032320

0003cd34 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3cd34:	4b01      	ldr	r3, [pc, #4]	; (3cd3c <z_impl_z_errno+0x8>)
   3cd36:	6898      	ldr	r0, [r3, #8]
}
   3cd38:	3054      	adds	r0, #84	; 0x54
   3cd3a:	4770      	bx	lr
   3cd3c:	2002a578 	.word	0x2002a578

0003cd40 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3cd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cd44:	4605      	mov	r5, r0
   3cd46:	460f      	mov	r7, r1
	return z_impl_k_current_get();
   3cd48:	f002 f842 	bl	3edd0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
   3cd4c:	2301      	movs	r3, #1
   3cd4e:	4606      	mov	r6, r0
   3cd50:	f04f 0000 	mov.w	r0, #0
   3cd54:	4c2d      	ldr	r4, [pc, #180]	; (3ce0c <z_fatal_error+0xcc>)
   3cd56:	f363 0002 	bfi	r0, r3, #0, #3
   3cd5a:	4b2d      	ldr	r3, [pc, #180]	; (3ce10 <z_fatal_error+0xd0>)
   3cd5c:	2d04      	cmp	r5, #4
   3cd5e:	eba4 0403 	sub.w	r4, r4, r3
   3cd62:	bf98      	it	ls
   3cd64:	4b2b      	ldrls	r3, [pc, #172]	; (3ce14 <z_fatal_error+0xd4>)
   3cd66:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3cd6a:	f36f 00c5 	bfc	r0, #3, #3
   3cd6e:	bf94      	ite	ls
   3cd70:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   3cd74:	4b28      	ldrhi	r3, [pc, #160]	; (3ce18 <z_fatal_error+0xd8>)
   3cd76:	f364 108f 	bfi	r0, r4, #6, #10
   3cd7a:	462a      	mov	r2, r5
   3cd7c:	4927      	ldr	r1, [pc, #156]	; (3ce1c <z_fatal_error+0xdc>)
   3cd7e:	f00a fdc1 	bl	47904 <log_string_sync>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
   3cd82:	f04f 0800 	mov.w	r8, #0
   3cd86:	2301      	movs	r3, #1
   3cd88:	f363 0802 	bfi	r8, r3, #0, #3
   3cd8c:	f36f 08c5 	bfc	r8, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   3cd90:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   3cd92:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   3cd96:	f00d f9cd 	bl	4a134 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3cd9a:	2800      	cmp	r0, #0
   3cd9c:	d034      	beq.n	3ce08 <z_fatal_error+0xc8>
   3cd9e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3cda0:	4b1f      	ldr	r3, [pc, #124]	; (3ce20 <z_fatal_error+0xe0>)
   3cda2:	2a00      	cmp	r2, #0
   3cda4:	bf08      	it	eq
   3cda6:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3cda8:	f00a fdbe 	bl	47928 <log_strdup>
   3cdac:	4632      	mov	r2, r6
   3cdae:	4603      	mov	r3, r0
   3cdb0:	491c      	ldr	r1, [pc, #112]	; (3ce24 <z_fatal_error+0xe4>)
   3cdb2:	4640      	mov	r0, r8
   3cdb4:	f00a fda6 	bl	47904 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   3cdb8:	4639      	mov	r1, r7
   3cdba:	4628      	mov	r0, r5
   3cdbc:	f7e1 fa7e 	bl	1e2bc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3cdc0:	2d04      	cmp	r5, #4
   3cdc2:	d10c      	bne.n	3cdde <z_fatal_error+0x9e>
   3cdc4:	4918      	ldr	r1, [pc, #96]	; (3ce28 <z_fatal_error+0xe8>)
   3cdc6:	2373      	movs	r3, #115	; 0x73
   3cdc8:	4a18      	ldr	r2, [pc, #96]	; (3ce2c <z_fatal_error+0xec>)
   3cdca:	4819      	ldr	r0, [pc, #100]	; (3ce30 <z_fatal_error+0xf0>)
   3cdcc:	f00a fd7d 	bl	478ca <printk>
   3cdd0:	4818      	ldr	r0, [pc, #96]	; (3ce34 <z_fatal_error+0xf4>)
   3cdd2:	f00a fd7a 	bl	478ca <printk>
   3cdd6:	2173      	movs	r1, #115	; 0x73
   3cdd8:	4814      	ldr	r0, [pc, #80]	; (3ce2c <z_fatal_error+0xec>)
   3cdda:	f00a fd83 	bl	478e4 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   3cdde:	f002 f91b 	bl	3f018 <k_is_in_isr>
   3cde2:	b160      	cbz	r0, 3cdfe <z_fatal_error+0xbe>
   3cde4:	4914      	ldr	r1, [pc, #80]	; (3ce38 <z_fatal_error+0xf8>)
   3cde6:	2376      	movs	r3, #118	; 0x76
   3cde8:	4a10      	ldr	r2, [pc, #64]	; (3ce2c <z_fatal_error+0xec>)
   3cdea:	4811      	ldr	r0, [pc, #68]	; (3ce30 <z_fatal_error+0xf0>)
   3cdec:	f00a fd6d 	bl	478ca <printk>
   3cdf0:	4812      	ldr	r0, [pc, #72]	; (3ce3c <z_fatal_error+0xfc>)
   3cdf2:	f00a fd6a 	bl	478ca <printk>
   3cdf6:	2176      	movs	r1, #118	; 0x76
   3cdf8:	480c      	ldr	r0, [pc, #48]	; (3ce2c <z_fatal_error+0xec>)
   3cdfa:	f00a fd73 	bl	478e4 <assert_post_action>
	z_impl_k_thread_abort(thread);
   3cdfe:	4630      	mov	r0, r6
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   3ce00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3ce04:	f7e5 b90e 	b.w	22024 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3ce08:	4805      	ldr	r0, [pc, #20]	; (3ce20 <z_fatal_error+0xe0>)
   3ce0a:	e7cd      	b.n	3cda8 <z_fatal_error+0x68>
   3ce0c:	0004a790 	.word	0x0004a790
   3ce10:	0004a688 	.word	0x0004a688
   3ce14:	0004c470 	.word	0x0004c470
   3ce18:	000526dd 	.word	0x000526dd
   3ce1c:	000526f3 	.word	0x000526f3
   3ce20:	000526eb 	.word	0x000526eb
   3ce24:	00052711 	.word	0x00052711
   3ce28:	0005274c 	.word	0x0005274c
   3ce2c:	00052729 	.word	0x00052729
   3ce30:	0004ccf0 	.word	0x0004ccf0
   3ce34:	00052769 	.word	0x00052769
   3ce38:	0005279e 	.word	0x0005279e
   3ce3c:	000527ad 	.word	0x000527ad

0003ce40 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3ce40:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3ce42:	4d0b      	ldr	r5, [pc, #44]	; (3ce70 <idle+0x30>)
	__asm__ volatile(
   3ce44:	f04f 0220 	mov.w	r2, #32
   3ce48:	f3ef 8311 	mrs	r3, BASEPRI
   3ce4c:	f382 8811 	msr	BASEPRI, r2
   3ce50:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   3ce54:	f002 fd6e 	bl	3f934 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3ce58:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   3ce5a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3ce5c:	2802      	cmp	r0, #2
   3ce5e:	bfd8      	it	le
   3ce60:	4608      	movle	r0, r1
   3ce62:	f002 fdad 	bl	3f9c0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3ce66:	622c      	str	r4, [r5, #32]
	z_arch_cpu_idle();
   3ce68:	f7e4 fbea 	bl	21640 <z_arch_cpu_idle>
   3ce6c:	e7ea      	b.n	3ce44 <idle+0x4>
   3ce6e:	bf00      	nop
   3ce70:	2002a578 	.word	0x2002a578

0003ce74 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3ce74:	4802      	ldr	r0, [pc, #8]	; (3ce80 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3ce76:	4a03      	ldr	r2, [pc, #12]	; (3ce84 <z_bss_zero+0x10>)
   3ce78:	2100      	movs	r1, #0
   3ce7a:	1a12      	subs	r2, r2, r0
   3ce7c:	f004 b8dc 	b.w	41038 <memset>
   3ce80:	20020000 	.word	0x20020000
   3ce84:	2002c364 	.word	0x2002c364

0003ce88 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3ce88:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ce8a:	4806      	ldr	r0, [pc, #24]	; (3cea4 <z_data_copy+0x1c>)
   3ce8c:	4a06      	ldr	r2, [pc, #24]	; (3cea8 <z_data_copy+0x20>)
   3ce8e:	4907      	ldr	r1, [pc, #28]	; (3ceac <z_data_copy+0x24>)
   3ce90:	1a12      	subs	r2, r2, r0
   3ce92:	f7dd f80d 	bl	19eb0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3ce96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ce9a:	4a05      	ldr	r2, [pc, #20]	; (3ceb0 <z_data_copy+0x28>)
   3ce9c:	4905      	ldr	r1, [pc, #20]	; (3ceb4 <z_data_copy+0x2c>)
   3ce9e:	4806      	ldr	r0, [pc, #24]	; (3ceb8 <z_data_copy+0x30>)
   3cea0:	f7dd b806 	b.w	19eb0 <memcpy>
   3cea4:	20030ff0 	.word	0x20030ff0
   3cea8:	200325bc 	.word	0x200325bc
   3ceac:	00052f24 	.word	0x00052f24
   3ceb0:	00000000 	.word	0x00000000
   3ceb4:	00052f20 	.word	0x00052f20
   3ceb8:	20020000 	.word	0x20020000

0003cebc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   3cebc:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3cebe:	2002      	movs	r0, #2
   3cec0:	f7ff fefc 	bl	3ccbc <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   3cec4:	4807      	ldr	r0, [pc, #28]	; (3cee4 <bg_thread_main+0x28>)
   3cec6:	f00a fd00 	bl	478ca <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   3ceca:	2003      	movs	r0, #3
   3cecc:	f7ff fef6 	bl	3ccbc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   3ced0:	f002 f9a4 	bl	3f21c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3ced4:	f7e1 fe12 	bl	1eafc <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3ced8:	4a03      	ldr	r2, [pc, #12]	; (3cee8 <bg_thread_main+0x2c>)
   3ceda:	7b13      	ldrb	r3, [r2, #12]
   3cedc:	f023 0301 	bic.w	r3, r3, #1
   3cee0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3cee2:	bd08      	pop	{r3, pc}
   3cee4:	000527de 	.word	0x000527de
   3cee8:	20026458 	.word	0x20026458

0003ceec <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3ceec:	b580      	push	{r7, lr}
   3ceee:	b0b2      	sub	sp, #200	; 0xc8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3cef0:	f7e3 fb98 	bl	20624 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   3cef4:	4b36      	ldr	r3, [pc, #216]	; (3cfd0 <z_cstart+0xe4>)
   3cef6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3cefa:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3cefe:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3cf02:	2400      	movs	r4, #0
   3cf04:	23e0      	movs	r3, #224	; 0xe0
   3cf06:	4d33      	ldr	r5, [pc, #204]	; (3cfd4 <z_cstart+0xe8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   3cf08:	2701      	movs	r7, #1
   3cf0a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3cf0e:	77ec      	strb	r4, [r5, #31]
   3cf10:	762c      	strb	r4, [r5, #24]
   3cf12:	766c      	strb	r4, [r5, #25]
   3cf14:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3cf16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   3cf18:	4e2f      	ldr	r6, [pc, #188]	; (3cfd8 <z_cstart+0xec>)
   3cf1a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3cf1e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3cf20:	f7e5 f856 	bl	21fd0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3cf24:	f7e4 fb86 	bl	21634 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3cf28:	f04f 33ff 	mov.w	r3, #4294967295
   3cf2c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3cf2e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   3cf30:	ab06      	add	r3, sp, #24
   3cf32:	22b0      	movs	r2, #176	; 0xb0
   3cf34:	4621      	mov	r1, r4
   3cf36:	4618      	mov	r0, r3
   3cf38:	f004 f87e 	bl	41038 <memset>
	_current = &dummy_thread;
   3cf3c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3cf3e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   3cf40:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3cf44:	f7ff feba 	bl	3ccbc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3cf48:	4638      	mov	r0, r7
   3cf4a:	f7ff feb7 	bl	3ccbc <z_sys_device_do_config_level>
	z_sched_init();
   3cf4e:	f001 fddf 	bl	3eb10 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3cf52:	4b22      	ldr	r3, [pc, #136]	; (3cfdc <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   3cf54:	4d22      	ldr	r5, [pc, #136]	; (3cfe0 <z_cstart+0xf4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3cf56:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3cf5a:	2307      	movs	r3, #7
   3cf5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3cf60:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3cf64:	e9cd 4400 	strd	r4, r4, [sp]
   3cf68:	4b1e      	ldr	r3, [pc, #120]	; (3cfe4 <z_cstart+0xf8>)
   3cf6a:	491f      	ldr	r1, [pc, #124]	; (3cfe8 <z_cstart+0xfc>)
   3cf6c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3cf6e:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3cf70:	f002 f862 	bl	3f038 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3cf74:	7b6b      	ldrb	r3, [r5, #13]
   3cf76:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3cf7a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3cf7e:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3cf80:	d104      	bne.n	3cf8c <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   3cf82:	69ab      	ldr	r3, [r5, #24]
   3cf84:	b913      	cbnz	r3, 3cf8c <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   3cf86:	4628      	mov	r0, r5
   3cf88:	f001 f9c6 	bl	3e318 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   3cf8c:	4b17      	ldr	r3, [pc, #92]	; (3cfec <z_cstart+0x100>)
   3cf8e:	2201      	movs	r2, #1
   3cf90:	9305      	str	r3, [sp, #20]
   3cf92:	230f      	movs	r3, #15
   3cf94:	e9cd 3203 	strd	r3, r2, [sp, #12]
   3cf98:	2300      	movs	r3, #0
   3cf9a:	4d15      	ldr	r5, [pc, #84]	; (3cff0 <z_cstart+0x104>)
   3cf9c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3cfa0:	9300      	str	r3, [sp, #0]
   3cfa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3cfa6:	4b13      	ldr	r3, [pc, #76]	; (3cff4 <z_cstart+0x108>)
   3cfa8:	4913      	ldr	r1, [pc, #76]	; (3cff8 <z_cstart+0x10c>)
   3cfaa:	4628      	mov	r0, r5
   3cfac:	f002 f844 	bl	3f038 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3cfb0:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3cfb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3cfb6:	f023 0304 	bic.w	r3, r3, #4
   3cfba:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   3cfbc:	4b0f      	ldr	r3, [pc, #60]	; (3cffc <z_cstart+0x110>)
   3cfbe:	490a      	ldr	r1, [pc, #40]	; (3cfe8 <z_cstart+0xfc>)
	list->tail = (sys_dnode_t *)list;
   3cfc0:	e9c6 3306 	strd	r3, r3, [r6, #24]
   3cfc4:	4806      	ldr	r0, [pc, #24]	; (3cfe0 <z_cstart+0xf4>)
   3cfc6:	4b07      	ldr	r3, [pc, #28]	; (3cfe4 <z_cstart+0xf8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   3cfc8:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3cfca:	f7e4 fc31 	bl	21830 <z_arch_switch_to_main_thread>
   3cfce:	bf00      	nop
   3cfd0:	2002eaa8 	.word	0x2002eaa8
   3cfd4:	e000ed00 	.word	0xe000ed00
   3cfd8:	2002a578 	.word	0x2002a578
   3cfdc:	00052810 	.word	0x00052810
   3cfe0:	20026458 	.word	0x20026458
   3cfe4:	0003cebd 	.word	0x0003cebd
   3cfe8:	2002c968 	.word	0x2002c968
   3cfec:	00052815 	.word	0x00052815
   3cff0:	200263a8 	.word	0x200263a8
   3cff4:	0003ce41 	.word	0x0003ce41
   3cff8:	2002e968 	.word	0x2002e968
   3cffc:	2002a590 	.word	0x2002a590

0003d000 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   3d000:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   3d004:	4313      	orrs	r3, r2
   3d006:	079b      	lsls	r3, r3, #30
{
   3d008:	b510      	push	{r4, lr}
   3d00a:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   3d00c:	d00d      	beq.n	3d02a <create_free_list+0x2a>
   3d00e:	2327      	movs	r3, #39	; 0x27
   3d010:	4a0d      	ldr	r2, [pc, #52]	; (3d048 <create_free_list+0x48>)
   3d012:	490e      	ldr	r1, [pc, #56]	; (3d04c <create_free_list+0x4c>)
   3d014:	480e      	ldr	r0, [pc, #56]	; (3d050 <create_free_list+0x50>)
   3d016:	f00a fc58 	bl	478ca <printk>
   3d01a:	4621      	mov	r1, r4
   3d01c:	480d      	ldr	r0, [pc, #52]	; (3d054 <create_free_list+0x54>)
   3d01e:	f00a fc54 	bl	478ca <printk>
   3d022:	2127      	movs	r1, #39	; 0x27
   3d024:	4808      	ldr	r0, [pc, #32]	; (3d048 <create_free_list+0x48>)
   3d026:	f00a fc5d 	bl	478e4 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   3d02a:	2300      	movs	r3, #0
	p = slab->buffer;
   3d02c:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   3d02e:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   3d030:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3d032:	4299      	cmp	r1, r3
   3d034:	d100      	bne.n	3d038 <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   3d036:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   3d038:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3d03a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3d03c:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   3d03e:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   3d040:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3d042:	4402      	add	r2, r0
   3d044:	e7f5      	b.n	3d032 <create_free_list+0x32>
   3d046:	bf00      	nop
   3d048:	0005281a 	.word	0x0005281a
   3d04c:	00052840 	.word	0x00052840
   3d050:	0004ccf0 	.word	0x0004ccf0
   3d054:	0005288b 	.word	0x0005288b

0003d058 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   3d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3d05a:	4d0e      	ldr	r5, [pc, #56]	; (3d094 <init_mem_slab_module+0x3c>)
   3d05c:	4c0e      	ldr	r4, [pc, #56]	; (3d098 <init_mem_slab_module+0x40>)
   3d05e:	462f      	mov	r7, r5
   3d060:	4e0e      	ldr	r6, [pc, #56]	; (3d09c <init_mem_slab_module+0x44>)
   3d062:	42ac      	cmp	r4, r5
   3d064:	d90c      	bls.n	3d080 <init_mem_slab_module+0x28>
   3d066:	490e      	ldr	r1, [pc, #56]	; (3d0a0 <init_mem_slab_module+0x48>)
   3d068:	233e      	movs	r3, #62	; 0x3e
   3d06a:	4632      	mov	r2, r6
   3d06c:	480d      	ldr	r0, [pc, #52]	; (3d0a4 <init_mem_slab_module+0x4c>)
   3d06e:	f00a fc2c 	bl	478ca <printk>
   3d072:	480d      	ldr	r0, [pc, #52]	; (3d0a8 <init_mem_slab_module+0x50>)
   3d074:	f00a fc29 	bl	478ca <printk>
   3d078:	213e      	movs	r1, #62	; 0x3e
   3d07a:	4630      	mov	r0, r6
   3d07c:	f00a fc32 	bl	478e4 <assert_post_action>
   3d080:	42bc      	cmp	r4, r7
   3d082:	d301      	bcc.n	3d088 <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   3d084:	2000      	movs	r0, #0
   3d086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   3d088:	4620      	mov	r0, r4
   3d08a:	f7ff ffb9 	bl	3d000 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3d08e:	341c      	adds	r4, #28
   3d090:	e7e7      	b.n	3d062 <init_mem_slab_module+0xa>
   3d092:	bf00      	nop
   3d094:	200324a4 	.word	0x200324a4
   3d098:	20032488 	.word	0x20032488
   3d09c:	0005281a 	.word	0x0005281a
   3d0a0:	000528a9 	.word	0x000528a9
   3d0a4:	0004ccf0 	.word	0x0004ccf0
   3d0a8:	000528c6 	.word	0x000528c6

0003d0ac <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   3d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d0ae:	4604      	mov	r4, r0
   3d0b0:	460d      	mov	r5, r1
   3d0b2:	4616      	mov	r6, r2
   3d0b4:	f04f 0320 	mov.w	r3, #32
   3d0b8:	f3ef 8711 	mrs	r7, BASEPRI
   3d0bc:	f383 8811 	msr	BASEPRI, r3
   3d0c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d0c4:	4823      	ldr	r0, [pc, #140]	; (3d154 <k_mem_slab_alloc+0xa8>)
   3d0c6:	f001 ffd1 	bl	3f06c <z_spin_lock_valid>
   3d0ca:	b960      	cbnz	r0, 3d0e6 <k_mem_slab_alloc+0x3a>
   3d0cc:	4922      	ldr	r1, [pc, #136]	; (3d158 <k_mem_slab_alloc+0xac>)
   3d0ce:	235f      	movs	r3, #95	; 0x5f
   3d0d0:	4a22      	ldr	r2, [pc, #136]	; (3d15c <k_mem_slab_alloc+0xb0>)
   3d0d2:	4823      	ldr	r0, [pc, #140]	; (3d160 <k_mem_slab_alloc+0xb4>)
   3d0d4:	f00a fbf9 	bl	478ca <printk>
   3d0d8:	4822      	ldr	r0, [pc, #136]	; (3d164 <k_mem_slab_alloc+0xb8>)
   3d0da:	f00a fbf6 	bl	478ca <printk>
   3d0de:	215f      	movs	r1, #95	; 0x5f
   3d0e0:	481e      	ldr	r0, [pc, #120]	; (3d15c <k_mem_slab_alloc+0xb0>)
   3d0e2:	f00a fbff 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d0e6:	481b      	ldr	r0, [pc, #108]	; (3d154 <k_mem_slab_alloc+0xa8>)
   3d0e8:	f001 ffde 	bl	3f0a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   3d0ec:	6963      	ldr	r3, [r4, #20]
   3d0ee:	b1eb      	cbz	r3, 3d12c <k_mem_slab_alloc+0x80>
		/* take a free block */
		*mem = slab->free_list;
   3d0f0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   3d0f2:	6963      	ldr	r3, [r4, #20]
   3d0f4:	681b      	ldr	r3, [r3, #0]
   3d0f6:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   3d0f8:	69a3      	ldr	r3, [r4, #24]
   3d0fa:	3301      	adds	r3, #1
   3d0fc:	61a3      	str	r3, [r4, #24]
		result = 0;
   3d0fe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d100:	4814      	ldr	r0, [pc, #80]	; (3d154 <k_mem_slab_alloc+0xa8>)
   3d102:	f001 ffc1 	bl	3f088 <z_spin_unlock_valid>
   3d106:	b960      	cbnz	r0, 3d122 <k_mem_slab_alloc+0x76>
   3d108:	4917      	ldr	r1, [pc, #92]	; (3d168 <k_mem_slab_alloc+0xbc>)
   3d10a:	2372      	movs	r3, #114	; 0x72
   3d10c:	4a13      	ldr	r2, [pc, #76]	; (3d15c <k_mem_slab_alloc+0xb0>)
   3d10e:	4814      	ldr	r0, [pc, #80]	; (3d160 <k_mem_slab_alloc+0xb4>)
   3d110:	f00a fbdb 	bl	478ca <printk>
   3d114:	4815      	ldr	r0, [pc, #84]	; (3d16c <k_mem_slab_alloc+0xc0>)
   3d116:	f00a fbd8 	bl	478ca <printk>
   3d11a:	2172      	movs	r1, #114	; 0x72
   3d11c:	480f      	ldr	r0, [pc, #60]	; (3d15c <k_mem_slab_alloc+0xb0>)
   3d11e:	f00a fbe1 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d122:	f387 8811 	msr	BASEPRI, r7
   3d126:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   3d12a:	e010      	b.n	3d14e <k_mem_slab_alloc+0xa2>
	} else if (timeout == K_NO_WAIT) {
   3d12c:	b91e      	cbnz	r6, 3d136 <k_mem_slab_alloc+0x8a>
		*mem = NULL;
   3d12e:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   3d130:	f06f 040b 	mvn.w	r4, #11
   3d134:	e7e4      	b.n	3d100 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   3d136:	4622      	mov	r2, r4
   3d138:	4633      	mov	r3, r6
   3d13a:	4639      	mov	r1, r7
   3d13c:	4805      	ldr	r0, [pc, #20]	; (3d154 <k_mem_slab_alloc+0xa8>)
   3d13e:	f001 fb9f 	bl	3e880 <z_pend_curr>
		if (result == 0) {
   3d142:	4604      	mov	r4, r0
   3d144:	b918      	cbnz	r0, 3d14e <k_mem_slab_alloc+0xa2>
			*mem = _current->base.swap_data;
   3d146:	4b0a      	ldr	r3, [pc, #40]	; (3d170 <k_mem_slab_alloc+0xc4>)
   3d148:	689b      	ldr	r3, [r3, #8]
   3d14a:	695b      	ldr	r3, [r3, #20]
   3d14c:	602b      	str	r3, [r5, #0]
}
   3d14e:	4620      	mov	r0, r4
   3d150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d152:	bf00      	nop
   3d154:	20026508 	.word	0x20026508
   3d158:	0004d875 	.word	0x0004d875
   3d15c:	0004d84e 	.word	0x0004d84e
   3d160:	0004ccf0 	.word	0x0004ccf0
   3d164:	0004d88a 	.word	0x0004d88a
   3d168:	0004d89f 	.word	0x0004d89f
   3d16c:	0004d8b6 	.word	0x0004d8b6
   3d170:	2002a578 	.word	0x2002a578

0003d174 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   3d174:	b570      	push	{r4, r5, r6, lr}
   3d176:	4604      	mov	r4, r0
   3d178:	460d      	mov	r5, r1
	__asm__ volatile(
   3d17a:	f04f 0320 	mov.w	r3, #32
   3d17e:	f3ef 8611 	mrs	r6, BASEPRI
   3d182:	f383 8811 	msr	BASEPRI, r3
   3d186:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d18a:	4823      	ldr	r0, [pc, #140]	; (3d218 <k_mem_slab_free+0xa4>)
   3d18c:	f001 ff6e 	bl	3f06c <z_spin_lock_valid>
   3d190:	b960      	cbnz	r0, 3d1ac <k_mem_slab_free+0x38>
   3d192:	4922      	ldr	r1, [pc, #136]	; (3d21c <k_mem_slab_free+0xa8>)
   3d194:	235f      	movs	r3, #95	; 0x5f
   3d196:	4a22      	ldr	r2, [pc, #136]	; (3d220 <k_mem_slab_free+0xac>)
   3d198:	4822      	ldr	r0, [pc, #136]	; (3d224 <k_mem_slab_free+0xb0>)
   3d19a:	f00a fb96 	bl	478ca <printk>
   3d19e:	4822      	ldr	r0, [pc, #136]	; (3d228 <k_mem_slab_free+0xb4>)
   3d1a0:	f00a fb93 	bl	478ca <printk>
   3d1a4:	215f      	movs	r1, #95	; 0x5f
   3d1a6:	481e      	ldr	r0, [pc, #120]	; (3d220 <k_mem_slab_free+0xac>)
   3d1a8:	f00a fb9c 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d1ac:	481a      	ldr	r0, [pc, #104]	; (3d218 <k_mem_slab_free+0xa4>)
   3d1ae:	f001 ff7b 	bl	3f0a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3d1b2:	4620      	mov	r0, r4
   3d1b4:	f001 fc20 	bl	3e9f8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   3d1b8:	b180      	cbz	r0, 3d1dc <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3d1ba:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3d1bc:	682a      	ldr	r2, [r5, #0]
   3d1be:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   3d1c0:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d1c2:	7b42      	ldrb	r2, [r0, #13]
   3d1c4:	06d2      	lsls	r2, r2, #27
   3d1c6:	d103      	bne.n	3d1d0 <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   3d1c8:	6983      	ldr	r3, [r0, #24]
   3d1ca:	b90b      	cbnz	r3, 3d1d0 <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   3d1cc:	f001 f8a4 	bl	3e318 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   3d1d0:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3d1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3d1d6:	4810      	ldr	r0, [pc, #64]	; (3d218 <k_mem_slab_free+0xa4>)
   3d1d8:	f000 bea8 	b.w	3df2c <z_reschedule>
		**(char ***)mem = slab->free_list;
   3d1dc:	682b      	ldr	r3, [r5, #0]
   3d1de:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d1e0:	480d      	ldr	r0, [pc, #52]	; (3d218 <k_mem_slab_free+0xa4>)
   3d1e2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   3d1e4:	682b      	ldr	r3, [r5, #0]
   3d1e6:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   3d1e8:	69a3      	ldr	r3, [r4, #24]
   3d1ea:	3b01      	subs	r3, #1
   3d1ec:	61a3      	str	r3, [r4, #24]
   3d1ee:	f001 ff4b 	bl	3f088 <z_spin_unlock_valid>
   3d1f2:	b960      	cbnz	r0, 3d20e <k_mem_slab_free+0x9a>
   3d1f4:	490d      	ldr	r1, [pc, #52]	; (3d22c <k_mem_slab_free+0xb8>)
   3d1f6:	2372      	movs	r3, #114	; 0x72
   3d1f8:	4a09      	ldr	r2, [pc, #36]	; (3d220 <k_mem_slab_free+0xac>)
   3d1fa:	480a      	ldr	r0, [pc, #40]	; (3d224 <k_mem_slab_free+0xb0>)
   3d1fc:	f00a fb65 	bl	478ca <printk>
   3d200:	480b      	ldr	r0, [pc, #44]	; (3d230 <k_mem_slab_free+0xbc>)
   3d202:	f00a fb62 	bl	478ca <printk>
   3d206:	2172      	movs	r1, #114	; 0x72
   3d208:	4805      	ldr	r0, [pc, #20]	; (3d220 <k_mem_slab_free+0xac>)
   3d20a:	f00a fb6b 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d20e:	f386 8811 	msr	BASEPRI, r6
   3d212:	f3bf 8f6f 	isb	sy
}
   3d216:	bd70      	pop	{r4, r5, r6, pc}
   3d218:	20026508 	.word	0x20026508
   3d21c:	0004d875 	.word	0x0004d875
   3d220:	0004d84e 	.word	0x0004d84e
   3d224:	0004ccf0 	.word	0x0004ccf0
   3d228:	0004d88a 	.word	0x0004d88a
   3d22c:	0004d89f 	.word	0x0004d89f
   3d230:	0004d8b6 	.word	0x0004d8b6

0003d234 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   3d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3d236:	4d10      	ldr	r5, [pc, #64]	; (3d278 <init_static_pools+0x44>)
   3d238:	4c10      	ldr	r4, [pc, #64]	; (3d27c <init_static_pools+0x48>)
   3d23a:	462f      	mov	r7, r5
   3d23c:	4e10      	ldr	r6, [pc, #64]	; (3d280 <init_static_pools+0x4c>)
   3d23e:	42ac      	cmp	r4, r5
   3d240:	d90c      	bls.n	3d25c <init_static_pools+0x28>
   3d242:	4910      	ldr	r1, [pc, #64]	; (3d284 <init_static_pools+0x50>)
   3d244:	2328      	movs	r3, #40	; 0x28
   3d246:	4632      	mov	r2, r6
   3d248:	480f      	ldr	r0, [pc, #60]	; (3d288 <init_static_pools+0x54>)
   3d24a:	f00a fb3e 	bl	478ca <printk>
   3d24e:	480f      	ldr	r0, [pc, #60]	; (3d28c <init_static_pools+0x58>)
   3d250:	f00a fb3b 	bl	478ca <printk>
   3d254:	2128      	movs	r1, #40	; 0x28
   3d256:	4630      	mov	r0, r6
   3d258:	f00a fb44 	bl	478e4 <assert_post_action>
   3d25c:	42bc      	cmp	r4, r7
   3d25e:	d301      	bcc.n	3d264 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   3d260:	2000      	movs	r0, #0
   3d262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d264:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   3d268:	4620      	mov	r0, r4
   3d26a:	e9c4 3305 	strd	r3, r3, [r4, #20]
   3d26e:	f009 ff67 	bl	47140 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3d272:	341c      	adds	r4, #28
   3d274:	e7e3      	b.n	3d23e <init_static_pools+0xa>
   3d276:	bf00      	nop
   3d278:	200324c0 	.word	0x200324c0
   3d27c:	200324a4 	.word	0x200324a4
   3d280:	000528e5 	.word	0x000528e5
   3d284:	0005290a 	.word	0x0005290a
   3d288:	0004ccf0 	.word	0x0004ccf0
   3d28c:	000528c6 	.word	0x000528c6

0003d290 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   3d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d294:	4607      	mov	r7, r0
   3d296:	b085      	sub	sp, #20
   3d298:	460d      	mov	r5, r1
   3d29a:	4692      	mov	sl, r2
   3d29c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3d29e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   3d2a2:	2b0d      	cmp	r3, #13
   3d2a4:	d805      	bhi.n	3d2b2 <k_mem_pool_alloc+0x22>
   3d2a6:	2b00      	cmp	r3, #0
   3d2a8:	d04c      	beq.n	3d344 <k_mem_pool_alloc+0xb4>
   3d2aa:	4b2a      	ldr	r3, [pc, #168]	; (3d354 <k_mem_pool_alloc+0xc4>)
   3d2ac:	685b      	ldr	r3, [r3, #4]
   3d2ae:	051a      	lsls	r2, r3, #20
   3d2b0:	d448      	bmi.n	3d344 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3d2b2:	2c00      	cmp	r4, #0
   3d2b4:	d139      	bne.n	3d32a <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   3d2b6:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   3d2ba:	4b27      	ldr	r3, [pc, #156]	; (3d358 <k_mem_pool_alloc+0xc8>)
   3d2bc:	4e27      	ldr	r6, [pc, #156]	; (3d35c <k_mem_pool_alloc+0xcc>)
   3d2be:	1afb      	subs	r3, r7, r3
   3d2c0:	109b      	asrs	r3, r3, #2
   3d2c2:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   3d2c4:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   3d2c8:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   3d2ca:	ab03      	add	r3, sp, #12
   3d2cc:	aa02      	add	r2, sp, #8
   3d2ce:	9500      	str	r5, [sp, #0]
   3d2d0:	4651      	mov	r1, sl
   3d2d2:	4638      	mov	r0, r7
   3d2d4:	f009 ff80 	bl	471d8 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   3d2d8:	796b      	ldrb	r3, [r5, #5]
   3d2da:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   3d2dc:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   3d2de:	f362 0303 	bfi	r3, r2, #0, #4
   3d2e2:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   3d2e4:	686b      	ldr	r3, [r5, #4]
   3d2e6:	9a03      	ldr	r2, [sp, #12]
   3d2e8:	f362 331f 	bfi	r3, r2, #12, #20
   3d2ec:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   3d2ee:	b1c8      	cbz	r0, 3d324 <k_mem_pool_alloc+0x94>
   3d2f0:	b1c4      	cbz	r4, 3d324 <k_mem_pool_alloc+0x94>
   3d2f2:	f110 0f0c 	cmn.w	r0, #12
   3d2f6:	d115      	bne.n	3d324 <k_mem_pool_alloc+0x94>
	__asm__ volatile(
   3d2f8:	f04f 0320 	mov.w	r3, #32
   3d2fc:	f3ef 8011 	mrs	r0, BASEPRI
   3d300:	f383 8811 	msr	BASEPRI, r3
   3d304:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   3d308:	4622      	mov	r2, r4
   3d30a:	4659      	mov	r1, fp
   3d30c:	f001 fa60 	bl	3e7d0 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   3d310:	1c63      	adds	r3, r4, #1
   3d312:	d0da      	beq.n	3d2ca <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   3d314:	f00c ff78 	bl	4a208 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   3d318:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   3d31c:	2c00      	cmp	r4, #0
   3d31e:	dcd4      	bgt.n	3d2ca <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   3d320:	f06f 000a 	mvn.w	r0, #10
}
   3d324:	b005      	add	sp, #20
   3d326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3d32a:	490d      	ldr	r1, [pc, #52]	; (3d360 <k_mem_pool_alloc+0xd0>)
   3d32c:	2337      	movs	r3, #55	; 0x37
   3d32e:	4a0d      	ldr	r2, [pc, #52]	; (3d364 <k_mem_pool_alloc+0xd4>)
   3d330:	480d      	ldr	r0, [pc, #52]	; (3d368 <k_mem_pool_alloc+0xd8>)
   3d332:	f00a faca 	bl	478ca <printk>
   3d336:	480d      	ldr	r0, [pc, #52]	; (3d36c <k_mem_pool_alloc+0xdc>)
   3d338:	f00a fac7 	bl	478ca <printk>
   3d33c:	2137      	movs	r1, #55	; 0x37
   3d33e:	4809      	ldr	r0, [pc, #36]	; (3d364 <k_mem_pool_alloc+0xd4>)
   3d340:	f00a fad0 	bl	478e4 <assert_post_action>
	if (timeout > 0) {
   3d344:	2c00      	cmp	r4, #0
   3d346:	ddb6      	ble.n	3d2b6 <k_mem_pool_alloc+0x26>
   3d348:	f00c ff5e 	bl	4a208 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   3d34c:	eb10 0804 	adds.w	r8, r0, r4
   3d350:	e7b3      	b.n	3d2ba <k_mem_pool_alloc+0x2a>
   3d352:	bf00      	nop
   3d354:	e000ed00 	.word	0xe000ed00
   3d358:	200324a4 	.word	0x200324a4
   3d35c:	b6db6db7 	.word	0xb6db6db7
   3d360:	00052924 	.word	0x00052924
   3d364:	000528e5 	.word	0x000528e5
   3d368:	0004ccf0 	.word	0x0004ccf0
   3d36c:	0005294a 	.word	0x0005294a

0003d370 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   3d370:	b570      	push	{r4, r5, r6, lr}
   3d372:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   3d374:	6802      	ldr	r2, [r0, #0]
   3d376:	7841      	ldrb	r1, [r0, #1]
   3d378:	4d23      	ldr	r5, [pc, #140]	; (3d408 <k_mem_pool_free_id+0x98>)
   3d37a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3d37e:	00a4      	lsls	r4, r4, #2
   3d380:	0b12      	lsrs	r2, r2, #12
   3d382:	f001 010f 	and.w	r1, r1, #15
   3d386:	1928      	adds	r0, r5, r4
   3d388:	f7e2 fdd4 	bl	1ff34 <z_sys_mem_pool_block_free>
   3d38c:	f04f 0320 	mov.w	r3, #32
   3d390:	f3ef 8611 	mrs	r6, BASEPRI
   3d394:	f383 8811 	msr	BASEPRI, r3
   3d398:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d39c:	481b      	ldr	r0, [pc, #108]	; (3d40c <k_mem_pool_free_id+0x9c>)
   3d39e:	f001 fe65 	bl	3f06c <z_spin_lock_valid>
   3d3a2:	b960      	cbnz	r0, 3d3be <k_mem_pool_free_id+0x4e>
   3d3a4:	491a      	ldr	r1, [pc, #104]	; (3d410 <k_mem_pool_free_id+0xa0>)
   3d3a6:	235f      	movs	r3, #95	; 0x5f
   3d3a8:	4a1a      	ldr	r2, [pc, #104]	; (3d414 <k_mem_pool_free_id+0xa4>)
   3d3aa:	481b      	ldr	r0, [pc, #108]	; (3d418 <k_mem_pool_free_id+0xa8>)
   3d3ac:	f00a fa8d 	bl	478ca <printk>
   3d3b0:	481a      	ldr	r0, [pc, #104]	; (3d41c <k_mem_pool_free_id+0xac>)
   3d3b2:	f00a fa8a 	bl	478ca <printk>
   3d3b6:	215f      	movs	r1, #95	; 0x5f
   3d3b8:	4816      	ldr	r0, [pc, #88]	; (3d414 <k_mem_pool_free_id+0xa4>)
   3d3ba:	f00a fa93 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d3be:	4813      	ldr	r0, [pc, #76]	; (3d40c <k_mem_pool_free_id+0x9c>)
   3d3c0:	f001 fe72 	bl	3f0a8 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   3d3c4:	f104 0014 	add.w	r0, r4, #20
   3d3c8:	4428      	add	r0, r5
   3d3ca:	f00c fe76 	bl	4a0ba <z_unpend_all>

	if (need_sched != 0) {
   3d3ce:	b128      	cbz	r0, 3d3dc <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   3d3d0:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   3d3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3d3d6:	480d      	ldr	r0, [pc, #52]	; (3d40c <k_mem_pool_free_id+0x9c>)
   3d3d8:	f000 bda8 	b.w	3df2c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d3dc:	480b      	ldr	r0, [pc, #44]	; (3d40c <k_mem_pool_free_id+0x9c>)
   3d3de:	f001 fe53 	bl	3f088 <z_spin_unlock_valid>
   3d3e2:	b960      	cbnz	r0, 3d3fe <k_mem_pool_free_id+0x8e>
   3d3e4:	490e      	ldr	r1, [pc, #56]	; (3d420 <k_mem_pool_free_id+0xb0>)
   3d3e6:	2372      	movs	r3, #114	; 0x72
   3d3e8:	4a0a      	ldr	r2, [pc, #40]	; (3d414 <k_mem_pool_free_id+0xa4>)
   3d3ea:	480b      	ldr	r0, [pc, #44]	; (3d418 <k_mem_pool_free_id+0xa8>)
   3d3ec:	f00a fa6d 	bl	478ca <printk>
   3d3f0:	480c      	ldr	r0, [pc, #48]	; (3d424 <k_mem_pool_free_id+0xb4>)
   3d3f2:	f00a fa6a 	bl	478ca <printk>
   3d3f6:	2172      	movs	r1, #114	; 0x72
   3d3f8:	4806      	ldr	r0, [pc, #24]	; (3d414 <k_mem_pool_free_id+0xa4>)
   3d3fa:	f00a fa73 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d3fe:	f386 8811 	msr	BASEPRI, r6
   3d402:	f3bf 8f6f 	isb	sy
}
   3d406:	bd70      	pop	{r4, r5, r6, pc}
   3d408:	200324a4 	.word	0x200324a4
   3d40c:	2002a570 	.word	0x2002a570
   3d410:	0004d875 	.word	0x0004d875
   3d414:	0004d84e 	.word	0x0004d84e
   3d418:	0004ccf0 	.word	0x0004ccf0
   3d41c:	0004d88a 	.word	0x0004d88a
   3d420:	0004d89f 	.word	0x0004d89f
   3d424:	0004d8b6 	.word	0x0004d8b6

0003d428 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   3d428:	4601      	mov	r1, r0
   3d42a:	4801      	ldr	r0, [pc, #4]	; (3d430 <k_malloc+0x8>)
   3d42c:	f00c bdc6 	b.w	49fbc <k_mem_pool_malloc>
   3d430:	200324a4 	.word	0x200324a4

0003d434 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   3d434:	4b03      	ldr	r3, [pc, #12]	; (3d444 <z_thread_malloc+0x10>)
{
   3d436:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   3d438:	689b      	ldr	r3, [r3, #8]
   3d43a:	6e18      	ldr	r0, [r3, #96]	; 0x60
   3d43c:	b108      	cbz	r0, 3d442 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   3d43e:	f00c bdbd 	b.w	49fbc <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   3d442:	4770      	bx	lr
   3d444:	2002a578 	.word	0x2002a578

0003d448 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d44c:	4604      	mov	r4, r0
   3d44e:	4688      	mov	r8, r1
   3d450:	4615      	mov	r5, r2
   3d452:	f3ef 8305 	mrs	r3, IPSR
   3d456:	2b0d      	cmp	r3, #13
   3d458:	d804      	bhi.n	3d464 <z_impl_k_msgq_put+0x1c>
   3d45a:	b18b      	cbz	r3, 3d480 <z_impl_k_msgq_put+0x38>
   3d45c:	4b42      	ldr	r3, [pc, #264]	; (3d568 <z_impl_k_msgq_put+0x120>)
   3d45e:	685b      	ldr	r3, [r3, #4]
   3d460:	051a      	lsls	r2, r3, #20
   3d462:	d40d      	bmi.n	3d480 <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3d464:	b165      	cbz	r5, 3d480 <z_impl_k_msgq_put+0x38>
   3d466:	4941      	ldr	r1, [pc, #260]	; (3d56c <z_impl_k_msgq_put+0x124>)
   3d468:	2371      	movs	r3, #113	; 0x71
   3d46a:	4a41      	ldr	r2, [pc, #260]	; (3d570 <z_impl_k_msgq_put+0x128>)
   3d46c:	4841      	ldr	r0, [pc, #260]	; (3d574 <z_impl_k_msgq_put+0x12c>)
   3d46e:	f00a fa2c 	bl	478ca <printk>
   3d472:	4841      	ldr	r0, [pc, #260]	; (3d578 <z_impl_k_msgq_put+0x130>)
   3d474:	f00a fa29 	bl	478ca <printk>
   3d478:	2171      	movs	r1, #113	; 0x71
   3d47a:	483d      	ldr	r0, [pc, #244]	; (3d570 <z_impl_k_msgq_put+0x128>)
   3d47c:	f00a fa32 	bl	478e4 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3d480:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3d484:	f04f 0320 	mov.w	r3, #32
   3d488:	f3ef 8711 	mrs	r7, BASEPRI
   3d48c:	f383 8811 	msr	BASEPRI, r3
   3d490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d494:	4630      	mov	r0, r6
   3d496:	f001 fde9 	bl	3f06c <z_spin_lock_valid>
   3d49a:	b960      	cbnz	r0, 3d4b6 <z_impl_k_msgq_put+0x6e>
   3d49c:	4937      	ldr	r1, [pc, #220]	; (3d57c <z_impl_k_msgq_put+0x134>)
   3d49e:	235f      	movs	r3, #95	; 0x5f
   3d4a0:	4a37      	ldr	r2, [pc, #220]	; (3d580 <z_impl_k_msgq_put+0x138>)
   3d4a2:	4834      	ldr	r0, [pc, #208]	; (3d574 <z_impl_k_msgq_put+0x12c>)
   3d4a4:	f00a fa11 	bl	478ca <printk>
   3d4a8:	4836      	ldr	r0, [pc, #216]	; (3d584 <z_impl_k_msgq_put+0x13c>)
   3d4aa:	f00a fa0e 	bl	478ca <printk>
   3d4ae:	215f      	movs	r1, #95	; 0x5f
   3d4b0:	4833      	ldr	r0, [pc, #204]	; (3d580 <z_impl_k_msgq_put+0x138>)
   3d4b2:	f00a fa17 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d4b6:	4630      	mov	r0, r6
   3d4b8:	f001 fdf6 	bl	3f0a8 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3d4bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3d4be:	6923      	ldr	r3, [r4, #16]
   3d4c0:	429a      	cmp	r2, r3
   3d4c2:	d241      	bcs.n	3d548 <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3d4c4:	4620      	mov	r0, r4
   3d4c6:	f001 fa97 	bl	3e9f8 <z_unpend_first_thread>
   3d4ca:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   3d4cc:	4605      	mov	r5, r0
   3d4ce:	4641      	mov	r1, r8
   3d4d0:	b1a0      	cbz	r0, 3d4fc <z_impl_k_msgq_put+0xb4>
   3d4d2:	6940      	ldr	r0, [r0, #20]
   3d4d4:	f7dc fcec 	bl	19eb0 <memcpy>
   3d4d8:	2300      	movs	r3, #0
   3d4da:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d4dc:	7b6b      	ldrb	r3, [r5, #13]
   3d4de:	06db      	lsls	r3, r3, #27
   3d4e0:	d104      	bne.n	3d4ec <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   3d4e2:	69ab      	ldr	r3, [r5, #24]
   3d4e4:	b913      	cbnz	r3, 3d4ec <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   3d4e6:	4628      	mov	r0, r5
   3d4e8:	f000 ff16 	bl	3e318 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3d4ec:	4639      	mov	r1, r7
   3d4ee:	4630      	mov	r0, r6
   3d4f0:	f000 fd1c 	bl	3df2c <z_reschedule>
			return 0;
   3d4f4:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3d4f6:	4620      	mov	r0, r4
   3d4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d4fc:	6a20      	ldr	r0, [r4, #32]
   3d4fe:	f7dc fcd7 	bl	19eb0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3d502:	6a23      	ldr	r3, [r4, #32]
   3d504:	68e2      	ldr	r2, [r4, #12]
   3d506:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3d508:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3d50a:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3d50c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3d50e:	bf04      	itt	eq
   3d510:	6963      	ldreq	r3, [r4, #20]
   3d512:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3d514:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d516:	3301      	adds	r3, #1
   3d518:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3d51a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d51c:	4630      	mov	r0, r6
   3d51e:	f001 fdb3 	bl	3f088 <z_spin_unlock_valid>
   3d522:	b960      	cbnz	r0, 3d53e <z_impl_k_msgq_put+0xf6>
   3d524:	4918      	ldr	r1, [pc, #96]	; (3d588 <z_impl_k_msgq_put+0x140>)
   3d526:	2372      	movs	r3, #114	; 0x72
   3d528:	4a15      	ldr	r2, [pc, #84]	; (3d580 <z_impl_k_msgq_put+0x138>)
   3d52a:	4812      	ldr	r0, [pc, #72]	; (3d574 <z_impl_k_msgq_put+0x12c>)
   3d52c:	f00a f9cd 	bl	478ca <printk>
   3d530:	4816      	ldr	r0, [pc, #88]	; (3d58c <z_impl_k_msgq_put+0x144>)
   3d532:	f00a f9ca 	bl	478ca <printk>
   3d536:	2172      	movs	r1, #114	; 0x72
   3d538:	4811      	ldr	r0, [pc, #68]	; (3d580 <z_impl_k_msgq_put+0x138>)
   3d53a:	f00a f9d3 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d53e:	f387 8811 	msr	BASEPRI, r7
   3d542:	f3bf 8f6f 	isb	sy
	return result;
   3d546:	e7d6      	b.n	3d4f6 <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   3d548:	b15d      	cbz	r5, 3d562 <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   3d54a:	4b11      	ldr	r3, [pc, #68]	; (3d590 <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d54c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3d54e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d550:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3d552:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d556:	4630      	mov	r0, r6
   3d558:	462b      	mov	r3, r5
}
   3d55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d55e:	f001 b98f 	b.w	3e880 <z_pend_curr>
		result = -ENOMSG;
   3d562:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3d566:	e7d9      	b.n	3d51c <z_impl_k_msgq_put+0xd4>
   3d568:	e000ed00 	.word	0xe000ed00
   3d56c:	0005299b 	.word	0x0005299b
   3d570:	0005294d 	.word	0x0005294d
   3d574:	0004ccf0 	.word	0x0004ccf0
   3d578:	0005294a 	.word	0x0005294a
   3d57c:	0004d875 	.word	0x0004d875
   3d580:	0004d84e 	.word	0x0004d84e
   3d584:	0004d88a 	.word	0x0004d88a
   3d588:	0004d89f 	.word	0x0004d89f
   3d58c:	0004d8b6 	.word	0x0004d8b6
   3d590:	2002a578 	.word	0x2002a578

0003d594 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d598:	4604      	mov	r4, r0
   3d59a:	4688      	mov	r8, r1
   3d59c:	4615      	mov	r5, r2
   3d59e:	f3ef 8305 	mrs	r3, IPSR
   3d5a2:	2b0d      	cmp	r3, #13
   3d5a4:	d804      	bhi.n	3d5b0 <z_impl_k_msgq_get+0x1c>
   3d5a6:	b18b      	cbz	r3, 3d5cc <z_impl_k_msgq_get+0x38>
   3d5a8:	4b48      	ldr	r3, [pc, #288]	; (3d6cc <z_impl_k_msgq_get+0x138>)
   3d5aa:	685b      	ldr	r3, [r3, #4]
   3d5ac:	051a      	lsls	r2, r3, #20
   3d5ae:	d40d      	bmi.n	3d5cc <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3d5b0:	b165      	cbz	r5, 3d5cc <z_impl_k_msgq_get+0x38>
   3d5b2:	4947      	ldr	r1, [pc, #284]	; (3d6d0 <z_impl_k_msgq_get+0x13c>)
   3d5b4:	23bc      	movs	r3, #188	; 0xbc
   3d5b6:	4a47      	ldr	r2, [pc, #284]	; (3d6d4 <z_impl_k_msgq_get+0x140>)
   3d5b8:	4847      	ldr	r0, [pc, #284]	; (3d6d8 <z_impl_k_msgq_get+0x144>)
   3d5ba:	f00a f986 	bl	478ca <printk>
   3d5be:	4847      	ldr	r0, [pc, #284]	; (3d6dc <z_impl_k_msgq_get+0x148>)
   3d5c0:	f00a f983 	bl	478ca <printk>
   3d5c4:	21bc      	movs	r1, #188	; 0xbc
   3d5c6:	4843      	ldr	r0, [pc, #268]	; (3d6d4 <z_impl_k_msgq_get+0x140>)
   3d5c8:	f00a f98c 	bl	478e4 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3d5cc:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3d5d0:	f04f 0320 	mov.w	r3, #32
   3d5d4:	f3ef 8711 	mrs	r7, BASEPRI
   3d5d8:	f383 8811 	msr	BASEPRI, r3
   3d5dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d5e0:	4630      	mov	r0, r6
   3d5e2:	f001 fd43 	bl	3f06c <z_spin_lock_valid>
   3d5e6:	b960      	cbnz	r0, 3d602 <z_impl_k_msgq_get+0x6e>
   3d5e8:	493d      	ldr	r1, [pc, #244]	; (3d6e0 <z_impl_k_msgq_get+0x14c>)
   3d5ea:	235f      	movs	r3, #95	; 0x5f
   3d5ec:	4a3d      	ldr	r2, [pc, #244]	; (3d6e4 <z_impl_k_msgq_get+0x150>)
   3d5ee:	483a      	ldr	r0, [pc, #232]	; (3d6d8 <z_impl_k_msgq_get+0x144>)
   3d5f0:	f00a f96b 	bl	478ca <printk>
   3d5f4:	483c      	ldr	r0, [pc, #240]	; (3d6e8 <z_impl_k_msgq_get+0x154>)
   3d5f6:	f00a f968 	bl	478ca <printk>
   3d5fa:	215f      	movs	r1, #95	; 0x5f
   3d5fc:	4839      	ldr	r0, [pc, #228]	; (3d6e4 <z_impl_k_msgq_get+0x150>)
   3d5fe:	f00a f971 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d602:	4630      	mov	r0, r6
   3d604:	f001 fd50 	bl	3f0a8 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3d608:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d60a:	2b00      	cmp	r3, #0
   3d60c:	d039      	beq.n	3d682 <z_impl_k_msgq_get+0xee>
   3d60e:	68e2      	ldr	r2, [r4, #12]
   3d610:	69e1      	ldr	r1, [r4, #28]
   3d612:	4640      	mov	r0, r8
   3d614:	f7dc fc4c 	bl	19eb0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3d618:	69e3      	ldr	r3, [r4, #28]
   3d61a:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3d61c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3d61e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3d620:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3d622:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3d624:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3d626:	bf04      	itt	eq
   3d628:	6963      	ldreq	r3, [r4, #20]
   3d62a:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3d62c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d62e:	3b01      	subs	r3, #1
   3d630:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3d632:	f001 f9e1 	bl	3e9f8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3d636:	4605      	mov	r5, r0
   3d638:	2800      	cmp	r0, #0
   3d63a:	d031      	beq.n	3d6a0 <z_impl_k_msgq_get+0x10c>
   3d63c:	68e2      	ldr	r2, [r4, #12]
   3d63e:	6941      	ldr	r1, [r0, #20]
   3d640:	6a20      	ldr	r0, [r4, #32]
   3d642:	f7dc fc35 	bl	19eb0 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3d646:	6a23      	ldr	r3, [r4, #32]
   3d648:	68e2      	ldr	r2, [r4, #12]
   3d64a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3d64c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3d64e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3d650:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3d652:	bf04      	itt	eq
   3d654:	6963      	ldreq	r3, [r4, #20]
   3d656:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   3d658:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d65a:	3301      	adds	r3, #1
   3d65c:	6263      	str	r3, [r4, #36]	; 0x24
   3d65e:	2300      	movs	r3, #0
   3d660:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d662:	7b6b      	ldrb	r3, [r5, #13]
   3d664:	06db      	lsls	r3, r3, #27
   3d666:	d104      	bne.n	3d672 <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   3d668:	69ab      	ldr	r3, [r5, #24]
   3d66a:	b913      	cbnz	r3, 3d672 <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   3d66c:	4628      	mov	r0, r5
   3d66e:	f000 fe53 	bl	3e318 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3d672:	4639      	mov	r1, r7
   3d674:	4630      	mov	r0, r6
   3d676:	f000 fc59 	bl	3df2c <z_reschedule>
			return 0;
   3d67a:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3d67c:	4628      	mov	r0, r5
   3d67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   3d682:	b15d      	cbz	r5, 3d69c <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   3d684:	4b19      	ldr	r3, [pc, #100]	; (3d6ec <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d686:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3d688:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d68a:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3d68c:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d690:	4630      	mov	r0, r6
   3d692:	462b      	mov	r3, r5
}
   3d694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3d698:	f001 b8f2 	b.w	3e880 <z_pend_curr>
		result = -ENOMSG;
   3d69c:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d6a0:	4630      	mov	r0, r6
   3d6a2:	f001 fcf1 	bl	3f088 <z_spin_unlock_valid>
   3d6a6:	b960      	cbnz	r0, 3d6c2 <z_impl_k_msgq_get+0x12e>
   3d6a8:	4911      	ldr	r1, [pc, #68]	; (3d6f0 <z_impl_k_msgq_get+0x15c>)
   3d6aa:	2372      	movs	r3, #114	; 0x72
   3d6ac:	4a0d      	ldr	r2, [pc, #52]	; (3d6e4 <z_impl_k_msgq_get+0x150>)
   3d6ae:	480a      	ldr	r0, [pc, #40]	; (3d6d8 <z_impl_k_msgq_get+0x144>)
   3d6b0:	f00a f90b 	bl	478ca <printk>
   3d6b4:	480f      	ldr	r0, [pc, #60]	; (3d6f4 <z_impl_k_msgq_get+0x160>)
   3d6b6:	f00a f908 	bl	478ca <printk>
   3d6ba:	2172      	movs	r1, #114	; 0x72
   3d6bc:	4809      	ldr	r0, [pc, #36]	; (3d6e4 <z_impl_k_msgq_get+0x150>)
   3d6be:	f00a f911 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d6c2:	f387 8811 	msr	BASEPRI, r7
   3d6c6:	f3bf 8f6f 	isb	sy
	return result;
   3d6ca:	e7d7      	b.n	3d67c <z_impl_k_msgq_get+0xe8>
   3d6cc:	e000ed00 	.word	0xe000ed00
   3d6d0:	0005299b 	.word	0x0005299b
   3d6d4:	0005294d 	.word	0x0005294d
   3d6d8:	0004ccf0 	.word	0x0004ccf0
   3d6dc:	0005294a 	.word	0x0005294a
   3d6e0:	0004d875 	.word	0x0004d875
   3d6e4:	0004d84e 	.word	0x0004d84e
   3d6e8:	0004d88a 	.word	0x0004d88a
   3d6ec:	2002a578 	.word	0x2002a578
   3d6f0:	0004d89f 	.word	0x0004d89f
   3d6f4:	0004d8b6 	.word	0x0004d8b6

0003d6f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   3d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d6fa:	4604      	mov	r4, r0
   3d6fc:	460e      	mov	r6, r1
	__asm__ volatile(
   3d6fe:	f04f 0320 	mov.w	r3, #32
   3d702:	f3ef 8511 	mrs	r5, BASEPRI
   3d706:	f383 8811 	msr	BASEPRI, r3
   3d70a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d70e:	485f      	ldr	r0, [pc, #380]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d710:	f001 fcac 	bl	3f06c <z_spin_lock_valid>
   3d714:	b960      	cbnz	r0, 3d730 <z_impl_k_mutex_lock+0x38>
   3d716:	495e      	ldr	r1, [pc, #376]	; (3d890 <z_impl_k_mutex_lock+0x198>)
   3d718:	235f      	movs	r3, #95	; 0x5f
   3d71a:	4a5e      	ldr	r2, [pc, #376]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d71c:	485e      	ldr	r0, [pc, #376]	; (3d898 <z_impl_k_mutex_lock+0x1a0>)
   3d71e:	f00a f8d4 	bl	478ca <printk>
   3d722:	485e      	ldr	r0, [pc, #376]	; (3d89c <z_impl_k_mutex_lock+0x1a4>)
   3d724:	f00a f8d1 	bl	478ca <printk>
   3d728:	215f      	movs	r1, #95	; 0x5f
   3d72a:	485a      	ldr	r0, [pc, #360]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d72c:	f00a f8da 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d730:	4856      	ldr	r0, [pc, #344]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d732:	f001 fcb9 	bl	3f0a8 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3d736:	68e3      	ldr	r3, [r4, #12]
   3d738:	4a59      	ldr	r2, [pc, #356]	; (3d8a0 <z_impl_k_mutex_lock+0x1a8>)
   3d73a:	b1eb      	cbz	r3, 3d778 <z_impl_k_mutex_lock+0x80>
   3d73c:	68a0      	ldr	r0, [r4, #8]
   3d73e:	6891      	ldr	r1, [r2, #8]
   3d740:	4288      	cmp	r0, r1
   3d742:	d038      	beq.n	3d7b6 <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   3d744:	2e00      	cmp	r6, #0
   3d746:	d138      	bne.n	3d7ba <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d748:	4850      	ldr	r0, [pc, #320]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d74a:	f001 fc9d 	bl	3f088 <z_spin_unlock_valid>
   3d74e:	b960      	cbnz	r0, 3d76a <z_impl_k_mutex_lock+0x72>
   3d750:	4954      	ldr	r1, [pc, #336]	; (3d8a4 <z_impl_k_mutex_lock+0x1ac>)
   3d752:	2372      	movs	r3, #114	; 0x72
   3d754:	4a4f      	ldr	r2, [pc, #316]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d756:	4850      	ldr	r0, [pc, #320]	; (3d898 <z_impl_k_mutex_lock+0x1a0>)
   3d758:	f00a f8b7 	bl	478ca <printk>
   3d75c:	4852      	ldr	r0, [pc, #328]	; (3d8a8 <z_impl_k_mutex_lock+0x1b0>)
   3d75e:	f00a f8b4 	bl	478ca <printk>
   3d762:	2172      	movs	r1, #114	; 0x72
   3d764:	484b      	ldr	r0, [pc, #300]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d766:	f00a f8bd 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d76a:	f385 8811 	msr	BASEPRI, r5
   3d76e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3d772:	f06f 000f 	mvn.w	r0, #15
   3d776:	e01d      	b.n	3d7b4 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   3d778:	6891      	ldr	r1, [r2, #8]
   3d77a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3d77e:	3301      	adds	r3, #1
   3d780:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3d782:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3d784:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3d786:	60a3      	str	r3, [r4, #8]
   3d788:	4840      	ldr	r0, [pc, #256]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d78a:	f001 fc7d 	bl	3f088 <z_spin_unlock_valid>
   3d78e:	b960      	cbnz	r0, 3d7aa <z_impl_k_mutex_lock+0xb2>
   3d790:	4944      	ldr	r1, [pc, #272]	; (3d8a4 <z_impl_k_mutex_lock+0x1ac>)
   3d792:	2372      	movs	r3, #114	; 0x72
   3d794:	4a3f      	ldr	r2, [pc, #252]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d796:	4840      	ldr	r0, [pc, #256]	; (3d898 <z_impl_k_mutex_lock+0x1a0>)
   3d798:	f00a f897 	bl	478ca <printk>
   3d79c:	4842      	ldr	r0, [pc, #264]	; (3d8a8 <z_impl_k_mutex_lock+0x1b0>)
   3d79e:	f00a f894 	bl	478ca <printk>
   3d7a2:	2172      	movs	r1, #114	; 0x72
   3d7a4:	483b      	ldr	r0, [pc, #236]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d7a6:	f00a f89d 	bl	478e4 <assert_post_action>
   3d7aa:	f385 8811 	msr	BASEPRI, r5
   3d7ae:	f3bf 8f6f 	isb	sy
		return 0;
   3d7b2:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3d7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   3d7b6:	6921      	ldr	r1, [r4, #16]
   3d7b8:	e7e1      	b.n	3d77e <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3d7ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3d7be:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3d7c2:	4299      	cmp	r1, r3
   3d7c4:	bfa8      	it	ge
   3d7c6:	4619      	movge	r1, r3
   3d7c8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3d7cc:	4299      	cmp	r1, r3
   3d7ce:	da3f      	bge.n	3d850 <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   3d7d0:	f001 f884 	bl	3e8dc <z_set_prio>
   3d7d4:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3d7d6:	4633      	mov	r3, r6
   3d7d8:	4622      	mov	r2, r4
   3d7da:	4629      	mov	r1, r5
   3d7dc:	482b      	ldr	r0, [pc, #172]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d7de:	f001 f84f 	bl	3e880 <z_pend_curr>
	if (got_mutex == 0) {
   3d7e2:	2800      	cmp	r0, #0
   3d7e4:	d0e6      	beq.n	3d7b4 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   3d7e6:	f04f 0320 	mov.w	r3, #32
   3d7ea:	f3ef 8511 	mrs	r5, BASEPRI
   3d7ee:	f383 8811 	msr	BASEPRI, r3
   3d7f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d7f6:	4825      	ldr	r0, [pc, #148]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d7f8:	f001 fc38 	bl	3f06c <z_spin_lock_valid>
   3d7fc:	b960      	cbnz	r0, 3d818 <z_impl_k_mutex_lock+0x120>
   3d7fe:	4924      	ldr	r1, [pc, #144]	; (3d890 <z_impl_k_mutex_lock+0x198>)
   3d800:	235f      	movs	r3, #95	; 0x5f
   3d802:	4a24      	ldr	r2, [pc, #144]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d804:	4824      	ldr	r0, [pc, #144]	; (3d898 <z_impl_k_mutex_lock+0x1a0>)
   3d806:	f00a f860 	bl	478ca <printk>
   3d80a:	4824      	ldr	r0, [pc, #144]	; (3d89c <z_impl_k_mutex_lock+0x1a4>)
   3d80c:	f00a f85d 	bl	478ca <printk>
   3d810:	215f      	movs	r1, #95	; 0x5f
   3d812:	4820      	ldr	r0, [pc, #128]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d814:	f00a f866 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d818:	481c      	ldr	r0, [pc, #112]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d81a:	f001 fc45 	bl	3f0a8 <z_spin_lock_set_owner>
	return list->head == list;
   3d81e:	6823      	ldr	r3, [r4, #0]
   3d820:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d822:	429c      	cmp	r4, r3
   3d824:	d007      	beq.n	3d836 <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   3d826:	b133      	cbz	r3, 3d836 <z_impl_k_mutex_lock+0x13e>
   3d828:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3d82c:	4299      	cmp	r1, r3
   3d82e:	bfa8      	it	ge
   3d830:	4619      	movge	r1, r3
   3d832:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3d836:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3d838:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3d83c:	4299      	cmp	r1, r3
   3d83e:	d109      	bne.n	3d854 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   3d840:	b16f      	cbz	r7, 3d85e <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   3d842:	4629      	mov	r1, r5
   3d844:	4811      	ldr	r0, [pc, #68]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d846:	f000 fb71 	bl	3df2c <z_reschedule>
	return -EAGAIN;
   3d84a:	f06f 000a 	mvn.w	r0, #10
   3d84e:	e7b1      	b.n	3d7b4 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   3d850:	2700      	movs	r7, #0
   3d852:	e7c0      	b.n	3d7d6 <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   3d854:	f001 f842 	bl	3e8dc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3d858:	2800      	cmp	r0, #0
   3d85a:	d1f2      	bne.n	3d842 <z_impl_k_mutex_lock+0x14a>
   3d85c:	e7f0      	b.n	3d840 <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d85e:	480b      	ldr	r0, [pc, #44]	; (3d88c <z_impl_k_mutex_lock+0x194>)
   3d860:	f001 fc12 	bl	3f088 <z_spin_unlock_valid>
   3d864:	b960      	cbnz	r0, 3d880 <z_impl_k_mutex_lock+0x188>
   3d866:	490f      	ldr	r1, [pc, #60]	; (3d8a4 <z_impl_k_mutex_lock+0x1ac>)
   3d868:	2372      	movs	r3, #114	; 0x72
   3d86a:	4a0a      	ldr	r2, [pc, #40]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d86c:	480a      	ldr	r0, [pc, #40]	; (3d898 <z_impl_k_mutex_lock+0x1a0>)
   3d86e:	f00a f82c 	bl	478ca <printk>
   3d872:	480d      	ldr	r0, [pc, #52]	; (3d8a8 <z_impl_k_mutex_lock+0x1b0>)
   3d874:	f00a f829 	bl	478ca <printk>
   3d878:	2172      	movs	r1, #114	; 0x72
   3d87a:	4806      	ldr	r0, [pc, #24]	; (3d894 <z_impl_k_mutex_lock+0x19c>)
   3d87c:	f00a f832 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d880:	f385 8811 	msr	BASEPRI, r5
   3d884:	f3bf 8f6f 	isb	sy
   3d888:	e7df      	b.n	3d84a <z_impl_k_mutex_lock+0x152>
   3d88a:	bf00      	nop
   3d88c:	2002a574 	.word	0x2002a574
   3d890:	0004d875 	.word	0x0004d875
   3d894:	0004d84e 	.word	0x0004d84e
   3d898:	0004ccf0 	.word	0x0004ccf0
   3d89c:	0004d88a 	.word	0x0004d88a
   3d8a0:	2002a578 	.word	0x2002a578
   3d8a4:	0004d89f 	.word	0x0004d89f
   3d8a8:	0004d8b6 	.word	0x0004d8b6

0003d8ac <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   3d8ac:	68c3      	ldr	r3, [r0, #12]
{
   3d8ae:	b570      	push	{r4, r5, r6, lr}
   3d8b0:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   3d8b2:	b963      	cbnz	r3, 3d8ce <z_impl_k_mutex_unlock+0x22>
   3d8b4:	495c      	ldr	r1, [pc, #368]	; (3da28 <z_impl_k_mutex_unlock+0x17c>)
   3d8b6:	23d2      	movs	r3, #210	; 0xd2
   3d8b8:	4a5c      	ldr	r2, [pc, #368]	; (3da2c <z_impl_k_mutex_unlock+0x180>)
   3d8ba:	485d      	ldr	r0, [pc, #372]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d8bc:	f00a f805 	bl	478ca <printk>
   3d8c0:	485c      	ldr	r0, [pc, #368]	; (3da34 <z_impl_k_mutex_unlock+0x188>)
   3d8c2:	f00a f802 	bl	478ca <printk>
   3d8c6:	21d2      	movs	r1, #210	; 0xd2
   3d8c8:	4858      	ldr	r0, [pc, #352]	; (3da2c <z_impl_k_mutex_unlock+0x180>)
   3d8ca:	f00a f80b 	bl	478e4 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   3d8ce:	4d5a      	ldr	r5, [pc, #360]	; (3da38 <z_impl_k_mutex_unlock+0x18c>)
   3d8d0:	68a2      	ldr	r2, [r4, #8]
   3d8d2:	68ab      	ldr	r3, [r5, #8]
   3d8d4:	429a      	cmp	r2, r3
   3d8d6:	d00c      	beq.n	3d8f2 <z_impl_k_mutex_unlock+0x46>
   3d8d8:	4958      	ldr	r1, [pc, #352]	; (3da3c <z_impl_k_mutex_unlock+0x190>)
   3d8da:	23d3      	movs	r3, #211	; 0xd3
   3d8dc:	4a53      	ldr	r2, [pc, #332]	; (3da2c <z_impl_k_mutex_unlock+0x180>)
   3d8de:	4854      	ldr	r0, [pc, #336]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d8e0:	f009 fff3 	bl	478ca <printk>
   3d8e4:	4853      	ldr	r0, [pc, #332]	; (3da34 <z_impl_k_mutex_unlock+0x188>)
   3d8e6:	f009 fff0 	bl	478ca <printk>
   3d8ea:	21d3      	movs	r1, #211	; 0xd3
   3d8ec:	484f      	ldr	r0, [pc, #316]	; (3da2c <z_impl_k_mutex_unlock+0x180>)
   3d8ee:	f009 fff9 	bl	478e4 <assert_post_action>
   3d8f2:	f3ef 8305 	mrs	r3, IPSR
   3d8f6:	2b0d      	cmp	r3, #13
   3d8f8:	d804      	bhi.n	3d904 <z_impl_k_mutex_unlock+0x58>
   3d8fa:	b193      	cbz	r3, 3d922 <z_impl_k_mutex_unlock+0x76>
   3d8fc:	4b50      	ldr	r3, [pc, #320]	; (3da40 <z_impl_k_mutex_unlock+0x194>)
   3d8fe:	685b      	ldr	r3, [r3, #4]
   3d900:	051a      	lsls	r2, r3, #20
   3d902:	d40e      	bmi.n	3d922 <z_impl_k_mutex_unlock+0x76>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   3d904:	494f      	ldr	r1, [pc, #316]	; (3da44 <z_impl_k_mutex_unlock+0x198>)
   3d906:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3d90a:	4a4f      	ldr	r2, [pc, #316]	; (3da48 <z_impl_k_mutex_unlock+0x19c>)
   3d90c:	4848      	ldr	r0, [pc, #288]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d90e:	f009 ffdc 	bl	478ca <printk>
   3d912:	4848      	ldr	r0, [pc, #288]	; (3da34 <z_impl_k_mutex_unlock+0x188>)
   3d914:	f009 ffd9 	bl	478ca <printk>
   3d918:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3d91c:	484a      	ldr	r0, [pc, #296]	; (3da48 <z_impl_k_mutex_unlock+0x19c>)
   3d91e:	f009 ffe1 	bl	478e4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3d922:	68ab      	ldr	r3, [r5, #8]
   3d924:	7bdb      	ldrb	r3, [r3, #15]
   3d926:	2b01      	cmp	r3, #1
   3d928:	d10e      	bne.n	3d948 <z_impl_k_mutex_unlock+0x9c>
   3d92a:	4948      	ldr	r1, [pc, #288]	; (3da4c <z_impl_k_mutex_unlock+0x1a0>)
   3d92c:	f240 130d 	movw	r3, #269	; 0x10d
   3d930:	4a45      	ldr	r2, [pc, #276]	; (3da48 <z_impl_k_mutex_unlock+0x19c>)
   3d932:	483f      	ldr	r0, [pc, #252]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d934:	f009 ffc9 	bl	478ca <printk>
   3d938:	483e      	ldr	r0, [pc, #248]	; (3da34 <z_impl_k_mutex_unlock+0x188>)
   3d93a:	f009 ffc6 	bl	478ca <printk>
   3d93e:	f240 110d 	movw	r1, #269	; 0x10d
   3d942:	4841      	ldr	r0, [pc, #260]	; (3da48 <z_impl_k_mutex_unlock+0x19c>)
   3d944:	f009 ffce 	bl	478e4 <assert_post_action>

	--_current->base.sched_locked;
   3d948:	68aa      	ldr	r2, [r5, #8]
   3d94a:	7bd3      	ldrb	r3, [r2, #15]
   3d94c:	3b01      	subs	r3, #1
   3d94e:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   3d950:	68e3      	ldr	r3, [r4, #12]
   3d952:	2b01      	cmp	r3, #1
   3d954:	d005      	beq.n	3d962 <z_impl_k_mutex_unlock+0xb6>
		mutex->lock_count--;
   3d956:	3b01      	subs	r3, #1
   3d958:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   3d95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   3d95e:	f000 bc59 	b.w	3e214 <k_sched_unlock>
	__asm__ volatile(
   3d962:	f04f 0320 	mov.w	r3, #32
   3d966:	f3ef 8611 	mrs	r6, BASEPRI
   3d96a:	f383 8811 	msr	BASEPRI, r3
   3d96e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d972:	4837      	ldr	r0, [pc, #220]	; (3da50 <z_impl_k_mutex_unlock+0x1a4>)
   3d974:	f001 fb7a 	bl	3f06c <z_spin_lock_valid>
   3d978:	b960      	cbnz	r0, 3d994 <z_impl_k_mutex_unlock+0xe8>
   3d97a:	4936      	ldr	r1, [pc, #216]	; (3da54 <z_impl_k_mutex_unlock+0x1a8>)
   3d97c:	235f      	movs	r3, #95	; 0x5f
   3d97e:	4a36      	ldr	r2, [pc, #216]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3d980:	482b      	ldr	r0, [pc, #172]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d982:	f009 ffa2 	bl	478ca <printk>
   3d986:	4835      	ldr	r0, [pc, #212]	; (3da5c <z_impl_k_mutex_unlock+0x1b0>)
   3d988:	f009 ff9f 	bl	478ca <printk>
   3d98c:	215f      	movs	r1, #95	; 0x5f
   3d98e:	4832      	ldr	r0, [pc, #200]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3d990:	f009 ffa8 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d994:	482e      	ldr	r0, [pc, #184]	; (3da50 <z_impl_k_mutex_unlock+0x1a4>)
   3d996:	f001 fb87 	bl	3f0a8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3d99a:	68a0      	ldr	r0, [r4, #8]
   3d99c:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3d99e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3d9a2:	4299      	cmp	r1, r3
   3d9a4:	d001      	beq.n	3d9aa <z_impl_k_mutex_unlock+0xfe>
		return z_set_prio(mutex->owner, new_prio);
   3d9a6:	f000 ff99 	bl	3e8dc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3d9aa:	4620      	mov	r0, r4
   3d9ac:	f001 f824 	bl	3e9f8 <z_unpend_first_thread>
   3d9b0:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   3d9b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3d9b4:	b308      	cbz	r0, 3d9fa <z_impl_k_mutex_unlock+0x14e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d9b6:	7b43      	ldrb	r3, [r0, #13]
   3d9b8:	06db      	lsls	r3, r3, #27
   3d9ba:	d103      	bne.n	3d9c4 <z_impl_k_mutex_unlock+0x118>
	if (z_is_thread_ready(thread)) {
   3d9bc:	6983      	ldr	r3, [r0, #24]
   3d9be:	b90b      	cbnz	r3, 3d9c4 <z_impl_k_mutex_unlock+0x118>
		z_add_thread_to_ready_q(thread);
   3d9c0:	f000 fcaa 	bl	3e318 <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d9c4:	4822      	ldr	r0, [pc, #136]	; (3da50 <z_impl_k_mutex_unlock+0x1a4>)
   3d9c6:	f001 fb5f 	bl	3f088 <z_spin_unlock_valid>
   3d9ca:	b960      	cbnz	r0, 3d9e6 <z_impl_k_mutex_unlock+0x13a>
   3d9cc:	4924      	ldr	r1, [pc, #144]	; (3da60 <z_impl_k_mutex_unlock+0x1b4>)
   3d9ce:	2372      	movs	r3, #114	; 0x72
   3d9d0:	4a21      	ldr	r2, [pc, #132]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3d9d2:	4817      	ldr	r0, [pc, #92]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3d9d4:	f009 ff79 	bl	478ca <printk>
   3d9d8:	4822      	ldr	r0, [pc, #136]	; (3da64 <z_impl_k_mutex_unlock+0x1b8>)
   3d9da:	f009 ff76 	bl	478ca <printk>
   3d9de:	2172      	movs	r1, #114	; 0x72
   3d9e0:	481d      	ldr	r0, [pc, #116]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3d9e2:	f009 ff7f 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3d9e6:	f386 8811 	msr	BASEPRI, r6
   3d9ea:	f3bf 8f6f 	isb	sy
   3d9ee:	2300      	movs	r3, #0
   3d9f0:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   3d9f2:	f995 300e 	ldrsb.w	r3, [r5, #14]
   3d9f6:	6123      	str	r3, [r4, #16]
   3d9f8:	e7af      	b.n	3d95a <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count = 0U;
   3d9fa:	60e0      	str	r0, [r4, #12]
   3d9fc:	4814      	ldr	r0, [pc, #80]	; (3da50 <z_impl_k_mutex_unlock+0x1a4>)
   3d9fe:	f001 fb43 	bl	3f088 <z_spin_unlock_valid>
   3da02:	b960      	cbnz	r0, 3da1e <z_impl_k_mutex_unlock+0x172>
   3da04:	4916      	ldr	r1, [pc, #88]	; (3da60 <z_impl_k_mutex_unlock+0x1b4>)
   3da06:	2372      	movs	r3, #114	; 0x72
   3da08:	4a13      	ldr	r2, [pc, #76]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3da0a:	4809      	ldr	r0, [pc, #36]	; (3da30 <z_impl_k_mutex_unlock+0x184>)
   3da0c:	f009 ff5d 	bl	478ca <printk>
   3da10:	4814      	ldr	r0, [pc, #80]	; (3da64 <z_impl_k_mutex_unlock+0x1b8>)
   3da12:	f009 ff5a 	bl	478ca <printk>
   3da16:	2172      	movs	r1, #114	; 0x72
   3da18:	480f      	ldr	r0, [pc, #60]	; (3da58 <z_impl_k_mutex_unlock+0x1ac>)
   3da1a:	f009 ff63 	bl	478e4 <assert_post_action>
   3da1e:	f386 8811 	msr	BASEPRI, r6
   3da22:	f3bf 8f6f 	isb	sy
   3da26:	e798      	b.n	3d95a <z_impl_k_mutex_unlock+0xae>
   3da28:	000529e2 	.word	0x000529e2
   3da2c:	000529bf 	.word	0x000529bf
   3da30:	0004ccf0 	.word	0x0004ccf0
   3da34:	0005294a 	.word	0x0005294a
   3da38:	2002a578 	.word	0x2002a578
   3da3c:	000529f9 	.word	0x000529f9
   3da40:	e000ed00 	.word	0xe000ed00
   3da44:	00052a45 	.word	0x00052a45
   3da48:	00052a19 	.word	0x00052a19
   3da4c:	00052a59 	.word	0x00052a59
   3da50:	2002a574 	.word	0x2002a574
   3da54:	0004d875 	.word	0x0004d875
   3da58:	0004d84e 	.word	0x0004d84e
   3da5c:	0004d88a 	.word	0x0004d88a
   3da60:	0004d89f 	.word	0x0004d89f
   3da64:	0004d8b6 	.word	0x0004d8b6

0003da68 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3da6c:	4604      	mov	r4, r0
   3da6e:	460e      	mov	r6, r1
   3da70:	4690      	mov	r8, r2
   3da72:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3da74:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3da78:	f04f 0320 	mov.w	r3, #32
   3da7c:	f3ef 8711 	mrs	r7, BASEPRI
   3da80:	f383 8811 	msr	BASEPRI, r3
   3da84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3da88:	4628      	mov	r0, r5
   3da8a:	f001 faef 	bl	3f06c <z_spin_lock_valid>
   3da8e:	b960      	cbnz	r0, 3daaa <queue_insert+0x42>
   3da90:	4932      	ldr	r1, [pc, #200]	; (3db5c <queue_insert+0xf4>)
   3da92:	235f      	movs	r3, #95	; 0x5f
   3da94:	4a32      	ldr	r2, [pc, #200]	; (3db60 <queue_insert+0xf8>)
   3da96:	4833      	ldr	r0, [pc, #204]	; (3db64 <queue_insert+0xfc>)
   3da98:	f009 ff17 	bl	478ca <printk>
   3da9c:	4832      	ldr	r0, [pc, #200]	; (3db68 <queue_insert+0x100>)
   3da9e:	f009 ff14 	bl	478ca <printk>
   3daa2:	215f      	movs	r1, #95	; 0x5f
   3daa4:	482e      	ldr	r0, [pc, #184]	; (3db60 <queue_insert+0xf8>)
   3daa6:	f009 ff1d 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3daaa:	4628      	mov	r0, r5
   3daac:	f001 fafc 	bl	3f0a8 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   3dab0:	f1b9 0f00 	cmp.w	r9, #0
   3dab4:	d02c      	beq.n	3db10 <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   3dab6:	2008      	movs	r0, #8
   3dab8:	f7ff fcbc 	bl	3d434 <z_thread_malloc>
		if (anode == NULL) {
   3dabc:	b9c0      	cbnz	r0, 3daf0 <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3dabe:	4628      	mov	r0, r5
   3dac0:	f001 fae2 	bl	3f088 <z_spin_unlock_valid>
   3dac4:	b960      	cbnz	r0, 3dae0 <queue_insert+0x78>
   3dac6:	4929      	ldr	r1, [pc, #164]	; (3db6c <queue_insert+0x104>)
   3dac8:	2372      	movs	r3, #114	; 0x72
   3daca:	4a25      	ldr	r2, [pc, #148]	; (3db60 <queue_insert+0xf8>)
   3dacc:	4825      	ldr	r0, [pc, #148]	; (3db64 <queue_insert+0xfc>)
   3dace:	f009 fefc 	bl	478ca <printk>
   3dad2:	4827      	ldr	r0, [pc, #156]	; (3db70 <queue_insert+0x108>)
   3dad4:	f009 fef9 	bl	478ca <printk>
   3dad8:	2172      	movs	r1, #114	; 0x72
   3dada:	4821      	ldr	r0, [pc, #132]	; (3db60 <queue_insert+0xf8>)
   3dadc:	f009 ff02 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3dae0:	f387 8811 	msr	BASEPRI, r7
   3dae4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   3dae8:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   3daec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3daf0:	2301      	movs	r3, #1
		anode->data = data;
   3daf2:	f8c0 8004 	str.w	r8, [r0, #4]
   3daf6:	6003      	str	r3, [r0, #0]
   3daf8:	6803      	ldr	r3, [r0, #0]
   3dafa:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3dafe:	b95e      	cbnz	r6, 3db18 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3db00:	6822      	ldr	r2, [r4, #0]
   3db02:	4313      	orrs	r3, r2
   3db04:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3db06:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3db08:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3db0a:	b973      	cbnz	r3, 3db2a <queue_insert+0xc2>
	list->tail = node;
   3db0c:	6060      	str	r0, [r4, #4]
   3db0e:	e00c      	b.n	3db2a <queue_insert+0xc2>
	node->next_and_flags = flags;
   3db10:	f8c8 9000 	str.w	r9, [r8]
   3db14:	4640      	mov	r0, r8
   3db16:	e7ef      	b.n	3daf8 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3db18:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3db1a:	f032 0203 	bics.w	r2, r2, #3
   3db1e:	d115      	bne.n	3db4c <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   3db20:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3db22:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3db24:	b962      	cbnz	r2, 3db40 <queue_insert+0xd8>
	list->head = node;
   3db26:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3db2a:	2104      	movs	r1, #4
   3db2c:	f104 000c 	add.w	r0, r4, #12
   3db30:	f00c fbc2 	bl	4a2b8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   3db34:	4628      	mov	r0, r5
   3db36:	4639      	mov	r1, r7
   3db38:	f000 f9f8 	bl	3df2c <z_reschedule>
	return 0;
   3db3c:	2000      	movs	r0, #0
   3db3e:	e7d5      	b.n	3daec <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3db40:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3db42:	f003 0303 	and.w	r3, r3, #3
   3db46:	4303      	orrs	r3, r0
   3db48:	6013      	str	r3, [r2, #0]
   3db4a:	e7df      	b.n	3db0c <queue_insert+0xa4>
   3db4c:	4313      	orrs	r3, r2
   3db4e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3db50:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3db52:	f003 0303 	and.w	r3, r3, #3
   3db56:	4318      	orrs	r0, r3
   3db58:	6030      	str	r0, [r6, #0]
   3db5a:	e7e6      	b.n	3db2a <queue_insert+0xc2>
   3db5c:	0004d875 	.word	0x0004d875
   3db60:	0004d84e 	.word	0x0004d84e
   3db64:	0004ccf0 	.word	0x0004ccf0
   3db68:	0004d88a 	.word	0x0004d88a
   3db6c:	0004d89f 	.word	0x0004d89f
   3db70:	0004d8b6 	.word	0x0004d8b6

0003db74 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   3db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3db78:	4604      	mov	r4, r0
   3db7a:	b089      	sub	sp, #36	; 0x24
   3db7c:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3db7e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3db82:	f04f 0320 	mov.w	r3, #32
   3db86:	f3ef 8811 	mrs	r8, BASEPRI
   3db8a:	f383 8811 	msr	BASEPRI, r3
   3db8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3db92:	4628      	mov	r0, r5
   3db94:	f001 fa6a 	bl	3f06c <z_spin_lock_valid>
   3db98:	b960      	cbnz	r0, 3dbb4 <z_impl_k_queue_get+0x40>
   3db9a:	4967      	ldr	r1, [pc, #412]	; (3dd38 <z_impl_k_queue_get+0x1c4>)
   3db9c:	235f      	movs	r3, #95	; 0x5f
   3db9e:	4a67      	ldr	r2, [pc, #412]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dba0:	4867      	ldr	r0, [pc, #412]	; (3dd40 <z_impl_k_queue_get+0x1cc>)
   3dba2:	f009 fe92 	bl	478ca <printk>
   3dba6:	4867      	ldr	r0, [pc, #412]	; (3dd44 <z_impl_k_queue_get+0x1d0>)
   3dba8:	f009 fe8f 	bl	478ca <printk>
   3dbac:	215f      	movs	r1, #95	; 0x5f
   3dbae:	4863      	ldr	r0, [pc, #396]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dbb0:	f009 fe98 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dbb4:	4628      	mov	r0, r5
   3dbb6:	f001 fa77 	bl	3f0a8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3dbba:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3dbbc:	b320      	cbz	r0, 3dc08 <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3dbbe:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3dbc0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3dbc2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3dbc6:	4290      	cmp	r0, r2
	list->tail = node;
   3dbc8:	bf08      	it	eq
   3dbca:	6063      	streq	r3, [r4, #4]
	list->head = node;
   3dbcc:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3dbce:	2101      	movs	r1, #1
   3dbd0:	f00c fa27 	bl	4a022 <z_queue_node_peek>
   3dbd4:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3dbd6:	4628      	mov	r0, r5
   3dbd8:	f001 fa56 	bl	3f088 <z_spin_unlock_valid>
   3dbdc:	b960      	cbnz	r0, 3dbf8 <z_impl_k_queue_get+0x84>
   3dbde:	495a      	ldr	r1, [pc, #360]	; (3dd48 <z_impl_k_queue_get+0x1d4>)
   3dbe0:	2372      	movs	r3, #114	; 0x72
   3dbe2:	4a56      	ldr	r2, [pc, #344]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dbe4:	4856      	ldr	r0, [pc, #344]	; (3dd40 <z_impl_k_queue_get+0x1cc>)
   3dbe6:	f009 fe70 	bl	478ca <printk>
   3dbea:	4858      	ldr	r0, [pc, #352]	; (3dd4c <z_impl_k_queue_get+0x1d8>)
   3dbec:	f009 fe6d 	bl	478ca <printk>
   3dbf0:	2172      	movs	r1, #114	; 0x72
   3dbf2:	4852      	ldr	r0, [pc, #328]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dbf4:	f009 fe76 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3dbf8:	f388 8811 	msr	BASEPRI, r8
   3dbfc:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   3dc00:	4630      	mov	r0, r6
   3dc02:	b009      	add	sp, #36	; 0x24
   3dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dc08:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   3dc0a:	b9af      	cbnz	r7, 3dc38 <z_impl_k_queue_get+0xc4>
   3dc0c:	f001 fa3c 	bl	3f088 <z_spin_unlock_valid>
   3dc10:	b960      	cbnz	r0, 3dc2c <z_impl_k_queue_get+0xb8>
   3dc12:	494d      	ldr	r1, [pc, #308]	; (3dd48 <z_impl_k_queue_get+0x1d4>)
   3dc14:	2372      	movs	r3, #114	; 0x72
   3dc16:	4a49      	ldr	r2, [pc, #292]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dc18:	4849      	ldr	r0, [pc, #292]	; (3dd40 <z_impl_k_queue_get+0x1cc>)
   3dc1a:	f009 fe56 	bl	478ca <printk>
   3dc1e:	484b      	ldr	r0, [pc, #300]	; (3dd4c <z_impl_k_queue_get+0x1d8>)
   3dc20:	f009 fe53 	bl	478ca <printk>
   3dc24:	2172      	movs	r1, #114	; 0x72
   3dc26:	4845      	ldr	r0, [pc, #276]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dc28:	f009 fe5c 	bl	478e4 <assert_post_action>
   3dc2c:	f388 8811 	msr	BASEPRI, r8
   3dc30:	f3bf 8f6f 	isb	sy
			return NULL;
   3dc34:	2600      	movs	r6, #0
   3dc36:	e7e3      	b.n	3dc00 <z_impl_k_queue_get+0x8c>
   3dc38:	f001 fa26 	bl	3f088 <z_spin_unlock_valid>
   3dc3c:	b960      	cbnz	r0, 3dc58 <z_impl_k_queue_get+0xe4>
   3dc3e:	4942      	ldr	r1, [pc, #264]	; (3dd48 <z_impl_k_queue_get+0x1d4>)
   3dc40:	2372      	movs	r3, #114	; 0x72
   3dc42:	4a3e      	ldr	r2, [pc, #248]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dc44:	483e      	ldr	r0, [pc, #248]	; (3dd40 <z_impl_k_queue_get+0x1cc>)
   3dc46:	f009 fe40 	bl	478ca <printk>
   3dc4a:	4840      	ldr	r0, [pc, #256]	; (3dd4c <z_impl_k_queue_get+0x1d8>)
   3dc4c:	f009 fe3d 	bl	478ca <printk>
   3dc50:	2172      	movs	r1, #114	; 0x72
   3dc52:	483a      	ldr	r0, [pc, #232]	; (3dd3c <z_impl_k_queue_get+0x1c8>)
   3dc54:	f009 fe46 	bl	478e4 <assert_post_action>
   3dc58:	f388 8811 	msr	BASEPRI, r8
   3dc5c:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   3dc60:	2200      	movs	r2, #0
   3dc62:	4623      	mov	r3, r4
   3dc64:	2104      	movs	r1, #4
   3dc66:	a803      	add	r0, sp, #12
   3dc68:	f002 f9e2 	bl	40030 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   3dc6c:	1c7a      	adds	r2, r7, #1
   3dc6e:	d002      	beq.n	3dc76 <z_impl_k_queue_get+0x102>
   3dc70:	f00c faca 	bl	4a208 <z_impl_k_uptime_get>
   3dc74:	4683      	mov	fp, r0
{
   3dc76:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dc7a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3dd3c <z_impl_k_queue_get+0x1c8>
   3dc7e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 3dd40 <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   3dc82:	9b06      	ldr	r3, [sp, #24]
   3dc84:	f36f 3310 	bfc	r3, #12, #5
   3dc88:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   3dc8a:	2101      	movs	r1, #1
   3dc8c:	eba7 0209 	sub.w	r2, r7, r9
   3dc90:	a803      	add	r0, sp, #12
   3dc92:	f002 fa23 	bl	400dc <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   3dc96:	b108      	cbz	r0, 3dc9c <z_impl_k_queue_get+0x128>
   3dc98:	300b      	adds	r0, #11
   3dc9a:	d1cb      	bne.n	3dc34 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   3dc9c:	f04f 0320 	mov.w	r3, #32
   3dca0:	f3ef 8211 	mrs	r2, BASEPRI
   3dca4:	f383 8811 	msr	BASEPRI, r3
   3dca8:	f3bf 8f6f 	isb	sy
   3dcac:	4628      	mov	r0, r5
   3dcae:	9201      	str	r2, [sp, #4]
   3dcb0:	f001 f9dc 	bl	3f06c <z_spin_lock_valid>
   3dcb4:	b960      	cbnz	r0, 3dcd0 <z_impl_k_queue_get+0x15c>
   3dcb6:	4920      	ldr	r1, [pc, #128]	; (3dd38 <z_impl_k_queue_get+0x1c4>)
   3dcb8:	235f      	movs	r3, #95	; 0x5f
   3dcba:	4642      	mov	r2, r8
   3dcbc:	4650      	mov	r0, sl
   3dcbe:	f009 fe04 	bl	478ca <printk>
   3dcc2:	4820      	ldr	r0, [pc, #128]	; (3dd44 <z_impl_k_queue_get+0x1d0>)
   3dcc4:	f009 fe01 	bl	478ca <printk>
   3dcc8:	215f      	movs	r1, #95	; 0x5f
   3dcca:	4640      	mov	r0, r8
   3dccc:	f009 fe0a 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dcd0:	4628      	mov	r0, r5
   3dcd2:	f001 f9e9 	bl	3f0a8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3dcd6:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   3dcd8:	b138      	cbz	r0, 3dcea <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3dcda:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3dcdc:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3dcde:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3dce2:	4290      	cmp	r0, r2
	list->head = node;
   3dce4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   3dce6:	bf08      	it	eq
   3dce8:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   3dcea:	2101      	movs	r1, #1
   3dcec:	f00c f999 	bl	4a022 <z_queue_node_peek>
   3dcf0:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3dcf2:	4628      	mov	r0, r5
   3dcf4:	f001 f9c8 	bl	3f088 <z_spin_unlock_valid>
   3dcf8:	b960      	cbnz	r0, 3dd14 <z_impl_k_queue_get+0x1a0>
   3dcfa:	4913      	ldr	r1, [pc, #76]	; (3dd48 <z_impl_k_queue_get+0x1d4>)
   3dcfc:	2372      	movs	r3, #114	; 0x72
   3dcfe:	4642      	mov	r2, r8
   3dd00:	4650      	mov	r0, sl
   3dd02:	f009 fde2 	bl	478ca <printk>
   3dd06:	4811      	ldr	r0, [pc, #68]	; (3dd4c <z_impl_k_queue_get+0x1d8>)
   3dd08:	f009 fddf 	bl	478ca <printk>
   3dd0c:	2172      	movs	r1, #114	; 0x72
   3dd0e:	4640      	mov	r0, r8
   3dd10:	f009 fde8 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3dd14:	9b01      	ldr	r3, [sp, #4]
   3dd16:	f383 8811 	msr	BASEPRI, r3
   3dd1a:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   3dd1e:	2e00      	cmp	r6, #0
   3dd20:	f47f af6e 	bne.w	3dc00 <z_impl_k_queue_get+0x8c>
   3dd24:	1c7b      	adds	r3, r7, #1
   3dd26:	d0ac      	beq.n	3dc82 <z_impl_k_queue_get+0x10e>
	return z_impl_k_uptime_get();
   3dd28:	f00c fa6e 	bl	4a208 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   3dd2c:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   3dd30:	454f      	cmp	r7, r9
   3dd32:	daa6      	bge.n	3dc82 <z_impl_k_queue_get+0x10e>
   3dd34:	e77e      	b.n	3dc34 <z_impl_k_queue_get+0xc0>
   3dd36:	bf00      	nop
   3dd38:	0004d875 	.word	0x0004d875
   3dd3c:	0004d84e 	.word	0x0004d84e
   3dd40:	0004ccf0 	.word	0x0004ccf0
   3dd44:	0004d88a 	.word	0x0004d88a
   3dd48:	0004d89f 	.word	0x0004d89f
   3dd4c:	0004d8b6 	.word	0x0004d8b6

0003dd50 <resched.part.15>:
   3dd50:	f3ef 8005 	mrs	r0, IPSR
   3dd54:	280d      	cmp	r0, #13
   3dd56:	d809      	bhi.n	3dd6c <resched.part.15+0x1c>
   3dd58:	b128      	cbz	r0, 3dd66 <resched.part.15+0x16>
   3dd5a:	4b05      	ldr	r3, [pc, #20]	; (3dd70 <resched.part.15+0x20>)
   3dd5c:	6858      	ldr	r0, [r3, #4]
   3dd5e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   3dd62:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   3dd66:	f080 0001 	eor.w	r0, r0, #1
   3dd6a:	4770      	bx	lr
   3dd6c:	2001      	movs	r0, #1
   3dd6e:	e7fa      	b.n	3dd66 <resched.part.15+0x16>
   3dd70:	e000ed00 	.word	0xe000ed00

0003dd74 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   3dd74:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3dd76:	b510      	push	{r4, lr}
   3dd78:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3dd7a:	b95b      	cbnz	r3, 3dd94 <pended_on.isra.16+0x20>
   3dd7c:	4906      	ldr	r1, [pc, #24]	; (3dd98 <pended_on.isra.16+0x24>)
   3dd7e:	4807      	ldr	r0, [pc, #28]	; (3dd9c <pended_on.isra.16+0x28>)
   3dd80:	f240 1383 	movw	r3, #387	; 0x183
   3dd84:	4a06      	ldr	r2, [pc, #24]	; (3dda0 <pended_on.isra.16+0x2c>)
   3dd86:	f009 fda0 	bl	478ca <printk>
   3dd8a:	f240 1183 	movw	r1, #387	; 0x183
   3dd8e:	4804      	ldr	r0, [pc, #16]	; (3dda0 <pended_on.isra.16+0x2c>)
   3dd90:	f009 fda8 	bl	478e4 <assert_post_action>
}
   3dd94:	6820      	ldr	r0, [r4, #0]
   3dd96:	bd10      	pop	{r4, pc}
   3dd98:	00052acc 	.word	0x00052acc
   3dd9c:	0004ccf0 	.word	0x0004ccf0
   3dda0:	00052aa9 	.word	0x00052aa9

0003dda4 <z_reset_time_slice>:
{
   3dda4:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3dda6:	4c08      	ldr	r4, [pc, #32]	; (3ddc8 <z_reset_time_slice+0x24>)
   3dda8:	6823      	ldr	r3, [r4, #0]
   3ddaa:	b15b      	cbz	r3, 3ddc4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3ddac:	f7e3 fb24 	bl	213f8 <z_clock_elapsed>
   3ddb0:	6823      	ldr	r3, [r4, #0]
   3ddb2:	4a06      	ldr	r2, [pc, #24]	; (3ddcc <z_reset_time_slice+0x28>)
   3ddb4:	4418      	add	r0, r3
   3ddb6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3ddb8:	2100      	movs	r1, #0
}
   3ddba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3ddbe:	4618      	mov	r0, r3
   3ddc0:	f001 bdfe 	b.w	3f9c0 <z_set_timeout_expiry>
}
   3ddc4:	bd10      	pop	{r4, pc}
   3ddc6:	bf00      	nop
   3ddc8:	2002a5b8 	.word	0x2002a5b8
   3ddcc:	2002a578 	.word	0x2002a578

0003ddd0 <k_sched_time_slice_set>:
{
   3ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ddd2:	4607      	mov	r7, r0
   3ddd4:	460d      	mov	r5, r1
	__asm__ volatile(
   3ddd6:	f04f 0320 	mov.w	r3, #32
   3ddda:	f3ef 8411 	mrs	r4, BASEPRI
   3ddde:	f383 8811 	msr	BASEPRI, r3
   3dde2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dde6:	481f      	ldr	r0, [pc, #124]	; (3de64 <k_sched_time_slice_set+0x94>)
   3dde8:	f001 f940 	bl	3f06c <z_spin_lock_valid>
   3ddec:	b960      	cbnz	r0, 3de08 <k_sched_time_slice_set+0x38>
   3ddee:	491e      	ldr	r1, [pc, #120]	; (3de68 <k_sched_time_slice_set+0x98>)
   3ddf0:	235f      	movs	r3, #95	; 0x5f
   3ddf2:	4a1e      	ldr	r2, [pc, #120]	; (3de6c <k_sched_time_slice_set+0x9c>)
   3ddf4:	481e      	ldr	r0, [pc, #120]	; (3de70 <k_sched_time_slice_set+0xa0>)
   3ddf6:	f009 fd68 	bl	478ca <printk>
   3ddfa:	481e      	ldr	r0, [pc, #120]	; (3de74 <k_sched_time_slice_set+0xa4>)
   3ddfc:	f009 fd65 	bl	478ca <printk>
   3de00:	215f      	movs	r1, #95	; 0x5f
   3de02:	481a      	ldr	r0, [pc, #104]	; (3de6c <k_sched_time_slice_set+0x9c>)
   3de04:	f009 fd6e 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3de08:	4816      	ldr	r0, [pc, #88]	; (3de64 <k_sched_time_slice_set+0x94>)
   3de0a:	f001 f94d 	bl	3f0a8 <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   3de0e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3de12:	2200      	movs	r2, #0
   3de14:	f240 30e7 	movw	r0, #999	; 0x3e7
   3de18:	2100      	movs	r1, #0
   3de1a:	4b17      	ldr	r3, [pc, #92]	; (3de78 <k_sched_time_slice_set+0xa8>)
   3de1c:	fbc6 0107 	smlal	r0, r1, r6, r7
   3de20:	611a      	str	r2, [r3, #16]
   3de22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3de26:	2300      	movs	r3, #0
   3de28:	f7da ff78 	bl	18d1c <__aeabi_ldivmod>
   3de2c:	4b13      	ldr	r3, [pc, #76]	; (3de7c <k_sched_time_slice_set+0xac>)
   3de2e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3de30:	4b13      	ldr	r3, [pc, #76]	; (3de80 <k_sched_time_slice_set+0xb0>)
   3de32:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   3de34:	f7ff ffb6 	bl	3dda4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3de38:	480a      	ldr	r0, [pc, #40]	; (3de64 <k_sched_time_slice_set+0x94>)
   3de3a:	f001 f925 	bl	3f088 <z_spin_unlock_valid>
   3de3e:	b960      	cbnz	r0, 3de5a <k_sched_time_slice_set+0x8a>
   3de40:	4910      	ldr	r1, [pc, #64]	; (3de84 <k_sched_time_slice_set+0xb4>)
   3de42:	2372      	movs	r3, #114	; 0x72
   3de44:	4a09      	ldr	r2, [pc, #36]	; (3de6c <k_sched_time_slice_set+0x9c>)
   3de46:	480a      	ldr	r0, [pc, #40]	; (3de70 <k_sched_time_slice_set+0xa0>)
   3de48:	f009 fd3f 	bl	478ca <printk>
   3de4c:	480e      	ldr	r0, [pc, #56]	; (3de88 <k_sched_time_slice_set+0xb8>)
   3de4e:	f009 fd3c 	bl	478ca <printk>
   3de52:	2172      	movs	r1, #114	; 0x72
   3de54:	4805      	ldr	r0, [pc, #20]	; (3de6c <k_sched_time_slice_set+0x9c>)
   3de56:	f009 fd45 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3de5a:	f384 8811 	msr	BASEPRI, r4
   3de5e:	f3bf 8f6f 	isb	sy
}
   3de62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de64:	2002a5b0 	.word	0x2002a5b0
   3de68:	0004d875 	.word	0x0004d875
   3de6c:	0004d84e 	.word	0x0004d84e
   3de70:	0004ccf0 	.word	0x0004ccf0
   3de74:	0004d88a 	.word	0x0004d88a
   3de78:	2002a578 	.word	0x2002a578
   3de7c:	2002a5b8 	.word	0x2002a5b8
   3de80:	2002a5b4 	.word	0x2002a5b4
   3de84:	0004d89f 	.word	0x0004d89f
   3de88:	0004d8b6 	.word	0x0004d8b6

0003de8c <z_unpend_thread_no_timeout>:
{
   3de8c:	b538      	push	{r3, r4, r5, lr}
   3de8e:	4604      	mov	r4, r0
	__asm__ volatile(
   3de90:	f04f 0320 	mov.w	r3, #32
   3de94:	f3ef 8511 	mrs	r5, BASEPRI
   3de98:	f383 8811 	msr	BASEPRI, r3
   3de9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dea0:	481b      	ldr	r0, [pc, #108]	; (3df10 <z_unpend_thread_no_timeout+0x84>)
   3dea2:	f001 f8e3 	bl	3f06c <z_spin_lock_valid>
   3dea6:	b960      	cbnz	r0, 3dec2 <z_unpend_thread_no_timeout+0x36>
   3dea8:	491a      	ldr	r1, [pc, #104]	; (3df14 <z_unpend_thread_no_timeout+0x88>)
   3deaa:	235f      	movs	r3, #95	; 0x5f
   3deac:	4a1a      	ldr	r2, [pc, #104]	; (3df18 <z_unpend_thread_no_timeout+0x8c>)
   3deae:	481b      	ldr	r0, [pc, #108]	; (3df1c <z_unpend_thread_no_timeout+0x90>)
   3deb0:	f009 fd0b 	bl	478ca <printk>
   3deb4:	481a      	ldr	r0, [pc, #104]	; (3df20 <z_unpend_thread_no_timeout+0x94>)
   3deb6:	f009 fd08 	bl	478ca <printk>
   3deba:	215f      	movs	r1, #95	; 0x5f
   3debc:	4816      	ldr	r0, [pc, #88]	; (3df18 <z_unpend_thread_no_timeout+0x8c>)
   3debe:	f009 fd11 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dec2:	4813      	ldr	r0, [pc, #76]	; (3df10 <z_unpend_thread_no_timeout+0x84>)
   3dec4:	f001 f8f0 	bl	3f0a8 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3dec8:	f104 0008 	add.w	r0, r4, #8
   3decc:	f7ff ff52 	bl	3dd74 <pended_on.isra.16>
   3ded0:	4621      	mov	r1, r4
   3ded2:	f000 f8e5 	bl	3e0a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3ded6:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ded8:	480d      	ldr	r0, [pc, #52]	; (3df10 <z_unpend_thread_no_timeout+0x84>)
   3deda:	f023 0302 	bic.w	r3, r3, #2
   3dede:	7363      	strb	r3, [r4, #13]
   3dee0:	f001 f8d2 	bl	3f088 <z_spin_unlock_valid>
   3dee4:	b960      	cbnz	r0, 3df00 <z_unpend_thread_no_timeout+0x74>
   3dee6:	490f      	ldr	r1, [pc, #60]	; (3df24 <z_unpend_thread_no_timeout+0x98>)
   3dee8:	2372      	movs	r3, #114	; 0x72
   3deea:	4a0b      	ldr	r2, [pc, #44]	; (3df18 <z_unpend_thread_no_timeout+0x8c>)
   3deec:	480b      	ldr	r0, [pc, #44]	; (3df1c <z_unpend_thread_no_timeout+0x90>)
   3deee:	f009 fcec 	bl	478ca <printk>
   3def2:	480d      	ldr	r0, [pc, #52]	; (3df28 <z_unpend_thread_no_timeout+0x9c>)
   3def4:	f009 fce9 	bl	478ca <printk>
   3def8:	2172      	movs	r1, #114	; 0x72
   3defa:	4807      	ldr	r0, [pc, #28]	; (3df18 <z_unpend_thread_no_timeout+0x8c>)
   3defc:	f009 fcf2 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3df00:	f385 8811 	msr	BASEPRI, r5
   3df04:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3df08:	2300      	movs	r3, #0
   3df0a:	60a3      	str	r3, [r4, #8]
}
   3df0c:	bd38      	pop	{r3, r4, r5, pc}
   3df0e:	bf00      	nop
   3df10:	2002a5b0 	.word	0x2002a5b0
   3df14:	0004d875 	.word	0x0004d875
   3df18:	0004d84e 	.word	0x0004d84e
   3df1c:	0004ccf0 	.word	0x0004ccf0
   3df20:	0004d88a 	.word	0x0004d88a
   3df24:	0004d89f 	.word	0x0004d89f
   3df28:	0004d8b6 	.word	0x0004d8b6

0003df2c <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3df2c:	b510      	push	{r4, lr}
   3df2e:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   3df30:	460c      	mov	r4, r1
   3df32:	b9c1      	cbnz	r1, 3df66 <z_reschedule+0x3a>
   3df34:	f7ff ff0c 	bl	3dd50 <resched.part.15>
	if (resched(key.key)) {
   3df38:	b1a8      	cbz	r0, 3df66 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3df3a:	4610      	mov	r0, r2
   3df3c:	f001 f8a4 	bl	3f088 <z_spin_unlock_valid>
   3df40:	b960      	cbnz	r0, 3df5c <z_reschedule+0x30>
   3df42:	4914      	ldr	r1, [pc, #80]	; (3df94 <z_reschedule+0x68>)
   3df44:	2389      	movs	r3, #137	; 0x89
   3df46:	4a14      	ldr	r2, [pc, #80]	; (3df98 <z_reschedule+0x6c>)
   3df48:	4814      	ldr	r0, [pc, #80]	; (3df9c <z_reschedule+0x70>)
   3df4a:	f009 fcbe 	bl	478ca <printk>
   3df4e:	4814      	ldr	r0, [pc, #80]	; (3dfa0 <z_reschedule+0x74>)
   3df50:	f009 fcbb 	bl	478ca <printk>
   3df54:	2189      	movs	r1, #137	; 0x89
   3df56:	4810      	ldr	r0, [pc, #64]	; (3df98 <z_reschedule+0x6c>)
   3df58:	f009 fcc4 	bl	478e4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3df5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3df60:	2000      	movs	r0, #0
   3df62:	f7e3 bba9 	b.w	216b8 <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3df66:	4610      	mov	r0, r2
   3df68:	f001 f88e 	bl	3f088 <z_spin_unlock_valid>
   3df6c:	b960      	cbnz	r0, 3df88 <z_reschedule+0x5c>
   3df6e:	4909      	ldr	r1, [pc, #36]	; (3df94 <z_reschedule+0x68>)
   3df70:	2372      	movs	r3, #114	; 0x72
   3df72:	4a09      	ldr	r2, [pc, #36]	; (3df98 <z_reschedule+0x6c>)
   3df74:	4809      	ldr	r0, [pc, #36]	; (3df9c <z_reschedule+0x70>)
   3df76:	f009 fca8 	bl	478ca <printk>
   3df7a:	4809      	ldr	r0, [pc, #36]	; (3dfa0 <z_reschedule+0x74>)
   3df7c:	f009 fca5 	bl	478ca <printk>
   3df80:	2172      	movs	r1, #114	; 0x72
   3df82:	4805      	ldr	r0, [pc, #20]	; (3df98 <z_reschedule+0x6c>)
   3df84:	f009 fcae 	bl	478e4 <assert_post_action>
   3df88:	f384 8811 	msr	BASEPRI, r4
   3df8c:	f3bf 8f6f 	isb	sy
   3df90:	bd10      	pop	{r4, pc}
   3df92:	bf00      	nop
   3df94:	0004d89f 	.word	0x0004d89f
   3df98:	0004d84e 	.word	0x0004d84e
   3df9c:	0004ccf0 	.word	0x0004ccf0
   3dfa0:	0004d8b6 	.word	0x0004d8b6

0003dfa4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3dfa4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3dfa6:	f04f 0320 	mov.w	r3, #32
   3dfaa:	f3ef 8511 	mrs	r5, BASEPRI
   3dfae:	f383 8811 	msr	BASEPRI, r3
   3dfb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dfb6:	482d      	ldr	r0, [pc, #180]	; (3e06c <k_sched_lock+0xc8>)
   3dfb8:	f001 f858 	bl	3f06c <z_spin_lock_valid>
   3dfbc:	b960      	cbnz	r0, 3dfd8 <k_sched_lock+0x34>
   3dfbe:	492c      	ldr	r1, [pc, #176]	; (3e070 <k_sched_lock+0xcc>)
   3dfc0:	235f      	movs	r3, #95	; 0x5f
   3dfc2:	4a2c      	ldr	r2, [pc, #176]	; (3e074 <k_sched_lock+0xd0>)
   3dfc4:	482c      	ldr	r0, [pc, #176]	; (3e078 <k_sched_lock+0xd4>)
   3dfc6:	f009 fc80 	bl	478ca <printk>
   3dfca:	482c      	ldr	r0, [pc, #176]	; (3e07c <k_sched_lock+0xd8>)
   3dfcc:	f009 fc7d 	bl	478ca <printk>
   3dfd0:	215f      	movs	r1, #95	; 0x5f
   3dfd2:	4828      	ldr	r0, [pc, #160]	; (3e074 <k_sched_lock+0xd0>)
   3dfd4:	f009 fc86 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dfd8:	4824      	ldr	r0, [pc, #144]	; (3e06c <k_sched_lock+0xc8>)
   3dfda:	f001 f865 	bl	3f0a8 <z_spin_lock_set_owner>
   3dfde:	f3ef 8305 	mrs	r3, IPSR
   3dfe2:	2b0d      	cmp	r3, #13
   3dfe4:	d804      	bhi.n	3dff0 <k_sched_lock+0x4c>
   3dfe6:	b193      	cbz	r3, 3e00e <k_sched_lock+0x6a>
   3dfe8:	4b25      	ldr	r3, [pc, #148]	; (3e080 <k_sched_lock+0xdc>)
   3dfea:	685b      	ldr	r3, [r3, #4]
   3dfec:	051b      	lsls	r3, r3, #20
   3dfee:	d40e      	bmi.n	3e00e <k_sched_lock+0x6a>
	__ASSERT(!z_arch_is_in_isr(), "");
   3dff0:	4924      	ldr	r1, [pc, #144]	; (3e084 <k_sched_lock+0xe0>)
   3dff2:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3dff6:	4a24      	ldr	r2, [pc, #144]	; (3e088 <k_sched_lock+0xe4>)
   3dff8:	481f      	ldr	r0, [pc, #124]	; (3e078 <k_sched_lock+0xd4>)
   3dffa:	f009 fc66 	bl	478ca <printk>
   3dffe:	4823      	ldr	r0, [pc, #140]	; (3e08c <k_sched_lock+0xe8>)
   3e000:	f009 fc63 	bl	478ca <printk>
   3e004:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3e008:	481f      	ldr	r0, [pc, #124]	; (3e088 <k_sched_lock+0xe4>)
   3e00a:	f009 fc6b 	bl	478e4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3e00e:	4c20      	ldr	r4, [pc, #128]	; (3e090 <k_sched_lock+0xec>)
   3e010:	68a2      	ldr	r2, [r4, #8]
   3e012:	7bd2      	ldrb	r2, [r2, #15]
   3e014:	2a01      	cmp	r2, #1
   3e016:	d10e      	bne.n	3e036 <k_sched_lock+0x92>
   3e018:	491e      	ldr	r1, [pc, #120]	; (3e094 <k_sched_lock+0xf0>)
   3e01a:	f240 130d 	movw	r3, #269	; 0x10d
   3e01e:	4a1a      	ldr	r2, [pc, #104]	; (3e088 <k_sched_lock+0xe4>)
   3e020:	4815      	ldr	r0, [pc, #84]	; (3e078 <k_sched_lock+0xd4>)
   3e022:	f009 fc52 	bl	478ca <printk>
   3e026:	4819      	ldr	r0, [pc, #100]	; (3e08c <k_sched_lock+0xe8>)
   3e028:	f009 fc4f 	bl	478ca <printk>
   3e02c:	f240 110d 	movw	r1, #269	; 0x10d
   3e030:	4815      	ldr	r0, [pc, #84]	; (3e088 <k_sched_lock+0xe4>)
   3e032:	f009 fc57 	bl	478e4 <assert_post_action>
	--_current->base.sched_locked;
   3e036:	68a2      	ldr	r2, [r4, #8]
   3e038:	7bd3      	ldrb	r3, [r2, #15]
   3e03a:	3b01      	subs	r3, #1
   3e03c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e03e:	480b      	ldr	r0, [pc, #44]	; (3e06c <k_sched_lock+0xc8>)
   3e040:	f001 f822 	bl	3f088 <z_spin_unlock_valid>
   3e044:	b960      	cbnz	r0, 3e060 <k_sched_lock+0xbc>
   3e046:	4914      	ldr	r1, [pc, #80]	; (3e098 <k_sched_lock+0xf4>)
   3e048:	2372      	movs	r3, #114	; 0x72
   3e04a:	4a0a      	ldr	r2, [pc, #40]	; (3e074 <k_sched_lock+0xd0>)
   3e04c:	480a      	ldr	r0, [pc, #40]	; (3e078 <k_sched_lock+0xd4>)
   3e04e:	f009 fc3c 	bl	478ca <printk>
   3e052:	4812      	ldr	r0, [pc, #72]	; (3e09c <k_sched_lock+0xf8>)
   3e054:	f009 fc39 	bl	478ca <printk>
   3e058:	2172      	movs	r1, #114	; 0x72
   3e05a:	4806      	ldr	r0, [pc, #24]	; (3e074 <k_sched_lock+0xd0>)
   3e05c:	f009 fc42 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e060:	f385 8811 	msr	BASEPRI, r5
   3e064:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3e068:	bd38      	pop	{r3, r4, r5, pc}
   3e06a:	bf00      	nop
   3e06c:	2002a5b0 	.word	0x2002a5b0
   3e070:	0004d875 	.word	0x0004d875
   3e074:	0004d84e 	.word	0x0004d84e
   3e078:	0004ccf0 	.word	0x0004ccf0
   3e07c:	0004d88a 	.word	0x0004d88a
   3e080:	e000ed00 	.word	0xe000ed00
   3e084:	00052a45 	.word	0x00052a45
   3e088:	00052a19 	.word	0x00052a19
   3e08c:	0005294a 	.word	0x0005294a
   3e090:	2002a578 	.word	0x2002a578
   3e094:	00052a59 	.word	0x00052a59
   3e098:	0004d89f 	.word	0x0004d89f
   3e09c:	0004d8b6 	.word	0x0004d8b6

0003e0a0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3e0a0:	4b12      	ldr	r3, [pc, #72]	; (3e0ec <z_priq_dumb_remove+0x4c>)
{
   3e0a2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3e0a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3e0a8:	4282      	cmp	r2, r0
{
   3e0aa:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3e0ac:	d105      	bne.n	3e0ba <z_priq_dumb_remove+0x1a>
   3e0ae:	689b      	ldr	r3, [r3, #8]
   3e0b0:	428b      	cmp	r3, r1
   3e0b2:	d102      	bne.n	3e0ba <z_priq_dumb_remove+0x1a>
   3e0b4:	7b4b      	ldrb	r3, [r1, #13]
   3e0b6:	06db      	lsls	r3, r3, #27
   3e0b8:	d116      	bne.n	3e0e8 <z_priq_dumb_remove+0x48>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e0ba:	4b0d      	ldr	r3, [pc, #52]	; (3e0f0 <z_priq_dumb_remove+0x50>)
   3e0bc:	429c      	cmp	r4, r3
   3e0be:	d10b      	bne.n	3e0d8 <z_priq_dumb_remove+0x38>
   3e0c0:	490c      	ldr	r1, [pc, #48]	; (3e0f4 <z_priq_dumb_remove+0x54>)
   3e0c2:	480d      	ldr	r0, [pc, #52]	; (3e0f8 <z_priq_dumb_remove+0x58>)
   3e0c4:	f44f 7325 	mov.w	r3, #660	; 0x294
   3e0c8:	4a0c      	ldr	r2, [pc, #48]	; (3e0fc <z_priq_dumb_remove+0x5c>)
   3e0ca:	f009 fbfe 	bl	478ca <printk>
   3e0ce:	f44f 7125 	mov.w	r1, #660	; 0x294
   3e0d2:	480a      	ldr	r0, [pc, #40]	; (3e0fc <z_priq_dumb_remove+0x5c>)
   3e0d4:	f009 fc06 	bl	478e4 <assert_post_action>
	node->prev->next = node->next;
   3e0d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   3e0dc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   3e0de:	6822      	ldr	r2, [r4, #0]
   3e0e0:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   3e0e2:	2300      	movs	r3, #0
	node->prev = NULL;
   3e0e4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3e0e8:	bd10      	pop	{r4, pc}
   3e0ea:	bf00      	nop
   3e0ec:	2002a578 	.word	0x2002a578
   3e0f0:	200263a8 	.word	0x200263a8
   3e0f4:	00052b02 	.word	0x00052b02
   3e0f8:	0004ccf0 	.word	0x0004ccf0
   3e0fc:	00052aa9 	.word	0x00052aa9

0003e100 <z_unpend_thread>:
{
   3e100:	b538      	push	{r3, r4, r5, lr}
   3e102:	4604      	mov	r4, r0
	__asm__ volatile(
   3e104:	f04f 0320 	mov.w	r3, #32
   3e108:	f3ef 8511 	mrs	r5, BASEPRI
   3e10c:	f383 8811 	msr	BASEPRI, r3
   3e110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e114:	481d      	ldr	r0, [pc, #116]	; (3e18c <z_unpend_thread+0x8c>)
   3e116:	f000 ffa9 	bl	3f06c <z_spin_lock_valid>
   3e11a:	b960      	cbnz	r0, 3e136 <z_unpend_thread+0x36>
   3e11c:	491c      	ldr	r1, [pc, #112]	; (3e190 <z_unpend_thread+0x90>)
   3e11e:	235f      	movs	r3, #95	; 0x5f
   3e120:	4a1c      	ldr	r2, [pc, #112]	; (3e194 <z_unpend_thread+0x94>)
   3e122:	481d      	ldr	r0, [pc, #116]	; (3e198 <z_unpend_thread+0x98>)
   3e124:	f009 fbd1 	bl	478ca <printk>
   3e128:	481c      	ldr	r0, [pc, #112]	; (3e19c <z_unpend_thread+0x9c>)
   3e12a:	f009 fbce 	bl	478ca <printk>
   3e12e:	215f      	movs	r1, #95	; 0x5f
   3e130:	4818      	ldr	r0, [pc, #96]	; (3e194 <z_unpend_thread+0x94>)
   3e132:	f009 fbd7 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e136:	4815      	ldr	r0, [pc, #84]	; (3e18c <z_unpend_thread+0x8c>)
   3e138:	f000 ffb6 	bl	3f0a8 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3e13c:	f104 0008 	add.w	r0, r4, #8
   3e140:	f7ff fe18 	bl	3dd74 <pended_on.isra.16>
   3e144:	4621      	mov	r1, r4
   3e146:	f7ff ffab 	bl	3e0a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3e14a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e14c:	480f      	ldr	r0, [pc, #60]	; (3e18c <z_unpend_thread+0x8c>)
   3e14e:	f023 0302 	bic.w	r3, r3, #2
   3e152:	7363      	strb	r3, [r4, #13]
   3e154:	f000 ff98 	bl	3f088 <z_spin_unlock_valid>
   3e158:	b960      	cbnz	r0, 3e174 <z_unpend_thread+0x74>
   3e15a:	4911      	ldr	r1, [pc, #68]	; (3e1a0 <z_unpend_thread+0xa0>)
   3e15c:	2372      	movs	r3, #114	; 0x72
   3e15e:	4a0d      	ldr	r2, [pc, #52]	; (3e194 <z_unpend_thread+0x94>)
   3e160:	480d      	ldr	r0, [pc, #52]	; (3e198 <z_unpend_thread+0x98>)
   3e162:	f009 fbb2 	bl	478ca <printk>
   3e166:	480f      	ldr	r0, [pc, #60]	; (3e1a4 <z_unpend_thread+0xa4>)
   3e168:	f009 fbaf 	bl	478ca <printk>
   3e16c:	2172      	movs	r1, #114	; 0x72
   3e16e:	4809      	ldr	r0, [pc, #36]	; (3e194 <z_unpend_thread+0x94>)
   3e170:	f009 fbb8 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e174:	f385 8811 	msr	BASEPRI, r5
   3e178:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3e17c:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3e17e:	f104 0018 	add.w	r0, r4, #24
   3e182:	60a3      	str	r3, [r4, #8]
}
   3e184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e188:	f001 bb88 	b.w	3f89c <z_abort_timeout>
   3e18c:	2002a5b0 	.word	0x2002a5b0
   3e190:	0004d875 	.word	0x0004d875
   3e194:	0004d84e 	.word	0x0004d84e
   3e198:	0004ccf0 	.word	0x0004ccf0
   3e19c:	0004d88a 	.word	0x0004d88a
   3e1a0:	0004d89f 	.word	0x0004d89f
   3e1a4:	0004d8b6 	.word	0x0004d8b6

0003e1a8 <update_cache>:
{
   3e1a8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3e1aa:	4c15      	ldr	r4, [pc, #84]	; (3e200 <update_cache+0x58>)
{
   3e1ac:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3e1ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3e1b2:	f00b ff7c 	bl	4a0ae <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   3e1b6:	4605      	mov	r5, r0
   3e1b8:	b900      	cbnz	r0, 3e1bc <update_cache+0x14>
   3e1ba:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3e1bc:	b9ca      	cbnz	r2, 3e1f2 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   3e1be:	68a3      	ldr	r3, [r4, #8]
   3e1c0:	b963      	cbnz	r3, 3e1dc <update_cache+0x34>
   3e1c2:	4910      	ldr	r1, [pc, #64]	; (3e204 <update_cache+0x5c>)
   3e1c4:	2375      	movs	r3, #117	; 0x75
   3e1c6:	4a10      	ldr	r2, [pc, #64]	; (3e208 <update_cache+0x60>)
   3e1c8:	4810      	ldr	r0, [pc, #64]	; (3e20c <update_cache+0x64>)
   3e1ca:	f009 fb7e 	bl	478ca <printk>
   3e1ce:	4810      	ldr	r0, [pc, #64]	; (3e210 <update_cache+0x68>)
   3e1d0:	f009 fb7b 	bl	478ca <printk>
   3e1d4:	2175      	movs	r1, #117	; 0x75
   3e1d6:	480c      	ldr	r0, [pc, #48]	; (3e208 <update_cache+0x60>)
   3e1d8:	f009 fb84 	bl	478e4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3e1dc:	68a3      	ldr	r3, [r4, #8]
   3e1de:	7b5a      	ldrb	r2, [r3, #13]
   3e1e0:	06d2      	lsls	r2, r2, #27
   3e1e2:	d106      	bne.n	3e1f2 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3e1e4:	69aa      	ldr	r2, [r5, #24]
   3e1e6:	b922      	cbnz	r2, 3e1f2 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   3e1e8:	89da      	ldrh	r2, [r3, #14]
   3e1ea:	2a7f      	cmp	r2, #127	; 0x7f
   3e1ec:	d901      	bls.n	3e1f2 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   3e1ee:	6263      	str	r3, [r4, #36]	; 0x24
}
   3e1f0:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   3e1f2:	68a3      	ldr	r3, [r4, #8]
   3e1f4:	42ab      	cmp	r3, r5
   3e1f6:	d001      	beq.n	3e1fc <update_cache+0x54>
			z_reset_time_slice();
   3e1f8:	f7ff fdd4 	bl	3dda4 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   3e1fc:	6265      	str	r5, [r4, #36]	; 0x24
}
   3e1fe:	e7f7      	b.n	3e1f0 <update_cache+0x48>
   3e200:	2002a578 	.word	0x2002a578
   3e204:	00052ae3 	.word	0x00052ae3
   3e208:	00052aa9 	.word	0x00052aa9
   3e20c:	0004ccf0 	.word	0x0004ccf0
   3e210:	0005294a 	.word	0x0005294a

0003e214 <k_sched_unlock>:
{
   3e214:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   3e216:	4c33      	ldr	r4, [pc, #204]	; (3e2e4 <k_sched_unlock+0xd0>)
   3e218:	68a2      	ldr	r2, [r4, #8]
   3e21a:	7bd2      	ldrb	r2, [r2, #15]
   3e21c:	b972      	cbnz	r2, 3e23c <k_sched_unlock+0x28>
   3e21e:	4932      	ldr	r1, [pc, #200]	; (3e2e8 <k_sched_unlock+0xd4>)
   3e220:	f240 232d 	movw	r3, #557	; 0x22d
   3e224:	4a31      	ldr	r2, [pc, #196]	; (3e2ec <k_sched_unlock+0xd8>)
   3e226:	4832      	ldr	r0, [pc, #200]	; (3e2f0 <k_sched_unlock+0xdc>)
   3e228:	f009 fb4f 	bl	478ca <printk>
   3e22c:	4831      	ldr	r0, [pc, #196]	; (3e2f4 <k_sched_unlock+0xe0>)
   3e22e:	f009 fb4c 	bl	478ca <printk>
   3e232:	f240 212d 	movw	r1, #557	; 0x22d
   3e236:	482d      	ldr	r0, [pc, #180]	; (3e2ec <k_sched_unlock+0xd8>)
   3e238:	f009 fb54 	bl	478e4 <assert_post_action>
   3e23c:	f3ef 8305 	mrs	r3, IPSR
   3e240:	2b0d      	cmp	r3, #13
   3e242:	d804      	bhi.n	3e24e <k_sched_unlock+0x3a>
   3e244:	b193      	cbz	r3, 3e26c <k_sched_unlock+0x58>
   3e246:	4b2c      	ldr	r3, [pc, #176]	; (3e2f8 <k_sched_unlock+0xe4>)
   3e248:	685b      	ldr	r3, [r3, #4]
   3e24a:	051b      	lsls	r3, r3, #20
   3e24c:	d40e      	bmi.n	3e26c <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   3e24e:	492b      	ldr	r1, [pc, #172]	; (3e2fc <k_sched_unlock+0xe8>)
   3e250:	f240 232e 	movw	r3, #558	; 0x22e
   3e254:	4a25      	ldr	r2, [pc, #148]	; (3e2ec <k_sched_unlock+0xd8>)
   3e256:	4826      	ldr	r0, [pc, #152]	; (3e2f0 <k_sched_unlock+0xdc>)
   3e258:	f009 fb37 	bl	478ca <printk>
   3e25c:	4825      	ldr	r0, [pc, #148]	; (3e2f4 <k_sched_unlock+0xe0>)
   3e25e:	f009 fb34 	bl	478ca <printk>
   3e262:	f240 212e 	movw	r1, #558	; 0x22e
   3e266:	4821      	ldr	r0, [pc, #132]	; (3e2ec <k_sched_unlock+0xd8>)
   3e268:	f009 fb3c 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e26c:	f04f 0320 	mov.w	r3, #32
   3e270:	f3ef 8511 	mrs	r5, BASEPRI
   3e274:	f383 8811 	msr	BASEPRI, r3
   3e278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e27c:	4820      	ldr	r0, [pc, #128]	; (3e300 <k_sched_unlock+0xec>)
   3e27e:	f000 fef5 	bl	3f06c <z_spin_lock_valid>
   3e282:	b960      	cbnz	r0, 3e29e <k_sched_unlock+0x8a>
   3e284:	491f      	ldr	r1, [pc, #124]	; (3e304 <k_sched_unlock+0xf0>)
   3e286:	235f      	movs	r3, #95	; 0x5f
   3e288:	4a1f      	ldr	r2, [pc, #124]	; (3e308 <k_sched_unlock+0xf4>)
   3e28a:	4819      	ldr	r0, [pc, #100]	; (3e2f0 <k_sched_unlock+0xdc>)
   3e28c:	f009 fb1d 	bl	478ca <printk>
   3e290:	481e      	ldr	r0, [pc, #120]	; (3e30c <k_sched_unlock+0xf8>)
   3e292:	f009 fb1a 	bl	478ca <printk>
   3e296:	215f      	movs	r1, #95	; 0x5f
   3e298:	481b      	ldr	r0, [pc, #108]	; (3e308 <k_sched_unlock+0xf4>)
   3e29a:	f009 fb23 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e29e:	4818      	ldr	r0, [pc, #96]	; (3e300 <k_sched_unlock+0xec>)
   3e2a0:	f000 ff02 	bl	3f0a8 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   3e2a4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3e2a6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3e2a8:	7bd3      	ldrb	r3, [r2, #15]
   3e2aa:	3301      	adds	r3, #1
   3e2ac:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3e2ae:	f7ff ff7b 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e2b2:	4813      	ldr	r0, [pc, #76]	; (3e300 <k_sched_unlock+0xec>)
   3e2b4:	f000 fee8 	bl	3f088 <z_spin_unlock_valid>
   3e2b8:	b960      	cbnz	r0, 3e2d4 <k_sched_unlock+0xc0>
   3e2ba:	4915      	ldr	r1, [pc, #84]	; (3e310 <k_sched_unlock+0xfc>)
   3e2bc:	2372      	movs	r3, #114	; 0x72
   3e2be:	4a12      	ldr	r2, [pc, #72]	; (3e308 <k_sched_unlock+0xf4>)
   3e2c0:	480b      	ldr	r0, [pc, #44]	; (3e2f0 <k_sched_unlock+0xdc>)
   3e2c2:	f009 fb02 	bl	478ca <printk>
   3e2c6:	4813      	ldr	r0, [pc, #76]	; (3e314 <k_sched_unlock+0x100>)
   3e2c8:	f009 faff 	bl	478ca <printk>
   3e2cc:	2172      	movs	r1, #114	; 0x72
   3e2ce:	480e      	ldr	r0, [pc, #56]	; (3e308 <k_sched_unlock+0xf4>)
   3e2d0:	f009 fb08 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e2d4:	f385 8811 	msr	BASEPRI, r5
   3e2d8:	f3bf 8f6f 	isb	sy
}
   3e2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3e2e0:	f00b bedb 	b.w	4a09a <z_reschedule_unlocked>
   3e2e4:	2002a578 	.word	0x2002a578
   3e2e8:	00052a81 	.word	0x00052a81
   3e2ec:	00052aa9 	.word	0x00052aa9
   3e2f0:	0004ccf0 	.word	0x0004ccf0
   3e2f4:	0005294a 	.word	0x0005294a
   3e2f8:	e000ed00 	.word	0xe000ed00
   3e2fc:	00052a45 	.word	0x00052a45
   3e300:	2002a5b0 	.word	0x2002a5b0
   3e304:	0004d875 	.word	0x0004d875
   3e308:	0004d84e 	.word	0x0004d84e
   3e30c:	0004d88a 	.word	0x0004d88a
   3e310:	0004d89f 	.word	0x0004d89f
   3e314:	0004d8b6 	.word	0x0004d8b6

0003e318 <z_add_thread_to_ready_q>:
{
   3e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e31a:	4604      	mov	r4, r0
	__asm__ volatile(
   3e31c:	f04f 0320 	mov.w	r3, #32
   3e320:	f3ef 8511 	mrs	r5, BASEPRI
   3e324:	f383 8811 	msr	BASEPRI, r3
   3e328:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e32c:	482f      	ldr	r0, [pc, #188]	; (3e3ec <z_add_thread_to_ready_q+0xd4>)
   3e32e:	f000 fe9d 	bl	3f06c <z_spin_lock_valid>
   3e332:	b960      	cbnz	r0, 3e34e <z_add_thread_to_ready_q+0x36>
   3e334:	492e      	ldr	r1, [pc, #184]	; (3e3f0 <z_add_thread_to_ready_q+0xd8>)
   3e336:	235f      	movs	r3, #95	; 0x5f
   3e338:	4a2e      	ldr	r2, [pc, #184]	; (3e3f4 <z_add_thread_to_ready_q+0xdc>)
   3e33a:	482f      	ldr	r0, [pc, #188]	; (3e3f8 <z_add_thread_to_ready_q+0xe0>)
   3e33c:	f009 fac5 	bl	478ca <printk>
   3e340:	482e      	ldr	r0, [pc, #184]	; (3e3fc <z_add_thread_to_ready_q+0xe4>)
   3e342:	f009 fac2 	bl	478ca <printk>
   3e346:	215f      	movs	r1, #95	; 0x5f
   3e348:	482a      	ldr	r0, [pc, #168]	; (3e3f4 <z_add_thread_to_ready_q+0xdc>)
   3e34a:	f009 facb 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e34e:	4827      	ldr	r0, [pc, #156]	; (3e3ec <z_add_thread_to_ready_q+0xd4>)
   3e350:	f000 feaa 	bl	3f0a8 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e354:	4b2a      	ldr	r3, [pc, #168]	; (3e400 <z_add_thread_to_ready_q+0xe8>)
   3e356:	429c      	cmp	r4, r3
   3e358:	d10b      	bne.n	3e372 <z_add_thread_to_ready_q+0x5a>
   3e35a:	492a      	ldr	r1, [pc, #168]	; (3e404 <z_add_thread_to_ready_q+0xec>)
   3e35c:	4826      	ldr	r0, [pc, #152]	; (3e3f8 <z_add_thread_to_ready_q+0xe0>)
   3e35e:	f240 237e 	movw	r3, #638	; 0x27e
   3e362:	4a29      	ldr	r2, [pc, #164]	; (3e408 <z_add_thread_to_ready_q+0xf0>)
   3e364:	f009 fab1 	bl	478ca <printk>
   3e368:	f240 217e 	movw	r1, #638	; 0x27e
   3e36c:	4826      	ldr	r0, [pc, #152]	; (3e408 <z_add_thread_to_ready_q+0xf0>)
   3e36e:	f009 fab9 	bl	478e4 <assert_post_action>
	return list->head == list;
   3e372:	4a26      	ldr	r2, [pc, #152]	; (3e40c <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e374:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3e378:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3e37c:	428b      	cmp	r3, r1
   3e37e:	d00b      	beq.n	3e398 <z_add_thread_to_ready_q+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e380:	b153      	cbz	r3, 3e398 <z_add_thread_to_ready_q+0x80>
	if (t1->base.prio < t2->base.prio) {
   3e382:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3e386:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3e38a:	42b7      	cmp	r7, r6
   3e38c:	dc0a      	bgt.n	3e3a4 <z_add_thread_to_ready_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
   3e38e:	4298      	cmp	r0, r3
   3e390:	d002      	beq.n	3e398 <z_add_thread_to_ready_q+0x80>
   3e392:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e394:	2b00      	cmp	r3, #0
   3e396:	d1f6      	bne.n	3e386 <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   3e398:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3e39c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3e39e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3e3a0:	62d4      	str	r4, [r2, #44]	; 0x2c
   3e3a2:	e005      	b.n	3e3b0 <z_add_thread_to_ready_q+0x98>
	node->prev = successor->prev;
   3e3a4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3e3a6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3e3aa:	685a      	ldr	r2, [r3, #4]
   3e3ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3e3ae:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3e3b0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3e3b2:	2000      	movs	r0, #0
   3e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3e3b8:	7363      	strb	r3, [r4, #13]
   3e3ba:	f7ff fef5 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e3be:	480b      	ldr	r0, [pc, #44]	; (3e3ec <z_add_thread_to_ready_q+0xd4>)
   3e3c0:	f000 fe62 	bl	3f088 <z_spin_unlock_valid>
   3e3c4:	b960      	cbnz	r0, 3e3e0 <z_add_thread_to_ready_q+0xc8>
   3e3c6:	4912      	ldr	r1, [pc, #72]	; (3e410 <z_add_thread_to_ready_q+0xf8>)
   3e3c8:	2372      	movs	r3, #114	; 0x72
   3e3ca:	4a0a      	ldr	r2, [pc, #40]	; (3e3f4 <z_add_thread_to_ready_q+0xdc>)
   3e3cc:	480a      	ldr	r0, [pc, #40]	; (3e3f8 <z_add_thread_to_ready_q+0xe0>)
   3e3ce:	f009 fa7c 	bl	478ca <printk>
   3e3d2:	4810      	ldr	r0, [pc, #64]	; (3e414 <z_add_thread_to_ready_q+0xfc>)
   3e3d4:	f009 fa79 	bl	478ca <printk>
   3e3d8:	2172      	movs	r1, #114	; 0x72
   3e3da:	4806      	ldr	r0, [pc, #24]	; (3e3f4 <z_add_thread_to_ready_q+0xdc>)
   3e3dc:	f009 fa82 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e3e0:	f385 8811 	msr	BASEPRI, r5
   3e3e4:	f3bf 8f6f 	isb	sy
}
   3e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e3ea:	bf00      	nop
   3e3ec:	2002a5b0 	.word	0x2002a5b0
   3e3f0:	0004d875 	.word	0x0004d875
   3e3f4:	0004d84e 	.word	0x0004d84e
   3e3f8:	0004ccf0 	.word	0x0004ccf0
   3e3fc:	0004d88a 	.word	0x0004d88a
   3e400:	200263a8 	.word	0x200263a8
   3e404:	00052b02 	.word	0x00052b02
   3e408:	00052aa9 	.word	0x00052aa9
   3e40c:	2002a578 	.word	0x2002a578
   3e410:	0004d89f 	.word	0x0004d89f
   3e414:	0004d8b6 	.word	0x0004d8b6

0003e418 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   3e418:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   3e41c:	b570      	push	{r4, r5, r6, lr}
   3e41e:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   3e420:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   3e424:	2b00      	cmp	r3, #0
   3e426:	d040      	beq.n	3e4aa <z_thread_timeout+0x92>
	__asm__ volatile(
   3e428:	f04f 0320 	mov.w	r3, #32
   3e42c:	f3ef 8611 	mrs	r6, BASEPRI
   3e430:	f383 8811 	msr	BASEPRI, r3
   3e434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e438:	4824      	ldr	r0, [pc, #144]	; (3e4cc <z_thread_timeout+0xb4>)
   3e43a:	f000 fe17 	bl	3f06c <z_spin_lock_valid>
   3e43e:	b960      	cbnz	r0, 3e45a <z_thread_timeout+0x42>
   3e440:	4923      	ldr	r1, [pc, #140]	; (3e4d0 <z_thread_timeout+0xb8>)
   3e442:	235f      	movs	r3, #95	; 0x5f
   3e444:	4a23      	ldr	r2, [pc, #140]	; (3e4d4 <z_thread_timeout+0xbc>)
   3e446:	4824      	ldr	r0, [pc, #144]	; (3e4d8 <z_thread_timeout+0xc0>)
   3e448:	f009 fa3f 	bl	478ca <printk>
   3e44c:	4823      	ldr	r0, [pc, #140]	; (3e4dc <z_thread_timeout+0xc4>)
   3e44e:	f009 fa3c 	bl	478ca <printk>
   3e452:	215f      	movs	r1, #95	; 0x5f
   3e454:	481f      	ldr	r0, [pc, #124]	; (3e4d4 <z_thread_timeout+0xbc>)
   3e456:	f009 fa45 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e45a:	481c      	ldr	r0, [pc, #112]	; (3e4cc <z_thread_timeout+0xb4>)
   3e45c:	f000 fe24 	bl	3f0a8 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3e460:	f1a4 0010 	sub.w	r0, r4, #16
   3e464:	f7ff fc86 	bl	3dd74 <pended_on.isra.16>
   3e468:	4629      	mov	r1, r5
   3e46a:	f7ff fe19 	bl	3e0a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3e46e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e472:	4816      	ldr	r0, [pc, #88]	; (3e4cc <z_thread_timeout+0xb4>)
   3e474:	f023 0302 	bic.w	r3, r3, #2
   3e478:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3e47c:	f000 fe04 	bl	3f088 <z_spin_unlock_valid>
   3e480:	b960      	cbnz	r0, 3e49c <z_thread_timeout+0x84>
   3e482:	4917      	ldr	r1, [pc, #92]	; (3e4e0 <z_thread_timeout+0xc8>)
   3e484:	2372      	movs	r3, #114	; 0x72
   3e486:	4a13      	ldr	r2, [pc, #76]	; (3e4d4 <z_thread_timeout+0xbc>)
   3e488:	4813      	ldr	r0, [pc, #76]	; (3e4d8 <z_thread_timeout+0xc0>)
   3e48a:	f009 fa1e 	bl	478ca <printk>
   3e48e:	4815      	ldr	r0, [pc, #84]	; (3e4e4 <z_thread_timeout+0xcc>)
   3e490:	f009 fa1b 	bl	478ca <printk>
   3e494:	2172      	movs	r1, #114	; 0x72
   3e496:	480f      	ldr	r0, [pc, #60]	; (3e4d4 <z_thread_timeout+0xbc>)
   3e498:	f009 fa24 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e49c:	f386 8811 	msr	BASEPRI, r6
   3e4a0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3e4a4:	2300      	movs	r3, #0
   3e4a6:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3e4aa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3e4ae:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3e4b0:	f023 0314 	bic.w	r3, r3, #20
   3e4b4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3e4b8:	f00b fdcd 	bl	4a056 <z_is_thread_ready>
   3e4bc:	b120      	cbz	r0, 3e4c8 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   3e4be:	4628      	mov	r0, r5
}
   3e4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3e4c4:	f7ff bf28 	b.w	3e318 <z_add_thread_to_ready_q>
   3e4c8:	bd70      	pop	{r4, r5, r6, pc}
   3e4ca:	bf00      	nop
   3e4cc:	2002a5b0 	.word	0x2002a5b0
   3e4d0:	0004d875 	.word	0x0004d875
   3e4d4:	0004d84e 	.word	0x0004d84e
   3e4d8:	0004ccf0 	.word	0x0004ccf0
   3e4dc:	0004d88a 	.word	0x0004d88a
   3e4e0:	0004d89f 	.word	0x0004d89f
   3e4e4:	0004d8b6 	.word	0x0004d8b6

0003e4e8 <z_move_thread_to_end_of_prio_q>:
{
   3e4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e4ea:	4604      	mov	r4, r0
	__asm__ volatile(
   3e4ec:	f04f 0320 	mov.w	r3, #32
   3e4f0:	f3ef 8511 	mrs	r5, BASEPRI
   3e4f4:	f383 8811 	msr	BASEPRI, r3
   3e4f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e4fc:	4834      	ldr	r0, [pc, #208]	; (3e5d0 <z_move_thread_to_end_of_prio_q+0xe8>)
   3e4fe:	f000 fdb5 	bl	3f06c <z_spin_lock_valid>
   3e502:	b960      	cbnz	r0, 3e51e <z_move_thread_to_end_of_prio_q+0x36>
   3e504:	4933      	ldr	r1, [pc, #204]	; (3e5d4 <z_move_thread_to_end_of_prio_q+0xec>)
   3e506:	235f      	movs	r3, #95	; 0x5f
   3e508:	4a33      	ldr	r2, [pc, #204]	; (3e5d8 <z_move_thread_to_end_of_prio_q+0xf0>)
   3e50a:	4834      	ldr	r0, [pc, #208]	; (3e5dc <z_move_thread_to_end_of_prio_q+0xf4>)
   3e50c:	f009 f9dd 	bl	478ca <printk>
   3e510:	4833      	ldr	r0, [pc, #204]	; (3e5e0 <z_move_thread_to_end_of_prio_q+0xf8>)
   3e512:	f009 f9da 	bl	478ca <printk>
   3e516:	215f      	movs	r1, #95	; 0x5f
   3e518:	482f      	ldr	r0, [pc, #188]	; (3e5d8 <z_move_thread_to_end_of_prio_q+0xf0>)
   3e51a:	f009 f9e3 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e51e:	482c      	ldr	r0, [pc, #176]	; (3e5d0 <z_move_thread_to_end_of_prio_q+0xe8>)
   3e520:	f000 fdc2 	bl	3f0a8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3e524:	7b63      	ldrb	r3, [r4, #13]
   3e526:	065a      	lsls	r2, r3, #25
   3e528:	d503      	bpl.n	3e532 <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3e52a:	4621      	mov	r1, r4
   3e52c:	482d      	ldr	r0, [pc, #180]	; (3e5e4 <z_move_thread_to_end_of_prio_q+0xfc>)
   3e52e:	f7ff fdb7 	bl	3e0a0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e532:	4b2d      	ldr	r3, [pc, #180]	; (3e5e8 <z_move_thread_to_end_of_prio_q+0x100>)
   3e534:	429c      	cmp	r4, r3
   3e536:	d10b      	bne.n	3e550 <z_move_thread_to_end_of_prio_q+0x68>
   3e538:	492c      	ldr	r1, [pc, #176]	; (3e5ec <z_move_thread_to_end_of_prio_q+0x104>)
   3e53a:	4828      	ldr	r0, [pc, #160]	; (3e5dc <z_move_thread_to_end_of_prio_q+0xf4>)
   3e53c:	f240 237e 	movw	r3, #638	; 0x27e
   3e540:	4a2b      	ldr	r2, [pc, #172]	; (3e5f0 <z_move_thread_to_end_of_prio_q+0x108>)
   3e542:	f009 f9c2 	bl	478ca <printk>
   3e546:	f240 217e 	movw	r1, #638	; 0x27e
   3e54a:	4829      	ldr	r0, [pc, #164]	; (3e5f0 <z_move_thread_to_end_of_prio_q+0x108>)
   3e54c:	f009 f9ca 	bl	478e4 <assert_post_action>
	return list->head == list;
   3e550:	4a28      	ldr	r2, [pc, #160]	; (3e5f4 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e552:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3e556:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3e55a:	428b      	cmp	r3, r1
   3e55c:	d00b      	beq.n	3e576 <z_move_thread_to_end_of_prio_q+0x8e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e55e:	b153      	cbz	r3, 3e576 <z_move_thread_to_end_of_prio_q+0x8e>
	if (t1->base.prio < t2->base.prio) {
   3e560:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3e564:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3e568:	42b7      	cmp	r7, r6
   3e56a:	dc0a      	bgt.n	3e582 <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   3e56c:	4283      	cmp	r3, r0
   3e56e:	d002      	beq.n	3e576 <z_move_thread_to_end_of_prio_q+0x8e>
   3e570:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e572:	2b00      	cmp	r3, #0
   3e574:	d1f6      	bne.n	3e564 <z_move_thread_to_end_of_prio_q+0x7c>
	node->prev = list->tail;
   3e576:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3e57a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3e57c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3e57e:	62d4      	str	r4, [r2, #44]	; 0x2c
   3e580:	e005      	b.n	3e58e <z_move_thread_to_end_of_prio_q+0xa6>
	node->prev = successor->prev;
   3e582:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3e584:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3e588:	6859      	ldr	r1, [r3, #4]
   3e58a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3e58c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3e58e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   3e590:	6890      	ldr	r0, [r2, #8]
   3e592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3e596:	7363      	strb	r3, [r4, #13]
   3e598:	1b03      	subs	r3, r0, r4
   3e59a:	4258      	negs	r0, r3
   3e59c:	4158      	adcs	r0, r3
   3e59e:	f7ff fe03 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e5a2:	480b      	ldr	r0, [pc, #44]	; (3e5d0 <z_move_thread_to_end_of_prio_q+0xe8>)
   3e5a4:	f000 fd70 	bl	3f088 <z_spin_unlock_valid>
   3e5a8:	b960      	cbnz	r0, 3e5c4 <z_move_thread_to_end_of_prio_q+0xdc>
   3e5aa:	4913      	ldr	r1, [pc, #76]	; (3e5f8 <z_move_thread_to_end_of_prio_q+0x110>)
   3e5ac:	2372      	movs	r3, #114	; 0x72
   3e5ae:	4a0a      	ldr	r2, [pc, #40]	; (3e5d8 <z_move_thread_to_end_of_prio_q+0xf0>)
   3e5b0:	480a      	ldr	r0, [pc, #40]	; (3e5dc <z_move_thread_to_end_of_prio_q+0xf4>)
   3e5b2:	f009 f98a 	bl	478ca <printk>
   3e5b6:	4811      	ldr	r0, [pc, #68]	; (3e5fc <z_move_thread_to_end_of_prio_q+0x114>)
   3e5b8:	f009 f987 	bl	478ca <printk>
   3e5bc:	2172      	movs	r1, #114	; 0x72
   3e5be:	4806      	ldr	r0, [pc, #24]	; (3e5d8 <z_move_thread_to_end_of_prio_q+0xf0>)
   3e5c0:	f009 f990 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e5c4:	f385 8811 	msr	BASEPRI, r5
   3e5c8:	f3bf 8f6f 	isb	sy
}
   3e5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e5ce:	bf00      	nop
   3e5d0:	2002a5b0 	.word	0x2002a5b0
   3e5d4:	0004d875 	.word	0x0004d875
   3e5d8:	0004d84e 	.word	0x0004d84e
   3e5dc:	0004ccf0 	.word	0x0004ccf0
   3e5e0:	0004d88a 	.word	0x0004d88a
   3e5e4:	2002a5a0 	.word	0x2002a5a0
   3e5e8:	200263a8 	.word	0x200263a8
   3e5ec:	00052b02 	.word	0x00052b02
   3e5f0:	00052aa9 	.word	0x00052aa9
   3e5f4:	2002a578 	.word	0x2002a578
   3e5f8:	0004d89f 	.word	0x0004d89f
   3e5fc:	0004d8b6 	.word	0x0004d8b6

0003e600 <z_time_slice>:
	if (pending_current == _current) {
   3e600:	4a15      	ldr	r2, [pc, #84]	; (3e658 <z_time_slice+0x58>)
   3e602:	4916      	ldr	r1, [pc, #88]	; (3e65c <z_time_slice+0x5c>)
{
   3e604:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   3e606:	680c      	ldr	r4, [r1, #0]
   3e608:	6893      	ldr	r3, [r2, #8]
   3e60a:	42a3      	cmp	r3, r4
   3e60c:	4614      	mov	r4, r2
   3e60e:	d103      	bne.n	3e618 <z_time_slice+0x18>
}
   3e610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   3e614:	f7ff bbc6 	b.w	3dda4 <z_reset_time_slice>
	pending_current = NULL;
   3e618:	2500      	movs	r5, #0
   3e61a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   3e61c:	4910      	ldr	r1, [pc, #64]	; (3e660 <z_time_slice+0x60>)
   3e61e:	6809      	ldr	r1, [r1, #0]
   3e620:	b1b9      	cbz	r1, 3e652 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3e622:	89d9      	ldrh	r1, [r3, #14]
   3e624:	297f      	cmp	r1, #127	; 0x7f
   3e626:	d814      	bhi.n	3e652 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   3e628:	490e      	ldr	r1, [pc, #56]	; (3e664 <z_time_slice+0x64>)
   3e62a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3e62e:	6809      	ldr	r1, [r1, #0]
   3e630:	428d      	cmp	r5, r1
   3e632:	db0e      	blt.n	3e652 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   3e634:	490c      	ldr	r1, [pc, #48]	; (3e668 <z_time_slice+0x68>)
   3e636:	428b      	cmp	r3, r1
   3e638:	d00b      	beq.n	3e652 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3e63a:	6999      	ldr	r1, [r3, #24]
   3e63c:	b949      	cbnz	r1, 3e652 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   3e63e:	6911      	ldr	r1, [r2, #16]
   3e640:	4281      	cmp	r1, r0
   3e642:	dc03      	bgt.n	3e64c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   3e644:	4618      	mov	r0, r3
   3e646:	f7ff ff4f 	bl	3e4e8 <z_move_thread_to_end_of_prio_q>
   3e64a:	e7e1      	b.n	3e610 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   3e64c:	1a09      	subs	r1, r1, r0
   3e64e:	6111      	str	r1, [r2, #16]
}
   3e650:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   3e652:	2300      	movs	r3, #0
   3e654:	6123      	str	r3, [r4, #16]
   3e656:	e7fb      	b.n	3e650 <z_time_slice+0x50>
   3e658:	2002a578 	.word	0x2002a578
   3e65c:	2002a5ac 	.word	0x2002a5ac
   3e660:	2002a5b8 	.word	0x2002a5b8
   3e664:	2002a5b4 	.word	0x2002a5b4
   3e668:	200263a8 	.word	0x200263a8

0003e66c <z_remove_thread_from_ready_q>:
{
   3e66c:	b538      	push	{r3, r4, r5, lr}
   3e66e:	4604      	mov	r4, r0
	__asm__ volatile(
   3e670:	f04f 0320 	mov.w	r3, #32
   3e674:	f3ef 8511 	mrs	r5, BASEPRI
   3e678:	f383 8811 	msr	BASEPRI, r3
   3e67c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e680:	481d      	ldr	r0, [pc, #116]	; (3e6f8 <z_remove_thread_from_ready_q+0x8c>)
   3e682:	f000 fcf3 	bl	3f06c <z_spin_lock_valid>
   3e686:	b960      	cbnz	r0, 3e6a2 <z_remove_thread_from_ready_q+0x36>
   3e688:	491c      	ldr	r1, [pc, #112]	; (3e6fc <z_remove_thread_from_ready_q+0x90>)
   3e68a:	235f      	movs	r3, #95	; 0x5f
   3e68c:	4a1c      	ldr	r2, [pc, #112]	; (3e700 <z_remove_thread_from_ready_q+0x94>)
   3e68e:	481d      	ldr	r0, [pc, #116]	; (3e704 <z_remove_thread_from_ready_q+0x98>)
   3e690:	f009 f91b 	bl	478ca <printk>
   3e694:	481c      	ldr	r0, [pc, #112]	; (3e708 <z_remove_thread_from_ready_q+0x9c>)
   3e696:	f009 f918 	bl	478ca <printk>
   3e69a:	215f      	movs	r1, #95	; 0x5f
   3e69c:	4818      	ldr	r0, [pc, #96]	; (3e700 <z_remove_thread_from_ready_q+0x94>)
   3e69e:	f009 f921 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e6a2:	4815      	ldr	r0, [pc, #84]	; (3e6f8 <z_remove_thread_from_ready_q+0x8c>)
   3e6a4:	f000 fd00 	bl	3f0a8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3e6a8:	7b63      	ldrb	r3, [r4, #13]
   3e6aa:	065a      	lsls	r2, r3, #25
   3e6ac:	d507      	bpl.n	3e6be <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3e6ae:	4621      	mov	r1, r4
   3e6b0:	4816      	ldr	r0, [pc, #88]	; (3e70c <z_remove_thread_from_ready_q+0xa0>)
   3e6b2:	f7ff fcf5 	bl	3e0a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3e6b6:	7b63      	ldrb	r3, [r4, #13]
   3e6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   3e6bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3e6be:	4b14      	ldr	r3, [pc, #80]	; (3e710 <z_remove_thread_from_ready_q+0xa4>)
   3e6c0:	6898      	ldr	r0, [r3, #8]
   3e6c2:	1b03      	subs	r3, r0, r4
   3e6c4:	4258      	negs	r0, r3
   3e6c6:	4158      	adcs	r0, r3
   3e6c8:	f7ff fd6e 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e6cc:	480a      	ldr	r0, [pc, #40]	; (3e6f8 <z_remove_thread_from_ready_q+0x8c>)
   3e6ce:	f000 fcdb 	bl	3f088 <z_spin_unlock_valid>
   3e6d2:	b960      	cbnz	r0, 3e6ee <z_remove_thread_from_ready_q+0x82>
   3e6d4:	490f      	ldr	r1, [pc, #60]	; (3e714 <z_remove_thread_from_ready_q+0xa8>)
   3e6d6:	2372      	movs	r3, #114	; 0x72
   3e6d8:	4a09      	ldr	r2, [pc, #36]	; (3e700 <z_remove_thread_from_ready_q+0x94>)
   3e6da:	480a      	ldr	r0, [pc, #40]	; (3e704 <z_remove_thread_from_ready_q+0x98>)
   3e6dc:	f009 f8f5 	bl	478ca <printk>
   3e6e0:	480d      	ldr	r0, [pc, #52]	; (3e718 <z_remove_thread_from_ready_q+0xac>)
   3e6e2:	f009 f8f2 	bl	478ca <printk>
   3e6e6:	2172      	movs	r1, #114	; 0x72
   3e6e8:	4805      	ldr	r0, [pc, #20]	; (3e700 <z_remove_thread_from_ready_q+0x94>)
   3e6ea:	f009 f8fb 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e6ee:	f385 8811 	msr	BASEPRI, r5
   3e6f2:	f3bf 8f6f 	isb	sy
}
   3e6f6:	bd38      	pop	{r3, r4, r5, pc}
   3e6f8:	2002a5b0 	.word	0x2002a5b0
   3e6fc:	0004d875 	.word	0x0004d875
   3e700:	0004d84e 	.word	0x0004d84e
   3e704:	0004ccf0 	.word	0x0004ccf0
   3e708:	0004d88a 	.word	0x0004d88a
   3e70c:	2002a5a0 	.word	0x2002a5a0
   3e710:	2002a578 	.word	0x2002a578
   3e714:	0004d89f 	.word	0x0004d89f
   3e718:	0004d8b6 	.word	0x0004d8b6

0003e71c <pend>:
{
   3e71c:	b570      	push	{r4, r5, r6, lr}
   3e71e:	4604      	mov	r4, r0
   3e720:	460d      	mov	r5, r1
   3e722:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   3e724:	f7ff ffa2 	bl	3e66c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   3e728:	7b63      	ldrb	r3, [r4, #13]
   3e72a:	f043 0302 	orr.w	r3, r3, #2
   3e72e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3e730:	2d00      	cmp	r5, #0
   3e732:	d02c      	beq.n	3e78e <pend+0x72>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e734:	4b21      	ldr	r3, [pc, #132]	; (3e7bc <pend+0xa0>)
		thread->base.pended_on = wait_q;
   3e736:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e738:	429c      	cmp	r4, r3
   3e73a:	d10b      	bne.n	3e754 <pend+0x38>
   3e73c:	4920      	ldr	r1, [pc, #128]	; (3e7c0 <pend+0xa4>)
   3e73e:	4821      	ldr	r0, [pc, #132]	; (3e7c4 <pend+0xa8>)
   3e740:	f240 237e 	movw	r3, #638	; 0x27e
   3e744:	4a20      	ldr	r2, [pc, #128]	; (3e7c8 <pend+0xac>)
   3e746:	f009 f8c0 	bl	478ca <printk>
   3e74a:	f240 217e 	movw	r1, #638	; 0x27e
   3e74e:	481e      	ldr	r0, [pc, #120]	; (3e7c8 <pend+0xac>)
   3e750:	f009 f8c8 	bl	478e4 <assert_post_action>
	return list->head == list;
   3e754:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e756:	429d      	cmp	r5, r3
   3e758:	d00c      	beq.n	3e774 <pend+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e75a:	b15b      	cbz	r3, 3e774 <pend+0x58>
	if (t1->base.prio < t2->base.prio) {
   3e75c:	f994 200e 	ldrsb.w	r2, [r4, #14]
   3e760:	f993 100e 	ldrsb.w	r1, [r3, #14]
   3e764:	4291      	cmp	r1, r2
   3e766:	dc0c      	bgt.n	3e782 <pend+0x66>
	return (node == list->tail) ? NULL : node->next;
   3e768:	6869      	ldr	r1, [r5, #4]
   3e76a:	428b      	cmp	r3, r1
   3e76c:	d002      	beq.n	3e774 <pend+0x58>
   3e76e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e770:	2b00      	cmp	r3, #0
   3e772:	d1f5      	bne.n	3e760 <pend+0x44>
	node->prev = list->tail;
   3e774:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3e776:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3e778:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3e77a:	686b      	ldr	r3, [r5, #4]
   3e77c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3e77e:	606c      	str	r4, [r5, #4]
   3e780:	e005      	b.n	3e78e <pend+0x72>
	node->prev = successor->prev;
   3e782:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3e784:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3e788:	685a      	ldr	r2, [r3, #4]
   3e78a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3e78c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   3e78e:	1c73      	adds	r3, r6, #1
   3e790:	d013      	beq.n	3e7ba <pend+0x9e>
   3e792:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3e796:	f240 30e7 	movw	r0, #999	; 0x3e7
   3e79a:	2100      	movs	r1, #0
   3e79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e7a0:	fbc5 0106 	smlal	r0, r1, r5, r6
   3e7a4:	2300      	movs	r3, #0
   3e7a6:	f7da fab9 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3e7aa:	4908      	ldr	r1, [pc, #32]	; (3e7cc <pend+0xb0>)
   3e7ac:	1c42      	adds	r2, r0, #1
   3e7ae:	f104 0018 	add.w	r0, r4, #24
}
   3e7b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3e7b6:	f000 bfcb 	b.w	3f750 <z_add_timeout>
   3e7ba:	bd70      	pop	{r4, r5, r6, pc}
   3e7bc:	200263a8 	.word	0x200263a8
   3e7c0:	00052b02 	.word	0x00052b02
   3e7c4:	0004ccf0 	.word	0x0004ccf0
   3e7c8:	00052aa9 	.word	0x00052aa9
   3e7cc:	0003e419 	.word	0x0003e419

0003e7d0 <z_pend_curr_irqlock>:
{
   3e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e7d2:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   3e7d4:	4d21      	ldr	r5, [pc, #132]	; (3e85c <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   3e7d6:	4c22      	ldr	r4, [pc, #136]	; (3e860 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   3e7d8:	68a8      	ldr	r0, [r5, #8]
   3e7da:	f7ff ff9f 	bl	3e71c <pend>
	pending_current = _current;
   3e7de:	68ab      	ldr	r3, [r5, #8]
   3e7e0:	4630      	mov	r0, r6
   3e7e2:	6023      	str	r3, [r4, #0]
   3e7e4:	f7e2 ff68 	bl	216b8 <z_arch_swap>
   3e7e8:	4606      	mov	r6, r0
	__asm__ volatile(
   3e7ea:	f04f 0320 	mov.w	r3, #32
   3e7ee:	f3ef 8711 	mrs	r7, BASEPRI
   3e7f2:	f383 8811 	msr	BASEPRI, r3
   3e7f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e7fa:	481a      	ldr	r0, [pc, #104]	; (3e864 <z_pend_curr_irqlock+0x94>)
   3e7fc:	f000 fc36 	bl	3f06c <z_spin_lock_valid>
   3e800:	b960      	cbnz	r0, 3e81c <z_pend_curr_irqlock+0x4c>
   3e802:	4919      	ldr	r1, [pc, #100]	; (3e868 <z_pend_curr_irqlock+0x98>)
   3e804:	235f      	movs	r3, #95	; 0x5f
   3e806:	4a19      	ldr	r2, [pc, #100]	; (3e86c <z_pend_curr_irqlock+0x9c>)
   3e808:	4819      	ldr	r0, [pc, #100]	; (3e870 <z_pend_curr_irqlock+0xa0>)
   3e80a:	f009 f85e 	bl	478ca <printk>
   3e80e:	4819      	ldr	r0, [pc, #100]	; (3e874 <z_pend_curr_irqlock+0xa4>)
   3e810:	f009 f85b 	bl	478ca <printk>
   3e814:	215f      	movs	r1, #95	; 0x5f
   3e816:	4815      	ldr	r0, [pc, #84]	; (3e86c <z_pend_curr_irqlock+0x9c>)
   3e818:	f009 f864 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e81c:	4811      	ldr	r0, [pc, #68]	; (3e864 <z_pend_curr_irqlock+0x94>)
   3e81e:	f000 fc43 	bl	3f0a8 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   3e822:	6823      	ldr	r3, [r4, #0]
   3e824:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e826:	480f      	ldr	r0, [pc, #60]	; (3e864 <z_pend_curr_irqlock+0x94>)
   3e828:	429a      	cmp	r2, r3
			pending_current = NULL;
   3e82a:	bf04      	itt	eq
   3e82c:	2300      	moveq	r3, #0
   3e82e:	6023      	streq	r3, [r4, #0]
   3e830:	f000 fc2a 	bl	3f088 <z_spin_unlock_valid>
   3e834:	b960      	cbnz	r0, 3e850 <z_pend_curr_irqlock+0x80>
   3e836:	4910      	ldr	r1, [pc, #64]	; (3e878 <z_pend_curr_irqlock+0xa8>)
   3e838:	2372      	movs	r3, #114	; 0x72
   3e83a:	4a0c      	ldr	r2, [pc, #48]	; (3e86c <z_pend_curr_irqlock+0x9c>)
   3e83c:	480c      	ldr	r0, [pc, #48]	; (3e870 <z_pend_curr_irqlock+0xa0>)
   3e83e:	f009 f844 	bl	478ca <printk>
   3e842:	480e      	ldr	r0, [pc, #56]	; (3e87c <z_pend_curr_irqlock+0xac>)
   3e844:	f009 f841 	bl	478ca <printk>
   3e848:	2172      	movs	r1, #114	; 0x72
   3e84a:	4808      	ldr	r0, [pc, #32]	; (3e86c <z_pend_curr_irqlock+0x9c>)
   3e84c:	f009 f84a 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e850:	f387 8811 	msr	BASEPRI, r7
   3e854:	f3bf 8f6f 	isb	sy
}
   3e858:	4630      	mov	r0, r6
   3e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e85c:	2002a578 	.word	0x2002a578
   3e860:	2002a5ac 	.word	0x2002a5ac
   3e864:	2002a5b0 	.word	0x2002a5b0
   3e868:	0004d875 	.word	0x0004d875
   3e86c:	0004d84e 	.word	0x0004d84e
   3e870:	0004ccf0 	.word	0x0004ccf0
   3e874:	0004d88a 	.word	0x0004d88a
   3e878:	0004d89f 	.word	0x0004d89f
   3e87c:	0004d8b6 	.word	0x0004d8b6

0003e880 <z_pend_curr>:
{
   3e880:	b538      	push	{r3, r4, r5, lr}
   3e882:	4605      	mov	r5, r0
   3e884:	460c      	mov	r4, r1
   3e886:	4611      	mov	r1, r2
	pending_current = _current;
   3e888:	4a0e      	ldr	r2, [pc, #56]	; (3e8c4 <z_pend_curr+0x44>)
   3e88a:	6890      	ldr	r0, [r2, #8]
   3e88c:	4a0e      	ldr	r2, [pc, #56]	; (3e8c8 <z_pend_curr+0x48>)
   3e88e:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   3e890:	461a      	mov	r2, r3
   3e892:	f7ff ff43 	bl	3e71c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e896:	4628      	mov	r0, r5
   3e898:	f000 fbf6 	bl	3f088 <z_spin_unlock_valid>
   3e89c:	b960      	cbnz	r0, 3e8b8 <z_pend_curr+0x38>
   3e89e:	490b      	ldr	r1, [pc, #44]	; (3e8cc <z_pend_curr+0x4c>)
   3e8a0:	2389      	movs	r3, #137	; 0x89
   3e8a2:	4a0b      	ldr	r2, [pc, #44]	; (3e8d0 <z_pend_curr+0x50>)
   3e8a4:	480b      	ldr	r0, [pc, #44]	; (3e8d4 <z_pend_curr+0x54>)
   3e8a6:	f009 f810 	bl	478ca <printk>
   3e8aa:	480b      	ldr	r0, [pc, #44]	; (3e8d8 <z_pend_curr+0x58>)
   3e8ac:	f009 f80d 	bl	478ca <printk>
   3e8b0:	2189      	movs	r1, #137	; 0x89
   3e8b2:	4807      	ldr	r0, [pc, #28]	; (3e8d0 <z_pend_curr+0x50>)
   3e8b4:	f009 f816 	bl	478e4 <assert_post_action>
   3e8b8:	4620      	mov	r0, r4
}
   3e8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e8be:	f7e2 befb 	b.w	216b8 <z_arch_swap>
   3e8c2:	bf00      	nop
   3e8c4:	2002a578 	.word	0x2002a578
   3e8c8:	2002a5ac 	.word	0x2002a5ac
   3e8cc:	0004d89f 	.word	0x0004d89f
   3e8d0:	0004d84e 	.word	0x0004d84e
   3e8d4:	0004ccf0 	.word	0x0004ccf0
   3e8d8:	0004d8b6 	.word	0x0004d8b6

0003e8dc <z_set_prio>:
{
   3e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e8de:	4604      	mov	r4, r0
   3e8e0:	460d      	mov	r5, r1
	__asm__ volatile(
   3e8e2:	f04f 0320 	mov.w	r3, #32
   3e8e6:	f3ef 8611 	mrs	r6, BASEPRI
   3e8ea:	f383 8811 	msr	BASEPRI, r3
   3e8ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e8f2:	4835      	ldr	r0, [pc, #212]	; (3e9c8 <z_set_prio+0xec>)
   3e8f4:	f000 fbba 	bl	3f06c <z_spin_lock_valid>
   3e8f8:	b960      	cbnz	r0, 3e914 <z_set_prio+0x38>
   3e8fa:	4934      	ldr	r1, [pc, #208]	; (3e9cc <z_set_prio+0xf0>)
   3e8fc:	235f      	movs	r3, #95	; 0x5f
   3e8fe:	4a34      	ldr	r2, [pc, #208]	; (3e9d0 <z_set_prio+0xf4>)
   3e900:	4834      	ldr	r0, [pc, #208]	; (3e9d4 <z_set_prio+0xf8>)
   3e902:	f008 ffe2 	bl	478ca <printk>
   3e906:	4834      	ldr	r0, [pc, #208]	; (3e9d8 <z_set_prio+0xfc>)
   3e908:	f008 ffdf 	bl	478ca <printk>
   3e90c:	215f      	movs	r1, #95	; 0x5f
   3e90e:	4830      	ldr	r0, [pc, #192]	; (3e9d0 <z_set_prio+0xf4>)
   3e910:	f008 ffe8 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e914:	482c      	ldr	r0, [pc, #176]	; (3e9c8 <z_set_prio+0xec>)
   3e916:	f000 fbc7 	bl	3f0a8 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   3e91a:	4620      	mov	r0, r4
   3e91c:	f00b fb9b 	bl	4a056 <z_is_thread_ready>
   3e920:	b26d      	sxtb	r5, r5
		if (need_sched) {
   3e922:	4607      	mov	r7, r0
   3e924:	2800      	cmp	r0, #0
   3e926:	d04c      	beq.n	3e9c2 <z_set_prio+0xe6>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3e928:	4621      	mov	r1, r4
   3e92a:	482c      	ldr	r0, [pc, #176]	; (3e9dc <z_set_prio+0x100>)
   3e92c:	f7ff fbb8 	bl	3e0a0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e930:	4b2b      	ldr	r3, [pc, #172]	; (3e9e0 <z_set_prio+0x104>)
				thread->base.prio = prio;
   3e932:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3e934:	429c      	cmp	r4, r3
   3e936:	d10b      	bne.n	3e950 <z_set_prio+0x74>
   3e938:	492a      	ldr	r1, [pc, #168]	; (3e9e4 <z_set_prio+0x108>)
   3e93a:	4826      	ldr	r0, [pc, #152]	; (3e9d4 <z_set_prio+0xf8>)
   3e93c:	f240 237e 	movw	r3, #638	; 0x27e
   3e940:	4a29      	ldr	r2, [pc, #164]	; (3e9e8 <z_set_prio+0x10c>)
   3e942:	f008 ffc2 	bl	478ca <printk>
   3e946:	f240 217e 	movw	r1, #638	; 0x27e
   3e94a:	4827      	ldr	r0, [pc, #156]	; (3e9e8 <z_set_prio+0x10c>)
   3e94c:	f008 ffca 	bl	478e4 <assert_post_action>
	return list->head == list;
   3e950:	4a26      	ldr	r2, [pc, #152]	; (3e9ec <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e952:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3e956:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3e95a:	428b      	cmp	r3, r1
   3e95c:	d00b      	beq.n	3e976 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e95e:	b153      	cbz	r3, 3e976 <z_set_prio+0x9a>
	if (t1->base.prio < t2->base.prio) {
   3e960:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3e964:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   3e968:	45ac      	cmp	ip, r5
   3e96a:	dc0a      	bgt.n	3e982 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   3e96c:	4298      	cmp	r0, r3
   3e96e:	d002      	beq.n	3e976 <z_set_prio+0x9a>
   3e970:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e972:	2b00      	cmp	r3, #0
   3e974:	d1f6      	bne.n	3e964 <z_set_prio+0x88>
	node->prev = list->tail;
   3e976:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3e97a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3e97c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3e97e:	62d4      	str	r4, [r2, #44]	; 0x2c
   3e980:	e005      	b.n	3e98e <z_set_prio+0xb2>
	node->prev = successor->prev;
   3e982:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3e984:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3e988:	685a      	ldr	r2, [r3, #4]
   3e98a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3e98c:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3e98e:	2001      	movs	r0, #1
   3e990:	f7ff fc0a 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e994:	480c      	ldr	r0, [pc, #48]	; (3e9c8 <z_set_prio+0xec>)
   3e996:	f000 fb77 	bl	3f088 <z_spin_unlock_valid>
   3e99a:	b960      	cbnz	r0, 3e9b6 <z_set_prio+0xda>
   3e99c:	4914      	ldr	r1, [pc, #80]	; (3e9f0 <z_set_prio+0x114>)
   3e99e:	2372      	movs	r3, #114	; 0x72
   3e9a0:	4a0b      	ldr	r2, [pc, #44]	; (3e9d0 <z_set_prio+0xf4>)
   3e9a2:	480c      	ldr	r0, [pc, #48]	; (3e9d4 <z_set_prio+0xf8>)
   3e9a4:	f008 ff91 	bl	478ca <printk>
   3e9a8:	4812      	ldr	r0, [pc, #72]	; (3e9f4 <z_set_prio+0x118>)
   3e9aa:	f008 ff8e 	bl	478ca <printk>
   3e9ae:	2172      	movs	r1, #114	; 0x72
   3e9b0:	4807      	ldr	r0, [pc, #28]	; (3e9d0 <z_set_prio+0xf4>)
   3e9b2:	f008 ff97 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3e9b6:	f386 8811 	msr	BASEPRI, r6
   3e9ba:	f3bf 8f6f 	isb	sy
}
   3e9be:	4638      	mov	r0, r7
   3e9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			thread->base.prio = prio;
   3e9c2:	73a5      	strb	r5, [r4, #14]
   3e9c4:	e7e6      	b.n	3e994 <z_set_prio+0xb8>
   3e9c6:	bf00      	nop
   3e9c8:	2002a5b0 	.word	0x2002a5b0
   3e9cc:	0004d875 	.word	0x0004d875
   3e9d0:	0004d84e 	.word	0x0004d84e
   3e9d4:	0004ccf0 	.word	0x0004ccf0
   3e9d8:	0004d88a 	.word	0x0004d88a
   3e9dc:	2002a5a0 	.word	0x2002a5a0
   3e9e0:	200263a8 	.word	0x200263a8
   3e9e4:	00052b02 	.word	0x00052b02
   3e9e8:	00052aa9 	.word	0x00052aa9
   3e9ec:	2002a578 	.word	0x2002a578
   3e9f0:	0004d89f 	.word	0x0004d89f
   3e9f4:	0004d8b6 	.word	0x0004d8b6

0003e9f8 <z_unpend_first_thread>:
{
   3e9f8:	b538      	push	{r3, r4, r5, lr}
   3e9fa:	4604      	mov	r4, r0
	__asm__ volatile(
   3e9fc:	f04f 0320 	mov.w	r3, #32
   3ea00:	f3ef 8511 	mrs	r5, BASEPRI
   3ea04:	f383 8811 	msr	BASEPRI, r3
   3ea08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ea0c:	4839      	ldr	r0, [pc, #228]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3ea0e:	f000 fb2d 	bl	3f06c <z_spin_lock_valid>
   3ea12:	b960      	cbnz	r0, 3ea2e <z_unpend_first_thread+0x36>
   3ea14:	4938      	ldr	r1, [pc, #224]	; (3eaf8 <z_unpend_first_thread+0x100>)
   3ea16:	235f      	movs	r3, #95	; 0x5f
   3ea18:	4a38      	ldr	r2, [pc, #224]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea1a:	4839      	ldr	r0, [pc, #228]	; (3eb00 <z_unpend_first_thread+0x108>)
   3ea1c:	f008 ff55 	bl	478ca <printk>
   3ea20:	4838      	ldr	r0, [pc, #224]	; (3eb04 <z_unpend_first_thread+0x10c>)
   3ea22:	f008 ff52 	bl	478ca <printk>
   3ea26:	215f      	movs	r1, #95	; 0x5f
   3ea28:	4834      	ldr	r0, [pc, #208]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea2a:	f008 ff5b 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ea2e:	4831      	ldr	r0, [pc, #196]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3ea30:	f000 fb3a 	bl	3f0a8 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3ea34:	4620      	mov	r0, r4
   3ea36:	f00b fb3a 	bl	4a0ae <z_priq_dumb_best>
   3ea3a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ea3c:	482d      	ldr	r0, [pc, #180]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3ea3e:	f000 fb23 	bl	3f088 <z_spin_unlock_valid>
   3ea42:	b960      	cbnz	r0, 3ea5e <z_unpend_first_thread+0x66>
   3ea44:	4930      	ldr	r1, [pc, #192]	; (3eb08 <z_unpend_first_thread+0x110>)
   3ea46:	2372      	movs	r3, #114	; 0x72
   3ea48:	4a2c      	ldr	r2, [pc, #176]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea4a:	482d      	ldr	r0, [pc, #180]	; (3eb00 <z_unpend_first_thread+0x108>)
   3ea4c:	f008 ff3d 	bl	478ca <printk>
   3ea50:	482e      	ldr	r0, [pc, #184]	; (3eb0c <z_unpend_first_thread+0x114>)
   3ea52:	f008 ff3a 	bl	478ca <printk>
   3ea56:	2172      	movs	r1, #114	; 0x72
   3ea58:	4828      	ldr	r0, [pc, #160]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea5a:	f008 ff43 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3ea5e:	f385 8811 	msr	BASEPRI, r5
   3ea62:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3ea66:	2c00      	cmp	r4, #0
   3ea68:	d041      	beq.n	3eaee <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   3ea6a:	f04f 0320 	mov.w	r3, #32
   3ea6e:	f3ef 8511 	mrs	r5, BASEPRI
   3ea72:	f383 8811 	msr	BASEPRI, r3
   3ea76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ea7a:	481e      	ldr	r0, [pc, #120]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3ea7c:	f000 faf6 	bl	3f06c <z_spin_lock_valid>
   3ea80:	b960      	cbnz	r0, 3ea9c <z_unpend_first_thread+0xa4>
   3ea82:	491d      	ldr	r1, [pc, #116]	; (3eaf8 <z_unpend_first_thread+0x100>)
   3ea84:	235f      	movs	r3, #95	; 0x5f
   3ea86:	4a1d      	ldr	r2, [pc, #116]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea88:	481d      	ldr	r0, [pc, #116]	; (3eb00 <z_unpend_first_thread+0x108>)
   3ea8a:	f008 ff1e 	bl	478ca <printk>
   3ea8e:	481d      	ldr	r0, [pc, #116]	; (3eb04 <z_unpend_first_thread+0x10c>)
   3ea90:	f008 ff1b 	bl	478ca <printk>
   3ea94:	215f      	movs	r1, #95	; 0x5f
   3ea96:	4819      	ldr	r0, [pc, #100]	; (3eafc <z_unpend_first_thread+0x104>)
   3ea98:	f008 ff24 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ea9c:	4815      	ldr	r0, [pc, #84]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3ea9e:	f000 fb03 	bl	3f0a8 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3eaa2:	f104 0008 	add.w	r0, r4, #8
   3eaa6:	f7ff f965 	bl	3dd74 <pended_on.isra.16>
   3eaaa:	4621      	mov	r1, r4
   3eaac:	f7ff faf8 	bl	3e0a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3eab0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3eab2:	4810      	ldr	r0, [pc, #64]	; (3eaf4 <z_unpend_first_thread+0xfc>)
   3eab4:	f023 0302 	bic.w	r3, r3, #2
   3eab8:	7363      	strb	r3, [r4, #13]
   3eaba:	f000 fae5 	bl	3f088 <z_spin_unlock_valid>
   3eabe:	b960      	cbnz	r0, 3eada <z_unpend_first_thread+0xe2>
   3eac0:	4911      	ldr	r1, [pc, #68]	; (3eb08 <z_unpend_first_thread+0x110>)
   3eac2:	2372      	movs	r3, #114	; 0x72
   3eac4:	4a0d      	ldr	r2, [pc, #52]	; (3eafc <z_unpend_first_thread+0x104>)
   3eac6:	480e      	ldr	r0, [pc, #56]	; (3eb00 <z_unpend_first_thread+0x108>)
   3eac8:	f008 feff 	bl	478ca <printk>
   3eacc:	480f      	ldr	r0, [pc, #60]	; (3eb0c <z_unpend_first_thread+0x114>)
   3eace:	f008 fefc 	bl	478ca <printk>
   3ead2:	2172      	movs	r1, #114	; 0x72
   3ead4:	4809      	ldr	r0, [pc, #36]	; (3eafc <z_unpend_first_thread+0x104>)
   3ead6:	f008 ff05 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3eada:	f385 8811 	msr	BASEPRI, r5
   3eade:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3eae2:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   3eae4:	f104 0018 	add.w	r0, r4, #24
   3eae8:	60a3      	str	r3, [r4, #8]
   3eaea:	f000 fed7 	bl	3f89c <z_abort_timeout>
}
   3eaee:	4620      	mov	r0, r4
   3eaf0:	bd38      	pop	{r3, r4, r5, pc}
   3eaf2:	bf00      	nop
   3eaf4:	2002a5b0 	.word	0x2002a5b0
   3eaf8:	0004d875 	.word	0x0004d875
   3eafc:	0004d84e 	.word	0x0004d84e
   3eb00:	0004ccf0 	.word	0x0004ccf0
   3eb04:	0004d88a 	.word	0x0004d88a
   3eb08:	0004d89f 	.word	0x0004d89f
   3eb0c:	0004d8b6 	.word	0x0004d8b6

0003eb10 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3eb10:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3eb12:	4b04      	ldr	r3, [pc, #16]	; (3eb24 <z_sched_init+0x14>)
   3eb14:	4608      	mov	r0, r1
   3eb16:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3eb1a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3eb1e:	f7ff b957 	b.w	3ddd0 <k_sched_time_slice_set>
   3eb22:	bf00      	nop
   3eb24:	2002a578 	.word	0x2002a578

0003eb28 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3eb2a:	f3ef 8305 	mrs	r3, IPSR
   3eb2e:	2b0d      	cmp	r3, #13
   3eb30:	d804      	bhi.n	3eb3c <z_impl_k_yield+0x14>
   3eb32:	b193      	cbz	r3, 3eb5a <z_impl_k_yield+0x32>
   3eb34:	4b46      	ldr	r3, [pc, #280]	; (3ec50 <z_impl_k_yield+0x128>)
   3eb36:	685b      	ldr	r3, [r3, #4]
   3eb38:	051b      	lsls	r3, r3, #20
   3eb3a:	d40e      	bmi.n	3eb5a <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   3eb3c:	4945      	ldr	r1, [pc, #276]	; (3ec54 <z_impl_k_yield+0x12c>)
   3eb3e:	f44f 7362 	mov.w	r3, #904	; 0x388
   3eb42:	4a45      	ldr	r2, [pc, #276]	; (3ec58 <z_impl_k_yield+0x130>)
   3eb44:	4845      	ldr	r0, [pc, #276]	; (3ec5c <z_impl_k_yield+0x134>)
   3eb46:	f008 fec0 	bl	478ca <printk>
   3eb4a:	4845      	ldr	r0, [pc, #276]	; (3ec60 <z_impl_k_yield+0x138>)
   3eb4c:	f008 febd 	bl	478ca <printk>
   3eb50:	f44f 7162 	mov.w	r1, #904	; 0x388
   3eb54:	4840      	ldr	r0, [pc, #256]	; (3ec58 <z_impl_k_yield+0x130>)
   3eb56:	f008 fec5 	bl	478e4 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3eb5a:	4c42      	ldr	r4, [pc, #264]	; (3ec64 <z_impl_k_yield+0x13c>)
   3eb5c:	4e42      	ldr	r6, [pc, #264]	; (3ec68 <z_impl_k_yield+0x140>)
   3eb5e:	68a2      	ldr	r2, [r4, #8]
   3eb60:	42b2      	cmp	r2, r6
   3eb62:	d068      	beq.n	3ec36 <z_impl_k_yield+0x10e>
	__asm__ volatile(
   3eb64:	f04f 0320 	mov.w	r3, #32
   3eb68:	f3ef 8711 	mrs	r7, BASEPRI
   3eb6c:	f383 8811 	msr	BASEPRI, r3
   3eb70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3eb74:	483d      	ldr	r0, [pc, #244]	; (3ec6c <z_impl_k_yield+0x144>)
   3eb76:	f000 fa79 	bl	3f06c <z_spin_lock_valid>
   3eb7a:	b960      	cbnz	r0, 3eb96 <z_impl_k_yield+0x6e>
   3eb7c:	493c      	ldr	r1, [pc, #240]	; (3ec70 <z_impl_k_yield+0x148>)
   3eb7e:	235f      	movs	r3, #95	; 0x5f
   3eb80:	4a3c      	ldr	r2, [pc, #240]	; (3ec74 <z_impl_k_yield+0x14c>)
   3eb82:	4836      	ldr	r0, [pc, #216]	; (3ec5c <z_impl_k_yield+0x134>)
   3eb84:	f008 fea1 	bl	478ca <printk>
   3eb88:	483b      	ldr	r0, [pc, #236]	; (3ec78 <z_impl_k_yield+0x150>)
   3eb8a:	f008 fe9e 	bl	478ca <printk>
   3eb8e:	215f      	movs	r1, #95	; 0x5f
   3eb90:	4838      	ldr	r0, [pc, #224]	; (3ec74 <z_impl_k_yield+0x14c>)
   3eb92:	f008 fea7 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eb96:	4835      	ldr	r0, [pc, #212]	; (3ec6c <z_impl_k_yield+0x144>)
   3eb98:	f000 fa86 	bl	3f0a8 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3eb9c:	68a1      	ldr	r1, [r4, #8]
   3eb9e:	4837      	ldr	r0, [pc, #220]	; (3ec7c <z_impl_k_yield+0x154>)
   3eba0:	f7ff fa7e 	bl	3e0a0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3eba4:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3eba6:	42b5      	cmp	r5, r6
   3eba8:	d10b      	bne.n	3ebc2 <z_impl_k_yield+0x9a>
   3ebaa:	4935      	ldr	r1, [pc, #212]	; (3ec80 <z_impl_k_yield+0x158>)
   3ebac:	482b      	ldr	r0, [pc, #172]	; (3ec5c <z_impl_k_yield+0x134>)
   3ebae:	f240 237e 	movw	r3, #638	; 0x27e
   3ebb2:	4a29      	ldr	r2, [pc, #164]	; (3ec58 <z_impl_k_yield+0x130>)
   3ebb4:	f008 fe89 	bl	478ca <printk>
   3ebb8:	f240 217e 	movw	r1, #638	; 0x27e
   3ebbc:	4826      	ldr	r0, [pc, #152]	; (3ec58 <z_impl_k_yield+0x130>)
   3ebbe:	f008 fe91 	bl	478e4 <assert_post_action>
   3ebc2:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ebc6:	4a2d      	ldr	r2, [pc, #180]	; (3ec7c <z_impl_k_yield+0x154>)
   3ebc8:	4293      	cmp	r3, r2
   3ebca:	d00b      	beq.n	3ebe4 <z_impl_k_yield+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3ebcc:	b153      	cbz	r3, 3ebe4 <z_impl_k_yield+0xbc>
	if (t1->base.prio < t2->base.prio) {
   3ebce:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3ebd2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3ebd6:	4286      	cmp	r6, r0
   3ebd8:	dc0a      	bgt.n	3ebf0 <z_impl_k_yield+0xc8>
	return (node == list->tail) ? NULL : node->next;
   3ebda:	428b      	cmp	r3, r1
   3ebdc:	d002      	beq.n	3ebe4 <z_impl_k_yield+0xbc>
   3ebde:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3ebe0:	2b00      	cmp	r3, #0
   3ebe2:	d1f6      	bne.n	3ebd2 <z_impl_k_yield+0xaa>
	node->prev = list->tail;
   3ebe4:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3ebe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3ebea:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3ebec:	62e5      	str	r5, [r4, #44]	; 0x2c
   3ebee:	e005      	b.n	3ebfc <z_impl_k_yield+0xd4>
	node->prev = successor->prev;
   3ebf0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3ebf2:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3ebf6:	685a      	ldr	r2, [r3, #4]
   3ebf8:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3ebfa:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3ebfc:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3ebfe:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3ec00:	7b53      	ldrb	r3, [r2, #13]
   3ec02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3ec06:	7353      	strb	r3, [r2, #13]
   3ec08:	f7ff face 	bl	3e1a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ec0c:	4817      	ldr	r0, [pc, #92]	; (3ec6c <z_impl_k_yield+0x144>)
   3ec0e:	f000 fa3b 	bl	3f088 <z_spin_unlock_valid>
   3ec12:	b960      	cbnz	r0, 3ec2e <z_impl_k_yield+0x106>
   3ec14:	491b      	ldr	r1, [pc, #108]	; (3ec84 <z_impl_k_yield+0x15c>)
   3ec16:	2372      	movs	r3, #114	; 0x72
   3ec18:	4a16      	ldr	r2, [pc, #88]	; (3ec74 <z_impl_k_yield+0x14c>)
   3ec1a:	4810      	ldr	r0, [pc, #64]	; (3ec5c <z_impl_k_yield+0x134>)
   3ec1c:	f008 fe55 	bl	478ca <printk>
   3ec20:	4819      	ldr	r0, [pc, #100]	; (3ec88 <z_impl_k_yield+0x160>)
   3ec22:	f008 fe52 	bl	478ca <printk>
   3ec26:	2172      	movs	r1, #114	; 0x72
   3ec28:	4812      	ldr	r0, [pc, #72]	; (3ec74 <z_impl_k_yield+0x14c>)
   3ec2a:	f008 fe5b 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3ec2e:	f387 8811 	msr	BASEPRI, r7
   3ec32:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3ec36:	f04f 0320 	mov.w	r3, #32
   3ec3a:	f3ef 8011 	mrs	r0, BASEPRI
   3ec3e:	f383 8811 	msr	BASEPRI, r3
   3ec42:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3ec46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3ec4a:	f7e2 bd35 	b.w	216b8 <z_arch_swap>
   3ec4e:	bf00      	nop
   3ec50:	e000ed00 	.word	0xe000ed00
   3ec54:	00052a45 	.word	0x00052a45
   3ec58:	00052aa9 	.word	0x00052aa9
   3ec5c:	0004ccf0 	.word	0x0004ccf0
   3ec60:	0005294a 	.word	0x0005294a
   3ec64:	2002a578 	.word	0x2002a578
   3ec68:	200263a8 	.word	0x200263a8
   3ec6c:	2002a5b0 	.word	0x2002a5b0
   3ec70:	0004d875 	.word	0x0004d875
   3ec74:	0004d84e 	.word	0x0004d84e
   3ec78:	0004d88a 	.word	0x0004d88a
   3ec7c:	2002a5a0 	.word	0x2002a5a0
   3ec80:	00052b02 	.word	0x00052b02
   3ec84:	0004d89f 	.word	0x0004d89f
   3ec88:	0004d8b6 	.word	0x0004d8b6

0003ec8c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3ec8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3ec90:	4604      	mov	r4, r0
   3ec92:	f3ef 8305 	mrs	r3, IPSR
   3ec96:	2b0d      	cmp	r3, #13
   3ec98:	d804      	bhi.n	3eca4 <z_tick_sleep+0x18>
   3ec9a:	b193      	cbz	r3, 3ecc2 <z_tick_sleep+0x36>
   3ec9c:	4b3e      	ldr	r3, [pc, #248]	; (3ed98 <z_tick_sleep+0x10c>)
   3ec9e:	685b      	ldr	r3, [r3, #4]
   3eca0:	051a      	lsls	r2, r3, #20
   3eca2:	d40e      	bmi.n	3ecc2 <z_tick_sleep+0x36>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_arch_is_in_isr(), "");
   3eca4:	493d      	ldr	r1, [pc, #244]	; (3ed9c <z_tick_sleep+0x110>)
   3eca6:	f240 33a6 	movw	r3, #934	; 0x3a6
   3ecaa:	4a3d      	ldr	r2, [pc, #244]	; (3eda0 <z_tick_sleep+0x114>)
   3ecac:	483d      	ldr	r0, [pc, #244]	; (3eda4 <z_tick_sleep+0x118>)
   3ecae:	f008 fe0c 	bl	478ca <printk>
   3ecb2:	483d      	ldr	r0, [pc, #244]	; (3eda8 <z_tick_sleep+0x11c>)
   3ecb4:	f008 fe09 	bl	478ca <printk>
   3ecb8:	f240 31a6 	movw	r1, #934	; 0x3a6
   3ecbc:	4838      	ldr	r0, [pc, #224]	; (3eda0 <z_tick_sleep+0x114>)
   3ecbe:	f008 fe11 	bl	478e4 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3ecc2:	b92c      	cbnz	r4, 3ecd0 <z_tick_sleep+0x44>
	z_impl_k_yield();
   3ecc4:	f7ff ff30 	bl	3eb28 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3ecc8:	4620      	mov	r0, r4
   3ecca:	b002      	add	sp, #8
   3eccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3ecd0:	f00b fa96 	bl	4a200 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3ecd4:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3ecd6:	f104 0801 	add.w	r8, r4, #1
	struct k_spinlock local_lock = {};
   3ecda:	ae02      	add	r6, sp, #8
	expected_wakeup_time = ticks + z_tick_get_32();
   3ecdc:	eb08 0400 	add.w	r4, r8, r0
	struct k_spinlock local_lock = {};
   3ece0:	f846 3d04 	str.w	r3, [r6, #-4]!
   3ece4:	f04f 0320 	mov.w	r3, #32
   3ece8:	f3ef 8711 	mrs	r7, BASEPRI
   3ecec:	f383 8811 	msr	BASEPRI, r3
   3ecf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ecf4:	4630      	mov	r0, r6
   3ecf6:	f000 f9b9 	bl	3f06c <z_spin_lock_valid>
   3ecfa:	b960      	cbnz	r0, 3ed16 <z_tick_sleep+0x8a>
   3ecfc:	492b      	ldr	r1, [pc, #172]	; (3edac <z_tick_sleep+0x120>)
   3ecfe:	235f      	movs	r3, #95	; 0x5f
   3ed00:	4a2b      	ldr	r2, [pc, #172]	; (3edb0 <z_tick_sleep+0x124>)
   3ed02:	4828      	ldr	r0, [pc, #160]	; (3eda4 <z_tick_sleep+0x118>)
   3ed04:	f008 fde1 	bl	478ca <printk>
   3ed08:	482a      	ldr	r0, [pc, #168]	; (3edb4 <z_tick_sleep+0x128>)
   3ed0a:	f008 fdde 	bl	478ca <printk>
   3ed0e:	215f      	movs	r1, #95	; 0x5f
   3ed10:	4827      	ldr	r0, [pc, #156]	; (3edb0 <z_tick_sleep+0x124>)
   3ed12:	f008 fde7 	bl	478e4 <assert_post_action>
	pending_current = _current;
   3ed16:	4d28      	ldr	r5, [pc, #160]	; (3edb8 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   3ed18:	4630      	mov	r0, r6
   3ed1a:	f000 f9c5 	bl	3f0a8 <z_spin_lock_set_owner>
   3ed1e:	4b27      	ldr	r3, [pc, #156]	; (3edbc <z_tick_sleep+0x130>)
   3ed20:	68a8      	ldr	r0, [r5, #8]
   3ed22:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3ed24:	f7ff fca2 	bl	3e66c <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3ed28:	68a8      	ldr	r0, [r5, #8]
   3ed2a:	4642      	mov	r2, r8
   3ed2c:	3018      	adds	r0, #24
   3ed2e:	4924      	ldr	r1, [pc, #144]	; (3edc0 <z_tick_sleep+0x134>)
   3ed30:	f000 fd0e 	bl	3f750 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3ed34:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ed36:	4630      	mov	r0, r6
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3ed38:	7b53      	ldrb	r3, [r2, #13]
   3ed3a:	f043 0310 	orr.w	r3, r3, #16
   3ed3e:	7353      	strb	r3, [r2, #13]
   3ed40:	f000 f9a2 	bl	3f088 <z_spin_unlock_valid>
   3ed44:	b960      	cbnz	r0, 3ed60 <z_tick_sleep+0xd4>
   3ed46:	491f      	ldr	r1, [pc, #124]	; (3edc4 <z_tick_sleep+0x138>)
   3ed48:	2389      	movs	r3, #137	; 0x89
   3ed4a:	4a19      	ldr	r2, [pc, #100]	; (3edb0 <z_tick_sleep+0x124>)
   3ed4c:	4815      	ldr	r0, [pc, #84]	; (3eda4 <z_tick_sleep+0x118>)
   3ed4e:	f008 fdbc 	bl	478ca <printk>
   3ed52:	481d      	ldr	r0, [pc, #116]	; (3edc8 <z_tick_sleep+0x13c>)
   3ed54:	f008 fdb9 	bl	478ca <printk>
   3ed58:	2189      	movs	r1, #137	; 0x89
   3ed5a:	4815      	ldr	r0, [pc, #84]	; (3edb0 <z_tick_sleep+0x124>)
   3ed5c:	f008 fdc2 	bl	478e4 <assert_post_action>
   3ed60:	4638      	mov	r0, r7
   3ed62:	f7e2 fca9 	bl	216b8 <z_arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3ed66:	68ab      	ldr	r3, [r5, #8]
   3ed68:	7b5b      	ldrb	r3, [r3, #13]
   3ed6a:	06db      	lsls	r3, r3, #27
   3ed6c:	d50e      	bpl.n	3ed8c <z_tick_sleep+0x100>
   3ed6e:	4917      	ldr	r1, [pc, #92]	; (3edcc <z_tick_sleep+0x140>)
   3ed70:	f240 33c3 	movw	r3, #963	; 0x3c3
   3ed74:	4a0a      	ldr	r2, [pc, #40]	; (3eda0 <z_tick_sleep+0x114>)
   3ed76:	480b      	ldr	r0, [pc, #44]	; (3eda4 <z_tick_sleep+0x118>)
   3ed78:	f008 fda7 	bl	478ca <printk>
   3ed7c:	480a      	ldr	r0, [pc, #40]	; (3eda8 <z_tick_sleep+0x11c>)
   3ed7e:	f008 fda4 	bl	478ca <printk>
   3ed82:	f240 31c3 	movw	r1, #963	; 0x3c3
   3ed86:	4806      	ldr	r0, [pc, #24]	; (3eda0 <z_tick_sleep+0x114>)
   3ed88:	f008 fdac 	bl	478e4 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3ed8c:	f00b fa38 	bl	4a200 <z_tick_get_32>
   3ed90:	1a24      	subs	r4, r4, r0
   3ed92:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3ed96:	e797      	b.n	3ecc8 <z_tick_sleep+0x3c>
   3ed98:	e000ed00 	.word	0xe000ed00
   3ed9c:	00052a45 	.word	0x00052a45
   3eda0:	00052aa9 	.word	0x00052aa9
   3eda4:	0004ccf0 	.word	0x0004ccf0
   3eda8:	0005294a 	.word	0x0005294a
   3edac:	0004d875 	.word	0x0004d875
   3edb0:	0004d84e 	.word	0x0004d84e
   3edb4:	0004d88a 	.word	0x0004d88a
   3edb8:	2002a578 	.word	0x2002a578
   3edbc:	2002a5ac 	.word	0x2002a5ac
   3edc0:	0003e419 	.word	0x0003e419
   3edc4:	0004d89f 	.word	0x0004d89f
   3edc8:	0004d8b6 	.word	0x0004d8b6
   3edcc:	00052b23 	.word	0x00052b23

0003edd0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3edd0:	4b01      	ldr	r3, [pc, #4]	; (3edd8 <z_impl_k_current_get+0x8>)
   3edd2:	6898      	ldr	r0, [r3, #8]
   3edd4:	4770      	bx	lr
   3edd6:	bf00      	nop
   3edd8:	2002a578 	.word	0x2002a578

0003eddc <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   3eddc:	b570      	push	{r4, r5, r6, lr}
   3edde:	4604      	mov	r4, r0
   3ede0:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   3ede2:	4615      	mov	r5, r2
   3ede4:	b962      	cbnz	r2, 3ee00 <z_impl_k_sem_init+0x24>
   3ede6:	4912      	ldr	r1, [pc, #72]	; (3ee30 <z_impl_k_sem_init+0x54>)
   3ede8:	2341      	movs	r3, #65	; 0x41
   3edea:	4a12      	ldr	r2, [pc, #72]	; (3ee34 <z_impl_k_sem_init+0x58>)
   3edec:	4812      	ldr	r0, [pc, #72]	; (3ee38 <z_impl_k_sem_init+0x5c>)
   3edee:	f008 fd6c 	bl	478ca <printk>
   3edf2:	4812      	ldr	r0, [pc, #72]	; (3ee3c <z_impl_k_sem_init+0x60>)
   3edf4:	f008 fd69 	bl	478ca <printk>
   3edf8:	2141      	movs	r1, #65	; 0x41
   3edfa:	480e      	ldr	r0, [pc, #56]	; (3ee34 <z_impl_k_sem_init+0x58>)
   3edfc:	f008 fd72 	bl	478e4 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   3ee00:	42b5      	cmp	r5, r6
   3ee02:	d20c      	bcs.n	3ee1e <z_impl_k_sem_init+0x42>
   3ee04:	490e      	ldr	r1, [pc, #56]	; (3ee40 <z_impl_k_sem_init+0x64>)
   3ee06:	2342      	movs	r3, #66	; 0x42
   3ee08:	4a0a      	ldr	r2, [pc, #40]	; (3ee34 <z_impl_k_sem_init+0x58>)
   3ee0a:	480b      	ldr	r0, [pc, #44]	; (3ee38 <z_impl_k_sem_init+0x5c>)
   3ee0c:	f008 fd5d 	bl	478ca <printk>
   3ee10:	480c      	ldr	r0, [pc, #48]	; (3ee44 <z_impl_k_sem_init+0x68>)
   3ee12:	f008 fd5a 	bl	478ca <printk>
   3ee16:	2142      	movs	r1, #66	; 0x42
   3ee18:	4806      	ldr	r0, [pc, #24]	; (3ee34 <z_impl_k_sem_init+0x58>)
   3ee1a:	f008 fd63 	bl	478e4 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   3ee1e:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   3ee22:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   3ee26:	e9c4 4400 	strd	r4, r4, [r4]
   3ee2a:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   3ee2e:	bd70      	pop	{r4, r5, r6, pc}
   3ee30:	00052b7c 	.word	0x00052b7c
   3ee34:	00052b5b 	.word	0x00052b5b
   3ee38:	0004ccf0 	.word	0x0004ccf0
   3ee3c:	00052b88 	.word	0x00052b88
   3ee40:	00052b9f 	.word	0x00052b9f
   3ee44:	00052bb6 	.word	0x00052bb6

0003ee48 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3ee48:	b570      	push	{r4, r5, r6, lr}
   3ee4a:	4604      	mov	r4, r0
   3ee4c:	f04f 0320 	mov.w	r3, #32
   3ee50:	f3ef 8611 	mrs	r6, BASEPRI
   3ee54:	f383 8811 	msr	BASEPRI, r3
   3ee58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ee5c:	4819      	ldr	r0, [pc, #100]	; (3eec4 <z_impl_k_sem_give+0x7c>)
   3ee5e:	f000 f905 	bl	3f06c <z_spin_lock_valid>
   3ee62:	b960      	cbnz	r0, 3ee7e <z_impl_k_sem_give+0x36>
   3ee64:	4918      	ldr	r1, [pc, #96]	; (3eec8 <z_impl_k_sem_give+0x80>)
   3ee66:	235f      	movs	r3, #95	; 0x5f
   3ee68:	4a18      	ldr	r2, [pc, #96]	; (3eecc <z_impl_k_sem_give+0x84>)
   3ee6a:	4819      	ldr	r0, [pc, #100]	; (3eed0 <z_impl_k_sem_give+0x88>)
   3ee6c:	f008 fd2d 	bl	478ca <printk>
   3ee70:	4818      	ldr	r0, [pc, #96]	; (3eed4 <z_impl_k_sem_give+0x8c>)
   3ee72:	f008 fd2a 	bl	478ca <printk>
   3ee76:	215f      	movs	r1, #95	; 0x5f
   3ee78:	4814      	ldr	r0, [pc, #80]	; (3eecc <z_impl_k_sem_give+0x84>)
   3ee7a:	f008 fd33 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ee7e:	4811      	ldr	r0, [pc, #68]	; (3eec4 <z_impl_k_sem_give+0x7c>)
   3ee80:	f000 f912 	bl	3f0a8 <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3ee84:	4620      	mov	r0, r4
   3ee86:	f7ff fdb7 	bl	3e9f8 <z_unpend_first_thread>
	if (thread != NULL) {
   3ee8a:	4605      	mov	r5, r0
   3ee8c:	b170      	cbz	r0, 3eeac <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3ee8e:	7b43      	ldrb	r3, [r0, #13]
   3ee90:	06db      	lsls	r3, r3, #27
   3ee92:	d103      	bne.n	3ee9c <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   3ee94:	6983      	ldr	r3, [r0, #24]
   3ee96:	b90b      	cbnz	r3, 3ee9c <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   3ee98:	f7ff fa3e 	bl	3e318 <z_add_thread_to_ready_q>
   3ee9c:	2300      	movs	r3, #0
   3ee9e:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3eea0:	4631      	mov	r1, r6
}
   3eea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3eea6:	4807      	ldr	r0, [pc, #28]	; (3eec4 <z_impl_k_sem_give+0x7c>)
   3eea8:	f7ff b840 	b.w	3df2c <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3eeac:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3eeb0:	429a      	cmp	r2, r3
   3eeb2:	bf18      	it	ne
   3eeb4:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3eeb6:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3eeb8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3eeba:	f104 0010 	add.w	r0, r4, #16
   3eebe:	f00b f9fb 	bl	4a2b8 <z_handle_obj_poll_events>
   3eec2:	e7ed      	b.n	3eea0 <z_impl_k_sem_give+0x58>
   3eec4:	2002a5bc 	.word	0x2002a5bc
   3eec8:	0004d875 	.word	0x0004d875
   3eecc:	0004d84e 	.word	0x0004d84e
   3eed0:	0004ccf0 	.word	0x0004ccf0
   3eed4:	0004d88a 	.word	0x0004d88a

0003eed8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3eed8:	b570      	push	{r4, r5, r6, lr}
   3eeda:	4605      	mov	r5, r0
   3eedc:	460e      	mov	r6, r1
   3eede:	f3ef 8305 	mrs	r3, IPSR
   3eee2:	2b0d      	cmp	r3, #13
   3eee4:	d804      	bhi.n	3eef0 <z_impl_k_sem_take+0x18>
   3eee6:	b18b      	cbz	r3, 3ef0c <z_impl_k_sem_take+0x34>
   3eee8:	4b34      	ldr	r3, [pc, #208]	; (3efbc <z_impl_k_sem_take+0xe4>)
   3eeea:	685b      	ldr	r3, [r3, #4]
   3eeec:	051b      	lsls	r3, r3, #20
   3eeee:	d40d      	bmi.n	3ef0c <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3eef0:	b166      	cbz	r6, 3ef0c <z_impl_k_sem_take+0x34>
   3eef2:	4933      	ldr	r1, [pc, #204]	; (3efc0 <z_impl_k_sem_take+0xe8>)
   3eef4:	238d      	movs	r3, #141	; 0x8d
   3eef6:	4a33      	ldr	r2, [pc, #204]	; (3efc4 <z_impl_k_sem_take+0xec>)
   3eef8:	4833      	ldr	r0, [pc, #204]	; (3efc8 <z_impl_k_sem_take+0xf0>)
   3eefa:	f008 fce6 	bl	478ca <printk>
   3eefe:	4833      	ldr	r0, [pc, #204]	; (3efcc <z_impl_k_sem_take+0xf4>)
   3ef00:	f008 fce3 	bl	478ca <printk>
   3ef04:	218d      	movs	r1, #141	; 0x8d
   3ef06:	482f      	ldr	r0, [pc, #188]	; (3efc4 <z_impl_k_sem_take+0xec>)
   3ef08:	f008 fcec 	bl	478e4 <assert_post_action>
   3ef0c:	f04f 0320 	mov.w	r3, #32
   3ef10:	f3ef 8411 	mrs	r4, BASEPRI
   3ef14:	f383 8811 	msr	BASEPRI, r3
   3ef18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ef1c:	482c      	ldr	r0, [pc, #176]	; (3efd0 <z_impl_k_sem_take+0xf8>)
   3ef1e:	f000 f8a5 	bl	3f06c <z_spin_lock_valid>
   3ef22:	b960      	cbnz	r0, 3ef3e <z_impl_k_sem_take+0x66>
   3ef24:	492b      	ldr	r1, [pc, #172]	; (3efd4 <z_impl_k_sem_take+0xfc>)
   3ef26:	235f      	movs	r3, #95	; 0x5f
   3ef28:	4a2b      	ldr	r2, [pc, #172]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef2a:	4827      	ldr	r0, [pc, #156]	; (3efc8 <z_impl_k_sem_take+0xf0>)
   3ef2c:	f008 fccd 	bl	478ca <printk>
   3ef30:	482a      	ldr	r0, [pc, #168]	; (3efdc <z_impl_k_sem_take+0x104>)
   3ef32:	f008 fcca 	bl	478ca <printk>
   3ef36:	215f      	movs	r1, #95	; 0x5f
   3ef38:	4827      	ldr	r0, [pc, #156]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef3a:	f008 fcd3 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ef3e:	4824      	ldr	r0, [pc, #144]	; (3efd0 <z_impl_k_sem_take+0xf8>)
   3ef40:	f000 f8b2 	bl	3f0a8 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3ef44:	68ab      	ldr	r3, [r5, #8]
   3ef46:	b1c3      	cbz	r3, 3ef7a <z_impl_k_sem_take+0xa2>
		sem->count--;
   3ef48:	3b01      	subs	r3, #1
   3ef4a:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ef4c:	4820      	ldr	r0, [pc, #128]	; (3efd0 <z_impl_k_sem_take+0xf8>)
   3ef4e:	f000 f89b 	bl	3f088 <z_spin_unlock_valid>
   3ef52:	b960      	cbnz	r0, 3ef6e <z_impl_k_sem_take+0x96>
   3ef54:	4922      	ldr	r1, [pc, #136]	; (3efe0 <z_impl_k_sem_take+0x108>)
   3ef56:	2372      	movs	r3, #114	; 0x72
   3ef58:	4a1f      	ldr	r2, [pc, #124]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef5a:	481b      	ldr	r0, [pc, #108]	; (3efc8 <z_impl_k_sem_take+0xf0>)
   3ef5c:	f008 fcb5 	bl	478ca <printk>
   3ef60:	4820      	ldr	r0, [pc, #128]	; (3efe4 <z_impl_k_sem_take+0x10c>)
   3ef62:	f008 fcb2 	bl	478ca <printk>
   3ef66:	2172      	movs	r1, #114	; 0x72
   3ef68:	481b      	ldr	r0, [pc, #108]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef6a:	f008 fcbb 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3ef6e:	f384 8811 	msr	BASEPRI, r4
   3ef72:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   3ef76:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   3ef78:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3ef7a:	b9be      	cbnz	r6, 3efac <z_impl_k_sem_take+0xd4>
   3ef7c:	4814      	ldr	r0, [pc, #80]	; (3efd0 <z_impl_k_sem_take+0xf8>)
   3ef7e:	f000 f883 	bl	3f088 <z_spin_unlock_valid>
   3ef82:	b960      	cbnz	r0, 3ef9e <z_impl_k_sem_take+0xc6>
   3ef84:	4916      	ldr	r1, [pc, #88]	; (3efe0 <z_impl_k_sem_take+0x108>)
   3ef86:	2372      	movs	r3, #114	; 0x72
   3ef88:	4a13      	ldr	r2, [pc, #76]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef8a:	480f      	ldr	r0, [pc, #60]	; (3efc8 <z_impl_k_sem_take+0xf0>)
   3ef8c:	f008 fc9d 	bl	478ca <printk>
   3ef90:	4814      	ldr	r0, [pc, #80]	; (3efe4 <z_impl_k_sem_take+0x10c>)
   3ef92:	f008 fc9a 	bl	478ca <printk>
   3ef96:	2172      	movs	r1, #114	; 0x72
   3ef98:	480f      	ldr	r0, [pc, #60]	; (3efd8 <z_impl_k_sem_take+0x100>)
   3ef9a:	f008 fca3 	bl	478e4 <assert_post_action>
   3ef9e:	f384 8811 	msr	BASEPRI, r4
   3efa2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   3efa6:	f06f 000f 	mvn.w	r0, #15
   3efaa:	e7e5      	b.n	3ef78 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3efac:	4633      	mov	r3, r6
   3efae:	462a      	mov	r2, r5
   3efb0:	4621      	mov	r1, r4
}
   3efb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3efb6:	4806      	ldr	r0, [pc, #24]	; (3efd0 <z_impl_k_sem_take+0xf8>)
   3efb8:	f7ff bc62 	b.w	3e880 <z_pend_curr>
   3efbc:	e000ed00 	.word	0xe000ed00
   3efc0:	00052bdb 	.word	0x00052bdb
   3efc4:	00052b5b 	.word	0x00052b5b
   3efc8:	0004ccf0 	.word	0x0004ccf0
   3efcc:	0005294a 	.word	0x0005294a
   3efd0:	2002a5bc 	.word	0x2002a5bc
   3efd4:	0004d875 	.word	0x0004d875
   3efd8:	0004d84e 	.word	0x0004d84e
   3efdc:	0004d88a 	.word	0x0004d88a
   3efe0:	0004d89f 	.word	0x0004d89f
   3efe4:	0004d8b6 	.word	0x0004d8b6

0003efe8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3efe8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3efea:	4c08      	ldr	r4, [pc, #32]	; (3f00c <k_sys_work_q_init+0x24>)
   3efec:	f04f 33ff 	mov.w	r3, #4294967295
   3eff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3eff4:	4906      	ldr	r1, [pc, #24]	; (3f010 <k_sys_work_q_init+0x28>)
   3eff6:	4620      	mov	r0, r4
   3eff8:	f000 fa72 	bl	3f4e0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3effc:	4905      	ldr	r1, [pc, #20]	; (3f014 <k_sys_work_q_init+0x2c>)
   3effe:	f104 0014 	add.w	r0, r4, #20
   3f002:	f00b f894 	bl	4a12e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3f006:	2000      	movs	r0, #0
   3f008:	bd10      	pop	{r4, pc}
   3f00a:	bf00      	nop
   3f00c:	2002a5c0 	.word	0x2002a5c0
   3f010:	2002f2a8 	.word	0x2002f2a8
   3f014:	00052c09 	.word	0x00052c09

0003f018 <k_is_in_isr>:
   3f018:	f3ef 8005 	mrs	r0, IPSR
   3f01c:	280d      	cmp	r0, #13
   3f01e:	d807      	bhi.n	3f030 <k_is_in_isr+0x18>
   3f020:	b138      	cbz	r0, 3f032 <k_is_in_isr+0x1a>
   3f022:	4b04      	ldr	r3, [pc, #16]	; (3f034 <k_is_in_isr+0x1c>)
   3f024:	6858      	ldr	r0, [r3, #4]
   3f026:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   3f02a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   3f02e:	4770      	bx	lr
   3f030:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   3f032:	4770      	bx	lr
   3f034:	e000ed00 	.word	0xe000ed00

0003f038 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3f038:	b530      	push	{r4, r5, lr}
   3f03a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3f03c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3f03e:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3f040:	9504      	str	r5, [sp, #16]
   3f042:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3f044:	9503      	str	r5, [sp, #12]
   3f046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3f048:	9502      	str	r5, [sp, #8]
   3f04a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3f04c:	9501      	str	r5, [sp, #4]
   3f04e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3f050:	9500      	str	r5, [sp, #0]
   3f052:	f7e2 fb9b 	bl	2178c <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3f056:	4b04      	ldr	r3, [pc, #16]	; (3f068 <z_setup_new_thread+0x30>)
   3f058:	689b      	ldr	r3, [r3, #8]
   3f05a:	b913      	cbnz	r3, 3f062 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3f05c:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3f05e:	b007      	add	sp, #28
   3f060:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   3f062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3f064:	e7fa      	b.n	3f05c <z_setup_new_thread+0x24>
   3f066:	bf00      	nop
   3f068:	2002a578 	.word	0x2002a578

0003f06c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3f06c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3f06e:	b138      	cbz	r0, 3f080 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3f070:	4b04      	ldr	r3, [pc, #16]	; (3f084 <z_spin_lock_valid+0x18>)
   3f072:	f000 0003 	and.w	r0, r0, #3
   3f076:	7d1b      	ldrb	r3, [r3, #20]
   3f078:	1ac0      	subs	r0, r0, r3
   3f07a:	bf18      	it	ne
   3f07c:	2001      	movne	r0, #1
   3f07e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3f080:	2001      	movs	r0, #1
}
   3f082:	4770      	bx	lr
   3f084:	2002a578 	.word	0x2002a578

0003f088 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3f088:	4a06      	ldr	r2, [pc, #24]	; (3f0a4 <z_spin_unlock_valid+0x1c>)
   3f08a:	7d11      	ldrb	r1, [r2, #20]
   3f08c:	6893      	ldr	r3, [r2, #8]
   3f08e:	6802      	ldr	r2, [r0, #0]
   3f090:	430b      	orrs	r3, r1
   3f092:	429a      	cmp	r2, r3
   3f094:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3f098:	bf06      	itte	eq
   3f09a:	6003      	streq	r3, [r0, #0]
	return true;
   3f09c:	2001      	moveq	r0, #1
		return false;
   3f09e:	4618      	movne	r0, r3
}
   3f0a0:	4770      	bx	lr
   3f0a2:	bf00      	nop
   3f0a4:	2002a578 	.word	0x2002a578

0003f0a8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3f0a8:	4a02      	ldr	r2, [pc, #8]	; (3f0b4 <z_spin_lock_set_owner+0xc>)
   3f0aa:	7d11      	ldrb	r1, [r2, #20]
   3f0ac:	6893      	ldr	r3, [r2, #8]
   3f0ae:	430b      	orrs	r3, r1
   3f0b0:	6003      	str	r3, [r0, #0]
}
   3f0b2:	4770      	bx	lr
   3f0b4:	2002a578 	.word	0x2002a578

0003f0b8 <z_impl_k_thread_start>:
{
   3f0b8:	b538      	push	{r3, r4, r5, lr}
   3f0ba:	4604      	mov	r4, r0
	__asm__ volatile(
   3f0bc:	f04f 0320 	mov.w	r3, #32
   3f0c0:	f3ef 8511 	mrs	r5, BASEPRI
   3f0c4:	f383 8811 	msr	BASEPRI, r3
   3f0c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f0cc:	481e      	ldr	r0, [pc, #120]	; (3f148 <z_impl_k_thread_start+0x90>)
   3f0ce:	f7ff ffcd 	bl	3f06c <z_spin_lock_valid>
   3f0d2:	b960      	cbnz	r0, 3f0ee <z_impl_k_thread_start+0x36>
   3f0d4:	491d      	ldr	r1, [pc, #116]	; (3f14c <z_impl_k_thread_start+0x94>)
   3f0d6:	235f      	movs	r3, #95	; 0x5f
   3f0d8:	4a1d      	ldr	r2, [pc, #116]	; (3f150 <z_impl_k_thread_start+0x98>)
   3f0da:	481e      	ldr	r0, [pc, #120]	; (3f154 <z_impl_k_thread_start+0x9c>)
   3f0dc:	f008 fbf5 	bl	478ca <printk>
   3f0e0:	481d      	ldr	r0, [pc, #116]	; (3f158 <z_impl_k_thread_start+0xa0>)
   3f0e2:	f008 fbf2 	bl	478ca <printk>
   3f0e6:	215f      	movs	r1, #95	; 0x5f
   3f0e8:	4819      	ldr	r0, [pc, #100]	; (3f150 <z_impl_k_thread_start+0x98>)
   3f0ea:	f008 fbfb 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f0ee:	4816      	ldr	r0, [pc, #88]	; (3f148 <z_impl_k_thread_start+0x90>)
   3f0f0:	f7ff ffda 	bl	3f0a8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3f0f4:	7b63      	ldrb	r3, [r4, #13]
   3f0f6:	075a      	lsls	r2, r3, #29
   3f0f8:	d415      	bmi.n	3f126 <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f0fa:	4813      	ldr	r0, [pc, #76]	; (3f148 <z_impl_k_thread_start+0x90>)
   3f0fc:	f7ff ffc4 	bl	3f088 <z_spin_unlock_valid>
   3f100:	b960      	cbnz	r0, 3f11c <z_impl_k_thread_start+0x64>
   3f102:	4916      	ldr	r1, [pc, #88]	; (3f15c <z_impl_k_thread_start+0xa4>)
   3f104:	2372      	movs	r3, #114	; 0x72
   3f106:	4a12      	ldr	r2, [pc, #72]	; (3f150 <z_impl_k_thread_start+0x98>)
   3f108:	4812      	ldr	r0, [pc, #72]	; (3f154 <z_impl_k_thread_start+0x9c>)
   3f10a:	f008 fbde 	bl	478ca <printk>
   3f10e:	4814      	ldr	r0, [pc, #80]	; (3f160 <z_impl_k_thread_start+0xa8>)
   3f110:	f008 fbdb 	bl	478ca <printk>
   3f114:	2172      	movs	r1, #114	; 0x72
   3f116:	480e      	ldr	r0, [pc, #56]	; (3f150 <z_impl_k_thread_start+0x98>)
   3f118:	f008 fbe4 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f11c:	f385 8811 	msr	BASEPRI, r5
   3f120:	f3bf 8f6f 	isb	sy
}
   3f124:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3f126:	f023 0304 	bic.w	r3, r3, #4
   3f12a:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   3f12c:	4620      	mov	r0, r4
   3f12e:	f00a fff3 	bl	4a118 <z_is_thread_ready>
   3f132:	b110      	cbz	r0, 3f13a <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   3f134:	4620      	mov	r0, r4
   3f136:	f7ff f8ef 	bl	3e318 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3f13a:	4629      	mov	r1, r5
}
   3f13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3f140:	4801      	ldr	r0, [pc, #4]	; (3f148 <z_impl_k_thread_start+0x90>)
   3f142:	f7fe bef3 	b.w	3df2c <z_reschedule>
   3f146:	bf00      	nop
   3f148:	2002a684 	.word	0x2002a684
   3f14c:	0004d875 	.word	0x0004d875
   3f150:	0004d84e 	.word	0x0004d84e
   3f154:	0004ccf0 	.word	0x0004ccf0
   3f158:	0004d88a 	.word	0x0004d88a
   3f15c:	0004d89f 	.word	0x0004d89f
   3f160:	0004d8b6 	.word	0x0004d8b6

0003f164 <z_impl_k_thread_create>:
{
   3f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f168:	b086      	sub	sp, #24
   3f16a:	4604      	mov	r4, r0
   3f16c:	460e      	mov	r6, r1
   3f16e:	4617      	mov	r7, r2
   3f170:	4698      	mov	r8, r3
   3f172:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3f174:	f3ef 8305 	mrs	r3, IPSR
   3f178:	2b0d      	cmp	r3, #13
   3f17a:	d804      	bhi.n	3f186 <z_impl_k_thread_create+0x22>
   3f17c:	b193      	cbz	r3, 3f1a4 <z_impl_k_thread_create+0x40>
   3f17e:	4b21      	ldr	r3, [pc, #132]	; (3f204 <z_impl_k_thread_create+0xa0>)
   3f180:	685b      	ldr	r3, [r3, #4]
   3f182:	051a      	lsls	r2, r3, #20
   3f184:	d40e      	bmi.n	3f1a4 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   3f186:	4920      	ldr	r1, [pc, #128]	; (3f208 <z_impl_k_thread_create+0xa4>)
   3f188:	f240 2315 	movw	r3, #533	; 0x215
   3f18c:	4a1f      	ldr	r2, [pc, #124]	; (3f20c <z_impl_k_thread_create+0xa8>)
   3f18e:	4820      	ldr	r0, [pc, #128]	; (3f210 <z_impl_k_thread_create+0xac>)
   3f190:	f008 fb9b 	bl	478ca <printk>
   3f194:	481f      	ldr	r0, [pc, #124]	; (3f214 <z_impl_k_thread_create+0xb0>)
   3f196:	f008 fb98 	bl	478ca <printk>
   3f19a:	f240 2115 	movw	r1, #533	; 0x215
   3f19e:	481b      	ldr	r0, [pc, #108]	; (3f20c <z_impl_k_thread_create+0xa8>)
   3f1a0:	f008 fba0 	bl	478e4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3f1a4:	2300      	movs	r3, #0
   3f1a6:	9305      	str	r3, [sp, #20]
   3f1a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3f1aa:	463a      	mov	r2, r7
   3f1ac:	9304      	str	r3, [sp, #16]
   3f1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f1b0:	4631      	mov	r1, r6
   3f1b2:	9303      	str	r3, [sp, #12]
   3f1b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3f1b6:	4620      	mov	r0, r4
   3f1b8:	9302      	str	r3, [sp, #8]
   3f1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3f1bc:	9301      	str	r3, [sp, #4]
   3f1be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3f1c0:	9300      	str	r3, [sp, #0]
   3f1c2:	4643      	mov	r3, r8
   3f1c4:	f7ff ff38 	bl	3f038 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3f1c8:	1c6b      	adds	r3, r5, #1
   3f1ca:	d003      	beq.n	3f1d4 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   3f1cc:	b935      	cbnz	r5, 3f1dc <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   3f1ce:	4620      	mov	r0, r4
   3f1d0:	f7ff ff72 	bl	3f0b8 <z_impl_k_thread_start>
}
   3f1d4:	4620      	mov	r0, r4
   3f1d6:	b006      	add	sp, #24
   3f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f1dc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3f1e0:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f1e4:	2100      	movs	r1, #0
   3f1e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f1ea:	2300      	movs	r3, #0
   3f1ec:	fbc6 0105 	smlal	r0, r1, r6, r5
   3f1f0:	f7d9 fd94 	bl	18d1c <__aeabi_ldivmod>
   3f1f4:	4908      	ldr	r1, [pc, #32]	; (3f218 <z_impl_k_thread_create+0xb4>)
   3f1f6:	1c42      	adds	r2, r0, #1
   3f1f8:	f104 0018 	add.w	r0, r4, #24
   3f1fc:	f000 faa8 	bl	3f750 <z_add_timeout>
   3f200:	e7e8      	b.n	3f1d4 <z_impl_k_thread_create+0x70>
   3f202:	bf00      	nop
   3f204:	e000ed00 	.word	0xe000ed00
   3f208:	00052a45 	.word	0x00052a45
   3f20c:	00052c12 	.word	0x00052c12
   3f210:	0004ccf0 	.word	0x0004ccf0
   3f214:	00052c36 	.word	0x00052c36
   3f218:	0003e419 	.word	0x0003e419

0003f21c <z_init_static_threads>:
{
   3f21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3f220:	4f3c      	ldr	r7, [pc, #240]	; (3f314 <z_init_static_threads+0xf8>)
   3f222:	4d3d      	ldr	r5, [pc, #244]	; (3f318 <z_init_static_threads+0xfc>)
   3f224:	463e      	mov	r6, r7
   3f226:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3f328 <z_init_static_threads+0x10c>
{
   3f22a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3f22c:	42bd      	cmp	r5, r7
   3f22e:	d90e      	bls.n	3f24e <z_init_static_threads+0x32>
   3f230:	493a      	ldr	r1, [pc, #232]	; (3f31c <z_init_static_threads+0x100>)
   3f232:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   3f236:	4642      	mov	r2, r8
   3f238:	4839      	ldr	r0, [pc, #228]	; (3f320 <z_init_static_threads+0x104>)
   3f23a:	f008 fb46 	bl	478ca <printk>
   3f23e:	4839      	ldr	r0, [pc, #228]	; (3f324 <z_init_static_threads+0x108>)
   3f240:	f008 fb43 	bl	478ca <printk>
   3f244:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   3f248:	4640      	mov	r0, r8
   3f24a:	f008 fb4b 	bl	478e4 <assert_post_action>
   3f24e:	42b5      	cmp	r5, r6
   3f250:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3f254:	d31f      	bcc.n	3f296 <z_init_static_threads+0x7a>
	k_sched_lock();
   3f256:	f7fe fea5 	bl	3dfa4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3f25a:	4c2f      	ldr	r4, [pc, #188]	; (3f318 <z_init_static_threads+0xfc>)
   3f25c:	4d32      	ldr	r5, [pc, #200]	; (3f328 <z_init_static_threads+0x10c>)
   3f25e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3f31c <z_init_static_threads+0x100>
   3f262:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3f320 <z_init_static_threads+0x104>
   3f266:	42b4      	cmp	r4, r6
   3f268:	d90e      	bls.n	3f288 <z_init_static_threads+0x6c>
   3f26a:	4641      	mov	r1, r8
   3f26c:	f240 23f3 	movw	r3, #755	; 0x2f3
   3f270:	462a      	mov	r2, r5
   3f272:	4648      	mov	r0, r9
   3f274:	f008 fb29 	bl	478ca <printk>
   3f278:	482a      	ldr	r0, [pc, #168]	; (3f324 <z_init_static_threads+0x108>)
   3f27a:	f008 fb26 	bl	478ca <printk>
   3f27e:	f240 21f3 	movw	r1, #755	; 0x2f3
   3f282:	4628      	mov	r0, r5
   3f284:	f008 fb2e 	bl	478e4 <assert_post_action>
   3f288:	42b4      	cmp	r4, r6
   3f28a:	d321      	bcc.n	3f2d0 <z_init_static_threads+0xb4>
}
   3f28c:	b007      	add	sp, #28
   3f28e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3f292:	f7fe bfbf 	b.w	3e214 <k_sched_unlock>
		z_setup_new_thread(
   3f296:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3f29a:	9305      	str	r3, [sp, #20]
   3f29c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3f2a0:	9304      	str	r3, [sp, #16]
   3f2a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3f2a6:	9303      	str	r3, [sp, #12]
   3f2a8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3f2ac:	9302      	str	r3, [sp, #8]
   3f2ae:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3f2b2:	9301      	str	r3, [sp, #4]
   3f2b4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3f2b8:	9300      	str	r3, [sp, #0]
   3f2ba:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3f2be:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3f2c2:	f7ff feb9 	bl	3f038 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3f2c6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3f2ca:	64dd      	str	r5, [r3, #76]	; 0x4c
   3f2cc:	4625      	mov	r5, r4
   3f2ce:	e7ad      	b.n	3f22c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3f2d0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3f2d4:	f1bc 3fff 	cmp.w	ip, #4294967295
   3f2d8:	d006      	beq.n	3f2e8 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3f2da:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3f2dc:	f1bc 0f00 	cmp.w	ip, #0
   3f2e0:	d104      	bne.n	3f2ec <z_init_static_threads+0xd0>
   3f2e2:	4638      	mov	r0, r7
   3f2e4:	f7ff fee8 	bl	3f0b8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3f2e8:	3430      	adds	r4, #48	; 0x30
   3f2ea:	e7bc      	b.n	3f266 <z_init_static_threads+0x4a>
   3f2ec:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3f2f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f2f4:	2100      	movs	r1, #0
   3f2f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f2fa:	2300      	movs	r3, #0
   3f2fc:	fbce 010c 	smlal	r0, r1, lr, ip
   3f300:	f7d9 fd0c 	bl	18d1c <__aeabi_ldivmod>
   3f304:	4909      	ldr	r1, [pc, #36]	; (3f32c <z_init_static_threads+0x110>)
   3f306:	1c42      	adds	r2, r0, #1
   3f308:	f107 0018 	add.w	r0, r7, #24
   3f30c:	f000 fa20 	bl	3f750 <z_add_timeout>
   3f310:	e7ea      	b.n	3f2e8 <z_init_static_threads+0xcc>
   3f312:	bf00      	nop
   3f314:	20032488 	.word	0x20032488
   3f318:	20032488 	.word	0x20032488
   3f31c:	00052c5b 	.word	0x00052c5b
   3f320:	0004ccf0 	.word	0x0004ccf0
   3f324:	000528c6 	.word	0x000528c6
   3f328:	00052c12 	.word	0x00052c12
   3f32c:	0003e419 	.word	0x0003e419

0003f330 <z_impl_k_thread_suspend>:
{
   3f330:	b538      	push	{r3, r4, r5, lr}
   3f332:	4605      	mov	r5, r0
	__asm__ volatile(
   3f334:	f04f 0320 	mov.w	r3, #32
   3f338:	f3ef 8411 	mrs	r4, BASEPRI
   3f33c:	f383 8811 	msr	BASEPRI, r3
   3f340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f344:	481b      	ldr	r0, [pc, #108]	; (3f3b4 <z_impl_k_thread_suspend+0x84>)
   3f346:	f7ff fe91 	bl	3f06c <z_spin_lock_valid>
   3f34a:	b960      	cbnz	r0, 3f366 <z_impl_k_thread_suspend+0x36>
   3f34c:	491a      	ldr	r1, [pc, #104]	; (3f3b8 <z_impl_k_thread_suspend+0x88>)
   3f34e:	235f      	movs	r3, #95	; 0x5f
   3f350:	4a1a      	ldr	r2, [pc, #104]	; (3f3bc <z_impl_k_thread_suspend+0x8c>)
   3f352:	481b      	ldr	r0, [pc, #108]	; (3f3c0 <z_impl_k_thread_suspend+0x90>)
   3f354:	f008 fab9 	bl	478ca <printk>
   3f358:	481a      	ldr	r0, [pc, #104]	; (3f3c4 <z_impl_k_thread_suspend+0x94>)
   3f35a:	f008 fab6 	bl	478ca <printk>
   3f35e:	215f      	movs	r1, #95	; 0x5f
   3f360:	4816      	ldr	r0, [pc, #88]	; (3f3bc <z_impl_k_thread_suspend+0x8c>)
   3f362:	f008 fabf 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f366:	4813      	ldr	r0, [pc, #76]	; (3f3b4 <z_impl_k_thread_suspend+0x84>)
   3f368:	f7ff fe9e 	bl	3f0a8 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3f36c:	4628      	mov	r0, r5
   3f36e:	f00a fee3 	bl	4a138 <z_thread_single_suspend>
	if (thread == _current) {
   3f372:	4b15      	ldr	r3, [pc, #84]	; (3f3c8 <z_impl_k_thread_suspend+0x98>)
   3f374:	689b      	ldr	r3, [r3, #8]
   3f376:	42ab      	cmp	r3, r5
   3f378:	d105      	bne.n	3f386 <z_impl_k_thread_suspend+0x56>
		z_reschedule(&lock, key);
   3f37a:	4621      	mov	r1, r4
}
   3f37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3f380:	480c      	ldr	r0, [pc, #48]	; (3f3b4 <z_impl_k_thread_suspend+0x84>)
   3f382:	f7fe bdd3 	b.w	3df2c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f386:	480b      	ldr	r0, [pc, #44]	; (3f3b4 <z_impl_k_thread_suspend+0x84>)
   3f388:	f7ff fe7e 	bl	3f088 <z_spin_unlock_valid>
   3f38c:	b960      	cbnz	r0, 3f3a8 <z_impl_k_thread_suspend+0x78>
   3f38e:	490f      	ldr	r1, [pc, #60]	; (3f3cc <z_impl_k_thread_suspend+0x9c>)
   3f390:	2372      	movs	r3, #114	; 0x72
   3f392:	4a0a      	ldr	r2, [pc, #40]	; (3f3bc <z_impl_k_thread_suspend+0x8c>)
   3f394:	480a      	ldr	r0, [pc, #40]	; (3f3c0 <z_impl_k_thread_suspend+0x90>)
   3f396:	f008 fa98 	bl	478ca <printk>
   3f39a:	480d      	ldr	r0, [pc, #52]	; (3f3d0 <z_impl_k_thread_suspend+0xa0>)
   3f39c:	f008 fa95 	bl	478ca <printk>
   3f3a0:	2172      	movs	r1, #114	; 0x72
   3f3a2:	4806      	ldr	r0, [pc, #24]	; (3f3bc <z_impl_k_thread_suspend+0x8c>)
   3f3a4:	f008 fa9e 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f3a8:	f384 8811 	msr	BASEPRI, r4
   3f3ac:	f3bf 8f6f 	isb	sy
}
   3f3b0:	bd38      	pop	{r3, r4, r5, pc}
   3f3b2:	bf00      	nop
   3f3b4:	2002a684 	.word	0x2002a684
   3f3b8:	0004d875 	.word	0x0004d875
   3f3bc:	0004d84e 	.word	0x0004d84e
   3f3c0:	0004ccf0 	.word	0x0004ccf0
   3f3c4:	0004d88a 	.word	0x0004d88a
   3f3c8:	2002a578 	.word	0x2002a578
   3f3cc:	0004d89f 	.word	0x0004d89f
   3f3d0:	0004d8b6 	.word	0x0004d8b6

0003f3d4 <z_impl_k_thread_resume>:
{
   3f3d4:	b538      	push	{r3, r4, r5, lr}
   3f3d6:	4605      	mov	r5, r0
	__asm__ volatile(
   3f3d8:	f04f 0320 	mov.w	r3, #32
   3f3dc:	f3ef 8411 	mrs	r4, BASEPRI
   3f3e0:	f383 8811 	msr	BASEPRI, r3
   3f3e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f3e8:	480e      	ldr	r0, [pc, #56]	; (3f424 <z_impl_k_thread_resume+0x50>)
   3f3ea:	f7ff fe3f 	bl	3f06c <z_spin_lock_valid>
   3f3ee:	b960      	cbnz	r0, 3f40a <z_impl_k_thread_resume+0x36>
   3f3f0:	490d      	ldr	r1, [pc, #52]	; (3f428 <z_impl_k_thread_resume+0x54>)
   3f3f2:	235f      	movs	r3, #95	; 0x5f
   3f3f4:	4a0d      	ldr	r2, [pc, #52]	; (3f42c <z_impl_k_thread_resume+0x58>)
   3f3f6:	480e      	ldr	r0, [pc, #56]	; (3f430 <z_impl_k_thread_resume+0x5c>)
   3f3f8:	f008 fa67 	bl	478ca <printk>
   3f3fc:	480d      	ldr	r0, [pc, #52]	; (3f434 <z_impl_k_thread_resume+0x60>)
   3f3fe:	f008 fa64 	bl	478ca <printk>
   3f402:	215f      	movs	r1, #95	; 0x5f
   3f404:	4809      	ldr	r0, [pc, #36]	; (3f42c <z_impl_k_thread_resume+0x58>)
   3f406:	f008 fa6d 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f40a:	4806      	ldr	r0, [pc, #24]	; (3f424 <z_impl_k_thread_resume+0x50>)
   3f40c:	f7ff fe4c 	bl	3f0a8 <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   3f410:	4628      	mov	r0, r5
   3f412:	f00a fe9e 	bl	4a152 <z_thread_single_resume>
	z_reschedule(&lock, key);
   3f416:	4621      	mov	r1, r4
}
   3f418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3f41c:	4801      	ldr	r0, [pc, #4]	; (3f424 <z_impl_k_thread_resume+0x50>)
   3f41e:	f7fe bd85 	b.w	3df2c <z_reschedule>
   3f422:	bf00      	nop
   3f424:	2002a684 	.word	0x2002a684
   3f428:	0004d875 	.word	0x0004d875
   3f42c:	0004d84e 	.word	0x0004d84e
   3f430:	0004ccf0 	.word	0x0004ccf0
   3f434:	0004d88a 	.word	0x0004d88a

0003f438 <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   3f438:	69c3      	ldr	r3, [r0, #28]
{
   3f43a:	b570      	push	{r4, r5, r6, lr}
   3f43c:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   3f43e:	b963      	cbnz	r3, 3f45a <work_cancel+0x22>
   3f440:	4923      	ldr	r1, [pc, #140]	; (3f4d0 <work_cancel+0x98>)
   3f442:	2339      	movs	r3, #57	; 0x39
   3f444:	4a23      	ldr	r2, [pc, #140]	; (3f4d4 <work_cancel+0x9c>)
   3f446:	4824      	ldr	r0, [pc, #144]	; (3f4d8 <work_cancel+0xa0>)
   3f448:	f008 fa3f 	bl	478ca <printk>
   3f44c:	4823      	ldr	r0, [pc, #140]	; (3f4dc <work_cancel+0xa4>)
   3f44e:	f008 fa3c 	bl	478ca <printk>
   3f452:	2139      	movs	r1, #57	; 0x39
   3f454:	481f      	ldr	r0, [pc, #124]	; (3f4d4 <work_cancel+0x9c>)
   3f456:	f008 fa45 	bl	478e4 <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3f45a:	f104 0508 	add.w	r5, r4, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3f45e:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   3f462:	07db      	lsls	r3, r3, #31
   3f464:	d52f      	bpl.n	3f4c6 <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3f466:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3f468:	69e2      	ldr	r2, [r4, #28]
   3f46a:	6813      	ldr	r3, [r2, #0]
   3f46c:	b913      	cbnz	r3, 3f474 <work_cancel+0x3c>
			return -EINVAL;
   3f46e:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   3f472:	bd70      	pop	{r4, r5, r6, pc}
   3f474:	429c      	cmp	r4, r3
   3f476:	d121      	bne.n	3f4bc <work_cancel+0x84>
   3f478:	6823      	ldr	r3, [r4, #0]
   3f47a:	6856      	ldr	r6, [r2, #4]
   3f47c:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   3f480:	b991      	cbnz	r1, 3f4a8 <work_cancel+0x70>
   3f482:	42b4      	cmp	r4, r6
	list->head = node;
   3f484:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3f486:	d100      	bne.n	3f48a <work_cancel+0x52>
	list->tail = node;
   3f488:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3f48a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f48c:	f003 0303 	and.w	r3, r3, #3
   3f490:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3f492:	2000      	movs	r0, #0
   3f494:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3f496:	e8d5 3fef 	ldaex	r3, [r5]
   3f49a:	f023 0301 	bic.w	r3, r3, #1
   3f49e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3f4a2:	2a00      	cmp	r2, #0
   3f4a4:	d0e5      	beq.n	3f472 <work_cancel+0x3a>
   3f4a6:	e7f6      	b.n	3f496 <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3f4a8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3f4aa:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f4ac:	f003 0303 	and.w	r3, r3, #3
   3f4b0:	ea43 0300 	orr.w	r3, r3, r0
   3f4b4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3f4b6:	bf08      	it	eq
   3f4b8:	6051      	streq	r1, [r2, #4]
   3f4ba:	e7e6      	b.n	3f48a <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3f4bc:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3f4be:	4619      	mov	r1, r3
   3f4c0:	f020 0303 	bic.w	r3, r0, #3
   3f4c4:	e7d2      	b.n	3f46c <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   3f4c6:	f104 000c 	add.w	r0, r4, #12
   3f4ca:	f000 f9e7 	bl	3f89c <z_abort_timeout>
   3f4ce:	e7e0      	b.n	3f492 <work_cancel+0x5a>
   3f4d0:	00052cac 	.word	0x00052cac
   3f4d4:	00052c88 	.word	0x00052c88
   3f4d8:	0004ccf0 	.word	0x0004ccf0
   3f4dc:	0005294a 	.word	0x0005294a

0003f4e0 <k_work_q_start>:
{
   3f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f4e4:	4605      	mov	r5, r0
   3f4e6:	b086      	sub	sp, #24
   3f4e8:	460e      	mov	r6, r1
   3f4ea:	4617      	mov	r7, r2
   3f4ec:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3f4ee:	f00a fda4 	bl	4a03a <z_impl_k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3f4f2:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3f4f6:	2000      	movs	r0, #0
   3f4f8:	4b09      	ldr	r3, [pc, #36]	; (3f520 <k_work_q_start+0x40>)
   3f4fa:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3f4fe:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3f502:	e9cd 5000 	strd	r5, r0, [sp]
   3f506:	463a      	mov	r2, r7
   3f508:	4631      	mov	r1, r6
   3f50a:	4620      	mov	r0, r4
   3f50c:	f7ff fe2a 	bl	3f164 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3f510:	4620      	mov	r0, r4
   3f512:	4904      	ldr	r1, [pc, #16]	; (3f524 <k_work_q_start+0x44>)
}
   3f514:	b006      	add	sp, #24
   3f516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3f51a:	f00a be08 	b.w	4a12e <z_impl_k_thread_name_set>
   3f51e:	bf00      	nop
   3f520:	00047385 	.word	0x00047385
   3f524:	0004f27b 	.word	0x0004f27b

0003f528 <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3f528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f52c:	4606      	mov	r6, r0
   3f52e:	460d      	mov	r5, r1
   3f530:	4690      	mov	r8, r2
   3f532:	f04f 0320 	mov.w	r3, #32
   3f536:	f3ef 8711 	mrs	r7, BASEPRI
   3f53a:	f383 8811 	msr	BASEPRI, r3
   3f53e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f542:	4836      	ldr	r0, [pc, #216]	; (3f61c <k_delayed_work_submit_to_queue+0xf4>)
   3f544:	f7ff fd92 	bl	3f06c <z_spin_lock_valid>
   3f548:	b960      	cbnz	r0, 3f564 <k_delayed_work_submit_to_queue+0x3c>
   3f54a:	4935      	ldr	r1, [pc, #212]	; (3f620 <k_delayed_work_submit_to_queue+0xf8>)
   3f54c:	235f      	movs	r3, #95	; 0x5f
   3f54e:	4a35      	ldr	r2, [pc, #212]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f550:	4835      	ldr	r0, [pc, #212]	; (3f628 <k_delayed_work_submit_to_queue+0x100>)
   3f552:	f008 f9ba 	bl	478ca <printk>
   3f556:	4835      	ldr	r0, [pc, #212]	; (3f62c <k_delayed_work_submit_to_queue+0x104>)
   3f558:	f008 f9b7 	bl	478ca <printk>
   3f55c:	215f      	movs	r1, #95	; 0x5f
   3f55e:	4831      	ldr	r0, [pc, #196]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f560:	f008 f9c0 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f564:	482d      	ldr	r0, [pc, #180]	; (3f61c <k_delayed_work_submit_to_queue+0xf4>)
   3f566:	f7ff fd9f 	bl	3f0a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3f56a:	69ec      	ldr	r4, [r5, #28]
   3f56c:	b1e4      	cbz	r4, 3f5a8 <k_delayed_work_submit_to_queue+0x80>
   3f56e:	42b4      	cmp	r4, r6
   3f570:	d150      	bne.n	3f614 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3f572:	4628      	mov	r0, r5
   3f574:	f7ff ff60 	bl	3f438 <work_cancel>
		if (err < 0) {
   3f578:	1e04      	subs	r4, r0, #0
   3f57a:	da17      	bge.n	3f5ac <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f57c:	4827      	ldr	r0, [pc, #156]	; (3f61c <k_delayed_work_submit_to_queue+0xf4>)
   3f57e:	f7ff fd83 	bl	3f088 <z_spin_unlock_valid>
   3f582:	b960      	cbnz	r0, 3f59e <k_delayed_work_submit_to_queue+0x76>
   3f584:	492a      	ldr	r1, [pc, #168]	; (3f630 <k_delayed_work_submit_to_queue+0x108>)
   3f586:	2372      	movs	r3, #114	; 0x72
   3f588:	4a26      	ldr	r2, [pc, #152]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f58a:	4827      	ldr	r0, [pc, #156]	; (3f628 <k_delayed_work_submit_to_queue+0x100>)
   3f58c:	f008 f99d 	bl	478ca <printk>
   3f590:	4828      	ldr	r0, [pc, #160]	; (3f634 <k_delayed_work_submit_to_queue+0x10c>)
   3f592:	f008 f99a 	bl	478ca <printk>
   3f596:	2172      	movs	r1, #114	; 0x72
   3f598:	4822      	ldr	r0, [pc, #136]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f59a:	f008 f9a3 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f59e:	f387 8811 	msr	BASEPRI, r7
   3f5a2:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3f5a6:	e01f      	b.n	3f5e8 <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   3f5a8:	2e00      	cmp	r6, #0
   3f5aa:	d0e2      	beq.n	3f572 <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   3f5ac:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3f5ae:	f1b8 0f00 	cmp.w	r8, #0
   3f5b2:	d11c      	bne.n	3f5ee <k_delayed_work_submit_to_queue+0xc6>
   3f5b4:	4819      	ldr	r0, [pc, #100]	; (3f61c <k_delayed_work_submit_to_queue+0xf4>)
   3f5b6:	f7ff fd67 	bl	3f088 <z_spin_unlock_valid>
   3f5ba:	b960      	cbnz	r0, 3f5d6 <k_delayed_work_submit_to_queue+0xae>
   3f5bc:	491c      	ldr	r1, [pc, #112]	; (3f630 <k_delayed_work_submit_to_queue+0x108>)
   3f5be:	2372      	movs	r3, #114	; 0x72
   3f5c0:	4a18      	ldr	r2, [pc, #96]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f5c2:	4819      	ldr	r0, [pc, #100]	; (3f628 <k_delayed_work_submit_to_queue+0x100>)
   3f5c4:	f008 f981 	bl	478ca <printk>
   3f5c8:	481a      	ldr	r0, [pc, #104]	; (3f634 <k_delayed_work_submit_to_queue+0x10c>)
   3f5ca:	f008 f97e 	bl	478ca <printk>
   3f5ce:	2172      	movs	r1, #114	; 0x72
   3f5d0:	4814      	ldr	r0, [pc, #80]	; (3f624 <k_delayed_work_submit_to_queue+0xfc>)
   3f5d2:	f008 f987 	bl	478e4 <assert_post_action>
   3f5d6:	f387 8811 	msr	BASEPRI, r7
   3f5da:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3f5de:	4629      	mov	r1, r5
   3f5e0:	4630      	mov	r0, r6
   3f5e2:	f00a fdec 	bl	4a1be <k_work_submit_to_queue>
		return 0;
   3f5e6:	2400      	movs	r4, #0
}
   3f5e8:	4620      	mov	r0, r4
   3f5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f5ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3f5f2:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f5f6:	2100      	movs	r1, #0
   3f5f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f5fc:	2300      	movs	r3, #0
   3f5fe:	fbc6 0108 	smlal	r0, r1, r6, r8
   3f602:	f7d9 fb8b 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3f606:	490c      	ldr	r1, [pc, #48]	; (3f638 <k_delayed_work_submit_to_queue+0x110>)
   3f608:	1c42      	adds	r2, r0, #1
   3f60a:	f105 000c 	add.w	r0, r5, #12
   3f60e:	f000 f89f 	bl	3f750 <z_add_timeout>
   3f612:	e7b3      	b.n	3f57c <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   3f614:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3f618:	e7b0      	b.n	3f57c <k_delayed_work_submit_to_queue+0x54>
   3f61a:	bf00      	nop
   3f61c:	2002a688 	.word	0x2002a688
   3f620:	0004d875 	.word	0x0004d875
   3f624:	0004d84e 	.word	0x0004d84e
   3f628:	0004ccf0 	.word	0x0004ccf0
   3f62c:	0004d88a 	.word	0x0004d88a
   3f630:	0004d89f 	.word	0x0004d89f
   3f634:	0004d8b6 	.word	0x0004d8b6
   3f638:	0004a1e7 	.word	0x0004a1e7

0003f63c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3f63c:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3f63e:	69c3      	ldr	r3, [r0, #28]
{
   3f640:	4604      	mov	r4, r0
	if (!work->work_q) {
   3f642:	2b00      	cmp	r3, #0
   3f644:	d036      	beq.n	3f6b4 <k_delayed_work_cancel+0x78>
	__asm__ volatile(
   3f646:	f04f 0320 	mov.w	r3, #32
   3f64a:	f3ef 8511 	mrs	r5, BASEPRI
   3f64e:	f383 8811 	msr	BASEPRI, r3
   3f652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f656:	4819      	ldr	r0, [pc, #100]	; (3f6bc <k_delayed_work_cancel+0x80>)
   3f658:	f7ff fd08 	bl	3f06c <z_spin_lock_valid>
   3f65c:	b960      	cbnz	r0, 3f678 <k_delayed_work_cancel+0x3c>
   3f65e:	4918      	ldr	r1, [pc, #96]	; (3f6c0 <k_delayed_work_cancel+0x84>)
   3f660:	235f      	movs	r3, #95	; 0x5f
   3f662:	4a18      	ldr	r2, [pc, #96]	; (3f6c4 <k_delayed_work_cancel+0x88>)
   3f664:	4818      	ldr	r0, [pc, #96]	; (3f6c8 <k_delayed_work_cancel+0x8c>)
   3f666:	f008 f930 	bl	478ca <printk>
   3f66a:	4818      	ldr	r0, [pc, #96]	; (3f6cc <k_delayed_work_cancel+0x90>)
   3f66c:	f008 f92d 	bl	478ca <printk>
   3f670:	215f      	movs	r1, #95	; 0x5f
   3f672:	4814      	ldr	r0, [pc, #80]	; (3f6c4 <k_delayed_work_cancel+0x88>)
   3f674:	f008 f936 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f678:	4810      	ldr	r0, [pc, #64]	; (3f6bc <k_delayed_work_cancel+0x80>)
   3f67a:	f7ff fd15 	bl	3f0a8 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3f67e:	4620      	mov	r0, r4
   3f680:	f7ff feda 	bl	3f438 <work_cancel>
   3f684:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f686:	480d      	ldr	r0, [pc, #52]	; (3f6bc <k_delayed_work_cancel+0x80>)
   3f688:	f7ff fcfe 	bl	3f088 <z_spin_unlock_valid>
   3f68c:	b960      	cbnz	r0, 3f6a8 <k_delayed_work_cancel+0x6c>
   3f68e:	4910      	ldr	r1, [pc, #64]	; (3f6d0 <k_delayed_work_cancel+0x94>)
   3f690:	2372      	movs	r3, #114	; 0x72
   3f692:	4a0c      	ldr	r2, [pc, #48]	; (3f6c4 <k_delayed_work_cancel+0x88>)
   3f694:	480c      	ldr	r0, [pc, #48]	; (3f6c8 <k_delayed_work_cancel+0x8c>)
   3f696:	f008 f918 	bl	478ca <printk>
   3f69a:	480e      	ldr	r0, [pc, #56]	; (3f6d4 <k_delayed_work_cancel+0x98>)
   3f69c:	f008 f915 	bl	478ca <printk>
   3f6a0:	2172      	movs	r1, #114	; 0x72
   3f6a2:	4808      	ldr	r0, [pc, #32]	; (3f6c4 <k_delayed_work_cancel+0x88>)
   3f6a4:	f008 f91e 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f6a8:	f385 8811 	msr	BASEPRI, r5
   3f6ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3f6b0:	4620      	mov	r0, r4
   3f6b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f6b4:	f06f 0415 	mvn.w	r4, #21
   3f6b8:	e7fa      	b.n	3f6b0 <k_delayed_work_cancel+0x74>
   3f6ba:	bf00      	nop
   3f6bc:	2002a688 	.word	0x2002a688
   3f6c0:	0004d875 	.word	0x0004d875
   3f6c4:	0004d84e 	.word	0x0004d84e
   3f6c8:	0004ccf0 	.word	0x0004ccf0
   3f6cc:	0004d88a 	.word	0x0004d88a
   3f6d0:	0004d89f 	.word	0x0004d89f
   3f6d4:	0004d8b6 	.word	0x0004d8b6

0003f6d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3f6d8:	4b03      	ldr	r3, [pc, #12]	; (3f6e8 <elapsed+0x10>)
   3f6da:	681b      	ldr	r3, [r3, #0]
   3f6dc:	b90b      	cbnz	r3, 3f6e2 <elapsed+0xa>
   3f6de:	f7e1 be8b 	b.w	213f8 <z_clock_elapsed>
}
   3f6e2:	2000      	movs	r0, #0
   3f6e4:	4770      	bx	lr
   3f6e6:	bf00      	nop
   3f6e8:	2002a68c 	.word	0x2002a68c

0003f6ec <next_timeout>:
	return list->head == list;
   3f6ec:	4b0b      	ldr	r3, [pc, #44]	; (3f71c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3f6ee:	b510      	push	{r4, lr}
   3f6f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3f6f2:	429c      	cmp	r4, r3
   3f6f4:	bf08      	it	eq
   3f6f6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3f6f8:	f7ff ffee 	bl	3f6d8 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3f6fc:	b154      	cbz	r4, 3f714 <next_timeout+0x28>
   3f6fe:	68a3      	ldr	r3, [r4, #8]
   3f700:	1a18      	subs	r0, r3, r0
   3f702:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3f706:	4b06      	ldr	r3, [pc, #24]	; (3f720 <next_timeout+0x34>)
   3f708:	691b      	ldr	r3, [r3, #16]
   3f70a:	b113      	cbz	r3, 3f712 <next_timeout+0x26>
   3f70c:	4298      	cmp	r0, r3
   3f70e:	bfa8      	it	ge
   3f710:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3f712:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3f714:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3f718:	e7f5      	b.n	3f706 <next_timeout+0x1a>
   3f71a:	bf00      	nop
   3f71c:	20031bb0 	.word	0x20031bb0
   3f720:	2002a578 	.word	0x2002a578

0003f724 <remove_timeout>:
{
   3f724:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3f726:	b140      	cbz	r0, 3f73a <remove_timeout+0x16>
   3f728:	4a08      	ldr	r2, [pc, #32]	; (3f74c <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   3f72a:	6852      	ldr	r2, [r2, #4]
   3f72c:	4290      	cmp	r0, r2
   3f72e:	d004      	beq.n	3f73a <remove_timeout+0x16>
	if (next(t) != NULL) {
   3f730:	b11b      	cbz	r3, 3f73a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3f732:	689a      	ldr	r2, [r3, #8]
   3f734:	6881      	ldr	r1, [r0, #8]
   3f736:	440a      	add	r2, r1
   3f738:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3f73a:	6842      	ldr	r2, [r0, #4]
   3f73c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3f73e:	6803      	ldr	r3, [r0, #0]
   3f740:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3f742:	2300      	movs	r3, #0
	node->prev = NULL;
   3f744:	e9c0 3300 	strd	r3, r3, [r0]
}
   3f748:	4770      	bx	lr
   3f74a:	bf00      	nop
   3f74c:	20031bb0 	.word	0x20031bb0

0003f750 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3f750:	6803      	ldr	r3, [r0, #0]
{
   3f752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f756:	4604      	mov	r4, r0
   3f758:	460e      	mov	r6, r1
   3f75a:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3f75c:	b163      	cbz	r3, 3f778 <z_add_timeout+0x28>
   3f75e:	4943      	ldr	r1, [pc, #268]	; (3f86c <z_add_timeout+0x11c>)
   3f760:	2356      	movs	r3, #86	; 0x56
   3f762:	4a43      	ldr	r2, [pc, #268]	; (3f870 <z_add_timeout+0x120>)
   3f764:	4843      	ldr	r0, [pc, #268]	; (3f874 <z_add_timeout+0x124>)
   3f766:	f008 f8b0 	bl	478ca <printk>
   3f76a:	4843      	ldr	r0, [pc, #268]	; (3f878 <z_add_timeout+0x128>)
   3f76c:	f008 f8ad 	bl	478ca <printk>
   3f770:	2156      	movs	r1, #86	; 0x56
   3f772:	483f      	ldr	r0, [pc, #252]	; (3f870 <z_add_timeout+0x120>)
   3f774:	f008 f8b6 	bl	478e4 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3f778:	2d01      	cmp	r5, #1
   3f77a:	bfb8      	it	lt
   3f77c:	2501      	movlt	r5, #1
	to->fn = fn;
   3f77e:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3f780:	f04f 0320 	mov.w	r3, #32
   3f784:	f3ef 8811 	mrs	r8, BASEPRI
   3f788:	f383 8811 	msr	BASEPRI, r3
   3f78c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f790:	483a      	ldr	r0, [pc, #232]	; (3f87c <z_add_timeout+0x12c>)
   3f792:	f7ff fc6b 	bl	3f06c <z_spin_lock_valid>
   3f796:	b960      	cbnz	r0, 3f7b2 <z_add_timeout+0x62>
   3f798:	4939      	ldr	r1, [pc, #228]	; (3f880 <z_add_timeout+0x130>)
   3f79a:	235f      	movs	r3, #95	; 0x5f
   3f79c:	4a39      	ldr	r2, [pc, #228]	; (3f884 <z_add_timeout+0x134>)
   3f79e:	4835      	ldr	r0, [pc, #212]	; (3f874 <z_add_timeout+0x124>)
   3f7a0:	f008 f893 	bl	478ca <printk>
   3f7a4:	4838      	ldr	r0, [pc, #224]	; (3f888 <z_add_timeout+0x138>)
   3f7a6:	f008 f890 	bl	478ca <printk>
   3f7aa:	215f      	movs	r1, #95	; 0x5f
   3f7ac:	4835      	ldr	r0, [pc, #212]	; (3f884 <z_add_timeout+0x134>)
   3f7ae:	f008 f899 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f7b2:	4832      	ldr	r0, [pc, #200]	; (3f87c <z_add_timeout+0x12c>)
   3f7b4:	f7ff fc78 	bl	3f0a8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3f7b8:	f7ff ff8e 	bl	3f6d8 <elapsed>
	return list->head == list;
   3f7bc:	4e33      	ldr	r6, [pc, #204]	; (3f88c <z_add_timeout+0x13c>)
   3f7be:	4428      	add	r0, r5
   3f7c0:	6835      	ldr	r5, [r6, #0]
   3f7c2:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3f7c4:	42b5      	cmp	r5, r6
   3f7c6:	d005      	beq.n	3f7d4 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3f7c8:	4f29      	ldr	r7, [pc, #164]	; (3f870 <z_add_timeout+0x120>)
   3f7ca:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 3f898 <z_add_timeout+0x148>
   3f7ce:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 3f874 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   3f7d2:	b935      	cbnz	r5, 3f7e2 <z_add_timeout+0x92>
	node->prev = list->tail;
   3f7d4:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   3f7d6:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   3f7d8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3f7da:	6873      	ldr	r3, [r6, #4]
   3f7dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3f7de:	6074      	str	r4, [r6, #4]
   3f7e0:	e01b      	b.n	3f81a <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   3f7e2:	68ab      	ldr	r3, [r5, #8]
   3f7e4:	2b00      	cmp	r3, #0
   3f7e6:	da0c      	bge.n	3f802 <z_add_timeout+0xb2>
   3f7e8:	4649      	mov	r1, r9
   3f7ea:	235f      	movs	r3, #95	; 0x5f
   3f7ec:	463a      	mov	r2, r7
   3f7ee:	4650      	mov	r0, sl
   3f7f0:	f008 f86b 	bl	478ca <printk>
   3f7f4:	4820      	ldr	r0, [pc, #128]	; (3f878 <z_add_timeout+0x128>)
   3f7f6:	f008 f868 	bl	478ca <printk>
   3f7fa:	215f      	movs	r1, #95	; 0x5f
   3f7fc:	4638      	mov	r0, r7
   3f7fe:	f008 f871 	bl	478e4 <assert_post_action>

			if (t->dticks > to->dticks) {
   3f802:	68aa      	ldr	r2, [r5, #8]
   3f804:	68a3      	ldr	r3, [r4, #8]
   3f806:	429a      	cmp	r2, r3
   3f808:	dd28      	ble.n	3f85c <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   3f80a:	1ad3      	subs	r3, r2, r3
   3f80c:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   3f80e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   3f810:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   3f814:	686b      	ldr	r3, [r5, #4]
   3f816:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3f818:	606c      	str	r4, [r5, #4]
	return list->head == list;
   3f81a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3f81c:	42b3      	cmp	r3, r6
   3f81e:	d006      	beq.n	3f82e <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3f820:	429c      	cmp	r4, r3
   3f822:	d104      	bne.n	3f82e <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   3f824:	f7ff ff62 	bl	3f6ec <next_timeout>
   3f828:	2100      	movs	r1, #0
   3f82a:	f7e1 fd63 	bl	212f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f82e:	4813      	ldr	r0, [pc, #76]	; (3f87c <z_add_timeout+0x12c>)
   3f830:	f7ff fc2a 	bl	3f088 <z_spin_unlock_valid>
   3f834:	b960      	cbnz	r0, 3f850 <z_add_timeout+0x100>
   3f836:	4916      	ldr	r1, [pc, #88]	; (3f890 <z_add_timeout+0x140>)
   3f838:	2372      	movs	r3, #114	; 0x72
   3f83a:	4a12      	ldr	r2, [pc, #72]	; (3f884 <z_add_timeout+0x134>)
   3f83c:	480d      	ldr	r0, [pc, #52]	; (3f874 <z_add_timeout+0x124>)
   3f83e:	f008 f844 	bl	478ca <printk>
   3f842:	4814      	ldr	r0, [pc, #80]	; (3f894 <z_add_timeout+0x144>)
   3f844:	f008 f841 	bl	478ca <printk>
   3f848:	2172      	movs	r1, #114	; 0x72
   3f84a:	480e      	ldr	r0, [pc, #56]	; (3f884 <z_add_timeout+0x134>)
   3f84c:	f008 f84a 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f850:	f388 8811 	msr	BASEPRI, r8
   3f854:	f3bf 8f6f 	isb	sy
		}
	}
}
   3f858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3f85c:	1a9b      	subs	r3, r3, r2
   3f85e:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3f860:	6873      	ldr	r3, [r6, #4]
   3f862:	42ab      	cmp	r3, r5
   3f864:	d0b6      	beq.n	3f7d4 <z_add_timeout+0x84>
   3f866:	682d      	ldr	r5, [r5, #0]
   3f868:	e7b3      	b.n	3f7d2 <z_add_timeout+0x82>
   3f86a:	bf00      	nop
   3f86c:	00052ced 	.word	0x00052ced
   3f870:	00052cc8 	.word	0x00052cc8
   3f874:	0004ccf0 	.word	0x0004ccf0
   3f878:	0005294a 	.word	0x0005294a
   3f87c:	2002a690 	.word	0x2002a690
   3f880:	0004d875 	.word	0x0004d875
   3f884:	0004d84e 	.word	0x0004d84e
   3f888:	0004d88a 	.word	0x0004d88a
   3f88c:	20031bb0 	.word	0x20031bb0
   3f890:	0004d89f 	.word	0x0004d89f
   3f894:	0004d8b6 	.word	0x0004d8b6
   3f898:	00052d0d 	.word	0x00052d0d

0003f89c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3f89c:	b538      	push	{r3, r4, r5, lr}
   3f89e:	4604      	mov	r4, r0
	__asm__ volatile(
   3f8a0:	f04f 0320 	mov.w	r3, #32
   3f8a4:	f3ef 8511 	mrs	r5, BASEPRI
   3f8a8:	f383 8811 	msr	BASEPRI, r3
   3f8ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f8b0:	4819      	ldr	r0, [pc, #100]	; (3f918 <z_abort_timeout+0x7c>)
   3f8b2:	f7ff fbdb 	bl	3f06c <z_spin_lock_valid>
   3f8b6:	b960      	cbnz	r0, 3f8d2 <z_abort_timeout+0x36>
   3f8b8:	4918      	ldr	r1, [pc, #96]	; (3f91c <z_abort_timeout+0x80>)
   3f8ba:	235f      	movs	r3, #95	; 0x5f
   3f8bc:	4a18      	ldr	r2, [pc, #96]	; (3f920 <z_abort_timeout+0x84>)
   3f8be:	4819      	ldr	r0, [pc, #100]	; (3f924 <z_abort_timeout+0x88>)
   3f8c0:	f008 f803 	bl	478ca <printk>
   3f8c4:	4818      	ldr	r0, [pc, #96]	; (3f928 <z_abort_timeout+0x8c>)
   3f8c6:	f008 f800 	bl	478ca <printk>
   3f8ca:	215f      	movs	r1, #95	; 0x5f
   3f8cc:	4814      	ldr	r0, [pc, #80]	; (3f920 <z_abort_timeout+0x84>)
   3f8ce:	f008 f809 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f8d2:	4811      	ldr	r0, [pc, #68]	; (3f918 <z_abort_timeout+0x7c>)
   3f8d4:	f7ff fbe8 	bl	3f0a8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3f8d8:	6823      	ldr	r3, [r4, #0]
   3f8da:	b1d3      	cbz	r3, 3f912 <z_abort_timeout+0x76>
			remove_timeout(to);
   3f8dc:	4620      	mov	r0, r4
   3f8de:	f7ff ff21 	bl	3f724 <remove_timeout>
			ret = 0;
   3f8e2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f8e4:	480c      	ldr	r0, [pc, #48]	; (3f918 <z_abort_timeout+0x7c>)
   3f8e6:	f7ff fbcf 	bl	3f088 <z_spin_unlock_valid>
   3f8ea:	b960      	cbnz	r0, 3f906 <z_abort_timeout+0x6a>
   3f8ec:	490f      	ldr	r1, [pc, #60]	; (3f92c <z_abort_timeout+0x90>)
   3f8ee:	2372      	movs	r3, #114	; 0x72
   3f8f0:	4a0b      	ldr	r2, [pc, #44]	; (3f920 <z_abort_timeout+0x84>)
   3f8f2:	480c      	ldr	r0, [pc, #48]	; (3f924 <z_abort_timeout+0x88>)
   3f8f4:	f007 ffe9 	bl	478ca <printk>
   3f8f8:	480d      	ldr	r0, [pc, #52]	; (3f930 <z_abort_timeout+0x94>)
   3f8fa:	f007 ffe6 	bl	478ca <printk>
   3f8fe:	2172      	movs	r1, #114	; 0x72
   3f900:	4807      	ldr	r0, [pc, #28]	; (3f920 <z_abort_timeout+0x84>)
   3f902:	f007 ffef 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f906:	f385 8811 	msr	BASEPRI, r5
   3f90a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3f90e:	4620      	mov	r0, r4
   3f910:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3f912:	f06f 0415 	mvn.w	r4, #21
   3f916:	e7e5      	b.n	3f8e4 <z_abort_timeout+0x48>
   3f918:	2002a690 	.word	0x2002a690
   3f91c:	0004d875 	.word	0x0004d875
   3f920:	0004d84e 	.word	0x0004d84e
   3f924:	0004ccf0 	.word	0x0004ccf0
   3f928:	0004d88a 	.word	0x0004d88a
   3f92c:	0004d89f 	.word	0x0004d89f
   3f930:	0004d8b6 	.word	0x0004d8b6

0003f934 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   3f934:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3f936:	f04f 0320 	mov.w	r3, #32
   3f93a:	f3ef 8511 	mrs	r5, BASEPRI
   3f93e:	f383 8811 	msr	BASEPRI, r3
   3f942:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f946:	4817      	ldr	r0, [pc, #92]	; (3f9a4 <z_get_next_timeout_expiry+0x70>)
   3f948:	f7ff fb90 	bl	3f06c <z_spin_lock_valid>
   3f94c:	b960      	cbnz	r0, 3f968 <z_get_next_timeout_expiry+0x34>
   3f94e:	4916      	ldr	r1, [pc, #88]	; (3f9a8 <z_get_next_timeout_expiry+0x74>)
   3f950:	235f      	movs	r3, #95	; 0x5f
   3f952:	4a16      	ldr	r2, [pc, #88]	; (3f9ac <z_get_next_timeout_expiry+0x78>)
   3f954:	4816      	ldr	r0, [pc, #88]	; (3f9b0 <z_get_next_timeout_expiry+0x7c>)
   3f956:	f007 ffb8 	bl	478ca <printk>
   3f95a:	4816      	ldr	r0, [pc, #88]	; (3f9b4 <z_get_next_timeout_expiry+0x80>)
   3f95c:	f007 ffb5 	bl	478ca <printk>
   3f960:	215f      	movs	r1, #95	; 0x5f
   3f962:	4812      	ldr	r0, [pc, #72]	; (3f9ac <z_get_next_timeout_expiry+0x78>)
   3f964:	f007 ffbe 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f968:	480e      	ldr	r0, [pc, #56]	; (3f9a4 <z_get_next_timeout_expiry+0x70>)
   3f96a:	f7ff fb9d 	bl	3f0a8 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3f96e:	f7ff febd 	bl	3f6ec <next_timeout>
   3f972:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3f974:	480b      	ldr	r0, [pc, #44]	; (3f9a4 <z_get_next_timeout_expiry+0x70>)
   3f976:	f7ff fb87 	bl	3f088 <z_spin_unlock_valid>
   3f97a:	b960      	cbnz	r0, 3f996 <z_get_next_timeout_expiry+0x62>
   3f97c:	490e      	ldr	r1, [pc, #56]	; (3f9b8 <z_get_next_timeout_expiry+0x84>)
   3f97e:	2372      	movs	r3, #114	; 0x72
   3f980:	4a0a      	ldr	r2, [pc, #40]	; (3f9ac <z_get_next_timeout_expiry+0x78>)
   3f982:	480b      	ldr	r0, [pc, #44]	; (3f9b0 <z_get_next_timeout_expiry+0x7c>)
   3f984:	f007 ffa1 	bl	478ca <printk>
   3f988:	480c      	ldr	r0, [pc, #48]	; (3f9bc <z_get_next_timeout_expiry+0x88>)
   3f98a:	f007 ff9e 	bl	478ca <printk>
   3f98e:	2172      	movs	r1, #114	; 0x72
   3f990:	4806      	ldr	r0, [pc, #24]	; (3f9ac <z_get_next_timeout_expiry+0x78>)
   3f992:	f007 ffa7 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3f996:	f385 8811 	msr	BASEPRI, r5
   3f99a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3f99e:	4620      	mov	r0, r4
   3f9a0:	bd38      	pop	{r3, r4, r5, pc}
   3f9a2:	bf00      	nop
   3f9a4:	2002a690 	.word	0x2002a690
   3f9a8:	0004d875 	.word	0x0004d875
   3f9ac:	0004d84e 	.word	0x0004d84e
   3f9b0:	0004ccf0 	.word	0x0004ccf0
   3f9b4:	0004d88a 	.word	0x0004d88a
   3f9b8:	0004d89f 	.word	0x0004d89f
   3f9bc:	0004d8b6 	.word	0x0004d8b6

0003f9c0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3f9c0:	b570      	push	{r4, r5, r6, lr}
   3f9c2:	4604      	mov	r4, r0
   3f9c4:	460e      	mov	r6, r1
	__asm__ volatile(
   3f9c6:	f04f 0320 	mov.w	r3, #32
   3f9ca:	f3ef 8511 	mrs	r5, BASEPRI
   3f9ce:	f383 8811 	msr	BASEPRI, r3
   3f9d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3f9d6:	481a      	ldr	r0, [pc, #104]	; (3fa40 <z_set_timeout_expiry+0x80>)
   3f9d8:	f7ff fb48 	bl	3f06c <z_spin_lock_valid>
   3f9dc:	b960      	cbnz	r0, 3f9f8 <z_set_timeout_expiry+0x38>
   3f9de:	4919      	ldr	r1, [pc, #100]	; (3fa44 <z_set_timeout_expiry+0x84>)
   3f9e0:	235f      	movs	r3, #95	; 0x5f
   3f9e2:	4a19      	ldr	r2, [pc, #100]	; (3fa48 <z_set_timeout_expiry+0x88>)
   3f9e4:	4819      	ldr	r0, [pc, #100]	; (3fa4c <z_set_timeout_expiry+0x8c>)
   3f9e6:	f007 ff70 	bl	478ca <printk>
   3f9ea:	4819      	ldr	r0, [pc, #100]	; (3fa50 <z_set_timeout_expiry+0x90>)
   3f9ec:	f007 ff6d 	bl	478ca <printk>
   3f9f0:	215f      	movs	r1, #95	; 0x5f
   3f9f2:	4815      	ldr	r0, [pc, #84]	; (3fa48 <z_set_timeout_expiry+0x88>)
   3f9f4:	f007 ff76 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f9f8:	4811      	ldr	r0, [pc, #68]	; (3fa40 <z_set_timeout_expiry+0x80>)
   3f9fa:	f7ff fb55 	bl	3f0a8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3f9fe:	f7ff fe75 	bl	3f6ec <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3fa02:	2801      	cmp	r0, #1
   3fa04:	dd05      	ble.n	3fa12 <z_set_timeout_expiry+0x52>
   3fa06:	42a0      	cmp	r0, r4
   3fa08:	dd03      	ble.n	3fa12 <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   3fa0a:	4631      	mov	r1, r6
   3fa0c:	4620      	mov	r0, r4
   3fa0e:	f7e1 fc71 	bl	212f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3fa12:	480b      	ldr	r0, [pc, #44]	; (3fa40 <z_set_timeout_expiry+0x80>)
   3fa14:	f7ff fb38 	bl	3f088 <z_spin_unlock_valid>
   3fa18:	b960      	cbnz	r0, 3fa34 <z_set_timeout_expiry+0x74>
   3fa1a:	490e      	ldr	r1, [pc, #56]	; (3fa54 <z_set_timeout_expiry+0x94>)
   3fa1c:	2372      	movs	r3, #114	; 0x72
   3fa1e:	4a0a      	ldr	r2, [pc, #40]	; (3fa48 <z_set_timeout_expiry+0x88>)
   3fa20:	480a      	ldr	r0, [pc, #40]	; (3fa4c <z_set_timeout_expiry+0x8c>)
   3fa22:	f007 ff52 	bl	478ca <printk>
   3fa26:	480c      	ldr	r0, [pc, #48]	; (3fa58 <z_set_timeout_expiry+0x98>)
   3fa28:	f007 ff4f 	bl	478ca <printk>
   3fa2c:	2172      	movs	r1, #114	; 0x72
   3fa2e:	4806      	ldr	r0, [pc, #24]	; (3fa48 <z_set_timeout_expiry+0x88>)
   3fa30:	f007 ff58 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3fa34:	f385 8811 	msr	BASEPRI, r5
   3fa38:	f3bf 8f6f 	isb	sy
		}
	}
}
   3fa3c:	bd70      	pop	{r4, r5, r6, pc}
   3fa3e:	bf00      	nop
   3fa40:	2002a690 	.word	0x2002a690
   3fa44:	0004d875 	.word	0x0004d875
   3fa48:	0004d84e 	.word	0x0004d84e
   3fa4c:	0004ccf0 	.word	0x0004ccf0
   3fa50:	0004d88a 	.word	0x0004d88a
   3fa54:	0004d89f 	.word	0x0004d89f
   3fa58:	0004d8b6 	.word	0x0004d8b6

0003fa5c <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3fa5c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3fa60:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3fa62:	f7fe fdcd 	bl	3e600 <z_time_slice>
	__asm__ volatile(
   3fa66:	f04f 0320 	mov.w	r3, #32
   3fa6a:	f3ef 8511 	mrs	r5, BASEPRI
   3fa6e:	f383 8811 	msr	BASEPRI, r3
   3fa72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3fa76:	4846      	ldr	r0, [pc, #280]	; (3fb90 <z_clock_announce+0x134>)
   3fa78:	f7ff faf8 	bl	3f06c <z_spin_lock_valid>
   3fa7c:	b960      	cbnz	r0, 3fa98 <z_clock_announce+0x3c>
   3fa7e:	4945      	ldr	r1, [pc, #276]	; (3fb94 <z_clock_announce+0x138>)
   3fa80:	235f      	movs	r3, #95	; 0x5f
   3fa82:	4a45      	ldr	r2, [pc, #276]	; (3fb98 <z_clock_announce+0x13c>)
   3fa84:	4845      	ldr	r0, [pc, #276]	; (3fb9c <z_clock_announce+0x140>)
   3fa86:	f007 ff20 	bl	478ca <printk>
   3fa8a:	4845      	ldr	r0, [pc, #276]	; (3fba0 <z_clock_announce+0x144>)
   3fa8c:	f007 ff1d 	bl	478ca <printk>
   3fa90:	215f      	movs	r1, #95	; 0x5f
   3fa92:	4841      	ldr	r0, [pc, #260]	; (3fb98 <z_clock_announce+0x13c>)
   3fa94:	f007 ff26 	bl	478e4 <assert_post_action>
   3fa98:	4f42      	ldr	r7, [pc, #264]	; (3fba4 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3fa9a:	4e43      	ldr	r6, [pc, #268]	; (3fba8 <z_clock_announce+0x14c>)
   3fa9c:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   3fa9e:	483c      	ldr	r0, [pc, #240]	; (3fb90 <z_clock_announce+0x134>)
	return list->head == list;
   3faa0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 3fbb4 <z_clock_announce+0x158>
   3faa4:	f7ff fb00 	bl	3f0a8 <z_spin_lock_set_owner>
   3faa8:	6034      	str	r4, [r6, #0]
   3faaa:	f8d8 4000 	ldr.w	r4, [r8]
   3faae:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3fab0:	4544      	cmp	r4, r8
   3fab2:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3fab6:	d005      	beq.n	3fac4 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3fab8:	b124      	cbz	r4, 3fac4 <z_clock_announce+0x68>
   3faba:	68a3      	ldr	r3, [r4, #8]
   3fabc:	4293      	cmp	r3, r2
   3fabe:	dd25      	ble.n	3fb0c <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3fac0:	1a9b      	subs	r3, r3, r2
   3fac2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3fac4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3fac6:	eb1b 0002 	adds.w	r0, fp, r2
   3faca:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3face:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3fad2:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3fad4:	f7ff fe0a 	bl	3f6ec <next_timeout>
   3fad8:	4621      	mov	r1, r4
   3fada:	f7e1 fc0b 	bl	212f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3fade:	482c      	ldr	r0, [pc, #176]	; (3fb90 <z_clock_announce+0x134>)
   3fae0:	f7ff fad2 	bl	3f088 <z_spin_unlock_valid>
   3fae4:	b960      	cbnz	r0, 3fb00 <z_clock_announce+0xa4>
   3fae6:	4931      	ldr	r1, [pc, #196]	; (3fbac <z_clock_announce+0x150>)
   3fae8:	2372      	movs	r3, #114	; 0x72
   3faea:	4a2b      	ldr	r2, [pc, #172]	; (3fb98 <z_clock_announce+0x13c>)
   3faec:	482b      	ldr	r0, [pc, #172]	; (3fb9c <z_clock_announce+0x140>)
   3faee:	f007 feec 	bl	478ca <printk>
   3faf2:	482f      	ldr	r0, [pc, #188]	; (3fbb0 <z_clock_announce+0x154>)
   3faf4:	f007 fee9 	bl	478ca <printk>
   3faf8:	2172      	movs	r1, #114	; 0x72
   3fafa:	4827      	ldr	r0, [pc, #156]	; (3fb98 <z_clock_announce+0x13c>)
   3fafc:	f007 fef2 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3fb00:	f385 8811 	msr	BASEPRI, r5
   3fb04:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3fb08:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3fb0c:	eb1b 0003 	adds.w	r0, fp, r3
   3fb10:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3fb14:	1ad3      	subs	r3, r2, r3
   3fb16:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3fb18:	2300      	movs	r3, #0
		curr_tick += dt;
   3fb1a:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3fb1e:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3fb20:	4620      	mov	r0, r4
   3fb22:	f7ff fdff 	bl	3f724 <remove_timeout>
   3fb26:	481a      	ldr	r0, [pc, #104]	; (3fb90 <z_clock_announce+0x134>)
   3fb28:	f7ff faae 	bl	3f088 <z_spin_unlock_valid>
   3fb2c:	b960      	cbnz	r0, 3fb48 <z_clock_announce+0xec>
   3fb2e:	491f      	ldr	r1, [pc, #124]	; (3fbac <z_clock_announce+0x150>)
   3fb30:	2372      	movs	r3, #114	; 0x72
   3fb32:	4a19      	ldr	r2, [pc, #100]	; (3fb98 <z_clock_announce+0x13c>)
   3fb34:	4819      	ldr	r0, [pc, #100]	; (3fb9c <z_clock_announce+0x140>)
   3fb36:	f007 fec8 	bl	478ca <printk>
   3fb3a:	481d      	ldr	r0, [pc, #116]	; (3fbb0 <z_clock_announce+0x154>)
   3fb3c:	f007 fec5 	bl	478ca <printk>
   3fb40:	2172      	movs	r1, #114	; 0x72
   3fb42:	4815      	ldr	r0, [pc, #84]	; (3fb98 <z_clock_announce+0x13c>)
   3fb44:	f007 fece 	bl	478e4 <assert_post_action>
   3fb48:	f385 8811 	msr	BASEPRI, r5
   3fb4c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3fb50:	68e3      	ldr	r3, [r4, #12]
   3fb52:	4620      	mov	r0, r4
   3fb54:	4798      	blx	r3
	__asm__ volatile(
   3fb56:	f04f 0320 	mov.w	r3, #32
   3fb5a:	f3ef 8511 	mrs	r5, BASEPRI
   3fb5e:	f383 8811 	msr	BASEPRI, r3
   3fb62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3fb66:	480a      	ldr	r0, [pc, #40]	; (3fb90 <z_clock_announce+0x134>)
   3fb68:	f7ff fa80 	bl	3f06c <z_spin_lock_valid>
   3fb6c:	b960      	cbnz	r0, 3fb88 <z_clock_announce+0x12c>
   3fb6e:	4909      	ldr	r1, [pc, #36]	; (3fb94 <z_clock_announce+0x138>)
   3fb70:	235f      	movs	r3, #95	; 0x5f
   3fb72:	4a09      	ldr	r2, [pc, #36]	; (3fb98 <z_clock_announce+0x13c>)
   3fb74:	4809      	ldr	r0, [pc, #36]	; (3fb9c <z_clock_announce+0x140>)
   3fb76:	f007 fea8 	bl	478ca <printk>
   3fb7a:	4809      	ldr	r0, [pc, #36]	; (3fba0 <z_clock_announce+0x144>)
   3fb7c:	f007 fea5 	bl	478ca <printk>
   3fb80:	215f      	movs	r1, #95	; 0x5f
   3fb82:	4805      	ldr	r0, [pc, #20]	; (3fb98 <z_clock_announce+0x13c>)
   3fb84:	f007 feae 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fb88:	4801      	ldr	r0, [pc, #4]	; (3fb90 <z_clock_announce+0x134>)
   3fb8a:	f7ff fa8d 	bl	3f0a8 <z_spin_lock_set_owner>
   3fb8e:	e78c      	b.n	3faaa <z_clock_announce+0x4e>
   3fb90:	2002a690 	.word	0x2002a690
   3fb94:	0004d875 	.word	0x0004d875
   3fb98:	0004d84e 	.word	0x0004d84e
   3fb9c:	0004ccf0 	.word	0x0004ccf0
   3fba0:	0004d88a 	.word	0x0004d88a
   3fba4:	20023a08 	.word	0x20023a08
   3fba8:	2002a68c 	.word	0x2002a68c
   3fbac:	0004d89f 	.word	0x0004d89f
   3fbb0:	0004d8b6 	.word	0x0004d8b6
   3fbb4:	20031bb0 	.word	0x20031bb0

0003fbb8 <z_tick_get>:

s64_t z_tick_get(void)
{
   3fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fbbc:	f04f 0320 	mov.w	r3, #32
   3fbc0:	f3ef 8611 	mrs	r6, BASEPRI
   3fbc4:	f383 8811 	msr	BASEPRI, r3
   3fbc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3fbcc:	481a      	ldr	r0, [pc, #104]	; (3fc38 <z_tick_get+0x80>)
   3fbce:	f7ff fa4d 	bl	3f06c <z_spin_lock_valid>
   3fbd2:	b960      	cbnz	r0, 3fbee <z_tick_get+0x36>
   3fbd4:	4919      	ldr	r1, [pc, #100]	; (3fc3c <z_tick_get+0x84>)
   3fbd6:	235f      	movs	r3, #95	; 0x5f
   3fbd8:	4a19      	ldr	r2, [pc, #100]	; (3fc40 <z_tick_get+0x88>)
   3fbda:	481a      	ldr	r0, [pc, #104]	; (3fc44 <z_tick_get+0x8c>)
   3fbdc:	f007 fe75 	bl	478ca <printk>
   3fbe0:	4819      	ldr	r0, [pc, #100]	; (3fc48 <z_tick_get+0x90>)
   3fbe2:	f007 fe72 	bl	478ca <printk>
   3fbe6:	215f      	movs	r1, #95	; 0x5f
   3fbe8:	4815      	ldr	r0, [pc, #84]	; (3fc40 <z_tick_get+0x88>)
   3fbea:	f007 fe7b 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fbee:	4812      	ldr	r0, [pc, #72]	; (3fc38 <z_tick_get+0x80>)
   3fbf0:	f7ff fa5a 	bl	3f0a8 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3fbf4:	f7e1 fc00 	bl	213f8 <z_clock_elapsed>
   3fbf8:	4b14      	ldr	r3, [pc, #80]	; (3fc4c <z_tick_get+0x94>)
   3fbfa:	e9d3 4500 	ldrd	r4, r5, [r3]
   3fbfe:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3fc00:	480d      	ldr	r0, [pc, #52]	; (3fc38 <z_tick_get+0x80>)
   3fc02:	f145 0800 	adc.w	r8, r5, #0
   3fc06:	f7ff fa3f 	bl	3f088 <z_spin_unlock_valid>
   3fc0a:	b960      	cbnz	r0, 3fc26 <z_tick_get+0x6e>
   3fc0c:	4910      	ldr	r1, [pc, #64]	; (3fc50 <z_tick_get+0x98>)
   3fc0e:	2372      	movs	r3, #114	; 0x72
   3fc10:	4a0b      	ldr	r2, [pc, #44]	; (3fc40 <z_tick_get+0x88>)
   3fc12:	480c      	ldr	r0, [pc, #48]	; (3fc44 <z_tick_get+0x8c>)
   3fc14:	f007 fe59 	bl	478ca <printk>
   3fc18:	480e      	ldr	r0, [pc, #56]	; (3fc54 <z_tick_get+0x9c>)
   3fc1a:	f007 fe56 	bl	478ca <printk>
   3fc1e:	2172      	movs	r1, #114	; 0x72
   3fc20:	4807      	ldr	r0, [pc, #28]	; (3fc40 <z_tick_get+0x88>)
   3fc22:	f007 fe5f 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3fc26:	f386 8811 	msr	BASEPRI, r6
   3fc2a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3fc2e:	4638      	mov	r0, r7
   3fc30:	4641      	mov	r1, r8
   3fc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3fc36:	bf00      	nop
   3fc38:	2002a690 	.word	0x2002a690
   3fc3c:	0004d875 	.word	0x0004d875
   3fc40:	0004d84e 	.word	0x0004d84e
   3fc44:	0004ccf0 	.word	0x0004ccf0
   3fc48:	0004d88a 	.word	0x0004d88a
   3fc4c:	20023a08 	.word	0x20023a08
   3fc50:	0004d89f 	.word	0x0004d89f
   3fc54:	0004d8b6 	.word	0x0004d8b6

0003fc58 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3fc58:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3fc5a:	6883      	ldr	r3, [r0, #8]
{
   3fc5c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3fc5e:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3fc60:	b964      	cbnz	r4, 3fc7c <k_poll_poller_cb+0x24>
   3fc62:	4915      	ldr	r1, [pc, #84]	; (3fcb8 <k_poll_poller_cb+0x60>)
   3fc64:	23e0      	movs	r3, #224	; 0xe0
   3fc66:	4a15      	ldr	r2, [pc, #84]	; (3fcbc <k_poll_poller_cb+0x64>)
   3fc68:	4815      	ldr	r0, [pc, #84]	; (3fcc0 <k_poll_poller_cb+0x68>)
   3fc6a:	f007 fe2e 	bl	478ca <printk>
   3fc6e:	4815      	ldr	r0, [pc, #84]	; (3fcc4 <k_poll_poller_cb+0x6c>)
   3fc70:	f007 fe2b 	bl	478ca <printk>
   3fc74:	21e0      	movs	r1, #224	; 0xe0
   3fc76:	4811      	ldr	r0, [pc, #68]	; (3fcbc <k_poll_poller_cb+0x64>)
   3fc78:	f007 fe34 	bl	478e4 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3fc7c:	7b63      	ldrb	r3, [r4, #13]
   3fc7e:	079a      	lsls	r2, r3, #30
   3fc80:	d401      	bmi.n	3fc86 <k_poll_poller_cb+0x2e>
		return 0;
   3fc82:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3fc84:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3fc86:	6a23      	ldr	r3, [r4, #32]
   3fc88:	3302      	adds	r3, #2
   3fc8a:	d012      	beq.n	3fcb2 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3fc8c:	4620      	mov	r0, r4
   3fc8e:	f7fe fa37 	bl	3e100 <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   3fc92:	2d08      	cmp	r5, #8
   3fc94:	bf0c      	ite	eq
   3fc96:	f06f 0303 	mvneq.w	r3, #3
   3fc9a:	2300      	movne	r3, #0
   3fc9c:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3fc9e:	7b63      	ldrb	r3, [r4, #13]
   3fca0:	06db      	lsls	r3, r3, #27
   3fca2:	d1ee      	bne.n	3fc82 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3fca4:	69a5      	ldr	r5, [r4, #24]
   3fca6:	2d00      	cmp	r5, #0
   3fca8:	d1eb      	bne.n	3fc82 <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3fcaa:	4620      	mov	r0, r4
   3fcac:	f7fe fb34 	bl	3e318 <z_add_thread_to_ready_q>
   3fcb0:	e7e7      	b.n	3fc82 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3fcb2:	f06f 000a 	mvn.w	r0, #10
   3fcb6:	e7e5      	b.n	3fc84 <k_poll_poller_cb+0x2c>
   3fcb8:	00052e8b 	.word	0x00052e8b
   3fcbc:	00052e69 	.word	0x00052e69
   3fcc0:	0004ccf0 	.word	0x0004ccf0
   3fcc4:	00052ea1 	.word	0x00052ea1

0003fcc8 <clear_event_registrations>:
{
   3fcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3fccc:	2414      	movs	r4, #20
   3fcce:	4680      	mov	r8, r0
   3fcd0:	4617      	mov	r7, r2
   3fcd2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3fcd6:	4d48      	ldr	r5, [pc, #288]	; (3fdf8 <clear_event_registrations+0x130>)
   3fcd8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3fe34 <clear_event_registrations+0x16c>
   3fcdc:	4e47      	ldr	r6, [pc, #284]	; (3fdfc <clear_event_registrations+0x134>)
	while (num_events--) {
   3fcde:	4544      	cmp	r4, r8
   3fce0:	d101      	bne.n	3fce6 <clear_event_registrations+0x1e>
}
   3fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3fce6:	2300      	movs	r3, #0
   3fce8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3fcec:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3fcf0:	f003 030f 	and.w	r3, r3, #15
   3fcf4:	2b04      	cmp	r3, #4
   3fcf6:	d83f      	bhi.n	3fd78 <clear_event_registrations+0xb0>
   3fcf8:	e8df f003 	tbb	[pc, r3]
   3fcfc:	3e032f4b 	.word	0x3e032f4b
   3fd00:	20          	.byte	0x20
   3fd01:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3fd02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3fd06:	b963      	cbnz	r3, 3fd22 <clear_event_registrations+0x5a>
   3fd08:	493d      	ldr	r1, [pc, #244]	; (3fe00 <clear_event_registrations+0x138>)
   3fd0a:	2396      	movs	r3, #150	; 0x96
   3fd0c:	462a      	mov	r2, r5
   3fd0e:	4630      	mov	r0, r6
   3fd10:	f007 fddb 	bl	478ca <printk>
   3fd14:	483b      	ldr	r0, [pc, #236]	; (3fe04 <clear_event_registrations+0x13c>)
   3fd16:	f007 fdd8 	bl	478ca <printk>
   3fd1a:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3fd1c:	4628      	mov	r0, r5
   3fd1e:	f007 fde1 	bl	478e4 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3fd22:	f854 2c14 	ldr.w	r2, [r4, #-20]
   3fd26:	b3a2      	cbz	r2, 3fd92 <clear_event_registrations+0xca>
	node->prev->next = node->next;
   3fd28:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3fd2c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   3fd2e:	f854 2c14 	ldr.w	r2, [r4, #-20]
   3fd32:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   3fd34:	2300      	movs	r3, #0
	node->prev = NULL;
   3fd36:	e944 3305 	strd	r3, r3, [r4, #-20]
   3fd3a:	e02a      	b.n	3fd92 <clear_event_registrations+0xca>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3fd3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3fd40:	2b00      	cmp	r3, #0
   3fd42:	d1ee      	bne.n	3fd22 <clear_event_registrations+0x5a>
   3fd44:	4930      	ldr	r1, [pc, #192]	; (3fe08 <clear_event_registrations+0x140>)
   3fd46:	239a      	movs	r3, #154	; 0x9a
   3fd48:	462a      	mov	r2, r5
   3fd4a:	4630      	mov	r0, r6
   3fd4c:	f007 fdbd 	bl	478ca <printk>
   3fd50:	482e      	ldr	r0, [pc, #184]	; (3fe0c <clear_event_registrations+0x144>)
   3fd52:	f007 fdba 	bl	478ca <printk>
   3fd56:	219a      	movs	r1, #154	; 0x9a
   3fd58:	e7e0      	b.n	3fd1c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3fd5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3fd5e:	2b00      	cmp	r3, #0
   3fd60:	d1df      	bne.n	3fd22 <clear_event_registrations+0x5a>
   3fd62:	492b      	ldr	r1, [pc, #172]	; (3fe10 <clear_event_registrations+0x148>)
   3fd64:	239e      	movs	r3, #158	; 0x9e
   3fd66:	462a      	mov	r2, r5
   3fd68:	4630      	mov	r0, r6
   3fd6a:	f007 fdae 	bl	478ca <printk>
   3fd6e:	4829      	ldr	r0, [pc, #164]	; (3fe14 <clear_event_registrations+0x14c>)
   3fd70:	f007 fdab 	bl	478ca <printk>
   3fd74:	219e      	movs	r1, #158	; 0x9e
   3fd76:	e7d1      	b.n	3fd1c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3fd78:	4649      	mov	r1, r9
   3fd7a:	23a5      	movs	r3, #165	; 0xa5
   3fd7c:	462a      	mov	r2, r5
   3fd7e:	4630      	mov	r0, r6
   3fd80:	f007 fda3 	bl	478ca <printk>
   3fd84:	4824      	ldr	r0, [pc, #144]	; (3fe18 <clear_event_registrations+0x150>)
   3fd86:	f007 fda0 	bl	478ca <printk>
   3fd8a:	21a5      	movs	r1, #165	; 0xa5
   3fd8c:	4628      	mov	r0, r5
   3fd8e:	f007 fda9 	bl	478e4 <assert_post_action>
   3fd92:	4822      	ldr	r0, [pc, #136]	; (3fe1c <clear_event_registrations+0x154>)
   3fd94:	f7ff f978 	bl	3f088 <z_spin_unlock_valid>
   3fd98:	b960      	cbnz	r0, 3fdb4 <clear_event_registrations+0xec>
   3fd9a:	4921      	ldr	r1, [pc, #132]	; (3fe20 <clear_event_registrations+0x158>)
   3fd9c:	2372      	movs	r3, #114	; 0x72
   3fd9e:	4a21      	ldr	r2, [pc, #132]	; (3fe24 <clear_event_registrations+0x15c>)
   3fda0:	4630      	mov	r0, r6
   3fda2:	f007 fd92 	bl	478ca <printk>
   3fda6:	4820      	ldr	r0, [pc, #128]	; (3fe28 <clear_event_registrations+0x160>)
   3fda8:	f007 fd8f 	bl	478ca <printk>
   3fdac:	2172      	movs	r1, #114	; 0x72
   3fdae:	481d      	ldr	r0, [pc, #116]	; (3fe24 <clear_event_registrations+0x15c>)
   3fdb0:	f007 fd98 	bl	478e4 <assert_post_action>
   3fdb4:	f387 8811 	msr	BASEPRI, r7
   3fdb8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3fdbc:	f04f 0320 	mov.w	r3, #32
   3fdc0:	f3ef 8711 	mrs	r7, BASEPRI
   3fdc4:	f383 8811 	msr	BASEPRI, r3
   3fdc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3fdcc:	4813      	ldr	r0, [pc, #76]	; (3fe1c <clear_event_registrations+0x154>)
   3fdce:	f7ff f94d 	bl	3f06c <z_spin_lock_valid>
   3fdd2:	b960      	cbnz	r0, 3fdee <clear_event_registrations+0x126>
   3fdd4:	4915      	ldr	r1, [pc, #84]	; (3fe2c <clear_event_registrations+0x164>)
   3fdd6:	235f      	movs	r3, #95	; 0x5f
   3fdd8:	4a12      	ldr	r2, [pc, #72]	; (3fe24 <clear_event_registrations+0x15c>)
   3fdda:	4630      	mov	r0, r6
   3fddc:	f007 fd75 	bl	478ca <printk>
   3fde0:	4813      	ldr	r0, [pc, #76]	; (3fe30 <clear_event_registrations+0x168>)
   3fde2:	f007 fd72 	bl	478ca <printk>
   3fde6:	215f      	movs	r1, #95	; 0x5f
   3fde8:	480e      	ldr	r0, [pc, #56]	; (3fe24 <clear_event_registrations+0x15c>)
   3fdea:	f007 fd7b 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fdee:	480b      	ldr	r0, [pc, #44]	; (3fe1c <clear_event_registrations+0x154>)
   3fdf0:	f7ff f95a 	bl	3f0a8 <z_spin_lock_set_owner>
   3fdf4:	3c14      	subs	r4, #20
   3fdf6:	e772      	b.n	3fcde <clear_event_registrations+0x16>
   3fdf8:	00052e69 	.word	0x00052e69
   3fdfc:	0004ccf0 	.word	0x0004ccf0
   3fe00:	00052d1c 	.word	0x00052d1c
   3fe04:	00052d36 	.word	0x00052d36
   3fe08:	00052d4b 	.word	0x00052d4b
   3fe0c:	00052d67 	.word	0x00052d67
   3fe10:	00052d78 	.word	0x00052d78
   3fe14:	00052d95 	.word	0x00052d95
   3fe18:	00052dac 	.word	0x00052dac
   3fe1c:	2002a694 	.word	0x2002a694
   3fe20:	0004d89f 	.word	0x0004d89f
   3fe24:	0004d84e 	.word	0x0004d84e
   3fe28:	0004d8b6 	.word	0x0004d8b6
   3fe2c:	0004d875 	.word	0x0004d875
   3fe30:	0004d88a 	.word	0x0004d88a
   3fe34:	00052aa7 	.word	0x00052aa7

0003fe38 <register_events>:
{
   3fe38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3fe3c:	2600      	movs	r6, #0
{
   3fe3e:	468a      	mov	sl, r1
   3fe40:	4615      	mov	r5, r2
   3fe42:	4604      	mov	r4, r0
	int events_registered = 0;
   3fe44:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3fe46:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 4002c <register_events+0x1f4>
   3fe4a:	4f68      	ldr	r7, [pc, #416]	; (3ffec <register_events+0x1b4>)
{
   3fe4c:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3fe4e:	4556      	cmp	r6, sl
   3fe50:	db03      	blt.n	3fe5a <register_events+0x22>
}
   3fe52:	4640      	mov	r0, r8
   3fe54:	b003      	add	sp, #12
   3fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fe5a:	f04f 0320 	mov.w	r3, #32
   3fe5e:	f3ef 8b11 	mrs	fp, BASEPRI
   3fe62:	f383 8811 	msr	BASEPRI, r3
   3fe66:	f3bf 8f6f 	isb	sy
   3fe6a:	4648      	mov	r0, r9
   3fe6c:	f7ff f8fe 	bl	3f06c <z_spin_lock_valid>
   3fe70:	b960      	cbnz	r0, 3fe8c <register_events+0x54>
   3fe72:	495f      	ldr	r1, [pc, #380]	; (3fff0 <register_events+0x1b8>)
   3fe74:	235f      	movs	r3, #95	; 0x5f
   3fe76:	463a      	mov	r2, r7
   3fe78:	485e      	ldr	r0, [pc, #376]	; (3fff4 <register_events+0x1bc>)
   3fe7a:	f007 fd26 	bl	478ca <printk>
   3fe7e:	485e      	ldr	r0, [pc, #376]	; (3fff8 <register_events+0x1c0>)
   3fe80:	f007 fd23 	bl	478ca <printk>
   3fe84:	215f      	movs	r1, #95	; 0x5f
   3fe86:	4638      	mov	r0, r7
   3fe88:	f007 fd2c 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fe8c:	4648      	mov	r0, r9
   3fe8e:	f7ff f90b 	bl	3f0a8 <z_spin_lock_set_owner>
	switch (event->type) {
   3fe92:	7b63      	ldrb	r3, [r4, #13]
   3fe94:	f003 030f 	and.w	r3, r3, #15
   3fe98:	2b04      	cmp	r3, #4
   3fe9a:	d825      	bhi.n	3fee8 <register_events+0xb0>
   3fe9c:	e8df f003 	tbb	[pc, r3]
   3fea0:	24031e07 	.word	0x24031e07
   3fea4:	18          	.byte	0x18
   3fea5:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3fea6:	6923      	ldr	r3, [r4, #16]
   3fea8:	689b      	ldr	r3, [r3, #8]
   3feaa:	2b00      	cmp	r3, #0
   3feac:	d12d      	bne.n	3ff0a <register_events+0xd2>
		} else if (!just_check && poller->is_polling) {
   3feae:	9b01      	ldr	r3, [sp, #4]
   3feb0:	2b00      	cmp	r3, #0
   3feb2:	d135      	bne.n	3ff20 <register_events+0xe8>
   3feb4:	782b      	ldrb	r3, [r5, #0]
   3feb6:	2b00      	cmp	r3, #0
   3feb8:	d032      	beq.n	3ff20 <register_events+0xe8>
	switch (event->type) {
   3feba:	7b63      	ldrb	r3, [r4, #13]
   3febc:	f003 030f 	and.w	r3, r3, #15
   3fec0:	2b04      	cmp	r3, #4
   3fec2:	f200 8085 	bhi.w	3ffd0 <register_events+0x198>
   3fec6:	e8df f003 	tbb	[pc, r3]
   3feca:	7058      	.short	0x7058
   3fecc:	8343      	.short	0x8343
   3fece:	5c          	.byte	0x5c
   3fecf:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   3fed0:	6923      	ldr	r3, [r4, #16]
   3fed2:	681b      	ldr	r3, [r3, #0]
   3fed4:	2b00      	cmp	r3, #0
   3fed6:	d0ea      	beq.n	3feae <register_events+0x76>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3fed8:	2204      	movs	r2, #4
   3feda:	e017      	b.n	3ff0c <register_events+0xd4>
		if (event->signal->signaled != 0U) {
   3fedc:	6923      	ldr	r3, [r4, #16]
   3fede:	689b      	ldr	r3, [r3, #8]
   3fee0:	2b00      	cmp	r3, #0
   3fee2:	d0e4      	beq.n	3feae <register_events+0x76>
			*state = K_POLL_STATE_SIGNALED;
   3fee4:	2201      	movs	r2, #1
   3fee6:	e011      	b.n	3ff0c <register_events+0xd4>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3fee8:	2350      	movs	r3, #80	; 0x50
   3feea:	4a44      	ldr	r2, [pc, #272]	; (3fffc <register_events+0x1c4>)
   3feec:	4944      	ldr	r1, [pc, #272]	; (40000 <register_events+0x1c8>)
   3feee:	4841      	ldr	r0, [pc, #260]	; (3fff4 <register_events+0x1bc>)
   3fef0:	f007 fceb 	bl	478ca <printk>
   3fef4:	7b61      	ldrb	r1, [r4, #13]
   3fef6:	4843      	ldr	r0, [pc, #268]	; (40004 <register_events+0x1cc>)
   3fef8:	f001 010f 	and.w	r1, r1, #15
   3fefc:	f007 fce5 	bl	478ca <printk>
   3ff00:	2150      	movs	r1, #80	; 0x50
   3ff02:	483e      	ldr	r0, [pc, #248]	; (3fffc <register_events+0x1c4>)
   3ff04:	f007 fcee 	bl	478e4 <assert_post_action>
   3ff08:	e7d1      	b.n	3feae <register_events+0x76>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3ff0a:	2202      	movs	r2, #2
	event->poller = NULL;
   3ff0c:	2100      	movs	r1, #0
	event->state |= state;
   3ff0e:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3ff10:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3ff12:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3ff16:	4302      	orrs	r2, r0
   3ff18:	f362 3310 	bfi	r3, r2, #12, #5
   3ff1c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3ff1e:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ff20:	4648      	mov	r0, r9
   3ff22:	f7ff f8b1 	bl	3f088 <z_spin_unlock_valid>
   3ff26:	b960      	cbnz	r0, 3ff42 <register_events+0x10a>
   3ff28:	4937      	ldr	r1, [pc, #220]	; (40008 <register_events+0x1d0>)
   3ff2a:	2372      	movs	r3, #114	; 0x72
   3ff2c:	463a      	mov	r2, r7
   3ff2e:	4831      	ldr	r0, [pc, #196]	; (3fff4 <register_events+0x1bc>)
   3ff30:	f007 fccb 	bl	478ca <printk>
   3ff34:	4835      	ldr	r0, [pc, #212]	; (4000c <register_events+0x1d4>)
   3ff36:	f007 fcc8 	bl	478ca <printk>
   3ff3a:	2172      	movs	r1, #114	; 0x72
   3ff3c:	4638      	mov	r0, r7
   3ff3e:	f007 fcd1 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   3ff42:	f38b 8811 	msr	BASEPRI, fp
   3ff46:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3ff4a:	3601      	adds	r6, #1
   3ff4c:	3414      	adds	r4, #20
   3ff4e:	e77e      	b.n	3fe4e <register_events+0x16>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3ff50:	6923      	ldr	r3, [r4, #16]
   3ff52:	b963      	cbnz	r3, 3ff6e <register_events+0x136>
   3ff54:	492e      	ldr	r1, [pc, #184]	; (40010 <register_events+0x1d8>)
   3ff56:	2375      	movs	r3, #117	; 0x75
   3ff58:	4a28      	ldr	r2, [pc, #160]	; (3fffc <register_events+0x1c4>)
   3ff5a:	4826      	ldr	r0, [pc, #152]	; (3fff4 <register_events+0x1bc>)
   3ff5c:	f007 fcb5 	bl	478ca <printk>
   3ff60:	482c      	ldr	r0, [pc, #176]	; (40014 <register_events+0x1dc>)
   3ff62:	f007 fcb2 	bl	478ca <printk>
   3ff66:	2175      	movs	r1, #117	; 0x75
   3ff68:	4824      	ldr	r0, [pc, #144]	; (3fffc <register_events+0x1c4>)
   3ff6a:	f007 fcbb 	bl	478e4 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3ff6e:	462a      	mov	r2, r5
   3ff70:	4621      	mov	r1, r4
   3ff72:	6920      	ldr	r0, [r4, #16]
   3ff74:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3ff76:	f00a f970 	bl	4a25a <add_event>
	event->poller = poller;
   3ff7a:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3ff7c:	f108 0801 	add.w	r8, r8, #1
   3ff80:	e7ce      	b.n	3ff20 <register_events+0xe8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3ff82:	6923      	ldr	r3, [r4, #16]
   3ff84:	b963      	cbnz	r3, 3ffa0 <register_events+0x168>
   3ff86:	4924      	ldr	r1, [pc, #144]	; (40018 <register_events+0x1e0>)
   3ff88:	2379      	movs	r3, #121	; 0x79
   3ff8a:	4a1c      	ldr	r2, [pc, #112]	; (3fffc <register_events+0x1c4>)
   3ff8c:	4819      	ldr	r0, [pc, #100]	; (3fff4 <register_events+0x1bc>)
   3ff8e:	f007 fc9c 	bl	478ca <printk>
   3ff92:	4822      	ldr	r0, [pc, #136]	; (4001c <register_events+0x1e4>)
   3ff94:	f007 fc99 	bl	478ca <printk>
   3ff98:	2179      	movs	r1, #121	; 0x79
   3ff9a:	4818      	ldr	r0, [pc, #96]	; (3fffc <register_events+0x1c4>)
   3ff9c:	f007 fca2 	bl	478e4 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3ffa0:	6920      	ldr	r0, [r4, #16]
   3ffa2:	462a      	mov	r2, r5
   3ffa4:	4621      	mov	r1, r4
   3ffa6:	300c      	adds	r0, #12
   3ffa8:	e7e5      	b.n	3ff76 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3ffaa:	6923      	ldr	r3, [r4, #16]
   3ffac:	b963      	cbnz	r3, 3ffc8 <register_events+0x190>
   3ffae:	491c      	ldr	r1, [pc, #112]	; (40020 <register_events+0x1e8>)
   3ffb0:	237d      	movs	r3, #125	; 0x7d
   3ffb2:	4a12      	ldr	r2, [pc, #72]	; (3fffc <register_events+0x1c4>)
   3ffb4:	480f      	ldr	r0, [pc, #60]	; (3fff4 <register_events+0x1bc>)
   3ffb6:	f007 fc88 	bl	478ca <printk>
   3ffba:	481a      	ldr	r0, [pc, #104]	; (40024 <register_events+0x1ec>)
   3ffbc:	f007 fc85 	bl	478ca <printk>
   3ffc0:	217d      	movs	r1, #125	; 0x7d
   3ffc2:	480e      	ldr	r0, [pc, #56]	; (3fffc <register_events+0x1c4>)
   3ffc4:	f007 fc8e 	bl	478e4 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3ffc8:	462a      	mov	r2, r5
   3ffca:	4621      	mov	r1, r4
   3ffcc:	6920      	ldr	r0, [r4, #16]
   3ffce:	e7d2      	b.n	3ff76 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   3ffd0:	2384      	movs	r3, #132	; 0x84
   3ffd2:	4a0a      	ldr	r2, [pc, #40]	; (3fffc <register_events+0x1c4>)
   3ffd4:	490a      	ldr	r1, [pc, #40]	; (40000 <register_events+0x1c8>)
   3ffd6:	4807      	ldr	r0, [pc, #28]	; (3fff4 <register_events+0x1bc>)
   3ffd8:	f007 fc77 	bl	478ca <printk>
   3ffdc:	4812      	ldr	r0, [pc, #72]	; (40028 <register_events+0x1f0>)
   3ffde:	f007 fc74 	bl	478ca <printk>
   3ffe2:	2184      	movs	r1, #132	; 0x84
   3ffe4:	4805      	ldr	r0, [pc, #20]	; (3fffc <register_events+0x1c4>)
   3ffe6:	f007 fc7d 	bl	478e4 <assert_post_action>
   3ffea:	e7c6      	b.n	3ff7a <register_events+0x142>
   3ffec:	0004d84e 	.word	0x0004d84e
   3fff0:	0004d875 	.word	0x0004d875
   3fff4:	0004ccf0 	.word	0x0004ccf0
   3fff8:	0004d88a 	.word	0x0004d88a
   3fffc:	00052e69 	.word	0x00052e69
   40000:	00052aa7 	.word	0x00052aa7
   40004:	00052ec0 	.word	0x00052ec0
   40008:	0004d89f 	.word	0x0004d89f
   4000c:	0004d8b6 	.word	0x0004d8b6
   40010:	00052d1c 	.word	0x00052d1c
   40014:	00052d36 	.word	0x00052d36
   40018:	00052d4b 	.word	0x00052d4b
   4001c:	00052d67 	.word	0x00052d67
   40020:	00052d78 	.word	0x00052d78
   40024:	00052d95 	.word	0x00052d95
   40028:	00052dac 	.word	0x00052dac
   4002c:	2002a694 	.word	0x2002a694

00040030 <k_poll_event_init>:
{
   40030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40032:	4604      	mov	r4, r0
   40034:	460f      	mov	r7, r1
   40036:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   40038:	4616      	mov	r6, r2
   4003a:	b162      	cbz	r2, 40056 <k_poll_event_init+0x26>
   4003c:	491f      	ldr	r1, [pc, #124]	; (400bc <k_poll_event_init+0x8c>)
   4003e:	232a      	movs	r3, #42	; 0x2a
   40040:	4a1f      	ldr	r2, [pc, #124]	; (400c0 <k_poll_event_init+0x90>)
   40042:	4820      	ldr	r0, [pc, #128]	; (400c4 <k_poll_event_init+0x94>)
   40044:	f007 fc41 	bl	478ca <printk>
   40048:	481f      	ldr	r0, [pc, #124]	; (400c8 <k_poll_event_init+0x98>)
   4004a:	f007 fc3e 	bl	478ca <printk>
   4004e:	212a      	movs	r1, #42	; 0x2a
   40050:	481b      	ldr	r0, [pc, #108]	; (400c0 <k_poll_event_init+0x90>)
   40052:	f007 fc47 	bl	478e4 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   40056:	2f0f      	cmp	r7, #15
   40058:	d90c      	bls.n	40074 <k_poll_event_init+0x44>
   4005a:	491c      	ldr	r1, [pc, #112]	; (400cc <k_poll_event_init+0x9c>)
   4005c:	232b      	movs	r3, #43	; 0x2b
   4005e:	4a18      	ldr	r2, [pc, #96]	; (400c0 <k_poll_event_init+0x90>)
   40060:	4818      	ldr	r0, [pc, #96]	; (400c4 <k_poll_event_init+0x94>)
   40062:	f007 fc32 	bl	478ca <printk>
   40066:	481a      	ldr	r0, [pc, #104]	; (400d0 <k_poll_event_init+0xa0>)
   40068:	f007 fc2f 	bl	478ca <printk>
   4006c:	212b      	movs	r1, #43	; 0x2b
   4006e:	4814      	ldr	r0, [pc, #80]	; (400c0 <k_poll_event_init+0x90>)
   40070:	f007 fc38 	bl	478e4 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   40074:	b965      	cbnz	r5, 40090 <k_poll_event_init+0x60>
   40076:	4917      	ldr	r1, [pc, #92]	; (400d4 <k_poll_event_init+0xa4>)
   40078:	232c      	movs	r3, #44	; 0x2c
   4007a:	4a11      	ldr	r2, [pc, #68]	; (400c0 <k_poll_event_init+0x90>)
   4007c:	4811      	ldr	r0, [pc, #68]	; (400c4 <k_poll_event_init+0x94>)
   4007e:	f007 fc24 	bl	478ca <printk>
   40082:	4815      	ldr	r0, [pc, #84]	; (400d8 <k_poll_event_init+0xa8>)
   40084:	f007 fc21 	bl	478ca <printk>
   40088:	212c      	movs	r1, #44	; 0x2c
   4008a:	480d      	ldr	r0, [pc, #52]	; (400c0 <k_poll_event_init+0x90>)
   4008c:	f007 fc2a 	bl	478e4 <assert_post_action>
	event->poller = NULL;
   40090:	2200      	movs	r2, #0
	event->type = type;
   40092:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   40094:	60a2      	str	r2, [r4, #8]
	event->type = type;
   40096:	f367 0303 	bfi	r3, r7, #0, #4
   4009a:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   4009c:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   4009e:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   400a0:	f362 3310 	bfi	r3, r2, #12, #5
   400a4:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   400a6:	f3c3 4307 	ubfx	r3, r3, #16, #8
   400aa:	f366 0341 	bfi	r3, r6, #1, #1
   400ae:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   400b0:	89e3      	ldrh	r3, [r4, #14]
   400b2:	f362 038f 	bfi	r3, r2, #2, #14
   400b6:	81e3      	strh	r3, [r4, #14]
}
   400b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   400ba:	bf00      	nop
   400bc:	00052dc2 	.word	0x00052dc2
   400c0:	00052e69 	.word	0x00052e69
   400c4:	0004ccf0 	.word	0x0004ccf0
   400c8:	00052de2 	.word	0x00052de2
   400cc:	00052e08 	.word	0x00052e08
   400d0:	00052e2c 	.word	0x00052e2c
   400d4:	00052e3c 	.word	0x00052e3c
   400d8:	00052e4f 	.word	0x00052e4f

000400dc <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   400dc:	2301      	movs	r3, #1
{
   400de:	b5f0      	push	{r4, r5, r6, r7, lr}
   400e0:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   400e2:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   400e6:	4b70      	ldr	r3, [pc, #448]	; (402a8 <z_impl_k_poll+0x1cc>)
{
   400e8:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   400ea:	689b      	ldr	r3, [r3, #8]
{
   400ec:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   400ee:	9304      	str	r3, [sp, #16]
   400f0:	4b6e      	ldr	r3, [pc, #440]	; (402ac <z_impl_k_poll+0x1d0>)
{
   400f2:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   400f4:	9305      	str	r3, [sp, #20]
   400f6:	f3ef 8305 	mrs	r3, IPSR
   400fa:	2b0d      	cmp	r3, #13
   400fc:	d804      	bhi.n	40108 <z_impl_k_poll+0x2c>
   400fe:	b183      	cbz	r3, 40122 <z_impl_k_poll+0x46>
   40100:	4b6b      	ldr	r3, [pc, #428]	; (402b0 <z_impl_k_poll+0x1d4>)
   40102:	685b      	ldr	r3, [r3, #4]
   40104:	051b      	lsls	r3, r3, #20
   40106:	d40c      	bmi.n	40122 <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   40108:	496a      	ldr	r1, [pc, #424]	; (402b4 <z_impl_k_poll+0x1d8>)
   4010a:	23ff      	movs	r3, #255	; 0xff
   4010c:	4a6a      	ldr	r2, [pc, #424]	; (402b8 <z_impl_k_poll+0x1dc>)
   4010e:	486b      	ldr	r0, [pc, #428]	; (402bc <z_impl_k_poll+0x1e0>)
   40110:	f007 fbdb 	bl	478ca <printk>
   40114:	486a      	ldr	r0, [pc, #424]	; (402c0 <z_impl_k_poll+0x1e4>)
   40116:	f007 fbd8 	bl	478ca <printk>
   4011a:	21ff      	movs	r1, #255	; 0xff
   4011c:	4866      	ldr	r0, [pc, #408]	; (402b8 <z_impl_k_poll+0x1dc>)
   4011e:	f007 fbe1 	bl	478e4 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   40122:	b974      	cbnz	r4, 40142 <z_impl_k_poll+0x66>
   40124:	4967      	ldr	r1, [pc, #412]	; (402c4 <z_impl_k_poll+0x1e8>)
   40126:	f44f 7380 	mov.w	r3, #256	; 0x100
   4012a:	4a63      	ldr	r2, [pc, #396]	; (402b8 <z_impl_k_poll+0x1dc>)
   4012c:	4863      	ldr	r0, [pc, #396]	; (402bc <z_impl_k_poll+0x1e0>)
   4012e:	f007 fbcc 	bl	478ca <printk>
   40132:	4865      	ldr	r0, [pc, #404]	; (402c8 <z_impl_k_poll+0x1ec>)
   40134:	f007 fbc9 	bl	478ca <printk>
   40138:	f44f 7180 	mov.w	r1, #256	; 0x100
   4013c:	485e      	ldr	r0, [pc, #376]	; (402b8 <z_impl_k_poll+0x1dc>)
   4013e:	f007 fbd1 	bl	478e4 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   40142:	2d00      	cmp	r5, #0
   40144:	dc0e      	bgt.n	40164 <z_impl_k_poll+0x88>
   40146:	4961      	ldr	r1, [pc, #388]	; (402cc <z_impl_k_poll+0x1f0>)
   40148:	f240 1301 	movw	r3, #257	; 0x101
   4014c:	4a5a      	ldr	r2, [pc, #360]	; (402b8 <z_impl_k_poll+0x1dc>)
   4014e:	485b      	ldr	r0, [pc, #364]	; (402bc <z_impl_k_poll+0x1e0>)
   40150:	f007 fbbb 	bl	478ca <printk>
   40154:	485e      	ldr	r0, [pc, #376]	; (402d0 <z_impl_k_poll+0x1f4>)
   40156:	f007 fbb8 	bl	478ca <printk>
   4015a:	f240 1101 	movw	r1, #257	; 0x101
   4015e:	4856      	ldr	r0, [pc, #344]	; (402b8 <z_impl_k_poll+0x1dc>)
   40160:	f007 fbc0 	bl	478e4 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   40164:	fab6 f386 	clz	r3, r6
   40168:	aa03      	add	r2, sp, #12
   4016a:	095b      	lsrs	r3, r3, #5
   4016c:	4629      	mov	r1, r5
   4016e:	4620      	mov	r0, r4
   40170:	f7ff fe62 	bl	3fe38 <register_events>
   40174:	4607      	mov	r7, r0
	__asm__ volatile(
   40176:	f04f 0320 	mov.w	r3, #32
   4017a:	f3ef 8511 	mrs	r5, BASEPRI
   4017e:	f383 8811 	msr	BASEPRI, r3
   40182:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   40186:	4853      	ldr	r0, [pc, #332]	; (402d4 <z_impl_k_poll+0x1f8>)
   40188:	f7fe ff70 	bl	3f06c <z_spin_lock_valid>
   4018c:	b960      	cbnz	r0, 401a8 <z_impl_k_poll+0xcc>
   4018e:	4952      	ldr	r1, [pc, #328]	; (402d8 <z_impl_k_poll+0x1fc>)
   40190:	235f      	movs	r3, #95	; 0x5f
   40192:	4a52      	ldr	r2, [pc, #328]	; (402dc <z_impl_k_poll+0x200>)
   40194:	4849      	ldr	r0, [pc, #292]	; (402bc <z_impl_k_poll+0x1e0>)
   40196:	f007 fb98 	bl	478ca <printk>
   4019a:	4851      	ldr	r0, [pc, #324]	; (402e0 <z_impl_k_poll+0x204>)
   4019c:	f007 fb95 	bl	478ca <printk>
   401a0:	215f      	movs	r1, #95	; 0x5f
   401a2:	484e      	ldr	r0, [pc, #312]	; (402dc <z_impl_k_poll+0x200>)
   401a4:	f007 fb9e 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   401a8:	484a      	ldr	r0, [pc, #296]	; (402d4 <z_impl_k_poll+0x1f8>)
   401aa:	f7fe ff7d 	bl	3f0a8 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   401ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   401b2:	b9eb      	cbnz	r3, 401f0 <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   401b4:	4620      	mov	r0, r4
   401b6:	462a      	mov	r2, r5
   401b8:	4639      	mov	r1, r7
   401ba:	f7ff fd85 	bl	3fcc8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   401be:	4845      	ldr	r0, [pc, #276]	; (402d4 <z_impl_k_poll+0x1f8>)
   401c0:	f7fe ff62 	bl	3f088 <z_spin_unlock_valid>
   401c4:	b960      	cbnz	r0, 401e0 <z_impl_k_poll+0x104>
   401c6:	4947      	ldr	r1, [pc, #284]	; (402e4 <z_impl_k_poll+0x208>)
   401c8:	2372      	movs	r3, #114	; 0x72
   401ca:	4a44      	ldr	r2, [pc, #272]	; (402dc <z_impl_k_poll+0x200>)
   401cc:	483b      	ldr	r0, [pc, #236]	; (402bc <z_impl_k_poll+0x1e0>)
   401ce:	f007 fb7c 	bl	478ca <printk>
   401d2:	4845      	ldr	r0, [pc, #276]	; (402e8 <z_impl_k_poll+0x20c>)
   401d4:	f007 fb79 	bl	478ca <printk>
   401d8:	2172      	movs	r1, #114	; 0x72
   401da:	4840      	ldr	r0, [pc, #256]	; (402dc <z_impl_k_poll+0x200>)
   401dc:	f007 fb82 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   401e0:	f385 8811 	msr	BASEPRI, r5
   401e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   401e8:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   401ea:	4628      	mov	r0, r5
   401ec:	b007      	add	sp, #28
   401ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   401f0:	2300      	movs	r3, #0
   401f2:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   401f6:	b9be      	cbnz	r6, 40228 <z_impl_k_poll+0x14c>
   401f8:	4836      	ldr	r0, [pc, #216]	; (402d4 <z_impl_k_poll+0x1f8>)
   401fa:	f7fe ff45 	bl	3f088 <z_spin_unlock_valid>
   401fe:	b960      	cbnz	r0, 4021a <z_impl_k_poll+0x13e>
   40200:	4938      	ldr	r1, [pc, #224]	; (402e4 <z_impl_k_poll+0x208>)
   40202:	2372      	movs	r3, #114	; 0x72
   40204:	4a35      	ldr	r2, [pc, #212]	; (402dc <z_impl_k_poll+0x200>)
   40206:	482d      	ldr	r0, [pc, #180]	; (402bc <z_impl_k_poll+0x1e0>)
   40208:	f007 fb5f 	bl	478ca <printk>
   4020c:	4836      	ldr	r0, [pc, #216]	; (402e8 <z_impl_k_poll+0x20c>)
   4020e:	f007 fb5c 	bl	478ca <printk>
   40212:	2172      	movs	r1, #114	; 0x72
   40214:	4831      	ldr	r0, [pc, #196]	; (402dc <z_impl_k_poll+0x200>)
   40216:	f007 fb65 	bl	478e4 <assert_post_action>
   4021a:	f385 8811 	msr	BASEPRI, r5
   4021e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   40222:	f06f 050a 	mvn.w	r5, #10
   40226:	e7e0      	b.n	401ea <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   40228:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   4022a:	4629      	mov	r1, r5
   4022c:	4633      	mov	r3, r6
   4022e:	4829      	ldr	r0, [pc, #164]	; (402d4 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   40230:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   40234:	f7fe fb24 	bl	3e880 <z_pend_curr>
   40238:	4605      	mov	r5, r0
	__asm__ volatile(
   4023a:	f04f 0320 	mov.w	r3, #32
   4023e:	f3ef 8611 	mrs	r6, BASEPRI
   40242:	f383 8811 	msr	BASEPRI, r3
   40246:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   4024a:	4822      	ldr	r0, [pc, #136]	; (402d4 <z_impl_k_poll+0x1f8>)
   4024c:	f7fe ff0e 	bl	3f06c <z_spin_lock_valid>
   40250:	b960      	cbnz	r0, 4026c <z_impl_k_poll+0x190>
   40252:	4921      	ldr	r1, [pc, #132]	; (402d8 <z_impl_k_poll+0x1fc>)
   40254:	235f      	movs	r3, #95	; 0x5f
   40256:	4a21      	ldr	r2, [pc, #132]	; (402dc <z_impl_k_poll+0x200>)
   40258:	4818      	ldr	r0, [pc, #96]	; (402bc <z_impl_k_poll+0x1e0>)
   4025a:	f007 fb36 	bl	478ca <printk>
   4025e:	4820      	ldr	r0, [pc, #128]	; (402e0 <z_impl_k_poll+0x204>)
   40260:	f007 fb33 	bl	478ca <printk>
   40264:	215f      	movs	r1, #95	; 0x5f
   40266:	481d      	ldr	r0, [pc, #116]	; (402dc <z_impl_k_poll+0x200>)
   40268:	f007 fb3c 	bl	478e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   4026c:	4819      	ldr	r0, [pc, #100]	; (402d4 <z_impl_k_poll+0x1f8>)
   4026e:	f7fe ff1b 	bl	3f0a8 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   40272:	4620      	mov	r0, r4
   40274:	4632      	mov	r2, r6
   40276:	4639      	mov	r1, r7
   40278:	f7ff fd26 	bl	3fcc8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   4027c:	4815      	ldr	r0, [pc, #84]	; (402d4 <z_impl_k_poll+0x1f8>)
   4027e:	f7fe ff03 	bl	3f088 <z_spin_unlock_valid>
   40282:	b960      	cbnz	r0, 4029e <z_impl_k_poll+0x1c2>
   40284:	4917      	ldr	r1, [pc, #92]	; (402e4 <z_impl_k_poll+0x208>)
   40286:	2372      	movs	r3, #114	; 0x72
   40288:	4a14      	ldr	r2, [pc, #80]	; (402dc <z_impl_k_poll+0x200>)
   4028a:	480c      	ldr	r0, [pc, #48]	; (402bc <z_impl_k_poll+0x1e0>)
   4028c:	f007 fb1d 	bl	478ca <printk>
   40290:	4815      	ldr	r0, [pc, #84]	; (402e8 <z_impl_k_poll+0x20c>)
   40292:	f007 fb1a 	bl	478ca <printk>
   40296:	2172      	movs	r1, #114	; 0x72
   40298:	4810      	ldr	r0, [pc, #64]	; (402dc <z_impl_k_poll+0x200>)
   4029a:	f007 fb23 	bl	478e4 <assert_post_action>
	__asm__ volatile(
   4029e:	f386 8811 	msr	BASEPRI, r6
   402a2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   402a6:	e7a0      	b.n	401ea <z_impl_k_poll+0x10e>
   402a8:	2002a578 	.word	0x2002a578
   402ac:	0003fc59 	.word	0x0003fc59
   402b0:	e000ed00 	.word	0xe000ed00
   402b4:	00052a45 	.word	0x00052a45
   402b8:	00052e69 	.word	0x00052e69
   402bc:	0004ccf0 	.word	0x0004ccf0
   402c0:	0005294a 	.word	0x0005294a
   402c4:	00052edd 	.word	0x00052edd
   402c8:	00052ef3 	.word	0x00052ef3
   402cc:	00052f02 	.word	0x00052f02
   402d0:	00052f11 	.word	0x00052f11
   402d4:	2002a694 	.word	0x2002a694
   402d8:	0004d875 	.word	0x0004d875
   402dc:	0004d84e 	.word	0x0004d84e
   402e0:	0004d88a 	.word	0x0004d88a
   402e4:	0004d89f 	.word	0x0004d89f
   402e8:	0004d8b6 	.word	0x0004d8b6

000402ec <ocrypto_ecdsa_p256_public_key>:
   402ec:	b530      	push	{r4, r5, lr}
   402ee:	b099      	sub	sp, #100	; 0x64
   402f0:	4605      	mov	r5, r0
   402f2:	4668      	mov	r0, sp
   402f4:	f000 f8f2 	bl	404dc <ocrypto_sc_p256_from32bytes>
   402f8:	4669      	mov	r1, sp
   402fa:	a808      	add	r0, sp, #32
   402fc:	f000 fae6 	bl	408cc <ocrypto_curve_p256_scalarmult_base>
   40300:	4604      	mov	r4, r0
   40302:	a908      	add	r1, sp, #32
   40304:	4628      	mov	r0, r5
   40306:	f000 fa21 	bl	4074c <ocrypto_curve_p256_to64bytes>
   4030a:	4620      	mov	r0, r4
   4030c:	b019      	add	sp, #100	; 0x64
   4030e:	bd30      	pop	{r4, r5, pc}

00040310 <ocrypto_mod_p256_cneg>:
   40310:	b570      	push	{r4, r5, r6, lr}
   40312:	b088      	sub	sp, #32
   40314:	4604      	mov	r4, r0
   40316:	460d      	mov	r5, r1
   40318:	4668      	mov	r0, sp
   4031a:	2120      	movs	r1, #32
   4031c:	4616      	mov	r6, r2
   4031e:	f7d9 fa52 	bl	197c6 <ocrypto_constant_time_fill_zero>
   40322:	2300      	movs	r3, #0
   40324:	4629      	mov	r1, r5
   40326:	4620      	mov	r0, r4
   40328:	2220      	movs	r2, #32
   4032a:	9300      	str	r3, [sp, #0]
   4032c:	f7d9 fa44 	bl	197b8 <ocrypto_constant_time_copy>
   40330:	462a      	mov	r2, r5
   40332:	4669      	mov	r1, sp
   40334:	4668      	mov	r0, sp
   40336:	f7d9 fa8c 	bl	19852 <ocrypto_mod_p256_sub>
   4033a:	4632      	mov	r2, r6
   4033c:	4669      	mov	r1, sp
   4033e:	4620      	mov	r0, r4
   40340:	f7d8 ff97 	bl	19272 <ocrypto_bigint_cswap256>
   40344:	b008      	add	sp, #32
   40346:	bd70      	pop	{r4, r5, r6, pc}

00040348 <ocrypto_mod_p256_toBytes>:
   40348:	69cb      	ldr	r3, [r1, #28]
   4034a:	ba1b      	rev	r3, r3
   4034c:	6003      	str	r3, [r0, #0]
   4034e:	698b      	ldr	r3, [r1, #24]
   40350:	ba1b      	rev	r3, r3
   40352:	6043      	str	r3, [r0, #4]
   40354:	694b      	ldr	r3, [r1, #20]
   40356:	ba1b      	rev	r3, r3
   40358:	6083      	str	r3, [r0, #8]
   4035a:	690b      	ldr	r3, [r1, #16]
   4035c:	ba1b      	rev	r3, r3
   4035e:	60c3      	str	r3, [r0, #12]
   40360:	68cb      	ldr	r3, [r1, #12]
   40362:	ba1b      	rev	r3, r3
   40364:	6103      	str	r3, [r0, #16]
   40366:	688b      	ldr	r3, [r1, #8]
   40368:	ba1b      	rev	r3, r3
   4036a:	6143      	str	r3, [r0, #20]
   4036c:	684b      	ldr	r3, [r1, #4]
   4036e:	ba1b      	rev	r3, r3
   40370:	6183      	str	r3, [r0, #24]
   40372:	680b      	ldr	r3, [r1, #0]
   40374:	ba1b      	rev	r3, r3
   40376:	61c3      	str	r3, [r0, #28]
   40378:	4770      	bx	lr
   4037a:	bf00      	nop

0004037c <ocrypto_mod_p256_invert>:
   4037c:	b570      	push	{r4, r5, r6, lr}
   4037e:	460d      	mov	r5, r1
   40380:	2405      	movs	r4, #5
   40382:	b098      	sub	sp, #96	; 0x60
   40384:	4606      	mov	r6, r0
   40386:	a810      	add	r0, sp, #64	; 0x40
   40388:	f7d9 fa90 	bl	198ac <ocrypto_mod_p256_square>
   4038c:	462a      	mov	r2, r5
   4038e:	a910      	add	r1, sp, #64	; 0x40
   40390:	4668      	mov	r0, sp
   40392:	f7d9 fa8c 	bl	198ae <ocrypto_mod_p256_mul>
   40396:	4669      	mov	r1, sp
   40398:	a810      	add	r0, sp, #64	; 0x40
   4039a:	f7d9 fa87 	bl	198ac <ocrypto_mod_p256_square>
   4039e:	a910      	add	r1, sp, #64	; 0x40
   403a0:	4608      	mov	r0, r1
   403a2:	f7d9 fa83 	bl	198ac <ocrypto_mod_p256_square>
   403a6:	466a      	mov	r2, sp
   403a8:	a910      	add	r1, sp, #64	; 0x40
   403aa:	a808      	add	r0, sp, #32
   403ac:	f7d9 fa7f 	bl	198ae <ocrypto_mod_p256_mul>
   403b0:	a908      	add	r1, sp, #32
   403b2:	a810      	add	r0, sp, #64	; 0x40
   403b4:	f7d9 fa7a 	bl	198ac <ocrypto_mod_p256_square>
   403b8:	a910      	add	r1, sp, #64	; 0x40
   403ba:	4608      	mov	r0, r1
   403bc:	f7d9 fa76 	bl	198ac <ocrypto_mod_p256_square>
   403c0:	a910      	add	r1, sp, #64	; 0x40
   403c2:	4608      	mov	r0, r1
   403c4:	f7d9 fa72 	bl	198ac <ocrypto_mod_p256_square>
   403c8:	a910      	add	r1, sp, #64	; 0x40
   403ca:	4608      	mov	r0, r1
   403cc:	f7d9 fa6e 	bl	198ac <ocrypto_mod_p256_square>
   403d0:	a910      	add	r1, sp, #64	; 0x40
   403d2:	aa08      	add	r2, sp, #32
   403d4:	4608      	mov	r0, r1
   403d6:	f7d9 fa6a 	bl	198ae <ocrypto_mod_p256_mul>
   403da:	a910      	add	r1, sp, #64	; 0x40
   403dc:	4608      	mov	r0, r1
   403de:	f7d9 fa65 	bl	198ac <ocrypto_mod_p256_square>
   403e2:	a910      	add	r1, sp, #64	; 0x40
   403e4:	4608      	mov	r0, r1
   403e6:	f7d9 fa61 	bl	198ac <ocrypto_mod_p256_square>
   403ea:	a910      	add	r1, sp, #64	; 0x40
   403ec:	466a      	mov	r2, sp
   403ee:	a808      	add	r0, sp, #32
   403f0:	f7d9 fa5d 	bl	198ae <ocrypto_mod_p256_mul>
   403f4:	a908      	add	r1, sp, #32
   403f6:	a810      	add	r0, sp, #64	; 0x40
   403f8:	f7d9 fa58 	bl	198ac <ocrypto_mod_p256_square>
   403fc:	a910      	add	r1, sp, #64	; 0x40
   403fe:	4608      	mov	r0, r1
   40400:	f7d9 fa54 	bl	198ac <ocrypto_mod_p256_square>
   40404:	3c01      	subs	r4, #1
   40406:	a910      	add	r1, sp, #64	; 0x40
   40408:	d1f5      	bne.n	403f6 <ocrypto_mod_p256_invert+0x7a>
   4040a:	aa08      	add	r2, sp, #32
   4040c:	4608      	mov	r0, r1
   4040e:	f7d9 fa4e 	bl	198ae <ocrypto_mod_p256_mul>
   40412:	2405      	movs	r4, #5
   40414:	a910      	add	r1, sp, #64	; 0x40
   40416:	4608      	mov	r0, r1
   40418:	f7d9 fa48 	bl	198ac <ocrypto_mod_p256_square>
   4041c:	a910      	add	r1, sp, #64	; 0x40
   4041e:	4608      	mov	r0, r1
   40420:	f7d9 fa44 	bl	198ac <ocrypto_mod_p256_square>
   40424:	3c01      	subs	r4, #1
   40426:	d1f5      	bne.n	40414 <ocrypto_mod_p256_invert+0x98>
   40428:	a910      	add	r1, sp, #64	; 0x40
   4042a:	aa08      	add	r2, sp, #32
   4042c:	4608      	mov	r0, r1
   4042e:	f7d9 fa3e 	bl	198ae <ocrypto_mod_p256_mul>
   40432:	a910      	add	r1, sp, #64	; 0x40
   40434:	a808      	add	r0, sp, #32
   40436:	f7d9 fa39 	bl	198ac <ocrypto_mod_p256_square>
   4043a:	a908      	add	r1, sp, #32
   4043c:	4608      	mov	r0, r1
   4043e:	f7d9 fa35 	bl	198ac <ocrypto_mod_p256_square>
   40442:	a908      	add	r1, sp, #32
   40444:	466a      	mov	r2, sp
   40446:	4668      	mov	r0, sp
   40448:	f7d9 fa31 	bl	198ae <ocrypto_mod_p256_mul>
   4044c:	2410      	movs	r4, #16
   4044e:	4669      	mov	r1, sp
   40450:	a810      	add	r0, sp, #64	; 0x40
   40452:	f7d9 fa2b 	bl	198ac <ocrypto_mod_p256_square>
   40456:	a910      	add	r1, sp, #64	; 0x40
   40458:	4608      	mov	r0, r1
   4045a:	f7d9 fa27 	bl	198ac <ocrypto_mod_p256_square>
   4045e:	3c01      	subs	r4, #1
   40460:	a910      	add	r1, sp, #64	; 0x40
   40462:	d1f5      	bne.n	40450 <ocrypto_mod_p256_invert+0xd4>
   40464:	462a      	mov	r2, r5
   40466:	4608      	mov	r0, r1
   40468:	f7d9 fa21 	bl	198ae <ocrypto_mod_p256_mul>
   4046c:	2440      	movs	r4, #64	; 0x40
   4046e:	a910      	add	r1, sp, #64	; 0x40
   40470:	4608      	mov	r0, r1
   40472:	f7d9 fa1b 	bl	198ac <ocrypto_mod_p256_square>
   40476:	a910      	add	r1, sp, #64	; 0x40
   40478:	4608      	mov	r0, r1
   4047a:	f7d9 fa17 	bl	198ac <ocrypto_mod_p256_square>
   4047e:	3c01      	subs	r4, #1
   40480:	d1f5      	bne.n	4046e <ocrypto_mod_p256_invert+0xf2>
   40482:	a910      	add	r1, sp, #64	; 0x40
   40484:	466a      	mov	r2, sp
   40486:	4608      	mov	r0, r1
   40488:	f7d9 fa11 	bl	198ae <ocrypto_mod_p256_mul>
   4048c:	2410      	movs	r4, #16
   4048e:	a910      	add	r1, sp, #64	; 0x40
   40490:	4608      	mov	r0, r1
   40492:	f7d9 fa0b 	bl	198ac <ocrypto_mod_p256_square>
   40496:	a910      	add	r1, sp, #64	; 0x40
   40498:	4608      	mov	r0, r1
   4049a:	f7d9 fa07 	bl	198ac <ocrypto_mod_p256_square>
   4049e:	3c01      	subs	r4, #1
   404a0:	d1f5      	bne.n	4048e <ocrypto_mod_p256_invert+0x112>
   404a2:	a910      	add	r1, sp, #64	; 0x40
   404a4:	466a      	mov	r2, sp
   404a6:	4608      	mov	r0, r1
   404a8:	f7d9 fa01 	bl	198ae <ocrypto_mod_p256_mul>
   404ac:	2410      	movs	r4, #16
   404ae:	a910      	add	r1, sp, #64	; 0x40
   404b0:	4608      	mov	r0, r1
   404b2:	f7d9 f9fb 	bl	198ac <ocrypto_mod_p256_square>
   404b6:	a910      	add	r1, sp, #64	; 0x40
   404b8:	4608      	mov	r0, r1
   404ba:	f7d9 f9f7 	bl	198ac <ocrypto_mod_p256_square>
   404be:	3c01      	subs	r4, #1
   404c0:	d1f5      	bne.n	404ae <ocrypto_mod_p256_invert+0x132>
   404c2:	a910      	add	r1, sp, #64	; 0x40
   404c4:	aa08      	add	r2, sp, #32
   404c6:	4608      	mov	r0, r1
   404c8:	f7d9 f9f1 	bl	198ae <ocrypto_mod_p256_mul>
   404cc:	462a      	mov	r2, r5
   404ce:	a910      	add	r1, sp, #64	; 0x40
   404d0:	4630      	mov	r0, r6
   404d2:	f7d9 f9ec 	bl	198ae <ocrypto_mod_p256_mul>
   404d6:	b018      	add	sp, #96	; 0x60
   404d8:	bd70      	pop	{r4, r5, r6, pc}
   404da:	bf00      	nop

000404dc <ocrypto_sc_p256_from32bytes>:
   404dc:	b538      	push	{r3, r4, r5, lr}
   404de:	460b      	mov	r3, r1
   404e0:	680a      	ldr	r2, [r1, #0]
   404e2:	4d12      	ldr	r5, [pc, #72]	; (4052c <ocrypto_sc_p256_from32bytes+0x50>)
   404e4:	ba12      	rev	r2, r2
   404e6:	61c2      	str	r2, [r0, #28]
   404e8:	684a      	ldr	r2, [r1, #4]
   404ea:	4601      	mov	r1, r0
   404ec:	ba12      	rev	r2, r2
   404ee:	6182      	str	r2, [r0, #24]
   404f0:	689a      	ldr	r2, [r3, #8]
   404f2:	4604      	mov	r4, r0
   404f4:	ba12      	rev	r2, r2
   404f6:	6142      	str	r2, [r0, #20]
   404f8:	68da      	ldr	r2, [r3, #12]
   404fa:	ba12      	rev	r2, r2
   404fc:	6102      	str	r2, [r0, #16]
   404fe:	691a      	ldr	r2, [r3, #16]
   40500:	ba12      	rev	r2, r2
   40502:	60c2      	str	r2, [r0, #12]
   40504:	695a      	ldr	r2, [r3, #20]
   40506:	ba12      	rev	r2, r2
   40508:	6082      	str	r2, [r0, #8]
   4050a:	699a      	ldr	r2, [r3, #24]
   4050c:	ba12      	rev	r2, r2
   4050e:	6042      	str	r2, [r0, #4]
   40510:	69db      	ldr	r3, [r3, #28]
   40512:	462a      	mov	r2, r5
   40514:	ba1b      	rev	r3, r3
   40516:	6003      	str	r3, [r0, #0]
   40518:	f7d8 fe20 	bl	1915c <ocrypto_bigint_sub256>
   4051c:	4629      	mov	r1, r5
   4051e:	4602      	mov	r2, r0
   40520:	4620      	mov	r0, r4
   40522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   40526:	f7d8 be39 	b.w	1919c <ocrypto_bigint_cadd256>
   4052a:	bf00      	nop
   4052c:	0004c484 	.word	0x0004c484

00040530 <p256_zdblu>:
   40530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40534:	4607      	mov	r7, r0
   40536:	460d      	mov	r5, r1
   40538:	4690      	mov	r8, r2
   4053a:	b088      	sub	sp, #32
   4053c:	f102 0120 	add.w	r1, r2, #32
   40540:	4668      	mov	r0, sp
   40542:	f107 0620 	add.w	r6, r7, #32
   40546:	f7d9 f9b1 	bl	198ac <ocrypto_mod_p256_square>
   4054a:	466a      	mov	r2, sp
   4054c:	4669      	mov	r1, sp
   4054e:	4668      	mov	r0, sp
   40550:	f7d9 f940 	bl	197d4 <ocrypto_mod_p256_add>
   40554:	4630      	mov	r0, r6
   40556:	4669      	mov	r1, sp
   40558:	f7d9 f9a8 	bl	198ac <ocrypto_mod_p256_square>
   4055c:	4632      	mov	r2, r6
   4055e:	4631      	mov	r1, r6
   40560:	4630      	mov	r0, r6
   40562:	f105 0420 	add.w	r4, r5, #32
   40566:	f7d9 f935 	bl	197d4 <ocrypto_mod_p256_add>
   4056a:	466a      	mov	r2, sp
   4056c:	4669      	mov	r1, sp
   4056e:	4668      	mov	r0, sp
   40570:	f7d9 f930 	bl	197d4 <ocrypto_mod_p256_add>
   40574:	4620      	mov	r0, r4
   40576:	4641      	mov	r1, r8
   40578:	f7d9 f998 	bl	198ac <ocrypto_mod_p256_square>
   4057c:	466a      	mov	r2, sp
   4057e:	4641      	mov	r1, r8
   40580:	4638      	mov	r0, r7
   40582:	f7d9 f994 	bl	198ae <ocrypto_mod_p256_mul>
   40586:	4622      	mov	r2, r4
   40588:	4621      	mov	r1, r4
   4058a:	4668      	mov	r0, sp
   4058c:	f7d9 f922 	bl	197d4 <ocrypto_mod_p256_add>
   40590:	4622      	mov	r2, r4
   40592:	4669      	mov	r1, sp
   40594:	4668      	mov	r0, sp
   40596:	f7d9 f91d 	bl	197d4 <ocrypto_mod_p256_add>
   4059a:	4669      	mov	r1, sp
   4059c:	4668      	mov	r0, sp
   4059e:	4a11      	ldr	r2, [pc, #68]	; (405e4 <p256_zdblu+0xb4>)
   405a0:	f7d9 f918 	bl	197d4 <ocrypto_mod_p256_add>
   405a4:	4669      	mov	r1, sp
   405a6:	4628      	mov	r0, r5
   405a8:	f7d9 f980 	bl	198ac <ocrypto_mod_p256_square>
   405ac:	463a      	mov	r2, r7
   405ae:	4629      	mov	r1, r5
   405b0:	4628      	mov	r0, r5
   405b2:	f7d9 f94e 	bl	19852 <ocrypto_mod_p256_sub>
   405b6:	463a      	mov	r2, r7
   405b8:	4629      	mov	r1, r5
   405ba:	4628      	mov	r0, r5
   405bc:	f7d9 f949 	bl	19852 <ocrypto_mod_p256_sub>
   405c0:	462a      	mov	r2, r5
   405c2:	4639      	mov	r1, r7
   405c4:	4620      	mov	r0, r4
   405c6:	f7d9 f944 	bl	19852 <ocrypto_mod_p256_sub>
   405ca:	466a      	mov	r2, sp
   405cc:	4621      	mov	r1, r4
   405ce:	4620      	mov	r0, r4
   405d0:	f7d9 f96d 	bl	198ae <ocrypto_mod_p256_mul>
   405d4:	4632      	mov	r2, r6
   405d6:	4621      	mov	r1, r4
   405d8:	4620      	mov	r0, r4
   405da:	f7d9 f93a 	bl	19852 <ocrypto_mod_p256_sub>
   405de:	b008      	add	sp, #32
   405e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   405e4:	0004c524 	.word	0x0004c524

000405e8 <p256_zaddc>:
   405e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   405ea:	4604      	mov	r4, r0
   405ec:	460e      	mov	r6, r1
   405ee:	b099      	sub	sp, #100	; 0x64
   405f0:	460a      	mov	r2, r1
   405f2:	4601      	mov	r1, r0
   405f4:	4668      	mov	r0, sp
   405f6:	f7d9 f92c 	bl	19852 <ocrypto_mod_p256_sub>
   405fa:	4669      	mov	r1, sp
   405fc:	4668      	mov	r0, sp
   405fe:	f7d9 f955 	bl	198ac <ocrypto_mod_p256_square>
   40602:	466a      	mov	r2, sp
   40604:	4621      	mov	r1, r4
   40606:	a808      	add	r0, sp, #32
   40608:	f106 0520 	add.w	r5, r6, #32
   4060c:	f104 0720 	add.w	r7, r4, #32
   40610:	f7d9 f94d 	bl	198ae <ocrypto_mod_p256_mul>
   40614:	466a      	mov	r2, sp
   40616:	4631      	mov	r1, r6
   40618:	4668      	mov	r0, sp
   4061a:	f7d9 f948 	bl	198ae <ocrypto_mod_p256_mul>
   4061e:	4639      	mov	r1, r7
   40620:	462a      	mov	r2, r5
   40622:	a810      	add	r0, sp, #64	; 0x40
   40624:	f7d9 f8d6 	bl	197d4 <ocrypto_mod_p256_add>
   40628:	462a      	mov	r2, r5
   4062a:	4639      	mov	r1, r7
   4062c:	4628      	mov	r0, r5
   4062e:	f7d9 f910 	bl	19852 <ocrypto_mod_p256_sub>
   40632:	4629      	mov	r1, r5
   40634:	4630      	mov	r0, r6
   40636:	f7d9 f939 	bl	198ac <ocrypto_mod_p256_square>
   4063a:	466a      	mov	r2, sp
   4063c:	a908      	add	r1, sp, #32
   4063e:	4620      	mov	r0, r4
   40640:	f7d9 f8c8 	bl	197d4 <ocrypto_mod_p256_add>
   40644:	4622      	mov	r2, r4
   40646:	4631      	mov	r1, r6
   40648:	4630      	mov	r0, r6
   4064a:	f7d9 f902 	bl	19852 <ocrypto_mod_p256_sub>
   4064e:	466a      	mov	r2, sp
   40650:	a908      	add	r1, sp, #32
   40652:	4668      	mov	r0, sp
   40654:	f7d9 f8fd 	bl	19852 <ocrypto_mod_p256_sub>
   40658:	466a      	mov	r2, sp
   4065a:	4639      	mov	r1, r7
   4065c:	4638      	mov	r0, r7
   4065e:	f7d9 f926 	bl	198ae <ocrypto_mod_p256_mul>
   40662:	4632      	mov	r2, r6
   40664:	a908      	add	r1, sp, #32
   40666:	4668      	mov	r0, sp
   40668:	f7d9 f8f3 	bl	19852 <ocrypto_mod_p256_sub>
   4066c:	466a      	mov	r2, sp
   4066e:	4629      	mov	r1, r5
   40670:	4628      	mov	r0, r5
   40672:	f7d9 f91c 	bl	198ae <ocrypto_mod_p256_mul>
   40676:	463a      	mov	r2, r7
   40678:	4629      	mov	r1, r5
   4067a:	4628      	mov	r0, r5
   4067c:	f7d9 f8e9 	bl	19852 <ocrypto_mod_p256_sub>
   40680:	a910      	add	r1, sp, #64	; 0x40
   40682:	4668      	mov	r0, sp
   40684:	f7d9 f912 	bl	198ac <ocrypto_mod_p256_square>
   40688:	4622      	mov	r2, r4
   4068a:	4669      	mov	r1, sp
   4068c:	4620      	mov	r0, r4
   4068e:	f7d9 f8e0 	bl	19852 <ocrypto_mod_p256_sub>
   40692:	a908      	add	r1, sp, #32
   40694:	4622      	mov	r2, r4
   40696:	4608      	mov	r0, r1
   40698:	f7d9 f8db 	bl	19852 <ocrypto_mod_p256_sub>
   4069c:	a910      	add	r1, sp, #64	; 0x40
   4069e:	aa08      	add	r2, sp, #32
   406a0:	4608      	mov	r0, r1
   406a2:	f7d9 f904 	bl	198ae <ocrypto_mod_p256_mul>
   406a6:	463a      	mov	r2, r7
   406a8:	a910      	add	r1, sp, #64	; 0x40
   406aa:	4638      	mov	r0, r7
   406ac:	f7d9 f8d1 	bl	19852 <ocrypto_mod_p256_sub>
   406b0:	b019      	add	sp, #100	; 0x64
   406b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000406b4 <p256_zaddu>:
   406b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   406b8:	460c      	mov	r4, r1
   406ba:	4605      	mov	r5, r0
   406bc:	4690      	mov	r8, r2
   406be:	b088      	sub	sp, #32
   406c0:	4622      	mov	r2, r4
   406c2:	4601      	mov	r1, r0
   406c4:	4668      	mov	r0, sp
   406c6:	f7d9 f8c4 	bl	19852 <ocrypto_mod_p256_sub>
   406ca:	4669      	mov	r1, sp
   406cc:	4668      	mov	r0, sp
   406ce:	f7d9 f8ed 	bl	198ac <ocrypto_mod_p256_square>
   406d2:	466a      	mov	r2, sp
   406d4:	4629      	mov	r1, r5
   406d6:	4628      	mov	r0, r5
   406d8:	f104 0620 	add.w	r6, r4, #32
   406dc:	f7d9 f8e7 	bl	198ae <ocrypto_mod_p256_mul>
   406e0:	f105 0720 	add.w	r7, r5, #32
   406e4:	466a      	mov	r2, sp
   406e6:	4621      	mov	r1, r4
   406e8:	4668      	mov	r0, sp
   406ea:	f7d9 f8e0 	bl	198ae <ocrypto_mod_p256_mul>
   406ee:	4632      	mov	r2, r6
   406f0:	4630      	mov	r0, r6
   406f2:	4639      	mov	r1, r7
   406f4:	f7d9 f8ad 	bl	19852 <ocrypto_mod_p256_sub>
   406f8:	4631      	mov	r1, r6
   406fa:	4620      	mov	r0, r4
   406fc:	f7d9 f8d6 	bl	198ac <ocrypto_mod_p256_square>
   40700:	462a      	mov	r2, r5
   40702:	4621      	mov	r1, r4
   40704:	4620      	mov	r0, r4
   40706:	f7d9 f8a4 	bl	19852 <ocrypto_mod_p256_sub>
   4070a:	466a      	mov	r2, sp
   4070c:	4621      	mov	r1, r4
   4070e:	4620      	mov	r0, r4
   40710:	f7d9 f89f 	bl	19852 <ocrypto_mod_p256_sub>
   40714:	466a      	mov	r2, sp
   40716:	4629      	mov	r1, r5
   40718:	4640      	mov	r0, r8
   4071a:	f7d9 f89a 	bl	19852 <ocrypto_mod_p256_sub>
   4071e:	4642      	mov	r2, r8
   40720:	4639      	mov	r1, r7
   40722:	4638      	mov	r0, r7
   40724:	f7d9 f8c3 	bl	198ae <ocrypto_mod_p256_mul>
   40728:	4622      	mov	r2, r4
   4072a:	4629      	mov	r1, r5
   4072c:	4668      	mov	r0, sp
   4072e:	f7d9 f890 	bl	19852 <ocrypto_mod_p256_sub>
   40732:	466a      	mov	r2, sp
   40734:	4631      	mov	r1, r6
   40736:	4630      	mov	r0, r6
   40738:	f7d9 f8b9 	bl	198ae <ocrypto_mod_p256_mul>
   4073c:	463a      	mov	r2, r7
   4073e:	4631      	mov	r1, r6
   40740:	4630      	mov	r0, r6
   40742:	f7d9 f886 	bl	19852 <ocrypto_mod_p256_sub>
   40746:	b008      	add	sp, #32
   40748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004074c <ocrypto_curve_p256_to64bytes>:
   4074c:	b538      	push	{r3, r4, r5, lr}
   4074e:	4604      	mov	r4, r0
   40750:	460d      	mov	r5, r1
   40752:	f7ff fdf9 	bl	40348 <ocrypto_mod_p256_toBytes>
   40756:	f105 0120 	add.w	r1, r5, #32
   4075a:	f104 0020 	add.w	r0, r4, #32
   4075e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   40762:	f7ff bdf1 	b.w	40348 <ocrypto_mod_p256_toBytes>
   40766:	bf00      	nop

00040768 <ocrypto_curve_p256_scalarmult>:
   40768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4076c:	b0b8      	sub	sp, #224	; 0xe0
   4076e:	468a      	mov	sl, r1
   40770:	4681      	mov	r9, r0
   40772:	4611      	mov	r1, r2
   40774:	a810      	add	r0, sp, #64	; 0x40
   40776:	4a51      	ldr	r2, [pc, #324]	; (408bc <ocrypto_curve_p256_scalarmult+0x154>)
   40778:	f7d8 fcf0 	bl	1915c <ocrypto_bigint_sub256>
   4077c:	4950      	ldr	r1, [pc, #320]	; (408c0 <ocrypto_curve_p256_scalarmult+0x158>)
   4077e:	4602      	mov	r2, r0
   40780:	a810      	add	r0, sp, #64	; 0x40
   40782:	f7d8 fd0b 	bl	1919c <ocrypto_bigint_cadd256>
   40786:	4680      	mov	r8, r0
   40788:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   4078a:	494c      	ldr	r1, [pc, #304]	; (408bc <ocrypto_curve_p256_scalarmult+0x154>)
   4078c:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   40790:	f1c7 0201 	rsb	r2, r7, #1
   40794:	a810      	add	r0, sp, #64	; 0x40
   40796:	f7d8 fd01 	bl	1919c <ocrypto_bigint_cadd256>
   4079a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   4079c:	4652      	mov	r2, sl
   4079e:	43ed      	mvns	r5, r5
   407a0:	a928      	add	r1, sp, #160	; 0xa0
   407a2:	a818      	add	r0, sp, #96	; 0x60
   407a4:	f7ff fec4 	bl	40530 <p256_zdblu>
   407a8:	0fed      	lsrs	r5, r5, #31
   407aa:	a920      	add	r1, sp, #128	; 0x80
   407ac:	f1c5 0201 	rsb	r2, r5, #1
   407b0:	4608      	mov	r0, r1
   407b2:	f7ff fdad 	bl	40310 <ocrypto_mod_p256_cneg>
   407b6:	26fe      	movs	r6, #254	; 0xfe
   407b8:	f1c8 0801 	rsb	r8, r8, #1
   407bc:	466a      	mov	r2, sp
   407be:	a918      	add	r1, sp, #96	; 0x60
   407c0:	a828      	add	r0, sp, #160	; 0xa0
   407c2:	f7ff ff77 	bl	406b4 <p256_zaddu>
   407c6:	1173      	asrs	r3, r6, #5
   407c8:	aa38      	add	r2, sp, #224	; 0xe0
   407ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   407ce:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   407d2:	f006 031f 	and.w	r3, r6, #31
   407d6:	40dc      	lsrs	r4, r3
   407d8:	f004 0401 	and.w	r4, r4, #1
   407dc:	4065      	eors	r5, r4
   407de:	462a      	mov	r2, r5
   407e0:	a928      	add	r1, sp, #160	; 0xa0
   407e2:	a818      	add	r0, sp, #96	; 0x60
   407e4:	f7d8 fd45 	bl	19272 <ocrypto_bigint_cswap256>
   407e8:	462a      	mov	r2, r5
   407ea:	a930      	add	r1, sp, #192	; 0xc0
   407ec:	a820      	add	r0, sp, #128	; 0x80
   407ee:	f7d8 fd40 	bl	19272 <ocrypto_bigint_cswap256>
   407f2:	3e01      	subs	r6, #1
   407f4:	a928      	add	r1, sp, #160	; 0xa0
   407f6:	a818      	add	r0, sp, #96	; 0x60
   407f8:	f7ff fef6 	bl	405e8 <p256_zaddc>
   407fc:	1c73      	adds	r3, r6, #1
   407fe:	4625      	mov	r5, r4
   40800:	d1dc      	bne.n	407bc <ocrypto_curve_p256_scalarmult+0x54>
   40802:	f1c4 0201 	rsb	r2, r4, #1
   40806:	a808      	add	r0, sp, #32
   40808:	a920      	add	r1, sp, #128	; 0x80
   4080a:	f7ff fd81 	bl	40310 <ocrypto_mod_p256_cneg>
   4080e:	407d      	eors	r5, r7
   40810:	466a      	mov	r2, sp
   40812:	a918      	add	r1, sp, #96	; 0x60
   40814:	a828      	add	r0, sp, #160	; 0xa0
   40816:	f7ff ff4d 	bl	406b4 <p256_zaddu>
   4081a:	a928      	add	r1, sp, #160	; 0xa0
   4081c:	462a      	mov	r2, r5
   4081e:	a818      	add	r0, sp, #96	; 0x60
   40820:	f7d8 fd27 	bl	19272 <ocrypto_bigint_cswap256>
   40824:	462a      	mov	r2, r5
   40826:	a930      	add	r1, sp, #192	; 0xc0
   40828:	a820      	add	r0, sp, #128	; 0x80
   4082a:	f7d8 fd22 	bl	19272 <ocrypto_bigint_cswap256>
   4082e:	a908      	add	r1, sp, #32
   40830:	466a      	mov	r2, sp
   40832:	4608      	mov	r0, r1
   40834:	f7d9 f83b 	bl	198ae <ocrypto_mod_p256_mul>
   40838:	a908      	add	r1, sp, #32
   4083a:	4608      	mov	r0, r1
   4083c:	f7ff fd9e 	bl	4037c <ocrypto_mod_p256_invert>
   40840:	a908      	add	r1, sp, #32
   40842:	f109 0420 	add.w	r4, r9, #32
   40846:	f10a 0220 	add.w	r2, sl, #32
   4084a:	4608      	mov	r0, r1
   4084c:	f7d9 f82f 	bl	198ae <ocrypto_mod_p256_mul>
   40850:	a920      	add	r1, sp, #128	; 0x80
   40852:	aa08      	add	r2, sp, #32
   40854:	4620      	mov	r0, r4
   40856:	f7d9 f82a 	bl	198ae <ocrypto_mod_p256_mul>
   4085a:	aa08      	add	r2, sp, #32
   4085c:	a918      	add	r1, sp, #96	; 0x60
   4085e:	4668      	mov	r0, sp
   40860:	f7d9 f825 	bl	198ae <ocrypto_mod_p256_mul>
   40864:	4669      	mov	r1, sp
   40866:	4668      	mov	r0, sp
   40868:	f7d9 f820 	bl	198ac <ocrypto_mod_p256_square>
   4086c:	aa18      	add	r2, sp, #96	; 0x60
   4086e:	4669      	mov	r1, sp
   40870:	a808      	add	r0, sp, #32
   40872:	f7d9 f81c 	bl	198ae <ocrypto_mod_p256_mul>
   40876:	4621      	mov	r1, r4
   40878:	4668      	mov	r0, sp
   4087a:	f7d9 f817 	bl	198ac <ocrypto_mod_p256_square>
   4087e:	aa08      	add	r2, sp, #32
   40880:	4669      	mov	r1, sp
   40882:	4610      	mov	r0, r2
   40884:	f7d8 ffe5 	bl	19852 <ocrypto_mod_p256_sub>
   40888:	a908      	add	r1, sp, #32
   4088a:	4a0e      	ldr	r2, [pc, #56]	; (408c4 <ocrypto_curve_p256_scalarmult+0x15c>)
   4088c:	4668      	mov	r0, sp
   4088e:	f7d8 ffe0 	bl	19852 <ocrypto_mod_p256_sub>
   40892:	4620      	mov	r0, r4
   40894:	2120      	movs	r1, #32
   40896:	f7d8 ff82 	bl	1979e <ocrypto_constant_time_is_zero>
   4089a:	a908      	add	r1, sp, #32
   4089c:	4243      	negs	r3, r0
   4089e:	4602      	mov	r2, r0
   408a0:	4668      	mov	r0, sp
   408a2:	ea43 0808 	orr.w	r8, r3, r8
   408a6:	f7d8 fce4 	bl	19272 <ocrypto_bigint_cswap256>
   408aa:	4648      	mov	r0, r9
   408ac:	4669      	mov	r1, sp
   408ae:	4a06      	ldr	r2, [pc, #24]	; (408c8 <ocrypto_curve_p256_scalarmult+0x160>)
   408b0:	f7d8 fffd 	bl	198ae <ocrypto_mod_p256_mul>
   408b4:	4640      	mov	r0, r8
   408b6:	b038      	add	sp, #224	; 0xe0
   408b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   408bc:	0004c564 	.word	0x0004c564
   408c0:	0004c4e4 	.word	0x0004c4e4
   408c4:	0004c544 	.word	0x0004c544
   408c8:	0004c504 	.word	0x0004c504

000408cc <ocrypto_curve_p256_scalarmult_base>:
   408cc:	460a      	mov	r2, r1
   408ce:	4901      	ldr	r1, [pc, #4]	; (408d4 <ocrypto_curve_p256_scalarmult_base+0x8>)
   408d0:	f7ff bf4a 	b.w	40768 <ocrypto_curve_p256_scalarmult>
   408d4:	0004c4a4 	.word	0x0004c4a4

000408d8 <__assert_func>:
   408d8:	4c0a      	ldr	r4, [pc, #40]	; (40904 <__assert_func+0x2c>)
   408da:	461d      	mov	r5, r3
   408dc:	4606      	mov	r6, r0
   408de:	6823      	ldr	r3, [r4, #0]
   408e0:	b500      	push	{lr}
   408e2:	68d8      	ldr	r0, [r3, #12]
   408e4:	b085      	sub	sp, #20
   408e6:	b152      	cbz	r2, 408fe <__assert_func+0x26>
   408e8:	4c07      	ldr	r4, [pc, #28]	; (40908 <__assert_func+0x30>)
   408ea:	9202      	str	r2, [sp, #8]
   408ec:	4633      	mov	r3, r6
   408ee:	462a      	mov	r2, r5
   408f0:	9100      	str	r1, [sp, #0]
   408f2:	9401      	str	r4, [sp, #4]
   408f4:	4905      	ldr	r1, [pc, #20]	; (4090c <__assert_func+0x34>)
   408f6:	f000 f811 	bl	4091c <fiprintf>
   408fa:	f003 ff1f 	bl	4473c <abort>
   408fe:	4c04      	ldr	r4, [pc, #16]	; (40910 <__assert_func+0x38>)
   40900:	4622      	mov	r2, r4
   40902:	e7f2      	b.n	408ea <__assert_func+0x12>
   40904:	20031bb8 	.word	0x20031bb8
   40908:	0004c584 	.word	0x0004c584
   4090c:	0004c594 	.word	0x0004c594
   40910:	0004b8e8 	.word	0x0004b8e8

00040914 <atoi>:
   40914:	220a      	movs	r2, #10
   40916:	2100      	movs	r1, #0
   40918:	f001 bb54 	b.w	41fc4 <strtol>

0004091c <fiprintf>:
   4091c:	b40e      	push	{r1, r2, r3}
   4091e:	b510      	push	{r4, lr}
   40920:	b083      	sub	sp, #12
   40922:	4b07      	ldr	r3, [pc, #28]	; (40940 <fiprintf+0x24>)
   40924:	4601      	mov	r1, r0
   40926:	ac05      	add	r4, sp, #20
   40928:	6818      	ldr	r0, [r3, #0]
   4092a:	f854 2b04 	ldr.w	r2, [r4], #4
   4092e:	4623      	mov	r3, r4
   40930:	9401      	str	r4, [sp, #4]
   40932:	f002 ff33 	bl	4379c <_vfiprintf_r>
   40936:	b003      	add	sp, #12
   40938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4093c:	b003      	add	sp, #12
   4093e:	4770      	bx	lr
   40940:	20031bb8 	.word	0x20031bb8

00040944 <__locale_mb_cur_max>:
   40944:	4b04      	ldr	r3, [pc, #16]	; (40958 <__locale_mb_cur_max+0x14>)
   40946:	4a05      	ldr	r2, [pc, #20]	; (4095c <__locale_mb_cur_max+0x18>)
   40948:	681b      	ldr	r3, [r3, #0]
   4094a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   4094c:	2b00      	cmp	r3, #0
   4094e:	bf08      	it	eq
   40950:	4613      	moveq	r3, r2
   40952:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   40956:	4770      	bx	lr
   40958:	20031bb8 	.word	0x20031bb8
   4095c:	20031bbc 	.word	0x20031bbc

00040960 <__locale_ctype_ptr_l>:
   40960:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   40964:	4770      	bx	lr
   40966:	bf00      	nop

00040968 <__locale_ctype_ptr>:
   40968:	4b04      	ldr	r3, [pc, #16]	; (4097c <__locale_ctype_ptr+0x14>)
   4096a:	4a05      	ldr	r2, [pc, #20]	; (40980 <__locale_ctype_ptr+0x18>)
   4096c:	681b      	ldr	r3, [r3, #0]
   4096e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   40970:	2b00      	cmp	r3, #0
   40972:	bf08      	it	eq
   40974:	4613      	moveq	r3, r2
   40976:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   4097a:	4770      	bx	lr
   4097c:	20031bb8 	.word	0x20031bb8
   40980:	20031bbc 	.word	0x20031bbc

00040984 <malloc>:
   40984:	4b02      	ldr	r3, [pc, #8]	; (40990 <malloc+0xc>)
   40986:	4601      	mov	r1, r0
   40988:	6818      	ldr	r0, [r3, #0]
   4098a:	f000 b80b 	b.w	409a4 <_malloc_r>
   4098e:	bf00      	nop
   40990:	20031bb8 	.word	0x20031bb8

00040994 <free>:
   40994:	4b02      	ldr	r3, [pc, #8]	; (409a0 <free+0xc>)
   40996:	4601      	mov	r1, r0
   40998:	6818      	ldr	r0, [r3, #0]
   4099a:	f004 b9b5 	b.w	44d08 <_free_r>
   4099e:	bf00      	nop
   409a0:	20031bb8 	.word	0x20031bb8

000409a4 <_malloc_r>:
   409a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   409a8:	f101 050b 	add.w	r5, r1, #11
   409ac:	b083      	sub	sp, #12
   409ae:	4606      	mov	r6, r0
   409b0:	2d16      	cmp	r5, #22
   409b2:	d824      	bhi.n	409fe <_malloc_r+0x5a>
   409b4:	2910      	cmp	r1, #16
   409b6:	f200 80d1 	bhi.w	40b5c <_malloc_r+0x1b8>
   409ba:	f000 fb87 	bl	410cc <__malloc_lock>
   409be:	2510      	movs	r5, #16
   409c0:	2218      	movs	r2, #24
   409c2:	2402      	movs	r4, #2
   409c4:	4fca      	ldr	r7, [pc, #808]	; (40cf0 <_malloc_r+0x34c>)
   409c6:	443a      	add	r2, r7
   409c8:	6853      	ldr	r3, [r2, #4]
   409ca:	f1a2 0108 	sub.w	r1, r2, #8
   409ce:	428b      	cmp	r3, r1
   409d0:	f000 8187 	beq.w	40ce2 <_malloc_r+0x33e>
   409d4:	685a      	ldr	r2, [r3, #4]
   409d6:	f103 0908 	add.w	r9, r3, #8
   409da:	68d9      	ldr	r1, [r3, #12]
   409dc:	4630      	mov	r0, r6
   409de:	f022 0203 	bic.w	r2, r2, #3
   409e2:	689d      	ldr	r5, [r3, #8]
   409e4:	4413      	add	r3, r2
   409e6:	60e9      	str	r1, [r5, #12]
   409e8:	608d      	str	r5, [r1, #8]
   409ea:	685a      	ldr	r2, [r3, #4]
   409ec:	f042 0201 	orr.w	r2, r2, #1
   409f0:	605a      	str	r2, [r3, #4]
   409f2:	f000 fb71 	bl	410d8 <__malloc_unlock>
   409f6:	4648      	mov	r0, r9
   409f8:	b003      	add	sp, #12
   409fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   409fe:	f035 0507 	bics.w	r5, r5, #7
   40a02:	f100 80ab 	bmi.w	40b5c <_malloc_r+0x1b8>
   40a06:	42a9      	cmp	r1, r5
   40a08:	f200 80a8 	bhi.w	40b5c <_malloc_r+0x1b8>
   40a0c:	f000 fb5e 	bl	410cc <__malloc_lock>
   40a10:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   40a14:	f0c0 8192 	bcc.w	40d3c <_malloc_r+0x398>
   40a18:	0a6b      	lsrs	r3, r5, #9
   40a1a:	d00b      	beq.n	40a34 <_malloc_r+0x90>
   40a1c:	2b04      	cmp	r3, #4
   40a1e:	f240 8096 	bls.w	40b4e <_malloc_r+0x1aa>
   40a22:	2b14      	cmp	r3, #20
   40a24:	f200 81c7 	bhi.w	40db6 <_malloc_r+0x412>
   40a28:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   40a2c:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   40a30:	00e3      	lsls	r3, r4, #3
   40a32:	e004      	b.n	40a3e <_malloc_r+0x9a>
   40a34:	f44f 7300 	mov.w	r3, #512	; 0x200
   40a38:	2440      	movs	r4, #64	; 0x40
   40a3a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   40a3e:	4fac      	ldr	r7, [pc, #688]	; (40cf0 <_malloc_r+0x34c>)
   40a40:	443b      	add	r3, r7
   40a42:	f1a3 0008 	sub.w	r0, r3, #8
   40a46:	685b      	ldr	r3, [r3, #4]
   40a48:	4298      	cmp	r0, r3
   40a4a:	d106      	bne.n	40a5a <_malloc_r+0xb6>
   40a4c:	e00c      	b.n	40a68 <_malloc_r+0xc4>
   40a4e:	2900      	cmp	r1, #0
   40a50:	f280 8135 	bge.w	40cbe <_malloc_r+0x31a>
   40a54:	68db      	ldr	r3, [r3, #12]
   40a56:	4298      	cmp	r0, r3
   40a58:	d006      	beq.n	40a68 <_malloc_r+0xc4>
   40a5a:	685a      	ldr	r2, [r3, #4]
   40a5c:	f022 0203 	bic.w	r2, r2, #3
   40a60:	1b51      	subs	r1, r2, r5
   40a62:	290f      	cmp	r1, #15
   40a64:	ddf3      	ble.n	40a4e <_malloc_r+0xaa>
   40a66:	4664      	mov	r4, ip
   40a68:	693a      	ldr	r2, [r7, #16]
   40a6a:	f8df c29c 	ldr.w	ip, [pc, #668]	; 40d08 <_malloc_r+0x364>
   40a6e:	4562      	cmp	r2, ip
   40a70:	d07c      	beq.n	40b6c <_malloc_r+0x1c8>
   40a72:	6853      	ldr	r3, [r2, #4]
   40a74:	f023 0303 	bic.w	r3, r3, #3
   40a78:	1b59      	subs	r1, r3, r5
   40a7a:	290f      	cmp	r1, #15
   40a7c:	f300 8148 	bgt.w	40d10 <_malloc_r+0x36c>
   40a80:	2900      	cmp	r1, #0
   40a82:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   40a86:	da54      	bge.n	40b32 <_malloc_r+0x18e>
   40a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   40a8c:	f080 8172 	bcs.w	40d74 <_malloc_r+0x3d0>
   40a90:	08db      	lsrs	r3, r3, #3
   40a92:	2101      	movs	r1, #1
   40a94:	1098      	asrs	r0, r3, #2
   40a96:	eb03 0e01 	add.w	lr, r3, r1
   40a9a:	4081      	lsls	r1, r0
   40a9c:	eb07 08ce 	add.w	r8, r7, lr, lsl #3
   40aa0:	6878      	ldr	r0, [r7, #4]
   40aa2:	f857 303e 	ldr.w	r3, [r7, lr, lsl #3]
   40aa6:	4301      	orrs	r1, r0
   40aa8:	f1a8 0008 	sub.w	r0, r8, #8
   40aac:	6093      	str	r3, [r2, #8]
   40aae:	60d0      	str	r0, [r2, #12]
   40ab0:	6079      	str	r1, [r7, #4]
   40ab2:	f847 203e 	str.w	r2, [r7, lr, lsl #3]
   40ab6:	60da      	str	r2, [r3, #12]
   40ab8:	10a3      	asrs	r3, r4, #2
   40aba:	2001      	movs	r0, #1
   40abc:	4098      	lsls	r0, r3
   40abe:	4288      	cmp	r0, r1
   40ac0:	d85a      	bhi.n	40b78 <_malloc_r+0x1d4>
   40ac2:	4208      	tst	r0, r1
   40ac4:	d105      	bne.n	40ad2 <_malloc_r+0x12e>
   40ac6:	f024 0403 	bic.w	r4, r4, #3
   40aca:	0040      	lsls	r0, r0, #1
   40acc:	3404      	adds	r4, #4
   40ace:	4208      	tst	r0, r1
   40ad0:	d0fb      	beq.n	40aca <_malloc_r+0x126>
   40ad2:	eb07 09c4 	add.w	r9, r7, r4, lsl #3
   40ad6:	46a0      	mov	r8, r4
   40ad8:	46ce      	mov	lr, r9
   40ada:	f8de 300c 	ldr.w	r3, [lr, #12]
   40ade:	459e      	cmp	lr, r3
   40ae0:	d107      	bne.n	40af2 <_malloc_r+0x14e>
   40ae2:	e12f      	b.n	40d44 <_malloc_r+0x3a0>
   40ae4:	2a00      	cmp	r2, #0
   40ae6:	f280 8136 	bge.w	40d56 <_malloc_r+0x3b2>
   40aea:	68db      	ldr	r3, [r3, #12]
   40aec:	459e      	cmp	lr, r3
   40aee:	f000 8129 	beq.w	40d44 <_malloc_r+0x3a0>
   40af2:	6859      	ldr	r1, [r3, #4]
   40af4:	f021 0103 	bic.w	r1, r1, #3
   40af8:	1b4a      	subs	r2, r1, r5
   40afa:	2a0f      	cmp	r2, #15
   40afc:	ddf2      	ble.n	40ae4 <_malloc_r+0x140>
   40afe:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   40b02:	f045 0401 	orr.w	r4, r5, #1
   40b06:	f042 0801 	orr.w	r8, r2, #1
   40b0a:	441d      	add	r5, r3
   40b0c:	4630      	mov	r0, r6
   40b0e:	689e      	ldr	r6, [r3, #8]
   40b10:	605c      	str	r4, [r3, #4]
   40b12:	f103 0908 	add.w	r9, r3, #8
   40b16:	f8c6 e00c 	str.w	lr, [r6, #12]
   40b1a:	f8ce 6008 	str.w	r6, [lr, #8]
   40b1e:	e9c7 5504 	strd	r5, r5, [r7, #16]
   40b22:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   40b26:	f8c5 8004 	str.w	r8, [r5, #4]
   40b2a:	505a      	str	r2, [r3, r1]
   40b2c:	f000 fad4 	bl	410d8 <__malloc_unlock>
   40b30:	e761      	b.n	409f6 <_malloc_r+0x52>
   40b32:	4413      	add	r3, r2
   40b34:	f102 0908 	add.w	r9, r2, #8
   40b38:	4630      	mov	r0, r6
   40b3a:	685a      	ldr	r2, [r3, #4]
   40b3c:	f042 0201 	orr.w	r2, r2, #1
   40b40:	605a      	str	r2, [r3, #4]
   40b42:	f000 fac9 	bl	410d8 <__malloc_unlock>
   40b46:	4648      	mov	r0, r9
   40b48:	b003      	add	sp, #12
   40b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40b4e:	09ab      	lsrs	r3, r5, #6
   40b50:	f103 0439 	add.w	r4, r3, #57	; 0x39
   40b54:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   40b58:	00e3      	lsls	r3, r4, #3
   40b5a:	e770      	b.n	40a3e <_malloc_r+0x9a>
   40b5c:	f04f 0900 	mov.w	r9, #0
   40b60:	230c      	movs	r3, #12
   40b62:	4648      	mov	r0, r9
   40b64:	6033      	str	r3, [r6, #0]
   40b66:	b003      	add	sp, #12
   40b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40b6c:	10a3      	asrs	r3, r4, #2
   40b6e:	2001      	movs	r0, #1
   40b70:	6879      	ldr	r1, [r7, #4]
   40b72:	4098      	lsls	r0, r3
   40b74:	4288      	cmp	r0, r1
   40b76:	d9a4      	bls.n	40ac2 <_malloc_r+0x11e>
   40b78:	f8d7 9008 	ldr.w	r9, [r7, #8]
   40b7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   40b80:	f023 0803 	bic.w	r8, r3, #3
   40b84:	eba8 0205 	sub.w	r2, r8, r5
   40b88:	2a0f      	cmp	r2, #15
   40b8a:	dd13      	ble.n	40bb4 <_malloc_r+0x210>
   40b8c:	45a8      	cmp	r8, r5
   40b8e:	d311      	bcc.n	40bb4 <_malloc_r+0x210>
   40b90:	f045 0301 	orr.w	r3, r5, #1
   40b94:	f042 0201 	orr.w	r2, r2, #1
   40b98:	444d      	add	r5, r9
   40b9a:	f109 0908 	add.w	r9, r9, #8
   40b9e:	f849 3c04 	str.w	r3, [r9, #-4]
   40ba2:	4630      	mov	r0, r6
   40ba4:	60bd      	str	r5, [r7, #8]
   40ba6:	606a      	str	r2, [r5, #4]
   40ba8:	f000 fa96 	bl	410d8 <__malloc_unlock>
   40bac:	4648      	mov	r0, r9
   40bae:	b003      	add	sp, #12
   40bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40bb4:	f8df b154 	ldr.w	fp, [pc, #340]	; 40d0c <_malloc_r+0x368>
   40bb8:	4b4e      	ldr	r3, [pc, #312]	; (40cf4 <_malloc_r+0x350>)
   40bba:	f8db 2000 	ldr.w	r2, [fp]
   40bbe:	681b      	ldr	r3, [r3, #0]
   40bc0:	3201      	adds	r2, #1
   40bc2:	442b      	add	r3, r5
   40bc4:	f000 8135 	beq.w	40e32 <_malloc_r+0x48e>
   40bc8:	f241 020f 	movw	r2, #4111	; 0x100f
   40bcc:	4c4a      	ldr	r4, [pc, #296]	; (40cf8 <_malloc_r+0x354>)
   40bce:	441a      	add	r2, r3
   40bd0:	4014      	ands	r4, r2
   40bd2:	4621      	mov	r1, r4
   40bd4:	4630      	mov	r0, r6
   40bd6:	f000 fc43 	bl	41460 <_sbrk_r>
   40bda:	f1b0 3fff 	cmp.w	r0, #4294967295
   40bde:	4682      	mov	sl, r0
   40be0:	f000 80f7 	beq.w	40dd2 <_malloc_r+0x42e>
   40be4:	eb09 0008 	add.w	r0, r9, r8
   40be8:	4550      	cmp	r0, sl
   40bea:	f200 80f0 	bhi.w	40dce <_malloc_r+0x42a>
   40bee:	4b43      	ldr	r3, [pc, #268]	; (40cfc <_malloc_r+0x358>)
   40bf0:	681a      	ldr	r2, [r3, #0]
   40bf2:	4422      	add	r2, r4
   40bf4:	601a      	str	r2, [r3, #0]
   40bf6:	f000 8133 	beq.w	40e60 <_malloc_r+0x4bc>
   40bfa:	f8db 1000 	ldr.w	r1, [fp]
   40bfe:	3101      	adds	r1, #1
   40c00:	f000 814c 	beq.w	40e9c <_malloc_r+0x4f8>
   40c04:	ebaa 0000 	sub.w	r0, sl, r0
   40c08:	4402      	add	r2, r0
   40c0a:	601a      	str	r2, [r3, #0]
   40c0c:	f01a 0207 	ands.w	r2, sl, #7
   40c10:	f000 811b 	beq.w	40e4a <_malloc_r+0x4a6>
   40c14:	f1c2 0008 	rsb	r0, r2, #8
   40c18:	f241 0108 	movw	r1, #4104	; 0x1008
   40c1c:	4482      	add	sl, r0
   40c1e:	1a89      	subs	r1, r1, r2
   40c20:	4454      	add	r4, sl
   40c22:	4630      	mov	r0, r6
   40c24:	9301      	str	r3, [sp, #4]
   40c26:	f3c4 020b 	ubfx	r2, r4, #0, #12
   40c2a:	1a8c      	subs	r4, r1, r2
   40c2c:	4621      	mov	r1, r4
   40c2e:	f000 fc17 	bl	41460 <_sbrk_r>
   40c32:	1c43      	adds	r3, r0, #1
   40c34:	9b01      	ldr	r3, [sp, #4]
   40c36:	f000 812e 	beq.w	40e96 <_malloc_r+0x4f2>
   40c3a:	eba0 010a 	sub.w	r1, r0, sl
   40c3e:	4421      	add	r1, r4
   40c40:	f041 0101 	orr.w	r1, r1, #1
   40c44:	681a      	ldr	r2, [r3, #0]
   40c46:	45b9      	cmp	r9, r7
   40c48:	f8c7 a008 	str.w	sl, [r7, #8]
   40c4c:	4422      	add	r2, r4
   40c4e:	f8ca 1004 	str.w	r1, [sl, #4]
   40c52:	601a      	str	r2, [r3, #0]
   40c54:	d017      	beq.n	40c86 <_malloc_r+0x2e2>
   40c56:	f1b8 0f0f 	cmp.w	r8, #15
   40c5a:	f240 8118 	bls.w	40e8e <_malloc_r+0x4ea>
   40c5e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   40c62:	f1a8 010c 	sub.w	r1, r8, #12
   40c66:	f04f 0c05 	mov.w	ip, #5
   40c6a:	f021 0107 	bic.w	r1, r1, #7
   40c6e:	f000 0001 	and.w	r0, r0, #1
   40c72:	eb09 0401 	add.w	r4, r9, r1
   40c76:	4308      	orrs	r0, r1
   40c78:	290f      	cmp	r1, #15
   40c7a:	f8c9 0004 	str.w	r0, [r9, #4]
   40c7e:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   40c82:	f200 8122 	bhi.w	40eca <_malloc_r+0x526>
   40c86:	4b1e      	ldr	r3, [pc, #120]	; (40d00 <_malloc_r+0x35c>)
   40c88:	481e      	ldr	r0, [pc, #120]	; (40d04 <_malloc_r+0x360>)
   40c8a:	6819      	ldr	r1, [r3, #0]
   40c8c:	f8d7 9008 	ldr.w	r9, [r7, #8]
   40c90:	428a      	cmp	r2, r1
   40c92:	6801      	ldr	r1, [r0, #0]
   40c94:	bf88      	it	hi
   40c96:	601a      	strhi	r2, [r3, #0]
   40c98:	428a      	cmp	r2, r1
   40c9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   40c9e:	bf88      	it	hi
   40ca0:	6002      	strhi	r2, [r0, #0]
   40ca2:	f023 0303 	bic.w	r3, r3, #3
   40ca6:	1b5a      	subs	r2, r3, r5
   40ca8:	2a0f      	cmp	r2, #15
   40caa:	dd02      	ble.n	40cb2 <_malloc_r+0x30e>
   40cac:	429d      	cmp	r5, r3
   40cae:	f67f af6f 	bls.w	40b90 <_malloc_r+0x1ec>
   40cb2:	4630      	mov	r0, r6
   40cb4:	f04f 0900 	mov.w	r9, #0
   40cb8:	f000 fa0e 	bl	410d8 <__malloc_unlock>
   40cbc:	e69b      	b.n	409f6 <_malloc_r+0x52>
   40cbe:	441a      	add	r2, r3
   40cc0:	f103 0908 	add.w	r9, r3, #8
   40cc4:	4630      	mov	r0, r6
   40cc6:	6851      	ldr	r1, [r2, #4]
   40cc8:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   40ccc:	f041 0101 	orr.w	r1, r1, #1
   40cd0:	60fd      	str	r5, [r7, #12]
   40cd2:	60af      	str	r7, [r5, #8]
   40cd4:	6051      	str	r1, [r2, #4]
   40cd6:	f000 f9ff 	bl	410d8 <__malloc_unlock>
   40cda:	4648      	mov	r0, r9
   40cdc:	b003      	add	sp, #12
   40cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40ce2:	68d3      	ldr	r3, [r2, #12]
   40ce4:	429a      	cmp	r2, r3
   40ce6:	f47f ae75 	bne.w	409d4 <_malloc_r+0x30>
   40cea:	3402      	adds	r4, #2
   40cec:	e6bc      	b.n	40a68 <_malloc_r+0xc4>
   40cee:	bf00      	nop
   40cf0:	20031d28 	.word	0x20031d28
   40cf4:	2002a6c8 	.word	0x2002a6c8
   40cf8:	fffff000 	.word	0xfffff000
   40cfc:	2002a698 	.word	0x2002a698
   40d00:	2002a6c0 	.word	0x2002a6c0
   40d04:	2002a6c4 	.word	0x2002a6c4
   40d08:	20031d30 	.word	0x20031d30
   40d0c:	20032130 	.word	0x20032130
   40d10:	f045 0401 	orr.w	r4, r5, #1
   40d14:	f041 0e01 	orr.w	lr, r1, #1
   40d18:	4415      	add	r5, r2
   40d1a:	f102 0908 	add.w	r9, r2, #8
   40d1e:	6054      	str	r4, [r2, #4]
   40d20:	4630      	mov	r0, r6
   40d22:	e9c7 5504 	strd	r5, r5, [r7, #16]
   40d26:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   40d2a:	f8c5 e004 	str.w	lr, [r5, #4]
   40d2e:	50d1      	str	r1, [r2, r3]
   40d30:	f000 f9d2 	bl	410d8 <__malloc_unlock>
   40d34:	4648      	mov	r0, r9
   40d36:	b003      	add	sp, #12
   40d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40d3c:	08ec      	lsrs	r4, r5, #3
   40d3e:	f105 0208 	add.w	r2, r5, #8
   40d42:	e63f      	b.n	409c4 <_malloc_r+0x20>
   40d44:	f108 0801 	add.w	r8, r8, #1
   40d48:	f10e 0e08 	add.w	lr, lr, #8
   40d4c:	f018 0f03 	tst.w	r8, #3
   40d50:	f47f aec3 	bne.w	40ada <_malloc_r+0x136>
   40d54:	e055      	b.n	40e02 <_malloc_r+0x45e>
   40d56:	4419      	add	r1, r3
   40d58:	68da      	ldr	r2, [r3, #12]
   40d5a:	4699      	mov	r9, r3
   40d5c:	4630      	mov	r0, r6
   40d5e:	684b      	ldr	r3, [r1, #4]
   40d60:	f859 5f08 	ldr.w	r5, [r9, #8]!
   40d64:	f043 0301 	orr.w	r3, r3, #1
   40d68:	604b      	str	r3, [r1, #4]
   40d6a:	60ea      	str	r2, [r5, #12]
   40d6c:	6095      	str	r5, [r2, #8]
   40d6e:	f000 f9b3 	bl	410d8 <__malloc_unlock>
   40d72:	e640      	b.n	409f6 <_malloc_r+0x52>
   40d74:	0a59      	lsrs	r1, r3, #9
   40d76:	2904      	cmp	r1, #4
   40d78:	d932      	bls.n	40de0 <_malloc_r+0x43c>
   40d7a:	2914      	cmp	r1, #20
   40d7c:	d868      	bhi.n	40e50 <_malloc_r+0x4ac>
   40d7e:	f101 005c 	add.w	r0, r1, #92	; 0x5c
   40d82:	315b      	adds	r1, #91	; 0x5b
   40d84:	00c0      	lsls	r0, r0, #3
   40d86:	eb07 0e00 	add.w	lr, r7, r0
   40d8a:	5838      	ldr	r0, [r7, r0]
   40d8c:	f1ae 0e08 	sub.w	lr, lr, #8
   40d90:	4586      	cmp	lr, r0
   40d92:	d051      	beq.n	40e38 <_malloc_r+0x494>
   40d94:	6841      	ldr	r1, [r0, #4]
   40d96:	f021 0103 	bic.w	r1, r1, #3
   40d9a:	4299      	cmp	r1, r3
   40d9c:	d902      	bls.n	40da4 <_malloc_r+0x400>
   40d9e:	6880      	ldr	r0, [r0, #8]
   40da0:	4586      	cmp	lr, r0
   40da2:	d1f7      	bne.n	40d94 <_malloc_r+0x3f0>
   40da4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   40da8:	6879      	ldr	r1, [r7, #4]
   40daa:	e9c2 0e02 	strd	r0, lr, [r2, #8]
   40dae:	f8ce 2008 	str.w	r2, [lr, #8]
   40db2:	60c2      	str	r2, [r0, #12]
   40db4:	e680      	b.n	40ab8 <_malloc_r+0x114>
   40db6:	2b54      	cmp	r3, #84	; 0x54
   40db8:	d918      	bls.n	40dec <_malloc_r+0x448>
   40dba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   40dbe:	d85b      	bhi.n	40e78 <_malloc_r+0x4d4>
   40dc0:	0beb      	lsrs	r3, r5, #15
   40dc2:	f103 0478 	add.w	r4, r3, #120	; 0x78
   40dc6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   40dca:	00e3      	lsls	r3, r4, #3
   40dcc:	e637      	b.n	40a3e <_malloc_r+0x9a>
   40dce:	45b9      	cmp	r9, r7
   40dd0:	d067      	beq.n	40ea2 <_malloc_r+0x4fe>
   40dd2:	f8d7 9008 	ldr.w	r9, [r7, #8]
   40dd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   40dda:	f023 0303 	bic.w	r3, r3, #3
   40dde:	e762      	b.n	40ca6 <_malloc_r+0x302>
   40de0:	0999      	lsrs	r1, r3, #6
   40de2:	f101 0039 	add.w	r0, r1, #57	; 0x39
   40de6:	3138      	adds	r1, #56	; 0x38
   40de8:	00c0      	lsls	r0, r0, #3
   40dea:	e7cc      	b.n	40d86 <_malloc_r+0x3e2>
   40dec:	0b2b      	lsrs	r3, r5, #12
   40dee:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   40df2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   40df6:	00e3      	lsls	r3, r4, #3
   40df8:	e621      	b.n	40a3e <_malloc_r+0x9a>
   40dfa:	f8d9 9000 	ldr.w	r9, [r9]
   40dfe:	4599      	cmp	r9, r3
   40e00:	d17a      	bne.n	40ef8 <_malloc_r+0x554>
   40e02:	f014 0f03 	tst.w	r4, #3
   40e06:	f1a9 0308 	sub.w	r3, r9, #8
   40e0a:	f104 34ff 	add.w	r4, r4, #4294967295
   40e0e:	d1f4      	bne.n	40dfa <_malloc_r+0x456>
   40e10:	687b      	ldr	r3, [r7, #4]
   40e12:	ea23 0300 	bic.w	r3, r3, r0
   40e16:	607b      	str	r3, [r7, #4]
   40e18:	0040      	lsls	r0, r0, #1
   40e1a:	4298      	cmp	r0, r3
   40e1c:	f63f aeac 	bhi.w	40b78 <_malloc_r+0x1d4>
   40e20:	b918      	cbnz	r0, 40e2a <_malloc_r+0x486>
   40e22:	e6a9      	b.n	40b78 <_malloc_r+0x1d4>
   40e24:	0040      	lsls	r0, r0, #1
   40e26:	f108 0804 	add.w	r8, r8, #4
   40e2a:	4218      	tst	r0, r3
   40e2c:	d0fa      	beq.n	40e24 <_malloc_r+0x480>
   40e2e:	4644      	mov	r4, r8
   40e30:	e64f      	b.n	40ad2 <_malloc_r+0x12e>
   40e32:	f103 0410 	add.w	r4, r3, #16
   40e36:	e6cc      	b.n	40bd2 <_malloc_r+0x22e>
   40e38:	1089      	asrs	r1, r1, #2
   40e3a:	f04f 0801 	mov.w	r8, #1
   40e3e:	687b      	ldr	r3, [r7, #4]
   40e40:	fa08 f101 	lsl.w	r1, r8, r1
   40e44:	4319      	orrs	r1, r3
   40e46:	6079      	str	r1, [r7, #4]
   40e48:	e7af      	b.n	40daa <_malloc_r+0x406>
   40e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   40e4e:	e6e7      	b.n	40c20 <_malloc_r+0x27c>
   40e50:	2954      	cmp	r1, #84	; 0x54
   40e52:	d82b      	bhi.n	40eac <_malloc_r+0x508>
   40e54:	0b19      	lsrs	r1, r3, #12
   40e56:	f101 006f 	add.w	r0, r1, #111	; 0x6f
   40e5a:	316e      	adds	r1, #110	; 0x6e
   40e5c:	00c0      	lsls	r0, r0, #3
   40e5e:	e792      	b.n	40d86 <_malloc_r+0x3e2>
   40e60:	f3c0 010b 	ubfx	r1, r0, #0, #12
   40e64:	2900      	cmp	r1, #0
   40e66:	f47f aec8 	bne.w	40bfa <_malloc_r+0x256>
   40e6a:	eb08 0304 	add.w	r3, r8, r4
   40e6e:	68b9      	ldr	r1, [r7, #8]
   40e70:	f043 0301 	orr.w	r3, r3, #1
   40e74:	604b      	str	r3, [r1, #4]
   40e76:	e706      	b.n	40c86 <_malloc_r+0x2e2>
   40e78:	f240 5254 	movw	r2, #1364	; 0x554
   40e7c:	4293      	cmp	r3, r2
   40e7e:	d81e      	bhi.n	40ebe <_malloc_r+0x51a>
   40e80:	0cab      	lsrs	r3, r5, #18
   40e82:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   40e86:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   40e8a:	00e3      	lsls	r3, r4, #3
   40e8c:	e5d7      	b.n	40a3e <_malloc_r+0x9a>
   40e8e:	2301      	movs	r3, #1
   40e90:	f8ca 3004 	str.w	r3, [sl, #4]
   40e94:	e70d      	b.n	40cb2 <_malloc_r+0x30e>
   40e96:	2101      	movs	r1, #1
   40e98:	2400      	movs	r4, #0
   40e9a:	e6d3      	b.n	40c44 <_malloc_r+0x2a0>
   40e9c:	f8cb a000 	str.w	sl, [fp]
   40ea0:	e6b4      	b.n	40c0c <_malloc_r+0x268>
   40ea2:	4b16      	ldr	r3, [pc, #88]	; (40efc <_malloc_r+0x558>)
   40ea4:	681a      	ldr	r2, [r3, #0]
   40ea6:	4422      	add	r2, r4
   40ea8:	601a      	str	r2, [r3, #0]
   40eaa:	e6a6      	b.n	40bfa <_malloc_r+0x256>
   40eac:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   40eb0:	d814      	bhi.n	40edc <_malloc_r+0x538>
   40eb2:	0bd9      	lsrs	r1, r3, #15
   40eb4:	f101 0078 	add.w	r0, r1, #120	; 0x78
   40eb8:	3177      	adds	r1, #119	; 0x77
   40eba:	00c0      	lsls	r0, r0, #3
   40ebc:	e763      	b.n	40d86 <_malloc_r+0x3e2>
   40ebe:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   40ec2:	247f      	movs	r4, #127	; 0x7f
   40ec4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   40ec8:	e5b9      	b.n	40a3e <_malloc_r+0x9a>
   40eca:	f109 0108 	add.w	r1, r9, #8
   40ece:	4630      	mov	r0, r6
   40ed0:	9301      	str	r3, [sp, #4]
   40ed2:	f003 ff19 	bl	44d08 <_free_r>
   40ed6:	9b01      	ldr	r3, [sp, #4]
   40ed8:	681a      	ldr	r2, [r3, #0]
   40eda:	e6d4      	b.n	40c86 <_malloc_r+0x2e2>
   40edc:	f240 5054 	movw	r0, #1364	; 0x554
   40ee0:	4281      	cmp	r1, r0
   40ee2:	d805      	bhi.n	40ef0 <_malloc_r+0x54c>
   40ee4:	0c99      	lsrs	r1, r3, #18
   40ee6:	f101 007d 	add.w	r0, r1, #125	; 0x7d
   40eea:	317c      	adds	r1, #124	; 0x7c
   40eec:	00c0      	lsls	r0, r0, #3
   40eee:	e74a      	b.n	40d86 <_malloc_r+0x3e2>
   40ef0:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   40ef4:	217e      	movs	r1, #126	; 0x7e
   40ef6:	e746      	b.n	40d86 <_malloc_r+0x3e2>
   40ef8:	687b      	ldr	r3, [r7, #4]
   40efa:	e78d      	b.n	40e18 <_malloc_r+0x474>
   40efc:	2002a698 	.word	0x2002a698

00040f00 <__ascii_mbtowc>:
   40f00:	b082      	sub	sp, #8
   40f02:	b149      	cbz	r1, 40f18 <__ascii_mbtowc+0x18>
   40f04:	b15a      	cbz	r2, 40f1e <__ascii_mbtowc+0x1e>
   40f06:	b16b      	cbz	r3, 40f24 <__ascii_mbtowc+0x24>
   40f08:	7813      	ldrb	r3, [r2, #0]
   40f0a:	600b      	str	r3, [r1, #0]
   40f0c:	7812      	ldrb	r2, [r2, #0]
   40f0e:	1c10      	adds	r0, r2, #0
   40f10:	bf18      	it	ne
   40f12:	2001      	movne	r0, #1
   40f14:	b002      	add	sp, #8
   40f16:	4770      	bx	lr
   40f18:	a901      	add	r1, sp, #4
   40f1a:	2a00      	cmp	r2, #0
   40f1c:	d1f3      	bne.n	40f06 <__ascii_mbtowc+0x6>
   40f1e:	4610      	mov	r0, r2
   40f20:	b002      	add	sp, #8
   40f22:	4770      	bx	lr
   40f24:	f06f 0001 	mvn.w	r0, #1
   40f28:	e7f4      	b.n	40f14 <__ascii_mbtowc+0x14>
   40f2a:	bf00      	nop

00040f2c <memchr>:
   40f2c:	0783      	lsls	r3, r0, #30
   40f2e:	b470      	push	{r4, r5, r6}
   40f30:	b2cd      	uxtb	r5, r1
   40f32:	d03b      	beq.n	40fac <memchr+0x80>
   40f34:	1e54      	subs	r4, r2, #1
   40f36:	b302      	cbz	r2, 40f7a <memchr+0x4e>
   40f38:	7803      	ldrb	r3, [r0, #0]
   40f3a:	42ab      	cmp	r3, r5
   40f3c:	d01e      	beq.n	40f7c <memchr+0x50>
   40f3e:	1c43      	adds	r3, r0, #1
   40f40:	e005      	b.n	40f4e <memchr+0x22>
   40f42:	f114 34ff 	adds.w	r4, r4, #4294967295
   40f46:	d318      	bcc.n	40f7a <memchr+0x4e>
   40f48:	7802      	ldrb	r2, [r0, #0]
   40f4a:	42aa      	cmp	r2, r5
   40f4c:	d016      	beq.n	40f7c <memchr+0x50>
   40f4e:	f013 0f03 	tst.w	r3, #3
   40f52:	4618      	mov	r0, r3
   40f54:	f103 0301 	add.w	r3, r3, #1
   40f58:	d1f3      	bne.n	40f42 <memchr+0x16>
   40f5a:	2c03      	cmp	r4, #3
   40f5c:	d810      	bhi.n	40f80 <memchr+0x54>
   40f5e:	b33c      	cbz	r4, 40fb0 <memchr+0x84>
   40f60:	7803      	ldrb	r3, [r0, #0]
   40f62:	42ab      	cmp	r3, r5
   40f64:	d00a      	beq.n	40f7c <memchr+0x50>
   40f66:	4404      	add	r4, r0
   40f68:	1c43      	adds	r3, r0, #1
   40f6a:	e002      	b.n	40f72 <memchr+0x46>
   40f6c:	7802      	ldrb	r2, [r0, #0]
   40f6e:	42aa      	cmp	r2, r5
   40f70:	d004      	beq.n	40f7c <memchr+0x50>
   40f72:	4618      	mov	r0, r3
   40f74:	3301      	adds	r3, #1
   40f76:	4284      	cmp	r4, r0
   40f78:	d1f8      	bne.n	40f6c <memchr+0x40>
   40f7a:	2000      	movs	r0, #0
   40f7c:	bc70      	pop	{r4, r5, r6}
   40f7e:	4770      	bx	lr
   40f80:	020a      	lsls	r2, r1, #8
   40f82:	4601      	mov	r1, r0
   40f84:	b292      	uxth	r2, r2
   40f86:	432a      	orrs	r2, r5
   40f88:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   40f8c:	4608      	mov	r0, r1
   40f8e:	3104      	adds	r1, #4
   40f90:	6803      	ldr	r3, [r0, #0]
   40f92:	4053      	eors	r3, r2
   40f94:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
   40f98:	ea26 0303 	bic.w	r3, r6, r3
   40f9c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   40fa0:	d1de      	bne.n	40f60 <memchr+0x34>
   40fa2:	3c04      	subs	r4, #4
   40fa4:	4608      	mov	r0, r1
   40fa6:	2c03      	cmp	r4, #3
   40fa8:	d8f0      	bhi.n	40f8c <memchr+0x60>
   40faa:	e7d8      	b.n	40f5e <memchr+0x32>
   40fac:	4614      	mov	r4, r2
   40fae:	e7d4      	b.n	40f5a <memchr+0x2e>
   40fb0:	4620      	mov	r0, r4
   40fb2:	e7e3      	b.n	40f7c <memchr+0x50>

00040fb4 <memcmp>:
   40fb4:	2a03      	cmp	r2, #3
   40fb6:	b470      	push	{r4, r5, r6}
   40fb8:	d912      	bls.n	40fe0 <memcmp+0x2c>
   40fba:	ea40 0501 	orr.w	r5, r0, r1
   40fbe:	4604      	mov	r4, r0
   40fc0:	460b      	mov	r3, r1
   40fc2:	07ad      	lsls	r5, r5, #30
   40fc4:	d11f      	bne.n	41006 <memcmp+0x52>
   40fc6:	4619      	mov	r1, r3
   40fc8:	4620      	mov	r0, r4
   40fca:	3304      	adds	r3, #4
   40fcc:	3404      	adds	r4, #4
   40fce:	680d      	ldr	r5, [r1, #0]
   40fd0:	6806      	ldr	r6, [r0, #0]
   40fd2:	42ae      	cmp	r6, r5
   40fd4:	d117      	bne.n	41006 <memcmp+0x52>
   40fd6:	3a04      	subs	r2, #4
   40fd8:	4620      	mov	r0, r4
   40fda:	4619      	mov	r1, r3
   40fdc:	2a03      	cmp	r2, #3
   40fde:	d8f2      	bhi.n	40fc6 <memcmp+0x12>
   40fe0:	1e54      	subs	r4, r2, #1
   40fe2:	b16a      	cbz	r2, 41000 <memcmp+0x4c>
   40fe4:	7802      	ldrb	r2, [r0, #0]
   40fe6:	780b      	ldrb	r3, [r1, #0]
   40fe8:	429a      	cmp	r2, r3
   40fea:	d10e      	bne.n	4100a <memcmp+0x56>
   40fec:	440c      	add	r4, r1
   40fee:	e005      	b.n	40ffc <memcmp+0x48>
   40ff0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   40ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   40ff8:	429a      	cmp	r2, r3
   40ffa:	d106      	bne.n	4100a <memcmp+0x56>
   40ffc:	42a1      	cmp	r1, r4
   40ffe:	d1f7      	bne.n	40ff0 <memcmp+0x3c>
   41000:	2000      	movs	r0, #0
   41002:	bc70      	pop	{r4, r5, r6}
   41004:	4770      	bx	lr
   41006:	1e54      	subs	r4, r2, #1
   41008:	e7ec      	b.n	40fe4 <memcmp+0x30>
   4100a:	1ad0      	subs	r0, r2, r3
   4100c:	bc70      	pop	{r4, r5, r6}
   4100e:	4770      	bx	lr

00041010 <__memcpy_chk>:
   41010:	429a      	cmp	r2, r3
   41012:	b508      	push	{r3, lr}
   41014:	d80d      	bhi.n	41032 <__memcpy_chk+0x22>
   41016:	4281      	cmp	r1, r0
   41018:	d804      	bhi.n	41024 <__memcpy_chk+0x14>
   4101a:	188b      	adds	r3, r1, r2
   4101c:	4298      	cmp	r0, r3
   4101e:	d308      	bcc.n	41032 <__memcpy_chk+0x22>
   41020:	4281      	cmp	r1, r0
   41022:	d302      	bcc.n	4102a <__memcpy_chk+0x1a>
   41024:	1883      	adds	r3, r0, r2
   41026:	4299      	cmp	r1, r3
   41028:	d303      	bcc.n	41032 <__memcpy_chk+0x22>
   4102a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   4102e:	f7d8 bf3f 	b.w	19eb0 <memcpy>
   41032:	f003 fb8b 	bl	4474c <__chk_fail>
   41036:	bf00      	nop

00041038 <memset>:
   41038:	b4f0      	push	{r4, r5, r6, r7}
   4103a:	0786      	lsls	r6, r0, #30
   4103c:	d043      	beq.n	410c6 <memset+0x8e>
   4103e:	1e54      	subs	r4, r2, #1
   41040:	2a00      	cmp	r2, #0
   41042:	d03e      	beq.n	410c2 <memset+0x8a>
   41044:	b2ca      	uxtb	r2, r1
   41046:	4603      	mov	r3, r0
   41048:	e002      	b.n	41050 <memset+0x18>
   4104a:	f114 34ff 	adds.w	r4, r4, #4294967295
   4104e:	d338      	bcc.n	410c2 <memset+0x8a>
   41050:	f803 2b01 	strb.w	r2, [r3], #1
   41054:	079d      	lsls	r5, r3, #30
   41056:	d1f8      	bne.n	4104a <memset+0x12>
   41058:	2c03      	cmp	r4, #3
   4105a:	d92b      	bls.n	410b4 <memset+0x7c>
   4105c:	b2cd      	uxtb	r5, r1
   4105e:	2c0f      	cmp	r4, #15
   41060:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   41064:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   41068:	d916      	bls.n	41098 <memset+0x60>
   4106a:	f1a4 0710 	sub.w	r7, r4, #16
   4106e:	f103 0620 	add.w	r6, r3, #32
   41072:	f103 0210 	add.w	r2, r3, #16
   41076:	093f      	lsrs	r7, r7, #4
   41078:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   4107c:	e942 5504 	strd	r5, r5, [r2, #-16]
   41080:	e942 5502 	strd	r5, r5, [r2, #-8]
   41084:	3210      	adds	r2, #16
   41086:	42b2      	cmp	r2, r6
   41088:	d1f8      	bne.n	4107c <memset+0x44>
   4108a:	f004 040f 	and.w	r4, r4, #15
   4108e:	3701      	adds	r7, #1
   41090:	2c03      	cmp	r4, #3
   41092:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   41096:	d90d      	bls.n	410b4 <memset+0x7c>
   41098:	461e      	mov	r6, r3
   4109a:	4622      	mov	r2, r4
   4109c:	3a04      	subs	r2, #4
   4109e:	f846 5b04 	str.w	r5, [r6], #4
   410a2:	2a03      	cmp	r2, #3
   410a4:	d8fa      	bhi.n	4109c <memset+0x64>
   410a6:	1f22      	subs	r2, r4, #4
   410a8:	f004 0403 	and.w	r4, r4, #3
   410ac:	f022 0203 	bic.w	r2, r2, #3
   410b0:	3204      	adds	r2, #4
   410b2:	4413      	add	r3, r2
   410b4:	b12c      	cbz	r4, 410c2 <memset+0x8a>
   410b6:	b2c9      	uxtb	r1, r1
   410b8:	441c      	add	r4, r3
   410ba:	f803 1b01 	strb.w	r1, [r3], #1
   410be:	429c      	cmp	r4, r3
   410c0:	d1fb      	bne.n	410ba <memset+0x82>
   410c2:	bcf0      	pop	{r4, r5, r6, r7}
   410c4:	4770      	bx	lr
   410c6:	4614      	mov	r4, r2
   410c8:	4603      	mov	r3, r0
   410ca:	e7c5      	b.n	41058 <memset+0x20>

000410cc <__malloc_lock>:
   410cc:	4801      	ldr	r0, [pc, #4]	; (410d4 <__malloc_lock+0x8>)
   410ce:	f004 bca5 	b.w	45a1c <__retarget_lock_acquire_recursive>
   410d2:	bf00      	nop
   410d4:	2002c34c 	.word	0x2002c34c

000410d8 <__malloc_unlock>:
   410d8:	4801      	ldr	r0, [pc, #4]	; (410e0 <__malloc_unlock+0x8>)
   410da:	f004 bca1 	b.w	45a20 <__retarget_lock_release_recursive>
   410de:	bf00      	nop
   410e0:	2002c34c 	.word	0x2002c34c

000410e4 <realloc>:
   410e4:	4b02      	ldr	r3, [pc, #8]	; (410f0 <realloc+0xc>)
   410e6:	460a      	mov	r2, r1
   410e8:	4601      	mov	r1, r0
   410ea:	6818      	ldr	r0, [r3, #0]
   410ec:	f000 b802 	b.w	410f4 <_realloc_r>
   410f0:	20031bb8 	.word	0x20031bb8

000410f4 <_realloc_r>:
   410f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   410f8:	4692      	mov	sl, r2
   410fa:	b083      	sub	sp, #12
   410fc:	2900      	cmp	r1, #0
   410fe:	d07a      	beq.n	411f6 <_realloc_r+0x102>
   41100:	460d      	mov	r5, r1
   41102:	f10a 040b 	add.w	r4, sl, #11
   41106:	4680      	mov	r8, r0
   41108:	f7ff ffe0 	bl	410cc <__malloc_lock>
   4110c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   41110:	2c16      	cmp	r4, #22
   41112:	f1a5 0708 	sub.w	r7, r5, #8
   41116:	f021 0603 	bic.w	r6, r1, #3
   4111a:	d842      	bhi.n	411a2 <_realloc_r+0xae>
   4111c:	2210      	movs	r2, #16
   4111e:	2300      	movs	r3, #0
   41120:	4614      	mov	r4, r2
   41122:	4554      	cmp	r4, sl
   41124:	f0c0 80f7 	bcc.w	41316 <_realloc_r+0x222>
   41128:	2b00      	cmp	r3, #0
   4112a:	f040 80f4 	bne.w	41316 <_realloc_r+0x222>
   4112e:	4296      	cmp	r6, r2
   41130:	eb07 0906 	add.w	r9, r7, r6
   41134:	da49      	bge.n	411ca <_realloc_r+0xd6>
   41136:	4bc4      	ldr	r3, [pc, #784]	; (41448 <_realloc_r+0x354>)
   41138:	6898      	ldr	r0, [r3, #8]
   4113a:	4548      	cmp	r0, r9
   4113c:	d073      	beq.n	41226 <_realloc_r+0x132>
   4113e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   41142:	f020 0301 	bic.w	r3, r0, #1
   41146:	444b      	add	r3, r9
   41148:	685b      	ldr	r3, [r3, #4]
   4114a:	07db      	lsls	r3, r3, #31
   4114c:	d52e      	bpl.n	411ac <_realloc_r+0xb8>
   4114e:	07c9      	lsls	r1, r1, #31
   41150:	f140 8109 	bpl.w	41366 <_realloc_r+0x272>
   41154:	4651      	mov	r1, sl
   41156:	4640      	mov	r0, r8
   41158:	f7ff fc24 	bl	409a4 <_malloc_r>
   4115c:	4682      	mov	sl, r0
   4115e:	b1e0      	cbz	r0, 4119a <_realloc_r+0xa6>
   41160:	f855 3c04 	ldr.w	r3, [r5, #-4]
   41164:	f1a0 0208 	sub.w	r2, r0, #8
   41168:	f023 0301 	bic.w	r3, r3, #1
   4116c:	443b      	add	r3, r7
   4116e:	4293      	cmp	r3, r2
   41170:	f000 8102 	beq.w	41378 <_realloc_r+0x284>
   41174:	1f32      	subs	r2, r6, #4
   41176:	2a24      	cmp	r2, #36	; 0x24
   41178:	f200 810e 	bhi.w	41398 <_realloc_r+0x2a4>
   4117c:	2a13      	cmp	r2, #19
   4117e:	6829      	ldr	r1, [r5, #0]
   41180:	f200 80e6 	bhi.w	41350 <_realloc_r+0x25c>
   41184:	4603      	mov	r3, r0
   41186:	462a      	mov	r2, r5
   41188:	6019      	str	r1, [r3, #0]
   4118a:	6851      	ldr	r1, [r2, #4]
   4118c:	6059      	str	r1, [r3, #4]
   4118e:	6892      	ldr	r2, [r2, #8]
   41190:	609a      	str	r2, [r3, #8]
   41192:	4629      	mov	r1, r5
   41194:	4640      	mov	r0, r8
   41196:	f003 fdb7 	bl	44d08 <_free_r>
   4119a:	4640      	mov	r0, r8
   4119c:	f7ff ff9c 	bl	410d8 <__malloc_unlock>
   411a0:	e025      	b.n	411ee <_realloc_r+0xfa>
   411a2:	f024 0407 	bic.w	r4, r4, #7
   411a6:	4622      	mov	r2, r4
   411a8:	0fe3      	lsrs	r3, r4, #31
   411aa:	e7ba      	b.n	41122 <_realloc_r+0x2e>
   411ac:	f020 0003 	bic.w	r0, r0, #3
   411b0:	1833      	adds	r3, r6, r0
   411b2:	4293      	cmp	r3, r2
   411b4:	f2c0 8081 	blt.w	412ba <_realloc_r+0x1c6>
   411b8:	f8d9 200c 	ldr.w	r2, [r9, #12]
   411bc:	461e      	mov	r6, r3
   411be:	f8d9 1008 	ldr.w	r1, [r9, #8]
   411c2:	eb07 0903 	add.w	r9, r7, r3
   411c6:	60ca      	str	r2, [r1, #12]
   411c8:	6091      	str	r1, [r2, #8]
   411ca:	1b33      	subs	r3, r6, r4
   411cc:	687a      	ldr	r2, [r7, #4]
   411ce:	2b0f      	cmp	r3, #15
   411d0:	f002 0201 	and.w	r2, r2, #1
   411d4:	d815      	bhi.n	41202 <_realloc_r+0x10e>
   411d6:	4332      	orrs	r2, r6
   411d8:	607a      	str	r2, [r7, #4]
   411da:	f8d9 3004 	ldr.w	r3, [r9, #4]
   411de:	f043 0301 	orr.w	r3, r3, #1
   411e2:	f8c9 3004 	str.w	r3, [r9, #4]
   411e6:	4640      	mov	r0, r8
   411e8:	46aa      	mov	sl, r5
   411ea:	f7ff ff75 	bl	410d8 <__malloc_unlock>
   411ee:	4650      	mov	r0, sl
   411f0:	b003      	add	sp, #12
   411f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   411f6:	4611      	mov	r1, r2
   411f8:	b003      	add	sp, #12
   411fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   411fe:	f7ff bbd1 	b.w	409a4 <_malloc_r>
   41202:	4322      	orrs	r2, r4
   41204:	f043 0301 	orr.w	r3, r3, #1
   41208:	443c      	add	r4, r7
   4120a:	4640      	mov	r0, r8
   4120c:	607a      	str	r2, [r7, #4]
   4120e:	6063      	str	r3, [r4, #4]
   41210:	f104 0108 	add.w	r1, r4, #8
   41214:	f8d9 3004 	ldr.w	r3, [r9, #4]
   41218:	f043 0301 	orr.w	r3, r3, #1
   4121c:	f8c9 3004 	str.w	r3, [r9, #4]
   41220:	f003 fd72 	bl	44d08 <_free_r>
   41224:	e7df      	b.n	411e6 <_realloc_r+0xf2>
   41226:	f8d0 9004 	ldr.w	r9, [r0, #4]
   4122a:	f104 0010 	add.w	r0, r4, #16
   4122e:	f029 0903 	bic.w	r9, r9, #3
   41232:	44b1      	add	r9, r6
   41234:	4581      	cmp	r9, r0
   41236:	f280 80b3 	bge.w	413a0 <_realloc_r+0x2ac>
   4123a:	07c9      	lsls	r1, r1, #31
   4123c:	d48a      	bmi.n	41154 <_realloc_r+0x60>
   4123e:	f855 1c08 	ldr.w	r1, [r5, #-8]
   41242:	eba7 0b01 	sub.w	fp, r7, r1
   41246:	f8db 1004 	ldr.w	r1, [fp, #4]
   4124a:	f021 0103 	bic.w	r1, r1, #3
   4124e:	4489      	add	r9, r1
   41250:	4548      	cmp	r0, r9
   41252:	dc41      	bgt.n	412d8 <_realloc_r+0x1e4>
   41254:	46da      	mov	sl, fp
   41256:	1f32      	subs	r2, r6, #4
   41258:	f8db 100c 	ldr.w	r1, [fp, #12]
   4125c:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   41260:	2a24      	cmp	r2, #36	; 0x24
   41262:	60c1      	str	r1, [r0, #12]
   41264:	6088      	str	r0, [r1, #8]
   41266:	f200 80dc 	bhi.w	41422 <_realloc_r+0x32e>
   4126a:	2a13      	cmp	r2, #19
   4126c:	6829      	ldr	r1, [r5, #0]
   4126e:	f240 80d6 	bls.w	4141e <_realloc_r+0x32a>
   41272:	f8cb 1008 	str.w	r1, [fp, #8]
   41276:	2a1b      	cmp	r2, #27
   41278:	6869      	ldr	r1, [r5, #4]
   4127a:	f8cb 100c 	str.w	r1, [fp, #12]
   4127e:	68a9      	ldr	r1, [r5, #8]
   41280:	f200 80d6 	bhi.w	41430 <_realloc_r+0x33c>
   41284:	f10b 0210 	add.w	r2, fp, #16
   41288:	3508      	adds	r5, #8
   4128a:	6011      	str	r1, [r2, #0]
   4128c:	6869      	ldr	r1, [r5, #4]
   4128e:	6051      	str	r1, [r2, #4]
   41290:	68a9      	ldr	r1, [r5, #8]
   41292:	6091      	str	r1, [r2, #8]
   41294:	eba9 0904 	sub.w	r9, r9, r4
   41298:	eb0b 0104 	add.w	r1, fp, r4
   4129c:	4640      	mov	r0, r8
   4129e:	f049 0201 	orr.w	r2, r9, #1
   412a2:	6099      	str	r1, [r3, #8]
   412a4:	604a      	str	r2, [r1, #4]
   412a6:	f8db 3004 	ldr.w	r3, [fp, #4]
   412aa:	f003 0301 	and.w	r3, r3, #1
   412ae:	431c      	orrs	r4, r3
   412b0:	f8cb 4004 	str.w	r4, [fp, #4]
   412b4:	f7ff ff10 	bl	410d8 <__malloc_unlock>
   412b8:	e799      	b.n	411ee <_realloc_r+0xfa>
   412ba:	07cb      	lsls	r3, r1, #31
   412bc:	f53f af4a 	bmi.w	41154 <_realloc_r+0x60>
   412c0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   412c4:	eba7 0b03 	sub.w	fp, r7, r3
   412c8:	f8db 1004 	ldr.w	r1, [fp, #4]
   412cc:	f021 0103 	bic.w	r1, r1, #3
   412d0:	4408      	add	r0, r1
   412d2:	1983      	adds	r3, r0, r6
   412d4:	4293      	cmp	r3, r2
   412d6:	da24      	bge.n	41322 <_realloc_r+0x22e>
   412d8:	1873      	adds	r3, r6, r1
   412da:	4293      	cmp	r3, r2
   412dc:	f6ff af3a 	blt.w	41154 <_realloc_r+0x60>
   412e0:	46da      	mov	sl, fp
   412e2:	1f32      	subs	r2, r6, #4
   412e4:	f8db 100c 	ldr.w	r1, [fp, #12]
   412e8:	eb0b 0903 	add.w	r9, fp, r3
   412ec:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   412f0:	2a24      	cmp	r2, #36	; 0x24
   412f2:	60c1      	str	r1, [r0, #12]
   412f4:	6088      	str	r0, [r1, #8]
   412f6:	d847      	bhi.n	41388 <_realloc_r+0x294>
   412f8:	2a13      	cmp	r2, #19
   412fa:	6829      	ldr	r1, [r5, #0]
   412fc:	d91e      	bls.n	4133c <_realloc_r+0x248>
   412fe:	f8cb 1008 	str.w	r1, [fp, #8]
   41302:	2a1b      	cmp	r2, #27
   41304:	6869      	ldr	r1, [r5, #4]
   41306:	f8cb 100c 	str.w	r1, [fp, #12]
   4130a:	68a9      	ldr	r1, [r5, #8]
   4130c:	d85b      	bhi.n	413c6 <_realloc_r+0x2d2>
   4130e:	f10b 0210 	add.w	r2, fp, #16
   41312:	3508      	adds	r5, #8
   41314:	e013      	b.n	4133e <_realloc_r+0x24a>
   41316:	230c      	movs	r3, #12
   41318:	f04f 0a00 	mov.w	sl, #0
   4131c:	f8c8 3000 	str.w	r3, [r8]
   41320:	e765      	b.n	411ee <_realloc_r+0xfa>
   41322:	f8d9 100c 	ldr.w	r1, [r9, #12]
   41326:	46da      	mov	sl, fp
   41328:	f8d9 0008 	ldr.w	r0, [r9, #8]
   4132c:	1f32      	subs	r2, r6, #4
   4132e:	eb0b 0903 	add.w	r9, fp, r3
   41332:	60c1      	str	r1, [r0, #12]
   41334:	6088      	str	r0, [r1, #8]
   41336:	f8db 100c 	ldr.w	r1, [fp, #12]
   4133a:	e7d7      	b.n	412ec <_realloc_r+0x1f8>
   4133c:	4652      	mov	r2, sl
   4133e:	6011      	str	r1, [r2, #0]
   41340:	461e      	mov	r6, r3
   41342:	686b      	ldr	r3, [r5, #4]
   41344:	465f      	mov	r7, fp
   41346:	6053      	str	r3, [r2, #4]
   41348:	68ab      	ldr	r3, [r5, #8]
   4134a:	4655      	mov	r5, sl
   4134c:	6093      	str	r3, [r2, #8]
   4134e:	e73c      	b.n	411ca <_realloc_r+0xd6>
   41350:	6001      	str	r1, [r0, #0]
   41352:	2a1b      	cmp	r2, #27
   41354:	686b      	ldr	r3, [r5, #4]
   41356:	6043      	str	r3, [r0, #4]
   41358:	d841      	bhi.n	413de <_realloc_r+0x2ea>
   4135a:	f105 0208 	add.w	r2, r5, #8
   4135e:	f100 0308 	add.w	r3, r0, #8
   41362:	68a9      	ldr	r1, [r5, #8]
   41364:	e710      	b.n	41188 <_realloc_r+0x94>
   41366:	f855 3c08 	ldr.w	r3, [r5, #-8]
   4136a:	eba7 0b03 	sub.w	fp, r7, r3
   4136e:	f8db 1004 	ldr.w	r1, [fp, #4]
   41372:	f021 0103 	bic.w	r1, r1, #3
   41376:	e7af      	b.n	412d8 <_realloc_r+0x1e4>
   41378:	f850 3c04 	ldr.w	r3, [r0, #-4]
   4137c:	f023 0303 	bic.w	r3, r3, #3
   41380:	441e      	add	r6, r3
   41382:	eb07 0906 	add.w	r9, r7, r6
   41386:	e720      	b.n	411ca <_realloc_r+0xd6>
   41388:	4629      	mov	r1, r5
   4138a:	4650      	mov	r0, sl
   4138c:	461e      	mov	r6, r3
   4138e:	465f      	mov	r7, fp
   41390:	f004 fc04 	bl	45b9c <memmove>
   41394:	4655      	mov	r5, sl
   41396:	e718      	b.n	411ca <_realloc_r+0xd6>
   41398:	4629      	mov	r1, r5
   4139a:	f004 fbff 	bl	45b9c <memmove>
   4139e:	e6f8      	b.n	41192 <_realloc_r+0x9e>
   413a0:	eba9 0904 	sub.w	r9, r9, r4
   413a4:	4427      	add	r7, r4
   413a6:	4640      	mov	r0, r8
   413a8:	46aa      	mov	sl, r5
   413aa:	f049 0201 	orr.w	r2, r9, #1
   413ae:	609f      	str	r7, [r3, #8]
   413b0:	607a      	str	r2, [r7, #4]
   413b2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   413b6:	f003 0301 	and.w	r3, r3, #1
   413ba:	431c      	orrs	r4, r3
   413bc:	f845 4c04 	str.w	r4, [r5, #-4]
   413c0:	f7ff fe8a 	bl	410d8 <__malloc_unlock>
   413c4:	e713      	b.n	411ee <_realloc_r+0xfa>
   413c6:	f8cb 1010 	str.w	r1, [fp, #16]
   413ca:	2a24      	cmp	r2, #36	; 0x24
   413cc:	68e9      	ldr	r1, [r5, #12]
   413ce:	f8cb 1014 	str.w	r1, [fp, #20]
   413d2:	6929      	ldr	r1, [r5, #16]
   413d4:	d00f      	beq.n	413f6 <_realloc_r+0x302>
   413d6:	f10b 0218 	add.w	r2, fp, #24
   413da:	3510      	adds	r5, #16
   413dc:	e7af      	b.n	4133e <_realloc_r+0x24a>
   413de:	68ab      	ldr	r3, [r5, #8]
   413e0:	2a24      	cmp	r2, #36	; 0x24
   413e2:	6083      	str	r3, [r0, #8]
   413e4:	68eb      	ldr	r3, [r5, #12]
   413e6:	60c3      	str	r3, [r0, #12]
   413e8:	d00f      	beq.n	4140a <_realloc_r+0x316>
   413ea:	f105 0210 	add.w	r2, r5, #16
   413ee:	f100 0310 	add.w	r3, r0, #16
   413f2:	6929      	ldr	r1, [r5, #16]
   413f4:	e6c8      	b.n	41188 <_realloc_r+0x94>
   413f6:	f8cb 1018 	str.w	r1, [fp, #24]
   413fa:	f10b 0220 	add.w	r2, fp, #32
   413fe:	6969      	ldr	r1, [r5, #20]
   41400:	3518      	adds	r5, #24
   41402:	f8cb 101c 	str.w	r1, [fp, #28]
   41406:	6829      	ldr	r1, [r5, #0]
   41408:	e799      	b.n	4133e <_realloc_r+0x24a>
   4140a:	6929      	ldr	r1, [r5, #16]
   4140c:	f105 0218 	add.w	r2, r5, #24
   41410:	f100 0318 	add.w	r3, r0, #24
   41414:	6101      	str	r1, [r0, #16]
   41416:	6969      	ldr	r1, [r5, #20]
   41418:	6141      	str	r1, [r0, #20]
   4141a:	69a9      	ldr	r1, [r5, #24]
   4141c:	e6b4      	b.n	41188 <_realloc_r+0x94>
   4141e:	4652      	mov	r2, sl
   41420:	e733      	b.n	4128a <_realloc_r+0x196>
   41422:	4629      	mov	r1, r5
   41424:	4650      	mov	r0, sl
   41426:	9301      	str	r3, [sp, #4]
   41428:	f004 fbb8 	bl	45b9c <memmove>
   4142c:	9b01      	ldr	r3, [sp, #4]
   4142e:	e731      	b.n	41294 <_realloc_r+0x1a0>
   41430:	f8cb 1010 	str.w	r1, [fp, #16]
   41434:	2a24      	cmp	r2, #36	; 0x24
   41436:	68e9      	ldr	r1, [r5, #12]
   41438:	f8cb 1014 	str.w	r1, [fp, #20]
   4143c:	6929      	ldr	r1, [r5, #16]
   4143e:	d005      	beq.n	4144c <_realloc_r+0x358>
   41440:	f10b 0218 	add.w	r2, fp, #24
   41444:	3510      	adds	r5, #16
   41446:	e720      	b.n	4128a <_realloc_r+0x196>
   41448:	20031d28 	.word	0x20031d28
   4144c:	f8cb 1018 	str.w	r1, [fp, #24]
   41450:	f10b 0220 	add.w	r2, fp, #32
   41454:	6969      	ldr	r1, [r5, #20]
   41456:	3518      	adds	r5, #24
   41458:	f8cb 101c 	str.w	r1, [fp, #28]
   4145c:	6829      	ldr	r1, [r5, #0]
   4145e:	e714      	b.n	4128a <_realloc_r+0x196>

00041460 <_sbrk_r>:
   41460:	b538      	push	{r3, r4, r5, lr}
   41462:	2300      	movs	r3, #0
   41464:	4c06      	ldr	r4, [pc, #24]	; (41480 <_sbrk_r+0x20>)
   41466:	4605      	mov	r5, r0
   41468:	4608      	mov	r0, r1
   4146a:	6023      	str	r3, [r4, #0]
   4146c:	f7e1 f8b4 	bl	225d8 <_sbrk>
   41470:	1c43      	adds	r3, r0, #1
   41472:	d000      	beq.n	41476 <_sbrk_r+0x16>
   41474:	bd38      	pop	{r3, r4, r5, pc}
   41476:	6823      	ldr	r3, [r4, #0]
   41478:	2b00      	cmp	r3, #0
   4147a:	d0fb      	beq.n	41474 <_sbrk_r+0x14>
   4147c:	602b      	str	r3, [r5, #0]
   4147e:	bd38      	pop	{r3, r4, r5, pc}
   41480:	2002c360 	.word	0x2002c360

00041484 <snprintf>:
   41484:	b40c      	push	{r2, r3}
   41486:	4b22      	ldr	r3, [pc, #136]	; (41510 <snprintf+0x8c>)
   41488:	b5f0      	push	{r4, r5, r6, r7, lr}
   4148a:	1e0c      	subs	r4, r1, #0
   4148c:	b09d      	sub	sp, #116	; 0x74
   4148e:	681d      	ldr	r5, [r3, #0]
   41490:	db39      	blt.n	41506 <snprintf+0x82>
   41492:	f44f 7302 	mov.w	r3, #520	; 0x208
   41496:	9002      	str	r0, [sp, #8]
   41498:	9006      	str	r0, [sp, #24]
   4149a:	f8ad 3014 	strh.w	r3, [sp, #20]
   4149e:	d01a      	beq.n	414d6 <snprintf+0x52>
   414a0:	a823      	add	r0, sp, #140	; 0x8c
   414a2:	3c01      	subs	r4, #1
   414a4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   414a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   414aa:	4603      	mov	r3, r0
   414ac:	9001      	str	r0, [sp, #4]
   414ae:	a902      	add	r1, sp, #8
   414b0:	4628      	mov	r0, r5
   414b2:	9404      	str	r4, [sp, #16]
   414b4:	9407      	str	r4, [sp, #28]
   414b6:	f8ad 6016 	strh.w	r6, [sp, #22]
   414ba:	f7da f9bd 	bl	1b838 <_svfprintf_r>
   414be:	1c42      	adds	r2, r0, #1
   414c0:	da01      	bge.n	414c6 <snprintf+0x42>
   414c2:	238b      	movs	r3, #139	; 0x8b
   414c4:	602b      	str	r3, [r5, #0]
   414c6:	9b02      	ldr	r3, [sp, #8]
   414c8:	2200      	movs	r2, #0
   414ca:	701a      	strb	r2, [r3, #0]
   414cc:	b01d      	add	sp, #116	; 0x74
   414ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   414d2:	b002      	add	sp, #8
   414d4:	4770      	bx	lr
   414d6:	ae23      	add	r6, sp, #140	; 0x8c
   414d8:	f64f 77ff 	movw	r7, #65535	; 0xffff
   414dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   414de:	a902      	add	r1, sp, #8
   414e0:	4633      	mov	r3, r6
   414e2:	4628      	mov	r0, r5
   414e4:	9404      	str	r4, [sp, #16]
   414e6:	9407      	str	r4, [sp, #28]
   414e8:	9601      	str	r6, [sp, #4]
   414ea:	f8ad 7016 	strh.w	r7, [sp, #22]
   414ee:	f7da f9a3 	bl	1b838 <_svfprintf_r>
   414f2:	1c43      	adds	r3, r0, #1
   414f4:	db04      	blt.n	41500 <snprintf+0x7c>
   414f6:	b01d      	add	sp, #116	; 0x74
   414f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   414fc:	b002      	add	sp, #8
   414fe:	4770      	bx	lr
   41500:	238b      	movs	r3, #139	; 0x8b
   41502:	602b      	str	r3, [r5, #0]
   41504:	e7f7      	b.n	414f6 <snprintf+0x72>
   41506:	238b      	movs	r3, #139	; 0x8b
   41508:	f04f 30ff 	mov.w	r0, #4294967295
   4150c:	602b      	str	r3, [r5, #0]
   4150e:	e7f2      	b.n	414f6 <snprintf+0x72>
   41510:	20031bb8 	.word	0x20031bb8

00041514 <__sprintf_chk>:
   41514:	b408      	push	{r3}
   41516:	b510      	push	{r4, lr}
   41518:	b083      	sub	sp, #12
   4151a:	1e14      	subs	r4, r2, #0
   4151c:	ab05      	add	r3, sp, #20
   4151e:	f853 1b04 	ldr.w	r1, [r3], #4
   41522:	9301      	str	r3, [sp, #4]
   41524:	db0c      	blt.n	41540 <__sprintf_chk+0x2c>
   41526:	460a      	mov	r2, r1
   41528:	4621      	mov	r1, r4
   4152a:	f003 f84d 	bl	445c8 <vsnprintf>
   4152e:	2800      	cmp	r0, #0
   41530:	db01      	blt.n	41536 <__sprintf_chk+0x22>
   41532:	42a0      	cmp	r0, r4
   41534:	d20c      	bcs.n	41550 <__sprintf_chk+0x3c>
   41536:	b003      	add	sp, #12
   41538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4153c:	b001      	add	sp, #4
   4153e:	4770      	bx	lr
   41540:	461a      	mov	r2, r3
   41542:	f003 f867 	bl	44614 <vsprintf>
   41546:	b003      	add	sp, #12
   41548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4154c:	b001      	add	sp, #4
   4154e:	4770      	bx	lr
   41550:	f003 f8fc 	bl	4474c <__chk_fail>

00041554 <sscanf>:
   41554:	b40e      	push	{r1, r2, r3}
   41556:	b5f0      	push	{r4, r5, r6, r7, lr}
   41558:	b09c      	sub	sp, #112	; 0x70
   4155a:	f44f 7201 	mov.w	r2, #516	; 0x204
   4155e:	2500      	movs	r5, #0
   41560:	4f10      	ldr	r7, [pc, #64]	; (415a4 <sscanf+0x50>)
   41562:	ac21      	add	r4, sp, #132	; 0x84
   41564:	f8ad 2014 	strh.w	r2, [sp, #20]
   41568:	9002      	str	r0, [sp, #8]
   4156a:	f854 6b04 	ldr.w	r6, [r4], #4
   4156e:	9006      	str	r0, [sp, #24]
   41570:	f000 f958 	bl	41824 <strlen>
   41574:	4b0c      	ldr	r3, [pc, #48]	; (415a8 <sscanf+0x54>)
   41576:	4601      	mov	r1, r0
   41578:	4632      	mov	r2, r6
   4157a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   4157e:	9103      	str	r1, [sp, #12]
   41580:	9107      	str	r1, [sp, #28]
   41582:	a902      	add	r1, sp, #8
   41584:	6818      	ldr	r0, [r3, #0]
   41586:	4623      	mov	r3, r4
   41588:	9401      	str	r4, [sp, #4]
   4158a:	970a      	str	r7, [sp, #40]	; 0x28
   4158c:	950e      	str	r5, [sp, #56]	; 0x38
   4158e:	9513      	str	r5, [sp, #76]	; 0x4c
   41590:	f8ad 6016 	strh.w	r6, [sp, #22]
   41594:	f000 fdf0 	bl	42178 <__ssvfscanf_r>
   41598:	b01c      	add	sp, #112	; 0x70
   4159a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   4159e:	b003      	add	sp, #12
   415a0:	4770      	bx	lr
   415a2:	bf00      	nop
   415a4:	000415d1 	.word	0x000415d1
   415a8:	20031bb8 	.word	0x20031bb8

000415ac <__sread>:
   415ac:	b510      	push	{r4, lr}
   415ae:	460c      	mov	r4, r1
   415b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   415b4:	f004 ffc4 	bl	46540 <_read_r>
   415b8:	2800      	cmp	r0, #0
   415ba:	db03      	blt.n	415c4 <__sread+0x18>
   415bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   415be:	4403      	add	r3, r0
   415c0:	6523      	str	r3, [r4, #80]	; 0x50
   415c2:	bd10      	pop	{r4, pc}
   415c4:	89a3      	ldrh	r3, [r4, #12]
   415c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   415ca:	81a3      	strh	r3, [r4, #12]
   415cc:	bd10      	pop	{r4, pc}
   415ce:	bf00      	nop

000415d0 <__seofread>:
   415d0:	2000      	movs	r0, #0
   415d2:	4770      	bx	lr

000415d4 <__swrite>:
   415d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   415d8:	461f      	mov	r7, r3
   415da:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   415de:	4616      	mov	r6, r2
   415e0:	460c      	mov	r4, r1
   415e2:	05da      	lsls	r2, r3, #23
   415e4:	4605      	mov	r5, r0
   415e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   415ea:	d507      	bpl.n	415fc <__swrite+0x28>
   415ec:	2302      	movs	r3, #2
   415ee:	2200      	movs	r2, #0
   415f0:	f004 fa18 	bl	45a24 <_lseek_r>
   415f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   415f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   415fc:	f423 5080 	bic.w	r0, r3, #4096	; 0x1000
   41600:	4632      	mov	r2, r6
   41602:	463b      	mov	r3, r7
   41604:	81a0      	strh	r0, [r4, #12]
   41606:	4628      	mov	r0, r5
   41608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4160c:	f003 b81a 	b.w	44644 <_write_r>

00041610 <__sseek>:
   41610:	b510      	push	{r4, lr}
   41612:	460c      	mov	r4, r1
   41614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41618:	f004 fa04 	bl	45a24 <_lseek_r>
   4161c:	1c42      	adds	r2, r0, #1
   4161e:	89a3      	ldrh	r3, [r4, #12]
   41620:	d004      	beq.n	4162c <__sseek+0x1c>
   41622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   41626:	6520      	str	r0, [r4, #80]	; 0x50
   41628:	81a3      	strh	r3, [r4, #12]
   4162a:	bd10      	pop	{r4, pc}
   4162c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41630:	81a3      	strh	r3, [r4, #12]
   41632:	bd10      	pop	{r4, pc}

00041634 <__sclose>:
   41634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41638:	f003 b8a4 	b.w	44784 <_close_r>

0004163c <strcat>:
   4163c:	0783      	lsls	r3, r0, #30
   4163e:	b510      	push	{r4, lr}
   41640:	4604      	mov	r4, r0
   41642:	d110      	bne.n	41666 <strcat+0x2a>
   41644:	6802      	ldr	r2, [r0, #0]
   41646:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   4164a:	ea23 0302 	bic.w	r3, r3, r2
   4164e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   41652:	d108      	bne.n	41666 <strcat+0x2a>
   41654:	f850 2f04 	ldr.w	r2, [r0, #4]!
   41658:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   4165c:	ea23 0302 	bic.w	r3, r3, r2
   41660:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   41664:	d0f6      	beq.n	41654 <strcat+0x18>
   41666:	7803      	ldrb	r3, [r0, #0]
   41668:	b11b      	cbz	r3, 41672 <strcat+0x36>
   4166a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   4166e:	2b00      	cmp	r3, #0
   41670:	d1fb      	bne.n	4166a <strcat+0x2e>
   41672:	f000 f879 	bl	41768 <strcpy>
   41676:	4620      	mov	r0, r4
   41678:	bd10      	pop	{r4, pc}
   4167a:	bf00      	nop

0004167c <strchr>:
   4167c:	b2c9      	uxtb	r1, r1
   4167e:	f000 0303 	and.w	r3, r0, #3
   41682:	2900      	cmp	r1, #0
   41684:	d043      	beq.n	4170e <strchr+0x92>
   41686:	b17b      	cbz	r3, 416a8 <strchr+0x2c>
   41688:	7803      	ldrb	r3, [r0, #0]
   4168a:	2b00      	cmp	r3, #0
   4168c:	d069      	beq.n	41762 <strchr+0xe6>
   4168e:	4299      	cmp	r1, r3
   41690:	d03c      	beq.n	4170c <strchr+0x90>
   41692:	1c43      	adds	r3, r0, #1
   41694:	e005      	b.n	416a2 <strchr+0x26>
   41696:	f813 2b01 	ldrb.w	r2, [r3], #1
   4169a:	2a00      	cmp	r2, #0
   4169c:	d05f      	beq.n	4175e <strchr+0xe2>
   4169e:	428a      	cmp	r2, r1
   416a0:	d034      	beq.n	4170c <strchr+0x90>
   416a2:	079a      	lsls	r2, r3, #30
   416a4:	4618      	mov	r0, r3
   416a6:	d1f6      	bne.n	41696 <strchr+0x1a>
   416a8:	b470      	push	{r4, r5, r6}
   416aa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   416ae:	6803      	ldr	r3, [r0, #0]
   416b0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   416b4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   416b8:	ea86 0403 	eor.w	r4, r6, r3
   416bc:	ea22 0203 	bic.w	r2, r2, r3
   416c0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   416c4:	ea23 0304 	bic.w	r3, r3, r4
   416c8:	4313      	orrs	r3, r2
   416ca:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   416ce:	d10f      	bne.n	416f0 <strchr+0x74>
   416d0:	f850 4f04 	ldr.w	r4, [r0, #4]!
   416d4:	ea84 0506 	eor.w	r5, r4, r6
   416d8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   416dc:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   416e0:	ea23 0304 	bic.w	r3, r3, r4
   416e4:	ea22 0205 	bic.w	r2, r2, r5
   416e8:	4313      	orrs	r3, r2
   416ea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   416ee:	d0ef      	beq.n	416d0 <strchr+0x54>
   416f0:	7803      	ldrb	r3, [r0, #0]
   416f2:	b143      	cbz	r3, 41706 <strchr+0x8a>
   416f4:	4299      	cmp	r1, r3
   416f6:	d102      	bne.n	416fe <strchr+0x82>
   416f8:	e006      	b.n	41708 <strchr+0x8c>
   416fa:	428b      	cmp	r3, r1
   416fc:	d004      	beq.n	41708 <strchr+0x8c>
   416fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   41702:	2b00      	cmp	r3, #0
   41704:	d1f9      	bne.n	416fa <strchr+0x7e>
   41706:	4618      	mov	r0, r3
   41708:	bc70      	pop	{r4, r5, r6}
   4170a:	4770      	bx	lr
   4170c:	4770      	bx	lr
   4170e:	b16b      	cbz	r3, 4172c <strchr+0xb0>
   41710:	7803      	ldrb	r3, [r0, #0]
   41712:	2b00      	cmp	r3, #0
   41714:	d0fa      	beq.n	4170c <strchr+0x90>
   41716:	1c43      	adds	r3, r0, #1
   41718:	e002      	b.n	41720 <strchr+0xa4>
   4171a:	7802      	ldrb	r2, [r0, #0]
   4171c:	2a00      	cmp	r2, #0
   4171e:	d0f5      	beq.n	4170c <strchr+0x90>
   41720:	f013 0f03 	tst.w	r3, #3
   41724:	4618      	mov	r0, r3
   41726:	f103 0301 	add.w	r3, r3, #1
   4172a:	d1f6      	bne.n	4171a <strchr+0x9e>
   4172c:	6802      	ldr	r2, [r0, #0]
   4172e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   41732:	ea23 0302 	bic.w	r3, r3, r2
   41736:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4173a:	d108      	bne.n	4174e <strchr+0xd2>
   4173c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   41740:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   41744:	ea23 0302 	bic.w	r3, r3, r2
   41748:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4174c:	d0f6      	beq.n	4173c <strchr+0xc0>
   4174e:	7803      	ldrb	r3, [r0, #0]
   41750:	2b00      	cmp	r3, #0
   41752:	d0db      	beq.n	4170c <strchr+0x90>
   41754:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   41758:	2b00      	cmp	r3, #0
   4175a:	d1fb      	bne.n	41754 <strchr+0xd8>
   4175c:	4770      	bx	lr
   4175e:	4610      	mov	r0, r2
   41760:	4770      	bx	lr
   41762:	4618      	mov	r0, r3
   41764:	4770      	bx	lr
   41766:	bf00      	nop

00041768 <strcpy>:
   41768:	ea80 0201 	eor.w	r2, r0, r1
   4176c:	4684      	mov	ip, r0
   4176e:	f012 0f03 	tst.w	r2, #3
   41772:	d14f      	bne.n	41814 <strcpy+0xac>
   41774:	f011 0f03 	tst.w	r1, #3
   41778:	d132      	bne.n	417e0 <strcpy+0x78>
   4177a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   4177e:	f011 0f04 	tst.w	r1, #4
   41782:	f851 3b04 	ldr.w	r3, [r1], #4
   41786:	d00b      	beq.n	417a0 <strcpy+0x38>
   41788:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   4178c:	439a      	bics	r2, r3
   4178e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   41792:	bf04      	itt	eq
   41794:	f84c 3b04 	streq.w	r3, [ip], #4
   41798:	f851 3b04 	ldreq.w	r3, [r1], #4
   4179c:	d116      	bne.n	417cc <strcpy+0x64>
   4179e:	bf00      	nop
   417a0:	f851 4b04 	ldr.w	r4, [r1], #4
   417a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   417a8:	439a      	bics	r2, r3
   417aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   417ae:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   417b2:	d10b      	bne.n	417cc <strcpy+0x64>
   417b4:	f84c 3b04 	str.w	r3, [ip], #4
   417b8:	43a2      	bics	r2, r4
   417ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   417be:	bf04      	itt	eq
   417c0:	f851 3b04 	ldreq.w	r3, [r1], #4
   417c4:	f84c 4b04 	streq.w	r4, [ip], #4
   417c8:	d0ea      	beq.n	417a0 <strcpy+0x38>
   417ca:	4623      	mov	r3, r4
   417cc:	f80c 3b01 	strb.w	r3, [ip], #1
   417d0:	f013 0fff 	tst.w	r3, #255	; 0xff
   417d4:	ea4f 2333 	mov.w	r3, r3, ror #8
   417d8:	d1f8      	bne.n	417cc <strcpy+0x64>
   417da:	f85d 4b04 	ldr.w	r4, [sp], #4
   417de:	4770      	bx	lr
   417e0:	f011 0f01 	tst.w	r1, #1
   417e4:	d006      	beq.n	417f4 <strcpy+0x8c>
   417e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   417ea:	f80c 2b01 	strb.w	r2, [ip], #1
   417ee:	2a00      	cmp	r2, #0
   417f0:	bf08      	it	eq
   417f2:	4770      	bxeq	lr
   417f4:	f011 0f02 	tst.w	r1, #2
   417f8:	d0bf      	beq.n	4177a <strcpy+0x12>
   417fa:	f831 2b02 	ldrh.w	r2, [r1], #2
   417fe:	f012 0fff 	tst.w	r2, #255	; 0xff
   41802:	bf16      	itet	ne
   41804:	f82c 2b02 	strhne.w	r2, [ip], #2
   41808:	f88c 2000 	strbeq.w	r2, [ip]
   4180c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   41810:	d1b3      	bne.n	4177a <strcpy+0x12>
   41812:	4770      	bx	lr
   41814:	f811 2b01 	ldrb.w	r2, [r1], #1
   41818:	f80c 2b01 	strb.w	r2, [ip], #1
   4181c:	2a00      	cmp	r2, #0
   4181e:	d1f9      	bne.n	41814 <strcpy+0xac>
   41820:	4770      	bx	lr
   41822:	bf00      	nop

00041824 <strlen>:
   41824:	f020 0103 	bic.w	r1, r0, #3
   41828:	f010 0003 	ands.w	r0, r0, #3
   4182c:	f1c0 0000 	rsb	r0, r0, #0
   41830:	f851 3b04 	ldr.w	r3, [r1], #4
   41834:	f100 0c04 	add.w	ip, r0, #4
   41838:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   4183c:	f06f 0200 	mvn.w	r2, #0
   41840:	bf1c      	itt	ne
   41842:	fa22 f20c 	lsrne.w	r2, r2, ip
   41846:	4313      	orrne	r3, r2
   41848:	f04f 0c01 	mov.w	ip, #1
   4184c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   41850:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   41854:	eba3 020c 	sub.w	r2, r3, ip
   41858:	ea22 0203 	bic.w	r2, r2, r3
   4185c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   41860:	bf04      	itt	eq
   41862:	f851 3b04 	ldreq.w	r3, [r1], #4
   41866:	3004      	addeq	r0, #4
   41868:	d0f4      	beq.n	41854 <strlen+0x30>
   4186a:	f1c2 0100 	rsb	r1, r2, #0
   4186e:	ea02 0201 	and.w	r2, r2, r1
   41872:	fab2 f282 	clz	r2, r2
   41876:	f1c2 021f 	rsb	r2, r2, #31
   4187a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   4187e:	4770      	bx	lr

00041880 <strncmp>:
   41880:	2a00      	cmp	r2, #0
   41882:	d03e      	beq.n	41902 <strncmp+0x82>
   41884:	ea40 0301 	orr.w	r3, r0, r1
   41888:	f013 0303 	ands.w	r3, r3, #3
   4188c:	b4f0      	push	{r4, r5, r6, r7}
   4188e:	d125      	bne.n	418dc <strncmp+0x5c>
   41890:	2a03      	cmp	r2, #3
   41892:	d923      	bls.n	418dc <strncmp+0x5c>
   41894:	6804      	ldr	r4, [r0, #0]
   41896:	680d      	ldr	r5, [r1, #0]
   41898:	42ac      	cmp	r4, r5
   4189a:	d11f      	bne.n	418dc <strncmp+0x5c>
   4189c:	3a04      	subs	r2, #4
   4189e:	d02d      	beq.n	418fc <strncmp+0x7c>
   418a0:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   418a4:	ea25 0404 	bic.w	r4, r5, r4
   418a8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   418ac:	d126      	bne.n	418fc <strncmp+0x7c>
   418ae:	1d06      	adds	r6, r0, #4
   418b0:	1d0d      	adds	r5, r1, #4
   418b2:	e00d      	b.n	418d0 <strncmp+0x50>
   418b4:	f856 3b04 	ldr.w	r3, [r6], #4
   418b8:	680f      	ldr	r7, [r1, #0]
   418ba:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   418be:	42bb      	cmp	r3, r7
   418c0:	ea24 0303 	bic.w	r3, r4, r3
   418c4:	d10a      	bne.n	418dc <strncmp+0x5c>
   418c6:	3a04      	subs	r2, #4
   418c8:	d018      	beq.n	418fc <strncmp+0x7c>
   418ca:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   418ce:	d115      	bne.n	418fc <strncmp+0x7c>
   418d0:	2a03      	cmp	r2, #3
   418d2:	4629      	mov	r1, r5
   418d4:	4630      	mov	r0, r6
   418d6:	f105 0504 	add.w	r5, r5, #4
   418da:	d8eb      	bhi.n	418b4 <strncmp+0x34>
   418dc:	7804      	ldrb	r4, [r0, #0]
   418de:	3a01      	subs	r2, #1
   418e0:	780b      	ldrb	r3, [r1, #0]
   418e2:	42a3      	cmp	r3, r4
   418e4:	d10f      	bne.n	41906 <strncmp+0x86>
   418e6:	b14b      	cbz	r3, 418fc <strncmp+0x7c>
   418e8:	b142      	cbz	r2, 418fc <strncmp+0x7c>
   418ea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   418ee:	3a01      	subs	r2, #1
   418f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   418f4:	429c      	cmp	r4, r3
   418f6:	d106      	bne.n	41906 <strncmp+0x86>
   418f8:	2c00      	cmp	r4, #0
   418fa:	d1f5      	bne.n	418e8 <strncmp+0x68>
   418fc:	2000      	movs	r0, #0
   418fe:	bcf0      	pop	{r4, r5, r6, r7}
   41900:	4770      	bx	lr
   41902:	4610      	mov	r0, r2
   41904:	4770      	bx	lr
   41906:	1ae0      	subs	r0, r4, r3
   41908:	bcf0      	pop	{r4, r5, r6, r7}
   4190a:	4770      	bx	lr

0004190c <strncpy>:
   4190c:	b470      	push	{r4, r5, r6}
   4190e:	ea40 0401 	orr.w	r4, r0, r1
   41912:	07a3      	lsls	r3, r4, #30
   41914:	d101      	bne.n	4191a <strncpy+0xe>
   41916:	2a03      	cmp	r2, #3
   41918:	d817      	bhi.n	4194a <strncpy+0x3e>
   4191a:	4606      	mov	r6, r0
   4191c:	b19a      	cbz	r2, 41946 <strncpy+0x3a>
   4191e:	780c      	ldrb	r4, [r1, #0]
   41920:	3a01      	subs	r2, #1
   41922:	1c73      	adds	r3, r6, #1
   41924:	7034      	strb	r4, [r6, #0]
   41926:	b13c      	cbz	r4, 41938 <strncpy+0x2c>
   41928:	b16a      	cbz	r2, 41946 <strncpy+0x3a>
   4192a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4192e:	3a01      	subs	r2, #1
   41930:	f803 4b01 	strb.w	r4, [r3], #1
   41934:	2c00      	cmp	r4, #0
   41936:	d1f7      	bne.n	41928 <strncpy+0x1c>
   41938:	b12a      	cbz	r2, 41946 <strncpy+0x3a>
   4193a:	441a      	add	r2, r3
   4193c:	2100      	movs	r1, #0
   4193e:	f803 1b01 	strb.w	r1, [r3], #1
   41942:	4293      	cmp	r3, r2
   41944:	d1fb      	bne.n	4193e <strncpy+0x32>
   41946:	bc70      	pop	{r4, r5, r6}
   41948:	4770      	bx	lr
   4194a:	460b      	mov	r3, r1
   4194c:	4606      	mov	r6, r0
   4194e:	4619      	mov	r1, r3
   41950:	f853 5b04 	ldr.w	r5, [r3], #4
   41954:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   41958:	ea24 0405 	bic.w	r4, r4, r5
   4195c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   41960:	d1dd      	bne.n	4191e <strncpy+0x12>
   41962:	3a04      	subs	r2, #4
   41964:	f846 5b04 	str.w	r5, [r6], #4
   41968:	4619      	mov	r1, r3
   4196a:	2a03      	cmp	r2, #3
   4196c:	d8ef      	bhi.n	4194e <strncpy+0x42>
   4196e:	e7d5      	b.n	4191c <strncpy+0x10>

00041970 <critical_factorization>:
   41970:	f04f 0c01 	mov.w	ip, #1
   41974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41978:	4664      	mov	r4, ip
   4197a:	2600      	movs	r6, #0
   4197c:	f04f 35ff 	mov.w	r5, #4294967295
   41980:	1933      	adds	r3, r6, r4
   41982:	1947      	adds	r7, r0, r5
   41984:	428b      	cmp	r3, r1
   41986:	d20c      	bcs.n	419a2 <critical_factorization+0x32>
   41988:	5d3f      	ldrb	r7, [r7, r4]
   4198a:	f810 e003 	ldrb.w	lr, [r0, r3]
   4198e:	45be      	cmp	lr, r7
   41990:	d22c      	bcs.n	419ec <critical_factorization+0x7c>
   41992:	461e      	mov	r6, r3
   41994:	2401      	movs	r4, #1
   41996:	eba3 0c05 	sub.w	ip, r3, r5
   4199a:	1947      	adds	r7, r0, r5
   4199c:	1933      	adds	r3, r6, r4
   4199e:	428b      	cmp	r3, r1
   419a0:	d3f2      	bcc.n	41988 <critical_factorization+0x18>
   419a2:	f04f 0801 	mov.w	r8, #1
   419a6:	2600      	movs	r6, #0
   419a8:	f04f 37ff 	mov.w	r7, #4294967295
   419ac:	f8c2 c000 	str.w	ip, [r2]
   419b0:	4644      	mov	r4, r8
   419b2:	1933      	adds	r3, r6, r4
   419b4:	eb00 0c07 	add.w	ip, r0, r7
   419b8:	428b      	cmp	r3, r1
   419ba:	d20e      	bcs.n	419da <critical_factorization+0x6a>
   419bc:	f81c c004 	ldrb.w	ip, [ip, r4]
   419c0:	f810 e003 	ldrb.w	lr, [r0, r3]
   419c4:	45e6      	cmp	lr, ip
   419c6:	d918      	bls.n	419fa <critical_factorization+0x8a>
   419c8:	461e      	mov	r6, r3
   419ca:	2401      	movs	r4, #1
   419cc:	eba3 0807 	sub.w	r8, r3, r7
   419d0:	eb00 0c07 	add.w	ip, r0, r7
   419d4:	1933      	adds	r3, r6, r4
   419d6:	428b      	cmp	r3, r1
   419d8:	d3f0      	bcc.n	419bc <critical_factorization+0x4c>
   419da:	3701      	adds	r7, #1
   419dc:	1c68      	adds	r0, r5, #1
   419de:	4287      	cmp	r7, r0
   419e0:	d302      	bcc.n	419e8 <critical_factorization+0x78>
   419e2:	4638      	mov	r0, r7
   419e4:	f8c2 8000 	str.w	r8, [r2]
   419e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   419ec:	d00c      	beq.n	41a08 <critical_factorization+0x98>
   419ee:	f04f 0c01 	mov.w	ip, #1
   419f2:	4635      	mov	r5, r6
   419f4:	4664      	mov	r4, ip
   419f6:	4466      	add	r6, ip
   419f8:	e7c2      	b.n	41980 <critical_factorization+0x10>
   419fa:	d00c      	beq.n	41a16 <critical_factorization+0xa6>
   419fc:	f04f 0801 	mov.w	r8, #1
   41a00:	4637      	mov	r7, r6
   41a02:	4644      	mov	r4, r8
   41a04:	4446      	add	r6, r8
   41a06:	e7d4      	b.n	419b2 <critical_factorization+0x42>
   41a08:	4564      	cmp	r4, ip
   41a0a:	f104 0401 	add.w	r4, r4, #1
   41a0e:	d1b7      	bne.n	41980 <critical_factorization+0x10>
   41a10:	461e      	mov	r6, r3
   41a12:	2401      	movs	r4, #1
   41a14:	e7b4      	b.n	41980 <critical_factorization+0x10>
   41a16:	4544      	cmp	r4, r8
   41a18:	f104 0401 	add.w	r4, r4, #1
   41a1c:	d1c9      	bne.n	419b2 <critical_factorization+0x42>
   41a1e:	461e      	mov	r6, r3
   41a20:	2401      	movs	r4, #1
   41a22:	e7c6      	b.n	419b2 <critical_factorization+0x42>

00041a24 <two_way_long_needle>:
   41a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41a28:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   41a2c:	4691      	mov	r9, r2
   41a2e:	4605      	mov	r5, r0
   41a30:	468b      	mov	fp, r1
   41a32:	4610      	mov	r0, r2
   41a34:	4619      	mov	r1, r3
   41a36:	aa05      	add	r2, sp, #20
   41a38:	461c      	mov	r4, r3
   41a3a:	f7ff ff99 	bl	41970 <critical_factorization>
   41a3e:	ab05      	add	r3, sp, #20
   41a40:	4680      	mov	r8, r0
   41a42:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   41a46:	f843 4f04 	str.w	r4, [r3, #4]!
   41a4a:	4293      	cmp	r3, r2
   41a4c:	d1fb      	bne.n	41a46 <two_way_long_needle+0x22>
   41a4e:	9b05      	ldr	r3, [sp, #20]
   41a50:	eb09 0103 	add.w	r1, r9, r3
   41a54:	2c00      	cmp	r4, #0
   41a56:	f000 80e0 	beq.w	41c1a <two_way_long_needle+0x1f6>
   41a5a:	f104 3aff 	add.w	sl, r4, #4294967295
   41a5e:	f109 32ff 	add.w	r2, r9, #4294967295
   41a62:	4653      	mov	r3, sl
   41a64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   41a68:	ae06      	add	r6, sp, #24
   41a6a:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
   41a6e:	f113 33ff 	adds.w	r3, r3, #4294967295
   41a72:	d2f7      	bcs.n	41a64 <two_way_long_needle+0x40>
   41a74:	4642      	mov	r2, r8
   41a76:	4648      	mov	r0, r9
   41a78:	f7ff fa9c 	bl	40fb4 <memcmp>
   41a7c:	2800      	cmp	r0, #0
   41a7e:	d063      	beq.n	41b48 <two_way_long_needle+0x124>
   41a80:	eba4 0208 	sub.w	r2, r4, r8
   41a84:	f108 37ff 	add.w	r7, r8, #4294967295
   41a88:	f04f 0a00 	mov.w	sl, #0
   41a8c:	4542      	cmp	r2, r8
   41a8e:	eb09 0307 	add.w	r3, r9, r7
   41a92:	bf38      	it	cc
   41a94:	4642      	movcc	r2, r8
   41a96:	3201      	adds	r2, #1
   41a98:	9205      	str	r2, [sp, #20]
   41a9a:	465a      	mov	r2, fp
   41a9c:	46c3      	mov	fp, r8
   41a9e:	4698      	mov	r8, r3
   41aa0:	eb0a 0604 	add.w	r6, sl, r4
   41aa4:	18a8      	adds	r0, r5, r2
   41aa6:	2100      	movs	r1, #0
   41aa8:	1ab2      	subs	r2, r6, r2
   41aaa:	f7ff fa3f 	bl	40f2c <memchr>
   41aae:	2e00      	cmp	r6, #0
   41ab0:	d045      	beq.n	41b3e <two_way_long_needle+0x11a>
   41ab2:	2800      	cmp	r0, #0
   41ab4:	d143      	bne.n	41b3e <two_way_long_needle+0x11a>
   41ab6:	19ab      	adds	r3, r5, r6
   41ab8:	aa06      	add	r2, sp, #24
   41aba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   41abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   41ac2:	bb9b      	cbnz	r3, 41b2c <two_way_long_needle+0x108>
   41ac4:	1e61      	subs	r1, r4, #1
   41ac6:	458b      	cmp	fp, r1
   41ac8:	d215      	bcs.n	41af6 <two_way_long_needle+0xd2>
   41aca:	eb0a 020b 	add.w	r2, sl, fp
   41ace:	f819 300b 	ldrb.w	r3, [r9, fp]
   41ad2:	eb09 000b 	add.w	r0, r9, fp
   41ad6:	f815 c002 	ldrb.w	ip, [r5, r2]
   41ada:	442a      	add	r2, r5
   41adc:	4563      	cmp	r3, ip
   41ade:	465b      	mov	r3, fp
   41ae0:	d006      	beq.n	41af0 <two_way_long_needle+0xcc>
   41ae2:	e026      	b.n	41b32 <two_way_long_needle+0x10e>
   41ae4:	f810 ef01 	ldrb.w	lr, [r0, #1]!
   41ae8:	f812 cf01 	ldrb.w	ip, [r2, #1]!
   41aec:	45e6      	cmp	lr, ip
   41aee:	d120      	bne.n	41b32 <two_way_long_needle+0x10e>
   41af0:	3301      	adds	r3, #1
   41af2:	428b      	cmp	r3, r1
   41af4:	d3f6      	bcc.n	41ae4 <two_way_long_needle+0xc0>
   41af6:	1c7b      	adds	r3, r7, #1
   41af8:	d011      	beq.n	41b1e <two_way_long_needle+0xfa>
   41afa:	eb0a 0307 	add.w	r3, sl, r7
   41afe:	f898 0000 	ldrb.w	r0, [r8]
   41b02:	5ce9      	ldrb	r1, [r5, r3]
   41b04:	18ea      	adds	r2, r5, r3
   41b06:	4288      	cmp	r0, r1
   41b08:	d10f      	bne.n	41b2a <two_way_long_needle+0x106>
   41b0a:	4643      	mov	r3, r8
   41b0c:	e005      	b.n	41b1a <two_way_long_needle+0xf6>
   41b0e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   41b12:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   41b16:	4288      	cmp	r0, r1
   41b18:	d107      	bne.n	41b2a <two_way_long_needle+0x106>
   41b1a:	4599      	cmp	r9, r3
   41b1c:	d1f7      	bne.n	41b0e <two_way_long_needle+0xea>
   41b1e:	eb05 000a 	add.w	r0, r5, sl
   41b22:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   41b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41b2a:	9b05      	ldr	r3, [sp, #20]
   41b2c:	449a      	add	sl, r3
   41b2e:	4632      	mov	r2, r6
   41b30:	e7b6      	b.n	41aa0 <two_way_long_needle+0x7c>
   41b32:	f1cb 0201 	rsb	r2, fp, #1
   41b36:	4492      	add	sl, r2
   41b38:	4632      	mov	r2, r6
   41b3a:	449a      	add	sl, r3
   41b3c:	e7b0      	b.n	41aa0 <two_way_long_needle+0x7c>
   41b3e:	2000      	movs	r0, #0
   41b40:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   41b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41b48:	f108 33ff 	add.w	r3, r8, #4294967295
   41b4c:	f8cd 9004 	str.w	r9, [sp, #4]
   41b50:	4606      	mov	r6, r0
   41b52:	465a      	mov	r2, fp
   41b54:	9303      	str	r3, [sp, #12]
   41b56:	444b      	add	r3, r9
   41b58:	46a1      	mov	r9, r4
   41b5a:	4604      	mov	r4, r0
   41b5c:	9302      	str	r3, [sp, #8]
   41b5e:	eb06 0709 	add.w	r7, r6, r9
   41b62:	18a8      	adds	r0, r5, r2
   41b64:	2100      	movs	r1, #0
   41b66:	1aba      	subs	r2, r7, r2
   41b68:	f7ff f9e0 	bl	40f2c <memchr>
   41b6c:	2800      	cmp	r0, #0
   41b6e:	d1e6      	bne.n	41b3e <two_way_long_needle+0x11a>
   41b70:	2f00      	cmp	r7, #0
   41b72:	d0e4      	beq.n	41b3e <two_way_long_needle+0x11a>
   41b74:	19eb      	adds	r3, r5, r7
   41b76:	aa06      	add	r2, sp, #24
   41b78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   41b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   41b80:	b14b      	cbz	r3, 41b96 <two_way_long_needle+0x172>
   41b82:	b124      	cbz	r4, 41b8e <two_way_long_needle+0x16a>
   41b84:	9a05      	ldr	r2, [sp, #20]
   41b86:	429a      	cmp	r2, r3
   41b88:	bf88      	it	hi
   41b8a:	eba9 0302 	subhi.w	r3, r9, r2
   41b8e:	441e      	add	r6, r3
   41b90:	2400      	movs	r4, #0
   41b92:	463a      	mov	r2, r7
   41b94:	e7e3      	b.n	41b5e <two_way_long_needle+0x13a>
   41b96:	4544      	cmp	r4, r8
   41b98:	4623      	mov	r3, r4
   41b9a:	bf38      	it	cc
   41b9c:	4643      	movcc	r3, r8
   41b9e:	4553      	cmp	r3, sl
   41ba0:	d212      	bcs.n	41bc8 <two_way_long_needle+0x1a4>
   41ba2:	18f2      	adds	r2, r6, r3
   41ba4:	9901      	ldr	r1, [sp, #4]
   41ba6:	5ca8      	ldrb	r0, [r5, r2]
   41ba8:	442a      	add	r2, r5
   41baa:	f811 c003 	ldrb.w	ip, [r1, r3]
   41bae:	4419      	add	r1, r3
   41bb0:	4584      	cmp	ip, r0
   41bb2:	d006      	beq.n	41bc2 <two_way_long_needle+0x19e>
   41bb4:	e02a      	b.n	41c0c <two_way_long_needle+0x1e8>
   41bb6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   41bba:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   41bbe:	4584      	cmp	ip, r0
   41bc0:	d124      	bne.n	41c0c <two_way_long_needle+0x1e8>
   41bc2:	3301      	adds	r3, #1
   41bc4:	4553      	cmp	r3, sl
   41bc6:	d1f6      	bne.n	41bb6 <two_way_long_needle+0x192>
   41bc8:	9b03      	ldr	r3, [sp, #12]
   41bca:	4544      	cmp	r4, r8
   41bcc:	4619      	mov	r1, r3
   41bce:	d234      	bcs.n	41c3a <two_way_long_needle+0x216>
   41bd0:	18f3      	adds	r3, r6, r3
   41bd2:	9a02      	ldr	r2, [sp, #8]
   41bd4:	5ce8      	ldrb	r0, [r5, r3]
   41bd6:	442b      	add	r3, r5
   41bd8:	7812      	ldrb	r2, [r2, #0]
   41bda:	4290      	cmp	r0, r2
   41bdc:	d12d      	bne.n	41c3a <two_way_long_needle+0x216>
   41bde:	9802      	ldr	r0, [sp, #8]
   41be0:	f104 3bff 	add.w	fp, r4, #4294967295
   41be4:	e006      	b.n	41bf4 <two_way_long_needle+0x1d0>
   41be6:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   41bea:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   41bee:	45e6      	cmp	lr, ip
   41bf0:	d103      	bne.n	41bfa <two_way_long_needle+0x1d6>
   41bf2:	4611      	mov	r1, r2
   41bf4:	1e4a      	subs	r2, r1, #1
   41bf6:	4593      	cmp	fp, r2
   41bf8:	d1f5      	bne.n	41be6 <two_way_long_needle+0x1c2>
   41bfa:	3401      	adds	r4, #1
   41bfc:	428c      	cmp	r4, r1
   41bfe:	d81e      	bhi.n	41c3e <two_way_long_needle+0x21a>
   41c00:	9c05      	ldr	r4, [sp, #20]
   41c02:	463a      	mov	r2, r7
   41c04:	4426      	add	r6, r4
   41c06:	eba9 0404 	sub.w	r4, r9, r4
   41c0a:	e7a8      	b.n	41b5e <two_way_long_needle+0x13a>
   41c0c:	f1c8 0201 	rsb	r2, r8, #1
   41c10:	2400      	movs	r4, #0
   41c12:	4416      	add	r6, r2
   41c14:	463a      	mov	r2, r7
   41c16:	441e      	add	r6, r3
   41c18:	e7a1      	b.n	41b5e <two_way_long_needle+0x13a>
   41c1a:	4642      	mov	r2, r8
   41c1c:	4648      	mov	r0, r9
   41c1e:	f7ff f9c9 	bl	40fb4 <memcmp>
   41c22:	2800      	cmp	r0, #0
   41c24:	f47f af2c 	bne.w	41a80 <two_way_long_needle+0x5c>
   41c28:	eb05 000b 	add.w	r0, r5, fp
   41c2c:	f1cb 0200 	rsb	r2, fp, #0
   41c30:	4621      	mov	r1, r4
   41c32:	f7ff f97b 	bl	40f2c <memchr>
   41c36:	4620      	mov	r0, r4
   41c38:	e782      	b.n	41b40 <two_way_long_needle+0x11c>
   41c3a:	4641      	mov	r1, r8
   41c3c:	e7dd      	b.n	41bfa <two_way_long_needle+0x1d6>
   41c3e:	19a8      	adds	r0, r5, r6
   41c40:	e77e      	b.n	41b40 <two_way_long_needle+0x11c>
   41c42:	bf00      	nop

00041c44 <strstr>:
   41c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41c48:	7802      	ldrb	r2, [r0, #0]
   41c4a:	460e      	mov	r6, r1
   41c4c:	b085      	sub	sp, #20
   41c4e:	4605      	mov	r5, r0
   41c50:	7809      	ldrb	r1, [r1, #0]
   41c52:	2a00      	cmp	r2, #0
   41c54:	f000 809a 	beq.w	41d8c <strstr+0x148>
   41c58:	b1a1      	cbz	r1, 41c84 <strstr+0x40>
   41c5a:	4684      	mov	ip, r0
   41c5c:	1c74      	adds	r4, r6, #1
   41c5e:	4608      	mov	r0, r1
   41c60:	2701      	movs	r7, #1
   41c62:	e001      	b.n	41c68 <strstr+0x24>
   41c64:	b168      	cbz	r0, 41c82 <strstr+0x3e>
   41c66:	461c      	mov	r4, r3
   41c68:	4290      	cmp	r0, r2
   41c6a:	bf14      	ite	ne
   41c6c:	2700      	movne	r7, #0
   41c6e:	f007 0701 	andeq.w	r7, r7, #1
   41c72:	4623      	mov	r3, r4
   41c74:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
   41c78:	f813 0b01 	ldrb.w	r0, [r3], #1
   41c7c:	2a00      	cmp	r2, #0
   41c7e:	d1f1      	bne.n	41c64 <strstr+0x20>
   41c80:	bb08      	cbnz	r0, 41cc6 <strstr+0x82>
   41c82:	b11f      	cbz	r7, 41c8c <strstr+0x48>
   41c84:	4628      	mov	r0, r5
   41c86:	b005      	add	sp, #20
   41c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41c8c:	1c68      	adds	r0, r5, #1
   41c8e:	1ba4      	subs	r4, r4, r6
   41c90:	f7ff fcf4 	bl	4167c <strchr>
   41c94:	4607      	mov	r7, r0
   41c96:	b188      	cbz	r0, 41cbc <strstr+0x78>
   41c98:	2c01      	cmp	r4, #1
   41c9a:	d00f      	beq.n	41cbc <strstr+0x78>
   41c9c:	4425      	add	r5, r4
   41c9e:	4285      	cmp	r5, r0
   41ca0:	bf2c      	ite	cs
   41ca2:	eba5 0900 	subcs.w	r9, r5, r0
   41ca6:	f04f 0901 	movcc.w	r9, #1
   41caa:	2c1f      	cmp	r4, #31
   41cac:	d910      	bls.n	41cd0 <strstr+0x8c>
   41cae:	4623      	mov	r3, r4
   41cb0:	4632      	mov	r2, r6
   41cb2:	4649      	mov	r1, r9
   41cb4:	f7ff feb6 	bl	41a24 <two_way_long_needle>
   41cb8:	4605      	mov	r5, r0
   41cba:	e7e3      	b.n	41c84 <strstr+0x40>
   41cbc:	463d      	mov	r5, r7
   41cbe:	4628      	mov	r0, r5
   41cc0:	b005      	add	sp, #20
   41cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41cc6:	2500      	movs	r5, #0
   41cc8:	4628      	mov	r0, r5
   41cca:	b005      	add	sp, #20
   41ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41cd0:	aa03      	add	r2, sp, #12
   41cd2:	4621      	mov	r1, r4
   41cd4:	4630      	mov	r0, r6
   41cd6:	f7ff fe4b 	bl	41970 <critical_factorization>
   41cda:	9903      	ldr	r1, [sp, #12]
   41cdc:	4680      	mov	r8, r0
   41cde:	4630      	mov	r0, r6
   41ce0:	4431      	add	r1, r6
   41ce2:	4642      	mov	r2, r8
   41ce4:	f7ff f966 	bl	40fb4 <memcmp>
   41ce8:	2800      	cmp	r0, #0
   41cea:	d153      	bne.n	41d94 <strstr+0x150>
   41cec:	f108 33ff 	add.w	r3, r8, #4294967295
   41cf0:	4682      	mov	sl, r0
   41cf2:	4605      	mov	r5, r0
   41cf4:	464a      	mov	r2, r9
   41cf6:	9301      	str	r3, [sp, #4]
   41cf8:	46b3      	mov	fp, r6
   41cfa:	18f3      	adds	r3, r6, r3
   41cfc:	9300      	str	r3, [sp, #0]
   41cfe:	1966      	adds	r6, r4, r5
   41d00:	18b8      	adds	r0, r7, r2
   41d02:	2100      	movs	r1, #0
   41d04:	1ab2      	subs	r2, r6, r2
   41d06:	f7ff f911 	bl	40f2c <memchr>
   41d0a:	2800      	cmp	r0, #0
   41d0c:	d1db      	bne.n	41cc6 <strstr+0x82>
   41d0e:	2e00      	cmp	r6, #0
   41d10:	d0d9      	beq.n	41cc6 <strstr+0x82>
   41d12:	45d0      	cmp	r8, sl
   41d14:	4643      	mov	r3, r8
   41d16:	bf38      	it	cc
   41d18:	4653      	movcc	r3, sl
   41d1a:	429c      	cmp	r4, r3
   41d1c:	d913      	bls.n	41d46 <strstr+0x102>
   41d1e:	195a      	adds	r2, r3, r5
   41d20:	f81b 0003 	ldrb.w	r0, [fp, r3]
   41d24:	eb0b 0103 	add.w	r1, fp, r3
   41d28:	f817 c002 	ldrb.w	ip, [r7, r2]
   41d2c:	443a      	add	r2, r7
   41d2e:	4584      	cmp	ip, r0
   41d30:	d006      	beq.n	41d40 <strstr+0xfc>
   41d32:	e077      	b.n	41e24 <strstr+0x1e0>
   41d34:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   41d38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   41d3c:	4584      	cmp	ip, r0
   41d3e:	d171      	bne.n	41e24 <strstr+0x1e0>
   41d40:	3301      	adds	r3, #1
   41d42:	429c      	cmp	r4, r3
   41d44:	d1f6      	bne.n	41d34 <strstr+0xf0>
   41d46:	9b01      	ldr	r3, [sp, #4]
   41d48:	45d0      	cmp	r8, sl
   41d4a:	4619      	mov	r1, r3
   41d4c:	d97c      	bls.n	41e48 <strstr+0x204>
   41d4e:	18eb      	adds	r3, r5, r3
   41d50:	9a00      	ldr	r2, [sp, #0]
   41d52:	5cf8      	ldrb	r0, [r7, r3]
   41d54:	443b      	add	r3, r7
   41d56:	7812      	ldrb	r2, [r2, #0]
   41d58:	4282      	cmp	r2, r0
   41d5a:	d175      	bne.n	41e48 <strstr+0x204>
   41d5c:	9800      	ldr	r0, [sp, #0]
   41d5e:	f10a 39ff 	add.w	r9, sl, #4294967295
   41d62:	e006      	b.n	41d72 <strstr+0x12e>
   41d64:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   41d68:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   41d6c:	45e6      	cmp	lr, ip
   41d6e:	d103      	bne.n	41d78 <strstr+0x134>
   41d70:	4611      	mov	r1, r2
   41d72:	1e4a      	subs	r2, r1, #1
   41d74:	454a      	cmp	r2, r9
   41d76:	d1f5      	bne.n	41d64 <strstr+0x120>
   41d78:	f10a 0a01 	add.w	sl, sl, #1
   41d7c:	458a      	cmp	sl, r1
   41d7e:	d84f      	bhi.n	41e20 <strstr+0x1dc>
   41d80:	9b03      	ldr	r3, [sp, #12]
   41d82:	4632      	mov	r2, r6
   41d84:	441d      	add	r5, r3
   41d86:	eba4 0a03 	sub.w	sl, r4, r3
   41d8a:	e7b8      	b.n	41cfe <strstr+0xba>
   41d8c:	2900      	cmp	r1, #0
   41d8e:	bf18      	it	ne
   41d90:	2500      	movne	r5, #0
   41d92:	e777      	b.n	41c84 <strstr+0x40>
   41d94:	eba4 0308 	sub.w	r3, r4, r8
   41d98:	f108 3aff 	add.w	sl, r8, #4294967295
   41d9c:	464a      	mov	r2, r9
   41d9e:	2500      	movs	r5, #0
   41da0:	4543      	cmp	r3, r8
   41da2:	eb06 010a 	add.w	r1, r6, sl
   41da6:	46b3      	mov	fp, r6
   41da8:	bf38      	it	cc
   41daa:	4643      	movcc	r3, r8
   41dac:	4689      	mov	r9, r1
   41dae:	3301      	adds	r3, #1
   41db0:	9303      	str	r3, [sp, #12]
   41db2:	1966      	adds	r6, r4, r5
   41db4:	18b8      	adds	r0, r7, r2
   41db6:	2100      	movs	r1, #0
   41db8:	1ab2      	subs	r2, r6, r2
   41dba:	f7ff f8b7 	bl	40f2c <memchr>
   41dbe:	2e00      	cmp	r6, #0
   41dc0:	d081      	beq.n	41cc6 <strstr+0x82>
   41dc2:	2800      	cmp	r0, #0
   41dc4:	f47f af7f 	bne.w	41cc6 <strstr+0x82>
   41dc8:	4544      	cmp	r4, r8
   41dca:	d914      	bls.n	41df6 <strstr+0x1b2>
   41dcc:	eb08 0205 	add.w	r2, r8, r5
   41dd0:	f81b 0008 	ldrb.w	r0, [fp, r8]
   41dd4:	eb0b 0108 	add.w	r1, fp, r8
   41dd8:	5cbb      	ldrb	r3, [r7, r2]
   41dda:	443a      	add	r2, r7
   41ddc:	4298      	cmp	r0, r3
   41dde:	4643      	mov	r3, r8
   41de0:	d006      	beq.n	41df0 <strstr+0x1ac>
   41de2:	e027      	b.n	41e34 <strstr+0x1f0>
   41de4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   41de8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   41dec:	4584      	cmp	ip, r0
   41dee:	d121      	bne.n	41e34 <strstr+0x1f0>
   41df0:	3301      	adds	r3, #1
   41df2:	429c      	cmp	r4, r3
   41df4:	d1f6      	bne.n	41de4 <strstr+0x1a0>
   41df6:	f1ba 3fff 	cmp.w	sl, #4294967295
   41dfa:	d011      	beq.n	41e20 <strstr+0x1dc>
   41dfc:	eb05 030a 	add.w	r3, r5, sl
   41e00:	f899 2000 	ldrb.w	r2, [r9]
   41e04:	5cf9      	ldrb	r1, [r7, r3]
   41e06:	443b      	add	r3, r7
   41e08:	4291      	cmp	r1, r2
   41e0a:	d119      	bne.n	41e40 <strstr+0x1fc>
   41e0c:	464a      	mov	r2, r9
   41e0e:	e005      	b.n	41e1c <strstr+0x1d8>
   41e10:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   41e14:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   41e18:	4288      	cmp	r0, r1
   41e1a:	d111      	bne.n	41e40 <strstr+0x1fc>
   41e1c:	455a      	cmp	r2, fp
   41e1e:	d1f7      	bne.n	41e10 <strstr+0x1cc>
   41e20:	443d      	add	r5, r7
   41e22:	e72f      	b.n	41c84 <strstr+0x40>
   41e24:	f1c8 0201 	rsb	r2, r8, #1
   41e28:	f04f 0a00 	mov.w	sl, #0
   41e2c:	4415      	add	r5, r2
   41e2e:	4632      	mov	r2, r6
   41e30:	441d      	add	r5, r3
   41e32:	e764      	b.n	41cfe <strstr+0xba>
   41e34:	f1c8 0201 	rsb	r2, r8, #1
   41e38:	4415      	add	r5, r2
   41e3a:	4632      	mov	r2, r6
   41e3c:	441d      	add	r5, r3
   41e3e:	e7b8      	b.n	41db2 <strstr+0x16e>
   41e40:	9b03      	ldr	r3, [sp, #12]
   41e42:	4632      	mov	r2, r6
   41e44:	441d      	add	r5, r3
   41e46:	e7b4      	b.n	41db2 <strstr+0x16e>
   41e48:	4641      	mov	r1, r8
   41e4a:	e795      	b.n	41d78 <strstr+0x134>

00041e4c <_strtod_r>:
   41e4c:	4b05      	ldr	r3, [pc, #20]	; (41e64 <_strtod_r+0x18>)
   41e4e:	681b      	ldr	r3, [r3, #0]
   41e50:	b410      	push	{r4}
   41e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   41e54:	4c04      	ldr	r4, [pc, #16]	; (41e68 <_strtod_r+0x1c>)
   41e56:	2b00      	cmp	r3, #0
   41e58:	bf08      	it	eq
   41e5a:	4623      	moveq	r3, r4
   41e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   41e60:	f7d8 bd4e 	b.w	1a900 <_strtod_l>
   41e64:	20031bb8 	.word	0x20031bb8
   41e68:	20031bbc 	.word	0x20031bbc

00041e6c <strtod>:
   41e6c:	4b06      	ldr	r3, [pc, #24]	; (41e88 <strtod+0x1c>)
   41e6e:	460a      	mov	r2, r1
   41e70:	4601      	mov	r1, r0
   41e72:	6818      	ldr	r0, [r3, #0]
   41e74:	b410      	push	{r4}
   41e76:	6b43      	ldr	r3, [r0, #52]	; 0x34
   41e78:	4c04      	ldr	r4, [pc, #16]	; (41e8c <strtod+0x20>)
   41e7a:	2b00      	cmp	r3, #0
   41e7c:	bf08      	it	eq
   41e7e:	4623      	moveq	r3, r4
   41e80:	f85d 4b04 	ldr.w	r4, [sp], #4
   41e84:	f7d8 bd3c 	b.w	1a900 <_strtod_l>
   41e88:	20031bb8 	.word	0x20031bb8
   41e8c:	20031bbc 	.word	0x20031bbc

00041e90 <_strtol_l.isra.0>:
   41e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e94:	460e      	mov	r6, r1
   41e96:	4680      	mov	r8, r0
   41e98:	4617      	mov	r7, r2
   41e9a:	4699      	mov	r9, r3
   41e9c:	460d      	mov	r5, r1
   41e9e:	e000      	b.n	41ea2 <_strtol_l.isra.0+0x12>
   41ea0:	4625      	mov	r5, r4
   41ea2:	462c      	mov	r4, r5
   41ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
   41ea6:	f814 bb01 	ldrb.w	fp, [r4], #1
   41eaa:	f7fe fd59 	bl	40960 <__locale_ctype_ptr_l>
   41eae:	4458      	add	r0, fp
   41eb0:	7841      	ldrb	r1, [r0, #1]
   41eb2:	f011 0108 	ands.w	r1, r1, #8
   41eb6:	d1f3      	bne.n	41ea0 <_strtol_l.isra.0+0x10>
   41eb8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   41ebc:	d053      	beq.n	41f66 <_strtol_l.isra.0+0xd6>
   41ebe:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   41ec2:	d045      	beq.n	41f50 <_strtol_l.isra.0+0xc0>
   41ec4:	f039 0310 	bics.w	r3, r9, #16
   41ec8:	d107      	bne.n	41eda <_strtol_l.isra.0+0x4a>
   41eca:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   41ece:	d04f      	beq.n	41f70 <_strtol_l.isra.0+0xe0>
   41ed0:	f1b9 0f00 	cmp.w	r9, #0
   41ed4:	d101      	bne.n	41eda <_strtol_l.isra.0+0x4a>
   41ed6:	f04f 090a 	mov.w	r9, #10
   41eda:	464b      	mov	r3, r9
   41edc:	2900      	cmp	r1, #0
   41ede:	f04f 0500 	mov.w	r5, #0
   41ee2:	bf0c      	ite	eq
   41ee4:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   41ee8:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   41eec:	4628      	mov	r0, r5
   41eee:	fbba fcf3 	udiv	ip, sl, r3
   41ef2:	fb03 ae1c 	mls	lr, r3, ip, sl
   41ef6:	e00e      	b.n	41f16 <_strtol_l.isra.0+0x86>
   41ef8:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
   41efc:	4591      	cmp	r9, r2
   41efe:	dd1a      	ble.n	41f36 <_strtol_l.isra.0+0xa6>
   41f00:	2d00      	cmp	r5, #0
   41f02:	db04      	blt.n	41f0e <_strtol_l.isra.0+0x7e>
   41f04:	4584      	cmp	ip, r0
   41f06:	d302      	bcc.n	41f0e <_strtol_l.isra.0+0x7e>
   41f08:	d11e      	bne.n	41f48 <_strtol_l.isra.0+0xb8>
   41f0a:	4596      	cmp	lr, r2
   41f0c:	da1c      	bge.n	41f48 <_strtol_l.isra.0+0xb8>
   41f0e:	f04f 35ff 	mov.w	r5, #4294967295
   41f12:	f814 bb01 	ldrb.w	fp, [r4], #1
   41f16:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
   41f1a:	2a09      	cmp	r2, #9
   41f1c:	d9ee      	bls.n	41efc <_strtol_l.isra.0+0x6c>
   41f1e:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
   41f22:	2a19      	cmp	r2, #25
   41f24:	d9e8      	bls.n	41ef8 <_strtol_l.isra.0+0x68>
   41f26:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
   41f2a:	2a19      	cmp	r2, #25
   41f2c:	d803      	bhi.n	41f36 <_strtol_l.isra.0+0xa6>
   41f2e:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
   41f32:	4591      	cmp	r9, r2
   41f34:	dce4      	bgt.n	41f00 <_strtol_l.isra.0+0x70>
   41f36:	1c6b      	adds	r3, r5, #1
   41f38:	d00e      	beq.n	41f58 <_strtol_l.isra.0+0xc8>
   41f3a:	b101      	cbz	r1, 41f3e <_strtol_l.isra.0+0xae>
   41f3c:	4240      	negs	r0, r0
   41f3e:	b10f      	cbz	r7, 41f44 <_strtol_l.isra.0+0xb4>
   41f40:	bb15      	cbnz	r5, 41f88 <_strtol_l.isra.0+0xf8>
   41f42:	603e      	str	r6, [r7, #0]
   41f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41f48:	fb03 2000 	mla	r0, r3, r0, r2
   41f4c:	2501      	movs	r5, #1
   41f4e:	e7e0      	b.n	41f12 <_strtol_l.isra.0+0x82>
   41f50:	1cac      	adds	r4, r5, #2
   41f52:	f895 b001 	ldrb.w	fp, [r5, #1]
   41f56:	e7b5      	b.n	41ec4 <_strtol_l.isra.0+0x34>
   41f58:	2322      	movs	r3, #34	; 0x22
   41f5a:	f8c8 3000 	str.w	r3, [r8]
   41f5e:	b1af      	cbz	r7, 41f8c <_strtol_l.isra.0+0xfc>
   41f60:	1e66      	subs	r6, r4, #1
   41f62:	4650      	mov	r0, sl
   41f64:	e7ed      	b.n	41f42 <_strtol_l.isra.0+0xb2>
   41f66:	1cac      	adds	r4, r5, #2
   41f68:	f895 b001 	ldrb.w	fp, [r5, #1]
   41f6c:	2101      	movs	r1, #1
   41f6e:	e7a9      	b.n	41ec4 <_strtol_l.isra.0+0x34>
   41f70:	7823      	ldrb	r3, [r4, #0]
   41f72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   41f76:	2b58      	cmp	r3, #88	; 0x58
   41f78:	d10a      	bne.n	41f90 <_strtol_l.isra.0+0x100>
   41f7a:	f04f 0910 	mov.w	r9, #16
   41f7e:	f894 b001 	ldrb.w	fp, [r4, #1]
   41f82:	3402      	adds	r4, #2
   41f84:	464b      	mov	r3, r9
   41f86:	e7a9      	b.n	41edc <_strtol_l.isra.0+0x4c>
   41f88:	4682      	mov	sl, r0
   41f8a:	e7e9      	b.n	41f60 <_strtol_l.isra.0+0xd0>
   41f8c:	4650      	mov	r0, sl
   41f8e:	e7d9      	b.n	41f44 <_strtol_l.isra.0+0xb4>
   41f90:	f1b9 0f00 	cmp.w	r9, #0
   41f94:	d1a1      	bne.n	41eda <_strtol_l.isra.0+0x4a>
   41f96:	f04f 0908 	mov.w	r9, #8
   41f9a:	464b      	mov	r3, r9
   41f9c:	e79e      	b.n	41edc <_strtol_l.isra.0+0x4c>
   41f9e:	bf00      	nop

00041fa0 <_strtol_r>:
   41fa0:	b530      	push	{r4, r5, lr}
   41fa2:	4c06      	ldr	r4, [pc, #24]	; (41fbc <_strtol_r+0x1c>)
   41fa4:	b083      	sub	sp, #12
   41fa6:	4d06      	ldr	r5, [pc, #24]	; (41fc0 <_strtol_r+0x20>)
   41fa8:	6824      	ldr	r4, [r4, #0]
   41faa:	6b64      	ldr	r4, [r4, #52]	; 0x34
   41fac:	2c00      	cmp	r4, #0
   41fae:	bf08      	it	eq
   41fb0:	462c      	moveq	r4, r5
   41fb2:	9400      	str	r4, [sp, #0]
   41fb4:	f7ff ff6c 	bl	41e90 <_strtol_l.isra.0>
   41fb8:	b003      	add	sp, #12
   41fba:	bd30      	pop	{r4, r5, pc}
   41fbc:	20031bb8 	.word	0x20031bb8
   41fc0:	20031bbc 	.word	0x20031bbc

00041fc4 <strtol>:
   41fc4:	b570      	push	{r4, r5, r6, lr}
   41fc6:	4c08      	ldr	r4, [pc, #32]	; (41fe8 <strtol+0x24>)
   41fc8:	b082      	sub	sp, #8
   41fca:	4e08      	ldr	r6, [pc, #32]	; (41fec <strtol+0x28>)
   41fcc:	4613      	mov	r3, r2
   41fce:	6825      	ldr	r5, [r4, #0]
   41fd0:	460a      	mov	r2, r1
   41fd2:	4601      	mov	r1, r0
   41fd4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   41fd6:	4628      	mov	r0, r5
   41fd8:	2c00      	cmp	r4, #0
   41fda:	bf08      	it	eq
   41fdc:	4634      	moveq	r4, r6
   41fde:	9400      	str	r4, [sp, #0]
   41fe0:	f7ff ff56 	bl	41e90 <_strtol_l.isra.0>
   41fe4:	b002      	add	sp, #8
   41fe6:	bd70      	pop	{r4, r5, r6, pc}
   41fe8:	20031bb8 	.word	0x20031bb8
   41fec:	20031bbc 	.word	0x20031bbc

00041ff0 <_strtoul_l.isra.0>:
   41ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41ff4:	460d      	mov	r5, r1
   41ff6:	4607      	mov	r7, r0
   41ff8:	4616      	mov	r6, r2
   41ffa:	4698      	mov	r8, r3
   41ffc:	468a      	mov	sl, r1
   41ffe:	e000      	b.n	42002 <_strtoul_l.isra.0+0x12>
   42000:	46a2      	mov	sl, r4
   42002:	4654      	mov	r4, sl
   42004:	9808      	ldr	r0, [sp, #32]
   42006:	f814 9b01 	ldrb.w	r9, [r4], #1
   4200a:	f7fe fca9 	bl	40960 <__locale_ctype_ptr_l>
   4200e:	4448      	add	r0, r9
   42010:	7840      	ldrb	r0, [r0, #1]
   42012:	f010 0008 	ands.w	r0, r0, #8
   42016:	d1f3      	bne.n	42000 <_strtoul_l.isra.0+0x10>
   42018:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
   4201c:	d062      	beq.n	420e4 <_strtoul_l.isra.0+0xf4>
   4201e:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   42022:	d011      	beq.n	42048 <_strtoul_l.isra.0+0x58>
   42024:	4649      	mov	r1, r9
   42026:	4603      	mov	r3, r0
   42028:	f038 0210 	bics.w	r2, r8, #16
   4202c:	d114      	bne.n	42058 <_strtoul_l.isra.0+0x68>
   4202e:	2930      	cmp	r1, #48	; 0x30
   42030:	d05e      	beq.n	420f0 <_strtoul_l.isra.0+0x100>
   42032:	f1b8 0f00 	cmp.w	r8, #0
   42036:	d10f      	bne.n	42058 <_strtoul_l.isra.0+0x68>
   42038:	f04f 080a 	mov.w	r8, #10
   4203c:	f04f 0905 	mov.w	r9, #5
   42040:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 42124 <_strtoul_l.isra.0+0x134>
   42044:	46c2      	mov	sl, r8
   42046:	e010      	b.n	4206a <_strtoul_l.isra.0+0x7a>
   42048:	f038 0210 	bics.w	r2, r8, #16
   4204c:	4603      	mov	r3, r0
   4204e:	f10a 0402 	add.w	r4, sl, #2
   42052:	f89a 1001 	ldrb.w	r1, [sl, #1]
   42056:	d0ea      	beq.n	4202e <_strtoul_l.isra.0+0x3e>
   42058:	f04f 3eff 	mov.w	lr, #4294967295
   4205c:	46c2      	mov	sl, r8
   4205e:	fbbe fef8 	udiv	lr, lr, r8
   42062:	fb08 f90e 	mul.w	r9, r8, lr
   42066:	ea6f 0909 	mvn.w	r9, r9
   4206a:	f04f 0c00 	mov.w	ip, #0
   4206e:	4660      	mov	r0, ip
   42070:	e00f      	b.n	42092 <_strtoul_l.isra.0+0xa2>
   42072:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   42076:	4590      	cmp	r8, r2
   42078:	dd1b      	ble.n	420b2 <_strtoul_l.isra.0+0xc2>
   4207a:	f1bc 0f00 	cmp.w	ip, #0
   4207e:	db04      	blt.n	4208a <_strtoul_l.isra.0+0x9a>
   42080:	4570      	cmp	r0, lr
   42082:	d802      	bhi.n	4208a <_strtoul_l.isra.0+0x9a>
   42084:	d121      	bne.n	420ca <_strtoul_l.isra.0+0xda>
   42086:	454a      	cmp	r2, r9
   42088:	dd1f      	ble.n	420ca <_strtoul_l.isra.0+0xda>
   4208a:	f04f 3cff 	mov.w	ip, #4294967295
   4208e:	f814 1b01 	ldrb.w	r1, [r4], #1
   42092:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   42096:	2a09      	cmp	r2, #9
   42098:	d9ed      	bls.n	42076 <_strtoul_l.isra.0+0x86>
   4209a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   4209e:	2a19      	cmp	r2, #25
   420a0:	d9e7      	bls.n	42072 <_strtoul_l.isra.0+0x82>
   420a2:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   420a6:	2a19      	cmp	r2, #25
   420a8:	d803      	bhi.n	420b2 <_strtoul_l.isra.0+0xc2>
   420aa:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   420ae:	4590      	cmp	r8, r2
   420b0:	dce3      	bgt.n	4207a <_strtoul_l.isra.0+0x8a>
   420b2:	f1bc 0f00 	cmp.w	ip, #0
   420b6:	db0d      	blt.n	420d4 <_strtoul_l.isra.0+0xe4>
   420b8:	b103      	cbz	r3, 420bc <_strtoul_l.isra.0+0xcc>
   420ba:	4240      	negs	r0, r0
   420bc:	b11e      	cbz	r6, 420c6 <_strtoul_l.isra.0+0xd6>
   420be:	f1bc 0f00 	cmp.w	ip, #0
   420c2:	d10d      	bne.n	420e0 <_strtoul_l.isra.0+0xf0>
   420c4:	6035      	str	r5, [r6, #0]
   420c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   420ca:	fb0a 2000 	mla	r0, sl, r0, r2
   420ce:	f04f 0c01 	mov.w	ip, #1
   420d2:	e7dc      	b.n	4208e <_strtoul_l.isra.0+0x9e>
   420d4:	2322      	movs	r3, #34	; 0x22
   420d6:	f04f 30ff 	mov.w	r0, #4294967295
   420da:	603b      	str	r3, [r7, #0]
   420dc:	2e00      	cmp	r6, #0
   420de:	d0f2      	beq.n	420c6 <_strtoul_l.isra.0+0xd6>
   420e0:	1e65      	subs	r5, r4, #1
   420e2:	e7ef      	b.n	420c4 <_strtoul_l.isra.0+0xd4>
   420e4:	f10a 0402 	add.w	r4, sl, #2
   420e8:	f89a 1001 	ldrb.w	r1, [sl, #1]
   420ec:	2301      	movs	r3, #1
   420ee:	e79b      	b.n	42028 <_strtoul_l.isra.0+0x38>
   420f0:	7822      	ldrb	r2, [r4, #0]
   420f2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   420f6:	2a58      	cmp	r2, #88	; 0x58
   420f8:	d109      	bne.n	4210e <_strtoul_l.isra.0+0x11e>
   420fa:	f04f 0810 	mov.w	r8, #16
   420fe:	7861      	ldrb	r1, [r4, #1]
   42100:	f04f 090f 	mov.w	r9, #15
   42104:	3402      	adds	r4, #2
   42106:	46c2      	mov	sl, r8
   42108:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
   4210c:	e7ad      	b.n	4206a <_strtoul_l.isra.0+0x7a>
   4210e:	f1b8 0f00 	cmp.w	r8, #0
   42112:	d1a1      	bne.n	42058 <_strtoul_l.isra.0+0x68>
   42114:	f04f 0808 	mov.w	r8, #8
   42118:	f04f 0907 	mov.w	r9, #7
   4211c:	f06f 4e60 	mvn.w	lr, #3758096384	; 0xe0000000
   42120:	46c2      	mov	sl, r8
   42122:	e7a2      	b.n	4206a <_strtoul_l.isra.0+0x7a>
   42124:	19999999 	.word	0x19999999

00042128 <_strtoul_r>:
   42128:	b530      	push	{r4, r5, lr}
   4212a:	4c06      	ldr	r4, [pc, #24]	; (42144 <_strtoul_r+0x1c>)
   4212c:	b083      	sub	sp, #12
   4212e:	4d06      	ldr	r5, [pc, #24]	; (42148 <_strtoul_r+0x20>)
   42130:	6824      	ldr	r4, [r4, #0]
   42132:	6b64      	ldr	r4, [r4, #52]	; 0x34
   42134:	2c00      	cmp	r4, #0
   42136:	bf08      	it	eq
   42138:	462c      	moveq	r4, r5
   4213a:	9400      	str	r4, [sp, #0]
   4213c:	f7ff ff58 	bl	41ff0 <_strtoul_l.isra.0>
   42140:	b003      	add	sp, #12
   42142:	bd30      	pop	{r4, r5, pc}
   42144:	20031bb8 	.word	0x20031bb8
   42148:	20031bbc 	.word	0x20031bbc

0004214c <strtoul>:
   4214c:	b570      	push	{r4, r5, r6, lr}
   4214e:	4c08      	ldr	r4, [pc, #32]	; (42170 <strtoul+0x24>)
   42150:	b082      	sub	sp, #8
   42152:	4e08      	ldr	r6, [pc, #32]	; (42174 <strtoul+0x28>)
   42154:	4613      	mov	r3, r2
   42156:	6825      	ldr	r5, [r4, #0]
   42158:	460a      	mov	r2, r1
   4215a:	4601      	mov	r1, r0
   4215c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   4215e:	4628      	mov	r0, r5
   42160:	2c00      	cmp	r4, #0
   42162:	bf08      	it	eq
   42164:	4634      	moveq	r4, r6
   42166:	9400      	str	r4, [sp, #0]
   42168:	f7ff ff42 	bl	41ff0 <_strtoul_l.isra.0>
   4216c:	b002      	add	sp, #8
   4216e:	bd70      	pop	{r4, r5, r6, pc}
   42170:	20031bb8 	.word	0x20031bb8
   42174:	20031bbc 	.word	0x20031bbc

00042178 <__ssvfscanf_r>:
   42178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4217c:	ed2d 8b02 	vpush	{d8}
   42180:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   42184:	468b      	mov	fp, r1
   42186:	af02      	add	r7, sp, #8
   42188:	633b      	str	r3, [r7, #48]	; 0x30
   4218a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   4218e:	0499      	lsls	r1, r3, #18
   42190:	e9c7 200e 	strd	r2, r0, [r7, #56]	; 0x38
   42194:	d409      	bmi.n	421aa <__ssvfscanf_r+0x32>
   42196:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
   4219a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   4219e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   421a2:	f8ab 300c 	strh.w	r3, [fp, #12]
   421a6:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
   421aa:	2300      	movs	r3, #0
   421ac:	469a      	mov	sl, r3
   421ae:	61fb      	str	r3, [r7, #28]
   421b0:	637b      	str	r3, [r7, #52]	; 0x34
   421b2:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
   421b6:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
   421ba:	f818 3b01 	ldrb.w	r3, [r8], #1
   421be:	647b      	str	r3, [r7, #68]	; 0x44
   421c0:	2b00      	cmp	r3, #0
   421c2:	f000 8082 	beq.w	422ca <__ssvfscanf_r+0x152>
   421c6:	f7fe fbcf 	bl	40968 <__locale_ctype_ptr>
   421ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   421cc:	4418      	add	r0, r3
   421ce:	7846      	ldrb	r6, [r0, #1]
   421d0:	f016 0608 	ands.w	r6, r6, #8
   421d4:	f040 808b 	bne.w	422ee <__ssvfscanf_r+0x176>
   421d8:	2b25      	cmp	r3, #37	; 0x25
   421da:	f040 80ab 	bne.w	42334 <__ssvfscanf_r+0x1bc>
   421de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   421e0:	4635      	mov	r5, r6
   421e2:	4634      	mov	r4, r6
   421e4:	785a      	ldrb	r2, [r3, #1]
   421e6:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   421ea:	f108 0101 	add.w	r1, r8, #1
   421ee:	2b55      	cmp	r3, #85	; 0x55
   421f0:	d86b      	bhi.n	422ca <__ssvfscanf_r+0x152>
   421f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   421f6:	009e      	.short	0x009e
   421f8:	006a006a 	.word	0x006a006a
   421fc:	006a006a 	.word	0x006a006a
   42200:	006a0444 	.word	0x006a0444
   42204:	006a006a 	.word	0x006a006a
   42208:	006a006a 	.word	0x006a006a
   4220c:	04360436 	.word	0x04360436
   42210:	04360436 	.word	0x04360436
   42214:	04360436 	.word	0x04360436
   42218:	04360436 	.word	0x04360436
   4221c:	04360436 	.word	0x04360436
   42220:	006a006a 	.word	0x006a006a
   42224:	006a006a 	.word	0x006a006a
   42228:	006a006a 	.word	0x006a006a
   4222c:	0432006a 	.word	0x0432006a
   42230:	042e006a 	.word	0x042e006a
   42234:	04320486 	.word	0x04320486
   42238:	04320432 	.word	0x04320432
   4223c:	006a006a 	.word	0x006a006a
   42240:	006a006a 	.word	0x006a006a
   42244:	006a00b6 	.word	0x006a00b6
   42248:	047c006a 	.word	0x047c006a
   4224c:	006a006a 	.word	0x006a006a
   42250:	0476006a 	.word	0x0476006a
   42254:	006a006a 	.word	0x006a006a
   42258:	006a006a 	.word	0x006a006a
   4225c:	006a046c 	.word	0x006a046c
   42260:	0462006a 	.word	0x0462006a
   42264:	006a006a 	.word	0x006a006a
   42268:	006a006a 	.word	0x006a006a
   4226c:	0432006a 	.word	0x0432006a
   42270:	041c006a 	.word	0x041c006a
   42274:	043200c4 	.word	0x043200c4
   42278:	04320432 	.word	0x04320432
   4227c:	044d0455 	.word	0x044d0455
   42280:	006a00b6 	.word	0x006a00b6
   42284:	04ab04ba 	.word	0x04ab04ba
   42288:	049a049c 	.word	0x049a049c
   4228c:	006a0496 	.word	0x006a0496
   42290:	0492006a 	.word	0x0492006a
   42294:	048a00be 	.word	0x048a00be
   42298:	006a006a 	.word	0x006a006a
   4229c:	006a046c 	.word	0x006a046c
   422a0:	00be      	.short	0x00be
   422a2:	4659      	mov	r1, fp
   422a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   422a6:	f004 fcb9 	bl	46c1c <__ssrefill_r>
   422aa:	2800      	cmp	r0, #0
   422ac:	f001 812a 	beq.w	43504 <__ssvfscanf_r+0x138c>
   422b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   422b2:	2b00      	cmp	r3, #0
   422b4:	f001 8050 	beq.w	43358 <__ssvfscanf_r+0x11e0>
   422b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   422ba:	2b00      	cmp	r3, #0
   422bc:	f001 81d7 	beq.w	4366e <__ssvfscanf_r+0x14f6>
   422c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   422c4:	065b      	lsls	r3, r3, #25
   422c6:	f101 816d 	bmi.w	435a4 <__ssvfscanf_r+0x142c>
   422ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   422cc:	b13b      	cbz	r3, 422de <__ssvfscanf_r+0x166>
   422ce:	f8d3 8000 	ldr.w	r8, [r3]
   422d2:	f1b8 0f00 	cmp.w	r8, #0
   422d6:	d002      	beq.n	422de <__ssvfscanf_r+0x166>
   422d8:	4640      	mov	r0, r8
   422da:	f7fe fb5b 	bl	40994 <free>
   422de:	6b78      	ldr	r0, [r7, #52]	; 0x34
   422e0:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   422e4:	46bd      	mov	sp, r7
   422e6:	ecbd 8b02 	vpop	{d8}
   422ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   422ee:	f8db 2004 	ldr.w	r2, [fp, #4]
   422f2:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   422f4:	e012      	b.n	4231c <__ssvfscanf_r+0x1a4>
   422f6:	f7fe fb37 	bl	40968 <__locale_ctype_ptr>
   422fa:	f8db 3000 	ldr.w	r3, [fp]
   422fe:	781a      	ldrb	r2, [r3, #0]
   42300:	3301      	adds	r3, #1
   42302:	4410      	add	r0, r2
   42304:	7842      	ldrb	r2, [r0, #1]
   42306:	0712      	lsls	r2, r2, #28
   42308:	d510      	bpl.n	4232c <__ssvfscanf_r+0x1b4>
   4230a:	f8db 2004 	ldr.w	r2, [fp, #4]
   4230e:	f10a 0a01 	add.w	sl, sl, #1
   42312:	f8cb 3000 	str.w	r3, [fp]
   42316:	3a01      	subs	r2, #1
   42318:	f8cb 2004 	str.w	r2, [fp, #4]
   4231c:	2a00      	cmp	r2, #0
   4231e:	dcea      	bgt.n	422f6 <__ssvfscanf_r+0x17e>
   42320:	4659      	mov	r1, fp
   42322:	4620      	mov	r0, r4
   42324:	f004 fc7a 	bl	46c1c <__ssrefill_r>
   42328:	2800      	cmp	r0, #0
   4232a:	d0e4      	beq.n	422f6 <__ssvfscanf_r+0x17e>
   4232c:	f8c7 8038 	str.w	r8, [r7, #56]	; 0x38
   42330:	e741      	b.n	421b6 <__ssvfscanf_r+0x3e>
   42332:	4688      	mov	r8, r1
   42334:	f8db 3004 	ldr.w	r3, [fp, #4]
   42338:	2b00      	cmp	r3, #0
   4233a:	f340 8726 	ble.w	4318a <__ssvfscanf_r+0x1012>
   4233e:	f8db 3000 	ldr.w	r3, [fp]
   42342:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   42346:	7819      	ldrb	r1, [r3, #0]
   42348:	4291      	cmp	r1, r2
   4234a:	d1be      	bne.n	422ca <__ssvfscanf_r+0x152>
   4234c:	f8db 2004 	ldr.w	r2, [fp, #4]
   42350:	3301      	adds	r3, #1
   42352:	f10a 0a01 	add.w	sl, sl, #1
   42356:	f8c7 8038 	str.w	r8, [r7, #56]	; 0x38
   4235a:	3a01      	subs	r2, #1
   4235c:	e9cb 3200 	strd	r3, r2, [fp]
   42360:	e729      	b.n	421b6 <__ssvfscanf_r+0x3e>
   42362:	072a      	lsls	r2, r5, #28
   42364:	d1b1      	bne.n	422ca <__ssvfscanf_r+0x152>
   42366:	f898 2001 	ldrb.w	r2, [r8, #1]
   4236a:	f045 0502 	orr.w	r5, r5, #2
   4236e:	4688      	mov	r8, r1
   42370:	e739      	b.n	421e6 <__ssvfscanf_r+0x6e>
   42372:	072b      	lsls	r3, r5, #28
   42374:	d1a9      	bne.n	422ca <__ssvfscanf_r+0x152>
   42376:	f898 2001 	ldrb.w	r2, [r8, #1]
   4237a:	4688      	mov	r8, r1
   4237c:	e733      	b.n	421e6 <__ssvfscanf_r+0x6e>
   4237e:	63b9      	str	r1, [r7, #56]	; 0x38
   42380:	4b9f      	ldr	r3, [pc, #636]	; (42600 <__ssvfscanf_r+0x488>)
   42382:	f04f 0803 	mov.w	r8, #3
   42386:	61fb      	str	r3, [r7, #28]
   42388:	230a      	movs	r3, #10
   4238a:	62bb      	str	r3, [r7, #40]	; 0x28
   4238c:	f8db 3004 	ldr.w	r3, [fp, #4]
   42390:	2b00      	cmp	r3, #0
   42392:	f340 8356 	ble.w	42a42 <__ssvfscanf_r+0x8ca>
   42396:	0668      	lsls	r0, r5, #25
   42398:	d512      	bpl.n	423c0 <__ssvfscanf_r+0x248>
   4239a:	f108 38ff 	add.w	r8, r8, #4294967295
   4239e:	f1b8 0f03 	cmp.w	r8, #3
   423a2:	f200 8219 	bhi.w	427d8 <__ssvfscanf_r+0x660>
   423a6:	e8df f018 	tbh	[pc, r8, lsl #1]
   423aa:	012d      	.short	0x012d
   423ac:	0021008f 	.word	0x0021008f
   423b0:	03f5      	.short	0x03f5
   423b2:	4659      	mov	r1, fp
   423b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   423b6:	f004 fc31 	bl	46c1c <__ssrefill_r>
   423ba:	2800      	cmp	r0, #0
   423bc:	f47f af7c 	bne.w	422b8 <__ssvfscanf_r+0x140>
   423c0:	f7fe fad2 	bl	40968 <__locale_ctype_ptr>
   423c4:	f8db 3000 	ldr.w	r3, [fp]
   423c8:	781a      	ldrb	r2, [r3, #0]
   423ca:	3301      	adds	r3, #1
   423cc:	4410      	add	r0, r2
   423ce:	7842      	ldrb	r2, [r0, #1]
   423d0:	0711      	lsls	r1, r2, #28
   423d2:	d5e2      	bpl.n	4239a <__ssvfscanf_r+0x222>
   423d4:	f8db 2004 	ldr.w	r2, [fp, #4]
   423d8:	f10a 0a01 	add.w	sl, sl, #1
   423dc:	3a01      	subs	r2, #1
   423de:	2a00      	cmp	r2, #0
   423e0:	f8cb 2004 	str.w	r2, [fp, #4]
   423e4:	dde5      	ble.n	423b2 <__ssvfscanf_r+0x23a>
   423e6:	f8cb 3000 	str.w	r3, [fp]
   423ea:	e7e9      	b.n	423c0 <__ssvfscanf_r+0x248>
   423ec:	1e63      	subs	r3, r4, #1
   423ee:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   423f2:	f240 86c6 	bls.w	43182 <__ssvfscanf_r+0x100a>
   423f6:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   423fa:	eb04 0902 	add.w	r9, r4, r2
   423fe:	f240 145d 	movw	r4, #349	; 0x15d
   42402:	f507 76ac 	add.w	r6, r7, #344	; 0x158
   42406:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
   4240a:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   4240e:	f04f 0800 	mov.w	r8, #0
   42412:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
   42416:	623e      	str	r6, [r7, #32]
   42418:	f8db 1000 	ldr.w	r1, [fp]
   4241c:	7808      	ldrb	r0, [r1, #0]
   4241e:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   42422:	2b4d      	cmp	r3, #77	; 0x4d
   42424:	f200 82b5 	bhi.w	42992 <__ssvfscanf_r+0x81a>
   42428:	e8df f013 	tbh	[pc, r3, lsl #1]
   4242c:	02b302fc 	.word	0x02b302fc
   42430:	02b302fc 	.word	0x02b302fc
   42434:	02da02b3 	.word	0x02da02b3
   42438:	02f202f2 	.word	0x02f202f2
   4243c:	02f202f2 	.word	0x02f202f2
   42440:	02f202f2 	.word	0x02f202f2
   42444:	02e902f2 	.word	0x02e902f2
   42448:	02b302e9 	.word	0x02b302e9
   4244c:	02b302b3 	.word	0x02b302b3
   42450:	02b302b3 	.word	0x02b302b3
   42454:	02b302b3 	.word	0x02b302b3
   42458:	02f802f8 	.word	0x02f802f8
   4245c:	02f802f8 	.word	0x02f802f8
   42460:	02f802f8 	.word	0x02f802f8
   42464:	02b302b3 	.word	0x02b302b3
   42468:	02b302b3 	.word	0x02b302b3
   4246c:	02b302b3 	.word	0x02b302b3
   42470:	02b302b3 	.word	0x02b302b3
   42474:	02b302b3 	.word	0x02b302b3
   42478:	02b302b3 	.word	0x02b302b3
   4247c:	02b302b3 	.word	0x02b302b3
   42480:	02b302b3 	.word	0x02b302b3
   42484:	029802b3 	.word	0x029802b3
   42488:	02b302b3 	.word	0x02b302b3
   4248c:	02b302b3 	.word	0x02b302b3
   42490:	02b302b3 	.word	0x02b302b3
   42494:	02b302b3 	.word	0x02b302b3
   42498:	02f802f8 	.word	0x02f802f8
   4249c:	02f802f8 	.word	0x02f802f8
   424a0:	02f802f8 	.word	0x02f802f8
   424a4:	02b302b3 	.word	0x02b302b3
   424a8:	02b302b3 	.word	0x02b302b3
   424ac:	02b302b3 	.word	0x02b302b3
   424b0:	02b302b3 	.word	0x02b302b3
   424b4:	02b302b3 	.word	0x02b302b3
   424b8:	02b302b3 	.word	0x02b302b3
   424bc:	02b302b3 	.word	0x02b302b3
   424c0:	02b302b3 	.word	0x02b302b3
   424c4:	029802b3 	.word	0x029802b3
   424c8:	2c00      	cmp	r4, #0
   424ca:	f005 0610 	and.w	r6, r5, #16
   424ce:	bf08      	it	eq
   424d0:	f04f 34ff 	moveq.w	r4, #4294967295
   424d4:	f015 0801 	ands.w	r8, r5, #1
   424d8:	f000 84d5 	beq.w	42e86 <__ssvfscanf_r+0xd0e>
   424dc:	2e00      	cmp	r6, #0
   424de:	f040 869a 	bne.w	43216 <__ssvfscanf_r+0x109e>
   424e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   424e4:	062a      	lsls	r2, r5, #24
   424e6:	f853 8b04 	ldr.w	r8, [r3], #4
   424ea:	633b      	str	r3, [r7, #48]	; 0x30
   424ec:	f140 87ee 	bpl.w	434cc <__ssvfscanf_r+0x1354>
   424f0:	f1b8 0f00 	cmp.w	r8, #0
   424f4:	f001 80d4 	beq.w	436a0 <__ssvfscanf_r+0x1528>
   424f8:	2080      	movs	r0, #128	; 0x80
   424fa:	f7fe fa43 	bl	40984 <malloc>
   424fe:	4681      	mov	r9, r0
   42500:	2800      	cmp	r0, #0
   42502:	f001 8097 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   42506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   42508:	f8c8 0000 	str.w	r0, [r8]
   4250c:	88d5      	ldrh	r5, [r2, #6]
   4250e:	8893      	ldrh	r3, [r2, #4]
   42510:	429d      	cmp	r5, r3
   42512:	f081 8005 	bcs.w	43520 <__ssvfscanf_r+0x13a8>
   42516:	6810      	ldr	r0, [r2, #0]
   42518:	2220      	movs	r2, #32
   4251a:	1c6b      	adds	r3, r5, #1
   4251c:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
   42520:	f8c7 8020 	str.w	r8, [r7, #32]
   42524:	46c8      	mov	r8, r9
   42526:	61ba      	str	r2, [r7, #24]
   42528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   4252a:	80d3      	strh	r3, [r2, #6]
   4252c:	2500      	movs	r5, #0
   4252e:	f7fe fa1b 	bl	40968 <__locale_ctype_ptr>
   42532:	f8db 3000 	ldr.w	r3, [fp]
   42536:	781b      	ldrb	r3, [r3, #0]
   42538:	4418      	add	r0, r3
   4253a:	7843      	ldrb	r3, [r0, #1]
   4253c:	071b      	lsls	r3, r3, #28
   4253e:	f100 870b 	bmi.w	43358 <__ssvfscanf_r+0x11e0>
   42542:	2c00      	cmp	r4, #0
   42544:	f000 8708 	beq.w	43358 <__ssvfscanf_r+0x11e0>
   42548:	f7fe f9fc 	bl	40944 <__locale_mb_cur_max>
   4254c:	42a8      	cmp	r0, r5
   4254e:	f43f aeb3 	beq.w	422b8 <__ssvfscanf_r+0x140>
   42552:	1c6b      	adds	r3, r5, #1
   42554:	f8db 2000 	ldr.w	r2, [fp]
   42558:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   4255c:	62fb      	str	r3, [r7, #44]	; 0x2c
   4255e:	f8db 3004 	ldr.w	r3, [fp, #4]
   42562:	f812 1b01 	ldrb.w	r1, [r2], #1
   42566:	3b01      	subs	r3, #1
   42568:	5541      	strb	r1, [r0, r5]
   4256a:	f107 0550 	add.w	r5, r7, #80	; 0x50
   4256e:	e9cb 2300 	strd	r2, r3, [fp]
   42572:	687b      	ldr	r3, [r7, #4]
   42574:	2b03      	cmp	r3, #3
   42576:	d102      	bne.n	4257e <__ssvfscanf_r+0x406>
   42578:	682b      	ldr	r3, [r5, #0]
   4257a:	2b04      	cmp	r3, #4
   4257c:	d004      	beq.n	42588 <__ssvfscanf_r+0x410>
   4257e:	2208      	movs	r2, #8
   42580:	2100      	movs	r1, #0
   42582:	4628      	mov	r0, r5
   42584:	f7fe fd58 	bl	41038 <memset>
   42588:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   4258c:	9500      	str	r5, [sp, #0]
   4258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42590:	4641      	mov	r1, r8
   42592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42594:	f003 fad4 	bl	45b40 <_mbrtowc_r>
   42598:	1c42      	adds	r2, r0, #1
   4259a:	6078      	str	r0, [r7, #4]
   4259c:	f43f ae8c 	beq.w	422b8 <__ssvfscanf_r+0x140>
   425a0:	2800      	cmp	r0, #0
   425a2:	f040 87a6 	bne.w	434f2 <__ssvfscanf_r+0x137a>
   425a6:	f8c8 0000 	str.w	r0, [r8]
   425aa:	f003 fa15 	bl	459d8 <iswspace>
   425ae:	2800      	cmp	r0, #0
   425b0:	f040 86bd 	bne.w	4332e <__ssvfscanf_r+0x11b6>
   425b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   425b6:	449a      	add	sl, r3
   425b8:	3c01      	subs	r4, #1
   425ba:	2e00      	cmp	r6, #0
   425bc:	f041 8015 	bne.w	435ea <__ssvfscanf_r+0x1472>
   425c0:	f108 0804 	add.w	r8, r8, #4
   425c4:	69bb      	ldr	r3, [r7, #24]
   425c6:	eba8 0509 	sub.w	r5, r8, r9
   425ca:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   425ce:	f201 800c 	bhi.w	435ea <__ssvfscanf_r+0x1472>
   425d2:	6a3a      	ldr	r2, [r7, #32]
   425d4:	2a00      	cmp	r2, #0
   425d6:	f001 8008 	beq.w	435ea <__ssvfscanf_r+0x1472>
   425da:	4648      	mov	r0, r9
   425dc:	00d9      	lsls	r1, r3, #3
   425de:	f7fe fd81 	bl	410e4 <realloc>
   425e2:	4681      	mov	r9, r0
   425e4:	2800      	cmp	r0, #0
   425e6:	f001 8025 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   425ea:	69bb      	ldr	r3, [r7, #24]
   425ec:	eb00 0805 	add.w	r8, r0, r5
   425f0:	6a3a      	ldr	r2, [r7, #32]
   425f2:	005b      	lsls	r3, r3, #1
   425f4:	62fe      	str	r6, [r7, #44]	; 0x2c
   425f6:	6010      	str	r0, [r2, #0]
   425f8:	61bb      	str	r3, [r7, #24]
   425fa:	f000 bf7e 	b.w	434fa <__ssvfscanf_r+0x1382>
   425fe:	bf00      	nop
   42600:	00041fa1 	.word	0x00041fa1
   42604:	2c00      	cmp	r4, #0
   42606:	f005 0310 	and.w	r3, r5, #16
   4260a:	bf08      	it	eq
   4260c:	f04f 34ff 	moveq.w	r4, #4294967295
   42610:	f015 0601 	ands.w	r6, r5, #1
   42614:	617b      	str	r3, [r7, #20]
   42616:	f000 8535 	beq.w	43084 <__ssvfscanf_r+0xf0c>
   4261a:	2b00      	cmp	r3, #0
   4261c:	f040 8604 	bne.w	43228 <__ssvfscanf_r+0x10b0>
   42620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   42622:	062d      	lsls	r5, r5, #24
   42624:	f853 8b04 	ldr.w	r8, [r3], #4
   42628:	633b      	str	r3, [r7, #48]	; 0x30
   4262a:	f140 8747 	bpl.w	434bc <__ssvfscanf_r+0x1344>
   4262e:	f1b8 0f00 	cmp.w	r8, #0
   42632:	f001 8035 	beq.w	436a0 <__ssvfscanf_r+0x1528>
   42636:	2080      	movs	r0, #128	; 0x80
   42638:	f7fe f9a4 	bl	40984 <malloc>
   4263c:	6138      	str	r0, [r7, #16]
   4263e:	2800      	cmp	r0, #0
   42640:	f000 87f8 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   42644:	6a79      	ldr	r1, [r7, #36]	; 0x24
   42646:	693a      	ldr	r2, [r7, #16]
   42648:	88cd      	ldrh	r5, [r1, #6]
   4264a:	888b      	ldrh	r3, [r1, #4]
   4264c:	f8c8 2000 	str.w	r2, [r8]
   42650:	429d      	cmp	r5, r3
   42652:	d310      	bcc.n	42676 <__ssvfscanf_r+0x4fe>
   42654:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   42658:	4293      	cmp	r3, r2
   4265a:	f201 802f 	bhi.w	436bc <__ssvfscanf_r+0x1544>
   4265e:	f103 0608 	add.w	r6, r3, #8
   42662:	6808      	ldr	r0, [r1, #0]
   42664:	00b1      	lsls	r1, r6, #2
   42666:	f7fe fd3d 	bl	410e4 <realloc>
   4266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4266c:	2800      	cmp	r0, #0
   4266e:	f000 87e3 	beq.w	43638 <__ssvfscanf_r+0x14c0>
   42672:	6018      	str	r0, [r3, #0]
   42674:	809e      	strh	r6, [r3, #4]
   42676:	6a79      	ldr	r1, [r7, #36]	; 0x24
   42678:	1c6b      	adds	r3, r5, #1
   4267a:	f8c7 8008 	str.w	r8, [r7, #8]
   4267e:	680a      	ldr	r2, [r1, #0]
   42680:	80cb      	strh	r3, [r1, #6]
   42682:	2320      	movs	r3, #32
   42684:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
   42688:	f8d7 8010 	ldr.w	r8, [r7, #16]
   4268c:	60fb      	str	r3, [r7, #12]
   4268e:	2500      	movs	r5, #0
   42690:	f8c7 a020 	str.w	sl, [r7, #32]
   42694:	62fc      	str	r4, [r7, #44]	; 0x2c
   42696:	687e      	ldr	r6, [r7, #4]
   42698:	e05a      	b.n	42750 <__ssvfscanf_r+0x5d8>
   4269a:	46b2      	mov	sl, r6
   4269c:	f8c8 6000 	str.w	r6, [r8]
   426a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   426a4:	2208      	movs	r2, #8
   426a6:	2100      	movs	r1, #0
   426a8:	4caa      	ldr	r4, [pc, #680]	; (42954 <__ssvfscanf_r+0x7dc>)
   426aa:	4618      	mov	r0, r3
   426ac:	61bb      	str	r3, [r7, #24]
   426ae:	f7fe fcc3 	bl	41038 <memset>
   426b2:	4ba9      	ldr	r3, [pc, #676]	; (42958 <__ssvfscanf_r+0x7e0>)
   426b4:	4652      	mov	r2, sl
   426b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   426b8:	6819      	ldr	r1, [r3, #0]
   426ba:	69bb      	ldr	r3, [r7, #24]
   426bc:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
   426c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
   426c4:	f1bc 0f00 	cmp.w	ip, #0
   426c8:	bf08      	it	eq
   426ca:	46a4      	moveq	ip, r4
   426cc:	f8dc a0e0 	ldr.w	sl, [ip, #224]	; 0xe0
   426d0:	47d0      	blx	sl
   426d2:	2801      	cmp	r0, #1
   426d4:	bf0c      	ite	eq
   426d6:	f897 a040 	ldrbeq.w	sl, [r7, #64]	; 0x40
   426da:	f04f 0a00 	movne.w	sl, #0
   426de:	f107 0358 	add.w	r3, r7, #88	; 0x58
   426e2:	f813 300a 	ldrb.w	r3, [r3, sl]
   426e6:	2b00      	cmp	r3, #0
   426e8:	f000 8782 	beq.w	435f0 <__ssvfscanf_r+0x1478>
   426ec:	6a3b      	ldr	r3, [r7, #32]
   426ee:	2e03      	cmp	r6, #3
   426f0:	444b      	add	r3, r9
   426f2:	623b      	str	r3, [r7, #32]
   426f4:	f000 8609 	beq.w	4330a <__ssvfscanf_r+0x1192>
   426f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   426fa:	3b01      	subs	r3, #1
   426fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   426fe:	697b      	ldr	r3, [r7, #20]
   42700:	2b00      	cmp	r3, #0
   42702:	f040 85fc 	bne.w	432fe <__ssvfscanf_r+0x1186>
   42706:	f108 0804 	add.w	r8, r8, #4
   4270a:	6938      	ldr	r0, [r7, #16]
   4270c:	68fa      	ldr	r2, [r7, #12]
   4270e:	eba8 0500 	sub.w	r5, r8, r0
   42712:	4614      	mov	r4, r2
   42714:	ebb2 0fa5 	cmp.w	r2, r5, asr #2
   42718:	f200 85f1 	bhi.w	432fe <__ssvfscanf_r+0x1186>
   4271c:	68b9      	ldr	r1, [r7, #8]
   4271e:	2900      	cmp	r1, #0
   42720:	f000 85ed 	beq.w	432fe <__ssvfscanf_r+0x1186>
   42724:	00d1      	lsls	r1, r2, #3
   42726:	f7fe fcdd 	bl	410e4 <realloc>
   4272a:	6138      	str	r0, [r7, #16]
   4272c:	2800      	cmp	r0, #0
   4272e:	f000 8781 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   42732:	eb00 0805 	add.w	r8, r0, r5
   42736:	68b9      	ldr	r1, [r7, #8]
   42738:	0062      	lsls	r2, r4, #1
   4273a:	697d      	ldr	r5, [r7, #20]
   4273c:	6008      	str	r0, [r1, #0]
   4273e:	60fa      	str	r2, [r7, #12]
   42740:	f8db 3004 	ldr.w	r3, [fp, #4]
   42744:	2b00      	cmp	r3, #0
   42746:	dd3a      	ble.n	427be <__ssvfscanf_r+0x646>
   42748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4274a:	2b00      	cmp	r3, #0
   4274c:	f000 868a 	beq.w	43464 <__ssvfscanf_r+0x12ec>
   42750:	f7fe f8f8 	bl	40944 <__locale_mb_cur_max>
   42754:	42a8      	cmp	r0, r5
   42756:	f43f adaf 	beq.w	422b8 <__ssvfscanf_r+0x140>
   4275a:	f8db 2000 	ldr.w	r2, [fp]
   4275e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   42762:	f8db 3004 	ldr.w	r3, [fp, #4]
   42766:	2e03      	cmp	r6, #3
   42768:	f812 1b01 	ldrb.w	r1, [r2], #1
   4276c:	f105 0901 	add.w	r9, r5, #1
   42770:	f103 33ff 	add.w	r3, r3, #4294967295
   42774:	5541      	strb	r1, [r0, r5]
   42776:	f107 0548 	add.w	r5, r7, #72	; 0x48
   4277a:	e9cb 2300 	strd	r2, r3, [fp]
   4277e:	d102      	bne.n	42786 <__ssvfscanf_r+0x60e>
   42780:	682b      	ldr	r3, [r5, #0]
   42782:	2b04      	cmp	r3, #4
   42784:	d004      	beq.n	42790 <__ssvfscanf_r+0x618>
   42786:	2208      	movs	r2, #8
   42788:	2100      	movs	r1, #0
   4278a:	4628      	mov	r0, r5
   4278c:	f7fe fc54 	bl	41038 <memset>
   42790:	9500      	str	r5, [sp, #0]
   42792:	464b      	mov	r3, r9
   42794:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   42798:	4641      	mov	r1, r8
   4279a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   4279c:	f003 f9d0 	bl	45b40 <_mbrtowc_r>
   427a0:	4606      	mov	r6, r0
   427a2:	3001      	adds	r0, #1
   427a4:	f43f ad88 	beq.w	422b8 <__ssvfscanf_r+0x140>
   427a8:	2e00      	cmp	r6, #0
   427aa:	f43f af76 	beq.w	4269a <__ssvfscanf_r+0x522>
   427ae:	1cb1      	adds	r1, r6, #2
   427b0:	f040 87b2 	bne.w	43718 <__ssvfscanf_r+0x15a0>
   427b4:	f8db 3004 	ldr.w	r3, [fp, #4]
   427b8:	464d      	mov	r5, r9
   427ba:	2b00      	cmp	r3, #0
   427bc:	dcc4      	bgt.n	42748 <__ssvfscanf_r+0x5d0>
   427be:	4659      	mov	r1, fp
   427c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   427c2:	f004 fa2b 	bl	46c1c <__ssrefill_r>
   427c6:	2800      	cmp	r0, #0
   427c8:	d0be      	beq.n	42748 <__ssvfscanf_r+0x5d0>
   427ca:	f8d7 a020 	ldr.w	sl, [r7, #32]
   427ce:	607e      	str	r6, [r7, #4]
   427d0:	2d00      	cmp	r5, #0
   427d2:	f000 864a 	beq.w	4346a <__ssvfscanf_r+0x12f2>
   427d6:	e56f      	b.n	422b8 <__ssvfscanf_r+0x140>
   427d8:	2c00      	cmp	r4, #0
   427da:	f005 0210 	and.w	r2, r5, #16
   427de:	bf08      	it	eq
   427e0:	2401      	moveq	r4, #1
   427e2:	f015 0301 	ands.w	r3, r5, #1
   427e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   427e8:	f000 83f9 	beq.w	42fde <__ssvfscanf_r+0xe66>
   427ec:	2a00      	cmp	r2, #0
   427ee:	f040 84e9 	bne.w	431c4 <__ssvfscanf_r+0x104c>
   427f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   427f4:	062a      	lsls	r2, r5, #24
   427f6:	f853 8b04 	ldr.w	r8, [r3], #4
   427fa:	633b      	str	r3, [r7, #48]	; 0x30
   427fc:	f140 8658 	bpl.w	434b0 <__ssvfscanf_r+0x1338>
   42800:	f1b8 0f00 	cmp.w	r8, #0
   42804:	f000 874c 	beq.w	436a0 <__ssvfscanf_r+0x1528>
   42808:	2080      	movs	r0, #128	; 0x80
   4280a:	f7fe f8bb 	bl	40984 <malloc>
   4280e:	61b8      	str	r0, [r7, #24]
   42810:	2800      	cmp	r0, #0
   42812:	f000 870f 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   42816:	6a79      	ldr	r1, [r7, #36]	; 0x24
   42818:	69ba      	ldr	r2, [r7, #24]
   4281a:	88cd      	ldrh	r5, [r1, #6]
   4281c:	888b      	ldrh	r3, [r1, #4]
   4281e:	f8c8 2000 	str.w	r2, [r8]
   42822:	429d      	cmp	r5, r3
   42824:	d310      	bcc.n	42848 <__ssvfscanf_r+0x6d0>
   42826:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   4282a:	4293      	cmp	r3, r2
   4282c:	f200 8746 	bhi.w	436bc <__ssvfscanf_r+0x1544>
   42830:	f103 0608 	add.w	r6, r3, #8
   42834:	6808      	ldr	r0, [r1, #0]
   42836:	00b1      	lsls	r1, r6, #2
   42838:	f7fe fc54 	bl	410e4 <realloc>
   4283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4283e:	2800      	cmp	r0, #0
   42840:	f000 86fa 	beq.w	43638 <__ssvfscanf_r+0x14c0>
   42844:	6018      	str	r0, [r3, #0]
   42846:	809e      	strh	r6, [r3, #4]
   42848:	6a79      	ldr	r1, [r7, #36]	; 0x24
   4284a:	1c6b      	adds	r3, r5, #1
   4284c:	f8c7 8010 	str.w	r8, [r7, #16]
   42850:	680a      	ldr	r2, [r1, #0]
   42852:	80cb      	strh	r3, [r1, #6]
   42854:	2320      	movs	r3, #32
   42856:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
   4285a:	f8d7 8018 	ldr.w	r8, [r7, #24]
   4285e:	617b      	str	r3, [r7, #20]
   42860:	f8c7 a020 	str.w	sl, [r7, #32]
   42864:	2500      	movs	r5, #0
   42866:	f507 79ac 	add.w	r9, r7, #344	; 0x158
   4286a:	f8d7 a004 	ldr.w	sl, [r7, #4]
   4286e:	f7fe f869 	bl	40944 <__locale_mb_cur_max>
   42872:	42a8      	cmp	r0, r5
   42874:	f43f ad20 	beq.w	422b8 <__ssvfscanf_r+0x140>
   42878:	f8db 1000 	ldr.w	r1, [fp]
   4287c:	f1ba 0f03 	cmp.w	sl, #3
   42880:	f8db 2004 	ldr.w	r2, [fp, #4]
   42884:	f105 0601 	add.w	r6, r5, #1
   42888:	f811 0b01 	ldrb.w	r0, [r1], #1
   4288c:	f102 32ff 	add.w	r2, r2, #4294967295
   42890:	f809 0005 	strb.w	r0, [r9, r5]
   42894:	f107 0550 	add.w	r5, r7, #80	; 0x50
   42898:	e9cb 1200 	strd	r1, r2, [fp]
   4289c:	d102      	bne.n	428a4 <__ssvfscanf_r+0x72c>
   4289e:	682b      	ldr	r3, [r5, #0]
   428a0:	2b04      	cmp	r3, #4
   428a2:	d004      	beq.n	428ae <__ssvfscanf_r+0x736>
   428a4:	2208      	movs	r2, #8
   428a6:	2100      	movs	r1, #0
   428a8:	4628      	mov	r0, r5
   428aa:	f7fe fbc5 	bl	41038 <memset>
   428ae:	9500      	str	r5, [sp, #0]
   428b0:	4633      	mov	r3, r6
   428b2:	464a      	mov	r2, r9
   428b4:	4641      	mov	r1, r8
   428b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   428b8:	f003 f942 	bl	45b40 <_mbrtowc_r>
   428bc:	f1b0 3fff 	cmp.w	r0, #4294967295
   428c0:	4682      	mov	sl, r0
   428c2:	f43f acf9 	beq.w	422b8 <__ssvfscanf_r+0x140>
   428c6:	2800      	cmp	r0, #0
   428c8:	f040 8513 	bne.w	432f2 <__ssvfscanf_r+0x117a>
   428cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   428ce:	b90b      	cbnz	r3, 428d4 <__ssvfscanf_r+0x75c>
   428d0:	f8c8 3000 	str.w	r3, [r8]
   428d4:	6a3b      	ldr	r3, [r7, #32]
   428d6:	4433      	add	r3, r6
   428d8:	623b      	str	r3, [r7, #32]
   428da:	3c01      	subs	r4, #1
   428dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   428de:	2b00      	cmp	r3, #0
   428e0:	f040 8510 	bne.w	43304 <__ssvfscanf_r+0x118c>
   428e4:	69b8      	ldr	r0, [r7, #24]
   428e6:	697b      	ldr	r3, [r7, #20]
   428e8:	eba8 0500 	sub.w	r5, r8, r0
   428ec:	461e      	mov	r6, r3
   428ee:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   428f2:	d80e      	bhi.n	42912 <__ssvfscanf_r+0x79a>
   428f4:	693a      	ldr	r2, [r7, #16]
   428f6:	b162      	cbz	r2, 42912 <__ssvfscanf_r+0x79a>
   428f8:	00d9      	lsls	r1, r3, #3
   428fa:	f7fe fbf3 	bl	410e4 <realloc>
   428fe:	61b8      	str	r0, [r7, #24]
   42900:	2800      	cmp	r0, #0
   42902:	f000 8697 	beq.w	43634 <__ssvfscanf_r+0x14bc>
   42906:	0071      	lsls	r1, r6, #1
   42908:	693a      	ldr	r2, [r7, #16]
   4290a:	eb00 0805 	add.w	r8, r0, r5
   4290e:	6179      	str	r1, [r7, #20]
   42910:	6010      	str	r0, [r2, #0]
   42912:	f108 0804 	add.w	r8, r8, #4
   42916:	2500      	movs	r5, #0
   42918:	f8db 2004 	ldr.w	r2, [fp, #4]
   4291c:	2a00      	cmp	r2, #0
   4291e:	f340 843d 	ble.w	4319c <__ssvfscanf_r+0x1024>
   42922:	2c00      	cmp	r4, #0
   42924:	d1a3      	bne.n	4286e <__ssvfscanf_r+0x6f6>
   42926:	f8c7 a004 	str.w	sl, [r7, #4]
   4292a:	f8d7 a020 	ldr.w	sl, [r7, #32]
   4292e:	69bb      	ldr	r3, [r7, #24]
   42930:	eba8 0103 	sub.w	r1, r8, r3
   42934:	697b      	ldr	r3, [r7, #20]
   42936:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
   4293a:	d903      	bls.n	42944 <__ssvfscanf_r+0x7cc>
   4293c:	693c      	ldr	r4, [r7, #16]
   4293e:	2c00      	cmp	r4, #0
   42940:	f040 860b 	bne.w	4355a <__ssvfscanf_r+0x13e2>
   42944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42946:	2b00      	cmp	r3, #0
   42948:	f47f ac35 	bne.w	421b6 <__ssvfscanf_r+0x3e>
   4294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   4294e:	3301      	adds	r3, #1
   42950:	637b      	str	r3, [r7, #52]	; 0x34
   42952:	e430      	b.n	421b6 <__ssvfscanf_r+0x3e>
   42954:	20031bbc 	.word	0x20031bbc
   42958:	20031bb8 	.word	0x20031bb8
   4295c:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
   42960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   42964:	d115      	bne.n	42992 <__ssvfscanf_r+0x81a>
   42966:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   4296a:	f04f 0910 	mov.w	r9, #16
   4296e:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   42972:	7030      	strb	r0, [r6, #0]
   42974:	3601      	adds	r6, #1
   42976:	f8db 3004 	ldr.w	r3, [fp, #4]
   4297a:	3b01      	subs	r3, #1
   4297c:	2b00      	cmp	r3, #0
   4297e:	f8cb 3004 	str.w	r3, [fp, #4]
   42982:	f340 80ff 	ble.w	42b84 <__ssvfscanf_r+0xa0c>
   42986:	3101      	adds	r1, #1
   42988:	f8cb 1000 	str.w	r1, [fp]
   4298c:	3c01      	subs	r4, #1
   4298e:	f47f ad43 	bne.w	42418 <__ssvfscanf_r+0x2a0>
   42992:	05e8      	lsls	r0, r5, #23
   42994:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
   42998:	d507      	bpl.n	429aa <__ssvfscanf_r+0x832>
   4299a:	6a3b      	ldr	r3, [r7, #32]
   4299c:	429e      	cmp	r6, r3
   4299e:	f200 846b 	bhi.w	43278 <__ssvfscanf_r+0x1100>
   429a2:	6a3b      	ldr	r3, [r7, #32]
   429a4:	429e      	cmp	r6, r3
   429a6:	f43f ac90 	beq.w	422ca <__ssvfscanf_r+0x152>
   429aa:	f015 0410 	ands.w	r4, r5, #16
   429ae:	f040 8264 	bne.w	42e7a <__ssvfscanf_r+0xd02>
   429b2:	4622      	mov	r2, r4
   429b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   429b6:	6a39      	ldr	r1, [r7, #32]
   429b8:	7034      	strb	r4, [r6, #0]
   429ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   429bc:	69fc      	ldr	r4, [r7, #28]
   429be:	47a0      	blx	r4
   429c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   429c2:	06a9      	lsls	r1, r5, #26
   429c4:	f103 0404 	add.w	r4, r3, #4
   429c8:	f100 8251 	bmi.w	42e6e <__ssvfscanf_r+0xcf6>
   429cc:	072a      	lsls	r2, r5, #28
   429ce:	f100 83f5 	bmi.w	431bc <__ssvfscanf_r+0x1044>
   429d2:	076b      	lsls	r3, r5, #29
   429d4:	f140 8246 	bpl.w	42e64 <__ssvfscanf_r+0xcec>
   429d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   429da:	681b      	ldr	r3, [r3, #0]
   429dc:	8018      	strh	r0, [r3, #0]
   429de:	e248      	b.n	42e72 <__ssvfscanf_r+0xcfa>
   429e0:	052b      	lsls	r3, r5, #20
   429e2:	d5c6      	bpl.n	42972 <__ssvfscanf_r+0x7fa>
   429e4:	f1b9 0f00 	cmp.w	r9, #0
   429e8:	d103      	bne.n	429f2 <__ssvfscanf_r+0x87a>
   429ea:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   429ee:	f04f 0908 	mov.w	r9, #8
   429f2:	056a      	lsls	r2, r5, #21
   429f4:	f140 8513 	bpl.w	4341e <__ssvfscanf_r+0x12a6>
   429f8:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   429fc:	e7b9      	b.n	42972 <__ssvfscanf_r+0x7fa>
   429fe:	4ba1      	ldr	r3, [pc, #644]	; (42c84 <__ssvfscanf_r+0xb0c>)
   42a00:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   42a04:	f1b9 0f08 	cmp.w	r9, #8
   42a08:	ddc3      	ble.n	42992 <__ssvfscanf_r+0x81a>
   42a0a:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   42a0e:	e7b0      	b.n	42972 <__ssvfscanf_r+0x7fa>
   42a10:	4b9c      	ldr	r3, [pc, #624]	; (42c84 <__ssvfscanf_r+0xb0c>)
   42a12:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   42a16:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   42a1a:	e7aa      	b.n	42972 <__ssvfscanf_r+0x7fa>
   42a1c:	f1b9 0f0a 	cmp.w	r9, #10
   42a20:	dcf3      	bgt.n	42a0a <__ssvfscanf_r+0x892>
   42a22:	e7b6      	b.n	42992 <__ssvfscanf_r+0x81a>
   42a24:	062b      	lsls	r3, r5, #24
   42a26:	d5b4      	bpl.n	42992 <__ssvfscanf_r+0x81a>
   42a28:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   42a2c:	e7a1      	b.n	42972 <__ssvfscanf_r+0x7fa>
   42a2e:	63b9      	str	r1, [r7, #56]	; 0x38
   42a30:	f8db 3004 	ldr.w	r3, [fp, #4]
   42a34:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   42a38:	f04f 0800 	mov.w	r8, #0
   42a3c:	2b00      	cmp	r3, #0
   42a3e:	f73f acaa 	bgt.w	42396 <__ssvfscanf_r+0x21e>
   42a42:	4659      	mov	r1, fp
   42a44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42a46:	f004 f8e9 	bl	46c1c <__ssrefill_r>
   42a4a:	2800      	cmp	r0, #0
   42a4c:	f43f aca3 	beq.w	42396 <__ssvfscanf_r+0x21e>
   42a50:	e432      	b.n	422b8 <__ssvfscanf_r+0x140>
   42a52:	63b9      	str	r1, [r7, #56]	; 0x38
   42a54:	f045 0501 	orr.w	r5, r5, #1
   42a58:	e7ea      	b.n	42a30 <__ssvfscanf_r+0x8b8>
   42a5a:	63b9      	str	r1, [r7, #56]	; 0x38
   42a5c:	f04f 0804 	mov.w	r8, #4
   42a60:	e494      	b.n	4238c <__ssvfscanf_r+0x214>
   42a62:	f015 0f8f 	tst.w	r5, #143	; 0x8f
   42a66:	f47f ac30 	bne.w	422ca <__ssvfscanf_r+0x152>
   42a6a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   42a6e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   42a72:	f898 2001 	ldrb.w	r2, [r8, #1]
   42a76:	4688      	mov	r8, r1
   42a78:	3c30      	subs	r4, #48	; 0x30
   42a7a:	f7ff bbb4 	b.w	421e6 <__ssvfscanf_r+0x6e>
   42a7e:	432c      	orrs	r4, r5
   42a80:	f47f ac23 	bne.w	422ca <__ssvfscanf_r+0x152>
   42a84:	f898 2001 	ldrb.w	r2, [r8, #1]
   42a88:	2510      	movs	r5, #16
   42a8a:	4688      	mov	r8, r1
   42a8c:	f7ff bbab 	b.w	421e6 <__ssvfscanf_r+0x6e>
   42a90:	4b7d      	ldr	r3, [pc, #500]	; (42c88 <__ssvfscanf_r+0xb10>)
   42a92:	f04f 0803 	mov.w	r8, #3
   42a96:	63b9      	str	r1, [r7, #56]	; 0x38
   42a98:	61fb      	str	r3, [r7, #28]
   42a9a:	2300      	movs	r3, #0
   42a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   42a9e:	e475      	b.n	4238c <__ssvfscanf_r+0x214>
   42aa0:	0728      	lsls	r0, r5, #28
   42aa2:	f47f ac12 	bne.w	422ca <__ssvfscanf_r+0x152>
   42aa6:	f898 2001 	ldrb.w	r2, [r8, #1]
   42aaa:	2a68      	cmp	r2, #104	; 0x68
   42aac:	f000 840b 	beq.w	432c6 <__ssvfscanf_r+0x114e>
   42ab0:	f045 0504 	orr.w	r5, r5, #4
   42ab4:	4688      	mov	r8, r1
   42ab6:	f7ff bb96 	b.w	421e6 <__ssvfscanf_r+0x6e>
   42aba:	f107 0058 	add.w	r0, r7, #88	; 0x58
   42abe:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   42ac2:	f003 fd85 	bl	465d0 <__sccl>
   42ac6:	f04f 0801 	mov.w	r8, #1
   42aca:	63b8      	str	r0, [r7, #56]	; 0x38
   42acc:	e45e      	b.n	4238c <__ssvfscanf_r+0x214>
   42ace:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   42ad2:	63b9      	str	r1, [r7, #56]	; 0x38
   42ad4:	4b6d      	ldr	r3, [pc, #436]	; (42c8c <__ssvfscanf_r+0xb14>)
   42ad6:	f04f 0803 	mov.w	r8, #3
   42ada:	61fb      	str	r3, [r7, #28]
   42adc:	2310      	movs	r3, #16
   42ade:	62bb      	str	r3, [r7, #40]	; 0x28
   42ae0:	e454      	b.n	4238c <__ssvfscanf_r+0x214>
   42ae2:	63b9      	str	r1, [r7, #56]	; 0x38
   42ae4:	f045 0501 	orr.w	r5, r5, #1
   42ae8:	f04f 0802 	mov.w	r8, #2
   42aec:	e44e      	b.n	4238c <__ssvfscanf_r+0x214>
   42aee:	f045 0501 	orr.w	r5, r5, #1
   42af2:	63b9      	str	r1, [r7, #56]	; 0x38
   42af4:	4b65      	ldr	r3, [pc, #404]	; (42c8c <__ssvfscanf_r+0xb14>)
   42af6:	f04f 0803 	mov.w	r8, #3
   42afa:	61fb      	str	r3, [r7, #28]
   42afc:	2308      	movs	r3, #8
   42afe:	62bb      	str	r3, [r7, #40]	; 0x28
   42b00:	e444      	b.n	4238c <__ssvfscanf_r+0x214>
   42b02:	63b9      	str	r1, [r7, #56]	; 0x38
   42b04:	f045 0501 	orr.w	r5, r5, #1
   42b08:	e43a      	b.n	42380 <__ssvfscanf_r+0x208>
   42b0a:	4b60      	ldr	r3, [pc, #384]	; (42c8c <__ssvfscanf_r+0xb14>)
   42b0c:	f04f 0803 	mov.w	r8, #3
   42b10:	63b9      	str	r1, [r7, #56]	; 0x38
   42b12:	61fb      	str	r3, [r7, #28]
   42b14:	230a      	movs	r3, #10
   42b16:	62bb      	str	r3, [r7, #40]	; 0x28
   42b18:	e438      	b.n	4238c <__ssvfscanf_r+0x214>
   42b1a:	63b9      	str	r1, [r7, #56]	; 0x38
   42b1c:	f04f 0802 	mov.w	r8, #2
   42b20:	e434      	b.n	4238c <__ssvfscanf_r+0x214>
   42b22:	63b9      	str	r1, [r7, #56]	; 0x38
   42b24:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   42b28:	e7d4      	b.n	42ad4 <__ssvfscanf_r+0x95c>
   42b2a:	63b9      	str	r1, [r7, #56]	; 0x38
   42b2c:	e7e2      	b.n	42af4 <__ssvfscanf_r+0x97c>
   42b2e:	06e8      	lsls	r0, r5, #27
   42b30:	63b9      	str	r1, [r7, #56]	; 0x38
   42b32:	f53f ab40 	bmi.w	421b6 <__ssvfscanf_r+0x3e>
   42b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   42b38:	0729      	lsls	r1, r5, #28
   42b3a:	f852 3b04 	ldr.w	r3, [r2], #4
   42b3e:	633a      	str	r2, [r7, #48]	; 0x30
   42b40:	f140 84c9 	bpl.w	434d6 <__ssvfscanf_r+0x135e>
   42b44:	f883 a000 	strb.w	sl, [r3]
   42b48:	f7ff bb35 	b.w	421b6 <__ssvfscanf_r+0x3e>
   42b4c:	f015 038f 	ands.w	r3, r5, #143	; 0x8f
   42b50:	f47f abbb 	bne.w	422ca <__ssvfscanf_r+0x152>
   42b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   42b56:	2a00      	cmp	r2, #0
   42b58:	f000 83c5 	beq.w	432e6 <__ssvfscanf_r+0x116e>
   42b5c:	f898 2001 	ldrb.w	r2, [r8, #1]
   42b60:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   42b64:	4688      	mov	r8, r1
   42b66:	f7ff bb3e 	b.w	421e6 <__ssvfscanf_r+0x6e>
   42b6a:	072b      	lsls	r3, r5, #28
   42b6c:	f47f abad 	bne.w	422ca <__ssvfscanf_r+0x152>
   42b70:	f898 2001 	ldrb.w	r2, [r8, #1]
   42b74:	2a6c      	cmp	r2, #108	; 0x6c
   42b76:	f000 83ae 	beq.w	432d6 <__ssvfscanf_r+0x115e>
   42b7a:	f045 0501 	orr.w	r5, r5, #1
   42b7e:	4688      	mov	r8, r1
   42b80:	f7ff bb31 	b.w	421e6 <__ssvfscanf_r+0x6e>
   42b84:	4659      	mov	r1, fp
   42b86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42b88:	f004 f848 	bl	46c1c <__ssrefill_r>
   42b8c:	2800      	cmp	r0, #0
   42b8e:	f43f aefd 	beq.w	4298c <__ssvfscanf_r+0x814>
   42b92:	e6fe      	b.n	42992 <__ssvfscanf_r+0x81a>
   42b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42b96:	f002 ff2f 	bl	459f8 <_localeconv_r>
   42b9a:	1e63      	subs	r3, r4, #1
   42b9c:	6802      	ldr	r2, [r0, #0]
   42b9e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   42ba2:	617a      	str	r2, [r7, #20]
   42ba4:	f240 826b 	bls.w	4307e <__ssvfscanf_r+0xf06>
   42ba8:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   42bac:	18a3      	adds	r3, r4, r2
   42bae:	f240 145d 	movw	r4, #349	; 0x15d
   42bb2:	613b      	str	r3, [r7, #16]
   42bb4:	2300      	movs	r3, #0
   42bb6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
   42bba:	603e      	str	r6, [r7, #0]
   42bbc:	f445 65f0 	orr.w	r5, r5, #1920	; 0x780
   42bc0:	461a      	mov	r2, r3
   42bc2:	4698      	mov	r8, r3
   42bc4:	4689      	mov	r9, r1
   42bc6:	461e      	mov	r6, r3
   42bc8:	6239      	str	r1, [r7, #32]
   42bca:	61bb      	str	r3, [r7, #24]
   42bcc:	e9c7 3302 	strd	r3, r3, [r7, #8]
   42bd0:	f8db 0000 	ldr.w	r0, [fp]
   42bd4:	7801      	ldrb	r1, [r0, #0]
   42bd6:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   42bda:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
   42bde:	f200 811a 	bhi.w	42e16 <__ssvfscanf_r+0xc9e>
   42be2:	e8df f01c 	tbh	[pc, ip, lsl #1]
   42be6:	0080      	.short	0x0080
   42be8:	00800118 	.word	0x00800118
   42bec:	01180118 	.word	0x01180118
   42bf0:	00550073 	.word	0x00550073
   42bf4:	00550055 	.word	0x00550055
   42bf8:	00550055 	.word	0x00550055
   42bfc:	00550055 	.word	0x00550055
   42c00:	00550055 	.word	0x00550055
   42c04:	01180118 	.word	0x01180118
   42c08:	01180118 	.word	0x01180118
   42c0c:	01180118 	.word	0x01180118
   42c10:	01130118 	.word	0x01130118
   42c14:	01180118 	.word	0x01180118
   42c18:	00fa0118 	.word	0x00fa0118
   42c1c:	011800f5 	.word	0x011800f5
   42c20:	00a10118 	.word	0x00a10118
   42c24:	01180118 	.word	0x01180118
   42c28:	01180118 	.word	0x01180118
   42c2c:	0118008d 	.word	0x0118008d
   42c30:	01180118 	.word	0x01180118
   42c34:	01180118 	.word	0x01180118
   42c38:	01180089 	.word	0x01180089
   42c3c:	01180118 	.word	0x01180118
   42c40:	00850118 	.word	0x00850118
   42c44:	01180118 	.word	0x01180118
   42c48:	01180118 	.word	0x01180118
   42c4c:	01180118 	.word	0x01180118
   42c50:	01130118 	.word	0x01130118
   42c54:	01180118 	.word	0x01180118
   42c58:	00fa0118 	.word	0x00fa0118
   42c5c:	011800f5 	.word	0x011800f5
   42c60:	00a10118 	.word	0x00a10118
   42c64:	01180118 	.word	0x01180118
   42c68:	01180118 	.word	0x01180118
   42c6c:	0118008d 	.word	0x0118008d
   42c70:	01180118 	.word	0x01180118
   42c74:	01180118 	.word	0x01180118
   42c78:	01180089 	.word	0x01180089
   42c7c:	01180118 	.word	0x01180118
   42c80:	00850118 	.word	0x00850118
   42c84:	0004c678 	.word	0x0004c678
   42c88:	00041fa1 	.word	0x00041fa1
   42c8c:	00042129 	.word	0x00042129
   42c90:	42f2      	cmn	r2, r6
   42c92:	d115      	bne.n	42cc0 <__ssvfscanf_r+0xb48>
   42c94:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
   42c98:	f889 1000 	strb.w	r1, [r9]
   42c9c:	f109 0901 	add.w	r9, r9, #1
   42ca0:	f8db 1004 	ldr.w	r1, [fp, #4]
   42ca4:	3c01      	subs	r4, #1
   42ca6:	f10a 0a01 	add.w	sl, sl, #1
   42caa:	3901      	subs	r1, #1
   42cac:	2900      	cmp	r1, #0
   42cae:	f8cb 1004 	str.w	r1, [fp, #4]
   42cb2:	f340 80be 	ble.w	42e32 <__ssvfscanf_r+0xcba>
   42cb6:	3001      	adds	r0, #1
   42cb8:	f8cb 0000 	str.w	r0, [fp]
   42cbc:	2c00      	cmp	r4, #0
   42cbe:	d187      	bne.n	42bd0 <__ssvfscanf_r+0xa58>
   42cc0:	f1b8 0f00 	cmp.w	r8, #0
   42cc4:	d040      	beq.n	42d48 <__ssvfscanf_r+0xbd0>
   42cc6:	f425 7580 	bic.w	r5, r5, #256	; 0x100
   42cca:	e03d      	b.n	42d48 <__ssvfscanf_r+0xbd0>
   42ccc:	05eb      	lsls	r3, r5, #23
   42cce:	d5df      	bpl.n	42c90 <__ssvfscanf_r+0xb18>
   42cd0:	693b      	ldr	r3, [r7, #16]
   42cd2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   42cd6:	f108 0801 	add.w	r8, r8, #1
   42cda:	2b00      	cmp	r3, #0
   42cdc:	d0e0      	beq.n	42ca0 <__ssvfscanf_r+0xb28>
   42cde:	3b01      	subs	r3, #1
   42ce0:	3401      	adds	r4, #1
   42ce2:	613b      	str	r3, [r7, #16]
   42ce4:	e7dc      	b.n	42ca0 <__ssvfscanf_r+0xb28>
   42ce6:	062b      	lsls	r3, r5, #24
   42ce8:	d5ea      	bpl.n	42cc0 <__ssvfscanf_r+0xb48>
   42cea:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   42cee:	e7d3      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42cf0:	2e07      	cmp	r6, #7
   42cf2:	d1e5      	bne.n	42cc0 <__ssvfscanf_r+0xb48>
   42cf4:	2608      	movs	r6, #8
   42cf6:	e7cf      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42cf8:	2e06      	cmp	r6, #6
   42cfa:	d1e1      	bne.n	42cc0 <__ssvfscanf_r+0xb48>
   42cfc:	2607      	movs	r6, #7
   42cfe:	e7cb      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42d00:	2a00      	cmp	r2, #0
   42d02:	f040 80a3 	bne.w	42e4c <__ssvfscanf_r+0xcd4>
   42d06:	f1b8 0f00 	cmp.w	r8, #0
   42d0a:	f040 809f 	bne.w	42e4c <__ssvfscanf_r+0xcd4>
   42d0e:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
   42d12:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
   42d16:	f000 833a 	beq.w	4338e <__ssvfscanf_r+0x1216>
   42d1a:	2e01      	cmp	r6, #1
   42d1c:	d001      	beq.n	42d22 <__ssvfscanf_r+0xbaa>
   42d1e:	2e04      	cmp	r6, #4
   42d20:	d1ce      	bne.n	42cc0 <__ssvfscanf_r+0xb48>
   42d22:	3601      	adds	r6, #1
   42d24:	b2f6      	uxtb	r6, r6
   42d26:	e7b7      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42d28:	2e00      	cmp	r6, #0
   42d2a:	f040 8094 	bne.w	42e56 <__ssvfscanf_r+0xcde>
   42d2e:	f1b8 0f00 	cmp.w	r8, #0
   42d32:	f040 8090 	bne.w	42e56 <__ssvfscanf_r+0xcde>
   42d36:	f405 63e0 	and.w	r3, r5, #1792	; 0x700
   42d3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   42d3e:	f000 832a 	beq.w	43396 <__ssvfscanf_r+0x121e>
   42d42:	683e      	ldr	r6, [r7, #0]
   42d44:	f04f 0800 	mov.w	r8, #0
   42d48:	3a01      	subs	r2, #1
   42d4a:	2a01      	cmp	r2, #1
   42d4c:	f240 8480 	bls.w	43650 <__ssvfscanf_r+0x14d8>
   42d50:	1e73      	subs	r3, r6, #1
   42d52:	2b06      	cmp	r3, #6
   42d54:	f240 8323 	bls.w	4339e <__ssvfscanf_r+0x1226>
   42d58:	05e8      	lsls	r0, r5, #23
   42d5a:	d511      	bpl.n	42d80 <__ssvfscanf_r+0xc08>
   42d5c:	0569      	lsls	r1, r5, #21
   42d5e:	f100 8490 	bmi.w	43682 <__ssvfscanf_r+0x150a>
   42d62:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   42d66:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   42d6a:	2b45      	cmp	r3, #69	; 0x45
   42d6c:	f040 82a0 	bne.w	432b0 <__ssvfscanf_r+0x1138>
   42d70:	f109 39ff 	add.w	r9, r9, #4294967295
   42d74:	f10a 3aff 	add.w	sl, sl, #4294967295
   42d78:	465a      	mov	r2, fp
   42d7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42d7c:	f003 ff10 	bl	46ba0 <_sungetc_r>
   42d80:	f015 0210 	ands.w	r2, r5, #16
   42d84:	f47f aa17 	bne.w	421b6 <__ssvfscanf_r+0x3e>
   42d88:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
   42d8c:	f889 2000 	strb.w	r2, [r9]
   42d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   42d94:	f000 827a 	beq.w	4328c <__ssvfscanf_r+0x1114>
   42d98:	68fb      	ldr	r3, [r7, #12]
   42d9a:	2b00      	cmp	r3, #0
   42d9c:	f040 83b5 	bne.w	4350a <__ssvfscanf_r+0x1392>
   42da0:	2200      	movs	r2, #0
   42da2:	6a39      	ldr	r1, [r7, #32]
   42da4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42da6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   42da8:	f7ff f850 	bl	41e4c <_strtod_r>
   42dac:	07ea      	lsls	r2, r5, #31
   42dae:	eeb0 8a40 	vmov.f32	s16, s0
   42db2:	eef0 8a60 	vmov.f32	s17, s1
   42db6:	f106 0404 	add.w	r4, r6, #4
   42dba:	f140 8328 	bpl.w	4340e <__ssvfscanf_r+0x1296>
   42dbe:	6833      	ldr	r3, [r6, #0]
   42dc0:	ed83 0b00 	vstr	d0, [r3]
   42dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   42dc6:	3301      	adds	r3, #1
   42dc8:	e9c7 430c 	strd	r4, r3, [r7, #48]	; 0x30
   42dcc:	f7ff b9f3 	b.w	421b6 <__ssvfscanf_r+0x3e>
   42dd0:	2e02      	cmp	r6, #2
   42dd2:	f47f af75 	bne.w	42cc0 <__ssvfscanf_r+0xb48>
   42dd6:	2603      	movs	r6, #3
   42dd8:	e75e      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42dda:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
   42dde:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
   42de2:	d005      	beq.n	42df0 <__ssvfscanf_r+0xc78>
   42de4:	056b      	lsls	r3, r5, #21
   42de6:	f57f af6b 	bpl.w	42cc0 <__ssvfscanf_r+0xb48>
   42dea:	f1b8 0f00 	cmp.w	r8, #0
   42dee:	d0ab      	beq.n	42d48 <__ssvfscanf_r+0xbd0>
   42df0:	05ab      	lsls	r3, r5, #22
   42df2:	d404      	bmi.n	42dfe <__ssvfscanf_r+0xc86>
   42df4:	69bb      	ldr	r3, [r7, #24]
   42df6:	eba8 0303 	sub.w	r3, r8, r3
   42dfa:	e9c7 9302 	strd	r9, r3, [r7, #8]
   42dfe:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   42e02:	f04f 0800 	mov.w	r8, #0
   42e06:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
   42e0a:	e745      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42e0c:	2a01      	cmp	r2, #1
   42e0e:	f47f af57 	bne.w	42cc0 <__ssvfscanf_r+0xb48>
   42e12:	2202      	movs	r2, #2
   42e14:	e740      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42e16:	697b      	ldr	r3, [r7, #20]
   42e18:	f893 c000 	ldrb.w	ip, [r3]
   42e1c:	458c      	cmp	ip, r1
   42e1e:	f47f af4f 	bne.w	42cc0 <__ssvfscanf_r+0xb48>
   42e22:	05ab      	lsls	r3, r5, #22
   42e24:	f57f af4c 	bpl.w	42cc0 <__ssvfscanf_r+0xb48>
   42e28:	f425 7520 	bic.w	r5, r5, #640	; 0x280
   42e2c:	f8c7 8018 	str.w	r8, [r7, #24]
   42e30:	e732      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42e32:	4659      	mov	r1, fp
   42e34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42e36:	62fa      	str	r2, [r7, #44]	; 0x2c
   42e38:	f003 fef0 	bl	46c1c <__ssrefill_r>
   42e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   42e3e:	2800      	cmp	r0, #0
   42e40:	f47f af3e 	bne.w	42cc0 <__ssvfscanf_r+0xb48>
   42e44:	2c00      	cmp	r4, #0
   42e46:	f47f aec3 	bne.w	42bd0 <__ssvfscanf_r+0xa58>
   42e4a:	e739      	b.n	42cc0 <__ssvfscanf_r+0xb48>
   42e4c:	2a02      	cmp	r2, #2
   42e4e:	f47f af64 	bne.w	42d1a <__ssvfscanf_r+0xba2>
   42e52:	2203      	movs	r2, #3
   42e54:	e720      	b.n	42c98 <__ssvfscanf_r+0xb20>
   42e56:	2e03      	cmp	r6, #3
   42e58:	f43f af63 	beq.w	42d22 <__ssvfscanf_r+0xbaa>
   42e5c:	2e05      	cmp	r6, #5
   42e5e:	f43f af60 	beq.w	42d22 <__ssvfscanf_r+0xbaa>
   42e62:	e72d      	b.n	42cc0 <__ssvfscanf_r+0xb48>
   42e64:	f015 0201 	ands.w	r2, r5, #1
   42e68:	f000 8384 	beq.w	43574 <__ssvfscanf_r+0x13fc>
   42e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   42e6e:	681b      	ldr	r3, [r3, #0]
   42e70:	6018      	str	r0, [r3, #0]
   42e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   42e74:	3301      	adds	r3, #1
   42e76:	e9c7 430c 	strd	r4, r3, [r7, #48]	; 0x30
   42e7a:	6a3b      	ldr	r3, [r7, #32]
   42e7c:	1af6      	subs	r6, r6, r3
   42e7e:	44b0      	add	r8, r6
   42e80:	44c2      	add	sl, r8
   42e82:	f7ff b998 	b.w	421b6 <__ssvfscanf_r+0x3e>
   42e86:	2e00      	cmp	r6, #0
   42e88:	f040 808f 	bne.w	42faa <__ssvfscanf_r+0xe32>
   42e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   42e8e:	f015 0580 	ands.w	r5, r5, #128	; 0x80
   42e92:	f853 6b04 	ldr.w	r6, [r3], #4
   42e96:	633b      	str	r3, [r7, #48]	; 0x30
   42e98:	f000 82e0 	beq.w	4345c <__ssvfscanf_r+0x12e4>
   42e9c:	2e00      	cmp	r6, #0
   42e9e:	f43f aa14 	beq.w	422ca <__ssvfscanf_r+0x152>
   42ea2:	2020      	movs	r0, #32
   42ea4:	f7fd fd6e 	bl	40984 <malloc>
   42ea8:	4681      	mov	r9, r0
   42eaa:	2800      	cmp	r0, #0
   42eac:	f000 83b8 	beq.w	43620 <__ssvfscanf_r+0x14a8>
   42eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   42eb2:	6030      	str	r0, [r6, #0]
   42eb4:	88d5      	ldrh	r5, [r2, #6]
   42eb6:	8893      	ldrh	r3, [r2, #4]
   42eb8:	f8d2 8000 	ldr.w	r8, [r2]
   42ebc:	429d      	cmp	r5, r3
   42ebe:	d312      	bcc.n	42ee6 <__ssvfscanf_r+0xd6e>
   42ec0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   42ec4:	4293      	cmp	r3, r2
   42ec6:	f200 83da 	bhi.w	4367e <__ssvfscanf_r+0x1506>
   42eca:	3308      	adds	r3, #8
   42ecc:	4640      	mov	r0, r8
   42ece:	0099      	lsls	r1, r3, #2
   42ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   42ed2:	f7fe f907 	bl	410e4 <realloc>
   42ed6:	2800      	cmp	r0, #0
   42ed8:	f000 83d1 	beq.w	4367e <__ssvfscanf_r+0x1506>
   42edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   42ede:	4680      	mov	r8, r0
   42ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42ee2:	6010      	str	r0, [r2, #0]
   42ee4:	8093      	strh	r3, [r2, #4]
   42ee6:	2201      	movs	r2, #1
   42ee8:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
   42eec:	1c6b      	adds	r3, r5, #1
   42eee:	623e      	str	r6, [r7, #32]
   42ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
   42ef2:	464e      	mov	r6, r9
   42ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   42ef6:	f04f 0820 	mov.w	r8, #32
   42efa:	80d3      	strh	r3, [r2, #6]
   42efc:	4635      	mov	r5, r6
   42efe:	f7fd fd33 	bl	40968 <__locale_ctype_ptr>
   42f02:	f8db 1000 	ldr.w	r1, [fp]
   42f06:	f106 0901 	add.w	r9, r6, #1
   42f0a:	780b      	ldrb	r3, [r1, #0]
   42f0c:	f101 0c01 	add.w	ip, r1, #1
   42f10:	eba9 0205 	sub.w	r2, r9, r5
   42f14:	4418      	add	r0, r3
   42f16:	7843      	ldrb	r3, [r0, #1]
   42f18:	0718      	lsls	r0, r3, #28
   42f1a:	d42b      	bmi.n	42f74 <__ssvfscanf_r+0xdfc>
   42f1c:	f8db 3004 	ldr.w	r3, [fp, #4]
   42f20:	4542      	cmp	r2, r8
   42f22:	f8cb c000 	str.w	ip, [fp]
   42f26:	f103 33ff 	add.w	r3, r3, #4294967295
   42f2a:	61ba      	str	r2, [r7, #24]
   42f2c:	f8cb 3004 	str.w	r3, [fp, #4]
   42f30:	780b      	ldrb	r3, [r1, #0]
   42f32:	7033      	strb	r3, [r6, #0]
   42f34:	d310      	bcc.n	42f58 <__ssvfscanf_r+0xde0>
   42f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42f38:	4628      	mov	r0, r5
   42f3a:	b16b      	cbz	r3, 42f58 <__ssvfscanf_r+0xde0>
   42f3c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   42f40:	4641      	mov	r1, r8
   42f42:	f7fe f8cf 	bl	410e4 <realloc>
   42f46:	4605      	mov	r5, r0
   42f48:	2800      	cmp	r0, #0
   42f4a:	f000 8369 	beq.w	43620 <__ssvfscanf_r+0x14a8>
   42f4e:	69ba      	ldr	r2, [r7, #24]
   42f50:	6a3b      	ldr	r3, [r7, #32]
   42f52:	eb00 0902 	add.w	r9, r0, r2
   42f56:	6018      	str	r0, [r3, #0]
   42f58:	3c01      	subs	r4, #1
   42f5a:	464e      	mov	r6, r9
   42f5c:	d009      	beq.n	42f72 <__ssvfscanf_r+0xdfa>
   42f5e:	f8db 3004 	ldr.w	r3, [fp, #4]
   42f62:	2b00      	cmp	r3, #0
   42f64:	dccb      	bgt.n	42efe <__ssvfscanf_r+0xd86>
   42f66:	4659      	mov	r1, fp
   42f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42f6a:	f003 fe57 	bl	46c1c <__ssrefill_r>
   42f6e:	2800      	cmp	r0, #0
   42f70:	d0c5      	beq.n	42efe <__ssvfscanf_r+0xd86>
   42f72:	464e      	mov	r6, r9
   42f74:	1b75      	subs	r5, r6, r5
   42f76:	2300      	movs	r3, #0
   42f78:	1c69      	adds	r1, r5, #1
   42f7a:	7033      	strb	r3, [r6, #0]
   42f7c:	4588      	cmp	r8, r1
   42f7e:	d907      	bls.n	42f90 <__ssvfscanf_r+0xe18>
   42f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42f82:	b12b      	cbz	r3, 42f90 <__ssvfscanf_r+0xe18>
   42f84:	6a3c      	ldr	r4, [r7, #32]
   42f86:	6820      	ldr	r0, [r4, #0]
   42f88:	f7fe f8ac 	bl	410e4 <realloc>
   42f8c:	b100      	cbz	r0, 42f90 <__ssvfscanf_r+0xe18>
   42f8e:	6020      	str	r0, [r4, #0]
   42f90:	44aa      	add	sl, r5
   42f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   42f94:	3301      	adds	r3, #1
   42f96:	637b      	str	r3, [r7, #52]	; 0x34
   42f98:	f7ff b90d 	b.w	421b6 <__ssvfscanf_r+0x3e>
   42f9c:	4659      	mov	r1, fp
   42f9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42fa0:	f003 fe3c 	bl	46c1c <__ssrefill_r>
   42fa4:	2800      	cmp	r0, #0
   42fa6:	f47f af6b 	bne.w	42e80 <__ssvfscanf_r+0xd08>
   42faa:	f7fd fcdd 	bl	40968 <__locale_ctype_ptr>
   42fae:	f8db 3000 	ldr.w	r3, [fp]
   42fb2:	781a      	ldrb	r2, [r3, #0]
   42fb4:	3301      	adds	r3, #1
   42fb6:	4410      	add	r0, r2
   42fb8:	7842      	ldrb	r2, [r0, #1]
   42fba:	0715      	lsls	r5, r2, #28
   42fbc:	f53f af60 	bmi.w	42e80 <__ssvfscanf_r+0xd08>
   42fc0:	f8db 2004 	ldr.w	r2, [fp, #4]
   42fc4:	f108 0801 	add.w	r8, r8, #1
   42fc8:	f8cb 3000 	str.w	r3, [fp]
   42fcc:	3a01      	subs	r2, #1
   42fce:	45a0      	cmp	r8, r4
   42fd0:	f8cb 2004 	str.w	r2, [fp, #4]
   42fd4:	f43f af54 	beq.w	42e80 <__ssvfscanf_r+0xd08>
   42fd8:	2a00      	cmp	r2, #0
   42fda:	dce6      	bgt.n	42faa <__ssvfscanf_r+0xe32>
   42fdc:	e7de      	b.n	42f9c <__ssvfscanf_r+0xe24>
   42fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   42fe0:	2a00      	cmp	r2, #0
   42fe2:	f040 812a 	bne.w	4323a <__ssvfscanf_r+0x10c2>
   42fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   42fe8:	f853 6b04 	ldr.w	r6, [r3], #4
   42fec:	633b      	str	r3, [r7, #48]	; 0x30
   42fee:	062b      	lsls	r3, r5, #24
   42ff0:	f140 8220 	bpl.w	43434 <__ssvfscanf_r+0x12bc>
   42ff4:	2e00      	cmp	r6, #0
   42ff6:	f43f a968 	beq.w	422ca <__ssvfscanf_r+0x152>
   42ffa:	4620      	mov	r0, r4
   42ffc:	f7fd fcc2 	bl	40984 <malloc>
   43000:	4603      	mov	r3, r0
   43002:	2800      	cmp	r0, #0
   43004:	f000 830c 	beq.w	43620 <__ssvfscanf_r+0x14a8>
   43008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   4300a:	6030      	str	r0, [r6, #0]
   4300c:	88d5      	ldrh	r5, [r2, #6]
   4300e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
   43012:	f8d2 8000 	ldr.w	r8, [r2]
   43016:	454d      	cmp	r5, r9
   43018:	d315      	bcc.n	43046 <__ssvfscanf_r+0xece>
   4301a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   4301e:	62f8      	str	r0, [r7, #44]	; 0x2c
   43020:	4591      	cmp	r9, r2
   43022:	f200 832c 	bhi.w	4367e <__ssvfscanf_r+0x1506>
   43026:	f109 0908 	add.w	r9, r9, #8
   4302a:	4640      	mov	r0, r8
   4302c:	ea4f 0189 	mov.w	r1, r9, lsl #2
   43030:	f7fe f858 	bl	410e4 <realloc>
   43034:	2800      	cmp	r0, #0
   43036:	f000 8322 	beq.w	4367e <__ssvfscanf_r+0x1506>
   4303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4303c:	4680      	mov	r8, r0
   4303e:	6018      	str	r0, [r3, #0]
   43040:	f8a3 9004 	strh.w	r9, [r3, #4]
   43044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43046:	1c6a      	adds	r2, r5, #1
   43048:	6a78      	ldr	r0, [r7, #36]	; 0x24
   4304a:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
   4304e:	4619      	mov	r1, r3
   43050:	80c2      	strh	r2, [r0, #6]
   43052:	4623      	mov	r3, r4
   43054:	2201      	movs	r2, #1
   43056:	f8cd b000 	str.w	fp, [sp]
   4305a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   4305c:	f003 fdfc 	bl	46c58 <_sfread_r>
   43060:	4605      	mov	r5, r0
   43062:	2800      	cmp	r0, #0
   43064:	f000 833e 	beq.w	436e4 <__ssvfscanf_r+0x156c>
   43068:	4284      	cmp	r4, r0
   4306a:	d991      	bls.n	42f90 <__ssvfscanf_r+0xe18>
   4306c:	4601      	mov	r1, r0
   4306e:	6830      	ldr	r0, [r6, #0]
   43070:	f7fe f838 	bl	410e4 <realloc>
   43074:	2800      	cmp	r0, #0
   43076:	d08b      	beq.n	42f90 <__ssvfscanf_r+0xe18>
   43078:	6030      	str	r0, [r6, #0]
   4307a:	44aa      	add	sl, r5
   4307c:	e789      	b.n	42f92 <__ssvfscanf_r+0xe1a>
   4307e:	2300      	movs	r3, #0
   43080:	613b      	str	r3, [r7, #16]
   43082:	e597      	b.n	42bb4 <__ssvfscanf_r+0xa3c>
   43084:	697b      	ldr	r3, [r7, #20]
   43086:	2b00      	cmp	r3, #0
   43088:	f040 80a3 	bne.w	431d2 <__ssvfscanf_r+0x105a>
   4308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   4308e:	f015 0580 	ands.w	r5, r5, #128	; 0x80
   43092:	f853 6b04 	ldr.w	r6, [r3], #4
   43096:	633b      	str	r3, [r7, #48]	; 0x30
   43098:	f000 8216 	beq.w	434c8 <__ssvfscanf_r+0x1350>
   4309c:	2e00      	cmp	r6, #0
   4309e:	f43f a914 	beq.w	422ca <__ssvfscanf_r+0x152>
   430a2:	2020      	movs	r0, #32
   430a4:	f7fd fc6e 	bl	40984 <malloc>
   430a8:	4681      	mov	r9, r0
   430aa:	2800      	cmp	r0, #0
   430ac:	f000 82b8 	beq.w	43620 <__ssvfscanf_r+0x14a8>
   430b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   430b2:	6030      	str	r0, [r6, #0]
   430b4:	88cd      	ldrh	r5, [r1, #6]
   430b6:	888b      	ldrh	r3, [r1, #4]
   430b8:	429d      	cmp	r5, r3
   430ba:	d313      	bcc.n	430e4 <__ssvfscanf_r+0xf6c>
   430bc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   430c0:	f8d1 8000 	ldr.w	r8, [r1]
   430c4:	4293      	cmp	r3, r2
   430c6:	f200 82da 	bhi.w	4367e <__ssvfscanf_r+0x1506>
   430ca:	3308      	adds	r3, #8
   430cc:	4640      	mov	r0, r8
   430ce:	0099      	lsls	r1, r3, #2
   430d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   430d2:	f7fe f807 	bl	410e4 <realloc>
   430d6:	2800      	cmp	r0, #0
   430d8:	f000 82d1 	beq.w	4367e <__ssvfscanf_r+0x1506>
   430dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   430de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   430e0:	6008      	str	r0, [r1, #0]
   430e2:	808b      	strh	r3, [r1, #4]
   430e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   430e6:	1c6b      	adds	r3, r5, #1
   430e8:	62fe      	str	r6, [r7, #44]	; 0x2c
   430ea:	680a      	ldr	r2, [r1, #0]
   430ec:	80cb      	strh	r3, [r1, #6]
   430ee:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
   430f2:	464e      	mov	r6, r9
   430f4:	2520      	movs	r5, #32
   430f6:	46a0      	mov	r8, r4
   430f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
   430fc:	4634      	mov	r4, r6
   430fe:	f8c7 a018 	str.w	sl, [r7, #24]
   43102:	f8db 1000 	ldr.w	r1, [fp]
   43106:	f106 0901 	add.w	r9, r6, #1
   4310a:	7808      	ldrb	r0, [r1, #0]
   4310c:	1c4b      	adds	r3, r1, #1
   4310e:	eba9 0a04 	sub.w	sl, r9, r4
   43112:	5c10      	ldrb	r0, [r2, r0]
   43114:	2800      	cmp	r0, #0
   43116:	f000 8164 	beq.w	433e2 <__ssvfscanf_r+0x126a>
   4311a:	f8db 0004 	ldr.w	r0, [fp, #4]
   4311e:	f8cb 3000 	str.w	r3, [fp]
   43122:	3801      	subs	r0, #1
   43124:	f8cb 0004 	str.w	r0, [fp, #4]
   43128:	7809      	ldrb	r1, [r1, #0]
   4312a:	7031      	strb	r1, [r6, #0]
   4312c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   4312e:	b17e      	cbz	r6, 43150 <__ssvfscanf_r+0xfd8>
   43130:	45aa      	cmp	sl, r5
   43132:	4620      	mov	r0, r4
   43134:	d30c      	bcc.n	43150 <__ssvfscanf_r+0xfd8>
   43136:	006d      	lsls	r5, r5, #1
   43138:	623a      	str	r2, [r7, #32]
   4313a:	4629      	mov	r1, r5
   4313c:	f7fd ffd2 	bl	410e4 <realloc>
   43140:	4604      	mov	r4, r0
   43142:	2800      	cmp	r0, #0
   43144:	f000 826c 	beq.w	43620 <__ssvfscanf_r+0x14a8>
   43148:	eb00 090a 	add.w	r9, r0, sl
   4314c:	6a3a      	ldr	r2, [r7, #32]
   4314e:	6030      	str	r0, [r6, #0]
   43150:	f1b8 0801 	subs.w	r8, r8, #1
   43154:	464e      	mov	r6, r9
   43156:	f000 8144 	beq.w	433e2 <__ssvfscanf_r+0x126a>
   4315a:	f8db 1004 	ldr.w	r1, [fp, #4]
   4315e:	2900      	cmp	r1, #0
   43160:	dccf      	bgt.n	43102 <__ssvfscanf_r+0xf8a>
   43162:	4659      	mov	r1, fp
   43164:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   43166:	623a      	str	r2, [r7, #32]
   43168:	f003 fd58 	bl	46c1c <__ssrefill_r>
   4316c:	6a3a      	ldr	r2, [r7, #32]
   4316e:	2800      	cmp	r0, #0
   43170:	d0c7      	beq.n	43102 <__ssvfscanf_r+0xf8a>
   43172:	45a1      	cmp	r9, r4
   43174:	f8d7 a018 	ldr.w	sl, [r7, #24]
   43178:	46a0      	mov	r8, r4
   4317a:	f040 8135 	bne.w	433e8 <__ssvfscanf_r+0x1270>
   4317e:	f7ff b89b 	b.w	422b8 <__ssvfscanf_r+0x140>
   43182:	f04f 0900 	mov.w	r9, #0
   43186:	f7ff b93c 	b.w	42402 <__ssvfscanf_r+0x28a>
   4318a:	4659      	mov	r1, fp
   4318c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   4318e:	f003 fd45 	bl	46c1c <__ssrefill_r>
   43192:	2800      	cmp	r0, #0
   43194:	f43f a8d3 	beq.w	4233e <__ssvfscanf_r+0x1c6>
   43198:	f7ff b88e 	b.w	422b8 <__ssvfscanf_r+0x140>
   4319c:	4659      	mov	r1, fp
   4319e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   431a0:	f003 fd3c 	bl	46c1c <__ssrefill_r>
   431a4:	2800      	cmp	r0, #0
   431a6:	f43f abbc 	beq.w	42922 <__ssvfscanf_r+0x7aa>
   431aa:	f8c7 a004 	str.w	sl, [r7, #4]
   431ae:	f8d7 a020 	ldr.w	sl, [r7, #32]
   431b2:	2d00      	cmp	r5, #0
   431b4:	f43f abbb 	beq.w	4292e <__ssvfscanf_r+0x7b6>
   431b8:	f7ff b87e 	b.w	422b8 <__ssvfscanf_r+0x140>
   431bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   431be:	681b      	ldr	r3, [r3, #0]
   431c0:	7018      	strb	r0, [r3, #0]
   431c2:	e656      	b.n	42e72 <__ssvfscanf_r+0xcfa>
   431c4:	2300      	movs	r3, #0
   431c6:	e9c7 3305 	strd	r3, r3, [r7, #20]
   431ca:	613b      	str	r3, [r7, #16]
   431cc:	4698      	mov	r8, r3
   431ce:	f7ff bb47 	b.w	42860 <__ssvfscanf_r+0x6e8>
   431d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
   431d6:	f8db 1000 	ldr.w	r1, [fp]
   431da:	4615      	mov	r5, r2
   431dc:	780b      	ldrb	r3, [r1, #0]
   431de:	3101      	adds	r1, #1
   431e0:	5ceb      	ldrb	r3, [r5, r3]
   431e2:	2b00      	cmp	r3, #0
   431e4:	f000 8134 	beq.w	43450 <__ssvfscanf_r+0x12d8>
   431e8:	f8db 3004 	ldr.w	r3, [fp, #4]
   431ec:	3601      	adds	r6, #1
   431ee:	f8cb 1000 	str.w	r1, [fp]
   431f2:	3b01      	subs	r3, #1
   431f4:	42a6      	cmp	r6, r4
   431f6:	f8cb 3004 	str.w	r3, [fp, #4]
   431fa:	f000 812c 	beq.w	43456 <__ssvfscanf_r+0x12de>
   431fe:	2b00      	cmp	r3, #0
   43200:	dcec      	bgt.n	431dc <__ssvfscanf_r+0x1064>
   43202:	4659      	mov	r1, fp
   43204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   43206:	f003 fd09 	bl	46c1c <__ssrefill_r>
   4320a:	2800      	cmp	r0, #0
   4320c:	f040 8123 	bne.w	43456 <__ssvfscanf_r+0x12de>
   43210:	f8db 1000 	ldr.w	r1, [fp]
   43214:	e7e2      	b.n	431dc <__ssvfscanf_r+0x1064>
   43216:	2300      	movs	r3, #0
   43218:	f107 0244 	add.w	r2, r7, #68	; 0x44
   4321c:	61bb      	str	r3, [r7, #24]
   4321e:	4690      	mov	r8, r2
   43220:	4699      	mov	r9, r3
   43222:	623b      	str	r3, [r7, #32]
   43224:	f7ff b982 	b.w	4252c <__ssvfscanf_r+0x3b4>
   43228:	2300      	movs	r3, #0
   4322a:	f107 0244 	add.w	r2, r7, #68	; 0x44
   4322e:	60fb      	str	r3, [r7, #12]
   43230:	4690      	mov	r8, r2
   43232:	613b      	str	r3, [r7, #16]
   43234:	60bb      	str	r3, [r7, #8]
   43236:	f7ff ba2a 	b.w	4268e <__ssvfscanf_r+0x516>
   4323a:	461d      	mov	r5, r3
   4323c:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   43240:	e008      	b.n	43254 <__ssvfscanf_r+0x10dc>
   43242:	f8cb 6000 	str.w	r6, [fp]
   43246:	441d      	add	r5, r3
   43248:	1ae4      	subs	r4, r4, r3
   4324a:	f003 fce7 	bl	46c1c <__ssrefill_r>
   4324e:	2800      	cmp	r0, #0
   43250:	f040 81c5 	bne.w	435de <__ssvfscanf_r+0x1466>
   43254:	f8db 3004 	ldr.w	r3, [fp, #4]
   43258:	4659      	mov	r1, fp
   4325a:	f8db 2000 	ldr.w	r2, [fp]
   4325e:	4640      	mov	r0, r8
   43260:	429c      	cmp	r4, r3
   43262:	eb02 0603 	add.w	r6, r2, r3
   43266:	dcec      	bgt.n	43242 <__ssvfscanf_r+0x10ca>
   43268:	1b1b      	subs	r3, r3, r4
   4326a:	4422      	add	r2, r4
   4326c:	4425      	add	r5, r4
   4326e:	e9cb 2300 	strd	r2, r3, [fp]
   43272:	44aa      	add	sl, r5
   43274:	f7fe bf9f 	b.w	421b6 <__ssvfscanf_r+0x3e>
   43278:	1e73      	subs	r3, r6, #1
   4327a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   4327e:	465a      	mov	r2, fp
   43280:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   43282:	461e      	mov	r6, r3
   43284:	f003 fc8c 	bl	46ba0 <_sungetc_r>
   43288:	f7ff bb8b 	b.w	429a2 <__ssvfscanf_r+0x82a>
   4328c:	69bb      	ldr	r3, [r7, #24]
   4328e:	eba8 0303 	sub.w	r3, r8, r3
   43292:	425a      	negs	r2, r3
   43294:	2b00      	cmp	r3, #0
   43296:	f43f ad83 	beq.w	42da0 <__ssvfscanf_r+0xc28>
   4329a:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   4329e:	49bf      	ldr	r1, [pc, #764]	; (4359c <__ssvfscanf_r+0x1424>)
   432a0:	4599      	cmp	r9, r3
   432a2:	bf28      	it	cs
   432a4:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   432a8:	4648      	mov	r0, r9
   432aa:	f003 fa1d 	bl	466e8 <sprintf>
   432ae:	e577      	b.n	42da0 <__ssvfscanf_r+0xc28>
   432b0:	465a      	mov	r2, fp
   432b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   432b4:	f003 fc74 	bl	46ba0 <_sungetc_r>
   432b8:	f1aa 0a02 	sub.w	sl, sl, #2
   432bc:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   432c0:	f1a9 0902 	sub.w	r9, r9, #2
   432c4:	e558      	b.n	42d78 <__ssvfscanf_r+0xc00>
   432c6:	f898 2002 	ldrb.w	r2, [r8, #2]
   432ca:	f045 0508 	orr.w	r5, r5, #8
   432ce:	f108 0802 	add.w	r8, r8, #2
   432d2:	f7fe bf88 	b.w	421e6 <__ssvfscanf_r+0x6e>
   432d6:	f898 2002 	ldrb.w	r2, [r8, #2]
   432da:	f045 0502 	orr.w	r5, r5, #2
   432de:	f108 0802 	add.w	r8, r8, #2
   432e2:	f7fe bf80 	b.w	421e6 <__ssvfscanf_r+0x6e>
   432e6:	b084      	sub	sp, #16
   432e8:	aa02      	add	r2, sp, #8
   432ea:	6013      	str	r3, [r2, #0]
   432ec:	9303      	str	r3, [sp, #12]
   432ee:	627a      	str	r2, [r7, #36]	; 0x24
   432f0:	e434      	b.n	42b5c <__ssvfscanf_r+0x9e4>
   432f2:	f110 0f02 	cmn.w	r0, #2
   432f6:	d10e      	bne.n	43316 <__ssvfscanf_r+0x119e>
   432f8:	4635      	mov	r5, r6
   432fa:	f7ff bb0d 	b.w	42918 <__ssvfscanf_r+0x7a0>
   432fe:	2500      	movs	r5, #0
   43300:	f7ff ba1e 	b.w	42740 <__ssvfscanf_r+0x5c8>
   43304:	2500      	movs	r5, #0
   43306:	f7ff bb07 	b.w	42918 <__ssvfscanf_r+0x7a0>
   4330a:	682b      	ldr	r3, [r5, #0]
   4330c:	2b04      	cmp	r3, #4
   4330e:	f47f a9f3 	bne.w	426f8 <__ssvfscanf_r+0x580>
   43312:	f7ff b9f4 	b.w	426fe <__ssvfscanf_r+0x586>
   43316:	6a3b      	ldr	r3, [r7, #32]
   43318:	2803      	cmp	r0, #3
   4331a:	4433      	add	r3, r6
   4331c:	623b      	str	r3, [r7, #32]
   4331e:	f47f aadc 	bne.w	428da <__ssvfscanf_r+0x762>
   43322:	682a      	ldr	r2, [r5, #0]
   43324:	2a04      	cmp	r2, #4
   43326:	f47f aad8 	bne.w	428da <__ssvfscanf_r+0x762>
   4332a:	f7ff bad7 	b.w	428dc <__ssvfscanf_r+0x764>
   4332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43330:	b193      	cbz	r3, 43358 <__ssvfscanf_r+0x11e0>
   43332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43334:	f207 1457 	addw	r4, r7, #343	; 0x157
   43338:	62fe      	str	r6, [r7, #44]	; 0x2c
   4333a:	1e5d      	subs	r5, r3, #1
   4333c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   43340:	441d      	add	r5, r3
   43342:	462e      	mov	r6, r5
   43344:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   43346:	f816 1901 	ldrb.w	r1, [r6], #-1
   4334a:	465a      	mov	r2, fp
   4334c:	4628      	mov	r0, r5
   4334e:	f003 fc27 	bl	46ba0 <_sungetc_r>
   43352:	42b4      	cmp	r4, r6
   43354:	d1f7      	bne.n	43346 <__ssvfscanf_r+0x11ce>
   43356:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   43358:	2e00      	cmp	r6, #0
   4335a:	f47e af2c 	bne.w	421b6 <__ssvfscanf_r+0x3e>
   4335e:	eba8 0109 	sub.w	r1, r8, r9
   43362:	6a3c      	ldr	r4, [r7, #32]
   43364:	f8c8 6000 	str.w	r6, [r8]
   43368:	1089      	asrs	r1, r1, #2
   4336a:	3101      	adds	r1, #1
   4336c:	2c00      	cmp	r4, #0
   4336e:	f43f aaed 	beq.w	4294c <__ssvfscanf_r+0x7d4>
   43372:	69bb      	ldr	r3, [r7, #24]
   43374:	428b      	cmp	r3, r1
   43376:	f67f aae9 	bls.w	4294c <__ssvfscanf_r+0x7d4>
   4337a:	0089      	lsls	r1, r1, #2
   4337c:	6820      	ldr	r0, [r4, #0]
   4337e:	f7fd feb1 	bl	410e4 <realloc>
   43382:	2800      	cmp	r0, #0
   43384:	f43f aae2 	beq.w	4294c <__ssvfscanf_r+0x7d4>
   43388:	6020      	str	r0, [r4, #0]
   4338a:	f7ff badf 	b.w	4294c <__ssvfscanf_r+0x7d4>
   4338e:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   43392:	2201      	movs	r2, #1
   43394:	e480      	b.n	42c98 <__ssvfscanf_r+0xb20>
   43396:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   4339a:	2601      	movs	r6, #1
   4339c:	e47c      	b.n	42c98 <__ssvfscanf_r+0xb20>
   4339e:	2e02      	cmp	r6, #2
   433a0:	f240 8191 	bls.w	436c6 <__ssvfscanf_r+0x154e>
   433a4:	2e03      	cmp	r6, #3
   433a6:	f43f acd7 	beq.w	42d58 <__ssvfscanf_r+0xbe0>
   433aa:	1f34      	subs	r4, r6, #4
   433ac:	4643      	mov	r3, r8
   433ae:	46a8      	mov	r8, r5
   433b0:	464d      	mov	r5, r9
   433b2:	b2e4      	uxtb	r4, r4
   433b4:	43e6      	mvns	r6, r4
   433b6:	62fc      	str	r4, [r7, #44]	; 0x2c
   433b8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   433ba:	444e      	add	r6, r9
   433bc:	4699      	mov	r9, r3
   433be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   433c2:	465a      	mov	r2, fp
   433c4:	4620      	mov	r0, r4
   433c6:	f003 fbeb 	bl	46ba0 <_sungetc_r>
   433ca:	42ae      	cmp	r6, r5
   433cc:	d1f7      	bne.n	433be <__ssvfscanf_r+0x1246>
   433ce:	464b      	mov	r3, r9
   433d0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   433d2:	f10a 3aff 	add.w	sl, sl, #4294967295
   433d6:	46a9      	mov	r9, r5
   433d8:	4645      	mov	r5, r8
   433da:	4698      	mov	r8, r3
   433dc:	ebaa 0a04 	sub.w	sl, sl, r4
   433e0:	e4ba      	b.n	42d58 <__ssvfscanf_r+0xbe0>
   433e2:	f8d7 a018 	ldr.w	sl, [r7, #24]
   433e6:	46a0      	mov	r8, r4
   433e8:	ebb6 0808 	subs.w	r8, r6, r8
   433ec:	f43e af6d 	beq.w	422ca <__ssvfscanf_r+0x152>
   433f0:	2300      	movs	r3, #0
   433f2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   433f4:	f108 0101 	add.w	r1, r8, #1
   433f8:	7033      	strb	r3, [r6, #0]
   433fa:	b114      	cbz	r4, 43402 <__ssvfscanf_r+0x128a>
   433fc:	428d      	cmp	r5, r1
   433fe:	f200 80a4 	bhi.w	4354a <__ssvfscanf_r+0x13d2>
   43402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   43404:	44c2      	add	sl, r8
   43406:	3301      	adds	r3, #1
   43408:	637b      	str	r3, [r7, #52]	; 0x34
   4340a:	f7fe bed4 	b.w	421b6 <__ssvfscanf_r+0x3e>
   4340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   43410:	f015 0502 	ands.w	r5, r5, #2
   43414:	681e      	ldr	r6, [r3, #0]
   43416:	d03c      	beq.n	43492 <__ssvfscanf_r+0x131a>
   43418:	ed86 0b00 	vstr	d0, [r6]
   4341c:	e4d2      	b.n	42dc4 <__ssvfscanf_r+0xc4c>
   4341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43420:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   43424:	b113      	cbz	r3, 4342c <__ssvfscanf_r+0x12b4>
   43426:	3b01      	subs	r3, #1
   43428:	3401      	adds	r4, #1
   4342a:	62fb      	str	r3, [r7, #44]	; 0x2c
   4342c:	f108 0801 	add.w	r8, r8, #1
   43430:	f7ff baa1 	b.w	42976 <__ssvfscanf_r+0x7fe>
   43434:	f8cd b000 	str.w	fp, [sp]
   43438:	4623      	mov	r3, r4
   4343a:	4631      	mov	r1, r6
   4343c:	2201      	movs	r2, #1
   4343e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   43440:	f003 fc0a 	bl	46c58 <_sfread_r>
   43444:	4605      	mov	r5, r0
   43446:	2800      	cmp	r0, #0
   43448:	f43e af36 	beq.w	422b8 <__ssvfscanf_r+0x140>
   4344c:	44aa      	add	sl, r5
   4344e:	e5a0      	b.n	42f92 <__ssvfscanf_r+0xe1a>
   43450:	2e00      	cmp	r6, #0
   43452:	f43e af3a 	beq.w	422ca <__ssvfscanf_r+0x152>
   43456:	44b2      	add	sl, r6
   43458:	f7fe bead 	b.w	421b6 <__ssvfscanf_r+0x3e>
   4345c:	62fd      	str	r5, [r7, #44]	; 0x2c
   4345e:	46a8      	mov	r8, r5
   43460:	623d      	str	r5, [r7, #32]
   43462:	e54b      	b.n	42efc <__ssvfscanf_r+0xd84>
   43464:	f8d7 a020 	ldr.w	sl, [r7, #32]
   43468:	607e      	str	r6, [r7, #4]
   4346a:	697b      	ldr	r3, [r7, #20]
   4346c:	2b00      	cmp	r3, #0
   4346e:	f47e aea2 	bne.w	421b6 <__ssvfscanf_r+0x3e>
   43472:	693a      	ldr	r2, [r7, #16]
   43474:	68bc      	ldr	r4, [r7, #8]
   43476:	eba8 0102 	sub.w	r1, r8, r2
   4347a:	f8c8 3000 	str.w	r3, [r8]
   4347e:	1089      	asrs	r1, r1, #2
   43480:	3101      	adds	r1, #1
   43482:	2c00      	cmp	r4, #0
   43484:	f43f aa62 	beq.w	4294c <__ssvfscanf_r+0x7d4>
   43488:	68fb      	ldr	r3, [r7, #12]
   4348a:	428b      	cmp	r3, r1
   4348c:	f67f aa5e 	bls.w	4294c <__ssvfscanf_r+0x7d4>
   43490:	e773      	b.n	4337a <__ssvfscanf_r+0x1202>
   43492:	ec53 2b10 	vmov	r2, r3, d0
   43496:	ec51 0b10 	vmov	r0, r1, d0
   4349a:	f7d6 fe5d 	bl	1a158 <__aeabi_dcmpun>
   4349e:	2800      	cmp	r0, #0
   434a0:	f040 8105 	bne.w	436ae <__ssvfscanf_r+0x1536>
   434a4:	ec51 0b18 	vmov	r0, r1, d8
   434a8:	f7d6 fe8c 	bl	1a1c4 <__aeabi_d2f>
   434ac:	6030      	str	r0, [r6, #0]
   434ae:	e489      	b.n	42dc4 <__ssvfscanf_r+0xc4c>
   434b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   434b2:	e9c7 3305 	strd	r3, r3, [r7, #20]
   434b6:	613b      	str	r3, [r7, #16]
   434b8:	f7ff b9d2 	b.w	42860 <__ssvfscanf_r+0x6e8>
   434bc:	697b      	ldr	r3, [r7, #20]
   434be:	e9c7 3303 	strd	r3, r3, [r7, #12]
   434c2:	60bb      	str	r3, [r7, #8]
   434c4:	f7ff b8e3 	b.w	4268e <__ssvfscanf_r+0x516>
   434c8:	62fd      	str	r5, [r7, #44]	; 0x2c
   434ca:	e614      	b.n	430f6 <__ssvfscanf_r+0xf7e>
   434cc:	61be      	str	r6, [r7, #24]
   434ce:	46b1      	mov	r9, r6
   434d0:	623e      	str	r6, [r7, #32]
   434d2:	f7ff b82b 	b.w	4252c <__ssvfscanf_r+0x3b4>
   434d6:	076a      	lsls	r2, r5, #29
   434d8:	d448      	bmi.n	4356c <__ssvfscanf_r+0x13f4>
   434da:	07ee      	lsls	r6, r5, #31
   434dc:	f100 80a6 	bmi.w	4362c <__ssvfscanf_r+0x14b4>
   434e0:	07ac      	lsls	r4, r5, #30
   434e2:	f140 80a3 	bpl.w	4362c <__ssvfscanf_r+0x14b4>
   434e6:	4650      	mov	r0, sl
   434e8:	17c1      	asrs	r1, r0, #31
   434ea:	e9c3 0100 	strd	r0, r1, [r3]
   434ee:	f7fe be62 	b.w	421b6 <__ssvfscanf_r+0x3e>
   434f2:	687b      	ldr	r3, [r7, #4]
   434f4:	3302      	adds	r3, #2
   434f6:	f040 80fc 	bne.w	436f2 <__ssvfscanf_r+0x157a>
   434fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   434fe:	2b00      	cmp	r3, #0
   43500:	f77e aecf 	ble.w	422a2 <__ssvfscanf_r+0x12a>
   43504:	6afd      	ldr	r5, [r7, #44]	; 0x2c
   43506:	f7ff b812 	b.w	4252e <__ssvfscanf_r+0x3b6>
   4350a:	68bc      	ldr	r4, [r7, #8]
   4350c:	230a      	movs	r3, #10
   4350e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   43510:	4621      	mov	r1, r4
   43512:	46a1      	mov	r9, r4
   43514:	3101      	adds	r1, #1
   43516:	f7fe fd43 	bl	41fa0 <_strtol_r>
   4351a:	68fb      	ldr	r3, [r7, #12]
   4351c:	1ac2      	subs	r2, r0, r3
   4351e:	e6bc      	b.n	4329a <__ssvfscanf_r+0x1122>
   43520:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   43524:	4293      	cmp	r3, r2
   43526:	f200 80c9 	bhi.w	436bc <__ssvfscanf_r+0x1544>
   4352a:	3308      	adds	r3, #8
   4352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   4352e:	0099      	lsls	r1, r3, #2
   43530:	6810      	ldr	r0, [r2, #0]
   43532:	62fb      	str	r3, [r7, #44]	; 0x2c
   43534:	f7fd fdd6 	bl	410e4 <realloc>
   43538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4353a:	2800      	cmp	r0, #0
   4353c:	f000 80d7 	beq.w	436ee <__ssvfscanf_r+0x1576>
   43540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   43542:	6010      	str	r0, [r2, #0]
   43544:	8093      	strh	r3, [r2, #4]
   43546:	f7fe bfe7 	b.w	42518 <__ssvfscanf_r+0x3a0>
   4354a:	6820      	ldr	r0, [r4, #0]
   4354c:	f7fd fdca 	bl	410e4 <realloc>
   43550:	2800      	cmp	r0, #0
   43552:	f43f af56 	beq.w	43402 <__ssvfscanf_r+0x128a>
   43556:	6020      	str	r0, [r4, #0]
   43558:	e753      	b.n	43402 <__ssvfscanf_r+0x128a>
   4355a:	6820      	ldr	r0, [r4, #0]
   4355c:	f7fd fdc2 	bl	410e4 <realloc>
   43560:	2800      	cmp	r0, #0
   43562:	f43f a9ef 	beq.w	42944 <__ssvfscanf_r+0x7cc>
   43566:	6020      	str	r0, [r4, #0]
   43568:	f7ff b9ec 	b.w	42944 <__ssvfscanf_r+0x7cc>
   4356c:	f8a3 a000 	strh.w	sl, [r3]
   43570:	f7fe be21 	b.w	421b6 <__ssvfscanf_r+0x3e>
   43574:	07a9      	lsls	r1, r5, #30
   43576:	f57f ac79 	bpl.w	42e6c <__ssvfscanf_r+0xcf4>
   4357a:	69fb      	ldr	r3, [r7, #28]
   4357c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   4357e:	4619      	mov	r1, r3
   43580:	4b07      	ldr	r3, [pc, #28]	; (435a0 <__ssvfscanf_r+0x1428>)
   43582:	4299      	cmp	r1, r3
   43584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   43586:	6a39      	ldr	r1, [r7, #32]
   43588:	f000 809a 	beq.w	436c0 <__ssvfscanf_r+0x1548>
   4358c:	f003 f990 	bl	468b0 <_strtoll_r>
   43590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   43592:	681b      	ldr	r3, [r3, #0]
   43594:	e9c3 0100 	strd	r0, r1, [r3]
   43598:	e46b      	b.n	42e72 <__ssvfscanf_r+0xcfa>
   4359a:	bf00      	nop
   4359c:	0004c670 	.word	0x0004c670
   435a0:	00042129 	.word	0x00042129
   435a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   435a6:	2b00      	cmp	r3, #0
   435a8:	d04d      	beq.n	43646 <__ssvfscanf_r+0x14ce>
   435aa:	f8d3 8000 	ldr.w	r8, [r3]
   435ae:	88de      	ldrh	r6, [r3, #6]
   435b0:	b166      	cbz	r6, 435cc <__ssvfscanf_r+0x1454>
   435b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   435b6:	4644      	mov	r4, r8
   435b8:	2500      	movs	r5, #0
   435ba:	6823      	ldr	r3, [r4, #0]
   435bc:	6818      	ldr	r0, [r3, #0]
   435be:	f7fd f9e9 	bl	40994 <free>
   435c2:	f854 3b04 	ldr.w	r3, [r4], #4
   435c6:	42b4      	cmp	r4, r6
   435c8:	601d      	str	r5, [r3, #0]
   435ca:	d1f6      	bne.n	435ba <__ssvfscanf_r+0x1442>
   435cc:	f04f 33ff 	mov.w	r3, #4294967295
   435d0:	637b      	str	r3, [r7, #52]	; 0x34
   435d2:	f1b8 0f00 	cmp.w	r8, #0
   435d6:	f47e ae7f 	bne.w	422d8 <__ssvfscanf_r+0x160>
   435da:	f7fe be80 	b.w	422de <__ssvfscanf_r+0x166>
   435de:	2d00      	cmp	r5, #0
   435e0:	f43e ae6a 	beq.w	422b8 <__ssvfscanf_r+0x140>
   435e4:	44aa      	add	sl, r5
   435e6:	f7fe bde6 	b.w	421b6 <__ssvfscanf_r+0x3e>
   435ea:	2300      	movs	r3, #0
   435ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   435ee:	e784      	b.n	434fa <__ssvfscanf_r+0x1382>
   435f0:	607e      	str	r6, [r7, #4]
   435f2:	464e      	mov	r6, r9
   435f4:	f8d7 a020 	ldr.w	sl, [r7, #32]
   435f8:	2e00      	cmp	r6, #0
   435fa:	f43f af36 	beq.w	4346a <__ssvfscanf_r+0x12f2>
   435fe:	f109 36ff 	add.w	r6, r9, #4294967295
   43602:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   43606:	f207 1457 	addw	r4, r7, #343	; 0x157
   4360a:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   4360c:	441e      	add	r6, r3
   4360e:	f816 1901 	ldrb.w	r1, [r6], #-1
   43612:	465a      	mov	r2, fp
   43614:	4628      	mov	r0, r5
   43616:	f003 fac3 	bl	46ba0 <_sungetc_r>
   4361a:	42b4      	cmp	r4, r6
   4361c:	d1f7      	bne.n	4360e <__ssvfscanf_r+0x1496>
   4361e:	e724      	b.n	4346a <__ssvfscanf_r+0x12f2>
   43620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   43622:	b183      	cbz	r3, 43646 <__ssvfscanf_r+0x14ce>
   43624:	f8d3 8000 	ldr.w	r8, [r3]
   43628:	88de      	ldrh	r6, [r3, #6]
   4362a:	e7c1      	b.n	435b0 <__ssvfscanf_r+0x1438>
   4362c:	f8c3 a000 	str.w	sl, [r3]
   43630:	f7fe bdc1 	b.w	421b6 <__ssvfscanf_r+0x3e>
   43634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   43636:	b133      	cbz	r3, 43646 <__ssvfscanf_r+0x14ce>
   43638:	88db      	ldrh	r3, [r3, #6]
   4363a:	461a      	mov	r2, r3
   4363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4363e:	4616      	mov	r6, r2
   43640:	f8d3 8000 	ldr.w	r8, [r3]
   43644:	e7b4      	b.n	435b0 <__ssvfscanf_r+0x1438>
   43646:	f04f 33ff 	mov.w	r3, #4294967295
   4364a:	637b      	str	r3, [r7, #52]	; 0x34
   4364c:	f7fe be47 	b.w	422de <__ssvfscanf_r+0x166>
   43650:	6a3d      	ldr	r5, [r7, #32]
   43652:	45a9      	cmp	r9, r5
   43654:	f67e ae39 	bls.w	422ca <__ssvfscanf_r+0x152>
   43658:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   4365a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   4365e:	465a      	mov	r2, fp
   43660:	4620      	mov	r0, r4
   43662:	f003 fa9d 	bl	46ba0 <_sungetc_r>
   43666:	45a9      	cmp	r9, r5
   43668:	d1f7      	bne.n	4365a <__ssvfscanf_r+0x14e2>
   4366a:	f7fe be2e 	b.w	422ca <__ssvfscanf_r+0x152>
   4366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   43670:	2b00      	cmp	r3, #0
   43672:	d0e8      	beq.n	43646 <__ssvfscanf_r+0x14ce>
   43674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   43676:	f8d3 8000 	ldr.w	r8, [r3]
   4367a:	88de      	ldrh	r6, [r3, #6]
   4367c:	e798      	b.n	435b0 <__ssvfscanf_r+0x1438>
   4367e:	462e      	mov	r6, r5
   43680:	e796      	b.n	435b0 <__ssvfscanf_r+0x1438>
   43682:	6a3d      	ldr	r5, [r7, #32]
   43684:	45a9      	cmp	r9, r5
   43686:	f67e ae20 	bls.w	422ca <__ssvfscanf_r+0x152>
   4368a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   4368c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   43690:	465a      	mov	r2, fp
   43692:	4620      	mov	r0, r4
   43694:	f003 fa84 	bl	46ba0 <_sungetc_r>
   43698:	45a9      	cmp	r9, r5
   4369a:	d1f7      	bne.n	4368c <__ssvfscanf_r+0x1514>
   4369c:	f7fe be15 	b.w	422ca <__ssvfscanf_r+0x152>
   436a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   436a2:	2b00      	cmp	r3, #0
   436a4:	f43e ae1b 	beq.w	422de <__ssvfscanf_r+0x166>
   436a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   436aa:	f7fe be10 	b.w	422ce <__ssvfscanf_r+0x156>
   436ae:	4628      	mov	r0, r5
   436b0:	f002 ffc8 	bl	46644 <nanf>
   436b4:	ed86 0a00 	vstr	s0, [r6]
   436b8:	f7ff bb84 	b.w	42dc4 <__ssvfscanf_r+0xc4c>
   436bc:	462a      	mov	r2, r5
   436be:	e7bd      	b.n	4363c <__ssvfscanf_r+0x14c4>
   436c0:	f003 f9d6 	bl	46a70 <_strtoull_r>
   436c4:	e764      	b.n	43590 <__ssvfscanf_r+0x1418>
   436c6:	6a3b      	ldr	r3, [r7, #32]
   436c8:	4599      	cmp	r9, r3
   436ca:	f67e adfe 	bls.w	422ca <__ssvfscanf_r+0x152>
   436ce:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   436d2:	465a      	mov	r2, fp
   436d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   436d6:	f003 fa63 	bl	46ba0 <_sungetc_r>
   436da:	6a3b      	ldr	r3, [r7, #32]
   436dc:	4599      	cmp	r9, r3
   436de:	d1f6      	bne.n	436ce <__ssvfscanf_r+0x1556>
   436e0:	f7fe bdf3 	b.w	422ca <__ssvfscanf_r+0x152>
   436e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   436e6:	2b00      	cmp	r3, #0
   436e8:	f47e adea 	bne.w	422c0 <__ssvfscanf_r+0x148>
   436ec:	e7c2      	b.n	43674 <__ssvfscanf_r+0x14fc>
   436ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   436f0:	e7a2      	b.n	43638 <__ssvfscanf_r+0x14c0>
   436f2:	f8d8 0000 	ldr.w	r0, [r8]
   436f6:	f002 f96f 	bl	459d8 <iswspace>
   436fa:	2800      	cmp	r0, #0
   436fc:	f47f ae17 	bne.w	4332e <__ssvfscanf_r+0x11b6>
   43700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43702:	449a      	add	sl, r3
   43704:	687b      	ldr	r3, [r7, #4]
   43706:	2b03      	cmp	r3, #3
   43708:	f47e af56 	bne.w	425b8 <__ssvfscanf_r+0x440>
   4370c:	682b      	ldr	r3, [r5, #0]
   4370e:	2b04      	cmp	r3, #4
   43710:	f47e af52 	bne.w	425b8 <__ssvfscanf_r+0x440>
   43714:	f7fe bf51 	b.w	425ba <__ssvfscanf_r+0x442>
   43718:	f8d8 a000 	ldr.w	sl, [r8]
   4371c:	f1ba 3fff 	cmp.w	sl, #4294967295
   43720:	f43e afdd 	beq.w	426de <__ssvfscanf_r+0x566>
   43724:	f7fe bfbc 	b.w	426a0 <__ssvfscanf_r+0x528>

00043728 <__sprint_r.part.0>:
   43728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4372c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   4372e:	4692      	mov	sl, r2
   43730:	049c      	lsls	r4, r3, #18
   43732:	d52c      	bpl.n	4378e <__sprint_r.part.0+0x66>
   43734:	6893      	ldr	r3, [r2, #8]
   43736:	6812      	ldr	r2, [r2, #0]
   43738:	b33b      	cbz	r3, 4378a <__sprint_r.part.0+0x62>
   4373a:	460e      	mov	r6, r1
   4373c:	4607      	mov	r7, r0
   4373e:	f102 0908 	add.w	r9, r2, #8
   43742:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
   43746:	ea5f 089b 	movs.w	r8, fp, lsr #2
   4374a:	d014      	beq.n	43776 <__sprint_r.part.0+0x4e>
   4374c:	3d04      	subs	r5, #4
   4374e:	2400      	movs	r4, #0
   43750:	e001      	b.n	43756 <__sprint_r.part.0+0x2e>
   43752:	45a0      	cmp	r8, r4
   43754:	d00d      	beq.n	43772 <__sprint_r.part.0+0x4a>
   43756:	4632      	mov	r2, r6
   43758:	f855 1f04 	ldr.w	r1, [r5, #4]!
   4375c:	4638      	mov	r0, r7
   4375e:	3401      	adds	r4, #1
   43760:	f001 fa50 	bl	44c04 <_fputwc_r>
   43764:	1c43      	adds	r3, r0, #1
   43766:	d1f4      	bne.n	43752 <__sprint_r.part.0+0x2a>
   43768:	2300      	movs	r3, #0
   4376a:	e9ca 3301 	strd	r3, r3, [sl, #4]
   4376e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43772:	f8da 3008 	ldr.w	r3, [sl, #8]
   43776:	f02b 0b03 	bic.w	fp, fp, #3
   4377a:	f109 0908 	add.w	r9, r9, #8
   4377e:	eba3 030b 	sub.w	r3, r3, fp
   43782:	f8ca 3008 	str.w	r3, [sl, #8]
   43786:	2b00      	cmp	r3, #0
   43788:	d1db      	bne.n	43742 <__sprint_r.part.0+0x1a>
   4378a:	2000      	movs	r0, #0
   4378c:	e7ec      	b.n	43768 <__sprint_r.part.0+0x40>
   4378e:	f001 fbad 	bl	44eec <__sfvwrite_r>
   43792:	2300      	movs	r3, #0
   43794:	e9ca 3301 	strd	r3, r3, [sl, #4]
   43798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004379c <_vfiprintf_r>:
   4379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   437a0:	b0bf      	sub	sp, #252	; 0xfc
   437a2:	461c      	mov	r4, r3
   437a4:	4692      	mov	sl, r2
   437a6:	9102      	str	r1, [sp, #8]
   437a8:	e9cd 0305 	strd	r0, r3, [sp, #20]
   437ac:	b118      	cbz	r0, 437b6 <_vfiprintf_r+0x1a>
   437ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   437b0:	2b00      	cmp	r3, #0
   437b2:	f000 83f0 	beq.w	43f96 <_vfiprintf_r+0x7fa>
   437b6:	9b02      	ldr	r3, [sp, #8]
   437b8:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   437bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   437be:	b28a      	uxth	r2, r1
   437c0:	07df      	lsls	r7, r3, #31
   437c2:	d402      	bmi.n	437ca <_vfiprintf_r+0x2e>
   437c4:	0596      	lsls	r6, r2, #22
   437c6:	f140 8540 	bpl.w	4424a <_vfiprintf_r+0xaae>
   437ca:	0495      	lsls	r5, r2, #18
   437cc:	d408      	bmi.n	437e0 <_vfiprintf_r+0x44>
   437ce:	9802      	ldr	r0, [sp, #8]
   437d0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   437d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   437d6:	b28a      	uxth	r2, r1
   437d8:	8181      	strh	r1, [r0, #12]
   437da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   437de:	6643      	str	r3, [r0, #100]	; 0x64
   437e0:	0710      	lsls	r0, r2, #28
   437e2:	f140 80d5 	bpl.w	43990 <_vfiprintf_r+0x1f4>
   437e6:	9b02      	ldr	r3, [sp, #8]
   437e8:	691b      	ldr	r3, [r3, #16]
   437ea:	2b00      	cmp	r3, #0
   437ec:	f000 80d0 	beq.w	43990 <_vfiprintf_r+0x1f4>
   437f0:	f002 031a 	and.w	r3, r2, #26
   437f4:	2b0a      	cmp	r3, #10
   437f6:	f000 83b5 	beq.w	43f64 <_vfiprintf_r+0x7c8>
   437fa:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
   437fe:	2300      	movs	r3, #0
   43800:	46d9      	mov	r9, fp
   43802:	930b      	str	r3, [sp, #44]	; 0x2c
   43804:	9314      	str	r3, [sp, #80]	; 0x50
   43806:	930c      	str	r3, [sp, #48]	; 0x30
   43808:	9304      	str	r3, [sp, #16]
   4380a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   4380e:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
   43812:	f89a 3000 	ldrb.w	r3, [sl]
   43816:	4654      	mov	r4, sl
   43818:	2b25      	cmp	r3, #37	; 0x25
   4381a:	d01c      	beq.n	43856 <_vfiprintf_r+0xba>
   4381c:	b913      	cbnz	r3, 43824 <_vfiprintf_r+0x88>
   4381e:	e01a      	b.n	43856 <_vfiprintf_r+0xba>
   43820:	2b25      	cmp	r3, #37	; 0x25
   43822:	d003      	beq.n	4382c <_vfiprintf_r+0x90>
   43824:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   43828:	2b00      	cmp	r3, #0
   4382a:	d1f9      	bne.n	43820 <_vfiprintf_r+0x84>
   4382c:	ebb4 050a 	subs.w	r5, r4, sl
   43830:	d011      	beq.n	43856 <_vfiprintf_r+0xba>
   43832:	f8c9 a000 	str.w	sl, [r9]
   43836:	f8c9 5004 	str.w	r5, [r9, #4]
   4383a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   4383e:	3301      	adds	r3, #1
   43840:	442a      	add	r2, r5
   43842:	2b07      	cmp	r3, #7
   43844:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   43848:	f300 80b9 	bgt.w	439be <_vfiprintf_r+0x222>
   4384c:	f109 0908 	add.w	r9, r9, #8
   43850:	9b04      	ldr	r3, [sp, #16]
   43852:	442b      	add	r3, r5
   43854:	9304      	str	r3, [sp, #16]
   43856:	7823      	ldrb	r3, [r4, #0]
   43858:	2b00      	cmp	r3, #0
   4385a:	f000 8478 	beq.w	4414e <_vfiprintf_r+0x9b2>
   4385e:	f04f 0300 	mov.w	r3, #0
   43862:	2700      	movs	r7, #0
   43864:	f104 0a01 	add.w	sl, r4, #1
   43868:	f04f 38ff 	mov.w	r8, #4294967295
   4386c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   43870:	463e      	mov	r6, r7
   43872:	7863      	ldrb	r3, [r4, #1]
   43874:	252b      	movs	r5, #43	; 0x2b
   43876:	f10a 0a01 	add.w	sl, sl, #1
   4387a:	f1a3 0220 	sub.w	r2, r3, #32
   4387e:	2a5a      	cmp	r2, #90	; 0x5a
   43880:	f200 838c 	bhi.w	43f9c <_vfiprintf_r+0x800>
   43884:	e8df f012 	tbh	[pc, r2, lsl #1]
   43888:	038a0320 	.word	0x038a0320
   4388c:	031b038a 	.word	0x031b038a
   43890:	038a038a 	.word	0x038a038a
   43894:	032b038a 	.word	0x032b038a
   43898:	038a038a 	.word	0x038a038a
   4389c:	02fc0249 	.word	0x02fc0249
   438a0:	02f7038a 	.word	0x02f7038a
   438a4:	038a02dd 	.word	0x038a02dd
   438a8:	010502d8 	.word	0x010502d8
   438ac:	01050105 	.word	0x01050105
   438b0:	01050105 	.word	0x01050105
   438b4:	01050105 	.word	0x01050105
   438b8:	01050105 	.word	0x01050105
   438bc:	038a038a 	.word	0x038a038a
   438c0:	038a038a 	.word	0x038a038a
   438c4:	038a038a 	.word	0x038a038a
   438c8:	038a038a 	.word	0x038a038a
   438cc:	0125038a 	.word	0x0125038a
   438d0:	038a0301 	.word	0x038a0301
   438d4:	038a038a 	.word	0x038a038a
   438d8:	038a038a 	.word	0x038a038a
   438dc:	038a038a 	.word	0x038a038a
   438e0:	038a038a 	.word	0x038a038a
   438e4:	0071038a 	.word	0x0071038a
   438e8:	038a038a 	.word	0x038a038a
   438ec:	02ba038a 	.word	0x02ba038a
   438f0:	0060038a 	.word	0x0060038a
   438f4:	038a038a 	.word	0x038a038a
   438f8:	038a0113 	.word	0x038a0113
   438fc:	038a038a 	.word	0x038a038a
   43900:	038a038a 	.word	0x038a038a
   43904:	038a038a 	.word	0x038a038a
   43908:	038a038a 	.word	0x038a038a
   4390c:	0125038a 	.word	0x0125038a
   43910:	038a00bf 	.word	0x038a00bf
   43914:	038a038a 	.word	0x038a038a
   43918:	00bf02b2 	.word	0x00bf02b2
   4391c:	038a005b 	.word	0x038a005b
   43920:	038a02aa 	.word	0x038a02aa
   43924:	00730297 	.word	0x00730297
   43928:	005b0253 	.word	0x005b0253
   4392c:	02ba038a 	.word	0x02ba038a
   43930:	0062005d 	.word	0x0062005d
   43934:	038a038a 	.word	0x038a038a
   43938:	038a00a1 	.word	0x038a00a1
   4393c:	005d      	.short	0x005d
   4393e:	f046 0620 	orr.w	r6, r6, #32
   43942:	f89a 3000 	ldrb.w	r3, [sl]
   43946:	e796      	b.n	43876 <_vfiprintf_r+0xda>
   43948:	f046 0610 	orr.w	r6, r6, #16
   4394c:	06b5      	lsls	r5, r6, #26
   4394e:	f140 82f9 	bpl.w	43f44 <_vfiprintf_r+0x7a8>
   43952:	9c06      	ldr	r4, [sp, #24]
   43954:	2301      	movs	r3, #1
   43956:	9601      	str	r6, [sp, #4]
   43958:	3407      	adds	r4, #7
   4395a:	f024 0207 	bic.w	r2, r4, #7
   4395e:	f102 0108 	add.w	r1, r2, #8
   43962:	e9d2 4500 	ldrd	r4, r5, [r2]
   43966:	9106      	str	r1, [sp, #24]
   43968:	e1f1      	b.n	43d4e <_vfiprintf_r+0x5b2>
   4396a:	f046 0610 	orr.w	r6, r6, #16
   4396e:	06b5      	lsls	r5, r6, #26
   43970:	f140 82da 	bpl.w	43f28 <_vfiprintf_r+0x78c>
   43974:	9c06      	ldr	r4, [sp, #24]
   43976:	3407      	adds	r4, #7
   43978:	f024 0307 	bic.w	r3, r4, #7
   4397c:	f103 0208 	add.w	r2, r3, #8
   43980:	e9d3 4500 	ldrd	r4, r5, [r3]
   43984:	9206      	str	r2, [sp, #24]
   43986:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   4398a:	9301      	str	r3, [sp, #4]
   4398c:	2300      	movs	r3, #0
   4398e:	e1de      	b.n	43d4e <_vfiprintf_r+0x5b2>
   43990:	9d02      	ldr	r5, [sp, #8]
   43992:	9805      	ldr	r0, [sp, #20]
   43994:	4629      	mov	r1, r5
   43996:	f000 fe6b 	bl	44670 <__swsetup_r>
   4399a:	2800      	cmp	r0, #0
   4399c:	f000 82bd 	beq.w	43f1a <_vfiprintf_r+0x77e>
   439a0:	9a02      	ldr	r2, [sp, #8]
   439a2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   439a4:	07d9      	lsls	r1, r3, #31
   439a6:	d403      	bmi.n	439b0 <_vfiprintf_r+0x214>
   439a8:	8993      	ldrh	r3, [r2, #12]
   439aa:	059b      	lsls	r3, r3, #22
   439ac:	f140 84fb 	bpl.w	443a6 <_vfiprintf_r+0xc0a>
   439b0:	f04f 33ff 	mov.w	r3, #4294967295
   439b4:	9304      	str	r3, [sp, #16]
   439b6:	9804      	ldr	r0, [sp, #16]
   439b8:	b03f      	add	sp, #252	; 0xfc
   439ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   439be:	2a00      	cmp	r2, #0
   439c0:	f040 8414 	bne.w	441ec <_vfiprintf_r+0xa50>
   439c4:	9213      	str	r2, [sp, #76]	; 0x4c
   439c6:	46d9      	mov	r9, fp
   439c8:	e742      	b.n	43850 <_vfiprintf_r+0xb4>
   439ca:	4ab3      	ldr	r2, [pc, #716]	; (43c98 <_vfiprintf_r+0x4fc>)
   439cc:	920b      	str	r2, [sp, #44]	; 0x2c
   439ce:	06b2      	lsls	r2, r6, #26
   439d0:	d571      	bpl.n	43ab6 <_vfiprintf_r+0x31a>
   439d2:	9c06      	ldr	r4, [sp, #24]
   439d4:	3407      	adds	r4, #7
   439d6:	f024 0207 	bic.w	r2, r4, #7
   439da:	f102 0108 	add.w	r1, r2, #8
   439de:	e9d2 4500 	ldrd	r4, r5, [r2]
   439e2:	9106      	str	r1, [sp, #24]
   439e4:	ea54 0205 	orrs.w	r2, r4, r5
   439e8:	d008      	beq.n	439fc <_vfiprintf_r+0x260>
   439ea:	07f2      	lsls	r2, r6, #31
   439ec:	d506      	bpl.n	439fc <_vfiprintf_r+0x260>
   439ee:	2230      	movs	r2, #48	; 0x30
   439f0:	f046 0602 	orr.w	r6, r6, #2
   439f4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   439f8:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   439fc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   43a00:	9301      	str	r3, [sp, #4]
   43a02:	2302      	movs	r3, #2
   43a04:	e1a3      	b.n	43d4e <_vfiprintf_r+0x5b2>
   43a06:	9601      	str	r6, [sp, #4]
   43a08:	9b01      	ldr	r3, [sp, #4]
   43a0a:	069d      	lsls	r5, r3, #26
   43a0c:	f140 8244 	bpl.w	43e98 <_vfiprintf_r+0x6fc>
   43a10:	9c06      	ldr	r4, [sp, #24]
   43a12:	3407      	adds	r4, #7
   43a14:	f024 0407 	bic.w	r4, r4, #7
   43a18:	e9d4 2300 	ldrd	r2, r3, [r4]
   43a1c:	f104 0108 	add.w	r1, r4, #8
   43a20:	461d      	mov	r5, r3
   43a22:	4614      	mov	r4, r2
   43a24:	9106      	str	r1, [sp, #24]
   43a26:	2a00      	cmp	r2, #0
   43a28:	f173 0300 	sbcs.w	r3, r3, #0
   43a2c:	da06      	bge.n	43a3c <_vfiprintf_r+0x2a0>
   43a2e:	4264      	negs	r4, r4
   43a30:	f04f 032d 	mov.w	r3, #45	; 0x2d
   43a34:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   43a38:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   43a3c:	ab3e      	add	r3, sp, #248	; 0xf8
   43a3e:	f1b8 3fff 	cmp.w	r8, #4294967295
   43a42:	9303      	str	r3, [sp, #12]
   43a44:	f000 83c5 	beq.w	441d2 <_vfiprintf_r+0xa36>
   43a48:	9a01      	ldr	r2, [sp, #4]
   43a4a:	2301      	movs	r3, #1
   43a4c:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   43a50:	ea54 0205 	orrs.w	r2, r4, r5
   43a54:	f000 818c 	beq.w	43d70 <_vfiprintf_r+0x5d4>
   43a58:	9601      	str	r6, [sp, #4]
   43a5a:	2b01      	cmp	r3, #1
   43a5c:	f000 83b9 	beq.w	441d2 <_vfiprintf_r+0xa36>
   43a60:	2b02      	cmp	r3, #2
   43a62:	f040 8389 	bne.w	44178 <_vfiprintf_r+0x9dc>
   43a66:	aa3e      	add	r2, sp, #248	; 0xf8
   43a68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   43a6a:	0923      	lsrs	r3, r4, #4
   43a6c:	f004 000f 	and.w	r0, r4, #15
   43a70:	0929      	lsrs	r1, r5, #4
   43a72:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   43a76:	460d      	mov	r5, r1
   43a78:	461c      	mov	r4, r3
   43a7a:	5c33      	ldrb	r3, [r6, r0]
   43a7c:	f802 3d01 	strb.w	r3, [r2, #-1]!
   43a80:	ea54 0305 	orrs.w	r3, r4, r5
   43a84:	d1f1      	bne.n	43a6a <_vfiprintf_r+0x2ce>
   43a86:	9b03      	ldr	r3, [sp, #12]
   43a88:	9209      	str	r2, [sp, #36]	; 0x24
   43a8a:	1a9b      	subs	r3, r3, r2
   43a8c:	9e01      	ldr	r6, [sp, #4]
   43a8e:	9303      	str	r3, [sp, #12]
   43a90:	e184      	b.n	43d9c <_vfiprintf_r+0x600>
   43a92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   43a96:	2700      	movs	r7, #0
   43a98:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   43a9c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   43aa0:	eb02 0747 	add.w	r7, r2, r7, lsl #1
   43aa4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   43aa8:	2a09      	cmp	r2, #9
   43aaa:	d9f5      	bls.n	43a98 <_vfiprintf_r+0x2fc>
   43aac:	e6e5      	b.n	4387a <_vfiprintf_r+0xde>
   43aae:	4a7b      	ldr	r2, [pc, #492]	; (43c9c <_vfiprintf_r+0x500>)
   43ab0:	920b      	str	r2, [sp, #44]	; 0x2c
   43ab2:	06b2      	lsls	r2, r6, #26
   43ab4:	d48d      	bmi.n	439d2 <_vfiprintf_r+0x236>
   43ab6:	9906      	ldr	r1, [sp, #24]
   43ab8:	06f5      	lsls	r5, r6, #27
   43aba:	f101 0204 	add.w	r2, r1, #4
   43abe:	f100 83d0 	bmi.w	44262 <_vfiprintf_r+0xac6>
   43ac2:	0674      	lsls	r4, r6, #25
   43ac4:	9906      	ldr	r1, [sp, #24]
   43ac6:	f140 83c9 	bpl.w	4425c <_vfiprintf_r+0xac0>
   43aca:	880c      	ldrh	r4, [r1, #0]
   43acc:	2500      	movs	r5, #0
   43ace:	9206      	str	r2, [sp, #24]
   43ad0:	e788      	b.n	439e4 <_vfiprintf_r+0x248>
   43ad2:	9a06      	ldr	r2, [sp, #24]
   43ad4:	2101      	movs	r1, #1
   43ad6:	f04f 0000 	mov.w	r0, #0
   43ada:	6813      	ldr	r3, [r2, #0]
   43adc:	3204      	adds	r2, #4
   43ade:	9101      	str	r1, [sp, #4]
   43ae0:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   43ae4:	ab25      	add	r3, sp, #148	; 0x94
   43ae6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   43aea:	9206      	str	r2, [sp, #24]
   43aec:	9103      	str	r1, [sp, #12]
   43aee:	9309      	str	r3, [sp, #36]	; 0x24
   43af0:	f04f 0800 	mov.w	r8, #0
   43af4:	f016 0302 	ands.w	r3, r6, #2
   43af8:	9308      	str	r3, [sp, #32]
   43afa:	d002      	beq.n	43b02 <_vfiprintf_r+0x366>
   43afc:	9b01      	ldr	r3, [sp, #4]
   43afe:	3302      	adds	r3, #2
   43b00:	9301      	str	r3, [sp, #4]
   43b02:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   43b06:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   43b0a:	9307      	str	r3, [sp, #28]
   43b0c:	f101 0c01 	add.w	ip, r1, #1
   43b10:	4660      	mov	r0, ip
   43b12:	d141      	bne.n	43b98 <_vfiprintf_r+0x3fc>
   43b14:	9b01      	ldr	r3, [sp, #4]
   43b16:	1afc      	subs	r4, r7, r3
   43b18:	2c00      	cmp	r4, #0
   43b1a:	dd3d      	ble.n	43b98 <_vfiprintf_r+0x3fc>
   43b1c:	2c10      	cmp	r4, #16
   43b1e:	f340 8481 	ble.w	44424 <_vfiprintf_r+0xc88>
   43b22:	4d5f      	ldr	r5, [pc, #380]	; (43ca0 <_vfiprintf_r+0x504>)
   43b24:	2310      	movs	r3, #16
   43b26:	e007      	b.n	43b38 <_vfiprintf_r+0x39c>
   43b28:	4611      	mov	r1, r2
   43b2a:	f04f 0e01 	mov.w	lr, #1
   43b2e:	46d9      	mov	r9, fp
   43b30:	3c10      	subs	r4, #16
   43b32:	1c48      	adds	r0, r1, #1
   43b34:	2c10      	cmp	r4, #16
   43b36:	dd21      	ble.n	43b7c <_vfiprintf_r+0x3e0>
   43b38:	3210      	adds	r2, #16
   43b3a:	2807      	cmp	r0, #7
   43b3c:	f101 0e02 	add.w	lr, r1, #2
   43b40:	9013      	str	r0, [sp, #76]	; 0x4c
   43b42:	9214      	str	r2, [sp, #80]	; 0x50
   43b44:	4601      	mov	r1, r0
   43b46:	e9c9 5300 	strd	r5, r3, [r9]
   43b4a:	f109 0908 	add.w	r9, r9, #8
   43b4e:	ddef      	ble.n	43b30 <_vfiprintf_r+0x394>
   43b50:	2a00      	cmp	r2, #0
   43b52:	d0e9      	beq.n	43b28 <_vfiprintf_r+0x38c>
   43b54:	aa12      	add	r2, sp, #72	; 0x48
   43b56:	9902      	ldr	r1, [sp, #8]
   43b58:	9805      	ldr	r0, [sp, #20]
   43b5a:	46d9      	mov	r9, fp
   43b5c:	930a      	str	r3, [sp, #40]	; 0x28
   43b5e:	f7ff fde3 	bl	43728 <__sprint_r.part.0>
   43b62:	2800      	cmp	r0, #0
   43b64:	f040 82f9 	bne.w	4415a <_vfiprintf_r+0x9be>
   43b68:	3c10      	subs	r4, #16
   43b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   43b6c:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   43b70:	2c10      	cmp	r4, #16
   43b72:	f101 0e01 	add.w	lr, r1, #1
   43b76:	f101 0001 	add.w	r0, r1, #1
   43b7a:	dcdd      	bgt.n	43b38 <_vfiprintf_r+0x39c>
   43b7c:	4422      	add	r2, r4
   43b7e:	f1be 0f07 	cmp.w	lr, #7
   43b82:	e9c9 5400 	strd	r5, r4, [r9]
   43b86:	e9cd e213 	strd	lr, r2, [sp, #76]	; 0x4c
   43b8a:	f300 82ab 	bgt.w	440e4 <_vfiprintf_r+0x948>
   43b8e:	f109 0908 	add.w	r9, r9, #8
   43b92:	f10e 0001 	add.w	r0, lr, #1
   43b96:	4671      	mov	r1, lr
   43b98:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   43b9c:	f109 0c08 	add.w	ip, r9, #8
   43ba0:	2c00      	cmp	r4, #0
   43ba2:	f000 8218 	beq.w	43fd6 <_vfiprintf_r+0x83a>
   43ba6:	3201      	adds	r2, #1
   43ba8:	f10d 0443 	add.w	r4, sp, #67	; 0x43
   43bac:	2101      	movs	r1, #1
   43bae:	2807      	cmp	r0, #7
   43bb0:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   43bb4:	e9c9 4100 	strd	r4, r1, [r9]
   43bb8:	f340 82a4 	ble.w	44104 <_vfiprintf_r+0x968>
   43bbc:	2a00      	cmp	r2, #0
   43bbe:	f040 81fc 	bne.w	43fba <_vfiprintf_r+0x81e>
   43bc2:	9b08      	ldr	r3, [sp, #32]
   43bc4:	2b00      	cmp	r3, #0
   43bc6:	f040 82a3 	bne.w	44110 <_vfiprintf_r+0x974>
   43bca:	4608      	mov	r0, r1
   43bcc:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   43bd0:	4611      	mov	r1, r2
   43bd2:	46d9      	mov	r9, fp
   43bd4:	9b07      	ldr	r3, [sp, #28]
   43bd6:	2b80      	cmp	r3, #128	; 0x80
   43bd8:	f000 8217 	beq.w	4400a <_vfiprintf_r+0x86e>
   43bdc:	9b03      	ldr	r3, [sp, #12]
   43bde:	eba8 0403 	sub.w	r4, r8, r3
   43be2:	2c00      	cmp	r4, #0
   43be4:	dd3a      	ble.n	43c5c <_vfiprintf_r+0x4c0>
   43be6:	2c10      	cmp	r4, #16
   43be8:	f340 840d 	ble.w	44406 <_vfiprintf_r+0xc6a>
   43bec:	4d2d      	ldr	r5, [pc, #180]	; (43ca4 <_vfiprintf_r+0x508>)
   43bee:	f04f 0810 	mov.w	r8, #16
   43bf2:	e005      	b.n	43c00 <_vfiprintf_r+0x464>
   43bf4:	2001      	movs	r0, #1
   43bf6:	4611      	mov	r1, r2
   43bf8:	46d9      	mov	r9, fp
   43bfa:	3c10      	subs	r4, #16
   43bfc:	2c10      	cmp	r4, #16
   43bfe:	dd1f      	ble.n	43c40 <_vfiprintf_r+0x4a4>
   43c00:	1c4b      	adds	r3, r1, #1
   43c02:	3210      	adds	r2, #16
   43c04:	f8c9 5000 	str.w	r5, [r9]
   43c08:	1c88      	adds	r0, r1, #2
   43c0a:	2b07      	cmp	r3, #7
   43c0c:	f8c9 8004 	str.w	r8, [r9, #4]
   43c10:	9214      	str	r2, [sp, #80]	; 0x50
   43c12:	4619      	mov	r1, r3
   43c14:	f109 0908 	add.w	r9, r9, #8
   43c18:	9313      	str	r3, [sp, #76]	; 0x4c
   43c1a:	ddee      	ble.n	43bfa <_vfiprintf_r+0x45e>
   43c1c:	2a00      	cmp	r2, #0
   43c1e:	d0e9      	beq.n	43bf4 <_vfiprintf_r+0x458>
   43c20:	aa12      	add	r2, sp, #72	; 0x48
   43c22:	9902      	ldr	r1, [sp, #8]
   43c24:	9805      	ldr	r0, [sp, #20]
   43c26:	46d9      	mov	r9, fp
   43c28:	f7ff fd7e 	bl	43728 <__sprint_r.part.0>
   43c2c:	2800      	cmp	r0, #0
   43c2e:	f040 8294 	bne.w	4415a <_vfiprintf_r+0x9be>
   43c32:	3c10      	subs	r4, #16
   43c34:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   43c38:	2c10      	cmp	r4, #16
   43c3a:	f101 0001 	add.w	r0, r1, #1
   43c3e:	dcdf      	bgt.n	43c00 <_vfiprintf_r+0x464>
   43c40:	f109 0308 	add.w	r3, r9, #8
   43c44:	4422      	add	r2, r4
   43c46:	2807      	cmp	r0, #7
   43c48:	e9c9 5400 	strd	r5, r4, [r9]
   43c4c:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   43c50:	f300 826c 	bgt.w	4412c <_vfiprintf_r+0x990>
   43c54:	3001      	adds	r0, #1
   43c56:	f103 0c08 	add.w	ip, r3, #8
   43c5a:	4699      	mov	r9, r3
   43c5c:	9b03      	ldr	r3, [sp, #12]
   43c5e:	2807      	cmp	r0, #7
   43c60:	9909      	ldr	r1, [sp, #36]	; 0x24
   43c62:	441a      	add	r2, r3
   43c64:	e9c9 1300 	strd	r1, r3, [r9]
   43c68:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   43c6c:	f340 821f 	ble.w	440ae <_vfiprintf_r+0x912>
   43c70:	2a00      	cmp	r2, #0
   43c72:	f040 8213 	bne.w	4409c <_vfiprintf_r+0x900>
   43c76:	0774      	lsls	r4, r6, #29
   43c78:	9213      	str	r2, [sp, #76]	; 0x4c
   43c7a:	d546      	bpl.n	43d0a <_vfiprintf_r+0x56e>
   43c7c:	9b01      	ldr	r3, [sp, #4]
   43c7e:	1afc      	subs	r4, r7, r3
   43c80:	2c00      	cmp	r4, #0
   43c82:	dd42      	ble.n	43d0a <_vfiprintf_r+0x56e>
   43c84:	46dc      	mov	ip, fp
   43c86:	2c10      	cmp	r4, #16
   43c88:	9913      	ldr	r1, [sp, #76]	; 0x4c
   43c8a:	f340 83cf 	ble.w	4442c <_vfiprintf_r+0xc90>
   43c8e:	4d04      	ldr	r5, [pc, #16]	; (43ca0 <_vfiprintf_r+0x504>)
   43c90:	2610      	movs	r6, #16
   43c92:	f8dd 8014 	ldr.w	r8, [sp, #20]
   43c96:	e00d      	b.n	43cb4 <_vfiprintf_r+0x518>
   43c98:	0004c61c 	.word	0x0004c61c
   43c9c:	0004c630 	.word	0x0004c630
   43ca0:	0004c69c 	.word	0x0004c69c
   43ca4:	0004c6ac 	.word	0x0004c6ac
   43ca8:	2001      	movs	r0, #1
   43caa:	4611      	mov	r1, r2
   43cac:	46dc      	mov	ip, fp
   43cae:	3c10      	subs	r4, #16
   43cb0:	2c10      	cmp	r4, #16
   43cb2:	dd1f      	ble.n	43cf4 <_vfiprintf_r+0x558>
   43cb4:	1c4b      	adds	r3, r1, #1
   43cb6:	3210      	adds	r2, #16
   43cb8:	f8cc 5000 	str.w	r5, [ip]
   43cbc:	1c88      	adds	r0, r1, #2
   43cbe:	2b07      	cmp	r3, #7
   43cc0:	f8cc 6004 	str.w	r6, [ip, #4]
   43cc4:	9214      	str	r2, [sp, #80]	; 0x50
   43cc6:	4619      	mov	r1, r3
   43cc8:	f10c 0c08 	add.w	ip, ip, #8
   43ccc:	9313      	str	r3, [sp, #76]	; 0x4c
   43cce:	ddee      	ble.n	43cae <_vfiprintf_r+0x512>
   43cd0:	2a00      	cmp	r2, #0
   43cd2:	d0e9      	beq.n	43ca8 <_vfiprintf_r+0x50c>
   43cd4:	aa12      	add	r2, sp, #72	; 0x48
   43cd6:	9902      	ldr	r1, [sp, #8]
   43cd8:	4640      	mov	r0, r8
   43cda:	f7ff fd25 	bl	43728 <__sprint_r.part.0>
   43cde:	46dc      	mov	ip, fp
   43ce0:	2800      	cmp	r0, #0
   43ce2:	f040 823a 	bne.w	4415a <_vfiprintf_r+0x9be>
   43ce6:	3c10      	subs	r4, #16
   43ce8:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   43cec:	2c10      	cmp	r4, #16
   43cee:	f101 0001 	add.w	r0, r1, #1
   43cf2:	dcdf      	bgt.n	43cb4 <_vfiprintf_r+0x518>
   43cf4:	4422      	add	r2, r4
   43cf6:	2807      	cmp	r0, #7
   43cf8:	e9cc 5400 	strd	r5, r4, [ip]
   43cfc:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   43d00:	f340 81dc 	ble.w	440bc <_vfiprintf_r+0x920>
   43d04:	2a00      	cmp	r2, #0
   43d06:	f040 832e 	bne.w	44366 <_vfiprintf_r+0xbca>
   43d0a:	9b04      	ldr	r3, [sp, #16]
   43d0c:	9a01      	ldr	r2, [sp, #4]
   43d0e:	4297      	cmp	r7, r2
   43d10:	bfac      	ite	ge
   43d12:	19db      	addge	r3, r3, r7
   43d14:	189b      	addlt	r3, r3, r2
   43d16:	9304      	str	r3, [sp, #16]
   43d18:	e1df      	b.n	440da <_vfiprintf_r+0x93e>
   43d1a:	9b06      	ldr	r3, [sp, #24]
   43d1c:	681f      	ldr	r7, [r3, #0]
   43d1e:	1d1a      	adds	r2, r3, #4
   43d20:	f89a 3000 	ldrb.w	r3, [sl]
   43d24:	2f00      	cmp	r7, #0
   43d26:	f2c0 831b 	blt.w	44360 <_vfiprintf_r+0xbc4>
   43d2a:	9206      	str	r2, [sp, #24]
   43d2c:	e5a3      	b.n	43876 <_vfiprintf_r+0xda>
   43d2e:	f647 0330 	movw	r3, #30768	; 0x7830
   43d32:	9a06      	ldr	r2, [sp, #24]
   43d34:	f046 0102 	orr.w	r1, r6, #2
   43d38:	2500      	movs	r5, #0
   43d3a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
   43d3e:	3204      	adds	r2, #4
   43d40:	4bb7      	ldr	r3, [pc, #732]	; (44020 <_vfiprintf_r+0x884>)
   43d42:	f852 4c04 	ldr.w	r4, [r2, #-4]
   43d46:	930b      	str	r3, [sp, #44]	; 0x2c
   43d48:	2302      	movs	r3, #2
   43d4a:	9101      	str	r1, [sp, #4]
   43d4c:	9206      	str	r2, [sp, #24]
   43d4e:	f04f 0200 	mov.w	r2, #0
   43d52:	f1b8 3fff 	cmp.w	r8, #4294967295
   43d56:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   43d5a:	aa3e      	add	r2, sp, #248	; 0xf8
   43d5c:	9203      	str	r2, [sp, #12]
   43d5e:	f43f ae7c 	beq.w	43a5a <_vfiprintf_r+0x2be>
   43d62:	9a01      	ldr	r2, [sp, #4]
   43d64:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   43d68:	ea54 0205 	orrs.w	r2, r4, r5
   43d6c:	f47f ae74 	bne.w	43a58 <_vfiprintf_r+0x2bc>
   43d70:	f118 0200 	adds.w	r2, r8, #0
   43d74:	bf18      	it	ne
   43d76:	2201      	movne	r2, #1
   43d78:	2a00      	cmp	r2, #0
   43d7a:	f47f ae6d 	bne.w	43a58 <_vfiprintf_r+0x2bc>
   43d7e:	2b00      	cmp	r3, #0
   43d80:	f040 81e0 	bne.w	44144 <_vfiprintf_r+0x9a8>
   43d84:	9a01      	ldr	r2, [sp, #4]
   43d86:	f012 0201 	ands.w	r2, r2, #1
   43d8a:	9203      	str	r2, [sp, #12]
   43d8c:	f000 821d 	beq.w	441ca <_vfiprintf_r+0xa2e>
   43d90:	a93e      	add	r1, sp, #248	; 0xf8
   43d92:	2230      	movs	r2, #48	; 0x30
   43d94:	4698      	mov	r8, r3
   43d96:	f801 2d01 	strb.w	r2, [r1, #-1]!
   43d9a:	9109      	str	r1, [sp, #36]	; 0x24
   43d9c:	9a03      	ldr	r2, [sp, #12]
   43d9e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   43da2:	4542      	cmp	r2, r8
   43da4:	bfb8      	it	lt
   43da6:	4642      	movlt	r2, r8
   43da8:	9201      	str	r2, [sp, #4]
   43daa:	2b00      	cmp	r3, #0
   43dac:	f43f aea2 	beq.w	43af4 <_vfiprintf_r+0x358>
   43db0:	3201      	adds	r2, #1
   43db2:	9201      	str	r2, [sp, #4]
   43db4:	e69e      	b.n	43af4 <_vfiprintf_r+0x358>
   43db6:	9a06      	ldr	r2, [sp, #24]
   43db8:	06b1      	lsls	r1, r6, #26
   43dba:	f852 3b04 	ldr.w	r3, [r2], #4
   43dbe:	9206      	str	r2, [sp, #24]
   43dc0:	f100 8273 	bmi.w	442aa <_vfiprintf_r+0xb0e>
   43dc4:	06f2      	lsls	r2, r6, #27
   43dc6:	f100 8321 	bmi.w	4440c <_vfiprintf_r+0xc70>
   43dca:	0677      	lsls	r7, r6, #25
   43dcc:	f100 834a 	bmi.w	44464 <_vfiprintf_r+0xcc8>
   43dd0:	05b6      	lsls	r6, r6, #22
   43dd2:	f140 831b 	bpl.w	4440c <_vfiprintf_r+0xc70>
   43dd6:	9a04      	ldr	r2, [sp, #16]
   43dd8:	701a      	strb	r2, [r3, #0]
   43dda:	e51a      	b.n	43812 <_vfiprintf_r+0x76>
   43ddc:	f89a 3000 	ldrb.w	r3, [sl]
   43de0:	2b6c      	cmp	r3, #108	; 0x6c
   43de2:	f000 82d0 	beq.w	44386 <_vfiprintf_r+0xbea>
   43de6:	f046 0610 	orr.w	r6, r6, #16
   43dea:	e544      	b.n	43876 <_vfiprintf_r+0xda>
   43dec:	f89a 3000 	ldrb.w	r3, [sl]
   43df0:	2b68      	cmp	r3, #104	; 0x68
   43df2:	f000 82d0 	beq.w	44396 <_vfiprintf_r+0xbfa>
   43df6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   43dfa:	e53c      	b.n	43876 <_vfiprintf_r+0xda>
   43dfc:	9a06      	ldr	r2, [sp, #24]
   43dfe:	6813      	ldr	r3, [r2, #0]
   43e00:	1d14      	adds	r4, r2, #4
   43e02:	f04f 0200 	mov.w	r2, #0
   43e06:	9309      	str	r3, [sp, #36]	; 0x24
   43e08:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   43e0c:	2b00      	cmp	r3, #0
   43e0e:	f000 82d1 	beq.w	443b4 <_vfiprintf_r+0xc18>
   43e12:	f1b8 3fff 	cmp.w	r8, #4294967295
   43e16:	f000 82fd 	beq.w	44414 <_vfiprintf_r+0xc78>
   43e1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   43e1c:	4642      	mov	r2, r8
   43e1e:	2100      	movs	r1, #0
   43e20:	4628      	mov	r0, r5
   43e22:	f7fd f883 	bl	40f2c <memchr>
   43e26:	2800      	cmp	r0, #0
   43e28:	f000 8324 	beq.w	44474 <_vfiprintf_r+0xcd8>
   43e2c:	1b43      	subs	r3, r0, r5
   43e2e:	9406      	str	r4, [sp, #24]
   43e30:	f04f 0800 	mov.w	r8, #0
   43e34:	9303      	str	r3, [sp, #12]
   43e36:	e7b1      	b.n	43d9c <_vfiprintf_r+0x600>
   43e38:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   43e3c:	f89a 3000 	ldrb.w	r3, [sl]
   43e40:	e519      	b.n	43876 <_vfiprintf_r+0xda>
   43e42:	f89a 3000 	ldrb.w	r3, [sl]
   43e46:	f10a 0101 	add.w	r1, sl, #1
   43e4a:	2b2a      	cmp	r3, #42	; 0x2a
   43e4c:	f000 8330 	beq.w	444b0 <_vfiprintf_r+0xd14>
   43e50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   43e54:	468a      	mov	sl, r1
   43e56:	f04f 0800 	mov.w	r8, #0
   43e5a:	2a09      	cmp	r2, #9
   43e5c:	f63f ad0d 	bhi.w	4387a <_vfiprintf_r+0xde>
   43e60:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   43e64:	f81a 3b01 	ldrb.w	r3, [sl], #1
   43e68:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   43e6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   43e70:	2a09      	cmp	r2, #9
   43e72:	d9f5      	bls.n	43e60 <_vfiprintf_r+0x6c4>
   43e74:	e501      	b.n	4387a <_vfiprintf_r+0xde>
   43e76:	f89a 3000 	ldrb.w	r3, [sl]
   43e7a:	f046 0604 	orr.w	r6, r6, #4
   43e7e:	e4fa      	b.n	43876 <_vfiprintf_r+0xda>
   43e80:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
   43e84:	f89a 3000 	ldrb.w	r3, [sl]
   43e88:	e4f5      	b.n	43876 <_vfiprintf_r+0xda>
   43e8a:	f046 0310 	orr.w	r3, r6, #16
   43e8e:	9301      	str	r3, [sp, #4]
   43e90:	9b01      	ldr	r3, [sp, #4]
   43e92:	069d      	lsls	r5, r3, #26
   43e94:	f53f adbc 	bmi.w	43a10 <_vfiprintf_r+0x274>
   43e98:	9901      	ldr	r1, [sp, #4]
   43e9a:	9a06      	ldr	r2, [sp, #24]
   43e9c:	06cc      	lsls	r4, r1, #27
   43e9e:	f102 0304 	add.w	r3, r2, #4
   43ea2:	f100 81e9 	bmi.w	44278 <_vfiprintf_r+0xadc>
   43ea6:	9a01      	ldr	r2, [sp, #4]
   43ea8:	0650      	lsls	r0, r2, #25
   43eaa:	f140 81df 	bpl.w	4426c <_vfiprintf_r+0xad0>
   43eae:	9a06      	ldr	r2, [sp, #24]
   43eb0:	9306      	str	r3, [sp, #24]
   43eb2:	f9b2 4000 	ldrsh.w	r4, [r2]
   43eb6:	17e5      	asrs	r5, r4, #31
   43eb8:	4622      	mov	r2, r4
   43eba:	462b      	mov	r3, r5
   43ebc:	e5b3      	b.n	43a26 <_vfiprintf_r+0x28a>
   43ebe:	f046 0601 	orr.w	r6, r6, #1
   43ec2:	f89a 3000 	ldrb.w	r3, [sl]
   43ec6:	e4d6      	b.n	43876 <_vfiprintf_r+0xda>
   43ec8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   43ecc:	f89a 3000 	ldrb.w	r3, [sl]
   43ed0:	2a00      	cmp	r2, #0
   43ed2:	f47f acd0 	bne.w	43876 <_vfiprintf_r+0xda>
   43ed6:	2220      	movs	r2, #32
   43ed8:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   43edc:	e4cb      	b.n	43876 <_vfiprintf_r+0xda>
   43ede:	9805      	ldr	r0, [sp, #20]
   43ee0:	f001 fd8a 	bl	459f8 <_localeconv_r>
   43ee4:	6843      	ldr	r3, [r0, #4]
   43ee6:	4618      	mov	r0, r3
   43ee8:	930d      	str	r3, [sp, #52]	; 0x34
   43eea:	f7fd fc9b 	bl	41824 <strlen>
   43eee:	900e      	str	r0, [sp, #56]	; 0x38
   43ef0:	4604      	mov	r4, r0
   43ef2:	9805      	ldr	r0, [sp, #20]
   43ef4:	f001 fd80 	bl	459f8 <_localeconv_r>
   43ef8:	6883      	ldr	r3, [r0, #8]
   43efa:	930c      	str	r3, [sp, #48]	; 0x30
   43efc:	2c00      	cmp	r4, #0
   43efe:	f43f ad20 	beq.w	43942 <_vfiprintf_r+0x1a6>
   43f02:	2b00      	cmp	r3, #0
   43f04:	f43f ad1d 	beq.w	43942 <_vfiprintf_r+0x1a6>
   43f08:	781a      	ldrb	r2, [r3, #0]
   43f0a:	f89a 3000 	ldrb.w	r3, [sl]
   43f0e:	2a00      	cmp	r2, #0
   43f10:	f43f acb1 	beq.w	43876 <_vfiprintf_r+0xda>
   43f14:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   43f18:	e4ad      	b.n	43876 <_vfiprintf_r+0xda>
   43f1a:	89aa      	ldrh	r2, [r5, #12]
   43f1c:	f002 031a 	and.w	r3, r2, #26
   43f20:	2b0a      	cmp	r3, #10
   43f22:	f47f ac6a 	bne.w	437fa <_vfiprintf_r+0x5e>
   43f26:	e01d      	b.n	43f64 <_vfiprintf_r+0x7c8>
   43f28:	9a06      	ldr	r2, [sp, #24]
   43f2a:	06f4      	lsls	r4, r6, #27
   43f2c:	f102 0304 	add.w	r3, r2, #4
   43f30:	f100 81b6 	bmi.w	442a0 <_vfiprintf_r+0xb04>
   43f34:	0670      	lsls	r0, r6, #25
   43f36:	9a06      	ldr	r2, [sp, #24]
   43f38:	f140 81af 	bpl.w	4429a <_vfiprintf_r+0xafe>
   43f3c:	8814      	ldrh	r4, [r2, #0]
   43f3e:	2500      	movs	r5, #0
   43f40:	9306      	str	r3, [sp, #24]
   43f42:	e520      	b.n	43986 <_vfiprintf_r+0x1ea>
   43f44:	9b06      	ldr	r3, [sp, #24]
   43f46:	06f4      	lsls	r4, r6, #27
   43f48:	f103 0204 	add.w	r2, r3, #4
   43f4c:	f100 819f 	bmi.w	4428e <_vfiprintf_r+0xaf2>
   43f50:	0670      	lsls	r0, r6, #25
   43f52:	f140 8198 	bpl.w	44286 <_vfiprintf_r+0xaea>
   43f56:	9b06      	ldr	r3, [sp, #24]
   43f58:	2500      	movs	r5, #0
   43f5a:	9601      	str	r6, [sp, #4]
   43f5c:	881c      	ldrh	r4, [r3, #0]
   43f5e:	2301      	movs	r3, #1
   43f60:	9206      	str	r2, [sp, #24]
   43f62:	e6f4      	b.n	43d4e <_vfiprintf_r+0x5b2>
   43f64:	9902      	ldr	r1, [sp, #8]
   43f66:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   43f6a:	2b00      	cmp	r3, #0
   43f6c:	f6ff ac45 	blt.w	437fa <_vfiprintf_r+0x5e>
   43f70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   43f72:	07df      	lsls	r7, r3, #31
   43f74:	d404      	bmi.n	43f80 <_vfiprintf_r+0x7e4>
   43f76:	0596      	lsls	r6, r2, #22
   43f78:	d402      	bmi.n	43f80 <_vfiprintf_r+0x7e4>
   43f7a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   43f7c:	f001 fd50 	bl	45a20 <__retarget_lock_release_recursive>
   43f80:	4623      	mov	r3, r4
   43f82:	4652      	mov	r2, sl
   43f84:	9902      	ldr	r1, [sp, #8]
   43f86:	9805      	ldr	r0, [sp, #20]
   43f88:	f000 faa4 	bl	444d4 <__sbprintf>
   43f8c:	9004      	str	r0, [sp, #16]
   43f8e:	9804      	ldr	r0, [sp, #16]
   43f90:	b03f      	add	sp, #252	; 0xfc
   43f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43f96:	f000 fda9 	bl	44aec <__sinit>
   43f9a:	e40c      	b.n	437b6 <_vfiprintf_r+0x1a>
   43f9c:	2b00      	cmp	r3, #0
   43f9e:	f000 80d6 	beq.w	4414e <_vfiprintf_r+0x9b2>
   43fa2:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   43fa6:	f04f 0300 	mov.w	r3, #0
   43faa:	2201      	movs	r2, #1
   43fac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   43fb0:	ab25      	add	r3, sp, #148	; 0x94
   43fb2:	9201      	str	r2, [sp, #4]
   43fb4:	9309      	str	r3, [sp, #36]	; 0x24
   43fb6:	9203      	str	r2, [sp, #12]
   43fb8:	e59a      	b.n	43af0 <_vfiprintf_r+0x354>
   43fba:	aa12      	add	r2, sp, #72	; 0x48
   43fbc:	9902      	ldr	r1, [sp, #8]
   43fbe:	9805      	ldr	r0, [sp, #20]
   43fc0:	f7ff fbb2 	bl	43728 <__sprint_r.part.0>
   43fc4:	2800      	cmp	r0, #0
   43fc6:	f040 80c8 	bne.w	4415a <_vfiprintf_r+0x9be>
   43fca:	9913      	ldr	r1, [sp, #76]	; 0x4c
   43fcc:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   43fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   43fd2:	46d9      	mov	r9, fp
   43fd4:	1c48      	adds	r0, r1, #1
   43fd6:	9b08      	ldr	r3, [sp, #32]
   43fd8:	2b00      	cmp	r3, #0
   43fda:	f43f adfb 	beq.w	43bd4 <_vfiprintf_r+0x438>
   43fde:	3202      	adds	r2, #2
   43fe0:	a911      	add	r1, sp, #68	; 0x44
   43fe2:	2302      	movs	r3, #2
   43fe4:	2807      	cmp	r0, #7
   43fe6:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   43fea:	e9c9 1300 	strd	r1, r3, [r9]
   43fee:	f340 8097 	ble.w	44120 <_vfiprintf_r+0x984>
   43ff2:	2a00      	cmp	r2, #0
   43ff4:	f040 8104 	bne.w	44200 <_vfiprintf_r+0xa64>
   43ff8:	9b07      	ldr	r3, [sp, #28]
   43ffa:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   43ffe:	2001      	movs	r0, #1
   44000:	4611      	mov	r1, r2
   44002:	2b80      	cmp	r3, #128	; 0x80
   44004:	46d9      	mov	r9, fp
   44006:	f47f ade9 	bne.w	43bdc <_vfiprintf_r+0x440>
   4400a:	9b01      	ldr	r3, [sp, #4]
   4400c:	1afc      	subs	r4, r7, r3
   4400e:	2c00      	cmp	r4, #0
   44010:	f77f ade4 	ble.w	43bdc <_vfiprintf_r+0x440>
   44014:	2c10      	cmp	r4, #16
   44016:	f340 8229 	ble.w	4446c <_vfiprintf_r+0xcd0>
   4401a:	4d02      	ldr	r5, [pc, #8]	; (44024 <_vfiprintf_r+0x888>)
   4401c:	e00b      	b.n	44036 <_vfiprintf_r+0x89a>
   4401e:	bf00      	nop
   44020:	0004c61c 	.word	0x0004c61c
   44024:	0004c6ac 	.word	0x0004c6ac
   44028:	f04f 0c01 	mov.w	ip, #1
   4402c:	4611      	mov	r1, r2
   4402e:	46d9      	mov	r9, fp
   44030:	3c10      	subs	r4, #16
   44032:	2c10      	cmp	r4, #16
   44034:	dd20      	ble.n	44078 <_vfiprintf_r+0x8dc>
   44036:	1c4b      	adds	r3, r1, #1
   44038:	3210      	adds	r2, #16
   4403a:	2010      	movs	r0, #16
   4403c:	f8c9 5000 	str.w	r5, [r9]
   44040:	2b07      	cmp	r3, #7
   44042:	f101 0c02 	add.w	ip, r1, #2
   44046:	f8c9 0004 	str.w	r0, [r9, #4]
   4404a:	4619      	mov	r1, r3
   4404c:	9214      	str	r2, [sp, #80]	; 0x50
   4404e:	f109 0908 	add.w	r9, r9, #8
   44052:	9313      	str	r3, [sp, #76]	; 0x4c
   44054:	ddec      	ble.n	44030 <_vfiprintf_r+0x894>
   44056:	2a00      	cmp	r2, #0
   44058:	d0e6      	beq.n	44028 <_vfiprintf_r+0x88c>
   4405a:	aa12      	add	r2, sp, #72	; 0x48
   4405c:	9902      	ldr	r1, [sp, #8]
   4405e:	9805      	ldr	r0, [sp, #20]
   44060:	46d9      	mov	r9, fp
   44062:	f7ff fb61 	bl	43728 <__sprint_r.part.0>
   44066:	2800      	cmp	r0, #0
   44068:	d177      	bne.n	4415a <_vfiprintf_r+0x9be>
   4406a:	3c10      	subs	r4, #16
   4406c:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   44070:	2c10      	cmp	r4, #16
   44072:	f101 0c01 	add.w	ip, r1, #1
   44076:	dcde      	bgt.n	44036 <_vfiprintf_r+0x89a>
   44078:	f109 0308 	add.w	r3, r9, #8
   4407c:	4422      	add	r2, r4
   4407e:	f1bc 0f07 	cmp.w	ip, #7
   44082:	e9c9 5400 	strd	r5, r4, [r9]
   44086:	e9cd c213 	strd	ip, r2, [sp, #76]	; 0x4c
   4408a:	f300 80c7 	bgt.w	4421c <_vfiprintf_r+0xa80>
   4408e:	f10c 0001 	add.w	r0, ip, #1
   44092:	4661      	mov	r1, ip
   44094:	4699      	mov	r9, r3
   44096:	f103 0c08 	add.w	ip, r3, #8
   4409a:	e59f      	b.n	43bdc <_vfiprintf_r+0x440>
   4409c:	aa12      	add	r2, sp, #72	; 0x48
   4409e:	9902      	ldr	r1, [sp, #8]
   440a0:	9805      	ldr	r0, [sp, #20]
   440a2:	f7ff fb41 	bl	43728 <__sprint_r.part.0>
   440a6:	2800      	cmp	r0, #0
   440a8:	d157      	bne.n	4415a <_vfiprintf_r+0x9be>
   440aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   440ac:	46dc      	mov	ip, fp
   440ae:	0770      	lsls	r0, r6, #29
   440b0:	d504      	bpl.n	440bc <_vfiprintf_r+0x920>
   440b2:	9b01      	ldr	r3, [sp, #4]
   440b4:	1afc      	subs	r4, r7, r3
   440b6:	2c00      	cmp	r4, #0
   440b8:	f73f ade5 	bgt.w	43c86 <_vfiprintf_r+0x4ea>
   440bc:	9b04      	ldr	r3, [sp, #16]
   440be:	9901      	ldr	r1, [sp, #4]
   440c0:	428f      	cmp	r7, r1
   440c2:	bfac      	ite	ge
   440c4:	19db      	addge	r3, r3, r7
   440c6:	185b      	addlt	r3, r3, r1
   440c8:	9304      	str	r3, [sp, #16]
   440ca:	b132      	cbz	r2, 440da <_vfiprintf_r+0x93e>
   440cc:	aa12      	add	r2, sp, #72	; 0x48
   440ce:	9902      	ldr	r1, [sp, #8]
   440d0:	9805      	ldr	r0, [sp, #20]
   440d2:	f7ff fb29 	bl	43728 <__sprint_r.part.0>
   440d6:	2800      	cmp	r0, #0
   440d8:	d13f      	bne.n	4415a <_vfiprintf_r+0x9be>
   440da:	2300      	movs	r3, #0
   440dc:	46d9      	mov	r9, fp
   440de:	9313      	str	r3, [sp, #76]	; 0x4c
   440e0:	f7ff bb97 	b.w	43812 <_vfiprintf_r+0x76>
   440e4:	2a00      	cmp	r2, #0
   440e6:	f040 8180 	bne.w	443ea <_vfiprintf_r+0xc4e>
   440ea:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
   440ee:	2900      	cmp	r1, #0
   440f0:	f000 80e2 	beq.w	442b8 <_vfiprintf_r+0xb1c>
   440f4:	2201      	movs	r2, #1
   440f6:	f10d 0143 	add.w	r1, sp, #67	; 0x43
   440fa:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   440fe:	4610      	mov	r0, r2
   44100:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
   44104:	4601      	mov	r1, r0
   44106:	46e1      	mov	r9, ip
   44108:	3001      	adds	r0, #1
   4410a:	f10c 0c08 	add.w	ip, ip, #8
   4410e:	e762      	b.n	43fd6 <_vfiprintf_r+0x83a>
   44110:	aa11      	add	r2, sp, #68	; 0x44
   44112:	2302      	movs	r3, #2
   44114:	2001      	movs	r0, #1
   44116:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   4411a:	9215      	str	r2, [sp, #84]	; 0x54
   4411c:	461a      	mov	r2, r3
   4411e:	9316      	str	r3, [sp, #88]	; 0x58
   44120:	4601      	mov	r1, r0
   44122:	46e1      	mov	r9, ip
   44124:	3001      	adds	r0, #1
   44126:	f10c 0c08 	add.w	ip, ip, #8
   4412a:	e553      	b.n	43bd4 <_vfiprintf_r+0x438>
   4412c:	2a00      	cmp	r2, #0
   4412e:	d17e      	bne.n	4422e <_vfiprintf_r+0xa92>
   44130:	9a03      	ldr	r2, [sp, #12]
   44132:	2301      	movs	r3, #1
   44134:	9909      	ldr	r1, [sp, #36]	; 0x24
   44136:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   4413a:	9216      	str	r2, [sp, #88]	; 0x58
   4413c:	9115      	str	r1, [sp, #84]	; 0x54
   4413e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   44142:	e7b4      	b.n	440ae <_vfiprintf_r+0x912>
   44144:	ab3e      	add	r3, sp, #248	; 0xf8
   44146:	4690      	mov	r8, r2
   44148:	9203      	str	r2, [sp, #12]
   4414a:	9309      	str	r3, [sp, #36]	; 0x24
   4414c:	e626      	b.n	43d9c <_vfiprintf_r+0x600>
   4414e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   44150:	2b00      	cmp	r3, #0
   44152:	f040 8194 	bne.w	4447e <_vfiprintf_r+0xce2>
   44156:	2300      	movs	r3, #0
   44158:	9313      	str	r3, [sp, #76]	; 0x4c
   4415a:	9b02      	ldr	r3, [sp, #8]
   4415c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   4415e:	899b      	ldrh	r3, [r3, #12]
   44160:	07d1      	lsls	r1, r2, #31
   44162:	d402      	bmi.n	4416a <_vfiprintf_r+0x9ce>
   44164:	059a      	lsls	r2, r3, #22
   44166:	f140 8108 	bpl.w	4437a <_vfiprintf_r+0xbde>
   4416a:	065b      	lsls	r3, r3, #25
   4416c:	f53f ac20 	bmi.w	439b0 <_vfiprintf_r+0x214>
   44170:	9804      	ldr	r0, [sp, #16]
   44172:	b03f      	add	sp, #252	; 0xfc
   44174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44178:	a93e      	add	r1, sp, #248	; 0xf8
   4417a:	e000      	b.n	4417e <_vfiprintf_r+0x9e2>
   4417c:	4611      	mov	r1, r2
   4417e:	08e2      	lsrs	r2, r4, #3
   44180:	f004 0307 	and.w	r3, r4, #7
   44184:	08e8      	lsrs	r0, r5, #3
   44186:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   4418a:	3330      	adds	r3, #48	; 0x30
   4418c:	4605      	mov	r5, r0
   4418e:	4614      	mov	r4, r2
   44190:	f801 3c01 	strb.w	r3, [r1, #-1]
   44194:	1e4a      	subs	r2, r1, #1
   44196:	ea54 0005 	orrs.w	r0, r4, r5
   4419a:	d1ef      	bne.n	4417c <_vfiprintf_r+0x9e0>
   4419c:	2b30      	cmp	r3, #48	; 0x30
   4419e:	9209      	str	r2, [sp, #36]	; 0x24
   441a0:	d00d      	beq.n	441be <_vfiprintf_r+0xa22>
   441a2:	9b01      	ldr	r3, [sp, #4]
   441a4:	07dd      	lsls	r5, r3, #31
   441a6:	d50a      	bpl.n	441be <_vfiprintf_r+0xa22>
   441a8:	3902      	subs	r1, #2
   441aa:	9a03      	ldr	r2, [sp, #12]
   441ac:	2330      	movs	r3, #48	; 0x30
   441ae:	9e01      	ldr	r6, [sp, #4]
   441b0:	1a52      	subs	r2, r2, r1
   441b2:	9203      	str	r2, [sp, #12]
   441b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   441b6:	9109      	str	r1, [sp, #36]	; 0x24
   441b8:	f802 3c01 	strb.w	r3, [r2, #-1]
   441bc:	e5ee      	b.n	43d9c <_vfiprintf_r+0x600>
   441be:	9b03      	ldr	r3, [sp, #12]
   441c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   441c2:	9e01      	ldr	r6, [sp, #4]
   441c4:	1a9b      	subs	r3, r3, r2
   441c6:	9303      	str	r3, [sp, #12]
   441c8:	e5e8      	b.n	43d9c <_vfiprintf_r+0x600>
   441ca:	4698      	mov	r8, r3
   441cc:	ab3e      	add	r3, sp, #248	; 0xf8
   441ce:	9309      	str	r3, [sp, #36]	; 0x24
   441d0:	e5e4      	b.n	43d9c <_vfiprintf_r+0x600>
   441d2:	2d00      	cmp	r5, #0
   441d4:	bf08      	it	eq
   441d6:	2c0a      	cmpeq	r4, #10
   441d8:	d278      	bcs.n	442cc <_vfiprintf_r+0xb30>
   441da:	ab3e      	add	r3, sp, #248	; 0xf8
   441dc:	3430      	adds	r4, #48	; 0x30
   441de:	2201      	movs	r2, #1
   441e0:	9e01      	ldr	r6, [sp, #4]
   441e2:	f803 4d01 	strb.w	r4, [r3, #-1]!
   441e6:	9203      	str	r2, [sp, #12]
   441e8:	9309      	str	r3, [sp, #36]	; 0x24
   441ea:	e5d7      	b.n	43d9c <_vfiprintf_r+0x600>
   441ec:	aa12      	add	r2, sp, #72	; 0x48
   441ee:	9902      	ldr	r1, [sp, #8]
   441f0:	9805      	ldr	r0, [sp, #20]
   441f2:	f7ff fa99 	bl	43728 <__sprint_r.part.0>
   441f6:	2800      	cmp	r0, #0
   441f8:	d1af      	bne.n	4415a <_vfiprintf_r+0x9be>
   441fa:	46d9      	mov	r9, fp
   441fc:	f7ff bb28 	b.w	43850 <_vfiprintf_r+0xb4>
   44200:	aa12      	add	r2, sp, #72	; 0x48
   44202:	9902      	ldr	r1, [sp, #8]
   44204:	9805      	ldr	r0, [sp, #20]
   44206:	f7ff fa8f 	bl	43728 <__sprint_r.part.0>
   4420a:	2800      	cmp	r0, #0
   4420c:	d1a5      	bne.n	4415a <_vfiprintf_r+0x9be>
   4420e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   44210:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   44214:	9a14      	ldr	r2, [sp, #80]	; 0x50
   44216:	46d9      	mov	r9, fp
   44218:	1c48      	adds	r0, r1, #1
   4421a:	e4db      	b.n	43bd4 <_vfiprintf_r+0x438>
   4421c:	2a00      	cmp	r2, #0
   4421e:	f040 80d4 	bne.w	443ca <_vfiprintf_r+0xc2e>
   44222:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   44226:	2001      	movs	r0, #1
   44228:	4611      	mov	r1, r2
   4422a:	46d9      	mov	r9, fp
   4422c:	e4d6      	b.n	43bdc <_vfiprintf_r+0x440>
   4422e:	aa12      	add	r2, sp, #72	; 0x48
   44230:	9902      	ldr	r1, [sp, #8]
   44232:	9805      	ldr	r0, [sp, #20]
   44234:	f7ff fa78 	bl	43728 <__sprint_r.part.0>
   44238:	2800      	cmp	r0, #0
   4423a:	d18e      	bne.n	4415a <_vfiprintf_r+0x9be>
   4423c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   4423e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   44242:	9a14      	ldr	r2, [sp, #80]	; 0x50
   44244:	46d9      	mov	r9, fp
   44246:	3001      	adds	r0, #1
   44248:	e508      	b.n	43c5c <_vfiprintf_r+0x4c0>
   4424a:	9d02      	ldr	r5, [sp, #8]
   4424c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   4424e:	f001 fbe5 	bl	45a1c <__retarget_lock_acquire_recursive>
   44252:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   44256:	b28a      	uxth	r2, r1
   44258:	f7ff bab7 	b.w	437ca <_vfiprintf_r+0x2e>
   4425c:	05b0      	lsls	r0, r6, #22
   4425e:	f100 80fc 	bmi.w	4445a <_vfiprintf_r+0xcbe>
   44262:	680c      	ldr	r4, [r1, #0]
   44264:	2500      	movs	r5, #0
   44266:	9206      	str	r2, [sp, #24]
   44268:	f7ff bbbc 	b.w	439e4 <_vfiprintf_r+0x248>
   4426c:	9a01      	ldr	r2, [sp, #4]
   4426e:	f412 7f00 	tst.w	r2, #512	; 0x200
   44272:	9a06      	ldr	r2, [sp, #24]
   44274:	f040 80e9 	bne.w	4444a <_vfiprintf_r+0xcae>
   44278:	6814      	ldr	r4, [r2, #0]
   4427a:	9306      	str	r3, [sp, #24]
   4427c:	17e5      	asrs	r5, r4, #31
   4427e:	4622      	mov	r2, r4
   44280:	462b      	mov	r3, r5
   44282:	f7ff bbd0 	b.w	43a26 <_vfiprintf_r+0x28a>
   44286:	05b1      	lsls	r1, r6, #22
   44288:	f100 80d3 	bmi.w	44432 <_vfiprintf_r+0xc96>
   4428c:	9b06      	ldr	r3, [sp, #24]
   4428e:	681c      	ldr	r4, [r3, #0]
   44290:	2500      	movs	r5, #0
   44292:	9601      	str	r6, [sp, #4]
   44294:	2301      	movs	r3, #1
   44296:	9206      	str	r2, [sp, #24]
   44298:	e559      	b.n	43d4e <_vfiprintf_r+0x5b2>
   4429a:	05b1      	lsls	r1, r6, #22
   4429c:	f100 80d0 	bmi.w	44440 <_vfiprintf_r+0xca4>
   442a0:	6814      	ldr	r4, [r2, #0]
   442a2:	2500      	movs	r5, #0
   442a4:	9306      	str	r3, [sp, #24]
   442a6:	f7ff bb6e 	b.w	43986 <_vfiprintf_r+0x1ea>
   442aa:	9a04      	ldr	r2, [sp, #16]
   442ac:	4610      	mov	r0, r2
   442ae:	17d1      	asrs	r1, r2, #31
   442b0:	e9c3 0100 	strd	r0, r1, [r3]
   442b4:	f7ff baad 	b.w	43812 <_vfiprintf_r+0x76>
   442b8:	9b08      	ldr	r3, [sp, #32]
   442ba:	2b00      	cmp	r3, #0
   442bc:	f47f af28 	bne.w	44110 <_vfiprintf_r+0x974>
   442c0:	4611      	mov	r1, r2
   442c2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   442c6:	2001      	movs	r0, #1
   442c8:	46d9      	mov	r9, fp
   442ca:	e487      	b.n	43bdc <_vfiprintf_r+0x440>
   442cc:	9b01      	ldr	r3, [sp, #4]
   442ce:	2200      	movs	r2, #0
   442d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   442d4:	ae3e      	add	r6, sp, #248	; 0xf8
   442d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   442da:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   442de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   442e2:	4699      	mov	r9, r3
   442e4:	e9cd 7807 	strd	r7, r8, [sp, #28]
   442e8:	4617      	mov	r7, r2
   442ea:	220a      	movs	r2, #10
   442ec:	2300      	movs	r3, #0
   442ee:	4620      	mov	r0, r4
   442f0:	4629      	mov	r1, r5
   442f2:	f7d4 fd63 	bl	18dbc <__aeabi_uldivmod>
   442f6:	3230      	adds	r2, #48	; 0x30
   442f8:	3701      	adds	r7, #1
   442fa:	f106 38ff 	add.w	r8, r6, #4294967295
   442fe:	f806 2c01 	strb.w	r2, [r6, #-1]
   44302:	f1b9 0f00 	cmp.w	r9, #0
   44306:	d010      	beq.n	4432a <_vfiprintf_r+0xb8e>
   44308:	2d00      	cmp	r5, #0
   4430a:	f89a 2000 	ldrb.w	r2, [sl]
   4430e:	bf08      	it	eq
   44310:	2c0a      	cmpeq	r4, #10
   44312:	bf2c      	ite	cs
   44314:	2301      	movcs	r3, #1
   44316:	2300      	movcc	r3, #0
   44318:	2aff      	cmp	r2, #255	; 0xff
   4431a:	bf0c      	ite	eq
   4431c:	2300      	moveq	r3, #0
   4431e:	f003 0301 	andne.w	r3, r3, #1
   44322:	b113      	cbz	r3, 4432a <_vfiprintf_r+0xb8e>
   44324:	42ba      	cmp	r2, r7
   44326:	f000 80b3 	beq.w	44490 <_vfiprintf_r+0xcf4>
   4432a:	4620      	mov	r0, r4
   4432c:	4629      	mov	r1, r5
   4432e:	2300      	movs	r3, #0
   44330:	220a      	movs	r2, #10
   44332:	f7d4 fd43 	bl	18dbc <__aeabi_uldivmod>
   44336:	4604      	mov	r4, r0
   44338:	460d      	mov	r5, r1
   4433a:	4646      	mov	r6, r8
   4433c:	ea54 0305 	orrs.w	r3, r4, r5
   44340:	d1d3      	bne.n	442ea <_vfiprintf_r+0xb4e>
   44342:	9b03      	ldr	r3, [sp, #12]
   44344:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   44348:	1b9b      	subs	r3, r3, r6
   4434a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   4434e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   44352:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   44356:	9303      	str	r3, [sp, #12]
   44358:	9e01      	ldr	r6, [sp, #4]
   4435a:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
   4435e:	e51d      	b.n	43d9c <_vfiprintf_r+0x600>
   44360:	427f      	negs	r7, r7
   44362:	9206      	str	r2, [sp, #24]
   44364:	e589      	b.n	43e7a <_vfiprintf_r+0x6de>
   44366:	aa12      	add	r2, sp, #72	; 0x48
   44368:	9902      	ldr	r1, [sp, #8]
   4436a:	9805      	ldr	r0, [sp, #20]
   4436c:	f7ff f9dc 	bl	43728 <__sprint_r.part.0>
   44370:	2800      	cmp	r0, #0
   44372:	f47f aef2 	bne.w	4415a <_vfiprintf_r+0x9be>
   44376:	9a14      	ldr	r2, [sp, #80]	; 0x50
   44378:	e6a0      	b.n	440bc <_vfiprintf_r+0x920>
   4437a:	9c02      	ldr	r4, [sp, #8]
   4437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   4437e:	f001 fb4f 	bl	45a20 <__retarget_lock_release_recursive>
   44382:	89a3      	ldrh	r3, [r4, #12]
   44384:	e6f1      	b.n	4416a <_vfiprintf_r+0x9ce>
   44386:	f89a 3001 	ldrb.w	r3, [sl, #1]
   4438a:	f046 0620 	orr.w	r6, r6, #32
   4438e:	f10a 0a01 	add.w	sl, sl, #1
   44392:	f7ff ba70 	b.w	43876 <_vfiprintf_r+0xda>
   44396:	f89a 3001 	ldrb.w	r3, [sl, #1]
   4439a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   4439e:	f10a 0a01 	add.w	sl, sl, #1
   443a2:	f7ff ba68 	b.w	43876 <_vfiprintf_r+0xda>
   443a6:	f04f 33ff 	mov.w	r3, #4294967295
   443aa:	6d90      	ldr	r0, [r2, #88]	; 0x58
   443ac:	9304      	str	r3, [sp, #16]
   443ae:	f001 fb37 	bl	45a20 <__retarget_lock_release_recursive>
   443b2:	e6dd      	b.n	44170 <_vfiprintf_r+0x9d4>
   443b4:	4643      	mov	r3, r8
   443b6:	4a44      	ldr	r2, [pc, #272]	; (444c8 <_vfiprintf_r+0xd2c>)
   443b8:	9406      	str	r4, [sp, #24]
   443ba:	2b06      	cmp	r3, #6
   443bc:	9209      	str	r2, [sp, #36]	; 0x24
   443be:	bf28      	it	cs
   443c0:	2306      	movcs	r3, #6
   443c2:	9303      	str	r3, [sp, #12]
   443c4:	9301      	str	r3, [sp, #4]
   443c6:	f7ff bb93 	b.w	43af0 <_vfiprintf_r+0x354>
   443ca:	aa12      	add	r2, sp, #72	; 0x48
   443cc:	9902      	ldr	r1, [sp, #8]
   443ce:	9805      	ldr	r0, [sp, #20]
   443d0:	f7ff f9aa 	bl	43728 <__sprint_r.part.0>
   443d4:	2800      	cmp	r0, #0
   443d6:	f47f aec0 	bne.w	4415a <_vfiprintf_r+0x9be>
   443da:	9913      	ldr	r1, [sp, #76]	; 0x4c
   443dc:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   443e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   443e2:	46d9      	mov	r9, fp
   443e4:	1c48      	adds	r0, r1, #1
   443e6:	f7ff bbf9 	b.w	43bdc <_vfiprintf_r+0x440>
   443ea:	aa12      	add	r2, sp, #72	; 0x48
   443ec:	9902      	ldr	r1, [sp, #8]
   443ee:	9805      	ldr	r0, [sp, #20]
   443f0:	f7ff f99a 	bl	43728 <__sprint_r.part.0>
   443f4:	2800      	cmp	r0, #0
   443f6:	f47f aeb0 	bne.w	4415a <_vfiprintf_r+0x9be>
   443fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
   443fc:	46d9      	mov	r9, fp
   443fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   44400:	1c48      	adds	r0, r1, #1
   44402:	f7ff bbc9 	b.w	43b98 <_vfiprintf_r+0x3fc>
   44406:	4663      	mov	r3, ip
   44408:	4d30      	ldr	r5, [pc, #192]	; (444cc <_vfiprintf_r+0xd30>)
   4440a:	e41b      	b.n	43c44 <_vfiprintf_r+0x4a8>
   4440c:	9a04      	ldr	r2, [sp, #16]
   4440e:	601a      	str	r2, [r3, #0]
   44410:	f7ff b9ff 	b.w	43812 <_vfiprintf_r+0x76>
   44414:	9809      	ldr	r0, [sp, #36]	; 0x24
   44416:	f04f 0800 	mov.w	r8, #0
   4441a:	9406      	str	r4, [sp, #24]
   4441c:	f7fd fa02 	bl	41824 <strlen>
   44420:	9003      	str	r0, [sp, #12]
   44422:	e4bb      	b.n	43d9c <_vfiprintf_r+0x600>
   44424:	46e6      	mov	lr, ip
   44426:	4d2a      	ldr	r5, [pc, #168]	; (444d0 <_vfiprintf_r+0xd34>)
   44428:	f7ff bba8 	b.w	43b7c <_vfiprintf_r+0x3e0>
   4442c:	1c48      	adds	r0, r1, #1
   4442e:	4d28      	ldr	r5, [pc, #160]	; (444d0 <_vfiprintf_r+0xd34>)
   44430:	e460      	b.n	43cf4 <_vfiprintf_r+0x558>
   44432:	9b06      	ldr	r3, [sp, #24]
   44434:	2500      	movs	r5, #0
   44436:	9601      	str	r6, [sp, #4]
   44438:	781c      	ldrb	r4, [r3, #0]
   4443a:	2301      	movs	r3, #1
   4443c:	9206      	str	r2, [sp, #24]
   4443e:	e486      	b.n	43d4e <_vfiprintf_r+0x5b2>
   44440:	7814      	ldrb	r4, [r2, #0]
   44442:	2500      	movs	r5, #0
   44444:	9306      	str	r3, [sp, #24]
   44446:	f7ff ba9e 	b.w	43986 <_vfiprintf_r+0x1ea>
   4444a:	f992 4000 	ldrsb.w	r4, [r2]
   4444e:	9306      	str	r3, [sp, #24]
   44450:	17e5      	asrs	r5, r4, #31
   44452:	4622      	mov	r2, r4
   44454:	462b      	mov	r3, r5
   44456:	f7ff bae6 	b.w	43a26 <_vfiprintf_r+0x28a>
   4445a:	780c      	ldrb	r4, [r1, #0]
   4445c:	2500      	movs	r5, #0
   4445e:	9206      	str	r2, [sp, #24]
   44460:	f7ff bac0 	b.w	439e4 <_vfiprintf_r+0x248>
   44464:	9a04      	ldr	r2, [sp, #16]
   44466:	801a      	strh	r2, [r3, #0]
   44468:	f7ff b9d3 	b.w	43812 <_vfiprintf_r+0x76>
   4446c:	4663      	mov	r3, ip
   4446e:	4d17      	ldr	r5, [pc, #92]	; (444cc <_vfiprintf_r+0xd30>)
   44470:	4684      	mov	ip, r0
   44472:	e603      	b.n	4407c <_vfiprintf_r+0x8e0>
   44474:	f8cd 800c 	str.w	r8, [sp, #12]
   44478:	4680      	mov	r8, r0
   4447a:	9406      	str	r4, [sp, #24]
   4447c:	e48e      	b.n	43d9c <_vfiprintf_r+0x600>
   4447e:	9805      	ldr	r0, [sp, #20]
   44480:	aa12      	add	r2, sp, #72	; 0x48
   44482:	9902      	ldr	r1, [sp, #8]
   44484:	f7ff f950 	bl	43728 <__sprint_r.part.0>
   44488:	2800      	cmp	r0, #0
   4448a:	f43f ae64 	beq.w	44156 <_vfiprintf_r+0x9ba>
   4448e:	e664      	b.n	4415a <_vfiprintf_r+0x9be>
   44490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   44492:	2700      	movs	r7, #0
   44494:	990d      	ldr	r1, [sp, #52]	; 0x34
   44496:	eba8 0802 	sub.w	r8, r8, r2
   4449a:	4640      	mov	r0, r8
   4449c:	f7fd fa36 	bl	4190c <strncpy>
   444a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   444a4:	b113      	cbz	r3, 444ac <_vfiprintf_r+0xd10>
   444a6:	f10a 0a01 	add.w	sl, sl, #1
   444aa:	e73e      	b.n	4432a <_vfiprintf_r+0xb8e>
   444ac:	461f      	mov	r7, r3
   444ae:	e73c      	b.n	4432a <_vfiprintf_r+0xb8e>
   444b0:	9b06      	ldr	r3, [sp, #24]
   444b2:	681a      	ldr	r2, [r3, #0]
   444b4:	3304      	adds	r3, #4
   444b6:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
   444ba:	9306      	str	r3, [sp, #24]
   444bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
   444c0:	468a      	mov	sl, r1
   444c2:	f7ff b9d8 	b.w	43876 <_vfiprintf_r+0xda>
   444c6:	bf00      	nop
   444c8:	0004c644 	.word	0x0004c644
   444cc:	0004c6ac 	.word	0x0004c6ac
   444d0:	0004c69c 	.word	0x0004c69c

000444d4 <__sbprintf>:
   444d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   444d8:	460c      	mov	r4, r1
   444da:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   444de:	4699      	mov	r9, r3
   444e0:	2500      	movs	r5, #0
   444e2:	89e3      	ldrh	r3, [r4, #14]
   444e4:	4607      	mov	r7, r0
   444e6:	8989      	ldrh	r1, [r1, #12]
   444e8:	ae1a      	add	r6, sp, #104	; 0x68
   444ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   444ee:	4690      	mov	r8, r2
   444f0:	69e3      	ldr	r3, [r4, #28]
   444f2:	f021 0102 	bic.w	r1, r1, #2
   444f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   444f8:	a816      	add	r0, sp, #88	; 0x58
   444fa:	9506      	str	r5, [sp, #24]
   444fc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   44500:	9307      	str	r3, [sp, #28]
   44502:	6a63      	ldr	r3, [r4, #36]	; 0x24
   44504:	f8ad 100c 	strh.w	r1, [sp, #12]
   44508:	9219      	str	r2, [sp, #100]	; 0x64
   4450a:	9502      	str	r5, [sp, #8]
   4450c:	9309      	str	r3, [sp, #36]	; 0x24
   4450e:	9505      	str	r5, [sp, #20]
   44510:	9600      	str	r6, [sp, #0]
   44512:	9604      	str	r6, [sp, #16]
   44514:	f001 fa7e 	bl	45a14 <__retarget_lock_init_recursive>
   44518:	464b      	mov	r3, r9
   4451a:	4642      	mov	r2, r8
   4451c:	4669      	mov	r1, sp
   4451e:	4638      	mov	r0, r7
   44520:	f7ff f93c 	bl	4379c <_vfiprintf_r>
   44524:	1e05      	subs	r5, r0, #0
   44526:	db07      	blt.n	44538 <__sbprintf+0x64>
   44528:	4638      	mov	r0, r7
   4452a:	4669      	mov	r1, sp
   4452c:	f000 fa82 	bl	44a34 <_fflush_r>
   44530:	2800      	cmp	r0, #0
   44532:	bf18      	it	ne
   44534:	f04f 35ff 	movne.w	r5, #4294967295
   44538:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   4453c:	065b      	lsls	r3, r3, #25
   4453e:	d503      	bpl.n	44548 <__sbprintf+0x74>
   44540:	89a3      	ldrh	r3, [r4, #12]
   44542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44546:	81a3      	strh	r3, [r4, #12]
   44548:	9816      	ldr	r0, [sp, #88]	; 0x58
   4454a:	f001 fa65 	bl	45a18 <__retarget_lock_close_recursive>
   4454e:	4628      	mov	r0, r5
   44550:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   44554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00044558 <_vsnprintf_r>:
   44558:	b570      	push	{r4, r5, r6, lr}
   4455a:	1e14      	subs	r4, r2, #0
   4455c:	b09a      	sub	sp, #104	; 0x68
   4455e:	4605      	mov	r5, r0
   44560:	db2c      	blt.n	445bc <_vsnprintf_r+0x64>
   44562:	461a      	mov	r2, r3
   44564:	f44f 7302 	mov.w	r3, #520	; 0x208
   44568:	9100      	str	r1, [sp, #0]
   4456a:	9104      	str	r1, [sp, #16]
   4456c:	f8ad 300c 	strh.w	r3, [sp, #12]
   44570:	d013      	beq.n	4459a <_vsnprintf_r+0x42>
   44572:	3c01      	subs	r4, #1
   44574:	f64f 76ff 	movw	r6, #65535	; 0xffff
   44578:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   4457a:	4669      	mov	r1, sp
   4457c:	9402      	str	r4, [sp, #8]
   4457e:	9405      	str	r4, [sp, #20]
   44580:	f8ad 600e 	strh.w	r6, [sp, #14]
   44584:	f7d7 f958 	bl	1b838 <_svfprintf_r>
   44588:	1c42      	adds	r2, r0, #1
   4458a:	da01      	bge.n	44590 <_vsnprintf_r+0x38>
   4458c:	238b      	movs	r3, #139	; 0x8b
   4458e:	602b      	str	r3, [r5, #0]
   44590:	9b00      	ldr	r3, [sp, #0]
   44592:	2200      	movs	r2, #0
   44594:	701a      	strb	r2, [r3, #0]
   44596:	b01a      	add	sp, #104	; 0x68
   44598:	bd70      	pop	{r4, r5, r6, pc}
   4459a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   4459e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   445a0:	4669      	mov	r1, sp
   445a2:	9402      	str	r4, [sp, #8]
   445a4:	9405      	str	r4, [sp, #20]
   445a6:	f8ad 600e 	strh.w	r6, [sp, #14]
   445aa:	f7d7 f945 	bl	1b838 <_svfprintf_r>
   445ae:	1c43      	adds	r3, r0, #1
   445b0:	db01      	blt.n	445b6 <_vsnprintf_r+0x5e>
   445b2:	b01a      	add	sp, #104	; 0x68
   445b4:	bd70      	pop	{r4, r5, r6, pc}
   445b6:	238b      	movs	r3, #139	; 0x8b
   445b8:	602b      	str	r3, [r5, #0]
   445ba:	e7fa      	b.n	445b2 <_vsnprintf_r+0x5a>
   445bc:	238b      	movs	r3, #139	; 0x8b
   445be:	f04f 30ff 	mov.w	r0, #4294967295
   445c2:	602b      	str	r3, [r5, #0]
   445c4:	e7f5      	b.n	445b2 <_vsnprintf_r+0x5a>
   445c6:	bf00      	nop

000445c8 <vsnprintf>:
   445c8:	b510      	push	{r4, lr}
   445ca:	4c06      	ldr	r4, [pc, #24]	; (445e4 <vsnprintf+0x1c>)
   445cc:	b082      	sub	sp, #8
   445ce:	9300      	str	r3, [sp, #0]
   445d0:	4613      	mov	r3, r2
   445d2:	6824      	ldr	r4, [r4, #0]
   445d4:	460a      	mov	r2, r1
   445d6:	4601      	mov	r1, r0
   445d8:	4620      	mov	r0, r4
   445da:	f7ff ffbd 	bl	44558 <_vsnprintf_r>
   445de:	b002      	add	sp, #8
   445e0:	bd10      	pop	{r4, pc}
   445e2:	bf00      	nop
   445e4:	20031bb8 	.word	0x20031bb8

000445e8 <_vsprintf_r>:
   445e8:	b570      	push	{r4, r5, r6, lr}
   445ea:	b09a      	sub	sp, #104	; 0x68
   445ec:	460d      	mov	r5, r1
   445ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   445f2:	4e07      	ldr	r6, [pc, #28]	; (44610 <_vsprintf_r+0x28>)
   445f4:	4669      	mov	r1, sp
   445f6:	9500      	str	r5, [sp, #0]
   445f8:	e9cd 5404 	strd	r5, r4, [sp, #16]
   445fc:	e9cd 4602 	strd	r4, r6, [sp, #8]
   44600:	f7d7 f91a 	bl	1b838 <_svfprintf_r>
   44604:	9b00      	ldr	r3, [sp, #0]
   44606:	2200      	movs	r2, #0
   44608:	701a      	strb	r2, [r3, #0]
   4460a:	b01a      	add	sp, #104	; 0x68
   4460c:	bd70      	pop	{r4, r5, r6, pc}
   4460e:	bf00      	nop
   44610:	ffff0208 	.word	0xffff0208

00044614 <vsprintf>:
   44614:	b410      	push	{r4}
   44616:	4c04      	ldr	r4, [pc, #16]	; (44628 <vsprintf+0x14>)
   44618:	4613      	mov	r3, r2
   4461a:	460a      	mov	r2, r1
   4461c:	4601      	mov	r1, r0
   4461e:	6820      	ldr	r0, [r4, #0]
   44620:	f85d 4b04 	ldr.w	r4, [sp], #4
   44624:	f7ff bfe0 	b.w	445e8 <_vsprintf_r>
   44628:	20031bb8 	.word	0x20031bb8

0004462c <__ascii_wctomb>:
   4462c:	b119      	cbz	r1, 44636 <__ascii_wctomb+0xa>
   4462e:	2aff      	cmp	r2, #255	; 0xff
   44630:	d803      	bhi.n	4463a <__ascii_wctomb+0xe>
   44632:	700a      	strb	r2, [r1, #0]
   44634:	2101      	movs	r1, #1
   44636:	4608      	mov	r0, r1
   44638:	4770      	bx	lr
   4463a:	238a      	movs	r3, #138	; 0x8a
   4463c:	f04f 31ff 	mov.w	r1, #4294967295
   44640:	6003      	str	r3, [r0, #0]
   44642:	e7f8      	b.n	44636 <__ascii_wctomb+0xa>

00044644 <_write_r>:
   44644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44646:	460e      	mov	r6, r1
   44648:	4c08      	ldr	r4, [pc, #32]	; (4466c <_write_r+0x28>)
   4464a:	2500      	movs	r5, #0
   4464c:	4611      	mov	r1, r2
   4464e:	4607      	mov	r7, r0
   44650:	461a      	mov	r2, r3
   44652:	4630      	mov	r0, r6
   44654:	6025      	str	r5, [r4, #0]
   44656:	f003 fb4b 	bl	47cf0 <_write>
   4465a:	1c43      	adds	r3, r0, #1
   4465c:	d000      	beq.n	44660 <_write_r+0x1c>
   4465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   44660:	6823      	ldr	r3, [r4, #0]
   44662:	2b00      	cmp	r3, #0
   44664:	d0fb      	beq.n	4465e <_write_r+0x1a>
   44666:	603b      	str	r3, [r7, #0]
   44668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4466a:	bf00      	nop
   4466c:	2002c360 	.word	0x2002c360

00044670 <__swsetup_r>:
   44670:	b538      	push	{r3, r4, r5, lr}
   44672:	4b31      	ldr	r3, [pc, #196]	; (44738 <__swsetup_r+0xc8>)
   44674:	4605      	mov	r5, r0
   44676:	460c      	mov	r4, r1
   44678:	6818      	ldr	r0, [r3, #0]
   4467a:	b110      	cbz	r0, 44682 <__swsetup_r+0x12>
   4467c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   4467e:	2b00      	cmp	r3, #0
   44680:	d03a      	beq.n	446f8 <__swsetup_r+0x88>
   44682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   44686:	b293      	uxth	r3, r2
   44688:	0718      	lsls	r0, r3, #28
   4468a:	d50c      	bpl.n	446a6 <__swsetup_r+0x36>
   4468c:	6920      	ldr	r0, [r4, #16]
   4468e:	b1a8      	cbz	r0, 446bc <__swsetup_r+0x4c>
   44690:	f013 0201 	ands.w	r2, r3, #1
   44694:	d020      	beq.n	446d8 <__swsetup_r+0x68>
   44696:	6963      	ldr	r3, [r4, #20]
   44698:	2200      	movs	r2, #0
   4469a:	425b      	negs	r3, r3
   4469c:	60a2      	str	r2, [r4, #8]
   4469e:	61a3      	str	r3, [r4, #24]
   446a0:	b300      	cbz	r0, 446e4 <__swsetup_r+0x74>
   446a2:	2000      	movs	r0, #0
   446a4:	bd38      	pop	{r3, r4, r5, pc}
   446a6:	06d9      	lsls	r1, r3, #27
   446a8:	d53d      	bpl.n	44726 <__swsetup_r+0xb6>
   446aa:	0758      	lsls	r0, r3, #29
   446ac:	d427      	bmi.n	446fe <__swsetup_r+0x8e>
   446ae:	6920      	ldr	r0, [r4, #16]
   446b0:	f042 0208 	orr.w	r2, r2, #8
   446b4:	b293      	uxth	r3, r2
   446b6:	81a2      	strh	r2, [r4, #12]
   446b8:	2800      	cmp	r0, #0
   446ba:	d1e9      	bne.n	44690 <__swsetup_r+0x20>
   446bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   446c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   446c4:	d0e4      	beq.n	44690 <__swsetup_r+0x20>
   446c6:	4628      	mov	r0, r5
   446c8:	4621      	mov	r1, r4
   446ca:	f001 f9ef 	bl	45aac <__smakebuf_r>
   446ce:	89a3      	ldrh	r3, [r4, #12]
   446d0:	6920      	ldr	r0, [r4, #16]
   446d2:	f013 0201 	ands.w	r2, r3, #1
   446d6:	d1de      	bne.n	44696 <__swsetup_r+0x26>
   446d8:	0799      	lsls	r1, r3, #30
   446da:	bf58      	it	pl
   446dc:	6962      	ldrpl	r2, [r4, #20]
   446de:	60a2      	str	r2, [r4, #8]
   446e0:	2800      	cmp	r0, #0
   446e2:	d1de      	bne.n	446a2 <__swsetup_r+0x32>
   446e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   446e8:	061a      	lsls	r2, r3, #24
   446ea:	d5db      	bpl.n	446a4 <__swsetup_r+0x34>
   446ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   446f0:	f04f 30ff 	mov.w	r0, #4294967295
   446f4:	81a3      	strh	r3, [r4, #12]
   446f6:	bd38      	pop	{r3, r4, r5, pc}
   446f8:	f000 f9f8 	bl	44aec <__sinit>
   446fc:	e7c1      	b.n	44682 <__swsetup_r+0x12>
   446fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   44700:	b151      	cbz	r1, 44718 <__swsetup_r+0xa8>
   44702:	f104 0340 	add.w	r3, r4, #64	; 0x40
   44706:	4299      	cmp	r1, r3
   44708:	d004      	beq.n	44714 <__swsetup_r+0xa4>
   4470a:	4628      	mov	r0, r5
   4470c:	f000 fafc 	bl	44d08 <_free_r>
   44710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   44714:	2300      	movs	r3, #0
   44716:	6323      	str	r3, [r4, #48]	; 0x30
   44718:	2300      	movs	r3, #0
   4471a:	6920      	ldr	r0, [r4, #16]
   4471c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   44720:	e9c4 0300 	strd	r0, r3, [r4]
   44724:	e7c4      	b.n	446b0 <__swsetup_r+0x40>
   44726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   4472a:	2309      	movs	r3, #9
   4472c:	f04f 30ff 	mov.w	r0, #4294967295
   44730:	602b      	str	r3, [r5, #0]
   44732:	81a2      	strh	r2, [r4, #12]
   44734:	bd38      	pop	{r3, r4, r5, pc}
   44736:	bf00      	nop
   44738:	20031bb8 	.word	0x20031bb8

0004473c <abort>:
   4473c:	b508      	push	{r3, lr}
   4473e:	2006      	movs	r0, #6
   44740:	f001 ffb4 	bl	466ac <raise>
   44744:	2001      	movs	r0, #1
   44746:	f7dd ff3f 	bl	225c8 <_exit>
   4474a:	bf00      	nop

0004474c <__chk_fail>:
   4474c:	b500      	push	{lr}
   4474e:	4d0c      	ldr	r5, [pc, #48]	; (44780 <__chk_fail+0x34>)
   44750:	b08d      	sub	sp, #52	; 0x34
   44752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   44754:	466c      	mov	r4, sp
   44756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   44758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   4475a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   4475c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   44760:	c407      	stmia	r4!, {r0, r1, r2}
   44762:	4668      	mov	r0, sp
   44764:	8023      	strh	r3, [r4, #0]
   44766:	f7fd f85d 	bl	41824 <strlen>
   4476a:	4669      	mov	r1, sp
   4476c:	4602      	mov	r2, r0
   4476e:	2002      	movs	r0, #2
   44770:	f003 fabe 	bl	47cf0 <_write>
   44774:	2006      	movs	r0, #6
   44776:	f001 ff99 	bl	466ac <raise>
   4477a:	207f      	movs	r0, #127	; 0x7f
   4477c:	f7dd ff24 	bl	225c8 <_exit>
   44780:	0004c6bc 	.word	0x0004c6bc

00044784 <_close_r>:
   44784:	b538      	push	{r3, r4, r5, lr}
   44786:	2300      	movs	r3, #0
   44788:	4c06      	ldr	r4, [pc, #24]	; (447a4 <_close_r+0x20>)
   4478a:	4605      	mov	r5, r0
   4478c:	4608      	mov	r0, r1
   4478e:	6023      	str	r3, [r4, #0]
   44790:	f003 fab2 	bl	47cf8 <_close>
   44794:	1c43      	adds	r3, r0, #1
   44796:	d000      	beq.n	4479a <_close_r+0x16>
   44798:	bd38      	pop	{r3, r4, r5, pc}
   4479a:	6823      	ldr	r3, [r4, #0]
   4479c:	2b00      	cmp	r3, #0
   4479e:	d0fb      	beq.n	44798 <_close_r+0x14>
   447a0:	602b      	str	r3, [r5, #0]
   447a2:	bd38      	pop	{r3, r4, r5, pc}
   447a4:	2002c360 	.word	0x2002c360

000447a8 <quorem>:
   447a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   447ac:	6903      	ldr	r3, [r0, #16]
   447ae:	b085      	sub	sp, #20
   447b0:	690e      	ldr	r6, [r1, #16]
   447b2:	9101      	str	r1, [sp, #4]
   447b4:	42b3      	cmp	r3, r6
   447b6:	f2c0 808f 	blt.w	448d8 <quorem+0x130>
   447ba:	3e01      	subs	r6, #1
   447bc:	f101 0814 	add.w	r8, r1, #20
   447c0:	f100 0914 	add.w	r9, r0, #20
   447c4:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   447c8:	00b2      	lsls	r2, r6, #2
   447ca:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   447ce:	3301      	adds	r3, #1
   447d0:	9202      	str	r2, [sp, #8]
   447d2:	eb08 0a02 	add.w	sl, r8, r2
   447d6:	444a      	add	r2, r9
   447d8:	fbb7 f7f3 	udiv	r7, r7, r3
   447dc:	9203      	str	r2, [sp, #12]
   447de:	2f00      	cmp	r7, #0
   447e0:	d03e      	beq.n	44860 <quorem+0xb8>
   447e2:	2400      	movs	r4, #0
   447e4:	46c6      	mov	lr, r8
   447e6:	46cc      	mov	ip, r9
   447e8:	46a3      	mov	fp, r4
   447ea:	f85e 3b04 	ldr.w	r3, [lr], #4
   447ee:	f8dc 1000 	ldr.w	r1, [ip]
   447f2:	b29a      	uxth	r2, r3
   447f4:	45f2      	cmp	sl, lr
   447f6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   447fa:	fb07 4202 	mla	r2, r7, r2, r4
   447fe:	b28d      	uxth	r5, r1
   44800:	ea4f 4412 	mov.w	r4, r2, lsr #16
   44804:	b292      	uxth	r2, r2
   44806:	fb07 4403 	mla	r4, r7, r3, r4
   4480a:	ebab 0302 	sub.w	r3, fp, r2
   4480e:	fa1f fb84 	uxth.w	fp, r4
   44812:	442b      	add	r3, r5
   44814:	ea4f 4414 	mov.w	r4, r4, lsr #16
   44818:	ebcb 4b11 	rsb	fp, fp, r1, lsr #16
   4481c:	b29a      	uxth	r2, r3
   4481e:	eb0b 4b23 	add.w	fp, fp, r3, asr #16
   44822:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   44826:	ea4f 4b2b 	mov.w	fp, fp, asr #16
   4482a:	f84c 2b04 	str.w	r2, [ip], #4
   4482e:	d2dc      	bcs.n	447ea <quorem+0x42>
   44830:	9b02      	ldr	r3, [sp, #8]
   44832:	f859 3003 	ldr.w	r3, [r9, r3]
   44836:	b99b      	cbnz	r3, 44860 <quorem+0xb8>
   44838:	9a03      	ldr	r2, [sp, #12]
   4483a:	1f13      	subs	r3, r2, #4
   4483c:	4599      	cmp	r9, r3
   4483e:	d20e      	bcs.n	4485e <quorem+0xb6>
   44840:	f852 3c04 	ldr.w	r3, [r2, #-4]
   44844:	b95b      	cbnz	r3, 4485e <quorem+0xb6>
   44846:	f1a2 0308 	sub.w	r3, r2, #8
   4484a:	e001      	b.n	44850 <quorem+0xa8>
   4484c:	6812      	ldr	r2, [r2, #0]
   4484e:	b932      	cbnz	r2, 4485e <quorem+0xb6>
   44850:	4599      	cmp	r9, r3
   44852:	461a      	mov	r2, r3
   44854:	f106 36ff 	add.w	r6, r6, #4294967295
   44858:	f1a3 0304 	sub.w	r3, r3, #4
   4485c:	d3f6      	bcc.n	4484c <quorem+0xa4>
   4485e:	6106      	str	r6, [r0, #16]
   44860:	9901      	ldr	r1, [sp, #4]
   44862:	4604      	mov	r4, r0
   44864:	f001 fc68 	bl	46138 <__mcmp>
   44868:	2800      	cmp	r0, #0
   4486a:	db31      	blt.n	448d0 <quorem+0x128>
   4486c:	2000      	movs	r0, #0
   4486e:	3701      	adds	r7, #1
   44870:	464d      	mov	r5, r9
   44872:	4684      	mov	ip, r0
   44874:	f858 3b04 	ldr.w	r3, [r8], #4
   44878:	682a      	ldr	r2, [r5, #0]
   4487a:	b298      	uxth	r0, r3
   4487c:	45c2      	cmp	sl, r8
   4487e:	b291      	uxth	r1, r2
   44880:	ebac 0000 	sub.w	r0, ip, r0
   44884:	ea4f 4313 	mov.w	r3, r3, lsr #16
   44888:	4408      	add	r0, r1
   4488a:	ebc3 4312 	rsb	r3, r3, r2, lsr #16
   4488e:	eb03 4220 	add.w	r2, r3, r0, asr #16
   44892:	b283      	uxth	r3, r0
   44894:	ea4f 4c22 	mov.w	ip, r2, asr #16
   44898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4489c:	f845 3b04 	str.w	r3, [r5], #4
   448a0:	d2e8      	bcs.n	44874 <quorem+0xcc>
   448a2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   448a6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   448aa:	b98a      	cbnz	r2, 448d0 <quorem+0x128>
   448ac:	1f1a      	subs	r2, r3, #4
   448ae:	4591      	cmp	r9, r2
   448b0:	d20d      	bcs.n	448ce <quorem+0x126>
   448b2:	f853 2c04 	ldr.w	r2, [r3, #-4]
   448b6:	b952      	cbnz	r2, 448ce <quorem+0x126>
   448b8:	3b08      	subs	r3, #8
   448ba:	e001      	b.n	448c0 <quorem+0x118>
   448bc:	6812      	ldr	r2, [r2, #0]
   448be:	b932      	cbnz	r2, 448ce <quorem+0x126>
   448c0:	4599      	cmp	r9, r3
   448c2:	461a      	mov	r2, r3
   448c4:	f106 36ff 	add.w	r6, r6, #4294967295
   448c8:	f1a3 0304 	sub.w	r3, r3, #4
   448cc:	d3f6      	bcc.n	448bc <quorem+0x114>
   448ce:	6126      	str	r6, [r4, #16]
   448d0:	4638      	mov	r0, r7
   448d2:	b005      	add	sp, #20
   448d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   448d8:	2000      	movs	r0, #0
   448da:	b005      	add	sp, #20
   448dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000448e0 <__sflush_r>:
   448e0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   448e4:	b29a      	uxth	r2, r3
   448e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   448ea:	460c      	mov	r4, r1
   448ec:	0711      	lsls	r1, r2, #28
   448ee:	4680      	mov	r8, r0
   448f0:	d444      	bmi.n	4497c <__sflush_r+0x9c>
   448f2:	6862      	ldr	r2, [r4, #4]
   448f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   448f8:	2a00      	cmp	r2, #0
   448fa:	81a3      	strh	r3, [r4, #12]
   448fc:	dd59      	ble.n	449b2 <__sflush_r+0xd2>
   448fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   44900:	2d00      	cmp	r5, #0
   44902:	d053      	beq.n	449ac <__sflush_r+0xcc>
   44904:	2200      	movs	r2, #0
   44906:	b29b      	uxth	r3, r3
   44908:	f8d8 6000 	ldr.w	r6, [r8]
   4490c:	69e1      	ldr	r1, [r4, #28]
   4490e:	f8c8 2000 	str.w	r2, [r8]
   44912:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   44916:	f040 8083 	bne.w	44a20 <__sflush_r+0x140>
   4491a:	2301      	movs	r3, #1
   4491c:	4640      	mov	r0, r8
   4491e:	47a8      	blx	r5
   44920:	1c42      	adds	r2, r0, #1
   44922:	d04a      	beq.n	449ba <__sflush_r+0xda>
   44924:	89a3      	ldrh	r3, [r4, #12]
   44926:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   44928:	69e1      	ldr	r1, [r4, #28]
   4492a:	075b      	lsls	r3, r3, #29
   4492c:	d505      	bpl.n	4493a <__sflush_r+0x5a>
   4492e:	6862      	ldr	r2, [r4, #4]
   44930:	6b23      	ldr	r3, [r4, #48]	; 0x30
   44932:	1a80      	subs	r0, r0, r2
   44934:	b10b      	cbz	r3, 4493a <__sflush_r+0x5a>
   44936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   44938:	1ac0      	subs	r0, r0, r3
   4493a:	4602      	mov	r2, r0
   4493c:	2300      	movs	r3, #0
   4493e:	4640      	mov	r0, r8
   44940:	47a8      	blx	r5
   44942:	1c47      	adds	r7, r0, #1
   44944:	d045      	beq.n	449d2 <__sflush_r+0xf2>
   44946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   4494a:	2100      	movs	r1, #0
   4494c:	6922      	ldr	r2, [r4, #16]
   4494e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   44952:	81a3      	strh	r3, [r4, #12]
   44954:	04db      	lsls	r3, r3, #19
   44956:	e9c4 2100 	strd	r2, r1, [r4]
   4495a:	d500      	bpl.n	4495e <__sflush_r+0x7e>
   4495c:	6520      	str	r0, [r4, #80]	; 0x50
   4495e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   44960:	f8c8 6000 	str.w	r6, [r8]
   44964:	b311      	cbz	r1, 449ac <__sflush_r+0xcc>
   44966:	f104 0340 	add.w	r3, r4, #64	; 0x40
   4496a:	4299      	cmp	r1, r3
   4496c:	d002      	beq.n	44974 <__sflush_r+0x94>
   4496e:	4640      	mov	r0, r8
   44970:	f000 f9ca 	bl	44d08 <_free_r>
   44974:	2000      	movs	r0, #0
   44976:	6320      	str	r0, [r4, #48]	; 0x30
   44978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4497c:	6926      	ldr	r6, [r4, #16]
   4497e:	b1ae      	cbz	r6, 449ac <__sflush_r+0xcc>
   44980:	0792      	lsls	r2, r2, #30
   44982:	6825      	ldr	r5, [r4, #0]
   44984:	6026      	str	r6, [r4, #0]
   44986:	bf0c      	ite	eq
   44988:	6963      	ldreq	r3, [r4, #20]
   4498a:	2300      	movne	r3, #0
   4498c:	1bad      	subs	r5, r5, r6
   4498e:	60a3      	str	r3, [r4, #8]
   44990:	e00a      	b.n	449a8 <__sflush_r+0xc8>
   44992:	462b      	mov	r3, r5
   44994:	4632      	mov	r2, r6
   44996:	6a67      	ldr	r7, [r4, #36]	; 0x24
   44998:	4640      	mov	r0, r8
   4499a:	69e1      	ldr	r1, [r4, #28]
   4499c:	47b8      	blx	r7
   4499e:	2800      	cmp	r0, #0
   449a0:	eba5 0500 	sub.w	r5, r5, r0
   449a4:	4406      	add	r6, r0
   449a6:	dd2b      	ble.n	44a00 <__sflush_r+0x120>
   449a8:	2d00      	cmp	r5, #0
   449aa:	dcf2      	bgt.n	44992 <__sflush_r+0xb2>
   449ac:	2000      	movs	r0, #0
   449ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   449b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   449b4:	2a00      	cmp	r2, #0
   449b6:	dca2      	bgt.n	448fe <__sflush_r+0x1e>
   449b8:	e7f8      	b.n	449ac <__sflush_r+0xcc>
   449ba:	f8d8 3000 	ldr.w	r3, [r8]
   449be:	2b00      	cmp	r3, #0
   449c0:	d0b0      	beq.n	44924 <__sflush_r+0x44>
   449c2:	2b1d      	cmp	r3, #29
   449c4:	d001      	beq.n	449ca <__sflush_r+0xea>
   449c6:	2b16      	cmp	r3, #22
   449c8:	d12c      	bne.n	44a24 <__sflush_r+0x144>
   449ca:	f8c8 6000 	str.w	r6, [r8]
   449ce:	2000      	movs	r0, #0
   449d0:	e7ed      	b.n	449ae <__sflush_r+0xce>
   449d2:	f8d8 1000 	ldr.w	r1, [r8]
   449d6:	291d      	cmp	r1, #29
   449d8:	d81a      	bhi.n	44a10 <__sflush_r+0x130>
   449da:	4b15      	ldr	r3, [pc, #84]	; (44a30 <__sflush_r+0x150>)
   449dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   449e0:	40cb      	lsrs	r3, r1
   449e2:	43db      	mvns	r3, r3
   449e4:	f013 0301 	ands.w	r3, r3, #1
   449e8:	d114      	bne.n	44a14 <__sflush_r+0x134>
   449ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   449ee:	6925      	ldr	r5, [r4, #16]
   449f0:	6063      	str	r3, [r4, #4]
   449f2:	6025      	str	r5, [r4, #0]
   449f4:	04d5      	lsls	r5, r2, #19
   449f6:	81a2      	strh	r2, [r4, #12]
   449f8:	d5b1      	bpl.n	4495e <__sflush_r+0x7e>
   449fa:	2900      	cmp	r1, #0
   449fc:	d1af      	bne.n	4495e <__sflush_r+0x7e>
   449fe:	e7ad      	b.n	4495c <__sflush_r+0x7c>
   44a00:	89a3      	ldrh	r3, [r4, #12]
   44a02:	f04f 30ff 	mov.w	r0, #4294967295
   44a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44a0a:	81a3      	strh	r3, [r4, #12]
   44a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   44a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   44a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   44a18:	f04f 30ff 	mov.w	r0, #4294967295
   44a1c:	81a2      	strh	r2, [r4, #12]
   44a1e:	e7c6      	b.n	449ae <__sflush_r+0xce>
   44a20:	6d20      	ldr	r0, [r4, #80]	; 0x50
   44a22:	e782      	b.n	4492a <__sflush_r+0x4a>
   44a24:	89a3      	ldrh	r3, [r4, #12]
   44a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44a2a:	81a3      	strh	r3, [r4, #12]
   44a2c:	e7bf      	b.n	449ae <__sflush_r+0xce>
   44a2e:	bf00      	nop
   44a30:	20400001 	.word	0x20400001

00044a34 <_fflush_r>:
   44a34:	b538      	push	{r3, r4, r5, lr}
   44a36:	460d      	mov	r5, r1
   44a38:	4604      	mov	r4, r0
   44a3a:	b108      	cbz	r0, 44a40 <_fflush_r+0xc>
   44a3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   44a3e:	b1a3      	cbz	r3, 44a6a <_fflush_r+0x36>
   44a40:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   44a44:	b1b8      	cbz	r0, 44a76 <_fflush_r+0x42>
   44a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   44a48:	07db      	lsls	r3, r3, #31
   44a4a:	d401      	bmi.n	44a50 <_fflush_r+0x1c>
   44a4c:	0581      	lsls	r1, r0, #22
   44a4e:	d51a      	bpl.n	44a86 <_fflush_r+0x52>
   44a50:	4620      	mov	r0, r4
   44a52:	4629      	mov	r1, r5
   44a54:	f7ff ff44 	bl	448e0 <__sflush_r>
   44a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   44a5a:	4604      	mov	r4, r0
   44a5c:	07da      	lsls	r2, r3, #31
   44a5e:	d402      	bmi.n	44a66 <_fflush_r+0x32>
   44a60:	89ab      	ldrh	r3, [r5, #12]
   44a62:	059b      	lsls	r3, r3, #22
   44a64:	d50a      	bpl.n	44a7c <_fflush_r+0x48>
   44a66:	4620      	mov	r0, r4
   44a68:	bd38      	pop	{r3, r4, r5, pc}
   44a6a:	f000 f83f 	bl	44aec <__sinit>
   44a6e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   44a72:	2800      	cmp	r0, #0
   44a74:	d1e7      	bne.n	44a46 <_fflush_r+0x12>
   44a76:	4604      	mov	r4, r0
   44a78:	4620      	mov	r0, r4
   44a7a:	bd38      	pop	{r3, r4, r5, pc}
   44a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   44a7e:	f000 ffcf 	bl	45a20 <__retarget_lock_release_recursive>
   44a82:	4620      	mov	r0, r4
   44a84:	bd38      	pop	{r3, r4, r5, pc}
   44a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
   44a88:	f000 ffc8 	bl	45a1c <__retarget_lock_acquire_recursive>
   44a8c:	e7e0      	b.n	44a50 <_fflush_r+0x1c>
   44a8e:	bf00      	nop

00044a90 <std>:
   44a90:	b538      	push	{r3, r4, r5, lr}
   44a92:	4604      	mov	r4, r0
   44a94:	2300      	movs	r3, #0
   44a96:	8181      	strh	r1, [r0, #12]
   44a98:	305c      	adds	r0, #92	; 0x5c
   44a9a:	81e2      	strh	r2, [r4, #14]
   44a9c:	4619      	mov	r1, r3
   44a9e:	6023      	str	r3, [r4, #0]
   44aa0:	2208      	movs	r2, #8
   44aa2:	6663      	str	r3, [r4, #100]	; 0x64
   44aa4:	61a3      	str	r3, [r4, #24]
   44aa6:	4d0a      	ldr	r5, [pc, #40]	; (44ad0 <std+0x40>)
   44aa8:	e9c4 3301 	strd	r3, r3, [r4, #4]
   44aac:	e9c4 3304 	strd	r3, r3, [r4, #16]
   44ab0:	f7fc fac2 	bl	41038 <memset>
   44ab4:	4b07      	ldr	r3, [pc, #28]	; (44ad4 <std+0x44>)
   44ab6:	4908      	ldr	r1, [pc, #32]	; (44ad8 <std+0x48>)
   44ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   44abc:	4a07      	ldr	r2, [pc, #28]	; (44adc <std+0x4c>)
   44abe:	62e3      	str	r3, [r4, #44]	; 0x2c
   44ac0:	e9c4 4507 	strd	r4, r5, [r4, #28]
   44ac4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   44ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44acc:	f000 bfa2 	b.w	45a14 <__retarget_lock_init_recursive>
   44ad0:	000415ad 	.word	0x000415ad
   44ad4:	00041635 	.word	0x00041635
   44ad8:	000415d5 	.word	0x000415d5
   44adc:	00041611 	.word	0x00041611

00044ae0 <_cleanup_r>:
   44ae0:	4901      	ldr	r1, [pc, #4]	; (44ae8 <_cleanup_r+0x8>)
   44ae2:	f000 bb8f 	b.w	45204 <_fwalk_reent>
   44ae6:	bf00      	nop
   44ae8:	00046eb9 	.word	0x00046eb9

00044aec <__sinit>:
   44aec:	b510      	push	{r4, lr}
   44aee:	4604      	mov	r4, r0
   44af0:	4814      	ldr	r0, [pc, #80]	; (44b44 <__sinit+0x58>)
   44af2:	f000 ff93 	bl	45a1c <__retarget_lock_acquire_recursive>
   44af6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   44af8:	b9fa      	cbnz	r2, 44b3a <__sinit+0x4e>
   44afa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   44afe:	4812      	ldr	r0, [pc, #72]	; (44b48 <__sinit+0x5c>)
   44b00:	2103      	movs	r1, #3
   44b02:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   44b06:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   44b0a:	63e0      	str	r0, [r4, #60]	; 0x3c
   44b0c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   44b10:	2104      	movs	r1, #4
   44b12:	6860      	ldr	r0, [r4, #4]
   44b14:	f7ff ffbc 	bl	44a90 <std>
   44b18:	68a0      	ldr	r0, [r4, #8]
   44b1a:	2201      	movs	r2, #1
   44b1c:	2109      	movs	r1, #9
   44b1e:	f7ff ffb7 	bl	44a90 <std>
   44b22:	68e0      	ldr	r0, [r4, #12]
   44b24:	2202      	movs	r2, #2
   44b26:	2112      	movs	r1, #18
   44b28:	f7ff ffb2 	bl	44a90 <std>
   44b2c:	2301      	movs	r3, #1
   44b2e:	4805      	ldr	r0, [pc, #20]	; (44b44 <__sinit+0x58>)
   44b30:	63a3      	str	r3, [r4, #56]	; 0x38
   44b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44b36:	f000 bf73 	b.w	45a20 <__retarget_lock_release_recursive>
   44b3a:	4802      	ldr	r0, [pc, #8]	; (44b44 <__sinit+0x58>)
   44b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44b40:	f000 bf6e 	b.w	45a20 <__retarget_lock_release_recursive>
   44b44:	2002c348 	.word	0x2002c348
   44b48:	00044ae1 	.word	0x00044ae1

00044b4c <__sfp_lock_acquire>:
   44b4c:	4801      	ldr	r0, [pc, #4]	; (44b54 <__sfp_lock_acquire+0x8>)
   44b4e:	f000 bf65 	b.w	45a1c <__retarget_lock_acquire_recursive>
   44b52:	bf00      	nop
   44b54:	2002c35c 	.word	0x2002c35c

00044b58 <__sfp_lock_release>:
   44b58:	4801      	ldr	r0, [pc, #4]	; (44b60 <__sfp_lock_release+0x8>)
   44b5a:	f000 bf61 	b.w	45a20 <__retarget_lock_release_recursive>
   44b5e:	bf00      	nop
   44b60:	2002c35c 	.word	0x2002c35c

00044b64 <__fputwc>:
   44b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44b68:	b082      	sub	sp, #8
   44b6a:	4681      	mov	r9, r0
   44b6c:	4688      	mov	r8, r1
   44b6e:	4614      	mov	r4, r2
   44b70:	f7fb fee8 	bl	40944 <__locale_mb_cur_max>
   44b74:	2801      	cmp	r0, #1
   44b76:	d103      	bne.n	44b80 <__fputwc+0x1c>
   44b78:	f108 33ff 	add.w	r3, r8, #4294967295
   44b7c:	2bfe      	cmp	r3, #254	; 0xfe
   44b7e:	d92f      	bls.n	44be0 <__fputwc+0x7c>
   44b80:	4642      	mov	r2, r8
   44b82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   44b86:	a901      	add	r1, sp, #4
   44b88:	4648      	mov	r0, r9
   44b8a:	f002 f935 	bl	46df8 <_wcrtomb_r>
   44b8e:	1c42      	adds	r2, r0, #1
   44b90:	4606      	mov	r6, r0
   44b92:	d02f      	beq.n	44bf4 <__fputwc+0x90>
   44b94:	b350      	cbz	r0, 44bec <__fputwc+0x88>
   44b96:	f89d c004 	ldrb.w	ip, [sp, #4]
   44b9a:	2500      	movs	r5, #0
   44b9c:	f10d 0a04 	add.w	sl, sp, #4
   44ba0:	e009      	b.n	44bb6 <__fputwc+0x52>
   44ba2:	6823      	ldr	r3, [r4, #0]
   44ba4:	1c5a      	adds	r2, r3, #1
   44ba6:	6022      	str	r2, [r4, #0]
   44ba8:	f883 c000 	strb.w	ip, [r3]
   44bac:	3501      	adds	r5, #1
   44bae:	42b5      	cmp	r5, r6
   44bb0:	d21c      	bcs.n	44bec <__fputwc+0x88>
   44bb2:	f815 c00a 	ldrb.w	ip, [r5, sl]
   44bb6:	68a3      	ldr	r3, [r4, #8]
   44bb8:	3b01      	subs	r3, #1
   44bba:	2b00      	cmp	r3, #0
   44bbc:	60a3      	str	r3, [r4, #8]
   44bbe:	daf0      	bge.n	44ba2 <__fputwc+0x3e>
   44bc0:	69a7      	ldr	r7, [r4, #24]
   44bc2:	4661      	mov	r1, ip
   44bc4:	4622      	mov	r2, r4
   44bc6:	4648      	mov	r0, r9
   44bc8:	42bb      	cmp	r3, r7
   44bca:	db02      	blt.n	44bd2 <__fputwc+0x6e>
   44bcc:	f1bc 0f0a 	cmp.w	ip, #10
   44bd0:	d1e7      	bne.n	44ba2 <__fputwc+0x3e>
   44bd2:	f002 f8b9 	bl	46d48 <__swbuf_r>
   44bd6:	1c43      	adds	r3, r0, #1
   44bd8:	d1e8      	bne.n	44bac <__fputwc+0x48>
   44bda:	b002      	add	sp, #8
   44bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44be0:	fa5f fc88 	uxtb.w	ip, r8
   44be4:	4606      	mov	r6, r0
   44be6:	f88d c004 	strb.w	ip, [sp, #4]
   44bea:	e7d6      	b.n	44b9a <__fputwc+0x36>
   44bec:	4640      	mov	r0, r8
   44bee:	b002      	add	sp, #8
   44bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44bf4:	89a3      	ldrh	r3, [r4, #12]
   44bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44bfa:	81a3      	strh	r3, [r4, #12]
   44bfc:	b002      	add	sp, #8
   44bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44c02:	bf00      	nop

00044c04 <_fputwc_r>:
   44c04:	b530      	push	{r4, r5, lr}
   44c06:	4605      	mov	r5, r0
   44c08:	6e50      	ldr	r0, [r2, #100]	; 0x64
   44c0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   44c0e:	4614      	mov	r4, r2
   44c10:	07c0      	lsls	r0, r0, #31
   44c12:	b083      	sub	sp, #12
   44c14:	b29a      	uxth	r2, r3
   44c16:	d401      	bmi.n	44c1c <_fputwc_r+0x18>
   44c18:	0590      	lsls	r0, r2, #22
   44c1a:	d51c      	bpl.n	44c56 <_fputwc_r+0x52>
   44c1c:	0490      	lsls	r0, r2, #18
   44c1e:	d406      	bmi.n	44c2e <_fputwc_r+0x2a>
   44c20:	6e62      	ldr	r2, [r4, #100]	; 0x64
   44c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   44c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   44c2a:	81a3      	strh	r3, [r4, #12]
   44c2c:	6662      	str	r2, [r4, #100]	; 0x64
   44c2e:	4628      	mov	r0, r5
   44c30:	4622      	mov	r2, r4
   44c32:	f7ff ff97 	bl	44b64 <__fputwc>
   44c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
   44c38:	4605      	mov	r5, r0
   44c3a:	07da      	lsls	r2, r3, #31
   44c3c:	d402      	bmi.n	44c44 <_fputwc_r+0x40>
   44c3e:	89a3      	ldrh	r3, [r4, #12]
   44c40:	059b      	lsls	r3, r3, #22
   44c42:	d502      	bpl.n	44c4a <_fputwc_r+0x46>
   44c44:	4628      	mov	r0, r5
   44c46:	b003      	add	sp, #12
   44c48:	bd30      	pop	{r4, r5, pc}
   44c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   44c4c:	f000 fee8 	bl	45a20 <__retarget_lock_release_recursive>
   44c50:	4628      	mov	r0, r5
   44c52:	b003      	add	sp, #12
   44c54:	bd30      	pop	{r4, r5, pc}
   44c56:	6da0      	ldr	r0, [r4, #88]	; 0x58
   44c58:	9101      	str	r1, [sp, #4]
   44c5a:	f000 fedf 	bl	45a1c <__retarget_lock_acquire_recursive>
   44c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   44c62:	9901      	ldr	r1, [sp, #4]
   44c64:	b29a      	uxth	r2, r3
   44c66:	e7d9      	b.n	44c1c <_fputwc_r+0x18>

00044c68 <_malloc_trim_r>:
   44c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44c6a:	4f23      	ldr	r7, [pc, #140]	; (44cf8 <_malloc_trim_r+0x90>)
   44c6c:	460d      	mov	r5, r1
   44c6e:	4606      	mov	r6, r0
   44c70:	f7fc fa2c 	bl	410cc <__malloc_lock>
   44c74:	68b9      	ldr	r1, [r7, #8]
   44c76:	f640 73ef 	movw	r3, #4079	; 0xfef
   44c7a:	4a20      	ldr	r2, [pc, #128]	; (44cfc <_malloc_trim_r+0x94>)
   44c7c:	684c      	ldr	r4, [r1, #4]
   44c7e:	1b5b      	subs	r3, r3, r5
   44c80:	f024 0403 	bic.w	r4, r4, #3
   44c84:	4423      	add	r3, r4
   44c86:	401a      	ands	r2, r3
   44c88:	f5a2 5580 	sub.w	r5, r2, #4096	; 0x1000
   44c8c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   44c90:	db07      	blt.n	44ca2 <_malloc_trim_r+0x3a>
   44c92:	2100      	movs	r1, #0
   44c94:	4630      	mov	r0, r6
   44c96:	f7fc fbe3 	bl	41460 <_sbrk_r>
   44c9a:	68bb      	ldr	r3, [r7, #8]
   44c9c:	4423      	add	r3, r4
   44c9e:	4298      	cmp	r0, r3
   44ca0:	d004      	beq.n	44cac <_malloc_trim_r+0x44>
   44ca2:	4630      	mov	r0, r6
   44ca4:	f7fc fa18 	bl	410d8 <__malloc_unlock>
   44ca8:	2000      	movs	r0, #0
   44caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   44cac:	4269      	negs	r1, r5
   44cae:	4630      	mov	r0, r6
   44cb0:	f7fc fbd6 	bl	41460 <_sbrk_r>
   44cb4:	3001      	adds	r0, #1
   44cb6:	d00d      	beq.n	44cd4 <_malloc_trim_r+0x6c>
   44cb8:	4b11      	ldr	r3, [pc, #68]	; (44d00 <_malloc_trim_r+0x98>)
   44cba:	1b64      	subs	r4, r4, r5
   44cbc:	68b9      	ldr	r1, [r7, #8]
   44cbe:	4630      	mov	r0, r6
   44cc0:	681a      	ldr	r2, [r3, #0]
   44cc2:	f044 0401 	orr.w	r4, r4, #1
   44cc6:	1b52      	subs	r2, r2, r5
   44cc8:	604c      	str	r4, [r1, #4]
   44cca:	601a      	str	r2, [r3, #0]
   44ccc:	f7fc fa04 	bl	410d8 <__malloc_unlock>
   44cd0:	2001      	movs	r0, #1
   44cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   44cd4:	2100      	movs	r1, #0
   44cd6:	4630      	mov	r0, r6
   44cd8:	f7fc fbc2 	bl	41460 <_sbrk_r>
   44cdc:	68ba      	ldr	r2, [r7, #8]
   44cde:	1a83      	subs	r3, r0, r2
   44ce0:	2b0f      	cmp	r3, #15
   44ce2:	ddde      	ble.n	44ca2 <_malloc_trim_r+0x3a>
   44ce4:	4c07      	ldr	r4, [pc, #28]	; (44d04 <_malloc_trim_r+0x9c>)
   44ce6:	f043 0301 	orr.w	r3, r3, #1
   44cea:	4905      	ldr	r1, [pc, #20]	; (44d00 <_malloc_trim_r+0x98>)
   44cec:	6824      	ldr	r4, [r4, #0]
   44cee:	6053      	str	r3, [r2, #4]
   44cf0:	1b00      	subs	r0, r0, r4
   44cf2:	6008      	str	r0, [r1, #0]
   44cf4:	e7d5      	b.n	44ca2 <_malloc_trim_r+0x3a>
   44cf6:	bf00      	nop
   44cf8:	20031d28 	.word	0x20031d28
   44cfc:	fffff000 	.word	0xfffff000
   44d00:	2002a698 	.word	0x2002a698
   44d04:	20032130 	.word	0x20032130

00044d08 <_free_r>:
   44d08:	2900      	cmp	r1, #0
   44d0a:	d052      	beq.n	44db2 <_free_r+0xaa>
   44d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44d0e:	460d      	mov	r5, r1
   44d10:	4606      	mov	r6, r0
   44d12:	f7fc f9db 	bl	410cc <__malloc_lock>
   44d16:	4f71      	ldr	r7, [pc, #452]	; (44edc <_free_r+0x1d4>)
   44d18:	f855 cc04 	ldr.w	ip, [r5, #-4]
   44d1c:	f1a5 0108 	sub.w	r1, r5, #8
   44d20:	68b8      	ldr	r0, [r7, #8]
   44d22:	f02c 0301 	bic.w	r3, ip, #1
   44d26:	18ca      	adds	r2, r1, r3
   44d28:	6854      	ldr	r4, [r2, #4]
   44d2a:	4290      	cmp	r0, r2
   44d2c:	f024 0403 	bic.w	r4, r4, #3
   44d30:	d052      	beq.n	44dd8 <_free_r+0xd0>
   44d32:	f01c 0f01 	tst.w	ip, #1
   44d36:	6054      	str	r4, [r2, #4]
   44d38:	eb02 0004 	add.w	r0, r2, r4
   44d3c:	d13a      	bne.n	44db4 <_free_r+0xac>
   44d3e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   44d42:	f107 0c08 	add.w	ip, r7, #8
   44d46:	6840      	ldr	r0, [r0, #4]
   44d48:	1b49      	subs	r1, r1, r5
   44d4a:	442b      	add	r3, r5
   44d4c:	f000 0001 	and.w	r0, r0, #1
   44d50:	688d      	ldr	r5, [r1, #8]
   44d52:	4565      	cmp	r5, ip
   44d54:	d075      	beq.n	44e42 <_free_r+0x13a>
   44d56:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   44d5a:	f8c5 c00c 	str.w	ip, [r5, #12]
   44d5e:	f8cc 5008 	str.w	r5, [ip, #8]
   44d62:	b360      	cbz	r0, 44dbe <_free_r+0xb6>
   44d64:	f043 0201 	orr.w	r2, r3, #1
   44d68:	604a      	str	r2, [r1, #4]
   44d6a:	50cb      	str	r3, [r1, r3]
   44d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   44d70:	d350      	bcc.n	44e14 <_free_r+0x10c>
   44d72:	0a5a      	lsrs	r2, r3, #9
   44d74:	2a04      	cmp	r2, #4
   44d76:	d870      	bhi.n	44e5a <_free_r+0x152>
   44d78:	099a      	lsrs	r2, r3, #6
   44d7a:	f102 0439 	add.w	r4, r2, #57	; 0x39
   44d7e:	f102 0038 	add.w	r0, r2, #56	; 0x38
   44d82:	00e2      	lsls	r2, r4, #3
   44d84:	18bc      	adds	r4, r7, r2
   44d86:	58ba      	ldr	r2, [r7, r2]
   44d88:	3c08      	subs	r4, #8
   44d8a:	4294      	cmp	r4, r2
   44d8c:	d078      	beq.n	44e80 <_free_r+0x178>
   44d8e:	6850      	ldr	r0, [r2, #4]
   44d90:	f020 0003 	bic.w	r0, r0, #3
   44d94:	4298      	cmp	r0, r3
   44d96:	d971      	bls.n	44e7c <_free_r+0x174>
   44d98:	6892      	ldr	r2, [r2, #8]
   44d9a:	4294      	cmp	r4, r2
   44d9c:	d1f7      	bne.n	44d8e <_free_r+0x86>
   44d9e:	68e3      	ldr	r3, [r4, #12]
   44da0:	4630      	mov	r0, r6
   44da2:	e9c1 4302 	strd	r4, r3, [r1, #8]
   44da6:	6099      	str	r1, [r3, #8]
   44da8:	60e1      	str	r1, [r4, #12]
   44daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   44dae:	f7fc b993 	b.w	410d8 <__malloc_unlock>
   44db2:	4770      	bx	lr
   44db4:	6840      	ldr	r0, [r0, #4]
   44db6:	f000 0001 	and.w	r0, r0, #1
   44dba:	2800      	cmp	r0, #0
   44dbc:	d1d2      	bne.n	44d64 <_free_r+0x5c>
   44dbe:	6890      	ldr	r0, [r2, #8]
   44dc0:	4423      	add	r3, r4
   44dc2:	4d47      	ldr	r5, [pc, #284]	; (44ee0 <_free_r+0x1d8>)
   44dc4:	f043 0401 	orr.w	r4, r3, #1
   44dc8:	42a8      	cmp	r0, r5
   44dca:	d062      	beq.n	44e92 <_free_r+0x18a>
   44dcc:	68d2      	ldr	r2, [r2, #12]
   44dce:	60c2      	str	r2, [r0, #12]
   44dd0:	6090      	str	r0, [r2, #8]
   44dd2:	604c      	str	r4, [r1, #4]
   44dd4:	50cb      	str	r3, [r1, r3]
   44dd6:	e7c9      	b.n	44d6c <_free_r+0x64>
   44dd8:	f01c 0f01 	tst.w	ip, #1
   44ddc:	4423      	add	r3, r4
   44dde:	d107      	bne.n	44df0 <_free_r+0xe8>
   44de0:	f855 2c08 	ldr.w	r2, [r5, #-8]
   44de4:	1a89      	subs	r1, r1, r2
   44de6:	4413      	add	r3, r2
   44de8:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
   44dec:	60c2      	str	r2, [r0, #12]
   44dee:	6090      	str	r0, [r2, #8]
   44df0:	4a3c      	ldr	r2, [pc, #240]	; (44ee4 <_free_r+0x1dc>)
   44df2:	f043 0001 	orr.w	r0, r3, #1
   44df6:	6812      	ldr	r2, [r2, #0]
   44df8:	6048      	str	r0, [r1, #4]
   44dfa:	429a      	cmp	r2, r3
   44dfc:	60b9      	str	r1, [r7, #8]
   44dfe:	d804      	bhi.n	44e0a <_free_r+0x102>
   44e00:	4b39      	ldr	r3, [pc, #228]	; (44ee8 <_free_r+0x1e0>)
   44e02:	4630      	mov	r0, r6
   44e04:	6819      	ldr	r1, [r3, #0]
   44e06:	f7ff ff2f 	bl	44c68 <_malloc_trim_r>
   44e0a:	4630      	mov	r0, r6
   44e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   44e10:	f7fc b962 	b.w	410d8 <__malloc_unlock>
   44e14:	08db      	lsrs	r3, r3, #3
   44e16:	2201      	movs	r2, #1
   44e18:	687c      	ldr	r4, [r7, #4]
   44e1a:	1098      	asrs	r0, r3, #2
   44e1c:	4413      	add	r3, r2
   44e1e:	4082      	lsls	r2, r0
   44e20:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
   44e24:	4322      	orrs	r2, r4
   44e26:	3808      	subs	r0, #8
   44e28:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
   44e2c:	607a      	str	r2, [r7, #4]
   44e2e:	e9c1 4002 	strd	r4, r0, [r1, #8]
   44e32:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
   44e36:	4630      	mov	r0, r6
   44e38:	60e1      	str	r1, [r4, #12]
   44e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   44e3e:	f7fc b94b 	b.w	410d8 <__malloc_unlock>
   44e42:	2800      	cmp	r0, #0
   44e44:	d145      	bne.n	44ed2 <_free_r+0x1ca>
   44e46:	4423      	add	r3, r4
   44e48:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
   44e4c:	f043 0401 	orr.w	r4, r3, #1
   44e50:	60c2      	str	r2, [r0, #12]
   44e52:	6090      	str	r0, [r2, #8]
   44e54:	604c      	str	r4, [r1, #4]
   44e56:	50cb      	str	r3, [r1, r3]
   44e58:	e7d7      	b.n	44e0a <_free_r+0x102>
   44e5a:	2a14      	cmp	r2, #20
   44e5c:	d908      	bls.n	44e70 <_free_r+0x168>
   44e5e:	2a54      	cmp	r2, #84	; 0x54
   44e60:	d81e      	bhi.n	44ea0 <_free_r+0x198>
   44e62:	0b1a      	lsrs	r2, r3, #12
   44e64:	f102 046f 	add.w	r4, r2, #111	; 0x6f
   44e68:	f102 006e 	add.w	r0, r2, #110	; 0x6e
   44e6c:	00e2      	lsls	r2, r4, #3
   44e6e:	e789      	b.n	44d84 <_free_r+0x7c>
   44e70:	f102 045c 	add.w	r4, r2, #92	; 0x5c
   44e74:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   44e78:	00e2      	lsls	r2, r4, #3
   44e7a:	e783      	b.n	44d84 <_free_r+0x7c>
   44e7c:	4614      	mov	r4, r2
   44e7e:	e78e      	b.n	44d9e <_free_r+0x96>
   44e80:	1082      	asrs	r2, r0, #2
   44e82:	2001      	movs	r0, #1
   44e84:	687d      	ldr	r5, [r7, #4]
   44e86:	4623      	mov	r3, r4
   44e88:	fa00 f202 	lsl.w	r2, r0, r2
   44e8c:	432a      	orrs	r2, r5
   44e8e:	607a      	str	r2, [r7, #4]
   44e90:	e786      	b.n	44da0 <_free_r+0x98>
   44e92:	e9c7 1104 	strd	r1, r1, [r7, #16]
   44e96:	e9c1 0002 	strd	r0, r0, [r1, #8]
   44e9a:	604c      	str	r4, [r1, #4]
   44e9c:	50cb      	str	r3, [r1, r3]
   44e9e:	e7b4      	b.n	44e0a <_free_r+0x102>
   44ea0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   44ea4:	d806      	bhi.n	44eb4 <_free_r+0x1ac>
   44ea6:	0bda      	lsrs	r2, r3, #15
   44ea8:	f102 0478 	add.w	r4, r2, #120	; 0x78
   44eac:	f102 0077 	add.w	r0, r2, #119	; 0x77
   44eb0:	00e2      	lsls	r2, r4, #3
   44eb2:	e767      	b.n	44d84 <_free_r+0x7c>
   44eb4:	f240 5054 	movw	r0, #1364	; 0x554
   44eb8:	4282      	cmp	r2, r0
   44eba:	d806      	bhi.n	44eca <_free_r+0x1c2>
   44ebc:	0c9a      	lsrs	r2, r3, #18
   44ebe:	f102 047d 	add.w	r4, r2, #125	; 0x7d
   44ec2:	f102 007c 	add.w	r0, r2, #124	; 0x7c
   44ec6:	00e2      	lsls	r2, r4, #3
   44ec8:	e75c      	b.n	44d84 <_free_r+0x7c>
   44eca:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
   44ece:	207e      	movs	r0, #126	; 0x7e
   44ed0:	e758      	b.n	44d84 <_free_r+0x7c>
   44ed2:	f043 0001 	orr.w	r0, r3, #1
   44ed6:	6048      	str	r0, [r1, #4]
   44ed8:	6013      	str	r3, [r2, #0]
   44eda:	e796      	b.n	44e0a <_free_r+0x102>
   44edc:	20031d28 	.word	0x20031d28
   44ee0:	20031d30 	.word	0x20031d30
   44ee4:	20032134 	.word	0x20032134
   44ee8:	2002a6c8 	.word	0x2002a6c8

00044eec <__sfvwrite_r>:
   44eec:	6893      	ldr	r3, [r2, #8]
   44eee:	2b00      	cmp	r3, #0
   44ef0:	f000 80f0 	beq.w	450d4 <__sfvwrite_r+0x1e8>
   44ef4:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   44ef8:	fa1f fc8c 	uxth.w	ip, ip
   44efc:	f01c 0f08 	tst.w	ip, #8
   44f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44f04:	460c      	mov	r4, r1
   44f06:	b083      	sub	sp, #12
   44f08:	4681      	mov	r9, r0
   44f0a:	4690      	mov	r8, r2
   44f0c:	d035      	beq.n	44f7a <__sfvwrite_r+0x8e>
   44f0e:	690b      	ldr	r3, [r1, #16]
   44f10:	b39b      	cbz	r3, 44f7a <__sfvwrite_r+0x8e>
   44f12:	f01c 0302 	ands.w	r3, ip, #2
   44f16:	f8d8 7000 	ldr.w	r7, [r8]
   44f1a:	d03e      	beq.n	44f9a <__sfvwrite_r+0xae>
   44f1c:	2600      	movs	r6, #0
   44f1e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   44f22:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   44f26:	4635      	mov	r5, r6
   44f28:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 45200 <__sfvwrite_r+0x314>
   44f2c:	4555      	cmp	r5, sl
   44f2e:	462b      	mov	r3, r5
   44f30:	4632      	mov	r2, r6
   44f32:	4661      	mov	r1, ip
   44f34:	bf28      	it	cs
   44f36:	4653      	movcs	r3, sl
   44f38:	4648      	mov	r0, r9
   44f3a:	b1d5      	cbz	r5, 44f72 <__sfvwrite_r+0x86>
   44f3c:	47d8      	blx	fp
   44f3e:	2800      	cmp	r0, #0
   44f40:	f340 80d0 	ble.w	450e4 <__sfvwrite_r+0x1f8>
   44f44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   44f48:	4406      	add	r6, r0
   44f4a:	1a2d      	subs	r5, r5, r0
   44f4c:	1a18      	subs	r0, r3, r0
   44f4e:	f8c8 0008 	str.w	r0, [r8, #8]
   44f52:	2800      	cmp	r0, #0
   44f54:	f000 80ba 	beq.w	450cc <__sfvwrite_r+0x1e0>
   44f58:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   44f5c:	4555      	cmp	r5, sl
   44f5e:	462b      	mov	r3, r5
   44f60:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   44f64:	bf28      	it	cs
   44f66:	4653      	movcs	r3, sl
   44f68:	4632      	mov	r2, r6
   44f6a:	4661      	mov	r1, ip
   44f6c:	4648      	mov	r0, r9
   44f6e:	2d00      	cmp	r5, #0
   44f70:	d1e4      	bne.n	44f3c <__sfvwrite_r+0x50>
   44f72:	e9d7 6500 	ldrd	r6, r5, [r7]
   44f76:	3708      	adds	r7, #8
   44f78:	e7d8      	b.n	44f2c <__sfvwrite_r+0x40>
   44f7a:	4621      	mov	r1, r4
   44f7c:	4648      	mov	r0, r9
   44f7e:	f7ff fb77 	bl	44670 <__swsetup_r>
   44f82:	2800      	cmp	r0, #0
   44f84:	f040 8137 	bne.w	451f6 <__sfvwrite_r+0x30a>
   44f88:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   44f8c:	f8d8 7000 	ldr.w	r7, [r8]
   44f90:	fa1f fc8c 	uxth.w	ip, ip
   44f94:	f01c 0302 	ands.w	r3, ip, #2
   44f98:	d1c0      	bne.n	44f1c <__sfvwrite_r+0x30>
   44f9a:	f01c 0a01 	ands.w	sl, ip, #1
   44f9e:	d166      	bne.n	4506e <__sfvwrite_r+0x182>
   44fa0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   44fa4:	4656      	mov	r6, sl
   44fa6:	6820      	ldr	r0, [r4, #0]
   44fa8:	2e00      	cmp	r6, #0
   44faa:	d05c      	beq.n	45066 <__sfvwrite_r+0x17a>
   44fac:	f41c 7f00 	tst.w	ip, #512	; 0x200
   44fb0:	f000 80a2 	beq.w	450f8 <__sfvwrite_r+0x20c>
   44fb4:	45b3      	cmp	fp, r6
   44fb6:	465b      	mov	r3, fp
   44fb8:	f200 80e2 	bhi.w	45180 <__sfvwrite_r+0x294>
   44fbc:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   44fc0:	d031      	beq.n	45026 <__sfvwrite_r+0x13a>
   44fc2:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   44fc6:	eb15 0545 	adds.w	r5, r5, r5, lsl #1
   44fca:	eba0 0b01 	sub.w	fp, r0, r1
   44fce:	f106 0001 	add.w	r0, r6, #1
   44fd2:	bf48      	it	mi
   44fd4:	3501      	addmi	r5, #1
   44fd6:	4458      	add	r0, fp
   44fd8:	106d      	asrs	r5, r5, #1
   44fda:	42a8      	cmp	r0, r5
   44fdc:	462a      	mov	r2, r5
   44fde:	d901      	bls.n	44fe4 <__sfvwrite_r+0xf8>
   44fe0:	4605      	mov	r5, r0
   44fe2:	4602      	mov	r2, r0
   44fe4:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   44fe8:	f000 80db 	beq.w	451a2 <__sfvwrite_r+0x2b6>
   44fec:	4611      	mov	r1, r2
   44fee:	4648      	mov	r0, r9
   44ff0:	f7fb fcd8 	bl	409a4 <_malloc_r>
   44ff4:	2800      	cmp	r0, #0
   44ff6:	f000 80f8 	beq.w	451ea <__sfvwrite_r+0x2fe>
   44ffa:	465a      	mov	r2, fp
   44ffc:	6921      	ldr	r1, [r4, #16]
   44ffe:	9001      	str	r0, [sp, #4]
   45000:	f7d4 ff56 	bl	19eb0 <memcpy>
   45004:	89a2      	ldrh	r2, [r4, #12]
   45006:	9b01      	ldr	r3, [sp, #4]
   45008:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   4500c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   45010:	81a2      	strh	r2, [r4, #12]
   45012:	eb03 000b 	add.w	r0, r3, fp
   45016:	eba5 020b 	sub.w	r2, r5, fp
   4501a:	6123      	str	r3, [r4, #16]
   4501c:	46b3      	mov	fp, r6
   4501e:	4633      	mov	r3, r6
   45020:	6020      	str	r0, [r4, #0]
   45022:	60a2      	str	r2, [r4, #8]
   45024:	6165      	str	r5, [r4, #20]
   45026:	461a      	mov	r2, r3
   45028:	4651      	mov	r1, sl
   4502a:	9301      	str	r3, [sp, #4]
   4502c:	f000 fdb6 	bl	45b9c <memmove>
   45030:	68a1      	ldr	r1, [r4, #8]
   45032:	4635      	mov	r5, r6
   45034:	6822      	ldr	r2, [r4, #0]
   45036:	2600      	movs	r6, #0
   45038:	9b01      	ldr	r3, [sp, #4]
   4503a:	eba1 010b 	sub.w	r1, r1, fp
   4503e:	4413      	add	r3, r2
   45040:	60a1      	str	r1, [r4, #8]
   45042:	6023      	str	r3, [r4, #0]
   45044:	f8d8 0008 	ldr.w	r0, [r8, #8]
   45048:	44aa      	add	sl, r5
   4504a:	1b40      	subs	r0, r0, r5
   4504c:	f8c8 0008 	str.w	r0, [r8, #8]
   45050:	2800      	cmp	r0, #0
   45052:	d03b      	beq.n	450cc <__sfvwrite_r+0x1e0>
   45054:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   45058:	f8d4 b008 	ldr.w	fp, [r4, #8]
   4505c:	fa1f fc8c 	uxth.w	ip, ip
   45060:	6820      	ldr	r0, [r4, #0]
   45062:	2e00      	cmp	r6, #0
   45064:	d1a2      	bne.n	44fac <__sfvwrite_r+0xc0>
   45066:	e9d7 a600 	ldrd	sl, r6, [r7]
   4506a:	3708      	adds	r7, #8
   4506c:	e79c      	b.n	44fa8 <__sfvwrite_r+0xbc>
   4506e:	469a      	mov	sl, r3
   45070:	4618      	mov	r0, r3
   45072:	461e      	mov	r6, r3
   45074:	463b      	mov	r3, r7
   45076:	4657      	mov	r7, sl
   45078:	469b      	mov	fp, r3
   4507a:	2e00      	cmp	r6, #0
   4507c:	d06c      	beq.n	45158 <__sfvwrite_r+0x26c>
   4507e:	2800      	cmp	r0, #0
   45080:	d074      	beq.n	4516c <__sfvwrite_r+0x280>
   45082:	45b2      	cmp	sl, r6
   45084:	6820      	ldr	r0, [r4, #0]
   45086:	6921      	ldr	r1, [r4, #16]
   45088:	4653      	mov	r3, sl
   4508a:	6962      	ldr	r2, [r4, #20]
   4508c:	bf28      	it	cs
   4508e:	4633      	movcs	r3, r6
   45090:	68a5      	ldr	r5, [r4, #8]
   45092:	4288      	cmp	r0, r1
   45094:	4415      	add	r5, r2
   45096:	d901      	bls.n	4509c <__sfvwrite_r+0x1b0>
   45098:	42ab      	cmp	r3, r5
   4509a:	dc74      	bgt.n	45186 <__sfvwrite_r+0x29a>
   4509c:	429a      	cmp	r2, r3
   4509e:	f300 8096 	bgt.w	451ce <__sfvwrite_r+0x2e2>
   450a2:	4613      	mov	r3, r2
   450a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   450a6:	463a      	mov	r2, r7
   450a8:	69e1      	ldr	r1, [r4, #28]
   450aa:	4648      	mov	r0, r9
   450ac:	47a8      	blx	r5
   450ae:	1e05      	subs	r5, r0, #0
   450b0:	dd18      	ble.n	450e4 <__sfvwrite_r+0x1f8>
   450b2:	ebba 0a05 	subs.w	sl, sl, r5
   450b6:	d00f      	beq.n	450d8 <__sfvwrite_r+0x1ec>
   450b8:	2001      	movs	r0, #1
   450ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   450be:	442f      	add	r7, r5
   450c0:	1b76      	subs	r6, r6, r5
   450c2:	1b5d      	subs	r5, r3, r5
   450c4:	f8c8 5008 	str.w	r5, [r8, #8]
   450c8:	2d00      	cmp	r5, #0
   450ca:	d1d6      	bne.n	4507a <__sfvwrite_r+0x18e>
   450cc:	2000      	movs	r0, #0
   450ce:	b003      	add	sp, #12
   450d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   450d4:	2000      	movs	r0, #0
   450d6:	4770      	bx	lr
   450d8:	4621      	mov	r1, r4
   450da:	4648      	mov	r0, r9
   450dc:	f7ff fcaa 	bl	44a34 <_fflush_r>
   450e0:	2800      	cmp	r0, #0
   450e2:	d0ea      	beq.n	450ba <__sfvwrite_r+0x1ce>
   450e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   450e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   450ec:	f04f 30ff 	mov.w	r0, #4294967295
   450f0:	81a3      	strh	r3, [r4, #12]
   450f2:	b003      	add	sp, #12
   450f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   450f8:	6923      	ldr	r3, [r4, #16]
   450fa:	4283      	cmp	r3, r0
   450fc:	d315      	bcc.n	4512a <__sfvwrite_r+0x23e>
   450fe:	6963      	ldr	r3, [r4, #20]
   45100:	42b3      	cmp	r3, r6
   45102:	d812      	bhi.n	4512a <__sfvwrite_r+0x23e>
   45104:	4a3d      	ldr	r2, [pc, #244]	; (451fc <__sfvwrite_r+0x310>)
   45106:	4648      	mov	r0, r9
   45108:	6a65      	ldr	r5, [r4, #36]	; 0x24
   4510a:	4296      	cmp	r6, r2
   4510c:	69e1      	ldr	r1, [r4, #28]
   4510e:	4652      	mov	r2, sl
   45110:	bf94      	ite	ls
   45112:	46b4      	movls	ip, r6
   45114:	f06f 4c00 	mvnhi.w	ip, #2147483648	; 0x80000000
   45118:	fb9c fcf3 	sdiv	ip, ip, r3
   4511c:	fb03 f30c 	mul.w	r3, r3, ip
   45120:	47a8      	blx	r5
   45122:	1e05      	subs	r5, r0, #0
   45124:	ddde      	ble.n	450e4 <__sfvwrite_r+0x1f8>
   45126:	1b76      	subs	r6, r6, r5
   45128:	e78c      	b.n	45044 <__sfvwrite_r+0x158>
   4512a:	45b3      	cmp	fp, r6
   4512c:	465d      	mov	r5, fp
   4512e:	4651      	mov	r1, sl
   45130:	bf28      	it	cs
   45132:	4635      	movcs	r5, r6
   45134:	462a      	mov	r2, r5
   45136:	f000 fd31 	bl	45b9c <memmove>
   4513a:	68a3      	ldr	r3, [r4, #8]
   4513c:	6822      	ldr	r2, [r4, #0]
   4513e:	1b5b      	subs	r3, r3, r5
   45140:	442a      	add	r2, r5
   45142:	60a3      	str	r3, [r4, #8]
   45144:	6022      	str	r2, [r4, #0]
   45146:	2b00      	cmp	r3, #0
   45148:	d1ed      	bne.n	45126 <__sfvwrite_r+0x23a>
   4514a:	4621      	mov	r1, r4
   4514c:	4648      	mov	r0, r9
   4514e:	f7ff fc71 	bl	44a34 <_fflush_r>
   45152:	2800      	cmp	r0, #0
   45154:	d0e7      	beq.n	45126 <__sfvwrite_r+0x23a>
   45156:	e7c5      	b.n	450e4 <__sfvwrite_r+0x1f8>
   45158:	f10b 0308 	add.w	r3, fp, #8
   4515c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   45160:	469b      	mov	fp, r3
   45162:	f853 7c08 	ldr.w	r7, [r3, #-8]
   45166:	3308      	adds	r3, #8
   45168:	2e00      	cmp	r6, #0
   4516a:	d0f7      	beq.n	4515c <__sfvwrite_r+0x270>
   4516c:	4632      	mov	r2, r6
   4516e:	210a      	movs	r1, #10
   45170:	4638      	mov	r0, r7
   45172:	f7fb fedb 	bl	40f2c <memchr>
   45176:	b338      	cbz	r0, 451c8 <__sfvwrite_r+0x2dc>
   45178:	3001      	adds	r0, #1
   4517a:	eba0 0a07 	sub.w	sl, r0, r7
   4517e:	e780      	b.n	45082 <__sfvwrite_r+0x196>
   45180:	46b3      	mov	fp, r6
   45182:	4633      	mov	r3, r6
   45184:	e74f      	b.n	45026 <__sfvwrite_r+0x13a>
   45186:	4639      	mov	r1, r7
   45188:	462a      	mov	r2, r5
   4518a:	f000 fd07 	bl	45b9c <memmove>
   4518e:	6823      	ldr	r3, [r4, #0]
   45190:	4621      	mov	r1, r4
   45192:	4648      	mov	r0, r9
   45194:	442b      	add	r3, r5
   45196:	6023      	str	r3, [r4, #0]
   45198:	f7ff fc4c 	bl	44a34 <_fflush_r>
   4519c:	2800      	cmp	r0, #0
   4519e:	d088      	beq.n	450b2 <__sfvwrite_r+0x1c6>
   451a0:	e7a0      	b.n	450e4 <__sfvwrite_r+0x1f8>
   451a2:	4648      	mov	r0, r9
   451a4:	f7fb ffa6 	bl	410f4 <_realloc_r>
   451a8:	4603      	mov	r3, r0
   451aa:	2800      	cmp	r0, #0
   451ac:	f47f af31 	bne.w	45012 <__sfvwrite_r+0x126>
   451b0:	6921      	ldr	r1, [r4, #16]
   451b2:	4648      	mov	r0, r9
   451b4:	f7ff fda8 	bl	44d08 <_free_r>
   451b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   451bc:	220c      	movs	r2, #12
   451be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   451c2:	f8c9 2000 	str.w	r2, [r9]
   451c6:	e78f      	b.n	450e8 <__sfvwrite_r+0x1fc>
   451c8:	f106 0a01 	add.w	sl, r6, #1
   451cc:	e759      	b.n	45082 <__sfvwrite_r+0x196>
   451ce:	461a      	mov	r2, r3
   451d0:	4639      	mov	r1, r7
   451d2:	9301      	str	r3, [sp, #4]
   451d4:	461d      	mov	r5, r3
   451d6:	f000 fce1 	bl	45b9c <memmove>
   451da:	68a1      	ldr	r1, [r4, #8]
   451dc:	6822      	ldr	r2, [r4, #0]
   451de:	9b01      	ldr	r3, [sp, #4]
   451e0:	1ac9      	subs	r1, r1, r3
   451e2:	4413      	add	r3, r2
   451e4:	60a1      	str	r1, [r4, #8]
   451e6:	6023      	str	r3, [r4, #0]
   451e8:	e763      	b.n	450b2 <__sfvwrite_r+0x1c6>
   451ea:	220c      	movs	r2, #12
   451ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   451f0:	f8c9 2000 	str.w	r2, [r9]
   451f4:	e778      	b.n	450e8 <__sfvwrite_r+0x1fc>
   451f6:	f04f 30ff 	mov.w	r0, #4294967295
   451fa:	e768      	b.n	450ce <__sfvwrite_r+0x1e2>
   451fc:	7ffffffe 	.word	0x7ffffffe
   45200:	7ffffc00 	.word	0x7ffffc00

00045204 <_fwalk_reent>:
   45204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45208:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   4520c:	d01e      	beq.n	4524c <_fwalk_reent+0x48>
   4520e:	4688      	mov	r8, r1
   45210:	4606      	mov	r6, r0
   45212:	f04f 0900 	mov.w	r9, #0
   45216:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   4521a:	3d01      	subs	r5, #1
   4521c:	d410      	bmi.n	45240 <_fwalk_reent+0x3c>
   4521e:	89a3      	ldrh	r3, [r4, #12]
   45220:	3d01      	subs	r5, #1
   45222:	4621      	mov	r1, r4
   45224:	4630      	mov	r0, r6
   45226:	2b01      	cmp	r3, #1
   45228:	d906      	bls.n	45238 <_fwalk_reent+0x34>
   4522a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   4522e:	3301      	adds	r3, #1
   45230:	d002      	beq.n	45238 <_fwalk_reent+0x34>
   45232:	47c0      	blx	r8
   45234:	ea49 0900 	orr.w	r9, r9, r0
   45238:	1c6b      	adds	r3, r5, #1
   4523a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   4523e:	d1ee      	bne.n	4521e <_fwalk_reent+0x1a>
   45240:	683f      	ldr	r7, [r7, #0]
   45242:	2f00      	cmp	r7, #0
   45244:	d1e7      	bne.n	45216 <_fwalk_reent+0x12>
   45246:	4648      	mov	r0, r9
   45248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4524c:	46b9      	mov	r9, r7
   4524e:	4648      	mov	r0, r9
   45250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00045254 <rshift>:
   45254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45258:	114b      	asrs	r3, r1, #5
   4525a:	6904      	ldr	r4, [r0, #16]
   4525c:	429c      	cmp	r4, r3
   4525e:	dd2e      	ble.n	452be <rshift+0x6a>
   45260:	f100 0c14 	add.w	ip, r0, #20
   45264:	f011 011f 	ands.w	r1, r1, #31
   45268:	4667      	mov	r7, ip
   4526a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
   4526e:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
   45272:	d02a      	beq.n	452ca <rshift+0x76>
   45274:	1d2e      	adds	r6, r5, #4
   45276:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   4527a:	f1c1 0820 	rsb	r8, r1, #32
   4527e:	42b4      	cmp	r4, r6
   45280:	fa22 f201 	lsr.w	r2, r2, r1
   45284:	d913      	bls.n	452ae <rshift+0x5a>
   45286:	f100 0e10 	add.w	lr, r0, #16
   4528a:	6833      	ldr	r3, [r6, #0]
   4528c:	fa03 f308 	lsl.w	r3, r3, r8
   45290:	4313      	orrs	r3, r2
   45292:	f84e 3f04 	str.w	r3, [lr, #4]!
   45296:	f856 2b04 	ldr.w	r2, [r6], #4
   4529a:	42a6      	cmp	r6, r4
   4529c:	fa22 f201 	lsr.w	r2, r2, r1
   452a0:	d3f3      	bcc.n	4528a <rshift+0x36>
   452a2:	1b63      	subs	r3, r4, r5
   452a4:	3b05      	subs	r3, #5
   452a6:	f023 0303 	bic.w	r3, r3, #3
   452aa:	3304      	adds	r3, #4
   452ac:	449c      	add	ip, r3
   452ae:	f8cc 2000 	str.w	r2, [ip]
   452b2:	b312      	cbz	r2, 452fa <rshift+0xa6>
   452b4:	f10c 0304 	add.w	r3, ip, #4
   452b8:	1bda      	subs	r2, r3, r7
   452ba:	1092      	asrs	r2, r2, #2
   452bc:	e018      	b.n	452f0 <rshift+0x9c>
   452be:	2300      	movs	r3, #0
   452c0:	6103      	str	r3, [r0, #16]
   452c2:	2300      	movs	r3, #0
   452c4:	6143      	str	r3, [r0, #20]
   452c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   452ca:	42ac      	cmp	r4, r5
   452cc:	d9f7      	bls.n	452be <rshift+0x6a>
   452ce:	f100 0210 	add.w	r2, r0, #16
   452d2:	462b      	mov	r3, r5
   452d4:	f853 1b04 	ldr.w	r1, [r3], #4
   452d8:	429c      	cmp	r4, r3
   452da:	f842 1f04 	str.w	r1, [r2, #4]!
   452de:	d8f9      	bhi.n	452d4 <rshift+0x80>
   452e0:	43ea      	mvns	r2, r5
   452e2:	4422      	add	r2, r4
   452e4:	f022 0203 	bic.w	r2, r2, #3
   452e8:	3204      	adds	r2, #4
   452ea:	eb0c 0302 	add.w	r3, ip, r2
   452ee:	1092      	asrs	r2, r2, #2
   452f0:	42bb      	cmp	r3, r7
   452f2:	6102      	str	r2, [r0, #16]
   452f4:	d0e5      	beq.n	452c2 <rshift+0x6e>
   452f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   452fa:	4663      	mov	r3, ip
   452fc:	1bda      	subs	r2, r3, r7
   452fe:	1092      	asrs	r2, r2, #2
   45300:	e7f6      	b.n	452f0 <rshift+0x9c>
   45302:	bf00      	nop

00045304 <__gethex>:
   45304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45308:	b08d      	sub	sp, #52	; 0x34
   4530a:	4689      	mov	r9, r1
   4530c:	9007      	str	r0, [sp, #28]
   4530e:	9818      	ldr	r0, [sp, #96]	; 0x60
   45310:	9204      	str	r2, [sp, #16]
   45312:	930a      	str	r3, [sp, #40]	; 0x28
   45314:	f000 fb6e 	bl	459f4 <__localeconv_l>
   45318:	6803      	ldr	r3, [r0, #0]
   4531a:	4618      	mov	r0, r3
   4531c:	461c      	mov	r4, r3
   4531e:	9305      	str	r3, [sp, #20]
   45320:	f7fc fa80 	bl	41824 <strlen>
   45324:	f8d9 3000 	ldr.w	r3, [r9]
   45328:	1821      	adds	r1, r4, r0
   4532a:	9003      	str	r0, [sp, #12]
   4532c:	789a      	ldrb	r2, [r3, #2]
   4532e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
   45332:	2a30      	cmp	r2, #48	; 0x30
   45334:	9101      	str	r1, [sp, #4]
   45336:	f040 8188 	bne.w	4564a <__gethex+0x346>
   4533a:	3303      	adds	r3, #3
   4533c:	f04f 0800 	mov.w	r8, #0
   45340:	461c      	mov	r4, r3
   45342:	f813 2b01 	ldrb.w	r2, [r3], #1
   45346:	f108 0801 	add.w	r8, r8, #1
   4534a:	2a30      	cmp	r2, #48	; 0x30
   4534c:	d0f8      	beq.n	45340 <__gethex+0x3c>
   4534e:	4eae      	ldr	r6, [pc, #696]	; (45608 <__gethex+0x304>)
   45350:	5cb3      	ldrb	r3, [r6, r2]
   45352:	2b00      	cmp	r3, #0
   45354:	f000 80d5 	beq.w	45502 <__gethex+0x1fe>
   45358:	7823      	ldrb	r3, [r4, #0]
   4535a:	f04f 0a00 	mov.w	sl, #0
   4535e:	5cf3      	ldrb	r3, [r6, r3]
   45360:	4655      	mov	r5, sl
   45362:	4627      	mov	r7, r4
   45364:	b123      	cbz	r3, 45370 <__gethex+0x6c>
   45366:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   4536a:	5cf3      	ldrb	r3, [r6, r3]
   4536c:	2b00      	cmp	r3, #0
   4536e:	d1fa      	bne.n	45366 <__gethex+0x62>
   45370:	9a03      	ldr	r2, [sp, #12]
   45372:	4638      	mov	r0, r7
   45374:	9905      	ldr	r1, [sp, #20]
   45376:	f7fc fa83 	bl	41880 <strncmp>
   4537a:	2800      	cmp	r0, #0
   4537c:	f000 8090 	beq.w	454a0 <__gethex+0x19c>
   45380:	783b      	ldrb	r3, [r7, #0]
   45382:	2d00      	cmp	r5, #0
   45384:	f040 8090 	bne.w	454a8 <__gethex+0x1a4>
   45388:	2b50      	cmp	r3, #80	; 0x50
   4538a:	9502      	str	r5, [sp, #8]
   4538c:	463d      	mov	r5, r7
   4538e:	f000 8093 	beq.w	454b8 <__gethex+0x1b4>
   45392:	2b70      	cmp	r3, #112	; 0x70
   45394:	f000 8090 	beq.w	454b8 <__gethex+0x1b4>
   45398:	f8c9 7000 	str.w	r7, [r9]
   4539c:	f1ba 0f00 	cmp.w	sl, #0
   453a0:	f040 809d 	bne.w	454de <__gethex+0x1da>
   453a4:	1b2b      	subs	r3, r5, r4
   453a6:	4651      	mov	r1, sl
   453a8:	3b01      	subs	r3, #1
   453aa:	2b07      	cmp	r3, #7
   453ac:	dd03      	ble.n	453b6 <__gethex+0xb2>
   453ae:	105b      	asrs	r3, r3, #1
   453b0:	3101      	adds	r1, #1
   453b2:	2b07      	cmp	r3, #7
   453b4:	dcfb      	bgt.n	453ae <__gethex+0xaa>
   453b6:	9807      	ldr	r0, [sp, #28]
   453b8:	f000 fc52 	bl	45c60 <_Balloc>
   453bc:	4603      	mov	r3, r0
   453be:	42ac      	cmp	r4, r5
   453c0:	9006      	str	r0, [sp, #24]
   453c2:	f103 0314 	add.w	r3, r3, #20
   453c6:	9308      	str	r3, [sp, #32]
   453c8:	f080 81af 	bcs.w	4572a <__gethex+0x426>
   453cc:	469b      	mov	fp, r3
   453ce:	9b03      	ldr	r3, [sp, #12]
   453d0:	2700      	movs	r7, #0
   453d2:	f1c3 0301 	rsb	r3, r3, #1
   453d6:	46b8      	mov	r8, r7
   453d8:	9309      	str	r3, [sp, #36]	; 0x24
   453da:	e010      	b.n	453fe <__gethex+0xfa>
   453dc:	2f20      	cmp	r7, #32
   453de:	f000 8087 	beq.w	454f0 <__gethex+0x1ec>
   453e2:	463a      	mov	r2, r7
   453e4:	3704      	adds	r7, #4
   453e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   453ea:	4655      	mov	r5, sl
   453ec:	5cf3      	ldrb	r3, [r6, r3]
   453ee:	42a5      	cmp	r5, r4
   453f0:	f003 030f 	and.w	r3, r3, #15
   453f4:	fa03 f302 	lsl.w	r3, r3, r2
   453f8:	ea48 0803 	orr.w	r8, r8, r3
   453fc:	d918      	bls.n	45430 <__gethex+0x12c>
   453fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   45402:	f105 3aff 	add.w	sl, r5, #4294967295
   45406:	9a01      	ldr	r2, [sp, #4]
   45408:	f10b 0904 	add.w	r9, fp, #4
   4540c:	4293      	cmp	r3, r2
   4540e:	d1e5      	bne.n	453dc <__gethex+0xd8>
   45410:	9b09      	ldr	r3, [sp, #36]	; 0x24
   45412:	4453      	add	r3, sl
   45414:	42a3      	cmp	r3, r4
   45416:	d3e1      	bcc.n	453dc <__gethex+0xd8>
   45418:	4618      	mov	r0, r3
   4541a:	9a03      	ldr	r2, [sp, #12]
   4541c:	9905      	ldr	r1, [sp, #20]
   4541e:	930b      	str	r3, [sp, #44]	; 0x2c
   45420:	f7fc fa2e 	bl	41880 <strncmp>
   45424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   45426:	2800      	cmp	r0, #0
   45428:	d1d8      	bne.n	453dc <__gethex+0xd8>
   4542a:	461d      	mov	r5, r3
   4542c:	42a5      	cmp	r5, r4
   4542e:	d8e6      	bhi.n	453fe <__gethex+0xfa>
   45430:	9b08      	ldr	r3, [sp, #32]
   45432:	4640      	mov	r0, r8
   45434:	9a06      	ldr	r2, [sp, #24]
   45436:	eba9 0903 	sub.w	r9, r9, r3
   4543a:	f8cb 8000 	str.w	r8, [fp]
   4543e:	ea4f 03a9 	mov.w	r3, r9, asr #2
   45442:	6113      	str	r3, [r2, #16]
   45444:	015c      	lsls	r4, r3, #5
   45446:	f000 fcc7 	bl	45dd8 <__hi0bits>
   4544a:	9b04      	ldr	r3, [sp, #16]
   4544c:	1a24      	subs	r4, r4, r0
   4544e:	681d      	ldr	r5, [r3, #0]
   45450:	42ac      	cmp	r4, r5
   45452:	f300 80db 	bgt.w	4560c <__gethex+0x308>
   45456:	f2c0 810f 	blt.w	45678 <__gethex+0x374>
   4545a:	2600      	movs	r6, #0
   4545c:	9b04      	ldr	r3, [sp, #16]
   4545e:	9a02      	ldr	r2, [sp, #8]
   45460:	689b      	ldr	r3, [r3, #8]
   45462:	4293      	cmp	r3, r2
   45464:	f2c0 8132 	blt.w	456cc <__gethex+0x3c8>
   45468:	9804      	ldr	r0, [sp, #16]
   4546a:	9a02      	ldr	r2, [sp, #8]
   4546c:	6843      	ldr	r3, [r0, #4]
   4546e:	4293      	cmp	r3, r2
   45470:	dd5a      	ble.n	45528 <__gethex+0x224>
   45472:	1a9c      	subs	r4, r3, r2
   45474:	42a5      	cmp	r5, r4
   45476:	f300 80a5 	bgt.w	455c4 <__gethex+0x2c0>
   4547a:	68c2      	ldr	r2, [r0, #12]
   4547c:	2a02      	cmp	r2, #2
   4547e:	f000 818b 	beq.w	45798 <__gethex+0x494>
   45482:	2a03      	cmp	r2, #3
   45484:	f000 8183 	beq.w	4578e <__gethex+0x48a>
   45488:	2a01      	cmp	r2, #1
   4548a:	f000 815e 	beq.w	4574a <__gethex+0x446>
   4548e:	2450      	movs	r4, #80	; 0x50
   45490:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   45494:	f000 fc0a 	bl	45cac <_Bfree>
   45498:	2300      	movs	r3, #0
   4549a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   4549c:	6013      	str	r3, [r2, #0]
   4549e:	e023      	b.n	454e8 <__gethex+0x1e4>
   454a0:	2d00      	cmp	r5, #0
   454a2:	f000 80db 	beq.w	4565c <__gethex+0x358>
   454a6:	783b      	ldrb	r3, [r7, #0]
   454a8:	1bed      	subs	r5, r5, r7
   454aa:	2b50      	cmp	r3, #80	; 0x50
   454ac:	ea4f 0285 	mov.w	r2, r5, lsl #2
   454b0:	463d      	mov	r5, r7
   454b2:	9202      	str	r2, [sp, #8]
   454b4:	f47f af6d 	bne.w	45392 <__gethex+0x8e>
   454b8:	786b      	ldrb	r3, [r5, #1]
   454ba:	2b2b      	cmp	r3, #43	; 0x2b
   454bc:	f000 80a2 	beq.w	45604 <__gethex+0x300>
   454c0:	2b2d      	cmp	r3, #45	; 0x2d
   454c2:	d04c      	beq.n	4555e <__gethex+0x25a>
   454c4:	5cf3      	ldrb	r3, [r6, r3]
   454c6:	1c6f      	adds	r7, r5, #1
   454c8:	2100      	movs	r1, #0
   454ca:	1e5a      	subs	r2, r3, #1
   454cc:	2a18      	cmp	r2, #24
   454ce:	d94d      	bls.n	4556c <__gethex+0x268>
   454d0:	462f      	mov	r7, r5
   454d2:	f8c9 7000 	str.w	r7, [r9]
   454d6:	f1ba 0f00 	cmp.w	sl, #0
   454da:	f43f af63 	beq.w	453a4 <__gethex+0xa0>
   454de:	f1b8 0f00 	cmp.w	r8, #0
   454e2:	bf0c      	ite	eq
   454e4:	2406      	moveq	r4, #6
   454e6:	2400      	movne	r4, #0
   454e8:	4620      	mov	r0, r4
   454ea:	b00d      	add	sp, #52	; 0x34
   454ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   454f0:	465b      	mov	r3, fp
   454f2:	2200      	movs	r2, #0
   454f4:	46cb      	mov	fp, r9
   454f6:	2704      	movs	r7, #4
   454f8:	f843 8b08 	str.w	r8, [r3], #8
   454fc:	4690      	mov	r8, r2
   454fe:	4699      	mov	r9, r3
   45500:	e771      	b.n	453e6 <__gethex+0xe2>
   45502:	9d03      	ldr	r5, [sp, #12]
   45504:	4620      	mov	r0, r4
   45506:	9905      	ldr	r1, [sp, #20]
   45508:	462a      	mov	r2, r5
   4550a:	f7fc f9b9 	bl	41880 <strncmp>
   4550e:	2800      	cmp	r0, #0
   45510:	d044      	beq.n	4559c <__gethex+0x298>
   45512:	7822      	ldrb	r2, [r4, #0]
   45514:	4625      	mov	r5, r4
   45516:	2a50      	cmp	r2, #80	; 0x50
   45518:	f000 809b 	beq.w	45652 <__gethex+0x34e>
   4551c:	2a70      	cmp	r2, #112	; 0x70
   4551e:	f000 8098 	beq.w	45652 <__gethex+0x34e>
   45522:	f8c9 5000 	str.w	r5, [r9]
   45526:	e7da      	b.n	454de <__gethex+0x1da>
   45528:	2401      	movs	r4, #1
   4552a:	b166      	cbz	r6, 45546 <__gethex+0x242>
   4552c:	9b04      	ldr	r3, [sp, #16]
   4552e:	68db      	ldr	r3, [r3, #12]
   45530:	2b02      	cmp	r3, #2
   45532:	f000 80d4 	beq.w	456de <__gethex+0x3da>
   45536:	2b03      	cmp	r3, #3
   45538:	f000 80d5 	beq.w	456e6 <__gethex+0x3e2>
   4553c:	2b01      	cmp	r3, #1
   4553e:	f000 811d 	beq.w	4577c <__gethex+0x478>
   45542:	f044 0410 	orr.w	r4, r4, #16
   45546:	9b16      	ldr	r3, [sp, #88]	; 0x58
   45548:	4620      	mov	r0, r4
   4554a:	461a      	mov	r2, r3
   4554c:	9b06      	ldr	r3, [sp, #24]
   4554e:	6013      	str	r3, [r2, #0]
   45550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   45552:	461a      	mov	r2, r3
   45554:	9b02      	ldr	r3, [sp, #8]
   45556:	6013      	str	r3, [r2, #0]
   45558:	b00d      	add	sp, #52	; 0x34
   4555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4555e:	2101      	movs	r1, #1
   45560:	78ab      	ldrb	r3, [r5, #2]
   45562:	1caf      	adds	r7, r5, #2
   45564:	5cf3      	ldrb	r3, [r6, r3]
   45566:	1e5a      	subs	r2, r3, #1
   45568:	2a18      	cmp	r2, #24
   4556a:	d8b1      	bhi.n	454d0 <__gethex+0x1cc>
   4556c:	787a      	ldrb	r2, [r7, #1]
   4556e:	3b10      	subs	r3, #16
   45570:	3701      	adds	r7, #1
   45572:	5cb2      	ldrb	r2, [r6, r2]
   45574:	1e50      	subs	r0, r2, #1
   45576:	2818      	cmp	r0, #24
   45578:	d80a      	bhi.n	45590 <__gethex+0x28c>
   4557a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   4557e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   45582:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   45586:	5c32      	ldrb	r2, [r6, r0]
   45588:	1e50      	subs	r0, r2, #1
   4558a:	3b10      	subs	r3, #16
   4558c:	2818      	cmp	r0, #24
   4558e:	d9f4      	bls.n	4557a <__gethex+0x276>
   45590:	b101      	cbz	r1, 45594 <__gethex+0x290>
   45592:	425b      	negs	r3, r3
   45594:	9a02      	ldr	r2, [sp, #8]
   45596:	441a      	add	r2, r3
   45598:	9202      	str	r2, [sp, #8]
   4559a:	e6fd      	b.n	45398 <__gethex+0x94>
   4559c:	5d62      	ldrb	r2, [r4, r5]
   4559e:	1965      	adds	r5, r4, r5
   455a0:	5cb3      	ldrb	r3, [r6, r2]
   455a2:	2b00      	cmp	r3, #0
   455a4:	d0b7      	beq.n	45516 <__gethex+0x212>
   455a6:	2a30      	cmp	r2, #48	; 0x30
   455a8:	462c      	mov	r4, r5
   455aa:	d104      	bne.n	455b6 <__gethex+0x2b2>
   455ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   455b0:	2b30      	cmp	r3, #48	; 0x30
   455b2:	d0fb      	beq.n	455ac <__gethex+0x2a8>
   455b4:	5cf3      	ldrb	r3, [r6, r3]
   455b6:	fab3 fa83 	clz	sl, r3
   455ba:	f04f 0801 	mov.w	r8, #1
   455be:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   455c2:	e6ce      	b.n	45362 <__gethex+0x5e>
   455c4:	1e67      	subs	r7, r4, #1
   455c6:	2e00      	cmp	r6, #0
   455c8:	f040 80b7 	bne.w	4573a <__gethex+0x436>
   455cc:	2f00      	cmp	r7, #0
   455ce:	f040 80b6 	bne.w	4573e <__gethex+0x43a>
   455d2:	2301      	movs	r3, #1
   455d4:	9908      	ldr	r1, [sp, #32]
   455d6:	117a      	asrs	r2, r7, #5
   455d8:	f007 071f 	and.w	r7, r7, #31
   455dc:	9806      	ldr	r0, [sp, #24]
   455de:	1b2d      	subs	r5, r5, r4
   455e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   455e4:	fa03 f707 	lsl.w	r7, r3, r7
   455e8:	4621      	mov	r1, r4
   455ea:	2402      	movs	r4, #2
   455ec:	4217      	tst	r7, r2
   455ee:	bf18      	it	ne
   455f0:	f046 0602 	orrne.w	r6, r6, #2
   455f4:	f7ff fe2e 	bl	45254 <rshift>
   455f8:	9b04      	ldr	r3, [sp, #16]
   455fa:	685b      	ldr	r3, [r3, #4]
   455fc:	9302      	str	r3, [sp, #8]
   455fe:	2e00      	cmp	r6, #0
   45600:	d0a1      	beq.n	45546 <__gethex+0x242>
   45602:	e793      	b.n	4552c <__gethex+0x228>
   45604:	2100      	movs	r1, #0
   45606:	e7ab      	b.n	45560 <__gethex+0x25c>
   45608:	0004c800 	.word	0x0004c800
   4560c:	1b64      	subs	r4, r4, r5
   4560e:	9806      	ldr	r0, [sp, #24]
   45610:	4621      	mov	r1, r4
   45612:	f000 ff69 	bl	464e8 <__any_on>
   45616:	4606      	mov	r6, r0
   45618:	b178      	cbz	r0, 4563a <__gethex+0x336>
   4561a:	1e62      	subs	r2, r4, #1
   4561c:	2601      	movs	r6, #1
   4561e:	9808      	ldr	r0, [sp, #32]
   45620:	1151      	asrs	r1, r2, #5
   45622:	f002 031f 	and.w	r3, r2, #31
   45626:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   4562a:	fa06 f303 	lsl.w	r3, r6, r3
   4562e:	420b      	tst	r3, r1
   45630:	d003      	beq.n	4563a <__gethex+0x336>
   45632:	42b2      	cmp	r2, r6
   45634:	f300 80b4 	bgt.w	457a0 <__gethex+0x49c>
   45638:	2602      	movs	r6, #2
   4563a:	9b02      	ldr	r3, [sp, #8]
   4563c:	4621      	mov	r1, r4
   4563e:	9806      	ldr	r0, [sp, #24]
   45640:	4423      	add	r3, r4
   45642:	9302      	str	r3, [sp, #8]
   45644:	f7ff fe06 	bl	45254 <rshift>
   45648:	e708      	b.n	4545c <__gethex+0x158>
   4564a:	1c9c      	adds	r4, r3, #2
   4564c:	f04f 0800 	mov.w	r8, #0
   45650:	e67d      	b.n	4534e <__gethex+0x4a>
   45652:	2300      	movs	r3, #0
   45654:	f04f 0a01 	mov.w	sl, #1
   45658:	9302      	str	r3, [sp, #8]
   4565a:	e72d      	b.n	454b8 <__gethex+0x1b4>
   4565c:	9a03      	ldr	r2, [sp, #12]
   4565e:	5cbb      	ldrb	r3, [r7, r2]
   45660:	18bd      	adds	r5, r7, r2
   45662:	5cf2      	ldrb	r2, [r6, r3]
   45664:	462f      	mov	r7, r5
   45666:	2a00      	cmp	r2, #0
   45668:	f43f af1e 	beq.w	454a8 <__gethex+0x1a4>
   4566c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   45670:	5cf2      	ldrb	r2, [r6, r3]
   45672:	2a00      	cmp	r2, #0
   45674:	d1fa      	bne.n	4566c <__gethex+0x368>
   45676:	e717      	b.n	454a8 <__gethex+0x1a4>
   45678:	9b02      	ldr	r3, [sp, #8]
   4567a:	1b2a      	subs	r2, r5, r4
   4567c:	2600      	movs	r6, #0
   4567e:	1a9b      	subs	r3, r3, r2
   45680:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   45684:	9302      	str	r3, [sp, #8]
   45686:	f000 fcfb 	bl	46080 <__lshift>
   4568a:	4603      	mov	r3, r0
   4568c:	9006      	str	r0, [sp, #24]
   4568e:	3314      	adds	r3, #20
   45690:	9308      	str	r3, [sp, #32]
   45692:	e6e3      	b.n	4545c <__gethex+0x158>
   45694:	9b06      	ldr	r3, [sp, #24]
   45696:	689b      	ldr	r3, [r3, #8]
   45698:	429e      	cmp	r6, r3
   4569a:	f280 8091 	bge.w	457c0 <__gethex+0x4bc>
   4569e:	4633      	mov	r3, r6
   456a0:	9806      	ldr	r0, [sp, #24]
   456a2:	1c5a      	adds	r2, r3, #1
   456a4:	2101      	movs	r1, #1
   456a6:	2c02      	cmp	r4, #2
   456a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   456ac:	6102      	str	r2, [r0, #16]
   456ae:	6159      	str	r1, [r3, #20]
   456b0:	d07f      	beq.n	457b2 <__gethex+0x4ae>
   456b2:	4296      	cmp	r6, r2
   456b4:	da34      	bge.n	45720 <__gethex+0x41c>
   456b6:	9c02      	ldr	r4, [sp, #8]
   456b8:	2101      	movs	r1, #1
   456ba:	9806      	ldr	r0, [sp, #24]
   456bc:	440c      	add	r4, r1
   456be:	9402      	str	r4, [sp, #8]
   456c0:	f7ff fdc8 	bl	45254 <rshift>
   456c4:	9b04      	ldr	r3, [sp, #16]
   456c6:	689b      	ldr	r3, [r3, #8]
   456c8:	42a3      	cmp	r3, r4
   456ca:	da2c      	bge.n	45726 <__gethex+0x422>
   456cc:	24a3      	movs	r4, #163	; 0xa3
   456ce:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   456d2:	f000 faeb 	bl	45cac <_Bfree>
   456d6:	2300      	movs	r3, #0
   456d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   456da:	6013      	str	r3, [r2, #0]
   456dc:	e704      	b.n	454e8 <__gethex+0x1e4>
   456de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   456e0:	f1c3 0301 	rsb	r3, r3, #1
   456e4:	9317      	str	r3, [sp, #92]	; 0x5c
   456e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   456e8:	2b00      	cmp	r3, #0
   456ea:	f43f af2a 	beq.w	45542 <__gethex+0x23e>
   456ee:	9b06      	ldr	r3, [sp, #24]
   456f0:	2000      	movs	r0, #0
   456f2:	f8dd c020 	ldr.w	ip, [sp, #32]
   456f6:	691e      	ldr	r6, [r3, #16]
   456f8:	4663      	mov	r3, ip
   456fa:	00b7      	lsls	r7, r6, #2
   456fc:	eb0c 0107 	add.w	r1, ip, r7
   45700:	e003      	b.n	4570a <__gethex+0x406>
   45702:	4299      	cmp	r1, r3
   45704:	f843 0c04 	str.w	r0, [r3, #-4]
   45708:	d9c4      	bls.n	45694 <__gethex+0x390>
   4570a:	469e      	mov	lr, r3
   4570c:	f853 2b04 	ldr.w	r2, [r3], #4
   45710:	f1b2 3fff 	cmp.w	r2, #4294967295
   45714:	d0f5      	beq.n	45702 <__gethex+0x3fe>
   45716:	3201      	adds	r2, #1
   45718:	2c02      	cmp	r4, #2
   4571a:	f8ce 2000 	str.w	r2, [lr]
   4571e:	d048      	beq.n	457b2 <__gethex+0x4ae>
   45720:	f015 051f 	ands.w	r5, r5, #31
   45724:	d169      	bne.n	457fa <__gethex+0x4f6>
   45726:	2421      	movs	r4, #33	; 0x21
   45728:	e70d      	b.n	45546 <__gethex+0x242>
   4572a:	9b06      	ldr	r3, [sp, #24]
   4572c:	f04f 0800 	mov.w	r8, #0
   45730:	f8dd b020 	ldr.w	fp, [sp, #32]
   45734:	f103 0918 	add.w	r9, r3, #24
   45738:	e67a      	b.n	45430 <__gethex+0x12c>
   4573a:	2601      	movs	r6, #1
   4573c:	e749      	b.n	455d2 <__gethex+0x2ce>
   4573e:	4639      	mov	r1, r7
   45740:	9806      	ldr	r0, [sp, #24]
   45742:	f000 fed1 	bl	464e8 <__any_on>
   45746:	4606      	mov	r6, r0
   45748:	e743      	b.n	455d2 <__gethex+0x2ce>
   4574a:	42a5      	cmp	r5, r4
   4574c:	f47f ae9f 	bne.w	4548e <__gethex+0x18a>
   45750:	2d01      	cmp	r5, #1
   45752:	dd08      	ble.n	45766 <__gethex+0x462>
   45754:	1e69      	subs	r1, r5, #1
   45756:	9806      	ldr	r0, [sp, #24]
   45758:	f000 fec6 	bl	464e8 <__any_on>
   4575c:	2800      	cmp	r0, #0
   4575e:	f43f ae96 	beq.w	4548e <__gethex+0x18a>
   45762:	9b04      	ldr	r3, [sp, #16]
   45764:	685b      	ldr	r3, [r3, #4]
   45766:	990a      	ldr	r1, [sp, #40]	; 0x28
   45768:	2201      	movs	r2, #1
   4576a:	2462      	movs	r4, #98	; 0x62
   4576c:	600b      	str	r3, [r1, #0]
   4576e:	9b06      	ldr	r3, [sp, #24]
   45770:	9908      	ldr	r1, [sp, #32]
   45772:	611a      	str	r2, [r3, #16]
   45774:	600a      	str	r2, [r1, #0]
   45776:	9a16      	ldr	r2, [sp, #88]	; 0x58
   45778:	6013      	str	r3, [r2, #0]
   4577a:	e6b5      	b.n	454e8 <__gethex+0x1e4>
   4577c:	07b2      	lsls	r2, r6, #30
   4577e:	f57f aee0 	bpl.w	45542 <__gethex+0x23e>
   45782:	9b08      	ldr	r3, [sp, #32]
   45784:	681b      	ldr	r3, [r3, #0]
   45786:	431e      	orrs	r6, r3
   45788:	07f3      	lsls	r3, r6, #31
   4578a:	d4b0      	bmi.n	456ee <__gethex+0x3ea>
   4578c:	e6d9      	b.n	45542 <__gethex+0x23e>
   4578e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   45790:	2a00      	cmp	r2, #0
   45792:	f43f ae7c 	beq.w	4548e <__gethex+0x18a>
   45796:	e7e6      	b.n	45766 <__gethex+0x462>
   45798:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   4579a:	2a00      	cmp	r2, #0
   4579c:	d0e3      	beq.n	45766 <__gethex+0x462>
   4579e:	e676      	b.n	4548e <__gethex+0x18a>
   457a0:	1ea1      	subs	r1, r4, #2
   457a2:	9806      	ldr	r0, [sp, #24]
   457a4:	f000 fea0 	bl	464e8 <__any_on>
   457a8:	2800      	cmp	r0, #0
   457aa:	f43f af45 	beq.w	45638 <__gethex+0x334>
   457ae:	2603      	movs	r6, #3
   457b0:	e743      	b.n	4563a <__gethex+0x336>
   457b2:	9b04      	ldr	r3, [sp, #16]
   457b4:	681b      	ldr	r3, [r3, #0]
   457b6:	3b01      	subs	r3, #1
   457b8:	42ab      	cmp	r3, r5
   457ba:	d028      	beq.n	4580e <__gethex+0x50a>
   457bc:	2422      	movs	r4, #34	; 0x22
   457be:	e6c2      	b.n	45546 <__gethex+0x242>
   457c0:	9b06      	ldr	r3, [sp, #24]
   457c2:	f8dd 901c 	ldr.w	r9, [sp, #28]
   457c6:	6859      	ldr	r1, [r3, #4]
   457c8:	4648      	mov	r0, r9
   457ca:	3101      	adds	r1, #1
   457cc:	f000 fa48 	bl	45c60 <_Balloc>
   457d0:	9a06      	ldr	r2, [sp, #24]
   457d2:	4680      	mov	r8, r0
   457d4:	300c      	adds	r0, #12
   457d6:	6913      	ldr	r3, [r2, #16]
   457d8:	f102 010c 	add.w	r1, r2, #12
   457dc:	3302      	adds	r3, #2
   457de:	009a      	lsls	r2, r3, #2
   457e0:	f7d4 fb66 	bl	19eb0 <memcpy>
   457e4:	9906      	ldr	r1, [sp, #24]
   457e6:	4648      	mov	r0, r9
   457e8:	f000 fa60 	bl	45cac <_Bfree>
   457ec:	f8cd 8018 	str.w	r8, [sp, #24]
   457f0:	f108 0c14 	add.w	ip, r8, #20
   457f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   457f8:	e752      	b.n	456a0 <__gethex+0x39c>
   457fa:	4467      	add	r7, ip
   457fc:	f1c5 0520 	rsb	r5, r5, #32
   45800:	f857 0c04 	ldr.w	r0, [r7, #-4]
   45804:	f000 fae8 	bl	45dd8 <__hi0bits>
   45808:	42a8      	cmp	r0, r5
   4580a:	da8c      	bge.n	45726 <__gethex+0x422>
   4580c:	e753      	b.n	456b6 <__gethex+0x3b2>
   4580e:	116a      	asrs	r2, r5, #5
   45810:	2301      	movs	r3, #1
   45812:	f005 051f 	and.w	r5, r5, #31
   45816:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   4581a:	40ab      	lsls	r3, r5
   4581c:	4213      	tst	r3, r2
   4581e:	bf14      	ite	ne
   45820:	2421      	movne	r4, #33	; 0x21
   45822:	2422      	moveq	r4, #34	; 0x22
   45824:	e68f      	b.n	45546 <__gethex+0x242>
   45826:	bf00      	nop

00045828 <__match>:
   45828:	b430      	push	{r4, r5}
   4582a:	6804      	ldr	r4, [r0, #0]
   4582c:	3401      	adds	r4, #1
   4582e:	e008      	b.n	45842 <__match+0x1a>
   45830:	f814 3b01 	ldrb.w	r3, [r4], #1
   45834:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   45838:	2d19      	cmp	r5, #25
   4583a:	bf98      	it	ls
   4583c:	3320      	addls	r3, #32
   4583e:	4293      	cmp	r3, r2
   45840:	d107      	bne.n	45852 <__match+0x2a>
   45842:	f811 2b01 	ldrb.w	r2, [r1], #1
   45846:	2a00      	cmp	r2, #0
   45848:	d1f2      	bne.n	45830 <__match+0x8>
   4584a:	6004      	str	r4, [r0, #0]
   4584c:	2001      	movs	r0, #1
   4584e:	bc30      	pop	{r4, r5}
   45850:	4770      	bx	lr
   45852:	2000      	movs	r0, #0
   45854:	bc30      	pop	{r4, r5}
   45856:	4770      	bx	lr

00045858 <__hexnan>:
   45858:	680b      	ldr	r3, [r1, #0]
   4585a:	1159      	asrs	r1, r3, #5
   4585c:	f013 031f 	ands.w	r3, r3, #31
   45860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45864:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   45868:	b085      	sub	sp, #20
   4586a:	9002      	str	r0, [sp, #8]
   4586c:	9101      	str	r1, [sp, #4]
   4586e:	9303      	str	r3, [sp, #12]
   45870:	d001      	beq.n	45876 <__hexnan+0x1e>
   45872:	3104      	adds	r1, #4
   45874:	9101      	str	r1, [sp, #4]
   45876:	9b02      	ldr	r3, [sp, #8]
   45878:	2100      	movs	r1, #0
   4587a:	9801      	ldr	r0, [sp, #4]
   4587c:	681b      	ldr	r3, [r3, #0]
   4587e:	460d      	mov	r5, r1
   45880:	f1a0 0804 	sub.w	r8, r0, #4
   45884:	f840 1c04 	str.w	r1, [r0, #-4]
   45888:	785c      	ldrb	r4, [r3, #1]
   4588a:	468a      	mov	sl, r1
   4588c:	46c6      	mov	lr, r8
   4588e:	4640      	mov	r0, r8
   45890:	468c      	mov	ip, r1
   45892:	f8df 9140 	ldr.w	r9, [pc, #320]	; 459d4 <__hexnan+0x17c>
   45896:	1c5e      	adds	r6, r3, #1
   45898:	b364      	cbz	r4, 458f4 <__hexnan+0x9c>
   4589a:	f819 1004 	ldrb.w	r1, [r9, r4]
   4589e:	2900      	cmp	r1, #0
   458a0:	d15f      	bne.n	45962 <__hexnan+0x10a>
   458a2:	2c20      	cmp	r4, #32
   458a4:	d874      	bhi.n	45990 <__hexnan+0x138>
   458a6:	45d4      	cmp	ip, sl
   458a8:	dd1f      	ble.n	458ea <__hexnan+0x92>
   458aa:	4570      	cmp	r0, lr
   458ac:	d213      	bcs.n	458d6 <__hexnan+0x7e>
   458ae:	2d07      	cmp	r5, #7
   458b0:	dc11      	bgt.n	458d6 <__hexnan+0x7e>
   458b2:	f1c5 0508 	rsb	r5, r5, #8
   458b6:	6804      	ldr	r4, [r0, #0]
   458b8:	4603      	mov	r3, r0
   458ba:	00ad      	lsls	r5, r5, #2
   458bc:	f1c5 0b20 	rsb	fp, r5, #32
   458c0:	685f      	ldr	r7, [r3, #4]
   458c2:	fa07 f10b 	lsl.w	r1, r7, fp
   458c6:	4321      	orrs	r1, r4
   458c8:	fa27 f405 	lsr.w	r4, r7, r5
   458cc:	6019      	str	r1, [r3, #0]
   458ce:	f843 4f04 	str.w	r4, [r3, #4]!
   458d2:	459e      	cmp	lr, r3
   458d4:	d8f4      	bhi.n	458c0 <__hexnan+0x68>
   458d6:	4290      	cmp	r0, r2
   458d8:	d957      	bls.n	4598a <__hexnan+0x132>
   458da:	2300      	movs	r3, #0
   458dc:	f1a0 0e04 	sub.w	lr, r0, #4
   458e0:	46e2      	mov	sl, ip
   458e2:	f840 3c04 	str.w	r3, [r0, #-4]
   458e6:	461d      	mov	r5, r3
   458e8:	4670      	mov	r0, lr
   458ea:	4633      	mov	r3, r6
   458ec:	785c      	ldrb	r4, [r3, #1]
   458ee:	1c5e      	adds	r6, r3, #1
   458f0:	2c00      	cmp	r4, #0
   458f2:	d1d2      	bne.n	4589a <__hexnan+0x42>
   458f4:	f1bc 0f00 	cmp.w	ip, #0
   458f8:	d04c      	beq.n	45994 <__hexnan+0x13c>
   458fa:	4570      	cmp	r0, lr
   458fc:	d213      	bcs.n	45926 <__hexnan+0xce>
   458fe:	2d07      	cmp	r5, #7
   45900:	dc11      	bgt.n	45926 <__hexnan+0xce>
   45902:	f1c5 0508 	rsb	r5, r5, #8
   45906:	6804      	ldr	r4, [r0, #0]
   45908:	4603      	mov	r3, r0
   4590a:	00ad      	lsls	r5, r5, #2
   4590c:	f1c5 0720 	rsb	r7, r5, #32
   45910:	685e      	ldr	r6, [r3, #4]
   45912:	fa06 f107 	lsl.w	r1, r6, r7
   45916:	4321      	orrs	r1, r4
   45918:	fa26 f405 	lsr.w	r4, r6, r5
   4591c:	6019      	str	r1, [r3, #0]
   4591e:	f843 4f04 	str.w	r4, [r3, #4]!
   45922:	459e      	cmp	lr, r3
   45924:	d8f4      	bhi.n	45910 <__hexnan+0xb8>
   45926:	4290      	cmp	r0, r2
   45928:	d93c      	bls.n	459a4 <__hexnan+0x14c>
   4592a:	4613      	mov	r3, r2
   4592c:	f850 1b04 	ldr.w	r1, [r0], #4
   45930:	4580      	cmp	r8, r0
   45932:	f843 1b04 	str.w	r1, [r3], #4
   45936:	d2f9      	bcs.n	4592c <__hexnan+0xd4>
   45938:	2100      	movs	r1, #0
   4593a:	f843 1b04 	str.w	r1, [r3], #4
   4593e:	4598      	cmp	r8, r3
   45940:	d2fb      	bcs.n	4593a <__hexnan+0xe2>
   45942:	9b01      	ldr	r3, [sp, #4]
   45944:	f853 1c04 	ldr.w	r1, [r3, #-4]
   45948:	b119      	cbz	r1, 45952 <__hexnan+0xfa>
   4594a:	e027      	b.n	4599c <__hexnan+0x144>
   4594c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   45950:	bb23      	cbnz	r3, 4599c <__hexnan+0x144>
   45952:	4542      	cmp	r2, r8
   45954:	d1fa      	bne.n	4594c <__hexnan+0xf4>
   45956:	2301      	movs	r3, #1
   45958:	2005      	movs	r0, #5
   4595a:	6013      	str	r3, [r2, #0]
   4595c:	b005      	add	sp, #20
   4595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45962:	3501      	adds	r5, #1
   45964:	f10c 0c01 	add.w	ip, ip, #1
   45968:	2d08      	cmp	r5, #8
   4596a:	dc07      	bgt.n	4597c <__hexnan+0x124>
   4596c:	6803      	ldr	r3, [r0, #0]
   4596e:	011b      	lsls	r3, r3, #4
   45970:	f001 010f 	and.w	r1, r1, #15
   45974:	4319      	orrs	r1, r3
   45976:	4633      	mov	r3, r6
   45978:	6001      	str	r1, [r0, #0]
   4597a:	e7b7      	b.n	458ec <__hexnan+0x94>
   4597c:	4290      	cmp	r0, r2
   4597e:	d9b4      	bls.n	458ea <__hexnan+0x92>
   45980:	2300      	movs	r3, #0
   45982:	3804      	subs	r0, #4
   45984:	2501      	movs	r5, #1
   45986:	6003      	str	r3, [r0, #0]
   45988:	e7f2      	b.n	45970 <__hexnan+0x118>
   4598a:	2508      	movs	r5, #8
   4598c:	4633      	mov	r3, r6
   4598e:	e7ad      	b.n	458ec <__hexnan+0x94>
   45990:	2c29      	cmp	r4, #41	; 0x29
   45992:	d017      	beq.n	459c4 <__hexnan+0x16c>
   45994:	2004      	movs	r0, #4
   45996:	b005      	add	sp, #20
   45998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4599c:	2005      	movs	r0, #5
   4599e:	b005      	add	sp, #20
   459a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   459a4:	9c01      	ldr	r4, [sp, #4]
   459a6:	9b03      	ldr	r3, [sp, #12]
   459a8:	f854 1c04 	ldr.w	r1, [r4, #-4]
   459ac:	2b00      	cmp	r3, #0
   459ae:	d0cb      	beq.n	45948 <__hexnan+0xf0>
   459b0:	f1c3 0320 	rsb	r3, r3, #32
   459b4:	f04f 30ff 	mov.w	r0, #4294967295
   459b8:	fa20 f303 	lsr.w	r3, r0, r3
   459bc:	4019      	ands	r1, r3
   459be:	f844 1c04 	str.w	r1, [r4, #-4]
   459c2:	e7c1      	b.n	45948 <__hexnan+0xf0>
   459c4:	3302      	adds	r3, #2
   459c6:	9902      	ldr	r1, [sp, #8]
   459c8:	600b      	str	r3, [r1, #0]
   459ca:	f1bc 0f00 	cmp.w	ip, #0
   459ce:	d194      	bne.n	458fa <__hexnan+0xa2>
   459d0:	e7e0      	b.n	45994 <__hexnan+0x13c>
   459d2:	bf00      	nop
   459d4:	0004c800 	.word	0x0004c800

000459d8 <iswspace>:
   459d8:	28ff      	cmp	r0, #255	; 0xff
   459da:	d901      	bls.n	459e0 <iswspace+0x8>
   459dc:	2000      	movs	r0, #0
   459de:	4770      	bx	lr
   459e0:	b510      	push	{r4, lr}
   459e2:	4604      	mov	r4, r0
   459e4:	f7fa ffc0 	bl	40968 <__locale_ctype_ptr>
   459e8:	4420      	add	r0, r4
   459ea:	7840      	ldrb	r0, [r0, #1]
   459ec:	f000 0008 	and.w	r0, r0, #8
   459f0:	bd10      	pop	{r4, pc}
   459f2:	bf00      	nop

000459f4 <__localeconv_l>:
   459f4:	30f0      	adds	r0, #240	; 0xf0
   459f6:	4770      	bx	lr

000459f8 <_localeconv_r>:
   459f8:	4a04      	ldr	r2, [pc, #16]	; (45a0c <_localeconv_r+0x14>)
   459fa:	4b05      	ldr	r3, [pc, #20]	; (45a10 <_localeconv_r+0x18>)
   459fc:	6812      	ldr	r2, [r2, #0]
   459fe:	6b50      	ldr	r0, [r2, #52]	; 0x34
   45a00:	2800      	cmp	r0, #0
   45a02:	bf08      	it	eq
   45a04:	4618      	moveq	r0, r3
   45a06:	30f0      	adds	r0, #240	; 0xf0
   45a08:	4770      	bx	lr
   45a0a:	bf00      	nop
   45a0c:	20031bb8 	.word	0x20031bb8
   45a10:	20031bbc 	.word	0x20031bbc

00045a14 <__retarget_lock_init_recursive>:
   45a14:	4770      	bx	lr
   45a16:	bf00      	nop

00045a18 <__retarget_lock_close_recursive>:
   45a18:	4770      	bx	lr
   45a1a:	bf00      	nop

00045a1c <__retarget_lock_acquire_recursive>:
   45a1c:	4770      	bx	lr
   45a1e:	bf00      	nop

00045a20 <__retarget_lock_release_recursive>:
   45a20:	4770      	bx	lr
   45a22:	bf00      	nop

00045a24 <_lseek_r>:
   45a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45a26:	460e      	mov	r6, r1
   45a28:	4c08      	ldr	r4, [pc, #32]	; (45a4c <_lseek_r+0x28>)
   45a2a:	2500      	movs	r5, #0
   45a2c:	4611      	mov	r1, r2
   45a2e:	4607      	mov	r7, r0
   45a30:	461a      	mov	r2, r3
   45a32:	4630      	mov	r0, r6
   45a34:	6025      	str	r5, [r4, #0]
   45a36:	f002 f962 	bl	47cfe <_lseek>
   45a3a:	1c43      	adds	r3, r0, #1
   45a3c:	d000      	beq.n	45a40 <_lseek_r+0x1c>
   45a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45a40:	6823      	ldr	r3, [r4, #0]
   45a42:	2b00      	cmp	r3, #0
   45a44:	d0fb      	beq.n	45a3e <_lseek_r+0x1a>
   45a46:	603b      	str	r3, [r7, #0]
   45a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45a4a:	bf00      	nop
   45a4c:	2002c360 	.word	0x2002c360

00045a50 <__swhatbuf_r>:
   45a50:	b570      	push	{r4, r5, r6, lr}
   45a52:	460c      	mov	r4, r1
   45a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45a58:	b096      	sub	sp, #88	; 0x58
   45a5a:	4615      	mov	r5, r2
   45a5c:	2900      	cmp	r1, #0
   45a5e:	461e      	mov	r6, r3
   45a60:	da0f      	bge.n	45a82 <__swhatbuf_r+0x32>
   45a62:	89a2      	ldrh	r2, [r4, #12]
   45a64:	2300      	movs	r3, #0
   45a66:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   45a6a:	6033      	str	r3, [r6, #0]
   45a6c:	d104      	bne.n	45a78 <__swhatbuf_r+0x28>
   45a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   45a72:	602b      	str	r3, [r5, #0]
   45a74:	b016      	add	sp, #88	; 0x58
   45a76:	bd70      	pop	{r4, r5, r6, pc}
   45a78:	2240      	movs	r2, #64	; 0x40
   45a7a:	4618      	mov	r0, r3
   45a7c:	602a      	str	r2, [r5, #0]
   45a7e:	b016      	add	sp, #88	; 0x58
   45a80:	bd70      	pop	{r4, r5, r6, pc}
   45a82:	466a      	mov	r2, sp
   45a84:	f001 fa80 	bl	46f88 <_fstat_r>
   45a88:	2800      	cmp	r0, #0
   45a8a:	dbea      	blt.n	45a62 <__swhatbuf_r+0x12>
   45a8c:	9b01      	ldr	r3, [sp, #4]
   45a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   45a92:	f44f 6000 	mov.w	r0, #2048	; 0x800
   45a96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   45a9a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   45a9e:	fab3 f383 	clz	r3, r3
   45aa2:	095b      	lsrs	r3, r3, #5
   45aa4:	6033      	str	r3, [r6, #0]
   45aa6:	602a      	str	r2, [r5, #0]
   45aa8:	b016      	add	sp, #88	; 0x58
   45aaa:	bd70      	pop	{r4, r5, r6, pc}

00045aac <__smakebuf_r>:
   45aac:	898a      	ldrh	r2, [r1, #12]
   45aae:	460b      	mov	r3, r1
   45ab0:	0792      	lsls	r2, r2, #30
   45ab2:	d506      	bpl.n	45ac2 <__smakebuf_r+0x16>
   45ab4:	f101 0243 	add.w	r2, r1, #67	; 0x43
   45ab8:	2101      	movs	r1, #1
   45aba:	601a      	str	r2, [r3, #0]
   45abc:	e9c3 2104 	strd	r2, r1, [r3, #16]
   45ac0:	4770      	bx	lr
   45ac2:	b570      	push	{r4, r5, r6, lr}
   45ac4:	b082      	sub	sp, #8
   45ac6:	4605      	mov	r5, r0
   45ac8:	460c      	mov	r4, r1
   45aca:	ab01      	add	r3, sp, #4
   45acc:	466a      	mov	r2, sp
   45ace:	f7ff ffbf 	bl	45a50 <__swhatbuf_r>
   45ad2:	9900      	ldr	r1, [sp, #0]
   45ad4:	4606      	mov	r6, r0
   45ad6:	4628      	mov	r0, r5
   45ad8:	f7fa ff64 	bl	409a4 <_malloc_r>
   45adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   45ae0:	b1d8      	cbz	r0, 45b1a <__smakebuf_r+0x6e>
   45ae2:	4a16      	ldr	r2, [pc, #88]	; (45b3c <__smakebuf_r+0x90>)
   45ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   45ae8:	9900      	ldr	r1, [sp, #0]
   45aea:	63ea      	str	r2, [r5, #60]	; 0x3c
   45aec:	9a01      	ldr	r2, [sp, #4]
   45aee:	81a3      	strh	r3, [r4, #12]
   45af0:	6020      	str	r0, [r4, #0]
   45af2:	e9c4 0104 	strd	r0, r1, [r4, #16]
   45af6:	b91a      	cbnz	r2, 45b00 <__smakebuf_r+0x54>
   45af8:	4333      	orrs	r3, r6
   45afa:	81a3      	strh	r3, [r4, #12]
   45afc:	b002      	add	sp, #8
   45afe:	bd70      	pop	{r4, r5, r6, pc}
   45b00:	4628      	mov	r0, r5
   45b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   45b06:	f001 fa53 	bl	46fb0 <_isatty_r>
   45b0a:	b1a0      	cbz	r0, 45b36 <__smakebuf_r+0x8a>
   45b0c:	89a3      	ldrh	r3, [r4, #12]
   45b0e:	f023 0303 	bic.w	r3, r3, #3
   45b12:	f043 0301 	orr.w	r3, r3, #1
   45b16:	b21b      	sxth	r3, r3
   45b18:	e7ee      	b.n	45af8 <__smakebuf_r+0x4c>
   45b1a:	059a      	lsls	r2, r3, #22
   45b1c:	d4ee      	bmi.n	45afc <__smakebuf_r+0x50>
   45b1e:	f023 0303 	bic.w	r3, r3, #3
   45b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
   45b26:	2101      	movs	r1, #1
   45b28:	f043 0302 	orr.w	r3, r3, #2
   45b2c:	6022      	str	r2, [r4, #0]
   45b2e:	6122      	str	r2, [r4, #16]
   45b30:	81a3      	strh	r3, [r4, #12]
   45b32:	6161      	str	r1, [r4, #20]
   45b34:	e7e2      	b.n	45afc <__smakebuf_r+0x50>
   45b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   45b3a:	e7dd      	b.n	45af8 <__smakebuf_r+0x4c>
   45b3c:	00044ae1 	.word	0x00044ae1

00045b40 <_mbrtowc_r>:
   45b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   45b42:	4c13      	ldr	r4, [pc, #76]	; (45b90 <_mbrtowc_r+0x50>)
   45b44:	b083      	sub	sp, #12
   45b46:	4607      	mov	r7, r0
   45b48:	6824      	ldr	r4, [r4, #0]
   45b4a:	9d08      	ldr	r5, [sp, #32]
   45b4c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   45b4e:	b15a      	cbz	r2, 45b68 <_mbrtowc_r+0x28>
   45b50:	4e10      	ldr	r6, [pc, #64]	; (45b94 <_mbrtowc_r+0x54>)
   45b52:	9500      	str	r5, [sp, #0]
   45b54:	2c00      	cmp	r4, #0
   45b56:	bf08      	it	eq
   45b58:	4634      	moveq	r4, r6
   45b5a:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   45b5e:	47a0      	blx	r4
   45b60:	1c43      	adds	r3, r0, #1
   45b62:	d00f      	beq.n	45b84 <_mbrtowc_r+0x44>
   45b64:	b003      	add	sp, #12
   45b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45b68:	4616      	mov	r6, r2
   45b6a:	4a0a      	ldr	r2, [pc, #40]	; (45b94 <_mbrtowc_r+0x54>)
   45b6c:	9500      	str	r5, [sp, #0]
   45b6e:	2301      	movs	r3, #1
   45b70:	2c00      	cmp	r4, #0
   45b72:	bf08      	it	eq
   45b74:	4614      	moveq	r4, r2
   45b76:	4631      	mov	r1, r6
   45b78:	4a07      	ldr	r2, [pc, #28]	; (45b98 <_mbrtowc_r+0x58>)
   45b7a:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   45b7e:	47a0      	blx	r4
   45b80:	1c43      	adds	r3, r0, #1
   45b82:	d1ef      	bne.n	45b64 <_mbrtowc_r+0x24>
   45b84:	2200      	movs	r2, #0
   45b86:	238a      	movs	r3, #138	; 0x8a
   45b88:	602a      	str	r2, [r5, #0]
   45b8a:	603b      	str	r3, [r7, #0]
   45b8c:	b003      	add	sp, #12
   45b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45b90:	20031bb8 	.word	0x20031bb8
   45b94:	20031bbc 	.word	0x20031bbc
   45b98:	0004b8e8 	.word	0x0004b8e8

00045b9c <memmove>:
   45b9c:	4288      	cmp	r0, r1
   45b9e:	b4f0      	push	{r4, r5, r6, r7}
   45ba0:	d90d      	bls.n	45bbe <memmove+0x22>
   45ba2:	188b      	adds	r3, r1, r2
   45ba4:	4283      	cmp	r3, r0
   45ba6:	d90a      	bls.n	45bbe <memmove+0x22>
   45ba8:	1884      	adds	r4, r0, r2
   45baa:	b132      	cbz	r2, 45bba <memmove+0x1e>
   45bac:	4622      	mov	r2, r4
   45bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   45bb2:	4299      	cmp	r1, r3
   45bb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   45bb8:	d1f9      	bne.n	45bae <memmove+0x12>
   45bba:	bcf0      	pop	{r4, r5, r6, r7}
   45bbc:	4770      	bx	lr
   45bbe:	2a0f      	cmp	r2, #15
   45bc0:	d948      	bls.n	45c54 <memmove+0xb8>
   45bc2:	ea40 0301 	orr.w	r3, r0, r1
   45bc6:	079b      	lsls	r3, r3, #30
   45bc8:	d146      	bne.n	45c58 <memmove+0xbc>
   45bca:	f1a2 0310 	sub.w	r3, r2, #16
   45bce:	f101 0720 	add.w	r7, r1, #32
   45bd2:	f101 0410 	add.w	r4, r1, #16
   45bd6:	f100 0510 	add.w	r5, r0, #16
   45bda:	091b      	lsrs	r3, r3, #4
   45bdc:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   45be0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   45be4:	3410      	adds	r4, #16
   45be6:	3510      	adds	r5, #16
   45be8:	f845 6c20 	str.w	r6, [r5, #-32]
   45bec:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   45bf0:	f845 6c1c 	str.w	r6, [r5, #-28]
   45bf4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   45bf8:	f845 6c18 	str.w	r6, [r5, #-24]
   45bfc:	f854 6c14 	ldr.w	r6, [r4, #-20]
   45c00:	42bc      	cmp	r4, r7
   45c02:	f845 6c14 	str.w	r6, [r5, #-20]
   45c06:	d1eb      	bne.n	45be0 <memmove+0x44>
   45c08:	3301      	adds	r3, #1
   45c0a:	f002 050f 	and.w	r5, r2, #15
   45c0e:	011b      	lsls	r3, r3, #4
   45c10:	2d03      	cmp	r5, #3
   45c12:	4419      	add	r1, r3
   45c14:	4403      	add	r3, r0
   45c16:	d921      	bls.n	45c5c <memmove+0xc0>
   45c18:	1f1f      	subs	r7, r3, #4
   45c1a:	460e      	mov	r6, r1
   45c1c:	462c      	mov	r4, r5
   45c1e:	3c04      	subs	r4, #4
   45c20:	f856 cb04 	ldr.w	ip, [r6], #4
   45c24:	2c03      	cmp	r4, #3
   45c26:	f847 cf04 	str.w	ip, [r7, #4]!
   45c2a:	d8f8      	bhi.n	45c1e <memmove+0x82>
   45c2c:	1f2c      	subs	r4, r5, #4
   45c2e:	f002 0203 	and.w	r2, r2, #3
   45c32:	f024 0403 	bic.w	r4, r4, #3
   45c36:	3404      	adds	r4, #4
   45c38:	4423      	add	r3, r4
   45c3a:	4421      	add	r1, r4
   45c3c:	2a00      	cmp	r2, #0
   45c3e:	d0bc      	beq.n	45bba <memmove+0x1e>
   45c40:	3b01      	subs	r3, #1
   45c42:	440a      	add	r2, r1
   45c44:	f811 4b01 	ldrb.w	r4, [r1], #1
   45c48:	4291      	cmp	r1, r2
   45c4a:	f803 4f01 	strb.w	r4, [r3, #1]!
   45c4e:	d1f9      	bne.n	45c44 <memmove+0xa8>
   45c50:	bcf0      	pop	{r4, r5, r6, r7}
   45c52:	4770      	bx	lr
   45c54:	4603      	mov	r3, r0
   45c56:	e7f1      	b.n	45c3c <memmove+0xa0>
   45c58:	4603      	mov	r3, r0
   45c5a:	e7f1      	b.n	45c40 <memmove+0xa4>
   45c5c:	462a      	mov	r2, r5
   45c5e:	e7ed      	b.n	45c3c <memmove+0xa0>

00045c60 <_Balloc>:
   45c60:	b538      	push	{r3, r4, r5, lr}
   45c62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   45c64:	4605      	mov	r5, r0
   45c66:	460c      	mov	r4, r1
   45c68:	b14b      	cbz	r3, 45c7e <_Balloc+0x1e>
   45c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   45c6e:	b180      	cbz	r0, 45c92 <_Balloc+0x32>
   45c70:	6802      	ldr	r2, [r0, #0]
   45c72:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   45c76:	2300      	movs	r3, #0
   45c78:	e9c0 3303 	strd	r3, r3, [r0, #12]
   45c7c:	bd38      	pop	{r3, r4, r5, pc}
   45c7e:	2221      	movs	r2, #33	; 0x21
   45c80:	2104      	movs	r1, #4
   45c82:	f001 f8e3 	bl	46e4c <_calloc_r>
   45c86:	4603      	mov	r3, r0
   45c88:	64e8      	str	r0, [r5, #76]	; 0x4c
   45c8a:	2800      	cmp	r0, #0
   45c8c:	d1ed      	bne.n	45c6a <_Balloc+0xa>
   45c8e:	2000      	movs	r0, #0
   45c90:	bd38      	pop	{r3, r4, r5, pc}
   45c92:	2101      	movs	r1, #1
   45c94:	4628      	mov	r0, r5
   45c96:	fa01 f504 	lsl.w	r5, r1, r4
   45c9a:	1d6a      	adds	r2, r5, #5
   45c9c:	0092      	lsls	r2, r2, #2
   45c9e:	f001 f8d5 	bl	46e4c <_calloc_r>
   45ca2:	2800      	cmp	r0, #0
   45ca4:	d0f3      	beq.n	45c8e <_Balloc+0x2e>
   45ca6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   45caa:	e7e4      	b.n	45c76 <_Balloc+0x16>

00045cac <_Bfree>:
   45cac:	b131      	cbz	r1, 45cbc <_Bfree+0x10>
   45cae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   45cb0:	684a      	ldr	r2, [r1, #4]
   45cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   45cb6:	6008      	str	r0, [r1, #0]
   45cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   45cbc:	4770      	bx	lr
   45cbe:	bf00      	nop

00045cc0 <__multadd>:
   45cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   45cc2:	f101 0c14 	add.w	ip, r1, #20
   45cc6:	b083      	sub	sp, #12
   45cc8:	460c      	mov	r4, r1
   45cca:	4605      	mov	r5, r0
   45ccc:	690e      	ldr	r6, [r1, #16]
   45cce:	2700      	movs	r7, #0
   45cd0:	f8dc 0000 	ldr.w	r0, [ip]
   45cd4:	3701      	adds	r7, #1
   45cd6:	b281      	uxth	r1, r0
   45cd8:	42be      	cmp	r6, r7
   45cda:	ea4f 4010 	mov.w	r0, r0, lsr #16
   45cde:	fb02 3301 	mla	r3, r2, r1, r3
   45ce2:	ea4f 4113 	mov.w	r1, r3, lsr #16
   45ce6:	b29b      	uxth	r3, r3
   45ce8:	fb02 1000 	mla	r0, r2, r0, r1
   45cec:	eb03 4100 	add.w	r1, r3, r0, lsl #16
   45cf0:	ea4f 4310 	mov.w	r3, r0, lsr #16
   45cf4:	f84c 1b04 	str.w	r1, [ip], #4
   45cf8:	dcea      	bgt.n	45cd0 <__multadd+0x10>
   45cfa:	b13b      	cbz	r3, 45d0c <__multadd+0x4c>
   45cfc:	68a2      	ldr	r2, [r4, #8]
   45cfe:	42b2      	cmp	r2, r6
   45d00:	dd07      	ble.n	45d12 <__multadd+0x52>
   45d02:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   45d06:	3601      	adds	r6, #1
   45d08:	6153      	str	r3, [r2, #20]
   45d0a:	6126      	str	r6, [r4, #16]
   45d0c:	4620      	mov	r0, r4
   45d0e:	b003      	add	sp, #12
   45d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45d12:	6861      	ldr	r1, [r4, #4]
   45d14:	4628      	mov	r0, r5
   45d16:	9301      	str	r3, [sp, #4]
   45d18:	3101      	adds	r1, #1
   45d1a:	f7ff ffa1 	bl	45c60 <_Balloc>
   45d1e:	6922      	ldr	r2, [r4, #16]
   45d20:	f104 010c 	add.w	r1, r4, #12
   45d24:	4607      	mov	r7, r0
   45d26:	3202      	adds	r2, #2
   45d28:	300c      	adds	r0, #12
   45d2a:	0092      	lsls	r2, r2, #2
   45d2c:	f7d4 f8c0 	bl	19eb0 <memcpy>
   45d30:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   45d32:	6861      	ldr	r1, [r4, #4]
   45d34:	9b01      	ldr	r3, [sp, #4]
   45d36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   45d3a:	6020      	str	r0, [r4, #0]
   45d3c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   45d40:	463c      	mov	r4, r7
   45d42:	e7de      	b.n	45d02 <__multadd+0x42>

00045d44 <__s2b>:
   45d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45d48:	461e      	mov	r6, r3
   45d4a:	4d22      	ldr	r5, [pc, #136]	; (45dd4 <__s2b+0x90>)
   45d4c:	3308      	adds	r3, #8
   45d4e:	460c      	mov	r4, r1
   45d50:	4690      	mov	r8, r2
   45d52:	4607      	mov	r7, r0
   45d54:	fb85 1203 	smull	r1, r2, r5, r3
   45d58:	17db      	asrs	r3, r3, #31
   45d5a:	ebc3 0262 	rsb	r2, r3, r2, asr #1
   45d5e:	2a01      	cmp	r2, #1
   45d60:	dd35      	ble.n	45dce <__s2b+0x8a>
   45d62:	2301      	movs	r3, #1
   45d64:	2100      	movs	r1, #0
   45d66:	005b      	lsls	r3, r3, #1
   45d68:	3101      	adds	r1, #1
   45d6a:	429a      	cmp	r2, r3
   45d6c:	dcfb      	bgt.n	45d66 <__s2b+0x22>
   45d6e:	4638      	mov	r0, r7
   45d70:	f7ff ff76 	bl	45c60 <_Balloc>
   45d74:	2301      	movs	r3, #1
   45d76:	9a08      	ldr	r2, [sp, #32]
   45d78:	f1b8 0f09 	cmp.w	r8, #9
   45d7c:	e9c0 3204 	strd	r3, r2, [r0, #16]
   45d80:	dd21      	ble.n	45dc6 <__s2b+0x82>
   45d82:	f104 0909 	add.w	r9, r4, #9
   45d86:	4444      	add	r4, r8
   45d88:	464d      	mov	r5, r9
   45d8a:	f815 3b01 	ldrb.w	r3, [r5], #1
   45d8e:	4601      	mov	r1, r0
   45d90:	220a      	movs	r2, #10
   45d92:	4638      	mov	r0, r7
   45d94:	3b30      	subs	r3, #48	; 0x30
   45d96:	f7ff ff93 	bl	45cc0 <__multadd>
   45d9a:	42ac      	cmp	r4, r5
   45d9c:	d1f5      	bne.n	45d8a <__s2b+0x46>
   45d9e:	eb09 0408 	add.w	r4, r9, r8
   45da2:	3c08      	subs	r4, #8
   45da4:	4546      	cmp	r6, r8
   45da6:	dd0c      	ble.n	45dc2 <__s2b+0x7e>
   45da8:	eba6 0608 	sub.w	r6, r6, r8
   45dac:	4426      	add	r6, r4
   45dae:	f814 3b01 	ldrb.w	r3, [r4], #1
   45db2:	4601      	mov	r1, r0
   45db4:	220a      	movs	r2, #10
   45db6:	4638      	mov	r0, r7
   45db8:	3b30      	subs	r3, #48	; 0x30
   45dba:	f7ff ff81 	bl	45cc0 <__multadd>
   45dbe:	42a6      	cmp	r6, r4
   45dc0:	d1f5      	bne.n	45dae <__s2b+0x6a>
   45dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   45dc6:	340a      	adds	r4, #10
   45dc8:	f04f 0809 	mov.w	r8, #9
   45dcc:	e7ea      	b.n	45da4 <__s2b+0x60>
   45dce:	2100      	movs	r1, #0
   45dd0:	e7cd      	b.n	45d6e <__s2b+0x2a>
   45dd2:	bf00      	nop
   45dd4:	38e38e39 	.word	0x38e38e39

00045dd8 <__hi0bits>:
   45dd8:	4a0f      	ldr	r2, [pc, #60]	; (45e18 <__hi0bits+0x40>)
   45dda:	4603      	mov	r3, r0
   45ddc:	4002      	ands	r2, r0
   45dde:	b9c2      	cbnz	r2, 45e12 <__hi0bits+0x3a>
   45de0:	0403      	lsls	r3, r0, #16
   45de2:	2010      	movs	r0, #16
   45de4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   45de8:	d101      	bne.n	45dee <__hi0bits+0x16>
   45dea:	3008      	adds	r0, #8
   45dec:	021b      	lsls	r3, r3, #8
   45dee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   45df2:	d101      	bne.n	45df8 <__hi0bits+0x20>
   45df4:	3004      	adds	r0, #4
   45df6:	011b      	lsls	r3, r3, #4
   45df8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   45dfc:	d101      	bne.n	45e02 <__hi0bits+0x2a>
   45dfe:	3002      	adds	r0, #2
   45e00:	009b      	lsls	r3, r3, #2
   45e02:	2b00      	cmp	r3, #0
   45e04:	db04      	blt.n	45e10 <__hi0bits+0x38>
   45e06:	005b      	lsls	r3, r3, #1
   45e08:	d501      	bpl.n	45e0e <__hi0bits+0x36>
   45e0a:	3001      	adds	r0, #1
   45e0c:	4770      	bx	lr
   45e0e:	2020      	movs	r0, #32
   45e10:	4770      	bx	lr
   45e12:	2000      	movs	r0, #0
   45e14:	e7e6      	b.n	45de4 <__hi0bits+0xc>
   45e16:	bf00      	nop
   45e18:	ffff0000 	.word	0xffff0000

00045e1c <__lo0bits>:
   45e1c:	6803      	ldr	r3, [r0, #0]
   45e1e:	4601      	mov	r1, r0
   45e20:	f013 0207 	ands.w	r2, r3, #7
   45e24:	d007      	beq.n	45e36 <__lo0bits+0x1a>
   45e26:	07da      	lsls	r2, r3, #31
   45e28:	d41f      	bmi.n	45e6a <__lo0bits+0x4e>
   45e2a:	0798      	lsls	r0, r3, #30
   45e2c:	d51f      	bpl.n	45e6e <__lo0bits+0x52>
   45e2e:	085b      	lsrs	r3, r3, #1
   45e30:	2001      	movs	r0, #1
   45e32:	600b      	str	r3, [r1, #0]
   45e34:	4770      	bx	lr
   45e36:	b298      	uxth	r0, r3
   45e38:	b1a0      	cbz	r0, 45e64 <__lo0bits+0x48>
   45e3a:	4610      	mov	r0, r2
   45e3c:	f013 0fff 	tst.w	r3, #255	; 0xff
   45e40:	d101      	bne.n	45e46 <__lo0bits+0x2a>
   45e42:	3008      	adds	r0, #8
   45e44:	0a1b      	lsrs	r3, r3, #8
   45e46:	071a      	lsls	r2, r3, #28
   45e48:	d101      	bne.n	45e4e <__lo0bits+0x32>
   45e4a:	3004      	adds	r0, #4
   45e4c:	091b      	lsrs	r3, r3, #4
   45e4e:	079a      	lsls	r2, r3, #30
   45e50:	d101      	bne.n	45e56 <__lo0bits+0x3a>
   45e52:	3002      	adds	r0, #2
   45e54:	089b      	lsrs	r3, r3, #2
   45e56:	07da      	lsls	r2, r3, #31
   45e58:	d402      	bmi.n	45e60 <__lo0bits+0x44>
   45e5a:	085b      	lsrs	r3, r3, #1
   45e5c:	d00b      	beq.n	45e76 <__lo0bits+0x5a>
   45e5e:	3001      	adds	r0, #1
   45e60:	600b      	str	r3, [r1, #0]
   45e62:	4770      	bx	lr
   45e64:	0c1b      	lsrs	r3, r3, #16
   45e66:	2010      	movs	r0, #16
   45e68:	e7e8      	b.n	45e3c <__lo0bits+0x20>
   45e6a:	2000      	movs	r0, #0
   45e6c:	4770      	bx	lr
   45e6e:	089b      	lsrs	r3, r3, #2
   45e70:	2002      	movs	r0, #2
   45e72:	600b      	str	r3, [r1, #0]
   45e74:	4770      	bx	lr
   45e76:	2020      	movs	r0, #32
   45e78:	4770      	bx	lr
   45e7a:	bf00      	nop

00045e7c <__i2b>:
   45e7c:	b510      	push	{r4, lr}
   45e7e:	460c      	mov	r4, r1
   45e80:	2101      	movs	r1, #1
   45e82:	f7ff feed 	bl	45c60 <_Balloc>
   45e86:	2201      	movs	r2, #1
   45e88:	e9c0 2404 	strd	r2, r4, [r0, #16]
   45e8c:	bd10      	pop	{r4, pc}
   45e8e:	bf00      	nop

00045e90 <__multiply>:
   45e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45e94:	690d      	ldr	r5, [r1, #16]
   45e96:	b085      	sub	sp, #20
   45e98:	6914      	ldr	r4, [r2, #16]
   45e9a:	460e      	mov	r6, r1
   45e9c:	4691      	mov	r9, r2
   45e9e:	42a5      	cmp	r5, r4
   45ea0:	da04      	bge.n	45eac <__multiply+0x1c>
   45ea2:	462a      	mov	r2, r5
   45ea4:	464e      	mov	r6, r9
   45ea6:	4625      	mov	r5, r4
   45ea8:	4689      	mov	r9, r1
   45eaa:	4614      	mov	r4, r2
   45eac:	eb05 0804 	add.w	r8, r5, r4
   45eb0:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
   45eb4:	4543      	cmp	r3, r8
   45eb6:	bfb8      	it	lt
   45eb8:	3101      	addlt	r1, #1
   45eba:	f7ff fed1 	bl	45c60 <_Balloc>
   45ebe:	f100 0b14 	add.w	fp, r0, #20
   45ec2:	9001      	str	r0, [sp, #4]
   45ec4:	eb0b 0a88 	add.w	sl, fp, r8, lsl #2
   45ec8:	45d3      	cmp	fp, sl
   45eca:	d205      	bcs.n	45ed8 <__multiply+0x48>
   45ecc:	465b      	mov	r3, fp
   45ece:	2200      	movs	r2, #0
   45ed0:	f843 2b04 	str.w	r2, [r3], #4
   45ed4:	459a      	cmp	sl, r3
   45ed6:	d8fb      	bhi.n	45ed0 <__multiply+0x40>
   45ed8:	f109 0314 	add.w	r3, r9, #20
   45edc:	f106 0214 	add.w	r2, r6, #20
   45ee0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   45ee4:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
   45ee8:	42a3      	cmp	r3, r4
   45eea:	d264      	bcs.n	45fb6 <__multiply+0x126>
   45eec:	eba4 0409 	sub.w	r4, r4, r9
   45ef0:	f109 0910 	add.w	r9, r9, #16
   45ef4:	3c15      	subs	r4, #21
   45ef6:	f024 0403 	bic.w	r4, r4, #3
   45efa:	4423      	add	r3, r4
   45efc:	e9cd a802 	strd	sl, r8, [sp, #8]
   45f00:	4690      	mov	r8, r2
   45f02:	469a      	mov	sl, r3
   45f04:	e005      	b.n	45f12 <__multiply+0x82>
   45f06:	0c00      	lsrs	r0, r0, #16
   45f08:	d12e      	bne.n	45f68 <__multiply+0xd8>
   45f0a:	45ca      	cmp	sl, r9
   45f0c:	f10b 0b04 	add.w	fp, fp, #4
   45f10:	d04f      	beq.n	45fb2 <__multiply+0x122>
   45f12:	f859 0f04 	ldr.w	r0, [r9, #4]!
   45f16:	fa1f fc80 	uxth.w	ip, r0
   45f1a:	f1bc 0f00 	cmp.w	ip, #0
   45f1e:	d0f2      	beq.n	45f06 <__multiply+0x76>
   45f20:	4647      	mov	r7, r8
   45f22:	465e      	mov	r6, fp
   45f24:	2100      	movs	r1, #0
   45f26:	e000      	b.n	45f2a <__multiply+0x9a>
   45f28:	4606      	mov	r6, r0
   45f2a:	f857 3b04 	ldr.w	r3, [r7], #4
   45f2e:	4630      	mov	r0, r6
   45f30:	6834      	ldr	r4, [r6, #0]
   45f32:	b29a      	uxth	r2, r3
   45f34:	45be      	cmp	lr, r7
   45f36:	b2a5      	uxth	r5, r4
   45f38:	ea4f 4313 	mov.w	r3, r3, lsr #16
   45f3c:	fb0c 5202 	mla	r2, ip, r2, r5
   45f40:	ea4f 4414 	mov.w	r4, r4, lsr #16
   45f44:	440a      	add	r2, r1
   45f46:	fb0c 4103 	mla	r1, ip, r3, r4
   45f4a:	b293      	uxth	r3, r2
   45f4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   45f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   45f54:	ea4f 4111 	mov.w	r1, r1, lsr #16
   45f58:	f840 3b04 	str.w	r3, [r0], #4
   45f5c:	d8e4      	bhi.n	45f28 <__multiply+0x98>
   45f5e:	6071      	str	r1, [r6, #4]
   45f60:	f8d9 0000 	ldr.w	r0, [r9]
   45f64:	0c00      	lsrs	r0, r0, #16
   45f66:	d0d0      	beq.n	45f0a <__multiply+0x7a>
   45f68:	f8db 3000 	ldr.w	r3, [fp]
   45f6c:	4644      	mov	r4, r8
   45f6e:	465e      	mov	r6, fp
   45f70:	2700      	movs	r7, #0
   45f72:	461a      	mov	r2, r3
   45f74:	e000      	b.n	45f78 <__multiply+0xe8>
   45f76:	460e      	mov	r6, r1
   45f78:	0c15      	lsrs	r5, r2, #16
   45f7a:	8822      	ldrh	r2, [r4, #0]
   45f7c:	b29b      	uxth	r3, r3
   45f7e:	4631      	mov	r1, r6
   45f80:	fb00 5202 	mla	r2, r0, r2, r5
   45f84:	4417      	add	r7, r2
   45f86:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   45f8a:	f841 3b04 	str.w	r3, [r1], #4
   45f8e:	f854 3b04 	ldr.w	r3, [r4], #4
   45f92:	6872      	ldr	r2, [r6, #4]
   45f94:	0c1b      	lsrs	r3, r3, #16
   45f96:	45a6      	cmp	lr, r4
   45f98:	b295      	uxth	r5, r2
   45f9a:	fb00 5303 	mla	r3, r0, r3, r5
   45f9e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   45fa2:	ea4f 4713 	mov.w	r7, r3, lsr #16
   45fa6:	d8e6      	bhi.n	45f76 <__multiply+0xe6>
   45fa8:	45ca      	cmp	sl, r9
   45faa:	6073      	str	r3, [r6, #4]
   45fac:	f10b 0b04 	add.w	fp, fp, #4
   45fb0:	d1af      	bne.n	45f12 <__multiply+0x82>
   45fb2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   45fb6:	f1b8 0f00 	cmp.w	r8, #0
   45fba:	dd0b      	ble.n	45fd4 <__multiply+0x144>
   45fbc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   45fc0:	f1aa 0a04 	sub.w	sl, sl, #4
   45fc4:	b11b      	cbz	r3, 45fce <__multiply+0x13e>
   45fc6:	e005      	b.n	45fd4 <__multiply+0x144>
   45fc8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   45fcc:	b913      	cbnz	r3, 45fd4 <__multiply+0x144>
   45fce:	f1b8 0801 	subs.w	r8, r8, #1
   45fd2:	d1f9      	bne.n	45fc8 <__multiply+0x138>
   45fd4:	9801      	ldr	r0, [sp, #4]
   45fd6:	f8c0 8010 	str.w	r8, [r0, #16]
   45fda:	b005      	add	sp, #20
   45fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00045fe0 <__pow5mult>:
   45fe0:	f012 0303 	ands.w	r3, r2, #3
   45fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45fe8:	4614      	mov	r4, r2
   45fea:	4607      	mov	r7, r0
   45fec:	d12e      	bne.n	4604c <__pow5mult+0x6c>
   45fee:	460d      	mov	r5, r1
   45ff0:	10a4      	asrs	r4, r4, #2
   45ff2:	d01c      	beq.n	4602e <__pow5mult+0x4e>
   45ff4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   45ff6:	b396      	cbz	r6, 4605e <__pow5mult+0x7e>
   45ff8:	07e3      	lsls	r3, r4, #31
   45ffa:	f04f 0800 	mov.w	r8, #0
   45ffe:	d406      	bmi.n	4600e <__pow5mult+0x2e>
   46000:	1064      	asrs	r4, r4, #1
   46002:	d014      	beq.n	4602e <__pow5mult+0x4e>
   46004:	6830      	ldr	r0, [r6, #0]
   46006:	b1a8      	cbz	r0, 46034 <__pow5mult+0x54>
   46008:	4606      	mov	r6, r0
   4600a:	07e3      	lsls	r3, r4, #31
   4600c:	d5f8      	bpl.n	46000 <__pow5mult+0x20>
   4600e:	4632      	mov	r2, r6
   46010:	4629      	mov	r1, r5
   46012:	4638      	mov	r0, r7
   46014:	f7ff ff3c 	bl	45e90 <__multiply>
   46018:	b1b5      	cbz	r5, 46048 <__pow5mult+0x68>
   4601a:	686a      	ldr	r2, [r5, #4]
   4601c:	1064      	asrs	r4, r4, #1
   4601e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   46020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   46024:	6029      	str	r1, [r5, #0]
   46026:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   4602a:	4605      	mov	r5, r0
   4602c:	d1ea      	bne.n	46004 <__pow5mult+0x24>
   4602e:	4628      	mov	r0, r5
   46030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   46034:	4632      	mov	r2, r6
   46036:	4631      	mov	r1, r6
   46038:	4638      	mov	r0, r7
   4603a:	f7ff ff29 	bl	45e90 <__multiply>
   4603e:	6030      	str	r0, [r6, #0]
   46040:	f8c0 8000 	str.w	r8, [r0]
   46044:	4606      	mov	r6, r0
   46046:	e7e0      	b.n	4600a <__pow5mult+0x2a>
   46048:	4605      	mov	r5, r0
   4604a:	e7d9      	b.n	46000 <__pow5mult+0x20>
   4604c:	1e5a      	subs	r2, r3, #1
   4604e:	4d0b      	ldr	r5, [pc, #44]	; (4607c <__pow5mult+0x9c>)
   46050:	2300      	movs	r3, #0
   46052:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   46056:	f7ff fe33 	bl	45cc0 <__multadd>
   4605a:	4605      	mov	r5, r0
   4605c:	e7c8      	b.n	45ff0 <__pow5mult+0x10>
   4605e:	2101      	movs	r1, #1
   46060:	4638      	mov	r0, r7
   46062:	f7ff fdfd 	bl	45c60 <_Balloc>
   46066:	f240 2171 	movw	r1, #625	; 0x271
   4606a:	2201      	movs	r2, #1
   4606c:	2300      	movs	r3, #0
   4606e:	4606      	mov	r6, r0
   46070:	e9c0 2104 	strd	r2, r1, [r0, #16]
   46074:	64b8      	str	r0, [r7, #72]	; 0x48
   46076:	6003      	str	r3, [r0, #0]
   46078:	e7be      	b.n	45ff8 <__pow5mult+0x18>
   4607a:	bf00      	nop
   4607c:	0004c900 	.word	0x0004c900

00046080 <__lshift>:
   46080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46084:	690f      	ldr	r7, [r1, #16]
   46086:	ea4f 1962 	mov.w	r9, r2, asr #5
   4608a:	688b      	ldr	r3, [r1, #8]
   4608c:	460d      	mov	r5, r1
   4608e:	444f      	add	r7, r9
   46090:	4690      	mov	r8, r2
   46092:	4606      	mov	r6, r0
   46094:	6849      	ldr	r1, [r1, #4]
   46096:	1c7c      	adds	r4, r7, #1
   46098:	429c      	cmp	r4, r3
   4609a:	dd03      	ble.n	460a4 <__lshift+0x24>
   4609c:	005b      	lsls	r3, r3, #1
   4609e:	3101      	adds	r1, #1
   460a0:	429c      	cmp	r4, r3
   460a2:	dcfb      	bgt.n	4609c <__lshift+0x1c>
   460a4:	4630      	mov	r0, r6
   460a6:	f7ff fddb 	bl	45c60 <_Balloc>
   460aa:	f1b9 0f00 	cmp.w	r9, #0
   460ae:	4684      	mov	ip, r0
   460b0:	f100 0314 	add.w	r3, r0, #20
   460b4:	dd3d      	ble.n	46132 <__lshift+0xb2>
   460b6:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   460ba:	2200      	movs	r2, #0
   460bc:	f843 2b04 	str.w	r2, [r3], #4
   460c0:	428b      	cmp	r3, r1
   460c2:	d1fb      	bne.n	460bc <__lshift+0x3c>
   460c4:	f105 0314 	add.w	r3, r5, #20
   460c8:	6928      	ldr	r0, [r5, #16]
   460ca:	f018 081f 	ands.w	r8, r8, #31
   460ce:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   460d2:	d026      	beq.n	46122 <__lshift+0xa2>
   460d4:	f1c8 0220 	rsb	r2, r8, #32
   460d8:	f04f 0a00 	mov.w	sl, #0
   460dc:	e000      	b.n	460e0 <__lshift+0x60>
   460de:	4649      	mov	r1, r9
   460e0:	6818      	ldr	r0, [r3, #0]
   460e2:	4689      	mov	r9, r1
   460e4:	fa00 f008 	lsl.w	r0, r0, r8
   460e8:	ea40 000a 	orr.w	r0, r0, sl
   460ec:	f849 0b04 	str.w	r0, [r9], #4
   460f0:	f853 0b04 	ldr.w	r0, [r3], #4
   460f4:	4573      	cmp	r3, lr
   460f6:	fa20 fa02 	lsr.w	sl, r0, r2
   460fa:	d3f0      	bcc.n	460de <__lshift+0x5e>
   460fc:	f8c1 a004 	str.w	sl, [r1, #4]
   46100:	f1ba 0f00 	cmp.w	sl, #0
   46104:	d000      	beq.n	46108 <__lshift+0x88>
   46106:	1cbc      	adds	r4, r7, #2
   46108:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   4610a:	3c01      	subs	r4, #1
   4610c:	686a      	ldr	r2, [r5, #4]
   4610e:	4660      	mov	r0, ip
   46110:	f8cc 4010 	str.w	r4, [ip, #16]
   46114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   46118:	6029      	str	r1, [r5, #0]
   4611a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   4611e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   46122:	3904      	subs	r1, #4
   46124:	f853 2b04 	ldr.w	r2, [r3], #4
   46128:	459e      	cmp	lr, r3
   4612a:	f841 2f04 	str.w	r2, [r1, #4]!
   4612e:	d8f9      	bhi.n	46124 <__lshift+0xa4>
   46130:	e7ea      	b.n	46108 <__lshift+0x88>
   46132:	4619      	mov	r1, r3
   46134:	e7c6      	b.n	460c4 <__lshift+0x44>
   46136:	bf00      	nop

00046138 <__mcmp>:
   46138:	b430      	push	{r4, r5}
   4613a:	690a      	ldr	r2, [r1, #16]
   4613c:	4605      	mov	r5, r0
   4613e:	6900      	ldr	r0, [r0, #16]
   46140:	1a80      	subs	r0, r0, r2
   46142:	d10f      	bne.n	46164 <__mcmp+0x2c>
   46144:	0092      	lsls	r2, r2, #2
   46146:	3514      	adds	r5, #20
   46148:	3114      	adds	r1, #20
   4614a:	18ab      	adds	r3, r5, r2
   4614c:	4411      	add	r1, r2
   4614e:	e001      	b.n	46154 <__mcmp+0x1c>
   46150:	429d      	cmp	r5, r3
   46152:	d207      	bcs.n	46164 <__mcmp+0x2c>
   46154:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   46158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   4615c:	4294      	cmp	r4, r2
   4615e:	d0f7      	beq.n	46150 <__mcmp+0x18>
   46160:	d302      	bcc.n	46168 <__mcmp+0x30>
   46162:	2001      	movs	r0, #1
   46164:	bc30      	pop	{r4, r5}
   46166:	4770      	bx	lr
   46168:	f04f 30ff 	mov.w	r0, #4294967295
   4616c:	e7fa      	b.n	46164 <__mcmp+0x2c>
   4616e:	bf00      	nop

00046170 <__mdiff>:
   46170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   46174:	690c      	ldr	r4, [r1, #16]
   46176:	460f      	mov	r7, r1
   46178:	6913      	ldr	r3, [r2, #16]
   4617a:	4616      	mov	r6, r2
   4617c:	f101 0514 	add.w	r5, r1, #20
   46180:	f102 0814 	add.w	r8, r2, #20
   46184:	1ae4      	subs	r4, r4, r3
   46186:	2c00      	cmp	r4, #0
   46188:	d114      	bne.n	461b4 <__mdiff+0x44>
   4618a:	009b      	lsls	r3, r3, #2
   4618c:	18ea      	adds	r2, r5, r3
   4618e:	4443      	add	r3, r8
   46190:	e001      	b.n	46196 <__mdiff+0x26>
   46192:	42aa      	cmp	r2, r5
   46194:	d962      	bls.n	4625c <__mdiff+0xec>
   46196:	f852 cd04 	ldr.w	ip, [r2, #-4]!
   4619a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4619e:	458c      	cmp	ip, r1
   461a0:	d0f7      	beq.n	46192 <__mdiff+0x22>
   461a2:	d209      	bcs.n	461b8 <__mdiff+0x48>
   461a4:	462a      	mov	r2, r5
   461a6:	463b      	mov	r3, r7
   461a8:	4645      	mov	r5, r8
   461aa:	4637      	mov	r7, r6
   461ac:	4690      	mov	r8, r2
   461ae:	461e      	mov	r6, r3
   461b0:	2401      	movs	r4, #1
   461b2:	e001      	b.n	461b8 <__mdiff+0x48>
   461b4:	dbf6      	blt.n	461a4 <__mdiff+0x34>
   461b6:	2400      	movs	r4, #0
   461b8:	6879      	ldr	r1, [r7, #4]
   461ba:	f7ff fd51 	bl	45c60 <_Balloc>
   461be:	f8d7 e010 	ldr.w	lr, [r7, #16]
   461c2:	6933      	ldr	r3, [r6, #16]
   461c4:	4647      	mov	r7, r8
   461c6:	462e      	mov	r6, r5
   461c8:	eb05 0c8e 	add.w	ip, r5, lr, lsl #2
   461cc:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   461d0:	f100 0514 	add.w	r5, r0, #20
   461d4:	2200      	movs	r2, #0
   461d6:	60c4      	str	r4, [r0, #12]
   461d8:	f856 3b04 	ldr.w	r3, [r6], #4
   461dc:	f857 1b04 	ldr.w	r1, [r7], #4
   461e0:	b29c      	uxth	r4, r3
   461e2:	fa1f f981 	uxth.w	r9, r1
   461e6:	45b8      	cmp	r8, r7
   461e8:	4422      	add	r2, r4
   461ea:	ea4f 4111 	mov.w	r1, r1, lsr #16
   461ee:	eba2 0409 	sub.w	r4, r2, r9
   461f2:	ebc1 4213 	rsb	r2, r1, r3, lsr #16
   461f6:	b2a3      	uxth	r3, r4
   461f8:	eb02 4224 	add.w	r2, r2, r4, asr #16
   461fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   46200:	ea4f 4222 	mov.w	r2, r2, asr #16
   46204:	f845 3b04 	str.w	r3, [r5], #4
   46208:	d8e6      	bhi.n	461d8 <__mdiff+0x68>
   4620a:	45b4      	cmp	ip, r6
   4620c:	d91a      	bls.n	46244 <__mdiff+0xd4>
   4620e:	462f      	mov	r7, r5
   46210:	4634      	mov	r4, r6
   46212:	f854 8b04 	ldr.w	r8, [r4], #4
   46216:	fa1f f388 	uxth.w	r3, r8
   4621a:	45a4      	cmp	ip, r4
   4621c:	441a      	add	r2, r3
   4621e:	ea4f 4122 	mov.w	r1, r2, asr #16
   46222:	b293      	uxth	r3, r2
   46224:	eb01 4218 	add.w	r2, r1, r8, lsr #16
   46228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4622c:	ea4f 4222 	mov.w	r2, r2, asr #16
   46230:	f847 3b04 	str.w	r3, [r7], #4
   46234:	d8ed      	bhi.n	46212 <__mdiff+0xa2>
   46236:	43f6      	mvns	r6, r6
   46238:	44b4      	add	ip, r6
   4623a:	f02c 0c03 	bic.w	ip, ip, #3
   4623e:	f10c 0c04 	add.w	ip, ip, #4
   46242:	4465      	add	r5, ip
   46244:	3d04      	subs	r5, #4
   46246:	b92b      	cbnz	r3, 46254 <__mdiff+0xe4>
   46248:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   4624c:	f10e 3eff 	add.w	lr, lr, #4294967295
   46250:	2b00      	cmp	r3, #0
   46252:	d0f9      	beq.n	46248 <__mdiff+0xd8>
   46254:	f8c0 e010 	str.w	lr, [r0, #16]
   46258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4625c:	2100      	movs	r1, #0
   4625e:	f7ff fcff 	bl	45c60 <_Balloc>
   46262:	2201      	movs	r2, #1
   46264:	2300      	movs	r3, #0
   46266:	e9c0 2304 	strd	r2, r3, [r0, #16]
   4626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4626e:	bf00      	nop

00046270 <__ulp>:
   46270:	4b14      	ldr	r3, [pc, #80]	; (462c4 <__ulp+0x54>)
   46272:	ee10 2a90 	vmov	r2, s1
   46276:	401a      	ands	r2, r3
   46278:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   4627c:	2b00      	cmp	r3, #0
   4627e:	dd04      	ble.n	4628a <__ulp+0x1a>
   46280:	2000      	movs	r0, #0
   46282:	4619      	mov	r1, r3
   46284:	ec41 0b10 	vmov	d0, r0, r1
   46288:	4770      	bx	lr
   4628a:	425b      	negs	r3, r3
   4628c:	151b      	asrs	r3, r3, #20
   4628e:	2b13      	cmp	r3, #19
   46290:	dd0f      	ble.n	462b2 <__ulp+0x42>
   46292:	3b14      	subs	r3, #20
   46294:	2100      	movs	r1, #0
   46296:	2b1e      	cmp	r3, #30
   46298:	dc08      	bgt.n	462ac <__ulp+0x3c>
   4629a:	f1c3 031f 	rsb	r3, r3, #31
   4629e:	2201      	movs	r2, #1
   462a0:	fa02 f303 	lsl.w	r3, r2, r3
   462a4:	4618      	mov	r0, r3
   462a6:	ec41 0b10 	vmov	d0, r0, r1
   462aa:	4770      	bx	lr
   462ac:	2301      	movs	r3, #1
   462ae:	4618      	mov	r0, r3
   462b0:	e7f9      	b.n	462a6 <__ulp+0x36>
   462b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   462b6:	2000      	movs	r0, #0
   462b8:	fa42 f103 	asr.w	r1, r2, r3
   462bc:	ec41 0b10 	vmov	d0, r0, r1
   462c0:	4770      	bx	lr
   462c2:	bf00      	nop
   462c4:	7ff00000 	.word	0x7ff00000

000462c8 <__b2d>:
   462c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   462ca:	6904      	ldr	r4, [r0, #16]
   462cc:	f100 0614 	add.w	r6, r0, #20
   462d0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   462d4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   462d8:	1f25      	subs	r5, r4, #4
   462da:	4638      	mov	r0, r7
   462dc:	f7ff fd7c 	bl	45dd8 <__hi0bits>
   462e0:	f1c0 0320 	rsb	r3, r0, #32
   462e4:	280a      	cmp	r0, #10
   462e6:	600b      	str	r3, [r1, #0]
   462e8:	dc15      	bgt.n	46316 <__b2d+0x4e>
   462ea:	f1c0 0c0b 	rsb	ip, r0, #11
   462ee:	42ae      	cmp	r6, r5
   462f0:	fa27 f10c 	lsr.w	r1, r7, ip
   462f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   462f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   462fc:	d232      	bcs.n	46364 <__b2d+0x9c>
   462fe:	f854 1c08 	ldr.w	r1, [r4, #-8]
   46302:	fa21 f10c 	lsr.w	r1, r1, ip
   46306:	3015      	adds	r0, #21
   46308:	fa07 f000 	lsl.w	r0, r7, r0
   4630c:	ea40 0201 	orr.w	r2, r0, r1
   46310:	ec43 2b10 	vmov	d0, r2, r3
   46314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46316:	42ae      	cmp	r6, r5
   46318:	f1a0 000b 	sub.w	r0, r0, #11
   4631c:	d21a      	bcs.n	46354 <__b2d+0x8c>
   4631e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   46322:	b1c8      	cbz	r0, 46358 <__b2d+0x90>
   46324:	fa07 f500 	lsl.w	r5, r7, r0
   46328:	4f14      	ldr	r7, [pc, #80]	; (4637c <__b2d+0xb4>)
   4632a:	f1c0 0c20 	rsb	ip, r0, #32
   4632e:	432f      	orrs	r7, r5
   46330:	f1a4 0508 	sub.w	r5, r4, #8
   46334:	fa21 fe0c 	lsr.w	lr, r1, ip
   46338:	4081      	lsls	r1, r0
   4633a:	42ae      	cmp	r6, r5
   4633c:	ea47 030e 	orr.w	r3, r7, lr
   46340:	d204      	bcs.n	4634c <__b2d+0x84>
   46342:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   46346:	fa20 f00c 	lsr.w	r0, r0, ip
   4634a:	4301      	orrs	r1, r0
   4634c:	460a      	mov	r2, r1
   4634e:	ec43 2b10 	vmov	d0, r2, r3
   46352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46354:	b940      	cbnz	r0, 46368 <__b2d+0xa0>
   46356:	4601      	mov	r1, r0
   46358:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   4635c:	460a      	mov	r2, r1
   4635e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   46362:	e7f4      	b.n	4634e <__b2d+0x86>
   46364:	2100      	movs	r1, #0
   46366:	e7ce      	b.n	46306 <__b2d+0x3e>
   46368:	fa07 f000 	lsl.w	r0, r7, r0
   4636c:	2100      	movs	r1, #0
   4636e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   46372:	460a      	mov	r2, r1
   46374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   46378:	e7e9      	b.n	4634e <__b2d+0x86>
   4637a:	bf00      	nop
   4637c:	3ff00000 	.word	0x3ff00000

00046380 <__d2b>:
   46380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   46384:	ec55 4b10 	vmov	r4, r5, d0
   46388:	f3c5 580a 	ubfx	r8, r5, #20, #11
   4638c:	b083      	sub	sp, #12
   4638e:	460f      	mov	r7, r1
   46390:	2101      	movs	r1, #1
   46392:	4616      	mov	r6, r2
   46394:	f7ff fc64 	bl	45c60 <_Balloc>
   46398:	f3c5 0313 	ubfx	r3, r5, #0, #20
   4639c:	4681      	mov	r9, r0
   4639e:	f1b8 0f00 	cmp.w	r8, #0
   463a2:	d001      	beq.n	463a8 <__d2b+0x28>
   463a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   463a8:	2c00      	cmp	r4, #0
   463aa:	9301      	str	r3, [sp, #4]
   463ac:	d024      	beq.n	463f8 <__d2b+0x78>
   463ae:	a802      	add	r0, sp, #8
   463b0:	f840 4d08 	str.w	r4, [r0, #-8]!
   463b4:	f7ff fd32 	bl	45e1c <__lo0bits>
   463b8:	2800      	cmp	r0, #0
   463ba:	d134      	bne.n	46426 <__d2b+0xa6>
   463bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   463c0:	f8c9 2014 	str.w	r2, [r9, #20]
   463c4:	2b00      	cmp	r3, #0
   463c6:	f8c9 3018 	str.w	r3, [r9, #24]
   463ca:	bf0c      	ite	eq
   463cc:	2101      	moveq	r1, #1
   463ce:	2102      	movne	r1, #2
   463d0:	f8c9 1010 	str.w	r1, [r9, #16]
   463d4:	f1b8 0f00 	cmp.w	r8, #0
   463d8:	d11a      	bne.n	46410 <__d2b+0x90>
   463da:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   463de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   463e2:	6038      	str	r0, [r7, #0]
   463e4:	6918      	ldr	r0, [r3, #16]
   463e6:	f7ff fcf7 	bl	45dd8 <__hi0bits>
   463ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   463ee:	6030      	str	r0, [r6, #0]
   463f0:	4648      	mov	r0, r9
   463f2:	b003      	add	sp, #12
   463f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   463f8:	a801      	add	r0, sp, #4
   463fa:	f7ff fd0f 	bl	45e1c <__lo0bits>
   463fe:	2301      	movs	r3, #1
   46400:	9a01      	ldr	r2, [sp, #4]
   46402:	3020      	adds	r0, #32
   46404:	4619      	mov	r1, r3
   46406:	e9c9 3204 	strd	r3, r2, [r9, #16]
   4640a:	f1b8 0f00 	cmp.w	r8, #0
   4640e:	d0e4      	beq.n	463da <__d2b+0x5a>
   46410:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
   46414:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
   46418:	4440      	add	r0, r8
   4641a:	6038      	str	r0, [r7, #0]
   4641c:	4648      	mov	r0, r9
   4641e:	6033      	str	r3, [r6, #0]
   46420:	b003      	add	sp, #12
   46422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   46426:	9b01      	ldr	r3, [sp, #4]
   46428:	f1c0 0220 	rsb	r2, r0, #32
   4642c:	9900      	ldr	r1, [sp, #0]
   4642e:	fa03 f202 	lsl.w	r2, r3, r2
   46432:	40c3      	lsrs	r3, r0
   46434:	430a      	orrs	r2, r1
   46436:	9301      	str	r3, [sp, #4]
   46438:	f8c9 2014 	str.w	r2, [r9, #20]
   4643c:	e7c2      	b.n	463c4 <__d2b+0x44>
   4643e:	bf00      	nop

00046440 <__ratio>:
   46440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46444:	b082      	sub	sp, #8
   46446:	468a      	mov	sl, r1
   46448:	4680      	mov	r8, r0
   4644a:	4669      	mov	r1, sp
   4644c:	f7ff ff3c 	bl	462c8 <__b2d>
   46450:	4650      	mov	r0, sl
   46452:	a901      	add	r1, sp, #4
   46454:	ec55 4b10 	vmov	r4, r5, d0
   46458:	f7ff ff36 	bl	462c8 <__b2d>
   4645c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   46460:	f8da 0010 	ldr.w	r0, [sl, #16]
   46464:	e9dd 1300 	ldrd	r1, r3, [sp]
   46468:	1a12      	subs	r2, r2, r0
   4646a:	1acb      	subs	r3, r1, r3
   4646c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   46470:	2b00      	cmp	r3, #0
   46472:	ec57 6b10 	vmov	r6, r7, d0
   46476:	dd0d      	ble.n	46494 <__ratio+0x54>
   46478:	eb05 5903 	add.w	r9, r5, r3, lsl #20
   4647c:	464d      	mov	r5, r9
   4647e:	4632      	mov	r2, r6
   46480:	463b      	mov	r3, r7
   46482:	4620      	mov	r0, r4
   46484:	4629      	mov	r1, r5
   46486:	f7d2 fab1 	bl	189ec <__aeabi_ddiv>
   4648a:	ec41 0b10 	vmov	d0, r0, r1
   4648e:	b002      	add	sp, #8
   46490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   46494:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   46498:	eb07 5103 	add.w	r1, r7, r3, lsl #20
   4649c:	460f      	mov	r7, r1
   4649e:	e7ee      	b.n	4647e <__ratio+0x3e>

000464a0 <__copybits>:
   464a0:	3901      	subs	r1, #1
   464a2:	f102 0314 	add.w	r3, r2, #20
   464a6:	b470      	push	{r4, r5, r6}
   464a8:	114c      	asrs	r4, r1, #5
   464aa:	6911      	ldr	r1, [r2, #16]
   464ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   464b0:	3401      	adds	r4, #1
   464b2:	428b      	cmp	r3, r1
   464b4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   464b8:	d20c      	bcs.n	464d4 <__copybits+0x34>
   464ba:	1f05      	subs	r5, r0, #4
   464bc:	f853 6b04 	ldr.w	r6, [r3], #4
   464c0:	4299      	cmp	r1, r3
   464c2:	f845 6f04 	str.w	r6, [r5, #4]!
   464c6:	d8f9      	bhi.n	464bc <__copybits+0x1c>
   464c8:	1a8b      	subs	r3, r1, r2
   464ca:	3b15      	subs	r3, #21
   464cc:	f023 0303 	bic.w	r3, r3, #3
   464d0:	3304      	adds	r3, #4
   464d2:	4418      	add	r0, r3
   464d4:	4284      	cmp	r4, r0
   464d6:	d904      	bls.n	464e2 <__copybits+0x42>
   464d8:	2300      	movs	r3, #0
   464da:	f840 3b04 	str.w	r3, [r0], #4
   464de:	4284      	cmp	r4, r0
   464e0:	d8fb      	bhi.n	464da <__copybits+0x3a>
   464e2:	bc70      	pop	{r4, r5, r6}
   464e4:	4770      	bx	lr
   464e6:	bf00      	nop

000464e8 <__any_on>:
   464e8:	b410      	push	{r4}
   464ea:	6903      	ldr	r3, [r0, #16]
   464ec:	114c      	asrs	r4, r1, #5
   464ee:	f100 0214 	add.w	r2, r0, #20
   464f2:	42a3      	cmp	r3, r4
   464f4:	da10      	bge.n	46518 <__any_on+0x30>
   464f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   464fa:	429a      	cmp	r2, r3
   464fc:	d21e      	bcs.n	4653c <__any_on+0x54>
   464fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
   46502:	3b04      	subs	r3, #4
   46504:	b118      	cbz	r0, 4650e <__any_on+0x26>
   46506:	e015      	b.n	46534 <__any_on+0x4c>
   46508:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4650c:	b991      	cbnz	r1, 46534 <__any_on+0x4c>
   4650e:	429a      	cmp	r2, r3
   46510:	d3fa      	bcc.n	46508 <__any_on+0x20>
   46512:	f85d 4b04 	ldr.w	r4, [sp], #4
   46516:	4770      	bx	lr
   46518:	eb02 0384 	add.w	r3, r2, r4, lsl #2
   4651c:	dded      	ble.n	464fa <__any_on+0x12>
   4651e:	f011 011f 	ands.w	r1, r1, #31
   46522:	d0ea      	beq.n	464fa <__any_on+0x12>
   46524:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   46528:	fa24 f001 	lsr.w	r0, r4, r1
   4652c:	fa00 f101 	lsl.w	r1, r0, r1
   46530:	428c      	cmp	r4, r1
   46532:	d0e2      	beq.n	464fa <__any_on+0x12>
   46534:	2001      	movs	r0, #1
   46536:	f85d 4b04 	ldr.w	r4, [sp], #4
   4653a:	4770      	bx	lr
   4653c:	2000      	movs	r0, #0
   4653e:	e7e8      	b.n	46512 <__any_on+0x2a>

00046540 <_read_r>:
   46540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46542:	460e      	mov	r6, r1
   46544:	4c08      	ldr	r4, [pc, #32]	; (46568 <_read_r+0x28>)
   46546:	2500      	movs	r5, #0
   46548:	4611      	mov	r1, r2
   4654a:	4607      	mov	r7, r0
   4654c:	461a      	mov	r2, r3
   4654e:	4630      	mov	r0, r6
   46550:	6025      	str	r5, [r4, #0]
   46552:	f001 fbc9 	bl	47ce8 <_read>
   46556:	1c43      	adds	r3, r0, #1
   46558:	d000      	beq.n	4655c <_read_r+0x1c>
   4655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4655c:	6823      	ldr	r3, [r4, #0]
   4655e:	2b00      	cmp	r3, #0
   46560:	d0fb      	beq.n	4655a <_read_r+0x1a>
   46562:	603b      	str	r3, [r7, #0]
   46564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46566:	bf00      	nop
   46568:	2002c360 	.word	0x2002c360

0004656c <frexp>:
   4656c:	b570      	push	{r4, r5, r6, lr}
   4656e:	ec55 4b10 	vmov	r4, r5, d0
   46572:	4606      	mov	r6, r0
   46574:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   46578:	4812      	ldr	r0, [pc, #72]	; (465c4 <frexp+0x58>)
   4657a:	2200      	movs	r2, #0
   4657c:	4283      	cmp	r3, r0
   4657e:	6032      	str	r2, [r6, #0]
   46580:	dc1d      	bgt.n	465be <frexp+0x52>
   46582:	ee10 0a10 	vmov	r0, s0
   46586:	4318      	orrs	r0, r3
   46588:	d019      	beq.n	465be <frexp+0x52>
   4658a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   4658e:	4629      	mov	r1, r5
   46590:	da0a      	bge.n	465a8 <frexp+0x3c>
   46592:	2200      	movs	r2, #0
   46594:	4b0c      	ldr	r3, [pc, #48]	; (465c8 <frexp+0x5c>)
   46596:	ee10 0a10 	vmov	r0, s0
   4659a:	f7d2 f8fd 	bl	18798 <__aeabi_dmul>
   4659e:	f06f 0235 	mvn.w	r2, #53	; 0x35
   465a2:	4604      	mov	r4, r0
   465a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   465a8:	4808      	ldr	r0, [pc, #32]	; (465cc <frexp+0x60>)
   465aa:	151b      	asrs	r3, r3, #20
   465ac:	4008      	ands	r0, r1
   465ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   465b2:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   465b6:	4413      	add	r3, r2
   465b8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   465bc:	6033      	str	r3, [r6, #0]
   465be:	ec45 4b10 	vmov	d0, r4, r5
   465c2:	bd70      	pop	{r4, r5, r6, pc}
   465c4:	7fefffff 	.word	0x7fefffff
   465c8:	43500000 	.word	0x43500000
   465cc:	800fffff 	.word	0x800fffff

000465d0 <__sccl>:
   465d0:	b470      	push	{r4, r5, r6}
   465d2:	780c      	ldrb	r4, [r1, #0]
   465d4:	4606      	mov	r6, r0
   465d6:	2c5e      	cmp	r4, #94	; 0x5e
   465d8:	d01e      	beq.n	46618 <__sccl+0x48>
   465da:	2200      	movs	r2, #0
   465dc:	1c48      	adds	r0, r1, #1
   465de:	4615      	mov	r5, r2
   465e0:	1e73      	subs	r3, r6, #1
   465e2:	f106 01ff 	add.w	r1, r6, #255	; 0xff
   465e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   465ea:	428b      	cmp	r3, r1
   465ec:	d1fb      	bne.n	465e6 <__sccl+0x16>
   465ee:	b184      	cbz	r4, 46612 <__sccl+0x42>
   465f0:	f085 0301 	eor.w	r3, r5, #1
   465f4:	1c41      	adds	r1, r0, #1
   465f6:	5533      	strb	r3, [r6, r4]
   465f8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   465fc:	2a2d      	cmp	r2, #45	; 0x2d
   465fe:	d010      	beq.n	46622 <__sccl+0x52>
   46600:	2a5d      	cmp	r2, #93	; 0x5d
   46602:	d003      	beq.n	4660c <__sccl+0x3c>
   46604:	b11a      	cbz	r2, 4660e <__sccl+0x3e>
   46606:	4614      	mov	r4, r2
   46608:	4608      	mov	r0, r1
   4660a:	e7f3      	b.n	465f4 <__sccl+0x24>
   4660c:	4608      	mov	r0, r1
   4660e:	bc70      	pop	{r4, r5, r6}
   46610:	4770      	bx	lr
   46612:	3801      	subs	r0, #1
   46614:	bc70      	pop	{r4, r5, r6}
   46616:	4770      	bx	lr
   46618:	2201      	movs	r2, #1
   4661a:	1c88      	adds	r0, r1, #2
   4661c:	784c      	ldrb	r4, [r1, #1]
   4661e:	4615      	mov	r5, r2
   46620:	e7de      	b.n	465e0 <__sccl+0x10>
   46622:	7845      	ldrb	r5, [r0, #1]
   46624:	2d5d      	cmp	r5, #93	; 0x5d
   46626:	d00a      	beq.n	4663e <__sccl+0x6e>
   46628:	42ac      	cmp	r4, r5
   4662a:	dc08      	bgt.n	4663e <__sccl+0x6e>
   4662c:	3002      	adds	r0, #2
   4662e:	1932      	adds	r2, r6, r4
   46630:	3401      	adds	r4, #1
   46632:	f802 3f01 	strb.w	r3, [r2, #1]!
   46636:	42a5      	cmp	r5, r4
   46638:	dcfa      	bgt.n	46630 <__sccl+0x60>
   4663a:	3102      	adds	r1, #2
   4663c:	e7dc      	b.n	465f8 <__sccl+0x28>
   4663e:	242d      	movs	r4, #45	; 0x2d
   46640:	4608      	mov	r0, r1
   46642:	e7d7      	b.n	465f4 <__sccl+0x24>

00046644 <nanf>:
   46644:	ed9f 0a01 	vldr	s0, [pc, #4]	; 4664c <nanf+0x8>
   46648:	4770      	bx	lr
   4664a:	bf00      	nop
   4664c:	7fc00000 	.word	0x7fc00000

00046650 <_raise_r>:
   46650:	291f      	cmp	r1, #31
   46652:	b538      	push	{r3, r4, r5, lr}
   46654:	d824      	bhi.n	466a0 <_raise_r+0x50>
   46656:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
   4665a:	4605      	mov	r5, r0
   4665c:	460c      	mov	r4, r1
   4665e:	b173      	cbz	r3, 4667e <_raise_r+0x2e>
   46660:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   46664:	b15a      	cbz	r2, 4667e <_raise_r+0x2e>
   46666:	2a01      	cmp	r2, #1
   46668:	d013      	beq.n	46692 <_raise_r+0x42>
   4666a:	1c51      	adds	r1, r2, #1
   4666c:	d014      	beq.n	46698 <_raise_r+0x48>
   4666e:	2500      	movs	r5, #0
   46670:	4620      	mov	r0, r4
   46672:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   46676:	4790      	blx	r2
   46678:	462b      	mov	r3, r5
   4667a:	4618      	mov	r0, r3
   4667c:	bd38      	pop	{r3, r4, r5, pc}
   4667e:	4628      	mov	r0, r5
   46680:	f000 f830 	bl	466e4 <_getpid_r>
   46684:	4622      	mov	r2, r4
   46686:	4601      	mov	r1, r0
   46688:	4628      	mov	r0, r5
   4668a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4668e:	f000 b815 	b.w	466bc <_kill_r>
   46692:	2300      	movs	r3, #0
   46694:	4618      	mov	r0, r3
   46696:	bd38      	pop	{r3, r4, r5, pc}
   46698:	2216      	movs	r2, #22
   4669a:	2301      	movs	r3, #1
   4669c:	6002      	str	r2, [r0, #0]
   4669e:	e7ec      	b.n	4667a <_raise_r+0x2a>
   466a0:	2216      	movs	r2, #22
   466a2:	f04f 33ff 	mov.w	r3, #4294967295
   466a6:	6002      	str	r2, [r0, #0]
   466a8:	e7e7      	b.n	4667a <_raise_r+0x2a>
   466aa:	bf00      	nop

000466ac <raise>:
   466ac:	4b02      	ldr	r3, [pc, #8]	; (466b8 <raise+0xc>)
   466ae:	4601      	mov	r1, r0
   466b0:	6818      	ldr	r0, [r3, #0]
   466b2:	f7ff bfcd 	b.w	46650 <_raise_r>
   466b6:	bf00      	nop
   466b8:	20031bb8 	.word	0x20031bb8

000466bc <_kill_r>:
   466bc:	b570      	push	{r4, r5, r6, lr}
   466be:	460d      	mov	r5, r1
   466c0:	2300      	movs	r3, #0
   466c2:	4c07      	ldr	r4, [pc, #28]	; (466e0 <_kill_r+0x24>)
   466c4:	4606      	mov	r6, r0
   466c6:	4611      	mov	r1, r2
   466c8:	4628      	mov	r0, r5
   466ca:	6023      	str	r3, [r4, #0]
   466cc:	f001 fb1b 	bl	47d06 <_kill>
   466d0:	1c43      	adds	r3, r0, #1
   466d2:	d000      	beq.n	466d6 <_kill_r+0x1a>
   466d4:	bd70      	pop	{r4, r5, r6, pc}
   466d6:	6823      	ldr	r3, [r4, #0]
   466d8:	2b00      	cmp	r3, #0
   466da:	d0fb      	beq.n	466d4 <_kill_r+0x18>
   466dc:	6033      	str	r3, [r6, #0]
   466de:	bd70      	pop	{r4, r5, r6, pc}
   466e0:	2002c360 	.word	0x2002c360

000466e4 <_getpid_r>:
   466e4:	f001 bb11 	b.w	47d0a <_getpid>

000466e8 <sprintf>:
   466e8:	b40e      	push	{r1, r2, r3}
   466ea:	b570      	push	{r4, r5, r6, lr}
   466ec:	b09d      	sub	sp, #116	; 0x74
   466ee:	4e0d      	ldr	r6, [pc, #52]	; (46724 <sprintf+0x3c>)
   466f0:	4603      	mov	r3, r0
   466f2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   466f6:	ac21      	add	r4, sp, #132	; 0x84
   466f8:	6830      	ldr	r0, [r6, #0]
   466fa:	4e0b      	ldr	r6, [pc, #44]	; (46728 <sprintf+0x40>)
   466fc:	a902      	add	r1, sp, #8
   466fe:	f854 2b04 	ldr.w	r2, [r4], #4
   46702:	9302      	str	r3, [sp, #8]
   46704:	9306      	str	r3, [sp, #24]
   46706:	4623      	mov	r3, r4
   46708:	9401      	str	r4, [sp, #4]
   4670a:	9507      	str	r5, [sp, #28]
   4670c:	e9cd 5604 	strd	r5, r6, [sp, #16]
   46710:	f7d5 f892 	bl	1b838 <_svfprintf_r>
   46714:	9b02      	ldr	r3, [sp, #8]
   46716:	2200      	movs	r2, #0
   46718:	701a      	strb	r2, [r3, #0]
   4671a:	b01d      	add	sp, #116	; 0x74
   4671c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   46720:	b003      	add	sp, #12
   46722:	4770      	bx	lr
   46724:	20031bb8 	.word	0x20031bb8
   46728:	ffff0208 	.word	0xffff0208

0004672c <_strtoll_l.isra.0>:
   4672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46730:	b089      	sub	sp, #36	; 0x24
   46732:	461f      	mov	r7, r3
   46734:	4688      	mov	r8, r1
   46736:	9203      	str	r2, [sp, #12]
   46738:	e9cd 1006 	strd	r1, r0, [sp, #24]
   4673c:	e000      	b.n	46740 <_strtoll_l.isra.0+0x14>
   4673e:	46a8      	mov	r8, r5
   46740:	4645      	mov	r5, r8
   46742:	9812      	ldr	r0, [sp, #72]	; 0x48
   46744:	f815 4b01 	ldrb.w	r4, [r5], #1
   46748:	f7fa f90a 	bl	40960 <__locale_ctype_ptr_l>
   4674c:	4420      	add	r0, r4
   4674e:	7846      	ldrb	r6, [r0, #1]
   46750:	f016 0608 	ands.w	r6, r6, #8
   46754:	d1f3      	bne.n	4673e <_strtoll_l.isra.0+0x12>
   46756:	2c2d      	cmp	r4, #45	; 0x2d
   46758:	f000 8088 	beq.w	4686c <_strtoll_l.isra.0+0x140>
   4675c:	2c2b      	cmp	r4, #43	; 0x2b
   4675e:	d056      	beq.n	4680e <_strtoll_l.isra.0+0xe2>
   46760:	f037 0310 	bics.w	r3, r7, #16
   46764:	d15a      	bne.n	4681c <_strtoll_l.isra.0+0xf0>
   46766:	2c30      	cmp	r4, #48	; 0x30
   46768:	f000 8086 	beq.w	46878 <_strtoll_l.isra.0+0x14c>
   4676c:	2f00      	cmp	r7, #0
   4676e:	d155      	bne.n	4681c <_strtoll_l.isra.0+0xf0>
   46770:	f04f 0a0a 	mov.w	sl, #10
   46774:	f04f 0b00 	mov.w	fp, #0
   46778:	270a      	movs	r7, #10
   4677a:	2e00      	cmp	r6, #0
   4677c:	d053      	beq.n	46826 <_strtoll_l.isra.0+0xfa>
   4677e:	2000      	movs	r0, #0
   46780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   46784:	e9cd 0304 	strd	r0, r3, [sp, #16]
   46788:	4652      	mov	r2, sl
   4678a:	465b      	mov	r3, fp
   4678c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   46790:	f7d2 fb14 	bl	18dbc <__aeabi_uldivmod>
   46794:	2300      	movs	r3, #0
   46796:	4680      	mov	r8, r0
   46798:	4689      	mov	r9, r1
   4679a:	2000      	movs	r0, #0
   4679c:	2100      	movs	r1, #0
   4679e:	46a4      	mov	ip, r4
   467a0:	46b6      	mov	lr, r6
   467a2:	e9cd ab00 	strd	sl, fp, [sp]
   467a6:	e010      	b.n	467ca <_strtoll_l.isra.0+0x9e>
   467a8:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   467ac:	42a7      	cmp	r7, r4
   467ae:	dd1c      	ble.n	467ea <_strtoll_l.isra.0+0xbe>
   467b0:	2b00      	cmp	r3, #0
   467b2:	db06      	blt.n	467c2 <_strtoll_l.isra.0+0x96>
   467b4:	4589      	cmp	r9, r1
   467b6:	bf08      	it	eq
   467b8:	4580      	cmpeq	r8, r0
   467ba:	d302      	bcc.n	467c2 <_strtoll_l.isra.0+0x96>
   467bc:	d13a      	bne.n	46834 <_strtoll_l.isra.0+0x108>
   467be:	42a2      	cmp	r2, r4
   467c0:	da38      	bge.n	46834 <_strtoll_l.isra.0+0x108>
   467c2:	f04f 33ff 	mov.w	r3, #4294967295
   467c6:	f815 cb01 	ldrb.w	ip, [r5], #1
   467ca:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   467ce:	2c09      	cmp	r4, #9
   467d0:	d9ec      	bls.n	467ac <_strtoll_l.isra.0+0x80>
   467d2:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   467d6:	2c19      	cmp	r4, #25
   467d8:	d9e6      	bls.n	467a8 <_strtoll_l.isra.0+0x7c>
   467da:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   467de:	2c19      	cmp	r4, #25
   467e0:	d803      	bhi.n	467ea <_strtoll_l.isra.0+0xbe>
   467e2:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   467e6:	42a7      	cmp	r7, r4
   467e8:	dce2      	bgt.n	467b0 <_strtoll_l.isra.0+0x84>
   467ea:	1c5a      	adds	r2, r3, #1
   467ec:	4676      	mov	r6, lr
   467ee:	d033      	beq.n	46858 <_strtoll_l.isra.0+0x12c>
   467f0:	b116      	cbz	r6, 467f8 <_strtoll_l.isra.0+0xcc>
   467f2:	4240      	negs	r0, r0
   467f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   467f8:	9a03      	ldr	r2, [sp, #12]
   467fa:	b12a      	cbz	r2, 46808 <_strtoll_l.isra.0+0xdc>
   467fc:	2b00      	cmp	r3, #0
   467fe:	d148      	bne.n	46892 <_strtoll_l.isra.0+0x166>
   46800:	9b03      	ldr	r3, [sp, #12]
   46802:	461a      	mov	r2, r3
   46804:	9b06      	ldr	r3, [sp, #24]
   46806:	6013      	str	r3, [r2, #0]
   46808:	b009      	add	sp, #36	; 0x24
   4680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4680e:	f037 0310 	bics.w	r3, r7, #16
   46812:	f108 0502 	add.w	r5, r8, #2
   46816:	f898 4001 	ldrb.w	r4, [r8, #1]
   4681a:	d0a4      	beq.n	46766 <_strtoll_l.isra.0+0x3a>
   4681c:	46ba      	mov	sl, r7
   4681e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   46822:	2e00      	cmp	r6, #0
   46824:	d1ab      	bne.n	4677e <_strtoll_l.isra.0+0x52>
   46826:	f04f 31ff 	mov.w	r1, #4294967295
   4682a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   4682e:	e9cd 1304 	strd	r1, r3, [sp, #16]
   46832:	e7a9      	b.n	46788 <_strtoll_l.isra.0+0x5c>
   46834:	9e01      	ldr	r6, [sp, #4]
   46836:	4682      	mov	sl, r0
   46838:	2301      	movs	r3, #1
   4683a:	fb00 fc06 	mul.w	ip, r0, r6
   4683e:	9800      	ldr	r0, [sp, #0]
   46840:	fb00 cc01 	mla	ip, r0, r1, ip
   46844:	fbaa 0100 	umull	r0, r1, sl, r0
   46848:	4461      	add	r1, ip
   4684a:	eb10 0a04 	adds.w	sl, r0, r4
   4684e:	eb41 7be4 	adc.w	fp, r1, r4, asr #31
   46852:	4650      	mov	r0, sl
   46854:	4659      	mov	r1, fp
   46856:	e7b6      	b.n	467c6 <_strtoll_l.isra.0+0x9a>
   46858:	2322      	movs	r3, #34	; 0x22
   4685a:	9a07      	ldr	r2, [sp, #28]
   4685c:	6013      	str	r3, [r2, #0]
   4685e:	9b03      	ldr	r3, [sp, #12]
   46860:	b1d3      	cbz	r3, 46898 <_strtoll_l.isra.0+0x16c>
   46862:	1e6b      	subs	r3, r5, #1
   46864:	9804      	ldr	r0, [sp, #16]
   46866:	9905      	ldr	r1, [sp, #20]
   46868:	9306      	str	r3, [sp, #24]
   4686a:	e7c9      	b.n	46800 <_strtoll_l.isra.0+0xd4>
   4686c:	f108 0502 	add.w	r5, r8, #2
   46870:	f898 4001 	ldrb.w	r4, [r8, #1]
   46874:	2601      	movs	r6, #1
   46876:	e773      	b.n	46760 <_strtoll_l.isra.0+0x34>
   46878:	782b      	ldrb	r3, [r5, #0]
   4687a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   4687e:	2b58      	cmp	r3, #88	; 0x58
   46880:	d10d      	bne.n	4689e <_strtoll_l.isra.0+0x172>
   46882:	786c      	ldrb	r4, [r5, #1]
   46884:	f04f 0a10 	mov.w	sl, #16
   46888:	f04f 0b00 	mov.w	fp, #0
   4688c:	3502      	adds	r5, #2
   4688e:	2710      	movs	r7, #16
   46890:	e773      	b.n	4677a <_strtoll_l.isra.0+0x4e>
   46892:	e9cd 0104 	strd	r0, r1, [sp, #16]
   46896:	e7e4      	b.n	46862 <_strtoll_l.isra.0+0x136>
   46898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   4689c:	e7b4      	b.n	46808 <_strtoll_l.isra.0+0xdc>
   4689e:	2f00      	cmp	r7, #0
   468a0:	d1bc      	bne.n	4681c <_strtoll_l.isra.0+0xf0>
   468a2:	f04f 0a08 	mov.w	sl, #8
   468a6:	f04f 0b00 	mov.w	fp, #0
   468aa:	2708      	movs	r7, #8
   468ac:	e765      	b.n	4677a <_strtoll_l.isra.0+0x4e>
   468ae:	bf00      	nop

000468b0 <_strtoll_r>:
   468b0:	b530      	push	{r4, r5, lr}
   468b2:	4c06      	ldr	r4, [pc, #24]	; (468cc <_strtoll_r+0x1c>)
   468b4:	b083      	sub	sp, #12
   468b6:	4d06      	ldr	r5, [pc, #24]	; (468d0 <_strtoll_r+0x20>)
   468b8:	6824      	ldr	r4, [r4, #0]
   468ba:	6b64      	ldr	r4, [r4, #52]	; 0x34
   468bc:	2c00      	cmp	r4, #0
   468be:	bf08      	it	eq
   468c0:	462c      	moveq	r4, r5
   468c2:	9400      	str	r4, [sp, #0]
   468c4:	f7ff ff32 	bl	4672c <_strtoll_l.isra.0>
   468c8:	b003      	add	sp, #12
   468ca:	bd30      	pop	{r4, r5, pc}
   468cc:	20031bb8 	.word	0x20031bb8
   468d0:	20031bbc 	.word	0x20031bbc

000468d4 <_strtoull_l.isra.0>:
   468d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   468d8:	b087      	sub	sp, #28
   468da:	4689      	mov	r9, r1
   468dc:	4698      	mov	r8, r3
   468de:	460e      	mov	r6, r1
   468e0:	9005      	str	r0, [sp, #20]
   468e2:	9203      	str	r2, [sp, #12]
   468e4:	e000      	b.n	468e8 <_strtoull_l.isra.0+0x14>
   468e6:	462e      	mov	r6, r5
   468e8:	4635      	mov	r5, r6
   468ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   468ec:	f815 4b01 	ldrb.w	r4, [r5], #1
   468f0:	f7fa f836 	bl	40960 <__locale_ctype_ptr_l>
   468f4:	4420      	add	r0, r4
   468f6:	f890 b001 	ldrb.w	fp, [r0, #1]
   468fa:	f01b 0b08 	ands.w	fp, fp, #8
   468fe:	d1f2      	bne.n	468e6 <_strtoull_l.isra.0+0x12>
   46900:	2c2d      	cmp	r4, #45	; 0x2d
   46902:	f000 808e 	beq.w	46a22 <_strtoull_l.isra.0+0x14e>
   46906:	2c2b      	cmp	r4, #43	; 0x2b
   46908:	f8cd b010 	str.w	fp, [sp, #16]
   4690c:	bf04      	itt	eq
   4690e:	1cb5      	addeq	r5, r6, #2
   46910:	7874      	ldrbeq	r4, [r6, #1]
   46912:	f038 0310 	bics.w	r3, r8, #16
   46916:	d114      	bne.n	46942 <_strtoull_l.isra.0+0x6e>
   46918:	2c30      	cmp	r4, #48	; 0x30
   4691a:	f000 8087 	beq.w	46a2c <_strtoull_l.isra.0+0x158>
   4691e:	f1b8 0f00 	cmp.w	r8, #0
   46922:	d10e      	bne.n	46942 <_strtoull_l.isra.0+0x6e>
   46924:	2205      	movs	r2, #5
   46926:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   4692a:	4f50      	ldr	r7, [pc, #320]	; (46a6c <_strtoull_l.isra.0+0x198>)
   4692c:	f04f 0a0a 	mov.w	sl, #10
   46930:	f04f 0b00 	mov.w	fp, #0
   46934:	f04f 080a 	mov.w	r8, #10
   46938:	e018      	b.n	4696c <_strtoull_l.isra.0+0x98>
   4693a:	f1b8 0f00 	cmp.w	r8, #0
   4693e:	f000 8088 	beq.w	46a52 <_strtoull_l.isra.0+0x17e>
   46942:	ea4f 7be8 	mov.w	fp, r8, asr #31
   46946:	4642      	mov	r2, r8
   46948:	f04f 30ff 	mov.w	r0, #4294967295
   4694c:	f04f 31ff 	mov.w	r1, #4294967295
   46950:	465b      	mov	r3, fp
   46952:	46c2      	mov	sl, r8
   46954:	f7d2 fa32 	bl	18dbc <__aeabi_uldivmod>
   46958:	4642      	mov	r2, r8
   4695a:	4606      	mov	r6, r0
   4695c:	460f      	mov	r7, r1
   4695e:	465b      	mov	r3, fp
   46960:	f04f 30ff 	mov.w	r0, #4294967295
   46964:	f04f 31ff 	mov.w	r1, #4294967295
   46968:	f7d2 fa28 	bl	18dbc <__aeabi_uldivmod>
   4696c:	2300      	movs	r3, #0
   4696e:	2000      	movs	r0, #0
   46970:	2100      	movs	r1, #0
   46972:	46a4      	mov	ip, r4
   46974:	4696      	mov	lr, r2
   46976:	e9cd ab00 	strd	sl, fp, [sp]
   4697a:	e013      	b.n	469a4 <_strtoull_l.isra.0+0xd0>
   4697c:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   46980:	45a0      	cmp	r8, r4
   46982:	dd1f      	ble.n	469c4 <_strtoull_l.isra.0+0xf0>
   46984:	2b00      	cmp	r3, #0
   46986:	db09      	blt.n	4699c <_strtoull_l.isra.0+0xc8>
   46988:	428f      	cmp	r7, r1
   4698a:	bf08      	it	eq
   4698c:	4286      	cmpeq	r6, r0
   4698e:	d305      	bcc.n	4699c <_strtoull_l.isra.0+0xc8>
   46990:	42b9      	cmp	r1, r7
   46992:	bf08      	it	eq
   46994:	42b0      	cmpeq	r0, r6
   46996:	d125      	bne.n	469e4 <_strtoull_l.isra.0+0x110>
   46998:	4574      	cmp	r4, lr
   4699a:	dd23      	ble.n	469e4 <_strtoull_l.isra.0+0x110>
   4699c:	f04f 33ff 	mov.w	r3, #4294967295
   469a0:	f815 cb01 	ldrb.w	ip, [r5], #1
   469a4:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   469a8:	2c09      	cmp	r4, #9
   469aa:	d9e9      	bls.n	46980 <_strtoull_l.isra.0+0xac>
   469ac:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   469b0:	2c19      	cmp	r4, #25
   469b2:	d9e3      	bls.n	4697c <_strtoull_l.isra.0+0xa8>
   469b4:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   469b8:	2c19      	cmp	r4, #25
   469ba:	d803      	bhi.n	469c4 <_strtoull_l.isra.0+0xf0>
   469bc:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   469c0:	45a0      	cmp	r8, r4
   469c2:	dcdf      	bgt.n	46984 <_strtoull_l.isra.0+0xb0>
   469c4:	2b00      	cmp	r3, #0
   469c6:	db1f      	blt.n	46a08 <_strtoull_l.isra.0+0x134>
   469c8:	9a04      	ldr	r2, [sp, #16]
   469ca:	b112      	cbz	r2, 469d2 <_strtoull_l.isra.0+0xfe>
   469cc:	4240      	negs	r0, r0
   469ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   469d2:	9a03      	ldr	r2, [sp, #12]
   469d4:	b11a      	cbz	r2, 469de <_strtoull_l.isra.0+0x10a>
   469d6:	bb0b      	cbnz	r3, 46a1c <_strtoull_l.isra.0+0x148>
   469d8:	9b03      	ldr	r3, [sp, #12]
   469da:	f8c3 9000 	str.w	r9, [r3]
   469de:	b007      	add	sp, #28
   469e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   469e4:	9a01      	ldr	r2, [sp, #4]
   469e6:	4682      	mov	sl, r0
   469e8:	2301      	movs	r3, #1
   469ea:	fb00 fc02 	mul.w	ip, r0, r2
   469ee:	9800      	ldr	r0, [sp, #0]
   469f0:	fb00 cc01 	mla	ip, r0, r1, ip
   469f4:	fbaa 0100 	umull	r0, r1, sl, r0
   469f8:	4461      	add	r1, ip
   469fa:	eb10 0a04 	adds.w	sl, r0, r4
   469fe:	eb41 7be4 	adc.w	fp, r1, r4, asr #31
   46a02:	4650      	mov	r0, sl
   46a04:	4659      	mov	r1, fp
   46a06:	e7cb      	b.n	469a0 <_strtoull_l.isra.0+0xcc>
   46a08:	2322      	movs	r3, #34	; 0x22
   46a0a:	9a05      	ldr	r2, [sp, #20]
   46a0c:	f04f 30ff 	mov.w	r0, #4294967295
   46a10:	f04f 31ff 	mov.w	r1, #4294967295
   46a14:	6013      	str	r3, [r2, #0]
   46a16:	9b03      	ldr	r3, [sp, #12]
   46a18:	2b00      	cmp	r3, #0
   46a1a:	d0e0      	beq.n	469de <_strtoull_l.isra.0+0x10a>
   46a1c:	f105 39ff 	add.w	r9, r5, #4294967295
   46a20:	e7da      	b.n	469d8 <_strtoull_l.isra.0+0x104>
   46a22:	2301      	movs	r3, #1
   46a24:	1cb5      	adds	r5, r6, #2
   46a26:	7874      	ldrb	r4, [r6, #1]
   46a28:	9304      	str	r3, [sp, #16]
   46a2a:	e772      	b.n	46912 <_strtoull_l.isra.0+0x3e>
   46a2c:	782b      	ldrb	r3, [r5, #0]
   46a2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   46a32:	2b58      	cmp	r3, #88	; 0x58
   46a34:	d181      	bne.n	4693a <_strtoull_l.isra.0+0x66>
   46a36:	786c      	ldrb	r4, [r5, #1]
   46a38:	220f      	movs	r2, #15
   46a3a:	3502      	adds	r5, #2
   46a3c:	f04f 36ff 	mov.w	r6, #4294967295
   46a40:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   46a44:	f04f 0a10 	mov.w	sl, #16
   46a48:	f04f 0b00 	mov.w	fp, #0
   46a4c:	f04f 0810 	mov.w	r8, #16
   46a50:	e78c      	b.n	4696c <_strtoull_l.isra.0+0x98>
   46a52:	2207      	movs	r2, #7
   46a54:	f04f 36ff 	mov.w	r6, #4294967295
   46a58:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   46a5c:	f04f 0a08 	mov.w	sl, #8
   46a60:	f04f 0b00 	mov.w	fp, #0
   46a64:	f04f 0808 	mov.w	r8, #8
   46a68:	e780      	b.n	4696c <_strtoull_l.isra.0+0x98>
   46a6a:	bf00      	nop
   46a6c:	19999999 	.word	0x19999999

00046a70 <_strtoull_r>:
   46a70:	b530      	push	{r4, r5, lr}
   46a72:	4c06      	ldr	r4, [pc, #24]	; (46a8c <_strtoull_r+0x1c>)
   46a74:	b083      	sub	sp, #12
   46a76:	4d06      	ldr	r5, [pc, #24]	; (46a90 <_strtoull_r+0x20>)
   46a78:	6824      	ldr	r4, [r4, #0]
   46a7a:	6b64      	ldr	r4, [r4, #52]	; 0x34
   46a7c:	2c00      	cmp	r4, #0
   46a7e:	bf08      	it	eq
   46a80:	462c      	moveq	r4, r5
   46a82:	9400      	str	r4, [sp, #0]
   46a84:	f7ff ff26 	bl	468d4 <_strtoull_l.isra.0>
   46a88:	b003      	add	sp, #12
   46a8a:	bd30      	pop	{r4, r5, pc}
   46a8c:	20031bb8 	.word	0x20031bb8
   46a90:	20031bbc 	.word	0x20031bbc

00046a94 <__ssprint_r>:
   46a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46a98:	6893      	ldr	r3, [r2, #8]
   46a9a:	b083      	sub	sp, #12
   46a9c:	4692      	mov	sl, r2
   46a9e:	9001      	str	r0, [sp, #4]
   46aa0:	2b00      	cmp	r3, #0
   46aa2:	d072      	beq.n	46b8a <__ssprint_r+0xf6>
   46aa4:	6817      	ldr	r7, [r2, #0]
   46aa6:	460c      	mov	r4, r1
   46aa8:	6808      	ldr	r0, [r1, #0]
   46aaa:	3708      	adds	r7, #8
   46aac:	688d      	ldr	r5, [r1, #8]
   46aae:	e047      	b.n	46b40 <__ssprint_r+0xac>
   46ab0:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   46ab4:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   46ab8:	d031      	beq.n	46b1e <__ssprint_r+0x8a>
   46aba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   46abe:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   46ac2:	eba0 0501 	sub.w	r5, r0, r1
   46ac6:	f106 0001 	add.w	r0, r6, #1
   46aca:	bf48      	it	mi
   46acc:	3201      	addmi	r2, #1
   46ace:	4428      	add	r0, r5
   46ad0:	ea4f 0962 	mov.w	r9, r2, asr #1
   46ad4:	4548      	cmp	r0, r9
   46ad6:	464a      	mov	r2, r9
   46ad8:	d901      	bls.n	46ade <__ssprint_r+0x4a>
   46ada:	4681      	mov	r9, r0
   46adc:	4602      	mov	r2, r0
   46ade:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   46ae2:	d039      	beq.n	46b58 <__ssprint_r+0xc4>
   46ae4:	4611      	mov	r1, r2
   46ae6:	9801      	ldr	r0, [sp, #4]
   46ae8:	f7f9 ff5c 	bl	409a4 <_malloc_r>
   46aec:	4680      	mov	r8, r0
   46aee:	2800      	cmp	r0, #0
   46af0:	d051      	beq.n	46b96 <__ssprint_r+0x102>
   46af2:	462a      	mov	r2, r5
   46af4:	6921      	ldr	r1, [r4, #16]
   46af6:	f7d3 f9db 	bl	19eb0 <memcpy>
   46afa:	89a2      	ldrh	r2, [r4, #12]
   46afc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   46b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   46b04:	81a2      	strh	r2, [r4, #12]
   46b06:	eb08 0005 	add.w	r0, r8, r5
   46b0a:	eba9 0205 	sub.w	r2, r9, r5
   46b0e:	f8c4 8010 	str.w	r8, [r4, #16]
   46b12:	4635      	mov	r5, r6
   46b14:	46b0      	mov	r8, r6
   46b16:	6020      	str	r0, [r4, #0]
   46b18:	60a2      	str	r2, [r4, #8]
   46b1a:	f8c4 9014 	str.w	r9, [r4, #20]
   46b1e:	4642      	mov	r2, r8
   46b20:	4659      	mov	r1, fp
   46b22:	f7ff f83b 	bl	45b9c <memmove>
   46b26:	f8da 3008 	ldr.w	r3, [sl, #8]
   46b2a:	68a2      	ldr	r2, [r4, #8]
   46b2c:	6820      	ldr	r0, [r4, #0]
   46b2e:	1b9e      	subs	r6, r3, r6
   46b30:	1b55      	subs	r5, r2, r5
   46b32:	4440      	add	r0, r8
   46b34:	60a5      	str	r5, [r4, #8]
   46b36:	6020      	str	r0, [r4, #0]
   46b38:	f8ca 6008 	str.w	r6, [sl, #8]
   46b3c:	b32e      	cbz	r6, 46b8a <__ssprint_r+0xf6>
   46b3e:	3708      	adds	r7, #8
   46b40:	f857 6c04 	ldr.w	r6, [r7, #-4]
   46b44:	46a8      	mov	r8, r5
   46b46:	f857 bc08 	ldr.w	fp, [r7, #-8]
   46b4a:	2e00      	cmp	r6, #0
   46b4c:	d0f7      	beq.n	46b3e <__ssprint_r+0xaa>
   46b4e:	42ae      	cmp	r6, r5
   46b50:	d2ae      	bcs.n	46ab0 <__ssprint_r+0x1c>
   46b52:	4635      	mov	r5, r6
   46b54:	46b0      	mov	r8, r6
   46b56:	e7e2      	b.n	46b1e <__ssprint_r+0x8a>
   46b58:	9801      	ldr	r0, [sp, #4]
   46b5a:	f7fa facb 	bl	410f4 <_realloc_r>
   46b5e:	4680      	mov	r8, r0
   46b60:	2800      	cmp	r0, #0
   46b62:	d1d0      	bne.n	46b06 <__ssprint_r+0x72>
   46b64:	9d01      	ldr	r5, [sp, #4]
   46b66:	6921      	ldr	r1, [r4, #16]
   46b68:	4628      	mov	r0, r5
   46b6a:	f7fe f8cd 	bl	44d08 <_free_r>
   46b6e:	230c      	movs	r3, #12
   46b70:	602b      	str	r3, [r5, #0]
   46b72:	89a3      	ldrh	r3, [r4, #12]
   46b74:	2200      	movs	r2, #0
   46b76:	f04f 30ff 	mov.w	r0, #4294967295
   46b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   46b7e:	81a3      	strh	r3, [r4, #12]
   46b80:	e9ca 2201 	strd	r2, r2, [sl, #4]
   46b84:	b003      	add	sp, #12
   46b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46b8a:	2000      	movs	r0, #0
   46b8c:	f8ca 0004 	str.w	r0, [sl, #4]
   46b90:	b003      	add	sp, #12
   46b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46b96:	230c      	movs	r3, #12
   46b98:	9a01      	ldr	r2, [sp, #4]
   46b9a:	6013      	str	r3, [r2, #0]
   46b9c:	e7e9      	b.n	46b72 <__ssprint_r+0xde>
   46b9e:	bf00      	nop

00046ba0 <_sungetc_r>:
   46ba0:	1c4b      	adds	r3, r1, #1
   46ba2:	b570      	push	{r4, r5, r6, lr}
   46ba4:	d01a      	beq.n	46bdc <_sungetc_r+0x3c>
   46ba6:	8993      	ldrh	r3, [r2, #12]
   46ba8:	b2cd      	uxtb	r5, r1
   46baa:	6b14      	ldr	r4, [r2, #48]	; 0x30
   46bac:	f023 0320 	bic.w	r3, r3, #32
   46bb0:	6851      	ldr	r1, [r2, #4]
   46bb2:	8193      	strh	r3, [r2, #12]
   46bb4:	b1ac      	cbz	r4, 46be2 <_sungetc_r+0x42>
   46bb6:	6b53      	ldr	r3, [r2, #52]	; 0x34
   46bb8:	4614      	mov	r4, r2
   46bba:	428b      	cmp	r3, r1
   46bbc:	dd09      	ble.n	46bd2 <_sungetc_r+0x32>
   46bbe:	6823      	ldr	r3, [r4, #0]
   46bc0:	1e5a      	subs	r2, r3, #1
   46bc2:	6022      	str	r2, [r4, #0]
   46bc4:	f803 5c01 	strb.w	r5, [r3, #-1]
   46bc8:	6863      	ldr	r3, [r4, #4]
   46bca:	3301      	adds	r3, #1
   46bcc:	6063      	str	r3, [r4, #4]
   46bce:	4628      	mov	r0, r5
   46bd0:	bd70      	pop	{r4, r5, r6, pc}
   46bd2:	4611      	mov	r1, r2
   46bd4:	f000 f87c 	bl	46cd0 <__submore>
   46bd8:	2800      	cmp	r0, #0
   46bda:	d0f0      	beq.n	46bbe <_sungetc_r+0x1e>
   46bdc:	f04f 35ff 	mov.w	r5, #4294967295
   46be0:	e7f5      	b.n	46bce <_sungetc_r+0x2e>
   46be2:	6913      	ldr	r3, [r2, #16]
   46be4:	6810      	ldr	r0, [r2, #0]
   46be6:	b12b      	cbz	r3, 46bf4 <_sungetc_r+0x54>
   46be8:	4283      	cmp	r3, r0
   46bea:	d203      	bcs.n	46bf4 <_sungetc_r+0x54>
   46bec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   46bf0:	42ab      	cmp	r3, r5
   46bf2:	d00e      	beq.n	46c12 <_sungetc_r+0x72>
   46bf4:	63d1      	str	r1, [r2, #60]	; 0x3c
   46bf6:	4613      	mov	r3, r2
   46bf8:	f102 0640 	add.w	r6, r2, #64	; 0x40
   46bfc:	2403      	movs	r4, #3
   46bfe:	2101      	movs	r1, #1
   46c00:	6390      	str	r0, [r2, #56]	; 0x38
   46c02:	4628      	mov	r0, r5
   46c04:	e9c2 640c 	strd	r6, r4, [r2, #48]	; 0x30
   46c08:	f803 5f42 	strb.w	r5, [r3, #66]!
   46c0c:	e9c2 3100 	strd	r3, r1, [r2]
   46c10:	bd70      	pop	{r4, r5, r6, pc}
   46c12:	3801      	subs	r0, #1
   46c14:	3101      	adds	r1, #1
   46c16:	e9c2 0100 	strd	r0, r1, [r2]
   46c1a:	e7d8      	b.n	46bce <_sungetc_r+0x2e>

00046c1c <__ssrefill_r>:
   46c1c:	b510      	push	{r4, lr}
   46c1e:	460c      	mov	r4, r1
   46c20:	6b09      	ldr	r1, [r1, #48]	; 0x30
   46c22:	b169      	cbz	r1, 46c40 <__ssrefill_r+0x24>
   46c24:	f104 0340 	add.w	r3, r4, #64	; 0x40
   46c28:	4299      	cmp	r1, r3
   46c2a:	d001      	beq.n	46c30 <__ssrefill_r+0x14>
   46c2c:	f7fe f86c 	bl	44d08 <_free_r>
   46c30:	2000      	movs	r0, #0
   46c32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   46c34:	6320      	str	r0, [r4, #48]	; 0x30
   46c36:	6063      	str	r3, [r4, #4]
   46c38:	b113      	cbz	r3, 46c40 <__ssrefill_r+0x24>
   46c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   46c3c:	6023      	str	r3, [r4, #0]
   46c3e:	bd10      	pop	{r4, pc}
   46c40:	89a3      	ldrh	r3, [r4, #12]
   46c42:	2100      	movs	r1, #0
   46c44:	6922      	ldr	r2, [r4, #16]
   46c46:	f04f 30ff 	mov.w	r0, #4294967295
   46c4a:	f043 0320 	orr.w	r3, r3, #32
   46c4e:	e9c4 2100 	strd	r2, r1, [r4]
   46c52:	81a3      	strh	r3, [r4, #12]
   46c54:	bd10      	pop	{r4, pc}
   46c56:	bf00      	nop

00046c58 <_sfread_r>:
   46c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46c5c:	fb02 f703 	mul.w	r7, r2, r3
   46c60:	b083      	sub	sp, #12
   46c62:	469a      	mov	sl, r3
   46c64:	9201      	str	r2, [sp, #4]
   46c66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   46c68:	b32f      	cbz	r7, 46cb6 <_sfread_r+0x5e>
   46c6a:	4680      	mov	r8, r0
   46c6c:	460e      	mov	r6, r1
   46c6e:	463d      	mov	r5, r7
   46c70:	f04f 0900 	mov.w	r9, #0
   46c74:	e00e      	b.n	46c94 <_sfread_r+0x3c>
   46c76:	f7d3 f91b 	bl	19eb0 <memcpy>
   46c7a:	6822      	ldr	r2, [r4, #0]
   46c7c:	f8c4 9004 	str.w	r9, [r4, #4]
   46c80:	4621      	mov	r1, r4
   46c82:	445a      	add	r2, fp
   46c84:	4640      	mov	r0, r8
   46c86:	445e      	add	r6, fp
   46c88:	eba5 050b 	sub.w	r5, r5, fp
   46c8c:	6022      	str	r2, [r4, #0]
   46c8e:	f7ff ffc5 	bl	46c1c <__ssrefill_r>
   46c92:	b9a0      	cbnz	r0, 46cbe <_sfread_r+0x66>
   46c94:	4630      	mov	r0, r6
   46c96:	e9d4 cb00 	ldrd	ip, fp, [r4]
   46c9a:	45ab      	cmp	fp, r5
   46c9c:	465a      	mov	r2, fp
   46c9e:	4661      	mov	r1, ip
   46ca0:	d3e9      	bcc.n	46c76 <_sfread_r+0x1e>
   46ca2:	462a      	mov	r2, r5
   46ca4:	4657      	mov	r7, sl
   46ca6:	f7d3 f903 	bl	19eb0 <memcpy>
   46caa:	e9d4 3200 	ldrd	r3, r2, [r4]
   46cae:	1b52      	subs	r2, r2, r5
   46cb0:	441d      	add	r5, r3
   46cb2:	e9c4 5200 	strd	r5, r2, [r4]
   46cb6:	4638      	mov	r0, r7
   46cb8:	b003      	add	sp, #12
   46cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46cbe:	1b7f      	subs	r7, r7, r5
   46cc0:	9b01      	ldr	r3, [sp, #4]
   46cc2:	fbb7 f7f3 	udiv	r7, r7, r3
   46cc6:	4638      	mov	r0, r7
   46cc8:	b003      	add	sp, #12
   46cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46cce:	bf00      	nop

00046cd0 <__submore>:
   46cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46cd4:	460c      	mov	r4, r1
   46cd6:	6b09      	ldr	r1, [r1, #48]	; 0x30
   46cd8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   46cdc:	4299      	cmp	r1, r3
   46cde:	d014      	beq.n	46d0a <__submore+0x3a>
   46ce0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   46ce2:	0077      	lsls	r7, r6, #1
   46ce4:	463a      	mov	r2, r7
   46ce6:	f7fa fa05 	bl	410f4 <_realloc_r>
   46cea:	4605      	mov	r5, r0
   46cec:	b348      	cbz	r0, 46d42 <__submore+0x72>
   46cee:	eb00 0806 	add.w	r8, r0, r6
   46cf2:	4601      	mov	r1, r0
   46cf4:	4632      	mov	r2, r6
   46cf6:	4640      	mov	r0, r8
   46cf8:	f7d3 f8da 	bl	19eb0 <memcpy>
   46cfc:	2000      	movs	r0, #0
   46cfe:	f8c4 8000 	str.w	r8, [r4]
   46d02:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   46d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   46d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   46d0e:	f7f9 fe49 	bl	409a4 <_malloc_r>
   46d12:	4603      	mov	r3, r0
   46d14:	b1a8      	cbz	r0, 46d42 <__submore+0x72>
   46d16:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   46d1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   46d1e:	6323      	str	r3, [r4, #48]	; 0x30
   46d20:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   46d24:	6360      	str	r0, [r4, #52]	; 0x34
   46d26:	2000      	movs	r0, #0
   46d28:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   46d2c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   46d30:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   46d34:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   46d38:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   46d3c:	6022      	str	r2, [r4, #0]
   46d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   46d42:	f04f 30ff 	mov.w	r0, #4294967295
   46d46:	e7de      	b.n	46d06 <__submore+0x36>

00046d48 <__swbuf_r>:
   46d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46d4a:	460d      	mov	r5, r1
   46d4c:	4614      	mov	r4, r2
   46d4e:	4606      	mov	r6, r0
   46d50:	b110      	cbz	r0, 46d58 <__swbuf_r+0x10>
   46d52:	6b83      	ldr	r3, [r0, #56]	; 0x38
   46d54:	2b00      	cmp	r3, #0
   46d56:	d043      	beq.n	46de0 <__swbuf_r+0x98>
   46d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   46d5c:	69a3      	ldr	r3, [r4, #24]
   46d5e:	b291      	uxth	r1, r2
   46d60:	60a3      	str	r3, [r4, #8]
   46d62:	0708      	lsls	r0, r1, #28
   46d64:	d51b      	bpl.n	46d9e <__swbuf_r+0x56>
   46d66:	6923      	ldr	r3, [r4, #16]
   46d68:	b1cb      	cbz	r3, 46d9e <__swbuf_r+0x56>
   46d6a:	b2ed      	uxtb	r5, r5
   46d6c:	0489      	lsls	r1, r1, #18
   46d6e:	462f      	mov	r7, r5
   46d70:	d522      	bpl.n	46db8 <__swbuf_r+0x70>
   46d72:	6822      	ldr	r2, [r4, #0]
   46d74:	6961      	ldr	r1, [r4, #20]
   46d76:	1ad3      	subs	r3, r2, r3
   46d78:	4299      	cmp	r1, r3
   46d7a:	dd29      	ble.n	46dd0 <__swbuf_r+0x88>
   46d7c:	3301      	adds	r3, #1
   46d7e:	68a1      	ldr	r1, [r4, #8]
   46d80:	1c50      	adds	r0, r2, #1
   46d82:	3901      	subs	r1, #1
   46d84:	6020      	str	r0, [r4, #0]
   46d86:	60a1      	str	r1, [r4, #8]
   46d88:	7015      	strb	r5, [r2, #0]
   46d8a:	6962      	ldr	r2, [r4, #20]
   46d8c:	429a      	cmp	r2, r3
   46d8e:	d02a      	beq.n	46de6 <__swbuf_r+0x9e>
   46d90:	2d0a      	cmp	r5, #10
   46d92:	d102      	bne.n	46d9a <__swbuf_r+0x52>
   46d94:	7b23      	ldrb	r3, [r4, #12]
   46d96:	07db      	lsls	r3, r3, #31
   46d98:	d425      	bmi.n	46de6 <__swbuf_r+0x9e>
   46d9a:	4638      	mov	r0, r7
   46d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46d9e:	4621      	mov	r1, r4
   46da0:	4630      	mov	r0, r6
   46da2:	f7fd fc65 	bl	44670 <__swsetup_r>
   46da6:	bb20      	cbnz	r0, 46df2 <__swbuf_r+0xaa>
   46da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   46dac:	b2ed      	uxtb	r5, r5
   46dae:	6923      	ldr	r3, [r4, #16]
   46db0:	b291      	uxth	r1, r2
   46db2:	462f      	mov	r7, r5
   46db4:	0489      	lsls	r1, r1, #18
   46db6:	d4dc      	bmi.n	46d72 <__swbuf_r+0x2a>
   46db8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   46dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   46dbe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   46dc2:	81a2      	strh	r2, [r4, #12]
   46dc4:	6822      	ldr	r2, [r4, #0]
   46dc6:	6661      	str	r1, [r4, #100]	; 0x64
   46dc8:	1ad3      	subs	r3, r2, r3
   46dca:	6961      	ldr	r1, [r4, #20]
   46dcc:	4299      	cmp	r1, r3
   46dce:	dcd5      	bgt.n	46d7c <__swbuf_r+0x34>
   46dd0:	4621      	mov	r1, r4
   46dd2:	4630      	mov	r0, r6
   46dd4:	f7fd fe2e 	bl	44a34 <_fflush_r>
   46dd8:	b958      	cbnz	r0, 46df2 <__swbuf_r+0xaa>
   46dda:	6822      	ldr	r2, [r4, #0]
   46ddc:	2301      	movs	r3, #1
   46dde:	e7ce      	b.n	46d7e <__swbuf_r+0x36>
   46de0:	f7fd fe84 	bl	44aec <__sinit>
   46de4:	e7b8      	b.n	46d58 <__swbuf_r+0x10>
   46de6:	4621      	mov	r1, r4
   46de8:	4630      	mov	r0, r6
   46dea:	f7fd fe23 	bl	44a34 <_fflush_r>
   46dee:	2800      	cmp	r0, #0
   46df0:	d0d3      	beq.n	46d9a <__swbuf_r+0x52>
   46df2:	f04f 37ff 	mov.w	r7, #4294967295
   46df6:	e7d0      	b.n	46d9a <__swbuf_r+0x52>

00046df8 <_wcrtomb_r>:
   46df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   46dfa:	4c12      	ldr	r4, [pc, #72]	; (46e44 <_wcrtomb_r+0x4c>)
   46dfc:	b085      	sub	sp, #20
   46dfe:	4606      	mov	r6, r0
   46e00:	461f      	mov	r7, r3
   46e02:	6824      	ldr	r4, [r4, #0]
   46e04:	6b64      	ldr	r4, [r4, #52]	; 0x34
   46e06:	b151      	cbz	r1, 46e1e <_wcrtomb_r+0x26>
   46e08:	4d0f      	ldr	r5, [pc, #60]	; (46e48 <_wcrtomb_r+0x50>)
   46e0a:	2c00      	cmp	r4, #0
   46e0c:	bf08      	it	eq
   46e0e:	462c      	moveq	r4, r5
   46e10:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   46e14:	47a0      	blx	r4
   46e16:	1c43      	adds	r3, r0, #1
   46e18:	d00d      	beq.n	46e36 <_wcrtomb_r+0x3e>
   46e1a:	b005      	add	sp, #20
   46e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   46e1e:	f8df c028 	ldr.w	ip, [pc, #40]	; 46e48 <_wcrtomb_r+0x50>
   46e22:	460a      	mov	r2, r1
   46e24:	a901      	add	r1, sp, #4
   46e26:	2c00      	cmp	r4, #0
   46e28:	bf08      	it	eq
   46e2a:	4664      	moveq	r4, ip
   46e2c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   46e30:	47a0      	blx	r4
   46e32:	1c43      	adds	r3, r0, #1
   46e34:	d1f1      	bne.n	46e1a <_wcrtomb_r+0x22>
   46e36:	2200      	movs	r2, #0
   46e38:	238a      	movs	r3, #138	; 0x8a
   46e3a:	603a      	str	r2, [r7, #0]
   46e3c:	6033      	str	r3, [r6, #0]
   46e3e:	b005      	add	sp, #20
   46e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   46e42:	bf00      	nop
   46e44:	20031bb8 	.word	0x20031bb8
   46e48:	20031bbc 	.word	0x20031bbc

00046e4c <_calloc_r>:
   46e4c:	b510      	push	{r4, lr}
   46e4e:	fb02 f101 	mul.w	r1, r2, r1
   46e52:	f7f9 fda7 	bl	409a4 <_malloc_r>
   46e56:	4604      	mov	r4, r0
   46e58:	b1c8      	cbz	r0, 46e8e <_calloc_r+0x42>
   46e5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   46e5e:	f022 0203 	bic.w	r2, r2, #3
   46e62:	3a04      	subs	r2, #4
   46e64:	2a24      	cmp	r2, #36	; 0x24
   46e66:	d81b      	bhi.n	46ea0 <_calloc_r+0x54>
   46e68:	2a13      	cmp	r2, #19
   46e6a:	d912      	bls.n	46e92 <_calloc_r+0x46>
   46e6c:	2300      	movs	r3, #0
   46e6e:	2a1b      	cmp	r2, #27
   46e70:	e9c0 3300 	strd	r3, r3, [r0]
   46e74:	d919      	bls.n	46eaa <_calloc_r+0x5e>
   46e76:	2a24      	cmp	r2, #36	; 0x24
   46e78:	e9c0 3302 	strd	r3, r3, [r0, #8]
   46e7c:	d118      	bne.n	46eb0 <_calloc_r+0x64>
   46e7e:	6103      	str	r3, [r0, #16]
   46e80:	f100 0218 	add.w	r2, r0, #24
   46e84:	6143      	str	r3, [r0, #20]
   46e86:	2300      	movs	r3, #0
   46e88:	e9c2 3300 	strd	r3, r3, [r2]
   46e8c:	6093      	str	r3, [r2, #8]
   46e8e:	4620      	mov	r0, r4
   46e90:	bd10      	pop	{r4, pc}
   46e92:	4602      	mov	r2, r0
   46e94:	2300      	movs	r3, #0
   46e96:	4620      	mov	r0, r4
   46e98:	e9c2 3300 	strd	r3, r3, [r2]
   46e9c:	6093      	str	r3, [r2, #8]
   46e9e:	bd10      	pop	{r4, pc}
   46ea0:	2100      	movs	r1, #0
   46ea2:	f7fa f8c9 	bl	41038 <memset>
   46ea6:	4620      	mov	r0, r4
   46ea8:	bd10      	pop	{r4, pc}
   46eaa:	f100 0208 	add.w	r2, r0, #8
   46eae:	e7f1      	b.n	46e94 <_calloc_r+0x48>
   46eb0:	f100 0210 	add.w	r2, r0, #16
   46eb4:	e7ee      	b.n	46e94 <_calloc_r+0x48>
   46eb6:	bf00      	nop

00046eb8 <_fclose_r>:
   46eb8:	b570      	push	{r4, r5, r6, lr}
   46eba:	2900      	cmp	r1, #0
   46ebc:	d048      	beq.n	46f50 <_fclose_r+0x98>
   46ebe:	4605      	mov	r5, r0
   46ec0:	460c      	mov	r4, r1
   46ec2:	b110      	cbz	r0, 46eca <_fclose_r+0x12>
   46ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   46ec6:	2b00      	cmp	r3, #0
   46ec8:	d048      	beq.n	46f5c <_fclose_r+0xa4>
   46eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   46ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   46ed0:	07d0      	lsls	r0, r2, #31
   46ed2:	d440      	bmi.n	46f56 <_fclose_r+0x9e>
   46ed4:	0599      	lsls	r1, r3, #22
   46ed6:	d530      	bpl.n	46f3a <_fclose_r+0x82>
   46ed8:	4621      	mov	r1, r4
   46eda:	4628      	mov	r0, r5
   46edc:	f7fd fd00 	bl	448e0 <__sflush_r>
   46ee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   46ee2:	4606      	mov	r6, r0
   46ee4:	b133      	cbz	r3, 46ef4 <_fclose_r+0x3c>
   46ee6:	69e1      	ldr	r1, [r4, #28]
   46ee8:	4628      	mov	r0, r5
   46eea:	4798      	blx	r3
   46eec:	2800      	cmp	r0, #0
   46eee:	bfb8      	it	lt
   46ef0:	f04f 36ff 	movlt.w	r6, #4294967295
   46ef4:	89a3      	ldrh	r3, [r4, #12]
   46ef6:	061a      	lsls	r2, r3, #24
   46ef8:	d43c      	bmi.n	46f74 <_fclose_r+0xbc>
   46efa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   46efc:	b141      	cbz	r1, 46f10 <_fclose_r+0x58>
   46efe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   46f02:	4299      	cmp	r1, r3
   46f04:	d002      	beq.n	46f0c <_fclose_r+0x54>
   46f06:	4628      	mov	r0, r5
   46f08:	f7fd fefe 	bl	44d08 <_free_r>
   46f0c:	2300      	movs	r3, #0
   46f0e:	6323      	str	r3, [r4, #48]	; 0x30
   46f10:	6c61      	ldr	r1, [r4, #68]	; 0x44
   46f12:	b121      	cbz	r1, 46f1e <_fclose_r+0x66>
   46f14:	4628      	mov	r0, r5
   46f16:	f7fd fef7 	bl	44d08 <_free_r>
   46f1a:	2300      	movs	r3, #0
   46f1c:	6463      	str	r3, [r4, #68]	; 0x44
   46f1e:	f7fd fe15 	bl	44b4c <__sfp_lock_acquire>
   46f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
   46f24:	2200      	movs	r2, #0
   46f26:	07db      	lsls	r3, r3, #31
   46f28:	81a2      	strh	r2, [r4, #12]
   46f2a:	d51f      	bpl.n	46f6c <_fclose_r+0xb4>
   46f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   46f2e:	f7fe fd73 	bl	45a18 <__retarget_lock_close_recursive>
   46f32:	f7fd fe11 	bl	44b58 <__sfp_lock_release>
   46f36:	4630      	mov	r0, r6
   46f38:	bd70      	pop	{r4, r5, r6, pc}
   46f3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   46f3c:	f7fe fd6e 	bl	45a1c <__retarget_lock_acquire_recursive>
   46f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   46f44:	2b00      	cmp	r3, #0
   46f46:	d1c7      	bne.n	46ed8 <_fclose_r+0x20>
   46f48:	6e66      	ldr	r6, [r4, #100]	; 0x64
   46f4a:	f016 0601 	ands.w	r6, r6, #1
   46f4e:	d016      	beq.n	46f7e <_fclose_r+0xc6>
   46f50:	2600      	movs	r6, #0
   46f52:	4630      	mov	r0, r6
   46f54:	bd70      	pop	{r4, r5, r6, pc}
   46f56:	2b00      	cmp	r3, #0
   46f58:	d0fa      	beq.n	46f50 <_fclose_r+0x98>
   46f5a:	e7bd      	b.n	46ed8 <_fclose_r+0x20>
   46f5c:	f7fd fdc6 	bl	44aec <__sinit>
   46f60:	6e62      	ldr	r2, [r4, #100]	; 0x64
   46f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   46f66:	07d0      	lsls	r0, r2, #31
   46f68:	d4f5      	bmi.n	46f56 <_fclose_r+0x9e>
   46f6a:	e7b3      	b.n	46ed4 <_fclose_r+0x1c>
   46f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   46f6e:	f7fe fd57 	bl	45a20 <__retarget_lock_release_recursive>
   46f72:	e7db      	b.n	46f2c <_fclose_r+0x74>
   46f74:	6921      	ldr	r1, [r4, #16]
   46f76:	4628      	mov	r0, r5
   46f78:	f7fd fec6 	bl	44d08 <_free_r>
   46f7c:	e7bd      	b.n	46efa <_fclose_r+0x42>
   46f7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   46f80:	f7fe fd4e 	bl	45a20 <__retarget_lock_release_recursive>
   46f84:	4630      	mov	r0, r6
   46f86:	bd70      	pop	{r4, r5, r6, pc}

00046f88 <_fstat_r>:
   46f88:	b570      	push	{r4, r5, r6, lr}
   46f8a:	460d      	mov	r5, r1
   46f8c:	2300      	movs	r3, #0
   46f8e:	4c07      	ldr	r4, [pc, #28]	; (46fac <_fstat_r+0x24>)
   46f90:	4606      	mov	r6, r0
   46f92:	4611      	mov	r1, r2
   46f94:	4628      	mov	r0, r5
   46f96:	6023      	str	r3, [r4, #0]
   46f98:	f000 feb9 	bl	47d0e <_fstat>
   46f9c:	1c43      	adds	r3, r0, #1
   46f9e:	d000      	beq.n	46fa2 <_fstat_r+0x1a>
   46fa0:	bd70      	pop	{r4, r5, r6, pc}
   46fa2:	6823      	ldr	r3, [r4, #0]
   46fa4:	2b00      	cmp	r3, #0
   46fa6:	d0fb      	beq.n	46fa0 <_fstat_r+0x18>
   46fa8:	6033      	str	r3, [r6, #0]
   46faa:	bd70      	pop	{r4, r5, r6, pc}
   46fac:	2002c360 	.word	0x2002c360

00046fb0 <_isatty_r>:
   46fb0:	b538      	push	{r3, r4, r5, lr}
   46fb2:	2300      	movs	r3, #0
   46fb4:	4c06      	ldr	r4, [pc, #24]	; (46fd0 <_isatty_r+0x20>)
   46fb6:	4605      	mov	r5, r0
   46fb8:	4608      	mov	r0, r1
   46fba:	6023      	str	r3, [r4, #0]
   46fbc:	f000 fea1 	bl	47d02 <_isatty>
   46fc0:	1c43      	adds	r3, r0, #1
   46fc2:	d000      	beq.n	46fc6 <_isatty_r+0x16>
   46fc4:	bd38      	pop	{r3, r4, r5, pc}
   46fc6:	6823      	ldr	r3, [r4, #0]
   46fc8:	2b00      	cmp	r3, #0
   46fca:	d0fb      	beq.n	46fc4 <_isatty_r+0x14>
   46fcc:	602b      	str	r3, [r5, #0]
   46fce:	bd38      	pop	{r3, r4, r5, pc}
   46fd0:	2002c360 	.word	0x2002c360

00046fd4 <cloud_connect>:
	if (backend == NULL
   46fd4:	b120      	cbz	r0, 46fe0 <cloud_connect+0xc>
	    || backend->api == NULL
   46fd6:	6803      	ldr	r3, [r0, #0]
   46fd8:	b113      	cbz	r3, 46fe0 <cloud_connect+0xc>
	    || backend->api->connect == NULL) {
   46fda:	689b      	ldr	r3, [r3, #8]
   46fdc:	b103      	cbz	r3, 46fe0 <cloud_connect+0xc>
	return backend->api->connect(backend);
   46fde:	4718      	bx	r3
}
   46fe0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   46fe4:	4770      	bx	lr

00046fe6 <cloud_send>:
	if (backend == NULL
   46fe6:	b120      	cbz	r0, 46ff2 <cloud_send+0xc>
	    || backend->api == NULL
   46fe8:	6803      	ldr	r3, [r0, #0]
   46fea:	b113      	cbz	r3, 46ff2 <cloud_send+0xc>
	    || backend->api->send == NULL) {
   46fec:	691b      	ldr	r3, [r3, #16]
   46fee:	b103      	cbz	r3, 46ff2 <cloud_send+0xc>
	return backend->api->send(backend, msg);
   46ff0:	4718      	bx	r3
}
   46ff2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   46ff6:	4770      	bx	lr

00046ff8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   46ff8:	e8d0 0faf 	lda	r0, [r0]
}
   46ffc:	4770      	bx	lr

00046ffe <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   46ffe:	f06f 0173 	mvn.w	r1, #115	; 0x73
   47002:	2000      	movs	r0, #0
   47004:	f7d7 b930 	b.w	1e268 <error_handler>

00047008 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   47008:	4601      	mov	r1, r0
   4700a:	2000      	movs	r0, #0
   4700c:	f7d7 b92c 	b.w	1e268 <error_handler>

00047010 <cloud_cmd_handler>:
	if (cmd->recipient == CLOUD_RCPT_MODEM_INFO) {
   47010:	7843      	ldrb	r3, [r0, #1]
   47012:	2b03      	cmp	r3, #3
   47014:	d105      	bne.n	47022 <cloud_cmd_handler+0x12>
		if (cmd->type == CLOUD_CMD_READ) {
   47016:	78c3      	ldrb	r3, [r0, #3]
   47018:	2b04      	cmp	r3, #4
   4701a:	d118      	bne.n	4704e <cloud_cmd_handler+0x3e>
			device_status_send(NULL);
   4701c:	2000      	movs	r0, #0
   4701e:	f7d7 b9d9 	b.w	1e3d4 <device_status_send>
	} else if (cmd->recipient == CLOUD_RCPT_UI) {
   47022:	2b02      	cmp	r3, #2
   47024:	d113      	bne.n	4704e <cloud_cmd_handler+0x3e>
		if (cmd->type == CLOUD_CMD_LED_RED) {
   47026:	78c3      	ldrb	r3, [r0, #3]
   47028:	2b07      	cmp	r3, #7
   4702a:	d104      	bne.n	47036 <cloud_cmd_handler+0x26>
			ui_led_set_color(127, 0, 0);
   4702c:	2200      	movs	r2, #0
   4702e:	207f      	movs	r0, #127	; 0x7f
   47030:	4611      	mov	r1, r2
			ui_led_set_color(0, 0, 127);
   47032:	f000 b815 	b.w	47060 <ui_led_set_color>
		} else if (cmd->type == CLOUD_CMD_LED_GREEN) {
   47036:	2b08      	cmp	r3, #8
   47038:	d103      	bne.n	47042 <cloud_cmd_handler+0x32>
			ui_led_set_color(0, 127, 0);
   4703a:	2200      	movs	r2, #0
   4703c:	217f      	movs	r1, #127	; 0x7f
   4703e:	4610      	mov	r0, r2
   47040:	e7f7      	b.n	47032 <cloud_cmd_handler+0x22>
		} else if (cmd->type == CLOUD_CMD_LED_BLUE) {
   47042:	2b09      	cmp	r3, #9
   47044:	d103      	bne.n	4704e <cloud_cmd_handler+0x3e>
			ui_led_set_color(0, 0, 127);
   47046:	2100      	movs	r1, #0
   47048:	227f      	movs	r2, #127	; 0x7f
   4704a:	4608      	mov	r0, r1
   4704c:	e7f1      	b.n	47032 <cloud_cmd_handler+0x22>
}
   4704e:	4770      	bx	lr

00047050 <bsd_recoverable_error_handler>:
{
   47050:	b508      	push	{r3, lr}
   47052:	f7d9 fb65 	bl	20720 <z_impl_log_panic>
}
   47056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   4705a:	2000      	movs	r0, #0
   4705c:	f7d9 bfb4 	b.w	20fc8 <sys_reboot>

00047060 <ui_led_set_color>:
	return ui_led_set_rgb(red, green, blue);
   47060:	f7d8 b96e 	b.w	1f340 <ui_led_set_rgb>

00047064 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   47064:	b108      	cbz	r0, 4706a <json_object_decode+0x6>
   47066:	f001 bfc7 	b.w	48ff8 <cJSON_GetObjectItem>
}
   4706a:	4770      	bx	lr

0004706c <add_array_obj>:
{
   4706c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   47070:	4681      	mov	r9, r0
   47072:	4688      	mov	r8, r1
   47074:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   47076:	461e      	mov	r6, r3
   47078:	b32b      	cbz	r3, 470c6 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   4707a:	f7de fbe9 	bl	25850 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   4707e:	4604      	mov	r4, r0
   47080:	b1d0      	cbz	r0, 470b8 <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   47082:	2500      	movs	r5, #0
   47084:	4545      	cmp	r5, r8
   47086:	d10d      	bne.n	470a4 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   47088:	4620      	mov	r0, r4
   4708a:	f001 ffad 	bl	48fe8 <cJSON_GetArraySize>
   4708e:	b908      	cbnz	r0, 47094 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   47090:	2304      	movs	r3, #4
   47092:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   47094:	4630      	mov	r0, r6
   47096:	4622      	mov	r2, r4
   47098:	4639      	mov	r1, r7
   4709a:	f001 ffb2 	bl	49002 <cJSON_AddItemToObject>
	return 0;
   4709e:	2000      	movs	r0, #0
}
   470a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   470a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   470a8:	b158      	cbz	r0, 470c2 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   470aa:	f7de fbb9 	bl	25820 <cJSON_CreateString>
			if (str == NULL) {
   470ae:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   470b0:	4620      	mov	r0, r4
			if (str == NULL) {
   470b2:	b921      	cbnz	r1, 470be <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   470b4:	f7de fb12 	bl	256dc <cJSON_Delete>
		return -ENOMEM;
   470b8:	f06f 000b 	mvn.w	r0, #11
   470bc:	e7f0      	b.n	470a0 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   470be:	f001 ff9e 	bl	48ffe <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   470c2:	3501      	adds	r5, #1
   470c4:	e7de      	b.n	47084 <add_array_obj+0x18>
		return -EINVAL;
   470c6:	f06f 0015 	mvn.w	r0, #21
   470ca:	e7e9      	b.n	470a0 <add_array_obj+0x34>

000470cc <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   470cc:	e8d0 3fef 	ldaex	r3, [r0]
   470d0:	e8c0 1fe2 	stlex	r2, r1, [r0]
   470d4:	2a00      	cmp	r2, #0
   470d6:	d1f9      	bne.n	470cc <atomic_set>
}
   470d8:	4618      	mov	r0, r3
   470da:	4770      	bx	lr

000470dc <env_sensors_get_air_quality>:

int env_sensors_get_air_quality(env_sensor_data_t *sensor_data)
{
	return -1;
}
   470dc:	f04f 30ff 	mov.w	r0, #4294967295
   470e0:	4770      	bx	lr

000470e2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   470e2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   470e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   470ea:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   470ec:	bf08      	it	eq
   470ee:	f06f 0015 	mvneq.w	r0, #21
   470f2:	4770      	bx	lr

000470f4 <get_bit_ptr>:
{
   470f4:	b570      	push	{r4, r5, r6, lr}
   470f6:	250c      	movs	r5, #12
   470f8:	434d      	muls	r5, r1
   470fa:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   470fc:	f990 000b 	ldrsb.w	r0, [r0, #11]
   47100:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   47102:	4288      	cmp	r0, r1
   47104:	bfa8      	it	ge
   47106:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   47108:	f04f 0420 	mov.w	r4, #32
   4710c:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   47110:	bfb8      	it	lt
   47112:	5971      	ldrlt	r1, [r6, r5]
}
   47114:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   47118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   4711c:	6019      	str	r1, [r3, #0]
}
   4711e:	bd70      	pop	{r4, r5, r6, pc}

00047120 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   47120:	f04f 0320 	mov.w	r3, #32
   47124:	f3ef 8011 	mrs	r0, BASEPRI
   47128:	f383 8811 	msr	BASEPRI, r3
   4712c:	f3bf 8f6f 	isb	sy
}
   47130:	4770      	bx	lr

00047132 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   47132:	07c3      	lsls	r3, r0, #31
   47134:	d503      	bpl.n	4713e <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   47136:	f381 8811 	msr	BASEPRI, r1
   4713a:	f3bf 8f6f 	isb	sy
}
   4713e:	4770      	bx	lr

00047140 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   47140:	23ff      	movs	r3, #255	; 0xff
{
   47142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   47146:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   47148:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   4714a:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   4714c:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   47150:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   47154:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   47156:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   47158:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   4715c:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   4715e:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   47160:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   47162:	9301      	str	r3, [sp, #4]
   47164:	9b01      	ldr	r3, [sp, #4]
   47166:	4293      	cmp	r3, r2
   47168:	dc08      	bgt.n	4717c <z_sys_mem_pool_base_init+0x3c>
   4716a:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   4716c:	4619      	mov	r1, r3
   4716e:	428f      	cmp	r7, r1
   47170:	eb05 0c03 	add.w	ip, r5, r3
   47174:	dc21      	bgt.n	471ba <z_sys_mem_pool_base_init+0x7a>
}
   47176:	b003      	add	sp, #12
   47178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   4717c:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   47180:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   47182:	bf84      	itt	hi
   47184:	331f      	addhi	r3, #31
   47186:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   4718a:	fb0a fe02 	mul.w	lr, sl, r2
   4718e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   47192:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   47196:	eb08 060e 	add.w	r6, r8, lr
   4719a:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   4719e:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   471a2:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   471a6:	bf94      	ite	ls
   471a8:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   471aa:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   471ae:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   471b2:	bf88      	it	hi
   471b4:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   471b8:	e7d4      	b.n	47164 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   471ba:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   471bc:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   471be:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   471c2:	18f4      	adds	r4, r6, r3
	node->next = list;
   471c4:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   471c8:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   471ca:	3101      	adds	r1, #1
   471cc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   471ce:	6893      	ldr	r3, [r2, #8]
   471d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   471d2:	6094      	str	r4, [r2, #8]
   471d4:	4663      	mov	r3, ip
   471d6:	e7ca      	b.n	4716e <z_sys_mem_pool_base_init+0x2e>

000471d8 <z_sys_mem_pool_block_alloc>:
{
   471d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   471dc:	b089      	sub	sp, #36	; 0x24
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   471de:	7a84      	ldrb	r4, [r0, #10]
{
   471e0:	af00      	add	r7, sp, #0
   471e2:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   471e6:	00a3      	lsls	r3, r4, #2
   471e8:	330a      	adds	r3, #10
   471ea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   471ee:	ebad 0d03 	sub.w	sp, sp, r3
   471f2:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   471f4:	4653      	mov	r3, sl
   471f6:	6842      	ldr	r2, [r0, #4]
{
   471f8:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   471fa:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   471fe:	2200      	movs	r2, #0
   47200:	4294      	cmp	r4, r2
   47202:	f102 39ff 	add.w	r9, r2, #4294967295
   47206:	dd09      	ble.n	4721c <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   47208:	b122      	cbz	r2, 47214 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   4720a:	6818      	ldr	r0, [r3, #0]
   4720c:	0880      	lsrs	r0, r0, #2
   4720e:	f020 0003 	bic.w	r0, r0, #3
   47212:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   47214:	f853 0f04 	ldr.w	r0, [r3, #4]!
   47218:	4288      	cmp	r0, r1
   4721a:	d208      	bcs.n	4722e <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   4721c:	f1b9 3fff 	cmp.w	r9, #4294967295
   47220:	d107      	bne.n	47232 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   47222:	2300      	movs	r3, #0
   47224:	6cba      	ldr	r2, [r7, #72]	; 0x48
   47226:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   47228:	f06f 000b 	mvn.w	r0, #11
   4722c:	e047      	b.n	472be <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   4722e:	3201      	adds	r2, #1
   47230:	e7e6      	b.n	47200 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   47232:	7c28      	ldrb	r0, [r5, #16]
   47234:	f010 0001 	ands.w	r0, r0, #1
   47238:	d001      	beq.n	4723e <z_sys_mem_pool_block_alloc+0x66>
   4723a:	f7ff ff71 	bl	47120 <pool_irq_lock.isra.2.part.3>
   4723e:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   47240:	46c8      	mov	r8, r9
   47242:	fb03 f309 	mul.w	r3, r3, r9
   47246:	1d1a      	adds	r2, r3, #4
   47248:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   4724a:	6178      	str	r0, [r7, #20]
   4724c:	4413      	add	r3, r2
	return list->head == list;
   4724e:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   47250:	42a3      	cmp	r3, r4
   47252:	d070      	beq.n	47336 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   47254:	e9d4 2300 	ldrd	r2, r3, [r4]
   47258:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   4725a:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   4725c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   47260:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   47262:	2300      	movs	r3, #0
	node->prev = NULL;
   47264:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   47268:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   4726a:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   4726e:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   47270:	fb92 f2f1 	sdiv	r2, r2, r1
   47274:	465b      	mov	r3, fp
   47276:	4641      	mov	r1, r8
   47278:	4628      	mov	r0, r5
   4727a:	f7ff ff3b 	bl	470f4 <get_bit_ptr>
	*word |= (1<<bit);
   4727e:	2201      	movs	r2, #1
   47280:	69f9      	ldr	r1, [r7, #28]
   47282:	fa02 f000 	lsl.w	r0, r2, r0
   47286:	680b      	ldr	r3, [r1, #0]
   47288:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   4728c:	4303      	orrs	r3, r0
   4728e:	600b      	str	r3, [r1, #0]
   47290:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   47292:	45c8      	cmp	r8, r9
   47294:	db17      	blt.n	472c6 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   47296:	6979      	ldr	r1, [r7, #20]
   47298:	7c28      	ldrb	r0, [r5, #16]
   4729a:	f7ff ff4a 	bl	47132 <pool_irq_unlock.isra.4>
	*data_p = data;
   4729e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   472a0:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   472a2:	2c00      	cmp	r4, #0
   472a4:	d0c0      	beq.n	47228 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   472a6:	68fb      	ldr	r3, [r7, #12]
	return 0;
   472a8:	2000      	movs	r0, #0
	*level_p = alloc_l;
   472aa:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   472ae:	682b      	ldr	r3, [r5, #0]
   472b0:	1ae4      	subs	r4, r4, r3
   472b2:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   472b6:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   472ba:	68bb      	ldr	r3, [r7, #8]
   472bc:	601c      	str	r4, [r3, #0]
}
   472be:	3724      	adds	r7, #36	; 0x24
   472c0:	46bd      	mov	sp, r7
   472c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   472c6:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   472c8:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   472ca:	1ae3      	subs	r3, r4, r3
   472cc:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   472d0:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   472d4:	465b      	mov	r3, fp
   472d6:	0092      	lsls	r2, r2, #2
   472d8:	4641      	mov	r1, r8
   472da:	4628      	mov	r0, r5
   472dc:	f7ff ff0a 	bl	470f4 <get_bit_ptr>
	*word |= (1<<bit);
   472e0:	69fa      	ldr	r2, [r7, #28]
   472e2:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   472e4:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   472e6:	fa03 f000 	lsl.w	r0, r3, r0
   472ea:	6813      	ldr	r3, [r2, #0]
   472ec:	4303      	orrs	r3, r0
   472ee:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   472f0:	230c      	movs	r3, #12
   472f2:	2203      	movs	r2, #3
   472f4:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   472f8:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   472fc:	f101 0e04 	add.w	lr, r1, #4
   47300:	1823      	adds	r3, r4, r0
   47302:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   47304:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   47306:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   4730a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   4730c:	688a      	ldr	r2, [r1, #8]
   4730e:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   47310:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   47312:	608b      	str	r3, [r1, #8]
   47314:	3a01      	subs	r2, #1
   47316:	4403      	add	r3, r0
   47318:	613a      	str	r2, [r7, #16]
   4731a:	d1f3      	bne.n	47304 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   4731c:	6979      	ldr	r1, [r7, #20]
   4731e:	7c28      	ldrb	r0, [r5, #16]
   47320:	f7ff ff07 	bl	47132 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   47324:	7c2b      	ldrb	r3, [r5, #16]
   47326:	07db      	lsls	r3, r3, #31
   47328:	d503      	bpl.n	47332 <z_sys_mem_pool_block_alloc+0x15a>
   4732a:	f7ff fef9 	bl	47120 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   4732e:	6178      	str	r0, [r7, #20]
   47330:	e7af      	b.n	47292 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   47332:	6938      	ldr	r0, [r7, #16]
   47334:	e7fb      	b.n	4732e <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   47336:	f108 38ff 	add.w	r8, r8, #4294967295
   4733a:	f1b8 3fff 	cmp.w	r8, #4294967295
   4733e:	f1a4 030c 	sub.w	r3, r4, #12
   47342:	d184      	bne.n	4724e <z_sys_mem_pool_block_alloc+0x76>
   47344:	2400      	movs	r4, #0
   47346:	e7a6      	b.n	47296 <z_sys_mem_pool_block_alloc+0xbe>

00047348 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   47348:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   4734a:	f7f7 fd7d 	bl	3ee48 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   4734e:	2000      	movs	r0, #0
   47350:	bd08      	pop	{r3, pc}

00047352 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   47352:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   47354:	f7f7 fdc0 	bl	3eed8 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   47358:	f110 0f0b 	cmn.w	r0, #11
   4735c:	d005      	beq.n	4736a <sys_sem_take+0x18>
   4735e:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   47362:	bf08      	it	eq
   47364:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   47368:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   4736a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   4736e:	e7fb      	b.n	47368 <sys_sem_take+0x16>

00047370 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   47370:	4604      	mov	r4, r0
   47372:	b508      	push	{r3, lr}
   47374:	4608      	mov	r0, r1
   47376:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   47378:	461a      	mov	r2, r3
   4737a:	47a0      	blx	r4
	return z_impl_k_current_get();
   4737c:	f7f7 fd28 	bl	3edd0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   47380:	f7da fe50 	bl	22024 <z_impl_k_thread_abort>

00047384 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   47384:	b510      	push	{r4, lr}
   47386:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   47388:	f04f 31ff 	mov.w	r1, #4294967295
   4738c:	4620      	mov	r0, r4
   4738e:	f7f6 fbf1 	bl	3db74 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   47392:	4603      	mov	r3, r0
   47394:	2800      	cmp	r0, #0
   47396:	d0f7      	beq.n	47388 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   47398:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4739a:	3308      	adds	r3, #8
   4739c:	e8d3 1fef 	ldaex	r1, [r3]
   473a0:	f021 0c01 	bic.w	ip, r1, #1
   473a4:	e8c3 cfee 	stlex	lr, ip, [r3]
   473a8:	f1be 0f00 	cmp.w	lr, #0
   473ac:	d1f6      	bne.n	4739c <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   473ae:	07cb      	lsls	r3, r1, #31
   473b0:	d500      	bpl.n	473b4 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   473b2:	4790      	blx	r2
	z_impl_k_yield();
   473b4:	f7f7 fbb8 	bl	3eb28 <z_impl_k_yield>
   473b8:	e7e6      	b.n	47388 <z_work_q_main+0x4>

000473ba <next>:
	if (lexer->pos >= lexer->end) {
   473ba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   473be:	429a      	cmp	r2, r3
	return *lexer->pos++;
   473c0:	bf35      	itete	cc
   473c2:	1c53      	addcc	r3, r2, #1
		lexer->pos = lexer->end + 1;
   473c4:	3301      	addcs	r3, #1
	return *lexer->pos++;
   473c6:	6083      	strcc	r3, [r0, #8]
		lexer->pos = lexer->end + 1;
   473c8:	6083      	strcs	r3, [r0, #8]
		return '\0';
   473ca:	bf2c      	ite	cs
   473cc:	2000      	movcs	r0, #0
	return *lexer->pos++;
   473ce:	7810      	ldrbcc	r0, [r2, #0]
}
   473d0:	4770      	bx	lr

000473d2 <accept_run>:
{
   473d2:	b510      	push	{r4, lr}
   473d4:	4604      	mov	r4, r0
   473d6:	3901      	subs	r1, #1
	for (; *run; run++) {
   473d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   473dc:	b900      	cbnz	r0, 473e0 <accept_run+0xe>
}
   473de:	bd10      	pop	{r4, pc}
		if (next(lexer) != *run) {
   473e0:	4620      	mov	r0, r4
   473e2:	f7ff ffea 	bl	473ba <next>
   473e6:	780b      	ldrb	r3, [r1, #0]
   473e8:	4298      	cmp	r0, r3
   473ea:	d0f5      	beq.n	473d8 <accept_run+0x6>
			return -EINVAL;
   473ec:	f06f 0015 	mvn.w	r0, #21
   473f0:	e7f5      	b.n	473de <accept_run+0xc>

000473f2 <element_token>:
	switch (token) {
   473f2:	285b      	cmp	r0, #91	; 0x5b
   473f4:	d00d      	beq.n	47412 <element_token+0x20>
   473f6:	d806      	bhi.n	47406 <element_token+0x14>
   473f8:	2822      	cmp	r0, #34	; 0x22
   473fa:	d00a      	beq.n	47412 <element_token+0x20>
   473fc:	2830      	cmp	r0, #48	; 0x30
   473fe:	d008      	beq.n	47412 <element_token+0x20>
		return -EINVAL;
   47400:	f06f 0015 	mvn.w	r0, #21
   47404:	4770      	bx	lr
	switch (token) {
   47406:	2874      	cmp	r0, #116	; 0x74
   47408:	d003      	beq.n	47412 <element_token+0x20>
   4740a:	287b      	cmp	r0, #123	; 0x7b
   4740c:	d001      	beq.n	47412 <element_token+0x20>
   4740e:	2866      	cmp	r0, #102	; 0x66
   47410:	e7f5      	b.n	473fe <element_token+0xc>
		return 0;
   47412:	2000      	movs	r0, #0
}
   47414:	4770      	bx	lr

00047416 <get_elem_size>:
{
   47416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4741a:	4604      	mov	r4, r0
   4741c:	2701      	movs	r7, #1
	switch (descr->type) {
   4741e:	7963      	ldrb	r3, [r4, #5]
   47420:	085b      	lsrs	r3, r3, #1
   47422:	2b5b      	cmp	r3, #91	; 0x5b
   47424:	d02d      	beq.n	47482 <get_elem_size+0x6c>
   47426:	d806      	bhi.n	47436 <get_elem_size+0x20>
   47428:	2b22      	cmp	r3, #34	; 0x22
   4742a:	d00c      	beq.n	47446 <get_elem_size+0x30>
   4742c:	2b30      	cmp	r3, #48	; 0x30
   4742e:	d00a      	beq.n	47446 <get_elem_size+0x30>
		return -EINVAL;
   47430:	f06f 0515 	mvn.w	r5, #21
   47434:	e008      	b.n	47448 <get_elem_size+0x32>
	switch (descr->type) {
   47436:	2b74      	cmp	r3, #116	; 0x74
   47438:	d003      	beq.n	47442 <get_elem_size+0x2c>
   4743a:	2b7b      	cmp	r3, #123	; 0x7b
   4743c:	d008      	beq.n	47450 <get_elem_size+0x3a>
   4743e:	2b66      	cmp	r3, #102	; 0x66
   47440:	d1f6      	bne.n	47430 <get_elem_size+0x1a>
		return sizeof(bool);
   47442:	2501      	movs	r5, #1
   47444:	e000      	b.n	47448 <get_elem_size+0x32>
		return sizeof(s32_t);
   47446:	2504      	movs	r5, #4
}
   47448:	fb07 f005 	mul.w	r0, r7, r5
   4744c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   47450:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   47452:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   47456:	4635      	mov	r5, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   47458:	f8d4 800c 	ldr.w	r8, [r4, #12]
   4745c:	45b0      	cmp	r8, r6
   4745e:	d0f3      	beq.n	47448 <get_elem_size+0x32>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   47460:	68a0      	ldr	r0, [r4, #8]
   47462:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   47466:	f7ff ffd6 	bl	47416 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   4746a:	7923      	ldrb	r3, [r4, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   4746c:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   4746e:	f003 0303 	and.w	r3, r3, #3
   47472:	fa09 f303 	lsl.w	r3, r9, r3
   47476:	1e5a      	subs	r2, r3, #1
   47478:	4410      	add	r0, r2
   4747a:	425b      	negs	r3, r3
   4747c:	4003      	ands	r3, r0
   4747e:	441d      	add	r5, r3
   47480:	e7ec      	b.n	4745c <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   47482:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
   47486:	435f      	muls	r7, r3
   47488:	e7c9      	b.n	4741e <get_elem_size+0x8>

0004748a <lexer_next>:
{
   4748a:	b538      	push	{r3, r4, r5, lr}
   4748c:	4604      	mov	r4, r0
   4748e:	460d      	mov	r5, r1
	while (lexer->state) {
   47490:	6823      	ldr	r3, [r4, #0]
   47492:	7c20      	ldrb	r0, [r4, #16]
   47494:	b933      	cbnz	r3, 474a4 <lexer_next+0x1a>
	if (lexer->token.type == empty_token) {
   47496:	b1a0      	cbz	r0, 474c2 <lexer_next+0x38>
	*token = lexer->token;
   47498:	f104 0210 	add.w	r2, r4, #16
   4749c:	ca07      	ldmia	r2, {r0, r1, r2}
   4749e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   474a2:	e00c      	b.n	474be <lexer_next+0x34>
	if (lexer->token.type == empty_token) {
   474a4:	285f      	cmp	r0, #95	; 0x5f
   474a6:	d103      	bne.n	474b0 <lexer_next+0x26>
		lexer->state = lexer->state(lexer);
   474a8:	4620      	mov	r0, r4
   474aa:	4798      	blx	r3
   474ac:	6020      	str	r0, [r4, #0]
   474ae:	e7ef      	b.n	47490 <lexer_next+0x6>
	*token = lexer->token;
   474b0:	f104 0310 	add.w	r3, r4, #16
   474b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	lexer->token.type = empty_token;
   474b8:	235f      	movs	r3, #95	; 0x5f
	*token = lexer->token;
   474ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	lexer->token.type = empty_token;
   474be:	2001      	movs	r0, #1
   474c0:	7423      	strb	r3, [r4, #16]
}
   474c2:	bd38      	pop	{r3, r4, r5, pc}

000474c4 <obj_parse>:
{
   474c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   474c8:	4607      	mov	r7, r0
   474ca:	468a      	mov	sl, r1
   474cc:	469b      	mov	fp, r3
	s32_t decoded_fields = 0;
   474ce:	2400      	movs	r4, #0
{
   474d0:	b08d      	sub	sp, #52	; 0x34
   474d2:	9202      	str	r2, [sp, #8]
	if (!lexer_next(&json->lexer, &token)) {
   474d4:	ad04      	add	r5, sp, #16
	if (!lexer_next(&json->lexer, &kv->value)) {
   474d6:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (!lexer_next(&json->lexer, &token)) {
   474da:	4629      	mov	r1, r5
   474dc:	4638      	mov	r0, r7
   474de:	f7ff ffd4 	bl	4748a <lexer_next>
   474e2:	b938      	cbnz	r0, 474f4 <obj_parse+0x30>
	return -EINVAL;
   474e4:	f06f 0415 	mvn.w	r4, #21
}
   474e8:	4620      	mov	r0, r4
   474ea:	b00d      	add	sp, #52	; 0x34
   474ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < descr_len; i++) {
   474f0:	3601      	adds	r6, #1
   474f2:	e02e      	b.n	47552 <obj_parse+0x8e>
	switch (token.type) {
   474f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   474f8:	2b2c      	cmp	r3, #44	; 0x2c
   474fa:	d055      	beq.n	475a8 <obj_parse+0xe4>
   474fc:	2b7d      	cmp	r3, #125	; 0x7d
   474fe:	d01c      	beq.n	4753a <obj_parse+0x76>
		if (token.type != JSON_TOK_STRING) {
   47500:	2b22      	cmp	r3, #34	; 0x22
   47502:	d1ef      	bne.n	474e4 <obj_parse+0x20>
		kv->key = token.start;
   47504:	9a05      	ldr	r2, [sp, #20]
		kv->key_len = (size_t)(token.end - token.start);
   47506:	9b06      	ldr	r3, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   47508:	4629      	mov	r1, r5
		kv->key_len = (size_t)(token.end - token.start);
   4750a:	1a9b      	subs	r3, r3, r2
	if (!lexer_next(&json->lexer, &token)) {
   4750c:	4638      	mov	r0, r7
		kv->key = token.start;
   4750e:	9207      	str	r2, [sp, #28]
		kv->key_len = (size_t)(token.end - token.start);
   47510:	9308      	str	r3, [sp, #32]
	if (!lexer_next(&json->lexer, &token)) {
   47512:	f7ff ffba 	bl	4748a <lexer_next>
   47516:	2800      	cmp	r0, #0
   47518:	d0e4      	beq.n	474e4 <obj_parse+0x20>
	if (token.type != JSON_TOK_COLON) {
   4751a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4751e:	2b3a      	cmp	r3, #58	; 0x3a
   47520:	d1e0      	bne.n	474e4 <obj_parse+0x20>
	if (!lexer_next(&json->lexer, &kv->value)) {
   47522:	4641      	mov	r1, r8
   47524:	4638      	mov	r0, r7
   47526:	f7ff ffb0 	bl	4748a <lexer_next>
   4752a:	2800      	cmp	r0, #0
   4752c:	d0da      	beq.n	474e4 <obj_parse+0x20>
	return element_token(kv->value.type);
   4752e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   47532:	f7ff ff5e 	bl	473f2 <element_token>
	while (!obj_next(obj, &kv)) {
   47536:	b138      	cbz	r0, 47548 <obj_parse+0x84>
   47538:	e7d4      	b.n	474e4 <obj_parse+0x20>
		kv->key = NULL;
   4753a:	2300      	movs	r3, #0
		kv->value = token;
   4753c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   47540:	e888 0007 	stmia.w	r8, {r0, r1, r2}
		kv->key_len = 0;
   47544:	e9cd 3307 	strd	r3, r3, [sp, #28]
		if (kv.value.type == JSON_TOK_OBJECT_END) {
   47548:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   4754c:	2b7d      	cmp	r3, #125	; 0x7d
   4754e:	d0cb      	beq.n	474e8 <obj_parse+0x24>
		for (i = 0; i < descr_len; i++) {
   47550:	2600      	movs	r6, #0
   47552:	9b02      	ldr	r3, [sp, #8]
   47554:	429e      	cmp	r6, r3
   47556:	d0c0      	beq.n	474da <obj_parse+0x16>
			if (decoded_fields & (1 << i)) {
   47558:	fa44 f306 	asr.w	r3, r4, r6
   4755c:	07db      	lsls	r3, r3, #31
   4755e:	d4c7      	bmi.n	474f0 <obj_parse+0x2c>
   47560:	0131      	lsls	r1, r6, #4
   47562:	eb0a 0901 	add.w	r9, sl, r1
			if (kv.key_len != descr[i].field_name_len) {
   47566:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   4756a:	9a08      	ldr	r2, [sp, #32]
   4756c:	f3c3 0386 	ubfx	r3, r3, #2, #7
   47570:	429a      	cmp	r2, r3
   47572:	d1bd      	bne.n	474f0 <obj_parse+0x2c>
			void *decode_field = (char *)val + descr[i].offset;
   47574:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			if (memcmp(kv.key, descr[i].field_name,
   47578:	f85a 1001 	ldr.w	r1, [sl, r1]
   4757c:	9807      	ldr	r0, [sp, #28]
			void *decode_field = (char *)val + descr[i].offset;
   4757e:	9303      	str	r3, [sp, #12]
			if (memcmp(kv.key, descr[i].field_name,
   47580:	f7f9 fd18 	bl	40fb4 <memcmp>
   47584:	2800      	cmp	r0, #0
   47586:	d1b3      	bne.n	474f0 <obj_parse+0x2c>
			ret = decode_value(obj, &descr[i], &kv.value,
   47588:	9b03      	ldr	r3, [sp, #12]
   4758a:	f8cd b000 	str.w	fp, [sp]
   4758e:	445b      	add	r3, fp
   47590:	4642      	mov	r2, r8
   47592:	4649      	mov	r1, r9
   47594:	4638      	mov	r0, r7
   47596:	f7d8 feaf 	bl	202f8 <decode_value>
			if (ret < 0) {
   4759a:	2800      	cmp	r0, #0
   4759c:	db0d      	blt.n	475ba <obj_parse+0xf6>
			decoded_fields |= 1<<i;
   4759e:	2301      	movs	r3, #1
   475a0:	fa03 f606 	lsl.w	r6, r3, r6
   475a4:	4334      	orrs	r4, r6
			break;
   475a6:	e798      	b.n	474da <obj_parse+0x16>
		if (!lexer_next(&json->lexer, &token)) {
   475a8:	4629      	mov	r1, r5
   475aa:	4638      	mov	r0, r7
   475ac:	f7ff ff6d 	bl	4748a <lexer_next>
   475b0:	2800      	cmp	r0, #0
   475b2:	d097      	beq.n	474e4 <obj_parse+0x20>
		if (token.type != JSON_TOK_STRING) {
   475b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   475b8:	e7a2      	b.n	47500 <obj_parse+0x3c>
   475ba:	4604      	mov	r4, r0
   475bc:	e794      	b.n	474e8 <obj_parse+0x24>

000475be <z_arch_printk_char_out>:
}
   475be:	2000      	movs	r0, #0
   475c0:	4770      	bx	lr

000475c2 <print_err>:
{
   475c2:	b570      	push	{r4, r5, r6, lr}
   475c4:	460d      	mov	r5, r1
   475c6:	4604      	mov	r4, r0
	out('E', ctx);
   475c8:	2045      	movs	r0, #69	; 0x45
   475ca:	47a0      	blx	r4
	out('R', ctx);
   475cc:	4629      	mov	r1, r5
   475ce:	2052      	movs	r0, #82	; 0x52
   475d0:	47a0      	blx	r4
	out('R', ctx);
   475d2:	4629      	mov	r1, r5
   475d4:	4623      	mov	r3, r4
}
   475d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   475da:	2052      	movs	r0, #82	; 0x52
   475dc:	4718      	bx	r3

000475de <z_vprintk>:
{
   475de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   475e2:	2700      	movs	r7, #0
{
   475e4:	4605      	mov	r5, r0
   475e6:	460e      	mov	r6, r1
   475e8:	4692      	mov	sl, r2
   475ea:	461c      	mov	r4, r3
	int min_width = -1;
   475ec:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   475f0:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   475f2:	46bb      	mov	fp, r7
{
   475f4:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   475f6:	f89a 0000 	ldrb.w	r0, [sl]
   475fa:	b910      	cbnz	r0, 47602 <z_vprintk+0x24>
}
   475fc:	b009      	add	sp, #36	; 0x24
   475fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   47602:	f1bb 0f00 	cmp.w	fp, #0
   47606:	d107      	bne.n	47618 <z_vprintk+0x3a>
			if (*fmt != '%') {
   47608:	2825      	cmp	r0, #37	; 0x25
   4760a:	f000 814e 	beq.w	478aa <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   4760e:	4631      	mov	r1, r6
   47610:	47a8      	blx	r5
		++fmt;
   47612:	f10a 0a01 	add.w	sl, sl, #1
   47616:	e7ee      	b.n	475f6 <z_vprintk+0x18>
			switch (*fmt) {
   47618:	2864      	cmp	r0, #100	; 0x64
   4761a:	d068      	beq.n	476ee <z_vprintk+0x110>
   4761c:	d81a      	bhi.n	47654 <z_vprintk+0x76>
   4761e:	2839      	cmp	r0, #57	; 0x39
   47620:	d80b      	bhi.n	4763a <z_vprintk+0x5c>
   47622:	2831      	cmp	r0, #49	; 0x31
   47624:	d25a      	bcs.n	476dc <z_vprintk+0xfe>
   47626:	282d      	cmp	r0, #45	; 0x2d
   47628:	f000 8146 	beq.w	478b8 <z_vprintk+0x2da>
   4762c:	2830      	cmp	r0, #48	; 0x30
   4762e:	d046      	beq.n	476be <z_vprintk+0xe0>
   47630:	2825      	cmp	r0, #37	; 0x25
   47632:	d108      	bne.n	47646 <z_vprintk+0x68>
				out((int)'%', ctx);
   47634:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   47636:	47a8      	blx	r5
   47638:	e07a      	b.n	47730 <z_vprintk+0x152>
			switch (*fmt) {
   4763a:	2858      	cmp	r0, #88	; 0x58
   4763c:	f000 80b4 	beq.w	477a8 <z_vprintk+0x1ca>
   47640:	2863      	cmp	r0, #99	; 0x63
   47642:	f000 812c 	beq.w	4789e <z_vprintk+0x2c0>
				out((int)'%', ctx);
   47646:	4631      	mov	r1, r6
   47648:	2025      	movs	r0, #37	; 0x25
   4764a:	47a8      	blx	r5
				out((int)*fmt, ctx);
   4764c:	4631      	mov	r1, r6
   4764e:	f89a 0000 	ldrb.w	r0, [sl]
   47652:	e7f0      	b.n	47636 <z_vprintk+0x58>
			switch (*fmt) {
   47654:	2870      	cmp	r0, #112	; 0x70
   47656:	f000 809d 	beq.w	47794 <z_vprintk+0x1b6>
   4765a:	d80d      	bhi.n	47678 <z_vprintk+0x9a>
   4765c:	2869      	cmp	r0, #105	; 0x69
   4765e:	d046      	beq.n	476ee <z_vprintk+0x110>
   47660:	286c      	cmp	r0, #108	; 0x6c
   47662:	d103      	bne.n	4766c <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   47664:	2f6c      	cmp	r7, #108	; 0x6c
   47666:	d126      	bne.n	476b6 <z_vprintk+0xd8>
					length_mod = 'L';
   47668:	274c      	movs	r7, #76	; 0x4c
   4766a:	e7d2      	b.n	47612 <z_vprintk+0x34>
			switch (*fmt) {
   4766c:	2868      	cmp	r0, #104	; 0x68
   4766e:	d1ea      	bne.n	47646 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   47670:	2f68      	cmp	r7, #104	; 0x68
   47672:	d120      	bne.n	476b6 <z_vprintk+0xd8>
					length_mod = 'H';
   47674:	2748      	movs	r7, #72	; 0x48
   47676:	e7cc      	b.n	47612 <z_vprintk+0x34>
			switch (*fmt) {
   47678:	2875      	cmp	r0, #117	; 0x75
   4767a:	d070      	beq.n	4775e <z_vprintk+0x180>
   4767c:	d817      	bhi.n	476ae <z_vprintk+0xd0>
   4767e:	2873      	cmp	r0, #115	; 0x73
   47680:	d1e1      	bne.n	47646 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   47682:	6822      	ldr	r2, [r4, #0]
   47684:	f104 0b04 	add.w	fp, r4, #4
   47688:	4611      	mov	r1, r2
				while (*s) {
   4768a:	460c      	mov	r4, r1
   4768c:	f814 0b01 	ldrb.w	r0, [r4], #1
   47690:	2800      	cmp	r0, #0
   47692:	f040 80f9 	bne.w	47888 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   47696:	f1b8 0f03 	cmp.w	r8, #3
   4769a:	f040 8113 	bne.w	478c4 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   4769e:	1a8c      	subs	r4, r1, r2
   476a0:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   476a4:	2c00      	cmp	r4, #0
   476a6:	f300 80f5 	bgt.w	47894 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   476aa:	465c      	mov	r4, fp
   476ac:	e040      	b.n	47730 <z_vprintk+0x152>
			switch (*fmt) {
   476ae:	2878      	cmp	r0, #120	; 0x78
   476b0:	d07a      	beq.n	477a8 <z_vprintk+0x1ca>
   476b2:	287a      	cmp	r0, #122	; 0x7a
   476b4:	d1c7      	bne.n	47646 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   476b6:	2f00      	cmp	r7, #0
   476b8:	d1c5      	bne.n	47646 <z_vprintk+0x68>
   476ba:	4607      	mov	r7, r0
   476bc:	e7a9      	b.n	47612 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   476be:	f1b9 0f00 	cmp.w	r9, #0
   476c2:	da0e      	bge.n	476e2 <z_vprintk+0x104>
   476c4:	f1b8 0f00 	cmp.w	r8, #0
   476c8:	f000 80f9 	beq.w	478be <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   476cc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   476d0:	f1b8 0f00 	cmp.w	r8, #0
   476d4:	bf08      	it	eq
   476d6:	f04f 0802 	moveq.w	r8, #2
   476da:	e79a      	b.n	47612 <z_vprintk+0x34>
				if (min_width < 0) {
   476dc:	f1b9 0f00 	cmp.w	r9, #0
   476e0:	dbf4      	blt.n	476cc <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   476e2:	220a      	movs	r2, #10
   476e4:	fb02 0909 	mla	r9, r2, r9, r0
   476e8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   476ec:	e7f0      	b.n	476d0 <z_vprintk+0xf2>
				if (length_mod == 'z') {
   476ee:	2f7a      	cmp	r7, #122	; 0x7a
   476f0:	d103      	bne.n	476fa <z_vprintk+0x11c>
					d = va_arg(ap, int);
   476f2:	f8d4 b000 	ldr.w	fp, [r4]
   476f6:	3404      	adds	r4, #4
   476f8:	e01e      	b.n	47738 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   476fa:	2f6c      	cmp	r7, #108	; 0x6c
   476fc:	d0f9      	beq.n	476f2 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   476fe:	2f4c      	cmp	r7, #76	; 0x4c
   47700:	d1f7      	bne.n	476f2 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   47702:	f04f 0c00 	mov.w	ip, #0
   47706:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   4770a:	3407      	adds	r4, #7
   4770c:	f024 0307 	bic.w	r3, r4, #7
   47710:	f103 0408 	add.w	r4, r3, #8
   47714:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   47718:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   4771c:	f143 0100 	adc.w	r1, r3, #0
   47720:	458c      	cmp	ip, r1
   47722:	bf08      	it	eq
   47724:	4583      	cmpeq	fp, r0
   47726:	d206      	bcs.n	47736 <z_vprintk+0x158>
						print_err(out, ctx);
   47728:	4631      	mov	r1, r6
   4772a:	4628      	mov	r0, r5
   4772c:	f7ff ff49 	bl	475c2 <print_err>
			might_format = 0;
   47730:	f04f 0b00 	mov.w	fp, #0
				break;
   47734:	e76d      	b.n	47612 <z_vprintk+0x34>
					d = lld;
   47736:	4693      	mov	fp, r2
				if (d < 0) {
   47738:	f1bb 0f00 	cmp.w	fp, #0
   4773c:	da06      	bge.n	4774c <z_vprintk+0x16e>
					out((int)'-', ctx);
   4773e:	4631      	mov	r1, r6
   47740:	202d      	movs	r0, #45	; 0x2d
   47742:	47a8      	blx	r5
					d = -d;
   47744:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   47748:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   4774c:	4643      	mov	r3, r8
   4774e:	465a      	mov	r2, fp
   47750:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   47754:	4631      	mov	r1, r6
   47756:	4628      	mov	r0, r5
   47758:	f7d8 feb6 	bl	204c8 <_printk_dec_ulong>
   4775c:	e7e8      	b.n	47730 <z_vprintk+0x152>
				if (length_mod == 'z') {
   4775e:	2f7a      	cmp	r7, #122	; 0x7a
   47760:	d102      	bne.n	47768 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   47762:	6822      	ldr	r2, [r4, #0]
   47764:	3404      	adds	r4, #4
   47766:	e011      	b.n	4778c <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   47768:	2f6c      	cmp	r7, #108	; 0x6c
   4776a:	d0fa      	beq.n	47762 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   4776c:	2f4c      	cmp	r7, #76	; 0x4c
   4776e:	d1f8      	bne.n	47762 <z_vprintk+0x184>
					if (llu > ~0UL) {
   47770:	2100      	movs	r1, #0
   47772:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   47776:	3407      	adds	r4, #7
   47778:	f024 0307 	bic.w	r3, r4, #7
   4777c:	f103 0408 	add.w	r4, r3, #8
   47780:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   47784:	4299      	cmp	r1, r3
   47786:	bf08      	it	eq
   47788:	4290      	cmpeq	r0, r2
   4778a:	d3cd      	bcc.n	47728 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   4778c:	f8cd 9000 	str.w	r9, [sp]
   47790:	4643      	mov	r3, r8
   47792:	e7df      	b.n	47754 <z_vprintk+0x176>
				  out('0', ctx);
   47794:	4631      	mov	r1, r6
   47796:	2030      	movs	r0, #48	; 0x30
   47798:	47a8      	blx	r5
				  out('x', ctx);
   4779a:	4631      	mov	r1, r6
   4779c:	2078      	movs	r0, #120	; 0x78
   4779e:	47a8      	blx	r5
				  min_width = 8;
   477a0:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   477a4:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   477a8:	f89a 2000 	ldrb.w	r2, [sl]
   477ac:	2a70      	cmp	r2, #112	; 0x70
   477ae:	d105      	bne.n	477bc <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   477b0:	6823      	ldr	r3, [r4, #0]
   477b2:	3404      	adds	r4, #4
   477b4:	9304      	str	r3, [sp, #16]
   477b6:	2300      	movs	r3, #0
   477b8:	9302      	str	r3, [sp, #8]
   477ba:	e00c      	b.n	477d6 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   477bc:	2f6c      	cmp	r7, #108	; 0x6c
   477be:	d0f7      	beq.n	477b0 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   477c0:	2f4c      	cmp	r7, #76	; 0x4c
   477c2:	d1f5      	bne.n	477b0 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   477c4:	3407      	adds	r4, #7
   477c6:	f024 0207 	bic.w	r2, r4, #7
   477ca:	6813      	ldr	r3, [r2, #0]
   477cc:	f102 0408 	add.w	r4, r2, #8
   477d0:	9304      	str	r3, [sp, #16]
   477d2:	6853      	ldr	r3, [r2, #4]
   477d4:	9302      	str	r3, [sp, #8]
	int digits = 0;
   477d6:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   477d8:	2310      	movs	r3, #16
	int digits = 0;
   477da:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   477dc:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   477de:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   477e0:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   477e2:	9902      	ldr	r1, [sp, #8]
   477e4:	9804      	ldr	r0, [sp, #16]
   477e6:	f1c2 0c20 	rsb	ip, r2, #32
   477ea:	f1a2 0e20 	sub.w	lr, r2, #32
   477ee:	40d0      	lsrs	r0, r2
   477f0:	fa01 fc0c 	lsl.w	ip, r1, ip
   477f4:	ea40 000c 	orr.w	r0, r0, ip
   477f8:	fa21 fe0e 	lsr.w	lr, r1, lr
   477fc:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   47800:	f010 000f 	ands.w	r0, r0, #15
   47804:	d108      	bne.n	47818 <z_vprintk+0x23a>
   47806:	9905      	ldr	r1, [sp, #20]
   47808:	b901      	cbnz	r1, 4780c <z_vprintk+0x22e>
   4780a:	bb42      	cbnz	r2, 4785e <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   4780c:	f04f 0c30 	mov.w	ip, #48	; 0x30
   47810:	e008      	b.n	47824 <z_vprintk+0x246>
			found_largest_digit = 1;
   47812:	f8cd b014 	str.w	fp, [sp, #20]
   47816:	e7e3      	b.n	477e0 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   47818:	2809      	cmp	r0, #9
   4781a:	bf8c      	ite	hi
   4781c:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   47820:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   47824:	4631      	mov	r1, r6
   47826:	4460      	add	r0, ip
   47828:	e9cd 2305 	strd	r2, r3, [sp, #20]
   4782c:	47a8      	blx	r5
			digits++;
   4782e:	9b03      	ldr	r3, [sp, #12]
   47830:	3301      	adds	r3, #1
   47832:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   47834:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   47838:	2a00      	cmp	r2, #0
   4783a:	d1ea      	bne.n	47812 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   4783c:	f1b8 0f03 	cmp.w	r8, #3
   47840:	f47f af76 	bne.w	47730 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   47844:	9b03      	ldr	r3, [sp, #12]
   47846:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   4784a:	f1bb 0f00 	cmp.w	fp, #0
   4784e:	f77f af6f 	ble.w	47730 <z_vprintk+0x152>
			out(' ', ctx);
   47852:	4631      	mov	r1, r6
   47854:	2020      	movs	r0, #32
   47856:	47a8      	blx	r5
   47858:	f10b 3bff 	add.w	fp, fp, #4294967295
   4785c:	e7f5      	b.n	4784a <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   4785e:	1e59      	subs	r1, r3, #1
   47860:	4599      	cmp	r9, r3
   47862:	9106      	str	r1, [sp, #24]
   47864:	db07      	blt.n	47876 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   47866:	f1b8 0f01 	cmp.w	r8, #1
   4786a:	d106      	bne.n	4787a <z_vprintk+0x29c>
				out('0', ctx);
   4786c:	4631      	mov	r1, r6
   4786e:	2030      	movs	r0, #48	; 0x30
   47870:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   47872:	47a8      	blx	r5
   47874:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   47876:	9b06      	ldr	r3, [sp, #24]
   47878:	e7b2      	b.n	477e0 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   4787a:	f1b8 0f02 	cmp.w	r8, #2
   4787e:	d1fa      	bne.n	47876 <z_vprintk+0x298>
   47880:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   47882:	4631      	mov	r1, r6
   47884:	2020      	movs	r0, #32
   47886:	e7f4      	b.n	47872 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   47888:	4631      	mov	r1, r6
   4788a:	9202      	str	r2, [sp, #8]
   4788c:	47a8      	blx	r5
   4788e:	4621      	mov	r1, r4
   47890:	9a02      	ldr	r2, [sp, #8]
   47892:	e6fa      	b.n	4768a <z_vprintk+0xac>
						out(' ', ctx);
   47894:	4631      	mov	r1, r6
   47896:	2020      	movs	r0, #32
   47898:	47a8      	blx	r5
   4789a:	3c01      	subs	r4, #1
   4789c:	e702      	b.n	476a4 <z_vprintk+0xc6>
				out(c, ctx);
   4789e:	4631      	mov	r1, r6
   478a0:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   478a2:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   478a6:	47a8      	blx	r5
   478a8:	e6ff      	b.n	476aa <z_vprintk+0xcc>
				length_mod = 0;
   478aa:	465f      	mov	r7, fp
				padding = PAD_NONE;
   478ac:	46d8      	mov	r8, fp
				min_width = -1;
   478ae:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   478b2:	f04f 0b01 	mov.w	fp, #1
   478b6:	e6ac      	b.n	47612 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   478b8:	f04f 0803 	mov.w	r8, #3
   478bc:	e6a9      	b.n	47612 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   478be:	f04f 0801 	mov.w	r8, #1
   478c2:	e6a6      	b.n	47612 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   478c4:	465c      	mov	r4, fp
			might_format = 0;
   478c6:	4683      	mov	fp, r0
   478c8:	e6a3      	b.n	47612 <z_vprintk+0x34>

000478ca <printk>:
{
   478ca:	b40f      	push	{r0, r1, r2, r3}
   478cc:	b507      	push	{r0, r1, r2, lr}
   478ce:	a904      	add	r1, sp, #16
   478d0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   478d4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   478d6:	f7d8 fe49 	bl	2056c <vprintk>
}
   478da:	b003      	add	sp, #12
   478dc:	f85d eb04 	ldr.w	lr, [sp], #4
   478e0:	b004      	add	sp, #16
   478e2:	4770      	bx	lr

000478e4 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   478e4:	4040      	eors	r0, r0
   478e6:	f380 8811 	msr	BASEPRI, r0
   478ea:	f04f 0004 	mov.w	r0, #4
   478ee:	df02      	svc	2

000478f0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   478f0:	4770      	bx	lr

000478f2 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   478f2:	f7f4 bac1 	b.w	3be78 <SystemInit>

000478f6 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   478f6:	6843      	ldr	r3, [r0, #4]
}
   478f8:	7958      	ldrb	r0, [r3, #5]
   478fa:	4770      	bx	lr

000478fc <k_cycle_get_32_wrapper>:
   478fc:	f7d9 bdca 	b.w	21494 <z_timer_cycle_get_32>

00047900 <dummy_timestamp>:
   47900:	2000      	movs	r0, #0
   47902:	4770      	bx	lr

00047904 <log_string_sync>:
{
   47904:	b40e      	push	{r1, r2, r3}
   47906:	b503      	push	{r0, r1, lr}
   47908:	aa03      	add	r2, sp, #12
   4790a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   4790e:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   47910:	f7d8 fe5a 	bl	205c8 <log_generic>
}
   47914:	b002      	add	sp, #8
   47916:	f85d eb04 	ldr.w	lr, [sp], #4
   4791a:	b003      	add	sp, #12
   4791c:	4770      	bx	lr

0004791e <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   4791e:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   47920:	f7d8 fec8 	bl	206b4 <log_init>
	}

	return 0;
}
   47924:	2000      	movs	r0, #0
   47926:	bd08      	pop	{r3, pc}

00047928 <log_strdup>:
}
   47928:	4770      	bx	lr

0004792a <buffer_write>:
{
   4792a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4792c:	4606      	mov	r6, r0
   4792e:	460d      	mov	r5, r1
   47930:	4614      	mov	r4, r2
   47932:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   47934:	4621      	mov	r1, r4
   47936:	4628      	mov	r0, r5
   47938:	463a      	mov	r2, r7
   4793a:	47b0      	blx	r6
	} while (len != 0);
   4793c:	1a24      	subs	r4, r4, r0
		buf += processed;
   4793e:	4405      	add	r5, r0
	} while (len != 0);
   47940:	d1f8      	bne.n	47934 <buffer_write+0xa>
}
   47942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00047944 <log_output_flush>:
		     log_output->control_block->offset,
   47944:	6842      	ldr	r2, [r0, #4]
{
   47946:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   47948:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   4794c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   4794e:	6881      	ldr	r1, [r0, #8]
   47950:	6800      	ldr	r0, [r0, #0]
   47952:	f7ff ffea 	bl	4792a <buffer_write>
	log_output->control_block->offset = 0;
   47956:	2200      	movs	r2, #0
   47958:	6863      	ldr	r3, [r4, #4]
   4795a:	601a      	str	r2, [r3, #0]
}
   4795c:	bd10      	pop	{r4, pc}

0004795e <char_out>:
{
   4795e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47960:	460d      	mov	r5, r1
   47962:	4616      	mov	r6, r2
   47964:	4604      	mov	r4, r0
   47966:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   47968:	42bc      	cmp	r4, r7
   4796a:	d101      	bne.n	47970 <char_out+0x12>
}
   4796c:	4628      	mov	r0, r5
   4796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   47970:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   47974:	6873      	ldr	r3, [r6, #4]
   47976:	4630      	mov	r0, r6
   47978:	685b      	ldr	r3, [r3, #4]
   4797a:	4798      	blx	r3
   4797c:	e7f4      	b.n	47968 <char_out+0xa>

0004797e <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   4797e:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   47980:	2002      	movs	r0, #2
   47982:	a901      	add	r1, sp, #4
   47984:	f7d9 fb0c 	bl	20fa0 <flash_area_open>
	if (rc) {
   47988:	b950      	cbnz	r0, 479a0 <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   4798a:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   4798c:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   4798e:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   47990:	f10d 0203 	add.w	r2, sp, #3
   47994:	3918      	subs	r1, #24
   47996:	f000 f889 	bl	47aac <flash_area_read>
	if (rc != 0) {
   4799a:	b908      	cbnz	r0, 479a0 <boot_flag_read.constprop.6+0x22>
	return flag_val;
   4799c:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   479a0:	b003      	add	sp, #12
   479a2:	f85d fb04 	ldr.w	pc, [sp], #4

000479a6 <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   479a6:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   479a8:	a901      	add	r1, sp, #4
   479aa:	f7d9 faf9 	bl	20fa0 <flash_area_open>
	if (rc) {
   479ae:	4604      	mov	r4, r0
   479b0:	b948      	cbnz	r0, 479c6 <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   479b2:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   479b4:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   479b6:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   479b8:	3918      	subs	r1, #24
   479ba:	f7d9 f91b 	bl	20bf4 <boot_write_trailer_byte>
   479be:	4604      	mov	r4, r0
	flash_area_close(fa);
   479c0:	9801      	ldr	r0, [sp, #4]
   479c2:	f000 f872 	bl	47aaa <flash_area_close>
}
   479c6:	4620      	mov	r0, r4
   479c8:	b002      	add	sp, #8
   479ca:	bd10      	pop	{r4, pc}

000479cc <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   479cc:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   479ce:	f7ff ffd6 	bl	4797e <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   479d2:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   479d4:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   479d6:	2002      	movs	r0, #2
   479d8:	f7d9 fae2 	bl	20fa0 <flash_area_open>
	if (rc) {
   479dc:	2800      	cmp	r0, #0
	return flash_area_erased_val(fa);
   479de:	bf14      	ite	ne
   479e0:	f06f 0315 	mvnne.w	r3, #21
   479e4:	23ff      	moveq	r3, #255	; 0xff
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   479e6:	42a3      	cmp	r3, r4
   479e8:	d104      	bne.n	479f4 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   479ea:	2002      	movs	r0, #2
   479ec:	f7ff ffdb 	bl	479a6 <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   479f0:	b002      	add	sp, #8
   479f2:	bd10      	pop	{r4, pc}
		return 0;
   479f4:	2000      	movs	r0, #0
   479f6:	e7fb      	b.n	479f0 <boot_write_img_confirmed+0x24>

000479f8 <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   479f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   479fc:	4604      	mov	r4, r0
   479fe:	4688      	mov	r8, r1
   47a00:	4615      	mov	r5, r2
   47a02:	461f      	mov	r7, r3
	int processed = 0;
   47a04:	2600      	movs	r6, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   47a06:	f44f 7900 	mov.w	r9, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   47a0a:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   47a0e:	1baa      	subs	r2, r5, r6
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   47a10:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
	while ((len - processed) >=
   47a14:	4552      	cmp	r2, sl
   47a16:	d220      	bcs.n	47a5a <flash_img_buffered_write+0x62>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   47a18:	42ae      	cmp	r6, r5
   47a1a:	d20a      	bcs.n	47a32 <flash_img_buffered_write+0x3a>
   47a1c:	eb08 0106 	add.w	r1, r8, r6
   47a20:	4420      	add	r0, r4
   47a22:	f7d2 fa45 	bl	19eb0 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   47a26:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   47a2a:	441d      	add	r5, r3
   47a2c:	1bad      	subs	r5, r5, r6
   47a2e:	f8a4 5208 	strh.w	r5, [r4, #520]	; 0x208
	}

	if (!flush) {
   47a32:	b33f      	cbz	r7, 47a84 <flash_img_buffered_write+0x8c>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   47a34:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   47a38:	b9f3      	cbnz	r3, 47a78 <flash_img_buffered_write+0x80>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   47a3a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	flash_progressive_erase(ctx,
   47a3e:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   47a40:	6899      	ldr	r1, [r3, #8]
	flash_progressive_erase(ctx,
   47a42:	3920      	subs	r1, #32
   47a44:	f7d9 f930 	bl	20ca8 <flash_progressive_erase>
#endif

	flash_area_close(ctx->flash_area);
   47a48:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   47a4c:	f000 f82d 	bl	47aaa <flash_area_close>
	ctx->flash_area = NULL;
   47a50:	2000      	movs	r0, #0
   47a52:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200

	return rc;
}
   47a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   47a5a:	4652      	mov	r2, sl
   47a5c:	eb08 0106 	add.w	r1, r8, r6
   47a60:	4420      	add	r0, r4
   47a62:	f7d2 fa25 	bl	19eb0 <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   47a66:	f8a4 9208 	strh.w	r9, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   47a6a:	4620      	mov	r0, r4
   47a6c:	f7d9 f97e 	bl	20d6c <flash_sync>
		if (rc) {
   47a70:	2800      	cmp	r0, #0
   47a72:	d1f0      	bne.n	47a56 <flash_img_buffered_write+0x5e>
		processed += buf_empty_bytes;
   47a74:	4456      	add	r6, sl
   47a76:	e7c8      	b.n	47a0a <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   47a78:	4620      	mov	r0, r4
   47a7a:	f7d9 f977 	bl	20d6c <flash_sync>
		if (rc) {
   47a7e:	2800      	cmp	r0, #0
   47a80:	d0db      	beq.n	47a3a <flash_img_buffered_write+0x42>
   47a82:	e7e8      	b.n	47a56 <flash_img_buffered_write+0x5e>
   47a84:	4638      	mov	r0, r7
   47a86:	e7e6      	b.n	47a56 <flash_img_buffered_write+0x5e>

00047a88 <flash_img_init>:
	return ctx->bytes_written;
}

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   47a88:	2300      	movs	r3, #0
   47a8a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   47a8e:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   47a92:	f04f 33ff 	mov.w	r3, #4294967295
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   47a96:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   47a9a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   47a9e:	2006      	movs	r0, #6
   47aa0:	f7d9 ba7e 	b.w	20fa0 <flash_area_open>

00047aa4 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   47aa4:	6843      	ldr	r3, [r0, #4]
   47aa6:	68db      	ldr	r3, [r3, #12]
   47aa8:	4718      	bx	r3

00047aaa <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   47aaa:	4770      	bx	lr

00047aac <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   47aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   47ab0:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   47ab2:	6883      	ldr	r3, [r0, #8]
{
   47ab4:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47ab6:	428b      	cmp	r3, r1
{
   47ab8:	460c      	mov	r4, r1
   47aba:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47abc:	d30f      	bcc.n	47ade <flash_area_read+0x32>
   47abe:	1872      	adds	r2, r6, r1
   47ac0:	4293      	cmp	r3, r2
   47ac2:	d30c      	bcc.n	47ade <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   47ac4:	68c0      	ldr	r0, [r0, #12]
   47ac6:	f7f5 f90f 	bl	3cce8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   47aca:	6869      	ldr	r1, [r5, #4]
   47acc:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   47ace:	6843      	ldr	r3, [r0, #4]
   47ad0:	463a      	mov	r2, r7
   47ad2:	681c      	ldr	r4, [r3, #0]
   47ad4:	4633      	mov	r3, r6
   47ad6:	46a4      	mov	ip, r4
}
   47ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   47adc:	4760      	bx	ip
   47ade:	f06f 0015 	mvn.w	r0, #21
   47ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00047ae6 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   47ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   47aea:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   47aec:	6883      	ldr	r3, [r0, #8]
{
   47aee:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47af0:	428b      	cmp	r3, r1
{
   47af2:	460d      	mov	r5, r1
   47af4:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47af6:	d31c      	bcc.n	47b32 <flash_area_write+0x4c>
   47af8:	eb08 0201 	add.w	r2, r8, r1
   47afc:	4293      	cmp	r3, r2
   47afe:	d318      	bcc.n	47b32 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   47b00:	68c0      	ldr	r0, [r0, #12]
   47b02:	f7f5 f8f1 	bl	3cce8 <z_impl_device_get_binding>
   47b06:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   47b08:	2100      	movs	r1, #0
   47b0a:	f7ff ffcb 	bl	47aa4 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   47b0e:	4604      	mov	r4, r0
   47b10:	b960      	cbnz	r0, 47b2c <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   47b12:	6879      	ldr	r1, [r7, #4]
   47b14:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   47b16:	6873      	ldr	r3, [r6, #4]
   47b18:	464a      	mov	r2, r9
   47b1a:	685c      	ldr	r4, [r3, #4]
   47b1c:	4630      	mov	r0, r6
   47b1e:	4643      	mov	r3, r8
   47b20:	47a0      	blx	r4
   47b22:	4604      	mov	r4, r0
   47b24:	2101      	movs	r1, #1
   47b26:	4630      	mov	r0, r6
   47b28:	f7ff ffbc 	bl	47aa4 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   47b2c:	4620      	mov	r0, r4
   47b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   47b32:	f06f 0415 	mvn.w	r4, #21
   47b36:	e7f9      	b.n	47b2c <flash_area_write+0x46>

00047b38 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   47b38:	6883      	ldr	r3, [r0, #8]
{
   47b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47b3e:	428b      	cmp	r3, r1
{
   47b40:	4607      	mov	r7, r0
   47b42:	460d      	mov	r5, r1
   47b44:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   47b46:	d31a      	bcc.n	47b7e <flash_area_erase+0x46>
   47b48:	440a      	add	r2, r1
   47b4a:	4293      	cmp	r3, r2
   47b4c:	d317      	bcc.n	47b7e <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   47b4e:	68c0      	ldr	r0, [r0, #12]
   47b50:	f7f5 f8ca 	bl	3cce8 <z_impl_device_get_binding>
   47b54:	4606      	mov	r6, r0
   47b56:	2100      	movs	r1, #0
   47b58:	f7ff ffa4 	bl	47aa4 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   47b5c:	4604      	mov	r4, r0
   47b5e:	b958      	cbnz	r0, 47b78 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   47b60:	6879      	ldr	r1, [r7, #4]
   47b62:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   47b64:	6873      	ldr	r3, [r6, #4]
   47b66:	4642      	mov	r2, r8
   47b68:	689b      	ldr	r3, [r3, #8]
   47b6a:	4630      	mov	r0, r6
   47b6c:	4798      	blx	r3
   47b6e:	4604      	mov	r4, r0
   47b70:	2101      	movs	r1, #1
   47b72:	4630      	mov	r0, r6
   47b74:	f7ff ff96 	bl	47aa4 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   47b78:	4620      	mov	r0, r4
   47b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   47b7e:	f06f 0415 	mvn.w	r4, #21
   47b82:	e7f9      	b.n	47b78 <flash_area_erase+0x40>

00047b84 <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   47b84:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   47b86:	68c0      	ldr	r0, [r0, #12]
   47b88:	f7f5 f8ae 	bl	3cce8 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   47b8c:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   47b8e:	7d18      	ldrb	r0, [r3, #20]
   47b90:	bd08      	pop	{r3, pc}

00047b92 <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   47b92:	68c0      	ldr	r0, [r0, #12]
   47b94:	f7f5 b8a8 	b.w	3cce8 <z_impl_device_get_binding>

00047b98 <z_impl_uart_poll_out>:
   47b98:	6843      	ldr	r3, [r0, #4]
   47b9a:	685b      	ldr	r3, [r3, #4]
   47b9c:	4718      	bx	r3

00047b9e <debug_hook_out_nop>:
}
   47b9e:	2000      	movs	r0, #0
   47ba0:	4770      	bx	lr

00047ba2 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   47ba2:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   47ba4:	7a5a      	ldrb	r2, [r3, #9]
   47ba6:	b932      	cbnz	r2, 47bb6 <get_status+0x14>
	if (data->ref > 0) {
   47ba8:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   47bac:	2800      	cmp	r0, #0
   47bae:	bfcc      	ite	gt
   47bb0:	2000      	movgt	r0, #0
   47bb2:	2001      	movle	r0, #1
   47bb4:	4770      	bx	lr
   47bb6:	2002      	movs	r0, #2
}
   47bb8:	4770      	bx	lr

00047bba <clock_stop>:
	const struct nrf_clock_control_config *config =
   47bba:	6802      	ldr	r2, [r0, #0]
{
   47bbc:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   47bbe:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   47bc0:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   47bc2:	f04f 0320 	mov.w	r3, #32
   47bc6:	f3ef 8511 	mrs	r5, BASEPRI
   47bca:	f383 8811 	msr	BASEPRI, r3
   47bce:	f3bf 8f6f 	isb	sy
	data->ref--;
   47bd2:	7a23      	ldrb	r3, [r4, #8]
   47bd4:	3b01      	subs	r3, #1
   47bd6:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   47bd8:	2b00      	cmp	r3, #0
	data->ref--;
   47bda:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   47bdc:	d11c      	bne.n	47c18 <clock_stop+0x5e>
	list->tail = NULL;
   47bde:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   47be2:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   47be4:	b9a3      	cbnz	r3, 47c10 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   47be6:	2201      	movs	r2, #1
   47be8:	7af3      	ldrb	r3, [r6, #11]
   47bea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47bee:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   47bf2:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   47bf4:	2200      	movs	r2, #0
   47bf6:	8933      	ldrh	r3, [r6, #8]
   47bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47bfc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   47c00:	601a      	str	r2, [r3, #0]
		data->started = false;
   47c02:	2000      	movs	r0, #0
   47c04:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   47c06:	f385 8811 	msr	BASEPRI, r5
   47c0a:	f3bf 8f6f 	isb	sy
}
   47c0e:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   47c10:	4798      	blx	r3
   47c12:	2800      	cmp	r0, #0
   47c14:	d1e7      	bne.n	47be6 <clock_stop+0x2c>
   47c16:	e7f4      	b.n	47c02 <clock_stop+0x48>
   47c18:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   47c1c:	bfbc      	itt	lt
   47c1e:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   47c20:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   47c24:	e7ef      	b.n	47c06 <clock_stop+0x4c>

00047c26 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   47c26:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   47c28:	2000      	movs	r0, #0
	list->tail = NULL;
   47c2a:	e9c3 0000 	strd	r0, r0, [r3]
}
   47c2e:	4770      	bx	lr

00047c30 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   47c30:	2200      	movs	r2, #0
   47c32:	f7d9 ba2d 	b.w	21090 <clock_async_start>

00047c36 <clkstarted_handle>:
{
   47c36:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   47c38:	6884      	ldr	r4, [r0, #8]
{
   47c3a:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   47c3c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   47c3e:	b12b      	cbz	r3, 47c4c <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47c40:	6861      	ldr	r1, [r4, #4]
	return node->next;
   47c42:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47c44:	428b      	cmp	r3, r1
	list->head = node;
   47c46:	6022      	str	r2, [r4, #0]
	list->tail = node;
   47c48:	bf08      	it	eq
   47c4a:	6062      	streq	r2, [r4, #4]
	data->started = true;
   47c4c:	2201      	movs	r2, #1
   47c4e:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   47c50:	b903      	cbnz	r3, 47c54 <clkstarted_handle+0x1e>
}
   47c52:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   47c54:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   47c58:	4628      	mov	r0, r5
   47c5a:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   47c5c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   47c5e:	2b00      	cmp	r3, #0
   47c60:	d0f7      	beq.n	47c52 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47c62:	6861      	ldr	r1, [r4, #4]
	return node->next;
   47c64:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47c66:	428b      	cmp	r3, r1
	list->head = node;
   47c68:	6022      	str	r2, [r4, #0]
	list->tail = node;
   47c6a:	bf08      	it	eq
   47c6c:	6062      	streq	r2, [r4, #4]
   47c6e:	e7ef      	b.n	47c50 <clkstarted_handle+0x1a>

00047c70 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   47c70:	4770      	bx	lr

00047c72 <sys_clock_disable>:
   47c72:	4770      	bx	lr

00047c74 <z_irq_spurious>:
	z_arm_reserved();
   47c74:	f7d9 bcea 	b.w	2164c <z_arm_bus_fault>

00047c78 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   47c78:	4770      	bx	lr

00047c7a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   47c7a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   47c7c:	f383 880b 	msr	PSPLIM, r3
}
   47c80:	4770      	bx	lr

00047c82 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   47c82:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   47c84:	6800      	ldr	r0, [r0, #0]
   47c86:	f7d9 be01 	b.w	2188c <z_arm_fatal_error>

00047c8a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   47c8a:	b508      	push	{r3, lr}
	handler();
   47c8c:	f7d9 fcf0 	bl	21670 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   47c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   47c94:	f7d9 bc4e 	b.w	21534 <z_arm_exc_exit>

00047c98 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   47c98:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   47c9a:	2100      	movs	r1, #0
   47c9c:	a801      	add	r0, sp, #4
   47c9e:	f7da fc23 	bl	224e8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   47ca2:	b003      	add	sp, #12
   47ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00047ca8 <mpu_configure_region>:
{
   47ca8:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   47caa:	684b      	ldr	r3, [r1, #4]
{
   47cac:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   47cae:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   47cb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   47cb4:	890d      	ldrh	r5, [r1, #8]
   47cb6:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   47cb8:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   47cba:	f024 041f 	bic.w	r4, r4, #31
   47cbe:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   47cc0:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   47cc4:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   47cc6:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   47cca:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   47cce:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   47cd0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   47cd4:	9303      	str	r3, [sp, #12]
   47cd6:	f7da fa25 	bl	22124 <region_allocate_and_init>
}
   47cda:	b005      	add	sp, #20
   47cdc:	bd30      	pop	{r4, r5, pc}

00047cde <_stdout_hook_default>:
}
   47cde:	f04f 30ff 	mov.w	r0, #4294967295
   47ce2:	4770      	bx	lr

00047ce4 <_stdin_hook_default>:
}
   47ce4:	2000      	movs	r0, #0
   47ce6:	4770      	bx	lr

00047ce8 <_read>:
{
   47ce8:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   47cea:	4611      	mov	r1, r2
   47cec:	f7da bc3c 	b.w	22568 <z_impl_zephyr_read_stdin>

00047cf0 <_write>:
{
   47cf0:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   47cf2:	4611      	mov	r1, r2
   47cf4:	f7da bc4c 	b.w	22590 <z_impl_zephyr_write_stdout>

00047cf8 <_close>:
   47cf8:	f04f 30ff 	mov.w	r0, #4294967295
   47cfc:	4770      	bx	lr

00047cfe <_lseek>:
}
   47cfe:	2000      	movs	r0, #0
   47d00:	4770      	bx	lr

00047d02 <_isatty>:
}
   47d02:	2001      	movs	r0, #1
   47d04:	4770      	bx	lr

00047d06 <_kill>:
}
   47d06:	2000      	movs	r0, #0
   47d08:	4770      	bx	lr

00047d0a <_getpid>:
}
   47d0a:	2000      	movs	r0, #0
   47d0c:	4770      	bx	lr

00047d0e <_fstat>:
	st->st_mode = S_IFCHR;
   47d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   47d12:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   47d14:	604b      	str	r3, [r1, #4]
}
   47d16:	4770      	bx	lr

00047d18 <__errno>:
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   47d18:	f7f5 b80c 	b.w	3cd34 <z_impl_z_errno>

00047d1c <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   47d1c:	b508      	push	{r3, lr}
	net_if_init();
   47d1e:	f7da fe75 	bl	22a0c <net_if_init>
	net_if_post_init();
   47d22:	f7da fe8b 	bl	22a3c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   47d26:	2000      	movs	r0, #0
   47d28:	bd08      	pop	{r3, pc}

00047d2a <l2_flags_get>:
	return iface->if_dev->l2;
   47d2a:	6803      	ldr	r3, [r0, #0]
   47d2c:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   47d2e:	b113      	cbz	r3, 47d36 <l2_flags_get+0xc>
   47d30:	68db      	ldr	r3, [r3, #12]
   47d32:	b103      	cbz	r3, 47d36 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   47d34:	4718      	bx	r3
}
   47d36:	2000      	movs	r0, #0
   47d38:	4770      	bx	lr

00047d3a <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   47d3a:	e9d0 2300 	ldrd	r2, r3, [r0]
   47d3e:	1a9b      	subs	r3, r3, r2
   47d40:	2b01      	cmp	r3, #1
{
   47d42:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   47d44:	d90c      	bls.n	47d60 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   47d46:	4614      	mov	r4, r2
   47d48:	1c53      	adds	r3, r2, #1
   47d4a:	6003      	str	r3, [r0, #0]
   47d4c:	f814 3b02 	ldrb.w	r3, [r4], #2
   47d50:	021b      	lsls	r3, r3, #8
   47d52:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   47d54:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   47d56:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   47d58:	7852      	ldrb	r2, [r2, #1]
   47d5a:	4313      	orrs	r3, r2
   47d5c:	800b      	strh	r3, [r1, #0]
}
   47d5e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   47d60:	f06f 0015 	mvn.w	r0, #21
   47d64:	e7fb      	b.n	47d5e <unpack_uint16+0x24>

00047d66 <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   47d66:	2300      	movs	r3, #0
{
   47d68:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   47d6a:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   47d6c:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   47d6e:	6804      	ldr	r4, [r0, #0]
   47d70:	42bc      	cmp	r4, r7
   47d72:	d215      	bcs.n	47da0 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   47d74:	4625      	mov	r5, r4
   47d76:	f815 2b01 	ldrb.w	r2, [r5], #1
   47d7a:	680e      	ldr	r6, [r1, #0]
   47d7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   47d80:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   47d82:	4432      	add	r2, r6
   47d84:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   47d86:	6005      	str	r5, [r0, #0]
   47d88:	f994 2000 	ldrsb.w	r2, [r4]
   47d8c:	2a00      	cmp	r2, #0
   47d8e:	db01      	blt.n	47d94 <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   47d90:	2000      	movs	r0, #0
}
   47d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   47d94:	3307      	adds	r3, #7
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   47d96:	2b23      	cmp	r3, #35	; 0x23
   47d98:	d1e9      	bne.n	47d6e <packet_length_decode+0x8>
			return -EINVAL;
   47d9a:	f06f 0015 	mvn.w	r0, #21
   47d9e:	e7f8      	b.n	47d92 <packet_length_decode+0x2c>
			return -EAGAIN;
   47da0:	f06f 000a 	mvn.w	r0, #10
   47da4:	e7f5      	b.n	47d92 <packet_length_decode+0x2c>

00047da6 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   47da6:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47da8:	e9d0 3500 	ldrd	r3, r5, [r0]
   47dac:	429d      	cmp	r5, r3
   47dae:	d007      	beq.n	47dc0 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   47db0:	1c5d      	adds	r5, r3, #1
   47db2:	6005      	str	r5, [r0, #0]
   47db4:	781b      	ldrb	r3, [r3, #0]
   47db6:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   47db8:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   47dba:	4611      	mov	r1, r2
   47dbc:	f7ff bfd3 	b.w	47d66 <packet_length_decode>
}
   47dc0:	f06f 0015 	mvn.w	r0, #21
   47dc4:	bc30      	pop	{r4, r5}
   47dc6:	4770      	bx	lr

00047dc8 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   47dc8:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47dca:	e9d1 3400 	ldrd	r3, r4, [r1]
   47dce:	42a3      	cmp	r3, r4
   47dd0:	d102      	bne.n	47dd8 <connect_ack_decode+0x10>
		return -EINVAL;
   47dd2:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   47dd6:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   47dd8:	1c5d      	adds	r5, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47dda:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   47ddc:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47dde:	d0f8      	beq.n	47dd2 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   47de0:	461d      	mov	r5, r3
   47de2:	f815 4b02 	ldrb.w	r4, [r5], #2
   47de6:	600d      	str	r5, [r1, #0]
   47de8:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   47dea:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   47dee:	7051      	strb	r1, [r2, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   47df0:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   47df2:	bf04      	itt	eq
   47df4:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   47df8:	7013      	strbeq	r3, [r2, #0]
	return 0;
   47dfa:	2000      	movs	r0, #0
   47dfc:	e7eb      	b.n	47dd6 <connect_ack_decode+0xe>

00047dfe <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   47dfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47e02:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   47e04:	7d9b      	ldrb	r3, [r3, #22]
{
   47e06:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   47e08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   47e0c:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   47e10:	f3c0 0041 	ubfx	r0, r0, #1, #2
   47e14:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   47e16:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   47e18:	f10d 0106 	add.w	r1, sp, #6
   47e1c:	4610      	mov	r0, r2
{
   47e1e:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   47e20:	f7ff ff8b 	bl	47d3a <unpack_uint16>
	if (err_code != 0) {
   47e24:	4607      	mov	r7, r0
   47e26:	b940      	cbnz	r0, 47e3a <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   47e28:	6833      	ldr	r3, [r6, #0]
   47e2a:	6872      	ldr	r2, [r6, #4]
   47e2c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   47e30:	1ad2      	subs	r2, r2, r3
   47e32:	42aa      	cmp	r2, r5
   47e34:	da05      	bge.n	47e42 <publish_decode+0x44>
		return -EINVAL;
   47e36:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   47e3a:	4638      	mov	r0, r7
   47e3c:	b002      	add	sp, #8
   47e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   47e42:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   47e44:	b15d      	cbz	r5, 47e5e <publish_decode+0x60>
		str->utf8 = buf->cur;
   47e46:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   47e48:	442b      	add	r3, r5
   47e4a:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   47e4c:	7a23      	ldrb	r3, [r4, #8]
   47e4e:	b943      	cbnz	r3, 47e62 <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   47e50:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   47e52:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   47e54:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   47e58:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   47e5a:	6125      	str	r5, [r4, #16]
	return 0;
   47e5c:	e7ed      	b.n	47e3a <publish_decode+0x3c>
		str->utf8 = NULL;
   47e5e:	6025      	str	r5, [r4, #0]
   47e60:	e7f4      	b.n	47e4c <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   47e62:	f104 0114 	add.w	r1, r4, #20
   47e66:	4630      	mov	r0, r6
   47e68:	f7ff ff67 	bl	47d3a <unpack_uint16>
		if (err_code != 0) {
   47e6c:	b908      	cbnz	r0, 47e72 <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   47e6e:	3504      	adds	r5, #4
   47e70:	e7ef      	b.n	47e52 <publish_decode+0x54>
   47e72:	4607      	mov	r7, r0
   47e74:	e7e1      	b.n	47e3a <publish_decode+0x3c>

00047e76 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   47e76:	f7ff bf60 	b.w	47d3a <unpack_uint16>

00047e7a <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   47e7a:	f7ff bf5e 	b.w	47d3a <unpack_uint16>

00047e7e <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   47e7e:	f7ff bf5c 	b.w	47d3a <unpack_uint16>

00047e82 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   47e82:	f7ff bf5a 	b.w	47d3a <unpack_uint16>

00047e86 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   47e86:	b538      	push	{r3, r4, r5, lr}
   47e88:	4605      	mov	r5, r0
   47e8a:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   47e8c:	f7ff ff55 	bl	47d3a <unpack_uint16>
	if (err_code != 0) {
   47e90:	b930      	cbnz	r0, 47ea0 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   47e92:	e9d5 2300 	ldrd	r2, r3, [r5]
   47e96:	1a99      	subs	r1, r3, r2
	str->len = length;
   47e98:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   47e9a:	b111      	cbz	r1, 47ea2 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   47e9c:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   47e9e:	602b      	str	r3, [r5, #0]
}
   47ea0:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   47ea2:	6060      	str	r0, [r4, #4]
   47ea4:	e7fc      	b.n	47ea0 <subscribe_ack_decode+0x1a>

00047ea6 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   47ea6:	f7ff bf48 	b.w	47d3a <unpack_uint16>

00047eaa <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   47eaa:	e9d1 3200 	ldrd	r3, r2, [r1]
   47eae:	1ad2      	subs	r2, r2, r3
   47eb0:	2a01      	cmp	r2, #1
   47eb2:	d909      	bls.n	47ec8 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   47eb4:	1c5a      	adds	r2, r3, #1
   47eb6:	600a      	str	r2, [r1, #0]
   47eb8:	0a02      	lsrs	r2, r0, #8
   47eba:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   47ebc:	680b      	ldr	r3, [r1, #0]
   47ebe:	1c5a      	adds	r2, r3, #1
   47ec0:	600a      	str	r2, [r1, #0]
   47ec2:	7018      	strb	r0, [r3, #0]
	return 0;
   47ec4:	2000      	movs	r0, #0
   47ec6:	4770      	bx	lr
		return -ENOMEM;
   47ec8:	f06f 000b 	mvn.w	r0, #11
}
   47ecc:	4770      	bx	lr

00047ece <pack_utf8_str>:
{
   47ece:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   47ed0:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   47ed4:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   47ed6:	6840      	ldr	r0, [r0, #4]
   47ed8:	1a9b      	subs	r3, r3, r2
   47eda:	1c82      	adds	r2, r0, #2
   47edc:	4293      	cmp	r3, r2
{
   47ede:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   47ee0:	d30d      	bcc.n	47efe <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   47ee2:	b280      	uxth	r0, r0
   47ee4:	f7ff ffe1 	bl	47eaa <pack_uint16>
   47ee8:	e9d5 1200 	ldrd	r1, r2, [r5]
   47eec:	6820      	ldr	r0, [r4, #0]
   47eee:	f7d1 ffdf 	bl	19eb0 <memcpy>
	return 0;
   47ef2:	2000      	movs	r0, #0
	buf->cur += str->size;
   47ef4:	6823      	ldr	r3, [r4, #0]
   47ef6:	686a      	ldr	r2, [r5, #4]
   47ef8:	4413      	add	r3, r2
   47efa:	6023      	str	r3, [r4, #0]
}
   47efc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   47efe:	f06f 000b 	mvn.w	r0, #11
   47f02:	e7fb      	b.n	47efc <pack_utf8_str+0x2e>

00047f04 <mqtt_encode_fixed_header>:
{
   47f04:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   47f06:	6815      	ldr	r5, [r2, #0]
   47f08:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   47f0a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   47f0e:	d227      	bcs.n	47f60 <mqtt_encode_fixed_header+0x5c>
   47f10:	462c      	mov	r4, r5
   47f12:	2600      	movs	r6, #0
	} while (length > 0);
   47f14:	09e4      	lsrs	r4, r4, #7
   47f16:	b2f3      	uxtb	r3, r6
   47f18:	f106 0601 	add.w	r6, r6, #1
   47f1c:	d1fa      	bne.n	47f14 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   47f1e:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   47f20:	b2db      	uxtb	r3, r3
   47f22:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47f24:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   47f26:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   47f28:	42a6      	cmp	r6, r4
	buf->cur = start - fixed_header_length;
   47f2a:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   47f2c:	bf1e      	ittt	ne
   47f2e:	3401      	addne	r4, #1
   47f30:	6014      	strne	r4, [r2, #0]
   47f32:	54c8      	strbne	r0, [r1, r3]
   47f34:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   47f36:	6811      	ldr	r1, [r2, #0]
   47f38:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   47f3c:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   47f3e:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   47f40:	bf1f      	itttt	ne
   47f42:	6814      	ldrne	r4, [r2, #0]
   47f44:	7821      	ldrbne	r1, [r4, #0]
   47f46:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   47f4a:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   47f4c:	6811      	ldr	r1, [r2, #0]
   47f4e:	3101      	adds	r1, #1
   47f50:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   47f52:	2800      	cmp	r0, #0
   47f54:	d1ef      	bne.n	47f36 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   47f56:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   47f58:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   47f5a:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   47f5c:	6051      	str	r1, [r2, #4]
}
   47f5e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   47f60:	f06f 0079 	mvn.w	r0, #121	; 0x79
   47f64:	e7fb      	b.n	47f5e <mqtt_encode_fixed_header+0x5a>

00047f66 <mqtt_message_id_only_enc>:
{
   47f66:	b570      	push	{r4, r5, r6, lr}
   47f68:	4606      	mov	r6, r0
   47f6a:	4615      	mov	r5, r2
	if (message_id == 0U) {
   47f6c:	4608      	mov	r0, r1
   47f6e:	b169      	cbz	r1, 47f8c <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   47f70:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   47f72:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   47f74:	3405      	adds	r4, #5
   47f76:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   47f78:	f7ff ff97 	bl	47eaa <pack_uint16>
	if (err_code != 0) {
   47f7c:	b940      	cbnz	r0, 47f90 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   47f7e:	462a      	mov	r2, r5
   47f80:	4621      	mov	r1, r4
   47f82:	4630      	mov	r0, r6
}
   47f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   47f88:	f7ff bfbc 	b.w	47f04 <mqtt_encode_fixed_header>
		return -EINVAL;
   47f8c:	f06f 0015 	mvn.w	r0, #21
}
   47f90:	bd70      	pop	{r4, r5, r6, pc}

00047f92 <publish_encode>:
{
   47f92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   47f96:	7d86      	ldrb	r6, [r0, #22]
   47f98:	f890 8008 	ldrb.w	r8, [r0, #8]
   47f9c:	f006 0901 	and.w	r9, r6, #1
{
   47fa0:	4605      	mov	r5, r0
   47fa2:	460c      	mov	r4, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   47fa4:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   47fa8:	f1b8 0f00 	cmp.w	r8, #0
   47fac:	d001      	beq.n	47fb2 <publish_encode+0x20>
   47fae:	8a83      	ldrh	r3, [r0, #20]
   47fb0:	b34b      	cbz	r3, 48006 <publish_encode+0x74>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   47fb2:	6827      	ldr	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   47fb4:	4621      	mov	r1, r4
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   47fb6:	3705      	adds	r7, #5
   47fb8:	6027      	str	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   47fba:	4628      	mov	r0, r5
   47fbc:	f7ff ff87 	bl	47ece <pack_utf8_str>
	if (err_code != 0) {
   47fc0:	b998      	cbnz	r0, 47fea <publish_encode+0x58>
	if (param->message.topic.qos) {
   47fc2:	7a2b      	ldrb	r3, [r5, #8]
   47fc4:	b99b      	cbnz	r3, 47fee <publish_encode+0x5c>
	buf->cur += param->message.payload.len;
   47fc6:	692a      	ldr	r2, [r5, #16]
   47fc8:	6823      	ldr	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   47fca:	f046 0030 	orr.w	r0, r6, #48	; 0x30
	buf->cur += param->message.payload.len;
   47fce:	4413      	add	r3, r2
   47fd0:	6023      	str	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   47fd2:	ea4f 0348 	mov.w	r3, r8, lsl #1
   47fd6:	ea40 00c9 	orr.w	r0, r0, r9, lsl #3
   47fda:	f003 0306 	and.w	r3, r3, #6
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   47fde:	4622      	mov	r2, r4
   47fe0:	4639      	mov	r1, r7
   47fe2:	4318      	orrs	r0, r3
   47fe4:	f7ff ff8e 	bl	47f04 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   47fe8:	b140      	cbz	r0, 47ffc <publish_encode+0x6a>
}
   47fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   47fee:	4621      	mov	r1, r4
   47ff0:	8aa8      	ldrh	r0, [r5, #20]
   47ff2:	f7ff ff5a 	bl	47eaa <pack_uint16>
		if (err_code != 0) {
   47ff6:	2800      	cmp	r0, #0
   47ff8:	d0e5      	beq.n	47fc6 <publish_encode+0x34>
   47ffa:	e7f6      	b.n	47fea <publish_encode+0x58>
	buf->end -= param->message.payload.len;
   47ffc:	6863      	ldr	r3, [r4, #4]
   47ffe:	692a      	ldr	r2, [r5, #16]
   48000:	1a9b      	subs	r3, r3, r2
   48002:	6063      	str	r3, [r4, #4]
	return 0;
   48004:	e7f1      	b.n	47fea <publish_encode+0x58>
		return -EINVAL;
   48006:	f06f 0015 	mvn.w	r0, #21
   4800a:	e7ee      	b.n	47fea <publish_encode+0x58>

0004800c <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   4800c:	460a      	mov	r2, r1
   4800e:	8801      	ldrh	r1, [r0, #0]
   48010:	2040      	movs	r0, #64	; 0x40
   48012:	f7ff bfa8 	b.w	47f66 <mqtt_message_id_only_enc>

00048016 <subscribe_encode>:
{
   48016:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4801a:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   4801c:	88c0      	ldrh	r0, [r0, #6]
{
   4801e:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   48020:	b330      	cbz	r0, 48070 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   48022:	680e      	ldr	r6, [r1, #0]
   48024:	3605      	adds	r6, #5
   48026:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   48028:	f7ff ff3f 	bl	47eaa <pack_uint16>
	if (err_code != 0) {
   4802c:	4604      	mov	r4, r0
   4802e:	bb08      	cbnz	r0, 48074 <subscribe_encode+0x5e>
   48030:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   48034:	88bb      	ldrh	r3, [r7, #4]
   48036:	42a3      	cmp	r3, r4
   48038:	dc06      	bgt.n	48048 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   4803a:	462a      	mov	r2, r5
   4803c:	4631      	mov	r1, r6
}
   4803e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   48042:	2082      	movs	r0, #130	; 0x82
   48044:	f7ff bf5e 	b.w	47f04 <mqtt_encode_fixed_header>
   48048:	fb09 f804 	mul.w	r8, r9, r4
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   4804c:	6838      	ldr	r0, [r7, #0]
   4804e:	4629      	mov	r1, r5
   48050:	4440      	add	r0, r8
   48052:	f7ff ff3c 	bl	47ece <pack_utf8_str>
		if (err_code != 0) {
   48056:	b980      	cbnz	r0, 4807a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   48058:	683b      	ldr	r3, [r7, #0]
   4805a:	4443      	add	r3, r8
   4805c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   4805e:	e9d5 3100 	ldrd	r3, r1, [r5]
   48062:	4299      	cmp	r1, r3
   48064:	d00b      	beq.n	4807e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   48066:	1c59      	adds	r1, r3, #1
   48068:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   4806a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   4806c:	701a      	strb	r2, [r3, #0]
   4806e:	e7e1      	b.n	48034 <subscribe_encode+0x1e>
		return -EINVAL;
   48070:	f06f 0415 	mvn.w	r4, #21
}
   48074:	4620      	mov	r0, r4
   48076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   4807a:	4604      	mov	r4, r0
   4807c:	e7fa      	b.n	48074 <subscribe_encode+0x5e>
		return -ENOMEM;
   4807e:	f06f 040b 	mvn.w	r4, #11
   48082:	e7f7      	b.n	48074 <subscribe_encode+0x5e>

00048084 <unsubscribe_encode>:
{
   48084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   48088:	680d      	ldr	r5, [r1, #0]
{
   4808a:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   4808c:	3505      	adds	r5, #5
   4808e:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   48090:	88c0      	ldrh	r0, [r0, #6]
{
   48092:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   48094:	f7ff ff09 	bl	47eaa <pack_uint16>
	if (err_code != 0) {
   48098:	4604      	mov	r4, r0
   4809a:	b9a8      	cbnz	r0, 480c8 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   4809c:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   480a0:	88bb      	ldrh	r3, [r7, #4]
   480a2:	42a3      	cmp	r3, r4
   480a4:	dc06      	bgt.n	480b4 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   480a6:	4632      	mov	r2, r6
   480a8:	4629      	mov	r1, r5
}
   480aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   480ae:	20a2      	movs	r0, #162	; 0xa2
   480b0:	f7ff bf28 	b.w	47f04 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   480b4:	6838      	ldr	r0, [r7, #0]
   480b6:	4631      	mov	r1, r6
   480b8:	fb08 0004 	mla	r0, r8, r4, r0
   480bc:	f7ff ff07 	bl	47ece <pack_utf8_str>
		if (err_code != 0) {
   480c0:	b908      	cbnz	r0, 480c6 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   480c2:	3401      	adds	r4, #1
   480c4:	e7ec      	b.n	480a0 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   480c6:	4604      	mov	r4, r0
}
   480c8:	4620      	mov	r0, r4
   480ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000480ce <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   480ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   480d0:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   480d2:	e9d1 4100 	ldrd	r4, r1, [r1]
   480d6:	1b0c      	subs	r4, r1, r4
   480d8:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   480da:	2c00      	cmp	r4, #0
{
   480dc:	4606      	mov	r6, r0
	if (remaining <= 0) {
   480de:	dc01      	bgt.n	480e4 <mqtt_read_message_chunk+0x16>
		return 0;
   480e0:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   480e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   480e4:	190a      	adds	r2, r1, r4
   480e6:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   480ea:	443b      	add	r3, r7
   480ec:	429a      	cmp	r2, r3
   480ee:	d811      	bhi.n	48114 <mqtt_read_message_chunk+0x46>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   480f0:	2300      	movs	r3, #0
   480f2:	4622      	mov	r2, r4
   480f4:	f7da fe92 	bl	22e1c <mqtt_transport_read>
	if (len < 0) {
   480f8:	2800      	cmp	r0, #0
   480fa:	dbf2      	blt.n	480e2 <mqtt_read_message_chunk+0x14>
	if (len == 0) {
   480fc:	d00d      	beq.n	4811a <mqtt_read_message_chunk+0x4c>
	client->internal.rx_buf_datalen += len;
   480fe:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   48100:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   48102:	4403      	add	r3, r0
   48104:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   48106:	686b      	ldr	r3, [r5, #4]
   48108:	4403      	add	r3, r0
   4810a:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   4810c:	dde8      	ble.n	480e0 <mqtt_read_message_chunk+0x12>
		return -EAGAIN;
   4810e:	f06f 000a 	mvn.w	r0, #10
   48112:	e7e6      	b.n	480e2 <mqtt_read_message_chunk+0x14>
		return -ENOMEM;
   48114:	f06f 000b 	mvn.w	r0, #11
   48118:	e7e3      	b.n	480e2 <mqtt_read_message_chunk+0x14>
		return -ENOTCONN;
   4811a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4811e:	e7e0      	b.n	480e2 <mqtt_read_message_chunk+0x14>

00048120 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   48120:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   48122:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   48124:	69c2      	ldr	r2, [r0, #28]
{
   48126:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   48128:	9302      	str	r3, [sp, #8]
{
   4812a:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   4812c:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   4812e:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   48130:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   48132:	a902      	add	r1, sp, #8
   48134:	4628      	mov	r0, r5
   48136:	f7ff ffca 	bl	480ce <mqtt_read_message_chunk>
		if (err_code < 0) {
   4813a:	1e04      	subs	r4, r0, #0
   4813c:	db2b      	blt.n	48196 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   4813e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   48140:	aa01      	add	r2, sp, #4
   48142:	f10d 0103 	add.w	r1, sp, #3
   48146:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   48148:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   4814a:	f7ff fe2c 	bl	47da6 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   4814e:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   48152:	4604      	mov	r4, r0
		chunk_size = 1U;
   48154:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   48158:	d0eb      	beq.n	48132 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   4815a:	2800      	cmp	r0, #0
   4815c:	db1f      	blt.n	4819e <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   4815e:	f89d 6003 	ldrb.w	r6, [sp, #3]
   48162:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   48166:	2b30      	cmp	r3, #48	; 0x30
   48168:	d11c      	bne.n	481a4 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   4816a:	2202      	movs	r2, #2
   4816c:	a902      	add	r1, sp, #8
   4816e:	4628      	mov	r0, r5
   48170:	f7ff ffad 	bl	480ce <mqtt_read_message_chunk>
	if (err_code < 0) {
   48174:	1e04      	subs	r4, r0, #0
   48176:	db0e      	blt.n	48196 <mqtt_handle_rx+0x76>
   48178:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   4817a:	f016 0f06 	tst.w	r6, #6
   4817e:	881a      	ldrh	r2, [r3, #0]
   48180:	ba52      	rev16	r2, r2
   48182:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   48184:	bf0c      	ite	eq
   48186:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   48188:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   4818a:	a902      	add	r1, sp, #8
   4818c:	4628      	mov	r0, r5
   4818e:	f7ff ff9e 	bl	480ce <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   48192:	1e04      	subs	r4, r0, #0
   48194:	da08      	bge.n	481a8 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   48196:	f114 0f0b 	cmn.w	r4, #11
   4819a:	d100      	bne.n	4819e <mqtt_handle_rx+0x7e>
   4819c:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   4819e:	4620      	mov	r0, r4
   481a0:	b00c      	add	sp, #48	; 0x30
   481a2:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   481a4:	9a01      	ldr	r2, [sp, #4]
   481a6:	e7f0      	b.n	4818a <mqtt_handle_rx+0x6a>
	evt.result = 0;
   481a8:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   481aa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   481ae:	9901      	ldr	r1, [sp, #4]
	switch (type_and_flags & 0xF0) {
   481b0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   481b4:	2b50      	cmp	r3, #80	; 0x50
	evt.result = 0;
   481b6:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   481b8:	d04a      	beq.n	48250 <mqtt_handle_rx+0x130>
   481ba:	d81e      	bhi.n	481fa <mqtt_handle_rx+0xda>
   481bc:	2b30      	cmp	r3, #48	; 0x30
   481be:	d031      	beq.n	48224 <mqtt_handle_rx+0x104>
   481c0:	2b40      	cmp	r3, #64	; 0x40
   481c2:	d03b      	beq.n	4823c <mqtt_handle_rx+0x11c>
   481c4:	2b20      	cmp	r3, #32
   481c6:	d11d      	bne.n	48204 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_CONNACK;
   481c8:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   481cc:	a902      	add	r1, sp, #8
   481ce:	aa05      	add	r2, sp, #20
   481d0:	4628      	mov	r0, r5
   481d2:	f7ff fdf9 	bl	47dc8 <connect_ack_decode>
		if (err_code == 0) {
   481d6:	4604      	mov	r4, r0
   481d8:	2800      	cmp	r0, #0
   481da:	d137      	bne.n	4824c <mqtt_handle_rx+0x12c>
			if (evt.param.connack.return_code ==
   481dc:	f89d 2015 	ldrb.w	r2, [sp, #21]
   481e0:	b91a      	cbnz	r2, 481ea <mqtt_handle_rx+0xca>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   481e2:	69ab      	ldr	r3, [r5, #24]
   481e4:	f043 0304 	orr.w	r3, r3, #4
   481e8:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   481ea:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   481ec:	a904      	add	r1, sp, #16
   481ee:	4628      	mov	r0, r5
   481f0:	f000 f869 	bl	482c6 <event_notify>
	if (err_code < 0) {
   481f4:	2c00      	cmp	r4, #0
   481f6:	da05      	bge.n	48204 <mqtt_handle_rx+0xe4>
   481f8:	e7d1      	b.n	4819e <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   481fa:	2b70      	cmp	r3, #112	; 0x70
   481fc:	d038      	beq.n	48270 <mqtt_handle_rx+0x150>
   481fe:	d804      	bhi.n	4820a <mqtt_handle_rx+0xea>
   48200:	2b60      	cmp	r3, #96	; 0x60
   48202:	d02d      	beq.n	48260 <mqtt_handle_rx+0x140>
	client->internal.rx_buf_datalen = 0U;
   48204:	2400      	movs	r4, #0
   48206:	61ec      	str	r4, [r5, #28]
	return 0;
   48208:	e7c9      	b.n	4819e <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   4820a:	2b90      	cmp	r3, #144	; 0x90
   4820c:	d038      	beq.n	48280 <mqtt_handle_rx+0x160>
   4820e:	2bb0      	cmp	r3, #176	; 0xb0
   48210:	d1f8      	bne.n	48204 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_UNSUBACK;
   48212:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   48214:	a905      	add	r1, sp, #20
   48216:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   4821a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   4821e:	f7ff fe42 	bl	47ea6 <unsubscribe_ack_decode>
   48222:	e012      	b.n	4824a <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBLISH;
   48224:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   48226:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   48228:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   4822c:	ab05      	add	r3, sp, #20
   4822e:	f7ff fde6 	bl	47dfe <publish_decode>
		client->internal.remaining_payload =
   48232:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   48234:	4604      	mov	r4, r0
		evt.result = err_code;
   48236:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   48238:	622b      	str	r3, [r5, #32]
   4823a:	e7d7      	b.n	481ec <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBACK;
   4823c:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   4823e:	a905      	add	r1, sp, #20
   48240:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   48242:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   48246:	f7ff fe16 	bl	47e76 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   4824a:	4604      	mov	r4, r0
		evt.result = err_code;
   4824c:	940b      	str	r4, [sp, #44]	; 0x2c
   4824e:	e7cd      	b.n	481ec <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBREC;
   48250:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   48252:	a905      	add	r1, sp, #20
   48254:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   48256:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   4825a:	f7ff fe0e 	bl	47e7a <publish_receive_decode>
   4825e:	e7f4      	b.n	4824a <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBREL;
   48260:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   48262:	a905      	add	r1, sp, #20
   48264:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   48266:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   4826a:	f7ff fe08 	bl	47e7e <publish_release_decode>
   4826e:	e7ec      	b.n	4824a <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBCOMP;
   48270:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   48272:	a905      	add	r1, sp, #20
   48274:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   48276:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   4827a:	f7ff fe02 	bl	47e82 <publish_complete_decode>
   4827e:	e7e4      	b.n	4824a <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_SUBACK;
   48280:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   48282:	a905      	add	r1, sp, #20
   48284:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   48286:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   4828a:	f7ff fdfc 	bl	47e86 <subscribe_ack_decode>
   4828e:	e7dc      	b.n	4824a <mqtt_handle_rx+0x12a>

00048290 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   48290:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   48292:	6a80      	ldr	r0, [r0, #40]	; 0x28
   48294:	f7da fc8e 	bl	22bb4 <close>
	if (ret < 0) {
   48298:	2800      	cmp	r0, #0
   4829a:	da04      	bge.n	482a6 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   4829c:	f7ff fd3c 	bl	47d18 <__errno>
   482a0:	6800      	ldr	r0, [r0, #0]
   482a2:	4240      	negs	r0, r0
	}

	return 0;
}
   482a4:	bd08      	pop	{r3, pc}
	return 0;
   482a6:	2000      	movs	r0, #0
   482a8:	e7fc      	b.n	482a4 <mqtt_client_tcp_disconnect+0x14>

000482aa <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   482aa:	b538      	push	{r3, r4, r5, lr}
   482ac:	4604      	mov	r4, r0
   482ae:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   482b0:	6f02      	ldr	r2, [r0, #112]	; 0x70
   482b2:	2100      	movs	r1, #0
   482b4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   482b6:	f7f8 febf 	bl	41038 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   482ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   482bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   482be:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   482c0:	4413      	add	r3, r2
   482c2:	606b      	str	r3, [r5, #4]
}
   482c4:	bd38      	pop	{r3, r4, r5, pc}

000482c6 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   482c6:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   482c8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   482ca:	4604      	mov	r4, r0
   482cc:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   482ce:	b153      	cbz	r3, 482e6 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   482d0:	f7da fdba 	bl	22e48 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   482d4:	4620      	mov	r0, r4
   482d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   482d8:	4629      	mov	r1, r5
   482da:	4798      	blx	r3

		mqtt_mutex_lock(client);
   482dc:	4620      	mov	r0, r4
	}
}
   482de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   482e2:	f7da bddd 	b.w	22ea0 <mqtt_mutex_lock>
}
   482e6:	bd38      	pop	{r3, r4, r5, pc}

000482e8 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   482e8:	b530      	push	{r4, r5, lr}
   482ea:	4604      	mov	r4, r0
   482ec:	b089      	sub	sp, #36	; 0x24
   482ee:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   482f0:	f7da fda0 	bl	22e34 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   482f4:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   482f6:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   482f8:	f013 030c 	ands.w	r3, r3, #12
		evt.type = MQTT_EVT_DISCONNECT;
   482fc:	bf12      	itee	ne
   482fe:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   48300:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   48304:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   48308:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   4830a:	bf16      	itet	ne
   4830c:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   48310:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   48312:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   48314:	f7ff ffd7 	bl	482c6 <event_notify>
	MQTT_STATE_INIT(client);
   48318:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   4831a:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   4831e:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   48322:	b009      	add	sp, #36	; 0x24
   48324:	bd30      	pop	{r4, r5, pc}

00048326 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   48326:	b538      	push	{r3, r4, r5, lr}
   48328:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   4832a:	f7da fd6b 	bl	22e04 <mqtt_transport_write>
	if (err_code < 0) {
   4832e:	1e04      	subs	r4, r0, #0
   48330:	da05      	bge.n	4833e <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   48332:	4621      	mov	r1, r4
   48334:	4628      	mov	r0, r5
   48336:	f7ff ffd7 	bl	482e8 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   4833a:	4620      	mov	r0, r4
   4833c:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   4833e:	f001 ff63 	bl	4a208 <z_impl_k_uptime_get>
	return 0;
   48342:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   48344:	6168      	str	r0, [r5, #20]
   48346:	e7f8      	b.n	4833a <client_write+0x14>

00048348 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   48348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4834c:	460f      	mov	r7, r1
   4834e:	4690      	mov	r8, r2
   48350:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   48352:	4605      	mov	r5, r0
   48354:	b320      	cbz	r0, 483a0 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   48356:	f7da fda3 	bl	22ea0 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   4835a:	6a2c      	ldr	r4, [r5, #32]
   4835c:	b1b4      	cbz	r4, 4838c <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   4835e:	4544      	cmp	r4, r8
   48360:	4622      	mov	r2, r4
   48362:	4633      	mov	r3, r6
   48364:	bf28      	it	cs
   48366:	4642      	movcs	r2, r8
   48368:	4639      	mov	r1, r7
   4836a:	4628      	mov	r0, r5
   4836c:	f7da fd56 	bl	22e1c <mqtt_transport_read>
   48370:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   48372:	b916      	cbnz	r6, 4837a <read_publish_payload+0x32>
   48374:	f110 0f0b 	cmn.w	r0, #11
   48378:	d008      	beq.n	4838c <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   4837a:	2c00      	cmp	r4, #0
   4837c:	dc0c      	bgt.n	48398 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   4837e:	bf08      	it	eq
   48380:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   48384:	4628      	mov	r0, r5
   48386:	4621      	mov	r1, r4
   48388:	f7ff ffae 	bl	482e8 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   4838c:	4628      	mov	r0, r5
   4838e:	f7da fd5b 	bl	22e48 <mqtt_mutex_unlock>

	return ret;
}
   48392:	4620      	mov	r0, r4
   48394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   48398:	6a2b      	ldr	r3, [r5, #32]
   4839a:	1b1b      	subs	r3, r3, r4
   4839c:	622b      	str	r3, [r5, #32]
   4839e:	e7f5      	b.n	4838c <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   483a0:	f06f 0415 	mvn.w	r4, #21
   483a4:	e7f5      	b.n	48392 <read_publish_payload+0x4a>

000483a6 <mqtt_client_init>:
{
   483a6:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   483a8:	4604      	mov	r4, r0
   483aa:	b1a8      	cbz	r0, 483d8 <mqtt_client_init+0x32>
   483ac:	2278      	movs	r2, #120	; 0x78
   483ae:	2100      	movs	r1, #0
   483b0:	f7f8 fe42 	bl	41038 <memset>
	MQTT_STATE_INIT(client);
   483b4:	2300      	movs	r3, #0
   483b6:	61a3      	str	r3, [r4, #24]
	z_impl_k_mutex_init(mutex);
   483b8:	4620      	mov	r0, r4
   483ba:	f001 fe2c 	bl	4a016 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   483be:	2304      	movs	r3, #4
   483c0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	client->clean_session = 1U;
   483c4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   483c8:	f043 0302 	orr.w	r3, r3, #2
   483cc:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	client->keepalive = MQTT_KEEPALIVE;
   483d0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   483d4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   483d8:	bd10      	pop	{r4, pc}

000483da <mqtt_connect>:
{
   483da:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   483dc:	4604      	mov	r4, r0
   483de:	2800      	cmp	r0, #0
   483e0:	d03a      	beq.n	48458 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   483e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   483e4:	2b00      	cmp	r3, #0
   483e6:	d037      	beq.n	48458 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   483e8:	f7da fd5a 	bl	22ea0 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   483ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   483ee:	b383      	cbz	r3, 48452 <mqtt_connect+0x78>
   483f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   483f2:	b373      	cbz	r3, 48452 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   483f4:	4620      	mov	r0, r4
   483f6:	f7da fcfd 	bl	22df4 <mqtt_transport_connect>
	if (err_code < 0) {
   483fa:	1e05      	subs	r5, r0, #0
   483fc:	db23      	blt.n	48446 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   483fe:	4669      	mov	r1, sp
   48400:	4620      	mov	r0, r4
   48402:	f7ff ff52 	bl	482aa <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   48406:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   48408:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   4840a:	f043 0302 	orr.w	r3, r3, #2
   4840e:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   48410:	4620      	mov	r0, r4
   48412:	f7da fb2b 	bl	22a6c <connect_request_encode>
	if (err_code < 0) {
   48416:	1e05      	subs	r5, r0, #0
   48418:	db11      	blt.n	4843e <mqtt_connect+0x64>
	err_code = mqtt_transport_write(client, packet.cur,
   4841a:	e9dd 1200 	ldrd	r1, r2, [sp]
   4841e:	4620      	mov	r0, r4
   48420:	1a52      	subs	r2, r2, r1
   48422:	f7da fcef 	bl	22e04 <mqtt_transport_write>
	if (err_code < 0) {
   48426:	1e05      	subs	r5, r0, #0
   48428:	db09      	blt.n	4843e <mqtt_connect+0x64>
	return z_impl_k_uptime_get();
   4842a:	f001 feed 	bl	4a208 <z_impl_k_uptime_get>
	return 0;
   4842e:	2500      	movs	r5, #0
   48430:	6160      	str	r0, [r4, #20]
	mqtt_mutex_unlock(client);
   48432:	4620      	mov	r0, r4
   48434:	f7da fd08 	bl	22e48 <mqtt_mutex_unlock>
}
   48438:	4628      	mov	r0, r5
   4843a:	b003      	add	sp, #12
   4843c:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   4843e:	4629      	mov	r1, r5
   48440:	4620      	mov	r0, r4
   48442:	f7ff ff51 	bl	482e8 <client_disconnect>
	MQTT_STATE_INIT(client);
   48446:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   48448:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   4844c:	e9c4 3307 	strd	r3, r3, [r4, #28]
   48450:	e7ef      	b.n	48432 <mqtt_connect+0x58>
		err_code = -ENOMEM;
   48452:	f06f 050b 	mvn.w	r5, #11
   48456:	e7f6      	b.n	48446 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   48458:	f06f 0515 	mvn.w	r5, #21
   4845c:	e7ec      	b.n	48438 <mqtt_connect+0x5e>

0004845e <mqtt_publish>:
{
   4845e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   48460:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   48462:	4605      	mov	r5, r0
   48464:	b330      	cbz	r0, 484b4 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   48466:	b329      	cbz	r1, 484b4 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   48468:	f7da fd1a 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4846c:	4669      	mov	r1, sp
   4846e:	4628      	mov	r0, r5
   48470:	f7ff ff1b 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   48474:	69ab      	ldr	r3, [r5, #24]
   48476:	075b      	lsls	r3, r3, #29
   48478:	d519      	bpl.n	484ae <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   4847a:	4669      	mov	r1, sp
   4847c:	4630      	mov	r0, r6
   4847e:	f7ff fd88 	bl	47f92 <publish_encode>
	if (err_code < 0) {
   48482:	1e04      	subs	r4, r0, #0
   48484:	db0d      	blt.n	484a2 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   48486:	e9dd 1200 	ldrd	r1, r2, [sp]
   4848a:	4628      	mov	r0, r5
   4848c:	1a52      	subs	r2, r2, r1
   4848e:	f7ff ff4a 	bl	48326 <client_write>
	if (err_code < 0) {
   48492:	1e04      	subs	r4, r0, #0
   48494:	db05      	blt.n	484a2 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   48496:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   4849a:	4628      	mov	r0, r5
   4849c:	f7ff ff43 	bl	48326 <client_write>
   484a0:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   484a2:	4628      	mov	r0, r5
   484a4:	f7da fcd0 	bl	22e48 <mqtt_mutex_unlock>
}
   484a8:	4620      	mov	r0, r4
   484aa:	b002      	add	sp, #8
   484ac:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   484ae:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   484b2:	e7f6      	b.n	484a2 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   484b4:	f06f 0415 	mvn.w	r4, #21
   484b8:	e7f6      	b.n	484a8 <mqtt_publish+0x4a>

000484ba <mqtt_publish_qos1_ack>:
{
   484ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   484bc:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   484be:	4605      	mov	r5, r0
   484c0:	b1f8      	cbz	r0, 48502 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   484c2:	b1f1      	cbz	r1, 48502 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   484c4:	f7da fcec 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   484c8:	4669      	mov	r1, sp
   484ca:	4628      	mov	r0, r5
   484cc:	f7ff feed 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   484d0:	69ab      	ldr	r3, [r5, #24]
   484d2:	075b      	lsls	r3, r3, #29
   484d4:	d512      	bpl.n	484fc <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   484d6:	4620      	mov	r0, r4
   484d8:	4669      	mov	r1, sp
   484da:	f7ff fd97 	bl	4800c <publish_ack_encode>
	if (err_code < 0) {
   484de:	1e04      	subs	r4, r0, #0
   484e0:	db06      	blt.n	484f0 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   484e2:	e9dd 1200 	ldrd	r1, r2, [sp]
   484e6:	4628      	mov	r0, r5
   484e8:	1a52      	subs	r2, r2, r1
   484ea:	f7ff ff1c 	bl	48326 <client_write>
   484ee:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   484f0:	4628      	mov	r0, r5
   484f2:	f7da fca9 	bl	22e48 <mqtt_mutex_unlock>
}
   484f6:	4620      	mov	r0, r4
   484f8:	b003      	add	sp, #12
   484fa:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   484fc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   48500:	e7f6      	b.n	484f0 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   48502:	f06f 0415 	mvn.w	r4, #21
   48506:	e7f6      	b.n	484f6 <mqtt_publish_qos1_ack+0x3c>

00048508 <mqtt_disconnect>:
{
   48508:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   4850a:	4604      	mov	r4, r0
   4850c:	b300      	cbz	r0, 48550 <mqtt_disconnect+0x48>
	mqtt_mutex_lock(client);
   4850e:	f7da fcc7 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   48512:	4669      	mov	r1, sp
   48514:	4620      	mov	r0, r4
   48516:	f7ff fec8 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4851a:	69a3      	ldr	r3, [r4, #24]
   4851c:	075b      	lsls	r3, r3, #29
   4851e:	d514      	bpl.n	4854a <mqtt_disconnect+0x42>
	err_code = disconnect_encode(&packet);
   48520:	4668      	mov	r0, sp
   48522:	f7da fb23 	bl	22b6c <disconnect_encode>
	if (err_code < 0) {
   48526:	1e05      	subs	r5, r0, #0
   48528:	db09      	blt.n	4853e <mqtt_disconnect+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4852a:	e9dd 1200 	ldrd	r1, r2, [sp]
   4852e:	4620      	mov	r0, r4
   48530:	1a52      	subs	r2, r2, r1
   48532:	f7ff fef8 	bl	48326 <client_write>
	if (err_code < 0) {
   48536:	1e05      	subs	r5, r0, #0
   48538:	db01      	blt.n	4853e <mqtt_disconnect+0x36>
	MQTT_SET_STATE_EXCLUSIVE(client, MQTT_STATE_DISCONNECTING);
   4853a:	2308      	movs	r3, #8
   4853c:	61a3      	str	r3, [r4, #24]
	mqtt_mutex_unlock(client);
   4853e:	4620      	mov	r0, r4
   48540:	f7da fc82 	bl	22e48 <mqtt_mutex_unlock>
}
   48544:	4628      	mov	r0, r5
   48546:	b003      	add	sp, #12
   48548:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   4854a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   4854e:	e7f6      	b.n	4853e <mqtt_disconnect+0x36>
	NULL_PARAM_CHECK(client);
   48550:	f06f 0515 	mvn.w	r5, #21
   48554:	e7f6      	b.n	48544 <mqtt_disconnect+0x3c>

00048556 <mqtt_subscribe>:
{
   48556:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48558:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   4855a:	4605      	mov	r5, r0
   4855c:	b1f8      	cbz	r0, 4859e <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   4855e:	b1f1      	cbz	r1, 4859e <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   48560:	f7da fc9e 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   48564:	4669      	mov	r1, sp
   48566:	4628      	mov	r0, r5
   48568:	f7ff fe9f 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4856c:	69ab      	ldr	r3, [r5, #24]
   4856e:	075b      	lsls	r3, r3, #29
   48570:	d512      	bpl.n	48598 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   48572:	4620      	mov	r0, r4
   48574:	4669      	mov	r1, sp
   48576:	f7ff fd4e 	bl	48016 <subscribe_encode>
	if (err_code < 0) {
   4857a:	1e04      	subs	r4, r0, #0
   4857c:	db06      	blt.n	4858c <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4857e:	e9dd 1200 	ldrd	r1, r2, [sp]
   48582:	4628      	mov	r0, r5
   48584:	1a52      	subs	r2, r2, r1
   48586:	f7ff fece 	bl	48326 <client_write>
   4858a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4858c:	4628      	mov	r0, r5
   4858e:	f7da fc5b 	bl	22e48 <mqtt_mutex_unlock>
}
   48592:	4620      	mov	r0, r4
   48594:	b003      	add	sp, #12
   48596:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   48598:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4859c:	e7f6      	b.n	4858c <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   4859e:	f06f 0415 	mvn.w	r4, #21
   485a2:	e7f6      	b.n	48592 <mqtt_subscribe+0x3c>

000485a4 <mqtt_unsubscribe>:
{
   485a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   485a6:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   485a8:	4605      	mov	r5, r0
   485aa:	b1f8      	cbz	r0, 485ec <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   485ac:	b1f1      	cbz	r1, 485ec <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   485ae:	f7da fc77 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   485b2:	4669      	mov	r1, sp
   485b4:	4628      	mov	r0, r5
   485b6:	f7ff fe78 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   485ba:	69ab      	ldr	r3, [r5, #24]
   485bc:	075b      	lsls	r3, r3, #29
   485be:	d512      	bpl.n	485e6 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   485c0:	4620      	mov	r0, r4
   485c2:	4669      	mov	r1, sp
   485c4:	f7ff fd5e 	bl	48084 <unsubscribe_encode>
	if (err_code < 0) {
   485c8:	1e04      	subs	r4, r0, #0
   485ca:	db06      	blt.n	485da <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   485cc:	e9dd 1200 	ldrd	r1, r2, [sp]
   485d0:	4628      	mov	r0, r5
   485d2:	1a52      	subs	r2, r2, r1
   485d4:	f7ff fea7 	bl	48326 <client_write>
   485d8:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   485da:	4628      	mov	r0, r5
   485dc:	f7da fc34 	bl	22e48 <mqtt_mutex_unlock>
}
   485e0:	4620      	mov	r0, r4
   485e2:	b003      	add	sp, #12
   485e4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   485e6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   485ea:	e7f6      	b.n	485da <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   485ec:	f06f 0415 	mvn.w	r4, #21
   485f0:	e7f6      	b.n	485e0 <mqtt_unsubscribe+0x3c>

000485f2 <mqtt_ping>:
{
   485f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   485f4:	4605      	mov	r5, r0
   485f6:	b1e8      	cbz	r0, 48634 <mqtt_ping+0x42>
	mqtt_mutex_lock(client);
   485f8:	f7da fc52 	bl	22ea0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   485fc:	4669      	mov	r1, sp
   485fe:	4628      	mov	r0, r5
   48600:	f7ff fe53 	bl	482aa <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   48604:	69ab      	ldr	r3, [r5, #24]
   48606:	075b      	lsls	r3, r3, #29
   48608:	d511      	bpl.n	4862e <mqtt_ping+0x3c>
	err_code = ping_request_encode(&packet);
   4860a:	4668      	mov	r0, sp
   4860c:	f7da fac0 	bl	22b90 <ping_request_encode>
	if (err_code < 0) {
   48610:	1e04      	subs	r4, r0, #0
   48612:	db06      	blt.n	48622 <mqtt_ping+0x30>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   48614:	e9dd 1200 	ldrd	r1, r2, [sp]
   48618:	4628      	mov	r0, r5
   4861a:	1a52      	subs	r2, r2, r1
   4861c:	f7ff fe83 	bl	48326 <client_write>
   48620:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   48622:	4628      	mov	r0, r5
   48624:	f7da fc10 	bl	22e48 <mqtt_mutex_unlock>
}
   48628:	4620      	mov	r0, r4
   4862a:	b003      	add	sp, #12
   4862c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   4862e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   48632:	e7f6      	b.n	48622 <mqtt_ping+0x30>
	NULL_PARAM_CHECK(client);
   48634:	f06f 0415 	mvn.w	r4, #21
   48638:	e7f6      	b.n	48628 <mqtt_ping+0x36>

0004863a <mqtt_live>:
{
   4863a:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   4863c:	4604      	mov	r4, r0
   4863e:	b308      	cbz	r0, 48684 <mqtt_live+0x4a>
	mqtt_mutex_lock(client);
   48640:	f7da fc2e 	bl	22ea0 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   48644:	69a5      	ldr	r5, [r4, #24]
   48646:	f015 0508 	ands.w	r5, r5, #8
   4864a:	d008      	beq.n	4865e <mqtt_live+0x24>
		client_disconnect(client, 0);
   4864c:	2100      	movs	r1, #0
   4864e:	4620      	mov	r0, r4
   48650:	f7ff fe4a 	bl	482e8 <client_disconnect>
	mqtt_mutex_unlock(client);
   48654:	4620      	mov	r0, r4
   48656:	f7da fbf7 	bl	22e48 <mqtt_mutex_unlock>
	return 0;
   4865a:	2000      	movs	r0, #0
}
   4865c:	bd70      	pop	{r4, r5, r6, pc}
		elapsed_time = mqtt_elapsed_time_in_ms_get(
   4865e:	6966      	ldr	r6, [r4, #20]
   48660:	f001 fdd2 	bl	4a208 <z_impl_k_uptime_get>
		if ((client->keepalive > 0) &&
   48664:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;

	if (diff < 0) {
   48668:	1b80      	subs	r0, r0, r6
   4866a:	bf58      	it	pl
   4866c:	4605      	movpl	r5, r0
   4866e:	2a00      	cmp	r2, #0
   48670:	d0f0      	beq.n	48654 <mqtt_live+0x1a>
		    (elapsed_time >= (client->keepalive * 1000))) {
   48672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48676:	4353      	muls	r3, r2
		if ((client->keepalive > 0) &&
   48678:	42ab      	cmp	r3, r5
   4867a:	d8eb      	bhi.n	48654 <mqtt_live+0x1a>
			(void)mqtt_ping(client);
   4867c:	4620      	mov	r0, r4
   4867e:	f7ff ffb8 	bl	485f2 <mqtt_ping>
   48682:	e7e7      	b.n	48654 <mqtt_live+0x1a>
	NULL_PARAM_CHECK(client);
   48684:	f06f 0015 	mvn.w	r0, #21
   48688:	e7e8      	b.n	4865c <mqtt_live+0x22>

0004868a <mqtt_input>:
{
   4868a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   4868c:	4605      	mov	r5, r0
   4868e:	b310      	cbz	r0, 486d6 <mqtt_input+0x4c>
	mqtt_mutex_lock(client);
   48690:	f7da fc06 	bl	22ea0 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   48694:	69ab      	ldr	r3, [r5, #24]
   48696:	071a      	lsls	r2, r3, #28
   48698:	d509      	bpl.n	486ae <mqtt_input+0x24>
		client_disconnect(client, 0);
   4869a:	2100      	movs	r1, #0
   4869c:	4628      	mov	r0, r5
   4869e:	f7ff fe23 	bl	482e8 <client_disconnect>
	int err_code = 0;
   486a2:	2400      	movs	r4, #0
	mqtt_mutex_unlock(client);
   486a4:	4628      	mov	r0, r5
   486a6:	f7da fbcf 	bl	22e48 <mqtt_mutex_unlock>
}
   486aa:	4620      	mov	r0, r4
   486ac:	bd38      	pop	{r3, r4, r5, pc}
	} else if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   486ae:	079b      	lsls	r3, r3, #30
   486b0:	d50b      	bpl.n	486ca <mqtt_input+0x40>
	if (client->internal.remaining_payload > 0) {
   486b2:	6a2b      	ldr	r3, [r5, #32]
   486b4:	b963      	cbnz	r3, 486d0 <mqtt_input+0x46>
	err_code = mqtt_handle_rx(client);
   486b6:	4628      	mov	r0, r5
   486b8:	f7ff fd32 	bl	48120 <mqtt_handle_rx>
	if (err_code < 0) {
   486bc:	1e04      	subs	r4, r0, #0
   486be:	daf1      	bge.n	486a4 <mqtt_input+0x1a>
		client_disconnect(client, err_code);
   486c0:	4621      	mov	r1, r4
   486c2:	4628      	mov	r0, r5
   486c4:	f7ff fe10 	bl	482e8 <client_disconnect>
   486c8:	e7ec      	b.n	486a4 <mqtt_input+0x1a>
		err_code = -EACCES;
   486ca:	f06f 040c 	mvn.w	r4, #12
   486ce:	e7e9      	b.n	486a4 <mqtt_input+0x1a>
		return -EBUSY;
   486d0:	f06f 040f 	mvn.w	r4, #15
   486d4:	e7e6      	b.n	486a4 <mqtt_input+0x1a>
	NULL_PARAM_CHECK(client);
   486d6:	f06f 0415 	mvn.w	r4, #21
   486da:	e7e6      	b.n	486aa <mqtt_input+0x20>

000486dc <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   486dc:	2301      	movs	r3, #1
   486de:	f7ff be33 	b.w	48348 <read_publish_payload>

000486e2 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   486e2:	b570      	push	{r4, r5, r6, lr}
   486e4:	4606      	mov	r6, r0
   486e6:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   486e8:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   486ea:	42ac      	cmp	r4, r5
   486ec:	d301      	bcc.n	486f2 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   486ee:	2000      	movs	r0, #0
}
   486f0:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   486f2:	1b2a      	subs	r2, r5, r4
   486f4:	4621      	mov	r1, r4
   486f6:	4630      	mov	r0, r6
   486f8:	f7ff fff0 	bl	486dc <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   486fc:	2800      	cmp	r0, #0
   486fe:	dbf7      	blt.n	486f0 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   48700:	d001      	beq.n	48706 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   48702:	4404      	add	r4, r0
   48704:	e7f1      	b.n	486ea <mqtt_readall_publish_payload+0x8>
			return -EIO;
   48706:	f06f 0004 	mvn.w	r0, #4
   4870a:	e7f1      	b.n	486f0 <mqtt_readall_publish_payload+0xe>

0004870c <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   4870c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   4870e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   48710:	f7da fbe6 	bl	22ee0 <close>
	if (ret < 0) {
   48714:	2800      	cmp	r0, #0
   48716:	da04      	bge.n	48722 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   48718:	f7ff fafe 	bl	47d18 <__errno>
   4871c:	6800      	ldr	r0, [r0, #0]
   4871e:	4240      	negs	r0, r0
	}

	return 0;
}
   48720:	bd08      	pop	{r3, pc}
	return 0;
   48722:	2000      	movs	r0, #0
   48724:	e7fc      	b.n	48720 <mqtt_client_tls_disconnect+0x14>

00048726 <gpio_nrfx_write>:
{
   48726:	b510      	push	{r4, lr}
	return port->config->config_info;
   48728:	6804      	ldr	r4, [r0, #0]
   4872a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4872c:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   4872e:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48730:	6824      	ldr	r4, [r4, #0]
   48732:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   48734:	d103      	bne.n	4873e <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   48736:	4058      	eors	r0, r3
    p_reg->OUT = value;
   48738:	6060      	str	r0, [r4, #4]
}
   4873a:	2000      	movs	r0, #0
   4873c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   4873e:	3300      	adds	r3, #0
   48740:	f04f 0101 	mov.w	r1, #1
   48744:	bf18      	it	ne
   48746:	2301      	movne	r3, #1
   48748:	40d0      	lsrs	r0, r2
   4874a:	f000 0001 	and.w	r0, r0, #1
   4874e:	4091      	lsls	r1, r2
   48750:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   48752:	bf14      	ite	ne
   48754:	60a1      	strne	r1, [r4, #8]
    p_reg->OUTCLR = clr_mask;
   48756:	60e1      	streq	r1, [r4, #12]
   48758:	e7ef      	b.n	4873a <gpio_nrfx_write+0x14>

0004875a <gpio_nrfx_read>:
{
   4875a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   4875c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   4875e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48760:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   48762:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48764:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   48766:	2901      	cmp	r1, #1
    return p_reg->DIR;
   48768:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   4876a:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   4876c:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   4876e:	ea80 0004 	eor.w	r0, r0, r4
   48772:	ea84 0405 	eor.w	r4, r4, r5
   48776:	ea04 0406 	and.w	r4, r4, r6
   4877a:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   4877e:	bf1c      	itt	ne
   48780:	40d0      	lsrne	r0, r2
   48782:	f000 0001 	andne.w	r0, r0, #1
   48786:	6018      	str	r0, [r3, #0]
}
   48788:	2000      	movs	r0, #0
   4878a:	bd70      	pop	{r4, r5, r6, pc}

0004878c <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   4878c:	2901      	cmp	r1, #1
{
   4878e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   48792:	bf18      	it	ne
   48794:	b2d4      	uxtbne	r4, r2
{
   48796:	4606      	mov	r6, r0
		to_pin   = pin;
   48798:	bf12      	itee	ne
   4879a:	4625      	movne	r5, r4
		to_pin   = 31U;
   4879c:	251f      	moveq	r5, #31
		from_pin = 0U;
   4879e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   487a0:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   487a4:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   487a6:	42ac      	cmp	r4, r5
   487a8:	d902      	bls.n	487b0 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   487aa:	2000      	movs	r0, #0
}
   487ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   487b0:	68fb      	ldr	r3, [r7, #12]
   487b2:	fa08 f204 	lsl.w	r2, r8, r4
   487b6:	ea23 0302 	bic.w	r3, r3, r2
   487ba:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   487bc:	4621      	mov	r1, r4
   487be:	4630      	mov	r0, r6
   487c0:	f7da fd98 	bl	232f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   487c4:	2800      	cmp	r0, #0
   487c6:	d1f1      	bne.n	487ac <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   487c8:	3401      	adds	r4, #1
   487ca:	b2e4      	uxtb	r4, r4
   487cc:	e7eb      	b.n	487a6 <gpio_nrfx_pin_disable_callback+0x1a>

000487ce <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   487ce:	2901      	cmp	r1, #1
{
   487d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   487d4:	bf18      	it	ne
   487d6:	b2d4      	uxtbne	r4, r2
{
   487d8:	4606      	mov	r6, r0
		to_pin   = pin;
   487da:	bf12      	itee	ne
   487dc:	4625      	movne	r5, r4
		to_pin   = 31U;
   487de:	251f      	moveq	r5, #31
		from_pin = 0U;
   487e0:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   487e2:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   487e6:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   487e8:	42ac      	cmp	r4, r5
   487ea:	d902      	bls.n	487f2 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   487ec:	2000      	movs	r0, #0
}
   487ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   487f2:	68fb      	ldr	r3, [r7, #12]
   487f4:	fa08 f204 	lsl.w	r2, r8, r4
   487f8:	4313      	orrs	r3, r2
   487fa:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   487fc:	4621      	mov	r1, r4
   487fe:	4630      	mov	r0, r6
   48800:	f7da fd78 	bl	232f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   48804:	2800      	cmp	r0, #0
   48806:	d1f2      	bne.n	487ee <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   48808:	3401      	adds	r4, #1
   4880a:	b2e4      	uxtb	r4, r4
   4880c:	e7ec      	b.n	487e8 <gpio_nrfx_pin_enable_callback+0x1a>

0004880e <adxl362_channel_get>:
{
   4880e:	b510      	push	{r4, lr}
	struct adxl362_data *data = dev->driver_data;
   48810:	6883      	ldr	r3, [r0, #8]
{
   48812:	4614      	mov	r4, r2
	switch (chan) {
   48814:	290c      	cmp	r1, #12
   48816:	d82b      	bhi.n	48870 <adxl362_channel_get+0x62>
   48818:	e8df f001 	tbb	[pc, r1]
   4881c:	2a151007 	.word	0x2a151007
   48820:	2a2a2a2a 	.word	0x2a2a2a2a
   48824:	2a2a2a2a 	.word	0x2a2a2a2a
   48828:	1a          	.byte	0x1a
   48829:	00          	.byte	0x00
		adxl362_accel_convert(val, data->acc_x, data->selected_range);
   4882a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   4882e:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   48832:	4620      	mov	r0, r4
   48834:	f7db f9b8 	bl	23ba8 <adxl362_accel_convert>
	return 0;
   48838:	2000      	movs	r0, #0
}
   4883a:	bd10      	pop	{r4, pc}
		adxl362_accel_convert(val, data->acc_y, data->selected_range);
   4883c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   48840:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
   48844:	e7f5      	b.n	48832 <adxl362_channel_get+0x24>
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   48846:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   4884a:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
   4884e:	e7f0      	b.n	48832 <adxl362_channel_get+0x24>
	val->val1 = milli_c / 1000;
   48850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		adxl362_temp_convert(val, data->temp);
   48854:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
	int milli_c = (temp - ADXL362_TEMP_BIAS_LSB) * ADXL362_TEMP_MC_PER_LSB;
   48858:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
   4885c:	eb03 1383 	add.w	r3, r3, r3, lsl #6
	val->val1 = milli_c / 1000;
   48860:	fb93 f1f2 	sdiv	r1, r3, r2
	val->val2 = (milli_c % 1000) * 1000;
   48864:	fb02 3311 	mls	r3, r2, r1, r3
   48868:	435a      	muls	r2, r3
	val->val1 = milli_c / 1000;
   4886a:	6021      	str	r1, [r4, #0]
	val->val2 = (milli_c % 1000) * 1000;
   4886c:	6062      	str	r2, [r4, #4]
   4886e:	e7e3      	b.n	48838 <adxl362_channel_get+0x2a>
		return -ENOTSUP;
   48870:	f06f 0085 	mvn.w	r0, #133	; 0x85
   48874:	e7e1      	b.n	4883a <adxl362_channel_get+0x2c>

00048876 <adxl362_reg_access>:
{
   48876:	b530      	push	{r4, r5, lr}
	const struct spi_buf buf[2] = {
   48878:	2402      	movs	r4, #2
{
   4887a:	b08b      	sub	sp, #44	; 0x2c
   4887c:	460d      	mov	r5, r1
	u8_t access[2] = { cmd, reg_addr };
   4887e:	f88d 1004 	strb.w	r1, [sp, #4]
   48882:	4601      	mov	r1, r0
	const struct spi_buf buf[2] = {
   48884:	e9cd 4307 	strd	r4, r3, [sp, #28]
   48888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	u8_t access[2] = { cmd, reg_addr };
   4888a:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf buf[2] = {
   4888e:	aa01      	add	r2, sp, #4
   48890:	9206      	str	r2, [sp, #24]
   48892:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   48894:	aa0a      	add	r2, sp, #40	; 0x28
   48896:	ab06      	add	r3, sp, #24
	if (cmd == ADXL362_READ_REG) {
   48898:	2d0b      	cmp	r5, #11
	struct spi_buf_set tx = {
   4889a:	f842 3d20 	str.w	r3, [r2, #-32]!
   4889e:	f851 0b04 	ldr.w	r0, [r1], #4
	if (cmd == ADXL362_READ_REG) {
   488a2:	d109      	bne.n	488b8 <adxl362_reg_access+0x42>
		const struct spi_buf_set rx = {
   488a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
		tx.count = 1;
   488a8:	2301      	movs	r3, #1
   488aa:	9303      	str	r3, [sp, #12]
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   488ac:	6843      	ldr	r3, [r0, #4]
   488ae:	681c      	ldr	r4, [r3, #0]
   488b0:	ab04      	add	r3, sp, #16
   488b2:	47a0      	blx	r4
}
   488b4:	b00b      	add	sp, #44	; 0x2c
   488b6:	bd30      	pop	{r4, r5, pc}
	tx.count = 2;
   488b8:	9403      	str	r4, [sp, #12]
   488ba:	6843      	ldr	r3, [r0, #4]
   488bc:	681c      	ldr	r4, [r3, #0]
   488be:	2300      	movs	r3, #0
   488c0:	e7f7      	b.n	488b2 <adxl362_reg_access+0x3c>

000488c2 <adxl362_set_reg.isra.0>:
static inline int adxl362_set_reg(struct device *dev, u16_t register_value,
   488c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   488c4:	ac04      	add	r4, sp, #16
   488c6:	f824 1d02 	strh.w	r1, [r4, #-2]!
	return adxl362_reg_access(adxl362_data,
   488ca:	9300      	str	r3, [sp, #0]
   488cc:	210a      	movs	r1, #10
   488ce:	4623      	mov	r3, r4
   488d0:	f7ff ffd1 	bl	48876 <adxl362_reg_access>
}
   488d4:	b004      	add	sp, #16
   488d6:	bd10      	pop	{r4, pc}

000488d8 <adxl362_get_reg.isra.1>:
static inline int adxl362_get_reg(struct device *dev, u8_t *read_buf,
   488d8:	b507      	push	{r0, r1, r2, lr}
	return adxl362_reg_access(adxl362_data,
   488da:	9300      	str	r3, [sp, #0]
   488dc:	460b      	mov	r3, r1
   488de:	210b      	movs	r1, #11
   488e0:	f7ff ffc9 	bl	48876 <adxl362_reg_access>
}
   488e4:	b003      	add	sp, #12
   488e6:	f85d fb04 	ldr.w	pc, [sp], #4

000488ea <adxl362_set_range>:
{
   488ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct adxl362_data *adxl362_data = dev->driver_data;
   488ec:	6884      	ldr	r4, [r0, #8]
{
   488ee:	4606      	mov	r6, r0
   488f0:	460d      	mov	r5, r1
	ret = adxl362_get_reg(dev, &old_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   488f2:	2301      	movs	r3, #1
   488f4:	222c      	movs	r2, #44	; 0x2c
   488f6:	f10d 0107 	add.w	r1, sp, #7
   488fa:	4620      	mov	r0, r4
   488fc:	f7ff ffec 	bl	488d8 <adxl362_get_reg.isra.1>
	if (ret) {
   48900:	b970      	cbnz	r0, 48920 <adxl362_set_range+0x36>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   48902:	f89d 1007 	ldrb.w	r1, [sp, #7]
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   48906:	2301      	movs	r3, #1
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   48908:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_RANGE(range);
   4890c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   48910:	222c      	movs	r2, #44	; 0x2c
   48912:	b2c9      	uxtb	r1, r1
   48914:	68b0      	ldr	r0, [r6, #8]
   48916:	f7ff ffd4 	bl	488c2 <adxl362_set_reg.isra.0>
	if (ret) {
   4891a:	b908      	cbnz	r0, 48920 <adxl362_set_range+0x36>
	adxl362_data->selected_range = range;
   4891c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   48920:	b002      	add	sp, #8
   48922:	bd70      	pop	{r4, r5, r6, pc}

00048924 <adxl362_set_output_rate>:
{
   48924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48926:	460c      	mov	r4, r1
   48928:	4605      	mov	r5, r0
	adxl362_get_reg(dev, &old_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   4892a:	f10d 0107 	add.w	r1, sp, #7
   4892e:	2301      	movs	r3, #1
   48930:	222c      	movs	r2, #44	; 0x2c
   48932:	6880      	ldr	r0, [r0, #8]
   48934:	f7ff ffd0 	bl	488d8 <adxl362_get_reg.isra.1>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   48938:	f89d 1007 	ldrb.w	r1, [sp, #7]
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_ODR(out_rate);
   4893c:	f004 0407 	and.w	r4, r4, #7
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   48940:	f021 0107 	bic.w	r1, r1, #7
	adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   48944:	2301      	movs	r3, #1
   48946:	222c      	movs	r2, #44	; 0x2c
   48948:	4321      	orrs	r1, r4
   4894a:	68a8      	ldr	r0, [r5, #8]
   4894c:	f7ff ffb9 	bl	488c2 <adxl362_set_reg.isra.0>
}
   48950:	2000      	movs	r0, #0
   48952:	b003      	add	sp, #12
   48954:	bd30      	pop	{r4, r5, pc}

00048956 <adxl362_reg_write_mask>:
{
   48956:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ret = adxl362_reg_access(adxl362_data,
   4895a:	2701      	movs	r7, #1
	struct adxl362_data *adxl362_data = dev->driver_data;
   4895c:	6885      	ldr	r5, [r0, #8]
{
   4895e:	460e      	mov	r6, r1
   48960:	4690      	mov	r8, r2
   48962:	461c      	mov	r4, r3
	ret = adxl362_reg_access(adxl362_data,
   48964:	460a      	mov	r2, r1
   48966:	9700      	str	r7, [sp, #0]
   48968:	f10d 030f 	add.w	r3, sp, #15
   4896c:	210b      	movs	r1, #11
   4896e:	4628      	mov	r0, r5
   48970:	f7ff ff81 	bl	48876 <adxl362_reg_access>
	if (ret) {
   48974:	b970      	cbnz	r0, 48994 <adxl362_reg_write_mask+0x3e>
	tmp &= ~mask;
   48976:	f89d 200f 	ldrb.w	r2, [sp, #15]
	return adxl362_reg_access(adxl362_data,
   4897a:	9700      	str	r7, [sp, #0]
	tmp &= ~mask;
   4897c:	ea22 0208 	bic.w	r2, r2, r8
	tmp |= data;
   48980:	4314      	orrs	r4, r2
	return adxl362_reg_access(adxl362_data,
   48982:	f10d 030f 	add.w	r3, sp, #15
   48986:	4632      	mov	r2, r6
   48988:	210a      	movs	r1, #10
   4898a:	4628      	mov	r0, r5
	tmp |= data;
   4898c:	f88d 400f 	strb.w	r4, [sp, #15]
	return adxl362_reg_access(adxl362_data,
   48990:	f7ff ff71 	bl	48876 <adxl362_reg_access>
}
   48994:	b004      	add	sp, #16
   48996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004899a <adxl362_get_status>:
	return adxl362_get_reg(dev, status, ADXL362_REG_STATUS, 1);
   4899a:	2301      	movs	r3, #1
   4899c:	220b      	movs	r2, #11
   4899e:	6880      	ldr	r0, [r0, #8]
   489a0:	f7ff bf9a 	b.w	488d8 <adxl362_get_reg.isra.1>

000489a4 <adxl362_clear_data_ready>:
{
   489a4:	b507      	push	{r0, r1, r2, lr}
	return adxl362_get_reg(dev, &buf, ADXL362_REG_XDATA, 1);
   489a6:	2301      	movs	r3, #1
   489a8:	2208      	movs	r2, #8
   489aa:	f10d 0107 	add.w	r1, sp, #7
   489ae:	6880      	ldr	r0, [r0, #8]
   489b0:	f7ff ff92 	bl	488d8 <adxl362_get_reg.isra.1>
}
   489b4:	b003      	add	sp, #12
   489b6:	f85d fb04 	ldr.w	pc, [sp], #4

000489ba <adxl362_gpio_callback>:
	z_impl_k_sem_give(sem);
   489ba:	f201 4034 	addw	r0, r1, #1076	; 0x434
   489be:	f7f6 ba43 	b.w	3ee48 <z_impl_k_sem_give>

000489c2 <bme680_channel_get>:
	switch (chan) {
   489c2:	290e      	cmp	r1, #14
	struct bme680_data *data = dev->driver_data;
   489c4:	6883      	ldr	r3, [r0, #8]
	switch (chan) {
   489c6:	d01b      	beq.n	48a00 <bme680_channel_get+0x3e>
   489c8:	d804      	bhi.n	489d4 <bme680_channel_get+0x12>
   489ca:	290d      	cmp	r1, #13
   489cc:	d00b      	beq.n	489e6 <bme680_channel_get+0x24>
		return -EINVAL;
   489ce:	f06f 0015 	mvn.w	r0, #21
}
   489d2:	4770      	bx	lr
	switch (chan) {
   489d4:	2910      	cmp	r1, #16
   489d6:	d01c      	beq.n	48a12 <bme680_channel_get+0x50>
   489d8:	291d      	cmp	r1, #29
   489da:	d1f8      	bne.n	489ce <bme680_channel_get+0xc>
		val->val2 = 0;
   489dc:	2000      	movs	r0, #0
		val->val1 = data->calc_gas_resistance;
   489de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		val->val2 = 0;
   489e0:	6050      	str	r0, [r2, #4]
		val->val1 = data->calc_gas_resistance;
   489e2:	6013      	str	r3, [r2, #0]
		break;
   489e4:	4770      	bx	lr
		val->val1 = data->calc_temp / 100;
   489e6:	2164      	movs	r1, #100	; 0x64
   489e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   489ea:	fb90 f3f1 	sdiv	r3, r0, r1
   489ee:	6013      	str	r3, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
   489f0:	fb01 0313 	mls	r3, r1, r3, r0
   489f4:	f242 7110 	movw	r1, #10000	; 0x2710
		val->val2 = (data->calc_press % 1000) * 1000;
   489f8:	434b      	muls	r3, r1
	return 0;
   489fa:	2000      	movs	r0, #0
		val->val2 = (data->calc_press % 1000) * 1000;
   489fc:	6053      	str	r3, [r2, #4]
		break;
   489fe:	4770      	bx	lr
		val->val1 = data->calc_press / 1000;
   48a00:	6b58      	ldr	r0, [r3, #52]	; 0x34
   48a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48a06:	fbb0 f1f3 	udiv	r1, r0, r3
   48a0a:	6011      	str	r1, [r2, #0]
		val->val2 = (data->calc_press % 1000) * 1000;
   48a0c:	fb03 0111 	mls	r1, r3, r1, r0
   48a10:	e7f2      	b.n	489f8 <bme680_channel_get+0x36>
		val->val1 = data->calc_humidity / 1000;
   48a12:	6b98      	ldr	r0, [r3, #56]	; 0x38
   48a14:	e7f5      	b.n	48a02 <bme680_channel_get+0x40>

00048a16 <bme680_reg_read>:
{
   48a16:	b530      	push	{r4, r5, lr}
   48a18:	4604      	mov	r4, r0
   48a1a:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read(data->i2c_master, data->i2c_slave_addr, start,
   48a1c:	88a5      	ldrh	r5, [r4, #4]
   48a1e:	ac08      	add	r4, sp, #32
   48a20:	f804 1d19 	strb.w	r1, [r4, #-25]!
	msg[0].len = num_write;
   48a24:	2101      	movs	r1, #1
	msg[1].len = num_read;
   48a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[0].len = num_write;
   48a2a:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   48a2c:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   48a2e:	2100      	movs	r1, #0
   48a30:	6800      	ldr	r0, [r0, #0]
	msg[0].buf = (u8_t *)write_buf;
   48a32:	9402      	str	r4, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   48a34:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   48a38:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   48a3c:	6843      	ldr	r3, [r0, #4]
   48a3e:	2202      	movs	r2, #2
   48a40:	685c      	ldr	r4, [r3, #4]
   48a42:	a902      	add	r1, sp, #8
   48a44:	462b      	mov	r3, r5
   48a46:	47a0      	blx	r4
}
   48a48:	b009      	add	sp, #36	; 0x24
   48a4a:	bd30      	pop	{r4, r5, pc}

00048a4c <bme680_reg_write>:
{
   48a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   48a4e:	4603      	mov	r3, r0
	u8_t tx_buf[2] = {reg_addr, value};
   48a50:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   48a54:	2202      	movs	r2, #2
	return i2c_reg_write_byte(data->i2c_master, data->i2c_slave_addr,
   48a56:	6800      	ldr	r0, [r0, #0]
   48a58:	889b      	ldrh	r3, [r3, #4]
	u8_t tx_buf[2] = {reg_addr, value};
   48a5a:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (u8_t *)buf;
   48a5e:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   48a62:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   48a64:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   48a68:	6842      	ldr	r2, [r0, #4]
   48a6a:	a901      	add	r1, sp, #4
   48a6c:	6854      	ldr	r4, [r2, #4]
   48a6e:	2201      	movs	r2, #1
   48a70:	47a0      	blx	r4
}
   48a72:	b004      	add	sp, #16
   48a74:	bd10      	pop	{r4, pc}

00048a76 <gpio_pin_write>:
{
   48a76:	b410      	push	{r4}
   48a78:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   48a7a:	6842      	ldr	r2, [r0, #4]
   48a7c:	6854      	ldr	r4, [r2, #4]
   48a7e:	460a      	mov	r2, r1
   48a80:	46a4      	mov	ip, r4
   48a82:	2100      	movs	r1, #0
}
   48a84:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   48a88:	4760      	bx	ip

00048a8a <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   48a8a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   48a8c:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   48a8e:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   48a90:	b324      	cbz	r4, 48adc <_spi_context_cs_control.isra.7+0x52>
   48a92:	68a3      	ldr	r3, [r4, #8]
   48a94:	b313      	cbz	r3, 48adc <_spi_context_cs_control.isra.7+0x52>
   48a96:	6818      	ldr	r0, [r3, #0]
   48a98:	b300      	cbz	r0, 48adc <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   48a9a:	b161      	cbz	r1, 48ab6 <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   48a9c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   48aa0:	6859      	ldr	r1, [r3, #4]
   48aa2:	0fd2      	lsrs	r2, r2, #31
   48aa4:	f7ff ffe7 	bl	48a76 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   48aa8:	682b      	ldr	r3, [r5, #0]
   48aaa:	689b      	ldr	r3, [r3, #8]
   48aac:	6898      	ldr	r0, [r3, #8]
}
   48aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   48ab2:	f001 bb3a 	b.w	4a12a <z_impl_k_busy_wait>
			if (!force_off &&
   48ab6:	b912      	cbnz	r2, 48abe <_spi_context_cs_control.isra.7+0x34>
   48ab8:	88a2      	ldrh	r2, [r4, #4]
   48aba:	0492      	lsls	r2, r2, #18
   48abc:	d40e      	bmi.n	48adc <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
   48abe:	6898      	ldr	r0, [r3, #8]
   48ac0:	f001 fb33 	bl	4a12a <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   48ac4:	682a      	ldr	r2, [r5, #0]
   48ac6:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   48ac8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   48acc:	e9d3 0100 	ldrd	r0, r1, [r3]
   48ad0:	43d2      	mvns	r2, r2
}
   48ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   48ad6:	0fd2      	lsrs	r2, r2, #31
   48ad8:	f7ff bfcd 	b.w	48a76 <gpio_pin_write>
}
   48adc:	bd38      	pop	{r3, r4, r5, pc}

00048ade <spi_context_unlock_unconditionally>:
{
   48ade:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   48ae0:	2201      	movs	r2, #1
   48ae2:	2100      	movs	r1, #0
{
   48ae4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   48ae6:	f7ff ffd0 	bl	48a8a <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   48aea:	68e3      	ldr	r3, [r4, #12]
   48aec:	b923      	cbnz	r3, 48af8 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   48aee:	1d20      	adds	r0, r4, #4
}
   48af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48af4:	f7f6 b9a8 	b.w	3ee48 <z_impl_k_sem_give>
   48af8:	bd10      	pop	{r4, pc}

00048afa <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   48afa:	6880      	ldr	r0, [r0, #8]
{
   48afc:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   48afe:	6803      	ldr	r3, [r0, #0]
   48b00:	428b      	cmp	r3, r1
   48b02:	d106      	bne.n	48b12 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   48b04:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   48b08:	b934      	cbnz	r4, 48b18 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   48b0a:	f7ff ffe8 	bl	48ade <spi_context_unlock_unconditionally>
	return 0;
   48b0e:	4620      	mov	r0, r4
}
   48b10:	bd10      	pop	{r4, pc}
		return -EINVAL;
   48b12:	f06f 0015 	mvn.w	r0, #21
   48b16:	e7fb      	b.n	48b10 <spi_nrfx_release+0x16>
		return -EBUSY;
   48b18:	f06f 000f 	mvn.w	r0, #15
   48b1c:	e7f8      	b.n	48b10 <spi_nrfx_release+0x16>

00048b1e <is_regular_addr_valid>:
{
   48b1e:	b538      	push	{r3, r4, r5, lr}
   48b20:	4604      	mov	r4, r0
   48b22:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   48b24:	f001 fa1e 	bl	49f64 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
   48b28:	4284      	cmp	r4, r0
   48b2a:	d209      	bcs.n	48b40 <is_regular_addr_valid+0x22>
   48b2c:	2c00      	cmp	r4, #0
   48b2e:	db07      	blt.n	48b40 <is_regular_addr_valid+0x22>
	    addr < DT_FLASH_BASE_ADDRESS ||
   48b30:	42a8      	cmp	r0, r5
   48b32:	d305      	bcc.n	48b40 <is_regular_addr_valid+0x22>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
   48b34:	442c      	add	r4, r5
	    len > flash_size ||
   48b36:	4284      	cmp	r4, r0
   48b38:	bf8c      	ite	hi
   48b3a:	2000      	movhi	r0, #0
   48b3c:	2001      	movls	r0, #1
}
   48b3e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   48b40:	2000      	movs	r0, #0
   48b42:	e7fc      	b.n	48b3e <is_regular_addr_valid+0x20>

00048b44 <flash_nrf_read>:
{
   48b44:	b570      	push	{r4, r5, r6, lr}
   48b46:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   48b48:	4619      	mov	r1, r3
   48b4a:	4628      	mov	r0, r5
{
   48b4c:	4616      	mov	r6, r2
   48b4e:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   48b50:	f7ff ffe5 	bl	48b1e <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   48b54:	b170      	cbz	r0, 48b74 <flash_nrf_read+0x30>
	if (!len) {
   48b56:	b184      	cbz	r4, 48b7a <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   48b58:	f5b5 3fc1 	cmp.w	r5, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   48b5c:	4622      	mov	r2, r4
   48b5e:	4629      	mov	r1, r5
   48b60:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   48b62:	da03      	bge.n	48b6c <flash_nrf_read+0x28>
}
   48b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   48b68:	f7cf ba3a 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48b6c:	f7d1 f9a0 	bl	19eb0 <memcpy>
   48b70:	2000      	movs	r0, #0
}
   48b72:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   48b74:	f06f 0015 	mvn.w	r0, #21
   48b78:	e7fb      	b.n	48b72 <flash_nrf_read+0x2e>
		return 0;
   48b7a:	4620      	mov	r0, r4
   48b7c:	e7f9      	b.n	48b72 <flash_nrf_read+0x2e>

00048b7e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   48b7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   48b82:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   48b84:	6843      	ldr	r3, [r0, #4]
{
   48b86:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   48b88:	691b      	ldr	r3, [r3, #16]
   48b8a:	4669      	mov	r1, sp
{
   48b8c:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   48b8e:	aa01      	add	r2, sp, #4
   48b90:	4798      	blx	r3
   48b92:	e9dd 2100 	ldrd	r2, r1, [sp]

	while (layout_size--) {
   48b96:	2300      	movs	r3, #0
	off_t end = 0;
   48b98:	4618      	mov	r0, r3
	off_t group_offs = 0;
   48b9a:	469e      	mov	lr, r3
	size_t page_count = 0;
   48b9c:	469c      	mov	ip, r3
   48b9e:	f101 38ff 	add.w	r8, r1, #4294967295
	while (layout_size--) {
   48ba2:	f1b8 3fff 	cmp.w	r8, #4294967295
   48ba6:	d102      	bne.n	48bae <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   48ba8:	f06f 0015 	mvn.w	r0, #21
   48bac:	e018      	b.n	48be0 <flash_get_page_info+0x62>
   48bae:	6817      	ldr	r7, [r2, #0]
		if (use_addr) {
   48bb0:	b1ce      	cbz	r6, 48be6 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   48bb2:	6851      	ldr	r1, [r2, #4]
   48bb4:	fb01 0007 	mla	r0, r1, r7, r0
		if (offs < end) {
   48bb8:	42a0      	cmp	r0, r4
   48bba:	f108 38ff 	add.w	r8, r8, #4294967295
   48bbe:	dd17      	ble.n	48bf0 <flash_get_page_info+0x72>
   48bc0:	b103      	cbz	r3, 48bc4 <flash_get_page_info+0x46>
   48bc2:	9200      	str	r2, [sp, #0]
			info->size = layout->pages_size;
   48bc4:	9b00      	ldr	r3, [sp, #0]
   48bc6:	685b      	ldr	r3, [r3, #4]
   48bc8:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   48bca:	b176      	cbz	r6, 48bea <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   48bcc:	eba4 040e 	sub.w	r4, r4, lr
   48bd0:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   48bd4:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   48bd6:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   48bda:	4464      	add	r4, ip
			info->start_offset = group_offs +
   48bdc:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   48bde:	60ac      	str	r4, [r5, #8]
}
   48be0:	b002      	add	sp, #8
   48be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   48be6:	4438      	add	r0, r7
   48be8:	e7e6      	b.n	48bb8 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   48bea:	eba4 040c 	sub.w	r4, r4, ip
   48bee:	e7f1      	b.n	48bd4 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   48bf0:	6853      	ldr	r3, [r2, #4]
		page_count += layout->pages_count;
   48bf2:	44bc      	add	ip, r7
		group_offs += layout->pages_count * layout->pages_size;
   48bf4:	fb03 ee07 	mla	lr, r3, r7, lr
		layout++;
   48bf8:	3208      	adds	r2, #8
   48bfa:	2301      	movs	r3, #1
   48bfc:	e7d1      	b.n	48ba2 <flash_get_page_info+0x24>

00048bfe <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   48bfe:	4613      	mov	r3, r2
   48c00:	2201      	movs	r2, #1
   48c02:	f7ff bfbc 	b.w	48b7e <flash_get_page_info>

00048c06 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   48c06:	6883      	ldr	r3, [r0, #8]
   48c08:	689b      	ldr	r3, [r3, #8]
   48c0a:	7b9a      	ldrb	r2, [r3, #14]
   48c0c:	b172      	cbz	r2, 48c2c <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   48c0e:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   48c10:	6892      	ldr	r2, [r2, #8]
   48c12:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48c14:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   48c18:	b141      	cbz	r1, 48c2c <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   48c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   48c1e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48c22:	2101      	movs	r1, #1
   48c24:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   48c26:	2200      	movs	r2, #0
   48c28:	739a      	strb	r2, [r3, #14]
		return;
   48c2a:	4770      	bx	lr
	if (data->int_driven->cb) {
   48c2c:	681a      	ldr	r2, [r3, #0]
   48c2e:	b10a      	cbz	r2, 48c34 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   48c30:	6858      	ldr	r0, [r3, #4]
   48c32:	4710      	bx	r2
}
   48c34:	4770      	bx	lr

00048c36 <uarte_nrfx_config_get>:
{
   48c36:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   48c38:	6882      	ldr	r2, [r0, #8]
   48c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
   48c3e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   48c42:	2000      	movs	r0, #0
   48c44:	4770      	bx	lr

00048c46 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   48c46:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48c48:	689b      	ldr	r3, [r3, #8]
   48c4a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48c4c:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   48c50:	b118      	cbz	r0, 48c5a <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   48c52:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   48c56:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   48c5a:	4770      	bx	lr

00048c5c <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   48c5c:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   48c5e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   48c60:	689b      	ldr	r3, [r3, #8]
   48c62:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48c64:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   48c68:	b138      	cbz	r0, 48c7a <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   48c6a:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48c6c:	2000      	movs	r0, #0
   48c6e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48c70:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48c72:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48c76:	601a      	str	r2, [r3, #0]
	return 0;
   48c78:	4770      	bx	lr
		return -1;
   48c7a:	f04f 30ff 	mov.w	r0, #4294967295
}
   48c7e:	4770      	bx	lr

00048c80 <uarte_nrfx_poll_out>:
{
   48c80:	b082      	sub	sp, #8
   48c82:	aa02      	add	r2, sp, #8
   48c84:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48c88:	2100      	movs	r1, #0
	return dev->config->config_info;
   48c8a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48c8c:	689b      	ldr	r3, [r3, #8]
   48c8e:	681b      	ldr	r3, [r3, #0]
   48c90:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   48c94:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   48c98:	2201      	movs	r2, #1
   48c9a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48c9e:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48ca0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   48ca4:	2900      	cmp	r1, #0
   48ca6:	d0fb      	beq.n	48ca0 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48ca8:	60da      	str	r2, [r3, #12]
}
   48caa:	b002      	add	sp, #8
   48cac:	4770      	bx	lr

00048cae <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   48cae:	6803      	ldr	r3, [r0, #0]
{
   48cb0:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   48cb2:	689b      	ldr	r3, [r3, #8]
   48cb4:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48cb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   48cba:	b1bb      	cbz	r3, 48cec <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   48cbc:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   48cbe:	68ab      	ldr	r3, [r5, #8]
   48cc0:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48cc2:	2300      	movs	r3, #0
   48cc4:	4290      	cmp	r0, r2
   48cc6:	bfa8      	it	ge
   48cc8:	4610      	movge	r0, r2
   48cca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   48cce:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   48cd0:	4283      	cmp	r3, r0
   48cd2:	6892      	ldr	r2, [r2, #8]
   48cd4:	db06      	blt.n	48ce4 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48cd6:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   48cd8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   48cdc:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48ce0:	60a3      	str	r3, [r4, #8]
}
   48ce2:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   48ce4:	5cce      	ldrb	r6, [r1, r3]
   48ce6:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   48ce8:	3301      	adds	r3, #1
   48cea:	e7f0      	b.n	48cce <uarte_nrfx_fifo_fill+0x20>
		return 0;
   48cec:	4618      	mov	r0, r3
   48cee:	e7f8      	b.n	48ce2 <uarte_nrfx_fifo_fill+0x34>

00048cf0 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   48cf0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48cf2:	689b      	ldr	r3, [r3, #8]
   48cf4:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48cf6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   48cfa:	b143      	cbz	r3, 48d0e <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   48cfc:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48cfe:	2000      	movs	r0, #0
   48d00:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48d04:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   48d06:	7b1b      	ldrb	r3, [r3, #12]
   48d08:	700b      	strb	r3, [r1, #0]
   48d0a:	6010      	str	r0, [r2, #0]
   48d0c:	4770      	bx	lr
	int num_rx = 0;
   48d0e:	4618      	mov	r0, r3
}
   48d10:	4770      	bx	lr

00048d12 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   48d12:	2100      	movs	r1, #0
	return dev->config->config_info;
   48d14:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   48d16:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   48d18:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   48d1a:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   48d1c:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   48d1e:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   48d20:	f44f 7280 	mov.w	r2, #256	; 0x100
   48d24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   48d28:	4770      	bx	lr

00048d2a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   48d2a:	2201      	movs	r2, #1
   48d2c:	6883      	ldr	r3, [r0, #8]
   48d2e:	689b      	ldr	r3, [r3, #8]
   48d30:	739a      	strb	r2, [r3, #14]
}
   48d32:	4770      	bx	lr

00048d34 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   48d34:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d36:	689b      	ldr	r3, [r3, #8]
   48d38:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48d3a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   48d3e:	b118      	cbz	r0, 48d48 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   48d40:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   48d44:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   48d48:	4770      	bx	lr

00048d4a <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   48d4a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d4c:	689b      	ldr	r3, [r3, #8]
   48d4e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48d50:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   48d54:	3000      	adds	r0, #0
   48d56:	bf18      	it	ne
   48d58:	2001      	movne	r0, #1
   48d5a:	4770      	bx	lr

00048d5c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   48d5c:	2210      	movs	r2, #16
	return dev->config->config_info;
   48d5e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d60:	689b      	ldr	r3, [r3, #8]
   48d62:	681b      	ldr	r3, [r3, #0]
   48d64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   48d68:	4770      	bx	lr

00048d6a <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   48d6a:	2210      	movs	r2, #16
	return dev->config->config_info;
   48d6c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d6e:	689b      	ldr	r3, [r3, #8]
   48d70:	681b      	ldr	r3, [r3, #0]
   48d72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   48d76:	4770      	bx	lr

00048d78 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   48d78:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   48d7c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d7e:	689b      	ldr	r3, [r3, #8]
   48d80:	681b      	ldr	r3, [r3, #0]
   48d82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   48d86:	4770      	bx	lr

00048d88 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   48d88:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   48d8c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   48d8e:	689b      	ldr	r3, [r3, #8]
   48d90:	681b      	ldr	r3, [r3, #0]
   48d92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   48d96:	4770      	bx	lr

00048d98 <uarte_nrfx_irq_update>:
}
   48d98:	2001      	movs	r0, #1
   48d9a:	4770      	bx	lr

00048d9c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   48d9c:	6883      	ldr	r3, [r0, #8]
   48d9e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   48da0:	e9c3 1200 	strd	r1, r2, [r3]
}
   48da4:	4770      	bx	lr

00048da6 <uarte_nrfx_irq_is_pending>:
{
   48da6:	b508      	push	{r3, lr}
	return dev->config->config_info;
   48da8:	6803      	ldr	r3, [r0, #0]
{
   48daa:	4602      	mov	r2, r0
	return config->uarte_regs;
   48dac:	689b      	ldr	r3, [r3, #8]
   48dae:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   48db0:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   48db4:	05db      	lsls	r3, r3, #23
   48db6:	d405      	bmi.n	48dc4 <uarte_nrfx_irq_is_pending+0x1e>
   48db8:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   48dbc:	f010 0010 	ands.w	r0, r0, #16
   48dc0:	d106      	bne.n	48dd0 <uarte_nrfx_irq_is_pending+0x2a>
}
   48dc2:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   48dc4:	f7ff ffb6 	bl	48d34 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   48dc8:	2800      	cmp	r0, #0
   48dca:	d0f5      	beq.n	48db8 <uarte_nrfx_irq_is_pending+0x12>
		||
   48dcc:	2001      	movs	r0, #1
   48dce:	e7f8      	b.n	48dc2 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   48dd0:	4610      	mov	r0, r2
   48dd2:	f7ff ffba 	bl	48d4a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   48dd6:	3000      	adds	r0, #0
   48dd8:	bf18      	it	ne
   48dda:	2001      	movne	r0, #1
   48ddc:	e7f1      	b.n	48dc2 <uarte_nrfx_irq_is_pending+0x1c>

00048dde <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   48dde:	2000      	movs	r0, #0
   48de0:	4770      	bx	lr

00048de2 <parse_hex4>:
    for (i = 0; i < 4; i++)
   48de2:	2200      	movs	r2, #0
    unsigned int h = 0;
   48de4:	4613      	mov	r3, r2
{
   48de6:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   48de8:	5c81      	ldrb	r1, [r0, r2]
   48dea:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   48dee:	2c09      	cmp	r4, #9
   48df0:	d80a      	bhi.n	48e08 <parse_hex4+0x26>
   48df2:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   48df4:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   48df6:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   48df8:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   48dfc:	bf18      	it	ne
   48dfe:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   48e00:	2a04      	cmp	r2, #4
   48e02:	d1f1      	bne.n	48de8 <parse_hex4+0x6>
}
   48e04:	4618      	mov	r0, r3
   48e06:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   48e08:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   48e0c:	2c05      	cmp	r4, #5
   48e0e:	d801      	bhi.n	48e14 <parse_hex4+0x32>
   48e10:	3b37      	subs	r3, #55	; 0x37
   48e12:	e7ef      	b.n	48df4 <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   48e14:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   48e18:	2c05      	cmp	r4, #5
   48e1a:	d801      	bhi.n	48e20 <parse_hex4+0x3e>
   48e1c:	3b57      	subs	r3, #87	; 0x57
   48e1e:	e7e9      	b.n	48df4 <parse_hex4+0x12>
            return 0;
   48e20:	2300      	movs	r3, #0
   48e22:	e7ef      	b.n	48e04 <parse_hex4+0x22>

00048e24 <buffer_skip_whitespace>:
{
   48e24:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   48e26:	b140      	cbz	r0, 48e3a <buffer_skip_whitespace+0x16>
   48e28:	6801      	ldr	r1, [r0, #0]
   48e2a:	b171      	cbz	r1, 48e4a <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   48e2c:	6842      	ldr	r2, [r0, #4]
   48e2e:	6883      	ldr	r3, [r0, #8]
   48e30:	4293      	cmp	r3, r2
   48e32:	d206      	bcs.n	48e42 <buffer_skip_whitespace+0x1e>
   48e34:	5ccc      	ldrb	r4, [r1, r3]
   48e36:	2c20      	cmp	r4, #32
   48e38:	d900      	bls.n	48e3c <buffer_skip_whitespace+0x18>
}
   48e3a:	bd10      	pop	{r4, pc}
       buffer->offset++;
   48e3c:	3301      	adds	r3, #1
   48e3e:	6083      	str	r3, [r0, #8]
   48e40:	e7f5      	b.n	48e2e <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   48e42:	d1fa      	bne.n	48e3a <buffer_skip_whitespace+0x16>
        buffer->offset--;
   48e44:	3a01      	subs	r2, #1
   48e46:	6082      	str	r2, [r0, #8]
   48e48:	e7f7      	b.n	48e3a <buffer_skip_whitespace+0x16>
        return NULL;
   48e4a:	4608      	mov	r0, r1
   48e4c:	e7f5      	b.n	48e3a <buffer_skip_whitespace+0x16>

00048e4e <update_offset>:
{
   48e4e:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   48e50:	4604      	mov	r4, r0
   48e52:	b140      	cbz	r0, 48e66 <update_offset+0x18>
   48e54:	6803      	ldr	r3, [r0, #0]
   48e56:	b133      	cbz	r3, 48e66 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   48e58:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   48e5a:	4418      	add	r0, r3
   48e5c:	f7f8 fce2 	bl	41824 <strlen>
   48e60:	68a3      	ldr	r3, [r4, #8]
   48e62:	4418      	add	r0, r3
   48e64:	60a0      	str	r0, [r4, #8]
}
   48e66:	bd10      	pop	{r4, pc}

00048e68 <get_object_item>:
{
   48e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   48e6c:	460f      	mov	r7, r1
    if ((object == NULL) || (name == NULL))
   48e6e:	b918      	cbnz	r0, 48e78 <get_object_item+0x10>
        return NULL;
   48e70:	2400      	movs	r4, #0
}
   48e72:	4620      	mov	r0, r4
   48e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((object == NULL) || (name == NULL))
   48e78:	2900      	cmp	r1, #0
   48e7a:	d0f9      	beq.n	48e70 <get_object_item+0x8>
    current_element = object->child;
   48e7c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   48e7e:	2a00      	cmp	r2, #0
   48e80:	d13e      	bne.n	48f00 <get_object_item+0x98>
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   48e82:	2c00      	cmp	r4, #0
   48e84:	d0f4      	beq.n	48e70 <get_object_item+0x8>
   48e86:	6a26      	ldr	r6, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   48e88:	b3be      	cbz	r6, 48efa <get_object_item+0x92>
    if (string1 == string2)
   48e8a:	42be      	cmp	r6, r7
   48e8c:	d041      	beq.n	48f12 <get_object_item+0xaa>
   48e8e:	f107 3aff 	add.w	sl, r7, #4294967295
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   48e92:	f81a 8f01 	ldrb.w	r8, [sl, #1]!
   48e96:	f7f7 fd67 	bl	40968 <__locale_ctype_ptr>
   48e9a:	4440      	add	r0, r8
   48e9c:	7843      	ldrb	r3, [r0, #1]
   48e9e:	46b1      	mov	r9, r6
   48ea0:	f003 0303 	and.w	r3, r3, #3
   48ea4:	2b01      	cmp	r3, #1
   48ea6:	f816 5b01 	ldrb.w	r5, [r6], #1
   48eaa:	bf08      	it	eq
   48eac:	f108 0820 	addeq.w	r8, r8, #32
   48eb0:	f7f7 fd5a 	bl	40968 <__locale_ctype_ptr>
   48eb4:	462b      	mov	r3, r5
   48eb6:	4428      	add	r0, r5
   48eb8:	7842      	ldrb	r2, [r0, #1]
   48eba:	f89a 5000 	ldrb.w	r5, [sl]
   48ebe:	f002 0203 	and.w	r2, r2, #3
   48ec2:	2a01      	cmp	r2, #1
   48ec4:	bf08      	it	eq
   48ec6:	3320      	addeq	r3, #32
   48ec8:	4598      	cmp	r8, r3
   48eca:	d026      	beq.n	48f1a <get_object_item+0xb2>
    return tolower(*string1) - tolower(*string2);
   48ecc:	f7f7 fd4c 	bl	40968 <__locale_ctype_ptr>
   48ed0:	4428      	add	r0, r5
   48ed2:	7843      	ldrb	r3, [r0, #1]
   48ed4:	f899 6000 	ldrb.w	r6, [r9]
   48ed8:	f003 0303 	and.w	r3, r3, #3
   48edc:	2b01      	cmp	r3, #1
   48ede:	bf08      	it	eq
   48ee0:	3520      	addeq	r5, #32
   48ee2:	f7f7 fd41 	bl	40968 <__locale_ctype_ptr>
   48ee6:	4633      	mov	r3, r6
   48ee8:	4430      	add	r0, r6
   48eea:	7842      	ldrb	r2, [r0, #1]
   48eec:	f002 0203 	and.w	r2, r2, #3
   48ef0:	2a01      	cmp	r2, #1
   48ef2:	bf08      	it	eq
   48ef4:	3320      	addeq	r3, #32
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   48ef6:	429d      	cmp	r5, r3
   48ef8:	d00b      	beq.n	48f12 <get_object_item+0xaa>
            current_element = current_element->next;
   48efa:	6824      	ldr	r4, [r4, #0]
   48efc:	e7c1      	b.n	48e82 <get_object_item+0x1a>
            current_element = current_element->next;
   48efe:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   48f00:	2c00      	cmp	r4, #0
   48f02:	d0b5      	beq.n	48e70 <get_object_item+0x8>
   48f04:	6a21      	ldr	r1, [r4, #32]
   48f06:	b121      	cbz	r1, 48f12 <get_object_item+0xaa>
   48f08:	4638      	mov	r0, r7
   48f0a:	f7d1 f847 	bl	19f9c <strcmp>
   48f0e:	2800      	cmp	r0, #0
   48f10:	d1f5      	bne.n	48efe <get_object_item+0x96>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   48f12:	6a23      	ldr	r3, [r4, #32]
   48f14:	2b00      	cmp	r3, #0
   48f16:	d1ac      	bne.n	48e72 <get_object_item+0xa>
   48f18:	e7aa      	b.n	48e70 <get_object_item+0x8>
        if (*string1 == '\0')
   48f1a:	2d00      	cmp	r5, #0
   48f1c:	d1b9      	bne.n	48e92 <get_object_item+0x2a>
   48f1e:	e7f8      	b.n	48f12 <get_object_item+0xaa>

00048f20 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   48f20:	b161      	cbz	r1, 48f3c <add_item_to_array+0x1c>
   48f22:	b160      	cbz	r0, 48f3e <add_item_to_array+0x1e>
    child = array->child;
   48f24:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   48f26:	b91b      	cbnz	r3, 48f30 <add_item_to_array+0x10>
        array->child = item;
   48f28:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   48f2a:	2001      	movs	r0, #1
   48f2c:	4770      	bx	lr
        while (child->next)
   48f2e:	4613      	mov	r3, r2
   48f30:	681a      	ldr	r2, [r3, #0]
   48f32:	2a00      	cmp	r2, #0
   48f34:	d1fb      	bne.n	48f2e <add_item_to_array+0xe>
    prev->next = item;
   48f36:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   48f38:	604b      	str	r3, [r1, #4]
   48f3a:	e7f6      	b.n	48f2a <add_item_to_array+0xa>
        return false;
   48f3c:	4608      	mov	r0, r1
}
   48f3e:	4770      	bx	lr

00048f40 <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   48f40:	b510      	push	{r4, lr}
   48f42:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   48f44:	2028      	movs	r0, #40	; 0x28
   48f46:	4798      	blx	r3
    if (node)
   48f48:	4604      	mov	r4, r0
   48f4a:	b118      	cbz	r0, 48f54 <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   48f4c:	2228      	movs	r2, #40	; 0x28
   48f4e:	2100      	movs	r1, #0
   48f50:	f7f8 f872 	bl	41038 <memset>
}
   48f54:	4620      	mov	r0, r4
   48f56:	bd10      	pop	{r4, pc}

00048f58 <ensure>:
{
   48f58:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   48f5a:	4604      	mov	r4, r0
   48f5c:	b1b8      	cbz	r0, 48f8e <ensure+0x36>
   48f5e:	6805      	ldr	r5, [r0, #0]
   48f60:	b165      	cbz	r5, 48f7c <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   48f62:	6843      	ldr	r3, [r0, #4]
   48f64:	b113      	cbz	r3, 48f6c <ensure+0x14>
   48f66:	6882      	ldr	r2, [r0, #8]
   48f68:	4293      	cmp	r3, r2
   48f6a:	d910      	bls.n	48f8e <ensure+0x36>
    if (needed > INT_MAX)
   48f6c:	2900      	cmp	r1, #0
   48f6e:	db0e      	blt.n	48f8e <ensure+0x36>
    needed += p->offset + 1;
   48f70:	68a2      	ldr	r2, [r4, #8]
   48f72:	1c4e      	adds	r6, r1, #1
   48f74:	4416      	add	r6, r2
    if (needed <= p->length)
   48f76:	42b3      	cmp	r3, r6
   48f78:	d302      	bcc.n	48f80 <ensure+0x28>
        return p->buffer + p->offset;
   48f7a:	4415      	add	r5, r2
}
   48f7c:	4628      	mov	r0, r5
   48f7e:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   48f80:	6923      	ldr	r3, [r4, #16]
   48f82:	b923      	cbnz	r3, 48f8e <ensure+0x36>
    if (needed > (INT_MAX / 2))
   48f84:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   48f88:	d303      	bcc.n	48f92 <ensure+0x3a>
        if (needed <= INT_MAX)
   48f8a:	2e00      	cmp	r6, #0
   48f8c:	da0f      	bge.n	48fae <ensure+0x56>
        return NULL;
   48f8e:	2500      	movs	r5, #0
   48f90:	e7f4      	b.n	48f7c <ensure+0x24>
        newsize = needed * 2;
   48f92:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   48f94:	6a23      	ldr	r3, [r4, #32]
   48f96:	b16b      	cbz	r3, 48fb4 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   48f98:	4628      	mov	r0, r5
   48f9a:	4631      	mov	r1, r6
   48f9c:	4798      	blx	r3
        if (newbuffer == NULL)
   48f9e:	4605      	mov	r5, r0
   48fa0:	b9b0      	cbnz	r0, 48fd0 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   48fa2:	69e3      	ldr	r3, [r4, #28]
   48fa4:	6820      	ldr	r0, [r4, #0]
   48fa6:	4798      	blx	r3
            p->buffer = NULL;
   48fa8:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   48fac:	e7e6      	b.n	48f7c <ensure+0x24>
            newsize = INT_MAX;
   48fae:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   48fb2:	e7ef      	b.n	48f94 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   48fb4:	69a3      	ldr	r3, [r4, #24]
   48fb6:	4630      	mov	r0, r6
   48fb8:	4798      	blx	r3
        if (!newbuffer)
   48fba:	4605      	mov	r5, r0
   48fbc:	2800      	cmp	r0, #0
   48fbe:	d0f0      	beq.n	48fa2 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   48fc0:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48fc2:	6821      	ldr	r1, [r4, #0]
   48fc4:	3201      	adds	r2, #1
   48fc6:	f7d0 ff73 	bl	19eb0 <memcpy>
        p->hooks.deallocate(p->buffer);
   48fca:	69e3      	ldr	r3, [r4, #28]
   48fcc:	6820      	ldr	r0, [r4, #0]
   48fce:	4798      	blx	r3
    return newbuffer + p->offset;
   48fd0:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   48fd2:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   48fd6:	441d      	add	r5, r3
   48fd8:	e7d0      	b.n	48f7c <ensure+0x24>

00048fda <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   48fda:	2200      	movs	r2, #0
   48fdc:	4611      	mov	r1, r2
   48fde:	f7dc bb9f 	b.w	25720 <cJSON_ParseWithOpts>

00048fe2 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   48fe2:	2100      	movs	r1, #0
   48fe4:	f7dc bace 	b.w	25584 <print.constprop.14>

00048fe8 <cJSON_GetArraySize>:
    if (array == NULL)
   48fe8:	b110      	cbz	r0, 48ff0 <cJSON_GetArraySize+0x8>
    child = array->child;
   48fea:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   48fec:	2000      	movs	r0, #0
    while(child != NULL)
   48fee:	b903      	cbnz	r3, 48ff2 <cJSON_GetArraySize+0xa>
}
   48ff0:	4770      	bx	lr
        size++;
   48ff2:	3001      	adds	r0, #1
        child = child->next;
   48ff4:	681b      	ldr	r3, [r3, #0]
   48ff6:	e7fa      	b.n	48fee <cJSON_GetArraySize+0x6>

00048ff8 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   48ff8:	2200      	movs	r2, #0
   48ffa:	f7ff bf35 	b.w	48e68 <get_object_item>

00048ffe <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   48ffe:	f7ff bf8f 	b.w	48f20 <add_item_to_array>

00049002 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   49002:	2300      	movs	r3, #0
   49004:	f7dc bb20 	b.w	25648 <add_item_to_object.constprop.12>

00049008 <cJSON_CreateIntArray>:

/* Create Arrays: */
CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
{
   49008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t i = 0;
    cJSON *n = NULL;
    cJSON *p = NULL;
    cJSON *a = NULL;

    if ((count < 0) || (numbers == NULL))
   4900c:	f1b1 0900 	subs.w	r9, r1, #0
{
   49010:	4680      	mov	r8, r0
    if ((count < 0) || (numbers == NULL))
   49012:	da03      	bge.n	4901c <cJSON_CreateIntArray+0x14>
    {
        return NULL;
   49014:	2400      	movs	r4, #0
        }
        p = n;
    }

    return a;
}
   49016:	4620      	mov	r0, r4
   49018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((count < 0) || (numbers == NULL))
   4901c:	2800      	cmp	r0, #0
   4901e:	d0f9      	beq.n	49014 <cJSON_CreateIntArray+0xc>
    a = cJSON_CreateArray();
   49020:	f7dc fc16 	bl	25850 <cJSON_CreateArray>
    cJSON *p = NULL;
   49024:	2700      	movs	r7, #0
    a = cJSON_CreateArray();
   49026:	4604      	mov	r4, r0
    for(i = 0; a && (i < (size_t)count); i++)
   49028:	463e      	mov	r6, r7
   4902a:	2c00      	cmp	r4, #0
   4902c:	d0f2      	beq.n	49014 <cJSON_CreateIntArray+0xc>
   4902e:	45b1      	cmp	r9, r6
   49030:	d9f1      	bls.n	49016 <cJSON_CreateIntArray+0xe>
        n = cJSON_CreateNumber(numbers[i]);
   49032:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
   49036:	f7cf fb45 	bl	186c4 <__aeabi_i2d>
   4903a:	ec41 0b10 	vmov	d0, r0, r1
   4903e:	f7d1 fc2b 	bl	1a898 <cJSON_CreateNumber>
        if (!n)
   49042:	4605      	mov	r5, r0
   49044:	b918      	cbnz	r0, 4904e <cJSON_CreateIntArray+0x46>
            cJSON_Delete(a);
   49046:	4620      	mov	r0, r4
   49048:	f7dc fb48 	bl	256dc <cJSON_Delete>
   4904c:	e7e2      	b.n	49014 <cJSON_CreateIntArray+0xc>
        if(!i)
   4904e:	b91e      	cbnz	r6, 49058 <cJSON_CreateIntArray+0x50>
            a->child = n;
   49050:	60a0      	str	r0, [r4, #8]
    for(i = 0; a && (i < (size_t)count); i++)
   49052:	3601      	adds	r6, #1
   49054:	462f      	mov	r7, r5
   49056:	e7e8      	b.n	4902a <cJSON_CreateIntArray+0x22>
    prev->next = item;
   49058:	6038      	str	r0, [r7, #0]
    item->prev = prev;
   4905a:	6047      	str	r7, [r0, #4]
   4905c:	e7f9      	b.n	49052 <cJSON_CreateIntArray+0x4a>

0004905e <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   4905e:	f000 bfc0 	b.w	49fe2 <k_free>

00049062 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   49062:	f7f4 b9e1 	b.w	3d428 <k_malloc>

00049066 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   49066:	b508      	push	{r3, lr}
	bsd_shutdown();
   49068:	f7e5 fb84 	bl	2e774 <bsd_shutdown>

	return 0;
}
   4906c:	2000      	movs	r0, #0
   4906e:	bd08      	pop	{r3, pc}

00049070 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   49070:	4668      	mov	r0, sp
   49072:	f020 0107 	bic.w	r1, r0, #7
   49076:	468d      	mov	sp, r1
   49078:	b501      	push	{r0, lr}
   4907a:	f7fe fdfd 	bl	47c78 <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   4907e:	f7e7 f9e7 	bl	30450 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   49082:	f7d8 fb75 	bl	21770 <_arch_isr_direct_pm>
   49086:	f7d8 fa55 	bl	21534 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   4908a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   4908e:	4685      	mov	sp, r0
   49090:	4770      	bx	lr

00049092 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   49092:	4668      	mov	r0, sp
   49094:	f020 0107 	bic.w	r1, r0, #7
   49098:	468d      	mov	sp, r1
   4909a:	b501      	push	{r0, lr}
   4909c:	f7fe fdec 	bl	47c78 <z_arch_isr_direct_header>
	IPC_IRQHandler();
   490a0:	f7e5 fcc8 	bl	2ea34 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   490a4:	f7d8 fb64 	bl	21770 <_arch_isr_direct_pm>
   490a8:	f7d8 fa44 	bl	21534 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   490ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   490b0:	4685      	mov	sp, r0
   490b2:	4770      	bx	lr

000490b4 <trace_task_create>:
{
   490b4:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   490b6:	201d      	movs	r0, #29
   490b8:	2200      	movs	r2, #0
   490ba:	2106      	movs	r1, #6
   490bc:	f7d8 fb26 	bl	2170c <z_arm_irq_priority_set>
}
   490c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   490c4:	201d      	movs	r0, #29
   490c6:	f7d8 bb11 	b.w	216ec <z_arch_irq_enable>

000490ca <read_task_create>:
{
   490ca:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   490cc:	201c      	movs	r0, #28
   490ce:	2200      	movs	r2, #0
   490d0:	2106      	movs	r1, #6
   490d2:	f7d8 fb1b 	bl	2170c <z_arm_irq_priority_set>
}
   490d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   490da:	201c      	movs	r0, #28
   490dc:	f7d8 bb06 	b.w	216ec <z_arch_irq_enable>

000490e0 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   490e0:	2000      	movs	r0, #0
   490e2:	4770      	bx	lr

000490e4 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   490e4:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   490e8:	bf18      	it	ne
   490ea:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   490ec:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   490ee:	bf48      	it	mi
   490f0:	f043 0308 	orrmi.w	r3, r3, #8
}
   490f4:	4618      	mov	r0, r3
   490f6:	4770      	bx	lr

000490f8 <z_to_nrf_family>:
	switch (z_family) {
   490f8:	2803      	cmp	r0, #3
   490fa:	d00f      	beq.n	4911c <z_to_nrf_family+0x24>
   490fc:	d806      	bhi.n	4910c <z_to_nrf_family+0x14>
   490fe:	2801      	cmp	r0, #1
   49100:	d00e      	beq.n	49120 <z_to_nrf_family+0x28>
   49102:	2802      	cmp	r0, #2
   49104:	d008      	beq.n	49118 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   49106:	f06f 0069 	mvn.w	r0, #105	; 0x69
   4910a:	4770      	bx	lr
	switch (z_family) {
   4910c:	2866      	cmp	r0, #102	; 0x66
   4910e:	d008      	beq.n	49122 <z_to_nrf_family+0x2a>
   49110:	2867      	cmp	r0, #103	; 0x67
   49112:	d1f8      	bne.n	49106 <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   49114:	2001      	movs	r0, #1
   49116:	4770      	bx	lr
		return NRF_AF_INET6;
   49118:	200a      	movs	r0, #10
   4911a:	4770      	bx	lr
		return NRF_AF_PACKET;
   4911c:	2005      	movs	r0, #5
   4911e:	4770      	bx	lr
		return NRF_AF_INET;
   49120:	2002      	movs	r0, #2
}
   49122:	4770      	bx	lr

00049124 <z_to_nrf_protocol>:
	switch (proto) {
   49124:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   49128:	d01d      	beq.n	49166 <z_to_nrf_protocol+0x42>
   4912a:	dc05      	bgt.n	49138 <z_to_nrf_protocol+0x14>
   4912c:	2806      	cmp	r0, #6
   4912e:	d020      	beq.n	49172 <z_to_nrf_protocol+0x4e>
   49130:	2811      	cmp	r0, #17
   49132:	d016      	beq.n	49162 <z_to_nrf_protocol+0x3e>
   49134:	b948      	cbnz	r0, 4914a <z_to_nrf_protocol+0x26>
   49136:	4770      	bx	lr
   49138:	f240 2301 	movw	r3, #513	; 0x201
   4913c:	4298      	cmp	r0, r3
   4913e:	d00f      	beq.n	49160 <z_to_nrf_protocol+0x3c>
   49140:	dc06      	bgt.n	49150 <z_to_nrf_protocol+0x2c>
   49142:	f240 1311 	movw	r3, #273	; 0x111
   49146:	4298      	cmp	r0, r3
   49148:	d010      	beq.n	4916c <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   4914a:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   4914e:	4770      	bx	lr
	switch (proto) {
   49150:	f240 2302 	movw	r3, #514	; 0x202
   49154:	4298      	cmp	r0, r3
   49156:	d003      	beq.n	49160 <z_to_nrf_protocol+0x3c>
   49158:	f240 2303 	movw	r3, #515	; 0x203
   4915c:	4298      	cmp	r0, r3
   4915e:	d1f4      	bne.n	4914a <z_to_nrf_protocol+0x26>
}
   49160:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   49162:	2002      	movs	r0, #2
   49164:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   49166:	f44f 7082 	mov.w	r0, #260	; 0x104
   4916a:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   4916c:	f44f 7087 	mov.w	r0, #270	; 0x10e
   49170:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   49172:	2001      	movs	r0, #1
   49174:	e7f4      	b.n	49160 <z_to_nrf_protocol+0x3c>

00049176 <nrf91_bsdlib_socket_offload_init>:
}
   49176:	2000      	movs	r0, #0
   49178:	4770      	bx	lr

0004917a <nrf91_socket_offload_freeaddrinfo>:
{
   4917a:	b538      	push	{r3, r4, r5, lr}
   4917c:	4604      	mov	r4, r0
	while (next != NULL) {
   4917e:	b904      	cbnz	r4, 49182 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   49180:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   49182:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   49184:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   49186:	f000 ff2c 	bl	49fe2 <k_free>
		k_free(this);
   4918a:	4620      	mov	r0, r4
   4918c:	f000 ff29 	bl	49fe2 <k_free>
		next = next->ai_next;
   49190:	462c      	mov	r4, r5
   49192:	e7f4      	b.n	4917e <nrf91_socket_offload_freeaddrinfo+0x4>

00049194 <z_to_nrf_addrinfo_hints>:
{
   49194:	b538      	push	{r3, r4, r5, lr}
   49196:	460c      	mov	r4, r1
   49198:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   4919a:	221c      	movs	r2, #28
   4919c:	2100      	movs	r1, #0
   4919e:	1d20      	adds	r0, r4, #4
   491a0:	f7f7 ff4a 	bl	41038 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   491a4:	2300      	movs	r3, #0
   491a6:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   491a8:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   491aa:	2b03      	cmp	r3, #3
   491ac:	d003      	beq.n	491b6 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   491ae:	2b04      	cmp	r3, #4
   491b0:	bf08      	it	eq
   491b2:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   491b6:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   491b8:	88a8      	ldrh	r0, [r5, #4]
   491ba:	f7ff ff9d 	bl	490f8 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   491be:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   491c2:	d00b      	beq.n	491dc <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   491c4:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   491c6:	68e8      	ldr	r0, [r5, #12]
   491c8:	f7ff ffac 	bl	49124 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   491cc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   491d0:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   491d2:	d003      	beq.n	491dc <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   491d4:	69a8      	ldr	r0, [r5, #24]
   491d6:	b108      	cbz	r0, 491dc <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   491d8:	61a0      	str	r0, [r4, #24]
	return 0;
   491da:	2000      	movs	r0, #0
}
   491dc:	bd38      	pop	{r3, r4, r5, pc}

000491de <nrf91_socket_offload_send>:
{
   491de:	b570      	push	{r4, r5, r6, lr}
   491e0:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   491e2:	4618      	mov	r0, r3
{
   491e4:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   491e6:	f7ff ff7d 	bl	490e4 <z_to_nrf_flags>
   491ea:	462a      	mov	r2, r5
   491ec:	4603      	mov	r3, r0
   491ee:	4620      	mov	r0, r4
}
   491f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   491f4:	f7e5 b9a4 	b.w	2e540 <nrf_send>

000491f8 <nrf91_socket_offload_recv>:
{
   491f8:	b570      	push	{r4, r5, r6, lr}
   491fa:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   491fc:	4618      	mov	r0, r3
{
   491fe:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   49200:	f7ff ff70 	bl	490e4 <z_to_nrf_flags>
   49204:	462a      	mov	r2, r5
   49206:	4603      	mov	r3, r0
   49208:	4620      	mov	r0, r4
}
   4920a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   4920e:	f7e5 b9e3 	b.w	2e5d8 <nrf_recv>

00049212 <nrf91_socket_offload_getsockopt>:
{
   49212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   49216:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   49218:	2300      	movs	r3, #0
{
   4921a:	b086      	sub	sp, #24
   4921c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   49220:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   49224:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   49228:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   4922c:	4607      	mov	r7, r0
   4922e:	460d      	mov	r5, r1
   49230:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   49232:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   49234:	d00d      	beq.n	49252 <nrf91_socket_offload_getsockopt+0x40>
   49236:	dc08      	bgt.n	4924a <nrf91_socket_offload_getsockopt+0x38>
   49238:	2901      	cmp	r1, #1
   4923a:	d00a      	beq.n	49252 <nrf91_socket_offload_getsockopt+0x40>
	errno = ENOPROTOOPT;
   4923c:	f7fe fd6c 	bl	47d18 <__errno>
   49240:	236d      	movs	r3, #109	; 0x6d
	return retval;
   49242:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   49246:	6003      	str	r3, [r0, #0]
	return retval;
   49248:	e029      	b.n	4929e <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   4924a:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   4924e:	2b01      	cmp	r3, #1
   49250:	d8f4      	bhi.n	4923c <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   49252:	aa02      	add	r2, sp, #8
   49254:	4631      	mov	r1, r6
   49256:	4628      	mov	r0, r5
   49258:	f7dc fd2e 	bl	25cb8 <z_to_nrf_optname>
   4925c:	2800      	cmp	r0, #0
   4925e:	dbed      	blt.n	4923c <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   49260:	2d01      	cmp	r5, #1
   49262:	d120      	bne.n	492a6 <nrf91_socket_offload_getsockopt+0x94>
   49264:	2e14      	cmp	r6, #20
   49266:	d11e      	bne.n	492a6 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   49268:	2308      	movs	r3, #8
   4926a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   4926c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   4926e:	aa03      	add	r2, sp, #12
   49270:	9200      	str	r2, [sp, #0]
   49272:	4638      	mov	r0, r7
   49274:	9a02      	ldr	r2, [sp, #8]
   49276:	4629      	mov	r1, r5
   49278:	f7e5 fa44 	bl	2e704 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   4927c:	4607      	mov	r7, r0
   4927e:	b970      	cbnz	r0, 4929e <nrf91_socket_offload_getsockopt+0x8c>
   49280:	b16c      	cbz	r4, 4929e <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   49282:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   49284:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   49286:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   4928a:	d108      	bne.n	4929e <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   4928c:	2e04      	cmp	r6, #4
   4928e:	d10c      	bne.n	492aa <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   49290:	6820      	ldr	r0, [r4, #0]
   49292:	f7dc fbef 	bl	25a74 <bsd_os_errno_set>
				*(int *)optval = errno;
   49296:	f7fe fd3f 	bl	47d18 <__errno>
   4929a:	6803      	ldr	r3, [r0, #0]
   4929c:	6023      	str	r3, [r4, #0]
}
   4929e:	4638      	mov	r0, r7
   492a0:	b006      	add	sp, #24
   492a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   492a6:	4623      	mov	r3, r4
   492a8:	e7e1      	b.n	4926e <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   492aa:	2e14      	cmp	r6, #20
   492ac:	d1f7      	bne.n	4929e <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   492ae:	9b04      	ldr	r3, [sp, #16]
   492b0:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   492b2:	9b05      	ldr	r3, [sp, #20]
   492b4:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   492b6:	2308      	movs	r3, #8
   492b8:	f8c8 3000 	str.w	r3, [r8]
   492bc:	e7ef      	b.n	4929e <nrf91_socket_offload_getsockopt+0x8c>

000492be <nrf91_socket_offload_poll>:
{
   492be:	b5f0      	push	{r4, r5, r6, r7, lr}
   492c0:	b091      	sub	sp, #68	; 0x44
   492c2:	4605      	mov	r5, r0
   492c4:	460c      	mov	r4, r1
   492c6:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   492c8:	2100      	movs	r1, #0
   492ca:	2240      	movs	r2, #64	; 0x40
   492cc:	4668      	mov	r0, sp
   492ce:	f7f7 feb3 	bl	41038 <memset>
	for (int i = 0; i < nfds; i++) {
   492d2:	2204      	movs	r2, #4
   492d4:	2100      	movs	r1, #0
   492d6:	42a1      	cmp	r1, r4
   492d8:	db0c      	blt.n	492f4 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   492da:	4632      	mov	r2, r6
   492dc:	4621      	mov	r1, r4
   492de:	4668      	mov	r0, sp
   492e0:	f7e5 fa30 	bl	2e744 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   492e4:	2200      	movs	r2, #0
   492e6:	462b      	mov	r3, r5
		fds[i].revents = 0;
   492e8:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   492ea:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   492ec:	42a2      	cmp	r2, r4
   492ee:	db1b      	blt.n	49328 <nrf91_socket_offload_poll+0x6a>
}
   492f0:	b011      	add	sp, #68	; 0x44
   492f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   492f4:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   492f8:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   492fa:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   492fe:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   49300:	bf48      	it	mi
   49302:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   49306:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   4930a:	bf44      	itt	mi
   4930c:	f043 0301 	orrmi.w	r3, r3, #1
   49310:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   49314:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   49316:	bf42      	ittt	mi
   49318:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   4931c:	f043 0302 	orrmi.w	r3, r3, #2
   49320:	f82d 3002 	strhmi.w	r3, [sp, r2]
   49324:	3208      	adds	r2, #8
   49326:	e7d6      	b.n	492d6 <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   49328:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   4932c:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   4932e:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   49330:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   49332:	bf48      	it	mi
   49334:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   49336:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   49338:	bf48      	it	mi
   4933a:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   4933c:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   49340:	bf44      	itt	mi
   49342:	f045 0504 	orrmi.w	r5, r5, #4
   49346:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   49348:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   4934a:	bf48      	it	mi
   4934c:	88dd      	ldrhmi	r5, [r3, #6]
   4934e:	f103 0308 	add.w	r3, r3, #8
   49352:	bf44      	itt	mi
   49354:	f045 0508 	orrmi.w	r5, r5, #8
   49358:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   4935c:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   4935e:	bf42      	ittt	mi
   49360:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   49364:	f045 0520 	orrmi.w	r5, r5, #32
   49368:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   4936c:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   4936e:	bf42      	ittt	mi
   49370:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   49374:	f041 0110 	orrmi.w	r1, r1, #16
   49378:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   4937c:	e7b6      	b.n	492ec <nrf91_socket_offload_poll+0x2e>

0004937e <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   4937e:	f7e5 b96d 	b.w	2e65c <nrf_listen>

00049382 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   49382:	f7e5 b8b3 	b.w	2e4ec <nrf_close>

00049386 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   49386:	2903      	cmp	r1, #3
{
   49388:	b508      	push	{r3, lr}
	switch (cmd) {
   4938a:	d00b      	beq.n	493a4 <nrf91_socket_offload_fcntl+0x1e>
   4938c:	2904      	cmp	r1, #4
   4938e:	d111      	bne.n	493b4 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   49390:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   49392:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   49396:	d10d      	bne.n	493b4 <nrf91_socket_offload_fcntl+0x2e>
}
   49398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   4939c:	1392      	asrs	r2, r2, #14
   4939e:	2101      	movs	r1, #1
   493a0:	f7e5 b9d2 	b.w	2e748 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   493a4:	2200      	movs	r2, #0
   493a6:	2102      	movs	r1, #2
   493a8:	f7e5 f9ce 	bl	2e748 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   493ac:	0380      	lsls	r0, r0, #14
   493ae:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   493b2:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   493b4:	f7fe fcb0 	bl	47d18 <__errno>
   493b8:	2316      	movs	r3, #22
   493ba:	6003      	str	r3, [r0, #0]
	return retval;
   493bc:	f04f 30ff 	mov.w	r0, #4294967295
   493c0:	e7f7      	b.n	493b2 <nrf91_socket_offload_fcntl+0x2c>

000493c2 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   493c2:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   493c4:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   493c6:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   493c8:	4603      	mov	r3, r0
{
   493ca:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   493cc:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   493d0:	f101 0210 	add.w	r2, r1, #16
   493d4:	f102 0410 	add.w	r4, r2, #16
   493d8:	f852 5b04 	ldr.w	r5, [r2], #4
   493dc:	42a2      	cmp	r2, r4
   493de:	f843 5b04 	str.w	r5, [r3], #4
   493e2:	d1f9      	bne.n	493d8 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   493e4:	6a0b      	ldr	r3, [r1, #32]
   493e6:	7503      	strb	r3, [r0, #20]
}
   493e8:	bd30      	pop	{r4, r5, pc}

000493ea <nrf91_socket_offload_getaddrinfo>:
{
   493ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   493ee:	4614      	mov	r4, r2
   493f0:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   493f2:	2100      	movs	r1, #0
{
   493f4:	b092      	sub	sp, #72	; 0x48
   493f6:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   493f8:	2220      	movs	r2, #32
   493fa:	a802      	add	r0, sp, #8
{
   493fc:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   493fe:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   49400:	f7f7 fe1a 	bl	41038 <memset>
	if (hints != NULL) {
   49404:	b19c      	cbz	r4, 4942e <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   49406:	a902      	add	r1, sp, #8
   49408:	4620      	mov	r0, r4
   4940a:	f7ff fec3 	bl	49194 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   4940e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   49412:	f000 80b0 	beq.w	49576 <nrf91_socket_offload_getaddrinfo+0x18c>
		} else if (error == -EAFNOSUPPORT) {
   49416:	306a      	adds	r0, #106	; 0x6a
   49418:	f000 80b0 	beq.w	4957c <nrf91_socket_offload_getaddrinfo+0x192>
		if (hints->ai_next != NULL) {
   4941c:	69e0      	ldr	r0, [r4, #28]
   4941e:	b120      	cbz	r0, 4942a <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   49420:	ac0a      	add	r4, sp, #40	; 0x28
   49422:	4621      	mov	r1, r4
   49424:	f7ff feb6 	bl	49194 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   49428:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   4942a:	aa02      	add	r2, sp, #8
   4942c:	e000      	b.n	49430 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   4942e:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   49430:	4631      	mov	r1, r6
   49432:	4628      	mov	r0, r5
   49434:	ab01      	add	r3, sp, #4
   49436:	f7e5 f981 	bl	2e73c <nrf_getaddrinfo>
	*res = NULL;
   4943a:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   4943c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   4943e:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   49442:	4605      	mov	r5, r0
   49444:	2800      	cmp	r0, #0
   49446:	d04c      	beq.n	494e2 <nrf91_socket_offload_getaddrinfo+0xf8>
		nrf91_socket_offload_freeaddrinfo(*res);
   49448:	f8d8 0000 	ldr.w	r0, [r8]
   4944c:	f7ff fe95 	bl	4917a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   49450:	2300      	movs	r3, #0
   49452:	f8c8 3000 	str.w	r3, [r8]
   49456:	e046      	b.n	494e6 <nrf91_socket_offload_getaddrinfo+0xfc>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   49458:	2020      	movs	r0, #32
   4945a:	f7f3 ffe5 	bl	3d428 <k_malloc>
		if (next_z_res == NULL) {
   4945e:	4604      	mov	r4, r0
   49460:	2800      	cmp	r0, #0
   49462:	f000 8083 	beq.w	4956c <nrf91_socket_offload_getaddrinfo+0x182>
	family = nrf_to_z_family(nrf_in->ai_family);
   49466:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   49468:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   4946a:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   4946c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   49470:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   49472:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   49474:	d03e      	beq.n	494f4 <nrf91_socket_offload_getaddrinfo+0x10a>
   49476:	dc09      	bgt.n	4948c <nrf91_socket_offload_getaddrinfo+0xa2>
   49478:	2a01      	cmp	r2, #1
   4947a:	d00d      	beq.n	49498 <nrf91_socket_offload_getaddrinfo+0xae>
   4947c:	2a02      	cmp	r2, #2
   4947e:	d03d      	beq.n	494fc <nrf91_socket_offload_getaddrinfo+0x112>
			k_free(next_z_res);
   49480:	4620      	mov	r0, r4
   49482:	f000 fdae 	bl	49fe2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   49486:	f06f 0508 	mvn.w	r5, #8
   4948a:	e7dd      	b.n	49448 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (nrf_family) {
   4948c:	2a0a      	cmp	r2, #10
   4948e:	d033      	beq.n	494f8 <nrf91_socket_offload_getaddrinfo+0x10e>
   49490:	2a66      	cmp	r2, #102	; 0x66
   49492:	d1f5      	bne.n	49480 <nrf91_socket_offload_getaddrinfo+0x96>
		return AF_LTE;
   49494:	4613      	mov	r3, r2
   49496:	e000      	b.n	4949a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_LOCAL;
   49498:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   4949a:	6063      	str	r3, [r4, #4]
	switch (proto) {
   4949c:	68f3      	ldr	r3, [r6, #12]
   4949e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   494a2:	d04c      	beq.n	4953e <nrf91_socket_offload_getaddrinfo+0x154>
   494a4:	dc2c      	bgt.n	49500 <nrf91_socket_offload_getaddrinfo+0x116>
   494a6:	2b01      	cmp	r3, #1
   494a8:	d04e      	beq.n	49548 <nrf91_socket_offload_getaddrinfo+0x15e>
   494aa:	2b02      	cmp	r3, #2
   494ac:	d04a      	beq.n	49544 <nrf91_socket_offload_getaddrinfo+0x15a>
   494ae:	2b00      	cmp	r3, #0
   494b0:	d12e      	bne.n	49510 <nrf91_socket_offload_getaddrinfo+0x126>
	if (nrf_in->ai_family == NRF_AF_INET) {
   494b2:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   494b4:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   494b6:	d149      	bne.n	4954c <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   494b8:	2008      	movs	r0, #8
   494ba:	f7f3 ffb5 	bl	3d428 <k_malloc>
   494be:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   494c0:	2800      	cmp	r0, #0
   494c2:	d050      	beq.n	49566 <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   494c4:	2308      	movs	r3, #8
   494c6:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   494c8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   494ca:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   494cc:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   494ce:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   494d0:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   494d2:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   494d4:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   494d6:	2f00      	cmp	r7, #0
   494d8:	d14b      	bne.n	49572 <nrf91_socket_offload_getaddrinfo+0x188>
			*res = next_z_res;
   494da:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   494de:	4627      	mov	r7, r4
   494e0:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   494e2:	2e00      	cmp	r6, #0
   494e4:	d1b8      	bne.n	49458 <nrf91_socket_offload_getaddrinfo+0x6e>
	nrf_freeaddrinfo(nrf_res);
   494e6:	9801      	ldr	r0, [sp, #4]
   494e8:	f7e5 f92a 	bl	2e740 <nrf_freeaddrinfo>
}
   494ec:	4628      	mov	r0, r5
   494ee:	b012      	add	sp, #72	; 0x48
   494f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   494f4:	2303      	movs	r3, #3
   494f6:	e7d0      	b.n	4949a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET6;
   494f8:	2302      	movs	r3, #2
   494fa:	e7ce      	b.n	4949a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET;
   494fc:	2301      	movs	r3, #1
   494fe:	e7cc      	b.n	4949a <nrf91_socket_offload_getaddrinfo+0xb0>
	switch (proto) {
   49500:	f240 2101 	movw	r1, #513	; 0x201
   49504:	428b      	cmp	r3, r1
   49506:	d0d4      	beq.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   49508:	dc0d      	bgt.n	49526 <nrf91_socket_offload_getaddrinfo+0x13c>
   4950a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   4950e:	d013      	beq.n	49538 <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   49510:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   49514:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   49516:	2300      	movs	r3, #0
   49518:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   4951a:	4620      	mov	r0, r4
   4951c:	f000 fd61 	bl	49fe2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   49520:	f06f 0506 	mvn.w	r5, #6
   49524:	e790      	b.n	49448 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (proto) {
   49526:	f240 2102 	movw	r1, #514	; 0x202
   4952a:	428b      	cmp	r3, r1
   4952c:	d0c1      	beq.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   4952e:	f240 2103 	movw	r1, #515	; 0x203
   49532:	428b      	cmp	r3, r1
   49534:	d0bd      	beq.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   49536:	e7eb      	b.n	49510 <nrf91_socket_offload_getaddrinfo+0x126>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   49538:	f240 1311 	movw	r3, #273	; 0x111
   4953c:	e7b9      	b.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   4953e:	f44f 7381 	mov.w	r3, #258	; 0x102
   49542:	e7b6      	b.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   49544:	2311      	movs	r3, #17
   49546:	e7b4      	b.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
   49548:	2306      	movs	r3, #6
   4954a:	e7b2      	b.n	494b2 <nrf91_socket_offload_getaddrinfo+0xc8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   4954c:	2a0a      	cmp	r2, #10
   4954e:	d1e4      	bne.n	4951a <nrf91_socket_offload_getaddrinfo+0x130>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   49550:	2018      	movs	r0, #24
   49552:	f7f3 ff69 	bl	3d428 <k_malloc>
   49556:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   49558:	b128      	cbz	r0, 49566 <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   4955a:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   4955c:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   4955e:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   49560:	f7ff ff2f 	bl	493c2 <nrf_to_z_ipv6>
   49564:	e7b7      	b.n	494d6 <nrf91_socket_offload_getaddrinfo+0xec>
			k_free(next_z_res);
   49566:	4620      	mov	r0, r4
   49568:	f000 fd3b 	bl	49fe2 <k_free>
			retval = DNS_EAI_MEMORY;
   4956c:	f06f 0509 	mvn.w	r5, #9
   49570:	e76a      	b.n	49448 <nrf91_socket_offload_getaddrinfo+0x5e>
			latest_z_res->ai_next = next_z_res;
   49572:	61fc      	str	r4, [r7, #28]
   49574:	e7b3      	b.n	494de <nrf91_socket_offload_getaddrinfo+0xf4>
			return DNS_EAI_SOCKTYPE;
   49576:	f06f 0506 	mvn.w	r5, #6
   4957a:	e7b7      	b.n	494ec <nrf91_socket_offload_getaddrinfo+0x102>
			return DNS_EAI_ADDRFAMILY;
   4957c:	f06f 0508 	mvn.w	r5, #8
   49580:	e7b4      	b.n	494ec <nrf91_socket_offload_getaddrinfo+0x102>

00049582 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   49582:	2224      	movs	r2, #36	; 0x24
{
   49584:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   49586:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   49588:	8842      	ldrh	r2, [r0, #2]
{
   4958a:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   4958c:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   4958e:	220a      	movs	r2, #10
{
   49590:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   49592:	604a      	str	r2, [r1, #4]
   49594:	f101 0610 	add.w	r6, r1, #16
   49598:	1d02      	adds	r2, r0, #4
   4959a:	f100 0714 	add.w	r7, r0, #20
   4959e:	4635      	mov	r5, r6
   495a0:	6810      	ldr	r0, [r2, #0]
   495a2:	6851      	ldr	r1, [r2, #4]
   495a4:	3208      	adds	r2, #8
   495a6:	c503      	stmia	r5!, {r0, r1}
   495a8:	42ba      	cmp	r2, r7
   495aa:	462e      	mov	r6, r5
   495ac:	d1f7      	bne.n	4959e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   495ae:	7d22      	ldrb	r2, [r4, #20]
   495b0:	621a      	str	r2, [r3, #32]
}
   495b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000495b4 <nrf91_socket_offload_sendto>:
{
   495b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   495b8:	b08d      	sub	sp, #52	; 0x34
   495ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
   495bc:	4605      	mov	r5, r0
   495be:	460e      	mov	r6, r1
   495c0:	4617      	mov	r7, r2
   495c2:	4698      	mov	r8, r3
	if (to == NULL) {
   495c4:	b96c      	cbnz	r4, 495e2 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   495c6:	4618      	mov	r0, r3
   495c8:	f7ff fd8c 	bl	490e4 <z_to_nrf_flags>
   495cc:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   495d0:	4603      	mov	r3, r0
   495d2:	463a      	mov	r2, r7
   495d4:	4631      	mov	r1, r6
   495d6:	4628      	mov	r0, r5
   495d8:	f7e4 ff96 	bl	2e508 <nrf_sendto>
}
   495dc:	b00d      	add	sp, #52	; 0x34
   495de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   495e2:	8823      	ldrh	r3, [r4, #0]
   495e4:	2b01      	cmp	r3, #1
   495e6:	d110      	bne.n	4960a <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   495e8:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   495ea:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   495ec:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   495f0:	2302      	movs	r3, #2
   495f2:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   495f4:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   495f6:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   495f8:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   495fa:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   495fe:	f7ff fd71 	bl	490e4 <z_to_nrf_flags>
   49602:	ab03      	add	r3, sp, #12
   49604:	9101      	str	r1, [sp, #4]
   49606:	9300      	str	r3, [sp, #0]
   49608:	e7e2      	b.n	495d0 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   4960a:	2b02      	cmp	r3, #2
   4960c:	d10c      	bne.n	49628 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   4960e:	f10d 090c 	add.w	r9, sp, #12
   49612:	4649      	mov	r1, r9
   49614:	4620      	mov	r0, r4
   49616:	f7ff ffb4 	bl	49582 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   4961a:	4640      	mov	r0, r8
   4961c:	f7ff fd62 	bl	490e4 <z_to_nrf_flags>
   49620:	2324      	movs	r3, #36	; 0x24
   49622:	e9cd 9300 	strd	r9, r3, [sp]
   49626:	e7d3      	b.n	495d0 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   49628:	f7fe fb76 	bl	47d18 <__errno>
   4962c:	2386      	movs	r3, #134	; 0x86
   4962e:	6003      	str	r3, [r0, #0]
	return retval;
   49630:	f04f 30ff 	mov.w	r0, #4294967295
   49634:	e7d2      	b.n	495dc <nrf91_socket_offload_sendto+0x28>

00049636 <nrf91_socket_offload_recvfrom>:
{
   49636:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4963a:	4680      	mov	r8, r0
   4963c:	b08d      	sub	sp, #52	; 0x34
   4963e:	4618      	mov	r0, r3
   49640:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   49644:	4691      	mov	r9, r2
   49646:	f7ff fd4d 	bl	490e4 <z_to_nrf_flags>
   4964a:	4603      	mov	r3, r0
	if (from == NULL) {
   4964c:	b954      	cbnz	r4, 49664 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   4964e:	e9cd 4400 	strd	r4, r4, [sp]
   49652:	464a      	mov	r2, r9
   49654:	4640      	mov	r0, r8
   49656:	f7e4 ffa3 	bl	2e5a0 <nrf_recvfrom>
   4965a:	4605      	mov	r5, r0
}
   4965c:	4628      	mov	r0, r5
   4965e:	b00d      	add	sp, #52	; 0x34
   49660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   49664:	2224      	movs	r2, #36	; 0x24
   49666:	ad0c      	add	r5, sp, #48	; 0x30
   49668:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4966c:	af03      	add	r7, sp, #12
   4966e:	9501      	str	r5, [sp, #4]
   49670:	9700      	str	r7, [sp, #0]
   49672:	464a      	mov	r2, r9
   49674:	4640      	mov	r0, r8
   49676:	f7e4 ff93 	bl	2e5a0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   4967a:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4967c:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   4967e:	2b02      	cmp	r3, #2
   49680:	d109      	bne.n	49696 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   49682:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   49686:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   49688:	2301      	movs	r3, #1
   4968a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4968c:	9b06      	ldr	r3, [sp, #24]
   4968e:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   49690:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   49692:	6033      	str	r3, [r6, #0]
	return retval;
   49694:	e7e2      	b.n	4965c <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   49696:	2b0a      	cmp	r3, #10
   49698:	d1e0      	bne.n	4965c <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   4969a:	4639      	mov	r1, r7
   4969c:	4620      	mov	r0, r4
   4969e:	f7ff fe90 	bl	493c2 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   496a2:	2318      	movs	r3, #24
   496a4:	e7f5      	b.n	49692 <nrf91_socket_offload_recvfrom+0x5c>

000496a6 <nrf91_socket_offload_connect>:
{
   496a6:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   496a8:	880c      	ldrh	r4, [r1, #0]
{
   496aa:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   496ac:	2c01      	cmp	r4, #1
{
   496ae:	4605      	mov	r5, r0
   496b0:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   496b2:	d10e      	bne.n	496d2 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   496b4:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   496b6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   496b8:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   496bc:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   496be:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   496c0:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   496c2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   496c6:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   496c8:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   496ca:	f7e4 ffb5 	bl	2e638 <nrf_connect>
}
   496ce:	b00b      	add	sp, #44	; 0x2c
   496d0:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   496d2:	2c02      	cmp	r4, #2
   496d4:	d107      	bne.n	496e6 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   496d6:	a901      	add	r1, sp, #4
   496d8:	4618      	mov	r0, r3
   496da:	f7ff ff52 	bl	49582 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   496de:	2224      	movs	r2, #36	; 0x24
   496e0:	a901      	add	r1, sp, #4
   496e2:	4628      	mov	r0, r5
   496e4:	e7f1      	b.n	496ca <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   496e6:	f7e4 ffa7 	bl	2e638 <nrf_connect>
		if (retval < 0) {
   496ea:	2800      	cmp	r0, #0
   496ec:	daef      	bge.n	496ce <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   496ee:	f7fe fb13 	bl	47d18 <__errno>
   496f2:	2386      	movs	r3, #134	; 0x86
   496f4:	6003      	str	r3, [r0, #0]
   496f6:	f04f 30ff 	mov.w	r0, #4294967295
   496fa:	e7e8      	b.n	496ce <nrf91_socket_offload_connect+0x28>

000496fc <nrf91_socket_offload_accept>:
{
   496fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   496fe:	2708      	movs	r7, #8
{
   49700:	b085      	sub	sp, #20
   49702:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   49704:	aa04      	add	r2, sp, #16
{
   49706:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   49708:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   4970c:	eb0d 0107 	add.w	r1, sp, r7
   49710:	f7e4 ffb4 	bl	2e67c <nrf_accept>
	if (retval < 0) {
   49714:	1e05      	subs	r5, r0, #0
   49716:	db1a      	blt.n	4974e <nrf91_socket_offload_accept+0x52>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   49718:	9b03      	ldr	r3, [sp, #12]
   4971a:	2b02      	cmp	r3, #2
   4971c:	d10a      	bne.n	49734 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   4971e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   49722:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   49724:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   49726:	2301      	movs	r3, #1
   49728:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4972a:	9b05      	ldr	r3, [sp, #20]
   4972c:	6063      	str	r3, [r4, #4]
}
   4972e:	4628      	mov	r0, r5
   49730:	b005      	add	sp, #20
   49732:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   49734:	2b0a      	cmp	r3, #10
   49736:	d106      	bne.n	49746 <nrf91_socket_offload_accept+0x4a>
		*addrlen = sizeof(struct sockaddr_in6);
   49738:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   4973a:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   4973c:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   4973e:	4620      	mov	r0, r4
   49740:	f7ff fe3f 	bl	493c2 <nrf_to_z_ipv6>
   49744:	e7f3      	b.n	4972e <nrf91_socket_offload_accept+0x32>
	errno = ENOTSUP;
   49746:	f7fe fae7 	bl	47d18 <__errno>
   4974a:	2386      	movs	r3, #134	; 0x86
   4974c:	6003      	str	r3, [r0, #0]
		return -1;
   4974e:	f04f 35ff 	mov.w	r5, #4294967295
   49752:	e7ec      	b.n	4972e <nrf91_socket_offload_accept+0x32>

00049754 <nrf91_socket_offload_socket>:
{
   49754:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   49756:	b280      	uxth	r0, r0
   49758:	f7ff fcce 	bl	490f8 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   4975c:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   49760:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   49762:	d106      	bne.n	49772 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   49764:	f7fe fad8 	bl	47d18 <__errno>
   49768:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   4976a:	6003      	str	r3, [r0, #0]
}
   4976c:	f04f 30ff 	mov.w	r0, #4294967295
   49770:	bd10      	pop	{r4, pc}
	switch (socktype) {
   49772:	2903      	cmp	r1, #3
   49774:	d003      	beq.n	4977e <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   49776:	2904      	cmp	r1, #4
   49778:	bf08      	it	eq
   4977a:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   4977e:	4610      	mov	r0, r2
   49780:	f7ff fcd0 	bl	49124 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   49784:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   49788:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   4978a:	d103      	bne.n	49794 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   4978c:	f7fe fac4 	bl	47d18 <__errno>
   49790:	237b      	movs	r3, #123	; 0x7b
   49792:	e7ea      	b.n	4976a <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   49794:	4620      	mov	r0, r4
}
   49796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   4979a:	f7e4 be95 	b.w	2e4c8 <nrf_socket>

0004979e <nrf91_socket_offload_setsockopt>:
{
   4979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   497a2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   497a6:	b086      	sub	sp, #24
   497a8:	4680      	mov	r8, r0
   497aa:	460c      	mov	r4, r1
   497ac:	4617      	mov	r7, r2
   497ae:	461d      	mov	r5, r3
   497b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   497b2:	d00d      	beq.n	497d0 <nrf91_socket_offload_setsockopt+0x32>
   497b4:	dc08      	bgt.n	497c8 <nrf91_socket_offload_setsockopt+0x2a>
   497b6:	2901      	cmp	r1, #1
   497b8:	d00a      	beq.n	497d0 <nrf91_socket_offload_setsockopt+0x32>
	errno = ENOPROTOOPT;
   497ba:	f7fe faad 	bl	47d18 <__errno>
   497be:	236d      	movs	r3, #109	; 0x6d
   497c0:	6003      	str	r3, [r0, #0]
   497c2:	f04f 30ff 	mov.w	r0, #4294967295
   497c6:	e01b      	b.n	49800 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   497c8:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   497cc:	2b01      	cmp	r3, #1
   497ce:	d8f4      	bhi.n	497ba <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   497d0:	aa03      	add	r2, sp, #12
   497d2:	4639      	mov	r1, r7
   497d4:	4620      	mov	r0, r4
   497d6:	f7dc fa6f 	bl	25cb8 <z_to_nrf_optname>
   497da:	2800      	cmp	r0, #0
   497dc:	dbed      	blt.n	497ba <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   497de:	2c01      	cmp	r4, #1
   497e0:	d107      	bne.n	497f2 <nrf91_socket_offload_setsockopt+0x54>
   497e2:	2f14      	cmp	r7, #20
   497e4:	d105      	bne.n	497f2 <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   497e6:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   497e8:	682b      	ldr	r3, [r5, #0]
   497ea:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   497ec:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   497ee:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   497f0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   497f2:	9600      	str	r6, [sp, #0]
   497f4:	462b      	mov	r3, r5
   497f6:	9a03      	ldr	r2, [sp, #12]
   497f8:	4621      	mov	r1, r4
   497fa:	4640      	mov	r0, r8
   497fc:	f7e4 ff66 	bl	2e6cc <nrf_setsockopt>
}
   49800:	b006      	add	sp, #24
   49802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049806 <nrf91_socket_offload_bind>:
{
   49806:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   49808:	880a      	ldrh	r2, [r1, #0]
{
   4980a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   4980c:	2a01      	cmp	r2, #1
{
   4980e:	4604      	mov	r4, r0
   49810:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   49812:	d10e      	bne.n	49832 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   49814:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   49816:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   49818:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   4981c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4981e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   49820:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   49822:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   49826:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   49828:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   4982a:	f7e4 ff3d 	bl	2e6a8 <nrf_bind>
}
   4982e:	b00a      	add	sp, #40	; 0x28
   49830:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   49832:	2a02      	cmp	r2, #2
   49834:	d107      	bne.n	49846 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   49836:	a901      	add	r1, sp, #4
   49838:	4618      	mov	r0, r3
   4983a:	f7ff fea2 	bl	49582 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   4983e:	2224      	movs	r2, #36	; 0x24
   49840:	a901      	add	r1, sp, #4
   49842:	4620      	mov	r0, r4
   49844:	e7f1      	b.n	4982a <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   49846:	f7fe fa67 	bl	47d18 <__errno>
   4984a:	2386      	movs	r3, #134	; 0x86
   4984c:	6003      	str	r3, [r0, #0]
   4984e:	f04f 30ff 	mov.w	r0, #4294967295
   49852:	e7ec      	b.n	4982e <nrf91_socket_offload_bind+0x28>

00049854 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   49854:	6843      	ldr	r3, [r0, #4]
   49856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   49858:	b103      	cbz	r3, 4985c <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   4985a:	4718      	bx	r3
}
   4985c:	4770      	bx	lr

0004985e <response_handler>:
	write_uart_string(response);
   4985e:	4608      	mov	r0, r1
   49860:	f7dc bd92 	b.w	26388 <write_uart_string>

00049864 <at_params_list_init>:
{
   49864:	b538      	push	{r3, r4, r5, lr}
   49866:	460d      	mov	r5, r1
	if (list == NULL) {
   49868:	4604      	mov	r4, r0
   4986a:	b140      	cbz	r0, 4987e <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   4986c:	210c      	movs	r1, #12
   4986e:	4628      	mov	r0, r5
   49870:	f000 fbbc 	bl	49fec <k_calloc>
   49874:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   49876:	b128      	cbz	r0, 49884 <at_params_list_init+0x20>
	return 0;
   49878:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   4987a:	6025      	str	r5, [r4, #0]
}
   4987c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4987e:	f06f 0015 	mvn.w	r0, #21
   49882:	e7fb      	b.n	4987c <at_params_list_init+0x18>
		return -ENOMEM;
   49884:	f06f 000b 	mvn.w	r0, #11
   49888:	e7f8      	b.n	4987c <at_params_list_init+0x18>

0004988a <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   4988a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   4988c:	4604      	mov	r4, r0
   4988e:	b148      	cbz	r0, 498a4 <at_params_list_free+0x1a>
   49890:	6843      	ldr	r3, [r0, #4]
   49892:	b13b      	cbz	r3, 498a4 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   49894:	2500      	movs	r5, #0
	at_params_list_clear(list);
   49896:	f7dd f93d 	bl	26b14 <at_params_list_clear>
	list->param_count = 0;
   4989a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   4989c:	6860      	ldr	r0, [r4, #4]
   4989e:	f000 fba0 	bl	49fe2 <k_free>
	list->params = NULL;
   498a2:	6065      	str	r5, [r4, #4]
}
   498a4:	bd38      	pop	{r3, r4, r5, pc}

000498a6 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   498a6:	b538      	push	{r3, r4, r5, lr}
   498a8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   498aa:	b910      	cbnz	r0, 498b2 <at_params_short_put+0xc>
		return -EINVAL;
   498ac:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   498b0:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   498b2:	6843      	ldr	r3, [r0, #4]
   498b4:	2b00      	cmp	r3, #0
   498b6:	d0f9      	beq.n	498ac <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   498b8:	f7dd f8c0 	bl	26a3c <at_params_get>
	if (param == NULL) {
   498bc:	4604      	mov	r4, r0
   498be:	2800      	cmp	r0, #0
   498c0:	d0f4      	beq.n	498ac <at_params_short_put+0x6>
	at_param_clear(param);
   498c2:	f7dd f905 	bl	26ad0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   498c6:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   498c8:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   498ca:	7023      	strb	r3, [r4, #0]
	return 0;
   498cc:	2000      	movs	r0, #0
   498ce:	e7ef      	b.n	498b0 <at_params_short_put+0xa>

000498d0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   498d0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   498d2:	b910      	cbnz	r0, 498da <at_params_empty_put+0xa>
		return -EINVAL;
   498d4:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   498d8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   498da:	6843      	ldr	r3, [r0, #4]
   498dc:	2b00      	cmp	r3, #0
   498de:	d0f9      	beq.n	498d4 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   498e0:	f7dd f8ac 	bl	26a3c <at_params_get>
	if (param == NULL) {
   498e4:	4604      	mov	r4, r0
   498e6:	2800      	cmp	r0, #0
   498e8:	d0f4      	beq.n	498d4 <at_params_empty_put+0x4>
	at_param_clear(param);
   498ea:	f7dd f8f1 	bl	26ad0 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   498ee:	2305      	movs	r3, #5
	param->value.int_val = 0;
   498f0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   498f2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   498f4:	60a0      	str	r0, [r4, #8]
	return 0;
   498f6:	e7ef      	b.n	498d8 <at_params_empty_put+0x8>

000498f8 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   498f8:	b538      	push	{r3, r4, r5, lr}
   498fa:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   498fc:	b910      	cbnz	r0, 49904 <at_params_int_put+0xc>
		return -EINVAL;
   498fe:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   49902:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   49904:	6843      	ldr	r3, [r0, #4]
   49906:	2b00      	cmp	r3, #0
   49908:	d0f9      	beq.n	498fe <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   4990a:	f7dd f897 	bl	26a3c <at_params_get>
	if (param == NULL) {
   4990e:	4604      	mov	r4, r0
   49910:	2800      	cmp	r0, #0
   49912:	d0f4      	beq.n	498fe <at_params_int_put+0x6>
	at_param_clear(param);
   49914:	f7dd f8dc 	bl	26ad0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   49918:	2302      	movs	r3, #2
	param->value.int_val = value;
   4991a:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   4991c:	7023      	strb	r3, [r4, #0]
	return 0;
   4991e:	2000      	movs	r0, #0
   49920:	e7ef      	b.n	49902 <at_params_int_put+0xa>

00049922 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   49922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49924:	4616      	mov	r6, r2
   49926:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   49928:	b910      	cbnz	r0, 49930 <at_params_string_put+0xe>
		return -EINVAL;
   4992a:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   4992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   49930:	6843      	ldr	r3, [r0, #4]
   49932:	2b00      	cmp	r3, #0
   49934:	d0f9      	beq.n	4992a <at_params_string_put+0x8>
   49936:	2a00      	cmp	r2, #0
   49938:	d0f7      	beq.n	4992a <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   4993a:	f7dd f87f 	bl	26a3c <at_params_get>
	if (param == NULL) {
   4993e:	4604      	mov	r4, r0
   49940:	2800      	cmp	r0, #0
   49942:	d0f2      	beq.n	4992a <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   49944:	1c68      	adds	r0, r5, #1
   49946:	f7f3 fd6f 	bl	3d428 <k_malloc>
	if (param_value == NULL) {
   4994a:	4607      	mov	r7, r0
   4994c:	b160      	cbz	r0, 49968 <at_params_string_put+0x46>
   4994e:	462a      	mov	r2, r5
   49950:	4631      	mov	r1, r6
   49952:	f7d0 faad 	bl	19eb0 <memcpy>
	at_param_clear(param);
   49956:	4620      	mov	r0, r4
   49958:	f7dd f8ba 	bl	26ad0 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   4995c:	2303      	movs	r3, #3
	param->size = str_len;
   4995e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   49960:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   49962:	60a7      	str	r7, [r4, #8]
	return 0;
   49964:	2000      	movs	r0, #0
   49966:	e7e2      	b.n	4992e <at_params_string_put+0xc>
		return -ENOMEM;
   49968:	f06f 000b 	mvn.w	r0, #11
   4996c:	e7df      	b.n	4992e <at_params_string_put+0xc>

0004996e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   4996e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49970:	4616      	mov	r6, r2
   49972:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   49974:	b910      	cbnz	r0, 4997c <at_params_array_put+0xe>
		return -EINVAL;
   49976:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   4997a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   4997c:	6843      	ldr	r3, [r0, #4]
   4997e:	2b00      	cmp	r3, #0
   49980:	d0f9      	beq.n	49976 <at_params_array_put+0x8>
   49982:	2a00      	cmp	r2, #0
   49984:	d0f7      	beq.n	49976 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   49986:	f7dd f859 	bl	26a3c <at_params_get>
	if (param == NULL) {
   4998a:	4604      	mov	r4, r0
   4998c:	2800      	cmp	r0, #0
   4998e:	d0f2      	beq.n	49976 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   49990:	4628      	mov	r0, r5
   49992:	f7f3 fd49 	bl	3d428 <k_malloc>
	if (param_value == NULL) {
   49996:	4607      	mov	r7, r0
   49998:	b160      	cbz	r0, 499b4 <at_params_array_put+0x46>
   4999a:	462a      	mov	r2, r5
   4999c:	4631      	mov	r1, r6
   4999e:	f7d0 fa87 	bl	19eb0 <memcpy>
	at_param_clear(param);
   499a2:	4620      	mov	r0, r4
   499a4:	f7dd f894 	bl	26ad0 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   499a8:	2304      	movs	r3, #4
	param->size = array_len;
   499aa:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   499ac:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   499ae:	60a7      	str	r7, [r4, #8]
	return 0;
   499b0:	2000      	movs	r0, #0
   499b2:	e7e2      	b.n	4997a <at_params_array_put+0xc>
		return -ENOMEM;
   499b4:	f06f 000b 	mvn.w	r0, #11
   499b8:	e7df      	b.n	4997a <at_params_array_put+0xc>

000499ba <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   499ba:	b510      	push	{r4, lr}
   499bc:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   499be:	b910      	cbnz	r0, 499c6 <at_params_short_get+0xc>
		return -EINVAL;
   499c0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   499c4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   499c6:	6843      	ldr	r3, [r0, #4]
   499c8:	2b00      	cmp	r3, #0
   499ca:	d0f9      	beq.n	499c0 <at_params_short_get+0x6>
   499cc:	2a00      	cmp	r2, #0
   499ce:	d0f7      	beq.n	499c0 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   499d0:	f7dd f834 	bl	26a3c <at_params_get>
	if (param == NULL) {
   499d4:	2800      	cmp	r0, #0
   499d6:	d0f3      	beq.n	499c0 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   499d8:	7803      	ldrb	r3, [r0, #0]
   499da:	2b01      	cmp	r3, #1
   499dc:	d1f0      	bne.n	499c0 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   499de:	6883      	ldr	r3, [r0, #8]
	return 0;
   499e0:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   499e2:	8023      	strh	r3, [r4, #0]
	return 0;
   499e4:	e7ee      	b.n	499c4 <at_params_short_get+0xa>

000499e6 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   499e6:	b510      	push	{r4, lr}
   499e8:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   499ea:	b910      	cbnz	r0, 499f2 <at_params_int_get+0xc>
		return -EINVAL;
   499ec:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   499f0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   499f2:	6843      	ldr	r3, [r0, #4]
   499f4:	2b00      	cmp	r3, #0
   499f6:	d0f9      	beq.n	499ec <at_params_int_get+0x6>
   499f8:	2a00      	cmp	r2, #0
   499fa:	d0f7      	beq.n	499ec <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   499fc:	f7dd f81e 	bl	26a3c <at_params_get>
	if (param == NULL) {
   49a00:	2800      	cmp	r0, #0
   49a02:	d0f3      	beq.n	499ec <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   49a04:	7803      	ldrb	r3, [r0, #0]
   49a06:	3b01      	subs	r3, #1
   49a08:	2b01      	cmp	r3, #1
   49a0a:	d8ef      	bhi.n	499ec <at_params_int_get+0x6>
	*value = param->value.int_val;
   49a0c:	6883      	ldr	r3, [r0, #8]
	return 0;
   49a0e:	2000      	movs	r0, #0
	*value = param->value.int_val;
   49a10:	6023      	str	r3, [r4, #0]
	return 0;
   49a12:	e7ed      	b.n	499f0 <at_params_int_get+0xa>

00049a14 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   49a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49a16:	4616      	mov	r6, r2
   49a18:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   49a1a:	b910      	cbnz	r0, 49a22 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   49a1c:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   49a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   49a22:	6843      	ldr	r3, [r0, #4]
   49a24:	2b00      	cmp	r3, #0
   49a26:	d0f9      	beq.n	49a1c <at_params_string_get+0x8>
   49a28:	2a00      	cmp	r2, #0
   49a2a:	d0f7      	beq.n	49a1c <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   49a2c:	2c00      	cmp	r4, #0
   49a2e:	d0f5      	beq.n	49a1c <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   49a30:	f7dd f804 	bl	26a3c <at_params_get>
	if (param == NULL) {
   49a34:	4607      	mov	r7, r0
   49a36:	2800      	cmp	r0, #0
   49a38:	d0f0      	beq.n	49a1c <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   49a3a:	7803      	ldrb	r3, [r0, #0]
   49a3c:	2b03      	cmp	r3, #3
   49a3e:	d1ed      	bne.n	49a1c <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   49a40:	f7dd f81e 	bl	26a80 <at_param_size>
	if (*len < param_len) {
   49a44:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   49a46:	4605      	mov	r5, r0
	if (*len < param_len) {
   49a48:	4283      	cmp	r3, r0
   49a4a:	d307      	bcc.n	49a5c <at_params_string_get+0x48>
   49a4c:	4602      	mov	r2, r0
   49a4e:	68b9      	ldr	r1, [r7, #8]
   49a50:	4630      	mov	r0, r6
   49a52:	f7d0 fa2d 	bl	19eb0 <memcpy>
	*len = param_len;
   49a56:	6025      	str	r5, [r4, #0]
	return 0;
   49a58:	2000      	movs	r0, #0
   49a5a:	e7e1      	b.n	49a20 <at_params_string_get+0xc>
		return -ENOMEM;
   49a5c:	f06f 000b 	mvn.w	r0, #11
   49a60:	e7de      	b.n	49a20 <at_params_string_get+0xc>

00049a62 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   49a62:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   49a64:	4605      	mov	r5, r0
   49a66:	b180      	cbz	r0, 49a8a <at_params_valid_count_get+0x28>
   49a68:	6843      	ldr	r3, [r0, #4]
   49a6a:	b173      	cbz	r3, 49a8a <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   49a6c:	2100      	movs	r1, #0
   49a6e:	f7dc ffe5 	bl	26a3c <at_params_get>
	size_t valid_i = 0;
   49a72:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   49a74:	b108      	cbz	r0, 49a7a <at_params_valid_count_get+0x18>
   49a76:	7803      	ldrb	r3, [r0, #0]
   49a78:	b90b      	cbnz	r3, 49a7e <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   49a7a:	4620      	mov	r0, r4
   49a7c:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   49a7e:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   49a80:	4621      	mov	r1, r4
   49a82:	4628      	mov	r0, r5
   49a84:	f7dc ffda 	bl	26a3c <at_params_get>
   49a88:	e7f4      	b.n	49a74 <at_params_valid_count_get+0x12>
		return -EINVAL;
   49a8a:	f06f 0415 	mvn.w	r4, #21
   49a8e:	e7f4      	b.n	49a7a <at_params_valid_count_get+0x18>

00049a90 <json_add_str>:
{
   49a90:	b538      	push	{r3, r4, r5, lr}
   49a92:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   49a94:	4604      	mov	r4, r0
   49a96:	b158      	cbz	r0, 49ab0 <json_add_str+0x20>
   49a98:	b152      	cbz	r2, 49ab0 <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   49a9a:	4610      	mov	r0, r2
   49a9c:	f7db fec0 	bl	25820 <cJSON_CreateString>
	if (json_str == NULL) {
   49aa0:	4602      	mov	r2, r0
   49aa2:	b140      	cbz	r0, 49ab6 <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   49aa4:	4620      	mov	r0, r4
   49aa6:	4629      	mov	r1, r5
   49aa8:	f7ff faab 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   49aac:	2000      	movs	r0, #0
}
   49aae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   49ab0:	f06f 0015 	mvn.w	r0, #21
   49ab4:	e7fb      	b.n	49aae <json_add_str+0x1e>
		return -ENOMEM;
   49ab6:	f06f 000b 	mvn.w	r0, #11
   49aba:	e7f8      	b.n	49aae <json_add_str+0x1e>

00049abc <json_add_data>:
{
   49abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   49abe:	4605      	mov	r5, r0
   49ac0:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   49ac2:	460e      	mov	r6, r1
   49ac4:	b919      	cbnz	r1, 49ace <json_add_data+0x12>
		return -EINVAL;
   49ac6:	f06f 0015 	mvn.w	r0, #21
}
   49aca:	b01b      	add	sp, #108	; 0x6c
   49acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   49ace:	2264      	movs	r2, #100	; 0x64
   49ad0:	2100      	movs	r1, #0
   49ad2:	a801      	add	r0, sp, #4
   49ad4:	f7f7 fab0 	bl	41038 <memset>
	ret = modem_info_name_get(param->type,
   49ad8:	a901      	add	r1, sp, #4
   49ada:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   49ade:	f7dd f8c1 	bl	26c64 <modem_info_name_get>
	if (ret < 0) {
   49ae2:	1e04      	subs	r4, r0, #0
   49ae4:	dbef      	blt.n	49ac6 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   49ae6:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   49aea:	f7dd f8b1 	bl	26c50 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   49aee:	2803      	cmp	r0, #3
   49af0:	d113      	bne.n	49b1a <json_add_data+0x5e>
   49af2:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   49af6:	2b03      	cmp	r3, #3
   49af8:	d00f      	beq.n	49b1a <json_add_data+0x5e>
		total_len += strlen(param->value_string);
   49afa:	3502      	adds	r5, #2
   49afc:	4628      	mov	r0, r5
   49afe:	f7f7 fe91 	bl	41824 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   49b02:	462a      	mov	r2, r5
		total_len += strlen(param->value_string);
   49b04:	4607      	mov	r7, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   49b06:	a901      	add	r1, sp, #4
   49b08:	4630      	mov	r0, r6
   49b0a:	f7ff ffc1 	bl	49a90 <json_add_str>
   49b0e:	4420      	add	r0, r4
	return total_len;
   49b10:	ea10 0020 	ands.w	r0, r0, r0, asr #32
   49b14:	bf38      	it	cc
   49b16:	4638      	movcc	r0, r7
   49b18:	e7d7      	b.n	49aca <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   49b1a:	8828      	ldrh	r0, [r5, #0]
   49b1c:	f7ce fdc2 	bl	186a4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   49b20:	ec41 0b10 	vmov	d0, r0, r1
   49b24:	f7d0 feb8 	bl	1a898 <cJSON_CreateNumber>
	if (json_num == NULL) {
   49b28:	4602      	mov	r2, r0
   49b2a:	b138      	cbz	r0, 49b3c <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   49b2c:	4630      	mov	r0, r6
   49b2e:	a901      	add	r1, sp, #4
   49b30:	f7ff fa67 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   49b34:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   49b36:	4420      	add	r0, r4
		total_len += sizeof(u16_t);
   49b38:	2702      	movs	r7, #2
   49b3a:	e7e9      	b.n	49b10 <json_add_data+0x54>
		return -ENOMEM;
   49b3c:	f06f 000b 	mvn.w	r0, #11
   49b40:	e7f9      	b.n	49b36 <json_add_data+0x7a>

00049b42 <sim_data_add>:
{
   49b42:	b570      	push	{r4, r5, r6, lr}
   49b44:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   49b46:	4606      	mov	r6, r0
   49b48:	b180      	cbz	r0, 49b6c <sim_data_add+0x2a>
   49b4a:	b179      	cbz	r1, 49b6c <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   49b4c:	f7ff ffb6 	bl	49abc <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   49b50:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   49b52:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   49b54:	f106 0070 	add.w	r0, r6, #112	; 0x70
   49b58:	f7ff ffb0 	bl	49abc <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   49b5c:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   49b5e:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   49b60:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   49b64:	f7ff ffaa 	bl	49abc <json_add_data>
   49b68:	4420      	add	r0, r4
}
   49b6a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   49b6c:	f06f 0015 	mvn.w	r0, #21
   49b70:	e7fb      	b.n	49b6a <sim_data_add+0x28>

00049b72 <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
			struct cloud_event *evt,
			void *user_data)
{
	if (backend->config->handler) {
   49b72:	6843      	ldr	r3, [r0, #4]
   49b74:	685b      	ldr	r3, [r3, #4]
   49b76:	b103      	cbz	r3, 49b7a <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   49b78:	4718      	bx	r3
	}
}
   49b7a:	4770      	bx	lr

00049b7c <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   49b7c:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   49b7e:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   49b80:	60d9      	str	r1, [r3, #12]
}
   49b82:	4770      	bx	lr

00049b84 <ping>:
{
   49b84:	b508      	push	{r3, lr}
	nct_process();
   49b86:	f7df fc63 	bl	29450 <nct_process>
}
   49b8a:	2000      	movs	r0, #0
   49b8c:	bd08      	pop	{r3, pc}

00049b8e <input>:
   49b8e:	b508      	push	{r3, lr}
   49b90:	f7df fc5e 	bl	29450 <nct_process>
   49b94:	2000      	movs	r0, #0
   49b96:	bd08      	pop	{r3, pc}

00049b98 <connect>:
{
   49b98:	b538      	push	{r3, r4, r5, lr}
   49b9a:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   49b9c:	2000      	movs	r0, #0
   49b9e:	f7dd fd95 	bl	276cc <nrf_cloud_connect>
	backend->config->socket = nct_socket_get();
   49ba2:	686d      	ldr	r5, [r5, #4]
	err = nrf_cloud_connect(NULL);
   49ba4:	4604      	mov	r4, r0
	backend->config->socket = nct_socket_get();
   49ba6:	f7df fc5f 	bl	29468 <nct_socket_get>
   49baa:	60a8      	str	r0, [r5, #8]
}
   49bac:	4620      	mov	r0, r4
   49bae:	bd38      	pop	{r3, r4, r5, pc}

00049bb0 <disconnect>:
	return nrf_cloud_disconnect();
   49bb0:	f7dd bd98 	b.w	276e4 <nrf_cloud_disconnect>

00049bb4 <json_add_num>:
{
   49bb4:	b538      	push	{r3, r4, r5, lr}
	json_num = cJSON_CreateNumber(num);
   49bb6:	ec43 2b10 	vmov	d0, r2, r3
{
   49bba:	4604      	mov	r4, r0
   49bbc:	460d      	mov	r5, r1
	json_num = cJSON_CreateNumber(num);
   49bbe:	f7d0 fe6b 	bl	1a898 <cJSON_CreateNumber>
	if (json_num == NULL) {
   49bc2:	4602      	mov	r2, r0
   49bc4:	b128      	cbz	r0, 49bd2 <json_add_num+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   49bc6:	4620      	mov	r0, r4
   49bc8:	4629      	mov	r1, r5
   49bca:	f7ff fa1a 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   49bce:	2000      	movs	r0, #0
}
   49bd0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   49bd2:	f06f 000b 	mvn.w	r0, #11
   49bd6:	e7fb      	b.n	49bd0 <json_add_num+0x1c>

00049bd8 <json_add_str>:
{
   49bd8:	b538      	push	{r3, r4, r5, lr}
   49bda:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   49bdc:	4610      	mov	r0, r2
{
   49bde:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   49be0:	f7db fe1e 	bl	25820 <cJSON_CreateString>
	if (json_str == NULL) {
   49be4:	4602      	mov	r2, r0
   49be6:	b128      	cbz	r0, 49bf4 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   49be8:	4620      	mov	r0, r4
   49bea:	4629      	mov	r1, r5
   49bec:	f7ff fa09 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   49bf0:	2000      	movs	r0, #0
}
   49bf2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   49bf4:	f06f 000b 	mvn.w	r0, #11
   49bf8:	e7fb      	b.n	49bf2 <json_add_str+0x1a>

00049bfa <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   49bfa:	b108      	cbz	r0, 49c00 <json_object_decode+0x6>
   49bfc:	f7ff b9fc 	b.w	48ff8 <cJSON_GetObjectItem>
}
   49c00:	4770      	bx	lr

00049c02 <compare>:
{
   49c02:	b538      	push	{r3, r4, r5, lr}
   49c04:	4605      	mov	r5, r0
	return !strncmp(s1, s2, strlen(s2));
   49c06:	4608      	mov	r0, r1
{
   49c08:	460c      	mov	r4, r1
	return !strncmp(s1, s2, strlen(s2));
   49c0a:	f7f7 fe0b 	bl	41824 <strlen>
   49c0e:	4621      	mov	r1, r4
   49c10:	4602      	mov	r2, r0
   49c12:	4628      	mov	r0, r5
   49c14:	f7f7 fe34 	bl	41880 <strncmp>
}
   49c18:	fab0 f080 	clz	r0, r0
   49c1c:	0940      	lsrs	r0, r0, #5
   49c1e:	bd38      	pop	{r3, r4, r5, pc}

00049c20 <json_add_null>:
{
   49c20:	b538      	push	{r3, r4, r5, lr}
   49c22:	4604      	mov	r4, r0
   49c24:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   49c26:	f7db fdef 	bl	25808 <cJSON_CreateNull>
	if (json_null == NULL) {
   49c2a:	4602      	mov	r2, r0
   49c2c:	b128      	cbz	r0, 49c3a <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   49c2e:	4620      	mov	r0, r4
   49c30:	4629      	mov	r1, r5
   49c32:	f7ff f9e6 	bl	49002 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   49c36:	2000      	movs	r0, #0
}
   49c38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   49c3a:	f06f 000b 	mvn.w	r0, #11
   49c3e:	e7fb      	b.n	49c38 <json_add_null+0x18>

00049c40 <json_decode_and_alloc>:
{
   49c40:	b538      	push	{r3, r4, r5, lr}
   49c42:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   49c44:	4604      	mov	r4, r0
   49c46:	b110      	cbz	r0, 49c4e <json_decode_and_alloc+0xe>
   49c48:	68c3      	ldr	r3, [r0, #12]
   49c4a:	2b10      	cmp	r3, #16
   49c4c:	d004      	beq.n	49c58 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   49c4e:	2300      	movs	r3, #0
		return -ENOENT;
   49c50:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   49c54:	606b      	str	r3, [r5, #4]
}
   49c56:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   49c58:	6900      	ldr	r0, [r0, #16]
   49c5a:	f7f7 fde3 	bl	41824 <strlen>
   49c5e:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   49c60:	3001      	adds	r0, #1
   49c62:	f7f3 fbe1 	bl	3d428 <k_malloc>
   49c66:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   49c68:	b130      	cbz	r0, 49c78 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   49c6a:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   49c6c:	6921      	ldr	r1, [r4, #16]
   49c6e:	3201      	adds	r2, #1
   49c70:	f7f7 fe4c 	bl	4190c <strncpy>
	return 0;
   49c74:	2000      	movs	r0, #0
   49c76:	e7ee      	b.n	49c56 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   49c78:	f06f 000b 	mvn.w	r0, #11
   49c7c:	e7eb      	b.n	49c56 <json_decode_and_alloc+0x16>

00049c7e <nrf_codec_init>:
{
   49c7e:	b508      	push	{r3, lr}
	cJSON_Init();
   49c80:	f7db fdfe 	bl	25880 <cJSON_Init>
}
   49c84:	2000      	movs	r0, #0
   49c86:	bd08      	pop	{r3, pc}

00049c88 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   49c88:	2000      	movs	r0, #0
   49c8a:	4770      	bx	lr

00049c8c <disconnection_handler>:
{
   49c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   49c8e:	2214      	movs	r2, #20
   49c90:	2100      	movs	r1, #0
   49c92:	a801      	add	r0, sp, #4
   49c94:	f7f7 f9d0 	bl	41038 <memset>
   49c98:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   49c9a:	a901      	add	r1, sp, #4
   49c9c:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   49c9e:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   49ca2:	f7dd fcb3 	bl	2760c <nfsm_set_current_state_and_notify>
}
   49ca6:	2000      	movs	r0, #0
   49ca8:	b007      	add	sp, #28
   49caa:	f85d fb04 	ldr.w	pc, [sp], #4

00049cae <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   49cae:	b510      	push	{r4, lr}
   49cb0:	b086      	sub	sp, #24
   49cb2:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   49cb4:	2214      	movs	r2, #20
   49cb6:	2100      	movs	r1, #0
   49cb8:	a801      	add	r0, sp, #4
   49cba:	f7f7 f9bd 	bl	41038 <memset>
   49cbe:	2306      	movs	r3, #6
   49cc0:	6862      	ldr	r2, [r4, #4]
   49cc2:	f88d 3004 	strb.w	r3, [sp, #4]
   49cc6:	ab03      	add	r3, sp, #12
   49cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
   49ccc:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.param.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   49cd0:	f7dd fc96 	bl	27600 <nfsm_get_current_state>
   49cd4:	a901      	add	r1, sp, #4
   49cd6:	f7dd fc99 	bl	2760c <nfsm_set_current_state_and_notify>

	return 0;
}
   49cda:	2000      	movs	r0, #0
   49cdc:	b006      	add	sp, #24
   49cde:	bd10      	pop	{r4, pc}

00049ce0 <dc_connection_handler>:
{
   49ce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   49ce2:	6801      	ldr	r1, [r0, #0]
   49ce4:	b959      	cbnz	r1, 49cfe <dc_connection_handler+0x1e>
		struct nrf_cloud_evt evt = {
   49ce6:	2214      	movs	r2, #20
   49ce8:	a801      	add	r0, sp, #4
   49cea:	f7f7 f9a5 	bl	41038 <memset>
   49cee:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   49cf0:	200e      	movs	r0, #14
   49cf2:	eb0d 0103 	add.w	r1, sp, r3
		struct nrf_cloud_evt evt = {
   49cf6:	f88d 3004 	strb.w	r3, [sp, #4]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   49cfa:	f7dd fc87 	bl	2760c <nfsm_set_current_state_and_notify>
}
   49cfe:	2000      	movs	r0, #0
   49d00:	b007      	add	sp, #28
   49d02:	f85d fb04 	ldr.w	pc, [sp], #4

00049d06 <cc_tx_cnf_in_state_requested_handler>:
{
   49d06:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   49d08:	f241 632e 	movw	r3, #5678	; 0x162e
   49d0c:	6842      	ldr	r2, [r0, #4]
   49d0e:	429a      	cmp	r2, r3
   49d10:	d103      	bne.n	49d1a <cc_tx_cnf_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   49d12:	2100      	movs	r1, #0
   49d14:	2005      	movs	r0, #5
   49d16:	f7dd fc79 	bl	2760c <nfsm_set_current_state_and_notify>
}
   49d1a:	2000      	movs	r0, #0
   49d1c:	bd08      	pop	{r3, pc}

00049d1e <cc_tx_cnf_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   49d1e:	f241 622e 	movw	r2, #5678	; 0x162e
   49d22:	6843      	ldr	r3, [r0, #4]
{
   49d24:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   49d26:	4293      	cmp	r3, r2
   49d28:	d105      	bne.n	49d36 <cc_tx_cnf_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   49d2a:	2100      	movs	r1, #0
   49d2c:	2005      	movs	r0, #5
   49d2e:	f7dd fc6d 	bl	2760c <nfsm_set_current_state_and_notify>
	return 0;
   49d32:	2400      	movs	r4, #0
   49d34:	e00b      	b.n	49d4e <cc_tx_cnf_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   49d36:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   49d3a:	4293      	cmp	r3, r2
   49d3c:	d1f9      	bne.n	49d32 <cc_tx_cnf_handler+0x14>
		err = nct_dc_connect();
   49d3e:	f7df fb03 	bl	29348 <nct_dc_connect>
		if (err) {
   49d42:	4604      	mov	r4, r0
   49d44:	b918      	cbnz	r0, 49d4e <cc_tx_cnf_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   49d46:	4601      	mov	r1, r0
   49d48:	200d      	movs	r0, #13
   49d4a:	f7dd fc5f 	bl	2760c <nfsm_set_current_state_and_notify>
}
   49d4e:	4620      	mov	r0, r4
   49d50:	bd10      	pop	{r4, pc}

00049d52 <connection_handler>:
{
   49d52:	b510      	push	{r4, lr}
	if (nct_evt->status != 0) {
   49d54:	6803      	ldr	r3, [r0, #0]
{
   49d56:	b086      	sub	sp, #24
	if (nct_evt->status != 0) {
   49d58:	b153      	cbz	r3, 49d70 <connection_handler+0x1e>
		evt.type = NRF_CLOUD_EVT_ERROR;
   49d5a:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   49d5c:	a901      	add	r1, sp, #4
   49d5e:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   49d60:	f88d 3004 	strb.w	r3, [sp, #4]
		return 0;
   49d64:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   49d66:	f7dd fc51 	bl	2760c <nfsm_set_current_state_and_notify>
}
   49d6a:	4620      	mov	r0, r4
   49d6c:	b006      	add	sp, #24
   49d6e:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   49d70:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   49d72:	a901      	add	r1, sp, #4
   49d74:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   49d76:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   49d7a:	f7dd fc47 	bl	2760c <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   49d7e:	f7df f9c7 	bl	29110 <nct_cc_connect>
	if (err) {
   49d82:	4604      	mov	r4, r0
   49d84:	2800      	cmp	r0, #0
   49d86:	d1f0      	bne.n	49d6a <connection_handler+0x18>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   49d88:	4601      	mov	r1, r0
   49d8a:	2003      	movs	r0, #3
   49d8c:	f7dd fc3e 	bl	2760c <nfsm_set_current_state_and_notify>
   49d90:	e7eb      	b.n	49d6a <connection_handler+0x18>

00049d92 <dc_disconnection_handler>:
   49d92:	2000      	movs	r0, #0
   49d94:	4770      	bx	lr

00049d96 <dc_tx_cnf_handler>:
   49d96:	2000      	movs	r0, #0
   49d98:	4770      	bx	lr

00049d9a <nfsm_init>:
}
   49d9a:	2000      	movs	r0, #0
   49d9c:	4770      	bx	lr

00049d9e <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   49d9e:	2101      	movs	r1, #1
   49da0:	f7de bd46 	b.w	28830 <dc_send>

00049da4 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   49da4:	2100      	movs	r1, #0
   49da6:	f7de bd43 	b.w	28830 <dc_send>

00049daa <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   49daa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   49dac:	2300      	movs	r3, #0
   49dae:	9301      	str	r3, [sp, #4]
   49db0:	9303      	str	r3, [sp, #12]
   49db2:	2301      	movs	r3, #1
		.error = -error
   49db4:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   49db6:	f88d 3004 	strb.w	r3, [sp, #4]
   49dba:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   49dbc:	6803      	ldr	r3, [r0, #0]
   49dbe:	a801      	add	r0, sp, #4
   49dc0:	4798      	blx	r3
}
   49dc2:	b005      	add	sp, #20
   49dc4:	f85d fb04 	ldr.w	pc, [sp], #4

00049dc8 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   49dc8:	b130      	cbz	r0, 49dd8 <download_client_file_size_get+0x10>
   49dca:	b129      	cbz	r1, 49dd8 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   49dcc:	f241 0308 	movw	r3, #4104	; 0x1008
   49dd0:	58c3      	ldr	r3, [r0, r3]

	return 0;
   49dd2:	2000      	movs	r0, #0
	*size = client->file_size;
   49dd4:	600b      	str	r3, [r1, #0]
	return 0;
   49dd6:	4770      	bx	lr
		return -EINVAL;
   49dd8:	f06f 0015 	mvn.w	r0, #21
}
   49ddc:	4770      	bx	lr

00049dde <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   49dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49de2:	460c      	mov	r4, r1
   49de4:	4690      	mov	r8, r2
   49de6:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   49de8:	4606      	mov	r6, r0
   49dea:	b328      	cbz	r0, 49e38 <aws_jobs_cmp+0x5a>
   49dec:	b331      	cbz	r1, 49e3c <aws_jobs_cmp+0x5e>
   49dee:	b33b      	cbz	r3, 49e40 <aws_jobs_cmp+0x62>
   49df0:	7803      	ldrb	r3, [r0, #0]
   49df2:	b33b      	cbz	r3, 49e44 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   49df4:	780b      	ldrb	r3, [r1, #0]
   49df6:	b32b      	cbz	r3, 49e44 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   49df8:	f7f7 fd14 	bl	41824 <strlen>
   49dfc:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   49dfe:	4628      	mov	r0, r5
   49e00:	f7f7 fd10 	bl	41824 <strlen>

	if (sub[sub_len - 1] == '#') {
   49e04:	19f3      	adds	r3, r6, r7
   49e06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   49e0a:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   49e0c:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   49e0e:	bf08      	it	eq
   49e10:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   49e12:	463a      	mov	r2, r7
   49e14:	4621      	mov	r1, r4
   49e16:	4630      	mov	r0, r6
   49e18:	f7f7 fd32 	bl	41880 <strncmp>
	if (ret == 0 && suff_len > 0) {
   49e1c:	b948      	cbnz	r0, 49e32 <aws_jobs_cmp+0x54>
   49e1e:	f1b9 0f00 	cmp.w	r9, #0
   49e22:	d006      	beq.n	49e32 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   49e24:	eba8 0009 	sub.w	r0, r8, r9
   49e28:	464a      	mov	r2, r9
   49e2a:	4629      	mov	r1, r5
   49e2c:	4420      	add	r0, r4
   49e2e:	f7f7 fd27 	bl	41880 <strncmp>
	} else {
		return ret == 0;
   49e32:	fab0 f080 	clz	r0, r0
   49e36:	0940      	lsrs	r0, r0, #5
	}
}
   49e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   49e3c:	4608      	mov	r0, r1
   49e3e:	e7fb      	b.n	49e38 <aws_jobs_cmp+0x5a>
   49e40:	4618      	mov	r0, r3
   49e42:	e7f9      	b.n	49e38 <aws_jobs_cmp+0x5a>
   49e44:	4618      	mov	r0, r3
   49e46:	e7f7      	b.n	49e38 <aws_jobs_cmp+0x5a>

00049e48 <strncpy_nullterm>:
{
   49e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49e4a:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   49e4c:	4608      	mov	r0, r1
{
   49e4e:	4615      	mov	r5, r2
   49e50:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   49e52:	f7f7 fce7 	bl	41824 <strlen>
   49e56:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   49e58:	42ae      	cmp	r6, r5
   49e5a:	4632      	mov	r2, r6
   49e5c:	4620      	mov	r0, r4
   49e5e:	bf28      	it	cs
   49e60:	462a      	movcs	r2, r5
   49e62:	4639      	mov	r1, r7
   49e64:	f7d0 f824 	bl	19eb0 <memcpy>
	if (len > maxlen) {
   49e68:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   49e6a:	bf82      	ittt	hi
   49e6c:	2300      	movhi	r3, #0
   49e6e:	1964      	addhi	r4, r4, r5
   49e70:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   49e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00049e76 <response_is_valid>:
{
   49e76:	b570      	push	{r4, r5, r6, lr}
   49e78:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   49e7a:	4610      	mov	r0, r2
{
   49e7c:	460d      	mov	r5, r1
   49e7e:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   49e80:	f7f7 fcd0 	bl	41824 <strlen>
   49e84:	42a8      	cmp	r0, r5
   49e86:	d808      	bhi.n	49e9a <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   49e88:	462a      	mov	r2, r5
   49e8a:	4621      	mov	r1, r4
   49e8c:	4630      	mov	r0, r6
   49e8e:	f7f7 f891 	bl	40fb4 <memcmp>
	if ((response_len < strlen(check)) ||
   49e92:	fab0 f080 	clz	r0, r0
   49e96:	0940      	lsrs	r0, r0, #5
}
   49e98:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   49e9a:	2000      	movs	r0, #0
   49e9c:	e7fc      	b.n	49e98 <response_is_valid+0x22>

00049e9e <lte_lc_init_and_connect>:
{
   49e9e:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   49ea0:	f7e1 ff9e 	bl	2bde0 <w_lte_lc_init>
	if (ret) {
   49ea4:	b918      	cbnz	r0, 49eae <lte_lc_init_and_connect+0x10>
}
   49ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   49eaa:	f7e2 b8b9 	b.w	2c020 <w_lte_lc_connect>
}
   49eae:	bd08      	pop	{r3, pc}

00049eb0 <z_impl_i2c_transfer>:
{
   49eb0:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   49eb2:	6844      	ldr	r4, [r0, #4]
   49eb4:	6864      	ldr	r4, [r4, #4]
   49eb6:	46a4      	mov	ip, r4
}
   49eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->transfer(dev, msgs, num_msgs, addr);
   49ebc:	4760      	bx	ip

00049ebe <i2c_reg_update_byte.constprop.9>:
 * @param value Value for updating internal register.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_update_byte(struct device *dev, u8_t dev_addr,
   49ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   49ec2:	b088      	sub	sp, #32
   49ec4:	4698      	mov	r8, r3
   49ec6:	ab08      	add	r3, sp, #32
   49ec8:	f803 1d1d 	strb.w	r1, [r3, #-29]!
	msg[0].buf = (u8_t *)write_buf;
   49ecc:	9302      	str	r3, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   49ece:	2300      	movs	r3, #0
	msg[0].len = num_write;
   49ed0:	2501      	movs	r5, #1
	msg[0].flags = I2C_MSG_WRITE;
   49ed2:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (u8_t *)read_buf;
   49ed6:	f10d 0302 	add.w	r3, sp, #2
	msg[1].len = num_read;
   49eda:	e9cd 3505 	strd	r3, r5, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   49ede:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(struct device *dev, u8_t dev_addr,
   49ee0:	4607      	mov	r7, r0
   49ee2:	460e      	mov	r6, r1
   49ee4:	4614      	mov	r4, r2
	msg[0].len = num_write;
   49ee6:	9503      	str	r5, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   49ee8:	f88d 301c 	strb.w	r3, [sp, #28]
   49eec:	2338      	movs	r3, #56	; 0x38
   49eee:	2202      	movs	r2, #2
   49ef0:	a902      	add	r1, sp, #8
   49ef2:	f7ff ffdd 	bl	49eb0 <z_impl_i2c_transfer>
{
	u8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
   49ef6:	b9c0      	cbnz	r0, 49f2a <i2c_reg_update_byte.constprop.9+0x6c>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   49ef8:	f89d 2002 	ldrb.w	r2, [sp, #2]
   49efc:	ea22 0304 	bic.w	r3, r2, r4
   49f00:	ea04 0408 	and.w	r4, r4, r8
   49f04:	4323      	orrs	r3, r4
	if (new_value == old_value) {
   49f06:	429a      	cmp	r2, r3
   49f08:	d00f      	beq.n	49f2a <i2c_reg_update_byte.constprop.9+0x6c>
	u8_t tx_buf[2] = {reg_addr, value};
   49f0a:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.buf = (u8_t *)buf;
   49f0e:	ab01      	add	r3, sp, #4
   49f10:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
   49f12:	2302      	movs	r3, #2
	u8_t tx_buf[2] = {reg_addr, value};
   49f14:	f88d 6004 	strb.w	r6, [sp, #4]
	msg.len = num_bytes;
   49f18:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   49f1a:	f88d 3010 	strb.w	r3, [sp, #16]
   49f1e:	2338      	movs	r3, #56	; 0x38
   49f20:	462a      	mov	r2, r5
   49f22:	a902      	add	r1, sp, #8
   49f24:	4638      	mov	r0, r7
   49f26:	f7ff ffc3 	bl	49eb0 <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
   49f2a:	b008      	add	sp, #32
   49f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049f30 <i2c_reg_read_byte>:
{
   49f30:	b510      	push	{r4, lr}
   49f32:	b088      	sub	sp, #32
   49f34:	ac08      	add	r4, sp, #32
   49f36:	f804 2d19 	strb.w	r2, [r4, #-25]!
	msg[0].len = num_write;
   49f3a:	2201      	movs	r2, #1
	msg[0].buf = (u8_t *)write_buf;
   49f3c:	9402      	str	r4, [sp, #8]
	msg[1].len = num_read;
   49f3e:	e9cd 3205 	strd	r3, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   49f42:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   49f44:	2307      	movs	r3, #7
	msg[0].len = num_write;
   49f46:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   49f48:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   49f4c:	f88d 301c 	strb.w	r3, [sp, #28]
   49f50:	2202      	movs	r2, #2
   49f52:	460b      	mov	r3, r1
   49f54:	a902      	add	r1, sp, #8
   49f56:	f7ff ffab 	bl	49eb0 <z_impl_i2c_transfer>
}
   49f5a:	b008      	add	sp, #32
   49f5c:	bd10      	pop	{r4, pc}

00049f5e <sample_fetch>:
}
   49f5e:	2000      	movs	r0, #0
   49f60:	4770      	bx	lr

00049f62 <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   49f62:	4700      	bx	r0

00049f64 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   49f64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   49f68:	4770      	bx	lr

00049f6a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   49f6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   49f6e:	4770      	bx	lr

00049f70 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   49f70:	f44f 7080 	mov.w	r0, #256	; 0x100
   49f74:	4770      	bx	lr

00049f76 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * const p_instance,
   49f76:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   49f78:	2402      	movs	r4, #2
    p_cb->flags = flags;
   49f7a:	714a      	strb	r2, [r1, #5]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   49f7c:	710c      	strb	r4, [r1, #4]
    if (p_cb->handler)
   49f7e:	6809      	ldr	r1, [r1, #0]
   49f80:	b171      	cbz	r1, 49fa0 <start_playback.isra.0+0x2a>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
   49f82:	f012 0f04 	tst.w	r2, #4
   49f86:	bf14      	ite	ne
   49f88:	2192      	movne	r1, #146	; 0x92
   49f8a:	2182      	moveq	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   49f8c:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   49f8e:	bf48      	it	mi
   49f90:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   49f94:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   49f96:	bf48      	it	mi
   49f98:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   49f9c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   49fa0:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   49fa2:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   49fa6:	bf58      	it	pl
   49fa8:	2201      	movpl	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   49faa:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   49fae:	bf56      	itet	pl
   49fb0:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   49fb2:	18c0      	addmi	r0, r0, r3
    return 0;
   49fb4:	4608      	movpl	r0, r1
}
   49fb6:	bd10      	pop	{r4, pc}

00049fb8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   49fb8:	f7fd be5a 	b.w	47c70 <z_clock_idle_exit>

00049fbc <k_mem_pool_malloc>:
{
   49fbc:	b507      	push	{r0, r1, r2, lr}
   49fbe:	2204      	movs	r2, #4
   49fc0:	188a      	adds	r2, r1, r2
   49fc2:	d204      	bcs.n	49fce <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   49fc4:	2300      	movs	r3, #0
   49fc6:	4669      	mov	r1, sp
   49fc8:	f7f3 f962 	bl	3d290 <k_mem_pool_alloc>
   49fcc:	b118      	cbz	r0, 49fd6 <k_mem_pool_malloc+0x1a>
		return NULL;
   49fce:	2000      	movs	r0, #0
}
   49fd0:	b003      	add	sp, #12
   49fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   49fd6:	e9dd 3200 	ldrd	r3, r2, [sp]
   49fda:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   49fdc:	9800      	ldr	r0, [sp, #0]
   49fde:	3004      	adds	r0, #4
   49fe0:	e7f6      	b.n	49fd0 <k_mem_pool_malloc+0x14>

00049fe2 <k_free>:
	if (ptr != NULL) {
   49fe2:	b110      	cbz	r0, 49fea <k_free+0x8>
		k_mem_pool_free_id(ptr);
   49fe4:	3804      	subs	r0, #4
   49fe6:	f7f3 b9c3 	b.w	3d370 <k_mem_pool_free_id>
}
   49fea:	4770      	bx	lr

00049fec <k_calloc>:
{
   49fec:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   49fee:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   49ff2:	b118      	cbz	r0, 49ffc <k_calloc+0x10>
   49ff4:	fbb4 f0f0 	udiv	r0, r4, r0
   49ff8:	4281      	cmp	r1, r0
   49ffa:	d10a      	bne.n	4a012 <k_calloc+0x26>
	ret = k_malloc(bounds);
   49ffc:	4620      	mov	r0, r4
   49ffe:	f7f3 fa13 	bl	3d428 <k_malloc>
	if (ret != NULL) {
   4a002:	4605      	mov	r5, r0
   4a004:	b118      	cbz	r0, 4a00e <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   4a006:	4622      	mov	r2, r4
   4a008:	2100      	movs	r1, #0
   4a00a:	f7f7 f815 	bl	41038 <memset>
}
   4a00e:	4628      	mov	r0, r5
   4a010:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   4a012:	2500      	movs	r5, #0
   4a014:	e7fb      	b.n	4a00e <k_calloc+0x22>

0004a016 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   4a016:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   4a018:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   4a01c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   4a020:	4770      	bx	lr

0004a022 <z_queue_node_peek>:
{
   4a022:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   4a024:	4604      	mov	r4, r0
   4a026:	b130      	cbz	r0, 4a036 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4a028:	6802      	ldr	r2, [r0, #0]
   4a02a:	0793      	lsls	r3, r2, #30
   4a02c:	d003      	beq.n	4a036 <z_queue_node_peek+0x14>
		ret = anode->data;
   4a02e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   4a030:	b109      	cbz	r1, 4a036 <z_queue_node_peek+0x14>
			k_free(anode);
   4a032:	f7ff ffd6 	bl	49fe2 <k_free>
}
   4a036:	4620      	mov	r0, r4
   4a038:	bd10      	pop	{r4, pc}

0004a03a <z_impl_k_queue_init>:
	list->head = NULL;
   4a03a:	2300      	movs	r3, #0
	list->tail = NULL;
   4a03c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   4a040:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   4a042:	f100 030c 	add.w	r3, r0, #12
   4a046:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   4a04a:	4770      	bx	lr

0004a04c <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   4a04c:	460a      	mov	r2, r1
   4a04e:	2300      	movs	r3, #0
   4a050:	6841      	ldr	r1, [r0, #4]
   4a052:	f7f3 bd09 	b.w	3da68 <queue_insert>

0004a056 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   4a056:	7b43      	ldrb	r3, [r0, #13]
   4a058:	06db      	lsls	r3, r3, #27
   4a05a:	bf03      	ittte	eq
   4a05c:	6980      	ldreq	r0, [r0, #24]
   4a05e:	fab0 f080 	clzeq	r0, r0
   4a062:	0940      	lsreq	r0, r0, #5
   4a064:	2000      	movne	r0, #0
}
   4a066:	4770      	bx	lr

0004a068 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   4a068:	f990 000e 	ldrsb.w	r0, [r0, #14]
   4a06c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   4a070:	4298      	cmp	r0, r3
   4a072:	bfac      	ite	ge
   4a074:	2000      	movge	r0, #0
   4a076:	2001      	movlt	r0, #1
   4a078:	4770      	bx	lr

0004a07a <z_reschedule_irqlock>:
{
   4a07a:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   4a07c:	4602      	mov	r2, r0
   4a07e:	b938      	cbnz	r0, 4a090 <z_reschedule_irqlock+0x16>
   4a080:	f7f3 fe66 	bl	3dd50 <resched.part.15>
	if (resched(key)) {
   4a084:	b120      	cbz	r0, 4a090 <z_reschedule_irqlock+0x16>
}
   4a086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   4a08a:	4610      	mov	r0, r2
   4a08c:	f7d7 bb14 	b.w	216b8 <z_arch_swap>
   4a090:	f382 8811 	msr	BASEPRI, r2
   4a094:	f3bf 8f6f 	isb	sy
   4a098:	bd08      	pop	{r3, pc}

0004a09a <z_reschedule_unlocked>:
	__asm__ volatile(
   4a09a:	f04f 0320 	mov.w	r3, #32
   4a09e:	f3ef 8011 	mrs	r0, BASEPRI
   4a0a2:	f383 8811 	msr	BASEPRI, r3
   4a0a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   4a0aa:	f7ff bfe6 	b.w	4a07a <z_reschedule_irqlock>

0004a0ae <z_priq_dumb_best>:
	return list->head == list;
   4a0ae:	6803      	ldr	r3, [r0, #0]
}
   4a0b0:	4298      	cmp	r0, r3
   4a0b2:	bf14      	ite	ne
   4a0b4:	4618      	movne	r0, r3
   4a0b6:	2000      	moveq	r0, #0
   4a0b8:	4770      	bx	lr

0004a0ba <z_unpend_all>:
{
   4a0ba:	b570      	push	{r4, r5, r6, lr}
   4a0bc:	4606      	mov	r6, r0
	int need_sched = 0;
   4a0be:	2500      	movs	r5, #0
   4a0c0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4a0c2:	42a6      	cmp	r6, r4
   4a0c4:	d000      	beq.n	4a0c8 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   4a0c6:	b90c      	cbnz	r4, 4a0cc <z_unpend_all+0x12>
}
   4a0c8:	4628      	mov	r0, r5
   4a0ca:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   4a0cc:	4620      	mov	r0, r4
   4a0ce:	f7f4 f817 	bl	3e100 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   4a0d2:	4620      	mov	r0, r4
   4a0d4:	f7ff ffbf 	bl	4a056 <z_is_thread_ready>
		need_sched = 1;
   4a0d8:	2501      	movs	r5, #1
   4a0da:	2800      	cmp	r0, #0
   4a0dc:	d0f0      	beq.n	4a0c0 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   4a0de:	4620      	mov	r0, r4
   4a0e0:	f7f4 f91a 	bl	3e318 <z_add_thread_to_ready_q>
   4a0e4:	e7ec      	b.n	4a0c0 <z_unpend_all+0x6>

0004a0e6 <z_impl_k_sleep>:
{
   4a0e6:	b538      	push	{r3, r4, r5, lr}
   4a0e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a0ec:	f240 34e7 	movw	r4, #999	; 0x3e7
   4a0f0:	2500      	movs	r5, #0
   4a0f2:	fbc1 4500 	smlal	r4, r5, r1, r0
   4a0f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4a0fa:	2300      	movs	r3, #0
   4a0fc:	4620      	mov	r0, r4
   4a0fe:	4629      	mov	r1, r5
   4a100:	f7ce fe0c 	bl	18d1c <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
   4a104:	f7f4 fdc2 	bl	3ec8c <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   4a108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4a10c:	fb80 2302 	smull	r2, r3, r0, r2
   4a110:	0bd0      	lsrs	r0, r2, #15
}
   4a112:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   4a116:	bd38      	pop	{r3, r4, r5, pc}

0004a118 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   4a118:	7b43      	ldrb	r3, [r0, #13]
   4a11a:	06db      	lsls	r3, r3, #27
   4a11c:	bf03      	ittte	eq
   4a11e:	6980      	ldreq	r0, [r0, #24]
   4a120:	fab0 f080 	clzeq	r0, r0
   4a124:	0940      	lsreq	r0, r0, #5
   4a126:	2000      	movne	r0, #0
}
   4a128:	4770      	bx	lr

0004a12a <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   4a12a:	f7d6 ba43 	b.w	205b4 <z_arch_busy_wait>

0004a12e <z_impl_k_thread_name_set>:
}
   4a12e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   4a132:	4770      	bx	lr

0004a134 <k_thread_name_get>:
}
   4a134:	2000      	movs	r0, #0
   4a136:	4770      	bx	lr

0004a138 <z_thread_single_suspend>:
{
   4a138:	b510      	push	{r4, lr}
   4a13a:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   4a13c:	f7ff ffec 	bl	4a118 <z_is_thread_ready>
   4a140:	b110      	cbz	r0, 4a148 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   4a142:	4620      	mov	r0, r4
   4a144:	f7f4 fa92 	bl	3e66c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   4a148:	7b63      	ldrb	r3, [r4, #13]
   4a14a:	f043 0310 	orr.w	r3, r3, #16
   4a14e:	7363      	strb	r3, [r4, #13]
}
   4a150:	bd10      	pop	{r4, pc}

0004a152 <z_thread_single_resume>:
{
   4a152:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   4a154:	7b43      	ldrb	r3, [r0, #13]
   4a156:	4602      	mov	r2, r0
   4a158:	f023 0310 	bic.w	r3, r3, #16
   4a15c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   4a15e:	f7ff ffdb 	bl	4a118 <z_is_thread_ready>
   4a162:	b120      	cbz	r0, 4a16e <z_thread_single_resume+0x1c>
}
   4a164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   4a168:	4610      	mov	r0, r2
   4a16a:	f7f4 b8d5 	b.w	3e318 <z_add_thread_to_ready_q>
   4a16e:	bd08      	pop	{r3, pc}

0004a170 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   4a170:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4a172:	b510      	push	{r4, lr}
   4a174:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   4a176:	b103      	cbz	r3, 4a17a <z_thread_single_abort+0xa>
		thread->fn_abort();
   4a178:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   4a17a:	4620      	mov	r0, r4
   4a17c:	f7ff ffcc 	bl	4a118 <z_is_thread_ready>
   4a180:	b138      	cbz	r0, 4a192 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   4a182:	4620      	mov	r0, r4
   4a184:	f7f4 fa72 	bl	3e66c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   4a188:	7b63      	ldrb	r3, [r4, #13]
   4a18a:	f043 0308 	orr.w	r3, r3, #8
   4a18e:	7363      	strb	r3, [r4, #13]
}
   4a190:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   4a192:	7b63      	ldrb	r3, [r4, #13]
   4a194:	079b      	lsls	r3, r3, #30
   4a196:	d502      	bpl.n	4a19e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   4a198:	4620      	mov	r0, r4
   4a19a:	f7f3 fe77 	bl	3de8c <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   4a19e:	69a3      	ldr	r3, [r4, #24]
   4a1a0:	2b00      	cmp	r3, #0
   4a1a2:	d0f1      	beq.n	4a188 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   4a1a4:	f104 0018 	add.w	r0, r4, #24
   4a1a8:	f7f5 fb78 	bl	3f89c <z_abort_timeout>
   4a1ac:	e7ec      	b.n	4a188 <z_thread_single_abort+0x18>

0004a1ae <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   4a1ae:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   4a1b0:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   4a1b2:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   4a1b4:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   4a1b6:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   4a1b8:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   4a1bc:	4770      	bx	lr

0004a1be <k_work_submit_to_queue>:
{
   4a1be:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4a1c0:	f101 0308 	add.w	r3, r1, #8
   4a1c4:	e8d3 2fef 	ldaex	r2, [r3]
   4a1c8:	f042 0c01 	orr.w	ip, r2, #1
   4a1cc:	e8c3 cfee 	stlex	lr, ip, [r3]
   4a1d0:	f1be 0f00 	cmp.w	lr, #0
   4a1d4:	d1f6      	bne.n	4a1c4 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   4a1d6:	07d3      	lsls	r3, r2, #31
   4a1d8:	d403      	bmi.n	4a1e2 <k_work_submit_to_queue+0x24>
}
   4a1da:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   4a1de:	f7ff bf35 	b.w	4a04c <k_queue_append>
}
   4a1e2:	f85d fb04 	ldr.w	pc, [sp], #4

0004a1e6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   4a1e6:	f1a0 010c 	sub.w	r1, r0, #12
   4a1ea:	6900      	ldr	r0, [r0, #16]
   4a1ec:	f7ff bfe7 	b.w	4a1be <k_work_submit_to_queue>

0004a1f0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   4a1f0:	2300      	movs	r3, #0
   4a1f2:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   4a1f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   4a1fa:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   4a1fc:	61c3      	str	r3, [r0, #28]
}
   4a1fe:	4770      	bx	lr

0004a200 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   4a200:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   4a202:	f7f5 fcd9 	bl	3fbb8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   4a206:	bd08      	pop	{r3, pc}

0004a208 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   4a208:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   4a20a:	f7f5 fcd5 	bl	3fbb8 <z_tick_get>
   4a20e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   4a212:	fba0 2304 	umull	r2, r3, r0, r4
   4a216:	fb04 3301 	mla	r3, r4, r1, r3
   4a21a:	0bd0      	lsrs	r0, r2, #15
}
   4a21c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   4a220:	0bd9      	lsrs	r1, r3, #15
   4a222:	bd10      	pop	{r4, pc}

0004a224 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   4a224:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   4a226:	6884      	ldr	r4, [r0, #8]
{
   4a228:	4605      	mov	r5, r0
   4a22a:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   4a22c:	b19c      	cbz	r4, 4a256 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   4a22e:	68a3      	ldr	r3, [r4, #8]
   4a230:	b95b      	cbnz	r3, 4a24a <signal_poll_event+0x26>
	int retcode = 0;
   4a232:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   4a234:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   4a236:	2300      	movs	r3, #0
   4a238:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   4a23a:	68eb      	ldr	r3, [r5, #12]
   4a23c:	f3c3 3204 	ubfx	r2, r3, #12, #5
   4a240:	4316      	orrs	r6, r2
   4a242:	f366 3310 	bfi	r3, r6, #12, #5
   4a246:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   4a248:	e004      	b.n	4a254 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   4a24a:	4798      	blx	r3
		poller->is_polling = false;
   4a24c:	2300      	movs	r3, #0
		if (retcode < 0) {
   4a24e:	2800      	cmp	r0, #0
		poller->is_polling = false;
   4a250:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   4a252:	daf0      	bge.n	4a236 <signal_poll_event+0x12>
}
   4a254:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   4a256:	4620      	mov	r0, r4
   4a258:	e7ed      	b.n	4a236 <signal_poll_event+0x12>

0004a25a <add_event>:
{
   4a25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4a25c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   4a25e:	e9d0 2300 	ldrd	r2, r3, [r0]
   4a262:	4290      	cmp	r0, r2
   4a264:	4604      	mov	r4, r0
   4a266:	460d      	mov	r5, r1
   4a268:	d106      	bne.n	4a278 <add_event+0x1e>
	node->prev = list->tail;
   4a26a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   4a26c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   4a26e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   4a270:	6863      	ldr	r3, [r4, #4]
   4a272:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4a274:	6065      	str	r5, [r4, #4]
   4a276:	e019      	b.n	4a2ac <add_event+0x52>
	if ((pending == NULL) ||
   4a278:	2b00      	cmp	r3, #0
   4a27a:	d0f6      	beq.n	4a26a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   4a27c:	689b      	ldr	r3, [r3, #8]
   4a27e:	6879      	ldr	r1, [r7, #4]
   4a280:	6858      	ldr	r0, [r3, #4]
   4a282:	f7ff fef1 	bl	4a068 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   4a286:	2800      	cmp	r0, #0
   4a288:	d1ef      	bne.n	4a26a <add_event+0x10>
	return list->head == list;
   4a28a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4a28c:	42b4      	cmp	r4, r6
   4a28e:	d0ec      	beq.n	4a26a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   4a290:	2e00      	cmp	r6, #0
   4a292:	d0ea      	beq.n	4a26a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   4a294:	68b3      	ldr	r3, [r6, #8]
   4a296:	6878      	ldr	r0, [r7, #4]
   4a298:	6859      	ldr	r1, [r3, #4]
   4a29a:	f7ff fee5 	bl	4a068 <z_is_t1_higher_prio_than_t2>
   4a29e:	b130      	cbz	r0, 4a2ae <add_event+0x54>
	node->prev = successor->prev;
   4a2a0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   4a2a2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   4a2a6:	6873      	ldr	r3, [r6, #4]
   4a2a8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   4a2aa:	6075      	str	r5, [r6, #4]
}
   4a2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   4a2ae:	6863      	ldr	r3, [r4, #4]
   4a2b0:	429e      	cmp	r6, r3
   4a2b2:	d0da      	beq.n	4a26a <add_event+0x10>
   4a2b4:	6836      	ldr	r6, [r6, #0]
   4a2b6:	e7eb      	b.n	4a290 <add_event+0x36>

0004a2b8 <z_handle_obj_poll_events>:
	return list->head == list;
   4a2b8:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   4a2ba:	4298      	cmp	r0, r3
   4a2bc:	d00a      	beq.n	4a2d4 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   4a2be:	e9d3 0200 	ldrd	r0, r2, [r3]
   4a2c2:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   4a2c4:	6818      	ldr	r0, [r3, #0]
   4a2c6:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   4a2c8:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   4a2ca:	4618      	mov	r0, r3
	node->prev = NULL;
   4a2cc:	e9c3 2200 	strd	r2, r2, [r3]
   4a2d0:	f7ff bfa8 	b.w	4a224 <signal_poll_event>
	}
}
   4a2d4:	4770      	bx	lr

0004a2d6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   4a2d6:	4770      	bx	lr

0004a2d8 <sulp>:
   4a2d8:	b570      	push	{r4, r5, r6, lr}
   4a2da:	4604      	mov	r4, r0
   4a2dc:	460d      	mov	r5, r1
   4a2de:	4616      	mov	r6, r2
   4a2e0:	ec45 4b10 	vmov	d0, r4, r5
   4a2e4:	f7fb ffc4 	bl	46270 <__ulp>
   4a2e8:	ec51 0b10 	vmov	r0, r1, d0
   4a2ec:	b17e      	cbz	r6, 4a30e <sulp+0x36>
   4a2ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
   4a2f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   4a2f6:	2b00      	cmp	r3, #0
   4a2f8:	dd09      	ble.n	4a30e <sulp+0x36>
   4a2fa:	051b      	lsls	r3, r3, #20
   4a2fc:	2400      	movs	r4, #0
   4a2fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   4a302:	4622      	mov	r2, r4
   4a304:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   4a308:	462b      	mov	r3, r5
   4a30a:	f7ce fa45 	bl	18798 <__aeabi_dmul>
   4a30e:	bd70      	pop	{r4, r5, r6, pc}
