# Nordic WiFi driver for nRF52840 and nRF5340
#
# Copyright (c) 2022 Nordic Semiconductor
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

config WPA_SUPP
	bool "WPA supplicant support"
	# Need full POSIX from libc, Zephyr's POSIX support is only partial
	depends on !POSIX_API
	select POSIX_CLOCK
	select NET_SOCKETS
	select NET_SOCKETS_PACKET
	select NET_SOCKETPAIR
	select NET_L2_WIFI_MGMT
	select WIFI_NM
	select EXPERIMENTAL if !SOC_SERIES_NRF53X && !SOC_SERIES_NRF91X
	help
	  WPA supplicant implements 802.1X related functions.

if WPA_SUPP

# Memory optimizations
config WPA_SUPP_ADVANCED_FEATURES
	bool "Enable advanced features"
	default y

if WPA_SUPP_ADVANCED_FEATURES

config WPA_SUPP_ROBUST_AV
	bool "Robust Audio Video streaming support"
	default y

config WPA_SUPP_WMM_AC
	bool "WMM admission control"
	default y

config WPA_SUPP_MBO
	bool "Agile Multiband support"
	default y

config WPA_SUPP_WNM
	bool "Wireless Network Management support"
	default y

config WPA_SUPP_RRM
	bool "Radio Resource Management support"
	default y
endif

choice LIBC_IMPLEMENTATION
	default NEWLIB_LIBC
endchoice

config WPA_SUPP_THREAD_STACK_SIZE
	int "Stack size for wpa_supplicant thread"
	default 8192

config WPA_SUPP_WQ_STACK_SIZE
	int "Stack size for wpa_supplicant workqueue"
	default 4096

config WPA_SUPP_WQ_PRIORITY
	int "Priority for wpa_supplicant workqueue"
	default 7

config WPA_SUPP_CRYPTO_WEP
	bool "WEP (Legacy crypto) support"

choice WPA_SUPP_CRYPTO_BACKEND
	prompt "WPA supplicant crypto implementation"
	default WPA_SUPP_CRYPTO_PSA if BUILD_WITH_TFM
	default WPA_SUPP_CRYPTO_LEGACY if !BUILD_WITH_TFM
	help
	  Select the crypto implementation to use for WPA supplicant.

# To easily manage the crypto dependencies we separate the crypto
# implementations into two Kconfig options. One for the legacy crypto
# and one for the PSA crypto.
config WPA_SUPP_CRYPTO_PSA
	bool "PSA Crypto support for WiFi"
	select NRF_SECURITY
	select PSA_WANT_KEY_TYPE_AES
	select PSA_WANT_ALG_CMAC
	select PSA_WANT_ALG_CBC_PKCS7
	select PSA_WANT_ALG_CTR
	select PSA_WANT_ALG_ECDSA
	select PSA_WANT_GENERATE_RANDOM
	select PSA_WANT_ALG_RSA_PSS
	select PSA_WANT_ALG_DETERMINISTIC_ECDSA
	select PSA_WANT_ALG_SHA_512
	select PSA_WANT_ALG_SHA_1
	select PSA_WANT_KEY_TYPE_RSA_KEY_PAIR
	select PSA_WANT_ECC_SECP_R1_256
	# Legacy crypto, still needed
	select MBEDTLS_CMAC_C
	select MBEDTLS_GCM_C
	select MBEDTLS_TLS_LIBRARY
	select MBEDTLS_PK_WRITE_C
	select MBEDTLS_X509_LIBRARY
	select MBEDTLS_X509_CRT_PARSE_C
	select MBEDTLS_CIPHER_C
	select MBEDTLS_CIPHER_MODE_CTR
	select MBEDTLS_CIPHER_MODE_CBC
	select MBEDTLS_SSL_TLS_C
	select MBEDTLS_ECP_C
	select MBEDTLS_CTR_DRBG_C
	select MBEDTLS_KEY_EXCHANGE_ALL_ENABLED

config WPA_SUPP_CRYPTO_LEGACY
	bool "Legacy Crypto support for WiFi"
	select MBEDTLS
	select NRF_SECURITY
	select MBEDTLS_CIPHER_MODE_CBC
	select MBEDTLS_CIPHER_MODE_CTR
	select MBEDTLS_LEGACY_CRYPTO_C
	select MBEDTLS_ECP_C
	select MBEDTLS_CTR_DRBG_C
	select MBEDTLS_PK_WRITE_C
	select MBEDTLS_KEY_EXCHANGE_ALL_ENABLED

config WPA_SUPP_CRYPTO_NONE
	bool "No Crypto support for WiFi"

endchoice

# To fix MAC_MD5 Kconfig warning
config NET_TCP_ISN_RFC6528
	default n if !WPA_SUPP_CRYPTO_NONE

config WPA_SUPP_CRYPTO_ENTERPRISE
	bool "Enterprise Crypto support for WiFi"
	depends on !WPA_SUPP_CRYPTO_NONE

config WPA_SUPP_WPA3
	bool "WPA3 support"
	depends on !WPA_SUPP_CRYPTO_NONE
	default y

config WPA_SUPP_AP
	bool "AP mode support"

config WPA_SUPP_WPS
	bool "WPS support"
	depends on !WPA_SUPP_CRYPTO_NONE

config WPA_SUPP_P2P
	bool "P2P mode support"
	select WPA_SUPP_AP
	select WPA_SUPP_WPS

config WPA_SUPP_EAPOL
	bool "Enable EAPoL supplicant"

config WPA_CLI
	bool "CLI support for wpa_supplicant"
	default n

config NET_SOCKETPAIR_BUFFER_SIZE
	default 4096

config POSIX_MAX_FDS
	# l2_packet - 1
	# ctrl_iface - 2 * socketpairs = 4(local and global)
	# z_wpa_event_sock - 1 socketpair = 2
	# Remaining left for the applications running in default configuration
	default 16 if !POSIX_API

config BSS_MAX_IDLE_TIME
	int "BSS max idle timeout in seconds"
	range 0 64000
	default 300
	help
	  BSS max idle timeout is the period for which AP may keep a client
	  in associated state while there is no traffic from that particular
	  client. Set 0 to disable inclusion of BSS max idle time tag in
	  association request. If a non-zero value is set, STA can suggest a
	  timeout by including BSS max idle period in the association request.
	  AP may choose to consider or ignore the STA's preferred value.
	  Ref: Sec 11.21.13 of IEEE Std 802.11â„¢-2020

# Control interface is stack heavy (buffers + snprintfs)
# Making calls to RPU from net_mgmt callbacks (status - RSSI)
config NET_MGMT_EVENT_STACK_SIZE
	default 4096

config NET_SOCKETS_POLL_MAX
	default 6

# Supplicant API is stack heavy (buffers + snprintfs) and control interface
# uses socketpair which pushes the stack usage causing overflow for 2048 bytes.
config SYSTEM_WORKQUEUE_STACK_SIZE
	default 2560

module = WPA_SUPP
module-str = WPA supplicant
source "subsys/logging/Kconfig.template.log_config"

config WPA_SUPP_DEBUG_LEVEL
	int "Min compiled-in debug message level for WPA supplicant"
	default 0 if WPA_SUPP_LOG_LEVEL_DBG # MSG_EXCESSIVE
	default 3 if WPA_SUPP_LOG_LEVEL_INF # MSG_INFO
	default 4 if WPA_SUPP_LOG_LEVEL_WRN # MSG_WARNING
	default 5 if WPA_SUPP_LOG_LEVEL_ERR # MSG_ERROR
	default 6
	help
	  Minimum priority level of a debug message emitted by WPA supplicant that
	  is compiled-in the firmware. See wpa_debug.h file of the supplicant for
	  available levels and functions for emitting the messages. Note that
	  runtime filtering can also be configured in addition to the compile-time
	  filtering.

# Debug logs need more buffer space
config LOG_BUFFER_SIZE
	default 4096 if WPA_SUPP_LOG_LEVEL_DBG
	default 2048

config WPA_SUPP_NO_DEBUG
	bool "Disable printing of debug messages, saves code size significantly"
endif
