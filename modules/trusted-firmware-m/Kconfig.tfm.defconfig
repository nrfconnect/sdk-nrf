#
# Copyright (c) 2023 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

config TFM_BOARD
	string
	# Redefinition of TFM_BOARD to use out-of-tree boards.
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/trusted-firmware-m/tfm_boards/nrf9160" if SOC_NRF9160
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/trusted-firmware-m/tfm_boards/nrf9120" if SOC_NRF9120
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/trusted-firmware-m/tfm_boards/nrf5340_cpuapp" if SOC_NRF5340_CPUAPP
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp" if SOC_SERIES_NRF54LX
	depends on TRUSTED_EXECUTION_NONSECURE

if BUILD_WITH_TFM

config TFM_ISOLATION_LEVEL
	default 1 if SOC_FAMILY_NORDIC_NRF

config TFM_BL2
	bool
	default n

config TFM_DUMMY_PROVISIONING
	bool
	default n

config TFM_REGRESSION_NS
	bool
	select NRF_TIMER0_SECURE

config TFM_LOG_LEVEL_SILENCE
	# Overrule zephyr disable TF-M secure output if the uart1 node has not
	# assigned GPIO pins using pinctrl.
	default n
	depends on $(dt_nodelabel_has_prop,uart0,pinctrl-names)  || \
		   $(dt_nodelabel_has_prop,uart1,pinctrl-names)  || \
		   $(dt_nodelabel_has_prop,uart00,pinctrl-names) || \
		   $(dt_nodelabel_has_prop,uart20,pinctrl-names) || \
		   $(dt_nodelabel_has_prop,uart21,pinctrl-names) || \
		   $(dt_nodelabel_has_prop,uart22,pinctrl-names) || \
		   $(dt_nodelabel_has_prop,uart30,pinctrl-names)

choice TFM_PROFILE_TYPE
	default TFM_PROFILE_TYPE_NOT_SET if SOC_SERIES_NRF54LX
	default TFM_PROFILE_TYPE_MINIMAL
endchoice

choice TFM_MODEL
	default TFM_SFN if TFM_PROFILE_TYPE_MINIMAL
endchoice

config TFM_QCBOR_PATH
	string
	default "$(ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR)/../qcbor"

config TFM_PARTITION_INITIAL_ATTESTATION
	bool
	# We select "implementation ID" because it is a mandatory claim
	# in the IAT.
	# The initial attestation partition requires ECDSA algorithm with
	# SHA-256 and uses the Identity Key stored in the KMU.
	# The identity key is a secp256r1 key pair.
	# The ECDSA algorithm and the cc3xx boot seed requires RNG.
	select PSA_WANT_ALG_SHA_256
	select PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_GENERATE
	select PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_EXPORT
	select PSA_WANT_ALG_ECDSA
	select PSA_WANT_ECC_SECP_R1_256
	select PSA_WANT_GENERATE_RANDOM
	select SECURE_BOOT_STORAGE

config TFM_PARTITION_PROTECTED_STORAGE
	bool
	# The encryption policy relies on a secret hardware unique key (HUK) per device.
	# The protected storage partition require HKDF with HMAC and SHA-256 to
	# derive the storage key and an AEAD encryption algorithm for storage
	# encryption.
	select HW_UNIQUE_KEY if HW_UNIQUE_KEY_SUPPORTED
	select PSA_WANT_ALG_HKDF
	select PSA_WANT_ALG_HMAC
	select PSA_WANT_ALG_SHA_256
	select PSA_WANT_KEY_TYPE_AES
	select PSA_WANT_ALG_CCM if SOC_SERIES_NRF91X
	select PSA_WANT_ALG_GCM if SOC_NRF5340_CPUAPP
	select PSA_WANT_ALG_GCM if SOC_SERIES_NRF54LX

config TFM_ITS_ENCRYPTED
	bool
	select PSA_WANT_ALG_CHACHA20_POLY1305 if SOC_SERIES_NRF54LX

config BOOTLOADER_MCUBOOT
	bool
	imply TFM_HW_INIT_RESET_ON_BOOT
	imply TFM_HW_INIT_NRF_PERIPHERALS

endif # BUILD_WITH_TFM
