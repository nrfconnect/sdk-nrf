menu "MCUboot"

config BOOT_SIGNATURE_KEY_FILE
	string "MCUBoot PEM key file"
	depends on !MCUBOOT_BUILD_STRATEGY_FROM_SOURCE
	help
	  Absolute path to PEM key file containing the private key corresponding
	  to the public key included in MCUBoot. This will be used to sign the
	  image so that it can be verified by MCUBoot. Since MCUBoot is not
	  built from source, it is not possible for the build system to deduce
	  what key was used when compiling it. Hence, it is required that the
	  key is passed to the build system through this option.

config SIGN_IMAGES
	bool "Sign images for MCUBoot"
	default y
	imply BUILD_OUTPUT_META
	depends on MCUBOOT_BUILD_STRATEGY_FROM_SOURCE \
		   || BOOT_SIGNATURE_KEY_FILE != ""
	help
	  Sign images for MCUBoot as integrated part of the build stages using
	  the private key.

if BOOTLOADER_MCUBOOT

config BOOT_BUILD_DIRECT_XIP_VARIANT
	bool "Build DIRECT_XIP variant"
	help
	  Build a variant of the 'app' image which can be used for DIRECT_XIP.

# The name of this configuration needs to match the requirements set by the
# script `partition_manager.py`. See `pm.yml` in the application directory
# of MCUBoot.
module=MCUBOOT
source "${ZEPHYR_BASE}/../nrf/subsys/partition_manager/Kconfig.template.build_strategy"

config MCUBOOT_IMAGE_VERSION
	string "Image version"
	default "0.0.0+0"
	help
	  Value to be passed as 'version' argument to 'imgtool.py' when
	  creating signed image. Note that no semantics are connected to
	  this variable. It does not provide downgrade prevention, and is only
	  valuable for debugging purposes. Format: maj.min.rev+build with
	  latter parts optional.

# HACK: NCS temphack to keep our imgtool integration working now that
# there is no CONFIG_DT_* CMake namespace anymore. Use Zephyr
# kconfigfunctions to thread the flash write block size through
# Kconfig so it can be accessed from CMake. Needs a better solution.
DT_ZEPHYR_FLASH := zephyr,flash
DT_CHOSEN_ZEPHYR_FLASH := $(dt_chosen_path,$(DT_ZEPHYR_FLASH))
config MCUBOOT_FLASH_WRITE_BLOCK_SIZE
	int
	default $(dt_node_int_prop_int,$(DT_CHOSEN_ZEPHYR_FLASH),write-block-size)

endif # BOOTLOADER_MCUBOOT

config DT_FLASH_WRITE_BLOCK_SIZE
	int
	default $(dt_node_int_prop_int,$(DT_CHOSEN_ZEPHYR_FLASH),write-block-size)

config MCUBOOT_USB_SUPPORT
	bool
	default y if "$(dt_nodelabel_enabled,zephyr_udc0)"

config DFU_MULTI_IMAGE_PACKAGE_BUILD
	bool "Build DFU Multi Image package"
	depends on BOOTLOADER_MCUBOOT
	help
	  Build DFU Multi Image package that contains a manifest file followed by
	  selected update images.

if DFU_MULTI_IMAGE_PACKAGE_BUILD

config DFU_MULTI_IMAGE_PACKAGE_APP
	bool "Include Application Core image in DFU Multi Image package"
	default y

config DFU_MULTI_IMAGE_PACKAGE_NET
	bool "Include Network Core image in DFU Multi Image package"
	depends on NRF53_UPGRADE_NETWORK_CORE
	default y

config DFU_MULTI_IMAGE_PACKAGE_MCUBOOT
	bool "Include MCUboot image in DFU Multi Image package"
	depends on BUILD_S1_VARIANT
	# Currently simultaneous application and MCUboot updates are unsupported
	depends on !DFU_MULTI_IMAGE_PACKAGE_APP && !DFU_MULTI_IMAGE_PACKAGE_NET

endif # DFU_MULTI_IMAGE_PACKAGE_BUILD

endmenu
