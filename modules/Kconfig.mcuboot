config SIGN_IMAGES
	bool "Sign images for MCUBoot"
	default y
	depends on MCUBOOT_BUILD_STRATEGY_FROM_SOURCE \
		   || BOOT_SIGNATURE_KEY_FILE != ""
	help
	  Sign images for MCUBoot as integrated part of the build stages using
	  the private key.

config BOOT_SIGNATURE_KEY_FILE
	string "MCUBoot PEM key file"
	depends on !MCUBOOT_BUILD_STRATEGY_FROM_SOURCE
	help
	  Absolute path to PEM key file containing the private key corresponding
	  to the public key included in MCUBoot. This will be used to sign the
	  image so that it can be verified by MCUBoot. Since MCUBoot is not
	  built from source, it is not possible for the build system to deduce
	  what key was used when compiling it. Hence, it is required that the
	  key is passed to the build system through this option.

config INIT_ARCH_HW_AT_BOOT
	default n if SPM
	default y
	help
	  The image will be booted directly by an unknown image which might not
	  leave the system in a clean state, so it is necessary to perform
	  architecture specific hardware initialization.

DT_COMPAT_NORDIC_QSPI_NOR := nordic,qspi-nor
config NORDIC_QSPI_NOR
	default y if $(dt_compat_on_bus,$(DT_COMPAT_NORDIC_QSPI_NOR),qspi) && PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY && !SPI_NOR

DT_ZEPHYR_FLASH := zephyr,flash
DT_CHOSEN_ZEPHYR_FLASH := $(dt_chosen_path,$(DT_ZEPHYR_FLASH))
config NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE
	default $(dt_node_int_prop_int,$(DT_CHOSEN_ZEPHYR_FLASH),erase-block-size)
	help
	  Set the flash layout page size equal to the erase block size of the
	  chosen Zephyr flash devicetree node to ensure that swapping can be
	  performed.

config BOOT_IMAGE_ACCESS_HOOKS_FILE
	string
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/mcuboot/hooks/nrf53_hooks.c"
	depends on BOOT_IMAGE_ACCESS_HOOKS

config BOOT_IMAGE_ACCESS_HOOKS
	bool
	default y if UPDATEABLE_IMAGE_NUMBER > 1 && SOC_NRF5340_CPUAPP && PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY
	depends on MCUBOOT

config BOOT_UPGRADE_ONLY
	bool
	# Only here to satisfy compliance check

DT_COMPAT_SIM_FLASH:= zephyr,sim-flash
DT_SIM_FLASH_PATH := $(dt_nodelabel_path,flash_sim0)

config NRF53_MULTI_IMAGE_UPDATE
	bool "Support updating app core and net core in a single operation"
	default y
	depends on UPDATEABLE_IMAGE_NUMBER > 1
	depends on SOC_NRF5340_CPUAPP
	depends on BOOT_IMAGE_ACCESS_HOOKS
	depends on FLASH_SIMULATOR
	depends on FLASH_SIMULATOR_DOUBLE_WRITES
	depends on !FLASH_SIMULATOR_STATS
	depends on PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY
	depends on BOOT_UPGRADE_ONLY
	depends on $(dt_compat_enabled,$(DT_COMPAT_SIM_FLASH))

config NRF53_RAM_FLASH_SIZE
	hex
	depends on NRF53_MULTI_IMAGE_UPDATE
	default $(dt_node_reg_size_hex,$(DT_SIM_FLASH_PATH))
	help
	  When performing a multi image update on the nRF53 the net core data
	  is read from external flash, and buffered in  RAM. This option is used
	  to define forward the size of this RAM region to the partition manager
	  configuration.
