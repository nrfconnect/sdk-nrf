#
# Copyright (c) 2021 Nordic Semiconductor
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

# This files is included by MCUboots sample Kconfig

config BOOT_USE_MIN_PARTITION_SIZE
	bool "Build for a minimal image size"

partition=MCUBOOT_SCRATCH
partition-size=0x1e000
source "${ZEPHYR_BASE}/../nrf/subsys/partition_manager/Kconfig.template.partition_size"

partition=MCUBOOT_PAD
partition-size=0x200
source "${ZEPHYR_BASE}/../nrf/subsys/partition_manager/Kconfig.template.partition_size"

config PM_PARTITION_SIZE_MCUBOOT
	hex
	default FPROTECT_BLOCK_SIZE if (SOC_NRF5340_CPUAPP || SOC_NRF9160)
	default 0x3e00
	depends on (BOOT_NRF_EXTERNAL_CRYPTO && BOOT_USE_MIN_PARTITION_SIZE)

config PM_PARTITION_SIZE_MCUBOOT
	hex
	default FPROTECT_BLOCK_SIZE if SOC_NRF9160
	default 0x7c00
	depends on BOOT_USE_MIN_PARTITION_SIZE

config PM_PARTITION_SIZE_MCUBOOT
	hex "Flash space allocated for the MCUboot partition." if !BOOT_USE_MIN_PARTITION_SIZE
	default 0xc000
	help
	  Flash space set aside for the MCUboot partition.

config BOOT_USE_NRF_CC310_BL
	bool
	select NRF_CC310_BL

config BOOT_USE_NRF_EXTERNAL_CRYPTO
	bool
	# Hidden option
	default n
	# When building for ECDSA, we use our own copy of mbedTLS, so the
	# Zephyr one must not be enabled or the MBEDTLS_CONFIG_FILE macros
	# will collide.
	depends on ! MBEDTLS
	help
	  Use Shared crypto for crypto primitives.


config MCUBOOT_NRF_CLEANUP_PERIPHERAL
	bool "Perform peripheral cleanup before chain-load the application"
	depends on SOC_FAMILY_NRF
	default y

config MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD
	bool "Allow to select image number for DFU"
	help
	  With the option enabled, the mcuboot serial recovery will
	  respect the "image" field in mcumgr image update frame
	  header.
	  The mapping of image number to partition is as follows:
	    0 -> default behaviour, same as 1;
	    1 -> image-0 (primary slot of the first image);
	    2 -> image-1 (secondary slot of the first image);
	    3 -> image-2;
	    4 -> image-3.
	  Note that 0 is default upload target when no explicit
	  selection is done.

config BOOT_ERASE_PROGRESSIVELY
	bool "Erase flash progressively when receiving new firmware"
	default y if SOC_FAMILY_NRF
	help
	 If enabled, flash is erased as necessary when receiving new firmware,
	 instead of erasing the whole image slot at once. This is necessary
	 on some hardware that has long erase times, to prevent long wait
	 times at the beginning of the DFU process.

menuconfig ENABLE_MGMT_PERUSER
	bool "Enable system specific mcumgr commands"
	help
	  The option enables processing of system specific mcumgr commands;
	  system specific commands are within group MGMT_GROUP_ID_PERUSER (64)
	  and above, as defined within mcumgr library.
	  These are system specific command and system specific implementation
	  function is required to process these commands.

if ENABLE_MGMT_PERUSER
config BOOT_MGMT_CUSTOM_STORAGE_ERASE
	bool "Enable storage erase command"
	help
	  The option enables mcumgr command that allows to erase storage
	  partition.
	  Note that the storage partition needs to be defined, in DTS, otherwise
	  enabling the option will cause a compilation to fail.

config BOOT_MGMT_CUSTOM_IMG_LIST
	bool "Enable custom image list command"
	help
	  The option enables command which returns versions and installation
	  statuses (custom property) for all images.

endif # ENABLE_MGMT_PERUSER


config BOOT_IMAGE_ACCESS_HOOKS
	bool "Enable hooks for overriding MCUboot's native routines"
	help
	  Allow to provide procedures for override or extend native
	  MCUboot's routines required for access the image data and the image
	  update.

config BOOT_IMAGE_ACCESS_HOOKS_FILE
	string "Hooks implementation file path"
	depends on BOOT_IMAGE_ACCESS_HOOKS
	help
	  Path to the file which implements hooks.
	  You can use either absolute or relative path.
	  In case relative path is used, the build system assumes that it starts
	  from the directory where the MCUBoot KConfig configuration file is
	  located. If the key file is not there, the build system uses relative
	  path that starts from the zephyr port cmake directory (boot/zephyr/).

config SIGN_IMAGES
	bool "Sign images for MCUBoot"
	default y
	depends on MCUBOOT_BUILD_STRATEGY_FROM_SOURCE \
		   || BOOT_SIGNATURE_KEY_FILE != ""
	help
	  Sign images for MCUBoot as integrated part of the build stages using
	  the private key.

config BOOT_SIGNATURE_KEY_FILE
	string "MCUBoot PEM key file"
	depends on !MCUBOOT_BUILD_STRATEGY_FROM_SOURCE
	help
	  Absolute path to PEM key file containing the private key corresponding
	  to the public key included in MCUBoot. This will be used to sign the
	  image so that it can be verified by MCUBoot. Since MCUBoot is not
	  built from source, it is not possible for the build system to deduce
	  what key was used when compiling it. Hence, it is required that the
	  key is passed to the build system through this option.

config INIT_ARCH_HW_AT_BOOT
	default n if SPM
	default y
	help
	  The image will be booted directly by an unknown image which might not
	  leave the system in a clean state, so it is necessary to perform
	  architecture specific hardware initialization.

DT_COMPAT_NORDIC_QSPI_NOR := nordic,qspi-nor
config NORDIC_QSPI_NOR
	default y if $(dt_compat_on_bus,$(DT_COMPAT_NORDIC_QSPI_NOR),qspi) && PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY && !SPI_NOR

DT_ZEPHYR_FLASH := zephyr,flash
DT_CHOSEN_ZEPHYR_FLASH := $(dt_chosen_path,$(DT_ZEPHYR_FLASH))
config NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE
	default $(dt_node_int_prop_int,$(DT_CHOSEN_ZEPHYR_FLASH),erase-block-size)
	help
	  Set the flash layout page size equal to the erase block size of the
	  chosen Zephyr flash devicetree node to ensure that swapping can be
	  performed.

config BOOT_IMAGE_ACCESS_HOOKS_FILE
	string
	default "${ZEPHYR_NRF_MODULE_DIR}/modules/mcuboot/hooks/nrf53_hooks.c"
	depends on BOOT_IMAGE_ACCESS_HOOKS

config BOOT_IMAGE_ACCESS_HOOKS
	bool
	default y if UPDATEABLE_IMAGE_NUMBER > 1 && SOC_NRF5340_CPUAPP && PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY
	depends on MCUBOOT

DT_COMPAT_SIM_FLASH:= zephyr,sim-flash
DT_SIM_FLASH_PATH := $(dt_nodelabel_path,flash_sim0)

config NRF53_MULTI_IMAGE_UPDATE
	bool "Support updating app core and net core in a single operation"
	default y
	depends on UPDATEABLE_IMAGE_NUMBER > 1
	depends on SOC_NRF5340_CPUAPP
	depends on BOOT_IMAGE_ACCESS_HOOKS
	depends on FLASH_SIMULATOR
	depends on FLASH_SIMULATOR_DOUBLE_WRITES
	depends on !FLASH_SIMULATOR_STATS
	depends on PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY
	depends on BOOT_UPGRADE_ONLY
	depends on $(dt_compat_enabled,$(DT_COMPAT_SIM_FLASH))

config NRF53_RAM_FLASH_SIZE
	hex
	depends on NRF53_MULTI_IMAGE_UPDATE
	default $(dt_node_reg_size_hex,$(DT_SIM_FLASH_PATH))
	help
	  When performing a multi image update on the nRF53 the net core data
	  is read from external flash, and buffered in  RAM. This option is used
	  to define forward the size of this RAM region to the partition manager
	  configuration.
