# Workflow that runs static code analysis using sonarcloud.io.
name: Sonarcloud analysis
on:
  push:
    branches:
      - main
  workflow_dispatch:  # This is added to be able to trigger this manually from github's web UI.

jobs:
  build:
    name: Sonar cloud analysis
    runs-on: self-hosted
    container: zephyrprojectrtos/ci:v0.26.4
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          path: ncs/nrf
          fetch-depth: 0

      # Install more dependencies that are not part of the docker image but are needed by the workflow
      - name: Install more deps
        run: |
          apt-get update
          apt install -y curl ruby-full jq

      - name: Install sonar-scanner and build-wrapper
        uses: sonarsource/sonarcloud-github-c-cpp@v2.0.2

      # The docker image comes pre-initialized with west dependencies. We want to do west update ourselves to to be sure that we get the latest changes in all repos.
      # The docker image is built nightly. So it may contain slightly out of date repos.
      # Hence we remove the .west folder and do a re-init
      - name: West init and update
        run: |
          rm -rf /workdir/.west/
          west init -l ncs/nrf
          cd ncs
          west update --narrow -o=--depth=1

      # For the sake of speed, stop the build at cmake stage. This is enough to get twister to
      # generate the compilation database (compile_commands.json) for each sample/test.
      # Note that the syscalls do not get generated by the build system. This will result in
      # slightly incorrect analysis. But this is acceptable for the sake of speed.
      - name: Invoke twister.
        shell: bash
        continue-on-error: true # Some samples fail to compile due to missing tools in the docker image.
        run: |
          source ncs/zephyr/zephyr-env.sh
          west twister --ninja --integration --quarantine-list ncs/nrf/scripts/quarantine.yaml --clobber-output --cmake-only -v -i -T ncs/nrf

      # Since sonarscanner accepts just one json file for compilation database, we need to
      # combine all the compile_commands.json files into one and then flatten it.
      # The process of flattening is needed to avoid the error
      # "Expected BEGIN_OBJECT but was BEGIN_ARRAY".
      - name: Combine compilation database.
        shell: bash
        run: |
          jq -s . `find . -name compile_commands.json` > combined_compile_commands_unflattened.json
          cat combined_compile_commands_unflattened.json
          jq -c '.[] | .[]' combined_compile_commands_unflattened.json | jq -s '.' > combined_compile_commands.json
          cat combined_compile_commands.json

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -X --define project.settings=ncs/nrf/sonar-project.properties
