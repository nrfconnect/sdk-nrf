// Due to JENKINS-42369 we put these defines outside the pipeline
def IMAGE_TAG = "itsrv80.nordicsemi.no/ncs-toolchain:1.00"
def REGISTRY = "https://itsrv80.nordicsemi.no/"
def REPO_ZEPHYR = "https://github.com/NordicBuilder/fw-nrfconnect-zephyr.git"

pipeline {
  agent {
    docker {
      image "$IMAGE_TAG"
      registryUrl "$REGISTRY"
      label "docker"
      args "-u jenkins:jenkins"
    }
  }
  // Checkout the repository to this folder instead of root
  options { checkoutToSubdirectory('nrf') }

  environment {
      SANITYCHECK_OPTIONS = " --inline-logs"
      ARCH = "-a arm"
      COMMIT_RANGE = "origin/${BRANCH_NAME}..HEAD"
      LC_ALL = "C.UTF-8"
  }

  stages {
    stage('Checkout repositories') {
      steps {
        dir("zephyr") { // Do the subsequent steps (checkout) in this specific folder
          git branch: "$BRANCH_NAME", url: "$REPO_ZEPHYR", credentialsId: 'github'
        }
      }
    }

    stage('Testing') {
      parallel {
        stage('Build nrf_desktop') {
          steps {
            // Use paranthesis to avoid actually changing the current working directory 
            sh "mkdir nrf/samples/nrf_desktop/build_pca20041 nrf/samples/nrf_desktop/build_pca10056 nrf/samples/nrf_desktop/build_pca63519"
            sh "(source zephyr/zephyr-env.sh && cd nrf/samples/nrf_desktop/build_pca20041 && cmake .. -DBOARD=nrf52840_pca20041 && make -j 8)"
            sh "(source zephyr/zephyr-env.sh && cd nrf/samples/nrf_desktop/build_pca10056 && cmake .. -DBOARD=nrf52840_pca10056 && make -j 8)"
            sh "(source zephyr/zephyr-env.sh && cd nrf/samples/nrf_desktop/build_pca63519 && cmake .. -DBOARD=nrf52_pca63519    && make -j 8)"
            // Check if the files were successfully built
            script {
              
              if (fileExists('nrf/samples/nrf_desktop/build_pca20041/zephyr/zephyr.hex') && \
                  fileExists('nrf/samples/nrf_desktop/build_pca10056/zephyr/zephyr.hex') && \
                  fileExists('nrf/samples/nrf_desktop/build_pca63519/zephyr/zephyr.hex')) {
                echo "nrf_desktop build successful!"
                archiveArtifacts artifacts: 'nrf/samples/nrf_desktop/**/zephyr.hex'
              }
              else {
                echo "nrf_desktop build failed!"
                currentBuild.result = 'FAILURE'
              }
            }
          }
        }
    
        stage('Run sanity check') {
          steps {
            //sh "source zephyr/zephyr-env.sh && ./zephyr/scripts/sanitycheck $ARCH $SANITYCHECK_OPTIONS"
            sh "ls *"
          }
        }
    
        stage('Run compliance check') {
          steps {
            // Define a Groovy script block, which allows things like try/catch. If not, the junit command will not be run if check-compliance fails
            script {
              try {
                sh "(source zephyr/zephyr-env.sh && cd nrf && ../zephyr/scripts/ci/check-compliance.py --commits $COMMIT_RANGE)"
              }
              finally {
                junit 'nrf/compliance.xml'
              }
            }
          }
        }
      }
    }
    // Clean up the working space at the end (including tracked files)
    stage('Cleanup') {
      steps {
        cleanWs()
      }
    }
  }
}