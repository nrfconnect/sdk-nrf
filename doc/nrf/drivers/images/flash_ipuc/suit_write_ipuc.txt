@startuml
autonumber
participant ssf
participant sdfw_ipuc
participant arbiter
participant sys_cache
participant suit_utils


--> ssf ++ : suit_ipuc_write(\n    component_id,\n    offset,\n    addr,\n    size,\n    last_chunk\n)
ssf -> ssf : << check if addr aligned with cache lines >>
ssf -> ssf : << extend size to full cache lines >>

ssf -> arbiter ++ : arbiter_mem_access_check(ssf_remote, addr, size)
deactivate arbiter

ssf -> sys_cache ++ : sys_cache_data_invd_range(addr, size)
deactivate sys_cache

ssf -> sdfw_ipuc ++ : suit_ipuc_sdfw_write(\n    ssf_remote,\n    component_id,\n    offset,\n    addr,\n    size,\n    last_chunk\n)

sdfw_ipuc -> suit_utils ++ : suit_plat_decode_component_type(component_id)
deactivate suit_utils
sdfw_ipuc -> suit_utils ++ : suit_plat_decode_address_size(component_id)
deactivate suit_utils

sdfw_ipuc -> ipuc_entry ** : ipuc_entry_from_component_id(component_id)
rnote over ipuc_entry
  IPUC_IPC_IN_PLACE_UPDATE
end note

note right
  Remote must match the remote from
  the previous suit_ipuc_write_setup(..) call
end note

sdfw_ipuc -> ipuc_entry ++: << check if last chunk stored >>
note right
  Last chunk flag not set.
  If set, exits with an error code.
end note
deactivate ipuc_entry

opt size > 0

  sdfw_ipuc -> flash_sink ** : suit_flash_sink_get(address, size)
  sdfw_ipuc -> ipuc_entry ++ : << read write peek offset >>
  deactivate ipuc_entry
  opt offset > write_peek_offset
    sdfw_ipuc -> flash_sink ++ : seek(write_peek_offset)
    deactivate flash_sink
    sdfw_ipuc -> flash_sink ++ : erase(offset - write_peek_offset)
    deactivate flash_sink
  end
  sdfw_ipuc -> flash_sink ++ : seek (offset)
  deactivate flash_sink
  sdfw_ipuc -> flash_sink ++ : write(adr, size)
  deactivate flash_sink
  sdfw_ipuc -> flash_sink : release()
  destroy flash_sink
  sdfw_ipuc -> ipuc_entry ++ : << update write peek offset >>
  deactivate ipuc_entry
end

opt last_chunk == true
  sdfw_ipuc -> ipuc_entry ++ : << last chunk stored >>
  deactivate ipuc_entry
end

deactivate sdfw_ipuc
deactivate ssf

@enduml
