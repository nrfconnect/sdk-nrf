@startuml
autonumber
participant flash_ipuc
participant devicetree
participant suit_utils
participant flash_ipuc_dev
participant ssf

--> flash_ipuc ++ : flash_image_ipuc_create(dfu_target_id, enc_info, comp_info)
flash_ipuc -> devicetree ++ : << find dfu_target_id >>
note right
  Iterates through static array, built based on device tree data:
   - An entry for each partition with dfu_target_img_<n>: is created.
end note
deactivate devicetree

flash_ipuc -> ssf ++ : suit_ipuc_get_count()
deactivate ssf
flash_ipuc -> flash_ipuc_dev ** : get_free_dev()
note right
  Fails if CONFIG_FLASH_IPUC_COUNT IPUCs
  are already allocated
end note

loop i < ipuc_count
  flash_ipuc -> ssf ++ : suit_ipuc_get_info(i)
  note right
    Provides the associated component_id and manifest role
  end note
  deactivate ssf

  flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(component_id)
  note right
    Decodes address and size of the memory region
  end note
  deactivate suit_utils

  opt regions_match(dfu_target_id, address, size)
    flash_ipuc -> flash_ipuc_dev ++ : << set address and size >>
    deactivate flash_ipuc_dev
    note right
      The partition and the component ID must
      describe exactly the same memory region.
    end note

    flash_ipuc -> flash_ipuc : read_access_check(ipuc[i].role)
    note right
      Root and application manifest components are readable on the CPUAPP.
      Radio manifest components are readable on the CPURAD.
    end note

    flash_ipuc -> flash_ipuc_dev ++ : << set read permission >>
    deactivate flash_ipuc_dev
    flash_ipuc -> flash_ipuc_dev ++ : << set pending flag >>
    deactivate flash_ipuc_dev
    note right
      IPUC initialization (discards memory contents) postponed
      until the first write() API call.
    end note

  end

  flash_ipuc -> flash_ipuc : i++
  note right
    Break the loop if component ID matches
    addresses from the devicetree
  end note
end

deactivate flash_ipuc

--> flash_ipuc ++: flash_image_ipuc_release(dfu_target_id)
flash_ipuc -> flash_ipuc : << find existing ipuc based on dfu_target_id >>
note right
  For consistency, only IPUC created with flash_image_ipuc_create(..)
  API can be released.
end note

flash_ipuc -> flash_ipuc_dev ++: write(0)
flash_ipuc_dev -> ssf ++ : suit_ipuc_write(last_chunk == true)
note right
  Image IPUCs do not use flush APIs, thus are
  automatically flushed by the release API.
end note
deactivate ssf
deactivate flash_ipuc_dev

flash_ipuc -> flash_ipuc_dev : release(ipuc_dev)
destroy flash_ipuc_dev

deactivate flash_ipuc

@enduml
