@startuml
autonumber
participant flash_ipuc_dev
participant sys_cache
participant ssf

--> flash_ipuc_dev ++ : write(offset, data, len)

flash_ipuc_dev -> flash_ipuc_dev : verify(offset + len < ipuc_size)

opt setup_pending == true
  rnote over flash_ipuc_dev
    The suit_ipuc_write_setup(..) API ensures that the
    existing memory content will be overwritten by the write(..) API.
  end note
  flash_ipuc_dev -> ssf ++ : suit_ipuc_write_setup(component_id, NULL, NULL)
  deactivate ssf
  flash_ipuc_dev -> flash_ipuc_dev : << clear pending flag >>
end

alt len == 0
  note over flash_ipuc_dev
    Any write with the size set to zero is interpreted as the "flush" request.
  end note
  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset, 0, 0, true)
  deactivate ssf
else
  flash_ipuc_dev -> flash_ipuc_dev : memcpy(aligned_buf, data, unaligned_bytes)
  note right
    All buffers passed through SSF API must be aligned to the cache lines.
    Use stack-allocated buffer to split write request into two parts:
     - First use internal, aligned buffer to align input data address.
     - Afterwards pass truncated, aligned input data.
  end note

  flash_ipuc_dev -> sys_cache ++ : sys_cache_data_flush_range(aligned_buf, sizeof(aligned_buf))
  deactivate sys_cache
  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset, aligned_buf, unaligned_bytes, false)
  deactivate ssf

  flash_ipuc_dev -> sys_cache ++ : sys_cache_data_flush_range(&data[unaligned_bytes], len)
  deactivate sys_cache
  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset + unaligned_bytes, &data[unaligned_bytes], len - unaligned_bytes, false)
  deactivate ssf
end

deactivate flash_ipuc_dev

rnote over flash_ipuc_dev
  The flash device instance remains allocated until
  flash_ipuc_release() or flash_image_ipuc_release() API call.
end note

@enduml
