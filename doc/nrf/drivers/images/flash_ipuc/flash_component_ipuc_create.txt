@startuml
autonumber
participant flash_ipuc
participant flash_ipuc_dev
participant ssf
participant suit_utils

--> flash_ipuc ++ : flash_component_ipuc_create(component_id, enc_info, comp_info)
flash_ipuc -> ssf ++ : suit_ipuc_get_count()
deactivate ssf
flash_ipuc -> flash_ipuc_dev ** : get_free_dev()
note right
  Fails if CONFIG_FLASH_IPUC_COUNT IPUCs
  are already allocated
end note

loop i < ipuc_count
  flash_ipuc -> ssf ++ : suit_ipuc_get_info(i)
  note right
    Provides the associated component_id and manifest role
  end note
  deactivate ssf
  flash_ipuc -> flash_ipuc : memcmp(ipuc[i].component_id, component_id)
  note right
    Component IDs must be equal.
  end note
  opt component ID matches
    flash_ipuc -> flash_ipuc_dev ++ : << set component_id >>
    deactivate flash_ipuc_dev
    flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(component_id)
    note right
      Decodes address and size of the memory region
    end note
    deactivate suit_utils
    flash_ipuc -> flash_ipuc_dev ++ : << set address and size >>
    deactivate flash_ipuc_dev
    flash_ipuc -> flash_ipuc : read_access_check(ipuc[i].role)
    note right
      Root and application manifest components are readable on the CPUAPP.
      Radio manifest components are readable on the CPURAD.
    end note
    flash_ipuc -> flash_ipuc_dev ++ : << set read_access >>
    deactivate flash_ipuc_dev
    flash_ipuc -> flash_ipuc_dev ++ : << set pending flag >>
    deactivate flash_ipuc_dev
    note right
      IPUC initialization (discards memory contents) postponed
      until the first write() API call.
    end note
  end
  flash_ipuc -> flash_ipuc : i++
  note right
    Break the loop if component ID found
  end note
end

deactivate flash_ipuc

--> flash_ipuc ++ : flash_ipuc_release()
flash_ipuc -> flash_ipuc_dev : release(ipuc_dev)
destroy flash_ipuc_dev

deactivate flash_ipuc

@enduml
