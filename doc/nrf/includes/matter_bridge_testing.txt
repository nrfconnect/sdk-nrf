.. tabs::

   .. group-tab:: Testing with simulated bridged devices

      a. Using the terminal emulator connected to the bridge, run the following :ref:`Matter CLI command <matter_bridge_cli>` to add a new bridged device:

         .. parsed-literal::
            :class: highlight

            uart:~$ matter_bridge add *<device_type>*

         The *<device_type>* is the value of the Matter device type that will be used to represent a new bridged device in the Matter Data Model.
         See the description in :ref:`matter_bridge_cli` for the list of supported values.
         For example, if you want to add a new bridged device that will be exposed as an On/Off Light endpoint, use the following command:

         .. code-block:: console

            uart:~$ matter_bridge add 256

         The terminal output is similar to the following one:

         .. code-block:: console

            I: Adding OnOff Light bridged device
            I: Added device to dynamic endpoint 3 (index=0)

      #. Write down the value for the bridged device dynamic endpoint ID.
         This is going to be used in the next steps (*<bridged_device_endpoint_ID>*).
      #. Use the :doc:`CHIP Tool <matter:chip_tool_guide>` to read the value of an attribute from the bridged device endpoint.
         For example, read the value of the *on-off* attribute from the *onoff* cluster using the following command:

         .. parsed-literal::
            :class: highlight

            ./chip-tool onoff read on-off *<bridge_node_ID>* *<bridged_device_endpoint_ID>*

   .. group-tab:: Testing with Bluetooth LE bridged devices

      a. Build and program the one of the following Bluetooth LE samples to an additional development kit compatible with the sample:

         * :ref:`peripheral_lbs`
         * :zephyr:code-sample:`ble_peripheral_esp`

      #. Connect the development kit that is running the Bluetooth LE sample to the PC.
      #. |connect_terminal_ANSI|
      #. Using the terminal emulator connected to the bridge, run the following :ref:`Matter CLI command <matter_bridge_cli>` to scan for available Bluetooth LE devices:

         .. code-block:: console

            uart:~$ matter_bridge scan

         The terminal output is similar to the following one, with an entry for each connected Bluetooth LE device:

         .. code-block:: console

            Scan result:
            ---------------------------------------------------------------------
            | Index |      Address      |                   UUID
            ---------------------------------------------------------------------
            | 0     | e6:11:40:96:a0:18 | 0x181a (Environmental Sensing Service)
            | 1     | c7:44:0f:3e:bb:f0 | 0xbcd1 (Led Button Service)

      #. Write down the value for the desired Bluetooth LE device index.
         This is going to be used in the next steps (*<bluetooth_device_index>*).
      #. Using the terminal emulator connected to the bridge, run the following :ref:`Matter CLI command <matter_bridge_cli>` to add a new bridged device:

         .. parsed-literal::
            :class: highlight

            uart:~$ matter_bridge add *<bluetooth_device_index>*

         The *<bluetooth_device_index>* is a Bluetooth LE device index that was scanned in the previous step.
         For example, if you want to add a new Bluetooth LE bridged device with index ``1``, use the following command:

         .. code-block:: console

            uart:~$ matter_bridge add 1

         The terminal output is similar to the following one:

         .. parsed-literal::
            :class: highlight

            I: Connected: C7:44:0F:3E:BB:F0 (random)
            ----------------------------------------------------------------------------------------
            | Bridged Bluetooth LE device authentication                                           |
            |                                                                                      |
            | Insert pin code displayed by the Bluetooth LE peripheral device                      |
            | to authenticate the pairing operation.                                               |
            |                                                                                      |
            | To do that, use matter_bridge pincode <ble_device_index> <pincode> shell command.    |
            ----------------------------------------------------------------------------------------

      #. Write down the authentication pincode value from the Bluetooth LE bridged device terminal.
         The terminal output is similar to the following one:

         .. parsed-literal::
            :class: highlight

            Passkey for FD:D6:53:EB:92:3A (random): 350501

         In the above example output, the displayed pincode value is  ``350501``.
         It will be used in the next steps as *<bluetooth_authentication_pincode>*.
      #. Insert the authentication pincode of the bridged device in the Matter bridge terminal.
         To insert the pincode, run the following :ref:`Matter CLI command <matter_bridge_cli>` with *<bluetooth_authentication_pincode>* replaced by the value read in the previous step:

         .. parsed-literal::
            :class: highlight

            uart:~$ matter_bridge pincode *<bluetooth_device_index>* *<bluetooth_authentication_pincode>*

         For example, if you want to add a new Bluetooth LE bridged device with index ``1`` and pincode ``350501``, use the following command:

         .. code-block:: console

            uart:~$ matter_bridge pincode 1 350501

         The terminal output is similar to the following one:

         .. parsed-literal::
            :class: highlight

            I: Pairing completed: E3:9D:5E:51:AD:14 (random), bonded: 1

            I: Security changed: level 4
            I: The GATT discovery completed
            I: Added device to dynamic endpoint 3 (index=0)
            I: Added device to dynamic endpoint 4 (index=1)
            I: Created 0x100 device type on the endpoint 3
            I: Created 0xf device type on the endpoint 4

         For the LED Button Service and the Environmental Sensor, two endpoints are created:

         * For the LED Button Service, one implements the On/Off Light device and the other implements the Generic Switch or On/Off Light Switch device.
         * For the Environmental Sensor, one implements the Temperature Sensor and the other implements the Humidity Sensor.

      #. Write down the value for the bridged device dynamic endpoint ID.
         This is going to be used in the next steps (*<bridged_device_endpoint_ID>*).
      #. Use the :doc:`CHIP Tool <matter:chip_tool_guide>` to read the value of an attribute from the bridged device endpoint.
         For example, read the value of the *on-off* attribute from the *onoff* cluster using the following command:

         .. parsed-literal::
            :class: highlight

            ./chip-tool onoff read on-off *<bridge_node_ID>* *<bridged_device_endpoint_ID>*


         If you are using the Generic Switch implementation, read the value of the *current-position* attribute from the *switch* cluster using the following command:

         .. parsed-literal::
            :class: highlight

            ./chip-tool switch read current-position *<bridge_node_ID>* *<bridged_device_endpoint_ID>*

         Note that the Generic Switch is implemented as a momentary switch.
         This means that, in contrast to the latching switch, it remains switched on only as long as the physical button is pressed.

         In case of the Environmental Sensor, the current temperature and humidity measurements forwarded by the Bluetooth LE Environmental Sensor can be read as follows:

            * temperature:

               .. parsed-literal::
                  :class: highlight

                  ./chip-tool temperaturemeasurement read measured-value *<bridge_node_ID>* *<bridged_device_endpoint_ID>*

            * humidity:

               .. parsed-literal::
                  :class: highlight

                  ./chip-tool relativehumiditymeasurement read measured-value *<bridge_node_ID>* *<bridged_device_endpoint_ID>*
