<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="module__state__event_8h" kind="file" language="C++">
    <compoundname>module_state_event.h</compoundname>
    <includes local="no">sys/atomic.h</includes>
    <includes refid="event__manager_8h" local="no">event_manager.h</includes>
    <includes refid="event__manager__profiler_8h" local="no">event_manager_profiler.h</includes>
    <includedby refid="ml__result__event_8h" local="no">applications/machine_learning/src/events/ml_result_event.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/caf/events/module_state_event.h</label>
        <link refid="module__state__event_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>event_manager.h</label>
        <link refid="event__manager_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>event_manager_profiler.h</label>
        <link refid="event__manager__profiler_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>profiler.h</label>
        <link refid="profiler_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>event_manager_priv.h</label>
      </node>
      <node id="13">
        <label>event_manager_profiler_priv.h</label>
      </node>
      <node id="8">
        <label>logging/log_ctrl.h</label>
      </node>
      <node id="7">
        <label>sys/__assert.h</label>
      </node>
      <node id="2">
        <label>sys/atomic.h</label>
      </node>
      <node id="6">
        <label>sys/reboot.h</label>
      </node>
      <node id="11">
        <label>sys/util.h</label>
      </node>
      <node id="4">
        <label>zephyr.h</label>
      </node>
      <node id="5">
        <label>zephyr/types.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>applications/machine_learning/src/events/ml_result_event.h</label>
        <link refid="ml__result__event_8h"/>
      </node>
      <node id="1">
        <label>include/caf/events/module_state_event.h</label>
        <link refid="module__state__event_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmodule__flags" prot="public">module_flags</innerclass>
    <innerclass refid="structmodule__state__event" prot="public">module_state_event</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__caf__module__state__event_gab67bf9372a6820c068c16b731c4b0b5f_1gab67bf9372a6820c068c16b731c4b0b5f" prot="public" static="no">
        <name>MODULE_ID_LIST_SECTION_PREFIX</name>
        <initializer>module_id_list</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="25" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" prot="public" static="no">
        <name>MODULE_ID_PTR_VAR</name>
        <param><defname>mname</defname></param>
        <initializer>_CONCAT(__module_, mname)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="27" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_gaf5bf39cdacd24165674f6b3261c86184_1gaf5bf39cdacd24165674f6b3261c86184" prot="public" static="no">
        <name>MODULE_ID_LIST_SECTION_NAME</name>
        <initializer>STRINGIFY(<ref refid="group__caf__module__state__event_gab67bf9372a6820c068c16b731c4b0b5f_1gab67bf9372a6820c068c16b731c4b0b5f" kindref="member">MODULE_ID_LIST_SECTION_PREFIX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="28" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" prot="public" static="no">
        <name>MODULE_ID_LIST_START</name>
        <initializer>_CONCAT(__start_, <ref refid="group__caf__module__state__event_gab67bf9372a6820c068c16b731c4b0b5f_1gab67bf9372a6820c068c16b731c4b0b5f" kindref="member">MODULE_ID_LIST_SECTION_PREFIX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="29" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_gaa65e11879283d401925a9e7002ffcdf1_1gaa65e11879283d401925a9e7002ffcdf1" prot="public" static="no">
        <name>MODULE_ID_LIST_STOP</name>
        <initializer>_CONCAT(__stop_,  <ref refid="group__caf__module__state__event_gab67bf9372a6820c068c16b731c4b0b5f_1gab67bf9372a6820c068c16b731c4b0b5f" kindref="member">MODULE_ID_LIST_SECTION_PREFIX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="30" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_ga53842783c01a9929f72555ed1035f337_1ga53842783c01a9929f72555ed1035f337" prot="public" static="no">
        <name>MODULE_ID_PTR_VAR_EXTERN_DEC</name>
        <param><defname>mname</defname></param>
        <initializer>	extern const void * const <ref refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" kindref="member">MODULE_ID_PTR_VAR</ref>(mname)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="31" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_ga245e68ba25ad6f4e675ebc59226c2ed5_1ga245e68ba25ad6f4e675ebc59226c2ed5" prot="public" static="no">
        <name>MODULE_IDX</name>
        <param><defname>mname</defname></param>
        <initializer>		({                                        \
		<ref refid="group__caf__module__state__event_ga53842783c01a9929f72555ed1035f337_1ga53842783c01a9929f72555ed1035f337" kindref="member">MODULE_ID_PTR_VAR_EXTERN_DEC</ref>(mname);                \
		&amp;<ref refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" kindref="member">MODULE_ID_PTR_VAR</ref>(mname) - &amp;<ref refid="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" kindref="member">MODULE_ID_LIST_START</ref>;  \
	})</initializer>
        <briefdescription>
<para>Get index of module. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, the <ref refid="group__caf__module__state__event_ga245e68ba25ad6f4e675ebc59226c2ed5_1ga245e68ba25ad6f4e675ebc59226c2ed5" kindref="member">MODULE_IDX(buttons)</ref> can be used to get module index of module named buttons.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mname</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the module. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="71" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_ga41dcbdc9825119792bee0adb1604ed19_1ga41dcbdc9825119792bee0adb1604ed19" prot="public" static="no">
        <name>MODULE_ID</name>
        <param><defname>mname</defname></param>
        <initializer>			({                                  \
			<ref refid="group__caf__module__state__event_ga53842783c01a9929f72555ed1035f337_1ga53842783c01a9929f72555ed1035f337" kindref="member">MODULE_ID_PTR_VAR_EXTERN_DEC</ref>(mname); \
			<ref refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" kindref="member">MODULE_ID_PTR_VAR</ref>(mname);            \
		})</initializer>
        <briefdescription>
<para>Get module ID. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, the <ref refid="group__caf__module__state__event_ga41dcbdc9825119792bee0adb1604ed19_1ga41dcbdc9825119792bee0adb1604ed19" kindref="member">MODULE_ID(buttons)</ref> can be used to get module ID of module named buttons.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mname</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of the module. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="250" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__caf__module__state__event_ga14ded244c47bbba850a8a4be6d16c7e3_1ga14ded244c47bbba850a8a4be6d16c7e3" prot="public" static="no">
        <name>MODULE_NAME</name>
        <initializer>STRINGIFY(MODULE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="271" column="9" bodyfile="include/caf/events/module_state_event.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" prot="public" static="no" strong="no">
        <type></type>
        <name>module_state</name>
        <enumvalue id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90add04efffd8c5ccc4239fe56063edb068" prot="public">
          <name>MODULE_STATE_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module is active. This state is reported when the module is initialized or woken up after suspending. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90a78bb39cfd1f00e49daf67deac08b5249" prot="public">
          <name>MODULE_STATE_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module is suspended in reaction to <ref refid="structpower__down__event" kindref="compound">power_down_event</ref>. The module cannot submit <ref refid="structwake__up__event" kindref="compound">wake_up_event</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab2a33747987d341a01bc84d4b24ce51b" prot="public">
          <name>MODULE_STATE_STANDBY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module is suspended in reaction to <ref refid="structpower__down__event" kindref="compound">power_down_event</ref>. The module can submit <ref refid="structwake__up__event" kindref="compound">wake_up_event</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90af21c1f9f54d1a8d4a17fd2ebb49b6183" prot="public">
          <name>MODULE_STATE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module reported fatal error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab81ba308aa290191a055111e009382f1" prot="public">
          <name>MODULE_STATE_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Number of module states. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Module states. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="165" column="1" bodyfile="include/caf/events/module_state_event.h" bodystart="165" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__caf__module__state__event_ga32b8e30b4c975b605d211d8ce890f654_1ga32b8e30b4c975b605d211d8ce890f654" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t module_count</definition>
        <argsstring>(void)</argsstring>
        <name>module_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of modules. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of modules. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="43" column="22" bodyfile="include/caf/events/module_state_event.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_ga7f6b26834cd6ad82ed7e495deb8230c4_1ga7f6b26834cd6ad82ed7e495deb8230c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>static const void * module_id_get</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>module_id_get</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get ID of module with given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Module ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="55" column="26" bodyfile="include/caf/events/module_state_event.h" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_ga7f6c12c14b206ba3a64c8b55df4c8039_1ga7f6c12c14b206ba3a64c8b55df4c8039" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool module_check_id_valid</definition>
        <argsstring>(size_t module_idx)</argsstring>
        <name>module_check_id_valid</name>
        <param>
          <type>size_t</type>
          <declname>module_idx</declname>
        </param>
        <briefdescription>
<para>Check if given module index is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Index is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Index is out of valid range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="91" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_ga3f7672e0b5d6085118c98803b52997fb_1ga3f7672e0b5d6085118c98803b52997fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool module_flags_check_zero</definition>
        <argsstring>(const struct module_flags *mf)</argsstring>
        <name>module_flags_check_zero</name>
        <param>
          <type>const struct <ref refid="structmodule__flags" kindref="compound">module_flags</ref> *</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Check if there is 0 in all the flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to module flags variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>All the flags have value of 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Any of the flags is not 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="104" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="104" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_gae974e4875d9ae03e6bae14f4e586236c_1gae974e4875d9ae03e6bae14f4e586236c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool module_flags_test_bit</definition>
        <argsstring>(const struct module_flags *mf, size_t module_idx)</argsstring>
        <name>module_flags_test_bit</name>
        <param>
          <type>const struct <ref refid="structmodule__flags" kindref="compound">module_flags</ref> *</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>module_idx</declname>
        </param>
        <briefdescription>
<para>Test single module bit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to module flags variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the selected module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The module bit in flags is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The module bit in flags is cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="125" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_gaa992d6526211f173595825ee8ce4f246_1gaa992d6526211f173595825ee8ce4f246" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void module_flags_clear_bit</definition>
        <argsstring>(struct module_flags *mf, size_t module_idx)</argsstring>
        <name>module_flags_clear_bit</name>
        <param>
          <type>struct <ref refid="structmodule__flags" kindref="compound">module_flags</ref> *</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>module_idx</declname>
        </param>
        <briefdescription>
<para>Clear single module bit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to module flags variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the selected module. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="136" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_ga5d301ee178db9869f013e31136d46910_1ga5d301ee178db9869f013e31136d46910" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void module_flags_set_bit</definition>
        <argsstring>(struct module_flags *mf, size_t module_idx)</argsstring>
        <name>module_flags_set_bit</name>
        <param>
          <type>struct <ref refid="structmodule__flags" kindref="compound">module_flags</ref> *</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>module_idx</declname>
        </param>
        <briefdescription>
<para>Set single module bit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to module flags variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the selected module. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="147" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_ga171adf2bdcb325175aff6e87bdb99b86_1ga171adf2bdcb325175aff6e87bdb99b86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void module_flags_set_bit_to</definition>
        <argsstring>(struct module_flags *mf, size_t module_idx, bool val)</argsstring>
        <name>module_flags_set_bit_to</name>
        <param>
          <type>struct <ref refid="structmodule__flags" kindref="compound">module_flags</ref> *</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>module_idx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set single module bit to specified value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to module flags variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the selected module. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be set in a specified module&apos;s bit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="159" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_gad1a80ac5733dc3538a4e4511b1081803_1gad1a80ac5733dc3538a4e4511b1081803" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool check_state</definition>
        <argsstring>(const struct module_state_event *event, const void *module_id, enum module_state state)</argsstring>
        <name>check_state</name>
        <param>
          <type>const struct <ref refid="structmodule__state__event" kindref="compound">module_state_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>module_id</declname>
        </param>
        <param>
          <type>enum <ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Check if the selected module reported the selected state. </para>
        </briefdescription>
        <detaileddescription>
<para>The function can be used in event handler to verify if received module state event informs that selected module reported selected state. The <ref refid="group__caf__module__state__event_ga41dcbdc9825119792bee0adb1604ed19_1ga41dcbdc9825119792bee0adb1604ed19" kindref="member">MODULE_ID</ref> can be used to get module ID of module with selected name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Poitner to handled module state event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the selected module. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected module state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The module state event informs that selected module reported selected state. Otherwise, false is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="232" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__caf__module__state__event_gadfd325057870175b5df3bd26759175e4_1gadfd325057870175b5df3bd26759175e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void module_set_state</definition>
        <argsstring>(enum module_state state)</argsstring>
        <name>module_set_state</name>
        <param>
          <type>enum <ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Submit module state event to inform that state of the module changed. </para>
        </briefdescription>
        <detaileddescription>
<para>ID of the module is automatically assigned based on name that is defined as MODULE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>New state of the module. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/module_state_event.h" line="285" column="20" bodyfile="include/caf/events/module_state_event.h" bodystart="285" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MODULE_STATE_EVENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_MODULE_STATE_EVENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/atomic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="event__manager_8h" kindref="compound">event_manager.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="event__manager__profiler_8h" kindref="compound">event_manager_profiler.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="group__caf__module__state__event_gab67bf9372a6820c068c16b731c4b0b5f_1gab67bf9372a6820c068c16b731c4b0b5f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_LIST_SECTION_PREFIX<sp/>module_id_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_PTR_VAR(mname)<sp/>_CONCAT(__module_,<sp/>mname)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="group__caf__module__state__event_gaf5bf39cdacd24165674f6b3261c86184_1gaf5bf39cdacd24165674f6b3261c86184" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_LIST_SECTION_NAME<sp/><sp/><sp/>STRINGIFY(MODULE_ID_LIST_SECTION_PREFIX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_LIST_START<sp/>_CONCAT(__start_,<sp/>MODULE_ID_LIST_SECTION_PREFIX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="group__caf__module__state__event_gaa65e11879283d401925a9e7002ffcdf1_1gaa65e11879283d401925a9e7002ffcdf1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_LIST_STOP<sp/><sp/>_CONCAT(__stop_,<sp/><sp/>MODULE_ID_LIST_SECTION_PREFIX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__caf__module__state__event_ga53842783c01a9929f72555ed1035f337_1ga53842783c01a9929f72555ed1035f337" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID_PTR_VAR_EXTERN_DEC(mname)<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>void<sp/>*<sp/>const<sp/>MODULE_ID_PTR_VAR(mname)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" kindref="member">MODULE_ID_LIST_START</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gaa65e11879283d401925a9e7002ffcdf1_1gaa65e11879283d401925a9e7002ffcdf1" kindref="member">MODULE_ID_LIST_STOP</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__caf__module__state__event_ga32b8e30b4c975b605d211d8ce890f654_1ga32b8e30b4c975b605d211d8ce890f654" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga32b8e30b4c975b605d211d8ce890f654_1ga32b8e30b4c975b605d211d8ce890f654" kindref="member">module_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;<ref refid="group__caf__module__state__event_gaa65e11879283d401925a9e7002ffcdf1_1gaa65e11879283d401925a9e7002ffcdf1" kindref="member">MODULE_ID_LIST_STOP</ref><sp/>-<sp/>&amp;<ref refid="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" kindref="member">MODULE_ID_LIST_START</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__caf__module__state__event_ga7f6b26834cd6ad82ed7e495deb8230c4_1ga7f6b26834cd6ad82ed7e495deb8230c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__caf__module__state__event_ga7f6b26834cd6ad82ed7e495deb8230c4_1ga7f6b26834cd6ad82ed7e495deb8230c4" kindref="member">module_id_get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/><ref refid="group__caf__module__state__event_ga32b8e30b4c975b605d211d8ce890f654_1ga32b8e30b4c975b605d211d8ce890f654" kindref="member">module_count</ref>())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((&amp;<ref refid="group__caf__module__state__event_gaabee10159a72a9a6dcc5d68f4c2677b0_1gaabee10159a72a9a6dcc5d68f4c2677b0" kindref="member">MODULE_ID_LIST_START</ref>)<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__caf__module__state__event_ga245e68ba25ad6f4e675ebc59226c2ed5_1ga245e68ba25ad6f4e675ebc59226c2ed5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_IDX(mname)<sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MODULE_ID_PTR_VAR_EXTERN_DEC(mname);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;MODULE_ID_PTR_VAR(mname)<sp/>-<sp/>&amp;MODULE_ID_LIST_START;<sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structmodule__flags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>{</highlight></codeline>
<codeline lineno="80" refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATOMIC_DEFINE(<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>,<sp/>CONFIG_CAF_MODULES_FLAGS_COUNT);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__caf__module__state__event_ga7f6c12c14b206ba3a64c8b55df4c8039_1ga7f6c12c14b206ba3a64c8b55df4c8039" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga7f6c12c14b206ba3a64c8b55df4c8039_1ga7f6c12c14b206ba3a64c8b55df4c8039" kindref="member">module_check_id_valid</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>module_idx)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(module_idx<sp/>&lt;<sp/><ref refid="group__caf__module__state__event_ga32b8e30b4c975b605d211d8ce890f654_1ga32b8e30b4c975b605d211d8ce890f654" kindref="member">module_count</ref>());</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="group__caf__module__state__event_ga3f7672e0b5d6085118c98803b52997fb_1ga3f7672e0b5d6085118c98803b52997fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga3f7672e0b5d6085118c98803b52997fb_1ga3f7672e0b5d6085118c98803b52997fb" kindref="member">module_flags_check_zero</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>*mf)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>atomic_t<sp/>*target<sp/>=<sp/>mf-&gt;<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>ATOMIC_BITMAP_SIZE(CONFIG_CAF_MODULES_FLAGS_COUNT);<sp/>n<sp/>&gt;<sp/>0;<sp/>--n)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atomic_get(target++)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="group__caf__module__state__event_gae974e4875d9ae03e6bae14f4e586236c_1gae974e4875d9ae03e6bae14f4e586236c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gae974e4875d9ae03e6bae14f4e586236c_1gae974e4875d9ae03e6bae14f4e586236c" kindref="member">module_flags_test_bit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>*mf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>module_idx)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_test_bit(mf-&gt;<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>,<sp/>module_idx);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__caf__module__state__event_gaa992d6526211f173595825ee8ce4f246_1gaa992d6526211f173595825ee8ce4f246" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gaa992d6526211f173595825ee8ce4f246_1gaa992d6526211f173595825ee8ce4f246" kindref="member">module_flags_clear_bit</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>*mf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>module_idx)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_clear_bit(mf-&gt;<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>,<sp/>module_idx);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="group__caf__module__state__event_ga5d301ee178db9869f013e31136d46910_1ga5d301ee178db9869f013e31136d46910" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga5d301ee178db9869f013e31136d46910_1ga5d301ee178db9869f013e31136d46910" kindref="member">module_flags_set_bit</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>*mf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>module_idx)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_set_bit(mf-&gt;<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>,<sp/>module_idx);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="group__caf__module__state__event_ga171adf2bdcb325175aff6e87bdb99b86_1ga171adf2bdcb325175aff6e87bdb99b86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga171adf2bdcb325175aff6e87bdb99b86_1ga171adf2bdcb325175aff6e87bdb99b86" kindref="member">module_flags_set_bit_to</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__flags" kindref="compound">module_flags</ref><sp/>*mf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>module_idx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_set_bit_to(mf-&gt;<ref refid="structmodule__flags_a1c0d122f56f7348c3cb366f849b13b24_1a1c0d122f56f7348c3cb366f849b13b24" kindref="member">f</ref>,<sp/>module_idx,<sp/>val);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref><sp/>{</highlight></codeline>
<codeline lineno="169" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90add04efffd8c5ccc4239fe56063edb068" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90add04efffd8c5ccc4239fe56063edb068" kindref="member">MODULE_STATE_READY</ref>,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90a78bb39cfd1f00e49daf67deac08b5249" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90a78bb39cfd1f00e49daf67deac08b5249" kindref="member">MODULE_STATE_OFF</ref>,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab2a33747987d341a01bc84d4b24ce51b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab2a33747987d341a01bc84d4b24ce51b" kindref="member">MODULE_STATE_STANDBY</ref>,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90af21c1f9f54d1a8d4a17fd2ebb49b6183" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90af21c1f9f54d1a8d4a17fd2ebb49b6183" kindref="member">MODULE_STATE_ERROR</ref>,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab81ba308aa290191a055111e009382f1" kindref="member">MODULE_STATE_COUNT</ref></highlight></codeline>
<codeline lineno="186" refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab81ba308aa290191a055111e009382f1" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structmodule__state__event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodule__state__event" kindref="compound">module_state_event</ref><sp/>{</highlight></codeline>
<codeline lineno="207" refid="structmodule__state__event_a26d38951b8d6b92acc9c32da0a58e7c9_1a26d38951b8d6b92acc9c32da0a58e7c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevent__header" kindref="compound">event_header</ref><sp/><ref refid="structmodule__state__event_a26d38951b8d6b92acc9c32da0a58e7c9_1a26d38951b8d6b92acc9c32da0a58e7c9" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="structmodule__state__event_a9f9b001f57e28f02ce119cecb3cd1d8d_1a9f9b001f57e28f02ce119cecb3cd1d8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmodule__state__event_a9f9b001f57e28f02ce119cecb3cd1d8d_1a9f9b001f57e28f02ce119cecb3cd1d8d" kindref="member">module_id</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="structmodule__state__event_ad160c7caa7b02392522786204faa70bd_1ad160c7caa7b02392522786204faa70bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref><sp/><ref refid="structmodule__state__event_ad160c7caa7b02392522786204faa70bd_1ad160c7caa7b02392522786204faa70bd" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="group__event__manager_gade0652b21cddf1a6b4d58e668b402caa_1gade0652b21cddf1a6b4d58e668b402caa" kindref="member">EVENT_TYPE_DECLARE</ref>(<ref refid="structmodule__state__event" kindref="compound">module_state_event</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group__caf__module__state__event_gad1a80ac5733dc3538a4e4511b1081803_1gad1a80ac5733dc3538a4e4511b1081803" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gad1a80ac5733dc3538a4e4511b1081803_1gad1a80ac5733dc3538a4e4511b1081803" kindref="member">check_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodule__state__event" kindref="compound">module_state_event</ref><sp/>*event,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*module_id,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref><sp/>state)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((event-&gt;<ref refid="structmodule__state__event_a9f9b001f57e28f02ce119cecb3cd1d8d_1a9f9b001f57e28f02ce119cecb3cd1d8d" kindref="member">module_id</ref><sp/>==<sp/>module_id)<sp/>&amp;&amp;<sp/>(event-&gt;<ref refid="structmodule__state__event_ad160c7caa7b02392522786204faa70bd_1ad160c7caa7b02392522786204faa70bd" kindref="member">state</ref><sp/>==<sp/>state))<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="group__caf__module__state__event_ga41dcbdc9825119792bee0adb1604ed19_1ga41dcbdc9825119792bee0adb1604ed19" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_ID(mname)<sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MODULE_ID_PTR_VAR_EXTERN_DEC(mname);<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MODULE_ID_PTR_VAR(mname);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_MODULE_STATE_EVENT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declare<sp/>elements<sp/>required<sp/>in<sp/>the<sp/>module<sp/>C<sp/>file,</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>even<sp/>if<sp/>the<sp/>file<sp/>was<sp/>already<sp/>included<sp/>before.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MODULE)<sp/>&amp;&amp;<sp/>!defined(MODULE_NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__caf__module__state__event_ga14ded244c47bbba850a8a4be6d16c7e3_1ga14ded244c47bbba850a8a4be6d16c7e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE_NAME<sp/>STRINGIFY(MODULE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="group__caf__module__state__event_ga53842783c01a9929f72555ed1035f337_1ga53842783c01a9929f72555ed1035f337" kindref="member">MODULE_ID_PTR_VAR_EXTERN_DEC</ref>(MODULE);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" kindref="member">MODULE_ID_PTR_VAR</ref>(MODULE)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__used<sp/>__attribute__((__section__(<ref refid="group__caf__module__state__event_gaf5bf39cdacd24165674f6b3261c86184_1gaf5bf39cdacd24165674f6b3261c86184" kindref="member">MODULE_ID_LIST_SECTION_NAME</ref>)))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__caf__module__state__event_ga14ded244c47bbba850a8a4be6d16c7e3_1ga14ded244c47bbba850a8a4be6d16c7e3" kindref="member">MODULE_NAME</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__caf__module__state__event_gadfd325057870175b5df3bd26759175e4_1gadfd325057870175b5df3bd26759175e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_gadfd325057870175b5df3bd26759175e4_1gadfd325057870175b5df3bd26759175e4" kindref="member">module_set_state</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1ga17d626d50e9a9d43cc372a32d2bd8f90" kindref="member">module_state</ref><sp/>state)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT_NO_MSG(state<sp/>&lt;<sp/><ref refid="group__caf__module__state__event_ga17d626d50e9a9d43cc372a32d2bd8f90_1gga17d626d50e9a9d43cc372a32d2bd8f90ab81ba308aa290191a055111e009382f1" kindref="member">MODULE_STATE_COUNT</ref>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodule__state__event" kindref="compound">module_state_event</ref><sp/>*</highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>new_module_state_event();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;module_id<sp/>=<sp/><ref refid="group__caf__module__state__event_ga10fd3e6504aeeb04f0f206450a5e0291_1ga10fd3e6504aeeb04f0f206450a5e0291" kindref="member">MODULE_ID_PTR_VAR</ref>(MODULE);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;state<sp/>=<sp/><ref refid="structmodule__state__event_ad160c7caa7b02392522786204faa70bd_1ad160c7caa7b02392522786204faa70bd" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__event__manager_ga5fb4d859ba408c80abc899d18bb626e4_1ga5fb4d859ba408c80abc899d18bb626e4" kindref="member">EVENT_SUBMIT</ref>(event);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MODULE)<sp/>&amp;&amp;<sp/>!defined(MODULE_NAME)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/caf/events/module_state_event.h"/>
  </compounddef>
</doxygen>
