<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="latency__client_8h" kind="file" language="C++">
    <compoundname>latency_client.h</compoundname>
    <includes local="no">bluetooth/uuid.h</includes>
    <includes local="no">bluetooth/conn.h</includes>
    <includes refid="gatt__dm_8h" local="no">bluetooth/gatt_dm.h</includes>
    <incdepgraph>
      <node id="4">
        <label>bluetooth/gatt_dm.h</label>
        <link refid="gatt__dm_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/services/latency_client.h</label>
        <link refid="latency__client_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bluetooth/conn.h</label>
      </node>
      <node id="5">
        <label>bluetooth/gatt.h</label>
      </node>
      <node id="2">
        <label>bluetooth/uuid.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structbt__latency__client__cb" prot="public">bt_latency_client_cb</innerclass>
    <innerclass refid="structbt__latency__client" prot="public">bt_latency_client</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__latency__c_ga837640474be6e0d8f21359043775a4ca_1ga837640474be6e0d8f21359043775a4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_latency_client_init</definition>
        <argsstring>(struct bt_latency_client *latency, const struct bt_latency_client_cb *cb)</argsstring>
        <name>bt_latency_client_init</name>
        <param>
          <type>struct <ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref> *</type>
          <declname>latency</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__latency__client__cb" kindref="compound">bt_latency_client_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Initialize the GATT latency client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Latency client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callbacks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the operation was successful. Otherwise, a negative error code is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-EINVAL)</parametername>
</parameternamelist>
<parameterdescription>
<para>Special error code used when the input parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-EALREADY)</parametername>
</parameternamelist>
<parameterdescription>
<para>Special error code used when the latency client has been initialed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/latency_client.h" line="68" column="5" declfile="include/bluetooth/services/latency_client.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__latency__c_ga7b94e9d5bf039380f7aa3c361f57486a_1ga7b94e9d5bf039380f7aa3c361f57486a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_latency_handles_assign</definition>
        <argsstring>(struct bt_gatt_dm *dm, struct bt_latency_client *latency)</argsstring>
        <name>bt_latency_handles_assign</name>
        <param>
          <type>struct bt_gatt_dm *</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref> *</type>
          <declname>latency</declname>
        </param>
        <briefdescription>
<para>Assign handles to the latency client instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called when a link with a peer has been established, to associate the link to this instance of the module. This makes it possible to handle several links and associate each link to a particular instance of this module. The GATT attribute handles are provided by the GATT Discovery Manager.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dm</parametername>
</parameternamelist>
<parameterdescription>
<para>Discovery object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Latency client instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the operation was successful. Otherwise, a negative error code is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-ENOTSUP)</parametername>
</parameternamelist>
<parameterdescription>
<para>Special error code used when the UUID of the service does not match the expected UUID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-EINVAL)</parametername>
</parameternamelist>
<parameterdescription>
<para>Special error code used when the UUID characteristic or value descriptor not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/latency_client.h" line="89" column="5" declfile="include/bluetooth/services/latency_client.h" declline="89" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__latency__c_gadccc144fbc5a5162187f91420b8e07b8_1gadccc144fbc5a5162187f91420b8e07b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_latency_request</definition>
        <argsstring>(struct bt_latency_client *latency, const void *data, uint16_t len)</argsstring>
        <name>bt_latency_request</name>
        <param>
          <type>struct <ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref> *</type>
          <declname>latency</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write data to the server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Latency client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the operation was successful. Otherwise, a negative error code is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-EALREADY)</parametername>
</parameternamelist>
<parameterdescription>
<para>Special error code used when the asynchronous request is waiting for a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/latency_client.h" line="103" column="5" declfile="include/bluetooth/services/latency_client.h" declline="103" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BT_LATENCY_CLIENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_LATENCY_CLIENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bluetooth/uuid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bluetooth/conn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gatt__dm_8h" kindref="compound">bluetooth/gatt_dm.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structbt__latency__client__cb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__latency__client__cb" kindref="compound">bt_latency_client_cb</ref><sp/>{</highlight></codeline>
<codeline lineno="38" refid="structbt__latency__client__cb_ae3a558c71d0f2848f8acf624bee25b14_1ae3a558c71d0f2848f8acf624bee25b14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__latency__client__cb_ae3a558c71d0f2848f8acf624bee25b14_1ae3a558c71d0f2848f8acf624bee25b14" kindref="member">latency_response</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint16_t<sp/>len);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structbt__latency__client" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structbt__latency__client_a99f8d806d86325783fdbaee1c9210a37_1a99f8d806d86325783fdbaee1c9210a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structbt__latency__client_a99f8d806d86325783fdbaee1c9210a37_1a99f8d806d86325783fdbaee1c9210a37" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structbt__latency__client_a7a185e277b31f9b1c707f2ba15b3e703_1a7a185e277b31f9b1c707f2ba15b3e703" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_gatt_write_params<sp/><ref refid="structbt__latency__client_a7a185e277b31f9b1c707f2ba15b3e703_1a7a185e277b31f9b1c707f2ba15b3e703" kindref="member">latency_params</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structbt__latency__client_abb2a0ce5cfabc33cc54cf98273639f94_1abb2a0ce5cfabc33cc54cf98273639f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*<ref refid="structbt__latency__client_abb2a0ce5cfabc33cc54cf98273639f94_1abb2a0ce5cfabc33cc54cf98273639f94" kindref="member">conn</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structbt__latency__client_a11db0b04c48e46af2ebe542af8c91430_1a11db0b04c48e46af2ebe542af8c91430" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_t<sp/><ref refid="structbt__latency__client_a11db0b04c48e46af2ebe542af8c91430_1a11db0b04c48e46af2ebe542af8c91430" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__bt__latency__c_ga837640474be6e0d8f21359043775a4ca_1ga837640474be6e0d8f21359043775a4ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__latency__c_ga837640474be6e0d8f21359043775a4ca_1ga837640474be6e0d8f21359043775a4ca" kindref="member">bt_latency_client_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref><sp/>*latency,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__latency__client__cb" kindref="compound">bt_latency_client_cb</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__bt__latency__c_ga7b94e9d5bf039380f7aa3c361f57486a_1ga7b94e9d5bf039380f7aa3c361f57486a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__latency__c_ga7b94e9d5bf039380f7aa3c361f57486a_1ga7b94e9d5bf039380f7aa3c361f57486a" kindref="member">bt_latency_handles_assign</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_gatt_dm<sp/>*dm,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref><sp/>*latency);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__bt__latency__c_gadccc144fbc5a5162187f91420b8e07b8_1gadccc144fbc5a5162187f91420b8e07b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__latency__c_gadccc144fbc5a5162187f91420b8e07b8_1gadccc144fbc5a5162187f91420b8e07b8" kindref="member">bt_latency_request</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__latency__client" kindref="compound">bt_latency_client</ref><sp/>*latency,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>uint16_t<sp/>len);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BT_LATENCY_CLIENT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/services/latency_client.h"/>
  </compounddef>
</doxygen>
