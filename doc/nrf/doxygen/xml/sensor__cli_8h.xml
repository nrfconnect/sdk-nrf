<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="sensor__cli_8h" kind="file" language="C++">
    <compoundname>sensor_cli.h</compoundname>
    <includes refid="sensor_8h" local="no">bluetooth/mesh/sensor.h</includes>
    <includes refid="model__types_8h" local="no">bluetooth/mesh/model_types.h</includes>
    <includedby refid="models_8h" local="no">include/bluetooth/mesh/models.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>bluetooth/mesh/model_types.h</label>
        <link refid="model__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bluetooth/mesh/sensor.h</label>
        <link refid="sensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/mesh/sensor_cli.h</label>
        <link refid="sensor__cli_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bluetooth/mesh.h</label>
      </node>
      <node id="5">
        <label>drivers/sensor.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/bluetooth/mesh/models.h</label>
        <link refid="models_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/mesh/sensor_cli.h</label>
        <link refid="sensor__cli_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/mesh/vnd/silvair_enocean_srv.h</label>
        <link refid="silvair__enocean__srv_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__mesh__sensor__cli" prot="public">bt_mesh_sensor_cli</innerclass>
    <innerclass refid="structbt__mesh__sensor__cadence__status" prot="public">bt_mesh_sensor_cadence_status</innerclass>
    <innerclass refid="structbt__mesh__sensor__setting__status" prot="public">bt_mesh_sensor_setting_status</innerclass>
    <innerclass refid="structbt__mesh__sensor__series__entry" prot="public">bt_mesh_sensor_series_entry</innerclass>
    <innerclass refid="structbt__mesh__sensor__info" prot="public">bt_mesh_sensor_info</innerclass>
    <innerclass refid="structbt__mesh__sensor__data" prot="public">bt_mesh_sensor_data</innerclass>
    <innerclass refid="structbt__mesh__sensor__cli__handlers" prot="public">bt_mesh_sensor_cli_handlers</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh__sensor__cli_ga0dae592ad4da538566de3c4540a76ea4_1ga0dae592ad4da538566de3c4540a76ea4" prot="public" static="no">
        <name>BT_MESH_SENSOR_CLI_INIT</name>
        <param><defname>_handlers</defname></param>
        <initializer>	{                                                                      \
		.cb = _handlers,                                               \
	}</initializer>
        <briefdescription>
<para>Initialization parameters for <ref refid="group__bt__mesh__sensor__cli" kindref="compound">Sensor Client model</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structbt__mesh__sensor__cli__handlers" kindref="compound">bt_mesh_sensor_cli_handlers</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_handlers</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message handler structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="33" column="9" bodyfile="include/bluetooth/mesh/sensor_cli.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__sensor__cli_gaf715d42e47480fe23897c9f7630cafba_1gaf715d42e47480fe23897c9f7630cafba" prot="public" static="no">
        <name>BT_MESH_MODEL_SENSOR_CLI</name>
        <param><defname>_cli</defname></param>
        <initializer>	BT_MESH_MODEL_CB(BT_MESH_MODEL_ID_SENSOR_CLI, _bt_mesh_sensor_cli_op,  \
			 &amp;(_cli)-&gt;pub,                                         \
			 BT_MESH_MODEL_USER_DATA(struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref>,    \
						 _cli),                        \
			 &amp;_bt_mesh_sensor_cli_cb)</initializer>
        <briefdescription>
<para>Sensor Client model composition data entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="group__bt__mesh__sensor__cli" kindref="compound">Sensor Client model</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="44" column="9" bodyfile="include/bluetooth/mesh/sensor_cli.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga8e1ac94a6dc9e8b97ba5fb0c7a309141_1ga8e1ac94a6dc9e8b97ba5fb0c7a309141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_desc_all_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, struct bt_mesh_sensor_info *sensors, uint32_t *count)</argsstring>
        <name>bt_mesh_sensor_cli_desc_all_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__info" kindref="compound">bt_mesh_sensor_info</ref> *</type>
          <declname>sensors</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Retrieve all sensor descriptors in a sensor server. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>sensors</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">bt_mesh_sensor_cli_handlers::sensor</ref> callback as a list of sensor descriptors.</para>
<para>If a <computeroutput>sensors</computeroutput> array is provided and the client received a response, the array will be filled with as many of the response sensors as it can fit, even if the buffer isn&apos;t big enough. If the call fails in a way that results in no response, <computeroutput>count</computeroutput> is set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sensors</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of sensors to fill with the response, or NULL to keep from blocking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the <computeroutput>sensors</computeroutput> array. Will be changed to reflect the resulting number of sensors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the full list of sensors. The <computeroutput>sensors</computeroutput> array and <computeroutput>count</computeroutput> has been changed to reflect the response contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-E2BIG</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of sensors in the response was too big to fit in the <computeroutput>sensors</computeroutput> array. The <computeroutput>sensors</computeroutput> array has been filled up to the original <computeroutput>count</computeroutput>, and <computeroutput>count</computeroutput> has been changed to the number of sensors in the response. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="295" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="295" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga939275d0189af0a6e00c4f6a754582e1_1ga939275d0189af0a6e00c4f6a754582e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_desc_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, struct bt_mesh_sensor_descriptor *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_desc_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__descriptor" kindref="compound">bt_mesh_sensor_descriptor</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Get the descriptor for the given sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">bt_mesh_sensor_cli_handlers::sensor</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor descriptor response buffer, or NULL to keep from blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the descriptor. The <computeroutput>rsp</computeroutput> buffer has been filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="322" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga2a6f449dbe1205f2d748f0a940e0149e_1ga2a6f449dbe1205f2d748f0a940e0149e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_cadence_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, struct bt_mesh_sensor_cadence_status *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_cadence_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Get the cadence state. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a86f03299427d7e4ac054ca114ef7257a_1a86f03299427d7e4ac054ca114ef7257a" kindref="member">bt_mesh_sensor_cli_handlers::cadence</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor to get the cadence of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor cadence response buffer, or NULL to keep from blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the cadence. The <computeroutput>rsp</computeroutput> buffer has been filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t support cadence settings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="349" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="349" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga0efe93f4da2462773e5328cdfb3a2abd_1ga0efe93f4da2462773e5328cdfb3a2abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_cadence_set</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_cadence_status *cadence, struct bt_mesh_sensor_cadence_status *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_cadence_set</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref> *</type>
          <declname>cadence</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Set the cadence state for the given sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a86f03299427d7e4ac054ca114ef7257a_1a86f03299427d7e4ac054ca114ef7257a" kindref="member">bt_mesh_sensor_cli_handlers::cadence</ref> callback.</para>
<para><simplesect kind="note"><para>Only single-channel sensors support cadence.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cadence</parametername>
</parameternamelist>
<parameterdescription>
<para>New sensor cadence for the sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor cadence response buffer, or NULL to keep from blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the cadence. The <computeroutput>rsp</computeroutput> buffer has been filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t support cadence settings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="379" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="379" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_gac32184b3d1d819dc97166ca663dd940d_1gac32184b3d1d819dc97166ca663dd940d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_cadence_set_unack</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_cadence_status *cadence)</argsstring>
        <name>bt_mesh_sensor_cli_cadence_set_unack</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref> *</type>
          <declname>cadence</declname>
        </param>
        <briefdescription>
<para>Set the cadence state for the given sensor without requesting a response. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only single-channel sensors support cadence.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cadence</parametername>
</parameternamelist>
<parameterdescription>
<para>New sensor cadence for the sensor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the cadence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="401" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="401" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga29cc60fc836d01369ecf788a4ad5b0f8_1ga29cc60fc836d01369ecf788a4ad5b0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_settings_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, uint16_t *ids, uint32_t *count)</argsstring>
        <name>bt_mesh_sensor_cli_settings_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get the list of settings for the given sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>ids</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a92da6ea4d18b088549796c7484e343a4_1a92da6ea4d18b088549796c7484e343a4" kindref="member">bt_mesh_sensor_cli_handlers::settings</ref> callback.</para>
<para>If an <computeroutput>ids</computeroutput> array is provided and the client received a response, the array will be filled with as many of the response ids as it can fit, even if the buffer isn&apos;t big enough. If the call fails in a way that results in no response, <computeroutput>count</computeroutput> is set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of sensor setting IDs to fill with the response, or NULL to keep from blocking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the <computeroutput>ids</computeroutput> array. Will be changed to reflect the resulting number of IDs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the full list of sensor setting IDs. The <computeroutput>ids</computeroutput> array and <computeroutput>count</computeroutput> has been changed to reflect the response contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-E2BIG</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of IDs in the response was too big to fit in the <computeroutput>ids</computeroutput> array. The <computeroutput>ids</computeroutput> array has been filled up to the original <computeroutput>count</computeroutput>, and <computeroutput>count</computeroutput> has been changed to the number of IDs in the response. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="440" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="440" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga139e6168d9de6078b57d1f2b0a8ad570_1ga139e6168d9de6078b57d1f2b0a8ad570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_setting_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_type *setting, struct bt_mesh_sensor_setting_status *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_setting_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>setting</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Get a setting value for a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_ab796b7f3ad7a0c051ae16457039e0c94_1ab796b7f3ad7a0c051ae16457039e0c94" kindref="member">bt_mesh_sensor_cli_handlers::setting_status</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">setting</parametername>
</parameternamelist>
<parameterdescription>
<para>Setting to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor setting value response buffer, or NULL to keep from blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the setting value. The <computeroutput>rsp</computeroutput> buffer has been filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t have the given setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="468" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="468" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga0ed746e75c0038fa6cf6f86e54c2cc5e_1ga0ed746e75c0038fa6cf6f86e54c2cc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_setting_set</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_type *setting, const struct sensor_value *value, struct bt_mesh_sensor_setting_status *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_setting_set</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>setting</declname>
        </param>
        <param>
          <type>const struct sensor_value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Set a setting value for a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_ab796b7f3ad7a0c051ae16457039e0c94_1ab796b7f3ad7a0c051ae16457039e0c94" kindref="member">bt_mesh_sensor_cli_handlers::setting_status</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">setting</parametername>
</parameternamelist>
<parameterdescription>
<para>Setting to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>New setting value. Must contain values for all channels described by <computeroutput>setting</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor setting value response buffer, or NULL to keep from blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully changed the setting. The <computeroutput>rsp</computeroutput> buffer has been filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t have the given setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>The setting can&apos;t be written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>A blocking request is already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="500" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="500" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_gac6e4a1c0210b765a44fab88414f3ccc3_1gac6e4a1c0210b765a44fab88414f3ccc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_setting_set_unack</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_type *setting, const struct sensor_value *value)</argsstring>
        <name>bt_mesh_sensor_cli_setting_set_unack</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>setting</declname>
        </param>
        <param>
          <type>const struct sensor_value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a setting value for a sensor without requesting a response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">setting</parametername>
</parameternamelist>
<parameterdescription>
<para>Setting to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>New setting value. Must contain values for all channels described by <computeroutput>setting</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully changed the setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="522" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="522" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_gaa0f440dca1aa31c01323d692eeea4e29_1gaa0f440dca1aa31c01323d692eeea4e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_all_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, struct bt_mesh_sensor_data *sensors, uint32_t *count)</argsstring>
        <name>bt_mesh_sensor_cli_all_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__data" kindref="compound">bt_mesh_sensor_data</ref> *</type>
          <declname>sensors</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Read sensor data from all sensors on a server. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>sensors</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a88febee8085ee8e84fc757b2bd0f5fe1_1a88febee8085ee8e84fc757b2bd0f5fe1" kindref="member">bt_mesh_sensor_cli_handlers::data</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sensors</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of the sensors data to fill with the response, or NULL to keep from blocking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the <computeroutput>sensors</computeroutput> array. Will be changed to reflect the resulting number of elements in a list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the sensor data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="550" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="550" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_gabd71ee58fea78e865d79a634776bf89e_1gabd71ee58fea78e865d79a634776bf89e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, struct sensor_value *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>struct sensor_value *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Read sensor data from a sensor instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a88febee8085ee8e84fc757b2bd0f5fe1_1a88febee8085ee8e84fc757b2bd0f5fe1" kindref="member">bt_mesh_sensor_cli_handlers::data</ref> callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Response value buffer, or NULL to keep from blocking. Must be able to fit all channels described by the sensor type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the sensor data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="576" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="576" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_ga7e4fe3e5fae30a09aab00c7424db5b0a_1ga7e4fe3e5fae30a09aab00c7424db5b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_series_entry_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_column *column, struct bt_mesh_sensor_series_entry *rsp)</argsstring>
        <name>bt_mesh_sensor_cli_series_entry_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__column" kindref="compound">bt_mesh_sensor_column</ref> *</type>
          <declname>column</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref> *</type>
          <declname>rsp</declname>
        </param>
        <briefdescription>
<para>Read a single sensor series data entry. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a72602f372fc9569176dd9d38fa1e7fef_1a72602f372fc9569176dd9d38fa1e7fef" kindref="member">bt_mesh_sensor_cli_handlers::series_entry</ref> callback as a list of sensor descriptors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column to read. The start value must match the start value of a series column on the sensor. The end value is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Response value buffer, or NULL to keep from blocking. Must be able to fit all channels described by the sensor type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the sensor data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t have the given column. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="607" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="607" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__sensor__cli_gaf567ff00b05362c5656e9f7c33fb4ccc_1gaf567ff00b05362c5656e9f7c33fb4ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_sensor_cli_series_entries_get</definition>
        <argsstring>(struct bt_mesh_sensor_cli *cli, struct bt_mesh_msg_ctx *ctx, const struct bt_mesh_sensor_type *sensor, const struct bt_mesh_sensor_column *range, struct bt_mesh_sensor_series_entry *rsp, uint32_t *count)</argsstring>
        <name>bt_mesh_sensor_cli_series_entries_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref> *</type>
          <declname>cli</declname>
        </param>
        <param>
          <type>struct bt_mesh_msg_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__sensor__column" kindref="compound">bt_mesh_sensor_column</ref> *</type>
          <declname>range</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get multiple sensor series data entries. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves all data series columns starting within the given range (inclusive), or all data series entries if <computeroutput>range</computeroutput> is NULL. For instance, requesting range [1, 5] from a sensor with columns [0, 2], [1, 4], [4, 5] and [5, 8] will return all columns except [0, 2].</para>
<para>If a <computeroutput>rsp</computeroutput> array is provided and the client received a response, the array will be filled with as many of the response columns as it can fit, even if the buffer isn&apos;t big enough. If the call fails in a way that results in no response, <computeroutput>count</computeroutput> is set to 0.</para>
<para>This call is blocking if the <computeroutput>rsp</computeroutput> buffer is non-NULL. Otherwise, this function will return, and the response will be passed to the <ref refid="structbt__mesh__sensor__cli__handlers_a72602f372fc9569176dd9d38fa1e7fef_1a72602f372fc9569176dd9d38fa1e7fef" kindref="member">bt_mesh_sensor_cli_handlers::series_entry</ref> callback as a list of sensor descriptors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cli</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor client instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Message context parameters, or NULL to use the configured publish parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Sensor instance present on the targeted sensor server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of columns to get, or NULL to get all columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of entries to copy the response into, or NULL to keep from blocking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of entries in <computeroutput>rsp</computeroutput>. Is changed to reflect the number of entries in the response.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully received the full list of sensor series columns. The <computeroutput>rsp</computeroutput> array and <computeroutput>count</computeroutput> has been changed to reflect the response contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor server doesn&apos;t have the given sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-E2BIG</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of sensor columns in the response was too big to fit in the <computeroutput>rsp</computeroutput> array. The <computeroutput>rsp</computeroutput> array has been filled up to the original <computeroutput>count</computeroutput>, and <computeroutput>count</computeroutput> has been changed to the number of columns in the response. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor doesn&apos;t support series data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRNOTAVAIL</parametername>
</parameternamelist>
<parameterdescription>
<para>A message context was not provided and publishing is not configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The device has not been provisioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The request timed out without a response. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/sensor_cli.h" line="655" column="5" declfile="include/bluetooth/mesh/sensor_cli.h" declline="655" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BT_MESH_SENSOR_CLI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_SENSOR_CLI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sensor_8h" kindref="compound">bluetooth/mesh/sensor.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="model__types_8h" kindref="compound">bluetooth/mesh/model_types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli__handlers" kindref="compound">bt_mesh_sensor_cli_handlers</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="group__bt__mesh__sensor__cli_ga0dae592ad4da538566de3c4540a76ea4_1ga0dae592ad4da538566de3c4540a76ea4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_SENSOR_CLI_INIT(_handlers)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cb<sp/>=<sp/>_handlers,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="group__bt__mesh__sensor__cli_gaf715d42e47480fe23897c9f7630cafba_1gaf715d42e47480fe23897c9f7630cafba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_MODEL_SENSOR_CLI(_cli)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_CB(BT_MESH_MODEL_ID_SENSOR_CLI,<sp/>_bt_mesh_sensor_cli_op,<sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(_cli)-&gt;pub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_USER_DATA(struct<sp/>bt_mesh_sensor_cli,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cli),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_bt_mesh_sensor_cli_cb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structbt__mesh__sensor__cli" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>{</highlight></codeline>
<codeline lineno="57" refid="structbt__mesh__sensor__cli_a27ea562d52581fb947d2f6beadca78b6_1a27ea562d52581fb947d2f6beadca78b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_model<sp/>*<ref refid="structbt__mesh__sensor__cli_a27ea562d52581fb947d2f6beadca78b6_1a27ea562d52581fb947d2f6beadca78b6" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="59" refid="structbt__mesh__sensor__cli_a7e9e974d2d0a138e8aba3cb86ef08c0f_1a7e9e974d2d0a138e8aba3cb86ef08c0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_model_pub<sp/><ref refid="structbt__mesh__sensor__cli_a7e9e974d2d0a138e8aba3cb86ef08c0f_1a7e9e974d2d0a138e8aba3cb86ef08c0f" kindref="member">pub</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publication<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structbt__mesh__sensor__cli_ab33e17300ae36a7d6bd724ca4a77a84b_1ab33e17300ae36a7d6bd724ca4a77a84b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_buf_simple<sp/><ref refid="structbt__mesh__sensor__cli_ab33e17300ae36a7d6bd724ca4a77a84b_1ab33e17300ae36a7d6bd724ca4a77a84b" kindref="member">pub_buf</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publication<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structbt__mesh__sensor__cli_a676427b4049537adb547237bafd0114d_1a676427b4049537adb547237bafd0114d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structbt__mesh__sensor__cli_a676427b4049537adb547237bafd0114d_1a676427b4049537adb547237bafd0114d" kindref="member">pub_data</ref>[MAX(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_BUF_LEN(BT_MESH_SENSOR_OP_CADENCE_SET,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_SENSOR_MSG_MAXLEN_CADENCE_SET),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_BUF_LEN(BT_MESH_SENSOR_OP_SETTING_SET,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_SENSOR_MSG_MAXLEN_SETTING_SET))];</highlight></codeline>
<codeline lineno="69" refid="structbt__mesh__sensor__cli_ae3eec4718b4529d49a0f2d436c544e5f_1ae3eec4718b4529d49a0f2d436c544e5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ack_ctx<sp/><ref refid="structbt__mesh__sensor__cli_ae3eec4718b4529d49a0f2d436c544e5f_1ae3eec4718b4529d49a0f2d436c544e5f" kindref="member">ack_ctx</ref>;</highlight></codeline>
<codeline lineno="71" refid="structbt__mesh__sensor__cli_aae4709ca6ab8a4a39952c32362b3122b_1aae4709ca6ab8a4a39952c32362b3122b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli__handlers" kindref="compound">bt_mesh_sensor_cli_handlers</ref><sp/>*<ref refid="structbt__mesh__sensor__cli_aae4709ca6ab8a4a39952c32362b3122b_1aae4709ca6ab8a4a39952c32362b3122b" kindref="member">cb</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structbt__mesh__sensor__cadence__status" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>{</highlight></codeline>
<codeline lineno="81" refid="structbt__mesh__sensor__cadence__status_aa60b45125ab800896711c4c58833a257_1aa60b45125ab800896711c4c58833a257" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structbt__mesh__sensor__cadence__status_aa60b45125ab800896711c4c58833a257_1aa60b45125ab800896711c4c58833a257" kindref="member">fast_period_div</ref>;</highlight></codeline>
<codeline lineno="87" refid="structbt__mesh__sensor__cadence__status_ac574bd67c7b36838ea05bf2b54beb9af_1ac574bd67c7b36838ea05bf2b54beb9af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structbt__mesh__sensor__cadence__status_ac574bd67c7b36838ea05bf2b54beb9af_1ac574bd67c7b36838ea05bf2b54beb9af" kindref="member">min_int</ref>;</highlight></codeline>
<codeline lineno="89" refid="structbt__mesh__sensor__cadence__status_a34dda58aeaa3e887bf109b0388d9150e_1a34dda58aeaa3e887bf109b0388d9150e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__threshold" kindref="compound">bt_mesh_sensor_threshold</ref><sp/><ref refid="structbt__mesh__sensor__cadence__status_a34dda58aeaa3e887bf109b0388d9150e_1a34dda58aeaa3e887bf109b0388d9150e" kindref="member">threshold</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structbt__mesh__sensor__setting__status" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref><sp/>{</highlight></codeline>
<codeline lineno="95" refid="structbt__mesh__sensor__setting__status_a2df032310528f7fcd0a2420b16966557_1a2df032310528f7fcd0a2420b16966557" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__setting__status_a2df032310528f7fcd0a2420b16966557_1a2df032310528f7fcd0a2420b16966557" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="97" refid="structbt__mesh__sensor__setting__status_ad6e8bc964e039aa0298eb2bc55967c10_1ad6e8bc964e039aa0298eb2bc55967c10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sensor_value<sp/><ref refid="structbt__mesh__sensor__setting__status_ad6e8bc964e039aa0298eb2bc55967c10_1ad6e8bc964e039aa0298eb2bc55967c10" kindref="member">value</ref>[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];</highlight></codeline>
<codeline lineno="99" refid="structbt__mesh__sensor__setting__status_a0e6c83b536755283c1eb1677a341e30c_1a0e6c83b536755283c1eb1677a341e30c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__setting__status_a0e6c83b536755283c1eb1677a341e30c_1a0e6c83b536755283c1eb1677a341e30c" kindref="member">writable</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structbt__mesh__sensor__series__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="105" refid="structbt__mesh__sensor__series__entry_aebc6b963d6ff6b27c1a925506000dc12_1aebc6b963d6ff6b27c1a925506000dc12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__column" kindref="compound">bt_mesh_sensor_column</ref><sp/><ref refid="structbt__mesh__sensor__series__entry_aebc6b963d6ff6b27c1a925506000dc12_1aebc6b963d6ff6b27c1a925506000dc12" kindref="member">column</ref>;</highlight></codeline>
<codeline lineno="107" refid="structbt__mesh__sensor__series__entry_a112ccfa224feeed18bd89ea293a9463f_1a112ccfa224feeed18bd89ea293a9463f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sensor_value<sp/><ref refid="structbt__mesh__sensor__series__entry_a112ccfa224feeed18bd89ea293a9463f_1a112ccfa224feeed18bd89ea293a9463f" kindref="member">value</ref>[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structbt__mesh__sensor__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__info" kindref="compound">bt_mesh_sensor_info</ref><sp/>{</highlight></codeline>
<codeline lineno="113" refid="structbt__mesh__sensor__info_aa0ef7323cd730e1b4f924fe7ef950835_1aa0ef7323cd730e1b4f924fe7ef950835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structbt__mesh__sensor__info_aa0ef7323cd730e1b4f924fe7ef950835_1aa0ef7323cd730e1b4f924fe7ef950835" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="115" refid="structbt__mesh__sensor__info_afb95324fc7e713048bd640de8e4c8282_1afb95324fc7e713048bd640de8e4c8282" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__descriptor" kindref="compound">bt_mesh_sensor_descriptor</ref><sp/><ref refid="structbt__mesh__sensor__info_afb95324fc7e713048bd640de8e4c8282_1afb95324fc7e713048bd640de8e4c8282" kindref="member">descriptor</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structbt__mesh__sensor__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__data" kindref="compound">bt_mesh_sensor_data</ref><sp/>{</highlight></codeline>
<codeline lineno="120" refid="structbt__mesh__sensor__data_a4d215e86aa8dea3520d246970538933a_1a4d215e86aa8dea3520d246970538933a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__data_a4d215e86aa8dea3520d246970538933a_1a4d215e86aa8dea3520d246970538933a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="122" refid="structbt__mesh__sensor__data_af06502eae59010b4f225ca3a9aace788_1af06502eae59010b4f225ca3a9aace788" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sensor_value<sp/><ref refid="structbt__mesh__sensor__data_af06502eae59010b4f225ca3a9aace788_1af06502eae59010b4f225ca3a9aace788" kindref="member">value</ref>[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="structbt__mesh__sensor__cli__handlers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli__handlers" kindref="compound">bt_mesh_sensor_cli_handlers</ref><sp/>{</highlight></codeline>
<codeline lineno="140" refid="structbt__mesh__sensor__cli__handlers_a88febee8085ee8e84fc757b2bd0f5fe1_1a88febee8085ee8e84fc757b2bd0f5fe1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_a88febee8085ee8e84fc757b2bd0f5fe1_1a88febee8085ee8e84fc757b2bd0f5fe1" kindref="member">data</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sensor_value<sp/>*value);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__info" kindref="compound">bt_mesh_sensor_info</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="structbt__mesh__sensor__cli__handlers_a86f03299427d7e4ac054ca114ef7257a_1a86f03299427d7e4ac054ca114ef7257a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_a86f03299427d7e4ac054ca114ef7257a_1a86f03299427d7e4ac054ca114ef7257a" kindref="member">cadence</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_a86f03299427d7e4ac054ca114ef7257a_1a86f03299427d7e4ac054ca114ef7257a" kindref="member">cadence</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structbt__mesh__sensor__cli__handlers_a92da6ea4d18b088549796c7484e343a4_1a92da6ea4d18b088549796c7484e343a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_a92da6ea4d18b088549796c7484e343a4_1a92da6ea4d18b088549796c7484e343a4" kindref="member">settings</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ids,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="structbt__mesh__sensor__cli__handlers_ab796b7f3ad7a0c051ae16457039e0c94_1ab796b7f3ad7a0c051ae16457039e0c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_ab796b7f3ad7a0c051ae16457039e0c94_1ab796b7f3ad7a0c051ae16457039e0c94" kindref="member">setting_status</ref>)(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref><sp/>*setting);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="structbt__mesh__sensor__cli__handlers_a72602f372fc9569176dd9d38fa1e7fef_1a72602f372fc9569176dd9d38fa1e7fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_a72602f372fc9569176dd9d38fa1e7fef_1a72602f372fc9569176dd9d38fa1e7fef" kindref="member">series_entry</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*<ref refid="structbt__mesh__sensor__cli__handlers_aba336e51b11830f7b2d331c3eeae3165_1aba336e51b11830f7b2d331c3eeae3165" kindref="member">sensor</ref>,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>index,<sp/>uint8_t<sp/>count,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref><sp/>*entry);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="structbt__mesh__sensor__cli__handlers_a2cf50d0274b95677f400607bab8cbe75_1a2cf50d0274b95677f400607bab8cbe75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__sensor__cli__handlers_a2cf50d0274b95677f400607bab8cbe75_1a2cf50d0274b95677f400607bab8cbe75" kindref="member">unknown_type</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_msg_ctx<sp/>*ctx,<sp/>uint16_t<sp/>id,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>opcode);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="group__bt__mesh__sensor__cli_ga8e1ac94a6dc9e8b97ba5fb0c7a309141_1ga8e1ac94a6dc9e8b97ba5fb0c7a309141" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga8e1ac94a6dc9e8b97ba5fb0c7a309141_1ga8e1ac94a6dc9e8b97ba5fb0c7a309141" kindref="member">bt_mesh_sensor_cli_desc_all_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__info" kindref="compound">bt_mesh_sensor_info</ref><sp/>*sensors,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*count);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="group__bt__mesh__sensor__cli_ga939275d0189af0a6e00c4f6a754582e1_1ga939275d0189af0a6e00c4f6a754582e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga939275d0189af0a6e00c4f6a754582e1_1ga939275d0189af0a6e00c4f6a754582e1" kindref="member">bt_mesh_sensor_cli_desc_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__descriptor" kindref="compound">bt_mesh_sensor_descriptor</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="group__bt__mesh__sensor__cli_ga2a6f449dbe1205f2d748f0a940e0149e_1ga2a6f449dbe1205f2d748f0a940e0149e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga2a6f449dbe1205f2d748f0a940e0149e_1ga2a6f449dbe1205f2d748f0a940e0149e" kindref="member">bt_mesh_sensor_cli_cadence_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="group__bt__mesh__sensor__cli_ga0efe93f4da2462773e5328cdfb3a2abd_1ga0efe93f4da2462773e5328cdfb3a2abd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga0efe93f4da2462773e5328cdfb3a2abd_1ga0efe93f4da2462773e5328cdfb3a2abd" kindref="member">bt_mesh_sensor_cli_cadence_set</ref>(</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>*cadence,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="group__bt__mesh__sensor__cli_gac32184b3d1d819dc97166ca663dd940d_1gac32184b3d1d819dc97166ca663dd940d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_gac32184b3d1d819dc97166ca663dd940d_1gac32184b3d1d819dc97166ca663dd940d" kindref="member">bt_mesh_sensor_cli_cadence_set_unack</ref>(</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cadence__status" kindref="compound">bt_mesh_sensor_cadence_status</ref><sp/>*cadence);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="group__bt__mesh__sensor__cli_ga29cc60fc836d01369ecf788a4ad5b0f8_1ga29cc60fc836d01369ecf788a4ad5b0f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga29cc60fc836d01369ecf788a4ad5b0f8_1ga29cc60fc836d01369ecf788a4ad5b0f8" kindref="member">bt_mesh_sensor_cli_settings_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*ids,<sp/>uint32_t<sp/>*count);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="group__bt__mesh__sensor__cli_ga139e6168d9de6078b57d1f2b0a8ad570_1ga139e6168d9de6078b57d1f2b0a8ad570" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga139e6168d9de6078b57d1f2b0a8ad570_1ga139e6168d9de6078b57d1f2b0a8ad570" kindref="member">bt_mesh_sensor_cli_setting_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*setting,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="group__bt__mesh__sensor__cli_ga0ed746e75c0038fa6cf6f86e54c2cc5e_1ga0ed746e75c0038fa6cf6f86e54c2cc5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga0ed746e75c0038fa6cf6f86e54c2cc5e_1ga0ed746e75c0038fa6cf6f86e54c2cc5e" kindref="member">bt_mesh_sensor_cli_setting_set</ref>(</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*setting,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sensor_value<sp/>*value,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__setting__status" kindref="compound">bt_mesh_sensor_setting_status</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="group__bt__mesh__sensor__cli_gac6e4a1c0210b765a44fab88414f3ccc3_1gac6e4a1c0210b765a44fab88414f3ccc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_gac6e4a1c0210b765a44fab88414f3ccc3_1gac6e4a1c0210b765a44fab88414f3ccc3" kindref="member">bt_mesh_sensor_cli_setting_set_unack</ref>(</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*setting,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sensor_value<sp/>*value);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="group__bt__mesh__sensor__cli_gaa0f440dca1aa31c01323d692eeea4e29_1gaa0f440dca1aa31c01323d692eeea4e29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_gaa0f440dca1aa31c01323d692eeea4e29_1gaa0f440dca1aa31c01323d692eeea4e29" kindref="member">bt_mesh_sensor_cli_all_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__data" kindref="compound">bt_mesh_sensor_data</ref><sp/>*sensors,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*count);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="group__bt__mesh__sensor__cli_gabd71ee58fea78e865d79a634776bf89e_1gabd71ee58fea78e865d79a634776bf89e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_gabd71ee58fea78e865d79a634776bf89e_1gabd71ee58fea78e865d79a634776bf89e" kindref="member">bt_mesh_sensor_cli_get</ref>(</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sensor_value<sp/>*rsp);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="group__bt__mesh__sensor__cli_ga7e4fe3e5fae30a09aab00c7424db5b0a_1ga7e4fe3e5fae30a09aab00c7424db5b0a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_ga7e4fe3e5fae30a09aab00c7424db5b0a_1ga7e4fe3e5fae30a09aab00c7424db5b0a" kindref="member">bt_mesh_sensor_cli_series_entry_get</ref>(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__column" kindref="compound">bt_mesh_sensor_column</ref><sp/>*column,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref><sp/>*rsp);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="655" refid="group__bt__mesh__sensor__cli_gaf567ff00b05362c5656e9f7c33fb4ccc_1gaf567ff00b05362c5656e9f7c33fb4ccc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__sensor__cli_gaf567ff00b05362c5656e9f7c33fb4ccc_1gaf567ff00b05362c5656e9f7c33fb4ccc" kindref="member">bt_mesh_sensor_cli_series_entries_get</ref>(</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__cli" kindref="compound">bt_mesh_sensor_cli</ref><sp/>*cli,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_mesh_msg_ctx<sp/>*ctx,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__type" kindref="compound">bt_mesh_sensor_type</ref><sp/>*sensor,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__column" kindref="compound">bt_mesh_sensor_column</ref><sp/>*range,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__sensor__series__entry" kindref="compound">bt_mesh_sensor_series_entry</ref><sp/>*rsp,<sp/>uint32_t<sp/>*count);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_model_op<sp/>_bt_mesh_sensor_cli_op[];</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_mesh_model_cb<sp/>_bt_mesh_sensor_cli_cb;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BT_MESH_SENSOR_CLI_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/mesh/sensor_cli.h"/>
  </compounddef>
</doxygen>
