<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__esb" kind="group">
    <compoundname>esb</compoundname>
    <title>Enhanced ShockBurst</title>
    <innerclass refid="structesb__payload" prot="public">esb_payload</innerclass>
    <innerclass refid="structesb__evt" prot="public">esb_evt</innerclass>
    <innerclass refid="structesb__config" prot="public">esb_config</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__esb_1gae9e0aeeb3f862ea99c5cd947bc0843f8" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_protocol</name>
        <enumvalue id="group__esb_gae9e0aeeb3f862ea99c5cd947bc0843f8_1ggae9e0aeeb3f862ea99c5cd947bc0843f8a171ce6b235591836c8f774736e7a6bb3" prot="public">
          <name>ESB_PROTOCOL_ESB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Fixed payload length. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_gae9e0aeeb3f862ea99c5cd947bc0843f8_1ggae9e0aeeb3f862ea99c5cd947bc0843f8ad8b76d6f3f9dec026a3942ff157d321d" prot="public">
          <name>ESB_PROTOCOL_ESB_DPL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dynamic payload length. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst protocols. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="102" column="1" bodyfile="include/esb.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga070ae9b6c3f8e3d3a9f8df0c00ddfc56" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_mode</name>
        <enumvalue id="group__esb_ga070ae9b6c3f8e3d3a9f8df0c00ddfc56_1gga070ae9b6c3f8e3d3a9f8df0c00ddfc56a14c025de7009958e87c5a7f4e3c8d7e2" prot="public">
          <name>ESB_MODE_PTX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Primary transmitter mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga070ae9b6c3f8e3d3a9f8df0c00ddfc56_1gga070ae9b6c3f8e3d3a9f8df0c00ddfc56adb136f79bb2f1e4d1b94c879a001ff96" prot="public">
          <name>ESB_MODE_PRX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Primary receiver mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="108" column="1" bodyfile="include/esb.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga76b7c73f543bd1a22a4a47ac65ca08ca" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_bitrate</name>
        <enumvalue id="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caa47063019a5ae95648ee988bf07fd3313" prot="public">
          <name>ESB_BITRATE_1MBPS</name>
          <initializer>= RADIO_MODE_MODE_Nrf_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 Mb radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caab6d0b12ab4893d0e310c7cf8925027be" prot="public">
          <name>ESB_BITRATE_2MBPS</name>
          <initializer>= RADIO_MODE_MODE_Nrf_2Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 Mb radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caabba5763f29770d72644a7bb9f63e81d2" prot="public">
          <name>ESB_BITRATE_250KBPS</name>
          <initializer>= RADIO_MODE_MODE_Nrf_250Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250 Kb radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caa76788ed5bb047a9e7f15803f60a328f6" prot="public">
          <name>ESB_BITRATE_1MBPS_BLE</name>
          <initializer>= RADIO_MODE_MODE_Ble_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 Mb radio mode using <emphasis>Bluetooth</emphasis> low energy radio parameters. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst bitrate modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="114" column="1" bodyfile="include/esb.h" bodystart="114" bodyend="130"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga448149f151eba42eb8995d3affc475dc" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_crc</name>
        <enumvalue id="group__esb_ga448149f151eba42eb8995d3affc475dc_1gga448149f151eba42eb8995d3affc475dca76b92d19af5c16ffcdad4c05ceb38202" prot="public">
          <name>ESB_CRC_16BIT</name>
          <initializer>= RADIO_CRCCNF_LEN_Two</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use two-byte CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga448149f151eba42eb8995d3affc475dc_1gga448149f151eba42eb8995d3affc475dcab990c30f11d2aecbc05c70c4bf80b5e0" prot="public">
          <name>ESB_CRC_8BIT</name>
          <initializer>= RADIO_CRCCNF_LEN_One</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use one-byte CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga448149f151eba42eb8995d3affc475dc_1gga448149f151eba42eb8995d3affc475dca6b850a079c289e961eecb96fcfb057a1" prot="public">
          <name>ESB_CRC_OFF</name>
          <initializer>= RADIO_CRCCNF_LEN_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable CRC. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst CRC modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="133" column="1" bodyfile="include/esb.h" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga8a9f66935228905e38d225c792901701" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_tx_power</name>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a550fce8a629dc30d9942794c18a07b31" prot="public">
          <name>ESB_TX_POWER_4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a55265077937a224bc1aedbc1613b9379" prot="public">
          <name>ESB_TX_POWER_0DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_0dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a2437b63c69929252bbc25c4e5d381d45" prot="public">
          <name>ESB_TX_POWER_NEG4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-4 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701aacab7b4478de7d76aea17fffb2929439" prot="public">
          <name>ESB_TX_POWER_NEG8DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg8dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-8 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a41e36b350973eb7b4e229aa08acdadc6" prot="public">
          <name>ESB_TX_POWER_NEG12DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg12dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-12 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701adeb5f80a5fa7b9007404af1bfe2be6fd" prot="public">
          <name>ESB_TX_POWER_NEG16DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg16dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-16 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a6eb9eb03123e7185b4c40748863ab4c8" prot="public">
          <name>ESB_TX_POWER_NEG20DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg20dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-20 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a2a4d75012d989403809bcaf080bef0c0" prot="public">
          <name>ESB_TX_POWER_NEG30DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg30dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-30 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a068f9d76d0518d95ee7595d470941d51" prot="public">
          <name>ESB_TX_POWER_NEG40DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg40dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-40 dBm radio transmit power. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst radio transmission power modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="140" column="1" bodyfile="include/esb.h" bodystart="140" bodyend="165"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga3b230160a9a606617133c4e0a8eb043a" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_tx_mode</name>
        <enumvalue id="group__esb_ga3b230160a9a606617133c4e0a8eb043a_1gga3b230160a9a606617133c4e0a8eb043aabbef49c7379d1fd906525871101b8763" prot="public">
          <name>ESB_TXMODE_AUTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatic TX mode: When the TX FIFO contains packets and the radio is idle, packets are sent automatically. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga3b230160a9a606617133c4e0a8eb043a_1gga3b230160a9a606617133c4e0a8eb043aa32a6ebe683adf8e47c88937c149db309" prot="public">
          <name>ESB_TXMODE_MANUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manual TX mode: Packets are not sent until <ref refid="group__esb_ga302a70a8c64264d6ae6e49dda12a14a3_1ga302a70a8c64264d6ae6e49dda12a14a3" kindref="member">esb_start_tx</ref> is called. This mode can be used to ensure consistent packet timing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga3b230160a9a606617133c4e0a8eb043a_1gga3b230160a9a606617133c4e0a8eb043aad515d09304d25d9c338a81b9d69770f0" prot="public">
          <name>ESB_TXMODE_MANUAL_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manual start TX mode: Packets are not sent until <ref refid="group__esb_ga302a70a8c64264d6ae6e49dda12a14a3_1ga302a70a8c64264d6ae6e49dda12a14a3" kindref="member">esb_start_tx</ref> is called. Then, transmission continues automatically until the TX FIFO is empty. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst transmission modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="168" column="1" bodyfile="include/esb.h" bodystart="168" bodyend="182"/>
      </memberdef>
      <memberdef kind="enum" id="group__esb_1ga4ba19219b64bdcd34f7ca2e47a170b2b" prot="public" static="no" strong="no">
        <type></type>
        <name>esb_evt_id</name>
        <enumvalue id="group__esb_ga4ba19219b64bdcd34f7ca2e47a170b2b_1gga4ba19219b64bdcd34f7ca2e47a170b2ba59190d7d1eb6ff4f8f5736636039ada6" prot="public">
          <name>ESB_EVENT_TX_SUCCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event triggered on TX success. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga4ba19219b64bdcd34f7ca2e47a170b2b_1gga4ba19219b64bdcd34f7ca2e47a170b2ba840fceb538e7b3fedbf80870ed7d5210" prot="public">
          <name>ESB_EVENT_TX_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event triggered on TX failure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__esb_ga4ba19219b64bdcd34f7ca2e47a170b2b_1gga4ba19219b64bdcd34f7ca2e47a170b2bac546798e9b77aa3365db858d3289df12" prot="public">
          <name>ESB_EVENT_RX_RECEIVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event triggered on RX received. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enhanced ShockBurst event IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="185" column="1" bodyfile="include/esb.h" bodystart="185" bodyend="189"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__esb_1ga80f8a9ac0e0473e0b7bbb3911c1752d6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* esb_event_handler) (const struct esb_evt *event)</definition>
        <argsstring>)(const struct esb_evt *event)</argsstring>
        <name>esb_event_handler</name>
        <briefdescription>
<para>Event handler prototype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="215" column="9" bodyfile="include/esb.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__esb_1gaf916614073f44427dcc65b31bf408a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_init</definition>
        <argsstring>(const struct esb_config *config)</argsstring>
        <name>esb_init</name>
        <param>
          <type>const struct <ref refid="structesb__config" kindref="compound">esb_config</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize the Enhanced ShockBurst module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters for initializing the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="253" column="5" declfile="include/esb.h" declline="253" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gac0c41d17ab4ab2f2b6abafe10d9fd3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_suspend</definition>
        <argsstring>(void)</argsstring>
        <name>esb_suspend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suspend the Enhanced ShockBurst module. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function stops ongoing communications without changing the queues.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="263" column="5" declfile="include/esb.h" declline="263" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gaf452342a02aa8dad7ced301f0005e26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esb_disable</definition>
        <argsstring>(void)</argsstring>
        <name>esb_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable the Enhanced ShockBurst module. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function disables the Enhanced ShockBurst module immediately. Doing so might stop ongoing communications.</para>
<para><simplesect kind="note"><para>All queues are flushed by this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="273" column="6" declfile="include/esb.h" declline="273" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gad3da27c142d61fdb274eab2e93a6e0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esb_is_idle</definition>
        <argsstring>(void)</argsstring>
        <name>esb_is_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the Enhanced ShockBurst module is idle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the module is idle, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="279" column="6" declfile="include/esb.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga797c77faf18f3be090a783d5c2f44f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_write_payload</definition>
        <argsstring>(const struct esb_payload *payload)</argsstring>
        <name>esb_write_payload</name>
        <param>
          <type>const struct <ref refid="structesb__payload" kindref="compound">esb_payload</ref> *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Write a payload for transmission or acknowledgement. </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes a payload that is added to the queue. When the module is in PTX mode, the payload is queued for a regular transmission. When the module is in PRX mode, the payload is queued for when a packet is received that requires an acknowledgement with payload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="293" column="5" declfile="include/esb.h" declline="293" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga2be16f940f464fdc39ddd710d3ed6197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_read_rx_payload</definition>
        <argsstring>(struct esb_payload *payload)</argsstring>
        <name>esb_read_rx_payload</name>
        <param>
          <type>struct <ref refid="structesb__payload" kindref="compound">esb_payload</ref> *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Read a payload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload to be received.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="302" column="5" declfile="include/esb.h" declline="302" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga302a70a8c64264d6ae6e49dda12a14a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_start_tx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_start_tx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start transmitting data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="309" column="5" declfile="include/esb.h" declline="309" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga0a048a857c2150ef94a65b6bae0c244b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_start_rx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_start_rx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start receiving data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="316" column="5" declfile="include/esb.h" declline="316" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga4222224724143f35d1e40e4667bed77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_stop_rx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_stop_rx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop data reception. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="323" column="5" declfile="include/esb.h" declline="323" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gacd2ad50500639ff55479ec454173f8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_flush_tx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_flush_tx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush the TX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the TX FIFO buffer.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="332" column="5" declfile="include/esb.h" declline="332" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gae2198296f66f071b552e44adda9f3bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_pop_tx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_pop_tx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pop the first item from the TX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="339" column="5" declfile="include/esb.h" declline="339" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gaebce7ca62a83a0a3fcbc94e2f83952d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_flush_rx</definition>
        <argsstring>(void)</argsstring>
        <name>esb_flush_rx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush the RX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="346" column="5" declfile="include/esb.h" declline="346" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga676878cff398b57c1c7593610f37ad0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_address_length</definition>
        <argsstring>(uint8_t length)</argsstring>
        <name>esb_set_address_length</name>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the length of the address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the ESB address (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="355" column="5" declfile="include/esb.h" declline="355" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga29df501fac454070a89fa63070f27b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_base_address_0</definition>
        <argsstring>(const uint8_t *addr)</argsstring>
        <name>esb_set_base_address_0</name>
        <param>
          <type>const uint8_t *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Set the base address for pipe 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="364" column="5" declfile="include/esb.h" declline="364" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gaf7933fdf9e969c78967f0e4d64b4695f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_base_address_1</definition>
        <argsstring>(const uint8_t *addr)</argsstring>
        <name>esb_set_base_address_1</name>
        <param>
          <type>const uint8_t *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Set the base address for pipe 1 to pipe 7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="373" column="5" declfile="include/esb.h" declline="373" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga2f964e75f30681055f42a6b7e7f47ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_prefixes</definition>
        <argsstring>(const uint8_t *prefixes, uint8_t num_pipes)</argsstring>
        <name>esb_set_prefixes</name>
        <param>
          <type>const uint8_t *</type>
          <declname>prefixes</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>num_pipes</declname>
        </param>
        <briefdescription>
<para>Set the number of pipes and the pipe prefix addresses. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the number of available pipes, enables the pipes, and sets their prefix addresses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prefixes</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefixes for each pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_pipes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pipes. Must be less than or equal to <verbatim>embed:rst:inline :kconfig:`CONFIG_ESB_PIPE_COUNT` </verbatim>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="387" column="5" declfile="include/esb.h" declline="387" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gafd890e07130be78d1baf53b689deab3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_enable_pipes</definition>
        <argsstring>(uint8_t enable_mask)</argsstring>
        <name>esb_enable_pipes</name>
        <param>
          <type>uint8_t</type>
          <declname>enable_mask</declname>
        </param>
        <briefdescription>
<para>Enable select pipes. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>enable_mask</computeroutput> parameter must contain the same number of pipes as has been configured with <ref refid="group__esb_ga2f964e75f30681055f42a6b7e7f47ef4_1ga2f964e75f30681055f42a6b7e7f47ef4" kindref="member">esb_set_prefixes</ref>. This number may not be greater than the number defined by <verbatim>embed:rst:inline :kconfig:`CONFIG_ESB_PIPE_COUNT` </verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitfield mask to enable or disable pipes. Setting a bit to 0 disables the pipe. Setting a bit to 1 enables the pipe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="402" column="5" declfile="include/esb.h" declline="402" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga5fab89c6e8a62a16f0255862fc9df32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_update_prefix</definition>
        <argsstring>(uint8_t pipe, uint8_t prefix)</argsstring>
        <name>esb_update_prefix</name>
        <param>
          <type>uint8_t</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Update pipe prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipe for which to set the prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix to set for the pipe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="412" column="5" declfile="include/esb.h" declline="412" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga7d0b12b1f2e63e9994f93e0feb7e0e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_rf_channel</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>esb_set_rf_channel</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Set the channel to use for the radio. </para>
        </briefdescription>
        <detaileddescription>
<para>The module must be in an idle state to call this function. As a PTX, the application must wait for an idle state and as a PRX, the application must stop RX before changing the channel. After changing the channel, operation can be resumed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to use for radio.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="426" column="5" declfile="include/esb.h" declline="426" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gaf2b720598e4f1ee264a8c4cc2e2286dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_get_rf_channel</definition>
        <argsstring>(uint32_t *channel)</argsstring>
        <name>esb_get_rf_channel</name>
        <param>
          <type>uint32_t *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the current radio channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="435" column="5" declfile="include/esb.h" declline="435" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga4f66f57bafd5034d96774f515c16755a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_tx_power</definition>
        <argsstring>(enum esb_tx_power tx_output_power)</argsstring>
        <name>esb_set_tx_power</name>
        <param>
          <type>enum <ref refid="group__esb_ga8a9f66935228905e38d225c792901701_1ga8a9f66935228905e38d225c792901701" kindref="member">esb_tx_power</ref></type>
          <declname>tx_output_power</declname>
        </param>
        <briefdescription>
<para>Set the radio output power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tx_output_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Output power.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="444" column="5" declfile="include/esb.h" declline="444" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga00203f240b393df49100fddf33fe1124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_retransmit_delay</definition>
        <argsstring>(uint16_t delay)</argsstring>
        <name>esb_set_retransmit_delay</name>
        <param>
          <type>uint16_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set the packet retransmit delay. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay between retransmissions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="453" column="5" declfile="include/esb.h" declline="453" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1gaa467090803b438e49d89a8095c9edcd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_retransmit_count</definition>
        <argsstring>(uint16_t count)</argsstring>
        <name>esb_set_retransmit_count</name>
        <param>
          <type>uint16_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Set the number of retransmission attempts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of retransmissions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="462" column="5" declfile="include/esb.h" declline="462" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga807dbca85ef56d936c582083540f1bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_set_bitrate</definition>
        <argsstring>(enum esb_bitrate bitrate)</argsstring>
        <name>esb_set_bitrate</name>
        <param>
          <type>enum <ref refid="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1ga76b7c73f543bd1a22a4a47ac65ca08ca" kindref="member">esb_bitrate</ref></type>
          <declname>bitrate</declname>
        </param>
        <briefdescription>
<para>Set the radio bitrate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Radio bitrate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="471" column="5" declfile="include/esb.h" declline="471" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__esb_1ga996ce2c9899ba38327dfce826aaf2033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esb_reuse_pid</definition>
        <argsstring>(uint8_t pipe)</argsstring>
        <name>esb_reuse_pid</name>
        <param>
          <type>uint8_t</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Reuse a packet ID for a specific pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>The ESB protocol uses a 2-bit sequence number (packet ID) to identify retransmitted packets. By default, the packet ID is incremented for every uploaded packet. Use this function to prevent this and send two different packets with the same packet ID.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. Otherwise, a (negative) error code is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="485" column="5" declfile="include/esb.h" declline="485" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__esb_1gaa668f03ea00837c47f99f229c8d1dcc5" prot="public" static="no">
        <name>ESB_EVT_IRQ</name>
        <initializer>SWI0_IRQn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ESB event IRQ number when running on an nRF5 device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="36" column="9" bodyfile="include/esb.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__esb_1ga1be1192ee03dbbe0389d3e8aff6e8229" prot="public" static="no">
        <name>ESB_EVT_IRQHandler</name>
        <initializer>SWI0_IRQHandler</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The handler for <ref refid="group__esb_gaa668f03ea00837c47f99f229c8d1dcc5_1gaa668f03ea00837c47f99f229c8d1dcc5" kindref="member">ESB_EVT_IRQ</ref> when running on an nRF5 device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="38" column="9" bodyfile="include/esb.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__esb_1ga9e8b1a6ed0ab8ac850a3884ed4fb8e09" prot="public" static="no">
        <name>ESB_DEFAULT_CONFIG</name>
        <initializer>	{                                                                      \
		.protocol = <ref refid="group__esb_gae9e0aeeb3f862ea99c5cd947bc0843f8_1ggae9e0aeeb3f862ea99c5cd947bc0843f8ad8b76d6f3f9dec026a3942ff157d321d" kindref="member">ESB_PROTOCOL_ESB_DPL</ref>,                              \
		.mode = <ref refid="group__esb_ga070ae9b6c3f8e3d3a9f8df0c00ddfc56_1gga070ae9b6c3f8e3d3a9f8df0c00ddfc56a14c025de7009958e87c5a7f4e3c8d7e2" kindref="member">ESB_MODE_PTX</ref>,					       \
		.event_handler = 0,					       \
		.bitrate = <ref refid="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caab6d0b12ab4893d0e310c7cf8925027be" kindref="member">ESB_BITRATE_2MBPS</ref>,				       \
		.crc = <ref refid="group__esb_ga448149f151eba42eb8995d3affc475dc_1gga448149f151eba42eb8995d3affc475dca76b92d19af5c16ffcdad4c05ceb38202" kindref="member">ESB_CRC_16BIT</ref>,					       \
		.tx_output_power = <ref refid="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a55265077937a224bc1aedbc1613b9379" kindref="member">ESB_TX_POWER_0DBM</ref>,			       \
		.retransmit_delay = 600,				       \
		.retransmit_count = 3,					       \
		.tx_mode = <ref refid="group__esb_ga3b230160a9a606617133c4e0a8eb043a_1gga3b230160a9a606617133c4e0a8eb043aabbef49c7379d1fd906525871101b8763" kindref="member">ESB_TXMODE_AUTO</ref>,				       \
		.payload_length = 32,					       \
		.selective_auto_ack = false                                    \
	}</initializer>
        <briefdescription>
<para>Default radio parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Roughly equal to the nRF24Lxx default parameters except for CRC, which is set to 16 bit, and protocol, which is set to DPL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="46" column="9" bodyfile="include/esb.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__esb_1ga7891d7170d01cef666f7d250b5260b63" prot="public" static="no">
        <name>ESB_LEGACY_CONFIG</name>
        <initializer>	{                                                                      \
		.protocol = <ref refid="group__esb_gae9e0aeeb3f862ea99c5cd947bc0843f8_1ggae9e0aeeb3f862ea99c5cd947bc0843f8a171ce6b235591836c8f774736e7a6bb3" kindref="member">ESB_PROTOCOL_ESB</ref>,				       \
		.mode = <ref refid="group__esb_ga070ae9b6c3f8e3d3a9f8df0c00ddfc56_1gga070ae9b6c3f8e3d3a9f8df0c00ddfc56a14c025de7009958e87c5a7f4e3c8d7e2" kindref="member">ESB_MODE_PTX</ref>,					       \
		.event_handler = 0,					       \
		.bitrate = <ref refid="group__esb_ga76b7c73f543bd1a22a4a47ac65ca08ca_1gga76b7c73f543bd1a22a4a47ac65ca08caab6d0b12ab4893d0e310c7cf8925027be" kindref="member">ESB_BITRATE_2MBPS</ref>,				       \
		.crc = <ref refid="group__esb_ga448149f151eba42eb8995d3affc475dc_1gga448149f151eba42eb8995d3affc475dcab990c30f11d2aecbc05c70c4bf80b5e0" kindref="member">ESB_CRC_8BIT</ref>,					       \
		.tx_output_power = <ref refid="group__esb_ga8a9f66935228905e38d225c792901701_1gga8a9f66935228905e38d225c792901701a55265077937a224bc1aedbc1613b9379" kindref="member">ESB_TX_POWER_0DBM</ref>,			       \
		.retransmit_delay = 600,				       \
		.retransmit_count = 3,					       \
		.tx_mode = <ref refid="group__esb_ga3b230160a9a606617133c4e0a8eb043a_1gga3b230160a9a606617133c4e0a8eb043aabbef49c7379d1fd906525871101b8763" kindref="member">ESB_TXMODE_AUTO</ref>,				       \
		.payload_length = 32,					       \
		.selective_auto_ack = false                                    \
	}</initializer>
        <briefdescription>
<para>Default legacy radio parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Identical to the nRF24Lxx defaults. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="65" column="9" bodyfile="include/esb.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__esb_1gacd6d909d72fbfad5ba2112a10fcec4df" prot="public" static="no">
        <name>ESB_CREATE_PAYLOAD</name>
        <param><defname>_pipe</defname></param>
        <param><defname>...</defname></param>
        <initializer>	{                                                                      \
		.pipe = _pipe,                                                 \
		.length = NUM_VA_ARGS_LESS_1(_pipe, __VA_ARGS__),	       \
		.data = {						       \
			__VA_ARGS__                                            \
		}                                                              \
	}</initializer>
        <briefdescription>
<para>Macro to create an initializer for a TX data packet. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates an initializer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe to use for the data packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Comma separated list of character data to put in the TX buffer. Supported values consist of 1 to 63 characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initializer that sets up the pipe, length, and byte array for content of the TX data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/esb.h" line="92" column="9" bodyfile="include/esb.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Enhanced ShockBurst (ESB) is a basic protocol that supports two-way data packet communication including packet buffering, packet acknowledgment, and automatic retransmission of lost packets. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
