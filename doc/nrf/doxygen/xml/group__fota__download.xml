<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__fota__download" kind="group">
    <compoundname>fota_download</compoundname>
    <title>Firmware over-the-air download library</title>
    <innerclass refid="structfota__download__evt" prot="public">fota_download_evt</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__fota__download_1ga217989aeef171680eed63a79a9238ba2" prot="public" static="no" strong="no">
        <type></type>
        <name>fota_download_evt_id</name>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a3ee5ed910cbf3ac83377a6325f311c10" prot="public">
          <name>FOTA_DOWNLOAD_EVT_PROGRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download progress report. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a0c04c54557619b099e43d8fd636f89cc" prot="public">
          <name>FOTA_DOWNLOAD_EVT_FINISHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download finished. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a517790928651330e8caa51c8d0d8f77c" prot="public">
          <name>FOTA_DOWNLOAD_EVT_ERASE_PENDING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download erase pending. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a2de19fa91dd40b0fa971c206f38993cb" prot="public">
          <name>FOTA_DOWNLOAD_EVT_ERASE_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download erase done. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a64a984f35c689c50e656b4659c1904bf" prot="public">
          <name>FOTA_DOWNLOAD_EVT_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga217989aeef171680eed63a79a9238ba2_1gga217989aeef171680eed63a79a9238ba2a69388889f788bbb78a2bbefd0efc23e4" prot="public">
          <name>FOTA_DOWNLOAD_EVT_CANCELLED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FOTA download cancelled. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FOTA download event IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="33" column="1" bodyfile="include/net/fota_download.h" bodystart="33" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="group__fota__download_1ga9dc903c6231f7c7de49dfa9d6a5c5d47" prot="public" static="no" strong="no">
        <type></type>
        <name>fota_download_error_cause</name>
        <enumvalue id="group__fota__download_ga9dc903c6231f7c7de49dfa9d6a5c5d47_1gga9dc903c6231f7c7de49dfa9d6a5c5d47ae63598a676a80135354ad93d46e62e1e" prot="public">
          <name>FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No error, used when event ID is not FOTA_DOWNLOAD_EVT_ERROR. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga9dc903c6231f7c7de49dfa9d6a5c5d47_1gga9dc903c6231f7c7de49dfa9d6a5c5d47a1c114feabab49dfe5beb222f327ce220" prot="public">
          <name>FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Downloading the update failed. The download may be retried. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga9dc903c6231f7c7de49dfa9d6a5c5d47_1gga9dc903c6231f7c7de49dfa9d6a5c5d47aafc18fa3147519e7974ee40207a483c9" prot="public">
          <name>FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The update is invalid and was rejected. Retry will not help. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__fota__download_ga9dc903c6231f7c7de49dfa9d6a5c5d47_1gga9dc903c6231f7c7de49dfa9d6a5c5d47ace44cc359b9974dd8b45e7d4c5ebd3de" prot="public">
          <name>FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual firmware type does not match expected. Retry will not help. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FOTA download error cause values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="51" column="1" bodyfile="include/net/fota_download.h" bodystart="51" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__fota__download_1ga95d0d50155479a91d7f0322ae32fbd60" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* fota_download_callback_t) (const struct fota_download_evt *evt)</definition>
        <argsstring>)(const struct fota_download_evt *evt)</argsstring>
        <name>fota_download_callback_t</name>
        <briefdescription>
<para>FOTA download asynchronous callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="82" column="9" bodyfile="include/net/fota_download.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__fota__download_1gacb88d80a30bf57dc5865d330a298aee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fota_download_init</definition>
        <argsstring>(fota_download_callback_t client_callback)</argsstring>
        <name>fota_download_init</name>
        <param>
          <type><ref refid="group__fota__download_ga95d0d50155479a91d7f0322ae32fbd60_1ga95d0d50155479a91d7f0322ae32fbd60" kindref="member">fota_download_callback_t</ref></type>
          <declname>client_callback</declname>
        </param>
        <briefdescription>
<para>Initialize the firmware over-the-air download library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback for the generated events.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successfully initialized. Otherwise, a negative value is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="91" column="5" declfile="include/net/fota_download.h" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fota__download_1ga7dc5a6a165f00dd04f82770ea6a84844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fota_download_start</definition>
        <argsstring>(const char *host, const char *file, int sec_tag, uint8_t pdn_id, size_t fragment_size)</argsstring>
        <name>fota_download_start</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sec_tag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pdn_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fragment_size</declname>
        </param>
        <briefdescription>
<para>Start downloading the given file from the given host. </para>
        </briefdescription>
        <detaileddescription>
<para>When the download is complete, the secondary slot of MCUboot is tagged as having valid firmware inside it. The completion is reported through an event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of host to start downloading from. Can include scheme and port number, e.g. <ulink url="https://google.com:443">https://google.com:443</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filepath to the file you wish to download. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sec_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Security tag you want to use with HTTPS set to -1 to Disable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet Data Network ID to use for the download, or 0 to use the default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment size to be used for the download. If 0, <verbatim>embed:rst:inline :kconfig:`CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE` </verbatim> is used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If download has started successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If download is already ongoing. Otherwise, a negative value is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="110" column="5" declfile="include/net/fota_download.h" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fota__download_1ga49f9983d2492c6c7d1097e32b6666b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fota_download_start_with_image_type</definition>
        <argsstring>(const char *host, const char *file, int sec_tag, uint8_t pdn_id, size_t fragment_size, const enum dfu_target_image_type expected_type)</argsstring>
        <name>fota_download_start_with_image_type</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sec_tag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pdn_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fragment_size</declname>
        </param>
        <param>
          <type>const enum <ref refid="group__dfu__target_gad3de6472dd7ff6c41abd911a16b67a79_1gad3de6472dd7ff6c41abd911a16b67a79" kindref="member">dfu_target_image_type</ref></type>
          <declname>expected_type</declname>
        </param>
        <briefdescription>
<para>Start downloading the given file from the given host. Validate that the file type matches the expected type before starting the installation. </para>
        </briefdescription>
        <detaileddescription>
<para>When the download is complete, the secondary slot of MCUboot is tagged as having valid firmware inside it. The completion is reported through an event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of host to start downloading from. Can include scheme and port number, e.g. <ulink url="https://google.com:443">https://google.com:443</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filepath to the file you wish to download. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sec_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Security tag you want to use with HTTPS set to -1 to Disable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet Data Network ID to use for the download, or 0 to use the default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment size to be used for the download. If 0, <verbatim>embed:rst:inline :kconfig:`CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE` </verbatim> is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of firmware file to be downloaded and installed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If download has started successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If download is already ongoing. Otherwise, a negative value is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="132" column="5" declfile="include/net/fota_download.h" declline="132" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fota__download_1gaac764ae25e1c7ed8ee34921c90873318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fota_download_cancel</definition>
        <argsstring>(void)</argsstring>
        <name>fota_download_cancel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cancel FOTA image downloading. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If FOTA download is cancelled successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>If download is not started, aborted or completed. Otherwise, a negative value is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="142" column="5" declfile="include/net/fota_download.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fota__download_1ga98282fb0ca9256c4ef71285a3dce18b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fota_download_target</definition>
        <argsstring>(void)</argsstring>
        <name>fota_download_target</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get target image type. </para>
        </briefdescription>
        <detaileddescription>
<para>Image type becomes known after download starts.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Unknown type before download starts. Otherwise, a type defined in enum dfu_target_image_type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/fota_download.h" line="151" column="5" declfile="include/net/fota_download.h" declline="151" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Library for downloading a firmware update over the air. </para>
    </briefdescription>
    <detaileddescription>
<para>Downloads the specified file from the specified host to the secondary partition of MCUboot. After the file has been downloaded, the secondary slot is tagged as having valid firmware inside it. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
