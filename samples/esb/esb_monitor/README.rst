.. _esb_monitor:

Enhanced ShockBurst: Monitor
#############################

.. contents::
   :local:
   :depth: 2

The Monitor sample shows how to use the :ref:`ug_esb` protocol in Monitor mode.
It demonstrates how to configure the Enhanced ShockBurst protocol to receive all the traffic generated on the configured channel and pipes.

Requirements
************

The sample supports the following development kits:

.. table-from-sample-yaml::

Overview
********

The sample consist of one receiver configured as a monitor that uses the :ref:`esb_README` library.
After building and programming each sample on a DK, you can monitor the traffic generated by the kits programmed with the :ref:`Transmitter <esb_ptx>` and :ref:`Receiver <esb_prx>` samples, respectively.
You can see the received traffic in real time using the `Serial Terminal app`_.
Successful monitoring is also indicated by the LEDs that should be in sync on all kits.

User interface
***************

All LEDs:

   Indicate that packets are received.

   When used together with the :ref:`Transmitter <esb_ptx>` sample:

       The first four packets turn on the LEDs sequentially.

       The next four packets turn them off again in the same order.

   To disable LEDs, unset the :ref:`CONFIG_LED_ENABLE <CONFIG_LED_ENABLE>` Kconfig option.

The following ``sniffer`` shell subcommands are available when the :ref:`CONFIG_ESB_SNIFFER <CONFIG_ESB_SNIFFER>` Kconfig option is set:

   .. list-table:: Sniffer shell commands
      :header-rows: 1

      * - Subcommand
        - Arguments
        - Description
      * - ``show``
        -
        - Print actual sniffer configuration
      * - ``start``
        -
        - Start listening
      * - ``stop``
        -
        - Stop listening
      * - ``set addr0``
        - <xx.xx.xx.xx>
        - Set base address 0
      * - ``set addr1``
        - <xx.xx.xx.xx>
        - Set base address 1
      * - ``set bitrate``
        - <bitrate>
        - Set bitrate
      * - ``set channel``
        - <channel number>
        - Set ESB channel
      * - ``set prefix``
        - <xx.xx.xx.xx> <xx.xx.xx.xx>
        - Set prefix0 and prefix1
      * - ``pipe enable``
        - <pipe number> <pipe number> ... or ``all``
        - Enable selected pipes, or all pipes when argument is ``all``
      * - ``pipe disable``
        - <pipe number> <pipe number> ... or ``all``
        - Disable selected pipes, or all pipes when argument is ``all``
      * - ``pipe prefix``
        - <pipe number> <prefix>
        - Set <prefix> on <pipe number>

Configuration
*************

|config|

Configuration options
=====================

Check and configure the following options:

.. _CONFIG_LED_ENABLE:

CONFIG_LED_ENABLE
   Enable led changes while receiving packets.
   It is intended to use together with the :ref:`Transmitter <esb_ptx>` sample.
   This option is enabled by default.

.. _CONFIG_ESB_SNIFFER:

CONFIG_ESB_SNIFFER
   Disable logging received packets through UART, set RTT as transport layer for the packets, and enable the shell.
   It is intended for use together with :file:`scripts/esb_sniffer/main.py` or :file:`scripts/esb_sniffer/capture_to_pcap.py` scripts.
   This option is disabled by default.

Building and running
********************

The Monitor sample is located in the :file:`samples/esb/esb_monitor` folder in the |NCS| folder structure.

See :ref:`building` and :ref:`programming` for information on how to build and program the application, respectively.

.. include:: /includes/nRF54H20_erase_UICR.txt

FEM support
===========

.. include:: /includes/sample_fem_support.txt

Testing
=======

After programming the DKs with the Monitor, Transmitter, and Receiver samples, you can test their functionality.

Complete the following steps to test the samples:

1. Power on all kits.
#. Observe that the LEDs change synchronously on all kits.
#. Connect to the monitor DK with a terminal emulator (for example, the `Serial Terminal app`_).
   See :ref:`test_and_optimize` for the required settings and steps.
#. Observe the logged traffic of the DK programmed with the Monitor sample.

Complete the following steps to test the sample with the :ref:`CONFIG_ESB_SNIFFER <CONFIG_ESB_SNIFFER>` Kconfig option enabled:

1. Power on the DK.
#. Read and follow the instructions in the :ref:`esb_sniffer_scripts` file to configure your environment.
#. Run the :file:`scripts/esb_sniffer/capture_to_pcap.py` script with the name of the output file as argument.
   For example:

   .. parsed-literal::
      :class: highlight

      python3 capture_to_pcap.py output.pcap

#. Analyze the captured traffic in Wireshark.

Dependencies
************

This sample uses the following |NCS| library:

* :ref:`esb_readme`

In addition, it uses the following Zephyr libraries:

* :file:`include/zephyr/types.h`
* :ref:`zephyr:logging_api`
* :ref:`zephyr:kernel_api`:

  * :file:`include/kernel.h`
  * :file:`include/irq.h`

* :ref:`zephyr:api_peripherals`:

   * :file:`include/gpio.h`
