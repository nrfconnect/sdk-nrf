/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from clusters-Events.h.zapt

#pragma once

#include <app/EventLoggingTypes.h>
#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/NordicDevKit/ClusterId.h>
#include <clusters/NordicDevKit/Enums.h>
#include <clusters/NordicDevKit/EventIds.h>
#include <clusters/NordicDevKit/Structs.h>

#include <cstdint>

namespace chip
{
namespace app
{
	namespace Clusters
	{
		namespace NordicDevKit
		{
			namespace Events
			{
				namespace UserButtonChanged
				{
					static constexpr PriorityLevel kPriorityLevel = PriorityLevel::Info;

					enum class Fields : uint8_t {};

					struct Type {
					public:
						static constexpr PriorityLevel GetPriorityLevel()
						{
							return kPriorityLevel;
						}
						static constexpr EventId GetEventId()
						{
							return Events::UserButtonChanged::Id;
						}
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
						static constexpr bool kIsFabricScoped = false;

						CHIP_ERROR Encode(TLV::TLVWriter &aWriter, TLV::Tag aTag) const;
					};

					struct DecodableType {
					public:
						static constexpr PriorityLevel GetPriorityLevel()
						{
							return kPriorityLevel;
						}
						static constexpr EventId GetEventId()
						{
							return Events::UserButtonChanged::Id;
						}
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}

						CHIP_ERROR Decode(TLV::TLVReader &reader);
					};
				} // namespace UserButtonChanged
			} // namespace Events
		} // namespace NordicDevKit
	} // namespace Clusters
} // namespace app
} // namespace chip
