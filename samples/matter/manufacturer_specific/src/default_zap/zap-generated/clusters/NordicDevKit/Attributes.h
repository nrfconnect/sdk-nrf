/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from clusters-Attributes.h.zapt

#pragma once

#include <app/ConcreteAttributePath.h>
#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <app/util/basic-types.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Attributes.h>
#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/NordicDevKit/AttributeIds.h>
#include <clusters/NordicDevKit/ClusterId.h>
#include <clusters/NordicDevKit/Enums.h>
#include <clusters/NordicDevKit/Structs.h>

namespace chip
{
namespace app
{
	namespace Clusters
	{
		namespace NordicDevKit
		{
			namespace Attributes
			{

				namespace GeneratedCommandList
				{
					struct TypeInfo
						: public Clusters::Globals::Attributes::GeneratedCommandList::TypeInfo {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
					};
				} // namespace GeneratedCommandList
				namespace AcceptedCommandList
				{
					struct TypeInfo
						: public Clusters::Globals::Attributes::AcceptedCommandList::TypeInfo {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
					};
				} // namespace AcceptedCommandList
				namespace AttributeList
				{
					struct TypeInfo
						: public Clusters::Globals::Attributes::AttributeList::TypeInfo {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
					};
				} // namespace AttributeList
				namespace FeatureMap
				{
					struct TypeInfo : public Clusters::Globals::Attributes::FeatureMap::TypeInfo {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
					};
				} // namespace FeatureMap
				namespace ClusterRevision
				{
					struct TypeInfo
						: public Clusters::Globals::Attributes::ClusterRevision::TypeInfo {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
					};
				} // namespace ClusterRevision
				namespace DevKitName
				{
					struct TypeInfo {
						using Type = chip::CharSpan;
						using DecodableType = chip::CharSpan;
						using DecodableArgType = chip::CharSpan;

						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
						static constexpr AttributeId GetAttributeId()
						{
							return Attributes::DevKitName::Id;
						}
						static constexpr bool MustUseTimedWrite() { return false; }
						static constexpr size_t MaxLength() { return 254; }
					};
				} // namespace DevKitName
				namespace UserLED
				{
					struct TypeInfo {
						using Type = bool;
						using DecodableType = bool;
						using DecodableArgType = bool;

						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
						static constexpr AttributeId GetAttributeId()
						{
							return Attributes::UserLED::Id;
						}
						static constexpr bool MustUseTimedWrite() { return false; }
					};
				} // namespace UserLED
				namespace UserButton
				{
					struct TypeInfo {
						using Type = bool;
						using DecodableType = bool;
						using DecodableArgType = bool;

						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}
						static constexpr AttributeId GetAttributeId()
						{
							return Attributes::UserButton::Id;
						}
						static constexpr bool MustUseTimedWrite() { return false; }
					};
				} // namespace UserButton

				struct TypeInfo {
					struct DecodableType {
						static constexpr ClusterId GetClusterId()
						{
							return Clusters::NordicDevKit::Id;
						}

						CHIP_ERROR Decode(TLV::TLVReader &reader,
								  const ConcreteAttributePath &path);

						Attributes::GeneratedCommandList::TypeInfo::DecodableType
							generatedCommandList;
						Attributes::AcceptedCommandList::TypeInfo::DecodableType
							acceptedCommandList;
						Attributes::AttributeList::TypeInfo::DecodableType attributeList;
						Attributes::FeatureMap::TypeInfo::DecodableType featureMap =
							static_cast<uint32_t>(0);
						Attributes::ClusterRevision::TypeInfo::DecodableType clusterRevision =
							static_cast<uint16_t>(0);
						Attributes::DevKitName::TypeInfo::DecodableType devKitName;
						Attributes::UserLED::TypeInfo::DecodableType userLED =
							static_cast<bool>(0);
						Attributes::UserButton::TypeInfo::DecodableType userButton =
							static_cast<bool>(0);
					};
				};
			} // namespace Attributes
		} // namespace NordicDevKit
	} // namespace Clusters
} // namespace app
} // namespace chip
