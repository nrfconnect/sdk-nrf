/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

// Default values for the attributes longer than a pointer,
// in a form of a binary blob
// Separate block is generated for big-endian and little-endian cases.
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                             \
	{                                                                                                              \
		/* Endpoint: 0, Cluster: Descriptor (server), big-endian */                                            \
                                                                                                                       \
		/* 0 - FeatureMap, */                                                                                  \
		0x00, 0x00, 0x00, 0x00,                                                                                \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Basic (server), big-endian */                                         \
                                                                                                                       \
			/* 4 - SoftwareVersion, */                                                                     \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* 8 - FeatureMap, */                                                                          \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: OTA Software Update Provider (client), big-endian */                  \
                                                                                                                       \
			/* 12 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: OTA Software Update Requestor (server), big-endian */                 \
                                                                                                                       \
			/* 16 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: General Commissioning (server), big-endian */                         \
                                                                                                                       \
			/* 20 - Breadcrumb, */                                                                         \
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                                \
                                                                                                                       \
			/* 28 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Network Commissioning (server), big-endian */                         \
                                                                                                                       \
			/* 32 - Networks, */                                                                           \
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                        \
                                                                                                                       \
			/* 44 - LastConnectErrorValue, */                                                              \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* 48 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: General Diagnostics (server), big-endian */                           \
                                                                                                                       \
			/* 52 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Software Diagnostics (server), big-endian */                          \
                                                                                                                       \
			/* 56 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: AdministratorCommissioning (server), big-endian */                    \
                                                                                                                       \
			/* 60 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Operational Credentials (server), big-endian */                       \
                                                                                                                       \
			/* 64 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 1, Cluster: On/Off (server), big-endian */                                        \
                                                                                                                       \
			/* 68 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 1, Cluster: Descriptor (server), big-endian */                                    \
                                                                                                                       \
			/* 72 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
	}

#else // !BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                             \
	{                                                                                                              \
		/* Endpoint: 0, Cluster: Descriptor (server), little-endian */                                         \
                                                                                                                       \
		/* 0 - FeatureMap, */                                                                                  \
		0x00, 0x00, 0x00, 0x00,                                                                                \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Basic (server), little-endian */                                      \
                                                                                                                       \
			/* 4 - SoftwareVersion, */                                                                     \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* 8 - FeatureMap, */                                                                          \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: OTA Software Update Provider (client), little-endian */               \
                                                                                                                       \
			/* 12 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: OTA Software Update Requestor (server), little-endian */              \
                                                                                                                       \
			/* 16 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: General Commissioning (server), little-endian */                      \
                                                                                                                       \
			/* 20 - Breadcrumb, */                                                                         \
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                                \
                                                                                                                       \
			/* 28 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Network Commissioning (server), little-endian */                      \
                                                                                                                       \
			/* 32 - Networks, */                                                                           \
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                        \
                                                                                                                       \
			/* 44 - LastConnectErrorValue, */                                                              \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* 48 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: General Diagnostics (server), little-endian */                        \
                                                                                                                       \
			/* 52 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Software Diagnostics (server), little-endian */                       \
                                                                                                                       \
			/* 56 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: AdministratorCommissioning (server), little-endian */                 \
                                                                                                                       \
			/* 60 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 0, Cluster: Operational Credentials (server), little-endian */                    \
                                                                                                                       \
			/* 64 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 1, Cluster: On/Off (server), little-endian */                                     \
                                                                                                                       \
			/* 68 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
                                                                                                                       \
			/* Endpoint: 1, Cluster: Descriptor (server), little-endian */                                 \
                                                                                                                       \
			/* 72 - FeatureMap, */                                                                         \
			0x00, 0x00, 0x00, 0x00,                                                                        \
	}

#endif // BIGENDIAN_CPU

#define GENERATED_DEFAULTS_COUNT (16)

#define ZAP_TYPE(type) ZCL_##type##_ATTRIBUTE_TYPE
#define ZAP_LONG_DEFAULTS_INDEX(index)                                                                                 \
	{                                                                                                              \
		&generatedDefaults[index]                                                                              \
	}
#define ZAP_MIN_MAX_DEFAULTS_INDEX(index)                                                                              \
	{                                                                                                              \
		&minMaxDefaults[index]                                                                                 \
	}
#define ZAP_EMPTY_DEFAULT()                                                                                            \
	{                                                                                                              \
		(uint16_t)0                                                                                            \
	}
#define ZAP_SIMPLE_DEFAULT(x)                                                                                          \
	{                                                                                                              \
		(uint16_t) x                                                                                           \
	}

// This is an array of EmberAfAttributeMinMaxValue structures.
#define GENERATED_MIN_MAX_DEFAULT_COUNT 0
#define GENERATED_MIN_MAX_DEFAULTS                                                                                     \
	{                                                                                                              \
	}

#define ZAP_ATTRIBUTE_MASK(mask) ATTRIBUTE_MASK_##mask
// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTE_COUNT 141
#define GENERATED_ATTRIBUTES                                                                                                                \
	{                                                                                                                                   \
		/* Endpoint: 0, Cluster: Descriptor (server) */                                                                             \
		{ 0x00000000, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE), ZAP_EMPTY_DEFAULT() }, /* device                    \
														  list                      \
														*/                          \
			{ 0x00000001, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* server list */                                                                          \
			{ 0x00000002, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* client list */                                                                          \
			{ 0x00000003, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* parts list */                                                                           \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(0) }, /* FeatureMap */                              \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(1) }, /* ClusterRevision */                                \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: Basic (server) */                                                                          \
			{ 0x00000000, ZAP_TYPE(INT16U), 2, ZAP_ATTRIBUTE_MASK(SINGLETON), ZAP_EMPTY_DEFAULT() }, /* InteractionModelVersion \
														  */                        \
			{ 0x00000001, ZAP_TYPE(CHAR_STRING), 33, ZAP_ATTRIBUTE_MASK(SINGLETON),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* VendorName */                                                                           \
			{ 0x00000002, ZAP_TYPE(VENDOR_ID), 2, ZAP_ATTRIBUTE_MASK(SINGLETON),                                                \
			  ZAP_EMPTY_DEFAULT() }, /* VendorID */                                                                             \
			{ 0x00000003, ZAP_TYPE(CHAR_STRING), 33, ZAP_ATTRIBUTE_MASK(SINGLETON),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* ProductName */                                                                          \
			{ 0x00000004, ZAP_TYPE(INT16U), 2, ZAP_ATTRIBUTE_MASK(SINGLETON), ZAP_EMPTY_DEFAULT() }, /* ProductID               \
														  */                        \
			{ 0x00000005, ZAP_TYPE(CHAR_STRING), 33,                                                                            \
			  ZAP_ATTRIBUTE_MASK(SINGLETON) | ZAP_ATTRIBUTE_MASK(WRITABLE), ZAP_EMPTY_DEFAULT() }, /* NodeLabel                 \
														*/                          \
			{ 0x00000006, ZAP_TYPE(CHAR_STRING), 3,                                                                             \
			  ZAP_ATTRIBUTE_MASK(SINGLETON) | ZAP_ATTRIBUTE_MASK(WRITABLE), ZAP_EMPTY_DEFAULT() }, /* Location                  \
														*/                          \
			{ 0x00000007, ZAP_TYPE(INT16U), 2, ZAP_ATTRIBUTE_MASK(SINGLETON),                                                   \
			  ZAP_SIMPLE_DEFAULT(0x00) }, /* HardwareVersion */                                                                 \
			{ 0x00000008, ZAP_TYPE(CHAR_STRING), 65, ZAP_ATTRIBUTE_MASK(SINGLETON),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* HardwareVersionString */                                                                \
			{ 0x00000009, ZAP_TYPE(INT32U), 4, ZAP_ATTRIBUTE_MASK(SINGLETON),                                                   \
			  ZAP_LONG_DEFAULTS_INDEX(4) }, /* SoftwareVersion */                                                               \
			{ 0x0000000A, ZAP_TYPE(CHAR_STRING), 65, ZAP_ATTRIBUTE_MASK(SINGLETON),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* SoftwareVersionString */                                                                \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, ZAP_ATTRIBUTE_MASK(SINGLETON),                                                 \
			  ZAP_LONG_DEFAULTS_INDEX(8) }, /* FeatureMap */                                                                    \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, ZAP_ATTRIBUTE_MASK(SINGLETON),                                                   \
			  ZAP_SIMPLE_DEFAULT(3) }, /* ClusterRevision */                                                                    \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: OTA Software Update Provider (client) */                                                   \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, ZAP_ATTRIBUTE_MASK(CLIENT),                                                    \
			  ZAP_LONG_DEFAULTS_INDEX(12) }, /* FeatureMap */                                                                   \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, ZAP_ATTRIBUTE_MASK(CLIENT), ZAP_SIMPLE_DEFAULT(1) }, /* ClusterRevision          \
														 */                         \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: OTA Software Update Requestor (server) */                                                  \
			{ 0x00000000, ZAP_TYPE(ARRAY), 0,                                                                                   \
			  ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) | ZAP_ATTRIBUTE_MASK(WRITABLE),                                              \
			  ZAP_EMPTY_DEFAULT() }, /* DefaultOtaProviders */                                                                  \
			{ 0x00000001, ZAP_TYPE(BOOLEAN), 1, 0, ZAP_SIMPLE_DEFAULT(1) }, /* UpdatePossible */                                \
			{ 0x00000002, ZAP_TYPE(ENUM8), 1, 0, ZAP_SIMPLE_DEFAULT(0) }, /* UpdateState */                                     \
			{ 0x00000003, ZAP_TYPE(INT8U), 1, ZAP_ATTRIBUTE_MASK(NULLABLE), ZAP_EMPTY_DEFAULT() }, /* UpdateStateProgress       \
														*/                          \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(16) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(1) }, /* ClusterRevision */                                \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: General Commissioning (server) */                                                          \
			{ 0x00000000, ZAP_TYPE(INT64U), 8, ZAP_ATTRIBUTE_MASK(WRITABLE),                                                    \
			  ZAP_LONG_DEFAULTS_INDEX(20) }, /* Breadcrumb */                                                                   \
			{ 0x00000001, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* BasicCommissioningInfoList */                                                           \
			{ 0x00000002, ZAP_TYPE(ENUM8), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* RegulatoryConfig */                                                                     \
			{ 0x00000003, ZAP_TYPE(ENUM8), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* LocationCapability */                                                                   \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(28) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: Network Commissioning (server) */                                                          \
			{ 0x00000000, ZAP_TYPE(INT8U), 1, 0, ZAP_EMPTY_DEFAULT() }, /* MaxNetworks */                                       \
			{ 0x00000001, ZAP_TYPE(ARRAY), 12, 0, ZAP_LONG_DEFAULTS_INDEX(32) }, /* Networks */                                 \
			{ 0x00000002, ZAP_TYPE(INT8U), 1, 0, ZAP_EMPTY_DEFAULT() }, /* ScanMaxTimeSeconds */                                \
			{ 0x00000003, ZAP_TYPE(INT8U), 1, 0, ZAP_EMPTY_DEFAULT() }, /* ConnectMaxTimeSeconds */                             \
			{ 0x00000004, ZAP_TYPE(BOOLEAN), 1, ZAP_ATTRIBUTE_MASK(WRITABLE), ZAP_EMPTY_DEFAULT() }, /* InterfaceEnabled        \
														  */                        \
			{ 0x00000005, ZAP_TYPE(ENUM8), 1, 0, ZAP_EMPTY_DEFAULT() }, /* LastNetworkingStatus */                              \
			{ 0x00000006, ZAP_TYPE(OCTET_STRING), 33, 0, ZAP_EMPTY_DEFAULT() }, /* LastNetworkID */                             \
			{ 0x00000007, ZAP_TYPE(INT32U), 4, 0, ZAP_LONG_DEFAULTS_INDEX(44) }, /* LastConnectErrorValue                       \
											      */                                            \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(48) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: General Diagnostics (server) */                                                            \
			{ 0x00000000, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* NetworkInterfaces */                                                                    \
			{ 0x00000001, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RebootCount */                                                                          \
			{ 0x00000002, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* UpTime */                                                                               \
			{ 0x00000003, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TotalOperationalHours */                                                                \
			{ 0x00000004, ZAP_TYPE(ENUM8), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* BootReasons */                                                                          \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(52) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: Software Diagnostics (server) */                                                           \
			{ 0x00000001, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* CurrentHeapFree */                                                                      \
			{ 0x00000002, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* CurrentHeapUsed */                                                                      \
			{ 0x00000003, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* CurrentHeapHighWatermark */                                                             \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(56) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: Thread Network Diagnostics (server) */                                                     \
			{ 0x00000000, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* channel */                                                                              \
			{ 0x00000001, ZAP_TYPE(ENUM8), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* RoutingRole */                                                                          \
			{ 0x00000002, ZAP_TYPE(OCTET_STRING), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                      \
			  ZAP_EMPTY_DEFAULT() }, /* NetworkName */                                                                          \
			{ 0x00000003, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* PanId */                                                                                \
			{ 0x00000004, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* ExtendedPanId */                                                                        \
			{ 0x00000005, ZAP_TYPE(OCTET_STRING), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                      \
			  ZAP_EMPTY_DEFAULT() }, /* MeshLocalPrefix */                                                                      \
			{ 0x00000006, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* OverrunCount */                                                                         \
			{ 0x00000007, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* NeighborTableList */                                                                    \
			{ 0x00000008, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* RouteTableList */                                                                       \
			{ 0x00000009, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* PartitionId */                                                                          \
			{ 0x0000000A, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* weighting */                                                                            \
			{ 0x0000000B, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* DataVersion */                                                                          \
			{ 0x0000000C, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* StableDataVersion */                                                                    \
			{ 0x0000000D, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* LeaderRouterId */                                                                       \
			{ 0x0000000E, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* DetachedRoleCount */                                                                    \
			{ 0x0000000F, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* ChildRoleCount */                                                                       \
			{ 0x00000010, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RouterRoleCount */                                                                      \
			{ 0x00000011, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* LeaderRoleCount */                                                                      \
			{ 0x00000012, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* AttachAttemptCount */                                                                   \
			{ 0x00000013, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* PartitionIdChangeCount */                                                               \
			{ 0x00000014, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* BetterPartitionAttachAttemptCount */                                                    \
			{ 0x00000015, ZAP_TYPE(INT16U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* ParentChangeCount */                                                                    \
			{ 0x00000016, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxTotalCount */                                                                         \
			{ 0x00000017, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxUnicastCount */                                                                       \
			{ 0x00000018, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxBroadcastCount */                                                                     \
			{ 0x00000019, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxAckRequestedCount */                                                                  \
			{ 0x0000001A, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxAckedCount */                                                                         \
			{ 0x0000001B, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxNoAckRequestedCount */                                                                \
			{ 0x0000001C, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxDataCount */                                                                          \
			{ 0x0000001D, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxDataPollCount */                                                                      \
			{ 0x0000001E, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxBeaconCount */                                                                        \
			{ 0x0000001F, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxBeaconRequestCount */                                                                 \
			{ 0x00000020, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxOtherCount */                                                                         \
			{ 0x00000021, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxRetryCount */                                                                         \
			{ 0x00000022, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxDirectMaxRetryExpiryCount */                                                          \
			{ 0x00000023, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxIndirectMaxRetryExpiryCount */                                                        \
			{ 0x00000024, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxErrCcaCount */                                                                        \
			{ 0x00000025, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxErrAbortCount */                                                                      \
			{ 0x00000026, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* TxErrBusyChannelCount */                                                                \
			{ 0x00000027, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxTotalCount */                                                                         \
			{ 0x00000028, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxUnicastCount */                                                                       \
			{ 0x00000029, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxBroadcastCount */                                                                     \
			{ 0x0000002A, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxDataCount */                                                                          \
			{ 0x0000002B, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxDataPollCount */                                                                      \
			{ 0x0000002C, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxBeaconCount */                                                                        \
			{ 0x0000002D, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxBeaconRequestCount */                                                                 \
			{ 0x0000002E, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxOtherCount */                                                                         \
			{ 0x0000002F, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxAddressFilteredCount */                                                               \
			{ 0x00000030, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxDestAddrFilteredCount */                                                              \
			{ 0x00000031, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxDuplicatedCount */                                                                    \
			{ 0x00000032, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrNoFrameCount */                                                                    \
			{ 0x00000033, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrUnknownNeighborCount */                                                            \
			{ 0x00000034, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrInvalidSrcAddrCount */                                                             \
			{ 0x00000035, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrSecCount */                                                                        \
			{ 0x00000036, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrFcsCount */                                                                        \
			{ 0x00000037, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* RxErrOtherCount */                                                                      \
			{ 0x00000038, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* ActiveTimestamp */                                                                      \
			{ 0x00000039, ZAP_TYPE(INT64U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* PendingTimestamp */                                                                     \
			{ 0x0000003A, ZAP_TYPE(INT32U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                            \
			  ZAP_EMPTY_DEFAULT() }, /* delay */                                                                                \
			{ 0x0000003B, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* SecurityPolicy */                                                                       \
			{ 0x0000003C, ZAP_TYPE(OCTET_STRING), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                      \
			  ZAP_EMPTY_DEFAULT() }, /* ChannelMask */                                                                          \
			{ 0x0000003D, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* OperationalDatasetComponents */                                                         \
			{ 0x0000003E, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* ActiveNetworkFaultsList */                                                              \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: AdministratorCommissioning (server) */                                                     \
			{ 0x00000000, ZAP_TYPE(INT8U), 1, 0, ZAP_EMPTY_DEFAULT() }, /* WindowStatus */                                      \
			{ 0x00000001, ZAP_TYPE(FABRIC_IDX), 1, 0, ZAP_EMPTY_DEFAULT() }, /* AdminFabricIndex */                             \
			{ 0x00000002, ZAP_TYPE(INT16U), 2, 0, ZAP_EMPTY_DEFAULT() }, /* AdminVendorId */                                    \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(60) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(1) }, /* ClusterRevision */                                \
                                                                                                                                            \
			/* Endpoint: 0, Cluster: Operational Credentials (server) */                                                        \
			{ 0x00000000, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* NOCs */                                                                                 \
			{ 0x00000001, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* fabrics list */                                                                         \
			{ 0x00000002, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* SupportedFabrics */                                                                     \
			{ 0x00000003, ZAP_TYPE(INT8U), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* CommissionedFabrics */                                                                  \
			{ 0x00000004, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* TrustedRootCertificates */                                                              \
			{ 0x00000005, ZAP_TYPE(FABRIC_IDX), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                        \
			  ZAP_EMPTY_DEFAULT() }, /* CurrentFabricIndex */                                                                   \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(64) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(0x0001) }, /* ClusterRevision */                           \
                                                                                                                                            \
			/* Endpoint: 1, Cluster: On/Off (server) */                                                                         \
			{ 0x00000000, ZAP_TYPE(BOOLEAN), 1, 0, ZAP_SIMPLE_DEFAULT(0x00) }, /* OnOff */                                      \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(68) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(2) }, /* ClusterRevision */                                \
                                                                                                                                            \
			/* Endpoint: 1, Cluster: Descriptor (server) */                                                                     \
			{ 0x00000000, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* device list */                                                                          \
			{ 0x00000001, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* server list */                                                                          \
			{ 0x00000002, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* client list */                                                                          \
			{ 0x00000003, ZAP_TYPE(ARRAY), 0, ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE),                                             \
			  ZAP_EMPTY_DEFAULT() }, /* parts list */                                                                           \
			{ 0x0000FFFC, ZAP_TYPE(BITMAP32), 4, 0, ZAP_LONG_DEFAULTS_INDEX(72) }, /* FeatureMap */                             \
			{ 0x0000FFFD, ZAP_TYPE(INT16U), 2, 0, ZAP_SIMPLE_DEFAULT(1) }, /* ClusterRevision */                                \
	}

// This is an array of EmberAfCluster structures.
#define ZAP_ATTRIBUTE_INDEX(index) ((EmberAfAttributeMetadata *)(&generatedAttributes[index]))

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                      \
	const EmberAfGenericClusterFunction chipFuncArrayBasicServer[] = {                                             \
		(EmberAfGenericClusterFunction)emberAfBasicClusterServerInitCallback,                                  \
	};                                                                                                             \
	const EmberAfGenericClusterFunction chipFuncArrayOnOffServer[] = {                                             \
		(EmberAfGenericClusterFunction)emberAfOnOffClusterServerInitCallback,                                  \
	};

#define ZAP_CLUSTER_MASK(mask) CLUSTER_MASK_##mask
#define GENERATED_CLUSTER_COUNT 13
#define GENERATED_CLUSTERS                                                                                                             \
	{                                                                                                                              \
		{ 0x0000001D, ZAP_ATTRIBUTE_INDEX(0), 6, 6, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint: 0, Cluster:                 \
												 Descriptor (server)                   \
											       */                                      \
			{ 0x00000028,                                                                                                  \
			  ZAP_ATTRIBUTE_INDEX(6),                                                                                      \
			  13,                                                                                                          \
			  250,                                                                                                         \
			  ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION),                                                  \
			  chipFuncArrayBasicServer }, /* Endpoint: 0, Cluster: Basic (server) */                                       \
			{ 0x00000029, ZAP_ATTRIBUTE_INDEX(19), 2, 6, ZAP_CLUSTER_MASK(CLIENT), NULL }, /* Endpoint: 0,                 \
													  Cluster: OTA                 \
													  Software                     \
													  Update                       \
													  Provider                     \
													  (client) */                  \
			{ 0x0000002A, ZAP_ATTRIBUTE_INDEX(21), 6, 9, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint: 0,                 \
													  Cluster: OTA                 \
													  Software                     \
													  Update                       \
													  Requestor                    \
													  (server) */                  \
			{ 0x00000030, ZAP_ATTRIBUTE_INDEX(27), 6, 14, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                   \
													   0, Cluster:                 \
													   General                     \
													   Commissioning               \
													   (server) */                 \
			{ 0x00000031, ZAP_ATTRIBUTE_INDEX(33), 10, 60, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                  \
													    0,                         \
													    Cluster:                   \
													    Network                    \
													    Commissioning              \
													    (server)                   \
													  */                           \
			{ 0x00000033, ZAP_ATTRIBUTE_INDEX(43), 7, 6, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint: 0,                 \
													  Cluster:                     \
													  General                      \
													  Diagnostics                  \
													  (server) */                  \
			{ 0x00000034, ZAP_ATTRIBUTE_INDEX(50), 5, 6, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint: 0,                 \
													  Cluster:                     \
													  Software                     \
													  Diagnostics                  \
													  (server) */                  \
			{ 0x00000035, ZAP_ATTRIBUTE_INDEX(55), 64, 2, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                   \
													   0, Cluster:                 \
													   Thread                      \
													   Network                     \
													   Diagnostics                 \
													   (server) */                 \
			{ 0x0000003C, ZAP_ATTRIBUTE_INDEX(119), 5, 10, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                  \
													    0,                         \
													    Cluster:                   \
													    AdministratorCommissioning \
													    (server)                   \
													  */                           \
			{ 0x0000003E, ZAP_ATTRIBUTE_INDEX(124), 8, 6, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                   \
													   0, Cluster:                 \
													   Operational                 \
													   Credentials                 \
													   (server) */                 \
			{ 0x00000006,                                                                                                  \
			  ZAP_ATTRIBUTE_INDEX(132),                                                                                    \
			  3,                                                                                                           \
			  7,                                                                                                           \
			  ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION),                                                  \
			  chipFuncArrayOnOffServer }, /* Endpoint: 1, Cluster: On/Off (server) */                                      \
			{ 0x0000001D, ZAP_ATTRIBUTE_INDEX(135), 6, 6, ZAP_CLUSTER_MASK(SERVER), NULL }, /* Endpoint:                   \
													   1, Cluster:                 \
													   Descriptor                  \
													   (server) */                 \
	}

#define ZAP_CLUSTER_INDEX(index) ((EmberAfCluster *)(&generatedClusters[index]))

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES                                                                                       \
	{                                                                                                              \
		{ ZAP_CLUSTER_INDEX(0), 11, 375 }, { ZAP_CLUSTER_INDEX(11), 2, 13 },                                   \
	}

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (401)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (250)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (388)

// Number of fixed endpoints
#define FIXED_ENDPOINT_COUNT (2)

// Array of endpoints that are supported, the data inside
// the array is the endpoint number.
#define FIXED_ENDPOINT_ARRAY                                                                                           \
	{                                                                                                              \
		0x0000, 0x0001                                                                                         \
	}

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                              \
	{                                                                                                              \
		0x0103, 0x0103                                                                                         \
	}

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                               \
	{                                                                                                              \
		22, 10                                                                                                 \
	}

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                          \
	{                                                                                                              \
		1, 0                                                                                                   \
	}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                           \
	{                                                                                                              \
		0, 1                                                                                                   \
	}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                 \
	{                                                                                                              \
		0, 0                                                                                                   \
	}
