/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_RESULT_PB_H_INCLUDED
#define PB_RESULT_PB_H_INCLUDED
#include <pb.h>
#include "common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Single Wi-Fi scan result. */
typedef struct _ScanRecord { 
    bool has_wifi;
    WifiInfo wifi;
    bool has_rssi;
    int32_t rssi;
} ScanRecord;

/* This type is returned by the Data Out characteristic using notifications. 
Scan records are returned when WiFi scanning is enabled.
WiFi state is notified whenever connection state changes, or during provisioning. */
typedef struct _Result { 
    bool has_scan_record;
    ScanRecord scan_record;
    bool has_state;
    ConnectionState state;
    /* The failure reason is set when the state is CONNECTION_FAILED. */
    bool has_reason;
    ConnectionFailureReason reason;
} Result;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ScanRecord_init_default                  {false, WifiInfo_init_default, false, 0}
#define Result_init_default                      {false, ScanRecord_init_default, false, _ConnectionState_MIN, false, _ConnectionFailureReason_MIN}
#define ScanRecord_init_zero                     {false, WifiInfo_init_zero, false, 0}
#define Result_init_zero                         {false, ScanRecord_init_zero, false, _ConnectionState_MIN, false, _ConnectionFailureReason_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define ScanRecord_wifi_tag                      1
#define ScanRecord_rssi_tag                      2
#define Result_scan_record_tag                   1
#define Result_state_tag                         2
#define Result_reason_tag                        3

/* Struct field encoding specification for nanopb */
#define ScanRecord_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wifi,              1) \
X(a, STATIC,   OPTIONAL, INT32,    rssi,              2)
#define ScanRecord_CALLBACK NULL
#define ScanRecord_DEFAULT NULL
#define ScanRecord_wifi_MSGTYPE WifiInfo

#define Result_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  scan_record,       1) \
X(a, STATIC,   OPTIONAL, UENUM,    state,             2) \
X(a, STATIC,   OPTIONAL, UENUM,    reason,            3)
#define Result_CALLBACK NULL
#define Result_DEFAULT NULL
#define Result_scan_record_MSGTYPE ScanRecord

extern const pb_msgdesc_t ScanRecord_msg;
extern const pb_msgdesc_t Result_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ScanRecord_fields &ScanRecord_msg
#define Result_fields &Result_msg

/* Maximum encoded size of messages (where known) */
#define Result_size                              71
#define ScanRecord_size                          65

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
