/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_RESPONSE_PB_H_INCLUDED
#define PB_RESPONSE_PB_H_INCLUDED
#include <pb.h>
#include "common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(4) ConnectionInfo_ip4_addr_t;
/* Information about the Wi-Fi connected state. */
typedef struct _ConnectionInfo { 
    bool has_ip4_addr;
    ConnectionInfo_ip4_addr_t ip4_addr;
} ConnectionInfo;

/* Response payload for GET_STATUS request. */
typedef struct _DeviceStatus { 
    /* The current state of the Wifi connection. */
    bool has_state;
    ConnectionState state;
    /* The network information if provisioned to a network.
 This can be set even if connection failed. */
    bool has_provisioning_info;
    WifiInfo provisioning_info;
    /* The connection info is set when the device is connected
 to the network and received the IP. */
    bool has_connection_info;
    ConnectionInfo connection_info;
    /* Set if the device is scanning. 
 The period_ms contains remaining scanning period. */
    bool has_scan_info;
    ScanParams scan_info;
} DeviceStatus;

/* A response type which is sent back from the device. */
typedef struct _Response { 
    /* Request op code. */
    bool has_request_op_code;
    OpCode request_op_code;
    /* Status of the operation. */
    bool has_status;
    Status status;
    /* The device status is set as a response to GET_STATUS. */
    bool has_device_status;
    DeviceStatus device_status;
} Response;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ConnectionInfo_init_default              {false, {0, {0}}}
#define DeviceStatus_init_default                {false, _ConnectionState_MIN, false, WifiInfo_init_default, false, ConnectionInfo_init_default, false, ScanParams_init_default}
#define Response_init_default                    {false, _OpCode_MIN, false, _Status_MIN, false, DeviceStatus_init_default}
#define ConnectionInfo_init_zero                 {false, {0, {0}}}
#define DeviceStatus_init_zero                   {false, _ConnectionState_MIN, false, WifiInfo_init_zero, false, ConnectionInfo_init_zero, false, ScanParams_init_zero}
#define Response_init_zero                       {false, _OpCode_MIN, false, _Status_MIN, false, DeviceStatus_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define ConnectionInfo_ip4_addr_tag              1
#define DeviceStatus_state_tag                   1
#define DeviceStatus_provisioning_info_tag       10
#define DeviceStatus_connection_info_tag         11
#define DeviceStatus_scan_info_tag               12
#define Response_request_op_code_tag             1
#define Response_status_tag                      2
#define Response_device_status_tag               10

/* Struct field encoding specification for nanopb */
#define ConnectionInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BYTES,    ip4_addr,          1)
#define ConnectionInfo_CALLBACK NULL
#define ConnectionInfo_DEFAULT NULL

#define DeviceStatus_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    state,             1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  provisioning_info,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  connection_info,  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  scan_info,        12)
#define DeviceStatus_CALLBACK NULL
#define DeviceStatus_DEFAULT NULL
#define DeviceStatus_provisioning_info_MSGTYPE WifiInfo
#define DeviceStatus_connection_info_MSGTYPE ConnectionInfo
#define DeviceStatus_scan_info_MSGTYPE ScanParams

#define Response_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    request_op_code,   1) \
X(a, STATIC,   OPTIONAL, UENUM,    status,            2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device_status,    10)
#define Response_CALLBACK NULL
#define Response_DEFAULT NULL
#define Response_device_status_MSGTYPE DeviceStatus

extern const pb_msgdesc_t ConnectionInfo_msg;
extern const pb_msgdesc_t DeviceStatus_msg;
extern const pb_msgdesc_t Response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ConnectionInfo_fields &ConnectionInfo_msg
#define DeviceStatus_fields &DeviceStatus_msg
#define Response_fields &Response_msg

/* Maximum encoded size of messages (where known) */
#define ConnectionInfo_size                      6
#define DeviceStatus_size                        82
#define Response_size                            88

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
