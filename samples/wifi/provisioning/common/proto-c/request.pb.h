/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_REQUEST_PB_H_INCLUDED
#define PB_REQUEST_PB_H_INCLUDED
#include <pb.h>
#include "common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(64) WifiConfig_passphrase_t;
/* Wi-Fi provisioning configuration for SET_CONFIG request. */
typedef struct _WifiConfig { 
    bool has_wifi;
    WifiInfo wifi;
    bool has_passphrase;
    WifiConfig_passphrase_t passphrase; /* Default: empty string */
    /* Should the Wi-Fi config be kept only in RAM and be removed after device reboot. */
    bool has_volatileMemory;
    bool volatileMemory; /* Default: false */
} WifiConfig;

/* The request type, sent to the device. */
typedef struct _Request { 
    /* The op_code has to be optional, as new op codes may be added in the future.
 They would fail to be decoded in earlier versions, causing am error.
 With the optional modifier, they will be decoded as null. */
    bool has_op_code;
    OpCode op_code;
    /* The parameter for START_SCAN request. */
    bool has_scan_params;
    ScanParams scan_params;
    /* The parameter for SET_CONFIG request. */
    bool has_config;
    WifiConfig config;
} Request;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define WifiConfig_init_default                  {false, WifiInfo_init_default, false, {0, {0}}, false, 0}
#define Request_init_default                     {false, _OpCode_MIN, false, ScanParams_init_default, false, WifiConfig_init_default}
#define WifiConfig_init_zero                     {false, WifiInfo_init_zero, false, {0, {0}}, false, 0}
#define Request_init_zero                        {false, _OpCode_MIN, false, ScanParams_init_zero, false, WifiConfig_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define WifiConfig_wifi_tag                      1
#define WifiConfig_passphrase_tag                2
#define WifiConfig_volatileMemory_tag            3
#define Request_op_code_tag                      1
#define Request_scan_params_tag                  10
#define Request_config_tag                       11

/* Struct field encoding specification for nanopb */
#define WifiConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wifi,              1) \
X(a, STATIC,   OPTIONAL, BYTES,    passphrase,        2) \
X(a, STATIC,   OPTIONAL, BOOL,     volatileMemory,    3)
#define WifiConfig_CALLBACK NULL
#define WifiConfig_DEFAULT NULL
#define WifiConfig_wifi_MSGTYPE WifiInfo

#define Request_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    op_code,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  scan_params,      10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  config,           11)
#define Request_CALLBACK NULL
#define Request_DEFAULT NULL
#define Request_scan_params_MSGTYPE ScanParams
#define Request_config_MSGTYPE WifiConfig

extern const pb_msgdesc_t WifiConfig_msg;
extern const pb_msgdesc_t Request_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define WifiConfig_fields &WifiConfig_msg
#define Request_fields &Request_msg

/* Maximum encoded size of messages (where known) */
#define Request_size                             144
#define WifiConfig_size                          122

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
