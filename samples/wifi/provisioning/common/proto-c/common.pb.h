/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_COMMON_PB_H_INCLUDED
#define PB_COMMON_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* The Op Code for requests. */
typedef enum _OpCode { 
    /* Cannot be used in request.
 In the response it means that decoding the Op Code
 in the request has failed. */
    OpCode_RESERVED = 0, 
    /* Returns the device status.
 
 Request parameters:
  - none
 Response parameters:
  - DeviceStatus */
    OpCode_GET_STATUS = 1, 
    /* Starts Wifi scan.

 Request parameters:
  - ScanParams
 Response parameters:
  - none */
    OpCode_START_SCAN = 2, 
    /* Manually stops Wifi scan.

 Request parameters:
  - none
 Response parameters:
  - none */
    OpCode_STOP_SCAN = 3, 
    /* Used to provision the Host to the given WiFi network.

 Request parameters:
  - WifiConfig
 Response parameters:
  - none */
    OpCode_SET_CONFIG = 4, 
    /* Erases previously saved configuration.

 Request parameters:
  - none
 Response parameters:
  - none */
    OpCode_FORGET_CONFIG = 5 
} OpCode;

/* Response status code. */
typedef enum _Status { 
    /* Returned when the request was successfully processed. */
    Status_SUCCESS = 0, 
    /* Returned when the request cannot be processed due to invalid arguments.
 For example, if the required argument is missing. */
    Status_INVALID_ARGUMENT = 1, 
    /* Returned when failed to decode the request. */
    Status_INVALID_PROTO = 2, 
    /* Returned in case of internal error. Hopefully never. */
    Status_INTERNAL_ERROR = 3 
} Status;

/* The state of Wi-Fi station. */
typedef enum _ConnectionState { 
    ConnectionState_DISCONNECTED = 0, 
    ConnectionState_AUTHENTICATION = 1, 
    ConnectionState_ASSOCIATION = 2, 
    ConnectionState_OBTAINING_IP = 3, 
    ConnectionState_CONNECTED = 4, 
    ConnectionState_CONNECTION_FAILED = 5 
} ConnectionState;

/* Connection failure reason. */
typedef enum _ConnectionFailureReason { 
    /* Authentication error. */
    ConnectionFailureReason_AUTH_ERROR = 0, 
    /* The specified network could not be find. */
    ConnectionFailureReason_NETWORK_NOT_FOUND = 1, 
    /* Timeout occurred. */
    ConnectionFailureReason_TIMEOUT = 2, 
    /* Could not obtain IP from provided provisioning information. */
    ConnectionFailureReason_FAIL_IP = 3, 
    /* Could not connect to provisioned network. */
    ConnectionFailureReason_FAIL_CONN = 4 
} ConnectionFailureReason;

/* Wi-Fi Band. */
typedef enum _Band { 
    Band_BAND_ANY = 0, 
    Band_BAND_2_4_GH = 1, 
    Band_BAND_5_GH = 2 
} Band;

/* Wi-Fi Authentication Mode. */
typedef enum _AuthMode { 
    AuthMode_OPEN = 0, 
    AuthMode_WEP = 1, 
    AuthMode_WPA_PSK = 2, 
    AuthMode_WPA2_PSK = 3, 
    AuthMode_WPA_WPA2_PSK = 4, 
    AuthMode_WPA2_ENTERPRISE = 5, 
    AuthMode_WPA3_PSK = 6 /* Note: More modes can be added in the future. */
} AuthMode;

/* Struct definitions */
/* Scanning parameters. */
typedef struct _ScanParams { 
    bool has_band;
    Band band;
    bool has_passive;
    bool passive;
    bool has_period_ms;
    uint32_t period_ms; /* 0 - no timeout */
    bool has_group_channels;
    uint32_t group_channels;
} ScanParams;

typedef PB_BYTES_ARRAY_T(32) WifiInfo_ssid_t;
typedef PB_BYTES_ARRAY_T(6) WifiInfo_bssid_t;
/* Wi-Fi details. */
typedef struct _WifiInfo { 
    WifiInfo_ssid_t ssid;
    WifiInfo_bssid_t bssid;
    bool has_band;
    Band band;
    uint32_t channel;
    bool has_auth;
    AuthMode auth;
} WifiInfo;


/* Helper constants for enums */
#define _OpCode_MIN OpCode_RESERVED
#define _OpCode_MAX OpCode_FORGET_CONFIG
#define _OpCode_ARRAYSIZE ((OpCode)(OpCode_FORGET_CONFIG+1))

#define _Status_MIN Status_SUCCESS
#define _Status_MAX Status_INTERNAL_ERROR
#define _Status_ARRAYSIZE ((Status)(Status_INTERNAL_ERROR+1))

#define _ConnectionState_MIN ConnectionState_DISCONNECTED
#define _ConnectionState_MAX ConnectionState_CONNECTION_FAILED
#define _ConnectionState_ARRAYSIZE ((ConnectionState)(ConnectionState_CONNECTION_FAILED+1))

#define _ConnectionFailureReason_MIN ConnectionFailureReason_AUTH_ERROR
#define _ConnectionFailureReason_MAX ConnectionFailureReason_FAIL_CONN
#define _ConnectionFailureReason_ARRAYSIZE ((ConnectionFailureReason)(ConnectionFailureReason_FAIL_CONN+1))

#define _Band_MIN Band_BAND_ANY
#define _Band_MAX Band_BAND_5_GH
#define _Band_ARRAYSIZE ((Band)(Band_BAND_5_GH+1))

#define _AuthMode_MIN AuthMode_OPEN
#define _AuthMode_MAX AuthMode_WPA3_PSK
#define _AuthMode_ARRAYSIZE ((AuthMode)(AuthMode_WPA3_PSK+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ScanParams_init_default                  {false, Band_BAND_ANY, false, false, false, 0u, false, 0}
#define WifiInfo_init_default                    {{0, {0}}, {0, {0}}, false, _Band_MIN, 0, false, _AuthMode_MIN}
#define ScanParams_init_zero                     {false, _Band_MIN, false, 0, false, 0, false, 0}
#define WifiInfo_init_zero                       {{0, {0}}, {0, {0}}, false, _Band_MIN, 0, false, _AuthMode_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define ScanParams_band_tag                      1
#define ScanParams_passive_tag                   2
#define ScanParams_period_ms_tag                 3
#define ScanParams_group_channels_tag            4
#define WifiInfo_ssid_tag                        1
#define WifiInfo_bssid_tag                       2
#define WifiInfo_band_tag                        3
#define WifiInfo_channel_tag                     4
#define WifiInfo_auth_tag                        5

/* Struct field encoding specification for nanopb */
#define ScanParams_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    band,              1) \
X(a, STATIC,   OPTIONAL, BOOL,     passive,           2) \
X(a, STATIC,   OPTIONAL, UINT32,   period_ms,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   group_channels,    4)
#define ScanParams_CALLBACK NULL
#define ScanParams_DEFAULT (const pb_byte_t*)"\x10\x00\x18\x00\x00"

#define WifiInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    ssid,              1) \
X(a, STATIC,   REQUIRED, BYTES,    bssid,             2) \
X(a, STATIC,   OPTIONAL, UENUM,    band,              3) \
X(a, STATIC,   REQUIRED, UINT32,   channel,           4) \
X(a, STATIC,   OPTIONAL, UENUM,    auth,              5)
#define WifiInfo_CALLBACK NULL
#define WifiInfo_DEFAULT NULL

extern const pb_msgdesc_t ScanParams_msg;
extern const pb_msgdesc_t WifiInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ScanParams_fields &ScanParams_msg
#define WifiInfo_fields &WifiInfo_msg

/* Maximum encoded size of messages (where known) */
#define ScanParams_size                          16
#define WifiInfo_size                            52

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
