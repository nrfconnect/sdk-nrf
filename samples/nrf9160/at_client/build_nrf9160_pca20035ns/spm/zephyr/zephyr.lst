
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000ac8 	.word	0x20000ac8
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&mutex, *(u32_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001379 	.word	0x00001379
   8:	000043b9 	.word	0x000043b9
   c:	00001199 	.word	0x00001199
		if (fdtable[fd].obj == NULL) {
  10:	00001199 	.word	0x00001199
  14:	00001199 	.word	0x00001199
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001199 	.word	0x00001199
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001199 	.word	0x00001199
	errno = ENFILE;
  20:	00001199 	.word	0x00001199
	return -1;
  24:	00001199 	.word	0x00001199
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00001199 	.word	0x00001199
  2c:	00001161 	.word	0x00001161
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001199 	.word	0x00001199
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001199 	.word	0x00001199
  38:	0000110d 	.word	0x0000110d
  3c:	0000425f 	.word	0x0000425f

00000040 <_irq_vector_table>:
  40:	000011c5 000011c5 000011c5 000011c5     ................
  50:	000011c5 000011c5 000011c5 000011c5     ................
  60:	000011c5 000011c5 000011c5 000011c5     ................
  70:	000011c5 000011c5 000011c5 000011c5     ................
  80:	000011c5 000011c5 000011c5 000011c5     ................
  90:	000011c5 000011c5 000011c5 000011c5     ................
  a0:	000011c5 000011c5 000011c5 000011c5     ................
  b0:	000011c5 000011c5 000011c5 000011c5     ................
  c0:	000011c5 000011c5 000011c5 000011c5     ................
  d0:	000011c5 000011c5 000011c5 000011c5     ................
  e0:	000011c5 000011c5 000011c5 000011c5     ................
  f0:	000011c5 000011c5 000011c5 000011c5     ................
 100:	000011c5 000011c5 000011c5 000011c5     ................
 110:	000011c5 000011c5 000011c5 000011c5     ................
 120:	000011c5 000011c5 000011c5 000011c5     ................
 130:	000011c5 000011c5 000011c5 000011c5     ................
 140:	000011c5                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b01 00008000     ...(L....[......
 210:	00000001 00000000 20001408 00001c59     ........... Y...

Disassembly of section _TEXT_SECTION_NAME_2:

00000220 <__aeabi_ldivmod>:
     220:	b97b      	cbnz	r3, 242 <__aeabi_ldivmod+0x22>
     222:	b972      	cbnz	r2, 242 <__aeabi_ldivmod+0x22>
     224:	2900      	cmp	r1, #0
     226:	bfbe      	ittt	lt
     228:	2000      	movlt	r0, #0
     22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     22e:	e006      	blt.n	23e <__aeabi_ldivmod+0x1e>
     230:	bf08      	it	eq
     232:	2800      	cmpeq	r0, #0
     234:	bf1c      	itt	ne
     236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     23a:	f04f 30ff 	movne.w	r0, #4294967295
     23e:	f000 b9af 	b.w	5a0 <__aeabi_idiv0>
     242:	f1ad 0c08 	sub.w	ip, sp, #8
     246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     24a:	2900      	cmp	r1, #0
     24c:	db09      	blt.n	262 <__aeabi_ldivmod+0x42>
     24e:	2b00      	cmp	r3, #0
     250:	db1a      	blt.n	288 <__aeabi_ldivmod+0x68>
     252:	f000 f835 	bl	2c0 <__udivmoddi4>
     256:	f8dd e004 	ldr.w	lr, [sp, #4]
     25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     25e:	b004      	add	sp, #16
     260:	4770      	bx	lr
     262:	4240      	negs	r0, r0
     264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     268:	2b00      	cmp	r3, #0
     26a:	db1b      	blt.n	2a4 <__aeabi_ldivmod+0x84>
     26c:	f000 f828 	bl	2c0 <__udivmoddi4>
     270:	f8dd e004 	ldr.w	lr, [sp, #4]
     274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     278:	b004      	add	sp, #16
     27a:	4240      	negs	r0, r0
     27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     280:	4252      	negs	r2, r2
     282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     286:	4770      	bx	lr
     288:	4252      	negs	r2, r2
     28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     28e:	f000 f817 	bl	2c0 <__udivmoddi4>
     292:	f8dd e004 	ldr.w	lr, [sp, #4]
     296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     29a:	b004      	add	sp, #16
     29c:	4240      	negs	r0, r0
     29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2a2:	4770      	bx	lr
     2a4:	4252      	negs	r2, r2
     2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2aa:	f000 f809 	bl	2c0 <__udivmoddi4>
     2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
     2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2b6:	b004      	add	sp, #16
     2b8:	4252      	negs	r2, r2
     2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	9d08      	ldr	r5, [sp, #32]
     2c8:	4604      	mov	r4, r0
     2ca:	468a      	mov	sl, r1
     2cc:	2b00      	cmp	r3, #0
     2ce:	d14a      	bne.n	366 <__udivmoddi4+0xa6>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d962      	bls.n	39c <__udivmoddi4+0xdc>
     2d6:	fab2 f682 	clz	r6, r2
     2da:	b14e      	cbz	r6, 2f0 <__udivmoddi4+0x30>
     2dc:	f1c6 0e20 	rsb	lr, r6, #32
     2e0:	fa01 f306 	lsl.w	r3, r1, r6
     2e4:	40b7      	lsls	r7, r6
     2e6:	40b4      	lsls	r4, r6
     2e8:	fa20 fe0e 	lsr.w	lr, r0, lr
     2ec:	ea4e 0a03 	orr.w	sl, lr, r3
     2f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2f4:	0c23      	lsrs	r3, r4, #16
     2f6:	fa1f f987 	uxth.w	r9, r7
     2fa:	fbba fef8 	udiv	lr, sl, r8
     2fe:	fb08 aa1e 	mls	sl, r8, lr, sl
     302:	fb0e f209 	mul.w	r2, lr, r9
     306:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     30a:	429a      	cmp	r2, r3
     30c:	d90b      	bls.n	326 <__udivmoddi4+0x66>
     30e:	18fb      	adds	r3, r7, r3
     310:	f10e 31ff 	add.w	r1, lr, #4294967295
     314:	bf2c      	ite	cs
     316:	2001      	movcs	r0, #1
     318:	2000      	movcc	r0, #0
     31a:	429a      	cmp	r2, r3
     31c:	d902      	bls.n	324 <__udivmoddi4+0x64>
     31e:	2800      	cmp	r0, #0
     320:	f000 812a 	beq.w	578 <CONFIG_NET_TX_STACK_SIZE+0xc8>
     324:	468e      	mov	lr, r1
     326:	1a9a      	subs	r2, r3, r2
     328:	b2a3      	uxth	r3, r4
     32a:	fbb2 f0f8 	udiv	r0, r2, r8
     32e:	fb08 2210 	mls	r2, r8, r0, r2
     332:	fb00 f909 	mul.w	r9, r0, r9
     336:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     33a:	45a1      	cmp	r9, r4
     33c:	d907      	bls.n	34e <__udivmoddi4+0x8e>
     33e:	193c      	adds	r4, r7, r4
     340:	f100 33ff 	add.w	r3, r0, #4294967295
     344:	d202      	bcs.n	34c <__udivmoddi4+0x8c>
     346:	45a1      	cmp	r9, r4
     348:	f200 8110 	bhi.w	56c <CONFIG_NET_TX_STACK_SIZE+0xbc>
     34c:	4618      	mov	r0, r3
     34e:	eba4 0409 	sub.w	r4, r4, r9
     352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     356:	2100      	movs	r1, #0
     358:	b11d      	cbz	r5, 362 <__udivmoddi4+0xa2>
     35a:	40f4      	lsrs	r4, r6
     35c:	2300      	movs	r3, #0
     35e:	e9c5 4300 	strd	r4, r3, [r5]
     362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     366:	428b      	cmp	r3, r1
     368:	d908      	bls.n	37c <__udivmoddi4+0xbc>
     36a:	2d00      	cmp	r5, #0
     36c:	f000 80f2 	beq.w	554 <CONFIG_NET_TX_STACK_SIZE+0xa4>
     370:	2100      	movs	r1, #0
     372:	e9c5 0c00 	strd	r0, ip, [r5]
     376:	4608      	mov	r0, r1
     378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     37c:	fab3 f183 	clz	r1, r3
     380:	2900      	cmp	r1, #0
     382:	d14e      	bne.n	422 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x22>
     384:	4563      	cmp	r3, ip
     386:	f0c0 80e8 	bcc.w	55a <CONFIG_NET_TX_STACK_SIZE+0xaa>
     38a:	4282      	cmp	r2, r0
     38c:	f240 80e5 	bls.w	55a <CONFIG_NET_TX_STACK_SIZE+0xaa>
     390:	4608      	mov	r0, r1
     392:	2d00      	cmp	r5, #0
     394:	d0e5      	beq.n	362 <__udivmoddi4+0xa2>
     396:	e9c5 4a00 	strd	r4, sl, [r5]
     39a:	e7e2      	b.n	362 <__udivmoddi4+0xa2>
     39c:	b902      	cbnz	r2, 3a0 <__udivmoddi4+0xe0>
     39e:	deff      	udf	#255	; 0xff
     3a0:	fab2 f682 	clz	r6, r2
     3a4:	2e00      	cmp	r6, #0
     3a6:	f040 8099 	bne.w	4dc <CONFIG_NET_TX_STACK_SIZE+0x2c>
     3aa:	1a8b      	subs	r3, r1, r2
     3ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     3b0:	fa1f f882 	uxth.w	r8, r2
     3b4:	2101      	movs	r1, #1
     3b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     3ba:	fbb3 f2fe 	udiv	r2, r3, lr
     3be:	fb0e 3012 	mls	r0, lr, r2, r3
     3c2:	fb08 f902 	mul.w	r9, r8, r2
     3c6:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     3ca:	45e1      	cmp	r9, ip
     3cc:	d908      	bls.n	3e0 <__udivmoddi4+0x120>
     3ce:	eb17 0c0c 	adds.w	ip, r7, ip
     3d2:	f102 33ff 	add.w	r3, r2, #4294967295
     3d6:	d202      	bcs.n	3de <__udivmoddi4+0x11e>
     3d8:	45e1      	cmp	r9, ip
     3da:	f200 80ca 	bhi.w	572 <CONFIG_NET_TX_STACK_SIZE+0xc2>
     3de:	461a      	mov	r2, r3
     3e0:	ebac 0c09 	sub.w	ip, ip, r9
     3e4:	b2a3      	uxth	r3, r4
     3e6:	fbbc f0fe 	udiv	r0, ip, lr
     3ea:	fb0e cc10 	mls	ip, lr, r0, ip
     3ee:	fb08 f800 	mul.w	r8, r8, r0
     3f2:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     3f6:	45a0      	cmp	r8, r4
     3f8:	d90e      	bls.n	418 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x18>
     3fa:	193c      	adds	r4, r7, r4
     3fc:	f100 33ff 	add.w	r3, r0, #4294967295
     400:	bf2c      	ite	cs
     402:	f04f 0c01 	movcs.w	ip, #1
     406:	f04f 0c00 	movcc.w	ip, #0
     40a:	45a0      	cmp	r8, r4
     40c:	d903      	bls.n	416 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x16>
     40e:	f1bc 0f00 	cmp.w	ip, #0
     412:	f000 80a8 	beq.w	566 <CONFIG_NET_TX_STACK_SIZE+0xb6>
     416:	4618      	mov	r0, r3
     418:	eba4 0408 	sub.w	r4, r4, r8
     41c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     420:	e79a      	b.n	358 <__udivmoddi4+0x98>
     422:	f1c1 0420 	rsb	r4, r1, #32
     426:	408b      	lsls	r3, r1
     428:	fa02 fe01 	lsl.w	lr, r2, r1
     42c:	fa0c f601 	lsl.w	r6, ip, r1
     430:	40e2      	lsrs	r2, r4
     432:	fa20 f704 	lsr.w	r7, r0, r4
     436:	fa2c fc04 	lsr.w	ip, ip, r4
     43a:	fa00 f801 	lsl.w	r8, r0, r1
     43e:	4313      	orrs	r3, r2
     440:	433e      	orrs	r6, r7
     442:	0c1f      	lsrs	r7, r3, #16
     444:	0c32      	lsrs	r2, r6, #16
     446:	fa1f f983 	uxth.w	r9, r3
     44a:	fbbc f0f7 	udiv	r0, ip, r7
     44e:	fb07 cc10 	mls	ip, r7, r0, ip
     452:	fb00 fa09 	mul.w	sl, r0, r9
     456:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     45a:	45e2      	cmp	sl, ip
     45c:	d908      	bls.n	470 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x70>
     45e:	eb13 0c0c 	adds.w	ip, r3, ip
     462:	f100 32ff 	add.w	r2, r0, #4294967295
     466:	d202      	bcs.n	46e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x6e>
     468:	45e2      	cmp	sl, ip
     46a:	f200 8089 	bhi.w	580 <CONFIG_NET_TX_STACK_SIZE+0xd0>
     46e:	4610      	mov	r0, r2
     470:	ebac 0c0a 	sub.w	ip, ip, sl
     474:	b2b6      	uxth	r6, r6
     476:	fbbc faf7 	udiv	sl, ip, r7
     47a:	fb07 cc1a 	mls	ip, r7, sl, ip
     47e:	fb0a f909 	mul.w	r9, sl, r9
     482:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     486:	4591      	cmp	r9, r2
     488:	d906      	bls.n	498 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x98>
     48a:	189a      	adds	r2, r3, r2
     48c:	f10a 36ff 	add.w	r6, sl, #4294967295
     490:	d201      	bcs.n	496 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x96>
     492:	4591      	cmp	r9, r2
     494:	d87a      	bhi.n	58c <CONFIG_NET_TX_STACK_SIZE+0xdc>
     496:	46b2      	mov	sl, r6
     498:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     49c:	eba2 0209 	sub.w	r2, r2, r9
     4a0:	fba0 670e 	umull	r6, r7, r0, lr
     4a4:	42ba      	cmp	r2, r7
     4a6:	46b4      	mov	ip, r6
     4a8:	46b9      	mov	r9, r7
     4aa:	d302      	bcc.n	4b2 <CONFIG_NET_TX_STACK_SIZE+0x2>
     4ac:	d107      	bne.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     4ae:	45b0      	cmp	r8, r6
     4b0:	d205      	bcs.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     4b2:	ebb6 0c0e 	subs.w	ip, r6, lr
     4b6:	eb67 0303 	sbc.w	r3, r7, r3
     4ba:	3801      	subs	r0, #1
     4bc:	4699      	mov	r9, r3
     4be:	2d00      	cmp	r5, #0
     4c0:	d06b      	beq.n	59a <CONFIG_NET_TX_STACK_SIZE+0xea>
     4c2:	ebb8 030c 	subs.w	r3, r8, ip
     4c6:	eb62 0209 	sbc.w	r2, r2, r9
     4ca:	fa02 f404 	lsl.w	r4, r2, r4
     4ce:	40cb      	lsrs	r3, r1
     4d0:	40ca      	lsrs	r2, r1
     4d2:	2100      	movs	r1, #0
     4d4:	431c      	orrs	r4, r3
     4d6:	e9c5 4200 	strd	r4, r2, [r5]
     4da:	e742      	b.n	362 <__udivmoddi4+0xa2>
     4dc:	40b7      	lsls	r7, r6
     4de:	f1c6 0220 	rsb	r2, r6, #32
     4e2:	fa01 f306 	lsl.w	r3, r1, r6
     4e6:	40b4      	lsls	r4, r6
     4e8:	fa21 fc02 	lsr.w	ip, r1, r2
     4ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     4f0:	fa20 f202 	lsr.w	r2, r0, r2
     4f4:	fa1f f887 	uxth.w	r8, r7
     4f8:	fbbc f1fe 	udiv	r1, ip, lr
     4fc:	431a      	orrs	r2, r3
     4fe:	fb0e cc11 	mls	ip, lr, r1, ip
     502:	fb01 f008 	mul.w	r0, r1, r8
     506:	0c13      	lsrs	r3, r2, #16
     508:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     50c:	4560      	cmp	r0, ip
     50e:	d907      	bls.n	520 <CONFIG_NET_TX_STACK_SIZE+0x70>
     510:	eb17 0c0c 	adds.w	ip, r7, ip
     514:	f101 33ff 	add.w	r3, r1, #4294967295
     518:	d201      	bcs.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     51a:	4560      	cmp	r0, ip
     51c:	d833      	bhi.n	586 <CONFIG_NET_TX_STACK_SIZE+0xd6>
     51e:	4619      	mov	r1, r3
     520:	ebac 0c00 	sub.w	ip, ip, r0
     524:	b292      	uxth	r2, r2
     526:	fbbc f0fe 	udiv	r0, ip, lr
     52a:	fb0e cc10 	mls	ip, lr, r0, ip
     52e:	fb00 f308 	mul.w	r3, r0, r8
     532:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     536:	4563      	cmp	r3, ip
     538:	d907      	bls.n	54a <CONFIG_NET_TX_STACK_SIZE+0x9a>
     53a:	eb17 0c0c 	adds.w	ip, r7, ip
     53e:	f100 32ff 	add.w	r2, r0, #4294967295
     542:	d201      	bcs.n	548 <CONFIG_NET_TX_STACK_SIZE+0x98>
     544:	4563      	cmp	r3, ip
     546:	d825      	bhi.n	594 <CONFIG_NET_TX_STACK_SIZE+0xe4>
     548:	4610      	mov	r0, r2
     54a:	ebac 0303 	sub.w	r3, ip, r3
     54e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     552:	e730      	b.n	3b6 <__udivmoddi4+0xf6>
     554:	4629      	mov	r1, r5
     556:	4628      	mov	r0, r5
     558:	e703      	b.n	362 <__udivmoddi4+0xa2>
     55a:	1a84      	subs	r4, r0, r2
     55c:	eb6c 0303 	sbc.w	r3, ip, r3
     560:	2001      	movs	r0, #1
     562:	469a      	mov	sl, r3
     564:	e715      	b.n	392 <__udivmoddi4+0xd2>
     566:	3802      	subs	r0, #2
     568:	443c      	add	r4, r7
     56a:	e755      	b.n	418 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x18>
     56c:	3802      	subs	r0, #2
     56e:	443c      	add	r4, r7
     570:	e6ed      	b.n	34e <__udivmoddi4+0x8e>
     572:	3a02      	subs	r2, #2
     574:	44bc      	add	ip, r7
     576:	e733      	b.n	3e0 <__udivmoddi4+0x120>
     578:	f1ae 0e02 	sub.w	lr, lr, #2
     57c:	443b      	add	r3, r7
     57e:	e6d2      	b.n	326 <__udivmoddi4+0x66>
     580:	3802      	subs	r0, #2
     582:	449c      	add	ip, r3
     584:	e774      	b.n	470 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x70>
     586:	3902      	subs	r1, #2
     588:	44bc      	add	ip, r7
     58a:	e7c9      	b.n	520 <CONFIG_NET_TX_STACK_SIZE+0x70>
     58c:	f1aa 0a02 	sub.w	sl, sl, #2
     590:	441a      	add	r2, r3
     592:	e781      	b.n	498 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x98>
     594:	3802      	subs	r0, #2
     596:	44bc      	add	ip, r7
     598:	e7d7      	b.n	54a <CONFIG_NET_TX_STACK_SIZE+0x9a>
     59a:	4629      	mov	r1, r5
     59c:	e6e1      	b.n	362 <__udivmoddi4+0xa2>
     59e:	bf00      	nop

000005a0 <__aeabi_idiv0>:
     5a0:	4770      	bx	lr
     5a2:	bf00      	nop

000005a4 <__gnu_cmse_nonsecure_call>:
     5a4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	4627      	mov	r7, r4
     5aa:	46a0      	mov	r8, r4
     5ac:	46a1      	mov	r9, r4
     5ae:	46a2      	mov	sl, r4
     5b0:	46a3      	mov	fp, r4
     5b2:	46a4      	mov	ip, r4
     5b4:	ed2d 8b10 	vpush	{d8-d15}
     5b8:	f04f 0500 	mov.w	r5, #0
     5bc:	ec45 5b18 	vmov	d8, r5, r5
     5c0:	ec45 5a19 	vmov	s18, s19, r5, r5
     5c4:	ec45 5a1a 	vmov	s20, s21, r5, r5
     5c8:	ec45 5a1b 	vmov	s22, s23, r5, r5
     5cc:	ec45 5a1c 	vmov	s24, s25, r5, r5
     5d0:	ec45 5a1d 	vmov	s26, s27, r5, r5
     5d4:	ec45 5a1e 	vmov	s28, s29, r5, r5
     5d8:	ec45 5a1f 	vmov	s30, s31, r5, r5
     5dc:	eef1 5a10 	vmrs	r5, fpscr
     5e0:	f64f 7660 	movw	r6, #65376	; 0xff60
     5e4:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     5e8:	4035      	ands	r5, r6
     5ea:	eee1 5a10 	vmsr	fpscr, r5
     5ee:	f384 8800 	msr	CPSR_f, r4
     5f2:	4625      	mov	r5, r4
     5f4:	4626      	mov	r6, r4
     5f6:	47a4      	blxns	r4
     5f8:	ecbd 8b10 	vpop	{d8-d15}
     5fc:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000600 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
     600:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
     602:	4b0c      	ldr	r3, [pc, #48]	; (634 <tz_nonsecure_state_setup+0x34>)
     604:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     606:	6803      	ldr	r3, [r0, #0]
     608:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
     60c:	6843      	ldr	r3, [r0, #4]
     60e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
     612:	7b02      	ldrb	r2, [r0, #12]
     614:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
     618:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
     61c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
     620:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
     622:	bf48      	it	mi
     624:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
     628:	b109      	cbz	r1, 62e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
     62a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
     62e:	f383 8894 	msr	CONTROL_NS, r3
}
     632:	4770      	bx	lr
     634:	e002ed00 	.word	0xe002ed00

00000638 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     638:	4a08      	ldr	r2, [pc, #32]	; (65c <tz_nbanked_exception_target_state_set+0x24>)
     63a:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
     63c:	b148      	cbz	r0, 652 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
     63e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     642:	041b      	lsls	r3, r3, #16
     644:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     646:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     64a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     64e:	60d3      	str	r3, [r2, #12]
}
     650:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     652:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
     654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     658:	e7f5      	b.n	646 <tz_nbanked_exception_target_state_set+0xe>
     65a:	bf00      	nop
     65c:	e000ed00 	.word	0xe000ed00

00000660 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     660:	4a08      	ldr	r2, [pc, #32]	; (684 <tz_nonsecure_exception_prio_config+0x24>)
     662:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
     664:	b140      	cbz	r0, 678 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     666:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
     668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     66c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     674:	60d3      	str	r3, [r2, #12]
}
     676:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
     678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     67c:	041b      	lsls	r3, r3, #16
     67e:	0c1b      	lsrs	r3, r3, #16
     680:	e7f4      	b.n	66c <tz_nonsecure_exception_prio_config+0xc>
     682:	bf00      	nop
     684:	e000ed00 	.word	0xe000ed00

00000688 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     688:	4a08      	ldr	r2, [pc, #32]	; (6ac <tz_nonsecure_system_reset_req_block+0x24>)
     68a:	68d3      	ldr	r3, [r2, #12]
	if (block) {
     68c:	b140      	cbz	r0, 6a0 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     68e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
     690:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
     69c:	60d3      	str	r3, [r2, #12]
}
     69e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
     6a0:	f023 0308 	bic.w	r3, r3, #8
     6a4:	041b      	lsls	r3, r3, #16
     6a6:	0c1b      	lsrs	r3, r3, #16
     6a8:	e7f4      	b.n	694 <tz_nonsecure_system_reset_req_block+0xc>
     6aa:	bf00      	nop
     6ac:	e000ed00 	.word	0xe000ed00

000006b0 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
     6b0:	4a03      	ldr	r2, [pc, #12]	; (6c0 <tz_nonsecure_fpu_access_enable+0x10>)
     6b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
     6b6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
     6ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
     6be:	4770      	bx	lr
     6c0:	e000ed00 	.word	0xe000ed00

000006c4 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
     6c4:	4b08      	ldr	r3, [pc, #32]	; (6e8 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
     6c6:	681a      	ldr	r2, [r3, #0]
	if (enable) {
     6c8:	b118      	cbz	r0, 6d2 <tz_sau_configure+0xe>
     6ca:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6ce:	601a      	str	r2, [r3, #0]
		}
	}
}
     6d0:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
     6d2:	f022 0201 	bic.w	r2, r2, #1
     6d6:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6d8:	681a      	ldr	r2, [r3, #0]
		if (allns) {
     6da:	b111      	cbz	r1, 6e2 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6dc:	f042 0202 	orr.w	r2, r2, #2
     6e0:	e7f5      	b.n	6ce <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6e2:	f022 0202 	bic.w	r2, r2, #2
     6e6:	e7f2      	b.n	6ce <tz_sau_configure+0xa>
     6e8:	e000edd0 	.word	0xe000edd0

000006ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6ec:	680b      	ldr	r3, [r1, #0]
     6ee:	3301      	adds	r3, #1
     6f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6f2:	4b01      	ldr	r3, [pc, #4]	; (6f8 <char_out+0xc>)
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	4718      	bx	r3
     6f8:	2000140c 	.word	0x2000140c

000006fc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     700:	b085      	sub	sp, #20
     702:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     704:	469b      	mov	fp, r3
     706:	2c01      	cmp	r4, #1
     708:	bfb8      	it	lt
     70a:	2401      	movlt	r4, #1
     70c:	2b01      	cmp	r3, #1
     70e:	bf0c      	ite	eq
     710:	2330      	moveq	r3, #48	; 0x30
     712:	2320      	movne	r3, #32
     714:	4616      	mov	r6, r2
     716:	4682      	mov	sl, r0
     718:	4688      	mov	r8, r1
     71a:	2501      	movs	r5, #1
     71c:	270a      	movs	r7, #10
     71e:	2200      	movs	r2, #0
     720:	f8df 906c 	ldr.w	r9, [pc, #108]	; 790 <_printk_dec_ulong+0x94>
     724:	9302      	str	r3, [sp, #8]
     726:	fbb6 f3f9 	udiv	r3, r6, r9
     72a:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     72c:	b90a      	cbnz	r2, 732 <_printk_dec_ulong+0x36>
     72e:	45b1      	cmp	r9, r6
     730:	d81c      	bhi.n	76c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     732:	9b01      	ldr	r3, [sp, #4]
     734:	4641      	mov	r1, r8
     736:	f103 0030 	add.w	r0, r3, #48	; 0x30
     73a:	47d0      	blx	sl
			found_largest_digit = 1;
     73c:	2201      	movs	r2, #1
			digits++;
     73e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     740:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     742:	3f01      	subs	r7, #1
		remainder %= pos;
     744:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     748:	230a      	movs	r3, #10
	while (pos >= 10) {
     74a:	2f01      	cmp	r7, #1
		pos /= 10;
     74c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     750:	d1e9      	bne.n	726 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     752:	4641      	mov	r1, r8
     754:	f106 0030 	add.w	r0, r6, #48	; 0x30
     758:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     75a:	f1bb 0f03 	cmp.w	fp, #3
     75e:	d102      	bne.n	766 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     760:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     762:	2c00      	cmp	r4, #0
     764:	dc0e      	bgt.n	784 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     766:	b005      	add	sp, #20
     768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     76c:	42bc      	cmp	r4, r7
     76e:	dbe7      	blt.n	740 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     770:	f1bb 0f02 	cmp.w	fp, #2
     774:	d8e4      	bhi.n	740 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     776:	4641      	mov	r1, r8
     778:	9802      	ldr	r0, [sp, #8]
     77a:	9203      	str	r2, [sp, #12]
			digits++;
     77c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     77e:	47d0      	blx	sl
			digits++;
     780:	9a03      	ldr	r2, [sp, #12]
     782:	e7dd      	b.n	740 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     784:	4641      	mov	r1, r8
     786:	2020      	movs	r0, #32
     788:	47d0      	blx	sl
     78a:	3c01      	subs	r4, #1
     78c:	e7e9      	b.n	762 <_printk_dec_ulong+0x66>
     78e:	bf00      	nop
     790:	3b9aca00 	.word	0x3b9aca00

00000794 <__printk_hook_install>:
	_char_out = fn;
     794:	4b01      	ldr	r3, [pc, #4]	; (79c <__printk_hook_install+0x8>)
     796:	6018      	str	r0, [r3, #0]
}
     798:	4770      	bx	lr
     79a:	bf00      	nop
     79c:	2000140c 	.word	0x2000140c

000007a0 <vprintk>:
	struct out_context ctx = { 0 };
     7a0:	2300      	movs	r3, #0
{
     7a2:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     7a4:	ac02      	add	r4, sp, #8
     7a6:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
     7aa:	4602      	mov	r2, r0
     7ac:	460b      	mov	r3, r1
     7ae:	4803      	ldr	r0, [pc, #12]	; (7bc <vprintk+0x1c>)
     7b0:	4621      	mov	r1, r4
     7b2:	f003 fb0d 	bl	3dd0 <z_vprintk>
}
     7b6:	b002      	add	sp, #8
     7b8:	bd10      	pop	{r4, pc}
     7ba:	bf00      	nop
     7bc:	000006ed 	.word	0x000006ed

000007c0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     7c0:	f04f 0220 	mov.w	r2, #32
     7c4:	f3ef 8311 	mrs	r3, BASEPRI
     7c8:	f382 8811 	msr	BASEPRI, r2
     7cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     7d0:	2101      	movs	r1, #1
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <nordicsemi_nrf91_init+0x24>)
     7d4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7d8:	f383 8811 	msr	BASEPRI, r3
     7dc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     7e0:	2000      	movs	r0, #0
     7e2:	4770      	bx	lr
     7e4:	50039000 	.word	0x50039000

000007e8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     7e8:	280a      	cmp	r0, #10
{
     7ea:	b538      	push	{r3, r4, r5, lr}
     7ec:	4604      	mov	r4, r0
     7ee:	4d07      	ldr	r5, [pc, #28]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
	if ('\n' == c) {
     7f0:	d104      	bne.n	7fc <console_out+0x14>
     7f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     7f4:	6843      	ldr	r3, [r0, #4]
     7f6:	210d      	movs	r1, #13
     7f8:	685b      	ldr	r3, [r3, #4]
     7fa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     7fc:	6828      	ldr	r0, [r5, #0]
     7fe:	6843      	ldr	r3, [r0, #4]
     800:	b2e1      	uxtb	r1, r4
     802:	685b      	ldr	r3, [r3, #4]
     804:	4798      	blx	r3

	return c;
}
     806:	4620      	mov	r0, r4
     808:	bd38      	pop	{r3, r4, r5, pc}
     80a:	bf00      	nop
     80c:	20000008 	.word	0x20000008

00000810 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     810:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     812:	4c04      	ldr	r4, [pc, #16]	; (824 <uart_console_hook_install+0x14>)
     814:	4620      	mov	r0, r4
     816:	f001 f869 	bl	18ec <__stdout_hook_install>
	__printk_hook_install(console_out);
     81a:	4620      	mov	r0, r4
}
     81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     820:	f7ff bfb8 	b.w	794 <__printk_hook_install>
     824:	000007e9 	.word	0x000007e9

00000828 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     828:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     82a:	4804      	ldr	r0, [pc, #16]	; (83c <uart_console_init+0x14>)
     82c:	f001 fd4c 	bl	22c8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     830:	4b03      	ldr	r3, [pc, #12]	; (840 <uart_console_init+0x18>)
     832:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     834:	f7ff ffec 	bl	810 <uart_console_hook_install>

	return 0;
}
     838:	2000      	movs	r0, #0
     83a:	bd08      	pop	{r3, pc}
     83c:	00004ecb 	.word	0x00004ecb
     840:	20000008 	.word	0x20000008

00000844 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     844:	b508      	push	{r3, lr}
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     846:	4b11      	ldr	r3, [pc, #68]	; (88c <nrf_power_clock_isr+0x48>)
     848:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     84a:	b16a      	cbz	r2, 868 <nrf_power_clock_isr+0x24>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     84c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     850:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     854:	07d1      	lsls	r1, r2, #31
     856:	d507      	bpl.n	868 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     858:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     85a:	480d      	ldr	r0, [pc, #52]	; (890 <nrf_power_clock_isr+0x4c>)
     85c:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     85e:	6883      	ldr	r3, [r0, #8]
     860:	7a5b      	ldrb	r3, [r3, #9]
     862:	b90b      	cbnz	r3, 868 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
     864:	f003 fcde 	bl	4224 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     868:	4b0a      	ldr	r3, [pc, #40]	; (894 <nrf_power_clock_isr+0x50>)
     86a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     86c:	b162      	cbz	r2, 888 <nrf_power_clock_isr+0x44>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     86e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     872:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     876:	0792      	lsls	r2, r2, #30
     878:	d506      	bpl.n	888 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     87a:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     87c:	4806      	ldr	r0, [pc, #24]	; (898 <nrf_power_clock_isr+0x54>)
     87e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
     884:	f003 bcce 	b.w	4224 <clkstarted_handle>
}
     888:	bd08      	pop	{r3, pc}
     88a:	bf00      	nop
     88c:	50005100 	.word	0x50005100
     890:	200014e4 	.word	0x200014e4
     894:	50005104 	.word	0x50005104
     898:	200014f0 	.word	0x200014f0

0000089c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     89c:	2200      	movs	r2, #0
     89e:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <rtc1_nrf_isr+0x38>)
     8a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     8a4:	f04f 0220 	mov.w	r2, #32
     8a8:	f3ef 8111 	mrs	r1, BASEPRI
     8ac:	f382 8811 	msr	BASEPRI, r2
     8b0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     8b4:	4a08      	ldr	r2, [pc, #32]	; (8d8 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     8b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     8ba:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     8bc:	1ac0      	subs	r0, r0, r3
     8be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     8c2:	4403      	add	r3, r0
     8c4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     8c6:	f381 8811 	msr	BASEPRI, r1
     8ca:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     8ce:	f002 bac7 	b.w	2e60 <z_clock_announce>
     8d2:	bf00      	nop
     8d4:	50015000 	.word	0x50015000
     8d8:	20000024 	.word	0x20000024

000008dc <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	4818      	ldr	r0, [pc, #96]	; (940 <z_clock_driver_init+0x64>)
     8e0:	f001 fcf2 	bl	22c8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     8e4:	b348      	cbz	r0, 93a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     8e6:	6843      	ldr	r3, [r0, #4]
     8e8:	2100      	movs	r1, #0
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     8ee:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     8f0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     8f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
     8fa:	4d12      	ldr	r5, [pc, #72]	; (944 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     8fc:	4631      	mov	r1, r6
     8fe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     902:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     906:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     90a:	4b0f      	ldr	r3, [pc, #60]	; (948 <z_clock_driver_init+0x6c>)
     90c:	2015      	movs	r0, #21
     90e:	601c      	str	r4, [r3, #0]
     910:	4b0e      	ldr	r3, [pc, #56]	; (94c <z_clock_driver_init+0x70>)
     912:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     916:	4622      	mov	r2, r4
     918:	f000 fc9e 	bl	1258 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     91c:	2015      	movs	r0, #21
     91e:	f000 fc8b 	bl	1238 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     922:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     924:	4b0a      	ldr	r3, [pc, #40]	; (950 <z_clock_driver_init+0x74>)
     926:	601e      	str	r6, [r3, #0]
     928:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     92a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     92e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     934:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     938:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     93a:	f04f 30ff 	mov.w	r0, #4294967295
     93e:	e7fb      	b.n	938 <z_clock_driver_init+0x5c>
     940:	00004ed2 	.word	0x00004ed2
     944:	50015000 	.word	0x50015000
     948:	50015140 	.word	0x50015140
     94c:	e000e100 	.word	0xe000e100
     950:	50015008 	.word	0x50015008

00000954 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     954:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     956:	4e21      	ldr	r6, [pc, #132]	; (9dc <z_clock_set_timeout+0x88>)
     958:	f1b0 3fff 	cmp.w	r0, #4294967295
     95c:	bf08      	it	eq
     95e:	4630      	moveq	r0, r6
	__asm__ volatile(
     960:	f04f 0320 	mov.w	r3, #32
     964:	f3ef 8411 	mrs	r4, BASEPRI
     968:	f383 8811 	msr	BASEPRI, r3
     96c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     970:	491b      	ldr	r1, [pc, #108]	; (9e0 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     972:	4b1c      	ldr	r3, [pc, #112]	; (9e4 <z_clock_set_timeout+0x90>)
     974:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
     978:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     97a:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
     97c:	1b53      	subs	r3, r2, r5
     97e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
     982:	3501      	adds	r5, #1
     984:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     986:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
     98a:	42b0      	cmp	r0, r6
     98c:	bfd4      	ite	le
     98e:	1818      	addle	r0, r3, r0
     990:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     992:	1a82      	subs	r2, r0, r2
     994:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     998:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     99c:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
     99e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     9a2:	d904      	bls.n	9ae <z_clock_set_timeout+0x5a>
	__asm__ volatile(
     9a4:	f384 8811 	msr	BASEPRI, r4
     9a8:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     9ac:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
     9ae:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     9b2:	4a0d      	ldr	r2, [pc, #52]	; (9e8 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
     9b4:	1ac3      	subs	r3, r0, r3
     9b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     9ba:	1e5d      	subs	r5, r3, #1
     9bc:	4295      	cmp	r5, r2
     9be:	d905      	bls.n	9cc <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     9c4:	4b09      	ldr	r3, [pc, #36]	; (9ec <z_clock_set_timeout+0x98>)
     9c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     9ca:	e7eb      	b.n	9a4 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
     9cc:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     9ce:	bf02      	ittt	eq
     9d0:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     9d2:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     9d6:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     9da:	e7e3      	b.n	9a4 <z_clock_set_timeout+0x50>
     9dc:	00fffffe 	.word	0x00fffffe
     9e0:	50015000 	.word	0x50015000
     9e4:	20000024 	.word	0x20000024
     9e8:	007ffffe 	.word	0x007ffffe
     9ec:	e000e100 	.word	0xe000e100

000009f0 <z_clock_elapsed>:
	__asm__ volatile(
     9f0:	f04f 0220 	mov.w	r2, #32
     9f4:	f3ef 8311 	mrs	r3, BASEPRI
     9f8:	f382 8811 	msr	BASEPRI, r2
     9fc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     a00:	4a06      	ldr	r2, [pc, #24]	; (a1c <z_clock_elapsed+0x2c>)
     a02:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     a06:	4a06      	ldr	r2, [pc, #24]	; (a20 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     a08:	6812      	ldr	r2, [r2, #0]
     a0a:	1a80      	subs	r0, r0, r2
     a0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     a10:	f383 8811 	msr	BASEPRI, r3
     a14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     a18:	4770      	bx	lr
     a1a:	bf00      	nop
     a1c:	50015000 	.word	0x50015000
     a20:	20000024 	.word	0x20000024

00000a24 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     a24:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     a26:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a28:	2b00      	cmp	r3, #0
     a2a:	db0c      	blt.n	a46 <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a2c:	2201      	movs	r2, #1
     a2e:	f000 011f 	and.w	r1, r0, #31
     a32:	408a      	lsls	r2, r1
     a34:	095b      	lsrs	r3, r3, #5
     a36:	4910      	ldr	r1, [pc, #64]	; (a78 <spm_config_peripheral.constprop.1+0x54>)
     a38:	3320      	adds	r3, #32
     a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a42:	f3bf 8f6f 	isb	sy
     a46:	0083      	lsls	r3, r0, #2
     a48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     a4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a50:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a52:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a56:	d006      	beq.n	a66 <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     a58:	2a00      	cmp	r2, #0
     a5a:	da07      	bge.n	a6c <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     a5c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     a60:	3a02      	subs	r2, #2

	if (usel_or_split(id)) {
     a62:	2a01      	cmp	r2, #1
     a64:	d802      	bhi.n	a6c <spm_config_peripheral.constprop.1+0x48>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     a66:	4a05      	ldr	r2, [pc, #20]	; (a7c <spm_config_peripheral.constprop.1+0x58>)
     a68:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     a6c:	2100      	movs	r1, #0
     a6e:	f003 fc74 	bl	435a <irq_target_state_set>
	return 0;
}
     a72:	2000      	movs	r0, #0
     a74:	bd08      	pop	{r3, pc}
     a76:	bf00      	nop
     a78:	e000e100 	.word	0xe000e100
     a7c:	80000100 	.word	0x80000100

00000a80 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     a80:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a82:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a86:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     a8a:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     a8c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     a90:	482c      	ldr	r0, [pc, #176]	; (b44 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xb8>)
     a92:	f003 fb13 	bl	40bc <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a96:	6821      	ldr	r1, [r4, #0]
     a98:	482b      	ldr	r0, [pc, #172]	; (b48 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xbc>)
     a9a:	f003 fb0f 	bl	40bc <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a9e:	6829      	ldr	r1, [r5, #0]
     aa0:	482a      	ldr	r0, [pc, #168]	; (b4c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc0>)
     aa2:	f003 fb0b 	bl	40bc <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     aa6:	2210      	movs	r2, #16
     aa8:	2100      	movs	r1, #0
     aaa:	4668      	mov	r0, sp
     aac:	f003 fd06 	bl	44bc <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     ab0:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     ab2:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ab4:	9300      	str	r3, [sp, #0]
     ab6:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     ab8:	f7ff fda2 	bl	600 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     abc:	2001      	movs	r0, #1
     abe:	f7ff fdcf 	bl	660 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     ac2:	2000      	movs	r0, #0
     ac4:	f7ff fdb8 	bl	638 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     ac8:	2000      	movs	r0, #0
     aca:	f7ff fddd 	bl	688 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     ace:	2101      	movs	r1, #1
     ad0:	2000      	movs	r0, #0
     ad2:	f7ff fdf7 	bl	6c4 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     ad6:	f7ff fdeb 	bl	6b0 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ada:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     adc:	481c      	ldr	r0, [pc, #112]	; (b50 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc4>)
     ade:	f003 faed 	bl	40bc <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     ae2:	2008      	movs	r0, #8
     ae4:	f7ff ff9e 	bl	a24 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ae8:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     af0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     af4:	0864      	lsrs	r4, r4, #1
     af6:	0064      	lsls	r4, r4, #1
     af8:	4620      	mov	r0, r4
     afa:	4621      	mov	r1, r4
     afc:	4622      	mov	r2, r4
     afe:	4623      	mov	r3, r4
     b00:	ed9f 0a14 	vldr	s0, [pc, #80]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b04:	eddf 0a13 	vldr	s1, [pc, #76]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b08:	ed9f 1a12 	vldr	s2, [pc, #72]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b0c:	eddf 1a11 	vldr	s3, [pc, #68]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b10:	ed9f 2a10 	vldr	s4, [pc, #64]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b14:	eddf 2a0f 	vldr	s5, [pc, #60]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b18:	ed9f 3a0e 	vldr	s6, [pc, #56]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b1c:	eddf 3a0d 	vldr	s7, [pc, #52]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b20:	ed9f 4a0c 	vldr	s8, [pc, #48]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b24:	eddf 4a0b 	vldr	s9, [pc, #44]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b28:	ed9f 5a0a 	vldr	s10, [pc, #40]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b2c:	eddf 5a09 	vldr	s11, [pc, #36]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b30:	ed9f 6a08 	vldr	s12, [pc, #32]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b34:	eddf 6a07 	vldr	s13, [pc, #28]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b38:	ed9f 7a06 	vldr	s14, [pc, #24]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b3c:	eddf 7a05 	vldr	s15, [pc, #20]	; b54 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xc8>
     b40:	f7ff fd30 	bl	5a4 <__gnu_cmse_nonsecure_call>
     b44:	00005034 	.word	0x00005034
     b48:	0000504b 	.word	0x0000504b
     b4c:	00005060 	.word	0x00005060
     b50:	0000507e 	.word	0x0000507e
     b54:	00000000 	.word	0x00000000

00000b58 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     b5c:	486f      	ldr	r0, [pc, #444]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     b5e:	f003 faad 	bl	40bc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     b62:	2100      	movs	r1, #0
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b64:	f8df 8200 	ldr.w	r8, [pc, #512]	; d68 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1b0>
     b68:	4f6d      	ldr	r7, [pc, #436]	; (d20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x168>)
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b6a:	4d6e      	ldr	r5, [pc, #440]	; (d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b6c:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     b70:	03ca      	lsls	r2, r1, #15
     b72:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     b76:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     b7a:	486b      	ldr	r0, [pc, #428]	; (d28 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x170>)
     b7c:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     b80:	1c4e      	adds	r6, r1, #1
     b82:	f003 fa9b 	bl	40bc <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     b86:	4b69      	ldr	r3, [pc, #420]	; (d2c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x174>)
     b88:	f014 0f10 	tst.w	r4, #16
     b8c:	4968      	ldr	r1, [pc, #416]	; (d30 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x178>)
     b8e:	4869      	ldr	r0, [pc, #420]	; (d34 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x17c>)
     b90:	bf08      	it	eq
     b92:	4619      	moveq	r1, r3
     b94:	f003 fa92 	bl	40bc <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b98:	f014 0f04 	tst.w	r4, #4
     b9c:	bf14      	ite	ne
     b9e:	2172      	movne	r1, #114	; 0x72
     ba0:	212d      	moveq	r1, #45	; 0x2d
     ba2:	4628      	mov	r0, r5
     ba4:	f003 fa8a 	bl	40bc <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     ba8:	f014 0f02 	tst.w	r4, #2
     bac:	bf14      	ite	ne
     bae:	2177      	movne	r1, #119	; 0x77
     bb0:	212d      	moveq	r1, #45	; 0x2d
     bb2:	4628      	mov	r0, r5
     bb4:	f003 fa82 	bl	40bc <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     bb8:	f014 0f01 	tst.w	r4, #1
     bbc:	bf14      	ite	ne
     bbe:	2178      	movne	r1, #120	; 0x78
     bc0:	212d      	moveq	r1, #45	; 0x2d
     bc2:	4628      	mov	r0, r5
     bc4:	f003 fa7a 	bl	40bc <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     bc8:	f414 7f80 	tst.w	r4, #256	; 0x100
     bcc:	bf14      	ite	ne
     bce:	216c      	movne	r1, #108	; 0x6c
     bd0:	212d      	moveq	r1, #45	; 0x2d
     bd2:	4628      	mov	r0, r5
     bd4:	f003 fa72 	bl	40bc <printk>
		PRINT("\n");
     bd8:	4857      	ldr	r0, [pc, #348]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
     bda:	f003 fa6f 	bl	40bc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     bde:	2e20      	cmp	r6, #32
     be0:	4631      	mov	r1, r6
     be2:	d1c3      	bne.n	b6c <spm_config+0x14>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     be4:	4b55      	ldr	r3, [pc, #340]	; (d3c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x184>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     be6:	4a4e      	ldr	r2, [pc, #312]	; (d20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x168>)
     be8:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     bec:	f3c3 030e 	ubfx	r3, r3, #0, #15
     bf0:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     bf4:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     bf8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     bfc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     c00:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     c04:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     c08:	484d      	ldr	r0, [pc, #308]	; (d40 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x188>)
     c0a:	0152      	lsls	r2, r2, #5
     c0c:	f003 fa56 	bl	40bc <printk>
	PRINT("\n");
     c10:	4849      	ldr	r0, [pc, #292]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
     c12:	f003 fa53 	bl	40bc <printk>
	int err = spm_secure_services_init();
     c16:	f003 fb24 	bl	4262 <spm_secure_services_init>
	if (err != 0) {
     c1a:	4601      	mov	r1, r0
     c1c:	b110      	cbz	r0, c24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     c1e:	4849      	ldr	r0, [pc, #292]	; (d44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18c>)
     c20:	f003 fa4c 	bl	40bc <printk>
	PRINT("\n");
     c24:	4844      	ldr	r0, [pc, #272]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
     c26:	f003 fa49 	bl	40bc <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     c2a:	4847      	ldr	r0, [pc, #284]	; (d48 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x190>)
     c2c:	f003 fa46 	bl	40bc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     c30:	2100      	movs	r1, #0
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c32:	f8df 8138 	ldr.w	r8, [pc, #312]	; d6c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1b4>
     c36:	4f3a      	ldr	r7, [pc, #232]	; (d20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x168>)
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c38:	4d3a      	ldr	r5, [pc, #232]	; (d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c3a:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     c3e:	034a      	lsls	r2, r1, #13
     c40:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     c44:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     c48:	4840      	ldr	r0, [pc, #256]	; (d4c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x194>)
     c4a:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     c4e:	1c4e      	adds	r6, r1, #1
     c50:	f003 fa34 	bl	40bc <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     c54:	4b35      	ldr	r3, [pc, #212]	; (d2c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x174>)
     c56:	f014 0f10 	tst.w	r4, #16
     c5a:	4935      	ldr	r1, [pc, #212]	; (d30 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x178>)
     c5c:	4835      	ldr	r0, [pc, #212]	; (d34 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x17c>)
     c5e:	bf08      	it	eq
     c60:	4619      	moveq	r1, r3
     c62:	f003 fa2b 	bl	40bc <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c66:	f014 0f04 	tst.w	r4, #4
     c6a:	bf14      	ite	ne
     c6c:	2172      	movne	r1, #114	; 0x72
     c6e:	212d      	moveq	r1, #45	; 0x2d
     c70:	4628      	mov	r0, r5
     c72:	f003 fa23 	bl	40bc <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     c76:	f014 0f02 	tst.w	r4, #2
     c7a:	bf14      	ite	ne
     c7c:	2177      	movne	r1, #119	; 0x77
     c7e:	212d      	moveq	r1, #45	; 0x2d
     c80:	4628      	mov	r0, r5
     c82:	f003 fa1b 	bl	40bc <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     c86:	f014 0f01 	tst.w	r4, #1
     c8a:	bf14      	ite	ne
     c8c:	2178      	movne	r1, #120	; 0x78
     c8e:	212d      	moveq	r1, #45	; 0x2d
     c90:	4628      	mov	r0, r5
     c92:	f003 fa13 	bl	40bc <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     c96:	f414 7f80 	tst.w	r4, #256	; 0x100
     c9a:	bf14      	ite	ne
     c9c:	216c      	movne	r1, #108	; 0x6c
     c9e:	212d      	moveq	r1, #45	; 0x2d
     ca0:	4628      	mov	r0, r5
     ca2:	f003 fa0b 	bl	40bc <printk>
		PRINT("\n");
     ca6:	4824      	ldr	r0, [pc, #144]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
     ca8:	f003 fa08 	bl	40bc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     cac:	2e20      	cmp	r6, #32
     cae:	4631      	mov	r1, r6
     cb0:	d1c3      	bne.n	c3a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x82>
	PRINT("\n");
     cb2:	4821      	ldr	r0, [pc, #132]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
     cb4:	f003 fa02 	bl	40bc <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		NRF_SPU->GPIOPORT[0].PERM = 0;
     cbc:	2400      	movs	r4, #0
	NRF_SPU->DPPI[0].PERM = mask;
     cbe:	4d18      	ldr	r5, [pc, #96]	; (d20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x168>)
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     cc0:	4823      	ldr	r0, [pc, #140]	; (d50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x198>)
	NRF_SPU->DPPI[0].PERM = mask;
     cc2:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     cc6:	f003 f9f9 	bl	40bc <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     cca:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d70 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1b8>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     cce:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     cd2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d74 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1bc>
     cd6:	4d1f      	ldr	r5, [pc, #124]	; (d54 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x19c>)
     cd8:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
     cdc:	7977      	ldrb	r7, [r6, #5]
     cde:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
     ce2:	2f00      	cmp	r7, #0
     ce4:	bf14      	ite	ne
     ce6:	4643      	movne	r3, r8
     ce8:	464b      	moveq	r3, r9
     cea:	4621      	mov	r1, r4
     cec:	481a      	ldr	r0, [pc, #104]	; (d58 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a0>)
     cee:	f003 f9e5 	bl	40bc <printk>
		if (!periph[i].nonsecure) {
     cf2:	b957      	cbnz	r7, d0a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x152>
			PRINT("\tSKIP\n");
     cf4:	4819      	ldr	r0, [pc, #100]	; (d5c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a4>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cf6:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     cf8:	f003 f9e0 	bl	40bc <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cfc:	2c19      	cmp	r4, #25
     cfe:	d1eb      	bne.n	cd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x120>
	PRINT("\n");
     d00:	480d      	ldr	r0, [pc, #52]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     d06:	f003 b9d9 	b.w	40bc <printk>
		err = spm_config_peripheral(periph[i].id, false);
     d0a:	7930      	ldrb	r0, [r6, #4]
     d0c:	f7ff fe8a 	bl	a24 <spm_config_peripheral.constprop.1>
		if (err) {
     d10:	b108      	cbz	r0, d16 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x15e>
			PRINT("\tERROR\n");
     d12:	4813      	ldr	r0, [pc, #76]	; (d60 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a8>)
     d14:	e7ef      	b.n	cf6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x13e>
			PRINT("\tOK\n");
     d16:	4813      	ldr	r0, [pc, #76]	; (d64 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1ac>)
     d18:	e7ed      	b.n	cf6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x13e>
     d1a:	bf00      	nop
     d1c:	00004f10 	.word	0x00004f10
     d20:	50003000 	.word	0x50003000
     d24:	00004f48 	.word	0x00004f48
     d28:	00004f33 	.word	0x00004f33
     d2c:	00004ef9 	.word	0x00004ef9
     d30:	00004ef0 	.word	0x00004ef0
     d34:	0000501d 	.word	0x0000501d
     d38:	00005230 	.word	0x00005230
     d3c:	00007fe0 	.word	0x00007fe0
     d40:	00004f4b 	.word	0x00004f4b
     d44:	00004f91 	.word	0x00004f91
     d48:	00004fc1 	.word	0x00004fc1
     d4c:	00004fe3 	.word	0x00004fe3
     d50:	00004ff7 	.word	0x00004ff7
     d54:	00004bf0 	.word	0x00004bf0
     d58:	00005013 	.word	0x00005013
     d5c:	00005020 	.word	0x00005020
     d60:	00005027 	.word	0x00005027
     d64:	0000502f 	.word	0x0000502f
     d68:	00004b70 	.word	0x00004b70
     d6c:	00004cb8 	.word	0x00004cb8
     d70:	00004f05 	.word	0x00004f05
     d74:	00004efd 	.word	0x00004efd

00000d78 <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     d78:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     d7a:	2800      	cmp	r0, #0
     d7c:	d04b      	beq.n	e16 <__acle_se_spm_request_read+0x9e>
     d7e:	2a00      	cmp	r2, #0
     d80:	d049      	beq.n	e16 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     d82:	4b26      	ldr	r3, [pc, #152]	; (e1c <__acle_se_spm_request_read+0xa4>)
     d84:	4299      	cmp	r1, r3
     d86:	d93c      	bls.n	e02 <__acle_se_spm_request_read+0x8a>
     d88:	1854      	adds	r4, r2, r1
     d8a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     d8e:	429c      	cmp	r4, r3
     d90:	d83a      	bhi.n	e08 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     d92:	f003 fb66 	bl	4462 <memcpy>
			return 0;
     d96:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d9c:	4671      	mov	r1, lr
     d9e:	4672      	mov	r2, lr
     da0:	4673      	mov	r3, lr
     da2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     da6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     daa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     dae:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     db2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     db6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     dba:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     dbe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     dc2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     dc6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     dca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     dce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     dd2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     dde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     de2:	f38e 8c00 	msr	CPSR_fs, lr
     de6:	b410      	push	{r4}
     de8:	eef1 ca10 	vmrs	ip, fpscr
     dec:	f64f 7460 	movw	r4, #65376	; 0xff60
     df0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     df4:	ea0c 0c04 	and.w	ip, ip, r4
     df8:	eee1 ca10 	vmsr	fpscr, ip
     dfc:	bc10      	pop	{r4}
     dfe:	46f4      	mov	ip, lr
     e00:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     e02:	4b07      	ldr	r3, [pc, #28]	; (e20 <__acle_se_spm_request_read+0xa8>)
     e04:	4299      	cmp	r1, r3
     e06:	d903      	bls.n	e10 <__acle_se_spm_request_read+0x98>
     e08:	4b06      	ldr	r3, [pc, #24]	; (e24 <__acle_se_spm_request_read+0xac>)
     e0a:	1854      	adds	r4, r2, r1
     e0c:	429c      	cmp	r4, r3
     e0e:	d9c0      	bls.n	d92 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     e10:	f04f 30ff 	mov.w	r0, #4294967295
     e14:	e7c0      	b.n	d98 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     e16:	f06f 0015 	mvn.w	r0, #21
     e1a:	e7bd      	b.n	d98 <__acle_se_spm_request_read+0x20>
     e1c:	00ff0203 	.word	0x00ff0203
     e20:	00ff012f 	.word	0x00ff012f
     e24:	00ff0138 	.word	0x00ff0138

00000e28 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e2c:	4684      	mov	ip, r0
     e2e:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     e30:	460f      	mov	r7, r1
     e32:	2900      	cmp	r1, #0
     e34:	d06a      	beq.n	f0c <__acle_se_spm_firmware_info+0xe4>
/* Search for the firmware_info structure inside the firmware. */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e36:	2400      	movs	r4, #0
		if (expected_32[i] != actual_32[i]) {
     e38:	f645 3a01 	movw	sl, #23297	; 0x5b01
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
     e3c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; f18 <__acle_se_spm_firmware_info+0xf0>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e40:	4e34      	ldr	r6, [pc, #208]	; (f14 <__acle_se_spm_firmware_info+0xec>)
		if (expected_32[i] != actual_32[i]) {
     e42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; f1c <__acle_se_spm_firmware_info+0xf4>
     e46:	f8df 90d8 	ldr.w	r9, [pc, #216]	; f20 <__acle_se_spm_firmware_info+0xf8>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e4a:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
     e4c:	f85e b024 	ldr.w	fp, [lr, r4, lsl #2]
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     e54:	eb0c 030b 	add.w	r3, ip, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     e5c:	079a      	lsls	r2, r3, #30
     e5e:	d144      	bne.n	eea <__acle_se_spm_firmware_info+0xc2>
		if (expected_32[i] != actual_32[i]) {
     e60:	f85c 200b 	ldr.w	r2, [ip, fp]
     e64:	4542      	cmp	r2, r8
     e66:	d105      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
     e68:	685a      	ldr	r2, [r3, #4]
     e6a:	454a      	cmp	r2, r9
     e6c:	d102      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
     e6e:	689a      	ldr	r2, [r3, #8]
     e70:	4552      	cmp	r2, sl
     e72:	d044      	beq.n	efe <__acle_se_spm_firmware_info+0xd6>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e74:	3401      	adds	r4, #1
     e76:	2c03      	cmp	r4, #3
     e78:	d1e8      	bne.n	e4c <__acle_se_spm_firmware_info+0x24>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     e7a:	f06f 000d 	mvn.w	r0, #13
}
     e7e:	b005      	add	sp, #20
     e80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e8c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     e90:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     e94:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     e98:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     e9c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     ea0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     ea4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     ea8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     eac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     eb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ec0:	4671      	mov	r1, lr
     ec2:	4672      	mov	r2, lr
     ec4:	4673      	mov	r3, lr
     ec6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     eca:	f38e 8c00 	msr	CPSR_fs, lr
     ece:	b410      	push	{r4}
     ed0:	eef1 ca10 	vmrs	ip, fpscr
     ed4:	f64f 7460 	movw	r4, #65376	; 0xff60
     ed8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     edc:	ea0c 0c04 	and.w	ip, ip, r4
     ee0:	eee1 ca10 	vmsr	fpscr, ip
     ee4:	bc10      	pop	{r4}
     ee6:	46f4      	mov	ip, lr
     ee8:	4774      	bxns	lr
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     eea:	2200      	movs	r2, #0
		if (expected_8[i] != actual_8[i]) {
     eec:	5c98      	ldrb	r0, [r3, r2]
     eee:	5ca9      	ldrb	r1, [r5, r2]
     ef0:	4288      	cmp	r0, r1
     ef2:	d1bf      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
	for (u32_t i = 0; i < len; i++) {
     ef4:	3201      	adds	r2, #1
     ef6:	2a0c      	cmp	r2, #12
     ef8:	d1f8      	bne.n	eec <__acle_se_spm_firmware_info+0xc4>
		if (finfo) {
     efa:	2b00      	cmp	r3, #0
     efc:	d0ba      	beq.n	e74 <__acle_se_spm_firmware_info+0x4c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     efe:	2220      	movs	r2, #32
     f00:	4619      	mov	r1, r3
     f02:	4638      	mov	r0, r7
     f04:	f003 faad 	bl	4462 <memcpy>
		return 0;
     f08:	2000      	movs	r0, #0
     f0a:	e7b8      	b.n	e7e <__acle_se_spm_firmware_info+0x56>
		return -EINVAL;
     f0c:	f06f 0015 	mvn.w	r0, #21
     f10:	e7b5      	b.n	e7e <__acle_se_spm_firmware_info+0x56>
     f12:	bf00      	nop
     f14:	00004b10 	.word	0x00004b10
     f18:	00004d38 	.word	0x00004d38
     f1c:	281ee6de 	.word	0x281ee6de
     f20:	8fcebb4c 	.word	0x8fcebb4c

00000f24 <adp536x_reg_read>:


static struct device *i2c_dev;

static int adp536x_reg_read(u8_t reg, u8_t *buff)
{
     f24:	b530      	push	{r4, r5, lr}
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
     f26:	4b0d      	ldr	r3, [pc, #52]	; (f5c <adp536x_reg_read+0x38>)
{
     f28:	b089      	sub	sp, #36	; 0x24
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
     f2a:	681c      	ldr	r4, [r3, #0]
     f2c:	ab08      	add	r3, sp, #32
     f2e:	f803 0d19 	strb.w	r0, [r3, #-25]!
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
     f32:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
     f34:	2301      	movs	r3, #1
	msg[0].flags = I2C_MSG_WRITE;
     f36:	2200      	movs	r2, #0
	msg[0].len = num_write;
     f38:	9303      	str	r3, [sp, #12]

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
     f3a:	e9cd 1305 	strd	r1, r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     f3e:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
     f40:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     f44:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
     f48:	6863      	ldr	r3, [r4, #4]
     f4a:	2202      	movs	r2, #2
     f4c:	685d      	ldr	r5, [r3, #4]
     f4e:	a902      	add	r1, sp, #8
     f50:	2346      	movs	r3, #70	; 0x46
     f52:	4620      	mov	r0, r4
     f54:	47a8      	blx	r5
}
     f56:	b009      	add	sp, #36	; 0x24
     f58:	bd30      	pop	{r4, r5, pc}
     f5a:	bf00      	nop
     f5c:	20000028 	.word	0x20000028

00000f60 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(u8_t reg_addr,
			       u32_t mask,
			       u8_t data)
{
     f60:	b570      	push	{r4, r5, r6, lr}
     f62:	b086      	sub	sp, #24
     f64:	460e      	mov	r6, r1
	int err;
	u8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
     f66:	f10d 0107 	add.w	r1, sp, #7
{
     f6a:	4605      	mov	r5, r0
     f6c:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
     f6e:	f7ff ffd9 	bl	f24 <adp536x_reg_read>
	if (err) {
     f72:	b9c0      	cbnz	r0, fa6 <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
     f74:	4b0d      	ldr	r3, [pc, #52]	; (fac <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
     f76:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
     f7a:	6818      	ldr	r0, [r3, #0]
	msg.buf = (u8_t *)buf;
     f7c:	ab02      	add	r3, sp, #8
     f7e:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
     f80:	2302      	movs	r3, #2
	tmp &= ~mask;
     f82:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
     f86:	4322      	orrs	r2, r4
     f88:	f88d 2007 	strb.w	r2, [sp, #7]
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
     f8c:	f88d 5008 	strb.w	r5, [sp, #8]
     f90:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
     f94:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     f96:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
     f9a:	6843      	ldr	r3, [r0, #4]
     f9c:	2201      	movs	r2, #1
     f9e:	685c      	ldr	r4, [r3, #4]
     fa0:	a903      	add	r1, sp, #12
     fa2:	2346      	movs	r3, #70	; 0x46
     fa4:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
     fa6:	b006      	add	sp, #24
     fa8:	bd70      	pop	{r4, r5, r6, pc}
     faa:	bf00      	nop
     fac:	20000028 	.word	0x20000028

00000fb0 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
     fb0:	b508      	push	{r3, lr}
     fb2:	f001 f989 	bl	22c8 <z_impl_device_get_binding>
	int err = 0;

	i2c_dev = device_get_binding(dev_name);
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <adp536x_init+0x10>)
     fb8:	6018      	str	r0, [r3, #0]
	if (err) {
		err = -ENODEV;
	}

	return err;
}
     fba:	2000      	movs	r0, #0
     fbc:	bd08      	pop	{r3, pc}
     fbe:	bf00      	nop
     fc0:	20000028 	.word	0x20000028

00000fc4 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     fc4:	4801      	ldr	r0, [pc, #4]	; (fcc <nrf_cc310_platform_abort_init+0x8>)
     fc6:	f002 b9ab 	b.w	3320 <nrf_cc310_platform_set_abort>
     fca:	bf00      	nop
     fcc:	00004d44 	.word	0x00004d44

00000fd0 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     fd0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     fd2:	b130      	cbz	r0, fe2 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     fd4:	6843      	ldr	r3, [r0, #4]
     fd6:	b13b      	cbz	r3, fe8 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     fd8:	6800      	ldr	r0, [r0, #0]
     fda:	f001 fb63 	bl	26a4 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     fde:	2000      	movs	r0, #0
}
     fe0:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     fe2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     fe6:	e7fb      	b.n	fe0 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     fe8:	4800      	ldr	r0, [pc, #0]	; (fec <mutex_unlock+0x1c>)
     fea:	e7f9      	b.n	fe0 <mutex_unlock+0x10>
     fec:	ffff8fea 	.word	0xffff8fea

00000ff0 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     ff0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     ff2:	b158      	cbz	r0, 100c <CONFIG_AT_HOST_CMD_MAX_LEN+0xc>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     ff4:	6843      	ldr	r3, [r0, #4]
     ff6:	b163      	cbz	r3, 1012 <CONFIG_AT_HOST_CMD_MAX_LEN+0x12>
    p_mutex = (struct k_mutex *)mutex->mutex;
     ff8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     ffa:	f04f 31ff 	mov.w	r1, #4294967295
     ffe:	f001 fadf 	bl	25c0 <z_impl_k_mutex_lock>
    if (ret == 0) {
    1002:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    1004:	4804      	ldr	r0, [pc, #16]	; (1018 <CONFIG_AT_HOST_CMD_MAX_LEN+0x18>)
    1006:	bf08      	it	eq
    1008:	2000      	moveq	r0, #0
}
    100a:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    100c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1010:	e7fb      	b.n	100a <CONFIG_AT_HOST_CMD_MAX_LEN+0xa>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1012:	4802      	ldr	r0, [pc, #8]	; (101c <CONFIG_AT_HOST_CMD_MAX_LEN+0x1c>)
    1014:	e7f9      	b.n	100a <CONFIG_AT_HOST_CMD_MAX_LEN+0xa>
    1016:	bf00      	nop
    1018:	ffff8fe9 	.word	0xffff8fe9
    101c:	ffff8fea 	.word	0xffff8fea

00001020 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    1020:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    1022:	4604      	mov	r4, r0
    1024:	b918      	cbnz	r0, 102e <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    1026:	4b0b      	ldr	r3, [pc, #44]	; (1054 <mutex_free+0x34>)
    1028:	480b      	ldr	r0, [pc, #44]	; (1058 <mutex_free+0x38>)
    102a:	685b      	ldr	r3, [r3, #4]
    102c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    102e:	6865      	ldr	r5, [r4, #4]
    1030:	b155      	cbz	r5, 1048 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    1032:	f015 0502 	ands.w	r5, r5, #2
    1036:	6820      	ldr	r0, [r4, #0]
    1038:	d107      	bne.n	104a <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    103a:	4601      	mov	r1, r0
    103c:	4807      	ldr	r0, [pc, #28]	; (105c <mutex_free+0x3c>)
    103e:	f001 fa91 	bl	2564 <k_mem_slab_free>
        mutex->mutex = NULL;
    1042:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    1044:	2300      	movs	r3, #0
    1046:	6063      	str	r3, [r4, #4]
}
    1048:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    104a:	2214      	movs	r2, #20
    104c:	2100      	movs	r1, #0
    104e:	f003 fa35 	bl	44bc <memset>
    1052:	e7f7      	b.n	1044 <mutex_free+0x24>
    1054:	20001488 	.word	0x20001488
    1058:	0000519c 	.word	0x0000519c
    105c:	2000002c 	.word	0x2000002c

00001060 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    1060:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1062:	4604      	mov	r4, r0
    1064:	b918      	cbnz	r0, 106e <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    1066:	4b13      	ldr	r3, [pc, #76]	; (10b4 <mutex_init+0x54>)
    1068:	4813      	ldr	r0, [pc, #76]	; (10b8 <mutex_init+0x58>)
    106a:	685b      	ldr	r3, [r3, #4]
    106c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    106e:	6863      	ldr	r3, [r4, #4]
    1070:	b9bb      	cbnz	r3, 10a2 <mutex_init+0x42>
    1072:	6823      	ldr	r3, [r4, #0]
    1074:	b9ab      	cbnz	r3, 10a2 <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1076:	f04f 32ff 	mov.w	r2, #4294967295
    107a:	4621      	mov	r1, r4
    107c:	480f      	ldr	r0, [pc, #60]	; (10bc <mutex_init+0x5c>)
    107e:	f001 fa43 	bl	2508 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1082:	b908      	cbnz	r0, 1088 <mutex_init+0x28>
    1084:	6823      	ldr	r3, [r4, #0]
    1086:	b91b      	cbnz	r3, 1090 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <mutex_init+0x54>)
    108a:	480d      	ldr	r0, [pc, #52]	; (10c0 <mutex_init+0x60>)
    108c:	685b      	ldr	r3, [r3, #4]
    108e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1090:	2214      	movs	r2, #20
    1092:	2100      	movs	r1, #0
    1094:	6820      	ldr	r0, [r4, #0]
    1096:	f003 fa11 	bl	44bc <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    109a:	6863      	ldr	r3, [r4, #4]
    109c:	f043 0302 	orr.w	r3, r3, #2
    10a0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    10a2:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
    10a4:	f003 fabd 	bl	4622 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    10a8:	6863      	ldr	r3, [r4, #4]
    10aa:	f043 0301 	orr.w	r3, r3, #1
    10ae:	6063      	str	r3, [r4, #4]
}
    10b0:	bd10      	pop	{r4, pc}
    10b2:	bf00      	nop
    10b4:	20001488 	.word	0x20001488
    10b8:	0000519c 	.word	0x0000519c
    10bc:	2000002c 	.word	0x2000002c
    10c0:	000051c2 	.word	0x000051c2

000010c4 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    10c4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    10c6:	4906      	ldr	r1, [pc, #24]	; (10e0 <nrf_cc310_platform_mutex_init+0x1c>)
    10c8:	2340      	movs	r3, #64	; 0x40
    10ca:	4806      	ldr	r0, [pc, #24]	; (10e4 <nrf_cc310_platform_mutex_init+0x20>)
    10cc:	2214      	movs	r2, #20
    10ce:	f003 fa96 	bl	45fe <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    10d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    10d6:	4904      	ldr	r1, [pc, #16]	; (10e8 <nrf_cc310_platform_mutex_init+0x24>)
    10d8:	4804      	ldr	r0, [pc, #16]	; (10ec <nrf_cc310_platform_mutex_init+0x28>)
    10da:	f002 b959 	b.w	3390 <nrf_cc310_platform_set_mutexes>
    10de:	bf00      	nop
    10e0:	20000048 	.word	0x20000048
    10e4:	2000002c 	.word	0x2000002c
    10e8:	00004d5c 	.word	0x00004d5c
    10ec:	00004d4c 	.word	0x00004d4c

000010f0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    10f0:	4804      	ldr	r0, [pc, #16]	; (1104 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    10f2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    10f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    10f6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    10f8:	d003      	beq.n	1102 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    10fa:	4903      	ldr	r1, [pc, #12]	; (1108 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    10fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1100:	600a      	str	r2, [r1, #0]

00001102 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1102:	4770      	bx	lr
    ldr r0, =_kernel
    1104:	20000668 	.word	0x20000668
    ldr r1, =_SCS_ICSR
    1108:	e000ed04 	.word	0xe000ed04

0000110c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    110c:	4912      	ldr	r1, [pc, #72]	; (1158 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    110e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1110:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1114:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1116:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    111a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    111e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1120:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1124:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1128:	4f0c      	ldr	r7, [pc, #48]	; (115c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    112a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    112e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1130:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1132:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1134:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    1136:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1138:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    113a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    113e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1140:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1142:	f003 f940 	bl	43c6 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1146:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    114a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    114e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1152:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1156:	4770      	bx	lr
    ldr r1, =_kernel
    1158:	20000668 	.word	0x20000668
    ldr v4, =_SCS_ICSR
    115c:	e000ed04 	.word	0xe000ed04

00001160 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    1160:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1164:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1166:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    116a:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    116e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    1170:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1174:	2902      	cmp	r1, #2
    beq _oops
    1176:	d0ff      	beq.n	1178 <_oops>

00001178 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1178:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    117a:	f003 f919 	bl	43b0 <z_do_kernel_oops>
    pop {r0, pc}
    117e:	bd01      	pop	{r0, pc}

00001180 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    1180:	4901      	ldr	r1, [pc, #4]	; (1188 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1182:	2210      	movs	r2, #16
	str r2, [r1]
    1184:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    1186:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1188:	e000ed10 	.word	0xe000ed10

0000118c <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    118c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    118e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1192:	bf30      	wfi

	bx lr
    1194:	4770      	bx	lr
    1196:	bf00      	nop

00001198 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1198:	4040      	eors	r0, r0
	msr BASEPRI, r0
    119a:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    119e:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    11a2:	4671      	mov	r1, lr
	tst r1, r0
    11a4:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    11a6:	d002      	beq.n	11ae <_s_stack_frame_msp>
	mrs r0, PSP
    11a8:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    11ac:	d101      	bne.n	11b2 <_s_stack_frame_endif>

000011ae <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    11ae:	f3ef 8008 	mrs	r0, MSP

000011b2 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    11b2:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    11b4:	b501      	push	{r0, lr}
	bl z_arm_fault
    11b6:	f000 f961 	bl	147c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    11ba:	bd01      	pop	{r0, pc}

000011bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    11bc:	bf30      	wfi
    b z_SysNmiOnReset
    11be:	f7ff bffd 	b.w	11bc <z_SysNmiOnReset>
    11c2:	bf00      	nop

000011c4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    11c4:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    11c6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    11c8:	4a0b      	ldr	r2, [pc, #44]	; (11f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    11ca:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    11cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    11ce:	bf1e      	ittt	ne
	movne	r1, #0
    11d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    11d2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    11d4:	f003 fa11 	blne	45fa <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    11d8:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    11da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    11de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    11e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    11e6:	4905      	ldr	r1, [pc, #20]	; (11fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    11e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    11ea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    11ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    11ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    11f2:	4903      	ldr	r1, [pc, #12]	; (1200 <_isr_wrapper+0x3c>)
	bx r1
    11f4:	4708      	bx	r1
    11f6:	0000      	.short	0x0000
	ldr r2, =_kernel
    11f8:	20000668 	.word	0x20000668
	ldr r1, =_sw_isr_table
    11fc:	00004878 	.word	0x00004878
	ldr r1, =z_arm_int_exit
    1200:	000010f1 	.word	0x000010f1

00001204 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1204:	4a09      	ldr	r2, [pc, #36]	; (122c <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1206:	490a      	ldr	r1, [pc, #40]	; (1230 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    1208:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    120a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    120c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    120e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1210:	4908      	ldr	r1, [pc, #32]	; (1234 <z_arch_swap+0x30>)
    1212:	684b      	ldr	r3, [r1, #4]
    1214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1218:	604b      	str	r3, [r1, #4]
    121a:	2300      	movs	r3, #0
    121c:	f383 8811 	msr	BASEPRI, r3
    1220:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1224:	6893      	ldr	r3, [r2, #8]
}
    1226:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1228:	4770      	bx	lr
    122a:	bf00      	nop
    122c:	20000668 	.word	0x20000668
    1230:	00004dc8 	.word	0x00004dc8
    1234:	e000ed00 	.word	0xe000ed00

00001238 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1238:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    123a:	2b00      	cmp	r3, #0
    123c:	db08      	blt.n	1250 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    123e:	2201      	movs	r2, #1
    1240:	f000 001f 	and.w	r0, r0, #31
    1244:	fa02 f000 	lsl.w	r0, r2, r0
    1248:	4a02      	ldr	r2, [pc, #8]	; (1254 <z_arch_irq_enable+0x1c>)
    124a:	095b      	lsrs	r3, r3, #5
    124c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	e000e100 	.word	0xe000e100

00001258 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1258:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    125a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    125c:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1260:	bfa8      	it	ge
    1262:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    1266:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    126a:	bfb8      	it	lt
    126c:	4b05      	ldrlt	r3, [pc, #20]	; (1284 <z_arm_irq_priority_set+0x2c>)
    126e:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1270:	bfab      	itete	ge
    1272:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1276:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    127a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    127e:	5419      	strblt	r1, [r3, r0]
}
    1280:	4770      	bx	lr
    1282:	bf00      	nop
    1284:	e000ed14 	.word	0xe000ed14

00001288 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    1288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    128c:	188c      	adds	r4, r1, r2
{
    128e:	4688      	mov	r8, r1
    1290:	4617      	mov	r7, r2
    1292:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1294:	2204      	movs	r2, #4
    1296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1298:	9909      	ldr	r1, [sp, #36]	; 0x24
    129a:	4605      	mov	r5, r0
    129c:	f003 fa9e 	bl	47dc <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    12a0:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    12a2:	490d      	ldr	r1, [pc, #52]	; (12d8 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    12a4:	f1a4 0320 	sub.w	r3, r4, #32
    12a8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    12ac:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    12b0:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    12b4:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    12b8:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    12ba:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    12bc:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    12be:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    12c0:	9907      	ldr	r1, [sp, #28]
    12c2:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    12c4:	9908      	ldr	r1, [sp, #32]
    12c6:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    12c8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    12cc:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    12ce:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    12d0:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    12d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12d6:	bf00      	nop
    12d8:	00003d9d 	.word	0x00003d9d

000012dc <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    12dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12de:	461e      	mov	r6, r3
    12e0:	4605      	mov	r5, r0
    12e2:	460c      	mov	r4, r1
    12e4:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    12e6:	2300      	movs	r3, #0
    12e8:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    12ec:	f000 f96e 	bl	15cc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    12f0:	4b0b      	ldr	r3, [pc, #44]	; (1320 <z_arch_switch_to_main_thread+0x44>)
	start_of_main_stack =
    12f2:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    12f4:	4628      	mov	r0, r5
	_current = main_thread;
    12f6:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    12f8:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    12fc:	f003 f863 	bl	43c6 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1300:	4630      	mov	r0, r6
    1302:	f384 8809 	msr	PSP, r4
    1306:	b663      	cpsie	if
    1308:	f04f 0100 	mov.w	r1, #0
    130c:	f381 8811 	msr	BASEPRI, r1
    1310:	f3bf 8f6f 	isb	sy
    1314:	2100      	movs	r1, #0
    1316:	2200      	movs	r2, #0
    1318:	2300      	movs	r3, #0
    131a:	f002 fd3f 	bl	3d9c <z_thread_entry>
    131e:	bf00      	nop
    1320:	20000668 	.word	0x20000668

00001324 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1324:	4a11      	ldr	r2, [pc, #68]	; (136c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1326:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1328:	4b11      	ldr	r3, [pc, #68]	; (1370 <z_arm_prep_c+0x4c>)
    132a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    132e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1334:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1338:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    133c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1344:	4a0b      	ldr	r2, [pc, #44]	; (1374 <z_arm_prep_c+0x50>)
    1346:	6853      	ldr	r3, [r2, #4]
    1348:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    134c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    134e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1352:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1356:	2300      	movs	r3, #0
    1358:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    135c:	f000 fff4 	bl	2348 <z_bss_zero>
	z_data_copy();
    1360:	f000 fffc 	bl	235c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    1364:	f000 f900 	bl	1568 <z_arm_int_lib_init>
	z_cstart();
    1368:	f001 f82a 	bl	23c0 <z_cstart>
    136c:	00000000 	.word	0x00000000
    1370:	e000ed00 	.word	0xe000ed00
    1374:	e000ef30 	.word	0xe000ef30

00001378 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1378:	f002 feae 	bl	40d8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    137c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    137e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    1382:	4808      	ldr	r0, [pc, #32]	; (13a4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1384:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1388:	1840      	adds	r0, r0, r1
    msr PSP, r0
    138a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    138e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1392:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1394:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1396:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    139a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    139e:	f7ff ffc1 	bl	1324 <z_arm_prep_c>
    13a2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    13a4:	20000c08 	.word	0x20000c08

000013a8 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    13a8:	4b0c      	ldr	r3, [pc, #48]	; (13dc <mem_manage_fault.isra.2+0x34>)
    13aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    13ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13b0:	0792      	lsls	r2, r2, #30
    13b2:	d508      	bpl.n	13c6 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    13b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    13b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13b8:	0612      	lsls	r2, r2, #24
    13ba:	d504      	bpl.n	13c6 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    13bc:	b118      	cbz	r0, 13c6 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    13be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    13c6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    13c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    13ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    13cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    13ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13d0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    13d4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    13d6:	7008      	strb	r0, [r1, #0]

	return reason;
}
    13d8:	4770      	bx	lr
    13da:	bf00      	nop
    13dc:	e000ed00 	.word	0xe000ed00

000013e0 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    13e0:	4b0d      	ldr	r3, [pc, #52]	; (1418 <bus_fault.isra.3+0x38>)
    13e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    13e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    13e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13e8:	0592      	lsls	r2, r2, #22
    13ea:	d508      	bpl.n	13fe <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    13ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    13ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13f0:	0412      	lsls	r2, r2, #16
    13f2:	d504      	bpl.n	13fe <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    13f4:	b118      	cbz	r0, 13fe <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    13f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    13fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    13fe:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1404:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1406:	4a04      	ldr	r2, [pc, #16]	; (1418 <bus_fault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1408:	bf58      	it	pl
    140a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    140c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    140e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1412:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1414:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1416:	4770      	bx	lr
    1418:	e000ed00 	.word	0xe000ed00

0000141c <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    141c:	4b07      	ldr	r3, [pc, #28]	; (143c <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    141e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    142a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    142e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1430:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1434:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1438:	629a      	str	r2, [r3, #40]	; 0x28
}
    143a:	4770      	bx	lr
    143c:	e000ed00 	.word	0xe000ed00

00001440 <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1440:	4b0d      	ldr	r3, [pc, #52]	; (1478 <secure_fault.isra.5+0x38>)
    1442:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1444:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1446:	695a      	ldr	r2, [r3, #20]
    1448:	07d0      	lsls	r0, r2, #31
    144a:	d40f      	bmi.n	146c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    144c:	695a      	ldr	r2, [r3, #20]
    144e:	0791      	lsls	r1, r2, #30
    1450:	d40c      	bmi.n	146c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1452:	695a      	ldr	r2, [r3, #20]
    1454:	0752      	lsls	r2, r2, #29
    1456:	d409      	bmi.n	146c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1458:	695a      	ldr	r2, [r3, #20]
    145a:	0710      	lsls	r0, r2, #28
    145c:	d406      	bmi.n	146c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    145e:	695a      	ldr	r2, [r3, #20]
    1460:	06d1      	lsls	r1, r2, #27
    1462:	d403      	bmi.n	146c <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1464:	695a      	ldr	r2, [r3, #20]
    1466:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1468:	bf58      	it	pl
    146a:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    146c:	695a      	ldr	r2, [r3, #20]
    146e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1472:	615a      	str	r2, [r3, #20]
}
    1474:	4770      	bx	lr
    1476:	bf00      	nop
    1478:	e000edd0 	.word	0xe000edd0

0000147c <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    147c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    147e:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1480:	4a31      	ldr	r2, [pc, #196]	; (1548 <z_arm_fault+0xcc>)
	bool recoverable;

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1482:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    1486:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    148a:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    148c:	d159      	bne.n	1542 <z_arm_fault+0xc6>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    148e:	f011 0001 	ands.w	r0, r1, #1
    1492:	d00a      	beq.n	14aa <z_arm_fault+0x2e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1494:	0648      	lsls	r0, r1, #25
    1496:	d411      	bmi.n	14bc <z_arm_fault+0x40>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1498:	f011 0008 	ands.w	r0, r1, #8
    149c:	d009      	beq.n	14b2 <z_arm_fault+0x36>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    149e:	f3ef 8489 	mrs	r4, PSP_NS
			esf = (z_arch_esf_t *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    14a2:	6850      	ldr	r0, [r2, #4]
    14a4:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    14a8:	d108      	bne.n	14bc <z_arm_fault+0x40>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    14aa:	4621      	mov	r1, r4
    14ac:	f002 ff7e 	bl	43ac <z_arm_fatal_error>
    14b0:	e025      	b.n	14fe <z_arm_fault+0x82>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    14b2:	f3ef 8488 	mrs	r4, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    14b6:	6852      	ldr	r2, [r2, #4]
    14b8:	0511      	lsls	r1, r2, #20
    14ba:	d4f6      	bmi.n	14aa <z_arm_fault+0x2e>
	*recoverable = false;
    14bc:	2200      	movs	r2, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    14be:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    14c2:	3b03      	subs	r3, #3
	*recoverable = false;
    14c4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    14c8:	2b04      	cmp	r3, #4
    14ca:	d830      	bhi.n	152e <z_arm_fault+0xb2>
    14cc:	e8df f003 	tbb	[pc, r3]
    14d0:	26353103 	.word	0x26353103
    14d4:	2d          	.byte	0x2d
    14d5:	00          	.byte	0x00
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    14d6:	4b1c      	ldr	r3, [pc, #112]	; (1548 <z_arm_fault+0xcc>)
    14d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14da:	0792      	lsls	r2, r2, #30
    14dc:	d427      	bmi.n	152e <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    14de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    14e0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    14e4:	d007      	beq.n	14f6 <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    14e6:	3328      	adds	r3, #40	; 0x28
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	b153      	cbz	r3, 1502 <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    14ec:	2001      	movs	r0, #1
    14ee:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    14f2:	f7ff ff59 	bl	13a8 <mem_manage_fault.isra.2>
	if (recoverable) {
    14f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    14fa:	2b00      	cmp	r3, #0
    14fc:	d0d5      	beq.n	14aa <z_arm_fault+0x2e>
}
    14fe:	b003      	add	sp, #12
    1500:	bd30      	pop	{r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    1502:	4b12      	ldr	r3, [pc, #72]	; (154c <z_arm_fault+0xd0>)
    1504:	781b      	ldrb	r3, [r3, #0]
    1506:	b12b      	cbz	r3, 1514 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    1508:	2001      	movs	r0, #1
    150a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    150e:	f7ff ff67 	bl	13e0 <bus_fault.isra.3>
    1512:	e7f0      	b.n	14f6 <z_arm_fault+0x7a>
		} else if (SCB_UFSR != 0) {
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <z_arm_fault+0xd4>)
    1516:	8818      	ldrh	r0, [r3, #0]
    1518:	b285      	uxth	r5, r0
    151a:	b115      	cbz	r5, 1522 <z_arm_fault+0xa6>
		reason = usage_fault(esf);
    151c:	f7ff ff7e 	bl	141c <usage_fault.isra.4>
    1520:	e7e9      	b.n	14f6 <z_arm_fault+0x7a>
		} else if (SAU->SFSR != 0) {
    1522:	4b0c      	ldr	r3, [pc, #48]	; (1554 <z_arm_fault+0xd8>)
    1524:	6958      	ldr	r0, [r3, #20]
    1526:	2800      	cmp	r0, #0
    1528:	d0e5      	beq.n	14f6 <z_arm_fault+0x7a>
		secure_fault(esf);
    152a:	f7ff ff89 	bl	1440 <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    152e:	2000      	movs	r0, #0
    1530:	e7e1      	b.n	14f6 <z_arm_fault+0x7a>
		reason = mem_manage_fault(esf, 0, recoverable);
    1532:	f10d 0107 	add.w	r1, sp, #7
    1536:	2000      	movs	r0, #0
    1538:	e7db      	b.n	14f2 <z_arm_fault+0x76>
		reason = bus_fault(esf, 0, recoverable);
    153a:	f10d 0107 	add.w	r1, sp, #7
    153e:	2000      	movs	r0, #0
    1540:	e7e5      	b.n	150e <z_arm_fault+0x92>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1542:	2000      	movs	r0, #0
    1544:	e7b1      	b.n	14aa <z_arm_fault+0x2e>
    1546:	bf00      	nop
    1548:	e000ed00 	.word	0xe000ed00
    154c:	e000ed29 	.word	0xe000ed29
    1550:	e000ed2a 	.word	0xe000ed2a
    1554:	e000edd0 	.word	0xe000edd0

00001558 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1558:	4a02      	ldr	r2, [pc, #8]	; (1564 <z_arm_fault_init+0xc>)
    155a:	6953      	ldr	r3, [r2, #20]
    155c:	f043 0310 	orr.w	r3, r3, #16
    1560:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1562:	4770      	bx	lr
    1564:	e000ed00 	.word	0xe000ed00

00001568 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1568:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    156a:	2120      	movs	r1, #32
    156c:	4803      	ldr	r0, [pc, #12]	; (157c <z_arm_int_lib_init+0x14>)
    156e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1570:	3301      	adds	r3, #1
    1572:	2b41      	cmp	r3, #65	; 0x41
    1574:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1578:	d1f9      	bne.n	156e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    157a:	4770      	bx	lr
    157c:	e000e100 	.word	0xe000e100

00001580 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1580:	b538      	push	{r3, r4, r5, lr}
    1582:	4605      	mov	r5, r0
	__asm__ volatile(
    1584:	f04f 0320 	mov.w	r3, #32
    1588:	f3ef 8411 	mrs	r4, BASEPRI
    158c:	f383 8811 	msr	BASEPRI, r3
    1590:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1594:	f003 f903 	bl	479e <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1598:	4b0a      	ldr	r3, [pc, #40]	; (15c4 <z_impl_k_thread_abort+0x44>)
    159a:	689b      	ldr	r3, [r3, #8]
    159c:	42ab      	cmp	r3, r5
    159e:	d10b      	bne.n	15b8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    15a0:	4b09      	ldr	r3, [pc, #36]	; (15c8 <z_impl_k_thread_abort+0x48>)
    15a2:	685a      	ldr	r2, [r3, #4]
    15a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    15a8:	b912      	cbnz	r2, 15b0 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    15aa:	4620      	mov	r0, r4
    15ac:	f7ff fe2a 	bl	1204 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15b0:	685a      	ldr	r2, [r3, #4]
    15b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    15b6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    15b8:	4620      	mov	r0, r4
}
    15ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    15be:	f003 b867 	b.w	4690 <z_reschedule_irqlock>
    15c2:	bf00      	nop
    15c4:	20000668 	.word	0x20000668
    15c8:	e000ed00 	.word	0xe000ed00

000015cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    15cc:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    15ce:	4b0e      	ldr	r3, [pc, #56]	; (1608 <z_arm_configure_static_mpu_regions+0x3c>)
{
    15d0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    15d2:	9302      	str	r3, [sp, #8]
    15d4:	4b0d      	ldr	r3, [pc, #52]	; (160c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    15d6:	4c0e      	ldr	r4, [pc, #56]	; (1610 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    15d8:	9303      	str	r3, [sp, #12]
    15da:	4b0e      	ldr	r3, [pc, #56]	; (1614 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    15dc:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    15de:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    15e0:	ab02      	add	r3, sp, #8
    15e2:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    15e6:	4a0c      	ldr	r2, [pc, #48]	; (1618 <z_arm_configure_static_mpu_regions+0x4c>)
    15e8:	4623      	mov	r3, r4
    15ea:	2101      	movs	r1, #1
    15ec:	f000 f902 	bl	17f4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    15f0:	2300      	movs	r3, #0
    15f2:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    15f4:	4b09      	ldr	r3, [pc, #36]	; (161c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    15f6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    15f8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    15fa:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    15fc:	9305      	str	r3, [sp, #20]
    15fe:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1600:	f000 f902 	bl	1808 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1604:	b008      	add	sp, #32
    1606:	bd10      	pop	{r4, pc}
    1608:	20000000 	.word	0x20000000
    160c:	00000000 	.word	0x00000000
    1610:	20010000 	.word	0x20010000
    1614:	00010006 	.word	0x00010006
    1618:	20000000 	.word	0x20000000
    161c:	20000000 	.word	0x20000000

00001620 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1620:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1622:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1624:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1626:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    162a:	f004 021f 	and.w	r2, r4, #31
    162e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1630:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1632:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1634:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1638:	4904      	ldr	r1, [pc, #16]	; (164c <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    163a:	f043 0301 	orr.w	r3, r3, #1
    163e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    1642:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1644:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1646:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1648:	bd10      	pop	{r4, pc}
    164a:	bf00      	nop
    164c:	e000ed90 	.word	0xe000ed90

00001650 <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    1650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1654:	4680      	mov	r8, r0
    1656:	4689      	mov	r9, r1
    1658:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    165a:	2700      	movs	r7, #0
	MPU->RNR = index;
    165c:	4d48      	ldr	r5, [pc, #288]	; (1780 <mpu_configure_regions.constprop.1+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    165e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1660:	454f      	cmp	r7, r9
    1662:	da07      	bge.n	1674 <mpu_configure_regions.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    1664:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    1668:	685e      	ldr	r6, [r3, #4]
    166a:	b3c6      	cbz	r6, 16de <mpu_configure_regions.constprop.1+0x8e>
		&&
    166c:	2e1f      	cmp	r6, #31
    166e:	d805      	bhi.n	167c <mpu_configure_regions.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1670:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1674:	4620      	mov	r0, r4
    1676:	b005      	add	sp, #20
    1678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    167c:	06f2      	lsls	r2, r6, #27
    167e:	d1f7      	bne.n	1670 <mpu_configure_regions.constprop.1+0x20>
		((part->start &
    1680:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1684:	f01a 0f1f 	tst.w	sl, #31
    1688:	d1f2      	bne.n	1670 <mpu_configure_regions.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    168a:	4650      	mov	r0, sl
    168c:	f002 fb31 	bl	3cf2 <arm_cmse_mpu_region_get>
    1690:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1692:	eb06 000a 	add.w	r0, r6, sl
    1696:	3801      	subs	r0, #1
    1698:	f002 fb2b 	bl	3cf2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    169c:	4583      	cmp	fp, r0
    169e:	d1e7      	bne.n	1670 <mpu_configure_regions.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    16a0:	f11b 0f16 	cmn.w	fp, #22
    16a4:	d0e4      	beq.n	1670 <mpu_configure_regions.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    16a6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    16a8:	455b      	cmp	r3, fp
    16aa:	dbe1      	blt.n	1670 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    16ac:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    16b0:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    16b2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    16b6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    16ba:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    16bc:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    16c0:	e9d1 3200 	ldrd	r3, r2, [r1]
    16c4:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    16c6:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    16c8:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    16cc:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    16d0:	d118      	bne.n	1704 <mpu_configure_regions.constprop.1+0xb4>
    16d2:	4556      	cmp	r6, sl
    16d4:	d105      	bne.n	16e2 <mpu_configure_regions.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    16d6:	fa5f f08b 	uxtb.w	r0, fp
    16da:	f002 fe7c 	bl	43d6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    16de:	3701      	adds	r7, #1
    16e0:	e7be      	b.n	1660 <mpu_configure_regions.constprop.1+0x10>
	MPU->RNR = index;
    16e2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    16e6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    16e8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    16ec:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    16f0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    16f2:	60ea      	str	r2, [r5, #12]
			reg_index =
    16f4:	b2e0      	uxtb	r0, r4
			reg_index =
    16f6:	f002 fe6e 	bl	43d6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    16fa:	f110 0f16 	cmn.w	r0, #22
    16fe:	d0b7      	beq.n	1670 <mpu_configure_regions.constprop.1+0x20>
			reg_index++;
    1700:	1c44      	adds	r4, r0, #1
    1702:	e7ec      	b.n	16de <mpu_configure_regions.constprop.1+0x8e>
	MPU->RNR = index;
    1704:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1708:	692a      	ldr	r2, [r5, #16]
    170a:	3b01      	subs	r3, #1
    170c:	f023 031f 	bic.w	r3, r3, #31
    1710:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1714:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1716:	4556      	cmp	r6, sl
    1718:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    171a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    171c:	d0eb      	beq.n	16f6 <mpu_configure_regions.constprop.1+0xa6>
			reg_index =
    171e:	f002 fe5a 	bl	43d6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1722:	f110 0f16 	cmn.w	r0, #22
    1726:	d0a3      	beq.n	1670 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    1728:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    172c:	68ea      	ldr	r2, [r5, #12]
    172e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1732:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    1734:	f362 0304 	bfi	r3, r2, #0, #5
    1738:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    173c:	692b      	ldr	r3, [r5, #16]
    173e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1742:	085b      	lsrs	r3, r3, #1
    1744:	f363 1247 	bfi	r2, r3, #5, #3
    1748:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    174c:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    1750:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    1752:	e9d2 3200 	ldrd	r3, r2, [r2]
    1756:	4413      	add	r3, r2
    1758:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    175a:	f023 031f 	bic.w	r3, r3, #31
    175e:	441e      	add	r6, r3
    1760:	eba6 060a 	sub.w	r6, r6, sl
    1764:	b2c4      	uxtb	r4, r0
    1766:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    176a:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    176c:	9603      	str	r6, [sp, #12]
    176e:	f63f af7f 	bhi.w	1670 <mpu_configure_regions.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1772:	4620      	mov	r0, r4
    1774:	4669      	mov	r1, sp
    1776:	f7ff ff53 	bl	1620 <region_init>
			reg_index++;
    177a:	3401      	adds	r4, #1
    177c:	e7af      	b.n	16de <mpu_configure_regions.constprop.1+0x8e>
    177e:	bf00      	nop
    1780:	e000ed90 	.word	0xe000ed90

00001784 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1784:	2205      	movs	r2, #5
    1786:	4b03      	ldr	r3, [pc, #12]	; (1794 <arm_core_mpu_enable+0x10>)
    1788:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    178a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    178e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1792:	4770      	bx	lr
    1794:	e000ed90 	.word	0xe000ed90

00001798 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1798:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    179c:	2200      	movs	r2, #0
    179e:	4b01      	ldr	r3, [pc, #4]	; (17a4 <arm_core_mpu_disable+0xc>)
    17a0:	605a      	str	r2, [r3, #4]
}
    17a2:	4770      	bx	lr
    17a4:	e000ed90 	.word	0xe000ed90

000017a8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    17a8:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    17aa:	4d0e      	ldr	r5, [pc, #56]	; (17e4 <arm_mpu_init+0x3c>)
    17ac:	682e      	ldr	r6, [r5, #0]
    17ae:	2e10      	cmp	r6, #16
    17b0:	d815      	bhi.n	17de <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17b2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    17b4:	f7ff fff0 	bl	1798 <arm_core_mpu_disable>
	MPU->MAIR0 =
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <arm_mpu_init+0x40>)
    17ba:	4a0c      	ldr	r2, [pc, #48]	; (17ec <arm_mpu_init+0x44>)
    17bc:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17be:	42a6      	cmp	r6, r4
    17c0:	d105      	bne.n	17ce <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    17c2:	4b0b      	ldr	r3, [pc, #44]	; (17f0 <arm_mpu_init+0x48>)
    17c4:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    17c6:	f7ff ffdd 	bl	1784 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    17ca:	2000      	movs	r0, #0
}
    17cc:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    17ce:	6869      	ldr	r1, [r5, #4]
    17d0:	4620      	mov	r0, r4
    17d2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    17d6:	f7ff ff23 	bl	1620 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17da:	3401      	adds	r4, #1
    17dc:	e7ef      	b.n	17be <arm_mpu_init+0x16>
		return -1;
    17de:	f04f 30ff 	mov.w	r0, #4294967295
    17e2:	e7f3      	b.n	17cc <arm_mpu_init+0x24>
    17e4:	00004b1c 	.word	0x00004b1c
    17e8:	e000ed90 	.word	0xe000ed90
    17ec:	0044ffaa 	.word	0x0044ffaa
    17f0:	200006c4 	.word	0x200006c4

000017f4 <arm_core_mpu_configure_static_mpu_regions>:
{
    17f4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    17f6:	4c03      	ldr	r4, [pc, #12]	; (1804 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    17f8:	7822      	ldrb	r2, [r4, #0]
    17fa:	f7ff ff29 	bl	1650 <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    17fe:	7020      	strb	r0, [r4, #0]
}
    1800:	bd10      	pop	{r4, pc}
    1802:	bf00      	nop
    1804:	200006c4 	.word	0x200006c4

00001808 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    180c:	4689      	mov	r9, r1
    180e:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1810:	2600      	movs	r6, #0
    1812:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1816:	f8df a090 	ldr.w	sl, [pc, #144]	; 18a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    181a:	4c21      	ldr	r4, [pc, #132]	; (18a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    181c:	454e      	cmp	r6, r9
    181e:	da19      	bge.n	1854 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    1820:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1824:	f1bb 0f00 	cmp.w	fp, #0
    1828:	d036      	beq.n	1898 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    182a:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    182c:	4618      	mov	r0, r3
    182e:	9301      	str	r3, [sp, #4]
    1830:	f002 fa5f 	bl	3cf2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1834:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1836:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1838:	eb0b 0003 	add.w	r0, fp, r3
    183c:	3801      	subs	r0, #1
    183e:	f002 fa58 	bl	3cf2 <arm_cmse_mpu_region_get>
    1842:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    1844:	4285      	cmp	r5, r0
    1846:	fb03 f306 	mul.w	r3, r3, r6
    184a:	d006      	beq.n	185a <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    184c:	f06f 0215 	mvn.w	r2, #21
    1850:	f848 2003 	str.w	r2, [r8, r3]
}
    1854:	b003      	add	sp, #12
    1856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    185a:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    185e:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    1862:	d0f7      	beq.n	1854 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    1864:	f89a 2000 	ldrb.w	r2, [sl]
    1868:	42aa      	cmp	r2, r5
    186a:	ddf3      	ble.n	1854 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    186c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    186e:	4443      	add	r3, r8
	MPU->RNR = index;
    1870:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    1872:	68e0      	ldr	r0, [r4, #12]
    1874:	7b19      	ldrb	r1, [r3, #12]
    1876:	f360 0104 	bfi	r1, r0, #0, #5
    187a:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    187c:	6921      	ldr	r1, [r4, #16]
    187e:	7b18      	ldrb	r0, [r3, #12]
    1880:	0849      	lsrs	r1, r1, #1
    1882:	f361 1047 	bfi	r0, r1, #5, #3
    1886:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1888:	68e2      	ldr	r2, [r4, #12]
    188a:	f022 021f 	bic.w	r2, r2, #31
    188e:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1890:	6922      	ldr	r2, [r4, #16]
    1892:	f022 021f 	bic.w	r2, r2, #31
    1896:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1898:	3601      	adds	r6, #1
    189a:	370c      	adds	r7, #12
    189c:	e7be      	b.n	181c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    189e:	bf00      	nop
    18a0:	e000ed90 	.word	0xe000ed90
    18a4:	20000548 	.word	0x20000548
    18a8:	200006c4 	.word	0x200006c4

000018ac <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    18ac:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    18ae:	4b0c      	ldr	r3, [pc, #48]	; (18e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    18b0:	460e      	mov	r6, r1
    18b2:	781c      	ldrb	r4, [r3, #0]
    18b4:	4605      	mov	r5, r0
    18b6:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    18b8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    18ba:	4a0a      	ldr	r2, [pc, #40]	; (18e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    18bc:	2b0f      	cmp	r3, #15
    18be:	dd0b      	ble.n	18d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    18c0:	4b09      	ldr	r3, [pc, #36]	; (18e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    18c2:	1d19      	adds	r1, r3, #4
    18c4:	6818      	ldr	r0, [r3, #0]
    18c6:	f7ff feab 	bl	1620 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    18ca:	4622      	mov	r2, r4
    18cc:	4631      	mov	r1, r6
    18ce:	4628      	mov	r0, r5
}
    18d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    18d4:	f7ff bebc 	b.w	1650 <mpu_configure_regions.constprop.1>
    18d8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    18da:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    18dc:	3301      	adds	r3, #1
    18de:	e7ed      	b.n	18bc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    18e0:	200006c4 	.word	0x200006c4
    18e4:	e000ed90 	.word	0xe000ed90
    18e8:	20000548 	.word	0x20000548

000018ec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    18ec:	4b01      	ldr	r3, [pc, #4]	; (18f4 <__stdout_hook_install+0x8>)
    18ee:	6018      	str	r0, [r3, #0]
}
    18f0:	4770      	bx	lr
    18f2:	bf00      	nop
    18f4:	20001430 	.word	0x20001430

000018f8 <pca20035_board_init>:

	return 0;
}

static int pca20035_board_init(struct device *dev)
{
    18f8:	b508      	push	{r3, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    18fa:	4812      	ldr	r0, [pc, #72]	; (1944 <pca20035_board_init+0x4c>)
    18fc:	f7ff fb58 	bl	fb0 <adp536x_init>
	if (err) {
    1900:	b9f0      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_buck_1v8_set();
    1902:	f002 fd11 	bl	4328 <adp536x_buck_1v8_set>
	if (err) {
    1906:	b9d8      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_buckbst_3v3_set();
    1908:	f002 fd1a 	bl	4340 <adp536x_buckbst_3v3_set>
	if (err) {
    190c:	b9c0      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_buckbst_enable(true);
    190e:	2001      	movs	r0, #1
    1910:	f002 fd1b 	bl	434a <adp536x_buckbst_enable>
	if (err) {
    1914:	b9a0      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_buck_discharge_set(true);
    1916:	2001      	movs	r0, #1
    1918:	f002 fd0b 	bl	4332 <adp536x_buck_discharge_set>
	if (err) {
    191c:	b980      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    191e:	2007      	movs	r0, #7
    1920:	f002 fcf0 	bl	4304 <adp536x_vbus_current_set>
	if (err) {
    1924:	b960      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    1926:	201f      	movs	r0, #31
    1928:	f002 fce6 	bl	42f8 <adp536x_charger_current_set>
	if (err) {
    192c:	b940      	cbnz	r0, 1940 <pca20035_board_init+0x48>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    192e:	2007      	movs	r0, #7
    1930:	f002 fcf3 	bl	431a <adp536x_oc_chg_current_set>
	if (err) {
    1934:	b920      	cbnz	r0, 1940 <pca20035_board_init+0x48>
		LOG_ERR("power_mgmt_init failed with error: %d", err);
		return err;
	}

	return 0;
}
    1936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = adp536x_charging_enable(true);
    193a:	2001      	movs	r0, #1
    193c:	f002 bce8 	b.w	4310 <adp536x_charging_enable>
}
    1940:	bd08      	pop	{r3, pc}
    1942:	bf00      	nop
    1944:	000051ef 	.word	0x000051ef

00001948 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    1948:	b510      	push	{r4, lr}
    194a:	4604      	mov	r4, r0
    194c:	2200      	movs	r2, #0
    194e:	2101      	movs	r1, #1
    1950:	200a      	movs	r0, #10
    1952:	f7ff fc81 	bl	1258 <z_arm_irq_priority_set>
	return dev->config->config_info;
    1956:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    1958:	4a06      	ldr	r2, [pc, #24]	; (1974 <twim_2_init+0x2c>)
	return dev->config->config_info;
    195a:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    195c:	4623      	mov	r3, r4
    195e:	f100 0108 	add.w	r1, r0, #8
    1962:	f000 fa5b 	bl	1e1c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    1966:	4b04      	ldr	r3, [pc, #16]	; (1978 <twim_2_init+0x30>)
    1968:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
    196a:	bf14      	ite	ne
    196c:	f06f 000f 	mvnne.w	r0, #15
    1970:	2000      	moveq	r0, #0
    1972:	bd10      	pop	{r4, pc}
    1974:	0000197d 	.word	0x0000197d
    1978:	0bad0000 	.word	0x0bad0000

0000197c <event_handler>:
	switch (p_event->type) {
    197c:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    197e:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    1980:	2a01      	cmp	r2, #1
    1982:	d00a      	beq.n	199a <event_handler+0x1e>
    1984:	d303      	bcc.n	198e <event_handler+0x12>
    1986:	2a02      	cmp	r2, #2
    1988:	d009      	beq.n	199e <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    198a:	4a06      	ldr	r2, [pc, #24]	; (19a4 <event_handler+0x28>)
    198c:	e000      	b.n	1990 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    198e:	4a06      	ldr	r2, [pc, #24]	; (19a8 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1990:	621a      	str	r2, [r3, #32]
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1992:	f103 0010 	add.w	r0, r3, #16
    1996:	f001 b8ff 	b.w	2b98 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    199a:	4a04      	ldr	r2, [pc, #16]	; (19ac <event_handler+0x30>)
    199c:	e7f8      	b.n	1990 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    199e:	4a04      	ldr	r2, [pc, #16]	; (19b0 <event_handler+0x34>)
    19a0:	e7f6      	b.n	1990 <event_handler+0x14>
    19a2:	bf00      	nop
    19a4:	0bad0001 	.word	0x0bad0001
    19a8:	0bad0000 	.word	0x0bad0000
    19ac:	0bae0001 	.word	0x0bae0001
    19b0:	0bae0002 	.word	0x0bae0002

000019b4 <i2c_nrfx_twim_transfer>:
{
    19b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19b8:	4604      	mov	r4, r0
    19ba:	b087      	sub	sp, #28
    19bc:	460d      	mov	r5, r1
    19be:	4691      	mov	r9, r2
    19c0:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    19c2:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
    19c4:	f04f 31ff 	mov.w	r1, #4294967295
    19c8:	f001 f90c 	bl	2be4 <z_impl_k_sem_take>
	return dev->config->config_info;
    19cc:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    19ce:	2700      	movs	r7, #0
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    19d0:	6898      	ldr	r0, [r3, #8]
    19d2:	f000 fa67 	bl	1ea4 <nrfx_twim_enable>
		if (res != NRFX_SUCCESS) {
    19d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a70 <i2c_nrfx_twim_transfer+0xbc>
    19da:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    19dc:	454f      	cmp	r7, r9
    19de:	f8d3 b008 	ldr.w	fp, [r3, #8]
    19e2:	d301      	bcc.n	19e8 <i2c_nrfx_twim_transfer+0x34>
	int ret = 0;
    19e4:	2500      	movs	r5, #0
    19e6:	e022      	b.n	1a2e <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    19e8:	7a2e      	ldrb	r6, [r5, #8]
    19ea:	f016 0108 	ands.w	r1, r6, #8
    19ee:	d136      	bne.n	1a5e <i2c_nrfx_twim_transfer+0xaa>
		nrfx_twim_xfer_desc_t cur_xfer = {
    19f0:	2212      	movs	r2, #18
    19f2:	f10d 0006 	add.w	r0, sp, #6
    19f6:	f002 fd61 	bl	44bc <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
    19fa:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
    19fe:	f88d 3004 	strb.w	r3, [sp, #4]
    1a02:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1a04:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
    1a08:	9302      	str	r3, [sp, #8]
    1a0a:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1a0c:	bf0c      	ite	eq
    1a0e:	2220      	moveq	r2, #32
    1a10:	2200      	movne	r2, #0
    1a12:	a901      	add	r1, sp, #4
    1a14:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
    1a16:	f88d a005 	strb.w	sl, [sp, #5]
    1a1a:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1a1c:	f000 fa6e 	bl	1efc <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    1a20:	4540      	cmp	r0, r8
    1a22:	d00f      	beq.n	1a44 <i2c_nrfx_twim_transfer+0x90>
			if (res == NRFX_ERROR_BUSY) {
    1a24:	4b11      	ldr	r3, [pc, #68]	; (1a6c <i2c_nrfx_twim_transfer+0xb8>)
    1a26:	4298      	cmp	r0, r3
    1a28:	d01c      	beq.n	1a64 <i2c_nrfx_twim_transfer+0xb0>
				ret = -EIO;
    1a2a:	f06f 0504 	mvn.w	r5, #4
	return dev->config->config_info;
    1a2e:	6823      	ldr	r3, [r4, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    1a30:	6898      	ldr	r0, [r3, #8]
    1a32:	f000 fa47 	bl	1ec4 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    1a36:	68a0      	ldr	r0, [r4, #8]
	z_impl_k_sem_give(sem);
    1a38:	f001 f8ae 	bl	2b98 <z_impl_k_sem_give>
}
    1a3c:	4628      	mov	r0, r5
    1a3e:	b007      	add	sp, #28
    1a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    1a44:	68a0      	ldr	r0, [r4, #8]
    1a46:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    1a48:	f04f 31ff 	mov.w	r1, #4294967295
    1a4c:	f001 f8ca 	bl	2be4 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    1a50:	68a3      	ldr	r3, [r4, #8]
    1a52:	350c      	adds	r5, #12
    1a54:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    1a56:	4543      	cmp	r3, r8
    1a58:	d1e7      	bne.n	1a2a <i2c_nrfx_twim_transfer+0x76>
	for (size_t i = 0; i < num_msgs; i++) {
    1a5a:	3701      	adds	r7, #1
    1a5c:	e7bd      	b.n	19da <i2c_nrfx_twim_transfer+0x26>
			ret = -ENOTSUP;
    1a5e:	f06f 0522 	mvn.w	r5, #34	; 0x22
    1a62:	e7e4      	b.n	1a2e <i2c_nrfx_twim_transfer+0x7a>
				ret = -EBUSY;
    1a64:	f06f 050f 	mvn.w	r5, #15
    1a68:	e7e1      	b.n	1a2e <i2c_nrfx_twim_transfer+0x7a>
    1a6a:	bf00      	nop
    1a6c:	0bad000b 	.word	0x0bad000b
    1a70:	0bad0000 	.word	0x0bad0000

00001a74 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    1a76:	794b      	ldrb	r3, [r1, #5]
    1a78:	2b01      	cmp	r3, #1
    1a7a:	d029      	beq.n	1ad0 <uarte_nrfx_configure+0x5c>
    1a7c:	2b03      	cmp	r3, #3
    1a7e:	d124      	bne.n	1aca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    1a80:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1a82:	798b      	ldrb	r3, [r1, #6]
    1a84:	2b03      	cmp	r3, #3
    1a86:	d120      	bne.n	1aca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1a88:	79cd      	ldrb	r5, [r1, #7]
    1a8a:	b12d      	cbz	r5, 1a98 <uarte_nrfx_configure+0x24>
    1a8c:	2d01      	cmp	r5, #1
    1a8e:	d11c      	bne.n	1aca <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    1a90:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1a92:	689b      	ldr	r3, [r3, #8]
    1a94:	791b      	ldrb	r3, [r3, #4]
    1a96:	b1c3      	cbz	r3, 1aca <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    1a98:	790a      	ldrb	r2, [r1, #4]
    1a9a:	b112      	cbz	r2, 1aa2 <uarte_nrfx_configure+0x2e>
    1a9c:	2a02      	cmp	r2, #2
    1a9e:	d114      	bne.n	1aca <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    1aa0:	220e      	movs	r2, #14
	switch (baudrate) {
    1aa2:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    1aa6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    1aa8:	689b      	ldr	r3, [r3, #8]
    1aaa:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
    1aac:	680b      	ldr	r3, [r1, #0]
    1aae:	42bb      	cmp	r3, r7
    1ab0:	d074      	beq.n	1b9c <uarte_nrfx_configure+0x128>
    1ab2:	d829      	bhi.n	1b08 <uarte_nrfx_configure+0x94>
    1ab4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ab8:	d06a      	beq.n	1b90 <uarte_nrfx_configure+0x11c>
    1aba:	d814      	bhi.n	1ae6 <uarte_nrfx_configure+0x72>
    1abc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1ac0:	d04f      	beq.n	1b62 <uarte_nrfx_configure+0xee>
    1ac2:	d807      	bhi.n	1ad4 <uarte_nrfx_configure+0x60>
    1ac4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1ac8:	d07d      	beq.n	1bc6 <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
    1aca:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1ace:	e05b      	b.n	1b88 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
    1ad0:	2600      	movs	r6, #0
    1ad2:	e7d6      	b.n	1a82 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1ad4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1ad8:	d057      	beq.n	1b8a <uarte_nrfx_configure+0x116>
    1ada:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ade:	d1f4      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1ae0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1ae4:	e03f      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1ae6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1aea:	d053      	beq.n	1b94 <uarte_nrfx_configure+0x120>
    1aec:	d804      	bhi.n	1af8 <uarte_nrfx_configure+0x84>
    1aee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1af2:	d1ea      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1af4:	4b35      	ldr	r3, [pc, #212]	; (1bcc <uarte_nrfx_configure+0x158>)
    1af6:	e036      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1af8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1afc:	d04c      	beq.n	1b98 <uarte_nrfx_configure+0x124>
    1afe:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1b02:	d1e2      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1b04:	4b32      	ldr	r3, [pc, #200]	; (1bd0 <uarte_nrfx_configure+0x15c>)
    1b06:	e02e      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1b08:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1b0c:	d04f      	beq.n	1bae <uarte_nrfx_configure+0x13a>
    1b0e:	d812      	bhi.n	1b36 <uarte_nrfx_configure+0xc2>
    1b10:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1b14:	42bb      	cmp	r3, r7
    1b16:	d044      	beq.n	1ba2 <uarte_nrfx_configure+0x12e>
    1b18:	d805      	bhi.n	1b26 <uarte_nrfx_configure+0xb2>
    1b1a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1b1e:	d1d4      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1b20:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1b24:	e01f      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1b26:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1b2a:	d03d      	beq.n	1ba8 <uarte_nrfx_configure+0x134>
    1b2c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1b30:	d1cb      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1b32:	4b28      	ldr	r3, [pc, #160]	; (1bd4 <uarte_nrfx_configure+0x160>)
    1b34:	e017      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1b36:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1b3a:	d03e      	beq.n	1bba <uarte_nrfx_configure+0x146>
    1b3c:	d808      	bhi.n	1b50 <uarte_nrfx_configure+0xdc>
    1b3e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1b42:	d037      	beq.n	1bb4 <uarte_nrfx_configure+0x140>
    1b44:	4f24      	ldr	r7, [pc, #144]	; (1bd8 <uarte_nrfx_configure+0x164>)
    1b46:	42bb      	cmp	r3, r7
    1b48:	d1bf      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1b4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1b4e:	e00a      	b.n	1b66 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1b50:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1b54:	d034      	beq.n	1bc0 <uarte_nrfx_configure+0x14c>
    1b56:	4f21      	ldr	r7, [pc, #132]	; (1bdc <uarte_nrfx_configure+0x168>)
    1b58:	42bb      	cmp	r3, r7
    1b5a:	d1b6      	bne.n	1aca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1b5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b60:	e001      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
    1b62:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1b66:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1b68:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1b6c:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    1b70:	b12e      	cbz	r6, 1b7e <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    1b72:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    1b76:	f043 0310 	orr.w	r3, r3, #16
    1b7a:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    1b7e:	6883      	ldr	r3, [r0, #8]
    1b80:	c903      	ldmia	r1, {r0, r1}
    1b82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1b86:	2000      	movs	r0, #0
}
    1b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1b8a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1b8e:	e7ea      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1b90:	4b13      	ldr	r3, [pc, #76]	; (1be0 <uarte_nrfx_configure+0x16c>)
    1b92:	e7e8      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1b94:	4b13      	ldr	r3, [pc, #76]	; (1be4 <uarte_nrfx_configure+0x170>)
    1b96:	e7e6      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1b98:	4b13      	ldr	r3, [pc, #76]	; (1be8 <uarte_nrfx_configure+0x174>)
    1b9a:	e7e4      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1b9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1ba0:	e7e1      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1ba2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1ba6:	e7de      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1ba8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1bac:	e7db      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1bae:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1bb2:	e7d8      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1bb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1bb8:	e7d5      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1bba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1bbe:	e7d2      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1bc0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1bc4:	e7cf      	b.n	1b66 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
    1bc6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1bca:	e7cc      	b.n	1b66 <uarte_nrfx_configure+0xf2>
    1bcc:	00275000 	.word	0x00275000
    1bd0:	0075c000 	.word	0x0075c000
    1bd4:	013a9000 	.word	0x013a9000
    1bd8:	0003d090 	.word	0x0003d090
    1bdc:	000f4240 	.word	0x000f4240
    1be0:	0013b000 	.word	0x0013b000
    1be4:	003af000 	.word	0x003af000
    1be8:	004ea000 	.word	0x004ea000

00001bec <uarte_0_init>:
	return dev->config->config_info;
    1bec:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    1bee:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    1bf0:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1bf2:	4b18      	ldr	r3, [pc, #96]	; (1c54 <uarte_0_init+0x68>)
    1bf4:	6814      	ldr	r4, [r2, #0]
    1bf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1bfa:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bfc:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    1bfe:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    1c00:	2612      	movs	r6, #18
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c02:	2200      	movs	r2, #0
    1c04:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
    1c08:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    1c0c:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    1c10:	2613      	movs	r6, #19
    1c12:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    1c16:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    1c1a:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c1c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    1c20:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    p_reg->PSEL.RTS = pselrts;
    1c24:	2314      	movs	r3, #20
    1c26:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1c2a:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1c2c:	4629      	mov	r1, r5
    1c2e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1c32:	f7ff ff1f 	bl	1a74 <uarte_nrfx_configure>
	if (err) {
    1c36:	b958      	cbnz	r0, 1c50 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1c38:	2308      	movs	r3, #8
    1c3a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1c3e:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1c40:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c42:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1c46:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1c4a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c4e:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    1c50:	bd70      	pop	{r4, r5, r6, pc}
    1c52:	bf00      	nop
    1c54:	50842500 	.word	0x50842500

00001c58 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    1c5a:	b1da      	cbz	r2, 1c94 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1c5c:	2300      	movs	r3, #0
	bool id_found = false;
    1c5e:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1c60:	4e0e      	ldr	r6, [pc, #56]	; (1c9c <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1c62:	4f0f      	ldr	r7, [pc, #60]	; (1ca0 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1c64:	42b3      	cmp	r3, r6
    1c66:	d306      	bcc.n	1c76 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    1c68:	2c00      	cmp	r4, #0
    1c6a:	bf14      	ite	ne
    1c6c:	f06f 0008 	mvnne.w	r0, #8
    1c70:	f06f 0001 	mvneq.w	r0, #1
    1c74:	e009      	b.n	1c8a <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1c76:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
    1c7a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    1c7e:	4560      	cmp	r0, ip
    1c80:	d106      	bne.n	1c90 <abi_getter+0x38>
			if (index-- == 0) {
    1c82:	1e4c      	subs	r4, r1, #1
    1c84:	b911      	cbnz	r1, 1c8c <abi_getter+0x34>
				return 0;
    1c86:	4608      	mov	r0, r1
				*abi = ext_abi;
    1c88:	6015      	str	r5, [r2, #0]
}
    1c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    1c8c:	4621      	mov	r1, r4
			id_found = true;
    1c8e:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1c90:	3301      	adds	r3, #1
    1c92:	e7e7      	b.n	1c64 <abi_getter+0xc>
		return -EFAULT;
    1c94:	f06f 000d 	mvn.w	r0, #13
    1c98:	e7f7      	b.n	1c8a <abi_getter+0x32>
    1c9a:	bf00      	nop
    1c9c:	00000000 	.word	0x00000000
    1ca0:	0000523c 	.word	0x0000523c

00001ca4 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1ca4:	4a52      	ldr	r2, [pc, #328]	; (1df0 <SystemInit+0x14c>)
    1ca6:	6813      	ldr	r3, [r2, #0]
    1ca8:	f043 0302 	orr.w	r3, r3, #2
    1cac:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1cae:	2200      	movs	r2, #0
    1cb0:	00d3      	lsls	r3, r2, #3
    1cb2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    1cb6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1cba:	3101      	adds	r1, #1
    1cbc:	d008      	beq.n	1cd0 <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1cbe:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1cc2:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1cc4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1cc8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ccc:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1cce:	d1ef      	bne.n	1cb0 <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1cd0:	4a48      	ldr	r2, [pc, #288]	; (1df4 <SystemInit+0x150>)
    1cd2:	69d3      	ldr	r3, [r2, #28]
    1cd4:	f013 0301 	ands.w	r3, r3, #1
    1cd8:	d03b      	beq.n	1d52 <SystemInit+0xae>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1cda:	4b47      	ldr	r3, [pc, #284]	; (1df8 <SystemInit+0x154>)
    1cdc:	4619      	mov	r1, r3
    1cde:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1ce2:	2a01      	cmp	r2, #1
    1ce4:	d1fb      	bne.n	1cde <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1ce6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1cea:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1cee:	2b01      	cmp	r3, #1
    1cf0:	d1fb      	bne.n	1cea <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1cf2:	4b40      	ldr	r3, [pc, #256]	; (1df4 <SystemInit+0x150>)
    1cf4:	69da      	ldr	r2, [r3, #28]
    1cf6:	07d2      	lsls	r2, r2, #31
    1cf8:	d508      	bpl.n	1d0c <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1cfa:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1cfc:	493e      	ldr	r1, [pc, #248]	; (1df8 <SystemInit+0x154>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1cfe:	f022 0201 	bic.w	r2, r2, #1
    1d02:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1d04:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1d08:	2a01      	cmp	r2, #1
    1d0a:	d1fb      	bne.n	1d04 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1d0c:	6a1a      	ldr	r2, [r3, #32]
    1d0e:	3201      	adds	r2, #1
    1d10:	d10a      	bne.n	1d28 <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1d12:	6a1a      	ldr	r2, [r3, #32]
    1d14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1d18:	f042 0220 	orr.w	r2, r2, #32
    1d1c:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1d1e:	4a36      	ldr	r2, [pc, #216]	; (1df8 <SystemInit+0x154>)
    1d20:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1d24:	2b01      	cmp	r3, #1
    1d26:	d1fb      	bne.n	1d20 <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1d28:	2200      	movs	r2, #0
    1d2a:	4b33      	ldr	r3, [pc, #204]	; (1df8 <SystemInit+0x154>)
    1d2c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1d30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1d34:	2a01      	cmp	r2, #1
    1d36:	d1fb      	bne.n	1d30 <SystemInit+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
    1d38:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1d3c:	492f      	ldr	r1, [pc, #188]	; (1dfc <SystemInit+0x158>)
    1d3e:	4b30      	ldr	r3, [pc, #192]	; (1e00 <SystemInit+0x15c>)
    1d40:	68ca      	ldr	r2, [r1, #12]
    1d42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1d46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1d48:	60cb      	str	r3, [r1, #12]
    1d4a:	f3bf 8f4f 	dsb	sy
    __NOP();
    1d4e:	bf00      	nop
    1d50:	e7fd      	b.n	1d4e <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1d52:	6a12      	ldr	r2, [r2, #32]
    1d54:	3201      	adds	r2, #1
    1d56:	d0c0      	beq.n	1cda <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1d58:	4a2a      	ldr	r2, [pc, #168]	; (1e04 <SystemInit+0x160>)
    1d5a:	6811      	ldr	r1, [r2, #0]
    1d5c:	2909      	cmp	r1, #9
    1d5e:	d10a      	bne.n	1d76 <SystemInit+0xd2>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1d60:	4929      	ldr	r1, [pc, #164]	; (1e08 <SystemInit+0x164>)
    1d62:	6809      	ldr	r1, [r1, #0]
    1d64:	3901      	subs	r1, #1
    1d66:	2901      	cmp	r1, #1
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1d68:	bf9e      	ittt	ls
    1d6a:	f04f 2150 	movls.w	r1, #1342197760	; 0x50005000
    1d6e:	f8c1 3114 	strls.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1d72:	f8c1 3118 	strls.w	r3, [r1, #280]	; 0x118
    }

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1d76:	6813      	ldr	r3, [r2, #0]
    1d78:	2b09      	cmp	r3, #9
    1d7a:	d109      	bne.n	1d90 <SystemInit+0xec>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1d7c:	4b22      	ldr	r3, [pc, #136]	; (1e08 <SystemInit+0x164>)
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	2b01      	cmp	r3, #1
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1d82:	bf01      	itttt	eq
    1d84:	4a21      	ldreq	r2, [pc, #132]	; (1e0c <SystemInit+0x168>)
    1d86:	6013      	streq	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1d88:	f6a2 2238 	subweq	r2, r2, #2616	; 0xa38
    1d8c:	f8c2 3578 	streq.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1d90:	4b1c      	ldr	r3, [pc, #112]	; (1e04 <SystemInit+0x160>)
    1d92:	681a      	ldr	r2, [r3, #0]
    1d94:	2a09      	cmp	r2, #9
    1d96:	d10b      	bne.n	1db0 <SystemInit+0x10c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    1d98:	4a1b      	ldr	r2, [pc, #108]	; (1e08 <SystemInit+0x164>)
    1d9a:	6812      	ldr	r2, [r2, #0]
    1d9c:	2a02      	cmp	r2, #2
    1d9e:	d107      	bne.n	1db0 <SystemInit+0x10c>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    1da0:	2100      	movs	r1, #0
    1da2:	4a1a      	ldr	r2, [pc, #104]	; (1e0c <SystemInit+0x168>)
    1da4:	6011      	str	r1, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1da6:	2101      	movs	r1, #1
    1da8:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1dac:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	2b09      	cmp	r3, #9
    1db4:	d106      	bne.n	1dc4 <SystemInit+0x120>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    1db6:	4b14      	ldr	r3, [pc, #80]	; (1e08 <SystemInit+0x164>)
    1db8:	681b      	ldr	r3, [r3, #0]
    1dba:	2b02      	cmp	r3, #2
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    1dbc:	bf02      	ittt	eq
    1dbe:	220c      	moveq	r2, #12
    1dc0:	4b13      	ldreq	r3, [pc, #76]	; (1e10 <SystemInit+0x16c>)
    1dc2:	601a      	streq	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
    1dc4:	4b0d      	ldr	r3, [pc, #52]	; (1dfc <SystemInit+0x158>)
    1dc6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1dca:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1dd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1de2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1de6:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <SystemInit+0x170>)
    1de8:	4a0b      	ldr	r2, [pc, #44]	; (1e18 <SystemInit+0x174>)
    1dea:	601a      	str	r2, [r3, #0]
}
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop
    1df0:	e000edd0 	.word	0xe000edd0
    1df4:	00ff8000 	.word	0x00ff8000
    1df8:	50039000 	.word	0x50039000
    1dfc:	e000ed00 	.word	0xe000ed00
    1e00:	05fa0004 	.word	0x05fa0004
    1e04:	00ff0130 	.word	0x00ff0130
    1e08:	00ff0134 	.word	0x00ff0134
    1e0c:	50004a38 	.word	0x50004a38
    1e10:	5003aee4 	.word	0x5003aee4
    1e14:	20001468 	.word	0x20001468
    1e18:	03d09000 	.word	0x03d09000

00001e1c <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1e1c:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1e22:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1e24:	4d1b      	ldr	r5, [pc, #108]	; (1e94 <nrfx_twim_init+0x78>)
    1e26:	fb0c fc06 	mul.w	ip, ip, r6
    1e2a:	eb05 040c 	add.w	r4, r5, ip
    1e2e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    1e32:	bb67      	cbnz	r7, 1e8e <nrfx_twim_init+0x72>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    1e34:	f845 200c 	str.w	r2, [r5, ip]
    1e38:	f240 6c0c 	movw	ip, #1548	; 0x60c
    p_cb->p_context       = p_context;
    1e3c:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1e3e:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    1e40:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    1e42:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    1e46:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1e4a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    1e4e:	680c      	ldr	r4, [r1, #0]
    1e50:	4f11      	ldr	r7, [pc, #68]	; (1e98 <nrfx_twim_init+0x7c>)
    1e52:	f104 0380 	add.w	r3, r4, #128	; 0x80
    1e56:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    1e5a:	684b      	ldr	r3, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    1e5c:	6800      	ldr	r0, [r0, #0]
    1e5e:	f103 0e80 	add.w	lr, r3, #128	; 0x80
    1e62:	f847 c02e 	str.w	ip, [r7, lr, lsl #2]

__STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                       uint32_t scl_pin,
                                       uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    1e66:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    1e6a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    1e6e:	688b      	ldr	r3, [r1, #8]
}

__STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                            nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    1e70:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    1e74:	b11a      	cbz	r2, 1e7e <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    1e76:	f340 3007 	sbfx	r0, r0, #12, #8
    1e7a:	f7ff f9dd 	bl	1238 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1e7e:	2334      	movs	r3, #52	; 0x34
    1e80:	fb03 5506 	mla	r5, r3, r6, r5
    1e84:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    1e86:	4805      	ldr	r0, [pc, #20]	; (1e9c <nrfx_twim_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1e88:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    1e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    1e8e:	4804      	ldr	r0, [pc, #16]	; (1ea0 <nrfx_twim_init+0x84>)
    1e90:	e7fc      	b.n	1e8c <nrfx_twim_init+0x70>
    1e92:	bf00      	nop
    1e94:	2000055c 	.word	0x2000055c
    1e98:	50842500 	.word	0x50842500
    1e9c:	0bad0000 	.word	0x0bad0000
    1ea0:	0bad0005 	.word	0x0bad0005

00001ea4 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    1ea4:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    1ea6:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1ea8:	7903      	ldrb	r3, [r0, #4]
    1eaa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    1eae:	2134      	movs	r1, #52	; 0x34
    1eb0:	4a03      	ldr	r2, [pc, #12]	; (1ec0 <nrfx_twim_enable+0x1c>)
    1eb2:	fb01 2303 	mla	r3, r1, r3, r2
    1eb6:	2202      	movs	r2, #2
    1eb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    1ebc:	4770      	bx	lr
    1ebe:	bf00      	nop
    1ec0:	2000055c 	.word	0x2000055c

00001ec4 <nrfx_twim_disable>:
void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    1ec4:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1ec6:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
    1ec8:	2034      	movs	r0, #52	; 0x34
    1eca:	490a      	ldr	r1, [pc, #40]	; (1ef4 <nrfx_twim_disable+0x30>)
    1ecc:	fb00 1303 	mla	r3, r0, r3, r1
    1ed0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    1ed2:	4909      	ldr	r1, [pc, #36]	; (1ef8 <nrfx_twim_disable+0x34>)
    1ed4:	6098      	str	r0, [r3, #8]
    1ed6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    1eda:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    1ede:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    1ee2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    1ee6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1eea:	2201      	movs	r2, #1
    1eec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	2000055c 	.word	0x2000055c
    1ef8:	019c0202 	.word	0x019c0202

00001efc <nrfx_twim_xfer>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    1efc:	68cb      	ldr	r3, [r1, #12]


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    1efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f02:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    1f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    1f0a:	460d      	mov	r5, r1
    1f0c:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    1f0e:	d002      	beq.n	1f16 <nrfx_twim_xfer+0x1a>
        return err_code;
    1f10:	488e      	ldr	r0, [pc, #568]	; (214c <nrfx_twim_xfer+0x250>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    1f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    1f16:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1f1a:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->busy)
    1f1c:	4e8c      	ldr	r6, [pc, #560]	; (2150 <nrfx_twim_xfer+0x254>)
    p_reg->INTENCLR = mask;
    1f1e:	4b8d      	ldr	r3, [pc, #564]	; (2154 <nrfx_twim_xfer+0x258>)
    1f20:	fb0e 6e07 	mla	lr, lr, r7, r6
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    1f24:	6804      	ldr	r4, [r0, #0]
    1f26:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    1f2a:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
    1f2e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    1f32:	b12b      	cbz	r3, 1f40 <nrfx_twim_xfer+0x44>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    1f34:	f8de 3008 	ldr.w	r3, [lr, #8]
        return err_code;
    1f38:	4887      	ldr	r0, [pc, #540]	; (2158 <nrfx_twim_xfer+0x25c>)
    p_reg->INTENSET = mask;
    1f3a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    1f3e:	e7e8      	b.n	1f12 <nrfx_twim_xfer+0x16>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    1f40:	f012 0f14 	tst.w	r2, #20
    1f44:	bf0c      	ite	eq
    1f46:	2301      	moveq	r3, #1
    1f48:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    1f4a:	4689      	mov	r9, r1
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    1f4c:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    1f50:	f10e 080c 	add.w	r8, lr, #12
    1f54:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    1f58:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    1f5c:	f8d9 3000 	ldr.w	r3, [r9]
    1f60:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    1f64:	f3cc 1300 	ubfx	r3, ip, #4, #1
    1f68:	f88e 3030 	strb.w	r3, [lr, #48]	; 0x30
}

__STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                          uint8_t address)
{
    p_reg->ADDRESS = address;
    1f6c:	786b      	ldrb	r3, [r5, #1]
    1f6e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    1f72:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    1f76:	bf18      	it	ne
    1f78:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f7a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    1f7e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
}

__STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
    1f82:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    1f86:	f01c 0302 	ands.w	r3, ip, #2
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    1f8a:	bf18      	it	ne
    1f8c:	2301      	movne	r3, #1
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    1f8e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    1f92:	782b      	ldrb	r3, [r5, #0]
    1f94:	2b03      	cmp	r3, #3
    1f96:	f200 80bb 	bhi.w	2110 <nrfx_twim_xfer+0x214>
    1f9a:	e8df f003 	tbb	[pc, r3]
    1f9e:	a37c      	.short	0xa37c
    1fa0:	025d      	.short	0x025d
    1fa2:	692a      	ldr	r2, [r5, #16]
    1fa4:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    1fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1fac:	d1b0      	bne.n	1f10 <nrfx_twim_xfer+0x14>
    p_reg->SHORTS = mask;
    1fae:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1fb2:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    1fb4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    1fb8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1fba:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1fbe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fc2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1fc4:	2300      	movs	r3, #0
    1fc6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    1fca:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    1fce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fd2:	6221      	str	r1, [r4, #32]
    1fd4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1fd6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    1fda:	2900      	cmp	r1, #0
    1fdc:	d0fb      	beq.n	1fd6 <nrfx_twim_xfer+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1fde:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    1fe2:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1fe4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1fe8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1fec:	2334      	movs	r3, #52	; 0x34
    1fee:	fb03 6307 	mla	r3, r3, r7, r6
    1ff2:	4a5a      	ldr	r2, [pc, #360]	; (215c <nrfx_twim_xfer+0x260>)
    1ff4:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1ff6:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    1ffa:	2208      	movs	r2, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    1ffc:	4858      	ldr	r0, [pc, #352]	; (2160 <nrfx_twim_xfer+0x264>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    1ffe:	f01c 0f08 	tst.w	ip, #8
    2002:	d104      	bne.n	200e <nrfx_twim_xfer+0x112>
    2004:	7829      	ldrb	r1, [r5, #0]
    2006:	2903      	cmp	r1, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2008:	bf1c      	itt	ne
    200a:	2101      	movne	r1, #1
    200c:	50a1      	strne	r1, [r4, r2]
    if (p_cb->handler)
    200e:	2234      	movs	r2, #52	; 0x34
    2010:	437a      	muls	r2, r7
    2012:	18b1      	adds	r1, r6, r2
    2014:	58b2      	ldr	r2, [r6, r2]
    2016:	2a00      	cmp	r2, #0
    2018:	d17f      	bne.n	211a <nrfx_twim_xfer+0x21e>
    201a:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    201c:	4423      	add	r3, r4
    201e:	681a      	ldr	r2, [r3, #0]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
    2020:	2a00      	cmp	r2, #0
    2022:	f000 8087 	beq.w	2134 <nrfx_twim_xfer+0x238>
        p_cb->busy = false;
    2026:	2234      	movs	r2, #52	; 0x34
    2028:	fb02 6607 	mla	r6, r2, r7, r6
    202c:	2200      	movs	r2, #0
    uint32_t error_source = p_reg->ERRORSRC;
    202e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2032:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    2036:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
        if (errorsrc)
    203a:	2b00      	cmp	r3, #0
    203c:	f43f af69 	beq.w	1f12 <nrfx_twim_xfer+0x16>
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2040:	4a48      	ldr	r2, [pc, #288]	; (2164 <nrfx_twim_xfer+0x268>)
    2042:	f013 0f02 	tst.w	r3, #2
    2046:	4848      	ldr	r0, [pc, #288]	; (2168 <nrfx_twim_xfer+0x26c>)
    2048:	bf08      	it	eq
    204a:	4610      	moveq	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    204c:	f013 0f04 	tst.w	r3, #4
    2050:	4b46      	ldr	r3, [pc, #280]	; (216c <nrfx_twim_xfer+0x270>)
    2052:	bf18      	it	ne
    2054:	4618      	movne	r0, r3
    2056:	e75c      	b.n	1f12 <nrfx_twim_xfer+0x16>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2058:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    205a:	68ea      	ldr	r2, [r5, #12]
    205c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2060:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2064:	692b      	ldr	r3, [r5, #16]
    2066:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    206a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    206e:	f47f af4f 	bne.w	1f10 <nrfx_twim_xfer+0x14>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2072:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2074:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    2078:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    207c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2080:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    2084:	2334      	movs	r3, #52	; 0x34
    2086:	f240 2202 	movw	r2, #514	; 0x202
    208a:	fb03 6307 	mla	r3, r3, r7, r6
    208e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2090:	2301      	movs	r3, #1
    2092:	6223      	str	r3, [r4, #32]
    2094:	e7af      	b.n	1ff6 <nrfx_twim_xfer+0xfa>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2096:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2098:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    209a:	f01c 0f20 	tst.w	ip, #32
    209e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    20a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    20a6:	f04f 0334 	mov.w	r3, #52	; 0x34
    20aa:	d00f      	beq.n	20cc <nrfx_twim_xfer+0x1d0>
    p_reg->SHORTS = mask;
    20ac:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    20b0:	fb03 6307 	mla	r3, r3, r7, r6
    20b4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    20b8:	4a28      	ldr	r2, [pc, #160]	; (215c <nrfx_twim_xfer+0x260>)
    20ba:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20bc:	2300      	movs	r3, #0
    20be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
    20c2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20c6:	2201      	movs	r2, #1
    20c8:	6222      	str	r2, [r4, #32]
    20ca:	e796      	b.n	1ffa <nrfx_twim_xfer+0xfe>
    p_reg->SHORTS = mask;
    20cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    20d0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    20d4:	f240 2202 	movw	r2, #514	; 0x202
    20d8:	fb03 6307 	mla	r3, r3, r7, r6
    20dc:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    20de:	f44f 7382 	mov.w	r3, #260	; 0x104
    20e2:	e7f0      	b.n	20c6 <nrfx_twim_xfer+0x1ca>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    20e4:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    20e6:	68ea      	ldr	r2, [r5, #12]
    20e8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    20ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    20f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    20f4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    20f8:	2334      	movs	r3, #52	; 0x34
    20fa:	f240 2202 	movw	r2, #514	; 0x202
    20fe:	fb03 6307 	mla	r3, r3, r7, r6
    2102:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2104:	2301      	movs	r3, #1
        start_task = NRF_TWIM_TASK_STARTRX;
    2106:	2200      	movs	r2, #0
    2108:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    210a:	f44f 7382 	mov.w	r3, #260	; 0x104
    210e:	e775      	b.n	1ffc <nrfx_twim_xfer+0x100>
    2110:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    2114:	2208      	movs	r2, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
    2116:	4816      	ldr	r0, [pc, #88]	; (2170 <nrfx_twim_xfer+0x274>)
    2118:	e771      	b.n	1ffe <nrfx_twim_xfer+0x102>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    211a:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
    211e:	bf1c      	itt	ne
    2120:	f44f 7300 	movne.w	r3, #512	; 0x200
    2124:	608b      	strne	r3, [r1, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2126:	2334      	movs	r3, #52	; 0x34
    2128:	fb03 6607 	mla	r6, r3, r7, r6
    212c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    212e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2132:	e6ee      	b.n	1f12 <nrfx_twim_xfer+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2134:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2138:	2d00      	cmp	r5, #0
    213a:	f43f af70 	beq.w	201e <nrfx_twim_xfer+0x122>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    213e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    2142:	f44f 7382 	mov.w	r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2146:	6221      	str	r1, [r4, #32]
    2148:	6161      	str	r1, [r4, #20]
    214a:	e767      	b.n	201c <nrfx_twim_xfer+0x120>
    214c:	0bad000a 	.word	0x0bad000a
    2150:	2000055c 	.word	0x2000055c
    2154:	019c0202 	.word	0x019c0202
    2158:	0bad000b 	.word	0x0bad000b
    215c:	00040200 	.word	0x00040200
    2160:	0bad0000 	.word	0x0bad0000
    2164:	0bad0001 	.word	0x0bad0001
    2168:	0bae0001 	.word	0x0bae0001
    216c:	0bae0002 	.word	0x0bae0002
    2170:	0bad0004 	.word	0x0bad0004

00002174 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    2174:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2176:	4b45      	ldr	r3, [pc, #276]	; (228c <nrfx_twim_2_irq_handler+0x118>)
    2178:	b087      	sub	sp, #28
    217a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    217e:	461d      	mov	r5, r3
    2180:	4c43      	ldr	r4, [pc, #268]	; (2290 <nrfx_twim_2_irq_handler+0x11c>)
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2182:	b192      	cbz	r2, 21aa <nrfx_twim_2_irq_handler+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2184:	2200      	movs	r2, #0
    2186:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    218a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    218e:	b962      	cbnz	r2, 21aa <nrfx_twim_2_irq_handler+0x36>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    2190:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    2192:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2196:	2202      	movs	r2, #2
    2198:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    219a:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    219c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21a0:	2201      	movs	r2, #1
    21a2:	621a      	str	r2, [r3, #32]
    21a4:	615a      	str	r2, [r3, #20]
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    21a6:	b007      	add	sp, #28
    21a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    21aa:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    21ae:	2b00      	cmp	r3, #0
    21b0:	d03f      	beq.n	2232 <nrfx_twim_2_irq_handler+0xbe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21b2:	2300      	movs	r3, #0
        event.xfer_desc = p_cb->xfer_desc;
    21b4:	4f37      	ldr	r7, [pc, #220]	; (2294 <nrfx_twim_2_irq_handler+0x120>)
    21b6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    21ba:	ae01      	add	r6, sp, #4
    21bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    21be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    21c0:	683b      	ldr	r3, [r7, #0]
        if (p_cb->error)
    21c2:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        event.xfer_desc = p_cb->xfer_desc;
    21c6:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
    21c8:	b179      	cbz	r1, 21ea <nrfx_twim_2_irq_handler+0x76>
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    21ca:	7b23      	ldrb	r3, [r4, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    21cc:	2b01      	cmp	r3, #1
    return p_reg->RXD.AMOUNT;
    21ce:	bf0c      	ite	eq
    21d0:	f8d5 253c 	ldreq.w	r2, [r5, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
    21d4:	f8d5 254c 	ldrne.w	r2, [r5, #1356]	; 0x54c
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    21d8:	2b02      	cmp	r3, #2
    21da:	4b2c      	ldr	r3, [pc, #176]	; (228c <nrfx_twim_2_irq_handler+0x118>)
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    21dc:	9202      	str	r2, [sp, #8]
    return p_reg->RXD.AMOUNT;
    21de:	bf0c      	ite	eq
    21e0:	f8d3 353c 	ldreq.w	r3, [r3, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
    21e4:	f8d3 354c 	ldrne.w	r3, [r3, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
    21e8:	9303      	str	r3, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21ea:	2200      	movs	r2, #0
    21ec:	4b27      	ldr	r3, [pc, #156]	; (228c <nrfx_twim_2_irq_handler+0x118>)
        if (!p_cb->repeated || p_cb->error)
    21ee:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    21f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    21f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    21fa:	b100      	cbz	r0, 21fe <nrfx_twim_2_irq_handler+0x8a>
    21fc:	b129      	cbz	r1, 220a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    21fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            p_cb->int_mask = 0;
    2202:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    2204:	4a24      	ldr	r2, [pc, #144]	; (2298 <nrfx_twim_2_irq_handler+0x124>)
    2206:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
    220a:	4a20      	ldr	r2, [pc, #128]	; (228c <nrfx_twim_2_irq_handler+0x118>)
    220c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2210:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    2214:	079a      	lsls	r2, r3, #30
    2216:	d533      	bpl.n	2280 <nrfx_twim_2_irq_handler+0x10c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    2218:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    221a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    221e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2222:	b90b      	cbnz	r3, 2228 <nrfx_twim_2_irq_handler+0xb4>
        p_cb->busy = false;
    2224:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->handler(&event, p_cb->p_context);
    2228:	e9d4 3100 	ldrd	r3, r1, [r4]
    222c:	4668      	mov	r0, sp
    222e:	4798      	blx	r3
    2230:	e7b9      	b.n	21a6 <nrfx_twim_2_irq_handler+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2232:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    2236:	7b23      	ldrb	r3, [r4, #12]
    2238:	b983      	cbnz	r3, 225c <nrfx_twim_2_irq_handler+0xe8>
            event.xfer_desc = p_cb->xfer_desc;
    223a:	4f16      	ldr	r7, [pc, #88]	; (2294 <nrfx_twim_2_irq_handler+0x120>)
    223c:	ae01      	add	r6, sp, #4
    223e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2240:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2242:	683b      	ldr	r3, [r7, #0]
    2244:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    2246:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    224a:	2b00      	cmp	r3, #0
    224c:	d1dd      	bne.n	220a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    224e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    2252:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    2254:	4b10      	ldr	r3, [pc, #64]	; (2298 <nrfx_twim_2_irq_handler+0x124>)
    2256:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    225a:	e7d6      	b.n	220a <nrfx_twim_2_irq_handler+0x96>
    p_reg->SHORTS = mask;
    225c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2260:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    2264:	f240 2302 	movw	r3, #514	; 0x202
    2268:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    226a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    226e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2272:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    2274:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2278:	2301      	movs	r3, #1
    227a:	60ab      	str	r3, [r5, #8]
    227c:	622b      	str	r3, [r5, #32]
    227e:	e792      	b.n	21a6 <nrfx_twim_2_irq_handler+0x32>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    2280:	f013 0304 	ands.w	r3, r3, #4
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    2284:	bf18      	it	ne
    2286:	2302      	movne	r3, #2
    2288:	e7c7      	b.n	221a <nrfx_twim_2_irq_handler+0xa6>
    228a:	bf00      	nop
    228c:	5000a000 	.word	0x5000a000
    2290:	2000055c 	.word	0x2000055c
    2294:	20000568 	.word	0x20000568
    2298:	019c0202 	.word	0x019c0202

0000229c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    229c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    229e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    22a0:	4b08      	ldr	r3, [pc, #32]	; (22c4 <z_sys_device_do_config_level+0x28>)
    22a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    22a6:	3001      	adds	r0, #1
    22a8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    22ac:	42a5      	cmp	r5, r4
    22ae:	d800      	bhi.n	22b2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    22b0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    22b2:	6823      	ldr	r3, [r4, #0]
    22b4:	4620      	mov	r0, r4
    22b6:	685b      	ldr	r3, [r3, #4]
    22b8:	4798      	blx	r3
		if (retval != 0) {
    22ba:	b100      	cbz	r0, 22be <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    22bc:	6066      	str	r6, [r4, #4]
								info++) {
    22be:	340c      	adds	r4, #12
    22c0:	e7f4      	b.n	22ac <z_sys_device_do_config_level+0x10>
    22c2:	bf00      	nop
    22c4:	00004db4 	.word	0x00004db4

000022c8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    22c8:	4b10      	ldr	r3, [pc, #64]	; (230c <z_impl_device_get_binding+0x44>)
{
    22ca:	b570      	push	{r4, r5, r6, lr}
    22cc:	4605      	mov	r5, r0
    22ce:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    22d0:	4c0f      	ldr	r4, [pc, #60]	; (2310 <z_impl_device_get_binding+0x48>)
    22d2:	429c      	cmp	r4, r3
    22d4:	d104      	bne.n	22e0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    22d6:	4c0e      	ldr	r4, [pc, #56]	; (2310 <z_impl_device_get_binding+0x48>)
    22d8:	42b4      	cmp	r4, r6
    22da:	d109      	bne.n	22f0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    22dc:	2400      	movs	r4, #0
    22de:	e012      	b.n	2306 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    22e0:	6862      	ldr	r2, [r4, #4]
    22e2:	b11a      	cbz	r2, 22ec <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    22e4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    22e6:	6812      	ldr	r2, [r2, #0]
    22e8:	42aa      	cmp	r2, r5
    22ea:	d00c      	beq.n	2306 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    22ec:	340c      	adds	r4, #12
    22ee:	e7f0      	b.n	22d2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    22f0:	6863      	ldr	r3, [r4, #4]
    22f2:	b90b      	cbnz	r3, 22f8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    22f4:	340c      	adds	r4, #12
    22f6:	e7ef      	b.n	22d8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    22f8:	6823      	ldr	r3, [r4, #0]
    22fa:	4628      	mov	r0, r5
    22fc:	6819      	ldr	r1, [r3, #0]
    22fe:	f002 f88c 	bl	441a <strcmp>
    2302:	2800      	cmp	r0, #0
    2304:	d1f6      	bne.n	22f4 <z_impl_device_get_binding+0x2c>
}
    2306:	4620      	mov	r0, r4
    2308:	bd70      	pop	{r4, r5, r6, pc}
    230a:	bf00      	nop
    230c:	20001544 	.word	0x20001544
    2310:	200014b4 	.word	0x200014b4

00002314 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2314:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2316:	4d0b      	ldr	r5, [pc, #44]	; (2344 <idle+0x30>)
    2318:	f04f 0220 	mov.w	r2, #32
    231c:	f3ef 8311 	mrs	r3, BASEPRI
    2320:	f382 8811 	msr	BASEPRI, r2
    2324:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2328:	f002 fa76 	bl	4818 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    232c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    232e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2330:	2802      	cmp	r0, #2
    2332:	bfd8      	it	le
    2334:	4608      	movle	r0, r1
    2336:	f002 fa7f 	bl	4838 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    233a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    233c:	f7fe ff26 	bl	118c <z_arch_cpu_idle>
    2340:	e7ea      	b.n	2318 <idle+0x4>
    2342:	bf00      	nop
    2344:	20000668 	.word	0x20000668

00002348 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2348:	4802      	ldr	r0, [pc, #8]	; (2354 <z_bss_zero+0xc>)
    234a:	4a03      	ldr	r2, [pc, #12]	; (2358 <z_bss_zero+0x10>)
    234c:	2100      	movs	r1, #0
    234e:	1a12      	subs	r2, r2, r0
    2350:	f002 b8b4 	b.w	44bc <memset>
    2354:	20000000 	.word	0x20000000
    2358:	200006c8 	.word	0x200006c8

0000235c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    235c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    235e:	4806      	ldr	r0, [pc, #24]	; (2378 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2360:	4a06      	ldr	r2, [pc, #24]	; (237c <z_data_copy+0x20>)
    2362:	4907      	ldr	r1, [pc, #28]	; (2380 <z_data_copy+0x24>)
    2364:	1a12      	subs	r2, r2, r0
    2366:	f002 f87c 	bl	4462 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    236a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    236e:	4a05      	ldr	r2, [pc, #20]	; (2384 <z_data_copy+0x28>)
    2370:	4905      	ldr	r1, [pc, #20]	; (2388 <z_data_copy+0x2c>)
    2372:	4806      	ldr	r0, [pc, #24]	; (238c <z_data_copy+0x30>)
    2374:	f002 b875 	b.w	4462 <memcpy>
    2378:	2000140c 	.word	0x2000140c
    237c:	200015a8 	.word	0x200015a8
    2380:	0000523c 	.word	0x0000523c
    2384:	00000000 	.word	0x00000000
    2388:	0000523c 	.word	0x0000523c
    238c:	20000000 	.word	0x20000000

00002390 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2390:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2392:	2002      	movs	r0, #2
    2394:	f7ff ff82 	bl	229c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    2398:	4807      	ldr	r0, [pc, #28]	; (23b8 <bg_thread_main+0x28>)
    239a:	f001 fe8f 	bl	40bc <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    239e:	2003      	movs	r0, #3
    23a0:	f7ff ff7c 	bl	229c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    23a4:	f000 fc82 	bl	2cac <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    23a8:	f001 fc9c 	bl	3ce4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    23ac:	4a03      	ldr	r2, [pc, #12]	; (23bc <bg_thread_main+0x2c>)
    23ae:	7b13      	ldrb	r3, [r2, #12]
    23b0:	f023 0301 	bic.w	r3, r3, #1
    23b4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    23b6:	bd08      	pop	{r3, pc}
    23b8:	00005200 	.word	0x00005200
    23bc:	200005fc 	.word	0x200005fc

000023c0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    23c0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    23c2:	4b37      	ldr	r3, [pc, #220]	; (24a0 <z_cstart+0xe0>)
    23c4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    23c6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ca:	2500      	movs	r5, #0
    23cc:	23e0      	movs	r3, #224	; 0xe0
    23ce:	4c35      	ldr	r4, [pc, #212]	; (24a4 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    23d0:	2701      	movs	r7, #1
    23d2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    23d6:	77e5      	strb	r5, [r4, #31]
    23d8:	7625      	strb	r5, [r4, #24]
    23da:	7665      	strb	r5, [r4, #25]
    23dc:	76a5      	strb	r5, [r4, #26]
    23de:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    23e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    23e2:	4e31      	ldr	r6, [pc, #196]	; (24a8 <z_cstart+0xe8>)
    23e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    23e8:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    23ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    23f0:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    23f2:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    23f4:	f7ff f8b0 	bl	1558 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    23f8:	f7fe fec2 	bl	1180 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    23fc:	f04f 33ff 	mov.w	r3, #4294967295
    2400:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2402:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    2404:	ab07      	add	r3, sp, #28
    2406:	226c      	movs	r2, #108	; 0x6c
    2408:	4629      	mov	r1, r5
    240a:	4618      	mov	r0, r3
    240c:	f002 f856 	bl	44bc <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    2410:	4c26      	ldr	r4, [pc, #152]	; (24ac <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    2412:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    2416:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2418:	4628      	mov	r0, r5
    241a:	f7ff ff3f 	bl	229c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    241e:	4638      	mov	r0, r7
    2420:	f7ff ff3c 	bl	229c <z_sys_device_do_config_level>
	z_sched_init();
    2424:	f000 fba6 	bl	2b74 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2428:	4b21      	ldr	r3, [pc, #132]	; (24b0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    242a:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2430:	e9cd 7304 	strd	r7, r3, [sp, #16]
    2434:	e9cd 5502 	strd	r5, r5, [sp, #8]
    2438:	4b1e      	ldr	r3, [pc, #120]	; (24b4 <z_cstart+0xf4>)
    243a:	e9cd 5500 	strd	r5, r5, [sp]
    243e:	491e      	ldr	r1, [pc, #120]	; (24b8 <z_cstart+0xf8>)
    2440:	4630      	mov	r0, r6
    2442:	f000 fc19 	bl	2c78 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2446:	7b73      	ldrb	r3, [r6, #13]
    2448:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    244c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2450:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2452:	d104      	bne.n	245e <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    2454:	69b3      	ldr	r3, [r6, #24]
    2456:	b913      	cbnz	r3, 245e <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    2458:	4630      	mov	r0, r6
    245a:	f000 fa1b 	bl	2894 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    245e:	4b17      	ldr	r3, [pc, #92]	; (24bc <z_cstart+0xfc>)
    2460:	2201      	movs	r2, #1
    2462:	9305      	str	r3, [sp, #20]
    2464:	230f      	movs	r3, #15
    2466:	e9cd 3203 	strd	r3, r2, [sp, #12]
    246a:	2300      	movs	r3, #0
    246c:	4d14      	ldr	r5, [pc, #80]	; (24c0 <z_cstart+0x100>)
    246e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2472:	9300      	str	r3, [sp, #0]
    2474:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2478:	4b12      	ldr	r3, [pc, #72]	; (24c4 <z_cstart+0x104>)
    247a:	4913      	ldr	r1, [pc, #76]	; (24c8 <z_cstart+0x108>)
    247c:	4628      	mov	r0, r5
    247e:	f000 fbfb 	bl	2c78 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2482:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    2484:	60e5      	str	r5, [r4, #12]
    2486:	f023 0304 	bic.w	r3, r3, #4
    248a:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    248c:	4b0f      	ldr	r3, [pc, #60]	; (24cc <z_cstart+0x10c>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    248e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    2492:	e9c4 3306 	strd	r3, r3, [r4, #24]
    2496:	4908      	ldr	r1, [pc, #32]	; (24b8 <z_cstart+0xf8>)
    2498:	4b06      	ldr	r3, [pc, #24]	; (24b4 <z_cstart+0xf4>)
    249a:	4803      	ldr	r0, [pc, #12]	; (24a8 <z_cstart+0xe8>)
    249c:	f7fe ff1e 	bl	12dc <z_arch_switch_to_main_thread>
    24a0:	20001408 	.word	0x20001408
    24a4:	e000ed00 	.word	0xe000ed00
    24a8:	200005fc 	.word	0x200005fc
    24ac:	20000668 	.word	0x20000668
    24b0:	00005232 	.word	0x00005232
    24b4:	00002391 	.word	0x00002391
    24b8:	200006c8 	.word	0x200006c8
    24bc:	00005237 	.word	0x00005237
    24c0:	20000590 	.word	0x20000590
    24c4:	00002315 	.word	0x00002315
    24c8:	20000ac8 	.word	0x20000ac8
    24cc:	20000680 	.word	0x20000680

000024d0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    24d0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    24d2:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    24d4:	4b0a      	ldr	r3, [pc, #40]	; (2500 <init_mem_slab_module+0x30>)
    24d6:	480b      	ldr	r0, [pc, #44]	; (2504 <init_mem_slab_module+0x34>)
    24d8:	4283      	cmp	r3, r0
    24da:	d301      	bcc.n	24e0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    24dc:	2000      	movs	r0, #0
    24de:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    24e0:	2100      	movs	r1, #0
	p = slab->buffer;
    24e2:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    24e4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    24e6:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    24e8:	42a9      	cmp	r1, r5
    24ea:	d101      	bne.n	24f0 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    24ec:	331c      	adds	r3, #28
    24ee:	e7f3      	b.n	24d8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    24f0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    24f2:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    24f4:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    24f6:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    24f8:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    24fa:	4432      	add	r2, r6
    24fc:	e7f4      	b.n	24e8 <init_mem_slab_module+0x18>
    24fe:	bf00      	nop
    2500:	20001544 	.word	0x20001544
    2504:	20001544 	.word	0x20001544

00002508 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    2508:	b510      	push	{r4, lr}
    250a:	4613      	mov	r3, r2
    250c:	460c      	mov	r4, r1
    250e:	f04f 0220 	mov.w	r2, #32
    2512:	f3ef 8111 	mrs	r1, BASEPRI
    2516:	f382 8811 	msr	BASEPRI, r2
    251a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    251e:	6942      	ldr	r2, [r0, #20]
    2520:	b162      	cbz	r2, 253c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    2522:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2524:	6943      	ldr	r3, [r0, #20]
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    252a:	6983      	ldr	r3, [r0, #24]
    252c:	3301      	adds	r3, #1
    252e:	6183      	str	r3, [r0, #24]
		result = 0;
    2530:	2000      	movs	r0, #0
	__asm__ volatile(
    2532:	f381 8811 	msr	BASEPRI, r1
    2536:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    253a:	e00d      	b.n	2558 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
    253c:	b91b      	cbnz	r3, 2546 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    253e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    2540:	f06f 000b 	mvn.w	r0, #11
    2544:	e7f5      	b.n	2532 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    2546:	4602      	mov	r2, r0
    2548:	4804      	ldr	r0, [pc, #16]	; (255c <k_mem_slab_alloc+0x54>)
    254a:	f000 fabd 	bl	2ac8 <z_pend_curr>
		if (result == 0) {
    254e:	b918      	cbnz	r0, 2558 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <k_mem_slab_alloc+0x58>)
    2552:	689b      	ldr	r3, [r3, #8]
    2554:	695b      	ldr	r3, [r3, #20]
    2556:	6023      	str	r3, [r4, #0]
}
    2558:	bd10      	pop	{r4, pc}
    255a:	bf00      	nop
    255c:	200006c5 	.word	0x200006c5
    2560:	20000668 	.word	0x20000668

00002564 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    2564:	b570      	push	{r4, r5, r6, lr}
    2566:	4604      	mov	r4, r0
    2568:	460d      	mov	r5, r1
	__asm__ volatile(
    256a:	f04f 0320 	mov.w	r3, #32
    256e:	f3ef 8611 	mrs	r6, BASEPRI
    2572:	f383 8811 	msr	BASEPRI, r3
    2576:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    257a:	f002 f8da 	bl	4732 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    257e:	b180      	cbz	r0, 25a2 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2580:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    2582:	682a      	ldr	r2, [r5, #0]
    2584:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
    2586:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2588:	7b42      	ldrb	r2, [r0, #13]
    258a:	06d2      	lsls	r2, r2, #27
    258c:	d103      	bne.n	2596 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    258e:	6983      	ldr	r3, [r0, #24]
    2590:	b90b      	cbnz	r3, 2596 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    2592:	f000 f97f 	bl	2894 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    2596:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    2598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    259c:	4807      	ldr	r0, [pc, #28]	; (25bc <k_mem_slab_free+0x58>)
    259e:	f002 b868 	b.w	4672 <z_reschedule>
		**(char ***)mem = slab->free_list;
    25a2:	682b      	ldr	r3, [r5, #0]
    25a4:	6962      	ldr	r2, [r4, #20]
    25a6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    25a8:	682b      	ldr	r3, [r5, #0]
    25aa:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    25ac:	69a3      	ldr	r3, [r4, #24]
    25ae:	3b01      	subs	r3, #1
    25b0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    25b2:	f386 8811 	msr	BASEPRI, r6
    25b6:	f3bf 8f6f 	isb	sy
}
    25ba:	bd70      	pop	{r4, r5, r6, pc}
    25bc:	200006c5 	.word	0x200006c5

000025c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    25c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25c2:	4604      	mov	r4, r0
    25c4:	460f      	mov	r7, r1
	__asm__ volatile(
    25c6:	f04f 0320 	mov.w	r3, #32
    25ca:	f3ef 8511 	mrs	r5, BASEPRI
    25ce:	f383 8811 	msr	BASEPRI, r3
    25d2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    25d6:	68c2      	ldr	r2, [r0, #12]
    25d8:	4930      	ldr	r1, [pc, #192]	; (269c <z_impl_k_mutex_lock+0xdc>)
    25da:	b15a      	cbz	r2, 25f4 <z_impl_k_mutex_lock+0x34>
    25dc:	6880      	ldr	r0, [r0, #8]
    25de:	688e      	ldr	r6, [r1, #8]
    25e0:	42b0      	cmp	r0, r6
    25e2:	d015      	beq.n	2610 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    25e4:	b9b7      	cbnz	r7, 2614 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    25e6:	f385 8811 	msr	BASEPRI, r5
    25ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    25ee:	f06f 000f 	mvn.w	r0, #15
    25f2:	e00c      	b.n	260e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    25f4:	688b      	ldr	r3, [r1, #8]
    25f6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    25fa:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    25fc:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    25fe:	3201      	adds	r2, #1
    2600:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    2602:	60a3      	str	r3, [r4, #8]
    2604:	f385 8811 	msr	BASEPRI, r5
    2608:	f3bf 8f6f 	isb	sy
		return 0;
    260c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    2610:	6923      	ldr	r3, [r4, #16]
    2612:	e7f2      	b.n	25fa <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2614:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2618:	f996 100e 	ldrsb.w	r1, [r6, #14]
    261c:	4299      	cmp	r1, r3
    261e:	bfa8      	it	ge
    2620:	4619      	movge	r1, r3
    2622:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    2626:	4299      	cmp	r1, r3
    2628:	da2b      	bge.n	2682 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    262a:	f000 fa61 	bl	2af0 <z_set_prio>
    262e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2630:	463b      	mov	r3, r7
    2632:	4622      	mov	r2, r4
    2634:	4629      	mov	r1, r5
    2636:	481a      	ldr	r0, [pc, #104]	; (26a0 <z_impl_k_mutex_lock+0xe0>)
    2638:	f000 fa46 	bl	2ac8 <z_pend_curr>
	if (got_mutex == 0) {
    263c:	2800      	cmp	r0, #0
    263e:	d0e6      	beq.n	260e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    2640:	f04f 0320 	mov.w	r3, #32
    2644:	f3ef 8511 	mrs	r5, BASEPRI
    2648:	f383 8811 	msr	BASEPRI, r3
    264c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2650:	6823      	ldr	r3, [r4, #0]
    2652:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2654:	429c      	cmp	r4, r3
    2656:	d007      	beq.n	2668 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    2658:	b133      	cbz	r3, 2668 <z_impl_k_mutex_lock+0xa8>
    265a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    265e:	4299      	cmp	r1, r3
    2660:	bfa8      	it	ge
    2662:	4619      	movge	r1, r3
    2664:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2668:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    266a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    266e:	4299      	cmp	r1, r3
    2670:	d109      	bne.n	2686 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    2672:	b16e      	cbz	r6, 2690 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    2674:	4629      	mov	r1, r5
    2676:	480a      	ldr	r0, [pc, #40]	; (26a0 <z_impl_k_mutex_lock+0xe0>)
    2678:	f001 fffb 	bl	4672 <z_reschedule>
	return -EAGAIN;
    267c:	f06f 000a 	mvn.w	r0, #10
    2680:	e7c5      	b.n	260e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    2682:	2600      	movs	r6, #0
    2684:	e7d4      	b.n	2630 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    2686:	f000 fa33 	bl	2af0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    268a:	2800      	cmp	r0, #0
    268c:	d1f2      	bne.n	2674 <z_impl_k_mutex_lock+0xb4>
    268e:	e7f0      	b.n	2672 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    2690:	f385 8811 	msr	BASEPRI, r5
    2694:	f3bf 8f6f 	isb	sy
    2698:	e7f0      	b.n	267c <z_impl_k_mutex_lock+0xbc>
    269a:	bf00      	nop
    269c:	20000668 	.word	0x20000668
    26a0:	200006c5 	.word	0x200006c5

000026a4 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    26a4:	4b1e      	ldr	r3, [pc, #120]	; (2720 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    26a6:	b570      	push	{r4, r5, r6, lr}
    26a8:	689a      	ldr	r2, [r3, #8]
    26aa:	4604      	mov	r4, r0
    26ac:	7bd3      	ldrb	r3, [r2, #15]
    26ae:	3b01      	subs	r3, #1
    26b0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    26b2:	68c3      	ldr	r3, [r0, #12]
    26b4:	2b01      	cmp	r3, #1
    26b6:	d005      	beq.n	26c4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    26b8:	3b01      	subs	r3, #1
    26ba:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    26bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    26c0:	f000 b8cc 	b.w	285c <k_sched_unlock>
	__asm__ volatile(
    26c4:	f04f 0320 	mov.w	r3, #32
    26c8:	f3ef 8611 	mrs	r6, BASEPRI
    26cc:	f383 8811 	msr	BASEPRI, r3
    26d0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    26d4:	6901      	ldr	r1, [r0, #16]
    26d6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    26d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    26dc:	4299      	cmp	r1, r3
    26de:	d001      	beq.n	26e4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    26e0:	f000 fa06 	bl	2af0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    26e4:	4620      	mov	r0, r4
    26e6:	f002 f824 	bl	4732 <z_unpend_first_thread>
    26ea:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    26ec:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    26ee:	b180      	cbz	r0, 2712 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    26f0:	7b43      	ldrb	r3, [r0, #13]
    26f2:	06db      	lsls	r3, r3, #27
    26f4:	d103      	bne.n	26fe <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    26f6:	6983      	ldr	r3, [r0, #24]
    26f8:	b90b      	cbnz	r3, 26fe <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    26fa:	f000 f8cb 	bl	2894 <z_add_thread_to_ready_q>
	__asm__ volatile(
    26fe:	f386 8811 	msr	BASEPRI, r6
    2702:	f3bf 8f6f 	isb	sy
    2706:	2300      	movs	r3, #0
    2708:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    270a:	f995 300e 	ldrsb.w	r3, [r5, #14]
    270e:	6123      	str	r3, [r4, #16]
    2710:	e7d4      	b.n	26bc <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    2712:	60e0      	str	r0, [r4, #12]
    2714:	f386 8811 	msr	BASEPRI, r6
    2718:	f3bf 8f6f 	isb	sy
    271c:	e7ce      	b.n	26bc <z_impl_k_mutex_unlock+0x18>
    271e:	bf00      	nop
    2720:	20000668 	.word	0x20000668

00002724 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2724:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    2728:	280d      	cmp	r0, #13
    272a:	d809      	bhi.n	2740 <resched.part.15+0x1c>
    272c:	b128      	cbz	r0, 273a <resched.part.15+0x16>
    272e:	4b05      	ldr	r3, [pc, #20]	; (2744 <resched.part.15+0x20>)
    2730:	6858      	ldr	r0, [r3, #4]
    2732:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    2736:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    273a:	f080 0001 	eor.w	r0, r0, #1
    273e:	4770      	bx	lr
    2740:	2001      	movs	r0, #1
    2742:	e7fa      	b.n	273a <resched.part.15+0x16>
    2744:	e000ed00 	.word	0xe000ed00

00002748 <z_reset_time_slice>:
{
    2748:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    274a:	4c08      	ldr	r4, [pc, #32]	; (276c <z_reset_time_slice+0x24>)
    274c:	6823      	ldr	r3, [r4, #0]
    274e:	b15b      	cbz	r3, 2768 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2750:	f7fe f94e 	bl	9f0 <z_clock_elapsed>
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	4a06      	ldr	r2, [pc, #24]	; (2770 <z_reset_time_slice+0x28>)
    2758:	4418      	add	r0, r3
    275a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    275c:	2100      	movs	r1, #0
}
    275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    2762:	4618      	mov	r0, r3
    2764:	f002 b868 	b.w	4838 <z_set_timeout_expiry>
}
    2768:	bd10      	pop	{r4, pc}
    276a:	bf00      	nop
    276c:	200006a0 	.word	0x200006a0
    2770:	20000668 	.word	0x20000668

00002774 <k_sched_time_slice_set>:
{
    2774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2776:	460d      	mov	r5, r1
	__asm__ volatile(
    2778:	f04f 0320 	mov.w	r3, #32
    277c:	f3ef 8411 	mrs	r4, BASEPRI
    2780:	f383 8811 	msr	BASEPRI, r3
    2784:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    2788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    278c:	f240 36e7 	movw	r6, #999	; 0x3e7
    2790:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    2792:	2200      	movs	r2, #0
    2794:	fbc1 6700 	smlal	r6, r7, r1, r0
    2798:	4b09      	ldr	r3, [pc, #36]	; (27c0 <k_sched_time_slice_set+0x4c>)
    279a:	4630      	mov	r0, r6
    279c:	611a      	str	r2, [r3, #16]
    279e:	4639      	mov	r1, r7
    27a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    27a4:	2300      	movs	r3, #0
    27a6:	f7fd fd3b 	bl	220 <__aeabi_ldivmod>
    27aa:	4b06      	ldr	r3, [pc, #24]	; (27c4 <k_sched_time_slice_set+0x50>)
    27ac:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    27ae:	4b06      	ldr	r3, [pc, #24]	; (27c8 <k_sched_time_slice_set+0x54>)
    27b0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    27b2:	f7ff ffc9 	bl	2748 <z_reset_time_slice>
	__asm__ volatile(
    27b6:	f384 8811 	msr	BASEPRI, r4
    27ba:	f3bf 8f6f 	isb	sy
}
    27be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27c0:	20000668 	.word	0x20000668
    27c4:	200006a0 	.word	0x200006a0
    27c8:	2000069c 	.word	0x2000069c

000027cc <k_sched_lock>:
	__asm__ volatile(
    27cc:	f04f 0320 	mov.w	r3, #32
    27d0:	f3ef 8111 	mrs	r1, BASEPRI
    27d4:	f383 8811 	msr	BASEPRI, r3
    27d8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <k_sched_lock+0x24>)
    27de:	689a      	ldr	r2, [r3, #8]
    27e0:	7bd3      	ldrb	r3, [r2, #15]
    27e2:	3b01      	subs	r3, #1
    27e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    27e6:	f381 8811 	msr	BASEPRI, r1
    27ea:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    27ee:	4770      	bx	lr
    27f0:	20000668 	.word	0x20000668

000027f4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    27f4:	4b09      	ldr	r3, [pc, #36]	; (281c <z_priq_dumb_remove+0x28>)
    27f6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    27fa:	4282      	cmp	r2, r0
    27fc:	d105      	bne.n	280a <z_priq_dumb_remove+0x16>
    27fe:	689b      	ldr	r3, [r3, #8]
    2800:	428b      	cmp	r3, r1
    2802:	d102      	bne.n	280a <z_priq_dumb_remove+0x16>
    2804:	7b4b      	ldrb	r3, [r1, #13]
    2806:	06db      	lsls	r3, r3, #27
    2808:	d107      	bne.n	281a <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    280a:	e9d1 2300 	ldrd	r2, r3, [r1]
    280e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    2810:	680a      	ldr	r2, [r1, #0]
    2812:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    2814:	2300      	movs	r3, #0
	node->prev = NULL;
    2816:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    281a:	4770      	bx	lr
    281c:	20000668 	.word	0x20000668

00002820 <update_cache>:
{
    2820:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2822:	4c0d      	ldr	r4, [pc, #52]	; (2858 <update_cache+0x38>)
{
    2824:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2826:	f104 0028 	add.w	r0, r4, #40	; 0x28
    282a:	f001 ff4b 	bl	46c4 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    282e:	4605      	mov	r5, r0
    2830:	b900      	cbnz	r0, 2834 <update_cache+0x14>
    2832:	68e5      	ldr	r5, [r4, #12]
    2834:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    2836:	b94a      	cbnz	r2, 284c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2838:	7b5a      	ldrb	r2, [r3, #13]
    283a:	06d2      	lsls	r2, r2, #27
    283c:	d106      	bne.n	284c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    283e:	69aa      	ldr	r2, [r5, #24]
    2840:	b922      	cbnz	r2, 284c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    2842:	89da      	ldrh	r2, [r3, #14]
    2844:	2a7f      	cmp	r2, #127	; 0x7f
    2846:	d901      	bls.n	284c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2848:	6263      	str	r3, [r4, #36]	; 0x24
}
    284a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    284c:	429d      	cmp	r5, r3
    284e:	d001      	beq.n	2854 <update_cache+0x34>
			z_reset_time_slice();
    2850:	f7ff ff7a 	bl	2748 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    2854:	6265      	str	r5, [r4, #36]	; 0x24
}
    2856:	e7f8      	b.n	284a <update_cache+0x2a>
    2858:	20000668 	.word	0x20000668

0000285c <k_sched_unlock>:
{
    285c:	b510      	push	{r4, lr}
	__asm__ volatile(
    285e:	f04f 0320 	mov.w	r3, #32
    2862:	f3ef 8411 	mrs	r4, BASEPRI
    2866:	f383 8811 	msr	BASEPRI, r3
    286a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    286e:	4b08      	ldr	r3, [pc, #32]	; (2890 <k_sched_unlock+0x34>)
		update_cache(0);
    2870:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    2872:	689a      	ldr	r2, [r3, #8]
    2874:	7bd3      	ldrb	r3, [r2, #15]
    2876:	3301      	adds	r3, #1
    2878:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    287a:	f7ff ffd1 	bl	2820 <update_cache>
	__asm__ volatile(
    287e:	f384 8811 	msr	BASEPRI, r4
    2882:	f3bf 8f6f 	isb	sy
}
    2886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    288a:	f001 bf11 	b.w	46b0 <z_reschedule_unlocked>
    288e:	bf00      	nop
    2890:	20000668 	.word	0x20000668

00002894 <z_add_thread_to_ready_q>:
{
    2894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2896:	f04f 0320 	mov.w	r3, #32
    289a:	f3ef 8411 	mrs	r4, BASEPRI
    289e:	f383 8811 	msr	BASEPRI, r3
    28a2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    28a6:	4a16      	ldr	r2, [pc, #88]	; (2900 <z_add_thread_to_ready_q+0x6c>)
    28a8:	4611      	mov	r1, r2
    28aa:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    28ae:	428b      	cmp	r3, r1
    28b0:	d00c      	beq.n	28cc <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    28b2:	b15b      	cbz	r3, 28cc <z_add_thread_to_ready_q+0x38>
    28b4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    28b6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    28ba:	f993 700e 	ldrsb.w	r7, [r3, #14]
    28be:	42af      	cmp	r7, r5
    28c0:	dc0b      	bgt.n	28da <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    28c2:	42b3      	cmp	r3, r6
    28c4:	d002      	beq.n	28cc <z_add_thread_to_ready_q+0x38>
    28c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    28c8:	2b00      	cmp	r3, #0
    28ca:	d1f6      	bne.n	28ba <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    28cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    28ce:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    28d0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    28d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    28d4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    28d6:	62d0      	str	r0, [r2, #44]	; 0x2c
    28d8:	e005      	b.n	28e6 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    28da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    28dc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    28e0:	685a      	ldr	r2, [r3, #4]
    28e2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    28e4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    28e6:	7b43      	ldrb	r3, [r0, #13]
    28e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    28ec:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    28ee:	2000      	movs	r0, #0
    28f0:	f7ff ff96 	bl	2820 <update_cache>
	__asm__ volatile(
    28f4:	f384 8811 	msr	BASEPRI, r4
    28f8:	f3bf 8f6f 	isb	sy
}
    28fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28fe:	bf00      	nop
    2900:	20000668 	.word	0x20000668

00002904 <z_move_thread_to_end_of_prio_q>:
{
    2904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2906:	4604      	mov	r4, r0
	__asm__ volatile(
    2908:	f04f 0320 	mov.w	r3, #32
    290c:	f3ef 8511 	mrs	r5, BASEPRI
    2910:	f383 8811 	msr	BASEPRI, r3
    2914:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2918:	7b43      	ldrb	r3, [r0, #13]
    291a:	065a      	lsls	r2, r3, #25
    291c:	d503      	bpl.n	2926 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    291e:	4601      	mov	r1, r0
    2920:	4818      	ldr	r0, [pc, #96]	; (2984 <z_move_thread_to_end_of_prio_q+0x80>)
    2922:	f7ff ff67 	bl	27f4 <z_priq_dumb_remove>
	return list->head == list;
    2926:	4a18      	ldr	r2, [pc, #96]	; (2988 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2928:	f102 0128 	add.w	r1, r2, #40	; 0x28
    292c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2930:	428b      	cmp	r3, r1
    2932:	d00b      	beq.n	294c <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2934:	b153      	cbz	r3, 294c <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
    2936:	f994 600e 	ldrsb.w	r6, [r4, #14]
    293a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    293e:	42b7      	cmp	r7, r6
    2940:	dc0a      	bgt.n	2958 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
    2942:	4283      	cmp	r3, r0
    2944:	d002      	beq.n	294c <z_move_thread_to_end_of_prio_q+0x48>
    2946:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2948:	2b00      	cmp	r3, #0
    294a:	d1f6      	bne.n	293a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    294c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    2950:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2952:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2954:	62d4      	str	r4, [r2, #44]	; 0x2c
    2956:	e005      	b.n	2964 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
    2958:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    295a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    295e:	6859      	ldr	r1, [r3, #4]
    2960:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2962:	605c      	str	r4, [r3, #4]
    2964:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2966:	6890      	ldr	r0, [r2, #8]
    2968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    296c:	7363      	strb	r3, [r4, #13]
    296e:	1b03      	subs	r3, r0, r4
    2970:	4258      	negs	r0, r3
    2972:	4158      	adcs	r0, r3
    2974:	f7ff ff54 	bl	2820 <update_cache>
	__asm__ volatile(
    2978:	f385 8811 	msr	BASEPRI, r5
    297c:	f3bf 8f6f 	isb	sy
}
    2980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2982:	bf00      	nop
    2984:	20000690 	.word	0x20000690
    2988:	20000668 	.word	0x20000668

0000298c <z_time_slice>:
	if (pending_current == _current) {
    298c:	4a15      	ldr	r2, [pc, #84]	; (29e4 <z_time_slice+0x58>)
    298e:	4916      	ldr	r1, [pc, #88]	; (29e8 <z_time_slice+0x5c>)
{
    2990:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2992:	680c      	ldr	r4, [r1, #0]
    2994:	6893      	ldr	r3, [r2, #8]
    2996:	42a3      	cmp	r3, r4
    2998:	4614      	mov	r4, r2
    299a:	d103      	bne.n	29a4 <z_time_slice+0x18>
}
    299c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    29a0:	f7ff bed2 	b.w	2748 <z_reset_time_slice>
	pending_current = NULL;
    29a4:	2500      	movs	r5, #0
    29a6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    29a8:	4910      	ldr	r1, [pc, #64]	; (29ec <z_time_slice+0x60>)
    29aa:	6809      	ldr	r1, [r1, #0]
    29ac:	b1b9      	cbz	r1, 29de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    29ae:	89d9      	ldrh	r1, [r3, #14]
    29b0:	297f      	cmp	r1, #127	; 0x7f
    29b2:	d814      	bhi.n	29de <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    29b4:	490e      	ldr	r1, [pc, #56]	; (29f0 <z_time_slice+0x64>)
    29b6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    29ba:	6809      	ldr	r1, [r1, #0]
    29bc:	428d      	cmp	r5, r1
    29be:	db0e      	blt.n	29de <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    29c0:	490c      	ldr	r1, [pc, #48]	; (29f4 <z_time_slice+0x68>)
    29c2:	428b      	cmp	r3, r1
    29c4:	d00b      	beq.n	29de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    29c6:	6999      	ldr	r1, [r3, #24]
    29c8:	b949      	cbnz	r1, 29de <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    29ca:	6911      	ldr	r1, [r2, #16]
    29cc:	4281      	cmp	r1, r0
    29ce:	dc03      	bgt.n	29d8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    29d0:	4618      	mov	r0, r3
    29d2:	f7ff ff97 	bl	2904 <z_move_thread_to_end_of_prio_q>
    29d6:	e7e1      	b.n	299c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    29d8:	1a09      	subs	r1, r1, r0
    29da:	6111      	str	r1, [r2, #16]
}
    29dc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    29de:	2300      	movs	r3, #0
    29e0:	6123      	str	r3, [r4, #16]
    29e2:	e7fb      	b.n	29dc <z_time_slice+0x50>
    29e4:	20000668 	.word	0x20000668
    29e8:	20000698 	.word	0x20000698
    29ec:	200006a0 	.word	0x200006a0
    29f0:	2000069c 	.word	0x2000069c
    29f4:	20000590 	.word	0x20000590

000029f8 <z_remove_thread_from_ready_q>:
{
    29f8:	b538      	push	{r3, r4, r5, lr}
    29fa:	4604      	mov	r4, r0
	__asm__ volatile(
    29fc:	f04f 0320 	mov.w	r3, #32
    2a00:	f3ef 8511 	mrs	r5, BASEPRI
    2a04:	f383 8811 	msr	BASEPRI, r3
    2a08:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2a0c:	7b43      	ldrb	r3, [r0, #13]
    2a0e:	065a      	lsls	r2, r3, #25
    2a10:	d507      	bpl.n	2a22 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2a12:	4601      	mov	r1, r0
    2a14:	4809      	ldr	r0, [pc, #36]	; (2a3c <z_remove_thread_from_ready_q+0x44>)
    2a16:	f7ff feed 	bl	27f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2a1a:	7b63      	ldrb	r3, [r4, #13]
    2a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a20:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2a22:	4b07      	ldr	r3, [pc, #28]	; (2a40 <z_remove_thread_from_ready_q+0x48>)
    2a24:	6898      	ldr	r0, [r3, #8]
    2a26:	1b03      	subs	r3, r0, r4
    2a28:	4258      	negs	r0, r3
    2a2a:	4158      	adcs	r0, r3
    2a2c:	f7ff fef8 	bl	2820 <update_cache>
	__asm__ volatile(
    2a30:	f385 8811 	msr	BASEPRI, r5
    2a34:	f3bf 8f6f 	isb	sy
}
    2a38:	bd38      	pop	{r3, r4, r5, pc}
    2a3a:	bf00      	nop
    2a3c:	20000690 	.word	0x20000690
    2a40:	20000668 	.word	0x20000668

00002a44 <pend>:
{
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	4604      	mov	r4, r0
    2a48:	460d      	mov	r5, r1
    2a4a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    2a4c:	f7ff ffd4 	bl	29f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    2a50:	7b63      	ldrb	r3, [r4, #13]
    2a52:	f043 0302 	orr.w	r3, r3, #2
    2a56:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    2a58:	b1ed      	cbz	r5, 2a96 <pend+0x52>
	return list->head == list;
    2a5a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    2a5c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a5e:	429d      	cmp	r5, r3
    2a60:	d00c      	beq.n	2a7c <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a62:	b15b      	cbz	r3, 2a7c <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
    2a64:	f994 200e 	ldrsb.w	r2, [r4, #14]
    2a68:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2a6c:	4291      	cmp	r1, r2
    2a6e:	dc0c      	bgt.n	2a8a <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
    2a70:	6869      	ldr	r1, [r5, #4]
    2a72:	428b      	cmp	r3, r1
    2a74:	d002      	beq.n	2a7c <pend+0x38>
    2a76:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d1f5      	bne.n	2a68 <pend+0x24>
	node->prev = list->tail;
    2a7c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    2a7e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    2a80:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2a82:	686b      	ldr	r3, [r5, #4]
    2a84:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2a86:	606c      	str	r4, [r5, #4]
    2a88:	e005      	b.n	2a96 <pend+0x52>
	node->prev = successor->prev;
    2a8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2a8c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2a90:	685a      	ldr	r2, [r3, #4]
    2a92:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2a94:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    2a96:	1c73      	adds	r3, r6, #1
    2a98:	d013      	beq.n	2ac2 <pend+0x7e>
    2a9a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2a9e:	f240 30e7 	movw	r0, #999	; 0x3e7
    2aa2:	2100      	movs	r1, #0
    2aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2aa8:	fbc5 0106 	smlal	r0, r1, r5, r6
    2aac:	2300      	movs	r3, #0
    2aae:	f7fd fbb7 	bl	220 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2ab2:	4904      	ldr	r1, [pc, #16]	; (2ac4 <pend+0x80>)
    2ab4:	1c42      	adds	r2, r0, #1
    2ab6:	f104 0018 	add.w	r0, r4, #24
}
    2aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2abe:	f000 b98b 	b.w	2dd8 <z_add_timeout>
    2ac2:	bd70      	pop	{r4, r5, r6, pc}
    2ac4:	000046d1 	.word	0x000046d1

00002ac8 <z_pend_curr>:
{
    2ac8:	b510      	push	{r4, lr}
    2aca:	460c      	mov	r4, r1
    2acc:	4611      	mov	r1, r2
	pending_current = _current;
    2ace:	4a06      	ldr	r2, [pc, #24]	; (2ae8 <z_pend_curr+0x20>)
    2ad0:	6890      	ldr	r0, [r2, #8]
    2ad2:	4a06      	ldr	r2, [pc, #24]	; (2aec <z_pend_curr+0x24>)
    2ad4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    2ad6:	461a      	mov	r2, r3
    2ad8:	f7ff ffb4 	bl	2a44 <pend>
    2adc:	4620      	mov	r0, r4
}
    2ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ae2:	f7fe bb8f 	b.w	1204 <z_arch_swap>
    2ae6:	bf00      	nop
    2ae8:	20000668 	.word	0x20000668
    2aec:	20000698 	.word	0x20000698

00002af0 <z_set_prio>:
{
    2af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2af4:	4604      	mov	r4, r0
	__asm__ volatile(
    2af6:	f04f 0320 	mov.w	r3, #32
    2afa:	f3ef 8911 	mrs	r9, BASEPRI
    2afe:	f383 8811 	msr	BASEPRI, r3
    2b02:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    2b06:	f001 fd92 	bl	462e <z_is_thread_ready>
    2b0a:	b24e      	sxtb	r6, r1
		if (need_sched) {
    2b0c:	4680      	mov	r8, r0
    2b0e:	b368      	cbz	r0, 2b6c <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2b10:	4d17      	ldr	r5, [pc, #92]	; (2b70 <z_set_prio+0x80>)
    2b12:	4621      	mov	r1, r4
    2b14:	f105 0728 	add.w	r7, r5, #40	; 0x28
    2b18:	4638      	mov	r0, r7
    2b1a:	f7ff fe6b 	bl	27f4 <z_priq_dumb_remove>
	return list->head == list;
    2b1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2b20:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b22:	42bb      	cmp	r3, r7
    2b24:	462a      	mov	r2, r5
    2b26:	d00a      	beq.n	2b3e <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b28:	b14b      	cbz	r3, 2b3e <z_set_prio+0x4e>
    2b2a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2b2c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2b30:	42b0      	cmp	r0, r6
    2b32:	dc0b      	bgt.n	2b4c <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
    2b34:	4299      	cmp	r1, r3
    2b36:	d002      	beq.n	2b3e <z_set_prio+0x4e>
    2b38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d1f6      	bne.n	2b2c <z_set_prio+0x3c>
	node->prev = list->tail;
    2b3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2b40:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    2b42:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2b44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2b46:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2b48:	62d4      	str	r4, [r2, #44]	; 0x2c
    2b4a:	e005      	b.n	2b58 <z_set_prio+0x68>
	node->prev = successor->prev;
    2b4c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2b4e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2b52:	685a      	ldr	r2, [r3, #4]
    2b54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2b56:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2b58:	2001      	movs	r0, #1
    2b5a:	f7ff fe61 	bl	2820 <update_cache>
	__asm__ volatile(
    2b5e:	f389 8811 	msr	BASEPRI, r9
    2b62:	f3bf 8f6f 	isb	sy
}
    2b66:	4640      	mov	r0, r8
    2b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
    2b6c:	73a6      	strb	r6, [r4, #14]
    2b6e:	e7f6      	b.n	2b5e <z_set_prio+0x6e>
    2b70:	20000668 	.word	0x20000668

00002b74 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2b74:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2b76:	4b04      	ldr	r3, [pc, #16]	; (2b88 <z_sched_init+0x14>)
    2b78:	4608      	mov	r0, r1
    2b7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2b7e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2b82:	f7ff bdf7 	b.w	2774 <k_sched_time_slice_set>
    2b86:	bf00      	nop
    2b88:	20000668 	.word	0x20000668

00002b8c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    2b8c:	4b01      	ldr	r3, [pc, #4]	; (2b94 <z_impl_k_current_get+0x8>)
    2b8e:	6898      	ldr	r0, [r3, #8]
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	20000668 	.word	0x20000668

00002b98 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2b98:	b570      	push	{r4, r5, r6, lr}
    2b9a:	4604      	mov	r4, r0
	__asm__ volatile(
    2b9c:	f04f 0320 	mov.w	r3, #32
    2ba0:	f3ef 8611 	mrs	r6, BASEPRI
    2ba4:	f383 8811 	msr	BASEPRI, r3
    2ba8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    2bac:	f001 fdc1 	bl	4732 <z_unpend_first_thread>
	if (thread != NULL) {
    2bb0:	4605      	mov	r5, r0
    2bb2:	b170      	cbz	r0, 2bd2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2bb4:	7b43      	ldrb	r3, [r0, #13]
    2bb6:	06db      	lsls	r3, r3, #27
    2bb8:	d103      	bne.n	2bc2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    2bba:	6983      	ldr	r3, [r0, #24]
    2bbc:	b90b      	cbnz	r3, 2bc2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    2bbe:	f7ff fe69 	bl	2894 <z_add_thread_to_ready_q>
    2bc2:	2300      	movs	r3, #0
    2bc4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    2bc6:	4631      	mov	r1, r6
}
    2bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    2bcc:	4804      	ldr	r0, [pc, #16]	; (2be0 <z_impl_k_sem_give+0x48>)
    2bce:	f001 bd50 	b.w	4672 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2bd2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	bf18      	it	ne
    2bda:	3301      	addne	r3, #1
    2bdc:	60a3      	str	r3, [r4, #8]
    2bde:	e7f2      	b.n	2bc6 <z_impl_k_sem_give+0x2e>
    2be0:	200006c5 	.word	0x200006c5

00002be4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    2be4:	b410      	push	{r4}
    2be6:	4602      	mov	r2, r0
    2be8:	460b      	mov	r3, r1
    2bea:	f04f 0020 	mov.w	r0, #32
    2bee:	f3ef 8111 	mrs	r1, BASEPRI
    2bf2:	f380 8811 	msr	BASEPRI, r0
    2bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    2bfa:	6894      	ldr	r4, [r2, #8]
    2bfc:	b14c      	cbz	r4, 2c12 <z_impl_k_sem_take+0x2e>
		sem->count--;
    2bfe:	3c01      	subs	r4, #1
    2c00:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    2c02:	f381 8811 	msr	BASEPRI, r1
    2c06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    2c0a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    2c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2c10:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    2c12:	b933      	cbnz	r3, 2c22 <z_impl_k_sem_take+0x3e>
    2c14:	f381 8811 	msr	BASEPRI, r1
    2c18:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    2c1c:	f06f 000f 	mvn.w	r0, #15
    2c20:	e7f4      	b.n	2c0c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2c22:	4802      	ldr	r0, [pc, #8]	; (2c2c <z_impl_k_sem_take+0x48>)
}
    2c24:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2c28:	f7ff bf4e 	b.w	2ac8 <z_pend_curr>
    2c2c:	200006c5 	.word	0x200006c5

00002c30 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    2c30:	b510      	push	{r4, lr}
    2c32:	4602      	mov	r2, r0
	__asm__ volatile(
    2c34:	f04f 0320 	mov.w	r3, #32
    2c38:	f3ef 8411 	mrs	r4, BASEPRI
    2c3c:	f383 8811 	msr	BASEPRI, r3
    2c40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    2c44:	7b43      	ldrb	r3, [r0, #13]
    2c46:	0759      	lsls	r1, r3, #29
    2c48:	d404      	bmi.n	2c54 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    2c4a:	f384 8811 	msr	BASEPRI, r4
    2c4e:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    2c52:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2c54:	f023 0304 	bic.w	r3, r3, #4
    2c58:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    2c5a:	f001 fd97 	bl	478c <z_is_thread_ready>
    2c5e:	b110      	cbz	r0, 2c66 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    2c60:	4610      	mov	r0, r2
    2c62:	f7ff fe17 	bl	2894 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    2c66:	4621      	mov	r1, r4
}
    2c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    2c6c:	4801      	ldr	r0, [pc, #4]	; (2c74 <z_impl_k_thread_start+0x44>)
    2c6e:	f001 bd00 	b.w	4672 <z_reschedule>
    2c72:	bf00      	nop
    2c74:	200006c5 	.word	0x200006c5

00002c78 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2c78:	b530      	push	{r4, r5, lr}
    2c7a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2c7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    2c7e:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2c80:	9504      	str	r5, [sp, #16]
    2c82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    2c84:	9503      	str	r5, [sp, #12]
    2c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    2c88:	9502      	str	r5, [sp, #8]
    2c8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2c8c:	9501      	str	r5, [sp, #4]
    2c8e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2c90:	9500      	str	r5, [sp, #0]
    2c92:	f7fe faf9 	bl	1288 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2c96:	4b04      	ldr	r3, [pc, #16]	; (2ca8 <z_setup_new_thread+0x30>)
    2c98:	689b      	ldr	r3, [r3, #8]
    2c9a:	b913      	cbnz	r3, 2ca2 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2c9c:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    2c9e:	b007      	add	sp, #28
    2ca0:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    2ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2ca4:	e7fa      	b.n	2c9c <z_setup_new_thread+0x24>
    2ca6:	bf00      	nop
    2ca8:	20000668 	.word	0x20000668

00002cac <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2cb0:	4e28      	ldr	r6, [pc, #160]	; (2d54 <z_init_static_threads+0xa8>)
    2cb2:	4d29      	ldr	r5, [pc, #164]	; (2d58 <z_init_static_threads+0xac>)
    2cb4:	46b0      	mov	r8, r6
{
    2cb6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2cb8:	42b5      	cmp	r5, r6
    2cba:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2cbe:	d310      	bcc.n	2ce2 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2cc0:	f7ff fd84 	bl	27cc <k_sched_lock>
    2cc4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2cc8:	f240 36e7 	movw	r6, #999	; 0x3e7
    2ccc:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    2cce:	4c22      	ldr	r4, [pc, #136]	; (2d58 <z_init_static_threads+0xac>)
    2cd0:	f8df a088 	ldr.w	sl, [pc, #136]	; 2d5c <z_init_static_threads+0xb0>
    2cd4:	4544      	cmp	r4, r8
    2cd6:	d321      	bcc.n	2d1c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2cd8:	b007      	add	sp, #28
    2cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2cde:	f7ff bdbd 	b.w	285c <k_sched_unlock>
		z_setup_new_thread(
    2ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2ce6:	9305      	str	r3, [sp, #20]
    2ce8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2cec:	9304      	str	r3, [sp, #16]
    2cee:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2cf2:	9303      	str	r3, [sp, #12]
    2cf4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2cf8:	9302      	str	r3, [sp, #8]
    2cfa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2cfe:	9301      	str	r3, [sp, #4]
    2d00:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2d04:	9300      	str	r3, [sp, #0]
    2d06:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2d0a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2d0e:	f7ff ffb3 	bl	2c78 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2d12:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2d16:	64dd      	str	r5, [r3, #76]	; 0x4c
    2d18:	4625      	mov	r5, r4
    2d1a:	e7cd      	b.n	2cb8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2d1e:	1c4b      	adds	r3, r1, #1
    2d20:	d004      	beq.n	2d2c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    2d22:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    2d24:	b921      	cbnz	r1, 2d30 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    2d26:	4628      	mov	r0, r5
    2d28:	f7ff ff82 	bl	2c30 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2d2c:	3430      	adds	r4, #48	; 0x30
    2d2e:	e7d1      	b.n	2cd4 <z_init_static_threads+0x28>
    2d30:	46b3      	mov	fp, r6
    2d32:	46bc      	mov	ip, r7
    2d34:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2d3c:	2300      	movs	r3, #0
    2d3e:	4658      	mov	r0, fp
    2d40:	4661      	mov	r1, ip
    2d42:	f7fd fa6d 	bl	220 <__aeabi_ldivmod>
    2d46:	4651      	mov	r1, sl
    2d48:	1c42      	adds	r2, r0, #1
    2d4a:	f105 0018 	add.w	r0, r5, #24
    2d4e:	f000 f843 	bl	2dd8 <z_add_timeout>
    2d52:	e7eb      	b.n	2d2c <z_init_static_threads+0x80>
    2d54:	20001544 	.word	0x20001544
    2d58:	20001544 	.word	0x20001544
    2d5c:	000046d1 	.word	0x000046d1

00002d60 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2d60:	4b03      	ldr	r3, [pc, #12]	; (2d70 <elapsed+0x10>)
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	b90b      	cbnz	r3, 2d6a <elapsed+0xa>
    2d66:	f7fd be43 	b.w	9f0 <z_clock_elapsed>
}
    2d6a:	2000      	movs	r0, #0
    2d6c:	4770      	bx	lr
    2d6e:	bf00      	nop
    2d70:	200006a4 	.word	0x200006a4

00002d74 <remove_timeout>:
{
    2d74:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2d76:	b140      	cbz	r0, 2d8a <remove_timeout+0x16>
    2d78:	4a08      	ldr	r2, [pc, #32]	; (2d9c <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    2d7a:	6852      	ldr	r2, [r2, #4]
    2d7c:	4290      	cmp	r0, r2
    2d7e:	d004      	beq.n	2d8a <remove_timeout+0x16>
	if (next(t) != NULL) {
    2d80:	b11b      	cbz	r3, 2d8a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2d82:	689a      	ldr	r2, [r3, #8]
    2d84:	6881      	ldr	r1, [r0, #8]
    2d86:	440a      	add	r2, r1
    2d88:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2d8a:	6842      	ldr	r2, [r0, #4]
    2d8c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2d8e:	6803      	ldr	r3, [r0, #0]
    2d90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2d92:	2300      	movs	r3, #0
	node->prev = NULL;
    2d94:	e9c0 3300 	strd	r3, r3, [r0]
}
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	2000146c 	.word	0x2000146c

00002da0 <next_timeout>:
	return list->head == list;
    2da0:	4b0b      	ldr	r3, [pc, #44]	; (2dd0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2da2:	b510      	push	{r4, lr}
    2da4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2da6:	429c      	cmp	r4, r3
    2da8:	bf08      	it	eq
    2daa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2dac:	f7ff ffd8 	bl	2d60 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2db0:	b154      	cbz	r4, 2dc8 <next_timeout+0x28>
    2db2:	68a3      	ldr	r3, [r4, #8]
    2db4:	1a18      	subs	r0, r3, r0
    2db6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2dba:	4b06      	ldr	r3, [pc, #24]	; (2dd4 <next_timeout+0x34>)
    2dbc:	691b      	ldr	r3, [r3, #16]
    2dbe:	b113      	cbz	r3, 2dc6 <next_timeout+0x26>
    2dc0:	4298      	cmp	r0, r3
    2dc2:	bfa8      	it	ge
    2dc4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2dc6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2dc8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2dcc:	e7f5      	b.n	2dba <next_timeout+0x1a>
    2dce:	bf00      	nop
    2dd0:	2000146c 	.word	0x2000146c
    2dd4:	20000668 	.word	0x20000668

00002dd8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2dd8:	b570      	push	{r4, r5, r6, lr}
    2dda:	4604      	mov	r4, r0
    2ddc:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2dde:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2de0:	f04f 0320 	mov.w	r3, #32
    2de4:	f3ef 8511 	mrs	r5, BASEPRI
    2de8:	f383 8811 	msr	BASEPRI, r3
    2dec:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2df0:	f7ff ffb6 	bl	2d60 <elapsed>
    2df4:	2e01      	cmp	r6, #1
    2df6:	bfac      	ite	ge
    2df8:	1980      	addge	r0, r0, r6
    2dfa:	3001      	addlt	r0, #1
	return list->head == list;
    2dfc:	4b17      	ldr	r3, [pc, #92]	; (2e5c <z_add_timeout+0x84>)
    2dfe:	60a0      	str	r0, [r4, #8]
    2e00:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e02:	429a      	cmp	r2, r3
    2e04:	d001      	beq.n	2e0a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2e06:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2e08:	b932      	cbnz	r2, 2e18 <z_add_timeout+0x40>
	node->prev = list->tail;
    2e0a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2e0c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    2e0e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2e10:	685a      	ldr	r2, [r3, #4]
    2e12:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2e14:	605c      	str	r4, [r3, #4]
    2e16:	e00b      	b.n	2e30 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2e18:	6890      	ldr	r0, [r2, #8]
    2e1a:	68a1      	ldr	r1, [r4, #8]
    2e1c:	4288      	cmp	r0, r1
    2e1e:	dd16      	ble.n	2e4e <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    2e20:	1a41      	subs	r1, r0, r1
    2e22:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2e24:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2e26:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2e2a:	6851      	ldr	r1, [r2, #4]
    2e2c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2e2e:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2e30:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e32:	429a      	cmp	r2, r3
    2e34:	d006      	beq.n	2e44 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2e36:	4294      	cmp	r4, r2
    2e38:	d104      	bne.n	2e44 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    2e3a:	f7ff ffb1 	bl	2da0 <next_timeout>
    2e3e:	2100      	movs	r1, #0
    2e40:	f7fd fd88 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    2e44:	f385 8811 	msr	BASEPRI, r5
    2e48:	f3bf 8f6f 	isb	sy
		}
	}
}
    2e4c:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2e4e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2e50:	4296      	cmp	r6, r2
    2e52:	60a1      	str	r1, [r4, #8]
    2e54:	d0d9      	beq.n	2e0a <z_add_timeout+0x32>
    2e56:	6812      	ldr	r2, [r2, #0]
    2e58:	e7d6      	b.n	2e08 <z_add_timeout+0x30>
    2e5a:	bf00      	nop
    2e5c:	2000146c 	.word	0x2000146c

00002e60 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2e60:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2e64:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2e66:	f7ff fd91 	bl	298c <z_time_slice>
	__asm__ volatile(
    2e6a:	f04f 0320 	mov.w	r3, #32
    2e6e:	f3ef 8511 	mrs	r5, BASEPRI
    2e72:	f383 8811 	msr	BASEPRI, r3
    2e76:	f3bf 8f6f 	isb	sy
    2e7a:	4f21      	ldr	r7, [pc, #132]	; (2f00 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2e7c:	4e21      	ldr	r6, [pc, #132]	; (2f04 <z_clock_announce+0xa4>)
    2e7e:	46b8      	mov	r8, r7
	return list->head == list;
    2e80:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2f08 <z_clock_announce+0xa8>
    2e84:	6034      	str	r4, [r6, #0]
    2e86:	f8d9 4000 	ldr.w	r4, [r9]
    2e8a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e8c:	454c      	cmp	r4, r9
    2e8e:	e9d7 bc00 	ldrd	fp, ip, [r7]
    2e92:	d005      	beq.n	2ea0 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2e94:	b124      	cbz	r4, 2ea0 <z_clock_announce+0x40>
    2e96:	68a3      	ldr	r3, [r4, #8]
    2e98:	4293      	cmp	r3, r2
    2e9a:	dd14      	ble.n	2ec6 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2e9c:	1a9b      	subs	r3, r3, r2
    2e9e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    2ea0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    2ea2:	eb1b 0002 	adds.w	r0, fp, r2
    2ea6:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    2eaa:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2eae:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2eb0:	f7ff ff76 	bl	2da0 <next_timeout>
    2eb4:	4621      	mov	r1, r4
    2eb6:	f7fd fd4d 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    2eba:	f385 8811 	msr	BASEPRI, r5
    2ebe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2ec2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2ec6:	eb1b 0003 	adds.w	r0, fp, r3
    2eca:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2ece:	1ad3      	subs	r3, r2, r3
    2ed0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2ed2:	2300      	movs	r3, #0
		curr_tick += dt;
    2ed4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2ed8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2eda:	4620      	mov	r0, r4
    2edc:	f7ff ff4a 	bl	2d74 <remove_timeout>
    2ee0:	f385 8811 	msr	BASEPRI, r5
    2ee4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2ee8:	68e3      	ldr	r3, [r4, #12]
    2eea:	4798      	blx	r3
	__asm__ volatile(
    2eec:	f04f 0320 	mov.w	r3, #32
    2ef0:	f3ef 8511 	mrs	r5, BASEPRI
    2ef4:	f383 8811 	msr	BASEPRI, r3
    2ef8:	f3bf 8f6f 	isb	sy
    2efc:	e7c3      	b.n	2e86 <z_clock_announce+0x26>
    2efe:	bf00      	nop
    2f00:	20000000 	.word	0x20000000
    2f04:	200006a4 	.word	0x200006a4
    2f08:	2000146c 	.word	0x2000146c

00002f0c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2f0c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2f0e:	4c07      	ldr	r4, [pc, #28]	; (2f2c <init_static_pools+0x20>)
    2f10:	4d07      	ldr	r5, [pc, #28]	; (2f30 <init_static_pools+0x24>)
    2f12:	42ac      	cmp	r4, r5
    2f14:	d301      	bcc.n	2f1a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    2f16:	2000      	movs	r0, #0
    2f18:	bd38      	pop	{r3, r4, r5, pc}
    2f1a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2f1e:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2f20:	e9c4 3305 	strd	r3, r3, [r4, #20]
    2f24:	f000 feee 	bl	3d04 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2f28:	341c      	adds	r4, #28
    2f2a:	e7f2      	b.n	2f12 <init_static_pools+0x6>
    2f2c:	20001544 	.word	0x20001544
    2f30:	20001544 	.word	0x20001544

00002f34 <CC_PalMemCopyPlat>:
    2f34:	f001 ba7e 	b.w	4434 <memmove>

00002f38 <CC_PalMemSetZeroPlat>:
    2f38:	460a      	mov	r2, r1
    2f3a:	2100      	movs	r1, #0
    2f3c:	f001 babe 	b.w	44bc <memset>

00002f40 <CC_PalInit>:
    2f40:	b510      	push	{r4, lr}
    2f42:	4811      	ldr	r0, [pc, #68]	; (2f88 <CC_PalInit+0x48>)
    2f44:	f000 f848 	bl	2fd8 <CC_PalMutexCreate>
    2f48:	b100      	cbz	r0, 2f4c <CC_PalInit+0xc>
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	480f      	ldr	r0, [pc, #60]	; (2f8c <CC_PalInit+0x4c>)
    2f4e:	f000 f843 	bl	2fd8 <CC_PalMutexCreate>
    2f52:	2800      	cmp	r0, #0
    2f54:	d1f9      	bne.n	2f4a <CC_PalInit+0xa>
    2f56:	4c0e      	ldr	r4, [pc, #56]	; (2f90 <CC_PalInit+0x50>)
    2f58:	4620      	mov	r0, r4
    2f5a:	f000 f83d 	bl	2fd8 <CC_PalMutexCreate>
    2f5e:	2800      	cmp	r0, #0
    2f60:	d1f3      	bne.n	2f4a <CC_PalInit+0xa>
    2f62:	4b0c      	ldr	r3, [pc, #48]	; (2f94 <CC_PalInit+0x54>)
    2f64:	480c      	ldr	r0, [pc, #48]	; (2f98 <CC_PalInit+0x58>)
    2f66:	601c      	str	r4, [r3, #0]
    2f68:	f000 f836 	bl	2fd8 <CC_PalMutexCreate>
    2f6c:	4601      	mov	r1, r0
    2f6e:	2800      	cmp	r0, #0
    2f70:	d1eb      	bne.n	2f4a <CC_PalInit+0xa>
    2f72:	f000 f82d 	bl	2fd0 <CC_PalDmaInit>
    2f76:	4604      	mov	r4, r0
    2f78:	b108      	cbz	r0, 2f7e <CC_PalInit+0x3e>
    2f7a:	4620      	mov	r0, r4
    2f7c:	bd10      	pop	{r4, pc}
    2f7e:	f000 f851 	bl	3024 <CC_PalPowerSaveModeInit>
    2f82:	4620      	mov	r0, r4
    2f84:	e7fa      	b.n	2f7c <CC_PalInit+0x3c>
    2f86:	bf00      	nop
    2f88:	20001480 	.word	0x20001480
    2f8c:	20001474 	.word	0x20001474
    2f90:	2000147c 	.word	0x2000147c
    2f94:	20001484 	.word	0x20001484
    2f98:	20001478 	.word	0x20001478

00002f9c <CC_PalTerminate>:
    2f9c:	b508      	push	{r3, lr}
    2f9e:	4808      	ldr	r0, [pc, #32]	; (2fc0 <CC_PalTerminate+0x24>)
    2fa0:	f000 f824 	bl	2fec <CC_PalMutexDestroy>
    2fa4:	4807      	ldr	r0, [pc, #28]	; (2fc4 <CC_PalTerminate+0x28>)
    2fa6:	f000 f821 	bl	2fec <CC_PalMutexDestroy>
    2faa:	4807      	ldr	r0, [pc, #28]	; (2fc8 <CC_PalTerminate+0x2c>)
    2fac:	f000 f81e 	bl	2fec <CC_PalMutexDestroy>
    2fb0:	4806      	ldr	r0, [pc, #24]	; (2fcc <CC_PalTerminate+0x30>)
    2fb2:	f000 f81b 	bl	2fec <CC_PalMutexDestroy>
    2fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2fba:	f000 b80b 	b.w	2fd4 <CC_PalDmaTerminate>
    2fbe:	bf00      	nop
    2fc0:	20001480 	.word	0x20001480
    2fc4:	20001474 	.word	0x20001474
    2fc8:	2000147c 	.word	0x2000147c
    2fcc:	20001478 	.word	0x20001478

00002fd0 <CC_PalDmaInit>:
    2fd0:	2000      	movs	r0, #0
    2fd2:	4770      	bx	lr

00002fd4 <CC_PalDmaTerminate>:
    2fd4:	4770      	bx	lr
    2fd6:	bf00      	nop

00002fd8 <CC_PalMutexCreate>:
    2fd8:	b508      	push	{r3, lr}
    2fda:	4b03      	ldr	r3, [pc, #12]	; (2fe8 <CC_PalMutexCreate+0x10>)
    2fdc:	6802      	ldr	r2, [r0, #0]
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	6810      	ldr	r0, [r2, #0]
    2fe2:	4798      	blx	r3
    2fe4:	2000      	movs	r0, #0
    2fe6:	bd08      	pop	{r3, pc}
    2fe8:	20001490 	.word	0x20001490

00002fec <CC_PalMutexDestroy>:
    2fec:	b508      	push	{r3, lr}
    2fee:	4b03      	ldr	r3, [pc, #12]	; (2ffc <CC_PalMutexDestroy+0x10>)
    2ff0:	6802      	ldr	r2, [r0, #0]
    2ff2:	685b      	ldr	r3, [r3, #4]
    2ff4:	6810      	ldr	r0, [r2, #0]
    2ff6:	4798      	blx	r3
    2ff8:	2000      	movs	r0, #0
    2ffa:	bd08      	pop	{r3, pc}
    2ffc:	20001490 	.word	0x20001490

00003000 <CC_PalMutexLock>:
    3000:	6802      	ldr	r2, [r0, #0]
    3002:	4b02      	ldr	r3, [pc, #8]	; (300c <CC_PalMutexLock+0xc>)
    3004:	6810      	ldr	r0, [r2, #0]
    3006:	689b      	ldr	r3, [r3, #8]
    3008:	4718      	bx	r3
    300a:	bf00      	nop
    300c:	20001490 	.word	0x20001490

00003010 <CC_PalMutexUnlock>:
    3010:	b508      	push	{r3, lr}
    3012:	4b03      	ldr	r3, [pc, #12]	; (3020 <CC_PalMutexUnlock+0x10>)
    3014:	6802      	ldr	r2, [r0, #0]
    3016:	68db      	ldr	r3, [r3, #12]
    3018:	6810      	ldr	r0, [r2, #0]
    301a:	4798      	blx	r3
    301c:	2000      	movs	r0, #0
    301e:	bd08      	pop	{r3, pc}
    3020:	20001490 	.word	0x20001490

00003024 <CC_PalPowerSaveModeInit>:
    3024:	b570      	push	{r4, r5, r6, lr}
    3026:	4c09      	ldr	r4, [pc, #36]	; (304c <CC_PalPowerSaveModeInit+0x28>)
    3028:	4d09      	ldr	r5, [pc, #36]	; (3050 <CC_PalPowerSaveModeInit+0x2c>)
    302a:	6920      	ldr	r0, [r4, #16]
    302c:	68ab      	ldr	r3, [r5, #8]
    302e:	4798      	blx	r3
    3030:	b118      	cbz	r0, 303a <CC_PalPowerSaveModeInit+0x16>
    3032:	4b08      	ldr	r3, [pc, #32]	; (3054 <CC_PalPowerSaveModeInit+0x30>)
    3034:	4808      	ldr	r0, [pc, #32]	; (3058 <CC_PalPowerSaveModeInit+0x34>)
    3036:	685b      	ldr	r3, [r3, #4]
    3038:	4798      	blx	r3
    303a:	2100      	movs	r1, #0
    303c:	4a07      	ldr	r2, [pc, #28]	; (305c <CC_PalPowerSaveModeInit+0x38>)
    303e:	68eb      	ldr	r3, [r5, #12]
    3040:	6011      	str	r1, [r2, #0]
    3042:	6920      	ldr	r0, [r4, #16]
    3044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3048:	4718      	bx	r3
    304a:	bf00      	nop
    304c:	200014a0 	.word	0x200014a0
    3050:	20001490 	.word	0x20001490
    3054:	20001488 	.word	0x20001488
    3058:	00004dcc 	.word	0x00004dcc
    305c:	200006a8 	.word	0x200006a8

00003060 <CC_PalPowerSaveModeSelect>:
    3060:	b570      	push	{r4, r5, r6, lr}
    3062:	4c14      	ldr	r4, [pc, #80]	; (30b4 <CC_PalPowerSaveModeSelect+0x54>)
    3064:	4d14      	ldr	r5, [pc, #80]	; (30b8 <CC_PalPowerSaveModeSelect+0x58>)
    3066:	4606      	mov	r6, r0
    3068:	68ab      	ldr	r3, [r5, #8]
    306a:	6920      	ldr	r0, [r4, #16]
    306c:	4798      	blx	r3
    306e:	b9f0      	cbnz	r0, 30ae <CC_PalPowerSaveModeSelect+0x4e>
    3070:	4a12      	ldr	r2, [pc, #72]	; (30bc <CC_PalPowerSaveModeSelect+0x5c>)
    3072:	6813      	ldr	r3, [r2, #0]
    3074:	b95e      	cbnz	r6, 308e <CC_PalPowerSaveModeSelect+0x2e>
    3076:	b91b      	cbnz	r3, 3080 <CC_PalPowerSaveModeSelect+0x20>
    3078:	2001      	movs	r0, #1
    307a:	4911      	ldr	r1, [pc, #68]	; (30c0 <CC_PalPowerSaveModeSelect+0x60>)
    307c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    3080:	3301      	adds	r3, #1
    3082:	6013      	str	r3, [r2, #0]
    3084:	68eb      	ldr	r3, [r5, #12]
    3086:	6920      	ldr	r0, [r4, #16]
    3088:	4798      	blx	r3
    308a:	2000      	movs	r0, #0
    308c:	bd70      	pop	{r4, r5, r6, pc}
    308e:	2b00      	cmp	r3, #0
    3090:	d0f8      	beq.n	3084 <CC_PalPowerSaveModeSelect+0x24>
    3092:	2b01      	cmp	r3, #1
    3094:	bf08      	it	eq
    3096:	490a      	ldreq	r1, [pc, #40]	; (30c0 <CC_PalPowerSaveModeSelect+0x60>)
    3098:	f103 33ff 	add.w	r3, r3, #4294967295
    309c:	bf08      	it	eq
    309e:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    30a2:	6920      	ldr	r0, [r4, #16]
    30a4:	6013      	str	r3, [r2, #0]
    30a6:	68eb      	ldr	r3, [r5, #12]
    30a8:	4798      	blx	r3
    30aa:	2000      	movs	r0, #0
    30ac:	e7ee      	b.n	308c <CC_PalPowerSaveModeSelect+0x2c>
    30ae:	4805      	ldr	r0, [pc, #20]	; (30c4 <CC_PalPowerSaveModeSelect+0x64>)
    30b0:	bd70      	pop	{r4, r5, r6, pc}
    30b2:	bf00      	nop
    30b4:	200014a0 	.word	0x200014a0
    30b8:	20001490 	.word	0x20001490
    30bc:	200006a8 	.word	0x200006a8
    30c0:	50840000 	.word	0x50840000
    30c4:	ffff8fe9 	.word	0xffff8fe9

000030c8 <CC_HalInit>:
    30c8:	2000      	movs	r0, #0
    30ca:	4770      	bx	lr

000030cc <CC_HalTerminate>:
    30cc:	2000      	movs	r0, #0
    30ce:	4770      	bx	lr

000030d0 <CC_HalClearInterruptBit>:
    30d0:	0543      	lsls	r3, r0, #21
    30d2:	d503      	bpl.n	30dc <CC_HalClearInterruptBit+0xc>
    30d4:	f04f 32ff 	mov.w	r2, #4294967295
    30d8:	4b02      	ldr	r3, [pc, #8]	; (30e4 <CC_HalClearInterruptBit+0x14>)
    30da:	601a      	str	r2, [r3, #0]
    30dc:	4b02      	ldr	r3, [pc, #8]	; (30e8 <CC_HalClearInterruptBit+0x18>)
    30de:	6018      	str	r0, [r3, #0]
    30e0:	4770      	bx	lr
    30e2:	bf00      	nop
    30e4:	50841108 	.word	0x50841108
    30e8:	50841a08 	.word	0x50841a08

000030ec <CC_HalMaskInterrupt>:
    30ec:	4b01      	ldr	r3, [pc, #4]	; (30f4 <CC_HalMaskInterrupt+0x8>)
    30ee:	6018      	str	r0, [r3, #0]
    30f0:	4770      	bx	lr
    30f2:	bf00      	nop
    30f4:	50841a04 	.word	0x50841a04

000030f8 <CC_HalWaitInterruptRND>:
    30f8:	b108      	cbz	r0, 30fe <CC_HalWaitInterruptRND+0x6>
    30fa:	f000 b803 	b.w	3104 <CC_PalWaitInterruptRND>
    30fe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    3102:	4770      	bx	lr

00003104 <CC_PalWaitInterruptRND>:
    3104:	4602      	mov	r2, r0
    3106:	4807      	ldr	r0, [pc, #28]	; (3124 <CC_PalWaitInterruptRND+0x20>)
    3108:	6803      	ldr	r3, [r0, #0]
    310a:	4213      	tst	r3, r2
    310c:	d0fc      	beq.n	3108 <CC_PalWaitInterruptRND+0x4>
    310e:	b121      	cbz	r1, 311a <CC_PalWaitInterruptRND+0x16>
    3110:	4b05      	ldr	r3, [pc, #20]	; (3128 <CC_PalWaitInterruptRND+0x24>)
    3112:	4806      	ldr	r0, [pc, #24]	; (312c <CC_PalWaitInterruptRND+0x28>)
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	600b      	str	r3, [r1, #0]
    3118:	6003      	str	r3, [r0, #0]
    311a:	4b05      	ldr	r3, [pc, #20]	; (3130 <CC_PalWaitInterruptRND+0x2c>)
    311c:	2000      	movs	r0, #0
    311e:	601a      	str	r2, [r3, #0]
    3120:	4770      	bx	lr
    3122:	bf00      	nop
    3124:	50841a00 	.word	0x50841a00
    3128:	50841104 	.word	0x50841104
    312c:	50841108 	.word	0x50841108
    3130:	50841a08 	.word	0x50841a08

00003134 <mbedtls_platform_setup>:
    3134:	f000 b8a0 	b.w	3278 <nrf_cc310_platform_init>

00003138 <mbedtls_platform_zeroize>:
    3138:	b130      	cbz	r0, 3148 <mbedtls_platform_zeroize+0x10>
    313a:	b129      	cbz	r1, 3148 <mbedtls_platform_zeroize+0x10>
    313c:	2300      	movs	r3, #0
    313e:	4401      	add	r1, r0
    3140:	7003      	strb	r3, [r0, #0]
    3142:	3001      	adds	r0, #1
    3144:	4281      	cmp	r1, r0
    3146:	d1fb      	bne.n	3140 <mbedtls_platform_zeroize+0x8>
    3148:	4770      	bx	lr
    314a:	bf00      	nop

0000314c <mbedtls_hardware_poll>:
    314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3150:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    3154:	460f      	mov	r7, r1
    3156:	9205      	str	r2, [sp, #20]
    3158:	2100      	movs	r1, #0
    315a:	4614      	mov	r4, r2
    315c:	a812      	add	r0, sp, #72	; 0x48
    315e:	f44f 7208 	mov.w	r2, #544	; 0x220
    3162:	461e      	mov	r6, r3
    3164:	f001 f9aa 	bl	44bc <memset>
    3168:	2300      	movs	r3, #0
    316a:	a808      	add	r0, sp, #32
    316c:	4619      	mov	r1, r3
    316e:	2228      	movs	r2, #40	; 0x28
    3170:	9306      	str	r3, [sp, #24]
    3172:	f001 f9a3 	bl	44bc <memset>
    3176:	2f00      	cmp	r7, #0
    3178:	d03c      	beq.n	31f4 <mbedtls_hardware_poll+0xa8>
    317a:	2e00      	cmp	r6, #0
    317c:	d03a      	beq.n	31f4 <mbedtls_hardware_poll+0xa8>
    317e:	2c00      	cmp	r4, #0
    3180:	d038      	beq.n	31f4 <mbedtls_hardware_poll+0xa8>
    3182:	2104      	movs	r1, #4
    3184:	a806      	add	r0, sp, #24
    3186:	f7ff fed7 	bl	2f38 <CC_PalMemSetZeroPlat>
    318a:	a808      	add	r0, sp, #32
    318c:	2128      	movs	r1, #40	; 0x28
    318e:	f7ff fed3 	bl	2f38 <CC_PalMemSetZeroPlat>
    3192:	a808      	add	r0, sp, #32
    3194:	f000 f832 	bl	31fc <RNG_PLAT_SetUserRngParameters>
    3198:	b178      	cbz	r0, 31ba <mbedtls_hardware_poll+0x6e>
    319a:	f04f 35ff 	mov.w	r5, #4294967295
    319e:	a812      	add	r0, sp, #72	; 0x48
    31a0:	f44f 7108 	mov.w	r1, #544	; 0x220
    31a4:	f7ff ffc8 	bl	3138 <mbedtls_platform_zeroize>
    31a8:	a806      	add	r0, sp, #24
    31aa:	2104      	movs	r1, #4
    31ac:	f7ff ffc4 	bl	3138 <mbedtls_platform_zeroize>
    31b0:	4628      	mov	r0, r5
    31b2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    31b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31ba:	ab12      	add	r3, sp, #72	; 0x48
    31bc:	f10d 081c 	add.w	r8, sp, #28
    31c0:	9003      	str	r0, [sp, #12]
    31c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    31c6:	4602      	mov	r2, r0
    31c8:	ab05      	add	r3, sp, #20
    31ca:	a908      	add	r1, sp, #32
    31cc:	f8cd 8000 	str.w	r8, [sp]
    31d0:	a806      	add	r0, sp, #24
    31d2:	f000 fce9 	bl	3ba8 <LLF_RND_GetTrngSource>
    31d6:	2800      	cmp	r0, #0
    31d8:	d1df      	bne.n	319a <mbedtls_hardware_poll+0x4e>
    31da:	6833      	ldr	r3, [r6, #0]
    31dc:	42a3      	cmp	r3, r4
    31de:	d3dc      	bcc.n	319a <mbedtls_hardware_poll+0x4e>
    31e0:	f8d8 1000 	ldr.w	r1, [r8]
    31e4:	4605      	mov	r5, r0
    31e6:	3108      	adds	r1, #8
    31e8:	4638      	mov	r0, r7
    31ea:	4622      	mov	r2, r4
    31ec:	f7ff fea2 	bl	2f34 <CC_PalMemCopyPlat>
    31f0:	6034      	str	r4, [r6, #0]
    31f2:	e7d4      	b.n	319e <mbedtls_hardware_poll+0x52>
    31f4:	f04f 35ff 	mov.w	r5, #4294967295
    31f8:	e7da      	b.n	31b0 <mbedtls_hardware_poll+0x64>
    31fa:	bf00      	nop

000031fc <RNG_PLAT_SetUserRngParameters>:
    31fc:	231c      	movs	r3, #28
    31fe:	b530      	push	{r4, r5, lr}
    3200:	b083      	sub	sp, #12
    3202:	a902      	add	r1, sp, #8
    3204:	f841 3d04 	str.w	r3, [r1, #-4]!
    3208:	4604      	mov	r4, r0
    320a:	f000 f9b1 	bl	3570 <CC_PalTrngParamGet>
    320e:	4605      	mov	r5, r0
    3210:	b9d8      	cbnz	r0, 324a <RNG_PLAT_SetUserRngParameters+0x4e>
    3212:	9b01      	ldr	r3, [sp, #4]
    3214:	2b1c      	cmp	r3, #28
    3216:	d11b      	bne.n	3250 <RNG_PLAT_SetUserRngParameters+0x54>
    3218:	e9d4 3200 	ldrd	r3, r2, [r4]
    321c:	2101      	movs	r1, #1
    321e:	3300      	adds	r3, #0
    3220:	61e1      	str	r1, [r4, #28]
    3222:	bf18      	it	ne
    3224:	2301      	movne	r3, #1
    3226:	b10a      	cbz	r2, 322c <RNG_PLAT_SetUserRngParameters+0x30>
    3228:	f043 0302 	orr.w	r3, r3, #2
    322c:	68a2      	ldr	r2, [r4, #8]
    322e:	b932      	cbnz	r2, 323e <RNG_PLAT_SetUserRngParameters+0x42>
    3230:	68e2      	ldr	r2, [r4, #12]
    3232:	b9aa      	cbnz	r2, 3260 <RNG_PLAT_SetUserRngParameters+0x64>
    3234:	e9c4 3208 	strd	r3, r2, [r4, #32]
    3238:	b93b      	cbnz	r3, 324a <RNG_PLAT_SetUserRngParameters+0x4e>
    323a:	4d0d      	ldr	r5, [pc, #52]	; (3270 <RNG_PLAT_SetUserRngParameters+0x74>)
    323c:	e009      	b.n	3252 <RNG_PLAT_SetUserRngParameters+0x56>
    323e:	68e2      	ldr	r2, [r4, #12]
    3240:	f043 0304 	orr.w	r3, r3, #4
    3244:	b962      	cbnz	r2, 3260 <RNG_PLAT_SetUserRngParameters+0x64>
    3246:	e9c4 3208 	strd	r3, r2, [r4, #32]
    324a:	4628      	mov	r0, r5
    324c:	b003      	add	sp, #12
    324e:	bd30      	pop	{r4, r5, pc}
    3250:	4d08      	ldr	r5, [pc, #32]	; (3274 <RNG_PLAT_SetUserRngParameters+0x78>)
    3252:	4620      	mov	r0, r4
    3254:	211c      	movs	r1, #28
    3256:	f7ff fe6f 	bl	2f38 <CC_PalMemSetZeroPlat>
    325a:	4628      	mov	r0, r5
    325c:	b003      	add	sp, #12
    325e:	bd30      	pop	{r4, r5, pc}
    3260:	2200      	movs	r2, #0
    3262:	4628      	mov	r0, r5
    3264:	f043 0308 	orr.w	r3, r3, #8
    3268:	e9c4 3208 	strd	r3, r2, [r4, #32]
    326c:	b003      	add	sp, #12
    326e:	bd30      	pop	{r4, r5, pc}
    3270:	00f00c0e 	.word	0x00f00c0e
    3274:	00f00c37 	.word	0x00f00c37

00003278 <nrf_cc310_platform_init>:
    3278:	b510      	push	{r4, lr}
    327a:	4c0c      	ldr	r4, [pc, #48]	; (32ac <nrf_cc310_platform_init+0x34>)
    327c:	6823      	ldr	r3, [r4, #0]
    327e:	b113      	cbz	r3, 3286 <nrf_cc310_platform_init+0xe>
    3280:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <nrf_cc310_platform_init+0x38>)
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	b96b      	cbnz	r3, 32a2 <nrf_cc310_platform_init+0x2a>
    3286:	f000 f931 	bl	34ec <CC_LibInit>
    328a:	b138      	cbz	r0, 329c <nrf_cc310_platform_init+0x24>
    328c:	3801      	subs	r0, #1
    328e:	2806      	cmp	r0, #6
    3290:	bf96      	itet	ls
    3292:	4b08      	ldrls	r3, [pc, #32]	; (32b4 <nrf_cc310_platform_init+0x3c>)
    3294:	4808      	ldrhi	r0, [pc, #32]	; (32b8 <nrf_cc310_platform_init+0x40>)
    3296:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    329a:	bd10      	pop	{r4, pc}
    329c:	2201      	movs	r2, #1
    329e:	4b04      	ldr	r3, [pc, #16]	; (32b0 <nrf_cc310_platform_init+0x38>)
    32a0:	601a      	str	r2, [r3, #0]
    32a2:	2301      	movs	r3, #1
    32a4:	2000      	movs	r0, #0
    32a6:	6023      	str	r3, [r4, #0]
    32a8:	bd10      	pop	{r4, pc}
    32aa:	bf00      	nop
    32ac:	200006ac 	.word	0x200006ac
    32b0:	200006b0 	.word	0x200006b0
    32b4:	00004dec 	.word	0x00004dec
    32b8:	ffff8ffe 	.word	0xffff8ffe

000032bc <nrf_cc310_platform_init_no_rng>:
    32bc:	b510      	push	{r4, lr}
    32be:	4c09      	ldr	r4, [pc, #36]	; (32e4 <nrf_cc310_platform_init_no_rng+0x28>)
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	b11b      	cbz	r3, 32cc <nrf_cc310_platform_init_no_rng+0x10>
    32c4:	2301      	movs	r3, #1
    32c6:	2000      	movs	r0, #0
    32c8:	6023      	str	r3, [r4, #0]
    32ca:	bd10      	pop	{r4, pc}
    32cc:	f000 f87c 	bl	33c8 <CC_LibInitNoRng>
    32d0:	2800      	cmp	r0, #0
    32d2:	d0f7      	beq.n	32c4 <nrf_cc310_platform_init_no_rng+0x8>
    32d4:	3801      	subs	r0, #1
    32d6:	2806      	cmp	r0, #6
    32d8:	bf96      	itet	ls
    32da:	4b03      	ldrls	r3, [pc, #12]	; (32e8 <nrf_cc310_platform_init_no_rng+0x2c>)
    32dc:	4803      	ldrhi	r0, [pc, #12]	; (32ec <nrf_cc310_platform_init_no_rng+0x30>)
    32de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    32e2:	bd10      	pop	{r4, pc}
    32e4:	200006ac 	.word	0x200006ac
    32e8:	00004dec 	.word	0x00004dec
    32ec:	ffff8ffe 	.word	0xffff8ffe

000032f0 <nrf_cc310_platform_abort>:
    32f0:	f3bf 8f4f 	dsb	sy
    32f4:	4905      	ldr	r1, [pc, #20]	; (330c <nrf_cc310_platform_abort+0x1c>)
    32f6:	4b06      	ldr	r3, [pc, #24]	; (3310 <nrf_cc310_platform_abort+0x20>)
    32f8:	68ca      	ldr	r2, [r1, #12]
    32fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    32fe:	4313      	orrs	r3, r2
    3300:	60cb      	str	r3, [r1, #12]
    3302:	f3bf 8f4f 	dsb	sy
    3306:	bf00      	nop
    3308:	e7fd      	b.n	3306 <nrf_cc310_platform_abort+0x16>
    330a:	bf00      	nop
    330c:	e000ed00 	.word	0xe000ed00
    3310:	05fa0004 	.word	0x05fa0004

00003314 <CC_PalAbort>:
    3314:	4b01      	ldr	r3, [pc, #4]	; (331c <CC_PalAbort+0x8>)
    3316:	685b      	ldr	r3, [r3, #4]
    3318:	4718      	bx	r3
    331a:	bf00      	nop
    331c:	20001488 	.word	0x20001488

00003320 <nrf_cc310_platform_set_abort>:
    3320:	4b02      	ldr	r3, [pc, #8]	; (332c <nrf_cc310_platform_set_abort+0xc>)
    3322:	e9d0 1200 	ldrd	r1, r2, [r0]
    3326:	e9c3 1200 	strd	r1, r2, [r3]
    332a:	4770      	bx	lr
    332c:	20001488 	.word	0x20001488

00003330 <mutex_free>:
    3330:	4770      	bx	lr
    3332:	bf00      	nop

00003334 <mutex_unlock>:
    3334:	b510      	push	{r4, lr}
    3336:	4604      	mov	r4, r0
    3338:	b120      	cbz	r0, 3344 <mutex_unlock+0x10>
    333a:	f3bf 8f5f 	dmb	sy
    333e:	2000      	movs	r0, #0
    3340:	6020      	str	r0, [r4, #0]
    3342:	bd10      	pop	{r4, pc}
    3344:	4803      	ldr	r0, [pc, #12]	; (3354 <mutex_unlock+0x20>)
    3346:	f7ff ffe5 	bl	3314 <CC_PalAbort>
    334a:	f3bf 8f5f 	dmb	sy
    334e:	2000      	movs	r0, #0
    3350:	6020      	str	r0, [r4, #0]
    3352:	bd10      	pop	{r4, pc}
    3354:	00004e2c 	.word	0x00004e2c

00003358 <mutex_init>:
    3358:	b510      	push	{r4, lr}
    335a:	4604      	mov	r4, r0
    335c:	b110      	cbz	r0, 3364 <mutex_init+0xc>
    335e:	2300      	movs	r3, #0
    3360:	6023      	str	r3, [r4, #0]
    3362:	bd10      	pop	{r4, pc}
    3364:	4802      	ldr	r0, [pc, #8]	; (3370 <mutex_init+0x18>)
    3366:	f7ff ffd5 	bl	3314 <CC_PalAbort>
    336a:	2300      	movs	r3, #0
    336c:	6023      	str	r3, [r4, #0]
    336e:	bd10      	pop	{r4, pc}
    3370:	00004e08 	.word	0x00004e08

00003374 <mutex_lock>:
    3374:	b150      	cbz	r0, 338c <mutex_lock+0x18>
    3376:	2201      	movs	r2, #1
    3378:	e8d0 3fef 	ldaex	r3, [r0]
    337c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    3380:	2900      	cmp	r1, #0
    3382:	d1f9      	bne.n	3378 <mutex_lock+0x4>
    3384:	2b01      	cmp	r3, #1
    3386:	d0f7      	beq.n	3378 <mutex_lock+0x4>
    3388:	f3bf 8f5f 	dmb	sy
    338c:	2000      	movs	r0, #0
    338e:	4770      	bx	lr

00003390 <nrf_cc310_platform_set_mutexes>:
    3390:	b470      	push	{r4, r5, r6}
    3392:	4b0b      	ldr	r3, [pc, #44]	; (33c0 <nrf_cc310_platform_set_mutexes+0x30>)
    3394:	6806      	ldr	r6, [r0, #0]
    3396:	68c2      	ldr	r2, [r0, #12]
    3398:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    339c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    33a0:	e9c3 6500 	strd	r6, r5, [r3]
    33a4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    33a8:	680e      	ldr	r6, [r1, #0]
    33aa:	4b06      	ldr	r3, [pc, #24]	; (33c4 <nrf_cc310_platform_set_mutexes+0x34>)
    33ac:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    33b0:	e9c3 6500 	strd	r6, r5, [r3]
    33b4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    33b8:	611a      	str	r2, [r3, #16]
    33ba:	bc70      	pop	{r4, r5, r6}
    33bc:	4770      	bx	lr
    33be:	bf00      	nop
    33c0:	20001490 	.word	0x20001490
    33c4:	200014a0 	.word	0x200014a0

000033c8 <CC_LibInitNoRng>:
    33c8:	b510      	push	{r4, lr}
    33ca:	f7ff fe7d 	bl	30c8 <CC_HalInit>
    33ce:	b970      	cbnz	r0, 33ee <CC_LibInitNoRng+0x26>
    33d0:	f7ff fdb6 	bl	2f40 <CC_PalInit>
    33d4:	b980      	cbnz	r0, 33f8 <CC_LibInitNoRng+0x30>
    33d6:	f7ff fe43 	bl	3060 <CC_PalPowerSaveModeSelect>
    33da:	b980      	cbnz	r0, 33fe <CC_LibInitNoRng+0x36>
    33dc:	4b11      	ldr	r3, [pc, #68]	; (3424 <CC_LibInitNoRng+0x5c>)
    33de:	681b      	ldr	r3, [r3, #0]
    33e0:	0e1b      	lsrs	r3, r3, #24
    33e2:	2bf0      	cmp	r3, #240	; 0xf0
    33e4:	d00d      	beq.n	3402 <CC_LibInitNoRng+0x3a>
    33e6:	2406      	movs	r4, #6
    33e8:	f7ff fe70 	bl	30cc <CC_HalTerminate>
    33ec:	e000      	b.n	33f0 <CC_LibInitNoRng+0x28>
    33ee:	2403      	movs	r4, #3
    33f0:	f7ff fdd4 	bl	2f9c <CC_PalTerminate>
    33f4:	4620      	mov	r0, r4
    33f6:	bd10      	pop	{r4, pc}
    33f8:	2404      	movs	r4, #4
    33fa:	4620      	mov	r0, r4
    33fc:	bd10      	pop	{r4, pc}
    33fe:	2400      	movs	r4, #0
    3400:	e7f2      	b.n	33e8 <CC_LibInitNoRng+0x20>
    3402:	4a09      	ldr	r2, [pc, #36]	; (3428 <CC_LibInitNoRng+0x60>)
    3404:	4b09      	ldr	r3, [pc, #36]	; (342c <CC_LibInitNoRng+0x64>)
    3406:	6812      	ldr	r2, [r2, #0]
    3408:	429a      	cmp	r2, r3
    340a:	d001      	beq.n	3410 <CC_LibInitNoRng+0x48>
    340c:	2407      	movs	r4, #7
    340e:	e7eb      	b.n	33e8 <CC_LibInitNoRng+0x20>
    3410:	2001      	movs	r0, #1
    3412:	f7ff fe25 	bl	3060 <CC_PalPowerSaveModeSelect>
    3416:	2800      	cmp	r0, #0
    3418:	d1f1      	bne.n	33fe <CC_LibInitNoRng+0x36>
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <CC_LibInitNoRng+0x68>)
    341c:	4604      	mov	r4, r0
    341e:	6018      	str	r0, [r3, #0]
    3420:	e7e8      	b.n	33f4 <CC_LibInitNoRng+0x2c>
    3422:	bf00      	nop
    3424:	50841928 	.word	0x50841928
    3428:	50841a24 	.word	0x50841a24
    342c:	20e00000 	.word	0x20e00000
    3430:	50841a0c 	.word	0x50841a0c

00003434 <CC_LibInitRngModule>:
    3434:	b530      	push	{r4, r5, lr}
    3436:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    343a:	f44f 7208 	mov.w	r2, #544	; 0x220
    343e:	2100      	movs	r1, #0
    3440:	a80c      	add	r0, sp, #48	; 0x30
    3442:	f001 f83b 	bl	44bc <memset>
    3446:	2300      	movs	r3, #0
    3448:	a802      	add	r0, sp, #8
    344a:	4619      	mov	r1, r3
    344c:	2228      	movs	r2, #40	; 0x28
    344e:	9301      	str	r3, [sp, #4]
    3450:	f001 f834 	bl	44bc <memset>
    3454:	a802      	add	r0, sp, #8
    3456:	f7ff fed1 	bl	31fc <RNG_PLAT_SetUserRngParameters>
    345a:	b118      	cbz	r0, 3464 <CC_LibInitRngModule+0x30>
    345c:	2005      	movs	r0, #5
    345e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3462:	bd30      	pop	{r4, r5, pc}
    3464:	4d1c      	ldr	r5, [pc, #112]	; (34d8 <CC_LibInitRngModule+0xa4>)
    3466:	f04f 31ff 	mov.w	r1, #4294967295
    346a:	6828      	ldr	r0, [r5, #0]
    346c:	f7ff fdc8 	bl	3000 <CC_PalMutexLock>
    3470:	4604      	mov	r4, r0
    3472:	b9f0      	cbnz	r0, 34b2 <CC_LibInitRngModule+0x7e>
    3474:	2000      	movs	r0, #0
    3476:	f7ff fdf3 	bl	3060 <CC_PalPowerSaveModeSelect>
    347a:	b9b0      	cbnz	r0, 34aa <CC_LibInitRngModule+0x76>
    347c:	aa0c      	add	r2, sp, #48	; 0x30
    347e:	a902      	add	r1, sp, #8
    3480:	a801      	add	r0, sp, #4
    3482:	f000 fbd5 	bl	3c30 <LLF_RND_RunTrngStartupTest>
    3486:	4604      	mov	r4, r0
    3488:	2001      	movs	r0, #1
    348a:	f7ff fde9 	bl	3060 <CC_PalPowerSaveModeSelect>
    348e:	b9f0      	cbnz	r0, 34ce <CC_LibInitRngModule+0x9a>
    3490:	6828      	ldr	r0, [r5, #0]
    3492:	f7ff fdbd 	bl	3010 <CC_PalMutexUnlock>
    3496:	b110      	cbz	r0, 349e <CC_LibInitRngModule+0x6a>
    3498:	4810      	ldr	r0, [pc, #64]	; (34dc <CC_LibInitRngModule+0xa8>)
    349a:	f7ff ff3b 	bl	3314 <CC_PalAbort>
    349e:	4620      	mov	r0, r4
    34a0:	2c00      	cmp	r4, #0
    34a2:	d1db      	bne.n	345c <CC_LibInitRngModule+0x28>
    34a4:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    34a8:	bd30      	pop	{r4, r5, pc}
    34aa:	480d      	ldr	r0, [pc, #52]	; (34e0 <CC_LibInitRngModule+0xac>)
    34ac:	f7ff ff32 	bl	3314 <CC_PalAbort>
    34b0:	e7e4      	b.n	347c <CC_LibInitRngModule+0x48>
    34b2:	480c      	ldr	r0, [pc, #48]	; (34e4 <CC_LibInitRngModule+0xb0>)
    34b4:	f7ff ff2e 	bl	3314 <CC_PalAbort>
    34b8:	2c01      	cmp	r4, #1
    34ba:	d1db      	bne.n	3474 <CC_LibInitRngModule+0x40>
    34bc:	6828      	ldr	r0, [r5, #0]
    34be:	f7ff fda7 	bl	3010 <CC_PalMutexUnlock>
    34c2:	2800      	cmp	r0, #0
    34c4:	d0ca      	beq.n	345c <CC_LibInitRngModule+0x28>
    34c6:	4805      	ldr	r0, [pc, #20]	; (34dc <CC_LibInitRngModule+0xa8>)
    34c8:	f7ff ff24 	bl	3314 <CC_PalAbort>
    34cc:	e7c6      	b.n	345c <CC_LibInitRngModule+0x28>
    34ce:	4806      	ldr	r0, [pc, #24]	; (34e8 <CC_LibInitRngModule+0xb4>)
    34d0:	f7ff ff20 	bl	3314 <CC_PalAbort>
    34d4:	e7dc      	b.n	3490 <CC_LibInitRngModule+0x5c>
    34d6:	bf00      	nop
    34d8:	20001484 	.word	0x20001484
    34dc:	00004e64 	.word	0x00004e64
    34e0:	00004e7c 	.word	0x00004e7c
    34e4:	00004e4c 	.word	0x00004e4c
    34e8:	00004e9c 	.word	0x00004e9c

000034ec <CC_LibInit>:
    34ec:	b508      	push	{r3, lr}
    34ee:	f7ff fdeb 	bl	30c8 <CC_HalInit>
    34f2:	b118      	cbz	r0, 34fc <CC_LibInit+0x10>
    34f4:	f7ff fd52 	bl	2f9c <CC_PalTerminate>
    34f8:	2003      	movs	r0, #3
    34fa:	bd08      	pop	{r3, pc}
    34fc:	f7ff fd20 	bl	2f40 <CC_PalInit>
    3500:	b968      	cbnz	r0, 351e <CC_LibInit+0x32>
    3502:	f7ff fdad 	bl	3060 <CC_PalPowerSaveModeSelect>
    3506:	b960      	cbnz	r0, 3522 <CC_LibInit+0x36>
    3508:	4b15      	ldr	r3, [pc, #84]	; (3560 <CC_LibInit+0x74>)
    350a:	681b      	ldr	r3, [r3, #0]
    350c:	0e1b      	lsrs	r3, r3, #24
    350e:	2bf0      	cmp	r3, #240	; 0xf0
    3510:	d012      	beq.n	3538 <CC_LibInit+0x4c>
    3512:	f7ff fddb 	bl	30cc <CC_HalTerminate>
    3516:	f7ff fd41 	bl	2f9c <CC_PalTerminate>
    351a:	2006      	movs	r0, #6
    351c:	bd08      	pop	{r3, pc}
    351e:	2004      	movs	r0, #4
    3520:	bd08      	pop	{r3, pc}
    3522:	f7ff fdd3 	bl	30cc <CC_HalTerminate>
    3526:	f7ff fd39 	bl	2f9c <CC_PalTerminate>
    352a:	f7ff ff83 	bl	3434 <CC_LibInitRngModule>
    352e:	2800      	cmp	r0, #0
    3530:	bf0c      	ite	eq
    3532:	2000      	moveq	r0, #0
    3534:	2005      	movne	r0, #5
    3536:	bd08      	pop	{r3, pc}
    3538:	4a0a      	ldr	r2, [pc, #40]	; (3564 <CC_LibInit+0x78>)
    353a:	4b0b      	ldr	r3, [pc, #44]	; (3568 <CC_LibInit+0x7c>)
    353c:	6812      	ldr	r2, [r2, #0]
    353e:	429a      	cmp	r2, r3
    3540:	d005      	beq.n	354e <CC_LibInit+0x62>
    3542:	f7ff fdc3 	bl	30cc <CC_HalTerminate>
    3546:	f7ff fd29 	bl	2f9c <CC_PalTerminate>
    354a:	2007      	movs	r0, #7
    354c:	bd08      	pop	{r3, pc}
    354e:	2001      	movs	r0, #1
    3550:	f7ff fd86 	bl	3060 <CC_PalPowerSaveModeSelect>
    3554:	2800      	cmp	r0, #0
    3556:	d1e4      	bne.n	3522 <CC_LibInit+0x36>
    3558:	4b04      	ldr	r3, [pc, #16]	; (356c <CC_LibInit+0x80>)
    355a:	6018      	str	r0, [r3, #0]
    355c:	e7e5      	b.n	352a <CC_LibInit+0x3e>
    355e:	bf00      	nop
    3560:	50841928 	.word	0x50841928
    3564:	50841a24 	.word	0x50841a24
    3568:	20e00000 	.word	0x20e00000
    356c:	50841a0c 	.word	0x50841a0c

00003570 <CC_PalTrngParamGet>:
    3570:	b118      	cbz	r0, 357a <CC_PalTrngParamGet+0xa>
    3572:	b111      	cbz	r1, 357a <CC_PalTrngParamGet+0xa>
    3574:	680b      	ldr	r3, [r1, #0]
    3576:	2b1c      	cmp	r3, #28
    3578:	d001      	beq.n	357e <CC_PalTrngParamGet+0xe>
    357a:	2001      	movs	r0, #1
    357c:	4770      	bx	lr
    357e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3582:	4a3a      	ldr	r2, [pc, #232]	; (366c <CC_PalTrngParamGet+0xfc>)
    3584:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    3588:	4291      	cmp	r1, r2
    358a:	d05a      	beq.n	3642 <CC_PalTrngParamGet+0xd2>
    358c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3590:	3201      	adds	r2, #1
    3592:	d056      	beq.n	3642 <CC_PalTrngParamGet+0xd2>
    3594:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3598:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    359c:	6002      	str	r2, [r0, #0]
    359e:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    35a2:	4a33      	ldr	r2, [pc, #204]	; (3670 <CC_PalTrngParamGet+0x100>)
    35a4:	4291      	cmp	r1, r2
    35a6:	d05e      	beq.n	3666 <CC_PalTrngParamGet+0xf6>
    35a8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    35ac:	3201      	adds	r2, #1
    35ae:	d05a      	beq.n	3666 <CC_PalTrngParamGet+0xf6>
    35b0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    35b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35b8:	6042      	str	r2, [r0, #4]
    35ba:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    35be:	f512 7f94 	cmn.w	r2, #296	; 0x128
    35c2:	d04d      	beq.n	3660 <CC_PalTrngParamGet+0xf0>
    35c4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    35c8:	3201      	adds	r2, #1
    35ca:	d049      	beq.n	3660 <CC_PalTrngParamGet+0xf0>
    35cc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    35d0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35d4:	6082      	str	r2, [r0, #8]
    35d6:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    35da:	4a26      	ldr	r2, [pc, #152]	; (3674 <CC_PalTrngParamGet+0x104>)
    35dc:	4291      	cmp	r1, r2
    35de:	d03c      	beq.n	365a <CC_PalTrngParamGet+0xea>
    35e0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    35e4:	3201      	adds	r2, #1
    35e6:	d038      	beq.n	365a <CC_PalTrngParamGet+0xea>
    35e8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    35ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35f0:	60c2      	str	r2, [r0, #12]
    35f2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    35f6:	3270      	adds	r2, #112	; 0x70
    35f8:	d02d      	beq.n	3656 <CC_PalTrngParamGet+0xe6>
    35fa:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    35fe:	3201      	adds	r2, #1
    3600:	d029      	beq.n	3656 <CC_PalTrngParamGet+0xe6>
    3602:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3606:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    360a:	6102      	str	r2, [r0, #16]
    360c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3610:	32af      	adds	r2, #175	; 0xaf
    3612:	d01e      	beq.n	3652 <CC_PalTrngParamGet+0xe2>
    3614:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3618:	3201      	adds	r2, #1
    361a:	d01a      	beq.n	3652 <CC_PalTrngParamGet+0xe2>
    361c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3620:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3624:	6142      	str	r2, [r0, #20]
    3626:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    362a:	4a13      	ldr	r2, [pc, #76]	; (3678 <CC_PalTrngParamGet+0x108>)
    362c:	4291      	cmp	r1, r2
    362e:	d00b      	beq.n	3648 <CC_PalTrngParamGet+0xd8>
    3630:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    3634:	3201      	adds	r2, #1
    3636:	d007      	beq.n	3648 <CC_PalTrngParamGet+0xd8>
    3638:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    363c:	6183      	str	r3, [r0, #24]
    363e:	2000      	movs	r0, #0
    3640:	4770      	bx	lr
    3642:	f640 02fc 	movw	r2, #2300	; 0x8fc
    3646:	e7a7      	b.n	3598 <CC_PalTrngParamGet+0x28>
    3648:	f240 3337 	movw	r3, #823	; 0x337
    364c:	6183      	str	r3, [r0, #24]
    364e:	2000      	movs	r0, #0
    3650:	4770      	bx	lr
    3652:	2251      	movs	r2, #81	; 0x51
    3654:	e7e4      	b.n	3620 <CC_PalTrngParamGet+0xb0>
    3656:	2290      	movs	r2, #144	; 0x90
    3658:	e7d5      	b.n	3606 <CC_PalTrngParamGet+0x96>
    365a:	f642 1204 	movw	r2, #10500	; 0x2904
    365e:	e7c5      	b.n	35ec <CC_PalTrngParamGet+0x7c>
    3660:	f640 62d8 	movw	r2, #3800	; 0xed8
    3664:	e7b4      	b.n	35d0 <CC_PalTrngParamGet+0x60>
    3666:	f242 02d0 	movw	r2, #8400	; 0x20d0
    366a:	e7a3      	b.n	35b4 <CC_PalTrngParamGet+0x44>
    366c:	fffff8fc 	.word	0xfffff8fc
    3670:	ffff20d0 	.word	0xffff20d0
    3674:	ffff2904 	.word	0xffff2904
    3678:	fffff337 	.word	0xfffff337

0000367c <LLF_RND_AdaptiveProportionTest>:
    367c:	b3a8      	cbz	r0, 36ea <LLF_RND_AdaptiveProportionTest+0x6e>
    367e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3682:	1e4c      	subs	r4, r1, #1
    3684:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3688:	d22c      	bcs.n	36e4 <LLF_RND_AdaptiveProportionTest+0x68>
    368a:	b35b      	cbz	r3, 36e4 <LLF_RND_AdaptiveProportionTest+0x68>
    368c:	b352      	cbz	r2, 36e4 <LLF_RND_AdaptiveProportionTest+0x68>
    368e:	f04f 0c00 	mov.w	ip, #0
    3692:	00c9      	lsls	r1, r1, #3
    3694:	46e6      	mov	lr, ip
    3696:	4665      	mov	r5, ip
    3698:	4664      	mov	r4, ip
    369a:	1e4f      	subs	r7, r1, #1
    369c:	f103 38ff 	add.w	r8, r3, #4294967295
    36a0:	e00c      	b.n	36bc <LLF_RND_AdaptiveProportionTest+0x40>
    36a2:	42ab      	cmp	r3, r5
    36a4:	d016      	beq.n	36d4 <LLF_RND_AdaptiveProportionTest+0x58>
    36a6:	458e      	cmp	lr, r1
    36a8:	d101      	bne.n	36ae <LLF_RND_AdaptiveProportionTest+0x32>
    36aa:	f10c 0c01 	add.w	ip, ip, #1
    36ae:	45a8      	cmp	r8, r5
    36b0:	d016      	beq.n	36e0 <LLF_RND_AdaptiveProportionTest+0x64>
    36b2:	3401      	adds	r4, #1
    36b4:	42bc      	cmp	r4, r7
    36b6:	f105 0501 	add.w	r5, r5, #1
    36ba:	d818      	bhi.n	36ee <LLF_RND_AdaptiveProportionTest+0x72>
    36bc:	0961      	lsrs	r1, r4, #5
    36be:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    36c2:	f004 061f 	and.w	r6, r4, #31
    36c6:	40f1      	lsrs	r1, r6
    36c8:	2e1f      	cmp	r6, #31
    36ca:	bf18      	it	ne
    36cc:	f001 0101 	andne.w	r1, r1, #1
    36d0:	2c00      	cmp	r4, #0
    36d2:	d1e6      	bne.n	36a2 <LLF_RND_AdaptiveProportionTest+0x26>
    36d4:	2500      	movs	r5, #0
    36d6:	45a8      	cmp	r8, r5
    36d8:	468e      	mov	lr, r1
    36da:	f04f 0c01 	mov.w	ip, #1
    36de:	d1e8      	bne.n	36b2 <LLF_RND_AdaptiveProportionTest+0x36>
    36e0:	4562      	cmp	r2, ip
    36e2:	d2e6      	bcs.n	36b2 <LLF_RND_AdaptiveProportionTest+0x36>
    36e4:	4803      	ldr	r0, [pc, #12]	; (36f4 <LLF_RND_AdaptiveProportionTest+0x78>)
    36e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ea:	4802      	ldr	r0, [pc, #8]	; (36f4 <LLF_RND_AdaptiveProportionTest+0x78>)
    36ec:	4770      	bx	lr
    36ee:	2000      	movs	r0, #0
    36f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36f4:	00f10c37 	.word	0x00f10c37

000036f8 <getTrngSource>:
    36f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36fc:	b08f      	sub	sp, #60	; 0x3c
    36fe:	460d      	mov	r5, r1
    3700:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    3704:	4683      	mov	fp, r0
    3706:	2900      	cmp	r1, #0
    3708:	d157      	bne.n	37ba <getTrngSource+0xc2>
    370a:	6929      	ldr	r1, [r5, #16]
    370c:	9103      	str	r1, [sp, #12]
    370e:	2100      	movs	r1, #0
    3710:	601c      	str	r4, [r3, #0]
    3712:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3714:	6019      	str	r1, [r3, #0]
    3716:	2a00      	cmp	r2, #0
    3718:	f000 8122 	beq.w	3960 <getTrngSource+0x268>
    371c:	4a81      	ldr	r2, [pc, #516]	; (3924 <getTrngSource+0x22c>)
    371e:	4b82      	ldr	r3, [pc, #520]	; (3928 <getTrngSource+0x230>)
    3720:	6811      	ldr	r1, [r2, #0]
    3722:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3724:	681b      	ldr	r3, [r3, #0]
    3726:	429a      	cmp	r2, r3
    3728:	d157      	bne.n	37da <getTrngSource+0xe2>
    372a:	290a      	cmp	r1, #10
    372c:	d155      	bne.n	37da <getTrngSource+0xe2>
    372e:	f89b 3003 	ldrb.w	r3, [fp, #3]
    3732:	9306      	str	r3, [sp, #24]
    3734:	9903      	ldr	r1, [sp, #12]
    3736:	2304      	movs	r3, #4
    3738:	4608      	mov	r0, r1
    373a:	4a7c      	ldr	r2, [pc, #496]	; (392c <getTrngSource+0x234>)
    373c:	9302      	str	r3, [sp, #8]
    373e:	fba2 0200 	umull	r0, r2, r2, r0
    3742:	0892      	lsrs	r2, r2, #2
    3744:	00cb      	lsls	r3, r1, #3
    3746:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    374a:	f104 0008 	add.w	r0, r4, #8
    374e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    3752:	3b01      	subs	r3, #1
    3754:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3928 <getTrngSource+0x230>
    3758:	f8df a200 	ldr.w	sl, [pc, #512]	; 395c <getTrngSource+0x264>
    375c:	9004      	str	r0, [sp, #16]
    375e:	9200      	str	r2, [sp, #0]
    3760:	9305      	str	r3, [sp, #20]
    3762:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3764:	9c03      	ldr	r4, [sp, #12]
    3766:	601c      	str	r4, [r3, #0]
    3768:	2c00      	cmp	r4, #0
    376a:	f000 80cc 	beq.w	3906 <getTrngSource+0x20e>
    376e:	2600      	movs	r6, #0
    3770:	9f04      	ldr	r7, [sp, #16]
    3772:	f000 faa9 	bl	3cc8 <LLF_RND_TurnOffTrng>
    3776:	2300      	movs	r3, #0
    3778:	9307      	str	r3, [sp, #28]
    377a:	9b06      	ldr	r3, [sp, #24]
    377c:	f1bb 0f00 	cmp.w	fp, #0
    3780:	d03a      	beq.n	37f8 <getTrngSource+0x100>
    3782:	2d00      	cmp	r5, #0
    3784:	d034      	beq.n	37f0 <getTrngSource+0xf8>
    3786:	bb53      	cbnz	r3, 37de <getTrngSource+0xe6>
    3788:	005b      	lsls	r3, r3, #1
    378a:	9306      	str	r3, [sp, #24]
    378c:	f1bb 0f00 	cmp.w	fp, #0
    3790:	d036      	beq.n	3800 <getTrngSource+0x108>
    3792:	2d00      	cmp	r5, #0
    3794:	d034      	beq.n	3800 <getTrngSource+0x108>
    3796:	b1e3      	cbz	r3, 37d2 <getTrngSource+0xda>
    3798:	a906      	add	r1, sp, #24
    379a:	4628      	mov	r0, r5
    379c:	f000 fa84 	bl	3ca8 <LLF_RND_GetFastestRosc>
    37a0:	2800      	cmp	r0, #0
    37a2:	f000 817d 	beq.w	3aa0 <getTrngSource+0x3a8>
    37a6:	4b62      	ldr	r3, [pc, #392]	; (3930 <getTrngSource+0x238>)
    37a8:	4298      	cmp	r0, r3
    37aa:	d012      	beq.n	37d2 <getTrngSource+0xda>
    37ac:	9000      	str	r0, [sp, #0]
    37ae:	f000 fa8b 	bl	3cc8 <LLF_RND_TurnOffTrng>
    37b2:	9800      	ldr	r0, [sp, #0]
    37b4:	b00f      	add	sp, #60	; 0x3c
    37b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37ba:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    37be:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    37c2:	3001      	adds	r0, #1
    37c4:	bf0c      	ite	eq
    37c6:	f44f 7104 	moveq.w	r1, #528	; 0x210
    37ca:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    37ce:	9103      	str	r1, [sp, #12]
    37d0:	e79d      	b.n	370e <getTrngSource+0x16>
    37d2:	6a2b      	ldr	r3, [r5, #32]
    37d4:	b973      	cbnz	r3, 37f4 <getTrngSource+0xfc>
    37d6:	4856      	ldr	r0, [pc, #344]	; (3930 <getTrngSource+0x238>)
    37d8:	e7e8      	b.n	37ac <getTrngSource+0xb4>
    37da:	4856      	ldr	r0, [pc, #344]	; (3934 <getTrngSource+0x23c>)
    37dc:	e7e6      	b.n	37ac <getTrngSource+0xb4>
    37de:	a906      	add	r1, sp, #24
    37e0:	4628      	mov	r0, r5
    37e2:	f000 fa61 	bl	3ca8 <LLF_RND_GetFastestRosc>
    37e6:	b168      	cbz	r0, 3804 <getTrngSource+0x10c>
    37e8:	4b53      	ldr	r3, [pc, #332]	; (3938 <getTrngSource+0x240>)
    37ea:	4298      	cmp	r0, r3
    37ec:	d0de      	beq.n	37ac <getTrngSource+0xb4>
    37ee:	9b06      	ldr	r3, [sp, #24]
    37f0:	2b08      	cmp	r3, #8
    37f2:	d1c9      	bne.n	3788 <getTrngSource+0x90>
    37f4:	4851      	ldr	r0, [pc, #324]	; (393c <getTrngSource+0x244>)
    37f6:	e7d9      	b.n	37ac <getTrngSource+0xb4>
    37f8:	2b08      	cmp	r3, #8
    37fa:	d0fb      	beq.n	37f4 <getTrngSource+0xfc>
    37fc:	005b      	lsls	r3, r3, #1
    37fe:	9306      	str	r3, [sp, #24]
    3800:	484f      	ldr	r0, [pc, #316]	; (3940 <getTrngSource+0x248>)
    3802:	e7d3      	b.n	37ac <getTrngSource+0xb4>
    3804:	4629      	mov	r1, r5
    3806:	9806      	ldr	r0, [sp, #24]
    3808:	f000 fa30 	bl	3c6c <LLF_RND_GetRoscSampleCnt>
    380c:	2800      	cmp	r0, #0
    380e:	d1eb      	bne.n	37e8 <getTrngSource+0xf0>
    3810:	9b06      	ldr	r3, [sp, #24]
    3812:	2b08      	cmp	r3, #8
    3814:	f000 810e 	beq.w	3a34 <getTrngSource+0x33c>
    3818:	2b04      	cmp	r3, #4
    381a:	f000 8131 	beq.w	3a80 <getTrngSource+0x388>
    381e:	f1a3 0302 	sub.w	r3, r3, #2
    3822:	fab3 f383 	clz	r3, r3
    3826:	095b      	lsrs	r3, r3, #5
    3828:	9301      	str	r3, [sp, #4]
    382a:	2301      	movs	r3, #1
    382c:	4619      	mov	r1, r3
    382e:	4a45      	ldr	r2, [pc, #276]	; (3944 <getTrngSource+0x24c>)
    3830:	6013      	str	r3, [r2, #0]
    3832:	f842 3c84 	str.w	r3, [r2, #-132]
    3836:	4b43      	ldr	r3, [pc, #268]	; (3944 <getTrngSource+0x24c>)
    3838:	6019      	str	r1, [r3, #0]
    383a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    383c:	f8c9 3000 	str.w	r3, [r9]
    3840:	f8d9 2000 	ldr.w	r2, [r9]
    3844:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3846:	429a      	cmp	r2, r3
    3848:	d1f5      	bne.n	3836 <getTrngSource+0x13e>
    384a:	f04f 0800 	mov.w	r8, #0
    384e:	f04f 30ff 	mov.w	r0, #4294967295
    3852:	f8ca 8000 	str.w	r8, [sl]
    3856:	f7ff fc3b 	bl	30d0 <CC_HalClearInterruptBit>
    385a:	4a3b      	ldr	r2, [pc, #236]	; (3948 <getTrngSource+0x250>)
    385c:	4b3b      	ldr	r3, [pc, #236]	; (394c <getTrngSource+0x254>)
    385e:	4640      	mov	r0, r8
    3860:	601a      	str	r2, [r3, #0]
    3862:	f7ff fc43 	bl	30ec <CC_HalMaskInterrupt>
    3866:	220a      	movs	r2, #10
    3868:	9801      	ldr	r0, [sp, #4]
    386a:	4939      	ldr	r1, [pc, #228]	; (3950 <getTrngSource+0x258>)
    386c:	4b2d      	ldr	r3, [pc, #180]	; (3924 <getTrngSource+0x22c>)
    386e:	6008      	str	r0, [r1, #0]
    3870:	601a      	str	r2, [r3, #0]
    3872:	692a      	ldr	r2, [r5, #16]
    3874:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3878:	fba8 1202 	umull	r1, r2, r8, r2
    387c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    387e:	0912      	lsrs	r2, r2, #4
    3880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3884:	03db      	lsls	r3, r3, #15
    3886:	fb03 f302 	mul.w	r3, r3, r2
    388a:	4a32      	ldr	r2, [pc, #200]	; (3954 <getTrngSource+0x25c>)
    388c:	099b      	lsrs	r3, r3, #6
    388e:	6013      	str	r3, [r2, #0]
    3890:	2301      	movs	r3, #1
    3892:	f8ca 3000 	str.w	r3, [sl]
    3896:	9906      	ldr	r1, [sp, #24]
    3898:	f8db 2000 	ldr.w	r2, [fp]
    389c:	020b      	lsls	r3, r1, #8
    389e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    38a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    38a6:	4313      	orrs	r3, r2
    38a8:	f8cb 3000 	str.w	r3, [fp]
    38ac:	a807      	add	r0, sp, #28
    38ae:	f000 f9cd 	bl	3c4c <LLF_RND_WaitRngInterrupt>
    38b2:	2800      	cmp	r0, #0
    38b4:	d198      	bne.n	37e8 <getTrngSource+0xf0>
    38b6:	4b28      	ldr	r3, [pc, #160]	; (3958 <getTrngSource+0x260>)
    38b8:	fba8 2804 	umull	r2, r8, r8, r4
    38bc:	681a      	ldr	r2, [r3, #0]
    38be:	3314      	adds	r3, #20
    38c0:	9208      	str	r2, [sp, #32]
    38c2:	f853 2c10 	ldr.w	r2, [r3, #-16]
    38c6:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    38ca:	9209      	str	r2, [sp, #36]	; 0x24
    38cc:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    38d0:	920a      	str	r2, [sp, #40]	; 0x28
    38d2:	f853 2c08 	ldr.w	r2, [r3, #-8]
    38d6:	920b      	str	r2, [sp, #44]	; 0x2c
    38d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    38dc:	920c      	str	r2, [sp, #48]	; 0x30
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	930d      	str	r3, [sp, #52]	; 0x34
    38e2:	d101      	bne.n	38e8 <getTrngSource+0x1f0>
    38e4:	9b00      	ldr	r3, [sp, #0]
    38e6:	b99b      	cbnz	r3, 3910 <getTrngSource+0x218>
    38e8:	4638      	mov	r0, r7
    38ea:	2218      	movs	r2, #24
    38ec:	a908      	add	r1, sp, #32
    38ee:	f7ff fb21 	bl	2f34 <CC_PalMemCopyPlat>
    38f2:	3c18      	subs	r4, #24
    38f4:	3718      	adds	r7, #24
    38f6:	3601      	adds	r6, #1
    38f8:	2c00      	cmp	r4, #0
    38fa:	f47f af3a 	bne.w	3772 <getTrngSource+0x7a>
    38fe:	9b04      	ldr	r3, [sp, #16]
    3900:	2b00      	cmp	r3, #0
    3902:	f040 809a 	bne.w	3a3a <getTrngSource+0x342>
    3906:	2300      	movs	r3, #0
    3908:	9a18      	ldr	r2, [sp, #96]	; 0x60
    390a:	6013      	str	r3, [r2, #0]
    390c:	9b06      	ldr	r3, [sp, #24]
    390e:	e76f      	b.n	37f0 <getTrngSource+0xf8>
    3910:	461a      	mov	r2, r3
    3912:	4638      	mov	r0, r7
    3914:	a908      	add	r1, sp, #32
    3916:	1ae4      	subs	r4, r4, r3
    3918:	f7ff fb0c 	bl	2f34 <CC_PalMemCopyPlat>
    391c:	9b00      	ldr	r3, [sp, #0]
    391e:	441f      	add	r7, r3
    3920:	e7e9      	b.n	38f6 <getTrngSource+0x1fe>
    3922:	bf00      	nop
    3924:	50841138 	.word	0x50841138
    3928:	50841130 	.word	0x50841130
    392c:	aaaaaaab 	.word	0xaaaaaaab
    3930:	00f10c31 	.word	0x00f10c31
    3934:	00f10c30 	.word	0x00f10c30
    3938:	00f10c02 	.word	0x00f10c02
    393c:	00f10c32 	.word	0x00f10c32
    3940:	00f10c35 	.word	0x00f10c35
    3944:	508411c4 	.word	0x508411c4
    3948:	0ffffffe 	.word	0x0ffffffe
    394c:	50841100 	.word	0x50841100
    3950:	5084110c 	.word	0x5084110c
    3954:	508411d8 	.word	0x508411d8
    3958:	50841114 	.word	0x50841114
    395c:	5084112c 	.word	0x5084112c
    3960:	f1bb 0f00 	cmp.w	fp, #0
    3964:	f43f af4c 	beq.w	3800 <getTrngSource+0x108>
    3968:	2d00      	cmp	r5, #0
    396a:	f43f af49 	beq.w	3800 <getTrngSource+0x108>
    396e:	2301      	movs	r3, #1
    3970:	a90e      	add	r1, sp, #56	; 0x38
    3972:	f841 3d20 	str.w	r3, [r1, #-32]!
    3976:	f8cb 2000 	str.w	r2, [fp]
    397a:	4628      	mov	r0, r5
    397c:	f000 f994 	bl	3ca8 <LLF_RND_GetFastestRosc>
    3980:	2800      	cmp	r0, #0
    3982:	f47f af13 	bne.w	37ac <getTrngSource+0xb4>
    3986:	4629      	mov	r1, r5
    3988:	9806      	ldr	r0, [sp, #24]
    398a:	f000 f96f 	bl	3c6c <LLF_RND_GetRoscSampleCnt>
    398e:	2800      	cmp	r0, #0
    3990:	f47f af0c 	bne.w	37ac <getTrngSource+0xb4>
    3994:	9f06      	ldr	r7, [sp, #24]
    3996:	2f08      	cmp	r7, #8
    3998:	f000 80eb 	beq.w	3b72 <getTrngSource+0x47a>
    399c:	2f04      	cmp	r7, #4
    399e:	f000 80ea 	beq.w	3b76 <getTrngSource+0x47e>
    39a2:	f1a7 0702 	sub.w	r7, r7, #2
    39a6:	fab7 f787 	clz	r7, r7
    39aa:	097f      	lsrs	r7, r7, #5
    39ac:	2201      	movs	r2, #1
    39ae:	4616      	mov	r6, r2
    39b0:	4b73      	ldr	r3, [pc, #460]	; (3b80 <getTrngSource+0x488>)
    39b2:	4974      	ldr	r1, [pc, #464]	; (3b84 <getTrngSource+0x48c>)
    39b4:	601a      	str	r2, [r3, #0]
    39b6:	4618      	mov	r0, r3
    39b8:	600a      	str	r2, [r1, #0]
    39ba:	3b94      	subs	r3, #148	; 0x94
    39bc:	6006      	str	r6, [r0, #0]
    39be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    39c0:	601a      	str	r2, [r3, #0]
    39c2:	6819      	ldr	r1, [r3, #0]
    39c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    39c6:	4291      	cmp	r1, r2
    39c8:	d1f8      	bne.n	39bc <getTrngSource+0x2c4>
    39ca:	f04f 0800 	mov.w	r8, #0
    39ce:	4b6e      	ldr	r3, [pc, #440]	; (3b88 <getTrngSource+0x490>)
    39d0:	f04f 30ff 	mov.w	r0, #4294967295
    39d4:	f8c3 8000 	str.w	r8, [r3]
    39d8:	f7ff fb7a 	bl	30d0 <CC_HalClearInterruptBit>
    39dc:	4b6b      	ldr	r3, [pc, #428]	; (3b8c <getTrngSource+0x494>)
    39de:	4a6c      	ldr	r2, [pc, #432]	; (3b90 <getTrngSource+0x498>)
    39e0:	4640      	mov	r0, r8
    39e2:	601a      	str	r2, [r3, #0]
    39e4:	f7ff fb82 	bl	30ec <CC_HalMaskInterrupt>
    39e8:	220a      	movs	r2, #10
    39ea:	496a      	ldr	r1, [pc, #424]	; (3b94 <getTrngSource+0x49c>)
    39ec:	4b6a      	ldr	r3, [pc, #424]	; (3b98 <getTrngSource+0x4a0>)
    39ee:	600f      	str	r7, [r1, #0]
    39f0:	601a      	str	r2, [r3, #0]
    39f2:	991a      	ldr	r1, [sp, #104]	; 0x68
    39f4:	692b      	ldr	r3, [r5, #16]
    39f6:	2901      	cmp	r1, #1
    39f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    39fa:	f000 80b1 	beq.w	3b60 <getTrngSource+0x468>
    39fe:	4967      	ldr	r1, [pc, #412]	; (3b9c <getTrngSource+0x4a4>)
    3a00:	fba1 1303 	umull	r1, r3, r1, r3
    3a04:	091b      	lsrs	r3, r3, #4
    3a06:	2101      	movs	r1, #1
    3a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3a0c:	03d2      	lsls	r2, r2, #15
    3a0e:	fb03 f302 	mul.w	r3, r3, r2
    3a12:	4a63      	ldr	r2, [pc, #396]	; (3ba0 <getTrngSource+0x4a8>)
    3a14:	099b      	lsrs	r3, r3, #6
    3a16:	6013      	str	r3, [r2, #0]
    3a18:	4b5b      	ldr	r3, [pc, #364]	; (3b88 <getTrngSource+0x490>)
    3a1a:	6019      	str	r1, [r3, #0]
    3a1c:	9906      	ldr	r1, [sp, #24]
    3a1e:	f8db 2000 	ldr.w	r2, [fp]
    3a22:	020b      	lsls	r3, r1, #8
    3a24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3a28:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3a2c:	4313      	orrs	r3, r2
    3a2e:	f8cb 3000 	str.w	r3, [fp]
    3a32:	e67f      	b.n	3734 <getTrngSource+0x3c>
    3a34:	2303      	movs	r3, #3
    3a36:	9301      	str	r3, [sp, #4]
    3a38:	e6f7      	b.n	382a <getTrngSource+0x132>
    3a3a:	9b03      	ldr	r3, [sp, #12]
    3a3c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    3a40:	f63f af61 	bhi.w	3906 <getTrngSource+0x20e>
    3a44:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    3a48:	4620      	mov	r0, r4
    3a4a:	4623      	mov	r3, r4
    3a4c:	696e      	ldr	r6, [r5, #20]
    3a4e:	e004      	b.n	3a5a <getTrngSource+0x362>
    3a50:	2001      	movs	r0, #1
    3a52:	3301      	adds	r3, #1
    3a54:	4563      	cmp	r3, ip
    3a56:	4614      	mov	r4, r2
    3a58:	d815      	bhi.n	3a86 <getTrngSource+0x38e>
    3a5a:	095a      	lsrs	r2, r3, #5
    3a5c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    3a60:	f003 011f 	and.w	r1, r3, #31
    3a64:	40ca      	lsrs	r2, r1
    3a66:	291f      	cmp	r1, #31
    3a68:	bf18      	it	ne
    3a6a:	f002 0201 	andne.w	r2, r2, #1
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d0ee      	beq.n	3a50 <getTrngSource+0x358>
    3a72:	42a2      	cmp	r2, r4
    3a74:	d1ec      	bne.n	3a50 <getTrngSource+0x358>
    3a76:	3001      	adds	r0, #1
    3a78:	4286      	cmp	r6, r0
    3a7a:	d1ea      	bne.n	3a52 <getTrngSource+0x35a>
    3a7c:	4849      	ldr	r0, [pc, #292]	; (3ba4 <getTrngSource+0x4ac>)
    3a7e:	e00b      	b.n	3a98 <getTrngSource+0x3a0>
    3a80:	2302      	movs	r3, #2
    3a82:	9301      	str	r3, [sp, #4]
    3a84:	e6d1      	b.n	382a <getTrngSource+0x132>
    3a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3a8a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3a8e:	69aa      	ldr	r2, [r5, #24]
    3a90:	f7ff fdf4 	bl	367c <LLF_RND_AdaptiveProportionTest>
    3a94:	2800      	cmp	r0, #0
    3a96:	d05d      	beq.n	3b54 <getTrngSource+0x45c>
    3a98:	2300      	movs	r3, #0
    3a9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3a9c:	6013      	str	r3, [r2, #0]
    3a9e:	e6a3      	b.n	37e8 <getTrngSource+0xf0>
    3aa0:	4629      	mov	r1, r5
    3aa2:	9806      	ldr	r0, [sp, #24]
    3aa4:	f000 f8e2 	bl	3c6c <LLF_RND_GetRoscSampleCnt>
    3aa8:	2800      	cmp	r0, #0
    3aaa:	f47f ae7c 	bne.w	37a6 <getTrngSource+0xae>
    3aae:	9c06      	ldr	r4, [sp, #24]
    3ab0:	2c08      	cmp	r4, #8
    3ab2:	d051      	beq.n	3b58 <getTrngSource+0x460>
    3ab4:	2c04      	cmp	r4, #4
    3ab6:	d051      	beq.n	3b5c <getTrngSource+0x464>
    3ab8:	f1a4 0402 	sub.w	r4, r4, #2
    3abc:	fab4 f484 	clz	r4, r4
    3ac0:	0964      	lsrs	r4, r4, #5
    3ac2:	2301      	movs	r3, #1
    3ac4:	461e      	mov	r6, r3
    3ac6:	4619      	mov	r1, r3
    3ac8:	4a2d      	ldr	r2, [pc, #180]	; (3b80 <getTrngSource+0x488>)
    3aca:	6013      	str	r3, [r2, #0]
    3acc:	f842 3c84 	str.w	r3, [r2, #-132]
    3ad0:	4b2b      	ldr	r3, [pc, #172]	; (3b80 <getTrngSource+0x488>)
    3ad2:	6019      	str	r1, [r3, #0]
    3ad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3ad6:	f8c9 3000 	str.w	r3, [r9]
    3ada:	f8d9 2000 	ldr.w	r2, [r9]
    3ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3ae0:	429a      	cmp	r2, r3
    3ae2:	d1f5      	bne.n	3ad0 <getTrngSource+0x3d8>
    3ae4:	2700      	movs	r7, #0
    3ae6:	f04f 30ff 	mov.w	r0, #4294967295
    3aea:	f8ca 7000 	str.w	r7, [sl]
    3aee:	f7ff faef 	bl	30d0 <CC_HalClearInterruptBit>
    3af2:	4b26      	ldr	r3, [pc, #152]	; (3b8c <getTrngSource+0x494>)
    3af4:	4a26      	ldr	r2, [pc, #152]	; (3b90 <getTrngSource+0x498>)
    3af6:	4638      	mov	r0, r7
    3af8:	601a      	str	r2, [r3, #0]
    3afa:	f7ff faf7 	bl	30ec <CC_HalMaskInterrupt>
    3afe:	220a      	movs	r2, #10
    3b00:	4924      	ldr	r1, [pc, #144]	; (3b94 <getTrngSource+0x49c>)
    3b02:	4b25      	ldr	r3, [pc, #148]	; (3b98 <getTrngSource+0x4a0>)
    3b04:	600c      	str	r4, [r1, #0]
    3b06:	601a      	str	r2, [r3, #0]
    3b08:	692a      	ldr	r2, [r5, #16]
    3b0a:	4924      	ldr	r1, [pc, #144]	; (3b9c <getTrngSource+0x4a4>)
    3b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b0e:	fba1 1202 	umull	r1, r2, r1, r2
    3b12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b16:	0912      	lsrs	r2, r2, #4
    3b18:	03db      	lsls	r3, r3, #15
    3b1a:	fb03 f302 	mul.w	r3, r3, r2
    3b1e:	4a20      	ldr	r2, [pc, #128]	; (3ba0 <getTrngSource+0x4a8>)
    3b20:	099b      	lsrs	r3, r3, #6
    3b22:	6013      	str	r3, [r2, #0]
    3b24:	f8ca 6000 	str.w	r6, [sl]
    3b28:	9b06      	ldr	r3, [sp, #24]
    3b2a:	f8db 1000 	ldr.w	r1, [fp]
    3b2e:	021a      	lsls	r2, r3, #8
    3b30:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3b34:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3b38:	431a      	orrs	r2, r3
    3b3a:	0a13      	lsrs	r3, r2, #8
    3b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3b40:	4313      	orrs	r3, r2
    3b42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b46:	f8cb 3000 	str.w	r3, [fp]
    3b4a:	9b02      	ldr	r3, [sp, #8]
    3b4c:	3b01      	subs	r3, #1
    3b4e:	9302      	str	r3, [sp, #8]
    3b50:	f47f ae07 	bne.w	3762 <getTrngSource+0x6a>
    3b54:	2000      	movs	r0, #0
    3b56:	e629      	b.n	37ac <getTrngSource+0xb4>
    3b58:	2403      	movs	r4, #3
    3b5a:	e7b2      	b.n	3ac2 <getTrngSource+0x3ca>
    3b5c:	2402      	movs	r4, #2
    3b5e:	e7b0      	b.n	3ac2 <getTrngSource+0x3ca>
    3b60:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3b64:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3b68:	3101      	adds	r1, #1
    3b6a:	d006      	beq.n	3b7a <getTrngSource+0x482>
    3b6c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3b70:	e745      	b.n	39fe <getTrngSource+0x306>
    3b72:	2703      	movs	r7, #3
    3b74:	e71a      	b.n	39ac <getTrngSource+0x2b4>
    3b76:	2702      	movs	r7, #2
    3b78:	e718      	b.n	39ac <getTrngSource+0x2b4>
    3b7a:	2316      	movs	r3, #22
    3b7c:	e743      	b.n	3a06 <getTrngSource+0x30e>
    3b7e:	bf00      	nop
    3b80:	508411c4 	.word	0x508411c4
    3b84:	50841140 	.word	0x50841140
    3b88:	5084112c 	.word	0x5084112c
    3b8c:	50841100 	.word	0x50841100
    3b90:	0ffffffe 	.word	0x0ffffffe
    3b94:	5084110c 	.word	0x5084110c
    3b98:	50841138 	.word	0x50841138
    3b9c:	aaaaaaab 	.word	0xaaaaaaab
    3ba0:	508411d8 	.word	0x508411d8
    3ba4:	00f10c36 	.word	0x00f10c36

00003ba8 <LLF_RND_GetTrngSource>:
    3ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3bac:	4c1b      	ldr	r4, [pc, #108]	; (3c1c <LLF_RND_GetTrngSource+0x74>)
    3bae:	b085      	sub	sp, #20
    3bb0:	4607      	mov	r7, r0
    3bb2:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    3bb6:	4688      	mov	r8, r1
    3bb8:	6820      	ldr	r0, [r4, #0]
    3bba:	f04f 31ff 	mov.w	r1, #4294967295
    3bbe:	4691      	mov	r9, r2
    3bc0:	f7ff fa1e 	bl	3000 <CC_PalMutexLock>
    3bc4:	bb28      	cbnz	r0, 3c12 <LLF_RND_GetTrngSource+0x6a>
    3bc6:	2000      	movs	r0, #0
    3bc8:	f7ff fa4a 	bl	3060 <CC_PalPowerSaveModeSelect>
    3bcc:	b9e8      	cbnz	r0, 3c0a <LLF_RND_GetTrngSource+0x62>
    3bce:	2300      	movs	r3, #0
    3bd0:	e9cd 5600 	strd	r5, r6, [sp]
    3bd4:	9302      	str	r3, [sp, #8]
    3bd6:	464a      	mov	r2, r9
    3bd8:	4641      	mov	r1, r8
    3bda:	4638      	mov	r0, r7
    3bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bde:	f7ff fd8b 	bl	36f8 <getTrngSource>
    3be2:	4605      	mov	r5, r0
    3be4:	2001      	movs	r0, #1
    3be6:	f7ff fa3b 	bl	3060 <CC_PalPowerSaveModeSelect>
    3bea:	b950      	cbnz	r0, 3c02 <LLF_RND_GetTrngSource+0x5a>
    3bec:	6820      	ldr	r0, [r4, #0]
    3bee:	f7ff fa0f 	bl	3010 <CC_PalMutexUnlock>
    3bf2:	b110      	cbz	r0, 3bfa <LLF_RND_GetTrngSource+0x52>
    3bf4:	480a      	ldr	r0, [pc, #40]	; (3c20 <LLF_RND_GetTrngSource+0x78>)
    3bf6:	f7ff fb8d 	bl	3314 <CC_PalAbort>
    3bfa:	4628      	mov	r0, r5
    3bfc:	b005      	add	sp, #20
    3bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c02:	4808      	ldr	r0, [pc, #32]	; (3c24 <LLF_RND_GetTrngSource+0x7c>)
    3c04:	f7ff fb86 	bl	3314 <CC_PalAbort>
    3c08:	e7f0      	b.n	3bec <LLF_RND_GetTrngSource+0x44>
    3c0a:	4807      	ldr	r0, [pc, #28]	; (3c28 <LLF_RND_GetTrngSource+0x80>)
    3c0c:	f7ff fb82 	bl	3314 <CC_PalAbort>
    3c10:	e7dd      	b.n	3bce <LLF_RND_GetTrngSource+0x26>
    3c12:	4806      	ldr	r0, [pc, #24]	; (3c2c <LLF_RND_GetTrngSource+0x84>)
    3c14:	f7ff fb7e 	bl	3314 <CC_PalAbort>
    3c18:	e7d5      	b.n	3bc6 <LLF_RND_GetTrngSource+0x1e>
    3c1a:	bf00      	nop
    3c1c:	20001484 	.word	0x20001484
    3c20:	00004e64 	.word	0x00004e64
    3c24:	00004e9c 	.word	0x00004e9c
    3c28:	00004e7c 	.word	0x00004e7c
    3c2c:	00004e4c 	.word	0x00004e4c

00003c30 <LLF_RND_RunTrngStartupTest>:
    3c30:	b510      	push	{r4, lr}
    3c32:	2401      	movs	r4, #1
    3c34:	b086      	sub	sp, #24
    3c36:	ab05      	add	r3, sp, #20
    3c38:	e9cd 2401 	strd	r2, r4, [sp, #4]
    3c3c:	9300      	str	r3, [sp, #0]
    3c3e:	2200      	movs	r2, #0
    3c40:	ab04      	add	r3, sp, #16
    3c42:	f7ff fd59 	bl	36f8 <getTrngSource>
    3c46:	b006      	add	sp, #24
    3c48:	bd10      	pop	{r4, pc}
    3c4a:	bf00      	nop

00003c4c <LLF_RND_WaitRngInterrupt>:
    3c4c:	b508      	push	{r3, lr}
    3c4e:	4601      	mov	r1, r0
    3c50:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3c54:	f7ff fa50 	bl	30f8 <CC_HalWaitInterruptRND>
    3c58:	2300      	movs	r3, #0
    3c5a:	4902      	ldr	r1, [pc, #8]	; (3c64 <LLF_RND_WaitRngInterrupt+0x18>)
    3c5c:	4a02      	ldr	r2, [pc, #8]	; (3c68 <LLF_RND_WaitRngInterrupt+0x1c>)
    3c5e:	600b      	str	r3, [r1, #0]
    3c60:	6013      	str	r3, [r2, #0]
    3c62:	bd08      	pop	{r3, pc}
    3c64:	508411c8 	.word	0x508411c8
    3c68:	5084112c 	.word	0x5084112c

00003c6c <LLF_RND_GetRoscSampleCnt>:
    3c6c:	3801      	subs	r0, #1
    3c6e:	2807      	cmp	r0, #7
    3c70:	d815      	bhi.n	3c9e <LLF_RND_GetRoscSampleCnt+0x32>
    3c72:	e8df f000 	tbb	[pc, r0]
    3c76:	0c10      	.short	0x0c10
    3c78:	14140814 	.word	0x14140814
    3c7c:	0414      	.short	0x0414
    3c7e:	68cb      	ldr	r3, [r1, #12]
    3c80:	2000      	movs	r0, #0
    3c82:	624b      	str	r3, [r1, #36]	; 0x24
    3c84:	4770      	bx	lr
    3c86:	688b      	ldr	r3, [r1, #8]
    3c88:	2000      	movs	r0, #0
    3c8a:	624b      	str	r3, [r1, #36]	; 0x24
    3c8c:	4770      	bx	lr
    3c8e:	684b      	ldr	r3, [r1, #4]
    3c90:	2000      	movs	r0, #0
    3c92:	624b      	str	r3, [r1, #36]	; 0x24
    3c94:	4770      	bx	lr
    3c96:	680b      	ldr	r3, [r1, #0]
    3c98:	2000      	movs	r0, #0
    3c9a:	624b      	str	r3, [r1, #36]	; 0x24
    3c9c:	4770      	bx	lr
    3c9e:	4801      	ldr	r0, [pc, #4]	; (3ca4 <LLF_RND_GetRoscSampleCnt+0x38>)
    3ca0:	4770      	bx	lr
    3ca2:	bf00      	nop
    3ca4:	00f10c31 	.word	0x00f10c31

00003ca8 <LLF_RND_GetFastestRosc>:
    3ca8:	680b      	ldr	r3, [r1, #0]
    3caa:	e002      	b.n	3cb2 <LLF_RND_GetFastestRosc+0xa>
    3cac:	2b08      	cmp	r3, #8
    3cae:	600b      	str	r3, [r1, #0]
    3cb0:	d806      	bhi.n	3cc0 <LLF_RND_GetFastestRosc+0x18>
    3cb2:	6a02      	ldr	r2, [r0, #32]
    3cb4:	4213      	tst	r3, r2
    3cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3cba:	d0f7      	beq.n	3cac <LLF_RND_GetFastestRosc+0x4>
    3cbc:	2000      	movs	r0, #0
    3cbe:	4770      	bx	lr
    3cc0:	4800      	ldr	r0, [pc, #0]	; (3cc4 <LLF_RND_GetFastestRosc+0x1c>)
    3cc2:	4770      	bx	lr
    3cc4:	00f10c31 	.word	0x00f10c31

00003cc8 <LLF_RND_TurnOffTrng>:
    3cc8:	2300      	movs	r3, #0
    3cca:	4904      	ldr	r1, [pc, #16]	; (3cdc <LLF_RND_TurnOffTrng+0x14>)
    3ccc:	4a04      	ldr	r2, [pc, #16]	; (3ce0 <LLF_RND_TurnOffTrng+0x18>)
    3cce:	600b      	str	r3, [r1, #0]
    3cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3cd4:	6013      	str	r3, [r2, #0]
    3cd6:	f7ff b9fb 	b.w	30d0 <CC_HalClearInterruptBit>
    3cda:	bf00      	nop
    3cdc:	5084112c 	.word	0x5084112c
    3ce0:	508411c4 	.word	0x508411c4

00003ce4 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    3ce4:	b508      	push	{r3, lr}
	spm_config();
    3ce6:	f7fc ff37 	bl	b58 <spm_config>
	spm_jump();
}
    3cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3cee:	f7fc bec7 	b.w	a80 <spm_jump>

00003cf2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    3cf2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    3cf6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3cfa:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    3cfc:	bf08      	it	eq
    3cfe:	f06f 0015 	mvneq.w	r0, #21
    3d02:	4770      	bx	lr

00003d04 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    3d04:	23ff      	movs	r3, #255	; 0xff
{
    3d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3d0a:	6845      	ldr	r5, [r0, #4]

	for (i = 0; i < p->n_levels; i++) {
    3d0c:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3d0e:	4629      	mov	r1, r5
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    3d10:	f04f 0a0c 	mov.w	sl, #12

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
    3d14:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3d18:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3d1a:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3d1c:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
    3d20:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
    3d22:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3d24:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
    3d26:	9301      	str	r3, [sp, #4]
    3d28:	9b01      	ldr	r3, [sp, #4]
    3d2a:	4293      	cmp	r3, r2
    3d2c:	dc08      	bgt.n	3d40 <z_sys_mem_pool_base_init+0x3c>
    3d2e:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    3d30:	4619      	mov	r1, r3
    3d32:	428f      	cmp	r7, r1
    3d34:	eb05 0c03 	add.w	ip, r5, r3
    3d38:	dc21      	bgt.n	3d7e <z_sys_mem_pool_base_init+0x7a>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    3d3a:	b003      	add	sp, #12
    3d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    3d40:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    3d44:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
    3d46:	bf84      	itt	hi
    3d48:	331f      	addhi	r3, #31
    3d4a:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
    3d4e:	fb0a fe02 	mul.w	lr, sl, r2
    3d52:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
    3d56:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    3d5a:	eb08 060e 	add.w	r6, r8, lr
    3d5e:	f106 0904 	add.w	r9, r6, #4
    3d62:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
    3d66:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
    3d6a:	bf94      	ite	ls
    3d6c:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
    3d6e:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
    3d72:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
    3d76:	bf88      	it	hi
    3d78:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
    3d7c:	e7d4      	b.n	3d28 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
    3d7e:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    3d80:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    3d82:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
    3d86:	18f4      	adds	r4, r6, r3
	node->next = list;
    3d88:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
    3d8c:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    3d8e:	3101      	adds	r1, #1
    3d90:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3d92:	6893      	ldr	r3, [r2, #8]
    3d94:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3d96:	6094      	str	r4, [r2, #8]
    3d98:	4663      	mov	r3, ip
    3d9a:	e7ca      	b.n	3d32 <z_sys_mem_pool_base_init+0x2e>

00003d9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3d9c:	4604      	mov	r4, r0
    3d9e:	b508      	push	{r3, lr}
    3da0:	4608      	mov	r0, r1
    3da2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3da4:	461a      	mov	r2, r3
    3da6:	47a0      	blx	r4
	return z_impl_k_current_get();
    3da8:	f7fe fef0 	bl	2b8c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3dac:	f7fd fbe8 	bl	1580 <z_impl_k_thread_abort>

00003db0 <z_arch_printk_char_out>:
}
    3db0:	2000      	movs	r0, #0
    3db2:	4770      	bx	lr

00003db4 <print_err>:
{
    3db4:	b570      	push	{r4, r5, r6, lr}
    3db6:	460d      	mov	r5, r1
    3db8:	4604      	mov	r4, r0
	out('E', ctx);
    3dba:	2045      	movs	r0, #69	; 0x45
    3dbc:	47a0      	blx	r4
	out('R', ctx);
    3dbe:	4629      	mov	r1, r5
    3dc0:	2052      	movs	r0, #82	; 0x52
    3dc2:	47a0      	blx	r4
	out('R', ctx);
    3dc4:	4629      	mov	r1, r5
    3dc6:	4623      	mov	r3, r4
}
    3dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3dcc:	2052      	movs	r0, #82	; 0x52
    3dce:	4718      	bx	r3

00003dd0 <z_vprintk>:
{
    3dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    3dd4:	2700      	movs	r7, #0
{
    3dd6:	4605      	mov	r5, r0
    3dd8:	460e      	mov	r6, r1
    3dda:	4692      	mov	sl, r2
    3ddc:	461c      	mov	r4, r3
	int min_width = -1;
    3dde:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    3de2:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
    3de4:	46bb      	mov	fp, r7
{
    3de6:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
    3de8:	f89a 0000 	ldrb.w	r0, [sl]
    3dec:	b910      	cbnz	r0, 3df4 <z_vprintk+0x24>
}
    3dee:	b009      	add	sp, #36	; 0x24
    3df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    3df4:	f1bb 0f00 	cmp.w	fp, #0
    3df8:	d107      	bne.n	3e0a <z_vprintk+0x3a>
			if (*fmt != '%') {
    3dfa:	2825      	cmp	r0, #37	; 0x25
    3dfc:	f000 814e 	beq.w	409c <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
    3e00:	4631      	mov	r1, r6
    3e02:	47a8      	blx	r5
		++fmt;
    3e04:	f10a 0a01 	add.w	sl, sl, #1
    3e08:	e7ee      	b.n	3de8 <z_vprintk+0x18>
			switch (*fmt) {
    3e0a:	2864      	cmp	r0, #100	; 0x64
    3e0c:	d068      	beq.n	3ee0 <z_vprintk+0x110>
    3e0e:	d81a      	bhi.n	3e46 <z_vprintk+0x76>
    3e10:	2839      	cmp	r0, #57	; 0x39
    3e12:	d80b      	bhi.n	3e2c <z_vprintk+0x5c>
    3e14:	2831      	cmp	r0, #49	; 0x31
    3e16:	d25a      	bcs.n	3ece <z_vprintk+0xfe>
    3e18:	282d      	cmp	r0, #45	; 0x2d
    3e1a:	f000 8146 	beq.w	40aa <z_vprintk+0x2da>
    3e1e:	2830      	cmp	r0, #48	; 0x30
    3e20:	d046      	beq.n	3eb0 <z_vprintk+0xe0>
    3e22:	2825      	cmp	r0, #37	; 0x25
    3e24:	d108      	bne.n	3e38 <z_vprintk+0x68>
				out((int)'%', ctx);
    3e26:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
    3e28:	47a8      	blx	r5
    3e2a:	e07a      	b.n	3f22 <z_vprintk+0x152>
			switch (*fmt) {
    3e2c:	2858      	cmp	r0, #88	; 0x58
    3e2e:	f000 80b4 	beq.w	3f9a <z_vprintk+0x1ca>
    3e32:	2863      	cmp	r0, #99	; 0x63
    3e34:	f000 812c 	beq.w	4090 <z_vprintk+0x2c0>
				out((int)'%', ctx);
    3e38:	4631      	mov	r1, r6
    3e3a:	2025      	movs	r0, #37	; 0x25
    3e3c:	47a8      	blx	r5
				out((int)*fmt, ctx);
    3e3e:	4631      	mov	r1, r6
    3e40:	f89a 0000 	ldrb.w	r0, [sl]
    3e44:	e7f0      	b.n	3e28 <z_vprintk+0x58>
			switch (*fmt) {
    3e46:	2870      	cmp	r0, #112	; 0x70
    3e48:	f000 809d 	beq.w	3f86 <z_vprintk+0x1b6>
    3e4c:	d80d      	bhi.n	3e6a <z_vprintk+0x9a>
    3e4e:	2869      	cmp	r0, #105	; 0x69
    3e50:	d046      	beq.n	3ee0 <z_vprintk+0x110>
    3e52:	286c      	cmp	r0, #108	; 0x6c
    3e54:	d103      	bne.n	3e5e <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3e56:	2f6c      	cmp	r7, #108	; 0x6c
    3e58:	d126      	bne.n	3ea8 <z_vprintk+0xd8>
					length_mod = 'L';
    3e5a:	274c      	movs	r7, #76	; 0x4c
    3e5c:	e7d2      	b.n	3e04 <z_vprintk+0x34>
			switch (*fmt) {
    3e5e:	2868      	cmp	r0, #104	; 0x68
    3e60:	d1ea      	bne.n	3e38 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    3e62:	2f68      	cmp	r7, #104	; 0x68
    3e64:	d120      	bne.n	3ea8 <z_vprintk+0xd8>
					length_mod = 'H';
    3e66:	2748      	movs	r7, #72	; 0x48
    3e68:	e7cc      	b.n	3e04 <z_vprintk+0x34>
			switch (*fmt) {
    3e6a:	2875      	cmp	r0, #117	; 0x75
    3e6c:	d070      	beq.n	3f50 <z_vprintk+0x180>
    3e6e:	d817      	bhi.n	3ea0 <z_vprintk+0xd0>
    3e70:	2873      	cmp	r0, #115	; 0x73
    3e72:	d1e1      	bne.n	3e38 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    3e74:	6822      	ldr	r2, [r4, #0]
    3e76:	f104 0b04 	add.w	fp, r4, #4
    3e7a:	4611      	mov	r1, r2
				while (*s) {
    3e7c:	460c      	mov	r4, r1
    3e7e:	f814 0b01 	ldrb.w	r0, [r4], #1
    3e82:	2800      	cmp	r0, #0
    3e84:	f040 80f9 	bne.w	407a <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
    3e88:	f1b8 0f03 	cmp.w	r8, #3
    3e8c:	f040 8113 	bne.w	40b6 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
    3e90:	1a8c      	subs	r4, r1, r2
    3e92:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    3e96:	2c00      	cmp	r4, #0
    3e98:	f300 80f5 	bgt.w	4086 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
    3e9c:	465c      	mov	r4, fp
    3e9e:	e040      	b.n	3f22 <z_vprintk+0x152>
			switch (*fmt) {
    3ea0:	2878      	cmp	r0, #120	; 0x78
    3ea2:	d07a      	beq.n	3f9a <z_vprintk+0x1ca>
    3ea4:	287a      	cmp	r0, #122	; 0x7a
    3ea6:	d1c7      	bne.n	3e38 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    3ea8:	2f00      	cmp	r7, #0
    3eaa:	d1c5      	bne.n	3e38 <z_vprintk+0x68>
    3eac:	4607      	mov	r7, r0
    3eae:	e7a9      	b.n	3e04 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
    3eb0:	f1b9 0f00 	cmp.w	r9, #0
    3eb4:	da0e      	bge.n	3ed4 <z_vprintk+0x104>
    3eb6:	f1b8 0f00 	cmp.w	r8, #0
    3eba:	f000 80f9 	beq.w	40b0 <z_vprintk+0x2e0>
					min_width = *fmt - '0';
    3ebe:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3ec2:	f1b8 0f00 	cmp.w	r8, #0
    3ec6:	bf08      	it	eq
    3ec8:	f04f 0802 	moveq.w	r8, #2
    3ecc:	e79a      	b.n	3e04 <z_vprintk+0x34>
				if (min_width < 0) {
    3ece:	f1b9 0f00 	cmp.w	r9, #0
    3ed2:	dbf4      	blt.n	3ebe <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
    3ed4:	220a      	movs	r2, #10
    3ed6:	fb02 0909 	mla	r9, r2, r9, r0
    3eda:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    3ede:	e7f0      	b.n	3ec2 <z_vprintk+0xf2>
				if (length_mod == 'z') {
    3ee0:	2f7a      	cmp	r7, #122	; 0x7a
    3ee2:	d103      	bne.n	3eec <z_vprintk+0x11c>
					d = va_arg(ap, int);
    3ee4:	f8d4 b000 	ldr.w	fp, [r4]
    3ee8:	3404      	adds	r4, #4
    3eea:	e01e      	b.n	3f2a <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
    3eec:	2f6c      	cmp	r7, #108	; 0x6c
    3eee:	d0f9      	beq.n	3ee4 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
    3ef0:	2f4c      	cmp	r7, #76	; 0x4c
    3ef2:	d1f7      	bne.n	3ee4 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
    3ef4:	f04f 0c00 	mov.w	ip, #0
    3ef8:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
    3efc:	3407      	adds	r4, #7
    3efe:	f024 0307 	bic.w	r3, r4, #7
    3f02:	f103 0408 	add.w	r4, r3, #8
    3f06:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
    3f0a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    3f0e:	f143 0100 	adc.w	r1, r3, #0
    3f12:	458c      	cmp	ip, r1
    3f14:	bf08      	it	eq
    3f16:	4583      	cmpeq	fp, r0
    3f18:	d206      	bcs.n	3f28 <z_vprintk+0x158>
						print_err(out, ctx);
    3f1a:	4631      	mov	r1, r6
    3f1c:	4628      	mov	r0, r5
    3f1e:	f7ff ff49 	bl	3db4 <print_err>
			might_format = 0;
    3f22:	f04f 0b00 	mov.w	fp, #0
				break;
    3f26:	e76d      	b.n	3e04 <z_vprintk+0x34>
					d = lld;
    3f28:	4693      	mov	fp, r2
				if (d < 0) {
    3f2a:	f1bb 0f00 	cmp.w	fp, #0
    3f2e:	da06      	bge.n	3f3e <z_vprintk+0x16e>
					out((int)'-', ctx);
    3f30:	4631      	mov	r1, r6
    3f32:	202d      	movs	r0, #45	; 0x2d
    3f34:	47a8      	blx	r5
					d = -d;
    3f36:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
    3f3a:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    3f3e:	4643      	mov	r3, r8
    3f40:	465a      	mov	r2, fp
    3f42:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    3f46:	4631      	mov	r1, r6
    3f48:	4628      	mov	r0, r5
    3f4a:	f7fc fbd7 	bl	6fc <_printk_dec_ulong>
    3f4e:	e7e8      	b.n	3f22 <z_vprintk+0x152>
				if (length_mod == 'z') {
    3f50:	2f7a      	cmp	r7, #122	; 0x7a
    3f52:	d102      	bne.n	3f5a <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
    3f54:	6822      	ldr	r2, [r4, #0]
    3f56:	3404      	adds	r4, #4
    3f58:	e011      	b.n	3f7e <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
    3f5a:	2f6c      	cmp	r7, #108	; 0x6c
    3f5c:	d0fa      	beq.n	3f54 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
    3f5e:	2f4c      	cmp	r7, #76	; 0x4c
    3f60:	d1f8      	bne.n	3f54 <z_vprintk+0x184>
					if (llu > ~0UL) {
    3f62:	2100      	movs	r1, #0
    3f64:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    3f68:	3407      	adds	r4, #7
    3f6a:	f024 0307 	bic.w	r3, r4, #7
    3f6e:	f103 0408 	add.w	r4, r3, #8
    3f72:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    3f76:	4299      	cmp	r1, r3
    3f78:	bf08      	it	eq
    3f7a:	4290      	cmpeq	r0, r2
    3f7c:	d3cd      	bcc.n	3f1a <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
    3f7e:	f8cd 9000 	str.w	r9, [sp]
    3f82:	4643      	mov	r3, r8
    3f84:	e7df      	b.n	3f46 <z_vprintk+0x176>
				  out('0', ctx);
    3f86:	4631      	mov	r1, r6
    3f88:	2030      	movs	r0, #48	; 0x30
    3f8a:	47a8      	blx	r5
				  out('x', ctx);
    3f8c:	4631      	mov	r1, r6
    3f8e:	2078      	movs	r0, #120	; 0x78
    3f90:	47a8      	blx	r5
				  min_width = 8;
    3f92:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    3f96:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
    3f9a:	f89a 2000 	ldrb.w	r2, [sl]
    3f9e:	2a70      	cmp	r2, #112	; 0x70
    3fa0:	d105      	bne.n	3fae <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
    3fa2:	6823      	ldr	r3, [r4, #0]
    3fa4:	3404      	adds	r4, #4
    3fa6:	9304      	str	r3, [sp, #16]
    3fa8:	2300      	movs	r3, #0
    3faa:	9302      	str	r3, [sp, #8]
    3fac:	e00c      	b.n	3fc8 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
    3fae:	2f6c      	cmp	r7, #108	; 0x6c
    3fb0:	d0f7      	beq.n	3fa2 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
    3fb2:	2f4c      	cmp	r7, #76	; 0x4c
    3fb4:	d1f5      	bne.n	3fa2 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
    3fb6:	3407      	adds	r4, #7
    3fb8:	f024 0207 	bic.w	r2, r4, #7
    3fbc:	6813      	ldr	r3, [r2, #0]
    3fbe:	f102 0408 	add.w	r4, r2, #8
    3fc2:	9304      	str	r3, [sp, #16]
    3fc4:	6853      	ldr	r3, [r2, #4]
    3fc6:	9302      	str	r3, [sp, #8]
	int digits = 0;
    3fc8:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
    3fca:	2310      	movs	r3, #16
	int digits = 0;
    3fcc:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
    3fce:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
    3fd0:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
    3fd2:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
    3fd4:	9902      	ldr	r1, [sp, #8]
    3fd6:	9804      	ldr	r0, [sp, #16]
    3fd8:	f1c2 0c20 	rsb	ip, r2, #32
    3fdc:	f1a2 0e20 	sub.w	lr, r2, #32
    3fe0:	40d0      	lsrs	r0, r2
    3fe2:	fa01 fc0c 	lsl.w	ip, r1, ip
    3fe6:	ea40 000c 	orr.w	r0, r0, ip
    3fea:	fa21 fe0e 	lsr.w	lr, r1, lr
    3fee:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3ff2:	f010 000f 	ands.w	r0, r0, #15
    3ff6:	d108      	bne.n	400a <z_vprintk+0x23a>
    3ff8:	9905      	ldr	r1, [sp, #20]
    3ffa:	b901      	cbnz	r1, 3ffe <z_vprintk+0x22e>
    3ffc:	bb42      	cbnz	r2, 4050 <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
    3ffe:	f04f 0c30 	mov.w	ip, #48	; 0x30
    4002:	e008      	b.n	4016 <z_vprintk+0x246>
			found_largest_digit = 1;
    4004:	f8cd b014 	str.w	fp, [sp, #20]
    4008:	e7e3      	b.n	3fd2 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    400a:	2809      	cmp	r0, #9
    400c:	bf8c      	ite	hi
    400e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    4012:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    4016:	4631      	mov	r1, r6
    4018:	4460      	add	r0, ip
    401a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    401e:	47a8      	blx	r5
			digits++;
    4020:	9b03      	ldr	r3, [sp, #12]
    4022:	3301      	adds	r3, #1
    4024:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    4026:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    402a:	2a00      	cmp	r2, #0
    402c:	d1ea      	bne.n	4004 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
    402e:	f1b8 0f03 	cmp.w	r8, #3
    4032:	f47f af76 	bne.w	3f22 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
    4036:	9b03      	ldr	r3, [sp, #12]
    4038:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
    403c:	f1bb 0f00 	cmp.w	fp, #0
    4040:	f77f af6f 	ble.w	3f22 <z_vprintk+0x152>
			out(' ', ctx);
    4044:	4631      	mov	r1, r6
    4046:	2020      	movs	r0, #32
    4048:	47a8      	blx	r5
    404a:	f10b 3bff 	add.w	fp, fp, #4294967295
    404e:	e7f5      	b.n	403c <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
    4050:	1e59      	subs	r1, r3, #1
    4052:	4599      	cmp	r9, r3
    4054:	9106      	str	r1, [sp, #24]
    4056:	db07      	blt.n	4068 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
    4058:	f1b8 0f01 	cmp.w	r8, #1
    405c:	d106      	bne.n	406c <z_vprintk+0x29c>
				out('0', ctx);
    405e:	4631      	mov	r1, r6
    4060:	2030      	movs	r0, #48	; 0x30
    4062:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
    4064:	47a8      	blx	r5
    4066:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
    4068:	9b06      	ldr	r3, [sp, #24]
    406a:	e7b2      	b.n	3fd2 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
    406c:	f1b8 0f02 	cmp.w	r8, #2
    4070:	d1fa      	bne.n	4068 <z_vprintk+0x298>
    4072:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
    4074:	4631      	mov	r1, r6
    4076:	2020      	movs	r0, #32
    4078:	e7f4      	b.n	4064 <z_vprintk+0x294>
					out((int)(*s++), ctx);
    407a:	4631      	mov	r1, r6
    407c:	9202      	str	r2, [sp, #8]
    407e:	47a8      	blx	r5
    4080:	4621      	mov	r1, r4
    4082:	9a02      	ldr	r2, [sp, #8]
    4084:	e6fa      	b.n	3e7c <z_vprintk+0xac>
						out(' ', ctx);
    4086:	4631      	mov	r1, r6
    4088:	2020      	movs	r0, #32
    408a:	47a8      	blx	r5
    408c:	3c01      	subs	r4, #1
    408e:	e702      	b.n	3e96 <z_vprintk+0xc6>
				out(c, ctx);
    4090:	4631      	mov	r1, r6
    4092:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    4094:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
    4098:	47a8      	blx	r5
    409a:	e6ff      	b.n	3e9c <z_vprintk+0xcc>
				length_mod = 0;
    409c:	465f      	mov	r7, fp
				padding = PAD_NONE;
    409e:	46d8      	mov	r8, fp
				min_width = -1;
    40a0:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    40a4:	f04f 0b01 	mov.w	fp, #1
    40a8:	e6ac      	b.n	3e04 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
    40aa:	f04f 0803 	mov.w	r8, #3
    40ae:	e6a9      	b.n	3e04 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    40b0:	f04f 0801 	mov.w	r8, #1
    40b4:	e6a6      	b.n	3e04 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
    40b6:	465c      	mov	r4, fp
			might_format = 0;
    40b8:	4683      	mov	fp, r0
    40ba:	e6a3      	b.n	3e04 <z_vprintk+0x34>

000040bc <printk>:
{
    40bc:	b40f      	push	{r0, r1, r2, r3}
    40be:	b507      	push	{r0, r1, r2, lr}
    40c0:	a904      	add	r1, sp, #16
    40c2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    40c6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    40c8:	f7fc fb6a 	bl	7a0 <vprintk>
}
    40cc:	b003      	add	sp, #12
    40ce:	f85d eb04 	ldr.w	lr, [sp], #4
    40d2:	b004      	add	sp, #16
    40d4:	4770      	bx	lr

000040d6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    40d6:	4770      	bx	lr

000040d8 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    40d8:	f7fd bde4 	b.w	1ca4 <SystemInit>

000040dc <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    40dc:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    40de:	7a5a      	ldrb	r2, [r3, #9]
    40e0:	b932      	cbnz	r2, 40f0 <get_status+0x14>
	if (data->ref > 0) {
    40e2:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    40e6:	2800      	cmp	r0, #0
    40e8:	bfcc      	ite	gt
    40ea:	2000      	movgt	r0, #0
    40ec:	2001      	movle	r0, #1
    40ee:	4770      	bx	lr
    40f0:	2002      	movs	r0, #2
}
    40f2:	4770      	bx	lr

000040f4 <clock_stop>:
	const struct nrf_clock_control_config *config =
    40f4:	6802      	ldr	r2, [r0, #0]
{
    40f6:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    40f8:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    40fa:	6884      	ldr	r4, [r0, #8]
    40fc:	f04f 0320 	mov.w	r3, #32
    4100:	f3ef 8611 	mrs	r6, BASEPRI
    4104:	f383 8811 	msr	BASEPRI, r3
    4108:	f3bf 8f6f 	isb	sy
	data->ref--;
    410c:	7a23      	ldrb	r3, [r4, #8]
    410e:	3b01      	subs	r3, #1
    4110:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    4112:	2b00      	cmp	r3, #0
	data->ref--;
    4114:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    4116:	d118      	bne.n	414a <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4118:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    411c:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    411e:	b983      	cbnz	r3, 4142 <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4120:	2201      	movs	r2, #1
    4122:	7aeb      	ldrb	r3, [r5, #11]
    4124:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4128:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    412a:	2200      	movs	r2, #0
    412c:	892b      	ldrh	r3, [r5, #8]
    412e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4132:	601a      	str	r2, [r3, #0]
		data->started = false;
    4134:	2000      	movs	r0, #0
    4136:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    4138:	f386 8811 	msr	BASEPRI, r6
    413c:	f3bf 8f6f 	isb	sy
}
    4140:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    4142:	4798      	blx	r3
    4144:	2800      	cmp	r0, #0
    4146:	d1eb      	bne.n	4120 <clock_stop+0x2c>
    4148:	e7f4      	b.n	4134 <clock_stop+0x40>
    414a:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    414e:	bfbc      	itt	lt
    4150:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    4152:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    4156:	e7ef      	b.n	4138 <clock_stop+0x44>

00004158 <clock_async_start>:
{
    4158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    415a:	6803      	ldr	r3, [r0, #0]
{
    415c:	4606      	mov	r6, r0
    415e:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
    4160:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    4162:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
    4164:	f04f 0320 	mov.w	r3, #32
    4168:	f3ef 8211 	mrs	r2, BASEPRI
    416c:	f383 8811 	msr	BASEPRI, r3
    4170:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    4174:	7a2b      	ldrb	r3, [r5, #8]
    4176:	3301      	adds	r3, #1
    4178:	b25b      	sxtb	r3, r3
    417a:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    417c:	f382 8811 	msr	BASEPRI, r2
    4180:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    4184:	7a6a      	ldrb	r2, [r5, #9]
    4186:	b132      	cbz	r2, 4196 <clock_async_start+0x3e>
		if (data) {
    4188:	b90c      	cbnz	r4, 418e <clock_async_start+0x36>
	return 0;
    418a:	2000      	movs	r0, #0
}
    418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    418e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4192:	4798      	blx	r3
    4194:	e7f9      	b.n	418a <clock_async_start+0x32>
		if (ref == 1) {
    4196:	2b01      	cmp	r3, #1
    4198:	d106      	bne.n	41a8 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    419a:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    419c:	b933      	cbnz	r3, 41ac <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    419e:	2201      	movs	r2, #1
    41a0:	7abb      	ldrb	r3, [r7, #10]
    41a2:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    41a6:	601a      	str	r2, [r3, #0]
		if (data) {
    41a8:	b94c      	cbnz	r4, 41be <clock_async_start+0x66>
    41aa:	e7ee      	b.n	418a <clock_async_start+0x32>
					config->start_handler(dev) : true;
    41ac:	4798      	blx	r3
    41ae:	2800      	cmp	r0, #0
    41b0:	d1f5      	bne.n	419e <clock_async_start+0x46>
			} else if (data) {
    41b2:	2c00      	cmp	r4, #0
    41b4:	d0e9      	beq.n	418a <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    41b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    41ba:	4630      	mov	r0, r6
    41bc:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    41be:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    41c0:	429c      	cmp	r4, r3
    41c2:	d00d      	beq.n	41e0 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    41c4:	b113      	cbz	r3, 41cc <clock_async_start+0x74>
	return node->next;
    41c6:	681b      	ldr	r3, [r3, #0]
	} while (item);
    41c8:	2b00      	cmp	r3, #0
    41ca:	d1f9      	bne.n	41c0 <clock_async_start+0x68>
	parent->next = child;
    41cc:	2000      	movs	r0, #0
    41ce:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    41d0:	686b      	ldr	r3, [r5, #4]
    41d2:	b913      	cbnz	r3, 41da <clock_async_start+0x82>
	list->head = node;
    41d4:	e9c5 4400 	strd	r4, r4, [r5]
    41d8:	e7d7      	b.n	418a <clock_async_start+0x32>
	parent->next = child;
    41da:	601c      	str	r4, [r3, #0]
	list->tail = node;
    41dc:	606c      	str	r4, [r5, #4]
    41de:	e7d5      	b.n	418c <clock_async_start+0x34>
				return -EALREADY;
    41e0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    41e4:	e7d2      	b.n	418c <clock_async_start+0x34>

000041e6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    41e6:	2200      	movs	r2, #0
    41e8:	f7ff bfb6 	b.w	4158 <clock_async_start>

000041ec <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    41ec:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    41ee:	2000      	movs	r0, #0
	list->tail = NULL;
    41f0:	e9c3 0000 	strd	r0, r0, [r3]
}
    41f4:	4770      	bx	lr

000041f6 <hfclk_init>:
{
    41f6:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    41f8:	2200      	movs	r2, #0
{
    41fa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    41fc:	2101      	movs	r1, #1
    41fe:	2005      	movs	r0, #5
    4200:	f7fd f82a 	bl	1258 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4204:	2005      	movs	r0, #5
    4206:	f7fd f817 	bl	1238 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    420a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    420e:	2202      	movs	r2, #2
    4210:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    4214:	2203      	movs	r2, #3
	list->head = NULL;
    4216:	2000      	movs	r0, #0
    4218:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    421c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    421e:	e9c3 0000 	strd	r0, r0, [r3]
}
    4222:	bd10      	pop	{r4, pc}

00004224 <clkstarted_handle>:
{
    4224:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    4226:	6884      	ldr	r4, [r0, #8]
{
    4228:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
    422a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    422c:	b12b      	cbz	r3, 423a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    422e:	6861      	ldr	r1, [r4, #4]
	return node->next;
    4230:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4232:	428b      	cmp	r3, r1
	list->head = node;
    4234:	6022      	str	r2, [r4, #0]
	list->tail = node;
    4236:	bf08      	it	eq
    4238:	6062      	streq	r2, [r4, #4]
	data->started = true;
    423a:	2201      	movs	r2, #1
    423c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    423e:	b903      	cbnz	r3, 4242 <clkstarted_handle+0x1e>
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    4242:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    4246:	4628      	mov	r0, r5
    4248:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    424a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    424c:	2b00      	cmp	r3, #0
    424e:	d0f7      	beq.n	4240 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4250:	6861      	ldr	r1, [r4, #4]
	return node->next;
    4252:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4254:	428b      	cmp	r3, r1
	list->head = node;
    4256:	6022      	str	r2, [r4, #0]
	list->tail = node;
    4258:	bf08      	it	eq
    425a:	6062      	streq	r2, [r4, #4]
    425c:	e7ef      	b.n	423e <clkstarted_handle+0x1a>

0000425e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    425e:	4770      	bx	lr

00004260 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4260:	4770      	bx	lr

00004262 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    4262:	2300      	movs	r3, #0
{
    4264:	b507      	push	{r0, r1, r2, lr}
	mbedtls_platform_context platform_ctx = {0};
    4266:	a802      	add	r0, sp, #8
    4268:	f800 3d04 	strb.w	r3, [r0, #-4]!
	err = mbedtls_platform_setup(&platform_ctx);
    426c:	f7fe ff62 	bl	3134 <mbedtls_platform_setup>
}
    4270:	b003      	add	sp, #12
    4272:	f85d fb04 	ldr.w	pc, [sp], #4

00004276 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    4276:	2990      	cmp	r1, #144	; 0x90
{
    4278:	b508      	push	{r3, lr}
    427a:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    427c:	d139      	bne.n	42f2 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    427e:	460a      	mov	r2, r1
    4280:	4601      	mov	r1, r0
    4282:	2000      	movs	r0, #0
    4284:	f7fe ff62 	bl	314c <mbedtls_hardware_poll>
}
    4288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    428c:	4671      	mov	r1, lr
    428e:	4672      	mov	r2, lr
    4290:	4673      	mov	r3, lr
    4292:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    4296:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    429a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    429e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    42a2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    42a6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    42aa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    42ae:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    42b2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    42b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    42ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    42be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    42c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    42c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    42ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    42ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    42d2:	f38e 8c00 	msr	CPSR_fs, lr
    42d6:	b410      	push	{r4}
    42d8:	eef1 ca10 	vmrs	ip, fpscr
    42dc:	f64f 7460 	movw	r4, #65376	; 0xff60
    42e0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    42e4:	ea0c 0c04 	and.w	ip, ip, r4
    42e8:	eee1 ca10 	vmsr	fpscr, ip
    42ec:	bc10      	pop	{r4}
    42ee:	46f4      	mov	ip, lr
    42f0:	4774      	bxns	lr
		return -EINVAL;
    42f2:	f06f 0015 	mvn.w	r0, #21
    42f6:	e7c7      	b.n	4288 <__acle_se_spm_request_random_number+0x12>

000042f8 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
    42f8:	f000 021f 	and.w	r2, r0, #31
    42fc:	211f      	movs	r1, #31
    42fe:	2004      	movs	r0, #4
    4300:	f7fc be2e 	b.w	f60 <adp536x_reg_write_mask>

00004304 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
    4304:	f000 0207 	and.w	r2, r0, #7
    4308:	2107      	movs	r1, #7
    430a:	2002      	movs	r0, #2
    430c:	f7fc be28 	b.w	f60 <adp536x_reg_write_mask>

00004310 <adp536x_charging_enable>:
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
    4310:	4602      	mov	r2, r0
    4312:	2101      	movs	r1, #1
    4314:	2007      	movs	r0, #7
    4316:	f7fc be23 	b.w	f60 <adp536x_reg_write_mask>

0000431a <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
    431a:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
    431c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    4320:	21e0      	movs	r1, #224	; 0xe0
    4322:	2015      	movs	r0, #21
    4324:	f7fc be1c 	b.w	f60 <adp536x_reg_write_mask>

00004328 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
    4328:	2218      	movs	r2, #24
    432a:	213f      	movs	r1, #63	; 0x3f
    432c:	202a      	movs	r0, #42	; 0x2a
    432e:	f7fc be17 	b.w	f60 <adp536x_reg_write_mask>

00004332 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
    4332:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
    4334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    4338:	2102      	movs	r1, #2
    433a:	2029      	movs	r0, #41	; 0x29
    433c:	f7fc be10 	b.w	f60 <adp536x_reg_write_mask>

00004340 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
    4340:	2213      	movs	r2, #19
    4342:	213f      	movs	r1, #63	; 0x3f
    4344:	202c      	movs	r0, #44	; 0x2c
    4346:	f7fc be0b 	b.w	f60 <adp536x_reg_write_mask>

0000434a <adp536x_buckbst_enable>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
    434a:	4602      	mov	r2, r0
    434c:	2101      	movs	r1, #1
    434e:	202b      	movs	r0, #43	; 0x2b
    4350:	f7fc be06 	b.w	f60 <adp536x_reg_write_mask>

00004354 <abort_function>:
{
    4354:	e7fe      	b.n	4354 <abort_function>

00004356 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    4356:	f7fc bf1f 	b.w	1198 <z_arm_bus_fault>

0000435a <irq_target_state_set>:
 * @param secure_state 1 if target state is Secure, 0 otherwise.
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
    435a:	b243      	sxtb	r3, r0
	if (secure_state) {
    435c:	b1a9      	cbz	r1, 438a <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    435e:	2b00      	cmp	r3, #0
    4360:	db12      	blt.n	4388 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4362:	2101      	movs	r1, #1
    4364:	095b      	lsrs	r3, r3, #5
    4366:	009b      	lsls	r3, r3, #2
    4368:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    436c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4370:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    4374:	f000 001f 	and.w	r0, r0, #31
    4378:	fa01 f000 	lsl.w	r0, r1, r0
    437c:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4380:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    4384:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    4388:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    438a:	2b00      	cmp	r3, #0
    438c:	dbfc      	blt.n	4388 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    438e:	2201      	movs	r2, #1
    4390:	095b      	lsrs	r3, r3, #5
    4392:	009b      	lsls	r3, r3, #2
    4394:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4398:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    439c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    43a0:	f000 001f 	and.w	r0, r0, #31
    43a4:	fa02 f000 	lsl.w	r0, r2, r0
    43a8:	4308      	orrs	r0, r1
    43aa:	e7e9      	b.n	4380 <irq_target_state_set+0x26>

000043ac <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    43ac:	f000 b916 	b.w	45dc <z_fatal_error>

000043b0 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    43b0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    43b2:	6800      	ldr	r0, [r0, #0]
    43b4:	f000 b912 	b.w	45dc <z_fatal_error>

000043b8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    43b8:	b508      	push	{r3, lr}
	handler();
    43ba:	f7fc feff 	bl	11bc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    43be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    43c2:	f7fc be95 	b.w	10f0 <z_arm_exc_exit>

000043c6 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    43c6:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    43c8:	2100      	movs	r1, #0
    43ca:	a801      	add	r0, sp, #4
    43cc:	f7fd fa6e 	bl	18ac <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    43d0:	b003      	add	sp, #12
    43d2:	f85d fb04 	ldr.w	pc, [sp], #4

000043d6 <mpu_configure_region>:
{
    43d6:	b530      	push	{r4, r5, lr}
    43d8:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    43da:	f89d 2008 	ldrb.w	r2, [sp, #8]
    43de:	890d      	ldrh	r5, [r1, #8]
	region_conf.base = new_region->start;
    43e0:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    43e2:	684c      	ldr	r4, [r1, #4]
	p_attr->mair_idx = attr->mair_idx;
    43e4:	8949      	ldrh	r1, [r1, #10]
	p_attr->rbar = attr->rbar &
    43e6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    43ea:	f361 1247 	bfi	r2, r1, #5, #3
	region_conf.base = new_region->start;
    43ee:	9300      	str	r3, [sp, #0]
    43f0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    43f4:	f023 031f 	bic.w	r3, r3, #31
    43f8:	1e62      	subs	r2, r4, #1
    43fa:	4413      	add	r3, r2
    43fc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    4400:	280f      	cmp	r0, #15
    4402:	9303      	str	r3, [sp, #12]
    4404:	4604      	mov	r4, r0
    4406:	d805      	bhi.n	4414 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    4408:	4669      	mov	r1, sp
    440a:	f7fd f909 	bl	1620 <region_init>
}
    440e:	4620      	mov	r0, r4
    4410:	b005      	add	sp, #20
    4412:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    4414:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    4418:	e7f9      	b.n	440e <mpu_configure_region+0x38>

0000441a <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    441a:	3801      	subs	r0, #1
    441c:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    441e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4422:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4426:	4293      	cmp	r3, r2
    4428:	d102      	bne.n	4430 <strcmp+0x16>
    442a:	2b00      	cmp	r3, #0
    442c:	d1f7      	bne.n	441e <strcmp+0x4>
    442e:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4430:	1a98      	subs	r0, r3, r2
    4432:	4770      	bx	lr

00004434 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    4434:	1a43      	subs	r3, r0, r1
    4436:	4293      	cmp	r3, r2
{
    4438:	b510      	push	{r4, lr}
    443a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    443e:	d308      	bcc.n	4452 <memmove+0x1e>
	char *dest = d;
    4440:	4602      	mov	r2, r0
    4442:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    4444:	429a      	cmp	r2, r3
    4446:	d00b      	beq.n	4460 <memmove+0x2c>
			*dest = *src;
    4448:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    444c:	f802 4b01 	strb.w	r4, [r2], #1
    4450:	e7f8      	b.n	4444 <memmove+0x10>
    4452:	440a      	add	r2, r1
			dest[n] = src[n];
    4454:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    4458:	428a      	cmp	r2, r1
			dest[n] = src[n];
    445a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    445e:	d1f9      	bne.n	4454 <memmove+0x20>
			n--;
		}
	}

	return d;
}
    4460:	bd10      	pop	{r4, pc}

00004462 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4462:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4464:	ea81 0400 	eor.w	r4, r1, r0
    4468:	07a5      	lsls	r5, r4, #30
    446a:	4603      	mov	r3, r0
    446c:	d00b      	beq.n	4486 <memcpy+0x24>
    446e:	3b01      	subs	r3, #1
    4470:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4472:	4291      	cmp	r1, r2
    4474:	d11d      	bne.n	44b2 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4476:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4478:	2a00      	cmp	r2, #0
    447a:	d0fc      	beq.n	4476 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    447c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4480:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4482:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    4486:	079c      	lsls	r4, r3, #30
    4488:	d1f6      	bne.n	4478 <memcpy+0x16>
    448a:	460c      	mov	r4, r1
    448c:	1f1d      	subs	r5, r3, #4
    448e:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
    4490:	1b3e      	subs	r6, r7, r4
    4492:	2e03      	cmp	r6, #3
    4494:	d808      	bhi.n	44a8 <memcpy+0x46>
    4496:	f06f 0503 	mvn.w	r5, #3
    449a:	0894      	lsrs	r4, r2, #2
    449c:	fb05 2204 	mla	r2, r5, r4, r2
    44a0:	00a4      	lsls	r4, r4, #2
    44a2:	4423      	add	r3, r4
    44a4:	4421      	add	r1, r4
    44a6:	e7e2      	b.n	446e <memcpy+0xc>
			*(d_word++) = *(s_word++);
    44a8:	f854 6b04 	ldr.w	r6, [r4], #4
    44ac:	f845 6f04 	str.w	r6, [r5, #4]!
    44b0:	e7ee      	b.n	4490 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    44b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    44b6:	f803 4f01 	strb.w	r4, [r3, #1]!
    44ba:	e7da      	b.n	4472 <memcpy+0x10>

000044bc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    44bc:	4603      	mov	r3, r0
{
    44be:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
    44c0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    44c2:	079c      	lsls	r4, r3, #30
    44c4:	d10f      	bne.n	44e6 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    44c6:	461d      	mov	r5, r3
	c_word |= c_word << 8;
    44c8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    44cc:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
    44d0:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
    44d2:	1b7e      	subs	r6, r7, r5
    44d4:	2e03      	cmp	r6, #3
    44d6:	d80c      	bhi.n	44f2 <memset+0x36>
    44d8:	0894      	lsrs	r4, r2, #2
    44da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    44de:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    44e0:	429c      	cmp	r4, r3
    44e2:	d109      	bne.n	44f8 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    44e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    44e6:	2a00      	cmp	r2, #0
    44e8:	d0fc      	beq.n	44e4 <memset+0x28>
		*(d_byte++) = c_byte;
    44ea:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    44ee:	3a01      	subs	r2, #1
    44f0:	e7e7      	b.n	44c2 <memset+0x6>
		*(d_word++) = c_word;
    44f2:	f845 4b04 	str.w	r4, [r5], #4
    44f6:	e7ec      	b.n	44d2 <memset+0x16>
		*(d_byte++) = c_byte;
    44f8:	f804 1b01 	strb.w	r1, [r4], #1
    44fc:	e7f0      	b.n	44e0 <memset+0x24>

000044fe <_stdout_hook_default>:
}
    44fe:	f04f 30ff 	mov.w	r0, #4294967295
    4502:	4770      	bx	lr

00004504 <i2c_nrfx_twim_configure>:
	return dev->config->config_info;
    4504:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
    4506:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
    4508:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    450a:	d405      	bmi.n	4518 <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    450c:	f3c1 0242 	ubfx	r2, r1, #1, #3
    4510:	2a01      	cmp	r2, #1
    4512:	d004      	beq.n	451e <i2c_nrfx_twim_configure+0x1a>
    4514:	2a02      	cmp	r2, #2
    4516:	d00b      	beq.n	4530 <i2c_nrfx_twim_configure+0x2c>
		return -EINVAL;
    4518:	f06f 0015 	mvn.w	r0, #21
}
    451c:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
    451e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    4528:	6883      	ldr	r3, [r0, #8]
	return 0;
    452a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    452c:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    452e:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    4536:	e7f5      	b.n	4524 <i2c_nrfx_twim_configure+0x20>

00004538 <uarte_nrfx_config_get>:
{
    4538:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    453a:	6882      	ldr	r2, [r0, #8]
    453c:	e892 0003 	ldmia.w	r2, {r0, r1}
    4540:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4544:	2000      	movs	r0, #0
    4546:	4770      	bx	lr

00004548 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    4548:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    454a:	689b      	ldr	r3, [r3, #8]
    454c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    454e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    4552:	b118      	cbz	r0, 455c <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4554:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4558:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    455c:	4770      	bx	lr

0000455e <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    455e:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    4560:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    4562:	689b      	ldr	r3, [r3, #8]
    4564:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4566:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    456a:	b138      	cbz	r0, 457c <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    456c:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    456e:	2000      	movs	r0, #0
    4570:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4572:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4574:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4578:	601a      	str	r2, [r3, #0]
	return 0;
    457a:	4770      	bx	lr
		return -1;
    457c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4580:	4770      	bx	lr

00004582 <uarte_nrfx_poll_out>:
{
    4582:	b082      	sub	sp, #8
    4584:	aa02      	add	r2, sp, #8
    4586:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    458a:	2100      	movs	r1, #0
	return dev->config->config_info;
    458c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    458e:	689b      	ldr	r3, [r3, #8]
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4596:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    459a:	2201      	movs	r2, #1
    459c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45a0:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45a2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    45a6:	2900      	cmp	r1, #0
    45a8:	d0fb      	beq.n	45a2 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45aa:	60da      	str	r2, [r3, #12]
}
    45ac:	b002      	add	sp, #8
    45ae:	4770      	bx	lr

000045b0 <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    45b0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    45b2:	f7fc fd07 	bl	fc4 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    45b6:	f7fc fd85 	bl	10c4 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    45ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    45be:	f7fe be7d 	b.w	32bc <nrf_cc310_platform_init_no_rng>

000045c2 <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    45c2:	4700      	bx	r0

000045c4 <z_arch_system_halt>:
	__asm__ volatile(
    45c4:	f04f 0220 	mov.w	r2, #32
    45c8:	f3ef 8311 	mrs	r3, BASEPRI
    45cc:	f382 8811 	msr	BASEPRI, r2
    45d0:	f3bf 8f6f 	isb	sy
    45d4:	e7fe      	b.n	45d4 <z_arch_system_halt+0x10>

000045d6 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    45d6:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    45d8:	f7ff fff4 	bl	45c4 <z_arch_system_halt>

000045dc <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    45dc:	b570      	push	{r4, r5, r6, lr}
    45de:	4605      	mov	r5, r0
    45e0:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    45e2:	f7fe fad3 	bl	2b8c <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    45e6:	4631      	mov	r1, r6
    45e8:	4604      	mov	r4, r0
    45ea:	4628      	mov	r0, r5
    45ec:	f7ff fff3 	bl	45d6 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    45f0:	4620      	mov	r0, r4
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    45f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45f6:	f7fc bfc3 	b.w	1580 <z_impl_k_thread_abort>

000045fa <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    45fa:	f7ff be31 	b.w	4260 <z_clock_idle_exit>

000045fe <k_mem_slab_init>:
{
    45fe:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4600:	2400      	movs	r4, #0
	slab->block_size = block_size;
    4602:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    4606:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    460a:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    460c:	42a3      	cmp	r3, r4
    460e:	d102      	bne.n	4616 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    4610:	e9c0 0000 	strd	r0, r0, [r0]
}
    4614:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4616:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4618:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    461a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    461c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    461e:	4411      	add	r1, r2
    4620:	e7f4      	b.n	460c <k_mem_slab_init+0xe>

00004622 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    4622:	2300      	movs	r3, #0
    4624:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    4628:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    462c:	4770      	bx	lr

0000462e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    462e:	7b43      	ldrb	r3, [r0, #13]
    4630:	06db      	lsls	r3, r3, #27
    4632:	bf03      	ittte	eq
    4634:	6980      	ldreq	r0, [r0, #24]
    4636:	fab0 f080 	clzeq	r0, r0
    463a:	0940      	lsreq	r0, r0, #5
    463c:	2000      	movne	r0, #0
}
    463e:	4770      	bx	lr

00004640 <z_unpend_thread_no_timeout>:
{
    4640:	b538      	push	{r3, r4, r5, lr}
    4642:	4604      	mov	r4, r0
    4644:	f04f 0320 	mov.w	r3, #32
    4648:	f3ef 8511 	mrs	r5, BASEPRI
    464c:	f383 8811 	msr	BASEPRI, r3
    4650:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4654:	4601      	mov	r1, r0
    4656:	6880      	ldr	r0, [r0, #8]
    4658:	f7fe f8cc 	bl	27f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    465c:	7b63      	ldrb	r3, [r4, #13]
    465e:	f023 0302 	bic.w	r3, r3, #2
    4662:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    4664:	f385 8811 	msr	BASEPRI, r5
    4668:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    466c:	2300      	movs	r3, #0
    466e:	60a3      	str	r3, [r4, #8]
}
    4670:	bd38      	pop	{r3, r4, r5, pc}

00004672 <z_reschedule>:
{
    4672:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4674:	b939      	cbnz	r1, 4686 <z_reschedule+0x14>
    4676:	f7fe f855 	bl	2724 <resched.part.15>
	if (resched(key.key)) {
    467a:	b120      	cbz	r0, 4686 <z_reschedule+0x14>
}
    467c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4680:	4608      	mov	r0, r1
    4682:	f7fc bdbf 	b.w	1204 <z_arch_swap>
    4686:	f381 8811 	msr	BASEPRI, r1
    468a:	f3bf 8f6f 	isb	sy
    468e:	bd08      	pop	{r3, pc}

00004690 <z_reschedule_irqlock>:
{
    4690:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    4692:	4602      	mov	r2, r0
    4694:	b938      	cbnz	r0, 46a6 <z_reschedule_irqlock+0x16>
    4696:	f7fe f845 	bl	2724 <resched.part.15>
	if (resched(key)) {
    469a:	b120      	cbz	r0, 46a6 <z_reschedule_irqlock+0x16>
}
    469c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46a0:	4610      	mov	r0, r2
    46a2:	f7fc bdaf 	b.w	1204 <z_arch_swap>
    46a6:	f382 8811 	msr	BASEPRI, r2
    46aa:	f3bf 8f6f 	isb	sy
    46ae:	bd08      	pop	{r3, pc}

000046b0 <z_reschedule_unlocked>:
	__asm__ volatile(
    46b0:	f04f 0320 	mov.w	r3, #32
    46b4:	f3ef 8011 	mrs	r0, BASEPRI
    46b8:	f383 8811 	msr	BASEPRI, r3
    46bc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    46c0:	f7ff bfe6 	b.w	4690 <z_reschedule_irqlock>

000046c4 <z_priq_dumb_best>:
	return list->head == list;
    46c4:	6803      	ldr	r3, [r0, #0]
}
    46c6:	4298      	cmp	r0, r3
    46c8:	bf14      	ite	ne
    46ca:	4618      	movne	r0, r3
    46cc:	2000      	moveq	r0, #0
    46ce:	4770      	bx	lr

000046d0 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    46d0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    46d8:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    46dc:	b1cb      	cbz	r3, 4712 <z_thread_timeout+0x42>
    46de:	f04f 0320 	mov.w	r3, #32
    46e2:	f3ef 8611 	mrs	r6, BASEPRI
    46e6:	f383 8811 	msr	BASEPRI, r3
    46ea:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    46ee:	4629      	mov	r1, r5
    46f0:	f850 0c10 	ldr.w	r0, [r0, #-16]
    46f4:	f7fe f87e 	bl	27f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    46f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    46fc:	f023 0302 	bic.w	r3, r3, #2
    4700:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    4704:	f386 8811 	msr	BASEPRI, r6
    4708:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    470c:	2300      	movs	r3, #0
    470e:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4712:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    4716:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4718:	f023 0314 	bic.w	r3, r3, #20
    471c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    4720:	f7ff ff85 	bl	462e <z_is_thread_ready>
    4724:	b120      	cbz	r0, 4730 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    4726:	4628      	mov	r0, r5
}
    4728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    472c:	f7fe b8b2 	b.w	2894 <z_add_thread_to_ready_q>
    4730:	bd70      	pop	{r4, r5, r6, pc}

00004732 <z_unpend_first_thread>:
{
    4732:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4734:	f04f 0320 	mov.w	r3, #32
    4738:	f3ef 8211 	mrs	r2, BASEPRI
    473c:	f383 8811 	msr	BASEPRI, r3
    4740:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4744:	f7ff ffbe 	bl	46c4 <z_priq_dumb_best>
    4748:	4604      	mov	r4, r0
	__asm__ volatile(
    474a:	f382 8811 	msr	BASEPRI, r2
    474e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4752:	b1c8      	cbz	r0, 4788 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    4754:	f04f 0320 	mov.w	r3, #32
    4758:	f3ef 8511 	mrs	r5, BASEPRI
    475c:	f383 8811 	msr	BASEPRI, r3
    4760:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4764:	4601      	mov	r1, r0
    4766:	6880      	ldr	r0, [r0, #8]
    4768:	f7fe f844 	bl	27f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    476c:	7b63      	ldrb	r3, [r4, #13]
    476e:	f023 0302 	bic.w	r3, r3, #2
    4772:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    4774:	f385 8811 	msr	BASEPRI, r5
    4778:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    477c:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    477e:	f104 0018 	add.w	r0, r4, #24
    4782:	60a3      	str	r3, [r4, #8]
    4784:	f000 f832 	bl	47ec <z_abort_timeout>
}
    4788:	4620      	mov	r0, r4
    478a:	bd38      	pop	{r3, r4, r5, pc}

0000478c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    478c:	7b43      	ldrb	r3, [r0, #13]
    478e:	06db      	lsls	r3, r3, #27
    4790:	bf03      	ittte	eq
    4792:	6980      	ldreq	r0, [r0, #24]
    4794:	fab0 f080 	clzeq	r0, r0
    4798:	0940      	lsreq	r0, r0, #5
    479a:	2000      	movne	r0, #0
}
    479c:	4770      	bx	lr

0000479e <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    479e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    47a0:	b510      	push	{r4, lr}
    47a2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    47a4:	b103      	cbz	r3, 47a8 <z_thread_single_abort+0xa>
		thread->fn_abort();
    47a6:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    47a8:	4620      	mov	r0, r4
    47aa:	f7ff ffef 	bl	478c <z_is_thread_ready>
    47ae:	b138      	cbz	r0, 47c0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    47b0:	4620      	mov	r0, r4
    47b2:	f7fe f921 	bl	29f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    47b6:	7b63      	ldrb	r3, [r4, #13]
    47b8:	f043 0308 	orr.w	r3, r3, #8
    47bc:	7363      	strb	r3, [r4, #13]
}
    47be:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    47c0:	7b63      	ldrb	r3, [r4, #13]
    47c2:	079b      	lsls	r3, r3, #30
    47c4:	d502      	bpl.n	47cc <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    47c6:	4620      	mov	r0, r4
    47c8:	f7ff ff3a 	bl	4640 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    47cc:	69a3      	ldr	r3, [r4, #24]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d0f1      	beq.n	47b6 <z_thread_single_abort+0x18>
    47d2:	f104 0018 	add.w	r0, r4, #24
    47d6:	f000 f809 	bl	47ec <z_abort_timeout>
    47da:	e7ec      	b.n	47b6 <z_thread_single_abort+0x18>

000047dc <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    47dc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    47de:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    47e0:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    47e2:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    47e4:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    47e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    47ea:	4770      	bx	lr

000047ec <z_abort_timeout>:
{
    47ec:	b510      	push	{r4, lr}
	__asm__ volatile(
    47ee:	f04f 0220 	mov.w	r2, #32
    47f2:	f3ef 8411 	mrs	r4, BASEPRI
    47f6:	f382 8811 	msr	BASEPRI, r2
    47fa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    47fe:	6803      	ldr	r3, [r0, #0]
    4800:	b13b      	cbz	r3, 4812 <z_abort_timeout+0x26>
			remove_timeout(to);
    4802:	f7fe fab7 	bl	2d74 <remove_timeout>
			ret = 0;
    4806:	2000      	movs	r0, #0
	__asm__ volatile(
    4808:	f384 8811 	msr	BASEPRI, r4
    480c:	f3bf 8f6f 	isb	sy
}
    4810:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4812:	f06f 0015 	mvn.w	r0, #21
    4816:	e7f7      	b.n	4808 <z_abort_timeout+0x1c>

00004818 <z_get_next_timeout_expiry>:
{
    4818:	b510      	push	{r4, lr}
	__asm__ volatile(
    481a:	f04f 0320 	mov.w	r3, #32
    481e:	f3ef 8411 	mrs	r4, BASEPRI
    4822:	f383 8811 	msr	BASEPRI, r3
    4826:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    482a:	f7fe fab9 	bl	2da0 <next_timeout>
	__asm__ volatile(
    482e:	f384 8811 	msr	BASEPRI, r4
    4832:	f3bf 8f6f 	isb	sy
}
    4836:	bd10      	pop	{r4, pc}

00004838 <z_set_timeout_expiry>:
{
    4838:	b570      	push	{r4, r5, r6, lr}
    483a:	4604      	mov	r4, r0
    483c:	460e      	mov	r6, r1
	__asm__ volatile(
    483e:	f04f 0320 	mov.w	r3, #32
    4842:	f3ef 8511 	mrs	r5, BASEPRI
    4846:	f383 8811 	msr	BASEPRI, r3
    484a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    484e:	f7fe faa7 	bl	2da0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4852:	2801      	cmp	r0, #1
    4854:	dd05      	ble.n	4862 <z_set_timeout_expiry+0x2a>
    4856:	42a0      	cmp	r0, r4
    4858:	dd03      	ble.n	4862 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    485a:	4631      	mov	r1, r6
    485c:	4620      	mov	r0, r4
    485e:	f7fc f879 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    4862:	f385 8811 	msr	BASEPRI, r5
    4866:	f3bf 8f6f 	isb	sy
}
    486a:	bd70      	pop	{r4, r5, r6, pc}

0000486c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    486c:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

000053e0 <spm_request_read-0x2c00>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bec8 	b.w	d78 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 bf1c 	b.w	e28 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fc b93f 	b.w	4276 <__acle_se_spm_request_random_number>
	...
