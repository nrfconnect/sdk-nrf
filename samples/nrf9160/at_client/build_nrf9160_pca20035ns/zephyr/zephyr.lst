
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20027fa0 	.word	0x20027fa0
    c004:	0000de9d 	.word	0x0000de9d
    c008:	00023f87 	.word	0x00023f87
    c00c:	0000dc11 	.word	0x0000dc11
    c010:	0000dc11 	.word	0x0000dc11
    c014:	0000dc11 	.word	0x0000dc11
    c018:	0000dc11 	.word	0x0000dc11
    c01c:	0000dc11 	.word	0x0000dc11
    c020:	0000dc11 	.word	0x0000dc11
    c024:	0000dc11 	.word	0x0000dc11
    c028:	0000dc11 	.word	0x0000dc11
    c02c:	0000dbd9 	.word	0x0000dbd9
    c030:	0000dc11 	.word	0x0000dc11
    c034:	0000dc11 	.word	0x0000dc11
    c038:	0000db29 	.word	0x0000db29
    c03c:	0000d81d 	.word	0x0000d81d

0000c040 <_irq_vector_table>:
    c040:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c050:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c060:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c070:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c080:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c090:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c0a0:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c0b0:	0000fe25 000247cf 0000dc3d 0000dc3d     %....G..=...=...
    c0c0:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c0d0:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c0e0:	0000dc3d 0000dc3d 000247f1 0000dc3d     =...=....G..=...
    c0f0:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c100:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c110:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c120:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c130:	0000dc3d 0000dc3d 0000dc3d 0000dc3d     =...=...=...=...
    c140:	0000dc3d                                =...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001c118     ...(L....[......
    c210:	00000001 0000c000 20028ce0 000105ad     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_ldivmod>:
    c220:	b97b      	cbnz	r3, c242 <__aeabi_ldivmod+0x22>
    c222:	b972      	cbnz	r2, c242 <__aeabi_ldivmod+0x22>
    c224:	2900      	cmp	r1, #0
    c226:	bfbe      	ittt	lt
    c228:	2000      	movlt	r0, #0
    c22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c22e:	e006      	blt.n	c23e <__aeabi_ldivmod+0x1e>
    c230:	bf08      	it	eq
    c232:	2800      	cmpeq	r0, #0
    c234:	bf1c      	itt	ne
    c236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c23a:	f04f 30ff 	movne.w	r0, #4294967295
    c23e:	f000 b9c7 	b.w	c5d0 <__aeabi_idiv0>
    c242:	f1ad 0c08 	sub.w	ip, sp, #8
    c246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c24a:	2900      	cmp	r1, #0
    c24c:	db09      	blt.n	c262 <__aeabi_ldivmod+0x42>
    c24e:	2b00      	cmp	r3, #0
    c250:	db1a      	blt.n	c288 <__aeabi_ldivmod+0x68>
    c252:	f000 f84d 	bl	c2f0 <__udivmoddi4>
    c256:	f8dd e004 	ldr.w	lr, [sp, #4]
    c25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c25e:	b004      	add	sp, #16
    c260:	4770      	bx	lr
    c262:	4240      	negs	r0, r0
    c264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c268:	2b00      	cmp	r3, #0
    c26a:	db1b      	blt.n	c2a4 <__aeabi_ldivmod+0x84>
    c26c:	f000 f840 	bl	c2f0 <__udivmoddi4>
    c270:	f8dd e004 	ldr.w	lr, [sp, #4]
    c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c278:	b004      	add	sp, #16
    c27a:	4240      	negs	r0, r0
    c27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c280:	4252      	negs	r2, r2
    c282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c286:	4770      	bx	lr
    c288:	4252      	negs	r2, r2
    c28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c28e:	f000 f82f 	bl	c2f0 <__udivmoddi4>
    c292:	f8dd e004 	ldr.w	lr, [sp, #4]
    c296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c29a:	b004      	add	sp, #16
    c29c:	4240      	negs	r0, r0
    c29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2a2:	4770      	bx	lr
    c2a4:	4252      	negs	r2, r2
    c2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2aa:	f000 f821 	bl	c2f0 <__udivmoddi4>
    c2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2b6:	b004      	add	sp, #16
    c2b8:	4252      	negs	r2, r2
    c2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2be:	4770      	bx	lr

0000c2c0 <__aeabi_uldivmod>:
    c2c0:	b953      	cbnz	r3, c2d8 <__aeabi_uldivmod+0x18>
    c2c2:	b94a      	cbnz	r2, c2d8 <__aeabi_uldivmod+0x18>
    c2c4:	2900      	cmp	r1, #0
    c2c6:	bf08      	it	eq
    c2c8:	2800      	cmpeq	r0, #0
    c2ca:	bf1c      	itt	ne
    c2cc:	f04f 31ff 	movne.w	r1, #4294967295
    c2d0:	f04f 30ff 	movne.w	r0, #4294967295
    c2d4:	f000 b97c 	b.w	c5d0 <__aeabi_idiv0>
    c2d8:	f1ad 0c08 	sub.w	ip, sp, #8
    c2dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c2e0:	f000 f806 	bl	c2f0 <__udivmoddi4>
    c2e4:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2ec:	b004      	add	sp, #16
    c2ee:	4770      	bx	lr

0000c2f0 <__udivmoddi4>:
    c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2f4:	468c      	mov	ip, r1
    c2f6:	9d08      	ldr	r5, [sp, #32]
    c2f8:	4604      	mov	r4, r0
    c2fa:	468a      	mov	sl, r1
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d14a      	bne.n	c396 <__udivmoddi4+0xa6>
    c300:	428a      	cmp	r2, r1
    c302:	4617      	mov	r7, r2
    c304:	d962      	bls.n	c3cc <__udivmoddi4+0xdc>
    c306:	fab2 f682 	clz	r6, r2
    c30a:	b14e      	cbz	r6, c320 <__udivmoddi4+0x30>
    c30c:	f1c6 0e20 	rsb	lr, r6, #32
    c310:	fa01 f306 	lsl.w	r3, r1, r6
    c314:	40b7      	lsls	r7, r6
    c316:	40b4      	lsls	r4, r6
    c318:	fa20 fe0e 	lsr.w	lr, r0, lr
    c31c:	ea4e 0a03 	orr.w	sl, lr, r3
    c320:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c324:	0c23      	lsrs	r3, r4, #16
    c326:	fa1f f987 	uxth.w	r9, r7
    c32a:	fbba fef8 	udiv	lr, sl, r8
    c32e:	fb08 aa1e 	mls	sl, r8, lr, sl
    c332:	fb0e f209 	mul.w	r2, lr, r9
    c336:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c33a:	429a      	cmp	r2, r3
    c33c:	d90b      	bls.n	c356 <__udivmoddi4+0x66>
    c33e:	18fb      	adds	r3, r7, r3
    c340:	f10e 31ff 	add.w	r1, lr, #4294967295
    c344:	bf2c      	ite	cs
    c346:	2001      	movcs	r0, #1
    c348:	2000      	movcc	r0, #0
    c34a:	429a      	cmp	r2, r3
    c34c:	d902      	bls.n	c354 <__udivmoddi4+0x64>
    c34e:	2800      	cmp	r0, #0
    c350:	f000 812a 	beq.w	c5a8 <__udivmoddi4+0x2b8>
    c354:	468e      	mov	lr, r1
    c356:	1a9a      	subs	r2, r3, r2
    c358:	b2a3      	uxth	r3, r4
    c35a:	fbb2 f0f8 	udiv	r0, r2, r8
    c35e:	fb08 2210 	mls	r2, r8, r0, r2
    c362:	fb00 f909 	mul.w	r9, r0, r9
    c366:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c36a:	45a1      	cmp	r9, r4
    c36c:	d907      	bls.n	c37e <__udivmoddi4+0x8e>
    c36e:	193c      	adds	r4, r7, r4
    c370:	f100 33ff 	add.w	r3, r0, #4294967295
    c374:	d202      	bcs.n	c37c <__udivmoddi4+0x8c>
    c376:	45a1      	cmp	r9, r4
    c378:	f200 8110 	bhi.w	c59c <__udivmoddi4+0x2ac>
    c37c:	4618      	mov	r0, r3
    c37e:	eba4 0409 	sub.w	r4, r4, r9
    c382:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c386:	2100      	movs	r1, #0
    c388:	b11d      	cbz	r5, c392 <__udivmoddi4+0xa2>
    c38a:	40f4      	lsrs	r4, r6
    c38c:	2300      	movs	r3, #0
    c38e:	e9c5 4300 	strd	r4, r3, [r5]
    c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c396:	428b      	cmp	r3, r1
    c398:	d908      	bls.n	c3ac <__udivmoddi4+0xbc>
    c39a:	2d00      	cmp	r5, #0
    c39c:	f000 80f2 	beq.w	c584 <__udivmoddi4+0x294>
    c3a0:	2100      	movs	r1, #0
    c3a2:	e9c5 0c00 	strd	r0, ip, [r5]
    c3a6:	4608      	mov	r0, r1
    c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3ac:	fab3 f183 	clz	r1, r3
    c3b0:	2900      	cmp	r1, #0
    c3b2:	d14e      	bne.n	c452 <__udivmoddi4+0x162>
    c3b4:	4563      	cmp	r3, ip
    c3b6:	f0c0 80e8 	bcc.w	c58a <__udivmoddi4+0x29a>
    c3ba:	4282      	cmp	r2, r0
    c3bc:	f240 80e5 	bls.w	c58a <__udivmoddi4+0x29a>
    c3c0:	4608      	mov	r0, r1
    c3c2:	2d00      	cmp	r5, #0
    c3c4:	d0e5      	beq.n	c392 <__udivmoddi4+0xa2>
    c3c6:	e9c5 4a00 	strd	r4, sl, [r5]
    c3ca:	e7e2      	b.n	c392 <__udivmoddi4+0xa2>
    c3cc:	b902      	cbnz	r2, c3d0 <__udivmoddi4+0xe0>
    c3ce:	deff      	udf	#255	; 0xff
    c3d0:	fab2 f682 	clz	r6, r2
    c3d4:	2e00      	cmp	r6, #0
    c3d6:	f040 8099 	bne.w	c50c <__udivmoddi4+0x21c>
    c3da:	1a8b      	subs	r3, r1, r2
    c3dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c3e0:	fa1f f882 	uxth.w	r8, r2
    c3e4:	2101      	movs	r1, #1
    c3e6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c3ea:	fbb3 f2fe 	udiv	r2, r3, lr
    c3ee:	fb0e 3012 	mls	r0, lr, r2, r3
    c3f2:	fb08 f902 	mul.w	r9, r8, r2
    c3f6:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c3fa:	45e1      	cmp	r9, ip
    c3fc:	d908      	bls.n	c410 <__udivmoddi4+0x120>
    c3fe:	eb17 0c0c 	adds.w	ip, r7, ip
    c402:	f102 33ff 	add.w	r3, r2, #4294967295
    c406:	d202      	bcs.n	c40e <__udivmoddi4+0x11e>
    c408:	45e1      	cmp	r9, ip
    c40a:	f200 80ca 	bhi.w	c5a2 <__udivmoddi4+0x2b2>
    c40e:	461a      	mov	r2, r3
    c410:	ebac 0c09 	sub.w	ip, ip, r9
    c414:	b2a3      	uxth	r3, r4
    c416:	fbbc f0fe 	udiv	r0, ip, lr
    c41a:	fb0e cc10 	mls	ip, lr, r0, ip
    c41e:	fb08 f800 	mul.w	r8, r8, r0
    c422:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c426:	45a0      	cmp	r8, r4
    c428:	d90e      	bls.n	c448 <__udivmoddi4+0x158>
    c42a:	193c      	adds	r4, r7, r4
    c42c:	f100 33ff 	add.w	r3, r0, #4294967295
    c430:	bf2c      	ite	cs
    c432:	f04f 0c01 	movcs.w	ip, #1
    c436:	f04f 0c00 	movcc.w	ip, #0
    c43a:	45a0      	cmp	r8, r4
    c43c:	d903      	bls.n	c446 <__udivmoddi4+0x156>
    c43e:	f1bc 0f00 	cmp.w	ip, #0
    c442:	f000 80a8 	beq.w	c596 <__udivmoddi4+0x2a6>
    c446:	4618      	mov	r0, r3
    c448:	eba4 0408 	sub.w	r4, r4, r8
    c44c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c450:	e79a      	b.n	c388 <__udivmoddi4+0x98>
    c452:	f1c1 0420 	rsb	r4, r1, #32
    c456:	408b      	lsls	r3, r1
    c458:	fa02 fe01 	lsl.w	lr, r2, r1
    c45c:	fa0c f601 	lsl.w	r6, ip, r1
    c460:	40e2      	lsrs	r2, r4
    c462:	fa20 f704 	lsr.w	r7, r0, r4
    c466:	fa2c fc04 	lsr.w	ip, ip, r4
    c46a:	fa00 f801 	lsl.w	r8, r0, r1
    c46e:	4313      	orrs	r3, r2
    c470:	433e      	orrs	r6, r7
    c472:	0c1f      	lsrs	r7, r3, #16
    c474:	0c32      	lsrs	r2, r6, #16
    c476:	fa1f f983 	uxth.w	r9, r3
    c47a:	fbbc f0f7 	udiv	r0, ip, r7
    c47e:	fb07 cc10 	mls	ip, r7, r0, ip
    c482:	fb00 fa09 	mul.w	sl, r0, r9
    c486:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c48a:	45e2      	cmp	sl, ip
    c48c:	d908      	bls.n	c4a0 <__udivmoddi4+0x1b0>
    c48e:	eb13 0c0c 	adds.w	ip, r3, ip
    c492:	f100 32ff 	add.w	r2, r0, #4294967295
    c496:	d202      	bcs.n	c49e <__udivmoddi4+0x1ae>
    c498:	45e2      	cmp	sl, ip
    c49a:	f200 8089 	bhi.w	c5b0 <__udivmoddi4+0x2c0>
    c49e:	4610      	mov	r0, r2
    c4a0:	ebac 0c0a 	sub.w	ip, ip, sl
    c4a4:	b2b6      	uxth	r6, r6
    c4a6:	fbbc faf7 	udiv	sl, ip, r7
    c4aa:	fb07 cc1a 	mls	ip, r7, sl, ip
    c4ae:	fb0a f909 	mul.w	r9, sl, r9
    c4b2:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c4b6:	4591      	cmp	r9, r2
    c4b8:	d906      	bls.n	c4c8 <__udivmoddi4+0x1d8>
    c4ba:	189a      	adds	r2, r3, r2
    c4bc:	f10a 36ff 	add.w	r6, sl, #4294967295
    c4c0:	d201      	bcs.n	c4c6 <__udivmoddi4+0x1d6>
    c4c2:	4591      	cmp	r9, r2
    c4c4:	d87a      	bhi.n	c5bc <__udivmoddi4+0x2cc>
    c4c6:	46b2      	mov	sl, r6
    c4c8:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c4cc:	eba2 0209 	sub.w	r2, r2, r9
    c4d0:	fba0 670e 	umull	r6, r7, r0, lr
    c4d4:	42ba      	cmp	r2, r7
    c4d6:	46b4      	mov	ip, r6
    c4d8:	46b9      	mov	r9, r7
    c4da:	d302      	bcc.n	c4e2 <__udivmoddi4+0x1f2>
    c4dc:	d107      	bne.n	c4ee <__udivmoddi4+0x1fe>
    c4de:	45b0      	cmp	r8, r6
    c4e0:	d205      	bcs.n	c4ee <__udivmoddi4+0x1fe>
    c4e2:	ebb6 0c0e 	subs.w	ip, r6, lr
    c4e6:	eb67 0303 	sbc.w	r3, r7, r3
    c4ea:	3801      	subs	r0, #1
    c4ec:	4699      	mov	r9, r3
    c4ee:	2d00      	cmp	r5, #0
    c4f0:	d06b      	beq.n	c5ca <__udivmoddi4+0x2da>
    c4f2:	ebb8 030c 	subs.w	r3, r8, ip
    c4f6:	eb62 0209 	sbc.w	r2, r2, r9
    c4fa:	fa02 f404 	lsl.w	r4, r2, r4
    c4fe:	40cb      	lsrs	r3, r1
    c500:	40ca      	lsrs	r2, r1
    c502:	2100      	movs	r1, #0
    c504:	431c      	orrs	r4, r3
    c506:	e9c5 4200 	strd	r4, r2, [r5]
    c50a:	e742      	b.n	c392 <__udivmoddi4+0xa2>
    c50c:	40b7      	lsls	r7, r6
    c50e:	f1c6 0220 	rsb	r2, r6, #32
    c512:	fa01 f306 	lsl.w	r3, r1, r6
    c516:	40b4      	lsls	r4, r6
    c518:	fa21 fc02 	lsr.w	ip, r1, r2
    c51c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c520:	fa20 f202 	lsr.w	r2, r0, r2
    c524:	fa1f f887 	uxth.w	r8, r7
    c528:	fbbc f1fe 	udiv	r1, ip, lr
    c52c:	431a      	orrs	r2, r3
    c52e:	fb0e cc11 	mls	ip, lr, r1, ip
    c532:	fb01 f008 	mul.w	r0, r1, r8
    c536:	0c13      	lsrs	r3, r2, #16
    c538:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c53c:	4560      	cmp	r0, ip
    c53e:	d907      	bls.n	c550 <__udivmoddi4+0x260>
    c540:	eb17 0c0c 	adds.w	ip, r7, ip
    c544:	f101 33ff 	add.w	r3, r1, #4294967295
    c548:	d201      	bcs.n	c54e <__udivmoddi4+0x25e>
    c54a:	4560      	cmp	r0, ip
    c54c:	d833      	bhi.n	c5b6 <__udivmoddi4+0x2c6>
    c54e:	4619      	mov	r1, r3
    c550:	ebac 0c00 	sub.w	ip, ip, r0
    c554:	b292      	uxth	r2, r2
    c556:	fbbc f0fe 	udiv	r0, ip, lr
    c55a:	fb0e cc10 	mls	ip, lr, r0, ip
    c55e:	fb00 f308 	mul.w	r3, r0, r8
    c562:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c566:	4563      	cmp	r3, ip
    c568:	d907      	bls.n	c57a <__udivmoddi4+0x28a>
    c56a:	eb17 0c0c 	adds.w	ip, r7, ip
    c56e:	f100 32ff 	add.w	r2, r0, #4294967295
    c572:	d201      	bcs.n	c578 <__udivmoddi4+0x288>
    c574:	4563      	cmp	r3, ip
    c576:	d825      	bhi.n	c5c4 <__udivmoddi4+0x2d4>
    c578:	4610      	mov	r0, r2
    c57a:	ebac 0303 	sub.w	r3, ip, r3
    c57e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c582:	e730      	b.n	c3e6 <__udivmoddi4+0xf6>
    c584:	4629      	mov	r1, r5
    c586:	4628      	mov	r0, r5
    c588:	e703      	b.n	c392 <__udivmoddi4+0xa2>
    c58a:	1a84      	subs	r4, r0, r2
    c58c:	eb6c 0303 	sbc.w	r3, ip, r3
    c590:	2001      	movs	r0, #1
    c592:	469a      	mov	sl, r3
    c594:	e715      	b.n	c3c2 <__udivmoddi4+0xd2>
    c596:	3802      	subs	r0, #2
    c598:	443c      	add	r4, r7
    c59a:	e755      	b.n	c448 <__udivmoddi4+0x158>
    c59c:	3802      	subs	r0, #2
    c59e:	443c      	add	r4, r7
    c5a0:	e6ed      	b.n	c37e <__udivmoddi4+0x8e>
    c5a2:	3a02      	subs	r2, #2
    c5a4:	44bc      	add	ip, r7
    c5a6:	e733      	b.n	c410 <__udivmoddi4+0x120>
    c5a8:	f1ae 0e02 	sub.w	lr, lr, #2
    c5ac:	443b      	add	r3, r7
    c5ae:	e6d2      	b.n	c356 <__udivmoddi4+0x66>
    c5b0:	3802      	subs	r0, #2
    c5b2:	449c      	add	ip, r3
    c5b4:	e774      	b.n	c4a0 <__udivmoddi4+0x1b0>
    c5b6:	3902      	subs	r1, #2
    c5b8:	44bc      	add	ip, r7
    c5ba:	e7c9      	b.n	c550 <__udivmoddi4+0x260>
    c5bc:	f1aa 0a02 	sub.w	sl, sl, #2
    c5c0:	441a      	add	r2, r3
    c5c2:	e781      	b.n	c4c8 <__udivmoddi4+0x1d8>
    c5c4:	3802      	subs	r0, #2
    c5c6:	44bc      	add	ip, r7
    c5c8:	e7d7      	b.n	c57a <__udivmoddi4+0x28a>
    c5ca:	4629      	mov	r1, r5
    c5cc:	e6e1      	b.n	c392 <__udivmoddi4+0xa2>
    c5ce:	bf00      	nop

0000c5d0 <__aeabi_idiv0>:
    c5d0:	4770      	bx	lr
    c5d2:	bf00      	nop

0000c5d4 <ocrypto_bigint_add128>:
    c5d4:	b470      	push	{r4, r5, r6}
    c5d6:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c5da:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5de:	185b      	adds	r3, r3, r1
    c5e0:	eb54 040c 	adcs.w	r4, r4, ip
    c5e4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5e8:	414d      	adcs	r5, r1
    c5ea:	eb56 060c 	adcs.w	r6, r6, ip
    c5ee:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c5f2:	4180      	sbcs	r0, r0
    c5f4:	3001      	adds	r0, #1
    c5f6:	bc70      	pop	{r4, r5, r6}
    c5f8:	4770      	bx	lr

0000c5fa <ocrypto_bigint_sub128>:
    c5fa:	b470      	push	{r4, r5, r6}
    c5fc:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c600:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c604:	1a5b      	subs	r3, r3, r1
    c606:	eb74 040c 	sbcs.w	r4, r4, ip
    c60a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c60e:	418d      	sbcs	r5, r1
    c610:	eb76 060c 	sbcs.w	r6, r6, ip
    c614:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c618:	4180      	sbcs	r0, r0
    c61a:	4240      	negs	r0, r0
    c61c:	bc70      	pop	{r4, r5, r6}
    c61e:	4770      	bx	lr

0000c620 <ocrypto_bigint_add256>:
    c620:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c624:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c628:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c62c:	185b      	adds	r3, r3, r1
    c62e:	eb54 040c 	adcs.w	r4, r4, ip
    c632:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c636:	414d      	adcs	r5, r1
    c638:	eb56 060c 	adcs.w	r6, r6, ip
    c63c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c640:	414f      	adcs	r7, r1
    c642:	eb58 080c 	adcs.w	r8, r8, ip
    c646:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c64a:	eb59 0901 	adcs.w	r9, r9, r1
    c64e:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c652:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c656:	4180      	sbcs	r0, r0
    c658:	3001      	adds	r0, #1
    c65a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c65e:	4770      	bx	lr

0000c660 <ocrypto_bigint_sub256>:
    c660:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c664:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c668:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c66c:	1a5b      	subs	r3, r3, r1
    c66e:	eb74 040c 	sbcs.w	r4, r4, ip
    c672:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c676:	418d      	sbcs	r5, r1
    c678:	eb76 060c 	sbcs.w	r6, r6, ip
    c67c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c680:	418f      	sbcs	r7, r1
    c682:	eb78 080c 	sbcs.w	r8, r8, ip
    c686:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c68a:	eb79 0901 	sbcs.w	r9, r9, r1
    c68e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c692:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c696:	4180      	sbcs	r0, r0
    c698:	4240      	negs	r0, r0
    c69a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c69e:	4770      	bx	lr

0000c6a0 <ocrypto_bigint_cadd256>:
    c6a0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6a4:	4252      	negs	r2, r2
    c6a6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c6aa:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c6ae:	4017      	ands	r7, r2
    c6b0:	19db      	adds	r3, r3, r7
    c6b2:	ea18 0802 	ands.w	r8, r8, r2
    c6b6:	eb54 0408 	adcs.w	r4, r4, r8
    c6ba:	ea19 0902 	ands.w	r9, r9, r2
    c6be:	eb55 0509 	adcs.w	r5, r5, r9
    c6c2:	ea1a 0a02 	ands.w	sl, sl, r2
    c6c6:	eb56 060a 	adcs.w	r6, r6, sl
    c6ca:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c6cc:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c6d0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c6d4:	4017      	ands	r7, r2
    c6d6:	417b      	adcs	r3, r7
    c6d8:	ea18 0802 	ands.w	r8, r8, r2
    c6dc:	eb54 0408 	adcs.w	r4, r4, r8
    c6e0:	ea19 0902 	ands.w	r9, r9, r2
    c6e4:	eb55 0509 	adcs.w	r5, r5, r9
    c6e8:	ea1a 0a02 	ands.w	sl, sl, r2
    c6ec:	eb56 060a 	adcs.w	r6, r6, sl
    c6f0:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c6f2:	4180      	sbcs	r0, r0
    c6f4:	3001      	adds	r0, #1
    c6f6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6fa:	4770      	bx	lr

0000c6fc <ocrypto_bigint_csub256>:
    c6fc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c700:	4252      	negs	r2, r2
    c702:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c706:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c70a:	4017      	ands	r7, r2
    c70c:	1bdb      	subs	r3, r3, r7
    c70e:	ea18 0802 	ands.w	r8, r8, r2
    c712:	eb74 0408 	sbcs.w	r4, r4, r8
    c716:	ea19 0902 	ands.w	r9, r9, r2
    c71a:	eb75 0509 	sbcs.w	r5, r5, r9
    c71e:	ea1a 0a02 	ands.w	sl, sl, r2
    c722:	eb76 060a 	sbcs.w	r6, r6, sl
    c726:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c728:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c72c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c730:	4017      	ands	r7, r2
    c732:	41bb      	sbcs	r3, r7
    c734:	ea18 0802 	ands.w	r8, r8, r2
    c738:	eb74 0408 	sbcs.w	r4, r4, r8
    c73c:	ea19 0902 	ands.w	r9, r9, r2
    c740:	eb75 0509 	sbcs.w	r5, r5, r9
    c744:	ea1a 0a02 	ands.w	sl, sl, r2
    c748:	eb76 060a 	sbcs.w	r6, r6, sl
    c74c:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c74e:	4180      	sbcs	r0, r0
    c750:	4240      	negs	r0, r0
    c752:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c756:	4770      	bx	lr

0000c758 <cswap64>:
    c758:	e890 0030 	ldmia.w	r0, {r4, r5}
    c75c:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c760:	1ba3      	subs	r3, r4, r6
    c762:	4013      	ands	r3, r2
    c764:	1ae4      	subs	r4, r4, r3
    c766:	18f6      	adds	r6, r6, r3
    c768:	1beb      	subs	r3, r5, r7
    c76a:	4013      	ands	r3, r2
    c76c:	1aed      	subs	r5, r5, r3
    c76e:	18ff      	adds	r7, r7, r3
    c770:	c030      	stmia	r0!, {r4, r5}
    c772:	c1c0      	stmia	r1!, {r6, r7}
    c774:	4770      	bx	lr

0000c776 <ocrypto_bigint_cswap256>:
    c776:	b5f0      	push	{r4, r5, r6, r7, lr}
    c778:	4252      	negs	r2, r2
    c77a:	f7ff ffed 	bl	c758 <cswap64>
    c77e:	f7ff ffeb 	bl	c758 <cswap64>
    c782:	f7ff ffe9 	bl	c758 <cswap64>
    c786:	f7ff ffe7 	bl	c758 <cswap64>
    c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c78c <ocrypto_bigint_mul128>:
    c78c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c790:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    c792:	6816      	ldr	r6, [r2, #0]
    c794:	fba1 9a06 	umull	r9, sl, r1, r6
    c798:	f04f 0c00 	mov.w	ip, #0
    c79c:	fbe3 ac06 	umlal	sl, ip, r3, r6
    c7a0:	f04f 0700 	mov.w	r7, #0
    c7a4:	fbe4 c706 	umlal	ip, r7, r4, r6
    c7a8:	f04f 0800 	mov.w	r8, #0
    c7ac:	fbe5 7806 	umlal	r7, r8, r5, r6
    c7b0:	f840 9b04 	str.w	r9, [r0], #4
    c7b4:	6856      	ldr	r6, [r2, #4]
    c7b6:	f04f 0900 	mov.w	r9, #0
    c7ba:	fbe1 a906 	umlal	sl, r9, r1, r6
    c7be:	eb1c 0c09 	adds.w	ip, ip, r9
    c7c2:	f04f 0900 	mov.w	r9, #0
    c7c6:	eb49 0909 	adc.w	r9, r9, r9
    c7ca:	fbe3 c906 	umlal	ip, r9, r3, r6
    c7ce:	eb17 0709 	adds.w	r7, r7, r9
    c7d2:	f04f 0900 	mov.w	r9, #0
    c7d6:	eb49 0909 	adc.w	r9, r9, r9
    c7da:	fbe4 7906 	umlal	r7, r9, r4, r6
    c7de:	eb18 0809 	adds.w	r8, r8, r9
    c7e2:	f04f 0900 	mov.w	r9, #0
    c7e6:	eb49 0909 	adc.w	r9, r9, r9
    c7ea:	fbe5 8906 	umlal	r8, r9, r5, r6
    c7ee:	f840 ab04 	str.w	sl, [r0], #4
    c7f2:	6896      	ldr	r6, [r2, #8]
    c7f4:	f04f 0a00 	mov.w	sl, #0
    c7f8:	fbe1 ca06 	umlal	ip, sl, r1, r6
    c7fc:	eb17 070a 	adds.w	r7, r7, sl
    c800:	f04f 0a00 	mov.w	sl, #0
    c804:	eb4a 0a0a 	adc.w	sl, sl, sl
    c808:	fbe3 7a06 	umlal	r7, sl, r3, r6
    c80c:	eb18 080a 	adds.w	r8, r8, sl
    c810:	f04f 0a00 	mov.w	sl, #0
    c814:	eb4a 0a0a 	adc.w	sl, sl, sl
    c818:	fbe4 8a06 	umlal	r8, sl, r4, r6
    c81c:	eb19 090a 	adds.w	r9, r9, sl
    c820:	f04f 0a00 	mov.w	sl, #0
    c824:	eb4a 0a0a 	adc.w	sl, sl, sl
    c828:	fbe5 9a06 	umlal	r9, sl, r5, r6
    c82c:	f840 cb04 	str.w	ip, [r0], #4
    c830:	68d6      	ldr	r6, [r2, #12]
    c832:	f04f 0c00 	mov.w	ip, #0
    c836:	fbe1 7c06 	umlal	r7, ip, r1, r6
    c83a:	eb18 080c 	adds.w	r8, r8, ip
    c83e:	f04f 0c00 	mov.w	ip, #0
    c842:	eb4c 0c0c 	adc.w	ip, ip, ip
    c846:	fbe3 8c06 	umlal	r8, ip, r3, r6
    c84a:	eb19 090c 	adds.w	r9, r9, ip
    c84e:	f04f 0c00 	mov.w	ip, #0
    c852:	eb4c 0c0c 	adc.w	ip, ip, ip
    c856:	fbe4 9c06 	umlal	r9, ip, r4, r6
    c85a:	eb1a 0a0c 	adds.w	sl, sl, ip
    c85e:	f04f 0c00 	mov.w	ip, #0
    c862:	eb4c 0c0c 	adc.w	ip, ip, ip
    c866:	fbe5 ac06 	umlal	sl, ip, r5, r6
    c86a:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    c86e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c872:	4770      	bx	lr

0000c874 <ocrypto_bigint_sqr256>:
    c874:	460a      	mov	r2, r1

0000c876 <ocrypto_bigint_mul256>:
    c876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c87a:	ec41 0a14 	vmov	s8, s9, r0, r1
    c87e:	ec92 0a08 	vldmia	r2, {s0-s7}
    c882:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c884:	ee10 0a10 	vmov	r0, s0
    c888:	fba1 7800 	umull	r7, r8, r1, r0
    c88c:	f04f 0900 	mov.w	r9, #0
    c890:	fbe2 8900 	umlal	r8, r9, r2, r0
    c894:	f04f 0a00 	mov.w	sl, #0
    c898:	fbe3 9a00 	umlal	r9, sl, r3, r0
    c89c:	f04f 0b00 	mov.w	fp, #0
    c8a0:	fbe4 ab00 	umlal	sl, fp, r4, r0
    c8a4:	ee12 0a10 	vmov	r0, s4
    c8a8:	f04f 0c00 	mov.w	ip, #0
    c8ac:	fbe1 bc00 	umlal	fp, ip, r1, r0
    c8b0:	f04f 0e00 	mov.w	lr, #0
    c8b4:	fbe2 ce00 	umlal	ip, lr, r2, r0
    c8b8:	f04f 0500 	mov.w	r5, #0
    c8bc:	fbe3 e500 	umlal	lr, r5, r3, r0
    c8c0:	f04f 0600 	mov.w	r6, #0
    c8c4:	fbe4 5600 	umlal	r5, r6, r4, r0
    c8c8:	ee05 7a10 	vmov	s10, r7
    c8cc:	ee10 0a90 	vmov	r0, s1
    c8d0:	f04f 0700 	mov.w	r7, #0
    c8d4:	fbe1 8700 	umlal	r8, r7, r1, r0
    c8d8:	eb19 0907 	adds.w	r9, r9, r7
    c8dc:	f04f 0700 	mov.w	r7, #0
    c8e0:	eb47 0707 	adc.w	r7, r7, r7
    c8e4:	fbe2 9700 	umlal	r9, r7, r2, r0
    c8e8:	eb1a 0a07 	adds.w	sl, sl, r7
    c8ec:	f04f 0700 	mov.w	r7, #0
    c8f0:	eb47 0707 	adc.w	r7, r7, r7
    c8f4:	fbe3 a700 	umlal	sl, r7, r3, r0
    c8f8:	eb1b 0b07 	adds.w	fp, fp, r7
    c8fc:	f04f 0700 	mov.w	r7, #0
    c900:	eb47 0707 	adc.w	r7, r7, r7
    c904:	fbe4 b700 	umlal	fp, r7, r4, r0
    c908:	ee12 0a90 	vmov	r0, s5
    c90c:	eb1c 0c07 	adds.w	ip, ip, r7
    c910:	f04f 0700 	mov.w	r7, #0
    c914:	eb47 0707 	adc.w	r7, r7, r7
    c918:	fbe1 c700 	umlal	ip, r7, r1, r0
    c91c:	eb1e 0e07 	adds.w	lr, lr, r7
    c920:	f04f 0700 	mov.w	r7, #0
    c924:	eb47 0707 	adc.w	r7, r7, r7
    c928:	fbe2 e700 	umlal	lr, r7, r2, r0
    c92c:	19ed      	adds	r5, r5, r7
    c92e:	f04f 0700 	mov.w	r7, #0
    c932:	eb47 0707 	adc.w	r7, r7, r7
    c936:	fbe3 5700 	umlal	r5, r7, r3, r0
    c93a:	19f6      	adds	r6, r6, r7
    c93c:	f04f 0700 	mov.w	r7, #0
    c940:	eb47 0707 	adc.w	r7, r7, r7
    c944:	fbe4 6700 	umlal	r6, r7, r4, r0
    c948:	ee05 8a90 	vmov	s11, r8
    c94c:	ee11 0a10 	vmov	r0, s2
    c950:	f04f 0800 	mov.w	r8, #0
    c954:	fbe1 9800 	umlal	r9, r8, r1, r0
    c958:	eb1a 0a08 	adds.w	sl, sl, r8
    c95c:	f04f 0800 	mov.w	r8, #0
    c960:	eb48 0808 	adc.w	r8, r8, r8
    c964:	fbe2 a800 	umlal	sl, r8, r2, r0
    c968:	eb1b 0b08 	adds.w	fp, fp, r8
    c96c:	f04f 0800 	mov.w	r8, #0
    c970:	eb48 0808 	adc.w	r8, r8, r8
    c974:	fbe3 b800 	umlal	fp, r8, r3, r0
    c978:	eb1c 0c08 	adds.w	ip, ip, r8
    c97c:	f04f 0800 	mov.w	r8, #0
    c980:	eb48 0808 	adc.w	r8, r8, r8
    c984:	fbe4 c800 	umlal	ip, r8, r4, r0
    c988:	ee13 0a10 	vmov	r0, s6
    c98c:	eb1e 0e08 	adds.w	lr, lr, r8
    c990:	f04f 0800 	mov.w	r8, #0
    c994:	eb48 0808 	adc.w	r8, r8, r8
    c998:	fbe1 e800 	umlal	lr, r8, r1, r0
    c99c:	eb15 0508 	adds.w	r5, r5, r8
    c9a0:	f04f 0800 	mov.w	r8, #0
    c9a4:	eb48 0808 	adc.w	r8, r8, r8
    c9a8:	fbe2 5800 	umlal	r5, r8, r2, r0
    c9ac:	eb16 0608 	adds.w	r6, r6, r8
    c9b0:	f04f 0800 	mov.w	r8, #0
    c9b4:	eb48 0808 	adc.w	r8, r8, r8
    c9b8:	fbe3 6800 	umlal	r6, r8, r3, r0
    c9bc:	eb17 0708 	adds.w	r7, r7, r8
    c9c0:	f04f 0800 	mov.w	r8, #0
    c9c4:	eb48 0808 	adc.w	r8, r8, r8
    c9c8:	fbe4 7800 	umlal	r7, r8, r4, r0
    c9cc:	ee06 9a10 	vmov	s12, r9
    c9d0:	ee11 0a90 	vmov	r0, s3
    c9d4:	f04f 0900 	mov.w	r9, #0
    c9d8:	fbe1 a900 	umlal	sl, r9, r1, r0
    c9dc:	eb1b 0b09 	adds.w	fp, fp, r9
    c9e0:	f04f 0900 	mov.w	r9, #0
    c9e4:	eb49 0909 	adc.w	r9, r9, r9
    c9e8:	fbe2 b900 	umlal	fp, r9, r2, r0
    c9ec:	eb1c 0c09 	adds.w	ip, ip, r9
    c9f0:	f04f 0900 	mov.w	r9, #0
    c9f4:	eb49 0909 	adc.w	r9, r9, r9
    c9f8:	fbe3 c900 	umlal	ip, r9, r3, r0
    c9fc:	eb1e 0e09 	adds.w	lr, lr, r9
    ca00:	f04f 0900 	mov.w	r9, #0
    ca04:	eb49 0909 	adc.w	r9, r9, r9
    ca08:	fbe4 e900 	umlal	lr, r9, r4, r0
    ca0c:	ee13 0a90 	vmov	r0, s7
    ca10:	eb15 0509 	adds.w	r5, r5, r9
    ca14:	f04f 0900 	mov.w	r9, #0
    ca18:	eb49 0909 	adc.w	r9, r9, r9
    ca1c:	fbe1 5900 	umlal	r5, r9, r1, r0
    ca20:	eb16 0609 	adds.w	r6, r6, r9
    ca24:	f04f 0900 	mov.w	r9, #0
    ca28:	eb49 0909 	adc.w	r9, r9, r9
    ca2c:	fbe2 6900 	umlal	r6, r9, r2, r0
    ca30:	eb17 0709 	adds.w	r7, r7, r9
    ca34:	f04f 0900 	mov.w	r9, #0
    ca38:	eb49 0909 	adc.w	r9, r9, r9
    ca3c:	fbe3 7900 	umlal	r7, r9, r3, r0
    ca40:	eb18 0809 	adds.w	r8, r8, r9
    ca44:	f04f 0900 	mov.w	r9, #0
    ca48:	eb49 0909 	adc.w	r9, r9, r9
    ca4c:	fbe4 8900 	umlal	r8, r9, r4, r0
    ca50:	ee06 aa90 	vmov	s13, sl
    ca54:	ee14 1a90 	vmov	r1, s9
    ca58:	f101 0110 	add.w	r1, r1, #16
    ca5c:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    ca5e:	ee10 0a10 	vmov	r0, s0
    ca62:	f04f 0a00 	mov.w	sl, #0
    ca66:	fbe1 ba00 	umlal	fp, sl, r1, r0
    ca6a:	eb1c 0c0a 	adds.w	ip, ip, sl
    ca6e:	f04f 0a00 	mov.w	sl, #0
    ca72:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca76:	fbe2 ca00 	umlal	ip, sl, r2, r0
    ca7a:	eb1e 0e0a 	adds.w	lr, lr, sl
    ca7e:	f04f 0a00 	mov.w	sl, #0
    ca82:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca86:	fbe3 ea00 	umlal	lr, sl, r3, r0
    ca8a:	eb15 050a 	adds.w	r5, r5, sl
    ca8e:	f04f 0a00 	mov.w	sl, #0
    ca92:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca96:	fbe4 5a00 	umlal	r5, sl, r4, r0
    ca9a:	ee12 0a10 	vmov	r0, s4
    ca9e:	eb16 060a 	adds.w	r6, r6, sl
    caa2:	f04f 0a00 	mov.w	sl, #0
    caa6:	eb4a 0a0a 	adc.w	sl, sl, sl
    caaa:	fbe1 6a00 	umlal	r6, sl, r1, r0
    caae:	eb17 070a 	adds.w	r7, r7, sl
    cab2:	f04f 0a00 	mov.w	sl, #0
    cab6:	eb4a 0a0a 	adc.w	sl, sl, sl
    caba:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cabe:	eb18 080a 	adds.w	r8, r8, sl
    cac2:	f04f 0a00 	mov.w	sl, #0
    cac6:	eb4a 0a0a 	adc.w	sl, sl, sl
    caca:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cace:	eb19 090a 	adds.w	r9, r9, sl
    cad2:	f04f 0a00 	mov.w	sl, #0
    cad6:	eb4a 0a0a 	adc.w	sl, sl, sl
    cada:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cade:	ee07 ba10 	vmov	s14, fp
    cae2:	ee10 0a90 	vmov	r0, s1
    cae6:	f04f 0b00 	mov.w	fp, #0
    caea:	fbe1 cb00 	umlal	ip, fp, r1, r0
    caee:	eb1e 0e0b 	adds.w	lr, lr, fp
    caf2:	f04f 0b00 	mov.w	fp, #0
    caf6:	eb4b 0b0b 	adc.w	fp, fp, fp
    cafa:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cafe:	eb15 050b 	adds.w	r5, r5, fp
    cb02:	f04f 0b00 	mov.w	fp, #0
    cb06:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb0a:	fbe3 5b00 	umlal	r5, fp, r3, r0
    cb0e:	eb16 060b 	adds.w	r6, r6, fp
    cb12:	f04f 0b00 	mov.w	fp, #0
    cb16:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb1a:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cb1e:	ee12 0a90 	vmov	r0, s5
    cb22:	eb17 070b 	adds.w	r7, r7, fp
    cb26:	f04f 0b00 	mov.w	fp, #0
    cb2a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb2e:	fbe1 7b00 	umlal	r7, fp, r1, r0
    cb32:	eb18 080b 	adds.w	r8, r8, fp
    cb36:	f04f 0b00 	mov.w	fp, #0
    cb3a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb3e:	fbe2 8b00 	umlal	r8, fp, r2, r0
    cb42:	eb19 090b 	adds.w	r9, r9, fp
    cb46:	f04f 0b00 	mov.w	fp, #0
    cb4a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb4e:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cb52:	eb1a 0a0b 	adds.w	sl, sl, fp
    cb56:	f04f 0b00 	mov.w	fp, #0
    cb5a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb5e:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cb62:	ee07 ca90 	vmov	s15, ip
    cb66:	ee11 0a10 	vmov	r0, s2
    cb6a:	f04f 0c00 	mov.w	ip, #0
    cb6e:	fbe1 ec00 	umlal	lr, ip, r1, r0
    cb72:	eb15 050c 	adds.w	r5, r5, ip
    cb76:	f04f 0c00 	mov.w	ip, #0
    cb7a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb7e:	fbe2 5c00 	umlal	r5, ip, r2, r0
    cb82:	eb16 060c 	adds.w	r6, r6, ip
    cb86:	f04f 0c00 	mov.w	ip, #0
    cb8a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb8e:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cb92:	eb17 070c 	adds.w	r7, r7, ip
    cb96:	f04f 0c00 	mov.w	ip, #0
    cb9a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb9e:	fbe4 7c00 	umlal	r7, ip, r4, r0
    cba2:	ee13 0a10 	vmov	r0, s6
    cba6:	eb18 080c 	adds.w	r8, r8, ip
    cbaa:	f04f 0c00 	mov.w	ip, #0
    cbae:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbb2:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cbb6:	eb19 090c 	adds.w	r9, r9, ip
    cbba:	f04f 0c00 	mov.w	ip, #0
    cbbe:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbc2:	fbe2 9c00 	umlal	r9, ip, r2, r0
    cbc6:	eb1a 0a0c 	adds.w	sl, sl, ip
    cbca:	f04f 0c00 	mov.w	ip, #0
    cbce:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbd2:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cbd6:	eb1b 0b0c 	adds.w	fp, fp, ip
    cbda:	f04f 0c00 	mov.w	ip, #0
    cbde:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbe2:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cbe6:	ee08 ea10 	vmov	s16, lr
    cbea:	ee11 0a90 	vmov	r0, s3
    cbee:	f04f 0e00 	mov.w	lr, #0
    cbf2:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cbf6:	eb16 060e 	adds.w	r6, r6, lr
    cbfa:	f04f 0e00 	mov.w	lr, #0
    cbfe:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc02:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cc06:	eb17 070e 	adds.w	r7, r7, lr
    cc0a:	f04f 0e00 	mov.w	lr, #0
    cc0e:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc12:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cc16:	eb18 080e 	adds.w	r8, r8, lr
    cc1a:	f04f 0e00 	mov.w	lr, #0
    cc1e:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc22:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cc26:	ee13 0a90 	vmov	r0, s7
    cc2a:	eb19 090e 	adds.w	r9, r9, lr
    cc2e:	f04f 0e00 	mov.w	lr, #0
    cc32:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc36:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cc3a:	eb1a 0a0e 	adds.w	sl, sl, lr
    cc3e:	f04f 0e00 	mov.w	lr, #0
    cc42:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc46:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cc4a:	eb1b 0b0e 	adds.w	fp, fp, lr
    cc4e:	f04f 0e00 	mov.w	lr, #0
    cc52:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc56:	fbe3 be00 	umlal	fp, lr, r3, r0
    cc5a:	eb1c 0c0e 	adds.w	ip, ip, lr
    cc5e:	f04f 0e00 	mov.w	lr, #0
    cc62:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc66:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cc6a:	ee14 0a10 	vmov	r0, s8
    cc6e:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cc72:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc7a:	bf00      	nop

0000cc7c <ocrypto_constant_time_equal>:
    cc7c:	b430      	push	{r4, r5}
    cc7e:	f04f 0300 	mov.w	r3, #0

0000cc82 <constant_time_equal_loop>:
    cc82:	f810 4b01 	ldrb.w	r4, [r0], #1
    cc86:	f811 5b01 	ldrb.w	r5, [r1], #1
    cc8a:	3a01      	subs	r2, #1
    cc8c:	ea84 0405 	eor.w	r4, r4, r5
    cc90:	ea43 0304 	orr.w	r3, r3, r4
    cc94:	d1f5      	bne.n	cc82 <constant_time_equal_loop>
    cc96:	f1a3 0301 	sub.w	r3, r3, #1
    cc9a:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cc9e:	bc30      	pop	{r4, r5}
    cca0:	4770      	bx	lr

0000cca2 <ocrypto_constant_time_is_zero>:
    cca2:	f04f 0300 	mov.w	r3, #0

0000cca6 <constant_time_is_zero_loop>:
    cca6:	f810 2b01 	ldrb.w	r2, [r0], #1
    ccaa:	3901      	subs	r1, #1
    ccac:	ea43 0302 	orr.w	r3, r3, r2
    ccb0:	d1f9      	bne.n	cca6 <constant_time_is_zero_loop>
    ccb2:	f1a3 0301 	sub.w	r3, r3, #1
    ccb6:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    ccba:	4770      	bx	lr

0000ccbc <ocrypto_constant_time_copy>:
    ccbc:	f811 3b01 	ldrb.w	r3, [r1], #1
    ccc0:	f800 3b01 	strb.w	r3, [r0], #1
    ccc4:	3a01      	subs	r2, #1
    ccc6:	d1f9      	bne.n	ccbc <ocrypto_constant_time_copy>
    ccc8:	4770      	bx	lr

0000ccca <ocrypto_constant_time_fill_zero>:
    ccca:	2200      	movs	r2, #0

0000cccc <constant_time_fill_zero_loop>:
    cccc:	f800 2b01 	strb.w	r2, [r0], #1
    ccd0:	3901      	subs	r1, #1
    ccd2:	d1fb      	bne.n	cccc <constant_time_fill_zero_loop>
    ccd4:	4770      	bx	lr
    ccd6:	bf00      	nop

0000ccd8 <ocrypto_mod_p256_add>:
    ccd8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccdc:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cce0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cce4:	185b      	adds	r3, r3, r1
    cce6:	eb54 040c 	adcs.w	r4, r4, ip
    ccea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccee:	414d      	adcs	r5, r1
    ccf0:	eb56 060c 	adcs.w	r6, r6, ip
    ccf4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccf8:	414f      	adcs	r7, r1
    ccfa:	eb58 080c 	adcs.w	r8, r8, ip
    ccfe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd02:	eb59 0901 	adcs.w	r9, r9, r1
    cd06:	eb5a 0a0c 	adcs.w	sl, sl, ip
    cd0a:	4189      	sbcs	r1, r1
    cd0c:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    cd10:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    cd14:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    cd18:	f176 0600 	sbcs.w	r6, r6, #0
    cd1c:	f177 0700 	sbcs.w	r7, r7, #0
    cd20:	f178 0800 	sbcs.w	r8, r8, #0
    cd24:	f179 0901 	sbcs.w	r9, r9, #1
    cd28:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    cd2c:	f151 0100 	adcs.w	r1, r1, #0
    cd30:	424a      	negs	r2, r1
    cd32:	185b      	adds	r3, r3, r1
    cd34:	414c      	adcs	r4, r1
    cd36:	414d      	adcs	r5, r1
    cd38:	f156 0600 	adcs.w	r6, r6, #0
    cd3c:	f157 0700 	adcs.w	r7, r7, #0
    cd40:	f158 0800 	adcs.w	r8, r8, #0
    cd44:	eb59 0902 	adcs.w	r9, r9, r2
    cd48:	eb5a 0a01 	adcs.w	sl, sl, r1
    cd4c:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd50:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd54:	4770      	bx	lr

0000cd56 <ocrypto_mod_p256_sub>:
    cd56:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd5a:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd5e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd62:	1a5b      	subs	r3, r3, r1
    cd64:	eb74 040c 	sbcs.w	r4, r4, ip
    cd68:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd6c:	418d      	sbcs	r5, r1
    cd6e:	eb76 060c 	sbcs.w	r6, r6, ip
    cd72:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd76:	418f      	sbcs	r7, r1
    cd78:	eb78 080c 	sbcs.w	r8, r8, ip
    cd7c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd80:	eb79 0901 	sbcs.w	r9, r9, r1
    cd84:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    cd88:	4189      	sbcs	r1, r1
    cd8a:	424a      	negs	r2, r1
    cd8c:	185b      	adds	r3, r3, r1
    cd8e:	414c      	adcs	r4, r1
    cd90:	414d      	adcs	r5, r1
    cd92:	f156 0600 	adcs.w	r6, r6, #0
    cd96:	f157 0700 	adcs.w	r7, r7, #0
    cd9a:	f158 0800 	adcs.w	r8, r8, #0
    cd9e:	eb59 0902 	adcs.w	r9, r9, r2
    cda2:	eb5a 0a01 	adcs.w	sl, sl, r1
    cda6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cdaa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cdae:	4770      	bx	lr

0000cdb0 <ocrypto_mod_p256_square>:
    cdb0:	460a      	mov	r2, r1

0000cdb2 <ocrypto_mod_p256_mul>:
    cdb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdb6:	ec41 0a14 	vmov	s8, s9, r0, r1
    cdba:	ec92 0a08 	vldmia	r2, {s0-s7}
    cdbe:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cdc0:	ee10 0a10 	vmov	r0, s0
    cdc4:	fba1 7800 	umull	r7, r8, r1, r0
    cdc8:	f04f 0900 	mov.w	r9, #0
    cdcc:	fbe2 8900 	umlal	r8, r9, r2, r0
    cdd0:	f04f 0a00 	mov.w	sl, #0
    cdd4:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cdd8:	f04f 0b00 	mov.w	fp, #0
    cddc:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cde0:	ee12 0a10 	vmov	r0, s4
    cde4:	f04f 0c00 	mov.w	ip, #0
    cde8:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cdec:	f04f 0e00 	mov.w	lr, #0
    cdf0:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cdf4:	f04f 0500 	mov.w	r5, #0
    cdf8:	fbe3 e500 	umlal	lr, r5, r3, r0
    cdfc:	f04f 0600 	mov.w	r6, #0
    ce00:	fbe4 5600 	umlal	r5, r6, r4, r0
    ce04:	ee05 7a10 	vmov	s10, r7
    ce08:	ee10 0a90 	vmov	r0, s1
    ce0c:	f04f 0700 	mov.w	r7, #0
    ce10:	fbe1 8700 	umlal	r8, r7, r1, r0
    ce14:	eb19 0907 	adds.w	r9, r9, r7
    ce18:	f04f 0700 	mov.w	r7, #0
    ce1c:	eb47 0707 	adc.w	r7, r7, r7
    ce20:	fbe2 9700 	umlal	r9, r7, r2, r0
    ce24:	eb1a 0a07 	adds.w	sl, sl, r7
    ce28:	f04f 0700 	mov.w	r7, #0
    ce2c:	eb47 0707 	adc.w	r7, r7, r7
    ce30:	fbe3 a700 	umlal	sl, r7, r3, r0
    ce34:	eb1b 0b07 	adds.w	fp, fp, r7
    ce38:	f04f 0700 	mov.w	r7, #0
    ce3c:	eb47 0707 	adc.w	r7, r7, r7
    ce40:	fbe4 b700 	umlal	fp, r7, r4, r0
    ce44:	ee12 0a90 	vmov	r0, s5
    ce48:	eb1c 0c07 	adds.w	ip, ip, r7
    ce4c:	f04f 0700 	mov.w	r7, #0
    ce50:	eb47 0707 	adc.w	r7, r7, r7
    ce54:	fbe1 c700 	umlal	ip, r7, r1, r0
    ce58:	eb1e 0e07 	adds.w	lr, lr, r7
    ce5c:	f04f 0700 	mov.w	r7, #0
    ce60:	eb47 0707 	adc.w	r7, r7, r7
    ce64:	fbe2 e700 	umlal	lr, r7, r2, r0
    ce68:	19ed      	adds	r5, r5, r7
    ce6a:	f04f 0700 	mov.w	r7, #0
    ce6e:	eb47 0707 	adc.w	r7, r7, r7
    ce72:	fbe3 5700 	umlal	r5, r7, r3, r0
    ce76:	19f6      	adds	r6, r6, r7
    ce78:	f04f 0700 	mov.w	r7, #0
    ce7c:	eb47 0707 	adc.w	r7, r7, r7
    ce80:	fbe4 6700 	umlal	r6, r7, r4, r0
    ce84:	ee05 8a90 	vmov	s11, r8
    ce88:	ee11 0a10 	vmov	r0, s2
    ce8c:	f04f 0800 	mov.w	r8, #0
    ce90:	fbe1 9800 	umlal	r9, r8, r1, r0
    ce94:	eb1a 0a08 	adds.w	sl, sl, r8
    ce98:	f04f 0800 	mov.w	r8, #0
    ce9c:	eb48 0808 	adc.w	r8, r8, r8
    cea0:	fbe2 a800 	umlal	sl, r8, r2, r0
    cea4:	eb1b 0b08 	adds.w	fp, fp, r8
    cea8:	f04f 0800 	mov.w	r8, #0
    ceac:	eb48 0808 	adc.w	r8, r8, r8
    ceb0:	fbe3 b800 	umlal	fp, r8, r3, r0
    ceb4:	eb1c 0c08 	adds.w	ip, ip, r8
    ceb8:	f04f 0800 	mov.w	r8, #0
    cebc:	eb48 0808 	adc.w	r8, r8, r8
    cec0:	fbe4 c800 	umlal	ip, r8, r4, r0
    cec4:	ee13 0a10 	vmov	r0, s6
    cec8:	eb1e 0e08 	adds.w	lr, lr, r8
    cecc:	f04f 0800 	mov.w	r8, #0
    ced0:	eb48 0808 	adc.w	r8, r8, r8
    ced4:	fbe1 e800 	umlal	lr, r8, r1, r0
    ced8:	eb15 0508 	adds.w	r5, r5, r8
    cedc:	f04f 0800 	mov.w	r8, #0
    cee0:	eb48 0808 	adc.w	r8, r8, r8
    cee4:	fbe2 5800 	umlal	r5, r8, r2, r0
    cee8:	eb16 0608 	adds.w	r6, r6, r8
    ceec:	f04f 0800 	mov.w	r8, #0
    cef0:	eb48 0808 	adc.w	r8, r8, r8
    cef4:	fbe3 6800 	umlal	r6, r8, r3, r0
    cef8:	eb17 0708 	adds.w	r7, r7, r8
    cefc:	f04f 0800 	mov.w	r8, #0
    cf00:	eb48 0808 	adc.w	r8, r8, r8
    cf04:	fbe4 7800 	umlal	r7, r8, r4, r0
    cf08:	ee06 9a10 	vmov	s12, r9
    cf0c:	ee11 0a90 	vmov	r0, s3
    cf10:	f04f 0900 	mov.w	r9, #0
    cf14:	fbe1 a900 	umlal	sl, r9, r1, r0
    cf18:	eb1b 0b09 	adds.w	fp, fp, r9
    cf1c:	f04f 0900 	mov.w	r9, #0
    cf20:	eb49 0909 	adc.w	r9, r9, r9
    cf24:	fbe2 b900 	umlal	fp, r9, r2, r0
    cf28:	eb1c 0c09 	adds.w	ip, ip, r9
    cf2c:	f04f 0900 	mov.w	r9, #0
    cf30:	eb49 0909 	adc.w	r9, r9, r9
    cf34:	fbe3 c900 	umlal	ip, r9, r3, r0
    cf38:	eb1e 0e09 	adds.w	lr, lr, r9
    cf3c:	f04f 0900 	mov.w	r9, #0
    cf40:	eb49 0909 	adc.w	r9, r9, r9
    cf44:	fbe4 e900 	umlal	lr, r9, r4, r0
    cf48:	ee13 0a90 	vmov	r0, s7
    cf4c:	eb15 0509 	adds.w	r5, r5, r9
    cf50:	f04f 0900 	mov.w	r9, #0
    cf54:	eb49 0909 	adc.w	r9, r9, r9
    cf58:	fbe1 5900 	umlal	r5, r9, r1, r0
    cf5c:	eb16 0609 	adds.w	r6, r6, r9
    cf60:	f04f 0900 	mov.w	r9, #0
    cf64:	eb49 0909 	adc.w	r9, r9, r9
    cf68:	fbe2 6900 	umlal	r6, r9, r2, r0
    cf6c:	eb17 0709 	adds.w	r7, r7, r9
    cf70:	f04f 0900 	mov.w	r9, #0
    cf74:	eb49 0909 	adc.w	r9, r9, r9
    cf78:	fbe3 7900 	umlal	r7, r9, r3, r0
    cf7c:	eb18 0809 	adds.w	r8, r8, r9
    cf80:	f04f 0900 	mov.w	r9, #0
    cf84:	eb49 0909 	adc.w	r9, r9, r9
    cf88:	fbe4 8900 	umlal	r8, r9, r4, r0
    cf8c:	ee06 aa90 	vmov	s13, sl
    cf90:	ee14 1a90 	vmov	r1, s9
    cf94:	f101 0110 	add.w	r1, r1, #16
    cf98:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cf9a:	ee10 0a10 	vmov	r0, s0
    cf9e:	f04f 0a00 	mov.w	sl, #0
    cfa2:	fbe1 ba00 	umlal	fp, sl, r1, r0
    cfa6:	eb1c 0c0a 	adds.w	ip, ip, sl
    cfaa:	f04f 0a00 	mov.w	sl, #0
    cfae:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfb2:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cfb6:	eb1e 0e0a 	adds.w	lr, lr, sl
    cfba:	f04f 0a00 	mov.w	sl, #0
    cfbe:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfc2:	fbe3 ea00 	umlal	lr, sl, r3, r0
    cfc6:	eb15 050a 	adds.w	r5, r5, sl
    cfca:	f04f 0a00 	mov.w	sl, #0
    cfce:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfd2:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cfd6:	ee12 0a10 	vmov	r0, s4
    cfda:	eb16 060a 	adds.w	r6, r6, sl
    cfde:	f04f 0a00 	mov.w	sl, #0
    cfe2:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfe6:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cfea:	eb17 070a 	adds.w	r7, r7, sl
    cfee:	f04f 0a00 	mov.w	sl, #0
    cff2:	eb4a 0a0a 	adc.w	sl, sl, sl
    cff6:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cffa:	eb18 080a 	adds.w	r8, r8, sl
    cffe:	f04f 0a00 	mov.w	sl, #0
    d002:	eb4a 0a0a 	adc.w	sl, sl, sl
    d006:	fbe3 8a00 	umlal	r8, sl, r3, r0
    d00a:	eb19 090a 	adds.w	r9, r9, sl
    d00e:	f04f 0a00 	mov.w	sl, #0
    d012:	eb4a 0a0a 	adc.w	sl, sl, sl
    d016:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d01a:	ee07 ba10 	vmov	s14, fp
    d01e:	ee10 0a90 	vmov	r0, s1
    d022:	f04f 0b00 	mov.w	fp, #0
    d026:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d02a:	eb1e 0e0b 	adds.w	lr, lr, fp
    d02e:	f04f 0b00 	mov.w	fp, #0
    d032:	eb4b 0b0b 	adc.w	fp, fp, fp
    d036:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d03a:	eb15 050b 	adds.w	r5, r5, fp
    d03e:	f04f 0b00 	mov.w	fp, #0
    d042:	eb4b 0b0b 	adc.w	fp, fp, fp
    d046:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d04a:	eb16 060b 	adds.w	r6, r6, fp
    d04e:	f04f 0b00 	mov.w	fp, #0
    d052:	eb4b 0b0b 	adc.w	fp, fp, fp
    d056:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d05a:	ee12 0a90 	vmov	r0, s5
    d05e:	eb17 070b 	adds.w	r7, r7, fp
    d062:	f04f 0b00 	mov.w	fp, #0
    d066:	eb4b 0b0b 	adc.w	fp, fp, fp
    d06a:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d06e:	eb18 080b 	adds.w	r8, r8, fp
    d072:	f04f 0b00 	mov.w	fp, #0
    d076:	eb4b 0b0b 	adc.w	fp, fp, fp
    d07a:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d07e:	eb19 090b 	adds.w	r9, r9, fp
    d082:	f04f 0b00 	mov.w	fp, #0
    d086:	eb4b 0b0b 	adc.w	fp, fp, fp
    d08a:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d08e:	eb1a 0a0b 	adds.w	sl, sl, fp
    d092:	f04f 0b00 	mov.w	fp, #0
    d096:	eb4b 0b0b 	adc.w	fp, fp, fp
    d09a:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d09e:	ee07 ca90 	vmov	s15, ip
    d0a2:	ee11 0a10 	vmov	r0, s2
    d0a6:	f04f 0c00 	mov.w	ip, #0
    d0aa:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d0ae:	eb15 050c 	adds.w	r5, r5, ip
    d0b2:	f04f 0c00 	mov.w	ip, #0
    d0b6:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0ba:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d0be:	eb16 060c 	adds.w	r6, r6, ip
    d0c2:	f04f 0c00 	mov.w	ip, #0
    d0c6:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0ca:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d0ce:	eb17 070c 	adds.w	r7, r7, ip
    d0d2:	f04f 0c00 	mov.w	ip, #0
    d0d6:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0da:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d0de:	ee13 0a10 	vmov	r0, s6
    d0e2:	eb18 080c 	adds.w	r8, r8, ip
    d0e6:	f04f 0c00 	mov.w	ip, #0
    d0ea:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0ee:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d0f2:	eb19 090c 	adds.w	r9, r9, ip
    d0f6:	f04f 0c00 	mov.w	ip, #0
    d0fa:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0fe:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d102:	eb1a 0a0c 	adds.w	sl, sl, ip
    d106:	f04f 0c00 	mov.w	ip, #0
    d10a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d10e:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d112:	eb1b 0b0c 	adds.w	fp, fp, ip
    d116:	f04f 0c00 	mov.w	ip, #0
    d11a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d11e:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d122:	ee08 ea10 	vmov	s16, lr
    d126:	ee11 0a90 	vmov	r0, s3
    d12a:	f04f 0e00 	mov.w	lr, #0
    d12e:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d132:	eb16 060e 	adds.w	r6, r6, lr
    d136:	f04f 0e00 	mov.w	lr, #0
    d13a:	eb4e 0e0e 	adc.w	lr, lr, lr
    d13e:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d142:	eb17 070e 	adds.w	r7, r7, lr
    d146:	f04f 0e00 	mov.w	lr, #0
    d14a:	eb4e 0e0e 	adc.w	lr, lr, lr
    d14e:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d152:	eb18 080e 	adds.w	r8, r8, lr
    d156:	f04f 0e00 	mov.w	lr, #0
    d15a:	eb4e 0e0e 	adc.w	lr, lr, lr
    d15e:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d162:	ee13 0a90 	vmov	r0, s7
    d166:	eb19 090e 	adds.w	r9, r9, lr
    d16a:	f04f 0e00 	mov.w	lr, #0
    d16e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d172:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d176:	eb1a 0a0e 	adds.w	sl, sl, lr
    d17a:	f04f 0e00 	mov.w	lr, #0
    d17e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d182:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d186:	eb1b 0b0e 	adds.w	fp, fp, lr
    d18a:	f04f 0e00 	mov.w	lr, #0
    d18e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d192:	fbe3 be00 	umlal	fp, lr, r3, r0
    d196:	eb1c 0c0e 	adds.w	ip, ip, lr
    d19a:	f04f 0e00 	mov.w	lr, #0
    d19e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d1a2:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d1a6:	ec53 2a17 	vmov	r2, r3, s14, s15
    d1aa:	ee18 4a10 	vmov	r4, s16
    d1ae:	eb12 020a 	adds.w	r2, r2, sl
    d1b2:	eb53 030b 	adcs.w	r3, r3, fp
    d1b6:	eb54 040c 	adcs.w	r4, r4, ip
    d1ba:	eb55 050e 	adcs.w	r5, r5, lr
    d1be:	2000      	movs	r0, #0
    d1c0:	f140 0000 	adc.w	r0, r0, #0
    d1c4:	eb12 020b 	adds.w	r2, r2, fp
    d1c8:	eb53 030c 	adcs.w	r3, r3, ip
    d1cc:	eb54 040e 	adcs.w	r4, r4, lr
    d1d0:	eb55 050e 	adcs.w	r5, r5, lr
    d1d4:	4146      	adcs	r6, r0
    d1d6:	2000      	movs	r0, #0
    d1d8:	4147      	adcs	r7, r0
    d1da:	eb58 0800 	adcs.w	r8, r8, r0
    d1de:	eb59 090a 	adcs.w	r9, r9, sl
    d1e2:	f140 0000 	adc.w	r0, r0, #0
    d1e6:	ebb2 020e 	subs.w	r2, r2, lr
    d1ea:	f173 0300 	sbcs.w	r3, r3, #0
    d1ee:	f174 0400 	sbcs.w	r4, r4, #0
    d1f2:	eb75 050a 	sbcs.w	r5, r5, sl
    d1f6:	eb76 060b 	sbcs.w	r6, r6, fp
    d1fa:	eb77 070c 	sbcs.w	r7, r7, ip
    d1fe:	eb78 080a 	sbcs.w	r8, r8, sl
    d202:	eb79 090c 	sbcs.w	r9, r9, ip
    d206:	f160 0000 	sbc.w	r0, r0, #0
    d20a:	ebb5 050b 	subs.w	r5, r5, fp
    d20e:	eb76 060c 	sbcs.w	r6, r6, ip
    d212:	eb77 070e 	sbcs.w	r7, r7, lr
    d216:	eb78 080b 	sbcs.w	r8, r8, fp
    d21a:	eb79 090e 	sbcs.w	r9, r9, lr
    d21e:	f160 0000 	sbc.w	r0, r0, #0
    d222:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d226:	ea7f 0c0c 	mvns.w	ip, ip
    d22a:	f1dc 0e00 	rsbs	lr, ip, #0
    d22e:	ebb2 020c 	subs.w	r2, r2, ip
    d232:	eb73 030c 	sbcs.w	r3, r3, ip
    d236:	eb74 040c 	sbcs.w	r4, r4, ip
    d23a:	f175 0500 	sbcs.w	r5, r5, #0
    d23e:	f176 0600 	sbcs.w	r6, r6, #0
    d242:	f177 0700 	sbcs.w	r7, r7, #0
    d246:	eb78 080e 	sbcs.w	r8, r8, lr
    d24a:	eb79 090c 	sbcs.w	r9, r9, ip
    d24e:	f160 0000 	sbc.w	r0, r0, #0
    d252:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d256:	f1dc 0e00 	rsbs	lr, ip, #0
    d25a:	eb12 020c 	adds.w	r2, r2, ip
    d25e:	eb53 030c 	adcs.w	r3, r3, ip
    d262:	eb54 040c 	adcs.w	r4, r4, ip
    d266:	f155 0500 	adcs.w	r5, r5, #0
    d26a:	f156 0600 	adcs.w	r6, r6, #0
    d26e:	f157 0700 	adcs.w	r7, r7, #0
    d272:	eb58 080e 	adcs.w	r8, r8, lr
    d276:	eb59 090c 	adcs.w	r9, r9, ip
    d27a:	f140 0000 	adc.w	r0, r0, #0
    d27e:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d282:	f1dc 0e00 	rsbs	lr, ip, #0
    d286:	eb12 020c 	adds.w	r2, r2, ip
    d28a:	eb53 030c 	adcs.w	r3, r3, ip
    d28e:	eb54 040c 	adcs.w	r4, r4, ip
    d292:	f155 0500 	adcs.w	r5, r5, #0
    d296:	f156 0600 	adcs.w	r6, r6, #0
    d29a:	f157 0700 	adcs.w	r7, r7, #0
    d29e:	eb58 080e 	adcs.w	r8, r8, lr
    d2a2:	eb59 090c 	adcs.w	r9, r9, ip
    d2a6:	ec5b aa15 	vmov	sl, fp, s10, s11
    d2aa:	ec51 0a16 	vmov	r0, r1, s12, s13
    d2ae:	eb1a 0a06 	adds.w	sl, sl, r6
    d2b2:	eb5b 0b07 	adcs.w	fp, fp, r7
    d2b6:	eb50 0008 	adcs.w	r0, r0, r8
    d2ba:	eb51 0109 	adcs.w	r1, r1, r9
    d2be:	f05f 0c00 	movs.w	ip, #0
    d2c2:	f14c 0c00 	adc.w	ip, ip, #0
    d2c6:	eb1a 0a07 	adds.w	sl, sl, r7
    d2ca:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2ce:	eb50 0009 	adcs.w	r0, r0, r9
    d2d2:	eb51 0109 	adcs.w	r1, r1, r9
    d2d6:	eb52 020c 	adcs.w	r2, r2, ip
    d2da:	f05f 0c00 	movs.w	ip, #0
    d2de:	eb53 030c 	adcs.w	r3, r3, ip
    d2e2:	eb54 040c 	adcs.w	r4, r4, ip
    d2e6:	4175      	adcs	r5, r6
    d2e8:	f14c 0c00 	adc.w	ip, ip, #0
    d2ec:	ebba 0a09 	subs.w	sl, sl, r9
    d2f0:	f17b 0b00 	sbcs.w	fp, fp, #0
    d2f4:	f170 0000 	sbcs.w	r0, r0, #0
    d2f8:	41b1      	sbcs	r1, r6
    d2fa:	41ba      	sbcs	r2, r7
    d2fc:	eb73 0308 	sbcs.w	r3, r3, r8
    d300:	41b4      	sbcs	r4, r6
    d302:	eb75 0508 	sbcs.w	r5, r5, r8
    d306:	f16c 0c00 	sbc.w	ip, ip, #0
    d30a:	1bc9      	subs	r1, r1, r7
    d30c:	eb72 0208 	sbcs.w	r2, r2, r8
    d310:	eb73 0309 	sbcs.w	r3, r3, r9
    d314:	41bc      	sbcs	r4, r7
    d316:	eb75 0509 	sbcs.w	r5, r5, r9
    d31a:	f16c 0c00 	sbc.w	ip, ip, #0
    d31e:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d322:	ea7f 0808 	mvns.w	r8, r8
    d326:	f1d8 0900 	rsbs	r9, r8, #0
    d32a:	ebba 0a08 	subs.w	sl, sl, r8
    d32e:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d332:	eb70 0008 	sbcs.w	r0, r0, r8
    d336:	f171 0100 	sbcs.w	r1, r1, #0
    d33a:	f172 0200 	sbcs.w	r2, r2, #0
    d33e:	f173 0300 	sbcs.w	r3, r3, #0
    d342:	eb74 0409 	sbcs.w	r4, r4, r9
    d346:	eb75 0508 	sbcs.w	r5, r5, r8
    d34a:	f16c 0c00 	sbc.w	ip, ip, #0
    d34e:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d352:	f1d8 0900 	rsbs	r9, r8, #0
    d356:	eb1a 0a08 	adds.w	sl, sl, r8
    d35a:	eb5b 0b08 	adcs.w	fp, fp, r8
    d35e:	eb50 0008 	adcs.w	r0, r0, r8
    d362:	f151 0100 	adcs.w	r1, r1, #0
    d366:	f152 0200 	adcs.w	r2, r2, #0
    d36a:	f153 0300 	adcs.w	r3, r3, #0
    d36e:	eb54 0409 	adcs.w	r4, r4, r9
    d372:	eb55 0508 	adcs.w	r5, r5, r8
    d376:	f14c 0c00 	adc.w	ip, ip, #0
    d37a:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d37e:	f1d8 0900 	rsbs	r9, r8, #0
    d382:	eb1a 0a08 	adds.w	sl, sl, r8
    d386:	eb5b 0b08 	adcs.w	fp, fp, r8
    d38a:	eb50 0008 	adcs.w	r0, r0, r8
    d38e:	f151 0100 	adcs.w	r1, r1, #0
    d392:	f152 0200 	adcs.w	r2, r2, #0
    d396:	f153 0300 	adcs.w	r3, r3, #0
    d39a:	eb54 0409 	adcs.w	r4, r4, r9
    d39e:	eb55 0508 	adcs.w	r5, r5, r8
    d3a2:	ee14 7a10 	vmov	r7, s8
    d3a6:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d3aa:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3b2:	bf00      	nop

0000d3b4 <bsd_recoverable_error_handler>:
#include <string.h>

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	printk("bsdlib recoverable error: %u\n", err);
    d3b4:	4601      	mov	r1, r0
    d3b6:	4801      	ldr	r0, [pc, #4]	; (d3bc <bsd_recoverable_error_handler+0x8>)
    d3b8:	f016 bd5e 	b.w	23e78 <printk>
    d3bc:	000268ec 	.word	0x000268ec

0000d3c0 <main>:
}

void main(void)
{
	printk("The AT host sample started\n");
    d3c0:	4801      	ldr	r0, [pc, #4]	; (d3c8 <main+0x8>)
    d3c2:	f016 bd59 	b.w	23e78 <printk>
    d3c6:	bf00      	nop
    d3c8:	0002690a 	.word	0x0002690a

0000d3cc <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3d0:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    d3d2:	7a83      	ldrb	r3, [r0, #10]
{
    d3d4:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    d3d6:	009b      	lsls	r3, r3, #2
    d3d8:	330a      	adds	r3, #10
    d3da:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    d3de:	ebad 0d03 	sub.w	sp, sp, r3
    d3e2:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    d3e4:	6843      	ldr	r3, [r0, #4]
{
    d3e6:	4605      	mov	r5, r0
    d3e8:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    d3ea:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    d3ec:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    d3f0:	4281      	cmp	r1, r0
    d3f2:	d221      	bcs.n	d438 <z_sys_mem_pool_block_free+0x6c>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3f4:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    d3f6:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3f8:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    d3fc:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3fe:	d001      	beq.n	d404 <z_sys_mem_pool_block_free+0x38>
    d400:	f016 fa7b 	bl	238fa <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    d404:	4604      	mov	r4, r0
	while (level >= 0) {
    d406:	2e00      	cmp	r6, #0
    d408:	da1e      	bge.n	d448 <z_sys_mem_pool_block_free+0x7c>
	__ASSERT(0, "out of levels");
    d40a:	23b0      	movs	r3, #176	; 0xb0
    d40c:	4a40      	ldr	r2, [pc, #256]	; (d510 <z_sys_mem_pool_block_free+0x144>)
    d40e:	4941      	ldr	r1, [pc, #260]	; (d514 <z_sys_mem_pool_block_free+0x148>)
    d410:	4841      	ldr	r0, [pc, #260]	; (d518 <z_sys_mem_pool_block_free+0x14c>)
    d412:	f016 fd31 	bl	23e78 <printk>
    d416:	4841      	ldr	r0, [pc, #260]	; (d51c <z_sys_mem_pool_block_free+0x150>)
    d418:	f016 fd2e 	bl	23e78 <printk>
    d41c:	21b0      	movs	r1, #176	; 0xb0
    d41e:	483c      	ldr	r0, [pc, #240]	; (d510 <z_sys_mem_pool_block_free+0x144>)
    d420:	f016 fd37 	bl	23e92 <assert_post_action>
	return -1;
    d424:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    d428:	4621      	mov	r1, r4
    d42a:	7c28      	ldrb	r0, [r5, #16]
    d42c:	f016 fa6e 	bl	2390c <pool_irq_unlock.isra.4>
}
    d430:	3714      	adds	r7, #20
    d432:	46bd      	mov	sp, r7
    d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    d438:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    d43a:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    d43c:	089b      	lsrs	r3, r3, #2
    d43e:	f023 0303 	bic.w	r3, r3, #3
    d442:	f844 3f04 	str.w	r3, [r4, #4]!
    d446:	e7d3      	b.n	d3f0 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    d448:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    d44c:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
    d44e:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
    d452:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    d454:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    d456:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
    d458:	eb03 090a 	add.w	r9, r3, sl
    d45c:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    d45e:	4628      	mov	r0, r5
    d460:	f107 030c 	add.w	r3, r7, #12
    d464:	f016 fa33 	bl	238ce <get_bit_ptr>
	*word &= ~(1<<bit);
    d468:	2301      	movs	r3, #1
    d46a:	68fa      	ldr	r2, [r7, #12]
    d46c:	fa03 f000 	lsl.w	r0, r3, r0
    d470:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d472:	6839      	ldr	r1, [r7, #0]
    d474:	ea23 0300 	bic.w	r3, r3, r0
    d478:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    d47a:	220c      	movs	r2, #12
    d47c:	68eb      	ldr	r3, [r5, #12]
    d47e:	fb02 3306 	mla	r3, r2, r6, r3
    d482:	1d1a      	adds	r2, r3, #4
    d484:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    d488:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    d48a:	4621      	mov	r1, r4
    d48c:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    d490:	689a      	ldr	r2, [r3, #8]
    d492:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    d496:	f8c3 9008 	str.w	r9, [r3, #8]
    d49a:	7c28      	ldrb	r0, [r5, #16]
    d49c:	f016 fa36 	bl	2390c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d4a0:	7c28      	ldrb	r0, [r5, #16]
    d4a2:	f010 0001 	ands.w	r0, r0, #1
    d4a6:	d001      	beq.n	d4ac <z_sys_mem_pool_block_free+0xe0>
    d4a8:	f016 fa27 	bl	238fa <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    d4ac:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    d4ae:	2e00      	cmp	r6, #0
    d4b0:	d0ba      	beq.n	d428 <z_sys_mem_pool_block_free+0x5c>
	int bit = get_bit_ptr(p, level, bn, &word);
    d4b2:	f107 030c 	add.w	r3, r7, #12
    d4b6:	4642      	mov	r2, r8
    d4b8:	4631      	mov	r1, r6
    d4ba:	4628      	mov	r0, r5
    d4bc:	f016 fa07 	bl	238ce <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    d4c0:	2304      	movs	r3, #4
    d4c2:	fb90 f0f3 	sdiv	r0, r0, r3
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	0080      	lsls	r0, r0, #2
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    d4d0:	f010 000f 	ands.w	r0, r0, #15
    d4d4:	d1a8      	bne.n	d428 <z_sys_mem_pool_block_free+0x5c>
	node->next = NULL;
    d4d6:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
    d4d8:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
    d4dc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    d4de:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    d4e2:	4353      	muls	r3, r2
    d4e4:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
    d4e6:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    d4e8:	eb02 0c03 	add.w	ip, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d4ec:	58d1      	ldr	r1, [r2, r3]
    d4ee:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
    d4f2:	2804      	cmp	r0, #4
    d4f4:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
    d4f8:	58d1      	ldr	r1, [r2, r3]
    d4fa:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
    d4fe:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
    d502:	f8cc e004 	str.w	lr, [ip, #4]
    d506:	d1e9      	bne.n	d4dc <z_sys_mem_pool_block_free+0x110>
		level = level - 1;
    d508:	3e01      	subs	r6, #1
		bn = bn / 4;
    d50a:	fb98 f8f0 	sdiv	r8, r8, r0
    d50e:	e77a      	b.n	d406 <z_sys_mem_pool_block_free+0x3a>
    d510:	00026926 	.word	0x00026926
    d514:	000279fa 	.word	0x000279fa
    d518:	0002694b 	.word	0x0002694b
    d51c:	00026968 	.word	0x00026968

0000d520 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d520:	680b      	ldr	r3, [r1, #0]
    d522:	3301      	adds	r3, #1
    d524:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d526:	4b01      	ldr	r3, [pc, #4]	; (d52c <char_out+0xc>)
    d528:	681b      	ldr	r3, [r3, #0]
    d52a:	4718      	bx	r3
    d52c:	2002a224 	.word	0x2002a224

0000d530 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d534:	b085      	sub	sp, #20
    d536:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    d538:	469b      	mov	fp, r3
    d53a:	2c01      	cmp	r4, #1
    d53c:	bfb8      	it	lt
    d53e:	2401      	movlt	r4, #1
    d540:	2b01      	cmp	r3, #1
    d542:	bf0c      	ite	eq
    d544:	2330      	moveq	r3, #48	; 0x30
    d546:	2320      	movne	r3, #32
    d548:	4616      	mov	r6, r2
    d54a:	4682      	mov	sl, r0
    d54c:	4688      	mov	r8, r1
    d54e:	2501      	movs	r5, #1
    d550:	270a      	movs	r7, #10
    d552:	2200      	movs	r2, #0
    d554:	f8df 906c 	ldr.w	r9, [pc, #108]	; d5c4 <_printk_dec_ulong+0x94>
    d558:	9302      	str	r3, [sp, #8]
    d55a:	fbb6 f3f9 	udiv	r3, r6, r9
    d55e:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    d560:	b90a      	cbnz	r2, d566 <_printk_dec_ulong+0x36>
    d562:	45b1      	cmp	r9, r6
    d564:	d81c      	bhi.n	d5a0 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    d566:	9b01      	ldr	r3, [sp, #4]
    d568:	4641      	mov	r1, r8
    d56a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    d56e:	47d0      	blx	sl
			found_largest_digit = 1;
    d570:	2201      	movs	r2, #1
			digits++;
    d572:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    d574:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    d576:	3f01      	subs	r7, #1
		remainder %= pos;
    d578:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    d57c:	230a      	movs	r3, #10
	while (pos >= 10) {
    d57e:	2f01      	cmp	r7, #1
		pos /= 10;
    d580:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    d584:	d1e9      	bne.n	d55a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    d586:	4641      	mov	r1, r8
    d588:	f106 0030 	add.w	r0, r6, #48	; 0x30
    d58c:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    d58e:	f1bb 0f03 	cmp.w	fp, #3
    d592:	d102      	bne.n	d59a <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    d594:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    d596:	2c00      	cmp	r4, #0
    d598:	dc0e      	bgt.n	d5b8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    d59a:	b005      	add	sp, #20
    d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    d5a0:	42bc      	cmp	r4, r7
    d5a2:	dbe7      	blt.n	d574 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    d5a4:	f1bb 0f02 	cmp.w	fp, #2
    d5a8:	d8e4      	bhi.n	d574 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d5aa:	4641      	mov	r1, r8
    d5ac:	9802      	ldr	r0, [sp, #8]
    d5ae:	9203      	str	r2, [sp, #12]
			digits++;
    d5b0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d5b2:	47d0      	blx	sl
			digits++;
    d5b4:	9a03      	ldr	r2, [sp, #12]
    d5b6:	e7dd      	b.n	d574 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    d5b8:	4641      	mov	r1, r8
    d5ba:	2020      	movs	r0, #32
    d5bc:	47d0      	blx	sl
    d5be:	3c01      	subs	r4, #1
    d5c0:	e7e9      	b.n	d596 <_printk_dec_ulong+0x66>
    d5c2:	bf00      	nop
    d5c4:	3b9aca00 	.word	0x3b9aca00

0000d5c8 <__printk_hook_install>:
	_char_out = fn;
    d5c8:	4b01      	ldr	r3, [pc, #4]	; (d5d0 <__printk_hook_install+0x8>)
    d5ca:	6018      	str	r0, [r3, #0]
}
    d5cc:	4770      	bx	lr
    d5ce:	bf00      	nop
    d5d0:	2002a224 	.word	0x2002a224

0000d5d4 <vprintk>:
	struct out_context ctx = { 0 };
    d5d4:	2300      	movs	r3, #0
{
    d5d6:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    d5d8:	ac02      	add	r4, sp, #8
    d5da:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    d5de:	4602      	mov	r2, r0
    d5e0:	460b      	mov	r3, r1
    d5e2:	4803      	ldr	r0, [pc, #12]	; (d5f0 <vprintk+0x1c>)
    d5e4:	4621      	mov	r1, r4
    d5e6:	f016 fad1 	bl	23b8c <z_vprintk>
}
    d5ea:	b002      	add	sp, #8
    d5ec:	bd10      	pop	{r4, pc}
    d5ee:	bf00      	nop
    d5f0:	0000d521 	.word	0x0000d521

0000d5f4 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    d5f4:	f04f 0220 	mov.w	r2, #32
    d5f8:	f3ef 8311 	mrs	r3, BASEPRI
    d5fc:	f382 8811 	msr	BASEPRI, r2
    d600:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d604:	2101      	movs	r1, #1
    d606:	4a04      	ldr	r2, [pc, #16]	; (d618 <nordicsemi_nrf91_init+0x24>)
    d608:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d60c:	f383 8811 	msr	BASEPRI, r3
    d610:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d614:	2000      	movs	r0, #0
    d616:	4770      	bx	lr
    d618:	40039000 	.word	0x40039000

0000d61c <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d61c:	b120      	cbz	r0, d628 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    d61e:	4b03      	ldr	r3, [pc, #12]	; (d62c <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    d620:	0180      	lsls	r0, r0, #6
    d622:	f043 0301 	orr.w	r3, r3, #1
    d626:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d628:	4770      	bx	lr
    d62a:	bf00      	nop
    d62c:	00025580 	.word	0x00025580

0000d630 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
    d630:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
    d632:	4605      	mov	r5, r0
    d634:	b948      	cbnz	r0, d64a <socket_offload_register+0x1a>
    d636:	490c      	ldr	r1, [pc, #48]	; (d668 <socket_offload_register+0x38>)
    d638:	480c      	ldr	r0, [pc, #48]	; (d66c <socket_offload_register+0x3c>)
    d63a:	2311      	movs	r3, #17
    d63c:	4a0c      	ldr	r2, [pc, #48]	; (d670 <socket_offload_register+0x40>)
    d63e:	f016 fc1b 	bl	23e78 <printk>
    d642:	2111      	movs	r1, #17
    d644:	480a      	ldr	r0, [pc, #40]	; (d670 <socket_offload_register+0x40>)
    d646:	f016 fc24 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
    d64a:	4c0a      	ldr	r4, [pc, #40]	; (d674 <socket_offload_register+0x44>)
    d64c:	6822      	ldr	r2, [r4, #0]
    d64e:	b14a      	cbz	r2, d664 <socket_offload_register+0x34>
    d650:	4909      	ldr	r1, [pc, #36]	; (d678 <socket_offload_register+0x48>)
    d652:	4806      	ldr	r0, [pc, #24]	; (d66c <socket_offload_register+0x3c>)
    d654:	2312      	movs	r3, #18
    d656:	4a06      	ldr	r2, [pc, #24]	; (d670 <socket_offload_register+0x40>)
    d658:	f016 fc0e 	bl	23e78 <printk>
    d65c:	2112      	movs	r1, #18
    d65e:	4804      	ldr	r0, [pc, #16]	; (d670 <socket_offload_register+0x40>)
    d660:	f016 fc17 	bl	23e92 <assert_post_action>

	socket_ops = ops;
    d664:	6025      	str	r5, [r4, #0]
}
    d666:	bd38      	pop	{r3, r4, r5, pc}
    d668:	00026f3b 	.word	0x00026f3b
    d66c:	0002694b 	.word	0x0002694b
    d670:	00026987 	.word	0x00026987
    d674:	20020008 	.word	0x20020008
    d678:	000269c3 	.word	0x000269c3

0000d67c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    d67c:	280a      	cmp	r0, #10
{
    d67e:	b538      	push	{r3, r4, r5, lr}
    d680:	4604      	mov	r4, r0
    d682:	4d07      	ldr	r5, [pc, #28]	; (d6a0 <console_out+0x24>)
	if ('\n' == c) {
    d684:	d104      	bne.n	d690 <console_out+0x14>
    d686:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d688:	6843      	ldr	r3, [r0, #4]
    d68a:	210d      	movs	r1, #13
    d68c:	685b      	ldr	r3, [r3, #4]
    d68e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    d690:	6828      	ldr	r0, [r5, #0]
    d692:	6843      	ldr	r3, [r0, #4]
    d694:	b2e1      	uxtb	r1, r4
    d696:	685b      	ldr	r3, [r3, #4]
    d698:	4798      	blx	r3

	return c;
}
    d69a:	4620      	mov	r0, r4
    d69c:	bd38      	pop	{r3, r4, r5, pc}
    d69e:	bf00      	nop
    d6a0:	2002000c 	.word	0x2002000c

0000d6a4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    d6a4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    d6a6:	4c04      	ldr	r4, [pc, #16]	; (d6b8 <uart_console_hook_install+0x14>)
    d6a8:	4620      	mov	r0, r4
    d6aa:	f001 fc03 	bl	eeb4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d6ae:	4620      	mov	r0, r4
}
    d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    d6b4:	f7ff bf88 	b.w	d5c8 <__printk_hook_install>
    d6b8:	0000d67d 	.word	0x0000d67d

0000d6bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    d6bc:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d6be:	4804      	ldr	r0, [pc, #16]	; (d6d0 <uart_console_init+0x14>)
    d6c0:	f012 fd02 	bl	200c8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d6c4:	4b03      	ldr	r3, [pc, #12]	; (d6d4 <uart_console_init+0x18>)
    d6c6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    d6c8:	f7ff ffec 	bl	d6a4 <uart_console_hook_install>

	return 0;
}
    d6cc:	2000      	movs	r0, #0
    d6ce:	bd08      	pop	{r3, pc}
    d6d0:	000269dd 	.word	0x000269dd
    d6d4:	2002000c 	.word	0x2002000c

0000d6d8 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    d6d8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d6da:	2200      	movs	r2, #0
{
    d6dc:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d6de:	2101      	movs	r1, #1
    d6e0:	2005      	movs	r0, #5
    d6e2:	f000 faf5 	bl	dcd0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d6e6:	2005      	movs	r0, #5
    d6e8:	f000 fae2 	bl	dcb0 <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    d6ec:	2202      	movs	r2, #2
    d6ee:	4b05      	ldr	r3, [pc, #20]	; (d704 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d6f0:	2000      	movs	r0, #0
    d6f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    d6f6:	2203      	movs	r2, #3
    d6f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    d6fc:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d6fe:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    d702:	bd10      	pop	{r4, pc}
    d704:	40005000 	.word	0x40005000

0000d708 <clock_async_start>:
{
    d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    d70a:	6803      	ldr	r3, [r0, #0]
{
    d70c:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
    d70e:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    d710:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    d712:	4614      	mov	r4, r2
    d714:	b15a      	cbz	r2, d72e <clock_async_start+0x26>
    d716:	6853      	ldr	r3, [r2, #4]
    d718:	b94b      	cbnz	r3, d72e <clock_async_start+0x26>
    d71a:	4927      	ldr	r1, [pc, #156]	; (d7b8 <clock_async_start+0xb0>)
    d71c:	4827      	ldr	r0, [pc, #156]	; (d7bc <clock_async_start+0xb4>)
    d71e:	2392      	movs	r3, #146	; 0x92
    d720:	4a27      	ldr	r2, [pc, #156]	; (d7c0 <clock_async_start+0xb8>)
    d722:	f016 fba9 	bl	23e78 <printk>
    d726:	2192      	movs	r1, #146	; 0x92
    d728:	4825      	ldr	r0, [pc, #148]	; (d7c0 <clock_async_start+0xb8>)
    d72a:	f016 fbb2 	bl	23e92 <assert_post_action>
	__asm__ volatile(
    d72e:	f04f 0320 	mov.w	r3, #32
    d732:	f3ef 8211 	mrs	r2, BASEPRI
    d736:	f383 8811 	msr	BASEPRI, r3
    d73a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    d73e:	7a2b      	ldrb	r3, [r5, #8]
    d740:	3301      	adds	r3, #1
    d742:	b25b      	sxtb	r3, r3
    d744:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    d746:	f382 8811 	msr	BASEPRI, r2
    d74a:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    d74e:	7a6a      	ldrb	r2, [r5, #9]
    d750:	b13a      	cbz	r2, d762 <clock_async_start+0x5a>
		if (data) {
    d752:	b90c      	cbnz	r4, d758 <clock_async_start+0x50>
	return 0;
    d754:	2000      	movs	r0, #0
}
    d756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    d758:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    d75c:	4630      	mov	r0, r6
    d75e:	4798      	blx	r3
    d760:	e7f8      	b.n	d754 <clock_async_start+0x4c>
		if (ref == 1) {
    d762:	2b01      	cmp	r3, #1
    d764:	d108      	bne.n	d778 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
    d766:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    d768:	b943      	cbnz	r3, d77c <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    d76a:	2201      	movs	r2, #1
    d76c:	7abb      	ldrb	r3, [r7, #10]
    d76e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d772:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d776:	601a      	str	r2, [r3, #0]
		if (data) {
    d778:	b954      	cbnz	r4, d790 <clock_async_start+0x88>
    d77a:	e7eb      	b.n	d754 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
    d77c:	4630      	mov	r0, r6
    d77e:	4798      	blx	r3
    d780:	2800      	cmp	r0, #0
    d782:	d1f2      	bne.n	d76a <clock_async_start+0x62>
			} else if (data) {
    d784:	2c00      	cmp	r4, #0
    d786:	d0e5      	beq.n	d754 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
    d788:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    d78c:	4630      	mov	r0, r6
    d78e:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    d790:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    d792:	429c      	cmp	r4, r3
    d794:	d00d      	beq.n	d7b2 <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    d796:	b113      	cbz	r3, d79e <clock_async_start+0x96>
	return node->next;
    d798:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d79a:	2b00      	cmp	r3, #0
    d79c:	d1f9      	bne.n	d792 <clock_async_start+0x8a>
	parent->next = child;
    d79e:	2000      	movs	r0, #0
    d7a0:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d7a2:	686b      	ldr	r3, [r5, #4]
    d7a4:	b913      	cbnz	r3, d7ac <clock_async_start+0xa4>
	list->head = node;
    d7a6:	e9c5 4400 	strd	r4, r4, [r5]
    d7aa:	e7d3      	b.n	d754 <clock_async_start+0x4c>
	parent->next = child;
    d7ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d7ae:	606c      	str	r4, [r5, #4]
    d7b0:	e7d1      	b.n	d756 <clock_async_start+0x4e>
				return -EALREADY;
    d7b2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    d7b6:	e7ce      	b.n	d756 <clock_async_start+0x4e>
    d7b8:	00026a20 	.word	0x00026a20
    d7bc:	0002694b 	.word	0x0002694b
    d7c0:	000269e4 	.word	0x000269e4

0000d7c4 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d7c4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d7c6:	4b10      	ldr	r3, [pc, #64]	; (d808 <nrf_power_clock_isr+0x44>)
    d7c8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d7ca:	b162      	cbz	r2, d7e6 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d7cc:	4a0f      	ldr	r2, [pc, #60]	; (d80c <nrf_power_clock_isr+0x48>)
    d7ce:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d7d2:	07d1      	lsls	r1, r2, #31
    d7d4:	d507      	bpl.n	d7e6 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d7d6:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    d7d8:	480d      	ldr	r0, [pc, #52]	; (d810 <nrf_power_clock_isr+0x4c>)
    d7da:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d7dc:	6883      	ldr	r3, [r0, #8]
    d7de:	7a5b      	ldrb	r3, [r3, #9]
    d7e0:	b90b      	cbnz	r3, d7e6 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    d7e2:	f016 fba9 	bl	23f38 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d7e6:	4b0b      	ldr	r3, [pc, #44]	; (d814 <nrf_power_clock_isr+0x50>)
    d7e8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d7ea:	b15a      	cbz	r2, d804 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d7ec:	4a07      	ldr	r2, [pc, #28]	; (d80c <nrf_power_clock_isr+0x48>)
    d7ee:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d7f2:	0792      	lsls	r2, r2, #30
    d7f4:	d506      	bpl.n	d804 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d7f6:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    d7f8:	4807      	ldr	r0, [pc, #28]	; (d818 <nrf_power_clock_isr+0x54>)
    d7fa:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d7fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    d800:	f016 bb9a 	b.w	23f38 <clkstarted_handle>
}
    d804:	bd08      	pop	{r3, pc}
    d806:	bf00      	nop
    d808:	40005100 	.word	0x40005100
    d80c:	40005000 	.word	0x40005000
    d810:	2002a348 	.word	0x2002a348
    d814:	40005104 	.word	0x40005104
    d818:	2002a354 	.word	0x2002a354

0000d81c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    d81c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    d81e:	4c06      	ldr	r4, [pc, #24]	; (d838 <z_clock_isr+0x1c>)
    d820:	4906      	ldr	r1, [pc, #24]	; (d83c <z_clock_isr+0x20>)
    d822:	4622      	mov	r2, r4
    d824:	4806      	ldr	r0, [pc, #24]	; (d840 <z_clock_isr+0x24>)
    d826:	2317      	movs	r3, #23
    d828:	f016 fb26 	bl	23e78 <printk>
    d82c:	4620      	mov	r0, r4
}
    d82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    d832:	2117      	movs	r1, #23
    d834:	f016 bb2d 	b.w	23e92 <assert_post_action>
    d838:	00026a8c 	.word	0x00026a8c
    d83c:	000279fa 	.word	0x000279fa
    d840:	0002694b 	.word	0x0002694b

0000d844 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d844:	2200      	movs	r2, #0
{
    d846:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    d848:	4b21      	ldr	r3, [pc, #132]	; (d8d0 <rtc1_nrf_isr+0x8c>)
    d84a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d84e:	f04f 0320 	mov.w	r3, #32
    d852:	f3ef 8511 	mrs	r5, BASEPRI
    d856:	f383 8811 	msr	BASEPRI, r3
    d85a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d85e:	481d      	ldr	r0, [pc, #116]	; (d8d4 <rtc1_nrf_isr+0x90>)
    d860:	f014 fda6 	bl	223b0 <z_spin_lock_valid>
    d864:	b960      	cbnz	r0, d880 <rtc1_nrf_isr+0x3c>
    d866:	491c      	ldr	r1, [pc, #112]	; (d8d8 <rtc1_nrf_isr+0x94>)
    d868:	235f      	movs	r3, #95	; 0x5f
    d86a:	4a1c      	ldr	r2, [pc, #112]	; (d8dc <rtc1_nrf_isr+0x98>)
    d86c:	481c      	ldr	r0, [pc, #112]	; (d8e0 <rtc1_nrf_isr+0x9c>)
    d86e:	f016 fb03 	bl	23e78 <printk>
    d872:	481c      	ldr	r0, [pc, #112]	; (d8e4 <rtc1_nrf_isr+0xa0>)
    d874:	f016 fb00 	bl	23e78 <printk>
    d878:	215f      	movs	r1, #95	; 0x5f
    d87a:	4818      	ldr	r0, [pc, #96]	; (d8dc <rtc1_nrf_isr+0x98>)
    d87c:	f016 fb09 	bl	23e92 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    d880:	4814      	ldr	r0, [pc, #80]	; (d8d4 <rtc1_nrf_isr+0x90>)
    d882:	f014 fdb3 	bl	223ec <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    d886:	4b12      	ldr	r3, [pc, #72]	; (d8d0 <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d888:	4a17      	ldr	r2, [pc, #92]	; (d8e8 <rtc1_nrf_isr+0xa4>)
    d88a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
    d88e:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d890:	4810      	ldr	r0, [pc, #64]	; (d8d4 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
    d892:	1ae4      	subs	r4, r4, r3
    d894:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d898:	4423      	add	r3, r4
    d89a:	6013      	str	r3, [r2, #0]
    d89c:	f014 fd96 	bl	223cc <z_spin_unlock_valid>
    d8a0:	b960      	cbnz	r0, d8bc <rtc1_nrf_isr+0x78>
    d8a2:	4912      	ldr	r1, [pc, #72]	; (d8ec <rtc1_nrf_isr+0xa8>)
    d8a4:	2372      	movs	r3, #114	; 0x72
    d8a6:	4a0d      	ldr	r2, [pc, #52]	; (d8dc <rtc1_nrf_isr+0x98>)
    d8a8:	480d      	ldr	r0, [pc, #52]	; (d8e0 <rtc1_nrf_isr+0x9c>)
    d8aa:	f016 fae5 	bl	23e78 <printk>
    d8ae:	4810      	ldr	r0, [pc, #64]	; (d8f0 <rtc1_nrf_isr+0xac>)
    d8b0:	f016 fae2 	bl	23e78 <printk>
    d8b4:	2172      	movs	r1, #114	; 0x72
    d8b6:	4809      	ldr	r0, [pc, #36]	; (d8dc <rtc1_nrf_isr+0x98>)
    d8b8:	f016 faeb 	bl	23e92 <assert_post_action>
	__asm__ volatile(
    d8bc:	f385 8811 	msr	BASEPRI, r5
    d8c0:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d8c4:	4620      	mov	r0, r4
}
    d8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d8ca:	f015 b8b9 	b.w	22a40 <z_clock_announce>
    d8ce:	bf00      	nop
    d8d0:	40015000 	.word	0x40015000
    d8d4:	2002002c 	.word	0x2002002c
    d8d8:	00026ae6 	.word	0x00026ae6
    d8dc:	00026abf 	.word	0x00026abf
    d8e0:	0002694b 	.word	0x0002694b
    d8e4:	00026afb 	.word	0x00026afb
    d8e8:	20020028 	.word	0x20020028
    d8ec:	00026b10 	.word	0x00026b10
    d8f0:	00026b27 	.word	0x00026b27

0000d8f4 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    d8f4:	b570      	push	{r4, r5, r6, lr}
    d8f6:	4818      	ldr	r0, [pc, #96]	; (d958 <z_clock_driver_init+0x64>)
    d8f8:	f012 fbe6 	bl	200c8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    d8fc:	b348      	cbz	r0, d952 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d8fe:	6843      	ldr	r3, [r0, #4]
    d900:	2100      	movs	r1, #0
    d902:	681b      	ldr	r3, [r3, #0]
    d904:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    d906:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d908:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    d90a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d90e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d912:	4d12      	ldr	r5, [pc, #72]	; (d95c <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d914:	4631      	mov	r1, r6
    d916:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d91a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d91e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d922:	4b0f      	ldr	r3, [pc, #60]	; (d960 <z_clock_driver_init+0x6c>)
    d924:	2015      	movs	r0, #21
    d926:	601c      	str	r4, [r3, #0]
    d928:	4b0e      	ldr	r3, [pc, #56]	; (d964 <z_clock_driver_init+0x70>)
    d92a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d92e:	4622      	mov	r2, r4
    d930:	f000 f9ce 	bl	dcd0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d934:	2015      	movs	r0, #21
    d936:	f000 f9bb 	bl	dcb0 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d93a:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d93c:	4b0a      	ldr	r3, [pc, #40]	; (d968 <z_clock_driver_init+0x74>)
    d93e:	601e      	str	r6, [r3, #0]
    d940:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    d942:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    d946:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d94c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    d950:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d952:	f04f 30ff 	mov.w	r0, #4294967295
    d956:	e7fb      	b.n	d950 <z_clock_driver_init+0x5c>
    d958:	00026a6e 	.word	0x00026a6e
    d95c:	40015000 	.word	0x40015000
    d960:	40015140 	.word	0x40015140
    d964:	e000e100 	.word	0xe000e100
    d968:	40015008 	.word	0x40015008

0000d96c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d96c:	b538      	push	{r3, r4, r5, lr}
    d96e:	4b34      	ldr	r3, [pc, #208]	; (da40 <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d970:	f1b0 3fff 	cmp.w	r0, #4294967295
    d974:	bf08      	it	eq
    d976:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d978:	1e44      	subs	r4, r0, #1
    d97a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    d97e:	429c      	cmp	r4, r3
    d980:	bfa8      	it	ge
    d982:	461c      	movge	r4, r3
	__asm__ volatile(
    d984:	f04f 0320 	mov.w	r3, #32
    d988:	f3ef 8511 	mrs	r5, BASEPRI
    d98c:	f383 8811 	msr	BASEPRI, r3
    d990:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d994:	482b      	ldr	r0, [pc, #172]	; (da44 <z_clock_set_timeout+0xd8>)
    d996:	f014 fd0b 	bl	223b0 <z_spin_lock_valid>
    d99a:	b960      	cbnz	r0, d9b6 <z_clock_set_timeout+0x4a>
    d99c:	492a      	ldr	r1, [pc, #168]	; (da48 <z_clock_set_timeout+0xdc>)
    d99e:	235f      	movs	r3, #95	; 0x5f
    d9a0:	4a2a      	ldr	r2, [pc, #168]	; (da4c <z_clock_set_timeout+0xe0>)
    d9a2:	482b      	ldr	r0, [pc, #172]	; (da50 <z_clock_set_timeout+0xe4>)
    d9a4:	f016 fa68 	bl	23e78 <printk>
    d9a8:	482a      	ldr	r0, [pc, #168]	; (da54 <z_clock_set_timeout+0xe8>)
    d9aa:	f016 fa65 	bl	23e78 <printk>
    d9ae:	215f      	movs	r1, #95	; 0x5f
    d9b0:	4826      	ldr	r0, [pc, #152]	; (da4c <z_clock_set_timeout+0xe0>)
    d9b2:	f016 fa6e 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
    d9b6:	4823      	ldr	r0, [pc, #140]	; (da44 <z_clock_set_timeout+0xd8>)
    d9b8:	f014 fd18 	bl	223ec <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    d9bc:	4a26      	ldr	r2, [pc, #152]	; (da58 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    d9be:	4927      	ldr	r1, [pc, #156]	; (da5c <z_clock_set_timeout+0xf0>)
    d9c0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    d9c4:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
    d9c6:	1a58      	subs	r0, r3, r1
    d9c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    d9cc:	3101      	adds	r1, #1
    d9ce:	4408      	add	r0, r1
    d9d0:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
    d9d2:	1ac3      	subs	r3, r0, r3
    d9d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d9d8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d9dc:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
    d9de:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    d9e2:	d915      	bls.n	da10 <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d9e4:	4817      	ldr	r0, [pc, #92]	; (da44 <z_clock_set_timeout+0xd8>)
    d9e6:	f014 fcf1 	bl	223cc <z_spin_unlock_valid>
    d9ea:	b960      	cbnz	r0, da06 <z_clock_set_timeout+0x9a>
    d9ec:	491c      	ldr	r1, [pc, #112]	; (da60 <z_clock_set_timeout+0xf4>)
    d9ee:	2372      	movs	r3, #114	; 0x72
    d9f0:	4a16      	ldr	r2, [pc, #88]	; (da4c <z_clock_set_timeout+0xe0>)
    d9f2:	4817      	ldr	r0, [pc, #92]	; (da50 <z_clock_set_timeout+0xe4>)
    d9f4:	f016 fa40 	bl	23e78 <printk>
    d9f8:	481a      	ldr	r0, [pc, #104]	; (da64 <z_clock_set_timeout+0xf8>)
    d9fa:	f016 fa3d 	bl	23e78 <printk>
    d9fe:	2172      	movs	r1, #114	; 0x72
    da00:	4812      	ldr	r0, [pc, #72]	; (da4c <z_clock_set_timeout+0xe0>)
    da02:	f016 fa46 	bl	23e92 <assert_post_action>
	__asm__ volatile(
    da06:	f385 8811 	msr	BASEPRI, r5
    da0a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    da0e:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
    da10:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    da14:	4914      	ldr	r1, [pc, #80]	; (da68 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
    da16:	1ac3      	subs	r3, r0, r3
    da18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    da1c:	1e5c      	subs	r4, r3, #1
    da1e:	428c      	cmp	r4, r1
    da20:	d905      	bls.n	da2e <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    da26:	4b11      	ldr	r3, [pc, #68]	; (da6c <z_clock_set_timeout+0x100>)
    da28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    da2c:	e7da      	b.n	d9e4 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
    da2e:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    da30:	bf02      	ittt	eq
    da32:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    da34:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    da38:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    da3c:	e7d2      	b.n	d9e4 <z_clock_set_timeout+0x78>
    da3e:	bf00      	nop
    da40:	00fffffe 	.word	0x00fffffe
    da44:	2002002c 	.word	0x2002002c
    da48:	00026ae6 	.word	0x00026ae6
    da4c:	00026abf 	.word	0x00026abf
    da50:	0002694b 	.word	0x0002694b
    da54:	00026afb 	.word	0x00026afb
    da58:	40015000 	.word	0x40015000
    da5c:	20020028 	.word	0x20020028
    da60:	00026b10 	.word	0x00026b10
    da64:	00026b27 	.word	0x00026b27
    da68:	007ffffe 	.word	0x007ffffe
    da6c:	e000e100 	.word	0xe000e100

0000da70 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    da70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    da72:	f04f 0320 	mov.w	r3, #32
    da76:	f3ef 8511 	mrs	r5, BASEPRI
    da7a:	f383 8811 	msr	BASEPRI, r3
    da7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    da82:	4819      	ldr	r0, [pc, #100]	; (dae8 <z_clock_elapsed+0x78>)
    da84:	f014 fc94 	bl	223b0 <z_spin_lock_valid>
    da88:	b960      	cbnz	r0, daa4 <z_clock_elapsed+0x34>
    da8a:	4918      	ldr	r1, [pc, #96]	; (daec <z_clock_elapsed+0x7c>)
    da8c:	235f      	movs	r3, #95	; 0x5f
    da8e:	4a18      	ldr	r2, [pc, #96]	; (daf0 <z_clock_elapsed+0x80>)
    da90:	4818      	ldr	r0, [pc, #96]	; (daf4 <z_clock_elapsed+0x84>)
    da92:	f016 f9f1 	bl	23e78 <printk>
    da96:	4818      	ldr	r0, [pc, #96]	; (daf8 <z_clock_elapsed+0x88>)
    da98:	f016 f9ee 	bl	23e78 <printk>
    da9c:	215f      	movs	r1, #95	; 0x5f
    da9e:	4814      	ldr	r0, [pc, #80]	; (daf0 <z_clock_elapsed+0x80>)
    daa0:	f016 f9f7 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
    daa4:	4810      	ldr	r0, [pc, #64]	; (dae8 <z_clock_elapsed+0x78>)
    daa6:	f014 fca1 	bl	223ec <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    daaa:	4b14      	ldr	r3, [pc, #80]	; (dafc <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    daac:	480e      	ldr	r0, [pc, #56]	; (dae8 <z_clock_elapsed+0x78>)
    daae:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    dab2:	4b13      	ldr	r3, [pc, #76]	; (db00 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
    dab4:	681b      	ldr	r3, [r3, #0]
    dab6:	1ae4      	subs	r4, r4, r3
    dab8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    dabc:	f014 fc86 	bl	223cc <z_spin_unlock_valid>
    dac0:	b960      	cbnz	r0, dadc <z_clock_elapsed+0x6c>
    dac2:	4910      	ldr	r1, [pc, #64]	; (db04 <z_clock_elapsed+0x94>)
    dac4:	2372      	movs	r3, #114	; 0x72
    dac6:	4a0a      	ldr	r2, [pc, #40]	; (daf0 <z_clock_elapsed+0x80>)
    dac8:	480a      	ldr	r0, [pc, #40]	; (daf4 <z_clock_elapsed+0x84>)
    daca:	f016 f9d5 	bl	23e78 <printk>
    dace:	480e      	ldr	r0, [pc, #56]	; (db08 <z_clock_elapsed+0x98>)
    dad0:	f016 f9d2 	bl	23e78 <printk>
    dad4:	2172      	movs	r1, #114	; 0x72
    dad6:	4806      	ldr	r0, [pc, #24]	; (daf0 <z_clock_elapsed+0x80>)
    dad8:	f016 f9db 	bl	23e92 <assert_post_action>
	__asm__ volatile(
    dadc:	f385 8811 	msr	BASEPRI, r5
    dae0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    dae4:	4620      	mov	r0, r4
    dae6:	bd38      	pop	{r3, r4, r5, pc}
    dae8:	2002002c 	.word	0x2002002c
    daec:	00026ae6 	.word	0x00026ae6
    daf0:	00026abf 	.word	0x00026abf
    daf4:	0002694b 	.word	0x0002694b
    daf8:	00026afb 	.word	0x00026afb
    dafc:	40015000 	.word	0x40015000
    db00:	20020028 	.word	0x20020028
    db04:	00026b10 	.word	0x00026b10
    db08:	00026b27 	.word	0x00026b27

0000db0c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    db0c:	4804      	ldr	r0, [pc, #16]	; (db20 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    db0e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    db10:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    db12:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    db14:	d003      	beq.n	db1e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    db16:	4903      	ldr	r1, [pc, #12]	; (db24 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    db18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    db1c:	600a      	str	r2, [r1, #0]

0000db1e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    db1e:	4770      	bx	lr
    ldr r0, =_kernel
    db20:	20025b0c 	.word	0x20025b0c
    ldr r1, =_SCS_ICSR
    db24:	e000ed04 	.word	0xe000ed04

0000db28 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db28:	4929      	ldr	r1, [pc, #164]	; (dbd0 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db2a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    db2c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    db30:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    db32:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    db36:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    db3a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    db3e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    db42:	d004      	beq.n	db4e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    db44:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    db48:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    db4c:	e007      	b.n	db5e <out_fp_endif>

0000db4e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    db4e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    db52:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    db56:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    db5a:	f050 0004 	orrs.w	r0, r0, #4

0000db5e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    db5e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db62:	2020      	movs	r0, #32
    msr BASEPRI, r0
    db64:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    db68:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    db6c:	4f19      	ldr	r7, [pc, #100]	; (dbd4 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    db6e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    db72:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    db74:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    db76:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    db78:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    db7a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    db7c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    db7e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    db82:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    db86:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    db8a:	d105      	bne.n	db98 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    db8c:	2300      	movs	r3, #0
    vmsr fpscr, r3
    db8e:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    db92:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    db96:	e005      	b.n	dba4 <in_fp_endif>

0000db98 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    db98:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    db9c:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    dba0:	ec90 8a10 	vldmia	r0, {s16-s31}

0000dba4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    dba4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    dba8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    dbac:	f383 8814 	msr	CONTROL, r3
    isb
    dbb0:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    dbb4:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    dbb6:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    dbb8:	f016 f9ec 	bl	23f94 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    dbbc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dbc0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    dbc4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dbc8:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dbcc:	4770      	bx	lr
    dbce:	0000      	.short	0x0000
    ldr r1, =_kernel
    dbd0:	20025b0c 	.word	0x20025b0c
    ldr v4, =_SCS_ICSR
    dbd4:	e000ed04 	.word	0xe000ed04

0000dbd8 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    dbd8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dbdc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dbde:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dbe2:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dbe6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    dbe8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dbec:	2902      	cmp	r1, #2
    beq _oops
    dbee:	d0ff      	beq.n	dbf0 <_oops>

0000dbf0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dbf0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dbf2:	f016 f9c4 	bl	23f7e <z_do_kernel_oops>
    pop {r0, pc}
    dbf6:	bd01      	pop	{r0, pc}

0000dbf8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    dbf8:	4901      	ldr	r1, [pc, #4]	; (dc00 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    dbfa:	2210      	movs	r2, #16
	str r2, [r1]
    dbfc:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    dbfe:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    dc00:	e000ed10 	.word	0xe000ed10

0000dc04 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    dc04:	4040      	eors	r0, r0
	msr BASEPRI, r0
    dc06:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    dc0a:	bf30      	wfi

	bx lr
    dc0c:	4770      	bx	lr
    dc0e:	bf00      	nop

0000dc10 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    dc10:	4040      	eors	r0, r0
	msr BASEPRI, r0
    dc12:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    dc16:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    dc1a:	4671      	mov	r1, lr
	tst r1, r0
    dc1c:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    dc1e:	d002      	beq.n	dc26 <_s_stack_frame_msp>
	mrs r0, PSP
    dc20:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    dc24:	d101      	bne.n	dc2a <_s_stack_frame_endif>

0000dc26 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    dc26:	f3ef 8008 	mrs	r0, MSP

0000dc2a <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    dc2a:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    dc2c:	b501      	push	{r0, lr}
	bl z_arm_fault
    dc2e:	f000 f9b5 	bl	df9c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    dc32:	bd01      	pop	{r0, pc}

0000dc34 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dc34:	bf30      	wfi
    b z_SysNmiOnReset
    dc36:	f7ff bffd 	b.w	dc34 <z_SysNmiOnReset>
    dc3a:	bf00      	nop

0000dc3c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dc3c:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    dc3e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dc40:	4a0b      	ldr	r2, [pc, #44]	; (dc70 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dc42:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    dc44:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dc46:	bf1e      	ittt	ne
	movne	r1, #0
    dc48:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dc4a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    dc4c:	f017 f9da 	blne	25004 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc50:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc52:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc56:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc5a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    dc5e:	4905      	ldr	r1, [pc, #20]	; (dc74 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc60:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc62:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    dc64:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc66:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc6a:	4903      	ldr	r1, [pc, #12]	; (dc78 <_isr_wrapper+0x3c>)
	bx r1
    dc6c:	4708      	bx	r1
    dc6e:	0000      	.short	0x0000
	ldr r2, =_kernel
    dc70:	20025b0c 	.word	0x20025b0c
	ldr r1, =_sw_isr_table
    dc74:	0002527c 	.word	0x0002527c
	ldr r1, =z_arm_int_exit
    dc78:	0000db0d 	.word	0x0000db0d

0000dc7c <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    dc7c:	4a09      	ldr	r2, [pc, #36]	; (dca4 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    dc7e:	490a      	ldr	r1, [pc, #40]	; (dca8 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    dc80:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    dc82:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    dc84:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    dc86:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    dc88:	4908      	ldr	r1, [pc, #32]	; (dcac <z_arch_swap+0x30>)
    dc8a:	684b      	ldr	r3, [r1, #4]
    dc8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dc90:	604b      	str	r3, [r1, #4]
    dc92:	2300      	movs	r3, #0
    dc94:	f383 8811 	msr	BASEPRI, r3
    dc98:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dc9c:	6893      	ldr	r3, [r2, #8]
}
    dc9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    dca0:	4770      	bx	lr
    dca2:	bf00      	nop
    dca4:	20025b0c 	.word	0x20025b0c
    dca8:	000267e8 	.word	0x000267e8
    dcac:	e000ed00 	.word	0xe000ed00

0000dcb0 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dcb0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	db08      	blt.n	dcc8 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dcb6:	2201      	movs	r2, #1
    dcb8:	f000 001f 	and.w	r0, r0, #31
    dcbc:	fa02 f000 	lsl.w	r0, r2, r0
    dcc0:	4a02      	ldr	r2, [pc, #8]	; (dccc <z_arch_irq_enable+0x1c>)
    dcc2:	095b      	lsrs	r3, r3, #5
    dcc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dcc8:	4770      	bx	lr
    dcca:	bf00      	nop
    dccc:	e000e100 	.word	0xe000e100

0000dcd0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    dcd0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    dcd2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    dcd4:	2c07      	cmp	r4, #7
{
    dcd6:	4605      	mov	r5, r0
    dcd8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    dcda:	d90e      	bls.n	dcfa <z_arm_irq_priority_set+0x2a>
    dcdc:	2360      	movs	r3, #96	; 0x60
    dcde:	4a10      	ldr	r2, [pc, #64]	; (dd20 <z_arm_irq_priority_set+0x50>)
    dce0:	4910      	ldr	r1, [pc, #64]	; (dd24 <z_arm_irq_priority_set+0x54>)
    dce2:	4811      	ldr	r0, [pc, #68]	; (dd28 <z_arm_irq_priority_set+0x58>)
    dce4:	f016 f8c8 	bl	23e78 <printk>
    dce8:	4631      	mov	r1, r6
    dcea:	4810      	ldr	r0, [pc, #64]	; (dd2c <z_arm_irq_priority_set+0x5c>)
    dcec:	2207      	movs	r2, #7
    dcee:	f016 f8c3 	bl	23e78 <printk>
    dcf2:	2160      	movs	r1, #96	; 0x60
    dcf4:	480a      	ldr	r0, [pc, #40]	; (dd20 <z_arm_irq_priority_set+0x50>)
    dcf6:	f016 f8cc 	bl	23e92 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dcfa:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dcfc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcfe:	bfa8      	it	ge
    dd00:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    dd04:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd08:	bfb8      	it	lt
    dd0a:	4b09      	ldrlt	r3, [pc, #36]	; (dd30 <z_arm_irq_priority_set+0x60>)
    dd0c:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd0e:	bfab      	itete	ge
    dd10:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd14:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd18:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd1c:	555c      	strblt	r4, [r3, r5]
}
    dd1e:	bd70      	pop	{r4, r5, r6, pc}
    dd20:	00026b3a 	.word	0x00026b3a
    dd24:	00026b69 	.word	0x00026b69
    dd28:	0002694b 	.word	0x0002694b
    dd2c:	00026b84 	.word	0x00026b84
    dd30:	e000ed14 	.word	0xe000ed14

0000dd34 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    dd34:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    dd36:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    dd38:	4b04      	ldr	r3, [pc, #16]	; (dd4c <_arch_isr_direct_pm+0x18>)
    dd3a:	6a18      	ldr	r0, [r3, #32]
    dd3c:	b118      	cbz	r0, dd46 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    dd3e:	2200      	movs	r2, #0
    dd40:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    dd42:	f017 f95f 	bl	25004 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    dd46:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    dd48:	bd08      	pop	{r3, pc}
    dd4a:	bf00      	nop
    dd4c:	20025b0c 	.word	0x20025b0c

0000dd50 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    dd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    dd56:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    dd58:	2e0f      	cmp	r6, #15
{
    dd5a:	4689      	mov	r9, r1
    dd5c:	4690      	mov	r8, r2
    dd5e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    dd60:	d102      	bne.n	dd68 <z_arch_new_thread+0x18>
    dd62:	4b1e      	ldr	r3, [pc, #120]	; (dddc <z_arch_new_thread+0x8c>)
    dd64:	429f      	cmp	r7, r3
    dd66:	d014      	beq.n	dd92 <z_arch_new_thread+0x42>
    dd68:	f106 0310 	add.w	r3, r6, #16
    dd6c:	2b1e      	cmp	r3, #30
    dd6e:	d910      	bls.n	dd92 <z_arch_new_thread+0x42>
    dd70:	232e      	movs	r3, #46	; 0x2e
    dd72:	4a1b      	ldr	r2, [pc, #108]	; (dde0 <z_arch_new_thread+0x90>)
    dd74:	491b      	ldr	r1, [pc, #108]	; (dde4 <z_arch_new_thread+0x94>)
    dd76:	481c      	ldr	r0, [pc, #112]	; (dde8 <z_arch_new_thread+0x98>)
    dd78:	f016 f87e 	bl	23e78 <printk>
    dd7c:	4631      	mov	r1, r6
    dd7e:	481b      	ldr	r0, [pc, #108]	; (ddec <z_arch_new_thread+0x9c>)
    dd80:	f06f 030f 	mvn.w	r3, #15
    dd84:	220e      	movs	r2, #14
    dd86:	f016 f877 	bl	23e78 <printk>
    dd8a:	212e      	movs	r1, #46	; 0x2e
    dd8c:	4814      	ldr	r0, [pc, #80]	; (dde0 <z_arch_new_thread+0x90>)
    dd8e:	f016 f880 	bl	23e92 <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    dd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd94:	2204      	movs	r2, #4
    dd96:	4631      	mov	r1, r6
    dd98:	4628      	mov	r0, r5
    dd9a:	f017 f9f6 	bl	2518a <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    dd9e:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    dda0:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    dda4:	4912      	ldr	r1, [pc, #72]	; (ddf0 <z_arch_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    dda6:	f1a4 0320 	sub.w	r3, r4, #32
    ddaa:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    ddae:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    ddb2:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    ddb6:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
    ddba:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ddbc:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    ddbe:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ddc0:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    ddc2:	9909      	ldr	r1, [sp, #36]	; 0x24
    ddc4:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    ddc6:	990a      	ldr	r1, [sp, #40]	; 0x28
    ddc8:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    ddca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ddce:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    ddd0:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    ddd2:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    ddd4:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ddd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dddc:	00020195 	.word	0x00020195
    dde0:	00026bb9 	.word	0x00026bb9
    dde4:	00026be4 	.word	0x00026be4
    dde8:	0002694b 	.word	0x0002694b
    ddec:	00026c71 	.word	0x00026c71
    ddf0:	00023b23 	.word	0x00023b23

0000ddf4 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddf8:	461f      	mov	r7, r3
    ddfa:	4606      	mov	r6, r0
    ddfc:	460c      	mov	r4, r1
    ddfe:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    de00:	2300      	movs	r3, #0
    de02:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    de06:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    de0a:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    de0e:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    de12:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    de16:	f000 f967 	bl	e0e8 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    de1a:	4b0b      	ldr	r3, [pc, #44]	; (de48 <z_arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
    de1c:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    de1e:	4630      	mov	r0, r6
	_current = main_thread;
    de20:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    de22:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    de26:	f016 f8b5 	bl	23f94 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    de2a:	4638      	mov	r0, r7
    de2c:	f384 8809 	msr	PSP, r4
    de30:	b663      	cpsie	if
    de32:	f04f 0100 	mov.w	r1, #0
    de36:	f381 8811 	msr	BASEPRI, r1
    de3a:	f3bf 8f6f 	isb	sy
    de3e:	2100      	movs	r1, #0
    de40:	2200      	movs	r2, #0
    de42:	2300      	movs	r3, #0
    de44:	f015 fe6d 	bl	23b22 <z_thread_entry>
    de48:	20025b0c 	.word	0x20025b0c

0000de4c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    de4c:	4a11      	ldr	r2, [pc, #68]	; (de94 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    de4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    de50:	4b11      	ldr	r3, [pc, #68]	; (de98 <z_arm_prep_c+0x4c>)
    de52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    de56:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    de58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    de60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    de64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    de68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    de6c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    de70:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    de74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de78:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    de7c:	2300      	movs	r3, #0
    de7e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    de82:	f012 f9a1 	bl	201c8 <z_bss_zero>
	z_data_copy();
    de86:	f012 f9a9 	bl	201dc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    de8a:	f000 f8e3 	bl	e054 <z_arm_int_lib_init>
	z_cstart();
    de8e:	f012 f9d7 	bl	20240 <z_cstart>
    de92:	bf00      	nop
    de94:	0000c000 	.word	0x0000c000
    de98:	e000ed00 	.word	0xe000ed00

0000de9c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de9c:	f016 f800 	bl	23ea0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dea0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dea2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    dea6:	4808      	ldr	r0, [pc, #32]	; (dec8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    dea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    deac:	1840      	adds	r0, r0, r1
    msr PSP, r0
    deae:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    deb2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    deb6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    deb8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    deba:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    debe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dec2:	f7ff ffc3 	bl	de4c <z_arm_prep_c>
    dec6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dec8:	200280e0 	.word	0x200280e0

0000decc <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    decc:	4b0d      	ldr	r3, [pc, #52]	; (df04 <bus_fault.isra.2+0x38>)
    dece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ded0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ded2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ded4:	0592      	lsls	r2, r2, #22
    ded6:	d508      	bpl.n	deea <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    ded8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    deda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dedc:	0412      	lsls	r2, r2, #16
    dede:	d504      	bpl.n	deea <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    dee0:	b118      	cbz	r0, deea <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    dee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    deea:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    deec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    deee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    def0:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    def2:	4a04      	ldr	r2, [pc, #16]	; (df04 <bus_fault.isra.2+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    def4:	bf58      	it	pl
    def6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    def8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    defa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    defe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df00:	7008      	strb	r0, [r1, #0]

	return reason;
}
    df02:	4770      	bx	lr
    df04:	e000ed00 	.word	0xe000ed00

0000df08 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    df08:	4b07      	ldr	r3, [pc, #28]	; (df28 <usage_fault.isra.3+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    df0a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    df0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    df0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    df10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    df12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    df14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    df16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    df18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    df1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df1c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    df20:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    df24:	629a      	str	r2, [r3, #40]	; 0x28
}
    df26:	4770      	bx	lr
    df28:	e000ed00 	.word	0xe000ed00

0000df2c <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df2c:	4b16      	ldr	r3, [pc, #88]	; (df88 <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df2e:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    df32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    df34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df36:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    df38:	0791      	lsls	r1, r2, #30
    df3a:	d508      	bpl.n	df4e <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
    df3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    df3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df40:	0612      	lsls	r2, r2, #24
    df42:	d504      	bpl.n	df4e <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
    df44:	b118      	cbz	r0, df4e <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    df46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    df4c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    df4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    df50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    df52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df54:	06db      	lsls	r3, r3, #27
    df56:	d50e      	bpl.n	df76 <mem_manage_fault.isra.6+0x4a>
	__ASSERT(0,
    df58:	490c      	ldr	r1, [pc, #48]	; (df8c <mem_manage_fault.isra.6+0x60>)
    df5a:	f240 133d 	movw	r3, #317	; 0x13d
    df5e:	4a0c      	ldr	r2, [pc, #48]	; (df90 <mem_manage_fault.isra.6+0x64>)
    df60:	480c      	ldr	r0, [pc, #48]	; (df94 <mem_manage_fault.isra.6+0x68>)
    df62:	f015 ff89 	bl	23e78 <printk>
    df66:	480c      	ldr	r0, [pc, #48]	; (df98 <mem_manage_fault.isra.6+0x6c>)
    df68:	f015 ff86 	bl	23e78 <printk>
    df6c:	f240 113d 	movw	r1, #317	; 0x13d
    df70:	4807      	ldr	r0, [pc, #28]	; (df90 <mem_manage_fault.isra.6+0x64>)
    df72:	f015 ff8e 	bl	23e92 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    df76:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    df78:	4a03      	ldr	r2, [pc, #12]	; (df88 <mem_manage_fault.isra.6+0x5c>)
    df7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df7c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    df80:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df82:	7020      	strb	r0, [r4, #0]
}
    df84:	bd10      	pop	{r4, pc}
    df86:	bf00      	nop
    df88:	e000ed00 	.word	0xe000ed00
    df8c:	000279fa 	.word	0x000279fa
    df90:	00026ca2 	.word	0x00026ca2
    df94:	0002694b 	.word	0x0002694b
    df98:	00026cd5 	.word	0x00026cd5

0000df9c <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    df9c:	b513      	push	{r0, r1, r4, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df9e:	4a25      	ldr	r2, [pc, #148]	; (e034 <z_arm_fault+0x98>)
{
    dfa0:	4604      	mov	r4, r0
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dfa2:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    dfa6:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfaa:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dfac:	d13f      	bne.n	e02e <z_arm_fault+0x92>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dfae:	f011 0101 	ands.w	r1, r1, #1
    dfb2:	d13c      	bne.n	e02e <z_arm_fault+0x92>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    dfb8:	3b03      	subs	r3, #3
	*recoverable = false;
    dfba:	f88d 1007 	strb.w	r1, [sp, #7]
	switch (fault) {
    dfbe:	2b03      	cmp	r3, #3
    dfc0:	d833      	bhi.n	e02a <z_arm_fault+0x8e>
    dfc2:	e8df f003 	tbb	[pc, r3]
    dfc6:	2a02      	.short	0x2a02
    dfc8:	272e      	.short	0x272e
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dfca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dfcc:	079b      	lsls	r3, r3, #30
    dfce:	d42c      	bmi.n	e02a <z_arm_fault+0x8e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dfd0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    dfd2:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    dfd6:	d007      	beq.n	dfe8 <z_arm_fault+0x4c>
		if (SCB_MMFSR != 0) {
    dfd8:	4b17      	ldr	r3, [pc, #92]	; (e038 <z_arm_fault+0x9c>)
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	b163      	cbz	r3, dff8 <z_arm_fault+0x5c>
			reason = mem_manage_fault(esf, 1, recoverable);
    dfde:	2001      	movs	r0, #1
    dfe0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dfe4:	f7ff ffa2 	bl	df2c <mem_manage_fault.isra.6>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dfe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfec:	b913      	cbnz	r3, dff4 <z_arm_fault+0x58>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    dfee:	4621      	mov	r1, r4
    dff0:	f015 ffc3 	bl	23f7a <z_arm_fatal_error>
}
    dff4:	b002      	add	sp, #8
    dff6:	bd10      	pop	{r4, pc}
		} else if (SCB_BFSR != 0) {
    dff8:	4b10      	ldr	r3, [pc, #64]	; (e03c <z_arm_fault+0xa0>)
    dffa:	781b      	ldrb	r3, [r3, #0]
    dffc:	b12b      	cbz	r3, e00a <z_arm_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
    dffe:	2001      	movs	r0, #1
    e000:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e004:	f7ff ff62 	bl	decc <bus_fault.isra.2>
    e008:	e7ee      	b.n	dfe8 <z_arm_fault+0x4c>
		} else if (SCB_UFSR != 0) {
    e00a:	4b0d      	ldr	r3, [pc, #52]	; (e040 <z_arm_fault+0xa4>)
    e00c:	8818      	ldrh	r0, [r3, #0]
    e00e:	b280      	uxth	r0, r0
    e010:	2800      	cmp	r0, #0
    e012:	d0e9      	beq.n	dfe8 <z_arm_fault+0x4c>
		reason = usage_fault(esf);
    e014:	f7ff ff78 	bl	df08 <usage_fault.isra.3>
    e018:	e7e6      	b.n	dfe8 <z_arm_fault+0x4c>
		reason = mem_manage_fault(esf, 0, recoverable);
    e01a:	f10d 0107 	add.w	r1, sp, #7
    e01e:	2000      	movs	r0, #0
    e020:	e7e0      	b.n	dfe4 <z_arm_fault+0x48>
		reason = bus_fault(esf, 0, recoverable);
    e022:	f10d 0107 	add.w	r1, sp, #7
    e026:	2000      	movs	r0, #0
    e028:	e7ec      	b.n	e004 <z_arm_fault+0x68>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e02a:	2000      	movs	r0, #0
    e02c:	e7dc      	b.n	dfe8 <z_arm_fault+0x4c>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e02e:	2000      	movs	r0, #0
    e030:	e7dd      	b.n	dfee <z_arm_fault+0x52>
    e032:	bf00      	nop
    e034:	e000ed00 	.word	0xe000ed00
    e038:	e000ed28 	.word	0xe000ed28
    e03c:	e000ed29 	.word	0xe000ed29
    e040:	e000ed2a 	.word	0xe000ed2a

0000e044 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e044:	4a02      	ldr	r2, [pc, #8]	; (e050 <z_arm_fault_init+0xc>)
    e046:	6953      	ldr	r3, [r2, #20]
    e048:	f043 0310 	orr.w	r3, r3, #16
    e04c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e04e:	4770      	bx	lr
    e050:	e000ed00 	.word	0xe000ed00

0000e054 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e054:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e056:	2120      	movs	r1, #32
    e058:	4803      	ldr	r0, [pc, #12]	; (e068 <z_arm_int_lib_init+0x14>)
    e05a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e05c:	3301      	adds	r3, #1
    e05e:	2b41      	cmp	r3, #65	; 0x41
    e060:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e064:	d1f9      	bne.n	e05a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e066:	4770      	bx	lr
    e068:	e000e100 	.word	0xe000e100

0000e06c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e06c:	b538      	push	{r3, r4, r5, lr}
    e06e:	4604      	mov	r4, r0
	__asm__ volatile(
    e070:	f04f 0320 	mov.w	r3, #32
    e074:	f3ef 8511 	mrs	r5, BASEPRI
    e078:	f383 8811 	msr	BASEPRI, r3
    e07c:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    e080:	7b03      	ldrb	r3, [r0, #12]
    e082:	07db      	lsls	r3, r3, #31
    e084:	d50c      	bpl.n	e0a0 <z_impl_k_thread_abort+0x34>
    e086:	4912      	ldr	r1, [pc, #72]	; (e0d0 <z_impl_k_thread_abort+0x64>)
    e088:	2325      	movs	r3, #37	; 0x25
    e08a:	4a12      	ldr	r2, [pc, #72]	; (e0d4 <z_impl_k_thread_abort+0x68>)
    e08c:	4812      	ldr	r0, [pc, #72]	; (e0d8 <z_impl_k_thread_abort+0x6c>)
    e08e:	f015 fef3 	bl	23e78 <printk>
    e092:	4812      	ldr	r0, [pc, #72]	; (e0dc <z_impl_k_thread_abort+0x70>)
    e094:	f015 fef0 	bl	23e78 <printk>
    e098:	2125      	movs	r1, #37	; 0x25
    e09a:	480e      	ldr	r0, [pc, #56]	; (e0d4 <z_impl_k_thread_abort+0x68>)
    e09c:	f015 fef9 	bl	23e92 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e0a0:	4620      	mov	r0, r4
    e0a2:	f017 f853 	bl	2514c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e0a6:	4b0e      	ldr	r3, [pc, #56]	; (e0e0 <z_impl_k_thread_abort+0x74>)
    e0a8:	689b      	ldr	r3, [r3, #8]
    e0aa:	42a3      	cmp	r3, r4
    e0ac:	d10b      	bne.n	e0c6 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e0ae:	4b0d      	ldr	r3, [pc, #52]	; (e0e4 <z_impl_k_thread_abort+0x78>)
    e0b0:	685a      	ldr	r2, [r3, #4]
    e0b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e0b6:	b912      	cbnz	r2, e0be <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    e0b8:	4628      	mov	r0, r5
    e0ba:	f7ff fddf 	bl	dc7c <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e0be:	685a      	ldr	r2, [r3, #4]
    e0c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e0c4:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e0c6:	4628      	mov	r0, r5
}
    e0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e0cc:	f016 bfe1 	b.w	25092 <z_reschedule_irqlock>
    e0d0:	00026d49 	.word	0x00026d49
    e0d4:	00026d0f 	.word	0x00026d0f
    e0d8:	0002694b 	.word	0x0002694b
    e0dc:	00026d77 	.word	0x00026d77
    e0e0:	20025b0c 	.word	0x20025b0c
    e0e4:	e000ed00 	.word	0xe000ed00

0000e0e8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e0e8:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e0ea:	4b0e      	ldr	r3, [pc, #56]	; (e124 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e0ec:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e0ee:	9302      	str	r3, [sp, #8]
    e0f0:	4b0d      	ldr	r3, [pc, #52]	; (e128 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e0f2:	4c0e      	ldr	r4, [pc, #56]	; (e12c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e0f4:	9303      	str	r3, [sp, #12]
    e0f6:	4b0e      	ldr	r3, [pc, #56]	; (e130 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    e0f8:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    e0fa:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e0fc:	ab02      	add	r3, sp, #8
    e0fe:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e102:	4a0c      	ldr	r2, [pc, #48]	; (e134 <z_arm_configure_static_mpu_regions+0x4c>)
    e104:	4623      	mov	r3, r4
    e106:	2101      	movs	r1, #1
    e108:	f000 f934 	bl	e374 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e10c:	2300      	movs	r3, #0
    e10e:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e110:	4b09      	ldr	r3, [pc, #36]	; (e138 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e112:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e114:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e116:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e118:	9305      	str	r3, [sp, #20]
    e11a:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e11c:	f000 f94e 	bl	e3bc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e120:	b008      	add	sp, #32
    e122:	bd10      	pop	{r4, pc}
    e124:	20020000 	.word	0x20020000
    e128:	00000000 	.word	0x00000000
    e12c:	20040000 	.word	0x20040000
    e130:	00010006 	.word	0x00010006
    e134:	20020000 	.word	0x20020000
    e138:	20020000 	.word	0x20020000

0000e13c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e13c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e13e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e140:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e142:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    e146:	f004 021f 	and.w	r2, r4, #31
    e14a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e14c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e14e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e150:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e154:	4904      	ldr	r1, [pc, #16]	; (e168 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e156:	f043 0301 	orr.w	r3, r3, #1
    e15a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    e15e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e160:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e162:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e164:	bd10      	pop	{r4, pc}
    e166:	bf00      	nop
    e168:	e000ed90 	.word	0xe000ed90

0000e16c <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e170:	4680      	mov	r8, r0
    e172:	4689      	mov	r9, r1
    e174:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e176:	2700      	movs	r7, #0
	MPU->RNR = index;
    e178:	4d48      	ldr	r5, [pc, #288]	; (e29c <mpu_configure_regions.constprop.2+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    e17a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e17c:	454f      	cmp	r7, r9
    e17e:	da07      	bge.n	e190 <mpu_configure_regions.constprop.2+0x24>
		if (regions[i]->size == 0U) {
    e180:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    e184:	685e      	ldr	r6, [r3, #4]
    e186:	b3c6      	cbz	r6, e1fa <mpu_configure_regions.constprop.2+0x8e>
		&&
    e188:	2e1f      	cmp	r6, #31
    e18a:	d805      	bhi.n	e198 <mpu_configure_regions.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e18c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e190:	4620      	mov	r0, r4
    e192:	b005      	add	sp, #20
    e194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    e198:	06f2      	lsls	r2, r6, #27
    e19a:	d1f7      	bne.n	e18c <mpu_configure_regions.constprop.2+0x20>
		((part->start &
    e19c:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e1a0:	f01a 0f1f 	tst.w	sl, #31
    e1a4:	d1f2      	bne.n	e18c <mpu_configure_regions.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1a6:	4650      	mov	r0, sl
    e1a8:	f015 fb88 	bl	238bc <arm_cmse_mpu_region_get>
    e1ac:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1ae:	eb06 000a 	add.w	r0, r6, sl
    e1b2:	3801      	subs	r0, #1
    e1b4:	f015 fb82 	bl	238bc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e1b8:	4583      	cmp	fp, r0
    e1ba:	d1e7      	bne.n	e18c <mpu_configure_regions.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
    e1bc:	f11b 0f16 	cmn.w	fp, #22
    e1c0:	d0e4      	beq.n	e18c <mpu_configure_regions.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
    e1c2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e1c4:	455b      	cmp	r3, fp
    e1c6:	dbe1      	blt.n	e18c <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
    e1c8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1cc:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1ce:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    e1d2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1d6:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1d8:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1dc:	e9d1 3200 	ldrd	r3, r2, [r1]
    e1e0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e1e2:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1e4:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1e8:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e1ec:	d118      	bne.n	e220 <mpu_configure_regions.constprop.2+0xb4>
    e1ee:	4556      	cmp	r6, sl
    e1f0:	d105      	bne.n	e1fe <mpu_configure_regions.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    e1f2:	fa5f f08b 	uxtb.w	r0, fp
    e1f6:	f015 fed5 	bl	23fa4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e1fa:	3701      	adds	r7, #1
    e1fc:	e7be      	b.n	e17c <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
    e1fe:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e202:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e204:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e208:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e20c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e20e:	60ea      	str	r2, [r5, #12]
			reg_index =
    e210:	b2e0      	uxtb	r0, r4
			reg_index =
    e212:	f015 fec7 	bl	23fa4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e216:	f110 0f16 	cmn.w	r0, #22
    e21a:	d0b7      	beq.n	e18c <mpu_configure_regions.constprop.2+0x20>
			reg_index++;
    e21c:	1c44      	adds	r4, r0, #1
    e21e:	e7ec      	b.n	e1fa <mpu_configure_regions.constprop.2+0x8e>
	MPU->RNR = index;
    e220:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e224:	692a      	ldr	r2, [r5, #16]
    e226:	3b01      	subs	r3, #1
    e228:	f023 031f 	bic.w	r3, r3, #31
    e22c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e230:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e232:	4556      	cmp	r6, sl
    e234:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e236:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e238:	d0eb      	beq.n	e212 <mpu_configure_regions.constprop.2+0xa6>
			reg_index =
    e23a:	f015 feb3 	bl	23fa4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e23e:	f110 0f16 	cmn.w	r0, #22
    e242:	d0a3      	beq.n	e18c <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
    e244:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e248:	68ea      	ldr	r2, [r5, #12]
    e24a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e24e:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    e250:	f362 0304 	bfi	r3, r2, #0, #5
    e254:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e258:	692b      	ldr	r3, [r5, #16]
    e25a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e25e:	085b      	lsrs	r3, r3, #1
    e260:	f363 1247 	bfi	r2, r3, #5, #3
    e264:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e268:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    e26c:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    e26e:	e9d2 3200 	ldrd	r3, r2, [r2]
    e272:	4413      	add	r3, r2
    e274:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e276:	f023 031f 	bic.w	r3, r3, #31
    e27a:	441e      	add	r6, r3
    e27c:	eba6 060a 	sub.w	r6, r6, sl
    e280:	b2c4      	uxtb	r4, r0
    e282:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e286:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e288:	9603      	str	r6, [sp, #12]
    e28a:	f63f af7f 	bhi.w	e18c <mpu_configure_regions.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    e28e:	4620      	mov	r0, r4
    e290:	4669      	mov	r1, sp
    e292:	f7ff ff53 	bl	e13c <region_init>
			reg_index++;
    e296:	3401      	adds	r4, #1
    e298:	e7af      	b.n	e1fa <mpu_configure_regions.constprop.2+0x8e>
    e29a:	bf00      	nop
    e29c:	e000ed90 	.word	0xe000ed90

0000e2a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e2a0:	2205      	movs	r2, #5
    e2a2:	4b03      	ldr	r3, [pc, #12]	; (e2b0 <arm_core_mpu_enable+0x10>)
    e2a4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e2a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e2aa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e2ae:	4770      	bx	lr
    e2b0:	e000ed90 	.word	0xe000ed90

0000e2b4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e2b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e2b8:	2200      	movs	r2, #0
    e2ba:	4b01      	ldr	r3, [pc, #4]	; (e2c0 <arm_core_mpu_disable+0xc>)
    e2bc:	605a      	str	r2, [r3, #4]
}
    e2be:	4770      	bx	lr
    e2c0:	e000ed90 	.word	0xe000ed90

0000e2c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e2c6:	4f21      	ldr	r7, [pc, #132]	; (e34c <arm_mpu_init+0x88>)
    e2c8:	683e      	ldr	r6, [r7, #0]
    e2ca:	2e10      	cmp	r6, #16
    e2cc:	d913      	bls.n	e2f6 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e2ce:	f240 1307 	movw	r3, #263	; 0x107
    e2d2:	4a1f      	ldr	r2, [pc, #124]	; (e350 <arm_mpu_init+0x8c>)
    e2d4:	491f      	ldr	r1, [pc, #124]	; (e354 <arm_mpu_init+0x90>)
    e2d6:	4820      	ldr	r0, [pc, #128]	; (e358 <arm_mpu_init+0x94>)
    e2d8:	f015 fdce 	bl	23e78 <printk>
    e2dc:	2210      	movs	r2, #16
    e2de:	4631      	mov	r1, r6
    e2e0:	481e      	ldr	r0, [pc, #120]	; (e35c <arm_mpu_init+0x98>)
    e2e2:	f015 fdc9 	bl	23e78 <printk>
    e2e6:	481a      	ldr	r0, [pc, #104]	; (e350 <arm_mpu_init+0x8c>)
    e2e8:	f240 1107 	movw	r1, #263	; 0x107
    e2ec:	f015 fdd1 	bl	23e92 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e2f0:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e2f6:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e2f8:	f7ff ffdc 	bl	e2b4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e2fc:	4d18      	ldr	r5, [pc, #96]	; (e360 <arm_mpu_init+0x9c>)
    e2fe:	4a19      	ldr	r2, [pc, #100]	; (e364 <arm_mpu_init+0xa0>)
    e300:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e302:	42a6      	cmp	r6, r4
    e304:	d119      	bne.n	e33a <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    e306:	4b18      	ldr	r3, [pc, #96]	; (e368 <arm_mpu_init+0xa4>)
    e308:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    e30a:	f7ff ffc9 	bl	e2a0 <arm_core_mpu_enable>
	__ASSERT(
    e30e:	682b      	ldr	r3, [r5, #0]
    e310:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e314:	2b10      	cmp	r3, #16
    e316:	d00e      	beq.n	e336 <arm_mpu_init+0x72>
    e318:	4914      	ldr	r1, [pc, #80]	; (e36c <arm_mpu_init+0xa8>)
    e31a:	f44f 7394 	mov.w	r3, #296	; 0x128
    e31e:	4a0c      	ldr	r2, [pc, #48]	; (e350 <arm_mpu_init+0x8c>)
    e320:	480d      	ldr	r0, [pc, #52]	; (e358 <arm_mpu_init+0x94>)
    e322:	f015 fda9 	bl	23e78 <printk>
    e326:	4812      	ldr	r0, [pc, #72]	; (e370 <arm_mpu_init+0xac>)
    e328:	f015 fda6 	bl	23e78 <printk>
    e32c:	f44f 7194 	mov.w	r1, #296	; 0x128
    e330:	4807      	ldr	r0, [pc, #28]	; (e350 <arm_mpu_init+0x8c>)
    e332:	f015 fdae 	bl	23e92 <assert_post_action>
	return 0;
    e336:	2000      	movs	r0, #0
    e338:	e7dc      	b.n	e2f4 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e33a:	6879      	ldr	r1, [r7, #4]
    e33c:	4620      	mov	r0, r4
    e33e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e342:	f7ff fefb 	bl	e13c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e346:	3401      	adds	r4, #1
    e348:	e7db      	b.n	e302 <arm_mpu_init+0x3e>
    e34a:	bf00      	nop
    e34c:	00025588 	.word	0x00025588
    e350:	00026e1a 	.word	0x00026e1a
    e354:	000279fa 	.word	0x000279fa
    e358:	0002694b 	.word	0x0002694b
    e35c:	00026e53 	.word	0x00026e53
    e360:	e000ed90 	.word	0xe000ed90
    e364:	0044ffaa 	.word	0x0044ffaa
    e368:	20025c32 	.word	0x20025c32
    e36c:	00026e87 	.word	0x00026e87
    e370:	00026ed8 	.word	0x00026ed8

0000e374 <arm_core_mpu_configure_static_mpu_regions>:
{
    e374:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e376:	4c0c      	ldr	r4, [pc, #48]	; (e3a8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e378:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    e37a:	7822      	ldrb	r2, [r4, #0]
    e37c:	f7ff fef6 	bl	e16c <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e380:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e382:	3016      	adds	r0, #22
    e384:	d10f      	bne.n	e3a6 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e386:	23cd      	movs	r3, #205	; 0xcd
    e388:	4a08      	ldr	r2, [pc, #32]	; (e3ac <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e38a:	4909      	ldr	r1, [pc, #36]	; (e3b0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    e38c:	4809      	ldr	r0, [pc, #36]	; (e3b4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    e38e:	f015 fd73 	bl	23e78 <printk>
    e392:	4629      	mov	r1, r5
    e394:	4808      	ldr	r0, [pc, #32]	; (e3b8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    e396:	f015 fd6f 	bl	23e78 <printk>
}
    e39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e39e:	21cd      	movs	r1, #205	; 0xcd
    e3a0:	4802      	ldr	r0, [pc, #8]	; (e3ac <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e3a2:	f015 bd76 	b.w	23e92 <assert_post_action>
}
    e3a6:	bd38      	pop	{r3, r4, r5, pc}
    e3a8:	20025c32 	.word	0x20025c32
    e3ac:	00026e1a 	.word	0x00026e1a
    e3b0:	000279fa 	.word	0x000279fa
    e3b4:	0002694b 	.word	0x0002694b
    e3b8:	00026dbf 	.word	0x00026dbf

0000e3bc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3c0:	460f      	mov	r7, r1
    e3c2:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3c4:	2600      	movs	r6, #0
    e3c6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; e48c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e3ca:	f8df a0c4 	ldr.w	sl, [pc, #196]	; e490 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
    e3ce:	4c2a      	ldr	r4, [pc, #168]	; (e478 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3d0:	42be      	cmp	r6, r7
    e3d2:	db02      	blt.n	e3da <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
    e3d4:	b003      	add	sp, #12
    e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e3da:	f8d8 b004 	ldr.w	fp, [r8, #4]
    e3de:	f1bb 0f00 	cmp.w	fp, #0
    e3e2:	d045      	beq.n	e470 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
    e3e4:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3e8:	4618      	mov	r0, r3
    e3ea:	9301      	str	r3, [sp, #4]
    e3ec:	f015 fa66 	bl	238bc <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3f0:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3f2:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3f4:	eb0b 0003 	add.w	r0, fp, r3
    e3f8:	3801      	subs	r0, #1
    e3fa:	f015 fa5f 	bl	238bc <arm_cmse_mpu_region_get>
    e3fe:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    e400:	4285      	cmp	r5, r0
    e402:	fb03 f306 	mul.w	r3, r3, r6
    e406:	d014      	beq.n	e432 <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
    e408:	f06f 0215 	mvn.w	r2, #21
    e40c:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e410:	23dd      	movs	r3, #221	; 0xdd
    e412:	4a1a      	ldr	r2, [pc, #104]	; (e47c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    e414:	491a      	ldr	r1, [pc, #104]	; (e480 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    e416:	481b      	ldr	r0, [pc, #108]	; (e484 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e418:	f015 fd2e 	bl	23e78 <printk>
    e41c:	4639      	mov	r1, r7
    e41e:	481a      	ldr	r0, [pc, #104]	; (e488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    e420:	f015 fd2a 	bl	23e78 <printk>
    e424:	21dd      	movs	r1, #221	; 0xdd
    e426:	4815      	ldr	r0, [pc, #84]	; (e47c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
    e428:	b003      	add	sp, #12
    e42a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e42e:	f015 bd30 	b.w	23e92 <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
    e432:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    e436:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    e43a:	d0e9      	beq.n	e410 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
    e43c:	f89a 2000 	ldrb.w	r2, [sl]
    e440:	42aa      	cmp	r2, r5
    e442:	dde5      	ble.n	e410 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
    e444:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    e446:	444b      	add	r3, r9
	MPU->RNR = index;
    e448:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    e44a:	68e0      	ldr	r0, [r4, #12]
    e44c:	7b19      	ldrb	r1, [r3, #12]
    e44e:	f360 0104 	bfi	r1, r0, #0, #5
    e452:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e454:	6921      	ldr	r1, [r4, #16]
    e456:	7b18      	ldrb	r0, [r3, #12]
    e458:	0849      	lsrs	r1, r1, #1
    e45a:	f361 1047 	bfi	r0, r1, #5, #3
    e45e:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e460:	68e2      	ldr	r2, [r4, #12]
    e462:	f022 021f 	bic.w	r2, r2, #31
    e466:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e468:	6922      	ldr	r2, [r4, #16]
    e46a:	f022 021f 	bic.w	r2, r2, #31
    e46e:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e470:	3601      	adds	r6, #1
    e472:	f108 080c 	add.w	r8, r8, #12
    e476:	e7ab      	b.n	e3d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e478:	e000ed90 	.word	0xe000ed90
    e47c:	00026e1a 	.word	0x00026e1a
    e480:	000279fa 	.word	0x000279fa
    e484:	0002694b 	.word	0x0002694b
    e488:	00026deb 	.word	0x00026deb
    e48c:	20020030 	.word	0x20020030
    e490:	20025c32 	.word	0x20025c32

0000e494 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e494:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e496:	4b15      	ldr	r3, [pc, #84]	; (e4ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    e498:	460c      	mov	r4, r1
    e49a:	781d      	ldrb	r5, [r3, #0]
    e49c:	4606      	mov	r6, r0
    e49e:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
    e4a0:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e4a2:	4a13      	ldr	r2, [pc, #76]	; (e4f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e4a4:	2b0f      	cmp	r3, #15
    e4a6:	dd1b      	ble.n	e4e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e4a8:	4b12      	ldr	r3, [pc, #72]	; (e4f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    e4aa:	1d19      	adds	r1, r3, #4
    e4ac:	6818      	ldr	r0, [r3, #0]
    e4ae:	f7ff fe45 	bl	e13c <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    e4b2:	462a      	mov	r2, r5
    e4b4:	4621      	mov	r1, r4
    e4b6:	4630      	mov	r0, r6
    e4b8:	f7ff fe58 	bl	e16c <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    e4bc:	3016      	adds	r0, #22
    e4be:	d113      	bne.n	e4e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e4c0:	23ec      	movs	r3, #236	; 0xec
    e4c2:	4a0d      	ldr	r2, [pc, #52]	; (e4f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    e4c4:	490d      	ldr	r1, [pc, #52]	; (e4fc <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    e4c6:	480e      	ldr	r0, [pc, #56]	; (e500 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
    e4c8:	f015 fcd6 	bl	23e78 <printk>
    e4cc:	4621      	mov	r1, r4
    e4ce:	480d      	ldr	r0, [pc, #52]	; (e504 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
    e4d0:	f015 fcd2 	bl	23e78 <printk>
}
    e4d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e4d8:	21ec      	movs	r1, #236	; 0xec
    e4da:	4807      	ldr	r0, [pc, #28]	; (e4f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    e4dc:	f015 bcd9 	b.w	23e92 <assert_post_action>
    e4e0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e4e2:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e4e4:	3301      	adds	r3, #1
    e4e6:	e7dd      	b.n	e4a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    e4e8:	bd70      	pop	{r4, r5, r6, pc}
    e4ea:	bf00      	nop
    e4ec:	20025c32 	.word	0x20025c32
    e4f0:	e000ed90 	.word	0xe000ed90
    e4f4:	20020030 	.word	0x20020030
    e4f8:	00026e1a 	.word	0x00026e1a
    e4fc:	000279fa 	.word	0x000279fa
    e500:	0002694b 	.word	0x0002694b
    e504:	00026d92 	.word	0x00026d92

0000e508 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e50c:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e50e:	2300      	movs	r3, #0
{
    e510:	b09d      	sub	sp, #116	; 0x74
    e512:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e516:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e518:	7810      	ldrb	r0, [r2, #0]
    e51a:	1c53      	adds	r3, r2, #1
    e51c:	9306      	str	r3, [sp, #24]
    e51e:	b158      	cbz	r0, e538 <z_prf+0x30>
		if (c != '%') {
    e520:	2825      	cmp	r0, #37	; 0x25
    e522:	f000 8089 	beq.w	e638 <z_prf+0x130>
			PUTC(c);
    e526:	9903      	ldr	r1, [sp, #12]
    e528:	9b02      	ldr	r3, [sp, #8]
    e52a:	4798      	blx	r3
    e52c:	3001      	adds	r0, #1
    e52e:	f040 840b 	bne.w	ed48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e8>
    e532:	f04f 33ff 	mov.w	r3, #4294967295
    e536:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e538:	9801      	ldr	r0, [sp, #4]
    e53a:	b01d      	add	sp, #116	; 0x74
    e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e540:	2c23      	cmp	r4, #35	; 0x23
    e542:	d070      	beq.n	e626 <z_prf+0x11e>
    e544:	d865      	bhi.n	e612 <z_prf+0x10a>
    e546:	2c00      	cmp	r4, #0
    e548:	d0f6      	beq.n	e538 <z_prf+0x30>
					fspace = true;
    e54a:	2c20      	cmp	r4, #32
    e54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e54e:	bf08      	it	eq
    e550:	2301      	moveq	r3, #1
    e552:	930c      	str	r3, [sp, #48]	; 0x30
					fplus = true;
    e554:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e558:	f8dd 8018 	ldr.w	r8, [sp, #24]
    e55c:	48bb      	ldr	r0, [pc, #748]	; (e84c <z_prf+0x344>)
    e55e:	f818 4b01 	ldrb.w	r4, [r8], #1
    e562:	4621      	mov	r1, r4
    e564:	f015 fdf6 	bl	24154 <strchr>
    e568:	2800      	cmp	r0, #0
    e56a:	d1e9      	bne.n	e540 <z_prf+0x38>
			if (c == '*') {
    e56c:	2c2a      	cmp	r4, #42	; 0x2a
    e56e:	d16a      	bne.n	e646 <z_prf+0x13e>
				width = va_arg(vargs, int);
    e570:	6832      	ldr	r2, [r6, #0]
    e572:	1d33      	adds	r3, r6, #4
				if (width < 0) {
    e574:	2a00      	cmp	r2, #0
				width = va_arg(vargs, int);
    e576:	9207      	str	r2, [sp, #28]
					width = -width;
    e578:	bfbe      	ittt	lt
    e57a:	4252      	neglt	r2, r2
    e57c:	9207      	strlt	r2, [sp, #28]
					fminus = true;
    e57e:	2201      	movlt	r2, #1
				width = va_arg(vargs, int);
    e580:	461e      	mov	r6, r3
					fminus = true;
    e582:	bfb8      	it	lt
    e584:	920d      	strlt	r2, [sp, #52]	; 0x34
				c = *format++;
    e586:	9a06      	ldr	r2, [sp, #24]
    e588:	7854      	ldrb	r4, [r2, #1]
    e58a:	f102 0802 	add.w	r8, r2, #2
			if (c == '.') {
    e58e:	2c2e      	cmp	r4, #46	; 0x2e
    e590:	d17e      	bne.n	e690 <z_prf+0x188>
				if (c == '*') {
    e592:	f898 3000 	ldrb.w	r3, [r8]
    e596:	2b2a      	cmp	r3, #42	; 0x2a
    e598:	d177      	bne.n	e68a <z_prf+0x182>
					precision = va_arg(vargs, int);
    e59a:	6835      	ldr	r5, [r6, #0]
				c = *format++;
    e59c:	f108 0801 	add.w	r8, r8, #1
					precision = va_arg(vargs, int);
    e5a0:	3604      	adds	r6, #4
				c = *format++;
    e5a2:	f898 4000 	ldrb.w	r4, [r8]
    e5a6:	f108 0801 	add.w	r8, r8, #1
			if (strchr("hlz", c) != NULL) {
    e5aa:	4621      	mov	r1, r4
    e5ac:	48a8      	ldr	r0, [pc, #672]	; (e850 <z_prf+0x348>)
    e5ae:	4627      	mov	r7, r4
    e5b0:	f015 fdd0 	bl	24154 <strchr>
    e5b4:	2800      	cmp	r0, #0
    e5b6:	d06e      	beq.n	e696 <z_prf+0x18e>
				c = *format++;
    e5b8:	f108 0301 	add.w	r3, r8, #1
				} else if (i == 'h' && c == 'h') {
    e5bc:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e5be:	9306      	str	r3, [sp, #24]
    e5c0:	f898 4000 	ldrb.w	r4, [r8]
				} else if (i == 'h' && c == 'h') {
    e5c4:	d107      	bne.n	e5d6 <z_prf+0xce>
    e5c6:	2c68      	cmp	r4, #104	; 0x68
    e5c8:	d105      	bne.n	e5d6 <z_prf+0xce>
					i = 'H';
    e5ca:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e5cc:	f108 0302 	add.w	r3, r8, #2
    e5d0:	f898 4001 	ldrb.w	r4, [r8, #1]
    e5d4:	9306      	str	r3, [sp, #24]
			switch (c) {
    e5d6:	2c67      	cmp	r4, #103	; 0x67
    e5d8:	d87c      	bhi.n	e6d4 <z_prf+0x1cc>
    e5da:	2c65      	cmp	r4, #101	; 0x65
    e5dc:	f080 813a 	bcs.w	e854 <z_prf+0x34c>
    e5e0:	2c47      	cmp	r4, #71	; 0x47
    e5e2:	d85c      	bhi.n	e69e <z_prf+0x196>
    e5e4:	2c45      	cmp	r4, #69	; 0x45
    e5e6:	f080 8135 	bcs.w	e854 <z_prf+0x34c>
    e5ea:	2c00      	cmp	r4, #0
    e5ec:	d0a4      	beq.n	e538 <z_prf+0x30>
    e5ee:	2c25      	cmp	r4, #37	; 0x25
    e5f0:	f000 83a6 	beq.w	ed40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e0>
				PUTC('%');
    e5f4:	9903      	ldr	r1, [sp, #12]
    e5f6:	2025      	movs	r0, #37	; 0x25
    e5f8:	9b02      	ldr	r3, [sp, #8]
    e5fa:	4798      	blx	r3
    e5fc:	3001      	adds	r0, #1
    e5fe:	d098      	beq.n	e532 <z_prf+0x2a>
				PUTC(c);
    e600:	9903      	ldr	r1, [sp, #12]
    e602:	4620      	mov	r0, r4
    e604:	9b02      	ldr	r3, [sp, #8]
    e606:	4798      	blx	r3
    e608:	3001      	adds	r0, #1
    e60a:	d092      	beq.n	e532 <z_prf+0x2a>
				count += 2;
    e60c:	9b01      	ldr	r3, [sp, #4]
    e60e:	3302      	adds	r3, #2
    e610:	e39c      	b.n	ed4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ec>
				switch (c) {
    e612:	2c2d      	cmp	r4, #45	; 0x2d
    e614:	d00d      	beq.n	e632 <z_prf+0x12a>
    e616:	2c30      	cmp	r4, #48	; 0x30
    e618:	d008      	beq.n	e62c <z_prf+0x124>
					fplus = true;
    e61a:	2c2b      	cmp	r4, #43	; 0x2b
    e61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e61e:	bf08      	it	eq
    e620:	2301      	moveq	r3, #1
    e622:	9309      	str	r3, [sp, #36]	; 0x24
    e624:	e796      	b.n	e554 <z_prf+0x4c>
					falt = true;
    e626:	2301      	movs	r3, #1
    e628:	9305      	str	r3, [sp, #20]
					break;
    e62a:	e793      	b.n	e554 <z_prf+0x4c>
					fzero = true;
    e62c:	2301      	movs	r3, #1
    e62e:	9308      	str	r3, [sp, #32]
					break;
    e630:	e790      	b.n	e554 <z_prf+0x4c>
					fminus = true;
    e632:	2301      	movs	r3, #1
    e634:	930d      	str	r3, [sp, #52]	; 0x34
    e636:	e78d      	b.n	e554 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    e638:	2300      	movs	r3, #0
    e63a:	9308      	str	r3, [sp, #32]
    e63c:	930c      	str	r3, [sp, #48]	; 0x30
    e63e:	9309      	str	r3, [sp, #36]	; 0x24
    e640:	930d      	str	r3, [sp, #52]	; 0x34
    e642:	9305      	str	r3, [sp, #20]
    e644:	e788      	b.n	e558 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e646:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e64a:	2b09      	cmp	r3, #9
				width = 0;
    e64c:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    e64e:	d89e      	bhi.n	e58e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e650:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e652:	f8dd 8018 	ldr.w	r8, [sp, #24]
    e656:	f818 4b01 	ldrb.w	r4, [r8], #1
    e65a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e65e:	2b09      	cmp	r3, #9
    e660:	d895      	bhi.n	e58e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e662:	9b07      	ldr	r3, [sp, #28]
    e664:	fb02 4403 	mla	r4, r2, r3, r4
    e668:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e66c:	e9cd 8306 	strd	r8, r3, [sp, #24]
    e670:	e7ef      	b.n	e652 <z_prf+0x14a>
    e672:	4690      	mov	r8, r2
    e674:	fb01 3505 	mla	r5, r1, r5, r3
    e678:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e67a:	4642      	mov	r2, r8
    e67c:	f812 3b01 	ldrb.w	r3, [r2], #1
    e680:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e684:	2809      	cmp	r0, #9
    e686:	d9f4      	bls.n	e672 <z_prf+0x16a>
    e688:	e78b      	b.n	e5a2 <z_prf+0x9a>
	int i = 0;
    e68a:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e68c:	210a      	movs	r1, #10
    e68e:	e7f4      	b.n	e67a <z_prf+0x172>
			precision = -1;
    e690:	f04f 35ff 	mov.w	r5, #4294967295
    e694:	e789      	b.n	e5aa <z_prf+0xa2>
    e696:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    e69a:	4607      	mov	r7, r0
    e69c:	e79b      	b.n	e5d6 <z_prf+0xce>
			switch (c) {
    e69e:	2c63      	cmp	r4, #99	; 0x63
    e6a0:	d059      	beq.n	e756 <z_prf+0x24e>
    e6a2:	d821      	bhi.n	e6e8 <z_prf+0x1e0>
    e6a4:	2c58      	cmp	r4, #88	; 0x58
    e6a6:	d1a5      	bne.n	e5f4 <z_prf+0xec>
    e6a8:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    e6aa:	2c6f      	cmp	r4, #111	; 0x6f
    e6ac:	9304      	str	r3, [sp, #16]
    e6ae:	6831      	ldr	r1, [r6, #0]
    e6b0:	af15      	add	r7, sp, #84	; 0x54
    e6b2:	f040 831b 	bne.w	ecec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28c>
	if (alt_form) {
    e6b6:	9b05      	ldr	r3, [sp, #20]
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	f000 830b 	beq.w	ecd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x274>
		*buf++ = '0';
    e6be:	2330      	movs	r3, #48	; 0x30
    e6c0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    e6c4:	2900      	cmp	r1, #0
    e6c6:	f040 830e 	bne.w	ece6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x286>
			*buf++ = 0;
    e6ca:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    e6ce:	468b      	mov	fp, r1
			return 1;
    e6d0:	2701      	movs	r7, #1
    e6d2:	e026      	b.n	e722 <z_prf+0x21a>
			switch (c) {
    e6d4:	2c70      	cmp	r4, #112	; 0x70
    e6d6:	f000 82e8 	beq.w	ecaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24a>
    e6da:	d827      	bhi.n	e72c <z_prf+0x224>
    e6dc:	2c6e      	cmp	r4, #110	; 0x6e
    e6de:	f000 82cf 	beq.w	ec80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x220>
    e6e2:	d8e1      	bhi.n	e6a8 <z_prf+0x1a0>
    e6e4:	2c69      	cmp	r4, #105	; 0x69
    e6e6:	d185      	bne.n	e5f4 <z_prf+0xec>
    e6e8:	6834      	ldr	r4, [r6, #0]
    e6ea:	1d33      	adds	r3, r6, #4
	if (value < 0) {
    e6ec:	2c00      	cmp	r4, #0
    e6ee:	9304      	str	r3, [sp, #16]
    e6f0:	f280 809e 	bge.w	e830 <z_prf+0x328>
		*buf++ = '-';
    e6f4:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e6f6:	4261      	negs	r1, r4
		*buf++ = '-';
    e6f8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		*buf++ = ' ';
    e6fc:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	return _to_x(buf, value, 10);
    e700:	4638      	mov	r0, r7
    e702:	220a      	movs	r2, #10
    e704:	f015 fdb6 	bl	24274 <_to_x>
				if (fplus || fspace || val < 0) {
    e708:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    e70a:	4407      	add	r7, r0
    e70c:	a815      	add	r0, sp, #84	; 0x54
    e70e:	1a3f      	subs	r7, r7, r0
				if (fplus || fspace || val < 0) {
    e710:	2b00      	cmp	r3, #0
    e712:	f040 831e 	bne.w	ed52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f2>
    e716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e718:	2b00      	cmp	r3, #0
    e71a:	f040 831a 	bne.w	ed52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f2>
    e71e:	ea4f 7bd4 	mov.w	fp, r4, lsr #31
			if (precision >= 0) {
    e722:	2d00      	cmp	r5, #0
    e724:	f2c0 831a 	blt.w	ed5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2fc>
    e728:	ae15      	add	r6, sp, #84	; 0x54
    e72a:	e01e      	b.n	e76a <z_prf+0x262>
			switch (c) {
    e72c:	2c75      	cmp	r4, #117	; 0x75
    e72e:	d0bb      	beq.n	e6a8 <z_prf+0x1a0>
    e730:	2c78      	cmp	r4, #120	; 0x78
    e732:	d0b9      	beq.n	e6a8 <z_prf+0x1a0>
    e734:	2c73      	cmp	r4, #115	; 0x73
    e736:	f47f af5d 	bne.w	e5f4 <z_prf+0xec>
					precision = INT_MAX;
    e73a:	2d00      	cmp	r5, #0
    e73c:	bfb8      	it	lt
    e73e:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e742:	2700      	movs	r7, #0
				cptr = va_arg(vargs, char *);
    e744:	1d33      	adds	r3, r6, #4
    e746:	6836      	ldr	r6, [r6, #0]
    e748:	9304      	str	r3, [sp, #16]
				for (clen = 0; clen < precision; clen++) {
    e74a:	42bd      	cmp	r5, r7
    e74c:	f040 82bd 	bne.w	ecca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26a>
    e750:	2500      	movs	r5, #0
    e752:	46ab      	mov	fp, r5
    e754:	e009      	b.n	e76a <z_prf+0x262>
				break;
    e756:	f04f 0b00 	mov.w	fp, #0
				clen = 1;
    e75a:	2701      	movs	r7, #1
				break;
    e75c:	465d      	mov	r5, fp
				buf[0] = va_arg(vargs, int);
    e75e:	1d33      	adds	r3, r6, #4
    e760:	9304      	str	r3, [sp, #16]
    e762:	6833      	ldr	r3, [r6, #0]
    e764:	ae1c      	add	r6, sp, #112	; 0x70
    e766:	f806 3d1c 	strb.w	r3, [r6, #-28]!
				zero_head = precision - clen + prefix;
    e76a:	eba5 0a07 	sub.w	sl, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e76e:	2500      	movs	r5, #0
    e770:	46a8      	mov	r8, r5
    e772:	46a9      	mov	r9, r5
				zero_head = precision - clen + prefix;
    e774:	44da      	add	sl, fp
    e776:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
			width -= clen + zero_head;
    e77a:	9b07      	ldr	r3, [sp, #28]
    e77c:	eb0a 0407 	add.w	r4, sl, r7
    e780:	1b1c      	subs	r4, r3, r4
			if (!fminus && width > 0) {
    e782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e784:	b913      	cbnz	r3, e78c <z_prf+0x284>
    e786:	2c00      	cmp	r4, #0
    e788:	f300 8307 	bgt.w	ed9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x33a>
    e78c:	eb06 030b 	add.w	r3, r6, fp
			while (prefix-- > 0) {
    e790:	429e      	cmp	r6, r3
    e792:	f040 8304 	bne.w	ed9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x33e>
    e796:	4653      	mov	r3, sl
			while (zero_head-- > 0) {
    e798:	f113 33ff 	adds.w	r3, r3, #4294967295
    e79c:	f080 830b 	bcs.w	edb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x356>
			clen -= prefix;
    e7a0:	eba7 070b 	sub.w	r7, r7, fp
			if (zero.predot) {
    e7a4:	f1b9 0f00 	cmp.w	r9, #0
    e7a8:	f000 832a 	beq.w	ee00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a0>
				c = *cptr;
    e7ac:	7830      	ldrb	r0, [r6, #0]
    e7ae:	19f2      	adds	r2, r6, r7
    e7b0:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
				while (isdigit(c)) {
    e7b4:	2909      	cmp	r1, #9
    e7b6:	eba2 0306 	sub.w	r3, r2, r6
    e7ba:	f240 8307 	bls.w	edcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36c>
    e7be:	464a      	mov	r2, r9
				while (zero.predot-- > 0) {
    e7c0:	2a00      	cmp	r2, #0
    e7c2:	f040 830e 	bne.w	ede2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x382>
				clen -= zero.predot;
    e7c6:	eba3 0909 	sub.w	r9, r3, r9
			if (zero.postdot) {
    e7ca:	f1b8 0f00 	cmp.w	r8, #0
    e7ce:	d018      	beq.n	e802 <z_prf+0x2fa>
    e7d0:	eb06 0309 	add.w	r3, r6, r9
					c = *cptr++;
    e7d4:	f816 2b01 	ldrb.w	r2, [r6], #1
    e7d8:	9307      	str	r3, [sp, #28]
					PUTC(c);
    e7da:	9903      	ldr	r1, [sp, #12]
    e7dc:	4610      	mov	r0, r2
    e7de:	9b02      	ldr	r3, [sp, #8]
    e7e0:	9205      	str	r2, [sp, #20]
    e7e2:	4798      	blx	r3
    e7e4:	3001      	adds	r0, #1
    e7e6:	f43f aea4 	beq.w	e532 <z_prf+0x2a>
				} while (c != '.');
    e7ea:	9a05      	ldr	r2, [sp, #20]
    e7ec:	9b07      	ldr	r3, [sp, #28]
    e7ee:	2a2e      	cmp	r2, #46	; 0x2e
    e7f0:	eba3 0906 	sub.w	r9, r3, r6
    e7f4:	d1ee      	bne.n	e7d4 <z_prf+0x2cc>
    e7f6:	4643      	mov	r3, r8
				while (zero.postdot-- > 0) {
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	f300 8303 	bgt.w	ee04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a4>
				clen -= zero.postdot;
    e7fe:	eba9 0908 	sub.w	r9, r9, r8
			if (zero.trail) {
    e802:	b19d      	cbz	r5, e82c <z_prf+0x324>
				c = *cptr;
    e804:	7830      	ldrb	r0, [r6, #0]
    e806:	eb06 0809 	add.w	r8, r6, r9
    e80a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit(c) || c == '.') {
    e80e:	2b09      	cmp	r3, #9
    e810:	eba8 0906 	sub.w	r9, r8, r6
    e814:	f240 8303 	bls.w	ee1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3be>
    e818:	282e      	cmp	r0, #46	; 0x2e
    e81a:	f000 8300 	beq.w	ee1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3be>
    e81e:	46a8      	mov	r8, r5
				while (zero.trail-- > 0) {
    e820:	f1b8 0f00 	cmp.w	r8, #0
    e824:	f300 8304 	bgt.w	ee30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d0>
				clen -= zero.trail;
    e828:	eba9 0905 	sub.w	r9, r9, r5
    e82c:	44b1      	add	r9, r6
    e82e:	e312      	b.n	ee56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f6>
	} else if (fplus) {
    e830:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e832:	b123      	cbz	r3, e83e <z_prf+0x336>
		*buf++ = '+';
    e834:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e836:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    e83a:	4621      	mov	r1, r4
    e83c:	e75e      	b.n	e6fc <z_prf+0x1f4>
	} else if (fspace) {
    e83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e840:	b10b      	cbz	r3, e846 <z_prf+0x33e>
		*buf++ = ' ';
    e842:	2320      	movs	r3, #32
    e844:	e7f7      	b.n	e836 <z_prf+0x32e>
	} else if (fspace) {
    e846:	4621      	mov	r1, r4
    e848:	af15      	add	r7, sp, #84	; 0x54
    e84a:	e759      	b.n	e700 <z_prf+0x1f8>
    e84c:	00026ef9 	.word	0x00026ef9
    e850:	00026eff 	.word	0x00026eff
				u.d = va_arg(vargs, double);
    e854:	3607      	adds	r6, #7
    e856:	f026 0607 	bic.w	r6, r6, #7
				double_val = u.i;
    e85a:	e9d6 0100 	ldrd	r0, r1, [r6]
	fract = (double_temp << 11) & ~HIGHBIT64;
    e85e:	02c2      	lsls	r2, r0, #11
    e860:	4690      	mov	r8, r2
				u.d = va_arg(vargs, double);
    e862:	f106 0308 	add.w	r3, r6, #8
    e866:	9304      	str	r3, [sp, #16]
	fract = (double_temp << 11) & ~HIGHBIT64;
    e868:	02cb      	lsls	r3, r1, #11
    e86a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
	if (sign) {
    e86e:	2800      	cmp	r0, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e870:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
	if (sign) {
    e874:	f171 0300 	sbcs.w	r3, r1, #0
	exp = double_temp >> 52 & 0x7ff;
    e878:	f3c1 560a 	ubfx	r6, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e87c:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if (sign) {
    e880:	da42      	bge.n	e908 <z_prf+0x400>
		*buf++ = '-';
    e882:	212d      	movs	r1, #45	; 0x2d
		*buf++ = ' ';
    e884:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
    e888:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	if (exp == 0x7ff) {
    e88c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    e890:	428e      	cmp	r6, r1
    e892:	d154      	bne.n	e93e <z_prf+0x436>
		if (!fract) {
    e894:	ea58 0309 	orrs.w	r3, r8, r9
    e898:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e89c:	f107 0003 	add.w	r0, r7, #3
    e8a0:	d142      	bne.n	e928 <z_prf+0x420>
			if (isupper(c)) {
    e8a2:	2c19      	cmp	r4, #25
    e8a4:	d83a      	bhi.n	e91c <z_prf+0x414>
				*buf++ = 'I';
    e8a6:	2349      	movs	r3, #73	; 0x49
    e8a8:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    e8aa:	234e      	movs	r3, #78	; 0x4e
    e8ac:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    e8ae:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    e8b0:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e8b2:	46a8      	mov	r8, r5
    e8b4:	46a9      	mov	r9, r5
				*buf++ = 'n';
    e8b6:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    e8b8:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e8ba:	af15      	add	r7, sp, #84	; 0x54
    e8bc:	1bc0      	subs	r0, r0, r7
				if (fplus || fspace || (buf[0] == '-')) {
    e8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	f040 81da 	bne.w	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    e8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e8c8:	2b00      	cmp	r3, #0
    e8ca:	f040 81d6 	bne.w	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    e8ce:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
    e8d2:	f1ab 032d 	sub.w	r3, fp, #45	; 0x2d
    e8d6:	f1d3 0b00 	rsbs	fp, r3, #0
    e8da:	eb4b 0b03 	adc.w	fp, fp, r3
				if (!isdigit(buf[prefix])) {
    e8de:	ab1c      	add	r3, sp, #112	; 0x70
    e8e0:	445b      	add	r3, fp
    e8e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
				clen += zero.predot + zero.postdot + zero.trail;
    e8e6:	eb08 0709 	add.w	r7, r8, r9
    e8ea:	3b30      	subs	r3, #48	; 0x30
    e8ec:	442f      	add	r7, r5
				if (!isdigit(buf[prefix])) {
    e8ee:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    e8f0:	4407      	add	r7, r0
				if (!isdigit(buf[prefix])) {
    e8f2:	f200 8237 	bhi.w	ed64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x304>
			} else if (fzero) {
    e8f6:	9b08      	ldr	r3, [sp, #32]
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	f000 8239 	beq.w	ed70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x310>
				zero_head = width - clen;
    e8fe:	9b07      	ldr	r3, [sp, #28]
    e900:	ae15      	add	r6, sp, #84	; 0x54
    e902:	eba3 0a07 	sub.w	sl, r3, r7
    e906:	e736      	b.n	e776 <z_prf+0x26e>
	} else if (fplus) {
    e908:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e90a:	b10b      	cbz	r3, e910 <z_prf+0x408>
		*buf++ = '+';
    e90c:	212b      	movs	r1, #43	; 0x2b
    e90e:	e7b9      	b.n	e884 <z_prf+0x37c>
	} else if (fspace) {
    e910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e912:	b10b      	cbz	r3, e918 <z_prf+0x410>
		*buf++ = ' ';
    e914:	2120      	movs	r1, #32
    e916:	e7b5      	b.n	e884 <z_prf+0x37c>
	} else if (fspace) {
    e918:	af15      	add	r7, sp, #84	; 0x54
    e91a:	e7b7      	b.n	e88c <z_prf+0x384>
				*buf++ = 'i';
    e91c:	2369      	movs	r3, #105	; 0x69
    e91e:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    e920:	236e      	movs	r3, #110	; 0x6e
    e922:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    e924:	2366      	movs	r3, #102	; 0x66
    e926:	e7c3      	b.n	e8b0 <z_prf+0x3a8>
			if (isupper(c)) {
    e928:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    e92a:	bf99      	ittee	ls
    e92c:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    e92e:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    e930:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    e932:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    e934:	bf94      	ite	ls
    e936:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    e938:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    e93a:	707a      	strb	r2, [r7, #1]
    e93c:	e7b8      	b.n	e8b0 <z_prf+0x3a8>
		c = 'f';
    e93e:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    e940:	ea48 0006 	orr.w	r0, r8, r6
    e944:	ea49 71e6 	orr.w	r1, r9, r6, asr #31
		c = 'f';
    e948:	bf08      	it	eq
    e94a:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    e94c:	ea50 0301 	orrs.w	r3, r0, r1
    e950:	f000 80da 	beq.w	eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>
		if (exp == 0) {
    e954:	2e00      	cmp	r6, #0
    e956:	d07a      	beq.n	ea4e <z_prf+0x546>
		fract |= HIGHBIT64;
    e958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e95c:	4610      	mov	r0, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e95e:	f2a6 38fe 	subw	r8, r6, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e962:	2600      	movs	r6, #0
    e964:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
    e968:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    e96c:	e969 010c 	strd	r0, r1, [r9, #-48]!	; 0x30
	while (exp <= -3) {
    e970:	f118 0f02 	cmn.w	r8, #2
    e974:	db7a      	blt.n	ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e976:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    e97a:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    e97e:	f1b8 0f00 	cmp.w	r8, #0
    e982:	f300 80a4 	bgt.w	eace <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e>
		_rlrshift(&fract);
    e986:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    e988:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e98c:	f015 fc92 	bl	242b4 <_rlrshift>
	while (exp < (0 + 4)) {
    e990:	f1b8 0f04 	cmp.w	r8, #4
    e994:	d1f7      	bne.n	e986 <z_prf+0x47e>
		precision = 6;		/* Default precision if none given */
    e996:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    e998:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e99c:	bfb8      	it	lt
    e99e:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    e9a0:	2b47      	cmp	r3, #71	; 0x47
    e9a2:	f040 80b9 	bne.w	eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>
		if (decexp < (-4 + 1) || decexp > precision) {
    e9a6:	1cf2      	adds	r2, r6, #3
    e9a8:	db02      	blt.n	e9b0 <z_prf+0x4a8>
    e9aa:	42b5      	cmp	r5, r6
    e9ac:	f280 80af 	bge.w	eb0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae>
			c += 'e' - 'g';
    e9b0:	3c02      	subs	r4, #2
    e9b2:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    e9b4:	2d00      	cmp	r5, #0
    e9b6:	f000 8273 	beq.w	eea0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x440>
		if (!falt && (precision > 0)) {
    e9ba:	9b05      	ldr	r3, [sp, #20]
				precision--;
    e9bc:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    e9be:	2b00      	cmp	r3, #0
    e9c0:	f040 826e 	bne.w	eea0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x440>
    e9c4:	2d00      	cmp	r5, #0
    e9c6:	bfd4      	ite	le
    e9c8:	f04f 0a00 	movle.w	sl, #0
    e9cc:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    e9d0:	2c66      	cmp	r4, #102	; 0x66
    e9d2:	f040 8267 	bne.w	eea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x444>
		if (exp < 0) {
    e9d6:	eb15 0806 	adds.w	r8, r5, r6
    e9da:	f140 80a3 	bpl.w	eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
	digit_count = 16;
    e9de:	2310      	movs	r3, #16
    e9e0:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    e9e2:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    e9e6:	930f      	str	r3, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
    e9e8:	2200      	movs	r2, #0
    e9ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e9ee:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    e9f2:	e969 230a 	strd	r2, r3, [r9, #-40]!	; 0x28
	while (exp--) {
    e9f6:	f118 38ff 	adds.w	r8, r8, #4294967295
    e9fa:	f080 8095 	bcs.w	eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>
	fract += ltemp;
    e9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ea02:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ea06:	eb12 0800 	adds.w	r8, r2, r0
    ea0a:	eb43 0901 	adc.w	r9, r3, r1
    ea0e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    ea12:	f009 4870 	and.w	r8, r9, #4026531840	; 0xf0000000
    ea16:	f04f 0900 	mov.w	r9, #0
    ea1a:	ea58 0309 	orrs.w	r3, r8, r9
    ea1e:	d006      	beq.n	ea2e <z_prf+0x526>
		_ldiv5(&fract);
    ea20:	a810      	add	r0, sp, #64	; 0x40
    ea22:	f015 fc5a 	bl	242da <_ldiv5>
		_rlrshift(&fract);
    ea26:	a810      	add	r0, sp, #64	; 0x40
    ea28:	f015 fc44 	bl	242b4 <_rlrshift>
		decexp++;
    ea2c:	3601      	adds	r6, #1
	if (c == 'f') {
    ea2e:	2c66      	cmp	r4, #102	; 0x66
    ea30:	f040 80c4 	bne.w	ebbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15c>
		if (decexp > 0) {
    ea34:	2e00      	cmp	r6, #0
    ea36:	dc7d      	bgt.n	eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>
			*buf++ = '0';
    ea38:	2330      	movs	r3, #48	; 0x30
    ea3a:	703b      	strb	r3, [r7, #0]
		if (falt || (precision > 0)) {
    ea3c:	9b05      	ldr	r3, [sp, #20]
			*buf++ = '0';
    ea3e:	f107 0b01 	add.w	fp, r7, #1
		if (falt || (precision > 0)) {
    ea42:	2b00      	cmp	r3, #0
    ea44:	f040 808d 	bne.w	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
			zero.predot = zero.postdot = zero.trail = 0;
    ea48:	4699      	mov	r9, r3
    ea4a:	e085      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
				exp--;
    ea4c:	3e01      	subs	r6, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    ea4e:	eb18 0808 	adds.w	r8, r8, r8
    ea52:	eb49 0909 	adc.w	r9, r9, r9
    ea56:	f1b8 0f00 	cmp.w	r8, #0
    ea5a:	f179 0300 	sbcs.w	r3, r9, #0
    ea5e:	daf5      	bge.n	ea4c <z_prf+0x544>
    ea60:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    ea64:	e778      	b.n	e958 <z_prf+0x450>
			_rlrshift(&fract);
    ea66:	4648      	mov	r0, r9
    ea68:	f015 fc24 	bl	242b4 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    ea6c:	e9dd a010 	ldrd	sl, r0, [sp, #64]	; 0x40
    ea70:	2300      	movs	r3, #0
    ea72:	930b      	str	r3, [sp, #44]	; 0x2c
    ea74:	2300      	movs	r3, #0
    ea76:	900a      	str	r0, [sp, #40]	; 0x28
    ea78:	4abc      	ldr	r2, [pc, #752]	; (ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>)
    ea7a:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
    ea7e:	4563      	cmp	r3, ip
    ea80:	bf08      	it	eq
    ea82:	455a      	cmpeq	r2, fp
    ea84:	f108 0801 	add.w	r8, r8, #1
    ea88:	d3ed      	bcc.n	ea66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
		fract *= 5U;
    ea8a:	2205      	movs	r2, #5
		decexp--;
    ea8c:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    ea90:	fbaa ab02 	umull	sl, fp, sl, r2
    ea94:	fb02 bb00 	mla	fp, r2, r0, fp
    ea98:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
		decexp--;
    ea9c:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ea9e:	2300      	movs	r3, #0
    eaa0:	2100      	movs	r1, #0
    eaa2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eaa6:	4299      	cmp	r1, r3
    eaa8:	bf08      	it	eq
    eaaa:	4558      	cmpeq	r0, fp
    eaac:	d206      	bcs.n	eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
    eaae:	f1bc 0f00 	cmp.w	ip, #0
    eab2:	f43f af5d 	beq.w	e970 <z_prf+0x468>
    eab6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
    eaba:	e759      	b.n	e970 <z_prf+0x468>
			fract <<= 1;
    eabc:	eb1a 0a0a 	adds.w	sl, sl, sl
    eac0:	eb4b 0b0b 	adc.w	fp, fp, fp
			exp--;
    eac4:	f108 38ff 	add.w	r8, r8, #4294967295
    eac8:	f04f 0c01 	mov.w	ip, #1
    eacc:	e7e7      	b.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
		_ldiv5(&fract);
    eace:	a810      	add	r0, sp, #64	; 0x40
    ead0:	f015 fc03 	bl	242da <_ldiv5>
    ead4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
    ead8:	f04f 0c00 	mov.w	ip, #0
		exp--;
    eadc:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    eae0:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eae2:	2300      	movs	r3, #0
    eae4:	459b      	cmp	fp, r3
    eae6:	bf08      	it	eq
    eae8:	458a      	cmpeq	sl, r1
    eaea:	d206      	bcs.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
    eaec:	f1bc 0f00 	cmp.w	ip, #0
    eaf0:	f43f af45 	beq.w	e97e <z_prf+0x476>
    eaf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    eaf8:	e741      	b.n	e97e <z_prf+0x476>
			fract <<= 1;
    eafa:	1800      	adds	r0, r0, r0
    eafc:	4149      	adcs	r1, r1
			exp--;
    eafe:	f108 38ff 	add.w	r8, r8, #4294967295
    eb02:	f04f 0c01 	mov.w	ip, #1
    eb06:	e7ec      	b.n	eae2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82>
	if ((exp | fract) != 0) {
    eb08:	2600      	movs	r6, #0
    eb0a:	46b0      	mov	r8, r6
    eb0c:	e73b      	b.n	e986 <z_prf+0x47e>
		if (!falt && (precision > 0)) {
    eb0e:	9b05      	ldr	r3, [sp, #20]
			precision -= decexp;
    eb10:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    eb12:	b923      	cbnz	r3, eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
			c = 'f';
    eb14:	2466      	movs	r4, #102	; 0x66
    eb16:	e755      	b.n	e9c4 <z_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    eb18:	f04f 0a00 	mov.w	sl, #0
    eb1c:	e758      	b.n	e9d0 <z_prf+0x4c8>
    eb1e:	f04f 0a00 	mov.w	sl, #0
    eb22:	e758      	b.n	e9d6 <z_prf+0x4ce>
		if (exp < 0) {
    eb24:	2466      	movs	r4, #102	; 0x66
    eb26:	e1bf      	b.n	eea8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x448>
		_ldiv5(&ltemp);
    eb28:	4648      	mov	r0, r9
    eb2a:	f015 fbd6 	bl	242da <_ldiv5>
		_rlrshift(&ltemp);
    eb2e:	f015 fbc1 	bl	242b4 <_rlrshift>
    eb32:	e760      	b.n	e9f6 <z_prf+0x4ee>
		if (decexp > 0) {
    eb34:	46bb      	mov	fp, r7
			while (decexp > 0 && digit_count > 0) {
    eb36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eb38:	2b00      	cmp	r3, #0
    eb3a:	dd07      	ble.n	eb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>
				*buf++ = _get_digit(&fract, &digit_count);
    eb3c:	a90f      	add	r1, sp, #60	; 0x3c
    eb3e:	a810      	add	r0, sp, #64	; 0x40
    eb40:	f015 fbfb 	bl	2433a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    eb44:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    eb46:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    eb4a:	d1f4      	bne.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
		if (falt || (precision > 0)) {
    eb4c:	9b05      	ldr	r3, [sp, #20]
    eb4e:	2b00      	cmp	r3, #0
    eb50:	f040 819d 	bne.w	ee8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42e>
			zp->predot = decexp;
    eb54:	46b1      	mov	r9, r6
			decexp = 0;
    eb56:	461e      	mov	r6, r3
		if (falt || (precision > 0)) {
    eb58:	2d00      	cmp	r5, #0
    eb5a:	dc04      	bgt.n	eb66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x106>
			zero.predot = zero.postdot = zero.trail = 0;
    eb5c:	f04f 0800 	mov.w	r8, #0
    eb60:	e020      	b.n	eba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144>
    eb62:	f04f 0900 	mov.w	r9, #0
			*buf++ = '.';
    eb66:	222e      	movs	r2, #46	; 0x2e
    eb68:	f10b 0301 	add.w	r3, fp, #1
    eb6c:	f88b 2000 	strb.w	r2, [fp]
		if (decexp < 0 && precision > 0) {
    eb70:	2e00      	cmp	r6, #0
    eb72:	f000 8193 	beq.w	ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>
    eb76:	2d00      	cmp	r5, #0
    eb78:	dd1e      	ble.n	ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>
			zp->postdot = -decexp;
    eb7a:	f1c6 0800 	rsb	r8, r6, #0
    eb7e:	45a8      	cmp	r8, r5
    eb80:	bfa8      	it	ge
    eb82:	46a8      	movge	r8, r5
			precision -= zp->postdot;
    eb84:	eba5 0508 	sub.w	r5, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    eb88:	469b      	mov	fp, r3
    eb8a:	e006      	b.n	eb9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13a>
			*buf++ = _get_digit(&fract, &digit_count);
    eb8c:	a90f      	add	r1, sp, #60	; 0x3c
    eb8e:	a810      	add	r0, sp, #64	; 0x40
    eb90:	f015 fbd3 	bl	2433a <_get_digit>
			precision--;
    eb94:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    eb96:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision > 0 && digit_count > 0) {
    eb9a:	2d00      	cmp	r5, #0
    eb9c:	dd02      	ble.n	eba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144>
    eb9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eba0:	2b00      	cmp	r3, #0
    eba2:	dcf3      	bgt.n	eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
	if (prune_zero) {
    eba4:	f1ba 0f00 	cmp.w	sl, #0
    eba8:	d11e      	bne.n	ebe8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x188>
	*buf = 0;
    ebaa:	2300      	movs	r3, #0
	return buf - start;
    ebac:	af15      	add	r7, sp, #84	; 0x54
	*buf = 0;
    ebae:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    ebb2:	ebab 0007 	sub.w	r0, fp, r7
    ebb6:	e682      	b.n	e8be <z_prf+0x3b6>
			*buf++ = '.';
    ebb8:	469b      	mov	fp, r3
    ebba:	e7cf      	b.n	eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>
		*buf = _get_digit(&fract, &digit_count);
    ebbc:	a90f      	add	r1, sp, #60	; 0x3c
    ebbe:	a810      	add	r0, sp, #64	; 0x40
    ebc0:	f015 fbbb 	bl	2433a <_get_digit>
		if (falt || (precision > 0)) {
    ebc4:	9b05      	ldr	r3, [sp, #20]
		if (*buf++ != '0') {
    ebc6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    ebc8:	7038      	strb	r0, [r7, #0]
			decexp--;
    ebca:	bf18      	it	ne
    ebcc:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d13c      	bne.n	ec4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ee>
    ebd4:	2d00      	cmp	r5, #0
    ebd6:	dc3a      	bgt.n	ec4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ee>
		if (*buf++ != '0') {
    ebd8:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    ebdc:	f1ba 0f00 	cmp.w	sl, #0
    ebe0:	d048      	beq.n	ec74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x214>
			zero.predot = zero.postdot = zero.trail = 0;
    ebe2:	f04f 0900 	mov.w	r9, #0
    ebe6:	46c8      	mov	r8, r9
		while (*--buf == '0')
    ebe8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    ebec:	f10b 33ff 	add.w	r3, fp, #4294967295
    ebf0:	2a30      	cmp	r2, #48	; 0x30
    ebf2:	d03d      	beq.n	ec70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x210>
    ebf4:	2a2e      	cmp	r2, #46	; 0x2e
    ebf6:	bf08      	it	eq
    ebf8:	469b      	moveq	fp, r3
    ebfa:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ebfc:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    ec00:	2b45      	cmp	r3, #69	; 0x45
    ec02:	d1d2      	bne.n	ebaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14a>
		if (decexp < 0) {
    ec04:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ec06:	bfb4      	ite	lt
    ec08:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    ec0a:	232b      	movge	r3, #43	; 0x2b
		*buf++ = c;
    ec0c:	465a      	mov	r2, fp
			decexp = -decexp;
    ec0e:	bfb8      	it	lt
    ec10:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ec12:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ec14:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '+';
    ec18:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    ec1c:	dd0a      	ble.n	ec34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d4>
			*buf++ = (decexp / 100) + '0';
    ec1e:	2164      	movs	r1, #100	; 0x64
    ec20:	fb96 f3f1 	sdiv	r3, r6, r1
			decexp %= 100;
    ec24:	fb01 6613 	mls	r6, r1, r3, r6
			*buf++ = (decexp / 100) + '0';
    ec28:	f103 0030 	add.w	r0, r3, #48	; 0x30
    ec2c:	f10b 0203 	add.w	r2, fp, #3
    ec30:	f88b 0002 	strb.w	r0, [fp, #2]
		*buf++ = (decexp / 10) + '0';
    ec34:	210a      	movs	r1, #10
    ec36:	fb96 f3f1 	sdiv	r3, r6, r1
    ec3a:	4693      	mov	fp, r2
		decexp %= 10;
    ec3c:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    ec40:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    ec44:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ec46:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    ec4a:	7056      	strb	r6, [r2, #1]
    ec4c:	e7ad      	b.n	ebaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14a>
			*buf++ = '.';
    ec4e:	232e      	movs	r3, #46	; 0x2e
    ec50:	f107 0b02 	add.w	fp, r7, #2
    ec54:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ec56:	2d00      	cmp	r5, #0
    ec58:	ddc0      	ble.n	ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>
    ec5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec5c:	2b00      	cmp	r3, #0
    ec5e:	ddbd      	ble.n	ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>
			*buf++ = _get_digit(&fract, &digit_count);
    ec60:	a90f      	add	r1, sp, #60	; 0x3c
    ec62:	a810      	add	r0, sp, #64	; 0x40
    ec64:	f015 fb69 	bl	2433a <_get_digit>
			precision--;
    ec68:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ec6a:	f80b 0b01 	strb.w	r0, [fp], #1
    ec6e:	e7f2      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
		while (*--buf == '0')
    ec70:	469b      	mov	fp, r3
    ec72:	e7b9      	b.n	ebe8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x188>
			zero.predot = zero.postdot = zero.trail = 0;
    ec74:	46d1      	mov	r9, sl
    ec76:	46d0      	mov	r8, sl
    ec78:	e7c0      	b.n	ebfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19c>
					prefix = 1;
    ec7a:	f04f 0b01 	mov.w	fp, #1
    ec7e:	e62e      	b.n	e8de <z_prf+0x3d6>
    ec80:	4632      	mov	r2, r6
    ec82:	f852 3b04 	ldr.w	r3, [r2], #4
				switch (i) {
    ec86:	2f68      	cmp	r7, #104	; 0x68
    ec88:	9204      	str	r2, [sp, #16]
    ec8a:	d006      	beq.n	ec9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23a>
    ec8c:	2f6c      	cmp	r7, #108	; 0x6c
    ec8e:	d009      	beq.n	eca4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x244>
    ec90:	2f48      	cmp	r7, #72	; 0x48
    ec92:	d107      	bne.n	eca4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x244>
					*va_arg(vargs, char *) = count;
    ec94:	9a01      	ldr	r2, [sp, #4]
    ec96:	701a      	strb	r2, [r3, #0]
					break;
    ec98:	e001      	b.n	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
					*va_arg(vargs, short *) = count;
    ec9a:	9a01      	ldr	r2, [sp, #4]
    ec9c:	801a      	strh	r2, [r3, #0]
				continue;
    ec9e:	9e04      	ldr	r6, [sp, #16]
    eca0:	9a06      	ldr	r2, [sp, #24]
    eca2:	e439      	b.n	e518 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    eca4:	9a01      	ldr	r2, [sp, #4]
    eca6:	601a      	str	r2, [r3, #0]
					break;
    eca8:	e7f9      	b.n	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
				val = (uintptr_t) va_arg(vargs, void *);
    ecaa:	1d33      	adds	r3, r6, #4
    ecac:	9304      	str	r3, [sp, #16]
		*buf++ = '0';
    ecae:	f647 0330 	movw	r3, #30768	; 0x7830
				clen = _to_hex(buf, val, true, 'x');
    ecb2:	6831      	ldr	r1, [r6, #0]
	len = _to_x(buf, value, 16);
    ecb4:	2210      	movs	r2, #16
    ecb6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
		*buf++ = '0';
    ecba:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
    ecbe:	f015 fad9 	bl	24274 <_to_x>
				prefix = 2;
    ecc2:	f04f 0b02 	mov.w	fp, #2
	return len + (buf - buf0);
    ecc6:	1c87      	adds	r7, r0, #2
				break;
    ecc8:	e52b      	b.n	e722 <z_prf+0x21a>
					if (cptr[clen] == '\0') {
    ecca:	5df3      	ldrb	r3, [r6, r7]
    eccc:	2b00      	cmp	r3, #0
    ecce:	d043      	beq.n	ed58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f8>
				for (clen = 0; clen < precision; clen++) {
    ecd0:	3701      	adds	r7, #1
    ecd2:	e53a      	b.n	e74a <z_prf+0x242>
	if (alt_form) {
    ecd4:	4638      	mov	r0, r7
	return (buf - buf0) + _to_x(buf, value, 8);
    ecd6:	2208      	movs	r2, #8
    ecd8:	1bc7      	subs	r7, r0, r7
    ecda:	f015 facb 	bl	24274 <_to_x>
    ecde:	4407      	add	r7, r0
			prefix = 0;
    ece0:	f04f 0b00 	mov.w	fp, #0
    ece4:	e51d      	b.n	e722 <z_prf+0x21a>
		*buf++ = '0';
    ece6:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    ecea:	e7f4      	b.n	ecd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x276>
				} else if (c == 'u') {
    ecec:	2c75      	cmp	r4, #117	; 0x75
    ecee:	d105      	bne.n	ecfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29c>
	return _to_x(buf, value, 10);
    ecf0:	4638      	mov	r0, r7
    ecf2:	220a      	movs	r2, #10
    ecf4:	f015 fabe 	bl	24274 <_to_x>
    ecf8:	4607      	mov	r7, r0
    ecfa:	e7f1      	b.n	ece0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x280>
	if (alt_form) {
    ecfc:	9b05      	ldr	r3, [sp, #20]
    ecfe:	b1eb      	cbz	r3, ed3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2dc>
		*buf++ = '0';
    ed00:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ed04:	f10d 0656 	add.w	r6, sp, #86	; 0x56
		*buf++ = '0';
    ed08:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
    ed0c:	2210      	movs	r2, #16
    ed0e:	4630      	mov	r0, r6
    ed10:	f015 fab0 	bl	24274 <_to_x>
	if (prefix == 'X') {
    ed14:	2c58      	cmp	r4, #88	; 0x58
    ed16:	d10b      	bne.n	ed30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d0>
    ed18:	463b      	mov	r3, r7
		if (*buf >= 'a' && *buf <= 'z') {
    ed1a:	781a      	ldrb	r2, [r3, #0]
    ed1c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    ed20:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    ed22:	bf9c      	itt	ls
    ed24:	3a20      	subls	r2, #32
    ed26:	701a      	strbls	r2, [r3, #0]
	} while (*buf++);
    ed28:	f813 2b01 	ldrb.w	r2, [r3], #1
    ed2c:	2a00      	cmp	r2, #0
    ed2e:	d1f4      	bne.n	ed1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ba>
			prefix = 0;
    ed30:	9b05      	ldr	r3, [sp, #20]
	return len + (buf - buf0);
    ed32:	1bf7      	subs	r7, r6, r7
    ed34:	4407      	add	r7, r0
			prefix = 0;
    ed36:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    ed3a:	e4f2      	b.n	e722 <z_prf+0x21a>
	if (alt_form) {
    ed3c:	463e      	mov	r6, r7
    ed3e:	e7e5      	b.n	ed0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ac>
				PUTC('%');
    ed40:	9903      	ldr	r1, [sp, #12]
    ed42:	4620      	mov	r0, r4
    ed44:	f7ff bbf0 	b.w	e528 <z_prf+0x20>
				count++;
    ed48:	9b01      	ldr	r3, [sp, #4]
    ed4a:	3301      	adds	r3, #1
				count += 2;
    ed4c:	9301      	str	r3, [sp, #4]
				continue;
    ed4e:	9604      	str	r6, [sp, #16]
    ed50:	e7a5      	b.n	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
					prefix = 1;
    ed52:	f04f 0b01 	mov.w	fp, #1
    ed56:	e4e4      	b.n	e722 <z_prf+0x21a>
    ed58:	461d      	mov	r5, r3
    ed5a:	e4fa      	b.n	e752 <z_prf+0x24a>
			zero.predot = zero.postdot = zero.trail = 0;
    ed5c:	2500      	movs	r5, #0
    ed5e:	46a8      	mov	r8, r5
    ed60:	46a9      	mov	r9, r5
    ed62:	e5c8      	b.n	e8f6 <z_prf+0x3ee>
			cptr = buf;
    ed64:	ae15      	add	r6, sp, #84	; 0x54
				zero_head = 0;
    ed66:	f04f 0a00 	mov.w	sl, #0
    ed6a:	e506      	b.n	e77a <z_prf+0x272>
    ed6c:	33333332 	.word	0x33333332
    ed70:	ae15      	add	r6, sp, #84	; 0x54
    ed72:	f8dd a020 	ldr.w	sl, [sp, #32]
    ed76:	e500      	b.n	e77a <z_prf+0x272>
    ed78:	9305      	str	r3, [sp, #20]
					PUTC(' ');
    ed7a:	9903      	ldr	r1, [sp, #12]
    ed7c:	9b02      	ldr	r3, [sp, #8]
    ed7e:	2020      	movs	r0, #32
    ed80:	4798      	blx	r3
    ed82:	3001      	adds	r0, #1
    ed84:	9b05      	ldr	r3, [sp, #20]
    ed86:	f43f abd4 	beq.w	e532 <z_prf+0x2a>
				while (width-- > 0) {
    ed8a:	f113 33ff 	adds.w	r3, r3, #4294967295
    ed8e:	d2f3      	bcs.n	ed78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x318>
				count += width;
    ed90:	9a01      	ldr	r2, [sp, #4]
    ed92:	4422      	add	r2, r4
    ed94:	9201      	str	r2, [sp, #4]
				while (width-- > 0) {
    ed96:	461c      	mov	r4, r3
    ed98:	e4f8      	b.n	e78c <z_prf+0x284>
    ed9a:	4623      	mov	r3, r4
    ed9c:	e7f5      	b.n	ed8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32a>
    ed9e:	9305      	str	r3, [sp, #20]
				PUTC(*cptr++);
    eda0:	9903      	ldr	r1, [sp, #12]
    eda2:	9b02      	ldr	r3, [sp, #8]
    eda4:	f816 0b01 	ldrb.w	r0, [r6], #1
    eda8:	4798      	blx	r3
    edaa:	3001      	adds	r0, #1
    edac:	9b05      	ldr	r3, [sp, #20]
    edae:	f47f acef 	bne.w	e790 <z_prf+0x288>
    edb2:	f7ff bbbe 	b.w	e532 <z_prf+0x2a>
    edb6:	9305      	str	r3, [sp, #20]
				PUTC('0');
    edb8:	9903      	ldr	r1, [sp, #12]
    edba:	9b02      	ldr	r3, [sp, #8]
    edbc:	2030      	movs	r0, #48	; 0x30
    edbe:	4798      	blx	r3
    edc0:	3001      	adds	r0, #1
    edc2:	9b05      	ldr	r3, [sp, #20]
    edc4:	f47f ace8 	bne.w	e798 <z_prf+0x290>
    edc8:	f7ff bbb3 	b.w	e532 <z_prf+0x2a>
					PUTC(c);
    edcc:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    edd0:	9205      	str	r2, [sp, #20]
    edd2:	4798      	blx	r3
    edd4:	3001      	adds	r0, #1
    edd6:	f43f abac 	beq.w	e532 <z_prf+0x2a>
					c = *++cptr;
    edda:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    edde:	9a05      	ldr	r2, [sp, #20]
    ede0:	e4e6      	b.n	e7b0 <z_prf+0x2a8>
    ede2:	9305      	str	r3, [sp, #20]
					PUTC('0');
    ede4:	9903      	ldr	r1, [sp, #12]
    ede6:	9b02      	ldr	r3, [sp, #8]
    ede8:	2030      	movs	r0, #48	; 0x30
    edea:	9207      	str	r2, [sp, #28]
    edec:	4798      	blx	r3
    edee:	9a07      	ldr	r2, [sp, #28]
    edf0:	3001      	adds	r0, #1
    edf2:	f102 32ff 	add.w	r2, r2, #4294967295
    edf6:	9b05      	ldr	r3, [sp, #20]
    edf8:	f47f ace2 	bne.w	e7c0 <z_prf+0x2b8>
    edfc:	f7ff bb99 	b.w	e532 <z_prf+0x2a>
			clen -= prefix;
    ee00:	46b9      	mov	r9, r7
    ee02:	e4e2      	b.n	e7ca <z_prf+0x2c2>
    ee04:	9305      	str	r3, [sp, #20]
					PUTC('0');
    ee06:	9903      	ldr	r1, [sp, #12]
    ee08:	9b02      	ldr	r3, [sp, #8]
    ee0a:	2030      	movs	r0, #48	; 0x30
    ee0c:	4798      	blx	r3
    ee0e:	9b05      	ldr	r3, [sp, #20]
    ee10:	3001      	adds	r0, #1
    ee12:	f103 33ff 	add.w	r3, r3, #4294967295
    ee16:	f47f acef 	bne.w	e7f8 <z_prf+0x2f0>
    ee1a:	f7ff bb8a 	b.w	e532 <z_prf+0x2a>
					PUTC(c);
    ee1e:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ee22:	4798      	blx	r3
    ee24:	3001      	adds	r0, #1
    ee26:	f43f ab84 	beq.w	e532 <z_prf+0x2a>
					c = *++cptr;
    ee2a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    ee2e:	e4ec      	b.n	e80a <z_prf+0x302>
					PUTC('0');
    ee30:	9903      	ldr	r1, [sp, #12]
    ee32:	2030      	movs	r0, #48	; 0x30
    ee34:	9b02      	ldr	r3, [sp, #8]
    ee36:	4798      	blx	r3
    ee38:	3001      	adds	r0, #1
    ee3a:	f108 38ff 	add.w	r8, r8, #4294967295
    ee3e:	f47f acef 	bne.w	e820 <z_prf+0x318>
    ee42:	f7ff bb76 	b.w	e532 <z_prf+0x2a>
				PUTC(*cptr++);
    ee46:	9903      	ldr	r1, [sp, #12]
    ee48:	f816 0b01 	ldrb.w	r0, [r6], #1
    ee4c:	9b02      	ldr	r3, [sp, #8]
    ee4e:	4798      	blx	r3
    ee50:	3001      	adds	r0, #1
    ee52:	f43f ab6e 	beq.w	e532 <z_prf+0x2a>
    ee56:	eba9 0306 	sub.w	r3, r9, r6
			while (clen-- > 0) {
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	dcf3      	bgt.n	ee46 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e6>
			count += prefix;
    ee5e:	9b01      	ldr	r3, [sp, #4]
			if (width > 0) {
    ee60:	2c00      	cmp	r4, #0
			count += prefix;
    ee62:	445b      	add	r3, fp
    ee64:	469b      	mov	fp, r3
			count += zero_head;
    ee66:	44d3      	add	fp, sl
			count += clen;
    ee68:	eb07 030b 	add.w	r3, r7, fp
    ee6c:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ee6e:	f77f af16 	ble.w	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
				count += width;
    ee72:	4423      	add	r3, r4
    ee74:	9301      	str	r3, [sp, #4]
				while (width-- > 0) {
    ee76:	f114 34ff 	adds.w	r4, r4, #4294967295
    ee7a:	f4ff af10 	bcc.w	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
					PUTC(' ');
    ee7e:	9903      	ldr	r1, [sp, #12]
    ee80:	2020      	movs	r0, #32
    ee82:	9b02      	ldr	r3, [sp, #8]
    ee84:	4798      	blx	r3
    ee86:	3001      	adds	r0, #1
    ee88:	d1f5      	bne.n	ee76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x416>
    ee8a:	f7ff bb52 	b.w	e532 <z_prf+0x2a>
			*buf++ = '.';
    ee8e:	222e      	movs	r2, #46	; 0x2e
			zp->predot = decexp;
    ee90:	46b1      	mov	r9, r6
			decexp = 0;
    ee92:	2600      	movs	r6, #0
			*buf++ = '.';
    ee94:	f10b 0301 	add.w	r3, fp, #1
    ee98:	f88b 2000 	strb.w	r2, [fp]
			zero.predot = zero.postdot = zero.trail = 0;
    ee9c:	46b0      	mov	r8, r6
    ee9e:	e673      	b.n	eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    eea0:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    eea4:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    eea8:	2310      	movs	r3, #16
    eeaa:	4598      	cmp	r8, r3
    eeac:	930f      	str	r3, [sp, #60]	; 0x3c
    eeae:	bfa8      	it	ge
    eeb0:	4698      	movge	r8, r3
    eeb2:	e599      	b.n	e9e8 <z_prf+0x4e0>

0000eeb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    eeb4:	4b01      	ldr	r3, [pc, #4]	; (eebc <__stdout_hook_install+0x8>)
    eeb6:	6018      	str	r0, [r3, #0]
}
    eeb8:	4770      	bx	lr
    eeba:	bf00      	nop
    eebc:	2002a228 	.word	0x2002a228

0000eec0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    eec0:	b40c      	push	{r2, r3}
    eec2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    eec4:	b909      	cbnz	r1, eeca <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    eec6:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    eeca:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    eece:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    eed0:	9a06      	ldr	r2, [sp, #24]
    eed2:	a902      	add	r1, sp, #8
    eed4:	4805      	ldr	r0, [pc, #20]	; (eeec <snprintf+0x2c>)
	va_start(vargs, format);
    eed6:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    eed8:	f7ff fb16 	bl	e508 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    eedc:	2200      	movs	r2, #0
    eede:	9b02      	ldr	r3, [sp, #8]
    eee0:	701a      	strb	r2, [r3, #0]
	return r;
}
    eee2:	b005      	add	sp, #20
    eee4:	f85d eb04 	ldr.w	lr, [sp], #4
    eee8:	b002      	add	sp, #8
    eeea:	4770      	bx	lr
    eeec:	00024377 	.word	0x00024377

0000eef0 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    eef0:	b40e      	push	{r1, r2, r3}
    eef2:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    eef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    eef8:	ab05      	add	r3, sp, #20
    eefa:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    eefe:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    ef00:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ef02:	4806      	ldr	r0, [pc, #24]	; (ef1c <sprintf+0x2c>)
    ef04:	a902      	add	r1, sp, #8
	va_start(vargs, format);
    ef06:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ef08:	f7ff fafe 	bl	e508 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    ef0c:	2200      	movs	r2, #0
    ef0e:	9b02      	ldr	r3, [sp, #8]
    ef10:	701a      	strb	r2, [r3, #0]
	return r;
}
    ef12:	b004      	add	sp, #16
    ef14:	f85d eb04 	ldr.w	lr, [sp], #4
    ef18:	b003      	add	sp, #12
    ef1a:	4770      	bx	lr
    ef1c:	00024377 	.word	0x00024377

0000ef20 <close>:

	return socket_ops->socket(family, type, proto);
}

static inline int close(int sock)
{
    ef20:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
    ef22:	4c10      	ldr	r4, [pc, #64]	; (ef64 <close+0x44>)
{
    ef24:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    ef26:	6823      	ldr	r3, [r4, #0]
    ef28:	b94b      	cbnz	r3, ef3e <close+0x1e>
    ef2a:	490f      	ldr	r1, [pc, #60]	; (ef68 <close+0x48>)
    ef2c:	480f      	ldr	r0, [pc, #60]	; (ef6c <close+0x4c>)
    ef2e:	2321      	movs	r3, #33	; 0x21
    ef30:	4a0f      	ldr	r2, [pc, #60]	; (ef70 <close+0x50>)
    ef32:	f014 ffa1 	bl	23e78 <printk>
    ef36:	2121      	movs	r1, #33	; 0x21
    ef38:	480d      	ldr	r0, [pc, #52]	; (ef70 <close+0x50>)
    ef3a:	f014 ffaa 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
    ef3e:	6823      	ldr	r3, [r4, #0]
    ef40:	685b      	ldr	r3, [r3, #4]
    ef42:	b94b      	cbnz	r3, ef58 <close+0x38>
    ef44:	490b      	ldr	r1, [pc, #44]	; (ef74 <close+0x54>)
    ef46:	4809      	ldr	r0, [pc, #36]	; (ef6c <close+0x4c>)
    ef48:	2322      	movs	r3, #34	; 0x22
    ef4a:	4a09      	ldr	r2, [pc, #36]	; (ef70 <close+0x50>)
    ef4c:	f014 ff94 	bl	23e78 <printk>
    ef50:	2122      	movs	r1, #34	; 0x22
    ef52:	4807      	ldr	r0, [pc, #28]	; (ef70 <close+0x50>)
    ef54:	f014 ff9d 	bl	23e92 <assert_post_action>

	return socket_ops->close(sock);
    ef58:	6823      	ldr	r3, [r4, #0]
    ef5a:	4628      	mov	r0, r5
}
    ef5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
    ef60:	685b      	ldr	r3, [r3, #4]
    ef62:	4718      	bx	r3
    ef64:	20020008 	.word	0x20020008
    ef68:	00026f34 	.word	0x00026f34
    ef6c:	0002694b 	.word	0x0002694b
    ef70:	00026f03 	.word	0x00026f03
    ef74:	00026f3f 	.word	0x00026f3f

0000ef78 <send.constprop.0>:
	__ASSERT_NO_MSG(socket_ops->recvfrom);

	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
}

static inline ssize_t send(int sock, const void *buf, size_t len,
    ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
    ef7c:	4c13      	ldr	r4, [pc, #76]	; (efcc <send.constprop.0+0x54>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    ef7e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    ef80:	6823      	ldr	r3, [r4, #0]
static inline ssize_t send(int sock, const void *buf, size_t len,
    ef82:	460e      	mov	r6, r1
    ef84:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
    ef86:	b94b      	cbnz	r3, ef9c <send.constprop.0+0x24>
    ef88:	4911      	ldr	r1, [pc, #68]	; (efd0 <send.constprop.0+0x58>)
    ef8a:	4812      	ldr	r0, [pc, #72]	; (efd4 <send.constprop.0+0x5c>)
    ef8c:	237e      	movs	r3, #126	; 0x7e
    ef8e:	4a12      	ldr	r2, [pc, #72]	; (efd8 <send.constprop.0+0x60>)
    ef90:	f014 ff72 	bl	23e78 <printk>
    ef94:	217e      	movs	r1, #126	; 0x7e
    ef96:	4810      	ldr	r0, [pc, #64]	; (efd8 <send.constprop.0+0x60>)
    ef98:	f014 ff7b 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
    ef9c:	6823      	ldr	r3, [r4, #0]
    ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    efa0:	b94b      	cbnz	r3, efb6 <send.constprop.0+0x3e>
    efa2:	490e      	ldr	r1, [pc, #56]	; (efdc <send.constprop.0+0x64>)
    efa4:	480b      	ldr	r0, [pc, #44]	; (efd4 <send.constprop.0+0x5c>)
    efa6:	237f      	movs	r3, #127	; 0x7f
    efa8:	4a0b      	ldr	r2, [pc, #44]	; (efd8 <send.constprop.0+0x60>)
    efaa:	f014 ff65 	bl	23e78 <printk>
    efae:	217f      	movs	r1, #127	; 0x7f
    efb0:	4809      	ldr	r0, [pc, #36]	; (efd8 <send.constprop.0+0x60>)
    efb2:	f014 ff6e 	bl	23e92 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
    efb6:	6823      	ldr	r3, [r4, #0]
    efb8:	463a      	mov	r2, r7
    efba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    efbc:	4631      	mov	r1, r6
    efbe:	4628      	mov	r0, r5
    efc0:	46a4      	mov	ip, r4
}
    efc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return socket_ops->send(sock, buf, len, flags);
    efc6:	2300      	movs	r3, #0
    efc8:	4760      	bx	ip
    efca:	bf00      	nop
    efcc:	20020008 	.word	0x20020008
    efd0:	00026f34 	.word	0x00026f34
    efd4:	0002694b 	.word	0x0002694b
    efd8:	00026f03 	.word	0x00026f03
    efdc:	00027025 	.word	0x00027025

0000efe0 <recv.constprop.1>:
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    efe0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
    efe2:	4c13      	ldr	r4, [pc, #76]	; (f030 <recv.constprop.1+0x50>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    efe4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    efe6:	6823      	ldr	r3, [r4, #0]
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    efe8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(socket_ops);
    efea:	b94b      	cbnz	r3, f000 <recv.constprop.1+0x20>
    efec:	4911      	ldr	r1, [pc, #68]	; (f034 <recv.constprop.1+0x54>)
    efee:	4812      	ldr	r0, [pc, #72]	; (f038 <recv.constprop.1+0x58>)
    eff0:	2369      	movs	r3, #105	; 0x69
    eff2:	4a12      	ldr	r2, [pc, #72]	; (f03c <recv.constprop.1+0x5c>)
    eff4:	f014 ff40 	bl	23e78 <printk>
    eff8:	2169      	movs	r1, #105	; 0x69
    effa:	4810      	ldr	r0, [pc, #64]	; (f03c <recv.constprop.1+0x5c>)
    effc:	f014 ff49 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
    f000:	6823      	ldr	r3, [r4, #0]
    f002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f004:	b94b      	cbnz	r3, f01a <recv.constprop.1+0x3a>
    f006:	490e      	ldr	r1, [pc, #56]	; (f040 <recv.constprop.1+0x60>)
    f008:	480b      	ldr	r0, [pc, #44]	; (f038 <recv.constprop.1+0x58>)
    f00a:	236a      	movs	r3, #106	; 0x6a
    f00c:	4a0b      	ldr	r2, [pc, #44]	; (f03c <recv.constprop.1+0x5c>)
    f00e:	f014 ff33 	bl	23e78 <printk>
    f012:	216a      	movs	r1, #106	; 0x6a
    f014:	4809      	ldr	r0, [pc, #36]	; (f03c <recv.constprop.1+0x5c>)
    f016:	f014 ff3c 	bl	23e92 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
    f01a:	6823      	ldr	r3, [r4, #0]
    f01c:	4631      	mov	r1, r6
    f01e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f020:	4628      	mov	r0, r5
    f022:	46a4      	mov	ip, r4
}
    f024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->recv(sock, buf, max_len, flags);
    f028:	2300      	movs	r3, #0
    f02a:	2280      	movs	r2, #128	; 0x80
    f02c:	4760      	bx	ip
    f02e:	bf00      	nop
    f030:	20020008 	.word	0x20020008
    f034:	00026f34 	.word	0x00026f34
    f038:	0002694b 	.word	0x0002694b
    f03c:	00026f03 	.word	0x00026f03
    f040:	00027014 	.word	0x00027014

0000f044 <pca20035_board_init>:
#endif
	return 0;
}

static int pca20035_board_init(struct device *dev)
{
    f044:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(socket_ops);
    f046:	4c3a      	ldr	r4, [pc, #232]	; (f130 <pca20035_board_init+0xec>)
    f048:	b0a1      	sub	sp, #132	; 0x84
    f04a:	6823      	ldr	r3, [r4, #0]
    f04c:	b94b      	cbnz	r3, f062 <pca20035_board_init+0x1e>
    f04e:	4939      	ldr	r1, [pc, #228]	; (f134 <pca20035_board_init+0xf0>)
    f050:	4839      	ldr	r0, [pc, #228]	; (f138 <pca20035_board_init+0xf4>)
    f052:	2319      	movs	r3, #25
    f054:	4a39      	ldr	r2, [pc, #228]	; (f13c <pca20035_board_init+0xf8>)
    f056:	f014 ff0f 	bl	23e78 <printk>
    f05a:	2119      	movs	r1, #25
    f05c:	4837      	ldr	r0, [pc, #220]	; (f13c <pca20035_board_init+0xf8>)
    f05e:	f014 ff18 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
    f062:	6823      	ldr	r3, [r4, #0]
    f064:	681b      	ldr	r3, [r3, #0]
    f066:	b94b      	cbnz	r3, f07c <pca20035_board_init+0x38>
    f068:	4935      	ldr	r1, [pc, #212]	; (f140 <pca20035_board_init+0xfc>)
    f06a:	4833      	ldr	r0, [pc, #204]	; (f138 <pca20035_board_init+0xf4>)
    f06c:	231a      	movs	r3, #26
    f06e:	4a33      	ldr	r2, [pc, #204]	; (f13c <pca20035_board_init+0xf8>)
    f070:	f014 ff02 	bl	23e78 <printk>
    f074:	211a      	movs	r1, #26
    f076:	4831      	ldr	r0, [pc, #196]	; (f13c <pca20035_board_init+0xf8>)
    f078:	f014 ff0b 	bl	23e92 <assert_post_action>
	return socket_ops->socket(family, type, proto);
    f07c:	6823      	ldr	r3, [r4, #0]
    f07e:	f240 2201 	movw	r2, #513	; 0x201
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	2100      	movs	r1, #0
    f086:	2066      	movs	r0, #102	; 0x66
    f088:	4798      	blx	r3
	if (at_socket_fd == -1) {
    f08a:	1c43      	adds	r3, r0, #1
    f08c:	4604      	mov	r4, r0
    f08e:	d104      	bne.n	f09a <pca20035_board_init+0x56>
		return -EFAULT;
    f090:	f06f 050d 	mvn.w	r5, #13
		LOG_ERR("pca20035_magpio_configure failed with error: %d", err);
		return err;
	}

	return 0;
}
    f094:	4628      	mov	r0, r5
    f096:	b021      	add	sp, #132	; 0x84
    f098:	bd30      	pop	{r4, r5, pc}
	buffer = send(at_socket_fd, AT_CMD_TRACE, AT_CMD_LEN(AT_CMD_TRACE), 0);
    f09a:	2210      	movs	r2, #16
    f09c:	4929      	ldr	r1, [pc, #164]	; (f144 <pca20035_board_init+0x100>)
    f09e:	f7ff ff6b 	bl	ef78 <send.constprop.0>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
    f0a2:	2810      	cmp	r0, #16
    f0a4:	d00f      	beq.n	f0c6 <pca20035_board_init+0x82>
		close(at_socket_fd);
    f0a6:	4620      	mov	r0, r4
    f0a8:	f7ff ff3a 	bl	ef20 <close>
		__ASSERT_NO_MSG(false);
    f0ac:	4926      	ldr	r1, [pc, #152]	; (f148 <pca20035_board_init+0x104>)
    f0ae:	2329      	movs	r3, #41	; 0x29
    f0b0:	4a26      	ldr	r2, [pc, #152]	; (f14c <pca20035_board_init+0x108>)
    f0b2:	4821      	ldr	r0, [pc, #132]	; (f138 <pca20035_board_init+0xf4>)
    f0b4:	f014 fee0 	bl	23e78 <printk>
    f0b8:	2129      	movs	r1, #41	; 0x29
		__ASSERT_NO_MSG(false);
    f0ba:	4824      	ldr	r0, [pc, #144]	; (f14c <pca20035_board_init+0x108>)
    f0bc:	f014 fee9 	bl	23e92 <assert_post_action>
		return -EIO;
    f0c0:	f06f 0504 	mvn.w	r5, #4
    f0c4:	e7e6      	b.n	f094 <pca20035_board_init+0x50>
	buffer = recv(at_socket_fd, read_buffer, AT_CMD_MAX_READ_LENGTH, 0);
    f0c6:	4669      	mov	r1, sp
    f0c8:	4620      	mov	r0, r4
    f0ca:	f7ff ff89 	bl	efe0 <recv.constprop.1>
	if ((buffer < 2) ||
    f0ce:	2801      	cmp	r0, #1
    f0d0:	dc0a      	bgt.n	f0e8 <pca20035_board_init+0xa4>
		close(at_socket_fd);
    f0d2:	4620      	mov	r0, r4
    f0d4:	f7ff ff24 	bl	ef20 <close>
		__ASSERT_NO_MSG(false);
    f0d8:	491b      	ldr	r1, [pc, #108]	; (f148 <pca20035_board_init+0x104>)
    f0da:	2333      	movs	r3, #51	; 0x33
    f0dc:	4a1b      	ldr	r2, [pc, #108]	; (f14c <pca20035_board_init+0x108>)
    f0de:	4816      	ldr	r0, [pc, #88]	; (f138 <pca20035_board_init+0xf4>)
    f0e0:	f014 feca 	bl	23e78 <printk>
    f0e4:	2133      	movs	r1, #51	; 0x33
    f0e6:	e7e8      	b.n	f0ba <pca20035_board_init+0x76>
	    (memcmp("OK", read_buffer, 2 != 0))) {
    f0e8:	2201      	movs	r2, #1
    f0ea:	4669      	mov	r1, sp
    f0ec:	4818      	ldr	r0, [pc, #96]	; (f150 <pca20035_board_init+0x10c>)
    f0ee:	f015 f863 	bl	241b8 <memcmp>
	if ((buffer < 2) ||
    f0f2:	2800      	cmp	r0, #0
    f0f4:	d1ed      	bne.n	f0d2 <pca20035_board_init+0x8e>
	buffer = send(at_socket_fd, AT_CMD_MAGPIO,
    f0f6:	225c      	movs	r2, #92	; 0x5c
    f0f8:	4916      	ldr	r1, [pc, #88]	; (f154 <pca20035_board_init+0x110>)
    f0fa:	4620      	mov	r0, r4
    f0fc:	f7ff ff3c 	bl	ef78 <send.constprop.0>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
    f100:	285c      	cmp	r0, #92	; 0x5c
    f102:	d003      	beq.n	f10c <pca20035_board_init+0xc8>
		close(at_socket_fd);
    f104:	4620      	mov	r0, r4
    f106:	f7ff ff0b 	bl	ef20 <close>
    f10a:	e7d9      	b.n	f0c0 <pca20035_board_init+0x7c>
	buffer = recv(at_socket_fd, read_buffer, AT_CMD_MAX_READ_LENGTH, 0);
    f10c:	4669      	mov	r1, sp
    f10e:	4620      	mov	r0, r4
    f110:	f7ff ff66 	bl	efe0 <recv.constprop.1>
	if ((buffer < 2) ||
    f114:	2801      	cmp	r0, #1
    f116:	ddf5      	ble.n	f104 <pca20035_board_init+0xc0>
	    (memcmp("OK", read_buffer, 2 != 0))) {
    f118:	2201      	movs	r2, #1
    f11a:	4669      	mov	r1, sp
    f11c:	480c      	ldr	r0, [pc, #48]	; (f150 <pca20035_board_init+0x10c>)
    f11e:	f015 f84b 	bl	241b8 <memcmp>
	if ((buffer < 2) ||
    f122:	4605      	mov	r5, r0
    f124:	2800      	cmp	r0, #0
    f126:	d1ed      	bne.n	f104 <pca20035_board_init+0xc0>
	close(at_socket_fd);
    f128:	4620      	mov	r0, r4
    f12a:	f7ff fef9 	bl	ef20 <close>
    f12e:	e7b1      	b.n	f094 <pca20035_board_init+0x50>
    f130:	20020008 	.word	0x20020008
    f134:	00026f34 	.word	0x00026f34
    f138:	0002694b 	.word	0x0002694b
    f13c:	00026f03 	.word	0x00026f03
    f140:	00026f51 	.word	0x00026f51
    f144:	00026f64 	.word	0x00026f64
    f148:	000279fa 	.word	0x000279fa
    f14c:	00026f75 	.word	0x00026f75
    f150:	00026fb4 	.word	0x00026fb4
    f154:	00026fb7 	.word	0x00026fb7

0000f158 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
    f158:	b538      	push	{r3, r4, r5, lr}
    f15a:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    f15c:	4604      	mov	r4, r0
    f15e:	b958      	cbnz	r0, f178 <net_if_flag_is_set+0x20>
    f160:	4909      	ldr	r1, [pc, #36]	; (f188 <net_if_flag_is_set+0x30>)
    f162:	480a      	ldr	r0, [pc, #40]	; (f18c <net_if_flag_is_set+0x34>)
    f164:	f240 2311 	movw	r3, #529	; 0x211
    f168:	4a09      	ldr	r2, [pc, #36]	; (f190 <net_if_flag_is_set+0x38>)
    f16a:	f014 fe85 	bl	23e78 <printk>
    f16e:	f240 2111 	movw	r1, #529	; 0x211
    f172:	4807      	ldr	r0, [pc, #28]	; (f190 <net_if_flag_is_set+0x38>)
    f174:	f014 fe8d 	bl	23e92 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f178:	6823      	ldr	r3, [r4, #0]
    f17a:	330c      	adds	r3, #12
    f17c:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f180:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
    f182:	f000 0001 	and.w	r0, r0, #1
    f186:	bd38      	pop	{r3, r4, r5, pc}
    f188:	0002705f 	.word	0x0002705f
    f18c:	0002694b 	.word	0x0002694b
    f190:	00027036 	.word	0x00027036

0000f194 <net_if_flag_set.constprop.23>:
static inline void net_if_flag_set(struct net_if *iface,
    f194:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    f196:	4604      	mov	r4, r0
    f198:	b958      	cbnz	r0, f1b2 <net_if_flag_set.constprop.23+0x1e>
    f19a:	490b      	ldr	r1, [pc, #44]	; (f1c8 <net_if_flag_set.constprop.23+0x34>)
    f19c:	480b      	ldr	r0, [pc, #44]	; (f1cc <net_if_flag_set.constprop.23+0x38>)
    f19e:	f240 13e3 	movw	r3, #483	; 0x1e3
    f1a2:	4a0b      	ldr	r2, [pc, #44]	; (f1d0 <net_if_flag_set.constprop.23+0x3c>)
    f1a4:	f014 fe68 	bl	23e78 <printk>
    f1a8:	f240 11e3 	movw	r1, #483	; 0x1e3
    f1ac:	4808      	ldr	r0, [pc, #32]	; (f1d0 <net_if_flag_set.constprop.23+0x3c>)
    f1ae:	f014 fe70 	bl	23e92 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f1b2:	6823      	ldr	r3, [r4, #0]
    f1b4:	330c      	adds	r3, #12
    f1b6:	e8d3 2fef 	ldaex	r2, [r3]
    f1ba:	f042 0201 	orr.w	r2, r2, #1
    f1be:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f1c2:	2900      	cmp	r1, #0
    f1c4:	d1f7      	bne.n	f1b6 <net_if_flag_set.constprop.23+0x22>
}
    f1c6:	bd10      	pop	{r4, pc}
    f1c8:	0002705f 	.word	0x0002705f
    f1cc:	0002694b 	.word	0x0002694b
    f1d0:	00027036 	.word	0x00027036

0000f1d4 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    f1d4:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    f1d6:	2100      	movs	r1, #0
{
    f1d8:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    f1da:	f7ff ffbd 	bl	f158 <net_if_flag_is_set>
    f1de:	b928      	cbnz	r0, f1ec <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
    f1e0:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    f1e2:	7e9a      	ldrb	r2, [r3, #26]
    f1e4:	b122      	cbz	r2, f1f0 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    f1e6:	4628      	mov	r0, r5
    f1e8:	f7ff ffd4 	bl	f194 <net_if_flag_set.constprop.23>
		return 0;
    f1ec:	2000      	movs	r0, #0
    f1ee:	e01f      	b.n	f230 <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
    f1f0:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    f1f2:	b9ab      	cbnz	r3, f220 <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    f1f4:	682b      	ldr	r3, [r5, #0]
    f1f6:	691b      	ldr	r3, [r3, #16]
    f1f8:	b95b      	cbnz	r3, f212 <net_if_up+0x3e>
    f1fa:	490e      	ldr	r1, [pc, #56]	; (f234 <net_if_up+0x60>)
    f1fc:	480e      	ldr	r0, [pc, #56]	; (f238 <net_if_up+0x64>)
    f1fe:	f640 5389 	movw	r3, #3465	; 0xd89
    f202:	4a0e      	ldr	r2, [pc, #56]	; (f23c <net_if_up+0x68>)
    f204:	f014 fe38 	bl	23e78 <printk>
    f208:	f640 5189 	movw	r1, #3465	; 0xd89
    f20c:	480b      	ldr	r0, [pc, #44]	; (f23c <net_if_up+0x68>)
    f20e:	f014 fe40 	bl	23e92 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    f212:	4628      	mov	r0, r5
    f214:	f7ff ffbe 	bl	f194 <net_if_flag_set.constprop.23>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    f218:	4628      	mov	r0, r5
    f21a:	f015 f8c0 	bl	2439e <l2_flags_get>
    f21e:	e7e5      	b.n	f1ec <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    f220:	689b      	ldr	r3, [r3, #8]
    f222:	2b00      	cmp	r3, #0
    f224:	d0e6      	beq.n	f1f4 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
    f226:	2101      	movs	r1, #1
    f228:	4628      	mov	r0, r5
    f22a:	4798      	blx	r3
	if (status < 0) {
    f22c:	2800      	cmp	r0, #0
    f22e:	dae1      	bge.n	f1f4 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
    f230:	bd38      	pop	{r3, r4, r5, pc}
    f232:	bf00      	nop
    f234:	00027065 	.word	0x00027065
    f238:	0002694b 	.word	0x0002694b
    f23c:	00027096 	.word	0x00027096

0000f240 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f242:	4e09      	ldr	r6, [pc, #36]	; (f268 <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    f244:	2400      	movs	r4, #0
    f246:	4637      	mov	r7, r6
    f248:	4d08      	ldr	r5, [pc, #32]	; (f26c <net_if_init+0x2c>)
    f24a:	1bad      	subs	r5, r5, r6
    f24c:	42ac      	cmp	r4, r5
    f24e:	eb06 0004 	add.w	r0, r6, r4
    f252:	d100      	bne.n	f256 <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    f254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    f256:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    f258:	681b      	ldr	r3, [r3, #0]
    f25a:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    f25c:	b113      	cbz	r3, f264 <net_if_init+0x24>
    f25e:	681b      	ldr	r3, [r3, #0]
    f260:	b103      	cbz	r3, f264 <net_if_init+0x24>
	api->init(iface);
    f262:	4798      	blx	r3
    f264:	3420      	adds	r4, #32
    f266:	e7f1      	b.n	f24c <net_if_init+0xc>
    f268:	2002a4c0 	.word	0x2002a4c0
    f26c:	2002a4e0 	.word	0x2002a4e0

0000f270 <net_if_post_init>:

void net_if_post_init(void)
{
    f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    f272:	2400      	movs	r4, #0
    f274:	4f08      	ldr	r7, [pc, #32]	; (f298 <net_if_post_init+0x28>)
    f276:	4d09      	ldr	r5, [pc, #36]	; (f29c <net_if_post_init+0x2c>)
    f278:	1bed      	subs	r5, r5, r7
    f27a:	42ac      	cmp	r4, r5
    f27c:	eb04 0607 	add.w	r6, r4, r7
    f280:	d100      	bne.n	f284 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    f282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    f284:	2103      	movs	r1, #3
    f286:	4630      	mov	r0, r6
    f288:	f7ff ff66 	bl	f158 <net_if_flag_is_set>
    f28c:	b910      	cbnz	r0, f294 <net_if_post_init+0x24>
			net_if_up(iface);
    f28e:	4630      	mov	r0, r6
    f290:	f7ff ffa0 	bl	f1d4 <net_if_up>
    f294:	3420      	adds	r4, #32
    f296:	e7f0      	b.n	f27a <net_if_post_init+0xa>
    f298:	2002a4c0 	.word	0x2002a4c0
    f29c:	2002a4e0 	.word	0x2002a4e0

0000f2a0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    f2a0:	b570      	push	{r4, r5, r6, lr}
    f2a2:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f2a4:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    f2a6:	460d      	mov	r5, r1
    f2a8:	b961      	cbnz	r1, f2c4 <gpio_nrfx_manage_callback+0x24>
    f2aa:	4922      	ldr	r1, [pc, #136]	; (f334 <gpio_nrfx_manage_callback+0x94>)
    f2ac:	231c      	movs	r3, #28
    f2ae:	4a22      	ldr	r2, [pc, #136]	; (f338 <gpio_nrfx_manage_callback+0x98>)
    f2b0:	4822      	ldr	r0, [pc, #136]	; (f33c <gpio_nrfx_manage_callback+0x9c>)
    f2b2:	f014 fde1 	bl	23e78 <printk>
    f2b6:	4822      	ldr	r0, [pc, #136]	; (f340 <gpio_nrfx_manage_callback+0xa0>)
    f2b8:	f014 fdde 	bl	23e78 <printk>
    f2bc:	211c      	movs	r1, #28
    f2be:	481e      	ldr	r0, [pc, #120]	; (f338 <gpio_nrfx_manage_callback+0x98>)
    f2c0:	f014 fde7 	bl	23e92 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    f2c4:	686b      	ldr	r3, [r5, #4]
    f2c6:	b963      	cbnz	r3, f2e2 <gpio_nrfx_manage_callback+0x42>
    f2c8:	491e      	ldr	r1, [pc, #120]	; (f344 <gpio_nrfx_manage_callback+0xa4>)
    f2ca:	231d      	movs	r3, #29
    f2cc:	4a1a      	ldr	r2, [pc, #104]	; (f338 <gpio_nrfx_manage_callback+0x98>)
    f2ce:	481b      	ldr	r0, [pc, #108]	; (f33c <gpio_nrfx_manage_callback+0x9c>)
    f2d0:	f014 fdd2 	bl	23e78 <printk>
    f2d4:	481c      	ldr	r0, [pc, #112]	; (f348 <gpio_nrfx_manage_callback+0xa8>)
    f2d6:	f014 fdcf 	bl	23e78 <printk>
    f2da:	211d      	movs	r1, #29
    f2dc:	4816      	ldr	r0, [pc, #88]	; (f338 <gpio_nrfx_manage_callback+0x98>)
    f2de:	f014 fdd8 	bl	23e92 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    f2e2:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
    f2e4:	b15b      	cbz	r3, f2fe <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f2e6:	2200      	movs	r2, #0
    f2e8:	429d      	cmp	r5, r3
    f2ea:	d113      	bne.n	f314 <gpio_nrfx_manage_callback+0x74>
    f2ec:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    f2ee:	b95a      	cbnz	r2, f308 <gpio_nrfx_manage_callback+0x68>
    f2f0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    f2f2:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    f2f4:	4295      	cmp	r5, r2
    f2f6:	d100      	bne.n	f2fa <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    f2f8:	6063      	str	r3, [r4, #4]
	parent->next = child;
    f2fa:	2300      	movs	r3, #0
    f2fc:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    f2fe:	b976      	cbnz	r6, f31e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    f300:	2000      	movs	r0, #0
				     callback, set);
}
    f302:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f304:	460b      	mov	r3, r1
    f306:	e7ef      	b.n	f2e8 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
    f308:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    f30a:	6863      	ldr	r3, [r4, #4]
    f30c:	429d      	cmp	r5, r3
	list->tail = node;
    f30e:	bf08      	it	eq
    f310:	6062      	streq	r2, [r4, #4]
    f312:	e7f2      	b.n	f2fa <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    f314:	6819      	ldr	r1, [r3, #0]
    f316:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f318:	2900      	cmp	r1, #0
    f31a:	d1f3      	bne.n	f304 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    f31c:	b13e      	cbz	r6, f32e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    f31e:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    f320:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    f322:	6860      	ldr	r0, [r4, #4]
	list->head = node;
    f324:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    f326:	2800      	cmp	r0, #0
    f328:	d1ea      	bne.n	f300 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    f32a:	6065      	str	r5, [r4, #4]
    f32c:	e7e9      	b.n	f302 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    f32e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f332:	e7e6      	b.n	f302 <gpio_nrfx_manage_callback+0x62>
    f334:	000270ef 	.word	0x000270ef
    f338:	000270c1 	.word	0x000270c1
    f33c:	0002694b 	.word	0x0002694b
    f340:	000270f8 	.word	0x000270f8
    f344:	00027107 	.word	0x00027107
    f348:	00027119 	.word	0x00027119

0000f34c <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    f34c:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f34e:	4c07      	ldr	r4, [pc, #28]	; (f36c <nrf_gpio_pin_port_decode.isra.6.part.7+0x20>)
    f350:	4907      	ldr	r1, [pc, #28]	; (f370 <nrf_gpio_pin_port_decode.isra.6.part.7+0x24>)
    f352:	4622      	mov	r2, r4
    f354:	4807      	ldr	r0, [pc, #28]	; (f374 <nrf_gpio_pin_port_decode.isra.6.part.7+0x28>)
    f356:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    f35a:	f014 fd8d 	bl	23e78 <printk>
    f35e:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
    f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f364:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    f368:	f014 bd93 	b.w	23e92 <assert_post_action>
    f36c:	0002715d 	.word	0x0002715d
    f370:	00027191 	.word	0x00027191
    f374:	0002694b 	.word	0x0002694b

0000f378 <nrf_gpio_cfg_sense_set>:
    f378:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    f37a:	b538      	push	{r3, r4, r5, lr}
    f37c:	4604      	mov	r4, r0
    f37e:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f380:	d901      	bls.n	f386 <nrf_gpio_cfg_sense_set+0xe>
    f382:	f7ff ffe3 	bl	f34c <nrf_gpio_pin_port_decode.isra.6.part.7>
    f386:	4808      	ldr	r0, [pc, #32]	; (f3a8 <nrf_gpio_cfg_sense_set+0x30>)
    f388:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    f38c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f390:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    f394:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f398:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f39c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    f3a0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    f3a4:	bd38      	pop	{r3, r4, r5, pc}
    f3a6:	bf00      	nop
    f3a8:	40842500 	.word	0x40842500

0000f3ac <gpiote_pin_int_cfg>:
{
    f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
    f3b0:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f3b2:	f001 041f 	and.w	r4, r1, #31
    f3b6:	689b      	ldr	r3, [r3, #8]
{
    f3b8:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f3ba:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    f3bc:	4e48      	ldr	r6, [pc, #288]	; (f4e0 <gpiote_pin_int_cfg+0x134>)
    f3be:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f3c2:	2300      	movs	r3, #0
    f3c4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    f3c8:	6887      	ldr	r7, [r0, #8]
    f3ca:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f3cc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    f3d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    f3d4:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    f3d8:	428c      	cmp	r4, r1
    f3da:	d166      	bne.n	f4aa <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
    f3dc:	fa22 f103 	lsr.w	r1, r2, r3
    f3e0:	07c9      	lsls	r1, r1, #31
    f3e2:	d562      	bpl.n	f4aa <gpiote_pin_int_cfg+0xfe>
    f3e4:	009a      	lsls	r2, r3, #2
    f3e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f3ea:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f3ee:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    f3f2:	f021 0101 	bic.w	r1, r1, #1
    f3f6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    f3fa:	2201      	movs	r2, #1
    f3fc:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    f400:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f404:	4620      	mov	r0, r4
    f406:	2100      	movs	r1, #0
    f408:	f7ff ffb6 	bl	f378 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f40c:	68b8      	ldr	r0, [r7, #8]
    f40e:	40e8      	lsrs	r0, r5
    f410:	f010 0001 	ands.w	r0, r0, #1
    f414:	d047      	beq.n	f4a6 <gpiote_pin_int_cfg+0xfa>
    f416:	68f8      	ldr	r0, [r7, #12]
    f418:	40e8      	lsrs	r0, r5
    f41a:	f010 0001 	ands.w	r0, r0, #1
    f41e:	d042      	beq.n	f4a6 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
    f420:	6978      	ldr	r0, [r7, #20]
    f422:	40e8      	lsrs	r0, r5
    f424:	f010 0801 	ands.w	r8, r0, #1
    f428:	d04b      	beq.n	f4c2 <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
    f42a:	69bb      	ldr	r3, [r7, #24]
    f42c:	40eb      	lsrs	r3, r5
    f42e:	07db      	lsls	r3, r3, #31
    f430:	d43f      	bmi.n	f4b2 <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
    f432:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f434:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f436:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f438:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    f43c:	f003 0301 	and.w	r3, r3, #1
    f440:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    f444:	42ab      	cmp	r3, r5
    f446:	bf0c      	ite	eq
    f448:	2502      	moveq	r5, #2
    f44a:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f44c:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f44e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    f452:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    f456:	f010 0003 	ands.w	r0, r0, #3
    f45a:	d12c      	bne.n	f4b6 <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
    f45c:	0093      	lsls	r3, r2, #2
    f45e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f462:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f466:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f46a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f46c:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    f470:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    f474:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f478:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    f47c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    f480:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    f484:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f486:	4917      	ldr	r1, [pc, #92]	; (f4e4 <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f488:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f48c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f490:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    f494:	f041 0101 	orr.w	r1, r1, #1
    f498:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    f49c:	2301      	movs	r3, #1
    f49e:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
    f4a2:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
    f4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f4aa:	3301      	adds	r3, #1
    f4ac:	2b08      	cmp	r3, #8
    f4ae:	d18d      	bne.n	f3cc <gpiote_pin_int_cfg+0x20>
    f4b0:	e7a8      	b.n	f404 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f4b2:	2503      	movs	r5, #3
    f4b4:	e7ca      	b.n	f44c <gpiote_pin_int_cfg+0xa0>
    f4b6:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f4b8:	2a08      	cmp	r2, #8
    f4ba:	d1c8      	bne.n	f44e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    f4bc:	f06f 0012 	mvn.w	r0, #18
    f4c0:	e7f1      	b.n	f4a6 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f4c2:	693b      	ldr	r3, [r7, #16]
    f4c4:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f4c6:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f4c8:	4053      	eors	r3, r2
    f4ca:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f4ce:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f4d2:	bf0c      	ite	eq
    f4d4:	2103      	moveq	r1, #3
    f4d6:	2102      	movne	r1, #2
    f4d8:	f7ff ff4e 	bl	f378 <nrf_gpio_cfg_sense_set>
	int res = 0;
    f4dc:	4640      	mov	r0, r8
    f4de:	e7e2      	b.n	f4a6 <gpiote_pin_int_cfg+0xfa>
    f4e0:	40031000 	.word	0x40031000
    f4e4:	40031100 	.word	0x40031100

0000f4e8 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f4e8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f4ea:	4b09      	ldr	r3, [pc, #36]	; (f510 <gpio_nrfx_init+0x28>)
    f4ec:	781a      	ldrb	r2, [r3, #0]
    f4ee:	b96a      	cbnz	r2, f50c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f4f0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f4f2:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f4f4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f4f6:	2105      	movs	r1, #5
    f4f8:	f7fe fbea 	bl	dcd0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f4fc:	2031      	movs	r0, #49	; 0x31
    f4fe:	f7fe fbd7 	bl	dcb0 <z_arch_irq_enable>
    f502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f506:	4b03      	ldr	r3, [pc, #12]	; (f514 <gpio_nrfx_init+0x2c>)
    f508:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f50c:	2000      	movs	r0, #0
    f50e:	bd08      	pop	{r3, pc}
    f510:	20025c33 	.word	0x20025c33
    f514:	40031000 	.word	0x40031000

0000f518 <gpio_nrfx_config>:
{
    f518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f51c:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f51e:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f520:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f524:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f528:	461d      	mov	r5, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f52a:	d04a      	beq.n	f5c2 <gpio_nrfx_config+0xaa>
    f52c:	dc2d      	bgt.n	f58a <gpio_nrfx_config+0x72>
    f52e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f532:	d03e      	beq.n	f5b2 <gpio_nrfx_config+0x9a>
    f534:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f538:	d03f      	beq.n	f5ba <gpio_nrfx_config+0xa2>
    f53a:	bb68      	cbnz	r0, f598 <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f53c:	f405 7640 	and.w	r6, r5, #768	; 0x300
    f540:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    f544:	d03f      	beq.n	f5c6 <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
    f546:	f5a6 7600 	sub.w	r6, r6, #512	; 0x200
    f54a:	4273      	negs	r3, r6
    f54c:	4173      	adcs	r3, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f54e:	2901      	cmp	r1, #1
		from_pin = pin;
    f550:	bf19      	ittee	ne
    f552:	fa5f f982 	uxtbne.w	r9, r2
		to_pin   = pin;
    f556:	46c8      	movne	r8, r9
		to_pin   = 31U;
    f558:	f04f 081f 	moveq.w	r8, #31
		from_pin = 0U;
    f55c:	f04f 0900 	moveq.w	r9, #0
    f560:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f564:	f005 0c01 	and.w	ip, r5, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f568:	ea4f 064c 	mov.w	r6, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f56c:	ea46 060c 	orr.w	r6, r6, ip
    f570:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
    f574:	ea40 0683 	orr.w	r6, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f578:	f005 0302 	and.w	r3, r5, #2
    f57c:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f57e:	45c8      	cmp	r8, r9
    f580:	d223      	bcs.n	f5ca <gpio_nrfx_config+0xb2>
	return 0;
    f582:	2000      	movs	r0, #0
}
    f584:	b003      	add	sp, #12
    f586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f58a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f58e:	d016      	beq.n	f5be <gpio_nrfx_config+0xa6>
    f590:	dc05      	bgt.n	f59e <gpio_nrfx_config+0x86>
    f592:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f596:	d00e      	beq.n	f5b6 <gpio_nrfx_config+0x9e>
		return -EINVAL;
    f598:	f06f 0015 	mvn.w	r0, #21
    f59c:	e7f2      	b.n	f584 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f59e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f5a2:	d004      	beq.n	f5ae <gpio_nrfx_config+0x96>
    f5a4:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f5a8:	d1f6      	bne.n	f598 <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
    f5aa:	2007      	movs	r0, #7
		break;
    f5ac:	e7c6      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    f5ae:	2006      	movs	r0, #6
		break;
    f5b0:	e7c4      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    f5b2:	2001      	movs	r0, #1
		break;
    f5b4:	e7c2      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f5b6:	2003      	movs	r0, #3
		break;
    f5b8:	e7c0      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    f5ba:	2004      	movs	r0, #4
		break;
    f5bc:	e7be      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    f5be:	2005      	movs	r0, #5
		break;
    f5c0:	e7bc      	b.n	f53c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    f5c2:	2002      	movs	r0, #2
    f5c4:	e7ba      	b.n	f53c <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    f5c6:	2303      	movs	r3, #3
    f5c8:	e7c1      	b.n	f54e <gpio_nrfx_config+0x36>
	return port->config->config_info;
    f5ca:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f5cc:	689b      	ldr	r3, [r3, #8]
    f5ce:	7919      	ldrb	r1, [r3, #4]
    f5d0:	f009 031f 	and.w	r3, r9, #31
    f5d4:	ea43 1b41 	orr.w	fp, r3, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f5d8:	f1bb 0f1f 	cmp.w	fp, #31
    f5dc:	dd01      	ble.n	f5e2 <gpio_nrfx_config+0xca>
    f5de:	f7ff feb5 	bl	f34c <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f5e2:	4a19      	ldr	r2, [pc, #100]	; (f648 <gpio_nrfx_config+0x130>)
    f5e4:	f10b 0380 	add.w	r3, fp, #128	; 0x80
    f5e8:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f5ec:	9a01      	ldr	r2, [sp, #4]
    f5ee:	fa0a f309 	lsl.w	r3, sl, r9
    f5f2:	68a1      	ldr	r1, [r4, #8]
    f5f4:	b32a      	cbz	r2, f642 <gpio_nrfx_config+0x12a>
    f5f6:	4319      	orrs	r1, r3
    f5f8:	60a1      	str	r1, [r4, #8]
    f5fa:	6961      	ldr	r1, [r4, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f5fc:	06a8      	lsls	r0, r5, #26
    f5fe:	bf4c      	ite	mi
    f600:	4319      	orrmi	r1, r3
    f602:	4399      	bicpl	r1, r3
    f604:	6161      	str	r1, [r4, #20]
    f606:	69a1      	ldr	r1, [r4, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    f608:	066a      	lsls	r2, r5, #25
    f60a:	bf4c      	ite	mi
    f60c:	4319      	orrmi	r1, r3
    f60e:	4399      	bicpl	r1, r3
    f610:	61a1      	str	r1, [r4, #24]
    f612:	6921      	ldr	r1, [r4, #16]
		WRITE_BIT(data->active_level, curr_pin,
    f614:	0768      	lsls	r0, r5, #29
    f616:	bf4c      	ite	mi
    f618:	4319      	orrmi	r1, r3
    f61a:	4399      	bicpl	r1, r3
    f61c:	6121      	str	r1, [r4, #16]
    f61e:	69e1      	ldr	r1, [r4, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f620:	062a      	lsls	r2, r5, #24
    f622:	bf4c      	ite	mi
    f624:	430b      	orrmi	r3, r1
    f626:	ea21 0303 	bicpl.w	r3, r1, r3
    f62a:	61e3      	str	r3, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f62c:	4649      	mov	r1, r9
    f62e:	4638      	mov	r0, r7
    f630:	f7ff febc 	bl	f3ac <gpiote_pin_int_cfg>
		if (res != 0) {
    f634:	2800      	cmp	r0, #0
    f636:	d1a5      	bne.n	f584 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f638:	f109 0201 	add.w	r2, r9, #1
    f63c:	fa5f f982 	uxtb.w	r9, r2
    f640:	e79d      	b.n	f57e <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f642:	ea21 0103 	bic.w	r1, r1, r3
    f646:	e7d7      	b.n	f5f8 <gpio_nrfx_config+0xe0>
    f648:	40842500 	.word	0x40842500

0000f64c <gpiote_event_handler>:
{
    f64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    f650:	4f56      	ldr	r7, [pc, #344]	; (f7ac <gpiote_event_handler+0x160>)
    f652:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    f654:	2e01      	cmp	r6, #1
    f656:	d17c      	bne.n	f752 <gpiote_event_handler+0x106>
	u32_t bit = 1U << pin;
    f658:	46b0      	mov	r8, r6
	u32_t pin = 0U;
    f65a:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f65e:	4a54      	ldr	r2, [pc, #336]	; (f7b0 <gpiote_event_handler+0x164>)
    f660:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    f662:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f664:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    f666:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f66a:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
    f66e:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    f670:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    f674:	430a      	orrs	r2, r1
    f676:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f67a:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f67e:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f680:	6912      	ldr	r2, [r2, #16]
    f682:	405c      	eors	r4, r3
    f684:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    f686:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    f68a:	2d00      	cmp	r5, #0
    f68c:	d14e      	bne.n	f72c <gpiote_event_handler+0xe0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f68e:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f690:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    f692:	2701      	movs	r7, #1
    f694:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
    f696:	4d47      	ldr	r5, [pc, #284]	; (f7b4 <gpiote_event_handler+0x168>)
    f698:	f8df c124 	ldr.w	ip, [pc, #292]	; f7c0 <gpiote_event_handler+0x174>
    f69c:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    f6a0:	fa07 f103 	lsl.w	r1, r7, r3
    f6a4:	4211      	tst	r1, r2
    f6a6:	d00f      	beq.n	f6c8 <gpiote_event_handler+0x7c>
    f6a8:	eb03 020c 	add.w	r2, r3, ip
    f6ac:	0092      	lsls	r2, r2, #2
    f6ae:	6811      	ldr	r1, [r2, #0]
    f6b0:	2901      	cmp	r1, #1
    f6b2:	d109      	bne.n	f6c8 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f6b4:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    f6b8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f6bc:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f6c0:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f6c4:	4081      	lsls	r1, r0
    f6c6:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f6c8:	3301      	adds	r3, #1
    f6ca:	2b08      	cmp	r3, #8
    f6cc:	d1e6      	bne.n	f69c <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    f6ce:	2c00      	cmp	r4, #0
    f6d0:	d041      	beq.n	f756 <gpiote_event_handler+0x10a>
	struct gpio_nrfx_data *data = get_port_data(port);
    f6d2:	4b37      	ldr	r3, [pc, #220]	; (f7b0 <gpiote_event_handler+0x164>)
    f6d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f6d8:	f8d9 5000 	ldr.w	r5, [r9]
    f6dc:	2d00      	cmp	r5, #0
    f6de:	d03a      	beq.n	f756 <gpiote_event_handler+0x10a>
			cb->handler(port, cb, pins);
    f6e0:	4698      	mov	r8, r3
	return node->next;
    f6e2:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
    f6e4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; f7c4 <gpiote_event_handler+0x178>
    f6e8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; f7c8 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
    f6ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
    f6f0:	68aa      	ldr	r2, [r5, #8]
    f6f2:	4023      	ands	r3, r4
    f6f4:	4213      	tst	r3, r2
    f6f6:	d015      	beq.n	f724 <gpiote_event_handler+0xd8>
			__ASSERT(cb->handler, "No callback handler!");
    f6f8:	686b      	ldr	r3, [r5, #4]
    f6fa:	b973      	cbnz	r3, f71a <gpiote_event_handler+0xce>
    f6fc:	4659      	mov	r1, fp
    f6fe:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    f702:	4652      	mov	r2, sl
    f704:	482c      	ldr	r0, [pc, #176]	; (f7b8 <gpiote_event_handler+0x16c>)
    f706:	f014 fbb7 	bl	23e78 <printk>
    f70a:	482c      	ldr	r0, [pc, #176]	; (f7bc <gpiote_event_handler+0x170>)
    f70c:	f014 fbb4 	bl	23e78 <printk>
    f710:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    f714:	4650      	mov	r0, sl
    f716:	f014 fbbc 	bl	23e92 <assert_post_action>
			cb->handler(port, cb, pins);
    f71a:	686b      	ldr	r3, [r5, #4]
    f71c:	4622      	mov	r2, r4
    f71e:	4629      	mov	r1, r5
    f720:	4640      	mov	r0, r8
    f722:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f724:	b1bf      	cbz	r7, f756 <gpiote_event_handler+0x10a>
    f726:	463d      	mov	r5, r7
    f728:	683f      	ldr	r7, [r7, #0]
    f72a:	e7df      	b.n	f6ec <gpiote_event_handler+0xa0>
		if (level_pins & bit) {
    f72c:	ea15 0f08 	tst.w	r5, r8
    f730:	d00a      	beq.n	f748 <gpiote_event_handler+0xfc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f732:	f899 3004 	ldrb.w	r3, [r9, #4]
    f736:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f73a:	2100      	movs	r1, #0
    f73c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    f740:	f7ff fe1a 	bl	f378 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f744:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    f748:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    f74c:	ea4f 0848 	mov.w	r8, r8, lsl #1
    f750:	e79b      	b.n	f68a <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f752:	2400      	movs	r4, #0
    f754:	e79c      	b.n	f690 <gpiote_event_handler+0x44>
	if (port_event) {
    f756:	2e01      	cmp	r6, #1
    f758:	d10e      	bne.n	f778 <gpiote_event_handler+0x12c>
	u32_t pin = 0U;
    f75a:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f75c:	4b14      	ldr	r3, [pc, #80]	; (f7b0 <gpiote_event_handler+0x164>)
    f75e:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
    f760:	681b      	ldr	r3, [r3, #0]
    f762:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f766:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    f76a:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    f76c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    f770:	4313      	orrs	r3, r2
    f772:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    f776:	b90c      	cbnz	r4, f77c <gpiote_event_handler+0x130>
}
    f778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
    f77c:	4226      	tst	r6, r4
    f77e:	d012      	beq.n	f7a6 <gpiote_event_handler+0x15a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f780:	692b      	ldr	r3, [r5, #16]
    f782:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f784:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f788:	4053      	eors	r3, r2
    f78a:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    f78c:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f790:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f794:	bf0c      	ite	eq
    f796:	2103      	moveq	r1, #3
    f798:	2102      	movne	r1, #2
    f79a:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    f79e:	f7ff fdeb 	bl	f378 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f7a2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    f7a6:	3701      	adds	r7, #1
		bit <<= 1;
    f7a8:	0076      	lsls	r6, r6, #1
    f7aa:	e7e4      	b.n	f776 <gpiote_event_handler+0x12a>
    f7ac:	4003117c 	.word	0x4003117c
    f7b0:	2002a39c 	.word	0x2002a39c
    f7b4:	40031000 	.word	0x40031000
    f7b8:	0002694b 	.word	0x0002694b
    f7bc:	00027119 	.word	0x00027119
    f7c0:	1000c440 	.word	0x1000c440
    f7c4:	00027130 	.word	0x00027130
    f7c8:	000272be 	.word	0x000272be

0000f7cc <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    f7cc:	b510      	push	{r4, lr}
    f7ce:	4604      	mov	r4, r0
    f7d0:	2200      	movs	r2, #0
    f7d2:	2101      	movs	r1, #1
    f7d4:	200a      	movs	r0, #10
    f7d6:	f7fe fa7b 	bl	dcd0 <z_arm_irq_priority_set>
	return dev->config->config_info;
    f7da:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    f7dc:	4a06      	ldr	r2, [pc, #24]	; (f7f8 <twim_2_init+0x2c>)
	return dev->config->config_info;
    f7de:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    f7e0:	4623      	mov	r3, r4
    f7e2:	f100 0108 	add.w	r1, r0, #8
    f7e6:	f010 f927 	bl	1fa38 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    f7ea:	4b04      	ldr	r3, [pc, #16]	; (f7fc <twim_2_init+0x30>)
    f7ec:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
    f7ee:	bf14      	ite	ne
    f7f0:	f06f 000f 	mvnne.w	r0, #15
    f7f4:	2000      	moveq	r0, #0
    f7f6:	bd10      	pop	{r4, pc}
    f7f8:	0000f801 	.word	0x0000f801
    f7fc:	0bad0000 	.word	0x0bad0000

0000f800 <event_handler>:
	switch (p_event->type) {
    f800:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    f802:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    f804:	2a01      	cmp	r2, #1
    f806:	d00a      	beq.n	f81e <event_handler+0x1e>
    f808:	d303      	bcc.n	f812 <event_handler+0x12>
    f80a:	2a02      	cmp	r2, #2
    f80c:	d009      	beq.n	f822 <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    f80e:	4a06      	ldr	r2, [pc, #24]	; (f828 <event_handler+0x28>)
    f810:	e000      	b.n	f814 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    f812:	4a06      	ldr	r2, [pc, #24]	; (f82c <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    f814:	631a      	str	r2, [r3, #48]	; 0x30
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f816:	f103 0018 	add.w	r0, r3, #24
    f81a:	f012 bcb7 	b.w	2218c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    f81e:	4a04      	ldr	r2, [pc, #16]	; (f830 <event_handler+0x30>)
    f820:	e7f8      	b.n	f814 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    f822:	4a04      	ldr	r2, [pc, #16]	; (f834 <event_handler+0x34>)
    f824:	e7f6      	b.n	f814 <event_handler+0x14>
    f826:	bf00      	nop
    f828:	0bad0001 	.word	0x0bad0001
    f82c:	0bad0000 	.word	0x0bad0000
    f830:	0bae0001 	.word	0x0bae0001
    f834:	0bae0002 	.word	0x0bae0002

0000f838 <i2c_nrfx_twim_transfer>:
{
    f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f83c:	4604      	mov	r4, r0
    f83e:	b087      	sub	sp, #28
    f840:	460d      	mov	r5, r1
    f842:	4691      	mov	r9, r2
    f844:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    f846:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
    f848:	f04f 31ff 	mov.w	r1, #4294967295
    f84c:	f012 fce6 	bl	2221c <z_impl_k_sem_take>
	return dev->config->config_info;
    f850:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    f852:	2700      	movs	r7, #0
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    f854:	6898      	ldr	r0, [r3, #8]
    f856:	f010 f961 	bl	1fb1c <nrfx_twim_enable>
		if (res != NRFX_SUCCESS) {
    f85a:	f8df 8098 	ldr.w	r8, [pc, #152]	; f8f4 <i2c_nrfx_twim_transfer+0xbc>
    f85e:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
    f860:	454f      	cmp	r7, r9
    f862:	f8d3 b008 	ldr.w	fp, [r3, #8]
    f866:	d301      	bcc.n	f86c <i2c_nrfx_twim_transfer+0x34>
	int ret = 0;
    f868:	2500      	movs	r5, #0
    f86a:	e022      	b.n	f8b2 <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    f86c:	7a2e      	ldrb	r6, [r5, #8]
    f86e:	f016 0108 	ands.w	r1, r6, #8
    f872:	d136      	bne.n	f8e2 <i2c_nrfx_twim_transfer+0xaa>
		nrfx_twim_xfer_desc_t cur_xfer = {
    f874:	2212      	movs	r2, #18
    f876:	f10d 0006 	add.w	r0, sp, #6
    f87a:	f014 fcda 	bl	24232 <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
    f87e:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
    f882:	f88d 3004 	strb.w	r3, [sp, #4]
    f886:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    f888:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
    f88c:	9302      	str	r3, [sp, #8]
    f88e:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    f890:	bf0c      	ite	eq
    f892:	2220      	moveq	r2, #32
    f894:	2200      	movne	r2, #0
    f896:	a901      	add	r1, sp, #4
    f898:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
    f89a:	f88d a005 	strb.w	sl, [sp, #5]
    f89e:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    f8a0:	f010 f99c 	bl	1fbdc <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    f8a4:	4540      	cmp	r0, r8
    f8a6:	d00f      	beq.n	f8c8 <i2c_nrfx_twim_transfer+0x90>
			if (res == NRFX_ERROR_BUSY) {
    f8a8:	4b11      	ldr	r3, [pc, #68]	; (f8f0 <i2c_nrfx_twim_transfer+0xb8>)
    f8aa:	4298      	cmp	r0, r3
    f8ac:	d01c      	beq.n	f8e8 <i2c_nrfx_twim_transfer+0xb0>
				ret = -EIO;
    f8ae:	f06f 0504 	mvn.w	r5, #4
	return dev->config->config_info;
    f8b2:	6823      	ldr	r3, [r4, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    f8b4:	6898      	ldr	r0, [r3, #8]
    f8b6:	f010 f95b 	bl	1fb70 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    f8ba:	68a0      	ldr	r0, [r4, #8]
	z_impl_k_sem_give(sem);
    f8bc:	f012 fc66 	bl	2218c <z_impl_k_sem_give>
}
    f8c0:	4628      	mov	r0, r5
    f8c2:	b007      	add	sp, #28
    f8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    f8c8:	68a0      	ldr	r0, [r4, #8]
    f8ca:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
    f8cc:	f04f 31ff 	mov.w	r1, #4294967295
    f8d0:	f012 fca4 	bl	2221c <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    f8d4:	68a3      	ldr	r3, [r4, #8]
    f8d6:	350c      	adds	r5, #12
    f8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    f8da:	4543      	cmp	r3, r8
    f8dc:	d1e7      	bne.n	f8ae <i2c_nrfx_twim_transfer+0x76>
	for (size_t i = 0; i < num_msgs; i++) {
    f8de:	3701      	adds	r7, #1
    f8e0:	e7bd      	b.n	f85e <i2c_nrfx_twim_transfer+0x26>
			ret = -ENOTSUP;
    f8e2:	f06f 0522 	mvn.w	r5, #34	; 0x22
    f8e6:	e7e4      	b.n	f8b2 <i2c_nrfx_twim_transfer+0x7a>
				ret = -EBUSY;
    f8e8:	f06f 050f 	mvn.w	r5, #15
    f8ec:	e7e1      	b.n	f8b2 <i2c_nrfx_twim_transfer+0x7a>
    f8ee:	bf00      	nop
    f8f0:	0bad000b 	.word	0x0bad000b
    f8f4:	0bad0000 	.word	0x0bad0000

0000f8f8 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
    f8f8:	b510      	push	{r4, lr}
    f8fa:	4604      	mov	r4, r0
    f8fc:	2200      	movs	r2, #0
    f8fe:	2101      	movs	r1, #1
    f900:	200b      	movs	r0, #11
    f902:	f7fe f9e5 	bl	dcd0 <z_arm_irq_priority_set>
	return dev->config->config_info;
    f906:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f908:	4a08      	ldr	r2, [pc, #32]	; (f92c <spi_3_init+0x34>)
	return dev->config->config_info;
    f90a:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f90c:	4623      	mov	r3, r4
    f90e:	f100 010c 	add.w	r1, r0, #12
    f912:	f00f fe91 	bl	1f638 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    f916:	4b06      	ldr	r3, [pc, #24]	; (f930 <spi_3_init+0x38>)
    f918:	4298      	cmp	r0, r3
    f91a:	d104      	bne.n	f926 <spi_3_init+0x2e>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    f91c:	68a0      	ldr	r0, [r4, #8]
    f91e:	f014 fe08 	bl	24532 <spi_context_unlock_unconditionally>
	return 0;
    f922:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
    f924:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f926:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
    f92a:	e7fb      	b.n	f924 <spi_3_init+0x2c>
    f92c:	00024573 	.word	0x00024573
    f930:	0bad0000 	.word	0x0bad0000

0000f934 <transfer_next_chunk>:
{
    f934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f936:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    f938:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    f93a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    f93c:	b98a      	cbnz	r2, f962 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    f93e:	2b00      	cmp	r3, #0
    f940:	d133      	bne.n	f9aa <transfer_next_chunk+0x76>
	int error = 0;
    f942:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    f944:	2200      	movs	r2, #0
    f946:	4628      	mov	r0, r5
    f948:	4611      	mov	r1, r2
    f94a:	f014 fdc8 	bl	244de <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
    f94e:	636c      	str	r4, [r5, #52]	; 0x34
	z_impl_k_sem_give(sem);
    f950:	f105 001c 	add.w	r0, r5, #28
    f954:	f012 fc1a 	bl	2218c <z_impl_k_sem_give>
	dev_data->busy = false;
    f958:	2300      	movs	r3, #0
    f95a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    f95e:	b004      	add	sp, #16
    f960:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    f962:	b323      	cbz	r3, f9ae <transfer_next_chunk+0x7a>
    f964:	4293      	cmp	r3, r2
    f966:	4619      	mov	r1, r3
    f968:	bf28      	it	cs
    f96a:	4611      	movcs	r1, r2
	return dev->config->config_info;
    f96c:	6800      	ldr	r0, [r0, #0]
		const u8_t *tx_buf = ctx->tx_buf;
    f96e:	6cac      	ldr	r4, [r5, #72]	; 0x48
	return dev->config->config_info;
    f970:	6880      	ldr	r0, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
    f972:	9400      	str	r4, [sp, #0]
    f974:	6886      	ldr	r6, [r0, #8]
    f976:	42b1      	cmp	r1, r6
    f978:	bf28      	it	cs
    f97a:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
    f97c:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
    f97e:	b1c4      	cbz	r4, f9b2 <transfer_next_chunk+0x7e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    f980:	2a00      	cmp	r2, #0
    f982:	bf18      	it	ne
    f984:	460a      	movne	r2, r1
    f986:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    f988:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    f98a:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    f98c:	b19a      	cbz	r2, f9b6 <transfer_next_chunk+0x82>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f98e:	2b00      	cmp	r3, #0
    f990:	bf18      	it	ne
    f992:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f994:	2200      	movs	r2, #0
    f996:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f998:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f99a:	f00f ff1d 	bl	1f7d8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    f99e:	4b07      	ldr	r3, [pc, #28]	; (f9bc <transfer_next_chunk+0x88>)
    f9a0:	4298      	cmp	r0, r3
    f9a2:	d0dc      	beq.n	f95e <transfer_next_chunk+0x2a>
    f9a4:	f06f 0404 	mvn.w	r4, #4
    f9a8:	e7cc      	b.n	f944 <transfer_next_chunk+0x10>
    f9aa:	4619      	mov	r1, r3
    f9ac:	e7de      	b.n	f96c <transfer_next_chunk+0x38>
	} else if (!ctx->rx_len) {
    f9ae:	4611      	mov	r1, r2
    f9b0:	e7dc      	b.n	f96c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    f9b2:	4622      	mov	r2, r4
    f9b4:	e7e7      	b.n	f986 <transfer_next_chunk+0x52>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f9b6:	4613      	mov	r3, r2
    f9b8:	e7ec      	b.n	f994 <transfer_next_chunk+0x60>
    f9ba:	bf00      	nop
    f9bc:	0bad0000 	.word	0x0bad0000

0000f9c0 <spi_nrfx_transceive>:
{
    f9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9c4:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
    f9c6:	6880      	ldr	r0, [r0, #8]
    f9c8:	4688      	mov	r8, r1
    f9ca:	4616      	mov	r6, r2
    f9cc:	461d      	mov	r5, r3
    f9ce:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    f9d0:	f04f 31ff 	mov.w	r1, #4294967295
    f9d4:	f012 fc22 	bl	2221c <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f9d8:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
    f9da:	6823      	ldr	r3, [r4, #0]
    f9dc:	4598      	cmp	r8, r3
    f9de:	d060      	beq.n	faa2 <spi_nrfx_transceive+0xe2>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    f9e0:	f641 0109 	movw	r1, #6153	; 0x1809
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    f9e4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    f9e8:	4019      	ands	r1, r3
    f9ea:	f040 80aa 	bne.w	fb42 <spi_nrfx_transceive+0x182>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    f9ee:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f9f2:	2b08      	cmp	r3, #8
    f9f4:	f040 80a5 	bne.w	fb42 <spi_nrfx_transceive+0x182>
	if (spi_cfg->frequency < 125000) {
    f9f8:	f8d8 2000 	ldr.w	r2, [r8]
    f9fc:	4b52      	ldr	r3, [pc, #328]	; (fb48 <spi_nrfx_transceive+0x188>)
    f9fe:	429a      	cmp	r2, r3
    fa00:	f240 809f 	bls.w	fb42 <spi_nrfx_transceive+0x182>
	return dev->config->config_info;
    fa04:	683b      	ldr	r3, [r7, #0]
    fa06:	f8d3 9008 	ldr.w	r9, [r3, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    fa0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	ctx->config = spi_cfg;
    fa0e:	f8c4 8000 	str.w	r8, [r4]
    fa12:	b18b      	cbz	r3, fa38 <spi_nrfx_transceive+0x78>
    fa14:	6818      	ldr	r0, [r3, #0]
    fa16:	b178      	cbz	r0, fa38 <spi_nrfx_transceive+0x78>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    fa18:	685a      	ldr	r2, [r3, #4]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    fa1a:	6843      	ldr	r3, [r0, #4]
    fa1c:	f8d3 a000 	ldr.w	sl, [r3]
    fa20:	2301      	movs	r3, #1
    fa22:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
    fa24:	6822      	ldr	r2, [r4, #0]
    fa26:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    fa28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
    fa2c:	e9d3 0100 	ldrd	r0, r1, [r3]
    fa30:	43d2      	mvns	r2, r2
    fa32:	0fd2      	lsrs	r2, r2, #31
    fa34:	f014 fd49 	bl	244ca <gpio_pin_write>
	nrf_spim_configure(spim->p_reg,
    fa38:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    fa3c:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    fa40:	0798      	lsls	r0, r3, #30
    fa42:	f003 0204 	and.w	r2, r3, #4
    fa46:	d559      	bpl.n	fafc <spi_nrfx_transceive+0x13c>
			return NRF_SPIM_MODE_3;
    fa48:	2a00      	cmp	r2, #0
    fa4a:	bf0c      	ite	eq
    fa4c:	2202      	moveq	r2, #2
    fa4e:	2203      	movne	r2, #3
                                        nrf_spim_mode_t      spi_mode,
                                        nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    fa50:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    fa52:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fa56:	d055      	beq.n	fb04 <spi_nrfx_transceive+0x144>
    fa58:	2a03      	cmp	r2, #3
    fa5a:	d056      	beq.n	fb0a <spi_nrfx_transceive+0x14a>
    fa5c:	2a01      	cmp	r2, #1
    fa5e:	d101      	bne.n	fa64 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    fa60:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    fa64:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    fa68:	4a38      	ldr	r2, [pc, #224]	; (fb4c <spi_nrfx_transceive+0x18c>)
	nrf_spim_frequency_set(spim->p_reg,
    fa6a:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
    fa6e:	4293      	cmp	r3, r2
    fa70:	d94e      	bls.n	fb10 <spi_nrfx_transceive+0x150>
	} else if (frequency < 500000) {
    fa72:	4a37      	ldr	r2, [pc, #220]	; (fb50 <spi_nrfx_transceive+0x190>)
    fa74:	4293      	cmp	r3, r2
    fa76:	d94e      	bls.n	fb16 <spi_nrfx_transceive+0x156>
	} else if (frequency < 1000000) {
    fa78:	4a36      	ldr	r2, [pc, #216]	; (fb54 <spi_nrfx_transceive+0x194>)
    fa7a:	4293      	cmp	r3, r2
    fa7c:	d94e      	bls.n	fb1c <spi_nrfx_transceive+0x15c>
	} else if (frequency < 2000000) {
    fa7e:	4a36      	ldr	r2, [pc, #216]	; (fb58 <spi_nrfx_transceive+0x198>)
    fa80:	4293      	cmp	r3, r2
    fa82:	d94e      	bls.n	fb22 <spi_nrfx_transceive+0x162>
	} else if (frequency < 4000000) {
    fa84:	4a35      	ldr	r2, [pc, #212]	; (fb5c <spi_nrfx_transceive+0x19c>)
    fa86:	4293      	cmp	r3, r2
    fa88:	d94e      	bls.n	fb28 <spi_nrfx_transceive+0x168>
		return NRF_SPIM_FREQ_4M;
    fa8a:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    fa8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    fa92:	4293      	cmp	r3, r2
    fa94:	bf8c      	ite	hi
    fa96:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    fa9a:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    fa9e:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    faa2:	2301      	movs	r3, #1
    faa4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
    faa8:	2e00      	cmp	r6, #0
    faaa:	d040      	beq.n	fb2e <spi_nrfx_transceive+0x16e>
		ctx->current_tx = tx_bufs->buffers;
    faac:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    faae:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    fab0:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
    fab2:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    fab4:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    fab6:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    fab8:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
    faba:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
    fabc:	2d00      	cmp	r5, #0
    fabe:	d03b      	beq.n	fb38 <spi_nrfx_transceive+0x178>
		ctx->current_rx = rx_bufs->buffers;
    fac0:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    fac2:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    fac4:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
    fac6:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    fac8:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    faca:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    facc:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
    face:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
    fad0:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    fad2:	2101      	movs	r1, #1
	ctx->sync_status = 0;
    fad4:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
    fad6:	4620      	mov	r0, r4
    fad8:	f014 fd01 	bl	244de <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
    fadc:	4638      	mov	r0, r7
    fade:	f7ff ff29 	bl	f934 <transfer_next_chunk>
    fae2:	f04f 31ff 	mov.w	r1, #4294967295
    fae6:	f104 001c 	add.w	r0, r4, #28
    faea:	f012 fb97 	bl	2221c <z_impl_k_sem_take>
	status = ctx->sync_status;
    faee:	6b65      	ldr	r5, [r4, #52]	; 0x34
	z_impl_k_sem_give(sem);
    faf0:	1d20      	adds	r0, r4, #4
    faf2:	f012 fb4b 	bl	2218c <z_impl_k_sem_give>
}
    faf6:	4628      	mov	r0, r5
    faf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return NRF_SPIM_MODE_3;
    fafc:	3200      	adds	r2, #0
    fafe:	bf18      	it	ne
    fb00:	2201      	movne	r2, #1
    fb02:	e7a5      	b.n	fa50 <spi_nrfx_transceive+0x90>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fb04:	f043 0304 	orr.w	r3, r3, #4
    fb08:	e7ac      	b.n	fa64 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fb0a:	f043 0306 	orr.w	r3, r3, #6
    fb0e:	e7a9      	b.n	fa64 <spi_nrfx_transceive+0xa4>
		return NRF_SPIM_FREQ_125K;
    fb10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    fb14:	e7c3      	b.n	fa9e <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_250K;
    fb16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    fb1a:	e7c0      	b.n	fa9e <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_500K;
    fb1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    fb20:	e7bd      	b.n	fa9e <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_1M;
    fb22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fb26:	e7ba      	b.n	fa9e <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_2M;
    fb28:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    fb2c:	e7b7      	b.n	fa9e <spi_nrfx_transceive+0xde>
		ctx->tx_count = 0;
    fb2e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
    fb32:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
    fb36:	e7c1      	b.n	fabc <spi_nrfx_transceive+0xfc>
		ctx->rx_count = 0;
    fb38:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
    fb3c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    fb40:	e7c6      	b.n	fad0 <spi_nrfx_transceive+0x110>
		return -EINVAL;
    fb42:	f06f 0515 	mvn.w	r5, #21
    fb46:	e7d3      	b.n	faf0 <spi_nrfx_transceive+0x130>
    fb48:	0001e847 	.word	0x0001e847
    fb4c:	0003d08f 	.word	0x0003d08f
    fb50:	0007a11f 	.word	0x0007a11f
    fb54:	000f423f 	.word	0x000f423f
    fb58:	001e847f 	.word	0x001e847f
    fb5c:	003d08ff 	.word	0x003d08ff

0000fb60 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    fb62:	794b      	ldrb	r3, [r1, #5]
    fb64:	2b01      	cmp	r3, #1
    fb66:	d029      	beq.n	fbbc <uarte_nrfx_configure+0x5c>
    fb68:	2b03      	cmp	r3, #3
    fb6a:	d124      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    fb6c:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    fb6e:	798b      	ldrb	r3, [r1, #6]
    fb70:	2b03      	cmp	r3, #3
    fb72:	d120      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    fb74:	79cd      	ldrb	r5, [r1, #7]
    fb76:	b12d      	cbz	r5, fb84 <uarte_nrfx_configure+0x24>
    fb78:	2d01      	cmp	r5, #1
    fb7a:	d11c      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    fb7c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    fb7e:	689b      	ldr	r3, [r3, #8]
    fb80:	791b      	ldrb	r3, [r3, #4]
    fb82:	b1c3      	cbz	r3, fbb6 <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    fb84:	790a      	ldrb	r2, [r1, #4]
    fb86:	b112      	cbz	r2, fb8e <uarte_nrfx_configure+0x2e>
    fb88:	2a02      	cmp	r2, #2
    fb8a:	d114      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    fb8c:	220e      	movs	r2, #14
	switch (baudrate) {
    fb8e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    fb92:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    fb94:	689b      	ldr	r3, [r3, #8]
    fb96:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
    fb98:	680b      	ldr	r3, [r1, #0]
    fb9a:	42bb      	cmp	r3, r7
    fb9c:	d074      	beq.n	fc88 <uarte_nrfx_configure+0x128>
    fb9e:	d829      	bhi.n	fbf4 <uarte_nrfx_configure+0x94>
    fba0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    fba4:	d06a      	beq.n	fc7c <uarte_nrfx_configure+0x11c>
    fba6:	d814      	bhi.n	fbd2 <uarte_nrfx_configure+0x72>
    fba8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    fbac:	d04f      	beq.n	fc4e <uarte_nrfx_configure+0xee>
    fbae:	d807      	bhi.n	fbc0 <uarte_nrfx_configure+0x60>
    fbb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    fbb4:	d07d      	beq.n	fcb2 <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
    fbb6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fbba:	e05b      	b.n	fc74 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
    fbbc:	2600      	movs	r6, #0
    fbbe:	e7d6      	b.n	fb6e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    fbc0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    fbc4:	d057      	beq.n	fc76 <uarte_nrfx_configure+0x116>
    fbc6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    fbca:	d1f4      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    fbcc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    fbd0:	e03f      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fbd2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    fbd6:	d053      	beq.n	fc80 <uarte_nrfx_configure+0x120>
    fbd8:	d804      	bhi.n	fbe4 <uarte_nrfx_configure+0x84>
    fbda:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    fbde:	d1ea      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    fbe0:	4b35      	ldr	r3, [pc, #212]	; (fcb8 <uarte_nrfx_configure+0x158>)
    fbe2:	e036      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fbe4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    fbe8:	d04c      	beq.n	fc84 <uarte_nrfx_configure+0x124>
    fbea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    fbee:	d1e2      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    fbf0:	4b32      	ldr	r3, [pc, #200]	; (fcbc <uarte_nrfx_configure+0x15c>)
    fbf2:	e02e      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fbf4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    fbf8:	d04f      	beq.n	fc9a <uarte_nrfx_configure+0x13a>
    fbfa:	d812      	bhi.n	fc22 <uarte_nrfx_configure+0xc2>
    fbfc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    fc00:	42bb      	cmp	r3, r7
    fc02:	d044      	beq.n	fc8e <uarte_nrfx_configure+0x12e>
    fc04:	d805      	bhi.n	fc12 <uarte_nrfx_configure+0xb2>
    fc06:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    fc0a:	d1d4      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    fc0c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    fc10:	e01f      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fc12:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    fc16:	d03d      	beq.n	fc94 <uarte_nrfx_configure+0x134>
    fc18:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    fc1c:	d1cb      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    fc1e:	4b28      	ldr	r3, [pc, #160]	; (fcc0 <uarte_nrfx_configure+0x160>)
    fc20:	e017      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fc22:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    fc26:	d03e      	beq.n	fca6 <uarte_nrfx_configure+0x146>
    fc28:	d808      	bhi.n	fc3c <uarte_nrfx_configure+0xdc>
    fc2a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    fc2e:	d037      	beq.n	fca0 <uarte_nrfx_configure+0x140>
    fc30:	4f24      	ldr	r7, [pc, #144]	; (fcc4 <uarte_nrfx_configure+0x164>)
    fc32:	42bb      	cmp	r3, r7
    fc34:	d1bf      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    fc36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    fc3a:	e00a      	b.n	fc52 <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    fc3c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fc40:	d034      	beq.n	fcac <uarte_nrfx_configure+0x14c>
    fc42:	4f21      	ldr	r7, [pc, #132]	; (fcc8 <uarte_nrfx_configure+0x168>)
    fc44:	42bb      	cmp	r3, r7
    fc46:	d1b6      	bne.n	fbb6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    fc48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fc4c:	e001      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
    fc4e:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    fc52:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    fc54:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    fc58:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    fc5c:	b12e      	cbz	r6, fc6a <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    fc5e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    fc62:	f043 0310 	orr.w	r3, r3, #16
    fc66:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    fc6a:	6883      	ldr	r3, [r0, #8]
    fc6c:	c903      	ldmia	r1, {r0, r1}
    fc6e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    fc72:	2000      	movs	r0, #0
}
    fc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    fc76:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    fc7a:	e7ea      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    fc7c:	4b13      	ldr	r3, [pc, #76]	; (fccc <uarte_nrfx_configure+0x16c>)
    fc7e:	e7e8      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    fc80:	4b13      	ldr	r3, [pc, #76]	; (fcd0 <uarte_nrfx_configure+0x170>)
    fc82:	e7e6      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    fc84:	4b13      	ldr	r3, [pc, #76]	; (fcd4 <uarte_nrfx_configure+0x174>)
    fc86:	e7e4      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    fc88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    fc8c:	e7e1      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    fc8e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    fc92:	e7de      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    fc94:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    fc98:	e7db      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    fc9a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    fc9e:	e7d8      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    fca0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    fca4:	e7d5      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    fca6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    fcaa:	e7d2      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    fcac:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    fcb0:	e7cf      	b.n	fc52 <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
    fcb2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    fcb6:	e7cc      	b.n	fc52 <uarte_nrfx_configure+0xf2>
    fcb8:	00275000 	.word	0x00275000
    fcbc:	0075c000 	.word	0x0075c000
    fcc0:	013a9000 	.word	0x013a9000
    fcc4:	0003d090 	.word	0x0003d090
    fcc8:	000f4240 	.word	0x000f4240
    fccc:	0013b000 	.word	0x0013b000
    fcd0:	003af000 	.word	0x003af000
    fcd4:	004ea000 	.word	0x004ea000

0000fcd8 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    fcd8:	b570      	push	{r4, r5, r6, lr}
    fcda:	4606      	mov	r6, r0
    fcdc:	2200      	movs	r2, #0
    fcde:	2101      	movs	r1, #1
    fce0:	2008      	movs	r0, #8
    fce2:	f7fd fff5 	bl	dcd0 <z_arm_irq_priority_set>
    fce6:	2008      	movs	r0, #8
    fce8:	f7fd ffe2 	bl	dcb0 <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    fcec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	return dev->config->config_info;
    fcf0:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    fcf2:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
    fcf4:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fcf6:	2103      	movs	r1, #3
    fcf8:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    fcfa:	4b1a      	ldr	r3, [pc, #104]	; (fd64 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
    fcfc:	2012      	movs	r0, #18
    fcfe:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd00:	2200      	movs	r2, #0
    fd02:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
    fd06:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    fd0a:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    fd0e:	2013      	movs	r0, #19
    fd10:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    fd14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    fd18:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd1a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    fd1e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    p_reg->PSEL.RTS = pselrts;
    fd22:	2314      	movs	r3, #20
    fd24:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    fd28:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    fd2a:	4629      	mov	r1, r5
    fd2c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    fd30:	4630      	mov	r0, r6
    fd32:	f7ff ff15 	bl	fb60 <uarte_nrfx_configure>
	if (err) {
    fd36:	b9a0      	cbnz	r0, fd62 <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fd38:	2308      	movs	r3, #8
    fd3a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    fd3e:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd42:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fd46:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fd4a:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    fd4c:	68aa      	ldr	r2, [r5, #8]
    fd4e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd52:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd54:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd56:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fd5a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd5e:	60a3      	str	r3, [r4, #8]
    fd60:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
    fd62:	bd70      	pop	{r4, r5, r6, pc}
    fd64:	40842500 	.word	0x40842500

0000fd68 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
    fd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fd6a:	460d      	mov	r5, r1
    fd6c:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
    fd6e:	b948      	cbnz	r0, fd84 <entropy_cc310_rng_get_entropy+0x1c>
    fd70:	4910      	ldr	r1, [pc, #64]	; (fdb4 <entropy_cc310_rng_get_entropy+0x4c>)
    fd72:	4811      	ldr	r0, [pc, #68]	; (fdb8 <entropy_cc310_rng_get_entropy+0x50>)
    fd74:	231e      	movs	r3, #30
    fd76:	4a11      	ldr	r2, [pc, #68]	; (fdbc <entropy_cc310_rng_get_entropy+0x54>)
    fd78:	f014 f87e 	bl	23e78 <printk>
    fd7c:	211e      	movs	r1, #30
    fd7e:	480f      	ldr	r0, [pc, #60]	; (fdbc <entropy_cc310_rng_get_entropy+0x54>)
    fd80:	f014 f887 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    fd84:	b94d      	cbnz	r5, fd9a <entropy_cc310_rng_get_entropy+0x32>
    fd86:	490e      	ldr	r1, [pc, #56]	; (fdc0 <entropy_cc310_rng_get_entropy+0x58>)
    fd88:	480b      	ldr	r0, [pc, #44]	; (fdb8 <entropy_cc310_rng_get_entropy+0x50>)
    fd8a:	231f      	movs	r3, #31
    fd8c:	4a0b      	ldr	r2, [pc, #44]	; (fdbc <entropy_cc310_rng_get_entropy+0x54>)
    fd8e:	f014 f873 	bl	23e78 <printk>
    fd92:	211f      	movs	r1, #31
    fd94:	4809      	ldr	r0, [pc, #36]	; (fdbc <entropy_cc310_rng_get_entropy+0x54>)
    fd96:	f014 f87c 	bl	23e92 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
    fd9a:	aa01      	add	r2, sp, #4
    fd9c:	4621      	mov	r1, r4
    fd9e:	4628      	mov	r0, r5
    fda0:	f7f8 f926 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
    fda4:	9b01      	ldr	r3, [sp, #4]
    fda6:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
    fda8:	bf18      	it	ne
    fdaa:	f06f 0015 	mvnne.w	r0, #21
    fdae:	b003      	add	sp, #12
    fdb0:	bd30      	pop	{r4, r5, pc}
    fdb2:	bf00      	nop
    fdb4:	000271e3 	.word	0x000271e3
    fdb8:	0002694b 	.word	0x0002694b
    fdbc:	000271b2 	.word	0x000271b2
    fdc0:	000271f6 	.word	0x000271f6

0000fdc4 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    fdc4:	2200      	movs	r2, #0
{
    fdc6:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    fdc8:	4611      	mov	r1, r2
    fdca:	202a      	movs	r0, #42	; 0x2a
    fdcc:	f7fd ff80 	bl	dcd0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    fdd0:	f002 f97e 	bl	120d0 <bsd_init>
    fdd4:	4b01      	ldr	r3, [pc, #4]	; (fddc <_bsdlib_init+0x18>)
    fdd6:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    fdd8:	2000      	movs	r0, #0
    fdda:	bd08      	pop	{r3, pc}
    fddc:	20020064 	.word	0x20020064

0000fde0 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    fde0:	2200      	movs	r2, #0
    fde2:	4b0e      	ldr	r3, [pc, #56]	; (fe1c <thread_monitor_entry_get+0x3c>)
{
    fde4:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
    fde6:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    fde8:	4b0d      	ldr	r3, [pc, #52]	; (fe20 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
    fdea:	4616      	mov	r6, r2
    fdec:	461f      	mov	r7, r3
		if (entry->id == id) {
    fdee:	58bd      	ldr	r5, [r7, r2]
    fdf0:	18b9      	adds	r1, r7, r2
    fdf2:	4285      	cmp	r5, r0
    fdf4:	d00d      	beq.n	fe12 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    fdf6:	b175      	cbz	r5, fe16 <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
    fdf8:	684d      	ldr	r5, [r1, #4]
    fdfa:	3208      	adds	r2, #8
    fdfc:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
    fdfe:	42b5      	cmp	r5, r6
    fe00:	bfc4      	itt	gt
    fe02:	462e      	movgt	r6, r5
    fe04:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    fe06:	2a50      	cmp	r2, #80	; 0x50
    fe08:	d1f1      	bne.n	fdee <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    fe0a:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
    fe0c:	3c01      	subs	r4, #1
	new_entry->id = id;
    fe0e:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    fe10:	605c      	str	r4, [r3, #4]
}
    fe12:	4608      	mov	r0, r1
    fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe16:	460b      	mov	r3, r1
    fe18:	e7f7      	b.n	fe0a <thread_monitor_entry_get+0x2a>
    fe1a:	bf00      	nop
    fe1c:	20020068 	.word	0x20020068
    fe20:	20020074 	.word	0x20020074

0000fe24 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    fe24:	4668      	mov	r0, sp
    fe26:	f020 0107 	bic.w	r1, r0, #7
    fe2a:	468d      	mov	sp, r1
    fe2c:	b519      	push	{r0, r3, r4, lr}
    fe2e:	f014 f8a3 	bl	23f78 <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fe32:	4b0d      	ldr	r3, [pc, #52]	; (fe68 <rpc_proxy_irq_handler+0x44>)
    fe34:	e8d3 2fef 	ldaex	r2, [r3]
    fe38:	3201      	adds	r2, #1
    fe3a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    fe3e:	2900      	cmp	r1, #0
    fe40:	d1f8      	bne.n	fe34 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    fe42:	f00c f837 	bl	1beb4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    fe46:	4b09      	ldr	r3, [pc, #36]	; (fe6c <rpc_proxy_irq_handler+0x48>)
    fe48:	681c      	ldr	r4, [r3, #0]
    fe4a:	b124      	cbz	r4, fe56 <rpc_proxy_irq_handler+0x32>
    fe4c:	1d20      	adds	r0, r4, #4
    fe4e:	f012 f99d 	bl	2218c <z_impl_k_sem_give>
    fe52:	6824      	ldr	r4, [r4, #0]
    fe54:	e7f9      	b.n	fe4a <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    fe56:	f7fd ff6d 	bl	dd34 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    fe5a:	f7fd fe57 	bl	db0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    fe5e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    fe62:	4685      	mov	sp, r0
    fe64:	4770      	bx	lr
    fe66:	bf00      	nop
    fe68:	20020068 	.word	0x20020068
    fe6c:	2002006c 	.word	0x2002006c

0000fe70 <bsd_os_timedwait>:
{
    fe70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe74:	460d      	mov	r5, r1
    fe76:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    fe78:	f015 f993 	bl	251a2 <z_impl_k_uptime_get>
	if (*timeout == 0) {
    fe7c:	682b      	ldr	r3, [r5, #0]
    fe7e:	4606      	mov	r6, r0
    fe80:	2b00      	cmp	r3, #0
    fe82:	460f      	mov	r7, r1
    fe84:	d103      	bne.n	fe8e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
    fe86:	f011 fff1 	bl	21e6c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    fe8a:	203c      	movs	r0, #60	; 0x3c
    fe8c:	e06a      	b.n	ff64 <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
    fe8e:	bfbc      	itt	lt
    fe90:	f04f 33ff 	movlt.w	r3, #4294967295
    fe94:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
    fe96:	2201      	movs	r2, #1
    fe98:	2100      	movs	r1, #0
    fe9a:	a802      	add	r0, sp, #8
    fe9c:	f012 f940 	bl	22120 <z_impl_k_sem_init>
    fea0:	f10d 0804 	add.w	r8, sp, #4
    fea4:	f04f 0320 	mov.w	r3, #32
    fea8:	f3ef 8911 	mrs	r9, BASEPRI
    feac:	f383 8811 	msr	BASEPRI, r3
    feb0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    feb4:	f012 f92e 	bl	22114 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    feb8:	f7ff ff92 	bl	fde0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    febc:	4c32      	ldr	r4, [pc, #200]	; (ff88 <bsd_os_timedwait+0x118>)
    febe:	6843      	ldr	r3, [r0, #4]
    fec0:	6822      	ldr	r2, [r4, #0]
    fec2:	4293      	cmp	r3, r2
    fec4:	f04f 0300 	mov.w	r3, #0
    fec8:	d108      	bne.n	fedc <bsd_os_timedwait+0x6c>
	parent->next = child;
    feca:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    fecc:	4b2f      	ldr	r3, [pc, #188]	; (ff8c <bsd_os_timedwait+0x11c>)
    fece:	685a      	ldr	r2, [r3, #4]
    fed0:	2a00      	cmp	r2, #0
    fed2:	d14a      	bne.n	ff6a <bsd_os_timedwait+0xfa>
	list->head = node;
    fed4:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
    fed8:	2301      	movs	r3, #1
    feda:	e000      	b.n	fede <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
    fedc:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    fede:	f389 8811 	msr	BASEPRI, r9
    fee2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    fee6:	2b00      	cmp	r3, #0
    fee8:	d03b      	beq.n	ff62 <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
    feea:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
    feec:	a802      	add	r0, sp, #8
    feee:	f012 f995 	bl	2221c <z_impl_k_sem_take>
	__asm__ volatile(
    fef2:	f04f 0320 	mov.w	r3, #32
    fef6:	f3ef 8911 	mrs	r9, BASEPRI
    fefa:	f383 8811 	msr	BASEPRI, r3
    fefe:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ff02:	2100      	movs	r1, #0
    ff04:	4b21      	ldr	r3, [pc, #132]	; (ff8c <bsd_os_timedwait+0x11c>)
    ff06:	681a      	ldr	r2, [r3, #0]
    ff08:	b15a      	cbz	r2, ff22 <bsd_os_timedwait+0xb2>
    ff0a:	4542      	cmp	r2, r8
    ff0c:	d138      	bne.n	ff80 <bsd_os_timedwait+0x110>
    ff0e:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
    ff10:	2900      	cmp	r1, #0
    ff12:	d12f      	bne.n	ff74 <bsd_os_timedwait+0x104>
    ff14:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    ff16:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    ff18:	4291      	cmp	r1, r2
    ff1a:	d100      	bne.n	ff1e <bsd_os_timedwait+0xae>
	list->tail = node;
    ff1c:	6058      	str	r0, [r3, #4]
	parent->next = child;
    ff1e:	2300      	movs	r3, #0
    ff20:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    ff22:	f012 f8f7 	bl	22114 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    ff26:	f7ff ff5b 	bl	fde0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    ff2a:	6823      	ldr	r3, [r4, #0]
    ff2c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    ff2e:	f389 8811 	msr	BASEPRI, r9
    ff32:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    ff36:	682c      	ldr	r4, [r5, #0]
    ff38:	1c63      	adds	r3, r4, #1
    ff3a:	d012      	beq.n	ff62 <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
    ff3c:	f015 f931 	bl	251a2 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    ff40:	1b86      	subs	r6, r0, r6
    ff42:	eb61 0707 	sbc.w	r7, r1, r7
    ff46:	17e3      	asrs	r3, r4, #31
    ff48:	1ba2      	subs	r2, r4, r6
    ff4a:	eb63 0307 	sbc.w	r3, r3, r7
    ff4e:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
    ff50:	2a00      	cmp	r2, #0
    ff52:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
    ff56:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
    ff58:	bfb8      	it	lt
    ff5a:	2000      	movlt	r0, #0
    ff5c:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
    ff5e:	2800      	cmp	r0, #0
    ff60:	d093      	beq.n	fe8a <bsd_os_timedwait+0x1a>
	return 0;
    ff62:	2000      	movs	r0, #0
}
    ff64:	b009      	add	sp, #36	; 0x24
    ff66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff6a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    ff6e:	f8c3 8004 	str.w	r8, [r3, #4]
    ff72:	e7b1      	b.n	fed8 <bsd_os_timedwait+0x68>
	parent->next = child;
    ff74:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ff76:	6858      	ldr	r0, [r3, #4]
    ff78:	4290      	cmp	r0, r2
	list->tail = node;
    ff7a:	bf08      	it	eq
    ff7c:	6059      	streq	r1, [r3, #4]
    ff7e:	e7ce      	b.n	ff1e <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ff80:	4611      	mov	r1, r2
    ff82:	6812      	ldr	r2, [r2, #0]
    ff84:	e7c0      	b.n	ff08 <bsd_os_timedwait+0x98>
    ff86:	bf00      	nop
    ff88:	20020068 	.word	0x20020068
    ff8c:	2002006c 	.word	0x2002006c

0000ff90 <bsd_os_errno_set>:
	switch (err_code) {
    ff90:	282d      	cmp	r0, #45	; 0x2d
{
    ff92:	b510      	push	{r4, lr}
    ff94:	4604      	mov	r4, r0
	switch (err_code) {
    ff96:	d07c      	beq.n	10092 <bsd_os_errno_set+0x102>
    ff98:	dc38      	bgt.n	1000c <bsd_os_errno_set+0x7c>
    ff9a:	280e      	cmp	r0, #14
    ff9c:	d079      	beq.n	10092 <bsd_os_errno_set+0x102>
    ff9e:	dc21      	bgt.n	ffe4 <bsd_os_errno_set+0x54>
    ffa0:	2808      	cmp	r0, #8
    ffa2:	d076      	beq.n	10092 <bsd_os_errno_set+0x102>
    ffa4:	dc19      	bgt.n	ffda <bsd_os_errno_set+0x4a>
    ffa6:	2802      	cmp	r0, #2
    ffa8:	d073      	beq.n	10092 <bsd_os_errno_set+0x102>
    ffaa:	2805      	cmp	r0, #5
    ffac:	d071      	beq.n	10092 <bsd_os_errno_set+0x102>
    ffae:	2801      	cmp	r0, #1
    ffb0:	d06f      	beq.n	10092 <bsd_os_errno_set+0x102>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
    ffb2:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ffb6:	4a48      	ldr	r2, [pc, #288]	; (100d8 <bsd_os_errno_set+0x148>)
    ffb8:	4948      	ldr	r1, [pc, #288]	; (100dc <bsd_os_errno_set+0x14c>)
    ffba:	4849      	ldr	r0, [pc, #292]	; (100e0 <bsd_os_errno_set+0x150>)
    ffbc:	f013 ff5c 	bl	23e78 <printk>
    ffc0:	4621      	mov	r1, r4
    ffc2:	4848      	ldr	r0, [pc, #288]	; (100e4 <bsd_os_errno_set+0x154>)
    ffc4:	f013 ff58 	bl	23e78 <printk>
    ffc8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ffcc:	4842      	ldr	r0, [pc, #264]	; (100d8 <bsd_os_errno_set+0x148>)
    ffce:	f013 ff60 	bl	23e92 <assert_post_action>
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    ffd2:	f010 f89f 	bl	20114 <z_impl_z_errno>
		errno = 0xBAADBAAD;
    ffd6:	4b44      	ldr	r3, [pc, #272]	; (100e8 <bsd_os_errno_set+0x158>)
    ffd8:	e04d      	b.n	10076 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    ffda:	280c      	cmp	r0, #12
    ffdc:	d059      	beq.n	10092 <bsd_os_errno_set+0x102>
    ffde:	dc47      	bgt.n	10070 <bsd_os_errno_set+0xe0>
    ffe0:	2809      	cmp	r0, #9
    ffe2:	e7e5      	b.n	ffb0 <bsd_os_errno_set+0x20>
    ffe4:	2828      	cmp	r0, #40	; 0x28
    ffe6:	d073      	beq.n	100d0 <bsd_os_errno_set+0x140>
    ffe8:	dc05      	bgt.n	fff6 <bsd_os_errno_set+0x66>
    ffea:	2818      	cmp	r0, #24
    ffec:	d051      	beq.n	10092 <bsd_os_errno_set+0x102>
    ffee:	2823      	cmp	r0, #35	; 0x23
    fff0:	d043      	beq.n	1007a <bsd_os_errno_set+0xea>
    fff2:	2816      	cmp	r0, #22
    fff4:	e7dc      	b.n	ffb0 <bsd_os_errno_set+0x20>
    fff6:	282a      	cmp	r0, #42	; 0x2a
    fff8:	d04b      	beq.n	10092 <bsd_os_errno_set+0x102>
    fffa:	db42      	blt.n	10082 <bsd_os_errno_set+0xf2>
    fffc:	282b      	cmp	r0, #43	; 0x2b
    fffe:	d048      	beq.n	10092 <bsd_os_errno_set+0x102>
   10000:	282c      	cmp	r0, #44	; 0x2c
   10002:	d1d6      	bne.n	ffb2 <bsd_os_errno_set+0x22>
   10004:	f010 f886 	bl	20114 <z_impl_z_errno>
		errno = ESOCKTNOSUPPORT;
   10008:	232c      	movs	r3, #44	; 0x2c
   1000a:	e034      	b.n	10076 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   1000c:	283c      	cmp	r0, #60	; 0x3c
   1000e:	d040      	beq.n	10092 <bsd_os_errno_set+0x102>
   10010:	dc15      	bgt.n	1003e <bsd_os_errno_set+0xae>
   10012:	2833      	cmp	r0, #51	; 0x33
   10014:	d03d      	beq.n	10092 <bsd_os_errno_set+0x102>
   10016:	dc05      	bgt.n	10024 <bsd_os_errno_set+0x94>
   10018:	2830      	cmp	r0, #48	; 0x30
   1001a:	d03a      	beq.n	10092 <bsd_os_errno_set+0x102>
   1001c:	2832      	cmp	r0, #50	; 0x32
   1001e:	d034      	beq.n	1008a <bsd_os_errno_set+0xfa>
   10020:	282f      	cmp	r0, #47	; 0x2f
   10022:	e7c5      	b.n	ffb0 <bsd_os_errno_set+0x20>
   10024:	2836      	cmp	r0, #54	; 0x36
   10026:	d034      	beq.n	10092 <bsd_os_errno_set+0x102>
   10028:	dc01      	bgt.n	1002e <bsd_os_errno_set+0x9e>
   1002a:	2834      	cmp	r0, #52	; 0x34
   1002c:	e7c0      	b.n	ffb0 <bsd_os_errno_set+0x20>
   1002e:	2838      	cmp	r0, #56	; 0x38
   10030:	d02f      	beq.n	10092 <bsd_os_errno_set+0x102>
   10032:	2839      	cmp	r0, #57	; 0x39
   10034:	d1bd      	bne.n	ffb2 <bsd_os_errno_set+0x22>
   10036:	f010 f86d 	bl	20114 <z_impl_z_errno>
		errno = ENOTCONN;
   1003a:	2339      	movs	r3, #57	; 0x39
   1003c:	e01b      	b.n	10076 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   1003e:	287d      	cmp	r0, #125	; 0x7d
   10040:	d033      	beq.n	100aa <bsd_os_errno_set+0x11a>
   10042:	dc09      	bgt.n	10058 <bsd_os_errno_set+0xc8>
   10044:	2870      	cmp	r0, #112	; 0x70
   10046:	d028      	beq.n	1009a <bsd_os_errno_set+0x10a>
   10048:	2873      	cmp	r0, #115	; 0x73
   1004a:	d02a      	beq.n	100a2 <bsd_os_errno_set+0x112>
   1004c:	2869      	cmp	r0, #105	; 0x69
   1004e:	d1b0      	bne.n	ffb2 <bsd_os_errno_set+0x22>
   10050:	f010 f860 	bl	20114 <z_impl_z_errno>
		errno = ENOBUFS;
   10054:	2337      	movs	r3, #55	; 0x37
   10056:	e00e      	b.n	10076 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   10058:	287f      	cmp	r0, #127	; 0x7f
   1005a:	d02f      	beq.n	100bc <bsd_os_errno_set+0x12c>
   1005c:	db29      	blt.n	100b2 <bsd_os_errno_set+0x122>
   1005e:	2880      	cmp	r0, #128	; 0x80
   10060:	d031      	beq.n	100c6 <bsd_os_errno_set+0x136>
   10062:	2881      	cmp	r0, #129	; 0x81
   10064:	d1a5      	bne.n	ffb2 <bsd_os_errno_set+0x22>
   10066:	f010 f855 	bl	20114 <z_impl_z_errno>
		errno = EKEYREJECTED;
   1006a:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1006e:	e002      	b.n	10076 <bsd_os_errno_set+0xe6>
   10070:	f010 f850 	bl	20114 <z_impl_z_errno>
		errno = EACCES;
   10074:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   10076:	6003      	str	r3, [r0, #0]
}
   10078:	e00e      	b.n	10098 <bsd_os_errno_set+0x108>
   1007a:	f010 f84b 	bl	20114 <z_impl_z_errno>
		errno = EAGAIN;
   1007e:	230b      	movs	r3, #11
   10080:	e7f9      	b.n	10076 <bsd_os_errno_set+0xe6>
   10082:	f010 f847 	bl	20114 <z_impl_z_errno>
		errno = EPROTOTYPE;
   10086:	2329      	movs	r3, #41	; 0x29
   10088:	e7f5      	b.n	10076 <bsd_os_errno_set+0xe6>
   1008a:	f010 f843 	bl	20114 <z_impl_z_errno>
		errno = ENETDOWN;
   1008e:	233e      	movs	r3, #62	; 0x3e
   10090:	e7f1      	b.n	10076 <bsd_os_errno_set+0xe6>
   10092:	f010 f83f 	bl	20114 <z_impl_z_errno>
		errno = ETIMEDOUT;
   10096:	6004      	str	r4, [r0, #0]
}
   10098:	bd10      	pop	{r4, pc}
   1009a:	f010 f83b 	bl	20114 <z_impl_z_errno>
		errno = EHOSTDOWN;
   1009e:	2343      	movs	r3, #67	; 0x43
   100a0:	e7e9      	b.n	10076 <bsd_os_errno_set+0xe6>
   100a2:	f010 f837 	bl	20114 <z_impl_z_errno>
		errno = EINPROGRESS;
   100a6:	2344      	movs	r3, #68	; 0x44
   100a8:	e7e5      	b.n	10076 <bsd_os_errno_set+0xe6>
   100aa:	f010 f833 	bl	20114 <z_impl_z_errno>
		errno = ECANCELED;
   100ae:	2348      	movs	r3, #72	; 0x48
   100b0:	e7e1      	b.n	10076 <bsd_os_errno_set+0xe6>
   100b2:	f010 f82f 	bl	20114 <z_impl_z_errno>
		errno = ENOKEY;
   100b6:	f240 73d1 	movw	r3, #2001	; 0x7d1
   100ba:	e7dc      	b.n	10076 <bsd_os_errno_set+0xe6>
   100bc:	f010 f82a 	bl	20114 <z_impl_z_errno>
		errno = EKEYEXPIRED;
   100c0:	f240 73d2 	movw	r3, #2002	; 0x7d2
   100c4:	e7d7      	b.n	10076 <bsd_os_errno_set+0xe6>
   100c6:	f010 f825 	bl	20114 <z_impl_z_errno>
		errno = EKEYREVOKED;
   100ca:	f240 73d3 	movw	r3, #2003	; 0x7d3
   100ce:	e7d2      	b.n	10076 <bsd_os_errno_set+0xe6>
   100d0:	f010 f820 	bl	20114 <z_impl_z_errno>
		errno = EMSGSIZE;
   100d4:	2324      	movs	r3, #36	; 0x24
   100d6:	e7ce      	b.n	10076 <bsd_os_errno_set+0xe6>
   100d8:	00027216 	.word	0x00027216
   100dc:	000279fa 	.word	0x000279fa
   100e0:	0002694b 	.word	0x0002694b
   100e4:	0002723b 	.word	0x0002723b
   100e8:	baadbaad 	.word	0xbaadbaad

000100ec <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   100ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   100f0:	4b01      	ldr	r3, [pc, #4]	; (100f8 <bsd_os_application_irq_set+0xc>)
   100f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   100f6:	4770      	bx	lr
   100f8:	e000e100 	.word	0xe000e100

000100fc <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   100fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10100:	4b01      	ldr	r3, [pc, #4]	; (10108 <bsd_os_application_irq_clear+0xc>)
   10102:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   10106:	4770      	bx	lr
   10108:	e000e100 	.word	0xe000e100

0001010c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1010c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10110:	4b01      	ldr	r3, [pc, #4]	; (10118 <bsd_os_trace_irq_set+0xc>)
   10112:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   10116:	4770      	bx	lr
   10118:	e000e100 	.word	0xe000e100

0001011c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1011c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10120:	4b01      	ldr	r3, [pc, #4]	; (10128 <bsd_os_trace_irq_clear+0xc>)
   10122:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   10126:	4770      	bx	lr
   10128:	e000e100 	.word	0xe000e100

0001012c <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1012c:	b508      	push	{r3, lr}
	list->head = NULL;
   1012e:	2300      	movs	r3, #0
   10130:	4a07      	ldr	r2, [pc, #28]	; (10150 <bsd_os_init+0x24>)
	list->tail = NULL;
   10132:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10136:	4a07      	ldr	r2, [pc, #28]	; (10154 <bsd_os_init+0x28>)
   10138:	e8d2 1fef 	ldaex	r1, [r2]
   1013c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   10140:	2800      	cmp	r0, #0
   10142:	d1f9      	bne.n	10138 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   10144:	f014 fb70 	bl	24828 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   10148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1014c:	f014 bb61 	b.w	24812 <trace_task_create>
   10150:	2002006c 	.word	0x2002006c
   10154:	20020068 	.word	0x20020068

00010158 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   10158:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1015c:	d03c      	beq.n	101d8 <z_to_nrf_optname+0x80>
   1015e:	dc04      	bgt.n	1016a <z_to_nrf_optname+0x12>
   10160:	2801      	cmp	r0, #1
   10162:	d047      	beq.n	101f4 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   10164:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   10168:	4770      	bx	lr
	switch (z_in_level) {
   1016a:	f240 2302 	movw	r3, #514	; 0x202
   1016e:	4298      	cmp	r0, r3
   10170:	d052      	beq.n	10218 <z_to_nrf_optname+0xc0>
   10172:	f240 2303 	movw	r3, #515	; 0x203
   10176:	4298      	cmp	r0, r3
   10178:	d1f4      	bne.n	10164 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1017a:	3901      	subs	r1, #1
   1017c:	2913      	cmp	r1, #19
   1017e:	d8f1      	bhi.n	10164 <z_to_nrf_optname+0xc>
   10180:	a301      	add	r3, pc, #4	; (adr r3, 10188 <z_to_nrf_optname+0x30>)
   10182:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   10186:	bf00      	nop
   10188:	00010225 	.word	0x00010225
   1018c:	000101e9 	.word	0x000101e9
   10190:	0001020d 	.word	0x0001020d
   10194:	00010201 	.word	0x00010201
   10198:	000101f1 	.word	0x000101f1
   1019c:	00010211 	.word	0x00010211
   101a0:	00010215 	.word	0x00010215
   101a4:	00010165 	.word	0x00010165
   101a8:	00010165 	.word	0x00010165
   101ac:	00010165 	.word	0x00010165
   101b0:	00010165 	.word	0x00010165
   101b4:	00010165 	.word	0x00010165
   101b8:	00010165 	.word	0x00010165
   101bc:	00010165 	.word	0x00010165
   101c0:	00010165 	.word	0x00010165
   101c4:	00010165 	.word	0x00010165
   101c8:	00010165 	.word	0x00010165
   101cc:	00010165 	.word	0x00010165
   101d0:	00010165 	.word	0x00010165
   101d4:	00010205 	.word	0x00010205
		switch (z_in_optname) {
   101d8:	3901      	subs	r1, #1
   101da:	2905      	cmp	r1, #5
   101dc:	d8c2      	bhi.n	10164 <z_to_nrf_optname+0xc>
   101de:	e8df f001 	tbb	[pc, r1]
   101e2:	0703      	.short	0x0703
   101e4:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   101e8:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   101ea:	6013      	str	r3, [r2, #0]
	int retval = 0;
   101ec:	2000      	movs	r0, #0
			break;
   101ee:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   101f0:	2305      	movs	r3, #5
   101f2:	e7fa      	b.n	101ea <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   101f4:	2914      	cmp	r1, #20
   101f6:	d005      	beq.n	10204 <z_to_nrf_optname+0xac>
   101f8:	2919      	cmp	r1, #25
   101fa:	d005      	beq.n	10208 <z_to_nrf_optname+0xb0>
   101fc:	2904      	cmp	r1, #4
   101fe:	d1b1      	bne.n	10164 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   10200:	2304      	movs	r3, #4
   10202:	e7f2      	b.n	101ea <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   10204:	2314      	movs	r3, #20
   10206:	e7f0      	b.n	101ea <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   10208:	6011      	str	r1, [r2, #0]
   1020a:	e7ef      	b.n	101ec <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1020c:	2303      	movs	r3, #3
   1020e:	e7ec      	b.n	101ea <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   10210:	2306      	movs	r3, #6
   10212:	e7ea      	b.n	101ea <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   10214:	2307      	movs	r3, #7
   10216:	e7e8      	b.n	101ea <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   10218:	2902      	cmp	r1, #2
   1021a:	d0e5      	beq.n	101e8 <z_to_nrf_optname+0x90>
   1021c:	2903      	cmp	r1, #3
   1021e:	d0f5      	beq.n	1020c <z_to_nrf_optname+0xb4>
   10220:	2901      	cmp	r1, #1
   10222:	d19f      	bne.n	10164 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   10224:	2301      	movs	r3, #1
   10226:	e7e0      	b.n	101ea <z_to_nrf_optname+0x92>

00010228 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   10228:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1022a:	4b03      	ldr	r3, [pc, #12]	; (10238 <nrf91_socket_iface_init+0x10>)
   1022c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1022e:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   10230:	4802      	ldr	r0, [pc, #8]	; (1023c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   10232:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   10234:	f7fd b9fc 	b.w	d630 <socket_offload_register>
   10238:	200200c4 	.word	0x200200c4
   1023c:	000256a8 	.word	0x000256a8

00010240 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10240:	4b0a      	ldr	r3, [pc, #40]	; (1026c <find_node+0x2c>)
{
   10242:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10244:	681b      	ldr	r3, [r3, #0]
{
   10246:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10248:	b143      	cbz	r3, 1025c <find_node+0x1c>
	return node->next;
   1024a:	2400      	movs	r4, #0
   1024c:	6818      	ldr	r0, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1024e:	685e      	ldr	r6, [r3, #4]
   10250:	428e      	cmp	r6, r1
   10252:	d105      	bne.n	10260 <find_node+0x20>
   10254:	689e      	ldr	r6, [r3, #8]
   10256:	4296      	cmp	r6, r2
   10258:	d102      	bne.n	10260 <find_node+0x20>
			*prev_out = prev;
   1025a:	602c      	str	r4, [r5, #0]
			return curr;
		}
		prev = curr;
	}
	return NULL;
   1025c:	4618      	mov	r0, r3
}
   1025e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10260:	2800      	cmp	r0, #0
   10262:	d0fc      	beq.n	1025e <find_node+0x1e>
   10264:	461c      	mov	r4, r3
   10266:	4603      	mov	r3, r0
   10268:	6800      	ldr	r0, [r0, #0]
   1026a:	e7f0      	b.n	1024e <find_node+0xe>
   1026c:	200200c8 	.word	0x200200c8

00010270 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   10270:	b510      	push	{r4, lr}
	list->head = NULL;
   10272:	2400      	movs	r4, #0
   10274:	4b03      	ldr	r3, [pc, #12]	; (10284 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   10276:	4804      	ldr	r0, [pc, #16]	; (10288 <module_init+0x18>)
	list->tail = NULL;
   10278:	e9c3 4400 	strd	r4, r4, [r3]
   1027c:	f000 fbda 	bl	10a34 <at_cmd_set_notification_handler>
	return 0;
}
   10280:	4620      	mov	r0, r4
   10282:	bd10      	pop	{r4, pc}
   10284:	200200c8 	.word	0x200200c8
   10288:	0001028d 	.word	0x0001028d

0001028c <notif_dispatch>:
{
   1028c:	b538      	push	{r3, r4, r5, lr}
   1028e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   10290:	f04f 31ff 	mov.w	r1, #4294967295
   10294:	4809      	ldr	r0, [pc, #36]	; (102bc <notif_dispatch+0x30>)
   10296:	f010 fbd1 	bl	20a3c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1029a:	4b09      	ldr	r3, [pc, #36]	; (102c0 <notif_dispatch+0x34>)
   1029c:	681b      	ldr	r3, [r3, #0]
   1029e:	b143      	cbz	r3, 102b2 <notif_dispatch+0x26>
	return node->next;
   102a0:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   102a2:	689a      	ldr	r2, [r3, #8]
   102a4:	4629      	mov	r1, r5
   102a6:	6858      	ldr	r0, [r3, #4]
   102a8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   102aa:	b114      	cbz	r4, 102b2 <notif_dispatch+0x26>
   102ac:	4623      	mov	r3, r4
   102ae:	6824      	ldr	r4, [r4, #0]
   102b0:	e7f7      	b.n	102a2 <notif_dispatch+0x16>
	z_impl_k_mutex_unlock(mutex);
   102b2:	4802      	ldr	r0, [pc, #8]	; (102bc <notif_dispatch+0x30>)
}
   102b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   102b8:	f010 bc9a 	b.w	20bf0 <z_impl_k_mutex_unlock>
   102bc:	2002a478 	.word	0x2002a478
   102c0:	200200c8 	.word	0x200200c8

000102c4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   102c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   102c6:	4606      	mov	r6, r0
	if (handler == NULL) {
   102c8:	460d      	mov	r5, r1
   102ca:	b369      	cbz	r1, 10328 <at_notif_register_handler+0x64>
	return z_impl_k_mutex_lock(mutex, timeout);
   102cc:	f04f 31ff 	mov.w	r1, #4294967295
   102d0:	4817      	ldr	r0, [pc, #92]	; (10330 <at_notif_register_handler+0x6c>)
   102d2:	f010 fbb3 	bl	20a3c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   102d6:	462a      	mov	r2, r5
   102d8:	4631      	mov	r1, r6
   102da:	a801      	add	r0, sp, #4
   102dc:	f7ff ffb0 	bl	10240 <find_node>
   102e0:	4604      	mov	r4, r0
   102e2:	b120      	cbz	r0, 102ee <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   102e4:	4812      	ldr	r0, [pc, #72]	; (10330 <at_notif_register_handler+0x6c>)
   102e6:	f010 fc83 	bl	20bf0 <z_impl_k_mutex_unlock>
	return 0;
   102ea:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   102ec:	e009      	b.n	10302 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   102ee:	200c      	movs	r0, #12
   102f0:	f010 fa3c 	bl	2076c <k_malloc>
   102f4:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   102f6:	b930      	cbnz	r0, 10306 <at_notif_register_handler+0x42>
   102f8:	480d      	ldr	r0, [pc, #52]	; (10330 <at_notif_register_handler+0x6c>)
   102fa:	f010 fc79 	bl	20bf0 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   102fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   10302:	b002      	add	sp, #8
   10304:	bd70      	pop	{r4, r5, r6, pc}
	memset(to_ins, 0, sizeof(struct notif_handler));
   10306:	220c      	movs	r2, #12
   10308:	4621      	mov	r1, r4
   1030a:	f013 ff92 	bl	24232 <memset>
	to_ins->ctx     = ctx;
   1030e:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   10310:	4a08      	ldr	r2, [pc, #32]	; (10334 <at_notif_register_handler+0x70>)
	parent->next = child;
   10312:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   10314:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   10316:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1031a:	b911      	cbnz	r1, 10322 <at_notif_register_handler+0x5e>
	list->head = node;
   1031c:	e9c2 3300 	strd	r3, r3, [r2]
   10320:	e7e0      	b.n	102e4 <at_notif_register_handler+0x20>
	parent->next = child;
   10322:	600b      	str	r3, [r1, #0]
	list->tail = node;
   10324:	6053      	str	r3, [r2, #4]
   10326:	e7dd      	b.n	102e4 <at_notif_register_handler+0x20>
		return -EINVAL;
   10328:	f06f 0015 	mvn.w	r0, #21
   1032c:	e7e9      	b.n	10302 <at_notif_register_handler+0x3e>
   1032e:	bf00      	nop
   10330:	2002a478 	.word	0x2002a478
   10334:	200200c8 	.word	0x200200c8

00010338 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
   10338:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   1033a:	4d05      	ldr	r5, [pc, #20]	; (10350 <write_uart_string+0x18>)
   1033c:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   1033e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   10342:	b901      	cbnz	r1, 10346 <write_uart_string+0xe>
	}
}
   10344:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   10346:	6828      	ldr	r0, [r5, #0]
   10348:	6843      	ldr	r3, [r0, #4]
   1034a:	685b      	ldr	r3, [r3, #4]
   1034c:	4798      	blx	r3
   1034e:	e7f6      	b.n	1033e <write_uart_string+0x6>
   10350:	200201a4 	.word	0x200201a4

00010354 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   10354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   10356:	4916      	ldr	r1, [pc, #88]	; (103b0 <cmd_send+0x5c>)
   10358:	f10d 0303 	add.w	r3, sp, #3
   1035c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10360:	4608      	mov	r0, r1
   10362:	f000 fb45 	bl	109f0 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   10366:	1e02      	subs	r2, r0, #0
		LOG_ERR("Error while processing AT command: %d", err);
		state = AT_CMD_ERROR;
   10368:	bfbc      	itt	lt
   1036a:	2301      	movlt	r3, #1
   1036c:	f88d 3003 	strblt.w	r3, [sp, #3]
	}

	/* Handle the various error responses from modem */
	switch (state) {
   10370:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10374:	2b03      	cmp	r3, #3
   10376:	d809      	bhi.n	1038c <cmd_send+0x38>
   10378:	e8df f003 	tbb	[pc, r3]
   1037c:	17110f02 	.word	0x17110f02
	case AT_CMD_OK:
		write_uart_string(at_buf);
   10380:	480b      	ldr	r0, [pc, #44]	; (103b0 <cmd_send+0x5c>)
   10382:	f7ff ffd9 	bl	10338 <write_uart_string>
		write_uart_string(OK_STR);
   10386:	480b      	ldr	r0, [pc, #44]	; (103b4 <cmd_send+0x60>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   10388:	f7ff ffd6 	bl	10338 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   1038c:	4b0a      	ldr	r3, [pc, #40]	; (103b8 <cmd_send+0x64>)
   1038e:	6818      	ldr	r0, [r3, #0]
		z_arch_syscall_invoke1(*(u32_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   10390:	f014 fe23 	bl	24fda <z_impl_uart_irq_rx_enable>
}
   10394:	b007      	add	sp, #28
   10396:	f85d fb04 	ldr.w	pc, [sp], #4
		write_uart_string(ERROR_STR);
   1039a:	4808      	ldr	r0, [pc, #32]	; (103bc <cmd_send+0x68>)
   1039c:	e7f4      	b.n	10388 <cmd_send+0x34>
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   1039e:	4908      	ldr	r1, [pc, #32]	; (103c0 <cmd_send+0x6c>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
   103a0:	a801      	add	r0, sp, #4
   103a2:	f7fe fda5 	bl	eef0 <sprintf>
		write_uart_string(str);
   103a6:	a801      	add	r0, sp, #4
   103a8:	e7ee      	b.n	10388 <cmd_send+0x34>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   103aa:	4906      	ldr	r1, [pc, #24]	; (103c4 <cmd_send+0x70>)
   103ac:	e7f8      	b.n	103a0 <cmd_send+0x4c>
   103ae:	bf00      	nop
   103b0:	20025c54 	.word	0x20025c54
   103b4:	0002726f 	.word	0x0002726f
   103b8:	200201a4 	.word	0x200201a4
   103bc:	00027274 	.word	0x00027274
   103c0:	0002727c 	.word	0x0002727c
   103c4:	0002728d 	.word	0x0002728d

000103c8 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   103c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   103ca:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   103cc:	6843      	ldr	r3, [r0, #4]
   103ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   103d0:	b103      	cbz	r3, 103d4 <isr+0xc>
		return api->irq_update(dev);
   103d2:	4798      	blx	r3
	if (api->irq_rx_ready) {
   103d4:	686b      	ldr	r3, [r5, #4]
   103d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   103d8:	b193      	cbz	r3, 10400 <isr+0x38>
		return api->irq_rx_ready(dev);
   103da:	4628      	mov	r0, r5
   103dc:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   103de:	b178      	cbz	r0, 10400 <isr+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   103e0:	4f3a      	ldr	r7, [pc, #232]	; (104cc <isr+0x104>)
		if (at_cmd_len > 0) {
   103e2:	4c3b      	ldr	r4, [pc, #236]	; (104d0 <isr+0x108>)
   103e4:	463e      	mov	r6, r7
   103e6:	e8d7 3faf 	lda	r3, [r7]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   103ea:	07db      	lsls	r3, r3, #31
   103ec:	d408      	bmi.n	10400 <isr+0x38>
	if (api->fifo_read) {
   103ee:	686b      	ldr	r3, [r5, #4]
   103f0:	699b      	ldr	r3, [r3, #24]
   103f2:	b12b      	cbz	r3, 10400 <isr+0x38>
		return api->fifo_read(dev, rx_data, size);
   103f4:	2201      	movs	r2, #1
   103f6:	f10d 0107 	add.w	r1, sp, #7
   103fa:	4628      	mov	r0, r5
   103fc:	4798      	blx	r3
   103fe:	b908      	cbnz	r0, 10404 <isr+0x3c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   10400:	b003      	add	sp, #12
   10402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_rx_handler(character);
   10404:	f89d 3007 	ldrb.w	r3, [sp, #7]
	switch (character) {
   10408:	2b08      	cmp	r3, #8
   1040a:	d001      	beq.n	10410 <isr+0x48>
   1040c:	2b7f      	cmp	r3, #127	; 0x7f
   1040e:	d105      	bne.n	1041c <isr+0x54>
		if (at_cmd_len > 0) {
   10410:	6823      	ldr	r3, [r4, #0]
   10412:	2b00      	cmp	r3, #0
   10414:	d0e7      	beq.n	103e6 <isr+0x1e>
			at_cmd_len--;
   10416:	3b01      	subs	r3, #1
   10418:	6023      	str	r3, [r4, #0]
   1041a:	e7e4      	b.n	103e6 <isr+0x1e>
	if (!inside_quotes) {
   1041c:	492d      	ldr	r1, [pc, #180]	; (104d4 <isr+0x10c>)
   1041e:	780a      	ldrb	r2, [r1, #0]
   10420:	2a00      	cmp	r2, #0
   10422:	d140      	bne.n	104a6 <isr+0xde>
		switch (character) {
   10424:	2b0a      	cmp	r3, #10
   10426:	d031      	beq.n	1048c <isr+0xc4>
   10428:	2b0d      	cmp	r3, #13
   1042a:	d025      	beq.n	10478 <isr+0xb0>
   1042c:	2b00      	cmp	r3, #0
   1042e:	d138      	bne.n	104a2 <isr+0xda>
			if (term_mode == MODE_NULL_TERM) {
   10430:	4b29      	ldr	r3, [pc, #164]	; (104d8 <isr+0x110>)
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	2b00      	cmp	r3, #0
   10436:	d1d6      	bne.n	103e6 <isr+0x1e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   10438:	2300      	movs	r3, #0
   1043a:	6820      	ldr	r0, [r4, #0]
   1043c:	4a27      	ldr	r2, [pc, #156]	; (104dc <isr+0x114>)
	inside_quotes = false;
   1043e:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   10440:	5413      	strb	r3, [r2, r0]
	cr_state = false;
   10442:	4827      	ldr	r0, [pc, #156]	; (104e0 <isr+0x118>)
	at_cmd_len = 0;
   10444:	6023      	str	r3, [r4, #0]
	cr_state = false;
   10446:	7003      	strb	r3, [r0, #0]
	if (at_buf[0]) {
   10448:	7813      	ldrb	r3, [r2, #0]
   1044a:	2b00      	cmp	r3, #0
   1044c:	d0cb      	beq.n	103e6 <isr+0x1e>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   1044e:	4b25      	ldr	r3, [pc, #148]	; (104e4 <isr+0x11c>)
   10450:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   10452:	6843      	ldr	r3, [r0, #4]
   10454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10456:	b103      	cbz	r3, 1045a <isr+0x92>
		api->irq_rx_disable(dev);
   10458:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1045a:	e8d6 3fef 	ldaex	r3, [r6]
   1045e:	f043 0201 	orr.w	r2, r3, #1
   10462:	e8c6 2fe1 	stlex	r1, r2, [r6]
   10466:	2900      	cmp	r1, #0
   10468:	d1f7      	bne.n	1045a <isr+0x92>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1046a:	07da      	lsls	r2, r3, #31
   1046c:	d4bb      	bmi.n	103e6 <isr+0x1e>
		k_queue_append(&work_q->queue, work);
   1046e:	491e      	ldr	r1, [pc, #120]	; (104e8 <isr+0x120>)
   10470:	481e      	ldr	r0, [pc, #120]	; (104ec <isr+0x124>)
   10472:	f014 fdf7 	bl	25064 <k_queue_append>
   10476:	e7b6      	b.n	103e6 <isr+0x1e>
			if (term_mode == MODE_CR) {
   10478:	4b17      	ldr	r3, [pc, #92]	; (104d8 <isr+0x110>)
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	2b01      	cmp	r3, #1
   1047e:	d0db      	beq.n	10438 <isr+0x70>
			if (term_mode == MODE_CR_LF) {
   10480:	2b03      	cmp	r3, #3
   10482:	d1b0      	bne.n	103e6 <isr+0x1e>
				cr_state = true;
   10484:	2201      	movs	r2, #1
   10486:	4b16      	ldr	r3, [pc, #88]	; (104e0 <isr+0x118>)
   10488:	701a      	strb	r2, [r3, #0]
   1048a:	e7ac      	b.n	103e6 <isr+0x1e>
			if (term_mode == MODE_LF) {
   1048c:	4b12      	ldr	r3, [pc, #72]	; (104d8 <isr+0x110>)
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	2b02      	cmp	r3, #2
   10492:	d0d1      	beq.n	10438 <isr+0x70>
			if (term_mode == MODE_CR_LF && cr_state) {
   10494:	2b03      	cmp	r3, #3
   10496:	d1a6      	bne.n	103e6 <isr+0x1e>
   10498:	4b11      	ldr	r3, [pc, #68]	; (104e0 <isr+0x118>)
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	2b00      	cmp	r3, #0
   1049e:	d1cb      	bne.n	10438 <isr+0x70>
   104a0:	e7a1      	b.n	103e6 <isr+0x1e>
		cr_state = false;
   104a2:	480f      	ldr	r0, [pc, #60]	; (104e0 <isr+0x118>)
   104a4:	7002      	strb	r2, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   104a6:	f8d4 c000 	ldr.w	ip, [r4]
   104aa:	f10c 0001 	add.w	r0, ip, #1
   104ae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   104b2:	d298      	bcs.n	103e6 <isr+0x1e>
	at_buf[at_cmd_len] = character;
   104b4:	f8df e024 	ldr.w	lr, [pc, #36]	; 104dc <isr+0x114>
	if (character == '"') {
   104b8:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   104ba:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   104be:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   104c0:	d191      	bne.n	103e6 <isr+0x1e>
	if (!inside_quotes) {
   104c2:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   104c6:	700a      	strb	r2, [r1, #0]
   104c8:	e78d      	b.n	103e6 <isr+0x1e>
   104ca:	bf00      	nop
   104cc:	200201a0 	.word	0x200201a0
   104d0:	200200d0 	.word	0x200200d0
   104d4:	20026c55 	.word	0x20026c55
   104d8:	20026c56 	.word	0x20026c56
   104dc:	20025c54 	.word	0x20025c54
   104e0:	20026c54 	.word	0x20026c54
   104e4:	200201a4 	.word	0x200201a4
   104e8:	20020198 	.word	0x20020198
   104ec:	200200d4 	.word	0x200200d4

000104f0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   104f0:	2201      	movs	r2, #1
   104f2:	4b25      	ldr	r3, [pc, #148]	; (10588 <at_host_init+0x98>)
{
   104f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   104f6:	4925      	ldr	r1, [pc, #148]	; (1058c <at_host_init+0x9c>)
   104f8:	2000      	movs	r0, #0
		term_mode = mode;
   104fa:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   104fc:	f7ff fee2 	bl	102c4 <at_notif_register_handler>
	if (err != 0) {
   10500:	4605      	mov	r5, r0
   10502:	bb20      	cbnz	r0, 1054e <at_host_init+0x5e>
   10504:	4822      	ldr	r0, [pc, #136]	; (10590 <at_host_init+0xa0>)
   10506:	f00f fddf 	bl	200c8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   1050a:	4c22      	ldr	r4, [pc, #136]	; (10594 <at_host_init+0xa4>)
   1050c:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
   1050e:	b1e0      	cbz	r0, 1054a <at_host_init+0x5a>
	return z_impl_k_uptime_get();
   10510:	f014 fe47 	bl	251a2 <z_impl_k_uptime_get>
   10514:	4606      	mov	r6, r0
		err = uart_err_check(uart_dev);
   10516:	6820      	ldr	r0, [r4, #0]
	if (api->err_check != NULL) {
   10518:	6843      	ldr	r3, [r0, #4]
   1051a:	689b      	ldr	r3, [r3, #8]
   1051c:	b1d3      	cbz	r3, 10554 <at_host_init+0x64>
		return api->err_check(dev);
   1051e:	4798      	blx	r3
		if (err) {
   10520:	b1c0      	cbz	r0, 10554 <at_host_init+0x64>
   10522:	f014 fe3e 	bl	251a2 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   10526:	1b80      	subs	r0, r0, r6
   10528:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1052c:	d80d      	bhi.n	1054a <at_host_init+0x5a>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1052e:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
   10530:	6843      	ldr	r3, [r0, #4]
   10532:	699b      	ldr	r3, [r3, #24]
   10534:	b12b      	cbz	r3, 10542 <at_host_init+0x52>
		return api->fifo_read(dev, rx_data, size);
   10536:	2201      	movs	r2, #1
   10538:	f10d 0107 	add.w	r1, sp, #7
   1053c:	4798      	blx	r3
   1053e:	2800      	cmp	r0, #0
   10540:	d1f5      	bne.n	1052e <at_host_init+0x3e>
	return z_impl_k_sleep(ms);
   10542:	200a      	movs	r0, #10
   10544:	f014 fddb 	bl	250fe <z_impl_k_sleep>
   10548:	e7e5      	b.n	10516 <at_host_init+0x26>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
   1054a:	f06f 050d 	mvn.w	r5, #13
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   1054e:	4628      	mov	r0, r5
   10550:	b002      	add	sp, #8
   10552:	bd70      	pop	{r4, r5, r6, pc}
	uart_irq_callback_set(uart_dev, isr);
   10554:	6822      	ldr	r2, [r4, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   10556:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   10558:	b123      	cbz	r3, 10564 <at_host_init+0x74>
   1055a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1055c:	b113      	cbz	r3, 10564 <at_host_init+0x74>
		api->irq_callback_set(dev, cb, user_data);
   1055e:	490e      	ldr	r1, [pc, #56]	; (10598 <at_host_init+0xa8>)
   10560:	4610      	mov	r0, r2
   10562:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10564:	2200      	movs	r2, #0
   10566:	4b0d      	ldr	r3, [pc, #52]	; (1059c <at_host_init+0xac>)
   10568:	490d      	ldr	r1, [pc, #52]	; (105a0 <at_host_init+0xb0>)
   1056a:	601a      	str	r2, [r3, #0]
   1056c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   10570:	480c      	ldr	r0, [pc, #48]	; (105a4 <at_host_init+0xb4>)
   10572:	230a      	movs	r3, #10
   10574:	f44f 7200 	mov.w	r2, #512	; 0x200
   10578:	490b      	ldr	r1, [pc, #44]	; (105a8 <at_host_init+0xb8>)
   1057a:	f012 f87b 	bl	22674 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1057e:	6820      	ldr	r0, [r4, #0]
   10580:	f014 fd2b 	bl	24fda <z_impl_uart_irq_rx_enable>
   10584:	e7e3      	b.n	1054e <at_host_init+0x5e>
   10586:	bf00      	nop
   10588:	20026c56 	.word	0x20026c56
   1058c:	00024fe5 	.word	0x00024fe5
   10590:	000269dd 	.word	0x000269dd
   10594:	200201a4 	.word	0x200201a4
   10598:	000103c9 	.word	0x000103c9
   1059c:	20020198 	.word	0x20020198
   105a0:	00010355 	.word	0x00010355
   105a4:	200200d4 	.word	0x200200d4
   105a8:	20026da0 	.word	0x20026da0

000105ac <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   105ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   105ae:	b1da      	cbz	r2, 105e8 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   105b0:	2300      	movs	r3, #0
	bool id_found = false;
   105b2:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   105b4:	4e0e      	ldr	r6, [pc, #56]	; (105f0 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   105b6:	4f0f      	ldr	r7, [pc, #60]	; (105f4 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   105b8:	42b3      	cmp	r3, r6
   105ba:	d306      	bcc.n	105ca <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   105bc:	2c00      	cmp	r4, #0
   105be:	bf14      	ite	ne
   105c0:	f06f 0008 	mvnne.w	r0, #8
   105c4:	f06f 0001 	mvneq.w	r0, #1
   105c8:	e009      	b.n	105de <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   105ca:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   105ce:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   105d2:	4560      	cmp	r0, ip
   105d4:	d106      	bne.n	105e4 <abi_getter+0x38>
			if (index-- == 0) {
   105d6:	1e4c      	subs	r4, r1, #1
   105d8:	b911      	cbnz	r1, 105e0 <abi_getter+0x34>
				return 0;
   105da:	4608      	mov	r0, r1
				*abi = ext_abi;
   105dc:	6015      	str	r5, [r2, #0]
}
   105de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   105e0:	4621      	mov	r1, r4
			id_found = true;
   105e2:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   105e4:	3301      	adds	r3, #1
   105e6:	e7e7      	b.n	105b8 <abi_getter+0xc>
		return -EFAULT;
   105e8:	f06f 000d 	mvn.w	r0, #13
   105ec:	e7f7      	b.n	105de <abi_getter+0x32>
   105ee:	bf00      	nop
   105f0:	00000000 	.word	0x00000000
   105f4:	00027e40 	.word	0x00027e40

000105f8 <close>:
{
   105f8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   105fa:	4c10      	ldr	r4, [pc, #64]	; (1063c <close+0x44>)
{
   105fc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   105fe:	6823      	ldr	r3, [r4, #0]
   10600:	b94b      	cbnz	r3, 10616 <close+0x1e>
   10602:	490f      	ldr	r1, [pc, #60]	; (10640 <close+0x48>)
   10604:	480f      	ldr	r0, [pc, #60]	; (10644 <close+0x4c>)
   10606:	2321      	movs	r3, #33	; 0x21
   10608:	4a0f      	ldr	r2, [pc, #60]	; (10648 <close+0x50>)
   1060a:	f013 fc35 	bl	23e78 <printk>
   1060e:	2121      	movs	r1, #33	; 0x21
   10610:	480d      	ldr	r0, [pc, #52]	; (10648 <close+0x50>)
   10612:	f013 fc3e 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   10616:	6823      	ldr	r3, [r4, #0]
   10618:	685b      	ldr	r3, [r3, #4]
   1061a:	b94b      	cbnz	r3, 10630 <close+0x38>
   1061c:	490b      	ldr	r1, [pc, #44]	; (1064c <close+0x54>)
   1061e:	4809      	ldr	r0, [pc, #36]	; (10644 <close+0x4c>)
   10620:	2322      	movs	r3, #34	; 0x22
   10622:	4a09      	ldr	r2, [pc, #36]	; (10648 <close+0x50>)
   10624:	f013 fc28 	bl	23e78 <printk>
   10628:	2122      	movs	r1, #34	; 0x22
   1062a:	4807      	ldr	r0, [pc, #28]	; (10648 <close+0x50>)
   1062c:	f013 fc31 	bl	23e92 <assert_post_action>
	return socket_ops->close(sock);
   10630:	6823      	ldr	r3, [r4, #0]
   10632:	4628      	mov	r0, r5
}
   10634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   10638:	685b      	ldr	r3, [r3, #4]
   1063a:	4718      	bx	r3
   1063c:	20020008 	.word	0x20020008
   10640:	00026f34 	.word	0x00026f34
   10644:	0002694b 	.word	0x0002694b
   10648:	00026f03 	.word	0x00026f03
   1064c:	00026f3f 	.word	0x00026f3f

00010650 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   10650:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   10652:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   10654:	b118      	cbz	r0, 1065e <callback_worker+0xe>
		data->callback(data->data);
   10656:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1065a:	300c      	adds	r0, #12
   1065c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1065e:	a901      	add	r1, sp, #4
   10660:	4802      	ldr	r0, [pc, #8]	; (1066c <callback_worker+0x1c>)
   10662:	f00f ff29 	bl	204b8 <k_mem_slab_free>
}
   10666:	b003      	add	sp, #12
   10668:	f85d fb04 	ldr.w	pc, [sp], #4
   1066c:	2002a414 	.word	0x2002a414

00010670 <open_socket>:
{
   10670:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   10672:	4c16      	ldr	r4, [pc, #88]	; (106cc <open_socket+0x5c>)
   10674:	6823      	ldr	r3, [r4, #0]
   10676:	b94b      	cbnz	r3, 1068c <open_socket+0x1c>
   10678:	4915      	ldr	r1, [pc, #84]	; (106d0 <open_socket+0x60>)
   1067a:	4816      	ldr	r0, [pc, #88]	; (106d4 <open_socket+0x64>)
   1067c:	2319      	movs	r3, #25
   1067e:	4a16      	ldr	r2, [pc, #88]	; (106d8 <open_socket+0x68>)
   10680:	f013 fbfa 	bl	23e78 <printk>
   10684:	2119      	movs	r1, #25
   10686:	4814      	ldr	r0, [pc, #80]	; (106d8 <open_socket+0x68>)
   10688:	f013 fc03 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   1068c:	6823      	ldr	r3, [r4, #0]
   1068e:	681b      	ldr	r3, [r3, #0]
   10690:	b94b      	cbnz	r3, 106a6 <open_socket+0x36>
   10692:	4912      	ldr	r1, [pc, #72]	; (106dc <open_socket+0x6c>)
   10694:	480f      	ldr	r0, [pc, #60]	; (106d4 <open_socket+0x64>)
   10696:	231a      	movs	r3, #26
   10698:	4a0f      	ldr	r2, [pc, #60]	; (106d8 <open_socket+0x68>)
   1069a:	f013 fbed 	bl	23e78 <printk>
   1069e:	211a      	movs	r1, #26
   106a0:	480d      	ldr	r0, [pc, #52]	; (106d8 <open_socket+0x68>)
   106a2:	f013 fbf6 	bl	23e92 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   106a6:	6823      	ldr	r3, [r4, #0]
   106a8:	f240 2201 	movw	r2, #513	; 0x201
   106ac:	681b      	ldr	r3, [r3, #0]
   106ae:	2100      	movs	r1, #0
   106b0:	2066      	movs	r0, #102	; 0x66
   106b2:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   106b4:	4b0a      	ldr	r3, [pc, #40]	; (106e0 <open_socket+0x70>)
   106b6:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   106b8:	3001      	adds	r0, #1
   106ba:	d104      	bne.n	106c6 <open_socket+0x56>
   106bc:	f00f fd2a 	bl	20114 <z_impl_z_errno>
		return -errno;
   106c0:	6800      	ldr	r0, [r0, #0]
   106c2:	4240      	negs	r0, r0
}
   106c4:	bd10      	pop	{r4, pc}
	return 0;
   106c6:	2000      	movs	r0, #0
   106c8:	e7fc      	b.n	106c4 <open_socket+0x54>
   106ca:	bf00      	nop
   106cc:	20020008 	.word	0x20020008
   106d0:	00026f34 	.word	0x00026f34
   106d4:	0002694b 	.word	0x0002694b
   106d8:	00026f03 	.word	0x00026f03
   106dc:	00026f51 	.word	0x00026f51
   106e0:	200201a8 	.word	0x200201a8

000106e4 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   106e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   106e8:	4607      	mov	r7, r0
   106ea:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   106ec:	f013 fd40 	bl	24170 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   106f0:	4c1e      	ldr	r4, [pc, #120]	; (1076c <at_write+0x88>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   106f2:	4b1f      	ldr	r3, [pc, #124]	; (10770 <at_write+0x8c>)
	int bytes_to_send = strlen(cmd);
   106f4:	4680      	mov	r8, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   106f6:	681e      	ldr	r6, [r3, #0]
   106f8:	6823      	ldr	r3, [r4, #0]
   106fa:	b94b      	cbnz	r3, 10710 <at_write+0x2c>
   106fc:	491d      	ldr	r1, [pc, #116]	; (10774 <at_write+0x90>)
   106fe:	481e      	ldr	r0, [pc, #120]	; (10778 <at_write+0x94>)
   10700:	237e      	movs	r3, #126	; 0x7e
   10702:	4a1e      	ldr	r2, [pc, #120]	; (1077c <at_write+0x98>)
   10704:	f013 fbb8 	bl	23e78 <printk>
   10708:	217e      	movs	r1, #126	; 0x7e
   1070a:	481c      	ldr	r0, [pc, #112]	; (1077c <at_write+0x98>)
   1070c:	f013 fbc1 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   10710:	6823      	ldr	r3, [r4, #0]
   10712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10714:	b94b      	cbnz	r3, 1072a <at_write+0x46>
   10716:	491a      	ldr	r1, [pc, #104]	; (10780 <at_write+0x9c>)
   10718:	4817      	ldr	r0, [pc, #92]	; (10778 <at_write+0x94>)
   1071a:	237f      	movs	r3, #127	; 0x7f
   1071c:	4a17      	ldr	r2, [pc, #92]	; (1077c <at_write+0x98>)
   1071e:	f013 fbab 	bl	23e78 <printk>
   10722:	217f      	movs	r1, #127	; 0x7f
   10724:	4815      	ldr	r0, [pc, #84]	; (1077c <at_write+0x98>)
   10726:	f013 fbb4 	bl	23e92 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   1072a:	6823      	ldr	r3, [r4, #0]
   1072c:	4642      	mov	r2, r8
   1072e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   10730:	4639      	mov	r1, r7
   10732:	2300      	movs	r3, #0
   10734:	4630      	mov	r0, r6
   10736:	47a0      	blx	r4

	if (bytes_sent == -1) {
   10738:	3001      	adds	r0, #1
   1073a:	d10f      	bne.n	1075c <at_write+0x78>
   1073c:	f00f fcea 	bl	20114 <z_impl_z_errno>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
   10740:	6803      	ldr	r3, [r0, #0]
   10742:	425b      	negs	r3, r3
   10744:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   10746:	2301      	movs	r3, #1
   10748:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   1074c:	b115      	cbz	r5, 10754 <at_write+0x70>
		*state = ret.state;
   1074e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10752:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   10754:	9800      	ldr	r0, [sp, #0]
   10756:	b002      	add	sp, #8
   10758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&q, *(u32_t *)&data, *(u32_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   1075c:	f04f 32ff 	mov.w	r2, #4294967295
   10760:	4669      	mov	r1, sp
   10762:	4808      	ldr	r0, [pc, #32]	; (10784 <at_write+0xa0>)
   10764:	f010 f8b8 	bl	208d8 <z_impl_k_msgq_get>
   10768:	e7f0      	b.n	1074c <at_write+0x68>
   1076a:	bf00      	nop
   1076c:	20020008 	.word	0x20020008
   10770:	200201a8 	.word	0x200201a8
   10774:	00026f34 	.word	0x00026f34
   10778:	0002694b 	.word	0x0002694b
   1077c:	00026f03 	.word	0x00026f03
   10780:	00027025 	.word	0x00027025
   10784:	2002a48c 	.word	0x2002a48c

00010788 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   10788:	b510      	push	{r4, lr}
   1078a:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1078c:	f7ff ff70 	bl	10670 <open_socket>
	if (err) {
   10790:	4604      	mov	r4, r0
   10792:	b968      	cbnz	r0, 107b0 <at_cmd_driver_init+0x28>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10794:	230a      	movs	r3, #10
   10796:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1079a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1079e:	e9cd 0000 	strd	r0, r0, [sp]
   107a2:	4b05      	ldr	r3, [pc, #20]	; (107b8 <at_cmd_driver_init+0x30>)
   107a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   107a8:	4904      	ldr	r1, [pc, #16]	; (107bc <at_cmd_driver_init+0x34>)
   107aa:	4805      	ldr	r0, [pc, #20]	; (107c0 <at_cmd_driver_init+0x38>)
   107ac:	f011 fe7c 	bl	224a8 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   107b0:	4620      	mov	r0, r4
   107b2:	b006      	add	sp, #24
   107b4:	bd10      	pop	{r4, pc}
   107b6:	bf00      	nop
   107b8:	000107c5 	.word	0x000107c5
   107bc:	20026fa0 	.word	0x20026fa0
   107c0:	200201bc 	.word	0x200201bc

000107c4 <socket_thread_fn>:
{
   107c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   107c8:	4e76      	ldr	r6, [pc, #472]	; (109a4 <socket_thread_fn+0x1e0>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   107ca:	f8df 8220 	ldr.w	r8, [pc, #544]	; 109ec <socket_thread_fn+0x228>
   107ce:	4637      	mov	r7, r6
   107d0:	f04f 32ff 	mov.w	r2, #4294967295
   107d4:	a901      	add	r1, sp, #4
   107d6:	4640      	mov	r0, r8
   107d8:	f00f fe0a 	bl	203f0 <k_mem_slab_alloc>
		ret.code  = 0;
   107dc:	2300      	movs	r3, #0
		item->callback = NULL;
   107de:	9d01      	ldr	r5, [sp, #4]
	__ASSERT_NO_MSG(socket_ops);
   107e0:	4c71      	ldr	r4, [pc, #452]	; (109a8 <socket_thread_fn+0x1e4>)
   107e2:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.code  = 0;
   107e6:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_OK;
   107e8:	f88d 300c 	strb.w	r3, [sp, #12]
   107ec:	6823      	ldr	r3, [r4, #0]
		bytes_read = recv(common_socket_fd, item->data,
   107ee:	f8d6 9000 	ldr.w	r9, [r6]
   107f2:	350c      	adds	r5, #12
   107f4:	b94b      	cbnz	r3, 1080a <socket_thread_fn+0x46>
   107f6:	496d      	ldr	r1, [pc, #436]	; (109ac <socket_thread_fn+0x1e8>)
   107f8:	486d      	ldr	r0, [pc, #436]	; (109b0 <socket_thread_fn+0x1ec>)
   107fa:	2369      	movs	r3, #105	; 0x69
   107fc:	4a6d      	ldr	r2, [pc, #436]	; (109b4 <socket_thread_fn+0x1f0>)
   107fe:	f013 fb3b 	bl	23e78 <printk>
   10802:	2169      	movs	r1, #105	; 0x69
   10804:	486b      	ldr	r0, [pc, #428]	; (109b4 <socket_thread_fn+0x1f0>)
   10806:	f013 fb44 	bl	23e92 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   1080a:	6823      	ldr	r3, [r4, #0]
   1080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1080e:	b94b      	cbnz	r3, 10824 <socket_thread_fn+0x60>
   10810:	4969      	ldr	r1, [pc, #420]	; (109b8 <socket_thread_fn+0x1f4>)
   10812:	4867      	ldr	r0, [pc, #412]	; (109b0 <socket_thread_fn+0x1ec>)
   10814:	236a      	movs	r3, #106	; 0x6a
   10816:	4a67      	ldr	r2, [pc, #412]	; (109b4 <socket_thread_fn+0x1f0>)
   10818:	f013 fb2e 	bl	23e78 <printk>
   1081c:	216a      	movs	r1, #106	; 0x6a
   1081e:	4865      	ldr	r0, [pc, #404]	; (109b4 <socket_thread_fn+0x1f0>)
   10820:	f013 fb37 	bl	23e92 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   10824:	6823      	ldr	r3, [r4, #0]
   10826:	f640 228c 	movw	r2, #2700	; 0xa8c
   1082a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1082c:	4629      	mov	r1, r5
   1082e:	2300      	movs	r3, #0
   10830:	4648      	mov	r0, r9
   10832:	47a0      	blx	r4
		if (bytes_read < 0) {
   10834:	2800      	cmp	r0, #0
   10836:	da2e      	bge.n	10896 <socket_thread_fn+0xd2>
			if ((close(common_socket_fd) == 0) &&
   10838:	6838      	ldr	r0, [r7, #0]
   1083a:	f7ff fedd 	bl	105f8 <close>
   1083e:	bb20      	cbnz	r0, 1088a <socket_thread_fn+0xc6>
			    (open_socket() == 0)) {
   10840:	f7ff ff16 	bl	10670 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   10844:	bb08      	cbnz	r0, 1088a <socket_thread_fn+0xc6>
				ret.state = AT_CMD_ERROR;
   10846:	2301      	movs	r3, #1
   10848:	f88d 300c 	strb.w	r3, [sp, #12]
   1084c:	f00f fc62 	bl	20114 <z_impl_z_errno>
				ret.code  = -errno;
   10850:	6803      	ldr	r3, [r0, #0]
   10852:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   10854:	9302      	str	r3, [sp, #8]
		if (item->callback == NULL) {
   10856:	9901      	ldr	r1, [sp, #4]
   10858:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1085c:	2b00      	cmp	r3, #0
   1085e:	d17d      	bne.n	1095c <socket_thread_fn+0x198>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   10860:	a901      	add	r1, sp, #4
   10862:	4640      	mov	r0, r8
   10864:	f00f fe28 	bl	204b8 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   10868:	4b54      	ldr	r3, [pc, #336]	; (109bc <socket_thread_fn+0x1f8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1086a:	689b      	ldr	r3, [r3, #8]
   1086c:	2b00      	cmp	r3, #0
   1086e:	d1af      	bne.n	107d0 <socket_thread_fn+0xc>
   10870:	f89d 200c 	ldrb.w	r2, [sp, #12]
   10874:	2a04      	cmp	r2, #4
   10876:	d0ab      	beq.n	107d0 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   10878:	4a51      	ldr	r2, [pc, #324]	; (109c0 <socket_thread_fn+0x1fc>)
   1087a:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   1087c:	f04f 32ff 	mov.w	r2, #4294967295
   10880:	a902      	add	r1, sp, #8
   10882:	4850      	ldr	r0, [pc, #320]	; (109c4 <socket_thread_fn+0x200>)
   10884:	f00f ff82 	bl	2078c <z_impl_k_msgq_put>
   10888:	e7a2      	b.n	107d0 <socket_thread_fn+0xc>
			close(common_socket_fd);
   1088a:	6838      	ldr	r0, [r7, #0]
   1088c:	f7ff feb4 	bl	105f8 <close>
}
   10890:	b004      	add	sp, #16
   10892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (bytes_read == sizeof(item->data) ||
   10896:	f640 238c 	movw	r3, #2700	; 0xa8c
   1089a:	4298      	cmp	r0, r3
   1089c:	d007      	beq.n	108ae <socket_thread_fn+0xea>
   1089e:	f8dd 9004 	ldr.w	r9, [sp, #4]
			   item->data[bytes_read - 1] != '\0') {
   108a2:	4448      	add	r0, r9
		} else if (bytes_read == sizeof(item->data) ||
   108a4:	f890 a00b 	ldrb.w	sl, [r0, #11]
   108a8:	f1ba 0f00 	cmp.w	sl, #0
   108ac:	d002      	beq.n	108b4 <socket_thread_fn+0xf0>
			ret.code  = -ENOBUFS;
   108ae:	f06f 0336 	mvn.w	r3, #54	; 0x36
   108b2:	e7cf      	b.n	10854 <socket_thread_fn+0x90>
	ret->state = AT_CMD_NOTIFICATION;
   108b4:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   108b6:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   108ba:	4943      	ldr	r1, [pc, #268]	; (109c8 <socket_thread_fn+0x204>)
   108bc:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   108be:	f88d 300c 	strb.w	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   108c2:	f013 fc2a 	bl	2411a <strstr>
		if (tmpstr) {
   108c6:	4605      	mov	r5, r0
   108c8:	b1d8      	cbz	r0, 10902 <socket_thread_fn+0x13e>
			ret->state = AT_CMD_OK;
   108ca:	f88d a00c 	strb.w	sl, [sp, #12]
			ret->code  = 0;
   108ce:	f8cd a008 	str.w	sl, [sp, #8]
		buf[new_len++] = '\0';
   108d2:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   108d4:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
   108d6:	3201      	adds	r2, #1
   108d8:	702b      	strb	r3, [r5, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   108da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   108de:	9901      	ldr	r1, [sp, #4]
   108e0:	2b04      	cmp	r3, #4
   108e2:	d056      	beq.n	10992 <socket_thread_fn+0x1ce>
			if ((response_buf_len > 0) &&
   108e4:	4d39      	ldr	r5, [pc, #228]	; (109cc <socket_thread_fn+0x208>)
   108e6:	682b      	ldr	r3, [r5, #0]
   108e8:	b39b      	cbz	r3, 10952 <socket_thread_fn+0x18e>
			    (response_buf != NULL)) {
   108ea:	4c39      	ldr	r4, [pc, #228]	; (109d0 <socket_thread_fn+0x20c>)
   108ec:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   108ee:	b380      	cbz	r0, 10952 <socket_thread_fn+0x18e>
				if (response_buf_len > payload_len) {
   108f0:	4293      	cmp	r3, r2
   108f2:	d92a      	bls.n	1094a <socket_thread_fn+0x186>
					memcpy(response_buf, item->data,
   108f4:	310c      	adds	r1, #12
   108f6:	f013 fc6f 	bl	241d8 <memcpy>
				response_buf_len = 0;
   108fa:	2300      	movs	r3, #0
   108fc:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   108fe:	6023      	str	r3, [r4, #0]
				goto next;
   10900:	e7a9      	b.n	10856 <socket_thread_fn+0x92>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   10902:	4934      	ldr	r1, [pc, #208]	; (109d4 <socket_thread_fn+0x210>)
   10904:	4620      	mov	r0, r4
   10906:	f013 fc08 	bl	2411a <strstr>
		if (tmpstr) {
   1090a:	4605      	mov	r5, r0
   1090c:	b140      	cbz	r0, 10920 <socket_thread_fn+0x15c>
			ret->state = AT_CMD_ERROR_CMS;
   1090e:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10910:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   10914:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10918:	f013 fb66 	bl	23fe8 <atoi>
   1091c:	9002      	str	r0, [sp, #8]
   1091e:	e7d8      	b.n	108d2 <socket_thread_fn+0x10e>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   10920:	492d      	ldr	r1, [pc, #180]	; (109d8 <socket_thread_fn+0x214>)
   10922:	4620      	mov	r0, r4
   10924:	f013 fbf9 	bl	2411a <strstr>
		if (tmpstr) {
   10928:	4605      	mov	r5, r0
   1092a:	b108      	cbz	r0, 10930 <socket_thread_fn+0x16c>
			ret->state = AT_CMD_ERROR_CME;
   1092c:	2303      	movs	r3, #3
   1092e:	e7ef      	b.n	10910 <socket_thread_fn+0x14c>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   10930:	492a      	ldr	r1, [pc, #168]	; (109dc <socket_thread_fn+0x218>)
   10932:	4620      	mov	r0, r4
   10934:	f013 fbf1 	bl	2411a <strstr>
		if (tmpstr) {
   10938:	4605      	mov	r5, r0
   1093a:	b328      	cbz	r0, 10988 <socket_thread_fn+0x1c4>
			ret->state = AT_CMD_ERROR;
   1093c:	2301      	movs	r3, #1
   1093e:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code  = -ENOEXEC;
   10942:	f06f 0307 	mvn.w	r3, #7
   10946:	9302      	str	r3, [sp, #8]
   10948:	e7c3      	b.n	108d2 <socket_thread_fn+0x10e>
					ret.code  = -EMSGSIZE;
   1094a:	f06f 0323 	mvn.w	r3, #35	; 0x23
   1094e:	9302      	str	r3, [sp, #8]
   10950:	e7d3      	b.n	108fa <socket_thread_fn+0x136>
		if (payload_len == 0) {
   10952:	2a00      	cmp	r2, #0
   10954:	f43f af7f 	beq.w	10856 <socket_thread_fn+0x92>
			item->callback = current_cmd_handler;
   10958:	4b19      	ldr	r3, [pc, #100]	; (109c0 <socket_thread_fn+0x1fc>)
   1095a:	e01e      	b.n	1099a <socket_thread_fn+0x1d6>
   1095c:	4b20      	ldr	r3, [pc, #128]	; (109e0 <socket_thread_fn+0x21c>)
   1095e:	2200      	movs	r2, #0
   10960:	604b      	str	r3, [r1, #4]
   10962:	460b      	mov	r3, r1
   10964:	600a      	str	r2, [r1, #0]
   10966:	f843 2f08 	str.w	r2, [r3, #8]!
   1096a:	e8d3 2fef 	ldaex	r2, [r3]
   1096e:	f042 0001 	orr.w	r0, r2, #1
   10972:	e8c3 0fe4 	stlex	r4, r0, [r3]
   10976:	2c00      	cmp	r4, #0
   10978:	d1f7      	bne.n	1096a <socket_thread_fn+0x1a6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1097a:	07d3      	lsls	r3, r2, #31
   1097c:	f53f af74 	bmi.w	10868 <socket_thread_fn+0xa4>
		k_queue_append(&work_q->queue, work);
   10980:	4818      	ldr	r0, [pc, #96]	; (109e4 <socket_thread_fn+0x220>)
   10982:	f014 fb6f 	bl	25064 <k_queue_append>
   10986:	e76f      	b.n	10868 <socket_thread_fn+0xa4>
		new_len = strlen(buf) + 1;
   10988:	4620      	mov	r0, r4
   1098a:	f013 fbf1 	bl	24170 <strlen>
   1098e:	1c42      	adds	r2, r0, #1
   10990:	e7a3      	b.n	108da <socket_thread_fn+0x116>
		if (payload_len == 0) {
   10992:	2a00      	cmp	r2, #0
   10994:	f43f af5f 	beq.w	10856 <socket_thread_fn+0x92>
			item->callback = notification_handler;
   10998:	4b13      	ldr	r3, [pc, #76]	; (109e8 <socket_thread_fn+0x224>)
			item->callback = current_cmd_handler;
   1099a:	681b      	ldr	r3, [r3, #0]
   1099c:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   109a0:	e759      	b.n	10856 <socket_thread_fn+0x92>
   109a2:	bf00      	nop
   109a4:	200201a8 	.word	0x200201a8
   109a8:	20020008 	.word	0x20020008
   109ac:	00026f34 	.word	0x00026f34
   109b0:	0002694b 	.word	0x0002694b
   109b4:	00026f03 	.word	0x00026f03
   109b8:	00027014 	.word	0x00027014
   109bc:	2002a44c 	.word	0x2002a44c
   109c0:	200201ac 	.word	0x200201ac
   109c4:	2002a48c 	.word	0x2002a48c
   109c8:	00026fb4 	.word	0x00026fb4
   109cc:	200201b8 	.word	0x200201b8
   109d0:	200201b4 	.word	0x200201b4
   109d4:	0002729e 	.word	0x0002729e
   109d8:	000272aa 	.word	0x000272aa
   109dc:	000272b6 	.word	0x000272b6
   109e0:	00010651 	.word	0x00010651
   109e4:	20025b54 	.word	0x20025b54
   109e8:	200201b0 	.word	0x200201b0
   109ec:	2002a414 	.word	0x2002a414

000109f0 <at_cmd_write>:
{
   109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109f4:	4605      	mov	r5, r0
   109f6:	4688      	mov	r8, r1
   109f8:	4617      	mov	r7, r2
   109fa:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   109fc:	4c0a      	ldr	r4, [pc, #40]	; (10a28 <at_cmd_write+0x38>)
   109fe:	f04f 31ff 	mov.w	r1, #4294967295
   10a02:	4620      	mov	r0, r4
   10a04:	f011 fc0a 	bl	2221c <z_impl_k_sem_take>
	response_buf     = buf;
   10a08:	4b08      	ldr	r3, [pc, #32]	; (10a2c <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   10a0a:	4631      	mov	r1, r6
	response_buf     = buf;
   10a0c:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   10a10:	4b07      	ldr	r3, [pc, #28]	; (10a30 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   10a12:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   10a14:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   10a16:	f7ff fe65 	bl	106e4 <at_write>
   10a1a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   10a1c:	4620      	mov	r0, r4
   10a1e:	f011 fbb5 	bl	2218c <z_impl_k_sem_give>
}
   10a22:	4628      	mov	r0, r5
   10a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a28:	2002a44c 	.word	0x2002a44c
   10a2c:	200201b4 	.word	0x200201b4
   10a30:	200201b8 	.word	0x200201b8

00010a34 <at_cmd_set_notification_handler>:
{
   10a34:	b538      	push	{r3, r4, r5, lr}
   10a36:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   10a38:	4c06      	ldr	r4, [pc, #24]	; (10a54 <at_cmd_set_notification_handler+0x20>)
   10a3a:	f04f 31ff 	mov.w	r1, #4294967295
   10a3e:	4620      	mov	r0, r4
   10a40:	f011 fbec 	bl	2221c <z_impl_k_sem_take>
	notification_handler = handler;
   10a44:	4b04      	ldr	r3, [pc, #16]	; (10a58 <at_cmd_set_notification_handler+0x24>)
   10a46:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   10a48:	4620      	mov	r0, r4
}
   10a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10a4e:	f011 bb9d 	b.w	2218c <z_impl_k_sem_give>
   10a52:	bf00      	nop
   10a54:	2002a44c 	.word	0x2002a44c
   10a58:	200201b0 	.word	0x200201b0

00010a5c <ip_client_event_handler>:
   10a5c:	1b08f850 	.word	0x1b08f850
   10a60:	f0060c09 	.word	0xf0060c09
   10a64:	bf00bb3d 	.word	0xbf00bb3d

00010a68 <rpc_ip_client_init>:
   10a68:	f00b4801 	.word	0xf00b4801
   10a6c:	bf00ba9d 	.word	0xbf00ba9d
   10a70:	000256e8 	.word	0x000256e8

00010a74 <rpc_ip_client_request_alloc>:
   10a74:	b5102300 	.word	0xb5102300
   10a78:	9301b082 	.word	0x9301b082
   10a7c:	4604b158 	.word	0x4604b158
   10a80:	2004aa01 	.word	0x2004aa01
   10a84:	fcc8f00b 	.word	0xfcc8f00b
   10a88:	9b01b918 	.word	0x9b01b918
   10a8c:	3308b10b 	.word	0x3308b10b
   10a90:	b0026023 	.word	0xb0026023
   10a94:	2007bd10 	.word	0x2007bd10
   10a98:	bd10b002 	.word	0xbd10b002

00010a9c <rpc_ip_client_request_send>:
   10a9c:	4370f401 	.word	0x4370f401
   10aa0:	4fe0f5b3 	.word	0x4fe0f5b3
   10aa4:	b160d10b 	.word	0xb160d10b
   10aa8:	f8304603 	.word	0xf8304603
   10aac:	20042c08 	.word	0x20042c08
   10ab0:	4101ea42 	.word	0x4101ea42
   10ab4:	1d08f843 	.word	0x1d08f843
   10ab8:	f00b4619 	.word	0xf00b4619
   10abc:	200fbc95 	.word	0x200fbc95
   10ac0:	20074770 	.word	0x20074770
   10ac4:	bf004770 	.word	0xbf004770

00010ac8 <rpc_ip_client_message_free>:
   10ac8:	f1a0b120 	.word	0xf1a0b120
   10acc:	20040108 	.word	0x20040108
   10ad0:	bcd4f00b 	.word	0xbcd4f00b
   10ad4:	47702007 	.word	0x47702007

00010ad8 <rpc_ip_client_data_free>:
   10ad8:	4601b118 	.word	0x4601b118
   10adc:	f00b2004 	.word	0xf00b2004
   10ae0:	2007bddf 	.word	0x2007bddf
   10ae4:	bf004770 	.word	0xbf004770

00010ae8 <symbol_0001c77>:
   10ae8:	4603b430 	.word	0x4603b430
   10aec:	f5b26800 	.word	0xf5b26800
   10af0:	eba03f80 	.word	0xeba03f80
   10af4:	d2140101 	.word	0xd2140101
   10af8:	dd512902 	.word	0xdd512902
   10afc:	60191e41 	.word	0x60191e41
   10b00:	2c01f800 	.word	0x2c01f800
   10b04:	24826819 	.word	0x24826819
   10b08:	60181e48 	.word	0x60181e48
   10b0c:	0a122003 	.word	0x0a122003
   10b10:	2c01f801 	.word	0x2c01f801
   10b14:	1e51681a 	.word	0x1e51681a
   10b18:	f8026019 	.word	0xf8026019
   10b1c:	bc304c01 	.word	0xbc304c01
   10b20:	f1b24770 	.word	0xf1b24770
   10b24:	d21a7f80 	.word	0xd21a7f80
   10b28:	dd392903 	.word	0xdd392903
   10b2c:	1e412483 	.word	0x1e412483
   10b30:	f8006019 	.word	0xf8006019
   10b34:	68192c01 	.word	0x68192c01
   10b38:	1e4d0a10 	.word	0x1e4d0a10
   10b3c:	f801601d 	.word	0xf801601d
   10b40:	68190c01 	.word	0x68190c01
   10b44:	1e480c12 	.word	0x1e480c12
   10b48:	f8016018 	.word	0xf8016018
   10b4c:	681a2c01 	.word	0x681a2c01
   10b50:	1e512004 	.word	0x1e512004
   10b54:	f8026019 	.word	0xf8026019
   10b58:	bc304c01 	.word	0xbc304c01
   10b5c:	29044770 	.word	0x29044770
   10b60:	2484dd1e 	.word	0x2484dd1e
   10b64:	60191e41 	.word	0x60191e41
   10b68:	2c01f800 	.word	0x2c01f800
   10b6c:	0a106819 	.word	0x0a106819
   10b70:	601d1e4d 	.word	0x601d1e4d
   10b74:	0c01f801 	.word	0x0c01f801
   10b78:	0c106819 	.word	0x0c106819
   10b7c:	601d1e4d 	.word	0x601d1e4d
   10b80:	0c01f801 	.word	0x0c01f801
   10b84:	0e126819 	.word	0x0e126819
   10b88:	60181e48 	.word	0x60181e48
   10b8c:	2c01f801 	.word	0x2c01f801
   10b90:	2005681a 	.word	0x2005681a
   10b94:	60191e51 	.word	0x60191e51
   10b98:	4c01f802 	.word	0x4c01f802
   10b9c:	4770bc30 	.word	0x4770bc30
   10ba0:	006bf06f 	.word	0x006bf06f
   10ba4:	bf00e7bb 	.word	0xbf00e7bb

00010ba8 <symbol_000646e>:
   10ba8:	6804b430 	.word	0x6804b430
   10bac:	46032a7f 	.word	0x46032a7f
   10bb0:	0101eba4 	.word	0x0101eba4
   10bb4:	2900d808 	.word	0x2900d808
   10bb8:	1e61dd6c 	.word	0x1e61dd6c
   10bbc:	20016001 	.word	0x20016001
   10bc0:	2c01f804 	.word	0x2c01f804
   10bc4:	4770bc30 	.word	0x4770bc30
   10bc8:	d80e2aff 	.word	0xd80e2aff
   10bcc:	dd612901 	.word	0xdd612901
   10bd0:	1e602181 	.word	0x1e602181
   10bd4:	f8046018 	.word	0xf8046018
   10bd8:	681a2c01 	.word	0x681a2c01
   10bdc:	1e542002 	.word	0x1e542002
   10be0:	f802601c 	.word	0xf802601c
   10be4:	bc301c01 	.word	0xbc301c01
   10be8:	f5b24770 	.word	0xf5b24770
   10bec:	d31c3f80 	.word	0xd31c3f80
   10bf0:	7f80f1b2 	.word	0x7f80f1b2
   10bf4:	2903d22e 	.word	0x2903d22e
   10bf8:	2583dd4c 	.word	0x2583dd4c
   10bfc:	60011e61 	.word	0x60011e61
   10c00:	2c01f804 	.word	0x2c01f804
   10c04:	0a106801 	.word	0x0a106801
   10c08:	601c1e4c 	.word	0x601c1e4c
   10c0c:	0c01f801 	.word	0x0c01f801
   10c10:	0c126819 	.word	0x0c126819
   10c14:	60181e48 	.word	0x60181e48
   10c18:	2c01f801 	.word	0x2c01f801
   10c1c:	2004681a 	.word	0x2004681a
   10c20:	60191e51 	.word	0x60191e51
   10c24:	5c01f802 	.word	0x5c01f802
   10c28:	2902e7cc 	.word	0x2902e7cc
   10c2c:	2582dd32 	.word	0x2582dd32
   10c30:	60011e61 	.word	0x60011e61
   10c34:	2c01f804 	.word	0x2c01f804
   10c38:	0a126801 	.word	0x0a126801
   10c3c:	60181e48 	.word	0x60181e48
   10c40:	2c01f801 	.word	0x2c01f801
   10c44:	2003681a 	.word	0x2003681a
   10c48:	60191e51 	.word	0x60191e51
   10c4c:	5c01f802 	.word	0x5c01f802
   10c50:	4770bc30 	.word	0x4770bc30
   10c54:	dd1d2904 	.word	0xdd1d2904
   10c58:	1e612584 	.word	0x1e612584
   10c5c:	f8046001 	.word	0xf8046001
   10c60:	68012c01 	.word	0x68012c01
   10c64:	1e4c0a10 	.word	0x1e4c0a10
   10c68:	f801601c 	.word	0xf801601c
   10c6c:	68190c01 	.word	0x68190c01
   10c70:	1e4c0c10 	.word	0x1e4c0c10
   10c74:	f801601c 	.word	0xf801601c
   10c78:	68190c01 	.word	0x68190c01
   10c7c:	1e480e12 	.word	0x1e480e12
   10c80:	f8016018 	.word	0xf8016018
   10c84:	681a2c01 	.word	0x681a2c01
   10c88:	1e512005 	.word	0x1e512005
   10c8c:	f8026019 	.word	0xf8026019
   10c90:	e7975c01 	.word	0xe7975c01
   10c94:	006bf06f 	.word	0x006bf06f
   10c98:	bf00e794 	.word	0xbf00e794

00010c9c <symbol_00036c0>:
   10c9c:	1a596803 	.word	0x1a596803
   10ca0:	dd052900 	.word	0xdd052900
   10ca4:	60011e59 	.word	0x60011e59
   10ca8:	f8032001 	.word	0xf8032001
   10cac:	47702c01 	.word	0x47702c01
   10cb0:	006bf06f 	.word	0x006bf06f
   10cb4:	bf004770 	.word	0xbf004770

00010cb8 <symbol_0008475>:
   10cb8:	6805b5f8 	.word	0x6805b5f8
   10cbc:	d83f42a9 	.word	0xd83f42a9
   10cc0:	1a69460f 	.word	0x1a69460f
   10cc4:	d83b428b 	.word	0xd83b428b
   10cc8:	461c4606 	.word	0x461c4606
   10ccc:	46111ae8 	.word	0x46111ae8
   10cd0:	461a6030 	.word	0x461a6030
   10cd4:	fa80f013 	.word	0xfa80f013
   10cd8:	46202c00 	.word	0x46202c00
   10cdc:	2c7fdb15 	.word	0x2c7fdb15
   10ce0:	6833d814 	.word	0x6833d814
   10ce4:	2a001bda 	.word	0x2a001bda
   10ce8:	2001dd2a 	.word	0x2001dd2a
   10cec:	60321e5a 	.word	0x60321e5a
   10cf0:	4c01f803 	.word	0x4c01f803
   10cf4:	34016833 	.word	0x34016833
   10cf8:	2f001bdf 	.word	0x2f001bdf
   10cfc:	2206dd20 	.word	0x2206dd20
   10d00:	60311e59 	.word	0x60311e59
   10d04:	f8034420 	.word	0xf8034420
   10d08:	bdf82c01 	.word	0xbdf82c01
   10d0c:	d80f2cff 	.word	0xd80f2cff
   10d10:	1bda6833 	.word	0x1bda6833
   10d14:	dd132a01 	.word	0xdd132a01
   10d18:	1e592281 	.word	0x1e592281
   10d1c:	f8036031 	.word	0xf8036031
   10d20:	68334c01 	.word	0x68334c01
   10d24:	1e592002 	.word	0x1e592002
   10d28:	f8036031 	.word	0xf8036031
   10d2c:	e7e12c01 	.word	0xe7e12c01
   10d30:	46394622 	.word	0x46394622
   10d34:	f7ff4630 	.word	0xf7ff4630
   10d38:	2800fed7 	.word	0x2800fed7
   10d3c:	bdf8dada 	.word	0xbdf8dada
   10d40:	006bf06f 	.word	0x006bf06f
   10d44:	bf00bdf8 	.word	0xbf00bdf8

00010d48 <symbol_0002662>:
   10d48:	41f0e92d 	.word	0x41f0e92d
   10d4c:	8018f8dd 	.word	0x8018f8dd
   10d50:	f1b86805 	.word	0xf1b86805
   10d54:	d1130f00 	.word	0xd1130f00
   10d58:	2c001a6c 	.word	0x2c001a6c
   10d5c:	8087f340 	.word	0x8087f340
   10d60:	60041e6c 	.word	0x60041e6c
   10d64:	8c01f805 	.word	0x8c01f805
   10d68:	1a656804 	.word	0x1a656804
   10d6c:	dd7e2d00 	.word	0xdd7e2d00
   10d70:	f04f2505 	.word	0xf04f2505
   10d74:	1e660802 	.word	0x1e660802
   10d78:	f8046006 	.word	0xf8046006
   10d7c:	68055c01 	.word	0x68055c01
   10d80:	d87442a9 	.word	0xd87442a9
   10d84:	42a31a6c 	.word	0x42a31a6c
   10d88:	4606d871 	.word	0x4606d871
   10d8c:	1ae8461c 	.word	0x1ae8461c
   10d90:	6030460f 	.word	0x6030460f
   10d94:	461a4611 	.word	0x461a4611
   10d98:	fa1ef013 	.word	0xfa1ef013
   10d9c:	46202c00 	.word	0x46202c00
   10da0:	2c7fdb2f 	.word	0x2c7fdb2f
   10da4:	6833d841 	.word	0x6833d841
   10da8:	2a001bda 	.word	0x2a001bda
   10dac:	2001dd5f 	.word	0x2001dd5f
   10db0:	60321e5a 	.word	0x60321e5a
   10db4:	4c01f803 	.word	0x4c01f803
   10db8:	34016833 	.word	0x34016833
   10dbc:	2a001bda 	.word	0x2a001bda
   10dc0:	2206dd55 	.word	0x2206dd55
   10dc4:	1e594404 	.word	0x1e594404
   10dc8:	60312c00 	.word	0x60312c00
   10dcc:	f8034620 	.word	0xf8034620
   10dd0:	db162c01 	.word	0xdb162c01
   10dd4:	2c7f4444 	.word	0x2c7f4444
   10dd8:	6833d815 	.word	0x6833d815
   10ddc:	2a001bda 	.word	0x2a001bda
   10de0:	2001dd45 	.word	0x2001dd45
   10de4:	60321e5a 	.word	0x60321e5a
   10de8:	4c01f803 	.word	0x4c01f803
   10dec:	34016833 	.word	0x34016833
   10df0:	2f001bdf 	.word	0x2f001bdf
   10df4:	2230dd3b 	.word	0x2230dd3b
   10df8:	60311e59 	.word	0x60311e59
   10dfc:	f8034420 	.word	0xf8034420
   10e00:	e8bd2c01 	.word	0xe8bd2c01
   10e04:	2cff81f0 	.word	0x2cff81f0
   10e08:	6833d821 	.word	0x6833d821
   10e0c:	2a011bda 	.word	0x2a011bda
   10e10:	2281dd2d 	.word	0x2281dd2d
   10e14:	60311e59 	.word	0x60311e59
   10e18:	4c01f803 	.word	0x4c01f803
   10e1c:	20026833 	.word	0x20026833
   10e20:	60311e59 	.word	0x60311e59
   10e24:	2c01f803 	.word	0x2c01f803
   10e28:	2cffe7e0 	.word	0x2cffe7e0
   10e2c:	6833d817 	.word	0x6833d817
   10e30:	2a011bda 	.word	0x2a011bda
   10e34:	2281dd1b 	.word	0x2281dd1b
   10e38:	60311e59 	.word	0x60311e59
   10e3c:	4c01f803 	.word	0x4c01f803
   10e40:	20026833 	.word	0x20026833
   10e44:	60311e59 	.word	0x60311e59
   10e48:	2c01f803 	.word	0x2c01f803
   10e4c:	4622e7b4 	.word	0x4622e7b4
   10e50:	46304639 	.word	0x46304639
   10e54:	fe48f7ff 	.word	0xfe48f7ff
   10e58:	dbd22800 	.word	0xdbd22800
   10e5c:	4622e7c6 	.word	0x4622e7c6
   10e60:	46304639 	.word	0x46304639
   10e64:	fe40f7ff 	.word	0xfe40f7ff
   10e68:	daa52800 	.word	0xdaa52800
   10e6c:	f06fe7c9 	.word	0xf06fe7c9
   10e70:	e7c6006b 	.word	0xe7c6006b

00010e74 <symbol_0005bf5>:
   10e74:	4ff0e92d 	.word	0x4ff0e92d
   10e78:	b0d72400 	.word	0xb0d72400
   10e7c:	73abf50d 	.word	0x73abf50d
   10e80:	46914688 	.word	0x46914688
   10e84:	4306e9cd 	.word	0x4306e9cd
   10e88:	f0014607 	.word	0xf0014607
   10e8c:	2802f95d 	.word	0x2802f95d
   10e90:	2385d159 	.word	0x2385d159
   10e94:	ae0b6878 	.word	0xae0b6878
   10e98:	46229301 	.word	0x46229301
   10e9c:	0188f100 	.word	0x0188f100
   10ea0:	ab0a9600 	.word	0xab0a9600
   10ea4:	f004940a 	.word	0xf004940a
   10ea8:	ad2dfbc5 	.word	0xad2dfbc5
   10eac:	b9684604 	.word	0xb9684604
   10eb0:	42a89807 	.word	0x42a89807
   10eb4:	9a0ad37f 	.word	0x9a0ad37f
   10eb8:	42931b43 	.word	0x42931b43
   10ebc:	1a83d37b 	.word	0x1a83d37b
   10ec0:	46314618 	.word	0x46314618
   10ec4:	f0139307 	.word	0xf0139307
   10ec8:	9c0af987 	.word	0x9c0af987
   10ecc:	db312c00 	.word	0xdb312c00
   10ed0:	1b5a9b07 	.word	0x1b5a9b07
   10ed4:	dd6e2a00 	.word	0xdd6e2a00
   10ed8:	1e5a2100 	.word	0x1e5a2100
   10edc:	0a01f104 	.word	0x0a01f104
   10ee0:	a8079207 	.word	0xa8079207
   10ee4:	1c01f803 	.word	0x1c01f803
   10ee8:	46294652 	.word	0x46294652
   10eec:	fe5cf7ff 	.word	0xfe5cf7ff
   10ef0:	db1f1e04 	.word	0xdb1f1e04
   10ef4:	46292203 	.word	0x46292203
   10ef8:	f7ffa807 	.word	0xf7ffa807
   10efc:	f1b0fecf 	.word	0xf1b0fecf
   10f00:	db1b0b00 	.word	0xdb1b0b00
   10f04:	f0014638 	.word	0xf0014638
   10f08:	aa08f91f 	.word	0xaa08f91f
   10f0c:	f00ba909 	.word	0xf00ba909
   10f10:	4603fcd7 	.word	0x4603fcd7
   10f14:	2b00b1c8 	.word	0x2b00b1c8
   10f18:	f1c3db50 	.word	0xf1c3db50
   10f1c:	a90602a2 	.word	0xa90602a2
   10f20:	9101e9cd 	.word	0x9101e9cd
   10f24:	8000f8cd 	.word	0x8000f8cd
   10f28:	4925442a 	.word	0x4925442a
   10f2c:	f0044825 	.word	0xf0044825
   10f30:	4604ffa1 	.word	0x4604ffa1
   10f34:	b0574620 	.word	0xb0574620
   10f38:	8ff0e8bd 	.word	0x8ff0e8bd
   10f3c:	4620465c 	.word	0x4620465c
   10f40:	e8bdb057 	.word	0xe8bdb057
   10f44:	4c208ff0 	.word	0x4c208ff0
   10f48:	9005e7f4 	.word	0x9005e7f4
   10f4c:	f0014638 	.word	0xf0014638
   10f50:	2802f8fb 	.word	0x2802f8fb
   10f54:	d01d9b05 	.word	0xd01d9b05
   10f58:	e9dd4618 	.word	0xe9dd4618
   10f5c:	90003208 	.word	0x90003208
   10f60:	a8074629 	.word	0xa8074629
   10f64:	fef0f7ff 	.word	0xfef0f7ff
   10f68:	db222800 	.word	0xdb222800
   10f6c:	44a34454 	.word	0x44a34454
   10f70:	465a4483 	.word	0x465a4483
   10f74:	a8074629 	.word	0xa8074629
   10f78:	fe16f7ff 	.word	0xfe16f7ff
   10f7c:	dbd91e04 	.word	0xdbd91e04
   10f80:	2230a807 	.word	0x2230a807
   10f84:	f7ff4629 	.word	0xf7ff4629
   10f88:	1e03fe89 	.word	0x1e03fe89
   10f8c:	44a3db16 	.word	0x44a3db16
   10f90:	e7c0445b 	.word	0xe7c0445b
   10f94:	4632687b 	.word	0x4632687b
   10f98:	a90a7818 	.word	0xa90a7818
   10f9c:	fcacf00b 	.word	0xfcacf00b
   10fa0:	6833b928 	.word	0x6833b928
   10fa4:	46299a0a 	.word	0x46299a0a
   10fa8:	f7ffa807 	.word	0xf7ffa807
   10fac:	2800fe85 	.word	0x2800fe85
   10fb0:	4604dad3 	.word	0x4604dad3
   10fb4:	f06fe7be 	.word	0xf06fe7be
   10fb8:	e7bb046b 	.word	0xe7bb046b
   10fbc:	e7b9461c 	.word	0xe7b9461c
   10fc0:	000256f8 	.word	0x000256f8
   10fc4:	00025714 	.word	0x00025714
   10fc8:	ffffc680 	.word	0xffffc680

00010fcc <authenticated_atcmd_init>:
   10fcc:	4c3bb5f0 	.word	0x4c3bb5f0
   10fd0:	6826b0c7 	.word	0x6826b0c7
   10fd4:	2701bb16 	.word	0x2701bb16
   10fd8:	60274839 	.word	0x60274839
   10fdc:	f8c8f013 	.word	0xf8c8f013
   10fe0:	f5c04605 	.word	0xf5c04605
   10fe4:	46317380 	.word	0x46317380
   10fe8:	7280f44f 	.word	0x7280f44f
   10fec:	9302a806 	.word	0x9302a806
   10ff0:	f91ff013 	.word	0xf91ff013
   10ff4:	4932462a 	.word	0x4932462a
   10ff8:	f013a806 	.word	0xf013a806
   10ffc:	aa06f8ed 	.word	0xaa06f8ed
   11000:	ab029700 	.word	0xab029700
   11004:	2120442a 	.word	0x2120442a
   11008:	f00a482e 	.word	0xf00a482e
   1100c:	4606fed5 	.word	0x4606fed5
   11010:	2300b138 	.word	0x2300b138
   11014:	60232023 	.word	0x60232023
   11018:	bdf0b047 	.word	0xbdf0b047
   1101c:	b047200e 	.word	0xb047200e
   11020:	2022bdf0 	.word	0x2022bdf0
   11024:	60279b02 	.word	0x60279b02
   11028:	af06441d 	.word	0xaf06441d
   1102c:	5578ab06 	.word	0x5578ab06
   11030:	f240442b 	.word	0xf240442b
   11034:	21022201 	.word	0x21022201
   11038:	705e2066 	.word	0x705e2066
   1103c:	f9c0f000 	.word	0xf9c0f000
   11040:	dbe61e07 	.word	0xdbe61e07
   11044:	f0134820 	.word	0xf0134820
   11048:	4633f893 	.word	0x4633f893
   1104c:	491e4602 	.word	0x491e4602
   11050:	6600e9cd 	.word	0x6600e9cd
   11054:	f0004638 	.word	0xf0004638
   11058:	3502f95d 	.word	0x3502f95d
   1105c:	4633a903 	.word	0x4633a903
   11060:	e9cd220a 	.word	0xe9cd220a
   11064:	46386600 	.word	0x46386600
   11068:	fa3cf000 	.word	0xfa3cf000
   1106c:	6600e9cd 	.word	0x6600e9cd
   11070:	462aa906 	.word	0x462aa906
   11074:	46384633 	.word	0x46384633
   11078:	f94cf000 	.word	0xf94cf000
   1107c:	d00342a8 	.word	0xd00342a8
   11080:	f0004638 	.word	0xf0004638
   11084:	e7c4f9e7 	.word	0xe7c4f9e7
   11088:	6600e9cd 	.word	0x6600e9cd
   1108c:	220a4633 	.word	0x220a4633
   11090:	4638a903 	.word	0x4638a903
   11094:	fa26f000 	.word	0xfa26f000
   11098:	ddf12801 	.word	0xddf12801
   1109c:	2202a803 	.word	0x2202a803
   110a0:	f013490a 	.word	0xf013490a
   110a4:	4605f87a 	.word	0x4605f87a
   110a8:	d1e92800 	.word	0xd1e92800
   110ac:	46382302 	.word	0x46382302
   110b0:	f0006023 	.word	0xf0006023
   110b4:	4628f9cf 	.word	0x4628f9cf
   110b8:	bf00e7ae 	.word	0xbf00e7ae
   110bc:	2002026c 	.word	0x2002026c
   110c0:	00025730 	.word	0x00025730
   110c4:	20026c60 	.word	0x20026c60
   110c8:	00025740 	.word	0x00025740
   110cc:	00025750 	.word	0x00025750

000110d0 <gnss_client_event_handler>:
   110d0:	1b08f850 	.word	0x1b08f850
   110d4:	f0060c09 	.word	0xf0060c09
   110d8:	bf00bda5 	.word	0xbf00bda5

000110dc <rpc_gnss_client_init>:
   110dc:	f00a4801 	.word	0xf00a4801
   110e0:	bf00bf63 	.word	0xbf00bf63
   110e4:	000257d8 	.word	0x000257d8

000110e8 <rpc_gnss_client_request_alloc>:
   110e8:	b5102300 	.word	0xb5102300
   110ec:	9301b082 	.word	0x9301b082
   110f0:	4604b158 	.word	0x4604b158
   110f4:	2007aa01 	.word	0x2007aa01
   110f8:	f98ef00b 	.word	0xf98ef00b
   110fc:	9b01b918 	.word	0x9b01b918
   11100:	3308b10b 	.word	0x3308b10b
   11104:	b0026023 	.word	0xb0026023
   11108:	2007bd10 	.word	0x2007bd10
   1110c:	bd10b002 	.word	0xbd10b002

00011110 <rpc_gnss_client_request_send>:
   11110:	4370f401 	.word	0x4370f401
   11114:	5f80f5b3 	.word	0x5f80f5b3
   11118:	b160d10b 	.word	0xb160d10b
   1111c:	f8304603 	.word	0xf8304603
   11120:	20072c08 	.word	0x20072c08
   11124:	4101ea42 	.word	0x4101ea42
   11128:	1d08f843 	.word	0x1d08f843
   1112c:	f00b4619 	.word	0xf00b4619
   11130:	200fb95b 	.word	0x200fb95b
   11134:	20074770 	.word	0x20074770
   11138:	bf004770 	.word	0xbf004770

0001113c <rpc_gnss_client_message_free>:
   1113c:	f1a0b120 	.word	0xf1a0b120
   11140:	20070108 	.word	0x20070108
   11144:	b99af00b 	.word	0xb99af00b
   11148:	47702007 	.word	0x47702007

0001114c <rpc_gnss_client_data_free>:
   1114c:	4601b118 	.word	0x4601b118
   11150:	f00b2007 	.word	0xf00b2007
   11154:	2007baa5 	.word	0x2007baa5
   11158:	bf004770 	.word	0xbf004770

0001115c <eckey_can_do>:
   1115c:	28023802 	.word	0x28023802
   11160:	2000bf8c 	.word	0x2000bf8c
   11164:	47702001 	.word	0x47702001

00011168 <eckey_get_bitlen>:
   11168:	47706d80 	.word	0x47706d80

0001116c <eckey_debug>:
   1116c:	4b032202 	.word	0x4b032202
   11170:	60883088 	.word	0x60883088
   11174:	604b700a 	.word	0x604b700a
   11178:	bf004770 	.word	0xbf004770
   1117c:	000257e8 	.word	0x000257e8

00011180 <eckeydh_can_do>:
   11180:	28013802 	.word	0x28013802
   11184:	2000bf8c 	.word	0x2000bf8c
   11188:	47702001 	.word	0x47702001

0001118c <eckey_free_wrap>:
   1118c:	4604b510 	.word	0x4604b510
   11190:	fc48f003 	.word	0xfc48f003
   11194:	e8bd4620 	.word	0xe8bd4620
   11198:	f00b4010 	.word	0xf00b4010
   1119c:	bf00bfe9 	.word	0xbf00bfe9

000111a0 <eckey_alloc_wrap>:
   111a0:	21acb510 	.word	0x21acb510
   111a4:	f00b2001 	.word	0xf00b2001
   111a8:	4604ffcf 	.word	0x4604ffcf
   111ac:	f003b108 	.word	0xf003b108
   111b0:	4620fbd3 	.word	0x4620fbd3
   111b4:	bf00bd10 	.word	0xbf00bd10

000111b8 <eckey_check_pair>:
   111b8:	bbacf004 	.word	0xbbacf004

000111bc <symbol_0005c7f>:
   111bc:	4ff0e92d 	.word	0x4ff0e92d
   111c0:	c024f8dd 	.word	0xc024f8dd
   111c4:	0f00f1bc 	.word	0x0f00f1bc
   111c8:	4c42d065 	.word	0x4c42d065
   111cc:	540cfba4 	.word	0x540cfba4
   111d0:	eb040864 	.word	0xeb040864
   111d4:	45c40844 	.word	0x45c40844
   111d8:	3401bf18 	.word	0x3401bf18
   111dc:	4f80f1b4 	.word	0x4f80f1b4
   111e0:	00a4d271 	.word	0x00a4d271
   111e4:	428c3401 	.word	0x428c3401
   111e8:	2800d869 	.word	0x2800d869
   111ec:	f1b8d067 	.word	0xf1b8d067
   111f0:	d0610f00 	.word	0xd0610f00
   111f4:	27004686 	.word	0x27004686
   111f8:	1cdc4e37 	.word	0x1cdc4e37
   111fc:	f8142500 	.word	0xf8142500
   11200:	f8141c03 	.word	0xf8141c03
   11204:	f8143c02 	.word	0xf8143c02
   11208:	ea4fbc01 	.word	0xea4fbc01
   1120c:	010909a1 	.word	0x010909a1
   11210:	0130f001 	.word	0x0130f001
   11214:	1a13eb06 	.word	0x1a13eb06
   11218:	9009f816 	.word	0x9009f816
   1121c:	f81a009b 	.word	0xf81a009b
   11220:	f003a001 	.word	0xf003a001
   11224:	eb06013c 	.word	0xeb06013c
   11228:	5c59139b 	.word	0x5c59139b
   1122c:	0507f369 	.word	0x0507f369
   11230:	033ff00b 	.word	0x033ff00b
   11234:	f36a5cf3 	.word	0xf36a5cf3
   11238:	f361250f 	.word	0xf361250f
   1123c:	37034517 	.word	0x37034517
   11240:	651ff363 	.word	0x651ff363
   11244:	0104f10e 	.word	0x0104f10e
   11248:	f8ce45b8 	.word	0xf8ce45b8
   1124c:	46235000 	.word	0x46235000
   11250:	f104468e 	.word	0xf104468e
   11254:	d8d10403 	.word	0xd8d10403
   11258:	d91445bc 	.word	0xd91445bc
   1125c:	4d1e781c 	.word	0x4d1e781c
   11260:	10a63701 	.word	0x10a63701
   11264:	ea4f4567 	.word	0xea4f4567
   11268:	f0041404 	.word	0xf0041404
   1126c:	f8150430 	.word	0xf8150430
   11270:	d315e006 	.word	0xd315e006
   11274:	5d2b263d 	.word	0x5d2b263d
   11278:	e000f881 	.word	0xe000f881
   1127c:	233d704b 	.word	0x233d704b
   11280:	70cb708e 	.word	0x70cb708e
   11284:	23003104 	.word	0x23003104
   11288:	1a08469c 	.word	0x1a08469c
   1128c:	700b6010 	.word	0x700b6010
   11290:	e8bd4660 	.word	0xe8bd4660
   11294:	f8c28ff0 	.word	0xf8c28ff0
   11298:	4660c000 	.word	0x4660c000
   1129c:	8ff0e8bd 	.word	0x8ff0e8bd
   112a0:	f881785b 	.word	0xf881785b
   112a4:	eb05e000 	.word	0xeb05e000
   112a8:	5d341613 	.word	0x5d341613
   112ac:	f003009b 	.word	0xf003009b
   112b0:	704c033c 	.word	0x704c033c
   112b4:	e7e25cee 	.word	0xe7e25cee
   112b8:	46014647 	.word	0x46014647
   112bc:	6014e7cc 	.word	0x6014e7cc
   112c0:	0c29f06f 	.word	0x0c29f06f
   112c4:	f04fe7e4 	.word	0xf04fe7e4
   112c8:	f06f33ff 	.word	0xf06f33ff
   112cc:	60130c29 	.word	0x60130c29
   112d0:	bf00e7de 	.word	0xbf00e7de
   112d4:	aaaaaaab 	.word	0xaaaaaaab
   112d8:	00025850 	.word	0x00025850

000112dc <packet_free_cb>:
   112dc:	f0006800 	.word	0xf0006800
   112e0:	bf00b9eb 	.word	0xbf00b9eb

000112e4 <packet_free_cb>:
   112e4:	4604b510 	.word	0x4604b510
   112e8:	f0066800 	.word	0xf0066800
   112ec:	68a0f9a5 	.word	0x68a0f9a5
   112f0:	e8bdb118 	.word	0xe8bdb118
   112f4:	f00b4010 	.word	0xf00b4010
   112f8:	bd10bf3b 	.word	0xbd10bf3b

000112fc <packet_free_cb>:
   112fc:	4604b510 	.word	0x4604b510
   11300:	f7ff6800 	.word	0xf7ff6800
   11304:	68a0ff23 	.word	0x68a0ff23
   11308:	e8bdb118 	.word	0xe8bdb118
   1130c:	f00b4010 	.word	0xf00b4010
   11310:	bd10bf2f 	.word	0xbd10bf2f

00011314 <at_interface_write>:
   11314:	b083b5f0 	.word	0xb083b5f0
   11318:	4615460f 	.word	0x4615460f
   1131c:	f0044606 	.word	0xf0044606
   11320:	2800fcf3 	.word	0x2800fcf3
   11324:	6803d047 	.word	0x6803d047
   11328:	039b4604 	.word	0x039b4604
   1132c:	6803d543 	.word	0x6803d543
   11330:	f4234629 	.word	0xf4234629
   11334:	60033300 	.word	0x60033300
   11338:	a8016803 	.word	0xa8016803
   1133c:	1300f443 	.word	0x1300f443
   11340:	f0006023 	.word	0xf0006023
   11344:	bba0f98f 	.word	0xbba0f98f
   11348:	9b012204 	.word	0x9b012204
   1134c:	7258721a 	.word	0x7258721a
   11350:	72d87298 	.word	0x72d87298
   11354:	b98560de 	.word	0xb98560de
   11358:	21014618 	.word	0x21014618
   1135c:	f996f000 	.word	0xf996f000
   11360:	f44fb9d0 	.word	0xf44fb9d0
   11364:	46303200 	.word	0x46303200
   11368:	f04f4611 	.word	0xf04f4611
   1136c:	f00433ff 	.word	0xf00433ff
   11370:	b9a8fc5f 	.word	0xb9a8fc5f
   11374:	b0034628 	.word	0xb0034628
   11378:	4639bdf0 	.word	0x4639bdf0
   1137c:	462a6818 	.word	0x462a6818
   11380:	ff2af012 	.word	0xff2af012
   11384:	98012101 	.word	0x98012101
   11388:	f980f000 	.word	0xf980f000
   1138c:	d0e82800 	.word	0xd0e82800
   11390:	68189b01 	.word	0x68189b01
   11394:	f990f000 	.word	0xf990f000
   11398:	f0009801 	.word	0xf0009801
   1139c:	2023f985 	.word	0x2023f985
   113a0:	f4436823 	.word	0xf4436823
   113a4:	60233300 	.word	0x60233300
   113a8:	fdf2f7fe 	.word	0xfdf2f7fe
   113ac:	30fff04f 	.word	0x30fff04f
   113b0:	200ce7e1 	.word	0x200ce7e1
   113b4:	2016e7f4 	.word	0x2016e7f4
   113b8:	bf00e7f6 	.word	0xbf00e7f6

000113bc <at_interface_init>:
   113bc:	b94cf000 	.word	0xb94cf000

000113c0 <at_interface_open>:
   113c0:	41f0e92d 	.word	0x41f0e92d
   113c4:	b0822500 	.word	0xb0822500
   113c8:	f843ab02 	.word	0xf843ab02
   113cc:	46805d08 	.word	0x46805d08
   113d0:	4618460f 	.word	0x4618460f
   113d4:	21024616 	.word	0x21024616
   113d8:	f0044a1d 	.word	0xf0044a1d
   113dc:	9b00fb85 	.word	0x9b00fb85
   113e0:	b30b4604 	.word	0xb30b4604
   113e4:	8703e9c3 	.word	0x8703e9c3
   113e8:	4629615e 	.word	0x4629615e
   113ec:	f000a801 	.word	0xf000a801
   113f0:	b9e8f939 	.word	0xb9e8f939
   113f4:	9b012204 	.word	0x9b012204
   113f8:	72582105 	.word	0x72582105
   113fc:	72d87298 	.word	0x72d87298
   11400:	60dc721a 	.word	0x60dc721a
   11404:	f0004618 	.word	0xf0004618
   11408:	b9d8f941 	.word	0xb9d8f941
   1140c:	f04f2202 	.word	0xf04f2202
   11410:	461133ff 	.word	0x461133ff
   11414:	f0044620 	.word	0xf0044620
   11418:	4605fc0b 	.word	0x4605fc0b
   1141c:	9a00b948 	.word	0x9a00b948
   11420:	f4436813 	.word	0xf4436813
   11424:	60133300 	.word	0x60133300
   11428:	b0024620 	.word	0xb0024620
   1142c:	81f0e8bd 	.word	0x81f0e8bd
   11430:	4620250c 	.word	0x4620250c
   11434:	fbaef004 	.word	0xfbaef004
   11438:	f7fe4628 	.word	0xf7fe4628
   1143c:	f04ffda9 	.word	0xf04ffda9
   11440:	e7f134ff 	.word	0xe7f134ff
   11444:	f0009801 	.word	0xf0009801
   11448:	2523f92f 	.word	0x2523f92f
   1144c:	bf00e7f1 	.word	0xbf00e7f1
   11450:	000112dd 	.word	0x000112dd

00011454 <at_interface_close>:
   11454:	b083b5f0 	.word	0xb083b5f0
   11458:	f0044606 	.word	0xf0044606
   1145c:	2800fc55 	.word	0x2800fc55
   11460:	230dd03d 	.word	0x230dd03d
   11464:	60036807 	.word	0x60036807
   11468:	46046803 	.word	0x46046803
   1146c:	d41f039b 	.word	0xd41f039b
   11470:	a8012100 	.word	0xa8012100
   11474:	f8f6f000 	.word	0xf8f6f000
   11478:	2204bb20 	.word	0x2204bb20
   1147c:	21069b01 	.word	0x21069b01
   11480:	72987258 	.word	0x72987258
   11484:	721a72d8 	.word	0x721a72d8
   11488:	461860de 	.word	0x461860de
   1148c:	f8fef000 	.word	0xf8fef000
   11490:	220eb9d0 	.word	0x220eb9d0
   11494:	33fff04f 	.word	0x33fff04f
   11498:	46304611 	.word	0x46304611
   1149c:	fbc8f004 	.word	0xfbc8f004
   114a0:	b9a84605 	.word	0xb9a84605
   114a4:	f0044630 	.word	0xf0044630
   114a8:	4628fb75 	.word	0x4628fb75
   114ac:	bdf0b003 	.word	0xbdf0b003
   114b0:	21006803 	.word	0x21006803
   114b4:	3300f423 	.word	0x3300f423
   114b8:	a8016003 	.word	0xa8016003
   114bc:	f8d2f000 	.word	0xf8d2f000
   114c0:	d0da2800 	.word	0xd0da2800
   114c4:	e003250c 	.word	0xe003250c
   114c8:	f0009801 	.word	0xf0009801
   114cc:	2523f8ed 	.word	0x2523f8ed
   114d0:	46286027 	.word	0x46286027
   114d4:	fd5cf7fe 	.word	0xfd5cf7fe
   114d8:	35fff04f 	.word	0x35fff04f
   114dc:	2516e7e5 	.word	0x2516e7e5
   114e0:	bf00e7f7 	.word	0xbf00e7f7

000114e4 <at_interface_read>:
   114e4:	41f0e92d 	.word	0x41f0e92d
   114e8:	4688b084 	.word	0x4688b084
   114ec:	461e4615 	.word	0x461e4615
   114f0:	f0044607 	.word	0xf0044607
   114f4:	2800fc09 	.word	0x2800fc09
   114f8:	2300d049 	.word	0x2300d049
   114fc:	8500e9cd 	.word	0x8500e9cd
   11500:	0502f016 	.word	0x0502f016
   11504:	e9cd4604 	.word	0xe9cd4604
   11508:	d00e3302 	.word	0xd00e3302
   1150c:	2d00e01e 	.word	0x2d00e01e
   11510:	f44fd133 	.word	0xf44fd133
   11514:	6a233280 	.word	0x6a233280
   11518:	2b004611 	.word	0x2b004611
   1151c:	f04fbf08 	.word	0xf04fbf08
   11520:	463833ff 	.word	0x463833ff
   11524:	fb84f004 	.word	0xfb84f004
   11528:	68234605 	.word	0x68234605
   1152c:	f42369e0 	.word	0xf42369e0
   11530:	60233380 	.word	0x60233380
   11534:	46326803 	.word	0x46326803
   11538:	4669689b 	.word	0x4669689b
   1153c:	f1b04798 	.word	0xf1b04798
   11540:	dbe40800 	.word	0xdbe40800
   11544:	b0044640 	.word	0xb0044640
   11548:	81f0e8bd 	.word	0x81f0e8bd
   1154c:	69c06803 	.word	0x69c06803
   11550:	3380f423 	.word	0x3380f423
   11554:	68036023 	.word	0x68036023
   11558:	689b4632 	.word	0x689b4632
   1155c:	47984669 	.word	0x47984669
   11560:	0800f1b0 	.word	0x0800f1b0
   11564:	f1b8daee 	.word	0xf1b8daee
   11568:	d1eb3fff 	.word	0xd1eb3fff
   1156c:	f7fe2023 	.word	0xf7fe2023
   11570:	4640fd0f 	.word	0x4640fd0f
   11574:	e8bdb004 	.word	0xe8bdb004
   11578:	f1b881f0 	.word	0xf1b881f0
   1157c:	d1e13fff 	.word	0xd1e13fff
   11580:	f7fe4628 	.word	0xf7fe4628
   11584:	4640fd05 	.word	0x4640fd05
   11588:	e8bdb004 	.word	0xe8bdb004
   1158c:	201681f0 	.word	0x201681f0
   11590:	fcfef7fe 	.word	0xfcfef7fe
   11594:	38fff04f 	.word	0x38fff04f
   11598:	bf00e7d4 	.word	0xbf00e7d4

0001159c <at_interface_getopt>:
   1159c:	bc12f004 	.word	0xbc12f004

000115a0 <at_interface_setopt>:
   115a0:	bbdaf004 	.word	0xbbdaf004

000115a4 <rpc_at_event_handler>:
   115a4:	4606b570 	.word	0x4606b570
   115a8:	68c0b084 	.word	0x68c0b084
   115ac:	f004460d 	.word	0xf004460d
   115b0:	4604fbab 	.word	0x4604fbab
   115b4:	6803b348 	.word	0x6803b348
   115b8:	2b01b29b 	.word	0x2b01b29b
   115bc:	6803d01f 	.word	0x6803d01f
   115c0:	2b0db29b 	.word	0x2b0db29b
   115c4:	6803d029 	.word	0x6803d029
   115c8:	2b02b29b 	.word	0x2b02b29b
   115cc:	3d03d02d 	.word	0x3d03d02d
   115d0:	d8172d01 	.word	0xd8172d01
   115d4:	68732500 	.word	0x68732500
   115d8:	e9cd6832 	.word	0xe9cd6832
   115dc:	e9cd5502 	.word	0xe9cd5502
   115e0:	69e02300 	.word	0x69e02300
   115e4:	68034669 	.word	0x68034669
   115e8:	4798685b 	.word	0x4798685b
   115ec:	d0193001 	.word	0xd0193001
   115f0:	68234628 	.word	0x68234628
   115f4:	3380f443 	.word	0x3380f443
   115f8:	b0046023 	.word	0xb0046023
   115fc:	2d02bd70 	.word	0x2d02bd70
   11600:	6005d1e5 	.word	0x6005d1e5
   11604:	b0042000 	.word	0xb0042000
   11608:	6830bd70 	.word	0x6830bd70
   1160c:	d0f92800 	.word	0xd0f92800
   11610:	f852f000 	.word	0xf852f000
   11614:	b0044620 	.word	0xb0044620
   11618:	2d02bd70 	.word	0x2d02bd70
   1161c:	230ed1d7 	.word	0x230ed1d7
   11620:	e7ef6003 	.word	0xe7ef6003
   11624:	b0042002 	.word	0xb0042002
   11628:	6803bd70 	.word	0x6803bd70
   1162c:	d5ce029b 	.word	0xd5ce029b
   11630:	d1cc2d02 	.word	0xd1cc2d02
   11634:	f4236803 	.word	0xf4236803
   11638:	60031300 	.word	0x60031300
   1163c:	f4436803 	.word	0xf4436803
   11640:	60033300 	.word	0x60033300
   11644:	bf00e7de 	.word	0xbf00e7de

00011648 <at_client_evt_handler>:
   11648:	f850b120 	.word	0xf850b120
   1164c:	0c091b08 	.word	0x0c091b08
   11650:	bfa8f7ff 	.word	0xbfa8f7ff
   11654:	bf004770 	.word	0xbf004770

00011658 <rpc_at_client_init>:
   11658:	f00a4801 	.word	0xf00a4801
   1165c:	bf00bca5 	.word	0xbf00bca5
   11660:	00025890 	.word	0x00025890

00011664 <rpc_at_client_request_alloc>:
   11664:	2300b180 	.word	0x2300b180
   11668:	b082b510 	.word	0xb082b510
   1166c:	4604aa02 	.word	0x4604aa02
   11670:	3d04f842 	.word	0x3d04f842
   11674:	f00a2003 	.word	0xf00a2003
   11678:	b918fecf 	.word	0xb918fecf
   1167c:	b10b9b01 	.word	0xb10b9b01
   11680:	60233308 	.word	0x60233308
   11684:	bd10b002 	.word	0xbd10b002
   11688:	4770200e 	.word	0x4770200e

0001168c <rpc_at_client_request_send>:
   1168c:	4603b150 	.word	0x4603b150
   11690:	2c08f830 	.word	0x2c08f830
   11694:	ea422003 	.word	0xea422003
   11698:	f8434101 	.word	0xf8434101
   1169c:	46191d08 	.word	0x46191d08
   116a0:	bea2f00a 	.word	0xbea2f00a
   116a4:	4770200e 	.word	0x4770200e

000116a8 <rpc_at_client_message_free>:
   116a8:	f1a0b120 	.word	0xf1a0b120
   116ac:	20030108 	.word	0x20030108
   116b0:	bee4f00a 	.word	0xbee4f00a
   116b4:	4770200e 	.word	0x4770200e

000116b8 <rpc_at_client_data_free>:
   116b8:	4601b118 	.word	0x4601b118
   116bc:	f00a2003 	.word	0xf00a2003
   116c0:	200ebfef 	.word	0x200ebfef
   116c4:	bf004770 	.word	0xbf004770

000116c8 <logobj_event_handler>:
   116c8:	4b3bb530 	.word	0x4b3bb530
   116cc:	681db085 	.word	0x681db085
   116d0:	d04c2d00 	.word	0xd04c2d00
   116d4:	0302f248 	.word	0x0302f248
   116d8:	d0534299 	.word	0xd0534299
   116dc:	f248d91c 	.word	0xf248d91c
   116e0:	42990303 	.word	0x42990303
   116e4:	f249d05a 	.word	0xf249d05a
   116e8:	42990301 	.word	0x42990301
   116ec:	2400d147 	.word	0x2400d147
   116f0:	68026843 	.word	0x68026843
   116f4:	4402e9cd 	.word	0x4402e9cd
   116f8:	2300e9cd 	.word	0x2300e9cd
   116fc:	466969e8 	.word	0x466969e8
   11700:	685b6803 	.word	0x685b6803
   11704:	30014798 	.word	0x30014798
   11708:	4620d04e 	.word	0x4620d04e
   1170c:	f443682b 	.word	0xf443682b
   11710:	602b3380 	.word	0x602b3380
   11714:	bd30b005 	.word	0xbd30b005
   11718:	0301f248 	.word	0x0301f248
   1171c:	d12e4299 	.word	0xd12e4299
   11720:	2b0068c3 	.word	0x2b0068c3
   11724:	6828d135 	.word	0x6828d135
   11728:	0080f410 	.word	0x0080f410
   1172c:	682bd03e 	.word	0x682bd03e
   11730:	2b01b29b 	.word	0x2b01b29b
   11734:	682bd105 	.word	0x682bd105
   11738:	041b0c1b 	.word	0x041b0c1b
   1173c:	0302f043 	.word	0x0302f043
   11740:	4b1e602b 	.word	0x4b1e602b
   11744:	f002781a 	.word	0xf002781a
   11748:	2a0001ff 	.word	0x2a0001ff
   1174c:	4a1cd031 	.word	0x4a1cd031
   11750:	b9097811 	.word	0xb9097811
   11754:	70112101 	.word	0x70112101
   11758:	70182000 	.word	0x70182000
   1175c:	f423682b 	.word	0xf423682b
   11760:	602b0380 	.word	0x602b0380
   11764:	f443682b 	.word	0xf443682b
   11768:	602b0300 	.word	0x602b0300
   1176c:	6800e7d2 	.word	0x6800e7d2
   11770:	d0cf2800 	.word	0xd0cf2800
   11774:	ff60f005 	.word	0xff60f005
   11778:	b0054628 	.word	0xb0054628
   1177c:	2000bd30 	.word	0x2000bd30
   11780:	bd30b005 	.word	0xbd30b005
   11784:	f413682b 	.word	0xf413682b
   11788:	d00b0380 	.word	0xd00b0380
   1178c:	280068c0 	.word	0x280068c0
   11790:	230ed0e4 	.word	0x230ed0e4
   11794:	606b2000 	.word	0x606b2000
   11798:	bd30b005 	.word	0xbd30b005
   1179c:	2b0168c3 	.word	0x2b0168c3
   117a0:	e7f6d1a5 	.word	0xe7f6d1a5
   117a4:	e7b54618 	.word	0xe7b54618
   117a8:	e7b32002 	.word	0xe7b32002
   117ac:	606b230e 	.word	0x606b230e
   117b0:	4a03e7b0 	.word	0x4a03e7b0
   117b4:	e7cf7011 	.word	0xe7cf7011
   117b8:	20020274 	.word	0x20020274
   117bc:	20026c57 	.word	0x20026c57
   117c0:	20026c58 	.word	0x20026c58

000117c4 <logobj_interface_init>:
   117c4:	b5102300 	.word	0xb5102300
   117c8:	4a084907 	.word	0x4a084907
   117cc:	48094c08 	.word	0x48094c08
   117d0:	60037023 	.word	0x60037023
   117d4:	6013700b 	.word	0x6013700b
   117d8:	fef2f005 	.word	0xfef2f005
   117dc:	bf183000 	.word	0xbf183000
   117e0:	42402001 	.word	0x42402001
   117e4:	bf00bd10 	.word	0xbf00bd10
   117e8:	20026c57 	.word	0x20026c57
   117ec:	20020270 	.word	0x20020270
   117f0:	20026c58 	.word	0x20026c58
   117f4:	20020274 	.word	0x20020274

000117f8 <logobj_interface_open>:
   117f8:	e92d2300 	.word	0xe92d2300
   117fc:	286647f0 	.word	0x286647f0
   11800:	9300b082 	.word	0x9300b082
   11804:	2902d172 	.word	0x2902d172
   11808:	d16f4689 	.word	0xd16f4689
   1180c:	2305f240 	.word	0x2305f240
   11810:	4692429a 	.word	0x4692429a
   11814:	4f48d16a 	.word	0x4f48d16a
   11818:	2d00683d 	.word	0x2d00683d
   1181c:	4680d17c 	.word	0x4680d17c
   11820:	46684a46 	.word	0x46684a46
   11824:	f960f004 	.word	0xf960f004
   11828:	46069b00 	.word	0x46069b00
   1182c:	d07d2b00 	.word	0xd07d2b00
   11830:	22044629 	.word	0x22044629
   11834:	603b4842 	.word	0x603b4842
   11838:	fcfbf012 	.word	0xfcfbf012
   1183c:	46299c00 	.word	0x46299c00
   11840:	8903e9c4 	.word	0x8903e9c4
   11844:	a014f8c4 	.word	0xa014f8c4
   11848:	f005a801 	.word	0xf005a801
   1184c:	2800febf 	.word	0x2800febf
   11850:	2201d13c 	.word	0x2201d13c
   11854:	9b012104 	.word	0x9b012104
   11858:	73584d3a 	.word	0x73584d3a
   1185c:	73d87398 	.word	0x73d87398
   11860:	72987258 	.word	0x72987258
   11864:	721972d8 	.word	0x721972d8
   11868:	731a702a 	.word	0x731a702a
   1186c:	46186822 	.word	0x46186822
   11870:	0280f442 	.word	0x0280f442
   11874:	f2476022 	.word	0xf2476022
   11878:	f0050101 	.word	0xf0050101
   1187c:	bb38febf 	.word	0xbb38febf
   11880:	0200f44f 	.word	0x0200f44f
   11884:	33fff04f 	.word	0x33fff04f
   11888:	46304611 	.word	0x46304611
   1188c:	f9d0f004 	.word	0xf9d0f004
   11890:	b3104604 	.word	0xb3104604
   11894:	2e009a00 	.word	0x2e009a00
   11898:	f4436813 	.word	0xf4436813
   1189c:	60133300 	.word	0x60133300
   118a0:	68139a00 	.word	0x68139a00
   118a4:	0380f423 	.word	0x0380f423
   118a8:	9a006013 	.word	0x9a006013
   118ac:	f4236813 	.word	0xf4236813
   118b0:	60130300 	.word	0x60130300
   118b4:	2300da36 	.word	0x2300da36
   118b8:	603b4620 	.word	0x603b4620
   118bc:	36fff04f 	.word	0x36fff04f
   118c0:	fb66f7fe 	.word	0xfb66f7fe
   118c4:	b0024630 	.word	0xb0024630
   118c8:	87f0e8bd 	.word	0x87f0e8bd
   118cc:	e7e1240c 	.word	0xe7e1240c
   118d0:	f0059801 	.word	0xf0059801
   118d4:	2405fea9 	.word	0x2405fea9
   118d8:	4630e7dc 	.word	0x4630e7dc
   118dc:	fa14f004 	.word	0xfa14f004
   118e0:	6844b150 	.word	0x6844b150
   118e4:	2300b144 	.word	0x2300b144
   118e8:	e7d36043 	.word	0xe7d36043
   118ec:	f7fe2016 	.word	0xf7fe2016
   118f0:	f04ffb4f 	.word	0xf04ffb4f
   118f4:	e7e536ff 	.word	0xe7e536ff
   118f8:	68139a00 	.word	0x68139a00
   118fc:	3300f443 	.word	0x3300f443
   11900:	9a006013 	.word	0x9a006013
   11904:	f4236813 	.word	0xf4236813
   11908:	60130380 	.word	0x60130380
   1190c:	68139a00 	.word	0x68139a00
   11910:	0300f423 	.word	0x0300f423
   11914:	e7d56013 	.word	0xe7d56013
   11918:	f7fe2001 	.word	0xf7fe2001
   1191c:	f04ffb39 	.word	0xf04ffb39
   11920:	e7cf36ff 	.word	0xe7cf36ff
   11924:	f0044630 	.word	0xf0044630
   11928:	e7c4f935 	.word	0xe7c4f935
   1192c:	f7fe2018 	.word	0xf7fe2018
   11930:	f04ffb2f 	.word	0xf04ffb2f
   11934:	e7c536ff 	.word	0xe7c536ff
   11938:	20020274 	.word	0x20020274
   1193c:	000112e5 	.word	0x000112e5
   11940:	20020270 	.word	0x20020270
   11944:	20026c57 	.word	0x20026c57

00011948 <logobj_interface_read>:
   11948:	43f0e92d 	.word	0x43f0e92d
   1194c:	2900b085 	.word	0x2900b085
   11950:	2a00d05e 	.word	0x2a00d05e
   11954:	dd5b4616 	.word	0xdd5b4616
   11958:	4680461f 	.word	0x4680461f
   1195c:	f004460d 	.word	0xf004460d
   11960:	4604f9d3 	.word	0x4604f9d3
   11964:	d0592800 	.word	0xd0592800
   11968:	07ba69c0 	.word	0x07ba69c0
   1196c:	68db6803 	.word	0x68db6803
   11970:	4798d524 	.word	0x4798d524
   11974:	d03b3001 	.word	0xd03b3001
   11978:	69e06823 	.word	0x69e06823
   1197c:	3380f413 	.word	0x3380f413
   11980:	2100d038 	.word	0x2100d038
   11984:	463a6823 	.word	0x463a6823
   11988:	3380f423 	.word	0x3380f423
   1198c:	e9cd6023 	.word	0xe9cd6023
   11990:	e9cd1102 	.word	0xe9cd1102
   11994:	68035600 	.word	0x68035600
   11998:	689b4669 	.word	0x689b4669
   1199c:	46054798 	.word	0x46054798
   119a0:	680369e0 	.word	0x680369e0
   119a4:	479868db 	.word	0x479868db
   119a8:	d0033001 	.word	0xd0033001
   119ac:	f4436823 	.word	0xf4436823
   119b0:	60233380 	.word	0x60233380
   119b4:	b0054628 	.word	0xb0054628
   119b8:	83f0e8bd 	.word	0x83f0e8bd
   119bc:	f0126822 	.word	0xf0126822
   119c0:	d1d65980 	.word	0xd1d65980
   119c4:	1c434798 	.word	0x1c434798
   119c8:	f44fd1d6 	.word	0xf44fd1d6
   119cc:	6a233280 	.word	0x6a233280
   119d0:	2b004611 	.word	0x2b004611
   119d4:	4603bf08 	.word	0x4603bf08
   119d8:	f0044640 	.word	0xf0044640
   119dc:	b158f929 	.word	0xb158f929
   119e0:	35fff04f 	.word	0x35fff04f
   119e4:	fad4f7fe 	.word	0xfad4f7fe
   119e8:	b0054628 	.word	0xb0054628
   119ec:	83f0e8bd 	.word	0x83f0e8bd
   119f0:	e7f52023 	.word	0xe7f52023
   119f4:	e7d4461d 	.word	0xe7d4461d
   119f8:	f0044640 	.word	0xf0044640
   119fc:	4603f985 	.word	0x4603f985
   11a00:	d0b92800 	.word	0xd0b92800
   11a04:	28006840 	.word	0x28006840
   11a08:	f8c3d0b6 	.word	0xf8c3d0b6
   11a0c:	e7e79004 	.word	0xe7e79004
   11a10:	f7fe2016 	.word	0xf7fe2016
   11a14:	f04ffabd 	.word	0xf04ffabd
   11a18:	e7cb35ff 	.word	0xe7cb35ff
   11a1c:	f7fe2009 	.word	0xf7fe2009
   11a20:	f04ffab7 	.word	0xf04ffab7
   11a24:	e7c535ff 	.word	0xe7c535ff

00011a28 <logobj_interface_write>:
   11a28:	41f0e92d 	.word	0x41f0e92d
   11a2c:	2900b082 	.word	0x2900b082
   11a30:	2a04d05b 	.word	0x2a04d05b
   11a34:	461ed159 	.word	0x461ed159
   11a38:	460d4607 	.word	0x460d4607
   11a3c:	f964f004 	.word	0xf964f004
   11a40:	28004604 	.word	0x28004604
   11a44:	07b0d067 	.word	0x07b0d067
   11a48:	6823d526 	.word	0x6823d526
   11a4c:	d55e039b 	.word	0xd55e039b
   11a50:	68232600 	.word	0x68232600
   11a54:	f4232100 	.word	0xf4232100
   11a58:	60233300 	.word	0x60233300
   11a5c:	f8d5a801 	.word	0xf8d5a801
   11a60:	f0058000 	.word	0xf0058000
   11a64:	b9f8fdb3 	.word	0xb9f8fdb3
   11a68:	9b012504 	.word	0x9b012504
   11a6c:	0103f247 	.word	0x0103f247
   11a70:	800cf8c3 	.word	0x800cf8c3
   11a74:	72987258 	.word	0x72987258
   11a78:	721d72d8 	.word	0x721d72d8
   11a7c:	f0054618 	.word	0xf0054618
   11a80:	4680fdbd 	.word	0x4680fdbd
   11a84:	b9cebb40 	.word	0xb9cebb40
   11a88:	68234628 	.word	0x68234628
   11a8c:	3300f443 	.word	0x3300f443
   11a90:	b0026023 	.word	0xb0026023
   11a94:	81f0e8bd 	.word	0x81f0e8bd
   11a98:	00d96823 	.word	0x00d96823
   11a9c:	6823d4d5 	.word	0x6823d4d5
   11aa0:	d536039a 	.word	0xd536039a
   11aa4:	e7d42601 	.word	0xe7d42601
   11aa8:	6823200c 	.word	0x6823200c
   11aac:	3300f443 	.word	0x3300f443
   11ab0:	f7fe6023 	.word	0xf7fe6023
   11ab4:	f04ffa6d 	.word	0xf04ffa6d
   11ab8:	e7ea30ff 	.word	0xe7ea30ff
   11abc:	3280f44f 	.word	0x3280f44f
   11ac0:	33fff04f 	.word	0x33fff04f
   11ac4:	46384611 	.word	0x46384611
   11ac8:	f8b2f004 	.word	0xf8b2f004
   11acc:	6823b198 	.word	0x6823b198
   11ad0:	3300f443 	.word	0x3300f443
   11ad4:	e7ec6023 	.word	0xe7ec6023
   11ad8:	f0059801 	.word	0xf0059801
   11adc:	6823fda5 	.word	0x6823fda5
   11ae0:	f4432005 	.word	0xf4432005
   11ae4:	60233300 	.word	0x60233300
   11ae8:	2016e7e3 	.word	0x2016e7e3
   11aec:	fa50f7fe 	.word	0xfa50f7fe
   11af0:	30fff04f 	.word	0x30fff04f
   11af4:	4638e7cd 	.word	0x4638e7cd
   11af8:	f906f004 	.word	0xf906f004
   11afc:	28004603 	.word	0x28004603
   11b00:	6840d0c2 	.word	0x6840d0c2
   11b04:	d0bf2800 	.word	0xd0bf2800
   11b08:	8004f8c3 	.word	0x8004f8c3
   11b0c:	2073e7df 	.word	0x2073e7df
   11b10:	2009e7cf 	.word	0x2009e7cf
   11b14:	2009e7cd 	.word	0x2009e7cd
   11b18:	fa3af7fe 	.word	0xfa3af7fe
   11b1c:	30fff04f 	.word	0x30fff04f
   11b20:	bf00e7b7 	.word	0xbf00e7b7

00011b24 <logobj_interface_setopt>:
   11b24:	2901b5f0 	.word	0x2901b5f0
   11b28:	d068b085 	.word	0xd068b085
   11b2c:	f240461e 	.word	0xf240461e
   11b30:	42992305 	.word	0x42992305
   11b34:	8095f040 	.word	0x8095f040
   11b38:	46154607 	.word	0x46154607
   11b3c:	f8e4f004 	.word	0xf8e4f004
   11b40:	28004604 	.word	0x28004604
   11b44:	80b2f000 	.word	0x80b2f000
   11b48:	d0192d01 	.word	0xd0192d01
   11b4c:	d0102d02 	.word	0xd0102d02
   11b50:	6803252a 	.word	0x6803252a
   11b54:	0380f423 	.word	0x0380f423
   11b58:	68236023 	.word	0x68236023
   11b5c:	f4234628 	.word	0xf4234628
   11b60:	60230300 	.word	0x60230300
   11b64:	fa14f7fe 	.word	0xfa14f7fe
   11b68:	35fff04f 	.word	0x35fff04f
   11b6c:	b0054628 	.word	0xb0054628
   11b70:	b116bdf0 	.word	0xb116bdf0
   11b74:	2b019b0a 	.word	0x2b019b0a
   11b78:	6823d049 	.word	0x6823d049
   11b7c:	e7e92516 	.word	0xe7e92516
   11b80:	d0fa2e00 	.word	0xd0fa2e00
   11b84:	2b049b0a 	.word	0x2b049b0a
   11b88:	2100d1f7 	.word	0x2100d1f7
   11b8c:	f005a803 	.word	0xf005a803
   11b90:	4605fd1d 	.word	0x4605fd1d
   11b94:	d16a2800 	.word	0xd16a2800
   11b98:	22089803 	.word	0x22089803
   11b9c:	300c4629 	.word	0x300c4629
   11ba0:	fb47f012 	.word	0xfb47f012
   11ba4:	46319803 	.word	0x46319803
   11ba8:	300c9a0a 	.word	0x300c9a0a
   11bac:	fb14f012 	.word	0xfb14f012
   11bb0:	98032308 	.word	0x98032308
   11bb4:	0102f247 	.word	0x0102f247
   11bb8:	72457203 	.word	0x72457203
   11bbc:	72c57285 	.word	0x72c57285
   11bc0:	f4436823 	.word	0xf4436823
   11bc4:	60230380 	.word	0x60230380
   11bc8:	fd18f005 	.word	0xfd18f005
   11bcc:	d1512800 	.word	0xd1512800
   11bd0:	0200f44f 	.word	0x0200f44f
   11bd4:	33fff04f 	.word	0x33fff04f
   11bd8:	46384611 	.word	0x46384611
   11bdc:	f828f004 	.word	0xf828f004
   11be0:	28004605 	.word	0x28004605
   11be4:	4638d13b 	.word	0x4638d13b
   11be8:	f88ef004 	.word	0xf88ef004
   11bec:	d04f2800 	.word	0xd04f2800
   11bf0:	2b006843 	.word	0x2b006843
   11bf4:	2200d04c 	.word	0x2200d04c
   11bf8:	6042461d 	.word	0x6042461d
   11bfc:	9c0ae02f 	.word	0x9c0ae02f
   11c00:	f0049400 	.word	0xf0049400
   11c04:	4605f8a9 	.word	0x4605f8a9
   11c08:	b0054628 	.word	0xb0054628
   11c0c:	2100bdf0 	.word	0x2100bdf0
   11c10:	7835a803 	.word	0x7835a803
   11c14:	fcdaf005 	.word	0xfcdaf005
   11c18:	2d01bb48 	.word	0x2d01bb48
   11c1c:	4b26bf08 	.word	0x4b26bf08
   11c20:	0204f04f 	.word	0x0204f04f
   11c24:	701dbf08 	.word	0x701dbf08
   11c28:	98032300 	.word	0x98032300
   11c2c:	0101f247 	.word	0x0101f247
   11c30:	60c57243 	.word	0x60c57243
   11c34:	72c37283 	.word	0x72c37283
   11c38:	68237202 	.word	0x68237202
   11c3c:	0380f443 	.word	0x0380f443
   11c40:	f0056023 	.word	0xf0056023
   11c44:	4606fcdb 	.word	0x4606fcdb
   11c48:	f44fb9a0 	.word	0xf44fb9a0
   11c4c:	f04f0200 	.word	0xf04f0200
   11c50:	461133ff 	.word	0x461133ff
   11c54:	f0034638 	.word	0xf0034638
   11c58:	4605ffeb 	.word	0x4605ffeb
   11c5c:	6823b180 	.word	0x6823b180
   11c60:	202ae778 	.word	0x202ae778
   11c64:	f994f7fe 	.word	0xf994f7fe
   11c68:	35fff04f 	.word	0x35fff04f
   11c6c:	6823e77e 	.word	0x6823e77e
   11c70:	e76f250c 	.word	0xe76f250c
   11c74:	f0059803 	.word	0xf0059803
   11c78:	2505fcd7 	.word	0x2505fcd7
   11c7c:	e7696823 	.word	0xe7696823
   11c80:	f0044638 	.word	0xf0044638
   11c84:	b140f841 	.word	0xb140f841
   11c88:	b1356845 	.word	0xb1356845
   11c8c:	e7e66046 	.word	0xe7e66046
   11c90:	22044631 	.word	0x22044631
   11c94:	f0124809 	.word	0xf0124809
   11c98:	6823fa9f 	.word	0x6823fa9f
   11c9c:	0380f423 	.word	0x0380f423
   11ca0:	68236023 	.word	0x68236023
   11ca4:	0300f423 	.word	0x0300f423
   11ca8:	e75f6023 	.word	0xe75f6023
   11cac:	f7fe2009 	.word	0xf7fe2009
   11cb0:	f04ff96f 	.word	0xf04ff96f
   11cb4:	e75935ff 	.word	0xe75935ff
   11cb8:	20026c57 	.word	0x20026c57
   11cbc:	20020270 	.word	0x20020270

00011cc0 <logobj_interface_getopt>:
   11cc0:	2901b5f0 	.word	0x2901b5f0
   11cc4:	9e08b083 	.word	0x9e08b083
   11cc8:	461fd030 	.word	0x461fd030
   11ccc:	2305f240 	.word	0x2305f240
   11cd0:	d1344299 	.word	0xd1344299
   11cd4:	f0044615 	.word	0xf0044615
   11cd8:	2800f817 	.word	0x2800f817
   11cdc:	2d01d037 	.word	0x2d01d037
   11ce0:	2d02d015 	.word	0x2d02d015
   11ce4:	b387d10b 	.word	0xb387d10b
   11ce8:	b3736833 	.word	0xb3736833
   11cec:	22012300 	.word	0x22012300
   11cf0:	491a4618 	.word	0x491a4618
   11cf4:	70397809 	.word	0x70397809
   11cf8:	b0036032 	.word	0xb0036032
   11cfc:	2009bdf0 	.word	0x2009bdf0
   11d00:	f946f7fe 	.word	0xf946f7fe
   11d04:	33fff04f 	.word	0x33fff04f
   11d08:	b0034618 	.word	0xb0034618
   11d0c:	b1e7bdf0 	.word	0xb1e7bdf0
   11d10:	2b036833 	.word	0x2b036833
   11d14:	4638d919 	.word	0x4638d919
   11d18:	49112204 	.word	0x49112204
   11d1c:	fa5cf012 	.word	0xfa5cf012
   11d20:	22042300 	.word	0x22042300
   11d24:	60324618 	.word	0x60324618
   11d28:	bdf0b003 	.word	0xbdf0b003
   11d2c:	f0049600 	.word	0xf0049600
   11d30:	4603f849 	.word	0x4603f849
   11d34:	d1e32800 	.word	0xd1e32800
   11d38:	b0034618 	.word	0xb0034618
   11d3c:	202abdf0 	.word	0x202abdf0
   11d40:	f926f7fe 	.word	0xf926f7fe
   11d44:	33fff04f 	.word	0x33fff04f
   11d48:	2016e7de 	.word	0x2016e7de
   11d4c:	2009e7d8 	.word	0x2009e7d8
   11d50:	f91ef7fe 	.word	0xf91ef7fe
   11d54:	33fff04f 	.word	0x33fff04f
   11d58:	bf00e7d6 	.word	0xbf00e7d6
   11d5c:	20026c58 	.word	0x20026c58
   11d60:	20020270 	.word	0x20020270

00011d64 <logobj_interface_close>:
   11d64:	4604b510 	.word	0x4604b510
   11d68:	ffcef003 	.word	0xffcef003
   11d6c:	4620b138 	.word	0x4620b138
   11d70:	ff10f003 	.word	0xff10f003
   11d74:	4a052300 	.word	0x4a052300
   11d78:	60134618 	.word	0x60134618
   11d7c:	2009bd10 	.word	0x2009bd10
   11d80:	f906f7fe 	.word	0xf906f7fe
   11d84:	30fff04f 	.word	0x30fff04f
   11d88:	bf00bd10 	.word	0xbf00bd10
   11d8c:	20020274 	.word	0x20020274

00011d90 <transport_reset>:
   11d90:	47702000 	.word	0x47702000

00011d94 <transport_data_free>:
   11d94:	e9d34b0b 	.word	0xe9d34b0b
   11d98:	44132300 	.word	0x44132300
   11d9c:	d20d4298 	.word	0xd20d4298
   11da0:	d80b4282 	.word	0xd80b4282
   11da4:	4604b510 	.word	0x4604b510
   11da8:	feecf005 	.word	0xfeecf005
   11dac:	4a06b140 	.word	0x4a06b140
   11db0:	60026084 	.word	0x60026084
   11db4:	4010e8bd 	.word	0x4010e8bd
   11db8:	be2cf005 	.word	0xbe2cf005
   11dbc:	b9eef00b 	.word	0xb9eef00b
   11dc0:	bf00bd10 	.word	0xbf00bd10
   11dc4:	20020278 	.word	0x20020278
   11dc8:	00020001 	.word	0x00020001

00011dcc <rpc_transport_ipc_init>:
   11dcc:	d02b2800 	.word	0xd02b2800
   11dd0:	b089b530 	.word	0xb089b530
   11dd4:	4669aa01 	.word	0x4669aa01
   11dd8:	f0054604 	.word	0xf0054604
   11ddc:	4603fd31 	.word	0x4603fd31
   11de0:	4a13b140 	.word	0x4a13b140
   11de4:	0028f104 	.word	0x0028f104
   11de8:	e882c803 	.word	0xe882c803
   11dec:	46180003 	.word	0x46180003
   11df0:	bd30b009 	.word	0xbd30b009
   11df4:	1200e9dd 	.word	0x1200e9dd
   11df8:	f0004620 	.word	0xf0004620
   11dfc:	4603f9ab 	.word	0x4603f9ab
   11e00:	d1ee2800 	.word	0xd1ee2800
   11e04:	490c4b0b 	.word	0x490c4b0b
   11e08:	4a0d480c 	.word	0x4a0d480c
   11e0c:	4d0d9303 	.word	0x4d0d9303
   11e10:	91044b0d 	.word	0x91044b0d
   11e14:	490d9005 	.word	0x490d9005
   11e18:	9307a802 	.word	0x9307a802
   11e1c:	92029506 	.word	0x92029506
   11e20:	fa3af00a 	.word	0xfa3af00a
   11e24:	e7dc4603 	.word	0xe7dc4603
   11e28:	4618230e 	.word	0x4618230e
   11e2c:	bf004770 	.word	0xbf004770
   11e30:	20020278 	.word	0x20020278
   11e34:	00017b15 	.word	0x00017b15
   11e38:	00017be5 	.word	0x00017be5
   11e3c:	00012771 	.word	0x00012771
   11e40:	00017a15 	.word	0x00017a15
   11e44:	00011d95 	.word	0x00011d95
   11e48:	00011d91 	.word	0x00011d91
   11e4c:	20020280 	.word	0x20020280

00011e50 <rpc_transport_rx_handle>:
   11e50:	b508b160 	.word	0xb508b160
   11e54:	b2db6843 	.word	0xb2db6843
   11e58:	d00e2b02 	.word	0xd00e2b02
   11e5c:	0c1b6803 	.word	0x0c1b6803
   11e60:	d0052b02 	.word	0xd0052b02
   11e64:	d00e2b04 	.word	0xd00e2b04
   11e68:	bd082000 	.word	0xbd082000
   11e6c:	47702000 	.word	0x47702000
   11e70:	f00b6880 	.word	0xf00b6880
   11e74:	2000f993 	.word	0x2000f993
   11e78:	4601bd08 	.word	0x4601bd08
   11e7c:	4008e8bd 	.word	0x4008e8bd
   11e80:	f00a4803 	.word	0xf00a4803
   11e84:	4802b8fb 	.word	0x4802b8fb
   11e88:	fa66f00a 	.word	0xfa66f00a
   11e8c:	bd082000 	.word	0xbd082000
   11e90:	20020280 	.word	0x20020280
   11e94:	bf004770 	.word	0xbf004770

00011e98 <rpc_transport_ipc_fault_handler>:
   11e98:	b916f000 	.word	0xb916f000

00011e9c <nrf_socket>:
   11e9c:	4604b570 	.word	0x4604b570
   11ea0:	4616460d 	.word	0x4616460d
   11ea4:	f8bef007 	.word	0xf8bef007
   11ea8:	6803b130 	.word	0x6803b130
   11eac:	46294632 	.word	0x46294632
   11eb0:	e8bd4620 	.word	0xe8bd4620
   11eb4:	47184070 	.word	0x47184070
   11eb8:	30fff04f 	.word	0x30fff04f
   11ebc:	bf00bd70 	.word	0xbf00bd70

00011ec0 <nrf_close>:
   11ec0:	4604b510 	.word	0x4604b510
   11ec4:	f902f007 	.word	0xf902f007
   11ec8:	6843b120 	.word	0x6843b120
   11ecc:	e8bd4620 	.word	0xe8bd4620
   11ed0:	47184010 	.word	0x47184010
   11ed4:	30fff04f 	.word	0x30fff04f
   11ed8:	bf00bd10 	.word	0xbf00bd10

00011edc <nrf_sendto>:
   11edc:	47f0e92d 	.word	0x47f0e92d
   11ee0:	e9dd460d 	.word	0xe9dd460d
   11ee4:	46168908 	.word	0x46168908
   11ee8:	4604461f 	.word	0x4604461f
   11eec:	f8eef007 	.word	0xf8eef007
   11ef0:	e9cdb158 	.word	0xe9cdb158
   11ef4:	f8d08908 	.word	0xf8d08908
   11ef8:	463be008 	.word	0x463be008
   11efc:	46294632 	.word	0x46294632
   11f00:	46f44620 	.word	0x46f44620
   11f04:	47f0e8bd 	.word	0x47f0e8bd
   11f08:	f04f4760 	.word	0xf04f4760
   11f0c:	e8bd30ff 	.word	0xe8bd30ff
   11f10:	bf0087f0 	.word	0xbf0087f0

00011f14 <nrf_send>:
   11f14:	41f0e92d 	.word	0x41f0e92d
   11f18:	460eb082 	.word	0x460eb082
   11f1c:	46984617 	.word	0x46984617
   11f20:	f0074605 	.word	0xf0074605
   11f24:	b160f8d3 	.word	0xb160f8d3
   11f28:	20004604 	.word	0x20004604
   11f2c:	0000e9cd 	.word	0x0000e9cd
   11f30:	463a4643 	.word	0x463a4643
   11f34:	46284631 	.word	0x46284631
   11f38:	47a068a4 	.word	0x47a068a4
   11f3c:	e8bdb002 	.word	0xe8bdb002
   11f40:	f04f81f0 	.word	0xf04f81f0
   11f44:	e7f930ff 	.word	0xe7f930ff

00011f48 <nrf_recvfrom>:
   11f48:	47f0e92d 	.word	0x47f0e92d
   11f4c:	e9dd460d 	.word	0xe9dd460d
   11f50:	46168908 	.word	0x46168908
   11f54:	4604461f 	.word	0x4604461f
   11f58:	f8b8f007 	.word	0xf8b8f007
   11f5c:	e9cdb158 	.word	0xe9cdb158
   11f60:	f8d08908 	.word	0xf8d08908
   11f64:	463be00c 	.word	0x463be00c
   11f68:	46294632 	.word	0x46294632
   11f6c:	46f44620 	.word	0x46f44620
   11f70:	47f0e8bd 	.word	0x47f0e8bd
   11f74:	f04f4760 	.word	0xf04f4760
   11f78:	e8bd30ff 	.word	0xe8bd30ff
   11f7c:	bf0087f0 	.word	0xbf0087f0

00011f80 <nrf_recv>:
   11f80:	41f0e92d 	.word	0x41f0e92d
   11f84:	460eb082 	.word	0x460eb082
   11f88:	46984617 	.word	0x46984617
   11f8c:	f0074605 	.word	0xf0074605
   11f90:	b160f89d 	.word	0xb160f89d
   11f94:	20004604 	.word	0x20004604
   11f98:	0000e9cd 	.word	0x0000e9cd
   11f9c:	463a4643 	.word	0x463a4643
   11fa0:	46284631 	.word	0x46284631
   11fa4:	47a068e4 	.word	0x47a068e4
   11fa8:	e8bdb002 	.word	0xe8bdb002
   11fac:	f04f81f0 	.word	0xf04f81f0
   11fb0:	e7f930ff 	.word	0xe7f930ff

00011fb4 <nrf_connect>:
   11fb4:	460db570 	.word	0x460db570
   11fb8:	46044616 	.word	0x46044616
   11fbc:	f886f007 	.word	0xf886f007
   11fc0:	6943b130 	.word	0x6943b130
   11fc4:	46294632 	.word	0x46294632
   11fc8:	e8bd4620 	.word	0xe8bd4620
   11fcc:	47184070 	.word	0x47184070
   11fd0:	30fff04f 	.word	0x30fff04f
   11fd4:	bf00bd70 	.word	0xbf00bd70

00011fd8 <nrf_listen>:
   11fd8:	460db570 	.word	0x460db570
   11fdc:	f0074604 	.word	0xf0074604
   11fe0:	b128f875 	.word	0xb128f875
   11fe4:	46296983 	.word	0x46296983
   11fe8:	e8bd4620 	.word	0xe8bd4620
   11fec:	47184070 	.word	0x47184070
   11ff0:	30fff04f 	.word	0x30fff04f
   11ff4:	bf00bd70 	.word	0xbf00bd70

00011ff8 <nrf_accept>:
   11ff8:	41f0e92d 	.word	0x41f0e92d
   11ffc:	4616460d 	.word	0x4616460d
   12000:	f0074604 	.word	0xf0074604
   12004:	b140f863 	.word	0xb140f863
   12008:	463269c7 	.word	0x463269c7
   1200c:	46204629 	.word	0x46204629
   12010:	e8bd46bc 	.word	0xe8bd46bc
   12014:	230041f0 	.word	0x230041f0
   12018:	f04f4760 	.word	0xf04f4760
   1201c:	e8bd30ff 	.word	0xe8bd30ff
   12020:	bf0081f0 	.word	0xbf0081f0

00012024 <nrf_bind>:
   12024:	460db570 	.word	0x460db570
   12028:	46044616 	.word	0x46044616
   1202c:	f84ef007 	.word	0xf84ef007
   12030:	6903b130 	.word	0x6903b130
   12034:	46294632 	.word	0x46294632
   12038:	e8bd4620 	.word	0xe8bd4620
   1203c:	47184070 	.word	0x47184070
   12040:	30fff04f 	.word	0x30fff04f
   12044:	bf00bd70 	.word	0xbf00bd70

00012048 <nrf_setsockopt>:
   12048:	41f0e92d 	.word	0x41f0e92d
   1204c:	8018f8dd 	.word	0x8018f8dd
   12050:	4616460d 	.word	0x4616460d
   12054:	4604461f 	.word	0x4604461f
   12058:	f838f007 	.word	0xf838f007
   1205c:	f8cdb158 	.word	0xf8cdb158
   12060:	f8d08018 	.word	0xf8d08018
   12064:	463be020 	.word	0x463be020
   12068:	46294632 	.word	0x46294632
   1206c:	46f44620 	.word	0x46f44620
   12070:	41f0e8bd 	.word	0x41f0e8bd
   12074:	f04f4760 	.word	0xf04f4760
   12078:	e8bd30ff 	.word	0xe8bd30ff
   1207c:	bf0081f0 	.word	0xbf0081f0

00012080 <nrf_getsockopt>:
   12080:	41f0e92d 	.word	0x41f0e92d
   12084:	8018f8dd 	.word	0x8018f8dd
   12088:	4616460d 	.word	0x4616460d
   1208c:	4604461f 	.word	0x4604461f
   12090:	f81cf007 	.word	0xf81cf007
   12094:	f8cdb158 	.word	0xf8cdb158
   12098:	f8d08018 	.word	0xf8d08018
   1209c:	463be024 	.word	0x463be024
   120a0:	46294632 	.word	0x46294632
   120a4:	46f44620 	.word	0x46f44620
   120a8:	41f0e8bd 	.word	0x41f0e8bd
   120ac:	f04f4760 	.word	0xf04f4760
   120b0:	e8bd30ff 	.word	0xe8bd30ff
   120b4:	bf0081f0 	.word	0xbf0081f0

000120b8 <nrf_getaddrinfo>:
   120b8:	b8f8f00d 	.word	0xb8f8f00d

000120bc <nrf_freeaddrinfo>:
   120bc:	b8f8f00d 	.word	0xb8f8f00d

000120c0 <nrf_poll>:
   120c0:	b8f8f00d 	.word	0xb8f8f00d

000120c4 <nrf_fcntl>:
   120c4:	b950f00d 	.word	0xb950f00d

000120c8 <bsd_platform_error_handler>:
   120c8:	f7fbb508 	.word	0xf7fbb508
   120cc:	bd08f973 	.word	0xbd08f973

000120d0 <bsd_init>:
   120d0:	4c06b510 	.word	0x4c06b510
   120d4:	b92b7823 	.word	0xb92b7823
   120d8:	ff38f006 	.word	0xff38f006
   120dc:	2301b908 	.word	0x2301b908
   120e0:	bd107023 	.word	0xbd107023
   120e4:	30fff04f 	.word	0x30fff04f
   120e8:	bf00bd10 	.word	0xbf00bd10
   120ec:	20026c59 	.word	0x20026c59

000120f0 <symbol_000fa2a>:
   120f0:	2300b110 	.word	0x2300b110
   120f4:	3300e9c0 	.word	0x3300e9c0
   120f8:	bf004770 	.word	0xbf004770

000120fc <symbol_00066b4>:
   120fc:	d0052802 	.word	0xd0052802
   12100:	28034b03 	.word	0x28034b03
   12104:	4618bf0c 	.word	0x4618bf0c
   12108:	47702000 	.word	0x47702000
   1210c:	47704801 	.word	0x47704801
   12110:	00025820 	.word	0x00025820
   12114:	000257f0 	.word	0x000257f0

00012118 <symbol_000194a>:
   12118:	b159b160 	.word	0xb159b160
   1211c:	6806b570 	.word	0x6806b570
   12120:	6a4bb966 	.word	0x6a4bb966
   12124:	460d4604 	.word	0x460d4604
   12128:	60604798 	.word	0x60604798
   1212c:	6025b120 	.word	0x6025b120
   12130:	bd704630 	.word	0xbd704630
   12134:	47704802 	.word	0x47704802
   12138:	bd704802 	.word	0xbd704802
   1213c:	bd704800 	.word	0xbd704800
   12140:	ffffc180 	.word	0xffffc180
   12144:	ffffc080 	.word	0xffffc080

00012148 <symbol_00005ae>:
   12148:	6800b110 	.word	0x6800b110
   1214c:	7800b100 	.word	0x7800b100
   12150:	bf004770 	.word	0xbf004770

00012154 <rpc_transport_ipc_rx_init>:
   12154:	f0002800 	.word	0xf0002800
   12158:	e92d80ff 	.word	0xe92d80ff
   1215c:	68054ff0 	.word	0x68054ff0
   12160:	2d00b095 	.word	0x2d00b095
   12164:	80eef000 	.word	0x80eef000
   12168:	2b006883 	.word	0x2b006883
   1216c:	80eaf000 	.word	0x80eaf000
   12170:	2f006907 	.word	0x2f006907
   12174:	80e6f000 	.word	0x80e6f000
   12178:	2c006a84 	.word	0x2c006a84
   1217c:	80e2f000 	.word	0x80e2f000
   12180:	2c1b6844 	.word	0x2c1b6844
   12184:	80e3f240 	.word	0x80e3f240
   12188:	2c0b68c4 	.word	0x2c0b68c4
   1218c:	80dff240 	.word	0x80dff240
   12190:	e014f8d0 	.word	0xe014f8d0
   12194:	0f17f1be 	.word	0x0f17f1be
   12198:	80d9f240 	.word	0x80d9f240
   1219c:	46042600 	.word	0x46042600
   121a0:	e9cd486f 	.word	0xe9cd486f
   121a4:	f8df1200 	.word	0xf8df1200
   121a8:	496ea1d8 	.word	0x496ea1d8
   121ac:	6ba08006 	.word	0x6ba08006
   121b0:	c1d0f8df 	.word	0xc1d0f8df
   121b4:	81d0f8df 	.word	0x81d0f8df
   121b8:	b1d0f8df 	.word	0xb1d0f8df
   121bc:	91d0f8df 	.word	0x91d0f8df
   121c0:	600e4672 	.word	0x600e4672
   121c4:	0000f8ca 	.word	0x0000f8ca
   121c8:	46384631 	.word	0x46384631
   121cc:	6000f8cc 	.word	0x6000f8cc
   121d0:	3000f8cb 	.word	0x3000f8cb
   121d4:	6000f8c8 	.word	0x6000f8c8
   121d8:	6000f8c9 	.word	0x6000f8c9
   121dc:	f829f012 	.word	0xf829f012
   121e0:	463869e3 	.word	0x463869e3
   121e4:	69a3603b 	.word	0x69a3603b
   121e8:	f001607b 	.word	0xf001607b
   121ec:	2201fd45 	.word	0x2201fd45
   121f0:	0c04f04f 	.word	0x0c04f04f
   121f4:	495d4b5c 	.word	0x495d4b5c
   121f8:	5610f8c3 	.word	0x5610f8c3
   121fc:	20806809 	.word	0x20806809
   12200:	495b9104 	.word	0x495b9104
   12204:	e010f8dd 	.word	0xe010f8dd
   12208:	6614f8c3 	.word	0x6614f8c3
   1220c:	702e6809 	.word	0x702e6809
   12210:	706e9103 	.word	0x706e9103
   12214:	70aa70ee 	.word	0x70aa70ee
   12218:	6aa19903 	.word	0x6aa19903
   1221c:	e000f8db 	.word	0xe000f8db
   12220:	6ae16069 	.word	0x6ae16069
   12224:	60a99c01 	.word	0x60a99c01
   12228:	9c0060ec 	.word	0x9c0060ec
   1222c:	61af4951 	.word	0x61af4951
   12230:	e014f8c5 	.word	0xe014f8c5
   12234:	f8c3612c 	.word	0xf8c3612c
   12238:	680c2590 	.word	0x680c2590
   1223c:	6192f5a1 	.word	0x6192f5a1
   12240:	9c059405 	.word	0x9c059405
   12244:	c598f8c3 	.word	0xc598f8c3
   12248:	4498f8d1 	.word	0x4498f8d1
   1224c:	6780f44f 	.word	0x6780f44f
   12250:	9c069406 	.word	0x9c069406
   12254:	f8c32410 	.word	0xf8c32410
   12258:	f8d145a0 	.word	0xf8d145a0
   1225c:	4d4644a0 	.word	0x4d4644a0
   12260:	9c079407 	.word	0x9c079407
   12264:	f8c32440 	.word	0xf8c32440
   12268:	f8d145a8 	.word	0xf8d145a8
   1226c:	940844a8 	.word	0x940844a8
   12270:	f8c39c08 	.word	0xf8c39c08
   12274:	f8d105ac 	.word	0xf8d105ac
   12278:	900904ac 	.word	0x900904ac
   1227c:	f8c39809 	.word	0xf8c39809
   12280:	68086100 	.word	0x68086100
   12284:	980a900a 	.word	0x980a900a
   12288:	6108f8c3 	.word	0x6108f8c3
   1228c:	900b6888 	.word	0x900b6888
   12290:	f8c3980b 	.word	0xf8c3980b
   12294:	69086110 	.word	0x69086110
   12298:	980c900c 	.word	0x980c900c
   1229c:	6118f8c3 	.word	0x6118f8c3
   122a0:	900d6988 	.word	0x900d6988
   122a4:	f8c3980d 	.word	0xf8c3980d
   122a8:	69c8611c 	.word	0x69c8611c
   122ac:	7101f501 	.word	0x7101f501
   122b0:	980e900e 	.word	0x980e900e
   122b4:	0304f8d3 	.word	0x0304f8d3
   122b8:	f8c34310 	.word	0xf8c34310
   122bc:	680c0304 	.word	0x680c0304
   122c0:	940f482e 	.word	0x940f482e
   122c4:	f8d39c0f 	.word	0xf8d39c0f
   122c8:	ea444304 	.word	0xea444304
   122cc:	f8c3040c 	.word	0xf8c3040c
   122d0:	680c4304 	.word	0x680c4304
   122d4:	9c109410 	.word	0x9c109410
   122d8:	4304f8d3 	.word	0x4304f8d3
   122dc:	0410f044 	.word	0x0410f044
   122e0:	4304f8c3 	.word	0x4304f8c3
   122e4:	9411680c 	.word	0x9411680c
   122e8:	f8d39c11 	.word	0xf8d39c11
   122ec:	f0444304 	.word	0xf0444304
   122f0:	f8c30440 	.word	0xf8c30440
   122f4:	680c4304 	.word	0x680c4304
   122f8:	9c129412 	.word	0x9c129412
   122fc:	4304f8d3 	.word	0x4304f8d3
   12300:	0480f044 	.word	0x0480f044
   12304:	4304f8c3 	.word	0x4304f8c3
   12308:	3000f8da 	.word	0x3000f8da
   1230c:	015b6809 	.word	0x015b6809
   12310:	b2db9113 	.word	0xb2db9113
   12314:	f8c89913 	.word	0xf8c89913
   12318:	f8802000 	.word	0xf8802000
   1231c:	f8c0332a 	.word	0xf8c0332a
   12320:	60477184 	.word	0x60477184
   12324:	f8c59602 	.word	0xf8c59602
   12328:	f8d56610 	.word	0xf8d56610
   1232c:	93023610 	.word	0x93023610
   12330:	f8d89b02 	.word	0xf8d89b02
   12334:	2b013000 	.word	0x2b013000
   12338:	f8d9d0fb 	.word	0xf8d9d0fb
   1233c:	b0150000 	.word	0xb0150000
   12340:	8ff0e8bd 	.word	0x8ff0e8bd
   12344:	000ef24c 	.word	0x000ef24c
   12348:	e8bdb015 	.word	0xe8bdb015
   1234c:	f24c8ff0 	.word	0xf24c8ff0
   12350:	b0150009 	.word	0xb0150009
   12354:	8ff0e8bd 	.word	0x8ff0e8bd
   12358:	000ef24c 	.word	0x000ef24c
   1235c:	bf004770 	.word	0xbf004770
   12360:	20025c28 	.word	0x20025c28
   12364:	20020290 	.word	0x20020290
   12368:	4002a000 	.word	0x4002a000
   1236c:	4002a610 	.word	0x4002a610
   12370:	4002a614 	.word	0x4002a614
   12374:	4002a590 	.word	0x4002a590
   12378:	40005000 	.word	0x40005000
   1237c:	e000e100 	.word	0xe000e100
   12380:	20020288 	.word	0x20020288
   12384:	20020294 	.word	0x20020294
   12388:	2002028c 	.word	0x2002028c
   1238c:	20020298 	.word	0x20020298
   12390:	20020284 	.word	0x20020284

00012394 <IPC_IRQHandler>:
   12394:	4ff0e92d 	.word	0x4ff0e92d
   12398:	6580f44f 	.word	0x6580f44f
   1239c:	b0874ca7 	.word	0xb0874ca7
   123a0:	5084f8c4 	.word	0x5084f8c4
   123a4:	8f4ff3bf 	.word	0x8f4ff3bf
   123a8:	8f6ff3bf 	.word	0x8f6ff3bf
   123ac:	f8c44ea4 	.word	0xf8c44ea4
   123b0:	f8d65184 	.word	0xf8d65184
   123b4:	061f330c 	.word	0x061f330c
   123b8:	80c8f100 	.word	0x80c8f100
   123bc:	f8d34ba0 	.word	0xf8d34ba0
   123c0:	07d0230c 	.word	0x07d0230c
   123c4:	80d4f100 	.word	0x80d4f100
   123c8:	230cf8d3 	.word	0x230cf8d3
   123cc:	0240f012 	.word	0x0240f012
   123d0:	80b6f040 	.word	0x80b6f040
   123d4:	130cf8d3 	.word	0x130cf8d3
   123d8:	f1000749 	.word	0xf1000749
   123dc:	f8d380e6 	.word	0xf8d380e6
   123e0:	06da330c 	.word	0x06da330c
   123e4:	809df140 	.word	0x809df140
   123e8:	4a952100 	.word	0x4a952100
   123ec:	f8c24b95 	.word	0xf8c24b95
   123f0:	681b1110 	.word	0x681b1110
   123f4:	9b049304 	.word	0x9b049304
   123f8:	8270f8df 	.word	0x8270f8df
   123fc:	f8df4f92 	.word	0xf8df4f92
   12400:	f8d89270 	.word	0xf8d89270
   12404:	f8daa000 	.word	0xf8daa000
   12408:	29001000 	.word	0x29001000
   1240c:	2200d03f 	.word	0x2200d03f
   12410:	e0024614 	.word	0xe0024614
   12414:	428c3401 	.word	0x428c3401
   12418:	eb0ad227 	.word	0xeb0ad227
   1241c:	68ab05c4 	.word	0x68ab05c4
   12420:	d0f72b00 	.word	0xd0f72b00
   12424:	b2f6686e 	.word	0xb2f6686e
   12428:	d1f32e01 	.word	0xd1f32e01
   1242c:	f8b96868 	.word	0xf8b96868
   12430:	ebb33000 	.word	0xebb33000
   12434:	d1ed4f10 	.word	0xd1ed4f10
   12438:	3301686a 	.word	0x3301686a
   1243c:	02fff022 	.word	0x02fff022
   12440:	0202f042 	.word	0x0202f042
   12444:	68a8606a 	.word	0x68a8606a
   12448:	3000f8a9 	.word	0x3000f8a9
   1244c:	fd00f7ff 	.word	0xfd00f7ff
   12450:	b9284632 	.word	0xb9284632
   12454:	f023686b 	.word	0xf023686b
   12458:	f04303ff 	.word	0xf04303ff
   1245c:	606b0303 	.word	0x606b0303
   12460:	1000f8da 	.word	0x1000f8da
   12464:	428c3401 	.word	0x428c3401
   12468:	2a00d3d7 	.word	0x2a00d3d7
   1246c:	b171d1cd 	.word	0xb171d1cd
   12470:	eb0a4613 	.word	0xeb0a4613
   12474:	689002c3 	.word	0x689002c3
   12478:	b1303301 	.word	0xb1303301
   1247c:	b004f8d2 	.word	0xb004f8d2
   12480:	fb8bfa5f 	.word	0xfb8bfa5f
   12484:	0f01f1bb 	.word	0x0f01f1bb
   12488:	428bd003 	.word	0x428bd003
   1248c:	f04fd1f1 	.word	0xf04fd1f1
   12490:	f8d70b00 	.word	0xf8d70b00
   12494:	f8daa000 	.word	0xf8daa000
   12498:	2a002000 	.word	0x2a002000
   1249c:	2100d03d 	.word	0x2100d03d
   124a0:	e002460c 	.word	0xe002460c
   124a4:	42943401 	.word	0x42943401
   124a8:	eb0ad227 	.word	0xeb0ad227
   124ac:	68ab05c4 	.word	0x68ab05c4
   124b0:	d0f72b00 	.word	0xd0f72b00
   124b4:	b2f6686e 	.word	0xb2f6686e
   124b8:	d1f32e01 	.word	0xd1f32e01
   124bc:	f8b96868 	.word	0xf8b96868
   124c0:	ebb33000 	.word	0xebb33000
   124c4:	d1ed4f10 	.word	0xd1ed4f10
   124c8:	3301686a 	.word	0x3301686a
   124cc:	02fff022 	.word	0x02fff022
   124d0:	0202f042 	.word	0x0202f042
   124d4:	68a8606a 	.word	0x68a8606a
   124d8:	3000f8a9 	.word	0x3000f8a9
   124dc:	fcb8f7ff 	.word	0xfcb8f7ff
   124e0:	b9284631 	.word	0xb9284631
   124e4:	f022686a 	.word	0xf022686a
   124e8:	f04303ff 	.word	0xf04303ff
   124ec:	606b0303 	.word	0x606b0303
   124f0:	2000f8da 	.word	0x2000f8da
   124f4:	42943401 	.word	0x42943401
   124f8:	2900d3d7 	.word	0x2900d3d7
   124fc:	b162d1cd 	.word	0xb162d1cd
   12500:	eb0a460b 	.word	0xeb0a460b
   12504:	688801c3 	.word	0x688801c3
   12508:	b1203301 	.word	0xb1203301
   1250c:	b2c96849 	.word	0xb2c96849
   12510:	f43f2901 	.word	0xf43f2901
   12514:	4293af76 	.word	0x4293af76
   12518:	f1bbd1f3 	.word	0xf1bbd1f3
   1251c:	f47f0f00 	.word	0xf47f0f00
   12520:	f44faf70 	.word	0xf44faf70
   12524:	4b496180 	.word	0x4b496180
   12528:	681b4a44 	.word	0x681b4a44
   1252c:	b2db015b 	.word	0xb2db015b
   12530:	332af882 	.word	0x332af882
   12534:	1184f8c2 	.word	0x1184f8c2
   12538:	b0076051 	.word	0xb0076051
   1253c:	8ff0e8bd 	.word	0x8ff0e8bd
   12540:	4b432206 	.word	0x4b432206
   12544:	b007601a 	.word	0xb007601a
   12548:	8ff0e8bd 	.word	0x8ff0e8bd
   1254c:	fc7cf001 	.word	0xfc7cf001
   12550:	fde8f001 	.word	0xfde8f001
   12554:	d1492800 	.word	0xd1492800
   12558:	f8c64b3e 	.word	0xf8c64b3e
   1255c:	681b011c 	.word	0x681b011c
   12560:	9b019301 	.word	0x9b019301
   12564:	f8d34b36 	.word	0xf8d34b36
   12568:	07d0230c 	.word	0x07d0230c
   1256c:	af2cf57f 	.word	0xaf2cf57f
   12570:	f2482000 	.word	0xf2482000
   12574:	49380202 	.word	0x49380202
   12578:	0100f8c3 	.word	0x0100f8c3
   1257c:	91026809 	.word	0x91026809
   12580:	f8d39902 	.word	0xf8d39902
   12584:	42933614 	.word	0x42933614
   12588:	d81ed040 	.word	0xd81ed040
   1258c:	d04f2b00 	.word	0xd04f2b00
   12590:	d9422b02 	.word	0xd9422b02
   12594:	0201f248 	.word	0x0201f248
   12598:	d1494293 	.word	0xd1494293
   1259c:	22072003 	.word	0x22072003
   125a0:	4b2e492b 	.word	0x4b2e492b
   125a4:	601a6008 	.word	0x601a6008
   125a8:	4d29e7cd 	.word	0x4d29e7cd
   125ac:	f8c36829 	.word	0xf8c36829
   125b0:	29012108 	.word	0x29012108
   125b4:	d05d492a 	.word	0xd05d492a
   125b8:	9203680a 	.word	0x9203680a
   125bc:	f8d39a03 	.word	0xf8d39a03
   125c0:	06db330c 	.word	0x06db330c
   125c4:	af10f53f 	.word	0xaf10f53f
   125c8:	4a26e716 	.word	0x4a26e716
   125cc:	d8144293 	.word	0xd8144293
   125d0:	6f88f1b3 	.word	0x6f88f1b3
   125d4:	f248d814 	.word	0xf248d814
   125d8:	42930203 	.word	0x42930203
   125dc:	2003d128 	.word	0x2003d128
   125e0:	491b2204 	.word	0x491b2204
   125e4:	60084b1d 	.word	0x60084b1d
   125e8:	e7ac601a 	.word	0xe7ac601a
   125ec:	f88423e0 	.word	0xf88423e0
   125f0:	6065332a 	.word	0x6065332a
   125f4:	e8bdb007 	.word	0xe8bdb007
   125f8:	4a1b8ff0 	.word	0x4a1b8ff0
   125fc:	d1174293 	.word	0xd1174293
   12600:	49132003 	.word	0x49132003
   12604:	60084a15 	.word	0x60084a15
   12608:	e79c6013 	.word	0xe79c6013
   1260c:	22062003 	.word	0x22062003
   12610:	4b12490f 	.word	0x4b12490f
   12614:	601a6008 	.word	0x601a6008
   12618:	2303e795 	.word	0x2303e795
   1261c:	490c4618 	.word	0x490c4618
   12620:	600b4a0e 	.word	0x600b4a0e
   12624:	b0076013 	.word	0xb0076013
   12628:	4ff0e8bd 	.word	0x4ff0e8bd
   1262c:	bc34f7ff 	.word	0xbc34f7ff
   12630:	49072303 	.word	0x49072303
   12634:	600b4a09 	.word	0x600b4a09
   12638:	e7846013 	.word	0xe7846013
   1263c:	e000e100 	.word	0xe000e100
   12640:	4002a000 	.word	0x4002a000
   12644:	4002a110 	.word	0x4002a110
   12648:	20020290 	.word	0x20020290
   1264c:	20020288 	.word	0x20020288
   12650:	2002028c 	.word	0x2002028c
   12654:	4002a11c 	.word	0x4002a11c
   12658:	4002a100 	.word	0x4002a100
   1265c:	20020284 	.word	0x20020284
   12660:	4002a108 	.word	0x4002a108
   12664:	04400004 	.word	0x04400004
   12668:	05500001 	.word	0x05500001
   1266c:	20020294 	.word	0x20020294
   12670:	20025c28 	.word	0x20025c28
   12674:	680b4a37 	.word	0x680b4a37
   12678:	93056812 	.word	0x93056812
   1267c:	48366893 	.word	0x48366893
   12680:	60034936 	.word	0x60034936
   12684:	9a056854 	.word	0x9a056854
   12688:	b16b600c 	.word	0xb16b600c
   1268c:	681bb164 	.word	0x681bb164
   12690:	d8022b10 	.word	0xd8022b10
   12694:	2a106822 	.word	0x2a106822
   12698:	2103d90c 	.word	0x2103d90c
   1269c:	0206f24c 	.word	0x0206f24c
   126a0:	60294b2f 	.word	0x60294b2f
   126a4:	e74e601a 	.word	0xe74e601a
   126a8:	22102103 	.word	0x22102103
   126ac:	60294b2c 	.word	0x60294b2c
   126b0:	e748601a 	.word	0xe748601a
   126b4:	80b4f8df 	.word	0x80b4f8df
   126b8:	d0422a00 	.word	0xd0422a00
   126bc:	f1042300 	.word	0xf1042300
   126c0:	461e0904 	.word	0x461e0904
   126c4:	3601e002 	.word	0x3601e002
   126c8:	d22a4296 	.word	0xd22a4296
   126cc:	19e100f7 	.word	0x19e100f7
   126d0:	28006888 	.word	0x28006888
   126d4:	f8d1d0f7 	.word	0xf8d1d0f7
   126d8:	fa5fa004 	.word	0xfa5fa004
   126dc:	f1bafa8a 	.word	0xf1bafa8a
   126e0:	d1f00f01 	.word	0xd1f00f01
   126e4:	c004f8d1 	.word	0xc004f8d1
   126e8:	0000f8b8 	.word	0x0000f8b8
   126ec:	4f1cebb0 	.word	0x4f1cebb0
   126f0:	684bd1e9 	.word	0x684bd1e9
   126f4:	f0231c42 	.word	0xf0231c42
   126f8:	f04303ff 	.word	0xf04303ff
   126fc:	604b0302 	.word	0x604b0302
   12700:	f8a86888 	.word	0xf8a86888
   12704:	f7ff2000 	.word	0xf7ff2000
   12708:	4653fba3 	.word	0x4653fba3
   1270c:	f859b938 	.word	0xf859b938
   12710:	f0222007 	.word	0xf0222007
   12714:	f04202ff 	.word	0xf04202ff
   12718:	f8490203 	.word	0xf8490203
   1271c:	68222007 	.word	0x68222007
   12720:	2b00e7d1 	.word	0x2b00e7d1
   12724:	b912d1c8 	.word	0xb912d1c8
   12728:	4293e00b 	.word	0x4293e00b
   1272c:	eb04d009 	.word	0xeb04d009
   12730:	688801c3 	.word	0x688801c3
   12734:	28003301 	.word	0x28003301
   12738:	6849d0f7 	.word	0x6849d0f7
   1273c:	2901b2c9 	.word	0x2901b2c9
   12740:	2002d1f3 	.word	0x2002d1f3
   12744:	f44f4b07 	.word	0xf44f4b07
   12748:	4a076180 	.word	0x4a076180
   1274c:	6028681b 	.word	0x6028681b
   12750:	bf00e6ec 	.word	0xbf00e6ec
   12754:	20020298 	.word	0x20020298
   12758:	20020294 	.word	0x20020294
   1275c:	20020290 	.word	0x20020290
   12760:	20020284 	.word	0x20020284
   12764:	20020288 	.word	0x20020288
   12768:	e000e100 	.word	0xe000e100
   1276c:	20025c28 	.word	0x20025c28

00012770 <rpc_transport_msg_free>:
   12770:	4b18b430 	.word	0x4b18b430
   12774:	6825681c 	.word	0x6825681c
   12778:	68a3b16d 	.word	0x68a3b16d
   1277c:	d0274283 	.word	0xd0274283
   12780:	e0022300 	.word	0xe0022300
   12784:	42816889 	.word	0x42816889
   12788:	3301d019 	.word	0x3301d019
   1278c:	42ab00da 	.word	0x42ab00da
   12790:	0102eb04 	.word	0x0102eb04
   12794:	4b10d1f6 	.word	0x4b10d1f6
   12798:	6825681c 	.word	0x6825681c
   1279c:	68a3b16d 	.word	0x68a3b16d
   127a0:	d0154283 	.word	0xd0154283
   127a4:	e0022300 	.word	0xe0022300
   127a8:	42816889 	.word	0x42816889
   127ac:	3301d007 	.word	0x3301d007
   127b0:	429d00da 	.word	0x429d00da
   127b4:	0102eb04 	.word	0x0102eb04
   127b8:	bc30d1f6 	.word	0xbc30d1f6
   127bc:	32044770 	.word	0x32044770
   127c0:	f02358a3 	.word	0xf02358a3
   127c4:	f04303ff 	.word	0xf04303ff
   127c8:	50a30303 	.word	0x50a30303
   127cc:	4770bc30 	.word	0x4770bc30
   127d0:	e7f52204 	.word	0xe7f52204
   127d4:	20020294 	.word	0x20020294
   127d8:	20020290 	.word	0x20020290

000127dc <block_cipher_df>:
   127dc:	4ff0e92d 	.word	0x4ff0e92d
   127e0:	7fc0f5b2 	.word	0x7fc0f5b2
   127e4:	7d49f5ad 	.word	0x7d49f5ad
   127e8:	8119f200 	.word	0x8119f200
   127ec:	460c4692 	.word	0x460c4692
   127f0:	72d0f44f 	.word	0x72d0f44f
   127f4:	46812100 	.word	0x46812100
   127f8:	f011a860 	.word	0xf011a860
   127fc:	a81afd1a 	.word	0xa81afd1a
   12800:	fcd8f00a 	.word	0xfcd8f00a
   12804:	23302000 	.word	0x23302000
   12808:	ea4fad66 	.word	0xea4fad66
   1280c:	f8ad221a 	.word	0xf8ad221a
   12810:	f88d0190 	.word	0xf88d0190
   12814:	46212192 	.word	0x46212192
   12818:	46284652 	.word	0x46284652
   1281c:	3197f88d 	.word	0x3197f88d
   12820:	a193f88d 	.word	0xa193f88d
   12824:	f011ae06 	.word	0xf011ae06
   12828:	2280fcd7 	.word	0x2280fcd7
   1282c:	f8054633 	.word	0xf8054633
   12830:	af0e200a 	.word	0xaf0e200a
   12834:	f8031b99 	.word	0xf8031b99
   12838:	429f1b01 	.word	0x429f1b01
   1283c:	f44fd1fa 	.word	0xf44fd1fa
   12840:	46317280 	.word	0x46317280
   12844:	f00aa81a 	.word	0xf00aa81a
   12848:	4683fcc1 	.word	0x4683fcc1
   1284c:	f0402800 	.word	0xf0402800
   12850:	900180c8 	.word	0x900180c8
   12854:	0a19f10a 	.word	0x0a19f10a
   12858:	2210ac02 	.word	0x2210ac02
   1285c:	46202100 	.word	0x46202100
   12860:	fce7f011 	.word	0xfce7f011
   12864:	ad6446d0 	.word	0xad6446d0
   12868:	f8157822 	.word	0xf8157822
   1286c:	f8943c10 	.word	0xf8943c10
   12870:	f815c001 	.word	0xf815c001
   12874:	78a01c0f 	.word	0x78a01c0f
   12878:	f8154053 	.word	0xf8154053
   1287c:	ea8c2c0e 	.word	0xea8c2c0e
   12880:	40500c01 	.word	0x40500c01
   12884:	f81578e1 	.word	0xf81578e1
   12888:	f8942c0d 	.word	0xf8942c0d
   1288c:	4051e004 	.word	0x4051e004
   12890:	2c0cf815 	.word	0x2c0cf815
   12894:	ea8e7023 	.word	0xea8e7023
   12898:	f8150202 	.word	0xf8150202
   1289c:	f8943c0b 	.word	0xf8943c0b
   128a0:	f884e005 	.word	0xf884e005
   128a4:	ea8ec001 	.word	0xea8ec001
   128a8:	f8150303 	.word	0xf8150303
   128ac:	f894cc0a 	.word	0xf894cc0a
   128b0:	70a0e006 	.word	0x70a0e006
   128b4:	0c0cea8e 	.word	0x0c0cea8e
   128b8:	0c09f815 	.word	0x0c09f815
   128bc:	e007f894 	.word	0xe007f894
   128c0:	ea8e70e1 	.word	0xea8e70e1
   128c4:	f8150000 	.word	0xf8150000
   128c8:	f8941c08 	.word	0xf8941c08
   128cc:	7122e008 	.word	0x7122e008
   128d0:	0101ea8e 	.word	0x0101ea8e
   128d4:	2c07f815 	.word	0x2c07f815
   128d8:	e009f894 	.word	0xe009f894
   128dc:	ea8e7163 	.word	0xea8e7163
   128e0:	7aa30202 	.word	0x7aa30202
   128e4:	ec06f815 	.word	0xec06f815
   128e8:	c006f884 	.word	0xc006f884
   128ec:	030eea83 	.word	0x030eea83
   128f0:	722171e0 	.word	0x722171e0
   128f4:	72a37262 	.word	0x72a37262
   128f8:	f8157ae1 	.word	0xf8157ae1
   128fc:	f8943c05 	.word	0xf8943c05
   12900:	7b60c00c 	.word	0x7b60c00c
   12904:	f815404b 	.word	0xf815404b
   12908:	f8152c04 	.word	0xf8152c04
   1290c:	ea8c1c03 	.word	0xea8c1c03
   12910:	40410202 	.word	0x40410202
   12914:	c00ef894 	.word	0xc00ef894
   12918:	0c02f815 	.word	0x0c02f815
   1291c:	e00ff894 	.word	0xe00ff894
   12920:	0000ea8c 	.word	0x0000ea8c
   12924:	cc01f815 	.word	0xcc01f815
   12928:	ea8e72e3 	.word	0xea8e72e3
   1292c:	73220c0c 	.word	0x73220c0c
   12930:	73a07361 	.word	0x73a07361
   12934:	46224623 	.word	0x46224623
   12938:	a81a2101 	.word	0xa81a2101
   1293c:	c00ff884 	.word	0xc00ff884
   12940:	fbc2f00b 	.word	0xfbc2f00b
   12944:	0f10f1b8 	.word	0x0f10f1b8
   12948:	bf944683 	.word	0xbf944683
   1294c:	0808eba8 	.word	0x0808eba8
   12950:	0810f1a8 	.word	0x0810f1a8
   12954:	d1452800 	.word	0xd1452800
   12958:	f1b83510 	.word	0xf1b83510
   1295c:	d1830f00 	.word	0xd1830f00
   12960:	22109d01 	.word	0x22109d01
   12964:	19784621 	.word	0x19784621
   12968:	fc36f011 	.word	0xfc36f011
   1296c:	3183f89d 	.word	0x3183f89d
   12970:	0210f105 	.word	0x0210f105
   12974:	2a303301 	.word	0x2a303301
   12978:	f88d9201 	.word	0xf88d9201
   1297c:	f47f3183 	.word	0xf47f3183
   12980:	f44faf6c 	.word	0xf44faf6c
   12984:	46397280 	.word	0x46397280
   12988:	f00aa81a 	.word	0xf00aa81a
   1298c:	4683fc1f 	.word	0x4683fc1f
   12990:	464dbb40 	.word	0x464dbb40
   12994:	0830f109 	.word	0x0830f109
   12998:	461aab16 	.word	0x461aab16
   1299c:	a81a2101 	.word	0xa81a2101
   129a0:	fb92f00b 	.word	0xfb92f00b
   129a4:	b9e84683 	.word	0xb9e84683
   129a8:	46282210 	.word	0x46282210
   129ac:	4415a916 	.word	0x4415a916
   129b0:	fc12f011 	.word	0xfc12f011
   129b4:	d1ef4545 	.word	0xd1ef4545
   129b8:	f00aa81a 	.word	0xf00aa81a
   129bc:	a860fc01 	.word	0xa860fc01
   129c0:	71d0f44f 	.word	0x71d0f44f
   129c4:	fc38f006 	.word	0xfc38f006
   129c8:	21304638 	.word	0x21304638
   129cc:	fc34f006 	.word	0xfc34f006
   129d0:	21204630 	.word	0x21204630
   129d4:	fc30f006 	.word	0xfc30f006
   129d8:	21104620 	.word	0x21104620
   129dc:	fc2cf006 	.word	0xfc2cf006
   129e0:	ac02e018 	.word	0xac02e018
   129e4:	f00aa81a 	.word	0xf00aa81a
   129e8:	a860fbeb 	.word	0xa860fbeb
   129ec:	71d0f44f 	.word	0x71d0f44f
   129f0:	fc22f006 	.word	0xfc22f006
   129f4:	21304638 	.word	0x21304638
   129f8:	fc1ef006 	.word	0xfc1ef006
   129fc:	21204630 	.word	0x21204630
   12a00:	fc1af006 	.word	0xfc1af006
   12a04:	21104620 	.word	0x21104620
   12a08:	fc16f006 	.word	0xfc16f006
   12a0c:	21304648 	.word	0x21304648
   12a10:	fc12f006 	.word	0xfc12f006
   12a14:	f50d4658 	.word	0xf50d4658
   12a18:	e8bd7d49 	.word	0xe8bd7d49
   12a1c:	f06f8ff0 	.word	0xf06f8ff0
   12a20:	e7f70b37 	.word	0xe7f70b37

00012a24 <symbol_000078b>:
   12a24:	72a0f44f 	.word	0x72a0f44f
   12a28:	f0112100 	.word	0xf0112100
   12a2c:	bf00bc02 	.word	0xbf00bc02

00012a30 <symbol_0001c64>:
   12a30:	b510b158 	.word	0xb510b158
   12a34:	30204604 	.word	0x30204604
   12a38:	fbc2f00a 	.word	0xfbc2f00a
   12a3c:	e8bd4620 	.word	0xe8bd4620
   12a40:	f44f4010 	.word	0xf44f4010
   12a44:	f00671a0 	.word	0xf00671a0
   12a48:	4770bbf7 	.word	0x4770bbf7

00012a4c <symbol_000ccf0>:
   12a4c:	6983b5f0 	.word	0x6983b5f0
   12a50:	f5b3b0ed 	.word	0xf5b3b0ed
   12a54:	f2007fc0 	.word	0xf2007fc0
   12a58:	f5c380e1 	.word	0xf5c380e1
   12a5c:	429373c0 	.word	0x429373c0
   12a60:	80dcf0c0 	.word	0x80dcf0c0
   12a64:	46154604 	.word	0x46154604
   12a68:	f44f460e 	.word	0xf44f460e
   12a6c:	210072c0 	.word	0x210072c0
   12a70:	f011a80c 	.word	0xf011a80c
   12a74:	a90cfbde 	.word	0xa90cfbde
   12a78:	3138f8d4 	.word	0x3138f8d4
   12a7c:	f8d469a2 	.word	0xf8d469a2
   12a80:	4798013c 	.word	0x4798013c
   12a84:	f0402800 	.word	0xf0402800
   12a88:	69a780cc 	.word	0x69a780cc
   12a8c:	b94db106 	.word	0xb94db106
   12a90:	463aa90c 	.word	0x463aa90c
   12a94:	f7ff4608 	.word	0xf7ff4608
   12a98:	4605fea1 	.word	0x4605fea1
   12a9c:	4628b188 	.word	0x4628b188
   12aa0:	bdf0b06d 	.word	0xbdf0b06d
   12aa4:	462aab0c 	.word	0x462aab0c
   12aa8:	463119d8 	.word	0x463119d8
   12aac:	fb94f011 	.word	0xfb94f011
   12ab0:	a90c442f 	.word	0xa90c442f
   12ab4:	4608463a 	.word	0x4608463a
   12ab8:	fe90f7ff 	.word	0xfe90f7ff
   12abc:	28004605 	.word	0x28004605
   12ac0:	4668d1ed 	.word	0x4668d1ed
   12ac4:	46292230 	.word	0x46292230
   12ac8:	fbb3f011 	.word	0xfbb3f011
   12acc:	f104462e 	.word	0xf104462e
   12ad0:	7be20720 	.word	0x7be20720
   12ad4:	0306eb0d 	.word	0x0306eb0d
   12ad8:	b2d23201 	.word	0xb2d23201
   12adc:	2a0073e2 	.word	0x2a0073e2
   12ae0:	7ba2d14d 	.word	0x7ba2d14d
   12ae4:	b2d23201 	.word	0xb2d23201
   12ae8:	2a0073a2 	.word	0x2a0073a2
   12aec:	7b62d147 	.word	0x7b62d147
   12af0:	b2d23201 	.word	0xb2d23201
   12af4:	2a007362 	.word	0x2a007362
   12af8:	7b22d141 	.word	0x7b22d141
   12afc:	b2d23201 	.word	0xb2d23201
   12b00:	2a007322 	.word	0x2a007322
   12b04:	7ae2d13b 	.word	0x7ae2d13b
   12b08:	b2d23201 	.word	0xb2d23201
   12b0c:	2a0072e2 	.word	0x2a0072e2
   12b10:	7aa2d135 	.word	0x7aa2d135
   12b14:	b2d23201 	.word	0xb2d23201
   12b18:	2a0072a2 	.word	0x2a0072a2
   12b1c:	7a62d12f 	.word	0x7a62d12f
   12b20:	b2d23201 	.word	0xb2d23201
   12b24:	bb527262 	.word	0xbb527262
   12b28:	32017a22 	.word	0x32017a22
   12b2c:	7222b2d2 	.word	0x7222b2d2
   12b30:	79e2bb2a 	.word	0x79e2bb2a
   12b34:	b2d23201 	.word	0xb2d23201
   12b38:	bb0271e2 	.word	0xbb0271e2
   12b3c:	320179a2 	.word	0x320179a2
   12b40:	71a2b2d2 	.word	0x71a2b2d2
   12b44:	7962b9da 	.word	0x7962b9da
   12b48:	b2d23201 	.word	0xb2d23201
   12b4c:	b9b27162 	.word	0xb9b27162
   12b50:	32017922 	.word	0x32017922
   12b54:	7122b2d2 	.word	0x7122b2d2
   12b58:	78e2b98a 	.word	0x78e2b98a
   12b5c:	b2d23201 	.word	0xb2d23201
   12b60:	b96270e2 	.word	0xb96270e2
   12b64:	320178a2 	.word	0x320178a2
   12b68:	70a2b2d2 	.word	0x70a2b2d2
   12b6c:	7862b93a 	.word	0x7862b93a
   12b70:	b2d23201 	.word	0xb2d23201
   12b74:	b9127062 	.word	0xb9127062
   12b78:	32017822 	.word	0x32017822
   12b7c:	46227022 	.word	0x46227022
   12b80:	46382101 	.word	0x46382101
   12b84:	faa0f00b 	.word	0xfaa0f00b
   12b88:	28004605 	.word	0x28004605
   12b8c:	3610d187 	.word	0x3610d187
   12b90:	d19e2e30 	.word	0xd19e2e30
   12b94:	9b0c9901 	.word	0x9b0c9901
   12b98:	9a0d9800 	.word	0x9a0d9800
   12b9c:	404a4058 	.word	0x404a4058
   12ba0:	99029b0e 	.word	0x99029b0e
   12ba4:	40599000 	.word	0x40599000
   12ba8:	9b0f9803 	.word	0x9b0f9803
   12bac:	40439201 	.word	0x40439201
   12bb0:	98049a10 	.word	0x98049a10
   12bb4:	40509102 	.word	0x40509102
   12bb8:	9a119905 	.word	0x9a119905
   12bbc:	40519303 	.word	0x40519303
   12bc0:	9a069b12 	.word	0x9a069b12
   12bc4:	405a9004 	.word	0x405a9004
   12bc8:	9b139807 	.word	0x9b139807
   12bcc:	40589105 	.word	0x40589105
   12bd0:	9b149908 	.word	0x9b149908
   12bd4:	40599206 	.word	0x40599206
   12bd8:	9b159a09 	.word	0x9b159a09
   12bdc:	405a9007 	.word	0x405a9007
   12be0:	9b16980a 	.word	0x9b16980a
   12be4:	40439108 	.word	0x40439108
   12be8:	2309e9cd 	.word	0x2309e9cd
   12bec:	9b179a0b 	.word	0x9b179a0b
   12bf0:	40534638 	.word	0x40534638
   12bf4:	f44f4669 	.word	0xf44f4669
   12bf8:	930b7280 	.word	0x930b7280
   12bfc:	fae6f00a 	.word	0xfae6f00a
   12c00:	28004605 	.word	0x28004605
   12c04:	af4bf47f 	.word	0xaf4bf47f
   12c08:	a9082210 	.word	0xa9082210
   12c0c:	f0114620 	.word	0xf0114620
   12c10:	2301fae3 	.word	0x2301fae3
   12c14:	61234628 	.word	0x61234628
   12c18:	bdf0b06d 	.word	0xbdf0b06d
   12c1c:	0537f06f 	.word	0x0537f06f
   12c20:	f06fe73d 	.word	0xf06fe73d
   12c24:	e73a0533 	.word	0xe73a0533

00012c28 <symbol_0001e1e>:
   12c28:	41f0e92d 	.word	0x41f0e92d
   12c2c:	46164604 	.word	0x46164604
   12c30:	b0882220 	.word	0xb0882220
   12c34:	460f18a5 	.word	0x460f18a5
   12c38:	21004668 	.word	0x21004668
   12c3c:	f0114698 	.word	0xf0114698
   12c40:	4628faf8 	.word	0x4628faf8
   12c44:	fab6f00a 	.word	0xfab6f00a
   12c48:	f2422220 	.word	0xf2422220
   12c4c:	f8c47310 	.word	0xf8c47310
   12c50:	e9c47138 	.word	0xe9c47138
   12c54:	46282306 	.word	0x46282306
   12c58:	613cf8c4 	.word	0x613cf8c4
   12c5c:	f44f4669 	.word	0xf44f4669
   12c60:	f00a7280 	.word	0xf00a7280
   12c64:	b920fab3 	.word	0xb920fab3
   12c68:	46204641 	.word	0x46204641
   12c6c:	f7ff9a0e 	.word	0xf7ff9a0e
   12c70:	b008feed 	.word	0xb008feed
   12c74:	81f0e8bd 	.word	0x81f0e8bd

00012c78 <symbol_000268c>:
   12c78:	4ff0e92d 	.word	0x4ff0e92d
   12c7c:	6f80f5b2 	.word	0x6f80f5b2
   12c80:	f200b0f9 	.word	0xf200b0f9
   12c84:	46048226 	.word	0x46048226
   12c88:	460f4615 	.word	0x460f4615
   12c8c:	46682230 	.word	0x46682230
   12c90:	f0112100 	.word	0xf0112100
   12c94:	6922face 	.word	0x6922face
   12c98:	429a69e3 	.word	0x429a69e3
   12c9c:	6963dc01 	.word	0x6963dc01
   12ca0:	69a3b313 	.word	0x69a3b313
   12ca4:	7fc0f5b3 	.word	0x7fc0f5b3
   12ca8:	8216f200 	.word	0x8216f200
   12cac:	0a60f10d 	.word	0x0a60f10d
   12cb0:	72c0f44f 	.word	0x72c0f44f
   12cb4:	46502100 	.word	0x46502100
   12cb8:	fabbf011 	.word	0xfabbf011
   12cbc:	f8d44651 	.word	0xf8d44651
   12cc0:	69a23138 	.word	0x69a23138
   12cc4:	013cf8d4 	.word	0x013cf8d4
   12cc8:	f06f4798 	.word	0xf06f4798
   12ccc:	b9380933 	.word	0xb9380933
   12cd0:	465169a2 	.word	0x465169a2
   12cd4:	f7ff4650 	.word	0xf7ff4650
   12cd8:	4681fd81 	.word	0x4681fd81
   12cdc:	d0772800 	.word	0xd0772800
   12ce0:	b0794648 	.word	0xb0794648
   12ce4:	8ff0e8bd 	.word	0x8ff0e8bd
   12ce8:	0820f104 	.word	0x0820f104
   12cec:	f0002d00 	.word	0xf0002d00
   12cf0:	ae0c812b 	.word	0xae0c812b
   12cf4:	2d10e00e 	.word	0x2d10e00e
   12cf8:	bf2846a9 	.word	0xbf2846a9
   12cfc:	0910f04f 	.word	0x0910f04f
   12d00:	46314638 	.word	0x46314638
   12d04:	f011464a 	.word	0xf011464a
   12d08:	ebb5fa67 	.word	0xebb5fa67
   12d0c:	444f0509 	.word	0x444f0509
   12d10:	811af000 	.word	0x811af000
   12d14:	33017be3 	.word	0x33017be3
   12d18:	73e3b2db 	.word	0x73e3b2db
   12d1c:	d14d2b00 	.word	0xd14d2b00
   12d20:	33017ba3 	.word	0x33017ba3
   12d24:	73a3b2db 	.word	0x73a3b2db
   12d28:	d1472b00 	.word	0xd1472b00
   12d2c:	33017b63 	.word	0x33017b63
   12d30:	7363b2db 	.word	0x7363b2db
   12d34:	d1412b00 	.word	0xd1412b00
   12d38:	33017b23 	.word	0x33017b23
   12d3c:	7323b2db 	.word	0x7323b2db
   12d40:	d13b2b00 	.word	0xd13b2b00
   12d44:	33017ae3 	.word	0x33017ae3
   12d48:	72e3b2db 	.word	0x72e3b2db
   12d4c:	d1352b00 	.word	0xd1352b00
   12d50:	33017aa3 	.word	0x33017aa3
   12d54:	72a3b2db 	.word	0x72a3b2db
   12d58:	d12f2b00 	.word	0xd12f2b00
   12d5c:	33017a63 	.word	0x33017a63
   12d60:	7263b2db 	.word	0x7263b2db
   12d64:	7a23bb53 	.word	0x7a23bb53
   12d68:	b2db3301 	.word	0xb2db3301
   12d6c:	bb2b7223 	.word	0xbb2b7223
   12d70:	330179e3 	.word	0x330179e3
   12d74:	71e3b2db 	.word	0x71e3b2db
   12d78:	79a3bb03 	.word	0x79a3bb03
   12d7c:	b2db3301 	.word	0xb2db3301
   12d80:	b9db71a3 	.word	0xb9db71a3
   12d84:	33017963 	.word	0x33017963
   12d88:	7163b2db 	.word	0x7163b2db
   12d8c:	7923b9b3 	.word	0x7923b9b3
   12d90:	b2db3301 	.word	0xb2db3301
   12d94:	b98b7123 	.word	0xb98b7123
   12d98:	330178e3 	.word	0x330178e3
   12d9c:	70e3b2db 	.word	0x70e3b2db
   12da0:	78a3b963 	.word	0x78a3b963
   12da4:	b2db3301 	.word	0xb2db3301
   12da8:	b93b70a3 	.word	0xb93b70a3
   12dac:	33017863 	.word	0x33017863
   12db0:	7063b2db 	.word	0x7063b2db
   12db4:	7823b913 	.word	0x7823b913
   12db8:	70233301 	.word	0x70233301
   12dbc:	46224633 	.word	0x46224633
   12dc0:	46402101 	.word	0x46402101
   12dc4:	f980f00b 	.word	0xf980f00b
   12dc8:	28004681 	.word	0x28004681
   12dcc:	e787d093 	.word	0xe787d093
   12dd0:	4630ae0c 	.word	0x4630ae0c
   12dd4:	46492230 	.word	0x46492230
   12dd8:	fa2bf011 	.word	0xfa2bf011
   12ddc:	f10446cb 	.word	0xf10446cb
   12de0:	7be20820 	.word	0x7be20820
   12de4:	030beb06 	.word	0x030beb06
   12de8:	b2d23201 	.word	0xb2d23201
   12dec:	2a0073e2 	.word	0x2a0073e2
   12df0:	7ba2d14d 	.word	0x7ba2d14d
   12df4:	b2d23201 	.word	0xb2d23201
   12df8:	2a0073a2 	.word	0x2a0073a2
   12dfc:	7b62d147 	.word	0x7b62d147
   12e00:	b2d23201 	.word	0xb2d23201
   12e04:	2a007362 	.word	0x2a007362
   12e08:	7b22d141 	.word	0x7b22d141
   12e0c:	b2d23201 	.word	0xb2d23201
   12e10:	2a007322 	.word	0x2a007322
   12e14:	7ae2d13b 	.word	0x7ae2d13b
   12e18:	b2d23201 	.word	0xb2d23201
   12e1c:	2a0072e2 	.word	0x2a0072e2
   12e20:	7aa2d135 	.word	0x7aa2d135
   12e24:	b2d23201 	.word	0xb2d23201
   12e28:	2a0072a2 	.word	0x2a0072a2
   12e2c:	7a62d12f 	.word	0x7a62d12f
   12e30:	b2d23201 	.word	0xb2d23201
   12e34:	bb527262 	.word	0xbb527262
   12e38:	32017a22 	.word	0x32017a22
   12e3c:	7222b2d2 	.word	0x7222b2d2
   12e40:	79e2bb2a 	.word	0x79e2bb2a
   12e44:	b2d23201 	.word	0xb2d23201
   12e48:	bb0271e2 	.word	0xbb0271e2
   12e4c:	320179a2 	.word	0x320179a2
   12e50:	71a2b2d2 	.word	0x71a2b2d2
   12e54:	7962b9da 	.word	0x7962b9da
   12e58:	b2d23201 	.word	0xb2d23201
   12e5c:	b9b27162 	.word	0xb9b27162
   12e60:	32017922 	.word	0x32017922
   12e64:	7122b2d2 	.word	0x7122b2d2
   12e68:	78e2b98a 	.word	0x78e2b98a
   12e6c:	b2d23201 	.word	0xb2d23201
   12e70:	b96270e2 	.word	0xb96270e2
   12e74:	320178a2 	.word	0x320178a2
   12e78:	70a2b2d2 	.word	0x70a2b2d2
   12e7c:	7862b93a 	.word	0x7862b93a
   12e80:	b2d23201 	.word	0xb2d23201
   12e84:	b9127062 	.word	0xb9127062
   12e88:	32017822 	.word	0x32017822
   12e8c:	46227022 	.word	0x46227022
   12e90:	46402101 	.word	0x46402101
   12e94:	f918f00b 	.word	0xf918f00b
   12e98:	28004681 	.word	0x28004681
   12e9c:	af20f47f 	.word	0xaf20f47f
   12ea0:	0b10f10b 	.word	0x0b10f10b
   12ea4:	0f30f1bb 	.word	0x0f30f1bb
   12ea8:	6870d19b 	.word	0x6870d19b
   12eac:	3000f8da 	.word	0x3000f8da
   12eb0:	f8da6831 	.word	0xf8da6831
   12eb4:	40592004 	.word	0x40592004
   12eb8:	f8da4042 	.word	0xf8da4042
   12ebc:	68b03008 	.word	0x68b03008
   12ec0:	ea836031 	.word	0xea836031
   12ec4:	f8da0100 	.word	0xf8da0100
   12ec8:	68f0300c 	.word	0x68f0300c
   12ecc:	40586072 	.word	0x40586072
   12ed0:	f8da6932 	.word	0xf8da6932
   12ed4:	60b13010 	.word	0x60b13010
   12ed8:	f8da4053 	.word	0xf8da4053
   12edc:	69721014 	.word	0x69721014
   12ee0:	404a60f0 	.word	0x404a60f0
   12ee4:	f8da69b0 	.word	0xf8da69b0
   12ee8:	61331018 	.word	0x61331018
   12eec:	f8da4048 	.word	0xf8da4048
   12ef0:	69f1301c 	.word	0x69f1301c
   12ef4:	404b6172 	.word	0x404b6172
   12ef8:	f8da6a32 	.word	0xf8da6a32
   12efc:	61b01020 	.word	0x61b01020
   12f00:	6a704051 	.word	0x6a704051
   12f04:	2024f8da 	.word	0x2024f8da
   12f08:	405061f3 	.word	0x405061f3
   12f0c:	3028f8da 	.word	0x3028f8da
   12f10:	62316ab2 	.word	0x62316ab2
   12f14:	e9c64053 	.word	0xe9c64053
   12f18:	6af20309 	.word	0x6af20309
   12f1c:	302cf8da 	.word	0x302cf8da
   12f20:	40534631 	.word	0x40534631
   12f24:	f44f4640 	.word	0xf44f4640
   12f28:	62f37280 	.word	0x62f37280
   12f2c:	f94ef00a 	.word	0xf94ef00a
   12f30:	28004681 	.word	0x28004681
   12f34:	aed4f47f 	.word	0xaed4f47f
   12f38:	a9142210 	.word	0xa9142210
   12f3c:	f0114620 	.word	0xf0114620
   12f40:	2301f94b 	.word	0x2301f94b
   12f44:	e6d16123 	.word	0xe6d16123
   12f48:	0a60f10d 	.word	0x0a60f10d
   12f4c:	22304650 	.word	0x22304650
   12f50:	f0112100 	.word	0xf0112100
   12f54:	2500f96e 	.word	0x2500f96e
   12f58:	eb0a7be2 	.word	0xeb0a7be2
   12f5c:	32010305 	.word	0x32010305
   12f60:	73e2b2d2 	.word	0x73e2b2d2
   12f64:	d14d2a00 	.word	0xd14d2a00
   12f68:	32017ba2 	.word	0x32017ba2
   12f6c:	73a2b2d2 	.word	0x73a2b2d2
   12f70:	d1472a00 	.word	0xd1472a00
   12f74:	32017b62 	.word	0x32017b62
   12f78:	7362b2d2 	.word	0x7362b2d2
   12f7c:	d1412a00 	.word	0xd1412a00
   12f80:	32017b22 	.word	0x32017b22
   12f84:	7322b2d2 	.word	0x7322b2d2
   12f88:	d13b2a00 	.word	0xd13b2a00
   12f8c:	32017ae2 	.word	0x32017ae2
   12f90:	72e2b2d2 	.word	0x72e2b2d2
   12f94:	d1352a00 	.word	0xd1352a00
   12f98:	32017aa2 	.word	0x32017aa2
   12f9c:	72a2b2d2 	.word	0x72a2b2d2
   12fa0:	d12f2a00 	.word	0xd12f2a00
   12fa4:	32017a62 	.word	0x32017a62
   12fa8:	7262b2d2 	.word	0x7262b2d2
   12fac:	7a22bb52 	.word	0x7a22bb52
   12fb0:	b2d23201 	.word	0xb2d23201
   12fb4:	bb2a7222 	.word	0xbb2a7222
   12fb8:	320179e2 	.word	0x320179e2
   12fbc:	71e2b2d2 	.word	0x71e2b2d2
   12fc0:	79a2bb02 	.word	0x79a2bb02
   12fc4:	b2d23201 	.word	0xb2d23201
   12fc8:	b9da71a2 	.word	0xb9da71a2
   12fcc:	32017962 	.word	0x32017962
   12fd0:	7162b2d2 	.word	0x7162b2d2
   12fd4:	7922b9b2 	.word	0x7922b9b2
   12fd8:	b2d23201 	.word	0xb2d23201
   12fdc:	b98a7122 	.word	0xb98a7122
   12fe0:	320178e2 	.word	0x320178e2
   12fe4:	70e2b2d2 	.word	0x70e2b2d2
   12fe8:	78a2b962 	.word	0x78a2b962
   12fec:	b2d23201 	.word	0xb2d23201
   12ff0:	b93a70a2 	.word	0xb93a70a2
   12ff4:	32017862 	.word	0x32017862
   12ff8:	7062b2d2 	.word	0x7062b2d2
   12ffc:	7822b912 	.word	0x7822b912
   13000:	70223201 	.word	0x70223201
   13004:	21014622 	.word	0x21014622
   13008:	f00b4640 	.word	0xf00b4640
   1300c:	4681f85d 	.word	0x4681f85d
   13010:	f47f2800 	.word	0xf47f2800
   13014:	3510ae65 	.word	0x3510ae65
   13018:	d19d2d30 	.word	0xd19d2d30
   1301c:	1200e9da 	.word	0x1200e9da
   13020:	98019b00 	.word	0x98019b00
   13024:	40424059 	.word	0x40424059
   13028:	3008f8da 	.word	0x3008f8da
   1302c:	f8ca9802 	.word	0xf8ca9802
   13030:	ea831000 	.word	0xea831000
   13034:	f8da0100 	.word	0xf8da0100
   13038:	9803300c 	.word	0x9803300c
   1303c:	2004f8ca 	.word	0x2004f8ca
   13040:	9a044058 	.word	0x9a044058
   13044:	3010f8da 	.word	0x3010f8da
   13048:	1008f8ca 	.word	0x1008f8ca
   1304c:	99054053 	.word	0x99054053
   13050:	2014f8da 	.word	0x2014f8da
   13054:	000cf8ca 	.word	0x000cf8ca
   13058:	9806404a 	.word	0x9806404a
   1305c:	1018f8da 	.word	0x1018f8da
   13060:	3010f8ca 	.word	0x3010f8ca
   13064:	9b074048 	.word	0x9b074048
   13068:	101cf8da 	.word	0x101cf8da
   1306c:	2014f8ca 	.word	0x2014f8ca
   13070:	f8da404b 	.word	0xf8da404b
   13074:	99082020 	.word	0x99082020
   13078:	0018f8ca 	.word	0x0018f8ca
   1307c:	f8da4051 	.word	0xf8da4051
   13080:	9a090024 	.word	0x9a090024
   13084:	301cf8ca 	.word	0x301cf8ca
   13088:	f8da4050 	.word	0xf8da4050
   1308c:	9a0a3028 	.word	0x9a0a3028
   13090:	1020f8ca 	.word	0x1020f8ca
   13094:	e9ca4053 	.word	0xe9ca4053
   13098:	9a0b0309 	.word	0x9a0b0309
   1309c:	302cf8da 	.word	0x302cf8da
   130a0:	40534640 	.word	0x40534640
   130a4:	f44f4651 	.word	0xf44f4651
   130a8:	f8ca7280 	.word	0xf8ca7280
   130ac:	f00a302c 	.word	0xf00a302c
   130b0:	4681f88d 	.word	0x4681f88d
   130b4:	f47f2800 	.word	0xf47f2800
   130b8:	2210ae13 	.word	0x2210ae13
   130bc:	4620a920 	.word	0x4620a920
   130c0:	f88af011 	.word	0xf88af011
   130c4:	69234648 	.word	0x69234648
   130c8:	61233301 	.word	0x61233301
   130cc:	e8bdb079 	.word	0xe8bdb079
   130d0:	f06f8ff0 	.word	0xf06f8ff0
   130d4:	e6030935 	.word	0xe6030935
   130d8:	0937f06f 	.word	0x0937f06f
   130dc:	bf00e600 	.word	0xbf00e600

000130e0 <packet_handler_create>:
   130e0:	b5382801 	.word	0xb5382801
   130e4:	4614460d 	.word	0x4614460d
   130e8:	db11d00d 	.word	0xdb11d00d
   130ec:	dc0f2803 	.word	0xdc0f2803
   130f0:	f00a2010 	.word	0xf00a2010
   130f4:	2218f81f 	.word	0x2218f81f
   130f8:	4b08b120 	.word	0x4b08b120
   130fc:	44136045 	.word	0x44136045
   13100:	60036084 	.word	0x60036084
   13104:	2014bd38 	.word	0x2014bd38
   13108:	f814f00a 	.word	0xf814f00a
   1310c:	e7f32230 	.word	0xe7f32230
   13110:	f00a200c 	.word	0xf00a200c
   13114:	2200f80f 	.word	0x2200f80f
   13118:	bf00e7ee 	.word	0xbf00e7ee
   1311c:	000258a0 	.word	0x000258a0

00013120 <packet_handler_delete>:
   13120:	4604b510 	.word	0x4604b510
   13124:	691b6803 	.word	0x691b6803
   13128:	68234798 	.word	0x68234798
   1312c:	695b4620 	.word	0x695b4620
   13130:	46204798 	.word	0x46204798
   13134:	4010e8bd 	.word	0x4010e8bd
   13138:	b81af00a 	.word	0xb81af00a

0001313c <symbol_0002469>:
   1313c:	460db570 	.word	0x460db570
   13140:	f0014604 	.word	0xf0014604
   13144:	2d03fc23 	.word	0x2d03fc23
   13148:	d1257025 	.word	0xd1257025
   1314c:	25012308 	.word	0x25012308
   13150:	49154a14 	.word	0x49154a14
   13154:	622360a3 	.word	0x622360a3
   13158:	62e36523 	.word	0x62e36523
   1315c:	60e263a3 	.word	0x60e263a3
   13160:	4a134b12 	.word	0x4a134b12
   13164:	48144e13 	.word	0x48144e13
   13168:	65606321 	.word	0x65606321
   1316c:	64a363e2 	.word	0x64a363e2
   13170:	61e56065 	.word	0x61e56065
   13174:	62a564e5 	.word	0x62a564e5
   13178:	e9c46365 	.word	0xe9c46365
   1317c:	62665510 	.word	0x62665510
   13180:	f0061d20 	.word	0xf0061d20
   13184:	65a0fde7 	.word	0x65a0fde7
   13188:	004cf104 	.word	0x004cf104
   1318c:	fde2f006 	.word	0xfde2f006
   13190:	0517e9c4 	.word	0x0517e9c4
   13194:	bd702000 	.word	0xbd702000
   13198:	f0014620 	.word	0xf0014620
   1319c:	4807fbf7 	.word	0x4807fbf7
   131a0:	bf00bd70 	.word	0xbf00bd70
   131a4:	00025968 	.word	0x00025968
   131a8:	00025908 	.word	0x00025908
   131ac:	2002a2e8 	.word	0x2002a2e8
   131b0:	00025928 	.word	0x00025928
   131b4:	000258e8 	.word	0x000258e8
   131b8:	00025948 	.word	0x00025948
   131bc:	ffffb180 	.word	0xffffb180

000131c0 <secure_client_socket>:
   131c0:	41f0e92d 	.word	0x41f0e92d
   131c4:	680b460c 	.word	0x680b460c
   131c8:	f4236989 	.word	0xf4236989
   131cc:	60233300 	.word	0x60233300
   131d0:	23006822 	.word	0x23006822
   131d4:	1280f422 	.word	0x1280f422
   131d8:	f2476022 	.word	0xf2476022
   131dc:	68270281 	.word	0x68270281
   131e0:	f0024606 	.word	0xf0024606
   131e4:	2800fedb 	.word	0x2800fedb
   131e8:	4605d03b 	.word	0x4605d03b
   131ec:	eb064b28 	.word	0xeb064b28
   131f0:	eb0301c6 	.word	0xeb0301c6
   131f4:	22240181 	.word	0x22240181
   131f8:	f0103014 	.word	0xf0103014
   131fc:	68abffed 	.word	0x68abffed
   13200:	8090f8df 	.word	0x8090f8df
   13204:	60ab3324 	.word	0x60ab3324
   13208:	46296823 	.word	0x46296823
   1320c:	0308ea03 	.word	0x0308ea03
   13210:	030af043 	.word	0x030af043
   13214:	f2476023 	.word	0xf2476023
   13218:	463b0281 	.word	0x463b0281
   1321c:	f0024620 	.word	0xf0024620
   13220:	b960fedd 	.word	0xb960fedd
   13224:	00db6823 	.word	0x00db6823
   13228:	f04fd40b 	.word	0xf04fd40b
   1322c:	f64f33ff 	.word	0xf64f33ff
   13230:	210b72ff 	.word	0x210b72ff
   13234:	f0024630 	.word	0xf0024630
   13238:	b128fee5 	.word	0xb128fee5
   1323c:	e8bd6027 	.word	0xe8bd6027
   13240:	207381f0 	.word	0x207381f0
   13244:	81f0e8bd 	.word	0x81f0e8bd
   13248:	6280f04f 	.word	0x6280f04f
   1324c:	46114630 	.word	0x46114630
   13250:	33fff04f 	.word	0x33fff04f
   13254:	fed6f002 	.word	0xfed6f002
   13258:	2873b130 	.word	0x2873b130
   1325c:	6027d0ef 	.word	0x6027d0ef
   13260:	200ce7ed 	.word	0x200ce7ed
   13264:	81f0e8bd 	.word	0x81f0e8bd
   13268:	f0236823 	.word	0xf0236823
   1326c:	60236380 	.word	0x60236380
   13270:	ea036823 	.word	0xea036823
   13274:	f0480808 	.word	0xf0480808
   13278:	6023030c 	.word	0x6023030c
   1327c:	f4436823 	.word	0xf4436823
   13280:	60233300 	.word	0x60233300
   13284:	f4436823 	.word	0xf4436823
   13288:	60231380 	.word	0x60231380
   1328c:	81f0e8bd 	.word	0x81f0e8bd
   13290:	2002029c 	.word	0x2002029c
   13294:	ffff0000 	.word	0xffff0000

00013298 <tls_interface_init>:
   13298:	47702000 	.word	0x47702000

0001329c <tls_interface_open>:
   1329c:	f020b538 	.word	0xf020b538
   132a0:	2b020308 	.word	0x2b020308
   132a4:	202fd006 	.word	0x202fd006
   132a8:	fe72f7fc 	.word	0xfe72f7fc
   132ac:	35fff04f 	.word	0x35fff04f
   132b0:	bd384628 	.word	0xbd384628
   132b4:	1e4a4614 	.word	0x1e4a4614
   132b8:	d8282a01 	.word	0xd8282a01
   132bc:	2901bb14 	.word	0x2901bb14
   132c0:	2301bf06 	.word	0x2301bf06
   132c4:	7482f44f 	.word	0x7482f44f
   132c8:	7487f44f 	.word	0x7487f44f
   132cc:	f002461a 	.word	0xf002461a
   132d0:	1e05fec5 	.word	0x1e05fec5
   132d4:	4b15db26 	.word	0x4b15db26
   132d8:	00c5eb05 	.word	0x00c5eb05
   132dc:	0080eb03 	.word	0x0080eb03
   132e0:	49132224 	.word	0x49132224
   132e4:	ff78f010 	.word	0xff78f010
   132e8:	f0024628 	.word	0xf0024628
   132ec:	6803fd0d 	.word	0x6803fd0d
   132f0:	f4236144 	.word	0xf4236144
   132f4:	60031380 	.word	0x60031380
   132f8:	f4236803 	.word	0xf4236803
   132fc:	60033300 	.word	0x60033300
   13300:	bd384628 	.word	0xbd384628
   13304:	d0082901 	.word	0xd0082901
   13308:	7f87f5b4 	.word	0x7f87f5b4
   1330c:	2016d0de 	.word	0x2016d0de
   13310:	fe3ef7fc 	.word	0xfe3ef7fc
   13314:	35fff04f 	.word	0x35fff04f
   13318:	f5b4e7ca 	.word	0xf5b4e7ca
   1331c:	d1f67f82 	.word	0xd1f67f82
   13320:	e7d3460b 	.word	0xe7d3460b
   13324:	35fff04f 	.word	0x35fff04f
   13328:	bf00e7c2 	.word	0xbf00e7c2
   1332c:	2002029c 	.word	0x2002029c
   13330:	00025988 	.word	0x00025988

00013334 <tls_interface_close>:
   13334:	4604b510 	.word	0x4604b510
   13338:	fce6f002 	.word	0xfce6f002
   1333c:	4620b120 	.word	0x4620b120
   13340:	4010e8bd 	.word	0x4010e8bd
   13344:	bf36f002 	.word	0xbf36f002
   13348:	f7fc2009 	.word	0xf7fc2009
   1334c:	f04ffe21 	.word	0xf04ffe21
   13350:	bd1030ff 	.word	0xbd1030ff

00013354 <tls_interface_sendto>:
   13354:	47f0e92d 	.word	0x47f0e92d
   13358:	e9dd460d 	.word	0xe9dd460d
   1335c:	46168908 	.word	0x46168908
   13360:	4604461f 	.word	0x4604461f
   13364:	fcd0f002 	.word	0xfcd0f002
   13368:	d03b2800 	.word	0xd03b2800
   1336c:	b29b6803 	.word	0xb29b6803
   13370:	d0392b0c 	.word	0xd0392b0c
   13374:	b29b6803 	.word	0xb29b6803
   13378:	d1112b0b 	.word	0xd1112b0b
   1337c:	eb044b20 	.word	0xeb044b20
   13380:	f81304c4 	.word	0xf81304c4
   13384:	2b023024 	.word	0x2b023024
   13388:	6903d038 	.word	0x6903d038
   1338c:	bf142b01 	.word	0xbf142b01
   13390:	202a2039 	.word	0x202a2039
   13394:	fdfcf7fc 	.word	0xfdfcf7fc
   13398:	30fff04f 	.word	0x30fff04f
   1339c:	87f0e8bd 	.word	0x87f0e8bd
   133a0:	2b016903 	.word	0x2b016903
   133a4:	2b02d00b 	.word	0x2b02d00b
   133a8:	2039d001 	.word	0x2039d001
   133ac:	6803e7f2 	.word	0x6803e7f2
   133b0:	2b02b29b 	.word	0x2b02b29b
   133b4:	6803d007 	.word	0x6803d007
   133b8:	2b04b29b 	.word	0x2b04b29b
   133bc:	6803d003 	.word	0x6803d003
   133c0:	2b05b29b 	.word	0x2b05b29b
   133c4:	4b0ed1f1 	.word	0x4b0ed1f1
   133c8:	02c4eb04 	.word	0x02c4eb04
   133cc:	3022f813 	.word	0x3022f813
   133d0:	d1ea2b02 	.word	0xd1ea2b02
   133d4:	46204601 	.word	0x46204601
   133d8:	fef2f7ff 	.word	0xfef2f7ff
   133dc:	d0032800 	.word	0xd0032800
   133e0:	e7d9dcd8 	.word	0xe7d9dcd8
   133e4:	e7d52009 	.word	0xe7d52009
   133e8:	8908e9cd 	.word	0x8908e9cd
   133ec:	4632463b 	.word	0x4632463b
   133f0:	46204629 	.word	0x46204629
   133f4:	47f0e8bd 	.word	0x47f0e8bd
   133f8:	bf4cf002 	.word	0xbf4cf002
   133fc:	e7c92023 	.word	0xe7c92023
   13400:	2002029c 	.word	0x2002029c

00013404 <tls_interface_recvfrom>:
   13404:	47f0e92d 	.word	0x47f0e92d
   13408:	e9dd460d 	.word	0xe9dd460d
   1340c:	46168908 	.word	0x46168908
   13410:	4604461f 	.word	0x4604461f
   13414:	fc78f002 	.word	0xfc78f002
   13418:	d0382800 	.word	0xd0382800
   1341c:	b29b6803 	.word	0xb29b6803
   13420:	d00f2b0c 	.word	0xd00f2b0c
   13424:	b29b6803 	.word	0xb29b6803
   13428:	d00b2b0d 	.word	0xd00b2b0d
   1342c:	2b016903 	.word	0x2b016903
   13430:	2b02d01a 	.word	0x2b02d01a
   13434:	2023d010 	.word	0x2023d010
   13438:	fdaaf7fc 	.word	0xfdaaf7fc
   1343c:	30fff04f 	.word	0x30fff04f
   13440:	87f0e8bd 	.word	0x87f0e8bd
   13444:	8908e9cd 	.word	0x8908e9cd
   13448:	4632463b 	.word	0x4632463b
   1344c:	46204629 	.word	0x46204629
   13450:	47f0e8bd 	.word	0x47f0e8bd
   13454:	b858f003 	.word	0xb858f003
   13458:	b29b6803 	.word	0xb29b6803
   1345c:	d0072b02 	.word	0xd0072b02
   13460:	b29b6803 	.word	0xb29b6803
   13464:	d0032b04 	.word	0xd0032b04
   13468:	b29b6803 	.word	0xb29b6803
   1346c:	d1e22b05 	.word	0xd1e22b05
   13470:	eb044b08 	.word	0xeb044b08
   13474:	f81302c4 	.word	0xf81302c4
   13478:	2b023022 	.word	0x2b023022
   1347c:	4601d1db 	.word	0x4601d1db
   13480:	f7ff4620 	.word	0xf7ff4620
   13484:	2800fe9d 	.word	0x2800fe9d
   13488:	dcd5d0dc 	.word	0xdcd5d0dc
   1348c:	2009e7d6 	.word	0x2009e7d6
   13490:	bf00e7d2 	.word	0xbf00e7d2
   13494:	2002029c 	.word	0x2002029c

00013498 <tls_interface_bind>:
   13498:	43f8e92d 	.word	0x43f8e92d
   1349c:	4617460c 	.word	0x4617460c
   134a0:	f0024606 	.word	0xf0024606
   134a4:	2800fc31 	.word	0x2800fc31
   134a8:	6803d04c 	.word	0x6803d04c
   134ac:	b29b4605 	.word	0xb29b4605
   134b0:	d1502b02 	.word	0xd1502b02
   134b4:	463a4621 	.word	0x463a4621
   134b8:	f0034630 	.word	0xf0034630
   134bc:	4604f9fb 	.word	0x4604f9fb
   134c0:	2c00b120 	.word	0x2c00b120
   134c4:	4620dc3f 	.word	0x4620dc3f
   134c8:	83f8e8bd 	.word	0x83f8e8bd
   134cc:	07c6eb06 	.word	0x07c6eb06
   134d0:	8094f8df 	.word	0x8094f8df
   134d4:	f81800bf 	.word	0xf81800bf
   134d8:	2b013007 	.word	0x2b013007
   134dc:	4603d1f3 	.word	0x4603d1f3
   134e0:	0281f247 	.word	0x0281f247
   134e4:	463069a9 	.word	0x463069a9
   134e8:	fd58f002 	.word	0xfd58f002
   134ec:	b3b04681 	.word	0xb3b04681
   134f0:	0107eb08 	.word	0x0107eb08
   134f4:	30142224 	.word	0x30142224
   134f8:	fe6ef010 	.word	0xfe6ef010
   134fc:	3008f8d9 	.word	0x3008f8d9
   13500:	33244649 	.word	0x33244649
   13504:	3008f8c9 	.word	0x3008f8c9
   13508:	2304682a 	.word	0x2304682a
   1350c:	04120c12 	.word	0x04120c12
   13510:	020af042 	.word	0x020af042
   13514:	4628602a 	.word	0x4628602a
   13518:	0281f247 	.word	0x0281f247
   1351c:	fd5ef002 	.word	0xfd5ef002
   13520:	682bb9f8 	.word	0x682bb9f8
   13524:	d41800db 	.word	0xd41800db
   13528:	f04f4630 	.word	0xf04f4630
   1352c:	f64f33ff 	.word	0xf64f33ff
   13530:	210b72ff 	.word	0x210b72ff
   13534:	fd66f002 	.word	0xfd66f002
   13538:	d0c42800 	.word	0xd0c42800
   1353c:	46042304 	.word	0x46042304
   13540:	e7be602b 	.word	0xe7be602b
   13544:	46202409 	.word	0x46202409
   13548:	34fff04f 	.word	0x34fff04f
   1354c:	fd20f7fc 	.word	0xfd20f7fc
   13550:	e8bd4620 	.word	0xe8bd4620
   13554:	242d83f8 	.word	0x242d83f8
   13558:	2473e7f5 	.word	0x2473e7f5
   1355c:	240ce7f3 	.word	0x240ce7f3
   13560:	4604e7f1 	.word	0x4604e7f1
   13564:	bf00e7ad 	.word	0xbf00e7ad
   13568:	2002029c 	.word	0x2002029c

0001356c <tls_interface_connect>:
   1356c:	460eb5f8 	.word	0x460eb5f8
   13570:	46044617 	.word	0x46044617
   13574:	fbc8f002 	.word	0xfbc8f002
   13578:	4b13b1e8 	.word	0x4b13b1e8
   1357c:	02c4eb04 	.word	0x02c4eb04
   13580:	3022f813 	.word	0x3022f813
   13584:	d11c2b02 	.word	0xd11c2b02
   13588:	46056803 	.word	0x46056803
   1358c:	2b02b29b 	.word	0x2b02b29b
   13590:	6803d003 	.word	0x6803d003
   13594:	2b04b29b 	.word	0x2b04b29b
   13598:	463ad113 	.word	0x463ad113
   1359c:	46204631 	.word	0x46204631
   135a0:	f8def003 	.word	0xf8def003
   135a4:	2800b110 	.word	0x2800b110
   135a8:	bdf8dc06 	.word	0xbdf8dc06
   135ac:	46204629 	.word	0x46204629
   135b0:	fe06f7ff 	.word	0xfe06f7ff
   135b4:	2009e7f7 	.word	0x2009e7f7
   135b8:	fceaf7fc 	.word	0xfceaf7fc
   135bc:	30fff04f 	.word	0x30fff04f
   135c0:	202dbdf8 	.word	0x202dbdf8
   135c4:	bf00e7f8 	.word	0xbf00e7f8
   135c8:	2002029c 	.word	0x2002029c

000135cc <tls_interface_listen>:
   135cc:	47f0e92d 	.word	0x47f0e92d
   135d0:	4606460f 	.word	0x4606460f
   135d4:	fb98f002 	.word	0xfb98f002
   135d8:	d06b2800 	.word	0xd06b2800
   135dc:	46046903 	.word	0x46046903
   135e0:	d1652b01 	.word	0xd1652b01
   135e4:	b29b6803 	.word	0xb29b6803
   135e8:	d0562b04 	.word	0xd0562b04
   135ec:	b29b6823 	.word	0xb29b6823
   135f0:	d15d2b0b 	.word	0xd15d2b0b
   135f4:	f8df00f3 	.word	0xf8df00f3
   135f8:	199a90c0 	.word	0x199a90c0
   135fc:	2022f819 	.word	0x2022f819
   13600:	d1552a01 	.word	0xd1552a01
   13604:	44332201 	.word	0x44332201
   13608:	f809009d 	.word	0xf809009d
   1360c:	69a12005 	.word	0x69a12005
   13610:	f2472300 	.word	0xf2472300
   13614:	46300281 	.word	0x46300281
   13618:	8000f8d4 	.word	0x8000f8d4
   1361c:	fcbef002 	.word	0xfcbef002
   13620:	28004682 	.word	0x28004682
   13624:	eb09d042 	.word	0xeb09d042
   13628:	22240105 	.word	0x22240105
   1362c:	f0103014 	.word	0xf0103014
   13630:	f8dafdd3 	.word	0xf8dafdd3
   13634:	46513008 	.word	0x46513008
   13638:	f8ca3324 	.word	0xf8ca3324
   1363c:	68223008 	.word	0x68223008
   13640:	0c124643 	.word	0x0c124643
   13644:	f0420412 	.word	0xf0420412
   13648:	6022020a 	.word	0x6022020a
   1364c:	f2474620 	.word	0xf2474620
   13650:	f0020281 	.word	0xf0020281
   13654:	b9e0fcc3 	.word	0xb9e0fcc3
   13658:	00db6823 	.word	0x00db6823
   1365c:	f04fd40e 	.word	0xf04fd40e
   13660:	f64f33ff 	.word	0xf64f33ff
   13664:	210b72ff 	.word	0x210b72ff
   13668:	f0024630 	.word	0xf0024630
   1366c:	b160fccb 	.word	0xb160fccb
   13670:	f8c42800 	.word	0xf8c42800
   13674:	dc028000 	.word	0xdc028000
   13678:	87f0e8bd 	.word	0x87f0e8bd
   1367c:	f7fc2073 	.word	0xf7fc2073
   13680:	f04ffc87 	.word	0xf04ffc87
   13684:	e8bd30ff 	.word	0xe8bd30ff
   13688:	463987f0 	.word	0x463987f0
   1368c:	f0034630 	.word	0xf0034630
   13690:	2800f9a7 	.word	0x2800f9a7
   13694:	e8bddcf3 	.word	0xe8bddcf3
   13698:	00f387f0 	.word	0x00f387f0
   1369c:	9018f8df 	.word	0x9018f8df
   136a0:	f819199a 	.word	0xf819199a
   136a4:	2a022022 	.word	0x2a022022
   136a8:	e7abd1a0 	.word	0xe7abd1a0
   136ac:	e7e6200c 	.word	0xe7e6200c
   136b0:	e7e4202d 	.word	0xe7e4202d
   136b4:	e7e22009 	.word	0xe7e22009
   136b8:	2002029c 	.word	0x2002029c

000136bc <tls_interface_accept>:
   136bc:	460cb5f8 	.word	0x460cb5f8
   136c0:	461f4616 	.word	0x461f4616
   136c4:	f0024605 	.word	0xf0024605
   136c8:	2800fb1f 	.word	0x2800fb1f
   136cc:	6800d03b 	.word	0x6800d03b
   136d0:	2806b280 	.word	0x2806b280
   136d4:	4621d137 	.word	0x4621d137
   136d8:	4632463b 	.word	0x4632463b
   136dc:	f0034628 	.word	0xf0034628
   136e0:	4604f9f5 	.word	0x4604f9f5
   136e4:	2c00b118 	.word	0x2c00b118
   136e8:	4620dc2e 	.word	0x4620dc2e
   136ec:	4628bdf8 	.word	0x4628bdf8
   136f0:	fb0af002 	.word	0xfb0af002
   136f4:	4f186803 	.word	0x4f186803
   136f8:	3300f423 	.word	0x3300f423
   136fc:	68036003 	.word	0x68036003
   13700:	05c5eb05 	.word	0x05c5eb05
   13704:	1380f423 	.word	0x1380f423
   13708:	60034606 	.word	0x60034606
   1370c:	0185eb07 	.word	0x0185eb07
   13710:	46382224 	.word	0x46382224
   13714:	fd60f010 	.word	0xfd60f010
   13718:	703b2302 	.word	0x703b2302
   1371c:	46206833 	.word	0x46206833
   13720:	041b0c1b 	.word	0x041b0c1b
   13724:	030bf043 	.word	0x030bf043
   13728:	f64f6033 	.word	0xf64f6033
   1372c:	f04f72ff 	.word	0xf04f72ff
   13730:	210c33ff 	.word	0x210c33ff
   13734:	fc66f002 	.word	0xfc66f002
   13738:	28004604 	.word	0x28004604
   1373c:	2000d0d5 	.word	0x2000d0d5
   13740:	fd38f002 	.word	0xfd38f002
   13744:	2409e7cf 	.word	0x2409e7cf
   13748:	f04f4620 	.word	0xf04f4620
   1374c:	f7fc34ff 	.word	0xf7fc34ff
   13750:	4620fc1f 	.word	0x4620fc1f
   13754:	bf00bdf8 	.word	0xbf00bdf8
   13758:	2002029c 	.word	0x2002029c

0001375c <tls_interface_setopt>:
   1375c:	41f0e92d 	.word	0x41f0e92d
   13760:	7f8df5b1 	.word	0x7f8df5b1
   13764:	d11d9f06 	.word	0xd11d9f06
   13768:	b1c3461c 	.word	0xb1c3461c
   1376c:	4605b1bf 	.word	0x4605b1bf
   13770:	f0024616 	.word	0xf0024616
   13774:	b1c8fac9 	.word	0xb1c8fac9
   13778:	b29b6803 	.word	0xb29b6803
   1377c:	d0072b02 	.word	0xd0072b02
   13780:	b29b6803 	.word	0xb29b6803
   13784:	d0032b04 	.word	0xd0032b04
   13788:	b29b6803 	.word	0xb29b6803
   1378c:	d10d2b05 	.word	0xd10d2b05
   13790:	2e033e01 	.word	0x2e033e01
   13794:	e8dfd851 	.word	0xe8dfd851
   13798:	3225f006 	.word	0x3225f006
   1379c:	200e0b18 	.word	0x200e0b18
   137a0:	81f0e8bd 	.word	0x81f0e8bd
   137a4:	41f0e8bd 	.word	0x41f0e8bd
   137a8:	bac8f003 	.word	0xbac8f003
   137ac:	e7f72009 	.word	0xe7f72009
   137b0:	d1392f04 	.word	0xd1392f04
   137b4:	2b026823 	.word	0x2b026823
   137b8:	4a21d836 	.word	0x4a21d836
   137bc:	05c5eb05 	.word	0x05c5eb05
   137c0:	0585eb02 	.word	0x0585eb02
   137c4:	200070ab 	.word	0x200070ab
   137c8:	2f01e7ea 	.word	0x2f01e7ea
   137cc:	7823d12c 	.word	0x7823d12c
   137d0:	d8292b01 	.word	0xd8292b01
   137d4:	eb054a1a 	.word	0xeb054a1a
   137d8:	eb0205c5 	.word	0xeb0205c5
   137dc:	70530285 	.word	0x70530285
   137e0:	e7dd2000 	.word	0xe7dd2000
   137e4:	d11f2f04 	.word	0xd11f2f04
   137e8:	b1f86820 	.word	0xb1f86820
   137ec:	d11b2801 	.word	0xd11b2801
   137f0:	eb054b13 	.word	0xeb054b13
   137f4:	f80305c5 	.word	0xf80305c5
   137f8:	20000025 	.word	0x20000025
   137fc:	ea5fe7d0 	.word	0xea5fe7d0
   13800:	d0110c97 	.word	0xd0110c97
   13804:	0603f017 	.word	0x0603f017
   13808:	eb05d10e 	.word	0xeb05d10e
   1380c:	00ad05c5 	.word	0x00ad05c5
   13810:	1d284b0b 	.word	0x1d284b0b
   13814:	442b4418 	.word	0x442b4418
   13818:	4621463a 	.word	0x4621463a
   1381c:	c003f883 	.word	0xc003f883
   13820:	fcdaf010 	.word	0xfcdaf010
   13824:	e7bb4630 	.word	0xe7bb4630
   13828:	e7b92016 	.word	0xe7b92016
   1382c:	4b042202 	.word	0x4b042202
   13830:	05c5eb05 	.word	0x05c5eb05
   13834:	2025f803 	.word	0x2025f803
   13838:	202ae7b2 	.word	0x202ae7b2
   1383c:	bf00e7b0 	.word	0xbf00e7b0
   13840:	2002029c 	.word	0x2002029c

00013844 <tls_interface_getopt>:
   13844:	41f0e92d 	.word	0x41f0e92d
   13848:	7f8df5b1 	.word	0x7f8df5b1
   1384c:	d1129f06 	.word	0xd1129f06
   13850:	b16b461d 	.word	0xb16b461d
   13854:	4606b167 	.word	0x4606b167
   13858:	f0024614 	.word	0xf0024614
   1385c:	2800fa55 	.word	0x2800fa55
   13860:	3c01d04f 	.word	0x3c01d04f
   13864:	d8522c03 	.word	0xd8522c03
   13868:	f004e8df 	.word	0xf004e8df
   1386c:	09152139 	.word	0x09152139
   13870:	e8bd200e 	.word	0xe8bd200e
   13874:	e8bd81f0 	.word	0xe8bd81f0
   13878:	f00341f0 	.word	0xf00341f0
   1387c:	683bbb1b 	.word	0x683bbb1b
   13880:	d13c2b04 	.word	0xd13c2b04
   13884:	eb064b23 	.word	0xeb064b23
   13888:	eb0306c6 	.word	0xeb0306c6
   1388c:	78b30686 	.word	0x78b30686
   13890:	602b2000 	.word	0x602b2000
   13894:	683be7ed 	.word	0x683be7ed
   13898:	d1302b04 	.word	0xd1302b04
   1389c:	eb064b1d 	.word	0xeb064b1d
   138a0:	eb0306c6 	.word	0xeb0306c6
   138a4:	78730686 	.word	0x78730686
   138a8:	602b2000 	.word	0x602b2000
   138ac:	eb06e7e1 	.word	0xeb06e7e1
   138b0:	491806c6 	.word	0x491806c6
   138b4:	00b6683b 	.word	0x00b6683b
   138b8:	f013198a 	.word	0xf013198a
   138bc:	78d00403 	.word	0x78d00403
   138c0:	089bd121 	.word	0x089bd121
   138c4:	bf284283 	.word	0xbf284283
   138c8:	009a4603 	.word	0x009a4603
   138cc:	3604b1db 	.word	0x3604b1db
   138d0:	603a4431 	.word	0x603a4431
   138d4:	f0104628 	.word	0xf0104628
   138d8:	4620fc7f 	.word	0x4620fc7f
   138dc:	683be7c9 	.word	0x683be7c9
   138e0:	d10c2b04 	.word	0xd10c2b04
   138e4:	eb064b0b 	.word	0xeb064b0b
   138e8:	f81306c6 	.word	0xf81306c6
   138ec:	20003026 	.word	0x20003026
   138f0:	0301f1a3 	.word	0x0301f1a3
   138f4:	f383fab3 	.word	0xf383fab3
   138f8:	602b095b 	.word	0x602b095b
   138fc:	2016e7b9 	.word	0x2016e7b9
   13900:	2009e7b7 	.word	0x2009e7b7
   13904:	2800e7b5 	.word	0x2800e7b5
   13908:	6038d1f9 	.word	0x6038d1f9
   1390c:	202ae7b1 	.word	0x202ae7b1
   13910:	bf00e7af 	.word	0xbf00e7af
   13914:	2002029c 	.word	0x2002029c

00013918 <tls_rpc_ip_event_handler>:
   13918:	f248b538 	.word	0xf248b538
   1391c:	42ab0581 	.word	0x42ab0581
   13920:	d053460c 	.word	0xd053460c
   13924:	0182f249 	.word	0x0182f249
   13928:	d02d428b 	.word	0xd02d428b
   1392c:	0102f248 	.word	0x0102f248
   13930:	d001428b 	.word	0xd001428b
   13934:	bd382001 	.word	0xbd382001
   13938:	d0fb2c00 	.word	0xd0fb2c00
   1393c:	f5b36963 	.word	0xf5b36963
   13940:	d0027f82 	.word	0xd0027f82
   13944:	7f87f5b3 	.word	0x7f87f5b3
   13948:	6823d1f4 	.word	0x6823d1f4
   1394c:	5300f023 	.word	0x5300f023
   13950:	69556023 	.word	0x69556023
   13954:	d1482d00 	.word	0xd1482d00
   13958:	0c1b6823 	.word	0x0c1b6823
   1395c:	f043041b 	.word	0xf043041b
   13960:	60230305 	.word	0x60230305
   13964:	00da6823 	.word	0x00da6823
   13968:	4b25d50c 	.word	0x4b25d50c
   1396c:	02c0eb00 	.word	0x02c0eb00
   13970:	3022f813 	.word	0x3022f813
   13974:	d1052b02 	.word	0xd1052b02
   13978:	f7ff4621 	.word	0xf7ff4621
   1397c:	b108fc21 	.word	0xb108fc21
   13980:	d1352873 	.word	0xd1352873
   13984:	bd382000 	.word	0xbd382000
   13988:	d0fb2c00 	.word	0xd0fb2c00
   1398c:	b29b6823 	.word	0xb29b6823
   13990:	d1f72b0b 	.word	0xd1f72b0b
   13994:	bb486910 	.word	0xbb486910
   13998:	f0436823 	.word	0xf0436823
   1399c:	60236380 	.word	0x60236380
   139a0:	00db6823 	.word	0x00db6823
   139a4:	6823d5ee 	.word	0x6823d5ee
   139a8:	6380f023 	.word	0x6380f023
   139ac:	68236023 	.word	0x68236023
   139b0:	041b0c1b 	.word	0x041b0c1b
   139b4:	030cf043 	.word	0x030cf043
   139b8:	68236023 	.word	0x68236023
   139bc:	3300f443 	.word	0x3300f443
   139c0:	68236023 	.word	0x68236023
   139c4:	1380f443 	.word	0x1380f443
   139c8:	bd386023 	.word	0xbd386023
   139cc:	d0d92900 	.word	0xd0d92900
   139d0:	b29b680b 	.word	0xb29b680b
   139d4:	d1d52b0a 	.word	0xd1d52b0a
   139d8:	b9386950 	.word	0xb9386950
   139dc:	0c1b680b 	.word	0x0c1b680b
   139e0:	f043041b 	.word	0xf043041b
   139e4:	600b030b 	.word	0x600b030b
   139e8:	4628bd38 	.word	0x4628bd38
   139ec:	faccf002 	.word	0xfaccf002
   139f0:	68236060 	.word	0x68236060
   139f4:	f4432000 	.word	0xf4432000
   139f8:	60232380 	.word	0x60232380
   139fc:	bf00bd38 	.word	0xbf00bd38
   13a00:	2002029c 	.word	0x2002029c

00013a04 <rpc_gnss_serialize_utc>:
   13a04:	b1d84603 	.word	0xb1d84603
   13a08:	2000b1d1 	.word	0x2000b1d1
   13a0c:	70482201 	.word	0x70482201
   13a10:	685a700a 	.word	0x685a700a
   13a14:	f8c12010 	.word	0xf8c12010
   13a18:	681a2006 	.word	0x681a2006
   13a1c:	2002f8c1 	.word	0x2002f8c1
   13a20:	200af993 	.word	0x200af993
   13a24:	f993730a 	.word	0xf993730a
   13a28:	73ca200d 	.word	0x73ca200d
   13a2c:	200cf993 	.word	0x200cf993
   13a30:	7a1a738a 	.word	0x7a1a738a
   13a34:	7ada728a 	.word	0x7ada728a
   13a38:	7a5b734a 	.word	0x7a5b734a
   13a3c:	477072cb 	.word	0x477072cb
   13a40:	30fff04f 	.word	0x30fff04f
   13a44:	bf004770 	.word	0xbf004770

00013a48 <rpc_gnss_serialize_ephe>:
   13a48:	28004603 	.word	0x28004603
   13a4c:	2900d04b 	.word	0x2900d04b
   13a50:	2000d049 	.word	0x2000d049
   13a54:	70482202 	.word	0x70482202
   13a58:	68da700a 	.word	0x68da700a
   13a5c:	f8c12040 	.word	0xf8c12040
   13a60:	f9b3200b 	.word	0xf9b3200b
   13a64:	f8a12008 	.word	0xf8a12008
   13a68:	f9932009 	.word	0xf9932009
   13a6c:	720a2006 	.word	0x720a2006
   13a70:	2044f9b3 	.word	0x2044f9b3
   13a74:	f9b3878a 	.word	0xf9b3878a
   13a78:	86ca203e 	.word	0x86ca203e
   13a7c:	2042f9b3 	.word	0x2042f9b3
   13a80:	f9b3874a 	.word	0xf9b3874a
   13a84:	868a203c 	.word	0x868a203c
   13a88:	2046f9b3 	.word	0x2046f9b3
   13a8c:	f9b387ca 	.word	0xf9b387ca
   13a90:	870a2040 	.word	0x870a2040
   13a94:	201cf9b3 	.word	0x201cf9b3
   13a98:	6a9a830a 	.word	0x6a9a830a
   13a9c:	2022f8c1 	.word	0x2022f8c1
   13aa0:	744a7c9a 	.word	0x744a7c9a
   13aa4:	70ca785a 	.word	0x70ca785a
   13aa8:	62ca6b5a 	.word	0x62ca6b5a
   13aac:	202cf9b3 	.word	0x202cf9b3
   13ab0:	885a84ca 	.word	0x885a84ca
   13ab4:	6a1a808a 	.word	0x6a1a808a
   13ab8:	201af8c1 	.word	0x201af8c1
   13abc:	630a6b9a 	.word	0x630a6b9a
   13ac0:	f8c16a5a 	.word	0xf8c16a5a
   13ac4:	6b1a201e 	.word	0x6b1a201e
   13ac8:	781a628a 	.word	0x781a628a
   13acc:	f993708a 	.word	0xf993708a
   13ad0:	73ca2010 	.word	0x73ca2010
   13ad4:	80ca889a 	.word	0x80ca889a
   13ad8:	824a8a9a 	.word	0x824a8a9a
   13adc:	740a7c5a 	.word	0x740a7c5a
   13ae0:	614b699b 	.word	0x614b699b
   13ae4:	f04f4770 	.word	0xf04f4770
   13ae8:	477030ff 	.word	0x477030ff

00013aec <rpc_gnss_serialize_alm>:
   13aec:	b3604603 	.word	0xb3604603
   13af0:	2000b359 	.word	0x2000b359
   13af4:	70482203 	.word	0x70482203
   13af8:	f9b3700a 	.word	0xf9b3700a
   13afc:	2021201c 	.word	0x2021201c
   13b00:	201df8a1 	.word	0x201df8a1
   13b04:	201ef9b3 	.word	0x201ef9b3
   13b08:	201ff8a1 	.word	0x201ff8a1
   13b0c:	2006f9b3 	.word	0x2006f9b3
   13b10:	889a810a 	.word	0x889a810a
   13b14:	78da80ca 	.word	0x78da80ca
   13b18:	699a714a 	.word	0x699a714a
   13b1c:	2019f8c1 	.word	0x2019f8c1
   13b20:	f8c1691a 	.word	0xf8c1691a
   13b24:	f9b32011 	.word	0xf9b32011
   13b28:	814a2008 	.word	0x814a2008
   13b2c:	f8c168da 	.word	0xf8c168da
   13b30:	7a9a200d 	.word	0x7a9a200d
   13b34:	781a730a 	.word	0x781a730a
   13b38:	789a708a 	.word	0x789a708a
   13b3c:	695a710a 	.word	0x695a710a
   13b40:	2015f8c1 	.word	0x2015f8c1
   13b44:	70cb785b 	.word	0x70cb785b
   13b48:	f04f4770 	.word	0xf04f4770
   13b4c:	477030ff 	.word	0x477030ff

00013b50 <rpc_gnss_serialize_klob>:
   13b50:	b1f04603 	.word	0xb1f04603
   13b54:	2000b1e9 	.word	0x2000b1e9
   13b58:	70482204 	.word	0x70482204
   13b5c:	f993700a 	.word	0xf993700a
   13b60:	200a2000 	.word	0x200a2000
   13b64:	f993708a 	.word	0xf993708a
   13b68:	70ca2001 	.word	0x70ca2001
   13b6c:	2002f993 	.word	0x2002f993
   13b70:	f993710a 	.word	0xf993710a
   13b74:	714a2003 	.word	0x714a2003
   13b78:	2004f993 	.word	0x2004f993
   13b7c:	f993718a 	.word	0xf993718a
   13b80:	71ca2005 	.word	0x71ca2005
   13b84:	2006f993 	.word	0x2006f993
   13b88:	f993720a 	.word	0xf993720a
   13b8c:	724b3007 	.word	0x724b3007
   13b90:	f04f4770 	.word	0xf04f4770
   13b94:	477030ff 	.word	0x477030ff

00013b98 <rpc_gnss_serialize_nequick>:
   13b98:	b1984603 	.word	0xb1984603
   13b9c:	2000b191 	.word	0x2000b191
   13ba0:	70482205 	.word	0x70482205
   13ba4:	f9b3700a 	.word	0xf9b3700a
   13ba8:	200a2000 	.word	0x200a2000
   13bac:	f9b3804a 	.word	0xf9b3804a
   13bb0:	808a2002 	.word	0x808a2002
   13bb4:	2004f9b3 	.word	0x2004f9b3
   13bb8:	799a80ca 	.word	0x799a80ca
   13bbc:	79db720a 	.word	0x79db720a
   13bc0:	4770724b 	.word	0x4770724b
   13bc4:	30fff04f 	.word	0x30fff04f
   13bc8:	bf004770 	.word	0xbf004770

00013bcc <rpc_gnss_serialize_time_and_sv_tow>:
   13bcc:	b309b310 	.word	0xb309b310
   13bd0:	2500b470 	.word	0x2500b470
   13bd4:	460c2606 	.word	0x460c2606
   13bd8:	700e704d 	.word	0x700e704d
   13bdc:	8805462b 	.word	0x8805462b
   13be0:	804d4602 	.word	0x804d4602
   13be4:	f8c168c5 	.word	0xf8c168c5
   13be8:	8905500a 	.word	0x8905500a
   13bec:	6840810d 	.word	0x6840810d
   13bf0:	8a156048 	.word	0x8a156048
   13bf4:	0043eb03 	.word	0x0043eb03
   13bf8:	81c54408 	.word	0x81c54408
   13bfc:	33017c90 	.word	0x33017c90
   13c00:	74202b20 	.word	0x74202b20
   13c04:	0204f102 	.word	0x0204f102
   13c08:	0403f104 	.word	0x0403f104
   13c0c:	206ed1f1 	.word	0x206ed1f1
   13c10:	4770bc70 	.word	0x4770bc70
   13c14:	30fff04f 	.word	0x30fff04f
   13c18:	bf004770 	.word	0xbf004770

00013c1c <rpc_gnss_serialize_location>:
   13c1c:	b1c84603 	.word	0xb1c84603
   13c20:	2000b1c1 	.word	0x2000b1c1
   13c24:	70482207 	.word	0x70482207
   13c28:	f9b3700a 	.word	0xf9b3700a
   13c2c:	20112008 	.word	0x20112008
   13c30:	7b9a814a 	.word	0x7b9a814a
   13c34:	681a740a 	.word	0x681a740a
   13c38:	2002f8c1 	.word	0x2002f8c1
   13c3c:	f8c1685a 	.word	0xf8c1685a
   13c40:	7b1a2006 	.word	0x7b1a2006
   13c44:	7b5a738a 	.word	0x7b5a738a
   13c48:	7a9a73ca 	.word	0x7a9a73ca
   13c4c:	7adb730a 	.word	0x7adb730a
   13c50:	4770734b 	.word	0x4770734b
   13c54:	30fff04f 	.word	0x30fff04f
   13c58:	bf004770 	.word	0xbf004770

00013c5c <rpc_gnss_serialize_integrity>:
   13c5c:	b141b148 	.word	0xb141b148
   13c60:	23082200 	.word	0x23082200
   13c64:	700b704a 	.word	0x700b704a
   13c68:	20066803 	.word	0x20066803
   13c6c:	3002f8c1 	.word	0x3002f8c1
   13c70:	f04f4770 	.word	0xf04f4770
   13c74:	477030ff 	.word	0x477030ff

00013c78 <ipc_trace_init>:
   13c78:	60184b01 	.word	0x60184b01
   13c7c:	bf004770 	.word	0xbf004770
   13c80:	200203c8 	.word	0x200203c8

00013c84 <bsd_os_trace_irq_handler>:
   13c84:	4b6cb5f0 	.word	0x4b6cb5f0
   13c88:	781bb083 	.word	0x781bb083
   13c8c:	f0002b00 	.word	0xf0002b00
   13c90:	4b6a80ad 	.word	0x4b6a80ad
   13c94:	68a2681c 	.word	0x68a2681c
   13c98:	429a6863 	.word	0x429a6863
   13c9c:	f64bd02d 	.word	0xf64bd02d
   13ca0:	f8ad63ef 	.word	0xf8ad63ef
   13ca4:	78233000 	.word	0x78233000
   13ca8:	f88d466e 	.word	0xf88d466e
   13cac:	68633004 	.word	0x68633004
   13cb0:	429a2105 	.word	0x429a2105
   13cb4:	6927bf2a 	.word	0x6927bf2a
   13cb8:	1abf1a9f 	.word	0x1abf1a9f
   13cbc:	bf94429a 	.word	0xbf94429a
   13cc0:	68e52500 	.word	0x68e52500
   13cc4:	bf88b2bf 	.word	0xbf88b2bf
   13cc8:	46301b5b 	.word	0x46301b5b
   13ccc:	b29dbf88 	.word	0xb29dbf88
   13cd0:	7002f8ad 	.word	0x7002f8ad
   13cd4:	fdb3f010 	.word	0xfdb3f010
   13cd8:	1002f8bd 	.word	0x1002f8bd
   13cdc:	f01068a0 	.word	0xf01068a0
   13ce0:	68a3fdae 	.word	0x68a3fdae
   13ce4:	441f6922 	.word	0x441f6922
   13ce8:	bf084297 	.word	0xbf084297
   13cec:	60a768e3 	.word	0x60a768e3
   13cf0:	60a3bf08 	.word	0x60a3bf08
   13cf4:	f0402d00 	.word	0xf0402d00
   13cf8:	4b51808d 	.word	0x4b51808d
   13cfc:	68a2681c 	.word	0x68a2681c
   13d00:	429a6863 	.word	0x429a6863
   13d04:	f64bd02c 	.word	0xf64bd02c
   13d08:	f8ad63ef 	.word	0xf8ad63ef
   13d0c:	78233000 	.word	0x78233000
   13d10:	f88d466e 	.word	0xf88d466e
   13d14:	68633004 	.word	0x68633004
   13d18:	429a2105 	.word	0x429a2105
   13d1c:	6927bf2a 	.word	0x6927bf2a
   13d20:	1abf1a9f 	.word	0x1abf1a9f
   13d24:	bf94429a 	.word	0xbf94429a
   13d28:	68e52500 	.word	0x68e52500
   13d2c:	bf88b2bf 	.word	0xbf88b2bf
   13d30:	46301b5b 	.word	0x46301b5b
   13d34:	b29dbf88 	.word	0xb29dbf88
   13d38:	7002f8ad 	.word	0x7002f8ad
   13d3c:	fd7ff010 	.word	0xfd7ff010
   13d40:	1002f8bd 	.word	0x1002f8bd
   13d44:	f01068a0 	.word	0xf01068a0
   13d48:	68a3fd7a 	.word	0x68a3fd7a
   13d4c:	441f6922 	.word	0x441f6922
   13d50:	bf084297 	.word	0xbf084297
   13d54:	60a768e3 	.word	0x60a768e3
   13d58:	60a3bf08 	.word	0x60a3bf08
   13d5c:	d1482d00 	.word	0xd1482d00
   13d60:	681c4b38 	.word	0x681c4b38
   13d64:	686368a2 	.word	0x686368a2
   13d68:	d02b429a 	.word	0xd02b429a
   13d6c:	63eff64b 	.word	0x63eff64b
   13d70:	3000f8ad 	.word	0x3000f8ad
   13d74:	466e7823 	.word	0x466e7823
   13d78:	3004f88d 	.word	0x3004f88d
   13d7c:	21056863 	.word	0x21056863
   13d80:	bf2a429a 	.word	0xbf2a429a
   13d84:	1a9f6927 	.word	0x1a9f6927
   13d88:	429a1abf 	.word	0x429a1abf
   13d8c:	2500bf94 	.word	0x2500bf94
   13d90:	b2bf68e5 	.word	0xb2bf68e5
   13d94:	1b5bbf88 	.word	0x1b5bbf88
   13d98:	bf884630 	.word	0xbf884630
   13d9c:	f8adb29d 	.word	0xf8adb29d
   13da0:	f0107002 	.word	0xf0107002
   13da4:	f8bdfd4c 	.word	0xf8bdfd4c
   13da8:	68a01002 	.word	0x68a01002
   13dac:	fd47f010 	.word	0xfd47f010
   13db0:	692268a3 	.word	0x692268a3
   13db4:	4297441f 	.word	0x4297441f
   13db8:	68e3bf08 	.word	0x68e3bf08
   13dbc:	bf0860a7 	.word	0xbf0860a7
   13dc0:	b90d60a3 	.word	0xb90d60a3
   13dc4:	bdf0b003 	.word	0xbdf0b003
   13dc8:	21054630 	.word	0x21054630
   13dcc:	5002f8ad 	.word	0x5002f8ad
   13dd0:	fd35f010 	.word	0xfd35f010
   13dd4:	1002f8bd 	.word	0x1002f8bd
   13dd8:	f01068e0 	.word	0xf01068e0
   13ddc:	f8bdfd30 	.word	0xf8bdfd30
   13de0:	68e32002 	.word	0x68e32002
   13de4:	60a34413 	.word	0x60a34413
   13de8:	bdf0b003 	.word	0xbdf0b003
   13dec:	f996f7fc 	.word	0xf996f7fc
   13df0:	2105e74f 	.word	0x2105e74f
   13df4:	f8ad4630 	.word	0xf8ad4630
   13df8:	f0105002 	.word	0xf0105002
   13dfc:	f8bdfd20 	.word	0xf8bdfd20
   13e00:	68e01002 	.word	0x68e01002
   13e04:	fd1bf010 	.word	0xfd1bf010
   13e08:	2002f8bd 	.word	0x2002f8bd
   13e0c:	441368e3 	.word	0x441368e3
   13e10:	e7a560a3 	.word	0xe7a560a3
   13e14:	46302105 	.word	0x46302105
   13e18:	5002f8ad 	.word	0x5002f8ad
   13e1c:	fd0ff010 	.word	0xfd0ff010
   13e20:	1002f8bd 	.word	0x1002f8bd
   13e24:	f01068e0 	.word	0xf01068e0
   13e28:	f8bdfd0a 	.word	0xf8bdfd0a
   13e2c:	68e32002 	.word	0x68e32002
   13e30:	60a34413 	.word	0x60a34413
   13e34:	bf00e761 	.word	0xbf00e761
   13e38:	20026c5a 	.word	0x20026c5a
   13e3c:	200203c4 	.word	0x200203c4
   13e40:	200203bc 	.word	0x200203bc
   13e44:	200203c0 	.word	0x200203c0

00013e48 <ipc_trace_handle>:
   13e48:	e92d2200 	.word	0xe92d2200
   13e4c:	4bb04ff0 	.word	0x4bb04ff0
   13e50:	681bb083 	.word	0x681bb083
   13e54:	695c6919 	.word	0x695c6919
   13e58:	741a7c18 	.word	0x741a7c18
   13e5c:	745a7c58 	.word	0x745a7c58
   13e60:	749a7c98 	.word	0x749a7c98
   13e64:	74da7cd8 	.word	0x74da7cd8
   13e68:	751a7d18 	.word	0x751a7d18
   13e6c:	755a7d58 	.word	0x755a7d58
   13e70:	759a7d98 	.word	0x759a7d98
   13e74:	75da7dd8 	.word	0x75da7dd8
   13e78:	3901b1b9 	.word	0x3901b1b9
   13e7c:	d8142903 	.word	0xd8142903
   13e80:	f011e8df 	.word	0xf011e8df
   13e84:	010300d6 	.word	0x010300d6
   13e88:	00160004 	.word	0x00160004
   13e8c:	20032501 	.word	0x20032501
   13e90:	f06f2200 	.word	0xf06f2200
   13e94:	4c9f015f 	.word	0x4c9f015f
   13e98:	7a1c7025 	.word	0x7a1c7025
   13e9c:	7a587218 	.word	0x7a587218
   13ea0:	7a98725a 	.word	0x7a98725a
   13ea4:	7ada729a 	.word	0x7ada729a
   13ea8:	b00372d9 	.word	0xb00372d9
   13eac:	8ff0e8bd 	.word	0x8ff0e8bd
   13eb0:	22002104 	.word	0x22002104
   13eb4:	005ff06f 	.word	0x005ff06f
   13eb8:	72197a1c 	.word	0x72197a1c
   13ebc:	725a7a59 	.word	0x725a7a59
   13ec0:	7a9c4994 	.word	0x7a9c4994
   13ec4:	7adc729a 	.word	0x7adc729a
   13ec8:	700a72d8 	.word	0x700a72d8
   13ecc:	2b00780b 	.word	0x2b00780b
   13ed0:	8117f000 	.word	0x8117f000
   13ed4:	681c4b90 	.word	0x681c4b90
   13ed8:	686368a2 	.word	0x686368a2
   13edc:	d02d429a 	.word	0xd02d429a
   13ee0:	63eff64b 	.word	0x63eff64b
   13ee4:	3000f8ad 	.word	0x3000f8ad
   13ee8:	466e7823 	.word	0x466e7823
   13eec:	3004f88d 	.word	0x3004f88d
   13ef0:	21056863 	.word	0x21056863
   13ef4:	bf2a429a 	.word	0xbf2a429a
   13ef8:	1a9f6927 	.word	0x1a9f6927
   13efc:	429a1abf 	.word	0x429a1abf
   13f00:	2500bf94 	.word	0x2500bf94
   13f04:	b2bf68e5 	.word	0xb2bf68e5
   13f08:	1b5bbf88 	.word	0x1b5bbf88
   13f0c:	bf884630 	.word	0xbf884630
   13f10:	f8adb29d 	.word	0xf8adb29d
   13f14:	f0107002 	.word	0xf0107002
   13f18:	f8bdfc92 	.word	0xf8bdfc92
   13f1c:	68a01002 	.word	0x68a01002
   13f20:	fc8df010 	.word	0xfc8df010
   13f24:	692268a3 	.word	0x692268a3
   13f28:	4297441f 	.word	0x4297441f
   13f2c:	68e3bf08 	.word	0x68e3bf08
   13f30:	bf0860a7 	.word	0xbf0860a7
   13f34:	2d0060a3 	.word	0x2d0060a3
   13f38:	80d2f040 	.word	0x80d2f040
   13f3c:	681c4b77 	.word	0x681c4b77
   13f40:	686368a2 	.word	0x686368a2
   13f44:	d02d429a 	.word	0xd02d429a
   13f48:	63eff64b 	.word	0x63eff64b
   13f4c:	3000f8ad 	.word	0x3000f8ad
   13f50:	466e7823 	.word	0x466e7823
   13f54:	3004f88d 	.word	0x3004f88d
   13f58:	21056863 	.word	0x21056863
   13f5c:	bf2a429a 	.word	0xbf2a429a
   13f60:	1a9f6927 	.word	0x1a9f6927
   13f64:	429a1abf 	.word	0x429a1abf
   13f68:	2500bf94 	.word	0x2500bf94
   13f6c:	b2bf68e5 	.word	0xb2bf68e5
   13f70:	1b5bbf88 	.word	0x1b5bbf88
   13f74:	bf884630 	.word	0xbf884630
   13f78:	f8adb29d 	.word	0xf8adb29d
   13f7c:	f0107002 	.word	0xf0107002
   13f80:	f8bdfc5e 	.word	0xf8bdfc5e
   13f84:	68a01002 	.word	0x68a01002
   13f88:	fc59f010 	.word	0xfc59f010
   13f8c:	692268a3 	.word	0x692268a3
   13f90:	4297441f 	.word	0x4297441f
   13f94:	68e3bf08 	.word	0x68e3bf08
   13f98:	bf0860a7 	.word	0xbf0860a7
   13f9c:	2d0060a3 	.word	0x2d0060a3
   13fa0:	808df040 	.word	0x808df040
   13fa4:	681c4b5e 	.word	0x681c4b5e
   13fa8:	686368a2 	.word	0x686368a2
   13fac:	f43f429a 	.word	0xf43f429a
   13fb0:	f64baf7c 	.word	0xf64baf7c
   13fb4:	f8ad63ef 	.word	0xf8ad63ef
   13fb8:	78233000 	.word	0x78233000
   13fbc:	f88d466e 	.word	0xf88d466e
   13fc0:	68633004 	.word	0x68633004
   13fc4:	429a2105 	.word	0x429a2105
   13fc8:	6927bf2a 	.word	0x6927bf2a
   13fcc:	1abf1a9f 	.word	0x1abf1a9f
   13fd0:	bf94429a 	.word	0xbf94429a
   13fd4:	68e52500 	.word	0x68e52500
   13fd8:	bf88b2bf 	.word	0xbf88b2bf
   13fdc:	46301b5b 	.word	0x46301b5b
   13fe0:	b29dbf88 	.word	0xb29dbf88
   13fe4:	7002f8ad 	.word	0x7002f8ad
   13fe8:	fc29f010 	.word	0xfc29f010
   13fec:	1002f8bd 	.word	0x1002f8bd
   13ff0:	f01068a0 	.word	0xf01068a0
   13ff4:	68a3fc24 	.word	0x68a3fc24
   13ff8:	441f6922 	.word	0x441f6922
   13ffc:	bf084297 	.word	0xbf084297
   14000:	60a768e3 	.word	0x60a768e3
   14004:	60a3bf08 	.word	0x60a3bf08
   14008:	f43f2d00 	.word	0xf43f2d00
   1400c:	2105af4e 	.word	0x2105af4e
   14010:	f8ad4630 	.word	0xf8ad4630
   14014:	f0105002 	.word	0xf0105002
   14018:	f8bdfc12 	.word	0xf8bdfc12
   1401c:	68e01002 	.word	0x68e01002
   14020:	fc0df010 	.word	0xfc0df010
   14024:	2002f8bd 	.word	0x2002f8bd
   14028:	441368e3 	.word	0x441368e3
   1402c:	e73c60a3 	.word	0xe73c60a3
   14030:	78114a38 	.word	0x78114a38
   14034:	2100b109 	.word	0x2100b109
   14038:	68a57011 	.word	0x68a57011
   1403c:	d0392d00 	.word	0xd0392d00
   14040:	0c00f04f 	.word	0x0c00f04f
   14044:	a0d4f8df 	.word	0xa0d4f8df
   14048:	b0ccf8df 	.word	0xb0ccf8df
   1404c:	46e14934 	.word	0x46e14934
   14050:	46624666 	.word	0x46624666
   14054:	e000f8d1 	.word	0xe000f8d1
   14058:	8000f8da 	.word	0x8000f8da
   1405c:	7000f8db 	.word	0x7000f8db
   14060:	2963e008 	.word	0x2963e008
   14064:	2961d016 	.word	0x2961d016
   14068:	4607bf04 	.word	0x4607bf04
   1406c:	32012601 	.word	0x32012601
   14070:	d01342aa 	.word	0xd01342aa
   14074:	eb041c91 	.word	0xeb041c91
   14078:	68480181 	.word	0x68480181
   1407c:	29627801 	.word	0x29627801
   14080:	4680d1ef 	.word	0x4680d1ef
   14084:	0901f04f 	.word	0x0901f04f
   14088:	f7fce7f1 	.word	0xf7fce7f1
   1408c:	b003f83f 	.word	0xb003f83f
   14090:	8ff0e8bd 	.word	0x8ff0e8bd
   14094:	f04f4686 	.word	0xf04f4686
   14098:	e7e80c01 	.word	0xe7e80c01
   1409c:	f1b9bba6 	.word	0xf1b9bba6
   140a0:	d0010f00 	.word	0xd0010f00
   140a4:	8000f8ca 	.word	0x8000f8ca
   140a8:	0f00f1bc 	.word	0x0f00f1bc
   140ac:	4a1cd002 	.word	0x4a1cd002
   140b0:	e000f8c2 	.word	0xe000f8c2
   140b4:	22002001 	.word	0x22002001
   140b8:	015ff06f 	.word	0x015ff06f
   140bc:	2105e6ed 	.word	0x2105e6ed
   140c0:	f8ad4630 	.word	0xf8ad4630
   140c4:	f0105002 	.word	0xf0105002
   140c8:	f8bdfbba 	.word	0xf8bdfbba
   140cc:	68e01002 	.word	0x68e01002
   140d0:	fbb5f010 	.word	0xfbb5f010
   140d4:	2002f8bd 	.word	0x2002f8bd
   140d8:	441368e3 	.word	0x441368e3
   140dc:	e76160a3 	.word	0xe76160a3
   140e0:	46302105 	.word	0x46302105
   140e4:	5002f8ad 	.word	0x5002f8ad
   140e8:	fba9f010 	.word	0xfba9f010
   140ec:	1002f8bd 	.word	0x1002f8bd
   140f0:	f01068e0 	.word	0xf01068e0
   140f4:	f8bdfba4 	.word	0xf8bdfba4
   140f8:	68e32002 	.word	0x68e32002
   140fc:	60a34413 	.word	0x60a34413
   14100:	f7fce71c 	.word	0xf7fce71c
   14104:	e6e5f80b 	.word	0xe6e5f80b
   14108:	7000f8cb 	.word	0x7000f8cb
   1410c:	bf00e7c7 	.word	0xbf00e7c7
   14110:	200203c8 	.word	0x200203c8
   14114:	20026c5a 	.word	0x20026c5a
   14118:	200203c4 	.word	0x200203c4
   1411c:	200203bc 	.word	0x200203bc
   14120:	200203c0 	.word	0x200203c0

00014124 <rpc_trace_coredump_in_progress>:
   14124:	78184b01 	.word	0x78184b01
   14128:	bf004770 	.word	0xbf004770
   1412c:	20026c5a 	.word	0x20026c5a

00014130 <ecp_modp>:
   14130:	6e4bb570 	.word	0x6e4bb570
   14134:	2b004604 	.word	0x2b004604
   14138:	6803d03d 	.word	0x6803d03d
   1413c:	2b00460d 	.word	0x2b00460d
   14140:	4620db2f 	.word	0x4620db2f
   14144:	fe06f005 	.word	0xfe06f005
   14148:	ebb06dab 	.word	0xebb06dab
   1414c:	d82d0f43 	.word	0xd82d0f43
   14150:	46206e6b 	.word	0x46206e6b
   14154:	46064798 	.word	0x46064798
   14158:	3504bb08 	.word	0x3504bb08
   1415c:	2100e00a 	.word	0x2100e00a
   14160:	f0064620 	.word	0xf0064620
   14164:	b1a0f8c7 	.word	0xb1a0f8c7
   14168:	4621462a 	.word	0x4621462a
   1416c:	f0064620 	.word	0xf0064620
   14170:	b9e8fa79 	.word	0xb9e8fa79
   14174:	2b006823 	.word	0x2b006823
   14178:	4629dbf1 	.word	0x4629dbf1
   1417c:	f0064620 	.word	0xf0064620
   14180:	2800f851 	.word	0x2800f851
   14184:	462adb0b 	.word	0x462adb0b
   14188:	46204621 	.word	0x46204621
   1418c:	f9aaf006 	.word	0xf9aaf006
   14190:	4629b970 	.word	0x4629b970
   14194:	f0064620 	.word	0xf0064620
   14198:	2800f845 	.word	0x2800f845
   1419c:	4630daf3 	.word	0x4630daf3
   141a0:	2100bd70 	.word	0x2100bd70
   141a4:	f8a6f006 	.word	0xf8a6f006
   141a8:	d0ca2800 	.word	0xd0ca2800
   141ac:	e7f64e05 	.word	0xe7f64e05
   141b0:	46304606 	.word	0x46304606
   141b4:	1d0abd70 	.word	0x1d0abd70
   141b8:	4070e8bd 	.word	0x4070e8bd
   141bc:	f0074601 	.word	0xf0074601
   141c0:	bf00b84d 	.word	0xbf00b84d
   141c4:	ffffb080 	.word	0xffffb080

000141c8 <ecp_double_jac>:
   141c8:	43f0e92d 	.word	0x43f0e92d
   141cc:	b08d4606 	.word	0xb08d4606
   141d0:	46884668 	.word	0x46884668
   141d4:	f0054615 	.word	0xf0054615
   141d8:	a803fb63 	.word	0xa803fb63
   141dc:	fb60f005 	.word	0xfb60f005
   141e0:	f005a806 	.word	0xf005a806
   141e4:	a809fb5d 	.word	0xa809fb5d
   141e8:	fb5af005 	.word	0xfb5af005
   141ec:	2b0069b3 	.word	0x2b0069b3
   141f0:	80b2f000 	.word	0x80b2f000
   141f4:	4629462a 	.word	0x4629462a
   141f8:	f006a803 	.word	0xf006a803
   141fc:	4604fb67 	.word	0x4604fb67
   14200:	4668b178 	.word	0x4668b178
   14204:	fb54f005 	.word	0xfb54f005
   14208:	f005a803 	.word	0xf005a803
   1420c:	a806fb51 	.word	0xa806fb51
   14210:	fb4ef005 	.word	0xfb4ef005
   14214:	f005a809 	.word	0xf005a809
   14218:	4620fb4b 	.word	0x4620fb4b
   1421c:	e8bdb00d 	.word	0xe8bdb00d
   14220:	463183f0 	.word	0x463183f0
   14224:	f7ffa803 	.word	0xf7ffa803
   14228:	4604ff83 	.word	0x4604ff83
   1422c:	d1e82800 	.word	0xd1e82800
   14230:	a9032203 	.word	0xa9032203
   14234:	f0064668 	.word	0xf0064668
   14238:	4604fc41 	.word	0x4604fc41
   1423c:	d1e02800 	.word	0xd1e02800
   14240:	e0071d37 	.word	0xe0071d37
   14244:	4669463a 	.word	0x4669463a
   14248:	f0064668 	.word	0xf0064668
   1424c:	4604f94b 	.word	0x4604f94b
   14250:	d1d62800 	.word	0xd1d62800
   14254:	46684639 	.word	0x46684639
   14258:	ffe4f005 	.word	0xffe4f005
   1425c:	daf12800 	.word	0xdaf12800
   14260:	0910f106 	.word	0x0910f106
   14264:	21004648 	.word	0x21004648
   14268:	f844f006 	.word	0xf844f006
   1426c:	f0402800 	.word	0xf0402800
   14270:	f10580e2 	.word	0xf10580e2
   14274:	464a090c 	.word	0x464a090c
   14278:	a8064649 	.word	0xa8064649
   1427c:	fb26f006 	.word	0xfb26f006
   14280:	28004604 	.word	0x28004604
   14284:	4631d1bd 	.word	0x4631d1bd
   14288:	f7ffa806 	.word	0xf7ffa806
   1428c:	4604ff51 	.word	0x4604ff51
   14290:	d1b62800 	.word	0xd1b62800
   14294:	a8062101 	.word	0xa8062101
   14298:	fe9ef005 	.word	0xfe9ef005
   1429c:	b1404604 	.word	0xb1404604
   142a0:	a906e7af 	.word	0xa906e7af
   142a4:	4608463a 	.word	0x4608463a
   142a8:	f91cf006 	.word	0xf91cf006
   142ac:	28004604 	.word	0x28004604
   142b0:	4639d1a7 	.word	0x4639d1a7
   142b4:	f005a806 	.word	0xf005a806
   142b8:	2800ffb5 	.word	0x2800ffb5
   142bc:	aa06daf1 	.word	0xaa06daf1
   142c0:	a8034629 	.word	0xa8034629
   142c4:	fb02f006 	.word	0xfb02f006
   142c8:	28004604 	.word	0x28004604
   142cc:	4631d199 	.word	0x4631d199
   142d0:	f7ffa803 	.word	0xf7ffa803
   142d4:	4604ff2d 	.word	0x4604ff2d
   142d8:	d1922800 	.word	0xd1922800
   142dc:	a8032101 	.word	0xa8032101
   142e0:	fe7af005 	.word	0xfe7af005
   142e4:	b1404604 	.word	0xb1404604
   142e8:	a903e78b 	.word	0xa903e78b
   142ec:	4608463a 	.word	0x4608463a
   142f0:	f8f8f006 	.word	0xf8f8f006
   142f4:	28004604 	.word	0x28004604
   142f8:	4639d183 	.word	0x4639d183
   142fc:	f005a803 	.word	0xf005a803
   14300:	2800ff91 	.word	0x2800ff91
   14304:	aa06daf1 	.word	0xaa06daf1
   14308:	a8094611 	.word	0xa8094611
   1430c:	fadef006 	.word	0xfadef006
   14310:	28004604 	.word	0x28004604
   14314:	af75f47f 	.word	0xaf75f47f
   14318:	a8094631 	.word	0xa8094631
   1431c:	ff08f7ff 	.word	0xff08f7ff
   14320:	28004604 	.word	0x28004604
   14324:	af6df47f 	.word	0xaf6df47f
   14328:	a8092101 	.word	0xa8092101
   1432c:	fe54f005 	.word	0xfe54f005
   14330:	28004604 	.word	0x28004604
   14334:	af65f47f 	.word	0xaf65f47f
   14338:	a8094639 	.word	0xa8094639
   1433c:	ff72f005 	.word	0xff72f005
   14340:	f2c02800 	.word	0xf2c02800
   14344:	a90980c5 	.word	0xa90980c5
   14348:	4608463a 	.word	0x4608463a
   1434c:	f8caf006 	.word	0xf8caf006
   14350:	28004604 	.word	0x28004604
   14354:	e754d0f0 	.word	0xe754d0f0
   14358:	0218f105 	.word	0x0218f105
   1435c:	a8034611 	.word	0xa8034611
   14360:	fab4f006 	.word	0xfab4f006
   14364:	28004604 	.word	0x28004604
   14368:	af4bf47f 	.word	0xaf4bf47f
   1436c:	a8034631 	.word	0xa8034631
   14370:	fedef7ff 	.word	0xfedef7ff
   14374:	28004604 	.word	0x28004604
   14378:	af43f47f 	.word	0xaf43f47f
   1437c:	4629aa03 	.word	0x4629aa03
   14380:	f006a806 	.word	0xf006a806
   14384:	4604f96f 	.word	0x4604f96f
   14388:	f47f2800 	.word	0xf47f2800
   1438c:	1d37af3a 	.word	0x1d37af3a
   14390:	a906e008 	.word	0xa906e008
   14394:	4608463a 	.word	0x4608463a
   14398:	f8a4f006 	.word	0xf8a4f006
   1439c:	28004604 	.word	0x28004604
   143a0:	af2ff47f 	.word	0xaf2ff47f
   143a4:	a8064639 	.word	0xa8064639
   143a8:	ff3cf005 	.word	0xff3cf005
   143ac:	daf02800 	.word	0xdaf02800
   143b0:	4629aa03 	.word	0x4629aa03
   143b4:	f006a809 	.word	0xf006a809
   143b8:	4604f9c9 	.word	0x4604f9c9
   143bc:	e720b170 	.word	0xe720b170
   143c0:	a8092100 	.word	0xa8092100
   143c4:	ff96f005 	.word	0xff96f005
   143c8:	a909b158 	.word	0xa909b158
   143cc:	4608463a 	.word	0x4608463a
   143d0:	f948f006 	.word	0xf948f006
   143d4:	28004604 	.word	0x28004604
   143d8:	af13f47f 	.word	0xaf13f47f
   143dc:	2b009b09 	.word	0x2b009b09
   143e0:	aa09dbee 	.word	0xaa09dbee
   143e4:	a803a906 	.word	0xa803a906
   143e8:	fa70f006 	.word	0xfa70f006
   143ec:	28004604 	.word	0x28004604
   143f0:	af07f47f 	.word	0xaf07f47f
   143f4:	a8034631 	.word	0xa8034631
   143f8:	fe9af7ff 	.word	0xfe9af7ff
   143fc:	28004604 	.word	0x28004604
   14400:	aefff47f 	.word	0xaefff47f
   14404:	a9032203 	.word	0xa9032203
   14408:	f0064668 	.word	0xf0064668
   1440c:	4604fb57 	.word	0x4604fb57
   14410:	f47f2800 	.word	0xf47f2800
   14414:	4639aef6 	.word	0x4639aef6
   14418:	f0054668 	.word	0xf0054668
   1441c:	2800ff03 	.word	0x2800ff03
   14420:	af27f6ff 	.word	0xaf27f6ff
   14424:	4669463a 	.word	0x4669463a
   14428:	f0064668 	.word	0xf0064668
   1442c:	4604f85b 	.word	0x4604f85b
   14430:	d0f02800 	.word	0xd0f02800
   14434:	f105e6e5 	.word	0xf105e6e5
   14438:	46110218 	.word	0x46110218
   1443c:	f006a803 	.word	0xf006a803
   14440:	4604fa45 	.word	0x4604fa45
   14444:	f47f2800 	.word	0xf47f2800
   14448:	4631aedc 	.word	0x4631aedc
   1444c:	f7ffa803 	.word	0xf7ffa803
   14450:	4604fe6f 	.word	0x4604fe6f
   14454:	f47f2800 	.word	0xf47f2800
   14458:	aa03aed4 	.word	0xaa03aed4
   1445c:	a8064611 	.word	0xa8064611
   14460:	fa34f006 	.word	0xfa34f006
   14464:	28004604 	.word	0x28004604
   14468:	aecbf47f 	.word	0xaecbf47f
   1446c:	a8064631 	.word	0xa8064631
   14470:	fe5ef7ff 	.word	0xfe5ef7ff
   14474:	28004604 	.word	0x28004604
   14478:	aec3f47f 	.word	0xaec3f47f
   1447c:	a906464a 	.word	0xa906464a
   14480:	f006a803 	.word	0xf006a803
   14484:	4604fa23 	.word	0x4604fa23
   14488:	f47f2800 	.word	0xf47f2800
   1448c:	4631aeba 	.word	0x4631aeba
   14490:	f7ffa803 	.word	0xf7ffa803
   14494:	4604fe4d 	.word	0x4604fe4d
   14498:	f47f2800 	.word	0xf47f2800
   1449c:	aa03aeb2 	.word	0xaa03aeb2
   144a0:	46684669 	.word	0x46684669
   144a4:	f8def006 	.word	0xf8def006
   144a8:	28004604 	.word	0x28004604
   144ac:	aea9f47f 	.word	0xaea9f47f
   144b0:	46684639 	.word	0x46684639
   144b4:	feb6f005 	.word	0xfeb6f005
   144b8:	f6ff2800 	.word	0xf6ff2800
   144bc:	463aaeda 	.word	0x463aaeda
   144c0:	46684669 	.word	0x46684669
   144c4:	f80ef006 	.word	0xf80ef006
   144c8:	28004604 	.word	0x28004604
   144cc:	e698d0f0 	.word	0xe698d0f0
   144d0:	4669466a 	.word	0x4669466a
   144d4:	f006a806 	.word	0xf006a806
   144d8:	4604f9f9 	.word	0x4604f9f9
   144dc:	f47f2800 	.word	0xf47f2800
   144e0:	4631ae90 	.word	0x4631ae90
   144e4:	f7ffa806 	.word	0xf7ffa806
   144e8:	4604fe23 	.word	0x4604fe23
   144ec:	f47f2800 	.word	0xf47f2800
   144f0:	a906ae88 	.word	0xa906ae88
   144f4:	4608aa03 	.word	0x4608aa03
   144f8:	f928f006 	.word	0xf928f006
   144fc:	28004604 	.word	0x28004604
   14500:	ae7ff47f 	.word	0xae7ff47f
   14504:	2b009b06 	.word	0x2b009b06
   14508:	2100da0d 	.word	0x2100da0d
   1450c:	f005a806 	.word	0xf005a806
   14510:	b140fef1 	.word	0xb140fef1
   14514:	463aa906 	.word	0x463aa906
   14518:	f0064608 	.word	0xf0064608
   1451c:	4604f8a3 	.word	0x4604f8a3
   14520:	d0ef2800 	.word	0xd0ef2800
   14524:	a906e66d 	.word	0xa906e66d
   14528:	4608aa03 	.word	0x4608aa03
   1452c:	f90ef006 	.word	0xf90ef006
   14530:	28004604 	.word	0x28004604
   14534:	ae65f47f 	.word	0xae65f47f
   14538:	2b009b06 	.word	0x2b009b06
   1453c:	2100da0d 	.word	0x2100da0d
   14540:	f005a806 	.word	0xf005a806
   14544:	b140fed7 	.word	0xb140fed7
   14548:	463aa906 	.word	0x463aa906
   1454c:	f0064608 	.word	0xf0064608
   14550:	4604f889 	.word	0x4604f889
   14554:	d0ef2800 	.word	0xd0ef2800
   14558:	a903e653 	.word	0xa903e653
   1455c:	4608aa06 	.word	0x4608aa06
   14560:	f8f4f006 	.word	0xf8f4f006
   14564:	28004604 	.word	0x28004604
   14568:	ae4bf47f 	.word	0xae4bf47f
   1456c:	2b009b03 	.word	0x2b009b03
   14570:	2100da0d 	.word	0x2100da0d
   14574:	f005a803 	.word	0xf005a803
   14578:	b140febd 	.word	0xb140febd
   1457c:	463aa903 	.word	0x463aa903
   14580:	f0064608 	.word	0xf0064608
   14584:	4604f86f 	.word	0x4604f86f
   14588:	d0ef2800 	.word	0xd0ef2800
   1458c:	a903e639 	.word	0xa903e639
   14590:	4608466a 	.word	0x4608466a
   14594:	f99af006 	.word	0xf99af006
   14598:	28004604 	.word	0x28004604
   1459c:	ae31f47f 	.word	0xae31f47f
   145a0:	a8034631 	.word	0xa8034631
   145a4:	fdc4f7ff 	.word	0xfdc4f7ff
   145a8:	28004604 	.word	0x28004604
   145ac:	ae29f47f 	.word	0xae29f47f
   145b0:	aa09a903 	.word	0xaa09a903
   145b4:	f0064608 	.word	0xf0064608
   145b8:	4604f8c9 	.word	0x4604f8c9
   145bc:	f47f2800 	.word	0xf47f2800
   145c0:	9b03ae20 	.word	0x9b03ae20
   145c4:	da0d2b00 	.word	0xda0d2b00
   145c8:	a8032100 	.word	0xa8032100
   145cc:	fe92f005 	.word	0xfe92f005
   145d0:	a903b140 	.word	0xa903b140
   145d4:	4608463a 	.word	0x4608463a
   145d8:	f844f006 	.word	0xf844f006
   145dc:	28004604 	.word	0x28004604
   145e0:	e60ed0ef 	.word	0xe60ed0ef
   145e4:	0218f105 	.word	0x0218f105
   145e8:	a8094649 	.word	0xa8094649
   145ec:	f96ef006 	.word	0xf96ef006
   145f0:	28004604 	.word	0x28004604
   145f4:	ae05f47f 	.word	0xae05f47f
   145f8:	a8094631 	.word	0xa8094631
   145fc:	fd98f7ff 	.word	0xfd98f7ff
   14600:	28004604 	.word	0x28004604
   14604:	adfdf47f 	.word	0xadfdf47f
   14608:	a8092101 	.word	0xa8092101
   1460c:	fce4f005 	.word	0xfce4f005
   14610:	28004604 	.word	0x28004604
   14614:	adf5f47f 	.word	0xadf5f47f
   14618:	a8094639 	.word	0xa8094639
   1461c:	fe02f005 	.word	0xfe02f005
   14620:	db082800 	.word	0xdb082800
   14624:	463aa909 	.word	0x463aa909
   14628:	f0054608 	.word	0xf0054608
   1462c:	4604ff5b 	.word	0x4604ff5b
   14630:	d0f12800 	.word	0xd0f12800
   14634:	a906e5e5 	.word	0xa906e5e5
   14638:	f0054640 	.word	0xf0054640
   1463c:	4604f9b5 	.word	0x4604f9b5
   14640:	f47f2800 	.word	0xf47f2800
   14644:	a903adde 	.word	0xa903adde
   14648:	000cf108 	.word	0x000cf108
   1464c:	f9acf005 	.word	0xf9acf005
   14650:	28004604 	.word	0x28004604
   14654:	add5f47f 	.word	0xadd5f47f
   14658:	0018f108 	.word	0x0018f108
   1465c:	f005a909 	.word	0xf005a909
   14660:	4604f9a3 	.word	0x4604f9a3
   14664:	bf00e5cd 	.word	0xbf00e5cd

00014668 <ecp_normalize_jac>:
   14668:	f101b5f0 	.word	0xf101b5f0
   1466c:	b0870518 	.word	0xb0870518
   14670:	4607460e 	.word	0x4607460e
   14674:	46282100 	.word	0x46282100
   14678:	fe3cf005 	.word	0xfe3cf005
   1467c:	4604b918 	.word	0x4604b918
   14680:	b0074620 	.word	0xb0074620
   14684:	4668bdf0 	.word	0x4668bdf0
   14688:	f90af005 	.word	0xf90af005
   1468c:	f005a803 	.word	0xf005a803
   14690:	4668f907 	.word	0x4668f907
   14694:	46291d3a 	.word	0x46291d3a
   14698:	f936f007 	.word	0xf936f007
   1469c:	b1404604 	.word	0xb1404604
   146a0:	f0054668 	.word	0xf0054668
   146a4:	a803f905 	.word	0xa803f905
   146a8:	f902f005 	.word	0xf902f005
   146ac:	b0074620 	.word	0xb0074620
   146b0:	466abdf0 	.word	0x466abdf0
   146b4:	a8034669 	.word	0xa8034669
   146b8:	f908f006 	.word	0xf908f006
   146bc:	28004604 	.word	0x28004604
   146c0:	4639d1ee 	.word	0x4639d1ee
   146c4:	f7ffa803 	.word	0xf7ffa803
   146c8:	4604fd33 	.word	0x4604fd33
   146cc:	d1e72800 	.word	0xd1e72800
   146d0:	4631aa03 	.word	0x4631aa03
   146d4:	f0064630 	.word	0xf0064630
   146d8:	4604f8f9 	.word	0x4604f8f9
   146dc:	d1df2800 	.word	0xd1df2800
   146e0:	46304639 	.word	0x46304639
   146e4:	fd24f7ff 	.word	0xfd24f7ff
   146e8:	28004604 	.word	0x28004604
   146ec:	360cd1d8 	.word	0x360cd1d8
   146f0:	46304631 	.word	0x46304631
   146f4:	f006aa03 	.word	0xf006aa03
   146f8:	4604f8e9 	.word	0x4604f8e9
   146fc:	d1cf2800 	.word	0xd1cf2800
   14700:	46304639 	.word	0x46304639
   14704:	fd14f7ff 	.word	0xfd14f7ff
   14708:	28004604 	.word	0x28004604
   1470c:	466ad1c8 	.word	0x466ad1c8
   14710:	46304631 	.word	0x46304631
   14714:	f8daf006 	.word	0xf8daf006
   14718:	28004604 	.word	0x28004604
   1471c:	4639d1c0 	.word	0x4639d1c0
   14720:	f7ff4630 	.word	0xf7ff4630
   14724:	4604fd05 	.word	0x4604fd05
   14728:	d1b92800 	.word	0xd1b92800
   1472c:	21014628 	.word	0x21014628
   14730:	fac6f005 	.word	0xfac6f005
   14734:	e7b34604 	.word	0xe7b34604

00014738 <ecp_normalize_jac_many.part.3>:
   14738:	4ff0e92d 	.word	0x4ff0e92d
   1473c:	b08b4682 	.word	0xb08b4682
   14740:	4610468b 	.word	0x4610468b
   14744:	4616210c 	.word	0x4616210c
   14748:	fcfef008 	.word	0xfcfef008
   1474c:	f0002800 	.word	0xf0002800
   14750:	468080fe 	.word	0x468080fe
   14754:	f005a801 	.word	0xf005a801
   14758:	a804f8a3 	.word	0xa804f8a3
   1475c:	f8a0f005 	.word	0xf8a0f005
   14760:	f005a807 	.word	0xf005a807
   14764:	f8dbf89d 	.word	0xf8dbf89d
   14768:	46401000 	.word	0x46401000
   1476c:	f0053118 	.word	0xf0053118
   14770:	4604f91b 	.word	0x4604f91b
   14774:	2e01bb60 	.word	0x2e01bb60
   14778:	46d9d946 	.word	0x46d9d946
   1477c:	f1082701 	.word	0xf1082701
   14780:	e008050c 	.word	0xe008050c
   14784:	46514628 	.word	0x46514628
   14788:	fcd2f7ff 	.word	0xfcd2f7ff
   1478c:	4604350c 	.word	0x4604350c
   14790:	42beb968 	.word	0x42beb968
   14794:	f859d038 	.word	0xf859d038
   14798:	f1a52f04 	.word	0xf1a52f04
   1479c:	3218010c 	.word	0x3218010c
   147a0:	f0064628 	.word	0xf0064628
   147a4:	3701f893 	.word	0x3701f893
   147a8:	28004604 	.word	0x28004604
   147ac:	a801d0ea 	.word	0xa801d0ea
   147b0:	f87ef005 	.word	0xf87ef005
   147b4:	f005a804 	.word	0xf005a804
   147b8:	a807f87b 	.word	0xa807f87b
   147bc:	f878f005 	.word	0xf878f005
   147c0:	a901e010 	.word	0xa901e010
   147c4:	f005a804 	.word	0xf005a804
   147c8:	4604f8ef 	.word	0x4604f8ef
   147cc:	d0532800 	.word	0xd0532800
   147d0:	f005a801 	.word	0xf005a801
   147d4:	a804f86d 	.word	0xa804f86d
   147d8:	f86af005 	.word	0xf86af005
   147dc:	f005a807 	.word	0xf005a807
   147e0:	b156f867 	.word	0xb156f867
   147e4:	eb064645 	.word	0xeb064645
   147e8:	eb080646 	.word	0xeb080646
   147ec:	46280686 	.word	0x46280686
   147f0:	f005350c 	.word	0xf005350c
   147f4:	42b5f85d 	.word	0x42b5f85d
   147f8:	4640d1f9 	.word	0x4640d1f9
   147fc:	fcb8f008 	.word	0xfcb8f008
   14800:	b00b4620 	.word	0xb00b4620
   14804:	8ff0e8bd 	.word	0x8ff0e8bd
   14808:	0546eb06 	.word	0x0546eb06
   1480c:	f1a500ad 	.word	0xf1a500ad
   14810:	4441010c 	.word	0x4441010c
   14814:	0204f10a 	.word	0x0204f10a
   14818:	f007a801 	.word	0xf007a801
   1481c:	4604f875 	.word	0x4604f875
   14820:	d1d52800 	.word	0xd1d52800
   14824:	4380f106 	.word	0x4380f106
   14828:	3b013d18 	.word	0x3b013d18
   1482c:	eb0b4445 	.word	0xeb0b4445
   14830:	1e770b83 	.word	0x1e770b83
   14834:	d0c42f00 	.word	0xd0c42f00
   14838:	a901462a 	.word	0xa901462a
   1483c:	f006a804 	.word	0xf006a804
   14840:	4604f845 	.word	0x4604f845
   14844:	d1c32800 	.word	0xd1c32800
   14848:	a8044651 	.word	0xa8044651
   1484c:	fc70f7ff 	.word	0xfc70f7ff
   14850:	28004604 	.word	0x28004604
   14854:	f8dbd1bc 	.word	0xf8dbd1bc
   14858:	a9012000 	.word	0xa9012000
   1485c:	46083218 	.word	0x46083218
   14860:	f834f006 	.word	0xf834f006
   14864:	28004604 	.word	0x28004604
   14868:	4651d1b2 	.word	0x4651d1b2
   1486c:	f7ffa801 	.word	0xf7ffa801
   14870:	4604fc5f 	.word	0x4604fc5f
   14874:	d1ab2800 	.word	0xd1ab2800
   14878:	4611aa04 	.word	0x4611aa04
   1487c:	f006a807 	.word	0xf006a807
   14880:	4604f825 	.word	0x4604f825
   14884:	d1a32800 	.word	0xd1a32800
   14888:	a8074651 	.word	0xa8074651
   1488c:	fc50f7ff 	.word	0xfc50f7ff
   14890:	28004604 	.word	0x28004604
   14894:	f8dbd19c 	.word	0xf8dbd19c
   14898:	aa071000 	.word	0xaa071000
   1489c:	f0064608 	.word	0xf0064608
   148a0:	4604f815 	.word	0x4604f815
   148a4:	d1932800 	.word	0xd1932800
   148a8:	f8db4651 	.word	0xf8db4651
   148ac:	f7ff0000 	.word	0xf7ff0000
   148b0:	4604fc3f 	.word	0x4604fc3f
   148b4:	d18b2800 	.word	0xd18b2800
   148b8:	1000f8db 	.word	0x1000f8db
   148bc:	310caa07 	.word	0x310caa07
   148c0:	f0064608 	.word	0xf0064608
   148c4:	4604f803 	.word	0x4604f803
   148c8:	d1812800 	.word	0xd1812800
   148cc:	0000f8db 	.word	0x0000f8db
   148d0:	300c4651 	.word	0x300c4651
   148d4:	fc2cf7ff 	.word	0xfc2cf7ff
   148d8:	28004604 	.word	0x28004604
   148dc:	af78f47f 	.word	0xaf78f47f
   148e0:	1000f8db 	.word	0x1000f8db
   148e4:	310caa04 	.word	0x310caa04
   148e8:	f0054608 	.word	0xf0054608
   148ec:	4604ffef 	.word	0x4604ffef
   148f0:	f47f2800 	.word	0xf47f2800
   148f4:	f8dbaf6d 	.word	0xf8dbaf6d
   148f8:	46510000 	.word	0x46510000
   148fc:	f7ff300c 	.word	0xf7ff300c
   14900:	4604fc17 	.word	0x4604fc17
   14904:	f47f2800 	.word	0xf47f2800
   14908:	f8daaf63 	.word	0xf8daaf63
   1490c:	f8db1008 	.word	0xf8db1008
   14910:	f0040000 	.word	0xf0040000
   14914:	4604ffe7 	.word	0x4604ffe7
   14918:	f47f2800 	.word	0xf47f2800
   1491c:	f8dbaf59 	.word	0xf8dbaf59
   14920:	f8da0000 	.word	0xf8da0000
   14924:	300c1008 	.word	0x300c1008
   14928:	ffdcf004 	.word	0xffdcf004
   1492c:	28004604 	.word	0x28004604
   14930:	af4ef47f 	.word	0xaf4ef47f
   14934:	0000f8db 	.word	0x0000f8db
   14938:	30183d0c 	.word	0x30183d0c
   1493c:	0b04f1ab 	.word	0x0b04f1ab
   14940:	ffb6f004 	.word	0xffb6f004
   14944:	f43f2f00 	.word	0xf43f2f00
   14948:	3f01af43 	.word	0x3f01af43
   1494c:	4c01e772 	.word	0x4c01e772
   14950:	bf00e756 	.word	0xbf00e756
   14954:	ffffb280 	.word	0xffffb280

00014958 <symbol_0002b14>:
   14958:	b510b1b8 	.word	0xb510b1b8
   1495c:	227c4604 	.word	0x227c4604
   14960:	f00f2100 	.word	0xf00f2100
   14964:	f104fc66 	.word	0xf104fc66
   14968:	f004007c 	.word	0xf004007c
   1496c:	f104ff99 	.word	0xf104ff99
   14970:	f0040088 	.word	0xf0040088
   14974:	f104ff95 	.word	0xf104ff95
   14978:	f0040094 	.word	0xf0040094
   1497c:	f104ff91 	.word	0xf104ff91
   14980:	e8bd00a0 	.word	0xe8bd00a0
   14984:	f0044010 	.word	0xf0044010
   14988:	4770bf8b 	.word	0x4770bf8b

0001498c <symbol_0000ef7>:
   1498c:	d0482800 	.word	0xd0482800
   14990:	6e03b570 	.word	0x6e03b570
   14994:	2b014604 	.word	0x2b014604
   14998:	6f60d123 	.word	0x6f60d123
   1499c:	6fa2b1c8 	.word	0x6fa2b1c8
   149a0:	2600b1aa 	.word	0x2600b1aa
   149a4:	03c6eb06 	.word	0x03c6eb06
   149a8:	0583eb10 	.word	0x0583eb10
   149ac:	4628d035 	.word	0x4628d035
   149b0:	ff7ef004 	.word	0xff7ef004
   149b4:	000cf105 	.word	0x000cf105
   149b8:	ff7af004 	.word	0xff7af004
   149bc:	0018f105 	.word	0x0018f105
   149c0:	ff76f004 	.word	0xff76f004
   149c4:	36016fa2 	.word	0x36016fa2
   149c8:	6f604296 	.word	0x6f604296
   149cc:	f008d3ea 	.word	0xf008d3ea
   149d0:	2200fbcf 	.word	0x2200fbcf
   149d4:	037cf104 	.word	0x037cf104
   149d8:	34017022 	.word	0x34017022
   149dc:	d1fb429c 	.word	0xd1fb429c
   149e0:	3004bd70 	.word	0x3004bd70
   149e4:	ff64f004 	.word	0xff64f004
   149e8:	0010f104 	.word	0x0010f104
   149ec:	ff60f004 	.word	0xff60f004
   149f0:	001cf104 	.word	0x001cf104
   149f4:	ff5cf004 	.word	0xff5cf004
   149f8:	0028f104 	.word	0x0028f104
   149fc:	ff58f004 	.word	0xff58f004
   14a00:	0034f104 	.word	0x0034f104
   14a04:	ff54f004 	.word	0xff54f004
   14a08:	0040f104 	.word	0x0040f104
   14a0c:	ff50f004 	.word	0xff50f004
   14a10:	004cf104 	.word	0x004cf104
   14a14:	ff4cf004 	.word	0xff4cf004
   14a18:	3601e7bf 	.word	0x3601e7bf
   14a1c:	d3c14296 	.word	0xd3c14296
   14a20:	4770e7d5 	.word	0x4770e7d5

00014a24 <symbol_0001d5f>:
   14a24:	b510b1a8 	.word	0xb510b1a8
   14a28:	f7ff4604 	.word	0xf7ff4604
   14a2c:	f104ffaf 	.word	0xf104ffaf
   14a30:	f004007c 	.word	0xf004007c
   14a34:	f104ff3d 	.word	0xf104ff3d
   14a38:	f0040088 	.word	0xf0040088
   14a3c:	f104ff39 	.word	0xf104ff39
   14a40:	f0040094 	.word	0xf0040094
   14a44:	f104ff35 	.word	0xf104ff35
   14a48:	e8bd00a0 	.word	0xe8bd00a0
   14a4c:	f0044010 	.word	0xf0044010
   14a50:	4770bf2f 	.word	0x4770bf2f

00014a54 <symbol_000d41f>:
   14a54:	2101b510 	.word	0x2101b510
   14a58:	f0054604 	.word	0xf0054604
   14a5c:	b100f931 	.word	0xb100f931
   14a60:	2101bd10 	.word	0x2101bd10
   14a64:	000cf104 	.word	0x000cf104
   14a68:	f92af005 	.word	0xf92af005
   14a6c:	d1f72800 	.word	0xd1f72800
   14a70:	f1044601 	.word	0xf1044601
   14a74:	e8bd0018 	.word	0xe8bd0018
   14a78:	f0054010 	.word	0xf0054010
   14a7c:	bf00b921 	.word	0xbf00b921

00014a80 <ecp_add_mixed>:
   14a80:	47f0e92d 	.word	0x47f0e92d
   14a84:	0518f102 	.word	0x0518f102
   14a88:	4681b096 	.word	0x4681b096
   14a8c:	46284688 	.word	0x46284688
   14a90:	46172100 	.word	0x46172100
   14a94:	f005461e 	.word	0xf005461e
   14a98:	2800fc2d 	.word	0x2800fc2d
   14a9c:	6a33d048 	.word	0x6a33d048
   14aa0:	f106b18b 	.word	0xf106b18b
   14aa4:	46200418 	.word	0x46200418
   14aa8:	f0052100 	.word	0xf0052100
   14aac:	2800fc23 	.word	0x2800fc23
   14ab0:	80d7f000 	.word	0x80d7f000
   14ab4:	b1336a33 	.word	0xb1336a33
   14ab8:	21014620 	.word	0x21014620
   14abc:	fc1af005 	.word	0xfc1af005
   14ac0:	f0402800 	.word	0xf0402800
   14ac4:	a80180e7 	.word	0xa80180e7
   14ac8:	feeaf004 	.word	0xfeeaf004
   14acc:	f004a804 	.word	0xf004a804
   14ad0:	a807fee7 	.word	0xa807fee7
   14ad4:	fee4f004 	.word	0xfee4f004
   14ad8:	f004a80a 	.word	0xf004a80a
   14adc:	a80dfee1 	.word	0xa80dfee1
   14ae0:	fedef004 	.word	0xfedef004
   14ae4:	f004a810 	.word	0xf004a810
   14ae8:	a813fedb 	.word	0xa813fedb
   14aec:	fed8f004 	.word	0xfed8f004
   14af0:	4629462a 	.word	0x4629462a
   14af4:	f005a801 	.word	0xf005a801
   14af8:	4604fee9 	.word	0x4604fee9
   14afc:	a801b380 	.word	0xa801b380
   14b00:	fed6f004 	.word	0xfed6f004
   14b04:	f004a804 	.word	0xf004a804
   14b08:	a807fed3 	.word	0xa807fed3
   14b0c:	fed0f004 	.word	0xfed0f004
   14b10:	f004a80a 	.word	0xf004a80a
   14b14:	a80dfecd 	.word	0xa80dfecd
   14b18:	fecaf004 	.word	0xfecaf004
   14b1c:	f004a810 	.word	0xf004a810
   14b20:	a813fec7 	.word	0xa813fec7
   14b24:	fec4f004 	.word	0xfec4f004
   14b28:	b0164620 	.word	0xb0164620
   14b2c:	87f0e8bd 	.word	0x87f0e8bd
   14b30:	46404631 	.word	0x46404631
   14b34:	ff38f004 	.word	0xff38f004
   14b38:	28004604 	.word	0x28004604
   14b3c:	f106d1f4 	.word	0xf106d1f4
   14b40:	f108010c 	.word	0xf108010c
   14b44:	f004000c 	.word	0xf004000c
   14b48:	4604ff2f 	.word	0x4604ff2f
   14b4c:	d1eb2800 	.word	0xd1eb2800
   14b50:	0118f106 	.word	0x0118f106
   14b54:	0018f108 	.word	0x0018f108
   14b58:	ff26f004 	.word	0xff26f004
   14b5c:	e7e34604 	.word	0xe7e34604
   14b60:	a8014649 	.word	0xa8014649
   14b64:	fae4f7ff 	.word	0xfae4f7ff
   14b68:	28004604 	.word	0x28004604
   14b6c:	462ad1c7 	.word	0x462ad1c7
   14b70:	a804a901 	.word	0xa804a901
   14b74:	feaaf005 	.word	0xfeaaf005
   14b78:	28004604 	.word	0x28004604
   14b7c:	4649d1bf 	.word	0x4649d1bf
   14b80:	f7ffa804 	.word	0xf7ffa804
   14b84:	4604fad5 	.word	0x4604fad5
   14b88:	d1b82800 	.word	0xd1b82800
   14b8c:	4632a901 	.word	0x4632a901
   14b90:	f0054608 	.word	0xf0054608
   14b94:	4604fe9b 	.word	0x4604fe9b
   14b98:	d1b02800 	.word	0xd1b02800
   14b9c:	a8014649 	.word	0xa8014649
   14ba0:	fac6f7ff 	.word	0xfac6f7ff
   14ba4:	28004604 	.word	0x28004604
   14ba8:	a904d1a9 	.word	0xa904d1a9
   14bac:	020cf106 	.word	0x020cf106
   14bb0:	f0054608 	.word	0xf0054608
   14bb4:	4604fe8b 	.word	0x4604fe8b
   14bb8:	d1a02800 	.word	0xd1a02800
   14bbc:	a8044649 	.word	0xa8044649
   14bc0:	fab6f7ff 	.word	0xfab6f7ff
   14bc4:	28004604 	.word	0x28004604
   14bc8:	a901d199 	.word	0xa901d199
   14bcc:	4608463a 	.word	0x4608463a
   14bd0:	fdbcf005 	.word	0xfdbcf005
   14bd4:	28004604 	.word	0x28004604
   14bd8:	f109d191 	.word	0xf109d191
   14bdc:	e00c0604 	.word	0xe00c0604
   14be0:	a8012100 	.word	0xa8012100
   14be4:	fb86f005 	.word	0xfb86f005
   14be8:	a901b150 	.word	0xa901b150
   14bec:	46084632 	.word	0x46084632
   14bf0:	fd38f005 	.word	0xfd38f005
   14bf4:	28004604 	.word	0x28004604
   14bf8:	9b01d181 	.word	0x9b01d181
   14bfc:	dbef2b00 	.word	0xdbef2b00
   14c00:	f107a904 	.word	0xf107a904
   14c04:	4632060c 	.word	0x4632060c
   14c08:	f0054608 	.word	0xf0054608
   14c0c:	4604fd9f 	.word	0x4604fd9f
   14c10:	f47f2800 	.word	0xf47f2800
   14c14:	f109af74 	.word	0xf109af74
   14c18:	e00d0a04 	.word	0xe00d0a04
   14c1c:	a8042100 	.word	0xa8042100
   14c20:	fb68f005 	.word	0xfb68f005
   14c24:	a904b158 	.word	0xa904b158
   14c28:	46084652 	.word	0x46084652
   14c2c:	fd1af005 	.word	0xfd1af005
   14c30:	28004604 	.word	0x28004604
   14c34:	af63f47f 	.word	0xaf63f47f
   14c38:	2b009b04 	.word	0x2b009b04
   14c3c:	2100dbee 	.word	0x2100dbee
   14c40:	f005a801 	.word	0xf005a801
   14c44:	4601fb57 	.word	0x4601fb57
   14c48:	a804bb30 	.word	0xa804bb30
   14c4c:	fb52f005 	.word	0xfb52f005
   14c50:	d17f2800 	.word	0xd17f2800
   14c54:	4641463a 	.word	0x4641463a
   14c58:	f7ff4648 	.word	0xf7ff4648
   14c5c:	4604fab5 	.word	0x4604fab5
   14c60:	4639e74d 	.word	0x4639e74d
   14c64:	f0044640 	.word	0xf0044640
   14c68:	4604fe9f 	.word	0x4604fe9f
   14c6c:	f47f2800 	.word	0xf47f2800
   14c70:	f107af5b 	.word	0xf107af5b
   14c74:	f108010c 	.word	0xf108010c
   14c78:	f004000c 	.word	0xf004000c
   14c7c:	4604fe95 	.word	0x4604fe95
   14c80:	f47f2800 	.word	0xf47f2800
   14c84:	4629af51 	.word	0x4629af51
   14c88:	0018f108 	.word	0x0018f108
   14c8c:	fe8cf004 	.word	0xfe8cf004
   14c90:	e7494604 	.word	0xe7494604
   14c94:	e7474c8b 	.word	0xe7474c8b
   14c98:	aa014629 	.word	0xaa014629
   14c9c:	f005a813 	.word	0xf005a813
   14ca0:	4604fe15 	.word	0x4604fe15
   14ca4:	f47f2800 	.word	0xf47f2800
   14ca8:	4649af2a 	.word	0x4649af2a
   14cac:	f7ffa813 	.word	0xf7ffa813
   14cb0:	4604fa3f 	.word	0x4604fa3f
   14cb4:	f47f2800 	.word	0xf47f2800
   14cb8:	aa01af22 	.word	0xaa01af22
   14cbc:	a8074611 	.word	0xa8074611
   14cc0:	fe04f005 	.word	0xfe04f005
   14cc4:	28004604 	.word	0x28004604
   14cc8:	af19f47f 	.word	0xaf19f47f
   14ccc:	a8074649 	.word	0xa8074649
   14cd0:	fa2ef7ff 	.word	0xfa2ef7ff
   14cd4:	28004604 	.word	0x28004604
   14cd8:	af11f47f 	.word	0xaf11f47f
   14cdc:	a907aa01 	.word	0xa907aa01
   14ce0:	f005a80a 	.word	0xf005a80a
   14ce4:	4604fdf3 	.word	0x4604fdf3
   14ce8:	f47f2800 	.word	0xf47f2800
   14cec:	4649af08 	.word	0x4649af08
   14cf0:	f7ffa80a 	.word	0xf7ffa80a
   14cf4:	4604fa1d 	.word	0x4604fa1d
   14cf8:	f47f2800 	.word	0xf47f2800
   14cfc:	a907af00 	.word	0xa907af00
   14d00:	4608463a 	.word	0x4608463a
   14d04:	fde2f005 	.word	0xfde2f005
   14d08:	28004604 	.word	0x28004604
   14d0c:	aef7f47f 	.word	0xaef7f47f
   14d10:	a8074649 	.word	0xa8074649
   14d14:	fa0cf7ff 	.word	0xfa0cf7ff
   14d18:	28004604 	.word	0x28004604
   14d1c:	aeeff47f 	.word	0xaeeff47f
   14d20:	a9072202 	.word	0xa9072202
   14d24:	f005a801 	.word	0xf005a801
   14d28:	4604fec9 	.word	0x4604fec9
   14d2c:	f47f2800 	.word	0xf47f2800
   14d30:	f109aee6 	.word	0xf109aee6
   14d34:	46290504 	.word	0x46290504
   14d38:	f005a801 	.word	0xf005a801
   14d3c:	2800fa73 	.word	0x2800fa73
   14d40:	a901db0d 	.word	0xa901db0d
   14d44:	4608462a 	.word	0x4608462a
   14d48:	fbccf005 	.word	0xfbccf005
   14d4c:	28004604 	.word	0x28004604
   14d50:	e6d4d0f1 	.word	0xe6d4d0f1
   14d54:	f7ff4640 	.word	0xf7ff4640
   14d58:	4604fe7d 	.word	0x4604fe7d
   14d5c:	aa04e6cf 	.word	0xaa04e6cf
   14d60:	a80d4611 	.word	0xa80d4611
   14d64:	fdb2f005 	.word	0xfdb2f005
   14d68:	28004604 	.word	0x28004604
   14d6c:	aec7f47f 	.word	0xaec7f47f
   14d70:	a80d4649 	.word	0xa80d4649
   14d74:	f9dcf7ff 	.word	0xf9dcf7ff
   14d78:	28004604 	.word	0x28004604
   14d7c:	aebff47f 	.word	0xaebff47f
   14d80:	aa01a90d 	.word	0xaa01a90d
   14d84:	f0054608 	.word	0xf0054608
   14d88:	4604fce1 	.word	0x4604fce1
   14d8c:	f47f2800 	.word	0xf47f2800
   14d90:	9b0daeb6 	.word	0x9b0daeb6
   14d94:	da0d2b00 	.word	0xda0d2b00
   14d98:	a80d2100 	.word	0xa80d2100
   14d9c:	faaaf005 	.word	0xfaaaf005
   14da0:	a90db140 	.word	0xa90db140
   14da4:	4608462a 	.word	0x4608462a
   14da8:	fc5cf005 	.word	0xfc5cf005
   14dac:	28004604 	.word	0x28004604
   14db0:	e6a4d0ef 	.word	0xe6a4d0ef
   14db4:	aa0aa90d 	.word	0xaa0aa90d
   14db8:	f0054608 	.word	0xf0054608
   14dbc:	4604fcc7 	.word	0x4604fcc7
   14dc0:	f47f2800 	.word	0xf47f2800
   14dc4:	9b0dae9c 	.word	0x9b0dae9c
   14dc8:	da0d2b00 	.word	0xda0d2b00
   14dcc:	a80d2100 	.word	0xa80d2100
   14dd0:	fa90f005 	.word	0xfa90f005
   14dd4:	a90db140 	.word	0xa90db140
   14dd8:	4608462a 	.word	0x4608462a
   14ddc:	fc42f005 	.word	0xfc42f005
   14de0:	28004604 	.word	0x28004604
   14de4:	e68ad0ef 	.word	0xe68ad0ef
   14de8:	aa0da907 	.word	0xaa0da907
   14dec:	f0054608 	.word	0xf0054608
   14df0:	4604fcad 	.word	0x4604fcad
   14df4:	f47f2800 	.word	0xf47f2800
   14df8:	9b07ae82 	.word	0x9b07ae82
   14dfc:	da0d2b00 	.word	0xda0d2b00
   14e00:	a8072100 	.word	0xa8072100
   14e04:	fa76f005 	.word	0xfa76f005
   14e08:	a907b140 	.word	0xa907b140
   14e0c:	4608462a 	.word	0x4608462a
   14e10:	fc28f005 	.word	0xfc28f005
   14e14:	28004604 	.word	0x28004604
   14e18:	e670d0ef 	.word	0xe670d0ef
   14e1c:	aa04a907 	.word	0xaa04a907
   14e20:	f0054608 	.word	0xf0054608
   14e24:	4604fd53 	.word	0x4604fd53
   14e28:	f47f2800 	.word	0xf47f2800
   14e2c:	4649ae68 	.word	0x4649ae68
   14e30:	f7ffa807 	.word	0xf7ffa807
   14e34:	4604f97d 	.word	0x4604f97d
   14e38:	f47f2800 	.word	0xf47f2800
   14e3c:	a90aae60 	.word	0xa90aae60
   14e40:	46084632 	.word	0x46084632
   14e44:	fd42f005 	.word	0xfd42f005
   14e48:	28004604 	.word	0x28004604
   14e4c:	ae57f47f 	.word	0xae57f47f
   14e50:	a80a4649 	.word	0xa80a4649
   14e54:	f96cf7ff 	.word	0xf96cf7ff
   14e58:	28004604 	.word	0x28004604
   14e5c:	ae4ff47f 	.word	0xae4ff47f
   14e60:	a907aa0a 	.word	0xa907aa0a
   14e64:	f005a810 	.word	0xf005a810
   14e68:	4604fc71 	.word	0x4604fc71
   14e6c:	f47f2800 	.word	0xf47f2800
   14e70:	9b10ae46 	.word	0x9b10ae46
   14e74:	da0d2b00 	.word	0xda0d2b00
   14e78:	a8102100 	.word	0xa8102100
   14e7c:	fa3af005 	.word	0xfa3af005
   14e80:	a910b140 	.word	0xa910b140
   14e84:	4608462a 	.word	0x4608462a
   14e88:	fbecf005 	.word	0xfbecf005
   14e8c:	28004604 	.word	0x28004604
   14e90:	e634d0ef 	.word	0xe634d0ef
   14e94:	4640a90d 	.word	0x4640a90d
   14e98:	fd86f004 	.word	0xfd86f004
   14e9c:	28004604 	.word	0x28004604
   14ea0:	ae2df47f 	.word	0xae2df47f
   14ea4:	f108a910 	.word	0xf108a910
   14ea8:	f004000c 	.word	0xf004000c
   14eac:	4604fd7d 	.word	0x4604fd7d
   14eb0:	f47f2800 	.word	0xf47f2800
   14eb4:	f108ae24 	.word	0xf108ae24
   14eb8:	a9130018 	.word	0xa9130018
   14ebc:	fd74f004 	.word	0xfd74f004
   14ec0:	e61c4604 	.word	0xe61c4604
   14ec4:	ffffb080 	.word	0xffffb080

00014ec8 <ecp_mul_comb>:
   14ec8:	4ff0e92d 	.word	0x4ff0e92d
   14ecc:	46984605 	.word	0x46984605
   14ed0:	034cf105 	.word	0x034cf105
   14ed4:	b0e5461c 	.word	0xb0e5461c
   14ed8:	9104a80d 	.word	0x9104a80d
   14edc:	93084617 	.word	0x93084617
   14ee0:	fcdef004 	.word	0xfcdef004
   14ee4:	f004a810 	.word	0xf004a810
   14ee8:	4620fcdb 	.word	0x4620fcdb
   14eec:	f0042100 	.word	0xf0042100
   14ef0:	2801ff21 	.word	0x2801ff21
   14ef4:	f0409007 	.word	0xf0409007
   14ef8:	6deb81c9 	.word	0x6deb81c9
   14efc:	090cf108 	.word	0x090cf108
   14f00:	7fc0f5b3 	.word	0x7fc0f5b3
   14f04:	2605bf2c 	.word	0x2605bf2c
   14f08:	46482604 	.word	0x46482604
   14f0c:	0134f105 	.word	0x0134f105
   14f10:	f04fbf2c 	.word	0xf04fbf2c
   14f14:	f04f0a06 	.word	0xf04f0a06
   14f18:	46b30a05 	.word	0x46b30a05
   14f1c:	f982f005 	.word	0xf982f005
   14f20:	d0722800 	.word	0xd0722800
   14f24:	42a66dec 	.word	0x42a66dec
   14f28:	2301d245 	.word	0x2301d245
   14f2c:	32fff10b 	.word	0x32fff10b
   14f30:	93024093 	.word	0x93024093
   14f34:	b2db4434 	.word	0xb2db4434
   14f38:	93033c01 	.word	0x93033c01
   14f3c:	fbb42300 	.word	0xfbb42300
   14f40:	9802f4f6 	.word	0x9802f4f6
   14f44:	93059206 	.word	0x93059206
   14f48:	f0082124 	.word	0xf0082124
   14f4c:	9001f8fd 	.word	0x9001f8fd
   14f50:	d0402800 	.word	0xd0402800
   14f54:	f0044641 	.word	0xf0044641
   14f58:	f8ddfd27 	.word	0xf8ddfd27
   14f5c:	4683a004 	.word	0x4683a004
   14f60:	f0002800 	.word	0xf0002800
   14f64:	9b058086 	.word	0x9b058086
   14f68:	d17b2b00 	.word	0xd17b2b00
   14f6c:	9c012500 	.word	0x9c012500
   14f70:	35019e03 	.word	0x35019e03
   14f74:	4620b154 	.word	0x4620b154
   14f78:	fc9af004 	.word	0xfc9af004
   14f7c:	000cf104 	.word	0x000cf104
   14f80:	fc96f004 	.word	0xfc96f004
   14f84:	0018f104 	.word	0x0018f104
   14f88:	fc92f004 	.word	0xfc92f004
   14f8c:	429eb2eb 	.word	0x429eb2eb
   14f90:	0424f104 	.word	0x0424f104
   14f94:	9801d8ed 	.word	0x9801d8ed
   14f98:	f8eaf008 	.word	0xf8eaf008
   14f9c:	f004a80d 	.word	0xf004a80d
   14fa0:	a810fc87 	.word	0xa810fc87
   14fa4:	fc84f004 	.word	0xfc84f004
   14fa8:	0f00f1bb 	.word	0x0f00f1bb
   14fac:	4658d11b 	.word	0x4658d11b
   14fb0:	e8bdb065 	.word	0xe8bdb065
   14fb4:	26028ff0 	.word	0x26028ff0
   14fb8:	22012300 	.word	0x22012300
   14fbc:	21244630 	.word	0x21244630
   14fc0:	6602e9cd 	.word	0x6602e9cd
   14fc4:	3205e9cd 	.word	0x3205e9cd
   14fc8:	f8bef008 	.word	0xf8bef008
   14fcc:	08643401 	.word	0x08643401
   14fd0:	28009001 	.word	0x28009001
   14fd4:	a80dd1be 	.word	0xa80dd1be
   14fd8:	fc6af004 	.word	0xfc6af004
   14fdc:	f004a810 	.word	0xf004a810
   14fe0:	f8dffc67 	.word	0xf8dffc67
   14fe4:	9c04b644 	.word	0x9c04b644
   14fe8:	d0e02c00 	.word	0xd0e02c00
   14fec:	f0044620 	.word	0xf0044620
   14ff0:	f104fc5f 	.word	0xf104fc5f
   14ff4:	f004000c 	.word	0xf004000c
   14ff8:	f104fc5b 	.word	0xf104fc5b
   14ffc:	f0040018 	.word	0xf0040018
   15000:	4658fc57 	.word	0x4658fc57
   15004:	e8bdb065 	.word	0xe8bdb065
   15008:	f1058ff0 	.word	0xf1058ff0
   1500c:	46400128 	.word	0x46400128
   15010:	f908f005 	.word	0xf908f005
   15014:	d1852800 	.word	0xd1852800
   15018:	459a6deb 	.word	0x459a6deb
   1501c:	82f4f0c0 	.word	0x82f4f0c0
   15020:	1c5c2602 	.word	0x1c5c2602
   15024:	e9cd2301 	.word	0xe9cd2301
   15028:	08646602 	.word	0x08646602
   1502c:	6f6b9306 	.word	0x6f6b9306
   15030:	2b009301 	.word	0x2b009301
   15034:	80eaf000 	.word	0x80eaf000
   15038:	46382100 	.word	0x46382100
   1503c:	fe7af004 	.word	0xfe7af004
   15040:	46804639 	.word	0x46804639
   15044:	f004a80d 	.word	0xf004a80d
   15048:	4683fcaf 	.word	0x4683fcaf
   1504c:	463ab950 	.word	0x463ab950
   15050:	a8109908 	.word	0xa8109908
   15054:	fb7af005 	.word	0xfb7af005
   15058:	28004683 	.word	0x28004683
   1505c:	9b07d036 	.word	0x9b07d036
   15060:	d0832b00 	.word	0xd0832b00
   15064:	f004a80d 	.word	0xf004a80d
   15068:	a810fc23 	.word	0xa810fc23
   1506c:	fc20f004 	.word	0xfc20f004
   15070:	4649e7b9 	.word	0x4649e7b9
   15074:	000cf10a 	.word	0x000cf10a
   15078:	fc96f004 	.word	0xfc96f004
   1507c:	28004683 	.word	0x28004683
   15080:	af71f47f 	.word	0xaf71f47f
   15084:	f1089b01 	.word	0xf1089b01
   15088:	f1030118 	.word	0xf1030118
   1508c:	f0040018 	.word	0xf0040018
   15090:	4683fc8b 	.word	0x4683fc8b
   15094:	f47f2800 	.word	0xf47f2800
   15098:	462aaf66 	.word	0x462aaf66
   1509c:	0901f04f 	.word	0x0901f04f
   150a0:	46254651 	.word	0x46254651
   150a4:	464c4682 	.word	0x464c4682
   150a8:	96094690 	.word	0x96094690
   150ac:	9e06970a 	.word	0x9e06970a
   150b0:	eb049f01 	.word	0xeb049f01
   150b4:	eb0704c4 	.word	0xeb0704c4
   150b8:	46200484 	.word	0x46200484
   150bc:	fc74f004 	.word	0xfc74f004
   150c0:	f0002800 	.word	0xf0002800
   150c4:	468380a7 	.word	0x468380a7
   150c8:	e74d9b05 	.word	0xe74d9b05
   150cc:	33fff118 	.word	0x33fff118
   150d0:	2301bf18 	.word	0x2301bf18
   150d4:	461aa910 	.word	0x461aa910
   150d8:	9302a80d 	.word	0x9302a80d
   150dc:	fd92f004 	.word	0xfd92f004
   150e0:	28004683 	.word	0x28004683
   150e4:	a822d1bb 	.word	0xa822d1bb
   150e8:	46591c62 	.word	0x46591c62
   150ec:	f8a1f00f 	.word	0xf8a1f00f
   150f0:	f10db3d4 	.word	0xf10db3d4
   150f4:	46d80988 	.word	0x46d80988
   150f8:	46c246cb 	.word	0x46c246cb
   150fc:	46512700 	.word	0x46512700
   15100:	f004a80d 	.word	0xf004a80d
   15104:	f89bfe17 	.word	0xf89bfe17
   15108:	40b83000 	.word	0x40b83000
   1510c:	43033701 	.word	0x43033701
   15110:	44a242b7 	.word	0x44a242b7
   15114:	3000f88b 	.word	0x3000f88b
   15118:	f108d1f1 	.word	0xf108d1f1
   1511c:	45a00801 	.word	0x45a00801
   15120:	0b01f10b 	.word	0x0b01f10b
   15124:	2300d1e9 	.word	0x2300d1e9
   15128:	0c01f04f 	.word	0x0c01f04f
   1512c:	1088f89d 	.word	0x1088f89d
   15130:	6f01f819 	.word	0x6f01f819
   15134:	0c01f10c 	.word	0x0c01f10c
   15138:	0203ea86 	.word	0x0203ea86
   1513c:	f00043d0 	.word	0xf00043d0
   15140:	fb000001 	.word	0xfb000001
   15144:	b252f701 	.word	0xb252f701
   15148:	4033b27f 	.word	0x4033b27f
   1514c:	0607ea02 	.word	0x0607ea02
   15150:	ea41407a 	.word	0xea41407a
   15154:	433310c0 	.word	0x433310c0
   15158:	45e0b2d1 	.word	0x45e0b2d1
   1515c:	0c01f809 	.word	0x0c01f809
   15160:	f889b2db 	.word	0xf889b2db
   15164:	d2e31000 	.word	0xd2e31000
   15168:	a8192600 	.word	0xa8192600
   1516c:	fb98f004 	.word	0xfb98f004
   15170:	f004a81c 	.word	0xf004a81c
   15174:	a81ffb95 	.word	0xa81ffb95
   15178:	fb92f004 	.word	0xfb92f004
   1517c:	f813ab22 	.word	0xf813ab22
   15180:	44239004 	.word	0x44239004
   15184:	9b049306 	.word	0x9b049306
   15188:	469b4632 	.word	0x469b4632
   1518c:	95059f01 	.word	0x95059f01
   15190:	9f03463d 	.word	0x9f03463d
   15194:	0845f3c9 	.word	0x0845f3c9
   15198:	0a0cf103 	.word	0x0a0cf103
   1519c:	0408eba2 	.word	0x0408eba2
   151a0:	f484fab4 	.word	0xf484fab4
   151a4:	46290964 	.word	0x46290964
   151a8:	46584622 	.word	0x46584622
   151ac:	fd2af004 	.word	0xfd2af004
   151b0:	f1053601 	.word	0xf1053601
   151b4:	3524010c 	.word	0x3524010c
   151b8:	d16a2800 	.word	0xd16a2800
   151bc:	46504622 	.word	0x46504622
   151c0:	fd20f004 	.word	0xfd20f004
   151c4:	2800b2f2 	.word	0x2800b2f2
   151c8:	42bad163 	.word	0x42bad163
   151cc:	9d05d3e6 	.word	0x9d05d3e6
   151d0:	1d2ba816 	.word	0x1d2ba816
   151d4:	9308461c 	.word	0x9308461c
   151d8:	fb62f004 	.word	0xfb62f004
   151dc:	4621a816 	.word	0x4621a816
   151e0:	f0054652 	.word	0xf0054652
   151e4:	4683fab3 	.word	0x4683fab3
   151e8:	f0002800 	.word	0xf0002800
   151ec:	a81680c3 	.word	0xa81680c3
   151f0:	fb5ef004 	.word	0xfb5ef004
   151f4:	f004a819 	.word	0xf004a819
   151f8:	a81cfb5b 	.word	0xa81cfb5b
   151fc:	fb58f004 	.word	0xfb58f004
   15200:	f004a81f 	.word	0xf004a81f
   15204:	9b07fb55 	.word	0x9b07fb55
   15208:	e6ac9305 	.word	0xe6ac9305
   1520c:	98022301 	.word	0x98022301
   15210:	e6999305 	.word	0xe6999305
   15214:	0b59ea4f 	.word	0x0b59ea4f
   15218:	0bcbeb0b 	.word	0x0bcbeb0b
   1521c:	0b8beb07 	.word	0x0b8beb07
   15220:	010cf10b 	.word	0x010cf10b
   15224:	000cf104 	.word	0x000cf104
   15228:	fbbef004 	.word	0xfbbef004
   1522c:	f47f2800 	.word	0xf47f2800
   15230:	f10baf4a 	.word	0xf10baf4a
   15234:	f1040118 	.word	0xf1040118
   15238:	f0040018 	.word	0xf0040018
   1523c:	2800fbb5 	.word	0x2800fbb5
   15240:	af41f47f 	.word	0xaf41f47f
   15244:	4683b165 	.word	0x4683b165
   15248:	46214622 	.word	0x46214622
   1524c:	f7fe4640 	.word	0xf7fe4640
   15250:	f10bffbb 	.word	0xf10bffbb
   15254:	28000b01 	.word	0x28000b01
   15258:	af35f47f 	.word	0xaf35f47f
   1525c:	d1f345ab 	.word	0xd1f345ab
   15260:	0949ea4f 	.word	0x0949ea4f
   15264:	f989fa5f 	.word	0xf989fa5f
   15268:	0301f10a 	.word	0x0301f10a
   1526c:	f842aa22 	.word	0xf842aa22
   15270:	fa5f402a 	.word	0xfa5f402a
   15274:	fa39fa83 	.word	0xfa39fa83
   15278:	464cf306 	.word	0x464cf306
   1527c:	ea4fd10b 	.word	0xea4fd10b
   15280:	eb010159 	.word	0xeb010159
   15284:	eb0701c1 	.word	0xeb0701c1
   15288:	e7120181 	.word	0xe7120181
   1528c:	b39cf8df 	.word	0xb39cf8df
   15290:	4683e68d 	.word	0x4683e68d
   15294:	4652e7ae 	.word	0x4652e7ae
   15298:	462c2a01 	.word	0x462c2a01
   1529c:	46459e09 	.word	0x46459e09
   152a0:	d9619f0a 	.word	0xd9619f0a
   152a4:	4640a922 	.word	0x4640a922
   152a8:	fa46f7ff 	.word	0xfa46f7ff
   152ac:	f1bb4683 	.word	0xf1bb4683
   152b0:	f47f0f00 	.word	0xf47f0f00
   152b4:	2301ae58 	.word	0x2301ae58
   152b8:	46da9a01 	.word	0x46da9a01
   152bc:	970b3a24 	.word	0x970b3a24
   152c0:	461f4693 	.word	0x461f4693
   152c4:	4609e9cd 	.word	0x4609e9cd
   152c8:	eb03b303 	.word	0xeb03b303
   152cc:	ea4f03c3 	.word	0xea4f03c3
   152d0:	9b010883 	.word	0x9b010883
   152d4:	0424f1a8 	.word	0x0424f1a8
   152d8:	eb03441c 	.word	0xeb03441c
   152dc:	e0050908 	.word	0xe0050908
   152e0:	45a3aa22 	.word	0x45a3aa22
   152e4:	602af842 	.word	0x602af842
   152e8:	d00f469a 	.word	0xd00f469a
   152ec:	0604eb08 	.word	0x0604eb08
   152f0:	4622464b 	.word	0x4622464b
   152f4:	46284631 	.word	0x46284631
   152f8:	fbc2f7ff 	.word	0xfbc2f7ff
   152fc:	0301f10a 	.word	0x0301f10a
   15300:	b2db3c24 	.word	0xb2db3c24
   15304:	d0eb2800 	.word	0xd0eb2800
   15308:	e6dd4683 	.word	0xe6dd4683
   1530c:	9a06007b 	.word	0x9a06007b
   15310:	fa37b2df 	.word	0xfa37b2df
   15314:	463bf202 	.word	0x463bf202
   15318:	f1bad0d6 	.word	0xf1bad0d6
   1531c:	e9dd0f01 	.word	0xe9dd0f01
   15320:	9f0b4609 	.word	0x9f0b4609
   15324:	8167f240 	.word	0x8167f240
   15328:	a9224652 	.word	0xa9224652
   1532c:	f7ff4628 	.word	0xf7ff4628
   15330:	4683fa03 	.word	0x4683fa03
   15334:	f1bb9b05 	.word	0xf1bb9b05
   15338:	f47f0f00 	.word	0xf47f0f00
   1533c:	b123ae15 	.word	0xb123ae15
   15340:	676b9b01 	.word	0x676b9b01
   15344:	67ab9b02 	.word	0x67ab9b02
   15348:	4619e676 	.word	0x4619e676
   1534c:	f0044638 	.word	0xf0044638
   15350:	4639fcf1 	.word	0x4639fcf1
   15354:	a80d4680 	.word	0xa80d4680
   15358:	fb26f004 	.word	0xfb26f004
   1535c:	28004683 	.word	0x28004683
   15360:	ae04f47f 	.word	0xae04f47f
   15364:	e6729007 	.word	0xe6729007
   15368:	46289922 	.word	0x46289922
   1536c:	f97cf7ff 	.word	0xf97cf7ff
   15370:	e79c4683 	.word	0xe79c4683
   15374:	46504601 	.word	0x46504601
   15378:	ffbcf004 	.word	0xffbcf004
   1537c:	bf181c02 	.word	0xbf181c02
   15380:	a9162201 	.word	0xa9162201
   15384:	12d9ea02 	.word	0x12d9ea02
   15388:	f0044650 	.word	0xf0044650
   1538c:	4683fc3b 	.word	0x4683fc3b
   15390:	f004a816 	.word	0xf004a816
   15394:	f1bbfa8d 	.word	0xf1bbfa8d
   15398:	f47f0f00 	.word	0xf47f0f00
   1539c:	9b04af2b 	.word	0x9b04af2b
   153a0:	f1032101 	.word	0xf1032101
   153a4:	46200418 	.word	0x46200418
   153a8:	fc8af004 	.word	0xfc8af004
   153ac:	28004683 	.word	0x28004683
   153b0:	af20f47f 	.word	0xaf20f47f
   153b4:	2b009b6e 	.word	0x2b009b6e
   153b8:	8082f000 	.word	0x8082f000
   153bc:	6dab260c 	.word	0x6dab260c
   153c0:	3307a813 	.word	0x3307a813
   153c4:	f00408df 	.word	0xf00408df
   153c8:	a816fa6b 	.word	0xa816fa6b
   153cc:	fa68f004 	.word	0xfa68f004
   153d0:	8020f8dd 	.word	0x8020f8dd
   153d4:	9a6e9b6f 	.word	0x9a6e9b6f
   153d8:	a8134639 	.word	0xa8134639
   153dc:	f9e2f006 	.word	0xf9e2f006
   153e0:	2101e006 	.word	0x2101e006
   153e4:	f004a813 	.word	0xf004a813
   153e8:	2800fead 	.word	0x2800fead
   153ec:	80c8f040 	.word	0x80c8f040
   153f0:	a8134641 	.word	0xa8134641
   153f4:	ff16f004 	.word	0xff16f004
   153f8:	daf22800 	.word	0xdaf22800
   153fc:	f0003e01 	.word	0xf0003e01
   15400:	21018100 	.word	0x21018100
   15404:	f004a813 	.word	0xf004a813
   15408:	2800ff75 	.word	0x2800ff75
   1540c:	aa13dde2 	.word	0xaa13dde2
   15410:	46204621 	.word	0x46204621
   15414:	fa5af005 	.word	0xfa5af005
   15418:	b1304683 	.word	0xb1304683
   1541c:	f004a813 	.word	0xf004a813
   15420:	a816fa47 	.word	0xa816fa47
   15424:	fa44f004 	.word	0xfa44f004
   15428:	4620e6e4 	.word	0x4620e6e4
   1542c:	f7fe4629 	.word	0xf7fe4629
   15430:	4683fe7f 	.word	0x4683fe7f
   15434:	d1f12800 	.word	0xd1f12800
   15438:	4611aa13 	.word	0x4611aa13
   1543c:	f005a816 	.word	0xf005a816
   15440:	4683fa45 	.word	0x4683fa45
   15444:	d1e92800 	.word	0xd1e92800
   15448:	a8164629 	.word	0xa8164629
   1544c:	fe70f7fe 	.word	0xfe70f7fe
   15450:	28004683 	.word	0x28004683
   15454:	9804d1e2 	.word	0x9804d1e2
   15458:	4601aa16 	.word	0x4601aa16
   1545c:	fa36f005 	.word	0xfa36f005
   15460:	28004683 	.word	0x28004683
   15464:	4629d1da 	.word	0x4629d1da
   15468:	f7fe9804 	.word	0xf7fe9804
   1546c:	4683fe61 	.word	0x4683fe61
   15470:	d1d32800 	.word	0xd1d32800
   15474:	aa13a916 	.word	0xaa13a916
   15478:	f0054608 	.word	0xf0054608
   1547c:	4683fa27 	.word	0x4683fa27
   15480:	d1cb2800 	.word	0xd1cb2800
   15484:	a8164629 	.word	0xa8164629
   15488:	fe52f7fe 	.word	0xfe52f7fe
   1548c:	28004683 	.word	0x28004683
   15490:	aa16d1c4 	.word	0xaa16d1c4
   15494:	46504651 	.word	0x46504651
   15498:	fa18f005 	.word	0xfa18f005
   1549c:	28004683 	.word	0x28004683
   154a0:	4629d1bc 	.word	0x4629d1bc
   154a4:	f7fe4650 	.word	0xf7fe4650
   154a8:	4683fe43 	.word	0x4683fe43
   154ac:	f004a813 	.word	0xf004a813
   154b0:	a816f9ff 	.word	0xa816f9ff
   154b4:	f9fcf004 	.word	0xf9fcf004
   154b8:	0f00f1bb 	.word	0x0f00f1bb
   154bc:	ae9af47f 	.word	0xae9af47f
   154c0:	f8dd46ab 	.word	0xf8dd46ab
   154c4:	f8dd8018 	.word	0xf8dd8018
   154c8:	f8cd900c 	.word	0xf8cd900c
   154cc:	f8dda018 	.word	0xf8dda018
   154d0:	ab22a010 	.word	0xab22a010
   154d4:	d0554543 	.word	0xd0554543
   154d8:	46514652 	.word	0x46514652
   154dc:	f7fe4658 	.word	0xf7fe4658
   154e0:	4602fe73 	.word	0x4602fe73
   154e4:	d1492800 	.word	0xd1492800
   154e8:	46044606 	.word	0x46044606
   154ec:	3d01f818 	.word	0x3d01f818
   154f0:	93059d01 	.word	0x93059d01
   154f4:	0745f3c3 	.word	0x0745f3c3
   154f8:	fab41be4 	.word	0xfab41be4
   154fc:	0964f484 	.word	0x0964f484
   15500:	46224629 	.word	0x46224629
   15504:	f004a819 	.word	0xf004a819
   15508:	3601fb7d 	.word	0x3601fb7d
   1550c:	010cf105 	.word	0x010cf105
   15510:	28003524 	.word	0x28003524
   15514:	aebdf47f 	.word	0xaebdf47f
   15518:	a81c4622 	.word	0xa81c4622
   1551c:	fb72f004 	.word	0xfb72f004
   15520:	2800b2f4 	.word	0x2800b2f4
   15524:	aeb5f47f 	.word	0xaeb5f47f
   15528:	d8e545a1 	.word	0xd8e545a1
   1552c:	f004a816 	.word	0xf004a816
   15530:	aa1cf9b7 	.word	0xaa1cf9b7
   15534:	a8169908 	.word	0xa8169908
   15538:	f908f005 	.word	0xf908f005
   1553c:	4683b108 	.word	0x4683b108
   15540:	4601e655 	.word	0x4601e655
   15544:	f004a81c 	.word	0xf004a81c
   15548:	1c02fed5 	.word	0x1c02fed5
   1554c:	2201bf18 	.word	0x2201bf18
   15550:	a9169b05 	.word	0xa9169b05
   15554:	12d3ea02 	.word	0x12d3ea02
   15558:	f004a81c 	.word	0xf004a81c
   1555c:	9005fb53 	.word	0x9005fb53
   15560:	f004a816 	.word	0xf004a816
   15564:	9a05f9a5 	.word	0x9a05f9a5
   15568:	4652b942 	.word	0x4652b942
   1556c:	4651ab19 	.word	0x4651ab19
   15570:	f7ff4658 	.word	0xf7ff4658
   15574:	4602fa85 	.word	0x4602fa85
   15578:	d0aa2800 	.word	0xd0aa2800
   1557c:	e6394693 	.word	0xe6394693
   15580:	e74b4683 	.word	0xe74b4683
   15584:	f8dda819 	.word	0xf8dda819
   15588:	f004a018 	.word	0xf004a018
   1558c:	a81cf991 	.word	0xa81cf991
   15590:	f98ef004 	.word	0xf98ef004
   15594:	f004a81f 	.word	0xf004a81f
   15598:	a819f98b 	.word	0xa819f98b
   1559c:	f980f004 	.word	0xf980f004
   155a0:	99084652 	.word	0x99084652
   155a4:	f005a819 	.word	0xf005a819
   155a8:	465df8d1 	.word	0x465df8d1
   155ac:	b1184683 	.word	0xb1184683
   155b0:	f004a819 	.word	0xf004a819
   155b4:	e552f97d 	.word	0xe552f97d
   155b8:	46504659 	.word	0x46504659
   155bc:	fe9af004 	.word	0xfe9af004
   155c0:	a9199b02 	.word	0xa9199b02
   155c4:	bf082800 	.word	0xbf082800
   155c8:	46502300 	.word	0x46502300
   155cc:	f004461a 	.word	0xf004461a
   155d0:	4683fb19 	.word	0x4683fb19
   155d4:	f004a819 	.word	0xf004a819
   155d8:	f1bbf96b 	.word	0xf1bbf96b
   155dc:	f47f0f00 	.word	0xf47f0f00
   155e0:	4628ad3e 	.word	0x4628ad3e
   155e4:	f7ff9904 	.word	0xf7ff9904
   155e8:	9b07f83f 	.word	0x9b07f83f
   155ec:	2b004683 	.word	0x2b004683
   155f0:	acd4f47f 	.word	0xacd4f47f
   155f4:	9922e4ba 	.word	0x9922e4ba
   155f8:	f7ff4628 	.word	0xf7ff4628
   155fc:	4683f835 	.word	0x4683f835
   15600:	f8dfe698 	.word	0xf8dfe698
   15604:	e5f5b02c 	.word	0xe5f5b02c
   15608:	f10a2201 	.word	0xf10a2201
   1560c:	eb0a31ff 	.word	0xeb0a31ff
   15610:	fa020403 	.word	0xfa020403
   15614:	3c01f301 	.word	0x3c01f301
   15618:	b2db9302 	.word	0xb2db9302
   1561c:	fbb49106 	.word	0xfbb49106
   15620:	4656f4fa 	.word	0x4656f4fa
   15624:	e5029303 	.word	0xe5029303
   15628:	ffffb280 	.word	0xffffb280
   1562c:	ffffb080 	.word	0xffffb080
   15630:	ffffb300 	.word	0xffffb300

00015634 <symbol_000637b>:
   15634:	43f8e92d 	.word	0x43f8e92d
   15638:	e9dd2a01 	.word	0xe9dd2a01
   1563c:	d8437808 	.word	0xd8437808
   15640:	4681460d 	.word	0x4681460d
   15644:	f1052100 	.word	0xf1052100
   15648:	461e0018 	.word	0x461e0018
   1564c:	f0044614 	.word	0xf0044614
   15650:	b938fe51 	.word	0xb938fe51
   15654:	0f00f1b8 	.word	0x0f00f1b8
   15658:	2301d038 	.word	0x2301d038
   1565c:	60337038 	.word	0x60337038
   15660:	83f8e8bd 	.word	0x83f8e8bd
   15664:	0004f109 	.word	0x0004f109
   15668:	fba2f004 	.word	0xfba2f004
   1566c:	b9c44681 	.word	0xb9c44681
   15670:	33010043 	.word	0x33010043
   15674:	60334598 	.word	0x60334598
   15678:	2304d328 	.word	0x2304d328
   1567c:	46024639 	.word	0x46024639
   15680:	3b01f801 	.word	0x3b01f801
   15684:	f0044628 	.word	0xf0044628
   15688:	2800fc55 	.word	0x2800fc55
   1568c:	f109d1e8 	.word	0xf109d1e8
   15690:	f1050101 	.word	0xf1050101
   15694:	4439000c 	.word	0x4439000c
   15698:	e8bd464a 	.word	0xe8bd464a
   1569c:	f00443f8 	.word	0xf00443f8
   156a0:	1c43bc49 	.word	0x1c43bc49
   156a4:	60334598 	.word	0x60334598
   156a8:	2100d310 	.word	0x2100d310
   156ac:	000cf105 	.word	0x000cf105
   156b0:	fb40f004 	.word	0xfb40f004
   156b4:	30024639 	.word	0x30024639
   156b8:	0b01f801 	.word	0x0b01f801
   156bc:	4628464a 	.word	0x4628464a
   156c0:	43f8e8bd 	.word	0x43f8e8bd
   156c4:	bc36f004 	.word	0xbc36f004
   156c8:	e7c94801 	.word	0xe7c94801
   156cc:	e7c74801 	.word	0xe7c74801
   156d0:	ffffb080 	.word	0xffffb080
   156d4:	ffffb100 	.word	0xffffb100

000156d8 <symbol_0007a22>:
   156d8:	d0412b00 	.word	0xd0412b00
   156dc:	461eb5f8 	.word	0x461eb5f8
   156e0:	46147813 	.word	0x46147813
   156e4:	b9ab460d 	.word	0xb9ab460d
   156e8:	d1352e01 	.word	0xd1352e01
   156ec:	46284631 	.word	0x46284631
   156f0:	fae6f004 	.word	0xfae6f004
   156f4:	bdf8b100 	.word	0xbdf8b100
   156f8:	f1054631 	.word	0xf1054631
   156fc:	f004000c 	.word	0xf004000c
   15700:	2800fadf 	.word	0x2800fadf
   15704:	4601d1f7 	.word	0x4601d1f7
   15708:	0018f105 	.word	0x0018f105
   1570c:	40f8e8bd 	.word	0x40f8e8bd
   15710:	bad6f004 	.word	0xbad6f004
   15714:	f0043004 	.word	0xf0043004
   15718:	7823fb4b 	.word	0x7823fb4b
   1571c:	2b044607 	.word	0x2b044607
   15720:	0043d11c 	.word	0x0043d11c
   15724:	429e3301 	.word	0x429e3301
   15728:	4602d116 	.word	0x4602d116
   1572c:	46281c61 	.word	0x46281c61
   15730:	fb6ef004 	.word	0xfb6ef004
   15734:	d1de2800 	.word	0xd1de2800
   15738:	44211c79 	.word	0x44211c79
   1573c:	f105463a 	.word	0xf105463a
   15740:	f004000c 	.word	0xf004000c
   15744:	2800fb65 	.word	0x2800fb65
   15748:	f105d1d5 	.word	0xf105d1d5
   1574c:	21010018 	.word	0x21010018
   15750:	40f8e8bd 	.word	0x40f8e8bd
   15754:	bab4f004 	.word	0xbab4f004
   15758:	bdf84802 	.word	0xbdf84802
   1575c:	bdf84802 	.word	0xbdf84802
   15760:	47704800 	.word	0x47704800
   15764:	ffffb080 	.word	0xffffb080
   15768:	ffffb180 	.word	0xffffb180

0001576c <symbol_000e8bc>:
   1576c:	41f0e92d 	.word	0x41f0e92d
   15770:	b086460c 	.word	0xb086460c
   15774:	21014605 	.word	0x21014605
   15778:	0018f104 	.word	0x0018f104
   1577c:	fdbaf004 	.word	0xfdbaf004
   15780:	f0402800 	.word	0xf0402800
   15784:	6b2b809f 	.word	0x6b2b809f
   15788:	f0002b00 	.word	0xf0002b00
   1578c:	6beb80a0 	.word	0x6beb80a0
   15790:	f0002b00 	.word	0xf0002b00
   15794:	4601809c 	.word	0x4601809c
   15798:	46204606 	.word	0x46204606
   1579c:	fdaaf004 	.word	0xfdaaf004
   157a0:	f2c02800 	.word	0xf2c02800
   157a4:	f104808f 	.word	0xf104808f
   157a8:	4631070c 	.word	0x4631070c
   157ac:	f0044638 	.word	0xf0044638
   157b0:	2800fda1 	.word	0x2800fda1
   157b4:	8086f2c0 	.word	0x8086f2c0
   157b8:	0804f105 	.word	0x0804f105
   157bc:	46204641 	.word	0x46204641
   157c0:	fd30f004 	.word	0xfd30f004
   157c4:	da7d2800 	.word	0xda7d2800
   157c8:	46384641 	.word	0x46384641
   157cc:	fd2af004 	.word	0xfd2af004
   157d0:	da772800 	.word	0xda772800
   157d4:	f0044668 	.word	0xf0044668
   157d8:	a803f863 	.word	0xa803f863
   157dc:	f860f004 	.word	0xf860f004
   157e0:	4639463a 	.word	0x4639463a
   157e4:	f0054668 	.word	0xf0054668
   157e8:	4606f871 	.word	0x4606f871
   157ec:	4668b148 	.word	0x4668b148
   157f0:	f85ef004 	.word	0xf85ef004
   157f4:	f004a803 	.word	0xf004a803
   157f8:	4630f85b 	.word	0x4630f85b
   157fc:	e8bdb006 	.word	0xe8bdb006
   15800:	462981f0 	.word	0x462981f0
   15804:	f7fe4668 	.word	0xf7fe4668
   15808:	4606fc93 	.word	0x4606fc93
   1580c:	d1ee2800 	.word	0xd1ee2800
   15810:	46214622 	.word	0x46214622
   15814:	f005a803 	.word	0xf005a803
   15818:	4606f859 	.word	0x4606f859
   1581c:	d1e62800 	.word	0xd1e62800
   15820:	a8034629 	.word	0xa8034629
   15824:	fc84f7fe 	.word	0xfc84f7fe
   15828:	28004606 	.word	0x28004606
   1582c:	69abd1df 	.word	0x69abd1df
   15830:	d04e2b00 	.word	0xd04e2b00
   15834:	f105a903 	.word	0xf105a903
   15838:	46080210 	.word	0x46080210
   1583c:	ff12f004 	.word	0xff12f004
   15840:	28004606 	.word	0x28004606
   15844:	e007d1d3 	.word	0xe007d1d3
   15848:	4642a903 	.word	0x4642a903
   1584c:	f0044608 	.word	0xf0044608
   15850:	4606fe49 	.word	0x4606fe49
   15854:	d1ca2800 	.word	0xd1ca2800
   15858:	a8034641 	.word	0xa8034641
   1585c:	fce2f004 	.word	0xfce2f004
   15860:	daf12800 	.word	0xdaf12800
   15864:	4622a903 	.word	0x4622a903
   15868:	f0054608 	.word	0xf0054608
   1586c:	4606f82f 	.word	0x4606f82f
   15870:	d1bc2800 	.word	0xd1bc2800
   15874:	a8034629 	.word	0xa8034629
   15878:	fc5af7fe 	.word	0xfc5af7fe
   1587c:	28004606 	.word	0x28004606
   15880:	a903d1b5 	.word	0xa903d1b5
   15884:	021cf105 	.word	0x021cf105
   15888:	f0044608 	.word	0xf0044608
   1588c:	4606feeb 	.word	0x4606feeb
   15890:	d1ac2800 	.word	0xd1ac2800
   15894:	a903e007 	.word	0xa903e007
   15898:	46084642 	.word	0x46084642
   1589c:	fe22f004 	.word	0xfe22f004
   158a0:	28004606 	.word	0x28004606
   158a4:	4641d1a3 	.word	0x4641d1a3
   158a8:	f004a803 	.word	0xf004a803
   158ac:	2800fcbb 	.word	0x2800fcbb
   158b0:	a903daf1 	.word	0xa903daf1
   158b4:	f0044668 	.word	0xf0044668
   158b8:	4e14fcb5 	.word	0x4e14fcb5
   158bc:	bf082800 	.word	0xbf082800
   158c0:	e7942600 	.word	0xe7942600
   158c4:	46304e11 	.word	0x46304e11
   158c8:	e8bdb006 	.word	0xe8bdb006
   158cc:	4e1081f0 	.word	0x4e1081f0
   158d0:	a903e793 	.word	0xa903e793
   158d4:	46082203 	.word	0x46082203
   158d8:	ffacf004 	.word	0xffacf004
   158dc:	28004606 	.word	0x28004606
   158e0:	e00ed185 	.word	0xe00ed185
   158e4:	a8032100 	.word	0xa8032100
   158e8:	fd04f004 	.word	0xfd04f004
   158ec:	d0b92800 	.word	0xd0b92800
   158f0:	4642a903 	.word	0x4642a903
   158f4:	f0044608 	.word	0xf0044608
   158f8:	4606feb5 	.word	0x4606feb5
   158fc:	f47f2800 	.word	0xf47f2800
   15900:	9b03af76 	.word	0x9b03af76
   15904:	dbed2b00 	.word	0xdbed2b00
   15908:	bf00e7ac 	.word	0xbf00e7ac
   1590c:	ffffb380 	.word	0xffffb380
   15910:	ffffb080 	.word	0xffffb080

00015914 <symbol_0001f66>:
   15914:	43f0e92d 	.word	0x43f0e92d
   15918:	b0ab7803 	.word	0xb0ab7803
   1591c:	f0002b00 	.word	0xf0002b00
   15920:	780a80c4 	.word	0x780a80c4
   15924:	f040429a 	.word	0xf040429a
   15928:	f10180c0 	.word	0xf10180c0
   1592c:	460c0788 	.word	0x460c0788
   15930:	46394605 	.word	0x46394605
   15934:	f0043088 	.word	0xf0043088
   15938:	2800fc75 	.word	0x2800fc75
   1593c:	80b5f040 	.word	0x80b5f040
   15940:	0994f104 	.word	0x0994f104
   15944:	f1054649 	.word	0xf1054649
   15948:	f0040094 	.word	0xf0040094
   1594c:	2800fc6b 	.word	0x2800fc6b
   15950:	80abf040 	.word	0x80abf040
   15954:	08a0f104 	.word	0x08a0f104
   15958:	00a0f105 	.word	0x00a0f105
   1595c:	f0044641 	.word	0xf0044641
   15960:	4606fc61 	.word	0x4606fc61
   15964:	f0402800 	.word	0xf0402800
   15968:	462580a0 	.word	0x462580a0
   1596c:	f003a802 	.word	0xf003a802
   15970:	a805ff97 	.word	0xa805ff97
   15974:	ff94f003 	.word	0xff94f003
   15978:	f003a808 	.word	0xf003a808
   1597c:	4631ff91 	.word	0x4631ff91
   15980:	a80b227c 	.word	0xa80b227c
   15984:	fc55f00e 	.word	0xfc55f00e
   15988:	1b7cf815 	.word	0x1b7cf815
   1598c:	f7fda80b 	.word	0xf7fda80b
   15990:	f104fbd5 	.word	0xf104fbd5
   15994:	21010040 	.word	0x21010040
   15998:	f0043428 	.word	0xf0043428
   1599c:	2800fcab 	.word	0x2800fcab
   159a0:	8081f040 	.word	0x8081f040
   159a4:	2b009b17 	.word	0x2b009b17
   159a8:	9b1ad07d 	.word	0x9b1ad07d
   159ac:	d07a2b00 	.word	0xd07a2b00
   159b0:	46282101 	.word	0x46282101
   159b4:	fc9ef004 	.word	0xfc9ef004
   159b8:	f2c02800 	.word	0xf2c02800
   159bc:	a91e8083 	.word	0xa91e8083
   159c0:	f0044628 	.word	0xf0044628
   159c4:	2800fc2f 	.word	0x2800fc2f
   159c8:	4621da7c 	.word	0x4621da7c
   159cc:	f7ffa80b 	.word	0xf7ffa80b
   159d0:	4606fecd 	.word	0x4606fecd
   159d4:	9b17b980 	.word	0x9b17b980
   159d8:	d0642b00 	.word	0xd0642b00
   159dc:	2b009b1a 	.word	0x2b009b1a
   159e0:	e9cdd061 	.word	0xe9cdd061
   159e4:	46230000 	.word	0x46230000
   159e8:	a902462a 	.word	0xa902462a
   159ec:	f7ffa80b 	.word	0xf7ffa80b
   159f0:	4606fa6b 	.word	0x4606fa6b
   159f4:	d04c2800 	.word	0xd04c2800
   159f8:	f003a802 	.word	0xf003a802
   159fc:	a805ff59 	.word	0xa805ff59
   15a00:	ff56f003 	.word	0xff56f003
   15a04:	f003a808 	.word	0xf003a808
   15a08:	9b23ff53 	.word	0x9b23ff53
   15a0c:	d1262b01 	.word	0xd1262b01
   15a10:	b1c89828 	.word	0xb1c89828
   15a14:	b1aa9a29 	.word	0xb1aa9a29
   15a18:	eb052500 	.word	0xeb052500
   15a1c:	eb1003c5 	.word	0xeb1003c5
   15a20:	d0320483 	.word	0xd0320483
   15a24:	f0034620 	.word	0xf0034620
   15a28:	f104ff43 	.word	0xf104ff43
   15a2c:	f003000c 	.word	0xf003000c
   15a30:	f104ff3f 	.word	0xf104ff3f
   15a34:	f0030018 	.word	0xf0030018
   15a38:	9a29ff3b 	.word	0x9a29ff3b
   15a3c:	42953501 	.word	0x42953501
   15a40:	d3ea9828 	.word	0xd3ea9828
   15a44:	fb94f007 	.word	0xfb94f007
   15a48:	ab0b2200 	.word	0xab0b2200
   15a4c:	a92a701a 	.word	0xa92a701a
   15a50:	428b3301 	.word	0x428b3301
   15a54:	4630d1fa 	.word	0x4630d1fa
   15a58:	e8bdb02b 	.word	0xe8bdb02b
   15a5c:	a80c83f0 	.word	0xa80c83f0
   15a60:	ff26f003 	.word	0xff26f003
   15a64:	f003a80f 	.word	0xf003a80f
   15a68:	a812ff23 	.word	0xa812ff23
   15a6c:	ff20f003 	.word	0xff20f003
   15a70:	f003a815 	.word	0xf003a815
   15a74:	a818ff1d 	.word	0xa818ff1d
   15a78:	ff1af003 	.word	0xff1af003
   15a7c:	f003a81b 	.word	0xf003a81b
   15a80:	a81eff17 	.word	0xa81eff17
   15a84:	ff14f003 	.word	0xff14f003
   15a88:	3501e7c2 	.word	0x3501e7c2
   15a8c:	d3c44295 	.word	0xd3c44295
   15a90:	4639e7d8 	.word	0x4639e7d8
   15a94:	f004a802 	.word	0xf004a802
   15a98:	b920fbc5 	.word	0xb920fbc5
   15a9c:	a8054649 	.word	0xa8054649
   15aa0:	fbc0f004 	.word	0xfbc0f004
   15aa4:	4e08b130 	.word	0x4e08b130
   15aa8:	4e07e7a6 	.word	0x4e07e7a6
   15aac:	b02b4630 	.word	0xb02b4630
   15ab0:	83f0e8bd 	.word	0x83f0e8bd
   15ab4:	a8084641 	.word	0xa8084641
   15ab8:	fbb4f004 	.word	0xfbb4f004
   15abc:	28004606 	.word	0x28004606
   15ac0:	e7f0d09a 	.word	0xe7f0d09a
   15ac4:	e7974e01 	.word	0xe7974e01
   15ac8:	ffffb080 	.word	0xffffb080
   15acc:	ffffb380 	.word	0xffffb380

00015ad0 <interface_init>:
   15ad0:	f44fb508 	.word	0xf44fb508
   15ad4:	21007290 	.word	0x21007290
   15ad8:	f00e4802 	.word	0xf00e4802
   15adc:	2000fbaa 	.word	0x2000fbaa
   15ae0:	bf00bd08 	.word	0xbf00bd08
   15ae4:	20026c80 	.word	0x20026c80

00015ae8 <interface_socket_allocate>:
   15ae8:	4b29b5f8 	.word	0x4b29b5f8
   15aec:	681d4606 	.word	0x681d4606
   15af0:	b1e54608 	.word	0xb1e54608
   15af4:	2c006a5c 	.word	0x2c006a5c
   15af8:	6c9cd03d 	.word	0x6c9cd03d
   15afc:	d03c2c00 	.word	0xd03c2c00
   15b00:	2c006edc 	.word	0x2c006edc
   15b04:	f8d3d03b 	.word	0xf8d3d03b
   15b08:	b1791090 	.word	0xb1791090
   15b0c:	10b4f8d3 	.word	0x10b4f8d3
   15b10:	f8d3b3b9 	.word	0xf8d3b3b9
   15b14:	b3b110d8 	.word	0xb3b110d8
   15b18:	10fcf8d3 	.word	0x10fcf8d3
   15b1c:	f04fb3a9 	.word	0xf04fb3a9
   15b20:	200c35ff 	.word	0x200c35ff
   15b24:	fa34f7fa 	.word	0xfa34f7fa
   15b28:	bdf84628 	.word	0xbdf84628
   15b2c:	f04f2504 	.word	0xf04f2504
   15b30:	f04f0c01 	.word	0xf04f0c01
   15b34:	eb0537ff 	.word	0xeb0537ff
   15b38:	00a404c5 	.word	0x00a404c5
   15b3c:	c004f843 	.word	0xc004f843
   15b40:	4611441c 	.word	0x4611441c
   15b44:	462261a7 	.word	0x462261a7
   15b48:	facaf7fd 	.word	0xfacaf7fd
   15b4c:	61e04603 	.word	0x61e04603
   15b50:	681bb158 	.word	0x681bb158
   15b54:	4798681b 	.word	0x4798681b
   15b58:	6034b910 	.word	0x6034b910
   15b5c:	bdf84628 	.word	0xbdf84628
   15b60:	f7fd69e0 	.word	0xf7fd69e0
   15b64:	2300fadd 	.word	0x2300fadd
   15b68:	462061e3 	.word	0x462061e3
   15b6c:	21002224 	.word	0x21002224
   15b70:	fb5ff00e 	.word	0xfb5ff00e
   15b74:	2501e7d3 	.word	0x2501e7d3
   15b78:	2502e7d9 	.word	0x2502e7d9
   15b7c:	2503e7d7 	.word	0x2503e7d7
   15b80:	2505e7d5 	.word	0x2505e7d5
   15b84:	2506e7d3 	.word	0x2506e7d3
   15b88:	2507e7d1 	.word	0x2507e7d1
   15b8c:	bf00e7cf 	.word	0xbf00e7cf
   15b90:	20026c80 	.word	0x20026c80

00015b94 <interface_socket_free>:
   15b94:	d9002807 	.word	0xd9002807
   15b98:	b5104770 	.word	0xb5104770
   15b9c:	eb004c07 	.word	0xeb004c07
   15ba0:	eb0400c0 	.word	0xeb0400c0
   15ba4:	69e00480 	.word	0x69e00480
   15ba8:	f7fdb108 	.word	0xf7fdb108
   15bac:	4620fab9 	.word	0x4620fab9
   15bb0:	4010e8bd 	.word	0x4010e8bd
   15bb4:	21002224 	.word	0x21002224
   15bb8:	bb3bf00e 	.word	0xbb3bf00e
   15bbc:	20026c80 	.word	0x20026c80

00015bc0 <interface_socket_packet_handler_update>:
   15bc0:	e92d2807 	.word	0xe92d2807
   15bc4:	d81e43f8 	.word	0xd81e43f8
   15bc8:	08c0ea4f 	.word	0x08c0ea4f
   15bcc:	eb084e17 	.word	0xeb084e17
   15bd0:	009b0300 	.word	0x009b0300
   15bd4:	18f558f4 	.word	0x18f558f4
   15bd8:	460bb1ac 	.word	0x460bb1ac
   15bdc:	46114604 	.word	0x46114604
   15be0:	462a4618 	.word	0x462a4618
   15be4:	901cf8d5 	.word	0x901cf8d5
   15be8:	fa7af7fd 	.word	0xfa7af7fd
   15bec:	b1d061e8 	.word	0xb1d061e8
   15bf0:	681b6803 	.word	0x681b6803
   15bf4:	46074798 	.word	0x46074798
   15bf8:	4648b948 	.word	0x4648b948
   15bfc:	fa90f7fd 	.word	0xfa90f7fd
   15c00:	e8bd4638 	.word	0xe8bd4638
   15c04:	270583f8 	.word	0x270583f8
   15c08:	e8bd4638 	.word	0xe8bd4638
   15c0c:	69e883f8 	.word	0x69e883f8
   15c10:	fa86f7fd 	.word	0xfa86f7fd
   15c14:	0004eb08 	.word	0x0004eb08
   15c18:	0680eb06 	.word	0x0680eb06
   15c1c:	901cf8c6 	.word	0x901cf8c6
   15c20:	e8bd4638 	.word	0xe8bd4638
   15c24:	270483f8 	.word	0x270483f8
   15c28:	bf00e7f4 	.word	0xbf00e7f4
   15c2c:	20026c80 	.word	0x20026c80

00015c30 <interface_socket_wait>:
   15c30:	eb00b5f0 	.word	0xeb00b5f0
   15c34:	4c0e00c0 	.word	0x4c0e00c0
   15c38:	58250080 	.word	0x58250080
   15c3c:	4015b083 	.word	0x4015b083
   15c40:	9301428d 	.word	0x9301428d
   15c44:	d0104404 	.word	0xd0104404
   15c48:	b9736863 	.word	0xb9736863
   15c4c:	4616460f 	.word	0x4616460f
   15c50:	e0064625 	.word	0xe0064625
   15c54:	b943686b 	.word	0xb943686b
   15c58:	4620a901 	.word	0x4620a901
   15c5c:	f908f7fa 	.word	0xf908f7fa
   15c60:	682bb920 	.word	0x682bb920
   15c64:	42bb4033 	.word	0x42bb4033
   15c68:	2000d1f4 	.word	0x2000d1f4
   15c6c:	bdf0b003 	.word	0xbdf0b003
   15c70:	20026c80 	.word	0x20026c80

00015c74 <interface_from_internal_id_search>:
   15c74:	681a4b23 	.word	0x681a4b23
   15c78:	699ab112 	.word	0x699ab112
   15c7c:	d0324282 	.word	0xd0324282
   15c80:	b1126a5a 	.word	0xb1126a5a
   15c84:	42826bda 	.word	0x42826bda
   15c88:	6c9ad02f 	.word	0x6c9ad02f
   15c8c:	6e1ab112 	.word	0x6e1ab112
   15c90:	d02c4282 	.word	0xd02c4282
   15c94:	b11a6eda 	.word	0xb11a6eda
   15c98:	2084f8d3 	.word	0x2084f8d3
   15c9c:	d0284282 	.word	0xd0284282
   15ca0:	2090f8d3 	.word	0x2090f8d3
   15ca4:	f8d3b11a 	.word	0xf8d3b11a
   15ca8:	428220a8 	.word	0x428220a8
   15cac:	f8d3d023 	.word	0xf8d3d023
   15cb0:	b11a20b4 	.word	0xb11a20b4
   15cb4:	20ccf8d3 	.word	0x20ccf8d3
   15cb8:	d01e4282 	.word	0xd01e4282
   15cbc:	20d8f8d3 	.word	0x20d8f8d3
   15cc0:	f8d3b11a 	.word	0xf8d3b11a
   15cc4:	428220f0 	.word	0x428220f0
   15cc8:	f8d3d019 	.word	0xf8d3d019
   15ccc:	b13a20fc 	.word	0xb13a20fc
   15cd0:	3114f8d3 	.word	0x3114f8d3
   15cd4:	bf144283 	.word	0xbf144283
   15cd8:	30fff04f 	.word	0x30fff04f
   15cdc:	47702007 	.word	0x47702007
   15ce0:	30fff04f 	.word	0x30fff04f
   15ce4:	20004770 	.word	0x20004770
   15ce8:	20014770 	.word	0x20014770
   15cec:	20024770 	.word	0x20024770
   15cf0:	20034770 	.word	0x20034770
   15cf4:	20044770 	.word	0x20044770
   15cf8:	20054770 	.word	0x20054770
   15cfc:	20064770 	.word	0x20064770
   15d00:	bf004770 	.word	0xbf004770
   15d04:	20026c80 	.word	0x20026c80

00015d08 <interface_socket_from_handle_get>:
   15d08:	d8072807 	.word	0xd8072807
   15d0c:	00c0eb00 	.word	0x00c0eb00
   15d10:	00804b03 	.word	0x00804b03
   15d14:	b10a581a 	.word	0xb10a581a
   15d18:	47704418 	.word	0x47704418
   15d1c:	47702000 	.word	0x47702000
   15d20:	20026c80 	.word	0x20026c80

00015d24 <interface_socket_event_get>:
   15d24:	2807b119 	.word	0x2807b119
   15d28:	2310d902 	.word	0x2310d902
   15d2c:	4770600b 	.word	0x4770600b
   15d30:	00c0eb00 	.word	0x00c0eb00
   15d34:	00804b07 	.word	0x00804b07
   15d38:	2a00581a 	.word	0x2a00581a
   15d3c:	581bd0f5 	.word	0x581bd0f5
   15d40:	f0030c1b 	.word	0xf0030c1b
   15d44:	2a0a020a 	.word	0x2a0a020a
   15d48:	f003bf14 	.word	0xf003bf14
   15d4c:	f003030f 	.word	0xf003030f
   15d50:	e7eb030d 	.word	0xe7eb030d
   15d54:	20026c80 	.word	0x20026c80

00015d58 <interface_socket_setopt>:
   15d58:	b5702807 	.word	0xb5702807
   15d5c:	eb00d827 	.word	0xeb00d827
   15d60:	4c1600c0 	.word	0x4c1600c0
   15d64:	58250080 	.word	0x58250080
   15d68:	2901b30d 	.word	0x2901b30d
   15d6c:	2a14d119 	.word	0x2a14d119
   15d70:	b183d117 	.word	0xb183d117
   15d74:	2a089a04 	.word	0x2a089a04
   15d78:	f44fd10d 	.word	0xf44fd10d
   15d7c:	685a757a 	.word	0x685a757a
   15d80:	68194e0f 	.word	0x68194e0f
   15d84:	2302fba6 	.word	0x2302fba6
   15d88:	fb05099b 	.word	0xfb05099b
   15d8c:	44203301 	.word	0x44203301
   15d90:	20006203 	.word	0x20006203
   15d94:	2016bd70 	.word	0x2016bd70
   15d98:	f8faf7fa 	.word	0xf8faf7fa
   15d9c:	30fff04f 	.word	0x30fff04f
   15da0:	202abd70 	.word	0x202abd70
   15da4:	f8f4f7fa 	.word	0xf8f4f7fa
   15da8:	30fff04f 	.word	0x30fff04f
   15dac:	2009bd70 	.word	0x2009bd70
   15db0:	f8eef7fa 	.word	0xf8eef7fa
   15db4:	30fff04f 	.word	0x30fff04f
   15db8:	bf00bd70 	.word	0xbf00bd70
   15dbc:	20026c80 	.word	0x20026c80
   15dc0:	10624dd3 	.word	0x10624dd3

00015dc4 <interface_socket_getopt>:
   15dc4:	2807b570 	.word	0x2807b570
   15dc8:	d8219d04 	.word	0xd8219d04
   15dcc:	eb004c13 	.word	0xeb004c13
   15dd0:	008000c0 	.word	0x008000c0
   15dd4:	44045826 	.word	0x44045826
   15dd8:	2901b1d6 	.word	0x2901b1d6
   15ddc:	2a04d112 	.word	0x2a04d112
   15de0:	b14bd110 	.word	0xb14bd110
   15de4:	682ab145 	.word	0x682ab145
   15de8:	d1052a04 	.word	0xd1052a04
   15dec:	68612200 	.word	0x68612200
   15df0:	60194610 	.word	0x60194610
   15df4:	bd706062 	.word	0xbd706062
   15df8:	f7fa2016 	.word	0xf7fa2016
   15dfc:	f04ff8c9 	.word	0xf04ff8c9
   15e00:	bd7030ff 	.word	0xbd7030ff
   15e04:	f7fa202a 	.word	0xf7fa202a
   15e08:	f04ff8c3 	.word	0xf04ff8c3
   15e0c:	bd7030ff 	.word	0xbd7030ff
   15e10:	f7fa2009 	.word	0xf7fa2009
   15e14:	f04ff8bd 	.word	0xf04ff8bd
   15e18:	bd7030ff 	.word	0xbd7030ff
   15e1c:	20026c80 	.word	0x20026c80

00015e20 <interface_socket_fcntl>:
   15e20:	b5102807 	.word	0xb5102807
   15e24:	eb00d818 	.word	0xeb00d818
   15e28:	4c1100c0 	.word	0x4c1100c0
   15e2c:	58e00083 	.word	0x58e00083
   15e30:	2901b190 	.word	0x2901b190
   15e34:	2902d005 	.word	0x2902d005
   15e38:	58e0d114 	.word	0x58e0d114
   15e3c:	7000f3c0 	.word	0x7000f3c0
   15e40:	f012bd10 	.word	0xf012bd10
   15e44:	58e20001 	.word	0x58e20001
   15e48:	2000bf1a 	.word	0x2000bf1a
   15e4c:	5280f042 	.word	0x5280f042
   15e50:	5280f022 	.word	0x5280f022
   15e54:	bd1050e2 	.word	0xbd1050e2
   15e58:	f7fa2009 	.word	0xf7fa2009
   15e5c:	f04ff899 	.word	0xf04ff899
   15e60:	bd1030ff 	.word	0xbd1030ff
   15e64:	f7fa2016 	.word	0xf7fa2016
   15e68:	f04ff893 	.word	0xf04ff893
   15e6c:	bd1030ff 	.word	0xbd1030ff
   15e70:	20026c80 	.word	0x20026c80

00015e74 <symbol_00026c2>:
   15e74:	4ff0e92d 	.word	0x4ff0e92d
   15e78:	2100460e 	.word	0x2100460e
   15e7c:	b0854605 	.word	0xb0854605
   15e80:	93004608 	.word	0x93004608
   15e84:	461c4617 	.word	0x461c4617
   15e88:	aa034613 	.word	0xaa034613
   15e8c:	9038f8dd 	.word	0x9038f8dd
   15e90:	f994f7fb 	.word	0xf994f7fb
   15e94:	f00e4628 	.word	0xf00e4628
   15e98:	4682f96b 	.word	0x4682f96b
   15e9c:	f00e4630 	.word	0xf00e4630
   15ea0:	9903f967 	.word	0x9903f967
   15ea4:	eb031c4b 	.word	0xeb031c4b
   15ea8:	44531391 	.word	0x44531391
   15eac:	9b0f4418 	.word	0x9b0f4418
   15eb0:	d8534298 	.word	0xd8534298
   15eb4:	f0072001 	.word	0xf0072001
   15eb8:	4682f947 	.word	0x4682f947
   15ebc:	d0522800 	.word	0xd0522800
   15ec0:	94009903 	.word	0x94009903
   15ec4:	aa03463b 	.word	0xaa03463b
   15ec8:	f978f7fb 	.word	0xf978f7fb
   15ecc:	28004680 	.word	0x28004680
   15ed0:	4628d13d 	.word	0x4628d13d
   15ed4:	f94cf00e 	.word	0xf94cf00e
   15ed8:	46024629 	.word	0x46024629
   15edc:	f00e4648 	.word	0xf00e4648
   15ee0:	4628f97b 	.word	0x4628f97b
   15ee4:	f944f00e 	.word	0xf944f00e
   15ee8:	eb099b03 	.word	0xeb099b03
   15eec:	b19b0400 	.word	0xb19b0400
   15ef0:	270a46d3 	.word	0x270a46d3
   15ef4:	bf282b40 	.word	0xbf282b40
   15ef8:	461d2340 	.word	0x461d2340
   15efc:	461a4659 	.word	0x461a4659
   15f00:	f00e4620 	.word	0xf00e4620
   15f04:	9b03f969 	.word	0x9b03f969
   15f08:	1b5b442c 	.word	0x1b5b442c
   15f0c:	44ab7027 	.word	0x44ab7027
   15f10:	93033401 	.word	0x93033401
   15f14:	d1ed2b00 	.word	0xd1ed2b00
   15f18:	f00e4630 	.word	0xf00e4630
   15f1c:	4631f929 	.word	0x4631f929
   15f20:	46204602 	.word	0x46204602
   15f24:	f958f00e 	.word	0xf958f00e
   15f28:	f00e4630 	.word	0xf00e4630
   15f2c:	2100f921 	.word	0x2100f921
   15f30:	18234602 	.word	0x18234602
   15f34:	330154a1 	.word	0x330154a1
   15f38:	eba39a10 	.word	0xeba39a10
   15f3c:	46500309 	.word	0x46500309
   15f40:	f0076013 	.word	0xf0076013
   15f44:	4640f915 	.word	0x4640f915
   15f48:	e8bdb005 	.word	0xe8bdb005
   15f4c:	46508ff0 	.word	0x46508ff0
   15f50:	f90ef007 	.word	0xf90ef007
   15f54:	b0054640 	.word	0xb0054640
   15f58:	8ff0e8bd 	.word	0x8ff0e8bd
   15f5c:	f06f9b10 	.word	0xf06f9b10
   15f60:	60180829 	.word	0x60180829
   15f64:	f8dfe7ef 	.word	0xf8dfe7ef
   15f68:	e7ec8004 	.word	0xe7ec8004
   15f6c:	ffffee80 	.word	0xffffee80

00015f70 <ip_recvd_packet_free_cb>:
   15f70:	4604b510 	.word	0x4604b510
   15f74:	f7fa6800 	.word	0xf7fa6800
   15f78:	68a0fdaf 	.word	0x68a0fdaf
   15f7c:	e8bdb118 	.word	0xe8bdb118
   15f80:	f0074010 	.word	0xf0074010
   15f84:	bd10b8f5 	.word	0xbd10b8f5

00015f88 <rpc_error_to_nrf_bsd_error>:
   15f88:	bf9a2810 	.word	0xbf9a2810
   15f8c:	f8534b02 	.word	0xf8534b02
   15f90:	202d0020 	.word	0x202d0020
   15f94:	bf004770 	.word	0xbf004770
   15f98:	000259ac 	.word	0x000259ac

00015f9c <ip_interface_request_create>:
   15f9c:	2500b570 	.word	0x2500b570
   15fa0:	ac02b082 	.word	0xac02b082
   15fa4:	5d04f844 	.word	0x5d04f844
   15fa8:	460d4606 	.word	0x460d4606
   15fac:	46194620 	.word	0x46194620
   15fb0:	f7fa4614 	.word	0xf7fa4614
   15fb4:	b960fd5f 	.word	0xb960fd5f
   15fb8:	22089b01 	.word	0x22089b01
   15fbc:	72987258 	.word	0x72987258
   15fc0:	461872d8 	.word	0x461872d8
   15fc4:	4406ea44 	.word	0x4406ea44
   15fc8:	611d60dc 	.word	0x611d60dc
   15fcc:	b002721a 	.word	0xb002721a
   15fd0:	9b01bd70 	.word	0x9b01bd70
   15fd4:	b0024618 	.word	0xb0024618
   15fd8:	bf00bd70 	.word	0xbf00bd70

00015fdc <ip_interface_request_send>:
   15fdc:	460cb570 	.word	0x460cb570
   15fe0:	46114605 	.word	0x46114605
   15fe4:	461e4620 	.word	0x461e4620
   15fe8:	fd58f7fa 	.word	0xfd58f7fa
   15fec:	bd70b900 	.word	0xbd70b900
   15ff0:	b1086820 	.word	0xb1086820
   15ff4:	fd70f7fa 	.word	0xfd70f7fa
   15ff8:	f7fa4620 	.word	0xf7fa4620
   15ffc:	602efd65 	.word	0x602efd65
   16000:	bd702023 	.word	0xbd702023

00016004 <ip_interface_wait>:
   16004:	4605b538 	.word	0x4605b538
   16008:	fe12f7ff 	.word	0xfe12f7ff
   1600c:	b1084604 	.word	0xb1084604
   16010:	bd384620 	.word	0xbd384620
   16014:	f7ff4628 	.word	0xf7ff4628
   16018:	2800fe77 	.word	0x2800fe77
   1601c:	6844d0f8 	.word	0x6844d0f8
   16020:	d0f52c00 	.word	0xd0f52c00
   16024:	60432300 	.word	0x60432300
   16028:	bd384620 	.word	0xbd384620

0001602c <ip_interface_init>:
   1602c:	2300b538 	.word	0x2300b538
   16030:	4c084d07 	.word	0x4c084d07
   16034:	22204619 	.word	0x22204619
   16038:	602b4807 	.word	0x602b4807
   1603c:	f00e6023 	.word	0xf00e6023
   16040:	f7faf8f8 	.word	0xf7faf8f8
   16044:	3000fd11 	.word	0x3000fd11
   16048:	2001bf18 	.word	0x2001bf18
   1604c:	bd384240 	.word	0xbd384240
   16050:	200203dc 	.word	0x200203dc
   16054:	200203d8 	.word	0x200203d8
   16058:	200203e4 	.word	0x200203e4

0001605c <ip_interface_open>:
   1605c:	41f0e92d 	.word	0x41f0e92d
   16060:	20004606 	.word	0x20004606
   16064:	0308f026 	.word	0x0308f026
   16068:	2b02b082 	.word	0x2b02b082
   1606c:	4617460c 	.word	0x4617460c
   16070:	d0029000 	.word	0xd0029000
   16074:	f0402e05 	.word	0xf0402e05
   16078:	1e638084 	.word	0x1e638084
   1607c:	d85c2b02 	.word	0xd85c2b02
   16080:	d1542f00 	.word	0xd1542f00
   16084:	d0672c01 	.word	0xd0672c01
   16088:	bf182c03 	.word	0xbf182c03
   1608c:	4a482702 	.word	0x4a482702
   16090:	46684621 	.word	0x46684621
   16094:	fd28f7ff 	.word	0xfd28f7ff
   16098:	46809b00 	.word	0x46809b00
   1609c:	d0592b00 	.word	0xd0592b00
   160a0:	a8022100 	.word	0xa8022100
   160a4:	1d04f840 	.word	0x1d04f840
   160a8:	6403e9c3 	.word	0x6403e9c3
   160ac:	f7fa615f 	.word	0xf7fa615f
   160b0:	2800fce1 	.word	0x2800fce1
   160b4:	f247d14b 	.word	0xf247d14b
   160b8:	f04f0201 	.word	0xf04f0201
   160bc:	210833ff 	.word	0x210833ff
   160c0:	ea429d01 	.word	0xea429d01
   160c4:	60ea4208 	.word	0x60ea4208
   160c8:	72a87268 	.word	0x72a87268
   160cc:	722972e8 	.word	0x722972e8
   160d0:	746b742b 	.word	0x746b742b
   160d4:	74eb74ab 	.word	0x74eb74ab
   160d8:	2e0568ab 	.word	0x2e0568ab
   160dc:	030cf103 	.word	0x030cf103
   160e0:	d00360ab 	.word	0xd00360ab
   160e4:	bf142e0a 	.word	0xbf142e0a
   160e8:	26022601 	.word	0x26022601
   160ec:	61ef616e 	.word	0x61ef616e
   160f0:	f24761ac 	.word	0xf24761ac
   160f4:	46280101 	.word	0x46280101
   160f8:	f7fa9f00 	.word	0xf7fa9f00
   160fc:	4606fccf 	.word	0x4606fccf
   16100:	6828b360 	.word	0x6828b360
   16104:	f7fab108 	.word	0xf7fab108
   16108:	4628fce7 	.word	0x4628fce7
   1610c:	fcdcf7fa 	.word	0xfcdcf7fa
   16110:	25232301 	.word	0x25232301
   16114:	4640603b 	.word	0x4640603b
   16118:	fd3cf7ff 	.word	0xfd3cf7ff
   1611c:	f7f94628 	.word	0xf7f94628
   16120:	f04fff37 	.word	0xf04fff37
   16124:	464038ff 	.word	0x464038ff
   16128:	e8bdb002 	.word	0xe8bdb002
   1612c:	2c0181f0 	.word	0x2c0181f0
   16130:	2c02d009 	.word	0x2c02d009
   16134:	2f02d109 	.word	0x2f02d109
   16138:	2016d0a9 	.word	0x2016d0a9
   1613c:	ff28f7f9 	.word	0xff28f7f9
   16140:	38fff04f 	.word	0x38fff04f
   16144:	2f01e7ef 	.word	0x2f01e7ef
   16148:	2702d1f7 	.word	0x2702d1f7
   1614c:	9d01e79f 	.word	0x9d01e79f
   16150:	d1c12d00 	.word	0xd1c12d00
   16154:	e7de250c 	.word	0xe7de250c
   16158:	e7984627 	.word	0xe7984627
   1615c:	33fff04f 	.word	0x33fff04f
   16160:	72fff64f 	.word	0x72fff64f
   16164:	46402102 	.word	0x46402102
   16168:	fd62f7ff 	.word	0xfd62f7ff
   1616c:	28004605 	.word	0x28004605
   16170:	4640d1d1 	.word	0x4640d1d1
   16174:	fdc8f7ff 	.word	0xfdc8f7ff
   16178:	6845b148 	.word	0x6845b148
   1617c:	6046b13d 	.word	0x6046b13d
   16180:	202fe7c9 	.word	0x202fe7c9
   16184:	ff04f7f9 	.word	0xff04f7f9
   16188:	38fff04f 	.word	0x38fff04f
   1618c:	3c02e7cb 	.word	0x3c02e7cb
   16190:	d8c82c01 	.word	0xd8c82c01
   16194:	9b004640 	.word	0x9b004640
   16198:	f442681a 	.word	0xf442681a
   1619c:	601a3200 	.word	0x601a3200
   161a0:	f442681a 	.word	0xf442681a
   161a4:	601a1280 	.word	0x601a1280
   161a8:	e8bdb002 	.word	0xe8bdb002
   161ac:	bf0081f0 	.word	0xbf0081f0
   161b0:	00015f71 	.word	0x00015f71

000161b4 <ip_interface_close>:
   161b4:	41f0e92d 	.word	0x41f0e92d
   161b8:	4606b082 	.word	0x4606b082
   161bc:	fda4f7ff 	.word	0xfda4f7ff
   161c0:	d0632800 	.word	0xd0632800
   161c4:	21004604 	.word	0x21004604
   161c8:	6827a802 	.word	0x6827a802
   161cc:	1d04f840 	.word	0x1d04f840
   161d0:	8018f8d4 	.word	0x8018f8d4
   161d4:	fc4ef7fa 	.word	0xfc4ef7fa
   161d8:	d13a2800 	.word	0xd13a2800
   161dc:	0309f247 	.word	0x0309f247
   161e0:	9d012208 	.word	0x9d012208
   161e4:	4306ea43 	.word	0x4306ea43
   161e8:	f8c560eb 	.word	0xf8c560eb
   161ec:	72688010 	.word	0x72688010
   161f0:	72e872a8 	.word	0x72e872a8
   161f4:	6823722a 	.word	0x6823722a
   161f8:	0109f247 	.word	0x0109f247
   161fc:	041b0c1b 	.word	0x041b0c1b
   16200:	030df043 	.word	0x030df043
   16204:	68236023 	.word	0x68236023
   16208:	f4234628 	.word	0xf4234628
   1620c:	60233300 	.word	0x60233300
   16210:	f4236823 	.word	0xf4236823
   16214:	60231380 	.word	0x60231380
   16218:	fc40f7fa 	.word	0xfc40f7fa
   1621c:	f04fbb40 	.word	0xf04fbb40
   16220:	f64f33ff 	.word	0xf64f33ff
   16224:	210e72ff 	.word	0x210e72ff
   16228:	f7ff4630 	.word	0xf7ff4630
   1622c:	4604fd01 	.word	0x4604fd01
   16230:	4c17b1a0 	.word	0x4c17b1a0
   16234:	0026f854 	.word	0x0026f854
   16238:	f7fab120 	.word	0xf7fab120
   1623c:	2300fc45 	.word	0x2300fc45
   16240:	3026f844 	.word	0x3026f844
   16244:	f7ff4630 	.word	0xf7ff4630
   16248:	2000fca5 	.word	0x2000fca5
   1624c:	e8bdb002 	.word	0xe8bdb002
   16250:	9d0181f0 	.word	0x9d0181f0
   16254:	2d00200c 	.word	0x2d00200c
   16258:	e012d1cd 	.word	0xe012d1cd
   1625c:	f7ff4630 	.word	0xf7ff4630
   16260:	2800fd53 	.word	0x2800fd53
   16264:	6843d0e5 	.word	0x6843d0e5
   16268:	d0e22b00 	.word	0xd0e22b00
   1626c:	e7e06044 	.word	0xe7e06044
   16270:	b1086828 	.word	0xb1086828
   16274:	fc30f7fa 	.word	0xfc30f7fa
   16278:	f7fa4628 	.word	0xf7fa4628
   1627c:	2023fc25 	.word	0x2023fc25
   16280:	f7f96027 	.word	0xf7f96027
   16284:	f04ffe85 	.word	0xf04ffe85
   16288:	e7df30ff 	.word	0xe7df30ff
   1628c:	e7f82009 	.word	0xe7f82009
   16290:	200203e4 	.word	0x200203e4

00016294 <ip_interface_sendto>:
   16294:	4ff0e92d 	.word	0x4ff0e92d
   16298:	b0892500 	.word	0xb0892500
   1629c:	46149103 	.word	0x46149103
   162a0:	95079301 	.word	0x95079301
   162a4:	9e124607 	.word	0x9e124607
   162a8:	fd2ef7ff 	.word	0xfd2ef7ff
   162ac:	f0002800 	.word	0xf0002800
   162b0:	f5b48124 	.word	0xf5b48124
   162b4:	f3005f80 	.word	0xf3005f80
   162b8:	69038118 	.word	0x69038118
   162bc:	2b014605 	.word	0x2b014605
   162c0:	80d1f000 	.word	0x80d1f000
   162c4:	0390682a 	.word	0x0390682a
   162c8:	682ad423 	.word	0x682ad423
   162cc:	d4060091 	.word	0xd4060091
   162d0:	f0002b01 	.word	0xf0002b01
   162d4:	682b80ed 	.word	0x682b80ed
   162d8:	f140031a 	.word	0xf140031a
   162dc:	682b8102 	.word	0x682b8102
   162e0:	f140031b 	.word	0xf140031b
   162e4:	68a88106 	.word	0x68a88106
   162e8:	9218f8df 	.word	0x9218f8df
   162ec:	f0402800 	.word	0xf0402800
   162f0:	682b8096 	.word	0x682b8096
   162f4:	f1400118 	.word	0xf1400118
   162f8:	682b8082 	.word	0x682b8082
   162fc:	6300f023 	.word	0x6300f023
   16300:	f859602b 	.word	0xf859602b
   16304:	28000027 	.word	0x28000027
   16308:	4620d17c 	.word	0x4620d17c
   1630c:	e8bdb009 	.word	0xe8bdb009
   16310:	f2478ff0 	.word	0xf2478ff0
   16314:	f04f0806 	.word	0xf04f0806
   16318:	043b0a0c 	.word	0x043b0a0c
   1631c:	91e4f8df 	.word	0x91e4f8df
   16320:	46219304 	.word	0x46219304
   16324:	f7faa807 	.word	0xf7faa807
   16328:	2804fba5 	.word	0x2804fba5
   1632c:	2800d0f9 	.word	0x2800d0f9
   16330:	9b07d171 	.word	0x9b07d171
   16334:	a008f883 	.word	0xa008f883
   16338:	72987258 	.word	0x72987258
   1633c:	b33e72d8 	.word	0xb33e72d8
   16340:	687168ea 	.word	0x687168ea
   16344:	d10a428a 	.word	0xd10a428a
   16348:	f1032a02 	.word	0xf1032a02
   1634c:	7831001c 	.word	0x7831001c
   16350:	8090f000 	.word	0x8090f000
   16354:	d1022a0a 	.word	0xd1022a0a
   16358:	f0002924 	.word	0xf0002924
   1635c:	681880af 	.word	0x681880af
   16360:	f7fab110 	.word	0xf7fab110
   16364:	9b07fbb9 	.word	0x9b07fbb9
   16368:	f7fa4618 	.word	0xf7fa4618
   1636c:	2016fbad 	.word	0x2016fbad
   16370:	031a682b 	.word	0x031a682b
   16374:	682bd453 	.word	0x682bd453
   16378:	2b0db29b 	.word	0x2b0db29b
   1637c:	682bd0b6 	.word	0x682bd0b6
   16380:	1300f423 	.word	0x1300f423
   16384:	682b602b 	.word	0x682b602b
   16388:	3300f443 	.word	0x3300f443
   1638c:	e7ad602b 	.word	0xe7ad602b
   16390:	99014642 	.word	0x99014642
   16394:	69a96159 	.word	0x69a96159
   16398:	61199804 	.word	0x61199804
   1639c:	43029903 	.word	0x43029903
   163a0:	605c60da 	.word	0x605c60da
   163a4:	6818b119 	.word	0x6818b119
   163a8:	f00d4622 	.word	0xf00d4622
   163ac:	682bff15 	.word	0x682bff15
   163b0:	93054641 	.word	0x93054641
   163b4:	f423682b 	.word	0xf423682b
   163b8:	602b3300 	.word	0x602b3300
   163bc:	f443682b 	.word	0xf443682b
   163c0:	602b1300 	.word	0x602b1300
   163c4:	46189b07 	.word	0x46189b07
   163c8:	f7fa9302 	.word	0xf7fa9302
   163cc:	9b02fb67 	.word	0x9b02fb67
   163d0:	bb584683 	.word	0xbb584683
   163d4:	3200f44f 	.word	0x3200f44f
   163d8:	33fff04f 	.word	0x33fff04f
   163dc:	46384611 	.word	0x46384611
   163e0:	fc26f7ff 	.word	0xfc26f7ff
   163e4:	682bb370 	.word	0x682bb370
   163e8:	d4370319 	.word	0xd4370319
   163ec:	d1bf280c 	.word	0xd1bf280c
   163f0:	0027f859 	.word	0x0027f859
   163f4:	d0942800 	.word	0xd0942800
   163f8:	fb66f7fa 	.word	0xfb66f7fa
   163fc:	f859e791 	.word	0xf859e791
   16400:	69840027 	.word	0x69840027
   16404:	fb60f7fa 	.word	0xfb60f7fa
   16408:	46202300 	.word	0x46202300
   1640c:	3027f849 	.word	0x3027f849
   16410:	e8bdb009 	.word	0xe8bdb009
   16414:	682b8ff0 	.word	0x682b8ff0
   16418:	031a200c 	.word	0x031a200c
   1641c:	f7f9d5ab 	.word	0xf7f9d5ab
   16420:	f04ffdb7 	.word	0xf04ffdb7
   16424:	f85934ff 	.word	0xf85934ff
   16428:	e76c0027 	.word	0xe76c0027
   1642c:	469b6818 	.word	0x469b6818
   16430:	f7fab108 	.word	0xf7fab108
   16434:	4658fb51 	.word	0x4658fb51
   16438:	fb46f7fa 	.word	0xfb46f7fa
   1643c:	20239b05 	.word	0x20239b05
   16440:	e795602b 	.word	0xe795602b
   16444:	f7ff4638 	.word	0xf7ff4638
   16448:	4603fc5f 	.word	0x4603fc5f
   1644c:	6840b1f0 	.word	0x6840b1f0
   16450:	f8c3b1e0 	.word	0xf8c3b1e0
   16454:	682bb004 	.word	0x682bb004
   16458:	d5c70319 	.word	0xd5c70319
   1645c:	682b68a8 	.word	0x682b68a8
   16460:	d588031e 	.word	0xd588031e
   16464:	2e00e742 	.word	0x2e00e742
   16468:	af2cf43f 	.word	0xaf2cf43f
   1646c:	f8df2016 	.word	0xf8df2016
   16470:	e7d49094 	.word	0xe7d49094
   16474:	f47f2910 	.word	0xf47f2910
   16478:	2204af72 	.word	0x2204af72
   1647c:	835a8931 	.word	0x835a8931
   16480:	f1068319 	.word	0xf1068319
   16484:	f00d010c 	.word	0xf00d010c
   16488:	e01efea7 	.word	0xe01efea7
   1648c:	031b682b 	.word	0x031b682b
   16490:	af2ff53f 	.word	0xaf2ff53f
   16494:	b29b682b 	.word	0xb29b682b
   16498:	f43f2b0d 	.word	0xf43f2b0d
   1649c:	682baf2a 	.word	0x682baf2a
   164a0:	1300f423 	.word	0x1300f423
   164a4:	682b602b 	.word	0x682b602b
   164a8:	3300f443 	.word	0x3300f443
   164ac:	e720602b 	.word	0xe720602b
   164b0:	b29b682b 	.word	0xb29b682b
   164b4:	f47f2b05 	.word	0xf47f2b05
   164b8:	e70caf12 	.word	0xe70caf12
   164bc:	89312210 	.word	0x89312210
   164c0:	8319835a 	.word	0x8319835a
   164c4:	f00d18b1 	.word	0xf00d18b1
   164c8:	f247fe87 	.word	0xf247fe87
   164cc:	9b070207 	.word	0x9b070207
   164d0:	68994690 	.word	0x68994690
   164d4:	31048b58 	.word	0x31048b58
   164d8:	98014401 	.word	0x98014401
   164dc:	61586099 	.word	0x61586099
   164e0:	2023e759 	.word	0x2023e759
   164e4:	901cf8df 	.word	0x901cf8df
   164e8:	2028e799 	.word	0x2028e799
   164ec:	9014f8df 	.word	0x9014f8df
   164f0:	2039e795 	.word	0x2039e795
   164f4:	900cf8df 	.word	0x900cf8df
   164f8:	2009e791 	.word	0x2009e791
   164fc:	9004f8df 	.word	0x9004f8df
   16500:	bf00e78d 	.word	0xbf00e78d
   16504:	200203e4 	.word	0x200203e4

00016508 <ip_interface_recvfrom>:
   16508:	4ff0e92d 	.word	0x4ff0e92d
   1650c:	2a00b085 	.word	0x2a00b085
   16510:	8110f000 	.word	0x8110f000
   16514:	4699468a 	.word	0x4699468a
   16518:	46164607 	.word	0x46164607
   1651c:	fbf4f7ff 	.word	0xfbf4f7ff
   16520:	28004604 	.word	0x28004604
   16524:	810df000 	.word	0x810df000
   16528:	02d96803 	.word	0x02d96803
   1652c:	f019d565 	.word	0xf019d565
   16530:	bf180f02 	.word	0xbf180f02
   16534:	0800f04f 	.word	0x0800f04f
   16538:	3bfff04f 	.word	0x3bfff04f
   1653c:	6803bf08 	.word	0x6803bf08
   16540:	0510f009 	.word	0x0510f009
   16544:	f083bf04 	.word	0xf083bf04
   16548:	f3c85880 	.word	0xf3c85880
   1654c:	68237800 	.word	0x68237800
   16550:	d56d03da 	.word	0xd56d03da
   16554:	69e06823 	.word	0x69e06823
   16558:	3380f423 	.word	0x3380f423
   1655c:	68036023 	.word	0x68036023
   16560:	479868db 	.word	0x479868db
   16564:	3ffff1b0 	.word	0x3ffff1b0
   16568:	f0004683 	.word	0xf0004683
   1656c:	42868081 	.word	0x42868081
   16570:	6923dd03 	.word	0x6923dd03
   16574:	f0002b01 	.word	0xf0002b01
   16578:	250080a7 	.word	0x250080a7
   1657c:	9b0f69e0 	.word	0x9b0f69e0
   16580:	681bb103 	.word	0x681bb103
   16584:	e9cd9a0e 	.word	0xe9cd9a0e
   16588:	e9cda600 	.word	0xe9cda600
   1658c:	68032302 	.word	0x68032302
   16590:	689b464a 	.word	0x689b464a
   16594:	47984669 	.word	0x47984669
   16598:	69e04683 	.word	0x69e04683
   1659c:	3ffff1bb 	.word	0x3ffff1bb
   165a0:	bf186803 	.word	0xbf186803
   165a4:	68db2601 	.word	0x68db2601
   165a8:	2600bf0a 	.word	0x2600bf0a
   165ac:	0800f04f 	.word	0x0800f04f
   165b0:	0823f04f 	.word	0x0823f04f
   165b4:	30014798 	.word	0x30014798
   165b8:	2d00d135 	.word	0x2d00d135
   165bc:	80b6f000 	.word	0x80b6f000
   165c0:	f0002e00 	.word	0xf0002e00
   165c4:	682380a6 	.word	0x682380a6
   165c8:	d5060319 	.word	0xd5060319
   165cc:	b29b6823 	.word	0xb29b6823
   165d0:	d0022b0d 	.word	0xd0022b0d
   165d4:	2b016923 	.word	0x2b016923
   165d8:	6823d025 	.word	0x6823d025
   165dc:	4f80f013 	.word	0x4f80f013
   165e0:	f0406823 	.word	0xf0406823
   165e4:	031a80b1 	.word	0x031a80b1
   165e8:	f1b8d475 	.word	0xf1b8d475
   165ec:	f0400f00 	.word	0xf0400f00
   165f0:	4658808a 	.word	0x4658808a
   165f4:	e8bdb005 	.word	0xe8bdb005
   165f8:	68038ff0 	.word	0x68038ff0
   165fc:	2b06b29b 	.word	0x2b06b29b
   16600:	6803d073 	.word	0x6803d073
   16604:	2b07b29b 	.word	0x2b07b29b
   16608:	f04fbf0c 	.word	0xf04fbf0c
   1660c:	f04f0809 	.word	0xf04f0809
   16610:	69e00839 	.word	0x69e00839
   16614:	68db6803 	.word	0x68db6803
   16618:	f1b04798 	.word	0xf1b04798
   1661c:	46833fff 	.word	0x46833fff
   16620:	f04fd0db 	.word	0xf04fd0db
   16624:	68233bff 	.word	0x68233bff
   16628:	3380f443 	.word	0x3380f443
   1662c:	e7dc6023 	.word	0xe7dc6023
   16630:	0f00f1b8 	.word	0x0f00f1b8
   16634:	8081f000 	.word	0x8081f000
   16638:	3280f44f 	.word	0x3280f44f
   1663c:	46116a23 	.word	0x46116a23
   16640:	bf082b00 	.word	0xbf082b00
   16644:	33fff04f 	.word	0x33fff04f
   16648:	f7ff4638 	.word	0xf7ff4638
   1664c:	4680faf1 	.word	0x4680faf1
   16650:	6823b358 	.word	0x6823b358
   16654:	031b69e0 	.word	0x031b69e0
   16658:	6823d521 	.word	0x6823d521
   1665c:	2b0db29b 	.word	0x2b0db29b
   16660:	6925d01d 	.word	0x6925d01d
   16664:	0501f1a5 	.word	0x0501f1a5
   16668:	f585fab5 	.word	0xf585fab5
   1666c:	e786096d 	.word	0xe786096d
   16670:	03186823 	.word	0x03186823
   16674:	6823d5dc 	.word	0x6823d5dc
   16678:	2b0db29b 	.word	0x2b0db29b
   1667c:	6923d0d8 	.word	0x6923d0d8
   16680:	2b0169e0 	.word	0x2b0169e0
   16684:	f04fd034 	.word	0xf04fd034
   16688:	68230839 	.word	0x68230839
   1668c:	041b0c1b 	.word	0x041b0c1b
   16690:	030df043 	.word	0x030df043
   16694:	68236023 	.word	0x68236023
   16698:	1380f423 	.word	0x1380f423
   1669c:	68036023 	.word	0x68036023
   166a0:	479868db 	.word	0x479868db
   166a4:	d1be3001 	.word	0xd1be3001
   166a8:	4638e797 	.word	0x4638e797
   166ac:	fb2cf7ff 	.word	0xfb2cf7ff
   166b0:	f8d0b138 	.word	0xf8d0b138
   166b4:	f1b88004 	.word	0xf1b88004
   166b8:	d0020f00 	.word	0xd0020f00
   166bc:	60432300 	.word	0x60432300
   166c0:	f04fe7c7 	.word	0xf04fe7c7
   166c4:	e7420801 	.word	0xe7420801
   166c8:	6823b11d 	.word	0x6823b11d
   166cc:	d5b300db 	.word	0xd5b300db
   166d0:	69e0e753 	.word	0x69e0e753
   166d4:	6823e753 	.word	0x6823e753
   166d8:	2b0db29b 	.word	0x2b0db29b
   166dc:	68a3d185 	.word	0x68a3d185
   166e0:	d0822b00 	.word	0xd0822b00
   166e4:	8008f8d4 	.word	0x8008f8d4
   166e8:	f04fe77f 	.word	0xf04fe77f
   166ec:	e7900809 	.word	0xe7900809
   166f0:	68db6803 	.word	0x68db6803
   166f4:	30014798 	.word	0x30014798
   166f8:	f04fd00b 	.word	0xf04fd00b
   166fc:	68230823 	.word	0x68230823
   16700:	3380f443 	.word	0x3380f443
   16704:	46406023 	.word	0x46406023
   16708:	fc42f7f9 	.word	0xfc42f7f9
   1670c:	3bfff04f 	.word	0x3bfff04f
   16710:	6823e76f 	.word	0x6823e76f
   16714:	0b00f04f 	.word	0x0b00f04f
   16718:	041b0c1b 	.word	0x041b0c1b
   1671c:	030df043 	.word	0x030df043
   16720:	68236023 	.word	0x68236023
   16724:	1380f423 	.word	0x1380f423
   16728:	e7626023 	.word	0xe7626023
   1672c:	f47f2e00 	.word	0xf47f2e00
   16730:	e752af4a 	.word	0xe752af4a
   16734:	0816f04f 	.word	0x0816f04f
   16738:	f04fe7e5 	.word	0xf04fe7e5
   1673c:	69e00823 	.word	0x69e00823
   16740:	f04fe7ad 	.word	0xf04fe7ad
   16744:	e7de0809 	.word	0xe7de0809
   16748:	4380f023 	.word	0x4380f023
   1674c:	68236023 	.word	0x68236023
   16750:	0869f04f 	.word	0x0869f04f
   16754:	041b0c1b 	.word	0x041b0c1b
   16758:	030df043 	.word	0x030df043
   1675c:	e7d26023 	.word	0xe7d26023

00016760 <ip_interface_connect>:
   16760:	41f0e92d 	.word	0x41f0e92d
   16764:	2900b082 	.word	0x2900b082
   16768:	2a00d044 	.word	0x2a00d044
   1676c:	4606d042 	.word	0x4606d042
   16770:	f7ff460f 	.word	0xf7ff460f
   16774:	4605fac9 	.word	0x4605fac9
   16778:	f0002800 	.word	0xf0002800
   1677c:	68038096 	.word	0x68038096
   16780:	2b02b29b 	.word	0x2b02b29b
   16784:	6803d004 	.word	0x6803d004
   16788:	2b04b29b 	.word	0x2b04b29b
   1678c:	808df040 	.word	0x808df040
   16790:	f0116829 	.word	0xf0116829
   16794:	f0405100 	.word	0xf0405100
   16798:	a8028084 	.word	0xa8028084
   1679c:	1d04f840 	.word	0x1d04f840
   167a0:	8018f8d5 	.word	0x8018f8d5
   167a4:	f966f7fa 	.word	0xf966f7fa
   167a8:	2108bb70 	.word	0x2108bb70
   167ac:	9c010433 	.word	0x9c010433
   167b0:	42e0f443 	.word	0x42e0f443
   167b4:	0202f042 	.word	0x0202f042
   167b8:	f8c460e2 	.word	0xf8c460e2
   167bc:	72608010 	.word	0x72608010
   167c0:	72e072a0 	.word	0x72e072a0
   167c4:	f4437221 	.word	0xf4437221
   167c8:	f04343e0 	.word	0xf04343e0
   167cc:	60e30302 	.word	0x60e30302
   167d0:	69aa68a3 	.word	0x69aa68a3
   167d4:	61223304 	.word	0x61223304
   167d8:	68eb60a3 	.word	0x68eb60a3
   167dc:	4293687a 	.word	0x4293687a
   167e0:	2b02d108 	.word	0x2b02d108
   167e4:	0018f104 	.word	0x0018f104
   167e8:	d03a783a 	.word	0xd03a783a
   167ec:	d1012b0a 	.word	0xd1012b0a
   167f0:	d00e2a24 	.word	0xd00e2a24
   167f4:	46202416 	.word	0x46202416
   167f8:	fbcaf7f9 	.word	0xfbcaf7f9
   167fc:	34fff04f 	.word	0x34fff04f
   16800:	b0024620 	.word	0xb0024620
   16804:	81f0e8bd 	.word	0x81f0e8bd
   16808:	2c009c01 	.word	0x2c009c01
   1680c:	0433d04f 	.word	0x0433d04f
   16810:	2210e7d9 	.word	0x2210e7d9
   16814:	18b9893b 	.word	0x18b9893b
   16818:	82a382e2 	.word	0x82a382e2
   1681c:	fcdcf00d 	.word	0xfcdcf00d
   16820:	8ae268a3 	.word	0x8ae268a3
   16824:	0102f247 	.word	0x0102f247
   16828:	60a34413 	.word	0x60a34413
   1682c:	682b682f 	.word	0x682b682f
   16830:	f0434620 	.word	0xf0434620
   16834:	602b5300 	.word	0x602b5300
   16838:	f930f7fa 	.word	0xf930f7fa
   1683c:	682bb9e0 	.word	0x682bb9e0
   16840:	5880f013 	.word	0x5880f013
   16844:	f04fd12f 	.word	0xf04fd12f
   16848:	f64f33ff 	.word	0xf64f33ff
   1684c:	210572ff 	.word	0x210572ff
   16850:	f7ff4630 	.word	0xf7ff4630
   16854:	4604f9ed 	.word	0x4604f9ed
   16858:	2c73b1c0 	.word	0x2c73b1c0
   1685c:	602fd0cb 	.word	0x602fd0cb
   16860:	2a10e7c9 	.word	0x2a10e7c9
   16864:	2204d1c6 	.word	0x2204d1c6
   16868:	f107893b 	.word	0xf107893b
   1686c:	82e2010c 	.word	0x82e2010c
   16870:	f00d82a3 	.word	0xf00d82a3
   16874:	e7d3fcb1 	.word	0xe7d3fcb1
   16878:	b1086820 	.word	0xb1086820
   1687c:	f92cf7fa 	.word	0xf92cf7fa
   16880:	f7fa4620 	.word	0xf7fa4620
   16884:	2423f921 	.word	0x2423f921
   16888:	e7b4602f 	.word	0xe7b4602f
   1688c:	f7ff4630 	.word	0xf7ff4630
   16890:	2800fa3b 	.word	0x2800fa3b
   16894:	6844d0b4 	.word	0x6844d0b4
   16898:	d0b12c00 	.word	0xd0b12c00
   1689c:	8004f8c0 	.word	0x8004f8c0
   168a0:	2472e7db 	.word	0x2472e7db
   168a4:	2473e7a7 	.word	0x2473e7a7
   168a8:	2409e7a5 	.word	0x2409e7a5
   168ac:	240ce7a3 	.word	0x240ce7a3
   168b0:	bf00e7a1 	.word	0xbf00e7a1

000168b4 <ip_interface_bind>:
   168b4:	41f0e92d 	.word	0x41f0e92d
   168b8:	b389b082 	.word	0xb389b082
   168bc:	4607b382 	.word	0x4607b382
   168c0:	f7ff460e 	.word	0xf7ff460e
   168c4:	4605fa21 	.word	0x4605fa21
   168c8:	d07b2800 	.word	0xd07b2800
   168cc:	b29b6803 	.word	0xb29b6803
   168d0:	d1772b02 	.word	0xd1772b02
   168d4:	a8022100 	.word	0xa8022100
   168d8:	1d04f840 	.word	0x1d04f840
   168dc:	8018f8d5 	.word	0x8018f8d5
   168e0:	f8c8f7fa 	.word	0xf8c8f7fa
   168e4:	f247bb30 	.word	0xf247bb30
   168e8:	22080305 	.word	0x22080305
   168ec:	ea439c01 	.word	0xea439c01
   168f0:	60e34307 	.word	0x60e34307
   168f4:	8010f8c4 	.word	0x8010f8c4
   168f8:	72a07260 	.word	0x72a07260
   168fc:	722272e0 	.word	0x722272e0
   16900:	330468a3 	.word	0x330468a3
   16904:	68eb60a3 	.word	0x68eb60a3
   16908:	42936872 	.word	0x42936872
   1690c:	2b02d108 	.word	0x2b02d108
   16910:	0018f104 	.word	0x0018f104
   16914:	d03c7832 	.word	0xd03c7832
   16918:	d1012b0a 	.word	0xd1012b0a
   1691c:	d00e2a24 	.word	0xd00e2a24
   16920:	46202416 	.word	0x46202416
   16924:	fb34f7f9 	.word	0xfb34f7f9
   16928:	34fff04f 	.word	0x34fff04f
   1692c:	b0024620 	.word	0xb0024620
   16930:	81f0e8bd 	.word	0x81f0e8bd
   16934:	2c009c01 	.word	0x2c009c01
   16938:	240cd1e2 	.word	0x240cd1e2
   1693c:	2210e7f1 	.word	0x2210e7f1
   16940:	18b18933 	.word	0x18b18933
   16944:	82a382e2 	.word	0x82a382e2
   16948:	fc46f00d 	.word	0xfc46f00d
   1694c:	8ae268a3 	.word	0x8ae268a3
   16950:	0105f247 	.word	0x0105f247
   16954:	60a34413 	.word	0x60a34413
   16958:	4620682b 	.word	0x4620682b
   1695c:	041b0c1b 	.word	0x041b0c1b
   16960:	0303f043 	.word	0x0303f043
   16964:	682e602b 	.word	0x682e602b
   16968:	f898f7fa 	.word	0xf898f7fa
   1696c:	b9d84680 	.word	0xb9d84680
   16970:	33fff04f 	.word	0x33fff04f
   16974:	72fff64f 	.word	0x72fff64f
   16978:	46382104 	.word	0x46382104
   1697c:	f958f7ff 	.word	0xf958f7ff
   16980:	b3084604 	.word	0xb3084604
   16984:	0c1b682b 	.word	0x0c1b682b
   16988:	f043041b 	.word	0xf043041b
   1698c:	602b0302 	.word	0x602b0302
   16990:	2a10e7c7 	.word	0x2a10e7c7
   16994:	2204d1c4 	.word	0x2204d1c4
   16998:	f1068933 	.word	0xf1068933
   1699c:	82e2010c 	.word	0x82e2010c
   169a0:	f00d82a3 	.word	0xf00d82a3
   169a4:	e7d1fc19 	.word	0xe7d1fc19
   169a8:	b1086820 	.word	0xb1086820
   169ac:	f894f7fa 	.word	0xf894f7fa
   169b0:	04360c36 	.word	0x04360c36
   169b4:	f0464620 	.word	0xf0464620
   169b8:	f7fa0602 	.word	0xf7fa0602
   169bc:	2423f885 	.word	0x2423f885
   169c0:	e7ae602e 	.word	0xe7ae602e
   169c4:	e7ac2409 	.word	0xe7ac2409
   169c8:	f7ff4638 	.word	0xf7ff4638
   169cc:	2800f99d 	.word	0x2800f99d
   169d0:	6844d0ac 	.word	0x6844d0ac
   169d4:	d0a92c00 	.word	0xd0a92c00
   169d8:	8004f8c0 	.word	0x8004f8c0
   169dc:	bf00e7d2 	.word	0xbf00e7d2

000169e0 <ip_interface_listen>:
   169e0:	41f0e92d 	.word	0x41f0e92d
   169e4:	4606b082 	.word	0x4606b082
   169e8:	f98ef7ff 	.word	0xf98ef7ff
   169ec:	d0672800 	.word	0xd0672800
   169f0:	46056803 	.word	0x46056803
   169f4:	2b04b29b 	.word	0x2b04b29b
   169f8:	2100d162 	.word	0x2100d162
   169fc:	46304a32 	.word	0x46304a32
   16a00:	f8def7ff 	.word	0xf8def7ff
   16a04:	28004601 	.word	0x28004601
   16a08:	a802d15c 	.word	0xa802d15c
   16a0c:	1d04f840 	.word	0x1d04f840
   16a10:	f7fa69af 	.word	0xf7fa69af
   16a14:	bba8f82f 	.word	0xbba8f82f
   16a18:	0308f247 	.word	0x0308f247
   16a1c:	9c012208 	.word	0x9c012208
   16a20:	4306ea43 	.word	0x4306ea43
   16a24:	612760e3 	.word	0x612760e3
   16a28:	72a07260 	.word	0x72a07260
   16a2c:	722272e0 	.word	0x722272e0
   16a30:	f24768a3 	.word	0xf24768a3
   16a34:	33040108 	.word	0x33040108
   16a38:	682b60a3 	.word	0x682b60a3
   16a3c:	0c1b4620 	.word	0x0c1b4620
   16a40:	f043041b 	.word	0xf043041b
   16a44:	602b0306 	.word	0x602b0306
   16a48:	f7fa682f 	.word	0xf7fa682f
   16a4c:	4680f827 	.word	0x4680f827
   16a50:	f04fb9e8 	.word	0xf04fb9e8
   16a54:	f64f33ff 	.word	0xf64f33ff
   16a58:	210772ff 	.word	0x210772ff
   16a5c:	f7ff4630 	.word	0xf7ff4630
   16a60:	4604f8e7 	.word	0x4604f8e7
   16a64:	682bb308 	.word	0x682bb308
   16a68:	041b0c1b 	.word	0x041b0c1b
   16a6c:	0304f043 	.word	0x0304f043
   16a70:	4620602b 	.word	0x4620602b
   16a74:	fa8cf7f9 	.word	0xfa8cf7f9
   16a78:	34fff04f 	.word	0x34fff04f
   16a7c:	b0024620 	.word	0xb0024620
   16a80:	81f0e8bd 	.word	0x81f0e8bd
   16a84:	2c009c01 	.word	0x2c009c01
   16a88:	240cd1d2 	.word	0x240cd1d2
   16a8c:	6820e7f1 	.word	0x6820e7f1
   16a90:	f7fab108 	.word	0xf7fab108
   16a94:	0c3ff821 	.word	0x0c3ff821
   16a98:	4620043f 	.word	0x4620043f
   16a9c:	0704f047 	.word	0x0704f047
   16aa0:	f812f7fa 	.word	0xf812f7fa
   16aa4:	602f2423 	.word	0x602f2423
   16aa8:	4630e7e3 	.word	0x4630e7e3
   16aac:	f92cf7ff 	.word	0xf92cf7ff
   16ab0:	d0e32800 	.word	0xd0e32800
   16ab4:	2c006844 	.word	0x2c006844
   16ab8:	f8c0d0e0 	.word	0xf8c0d0e0
   16abc:	e7d28004 	.word	0xe7d28004
   16ac0:	e7d62409 	.word	0xe7d62409
   16ac4:	e7d42423 	.word	0xe7d42423
   16ac8:	00015f71 	.word	0x00015f71

00016acc <ip_interface_accept>:
   16acc:	4ff0e92d 	.word	0x4ff0e92d
   16ad0:	b0852500 	.word	0xb0852500
   16ad4:	4690460f 	.word	0x4690460f
   16ad8:	46069502 	.word	0x46069502
   16adc:	f914f7ff 	.word	0xf914f7ff
   16ae0:	28004604 	.word	0x28004604
   16ae4:	811cf000 	.word	0x811cf000
   16ae8:	b29b6803 	.word	0xb29b6803
   16aec:	d10a2b07 	.word	0xd10a2b07
   16af0:	68056803 	.word	0x68056803
   16af4:	d41600db 	.word	0xd41600db
   16af8:	3580f415 	.word	0x3580f415
   16afc:	6805d019 	.word	0x6805d019
   16b00:	3580f415 	.word	0x3580f415
   16b04:	f04fd124 	.word	0xf04fd124
   16b08:	9b020909 	.word	0x9b020909
   16b0c:	4628b113 	.word	0x4628b113
   16b10:	f840f7ff 	.word	0xf840f7ff
   16b14:	f04f4648 	.word	0xf04f4648
   16b18:	f7f939ff 	.word	0xf7f939ff
   16b1c:	4648fa39 	.word	0x4648fa39
   16b20:	e8bdb005 	.word	0xe8bdb005
   16b24:	f4158ff0 	.word	0xf4158ff0
   16b28:	d16d3580 	.word	0xd16d3580
   16b2c:	0923f04f 	.word	0x0923f04f
   16b30:	f44fe7eb 	.word	0xf44fe7eb
   16b34:	f04f3280 	.word	0xf04f3280
   16b38:	461133ff 	.word	0x461133ff
   16b3c:	f7ff4630 	.word	0xf7ff4630
   16b40:	4681f877 	.word	0x4681f877
   16b44:	d07e2800 	.word	0xd07e2800
   16b48:	f4156825 	.word	0xf4156825
   16b4c:	d0dc3580 	.word	0xd0dc3580
   16b50:	30fff04f 	.word	0x30fff04f
   16b54:	e9cd2300 	.word	0xe9cd2300
   16b58:	4a750300 	.word	0x4a750300
   16b5c:	a8026921 	.word	0xa8026921
   16b60:	ffc2f7fe 	.word	0xffc2f7fe
   16b64:	46059b02 	.word	0x46059b02
   16b68:	f0002b00 	.word	0xf0002b00
   16b6c:	210080dd 	.word	0x210080dd
   16b70:	a8046962 	.word	0xa8046962
   16b74:	68e2615a 	.word	0x68e2615a
   16b78:	1d04f840 	.word	0x1d04f840
   16b7c:	692260da 	.word	0x692260da
   16b80:	f8d4611a 	.word	0xf8d4611a
   16b84:	f7f99018 	.word	0xf7f99018
   16b88:	2800ff75 	.word	0x2800ff75
   16b8c:	f247d143 	.word	0xf247d143
   16b90:	2108030c 	.word	0x2108030c
   16b94:	b00cf8dd 	.word	0xb00cf8dd
   16b98:	4306ea43 	.word	0x4306ea43
   16b9c:	300cf8cb 	.word	0x300cf8cb
   16ba0:	9010f8cb 	.word	0x9010f8cb
   16ba4:	0009f88b 	.word	0x0009f88b
   16ba8:	000af88b 	.word	0x000af88b
   16bac:	000bf88b 	.word	0x000bf88b
   16bb0:	1008f88b 	.word	0x1008f88b
   16bb4:	f2476823 	.word	0xf2476823
   16bb8:	0c1b010c 	.word	0x0c1b010c
   16bbc:	f043041b 	.word	0xf043041b
   16bc0:	60230308 	.word	0x60230308
   16bc4:	f8d44658 	.word	0xf8d44658
   16bc8:	f7f99000 	.word	0xf7f99000
   16bcc:	4682ff67 	.word	0x4682ff67
   16bd0:	6822bb48 	.word	0x6822bb48
   16bd4:	f04f9900 	.word	0xf04f9900
   16bd8:	400a33ff 	.word	0x400a33ff
   16bdc:	21096022 	.word	0x21096022
   16be0:	72fff64f 	.word	0x72fff64f
   16be4:	f7ff4630 	.word	0xf7ff4630
   16be8:	4681f823 	.word	0x4681f823
   16bec:	f0002800 	.word	0xf0002800
   16bf0:	68238085 	.word	0x68238085
   16bf4:	431a9a01 	.word	0x431a9a01
   16bf8:	68236022 	.word	0x68236022
   16bfc:	041b0c1b 	.word	0x041b0c1b
   16c00:	0307f043 	.word	0x0307f043
   16c04:	e7806023 	.word	0xe7806023
   16c08:	5280f06f 	.word	0x5280f06f
   16c0c:	5380f04f 	.word	0x5380f04f
   16c10:	2300e9cd 	.word	0x2300e9cd
   16c14:	f8dde7a1 	.word	0xf8dde7a1
   16c18:	f04fb00c 	.word	0xf04fb00c
   16c1c:	f1bb090c 	.word	0xf1bb090c
   16c20:	d1c70f00 	.word	0xd1c70f00
   16c24:	f8dbe771 	.word	0xf8dbe771
   16c28:	b1080000 	.word	0xb1080000
   16c2c:	ff54f7f9 	.word	0xff54f7f9
   16c30:	4919ea4f 	.word	0x4919ea4f
   16c34:	ea4f4658 	.word	0xea4f4658
   16c38:	f7f94909 	.word	0xf7f94909
   16c3c:	f049ff45 	.word	0xf049ff45
   16c40:	60230307 	.word	0x60230307
   16c44:	4630e772 	.word	0x4630e772
   16c48:	f85ef7ff 	.word	0xf85ef7ff
   16c4c:	f8d0b130 	.word	0xf8d0b130
   16c50:	f1b99004 	.word	0xf1b99004
   16c54:	d0010f00 	.word	0xd0010f00
   16c58:	e7756045 	.word	0xe7756045
   16c5c:	03d96823 	.word	0x03d96823
   16c60:	af76f53f 	.word	0xaf76f53f
   16c64:	99024d33 	.word	0x99024d33
   16c68:	3026f855 	.word	0x3026f855
   16c6c:	618b699b 	.word	0x618b699b
   16c70:	68cbb147 	.word	0x68cbb147
   16c74:	d0242b0a 	.word	0xd0242b0a
   16c78:	d1032b02 	.word	0xd1032b02
   16c7c:	2000f8d8 	.word	0x2000f8d8
   16c80:	d0322a10 	.word	0xd0322a10
   16c84:	482c680a 	.word	0x482c680a
   16c88:	f0424002 	.word	0xf0424002
   16c8c:	600a0205 	.word	0x600a0205
   16c90:	68119a02 	.word	0x68119a02
   16c94:	3100f441 	.word	0x3100f441
   16c98:	68116011 	.word	0x68116011
   16c9c:	1180f441 	.word	0x1180f441
   16ca0:	68236011 	.word	0x68236011
   16ca4:	f0434003 	.word	0xf0434003
   16ca8:	60230307 	.word	0x60230307
   16cac:	0026f855 	.word	0x0026f855
   16cb0:	ff0af7f9 	.word	0xff0af7f9
   16cb4:	46482300 	.word	0x46482300
   16cb8:	3026f845 	.word	0x3026f845
   16cbc:	e8bdb005 	.word	0xe8bdb005
   16cc0:	f8d88ff0 	.word	0xf8d88ff0
   16cc4:	2a242000 	.word	0x2a242000
   16cc8:	703ad1dc 	.word	0x703ad1dc
   16ccc:	607b2210 	.word	0x607b2210
   16cd0:	3026f855 	.word	0x3026f855
   16cd4:	0010f107 	.word	0x0010f107
   16cd8:	813b8b9b 	.word	0x813b8b9b
   16cdc:	1026f855 	.word	0x1026f855
   16ce0:	f00d3120 	.word	0xf00d3120
   16ce4:	9902fa79 	.word	0x9902fa79
   16ce8:	703ae7cc 	.word	0x703ae7cc
   16cec:	f855607b 	.word	0xf855607b
   16cf0:	f1073026 	.word	0xf1073026
   16cf4:	8b9b000c 	.word	0x8b9b000c
   16cf8:	e7ee2204 	.word	0xe7ee2204
   16cfc:	f7ff4630 	.word	0xf7ff4630
   16d00:	b138f803 	.word	0xb138f803
   16d04:	9004f8d0 	.word	0x9004f8d0
   16d08:	0f00f1b9 	.word	0x0f00f1b9
   16d0c:	f8c0d002 	.word	0xf8c0d002
   16d10:	e76ea004 	.word	0xe76ea004
   16d14:	9a016823 	.word	0x9a016823
   16d18:	431346a9 	.word	0x431346a9
   16d1c:	e7a16023 	.word	0xe7a16023
   16d20:	f04f4605 	.word	0xf04f4605
   16d24:	e6f00909 	.word	0xe6f00909
   16d28:	090cf04f 	.word	0x090cf04f
   16d2c:	bf00e6f2 	.word	0xbf00e6f2
   16d30:	00015f71 	.word	0x00015f71
   16d34:	200203e4 	.word	0x200203e4
   16d38:	ffff0000 	.word	0xffff0000

00016d3c <ip_interface_setopt>:
   16d3c:	41f0e92d 	.word	0x41f0e92d
   16d40:	b0842901 	.word	0xb0842901
   16d44:	809cf040 	.word	0x809cf040
   16d48:	4690460e 	.word	0x4690460e
   16d4c:	4607461d 	.word	0x4607461d
   16d50:	ffdaf7fe 	.word	0xffdaf7fe
   16d54:	28004604 	.word	0x28004604
   16d58:	80a5f000 	.word	0x80a5f000
   16d5c:	0f19f1b8 	.word	0x0f19f1b8
   16d60:	2d00d16e 	.word	0x2d00d16e
   16d64:	8092f000 	.word	0x8092f000
   16d68:	f00d4628 	.word	0xf00d4628
   16d6c:	9b0afa01 	.word	0x9b0afa01
   16d70:	f0404298 	.word	0xf0404298
   16d74:	6823808b 	.word	0x6823808b
   16d78:	2b02b29b 	.word	0x2b02b29b
   16d7c:	4629d173 	.word	0x4629d173
   16d80:	f00768e0 	.word	0xf00768e0
   16d84:	9002feb9 	.word	0x9002feb9
   16d88:	bf083001 	.word	0xbf083001
   16d8c:	d04e2516 	.word	0xd04e2516
   16d90:	025b6823 	.word	0x025b6823
   16d94:	6823d44a 	.word	0x6823d44a
   16d98:	0300f413 	.word	0x0300f413
   16d9c:	6826d146 	.word	0x6826d146
   16da0:	a8046822 	.word	0xa8046822
   16da4:	0280f442 	.word	0x0280f442
   16da8:	21046022 	.word	0x21046022
   16dac:	3d04f840 	.word	0x3d04f840
   16db0:	8018f8d4 	.word	0x8018f8d4
   16db4:	fe5ef7f9 	.word	0xfe5ef7f9
   16db8:	d14e2800 	.word	0xd14e2800
   16dbc:	0203f247 	.word	0x0203f247
   16dc0:	21082300 	.word	0x21082300
   16dc4:	ea429d03 	.word	0xea429d03
   16dc8:	60ea4207 	.word	0x60ea4207
   16dcc:	8010f8c5 	.word	0x8010f8c5
   16dd0:	726b7229 	.word	0x726b7229
   16dd4:	72eb72ab 	.word	0x72eb72ab
   16dd8:	0c08f04f 	.word	0x0c08f04f
   16ddc:	20102300 	.word	0x20102300
   16de0:	68aa2130 	.word	0x68aa2130
   16de4:	4462756b 	.word	0x4462756b
   16de8:	75ab60aa 	.word	0x75ab60aa
   16dec:	76ab75eb 	.word	0x76ab75eb
   16df0:	f88576eb 	.word	0xf88576eb
   16df4:	7628c014 	.word	0x7628c014
   16df8:	22047669 	.word	0x22047669
   16dfc:	010ceb0d 	.word	0x010ceb0d
   16e00:	f00d6828 	.word	0xf00d6828
   16e04:	f247f9e9 	.word	0xf247f9e9
   16e08:	46280103 	.word	0x46280103
   16e0c:	fe46f7f9 	.word	0xfe46f7f9
   16e10:	bb504680 	.word	0xbb504680
   16e14:	0200f44f 	.word	0x0200f44f
   16e18:	33fff04f 	.word	0x33fff04f
   16e1c:	46384611 	.word	0x46384611
   16e20:	ff06f7fe 	.word	0xff06f7fe
   16e24:	b3984605 	.word	0xb3984605
   16e28:	e0006026 	.word	0xe0006026
   16e2c:	46282523 	.word	0x46282523
   16e30:	f8aef7f9 	.word	0xf8aef7f9
   16e34:	35fff04f 	.word	0x35fff04f
   16e38:	b0044628 	.word	0xb0044628
   16e3c:	81f0e8bd 	.word	0x81f0e8bd
   16e40:	46429b0a 	.word	0x46429b0a
   16e44:	46319300 	.word	0x46319300
   16e48:	4638462b 	.word	0x4638462b
   16e4c:	ff84f7fe 	.word	0xff84f7fe
   16e50:	46284605 	.word	0x46284605
   16e54:	e8bdb004 	.word	0xe8bdb004
   16e58:	9d0381f0 	.word	0x9d0381f0
   16e5c:	d1bb2d00 	.word	0xd1bb2d00
   16e60:	250c6026 	.word	0x250c6026
   16e64:	2509e7e3 	.word	0x2509e7e3
   16e68:	6828e7e1 	.word	0x6828e7e1
   16e6c:	f7f9b108 	.word	0xf7f9b108
   16e70:	4628fe33 	.word	0x4628fe33
   16e74:	fe28f7f9 	.word	0xfe28f7f9
   16e78:	60262523 	.word	0x60262523
   16e7c:	e7d66026 	.word	0xe7d66026
   16e80:	f7f9202a 	.word	0xf7f9202a
   16e84:	f04ff885 	.word	0xf04ff885
   16e88:	e7d535ff 	.word	0xe7d535ff
   16e8c:	e7ce250e 	.word	0xe7ce250e
   16e90:	f7fe4638 	.word	0xf7fe4638
   16e94:	b120ff39 	.word	0xb120ff39
   16e98:	b1156845 	.word	0xb1156845
   16e9c:	8004f8c0 	.word	0x8004f8c0
   16ea0:	6026e7c2 	.word	0x6026e7c2
   16ea4:	2009e7c8 	.word	0x2009e7c8
   16ea8:	f872f7f9 	.word	0xf872f7f9
   16eac:	35fff04f 	.word	0x35fff04f
   16eb0:	bf00e7c2 	.word	0xbf00e7c2

00016eb4 <ip_interface_getopt>:
   16eb4:	bf86f7fe 	.word	0xbf86f7fe

00016eb8 <ip_interface_getaddrinfo>:
   16eb8:	4ff0e92d 	.word	0x4ff0e92d
   16ebc:	0c00f04f 	.word	0x0c00f04f
   16ec0:	4e722401 	.word	0x4e722401
   16ec4:	a1d0f8df 	.word	0xa1d0f8df
   16ec8:	91d0f8df 	.word	0x91d0f8df
   16ecc:	4607b085 	.word	0x4607b085
   16ed0:	93014615 	.word	0x93014615
   16ed4:	c000f8a6 	.word	0xc000f8a6
   16ed8:	4000f8ca 	.word	0x4000f8ca
   16edc:	4000f8c9 	.word	0x4000f8c9
   16ee0:	4608b171 	.word	0x4608b171
   16ee4:	4661220a 	.word	0x4661220a
   16ee8:	f8a1f00d 	.word	0xf8a1f00d
   16eec:	73fef64f 	.word	0x73fef64f
   16ef0:	429a1e42 	.word	0x429a1e42
   16ef4:	8083f200 	.word	0x8083f200
   16ef8:	ea430203 	.word	0xea430203
   16efc:	80302020 	.word	0x80302020
   16f00:	819cf8df 	.word	0x819cf8df
   16f04:	3000f8d8 	.word	0x3000f8d8
   16f08:	d1742b00 	.word	0xd1742b00
   16f0c:	60134a60 	.word	0x60134a60
   16f10:	60134a60 	.word	0x60134a60
   16f14:	d0622f00 	.word	0xd0622f00
   16f18:	f00d4638 	.word	0xf00d4638
   16f1c:	4683f929 	.word	0x4683f929
   16f20:	69eab125 	.word	0x69eab125
   16f24:	6851b112 	.word	0x6851b112
   16f28:	d06c2966 	.word	0xd06c2966
   16f2c:	32fff04f 	.word	0x32fff04f
   16f30:	ae042100 	.word	0xae042100
   16f34:	1d04f846 	.word	0x1d04f846
   16f38:	46594630 	.word	0x46594630
   16f3c:	f7f99200 	.word	0xf7f99200
   16f40:	9a00fd99 	.word	0x9a00fd99
   16f44:	d14c2800 	.word	0xd14c2800
   16f48:	010df247 	.word	0x010df247
   16f4c:	0c08f04f 	.word	0x0c08f04f
   16f50:	ea419c03 	.word	0xea419c03
   16f54:	60e14102 	.word	0x60e14102
   16f58:	72606122 	.word	0x72606122
   16f5c:	72e072a0 	.word	0x72e072a0
   16f60:	c008f884 	.word	0xc008f884
   16f64:	d0762d00 	.word	0xd0762d00
   16f68:	f022686a 	.word	0xf022686a
   16f6c:	29020108 	.word	0x29020108
   16f70:	2a05d05c 	.word	0x2a05d05c
   16f74:	68a9d178 	.word	0x68a9d178
   16f78:	f8c92902 	.word	0xf8c92902
   16f7c:	d0611000 	.word	0xd0611000
   16f80:	68ea61a2 	.word	0x68ea61a2
   16f84:	68aa6222 	.word	0x68aa6222
   16f88:	682a61e2 	.word	0x682a61e2
   16f8c:	68a26162 	.word	0x68a26162
   16f90:	60a23210 	.word	0x60a23210
   16f94:	6820b12f 	.word	0x6820b12f
   16f98:	465ab118 	.word	0x465ab118
   16f9c:	f00d4639 	.word	0xf00d4639
   16fa0:	2301f91b 	.word	0x2301f91b
   16fa4:	010df247 	.word	0x010df247
   16fa8:	f8c84620 	.word	0xf8c84620
   16fac:	f7f93000 	.word	0xf7f93000
   16fb0:	2800fd75 	.word	0x2800fd75
   16fb4:	f04fd156 	.word	0xf04fd156
   16fb8:	930333ff 	.word	0x930333ff
   16fbc:	46204631 	.word	0x46204631
   16fc0:	ff56f7f8 	.word	0xff56f7f8
   16fc4:	3000f8d8 	.word	0x3000f8d8
   16fc8:	d0f72b01 	.word	0xd0f72b01
   16fcc:	68184b31 	.word	0x68184b31
   16fd0:	d13b2800 	.word	0xd13b2800
   16fd4:	9a014b2e 	.word	0x9a014b2e
   16fd8:	6013681b 	.word	0x6013681b
   16fdc:	46bbe00c 	.word	0x46bbe00c
   16fe0:	9c03e79e 	.word	0x9c03e79e
   16fe4:	d1bd2c00 	.word	0xd1bd2c00
   16fe8:	2300200c 	.word	0x2300200c
   16fec:	3000f8c8 	.word	0x3000f8c8
   16ff0:	e8bdb005 	.word	0xe8bdb005
   16ff4:	20738ff0 	.word	0x20738ff0
   16ff8:	e8bdb005 	.word	0xe8bdb005
   16ffc:	20168ff0 	.word	0x20168ff0
   17000:	e8bdb005 	.word	0xe8bdb005
   17004:	68918ff0 	.word	0x68918ff0
   17008:	7f00f5b1 	.word	0x7f00f5b1
   1700c:	f240d18e 	.word	0xf240d18e
   17010:	68d02102 	.word	0x68d02102
   17014:	d1894288 	.word	0xd1894288
   17018:	29006991 	.word	0x29006991
   1701c:	6868d086 	.word	0x6868d086
   17020:	fd6af007 	.word	0xfd6af007
   17024:	d0811c43 	.word	0xd0811c43
   17028:	e7814602 	.word	0xe7814602
   1702c:	290268a9 	.word	0x290268a9
   17030:	1000f8c9 	.word	0x1000f8c9
   17034:	2a05d006 	.word	0x2a05d006
   17038:	2a0ad0a2 	.word	0x2a0ad0a2
   1703c:	2201bf14 	.word	0x2201bf14
   17040:	e79d2202 	.word	0xe79d2202
   17044:	f8ca2102 	.word	0xf8ca2102
   17048:	e7f41000 	.word	0xe7f41000
   1704c:	68184b11 	.word	0x68184b11
   17050:	d0d12800 	.word	0xd0d12800
   17054:	4629e7c9 	.word	0x4629e7c9
   17058:	f1042210 	.word	0xf1042210
   1705c:	f00d0014 	.word	0xf00d0014
   17060:	e794f8e8 	.word	0xe794f8e8
   17064:	e7c02023 	.word	0xe7c02023
   17068:	f7f8202f 	.word	0xf7f8202f
   1706c:	68a2ff91 	.word	0x68a2ff91
   17070:	60a23210 	.word	0x60a23210
   17074:	f04fb917 	.word	0xf04fb917
   17078:	e7b630ff 	.word	0xe7b630ff
   1707c:	28006820 	.word	0x28006820
   17080:	465ad0f9 	.word	0x465ad0f9
   17084:	f00d4639 	.word	0xf00d4639
   17088:	e7f4f8a7 	.word	0xe7f4f8a7
   1708c:	20025c2a 	.word	0x20025c2a
   17090:	200203dc 	.word	0x200203dc
   17094:	200203d4 	.word	0x200203d4
   17098:	200203cc 	.word	0x200203cc
   1709c:	200203d0 	.word	0x200203d0
   170a0:	200203d8 	.word	0x200203d8

000170a4 <ip_interface_freeaddrinfo>:
   170a4:	4c0bb538 	.word	0x4c0bb538
   170a8:	2b026823 	.word	0x2b026823
   170ac:	bd38d000 	.word	0xbd38d000
   170b0:	4605b130 	.word	0x4605b130
   170b4:	f0066940 	.word	0xf0066940
   170b8:	4628f85b 	.word	0x4628f85b
   170bc:	f858f006 	.word	0xf858f006
   170c0:	4a052300 	.word	0x4a052300
   170c4:	60234905 	.word	0x60234905
   170c8:	68086013 	.word	0x68086013
   170cc:	4038e8bd 	.word	0x4038e8bd
   170d0:	bd02f7f9 	.word	0xbd02f7f9
   170d4:	200203d8 	.word	0x200203d8
   170d8:	200203d4 	.word	0x200203d4
   170dc:	200203e0 	.word	0x200203e0

000170e0 <rpc_ip_event_handler>:
   170e0:	4ff0e92d 	.word	0x4ff0e92d
   170e4:	4310f401 	.word	0x4310f401
   170e8:	4f10f5b3 	.word	0x4f10f5b3
   170ec:	b0894605 	.word	0xb0894605
   170f0:	68c0460e 	.word	0x68c0460e
   170f4:	0c04d05e 	.word	0x0c04d05e
   170f8:	f7fe4620 	.word	0xf7fe4620
   170fc:	f248fe05 	.word	0xf248fe05
   17100:	429e030d 	.word	0x429e030d
   17104:	46a04607 	.word	0x46a04607
   17108:	2f00d041 	.word	0x2f00d041
   1710c:	4640d04e 	.word	0x4640d04e
   17110:	462a4633 	.word	0x462a4633
   17114:	f7fc4639 	.word	0xf7fc4639
   17118:	2800fbff 	.word	0x2800fbff
   1711c:	f248d042 	.word	0xf248d042
   17120:	429e0307 	.word	0x429e0307
   17124:	f248d961 	.word	0xf248d961
   17128:	429e030c 	.word	0x429e030c
   1712c:	816bf000 	.word	0x816bf000
   17130:	8106f240 	.word	0x8106f240
   17134:	0302f249 	.word	0x0302f249
   17138:	f000429e 	.word	0xf000429e
   1713c:	f249808c 	.word	0xf249808c
   17140:	429e0303 	.word	0x429e0303
   17144:	8180f000 	.word	0x8180f000
   17148:	0301f249 	.word	0x0301f249
   1714c:	d12d429e 	.word	0xd12d429e
   17150:	f414683c 	.word	0xf414683c
   17154:	f0001480 	.word	0xf0001480
   17158:	68ab81c3 	.word	0x68ab81c3
   1715c:	f2002b04 	.word	0xf2002b04
   17160:	240081eb 	.word	0x240081eb
   17164:	68294626 	.word	0x68294626
   17168:	e9cd686a 	.word	0xe9cd686a
   1716c:	e9cd6406 	.word	0xe9cd6406
   17170:	69f81204 	.word	0x69f81204
   17174:	6803a904 	.word	0x6803a904
   17178:	4798685b 	.word	0x4798685b
   1717c:	f0003001 	.word	0xf0003001
   17180:	683b81cc 	.word	0x683b81cc
   17184:	f4432000 	.word	0xf4432000
   17188:	603b3380 	.word	0x603b3380
   1718c:	f8dfe00b 	.word	0xf8dfe00b
   17190:	682f9344 	.word	0x682f9344
   17194:	3000f8d9 	.word	0x3000f8d9
   17198:	d0152b01 	.word	0xd0152b01
   1719c:	4638b117 	.word	0x4638b117
   171a0:	fc9af7f9 	.word	0xfc9af7f9
   171a4:	b0092000 	.word	0xb0092000
   171a8:	8ff0e8bd 	.word	0x8ff0e8bd
   171ac:	28006828 	.word	0x28006828
   171b0:	e7f7d1f6 	.word	0xe7f7d1f6
   171b4:	fd5ef7fe 	.word	0xfd5ef7fe
   171b8:	f7fe4680 	.word	0xf7fe4680
   171bc:	4607fda5 	.word	0x4607fda5
   171c0:	2f004644 	.word	0x2f004644
   171c4:	e7f1d1a3 	.word	0xe7f1d1a3
   171c8:	2b00696b 	.word	0x2b00696b
   171cc:	2b10d048 	.word	0x2b10d048
   171d0:	4ababf96 	.word	0x4ababf96
   171d4:	f852212d 	.word	0xf852212d
   171d8:	23021023 	.word	0x23021023
   171dc:	60114ab8 	.word	0x60114ab8
   171e0:	3000f8c9 	.word	0x3000f8c9
   171e4:	d1da2f00 	.word	0xd1da2f00
   171e8:	f248e7dc 	.word	0xf248e7dc
   171ec:	429e0306 	.word	0x429e0306
   171f0:	80e6f080 	.word	0x80e6f080
   171f4:	0302f248 	.word	0x0302f248
   171f8:	f000429e 	.word	0xf000429e
   171fc:	d91880c8 	.word	0xd91880c8
   17200:	0303f248 	.word	0x0303f248
   17204:	f000429e 	.word	0xf000429e
   17208:	f2488112 	.word	0xf2488112
   1720c:	429e0305 	.word	0x429e0305
   17210:	683bd1cc 	.word	0x683bd1cc
   17214:	2b03b29b 	.word	0x2b03b29b
   17218:	696bd1c4 	.word	0x696bd1c4
   1721c:	f0002b00 	.word	0xf0002b00
   17220:	2b10817e 	.word	0x2b10817e
   17224:	813bf200 	.word	0x813bf200
   17228:	f8524aa4 	.word	0xf8524aa4
   1722c:	607b3023 	.word	0x607b3023
   17230:	f248e7b8 	.word	0xf248e7b8
   17234:	429e0301 	.word	0x429e0301
   17238:	683bd1b8 	.word	0x683bd1b8
   1723c:	d1b12b01 	.word	0xd1b12b01
   17240:	28006968 	.word	0x28006968
   17244:	8173f000 	.word	0x8173f000
   17248:	f2002810 	.word	0xf2002810
   1724c:	4b9b8128 	.word	0x4b9b8128
   17250:	3020f853 	.word	0x3020f853
   17254:	683be7eb 	.word	0x683be7eb
   17258:	2b07b29b 	.word	0x2b07b29b
   1725c:	e790d1a2 	.word	0xe790d1a2
   17260:	601f4b98 	.word	0x601f4b98
   17264:	016369ac 	.word	0x016369ac
   17268:	93034618 	.word	0x93034618
   1726c:	ff62f005 	.word	0xff62f005
   17270:	28009002 	.word	0x28009002
   17274:	8103f000 	.word	0x8103f000
   17278:	192800e5 	.word	0x192800e5
   1727c:	f0050080 	.word	0xf0050080
   17280:	2800ff59 	.word	0x2800ff59
   17284:	810df000 	.word	0x810df000
   17288:	d0782c00 	.word	0xd0782c00
   1728c:	0210f105 	.word	0x0210f105
   17290:	93011883 	.word	0x93011883
   17294:	24049b02 	.word	0x24049b02
   17298:	a23cf8df 	.word	0xa23cf8df
   1729c:	b23cf8df 	.word	0xb23cf8df
   172a0:	0810f100 	.word	0x0810f100
   172a4:	0620f103 	.word	0x0620f103
   172a8:	220ae01d 	.word	0x220ae01d
   172ac:	2c0cf848 	.word	0x2c0cf848
   172b0:	0224f04f 	.word	0x0224f04f
   172b4:	f8084640 	.word	0xf8084640
   172b8:	f8282c10 	.word	0xf8282c10
   172bc:	f8563c08 	.word	0xf8563c08
   172c0:	f00c2c10 	.word	0xf00c2c10
   172c4:	f856ff89 	.word	0xf856ff89
   172c8:	f1083c10 	.word	0xf1083c10
   172cc:	441c0808 	.word	0x441c0808
   172d0:	f846193b 	.word	0xf846193b
   172d4:	9b013c08 	.word	0x9b013c08
   172d8:	6c04f846 	.word	0x6c04f846
   172dc:	442c4598 	.word	0x442c4598
   172e0:	0620f106 	.word	0x0620f106
   172e4:	593bd045 	.word	0x593bd045
   172e8:	f846193a 	.word	0xf846193a
   172ec:	68533c20 	.word	0x68533c20
   172f0:	1000f8da 	.word	0x1000f8da
   172f4:	bf142b02 	.word	0xbf142b02
   172f8:	200a2002 	.word	0x200a2002
   172fc:	3000f8db 	.word	0x3000f8db
   17300:	0107e946 	.word	0x0107e946
   17304:	3c14f846 	.word	0x3c14f846
   17308:	f1a88a10 	.word	0xf1a88a10
   1730c:	f8460310 	.word	0xf8460310
   17310:	8a550c10 	.word	0x8a550c10
   17314:	3c0cf846 	.word	0x3c0cf846
   17318:	34144b6b 	.word	0x34144b6b
   1731c:	eb072804 	.word	0xeb072804
   17320:	881b0104 	.word	0x881b0104
   17324:	2210d1c1 	.word	0x2210d1c1
   17328:	f8282002 	.word	0xf8282002
   1732c:	f8483c08 	.word	0xf8483c08
   17330:	f8080c0c 	.word	0xf8080c0c
   17334:	f8562c10 	.word	0xf8562c10
   17338:	f1a82c10 	.word	0xf1a82c10
   1733c:	e7c00004 	.word	0xe7c00004
   17340:	0308f248 	.word	0x0308f248
   17344:	d04e429e 	.word	0xd04e429e
   17348:	0309f248 	.word	0x0309f248
   1734c:	f47f429e 	.word	0xf47f429e
   17350:	683baf2d 	.word	0x683baf2d
   17354:	2b0db29b 	.word	0x2b0db29b
   17358:	af24f47f 	.word	0xaf24f47f
   1735c:	28006968 	.word	0x28006968
   17360:	af72f47f 	.word	0xaf72f47f
   17364:	0c1b683b 	.word	0x0c1b683b
   17368:	f043041b 	.word	0xf043041b
   1736c:	603b030e 	.word	0x603b030e
   17370:	2200e719 	.word	0x2200e719
   17374:	1302e9dd 	.word	0x1302e9dd
   17378:	f843440b 	.word	0xf843440b
   1737c:	22022c04 	.word	0x22022c04
   17380:	f8c94b52 	.word	0xf8c94b52
   17384:	9a022000 	.word	0x9a022000
   17388:	601a2000 	.word	0x601a2000
   1738c:	683be70b 	.word	0x683be70b
   17390:	f57f0099 	.word	0xf57f0099
   17394:	683baf07 	.word	0x683baf07
   17398:	5300f023 	.word	0x5300f023
   1739c:	6968603b 	.word	0x6968603b
   173a0:	f0002800 	.word	0xf0002800
   173a4:	281080a2 	.word	0x281080a2
   173a8:	232dbf8e 	.word	0x232dbf8e
   173ac:	f8534b43 	.word	0xf8534b43
   173b0:	20003020 	.word	0x20003020
   173b4:	683b607b 	.word	0x683b607b
   173b8:	2380f443 	.word	0x2380f443
   173bc:	e6f2603b 	.word	0xe6f2603b
   173c0:	029a683b 	.word	0x029a683b
   173c4:	aeeef57f 	.word	0xaeeef57f
   173c8:	2b00696b 	.word	0x2b00696b
   173cc:	809cf000 	.word	0x809cf000
   173d0:	f47f2b6b 	.word	0xf47f2b6b
   173d4:	693baf26 	.word	0x693baf26
   173d8:	f0002b01 	.word	0xf0002b01
   173dc:	230c80b1 	.word	0x230c80b1
   173e0:	607b2000 	.word	0x607b2000
   173e4:	683be6df 	.word	0x683be6df
   173e8:	2b06b29b 	.word	0x2b06b29b
   173ec:	aedaf47f 	.word	0xaedaf47f
   173f0:	28006968 	.word	0x28006968
   173f4:	af28f47f 	.word	0xaf28f47f
   173f8:	0c1b683b 	.word	0x0c1b683b
   173fc:	f043041b 	.word	0xf043041b
   17400:	603b0307 	.word	0x603b0307
   17404:	683be6cf 	.word	0x683be6cf
   17408:	2b08b29b 	.word	0x2b08b29b
   1740c:	aecaf47f 	.word	0xaecaf47f
   17410:	2b00696b 	.word	0x2b00696b
   17414:	af05f47f 	.word	0xaf05f47f
   17418:	20014b2d 	.word	0x20014b2d
   1741c:	5024f843 	.word	0x5024f843
   17420:	0c1b683b 	.word	0x0c1b683b
   17424:	f043041b 	.word	0xf043041b
   17428:	603b0309 	.word	0x603b0309
   1742c:	683be6bb 	.word	0x683be6bb
   17430:	f57f025b 	.word	0xf57f025b
   17434:	6968aeb7 	.word	0x6968aeb7
   17438:	f47f2800 	.word	0xf47f2800
   1743c:	683baf05 	.word	0x683baf05
   17440:	0300f443 	.word	0x0300f443
   17444:	e6ae603b 	.word	0xe6ae603b
   17448:	f443683b 	.word	0xf443683b
   1744c:	603b2300 	.word	0x603b2300
   17450:	f423683b 	.word	0xf423683b
   17454:	603b1300 	.word	0x603b1300
   17458:	f423683b 	.word	0xf423683b
   1745c:	603b3300 	.word	0x603b3300
   17460:	2b6c692b 	.word	0x2b6c692b
   17464:	2b10d021 	.word	0x2b10d021
   17468:	232dbf8c 	.word	0x232dbf8c
   1746c:	f04f4a13 	.word	0xf04f4a13
   17470:	bf980000 	.word	0xbf980000
   17474:	3023f852 	.word	0x3023f852
   17478:	60bb607b 	.word	0x60bb607b
   1747c:	f005e693 	.word	0xf005e693
   17480:	200cfe77 	.word	0x200cfe77
   17484:	490e2302 	.word	0x490e2302
   17488:	60084a10 	.word	0x60084a10
   1748c:	9902682f 	.word	0x9902682f
   17490:	f8c96011 	.word	0xf8c96011
   17494:	2f003000 	.word	0x2f003000
   17498:	ae81f47f 	.word	0xae81f47f
   1749c:	232de682 	.word	0x232de682
   174a0:	220ce6c5 	.word	0x220ce6c5
   174a4:	601a4b06 	.word	0x601a4b06
   174a8:	2239e769 	.word	0x2239e769
   174ac:	2000683b 	.word	0x2000683b
   174b0:	4380f043 	.word	0x4380f043
   174b4:	607a603b 	.word	0x607a603b
   174b8:	e67460ba 	.word	0xe67460ba
   174bc:	000259ac 	.word	0x000259ac
   174c0:	200203d4 	.word	0x200203d4
   174c4:	200203e0 	.word	0x200203e0
   174c8:	20025c2a 	.word	0x20025c2a
   174cc:	200203dc 	.word	0x200203dc
   174d0:	200203e4 	.word	0x200203e4
   174d4:	200203d8 	.word	0x200203d8
   174d8:	200203d0 	.word	0x200203d0
   174dc:	200203cc 	.word	0x200203cc
   174e0:	f7f96828 	.word	0xf7f96828
   174e4:	4620faf9 	.word	0x4620faf9
   174e8:	683be65d 	.word	0x683be65d
   174ec:	3300f443 	.word	0x3300f443
   174f0:	683b603b 	.word	0x683b603b
   174f4:	1380f443 	.word	0x1380f443
   174f8:	683b603b 	.word	0x683b603b
   174fc:	041b0c1b 	.word	0x041b0c1b
   17500:	0305f043 	.word	0x0305f043
   17504:	e64e603b 	.word	0xe64e603b
   17508:	4a28683b 	.word	0x4a28683b
   1750c:	3300f443 	.word	0x3300f443
   17510:	2001603b 	.word	0x2001603b
   17514:	5024f842 	.word	0x5024f842
   17518:	2002e645 	.word	0x2002e645
   1751c:	683be643 	.word	0x683be643
   17520:	0c1b2000 	.word	0x0c1b2000
   17524:	f043041b 	.word	0xf043041b
   17528:	603b0304 	.word	0x603b0304
   1752c:	2302e63b 	.word	0x2302e63b
   17530:	69ab603b 	.word	0x69ab603b
   17534:	e63661bb 	.word	0xe63661bb
   17538:	b94c8a6c 	.word	0xb94c8a6c
   1753c:	e6124626 	.word	0xe6124626
   17540:	683b220c 	.word	0x683b220c
   17544:	f0432000 	.word	0xf0432000
   17548:	603b6300 	.word	0x603b6300
   1754c:	e62a607a 	.word	0xe62a607a
   17550:	f0052024 	.word	0xf0052024
   17554:	4606fdef 	.word	0x4606fdef
   17558:	8a6ab158 	.word	0x8a6ab158
   1755c:	d0182a10 	.word	0xd0182a10
   17560:	d00a2a04 	.word	0xd00a2a04
   17564:	f7f96828 	.word	0xf7f96828
   17568:	4630fab7 	.word	0x4630fab7
   1756c:	fe00f005 	.word	0xfe00f005
   17570:	6828e618 	.word	0x6828e618
   17574:	fab0f7f9 	.word	0xfab0f7f9
   17578:	2302e614 	.word	0x2302e614
   1757c:	60432410 	.word	0x60432410
   17580:	8a2b7004 	.word	0x8a2b7004
   17584:	0114f105 	.word	0x0114f105
   17588:	300c8103 	.word	0x300c8103
   1758c:	fe24f00c 	.word	0xfe24f00c
   17590:	230ae5e9 	.word	0x230ae5e9
   17594:	60432424 	.word	0x60432424
   17598:	8a2b7004 	.word	0x8a2b7004
   1759c:	0114f105 	.word	0x0114f105
   175a0:	30108103 	.word	0x30108103
   175a4:	fe18f00c 	.word	0xfe18f00c
   175a8:	bf00e5dd 	.word	0xbf00e5dd
   175ac:	200203e4 	.word	0x200203e4

000175b0 <rpc_logobj_client_evt_handler>:
   175b0:	f850b120 	.word	0xf850b120
   175b4:	0c091b08 	.word	0x0c091b08
   175b8:	b886f7fa 	.word	0xb886f7fa
   175bc:	bf004770 	.word	0xbf004770

000175c0 <rpc_logobj_client_init>:
   175c0:	f0044801 	.word	0xf0044801
   175c4:	bf00bcf1 	.word	0xbf00bcf1
   175c8:	000259f0 	.word	0x000259f0

000175cc <rpc_logobj_client_request_alloc>:
   175cc:	b5102300 	.word	0xb5102300
   175d0:	9301b082 	.word	0x9301b082
   175d4:	b170b961 	.word	0xb170b961
   175d8:	aa014604 	.word	0xaa014604
   175dc:	f0042009 	.word	0xf0042009
   175e0:	b918ff1b 	.word	0xb918ff1b
   175e4:	b10b9b01 	.word	0xb10b9b01
   175e8:	60233308 	.word	0x60233308
   175ec:	bd10b002 	.word	0xbd10b002
   175f0:	b002200f 	.word	0xb002200f
   175f4:	200ebd10 	.word	0x200ebd10
   175f8:	bd10b002 	.word	0xbd10b002

000175fc <rpc_logobj_client_request_send>:
   175fc:	4370f401 	.word	0x4370f401
   17600:	4fe0f5b3 	.word	0x4fe0f5b3
   17604:	b160d10b 	.word	0xb160d10b
   17608:	f8304603 	.word	0xf8304603
   1760c:	20092c08 	.word	0x20092c08
   17610:	4101ea42 	.word	0x4101ea42
   17614:	1d08f843 	.word	0x1d08f843
   17618:	f0044619 	.word	0xf0044619
   1761c:	200fbee5 	.word	0x200fbee5
   17620:	200e4770 	.word	0x200e4770
   17624:	bf004770 	.word	0xbf004770

00017628 <rpc_logobj_client_message_free>:
   17628:	f1a0b120 	.word	0xf1a0b120
   1762c:	20090108 	.word	0x20090108
   17630:	bf24f004 	.word	0xbf24f004
   17634:	4770200e 	.word	0x4770200e

00017638 <rpc_logobj_client_data_free>:
   17638:	4601b118 	.word	0x4601b118
   1763c:	f0052009 	.word	0xf0052009
   17640:	200eb82f 	.word	0x200eb82f
   17644:	bf004770 	.word	0xbf004770

00017648 <datagram_handler_init>:
   17648:	4604b510 	.word	0x4604b510
   1764c:	f005200c 	.word	0xf005200c
   17650:	60e0fd71 	.word	0x60e0fd71
   17654:	e8bdb118 	.word	0xe8bdb118
   17658:	f0004010 	.word	0xf0004010
   1765c:	2004b8bd 	.word	0x2004b8bd
   17660:	bf00bd10 	.word	0xbf00bd10

00017664 <datagram_handler_put>:
   17664:	4606b570 	.word	0x4606b570
   17668:	460d2014 	.word	0x460d2014
   1766c:	fd62f005 	.word	0xfd62f005
   17670:	682bb178 	.word	0x682bb178
   17674:	60434604 	.word	0x60434604
   17678:	4601686b 	.word	0x4601686b
   1767c:	68eb6083 	.word	0x68eb6083
   17680:	68ab60c3 	.word	0x68ab60c3
   17684:	68f06103 	.word	0x68f06103
   17688:	f8b0f000 	.word	0xf8b0f000
   1768c:	6868b920 	.word	0x6868b920
   17690:	f04fbd70 	.word	0xf04fbd70
   17694:	bd7030ff 	.word	0xbd7030ff
   17698:	f0054620 	.word	0xf0054620
   1769c:	f04ffd69 	.word	0xf04ffd69
   176a0:	bd7030ff 	.word	0xbd7030ff

000176a4 <datagram_handler_get>:
   176a4:	4606b5f0 	.word	0x4606b5f0
   176a8:	68c0b085 	.word	0x68c0b085
   176ac:	4617460c 	.word	0x4617460c
   176b0:	f8bcf000 	.word	0xf8bcf000
   176b4:	d0372800 	.word	0xd0372800
   176b8:	46056882 	.word	0x46056882
   176bc:	0300e9d4 	.word	0x0300e9d4
   176c0:	bf28429a 	.word	0xbf28429a
   176c4:	6062461a 	.word	0x6062461a
   176c8:	6869b110 	.word	0x6869b110
   176cc:	fd84f00c 	.word	0xfd84f00c
   176d0:	b11868a0 	.word	0xb11868a0
   176d4:	b10b692b 	.word	0xb10b692b
   176d8:	b9e268ea 	.word	0xb9e268ea
   176dc:	60e32300 	.word	0x60e32300
   176e0:	d502073b 	.word	0xd502073b
   176e4:	b0056860 	.word	0xb0056860
   176e8:	68f0bdf0 	.word	0x68f0bdf0
   176ec:	f894f000 	.word	0xf894f000
   176f0:	28004605 	.word	0x28004605
   176f4:	e9d0d0f6 	.word	0xe9d0d0f6
   176f8:	69023101 	.word	0x69023101
   176fc:	68c39300 	.word	0x68c39300
   17700:	1201e9cd 	.word	0x1201e9cd
   17704:	46689303 	.word	0x46689303
   17708:	3101e9d6 	.word	0x3101e9d6
   1770c:	46284798 	.word	0x46284798
   17710:	fd2ef005 	.word	0xfd2ef005
   17714:	68e3e7e6 	.word	0x68e3e7e6
   17718:	bf28429a 	.word	0xbf28429a
   1771c:	60e2461a 	.word	0x60e2461a
   17720:	f00c6929 	.word	0xf00c6929
   17724:	e7dbfd59 	.word	0xe7dbfd59
   17728:	30fff04f 	.word	0x30fff04f
   1772c:	bf00e7db 	.word	0xbf00e7db

00017730 <datagram_handler_available>:
   17730:	68c0b508 	.word	0x68c0b508
   17734:	f87af000 	.word	0xf87af000
   17738:	6880b108 	.word	0x6880b108
   1773c:	f04fbd08 	.word	0xf04fbd08
   17740:	bd0830ff 	.word	0xbd0830ff

00017744 <datagram_handler_flush>:
   17744:	4605b530 	.word	0x4605b530
   17748:	b08568c0 	.word	0xb08568c0
   1774c:	e01ab9a8 	.word	0xe01ab9a8
   17750:	f00068e8 	.word	0xf00068e8
   17754:	4604f861 	.word	0x4604f861
   17758:	e9d0b170 	.word	0xe9d0b170
   1775c:	e9d40101 	.word	0xe9d40101
   17760:	e9cd3203 	.word	0xe9cd3203
   17764:	e9cd0100 	.word	0xe9cd0100
   17768:	e9d52302 	.word	0xe9d52302
   1776c:	46683101 	.word	0x46683101
   17770:	46204798 	.word	0x46204798
   17774:	fcfcf005 	.word	0xfcfcf005
   17778:	f00068e8 	.word	0xf00068e8
   1777c:	2800f85d 	.word	0x2800f85d
   17780:	b005d1e6 	.word	0xb005d1e6
   17784:	2008bd30 	.word	0x2008bd30
   17788:	bd30b005 	.word	0xbd30b005

0001778c <datagram_handler_free>:
   1778c:	4605b530 	.word	0x4605b530
   17790:	b08568c0 	.word	0xb08568c0
   17794:	e01cb9a0 	.word	0xe01cb9a0
   17798:	f83ef000 	.word	0xf83ef000
   1779c:	b1704604 	.word	0xb1704604
   177a0:	0101e9d0 	.word	0x0101e9d0
   177a4:	3203e9d4 	.word	0x3203e9d4
   177a8:	0100e9cd 	.word	0x0100e9cd
   177ac:	2302e9cd 	.word	0x2302e9cd
   177b0:	3101e9d5 	.word	0x3101e9d5
   177b4:	47984668 	.word	0x47984668
   177b8:	f0054620 	.word	0xf0054620
   177bc:	68e8fcd9 	.word	0x68e8fcd9
   177c0:	f83af000 	.word	0xf83af000
   177c4:	68e84604 	.word	0x68e84604
   177c8:	d1e52c00 	.word	0xd1e52c00
   177cc:	fcd0f005 	.word	0xfcd0f005
   177d0:	b00560ec 	.word	0xb00560ec
   177d4:	bf00bd30 	.word	0xbf00bd30

000177d8 <linked_list_init>:
   177d8:	2300b128 	.word	0x2300b128
   177dc:	e9c06003 	.word	0xe9c06003
   177e0:	46183301 	.word	0x46183301
   177e4:	20074770 	.word	0x20074770
   177e8:	bf004770 	.word	0xbf004770

000177ec <linked_list_push>:
   177ec:	46036802 	.word	0x46036802
   177f0:	d00e3201 	.word	0xd00e3201
   177f4:	600a2200 	.word	0x600a2200
   177f8:	b13a6802 	.word	0xb13a6802
   177fc:	60116882 	.word	0x60116882
   17800:	681a6081 	.word	0x681a6081
   17804:	32012000 	.word	0x32012000
   17808:	4770601a 	.word	0x4770601a
   1780c:	1101e9c0 	.word	0x1101e9c0
   17810:	2004e7f7 	.word	0x2004e7f7
   17814:	bf004770 	.word	0xbf004770

00017818 <linked_list_pop>:
   17818:	68004603 	.word	0x68004603
   1781c:	6858b128 	.word	0x6858b128
   17820:	6801681a 	.word	0x6801681a
   17824:	60593a01 	.word	0x60593a01
   17828:	4770601a 	.word	0x4770601a

0001782c <linked_list_peek>:
   1782c:	b10b6803 	.word	0xb10b6803
   17830:	47706840 	.word	0x47706840
   17834:	47704618 	.word	0x47704618

00017838 <linked_list_size_get>:
   17838:	47706800 	.word	0x47706800

0001783c <linked_list_get_next>:
   1783c:	47706800 	.word	0x47706800

00017840 <rpc_transport_ipc_tx_init>:
   17840:	f0002800 	.word	0xf0002800
   17844:	290080b8 	.word	0x290080b8
   17848:	80b5f000 	.word	0x80b5f000
   1784c:	f0002a00 	.word	0xf0002a00
   17850:	e92d80b2 	.word	0xe92d80b2
   17854:	6a044ff0 	.word	0x6a044ff0
   17858:	2c00b085 	.word	0x2c00b085
   1785c:	80a6f000 	.word	0x80a6f000
   17860:	28006a40 	.word	0x28006a40
   17864:	80a2f000 	.word	0x80a2f000
   17868:	4587f642 	.word	0x4587f642
   1786c:	0a00f04f 	.word	0x0a00f04f
   17870:	42a84e55 	.word	0x42a84e55
   17874:	a000f886 	.word	0xa000f886
   17878:	80a0f240 	.word	0x80a0f240
   1787c:	f8df2708 	.word	0xf8df2708
   17880:	46209180 	.word	0x46209180
   17884:	460d4616 	.word	0x460d4616
   17888:	46512244 	.word	0x46512244
   1788c:	4000f8c9 	.word	0x4000f8c9
   17890:	fccff00c 	.word	0xfccff00c
   17894:	2000f8d9 	.word	0x2000f8d9
   17898:	0344f104 	.word	0x0344f104
   1789c:	8164f8df 	.word	0x8164f8df
   178a0:	a001f882 	.word	0xa001f882
   178a4:	a002f882 	.word	0xa002f882
   178a8:	a003f882 	.word	0xa003f882
   178ac:	46187017 	.word	0x46187017
   178b0:	46512244 	.word	0x46512244
   178b4:	3000f8c8 	.word	0x3000f8c8
   178b8:	fcbbf00c 	.word	0xfcbbf00c
   178bc:	2000f8d8 	.word	0x2000f8d8
   178c0:	0388f104 	.word	0x0388f104
   178c4:	b140f8df 	.word	0xb140f8df
   178c8:	f8827017 	.word	0xf8827017
   178cc:	f882a001 	.word	0xf882a001
   178d0:	f882a002 	.word	0xf882a002
   178d4:	4618a003 	.word	0x4618a003
   178d8:	7200f44f 	.word	0x7200f44f
   178dc:	f8cb4651 	.word	0xf8cb4651
   178e0:	f00c3000 	.word	0xf00c3000
   178e4:	4b39fca6 	.word	0x4b39fca6
   178e8:	7c22f504 	.word	0x7c22f504
   178ec:	c000f8c3 	.word	0xc000f8c3
   178f0:	46604651 	.word	0x46604651
   178f4:	7200f44f 	.word	0x7200f44f
   178f8:	fc9bf00c 	.word	0xfc9bf00c
   178fc:	5c20f44f 	.word	0x5c20f44f
   17900:	f04f2106 	.word	0xf04f2106
   17904:	f44f0e01 	.word	0xf44f0e01
   17908:	f44f3001 	.word	0xf44f3001
   1790c:	4b303288 	.word	0x4b303288
   17910:	6491f504 	.word	0x6491f504
   17914:	4c2f605c 	.word	0x4c2f605c
   17918:	c008f8c3 	.word	0xc008f8c3
   1791c:	f8a38199 	.word	0xf8a38199
   17920:	4619e000 	.word	0x4619e000
   17924:	4b2c611c 	.word	0x4b2c611c
   17928:	c0e0f8df 	.word	0xc0e0f8df
   1792c:	482b6120 	.word	0x482b6120
   17930:	f5036063 	.word	0xf5036063
   17934:	60a073c0 	.word	0x60a073c0
   17938:	c000f8c4 	.word	0xc000f8c4
   1793c:	60e34828 	.word	0x60e34828
   17940:	f0056162 	.word	0xf0056162
   17944:	2800fadd 	.word	0x2800fadd
   17948:	f04fd132 	.word	0xf04fd132
   1794c:	24200c02 	.word	0x24200c02
   17950:	1000f8d9 	.word	0x1000f8d9
   17954:	2000f8db 	.word	0x2000f8db
   17958:	4b1c6029 	.word	0x4b1c6029
   1795c:	1000f8d8 	.word	0x1000f8d8
   17960:	e0acf8df 	.word	0xe0acf8df
   17964:	60314d1f 	.word	0x60314d1f
   17968:	2000f8ce 	.word	0x2000f8ce
   1796c:	491e681b 	.word	0x491e681b
   17970:	7200f502 	.word	0x7200f502
   17974:	4e1d602a 	.word	0x4e1d602a
   17978:	4d1e4a1d 	.word	0x4d1e4a1d
   1797c:	f503600b 	.word	0xf503600b
   17980:	491d7300 	.word	0x491d7300
   17984:	80286033 	.word	0x80286033
   17988:	c514f8c2 	.word	0xc514f8c2
   1798c:	4b1b6809 	.word	0x4b1b6809
   17990:	99039103 	.word	0x99039103
   17994:	751cf8c2 	.word	0x751cf8c2
   17998:	443b6819 	.word	0x443b6819
   1799c:	99029102 	.word	0x99029102
   179a0:	4524f8c2 	.word	0x4524f8c2
   179a4:	9301681b 	.word	0x9301681b
   179a8:	e0019b01 	.word	0xe0019b01
   179ac:	0007f24c 	.word	0x0007f24c
   179b0:	e8bdb005 	.word	0xe8bdb005
   179b4:	f24c8ff0 	.word	0xf24c8ff0
   179b8:	4770000e 	.word	0x4770000e
   179bc:	0004f24c 	.word	0x0004f24c
   179c0:	e8bdb005 	.word	0xe8bdb005
   179c4:	bf008ff0 	.word	0xbf008ff0
   179c8:	20026c5b 	.word	0x20026c5b
   179cc:	20020434 	.word	0x20020434
   179d0:	20020420 	.word	0x20020420
   179d4:	20020444 	.word	0x20020444
   179d8:	00040080 	.word	0x00040080
   179dc:	00040100 	.word	0x00040100
   179e0:	2002040c 	.word	0x2002040c
   179e4:	20020418 	.word	0x20020418
   179e8:	20020414 	.word	0x20020414
   179ec:	20020410 	.word	0x20020410
   179f0:	4002a000 	.word	0x4002a000
   179f4:	20025c2c 	.word	0x20025c2c
   179f8:	4002a514 	.word	0x4002a514
   179fc:	4002a51c 	.word	0x4002a51c
   17a00:	20020440 	.word	0x20020440
   17a04:	20020438 	.word	0x20020438
   17a08:	2002043c 	.word	0x2002043c
   17a0c:	00080040 	.word	0x00080040
   17a10:	2002041c 	.word	0x2002041c

00017a14 <rpc_transport_ipc_tx_send>:
   17a14:	d05f2800 	.word	0xd05f2800
   17a18:	4b33b470 	.word	0x4b33b470
   17a1c:	681ab083 	.word	0x681ab083
   17a20:	42824b32 	.word	0x42824b32
   17a24:	681bd81e 	.word	0x681bd81e
   17a28:	42834931 	.word	0x42834931
   17a2c:	d8036809 	.word	0xd8036809
   17a30:	68244c30 	.word	0x68244c30
   17a34:	d8474284 	.word	0xd8474284
   17a38:	d90e4281 	.word	0xd90e4281
   17a3c:	781b4b2e 	.word	0x781b4b2e
   17a40:	d14c2b00 	.word	0xd14c2b00
   17a44:	492d1a83 	.word	0x492d1a83
   17a48:	069b099e 	.word	0x069b099e
   17a4c:	4c2c680a 	.word	0x4c2c680a
   17a50:	0103f04f 	.word	0x0103f04f
   17a54:	0502f04f 	.word	0x0502f04f
   17a58:	f24cd014 	.word	0xf24cd014
   17a5c:	b0030010 	.word	0xb0030010
   17a60:	4770bc70 	.word	0x4770bc70
   17a64:	4298681b 	.word	0x4298681b
   17a68:	4a22d3f7 	.word	0x4a22d3f7
   17a6c:	42906812 	.word	0x42906812
   17a70:	2101d2f3 	.word	0x2101d2f3
   17a74:	4a231ac3 	.word	0x4a231ac3
   17a78:	069b099e 	.word	0x069b099e
   17a7c:	6812460d 	.word	0x6812460d
   17a80:	d1ea4c21 	.word	0xd1ea4c21
   17a84:	b2db6843 	.word	0xb2db6843
   17a88:	d120429d 	.word	0xd120429d
   17a8c:	eb022020 	.word	0xeb022020
   17a90:	4d1e02c6 	.word	0x4d1e02c6
   17a94:	882e6853 	.word	0x882e6853
   17a98:	ea43b29b 	.word	0xea43b29b
   17a9c:	f0234306 	.word	0xf0234306
   17aa0:	f04303ff 	.word	0xf04303ff
   17aa4:	60530301 	.word	0x60530301
   17aa8:	3801bf00 	.word	0x3801bf00
   17aac:	2201d1fc 	.word	0x2201d1fc
   17ab0:	f8434b17 	.word	0xf8434b17
   17ab4:	68222021 	.word	0x68222021
   17ab8:	9201882b 	.word	0x9201882b
   17abc:	33019a01 	.word	0x33019a01
   17ac0:	b003802b 	.word	0xb003802b
   17ac4:	4770bc70 	.word	0x4770bc70
   17ac8:	d9d24281 	.word	0xd9d24281
   17acc:	f24ce7b6 	.word	0xf24ce7b6
   17ad0:	b0030007 	.word	0xb0030007
   17ad4:	4770bc70 	.word	0x4770bc70
   17ad8:	000ef24c 	.word	0x000ef24c
   17adc:	f24c4770 	.word	0xf24c4770
   17ae0:	b003000f 	.word	0xb003000f
   17ae4:	4770bc70 	.word	0x4770bc70
   17ae8:	2002041c 	.word	0x2002041c
   17aec:	20020414 	.word	0x20020414
   17af0:	20020418 	.word	0x20020418
   17af4:	20020410 	.word	0x20020410
   17af8:	20026c5b 	.word	0x20026c5b
   17afc:	20020440 	.word	0x20020440
   17b00:	4002a00c 	.word	0x4002a00c
   17b04:	20020438 	.word	0x20020438
   17b08:	4002a004 	.word	0x4002a004
   17b0c:	20025c2c 	.word	0x20025c2c
   17b10:	4002a000 	.word	0x4002a000

00017b14 <rpc_transport_ipc_tx_rpc_data_alloc>:
   17b14:	781b4b18 	.word	0x781b4b18
   17b18:	b4f0bb63 	.word	0xb4f0bb63
   17b1c:	f0034a17 	.word	0xf0034a17
   17b20:	681400ff 	.word	0x681400ff
   17b24:	68254b16 	.word	0x68254b16
   17b28:	b1a5681e 	.word	0xb1a5681e
   17b2c:	00c14607 	.word	0x00c14607
   17b30:	685a1863 	.word	0x685a1863
   17b34:	2a03b2d2 	.word	0x2a03b2d2
   17b38:	609fd104 	.word	0x609fd104
   17b3c:	f022685a 	.word	0xf022685a
   17b40:	605a02ff 	.word	0x605a02ff
   17b44:	f012685a 	.word	0xf012685a
   17b48:	d1010fff 	.word	0xd1010fff
   17b4c:	b12b689b 	.word	0xb12b689b
   17b50:	42a83001 	.word	0x42a83001
   17b54:	2000d1eb 	.word	0x2000d1eb
   17b58:	4770bcf0 	.word	0x4770bcf0
   17b5c:	1080eb06 	.word	0x1080eb06
   17b60:	60884421 	.word	0x60884421
   17b64:	f0236843 	.word	0xf0236843
   17b68:	f04303ff 	.word	0xf04303ff
   17b6c:	60430302 	.word	0x60430302
   17b70:	4770bcf0 	.word	0x4770bcf0
   17b74:	47702000 	.word	0x47702000
   17b78:	20026c5b 	.word	0x20026c5b
   17b7c:	20020440 	.word	0x20020440
   17b80:	2002043c 	.word	0x2002043c

00017b84 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   17b84:	4a15b4f0 	.word	0x4a15b4f0
   17b88:	68144b15 	.word	0x68144b15
   17b8c:	6825681e 	.word	0x6825681e
   17b90:	2000b1ad 	.word	0x2000b1ad
   17b94:	00c14607 	.word	0x00c14607
   17b98:	685a1863 	.word	0x685a1863
   17b9c:	2a03b2d2 	.word	0x2a03b2d2
   17ba0:	609fd104 	.word	0x609fd104
   17ba4:	f022685a 	.word	0xf022685a
   17ba8:	605a02ff 	.word	0x605a02ff
   17bac:	f012685a 	.word	0xf012685a
   17bb0:	d1010fff 	.word	0xd1010fff
   17bb4:	b12b689b 	.word	0xb12b689b
   17bb8:	42853001 	.word	0x42853001
   17bbc:	2000d1eb 	.word	0x2000d1eb
   17bc0:	4770bcf0 	.word	0x4770bcf0
   17bc4:	1080eb06 	.word	0x1080eb06
   17bc8:	60884421 	.word	0x60884421
   17bcc:	f0236843 	.word	0xf0236843
   17bd0:	f04303ff 	.word	0xf04303ff
   17bd4:	60430301 	.word	0x60430301
   17bd8:	4770bcf0 	.word	0x4770bcf0
   17bdc:	20020438 	.word	0x20020438
   17be0:	20020434 	.word	0x20020434

00017be4 <rpc_transport_ipc_tx_data_alloc>:
   17be4:	781b4b03 	.word	0x781b4b03
   17be8:	f005b90b 	.word	0xf005b90b
   17bec:	2000bacd 	.word	0x2000bacd
   17bf0:	bf004770 	.word	0xbf004770
   17bf4:	20026c5b 	.word	0x20026c5b

00017bf8 <null_handler_init>:
   17bf8:	47702000 	.word	0x47702000

00017bfc <null_handler_put>:
   17bfc:	460cb510 	.word	0x460cb510
   17c00:	3101e9d0 	.word	0x3101e9d0
   17c04:	47984620 	.word	0x47984620
   17c08:	bd106860 	.word	0xbd106860

00017c0c <null_handler_get>:
   17c0c:	30fff04f 	.word	0x30fff04f
   17c10:	bf004770 	.word	0xbf004770

00017c14 <null_handler_available>:
   17c14:	30fff04f 	.word	0x30fff04f
   17c18:	bf004770 	.word	0xbf004770

00017c1c <null_handler_flush>:
   17c1c:	47702000 	.word	0x47702000

00017c20 <null_handler_free>:
   17c20:	bf004770 	.word	0xbf004770

00017c24 <rpc_gnss_event_handler>:
   17c24:	4b5db5f0 	.word	0x4b5db5f0
   17c28:	68004606 	.word	0x68004606
   17c2c:	6802881b 	.word	0x6802881b
   17c30:	ebb34c5b 	.word	0xebb34c5b
   17c34:	b0854f12 	.word	0xb0854f12
   17c38:	6020460d 	.word	0x6020460d
   17c3c:	f505d033 	.word	0xf505d033
   17c40:	33ff433f 	.word	0x33ff433f
   17c44:	2b02b29b 	.word	0x2b02b29b
   17c48:	4c56d80e 	.word	0x4c56d80e
   17c4c:	075a6823 	.word	0x075a6823
   17c50:	6823d40d 	.word	0x6823d40d
   17c54:	d503079b 	.word	0xd503079b
   17c58:	0303f244 	.word	0x0303f244
   17c5c:	d006429d 	.word	0xd006429d
   17c60:	b1086830 	.word	0xb1086830
   17c64:	fa72f7f9 	.word	0xfa72f7f9
   17c68:	b0052000 	.word	0xb0052000
   17c6c:	2002bdf0 	.word	0x2002bdf0
   17c70:	fa60f005 	.word	0xfa60f005
   17c74:	28004607 	.word	0x28004607
   17c78:	2302d0f2 	.word	0x2302d0f2
   17c7c:	68318005 	.word	0x68318005
   17c80:	48496872 	.word	0x48496872
   17c84:	0086e88d 	.word	0x0086e88d
   17c88:	93036800 	.word	0x93036800
   17c8c:	46696803 	.word	0x46696803
   17c90:	4798685b 	.word	0x4798685b
   17c94:	d06d3001 	.word	0xd06d3001
   17c98:	68232000 	.word	0x68232000
   17c9c:	3380f443 	.word	0x3380f443
   17ca0:	b0056023 	.word	0xb0056023
   17ca4:	4c3fbdf0 	.word	0x4c3fbdf0
   17ca8:	01da6823 	.word	0x01da6823
   17cac:	f242d523 	.word	0xf242d523
   17cb0:	42991302 	.word	0x42991302
   17cb4:	6843d11f 	.word	0x6843d11f
   17cb8:	6823b91b 	.word	0x6823b91b
   17cbc:	7300f043 	.word	0x7300f043
   17cc0:	68236023 	.word	0x68236023
   17cc4:	7380f023 	.word	0x7380f023
   17cc8:	68236023 	.word	0x68236023
   17ccc:	d430025b 	.word	0xd430025b
   17cd0:	0305f242 	.word	0x0305f242
   17cd4:	d12c429d 	.word	0xd12c429d
   17cd8:	02996823 	.word	0x02996823
   17cdc:	6843d529 	.word	0x6843d529
   17ce0:	d1552b00 	.word	0xd1552b00
   17ce4:	f4236823 	.word	0xf4236823
   17ce8:	60231300 	.word	0x60231300
   17cec:	f4436823 	.word	0xf4436823
   17cf0:	60233300 	.word	0x60233300
   17cf4:	6823e01d 	.word	0x6823e01d
   17cf8:	d50e025f 	.word	0xd50e025f
   17cfc:	1303f242 	.word	0x1303f242
   17d00:	d10a429d 	.word	0xd10a429d
   17d04:	b91b6843 	.word	0xb91b6843
   17d08:	f4436823 	.word	0xf4436823
   17d0c:	60230300 	.word	0x60230300
   17d10:	f4236823 	.word	0xf4236823
   17d14:	60230380 	.word	0x60230380
   17d18:	f242e00b 	.word	0xf242e00b
   17d1c:	429d0301 	.word	0x429d0301
   17d20:	6843d10a 	.word	0x6843d10a
   17d24:	6823b92b 	.word	0x6823b92b
   17d28:	041b0c1b 	.word	0x041b0c1b
   17d2c:	0302f043 	.word	0x0302f043
   17d30:	f7f96023 	.word	0xf7f96023
   17d34:	e782fa0b 	.word	0xe782fa0b
   17d38:	0304f242 	.word	0x0304f242
   17d3c:	d1c7429d 	.word	0xd1c7429d
   17d40:	b9936843 	.word	0xb9936843
   17d44:	f4436823 	.word	0xf4436823
   17d48:	60230300 	.word	0x60230300
   17d4c:	b29b6823 	.word	0xb29b6823
   17d50:	68232b03 	.word	0x68232b03
   17d54:	b29bd016 	.word	0xb29bd016
   17d58:	d1d92b04 	.word	0xd1d92b04
   17d5c:	0c1b6823 	.word	0x0c1b6823
   17d60:	f043041b 	.word	0xf043041b
   17d64:	60230302 	.word	0x60230302
   17d68:	6823e7d2 	.word	0x6823e7d2
   17d6c:	2b03b29b 	.word	0x2b03b29b
   17d70:	e7f3d1ce 	.word	0xe7f3d1ce
   17d74:	f0054638 	.word	0xf0054638
   17d78:	6830f9fb 	.word	0x6830f9fb
   17d7c:	f47f2800 	.word	0xf47f2800
   17d80:	e771af71 	.word	0xe771af71
   17d84:	041b0c1b 	.word	0x041b0c1b
   17d88:	0304f043 	.word	0x0304f043
   17d8c:	e7bf6023 	.word	0xe7bf6023
   17d90:	f4236823 	.word	0xf4236823
   17d94:	60231300 	.word	0x60231300
   17d98:	bf00e7cb 	.word	0xbf00e7cb
   17d9c:	20025c2e 	.word	0x20025c2e
   17da0:	20020404 	.word	0x20020404
   17da4:	2002045c 	.word	0x2002045c
   17da8:	20020460 	.word	0x20020460

00017dac <gnss_interface_write>:
   17dac:	43f0e92d 	.word	0x43f0e92d
   17db0:	b09f4a75 	.word	0xb09f4a75
   17db4:	9d264290 	.word	0x9d264290
   17db8:	80d3f040 	.word	0x80d3f040
   17dbc:	f0002900 	.word	0xf0002900
   17dc0:	2d0080c8 	.word	0x2d0080c8
   17dc4:	80c5f000 	.word	0x80c5f000
   17dc8:	2a029a27 	.word	0x2a029a27
   17dcc:	80c1f040 	.word	0x80c1f040
   17dd0:	68224c6e 	.word	0x68224c6e
   17dd4:	2a02b292 	.word	0x2a02b292
   17dd8:	6822d004 	.word	0x6822d004
   17ddc:	2a04b292 	.word	0x2a04b292
   17de0:	80c5f040 	.word	0x80c5f040
   17de4:	f1000798 	.word	0xf1000798
   17de8:	682080c8 	.word	0x682080c8
   17dec:	3000f410 	.word	0x3000f410
   17df0:	6822d065 	.word	0x6822d065
   17df4:	f422882b 	.word	0xf422882b
   17df8:	60223200 	.word	0x60223200
   17dfc:	3b016822 	.word	0x3b016822
   17e00:	1200f442 	.word	0x1200f442
   17e04:	2b076022 	.word	0x2b076022
   17e08:	80a3f200 	.word	0x80a3f200
   17e0c:	f003e8df 	.word	0xf003e8df
   17e10:	696e7378 	.word	0x696e7378
   17e14:	045f5a64 	.word	0x045f5a64
   17e18:	a9024608 	.word	0xa9024608
   17e1c:	ff1ef7fb 	.word	0xff1ef7fb
   17e20:	46682172 	.word	0x46682172
   17e24:	f960f7f9 	.word	0xf960f7f9
   17e28:	98004605 	.word	0x98004605
   17e2c:	d16c2d00 	.word	0xd16c2d00
   17e30:	d06a2800 	.word	0xd06a2800
   17e34:	0605f241 	.word	0x0605f241
   17e38:	0c49f04f 	.word	0x0c49f04f
   17e3c:	f04f2272 	.word	0xf04f2272
   17e40:	f04f0e76 	.word	0xf04f0e76
   17e44:	f04f0943 	.word	0xf04f0943
   17e48:	4f510854 	.word	0x4f510854
   17e4c:	883ba91e 	.word	0x883ba91e
   17e50:	c00ff880 	.word	0xc00ff880
   17e54:	b29b3301 	.word	0xb29b3301
   17e58:	4c03ea46 	.word	0x4c03ea46
   17e5c:	cd74f841 	.word	0xcd74f841
   17e60:	71857145 	.word	0x71857145
   17e64:	720571c5 	.word	0x720571c5
   17e68:	72857245 	.word	0x72857245
   17e6c:	710272c5 	.word	0x710272c5
   17e70:	900cf880 	.word	0x900cf880
   17e74:	800df880 	.word	0x800df880
   17e78:	e00ef880 	.word	0xe00ef880
   17e7c:	803b6800 	.word	0x803b6800
   17e80:	f9aaf00c 	.word	0xf9aaf00c
   17e84:	46314b43 	.word	0x46314b43
   17e88:	601d9800 	.word	0x601d9800
   17e8c:	f940f7f9 	.word	0xf940f7f9
   17e90:	d1472800 	.word	0xd1472800
   17e94:	02996823 	.word	0x02996823
   17e98:	4e3fd50d 	.word	0x4e3fd50d
   17e9c:	e0014d3a 	.word	0xe0014d3a
   17ea0:	d14f2800 	.word	0xd14f2800
   17ea4:	46284631 	.word	0x46284631
   17ea8:	ffe2f7f7 	.word	0xffe2f7f7
   17eac:	029a6823 	.word	0x029a6823
   17eb0:	2800d4f6 	.word	0x2800d4f6
   17eb4:	6823d146 	.word	0x6823d146
   17eb8:	d53e039b 	.word	0xd53e039b
   17ebc:	b01f2000 	.word	0xb01f2000
   17ec0:	83f0e8bd 	.word	0x83f0e8bd
   17ec4:	a9024608 	.word	0xa9024608
   17ec8:	fe80f7fb 	.word	0xfe80f7fb
   17ecc:	4608e7a8 	.word	0x4608e7a8
   17ed0:	f7fba902 	.word	0xf7fba902
   17ed4:	e7a3fea3 	.word	0xe7a3fea3
   17ed8:	a9024608 	.word	0xa9024608
   17edc:	fe5cf7fb 	.word	0xfe5cf7fb
   17ee0:	4608e79e 	.word	0x4608e79e
   17ee4:	f7fba902 	.word	0xf7fba902
   17ee8:	e799fe33 	.word	0xe799fe33
   17eec:	a9024608 	.word	0xa9024608
   17ef0:	fdfcf7fb 	.word	0xfdfcf7fb
   17ef4:	4608e794 	.word	0x4608e794
   17ef8:	f7fba902 	.word	0xf7fba902
   17efc:	e78ffda5 	.word	0xe78ffda5
   17f00:	a9024608 	.word	0xa9024608
   17f04:	fd7ef7fb 	.word	0xfd7ef7fb
   17f08:	6803e78a 	.word	0x6803e78a
   17f0c:	4618b11b 	.word	0x4618b11b
   17f10:	f91cf7f9 	.word	0xf91cf7f9
   17f14:	f7f99800 	.word	0xf7f99800
   17f18:	2023f911 	.word	0x2023f911
   17f1c:	f838f7f8 	.word	0xf838f7f8
   17f20:	30fff04f 	.word	0x30fff04f
   17f24:	f4236823 	.word	0xf4236823
   17f28:	60231300 	.word	0x60231300
   17f2c:	f4436823 	.word	0xf4436823
   17f30:	60233300 	.word	0x60233300
   17f34:	e8bdb01f 	.word	0xe8bdb01f
   17f38:	200583f0 	.word	0x200583f0
   17f3c:	f4436823 	.word	0xf4436823
   17f40:	60233300 	.word	0x60233300
   17f44:	f824f7f8 	.word	0xf824f7f8
   17f48:	30fff04f 	.word	0x30fff04f
   17f4c:	e8bdb01f 	.word	0xe8bdb01f
   17f50:	201683f0 	.word	0x201683f0
   17f54:	f81cf7f8 	.word	0xf81cf7f8
   17f58:	30fff04f 	.word	0x30fff04f
   17f5c:	e8bdb01f 	.word	0xe8bdb01f
   17f60:	200983f0 	.word	0x200983f0
   17f64:	f814f7f8 	.word	0xf814f7f8
   17f68:	30fff04f 	.word	0x30fff04f
   17f6c:	2039e7a7 	.word	0x2039e7a7
   17f70:	f80ef7f8 	.word	0xf80ef7f8
   17f74:	30fff04f 	.word	0x30fff04f
   17f78:	202de7a1 	.word	0x202de7a1
   17f7c:	f808f7f8 	.word	0xf808f7f8
   17f80:	30fff04f 	.word	0x30fff04f
   17f84:	bf00e79b 	.word	0xbf00e79b
   17f88:	49765443 	.word	0x49765443
   17f8c:	2002045c 	.word	0x2002045c
   17f90:	20025c2e 	.word	0x20025c2e
   17f94:	20020404 	.word	0x20020404
   17f98:	2002a2ec 	.word	0x2002a2ec

00017f9c <gnss_interface_read>:
   17f9c:	4ff0e92d 	.word	0x4ff0e92d
   17fa0:	b0b74c4a 	.word	0xb0b74c4a
   17fa4:	f04042a0 	.word	0xf04042a0
   17fa8:	468881ec 	.word	0x468881ec
   17fac:	f0002900 	.word	0xf0002900
   17fb0:	2ad781e2 	.word	0x2ad781e2
   17fb4:	81dff240 	.word	0x81dff240
   17fb8:	46994d45 	.word	0x46994d45
   17fbc:	b29b682b 	.word	0xb29b682b
   17fc0:	d0042b04 	.word	0xd0042b04
   17fc4:	b29b682b 	.word	0xb29b682b
   17fc8:	f0402b02 	.word	0xf0402b02
   17fcc:	210281e0 	.word	0x210281e0
   17fd0:	240020b6 	.word	0x240020b6
   17fd4:	f10d682b 	.word	0xf10d682b
   17fd8:	f423020e 	.word	0xf423020e
   17fdc:	602b3380 	.word	0x602b3380
   17fe0:	a0f4f8df 	.word	0xa0f4f8df
   17fe4:	4f3bab08 	.word	0x4f3bab08
   17fe8:	90054e38 	.word	0x90054e38
   17fec:	93049107 	.word	0x93049107
   17ff0:	ea099206 	.word	0xea099206
   17ff4:	f8da0b01 	.word	0xf8da0b01
   17ff8:	464a0000 	.word	0x464a0000
   17ffc:	a9046803 	.word	0xa9046803
   18000:	4798689b 	.word	0x4798689b
   18004:	da112800 	.word	0xda112800
   18008:	0f00f1bb 	.word	0x0f00f1bb
   1800c:	682bd138 	.word	0x682bd138
   18010:	d4f003d8 	.word	0xd4f003d8
   18014:	e7eeb10c 	.word	0xe7eeb10c
   18018:	4639b930 	.word	0x4639b930
   1801c:	f7f74630 	.word	0xf7f74630
   18020:	682bff27 	.word	0x682bff27
   18024:	d5f703d9 	.word	0xd5f703d9
   18028:	e7e44604 	.word	0xe7e44604
   1802c:	0202f244 	.word	0x0202f244
   18030:	300ef8bd 	.word	0x300ef8bd
   18034:	d0394293 	.word	0xd0394293
   18038:	0201f244 	.word	0x0201f244
   1803c:	d04d4293 	.word	0xd04d4293
   18040:	0203f244 	.word	0x0203f244
   18044:	f0404293 	.word	0xf0404293
   18048:	22018196 	.word	0x22018196
   1804c:	9b082414 	.word	0x9b082414
   18050:	2000f888 	.word	0x2000f888
   18054:	f8c89a09 	.word	0xf8c89a09
   18058:	f8bd3008 	.word	0xf8bd3008
   1805c:	e9c83028 	.word	0xe9c83028
   18060:	f8da2303 	.word	0xf8da2303
   18064:	68030000 	.word	0x68030000
   18068:	479868db 	.word	0x479868db
   1806c:	dd032800 	.word	0xdd032800
   18070:	f443682b 	.word	0xf443682b
   18074:	602b3380 	.word	0x602b3380
   18078:	b0374620 	.word	0xb0374620
   1807c:	8ff0e8bd 	.word	0x8ff0e8bd
   18080:	46031c42 	.word	0x46031c42
   18084:	b93cd1d2 	.word	0xb93cd1d2
   18088:	2023461c 	.word	0x2023461c
   1808c:	ff80f7f7 	.word	0xff80f7f7
   18090:	b0374620 	.word	0xb0374620
   18094:	8ff0e8bd 	.word	0x8ff0e8bd
   18098:	46209001 	.word	0x46209001
   1809c:	ff78f7f7 	.word	0xff78f7f7
   180a0:	461c9b01 	.word	0x461c9b01
   180a4:	b0374620 	.word	0xb0374620
   180a8:	8ff0e8bd 	.word	0x8ff0e8bd
   180ac:	f00ca808 	.word	0xf00ca808
   180b0:	2302f85f 	.word	0x2302f85f
   180b4:	b2a41c44 	.word	0xb2a41c44
   180b8:	3b08f808 	.word	0x3b08f808
   180bc:	a9084622 	.word	0xa9084622
   180c0:	f00c4640 	.word	0xf00c4640
   180c4:	3408f889 	.word	0x3408f889
   180c8:	bf00e7cb 	.word	0xbf00e7cb
   180cc:	49765443 	.word	0x49765443
   180d0:	2002045c 	.word	0x2002045c
   180d4:	2002a2ec 	.word	0x2002a2ec
   180d8:	20020460 	.word	0x20020460
   180dc:	a8092401 	.word	0xa8092401
   180e0:	e9c8c80f 	.word	0xe9c8c80f
   180e4:	e9c80102 	.word	0xe9c80102
   180e8:	990d2304 	.word	0x990d2304
   180ec:	f8889a0e 	.word	0xf8889a0e
   180f0:	9b0f4000 	.word	0x9b0f4000
   180f4:	1018f8c8 	.word	0x1018f8c8
   180f8:	f8c89910 	.word	0xf8c89910
   180fc:	f8c8201c 	.word	0xf8c8201c
   18100:	f89d3020 	.word	0xf89d3020
   18104:	f8dd205d 	.word	0xf8dd205d
   18108:	f8c8304d 	.word	0xf8c8304d
   1810c:	f8dd1024 	.word	0xf8dd1024
   18110:	f8881051 	.word	0xf8881051
   18114:	f8dd2044 	.word	0xf8dd2044
   18118:	f8c82055 	.word	0xf8c82055
   1811c:	f8dd3034 	.word	0xf8dd3034
   18120:	f8c83059 	.word	0xf8c83059
   18124:	f8bd1038 	.word	0xf8bd1038
   18128:	f8c81044 	.word	0xf8c81044
   1812c:	f8c8203c 	.word	0xf8c8203c
   18130:	f8dd3040 	.word	0xf8dd3040
   18134:	f89d2046 	.word	0xf89d2046
   18138:	f8a8304a 	.word	0xf8a8304a
   1813c:	f8881028 	.word	0xf8881028
   18140:	f8c8302e 	.word	0xf8c8302e
   18144:	f89d202a 	.word	0xf89d202a
   18148:	f89d004b 	.word	0xf89d004b
   1814c:	9b18204c 	.word	0x9b18204c
   18150:	406cf89d 	.word	0x406cf89d
   18154:	2002ea40 	.word	0x2002ea40
   18158:	206bf89d 	.word	0x206bf89d
   1815c:	210ff3c3 	.word	0x210ff3c3
   18160:	ea429b1d 	.word	0xea429b1d
   18164:	f8a82204 	.word	0xf8a82204
   18168:	f8a80030 	.word	0xf8a80030
   1816c:	f8bd104a 	.word	0xf8bd104a
   18170:	f3c3105e 	.word	0xf3c3105e
   18174:	f8a8230f 	.word	0xf8a8230f
   18178:	f89d2056 	.word	0xf89d2056
   1817c:	f8a82060 	.word	0xf8a82060
   18180:	f8dd3062 	.word	0xf8dd3062
   18184:	f8a83063 	.word	0xf8a83063
   18188:	f8881046 	.word	0xf8881046
   1818c:	f8bd2048 	.word	0xf8bd2048
   18190:	f89d2068 	.word	0xf89d2068
   18194:	f8c81067 	.word	0xf8c81067
   18198:	f89d304c 	.word	0xf89d304c
   1819c:	f888306a 	.word	0xf888306a
   181a0:	f8a81050 	.word	0xf8a81050
   181a4:	f8882052 	.word	0xf8882052
   181a8:	f8bd3054 	.word	0xf8bd3054
   181ac:	f8dd3072 	.word	0xf8dd3072
   181b0:	f89d106d 	.word	0xf89d106d
   181b4:	f8c82071 	.word	0xf8c82071
   181b8:	f8881058 	.word	0xf8881058
   181bc:	f89d205c 	.word	0xf89d205c
   181c0:	f8dd1074 	.word	0xf8dd1074
   181c4:	f8a82077 	.word	0xf8a82077
   181c8:	f89d305e 	.word	0xf89d305e
   181cc:	f888307b 	.word	0xf888307b
   181d0:	f8c81060 	.word	0xf8c81060
   181d4:	f8882064 	.word	0xf8882064
   181d8:	f89d3068 	.word	0xf89d3068
   181dc:	f89d3080 	.word	0xf89d3080
   181e0:	9a22107f 	.word	0x9a22107f
   181e4:	0094f89d 	.word	0x0094f89d
   181e8:	2103ea41 	.word	0x2103ea41
   181ec:	3093f89d 	.word	0x3093f89d
   181f0:	220ff3c2 	.word	0x220ff3c2
   181f4:	106ef8a8 	.word	0x106ef8a8
   181f8:	107cf8bd 	.word	0x107cf8bd
   181fc:	2300ea43 	.word	0x2300ea43
   18200:	207af8a8 	.word	0x207af8a8
   18204:	207ef89d 	.word	0x207ef89d
   18208:	3086f8a8 	.word	0x3086f8a8
   1820c:	3081f8dd 	.word	0x3081f8dd
   18210:	106af8a8 	.word	0x106af8a8
   18214:	206cf888 	.word	0x206cf888
   18218:	2086f8bd 	.word	0x2086f8bd
   1821c:	1085f89d 	.word	0x1085f89d
   18220:	3070f8c8 	.word	0x3070f8c8
   18224:	3088f89d 	.word	0x3088f89d
   18228:	1074f888 	.word	0x1074f888
   1822c:	2076f8a8 	.word	0x2076f8a8
   18230:	3078f888 	.word	0x3078f888
   18234:	3090f8bd 	.word	0x3090f8bd
   18238:	108bf8dd 	.word	0x108bf8dd
   1823c:	208ff89d 	.word	0x208ff89d
   18240:	107cf8c8 	.word	0x107cf8c8
   18244:	2080f888 	.word	0x2080f888
   18248:	1092f89d 	.word	0x1092f89d
   1824c:	2095f8dd 	.word	0x2095f8dd
   18250:	3082f8a8 	.word	0x3082f8a8
   18254:	3099f89d 	.word	0x3099f89d
   18258:	1084f888 	.word	0x1084f888
   1825c:	2088f8c8 	.word	0x2088f8c8
   18260:	308cf888 	.word	0x308cf888
   18264:	009af8bd 	.word	0x009af8bd
   18268:	f89d9b27 	.word	0xf89d9b27
   1826c:	f89d40a8 	.word	0xf89d40a8
   18270:	f3c320a7 	.word	0xf3c320a7
   18274:	9b2c210f 	.word	0x9b2c210f
   18278:	2204ea42 	.word	0x2204ea42
   1827c:	1092f8a8 	.word	0x1092f8a8
   18280:	109cf89d 	.word	0x109cf89d
   18284:	209ef8a8 	.word	0x209ef8a8
   18288:	230ff3c3 	.word	0x230ff3c3
   1828c:	209ff8dd 	.word	0x209ff8dd
   18290:	008ef8a8 	.word	0x008ef8a8
   18294:	30aaf8a8 	.word	0x30aaf8a8
   18298:	1090f888 	.word	0x1090f888
   1829c:	30a3f89d 	.word	0x30a3f89d
   182a0:	10a4f8bd 	.word	0x10a4f8bd
   182a4:	2094f8c8 	.word	0x2094f8c8
   182a8:	20a6f89d 	.word	0x20a6f89d
   182ac:	3098f888 	.word	0x3098f888
   182b0:	30a9f8dd 	.word	0x30a9f8dd
   182b4:	109af8a8 	.word	0x109af8a8
   182b8:	209cf888 	.word	0x209cf888
   182bc:	20aef8bd 	.word	0x20aef8bd
   182c0:	10adf89d 	.word	0x10adf89d
   182c4:	30a0f8c8 	.word	0x30a0f8c8
   182c8:	30b0f89d 	.word	0x30b0f89d
   182cc:	10a4f888 	.word	0x10a4f888
   182d0:	20a6f8a8 	.word	0x20a6f8a8
   182d4:	30a8f888 	.word	0x30a8f888
   182d8:	30b8f8bd 	.word	0x30b8f8bd
   182dc:	10b3f8dd 	.word	0x10b3f8dd
   182e0:	20b7f89d 	.word	0x20b7f89d
   182e4:	10acf8c8 	.word	0x10acf8c8
   182e8:	20b0f888 	.word	0x20b0f888
   182ec:	30b2f8a8 	.word	0x30b2f8a8
   182f0:	30bcf89d 	.word	0x30bcf89d
   182f4:	10bbf89d 	.word	0x10bbf89d
   182f8:	00d0f89d 	.word	0x00d0f89d
   182fc:	ea419a31 	.word	0xea419a31
   18300:	f89d2103 	.word	0xf89d2103
   18304:	f89d30cf 	.word	0xf89d30cf
   18308:	ea4340ba 	.word	0xea4340ba
   1830c:	f3c22300 	.word	0xf3c22300
   18310:	f8a8220f 	.word	0xf8a8220f
   18314:	f8a810b6 	.word	0xf8a810b6
   18318:	f88830ce 	.word	0xf88830ce
   1831c:	f8a840b4 	.word	0xf8a840b4
   18320:	f8bd20c2 	.word	0xf8bd20c2
   18324:	f89d20c2 	.word	0xf89d20c2
   18328:	f89d10c1 	.word	0xf89d10c1
   1832c:	f8dd30c4 	.word	0xf8dd30c4
   18330:	f88800bd 	.word	0xf88800bd
   18334:	f8a810bc 	.word	0xf8a810bc
   18338:	f8c820be 	.word	0xf8c820be
   1833c:	f88800b8 	.word	0xf88800b8
   18340:	f8bd30c0 	.word	0xf8bd30c0
   18344:	f8dd30cc 	.word	0xf8dd30cc
   18348:	f89d10c7 	.word	0xf89d10c7
   1834c:	f8c820cb 	.word	0xf8c820cb
   18350:	f88810c4 	.word	0xf88810c4
   18354:	f89d20c8 	.word	0xf89d20c8
   18358:	f8dd10ce 	.word	0xf8dd10ce
   1835c:	f8a820d1 	.word	0xf8a820d1
   18360:	f89d30ca 	.word	0xf89d30ca
   18364:	f88830d5 	.word	0xf88830d5
   18368:	f8c810cc 	.word	0xf8c810cc
   1836c:	f88820d0 	.word	0xf88820d0
   18370:	24d830d4 	.word	0x24d830d4
   18374:	2016e675 	.word	0x2016e675
   18378:	fe0af7f7 	.word	0xfe0af7f7
   1837c:	34fff04f 	.word	0x34fff04f
   18380:	2009e67a 	.word	0x2009e67a
   18384:	fe04f7f7 	.word	0xfe04f7f7
   18388:	34fff04f 	.word	0x34fff04f
   1838c:	2039e674 	.word	0x2039e674
   18390:	fdfef7f7 	.word	0xfdfef7f7
   18394:	34fff04f 	.word	0x34fff04f
   18398:	bf00e66e 	.word	0xbf00e66e

0001839c <gnss_interface_setopt>:
   1839c:	47f0e92d 	.word	0x47f0e92d
   183a0:	1402f241 	.word	0x1402f241
   183a4:	b0864222 	.word	0xb0864222
   183a8:	d0044d9b 	.word	0xd0044d9b
   183ac:	b2a4682c 	.word	0xb2a4682c
   183b0:	f0402c02 	.word	0xf0402c02
   183b4:	682c8104 	.word	0x682c8104
   183b8:	f1000264 	.word	0xf1000264
   183bc:	f5b18127 	.word	0xf5b18127
   183c0:	f0407f01 	.word	0xf0407f01
   183c4:	4995811d 	.word	0x4995811d
   183c8:	f0404288 	.word	0xf0404288
   183cc:	3a018113 	.word	0x3a018113
   183d0:	f2002a08 	.word	0xf2002a08
   183d4:	e8df80ec 	.word	0xe8df80ec
   183d8:	0075f012 	.word	0x0075f012
   183dc:	00c200d8 	.word	0x00c200d8
   183e0:	008100cc 	.word	0x008100cc
   183e4:	0098008c 	.word	0x0098008c
   183e8:	000900af 	.word	0x000900af
   183ec:	2a019a0e 	.word	0x2a019a0e
   183f0:	80ddf040 	.word	0x80ddf040
   183f4:	1603f241 	.word	0x1603f241
   183f8:	46372240 	.word	0x46372240
   183fc:	9202781b 	.word	0x9202781b
   18400:	3015f88d 	.word	0x3015f88d
   18404:	2112682b 	.word	0x2112682b
   18408:	0380f443 	.word	0x0380f443
   1840c:	602b4668 	.word	0x602b4668
   18410:	fe6af7f8 	.word	0xfe6af7f8
   18414:	98004604 	.word	0x98004604
   18418:	f0402c00 	.word	0xf0402c00
   1841c:	280080d6 	.word	0x280080d6
   18420:	80d3f000 	.word	0x80d3f000
   18424:	f04f2212 	.word	0xf04f2212
   18428:	f04f0876 	.word	0xf04f0876
   1842c:	f04f0e49 	.word	0xf04f0e49
   18430:	f04f0a43 	.word	0xf04f0a43
   18434:	f8df0954 	.word	0xf8df0954
   18438:	a906c1ec 	.word	0xa906c1ec
   1843c:	3000f8bc 	.word	0x3000f8bc
   18440:	800ef880 	.word	0x800ef880
   18444:	b29b3301 	.word	0xb29b3301
   18448:	4603ea46 	.word	0x4603ea46
   1844c:	6d14f841 	.word	0x6d14f841
   18450:	71847144 	.word	0x71847144
   18454:	720471c4 	.word	0x720471c4
   18458:	72847244 	.word	0x72847244
   1845c:	710272c4 	.word	0x710272c4
   18460:	a00cf880 	.word	0xa00cf880
   18464:	900df880 	.word	0x900df880
   18468:	e00ff880 	.word	0xe00ff880
   1846c:	81b8f8df 	.word	0x81b8f8df
   18470:	f8ac6800 	.word	0xf8ac6800
   18474:	f00b3000 	.word	0xf00b3000
   18478:	4639feaf 	.word	0x4639feaf
   1847c:	f8c89800 	.word	0xf8c89800
   18480:	f7f84000 	.word	0xf7f84000
   18484:	2800fe45 	.word	0x2800fe45
   18488:	80aaf040 	.word	0x80aaf040
   1848c:	4e634f64 	.word	0x4e634f64
   18490:	46304639 	.word	0x46304639
   18494:	fcecf7f7 	.word	0xfcecf7f7
   18498:	f414682c 	.word	0xf414682c
   1849c:	d1f70480 	.word	0xd1f70480
   184a0:	0000f8d8 	.word	0x0000f8d8
   184a4:	f7f8b118 	.word	0xf7f8b118
   184a8:	f8c8fe51 	.word	0xf8c8fe51
   184ac:	682b4000 	.word	0x682b4000
   184b0:	d576021b 	.word	0xd576021b
   184b4:	682b2000 	.word	0x682b2000
   184b8:	0300f423 	.word	0x0300f423
   184bc:	b006602b 	.word	0xb006602b
   184c0:	87f0e8bd 	.word	0x87f0e8bd
   184c4:	2a029a0e 	.word	0x2a029a0e
   184c8:	2208d171 	.word	0x2208d171
   184cc:	1603f241 	.word	0x1603f241
   184d0:	9202881b 	.word	0x9202881b
   184d4:	300ff8ad 	.word	0x300ff8ad
   184d8:	e7934637 	.word	0xe7934637
   184dc:	2a019a0e 	.word	0x2a019a0e
   184e0:	f241d165 	.word	0xf241d165
   184e4:	781b1603 	.word	0x781b1603
   184e8:	f88d9202 	.word	0xf88d9202
   184ec:	4637300c 	.word	0x4637300c
   184f0:	9a0ee788 	.word	0x9a0ee788
   184f4:	d15a2a01 	.word	0xd15a2a01
   184f8:	f2412202 	.word	0xf2412202
   184fc:	781b1603 	.word	0x781b1603
   18500:	f88d9202 	.word	0xf88d9202
   18504:	4637300d 	.word	0x4637300d
   18508:	682ae77c 	.word	0x682ae77c
   1850c:	2a02b292 	.word	0x2a02b292
   18510:	9a0ed155 	.word	0x9a0ed155
   18514:	d14a2a04 	.word	0xd14a2a04
   18518:	f2412101 	.word	0xf2412101
   1851c:	682a0604 	.word	0x682a0604
   18520:	0c136818 	.word	0x0c136818
   18524:	f043041b 	.word	0xf043041b
   18528:	f8cd0303 	.word	0xf8cd0303
   1852c:	602b0009 	.word	0x602b0009
   18530:	1008f88d 	.word	0x1008f88d
   18534:	e7654637 	.word	0xe7654637
   18538:	b29b682b 	.word	0xb29b682b
   1853c:	d13e2b04 	.word	0xd13e2b04
   18540:	f2412300 	.word	0xf2412300
   18544:	f88d0604 	.word	0xf88d0604
   18548:	f88d3008 	.word	0xf88d3008
   1854c:	f88d3009 	.word	0xf88d3009
   18550:	f88d300a 	.word	0xf88d300a
   18554:	f88d300b 	.word	0xf88d300b
   18558:	4637300c 	.word	0x4637300c
   1855c:	9a0ee752 	.word	0x9a0ee752
   18560:	d1242a01 	.word	0xd1242a01
   18564:	2b01781b 	.word	0x2b01781b
   18568:	f241d121 	.word	0xf241d121
   1856c:	46371603 	.word	0x46371603
   18570:	9a0ee748 	.word	0x9a0ee748
   18574:	d11a2a02 	.word	0xd11a2a02
   18578:	f2412220 	.word	0xf2412220
   1857c:	881b1603 	.word	0x881b1603
   18580:	f8ad9202 	.word	0xf8ad9202
   18584:	46373013 	.word	0x46373013
   18588:	9a0ee73c 	.word	0x9a0ee73c
   1858c:	d10e2a02 	.word	0xd10e2a02
   18590:	f2412210 	.word	0xf2412210
   18594:	881b1603 	.word	0x881b1603
   18598:	f8ad9202 	.word	0xf8ad9202
   1859c:	46373011 	.word	0x46373011
   185a0:	200ee730 	.word	0x200ee730
   185a4:	fcf4f7f7 	.word	0xfcf4f7f7
   185a8:	30fff04f 	.word	0x30fff04f
   185ac:	2016e783 	.word	0x2016e783
   185b0:	fceef7f7 	.word	0xfceef7f7
   185b4:	30fff04f 	.word	0x30fff04f
   185b8:	e8bdb006 	.word	0xe8bdb006
   185bc:	200e87f0 	.word	0x200e87f0
   185c0:	fce6f7f7 	.word	0xfce6f7f7
   185c4:	30fff04f 	.word	0x30fff04f
   185c8:	6803e779 	.word	0x6803e779
   185cc:	4618b11b 	.word	0x4618b11b
   185d0:	fdbcf7f8 	.word	0xfdbcf7f8
   185d4:	f7f89800 	.word	0xf7f89800
   185d8:	2023fdb1 	.word	0x2023fdb1
   185dc:	fcd8f7f7 	.word	0xfcd8f7f7
   185e0:	200e682b 	.word	0x200e682b
   185e4:	0380f423 	.word	0x0380f423
   185e8:	f7f7602b 	.word	0xf7f7602b
   185ec:	f04ffcd1 	.word	0xf04ffcd1
   185f0:	e76430ff 	.word	0xe76430ff
   185f4:	f7f72009 	.word	0xf7f72009
   185f8:	f04ffccb 	.word	0xf04ffccb
   185fc:	e75e30ff 	.word	0xe75e30ff
   18600:	f7f7202a 	.word	0xf7f7202a
   18604:	f04ffcc5 	.word	0xf04ffcc5
   18608:	e75830ff 	.word	0xe75830ff
   1860c:	f7f72073 	.word	0xf7f72073
   18610:	f04ffcbf 	.word	0xf04ffcbf
   18614:	e75230ff 	.word	0xe75230ff
   18618:	2002045c 	.word	0x2002045c
   1861c:	49765443 	.word	0x49765443
   18620:	2002a2ec 	.word	0x2002a2ec
   18624:	20025c2e 	.word	0x20025c2e
   18628:	20020404 	.word	0x20020404

0001862c <gnss_interface_getopt>:
   1862c:	4ff0e92d 	.word	0x4ff0e92d
   18630:	b0874c81 	.word	0xb0874c81
   18634:	46986825 	.word	0x46986825
   18638:	2d02b2ad 	.word	0x2d02b2ad
   1863c:	f0409b10 	.word	0xf0409b10
   18640:	682580dc 	.word	0x682580dc
   18644:	f10003ee 	.word	0xf10003ee
   18648:	682580f0 	.word	0x682580f0
   1864c:	f10001ed 	.word	0xf10001ed
   18650:	f5b180e6 	.word	0xf5b180e6
   18654:	f0407f01 	.word	0xf0407f01
   18658:	497880d6 	.word	0x497880d6
   1865c:	f0404288 	.word	0xf0404288
   18660:	f1b880d8 	.word	0xf1b880d8
   18664:	d00b0f00 	.word	0xd00b0f00
   18668:	1e57b153 	.word	0x1e57b153
   1866c:	d8072f05 	.word	0xd8072f05
   18670:	f007e8df 	.word	0xf007e8df
   18674:	0f030f0f 	.word	0x0f030f0f
   18678:	681b0303 	.word	0x681b0303
   1867c:	d00b2b01 	.word	0xd00b2b01
   18680:	f7f72016 	.word	0xf7f72016
   18684:	f04ffc85 	.word	0xf04ffc85
   18688:	462835ff 	.word	0x462835ff
   1868c:	e8bdb007 	.word	0xe8bdb007
   18690:	681b8ff0 	.word	0x681b8ff0
   18694:	d1f32b02 	.word	0xd1f32b02
   18698:	22126823 	.word	0x22126823
   1869c:	7380f043 	.word	0x7380f043
   186a0:	a8012100 	.word	0xa8012100
   186a4:	f00b6023 	.word	0xf00b6023
   186a8:	2112fdc4 	.word	0x2112fdc4
   186ac:	f7f84668 	.word	0xf7f84668
   186b0:	4605fd1b 	.word	0x4605fd1b
   186b4:	2d009800 	.word	0x2d009800
   186b8:	808af040 	.word	0x808af040
   186bc:	f0002800 	.word	0xf0002800
   186c0:	f2418087 	.word	0xf2418087
   186c4:	f04f1602 	.word	0xf04f1602
   186c8:	22120e49 	.word	0x22120e49
   186cc:	0976f04f 	.word	0x0976f04f
   186d0:	0b43f04f 	.word	0x0b43f04f
   186d4:	0a54f04f 	.word	0x0a54f04f
   186d8:	c168f8df 	.word	0xc168f8df
   186dc:	e00ff880 	.word	0xe00ff880
   186e0:	3000f8bc 	.word	0x3000f8bc
   186e4:	900ef880 	.word	0x900ef880
   186e8:	b29b3301 	.word	0xb29b3301
   186ec:	4e03ea46 	.word	0x4e03ea46
   186f0:	e004f8cd 	.word	0xe004f8cd
   186f4:	71857145 	.word	0x71857145
   186f8:	720571c5 	.word	0x720571c5
   186fc:	72857245 	.word	0x72857245
   18700:	a90172c5 	.word	0xa90172c5
   18704:	f8807102 	.word	0xf8807102
   18708:	f880b00c 	.word	0xf880b00c
   1870c:	f8dfa00d 	.word	0xf8dfa00d
   18710:	68009138 	.word	0x68009138
   18714:	3000f8ac 	.word	0x3000f8ac
   18718:	fd5ef00b 	.word	0xfd5ef00b
   1871c:	98004631 	.word	0x98004631
   18720:	5000f8c9 	.word	0x5000f8c9
   18724:	fcf4f7f8 	.word	0xfcf4f7f8
   18728:	d15c2800 	.word	0xd15c2800
   1872c:	4d434e44 	.word	0x4d434e44
   18730:	46284631 	.word	0x46284631
   18734:	fb9cf7f7 	.word	0xfb9cf7f7
   18738:	01db6823 	.word	0x01db6823
   1873c:	f8d9d4f8 	.word	0xf8d9d4f8
   18740:	b1d80000 	.word	0xb1d80000
   18744:	f0156825 	.word	0xf0156825
   18748:	d00f7500 	.word	0xd00f7500
   1874c:	d8372f05 	.word	0xd8372f05
   18750:	f007e8df 	.word	0xf007e8df
   18754:	2b26201a 	.word	0x2b26201a
   18758:	25000331 	.word	0x25000331
   1875c:	f8887b43 	.word	0xf8887b43
   18760:	f7f83000 	.word	0xf7f83000
   18764:	2300fcf3 	.word	0x2300fcf3
   18768:	3000f8c9 	.word	0x3000f8c9
   1876c:	f0236823 	.word	0xf0236823
   18770:	60237300 	.word	0x60237300
   18774:	b0074628 	.word	0xb0074628
   18778:	8ff0e8bd 	.word	0x8ff0e8bd
   1877c:	46056823 	.word	0x46056823
   18780:	7300f023 	.word	0x7300f023
   18784:	e7f56023 	.word	0xe7f56023
   18788:	300ff8b0 	.word	0x300ff8b0
   1878c:	f8a82500 	.word	0xf8a82500
   18790:	e7e63000 	.word	0xe7e63000
   18794:	3011f8b0 	.word	0x3011f8b0
   18798:	f8a82500 	.word	0xf8a82500
   1879c:	e7e03000 	.word	0xe7e03000
   187a0:	25007b83 	.word	0x25007b83
   187a4:	3000f888 	.word	0x3000f888
   187a8:	f8b0e7db 	.word	0xf8b0e7db
   187ac:	25003013 	.word	0x25003013
   187b0:	3000f8a8 	.word	0x3000f8a8
   187b4:	7b03e7d5 	.word	0x7b03e7d5
   187b8:	f8882500 	.word	0xf8882500
   187bc:	e7d03000 	.word	0xe7d03000
   187c0:	f7f72016 	.word	0xf7f72016
   187c4:	f04ffbe5 	.word	0xf04ffbe5
   187c8:	f8d935ff 	.word	0xf8d935ff
   187cc:	e7c80000 	.word	0xe7c80000
   187d0:	b11b6803 	.word	0xb11b6803
   187d4:	f7f84618 	.word	0xf7f84618
   187d8:	9800fcb9 	.word	0x9800fcb9
   187dc:	fcaef7f8 	.word	0xfcaef7f8
   187e0:	f7f72023 	.word	0xf7f72023
   187e4:	6823fbd5 	.word	0x6823fbd5
   187e8:	f023200e 	.word	0xf023200e
   187ec:	60237380 	.word	0x60237380
   187f0:	35fff04f 	.word	0x35fff04f
   187f4:	fbccf7f7 	.word	0xfbccf7f7
   187f8:	200ee747 	.word	0x200ee747
   187fc:	fbc8f7f7 	.word	0xfbc8f7f7
   18800:	35fff04f 	.word	0x35fff04f
   18804:	202ae741 	.word	0x202ae741
   18808:	fbc2f7f7 	.word	0xfbc2f7f7
   1880c:	35fff04f 	.word	0x35fff04f
   18810:	2009e73b 	.word	0x2009e73b
   18814:	fbbcf7f7 	.word	0xfbbcf7f7
   18818:	35fff04f 	.word	0x35fff04f
   1881c:	2073e735 	.word	0x2073e735
   18820:	fbb6f7f7 	.word	0xfbb6f7f7
   18824:	35fff04f 	.word	0x35fff04f
   18828:	2005e72f 	.word	0x2005e72f
   1882c:	fbb0f7f7 	.word	0xfbb0f7f7
   18830:	35fff04f 	.word	0x35fff04f
   18834:	bf00e729 	.word	0xbf00e729
   18838:	2002045c 	.word	0x2002045c
   1883c:	49765443 	.word	0x49765443
   18840:	2002a2ec 	.word	0x2002a2ec
   18844:	20025c2e 	.word	0x20025c2e
   18848:	20020404 	.word	0x20020404

0001884c <gnss_interface_init>:
   1884c:	b5382100 	.word	0xb5382100
   18850:	4d0a4c09 	.word	0x4d0a4c09
   18854:	480a6822 	.word	0x480a6822
   18858:	402a4b0a 	.word	0x402a4b0a
   1885c:	80016022 	.word	0x80016022
   18860:	f7f86019 	.word	0xf7f86019
   18864:	b928fc3b 	.word	0xb928fc3b
   18868:	402b6823 	.word	0x402b6823
   1886c:	0301f043 	.word	0x0301f043
   18870:	bd386023 	.word	0xbd386023
   18874:	bd382003 	.word	0xbd382003
   18878:	2002045c 	.word	0x2002045c
   1887c:	ffff0000 	.word	0xffff0000
   18880:	20025c2e 	.word	0x20025c2e
   18884:	20020404 	.word	0x20020404

00018888 <gnss_interface_open>:
   18888:	b5102801 	.word	0xb5102801
   1888c:	f5b2d120 	.word	0xf5b2d120
   18890:	d11d7f01 	.word	0xd11d7f01
   18894:	d11b2902 	.word	0xd11b2902
   18898:	68234c13 	.word	0x68234c13
   1889c:	2b01b29b 	.word	0x2b01b29b
   188a0:	6823d11c 	.word	0x6823d11c
   188a4:	0c1b4608 	.word	0x0c1b4608
   188a8:	f043041b 	.word	0xf043041b
   188ac:	22000302 	.word	0x22000302
   188b0:	6023490e 	.word	0x6023490e
   188b4:	fc14f7fa 	.word	0xfc14f7fa
   188b8:	60104a0d 	.word	0x60104a0d
   188bc:	6823b170 	.word	0x6823b170
   188c0:	f4436802 	.word	0xf4436802
   188c4:	68123300 	.word	0x68123300
   188c8:	47906023 	.word	0x47906023
   188cc:	bd104809 	.word	0xbd104809
   188d0:	f7f72016 	.word	0xf7f72016
   188d4:	f04ffb5d 	.word	0xf04ffb5d
   188d8:	bd1030ff 	.word	0xbd1030ff
   188dc:	f7f7200e 	.word	0xf7f7200e
   188e0:	f04ffb57 	.word	0xf04ffb57
   188e4:	bd1030ff 	.word	0xbd1030ff
   188e8:	2002045c 	.word	0x2002045c
   188ec:	000112fd 	.word	0x000112fd
   188f0:	20020460 	.word	0x20020460
   188f4:	49765443 	.word	0x49765443

000188f8 <gnss_interface_close>:
   188f8:	4b13b530 	.word	0x4b13b530
   188fc:	4298b083 	.word	0x4298b083
   18900:	4c12d11c 	.word	0x4c12d11c
   18904:	b29b6823 	.word	0xb29b6823
   18908:	d00f2b04 	.word	0xd00f2b04
   1890c:	68284d10 	.word	0x68284d10
   18910:	f7fab118 	.word	0xf7fab118
   18914:	2300fc05 	.word	0x2300fc05
   18918:	2000602b 	.word	0x2000602b
   1891c:	0c1b6823 	.word	0x0c1b6823
   18920:	f043041b 	.word	0xf043041b
   18924:	60230301 	.word	0x60230301
   18928:	bd30b003 	.word	0xbd30b003
   1892c:	22082300 	.word	0x22082300
   18930:	f44f9300 	.word	0xf44f9300
   18934:	f7f97101 	.word	0xf7f97101
   18938:	e7e7fb87 	.word	0xe7e7fb87
   1893c:	f7f72009 	.word	0xf7f72009
   18940:	f04ffb27 	.word	0xf04ffb27
   18944:	e7ef30ff 	.word	0xe7ef30ff
   18948:	49765443 	.word	0x49765443
   1894c:	2002045c 	.word	0x2002045c
   18950:	20020460 	.word	0x20020460

00018954 <rpc_dfu_event_handler>:
   18954:	4a08b508 	.word	0x4a08b508
   18958:	881268c1 	.word	0x881268c1
   1895c:	ebb24603 	.word	0xebb24603
   18960:	d0054f11 	.word	0xd0054f11
   18964:	b1106800 	.word	0xb1106800
   18968:	f81ef004 	.word	0xf81ef004
   1896c:	bd082000 	.word	0xbd082000
   18970:	20014a02 	.word	0x20014a02
   18974:	bd086013 	.word	0xbd086013
   18978:	20025c30 	.word	0x20025c30
   1897c:	20020408 	.word	0x20020408

00018980 <mfu_interface_init>:
   18980:	b5102300 	.word	0xb5102300
   18984:	49094808 	.word	0x49094808
   18988:	4c0a4a09 	.word	0x4c0a4a09
   1898c:	600b8003 	.word	0x600b8003
   18990:	60236013 	.word	0x60236013
   18994:	ffd2f003 	.word	0xffd2f003
   18998:	2301b910 	.word	0x2301b910
   1899c:	bd106023 	.word	0xbd106023
   189a0:	30fff04f 	.word	0x30fff04f
   189a4:	bf00bd10 	.word	0xbf00bd10
   189a8:	20025c30 	.word	0x20025c30
   189ac:	20020408 	.word	0x20020408
   189b0:	2002046c 	.word	0x2002046c
   189b4:	20020464 	.word	0x20020464

000189b8 <mfu_interface_open>:
   189b8:	b5082801 	.word	0xb5082801
   189bc:	f240d10b 	.word	0xf240d10b
   189c0:	429a2303 	.word	0x429a2303
   189c4:	4b09d107 	.word	0x4b09d107
   189c8:	2a01681a 	.word	0x2a01681a
   189cc:	2202d109 	.word	0x2202d109
   189d0:	4807601a 	.word	0x4807601a
   189d4:	2016bd08 	.word	0x2016bd08
   189d8:	fadaf7f7 	.word	0xfadaf7f7
   189dc:	30fff04f 	.word	0x30fff04f
   189e0:	f7f7bd08 	.word	0xf7f7bd08
   189e4:	f04ffad5 	.word	0xf04ffad5
   189e8:	bd0830ff 	.word	0xbd0830ff
   189ec:	20020464 	.word	0x20020464
   189f0:	49765432 	.word	0x49765432

000189f4 <mfu_interface_close>:
   189f4:	4c32b5f0 	.word	0x4c32b5f0
   189f8:	6823b083 	.word	0x6823b083
   189fc:	2a011e9a 	.word	0x2a011e9a
   18a00:	2b03d857 	.word	0x2b03d857
   18a04:	2301d004 	.word	0x2301d004
   18a08:	60232000 	.word	0x60232000
   18a0c:	bdf0b003 	.word	0xbdf0b003
   18a10:	46682100 	.word	0x46682100
   18a14:	ff98f003 	.word	0xff98f003
   18a18:	28004603 	.word	0x28004603
   18a1c:	2104d13d 	.word	0x2104d13d
   18a20:	98004e28 	.word	0x98004e28
   18a24:	72018832 	.word	0x72018832
   18a28:	b2923201 	.word	0xb2923201
   18a2c:	f0410411 	.word	0xf0410411
   18a30:	4d250106 	.word	0x4d250106
   18a34:	710360c1 	.word	0x710360c1
   18a38:	71837143 	.word	0x71837143
   18a3c:	724371c3 	.word	0x724371c3
   18a40:	72c37283 	.word	0x72c37283
   18a44:	80322106 	.word	0x80322106
   18a48:	f003602b 	.word	0xf003602b
   18a4c:	b9d8ff91 	.word	0xb9d8ff91
   18a50:	33fff04f 	.word	0x33fff04f
   18a54:	4627ae02 	.word	0x4627ae02
   18a58:	3d04f846 	.word	0x3d04f846
   18a5c:	4631e004 	.word	0x4631e004
   18a60:	f7f74638 	.word	0xf7f74638
   18a64:	b9f0fa05 	.word	0xb9f0fa05
   18a68:	28006828 	.word	0x28006828
   18a6c:	6905d0f7 	.word	0x6905d0f7
   18a70:	ff92f003 	.word	0xff92f003
   18a74:	d0c62d00 	.word	0xd0c62d00
   18a78:	20084b14 	.word	0x20084b14
   18a7c:	f7f7601d 	.word	0xf7f7601d
   18a80:	f04ffa87 	.word	0xf04ffa87
   18a84:	e7c130ff 	.word	0xe7c130ff
   18a88:	68039800 	.word	0x68039800
   18a8c:	4618b11b 	.word	0x4618b11b
   18a90:	ff8af003 	.word	0xff8af003
   18a94:	f0039800 	.word	0xf0039800
   18a98:	200cff7f 	.word	0x200cff7f
   18a9c:	fa78f7f7 	.word	0xfa78f7f7
   18aa0:	30fff04f 	.word	0x30fff04f
   18aa4:	203ce7b2 	.word	0x203ce7b2
   18aa8:	fa72f7f7 	.word	0xfa72f7f7
   18aac:	30fff04f 	.word	0x30fff04f
   18ab0:	2001e7ac 	.word	0x2001e7ac
   18ab4:	fa6cf7f7 	.word	0xfa6cf7f7
   18ab8:	30fff04f 	.word	0x30fff04f
   18abc:	bf00e7a6 	.word	0xbf00e7a6
   18ac0:	20020464 	.word	0x20020464
   18ac4:	20025c30 	.word	0x20025c30
   18ac8:	20020408 	.word	0x20020408
   18acc:	20020468 	.word	0x20020468

00018ad0 <mfu_interface_sendto>:
   18ad0:	47f0e92d 	.word	0x47f0e92d
   18ad4:	46154e5a 	.word	0x46154e5a
   18ad8:	b0826833 	.word	0xb0826833
   18adc:	2a011e9a 	.word	0x2a011e9a
   18ae0:	80a7f200 	.word	0x80a7f200
   18ae4:	2900460f 	.word	0x2900460f
   18ae8:	809df000 	.word	0x809df000
   18aec:	f0002d00 	.word	0xf0002d00
   18af0:	2b02809a 	.word	0x2b02809a
   18af4:	d04e46e8 	.word	0xd04e46e8
   18af8:	46294640 	.word	0x46294640
   18afc:	ff24f003 	.word	0xff24f003
   18b00:	b1404606 	.word	0xb1404606
   18b04:	f7f7200c 	.word	0xf7f7200c
   18b08:	f04ffa43 	.word	0xf04ffa43
   18b0c:	462835ff 	.word	0x462835ff
   18b10:	e8bdb002 	.word	0xe8bdb002
   18b14:	9b0087f0 	.word	0x9b0087f0
   18b18:	68184639 	.word	0x68184639
   18b1c:	f00b462a 	.word	0xf00b462a
   18b20:	2104fb5b 	.word	0x2104fb5b
   18b24:	98004c47 	.word	0x98004c47
   18b28:	60458823 	.word	0x60458823
   18b2c:	b29b3301 	.word	0xb29b3301
   18b30:	8023041a 	.word	0x8023041a
   18b34:	4c44430a 	.word	0x4c44430a
   18b38:	724660c2 	.word	0x724660c2
   18b3c:	72c67286 	.word	0x72c67286
   18b40:	60267201 	.word	0x60267201
   18b44:	ff14f003 	.word	0xff14f003
   18b48:	d1622800 	.word	0xd1622800
   18b4c:	33fff04f 	.word	0x33fff04f
   18b50:	4f3bae02 	.word	0x4f3bae02
   18b54:	3d04f846 	.word	0x3d04f846
   18b58:	4631e004 	.word	0x4631e004
   18b5c:	f7f74638 	.word	0xf7f74638
   18b60:	b978f987 	.word	0xb978f987
   18b64:	28006820 	.word	0x28006820
   18b68:	6904d0f7 	.word	0x6904d0f7
   18b6c:	ff14f003 	.word	0xff14f003
   18b70:	d0cc2c00 	.word	0xd0cc2c00
   18b74:	20084b35 	.word	0x20084b35
   18b78:	f04f601c 	.word	0xf04f601c
   18b7c:	f7f735ff 	.word	0xf7f735ff
   18b80:	e7c4fa07 	.word	0xe7c4fa07
   18b84:	35fff04f 	.word	0x35fff04f
   18b88:	f7f7203c 	.word	0xf7f7203c
   18b8c:	4628fa01 	.word	0x4628fa01
   18b90:	e8bdb002 	.word	0xe8bdb002
   18b94:	464087f0 	.word	0x464087f0
   18b98:	f0032100 	.word	0xf0032100
   18b9c:	4602fed5 	.word	0x4602fed5
   18ba0:	d1af2800 	.word	0xd1af2800
   18ba4:	0c08f04f 	.word	0x0c08f04f
   18ba8:	48294926 	.word	0x48294926
   18bac:	6804880b 	.word	0x6804880b
   18bb0:	98003301 	.word	0x98003301
   18bb4:	800bb29b 	.word	0x800bb29b
   18bb8:	f043041b 	.word	0xf043041b
   18bbc:	61040303 	.word	0x61040303
   18bc0:	60c34c21 	.word	0x60c34c21
   18bc4:	71427102 	.word	0x71427102
   18bc8:	71c27182 	.word	0x71c27182
   18bcc:	72827242 	.word	0x72827242
   18bd0:	f88072c2 	.word	0xf88072c2
   18bd4:	2103c008 	.word	0x2103c008
   18bd8:	f0036022 	.word	0xf0036022
   18bdc:	b9c0fec9 	.word	0xb9c0fec9
   18be0:	33fff04f 	.word	0x33fff04f
   18be4:	0908f10d 	.word	0x0908f10d
   18be8:	3d04f849 	.word	0x3d04f849
   18bec:	e00546b2 	.word	0xe00546b2
   18bf0:	46504649 	.word	0x46504649
   18bf4:	f93cf7f7 	.word	0xf93cf7f7
   18bf8:	d1c32800 	.word	0xd1c32800
   18bfc:	28006820 	.word	0x28006820
   18c00:	6904d0f6 	.word	0x6904d0f6
   18c04:	fec8f003 	.word	0xfec8f003
   18c08:	d1b32c00 	.word	0xd1b32c00
   18c0c:	60332303 	.word	0x60332303
   18c10:	9800e772 	.word	0x9800e772
   18c14:	b11b6803 	.word	0xb11b6803
   18c18:	f0034618 	.word	0xf0034618
   18c1c:	9800fec5 	.word	0x9800fec5
   18c20:	febaf003 	.word	0xfebaf003
   18c24:	2016e76e 	.word	0x2016e76e
   18c28:	f9b2f7f7 	.word	0xf9b2f7f7
   18c2c:	35fff04f 	.word	0x35fff04f
   18c30:	2001e76d 	.word	0x2001e76d
   18c34:	f9acf7f7 	.word	0xf9acf7f7
   18c38:	35fff04f 	.word	0x35fff04f
   18c3c:	bf00e767 	.word	0xbf00e767
   18c40:	20020464 	.word	0x20020464
   18c44:	20025c30 	.word	0x20025c30
   18c48:	20020408 	.word	0x20020408
   18c4c:	20020468 	.word	0x20020468
   18c50:	2002046c 	.word	0x2002046c

00018c54 <mfu_interface_setopt>:
   18c54:	4846b5f0 	.word	0x4846b5f0
   18c58:	6800b083 	.word	0x6800b083
   18c5c:	28013802 	.word	0x28013802
   18c60:	f240d877 	.word	0xf240d877
   18c64:	42812003 	.word	0x42812003
   18c68:	3a04d16d 	.word	0x3a04d16d
   18c6c:	d85c2a03 	.word	0xd85c2a03
   18c70:	f002e8df 	.word	0xf002e8df
   18c74:	514e024b 	.word	0x514e024b
   18c78:	46252407 	.word	0x46252407
   18c7c:	46682100 	.word	0x46682100
   18c80:	fe62f003 	.word	0xfe62f003
   18c84:	28004603 	.word	0x28004603
   18c88:	2704d138 	.word	0x2704d138
   18c8c:	98004e39 	.word	0x98004e39
   18c90:	46298832 	.word	0x46298832
   18c94:	b2923201 	.word	0xb2923201
   18c98:	4502ea44 	.word	0x4502ea44
   18c9c:	60c54c36 	.word	0x60c54c36
   18ca0:	71437103 	.word	0x71437103
   18ca4:	71c37183 	.word	0x71c37183
   18ca8:	72837243 	.word	0x72837243
   18cac:	720772c3 	.word	0x720772c3
   18cb0:	60238032 	.word	0x60238032
   18cb4:	fe5cf003 	.word	0xfe5cf003
   18cb8:	f04fb9b8 	.word	0xf04fb9b8
   18cbc:	ad0233ff 	.word	0xad0233ff
   18cc0:	f8454e2b 	.word	0xf8454e2b
   18cc4:	e0053d04 	.word	0xe0053d04
   18cc8:	46304629 	.word	0x46304629
   18ccc:	f8d0f7f7 	.word	0xf8d0f7f7
   18cd0:	d1312800 	.word	0xd1312800
   18cd4:	28006820 	.word	0x28006820
   18cd8:	6904d0f6 	.word	0x6904d0f6
   18cdc:	fe5cf003 	.word	0xfe5cf003
   18ce0:	d13c2c00 	.word	0xd13c2c00
   18ce4:	b0034620 	.word	0xb0034620
   18ce8:	9800bdf0 	.word	0x9800bdf0
   18cec:	b11b6803 	.word	0xb11b6803
   18cf0:	f0034618 	.word	0xf0034618
   18cf4:	9800fe59 	.word	0x9800fe59
   18cf8:	fe4ef003 	.word	0xfe4ef003
   18cfc:	f7f7200c 	.word	0xf7f7200c
   18d00:	f04ff947 	.word	0xf04ff947
   18d04:	b00330ff 	.word	0xb00330ff
   18d08:	2405bdf0 	.word	0x2405bdf0
   18d0c:	e7b54625 	.word	0xe7b54625
   18d10:	46252408 	.word	0x46252408
   18d14:	b1b3e7b2 	.word	0xb1b3e7b2
   18d18:	2a049a08 	.word	0x2a049a08
   18d1c:	2000d113 	.word	0x2000d113
   18d20:	4b16681a 	.word	0x4b16681a
   18d24:	b003601a 	.word	0xb003601a
   18d28:	202abdf0 	.word	0x202abdf0
   18d2c:	f930f7f7 	.word	0xf930f7f7
   18d30:	30fff04f 	.word	0x30fff04f
   18d34:	bdf0b003 	.word	0xbdf0b003
   18d38:	f7f7203c 	.word	0xf7f7203c
   18d3c:	f04ff929 	.word	0xf04ff929
   18d40:	b00330ff 	.word	0xb00330ff
   18d44:	2016bdf0 	.word	0x2016bdf0
   18d48:	f922f7f7 	.word	0xf922f7f7
   18d4c:	30fff04f 	.word	0x30fff04f
   18d50:	2001e7c9 	.word	0x2001e7c9
   18d54:	f91cf7f7 	.word	0xf91cf7f7
   18d58:	30fff04f 	.word	0x30fff04f
   18d5c:	4b08e7c3 	.word	0x4b08e7c3
   18d60:	601c2008 	.word	0x601c2008
   18d64:	f914f7f7 	.word	0xf914f7f7
   18d68:	30fff04f 	.word	0x30fff04f
   18d6c:	bf00e7bb 	.word	0xbf00e7bb
   18d70:	20020464 	.word	0x20020464
   18d74:	20025c30 	.word	0x20025c30
   18d78:	20020408 	.word	0x20020408
   18d7c:	2002046c 	.word	0x2002046c
   18d80:	20020468 	.word	0x20020468

00018d84 <mfu_interface_getopt>:
   18d84:	2003f240 	.word	0x2003f240
   18d88:	41f0e92d 	.word	0x41f0e92d
   18d8c:	b0824281 	.word	0xb0824281
   18d90:	f0409e08 	.word	0xf0409e08
   18d94:	461d80ae 	.word	0x461d80ae
   18d98:	f0002b00 	.word	0xf0002b00
   18d9c:	2e0080aa 	.word	0x2e0080aa
   18da0:	80a7f000 	.word	0x80a7f000
   18da4:	681b4b5e 	.word	0x681b4b5e
   18da8:	2b013b02 	.word	0x2b013b02
   18dac:	80a7f200 	.word	0x80a7f200
   18db0:	2a133a01 	.word	0x2a133a01
   18db4:	e8dfd879 	.word	0xe8dfd879
   18db8:	5f17f002 	.word	0x5f17f002
   18dbc:	78787878 	.word	0x78787878
   18dc0:	78787872 	.word	0x78787872
   18dc4:	78787878 	.word	0x78787878
   18dc8:	78787878 	.word	0x78787878
   18dcc:	68330a78 	.word	0x68330a78
   18dd0:	f0402b04 	.word	0xf0402b04
   18dd4:	2200808e 	.word	0x2200808e
   18dd8:	4b524610 	.word	0x4b524610
   18ddc:	601a6819 	.word	0x601a6819
   18de0:	b0026029 	.word	0xb0026029
   18de4:	81f0e8bd 	.word	0x81f0e8bd
   18de8:	2b246833 	.word	0x2b246833
   18dec:	8081f040 	.word	0x8081f040
   18df0:	46a02401 	.word	0x46a02401
   18df4:	46682100 	.word	0x46682100
   18df8:	fda6f003 	.word	0xfda6f003
   18dfc:	d1462800 	.word	0xd1462800
   18e00:	9b004949 	.word	0x9b004949
   18e04:	f1b8880a 	.word	0xf1b8880a
   18e08:	f1020f03 	.word	0xf1020f03
   18e0c:	b2920201 	.word	0xb2920201
   18e10:	4402ea44 	.word	0x4402ea44
   18e14:	800a7118 	.word	0x800a7118
   18e18:	715860dc 	.word	0x715860dc
   18e1c:	71d87198 	.word	0x71d87198
   18e20:	2104d04b 	.word	0x2104d04b
   18e24:	4f412200 	.word	0x4f412200
   18e28:	46186099 	.word	0x46186099
   18e2c:	603a4641 	.word	0x603a4641
   18e30:	fd9ef003 	.word	0xfd9ef003
   18e34:	d14d2800 	.word	0xd14d2800
   18e38:	33fff04f 	.word	0x33fff04f
   18e3c:	f844ac02 	.word	0xf844ac02
   18e40:	f8df3d04 	.word	0xf8df3d04
   18e44:	e00580dc 	.word	0xe00580dc
   18e48:	46404621 	.word	0x46404621
   18e4c:	f810f7f7 	.word	0xf810f7f7
   18e50:	d1372800 	.word	0xd1372800
   18e54:	29006839 	.word	0x29006839
   18e58:	690cd0f6 	.word	0x690cd0f6
   18e5c:	d1542c00 	.word	0xd1542c00
   18e60:	31146832 	.word	0x31146832
   18e64:	f00b4628 	.word	0xf00b4628
   18e68:	6838f9b7 	.word	0x6838f9b7
   18e6c:	fd94f003 	.word	0xfd94f003
   18e70:	b0024620 	.word	0xb0024620
   18e74:	81f0e8bd 	.word	0x81f0e8bd
   18e78:	2b046833 	.word	0x2b046833
   18e7c:	2402d139 	.word	0x2402d139
   18e80:	46682100 	.word	0x46682100
   18e84:	f00346a0 	.word	0xf00346a0
   18e88:	2800fd5f 	.word	0x2800fd5f
   18e8c:	200cd0b8 	.word	0x200cd0b8
   18e90:	f87ef7f7 	.word	0xf87ef7f7
   18e94:	30fff04f 	.word	0x30fff04f
   18e98:	e8bdb002 	.word	0xe8bdb002
   18e9c:	683381f0 	.word	0x683381f0
   18ea0:	d1262b04 	.word	0xd1262b04
   18ea4:	46a02409 	.word	0x46a02409
   18ea8:	202ae7a4 	.word	0x202ae7a4
   18eac:	f870f7f7 	.word	0xf870f7f7
   18eb0:	30fff04f 	.word	0x30fff04f
   18eb4:	e8bdb002 	.word	0xe8bdb002
   18eb8:	4a1d81f0 	.word	0x4a1d81f0
   18ebc:	68122108 	.word	0x68122108
   18ec0:	e7af611a 	.word	0xe7af611a
   18ec4:	f7f7203c 	.word	0xf7f7203c
   18ec8:	f04ff863 	.word	0xf04ff863
   18ecc:	b00230ff 	.word	0xb00230ff
   18ed0:	81f0e8bd 	.word	0x81f0e8bd
   18ed4:	68039800 	.word	0x68039800
   18ed8:	4618b11b 	.word	0x4618b11b
   18edc:	fd64f003 	.word	0xfd64f003
   18ee0:	f0039800 	.word	0xf0039800
   18ee4:	200cfd59 	.word	0x200cfd59
   18ee8:	f852f7f7 	.word	0xf852f7f7
   18eec:	30fff04f 	.word	0x30fff04f
   18ef0:	2016e7d2 	.word	0x2016e7d2
   18ef4:	f84cf7f7 	.word	0xf84cf7f7
   18ef8:	30fff04f 	.word	0x30fff04f
   18efc:	2001e771 	.word	0x2001e771
   18f00:	f846f7f7 	.word	0xf846f7f7
   18f04:	30fff04f 	.word	0x30fff04f
   18f08:	4b06e76b 	.word	0x4b06e76b
   18f0c:	601c2008 	.word	0x601c2008
   18f10:	f83ef7f7 	.word	0xf83ef7f7
   18f14:	f0036838 	.word	0xf0036838
   18f18:	f04ffd3f 	.word	0xf04ffd3f
   18f1c:	e76030ff 	.word	0xe76030ff
   18f20:	20020464 	.word	0x20020464
   18f24:	20020468 	.word	0x20020468
   18f28:	20025c30 	.word	0x20025c30
   18f2c:	20020408 	.word	0x20020408
   18f30:	2002046c 	.word	0x2002046c

00018f34 <unimplemented_method>:
   18f34:	b508b40f 	.word	0xb508b40f
   18f38:	f7f7202d 	.word	0xf7f7202d
   18f3c:	e8bdf829 	.word	0xe8bdf829
   18f40:	f04f4008 	.word	0xf04f4008
   18f44:	b00430ff 	.word	0xb00430ff
   18f48:	bf004770 	.word	0xbf004770

00018f4c <bsd_platform_init>:
   18f4c:	b093b5f0 	.word	0xb093b5f0
   18f50:	ff62f003 	.word	0xff62f003
   18f54:	d1522800 	.word	0xd1522800
   18f58:	a801492b 	.word	0xa801492b
   18f5c:	ffd0f003 	.word	0xffd0f003
   18f60:	d14c2800 	.word	0xd14c2800
   18f64:	f8e2f7f7 	.word	0xf8e2f7f7
   18f68:	f814f003 	.word	0xf814f003
   18f6c:	d1462800 	.word	0xd1462800
   18f70:	f44f2320 	.word	0xf44f2320
   18f74:	22084180 	.word	0x22084180
   18f78:	5c40f44f 	.word	0x5c40f44f
   18f7c:	4e244f23 	.word	0x4e244f23
   18f80:	93059303 	.word	0x93059303
   18f84:	4d239307 	.word	0x4d239307
   18f88:	910d9109 	.word	0x910d9109
   18f8c:	49234c22 	.word	0x49234c22
   18f90:	e9cd4b23 	.word	0xe9cd4b23
   18f94:	eb0d0010 	.word	0xeb0d0010
   18f98:	f8cd0002 	.word	0xf8cd0002
   18f9c:	e9cdc02c 	.word	0xe9cdc02c
   18fa0:	9702220e 	.word	0x9702220e
   18fa4:	95069604 	.word	0x95069604
   18fa8:	910a9408 	.word	0x910a9408
   18fac:	f7f8930c 	.word	0xf7f8930c
   18fb0:	b108ff0d 	.word	0xb108ff0d
   18fb4:	bdf0b013 	.word	0xbdf0b013
   18fb8:	fd8af7fc 	.word	0xfd8af7fc
   18fbc:	f7f8b9f8 	.word	0xf7f8b9f8
   18fc0:	b9e0f9fd 	.word	0xb9e0f9fd
   18fc4:	f832f7fd 	.word	0xf832f7fd
   18fc8:	f7fab9c8 	.word	0xf7fab9c8
   18fcc:	b9b0f965 	.word	0xb9b0f965
   18fd0:	fcd6f7ff 	.word	0xfcd6f7ff
   18fd4:	f7f7b998 	.word	0xf7f7b998
   18fd8:	b980fff9 	.word	0xb980fff9
   18fdc:	f8e6f000 	.word	0xf8e6f000
   18fe0:	f005b968 	.word	0xf005b968
   18fe4:	b950f90f 	.word	0xb950f90f
   18fe8:	fc30f7ff 	.word	0xfc30f7ff
   18fec:	f7f8b938 	.word	0xf7f8b938
   18ff0:	3000fbe9 	.word	0x3000fbe9
   18ff4:	2001bf18 	.word	0x2001bf18
   18ff8:	b0134240 	.word	0xb0134240
   18ffc:	f04fbdf0 	.word	0xf04fbdf0
   19000:	b01330ff 	.word	0xb01330ff
   19004:	bf00bdf0 	.word	0xbf00bdf0
   19008:	00025b5c 	.word	0x00025b5c
   1900c:	20010000 	.word	0x20010000
   19010:	20010040 	.word	0x20010040
   19014:	20010020 	.word	0x20010020
   19018:	20017060 	.word	0x20017060
   1901c:	20010060 	.word	0x20010060
   19020:	20013060 	.word	0x20013060

00019024 <bsd_platform_af_method_table_get>:
   19024:	d02a2805 	.word	0xd02a2805
   19028:	d914b508 	.word	0xd914b508
   1902c:	d016280a 	.word	0xd016280a
   19030:	d10b2866 	.word	0xd10b2866
   19034:	2302f240 	.word	0x2302f240
   19038:	d032429a 	.word	0xd032429a
   1903c:	2305f240 	.word	0x2305f240
   19040:	d032429a 	.word	0xd032429a
   19044:	2301f240 	.word	0x2301f240
   19048:	d02c429a 	.word	0xd02c429a
   1904c:	f7f62016 	.word	0xf7f62016
   19050:	2000ff9f 	.word	0x2000ff9f
   19054:	2801bd08 	.word	0x2801bd08
   19058:	2802d016 	.word	0x2802d016
   1905c:	f5a2d1f6 	.word	0xf5a2d1f6
   19060:	2a0a7282 	.word	0x2a0a7282
   19064:	2301d819 	.word	0x2301d819
   19068:	4103f240 	.word	0x4103f240
   1906c:	fa034810 	.word	0xfa034810
   19070:	420af202 	.word	0x420af202
   19074:	0328f100 	.word	0x0328f100
   19078:	4618bf18 	.word	0x4618bf18
   1907c:	2903bd08 	.word	0x2903bd08
   19080:	bf18480c 	.word	0xbf18480c
   19084:	47702000 	.word	0x47702000
   19088:	2303f240 	.word	0x2303f240
   1908c:	d006429a 	.word	0xd006429a
   19090:	7f01f5b2 	.word	0x7f01f5b2
   19094:	4808d1da 	.word	0x4808d1da
   19098:	4805bd08 	.word	0x4805bd08
   1909c:	4807bd08 	.word	0x4807bd08
   190a0:	4807bd08 	.word	0x4807bd08
   190a4:	4807bd08 	.word	0x4807bd08
   190a8:	4807bd08 	.word	0x4807bd08
   190ac:	bf00bd08 	.word	0xbf00bd08
   190b0:	00025a28 	.word	0x00025a28
   190b4:	00025b18 	.word	0x00025b18
   190b8:	00025ac8 	.word	0x00025ac8
   190bc:	00025a78 	.word	0x00025a78
   190c0:	00025aa0 	.word	0x00025aa0
   190c4:	00025a00 	.word	0x00025a00
   190c8:	00025af0 	.word	0x00025af0

000190cc <bsd_platform_fd_method_table_get>:
   190cc:	4605b538 	.word	0x4605b538
   190d0:	fe1af7fc 	.word	0xfe1af7fc
   190d4:	b9504604 	.word	0xb9504604
   190d8:	43ab4b2a 	.word	0x43ab4b2a
   190dc:	4b2ad032 	.word	0x4b2ad032
   190e0:	d04343ab 	.word	0xd04343ab
   190e4:	43ab4b29 	.word	0x43ab4b29
   190e8:	4829d146 	.word	0x4829d146
   190ec:	68c3bd38 	.word	0x68c3bd38
   190f0:	2b056942 	.word	0x2b056942
   190f4:	d911d034 	.word	0xd911d034
   190f8:	d0132b0a 	.word	0xd0132b0a
   190fc:	d12a2b66 	.word	0xd12a2b66
   19100:	2302f240 	.word	0x2302f240
   19104:	d031429a 	.word	0xd031429a
   19108:	2305f240 	.word	0x2305f240
   1910c:	d031429a 	.word	0xd031429a
   19110:	2301f240 	.word	0x2301f240
   19114:	d11e429a 	.word	0xd11e429a
   19118:	bd38481e 	.word	0xbd38481e
   1911c:	d0132b01 	.word	0xd0132b01
   19120:	d1182b02 	.word	0xd1182b02
   19124:	7282f5a2 	.word	0x7282f5a2
   19128:	d8212a0a 	.word	0xd8212a0a
   1912c:	f2402301 	.word	0xf2402301
   19130:	48194103 	.word	0x48194103
   19134:	f202fa03 	.word	0xf202fa03
   19138:	f100420a 	.word	0xf100420a
   1913c:	bf180428 	.word	0xbf180428
   19140:	bd384620 	.word	0xbd384620
   19144:	bd384815 	.word	0xbd384815
   19148:	2303f240 	.word	0x2303f240
   1914c:	d0f9429a 	.word	0xd0f9429a
   19150:	7f01f5b2 	.word	0x7f01f5b2
   19154:	2016d0c9 	.word	0x2016d0c9
   19158:	ff1af7f6 	.word	0xff1af7f6
   1915c:	bd382000 	.word	0xbd382000
   19160:	480f6903 	.word	0x480f6903
   19164:	bf182b03 	.word	0xbf182b03
   19168:	bd382000 	.word	0xbd382000
   1916c:	bd38480d 	.word	0xbd38480d
   19170:	bd384809 	.word	0xbd384809
   19174:	bd38480c 	.word	0xbd38480c
   19178:	f7f62009 	.word	0xf7f62009
   1917c:	4620ff09 	.word	0x4620ff09
   19180:	bf00bd38 	.word	0xbf00bd38
   19184:	49765432 	.word	0x49765432
   19188:	789a0000 	.word	0x789a0000
   1918c:	49765443 	.word	0x49765443
   19190:	00025ac8 	.word	0x00025ac8
   19194:	00025a00 	.word	0x00025a00
   19198:	00025a28 	.word	0x00025a28
   1919c:	00025a78 	.word	0x00025a78
   191a0:	00025b18 	.word	0x00025b18
   191a4:	00025aa0 	.word	0x00025aa0
   191a8:	00025af0 	.word	0x00025af0

000191ac <nrf_inbuilt_key_init>:
   191ac:	b086b570 	.word	0xb086b570
   191b0:	a802491d 	.word	0xa802491d
   191b4:	fea4f003 	.word	0xfea4f003
   191b8:	4601bb00 	.word	0x4601bb00
   191bc:	f2404604 	.word	0xf2404604
   191c0:	20662201 	.word	0x20662201
   191c4:	f8fcf7f8 	.word	0xf8fcf7f8
   191c8:	28004e18 	.word	0x28004e18
   191cc:	60304605 	.word	0x60304605
   191d0:	4817db10 	.word	0x4817db10
   191d4:	ffccf00a 	.word	0xffccf00a
   191d8:	46024623 	.word	0x46024623
   191dc:	46284914 	.word	0x46284914
   191e0:	94009401 	.word	0x94009401
   191e4:	f896f7f8 	.word	0xf896f7f8
   191e8:	48114605 	.word	0x48114605
   191ec:	ffc0f00a 	.word	0xffc0f00a
   191f0:	d00742a8 	.word	0xd00742a8
   191f4:	46202405 	.word	0x46202405
   191f8:	bd70b006 	.word	0xbd70b006
   191fc:	46202469 	.word	0x46202469
   19200:	bd70b006 	.word	0xbd70b006
   19204:	e9cd6830 	.word	0xe9cd6830
   19208:	a9034400 	.word	0xa9034400
   1920c:	220a4623 	.word	0x220a4623
   19210:	f968f7f8 	.word	0xf968f7f8
   19214:	dded2801 	.word	0xdded2801
   19218:	2202a803 	.word	0x2202a803
   1921c:	f00a4905 	.word	0xf00a4905
   19220:	2800ffbc 	.word	0x2800ffbc
   19224:	e7e5d0e7 	.word	0xe7e5d0e7
   19228:	2002a2f4 	.word	0x2002a2f4
   1922c:	2002a2f0 	.word	0x2002a2f0
   19230:	00025b70 	.word	0x00025b70
   19234:	00025750 	.word	0x00025750

00019238 <symbol_0005436>:
   19238:	460a4b02 	.word	0x460a4b02
   1923c:	2100681b 	.word	0x2100681b
   19240:	bf004718 	.word	0xbf004718
   19244:	2002a308 	.word	0x2002a308

00019248 <mpi_mul_hlp>:
   19248:	e92d280f 	.word	0xe92d280f
   1924c:	46864ff0 	.word	0x46864ff0
   19250:	82e0f240 	.word	0x82e0f240
   19254:	0800f04f 	.word	0x0800f04f
   19258:	f1014684 	.word	0xf1014684
   1925c:	f1020440 	.word	0xf1020440
   19260:	f8540040 	.word	0xf8540040
   19264:	f8506c40 	.word	0xf8506c40
   19268:	fba35c40 	.word	0xfba35c40
   1926c:	eb186706 	.word	0xeb186706
   19270:	bf2c0806 	.word	0xbf2c0806
   19274:	0901f04f 	.word	0x0901f04f
   19278:	0900f04f 	.word	0x0900f04f
   1927c:	0508eb15 	.word	0x0508eb15
   19280:	f04f444f 	.word	0xf04f444f
   19284:	bf280900 	.word	0xbf280900
   19288:	0901f04f 	.word	0x0901f04f
   1928c:	5c40f840 	.word	0x5c40f840
   19290:	6c3cf854 	.word	0x6c3cf854
   19294:	fba344b9 	.word	0xfba344b9
   19298:	eb19ab06 	.word	0xeb19ab06
   1929c:	bf2c090a 	.word	0xbf2c090a
   192a0:	0801f04f 	.word	0x0801f04f
   192a4:	0800f04f 	.word	0x0800f04f
   192a8:	6c3cf850 	.word	0x6c3cf850
   192ac:	050beb08 	.word	0x050beb08
   192b0:	0609eb16 	.word	0x0609eb16
   192b4:	0800f04f 	.word	0x0800f04f
   192b8:	f04fbf28 	.word	0xf04fbf28
   192bc:	f8400801 	.word	0xf8400801
   192c0:	f8546c3c 	.word	0xf8546c3c
   192c4:	44a86c38 	.word	0x44a86c38
   192c8:	6706fba3 	.word	0x6706fba3
   192cc:	0806eb18 	.word	0x0806eb18
   192d0:	f04fbf2c 	.word	0xf04fbf2c
   192d4:	f04f0901 	.word	0xf04f0901
   192d8:	f8500900 	.word	0xf8500900
   192dc:	444f5c38 	.word	0x444f5c38
   192e0:	0508eb15 	.word	0x0508eb15
   192e4:	0900f04f 	.word	0x0900f04f
   192e8:	f04fbf28 	.word	0xf04fbf28
   192ec:	f8400901 	.word	0xf8400901
   192f0:	f8545c38 	.word	0xf8545c38
   192f4:	44b96c34 	.word	0x44b96c34
   192f8:	ab06fba3 	.word	0xab06fba3
   192fc:	090aeb19 	.word	0x090aeb19
   19300:	f04fbf2c 	.word	0xf04fbf2c
   19304:	f04f0801 	.word	0xf04f0801
   19308:	f8500800 	.word	0xf8500800
   1930c:	eb086c34 	.word	0xeb086c34
   19310:	eb16050b 	.word	0xeb16050b
   19314:	f04f0609 	.word	0xf04f0609
   19318:	bf280800 	.word	0xbf280800
   1931c:	0801f04f 	.word	0x0801f04f
   19320:	6c34f840 	.word	0x6c34f840
   19324:	6c30f854 	.word	0x6c30f854
   19328:	fba344a8 	.word	0xfba344a8
   1932c:	eb186706 	.word	0xeb186706
   19330:	bf2c0806 	.word	0xbf2c0806
   19334:	0901f04f 	.word	0x0901f04f
   19338:	0900f04f 	.word	0x0900f04f
   1933c:	5c30f850 	.word	0x5c30f850
   19340:	eb15444f 	.word	0xeb15444f
   19344:	f04f0508 	.word	0xf04f0508
   19348:	bf280900 	.word	0xbf280900
   1934c:	0901f04f 	.word	0x0901f04f
   19350:	5c30f840 	.word	0x5c30f840
   19354:	6c2cf854 	.word	0x6c2cf854
   19358:	fba344b9 	.word	0xfba344b9
   1935c:	eb19ab06 	.word	0xeb19ab06
   19360:	bf2c090a 	.word	0xbf2c090a
   19364:	0801f04f 	.word	0x0801f04f
   19368:	0800f04f 	.word	0x0800f04f
   1936c:	6c2cf850 	.word	0x6c2cf850
   19370:	050beb08 	.word	0x050beb08
   19374:	0609eb16 	.word	0x0609eb16
   19378:	0800f04f 	.word	0x0800f04f
   1937c:	f04fbf28 	.word	0xf04fbf28
   19380:	f8400801 	.word	0xf8400801
   19384:	f8546c2c 	.word	0xf8546c2c
   19388:	44a86c28 	.word	0x44a86c28
   1938c:	6706fba3 	.word	0x6706fba3
   19390:	0806eb18 	.word	0x0806eb18
   19394:	f04fbf2c 	.word	0xf04fbf2c
   19398:	f04f0901 	.word	0xf04f0901
   1939c:	f8500900 	.word	0xf8500900
   193a0:	444f5c28 	.word	0x444f5c28
   193a4:	0508eb15 	.word	0x0508eb15
   193a8:	0900f04f 	.word	0x0900f04f
   193ac:	f04fbf28 	.word	0xf04fbf28
   193b0:	f8400901 	.word	0xf8400901
   193b4:	f8545c28 	.word	0xf8545c28
   193b8:	44b96c24 	.word	0x44b96c24
   193bc:	ab06fba3 	.word	0xab06fba3
   193c0:	090aeb19 	.word	0x090aeb19
   193c4:	f04fbf2c 	.word	0xf04fbf2c
   193c8:	f04f0801 	.word	0xf04f0801
   193cc:	f8500800 	.word	0xf8500800
   193d0:	eb086c24 	.word	0xeb086c24
   193d4:	eb16050b 	.word	0xeb16050b
   193d8:	f04f0609 	.word	0xf04f0609
   193dc:	bf280800 	.word	0xbf280800
   193e0:	0801f04f 	.word	0x0801f04f
   193e4:	6c24f840 	.word	0x6c24f840
   193e8:	6c20f854 	.word	0x6c20f854
   193ec:	fba344a8 	.word	0xfba344a8
   193f0:	eb186706 	.word	0xeb186706
   193f4:	bf2c0806 	.word	0xbf2c0806
   193f8:	0901f04f 	.word	0x0901f04f
   193fc:	0900f04f 	.word	0x0900f04f
   19400:	5c20f850 	.word	0x5c20f850
   19404:	eb15444f 	.word	0xeb15444f
   19408:	f04f0508 	.word	0xf04f0508
   1940c:	bf280900 	.word	0xbf280900
   19410:	0901f04f 	.word	0x0901f04f
   19414:	5c20f840 	.word	0x5c20f840
   19418:	6c1cf854 	.word	0x6c1cf854
   1941c:	fba344b9 	.word	0xfba344b9
   19420:	eb19ab06 	.word	0xeb19ab06
   19424:	bf2c090a 	.word	0xbf2c090a
   19428:	0801f04f 	.word	0x0801f04f
   1942c:	0800f04f 	.word	0x0800f04f
   19430:	6c1cf850 	.word	0x6c1cf850
   19434:	050beb08 	.word	0x050beb08
   19438:	0609eb16 	.word	0x0609eb16
   1943c:	0800f04f 	.word	0x0800f04f
   19440:	f04fbf28 	.word	0xf04fbf28
   19444:	f8400801 	.word	0xf8400801
   19448:	f8546c1c 	.word	0xf8546c1c
   1944c:	44a86c18 	.word	0x44a86c18
   19450:	6706fba3 	.word	0x6706fba3
   19454:	0806eb18 	.word	0x0806eb18
   19458:	f04fbf2c 	.word	0xf04fbf2c
   1945c:	f04f0901 	.word	0xf04f0901
   19460:	f8500900 	.word	0xf8500900
   19464:	444f5c18 	.word	0x444f5c18
   19468:	0508eb15 	.word	0x0508eb15
   1946c:	0900f04f 	.word	0x0900f04f
   19470:	f04fbf28 	.word	0xf04fbf28
   19474:	f8400901 	.word	0xf8400901
   19478:	f8545c18 	.word	0xf8545c18
   1947c:	44b96c14 	.word	0x44b96c14
   19480:	ab06fba3 	.word	0xab06fba3
   19484:	090aeb19 	.word	0x090aeb19
   19488:	f04fbf2c 	.word	0xf04fbf2c
   1948c:	f04f0801 	.word	0xf04f0801
   19490:	f8500800 	.word	0xf8500800
   19494:	eb086c14 	.word	0xeb086c14
   19498:	eb16050b 	.word	0xeb16050b
   1949c:	f04f0609 	.word	0xf04f0609
   194a0:	bf280800 	.word	0xbf280800
   194a4:	0801f04f 	.word	0x0801f04f
   194a8:	6c14f840 	.word	0x6c14f840
   194ac:	6c10f854 	.word	0x6c10f854
   194b0:	fba344a8 	.word	0xfba344a8
   194b4:	eb186706 	.word	0xeb186706
   194b8:	bf2c0806 	.word	0xbf2c0806
   194bc:	0901f04f 	.word	0x0901f04f
   194c0:	0900f04f 	.word	0x0900f04f
   194c4:	5c10f850 	.word	0x5c10f850
   194c8:	eb15444f 	.word	0xeb15444f
   194cc:	f04f0508 	.word	0xf04f0508
   194d0:	bf280900 	.word	0xbf280900
   194d4:	0901f04f 	.word	0x0901f04f
   194d8:	5c10f840 	.word	0x5c10f840
   194dc:	6c0cf854 	.word	0x6c0cf854
   194e0:	fba344b9 	.word	0xfba344b9
   194e4:	eb19ab06 	.word	0xeb19ab06
   194e8:	bf2c090a 	.word	0xbf2c090a
   194ec:	0801f04f 	.word	0x0801f04f
   194f0:	0800f04f 	.word	0x0800f04f
   194f4:	6c0cf850 	.word	0x6c0cf850
   194f8:	050beb08 	.word	0x050beb08
   194fc:	0609eb16 	.word	0x0609eb16
   19500:	0800f04f 	.word	0x0800f04f
   19504:	f04fbf28 	.word	0xf04fbf28
   19508:	f8400801 	.word	0xf8400801
   1950c:	f8546c0c 	.word	0xf8546c0c
   19510:	44a86c08 	.word	0x44a86c08
   19514:	6706fba3 	.word	0x6706fba3
   19518:	0806eb18 	.word	0x0806eb18
   1951c:	f04fbf2c 	.word	0xf04fbf2c
   19520:	f04f0901 	.word	0xf04f0901
   19524:	f8500900 	.word	0xf8500900
   19528:	444f5c08 	.word	0x444f5c08
   1952c:	0508eb15 	.word	0x0508eb15
   19530:	0900f04f 	.word	0x0900f04f
   19534:	f04fbf28 	.word	0xf04fbf28
   19538:	f8400901 	.word	0xf8400901
   1953c:	f8545c08 	.word	0xf8545c08
   19540:	44b96c04 	.word	0x44b96c04
   19544:	ab06fba3 	.word	0xab06fba3
   19548:	090aeb19 	.word	0x090aeb19
   1954c:	f04fbf2c 	.word	0xf04fbf2c
   19550:	f04f0801 	.word	0xf04f0801
   19554:	f8500800 	.word	0xf8500800
   19558:	eb086c04 	.word	0xeb086c04
   1955c:	eb16050b 	.word	0xeb16050b
   19560:	f04f0609 	.word	0xf04f0609
   19564:	bf280800 	.word	0xbf280800
   19568:	0801f04f 	.word	0x0801f04f
   1956c:	0c10f1ac 	.word	0x0c10f1ac
   19570:	0f0ff1bc 	.word	0x0f0ff1bc
   19574:	6c04f840 	.word	0x6c04f840
   19578:	f10444a8 	.word	0xf10444a8
   1957c:	f1000440 	.word	0xf1000440
   19580:	f63f0040 	.word	0xf63f0040
   19584:	f1aeae6e 	.word	0xf1aeae6e
   19588:	09000010 	.word	0x09000010
   1958c:	01803001 	.word	0x01803001
   19590:	44024401 	.word	0x44024401
   19594:	000ff00e 	.word	0x000ff00e
   19598:	68172807 	.word	0x68172807
   1959c:	8092f240 	.word	0x8092f240
   195a0:	6856680c 	.word	0x6856680c
   195a4:	9a04fba3 	.word	0x9a04fba3
   195a8:	0809eb18 	.word	0x0809eb18
   195ac:	f04fbf2c 	.word	0xf04fbf2c
   195b0:	f04f0c01 	.word	0xf04f0c01
   195b4:	eb170c00 	.word	0xeb170c00
   195b8:	bf2c0708 	.word	0xbf2c0708
   195bc:	24002401 	.word	0x24002401
   195c0:	684f6017 	.word	0x684f6017
   195c4:	050ceb0a 	.word	0x050ceb0a
   195c8:	8907fba3 	.word	0x8907fba3
   195cc:	eb14442c 	.word	0xeb14442c
   195d0:	bf2c0408 	.word	0xbf2c0408
   195d4:	25002501 	.word	0x25002501
   195d8:	eb0519a6 	.word	0xeb0519a6
   195dc:	f04f0709 	.word	0xf04f0709
   195e0:	bf280500 	.word	0xbf280500
   195e4:	60562501 	.word	0x60562501
   195e8:	443d688e 	.word	0x443d688e
   195ec:	7806fba3 	.word	0x7806fba3
   195f0:	bf2c19ed 	.word	0xbf2c19ed
   195f4:	24002401 	.word	0x24002401
   195f8:	eb086896 	.word	0xeb086896
   195fc:	19ad0704 	.word	0x19ad0704
   19600:	0400f04f 	.word	0x0400f04f
   19604:	2401bf28 	.word	0x2401bf28
   19608:	68ce6095 	.word	0x68ce6095
   1960c:	fba3443c 	.word	0xfba3443c
   19610:	19e47806 	.word	0x19e47806
   19614:	2501bf2c 	.word	0x2501bf2c
   19618:	68d62500 	.word	0x68d62500
   1961c:	0705eb08 	.word	0x0705eb08
   19620:	f04f19a4 	.word	0xf04f19a4
   19624:	bf280500 	.word	0xbf280500
   19628:	60d42501 	.word	0x60d42501
   1962c:	443d690e 	.word	0x443d690e
   19630:	7806fba3 	.word	0x7806fba3
   19634:	bf2c19ed 	.word	0xbf2c19ed
   19638:	24002401 	.word	0x24002401
   1963c:	eb086916 	.word	0xeb086916
   19640:	19ad0704 	.word	0x19ad0704
   19644:	0400f04f 	.word	0x0400f04f
   19648:	2401bf28 	.word	0x2401bf28
   1964c:	694e6115 	.word	0x694e6115
   19650:	fba3443c 	.word	0xfba3443c
   19654:	19e47806 	.word	0x19e47806
   19658:	2501bf2c 	.word	0x2501bf2c
   1965c:	69562500 	.word	0x69562500
   19660:	0705eb08 	.word	0x0705eb08
   19664:	f04f19a4 	.word	0xf04f19a4
   19668:	bf280500 	.word	0xbf280500
   1966c:	61542501 	.word	0x61542501
   19670:	443d698e 	.word	0x443d698e
   19674:	7806fba3 	.word	0x7806fba3
   19678:	bf2c19ed 	.word	0xbf2c19ed
   1967c:	24002401 	.word	0x24002401
   19680:	eb086996 	.word	0xeb086996
   19684:	19ad0704 	.word	0x19ad0704
   19688:	0400f04f 	.word	0x0400f04f
   1968c:	2401bf28 	.word	0x2401bf28
   19690:	69ce6195 	.word	0x69ce6195
   19694:	fba3443c 	.word	0xfba3443c
   19698:	eb149a06 	.word	0xeb149a06
   1969c:	bf2c0409 	.word	0xbf2c0409
   196a0:	0801f04f 	.word	0x0801f04f
   196a4:	0800f04f 	.word	0x0800f04f
   196a8:	eb0869d6 	.word	0xeb0869d6
   196ac:	19a4050a 	.word	0x19a4050a
   196b0:	0800f04f 	.word	0x0800f04f
   196b4:	f04fbf28 	.word	0xf04fbf28
   196b8:	61d40801 	.word	0x61d40801
   196bc:	44a83120 	.word	0x44a83120
   196c0:	32203808 	.word	0x32203808
   196c4:	f0002800 	.word	0xf0002800
   196c8:	680c8097 	.word	0x680c8097
   196cc:	fba36816 	.word	0xfba36816
   196d0:	eb199a04 	.word	0xeb199a04
   196d4:	bf2c0808 	.word	0xbf2c0808
   196d8:	24002401 	.word	0x24002401
   196dc:	0608eb16 	.word	0x0608eb16
   196e0:	0500f04f 	.word	0x0500f04f
   196e4:	2501bf28 	.word	0x2501bf28
   196e8:	28014454 	.word	0x28014454
   196ec:	0804eb05 	.word	0x0804eb05
   196f0:	d07f6016 	.word	0xd07f6016
   196f4:	6856684c 	.word	0x6856684c
   196f8:	9a04fba3 	.word	0x9a04fba3
   196fc:	0808eb19 	.word	0x0808eb19
   19700:	2401bf2c 	.word	0x2401bf2c
   19704:	eb162400 	.word	0xeb162400
   19708:	f04f0608 	.word	0xf04f0608
   1970c:	bf280500 	.word	0xbf280500
   19710:	44542501 	.word	0x44542501
   19714:	eb052802 	.word	0xeb052802
   19718:	60560804 	.word	0x60560804
   1971c:	688cd06a 	.word	0x688cd06a
   19720:	fba36896 	.word	0xfba36896
   19724:	eb199a04 	.word	0xeb199a04
   19728:	bf2c0808 	.word	0xbf2c0808
   1972c:	24002401 	.word	0x24002401
   19730:	0608eb16 	.word	0x0608eb16
   19734:	0500f04f 	.word	0x0500f04f
   19738:	2501bf28 	.word	0x2501bf28
   1973c:	28034454 	.word	0x28034454
   19740:	0804eb05 	.word	0x0804eb05
   19744:	d0556096 	.word	0xd0556096
   19748:	68d668cc 	.word	0x68d668cc
   1974c:	9a04fba3 	.word	0x9a04fba3
   19750:	0808eb19 	.word	0x0808eb19
   19754:	2401bf2c 	.word	0x2401bf2c
   19758:	eb162400 	.word	0xeb162400
   1975c:	f04f0608 	.word	0xf04f0608
   19760:	bf280500 	.word	0xbf280500
   19764:	44542501 	.word	0x44542501
   19768:	eb052804 	.word	0xeb052804
   1976c:	60d60804 	.word	0x60d60804
   19770:	690cd040 	.word	0x690cd040
   19774:	fba36916 	.word	0xfba36916
   19778:	eb199a04 	.word	0xeb199a04
   1977c:	bf2c0408 	.word	0xbf2c0408
   19780:	0801f04f 	.word	0x0801f04f
   19784:	0800f04f 	.word	0x0800f04f
   19788:	eb0a19a6 	.word	0xeb0a19a6
   1978c:	f04f0508 	.word	0xf04f0508
   19790:	bf280800 	.word	0xbf280800
   19794:	0801f04f 	.word	0x0801f04f
   19798:	44a82805 	.word	0x44a82805
   1979c:	d0296116 	.word	0xd0296116
   197a0:	6956694c 	.word	0x6956694c
   197a4:	9a04fba3 	.word	0x9a04fba3
   197a8:	0409eb18 	.word	0x0409eb18
   197ac:	f04fbf2c 	.word	0xf04fbf2c
   197b0:	f04f0801 	.word	0xf04f0801
   197b4:	19a60800 	.word	0x19a60800
   197b8:	0508eb0a 	.word	0x0508eb0a
   197bc:	0800f04f 	.word	0x0800f04f
   197c0:	f04fbf28 	.word	0xf04fbf28
   197c4:	28060801 	.word	0x28060801
   197c8:	615644a8 	.word	0x615644a8
   197cc:	698cd012 	.word	0x698cd012
   197d0:	fba36991 	.word	0xfba36991
   197d4:	eb144504 	.word	0xeb144504
   197d8:	bf2c0808 	.word	0xbf2c0808
   197dc:	23002301 	.word	0x23002301
   197e0:	0108eb11 	.word	0x0108eb11
   197e4:	0400f04f 	.word	0x0400f04f
   197e8:	2401bf28 	.word	0x2401bf28
   197ec:	eb04442b 	.word	0xeb04442b
   197f0:	61910803 	.word	0x61910803
   197f4:	0280eb02 	.word	0x0280eb02
   197f8:	23006815 	.word	0x23006815
   197fc:	0508eb15 	.word	0x0508eb15
   19800:	2301bf28 	.word	0x2301bf28
   19804:	5b04f842 	.word	0x5b04f842
   19808:	0801f04f 	.word	0x0801f04f
   1980c:	d1f32b00 	.word	0xd1f32b00
   19810:	8ff0e8bd 	.word	0x8ff0e8bd
   19814:	0800f04f 	.word	0x0800f04f
   19818:	bf00e6be 	.word	0xbf00e6be

0001981c <symbol_0002616>:
   1981c:	2b006843 	.word	0x2b006843
   19820:	b430d033 	.word	0xb430d033
   19824:	4280f103 	.word	0x4280f103
   19828:	3a016885 	.word	0x3a016885
   1982c:	4022f855 	.word	0x4022f855
   19830:	0282eb05 	.word	0x0282eb05
   19834:	e009b11c 	.word	0xe009b11c
   19838:	4d04f852 	.word	0x4d04f852
   1983c:	3b01b934 	.word	0x3b01b934
   19840:	688bd1fa 	.word	0x688bd1fa
   19844:	b9d06818 	.word	0xb9d06818
   19848:	4770bc30 	.word	0x4770bc30
   1984c:	6812688a 	.word	0x6812688a
   19850:	2b01b192 	.word	0x2b01b192
   19854:	6800d810 	.word	0x6800d810
   19858:	2800680b 	.word	0x2800680b
   1985c:	2b00dd01 	.word	0x2b00dd01
   19860:	2b00db11 	.word	0x2b00db11
   19864:	2800dd01 	.word	0x2800dd01
   19868:	682bdb16 	.word	0x682bdb16
   1986c:	d8eb4293 	.word	0xd8eb4293
   19870:	bc30d306 	.word	0xbc30d306
   19874:	47702000 	.word	0x47702000
   19878:	bc306800 	.word	0xbc306800
   1987c:	68084770 	.word	0x68084770
   19880:	bc304240 	.word	0xbc304240
   19884:	20014770 	.word	0x20014770
   19888:	688be7de 	.word	0x688be7de
   1988c:	b9006818 	.word	0xb9006818
   19890:	68084770 	.word	0x68084770
   19894:	e7fb4240 	.word	0xe7fb4240
   19898:	30fff04f 	.word	0x30fff04f
   1989c:	bf00e7d4 	.word	0xbf00e7d4

000198a0 <symbol_00038d0>:
   198a0:	2300b120 	.word	0x2300b120
   198a4:	e9c02201 	.word	0xe9c02201
   198a8:	60832300 	.word	0x60832300
   198ac:	bf004770 	.word	0xbf004770

000198b0 <symbol_000fb6e>:
   198b0:	b510b1b0 	.word	0xb510b1b0
   198b4:	68804604 	.word	0x68804604
   198b8:	6862b160 	.word	0x6862b160
   198bc:	b13a1e53 	.word	0xb13a1e53
   198c0:	3b012200 	.word	0x3b012200
   198c4:	60021c59 	.word	0x60021c59
   198c8:	0004f100 	.word	0x0004f100
   198cc:	68a0d1f9 	.word	0x68a0d1f9
   198d0:	fc4ef003 	.word	0xfc4ef003
   198d4:	22012300 	.word	0x22012300
   198d8:	2300e9c4 	.word	0x2300e9c4
   198dc:	bd1060a3 	.word	0xbd1060a3
   198e0:	bf004770 	.word	0xbf004770

000198e4 <symbol_0006423>:
   198e4:	6842b570 	.word	0x6842b570
   198e8:	428a4605 	.word	0x428a4605
   198ec:	d807460c 	.word	0xd807460c
   198f0:	7310f242 	.word	0x7310f242
   198f4:	d8514299 	.word	0xd8514299
   198f8:	d335428a 	.word	0xd335428a
   198fc:	bd702000 	.word	0xbd702000
   19900:	d0101e51 	.word	0xd0101e51
   19904:	f8536883 	.word	0xf8536883
   19908:	28000021 	.word	0x28000021
   1990c:	f102d149 	.word	0xf102d149
   19910:	3a014280 	.word	0x3a014280
   19914:	0382eb03 	.word	0x0382eb03
   19918:	f853e003 	.word	0xf853e003
   1991c:	b9180d04 	.word	0xb9180d04
   19920:	1e4a4611 	.word	0x1e4a4611
   19924:	2101d1f9 	.word	0x2101d1f9
   19928:	bf38428c 	.word	0xbf38428c
   1992c:	2104460c 	.word	0x2104460c
   19930:	f0034620 	.word	0xf0034620
   19934:	4606fc09 	.word	0x4606fc09
   19938:	68a9b380 	.word	0x68a9b380
   1993c:	00a2b181 	.word	0x00a2b181
   19940:	fc4af00a 	.word	0xfc4af00a
   19944:	2001e9d5 	.word	0x2001e9d5
   19948:	b13a1e53 	.word	0xb13a1e53
   1994c:	3b012200 	.word	0x3b012200
   19950:	60021c59 	.word	0x60021c59
   19954:	0004f100 	.word	0x0004f100
   19958:	68a8d1f9 	.word	0x68a8d1f9
   1995c:	fc08f003 	.word	0xfc08f003
   19960:	4601e9c5 	.word	0x4601e9c5
   19964:	bd702000 	.word	0xbd702000
   19968:	46202104 	.word	0x46202104
   1996c:	fbecf003 	.word	0xfbecf003
   19970:	b1984606 	.word	0xb1984606
   19974:	290068a9 	.word	0x290068a9
   19978:	686ad0f2 	.word	0x686ad0f2
   1997c:	f00a0092 	.word	0xf00a0092
   19980:	e9d5fc2b 	.word	0xe9d5fc2b
   19984:	1e532001 	.word	0x1e532001
   19988:	d0e72a00 	.word	0xd0e72a00
   1998c:	3b012200 	.word	0x3b012200
   19990:	60021c59 	.word	0x60021c59
   19994:	0004f100 	.word	0x0004f100
   19998:	e7ded1f9 	.word	0xe7ded1f9
   1999c:	000ff06f 	.word	0x000ff06f
   199a0:	4611bd70 	.word	0x4611bd70
   199a4:	bf00e7c0 	.word	0xbf00e7c0

000199a8 <symbol_00084df>:
   199a8:	d0524288 	.word	0xd0524288
   199ac:	688ab5f8 	.word	0x688ab5f8
   199b0:	4605460e 	.word	0x4605460e
   199b4:	d04e2a00 	.word	0xd04e2a00
   199b8:	1e4b6849 	.word	0x1e4b6849
   199bc:	f852d00e 	.word	0xf852d00e
   199c0:	28000023 	.word	0x28000023
   199c4:	f101d13b 	.word	0xf101d13b
   199c8:	39014180 	.word	0x39014180
   199cc:	0281eb02 	.word	0x0281eb02
   199d0:	f852e002 	.word	0xf852e002
   199d4:	bb900d04 	.word	0xbb900d04
   199d8:	d1fa3b01 	.word	0xd1fa3b01
   199dc:	68332401 	.word	0x68332401
   199e0:	686a602b 	.word	0x686a602b
   199e4:	d30c42a2 	.word	0xd30c42a2
   199e8:	009268af 	.word	0x009268af
   199ec:	46382100 	.word	0x46382100
   199f0:	fc1ff00a 	.word	0xfc1ff00a
   199f4:	68b100a2 	.word	0x68b100a2
   199f8:	f00a68a8 	.word	0xf00a68a8
   199fc:	2000fbed 	.word	0x2000fbed
   19a00:	2104bdf8 	.word	0x2104bdf8
   19a04:	f0034620 	.word	0xf0034620
   19a08:	4607fb9f 	.word	0x4607fb9f
   19a0c:	68a9b1f0 	.word	0x68a9b1f0
   19a10:	686ab189 	.word	0x686ab189
   19a14:	f00a0092 	.word	0xf00a0092
   19a18:	e9d5fbdf 	.word	0xe9d5fbdf
   19a1c:	1e532001 	.word	0x1e532001
   19a20:	2200b13a 	.word	0x2200b13a
   19a24:	1c593b01 	.word	0x1c593b01
   19a28:	f1006002 	.word	0xf1006002
   19a2c:	d1f90004 	.word	0xd1f90004
   19a30:	f00368a8 	.word	0xf00368a8
   19a34:	4622fb9d 	.word	0x4622fb9d
   19a38:	4701e9c5 	.word	0x4701e9c5
   19a3c:	f242e7d5 	.word	0xf242e7d5
   19a40:	68317210 	.word	0x68317210
   19a44:	42941c5c 	.word	0x42941c5c
   19a48:	d9ca6029 	.word	0xd9ca6029
   19a4c:	000ff06f 	.word	0x000ff06f
   19a50:	2000bdf8 	.word	0x2000bdf8
   19a54:	28004770 	.word	0x28004770
   19a58:	6880d0d1 	.word	0x6880d0d1
   19a5c:	6869b158 	.word	0x6869b158
   19a60:	b1311e4b 	.word	0xb1311e4b
   19a64:	1c5c3b01 	.word	0x1c5c3b01
   19a68:	f1006002 	.word	0xf1006002
   19a6c:	d1f90004 	.word	0xd1f90004
   19a70:	f00368a8 	.word	0xf00368a8
   19a74:	2000fb7d 	.word	0x2000fb7d
   19a78:	e9c52301 	.word	0xe9c52301
   19a7c:	60a83000 	.word	0x60a83000
   19a80:	bf00bdf8 	.word	0xbf00bdf8

00019a84 <symbol_000fa6b>:
   19a84:	684bb5f0 	.word	0x684bb5f0
   19a88:	b085460d 	.word	0xb085460d
   19a8c:	46064614 	.word	0x46064614
   19a90:	b17b6851 	.word	0xb17b6851
   19a94:	f10368a8 	.word	0xf10368a8
   19a98:	3a014280 	.word	0x3a014280
   19a9c:	7022f850 	.word	0x7022f850
   19aa0:	0082eb00 	.word	0x0082eb00
   19aa4:	e04fb127 	.word	0xe04fb127
   19aa8:	2d04f850 	.word	0x2d04f850
   19aac:	d14b2a00 	.word	0xd14b2a00
   19ab0:	d1f93b01 	.word	0xd1f93b01
   19ab4:	f101b189 	.word	0xf101b189
   19ab8:	68a74080 	.word	0x68a74080
   19abc:	f8573801 	.word	0xf8573801
   19ac0:	2a002020 	.word	0x2a002020
   19ac4:	8099f040 	.word	0x8099f040
   19ac8:	0080eb07 	.word	0x0080eb07
   19acc:	f850e003 	.word	0xf850e003
   19ad0:	2a002d04 	.word	0x2a002d04
   19ad4:	3901d142 	.word	0x3901d142
   19ad8:	2300d1f9 	.word	0x2300d1f9
   19adc:	42b42201 	.word	0x42b42201
   19ae0:	2301e9cd 	.word	0x2301e9cd
   19ae4:	d07f9303 	.word	0xd07f9303
   19ae8:	d00542b5 	.word	0xd00542b5
   19aec:	46304629 	.word	0x46304629
   19af0:	ff5af7ff 	.word	0xff5af7ff
   19af4:	b9a84607 	.word	0xb9a84607
   19af8:	60332301 	.word	0x60332301
   19afc:	b1806860 	.word	0xb1806860
   19b00:	c008f8d4 	.word	0xc008f8d4
   19b04:	4380f100 	.word	0x4380f100
   19b08:	f85c3b01 	.word	0xf85c3b01
   19b0c:	eb0c2023 	.word	0xeb0c2023
   19b10:	b1220383 	.word	0xb1220383
   19b14:	f853e042 	.word	0xf853e042
   19b18:	2a002d04 	.word	0x2a002d04
   19b1c:	3801d13e 	.word	0x3801d13e
   19b20:	2700d1f9 	.word	0x2700d1f9
   19b24:	b1609803 	.word	0xb1609803
   19b28:	1e539a02 	.word	0x1e539a02
   19b2c:	2200b13a 	.word	0x2200b13a
   19b30:	1c593b01 	.word	0x1c593b01
   19b34:	f1006002 	.word	0xf1006002
   19b38:	d1f90004 	.word	0xd1f90004
   19b3c:	f0039803 	.word	0xf0039803
   19b40:	4638fb17 	.word	0x4638fb17
   19b44:	bdf0b005 	.word	0xbdf0b005
   19b48:	d0c62900 	.word	0xd0c62900
   19b4c:	4080f101 	.word	0x4080f101
   19b50:	380168a7 	.word	0x380168a7
   19b54:	2020f857 	.word	0x2020f857
   19b58:	d0b52a00 	.word	0xd0b52a00
   19b5c:	d8bc428b 	.word	0xd8bc428b
   19b60:	2b00d34b 	.word	0x2b00d34b
   19b64:	68a8d0b9 	.word	0x68a8d0b9
   19b68:	4180f103 	.word	0x4180f103
   19b6c:	f8503901 	.word	0xf8503901
   19b70:	f857c021 	.word	0xf857c021
   19b74:	0089e021 	.word	0x0089e021
   19b78:	440845e6 	.word	0x440845e6
   19b7c:	0201eb07 	.word	0x0201eb07
   19b80:	d83ad3ab 	.word	0xd83ad3ab
   19b84:	e0064601 	.word	0xe0064601
   19b88:	7d04f851 	.word	0x7d04f851
   19b8c:	0d04f852 	.word	0x0d04f852
   19b90:	d8a24287 	.word	0xd8a24287
   19b94:	3b01d331 	.word	0x3b01d331
   19b98:	e79ed1f6 	.word	0xe79ed1f6
   19b9c:	462b2500 	.word	0x462b2500
   19ba0:	f85168b1 	.word	0xf85168b1
   19ba4:	35016b04 	.word	0x35016b04
   19ba8:	f8411af2 	.word	0xf8411af2
   19bac:	f85c2c04 	.word	0xf85c2c04
   19bb0:	460c7b04 	.word	0x460c7b04
   19bb4:	bf2c42ba 	.word	0xbf2c42ba
   19bb8:	0e00f04f 	.word	0x0e00f04f
   19bbc:	0e01f04f 	.word	0x0e01f04f
   19bc0:	429e1bd2 	.word	0x429e1bd2
   19bc4:	4673bf2c 	.word	0x4673bf2c
   19bc8:	0301f10e 	.word	0x0301f10e
   19bcc:	f8414285 	.word	0xf8414285
   19bd0:	d3e62c04 	.word	0xd3e62c04
   19bd4:	e7a4b90b 	.word	0xe7a4b90b
   19bd8:	68222301 	.word	0x68222301
   19bdc:	429a1ad1 	.word	0x429a1ad1
   19be0:	1b04f844 	.word	0x1b04f844
   19be4:	e79cd3f8 	.word	0xe79cd3f8
   19be8:	a8014621 	.word	0xa8014621
   19bec:	fedcf7ff 	.word	0xfedcf7ff
   19bf0:	28004607 	.word	0x28004607
   19bf4:	ac01d196 	.word	0xac01d196
   19bf8:	f06fe776 	.word	0xf06fe776
   19bfc:	46380709 	.word	0x46380709
   19c00:	bdf0b005 	.word	0xbdf0b005

00019c04 <symbol_0006ccd>:
   19c04:	7310f242 	.word	0x7310f242
   19c08:	41f0e92d 	.word	0x41f0e92d
   19c0c:	4256684f 	.word	0x4256684f
   19c10:	429f4316 	.word	0x429f4316
   19c14:	16c0f3c6 	.word	0x16c0f3c6
   19c18:	6842d84f 	.word	0x6842d84f
   19c1c:	42974604 	.word	0x42974604
   19c20:	d82c460d 	.word	0xd82c460d
   19c24:	68236829 	.word	0x68236829
   19c28:	f106fb01 	.word	0xf106fb01
   19c2c:	0701f1c6 	.word	0x0701f1c6
   19c30:	1307fb03 	.word	0x1307fb03
   19c34:	686b6023 	.word	0x686b6023
   19c38:	2300b18b 	.word	0x2300b18b
   19c3c:	68aa68a1 	.word	0x68aa68a1
   19c40:	0023f851 	.word	0x0023f851
   19c44:	2023f852 	.word	0x2023f852
   19c48:	f007fb00 	.word	0xf007fb00
   19c4c:	0206fb02 	.word	0x0206fb02
   19c50:	2023f841 	.word	0x2023f841
   19c54:	3301686a 	.word	0x3301686a
   19c58:	d8ef429a 	.word	0xd8ef429a
   19c5c:	42936862 	.word	0x42936862
   19c60:	009ad20a 	.word	0x009ad20a
   19c64:	330168a0 	.word	0x330168a0
   19c68:	fb075881 	.word	0xfb075881
   19c6c:	5081f101 	.word	0x5081f101
   19c70:	32046861 	.word	0x32046861
   19c74:	d8f54299 	.word	0xd8f54299
   19c78:	e8bd2000 	.word	0xe8bd2000
   19c7c:	210481f0 	.word	0x210481f0
   19c80:	f0034638 	.word	0xf0034638
   19c84:	4680fa61 	.word	0x4680fa61
   19c88:	68a1b1b8 	.word	0x68a1b1b8
   19c8c:	6862b189 	.word	0x6862b189
   19c90:	f00a0092 	.word	0xf00a0092
   19c94:	e9d4faa1 	.word	0xe9d4faa1
   19c98:	1e532001 	.word	0x1e532001
   19c9c:	2200b13a 	.word	0x2200b13a
   19ca0:	1c593b01 	.word	0x1c593b01
   19ca4:	f1006002 	.word	0xf1006002
   19ca8:	d1f90004 	.word	0xd1f90004
   19cac:	f00368a0 	.word	0xf00368a0
   19cb0:	463afa5f 	.word	0x463afa5f
   19cb4:	7801e9c4 	.word	0x7801e9c4
   19cb8:	f06fe7b4 	.word	0xf06fe7b4
   19cbc:	e7dc000f 	.word	0xe7dc000f

00019cc0 <symbol_000b345>:
   19cc0:	6845b5f8 	.word	0x6845b5f8
   19cc4:	460e4604 	.word	0x460e4604
   19cc8:	6887b19d 	.word	0x6887b19d
   19ccc:	463800aa 	.word	0x463800aa
   19cd0:	f00a2100 	.word	0xf00a2100
   19cd4:	2e00faae 	.word	0x2e00faae
   19cd8:	2301bfac 	.word	0x2301bfac
   19cdc:	33fff04f 	.word	0x33fff04f
   19ce0:	71e6ea86 	.word	0x71e6ea86
   19ce4:	eba168a2 	.word	0xeba168a2
   19ce8:	601171e6 	.word	0x601171e6
   19cec:	20006023 	.word	0x20006023
   19cf0:	2104bdf8 	.word	0x2104bdf8
   19cf4:	f0032001 	.word	0xf0032001
   19cf8:	4607fa27 	.word	0x4607fa27
   19cfc:	68a1b1b8 	.word	0x68a1b1b8
   19d00:	6862b181 	.word	0x6862b181
   19d04:	f00a0092 	.word	0xf00a0092
   19d08:	e9d4fa67 	.word	0xe9d4fa67
   19d0c:	1e532001 	.word	0x1e532001
   19d10:	3b01b132 	.word	0x3b01b132
   19d14:	60051c5a 	.word	0x60051c5a
   19d18:	0004f100 	.word	0x0004f100
   19d1c:	68a0d1f9 	.word	0x68a0d1f9
   19d20:	fa26f003 	.word	0xfa26f003
   19d24:	22042301 	.word	0x22042301
   19d28:	3701e9c4 	.word	0x3701e9c4
   19d2c:	f06fe7cf 	.word	0xf06fe7cf
   19d30:	bdf8000f 	.word	0xbdf8000f

00019d34 <symbol_0007f0f>:
   19d34:	ebb16843 	.word	0xebb16843
   19d38:	d2091f43 	.word	0xd2091f43
   19d3c:	094a6883 	.word	0x094a6883
   19d40:	0022f853 	.word	0x0022f853
   19d44:	011ff001 	.word	0x011ff001
   19d48:	f00040c8 	.word	0xf00040c8
   19d4c:	47700001 	.word	0x47700001
   19d50:	47702000 	.word	0x47702000

00019d54 <symbol_00030c0>:
   19d54:	b3136843 	.word	0xb3136843
   19d58:	6882b410 	.word	0x6882b410
   19d5c:	d0241e58 	.word	0xd0241e58
   19d60:	1020f852 	.word	0x1020f852
   19d64:	f103b9e9 	.word	0xf103b9e9
   19d68:	3b014380 	.word	0x3b014380
   19d6c:	0383eb02 	.word	0x0383eb02
   19d70:	f853e002 	.word	0xf853e002
   19d74:	b9a11d04 	.word	0xb9a11d04
   19d78:	d1fa3801 	.word	0xd1fa3801
   19d7c:	68112420 	.word	0x68112420
   19d80:	f04f2200 	.word	0xf04f2200
   19d84:	e0024300 	.word	0xe0024300
   19d88:	2a203201 	.word	0x2a203201
   19d8c:	420bd004 	.word	0x420bd004
   19d90:	0353ea4f 	.word	0x0353ea4f
   19d94:	1aa0d0f8 	.word	0x1aa0d0f8
   19d98:	4b04f85d 	.word	0x4b04f85d
   19d9c:	46184770 	.word	0x46184770
   19da0:	01404770 	.word	0x01404770
   19da4:	0420f100 	.word	0x0420f100
   19da8:	6811e7ea 	.word	0x6811e7ea
   19dac:	e7e72420 	.word	0xe7e72420

00019db0 <symbol_000b7da>:
   19db0:	b3236843 	.word	0xb3236843
   19db4:	6882b410 	.word	0x6882b410
   19db8:	d0261e58 	.word	0xd0261e58
   19dbc:	1020f852 	.word	0x1020f852
   19dc0:	f103b9f9 	.word	0xf103b9f9
   19dc4:	3b014380 	.word	0x3b014380
   19dc8:	0383eb02 	.word	0x0383eb02
   19dcc:	f853e002 	.word	0xf853e002
   19dd0:	b9b11d04 	.word	0xb9b11d04
   19dd4:	d1fa3801 	.word	0xd1fa3801
   19dd8:	68112420 	.word	0x68112420
   19ddc:	f04f2200 	.word	0xf04f2200
   19de0:	e0024300 	.word	0xe0024300
   19de4:	2a203201 	.word	0x2a203201
   19de8:	420bd004 	.word	0x420bd004
   19dec:	0353ea4f 	.word	0x0353ea4f
   19df0:	1aa0d0f8 	.word	0x1aa0d0f8
   19df4:	08c03007 	.word	0x08c03007
   19df8:	4b04f85d 	.word	0x4b04f85d
   19dfc:	46184770 	.word	0x46184770
   19e00:	01404770 	.word	0x01404770
   19e04:	0420f100 	.word	0x0420f100
   19e08:	6811e7e8 	.word	0x6811e7e8
   19e0c:	e7e52420 	.word	0xe7e52420

00019e10 <symbol_000eaf4>:
   19e10:	43f8e92d 	.word	0x43f8e92d
   19e14:	460f4605 	.word	0x460f4605
   19e18:	2a004616 	.word	0x2a004616
   19e1c:	780cd07e 	.word	0x780cd07e
   19e20:	b124460b 	.word	0xb124460b
   19e24:	f813e07e 	.word	0xf813e07e
   19e28:	2a002f01 	.word	0x2a002f01
   19e2c:	3401d146 	.word	0x3401d146
   19e30:	d1f842a6 	.word	0xd1f842a6
   19e34:	8004f8d5 	.word	0x8004f8d5
   19e38:	0f00f1b8 	.word	0x0f00f1b8
   19e3c:	2104d169 	.word	0x2104d169
   19e40:	f0032001 	.word	0xf0032001
   19e44:	4681f981 	.word	0x4681f981
   19e48:	d06d2800 	.word	0xd06d2800
   19e4c:	b18968a9 	.word	0xb18968a9
   19e50:	0092686a 	.word	0x0092686a
   19e54:	f9c0f00a 	.word	0xf9c0f00a
   19e58:	2001e9d5 	.word	0x2001e9d5
   19e5c:	b13a1e53 	.word	0xb13a1e53
   19e60:	3b014642 	.word	0x3b014642
   19e64:	60021c59 	.word	0x60021c59
   19e68:	0004f100 	.word	0x0004f100
   19e6c:	68a8d1f9 	.word	0x68a8d1f9
   19e70:	f97ef003 	.word	0xf97ef003
   19e74:	22042301 	.word	0x22042301
   19e78:	3901e9c5 	.word	0x3901e9c5
   19e7c:	46482100 	.word	0x46482100
   19e80:	f9d7f00a 	.word	0xf9d7f00a
   19e84:	22012300 	.word	0x22012300
   19e88:	42a668a9 	.word	0x42a668a9
   19e8c:	602a600b 	.word	0x602a600b
   19e90:	eb07d911 	.word	0xeb07d911
   19e94:	1b340c06 	.word	0x1b340c06
   19e98:	f02368ae 	.word	0xf02368ae
   19e9c:	00df0103 	.word	0x00df0103
   19ea0:	0d01f81c 	.word	0x0d01f81c
   19ea4:	f0075872 	.word	0xf0075872
   19ea8:	40b80718 	.word	0x40b80718
   19eac:	43023301 	.word	0x43023301
   19eb0:	507242a3 	.word	0x507242a3
   19eb4:	2000d1f0 	.word	0x2000d1f0
   19eb8:	83f8e8bd 	.word	0x83f8e8bd
   19ebc:	f0121b32 	.word	0xf0121b32
   19ec0:	bf180803 	.word	0xbf180803
   19ec4:	0801f04f 	.word	0x0801f04f
   19ec8:	7310f242 	.word	0x7310f242
   19ecc:	0892eb08 	.word	0x0892eb08
   19ed0:	d8294598 	.word	0xd8294598
   19ed4:	4598686b 	.word	0x4598686b
   19ed8:	2104d929 	.word	0x2104d929
   19edc:	f0034640 	.word	0xf0034640
   19ee0:	4681f933 	.word	0x4681f933
   19ee4:	68a9b300 	.word	0x68a9b300
   19ee8:	686ab189 	.word	0x686ab189
   19eec:	f00a0092 	.word	0xf00a0092
   19ef0:	e9d5f973 	.word	0xe9d5f973
   19ef4:	1e532001 	.word	0x1e532001
   19ef8:	2200b13a 	.word	0x2200b13a
   19efc:	1c593b01 	.word	0x1c593b01
   19f00:	f1006002 	.word	0xf1006002
   19f04:	d1f90004 	.word	0xd1f90004
   19f08:	f00368a8 	.word	0xf00368a8
   19f0c:	e9c5f931 	.word	0xe9c5f931
   19f10:	ea4f8901 	.word	0xea4f8901
   19f14:	f8d50288 	.word	0xf8d50288
   19f18:	e7af9008 	.word	0xe7af9008
   19f1c:	8004f8d0 	.word	0x8004f8d0
   19f20:	e7894614 	.word	0xe7894614
   19f24:	e7ca2400 	.word	0xe7ca2400
   19f28:	000ff06f 	.word	0x000ff06f
   19f2c:	4698e7c4 	.word	0x4698e7c4
   19f30:	bf00e782 	.word	0xbf00e782

00019f34 <symbol_000116e>:
   19f34:	41f0e92d 	.word	0x41f0e92d
   19f38:	46886844 	.word	0x46886844
   19f3c:	d03e2c00 	.word	0xd03e2c00
   19f40:	1e624615 	.word	0x1e624615
   19f44:	68804607 	.word	0x68804607
   19f48:	f850d040 	.word	0xf850d040
   19f4c:	bb991022 	.word	0xbb991022
   19f50:	4380f104 	.word	0x4380f104
   19f54:	eb003b01 	.word	0xeb003b01
   19f58:	e0020383 	.word	0xe0020383
   19f5c:	1d04f853 	.word	0x1d04f853
   19f60:	3a01bb51 	.word	0x3a01bb51
   19f64:	2627d1fa 	.word	0x2627d1fa
   19f68:	22006801 	.word	0x22006801
   19f6c:	4300f04f 	.word	0x4300f04f
   19f70:	3201e002 	.word	0x3201e002
   19f74:	d0032a20 	.word	0xd0032a20
   19f78:	ea4f420b 	.word	0xea4f420b
   19f7c:	d0f80353 	.word	0xd0f80353
   19f80:	08f61ab6 	.word	0x08f61ab6
   19f84:	d32442b5 	.word	0xd32442b5
   19f88:	2100462a 	.word	0x2100462a
   19f8c:	f00a4640 	.word	0xf00a4640
   19f90:	b176f950 	.word	0xb176f950
   19f94:	44a82300 	.word	0x44a82300
   19f98:	f02368b9 	.word	0xf02368b9
   19f9c:	588c0203 	.word	0x588c0203
   19fa0:	f00500dd 	.word	0xf00500dd
   19fa4:	33010518 	.word	0x33010518
   19fa8:	42b340ec 	.word	0x42b340ec
   19fac:	4d01f808 	.word	0x4d01f808
   19fb0:	2000d1f2 	.word	0x2000d1f2
   19fb4:	81f0e8bd 	.word	0x81f0e8bd
   19fb8:	36270156 	.word	0x36270156
   19fbc:	4608e7d5 	.word	0x4608e7d5
   19fc0:	f00a4621 	.word	0xf00a4621
   19fc4:	4620f936 	.word	0x4620f936
   19fc8:	81f0e8bd 	.word	0x81f0e8bd
   19fcc:	26276801 	.word	0x26276801
   19fd0:	f06fe7cb 	.word	0xf06fe7cb
   19fd4:	e7ed0007 	.word	0xe7ed0007

00019fd8 <symbol_0004fb7>:
   19fd8:	41f0e92d 	.word	0x41f0e92d
   19fdc:	46046843 	.word	0x46046843
   19fe0:	f001094d 	.word	0xf001094d
   19fe4:	b343061f 	.word	0xb343061f
   19fe8:	f8d01e5a 	.word	0xf8d01e5a
   19fec:	f000e008 	.word	0xf000e008
   19ff0:	f85e8099 	.word	0xf85e8099
   19ff4:	f1bcc022 	.word	0xf1bcc022
   19ff8:	f0400f00 	.word	0xf0400f00
   19ffc:	f103809c 	.word	0xf103809c
   1a000:	38014080 	.word	0x38014080
   1a004:	0080eb0e 	.word	0x0080eb0e
   1a008:	f850e003 	.word	0xf850e003
   1a00c:	2f007d04 	.word	0x2f007d04
   1a010:	3a01d15e 	.word	0x3a01d15e
   1a014:	f04fd1f9 	.word	0xf04fd1f9
   1a018:	f8de0820 	.word	0xf8de0820
   1a01c:	20007000 	.word	0x20007000
   1a020:	4200f04f 	.word	0x4200f04f
   1a024:	3001e002 	.word	0x3001e002
   1a028:	d0052820 	.word	0xd0052820
   1a02c:	ea4f423a 	.word	0xea4f423a
   1a030:	d0f80252 	.word	0xd0f80252
   1a034:	0c00eba8 	.word	0x0c00eba8
   1a038:	ebb14461 	.word	0xebb14461
   1a03c:	d90b1f43 	.word	0xd90b1f43
   1a040:	021ff011 	.word	0x021ff011
   1a044:	2201bf18 	.word	0x2201bf18
   1a048:	7010f242 	.word	0x7010f242
   1a04c:	1751eb02 	.word	0x1751eb02
   1a050:	d86d4287 	.word	0xd86d4287
   1a054:	d840429f 	.word	0xd840429f
   1a058:	429db1f5 	.word	0x429db1f5
   1a05c:	f06fd25d 	.word	0xf06fd25d
   1a060:	1b7f4740 	.word	0x1b7f4740
   1a064:	ebc719da 	.word	0xebc719da
   1a068:	00927787 	.word	0x00927787
   1a06c:	68a000bf 	.word	0x68a000bf
   1a070:	19c13b01 	.word	0x19c13b01
   1a074:	44115880 	.word	0x44115880
   1a078:	f841429d 	.word	0xf841429d
   1a07c:	f1a20c04 	.word	0xf1a20c04
   1a080:	d1f40204 	.word	0xd1f40204
   1a084:	f1032100 	.word	0xf1032100
   1a088:	3b014380 	.word	0x3b014380
   1a08c:	68a2009b 	.word	0x68a2009b
   1a090:	3b0450d1 	.word	0x3b0450d1
   1a094:	d1fa1d1a 	.word	0xd1fa1d1a
   1a098:	6863b1be 	.word	0x6863b1be
   1a09c:	d214429d 	.word	0xd214429d
   1a0a0:	f1c62700 	.word	0xf1c62700
   1a0a4:	00ab0c20 	.word	0x00ab0c20
   1a0a8:	350168a0 	.word	0x350168a0
   1a0ac:	fa0158c1 	.word	0xfa0158c1
   1a0b0:	50c2f206 	.word	0x50c2f206
   1a0b4:	58c268a0 	.word	0x58c268a0
   1a0b8:	50c2433a 	.word	0x50c2433a
   1a0bc:	fa216862 	.word	0xfa216862
   1a0c0:	42aaf70c 	.word	0x42aaf70c
   1a0c4:	0304f103 	.word	0x0304f103
   1a0c8:	2000d8ee 	.word	0x2000d8ee
   1a0cc:	81f0e8bd 	.word	0x81f0e8bd
   1a0d0:	1c42ea4f 	.word	0x1c42ea4f
   1a0d4:	0820f10c 	.word	0x0820f10c
   1a0d8:	2104e7a1 	.word	0x2104e7a1
   1a0dc:	f0034638 	.word	0xf0034638
   1a0e0:	4680f833 	.word	0x4680f833
   1a0e4:	68a1b320 	.word	0x68a1b320
   1a0e8:	6862b189 	.word	0x6862b189
   1a0ec:	f00a0092 	.word	0xf00a0092
   1a0f0:	e9d4f873 	.word	0xe9d4f873
   1a0f4:	1e532001 	.word	0x1e532001
   1a0f8:	2200b13a 	.word	0x2200b13a
   1a0fc:	1c593b01 	.word	0x1c593b01
   1a100:	f1006002 	.word	0xf1006002
   1a104:	d1f90004 	.word	0xd1f90004
   1a108:	f00368a0 	.word	0xf00368a0
   1a10c:	463bf831 	.word	0x463bf831
   1a110:	7801e9c4 	.word	0x7801e9c4
   1a114:	d0bf2d00 	.word	0xd0bf2d00
   1a118:	2b00e79f 	.word	0x2b00e79f
   1a11c:	2e00d1b2 	.word	0x2e00d1b2
   1a120:	e7d2d1bb 	.word	0xe7d2d1bb
   1a124:	7000f8de 	.word	0x7000f8de
   1a128:	f04f4694 	.word	0xf04f4694
   1a12c:	e7760820 	.word	0xe7760820
   1a130:	000ff06f 	.word	0x000ff06f
   1a134:	0152e7ca 	.word	0x0152e7ca
   1a138:	f1024667 	.word	0xf1024667
   1a13c:	46940820 	.word	0x46940820
   1a140:	bf00e76d 	.word	0xbf00e76d

0001a144 <symbol_0000994>:
   1a144:	6844b5f8 	.word	0x6844b5f8
   1a148:	42ac094d 	.word	0x42ac094d
   1a14c:	f001d33a 	.word	0xf001d33a
   1a150:	d032011f 	.word	0xd032011f
   1a154:	2300b1b5 	.word	0x2300b1b5
   1a158:	688400aa 	.word	0x688400aa
   1a15c:	320458a6 	.word	0x320458a6
   1a160:	6023f844 	.word	0x6023f844
   1a164:	33016844 	.word	0x33016844
   1a168:	429e1b66 	.word	0x429e1b66
   1a16c:	429cd8f5 	.word	0x429cd8f5
   1a170:	2500d908 	.word	0x2500d908
   1a174:	6884009a 	.word	0x6884009a
   1a178:	50a53301 	.word	0x50a53301
   1a17c:	32046844 	.word	0x32046844
   1a180:	d8f8429c 	.word	0xd8f8429c
   1a184:	b1b4b1b9 	.word	0xb1b4b1b9
   1a188:	f1042700 	.word	0xf1042700
   1a18c:	3b014380 	.word	0x3b014380
   1a190:	f1c1009b 	.word	0xf1c1009b
   1a194:	68860c20 	.word	0x68860c20
   1a198:	58f53c01 	.word	0x58f53c01
   1a19c:	f201fa25 	.word	0xf201fa25
   1a1a0:	688650f2 	.word	0x688650f2
   1a1a4:	ea4258f2 	.word	0xea4258f2
   1a1a8:	50f20207 	.word	0x50f20207
   1a1ac:	f70cfa05 	.word	0xf70cfa05
   1a1b0:	0304f1a3 	.word	0x0304f1a3
   1a1b4:	2000d1ef 	.word	0x2000d1ef
   1a1b8:	b919bdf8 	.word	0xb919bdf8
   1a1bc:	d0fa2c00 	.word	0xd0fa2c00
   1a1c0:	e7d6460b 	.word	0xe7d6460b
   1a1c4:	b1644605 	.word	0xb1644605
   1a1c8:	00a26886 	.word	0x00a26886
   1a1cc:	21004630 	.word	0x21004630
   1a1d0:	f82ff00a 	.word	0xf82ff00a
   1a1d4:	22012300 	.word	0x22012300
   1a1d8:	461868a9 	.word	0x461868a9
   1a1dc:	602a600b 	.word	0x602a600b
   1a1e0:	2104bdf8 	.word	0x2104bdf8
   1a1e4:	f0022001 	.word	0xf0022001
   1a1e8:	4606ffaf 	.word	0x4606ffaf
   1a1ec:	68a9b1b8 	.word	0x68a9b1b8
   1a1f0:	686ab181 	.word	0x686ab181
   1a1f4:	f0090092 	.word	0xf0090092
   1a1f8:	e9d5ffef 	.word	0xe9d5ffef
   1a1fc:	1e532001 	.word	0x1e532001
   1a200:	3b01b132 	.word	0x3b01b132
   1a204:	60041c5a 	.word	0x60041c5a
   1a208:	0004f100 	.word	0x0004f100
   1a20c:	68a8d1f9 	.word	0x68a8d1f9
   1a210:	ffaef002 	.word	0xffaef002
   1a214:	22042301 	.word	0x22042301
   1a218:	3601e9c5 	.word	0x3601e9c5
   1a21c:	f06fe7d6 	.word	0xf06fe7d6
   1a220:	bdf8000f 	.word	0xbdf8000f

0001a224 <symbol_000242f>:
   1a224:	6843b470 	.word	0x6843b470
   1a228:	b173684a 	.word	0xb173684a
   1a22c:	f1036884 	.word	0xf1036884
   1a230:	3d014580 	.word	0x3d014580
   1a234:	6025f854 	.word	0x6025f854
   1a238:	0485eb04 	.word	0x0485eb04
   1a23c:	e01ab11e 	.word	0xe01ab11e
   1a240:	5d04f854 	.word	0x5d04f854
   1a244:	3b01b9bd 	.word	0x3b01b9bd
   1a248:	b18ad1fa 	.word	0xb18ad1fa
   1a24c:	4480f102 	.word	0x4480f102
   1a250:	3c01688e 	.word	0x3c01688e
   1a254:	5024f856 	.word	0x5024f856
   1a258:	eb06b9cd 	.word	0xeb06b9cd
   1a25c:	e0020484 	.word	0xe0020484
   1a260:	5d04f854 	.word	0x5d04f854
   1a264:	3a01b98d 	.word	0x3a01b98d
   1a268:	2b00d1fa 	.word	0x2b00d1fa
   1a26c:	6802d037 	.word	0x6802d037
   1a270:	bc704610 	.word	0xbc704610
   1a274:	2a004770 	.word	0x2a004770
   1a278:	f102d0f9 	.word	0xf102d0f9
   1a27c:	688e4480 	.word	0x688e4480
   1a280:	f8563c01 	.word	0xf8563c01
   1a284:	2d005024 	.word	0x2d005024
   1a288:	4293d0e7 	.word	0x4293d0e7
   1a28c:	4293d8ef 	.word	0x4293d8ef
   1a290:	d2036809 	.word	0xd2036809
   1a294:	424abc70 	.word	0x424abc70
   1a298:	47704610 	.word	0x47704610
   1a29c:	2a006802 	.word	0x2a006802
   1a2a0:	2900dd01 	.word	0x2900dd01
   1a2a4:	2900db24 	.word	0x2900db24
   1a2a8:	2a00dd01 	.word	0x2a00dd01
   1a2ac:	b1b3db1d 	.word	0xb1b3db1d
   1a2b0:	f1036884 	.word	0xf1036884
   1a2b4:	39014180 	.word	0x39014180
   1a2b8:	5021f854 	.word	0x5021f854
   1a2bc:	0021f856 	.word	0x0021f856
   1a2c0:	42850089 	.word	0x42850089
   1a2c4:	4431440c 	.word	0x4431440c
   1a2c8:	d30cd8d2 	.word	0xd30cd8d2
   1a2cc:	d0063b01 	.word	0xd0063b01
   1a2d0:	5d04f854 	.word	0x5d04f854
   1a2d4:	0d04f851 	.word	0x0d04f851
   1a2d8:	d9f64285 	.word	0xd9f64285
   1a2dc:	461ae7c8 	.word	0x461ae7c8
   1a2e0:	4610bc70 	.word	0x4610bc70
   1a2e4:	42524770 	.word	0x42524770
   1a2e8:	f04fe7c2 	.word	0xf04fe7c2
   1a2ec:	e7bf32ff 	.word	0xe7bf32ff
   1a2f0:	e7bd2201 	.word	0xe7bd2201

0001a2f4 <symbol_000ccad>:
   1a2f4:	2900b4f0 	.word	0x2900b4f0
   1a2f8:	68434605 	.word	0x68434605
   1a2fc:	2b00db32 	.word	0x2b00db32
   1a300:	6886d042 	.word	0x6886d042
   1a304:	4280f103 	.word	0x4280f103
   1a308:	f8563a01 	.word	0xf8563a01
   1a30c:	eb060022 	.word	0xeb060022
   1a310:	b9680282 	.word	0xb9680282
   1a314:	30fff04f 	.word	0x30fff04f
   1a318:	e0022701 	.word	0xe0022701
   1a31c:	4d04f852 	.word	0x4d04f852
   1a320:	3b01b93c 	.word	0x3b01b93c
   1a324:	2900d1fa 	.word	0x2900d1fa
   1a328:	2000bf08 	.word	0x2000bf08
   1a32c:	4770bcf0 	.word	0x4770bcf0
   1a330:	b1a12701 	.word	0xb1a12701
   1a334:	d8122b01 	.word	0xd8122b01
   1a338:	28006828 	.word	0x28006828
   1a33c:	1c7bdd01 	.word	0x1c7bdd01
   1a340:	2f01d01e 	.word	0x2f01d01e
   1a344:	2800d101 	.word	0x2800d101
   1a348:	2900db24 	.word	0x2900db24
   1a34c:	bfb86833 	.word	0xbfb86833
   1a350:	42994249 	.word	0x42994249
   1a354:	d815d3ea 	.word	0xd815d3ea
   1a358:	2000bcf0 	.word	0x2000bcf0
   1a35c:	68284770 	.word	0x68284770
   1a360:	4770bcf0 	.word	0x4770bcf0
   1a364:	6886b163 	.word	0x6886b163
   1a368:	4280f103 	.word	0x4280f103
   1a36c:	f8563a01 	.word	0xf8563a01
   1a370:	eb060022 	.word	0xeb060022
   1a374:	b9500282 	.word	0xb9500282
   1a378:	f04f2001 	.word	0xf04f2001
   1a37c:	e7d037ff 	.word	0xe7d037ff
   1a380:	e7d32001 	.word	0xe7d32001
   1a384:	e7d14240 	.word	0xe7d14240
   1a388:	30fff04f 	.word	0x30fff04f
   1a38c:	f04fe7cb 	.word	0xf04fe7cb
   1a390:	e7cf37ff 	.word	0xe7cf37ff
   1a394:	30fff04f 	.word	0x30fff04f
   1a398:	bf00e7c8 	.word	0xbf00e7c8

0001a39c <symbol_000c914>:
   1a39c:	e92d4290 	.word	0xe92d4290
   1a3a0:	460747f0 	.word	0x460747f0
   1a3a4:	d006460c 	.word	0xd006460c
   1a3a8:	46154288 	.word	0x46154288
   1a3ac:	f7ffd002 	.word	0xf7ffd002
   1a3b0:	b9a0fafb 	.word	0xb9a0fafb
   1a3b4:	2301462c 	.word	0x2301462c
   1a3b8:	6865603b 	.word	0x6865603b
   1a3bc:	68a3b175 	.word	0x68a3b175
   1a3c0:	4280f105 	.word	0x4280f105
   1a3c4:	f8533a01 	.word	0xf8533a01
   1a3c8:	eb031022 	.word	0xeb031022
   1a3cc:	b1190282 	.word	0xb1190282
   1a3d0:	f852e007 	.word	0xf852e007
   1a3d4:	b9211d04 	.word	0xb9211d04
   1a3d8:	d1fa3d01 	.word	0xd1fa3d01
   1a3dc:	e8bd2000 	.word	0xe8bd2000
   1a3e0:	f24287f0 	.word	0xf24287f0
   1a3e4:	42957210 	.word	0x42957210
   1a3e8:	687ad875 	.word	0x687ad875
   1a3ec:	d27642aa 	.word	0xd27642aa
   1a3f0:	46282104 	.word	0x46282104
   1a3f4:	fea8f002 	.word	0xfea8f002
   1a3f8:	28004606 	.word	0x28004606
   1a3fc:	68b9d06b 	.word	0x68b9d06b
   1a400:	687ab189 	.word	0x687ab189
   1a404:	f0090092 	.word	0xf0090092
   1a408:	e9d7fee7 	.word	0xe9d7fee7
   1a40c:	1e532001 	.word	0x1e532001
   1a410:	2200b13a 	.word	0x2200b13a
   1a414:	1c593b01 	.word	0x1c593b01
   1a418:	f1006002 	.word	0xf1006002
   1a41c:	d1f90004 	.word	0xd1f90004
   1a420:	f00268b8 	.word	0xf00268b8
   1a424:	e9c7fea5 	.word	0xe9c7fea5
   1a428:	68a35601 	.word	0x68a35601
   1a42c:	ea4f2400 	.word	0xea4f2400
   1a430:	f1a30a85 	.word	0xf1a30a85
   1a434:	eb060c04 	.word	0xeb060c04
   1a438:	2200000a 	.word	0x2200000a
   1a43c:	f10c6833 	.word	0xf10c6833
   1a440:	f8dc0c04 	.word	0xf8dc0c04
   1a444:	191b1000 	.word	0x191b1000
   1a448:	bf284614 	.word	0xbf284614
   1a44c:	185b2201 	.word	0x185b2201
   1a450:	2401bf28 	.word	0x2401bf28
   1a454:	3b04f846 	.word	0x3b04f846
   1a458:	44144286 	.word	0x44144286
   1a45c:	2c00d1ed 	.word	0x2c00d1ed
   1a460:	f242d0bc 	.word	0xf242d0bc
   1a464:	f04f7810 	.word	0xf04f7810
   1a468:	e00f0900 	.word	0xe00f0900
   1a46c:	eb0568bd 	.word	0xeb0568bd
   1a470:	6803000a 	.word	0x6803000a
   1a474:	191c2200 	.word	0x191c2200
   1a478:	2201bf28 	.word	0x2201bf28
   1a47c:	4b04f840 	.word	0x4b04f840
   1a480:	0a04f10a 	.word	0x0a04f10a
   1a484:	24014635 	.word	0x24014635
   1a488:	d0a72a00 	.word	0xd0a72a00
   1a48c:	1c6e687b 	.word	0x1c6e687b
   1a490:	d8ee42ab 	.word	0xd8ee42ab
   1a494:	d81e4546 	.word	0xd81e4546
   1a498:	d2e742b3 	.word	0xd2e742b3
   1a49c:	46302104 	.word	0x46302104
   1a4a0:	fe52f002 	.word	0xfe52f002
   1a4a4:	b1b04605 	.word	0xb1b04605
   1a4a8:	b18968b9 	.word	0xb18968b9
   1a4ac:	0092687a 	.word	0x0092687a
   1a4b0:	fe92f009 	.word	0xfe92f009
   1a4b4:	2001e9d7 	.word	0x2001e9d7
   1a4b8:	b13a1e53 	.word	0xb13a1e53
   1a4bc:	1c5a3b01 	.word	0x1c5a3b01
   1a4c0:	9000f8c0 	.word	0x9000f8c0
   1a4c4:	0004f100 	.word	0x0004f100
   1a4c8:	68b8d1f8 	.word	0x68b8d1f8
   1a4cc:	fe50f002 	.word	0xfe50f002
   1a4d0:	6501e9c7 	.word	0x6501e9c7
   1a4d4:	f06fe7cb 	.word	0xf06fe7cb
   1a4d8:	e8bd000f 	.word	0xe8bd000f
   1a4dc:	68be87f0 	.word	0x68be87f0
   1a4e0:	bf00e7a4 	.word	0xbf00e7a4

0001a4e4 <symbol_0004fdf>:
   1a4e4:	684bb5f0 	.word	0x684bb5f0
   1a4e8:	b085460d 	.word	0xb085460d
   1a4ec:	46064614 	.word	0x46064614
   1a4f0:	b17b6851 	.word	0xb17b6851
   1a4f4:	f10368a8 	.word	0xf10368a8
   1a4f8:	3a014280 	.word	0x3a014280
   1a4fc:	7022f850 	.word	0x7022f850
   1a500:	0082eb00 	.word	0x0082eb00
   1a504:	e04fb127 	.word	0xe04fb127
   1a508:	2d04f850 	.word	0x2d04f850
   1a50c:	d14b2a00 	.word	0xd14b2a00
   1a510:	d1f93b01 	.word	0xd1f93b01
   1a514:	f101b189 	.word	0xf101b189
   1a518:	68a74080 	.word	0x68a74080
   1a51c:	f8573801 	.word	0xf8573801
   1a520:	2a002020 	.word	0x2a002020
   1a524:	8099f040 	.word	0x8099f040
   1a528:	0080eb07 	.word	0x0080eb07
   1a52c:	f850e003 	.word	0xf850e003
   1a530:	2a002d04 	.word	0x2a002d04
   1a534:	3901d142 	.word	0x3901d142
   1a538:	2300d1f9 	.word	0x2300d1f9
   1a53c:	42b42201 	.word	0x42b42201
   1a540:	2301e9cd 	.word	0x2301e9cd
   1a544:	d07f9303 	.word	0xd07f9303
   1a548:	d00542b5 	.word	0xd00542b5
   1a54c:	46304629 	.word	0x46304629
   1a550:	fa2af7ff 	.word	0xfa2af7ff
   1a554:	b9a84607 	.word	0xb9a84607
   1a558:	60332301 	.word	0x60332301
   1a55c:	b1806860 	.word	0xb1806860
   1a560:	c008f8d4 	.word	0xc008f8d4
   1a564:	4380f100 	.word	0x4380f100
   1a568:	f85c3b01 	.word	0xf85c3b01
   1a56c:	eb0c2023 	.word	0xeb0c2023
   1a570:	b1220383 	.word	0xb1220383
   1a574:	f853e042 	.word	0xf853e042
   1a578:	2a002d04 	.word	0x2a002d04
   1a57c:	3801d13e 	.word	0x3801d13e
   1a580:	2700d1f9 	.word	0x2700d1f9
   1a584:	b1609803 	.word	0xb1609803
   1a588:	1e539a02 	.word	0x1e539a02
   1a58c:	2200b13a 	.word	0x2200b13a
   1a590:	1c593b01 	.word	0x1c593b01
   1a594:	f1006002 	.word	0xf1006002
   1a598:	d1f90004 	.word	0xd1f90004
   1a59c:	f0029803 	.word	0xf0029803
   1a5a0:	4638fde7 	.word	0x4638fde7
   1a5a4:	bdf0b005 	.word	0xbdf0b005
   1a5a8:	d0c62900 	.word	0xd0c62900
   1a5ac:	4080f101 	.word	0x4080f101
   1a5b0:	380168a7 	.word	0x380168a7
   1a5b4:	2020f857 	.word	0x2020f857
   1a5b8:	d0b52a00 	.word	0xd0b52a00
   1a5bc:	d8bc428b 	.word	0xd8bc428b
   1a5c0:	2b00d34b 	.word	0x2b00d34b
   1a5c4:	68a8d0b9 	.word	0x68a8d0b9
   1a5c8:	4180f103 	.word	0x4180f103
   1a5cc:	f8503901 	.word	0xf8503901
   1a5d0:	f857c021 	.word	0xf857c021
   1a5d4:	0089e021 	.word	0x0089e021
   1a5d8:	440845e6 	.word	0x440845e6
   1a5dc:	0201eb07 	.word	0x0201eb07
   1a5e0:	d83ad3ab 	.word	0xd83ad3ab
   1a5e4:	e0064601 	.word	0xe0064601
   1a5e8:	7d04f851 	.word	0x7d04f851
   1a5ec:	0d04f852 	.word	0x0d04f852
   1a5f0:	d8a24287 	.word	0xd8a24287
   1a5f4:	3b01d331 	.word	0x3b01d331
   1a5f8:	e79ed1f6 	.word	0xe79ed1f6
   1a5fc:	462b2500 	.word	0x462b2500
   1a600:	f85168b1 	.word	0xf85168b1
   1a604:	35016b04 	.word	0x35016b04
   1a608:	f8411af2 	.word	0xf8411af2
   1a60c:	f85c2c04 	.word	0xf85c2c04
   1a610:	460c7b04 	.word	0x460c7b04
   1a614:	bf2c42ba 	.word	0xbf2c42ba
   1a618:	0e00f04f 	.word	0x0e00f04f
   1a61c:	0e01f04f 	.word	0x0e01f04f
   1a620:	429e1bd2 	.word	0x429e1bd2
   1a624:	4673bf2c 	.word	0x4673bf2c
   1a628:	0301f10e 	.word	0x0301f10e
   1a62c:	f8414285 	.word	0xf8414285
   1a630:	d3e62c04 	.word	0xd3e62c04
   1a634:	e7a4b90b 	.word	0xe7a4b90b
   1a638:	68222301 	.word	0x68222301
   1a63c:	429a1ad1 	.word	0x429a1ad1
   1a640:	1b04f844 	.word	0x1b04f844
   1a644:	e79cd3f8 	.word	0xe79cd3f8
   1a648:	a8014621 	.word	0xa8014621
   1a64c:	f9acf7ff 	.word	0xf9acf7ff
   1a650:	28004607 	.word	0x28004607
   1a654:	ac01d196 	.word	0xac01d196
   1a658:	f06fe776 	.word	0xf06fe776
   1a65c:	46380709 	.word	0x46380709
   1a660:	bdf0b005 	.word	0xbdf0b005

0001a664 <symbol_0005cc7>:
   1a664:	41f0e92d 	.word	0x41f0e92d
   1a668:	6813680c 	.word	0x6813680c
   1a66c:	fb034605 	.word	0xfb034605
   1a670:	2b00f304 	.word	0x2b00f304
   1a674:	684bda39 	.word	0x684bda39
   1a678:	460e4617 	.word	0x460e4617
   1a67c:	b1836852 	.word	0xb1836852
   1a680:	f1036889 	.word	0xf1036889
   1a684:	38014080 	.word	0x38014080
   1a688:	c020f851 	.word	0xc020f851
   1a68c:	0180eb01 	.word	0x0180eb01
   1a690:	0f00f1bc 	.word	0x0f00f1bc
   1a694:	e02ed003 	.word	0xe02ed003
   1a698:	0d04f851 	.word	0x0d04f851
   1a69c:	3b01bb58 	.word	0x3b01bb58
   1a6a0:	b17ad1fa 	.word	0xb17ad1fa
   1a6a4:	4180f102 	.word	0x4180f102
   1a6a8:	c008f8d7 	.word	0xc008f8d7
   1a6ac:	f85c3901 	.word	0xf85c3901
   1a6b0:	b9780021 	.word	0xb9780021
   1a6b4:	0181eb0c 	.word	0x0181eb0c
   1a6b8:	f851e002 	.word	0xf851e002
   1a6bc:	bb280d04 	.word	0xbb280d04
   1a6c0:	d1fa3a01 	.word	0xd1fa3a01
   1a6c4:	4631463a 	.word	0x4631463a
   1a6c8:	f7ff4628 	.word	0xf7ff4628
   1a6cc:	b148ff0b 	.word	0xb148ff0b
   1a6d0:	81f0e8bd 	.word	0x81f0e8bd
   1a6d4:	46394632 	.word	0x46394632
   1a6d8:	f7ff4628 	.word	0xf7ff4628
   1a6dc:	2800ff03 	.word	0x2800ff03
   1a6e0:	4264d1f6 	.word	0x4264d1f6
   1a6e4:	e8bd602c 	.word	0xe8bd602c
   1a6e8:	f7ff81f0 	.word	0xf7ff81f0
   1a6ec:	2800fe57 	.word	0x2800fe57
   1a6f0:	602cd1ee 	.word	0x602cd1ee
   1a6f4:	2a00e7f7 	.word	0x2a00e7f7
   1a6f8:	f102d0e4 	.word	0xf102d0e4
   1a6fc:	f8d74180 	.word	0xf8d74180
   1a700:	3901c008 	.word	0x3901c008
   1a704:	0021f85c 	.word	0x0021f85c
   1a708:	d0d32800 	.word	0xd0d32800
   1a70c:	d8d94293 	.word	0xd8d94293
   1a710:	2b00d3e0 	.word	0x2b00d3e0
   1a714:	68b0d0d6 	.word	0x68b0d0d6
   1a718:	4180f103 	.word	0x4180f103
   1a71c:	f8503901 	.word	0xf8503901
   1a720:	f85c8021 	.word	0xf85c8021
   1a724:	0089e021 	.word	0x0089e021
   1a728:	440845f0 	.word	0x440845f0
   1a72c:	0201eb0c 	.word	0x0201eb0c
   1a730:	d3cfd8c8 	.word	0xd3cfd8c8
   1a734:	e0064601 	.word	0xe0064601
   1a738:	cd04f851 	.word	0xcd04f851
   1a73c:	0d04f852 	.word	0x0d04f852
   1a740:	d8bf4584 	.word	0xd8bf4584
   1a744:	3b01d3c6 	.word	0x3b01d3c6
   1a748:	e7bbd1f6 	.word	0xe7bbd1f6

0001a74c <symbol_000d773>:
   1a74c:	41f0e92d 	.word	0x41f0e92d
   1a750:	6813680c 	.word	0x6813680c
   1a754:	fb034605 	.word	0xfb034605
   1a758:	2b00f304 	.word	0x2b00f304
   1a75c:	684bdd64 	.word	0x684bdd64
   1a760:	460e4617 	.word	0x460e4617
   1a764:	b1836852 	.word	0xb1836852
   1a768:	f1036889 	.word	0xf1036889
   1a76c:	38014080 	.word	0x38014080
   1a770:	c020f851 	.word	0xc020f851
   1a774:	0180eb01 	.word	0x0180eb01
   1a778:	0f00f1bc 	.word	0x0f00f1bc
   1a77c:	e01fd003 	.word	0xe01fd003
   1a780:	0d04f851 	.word	0x0d04f851
   1a784:	3b01b9e0 	.word	0x3b01b9e0
   1a788:	b182d1fa 	.word	0xb182d1fa
   1a78c:	4180f102 	.word	0x4180f102
   1a790:	c008f8d7 	.word	0xc008f8d7
   1a794:	f85c3901 	.word	0xf85c3901
   1a798:	28000021 	.word	0x28000021
   1a79c:	eb0cd13b 	.word	0xeb0cd13b
   1a7a0:	e0020181 	.word	0xe0020181
   1a7a4:	0d04f851 	.word	0x0d04f851
   1a7a8:	3a01b9a8 	.word	0x3a01b9a8
   1a7ac:	463ad1fa 	.word	0x463ad1fa
   1a7b0:	46284631 	.word	0x46284631
   1a7b4:	fe96f7ff 	.word	0xfe96f7ff
   1a7b8:	602cb900 	.word	0x602cb900
   1a7bc:	81f0e8bd 	.word	0x81f0e8bd
   1a7c0:	d0f42a00 	.word	0xd0f42a00
   1a7c4:	4180f102 	.word	0x4180f102
   1a7c8:	c008f8d7 	.word	0xc008f8d7
   1a7cc:	f85c3901 	.word	0xf85c3901
   1a7d0:	28000021 	.word	0x28000021
   1a7d4:	4293d0e3 	.word	0x4293d0e3
   1a7d8:	d31cd8e9 	.word	0xd31cd8e9
   1a7dc:	d0e62b00 	.word	0xd0e62b00
   1a7e0:	f10368b0 	.word	0xf10368b0
   1a7e4:	39014180 	.word	0x39014180
   1a7e8:	8021f850 	.word	0x8021f850
   1a7ec:	e021f85c 	.word	0xe021f85c
   1a7f0:	45f00089 	.word	0x45f00089
   1a7f4:	eb0c4408 	.word	0xeb0c4408
   1a7f8:	d8d80201 	.word	0xd8d80201
   1a7fc:	4601d30b 	.word	0x4601d30b
   1a800:	f851e006 	.word	0xf851e006
   1a804:	f852cd04 	.word	0xf852cd04
   1a808:	45840d04 	.word	0x45840d04
   1a80c:	d302d8cf 	.word	0xd302d8cf
   1a810:	d1f63b01 	.word	0xd1f63b01
   1a814:	4632e7cb 	.word	0x4632e7cb
   1a818:	46284639 	.word	0x46284639
   1a81c:	fe62f7ff 	.word	0xfe62f7ff
   1a820:	d1cb2800 	.word	0xd1cb2800
   1a824:	e7c84264 	.word	0xe7c84264
   1a828:	fdb8f7ff 	.word	0xfdb8f7ff
   1a82c:	d0c42800 	.word	0xd0c42800
   1a830:	81f0e8bd 	.word	0x81f0e8bd

0001a834 <symbol_000f268>:
   1a834:	bfac2a00 	.word	0xbfac2a00
   1a838:	f04f2301 	.word	0xf04f2301
   1a83c:	b5f033ff 	.word	0xb5f033ff
   1a840:	680d2601 	.word	0x680d2601
   1a844:	7ce2ea82 	.word	0x7ce2ea82
   1a848:	f703fb05 	.word	0xf703fb05
   1a84c:	ebacb085 	.word	0xebacb085
   1a850:	2f007ce2 	.word	0x2f007ce2
   1a854:	e9cd9602 	.word	0xe9cd9602
   1a858:	f8cdc300 	.word	0xf8cdc300
   1a85c:	4606d00c 	.word	0x4606d00c
   1a860:	684bdd2c 	.word	0x684bdd2c
   1a864:	b173460c 	.word	0xb173460c
   1a868:	f10368a7 	.word	0xf10368a7
   1a86c:	39014180 	.word	0x39014180
   1a870:	0021f857 	.word	0x0021f857
   1a874:	0181eb07 	.word	0x0181eb07
   1a878:	e00eb118 	.word	0xe00eb118
   1a87c:	0d04f851 	.word	0x0d04f851
   1a880:	3b01b958 	.word	0x3b01b958
   1a884:	b982d1fa 	.word	0xb982d1fa
   1a888:	aa014621 	.word	0xaa014621
   1a88c:	f7ff4630 	.word	0xf7ff4630
   1a890:	b900f8f9 	.word	0xb900f8f9
   1a894:	b0056035 	.word	0xb0056035
   1a898:	2a00bdf0 	.word	0x2a00bdf0
   1a89c:	2b01d0f4 	.word	0x2b01d0f4
   1a8a0:	683bd8f2 	.word	0x683bd8f2
   1a8a4:	d3ef459c 	.word	0xd3ef459c
   1a8a8:	4622d9ee 	.word	0x4622d9ee
   1a8ac:	4630a901 	.word	0x4630a901
   1a8b0:	fe18f7ff 	.word	0xfe18f7ff
   1a8b4:	d1ee2800 	.word	0xd1ee2800
   1a8b8:	e7eb426d 	.word	0xe7eb426d
   1a8bc:	f7ffaa01 	.word	0xf7ffaa01
   1a8c0:	2800fd6d 	.word	0x2800fd6d
   1a8c4:	b005d0e6 	.word	0xb005d0e6
   1a8c8:	bf00bdf0 	.word	0xbf00bdf0

0001a8cc <symbol_000b923>:
   1a8cc:	47f0e92d 	.word	0x47f0e92d
   1a8d0:	23004606 	.word	0x23004606
   1a8d4:	b0862001 	.word	0xb0862001
   1a8d8:	4690428e 	.word	0x4690428e
   1a8dc:	90039000 	.word	0x90039000
   1a8e0:	3301e9cd 	.word	0x3301e9cd
   1a8e4:	3304e9cd 	.word	0x3304e9cd
   1a8e8:	80d1f000 	.word	0x80d1f000
   1a8ec:	4546460f 	.word	0x4546460f
   1a8f0:	80d5f000 	.word	0x80d5f000
   1a8f4:	b185687d 	.word	0xb185687d
   1a8f8:	f10568bb 	.word	0xf10568bb
   1a8fc:	3a014280 	.word	0x3a014280
   1a900:	1022f853 	.word	0x1022f853
   1a904:	0382eb03 	.word	0x0382eb03
   1a908:	e0bab129 	.word	0xe0bab129
   1a90c:	2d04f853 	.word	0x2d04f853
   1a910:	f0402a00 	.word	0xf0402a00
   1a914:	3d0180b6 	.word	0x3d0180b6
   1a918:	f8d8d1f8 	.word	0xf8d8d1f8
   1a91c:	25004004 	.word	0x25004004
   1a920:	d03d2c00 	.word	0xd03d2c00
   1a924:	3008f8d8 	.word	0x3008f8d8
   1a928:	4280f104 	.word	0x4280f104
   1a92c:	f8533a01 	.word	0xf8533a01
   1a930:	eb031022 	.word	0xeb031022
   1a934:	b1190382 	.word	0xb1190382
   1a938:	f853e004 	.word	0xf853e004
   1a93c:	b90a2d04 	.word	0xb90a2d04
   1a940:	d1fa3c01 	.word	0xd1fa3c01
   1a944:	7310f242 	.word	0x7310f242
   1a948:	0905eb04 	.word	0x0905eb04
   1a94c:	f2004599 	.word	0xf2004599
   1a950:	f8d680b0 	.word	0xf8d680b0
   1a954:	45d1a004 	.word	0x45d1a004
   1a958:	2104d925 	.word	0x2104d925
   1a95c:	f0024648 	.word	0xf0024648
   1a960:	4682fbf3 	.word	0x4682fbf3
   1a964:	f0002800 	.word	0xf0002800
   1a968:	68b180a4 	.word	0x68b180a4
   1a96c:	6872b189 	.word	0x6872b189
   1a970:	f0090092 	.word	0xf0090092
   1a974:	e9d6fc31 	.word	0xe9d6fc31
   1a978:	1e532001 	.word	0x1e532001
   1a97c:	2200b13a 	.word	0x2200b13a
   1a980:	1c593b01 	.word	0x1c593b01
   1a984:	f1006002 	.word	0xf1006002
   1a988:	d1f90004 	.word	0xd1f90004
   1a98c:	f00268b0 	.word	0xf00268b0
   1a990:	e9c6fbef 	.word	0xe9c6fbef
   1a994:	ea4f9a01 	.word	0xea4f9a01
   1a998:	f8d60289 	.word	0xf8d60289
   1a99c:	e0259008 	.word	0xe0259008
   1a9a0:	f8d64625 	.word	0xf8d64625
   1a9a4:	f1baa004 	.word	0xf1baa004
   1a9a8:	f0400f00 	.word	0xf0400f00
   1a9ac:	21048085 	.word	0x21048085
   1a9b0:	f0022001 	.word	0xf0022001
   1a9b4:	4681fbc9 	.word	0x4681fbc9
   1a9b8:	d07a2800 	.word	0xd07a2800
   1a9bc:	b18968b1 	.word	0xb18968b1
   1a9c0:	00926872 	.word	0x00926872
   1a9c4:	fc08f009 	.word	0xfc08f009
   1a9c8:	2001e9d6 	.word	0x2001e9d6
   1a9cc:	b13a1e53 	.word	0xb13a1e53
   1a9d0:	3b014652 	.word	0x3b014652
   1a9d4:	60021c59 	.word	0x60021c59
   1a9d8:	0004f100 	.word	0x0004f100
   1a9dc:	68b0d1f9 	.word	0x68b0d1f9
   1a9e0:	fbc6f002 	.word	0xfbc6f002
   1a9e4:	22042301 	.word	0x22042301
   1a9e8:	3901e9c6 	.word	0x3901e9c6
   1a9ec:	46482100 	.word	0x46482100
   1a9f0:	fc1ff009 	.word	0xfc1ff009
   1a9f4:	23012100 	.word	0x23012100
   1a9f8:	601168b2 	.word	0x601168b2
   1a9fc:	b19c6033 	.word	0xb19c6033
   1aa00:	4980f104 	.word	0x4980f104
   1aa04:	39fff109 	.word	0x39fff109
   1aa08:	0989ea4f 	.word	0x0989ea4f
   1aa0c:	3008f8d8 	.word	0x3008f8d8
   1aa10:	f85368b2 	.word	0xf85368b2
   1aa14:	444a3009 	.word	0x444a3009
   1aa18:	462868b9 	.word	0x462868b9
   1aa1c:	fc14f7fe 	.word	0xfc14f7fe
   1aa20:	f1a93c01 	.word	0xf1a93c01
   1aa24:	d1f10904 	.word	0xd1f10904
   1aa28:	683a2400 	.word	0x683a2400
   1aa2c:	3000f8d8 	.word	0x3000f8d8
   1aa30:	f302fb03 	.word	0xf302fb03
   1aa34:	98056033 	.word	0x98056033
   1aa38:	9a04b160 	.word	0x9a04b160
   1aa3c:	b13a1e53 	.word	0xb13a1e53
   1aa40:	3b012200 	.word	0x3b012200
   1aa44:	60021c5d 	.word	0x60021c5d
   1aa48:	0004f100 	.word	0x0004f100
   1aa4c:	9805d1f9 	.word	0x9805d1f9
   1aa50:	fb8ef002 	.word	0xfb8ef002
   1aa54:	23012200 	.word	0x23012200
   1aa58:	e9cd9802 	.word	0xe9cd9802
   1aa5c:	92053203 	.word	0x92053203
   1aa60:	9901b158 	.word	0x9901b158
   1aa64:	b1311e4b 	.word	0xb1311e4b
   1aa68:	1c593b01 	.word	0x1c593b01
   1aa6c:	f1006002 	.word	0xf1006002
   1aa70:	d1f90004 	.word	0xd1f90004
   1aa74:	f0029802 	.word	0xf0029802
   1aa78:	4620fb7b 	.word	0x4620fb7b
   1aa7c:	e8bdb006 	.word	0xe8bdb006
   1aa80:	f8d887f0 	.word	0xf8d887f0
   1aa84:	2c004004 	.word	0x2c004004
   1aa88:	af4cf47f 	.word	0xaf4cf47f
   1aa8c:	4668e75a 	.word	0x4668e75a
   1aa90:	ff8af7fe 	.word	0xff8af7fe
   1aa94:	28004604 	.word	0x28004604
   1aa98:	466fd1cd 	.word	0x466fd1cd
   1aa9c:	a803e727 	.word	0xa803e727
   1aaa0:	f7fe4631 	.word	0xf7fe4631
   1aaa4:	4604ff81 	.word	0x4604ff81
   1aaa8:	d1c42800 	.word	0xd1c42800
   1aaac:	080cf10d 	.word	0x080cf10d
   1aab0:	f06fe720 	.word	0xf06fe720
   1aab4:	e7be040f 	.word	0xe7be040f
   1aab8:	e76c46d1 	.word	0xe76c46d1

0001aabc <symbol_0008c0f>:
   1aabc:	b5002301 	.word	0xb5002301
   1aac0:	9200b085 	.word	0x9200b085
   1aac4:	e9cdaa01 	.word	0xe9cdaa01
   1aac8:	f8cd3301 	.word	0xf8cd3301
   1aacc:	f7ffd00c 	.word	0xf7ffd00c
   1aad0:	b005fefd 	.word	0xb005fefd
   1aad4:	fb04f85d 	.word	0xfb04f85d

0001aad8 <symbol_0007bb0>:
   1aad8:	4ff0e92d 	.word	0x4ff0e92d
   1aadc:	b0a3685e 	.word	0xb0a3685e
   1aae0:	f8d3b196 	.word	0xf8d3b196
   1aae4:	f1068008 	.word	0xf1068008
   1aae8:	f1094980 	.word	0xf1094980
   1aaec:	f85839ff 	.word	0xf85839ff
   1aaf0:	eb085029 	.word	0xeb085029
   1aaf4:	b96d0e89 	.word	0xb96d0e89
   1aaf8:	463746f4 	.word	0x463746f4
   1aafc:	f85ce002 	.word	0xf85ce002
   1ab00:	b93c4d04 	.word	0xb93c4d04
   1ab04:	d1fa3f01 	.word	0xd1fa3f01
   1ab08:	060bf06f 	.word	0x060bf06f
   1ab0c:	b0234630 	.word	0xb0234630
   1ab10:	8ff0e8bd 	.word	0x8ff0e8bd
   1ab14:	2d00681d 	.word	0x2d00681d
   1ab18:	4614d0f6 	.word	0x4614d0f6
   1ab1c:	2200468a 	.word	0x2200468a
   1ab20:	469b2101 	.word	0x469b2101
   1ab24:	46056863 	.word	0x46056863
   1ab28:	91139110 	.word	0x91139110
   1ab2c:	91199116 	.word	0x91199116
   1ab30:	e9cd911c 	.word	0xe9cd911c
   1ab34:	e9cd2211 	.word	0xe9cd2211
   1ab38:	e9cd2214 	.word	0xe9cd2214
   1ab3c:	e9cd2217 	.word	0xe9cd2217
   1ab40:	e9cd221a 	.word	0xe9cd221a
   1ab44:	2b00221d 	.word	0x2b00221d
   1ab48:	821af000 	.word	0x821af000
   1ab4c:	f10368a2 	.word	0xf10368a2
   1ab50:	39014180 	.word	0x39014180
   1ab54:	0021f852 	.word	0x0021f852
   1ab58:	0281eb02 	.word	0x0281eb02
   1ab5c:	e07bb120 	.word	0xe07bb120
   1ab60:	1d04f852 	.word	0x1d04f852
   1ab64:	d1772900 	.word	0xd1772900
   1ab68:	d1f93b01 	.word	0xd1f93b01
   1ab6c:	2029f858 	.word	0x2029f858
   1ab70:	d1772a00 	.word	0xd1772a00
   1ab74:	e0034672 	.word	0xe0034672
   1ab78:	1d04f852 	.word	0x1d04f852
   1ab7c:	d16f2900 	.word	0xd16f2900
   1ab80:	d1f93e01 	.word	0xd1f93e01
   1ab84:	4621a810 	.word	0x4621a810
   1ab88:	ff0ef7fe 	.word	0xff0ef7fe
   1ab8c:	28004606 	.word	0x28004606
   1ab90:	8092f000 	.word	0x8092f000
   1ab94:	98122700 	.word	0x98122700
   1ab98:	9a11b160 	.word	0x9a11b160
   1ab9c:	b13a1e53 	.word	0xb13a1e53
   1aba0:	3b012200 	.word	0x3b012200
   1aba4:	60021c5c 	.word	0x60021c5c
   1aba8:	0004f100 	.word	0x0004f100
   1abac:	9812d1f9 	.word	0x9812d1f9
   1abb0:	fadef002 	.word	0xfadef002
   1abb4:	23012200 	.word	0x23012200
   1abb8:	e9cd9815 	.word	0xe9cd9815
   1abbc:	92123210 	.word	0x92123210
   1abc0:	9914b158 	.word	0x9914b158
   1abc4:	b1311e4b 	.word	0xb1311e4b
   1abc8:	1c593b01 	.word	0x1c593b01
   1abcc:	f1006002 	.word	0xf1006002
   1abd0:	d1f90004 	.word	0xd1f90004
   1abd4:	f0029815 	.word	0xf0029815
   1abd8:	2200facb 	.word	0x2200facb
   1abdc:	98182301 	.word	0x98182301
   1abe0:	3213e9cd 	.word	0x3213e9cd
   1abe4:	b1589215 	.word	0xb1589215
   1abe8:	1e4b9917 	.word	0x1e4b9917
   1abec:	3b01b131 	.word	0x3b01b131
   1abf0:	60021c5d 	.word	0x60021c5d
   1abf4:	0004f100 	.word	0x0004f100
   1abf8:	9818d1f9 	.word	0x9818d1f9
   1abfc:	fab8f002 	.word	0xfab8f002
   1ac00:	23012200 	.word	0x23012200
   1ac04:	e9cd981b 	.word	0xe9cd981b
   1ac08:	92183216 	.word	0x92183216
   1ac0c:	991ab158 	.word	0x991ab158
   1ac10:	b1311e4b 	.word	0xb1311e4b
   1ac14:	1c5c3b01 	.word	0x1c5c3b01
   1ac18:	f1006002 	.word	0xf1006002
   1ac1c:	d1f90004 	.word	0xd1f90004
   1ac20:	f002981b 	.word	0xf002981b
   1ac24:	2100faa5 	.word	0x2100faa5
   1ac28:	911b2301 	.word	0x911b2301
   1ac2c:	3119e9cd 	.word	0x3119e9cd
   1ac30:	f43f2f00 	.word	0xf43f2f00
   1ac34:	9a1daf6b 	.word	0x9a1daf6b
   1ac38:	b1321e53 	.word	0xb1321e53
   1ac3c:	3b01463a 	.word	0x3b01463a
   1ac40:	60111c58 	.word	0x60111c58
   1ac44:	0204f102 	.word	0x0204f102
   1ac48:	4638d1f9 	.word	0x4638d1f9
   1ac4c:	fa90f002 	.word	0xfa90f002
   1ac50:	b0234630 	.word	0xb0234630
   1ac54:	8ff0e8bd 	.word	0x8ff0e8bd
   1ac58:	2029f858 	.word	0x2029f858
   1ac5c:	d0892a00 	.word	0xd0892a00
   1ac60:	d38f429e 	.word	0xd38f429e
   1ac64:	f200429e 	.word	0xf200429e
   1ac68:	2b008190 	.word	0x2b008190
   1ac6c:	68a1d08a 	.word	0x68a1d08a
   1ac70:	4280f103 	.word	0x4280f103
   1ac74:	f8513a01 	.word	0xf8513a01
   1ac78:	f8580022 	.word	0xf8580022
   1ac7c:	00926022 	.word	0x00926022
   1ac80:	44114286 	.word	0x44114286
   1ac84:	f4ff4490 	.word	0xf4ff4490
   1ac88:	f200af7d 	.word	0xf200af7d
   1ac8c:	460a817e 	.word	0x460a817e
   1ac90:	f852e008 	.word	0xf852e008
   1ac94:	f8580d04 	.word	0xf8580d04
   1ac98:	42881d04 	.word	0x42881d04
   1ac9c:	af72f63f 	.word	0xaf72f63f
   1aca0:	8173f0c0 	.word	0x8173f0c0
   1aca4:	d1f43b01 	.word	0xd1f43b01
   1aca8:	4621a810 	.word	0x4621a810
   1acac:	fe7cf7fe 	.word	0xfe7cf7fe
   1acb0:	28004606 	.word	0x28004606
   1acb4:	af6ef47f 	.word	0xaf6ef47f
   1acb8:	4659a813 	.word	0x4659a813
   1acbc:	fe74f7fe 	.word	0xfe74f7fe
   1acc0:	28004606 	.word	0x28004606
   1acc4:	af66f47f 	.word	0xaf66f47f
   1acc8:	7210f242 	.word	0x7210f242
   1accc:	68672301 	.word	0x68672301
   1acd0:	37029313 	.word	0x37029313
   1acd4:	93104297 	.word	0x93104297
   1acd8:	8193f200 	.word	0x8193f200
   1acdc:	805cf8dd 	.word	0x805cf8dd
   1ace0:	d91d4547 	.word	0xd91d4547
   1ace4:	46382104 	.word	0x46382104
   1ace8:	fa2ef002 	.word	0xfa2ef002
   1acec:	28004681 	.word	0x28004681
   1acf0:	8187f000 	.word	0x8187f000
   1acf4:	b1819918 	.word	0xb1819918
   1acf8:	00929a17 	.word	0x00929a17
   1acfc:	fa6cf009 	.word	0xfa6cf009
   1ad00:	2017e9dd 	.word	0x2017e9dd
   1ad04:	b1321e53 	.word	0xb1321e53
   1ad08:	1c5a3b01 	.word	0x1c5a3b01
   1ad0c:	f1006006 	.word	0xf1006006
   1ad10:	d1f90004 	.word	0xd1f90004
   1ad14:	f0029818 	.word	0xf0029818
   1ad18:	46b8fa2b 	.word	0x46b8fa2b
   1ad1c:	7917e9cd 	.word	0x7917e9cd
   1ad20:	0f00f1b8 	.word	0x0f00f1b8
   1ad24:	8171f000 	.word	0x8171f000
   1ad28:	ea4f9e18 	.word	0xea4f9e18
   1ad2c:	27000288 	.word	0x27000288
   1ad30:	46394630 	.word	0x46394630
   1ad34:	fa7df009 	.word	0xfa7df009
   1ad38:	9b182201 	.word	0x9b182201
   1ad3c:	9b1a601f 	.word	0x9b1a601f
   1ad40:	42939216 	.word	0x42939216
   1ad44:	81b2f240 	.word	0x81b2f240
   1ad48:	20032104 	.word	0x20032104
   1ad4c:	f9fcf002 	.word	0xf9fcf002
   1ad50:	28004607 	.word	0x28004607
   1ad54:	8155f000 	.word	0x8155f000
   1ad58:	9a142303 	.word	0x9a142303
   1ad5c:	301de9cd 	.word	0x301de9cd
   1ad60:	2a009203 	.word	0x2a009203
   1ad64:	8171f000 	.word	0x8171f000
   1ad68:	0901f1b2 	.word	0x0901f1b2
   1ad6c:	f0009915 	.word	0xf0009915
   1ad70:	f85181cf 	.word	0xf85181cf
   1ad74:	28000029 	.word	0x28000029
   1ad78:	81c5f040 	.word	0x81c5f040
   1ad7c:	4280f102 	.word	0x4280f102
   1ad80:	464b3a01 	.word	0x464b3a01
   1ad84:	0282eb01 	.word	0x0282eb01
   1ad88:	f852e004 	.word	0xf852e004
   1ad8c:	28000d04 	.word	0x28000d04
   1ad90:	81aef040 	.word	0x81aef040
   1ad94:	d1f83b01 	.word	0xd1f83b01
   1ad98:	68082620 	.word	0x68082620
   1ad9c:	f04f2200 	.word	0xf04f2200
   1ada0:	e0024100 	.word	0xe0024100
   1ada4:	2a203201 	.word	0x2a203201
   1ada8:	4201d004 	.word	0x4201d004
   1adac:	0151ea4f 	.word	0x0151ea4f
   1adb0:	1ab3d0f8 	.word	0x1ab3d0f8
   1adb4:	031ff003 	.word	0x031ff003
   1adb8:	f0402b1f 	.word	0xf0402b1f
   1adbc:	2300819f 	.word	0x2300819f
   1adc0:	9b119302 	.word	0x9b119302
   1adc4:	9304a813 	.word	0x9304a813
   1adc8:	eba33b01 	.word	0xeba33b01
   1adcc:	93010809 	.word	0x93010809
   1add0:	1348ea4f 	.word	0x1348ea4f
   1add4:	93054619 	.word	0x93054619
   1add8:	f8fef7ff 	.word	0xf8fef7ff
   1addc:	28004606 	.word	0x28004606
   1ade0:	aed9f47f 	.word	0xaed9f47f
   1ade4:	0888ea4f 	.word	0x0888ea4f
   1ade8:	9818e00d 	.word	0x9818e00d
   1adec:	f850a910 	.word	0xf850a910
   1adf0:	aa133008 	.word	0xaa133008
   1adf4:	f8403301 	.word	0xf8403301
   1adf8:	46083008 	.word	0x46083008
   1adfc:	fca6f7ff 	.word	0xfca6f7ff
   1ae00:	f0402800 	.word	0xf0402800
   1ae04:	a9138179 	.word	0xa9138179
   1ae08:	f7ffa810 	.word	0xf7ffa810
   1ae0c:	2800fa0b 	.word	0x2800fa0b
   1ae10:	9905daeb 	.word	0x9905daeb
   1ae14:	f7ffa813 	.word	0xf7ffa813
   1ae18:	4606f995 	.word	0x4606f995
   1ae1c:	f47f2800 	.word	0xf47f2800
   1ae20:	f06faeba 	.word	0xf06faeba
   1ae24:	9a030303 	.word	0x9a030303
   1ae28:	b508e9cd 	.word	0xb508e9cd
   1ae2c:	4780f102 	.word	0x4780f102
   1ae30:	fb039a04 	.word	0xfb039a04
   1ae34:	f102f309 	.word	0xf102f309
   1ae38:	3a024280 	.word	0x3a024280
   1ae3c:	46150092 	.word	0x46150092
   1ae40:	ea4f9305 	.word	0xea4f9305
   1ae44:	93030389 	.word	0x93030389
   1ae48:	63c9ebc9 	.word	0x63c9ebc9
   1ae4c:	e9cd3f02 	.word	0xe9cd3f02
   1ae50:	e9cd3006 	.word	0xe9cd3006
   1ae54:	00b9a40a 	.word	0x00b9a40a
   1ae58:	9b019104 	.word	0x9b019104
   1ae5c:	f240454b 	.word	0xf240454b
   1ae60:	98038173 	.word	0x98038173
   1ae64:	9a159912 	.word	0x9a159912
   1ae68:	0a04f105 	.word	0x0a04f105
   1ae6c:	f8515812 	.word	0xf8515812
   1ae70:	9805300a 	.word	0x9805300a
   1ae74:	eb004293 	.word	0xeb004293
   1ae78:	9e180405 	.word	0x9e180405
   1ae7c:	814cf0c0 	.word	0x814cf0c0
   1ae80:	33fff04f 	.word	0x33fff04f
   1ae84:	26015133 	.word	0x26015133
   1ae88:	9f1e9a18 	.word	0x9f1e9a18
   1ae8c:	f1a55913 	.word	0xf1a55913
   1ae90:	44330b04 	.word	0x44330b04
   1ae94:	e04b5113 	.word	0xe04b5113
   1ae98:	806cf8dd 	.word	0x806cf8dd
   1ae9c:	46400092 	.word	0x46400092
   1aea0:	f0092100 	.word	0xf0092100
   1aea4:	2200f9c6 	.word	0x2200f9c6
   1aea8:	601a9b1b 	.word	0x601a9b1b
   1aeac:	f1b99619 	.word	0xf1b99619
   1aeb0:	f0000f00 	.word	0xf0000f00
   1aeb4:	9b1580f9 	.word	0x9b1580f9
   1aeb8:	589b9a04 	.word	0x589b9a04
   1aebc:	99039a1b 	.word	0x99039a1b
   1aec0:	9a156013 	.word	0x9a156013
   1aec4:	58529b1b 	.word	0x58529b1b
   1aec8:	605aa919 	.word	0x605aa919
   1aecc:	f10d9b18 	.word	0xf10d9b18
   1aed0:	591b083c 	.word	0x591b083c
   1aed4:	4608aa1f 	.word	0x4608aa1f
   1aed8:	e9cd930f 	.word	0xe9cd930f
   1aedc:	f8cd661f 	.word	0xf8cd661f
   1aee0:	f7ff8084 	.word	0xf7ff8084
   1aee4:	2800fcf3 	.word	0x2800fcf3
   1aee8:	8106f040 	.word	0x8106f040
   1aeec:	2a009a1d 	.word	0x2a009a1d
   1aef0:	80c2f000 	.word	0x80c2f000
   1aef4:	21000092 	.word	0x21000092
   1aef8:	f0094638 	.word	0xf0094638
   1aefc:	2300f99a 	.word	0x2300f99a
   1af00:	9b01603b 	.word	0x9b01603b
   1af04:	2b01961c 	.word	0x2b01961c
   1af08:	9b12a91c 	.word	0x9b12a91c
   1af0c:	80edf000 	.word	0x80edf000
   1af10:	300bf853 	.word	0x300bf853
   1af14:	603ba819 	.word	0x603ba819
   1af18:	595b9b12 	.word	0x595b9b12
   1af1c:	9b12607b 	.word	0x9b12607b
   1af20:	300af853 	.word	0x300af853
   1af24:	f7ff60bb 	.word	0xf7ff60bb
   1af28:	2800f97d 	.word	0x2800f97d
   1af2c:	811cf340 	.word	0x811cf340
   1af30:	59139a18 	.word	0x59139a18
   1af34:	51133b01 	.word	0x51133b01
   1af38:	2a009a1a 	.word	0x2a009a1a
   1af3c:	2104d1ac 	.word	0x2104d1ac
   1af40:	f0022001 	.word	0xf0022001
   1af44:	4680f901 	.word	0x4680f901
   1af48:	f0002800 	.word	0xf0002800
   1af4c:	991b8140 	.word	0x991b8140
   1af50:	9a1ab191 	.word	0x9a1ab191
   1af54:	f0090092 	.word	0xf0090092
   1af58:	e9ddf93f 	.word	0xe9ddf93f
   1af5c:	4602101a 	.word	0x4602101a
   1af60:	b1391e4b 	.word	0xb1391e4b
   1af64:	3b012100 	.word	0x3b012100
   1af68:	1c596011 	.word	0x1c596011
   1af6c:	0204f102 	.word	0x0204f102
   1af70:	981bd1f8 	.word	0x981bd1f8
   1af74:	f8fcf002 	.word	0xf8fcf002
   1af78:	e9cd2204 	.word	0xe9cd2204
   1af7c:	e78e681a 	.word	0xe78e681a
   1af80:	2029f858 	.word	0x2029f858
   1af84:	f43f2a00 	.word	0xf43f2a00
   1af88:	b355adf5 	.word	0xb355adf5
   1af8c:	b9ee686e 	.word	0xb9ee686e
   1af90:	20012104 	.word	0x20012104
   1af94:	f8d8f002 	.word	0xf8d8f002
   1af98:	b3904607 	.word	0xb3904607
   1af9c:	b18168a9 	.word	0xb18168a9
   1afa0:	0092686a 	.word	0x0092686a
   1afa4:	f918f009 	.word	0xf918f009
   1afa8:	2001e9d5 	.word	0x2001e9d5
   1afac:	b1321e53 	.word	0xb1321e53
   1afb0:	1c593b01 	.word	0x1c593b01
   1afb4:	f1006006 	.word	0xf1006006
   1afb8:	d1f90004 	.word	0xd1f90004
   1afbc:	f00268a8 	.word	0xf00268a8
   1afc0:	2301f8d7 	.word	0x2301f8d7
   1afc4:	e9c52204 	.word	0xe9c52204
   1afc8:	e0013701 	.word	0xe0013701
   1afcc:	00b268af 	.word	0x00b268af
   1afd0:	46382100 	.word	0x46382100
   1afd4:	f92df009 	.word	0xf92df009
   1afd8:	23012100 	.word	0x23012100
   1afdc:	601168aa 	.word	0x601168aa
   1afe0:	f1ba602b 	.word	0xf1ba602b
   1afe4:	d0070f00 	.word	0xd0070f00
   1afe8:	46504621 	.word	0x46504621
   1afec:	fcdcf7fe 	.word	0xfcdcf7fe
   1aff0:	28004606 	.word	0x28004606
   1aff4:	adcef47f 	.word	0xadcef47f
   1aff8:	46302600 	.word	0x46302600
   1affc:	e8bdb023 	.word	0xe8bdb023
   1b000:	27008ff0 	.word	0x27008ff0
   1b004:	060ff06f 	.word	0x060ff06f
   1b008:	2104e5c5 	.word	0x2104e5c5
   1b00c:	f0022001 	.word	0xf0022001
   1b010:	4606f89b 	.word	0x4606f89b
   1b014:	d0f42800 	.word	0xd0f42800
   1b018:	b1899918 	.word	0xb1899918
   1b01c:	00929a17 	.word	0x00929a17
   1b020:	f8daf009 	.word	0xf8daf009
   1b024:	3017e9dd 	.word	0x3017e9dd
   1b028:	b13b1e5a 	.word	0xb13b1e5a
   1b02c:	3a014643 	.word	0x3a014643
   1b030:	60031c57 	.word	0x60031c57
   1b034:	0004f100 	.word	0x0004f100
   1b038:	9818d1f9 	.word	0x9818d1f9
   1b03c:	f898f002 	.word	0xf898f002
   1b040:	22042301 	.word	0x22042301
   1b044:	3617e9cd 	.word	0x3617e9cd
   1b048:	231fe671 	.word	0x231fe671
   1b04c:	93024619 	.word	0x93024619
   1b050:	f7fea810 	.word	0xf7fea810
   1b054:	4606ffc1 	.word	0x4606ffc1
   1b058:	f47f2800 	.word	0xf47f2800
   1b05c:	9902ad9c 	.word	0x9902ad9c
   1b060:	f7fea813 	.word	0xf7fea813
   1b064:	4606ffb9 	.word	0x4606ffb9
   1b068:	f47f2800 	.word	0xf47f2800
   1b06c:	9b14ad94 	.word	0x9b14ad94
   1b070:	f1039303 	.word	0xf1039303
   1b074:	e6a439ff 	.word	0xe6a439ff
   1b078:	20012104 	.word	0x20012104
   1b07c:	f002920d 	.word	0xf002920d
   1b080:	4603f863 	.word	0x4603f863
   1b084:	f0002800 	.word	0xf0002800
   1b088:	b14780a2 	.word	0xb14780a2
   1b08c:	46399a0d 	.word	0x46399a0d
   1b090:	f009900c 	.word	0xf009900c
   1b094:	4638f8a1 	.word	0x4638f8a1
   1b098:	f86af002 	.word	0xf86af002
   1b09c:	461f9b0c 	.word	0x461f9b0c
   1b0a0:	e9cd2204 	.word	0xe9cd2204
   1b0a4:	e726631d 	.word	0xe726631d
   1b0a8:	e707464b 	.word	0xe707464b
   1b0ac:	20022104 	.word	0x20022104
   1b0b0:	f84af002 	.word	0xf84af002
   1b0b4:	28004606 	.word	0x28004606
   1b0b8:	991bd0a3 	.word	0x991bd0a3
   1b0bc:	9a1ab189 	.word	0x9a1ab189
   1b0c0:	f0090092 	.word	0xf0090092
   1b0c4:	e9ddf889 	.word	0xe9ddf889
   1b0c8:	4618131a 	.word	0x4618131a
   1b0cc:	b1311e4a 	.word	0xb1311e4a
   1b0d0:	1c503a01 	.word	0x1c503a01
   1b0d4:	f103601f 	.word	0xf103601f
   1b0d8:	d1f90304 	.word	0xd1f90304
   1b0dc:	f002981b 	.word	0xf002981b
   1b0e0:	2302f847 	.word	0x2302f847
   1b0e4:	361ae9cd 	.word	0x361ae9cd
   1b0e8:	595be62e 	.word	0x595be62e
   1b0ec:	e715a819 	.word	0xe715a819
   1b0f0:	f103015b 	.word	0xf103015b
   1b0f4:	e6510620 	.word	0xe6510620
   1b0f8:	e54c4606 	.word	0xe54c4606
   1b0fc:	031ff1c3 	.word	0x031ff1c3
   1b100:	46199302 	.word	0x46199302
   1b104:	ea4fe7a4 	.word	0xea4fe7a4
   1b108:	f1031349 	.word	0xf1031349
   1b10c:	e6450620 	.word	0xe6450620
   1b110:	26206808 	.word	0x26206808
   1b114:	e641464b 	.word	0xe641464b
   1b118:	b192594f 	.word	0xb192594f
   1b11c:	f04f469c 	.word	0xf04f469c
   1b120:	46610b00 	.word	0x46610b00
   1b124:	ea4b465b 	.word	0xea4b465b
   1b128:	f7f10007 	.word	0xf7f10007
   1b12c:	2300f8c9 	.word	0x2300f8c9
   1b130:	32fff04f 	.word	0x32fff04f
   1b134:	bf08428b 	.word	0xbf08428b
   1b138:	d2004282 	.word	0xd2004282
   1b13c:	51304610 	.word	0x51304610
   1b140:	f04fe6a1 	.word	0xf04fe6a1
   1b144:	e7fa30ff 	.word	0xe7fa30ff
   1b148:	6b07e9dd 	.word	0x6b07e9dd
   1b14c:	5a09e9dd 	.word	0x5a09e9dd
   1b150:	2d009c0b 	.word	0x2d009c0b
   1b154:	a916d05f 	.word	0xa916d05f
   1b158:	f7fe4628 	.word	0xf7fe4628
   1b15c:	2800fc25 	.word	0x2800fc25
   1b160:	4606d053 	.word	0x4606d053
   1b164:	e5169f1e 	.word	0xe5169f1e
   1b168:	9b182501 	.word	0x9b182501
   1b16c:	591baa1f 	.word	0x591baa1f
   1b170:	a819a913 	.word	0xa819a913
   1b174:	f8cd930f 	.word	0xf8cd930f
   1b178:	e9cd8084 	.word	0xe9cd8084
   1b17c:	f7ff551f 	.word	0xf7ff551f
   1b180:	2800fba5 	.word	0x2800fba5
   1b184:	9b06d1b8 	.word	0x9b06d1b8
   1b188:	f1039a01 	.word	0xf1039a01
   1b18c:	3b016300 	.word	0x3b016300
   1b190:	015e4413 	.word	0x015e4413
   1b194:	a8194631 	.word	0xa8194631
   1b198:	ff1ef7fe 	.word	0xff1ef7fe
   1b19c:	d1ab2800 	.word	0xd1ab2800
   1b1a0:	aa19a910 	.word	0xaa19a910
   1b1a4:	f7ff4608 	.word	0xf7ff4608
   1b1a8:	4603fad1 	.word	0x4603fad1
   1b1ac:	a91fbb58 	.word	0xa91fbb58
   1b1b0:	930fa810 	.word	0x930fa810
   1b1b4:	551fe9cd 	.word	0x551fe9cd
   1b1b8:	8084f8cd 	.word	0x8084f8cd
   1b1bc:	fb2ef7fe 	.word	0xfb2ef7fe
   1b1c0:	db072800 	.word	0xdb072800
   1b1c4:	465d9b01 	.word	0x465d9b01
   1b1c8:	93013b01 	.word	0x93013b01
   1b1cc:	f06fe645 	.word	0xf06fe645
   1b1d0:	e4e0060f 	.word	0xe4e0060f
   1b1d4:	a819a913 	.word	0xa819a913
   1b1d8:	fbe6f7fe 	.word	0xfbe6f7fe
   1b1dc:	d18b2800 	.word	0xd18b2800
   1b1e0:	a8194631 	.word	0xa8194631
   1b1e4:	fef8f7fe 	.word	0xfef8f7fe
   1b1e8:	d1852800 	.word	0xd1852800
   1b1ec:	aa19a910 	.word	0xaa19a910
   1b1f0:	f7ff4608 	.word	0xf7ff4608
   1b1f4:	2800fa37 	.word	0x2800fa37
   1b1f8:	af7ef47f 	.word	0xaf7ef47f
   1b1fc:	59139a18 	.word	0x59139a18
   1b200:	51133b01 	.word	0x51133b01
   1b204:	4606e7de 	.word	0x4606e7de
   1b208:	f8dbe4c5 	.word	0xf8dbe4c5
   1b20c:	68223000 	.word	0x68223000
   1b210:	f302fb03 	.word	0xf302fb03
   1b214:	f1ba602b 	.word	0xf1ba602b
   1b218:	d0050f00 	.word	0xd0050f00
   1b21c:	a8109902 	.word	0xa8109902
   1b220:	ff90f7fe 	.word	0xff90f7fe
   1b224:	b1084606 	.word	0xb1084606
   1b228:	e4b49f1e 	.word	0xe4b49f1e
   1b22c:	a9106823 	.word	0xa9106823
   1b230:	93104650 	.word	0x93104650
   1b234:	fbb8f7fe 	.word	0xfbb8f7fe
   1b238:	28004606 	.word	0x28004606
   1b23c:	2401d1f4 	.word	0x2401d1f4
   1b240:	a91fab0f 	.word	0xa91fab0f
   1b244:	960f4650 	.word	0x960f4650
   1b248:	441fe9cd 	.word	0x441fe9cd
   1b24c:	f7fe9321 	.word	0xf7fe9321
   1b250:	2800fae5 	.word	0x2800fae5
   1b254:	f8cad1e8 	.word	0xf8cad1e8
   1b258:	e7e54000 	.word	0xe7e54000

0001b25c <symbol_000dbba>:
   1b25c:	41f0e92d 	.word	0x41f0e92d
   1b260:	46176853 	.word	0x46176853
   1b264:	6894b183 	.word	0x6894b183
   1b268:	4580f103 	.word	0x4580f103
   1b26c:	f8543d01 	.word	0xf8543d01
   1b270:	eb042025 	.word	0xeb042025
   1b274:	b12a0485 	.word	0xb12a0485
   1b278:	f854e11a 	.word	0xf854e11a
   1b27c:	2d005d04 	.word	0x2d005d04
   1b280:	8116f040 	.word	0x8116f040
   1b284:	d1f83b01 	.word	0xd1f83b01
   1b288:	4606460a 	.word	0x4606460a
   1b28c:	463b4601 	.word	0x463b4601
   1b290:	f7ff2000 	.word	0xf7ff2000
   1b294:	2800fc21 	.word	0x2800fc21
   1b298:	f06fd151 	.word	0xf06fd151
   1b29c:	68714840 	.word	0x68714840
   1b2a0:	68b0b191 	.word	0x68b0b191
   1b2a4:	0308eb01 	.word	0x0308eb01
   1b2a8:	c023f850 	.word	0xc023f850
   1b2ac:	0283eb00 	.word	0x0283eb00
   1b2b0:	0f00f1bc 	.word	0x0f00f1bc
   1b2b4:	4614d156 	.word	0x4614d156
   1b2b8:	e003460b 	.word	0xe003460b
   1b2bc:	5d04f854 	.word	0x5d04f854
   1b2c0:	d14f2d00 	.word	0xd14f2d00
   1b2c4:	d1f93b01 	.word	0xd1f93b01
   1b2c8:	4440f06f 	.word	0x4440f06f
   1b2cc:	46304639 	.word	0x46304639
   1b2d0:	ffa8f7fe 	.word	0xffa8f7fe
   1b2d4:	db422800 	.word	0xdb422800
   1b2d8:	683b6835 	.word	0x683b6835
   1b2dc:	f305fb03 	.word	0xf305fb03
   1b2e0:	dd2e2b00 	.word	0xdd2e2b00
   1b2e4:	687a6873 	.word	0x687a6873
   1b2e8:	68b1b183 	.word	0x68b1b183
   1b2ec:	f8511918 	.word	0xf8511918
   1b2f0:	eb01c020 	.word	0xeb01c020
   1b2f4:	f1bc0180 	.word	0xf1bc0180
   1b2f8:	d0050f00 	.word	0xd0050f00
   1b2fc:	f851e090 	.word	0xf851e090
   1b300:	28000d04 	.word	0x28000d04
   1b304:	808cf040 	.word	0x808cf040
   1b308:	d1f83b01 	.word	0xd1f83b01
   1b30c:	f8d7b18a 	.word	0xf8d7b18a
   1b310:	1911c008 	.word	0x1911c008
   1b314:	0021f85c 	.word	0x0021f85c
   1b318:	f0402800 	.word	0xf0402800
   1b31c:	eb0c80be 	.word	0xeb0c80be
   1b320:	e0040181 	.word	0xe0040181
   1b324:	0d04f851 	.word	0x0d04f851
   1b328:	f0402800 	.word	0xf0402800
   1b32c:	3a018083 	.word	0x3a018083
   1b330:	463ad1f8 	.word	0x463ad1f8
   1b334:	46304631 	.word	0x46304631
   1b338:	f8d4f7ff 	.word	0xf8d4f7ff
   1b33c:	e8bdb140 	.word	0xe8bdb140
   1b340:	463a81f0 	.word	0x463a81f0
   1b344:	46304631 	.word	0x46304631
   1b348:	f828f7ff 	.word	0xf828f7ff
   1b34c:	d1f62800 	.word	0xd1f62800
   1b350:	46396035 	.word	0x46396035
   1b354:	f7fe4630 	.word	0xf7fe4630
   1b358:	2800ff65 	.word	0x2800ff65
   1b35c:	2000dabc 	.word	0x2000dabc
   1b360:	81f0e8bd 	.word	0x81f0e8bd
   1b364:	2c006834 	.word	0x2c006834
   1b368:	683bdaae 	.word	0x683bdaae
   1b36c:	f304fb03 	.word	0xf304fb03
   1b370:	da232b00 	.word	0xda232b00
   1b374:	0f00f1bc 	.word	0x0f00f1bc
   1b378:	4613d129 	.word	0x4613d129
   1b37c:	f853e002 	.word	0xf853e002
   1b380:	bb222d04 	.word	0xbb222d04
   1b384:	d1fa3901 	.word	0xd1fa3901
   1b388:	b173687b 	.word	0xb173687b
   1b38c:	c008f8d7 	.word	0xc008f8d7
   1b390:	0208eb03 	.word	0x0208eb03
   1b394:	5022f85c 	.word	0x5022f85c
   1b398:	0282eb0c 	.word	0x0282eb0c
   1b39c:	e071b11d 	.word	0xe071b11d
   1b3a0:	5d04f852 	.word	0x5d04f852
   1b3a4:	3b01bb05 	.word	0x3b01bb05
   1b3a8:	463ad1fa 	.word	0x463ad1fa
   1b3ac:	46304631 	.word	0x46304631
   1b3b0:	f898f7ff 	.word	0xf898f7ff
   1b3b4:	d1c22800 	.word	0xd1c22800
   1b3b8:	e7706034 	.word	0xe7706034
   1b3bc:	4631463a 	.word	0x4631463a
   1b3c0:	f7fe4630 	.word	0xf7fe4630
   1b3c4:	2800ffeb 	.word	0x2800ffeb
   1b3c8:	e8bdd0f6 	.word	0xe8bdd0f6
   1b3cc:	687b81f0 	.word	0x687b81f0
   1b3d0:	d0ea2b00 	.word	0xd0ea2b00
   1b3d4:	c008f8d7 	.word	0xc008f8d7
   1b3d8:	0208eb03 	.word	0x0208eb03
   1b3dc:	5022f85c 	.word	0x5022f85c
   1b3e0:	0282eb0c 	.word	0x0282eb0c
   1b3e4:	d0de2d00 	.word	0xd0de2d00
   1b3e8:	d8de4299 	.word	0xd8de4299
   1b3ec:	2900d34a 	.word	0x2900d34a
   1b3f0:	eb01d0db 	.word	0xeb01d0db
   1b3f4:	f8500308 	.word	0xf8500308
   1b3f8:	f85c2023 	.word	0xf85c2023
   1b3fc:	009b5023 	.word	0x009b5023
   1b400:	44184295 	.word	0x44184295
   1b404:	d3d04463 	.word	0xd3d04463
   1b408:	e03bd907 	.word	0xe03bd907
   1b40c:	5d04f850 	.word	0x5d04f850
   1b410:	2d04f853 	.word	0x2d04f853
   1b414:	d8c84295 	.word	0xd8c84295
   1b418:	3901d334 	.word	0x3901d334
   1b41c:	e7c4d1f6 	.word	0xe7c4d1f6
   1b420:	d0862a00 	.word	0xd0862a00
   1b424:	c008f8d7 	.word	0xc008f8d7
   1b428:	f85c1911 	.word	0xf85c1911
   1b42c:	28000021 	.word	0x28000021
   1b430:	af75f43f 	.word	0xaf75f43f
   1b434:	f63f4293 	.word	0xf63f4293
   1b438:	d32eaf7c 	.word	0xd32eaf7c
   1b43c:	f43f2b00 	.word	0xf43f2b00
   1b440:	68b1af78 	.word	0x68b1af78
   1b444:	f851191a 	.word	0xf851191a
   1b448:	f85c0022 	.word	0xf85c0022
   1b44c:	0092e022 	.word	0x0092e022
   1b450:	44114586 	.word	0x44114586
   1b454:	f4ff4462 	.word	0xf4ff4462
   1b458:	d908af6c 	.word	0xd908af6c
   1b45c:	f851e01d 	.word	0xf851e01d
   1b460:	f852cd04 	.word	0xf852cd04
   1b464:	45840d04 	.word	0x45840d04
   1b468:	af63f63f 	.word	0xaf63f63f
   1b46c:	3b01d315 	.word	0x3b01d315
   1b470:	463ad1f5 	.word	0x463ad1f5
   1b474:	46304631 	.word	0x46304631
   1b478:	f834f7ff 	.word	0xf834f7ff
   1b47c:	f47f2800 	.word	0xf47f2800
   1b480:	e765af5e 	.word	0xe765af5e
   1b484:	46394632 	.word	0x46394632
   1b488:	f7ff4630 	.word	0xf7ff4630
   1b48c:	2800f82b 	.word	0x2800f82b
   1b490:	af55f47f 	.word	0xaf55f47f
   1b494:	60344264 	.word	0x60344264
   1b498:	4632e701 	.word	0x4632e701
   1b49c:	46304639 	.word	0x46304639
   1b4a0:	f820f7ff 	.word	0xf820f7ff
   1b4a4:	f47f2800 	.word	0xf47f2800
   1b4a8:	426daf4a 	.word	0x426daf4a
   1b4ac:	e70d6035 	.word	0xe70d6035
   1b4b0:	2b00683b 	.word	0x2b00683b
   1b4b4:	aee8f6bf 	.word	0xaee8f6bf
   1b4b8:	0009f06f 	.word	0x0009f06f
   1b4bc:	bf00e73f 	.word	0xbf00e73f

0001b4c0 <symbol_0005f38>:
   1b4c0:	41f0e92d 	.word	0x41f0e92d
   1b4c4:	2501460f 	.word	0x2501460f
   1b4c8:	68bb2100 	.word	0x68bb2100
   1b4cc:	4604b086 	.word	0x4604b086
   1b4d0:	95004616 	.word	0x95004616
   1b4d4:	e9cd9503 	.word	0xe9cd9503
   1b4d8:	e9cd1101 	.word	0xe9cd1101
   1b4dc:	2b001104 	.word	0x2b001104
   1b4e0:	6879d040 	.word	0x6879d040
   1b4e4:	d0111e4a 	.word	0xd0111e4a
   1b4e8:	0022f853 	.word	0x0022f853
   1b4ec:	f0402800 	.word	0xf0402800
   1b4f0:	f10180c4 	.word	0xf10180c4
   1b4f4:	39014180 	.word	0x39014180
   1b4f8:	0381eb03 	.word	0x0381eb03
   1b4fc:	f853e004 	.word	0xf853e004
   1b500:	29001d04 	.word	0x29001d04
   1b504:	80b9f040 	.word	0x80b9f040
   1b508:	d1f83a01 	.word	0xd1f83a01
   1b50c:	683b2501 	.word	0x683b2501
   1b510:	21049300 	.word	0x21049300
   1b514:	f0014628 	.word	0xf0014628
   1b518:	4680fe17 	.word	0x4680fe17
   1b51c:	f0002800 	.word	0xf0002800
   1b520:	9902813c 	.word	0x9902813c
   1b524:	9a01b189 	.word	0x9a01b189
   1b528:	f0080092 	.word	0xf0080092
   1b52c:	e9ddfe55 	.word	0xe9ddfe55
   1b530:	1e532001 	.word	0x1e532001
   1b534:	2200b13a 	.word	0x2200b13a
   1b538:	1c593b01 	.word	0x1c593b01
   1b53c:	f1006002 	.word	0xf1006002
   1b540:	d1f90004 	.word	0xd1f90004
   1b544:	f0019802 	.word	0xf0019802
   1b548:	e9cdfe13 	.word	0xe9cdfe13
   1b54c:	00ad5801 	.word	0x00ad5801
   1b550:	2100462a 	.word	0x2100462a
   1b554:	f0084640 	.word	0xf0084640
   1b558:	462afe6c 	.word	0x462afe6c
   1b55c:	980268b9 	.word	0x980268b9
   1b560:	fe3af008 	.word	0xfe3af008
   1b564:	a8034631 	.word	0xa8034631
   1b568:	fa1ef7fe 	.word	0xfa1ef7fe
   1b56c:	28004607 	.word	0x28004607
   1b570:	9e01d15d 	.word	0x9e01d15d
   1b574:	f0002e00 	.word	0xf0002e00
   1b578:	4601810e 	.word	0x4601810e
   1b57c:	3d049d02 	.word	0x3d049d02
   1b580:	f8552200 	.word	0xf8552200
   1b584:	e0040f04 	.word	0xe0040f04
   1b588:	f1012a20 	.word	0xf1012a20
   1b58c:	f0000101 	.word	0xf0000101
   1b590:	fa208081 	.word	0xfa208081
   1b594:	f013f302 	.word	0xf013f302
   1b598:	f1020301 	.word	0xf1020301
   1b59c:	d0f30201 	.word	0xd0f30201
   1b5a0:	b1b59d04 	.word	0xb1b59d04
   1b5a4:	46842000 	.word	0x46842000
   1b5a8:	3f049f05 	.word	0x3f049f05
   1b5ac:	f8572200 	.word	0xf8572200
   1b5b0:	e0036f04 	.word	0xe0036f04
   1b5b4:	f1002a20 	.word	0xf1002a20
   1b5b8:	d0710001 	.word	0xd0710001
   1b5bc:	f302fa26 	.word	0xf302fa26
   1b5c0:	0301f013 	.word	0x0301f013
   1b5c4:	0201f102 	.word	0x0201f102
   1b5c8:	4281d0f4 	.word	0x4281d0f4
   1b5cc:	4601bf28 	.word	0x4601bf28
   1b5d0:	4668460d 	.word	0x4668460d
   1b5d4:	f7fe4629 	.word	0xf7fe4629
   1b5d8:	4607fdb5 	.word	0x4607fdb5
   1b5dc:	4629bb38 	.word	0x4629bb38
   1b5e0:	f7fea803 	.word	0xf7fea803
   1b5e4:	4607fdaf 	.word	0x4607fdaf
   1b5e8:	2301bb08 	.word	0x2301bb08
   1b5ec:	4640f06f 	.word	0x4640f06f
   1b5f0:	93009303 	.word	0x93009303
   1b5f4:	b17f9f01 	.word	0xb17f9f01
   1b5f8:	19ba9802 	.word	0x19ba9802
   1b5fc:	3022f850 	.word	0x3022f850
   1b600:	0282eb00 	.word	0x0282eb00
   1b604:	d1512b00 	.word	0xd1512b00
   1b608:	e003463b 	.word	0xe003463b
   1b60c:	1d04f852 	.word	0x1d04f852
   1b610:	d14b2900 	.word	0xd14b2900
   1b614:	d1f93b01 	.word	0xd1f93b01
   1b618:	a8034629 	.word	0xa8034629
   1b61c:	fcdcf7fe 	.word	0xfcdcf7fe
   1b620:	b9204607 	.word	0xb9204607
   1b624:	4620a903 	.word	0x4620a903
   1b628:	f9bef7fe 	.word	0xf9bef7fe
   1b62c:	98024607 	.word	0x98024607
   1b630:	9a01b160 	.word	0x9a01b160
   1b634:	b13a1e53 	.word	0xb13a1e53
   1b638:	3b012200 	.word	0x3b012200
   1b63c:	60021c5c 	.word	0x60021c5c
   1b640:	0004f100 	.word	0x0004f100
   1b644:	9802d1f9 	.word	0x9802d1f9
   1b648:	fd92f001 	.word	0xfd92f001
   1b64c:	23012200 	.word	0x23012200
   1b650:	e9cd9805 	.word	0xe9cd9805
   1b654:	92023200 	.word	0x92023200
   1b658:	9904b158 	.word	0x9904b158
   1b65c:	b1311e4b 	.word	0xb1311e4b
   1b660:	1c593b01 	.word	0x1c593b01
   1b664:	f1006002 	.word	0xf1006002
   1b668:	d1f90004 	.word	0xd1f90004
   1b66c:	f0019805 	.word	0xf0019805
   1b670:	4638fd7f 	.word	0x4638fd7f
   1b674:	e8bdb006 	.word	0xe8bdb006
   1b678:	f24281f0 	.word	0xf24281f0
   1b67c:	68397310 	.word	0x68397310
   1b680:	429d1c55 	.word	0x429d1c55
   1b684:	f2009100 	.word	0xf2009100
   1b688:	2d008083 	.word	0x2d008083
   1b68c:	af41f47f 	.word	0xaf41f47f
   1b690:	e75d46a8 	.word	0xe75d46a8
   1b694:	42be3701 	.word	0x42be3701
   1b698:	af72f47f 	.word	0xaf72f47f
   1b69c:	e77f4619 	.word	0xe77f4619
   1b6a0:	0c01f10c 	.word	0x0c01f10c
   1b6a4:	d18145ac 	.word	0xd18145ac
   1b6a8:	e792461d 	.word	0xe792461d
   1b6ac:	2b009b00 	.word	0x2b009b00
   1b6b0:	2100d0b2 	.word	0x2100d0b2
   1b6b4:	f1a0468e 	.word	0xf1a0468e
   1b6b8:	22000c04 	.word	0x22000c04
   1b6bc:	0f04f85c 	.word	0x0f04f85c
   1b6c0:	2a20e003 	.word	0x2a20e003
   1b6c4:	0101f101 	.word	0x0101f101
   1b6c8:	fa20d042 	.word	0xfa20d042
   1b6cc:	f013f302 	.word	0xf013f302
   1b6d0:	f1020301 	.word	0xf1020301
   1b6d4:	d0f40201 	.word	0xd0f40201
   1b6d8:	f7fe4668 	.word	0xf7fe4668
   1b6dc:	4607fd33 	.word	0x4607fd33
   1b6e0:	d1a42800 	.word	0xd1a42800
   1b6e4:	c010f8dd 	.word	0xc010f8dd
   1b6e8:	0f00f1bc 	.word	0x0f00f1bc
   1b6ec:	4601d04e 	.word	0x4601d04e
   1b6f0:	9f054686 	.word	0x9f054686
   1b6f4:	22003f04 	.word	0x22003f04
   1b6f8:	0f04f857 	.word	0x0f04f857
   1b6fc:	2a20e003 	.word	0x2a20e003
   1b700:	0101f101 	.word	0x0101f101
   1b704:	fa20d02a 	.word	0xfa20d02a
   1b708:	f013f302 	.word	0xf013f302
   1b70c:	f1020301 	.word	0xf1020301
   1b710:	d0f40201 	.word	0xd0f40201
   1b714:	f7fea803 	.word	0xf7fea803
   1b718:	4607fd15 	.word	0x4607fd15
   1b71c:	d1862800 	.word	0xd1862800
   1b720:	4668a903 	.word	0x4668a903
   1b724:	fd7ef7fe 	.word	0xfd7ef7fe
   1b728:	db1d2800 	.word	0xdb1d2800
   1b72c:	4669aa03 	.word	0x4669aa03
   1b730:	f7fe4668 	.word	0xf7fe4668
   1b734:	4607fed7 	.word	0x4607fed7
   1b738:	f47f2800 	.word	0xf47f2800
   1b73c:	2101af78 	.word	0x2101af78
   1b740:	f7fe4668 	.word	0xf7fe4668
   1b744:	4607fcff 	.word	0x4607fcff
   1b748:	f43f2800 	.word	0xf43f2800
   1b74c:	e76eaf53 	.word	0xe76eaf53
   1b750:	0e01f10e 	.word	0x0e01f10e
   1b754:	d1b045be 	.word	0xd1b045be
   1b758:	e7bd4619 	.word	0xe7bd4619
   1b75c:	0e01f10e 	.word	0x0e01f10e
   1b760:	d1c845e6 	.word	0xd1c845e6
   1b764:	e7d54619 	.word	0xe7d54619
   1b768:	466aa903 	.word	0x466aa903
   1b76c:	f7fe4608 	.word	0xf7fe4608
   1b770:	4607feb9 	.word	0x4607feb9
   1b774:	f47f2800 	.word	0xf47f2800
   1b778:	2101af5a 	.word	0x2101af5a
   1b77c:	f7fea803 	.word	0xf7fea803
   1b780:	4607fce1 	.word	0x4607fce1
   1b784:	f43f2800 	.word	0xf43f2800
   1b788:	e750af35 	.word	0xe750af35
   1b78c:	e7c14661 	.word	0xe7c14661
   1b790:	070ff06f 	.word	0x070ff06f
   1b794:	4631e75a 	.word	0x4631e75a
   1b798:	9802e702 	.word	0x9802e702
   1b79c:	070ff06f 	.word	0x070ff06f
   1b7a0:	bf00e746 	.word	0xbf00e746

0001b7a4 <symbol_000644e>:
   1b7a4:	43f0e92d 	.word	0x43f0e92d
   1b7a8:	6f80f5b1 	.word	0x6f80f5b1
   1b7ac:	4d04f2ad 	.word	0x4d04f2ad
   1b7b0:	80a5f200 	.word	0x80a5f200
   1b7b4:	4617460d 	.word	0x4617460d
   1b7b8:	46694606 	.word	0x46694606
   1b7bc:	462a4618 	.word	0x462a4618
   1b7c0:	460747b8 	.word	0x460747b8
   1b7c4:	4638b120 	.word	0x4638b120
   1b7c8:	4d04f20d 	.word	0x4d04f20d
   1b7cc:	83f0e8bd 	.word	0x83f0e8bd
   1b7d0:	f0002d00 	.word	0xf0002d00
   1b7d4:	f89d808a 	.word	0xf89d808a
   1b7d8:	2b003000 	.word	0x2b003000
   1b7dc:	8089f040 	.word	0x8089f040
   1b7e0:	4604466b 	.word	0x4604466b
   1b7e4:	f813e003 	.word	0xf813e003
   1b7e8:	2a002f01 	.word	0x2a002f01
   1b7ec:	3401d14d 	.word	0x3401d14d
   1b7f0:	d1f842a5 	.word	0xd1f842a5
   1b7f4:	8004f8d6 	.word	0x8004f8d6
   1b7f8:	0f00f1b8 	.word	0x0f00f1b8
   1b7fc:	2104d170 	.word	0x2104d170
   1b800:	f0012001 	.word	0xf0012001
   1b804:	4681fca1 	.word	0x4681fca1
   1b808:	d0752800 	.word	0xd0752800
   1b80c:	b18968b1 	.word	0xb18968b1
   1b810:	00926872 	.word	0x00926872
   1b814:	fce0f008 	.word	0xfce0f008
   1b818:	2001e9d6 	.word	0x2001e9d6
   1b81c:	b13a1e53 	.word	0xb13a1e53
   1b820:	3b014642 	.word	0x3b014642
   1b824:	60021c59 	.word	0x60021c59
   1b828:	0004f100 	.word	0x0004f100
   1b82c:	68b0d1f9 	.word	0x68b0d1f9
   1b830:	fc9ef001 	.word	0xfc9ef001
   1b834:	22042301 	.word	0x22042301
   1b838:	3901e9c6 	.word	0x3901e9c6
   1b83c:	46482100 	.word	0x46482100
   1b840:	fcf7f008 	.word	0xfcf7f008
   1b844:	22012300 	.word	0x22012300
   1b848:	42a568b1 	.word	0x42a568b1
   1b84c:	6032600b 	.word	0x6032600b
   1b850:	eb0dd9b9 	.word	0xeb0dd9b9
   1b854:	1b2c0205 	.word	0x1b2c0205
   1b858:	f02368b1 	.word	0xf02368b1
   1b85c:	ea4f0803 	.word	0xea4f0803
   1b860:	f8120ec3 	.word	0xf8120ec3
   1b864:	f851cd01 	.word	0xf851cd01
   1b868:	f00e0008 	.word	0xf00e0008
   1b86c:	fa0c0e18 	.word	0xfa0c0e18
   1b870:	3301fc0e 	.word	0x3301fc0e
   1b874:	000cea40 	.word	0x000cea40
   1b878:	f84142a3 	.word	0xf84142a3
   1b87c:	d1eb0008 	.word	0xd1eb0008
   1b880:	f20d4638 	.word	0xf20d4638
   1b884:	e8bd4d04 	.word	0xe8bd4d04
   1b888:	1b2a83f0 	.word	0x1b2a83f0
   1b88c:	0803f012 	.word	0x0803f012
   1b890:	f04fbf18 	.word	0xf04fbf18
   1b894:	f2420801 	.word	0xf2420801
   1b898:	eb087310 	.word	0xeb087310
   1b89c:	45980892 	.word	0x45980892
   1b8a0:	6873d82a 	.word	0x6873d82a
   1b8a4:	d92d4598 	.word	0xd92d4598
   1b8a8:	46402104 	.word	0x46402104
   1b8ac:	fc4cf001 	.word	0xfc4cf001
   1b8b0:	b3084681 	.word	0xb3084681
   1b8b4:	b18968b1 	.word	0xb18968b1
   1b8b8:	00926872 	.word	0x00926872
   1b8bc:	fc8cf008 	.word	0xfc8cf008
   1b8c0:	2001e9d6 	.word	0x2001e9d6
   1b8c4:	b13a1e53 	.word	0xb13a1e53
   1b8c8:	3b012200 	.word	0x3b012200
   1b8cc:	60021c59 	.word	0x60021c59
   1b8d0:	0004f100 	.word	0x0004f100
   1b8d4:	68b0d1f9 	.word	0x68b0d1f9
   1b8d8:	fc4af001 	.word	0xfc4af001
   1b8dc:	8901e9c6 	.word	0x8901e9c6
   1b8e0:	0288ea4f 	.word	0x0288ea4f
   1b8e4:	9008f8d6 	.word	0x9008f8d6
   1b8e8:	f8d6e7a8 	.word	0xf8d6e7a8
   1b8ec:	462c8004 	.word	0x462c8004
   1b8f0:	462ae782 	.word	0x462ae782
   1b8f4:	e7c94604 	.word	0xe7c94604
   1b8f8:	070ff06f 	.word	0x070ff06f
   1b8fc:	f06fe763 	.word	0xf06fe763
   1b900:	e7600703 	.word	0xe7600703
   1b904:	e7774698 	.word	0xe7774698

0001b908 <symbol_0004482>:
   1b908:	43f0e92d 	.word	0x43f0e92d
   1b90c:	b0a16853 	.word	0xb0a16853
   1b910:	6894b17b 	.word	0x6894b17b
   1b914:	4c80f103 	.word	0x4c80f103
   1b918:	3cfff10c 	.word	0x3cfff10c
   1b91c:	502cf854 	.word	0x502cf854
   1b920:	048ceb04 	.word	0x048ceb04
   1b924:	e00ab11d 	.word	0xe00ab11d
   1b928:	5d04f854 	.word	0x5d04f854
   1b92c:	3b01b93d 	.word	0x3b01b93d
   1b930:	f06fd1fa 	.word	0xf06fd1fa
   1b934:	46200403 	.word	0x46200403
   1b938:	e8bdb021 	.word	0xe8bdb021
   1b93c:	681383f0 	.word	0x681383f0
   1b940:	ddf62b00 	.word	0xddf62b00
   1b944:	23002401 	.word	0x23002401
   1b948:	a8024606 	.word	0xa8024606
   1b94c:	94089405 	.word	0x94089405
   1b950:	940e940b 	.word	0x940e940b
   1b954:	94119402 	.word	0x94119402
   1b958:	94179414 	.word	0x94179414
   1b95c:	460f941a 	.word	0x460f941a
   1b960:	e9cd4615 	.word	0xe9cd4615
   1b964:	e9cd3306 	.word	0xe9cd3306
   1b968:	e9cd3309 	.word	0xe9cd3309
   1b96c:	e9cd330c 	.word	0xe9cd330c
   1b970:	e9cd330f 	.word	0xe9cd330f
   1b974:	e9cd3303 	.word	0xe9cd3303
   1b978:	e9cd3312 	.word	0xe9cd3312
   1b97c:	e9cd3315 	.word	0xe9cd3315
   1b980:	e9cd3318 	.word	0xe9cd3318
   1b984:	f7ff331b 	.word	0xf7ff331b
   1b988:	4604fd9b 	.word	0x4604fd9b
   1b98c:	9b03b9a0 	.word	0x9b03b9a0
   1b990:	9904b183 	.word	0x9904b183
   1b994:	4480f103 	.word	0x4480f103
   1b998:	f8513c01 	.word	0xf8513c01
   1b99c:	eb012024 	.word	0xeb012024
   1b9a0:	b12a0484 	.word	0xb12a0484
   1b9a4:	f854e0b5 	.word	0xf854e0b5
   1b9a8:	2a002d04 	.word	0x2a002d04
   1b9ac:	80b1f040 	.word	0x80b1f040
   1b9b0:	d1f83b01 	.word	0xd1f83b01
   1b9b4:	040df06f 	.word	0x040df06f
   1b9b8:	b1609807 	.word	0xb1609807
   1b9bc:	1e539a06 	.word	0x1e539a06
   1b9c0:	2200b13a 	.word	0x2200b13a
   1b9c4:	1c593b01 	.word	0x1c593b01
   1b9c8:	f1006002 	.word	0xf1006002
   1b9cc:	d1f90004 	.word	0xd1f90004
   1b9d0:	f0019807 	.word	0xf0019807
   1b9d4:	2200fbcd 	.word	0x2200fbcd
   1b9d8:	980a2301 	.word	0x980a2301
   1b9dc:	3205e9cd 	.word	0x3205e9cd
   1b9e0:	b1589207 	.word	0xb1589207
   1b9e4:	1e4b9909 	.word	0x1e4b9909
   1b9e8:	3b01b131 	.word	0x3b01b131
   1b9ec:	60021c5f 	.word	0x60021c5f
   1b9f0:	0004f100 	.word	0x0004f100
   1b9f4:	980ad1f9 	.word	0x980ad1f9
   1b9f8:	fbbaf001 	.word	0xfbbaf001
   1b9fc:	23012200 	.word	0x23012200
   1ba00:	e9cd980d 	.word	0xe9cd980d
   1ba04:	920a3208 	.word	0x920a3208
   1ba08:	990cb158 	.word	0x990cb158
   1ba0c:	b1311e4b 	.word	0xb1311e4b
   1ba10:	1c5e3b01 	.word	0x1c5e3b01
   1ba14:	f1006002 	.word	0xf1006002
   1ba18:	d1f90004 	.word	0xd1f90004
   1ba1c:	f001980d 	.word	0xf001980d
   1ba20:	2200fba7 	.word	0x2200fba7
   1ba24:	98102301 	.word	0x98102301
   1ba28:	320be9cd 	.word	0x320be9cd
   1ba2c:	b158920d 	.word	0xb158920d
   1ba30:	1e4b990f 	.word	0x1e4b990f
   1ba34:	3b01b131 	.word	0x3b01b131
   1ba38:	60021c5d 	.word	0x60021c5d
   1ba3c:	0004f100 	.word	0x0004f100
   1ba40:	9810d1f9 	.word	0x9810d1f9
   1ba44:	fb94f001 	.word	0xfb94f001
   1ba48:	23012200 	.word	0x23012200
   1ba4c:	e9cd9804 	.word	0xe9cd9804
   1ba50:	9210320e 	.word	0x9210320e
   1ba54:	9903b158 	.word	0x9903b158
   1ba58:	b1311e4b 	.word	0xb1311e4b
   1ba5c:	1c593b01 	.word	0x1c593b01
   1ba60:	f1006002 	.word	0xf1006002
   1ba64:	d1f90004 	.word	0xd1f90004
   1ba68:	f0019804 	.word	0xf0019804
   1ba6c:	2200fb81 	.word	0x2200fb81
   1ba70:	98132301 	.word	0x98132301
   1ba74:	3202e9cd 	.word	0x3202e9cd
   1ba78:	b1589204 	.word	0xb1589204
   1ba7c:	1e4b9912 	.word	0x1e4b9912
   1ba80:	3b01b131 	.word	0x3b01b131
   1ba84:	60021c5f 	.word	0x60021c5f
   1ba88:	0004f100 	.word	0x0004f100
   1ba8c:	9813d1f9 	.word	0x9813d1f9
   1ba90:	fb6ef001 	.word	0xfb6ef001
   1ba94:	23012200 	.word	0x23012200
   1ba98:	e9cd9816 	.word	0xe9cd9816
   1ba9c:	92133211 	.word	0x92133211
   1baa0:	9915b158 	.word	0x9915b158
   1baa4:	b1311e4b 	.word	0xb1311e4b
   1baa8:	1c5e3b01 	.word	0x1c5e3b01
   1baac:	f1006002 	.word	0xf1006002
   1bab0:	d1f90004 	.word	0xd1f90004
   1bab4:	f0019816 	.word	0xf0019816
   1bab8:	2200fb5b 	.word	0x2200fb5b
   1babc:	98192301 	.word	0x98192301
   1bac0:	3214e9cd 	.word	0x3214e9cd
   1bac4:	b1589216 	.word	0xb1589216
   1bac8:	1e4b9918 	.word	0x1e4b9918
   1bacc:	3b01b131 	.word	0x3b01b131
   1bad0:	60021c5d 	.word	0x60021c5d
   1bad4:	0004f100 	.word	0x0004f100
   1bad8:	9819d1f9 	.word	0x9819d1f9
   1badc:	fb48f001 	.word	0xfb48f001
   1bae0:	23012200 	.word	0x23012200
   1bae4:	e9cd981c 	.word	0xe9cd981c
   1bae8:	92193217 	.word	0x92193217
   1baec:	f43f2800 	.word	0xf43f2800
   1baf0:	991baf22 	.word	0x991baf22
   1baf4:	b1311e4b 	.word	0xb1311e4b
   1baf8:	1c593b01 	.word	0x1c593b01
   1bafc:	f1006002 	.word	0xf1006002
   1bb00:	d1f90004 	.word	0xd1f90004
   1bb04:	f001981c 	.word	0xf001981c
   1bb08:	4620fb33 	.word	0x4620fb33
   1bb0c:	e8bdb021 	.word	0xe8bdb021
   1bb10:	2b0183f0 	.word	0x2b0183f0
   1bb14:	d96b9a02 	.word	0xd96b9a02
   1bb18:	f47f2a00 	.word	0xf47f2a00
   1bb1c:	4639af4b 	.word	0x4639af4b
   1bb20:	462aa805 	.word	0x462aa805
   1bb24:	fb9af7ff 	.word	0xfb9af7ff
   1bb28:	28004604 	.word	0x28004604
   1bb2c:	af44f47f 	.word	0xaf44f47f
   1bb30:	a905a808 	.word	0xa905a808
   1bb34:	ff38f7fd 	.word	0xff38f7fd
   1bb38:	28004604 	.word	0x28004604
   1bb3c:	af3cf47f 	.word	0xaf3cf47f
   1bb40:	4629a811 	.word	0x4629a811
   1bb44:	ff30f7fd 	.word	0xff30f7fd
   1bb48:	28004604 	.word	0x28004604
   1bb4c:	af34f47f 	.word	0xaf34f47f
   1bb50:	4629a814 	.word	0x4629a814
   1bb54:	ff28f7fd 	.word	0xff28f7fd
   1bb58:	28004604 	.word	0x28004604
   1bb5c:	af2cf47f 	.word	0xaf2cf47f
   1bb60:	2101a80b 	.word	0x2101a80b
   1bb64:	f8acf7fe 	.word	0xf8acf7fe
   1bb68:	28004604 	.word	0x28004604
   1bb6c:	af24f47f 	.word	0xaf24f47f
   1bb70:	a80e4601 	.word	0xa80e4601
   1bb74:	f8a4f7fe 	.word	0xf8a4f7fe
   1bb78:	28004604 	.word	0x28004604
   1bb7c:	af1cf47f 	.word	0xaf1cf47f
   1bb80:	a8174601 	.word	0xa8174601
   1bb84:	f89cf7fe 	.word	0xf89cf7fe
   1bb88:	28004604 	.word	0x28004604
   1bb8c:	af14f47f 	.word	0xaf14f47f
   1bb90:	2101a81a 	.word	0x2101a81a
   1bb94:	f894f7fe 	.word	0xf894f7fe
   1bb98:	28004604 	.word	0x28004604
   1bb9c:	af0cf47f 	.word	0xaf0cf47f
   1bba0:	f04f4681 	.word	0xf04f4681
   1bba4:	af010801 	.word	0xaf010801
   1bba8:	681b9b0a 	.word	0x681b9b0a
   1bbac:	d42c07da 	.word	0xd42c07da
   1bbb0:	a8082101 	.word	0xa8082101
   1bbb4:	fac6f7fe 	.word	0xfac6f7fe
   1bbb8:	28004604 	.word	0x28004604
   1bbbc:	aefcf47f 	.word	0xaefcf47f
   1bbc0:	681b9b0d 	.word	0x681b9b0d
   1bbc4:	d44407d8 	.word	0xd44407d8
   1bbc8:	681b9b10 	.word	0x681b9b10
   1bbcc:	d44007d9 	.word	0xd44007d9
   1bbd0:	a80b2101 	.word	0xa80b2101
   1bbd4:	fab6f7fe 	.word	0xfab6f7fe
   1bbd8:	28004604 	.word	0x28004604
   1bbdc:	aeecf47f 	.word	0xaeecf47f
   1bbe0:	a80e2101 	.word	0xa80e2101
   1bbe4:	faaef7fe 	.word	0xfaaef7fe
   1bbe8:	28004604 	.word	0x28004604
   1bbec:	e6e3d0dc 	.word	0xe6e3d0dc
   1bbf0:	f6ff2a00 	.word	0xf6ff2a00
   1bbf4:	680baedf 	.word	0x680baedf
   1bbf8:	d88d2b01 	.word	0xd88d2b01
   1bbfc:	d18e2b00 	.word	0xd18e2b00
   1bc00:	2a004252 	.word	0x2a004252
   1bc04:	aed6f47f 	.word	0xaed6f47f
   1bc08:	9b16e789 	.word	0x9b16e789
   1bc0c:	07d8681b 	.word	0x07d8681b
   1bc10:	2101d443 	.word	0x2101d443
   1bc14:	f7fea814 	.word	0xf7fea814
   1bc18:	4604fa95 	.word	0x4604fa95
   1bc1c:	f47f2800 	.word	0xf47f2800
   1bc20:	9b19aecb 	.word	0x9b19aecb
   1bc24:	07db681b 	.word	0x07db681b
   1bc28:	9b1cd425 	.word	0x9b1cd425
   1bc2c:	07dc681b 	.word	0x07dc681b
   1bc30:	2101d421 	.word	0x2101d421
   1bc34:	f7fea817 	.word	0xf7fea817
   1bc38:	4604fa85 	.word	0x4604fa85
   1bc3c:	f47f2800 	.word	0xf47f2800
   1bc40:	2101aebb 	.word	0x2101aebb
   1bc44:	f7fea81a 	.word	0xf7fea81a
   1bc48:	4604fa7d 	.word	0x4604fa7d
   1bc4c:	d0dc2800 	.word	0xd0dc2800
   1bc50:	a90be6b2 	.word	0xa90be6b2
   1bc54:	4608aa11 	.word	0x4608aa11
   1bc58:	fd04f7fe 	.word	0xfd04f7fe
   1bc5c:	28004604 	.word	0x28004604
   1bc60:	aeaaf47f 	.word	0xaeaaf47f
   1bc64:	aa05a90e 	.word	0xaa05a90e
   1bc68:	f7fe4608 	.word	0xf7fe4608
   1bc6c:	4604fd6f 	.word	0x4604fd6f
   1bc70:	d0ad2800 	.word	0xd0ad2800
   1bc74:	a917e6a0 	.word	0xa917e6a0
   1bc78:	4608aa11 	.word	0x4608aa11
   1bc7c:	fcf2f7fe 	.word	0xfcf2f7fe
   1bc80:	28004604 	.word	0x28004604
   1bc84:	ae98f47f 	.word	0xae98f47f
   1bc88:	aa05a91a 	.word	0xaa05a91a
   1bc8c:	f7fe4608 	.word	0xf7fe4608
   1bc90:	4604fd5d 	.word	0x4604fd5d
   1bc94:	d0cc2800 	.word	0xd0cc2800
   1bc98:	a914e68e 	.word	0xa914e68e
   1bc9c:	f7fea808 	.word	0xf7fea808
   1bca0:	2800fac1 	.word	0x2800fac1
   1bca4:	a908db3d 	.word	0xa908db3d
   1bca8:	4608aa14 	.word	0x4608aa14
   1bcac:	fd4ef7fe 	.word	0xfd4ef7fe
   1bcb0:	28004604 	.word	0x28004604
   1bcb4:	ae80f47f 	.word	0xae80f47f
   1bcb8:	aa17a90b 	.word	0xaa17a90b
   1bcbc:	f7fe4608 	.word	0xf7fe4608
   1bcc0:	4604fd45 	.word	0x4604fd45
   1bcc4:	f47f2800 	.word	0xf47f2800
   1bcc8:	a90eae77 	.word	0xa90eae77
   1bccc:	4608aa1a 	.word	0x4608aa1a
   1bcd0:	fd3cf7fe 	.word	0xfd3cf7fe
   1bcd4:	28004604 	.word	0x28004604
   1bcd8:	ae6ef47f 	.word	0xae6ef47f
   1bcdc:	a808a91d 	.word	0xa808a91d
   1bce0:	9004f8cd 	.word	0x9004f8cd
   1bce4:	881de9cd 	.word	0x881de9cd
   1bce8:	f7fd971f 	.word	0xf7fd971f
   1bcec:	2800fd97 	.word	0x2800fd97
   1bcf0:	af5af47f 	.word	0xaf5af47f
   1bcf4:	f04f4680 	.word	0xf04f4680
   1bcf8:	a91d0901 	.word	0xa91d0901
   1bcfc:	f8cda817 	.word	0xf8cda817
   1bd00:	e9cd8004 	.word	0xe9cd8004
   1bd04:	971f991d 	.word	0x971f991d
   1bd08:	fd88f7fd 	.word	0xfd88f7fd
   1bd0c:	da232800 	.word	0xda232800
   1bd10:	462aa917 	.word	0x462aa917
   1bd14:	f7fe4608 	.word	0xf7fe4608
   1bd18:	4604fca5 	.word	0x4604fca5
   1bd1c:	d0ec2800 	.word	0xd0ec2800
   1bd20:	a914e64a 	.word	0xa914e64a
   1bd24:	4608aa08 	.word	0x4608aa08
   1bd28:	fd10f7fe 	.word	0xfd10f7fe
   1bd2c:	28004604 	.word	0x28004604
   1bd30:	ae42f47f 	.word	0xae42f47f
   1bd34:	aa0ba917 	.word	0xaa0ba917
   1bd38:	f7fe4608 	.word	0xf7fe4608
   1bd3c:	4604fd07 	.word	0x4604fd07
   1bd40:	f47f2800 	.word	0xf47f2800
   1bd44:	a91aae39 	.word	0xa91aae39
   1bd48:	4608aa0e 	.word	0x4608aa0e
   1bd4c:	fcfef7fe 	.word	0xfcfef7fe
   1bd50:	28004604 	.word	0x28004604
   1bd54:	e62fd0c2 	.word	0xe62fd0c2
   1bd58:	a8174629 	.word	0xa8174629
   1bd5c:	fa62f7fe 	.word	0xfa62f7fe
   1bd60:	db082800 	.word	0xdb082800
   1bd64:	462aa917 	.word	0x462aa917
   1bd68:	f7fe4608 	.word	0xf7fe4608
   1bd6c:	4604fcef 	.word	0x4604fcef
   1bd70:	d0f12800 	.word	0xd0f12800
   1bd74:	a917e620 	.word	0xa917e620
   1bd78:	f7fd4630 	.word	0xf7fd4630
   1bd7c:	4604fe15 	.word	0x4604fe15
   1bd80:	bf00e61a 	.word	0xbf00e61a

0001bd84 <entropy_callback>:
   1bd84:	4c0ab538 	.word	0x4c0ab538
   1bd88:	78254b0a 	.word	0x78254b0a
   1bd8c:	bf282a07 	.word	0xbf282a07
   1bd90:	46082207 	.word	0x46082207
   1bd94:	1145eb03 	.word	0x1145eb03
   1bd98:	fa1ef008 	.word	0xfa1ef008
   1bd9c:	20007823 	.word	0x20007823
   1bda0:	b2db3301 	.word	0xb2db3301
   1bda4:	bf082b07 	.word	0xbf082b07
   1bda8:	70232300 	.word	0x70232300
   1bdac:	bf00bd38 	.word	0xbf00bd38
   1bdb0:	20026c5c 	.word	0x20026c5c
   1bdb4:	00025b7c 	.word	0x00025b7c

0001bdb8 <es256_key_generate>:
   1bdb8:	b0e5b5f0 	.word	0xb0e5b5f0
   1bdbc:	71a8f89d 	.word	0x71a8f89d
   1bdc0:	b152b158 	.word	0xb152b158
   1bdc4:	291fb14b 	.word	0x291fb14b
   1bdc8:	6819d907 	.word	0x6819d907
   1bdcc:	d904293f 	.word	0xd904293f
   1bdd0:	2955b13f 	.word	0x2955b13f
   1bdd4:	240cd805 	.word	0x240cd805
   1bdd8:	2416e000 	.word	0x2416e000
   1bddc:	b0654620 	.word	0xb0654620
   1bde0:	461dbdf0 	.word	0x461dbdf0
   1bde4:	21002304 	.word	0x21002304
   1bde8:	46164604 	.word	0x46164604
   1bdec:	f44fa814 	.word	0xf44fa814
   1bdf0:	f88d72a0 	.word	0xf88d72a0
   1bdf4:	f008300c 	.word	0xf008300c
   1bdf8:	a814fa1c 	.word	0xa814fa1c
   1bdfc:	fe12f7f6 	.word	0xfe12f7f6
   1be00:	49292300 	.word	0x49292300
   1be04:	a814461a 	.word	0xa814461a
   1be08:	f7f69300 	.word	0xf7f69300
   1be0c:	a814ff0d 	.word	0xa814ff0d
   1be10:	46212220 	.word	0x46212220
   1be14:	ff30f7f6 	.word	0xff30f7f6
   1be18:	a814b9b8 	.word	0xa814b9b8
   1be1c:	fe08f7f6 	.word	0xfe08f7f6
   1be20:	f10d4621 	.word	0xf10d4621
   1be24:	f007000d 	.word	0xf007000d
   1be28:	4604fa53 	.word	0x4604fa53
   1be2c:	b1c7b9b8 	.word	0xb1c7b9b8
   1be30:	f7f6a814 	.word	0xf7f6a814
   1be34:	2002f95d 	.word	0x2002f95d
   1be38:	f960f7f6 	.word	0xf960f7f6
   1be3c:	a8144601 	.word	0xa8144601
   1be40:	f96af7f6 	.word	0xf96af7f6
   1be44:	240eb1a8 	.word	0x240eb1a8
   1be48:	4a18e7c8 	.word	0x4a18e7c8
   1be4c:	78114b18 	.word	0x78114b18
   1be50:	22074620 	.word	0x22074620
   1be54:	1141eb03 	.word	0x1141eb03
   1be58:	f9bef008 	.word	0xf9bef008
   1be5c:	2423e7dd 	.word	0x2423e7dd
   1be60:	a903e7bc 	.word	0xa903e7bc
   1be64:	22401c70 	.word	0x22401c70
   1be68:	f9b6f008 	.word	0xf9b6f008
   1be6c:	602b2341 	.word	0x602b2341
   1be70:	2103e7b4 	.word	0x2103e7b4
   1be74:	f7f79815 	.word	0xf7f79815
   1be78:	2800f961 	.word	0x2800f961
   1be7c:	9815d1e3 	.word	0x9815d1e3
   1be80:	f100aa03 	.word	0xf100aa03
   1be84:	23410188 	.word	0x23410188
   1be88:	fc26f7f9 	.word	0xfc26f7f9
   1be8c:	d1da2800 	.word	0xd1da2800
   1be90:	a8144631 	.word	0xa8144631
   1be94:	f7f4682a 	.word	0xf7f4682a
   1be98:	23b2ffed 	.word	0x23b2ffed
   1be9c:	602b4604 	.word	0x602b4604
   1bea0:	d09b2800 	.word	0xd09b2800
   1bea4:	bf00e7cf 	.word	0xbf00e7cf
   1bea8:	0001bd85 	.word	0x0001bd85
   1beac:	20026c5c 	.word	0x20026c5c
   1beb0:	00025b7c 	.word	0x00025b7c

0001beb4 <bsd_os_application_irq_handler>:
   1beb4:	41f0e92d 	.word	0x41f0e92d
   1beb8:	f7f44c33 	.word	0xf7f44c33
   1bebc:	f04ff91f 	.word	0xf04ff91f
   1bec0:	4d320803 	.word	0x4d320803
   1bec4:	f1044f32 	.word	0xf1044f32
   1bec8:	e0040680 	.word	0xe0040680
   1becc:	d0062b04 	.word	0xd0062b04
   1bed0:	42b43408 	.word	0x42b43408
   1bed4:	f814d03b 	.word	0xf814d03b
   1bed8:	2b023c04 	.word	0x2b023c04
   1bedc:	6820d1f6 	.word	0x6820d1f6
   1bee0:	6803882a 	.word	0x6803882a
   1bee4:	429ab29b 	.word	0x429ab29b
   1bee8:	8a2ad033 	.word	0x8a2ad033
   1beec:	d032429a 	.word	0xd032429a
   1bef0:	429a8c2a 	.word	0x429a8c2a
   1bef4:	8e2ad031 	.word	0x8e2ad031
   1bef8:	d030429a 	.word	0xd030429a
   1befc:	2040f8b5 	.word	0x2040f8b5
   1bf00:	d036429a 	.word	0xd036429a
   1bf04:	2050f8b5 	.word	0x2050f8b5
   1bf08:	d034429a 	.word	0xd034429a
   1bf0c:	2060f8b5 	.word	0x2060f8b5
   1bf10:	d032429a 	.word	0xd032429a
   1bf14:	2070f8b5 	.word	0x2070f8b5
   1bf18:	d030429a 	.word	0xd030429a
   1bf1c:	2080f8b5 	.word	0x2080f8b5
   1bf20:	d02e429a 	.word	0xd02e429a
   1bf24:	2090f8b5 	.word	0x2090f8b5
   1bf28:	bf08429a 	.word	0xbf08429a
   1bf2c:	d1cf2309 	.word	0xd1cf2309
   1bf30:	1303eb05 	.word	0x1303eb05
   1bf34:	68d9685a 	.word	0x68d9685a
   1bf38:	b9904790 	.word	0xb9904790
   1bf3c:	68202201 	.word	0x68202201
   1bf40:	2c04f804 	.word	0x2c04f804
   1bf44:	340868fb 	.word	0x340868fb
   1bf48:	42b44798 	.word	0x42b44798
   1bf4c:	e8bdd1c3 	.word	0xe8bdd1c3
   1bf50:	230081f0 	.word	0x230081f0
   1bf54:	2301e7ec 	.word	0x2301e7ec
   1bf58:	2302e7ea 	.word	0x2302e7ea
   1bf5c:	2303e7e8 	.word	0x2303e7e8
   1bf60:	2802e7e6 	.word	0x2802e7e6
   1bf64:	2304bf0a 	.word	0x2304bf0a
   1bf68:	8c04f804 	.word	0x8c04f804
   1bf6c:	3c04f804 	.word	0x3c04f804
   1bf70:	2304e7ae 	.word	0x2304e7ae
   1bf74:	2305e7dc 	.word	0x2305e7dc
   1bf78:	2306e7da 	.word	0x2306e7da
   1bf7c:	2307e7d8 	.word	0x2307e7d8
   1bf80:	2308e7d6 	.word	0x2308e7d6
   1bf84:	bf00e7d4 	.word	0xbf00e7d4
   1bf88:	200215ac 	.word	0x200215ac
   1bf8c:	20021470 	.word	0x20021470
   1bf90:	20021510 	.word	0x20021510

0001bf94 <rpc_framework_init>:
   1bf94:	22a0b508 	.word	0x22a0b508
   1bf98:	48022100 	.word	0x48022100
   1bf9c:	f949f008 	.word	0xf949f008
   1bfa0:	bd082000 	.word	0xbd082000
   1bfa4:	20021470 	.word	0x20021470

0001bfa8 <rpc_client_register>:
   1bfa8:	2b008803 	.word	0x2b008803
   1bfac:	6842d045 	.word	0x6842d045
   1bfb0:	2a004601 	.word	0x2a004601
   1bfb4:	4a30d050 	.word	0x4a30d050
   1bfb8:	42838810 	.word	0x42838810
   1bfbc:	e92dd03d 	.word	0xe92dd03d
   1bfc0:	8a1447f0 	.word	0x8a1447f0
   1bfc4:	d03542a3 	.word	0xd03542a3
   1bfc8:	42ab8c15 	.word	0x42ab8c15
   1bfcc:	8e16d032 	.word	0x8e16d032
   1bfd0:	d02f42b3 	.word	0xd02f42b3
   1bfd4:	7040f8b2 	.word	0x7040f8b2
   1bfd8:	d02b42bb 	.word	0xd02b42bb
   1bfdc:	c050f8b2 	.word	0xc050f8b2
   1bfe0:	d0274563 	.word	0xd0274563
   1bfe4:	e060f8b2 	.word	0xe060f8b2
   1bfe8:	d0234573 	.word	0xd0234573
   1bfec:	8070f8b2 	.word	0x8070f8b2
   1bff0:	d01f4543 	.word	0xd01f4543
   1bff4:	9080f8b2 	.word	0x9080f8b2
   1bff8:	d01b454b 	.word	0xd01b454b
   1bffc:	a090f8b2 	.word	0xa090f8b2
   1c000:	d0174553 	.word	0xd0174553
   1c004:	b35cb1e0 	.word	0xb35cb1e0
   1c008:	b36eb365 	.word	0xb36eb365
   1c00c:	f1bcb377 	.word	0xf1bcb377
   1c010:	d02d0f00 	.word	0xd02d0f00
   1c014:	0f00f1be 	.word	0x0f00f1be
   1c018:	f1b8d020 	.word	0xf1b8d020
   1c01c:	d0290f00 	.word	0xd0290f00
   1c020:	0f00f1b9 	.word	0x0f00f1b9
   1c024:	2009d00b 	.word	0x2009d00b
   1c028:	0f00f1ba 	.word	0x0f00f1ba
   1c02c:	2004d008 	.word	0x2004d008
   1c030:	87f0e8bd 	.word	0x87f0e8bd
   1c034:	e8bd2007 	.word	0xe8bd2007
   1c038:	200787f0 	.word	0x200787f0
   1c03c:	20084770 	.word	0x20084770
   1c040:	52130100 	.word	0x52130100
   1c044:	4402684b 	.word	0x4402684b
   1c048:	688b6053 	.word	0x688b6053
   1c04c:	60932000 	.word	0x60932000
   1c050:	60d368cb 	.word	0x60d368cb
   1c054:	87f0e8bd 	.word	0x87f0e8bd
   1c058:	4770200e 	.word	0x4770200e
   1c05c:	e7ef2006 	.word	0xe7ef2006
   1c060:	e7ed2001 	.word	0xe7ed2001
   1c064:	e7eb2002 	.word	0xe7eb2002
   1c068:	e7e92003 	.word	0xe7e92003
   1c06c:	e7e72004 	.word	0xe7e72004
   1c070:	e7e52005 	.word	0xe7e52005
   1c074:	e7e32007 	.word	0xe7e32007
   1c078:	20021470 	.word	0x20021470

0001c07c <rpc_transport_input>:
   1c07c:	4a82b538 	.word	0x4a82b538
   1c080:	8810680b 	.word	0x8810680b
   1c084:	4298b29b 	.word	0x4298b29b
   1c088:	8a10d027 	.word	0x8a10d027
   1c08c:	d0244298 	.word	0xd0244298
   1c090:	42988c10 	.word	0x42988c10
   1c094:	8e10d021 	.word	0x8e10d021
   1c098:	d01e4298 	.word	0xd01e4298
   1c09c:	0040f8b2 	.word	0x0040f8b2
   1c0a0:	d01a4298 	.word	0xd01a4298
   1c0a4:	0050f8b2 	.word	0x0050f8b2
   1c0a8:	d0164298 	.word	0xd0164298
   1c0ac:	0060f8b2 	.word	0x0060f8b2
   1c0b0:	d0124298 	.word	0xd0124298
   1c0b4:	0070f8b2 	.word	0x0070f8b2
   1c0b8:	d00e4298 	.word	0xd00e4298
   1c0bc:	0080f8b2 	.word	0x0080f8b2
   1c0c0:	d00a4298 	.word	0xd00a4298
   1c0c4:	2090f8b2 	.word	0x2090f8b2
   1c0c8:	d006429a 	.word	0xd006429a
   1c0cc:	b1186888 	.word	0xb1186888
   1c0d0:	691b4b6e 	.word	0x691b4b6e
   1c0d4:	20004798 	.word	0x20004798
   1c0d8:	6888bd38 	.word	0x6888bd38
   1c0dc:	f0002800 	.word	0xf0002800
   1c0e0:	4a6b8098 	.word	0x4a6b8098
   1c0e4:	2c006814 	.word	0x2c006814
   1c0e8:	6894d03c 	.word	0x6894d03c
   1c0ec:	f0002c00 	.word	0xf0002c00
   1c0f0:	6914809a 	.word	0x6914809a
   1c0f4:	f0002c00 	.word	0xf0002c00
   1c0f8:	6994809a 	.word	0x6994809a
   1c0fc:	f0002c00 	.word	0xf0002c00
   1c100:	6a14809a 	.word	0x6a14809a
   1c104:	f0002c00 	.word	0xf0002c00
   1c108:	6a94809a 	.word	0x6a94809a
   1c10c:	f0002c00 	.word	0xf0002c00
   1c110:	6b148084 	.word	0x6b148084
   1c114:	f0002c00 	.word	0xf0002c00
   1c118:	6b948098 	.word	0x6b948098
   1c11c:	f0002c00 	.word	0xf0002c00
   1c120:	6c148096 	.word	0x6c148096
   1c124:	f0002c00 	.word	0xf0002c00
   1c128:	6c948096 	.word	0x6c948096
   1c12c:	f0002c00 	.word	0xf0002c00
   1c130:	6d148096 	.word	0x6d148096
   1c134:	f0002c00 	.word	0xf0002c00
   1c138:	6d948096 	.word	0x6d948096
   1c13c:	f0002c00 	.word	0xf0002c00
   1c140:	6e148098 	.word	0x6e148098
   1c144:	f0002c00 	.word	0xf0002c00
   1c148:	6e948098 	.word	0x6e948098
   1c14c:	f0002c00 	.word	0xf0002c00
   1c150:	6f148096 	.word	0x6f148096
   1c154:	f0002c00 	.word	0xf0002c00
   1c158:	6f948094 	.word	0x6f948094
   1c15c:	2001b10c 	.word	0x2001b10c
   1c160:	240fbd38 	.word	0x240fbd38
   1c164:	05c4eb02 	.word	0x05c4eb02
   1c168:	0034f842 	.word	0x0034f842
   1c16c:	4b4980ab 	.word	0x4b4980ab
   1c170:	2a01781a 	.word	0x2a01781a
   1c174:	7a1ad053 	.word	0x7a1ad053
   1c178:	d0412a01 	.word	0xd0412a01
   1c17c:	2a017c1a 	.word	0x2a017c1a
   1c180:	7e1ad04f 	.word	0x7e1ad04f
   1c184:	d0502a01 	.word	0xd0502a01
   1c188:	2020f893 	.word	0x2020f893
   1c18c:	d0502a01 	.word	0xd0502a01
   1c190:	2028f893 	.word	0x2028f893
   1c194:	d0502a01 	.word	0xd0502a01
   1c198:	2030f893 	.word	0x2030f893
   1c19c:	d03a2a01 	.word	0xd03a2a01
   1c1a0:	2038f893 	.word	0x2038f893
   1c1a4:	d04c2a01 	.word	0xd04c2a01
   1c1a8:	2040f893 	.word	0x2040f893
   1c1ac:	d04a2a01 	.word	0xd04a2a01
   1c1b0:	2048f893 	.word	0x2048f893
   1c1b4:	d04c2a01 	.word	0xd04c2a01
   1c1b8:	2050f893 	.word	0x2050f893
   1c1bc:	d04c2a01 	.word	0xd04c2a01
   1c1c0:	2058f893 	.word	0x2058f893
   1c1c4:	d04c2a01 	.word	0xd04c2a01
   1c1c8:	2060f893 	.word	0x2060f893
   1c1cc:	d04c2a01 	.word	0xd04c2a01
   1c1d0:	2068f893 	.word	0x2068f893
   1c1d4:	d04a2a01 	.word	0xd04a2a01
   1c1d8:	2070f893 	.word	0x2070f893
   1c1dc:	d04a2a01 	.word	0xd04a2a01
   1c1e0:	2078f893 	.word	0x2078f893
   1c1e4:	d00a2a01 	.word	0xd00a2a01
   1c1e8:	d0b82c10 	.word	0xd0b82c10
   1c1ec:	4b282200 	.word	0x4b282200
   1c1f0:	eb032001 	.word	0xeb032001
   1c1f4:	808a01c4 	.word	0x808a01c4
   1c1f8:	2034f843 	.word	0x2034f843
   1c1fc:	220fbd38 	.word	0x220fbd38
   1c200:	eb032402 	.word	0xeb032402
   1c204:	f80300c2 	.word	0xf80300c2
   1c208:	60414032 	.word	0x60414032
   1c20c:	ff6ef7f3 	.word	0xff6ef7f3
   1c210:	2410e7a5 	.word	0x2410e7a5
   1c214:	2206e7ab 	.word	0x2206e7ab
   1c218:	2405e7f2 	.word	0x2405e7f2
   1c21c:	2200e7a2 	.word	0x2200e7a2
   1c220:	2202e7ee 	.word	0x2202e7ee
   1c224:	2401e7ec 	.word	0x2401e7ec
   1c228:	2203e79c 	.word	0x2203e79c
   1c22c:	2402e7e8 	.word	0x2402e7e8
   1c230:	2204e798 	.word	0x2204e798
   1c234:	2403e7e4 	.word	0x2403e7e4
   1c238:	2205e794 	.word	0x2205e794
   1c23c:	2404e7e0 	.word	0x2404e7e0
   1c240:	2207e790 	.word	0x2207e790
   1c244:	2208e7dc 	.word	0x2208e7dc
   1c248:	2406e7da 	.word	0x2406e7da
   1c24c:	2407e78a 	.word	0x2407e78a
   1c250:	2209e788 	.word	0x2209e788
   1c254:	2408e7d4 	.word	0x2408e7d4
   1c258:	220ae784 	.word	0x220ae784
   1c25c:	2409e7d0 	.word	0x2409e7d0
   1c260:	220be780 	.word	0x220be780
   1c264:	240ae7cc 	.word	0x240ae7cc
   1c268:	220ce77c 	.word	0x220ce77c
   1c26c:	220de7c8 	.word	0x220de7c8
   1c270:	240be7c6 	.word	0x240be7c6
   1c274:	220ee776 	.word	0x220ee776
   1c278:	240ce7c2 	.word	0x240ce7c2
   1c27c:	240de772 	.word	0x240de772
   1c280:	240ee770 	.word	0x240ee770
   1c284:	bf00e76e 	.word	0xbf00e76e
   1c288:	20021470 	.word	0x20021470
   1c28c:	20021510 	.word	0x20021510
   1c290:	20021528 	.word	0x20021528
   1c294:	200215a8 	.word	0x200215a8

0001c298 <rpc_transport_register>:
   1c298:	2900b4f0 	.word	0x2900b4f0
   1c29c:	2800d052 	.word	0x2800d052
   1c2a0:	6883d050 	.word	0x6883d050
   1c2a4:	d04d2b00 	.word	0xd04d2b00
   1c2a8:	2b006903 	.word	0x2b006903
   1c2ac:	6843d04a 	.word	0x6843d04a
   1c2b0:	d0472b00 	.word	0xd0472b00
   1c2b4:	2b0068c3 	.word	0x2b0068c3
   1c2b8:	6803d044 	.word	0x6803d044
   1c2bc:	d0412b00 	.word	0xd0412b00
   1c2c0:	2b006943 	.word	0x2b006943
   1c2c4:	2601d03e 	.word	0x2601d03e
   1c2c8:	46042500 	.word	0x46042500
   1c2cc:	4a1f460f 	.word	0x4a1f460f
   1c2d0:	f8df4b1f 	.word	0xf8df4b1f
   1c2d4:	7416c080 	.word	0x7416c080
   1c2d8:	f8827616 	.word	0xf8827616
   1c2dc:	f8826020 	.word	0xf8826020
   1c2e0:	f8826028 	.word	0xf8826028
   1c2e4:	f8826030 	.word	0xf8826030
   1c2e8:	f8826038 	.word	0xf8826038
   1c2ec:	f8826040 	.word	0xf8826040
   1c2f0:	f8826048 	.word	0xf8826048
   1c2f4:	f8826050 	.word	0xf8826050
   1c2f8:	f8826058 	.word	0xf8826058
   1c2fc:	f8826060 	.word	0xf8826060
   1c300:	f8826068 	.word	0xf8826068
   1c304:	f8826070 	.word	0xf8826070
   1c308:	611d6078 	.word	0x611d6078
   1c30c:	621d619d 	.word	0x621d619d
   1c310:	631d629d 	.word	0x631d629d
   1c314:	641d639d 	.word	0x641d639d
   1c318:	651d649d 	.word	0x651d649d
   1c31c:	661d659d 	.word	0x661d659d
   1c320:	671d669d 	.word	0x671d669d
   1c324:	7016679d 	.word	0x7016679d
   1c328:	601d7216 	.word	0x601d7216
   1c32c:	cc0f609d 	.word	0xcc0f609d
   1c330:	000fe8ac 	.word	0x000fe8ac
   1c334:	0003e894 	.word	0x0003e894
   1c338:	0003e88c 	.word	0x0003e88c
   1c33c:	4628603e 	.word	0x4628603e
   1c340:	4770bcf0 	.word	0x4770bcf0
   1c344:	4628250e 	.word	0x4628250e
   1c348:	4770bcf0 	.word	0x4770bcf0
   1c34c:	200215a8 	.word	0x200215a8
   1c350:	20021528 	.word	0x20021528
   1c354:	20021510 	.word	0x20021510

0001c358 <rpc_transport_unregister>:
   1c358:	d03a2800 	.word	0xd03a2800
   1c35c:	47f0e92d 	.word	0x47f0e92d
   1c360:	4c1d4680 	.word	0x4c1d4680
   1c364:	05a0f104 	.word	0x05a0f104
   1c368:	341068a3 	.word	0x341068a3
   1c36c:	4798b103 	.word	0x4798b103
   1c370:	d1f942ac 	.word	0xd1f942ac
   1c374:	0901f04f 	.word	0x0901f04f
   1c378:	4c182600 	.word	0x4c182600
   1c37c:	f8df4d18 	.word	0xf8df4d18
   1c380:	f104a064 	.word	0xf104a064
   1c384:	f8140780 	.word	0xf8140780
   1c388:	2b013c04 	.word	0x2b013c04
   1c38c:	f8dad005 	.word	0xf8dad005
   1c390:	6820300c 	.word	0x6820300c
   1c394:	f8044798 	.word	0xf8044798
   1c398:	f8559c04 	.word	0xf8559c04
   1c39c:	34080c04 	.word	0x34080c04
   1c3a0:	f8dab128 	.word	0xf8dab128
   1c3a4:	47983010 	.word	0x47983010
   1c3a8:	f845802e 	.word	0xf845802e
   1c3ac:	42bc6c04 	.word	0x42bc6c04
   1c3b0:	0508f105 	.word	0x0508f105
   1c3b4:	f8d8d1e7 	.word	0xf8d8d1e7
   1c3b8:	22180000 	.word	0x22180000
   1c3bc:	eb003801 	.word	0xeb003801
   1c3c0:	eb0a0040 	.word	0xeb0a0040
   1c3c4:	210000c0 	.word	0x210000c0
   1c3c8:	ff33f007 	.word	0xff33f007
   1c3cc:	e8bd2000 	.word	0xe8bd2000
   1c3d0:	200e87f0 	.word	0x200e87f0
   1c3d4:	bf004770 	.word	0xbf004770
   1c3d8:	20021470 	.word	0x20021470
   1c3dc:	200215ac 	.word	0x200215ac
   1c3e0:	2002152c 	.word	0x2002152c
   1c3e4:	20021510 	.word	0x20021510

0001c3e8 <rpc_message_send>:
   1c3e8:	b171b168 	.word	0xb171b168
   1c3ec:	68534a09 	.word	0x68534a09
   1c3f0:	684bb16b 	.word	0x684bb16b
   1c3f4:	f0238008 	.word	0xf0238008
   1c3f8:	f04303ff 	.word	0xf04303ff
   1c3fc:	68120302 	.word	0x68120302
   1c400:	4608604b 	.word	0x4608604b
   1c404:	20074710 	.word	0x20074710
   1c408:	200e4770 	.word	0x200e4770
   1c40c:	20084770 	.word	0x20084770
   1c410:	bf004770 	.word	0xbf004770
   1c414:	20021510 	.word	0x20021510

0001c418 <rpc_message_alloc>:
   1c418:	b330b35a 	.word	0xb330b35a
   1c41c:	e92d2300 	.word	0xe92d2300
   1c420:	4f1541f0 	.word	0x4f1541f0
   1c424:	687b6013 	.word	0x687b6013
   1c428:	4615b30b 	.word	0x4615b30b
   1c42c:	4606460c 	.word	0x4606460c
   1c430:	4798b959 	.word	0x4798b959
   1c434:	b1a84603 	.word	0xb1a84603
   1c438:	60dc46a0 	.word	0x60dc46a0
   1c43c:	8008f8c3 	.word	0x8008f8c3
   1c440:	602b801e 	.word	0x602b801e
   1c444:	e8bd2000 	.word	0xe8bd2000
   1c448:	68bb81f0 	.word	0x68bb81f0
   1c44c:	47984608 	.word	0x47984608
   1c450:	b1384680 	.word	0xb1384680
   1c454:	4798687b 	.word	0x4798687b
   1c458:	28004603 	.word	0x28004603
   1c45c:	693bd1ed 	.word	0x693bd1ed
   1c460:	47984640 	.word	0x47984640
   1c464:	e8bd2004 	.word	0xe8bd2004
   1c468:	200781f0 	.word	0x200781f0
   1c46c:	20084770 	.word	0x20084770
   1c470:	200ee7f9 	.word	0x200ee7f9
   1c474:	bf004770 	.word	0xbf004770
   1c478:	20021510 	.word	0x20021510

0001c47c <rpc_message_free>:
   1c47c:	f0002800 	.word	0xf0002800
   1c480:	2900808c 	.word	0x2900808c
   1c484:	80e9f000 	.word	0x80e9f000
   1c488:	4a83b538 	.word	0x4a83b538
   1c48c:	2b006853 	.word	0x2b006853
   1c490:	8085f000 	.word	0x8085f000
   1c494:	46084c81 	.word	0x46084c81
   1c498:	42996863 	.word	0x42996863
   1c49c:	8085f000 	.word	0x8085f000
   1c4a0:	429868e3 	.word	0x429868e3
   1c4a4:	808ef000 	.word	0x808ef000
   1c4a8:	42986963 	.word	0x42986963
   1c4ac:	8090f000 	.word	0x8090f000
   1c4b0:	429869e3 	.word	0x429869e3
   1c4b4:	8092f000 	.word	0x8092f000
   1c4b8:	42986a63 	.word	0x42986a63
   1c4bc:	8095f000 	.word	0x8095f000
   1c4c0:	42986ae3 	.word	0x42986ae3
   1c4c4:	8098f000 	.word	0x8098f000
   1c4c8:	42986b63 	.word	0x42986b63
   1c4cc:	809bf000 	.word	0x809bf000
   1c4d0:	42986be3 	.word	0x42986be3
   1c4d4:	809ef000 	.word	0x809ef000
   1c4d8:	42986c63 	.word	0x42986c63
   1c4dc:	80a1f000 	.word	0x80a1f000
   1c4e0:	42986ce3 	.word	0x42986ce3
   1c4e4:	80a4f000 	.word	0x80a4f000
   1c4e8:	42986d63 	.word	0x42986d63
   1c4ec:	80a7f000 	.word	0x80a7f000
   1c4f0:	42986de3 	.word	0x42986de3
   1c4f4:	80aaf000 	.word	0x80aaf000
   1c4f8:	42986e63 	.word	0x42986e63
   1c4fc:	80aff000 	.word	0x80aff000
   1c500:	42986ee3 	.word	0x42986ee3
   1c504:	80b2f000 	.word	0x80b2f000
   1c508:	42986f63 	.word	0x42986f63
   1c50c:	80b5f000 	.word	0x80b5f000
   1c510:	42836fe3 	.word	0x42836fe3
   1c514:	80b8f000 	.word	0x80b8f000
   1c518:	479868d3 	.word	0x479868d3
   1c51c:	2b047823 	.word	0x2b047823
   1c520:	7a23d03f 	.word	0x7a23d03f
   1c524:	d03c2b04 	.word	0xd03c2b04
   1c528:	2b047c23 	.word	0x2b047c23
   1c52c:	7e23d039 	.word	0x7e23d039
   1c530:	d0362b04 	.word	0xd0362b04
   1c534:	3020f894 	.word	0x3020f894
   1c538:	d0322b04 	.word	0xd0322b04
   1c53c:	3028f894 	.word	0x3028f894
   1c540:	d02e2b04 	.word	0xd02e2b04
   1c544:	3030f894 	.word	0x3030f894
   1c548:	d02a2b04 	.word	0xd02a2b04
   1c54c:	3038f894 	.word	0x3038f894
   1c550:	d0262b04 	.word	0xd0262b04
   1c554:	3040f894 	.word	0x3040f894
   1c558:	d0222b04 	.word	0xd0222b04
   1c55c:	3048f894 	.word	0x3048f894
   1c560:	d01e2b04 	.word	0xd01e2b04
   1c564:	3050f894 	.word	0x3050f894
   1c568:	d01a2b04 	.word	0xd01a2b04
   1c56c:	3058f894 	.word	0x3058f894
   1c570:	d0162b04 	.word	0xd0162b04
   1c574:	3060f894 	.word	0x3060f894
   1c578:	d0122b04 	.word	0xd0122b04
   1c57c:	3068f894 	.word	0x3068f894
   1c580:	d00e2b04 	.word	0xd00e2b04
   1c584:	3070f894 	.word	0x3070f894
   1c588:	d00a2b04 	.word	0xd00a2b04
   1c58c:	3078f894 	.word	0x3078f894
   1c590:	bf182b04 	.word	0xbf182b04
   1c594:	d0042000 	.word	0xd0042000
   1c598:	2007bd38 	.word	0x2007bd38
   1c59c:	20084770 	.word	0x20084770
   1c5a0:	f7f3bd38 	.word	0xf7f3bd38
   1c5a4:	2000fda3 	.word	0x2000fda3
   1c5a8:	7821bd38 	.word	0x7821bd38
   1c5ac:	f47f2903 	.word	0xf47f2903
   1c5b0:	2100af77 	.word	0x2100af77
   1c5b4:	46182501 	.word	0x46182501
   1c5b8:	f80468d2 	.word	0xf80468d2
   1c5bc:	47905031 	.word	0x47905031
   1c5c0:	bd382000 	.word	0xbd382000
   1c5c4:	29037a21 	.word	0x29037a21
   1c5c8:	af6ef47f 	.word	0xaf6ef47f
   1c5cc:	e7f12101 	.word	0xe7f12101
   1c5d0:	29037c21 	.word	0x29037c21
   1c5d4:	af6cf47f 	.word	0xaf6cf47f
   1c5d8:	e7eb2102 	.word	0xe7eb2102
   1c5dc:	29037e21 	.word	0x29037e21
   1c5e0:	6a63d0e8 	.word	0x6a63d0e8
   1c5e4:	f47f4298 	.word	0xf47f4298
   1c5e8:	f894af6b 	.word	0xf894af6b
   1c5ec:	29031020 	.word	0x29031020
   1c5f0:	af66f47f 	.word	0xaf66f47f
   1c5f4:	e7dd2104 	.word	0xe7dd2104
   1c5f8:	1028f894 	.word	0x1028f894
   1c5fc:	f47f2903 	.word	0xf47f2903
   1c600:	2105af63 	.word	0x2105af63
   1c604:	f894e7d6 	.word	0xf894e7d6
   1c608:	29031030 	.word	0x29031030
   1c60c:	af60f47f 	.word	0xaf60f47f
   1c610:	e7cf2106 	.word	0xe7cf2106
   1c614:	1038f894 	.word	0x1038f894
   1c618:	f47f2903 	.word	0xf47f2903
   1c61c:	2107af5d 	.word	0x2107af5d
   1c620:	f894e7c8 	.word	0xf894e7c8
   1c624:	29031040 	.word	0x29031040
   1c628:	af5af47f 	.word	0xaf5af47f
   1c62c:	e7c12108 	.word	0xe7c12108
   1c630:	1048f894 	.word	0x1048f894
   1c634:	f47f2903 	.word	0xf47f2903
   1c638:	2109af57 	.word	0x2109af57
   1c63c:	f894e7ba 	.word	0xf894e7ba
   1c640:	29031050 	.word	0x29031050
   1c644:	af54f47f 	.word	0xaf54f47f
   1c648:	e7b3210a 	.word	0xe7b3210a
   1c64c:	1058f894 	.word	0x1058f894
   1c650:	f47f2903 	.word	0xf47f2903
   1c654:	210baf51 	.word	0x210baf51
   1c658:	200ee7ac 	.word	0x200ee7ac
   1c65c:	f8944770 	.word	0xf8944770
   1c660:	29031060 	.word	0x29031060
   1c664:	af4cf47f 	.word	0xaf4cf47f
   1c668:	e7a3210c 	.word	0xe7a3210c
   1c66c:	1068f894 	.word	0x1068f894
   1c670:	f47f2903 	.word	0xf47f2903
   1c674:	210daf49 	.word	0x210daf49
   1c678:	f894e79c 	.word	0xf894e79c
   1c67c:	29031070 	.word	0x29031070
   1c680:	af46f47f 	.word	0xaf46f47f
   1c684:	e795210e 	.word	0xe795210e
   1c688:	3078f894 	.word	0x3078f894
   1c68c:	f47f2b03 	.word	0xf47f2b03
   1c690:	4603af43 	.word	0x4603af43
   1c694:	e78d210f 	.word	0xe78d210f
   1c698:	20021510 	.word	0x20021510
   1c69c:	200215a8 	.word	0x200215a8

0001c6a0 <rpc_message_data_free>:
   1c6a0:	f0002800 	.word	0xf0002800
   1c6a4:	29008091 	.word	0x29008091
   1c6a8:	80e4f000 	.word	0x80e4f000
   1c6ac:	4a81b538 	.word	0x4a81b538
   1c6b0:	2b006853 	.word	0x2b006853
   1c6b4:	808af000 	.word	0x808af000
   1c6b8:	681c4b7f 	.word	0x681c4b7f
   1c6bc:	f00042a1 	.word	0xf00042a1
   1c6c0:	689c8087 	.word	0x689c8087
   1c6c4:	f00042a1 	.word	0xf00042a1
   1c6c8:	691c808f 	.word	0x691c808f
   1c6cc:	f00042a1 	.word	0xf00042a1
   1c6d0:	699c8091 	.word	0x699c8091
   1c6d4:	f00042a1 	.word	0xf00042a1
   1c6d8:	6a1c8093 	.word	0x6a1c8093
   1c6dc:	f00042a1 	.word	0xf00042a1
   1c6e0:	6a9c8095 	.word	0x6a9c8095
   1c6e4:	f00042a1 	.word	0xf00042a1
   1c6e8:	6b1c8097 	.word	0x6b1c8097
   1c6ec:	f00042a1 	.word	0xf00042a1
   1c6f0:	6b9c8099 	.word	0x6b9c8099
   1c6f4:	f00042a1 	.word	0xf00042a1
   1c6f8:	6c1c809b 	.word	0x6c1c809b
   1c6fc:	f00042a1 	.word	0xf00042a1
   1c700:	6c9c809d 	.word	0x6c9c809d
   1c704:	f00042a1 	.word	0xf00042a1
   1c708:	6d1c80a0 	.word	0x6d1c80a0
   1c70c:	f00042a1 	.word	0xf00042a1
   1c710:	6d9c80a3 	.word	0x6d9c80a3
   1c714:	f00042a1 	.word	0xf00042a1
   1c718:	6e1c80a6 	.word	0x6e1c80a6
   1c71c:	f00042a1 	.word	0xf00042a1
   1c720:	6e9c80ab 	.word	0x6e9c80ab
   1c724:	f00042a1 	.word	0xf00042a1
   1c728:	6f1c80ae 	.word	0x6f1c80ae
   1c72c:	f00042a1 	.word	0xf00042a1
   1c730:	6f9c80b1 	.word	0x6f9c80b1
   1c734:	f000428c 	.word	0xf000428c
   1c738:	691380b4 	.word	0x691380b4
   1c73c:	47984608 	.word	0x47984608
   1c740:	781a4b5e 	.word	0x781a4b5e
   1c744:	d03b2a04 	.word	0xd03b2a04
   1c748:	2a047a1a 	.word	0x2a047a1a
   1c74c:	7c1ad038 	.word	0x7c1ad038
   1c750:	d0352a04 	.word	0xd0352a04
   1c754:	2a047e1a 	.word	0x2a047e1a
   1c758:	f893d032 	.word	0xf893d032
   1c75c:	2a042020 	.word	0x2a042020
   1c760:	f893d02e 	.word	0xf893d02e
   1c764:	2a042028 	.word	0x2a042028
   1c768:	f893d02a 	.word	0xf893d02a
   1c76c:	2a042030 	.word	0x2a042030
   1c770:	f893d026 	.word	0xf893d026
   1c774:	2a042038 	.word	0x2a042038
   1c778:	f893d022 	.word	0xf893d022
   1c77c:	2a042040 	.word	0x2a042040
   1c780:	f893d01e 	.word	0xf893d01e
   1c784:	2a042048 	.word	0x2a042048
   1c788:	f893d01a 	.word	0xf893d01a
   1c78c:	2a042050 	.word	0x2a042050
   1c790:	f893d016 	.word	0xf893d016
   1c794:	2a042058 	.word	0x2a042058
   1c798:	f893d012 	.word	0xf893d012
   1c79c:	2a042060 	.word	0x2a042060
   1c7a0:	f893d00e 	.word	0xf893d00e
   1c7a4:	2a042068 	.word	0x2a042068
   1c7a8:	f893d00a 	.word	0xf893d00a
   1c7ac:	2a042070 	.word	0x2a042070
   1c7b0:	f893d006 	.word	0xf893d006
   1c7b4:	2b043078 	.word	0x2b043078
   1c7b8:	2000bf18 	.word	0x2000bf18
   1c7bc:	bd38d000 	.word	0xbd38d000
   1c7c0:	fc94f7f3 	.word	0xfc94f7f3
   1c7c4:	bd382000 	.word	0xbd382000
   1c7c8:	47702007 	.word	0x47702007
   1c7cc:	bd382008 	.word	0xbd382008
   1c7d0:	4284889c 	.word	0x4284889c
   1c7d4:	af75f47f 	.word	0xaf75f47f
   1c7d8:	20002400 	.word	0x20002400
   1c7dc:	05c4eb03 	.word	0x05c4eb03
   1c7e0:	0034f843 	.word	0x0034f843
   1c7e4:	e7a880a8 	.word	0xe7a880a8
   1c7e8:	4284899c 	.word	0x4284899c
   1c7ec:	af6df47f 	.word	0xaf6df47f
   1c7f0:	e7f22401 	.word	0xe7f22401
   1c7f4:	42848a9c 	.word	0x42848a9c
   1c7f8:	af6bf47f 	.word	0xaf6bf47f
   1c7fc:	e7ec2402 	.word	0xe7ec2402
   1c800:	42848b9c 	.word	0x42848b9c
   1c804:	af69f47f 	.word	0xaf69f47f
   1c808:	e7e62403 	.word	0xe7e62403
   1c80c:	42848c9c 	.word	0x42848c9c
   1c810:	af67f47f 	.word	0xaf67f47f
   1c814:	e7e02404 	.word	0xe7e02404
   1c818:	42848d9c 	.word	0x42848d9c
   1c81c:	af65f47f 	.word	0xaf65f47f
   1c820:	e7da2405 	.word	0xe7da2405
   1c824:	42848e9c 	.word	0x42848e9c
   1c828:	af63f47f 	.word	0xaf63f47f
   1c82c:	e7d42406 	.word	0xe7d42406
   1c830:	42848f9c 	.word	0x42848f9c
   1c834:	af61f47f 	.word	0xaf61f47f
   1c838:	e7ce2407 	.word	0xe7ce2407
   1c83c:	4044f8b3 	.word	0x4044f8b3
   1c840:	f47f4284 	.word	0xf47f4284
   1c844:	2408af5e 	.word	0x2408af5e
   1c848:	f8b3e7c7 	.word	0xf8b3e7c7
   1c84c:	4284404c 	.word	0x4284404c
   1c850:	af5bf47f 	.word	0xaf5bf47f
   1c854:	e7c02409 	.word	0xe7c02409
   1c858:	4054f8b3 	.word	0x4054f8b3
   1c85c:	f47f4284 	.word	0xf47f4284
   1c860:	240aaf58 	.word	0x240aaf58
   1c864:	f8b3e7b9 	.word	0xf8b3e7b9
   1c868:	4284405c 	.word	0x4284405c
   1c86c:	af55f47f 	.word	0xaf55f47f
   1c870:	e7b2240b 	.word	0xe7b2240b
   1c874:	4770200e 	.word	0x4770200e
   1c878:	4064f8b3 	.word	0x4064f8b3
   1c87c:	f47f4284 	.word	0xf47f4284
   1c880:	240caf50 	.word	0x240caf50
   1c884:	f8b3e7a9 	.word	0xf8b3e7a9
   1c888:	4284406c 	.word	0x4284406c
   1c88c:	af4df47f 	.word	0xaf4df47f
   1c890:	e7a2240d 	.word	0xe7a2240d
   1c894:	4074f8b3 	.word	0x4074f8b3
   1c898:	f47f4284 	.word	0xf47f4284
   1c89c:	240eaf4a 	.word	0x240eaf4a
   1c8a0:	f8b3e79b 	.word	0xf8b3e79b
   1c8a4:	4284407c 	.word	0x4284407c
   1c8a8:	240fbf08 	.word	0x240fbf08
   1c8ac:	af45f47f 	.word	0xaf45f47f
   1c8b0:	bf00e793 	.word	0xbf00e793
   1c8b4:	20021510 	.word	0x20021510
   1c8b8:	20021528 	.word	0x20021528
   1c8bc:	200215a8 	.word	0x200215a8

0001c8c0 <symbol_000fb79>:
   1c8c0:	b4302801 	.word	0xb4302801
   1c8c4:	d1034b0a 	.word	0xd1034b0a
   1c8c8:	7c1de00a 	.word	0x7c1de00a
   1c8cc:	d0084285 	.word	0xd0084285
   1c8d0:	4f14f853 	.word	0x4f14f853
   1c8d4:	d1f82c00 	.word	0xd1f82c00
   1c8d8:	002df06f 	.word	0x002df06f
   1c8dc:	4770bc30 	.word	0x4770bc30
   1c8e0:	600c4c04 	.word	0x600c4c04
   1c8e4:	2000685b 	.word	0x2000685b
   1c8e8:	6013bc30 	.word	0x6013bc30
   1c8ec:	bf004770 	.word	0xbf004770
   1c8f0:	00025c9c 	.word	0x00025c9c
   1c8f4:	00025c68 	.word	0x00025c68

0001c8f8 <symbol_000494c>:
   1c8f8:	b4302803 	.word	0xb4302803
   1c8fc:	d1034b0a 	.word	0xd1034b0a
   1c900:	7c1de00a 	.word	0x7c1de00a
   1c904:	d0084285 	.word	0xd0084285
   1c908:	4f14f853 	.word	0x4f14f853
   1c90c:	d1f82c00 	.word	0xd1f82c00
   1c910:	002df06f 	.word	0x002df06f
   1c914:	4770bc30 	.word	0x4770bc30
   1c918:	600c4c04 	.word	0x600c4c04
   1c91c:	2000685b 	.word	0x2000685b
   1c920:	6013bc30 	.word	0x6013bc30
   1c924:	bf004770 	.word	0xbf004770
   1c928:	00025c74 	.word	0x00025c74
   1c92c:	00025c5c 	.word	0x00025c5c

0001c930 <dfu_client_event_handler>:
   1c930:	1b08f850 	.word	0x1b08f850
   1c934:	f7fc0c09 	.word	0xf7fc0c09
   1c938:	bf00b80d 	.word	0xbf00b80d

0001c93c <rpc_dfu_client_init>:
   1c93c:	f7ff4801 	.word	0xf7ff4801
   1c940:	bf00bb33 	.word	0xbf00bb33
   1c944:	00025cec 	.word	0x00025cec

0001c948 <rpc_dfu_client_request_alloc>:
   1c948:	b5102300 	.word	0xb5102300
   1c94c:	9301b082 	.word	0x9301b082
   1c950:	4604b158 	.word	0x4604b158
   1c954:	2006aa01 	.word	0x2006aa01
   1c958:	fd5ef7ff 	.word	0xfd5ef7ff
   1c95c:	9b01b918 	.word	0x9b01b918
   1c960:	3308b10b 	.word	0x3308b10b
   1c964:	b0026023 	.word	0xb0026023
   1c968:	2007bd10 	.word	0x2007bd10
   1c96c:	bd10b002 	.word	0xbd10b002

0001c970 <rpc_dfu_client_request_send>:
   1c970:	4f70f411 	.word	0x4f70f411
   1c974:	b160d10b 	.word	0xb160d10b
   1c978:	f8304603 	.word	0xf8304603
   1c97c:	20062c08 	.word	0x20062c08
   1c980:	4101ea42 	.word	0x4101ea42
   1c984:	1d08f843 	.word	0x1d08f843
   1c988:	f7ff4619 	.word	0xf7ff4619
   1c98c:	200fbd2d 	.word	0x200fbd2d
   1c990:	20074770 	.word	0x20074770
   1c994:	bf004770 	.word	0xbf004770

0001c998 <rpc_dfu_client_message_free>:
   1c998:	f1a0b120 	.word	0xf1a0b120
   1c99c:	20060108 	.word	0x20060108
   1c9a0:	bd6cf7ff 	.word	0xbd6cf7ff
   1c9a4:	47702007 	.word	0x47702007

0001c9a8 <rpc_dfu_client_data_free>:
   1c9a8:	4601b118 	.word	0x4601b118
   1c9ac:	f7ff2006 	.word	0xf7ff2006
   1c9b0:	2007be77 	.word	0x2007be77
   1c9b4:	bf004770 	.word	0xbf004770

0001c9b8 <mem_free>:
   1c9b8:	4ff0e92d 	.word	0x4ff0e92d
   1c9bc:	c0ccf8df 	.word	0xc0ccf8df
   1c9c0:	9000b083 	.word	0x9000b083
   1c9c4:	0b3cf10c 	.word	0x0b3cf10c
   1c9c8:	3008f8dc 	.word	0x3008f8dc
   1c9cc:	f8dcb12b 	.word	0xf8dcb12b
   1c9d0:	9c002000 	.word	0x9c002000
   1c9d4:	42a07810 	.word	0x42a07810
   1c9d8:	f10cd006 	.word	0xf10cd006
   1c9dc:	45e30c0c 	.word	0x45e30c0c
   1c9e0:	b003d1f2 	.word	0xb003d1f2
   1c9e4:	8ff0e8bd 	.word	0x8ff0e8bd
   1c9e8:	a004f8dc 	.word	0xa004f8dc
   1c9ec:	080aeb03 	.word	0x080aeb03
   1c9f0:	d2f245c2 	.word	0xd2f245c2
   1c9f4:	f8cd6853 	.word	0xf8cd6853
   1c9f8:	46d6c004 	.word	0x46d6c004
   1c9fc:	f8d2469c 	.word	0xf8d2469c
   1ca00:	89979010 	.word	0x89979010
   1ca04:	000aebae 	.word	0x000aebae
   1ca08:	f8b9b3df 	.word	0xf8b9b3df
   1ca0c:	42902002 	.word	0x42902002
   1ca10:	4665d31c 	.word	0x4665d31c
   1ca14:	f1092400 	.word	0xf1092400
   1ca18:	e0030304 	.word	0xe0030304
   1ca1c:	3304885a 	.word	0x3304885a
   1ca20:	d8154282 	.word	0xd8154282
   1ca24:	6c04f833 	.word	0x6c04f833
   1ca28:	42a73401 	.word	0x42a73401
   1ca2c:	5506fb02 	.word	0x5506fb02
   1ca30:	0002eba0 	.word	0x0002eba0
   1ca34:	d1f1461e 	.word	0xd1f1461e
   1ca38:	42812000 	.word	0x42812000
   1ca3c:	f10ed00d 	.word	0xf10ed00d
   1ca40:	45f00e01 	.word	0x45f00e01
   1ca44:	f8ddd1de 	.word	0xf8ddd1de
   1ca48:	e7c6c004 	.word	0xe7c6c004
   1ca4c:	464e4665 	.word	0x464e4665
   1ca50:	fb008833 	.word	0xfb008833
   1ca54:	42815003 	.word	0x42815003
   1ca58:	f5bed1f1 	.word	0xf5bed1f1
   1ca5c:	f8dd7f00 	.word	0xf8dd7f00
   1ca60:	d0bac004 	.word	0xd0bac004
   1ca64:	4a082301 	.word	0x4a082301
   1ca68:	115eea4f 	.word	0x115eea4f
   1ca6c:	0021f852 	.word	0x0021f852
   1ca70:	0e1ff00e 	.word	0x0e1ff00e
   1ca74:	fe0efa03 	.word	0xfe0efa03
   1ca78:	0000ea4e 	.word	0x0000ea4e
   1ca7c:	0021f842 	.word	0x0021f842
   1ca80:	4638e7af 	.word	0x4638e7af
   1ca84:	bf00e7d9 	.word	0xbf00e7d9
   1ca88:	20021628 	.word	0x20021628
   1ca8c:	2002166c 	.word	0x2002166c

0001ca90 <mem_alloc.constprop.5>:
   1ca90:	d0502800 	.word	0xd0502800
   1ca94:	f8d34b6d 	.word	0xf8d34b6d
   1ca98:	42902088 	.word	0x42902088
   1ca9c:	e92dd84b 	.word	0xe92dd84b
   1caa0:	f8d34ff0 	.word	0xf8d34ff0
   1caa4:	b083b08c 	.word	0xb083b08c
   1caa8:	0f00f1bb 	.word	0x0f00f1bb
   1caac:	f10bd054 	.word	0xf10bd054
   1cab0:	469132ff 	.word	0x469132ff
   1cab4:	f04f2600 	.word	0xf04f2600
   1cab8:	4f650812 	.word	0x4f650812
   1cabc:	f10b9201 	.word	0xf10b9201
   1cac0:	eb060e11 	.word	0xeb060e11
   1cac4:	f8530209 	.word	0xf8530209
   1cac8:	32014038 	.word	0x32014038
   1cacc:	eb040852 	.word	0xeb040852
   1cad0:	f1020c44 	.word	0xf1020c44
   1cad4:	f8530112 	.word	0xf8530112
   1cad8:	f8575031 	.word	0xf8575031
   1cadc:	f853a02c 	.word	0xf853a02c
   1cae0:	eb03403e 	.word	0xeb03403e
   1cae4:	f8dc0cc8 	.word	0xf8dc0cc8
   1cae8:	eb05c004 	.word	0xeb05c004
   1caec:	eb040545 	.word	0xeb040545
   1caf0:	f8da0444 	.word	0xf8da0444
   1caf4:	f857a010 	.word	0xf857a010
   1caf8:	f8575025 	.word	0xf8575025
   1cafc:	f83a4024 	.word	0xf83a4024
   1cb00:	eb03a02c 	.word	0xeb03a02c
   1cb04:	eb0301c1 	.word	0xeb0301c1
   1cb08:	68490cce 	.word	0x68490cce
   1cb0c:	6924692d 	.word	0x6924692d
   1cb10:	c004f8dc 	.word	0xc004f8dc
   1cb14:	f8354550 	.word	0xf8354550
   1cb18:	f8345021 	.word	0xf8345021
   1cb1c:	d915102c 	.word	0xd915102c
   1cb20:	d2114288 	.word	0xd2114288
   1cb24:	d90842a8 	.word	0xd90842a8
   1cb28:	45b11c56 	.word	0x45b11c56
   1cb2c:	8087f0c0 	.word	0x8087f0c0
   1cb30:	0813f102 	.word	0x0813f102
   1cb34:	2000e7c5 	.word	0x2000e7c5
   1cb38:	f1024770 	.word	0xf1024770
   1cb3c:	454e39ff 	.word	0x454e39ff
   1cb40:	f102d87d 	.word	0xf102d87d
   1cb44:	e7bc0e11 	.word	0xe7bc0e11
   1cb48:	0601f109 	.word	0x0601f109
   1cb4c:	d00745b3 	.word	0xd00745b3
   1cb50:	d0012e10 	.word	0xd0012e10
   1cb54:	d80845b3 	.word	0xd80845b3
   1cb58:	b0032000 	.word	0xb0032000
   1cb5c:	8ff0e8bd 	.word	0x8ff0e8bd
   1cb60:	2a109a01 	.word	0x2a109a01
   1cb64:	4616bf18 	.word	0x4616bf18
   1cb68:	f8dfd0f6 	.word	0xf8dfd0f6
   1cb6c:	eb03c0e8 	.word	0xeb03c0e8
   1cb70:	e9d808c6 	.word	0xe9d808c6
   1cb74:	eb022424 	.word	0xeb022424
   1cb78:	f8570242 	.word	0xf8570242
   1cb7c:	eb073022 	.word	0xeb073022
   1cb80:	f8d20282 	.word	0xf8d20282
   1cb84:	691de004 	.word	0x691de004
   1cb88:	d0562c00 	.word	0xd0562c00
   1cb8c:	4670462a 	.word	0x4670462a
   1cb90:	eb0500a4 	.word	0xeb0500a4
   1cb94:	88510904 	.word	0x88510904
   1cb98:	45913204 	.word	0x45913204
   1cb9c:	d1fa4408 	.word	0xd1fa4408
   1cba0:	f8b11929 	.word	0xf8b11929
   1cba4:	4482a002 	.word	0x4482a002
   1cba8:	d9184582 	.word	0xd9184582
   1cbac:	f85c0941 	.word	0xf85c0941
   1cbb0:	f0002021 	.word	0xf0002021
   1cbb4:	fa22041f 	.word	0xfa22041f
   1cbb8:	f019f904 	.word	0xf019f904
   1cbbc:	d0070f01 	.word	0xd0070f01
   1cbc0:	f85ce013 	.word	0xf85ce013
   1cbc4:	fa222021 	.word	0xfa222021
   1cbc8:	f019f904 	.word	0xf019f904
   1cbcc:	d10c0f01 	.word	0xd10c0f01
   1cbd0:	45823001 	.word	0x45823001
   1cbd4:	1150ea4f 	.word	0x1150ea4f
   1cbd8:	041ff000 	.word	0x041ff000
   1cbdc:	3601d1f1 	.word	0x3601d1f1
   1cbe0:	f108455e 	.word	0xf108455e
   1cbe4:	d3c40808 	.word	0xd3c40808
   1cbe8:	2601e7b6 	.word	0x2601e7b6
   1cbec:	f404fa06 	.word	0xf404fa06
   1cbf0:	ea22899e 	.word	0xea22899e
   1cbf4:	eba00204 	.word	0xeba00204
   1cbf8:	f84c000e 	.word	0xf84c000e
   1cbfc:	685c2021 	.word	0x685c2021
   1cc00:	d0a92e00 	.word	0xd0a92e00
   1cc04:	4282886a 	.word	0x4282886a
   1cc08:	2100d811 	.word	0x2100d811
   1cc0c:	e0031d2b 	.word	0xe0031d2b
   1cc10:	3304885a 	.word	0x3304885a
   1cc14:	d80a4282 	.word	0xd80a4282
   1cc18:	5c04f833 	.word	0x5c04f833
   1cc1c:	428e3101 	.word	0x428e3101
   1cc20:	4405fb02 	.word	0x4405fb02
   1cc24:	0002eba0 	.word	0x0002eba0
   1cc28:	d1f1461d 	.word	0xd1f1461d
   1cc2c:	882be794 	.word	0x882be794
   1cc30:	4003fb00 	.word	0x4003fb00
   1cc34:	e8bdb003 	.word	0xe8bdb003
   1cc38:	46708ff0 	.word	0x46708ff0
   1cc3c:	f1bbe7b0 	.word	0xf1bbe7b0
   1cc40:	bf080f10 	.word	0xbf080f10
   1cc44:	d090260f 	.word	0xd090260f
   1cc48:	bf00e786 	.word	0xbf00e786
   1cc4c:	200216a8 	.word	0x200216a8
   1cc50:	2002166c 	.word	0x2002166c
   1cc54:	20021628 	.word	0x20021628

0001cc58 <mem_alloc.constprop.4>:
   1cc58:	d04c2800 	.word	0xd04c2800
   1cc5c:	681a4b6b 	.word	0x681a4b6b
   1cc60:	d8484290 	.word	0xd8484290
   1cc64:	4ff0e92d 	.word	0x4ff0e92d
   1cc68:	b083685f 	.word	0xb083685f
   1cc6c:	2f009700 	.word	0x2f009700
   1cc70:	1e7ad051 	.word	0x1e7ad051
   1cc74:	21004696 	.word	0x21004696
   1cc78:	0c01f04f 	.word	0x0c01f04f
   1cc7c:	92014c64 	.word	0x92014c64
   1cc80:	020eeb01 	.word	0x020eeb01
   1cc84:	f8533201 	.word	0xf8533201
   1cc88:	0852503c 	.word	0x0852503c
   1cc8c:	0801f102 	.word	0x0801f102
   1cc90:	0545eb05 	.word	0x0545eb05
   1cc94:	9037f853 	.word	0x9037f853
   1cc98:	a025f854 	.word	0xa025f854
   1cc9c:	6038f853 	.word	0x6038f853
   1cca0:	0549eb09 	.word	0x0549eb09
   1cca4:	09cceb03 	.word	0x09cceb03
   1cca8:	9004f8d9 	.word	0x9004f8d9
   1ccac:	0646eb06 	.word	0x0646eb06
   1ccb0:	a010f8da 	.word	0xa010f8da
   1ccb4:	6026f854 	.word	0x6026f854
   1ccb8:	5025f854 	.word	0x5025f854
   1ccbc:	a029f83a 	.word	0xa029f83a
   1ccc0:	0bc8eb03 	.word	0x0bc8eb03
   1ccc4:	09c7eb03 	.word	0x09c7eb03
   1ccc8:	f8db6936 	.word	0xf8db6936
   1cccc:	692db004 	.word	0x692db004
   1ccd0:	9004f8d9 	.word	0x9004f8d9
   1ccd4:	f8364550 	.word	0xf8364550
   1ccd8:	f835602b 	.word	0xf835602b
   1ccdc:	d9135029 	.word	0xd9135029
   1cce0:	d21042a8 	.word	0xd21042a8
   1cce4:	d90842b0 	.word	0xd90842b0
   1cce8:	464145c6 	.word	0x464145c6
   1ccec:	8087f0c0 	.word	0x8087f0c0
   1ccf0:	0c01f108 	.word	0x0c01f108
   1ccf4:	2000e7c4 	.word	0x2000e7c4
   1ccf8:	f1024770 	.word	0xf1024770
   1ccfc:	45713eff 	.word	0x45713eff
   1cd00:	4617d87d 	.word	0x4617d87d
   1cd04:	4639e7bc 	.word	0x4639e7bc
   1cd08:	428a9a00 	.word	0x428a9a00
   1cd0c:	2910d007 	.word	0x2910d007
   1cd10:	428ad001 	.word	0x428ad001
   1cd14:	2000d808 	.word	0x2000d808
   1cd18:	e8bdb003 	.word	0xe8bdb003
   1cd1c:	9a018ff0 	.word	0x9a018ff0
   1cd20:	bf182a10 	.word	0xbf182a10
   1cd24:	d0f64611 	.word	0xd0f64611
   1cd28:	c0e8f8df 	.word	0xc0e8f8df
   1cd2c:	9000f8dd 	.word	0x9000f8dd
   1cd30:	08c1eb03 	.word	0x08c1eb03
   1cd34:	2602e9d8 	.word	0x2602e9d8
   1cd38:	0242eb02 	.word	0x0242eb02
   1cd3c:	3022f854 	.word	0x3022f854
   1cd40:	0282eb04 	.word	0x0282eb04
   1cd44:	e004f8d2 	.word	0xe004f8d2
   1cd48:	2e00691f 	.word	0x2e00691f
   1cd4c:	463ad055 	.word	0x463ad055
   1cd50:	00b64670 	.word	0x00b64670
   1cd54:	0a06eb07 	.word	0x0a06eb07
   1cd58:	32048855 	.word	0x32048855
   1cd5c:	44284592 	.word	0x44284592
   1cd60:	19bdd1fa 	.word	0x19bdd1fa
   1cd64:	b002f8b5 	.word	0xb002f8b5
   1cd68:	45834483 	.word	0x45834483
   1cd6c:	0945d918 	.word	0x0945d918
   1cd70:	2025f85c 	.word	0x2025f85c
   1cd74:	061ff000 	.word	0x061ff000
   1cd78:	fa06fa22 	.word	0xfa06fa22
   1cd7c:	0f01f01a 	.word	0x0f01f01a
   1cd80:	e013d007 	.word	0xe013d007
   1cd84:	2025f85c 	.word	0x2025f85c
   1cd88:	fa06fa22 	.word	0xfa06fa22
   1cd8c:	0f01f01a 	.word	0x0f01f01a
   1cd90:	3001d10c 	.word	0x3001d10c
   1cd94:	ea4f4583 	.word	0xea4f4583
   1cd98:	f0001550 	.word	0xf0001550
   1cd9c:	d1f1061f 	.word	0xd1f1061f
   1cda0:	45493101 	.word	0x45493101
   1cda4:	0808f108 	.word	0x0808f108
   1cda8:	e7b4d3c4 	.word	0xe7b4d3c4
   1cdac:	40b12101 	.word	0x40b12101
   1cdb0:	ea22899e 	.word	0xea22899e
   1cdb4:	eba00201 	.word	0xeba00201
   1cdb8:	f84c000e 	.word	0xf84c000e
   1cdbc:	685c2025 	.word	0x685c2025
   1cdc0:	d0a82e00 	.word	0xd0a82e00
   1cdc4:	4282887a 	.word	0x4282887a
   1cdc8:	2100d811 	.word	0x2100d811
   1cdcc:	e0031d3b 	.word	0xe0031d3b
   1cdd0:	3304885a 	.word	0x3304885a
   1cdd4:	d80a4282 	.word	0xd80a4282
   1cdd8:	5c04f833 	.word	0x5c04f833
   1cddc:	428e3101 	.word	0x428e3101
   1cde0:	0002eba0 	.word	0x0002eba0
   1cde4:	4405fb02 	.word	0x4405fb02
   1cde8:	d1f1461f 	.word	0xd1f1461f
   1cdec:	883be793 	.word	0x883be793
   1cdf0:	4003fb00 	.word	0x4003fb00
   1cdf4:	e8bdb003 	.word	0xe8bdb003
   1cdf8:	46708ff0 	.word	0x46708ff0
   1cdfc:	9a00e7b1 	.word	0x9a00e7b1
   1ce00:	bf082a10 	.word	0xbf082a10
   1ce04:	d08f210f 	.word	0xd08f210f
   1ce08:	bf00e785 	.word	0xbf00e785
   1ce0c:	200216a8 	.word	0x200216a8
   1ce10:	2002166c 	.word	0x2002166c
   1ce14:	20021628 	.word	0x20021628

0001ce18 <nrf_mem_init>:
   1ce18:	2200b570 	.word	0x2200b570
   1ce1c:	48332501 	.word	0x48332501
   1ce20:	f8500951 	.word	0xf8500951
   1ce24:	f0024021 	.word	0xf0024021
   1ce28:	fa05031f 	.word	0xfa05031f
   1ce2c:	3201f303 	.word	0x3201f303
   1ce30:	f5b24323 	.word	0xf5b24323
   1ce34:	f8407f00 	.word	0xf8407f00
   1ce38:	d1f13021 	.word	0xd1f13021
   1ce3c:	4b2c2400 	.word	0x4b2c2400
   1ce40:	223c4621 	.word	0x223c4621
   1ce44:	601c482b 	.word	0x601c482b
   1ce48:	f9f3f007 	.word	0xf9f3f007
   1ce4c:	22052110 	.word	0x22052110
   1ce50:	4e2a4b29 	.word	0x4e2a4b29
   1ce54:	4400e9c3 	.word	0x4400e9c3
   1ce58:	615960d9 	.word	0x615960d9
   1ce5c:	625961d9 	.word	0x625961d9
   1ce60:	635962d9 	.word	0x635962d9
   1ce64:	645963d9 	.word	0x645963d9
   1ce68:	655964d9 	.word	0x655964d9
   1ce6c:	665965d9 	.word	0x665965d9
   1ce70:	675966d9 	.word	0x675966d9
   1ce74:	609a67d9 	.word	0x609a67d9
   1ce78:	619a611a 	.word	0x619a611a
   1ce7c:	629a621a 	.word	0x629a621a
   1ce80:	639a631a 	.word	0x639a631a
   1ce84:	649a641a 	.word	0x649a641a
   1ce88:	659a651a 	.word	0x659a651a
   1ce8c:	669a661a 	.word	0x669a661a
   1ce90:	679a671a 	.word	0x679a671a
   1ce94:	2120e9c3 	.word	0x2120e9c3
   1ce98:	4422e9c3 	.word	0x4422e9c3
   1ce9c:	2124e9c3 	.word	0x2124e9c3
   1cea0:	2126e9c3 	.word	0x2126e9c3
   1cea4:	2128e9c3 	.word	0x2128e9c3
   1cea8:	212ae9c3 	.word	0x212ae9c3
   1ceac:	212ce9c3 	.word	0x212ce9c3
   1ceb0:	212ee9c3 	.word	0x212ee9c3
   1ceb4:	2130e9c3 	.word	0x2130e9c3
   1ceb8:	2132e9c3 	.word	0x2132e9c3
   1cebc:	2134e9c3 	.word	0x2134e9c3
   1cec0:	2136e9c3 	.word	0x2136e9c3
   1cec4:	2138e9c3 	.word	0x2138e9c3
   1cec8:	213ae9c3 	.word	0x213ae9c3
   1cecc:	213ce9c3 	.word	0x213ce9c3
   1ced0:	213ee9c3 	.word	0x213ee9c3
   1ced4:	1104f8c3 	.word	0x1104f8c3
   1ced8:	2100f8c3 	.word	0x2100f8c3
   1cedc:	110cf8c3 	.word	0x110cf8c3
   1cee0:	2108f8c3 	.word	0x2108f8c3
   1cee4:	70354620 	.word	0x70354620
   1cee8:	bf00bd70 	.word	0xbf00bd70
   1ceec:	20021628 	.word	0x20021628
   1cef0:	20021668 	.word	0x20021668
   1cef4:	2002166c 	.word	0x2002166c
   1cef8:	200216a8 	.word	0x200216a8
   1cefc:	20026c5d 	.word	0x20026c5d

0001cf00 <nrf_mem_register>:
   1cf00:	4ff0e92d 	.word	0x4ff0e92d
   1cf04:	b0874b87 	.word	0xb0874b87
   1cf08:	2b00781b 	.word	0x2b00781b
   1cf0c:	808cf000 	.word	0x808cf000
   1cf10:	b321b328 	.word	0xb321b328
   1cf14:	f8df780b 	.word	0xf8df780b
   1cf18:	eb038218 	.word	0xeb038218
   1cf1c:	eb081303 	.word	0xeb081303
   1cf20:	685b03c3 	.word	0x685b03c3
   1cf24:	c00cf8b1 	.word	0xc00cf8b1
   1cf28:	2b104463 	.word	0x2b104463
   1cf2c:	f04fd811 	.word	0xf04fd811
   1cf30:	46890a00 	.word	0x46890a00
   1cf34:	4f7d4b7c 	.word	0x4f7d4b7c
   1cf38:	ea4f681b 	.word	0xea4f681b
   1cf3c:	93000e8c 	.word	0x93000e8c
   1cf40:	b19168b9 	.word	0xb19168b9
   1cf44:	0a01f10a 	.word	0x0a01f10a
   1cf48:	0f05f1ba 	.word	0x0f05f1ba
   1cf4c:	070cf107 	.word	0x070cf107
   1cf50:	f248d1f6 	.word	0xf248d1f6
   1cf54:	46581b07 	.word	0x46581b07
   1cf58:	e8bdb007 	.word	0xe8bdb007
   1cf5c:	f2488ff0 	.word	0xf2488ff0
   1cf60:	46581b0e 	.word	0x46581b0e
   1cf64:	e8bdb007 	.word	0xe8bdb007
   1cf68:	f1bc8ff0 	.word	0xf1bc8ff0
   1cf6c:	d0610f00 	.word	0xd0610f00
   1cf70:	460c460d 	.word	0x460c460d
   1cf74:	3010f8d9 	.word	0x3010f8d9
   1cf78:	0b03eb0e 	.word	0x0b03eb0e
   1cf7c:	f833885a 	.word	0xf833885a
   1cf80:	44156b04 	.word	0x44156b04
   1cf84:	fb02459b 	.word	0xfb02459b
   1cf88:	d1f74406 	.word	0xd1f74406
   1cf8c:	3008f8d9 	.word	0x3008f8d9
   1cf90:	d3d742a3 	.word	0xd3d742a3
   1cf94:	442b9b00 	.word	0x442b9b00
   1cf98:	7f00f5b3 	.word	0x7f00f5b3
   1cf9c:	4c63d2d2 	.word	0x4c63d2d2
   1cfa0:	024aeb0a 	.word	0x024aeb0a
   1cfa4:	f8c00092 	.word	0xf8c00092
   1cfa8:	18a0a000 	.word	0x18a0a000
   1cfac:	9002f844 	.word	0x9002f844
   1cfb0:	468b9a00 	.word	0x468b9a00
   1cfb4:	2501e9c0 	.word	0x2501e9c0
   1cfb8:	2001f899 	.word	0x2001f899
   1cfbc:	2a01485a 	.word	0x2a01485a
   1cfc0:	d0c86003 	.word	0xd0c86003
   1cfc4:	300cf8b9 	.word	0x300cf8b9
   1cfc8:	d0c42b00 	.word	0xd0c42b00
   1cfcc:	f8cd2500 	.word	0xf8cd2500
   1cfd0:	f8cd9004 	.word	0xf8cd9004
   1cfd4:	f8cda00c 	.word	0xf8cda00c
   1cfd8:	9b01b014 	.word	0x9b01b014
   1cfdc:	691a781f 	.word	0x691a781f
   1cfe0:	eb03013b 	.word	0xeb03013b
   1cfe4:	93000907 	.word	0x93000907
   1cfe8:	03c9eb08 	.word	0x03c9eb08
   1cfec:	f8326859 	.word	0xf8326859
   1cff0:	91024025 	.word	0x91024025
   1cff4:	9a03bb39 	.word	0x9a03bb39
   1cff8:	609a60dd 	.word	0x609a60dd
   1cffc:	443b9b00 	.word	0x443b9b00
   1d000:	eb08461f 	.word	0xeb08461f
   1d004:	684b01c3 	.word	0x684b01c3
   1d008:	2037f858 	.word	0x2037f858
   1d00c:	42943301 	.word	0x42943301
   1d010:	d912604b 	.word	0xd912604b
   1d014:	f8489b01 	.word	0xf8489b01
   1d018:	899b4037 	.word	0x899b4037
   1d01c:	429d3501 	.word	0x429d3501
   1d020:	f8ddd3db 	.word	0xf8ddd3db
   1d024:	e796b014 	.word	0xe796b014
   1d028:	1b08f248 	.word	0x1b08f248
   1d02c:	b0074658 	.word	0xb0074658
   1d030:	8ff0e8bd 	.word	0x8ff0e8bd
   1d034:	46659b00 	.word	0x46659b00
   1d038:	9b01e7ae 	.word	0x9b01e7ae
   1d03c:	899b3501 	.word	0x899b3501
   1d040:	d8ca42ab 	.word	0xd8ca42ab
   1d044:	2600e7ed 	.word	0x2600e7ed
   1d048:	3afff101 	.word	0x3afff101
   1d04c:	eb069504 	.word	0xeb069504
   1d050:	eb09000a 	.word	0xeb09000a
   1d054:	32010206 	.word	0x32010206
   1d058:	f8583001 	.word	0xf8583001
   1d05c:	0840c032 	.word	0x0840c032
   1d060:	eb094d32 	.word	0xeb094d32
   1d064:	eb090100 	.word	0xeb090100
   1d068:	3101030a 	.word	0x3101030a
   1d06c:	eb0c3301 	.word	0xeb0c3301
   1d070:	f8580c4c 	.word	0xf8580c4c
   1d074:	f855e031 	.word	0xf855e031
   1d078:	f858b02c 	.word	0xf858b02c
   1d07c:	eb08c033 	.word	0xeb08c033
   1d080:	eb0e02c2 	.word	0xeb0e02c2
   1d084:	eb0c0e4e 	.word	0xeb0c0e4e
   1d088:	f8db0c4c 	.word	0xf8db0c4c
   1d08c:	6852b010 	.word	0x6852b010
   1d090:	e02ef855 	.word	0xe02ef855
   1d094:	c02cf855 	.word	0xc02cf855
   1d098:	01c1eb08 	.word	0x01c1eb08
   1d09c:	03c3eb08 	.word	0x03c3eb08
   1d0a0:	2022f83b 	.word	0x2022f83b
   1d0a4:	e010f8de 	.word	0xe010f8de
   1d0a8:	f8dc6849 	.word	0xf8dc6849
   1d0ac:	685bc010 	.word	0x685bc010
   1d0b0:	f83e4294 	.word	0xf83e4294
   1d0b4:	f83c1021 	.word	0xf83c1021
   1d0b8:	d92d3023 	.word	0xd92d3023
   1d0bc:	d22d429c 	.word	0xd22d429c
   1d0c0:	d924428c 	.word	0xd924428c
   1d0c4:	45b21c46 	.word	0x45b21c46
   1d0c8:	2610d2c1 	.word	0x2610d2c1
   1d0cc:	9a029d04 	.word	0x9a029d04
   1d0d0:	d91142b2 	.word	0xd91142b2
   1d0d4:	443b9b00 	.word	0x443b9b00
   1d0d8:	4433441a 	.word	0x4433441a
   1d0dc:	0ac2eb08 	.word	0x0ac2eb08
   1d0e0:	09c3eb08 	.word	0x09c3eb08
   1d0e4:	46512208 	.word	0x46512208
   1d0e8:	0002eb0a 	.word	0x0002eb0a
   1d0ec:	0a08f1aa 	.word	0x0a08f1aa
   1d0f0:	f872f007 	.word	0xf872f007
   1d0f4:	d1f545d1 	.word	0xd1f545d1
   1d0f8:	99039b00 	.word	0x99039b00
   1d0fc:	4433443b 	.word	0x4433443b
   1d100:	eb083301 	.word	0xeb083301
   1d104:	f84802c3 	.word	0xf84802c3
   1d108:	60551033 	.word	0x60551033
   1d10c:	f100e776 	.word	0xf100e776
   1d110:	45563aff 	.word	0x45563aff
   1d114:	e7d8d99b 	.word	0xe7d8d99b
   1d118:	e7d89d04 	.word	0xe7d89d04
   1d11c:	f10a9d04 	.word	0xf10a9d04
   1d120:	e7d40601 	.word	0xe7d40601
   1d124:	20026c5d 	.word	0x20026c5d
   1d128:	20021668 	.word	0x20021668
   1d12c:	2002166c 	.word	0x2002166c
   1d130:	200216a8 	.word	0x200216a8

0001d134 <nrf_malloc>:
   1d134:	781b4b03 	.word	0x781b4b03
   1d138:	f7ffb10b 	.word	0xf7ffb10b
   1d13c:	4618bd8d 	.word	0x4618bd8d
   1d140:	bf004770 	.word	0xbf004770
   1d144:	20026c5d 	.word	0x20026c5d

0001d148 <nrf_calloc>:
   1d148:	4b08b538 	.word	0x4b08b538
   1d14c:	b155781d 	.word	0xb155781d
   1d150:	f400fb01 	.word	0xf400fb01
   1d154:	f7ff4620 	.word	0xf7ff4620
   1d158:	4605fd7f 	.word	0x4605fd7f
   1d15c:	4622b118 	.word	0x4622b118
   1d160:	f0072100 	.word	0xf0072100
   1d164:	4628f866 	.word	0x4628f866
   1d168:	bf00bd38 	.word	0xbf00bd38
   1d16c:	20026c5d 	.word	0x20026c5d

0001d170 <nrf_free>:
   1d170:	781b4b04 	.word	0x781b4b04
   1d174:	b118b123 	.word	0xb118b123
   1d178:	20004601 	.word	0x20004601
   1d17c:	bc1cf7ff 	.word	0xbc1cf7ff
   1d180:	bf004770 	.word	0xbf004770
   1d184:	20026c5d 	.word	0x20026c5d

0001d188 <nrf_shared_malloc>:
   1d188:	781b4b03 	.word	0x781b4b03
   1d18c:	f7ffb10b 	.word	0xf7ffb10b
   1d190:	4618bc7f 	.word	0x4618bc7f
   1d194:	bf004770 	.word	0xbf004770
   1d198:	20026c5d 	.word	0x20026c5d

0001d19c <nrf_shared_free>:
   1d19c:	781b4b04 	.word	0x781b4b04
   1d1a0:	b118b123 	.word	0xb118b123
   1d1a4:	20014601 	.word	0x20014601
   1d1a8:	bc06f7ff 	.word	0xbc06f7ff
   1d1ac:	bf004770 	.word	0xbf004770
   1d1b0:	20026c5d 	.word	0x20026c5d

0001d1b4 <symbol_0003897>:
   1d1b4:	728cf44f 	.word	0x728cf44f
   1d1b8:	f0072100 	.word	0xf0072100
   1d1bc:	bf00b83a 	.word	0xbf00b83a

0001d1c0 <symbol_0006f61>:
   1d1c0:	f44fb118 	.word	0xf44fb118
   1d1c4:	f7fc718c 	.word	0xf7fc718c
   1d1c8:	4770b837 	.word	0x4770b837

0001d1cc <symbol_000468b>:
   1d1cc:	f0002ac0 	.word	0xf0002ac0
   1d1d0:	f5b28184 	.word	0xf5b28184
   1d1d4:	f0007f80 	.word	0xf0007f80
   1d1d8:	2a80817d 	.word	0x2a80817d
   1d1dc:	f06fd002 	.word	0xf06fd002
   1d1e0:	4770001f 	.word	0x4770001f
   1d1e4:	6003230a 	.word	0x6003230a
   1d1e8:	4ff0e92d 	.word	0x4ff0e92d
   1d1ec:	f04f4607 	.word	0xf04f4607
   1d1f0:	f1000c00 	.word	0xf1000c00
   1d1f4:	b0850408 	.word	0xb0850408
   1d1f8:	f8470952 	.word	0xf8470952
   1d1fc:	788b4f04 	.word	0x788b4f04
   1d200:	780e784d 	.word	0x780e784d
   1d204:	ea43041b 	.word	0xea43041b
   1d208:	78cd2305 	.word	0x78cd2305
   1d20c:	f10c4333 	.word	0xf10c4333
   1d210:	ea430c01 	.word	0xea430c01
   1d214:	45946305 	.word	0x45946305
   1d218:	3f04f847 	.word	0x3f04f847
   1d21c:	0104f101 	.word	0x0104f101
   1d220:	6803d3ed 	.word	0x6803d3ed
   1d224:	f0002b0c 	.word	0xf0002b0c
   1d228:	2b0e81bf 	.word	0x2b0e81bf
   1d22c:	8158f000 	.word	0x8158f000
   1d230:	f0402b0a 	.word	0xf0402b0a
   1d234:	6944814b 	.word	0x6944814b
   1d238:	f3c44bd8 	.word	0xf3c44bd8
   1d23c:	68812207 	.word	0x68812207
   1d240:	0e255c9a 	.word	0x0e255c9a
   1d244:	f0815d5e 	.word	0xf0815d5e
   1d248:	b2e50101 	.word	0xb2e50101
   1d24c:	404a5d5d 	.word	0x404a5d5d
   1d250:	4107f3c4 	.word	0x4107f3c4
   1d254:	4206ea82 	.word	0x4206ea82
   1d258:	ea825c5e 	.word	0xea825c5e
   1d25c:	68c16505 	.word	0x68c16505
   1d260:	2206ea85 	.word	0x2206ea85
   1d264:	40516907 	.word	0x40516907
   1d268:	0907ea81 	.word	0x0907ea81
   1d26c:	0404ea89 	.word	0x0404ea89
   1d270:	2507f3c4 	.word	0x2507f3c4
   1d274:	0e265d5d 	.word	0x0e265d5d
   1d278:	f0825d9e 	.word	0xf0825d9e
   1d27c:	ea850c02 	.word	0xea850c02
   1d280:	ea85050c 	.word	0xea85050c
   1d284:	b2e64506 	.word	0xb2e64506
   1d288:	c006f813 	.word	0xc006f813
   1d28c:	4607f3c4 	.word	0x4607f3c4
   1d290:	ea855d9e 	.word	0xea855d9e
   1d294:	ea85650c 	.word	0xea85650c
   1d298:	406f2506 	.word	0x406f2506
   1d29c:	0c04ea87 	.word	0x0c04ea87
   1d2a0:	2607f3cc 	.word	0x2607f3cc
   1d2a4:	ea4f5d9e 	.word	0xea4f5d9e
   1d2a8:	f8136e1c 	.word	0xf8136e1c
   1d2ac:	f085e00e 	.word	0xf085e00e
   1d2b0:	ea860804 	.word	0xea860804
   1d2b4:	ea860608 	.word	0xea860608
   1d2b8:	fa5f460e 	.word	0xfa5f460e
   1d2bc:	f813fe8c 	.word	0xf813fe8c
   1d2c0:	6182e00e 	.word	0x6182e00e
   1d2c4:	4207f3cc 	.word	0x4207f3cc
   1d2c8:	660eea86 	.word	0x660eea86
   1d2cc:	e002f813 	.word	0xe002f813
   1d2d0:	0201ea85 	.word	0x0201ea85
   1d2d4:	260eea86 	.word	0x260eea86
   1d2d8:	0802ea86 	.word	0x0802ea86
   1d2dc:	0e04ea88 	.word	0x0e04ea88
   1d2e0:	f3ce61c1 	.word	0xf3ce61c1
   1d2e4:	5c592107 	.word	0x5c592107
   1d2e8:	6a1eea4f 	.word	0x6a1eea4f
   1d2ec:	a00af813 	.word	0xa00af813
   1d2f0:	0b08f086 	.word	0x0b08f086
   1d2f4:	010bea81 	.word	0x010bea81
   1d2f8:	410aea81 	.word	0x410aea81
   1d2fc:	fa8efa5f 	.word	0xfa8efa5f
   1d300:	a00af813 	.word	0xa00af813
   1d304:	f3ce6244 	.word	0xf3ce6244
   1d308:	5d1c4407 	.word	0x5d1c4407
   1d30c:	610aea81 	.word	0x610aea81
   1d310:	2104ea81 	.word	0x2104ea81
   1d314:	0a07ea81 	.word	0x0a07ea81
   1d318:	040eea8a 	.word	0x040eea8a
   1d31c:	630762c2 	.word	0x630762c2
   1d320:	2207f3c4 	.word	0x2207f3c4
   1d324:	0707ea88 	.word	0x0707ea88
   1d328:	680ee9c0 	.word	0x680ee9c0
   1d32c:	9020f8c0 	.word	0x9020f8c0
   1d330:	f8c06285 	.word	0xf8c06285
   1d334:	f8c0c034 	.word	0xf8c0c034
   1d338:	6407e044 	.word	0x6407e044
   1d33c:	f8136481 	.word	0xf8136481
   1d340:	0e22c002 	.word	0x0e22c002
   1d344:	f0815c9a 	.word	0xf0815c9a
   1d348:	ea8c0510 	.word	0xea8c0510
   1d34c:	ea8c0c05 	.word	0xea8c0c05
   1d350:	b2e24c02 	.word	0xb2e24c02
   1d354:	f3c45c9d 	.word	0xf3c45c9d
   1d358:	5c9a4207 	.word	0x5c9a4207
   1d35c:	6c05ea8c 	.word	0x6c05ea8c
   1d360:	2c02ea8c 	.word	0x2c02ea8c
   1d364:	0108ea81 	.word	0x0108ea81
   1d368:	090cea81 	.word	0x090cea81
   1d36c:	0209ea8e 	.word	0x0209ea8e
   1d370:	2507f3c2 	.word	0x2507f3c2
   1d374:	0e155d5e 	.word	0x0e155d5e
   1d378:	f08c5d5d 	.word	0xf08c5d5d
   1d37c:	407e0720 	.word	0x407e0720
   1d380:	4605ea86 	.word	0x4605ea86
   1d384:	5d5db2d5 	.word	0x5d5db2d5
   1d388:	f3c264c1 	.word	0xf3c264c1
   1d38c:	5c594107 	.word	0x5c594107
   1d390:	6605ea86 	.word	0x6605ea86
   1d394:	2601ea86 	.word	0x2601ea86
   1d398:	0e06ea8a 	.word	0x0e06ea8a
   1d39c:	080eea82 	.word	0x080eea82
   1d3a0:	2107f3c8 	.word	0x2107f3c8
   1d3a4:	ea4f5c5f 	.word	0xea4f5c5f
   1d3a8:	5c596118 	.word	0x5c596118
   1d3ac:	0540f086 	.word	0x0540f086
   1d3b0:	ea87406f 	.word	0xea87406f
   1d3b4:	fa5f4701 	.word	0xfa5f4701
   1d3b8:	5c59f188 	.word	0x5c59f188
   1d3bc:	0509ea8a 	.word	0x0509ea8a
   1d3c0:	6701ea87 	.word	0x6701ea87
   1d3c4:	4107f3c8 	.word	0x4107f3c8
   1d3c8:	f8c05c59 	.word	0xf8c05c59
   1d3cc:	ea87a050 	.word	0xea87a050
   1d3d0:	ea892701 	.word	0xea892701
   1d3d4:	66050a06 	.word	0x66050a06
   1d3d8:	0507ea8a 	.word	0x0507ea8a
   1d3dc:	0105ea82 	.word	0x0105ea82
   1d3e0:	f3c16544 	.word	0xf3c16544
   1d3e4:	5d1c2407 	.word	0x5d1c2407
   1d3e8:	6b11ea4f 	.word	0x6b11ea4f
   1d3ec:	b00bf813 	.word	0xb00bf813
   1d3f0:	f0876642 	.word	0xf0876642
   1d3f4:	40620280 	.word	0x40620280
   1d3f8:	ea82b2cc 	.word	0xea82b2cc
   1d3fc:	f813420b 	.word	0xf813420b
   1d400:	f3c1b004 	.word	0xf3c1b004
   1d404:	5d1c4407 	.word	0x5d1c4407
   1d408:	620bea82 	.word	0x620bea82
   1d40c:	2204ea82 	.word	0x2204ea82
   1d410:	0402ea8e 	.word	0x0402ea8e
   1d414:	c058f8c0 	.word	0xc058f8c0
   1d418:	0c04ea81 	.word	0x0c04ea81
   1d41c:	67c56686 	.word	0x67c56686
   1d420:	0605ea8e 	.word	0x0605ea8e
   1d424:	40556787 	.word	0x40556787
   1d428:	2707f3cc 	.word	0x2707f3cc
   1d42c:	ae1be9c0 	.word	0xae1be9c0
   1d430:	1084f8c0 	.word	0x1084f8c0
   1d434:	2088f8c0 	.word	0x2088f8c0
   1d438:	6080f8c0 	.word	0x6080f8c0
   1d43c:	905cf8c0 	.word	0x905cf8c0
   1d440:	8074f8c0 	.word	0x8074f8c0
   1d444:	508cf8c0 	.word	0x508cf8c0
   1d448:	f0825dde 	.word	0xf0825dde
   1d44c:	ea4f021b 	.word	0xea4f021b
   1d450:	f813671c 	.word	0xf813671c
   1d454:	4056e007 	.word	0x4056e007
   1d458:	f28cfa5f 	.word	0xf28cfa5f
   1d45c:	f3cc5c9f 	.word	0xf3cc5c9f
   1d460:	5c9a4207 	.word	0x5c9a4207
   1d464:	460eea86 	.word	0x460eea86
   1d468:	6607ea86 	.word	0x6607ea86
   1d46c:	2602ea86 	.word	0x2602ea86
   1d470:	40694075 	.word	0x40694075
   1d474:	2207f3c1 	.word	0x2207f3c1
   1d478:	0e0f5c9a 	.word	0x0e0f5c9a
   1d47c:	f0865ddf 	.word	0xf0865ddf
   1d480:	ea820e36 	.word	0xea820e36
   1d484:	ea82020e 	.word	0xea82020e
   1d488:	b2cf4207 	.word	0xb2cf4207
   1d48c:	e007f813 	.word	0xe007f813
   1d490:	4707f3c1 	.word	0x4707f3c1
   1d494:	ea825ddf 	.word	0xea825ddf
   1d498:	ea83630e 	.word	0xea83630e
   1d49c:	ea832307 	.word	0xea832307
   1d4a0:	ea820204 	.word	0xea820204
   1d4a4:	e9c00e01 	.word	0xe9c00e01
   1d4a8:	e9c06526 	.word	0xe9c06526
   1d4ac:	f8c02e2c 	.word	0xf8c02e2c
   1d4b0:	ea834090 	.word	0xea834090
   1d4b4:	406c0705 	.word	0x406c0705
   1d4b8:	c094f8c0 	.word	0xc094f8c0
   1d4bc:	10a4f8c0 	.word	0x10a4f8c0
   1d4c0:	30a8f8c0 	.word	0x30a8f8c0
   1d4c4:	70acf8c0 	.word	0x70acf8c0
   1d4c8:	40a0f8c0 	.word	0x40a0f8c0
   1d4cc:	b0052000 	.word	0xb0052000
   1d4d0:	8ff0e8bd 	.word	0x8ff0e8bd
   1d4d4:	6003230e 	.word	0x6003230e
   1d4d8:	230ce686 	.word	0x230ce686
   1d4dc:	e6836003 	.word	0xe6836003
   1d4e0:	ce03e9d0 	.word	0xce03e9d0
   1d4e4:	8907e9d0 	.word	0x8907e9d0
   1d4e8:	7205e9d0 	.word	0x7205e9d0
   1d4ec:	68836a46 	.word	0x68836a46
   1d4f0:	f8df4670 	.word	0xf8df4670
   1d4f4:	4d29a0b0 	.word	0x4d29a0b0
   1d4f8:	c000f8cd 	.word	0xc000f8cd
   1d4fc:	bf04f85a 	.word	0xbf04f85a
   1d500:	2c07f3c6 	.word	0x2c07f3c6
   1d504:	e00cf815 	.word	0xe00cf815
   1d508:	6c16ea4f 	.word	0x6c16ea4f
   1d50c:	030bea83 	.word	0x030bea83
   1d510:	b00cf815 	.word	0xb00cf815
   1d514:	fc86fa5f 	.word	0xfc86fa5f
   1d518:	0303ea8e 	.word	0x0303ea8e
   1d51c:	c00cf815 	.word	0xc00cf815
   1d520:	4e07f3c6 	.word	0x4e07f3c6
   1d524:	430bea83 	.word	0x430bea83
   1d528:	e00ef815 	.word	0xe00ef815
   1d52c:	630cea83 	.word	0x630cea83
   1d530:	ea839900 	.word	0xea839900
   1d534:	4059230e 	.word	0x4059230e
   1d538:	40474048 	.word	0x40474048
   1d53c:	fc87fa5f 	.word	0xfc87fa5f
   1d540:	e00cf815 	.word	0xe00cf815
   1d544:	6c17ea4f 	.word	0x6c17ea4f
   1d548:	b00cf815 	.word	0xb00cf815
   1d54c:	2c07f3c7 	.word	0x2c07f3c7
   1d550:	0202ea8e 	.word	0x0202ea8e
   1d554:	c00cf815 	.word	0xc00cf815
   1d558:	4e07f3c7 	.word	0x4e07f3c7
   1d55c:	620bea82 	.word	0x620bea82
   1d560:	e00ef815 	.word	0xe00ef815
   1d564:	220cea82 	.word	0x220cea82
   1d568:	420eea82 	.word	0x420eea82
   1d56c:	0802ea88 	.word	0x0802ea88
   1d570:	3108e9c4 	.word	0x3108e9c4
   1d574:	490a9100 	.word	0x490a9100
   1d578:	0908ea89 	.word	0x0908ea89
   1d57c:	0609ea86 	.word	0x0609ea86
   1d580:	e9c4458a 	.word	0xe9c4458a
   1d584:	e9c4070a 	.word	0xe9c4070a
   1d588:	e9c4960e 	.word	0xe9c4960e
   1d58c:	f104280c 	.word	0xf104280c
   1d590:	d1b30420 	.word	0xd1b30420
   1d594:	b0052000 	.word	0xb0052000
   1d598:	8ff0e8bd 	.word	0x8ff0e8bd
   1d59c:	00025cfc 	.word	0x00025cfc
   1d5a0:	00026214 	.word	0x00026214
   1d5a4:	000261f8 	.word	0x000261f8
   1d5a8:	4bb269c2 	.word	0x4bb269c2
   1d5ac:	2407f3c2 	.word	0x2407f3c2
   1d5b0:	5d1d6881 	.word	0x5d1d6881
   1d5b4:	5d1e0e14 	.word	0x5d1e0e14
   1d5b8:	0101f081 	.word	0x0101f081
   1d5bc:	5d1cb2d4 	.word	0x5d1cb2d4
   1d5c0:	f3c2404d 	.word	0xf3c2404d
   1d5c4:	5c594107 	.word	0x5c594107
   1d5c8:	4506ea85 	.word	0x4506ea85
   1d5cc:	ea8568c7 	.word	0xea8568c7
   1d5d0:	ea856504 	.word	0xea856504
   1d5d4:	69012501 	.word	0x69012501
   1d5d8:	6946406f 	.word	0x6946406f
   1d5dc:	0907ea81 	.word	0x0907ea81
   1d5e0:	ea866984 	.word	0xea866984
   1d5e4:	ea840609 	.word	0xea840609
   1d5e8:	ea820806 	.word	0xea820806
   1d5ec:	f3c20208 	.word	0xf3c20208
   1d5f0:	f8132407 	.word	0xf8132407
   1d5f4:	ea4fe004 	.word	0xea4fe004
   1d5f8:	f8136c12 	.word	0xf8136c12
   1d5fc:	f085a00c 	.word	0xf085a00c
   1d600:	fa5f0402 	.word	0xfa5f0402
   1d604:	ea8efc82 	.word	0xea8efc82
   1d608:	f8130404 	.word	0xf8130404
   1d60c:	f3c2e00c 	.word	0xf3c2e00c
   1d610:	f8134c07 	.word	0xf8134c07
   1d614:	ea84c00c 	.word	0xea84c00c
   1d618:	ea84440a 	.word	0xea84440a
   1d61c:	ea84640e 	.word	0xea84640e
   1d620:	4061240c 	.word	0x4061240c
   1d624:	460c9401 	.word	0x460c9401
   1d628:	62056981 	.word	0x62056981
   1d62c:	ea824061 	.word	0xea824061
   1d630:	91030c01 	.word	0x91030c01
   1d634:	2e07f3cc 	.word	0x2e07f3cc
   1d638:	f8139901 	.word	0xf8139901
   1d63c:	ea4fe00e 	.word	0xea4fe00e
   1d640:	f8136a1c 	.word	0xf8136a1c
   1d644:	f081a00a 	.word	0xf081a00a
   1d648:	ea8e0b04 	.word	0xea8e0b04
   1d64c:	ea8e0e0b 	.word	0xea8e0e0b
   1d650:	fa5f4a0a 	.word	0xfa5f4a0a
   1d654:	f813fe8c 	.word	0xf813fe8c
   1d658:	e9c0e00e 	.word	0xe9c0e00e
   1d65c:	ea8a960a 	.word	0xea8a960a
   1d660:	f3cc650e 	.word	0xf3cc650e
   1d664:	f8134e07 	.word	0xf8134e07
   1d668:	ea87e00e 	.word	0xea87e00e
   1d66c:	ea850a01 	.word	0xea850a01
   1d670:	ea8a250e 	.word	0xea8a250e
   1d674:	ea860e05 	.word	0xea860e05
   1d678:	9100010e 	.word	0x9100010e
   1d67c:	ea864621 	.word	0xea864621
   1d680:	9c000904 	.word	0x9c000904
   1d684:	820ce9c0 	.word	0x820ce9c0
   1d688:	0604ea82 	.word	0x0604ea82
   1d68c:	f8c06247 	.word	0xf8c06247
   1d690:	9102a03c 	.word	0x9102a03c
   1d694:	9f036401 	.word	0x9f036401
   1d698:	2407f3c6 	.word	0x2407f3c6
   1d69c:	080eea81 	.word	0x080eea81
   1d6a0:	7c12e9c0 	.word	0x7c12e9c0
   1d6a4:	ea4f5d1c 	.word	0xea4f5d1c
   1d6a8:	e9c06c16 	.word	0xe9c06c16
   1d6ac:	f8c05e14 	.word	0xf8c05e14
   1d6b0:	f0858058 	.word	0xf0858058
   1d6b4:	f8130508 	.word	0xf8130508
   1d6b8:	fa5f800c 	.word	0xfa5f800c
   1d6bc:	9901fc86 	.word	0x9901fc86
   1d6c0:	c00cf813 	.word	0xc00cf813
   1d6c4:	f3c64065 	.word	0xf3c64065
   1d6c8:	5d1c4407 	.word	0x5d1c4407
   1d6cc:	4508ea85 	.word	0x4508ea85
   1d6d0:	ea856381 	.word	0xea856381
   1d6d4:	9902650c 	.word	0x9902650c
   1d6d8:	2504ea85 	.word	0x2504ea85
   1d6dc:	91014069 	.word	0x91014069
   1d6e0:	69844639 	.word	0x69844639
   1d6e4:	9044f8c0 	.word	0x9044f8c0
   1d6e8:	0805ea84 	.word	0x0805ea84
   1d6ec:	0908ea86 	.word	0x0908ea86
   1d6f0:	2407f3c9 	.word	0x2407f3c9
   1d6f4:	a004f813 	.word	0xa004f813
   1d6f8:	6419ea4f 	.word	0x6419ea4f
   1d6fc:	f0855d1c 	.word	0xf0855d1c
   1d700:	ea8a0c10 	.word	0xea8a0c10
   1d704:	fa5f0c0c 	.word	0xfa5f0c0c
   1d708:	f813fa89 	.word	0xf813fa89
   1d70c:	ea8ca00a 	.word	0xea8ca00a
   1d710:	f3c94c04 	.word	0xf3c94c04
   1d714:	5d1c4407 	.word	0x5d1c4407
   1d718:	6c0aea8c 	.word	0x6c0aea8c
   1d71c:	0e05ea8e 	.word	0x0e05ea8e
   1d720:	2c04ea8c 	.word	0x2c04ea8c
   1d724:	040cea8e 	.word	0x040cea8e
   1d728:	f8c04062 	.word	0xf8c04062
   1d72c:	f3c2e06c 	.word	0xf3c2e06c
   1d730:	f8132e07 	.word	0xf8132e07
   1d734:	ea4fe00e 	.word	0xea4fe00e
   1d738:	f8136a12 	.word	0xf8136a12
   1d73c:	f08ca00a 	.word	0xf08ca00a
   1d740:	ea8e0b20 	.word	0xea8e0b20
   1d744:	ea8e0e0b 	.word	0xea8e0e0b
   1d748:	fa5f4a0a 	.word	0xfa5f4a0a
   1d74c:	f813fe82 	.word	0xf813fe82
   1d750:	9f00e00e 	.word	0x9f00e00e
   1d754:	6a0eea8a 	.word	0x6a0eea8a
   1d758:	4e07f3c2 	.word	0x4e07f3c2
   1d75c:	b00ef813 	.word	0xb00ef813
   1d760:	0e07ea81 	.word	0x0e07ea81
   1d764:	ea8a9901 	.word	0xea8a9901
   1d768:	ea812b0b 	.word	0xea812b0b
   1d76c:	9f000a0b 	.word	0x9f000a0b
   1d770:	e060f8c0 	.word	0xe060f8c0
   1d774:	0e0aea88 	.word	0x0e0aea88
   1d778:	664665c7 	.word	0x664665c7
   1d77c:	907cf8c0 	.word	0x907cf8c0
   1d780:	060eea82 	.word	0x060eea82
   1d784:	ea876701 	.word	0xea876701
   1d788:	404f0904 	.word	0x404f0904
   1d78c:	66854061 	.word	0x66854061
   1d790:	1088f8c0 	.word	0x1088f8c0
   1d794:	2507f3c6 	.word	0x2507f3c6
   1d798:	0109ea88 	.word	0x0109ea88
   1d79c:	1090f8c0 	.word	0x1090f8c0
   1d7a0:	0e315d5d 	.word	0x0e315d5d
   1d7a4:	f8c05c59 	.word	0xf8c05c59
   1d7a8:	f8c04084 	.word	0xf8c04084
   1d7ac:	ea84b098 	.word	0xea84b098
   1d7b0:	6747040b 	.word	0x6747040b
   1d7b4:	0b40f08b 	.word	0x0b40f08b
   1d7b8:	5ddfb2f7 	.word	0x5ddfb2f7
   1d7bc:	60acf8c0 	.word	0x60acf8c0
   1d7c0:	050bea85 	.word	0x050bea85
   1d7c4:	4607f3c6 	.word	0x4607f3c6
   1d7c8:	4501ea85 	.word	0x4501ea85
   1d7cc:	ea855d99 	.word	0xea855d99
   1d7d0:	ea856507 	.word	0xea856507
   1d7d4:	f8c02501 	.word	0xf8c02501
   1d7d8:	406c409c 	.word	0x406c409c
   1d7dc:	0604ea89 	.word	0x0604ea89
   1d7e0:	2094f8c0 	.word	0x2094f8c0
   1d7e4:	f3c24072 	.word	0xf3c24072
   1d7e8:	f8c02107 	.word	0xf8c02107
   1d7ec:	5c59c080 	.word	0x5c59c080
   1d7f0:	0c0aea89 	.word	0x0c0aea89
   1d7f4:	f8c00e17 	.word	0xf8c00e17
   1d7f8:	f8c0908c 	.word	0xf8c0908c
   1d7fc:	f813c0a4 	.word	0xf813c0a4
   1d800:	f0859007 	.word	0xf0859007
   1d804:	b2d70c80 	.word	0xb2d70c80
   1d808:	010cea81 	.word	0x010cea81
   1d80c:	c007f813 	.word	0xc007f813
   1d810:	4707f3c2 	.word	0x4707f3c2
   1d814:	ea815ddf 	.word	0xea815ddf
   1d818:	ea814109 	.word	0xea814109
   1d81c:	ea83630c 	.word	0xea83630c
   1d820:	f8c02307 	.word	0xf8c02307
   1d824:	ea838078 	.word	0xea838078
   1d828:	ea830c0a 	.word	0xea830c0a
   1d82c:	f8c00808 	.word	0xf8c00808
   1d830:	ea8ee0a8 	.word	0xea8ee0a8
   1d834:	ea880706 	.word	0xea880706
   1d838:	ea8c0b02 	.word	0xea8c0b02
   1d83c:	ea830906 	.word	0xea830906
   1d840:	ea8a0e04 	.word	0xea8a0e04
   1d844:	f8c00104 	.word	0xf8c00104
   1d848:	e9c0a0a0 	.word	0xe9c0a0a0
   1d84c:	f8c07230 	.word	0xf8c07230
   1d850:	e9c060bc 	.word	0xe9c060bc
   1d854:	e9c0542c 	.word	0xe9c0542c
   1d858:	f8c08b36 	.word	0xf8c08b36
   1d85c:	e9c030c8 	.word	0xe9c030c8
   1d860:	f8c0c934 	.word	0xf8c0c934
   1d864:	f8c0e0cc 	.word	0xf8c0e0cc
   1d868:	200010b8 	.word	0x200010b8
   1d86c:	e8bdb005 	.word	0xe8bdb005
   1d870:	bf008ff0 	.word	0xbf008ff0
   1d874:	00025cfc 	.word	0x00025cfc

0001d878 <symbol_000e9b3>:
   1d878:	4ff0e92d 	.word	0x4ff0e92d
   1d87c:	0400e9d0 	.word	0x0400e9d0
   1d880:	46061040 	.word	0x46061040
   1d884:	f8d16823 	.word	0xf8d16823
   1d888:	b089a000 	.word	0xb089a000
   1d88c:	0a03ea8a 	.word	0x0a03ea8a
   1d890:	800cf8d1 	.word	0x800cf8d1
   1d894:	3e0168e3 	.word	0x3e0168e3
   1d898:	68659006 	.word	0x68659006
   1d89c:	68a0684f 	.word	0x68a0684f
   1d8a0:	688a9205 	.word	0x688a9205
   1d8a4:	0803ea88 	.word	0x0803ea88
   1d8a8:	f1042e00 	.word	0xf1042e00
   1d8ac:	96010310 	.word	0x96010310
   1d8b0:	0507ea85 	.word	0x0507ea85
   1d8b4:	0200ea82 	.word	0x0200ea82
   1d8b8:	f8df9304 	.word	0xf8df9304
   1d8bc:	f340b3e8 	.word	0xf340b3e8
   1d8c0:	462b80db 	.word	0x462b80db
   1d8c4:	0930f104 	.word	0x0930f104
   1d8c8:	f18afa5f 	.word	0xf18afa5f
   1d8cc:	f788fa5f 	.word	0xf788fa5f
   1d8d0:	b2d4b2de 	.word	0xb2d4b2de
   1d8d4:	0021f85b 	.word	0x0021f85b
   1d8d8:	5027f85b 	.word	0x5027f85b
   1d8dc:	7026f85b 	.word	0x7026f85b
   1d8e0:	6024f85b 	.word	0x6024f85b
   1d8e4:	4c20f859 	.word	0x4c20f859
   1d8e8:	6118ea4f 	.word	0x6118ea4f
   1d8ec:	0c04ea80 	.word	0x0c04ea80
   1d8f0:	0c14f859 	.word	0x0c14f859
   1d8f4:	1021f85b 	.word	0x1021f85b
   1d8f8:	0e00ea85 	.word	0x0e00ea85
   1d8fc:	f85b0e10 	.word	0xf85b0e10
   1d900:	f3c35020 	.word	0xf3c35020
   1d904:	ea8c2407 	.word	0xea8c2407
   1d908:	f3c22c31 	.word	0xf3c22c31
   1d90c:	f3c24107 	.word	0xf3c24107
   1d910:	f85b2207 	.word	0xf85b2207
   1d914:	f85b4024 	.word	0xf85b4024
   1d918:	ea8e0022 	.word	0xea8e0022
   1d91c:	0e1d2235 	.word	0x0e1d2235
   1d920:	4307f3c3 	.word	0x4307f3c3
   1d924:	3023f85b 	.word	0x3023f85b
   1d928:	6c34ea8c 	.word	0x6c34ea8c
   1d92c:	4c18f859 	.word	0x4c18f859
   1d930:	f85b9302 	.word	0xf85b9302
   1d934:	f8595025 	.word	0xf8595025
   1d938:	ea4f3c1c 	.word	0xea4f3c1c
   1d93c:	f85b6e1a 	.word	0xf85b6e1a
   1d940:	4066e02e 	.word	0x4066e02e
   1d944:	f3ca405f 	.word	0xf3ca405f
   1d948:	ea862407 	.word	0xea862407
   1d94c:	f3c82635 	.word	0xf3c82635
   1d950:	f3c82507 	.word	0xf3c82507
   1d954:	ea874807 	.word	0xea874807
   1d958:	f85b273e 	.word	0xf85b273e
   1d95c:	f85b4024 	.word	0xf85b4024
   1d960:	f85be025 	.word	0xf85be025
   1d964:	9b025028 	.word	0x9b025028
   1d968:	6030ea87 	.word	0x6030ea87
   1d96c:	4035ea80 	.word	0x4035ea80
   1d970:	1021f85b 	.word	0x1021f85b
   1d974:	6434ea82 	.word	0x6434ea82
   1d978:	4433ea84 	.word	0x4433ea84
   1d97c:	ea8cb2c3 	.word	0xea8cb2c3
   1d980:	f85b4131 	.word	0xf85b4131
   1d984:	f3ca3023 	.word	0xf3ca3023
   1d988:	f85b4a07 	.word	0xf85b4a07
   1d98c:	b2ca702a 	.word	0xb2ca702a
   1d990:	6c14ea4f 	.word	0x6c14ea4f
   1d994:	2022f85b 	.word	0x2022f85b
   1d998:	663eea86 	.word	0x663eea86
   1d99c:	f8599302 	.word	0xf8599302
   1d9a0:	ea863c10 	.word	0xea863c10
   1d9a4:	f85b4637 	.word	0xf85b4637
   1d9a8:	f3c0e02c 	.word	0xf3c0e02c
   1d9ac:	f85b2707 	.word	0xf85b2707
   1d9b0:	ea82c027 	.word	0xea82c027
   1d9b4:	f3c60a03 	.word	0xf3c60a03
   1d9b8:	f3c64507 	.word	0xf3c64507
   1d9bc:	f85b2207 	.word	0xf85b2207
   1d9c0:	f85b3022 	.word	0xf85b3022
   1d9c4:	ea8a5025 	.word	0xea8a5025
   1d9c8:	f3c42a3e 	.word	0xf3c42a3e
   1d9cc:	0e0f4207 	.word	0x0e0f4207
   1d9d0:	6a3cea8a 	.word	0x6a3cea8a
   1d9d4:	7027f85b 	.word	0x7027f85b
   1d9d8:	ea8a9303 	.word	0xea8a9303
   1d9dc:	f85b4a35 	.word	0xf85b4a35
   1d9e0:	f8598022 	.word	0xf8598022
   1d9e4:	9b025c0c 	.word	0x9b025c0c
   1d9e8:	406bb2f2 	.word	0x406bb2f2
   1d9ec:	2022f85b 	.word	0x2022f85b
   1d9f0:	2337ea83 	.word	0x2337ea83
   1d9f4:	7c08f859 	.word	0x7c08f859
   1d9f8:	fc84fa5f 	.word	0xfc84fa5f
   1d9fc:	2407f3c4 	.word	0x2407f3c4
   1da00:	502cf85b 	.word	0x502cf85b
   1da04:	0e364057 	.word	0x0e364057
   1da08:	2024f85b 	.word	0x2024f85b
   1da0c:	4c04f859 	.word	0x4c04f859
   1da10:	6e10ea4f 	.word	0x6e10ea4f
   1da14:	6026f85b 	.word	0x6026f85b
   1da18:	f85b406c 	.word	0xf85b406c
   1da1c:	ea84e02e 	.word	0xea84e02e
   1da20:	f3c12636 	.word	0xf3c12636
   1da24:	f3c12407 	.word	0xf3c12407
   1da28:	f85b4107 	.word	0xf85b4107
   1da2c:	ea871021 	.word	0xea871021
   1da30:	ea8e2e3e 	.word	0xea8e2e3e
   1da34:	f3c06232 	.word	0xf3c06232
   1da38:	f85b4007 	.word	0xf85b4007
   1da3c:	9d034024 	.word	0x9d034024
   1da40:	4231ea82 	.word	0x4231ea82
   1da44:	f85b9901 	.word	0xf85b9901
   1da48:	ea830020 	.word	0xea830020
   1da4c:	ea866335 	.word	0xea866335
   1da50:	39016634 	.word	0x39016634
   1da54:	4338ea83 	.word	0x4338ea83
   1da58:	0920f109 	.word	0x0920f109
   1da5c:	4830ea86 	.word	0x4830ea86
   1da60:	f47f9101 	.word	0xf47f9101
   1da64:	461daf31 	.word	0x461daf31
   1da68:	99049b06 	.word	0x99049b06
   1da6c:	6300f103 	.word	0x6300f103
   1da70:	eb013b01 	.word	0xeb013b01
   1da74:	93041343 	.word	0x93041343
   1da78:	fa5f2400 	.word	0xfa5f2400
   1da7c:	f85bf38a 	.word	0xf85bf38a
   1da80:	9b047023 	.word	0x9b047023
   1da84:	fa5f46a1 	.word	0xfa5f46a1
   1da88:	6819fc85 	.word	0x6819fc85
   1da8c:	6318ea4f 	.word	0x6318ea4f
   1da90:	46a69407 	.word	0x46a69407
   1da94:	402cf85b 	.word	0x402cf85b
   1da98:	c023f85b 	.word	0xc023f85b
   1da9c:	f3c54079 	.word	0xf3c54079
   1daa0:	f85b2307 	.word	0xf85b2307
   1daa4:	f3c23023 	.word	0xf3c23023
   1daa8:	ea814707 	.word	0xea814707
   1daac:	fa5f213c 	.word	0xfa5f213c
   1dab0:	f85bfc82 	.word	0xf85bfc82
   1dab4:	f85b002c 	.word	0xf85b002c
   1dab8:	ea817027 	.word	0xea817027
   1dabc:	90036133 	.word	0x90036133
   1dac0:	4037ea81 	.word	0x4037ea81
   1dac4:	fa5f9f04 	.word	0xfa5f9f04
   1dac8:	f85bf688 	.word	0xf85bf688
   1dacc:	68fb6026 	.word	0x68fb6026
   1dad0:	40739001 	.word	0x40739001
   1dad4:	f85b0e16 	.word	0xf85b0e16
   1dad8:	98046026 	.word	0x98046026
   1dadc:	2636ea83 	.word	0x2636ea83
   1dae0:	f85b0e2b 	.word	0xf85b0e2b
   1dae4:	f3c53023 	.word	0xf3c53023
   1dae8:	496d4507 	.word	0x496d4507
   1daec:	7025f85b 	.word	0x7025f85b
   1daf0:	f89d9306 	.word	0xf89d9306
   1daf4:	6843c004 	.word	0x6843c004
   1daf8:	651aea4f 	.word	0x651aea4f
   1dafc:	5025f85b 	.word	0x5025f85b
   1db00:	2207f3c2 	.word	0x2207f3c2
   1db04:	2022f85b 	.word	0x2022f85b
   1db08:	c00cf811 	.word	0xc00cf811
   1db0c:	69044063 	.word	0x69044063
   1db10:	2535ea83 	.word	0x2535ea83
   1db14:	2307f3ca 	.word	0x2307f3ca
   1db18:	3023f85b 	.word	0x3023f85b
   1db1c:	0c04ea8c 	.word	0x0c04ea8c
   1db20:	6532ea85 	.word	0x6532ea85
   1db24:	68829c03 	.word	0x68829c03
   1db28:	6633ea86 	.word	0x6633ea86
   1db2c:	f3c84660 	.word	0xf3c84660
   1db30:	ea842307 	.word	0xea842307
   1db34:	9c060c02 	.word	0x9c060c02
   1db38:	3023f85b 	.word	0x3023f85b
   1db3c:	4a07f3ca 	.word	0x4a07f3ca
   1db40:	202af85b 	.word	0x202af85b
   1db44:	2c34ea8c 	.word	0x2c34ea8c
   1db48:	4807f3c8 	.word	0x4807f3c8
   1db4c:	4637ea86 	.word	0x4637ea86
   1db50:	6c33ea8c 	.word	0x6c33ea8c
   1db54:	7028f85b 	.word	0x7028f85b
   1db58:	4232ea8c 	.word	0x4232ea8c
   1db5c:	4537ea85 	.word	0x4537ea85
   1db60:	4c07f3c2 	.word	0x4c07f3c2
   1db64:	5ccb0e33 	.word	0x5ccb0e33
   1db68:	a00cf811 	.word	0xa00cf811
   1db6c:	fc85fa5f 	.word	0xfc85fa5f
   1db70:	400cf811 	.word	0x400cf811
   1db74:	2707f3c5 	.word	0x2707f3c5
   1db78:	464c9403 	.word	0x464c9403
   1db7c:	ea805dcf 	.word	0xea805dcf
   1db80:	98016303 	.word	0x98016303
   1db84:	2307ea83 	.word	0x2307ea83
   1db88:	fb82fa5f 	.word	0xfb82fa5f
   1db8c:	430aea83 	.word	0x430aea83
   1db90:	b00bf811 	.word	0xb00bf811
   1db94:	6c10ea4f 	.word	0x6c10ea4f
   1db98:	f3639804 	.word	0xf3639804
   1db9c:	f8110407 	.word	0xf8110407
   1dba0:	f8cd800c 	.word	0xf8cd800c
   1dba4:	9402b018 	.word	0x9402b018
   1dba8:	2c07f3c2 	.word	0x2c07f3c2
   1dbac:	ea4f9c03 	.word	0xea4f9c03
   1dbb0:	69426b12 	.word	0x69426b12
   1dbb4:	c00cf811 	.word	0xc00cf811
   1dbb8:	f3c64062 	.word	0xf3c64062
   1dbbc:	5dcf4707 	.word	0x5dcf4707
   1dbc0:	6808ea82 	.word	0x6808ea82
   1dbc4:	6a15ea4f 	.word	0x6a15ea4f
   1dbc8:	ea886982 	.word	0xea886982
   1dbcc:	9c062c0c 	.word	0x9c062c0c
   1dbd0:	f886fa5f 	.word	0xf886fa5f
   1dbd4:	4707ea8c 	.word	0x4707ea8c
   1dbd8:	8008f811 	.word	0x8008f811
   1dbdc:	c00af811 	.word	0xc00af811
   1dbe0:	a01cf8d0 	.word	0xa01cf8d0
   1dbe4:	40629801 	.word	0x40629801
   1dbe8:	0a0aea88 	.word	0x0a0aea88
   1dbec:	620cea82 	.word	0x620cea82
   1dbf0:	4807f3c0 	.word	0x4807f3c0
   1dbf4:	2c07f3c0 	.word	0x2c07f3c0
   1dbf8:	f8112000 	.word	0xf8112000
   1dbfc:	f3c6b00b 	.word	0xf3c6b00b
   1dc00:	5d8e2607 	.word	0x5d8e2607
   1dc04:	6b0bea8a 	.word	0x6b0bea8a
   1dc08:	4507f3c5 	.word	0x4507f3c5
   1dc0c:	a00cf811 	.word	0xa00cf811
   1dc10:	f8115d4d 	.word	0xf8115d4d
   1dc14:	ea821008 	.word	0xea821008
   1dc18:	ea8b2606 	.word	0xea8b2606
   1dc1c:	9c022b0a 	.word	0x9c022b0a
   1dc20:	4b05ea8b 	.word	0x4b05ea8b
   1dc24:	4601ea86 	.word	0x4601ea86
   1dc28:	2c13ea4f 	.word	0x2c13ea4f
   1dc2c:	ea4f0a31 	.word	0xea4f0a31
   1dc30:	f366221b 	.word	0xf366221b
   1dc34:	f36b0e07 	.word	0xf36b0e07
   1dc38:	f36c0007 	.word	0xf36c0007
   1dc3c:	ea4f240f 	.word	0xea4f240f
   1dc40:	f3624c13 	.word	0xf3624c13
   1dc44:	f361200f 	.word	0xf361200f
   1dc48:	f36c2e0f 	.word	0xf36c2e0f
   1dc4c:	0c314417 	.word	0x0c314417
   1dc50:	4e17f361 	.word	0x4e17f361
   1dc54:	46204601 	.word	0x46204601
   1dc58:	f3630e1b 	.word	0xf3630e1b
   1dc5c:	9b05601f 	.word	0x9b05601f
   1dc60:	60180a3d 	.word	0x60180a3d
   1dc64:	f3672000 	.word	0xf3672000
   1dc68:	ea4f0907 	.word	0xea4f0907
   1dc6c:	f365421b 	.word	0xf365421b
   1dc70:	0c3d290f 	.word	0x0c3d290f
   1dc74:	4917f365 	.word	0x4917f365
   1dc78:	0e360e3f 	.word	0x0e360e3f
   1dc7c:	4117f362 	.word	0x4117f362
   1dc80:	6b1bea4f 	.word	0x6b1bea4f
   1dc84:	691ff367 	.word	0x691ff367
   1dc88:	6e1ff366 	.word	0x6e1ff366
   1dc8c:	611ff36b 	.word	0x611ff36b
   1dc90:	9004f8c3 	.word	0x9004f8c3
   1dc94:	e008f8c3 	.word	0xe008f8c3
   1dc98:	b00960d9 	.word	0xb00960d9
   1dc9c:	8ff0e8bd 	.word	0x8ff0e8bd
   1dca0:	00025cfc 	.word	0x00025cfc
   1dca4:	00025dfc 	.word	0x00025dfc

0001dca8 <symbol_000e471>:
   1dca8:	4ff0e92d 	.word	0x4ff0e92d
   1dcac:	3500e9d0 	.word	0x3500e9d0
   1dcb0:	682fb089 	.word	0x682fb089
   1dcb4:	f8d1105b 	.word	0xf8d1105b
   1dcb8:	9306a000 	.word	0x9306a000
   1dcbc:	684c3b01 	.word	0x684c3b01
   1dcc0:	ea8a9301 	.word	0xea8a9301
   1dcc4:	68eb0a07 	.word	0x68eb0a07
   1dcc8:	68c9688f 	.word	0x68c9688f
   1dccc:	40596868 	.word	0x40596868
   1dcd0:	68ae9b01 	.word	0x68ae9b01
   1dcd4:	2b009205 	.word	0x2b009205
   1dcd8:	0210f105 	.word	0x0210f105
   1dcdc:	0004ea80 	.word	0x0004ea80
   1dce0:	0706ea87 	.word	0x0706ea87
   1dce4:	f8df9204 	.word	0xf8df9204
   1dce8:	f340b3dc 	.word	0xf340b3dc
   1dcec:	46d180d7 	.word	0x46d180d7
   1dcf0:	0830f105 	.word	0x0830f105
   1dcf4:	f489fa5f 	.word	0xf489fa5f
   1dcf8:	5024f85b 	.word	0x5024f85b
   1dcfc:	6c20f858 	.word	0x6c20f858
   1dd00:	fc80fa5f 	.word	0xfc80fa5f
   1dd04:	f85b0e04 	.word	0xf85b0e04
   1dd08:	f85bc02c 	.word	0xf85bc02c
   1dd0c:	406e4024 	.word	0x406e4024
   1dd10:	5c1cf858 	.word	0x5c1cf858
   1dd14:	2e07f3c1 	.word	0x2e07f3c1
   1dd18:	a02ef85b 	.word	0xa02ef85b
   1dd1c:	0505ea8c 	.word	0x0505ea8c
   1dd20:	2e34ea86 	.word	0x2e34ea86
   1dd24:	b2fbb2ca 	.word	0xb2fbb2ca
   1dd28:	6c17ea4f 	.word	0x6c17ea4f
   1dd2c:	4407f3c7 	.word	0x4407f3c7
   1dd30:	2707f3c7 	.word	0x2707f3c7
   1dd34:	6027f85b 	.word	0x6027f85b
   1dd38:	2022f85b 	.word	0x2022f85b
   1dd3c:	7c14f858 	.word	0x7c14f858
   1dd40:	3023f85b 	.word	0x3023f85b
   1dd44:	ea4f407a 	.word	0xea4f407a
   1dd48:	f85b6719 	.word	0xf85b6719
   1dd4c:	f85b7027 	.word	0xf85b7027
   1dd50:	ea82c02c 	.word	0xea82c02c
   1dd54:	ea822237 	.word	0xea822237
   1dd58:	f8586636 	.word	0xf8586636
   1dd5c:	ea852c18 	.word	0xea852c18
   1dd60:	ea8e2c3c 	.word	0xea8e2c3c
   1dd64:	0e0d6e3a 	.word	0x0e0d6e3a
   1dd68:	0a02ea83 	.word	0x0a02ea83
   1dd6c:	2307f3c9 	.word	0x2307f3c9
   1dd70:	3023f85b 	.word	0x3023f85b
   1dd74:	5025f85b 	.word	0x5025f85b
   1dd78:	4107f3c1 	.word	0x4107f3c1
   1dd7c:	1021f85b 	.word	0x1021f85b
   1dd80:	2707f3c0 	.word	0x2707f3c0
   1dd84:	2535ea8a 	.word	0x2535ea8a
   1dd88:	4a07f3c0 	.word	0x4a07f3c0
   1dd8c:	6033ea8c 	.word	0x6033ea8c
   1dd90:	4031ea80 	.word	0x4031ea80
   1dd94:	4024f85b 	.word	0x4024f85b
   1dd98:	ea8e0e03 	.word	0xea8e0e03
   1dd9c:	f85b4434 	.word	0xf85b4434
   1dda0:	b2e13023 	.word	0xb2e13023
   1dda4:	f3c99302 	.word	0xf3c99302
   1dda8:	f8584907 	.word	0xf8584907
   1ddac:	f85b3c10 	.word	0xf85b3c10
   1ddb0:	f85b1021 	.word	0xf85b1021
   1ddb4:	f3c42029 	.word	0xf3c42029
   1ddb8:	f85b2c07 	.word	0xf85b2c07
   1ddbc:	f85b9027 	.word	0xf85b9027
   1ddc0:	4059702a 	.word	0x4059702a
   1ddc4:	302cf85b 	.word	0x302cf85b
   1ddc8:	4637ea86 	.word	0x4637ea86
   1ddcc:	6539ea85 	.word	0x6539ea85
   1ddd0:	4532ea85 	.word	0x4532ea85
   1ddd4:	2707f3c6 	.word	0x2707f3c6
   1ddd8:	9b029303 	.word	0x9b029303
   1dddc:	4e07f3c5 	.word	0x4e07f3c5
   1dde0:	7027f85b 	.word	0x7027f85b
   1dde4:	902ef85b 	.word	0x902ef85b
   1dde8:	4c07f3c6 	.word	0x4c07f3c6
   1ddec:	ea4fb2c2 	.word	0xea4fb2c2
   1ddf0:	ea816e15 	.word	0xea816e15
   1ddf4:	b2e92333 	.word	0xb2e92333
   1ddf8:	a02cf85b 	.word	0xa02cf85b
   1ddfc:	6337ea83 	.word	0x6337ea83
   1de00:	2022f85b 	.word	0x2022f85b
   1de04:	e02ef85b 	.word	0xe02ef85b
   1de08:	1021f85b 	.word	0x1021f85b
   1de0c:	7c0cf858 	.word	0x7c0cf858
   1de10:	6c16ea4f 	.word	0x6c16ea4f
   1de14:	b2f6407a 	.word	0xb2f6407a
   1de18:	2e3eea82 	.word	0x2e3eea82
   1de1c:	2026f85b 	.word	0x2026f85b
   1de20:	6c08f858 	.word	0x6c08f858
   1de24:	4939ea83 	.word	0x4939ea83
   1de28:	40710e23 	.word	0x40710e23
   1de2c:	6023f85b 	.word	0x6023f85b
   1de30:	3c04f858 	.word	0x3c04f858
   1de34:	702cf85b 	.word	0x702cf85b
   1de38:	f3c54053 	.word	0xf3c54053
   1de3c:	ea832507 	.word	0xea832507
   1de40:	f85b2636 	.word	0xf85b2636
   1de44:	f3c05025 	.word	0xf3c05025
   1de48:	f3c02307 	.word	0xf3c02307
   1de4c:	ea814007 	.word	0xea814007
   1de50:	f85b2137 	.word	0xf85b2137
   1de54:	f85b7023 	.word	0xf85b7023
   1de58:	ea863020 	.word	0xea863020
   1de5c:	ea816635 	.word	0xea816635
   1de60:	f3c46737 	.word	0xf3c46737
   1de64:	9a034407 	.word	0x9a034407
   1de68:	4133ea86 	.word	0x4133ea86
   1de6c:	f85b9b01 	.word	0xf85b9b01
   1de70:	ea8e4024 	.word	0xea8e4024
   1de74:	3b016e32 	.word	0x3b016e32
   1de78:	403aea8e 	.word	0x403aea8e
   1de7c:	4734ea87 	.word	0x4734ea87
   1de80:	0820f108 	.word	0x0820f108
   1de84:	f47f9301 	.word	0xf47f9301
   1de88:	46caaf35 	.word	0x46caaf35
   1de8c:	9a049b06 	.word	0x9a049b06
   1de90:	6300f103 	.word	0x6300f103
   1de94:	eb023b01 	.word	0xeb023b01
   1de98:	93041343 	.word	0x93041343
   1de9c:	f38afa5f 	.word	0xf38afa5f
   1dea0:	5023f85b 	.word	0x5023f85b
   1dea4:	fa5f9b04 	.word	0xfa5f9b04
   1dea8:	681cf881 	.word	0x681cf881
   1deac:	f85b0e03 	.word	0xf85b0e03
   1deb0:	f85b2028 	.word	0xf85b2028
   1deb4:	f3c18023 	.word	0xf3c18023
   1deb8:	f85b2307 	.word	0xf85b2307
   1debc:	406c3023 	.word	0x406c3023
   1dec0:	4507f3c7 	.word	0x4507f3c7
   1dec4:	5025f85b 	.word	0x5025f85b
   1dec8:	2438ea84 	.word	0x2438ea84
   1decc:	f887fa5f 	.word	0xf887fa5f
   1ded0:	6028f85b 	.word	0x6028f85b
   1ded4:	6433ea84 	.word	0x6433ea84
   1ded8:	4535ea84 	.word	0x4535ea84
   1dedc:	462e9602 	.word	0x462e9602
   1dee0:	fa5f9c04 	.word	0xfa5f9c04
   1dee4:	f85bf980 	.word	0xf85bf980
   1dee8:	68639029 	.word	0x68639029
   1deec:	f85b0e3c 	.word	0xf85b0e3c
   1def0:	96014024 	.word	0x96014024
   1def4:	0303ea89 	.word	0x0303ea89
   1def8:	ea839e04 	.word	0xea839e04
   1defc:	f3c72434 	.word	0xf3c72434
   1df00:	0e0b2707 	.word	0x0e0b2707
   1df04:	f85b4d6e 	.word	0xf85b4d6e
   1df08:	f89d9027 	.word	0xf89d9027
   1df0c:	f85b8004 	.word	0xf85b8004
   1df10:	68f37023 	.word	0x68f37023
   1df14:	0e00f04f 	.word	0x0e00f04f
   1df18:	8008f815 	.word	0x8008f815
   1df1c:	69324053 	.word	0x69324053
   1df20:	4107f3c1 	.word	0x4107f3c1
   1df24:	0802ea88 	.word	0x0802ea88
   1df28:	97034642 	.word	0x97034642
   1df2c:	7021f85b 	.word	0x7021f85b
   1df30:	611aea4f 	.word	0x611aea4f
   1df34:	1021f85b 	.word	0x1021f85b
   1df38:	e018f8cd 	.word	0xe018f8cd
   1df3c:	2331ea83 	.word	0x2331ea83
   1df40:	6939ea83 	.word	0x6939ea83
   1df44:	2307f3ca 	.word	0x2307f3ca
   1df48:	3023f85b 	.word	0x3023f85b
   1df4c:	9e0268b1 	.word	0x9e0268b1
   1df50:	6333ea84 	.word	0x6333ea84
   1df54:	4737ea83 	.word	0x4737ea83
   1df58:	0801ea86 	.word	0x0801ea86
   1df5c:	2307f3c0 	.word	0x2307f3c0
   1df60:	f3ca9e03 	.word	0xf3ca9e03
   1df64:	f3c04a07 	.word	0xf3c04a07
   1df68:	f85b4007 	.word	0xf85b4007
   1df6c:	f85b102a 	.word	0xf85b102a
   1df70:	f8cd4023 	.word	0xf8cd4023
   1df74:	f85be01c 	.word	0xf85be01c
   1df78:	0e383020 	.word	0x0e383020
   1df7c:	ea885c28 	.word	0xea885c28
   1df80:	ea892836 	.word	0xea892836
   1df84:	ea884933 	.word	0xea884933
   1df88:	ea886834 	.word	0xea886834
   1df8c:	f3c94131 	.word	0xf3c94131
   1df90:	ea822407 	.word	0xea822407
   1df94:	9a016000 	.word	0x9a016000
   1df98:	8004f815 	.word	0x8004f815
   1df9c:	4307f3c1 	.word	0x4307f3c1
   1dfa0:	6a11ea4f 	.word	0x6a11ea4f
   1dfa4:	f8155cec 	.word	0xf8155cec
   1dfa8:	f3c2b00a 	.word	0xf3c2b00a
   1dfac:	9a042a07 	.word	0x9a042a07
   1dfb0:	ea80b2fb 	.word	0xea80b2fb
   1dfb4:	ea802008 	.word	0xea802008
   1dfb8:	5ceb4004 	.word	0x5ceb4004
   1dfbc:	f8156954 	.word	0xf8156954
   1dfc0:	f3c9a00a 	.word	0xf3c9a00a
   1dfc4:	40634807 	.word	0x40634807
   1dfc8:	6008f815 	.word	0x6008f815
   1dfcc:	6b0bea83 	.word	0x6b0bea83
   1dfd0:	2b0aea8b 	.word	0x2b0aea8b
   1dfd4:	4b06ea8b 	.word	0x4b06ea8b
   1dfd8:	260046f4 	.word	0x260046f4
   1dfdc:	f881fa5f 	.word	0xf881fa5f
   1dfe0:	f8156994 	.word	0xf8156994
   1dfe4:	ea4f8008 	.word	0xea4f8008
   1dfe8:	f8d26319 	.word	0xf8d26319
   1dfec:	5ceba01c 	.word	0x5ceba01c
   1dff0:	fa5f9a01 	.word	0xfa5f9a01
   1dff4:	f815f989 	.word	0xf815f989
   1dff8:	ea889009 	.word	0xea889009
   1dffc:	ea880804 	.word	0xea880804
   1e000:	0e136803 	.word	0x0e136803
   1e004:	090aea89 	.word	0x090aea89
   1e008:	a003f815 	.word	0xa003f815
   1e00c:	4307f3c2 	.word	0x4307f3c2
   1e010:	f3c75cec 	.word	0xf3c75cec
   1e014:	5ceb2307 	.word	0x5ceb2307
   1e018:	2107f3c1 	.word	0x2107f3c1
   1e01c:	ea885c69 	.word	0xea885c69
   1e020:	ea882803 	.word	0xea882803
   1e024:	ea894804 	.word	0xea894804
   1e028:	ea4f690a 	.word	0xea4f690a
   1e02c:	ea89241b 	.word	0xea89241b
   1e030:	f36b2901 	.word	0xf36b2901
   1e034:	ea4f0c07 	.word	0xea4f0c07
   1e038:	f3682118 	.word	0xf3682118
   1e03c:	22000607 	.word	0x22000607
   1e040:	260ff361 	.word	0x260ff361
   1e044:	2c0ff364 	.word	0x2c0ff364
   1e048:	441bea4f 	.word	0x441bea4f
   1e04c:	4c17f364 	.word	0x4c17f364
   1e050:	f3c74634 	.word	0xf3c74634
   1e054:	5ded4707 	.word	0x5ded4707
   1e058:	0e07f360 	.word	0x0e07f360
   1e05c:	4905ea89 	.word	0x4905ea89
   1e060:	2319ea4f 	.word	0x2319ea4f
   1e064:	f3690a05 	.word	0xf3690a05
   1e068:	ea4f0207 	.word	0xea4f0207
   1e06c:	f3634118 	.word	0xf3634118
   1e070:	f365220f 	.word	0xf365220f
   1e074:	0c052e0f 	.word	0x0c052e0f
   1e078:	4417f361 	.word	0x4417f361
   1e07c:	4e17f365 	.word	0x4e17f365
   1e080:	46110e00 	.word	0x46110e00
   1e084:	6e1ff360 	.word	0x6e1ff360
   1e088:	ea4f4620 	.word	0xea4f4620
   1e08c:	ea4f4319 	.word	0xea4f4319
   1e090:	f3636818 	.word	0xf3636818
   1e094:	9b054117 	.word	0x9b054117
   1e098:	601ff368 	.word	0x601ff368
   1e09c:	20006098 	.word	0x20006098
   1e0a0:	6b1bea4f 	.word	0x6b1bea4f
   1e0a4:	6919ea4f 	.word	0x6919ea4f
   1e0a8:	6c1ff36b 	.word	0x6c1ff36b
   1e0ac:	611ff369 	.word	0x611ff369
   1e0b0:	e000f8c3 	.word	0xe000f8c3
   1e0b4:	c004f8c3 	.word	0xc004f8c3
   1e0b8:	b00960d9 	.word	0xb00960d9
   1e0bc:	8ff0e8bd 	.word	0x8ff0e8bd
   1e0c0:	00026224 	.word	0x00026224
   1e0c4:	00026324 	.word	0x00026324

0001e0c8 <symbol_0005bab>:
   1e0c8:	4614b410 	.word	0x4614b410
   1e0cc:	461a2901 	.word	0x461a2901
   1e0d0:	d0034621 	.word	0xd0034621
   1e0d4:	4b04f85d 	.word	0x4b04f85d
   1e0d8:	bde6f7ff 	.word	0xbde6f7ff
   1e0dc:	4b04f85d 	.word	0x4b04f85d
   1e0e0:	bbcaf7ff 	.word	0xbbcaf7ff

0001e0e4 <ok_rsp_parser>:
   1e0e4:	47702000 	.word	0x47702000

0001e0e8 <pdn_state_get_parser>:
   1e0e8:	b5702200 	.word	0xb5702200
   1e0ec:	b084780b 	.word	0xb084780b
   1e0f0:	e9cd460e 	.word	0xe9cd460e
   1e0f4:	e9cd2200 	.word	0xe9cd2200
   1e0f8:	b3232202 	.word	0xb3232202
   1e0fc:	2b20460c 	.word	0x2b20460c
   1e100:	d01b460d 	.word	0xd01b460d
   1e104:	3201700b 	.word	0x3201700b
   1e108:	3f01f814 	.word	0x3f01f814
   1e10c:	460d18b1 	.word	0x460d18b1
   1e110:	d1f42b00 	.word	0xd1f42b00
   1e114:	4b0d2200 	.word	0x4b0d2200
   1e118:	f853702a 	.word	0xf853702a
   1e11c:	4a0c3020 	.word	0x4a0c3020
   1e120:	2110681b 	.word	0x2110681b
   1e124:	f7f04668 	.word	0xf7f04668
   1e128:	4669fecb 	.word	0x4669fecb
   1e12c:	f0054630 	.word	0xf0054630
   1e130:	3000fff4 	.word	0x3000fff4
   1e134:	2001bf18 	.word	0x2001bf18
   1e138:	bd70b004 	.word	0xbd70b004
   1e13c:	3f01f814 	.word	0x3f01f814
   1e140:	d1dc2b00 	.word	0xd1dc2b00
   1e144:	460de7e6 	.word	0x460de7e6
   1e148:	bf00e7e4 	.word	0xbf00e7e4
   1e14c:	200218bc 	.word	0x200218bc
   1e150:	000267c8 	.word	0x000267c8

0001e154 <pdn_id_get_parser>:
   1e154:	780bb570 	.word	0x780bb570
   1e158:	b3134606 	.word	0xb3134606
   1e15c:	24004608 	.word	0x24004608
   1e160:	2b20460a 	.word	0x2b20460a
   1e164:	d0174615 	.word	0xd0174615
   1e168:	34017013 	.word	0x34017013
   1e16c:	3f01f810 	.word	0x3f01f810
   1e170:	4615190a 	.word	0x4615190a
   1e174:	d1f42b00 	.word	0xd1f42b00
   1e178:	46082300 	.word	0x46082300
   1e17c:	213a702b 	.word	0x213a702b
   1e180:	ffe8f005 	.word	0xffe8f005
   1e184:	3001b130 	.word	0x3001b130
   1e188:	ff2ef005 	.word	0xff2ef005
   1e18c:	f8534b06 	.word	0xf8534b06
   1e190:	60583026 	.word	0x60583026
   1e194:	bd702000 	.word	0xbd702000
   1e198:	3f01f810 	.word	0x3f01f810
   1e19c:	d1e02b00 	.word	0xd1e02b00
   1e1a0:	460de7ea 	.word	0x460de7ea
   1e1a4:	bf00e7e8 	.word	0xbf00e7e8
   1e1a8:	200218bc 	.word	0x200218bc

0001e1ac <context_create_parser>:
   1e1ac:	780bb570 	.word	0x780bb570
   1e1b0:	b3134606 	.word	0xb3134606
   1e1b4:	24004608 	.word	0x24004608
   1e1b8:	2b20460a 	.word	0x2b20460a
   1e1bc:	d0174615 	.word	0xd0174615
   1e1c0:	34017013 	.word	0x34017013
   1e1c4:	3f01f810 	.word	0x3f01f810
   1e1c8:	4615190a 	.word	0x4615190a
   1e1cc:	d1f42b00 	.word	0xd1f42b00
   1e1d0:	46082300 	.word	0x46082300
   1e1d4:	213a702b 	.word	0x213a702b
   1e1d8:	ffbcf005 	.word	0xffbcf005
   1e1dc:	4b08b130 	.word	0x4b08b130
   1e1e0:	f8533001 	.word	0xf8533001
   1e1e4:	f0054026 	.word	0xf0054026
   1e1e8:	6020feff 	.word	0x6020feff
   1e1ec:	bd702000 	.word	0xbd702000
   1e1f0:	3f01f810 	.word	0x3f01f810
   1e1f4:	d1e02b00 	.word	0xd1e02b00
   1e1f8:	460de7ea 	.word	0x460de7ea
   1e1fc:	bf00e7e8 	.word	0xbf00e7e8
   1e200:	200218bc 	.word	0x200218bc

0001e204 <pdn_interface_init>:
   1e204:	33fff04f 	.word	0x33fff04f
   1e208:	4c09b510 	.word	0x4c09b510
   1e20c:	21002228 	.word	0x21002228
   1e210:	60234808 	.word	0x60234808
   1e214:	f80df006 	.word	0xf80df006
   1e218:	2201f240 	.word	0x2201f240
   1e21c:	20662100 	.word	0x20662100
   1e220:	f8cef7f3 	.word	0xf8cef7f3
   1e224:	60202800 	.word	0x60202800
   1e228:	2003bfb4 	.word	0x2003bfb4
   1e22c:	bd102000 	.word	0xbd102000
   1e230:	200217b8 	.word	0x200217b8
   1e234:	200218bc 	.word	0x200218bc

0001e238 <pdn_interface_open>:
   1e238:	43f0e92d 	.word	0x43f0e92d
   1e23c:	b0832866 	.word	0xb0832866
   1e240:	80bcf040 	.word	0x80bcf040
   1e244:	7f00f5b1 	.word	0x7f00f5b1
   1e248:	80aaf040 	.word	0x80aaf040
   1e24c:	2302f240 	.word	0x2302f240
   1e250:	f040429a 	.word	0xf040429a
   1e254:	4c6280a5 	.word	0x4c6280a5
   1e258:	b34d6825 	.word	0xb34d6825
   1e25c:	2b006863 	.word	0x2b006863
   1e260:	8098f000 	.word	0x8098f000
   1e264:	2b0068a3 	.word	0x2b0068a3
   1e268:	8096f000 	.word	0x8096f000
   1e26c:	2b0068e3 	.word	0x2b0068e3
   1e270:	8094f000 	.word	0x8094f000
   1e274:	2b006923 	.word	0x2b006923
   1e278:	8098f000 	.word	0x8098f000
   1e27c:	2b006963 	.word	0x2b006963
   1e280:	8098f000 	.word	0x8098f000
   1e284:	2b0069a3 	.word	0x2b0069a3
   1e288:	8096f000 	.word	0x8096f000
   1e28c:	2b0069e3 	.word	0x2b0069e3
   1e290:	808ef000 	.word	0x808ef000
   1e294:	b1536a23 	.word	0xb1536a23
   1e298:	25096a63 	.word	0x25096a63
   1e29c:	200cb143 	.word	0x200cb143
   1e2a0:	fe76f7f1 	.word	0xfe76f7f1
   1e2a4:	30fff04f 	.word	0x30fff04f
   1e2a8:	e8bdb003 	.word	0xe8bdb003
   1e2ac:	250883f0 	.word	0x250883f0
   1e2b0:	f7fe2074 	.word	0xf7fe2074
   1e2b4:	f844ff3f 	.word	0xf844ff3f
   1e2b8:	28000025 	.word	0x28000025
   1e2bc:	2274d0ef 	.word	0x2274d0ef
   1e2c0:	f0052100 	.word	0xf0052100
   1e2c4:	2101ffb6 	.word	0x2101ffb6
   1e2c8:	f04f2003 	.word	0xf04f2003
   1e2cc:	f85437ff 	.word	0xf85437ff
   1e2d0:	4a443025 	.word	0x4a443025
   1e2d4:	f8546099 	.word	0xf8546099
   1e2d8:	f44f3025 	.word	0xf44f3025
   1e2dc:	67187180 	.word	0x67187180
   1e2e0:	4841605f 	.word	0x4841605f
   1e2e4:	810cf8df 	.word	0x810cf8df
   1e2e8:	fdeaf7f0 	.word	0xfdeaf7f0
   1e2ec:	f8d8483e 	.word	0xf8d8483e
   1e2f0:	26009000 	.word	0x26009000
   1e2f4:	ff3cf005 	.word	0xff3cf005
   1e2f8:	46024633 	.word	0x46024633
   1e2fc:	4648493a 	.word	0x4648493a
   1e300:	96009601 	.word	0x96009601
   1e304:	f806f7f3 	.word	0xf806f7f3
   1e308:	48374681 	.word	0x48374681
   1e30c:	ff30f005 	.word	0xff30f005
   1e310:	d1594548 	.word	0xd1594548
   1e314:	e9cd4633 	.word	0xe9cd4633
   1e318:	f44f6600 	.word	0xf44f6600
   1e31c:	49327280 	.word	0x49327280
   1e320:	0000f8d8 	.word	0x0000f8d8
   1e324:	f8def7f3 	.word	0xf8def7f3
   1e328:	48304606 	.word	0x48304606
   1e32c:	ff20f005 	.word	0xff20f005
   1e330:	db154286 	.word	0xdb154286
   1e334:	492c4602 	.word	0x492c4602
   1e338:	f005482c 	.word	0xf005482c
   1e33c:	b978ff2e 	.word	0xb978ff2e
   1e340:	46284929 	.word	0x46284929
   1e344:	ff32f7ff 	.word	0xff32f7ff
   1e348:	2202b9b0 	.word	0x2202b9b0
   1e34c:	3025f854 	.word	0x3025f854
   1e350:	40f1f045 	.word	0x40f1f045
   1e354:	10d0f440 	.word	0x10d0f440
   1e358:	b003609a 	.word	0xb003609a
   1e35c:	83f0e8bd 	.word	0x83f0e8bd
   1e360:	f0054823 	.word	0xf0054823
   1e364:	4920ff05 	.word	0x4920ff05
   1e368:	48214602 	.word	0x48214602
   1e36c:	ff15f005 	.word	0xff15f005
   1e370:	2008b960 	.word	0x2008b960
   1e374:	fe0cf7f1 	.word	0xfe0cf7f1
   1e378:	0025f854 	.word	0x0025f854
   1e37c:	fef8f7fe 	.word	0xfef8f7fe
   1e380:	f04f2300 	.word	0xf04f2300
   1e384:	f84430ff 	.word	0xf84430ff
   1e388:	e78d3025 	.word	0xe78d3025
   1e38c:	f7f12005 	.word	0xf7f12005
   1e390:	e7f1fdff 	.word	0xe7f1fdff
   1e394:	e78b2501 	.word	0xe78b2501
   1e398:	e7892502 	.word	0xe7892502
   1e39c:	e7872503 	.word	0xe7872503
   1e3a0:	f7f12016 	.word	0xf7f12016
   1e3a4:	f04ffdf5 	.word	0xf04ffdf5
   1e3a8:	e77d30ff 	.word	0xe77d30ff
   1e3ac:	e77f2504 	.word	0xe77f2504
   1e3b0:	e77d2507 	.word	0xe77d2507
   1e3b4:	e77b2505 	.word	0xe77b2505
   1e3b8:	e7792506 	.word	0xe7792506
   1e3bc:	f7f1202f 	.word	0xf7f1202f
   1e3c0:	f04ffde7 	.word	0xf04ffde7
   1e3c4:	e76f30ff 	.word	0xe76f30ff
   1e3c8:	f7f12005 	.word	0xf7f12005
   1e3cc:	f854fde1 	.word	0xf854fde1
   1e3d0:	f7fe0025 	.word	0xf7fe0025
   1e3d4:	f844fecd 	.word	0xf844fecd
   1e3d8:	46386025 	.word	0x46386025
   1e3dc:	bf00e764 	.word	0xbf00e764
   1e3e0:	200218bc 	.word	0x200218bc
   1e3e4:	000267a4 	.word	0x000267a4
   1e3e8:	200217bc 	.word	0x200217bc
   1e3ec:	000267b4 	.word	0x000267b4
   1e3f0:	000267c0 	.word	0x000267c0
   1e3f4:	200217b8 	.word	0x200217b8

0001e3f8 <pdn_interface_connect>:
   1e3f8:	4ff0e92d 	.word	0x4ff0e92d
   1e3fc:	2900b083 	.word	0x2900b083
   1e400:	813ef000 	.word	0x813ef000
   1e404:	46912a64 	.word	0x46912a64
   1e408:	813af200 	.word	0x813af200
   1e40c:	46084605 	.word	0x46084605
   1e410:	f0054688 	.word	0xf0054688
   1e414:	2864fead 	.word	0x2864fead
   1e418:	8132f200 	.word	0x8132f200
   1e41c:	43ab4ba5 	.word	0x43ab4ba5
   1e420:	8125f040 	.word	0x8125f040
   1e424:	45f1f025 	.word	0x45f1f025
   1e428:	15d0f425 	.word	0x15d0f425
   1e42c:	f3002d09 	.word	0xf3002d09
   1e430:	4fa1811e 	.word	0x4fa1811e
   1e434:	3025f857 	.word	0x3025f857
   1e438:	f0002b00 	.word	0xf0002b00
   1e43c:	689a8118 	.word	0x689a8118
   1e440:	f0002a00 	.word	0xf0002a00
   1e444:	2d008114 	.word	0x2d008114
   1e448:	8111f2c0 	.word	0x8111f2c0
   1e44c:	2b02689b 	.word	0x2b02689b
   1e450:	810df040 	.word	0x810df040
   1e454:	4a9a4e99 	.word	0x4a9a4e99
   1e458:	7180f44f 	.word	0x7180f44f
   1e45c:	f7f04630 	.word	0xf7f04630
   1e460:	f857fd2f 	.word	0xf857fd2f
   1e464:	46043025 	.word	0x46043025
   1e468:	7180f5c0 	.word	0x7180f5c0
   1e46c:	4a95681b 	.word	0x4a95681b
   1e470:	f7f01830 	.word	0xf7f01830
   1e474:	f857fd25 	.word	0xf857fd25
   1e478:	44043025 	.word	0x44043025
   1e47c:	f0036f1b 	.word	0xf0036f1b
   1e480:	2a030203 	.word	0x2a030203
   1e484:	80eaf000 	.word	0x80eaf000
   1e488:	eb06079b 	.word	0xeb06079b
   1e48c:	f5c40004 	.word	0xf5c40004
   1e490:	bf4c7180 	.word	0xbf4c7180
   1e494:	4b8d4b8c 	.word	0x4b8d4b8c
   1e498:	f7f04a8d 	.word	0xf7f04a8d
   1e49c:	4404fd11 	.word	0x4404fd11
   1e4a0:	4a8c4643 	.word	0x4a8c4643
   1e4a4:	7180f5c4 	.word	0x7180f5c4
   1e4a8:	f7f01930 	.word	0xf7f01930
   1e4ac:	4420fd09 	.word	0x4420fd09
   1e4b0:	7f80f5b0 	.word	0x7f80f5b0
   1e4b4:	80f7f300 	.word	0x80f7f300
   1e4b8:	a238f8df 	.word	0xa238f8df
   1e4bc:	f8da487f 	.word	0xf8da487f
   1e4c0:	2400b000 	.word	0x2400b000
   1e4c4:	fe54f005 	.word	0xfe54f005
   1e4c8:	46024623 	.word	0x46024623
   1e4cc:	4658497b 	.word	0x4658497b
   1e4d0:	94009401 	.word	0x94009401
   1e4d4:	ff1ef7f2 	.word	0xff1ef7f2
   1e4d8:	48784683 	.word	0x48784683
   1e4dc:	fe48f005 	.word	0xfe48f005
   1e4e0:	d0084558 	.word	0xd0084558
   1e4e4:	f7f12005 	.word	0xf7f12005
   1e4e8:	f04ffd53 	.word	0xf04ffd53
   1e4ec:	462034ff 	.word	0x462034ff
   1e4f0:	e8bdb003 	.word	0xe8bdb003
   1e4f4:	46238ff0 	.word	0x46238ff0
   1e4f8:	4400e9cd 	.word	0x4400e9cd
   1e4fc:	7280f44f 	.word	0x7280f44f
   1e500:	f8da496e 	.word	0xf8da496e
   1e504:	f7f20000 	.word	0xf7f20000
   1e508:	4604ffed 	.word	0x4604ffed
   1e50c:	f0054872 	.word	0xf0054872
   1e510:	4284fe2f 	.word	0x4284fe2f
   1e514:	8091f2c0 	.word	0x8091f2c0
   1e518:	49684602 	.word	0x49684602
   1e51c:	f005486e 	.word	0xf005486e
   1e520:	2800fe3c 	.word	0x2800fe3c
   1e524:	8089f040 	.word	0x8089f040
   1e528:	46284964 	.word	0x46284964
   1e52c:	fddaf7ff 	.word	0xfddaf7ff
   1e530:	28004604 	.word	0x28004604
   1e534:	4a69d1db 	.word	0x4a69d1db
   1e538:	7180f44f 	.word	0x7180f44f
   1e53c:	f7f0485f 	.word	0xf7f0485f
   1e540:	f857fcbf 	.word	0xf857fcbf
   1e544:	f5c03025 	.word	0xf5c03025
   1e548:	681b7180 	.word	0x681b7180
   1e54c:	44304a64 	.word	0x44304a64
   1e550:	fcb6f7f0 	.word	0xfcb6f7f0
   1e554:	f8da4859 	.word	0xf8da4859
   1e558:	f005b000 	.word	0xf005b000
   1e55c:	4623fe09 	.word	0x4623fe09
   1e560:	49564602 	.word	0x49564602
   1e564:	94014658 	.word	0x94014658
   1e568:	f7f29400 	.word	0xf7f29400
   1e56c:	4683fed3 	.word	0x4683fed3
   1e570:	f0054852 	.word	0xf0054852
   1e574:	4558fdfd 	.word	0x4558fdfd
   1e578:	4623d1b4 	.word	0x4623d1b4
   1e57c:	7280f44f 	.word	0x7280f44f
   1e580:	f8da494e 	.word	0xf8da494e
   1e584:	e9cd0000 	.word	0xe9cd0000
   1e588:	f7f24400 	.word	0xf7f24400
   1e58c:	4683ffab 	.word	0x4683ffab
   1e590:	f0054851 	.word	0xf0054851
   1e594:	4583fded 	.word	0x4583fded
   1e598:	4602db4f 	.word	0x4602db4f
   1e59c:	484e4947 	.word	0x484e4947
   1e5a0:	fdfbf005 	.word	0xfdfbf005
   1e5a4:	d1482800 	.word	0xd1482800
   1e5a8:	f8572103 	.word	0xf8572103
   1e5ac:	464a3025 	.word	0x464a3025
   1e5b0:	f8576099 	.word	0xf8576099
   1e5b4:	46410025 	.word	0x46410025
   1e5b8:	f005300c 	.word	0xf005300c
   1e5bc:	4a49fe0d 	.word	0x4a49fe0d
   1e5c0:	7180f44f 	.word	0x7180f44f
   1e5c4:	f7f0483d 	.word	0xf7f0483d
   1e5c8:	4601fc7b 	.word	0x4601fc7b
   1e5cc:	3025f857 	.word	0x3025f857
   1e5d0:	7180f5c1 	.word	0x7180f5c1
   1e5d4:	4a42681b 	.word	0x4a42681b
   1e5d8:	f7f01830 	.word	0xf7f01830
   1e5dc:	4837fc71 	.word	0x4837fc71
   1e5e0:	6000f8da 	.word	0x6000f8da
   1e5e4:	fdc4f005 	.word	0xfdc4f005
   1e5e8:	46024623 	.word	0x46024623
   1e5ec:	46304933 	.word	0x46304933
   1e5f0:	94009401 	.word	0x94009401
   1e5f4:	fe8ef7f2 	.word	0xfe8ef7f2
   1e5f8:	48304606 	.word	0x48304606
   1e5fc:	fdb8f005 	.word	0xfdb8f005
   1e600:	d15342b0 	.word	0xd15342b0
   1e604:	f44f4623 	.word	0xf44f4623
   1e608:	492c7280 	.word	0x492c7280
   1e60c:	0000f8da 	.word	0x0000f8da
   1e610:	4400e9cd 	.word	0x4400e9cd
   1e614:	ff66f7f2 	.word	0xff66f7f2
   1e618:	48334606 	.word	0x48334606
   1e61c:	fda8f005 	.word	0xfda8f005
   1e620:	db334286 	.word	0xdb334286
   1e624:	49254602 	.word	0x49254602
   1e628:	f005482f 	.word	0xf005482f
   1e62c:	bb68fdb6 	.word	0xbb68fdb6
   1e630:	49224628 	.word	0x49224628
   1e634:	fd8ef7ff 	.word	0xfd8ef7ff
   1e638:	482ce759 	.word	0x482ce759
   1e63c:	fd98f005 	.word	0xfd98f005
   1e640:	4602491e 	.word	0x4602491e
   1e644:	f0054829 	.word	0xf0054829
   1e648:	2800fda8 	.word	0x2800fda8
   1e64c:	af4af47f 	.word	0xaf4af47f
   1e650:	f7f12008 	.word	0xf7f12008
   1e654:	f04ffc9d 	.word	0xf04ffc9d
   1e658:	e74834ff 	.word	0xe74834ff
   1e65c:	7180f5c4 	.word	0x7180f5c4
   1e660:	4b231930 	.word	0x4b231930
   1e664:	f7f04a1a 	.word	0xf7f04a1a
   1e668:	4404fc2b 	.word	0x4404fc2b
   1e66c:	f04fe718 	.word	0xf04fe718
   1e670:	200934ff 	.word	0x200934ff
   1e674:	fc8cf7f1 	.word	0xfc8cf7f1
   1e678:	b0034620 	.word	0xb0034620
   1e67c:	8ff0e8bd 	.word	0x8ff0e8bd
   1e680:	f7f12016 	.word	0xf7f12016
   1e684:	f04ffc85 	.word	0xf04ffc85
   1e688:	e73034ff 	.word	0xe73034ff
   1e68c:	f0054817 	.word	0xf0054817
   1e690:	490afd6f 	.word	0x490afd6f
   1e694:	48154602 	.word	0x48154602
   1e698:	fd7ff005 	.word	0xfd7ff005
   1e69c:	2008b930 	.word	0x2008b930
   1e6a0:	fc76f7f1 	.word	0xfc76f7f1
   1e6a4:	f04fe723 	.word	0xf04fe723
   1e6a8:	e72034ff 	.word	0xe72034ff
   1e6ac:	f7f12005 	.word	0xf7f12005
   1e6b0:	e71cfc6f 	.word	0xe71cfc6f
   1e6b4:	789a0000 	.word	0x789a0000
   1e6b8:	200218bc 	.word	0x200218bc
   1e6bc:	200217bc 	.word	0x200217bc
   1e6c0:	00026730 	.word	0x00026730
   1e6c4:	0002673c 	.word	0x0002673c
   1e6c8:	00026750 	.word	0x00026750
   1e6cc:	00026758 	.word	0x00026758
   1e6d0:	00026748 	.word	0x00026748
   1e6d4:	00026788 	.word	0x00026788
   1e6d8:	00025750 	.word	0x00025750
   1e6dc:	0002675c 	.word	0x0002675c
   1e6e0:	00026768 	.word	0x00026768
   1e6e4:	0002676c 	.word	0x0002676c
   1e6e8:	0002677c 	.word	0x0002677c
   1e6ec:	000267c0 	.word	0x000267c0
   1e6f0:	00026740 	.word	0x00026740
   1e6f4:	200217b8 	.word	0x200217b8

0001e6f8 <pdn_interface_close>:
   1e6f8:	43f0e92d 	.word	0x43f0e92d
   1e6fc:	b0834b63 	.word	0xb0834b63
   1e700:	f0404383 	.word	0xf0404383
   1e704:	f020809d 	.word	0xf020809d
   1e708:	f42444f1 	.word	0xf42444f1
   1e70c:	2c0914d0 	.word	0x2c0914d0
   1e710:	8096f300 	.word	0x8096f300
   1e714:	f8554d5e 	.word	0xf8554d5e
   1e718:	28000024 	.word	0x28000024
   1e71c:	8090f000 	.word	0x8090f000
   1e720:	2b006883 	.word	0x2b006883
   1e724:	808cf000 	.word	0x808cf000
   1e728:	2b036883 	.word	0x2b036883
   1e72c:	f7fed008 	.word	0xf7fed008
   1e730:	2300fd1f 	.word	0x2300fd1f
   1e734:	f8454618 	.word	0xf8454618
   1e738:	b0033024 	.word	0xb0033024
   1e73c:	83f0e8bd 	.word	0x83f0e8bd
   1e740:	4a554e54 	.word	0x4a554e54
   1e744:	7180f44f 	.word	0x7180f44f
   1e748:	f7f04630 	.word	0xf7f04630
   1e74c:	f855fbb9 	.word	0xf855fbb9
   1e750:	f5c03024 	.word	0xf5c03024
   1e754:	681b7180 	.word	0x681b7180
   1e758:	44304a50 	.word	0x44304a50
   1e75c:	814cf8df 	.word	0x814cf8df
   1e760:	fbaef7f0 	.word	0xfbaef7f0
   1e764:	f8d84630 	.word	0xf8d84630
   1e768:	27009000 	.word	0x27009000
   1e76c:	fd00f005 	.word	0xfd00f005
   1e770:	46024631 	.word	0x46024631
   1e774:	4648463b 	.word	0x4648463b
   1e778:	97009701 	.word	0x97009701
   1e77c:	fdcaf7f2 	.word	0xfdcaf7f2
   1e780:	46304681 	.word	0x46304681
   1e784:	fcf4f005 	.word	0xfcf4f005
   1e788:	d1764548 	.word	0xd1764548
   1e78c:	e9cd463b 	.word	0xe9cd463b
   1e790:	f44f7700 	.word	0xf44f7700
   1e794:	46317280 	.word	0x46317280
   1e798:	0000f8d8 	.word	0x0000f8d8
   1e79c:	fea2f7f2 	.word	0xfea2f7f2
   1e7a0:	483f4607 	.word	0x483f4607
   1e7a4:	fce4f005 	.word	0xfce4f005
   1e7a8:	da4f4287 	.word	0xda4f4287
   1e7ac:	f005483d 	.word	0xf005483d
   1e7b0:	4938fcdf 	.word	0x4938fcdf
   1e7b4:	483b4602 	.word	0x483b4602
   1e7b8:	fceff005 	.word	0xfceff005
   1e7bc:	d15c2800 	.word	0xd15c2800
   1e7c0:	f7f12008 	.word	0xf7f12008
   1e7c4:	4a38fbe5 	.word	0x4a38fbe5
   1e7c8:	7180f44f 	.word	0x7180f44f
   1e7cc:	f7f04831 	.word	0xf7f04831
   1e7d0:	4601fb77 	.word	0x4601fb77
   1e7d4:	3024f855 	.word	0x3024f855
   1e7d8:	7180f5c1 	.word	0x7180f5c1
   1e7dc:	4a2f681b 	.word	0x4a2f681b
   1e7e0:	f7f01830 	.word	0xf7f01830
   1e7e4:	482bfb6d 	.word	0x482bfb6d
   1e7e8:	7000f8d8 	.word	0x7000f8d8
   1e7ec:	f0052600 	.word	0xf0052600
   1e7f0:	4633fcbf 	.word	0x4633fcbf
   1e7f4:	49274602 	.word	0x49274602
   1e7f8:	96014638 	.word	0x96014638
   1e7fc:	f7f29600 	.word	0xf7f29600
   1e800:	4607fd89 	.word	0x4607fd89
   1e804:	f0054823 	.word	0xf0054823
   1e808:	42b8fcb3 	.word	0x42b8fcb3
   1e80c:	4633d139 	.word	0x4633d139
   1e810:	6600e9cd 	.word	0x6600e9cd
   1e814:	7280f44f 	.word	0x7280f44f
   1e818:	f8d8491e 	.word	0xf8d8491e
   1e81c:	f7f20000 	.word	0xf7f20000
   1e820:	4606fe61 	.word	0x4606fe61
   1e824:	f005481e 	.word	0xf005481e
   1e828:	4286fca3 	.word	0x4286fca3
   1e82c:	4602db16 	.word	0x4602db16
   1e830:	481b4918 	.word	0x481b4918
   1e834:	fcb1f005 	.word	0xfcb1f005
   1e838:	f855b980 	.word	0xf855b980
   1e83c:	e7760024 	.word	0xe7760024
   1e840:	f7f12009 	.word	0xf7f12009
   1e844:	f04ffba5 	.word	0xf04ffba5
   1e848:	e77630ff 	.word	0xe77630ff
   1e84c:	46314602 	.word	0x46314602
   1e850:	f0054813 	.word	0xf0054813
   1e854:	2800fca2 	.word	0x2800fca2
   1e858:	e7a7d0b5 	.word	0xe7a7d0b5
   1e85c:	f0054811 	.word	0xf0054811
   1e860:	490cfc87 	.word	0x490cfc87
   1e864:	480f4602 	.word	0x480f4602
   1e868:	fc97f005 	.word	0xfc97f005
   1e86c:	2008b948 	.word	0x2008b948
   1e870:	fb8ef7f1 	.word	0xfb8ef7f1
   1e874:	0024f855 	.word	0x0024f855
   1e878:	2005e759 	.word	0x2005e759
   1e87c:	fb88f7f1 	.word	0xfb88f7f1
   1e880:	2005e7a1 	.word	0x2005e7a1
   1e884:	fb84f7f1 	.word	0xfb84f7f1
   1e888:	bf00e7d7 	.word	0xbf00e7d7
   1e88c:	789a0000 	.word	0x789a0000
   1e890:	200218bc 	.word	0x200218bc
   1e894:	200217bc 	.word	0x200217bc
   1e898:	00026724 	.word	0x00026724
   1e89c:	00026768 	.word	0x00026768
   1e8a0:	00025750 	.word	0x00025750
   1e8a4:	000267c0 	.word	0x000267c0
   1e8a8:	00026730 	.word	0x00026730
   1e8ac:	200217b8 	.word	0x200217b8

0001e8b0 <pdn_interface_setopt>:
   1e8b0:	f240b510 	.word	0xf240b510
   1e8b4:	42a12402 	.word	0x42a12402
   1e8b8:	b153d10b 	.word	0xb153d10b
   1e8bc:	b1419902 	.word	0xb1419902
   1e8c0:	43814925 	.word	0x43814925
   1e8c4:	2009d00b 	.word	0x2009d00b
   1e8c8:	fb62f7f1 	.word	0xfb62f7f1
   1e8cc:	30fff04f 	.word	0x30fff04f
   1e8d0:	2016bd10 	.word	0x2016bd10
   1e8d4:	fb5cf7f1 	.word	0xfb5cf7f1
   1e8d8:	30fff04f 	.word	0x30fff04f
   1e8dc:	f020bd10 	.word	0xf020bd10
   1e8e0:	f42040f1 	.word	0xf42040f1
   1e8e4:	280910d0 	.word	0x280910d0
   1e8e8:	491cdced 	.word	0x491cdced
   1e8ec:	1020f851 	.word	0x1020f851
   1e8f0:	d0e82900 	.word	0xd0e82900
   1e8f4:	2c00688c 	.word	0x2c00688c
   1e8f8:	2800d0e5 	.word	0x2800d0e5
   1e8fc:	2a01dbe3 	.word	0x2a01dbe3
   1e900:	202dd001 	.word	0x202dd001
   1e904:	688ae7e6 	.word	0x688ae7e6
   1e908:	688ab1fa 	.word	0x688ab1fa
   1e90c:	d01c2a03 	.word	0xd01c2a03
   1e910:	2a04688a 	.word	0x2a04688a
   1e914:	9a02d019 	.word	0x9a02d019
   1e918:	1e420890 	.word	0x1e420890
   1e91c:	d8d82a01 	.word	0xd8d82a01
   1e920:	07929a02 	.word	0x07929a02
   1e924:	681ad1d5 	.word	0x681ad1d5
   1e928:	d0102a02 	.word	0xd0102a02
   1e92c:	d1d02a0a 	.word	0xd1d02a0a
   1e930:	28022202 	.word	0x28022202
   1e934:	685bd106 	.word	0x685bd106
   1e938:	d00a2b02 	.word	0xd00a2b02
   1e93c:	d1c82b0a 	.word	0xd1c82b0a
   1e940:	0202f042 	.word	0x0202f042
   1e944:	2000670a 	.word	0x2000670a
   1e948:	200ee7c4 	.word	0x200ee7c4
   1e94c:	2201e7c2 	.word	0x2201e7c2
   1e950:	f042e7ef 	.word	0xf042e7ef
   1e954:	e7f50201 	.word	0xe7f50201
   1e958:	789a0000 	.word	0x789a0000
   1e95c:	200218bc 	.word	0x200218bc

0001e960 <pdn_interface_getopt>:
   1e960:	43f0e92d 	.word	0x43f0e92d
   1e964:	2402f240 	.word	0x2402f240
   1e968:	42a1b083 	.word	0x42a1b083
   1e96c:	f0409d0a 	.word	0xf0409d0a
   1e970:	461e80a9 	.word	0x461e80a9
   1e974:	f0002b00 	.word	0xf0002b00
   1e978:	2d0080a5 	.word	0x2d0080a5
   1e97c:	80a2f000 	.word	0x80a2f000
   1e980:	43834b56 	.word	0x43834b56
   1e984:	8084f040 	.word	0x8084f040
   1e988:	44f1f020 	.word	0x44f1f020
   1e98c:	14d0f424 	.word	0x14d0f424
   1e990:	dc7d2c09 	.word	0xdc7d2c09
   1e994:	f8534b52 	.word	0xf8534b52
   1e998:	2b003024 	.word	0x2b003024
   1e99c:	6899d078 	.word	0x6899d078
   1e9a0:	d0752900 	.word	0xd0752900
   1e9a4:	db732c00 	.word	0xdb732c00
   1e9a8:	d00e2a02 	.word	0xd00e2a02
   1e9ac:	d0082a03 	.word	0xd0082a03
   1e9b0:	d0152a01 	.word	0xd0152a01
   1e9b4:	f7f1202d 	.word	0xf7f1202d
   1e9b8:	2000faeb 	.word	0x2000faeb
   1e9bc:	e8bdb003 	.word	0xe8bdb003
   1e9c0:	682b83f0 	.word	0x682b83f0
   1e9c4:	2016bb23 	.word	0x2016bb23
   1e9c8:	682ae7f5 	.word	0x682ae7f5
   1e9cc:	d0fa2a00 	.word	0xd0fa2a00
   1e9d0:	20002201 	.word	0x20002201
   1e9d4:	7033681b 	.word	0x7033681b
   1e9d8:	b003602a 	.word	0xb003602a
   1e9dc:	83f0e8bd 	.word	0x83f0e8bd
   1e9e0:	2a00689a 	.word	0x2a00689a
   1e9e4:	689ad052 	.word	0x689ad052
   1e9e8:	d04f2a04 	.word	0xd04f2a04
   1e9ec:	2a07682a 	.word	0x2a07682a
   1e9f0:	f012d9e9 	.word	0xf012d9e9
   1e9f4:	d1e60203 	.word	0xd1e60203
   1e9f8:	07996f1b 	.word	0x07996f1b
   1e9fc:	2104d45d 	.word	0x2104d45d
   1ea00:	d50207db 	.word	0xd50207db
   1ea04:	50b32302 	.word	0x50b32302
   1ea08:	602a460a 	.word	0x602a460a
   1ea0c:	e7d52000 	.word	0xe7d52000
   1ea10:	f44f4a34 	.word	0xf44f4a34
   1ea14:	48347180 	.word	0x48347180
   1ea18:	80d8f8df 	.word	0x80d8f8df
   1ea1c:	fa50f7f0 	.word	0xfa50f7f0
   1ea20:	f8d84831 	.word	0xf8d84831
   1ea24:	27009000 	.word	0x27009000
   1ea28:	fba2f005 	.word	0xfba2f005
   1ea2c:	4602463b 	.word	0x4602463b
   1ea30:	4648492d 	.word	0x4648492d
   1ea34:	97009701 	.word	0x97009701
   1ea38:	fc6cf7f2 	.word	0xfc6cf7f2
   1ea3c:	482a4681 	.word	0x482a4681
   1ea40:	fb96f005 	.word	0xfb96f005
   1ea44:	d1434548 	.word	0xd1434548
   1ea48:	e9cd463b 	.word	0xe9cd463b
   1ea4c:	f44f7700 	.word	0xf44f7700
   1ea50:	49257280 	.word	0x49257280
   1ea54:	0000f8d8 	.word	0x0000f8d8
   1ea58:	fd44f7f2 	.word	0xfd44f7f2
   1ea5c:	48234607 	.word	0x48234607
   1ea60:	fb86f005 	.word	0xfb86f005
   1ea64:	db194287 	.word	0xdb194287
   1ea68:	491f4602 	.word	0x491f4602
   1ea6c:	f005481f 	.word	0xf005481f
   1ea70:	4607fb94 	.word	0x4607fb94
   1ea74:	4620b990 	.word	0x4620b990
   1ea78:	f7ff491b 	.word	0xf7ff491b
   1ea7c:	2800fb35 	.word	0x2800fb35
   1ea80:	2301db99 	.word	0x2301db99
   1ea84:	46387030 	.word	0x46387030
   1ea88:	e797602b 	.word	0xe797602b
   1ea8c:	e792200e 	.word	0xe792200e
   1ea90:	f7f12009 	.word	0xf7f12009
   1ea94:	f04ffa7d 	.word	0xf04ffa7d
   1ea98:	e78f30ff 	.word	0xe78f30ff
   1ea9c:	f0054814 	.word	0xf0054814
   1eaa0:	4911fb67 	.word	0x4911fb67
   1eaa4:	48124602 	.word	0x48124602
   1eaa8:	fb77f005 	.word	0xfb77f005
   1eaac:	2008b980 	.word	0x2008b980
   1eab0:	fa6ef7f1 	.word	0xfa6ef7f1
   1eab4:	30fff04f 	.word	0x30fff04f
   1eab8:	220ae77d 	.word	0x220ae77d
   1eabc:	60322108 	.word	0x60322108
   1eac0:	e79d2204 	.word	0xe79d2204
   1eac4:	f7f12016 	.word	0xf7f12016
   1eac8:	f04ffa63 	.word	0xf04ffa63
   1eacc:	e77530ff 	.word	0xe77530ff
   1ead0:	f7f12005 	.word	0xf7f12005
   1ead4:	f04ffa5d 	.word	0xf04ffa5d
   1ead8:	e76c30ff 	.word	0xe76c30ff
   1eadc:	789a0000 	.word	0x789a0000
   1eae0:	200218bc 	.word	0x200218bc
   1eae4:	00026790 	.word	0x00026790
   1eae8:	200217bc 	.word	0x200217bc
   1eaec:	0002679c 	.word	0x0002679c
   1eaf0:	000267c0 	.word	0x000267c0
   1eaf4:	200217b8 	.word	0x200217b8

0001eaf8 <pdn_interface_pdn_id_get>:
   1eaf8:	f0002900 	.word	0xf0002900
   1eafc:	e92d83b9 	.word	0xe92d83b9
   1eb00:	4ca343f0 	.word	0x4ca343f0
   1eb04:	b0832802 	.word	0xb0832802
   1eb08:	6823460d 	.word	0x6823460d
   1eb0c:	8094f000 	.word	0x8094f000
   1eb10:	d03f280a 	.word	0xd03f280a
   1eb14:	689bb11b 	.word	0x689bb11b
   1eb18:	f0002b03 	.word	0xf0002b03
   1eb1c:	68638127 	.word	0x68638127
   1eb20:	689bb11b 	.word	0x689bb11b
   1eb24:	f0002b03 	.word	0xf0002b03
   1eb28:	68a38110 	.word	0x68a38110
   1eb2c:	689bb11b 	.word	0x689bb11b
   1eb30:	f0002b03 	.word	0xf0002b03
   1eb34:	68e380f9 	.word	0x68e380f9
   1eb38:	689bb11b 	.word	0x689bb11b
   1eb3c:	f0002b03 	.word	0xf0002b03
   1eb40:	692380e2 	.word	0x692380e2
   1eb44:	689bb11b 	.word	0x689bb11b
   1eb48:	f0002b03 	.word	0xf0002b03
   1eb4c:	69638123 	.word	0x69638123
   1eb50:	689bb11b 	.word	0x689bb11b
   1eb54:	f0002b03 	.word	0xf0002b03
   1eb58:	69a38161 	.word	0x69a38161
   1eb5c:	689bb11b 	.word	0x689bb11b
   1eb60:	f0002b03 	.word	0xf0002b03
   1eb64:	69e3814a 	.word	0x69e3814a
   1eb68:	689bb11b 	.word	0x689bb11b
   1eb6c:	f0002b03 	.word	0xf0002b03
   1eb70:	6a238133 	.word	0x6a238133
   1eb74:	689bb11b 	.word	0x689bb11b
   1eb78:	f0002b03 	.word	0xf0002b03
   1eb7c:	6a63811c 	.word	0x6a63811c
   1eb80:	689bb11b 	.word	0x689bb11b
   1eb84:	f0002b03 	.word	0xf0002b03
   1eb88:	f04f80ad 	.word	0xf04f80ad
   1eb8c:	b00330ff 	.word	0xb00330ff
   1eb90:	83f0e8bd 	.word	0x83f0e8bd
   1eb94:	689bb11b 	.word	0x689bb11b
   1eb98:	f0002b03 	.word	0xf0002b03
   1eb9c:	68638335 	.word	0x68638335
   1eba0:	689bb11b 	.word	0x689bb11b
   1eba4:	f0002b03 	.word	0xf0002b03
   1eba8:	68a382fd 	.word	0x68a382fd
   1ebac:	689bb11b 	.word	0x689bb11b
   1ebb0:	f0002b03 	.word	0xf0002b03
   1ebb4:	68e382d5 	.word	0x68e382d5
   1ebb8:	689eb11b 	.word	0x689eb11b
   1ebbc:	f0002e03 	.word	0xf0002e03
   1ebc0:	692381f0 	.word	0x692381f0
   1ebc4:	689bb11b 	.word	0x689bb11b
   1ebc8:	f0002b03 	.word	0xf0002b03
   1ebcc:	69638203 	.word	0x69638203
   1ebd0:	689bb11b 	.word	0x689bb11b
   1ebd4:	f0002b03 	.word	0xf0002b03
   1ebd8:	69a38215 	.word	0x69a38215
   1ebdc:	689bb11b 	.word	0x689bb11b
   1ebe0:	f0002b03 	.word	0xf0002b03
   1ebe4:	69e38227 	.word	0x69e38227
   1ebe8:	689bb11b 	.word	0x689bb11b
   1ebec:	f0002b03 	.word	0xf0002b03
   1ebf0:	6a238239 	.word	0x6a238239
   1ebf4:	689bb11b 	.word	0x689bb11b
   1ebf8:	f0002b03 	.word	0xf0002b03
   1ebfc:	6a63824d 	.word	0x6a63824d
   1ec00:	d0c22b00 	.word	0xd0c22b00
   1ec04:	2b03689b 	.word	0x2b03689b
   1ec08:	4628d1bf 	.word	0x4628d1bf
   1ec0c:	fab0f005 	.word	0xfab0f005
   1ec10:	6a604606 	.word	0x6a604606
   1ec14:	f005300c 	.word	0xf005300c
   1ec18:	42b0faab 	.word	0x42b0faab
   1ec1c:	6a61d1b5 	.word	0x6a61d1b5
   1ec20:	310c4628 	.word	0x310c4628
   1ec24:	faacf005 	.word	0xfaacf005
   1ec28:	d1ae2800 	.word	0xd1ae2800
   1ec2c:	6f1a6a63 	.word	0x6f1a6a63
   1ec30:	d5aa0792 	.word	0xd5aa0792
   1ec34:	e11a2609 	.word	0xe11a2609
   1ec38:	689bb11b 	.word	0x689bb11b
   1ec3c:	f0002b03 	.word	0xf0002b03
   1ec40:	686382fd 	.word	0x686382fd
   1ec44:	689bb11b 	.word	0x689bb11b
   1ec48:	f0002b03 	.word	0xf0002b03
   1ec4c:	68a382c5 	.word	0x68a382c5
   1ec50:	689bb11b 	.word	0x689bb11b
   1ec54:	f0002b03 	.word	0xf0002b03
   1ec58:	68e38269 	.word	0x68e38269
   1ec5c:	689eb11b 	.word	0x689eb11b
   1ec60:	f0002e03 	.word	0xf0002e03
   1ec64:	692380ec 	.word	0x692380ec
   1ec68:	689bb11b 	.word	0x689bb11b
   1ec6c:	f0002b03 	.word	0xf0002b03
   1ec70:	6963814a 	.word	0x6963814a
   1ec74:	689bb11b 	.word	0x689bb11b
   1ec78:	f0002b03 	.word	0xf0002b03
   1ec7c:	69a3815e 	.word	0x69a3815e
   1ec80:	689bb11b 	.word	0x689bb11b
   1ec84:	f0002b03 	.word	0xf0002b03
   1ec88:	69e38172 	.word	0x69e38172
   1ec8c:	689bb11b 	.word	0x689bb11b
   1ec90:	f0002b03 	.word	0xf0002b03
   1ec94:	6a23821b 	.word	0x6a23821b
   1ec98:	689bb11b 	.word	0x689bb11b
   1ec9c:	f0002b03 	.word	0xf0002b03
   1eca0:	6a63822d 	.word	0x6a63822d
   1eca4:	f43f2b00 	.word	0xf43f2b00
   1eca8:	689baf70 	.word	0x689baf70
   1ecac:	f47f2b03 	.word	0xf47f2b03
   1ecb0:	4628af6c 	.word	0x4628af6c
   1ecb4:	fa5cf005 	.word	0xfa5cf005
   1ecb8:	6a604606 	.word	0x6a604606
   1ecbc:	f005300c 	.word	0xf005300c
   1ecc0:	4286fa57 	.word	0x4286fa57
   1ecc4:	af61f47f 	.word	0xaf61f47f
   1ecc8:	46286a61 	.word	0x46286a61
   1eccc:	f005310c 	.word	0xf005310c
   1ecd0:	2800fa57 	.word	0x2800fa57
   1ecd4:	af59f47f 	.word	0xaf59f47f
   1ecd8:	6f1a6a63 	.word	0x6f1a6a63
   1ecdc:	f57f07d2 	.word	0xf57f07d2
   1ece0:	e7a7af54 	.word	0xe7a7af54
   1ece4:	f0054628 	.word	0xf0054628
   1ece8:	4606fa43 	.word	0x4606fa43
   1ecec:	300c6a60 	.word	0x300c6a60
   1ecf0:	fa3ef005 	.word	0xfa3ef005
   1ecf4:	f47f42b0 	.word	0xf47f42b0
   1ecf8:	6a61af48 	.word	0x6a61af48
   1ecfc:	310c4628 	.word	0x310c4628
   1ed00:	fa3ef005 	.word	0xfa3ef005
   1ed04:	4628e741 	.word	0x4628e741
   1ed08:	fa32f005 	.word	0xfa32f005
   1ed0c:	68e04606 	.word	0x68e04606
   1ed10:	f005300c 	.word	0xf005300c
   1ed14:	4286fa2d 	.word	0x4286fa2d
   1ed18:	af13f47f 	.word	0xaf13f47f
   1ed1c:	462868e1 	.word	0x462868e1
   1ed20:	f005310c 	.word	0xf005310c
   1ed24:	e70cfa2d 	.word	0xe70cfa2d
   1ed28:	f0054628 	.word	0xf0054628
   1ed2c:	4606fa21 	.word	0x4606fa21
   1ed30:	300c68a0 	.word	0x300c68a0
   1ed34:	fa1cf005 	.word	0xfa1cf005
   1ed38:	f47f4286 	.word	0xf47f4286
   1ed3c:	68a1aefc 	.word	0x68a1aefc
   1ed40:	310c4628 	.word	0x310c4628
   1ed44:	fa1cf005 	.word	0xfa1cf005
   1ed48:	4628e6f5 	.word	0x4628e6f5
   1ed4c:	fa10f005 	.word	0xfa10f005
   1ed50:	68604606 	.word	0x68604606
   1ed54:	f005300c 	.word	0xf005300c
   1ed58:	4286fa0b 	.word	0x4286fa0b
   1ed5c:	aee5f47f 	.word	0xaee5f47f
   1ed60:	46286861 	.word	0x46286861
   1ed64:	f005310c 	.word	0xf005310c
   1ed68:	e6defa0b 	.word	0xe6defa0b
   1ed6c:	f0054608 	.word	0xf0054608
   1ed70:	4606f9ff 	.word	0x4606f9ff
   1ed74:	300c6820 	.word	0x300c6820
   1ed78:	f9faf005 	.word	0xf9faf005
   1ed7c:	f47f4286 	.word	0xf47f4286
   1ed80:	6821aece 	.word	0x6821aece
   1ed84:	310c4628 	.word	0x310c4628
   1ed88:	f9faf005 	.word	0xf9faf005
   1ed8c:	bf00e6c7 	.word	0xbf00e6c7
   1ed90:	200218bc 	.word	0x200218bc
   1ed94:	f0054628 	.word	0xf0054628
   1ed98:	4606f9eb 	.word	0x4606f9eb
   1ed9c:	300c6920 	.word	0x300c6920
   1eda0:	f9e6f005 	.word	0xf9e6f005
   1eda4:	f47f4286 	.word	0xf47f4286
   1eda8:	6921aed2 	.word	0x6921aed2
   1edac:	310c4628 	.word	0x310c4628
   1edb0:	f9e6f005 	.word	0xf9e6f005
   1edb4:	4628e6cb 	.word	0x4628e6cb
   1edb8:	f9daf005 	.word	0xf9daf005
   1edbc:	6a204606 	.word	0x6a204606
   1edc0:	f005300c 	.word	0xf005300c
   1edc4:	4286f9d5 	.word	0x4286f9d5
   1edc8:	aed9f47f 	.word	0xaed9f47f
   1edcc:	46286a21 	.word	0x46286a21
   1edd0:	f005310c 	.word	0xf005310c
   1edd4:	e6d2f9d5 	.word	0xe6d2f9d5
   1edd8:	f0054628 	.word	0xf0054628
   1eddc:	4606f9c9 	.word	0x4606f9c9
   1ede0:	300c69e0 	.word	0x300c69e0
   1ede4:	f9c4f005 	.word	0xf9c4f005
   1ede8:	f47f4286 	.word	0xf47f4286
   1edec:	69e1aec2 	.word	0x69e1aec2
   1edf0:	310c4628 	.word	0x310c4628
   1edf4:	f9c4f005 	.word	0xf9c4f005
   1edf8:	4628e6bb 	.word	0x4628e6bb
   1edfc:	f9b8f005 	.word	0xf9b8f005
   1ee00:	69a04606 	.word	0x69a04606
   1ee04:	f005300c 	.word	0xf005300c
   1ee08:	4286f9b3 	.word	0x4286f9b3
   1ee0c:	aeabf47f 	.word	0xaeabf47f
   1ee10:	462869a1 	.word	0x462869a1
   1ee14:	f005310c 	.word	0xf005310c
   1ee18:	e6a4f9b3 	.word	0xe6a4f9b3
   1ee1c:	f0054628 	.word	0xf0054628
   1ee20:	4606f9a7 	.word	0x4606f9a7
   1ee24:	300c6960 	.word	0x300c6960
   1ee28:	f9a2f005 	.word	0xf9a2f005
   1ee2c:	f47f4286 	.word	0xf47f4286
   1ee30:	6961ae94 	.word	0x6961ae94
   1ee34:	310c4628 	.word	0x310c4628
   1ee38:	f9a2f005 	.word	0xf9a2f005
   1ee3c:	4628e68d 	.word	0x4628e68d
   1ee40:	f996f005 	.word	0xf996f005
   1ee44:	68e04607 	.word	0x68e04607
   1ee48:	f005300c 	.word	0xf005300c
   1ee4c:	4287f991 	.word	0x4287f991
   1ee50:	af09f47f 	.word	0xaf09f47f
   1ee54:	462868e1 	.word	0x462868e1
   1ee58:	f005310c 	.word	0xf005310c
   1ee5c:	2800f991 	.word	0x2800f991
   1ee60:	af01f47f 	.word	0xaf01f47f
   1ee64:	6f1a68e3 	.word	0x6f1a68e3
   1ee68:	f57f07d1 	.word	0xf57f07d1
   1ee6c:	6858aefc 	.word	0x6858aefc
   1ee70:	f47f1c43 	.word	0xf47f1c43
   1ee74:	4dc6ae8c 	.word	0x4dc6ae8c
   1ee78:	f44f4ac6 	.word	0xf44f4ac6
   1ee7c:	46287180 	.word	0x46287180
   1ee80:	f81ef7f0 	.word	0xf81ef7f0
   1ee84:	3026f854 	.word	0x3026f854
   1ee88:	7180f5c0 	.word	0x7180f5c0
   1ee8c:	4ac2681b 	.word	0x4ac2681b
   1ee90:	f8df4428 	.word	0xf8df4428
   1ee94:	f7f0830c 	.word	0xf7f0830c
   1ee98:	4628f813 	.word	0x4628f813
   1ee9c:	9000f8d8 	.word	0x9000f8d8
   1eea0:	f0052700 	.word	0xf0052700
   1eea4:	4629f965 	.word	0x4629f965
   1eea8:	463b4602 	.word	0x463b4602
   1eeac:	97014648 	.word	0x97014648
   1eeb0:	f7f29700 	.word	0xf7f29700
   1eeb4:	4681fa2f 	.word	0x4681fa2f
   1eeb8:	f0054628 	.word	0xf0054628
   1eebc:	4548f959 	.word	0x4548f959
   1eec0:	81e9f040 	.word	0x81e9f040
   1eec4:	f44f463b 	.word	0xf44f463b
   1eec8:	e9cd7280 	.word	0xe9cd7280
   1eecc:	46297700 	.word	0x46297700
   1eed0:	0000f8d8 	.word	0x0000f8d8
   1eed4:	fb06f7f2 	.word	0xfb06f7f2
   1eed8:	48b04607 	.word	0x48b04607
   1eedc:	f948f005 	.word	0xf948f005
   1eee0:	46024287 	.word	0x46024287
   1eee4:	81c7f2c0 	.word	0x81c7f2c0
   1eee8:	48ac4629 	.word	0x48ac4629
   1eeec:	f955f005 	.word	0xf955f005
   1eef0:	f0402800 	.word	0xf0402800
   1eef4:	462981c0 	.word	0x462981c0
   1eef8:	f7ff4630 	.word	0xf7ff4630
   1eefc:	f854f92b 	.word	0xf854f92b
   1ef00:	68583026 	.word	0x68583026
   1ef04:	4628e643 	.word	0x4628e643
   1ef08:	f932f005 	.word	0xf932f005
   1ef0c:	69204606 	.word	0x69204606
   1ef10:	f005300c 	.word	0xf005300c
   1ef14:	4286f92d 	.word	0x4286f92d
   1ef18:	aeabf47f 	.word	0xaeabf47f
   1ef1c:	46286921 	.word	0x46286921
   1ef20:	f005310c 	.word	0xf005310c
   1ef24:	2800f92d 	.word	0x2800f92d
   1ef28:	aea3f47f 	.word	0xaea3f47f
   1ef2c:	6f1a6923 	.word	0x6f1a6923
   1ef30:	f57f07d2 	.word	0xf57f07d2
   1ef34:	2604ae9e 	.word	0x2604ae9e
   1ef38:	4628e799 	.word	0x4628e799
   1ef3c:	f918f005 	.word	0xf918f005
   1ef40:	69604606 	.word	0x69604606
   1ef44:	f005300c 	.word	0xf005300c
   1ef48:	4286f913 	.word	0x4286f913
   1ef4c:	ae97f47f 	.word	0xae97f47f
   1ef50:	46286961 	.word	0x46286961
   1ef54:	f005310c 	.word	0xf005310c
   1ef58:	2800f913 	.word	0x2800f913
   1ef5c:	ae8ff47f 	.word	0xae8ff47f
   1ef60:	6f1a6963 	.word	0x6f1a6963
   1ef64:	f57f07d7 	.word	0xf57f07d7
   1ef68:	2605ae8a 	.word	0x2605ae8a
   1ef6c:	4628e77f 	.word	0x4628e77f
   1ef70:	f8fef005 	.word	0xf8fef005
   1ef74:	69a04606 	.word	0x69a04606
   1ef78:	f005300c 	.word	0xf005300c
   1ef7c:	4286f8f9 	.word	0x4286f8f9
   1ef80:	ae83f47f 	.word	0xae83f47f
   1ef84:	462869a1 	.word	0x462869a1
   1ef88:	f005310c 	.word	0xf005310c
   1ef8c:	2800f8f9 	.word	0x2800f8f9
   1ef90:	ae7bf47f 	.word	0xae7bf47f
   1ef94:	6f1a69a3 	.word	0x6f1a69a3
   1ef98:	f57f07d6 	.word	0xf57f07d6
   1ef9c:	2606ae76 	.word	0x2606ae76
   1efa0:	4628e765 	.word	0x4628e765
   1efa4:	f8e4f005 	.word	0xf8e4f005
   1efa8:	68e04607 	.word	0x68e04607
   1efac:	f005300c 	.word	0xf005300c
   1efb0:	4287f8df 	.word	0x4287f8df
   1efb4:	ae05f47f 	.word	0xae05f47f
   1efb8:	462868e1 	.word	0x462868e1
   1efbc:	f005310c 	.word	0xf005310c
   1efc0:	2800f8df 	.word	0x2800f8df
   1efc4:	adfdf47f 	.word	0xadfdf47f
   1efc8:	6f1a68e3 	.word	0x6f1a68e3
   1efcc:	f53f0791 	.word	0xf53f0791
   1efd0:	e5f6af4e 	.word	0xe5f6af4e
   1efd4:	f0054628 	.word	0xf0054628
   1efd8:	4606f8cb 	.word	0x4606f8cb
   1efdc:	300c6920 	.word	0x300c6920
   1efe0:	f8c6f005 	.word	0xf8c6f005
   1efe4:	f47f4286 	.word	0xf47f4286
   1efe8:	6921adf2 	.word	0x6921adf2
   1efec:	310c4628 	.word	0x310c4628
   1eff0:	f8c6f005 	.word	0xf8c6f005
   1eff4:	f47f2800 	.word	0xf47f2800
   1eff8:	6923adea 	.word	0x6923adea
   1effc:	07926f1a 	.word	0x07926f1a
   1f000:	e5e4d499 	.word	0xe5e4d499
   1f004:	f0054628 	.word	0xf0054628
   1f008:	4606f8b3 	.word	0x4606f8b3
   1f00c:	300c6960 	.word	0x300c6960
   1f010:	f8aef005 	.word	0xf8aef005
   1f014:	f47f4286 	.word	0xf47f4286
   1f018:	6961ade0 	.word	0x6961ade0
   1f01c:	310c4628 	.word	0x310c4628
   1f020:	f8aef005 	.word	0xf8aef005
   1f024:	f47f2800 	.word	0xf47f2800
   1f028:	6963add8 	.word	0x6963add8
   1f02c:	07976f1a 	.word	0x07976f1a
   1f030:	e5d2d49b 	.word	0xe5d2d49b
   1f034:	f0054628 	.word	0xf0054628
   1f038:	4606f89b 	.word	0x4606f89b
   1f03c:	300c69a0 	.word	0x300c69a0
   1f040:	f896f005 	.word	0xf896f005
   1f044:	f47f4286 	.word	0xf47f4286
   1f048:	69a1adce 	.word	0x69a1adce
   1f04c:	310c4628 	.word	0x310c4628
   1f050:	f896f005 	.word	0xf896f005
   1f054:	f47f2800 	.word	0xf47f2800
   1f058:	69a3adc6 	.word	0x69a3adc6
   1f05c:	07966f1a 	.word	0x07966f1a
   1f060:	e5c0d49d 	.word	0xe5c0d49d
   1f064:	f0054628 	.word	0xf0054628
   1f068:	4606f883 	.word	0x4606f883
   1f06c:	300c69e0 	.word	0x300c69e0
   1f070:	f87ef005 	.word	0xf87ef005
   1f074:	f47f4286 	.word	0xf47f4286
   1f078:	69e1adbc 	.word	0x69e1adbc
   1f07c:	310c4628 	.word	0x310c4628
   1f080:	f87ef005 	.word	0xf87ef005
   1f084:	f47f2800 	.word	0xf47f2800
   1f088:	69e3adb4 	.word	0x69e3adb4
   1f08c:	07906f1a 	.word	0x07906f1a
   1f090:	adaff57f 	.word	0xadaff57f
   1f094:	e6ea2607 	.word	0xe6ea2607
   1f098:	f0054628 	.word	0xf0054628
   1f09c:	4606f869 	.word	0x4606f869
   1f0a0:	300c6a20 	.word	0x300c6a20
   1f0a4:	f864f005 	.word	0xf864f005
   1f0a8:	f47f4286 	.word	0xf47f4286
   1f0ac:	6a21ada8 	.word	0x6a21ada8
   1f0b0:	310c4628 	.word	0x310c4628
   1f0b4:	f864f005 	.word	0xf864f005
   1f0b8:	f47f2800 	.word	0xf47f2800
   1f0bc:	6a23ada0 	.word	0x6a23ada0
   1f0c0:	07916f1a 	.word	0x07916f1a
   1f0c4:	ad9bf57f 	.word	0xad9bf57f
   1f0c8:	e6d02608 	.word	0xe6d02608
   1f0cc:	f0054628 	.word	0xf0054628
   1f0d0:	4606f84f 	.word	0x4606f84f
   1f0d4:	300c69e0 	.word	0x300c69e0
   1f0d8:	f84af005 	.word	0xf84af005
   1f0dc:	f47f4286 	.word	0xf47f4286
   1f0e0:	69e1adda 	.word	0x69e1adda
   1f0e4:	310c4628 	.word	0x310c4628
   1f0e8:	f84af005 	.word	0xf84af005
   1f0ec:	f47f2800 	.word	0xf47f2800
   1f0f0:	69e3add2 	.word	0x69e3add2
   1f0f4:	07d06f1a 	.word	0x07d06f1a
   1f0f8:	e5ccd4cc 	.word	0xe5ccd4cc
   1f0fc:	f0054628 	.word	0xf0054628
   1f100:	4606f837 	.word	0x4606f837
   1f104:	300c6a20 	.word	0x300c6a20
   1f108:	f832f005 	.word	0xf832f005
   1f10c:	f47f4286 	.word	0xf47f4286
   1f110:	6a21adc8 	.word	0x6a21adc8
   1f114:	310c4628 	.word	0x310c4628
   1f118:	f832f005 	.word	0xf832f005
   1f11c:	f47f2800 	.word	0xf47f2800
   1f120:	6a23adc0 	.word	0x6a23adc0
   1f124:	07d16f1a 	.word	0x07d16f1a
   1f128:	e5bad4ce 	.word	0xe5bad4ce
   1f12c:	f0054628 	.word	0xf0054628
   1f130:	4606f81f 	.word	0x4606f81f
   1f134:	300c68a0 	.word	0x300c68a0
   1f138:	f81af005 	.word	0xf81af005
   1f13c:	f47f4286 	.word	0xf47f4286
   1f140:	68a1ad8c 	.word	0x68a1ad8c
   1f144:	310c4628 	.word	0x310c4628
   1f148:	f81af005 	.word	0xf81af005
   1f14c:	f47f2800 	.word	0xf47f2800
   1f150:	68a3ad84 	.word	0x68a3ad84
   1f154:	07d06f1a 	.word	0x07d06f1a
   1f158:	ad7ff57f 	.word	0xad7ff57f
   1f15c:	e6862602 	.word	0xe6862602
   1f160:	f0054628 	.word	0xf0054628
   1f164:	4606f805 	.word	0x4606f805
   1f168:	300c68a0 	.word	0x300c68a0
   1f16c:	f800f005 	.word	0xf800f005
   1f170:	f47f4286 	.word	0xf47f4286
   1f174:	68a1ad20 	.word	0x68a1ad20
   1f178:	310c4628 	.word	0x310c4628
   1f17c:	f800f005 	.word	0xf800f005
   1f180:	f47f2800 	.word	0xf47f2800
   1f184:	68a3ad18 	.word	0x68a3ad18
   1f188:	07906f1a 	.word	0x07906f1a
   1f18c:	e512d4e6 	.word	0xe512d4e6
   1f190:	200217bc 	.word	0x200217bc
   1f194:	0002676c 	.word	0x0002676c
   1f198:	00026768 	.word	0x00026768
   1f19c:	0002677c 	.word	0x0002677c
   1f1a0:	200217b8 	.word	0x200217b8
   1f1a4:	f0044628 	.word	0xf0044628
   1f1a8:	4606ffe3 	.word	0x4606ffe3
   1f1ac:	300c6860 	.word	0x300c6860
   1f1b0:	ffdef004 	.word	0xffdef004
   1f1b4:	f47f4286 	.word	0xf47f4286
   1f1b8:	6861acf8 	.word	0x6861acf8
   1f1bc:	310c4628 	.word	0x310c4628
   1f1c0:	ffdef004 	.word	0xffdef004
   1f1c4:	f47f2800 	.word	0xf47f2800
   1f1c8:	6863acf0 	.word	0x6863acf0
   1f1cc:	07966f1a 	.word	0x07966f1a
   1f1d0:	acebf57f 	.word	0xacebf57f
   1f1d4:	e64a2601 	.word	0xe64a2601
   1f1d8:	f0044628 	.word	0xf0044628
   1f1dc:	4606ffc9 	.word	0x4606ffc9
   1f1e0:	300c6860 	.word	0x300c6860
   1f1e4:	ffc4f004 	.word	0xffc4f004
   1f1e8:	f47f4286 	.word	0xf47f4286
   1f1ec:	6861ad30 	.word	0x6861ad30
   1f1f0:	310c4628 	.word	0x310c4628
   1f1f4:	ffc4f004 	.word	0xffc4f004
   1f1f8:	f47f2800 	.word	0xf47f2800
   1f1fc:	6863ad28 	.word	0x6863ad28
   1f200:	07d66f1a 	.word	0x07d66f1a
   1f204:	e522d4e6 	.word	0xe522d4e6
   1f208:	f0044608 	.word	0xf0044608
   1f20c:	4606ffb1 	.word	0x4606ffb1
   1f210:	300c6820 	.word	0x300c6820
   1f214:	ffacf004 	.word	0xffacf004
   1f218:	f47f4286 	.word	0xf47f4286
   1f21c:	6821acc0 	.word	0x6821acc0
   1f220:	310c4628 	.word	0x310c4628
   1f224:	ffacf004 	.word	0xffacf004
   1f228:	28004606 	.word	0x28004606
   1f22c:	acb7f47f 	.word	0xacb7f47f
   1f230:	6f1a6823 	.word	0x6f1a6823
   1f234:	f53f0797 	.word	0xf53f0797
   1f238:	e4b0ae1a 	.word	0xe4b0ae1a
   1f23c:	f0044608 	.word	0xf0044608
   1f240:	4606ff97 	.word	0x4606ff97
   1f244:	300c6820 	.word	0x300c6820
   1f248:	ff92f004 	.word	0xff92f004
   1f24c:	f47f4286 	.word	0xf47f4286
   1f250:	6821acf8 	.word	0x6821acf8
   1f254:	310c4628 	.word	0x310c4628
   1f258:	ff92f004 	.word	0xff92f004
   1f25c:	28004606 	.word	0x28004606
   1f260:	aceff47f 	.word	0xaceff47f
   1f264:	6f1a6823 	.word	0x6f1a6823
   1f268:	f53f07d7 	.word	0xf53f07d7
   1f26c:	e4e8ae00 	.word	0xe4e8ae00
   1f270:	30fff04f 	.word	0x30fff04f
   1f274:	480b4770 	.word	0x480b4770
   1f278:	ff7af004 	.word	0xff7af004
   1f27c:	4602490a 	.word	0x4602490a
   1f280:	f0044808 	.word	0xf0044808
   1f284:	b930ff8a 	.word	0xb930ff8a
   1f288:	f7f02008 	.word	0xf7f02008
   1f28c:	f854fe81 	.word	0xf854fe81
   1f290:	68583026 	.word	0x68583026
   1f294:	2005e47b 	.word	0x2005e47b
   1f298:	fe7af7f0 	.word	0xfe7af7f0
   1f29c:	3026f854 	.word	0x3026f854
   1f2a0:	e4746858 	.word	0xe4746858
   1f2a4:	000267c0 	.word	0x000267c0
   1f2a8:	200217bc 	.word	0x200217bc

0001f2ac <bsd_platform_getaddrinfo>:
   1f2ac:	be04f7f7 	.word	0xbe04f7f7

0001f2b0 <bsd_platform_freeaddrinfo>:
   1f2b0:	bef8f7f7 	.word	0xbef8f7f7

0001f2b4 <bsd_platform_poll>:
   1f2b4:	43f0e92d 	.word	0x43f0e92d
   1f2b8:	72e2ea42 	.word	0x72e2ea42
   1f2bc:	9200b083 	.word	0x9200b083
   1f2c0:	d0482800 	.word	0xd0482800
   1f2c4:	2b071e4b 	.word	0x2b071e4b
   1f2c8:	4680d845 	.word	0x4680d845
   1f2cc:	24004605 	.word	0x24004605
   1f2d0:	07c1eb00 	.word	0x07c1eb00
   1f2d4:	682888ab 	.word	0x682888ab
   1f2d8:	0303f003 	.word	0x0303f003
   1f2dc:	f043a901 	.word	0xf043a901
   1f2e0:	f7f6061c 	.word	0xf7f6061c
   1f2e4:	9b01fd1f 	.word	0x9b01fd1f
   1f2e8:	40333508 	.word	0x40333508
   1f2ec:	3c02f825 	.word	0x3c02f825
   1f2f0:	3401b103 	.word	0x3401b103
   1f2f4:	d1ed42af 	.word	0xd1ed42af
   1f2f8:	4669bb9c 	.word	0x4669bb9c
   1f2fc:	f7f04640 	.word	0xf7f04640
   1f300:	4607fdb7 	.word	0x4607fdb7
   1f304:	283cb108 	.word	0x283cb108
   1f308:	46c1d11d 	.word	0x46c1d11d
   1f30c:	f8b92600 	.word	0xf8b92600
   1f310:	f8d93004 	.word	0xf8d93004
   1f314:	f0030000 	.word	0xf0030000
   1f318:	a9010303 	.word	0xa9010303
   1f31c:	041cf043 	.word	0x041cf043
   1f320:	fd00f7f6 	.word	0xfd00f7f6
   1f324:	f1099b01 	.word	0xf1099b01
   1f328:	40230908 	.word	0x40230908
   1f32c:	3c02f829 	.word	0x3c02f829
   1f330:	3601b103 	.word	0x3601b103
   1f334:	d1ea454d 	.word	0xd1ea454d
   1f338:	2f00b90e 	.word	0x2f00b90e
   1f33c:	4630d0dd 	.word	0x4630d0dd
   1f340:	e8bdb003 	.word	0xe8bdb003
   1f344:	202383f0 	.word	0x202383f0
   1f348:	fe22f7f0 	.word	0xfe22f7f0
   1f34c:	30fff04f 	.word	0x30fff04f
   1f350:	e8bdb003 	.word	0xe8bdb003
   1f354:	201683f0 	.word	0x201683f0
   1f358:	fe1af7f0 	.word	0xfe1af7f0
   1f35c:	30fff04f 	.word	0x30fff04f
   1f360:	4620e7ee 	.word	0x4620e7ee
   1f364:	bf00e7ec 	.word	0xbf00e7ec

0001f368 <bsd_platform_fcntl>:
   1f368:	4b06b508 	.word	0x4b06b508
   1f36c:	d0034383 	.word	0xd0034383
   1f370:	4008e8bd 	.word	0x4008e8bd
   1f374:	bd54f7f6 	.word	0xbd54f7f6
   1f378:	f7f0202d 	.word	0xf7f0202d
   1f37c:	f04ffe09 	.word	0xf04ffe09
   1f380:	bd0830ff 	.word	0xbd0830ff
   1f384:	49765432 	.word	0x49765432

0001f388 <stream_handler_init>:
   1f388:	4604b510 	.word	0x4604b510
   1f38c:	f7fd200c 	.word	0xf7fd200c
   1f390:	60e0fed1 	.word	0x60e0fed1
   1f394:	2300b128 	.word	0x2300b128
   1f398:	e8bd6123 	.word	0xe8bd6123
   1f39c:	f7f84010 	.word	0xf7f84010
   1f3a0:	2004ba1b 	.word	0x2004ba1b
   1f3a4:	bf00bd10 	.word	0xbf00bd10

0001f3a8 <stream_handler_put>:
   1f3a8:	4606b570 	.word	0x4606b570
   1f3ac:	460d2014 	.word	0x460d2014
   1f3b0:	fec0f7fd 	.word	0xfec0f7fd
   1f3b4:	682bb178 	.word	0x682bb178
   1f3b8:	60434604 	.word	0x60434604
   1f3bc:	4601686b 	.word	0x4601686b
   1f3c0:	68eb6083 	.word	0x68eb6083
   1f3c4:	68ab60c3 	.word	0x68ab60c3
   1f3c8:	68f06103 	.word	0x68f06103
   1f3cc:	fa0ef7f8 	.word	0xfa0ef7f8
   1f3d0:	6868b920 	.word	0x6868b920
   1f3d4:	f04fbd70 	.word	0xf04fbd70
   1f3d8:	bd7030ff 	.word	0xbd7030ff
   1f3dc:	f7fd4620 	.word	0xf7fd4620
   1f3e0:	f04ffec7 	.word	0xf04ffec7
   1f3e4:	bd7030ff 	.word	0xbd7030ff

0001f3e8 <stream_handler_get>:
   1f3e8:	4ff0e92d 	.word	0x4ff0e92d
   1f3ec:	b0874682 	.word	0xb0874682
   1f3f0:	468968c0 	.word	0x468968c0
   1f3f4:	f7f84693 	.word	0xf7f84693
   1f3f8:	2800fa19 	.word	0x2800fa19
   1f3fc:	4605d072 	.word	0x4605d072
   1f400:	0008f8d9 	.word	0x0008f8d9
   1f404:	692bb120 	.word	0x692bb120
   1f408:	68eab113 	.word	0x68eab113
   1f40c:	d15c2a00 	.word	0xd15c2a00
   1f410:	f8c92300 	.word	0xf8c92300
   1f414:	f8d9300c 	.word	0xf8d9300c
   1f418:	f8d92000 	.word	0xf8d92000
   1f41c:	f8da8004 	.word	0xf8da8004
   1f420:	92011010 	.word	0x92011010
   1f424:	0f00f1b8 	.word	0x0f00f1b8
   1f428:	f00bd05a 	.word	0xf00bd05a
   1f42c:	24000308 	.word	0x24000308
   1f430:	e0109300 	.word	0xe0109300
   1f434:	3010f8da 	.word	0x3010f8da
   1f438:	f8ca443b 	.word	0xf8ca443b
   1f43c:	46283010 	.word	0x46283010
   1f440:	f9fcf7f8 	.word	0xf9fcf7f8
   1f444:	4605443c 	.word	0x4605443c
   1f448:	d0382800 	.word	0xd0382800
   1f44c:	d93645a0 	.word	0xd93645a0
   1f450:	f8d92100 	.word	0xf8d92100
   1f454:	68ae2000 	.word	0x68ae2000
   1f458:	0b04eba8 	.word	0x0b04eba8
   1f45c:	455e1a76 	.word	0x455e1a76
   1f460:	bf284637 	.word	0xbf284637
   1f464:	b132465f 	.word	0xb132465f
   1f468:	9b016868 	.word	0x9b016868
   1f46c:	463a4401 	.word	0x463a4401
   1f470:	f0041918 	.word	0xf0041918
   1f474:	9b00feb1 	.word	0x9b00feb1
   1f478:	d1e02b00 	.word	0xd1e02b00
   1f47c:	d8d9455e 	.word	0xd8d9455e
   1f480:	000cf8da 	.word	0x000cf8da
   1f484:	f9c8f7f8 	.word	0xf9c8f7f8
   1f488:	b1704606 	.word	0xb1704606
   1f48c:	2301e9d0 	.word	0x2301e9d0
   1f490:	0103e9d0 	.word	0x0103e9d0
   1f494:	2302e9cd 	.word	0x2302e9cd
   1f498:	1004e9cd 	.word	0x1004e9cd
   1f49c:	3101e9da 	.word	0x3101e9da
   1f4a0:	4798a802 	.word	0x4798a802
   1f4a4:	f7fd4630 	.word	0xf7fd4630
   1f4a8:	2300fe63 	.word	0x2300fe63
   1f4ac:	f8ca4628 	.word	0xf8ca4628
   1f4b0:	f7f83010 	.word	0xf7f83010
   1f4b4:	443cf9c3 	.word	0x443cf9c3
   1f4b8:	28004605 	.word	0x28004605
   1f4bc:	4620d1c6 	.word	0x4620d1c6
   1f4c0:	4004f8c9 	.word	0x4004f8c9
   1f4c4:	e8bdb007 	.word	0xe8bdb007
   1f4c8:	f8d98ff0 	.word	0xf8d98ff0
   1f4cc:	429a300c 	.word	0x429a300c
   1f4d0:	461abf28 	.word	0x461abf28
   1f4d4:	200cf8c9 	.word	0x200cf8c9
   1f4d8:	f0046929 	.word	0xf0046929
   1f4dc:	e79afe7d 	.word	0xe79afe7d
   1f4e0:	e7ec4644 	.word	0xe7ec4644
   1f4e4:	30fff04f 	.word	0x30fff04f
   1f4e8:	bf00e7ec 	.word	0xbf00e7ec

0001f4ec <stream_handler_available>:
   1f4ec:	4604b510 	.word	0x4604b510
   1f4f0:	f7f868c0 	.word	0xf7f868c0
   1f4f4:	b150f99b 	.word	0xb150f99b
   1f4f8:	42646924 	.word	0x42646924
   1f4fc:	441c6883 	.word	0x441c6883
   1f500:	f99cf7f8 	.word	0xf99cf7f8
   1f504:	d1f92800 	.word	0xd1f92800
   1f508:	70e4ea24 	.word	0x70e4ea24
   1f50c:	f04fbd10 	.word	0xf04fbd10
   1f510:	bd1030ff 	.word	0xbd1030ff

0001f514 <stream_handler_flush>:
   1f514:	4605b530 	.word	0x4605b530
   1f518:	b08568c0 	.word	0xb08568c0
   1f51c:	e01ab9a8 	.word	0xe01ab9a8
   1f520:	f7f868e8 	.word	0xf7f868e8
   1f524:	4604f979 	.word	0x4604f979
   1f528:	e9d0b170 	.word	0xe9d0b170
   1f52c:	e9d40101 	.word	0xe9d40101
   1f530:	e9cd3203 	.word	0xe9cd3203
   1f534:	e9cd0100 	.word	0xe9cd0100
   1f538:	e9d52302 	.word	0xe9d52302
   1f53c:	46683101 	.word	0x46683101
   1f540:	46204798 	.word	0x46204798
   1f544:	fe14f7fd 	.word	0xfe14f7fd
   1f548:	f7f868e8 	.word	0xf7f868e8
   1f54c:	2800f975 	.word	0x2800f975
   1f550:	b005d1e6 	.word	0xb005d1e6
   1f554:	2008bd30 	.word	0x2008bd30
   1f558:	bd30b005 	.word	0xbd30b005

0001f55c <stream_handler_free>:
   1f55c:	4605b530 	.word	0x4605b530
   1f560:	b08568c0 	.word	0xb08568c0
   1f564:	e01cb9a0 	.word	0xe01cb9a0
   1f568:	f956f7f8 	.word	0xf956f7f8
   1f56c:	b1704604 	.word	0xb1704604
   1f570:	0101e9d0 	.word	0x0101e9d0
   1f574:	3203e9d4 	.word	0x3203e9d4
   1f578:	0100e9cd 	.word	0x0100e9cd
   1f57c:	2302e9cd 	.word	0x2302e9cd
   1f580:	3101e9d5 	.word	0x3101e9d5
   1f584:	47984668 	.word	0x47984668
   1f588:	f7fd4620 	.word	0xf7fd4620
   1f58c:	68e8fdf1 	.word	0x68e8fdf1
   1f590:	f952f7f8 	.word	0xf952f7f8
   1f594:	68e84604 	.word	0x68e84604
   1f598:	d1e52c00 	.word	0xd1e52c00
   1f59c:	fde8f7fd 	.word	0xfde8f7fd
   1f5a0:	b00560ec 	.word	0xb00560ec
   1f5a4:	bf00bd30 	.word	0xbf00bd30

0001f5a8 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1f5a8:	4a07      	ldr	r2, [pc, #28]	; (1f5c8 <SystemInit+0x20>)
   1f5aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1f5ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1f5b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1f5b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f5ba:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1f5be:	4b03      	ldr	r3, [pc, #12]	; (1f5cc <SystemInit+0x24>)
   1f5c0:	4a03      	ldr	r2, [pc, #12]	; (1f5d0 <SystemInit+0x28>)
   1f5c2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1f5c4:	4770      	bx	lr
   1f5c6:	bf00      	nop
   1f5c8:	e000ed00 	.word	0xe000ed00
   1f5cc:	2002a30c 	.word	0x2002a30c
   1f5d0:	03d09000 	.word	0x03d09000

0001f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1f5d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f5d6:	4c07      	ldr	r4, [pc, #28]	; (1f5f4 <nrf_gpio_pin_port_decode.isra.0.part.1+0x20>)
   1f5d8:	4907      	ldr	r1, [pc, #28]	; (1f5f8 <nrf_gpio_pin_port_decode.isra.0.part.1+0x24>)
   1f5da:	4622      	mov	r2, r4
   1f5dc:	4807      	ldr	r0, [pc, #28]	; (1f5fc <nrf_gpio_pin_port_decode.isra.0.part.1+0x28>)
   1f5de:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1f5e2:	f004 fc49 	bl	23e78 <printk>
   1f5e6:	4620      	mov	r0, r4
}
   1f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f5ec:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1f5f0:	f004 bc4f 	b.w	23e92 <assert_post_action>
   1f5f4:	0002715d 	.word	0x0002715d
   1f5f8:	00027191 	.word	0x00027191
   1f5fc:	0002694b 	.word	0x0002694b

0001f600 <nrf_gpio_pin_clear>:
   1f600:	281f      	cmp	r0, #31
{
   1f602:	b510      	push	{r4, lr}
   1f604:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f606:	d901      	bls.n	1f60c <nrf_gpio_pin_clear+0xc>
   1f608:	f7ff ffe4 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f60c:	2301      	movs	r3, #1
   1f60e:	fa03 f404 	lsl.w	r4, r3, r4
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1f612:	4b01      	ldr	r3, [pc, #4]	; (1f618 <nrf_gpio_pin_clear+0x18>)
   1f614:	60dc      	str	r4, [r3, #12]
}
   1f616:	bd10      	pop	{r4, pc}
   1f618:	40842500 	.word	0x40842500

0001f61c <nrf_gpio_pin_set>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f61c:	281f      	cmp	r0, #31
{
   1f61e:	b510      	push	{r4, lr}
   1f620:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f622:	d901      	bls.n	1f628 <nrf_gpio_pin_set+0xc>
   1f624:	f7ff ffd6 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f628:	2301      	movs	r3, #1
   1f62a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTSET = set_mask;
   1f62e:	4b01      	ldr	r3, [pc, #4]	; (1f634 <nrf_gpio_pin_set+0x18>)
   1f630:	609c      	str	r4, [r3, #8]
}
   1f632:	bd10      	pop	{r4, pc}
   1f634:	40842500 	.word	0x40842500

0001f638 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t  const * const p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void                     * p_context)
{
   1f638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f63c:	4681      	mov	r9, r0
   1f63e:	4692      	mov	sl, r2
   1f640:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   1f642:	460c      	mov	r4, r1
   1f644:	b949      	cbnz	r1, 1f65a <nrfx_spim_init+0x22>
   1f646:	495d      	ldr	r1, [pc, #372]	; (1f7bc <nrfx_spim_init+0x184>)
   1f648:	485d      	ldr	r0, [pc, #372]	; (1f7c0 <nrfx_spim_init+0x188>)
   1f64a:	23a4      	movs	r3, #164	; 0xa4
   1f64c:	4a5d      	ldr	r2, [pc, #372]	; (1f7c4 <nrfx_spim_init+0x18c>)
   1f64e:	f004 fc13 	bl	23e78 <printk>
   1f652:	21a4      	movs	r1, #164	; 0xa4
   1f654:	485b      	ldr	r0, [pc, #364]	; (1f7c4 <nrfx_spim_init+0x18c>)
   1f656:	f004 fc1c 	bl	23e92 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f65a:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f65c:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f660:	4e59      	ldr	r6, [pc, #356]	; (1f7c8 <nrfx_spim_init+0x190>)
   1f662:	436b      	muls	r3, r5
   1f664:	18f2      	adds	r2, r6, r3
   1f666:	7f11      	ldrb	r1, [r2, #28]
   1f668:	2900      	cmp	r1, #0
   1f66a:	f040 80a5 	bne.w	1f7b8 <nrfx_spim_init+0x180>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1f66e:	f8d9 7000 	ldr.w	r7, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1f672:	f846 a003 	str.w	sl, [r6, r3]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   1f676:	7b23      	ldrb	r3, [r4, #12]
    p_cb->p_context = p_context;
   1f678:	f8c2 8004 	str.w	r8, [r2, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   1f67c:	2b01      	cmp	r3, #1
   1f67e:	7820      	ldrb	r0, [r4, #0]
   1f680:	f200 8088 	bhi.w	1f794 <nrfx_spim_init+0x15c>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1f684:	f7ff ffbc 	bl	1f600 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1f688:	f894 8000 	ldrb.w	r8, [r4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f68c:	f1b8 0f1f 	cmp.w	r8, #31
   1f690:	d901      	bls.n	1f696 <nrfx_spim_init+0x5e>
   1f692:	f7ff ff9f 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f696:	2201      	movs	r2, #1
   1f698:	4b4c      	ldr	r3, [pc, #304]	; (1f7cc <nrfx_spim_init+0x194>)
   1f69a:	f108 0880 	add.w	r8, r8, #128	; 0x80
   1f69e:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1f6a2:	f894 8001 	ldrb.w	r8, [r4, #1]
   1f6a6:	469a      	mov	sl, r3
   1f6a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1f6ac:	d075      	beq.n	1f79a <nrfx_spim_init+0x162>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1f6ae:	4640      	mov	r0, r8
   1f6b0:	f7ff ffa6 	bl	1f600 <nrf_gpio_pin_clear>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f6b4:	f1b8 0f1f 	cmp.w	r8, #31
        mosi_pin = p_config->mosi_pin;
   1f6b8:	46c3      	mov	fp, r8
   1f6ba:	d901      	bls.n	1f6c0 <nrfx_spim_init+0x88>
   1f6bc:	f7ff ff8a 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f6c0:	2303      	movs	r3, #3
   1f6c2:	f108 0880 	add.w	r8, r8, #128	; 0x80
   1f6c6:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1f6ca:	78a3      	ldrb	r3, [r4, #2]
   1f6cc:	2bff      	cmp	r3, #255	; 0xff
   1f6ce:	d067      	beq.n	1f7a0 <nrfx_spim_init+0x168>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f6d0:	2b1f      	cmp	r3, #31
    {
        miso_pin = p_config->miso_pin;
   1f6d2:	4698      	mov	r8, r3
   1f6d4:	d903      	bls.n	1f6de <nrfx_spim_init+0xa6>
   1f6d6:	9301      	str	r3, [sp, #4]
   1f6d8:	f7ff ff7c 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
   1f6dc:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f6de:	2204      	movs	r2, #4
   1f6e0:	3380      	adds	r3, #128	; 0x80
   1f6e2:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    p_cb->miso_pin = p_config->miso_pin;
   1f6e6:	2324      	movs	r3, #36	; 0x24
   1f6e8:	fb03 6305 	mla	r3, r3, r5, r6
   1f6ec:	78a2      	ldrb	r2, [r4, #2]
   1f6ee:	f883 2020 	strb.w	r2, [r3, #32]
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   1f6f2:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f6f4:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   1f6f6:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f6f8:	d014      	beq.n	1f724 <nrfx_spim_init+0xec>
    {
        if (p_config->ss_active_high)
   1f6fa:	7923      	ldrb	r3, [r4, #4]
   1f6fc:	2b00      	cmp	r3, #0
   1f6fe:	d052      	beq.n	1f7a6 <nrfx_spim_init+0x16e>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   1f700:	f7ff ff7e 	bl	1f600 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
   1f704:	78e3      	ldrb	r3, [r4, #3]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1f706:	2b1f      	cmp	r3, #31
   1f708:	d903      	bls.n	1f712 <nrfx_spim_init+0xda>
   1f70a:	9301      	str	r3, [sp, #4]
   1f70c:	f7ff ff62 	bl	1f5d4 <nrf_gpio_pin_port_decode.isra.0.part.1>
   1f710:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f712:	2203      	movs	r2, #3
   1f714:	3380      	adds	r3, #128	; 0x80
   1f716:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   1f71a:	2324      	movs	r3, #36	; 0x24
   1f71c:	fb03 6305 	mla	r3, r3, r5, r6
   1f720:	7922      	ldrb	r2, [r4, #4]
   1f722:	779a      	strb	r2, [r3, #30]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1f724:	7823      	ldrb	r3, [r4, #0]
    switch (spi_mode)
   1f726:	7b22      	ldrb	r2, [r4, #12]
    p_reg->PSEL.SCK  = sck_pin;
   1f728:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f72c:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1f72e:	f8c7 b50c 	str.w	fp, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1f732:	f8c7 8510 	str.w	r8, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f736:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1f73a:	7b63      	ldrb	r3, [r4, #13]
   1f73c:	3300      	adds	r3, #0
   1f73e:	bf18      	it	ne
   1f740:	2301      	movne	r3, #1
    switch (spi_mode)
   1f742:	2a02      	cmp	r2, #2
   1f744:	d032      	beq.n	1f7ac <nrfx_spim_init+0x174>
   1f746:	2a03      	cmp	r2, #3
   1f748:	d033      	beq.n	1f7b2 <nrfx_spim_init+0x17a>
   1f74a:	2a01      	cmp	r2, #1
   1f74c:	d101      	bne.n	1f752 <nrfx_spim_init+0x11a>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1f74e:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1f752:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                      uint8_t         orc)
{
    p_reg->ORC = orc;
   1f756:	79a3      	ldrb	r3, [r4, #6]
   1f758:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);

    nrf_spim_orc_set(p_spim, p_config->orc);

    if (p_cb->handler)
   1f75c:	2324      	movs	r3, #36	; 0x24
   1f75e:	436b      	muls	r3, r5
   1f760:	58f3      	ldr	r3, [r6, r3]
   1f762:	b113      	cbz	r3, 1f76a <nrfx_spim_init+0x132>
    p_reg->INTENSET = mask;
   1f764:	2240      	movs	r2, #64	; 0x40
   1f766:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1f76a:	2207      	movs	r2, #7
   1f76c:	f8c7 2500 	str.w	r2, [r7, #1280]	; 0x500
        nrf_spim_int_enable(p_spim, NRF_SPIM_INT_END_MASK);
    }

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1f770:	b12b      	cbz	r3, 1f77e <nrfx_spim_init+0x146>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1f772:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f776:	f340 3007 	sbfx	r0, r0, #12, #8
   1f77a:	f7ee fa99 	bl	dcb0 <z_arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1f77e:	2324      	movs	r3, #36	; 0x24
   1f780:	fb03 6505 	mla	r5, r3, r5, r6
   1f784:	2300      	movs	r3, #0
   1f786:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f788:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f78a:	4811      	ldr	r0, [pc, #68]	; (1f7d0 <nrfx_spim_init+0x198>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f78c:	772b      	strb	r3, [r5, #28]
}
   1f78e:	b003      	add	sp, #12
   1f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1f794:	f7ff ff42 	bl	1f61c <nrf_gpio_pin_set>
   1f798:	e776      	b.n	1f688 <nrfx_spim_init+0x50>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   1f79a:	f04f 3bff 	mov.w	fp, #4294967295
   1f79e:	e794      	b.n	1f6ca <nrfx_spim_init+0x92>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   1f7a0:	f04f 38ff 	mov.w	r8, #4294967295
   1f7a4:	e79f      	b.n	1f6e6 <nrfx_spim_init+0xae>
            nrf_gpio_pin_set(p_config->ss_pin);
   1f7a6:	f7ff ff39 	bl	1f61c <nrf_gpio_pin_set>
   1f7aa:	e7ab      	b.n	1f704 <nrfx_spim_init+0xcc>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f7ac:	f043 0304 	orr.w	r3, r3, #4
   1f7b0:	e7cf      	b.n	1f752 <nrfx_spim_init+0x11a>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f7b2:	f043 0306 	orr.w	r3, r3, #6
   1f7b6:	e7cc      	b.n	1f752 <nrfx_spim_init+0x11a>
        return err_code;
   1f7b8:	4806      	ldr	r0, [pc, #24]	; (1f7d4 <nrfx_spim_init+0x19c>)
   1f7ba:	e7e8      	b.n	1f78e <nrfx_spim_init+0x156>
   1f7bc:	00027307 	.word	0x00027307
   1f7c0:	0002694b 	.word	0x0002694b
   1f7c4:	000272ca 	.word	0x000272ca
   1f7c8:	200218e4 	.word	0x200218e4
   1f7cc:	40842500 	.word	0x40842500
   1f7d0:	0bad0000 	.word	0x0bad0000
   1f7d4:	0bad0005 	.word	0x0bad0005

0001f7d8 <nrfx_spim_xfer>:
nrfx_err_t nrfx_spim_xfer(nrfx_spim_t     const * const p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f7d8:	2324      	movs	r3, #36	; 0x24
{
   1f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f7de:	4e63      	ldr	r6, [pc, #396]	; (1f96c <nrfx_spim_xfer+0x194>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f7e0:	7905      	ldrb	r5, [r0, #4]
{
   1f7e2:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f7e4:	fb03 6305 	mla	r3, r3, r5, r6
   1f7e8:	7f1b      	ldrb	r3, [r3, #28]
{
   1f7ea:	460c      	mov	r4, r1
   1f7ec:	4617      	mov	r7, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f7ee:	b95b      	cbnz	r3, 1f808 <nrfx_spim_xfer+0x30>
   1f7f0:	495f      	ldr	r1, [pc, #380]	; (1f970 <nrfx_spim_xfer+0x198>)
   1f7f2:	4860      	ldr	r0, [pc, #384]	; (1f974 <nrfx_spim_xfer+0x19c>)
   1f7f4:	f240 2329 	movw	r3, #553	; 0x229
   1f7f8:	4a5f      	ldr	r2, [pc, #380]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f7fa:	f004 fb3d 	bl	23e78 <printk>
   1f7fe:	f240 2129 	movw	r1, #553	; 0x229
   1f802:	485d      	ldr	r0, [pc, #372]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f804:	f004 fb45 	bl	23e92 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1f808:	6823      	ldr	r3, [r4, #0]
   1f80a:	b96b      	cbnz	r3, 1f828 <nrfx_spim_xfer+0x50>
   1f80c:	6863      	ldr	r3, [r4, #4]
   1f80e:	b15b      	cbz	r3, 1f828 <nrfx_spim_xfer+0x50>
   1f810:	495a      	ldr	r1, [pc, #360]	; (1f97c <nrfx_spim_xfer+0x1a4>)
   1f812:	4858      	ldr	r0, [pc, #352]	; (1f974 <nrfx_spim_xfer+0x19c>)
   1f814:	f240 232a 	movw	r3, #554	; 0x22a
   1f818:	4a57      	ldr	r2, [pc, #348]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f81a:	f004 fb2d 	bl	23e78 <printk>
   1f81e:	f240 212a 	movw	r1, #554	; 0x22a
   1f822:	4855      	ldr	r0, [pc, #340]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f824:	f004 fb35 	bl	23e92 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1f828:	68a3      	ldr	r3, [r4, #8]
   1f82a:	b96b      	cbnz	r3, 1f848 <nrfx_spim_xfer+0x70>
   1f82c:	68e3      	ldr	r3, [r4, #12]
   1f82e:	b15b      	cbz	r3, 1f848 <nrfx_spim_xfer+0x70>
   1f830:	4953      	ldr	r1, [pc, #332]	; (1f980 <nrfx_spim_xfer+0x1a8>)
   1f832:	4850      	ldr	r0, [pc, #320]	; (1f974 <nrfx_spim_xfer+0x19c>)
   1f834:	f240 232b 	movw	r3, #555	; 0x22b
   1f838:	4a4f      	ldr	r2, [pc, #316]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f83a:	f004 fb1d 	bl	23e78 <printk>
   1f83e:	f240 212b 	movw	r1, #555	; 0x22b
   1f842:	484d      	ldr	r0, [pc, #308]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f844:	f004 fb25 	bl	23e92 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1f848:	f898 3004 	ldrb.w	r3, [r8, #4]
   1f84c:	b93b      	cbnz	r3, 1f85e <nrfx_spim_xfer+0x86>
   1f84e:	68e3      	ldr	r3, [r4, #12]
   1f850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f854:	d203      	bcs.n	1f85e <nrfx_spim_xfer+0x86>
   1f856:	6863      	ldr	r3, [r4, #4]
   1f858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f85c:	d30b      	bcc.n	1f876 <nrfx_spim_xfer+0x9e>
   1f85e:	4949      	ldr	r1, [pc, #292]	; (1f984 <nrfx_spim_xfer+0x1ac>)
   1f860:	4844      	ldr	r0, [pc, #272]	; (1f974 <nrfx_spim_xfer+0x19c>)
   1f862:	f240 232e 	movw	r3, #558	; 0x22e
   1f866:	4a44      	ldr	r2, [pc, #272]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f868:	f004 fb06 	bl	23e78 <printk>
   1f86c:	f240 212e 	movw	r1, #558	; 0x22e
   1f870:	4841      	ldr	r0, [pc, #260]	; (1f978 <nrfx_spim_xfer+0x1a0>)
   1f872:	f004 fb0e 	bl	23e92 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1f876:	2324      	movs	r3, #36	; 0x24
   1f878:	436b      	muls	r3, r5
   1f87a:	18f2      	adds	r2, r6, r3
   1f87c:	7f51      	ldrb	r1, [r2, #29]
   1f87e:	2900      	cmp	r1, #0
   1f880:	d171      	bne.n	1f966 <nrfx_spim_xfer+0x18e>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1f882:	58f3      	ldr	r3, [r6, r3]
   1f884:	b123      	cbz	r3, 1f890 <nrfx_spim_xfer+0xb8>
   1f886:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1f88a:	bf04      	itt	eq
   1f88c:	2301      	moveq	r3, #1
   1f88e:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1f890:	f04f 0c24 	mov.w	ip, #36	; 0x24
   1f894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f898:	fb0c 6c05 	mla	ip, ip, r5, r6
   1f89c:	f10c 0e0c 	add.w	lr, ip, #12
   1f8a0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f8a4:	f89c 001f 	ldrb.w	r0, [ip, #31]
   1f8a8:	28ff      	cmp	r0, #255	; 0xff
   1f8aa:	d004      	beq.n	1f8b6 <nrfx_spim_xfer+0xde>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   1f8ac:	f89c 301e 	ldrb.w	r3, [ip, #30]
   1f8b0:	b1bb      	cbz	r3, 1f8e2 <nrfx_spim_xfer+0x10a>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   1f8b2:	f7ff feb3 	bl	1f61c <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f8b6:	6821      	ldr	r1, [r4, #0]
   1f8b8:	b121      	cbz	r1, 1f8c4 <nrfx_spim_xfer+0xec>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1f8ba:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   1f8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1f8c2:	d106      	bne.n	1f8d2 <nrfx_spim_xfer+0xfa>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f8c4:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f8c6:	b17a      	cbz	r2, 1f8e8 <nrfx_spim_xfer+0x110>
   1f8c8:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f8cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1f8d0:	d00a      	beq.n	1f8e8 <nrfx_spim_xfer+0x110>
        p_cb->transfer_in_progress = false;
   1f8d2:	2324      	movs	r3, #36	; 0x24
   1f8d4:	fb03 6505 	mla	r5, r3, r5, r6
   1f8d8:	2300      	movs	r3, #0
        return err_code;
   1f8da:	482b      	ldr	r0, [pc, #172]	; (1f988 <nrfx_spim_xfer+0x1b0>)
        p_cb->transfer_in_progress = false;
   1f8dc:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   1f8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   1f8e2:	f7ff fe8d 	bl	1f600 <nrf_gpio_pin_clear>
   1f8e6:	e7e6      	b.n	1f8b6 <nrfx_spim_xfer+0xde>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1f8e8:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1f8ec:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f8ee:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f8f2:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   1f8f6:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f8f8:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f8fc:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   1f8fe:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f902:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1f906:	f017 0201 	ands.w	r2, r7, #1
}


__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
   1f90a:	bf18      	it	ne
   1f90c:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
   1f90e:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1f912:	f017 0202 	ands.w	r2, r7, #2
}

__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
   1f916:	bf18      	it	ne
   1f918:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
   1f91a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1f91e:	073a      	lsls	r2, r7, #28
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f920:	bf5c      	itt	pl
   1f922:	2201      	movpl	r2, #1
   1f924:	611a      	strpl	r2, [r3, #16]
    if (!p_cb->handler)
   1f926:	2224      	movs	r2, #36	; 0x24
   1f928:	436a      	muls	r2, r5
   1f92a:	58b2      	ldr	r2, [r6, r2]
   1f92c:	b992      	cbnz	r2, 1f954 <nrfx_spim_xfer+0x17c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f92e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END)){}
   1f932:	2a00      	cmp	r2, #0
   1f934:	d0fb      	beq.n	1f92e <nrfx_spim_xfer+0x156>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f936:	2324      	movs	r3, #36	; 0x24
   1f938:	fb03 6505 	mla	r5, r3, r5, r6
   1f93c:	7fe8      	ldrb	r0, [r5, #31]
   1f93e:	28ff      	cmp	r0, #255	; 0xff
   1f940:	d003      	beq.n	1f94a <nrfx_spim_xfer+0x172>
                if (p_cb->ss_active_high)
   1f942:	7fab      	ldrb	r3, [r5, #30]
   1f944:	b11b      	cbz	r3, 1f94e <nrfx_spim_xfer+0x176>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   1f946:	f7ff fe5b 	bl	1f600 <nrf_gpio_pin_clear>
    return err_code;
   1f94a:	4810      	ldr	r0, [pc, #64]	; (1f98c <nrfx_spim_xfer+0x1b4>)
   1f94c:	e7c7      	b.n	1f8de <nrfx_spim_xfer+0x106>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   1f94e:	f7ff fe65 	bl	1f61c <nrf_gpio_pin_set>
   1f952:	e7fa      	b.n	1f94a <nrfx_spim_xfer+0x172>
   1f954:	2240      	movs	r2, #64	; 0x40
    if (!enable)
   1f956:	f017 0f04 	tst.w	r7, #4
    p_reg->INTENCLR = mask;
   1f95a:	bf14      	ite	ne
   1f95c:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   1f960:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   1f964:	e7f1      	b.n	1f94a <nrfx_spim_xfer+0x172>
        return err_code;
   1f966:	480a      	ldr	r0, [pc, #40]	; (1f990 <nrfx_spim_xfer+0x1b8>)
   1f968:	e7b9      	b.n	1f8de <nrfx_spim_xfer+0x106>
   1f96a:	bf00      	nop
   1f96c:	200218e4 	.word	0x200218e4
   1f970:	00027310 	.word	0x00027310
   1f974:	0002694b 	.word	0x0002694b
   1f978:	000272ca 	.word	0x000272ca
   1f97c:	0002733c 	.word	0x0002733c
   1f980:	00027383 	.word	0x00027383
   1f984:	000273ca 	.word	0x000273ca
   1f988:	0bad000a 	.word	0x0bad000a
   1f98c:	0bad0000 	.word	0x0bad0000
   1f990:	0bad000b 	.word	0x0bad000b

0001f994 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f994:	4b15      	ldr	r3, [pc, #84]	; (1f9ec <nrfx_spim_3_irq_handler+0x58>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   1f996:	b510      	push	{r4, lr}
   1f998:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1f99c:	b322      	cbz	r2, 1f9e8 <nrfx_spim_3_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f99e:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   1f9a0:	4c13      	ldr	r4, [pc, #76]	; (1f9f0 <nrfx_spim_3_irq_handler+0x5c>)
   1f9a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1f9a6:	6823      	ldr	r3, [r4, #0]
   1f9a8:	b95b      	cbnz	r3, 1f9c2 <nrfx_spim_3_irq_handler+0x2e>
   1f9aa:	4912      	ldr	r1, [pc, #72]	; (1f9f4 <nrfx_spim_3_irq_handler+0x60>)
   1f9ac:	4812      	ldr	r0, [pc, #72]	; (1f9f8 <nrfx_spim_3_irq_handler+0x64>)
   1f9ae:	f240 2393 	movw	r3, #659	; 0x293
   1f9b2:	4a12      	ldr	r2, [pc, #72]	; (1f9fc <nrfx_spim_3_irq_handler+0x68>)
   1f9b4:	f004 fa60 	bl	23e78 <printk>
   1f9b8:	f240 2193 	movw	r1, #659	; 0x293
   1f9bc:	480f      	ldr	r0, [pc, #60]	; (1f9fc <nrfx_spim_3_irq_handler+0x68>)
   1f9be:	f004 fa68 	bl	23e92 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f9c2:	7fe0      	ldrb	r0, [r4, #31]
   1f9c4:	28ff      	cmp	r0, #255	; 0xff
   1f9c6:	d003      	beq.n	1f9d0 <nrfx_spim_3_irq_handler+0x3c>
            if (p_cb->ss_active_high)
   1f9c8:	7fa3      	ldrb	r3, [r4, #30]
   1f9ca:	b153      	cbz	r3, 1f9e2 <nrfx_spim_3_irq_handler+0x4e>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   1f9cc:	f7ff fe18 	bl	1f600 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   1f9d0:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f9d2:	480b      	ldr	r0, [pc, #44]	; (1fa00 <nrfx_spim_3_irq_handler+0x6c>)
    p_cb->transfer_in_progress = false;
   1f9d4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1f9d6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f9d8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   1f9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f9e0:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   1f9e2:	f7ff fe1b 	bl	1f61c <nrf_gpio_pin_set>
   1f9e6:	e7f3      	b.n	1f9d0 <nrfx_spim_3_irq_handler+0x3c>
}
   1f9e8:	bd10      	pop	{r4, pc}
   1f9ea:	bf00      	nop
   1f9ec:	4000b000 	.word	0x4000b000
   1f9f0:	200218e4 	.word	0x200218e4
   1f9f4:	000272bc 	.word	0x000272bc
   1f9f8:	0002694b 	.word	0x0002694b
   1f9fc:	000272ca 	.word	0x000272ca
   1fa00:	200218ec 	.word	0x200218ec

0001fa04 <nrf_gpio_pin_port_decode.isra.0>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1fa04:	281f      	cmp	r0, #31
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1fa06:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1fa08:	d90b      	bls.n	1fa22 <nrf_gpio_pin_port_decode.isra.0+0x1e>
   1fa0a:	4907      	ldr	r1, [pc, #28]	; (1fa28 <nrf_gpio_pin_port_decode.isra.0+0x24>)
   1fa0c:	4807      	ldr	r0, [pc, #28]	; (1fa2c <nrf_gpio_pin_port_decode.isra.0+0x28>)
   1fa0e:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1fa12:	4a07      	ldr	r2, [pc, #28]	; (1fa30 <nrf_gpio_pin_port_decode.isra.0+0x2c>)
   1fa14:	f004 fa30 	bl	23e78 <printk>
   1fa18:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1fa1c:	4804      	ldr	r0, [pc, #16]	; (1fa30 <nrf_gpio_pin_port_decode.isra.0+0x2c>)
   1fa1e:	f004 fa38 	bl	23e92 <assert_post_action>
}
   1fa22:	4804      	ldr	r0, [pc, #16]	; (1fa34 <nrf_gpio_pin_port_decode.isra.0+0x30>)
   1fa24:	bd08      	pop	{r3, pc}
   1fa26:	bf00      	nop
   1fa28:	00027191 	.word	0x00027191
   1fa2c:	0002694b 	.word	0x0002694b
   1fa30:	0002715d 	.word	0x0002715d
   1fa34:	40842500 	.word	0x40842500

0001fa38 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   1fa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa3c:	4681      	mov	r9, r0
   1fa3e:	4692      	mov	sl, r2
   1fa40:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   1fa42:	460c      	mov	r4, r1
   1fa44:	b949      	cbnz	r1, 1fa5a <nrfx_twim_init+0x22>
   1fa46:	492e      	ldr	r1, [pc, #184]	; (1fb00 <nrfx_twim_init+0xc8>)
   1fa48:	482e      	ldr	r0, [pc, #184]	; (1fb04 <nrfx_twim_init+0xcc>)
   1fa4a:	23a0      	movs	r3, #160	; 0xa0
   1fa4c:	4a2e      	ldr	r2, [pc, #184]	; (1fb08 <nrfx_twim_init+0xd0>)
   1fa4e:	f004 fa13 	bl	23e78 <printk>
   1fa52:	21a0      	movs	r1, #160	; 0xa0
   1fa54:	482c      	ldr	r0, [pc, #176]	; (1fb08 <nrfx_twim_init+0xd0>)
   1fa56:	f004 fa1c 	bl	23e92 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   1fa5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fa5e:	429a      	cmp	r2, r3
   1fa60:	d109      	bne.n	1fa76 <nrfx_twim_init+0x3e>
   1fa62:	492a      	ldr	r1, [pc, #168]	; (1fb0c <nrfx_twim_init+0xd4>)
   1fa64:	4827      	ldr	r0, [pc, #156]	; (1fb04 <nrfx_twim_init+0xcc>)
   1fa66:	23a1      	movs	r3, #161	; 0xa1
   1fa68:	4a27      	ldr	r2, [pc, #156]	; (1fb08 <nrfx_twim_init+0xd0>)
   1fa6a:	f004 fa05 	bl	23e78 <printk>
   1fa6e:	21a1      	movs	r1, #161	; 0xa1
   1fa70:	4825      	ldr	r0, [pc, #148]	; (1fb08 <nrfx_twim_init+0xd0>)
   1fa72:	f004 fa0e 	bl	23e92 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fa76:	2634      	movs	r6, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fa78:	f899 7004 	ldrb.w	r7, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fa7c:	4d24      	ldr	r5, [pc, #144]	; (1fb10 <nrfx_twim_init+0xd8>)
   1fa7e:	437e      	muls	r6, r7
   1fa80:	19ab      	adds	r3, r5, r6
   1fa82:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   1fa86:	bbca      	cbnz	r2, 1fafc <nrfx_twim_init+0xc4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   1fa88:	609a      	str	r2, [r3, #8]
    p_cb->p_context       = p_context;
   1fa8a:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->repeated        = false;
   1fa8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
   1fa92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   1fa96:	f8d4 8000 	ldr.w	r8, [r4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1fa9a:	7b62      	ldrb	r2, [r4, #13]
    p_cb->handler         = event_handler;
   1fa9c:	f845 a006 	str.w	sl, [r5, r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1faa0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1faa4:	4640      	mov	r0, r8
   1faa6:	f7ff ffad 	bl	1fa04 <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1faaa:	f240 6a0c 	movw	sl, #1548	; 0x60c
   1faae:	f108 0880 	add.w	r8, r8, #128	; 0x80
   1fab2:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   1fab6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1faba:	4640      	mov	r0, r8
   1fabc:	f7ff ffa2 	bl	1fa04 <nrf_gpio_pin_port_decode.isra.0>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1fac0:	e9d4 2300 	ldrd	r2, r3, [r4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fac4:	f108 0880 	add.w	r8, r8, #128	; 0x80
   1fac8:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1facc:	f8d9 0000 	ldr.w	r0, [r9]

__STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                       uint32_t scl_pin,
                                       uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   1fad0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1fad4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   1fad8:	68a3      	ldr	r3, [r4, #8]
}

__STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                            nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1fada:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1fade:	59ab      	ldr	r3, [r5, r6]
   1fae0:	b11b      	cbz	r3, 1faea <nrfx_twim_init+0xb2>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1fae2:	f340 3007 	sbfx	r0, r0, #12, #8
   1fae6:	f7ee f8e3 	bl	dcb0 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1faea:	2334      	movs	r3, #52	; 0x34
   1faec:	fb03 5507 	mla	r5, r3, r7, r5
   1faf0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1faf2:	4808      	ldr	r0, [pc, #32]	; (1fb14 <nrfx_twim_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1faf4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1faf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   1fafc:	4806      	ldr	r0, [pc, #24]	; (1fb18 <nrfx_twim_init+0xe0>)
   1fafe:	e7fb      	b.n	1faf8 <nrfx_twim_init+0xc0>
   1fb00:	00027307 	.word	0x00027307
   1fb04:	0002694b 	.word	0x0002694b
   1fb08:	00027493 	.word	0x00027493
   1fb0c:	000274d0 	.word	0x000274d0
   1fb10:	20021908 	.word	0x20021908
   1fb14:	0bad0000 	.word	0x0bad0000
   1fb18:	0bad0005 	.word	0x0bad0005

0001fb1c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1fb1c:	2234      	movs	r2, #52	; 0x34
{
   1fb1e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1fb20:	4d0f      	ldr	r5, [pc, #60]	; (1fb60 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fb22:	7904      	ldrb	r4, [r0, #4]
{
   1fb24:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1fb26:	fb02 5204 	mla	r2, r2, r4, r5
   1fb2a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   1fb2e:	2a01      	cmp	r2, #1
   1fb30:	d00b      	beq.n	1fb4a <nrfx_twim_enable+0x2e>
   1fb32:	490c      	ldr	r1, [pc, #48]	; (1fb64 <nrfx_twim_enable+0x48>)
   1fb34:	480c      	ldr	r0, [pc, #48]	; (1fb68 <nrfx_twim_enable+0x4c>)
   1fb36:	f44f 7384 	mov.w	r3, #264	; 0x108
   1fb3a:	4a0c      	ldr	r2, [pc, #48]	; (1fb6c <nrfx_twim_enable+0x50>)
   1fb3c:	f004 f99c 	bl	23e78 <printk>
   1fb40:	f44f 7184 	mov.w	r1, #264	; 0x108
   1fb44:	4809      	ldr	r0, [pc, #36]	; (1fb6c <nrfx_twim_enable+0x50>)
   1fb46:	f004 f9a4 	bl	23e92 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1fb4a:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   1fb4c:	6833      	ldr	r3, [r6, #0]
   1fb4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1fb52:	2334      	movs	r3, #52	; 0x34
   1fb54:	fb03 5404 	mla	r4, r3, r4, r5
   1fb58:	2302      	movs	r3, #2
   1fb5a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1fb5e:	bd70      	pop	{r4, r5, r6, pc}
   1fb60:	20021908 	.word	0x20021908
   1fb64:	00027469 	.word	0x00027469
   1fb68:	0002694b 	.word	0x0002694b
   1fb6c:	00027493 	.word	0x00027493

0001fb70 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fb70:	2234      	movs	r2, #52	; 0x34
{
   1fb72:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fb74:	4d14      	ldr	r5, [pc, #80]	; (1fbc8 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fb76:	7904      	ldrb	r4, [r0, #4]
{
   1fb78:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fb7a:	fb02 5204 	mla	r2, r2, r4, r5
   1fb7e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   1fb82:	b95a      	cbnz	r2, 1fb9c <nrfx_twim_disable+0x2c>
   1fb84:	4911      	ldr	r1, [pc, #68]	; (1fbcc <nrfx_twim_disable+0x5c>)
   1fb86:	4812      	ldr	r0, [pc, #72]	; (1fbd0 <nrfx_twim_disable+0x60>)
   1fb88:	f240 1313 	movw	r3, #275	; 0x113
   1fb8c:	4a11      	ldr	r2, [pc, #68]	; (1fbd4 <nrfx_twim_disable+0x64>)
   1fb8e:	f004 f973 	bl	23e78 <printk>
   1fb92:	f240 1113 	movw	r1, #275	; 0x113
   1fb96:	480f      	ldr	r0, [pc, #60]	; (1fbd4 <nrfx_twim_disable+0x64>)
   1fb98:	f004 f97b 	bl	23e92 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   1fb9c:	2234      	movs	r2, #52	; 0x34
   1fb9e:	2100      	movs	r1, #0
   1fba0:	fb02 5404 	mla	r4, r2, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1fba4:	6833      	ldr	r3, [r6, #0]
    p_reg->INTENCLR = mask;
   1fba6:	4a0c      	ldr	r2, [pc, #48]	; (1fbd8 <nrfx_twim_disable+0x68>)
    p_cb->int_mask = 0;
   1fba8:	60a1      	str	r1, [r4, #8]
   1fbaa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1fbae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1fbb2:	f422 52bc 	bic.w	r2, r2, #6016	; 0x1780
   1fbb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1fbba:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fbbe:	2301      	movs	r3, #1
   1fbc0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   1fbc4:	bd70      	pop	{r4, r5, r6, pc}
   1fbc6:	bf00      	nop
   1fbc8:	20021908 	.word	0x20021908
   1fbcc:	00027310 	.word	0x00027310
   1fbd0:	0002694b 	.word	0x0002694b
   1fbd4:	00027493 	.word	0x00027493
   1fbd8:	019c0202 	.word	0x019c0202

0001fbdc <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1fbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1fbe0:	7903      	ldrb	r3, [r0, #4]
{
   1fbe2:	4604      	mov	r4, r0
   1fbe4:	460d      	mov	r5, r1
   1fbe6:	4690      	mov	r8, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1fbe8:	b93b      	cbnz	r3, 1fbfa <nrfx_twim_xfer+0x1e>
   1fbea:	684b      	ldr	r3, [r1, #4]
   1fbec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fbf0:	d203      	bcs.n	1fbfa <nrfx_twim_xfer+0x1e>
   1fbf2:	688b      	ldr	r3, [r1, #8]
   1fbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fbf8:	d30b      	bcc.n	1fc12 <nrfx_twim_xfer+0x36>
   1fbfa:	49bc      	ldr	r1, [pc, #752]	; (1feec <nrfx_twim_xfer+0x310>)
   1fbfc:	48bc      	ldr	r0, [pc, #752]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fbfe:	f240 13e7 	movw	r3, #487	; 0x1e7
   1fc02:	4abc      	ldr	r2, [pc, #752]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc04:	f004 f938 	bl	23e78 <printk>
   1fc08:	f240 11e7 	movw	r1, #487	; 0x1e7
   1fc0c:	48b9      	ldr	r0, [pc, #740]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc0e:	f004 f940 	bl	23e92 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   1fc12:	2334      	movs	r3, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fc14:	7927      	ldrb	r7, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   1fc16:	4eb8      	ldr	r6, [pc, #736]	; (1fef8 <nrfx_twim_xfer+0x31c>)
   1fc18:	437b      	muls	r3, r7
   1fc1a:	58f3      	ldr	r3, [r6, r3]
   1fc1c:	b973      	cbnz	r3, 1fc3c <nrfx_twim_xfer+0x60>
   1fc1e:	782b      	ldrb	r3, [r5, #0]
   1fc20:	2b02      	cmp	r3, #2
   1fc22:	d10b      	bne.n	1fc3c <nrfx_twim_xfer+0x60>
   1fc24:	49b5      	ldr	r1, [pc, #724]	; (1fefc <nrfx_twim_xfer+0x320>)
   1fc26:	48b2      	ldr	r0, [pc, #712]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fc28:	f240 13ed 	movw	r3, #493	; 0x1ed
   1fc2c:	4ab1      	ldr	r2, [pc, #708]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc2e:	f004 f923 	bl	23e78 <printk>
   1fc32:	f240 11ed 	movw	r1, #493	; 0x1ed
   1fc36:	48af      	ldr	r0, [pc, #700]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc38:	f004 f92b 	bl	23e92 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   1fc3c:	2334      	movs	r3, #52	; 0x34
   1fc3e:	437b      	muls	r3, r7
   1fc40:	58f3      	ldr	r3, [r6, r3]
   1fc42:	b973      	cbnz	r3, 1fc62 <nrfx_twim_xfer+0x86>
   1fc44:	782b      	ldrb	r3, [r5, #0]
   1fc46:	2b03      	cmp	r3, #3
   1fc48:	d10b      	bne.n	1fc62 <nrfx_twim_xfer+0x86>
   1fc4a:	49ad      	ldr	r1, [pc, #692]	; (1ff00 <nrfx_twim_xfer+0x324>)
   1fc4c:	48a8      	ldr	r0, [pc, #672]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fc4e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   1fc52:	4aa8      	ldr	r2, [pc, #672]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc54:	f004 f910 	bl	23e78 <printk>
   1fc58:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1fc5c:	48a5      	ldr	r0, [pc, #660]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fc5e:	f004 f918 	bl	23e92 <assert_post_action>
   1fc62:	68eb      	ldr	r3, [r5, #12]
   1fc64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1fc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1fc6c:	d002      	beq.n	1fc74 <nrfx_twim_xfer+0x98>
        return err_code;
   1fc6e:	48a5      	ldr	r0, [pc, #660]	; (1ff04 <nrfx_twim_xfer+0x328>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1fc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1fc74:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1fc78:	fb0c 6c07 	mla	ip, ip, r7, r6
    p_reg->INTENCLR = mask;
   1fc7c:	4ba2      	ldr	r3, [pc, #648]	; (1ff08 <nrfx_twim_xfer+0x32c>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1fc7e:	6824      	ldr	r4, [r4, #0]
   1fc80:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   1fc84:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   1fc88:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1fc8c:	b12b      	cbz	r3, 1fc9a <nrfx_twim_xfer+0xbe>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1fc8e:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   1fc92:	489e      	ldr	r0, [pc, #632]	; (1ff0c <nrfx_twim_xfer+0x330>)
    p_reg->INTENSET = mask;
   1fc94:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1fc98:	e7ea      	b.n	1fc70 <nrfx_twim_xfer+0x94>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1fc9a:	f018 0f14 	tst.w	r8, #20
   1fc9e:	bf0c      	ite	eq
   1fca0:	2301      	moveq	r3, #1
   1fca2:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   1fca4:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1fca6:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1fcaa:	f10c 0e0c 	add.w	lr, ip, #12
   1fcae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1fcb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1fcb6:	f8d9 3000 	ldr.w	r3, [r9]
   1fcba:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1fcbe:	f3c8 1300 	ubfx	r3, r8, #4, #1
   1fcc2:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

__STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                          uint8_t address)
{
    p_reg->ADDRESS = address;
   1fcc6:	786b      	ldrb	r3, [r5, #1]
   1fcc8:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1fccc:	f018 0301 	ands.w	r3, r8, #1
    return p_reg->RXD.AMOUNT;
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
   1fcd0:	bf18      	it	ne
   1fcd2:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fcd4:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1fcd8:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
}

__STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
   1fcdc:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1fce0:	f018 0302 	ands.w	r3, r8, #2
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
   1fce4:	bf18      	it	ne
   1fce6:	2301      	movne	r3, #1
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
   1fce8:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1fcec:	782b      	ldrb	r3, [r5, #0]
   1fcee:	2b03      	cmp	r3, #3
   1fcf0:	f200 80ea 	bhi.w	1fec8 <nrfx_twim_xfer+0x2ec>
   1fcf4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1fcf8:	00d200ab 	.word	0x00d200ab
   1fcfc:	0004008c 	.word	0x0004008c
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   1fd00:	f018 0f10 	tst.w	r8, #16
   1fd04:	d00b      	beq.n	1fd1e <nrfx_twim_xfer+0x142>
   1fd06:	4982      	ldr	r1, [pc, #520]	; (1ff10 <nrfx_twim_xfer+0x334>)
   1fd08:	4879      	ldr	r0, [pc, #484]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fd0a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1fd0e:	4a79      	ldr	r2, [pc, #484]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd10:	f004 f8b2 	bl	23e78 <printk>
   1fd14:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1fd18:	4876      	ldr	r0, [pc, #472]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd1a:	f004 f8ba 	bl	23e92 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   1fd1e:	f018 0f08 	tst.w	r8, #8
   1fd22:	d00b      	beq.n	1fd3c <nrfx_twim_xfer+0x160>
   1fd24:	497b      	ldr	r1, [pc, #492]	; (1ff14 <nrfx_twim_xfer+0x338>)
   1fd26:	4872      	ldr	r0, [pc, #456]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fd28:	f240 1369 	movw	r3, #361	; 0x169
   1fd2c:	4a71      	ldr	r2, [pc, #452]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd2e:	f004 f8a3 	bl	23e78 <printk>
   1fd32:	f240 1169 	movw	r1, #361	; 0x169
   1fd36:	486f      	ldr	r0, [pc, #444]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd38:	f004 f8ab 	bl	23e92 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   1fd3c:	f018 0f04 	tst.w	r8, #4
   1fd40:	d00b      	beq.n	1fd5a <nrfx_twim_xfer+0x17e>
   1fd42:	4975      	ldr	r1, [pc, #468]	; (1ff18 <nrfx_twim_xfer+0x33c>)
   1fd44:	486a      	ldr	r0, [pc, #424]	; (1fef0 <nrfx_twim_xfer+0x314>)
   1fd46:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   1fd4a:	4a6a      	ldr	r2, [pc, #424]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd4c:	f004 f894 	bl	23e78 <printk>
   1fd50:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   1fd54:	4867      	ldr	r0, [pc, #412]	; (1fef4 <nrfx_twim_xfer+0x318>)
   1fd56:	f004 f89c 	bl	23e92 <assert_post_action>
   1fd5a:	692a      	ldr	r2, [r5, #16]
   1fd5c:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1fd60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1fd64:	d183      	bne.n	1fc6e <nrfx_twim_xfer+0x92>
    p_reg->SHORTS = mask;
   1fd66:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd6a:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   1fd6c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1fd70:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd72:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fd76:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd7a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd7c:	2300      	movs	r3, #0
   1fd7e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1fd82:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   1fd86:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd8a:	6221      	str	r1, [r4, #32]
   1fd8c:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd8e:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1fd92:	2900      	cmp	r1, #0
   1fd94:	d0fb      	beq.n	1fd8e <nrfx_twim_xfer+0x1b2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd96:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1fd9a:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd9c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fda0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1fda4:	2334      	movs	r3, #52	; 0x34
   1fda6:	fb03 6307 	mla	r3, r3, r7, r6
   1fdaa:	4a5c      	ldr	r2, [pc, #368]	; (1ff1c <nrfx_twim_xfer+0x340>)
   1fdac:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1fdae:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1fdb2:	2208      	movs	r2, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1fdb4:	485a      	ldr	r0, [pc, #360]	; (1ff20 <nrfx_twim_xfer+0x344>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1fdb6:	f018 0f08 	tst.w	r8, #8
   1fdba:	d104      	bne.n	1fdc6 <nrfx_twim_xfer+0x1ea>
   1fdbc:	7829      	ldrb	r1, [r5, #0]
   1fdbe:	2903      	cmp	r1, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdc0:	bf1c      	itt	ne
   1fdc2:	2101      	movne	r1, #1
   1fdc4:	50a1      	strne	r1, [r4, r2]
    if (p_cb->handler)
   1fdc6:	2234      	movs	r2, #52	; 0x34
   1fdc8:	437a      	muls	r2, r7
   1fdca:	18b1      	adds	r1, r6, r2
   1fdcc:	58b2      	ldr	r2, [r6, r2]
   1fdce:	2a00      	cmp	r2, #0
   1fdd0:	d17f      	bne.n	1fed2 <nrfx_twim_xfer+0x2f6>
   1fdd2:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fdd4:	4423      	add	r3, r4
   1fdd6:	681a      	ldr	r2, [r3, #0]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
   1fdd8:	2a00      	cmp	r2, #0
   1fdda:	f000 80ab 	beq.w	1ff34 <nrfx_twim_xfer+0x358>
        p_cb->busy = false;
   1fdde:	2234      	movs	r2, #52	; 0x34
   1fde0:	fb02 6607 	mla	r6, r2, r7, r6
   1fde4:	2200      	movs	r2, #0
    uint32_t error_source = p_reg->ERRORSRC;
   1fde6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1fdea:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1fdee:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
        if (errorsrc)
   1fdf2:	2b00      	cmp	r3, #0
   1fdf4:	f43f af3c 	beq.w	1fc70 <nrfx_twim_xfer+0x94>
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1fdf8:	4a4a      	ldr	r2, [pc, #296]	; (1ff24 <nrfx_twim_xfer+0x348>)
   1fdfa:	f013 0f02 	tst.w	r3, #2
   1fdfe:	484a      	ldr	r0, [pc, #296]	; (1ff28 <nrfx_twim_xfer+0x34c>)
   1fe00:	bf08      	it	eq
   1fe02:	4610      	moveq	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1fe04:	f013 0f04 	tst.w	r3, #4
   1fe08:	4b48      	ldr	r3, [pc, #288]	; (1ff2c <nrfx_twim_xfer+0x350>)
   1fe0a:	bf18      	it	ne
   1fe0c:	4618      	movne	r0, r3
   1fe0e:	e72f      	b.n	1fc70 <nrfx_twim_xfer+0x94>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1fe10:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fe12:	68ea      	ldr	r2, [r5, #12]
   1fe14:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fe18:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1fe1c:	692b      	ldr	r3, [r5, #16]
   1fe1e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1fe22:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1fe26:	f47f af22 	bne.w	1fc6e <nrfx_twim_xfer+0x92>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1fe2a:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fe2c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1fe30:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1fe34:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1fe38:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1fe3c:	2334      	movs	r3, #52	; 0x34
   1fe3e:	f240 2202 	movw	r2, #514	; 0x202
   1fe42:	fb03 6307 	mla	r3, r3, r7, r6
   1fe46:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe48:	2301      	movs	r3, #1
   1fe4a:	6223      	str	r3, [r4, #32]
   1fe4c:	e7af      	b.n	1fdae <nrfx_twim_xfer+0x1d2>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1fe4e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fe50:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1fe52:	f018 0f20 	tst.w	r8, #32
   1fe56:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fe5a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1fe5e:	f04f 0334 	mov.w	r3, #52	; 0x34
   1fe62:	d00f      	beq.n	1fe84 <nrfx_twim_xfer+0x2a8>
    p_reg->SHORTS = mask;
   1fe64:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1fe68:	fb03 6307 	mla	r3, r3, r7, r6
   1fe6c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   1fe70:	4a2a      	ldr	r2, [pc, #168]	; (1ff1c <nrfx_twim_xfer+0x340>)
   1fe72:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe74:	2300      	movs	r3, #0
   1fe76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
   1fe7a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe7e:	2201      	movs	r2, #1
   1fe80:	6222      	str	r2, [r4, #32]
   1fe82:	e796      	b.n	1fdb2 <nrfx_twim_xfer+0x1d6>
    p_reg->SHORTS = mask;
   1fe84:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fe88:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1fe8c:	f240 2202 	movw	r2, #514	; 0x202
   1fe90:	fb03 6307 	mla	r3, r3, r7, r6
   1fe94:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1fe96:	f44f 7382 	mov.w	r3, #260	; 0x104
   1fe9a:	e7f0      	b.n	1fe7e <nrfx_twim_xfer+0x2a2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1fe9c:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fe9e:	68ea      	ldr	r2, [r5, #12]
   1fea0:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1fea4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1fea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1feac:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1feb0:	2334      	movs	r3, #52	; 0x34
   1feb2:	f240 2202 	movw	r2, #514	; 0x202
   1feb6:	fb03 6307 	mla	r3, r3, r7, r6
   1feba:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1febc:	2301      	movs	r3, #1
        start_task = NRF_TWIM_TASK_STARTRX;
   1febe:	2200      	movs	r2, #0
   1fec0:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1fec2:	f44f 7382 	mov.w	r3, #260	; 0x104
   1fec6:	e775      	b.n	1fdb4 <nrfx_twim_xfer+0x1d8>
   1fec8:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1fecc:	2208      	movs	r2, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
   1fece:	4818      	ldr	r0, [pc, #96]	; (1ff30 <nrfx_twim_xfer+0x354>)
   1fed0:	e771      	b.n	1fdb6 <nrfx_twim_xfer+0x1da>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1fed2:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
   1fed6:	bf1c      	itt	ne
   1fed8:	f44f 7300 	movne.w	r3, #512	; 0x200
   1fedc:	608b      	strne	r3, [r1, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1fede:	2334      	movs	r3, #52	; 0x34
   1fee0:	fb03 6607 	mla	r6, r3, r7, r6
   1fee4:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1fee6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1feea:	e6c1      	b.n	1fc70 <nrfx_twim_xfer+0x94>
   1feec:	000274ef 	.word	0x000274ef
   1fef0:	0002694b 	.word	0x0002694b
   1fef4:	00027493 	.word	0x00027493
   1fef8:	20021908 	.word	0x20021908
   1fefc:	0002759a 	.word	0x0002759a
   1ff00:	000275ea 	.word	0x000275ea
   1ff04:	0bad000a 	.word	0x0bad000a
   1ff08:	019c0202 	.word	0x019c0202
   1ff0c:	0bad000b 	.word	0x0bad000b
   1ff10:	0002763a 	.word	0x0002763a
   1ff14:	00027650 	.word	0x00027650
   1ff18:	00027666 	.word	0x00027666
   1ff1c:	00040200 	.word	0x00040200
   1ff20:	0bad0000 	.word	0x0bad0000
   1ff24:	0bad0001 	.word	0x0bad0001
   1ff28:	0bae0001 	.word	0x0bae0001
   1ff2c:	0bae0002 	.word	0x0bae0002
   1ff30:	0bad0004 	.word	0x0bad0004
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff34:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1ff38:	2d00      	cmp	r5, #0
   1ff3a:	f43f af4c 	beq.w	1fdd6 <nrfx_twim_xfer+0x1fa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff3e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1ff42:	f44f 7382 	mov.w	r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff46:	6221      	str	r1, [r4, #32]
   1ff48:	6161      	str	r1, [r4, #20]
   1ff4a:	e743      	b.n	1fdd4 <nrfx_twim_xfer+0x1f8>

0001ff4c <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   1ff4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   1ff4e:	4c4c      	ldr	r4, [pc, #304]	; (20080 <__kernel_ram_size+0x80>)
{
   1ff50:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   1ff52:	6823      	ldr	r3, [r4, #0]
   1ff54:	b95b      	cbnz	r3, 1ff6e <nrfx_twim_2_irq_handler+0x22>
   1ff56:	494b      	ldr	r1, [pc, #300]	; (20084 <__kernel_ram_size+0x84>)
   1ff58:	484b      	ldr	r0, [pc, #300]	; (20088 <__kernel_ram_size+0x88>)
   1ff5a:	f44f 730f 	mov.w	r3, #572	; 0x23c
   1ff5e:	4a4b      	ldr	r2, [pc, #300]	; (2008c <__kernel_ram_size+0x8c>)
   1ff60:	f003 ff8a 	bl	23e78 <printk>
   1ff64:	f44f 710f 	mov.w	r1, #572	; 0x23c
   1ff68:	4848      	ldr	r0, [pc, #288]	; (2008c <__kernel_ram_size+0x8c>)
   1ff6a:	f003 ff92 	bl	23e92 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff6e:	4b48      	ldr	r3, [pc, #288]	; (20090 <__kernel_ram_size+0x90>)
   1ff70:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1ff74:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1ff76:	b192      	cbz	r2, 1ff9e <nrfx_twim_2_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff78:	2200      	movs	r2, #0
   1ff7a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1ff82:	b962      	cbnz	r2, 1ff9e <nrfx_twim_2_irq_handler+0x52>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1ff84:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1ff86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1ff8a:	2202      	movs	r2, #2
   1ff8c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1ff8e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   1ff90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff94:	2201      	movs	r2, #1
   1ff96:	621a      	str	r2, [r3, #32]
   1ff98:	615a      	str	r2, [r3, #20]
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   1ff9a:	b007      	add	sp, #28
   1ff9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff9e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d03f      	beq.n	20026 <__kernel_ram_size+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffa6:	2300      	movs	r3, #0
        event.xfer_desc = p_cb->xfer_desc;
   1ffa8:	4f3a      	ldr	r7, [pc, #232]	; (20094 <__kernel_ram_size+0x94>)
   1ffaa:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1ffae:	ae01      	add	r6, sp, #4
   1ffb0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ffb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ffb4:	683b      	ldr	r3, [r7, #0]
        if (p_cb->error)
   1ffb6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        event.xfer_desc = p_cb->xfer_desc;
   1ffba:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
   1ffbc:	b179      	cbz	r1, 1ffde <nrfx_twim_2_irq_handler+0x92>
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   1ffbe:	7b23      	ldrb	r3, [r4, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   1ffc0:	2b01      	cmp	r3, #1
    return p_reg->RXD.AMOUNT;
   1ffc2:	bf0c      	ite	eq
   1ffc4:	f8d5 253c 	ldreq.w	r2, [r5, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   1ffc8:	f8d5 254c 	ldrne.w	r2, [r5, #1356]	; 0x54c
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   1ffcc:	2b02      	cmp	r3, #2
   1ffce:	4b30      	ldr	r3, [pc, #192]	; (20090 <__kernel_ram_size+0x90>)
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   1ffd0:	9202      	str	r2, [sp, #8]
    return p_reg->RXD.AMOUNT;
   1ffd2:	bf0c      	ite	eq
   1ffd4:	f8d3 353c 	ldreq.w	r3, [r3, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   1ffd8:	f8d3 354c 	ldrne.w	r3, [r3, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
   1ffdc:	9303      	str	r3, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffde:	2200      	movs	r2, #0
   1ffe0:	4b2b      	ldr	r3, [pc, #172]	; (20090 <__kernel_ram_size+0x90>)
        if (!p_cb->repeated || p_cb->error)
   1ffe2:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   1ffe6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   1ffea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   1ffee:	b100      	cbz	r0, 1fff2 <nrfx_twim_2_irq_handler+0xa6>
   1fff0:	b129      	cbz	r1, 1fffe <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   1fff2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            p_cb->int_mask = 0;
   1fff6:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1fff8:	4a27      	ldr	r2, [pc, #156]	; (20098 <__kernel_ram_size+0x98>)
   1fffa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
   1fffe:	4a24      	ldr	r2, [pc, #144]	; (20090 <__kernel_ram_size+0x90>)
   20000:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   20004:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   20008:	079a      	lsls	r2, r3, #30
   2000a:	d533      	bpl.n	20074 <__kernel_ram_size+0x74>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   2000c:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   2000e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   20012:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   20016:	b90b      	cbnz	r3, 2001c <__kernel_ram_size+0x1c>
        p_cb->busy = false;
   20018:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->handler(&event, p_cb->p_context);
   2001c:	e9d4 3100 	ldrd	r3, r1, [r4]
   20020:	4668      	mov	r0, sp
   20022:	4798      	blx	r3
   20024:	e7b9      	b.n	1ff9a <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20026:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   2002a:	7b23      	ldrb	r3, [r4, #12]
   2002c:	b983      	cbnz	r3, 20050 <__kernel_ram_size+0x50>
            event.xfer_desc = p_cb->xfer_desc;
   2002e:	4f19      	ldr	r7, [pc, #100]	; (20094 <__kernel_ram_size+0x94>)
   20030:	ae01      	add	r6, sp, #4
   20032:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20034:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20036:	683b      	ldr	r3, [r7, #0]
   20038:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   2003a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2003e:	2b00      	cmp	r3, #0
   20040:	d1dd      	bne.n	1fffe <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   20042:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   20046:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   20048:	4b13      	ldr	r3, [pc, #76]	; (20098 <__kernel_ram_size+0x98>)
   2004a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   2004e:	e7d6      	b.n	1fffe <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   20050:	f44f 7300 	mov.w	r3, #512	; 0x200
   20054:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   20058:	f240 2302 	movw	r3, #514	; 0x202
   2005c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2005e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   20062:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   20066:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   20068:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2006c:	2301      	movs	r3, #1
   2006e:	60ab      	str	r3, [r5, #8]
   20070:	622b      	str	r3, [r5, #32]
   20072:	e792      	b.n	1ff9a <nrfx_twim_2_irq_handler+0x4e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   20074:	f013 0304 	ands.w	r3, r3, #4
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   20078:	bf18      	it	ne
   2007a:	2302      	movne	r3, #2
   2007c:	e7c7      	b.n	2000e <__kernel_ram_size+0xe>
   2007e:	bf00      	nop
   20080:	20021908 	.word	0x20021908
   20084:	000272bc 	.word	0x000272bc
   20088:	0002694b 	.word	0x0002694b
   2008c:	00027493 	.word	0x00027493
   20090:	4000a000 	.word	0x4000a000
   20094:	20021914 	.word	0x20021914
   20098:	019c0202 	.word	0x019c0202

0002009c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   2009c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   2009e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   200a0:	4b08      	ldr	r3, [pc, #32]	; (200c4 <z_sys_device_do_config_level+0x28>)
   200a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   200a6:	3001      	adds	r0, #1
   200a8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   200ac:	42a5      	cmp	r5, r4
   200ae:	d800      	bhi.n	200b2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   200b0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   200b2:	6823      	ldr	r3, [r4, #0]
   200b4:	4620      	mov	r0, r4
   200b6:	685b      	ldr	r3, [r3, #4]
   200b8:	4798      	blx	r3
		if (retval != 0) {
   200ba:	b100      	cbz	r0, 200be <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   200bc:	6066      	str	r6, [r4, #4]
								info++) {
   200be:	340c      	adds	r4, #12
   200c0:	e7f4      	b.n	200ac <z_sys_device_do_config_level+0x10>
   200c2:	bf00      	nop
   200c4:	000267d4 	.word	0x000267d4

000200c8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   200c8:	4b10      	ldr	r3, [pc, #64]	; (2010c <z_impl_device_get_binding+0x44>)
{
   200ca:	b570      	push	{r4, r5, r6, lr}
   200cc:	4605      	mov	r5, r0
   200ce:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   200d0:	4c0f      	ldr	r4, [pc, #60]	; (20110 <z_impl_device_get_binding+0x48>)
   200d2:	429c      	cmp	r4, r3
   200d4:	d104      	bne.n	200e0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   200d6:	4c0e      	ldr	r4, [pc, #56]	; (20110 <z_impl_device_get_binding+0x48>)
   200d8:	42b4      	cmp	r4, r6
   200da:	d109      	bne.n	200f0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   200dc:	2400      	movs	r4, #0
   200de:	e012      	b.n	20106 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   200e0:	6862      	ldr	r2, [r4, #4]
   200e2:	b11a      	cbz	r2, 200ec <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   200e4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   200e6:	6812      	ldr	r2, [r2, #0]
   200e8:	42aa      	cmp	r2, r5
   200ea:	d00c      	beq.n	20106 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   200ec:	340c      	adds	r4, #12
   200ee:	e7f0      	b.n	200d2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   200f0:	6863      	ldr	r3, [r4, #4]
   200f2:	b90b      	cbnz	r3, 200f8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   200f4:	340c      	adds	r4, #12
   200f6:	e7ef      	b.n	200d8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   200f8:	6823      	ldr	r3, [r4, #0]
   200fa:	4628      	mov	r0, r5
   200fc:	6819      	ldr	r1, [r3, #0]
   200fe:	f004 f83f 	bl	24180 <strcmp>
   20102:	2800      	cmp	r0, #0
   20104:	d1f6      	bne.n	200f4 <z_impl_device_get_binding+0x2c>
}
   20106:	4620      	mov	r0, r4
   20108:	bd70      	pop	{r4, r5, r6, pc}
   2010a:	bf00      	nop
   2010c:	2002a414 	.word	0x2002a414
   20110:	2002a318 	.word	0x2002a318

00020114 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20114:	4b01      	ldr	r3, [pc, #4]	; (2011c <z_impl_z_errno+0x8>)
   20116:	6898      	ldr	r0, [r3, #8]
}
   20118:	3054      	adds	r0, #84	; 0x54
   2011a:	4770      	bx	lr
   2011c:	20025b0c 	.word	0x20025b0c

00020120 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20120:	b570      	push	{r4, r5, r6, lr}
   20122:	4604      	mov	r4, r0
   20124:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   20126:	f001 fff5 	bl	22114 <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2012a:	4631      	mov	r1, r6
   2012c:	4605      	mov	r5, r0
   2012e:	4620      	mov	r0, r4
   20130:	f004 ff65 	bl	24ffe <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20134:	2c04      	cmp	r4, #4
   20136:	d10c      	bne.n	20152 <z_fatal_error+0x32>
   20138:	4910      	ldr	r1, [pc, #64]	; (2017c <z_fatal_error+0x5c>)
   2013a:	2373      	movs	r3, #115	; 0x73
   2013c:	4a10      	ldr	r2, [pc, #64]	; (20180 <z_fatal_error+0x60>)
   2013e:	4811      	ldr	r0, [pc, #68]	; (20184 <z_fatal_error+0x64>)
   20140:	f003 fe9a 	bl	23e78 <printk>
   20144:	4810      	ldr	r0, [pc, #64]	; (20188 <z_fatal_error+0x68>)
   20146:	f003 fe97 	bl	23e78 <printk>
   2014a:	2173      	movs	r1, #115	; 0x73
   2014c:	480c      	ldr	r0, [pc, #48]	; (20180 <z_fatal_error+0x60>)
   2014e:	f003 fea0 	bl	23e92 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   20152:	f002 f903 	bl	2235c <k_is_in_isr>
   20156:	b160      	cbz	r0, 20172 <z_fatal_error+0x52>
   20158:	490c      	ldr	r1, [pc, #48]	; (2018c <z_fatal_error+0x6c>)
   2015a:	2376      	movs	r3, #118	; 0x76
   2015c:	4a08      	ldr	r2, [pc, #32]	; (20180 <z_fatal_error+0x60>)
   2015e:	4809      	ldr	r0, [pc, #36]	; (20184 <z_fatal_error+0x64>)
   20160:	f003 fe8a 	bl	23e78 <printk>
   20164:	480a      	ldr	r0, [pc, #40]	; (20190 <z_fatal_error+0x70>)
   20166:	f003 fe87 	bl	23e78 <printk>
   2016a:	2176      	movs	r1, #118	; 0x76
   2016c:	4804      	ldr	r0, [pc, #16]	; (20180 <z_fatal_error+0x60>)
   2016e:	f003 fe90 	bl	23e92 <assert_post_action>
	z_impl_k_thread_abort(thread);
   20172:	4628      	mov	r0, r5
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   20174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20178:	f7ed bf78 	b.w	e06c <z_impl_k_thread_abort>
   2017c:	0002769f 	.word	0x0002769f
   20180:	0002767c 	.word	0x0002767c
   20184:	0002694b 	.word	0x0002694b
   20188:	000276bc 	.word	0x000276bc
   2018c:	000276f1 	.word	0x000276f1
   20190:	00027700 	.word	0x00027700

00020194 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   20194:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   20196:	4d0b      	ldr	r5, [pc, #44]	; (201c4 <idle+0x30>)
	__asm__ volatile(
   20198:	f04f 0220 	mov.w	r2, #32
   2019c:	f3ef 8311 	mrs	r3, BASEPRI
   201a0:	f382 8811 	msr	BASEPRI, r2
   201a4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   201a8:	f002 fbb6 	bl	22918 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   201ac:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   201ae:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   201b0:	2802      	cmp	r0, #2
   201b2:	bfd8      	it	le
   201b4:	4608      	movle	r0, r1
   201b6:	f002 fbf5 	bl	229a4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   201ba:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   201bc:	f7ed fd22 	bl	dc04 <z_arch_cpu_idle>
   201c0:	e7ea      	b.n	20198 <idle+0x4>
   201c2:	bf00      	nop
   201c4:	20025b0c 	.word	0x20025b0c

000201c8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   201c8:	4802      	ldr	r0, [pc, #8]	; (201d4 <z_bss_zero+0xc>)
   201ca:	4a03      	ldr	r2, [pc, #12]	; (201d8 <z_bss_zero+0x10>)
   201cc:	2100      	movs	r1, #0
   201ce:	1a12      	subs	r2, r2, r0
   201d0:	f004 b82f 	b.w	24232 <memset>
   201d4:	20020000 	.word	0x20020000
   201d8:	20026da0 	.word	0x20026da0

000201dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   201dc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   201de:	4806      	ldr	r0, [pc, #24]	; (201f8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   201e0:	4a06      	ldr	r2, [pc, #24]	; (201fc <z_data_copy+0x20>)
   201e2:	4907      	ldr	r1, [pc, #28]	; (20200 <z_data_copy+0x24>)
   201e4:	1a12      	subs	r2, r2, r0
   201e6:	f003 fff7 	bl	241d8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   201ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   201ee:	4a05      	ldr	r2, [pc, #20]	; (20204 <z_data_copy+0x28>)
   201f0:	4905      	ldr	r1, [pc, #20]	; (20208 <z_data_copy+0x2c>)
   201f2:	4806      	ldr	r0, [pc, #24]	; (2020c <z_data_copy+0x30>)
   201f4:	f003 bff0 	b.w	241d8 <memcpy>
   201f8:	2002a224 	.word	0x2002a224
   201fc:	2002a4fc 	.word	0x2002a4fc
   20200:	00027e40 	.word	0x00027e40
   20204:	00000000 	.word	0x00000000
   20208:	00027e40 	.word	0x00027e40
   2020c:	20020000 	.word	0x20020000

00020210 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20210:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20212:	2002      	movs	r0, #2
   20214:	f7ff ff42 	bl	2009c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   20218:	4807      	ldr	r0, [pc, #28]	; (20238 <bg_thread_main+0x28>)
   2021a:	f003 fe2d 	bl	23e78 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2021e:	2003      	movs	r0, #3
   20220:	f7ff ff3c 	bl	2009c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   20224:	f002 f99c 	bl	22560 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   20228:	f7ed f8ca 	bl	d3c0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2022c:	4a03      	ldr	r2, [pc, #12]	; (2023c <bg_thread_main+0x2c>)
   2022e:	7b13      	ldrb	r3, [r2, #12]
   20230:	f023 0301 	bic.w	r3, r3, #1
   20234:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20236:	bd08      	pop	{r3, pc}
   20238:	00027731 	.word	0x00027731
   2023c:	200219ec 	.word	0x200219ec

00020240 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   20240:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   20242:	4b34      	ldr	r3, [pc, #208]	; (20314 <z_cstart+0xd4>)
   20244:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20246:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2024a:	2400      	movs	r4, #0
   2024c:	23e0      	movs	r3, #224	; 0xe0
   2024e:	4d32      	ldr	r5, [pc, #200]	; (20318 <z_cstart+0xd8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   20250:	2701      	movs	r7, #1
   20252:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20256:	77ec      	strb	r4, [r5, #31]
   20258:	762c      	strb	r4, [r5, #24]
   2025a:	766c      	strb	r4, [r5, #25]
   2025c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2025e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   20260:	4e2e      	ldr	r6, [pc, #184]	; (2031c <z_cstart+0xdc>)
   20262:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20266:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20268:	f7ed feec 	bl	e044 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2026c:	f7ed fcc4 	bl	dbf8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20270:	f04f 33ff 	mov.w	r3, #4294967295
   20274:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20276:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   20278:	ab06      	add	r3, sp, #24
   2027a:	22b0      	movs	r2, #176	; 0xb0
   2027c:	4621      	mov	r1, r4
   2027e:	4618      	mov	r0, r3
   20280:	f003 ffd7 	bl	24232 <memset>
	_current = &dummy_thread;
   20284:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20286:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   20288:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2028c:	f7ff ff06 	bl	2009c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20290:	4638      	mov	r0, r7
   20292:	f7ff ff03 	bl	2009c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   20296:	4d22      	ldr	r5, [pc, #136]	; (20320 <z_cstart+0xe0>)
	z_sched_init();
   20298:	f001 fddc 	bl	21e54 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2029c:	4b21      	ldr	r3, [pc, #132]	; (20324 <z_cstart+0xe4>)
   2029e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   202a2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   202a6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   202aa:	4b1f      	ldr	r3, [pc, #124]	; (20328 <z_cstart+0xe8>)
   202ac:	e9cd 4400 	strd	r4, r4, [sp]
   202b0:	491e      	ldr	r1, [pc, #120]	; (2032c <z_cstart+0xec>)
   202b2:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   202b4:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   202b6:	f002 f861 	bl	2237c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202ba:	7b6b      	ldrb	r3, [r5, #13]
   202bc:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   202c0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202c4:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   202c6:	d104      	bne.n	202d2 <z_cstart+0x92>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   202c8:	69ab      	ldr	r3, [r5, #24]
   202ca:	b913      	cbnz	r3, 202d2 <z_cstart+0x92>
		z_add_thread_to_ready_q(thread);
   202cc:	4628      	mov	r0, r5
   202ce:	f001 f9c5 	bl	2165c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   202d2:	4b17      	ldr	r3, [pc, #92]	; (20330 <z_cstart+0xf0>)
   202d4:	2201      	movs	r2, #1
   202d6:	9305      	str	r3, [sp, #20]
   202d8:	230f      	movs	r3, #15
   202da:	e9cd 3203 	strd	r3, r2, [sp, #12]
   202de:	2300      	movs	r3, #0
   202e0:	4d14      	ldr	r5, [pc, #80]	; (20334 <z_cstart+0xf4>)
   202e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   202e6:	9300      	str	r3, [sp, #0]
   202e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   202ec:	4b12      	ldr	r3, [pc, #72]	; (20338 <z_cstart+0xf8>)
   202ee:	4913      	ldr	r1, [pc, #76]	; (2033c <z_cstart+0xfc>)
   202f0:	4628      	mov	r0, r5
   202f2:	f002 f843 	bl	2237c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202f6:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   202f8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   202fc:	f023 0304 	bic.w	r3, r3, #4
   20300:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   20302:	4b0f      	ldr	r3, [pc, #60]	; (20340 <z_cstart+0x100>)
   20304:	4909      	ldr	r1, [pc, #36]	; (2032c <z_cstart+0xec>)
	list->tail = (sys_dnode_t *)list;
   20306:	e9c6 3306 	strd	r3, r3, [r6, #24]
   2030a:	4805      	ldr	r0, [pc, #20]	; (20320 <z_cstart+0xe0>)
   2030c:	4b06      	ldr	r3, [pc, #24]	; (20328 <z_cstart+0xe8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   2030e:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   20310:	f7ed fd70 	bl	ddf4 <z_arch_switch_to_main_thread>
   20314:	200288e0 	.word	0x200288e0
   20318:	e000ed00 	.word	0xe000ed00
   2031c:	20025b0c 	.word	0x20025b0c
   20320:	200219ec 	.word	0x200219ec
   20324:	00027763 	.word	0x00027763
   20328:	00020211 	.word	0x00020211
   2032c:	200273a0 	.word	0x200273a0
   20330:	00027768 	.word	0x00027768
   20334:	2002193c 	.word	0x2002193c
   20338:	00020195 	.word	0x00020195
   2033c:	20027fa0 	.word	0x20027fa0
   20340:	20025b24 	.word	0x20025b24

00020344 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   20344:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   20348:	4313      	orrs	r3, r2
   2034a:	079b      	lsls	r3, r3, #30
{
   2034c:	b510      	push	{r4, lr}
   2034e:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   20350:	d00d      	beq.n	2036e <create_free_list+0x2a>
   20352:	2327      	movs	r3, #39	; 0x27
   20354:	4a0d      	ldr	r2, [pc, #52]	; (2038c <create_free_list+0x48>)
   20356:	490e      	ldr	r1, [pc, #56]	; (20390 <create_free_list+0x4c>)
   20358:	480e      	ldr	r0, [pc, #56]	; (20394 <create_free_list+0x50>)
   2035a:	f003 fd8d 	bl	23e78 <printk>
   2035e:	4621      	mov	r1, r4
   20360:	480d      	ldr	r0, [pc, #52]	; (20398 <create_free_list+0x54>)
   20362:	f003 fd89 	bl	23e78 <printk>
   20366:	2127      	movs	r1, #39	; 0x27
   20368:	4808      	ldr	r0, [pc, #32]	; (2038c <create_free_list+0x48>)
   2036a:	f003 fd92 	bl	23e92 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   2036e:	2300      	movs	r3, #0
	p = slab->buffer;
   20370:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   20372:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   20374:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20376:	4299      	cmp	r1, r3
   20378:	d100      	bne.n	2037c <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   2037a:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   2037c:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2037e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   20380:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   20382:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   20384:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   20386:	4402      	add	r2, r0
   20388:	e7f5      	b.n	20376 <create_free_list+0x32>
   2038a:	bf00      	nop
   2038c:	0002776d 	.word	0x0002776d
   20390:	00027793 	.word	0x00027793
   20394:	0002694b 	.word	0x0002694b
   20398:	000277de 	.word	0x000277de

0002039c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2039e:	4d0e      	ldr	r5, [pc, #56]	; (203d8 <init_mem_slab_module+0x3c>)
   203a0:	4c0e      	ldr	r4, [pc, #56]	; (203dc <init_mem_slab_module+0x40>)
   203a2:	462f      	mov	r7, r5
   203a4:	4e0e      	ldr	r6, [pc, #56]	; (203e0 <init_mem_slab_module+0x44>)
   203a6:	42ac      	cmp	r4, r5
   203a8:	d90c      	bls.n	203c4 <init_mem_slab_module+0x28>
   203aa:	490e      	ldr	r1, [pc, #56]	; (203e4 <init_mem_slab_module+0x48>)
   203ac:	233e      	movs	r3, #62	; 0x3e
   203ae:	4632      	mov	r2, r6
   203b0:	480d      	ldr	r0, [pc, #52]	; (203e8 <init_mem_slab_module+0x4c>)
   203b2:	f003 fd61 	bl	23e78 <printk>
   203b6:	480d      	ldr	r0, [pc, #52]	; (203ec <init_mem_slab_module+0x50>)
   203b8:	f003 fd5e 	bl	23e78 <printk>
   203bc:	213e      	movs	r1, #62	; 0x3e
   203be:	4630      	mov	r0, r6
   203c0:	f003 fd67 	bl	23e92 <assert_post_action>
   203c4:	42bc      	cmp	r4, r7
   203c6:	d301      	bcc.n	203cc <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   203c8:	2000      	movs	r0, #0
   203ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   203cc:	4620      	mov	r0, r4
   203ce:	f7ff ffb9 	bl	20344 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   203d2:	341c      	adds	r4, #28
   203d4:	e7e7      	b.n	203a6 <init_mem_slab_module+0xa>
   203d6:	bf00      	nop
   203d8:	2002a430 	.word	0x2002a430
   203dc:	2002a414 	.word	0x2002a414
   203e0:	0002776d 	.word	0x0002776d
   203e4:	000277fc 	.word	0x000277fc
   203e8:	0002694b 	.word	0x0002694b
   203ec:	00027819 	.word	0x00027819

000203f0 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   203f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203f2:	4604      	mov	r4, r0
   203f4:	460d      	mov	r5, r1
   203f6:	4616      	mov	r6, r2
   203f8:	f04f 0320 	mov.w	r3, #32
   203fc:	f3ef 8711 	mrs	r7, BASEPRI
   20400:	f383 8811 	msr	BASEPRI, r3
   20404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20408:	4823      	ldr	r0, [pc, #140]	; (20498 <k_mem_slab_alloc+0xa8>)
   2040a:	f001 ffd1 	bl	223b0 <z_spin_lock_valid>
   2040e:	b960      	cbnz	r0, 2042a <k_mem_slab_alloc+0x3a>
   20410:	4922      	ldr	r1, [pc, #136]	; (2049c <k_mem_slab_alloc+0xac>)
   20412:	235f      	movs	r3, #95	; 0x5f
   20414:	4a22      	ldr	r2, [pc, #136]	; (204a0 <k_mem_slab_alloc+0xb0>)
   20416:	4823      	ldr	r0, [pc, #140]	; (204a4 <k_mem_slab_alloc+0xb4>)
   20418:	f003 fd2e 	bl	23e78 <printk>
   2041c:	4822      	ldr	r0, [pc, #136]	; (204a8 <k_mem_slab_alloc+0xb8>)
   2041e:	f003 fd2b 	bl	23e78 <printk>
   20422:	215f      	movs	r1, #95	; 0x5f
   20424:	481e      	ldr	r0, [pc, #120]	; (204a0 <k_mem_slab_alloc+0xb0>)
   20426:	f003 fd34 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2042a:	481b      	ldr	r0, [pc, #108]	; (20498 <k_mem_slab_alloc+0xa8>)
   2042c:	f001 ffde 	bl	223ec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   20430:	6963      	ldr	r3, [r4, #20]
   20432:	b1eb      	cbz	r3, 20470 <k_mem_slab_alloc+0x80>
		/* take a free block */
		*mem = slab->free_list;
   20434:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   20436:	6963      	ldr	r3, [r4, #20]
   20438:	681b      	ldr	r3, [r3, #0]
   2043a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   2043c:	69a3      	ldr	r3, [r4, #24]
   2043e:	3301      	adds	r3, #1
   20440:	61a3      	str	r3, [r4, #24]
		result = 0;
   20442:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20444:	4814      	ldr	r0, [pc, #80]	; (20498 <k_mem_slab_alloc+0xa8>)
   20446:	f001 ffc1 	bl	223cc <z_spin_unlock_valid>
   2044a:	b960      	cbnz	r0, 20466 <k_mem_slab_alloc+0x76>
   2044c:	4917      	ldr	r1, [pc, #92]	; (204ac <k_mem_slab_alloc+0xbc>)
   2044e:	2372      	movs	r3, #114	; 0x72
   20450:	4a13      	ldr	r2, [pc, #76]	; (204a0 <k_mem_slab_alloc+0xb0>)
   20452:	4814      	ldr	r0, [pc, #80]	; (204a4 <k_mem_slab_alloc+0xb4>)
   20454:	f003 fd10 	bl	23e78 <printk>
   20458:	4815      	ldr	r0, [pc, #84]	; (204b0 <k_mem_slab_alloc+0xc0>)
   2045a:	f003 fd0d 	bl	23e78 <printk>
   2045e:	2172      	movs	r1, #114	; 0x72
   20460:	480f      	ldr	r0, [pc, #60]	; (204a0 <k_mem_slab_alloc+0xb0>)
   20462:	f003 fd16 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20466:	f387 8811 	msr	BASEPRI, r7
   2046a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2046e:	e010      	b.n	20492 <k_mem_slab_alloc+0xa2>
	} else if (timeout == K_NO_WAIT) {
   20470:	b91e      	cbnz	r6, 2047a <k_mem_slab_alloc+0x8a>
		*mem = NULL;
   20472:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   20474:	f06f 040b 	mvn.w	r4, #11
   20478:	e7e4      	b.n	20444 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2047a:	4622      	mov	r2, r4
   2047c:	4633      	mov	r3, r6
   2047e:	4639      	mov	r1, r7
   20480:	4805      	ldr	r0, [pc, #20]	; (20498 <k_mem_slab_alloc+0xa8>)
   20482:	f001 fb9f 	bl	21bc4 <z_pend_curr>
		if (result == 0) {
   20486:	4604      	mov	r4, r0
   20488:	b918      	cbnz	r0, 20492 <k_mem_slab_alloc+0xa2>
			*mem = _current->base.swap_data;
   2048a:	4b0a      	ldr	r3, [pc, #40]	; (204b4 <k_mem_slab_alloc+0xc4>)
   2048c:	689b      	ldr	r3, [r3, #8]
   2048e:	695b      	ldr	r3, [r3, #20]
   20490:	602b      	str	r3, [r5, #0]
}
   20492:	4620      	mov	r0, r4
   20494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20496:	bf00      	nop
   20498:	20021a9c 	.word	0x20021a9c
   2049c:	00026ae6 	.word	0x00026ae6
   204a0:	00026abf 	.word	0x00026abf
   204a4:	0002694b 	.word	0x0002694b
   204a8:	00026afb 	.word	0x00026afb
   204ac:	00026b10 	.word	0x00026b10
   204b0:	00026b27 	.word	0x00026b27
   204b4:	20025b0c 	.word	0x20025b0c

000204b8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   204b8:	b570      	push	{r4, r5, r6, lr}
   204ba:	4604      	mov	r4, r0
   204bc:	460d      	mov	r5, r1
	__asm__ volatile(
   204be:	f04f 0320 	mov.w	r3, #32
   204c2:	f3ef 8611 	mrs	r6, BASEPRI
   204c6:	f383 8811 	msr	BASEPRI, r3
   204ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   204ce:	4823      	ldr	r0, [pc, #140]	; (2055c <k_mem_slab_free+0xa4>)
   204d0:	f001 ff6e 	bl	223b0 <z_spin_lock_valid>
   204d4:	b960      	cbnz	r0, 204f0 <k_mem_slab_free+0x38>
   204d6:	4922      	ldr	r1, [pc, #136]	; (20560 <k_mem_slab_free+0xa8>)
   204d8:	235f      	movs	r3, #95	; 0x5f
   204da:	4a22      	ldr	r2, [pc, #136]	; (20564 <k_mem_slab_free+0xac>)
   204dc:	4822      	ldr	r0, [pc, #136]	; (20568 <k_mem_slab_free+0xb0>)
   204de:	f003 fccb 	bl	23e78 <printk>
   204e2:	4822      	ldr	r0, [pc, #136]	; (2056c <k_mem_slab_free+0xb4>)
   204e4:	f003 fcc8 	bl	23e78 <printk>
   204e8:	215f      	movs	r1, #95	; 0x5f
   204ea:	481e      	ldr	r0, [pc, #120]	; (20564 <k_mem_slab_free+0xac>)
   204ec:	f003 fcd1 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   204f0:	481a      	ldr	r0, [pc, #104]	; (2055c <k_mem_slab_free+0xa4>)
   204f2:	f001 ff7b 	bl	223ec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   204f6:	4620      	mov	r0, r4
   204f8:	f001 fc20 	bl	21d3c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   204fc:	b180      	cbz	r0, 20520 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   204fe:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20500:	682a      	ldr	r2, [r5, #0]
   20502:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   20504:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20506:	7b42      	ldrb	r2, [r0, #13]
   20508:	06d2      	lsls	r2, r2, #27
   2050a:	d103      	bne.n	20514 <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   2050c:	6983      	ldr	r3, [r0, #24]
   2050e:	b90b      	cbnz	r3, 20514 <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   20510:	f001 f8a4 	bl	2165c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   20514:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   20516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2051a:	4810      	ldr	r0, [pc, #64]	; (2055c <k_mem_slab_free+0xa4>)
   2051c:	f000 bea8 	b.w	21270 <z_reschedule>
		**(char ***)mem = slab->free_list;
   20520:	682b      	ldr	r3, [r5, #0]
   20522:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20524:	480d      	ldr	r0, [pc, #52]	; (2055c <k_mem_slab_free+0xa4>)
   20526:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   20528:	682b      	ldr	r3, [r5, #0]
   2052a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2052c:	69a3      	ldr	r3, [r4, #24]
   2052e:	3b01      	subs	r3, #1
   20530:	61a3      	str	r3, [r4, #24]
   20532:	f001 ff4b 	bl	223cc <z_spin_unlock_valid>
   20536:	b960      	cbnz	r0, 20552 <k_mem_slab_free+0x9a>
   20538:	490d      	ldr	r1, [pc, #52]	; (20570 <k_mem_slab_free+0xb8>)
   2053a:	2372      	movs	r3, #114	; 0x72
   2053c:	4a09      	ldr	r2, [pc, #36]	; (20564 <k_mem_slab_free+0xac>)
   2053e:	480a      	ldr	r0, [pc, #40]	; (20568 <k_mem_slab_free+0xb0>)
   20540:	f003 fc9a 	bl	23e78 <printk>
   20544:	480b      	ldr	r0, [pc, #44]	; (20574 <k_mem_slab_free+0xbc>)
   20546:	f003 fc97 	bl	23e78 <printk>
   2054a:	2172      	movs	r1, #114	; 0x72
   2054c:	4805      	ldr	r0, [pc, #20]	; (20564 <k_mem_slab_free+0xac>)
   2054e:	f003 fca0 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20552:	f386 8811 	msr	BASEPRI, r6
   20556:	f3bf 8f6f 	isb	sy
}
   2055a:	bd70      	pop	{r4, r5, r6, pc}
   2055c:	20021a9c 	.word	0x20021a9c
   20560:	00026ae6 	.word	0x00026ae6
   20564:	00026abf 	.word	0x00026abf
   20568:	0002694b 	.word	0x0002694b
   2056c:	00026afb 	.word	0x00026afb
   20570:	00026b10 	.word	0x00026b10
   20574:	00026b27 	.word	0x00026b27

00020578 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   20578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2057a:	4d10      	ldr	r5, [pc, #64]	; (205bc <init_static_pools+0x44>)
   2057c:	4c10      	ldr	r4, [pc, #64]	; (205c0 <init_static_pools+0x48>)
   2057e:	462f      	mov	r7, r5
   20580:	4e10      	ldr	r6, [pc, #64]	; (205c4 <init_static_pools+0x4c>)
   20582:	42ac      	cmp	r4, r5
   20584:	d90c      	bls.n	205a0 <init_static_pools+0x28>
   20586:	4910      	ldr	r1, [pc, #64]	; (205c8 <init_static_pools+0x50>)
   20588:	2328      	movs	r3, #40	; 0x28
   2058a:	4632      	mov	r2, r6
   2058c:	480f      	ldr	r0, [pc, #60]	; (205cc <init_static_pools+0x54>)
   2058e:	f003 fc73 	bl	23e78 <printk>
   20592:	480f      	ldr	r0, [pc, #60]	; (205d0 <init_static_pools+0x58>)
   20594:	f003 fc70 	bl	23e78 <printk>
   20598:	2128      	movs	r1, #40	; 0x28
   2059a:	4630      	mov	r0, r6
   2059c:	f003 fc79 	bl	23e92 <assert_post_action>
   205a0:	42bc      	cmp	r4, r7
   205a2:	d301      	bcc.n	205a8 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   205a4:	2000      	movs	r0, #0
   205a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205a8:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   205ac:	4620      	mov	r0, r4
   205ae:	e9c4 3305 	strd	r3, r3, [r4, #20]
   205b2:	f003 f9b2 	bl	2391a <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   205b6:	341c      	adds	r4, #28
   205b8:	e7e3      	b.n	20582 <init_static_pools+0xa>
   205ba:	bf00      	nop
   205bc:	2002a44c 	.word	0x2002a44c
   205c0:	2002a430 	.word	0x2002a430
   205c4:	00027838 	.word	0x00027838
   205c8:	0002785d 	.word	0x0002785d
   205cc:	0002694b 	.word	0x0002694b
   205d0:	00027819 	.word	0x00027819

000205d4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   205d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205d8:	4607      	mov	r7, r0
   205da:	b085      	sub	sp, #20
   205dc:	460d      	mov	r5, r1
   205de:	4692      	mov	sl, r2
   205e0:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   205e2:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   205e6:	2b0d      	cmp	r3, #13
   205e8:	d805      	bhi.n	205f6 <k_mem_pool_alloc+0x22>
   205ea:	2b00      	cmp	r3, #0
   205ec:	d04c      	beq.n	20688 <k_mem_pool_alloc+0xb4>
   205ee:	4b2a      	ldr	r3, [pc, #168]	; (20698 <k_mem_pool_alloc+0xc4>)
   205f0:	685b      	ldr	r3, [r3, #4]
   205f2:	051a      	lsls	r2, r3, #20
   205f4:	d448      	bmi.n	20688 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   205f6:	2c00      	cmp	r4, #0
   205f8:	d139      	bne.n	2066e <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   205fa:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   205fe:	4b27      	ldr	r3, [pc, #156]	; (2069c <k_mem_pool_alloc+0xc8>)
   20600:	4e27      	ldr	r6, [pc, #156]	; (206a0 <k_mem_pool_alloc+0xcc>)
   20602:	1afb      	subs	r3, r7, r3
   20604:	109b      	asrs	r3, r3, #2
   20606:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   20608:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2060c:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2060e:	ab03      	add	r3, sp, #12
   20610:	aa02      	add	r2, sp, #8
   20612:	9500      	str	r5, [sp, #0]
   20614:	4651      	mov	r1, sl
   20616:	4638      	mov	r0, r7
   20618:	f003 f9cb 	bl	239b2 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   2061c:	796b      	ldrb	r3, [r5, #5]
   2061e:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   20620:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   20622:	f362 0303 	bfi	r3, r2, #0, #4
   20626:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   20628:	686b      	ldr	r3, [r5, #4]
   2062a:	9a03      	ldr	r2, [sp, #12]
   2062c:	f362 331f 	bfi	r3, r2, #12, #20
   20630:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   20632:	b1c8      	cbz	r0, 20668 <k_mem_pool_alloc+0x94>
   20634:	b1c4      	cbz	r4, 20668 <k_mem_pool_alloc+0x94>
   20636:	f110 0f0c 	cmn.w	r0, #12
   2063a:	d115      	bne.n	20668 <k_mem_pool_alloc+0x94>
	__asm__ volatile(
   2063c:	f04f 0320 	mov.w	r3, #32
   20640:	f3ef 8011 	mrs	r0, BASEPRI
   20644:	f383 8811 	msr	BASEPRI, r3
   20648:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   2064c:	4622      	mov	r2, r4
   2064e:	4659      	mov	r1, fp
   20650:	f001 fa60 	bl	21b14 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   20654:	1c63      	adds	r3, r4, #1
   20656:	d0da      	beq.n	2060e <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   20658:	f004 fda3 	bl	251a2 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   2065c:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   20660:	2c00      	cmp	r4, #0
   20662:	dcd4      	bgt.n	2060e <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   20664:	f06f 000a 	mvn.w	r0, #10
}
   20668:	b005      	add	sp, #20
   2066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2066e:	490d      	ldr	r1, [pc, #52]	; (206a4 <k_mem_pool_alloc+0xd0>)
   20670:	2337      	movs	r3, #55	; 0x37
   20672:	4a0d      	ldr	r2, [pc, #52]	; (206a8 <k_mem_pool_alloc+0xd4>)
   20674:	480d      	ldr	r0, [pc, #52]	; (206ac <k_mem_pool_alloc+0xd8>)
   20676:	f003 fbff 	bl	23e78 <printk>
   2067a:	480d      	ldr	r0, [pc, #52]	; (206b0 <k_mem_pool_alloc+0xdc>)
   2067c:	f003 fbfc 	bl	23e78 <printk>
   20680:	2137      	movs	r1, #55	; 0x37
   20682:	4809      	ldr	r0, [pc, #36]	; (206a8 <k_mem_pool_alloc+0xd4>)
   20684:	f003 fc05 	bl	23e92 <assert_post_action>
	if (timeout > 0) {
   20688:	2c00      	cmp	r4, #0
   2068a:	ddb6      	ble.n	205fa <k_mem_pool_alloc+0x26>
   2068c:	f004 fd89 	bl	251a2 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   20690:	eb10 0804 	adds.w	r8, r0, r4
   20694:	e7b3      	b.n	205fe <k_mem_pool_alloc+0x2a>
   20696:	bf00      	nop
   20698:	e000ed00 	.word	0xe000ed00
   2069c:	2002a430 	.word	0x2002a430
   206a0:	b6db6db7 	.word	0xb6db6db7
   206a4:	00027877 	.word	0x00027877
   206a8:	00027838 	.word	0x00027838
   206ac:	0002694b 	.word	0x0002694b
   206b0:	0002789d 	.word	0x0002789d

000206b4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   206b4:	b570      	push	{r4, r5, r6, lr}
   206b6:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   206b8:	6802      	ldr	r2, [r0, #0]
   206ba:	7841      	ldrb	r1, [r0, #1]
   206bc:	4d23      	ldr	r5, [pc, #140]	; (2074c <k_mem_pool_free_id+0x98>)
   206be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   206c2:	00a4      	lsls	r4, r4, #2
   206c4:	0b12      	lsrs	r2, r2, #12
   206c6:	f001 010f 	and.w	r1, r1, #15
   206ca:	1928      	adds	r0, r5, r4
   206cc:	f7ec fe7e 	bl	d3cc <z_sys_mem_pool_block_free>
   206d0:	f04f 0320 	mov.w	r3, #32
   206d4:	f3ef 8611 	mrs	r6, BASEPRI
   206d8:	f383 8811 	msr	BASEPRI, r3
   206dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   206e0:	481b      	ldr	r0, [pc, #108]	; (20750 <k_mem_pool_free_id+0x9c>)
   206e2:	f001 fe65 	bl	223b0 <z_spin_lock_valid>
   206e6:	b960      	cbnz	r0, 20702 <k_mem_pool_free_id+0x4e>
   206e8:	491a      	ldr	r1, [pc, #104]	; (20754 <k_mem_pool_free_id+0xa0>)
   206ea:	235f      	movs	r3, #95	; 0x5f
   206ec:	4a1a      	ldr	r2, [pc, #104]	; (20758 <k_mem_pool_free_id+0xa4>)
   206ee:	481b      	ldr	r0, [pc, #108]	; (2075c <k_mem_pool_free_id+0xa8>)
   206f0:	f003 fbc2 	bl	23e78 <printk>
   206f4:	481a      	ldr	r0, [pc, #104]	; (20760 <k_mem_pool_free_id+0xac>)
   206f6:	f003 fbbf 	bl	23e78 <printk>
   206fa:	215f      	movs	r1, #95	; 0x5f
   206fc:	4816      	ldr	r0, [pc, #88]	; (20758 <k_mem_pool_free_id+0xa4>)
   206fe:	f003 fbc8 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20702:	4813      	ldr	r0, [pc, #76]	; (20750 <k_mem_pool_free_id+0x9c>)
   20704:	f001 fe72 	bl	223ec <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   20708:	f104 0014 	add.w	r0, r4, #20
   2070c:	4428      	add	r0, r5
   2070e:	f004 fce0 	bl	250d2 <z_unpend_all>

	if (need_sched != 0) {
   20712:	b128      	cbz	r0, 20720 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   20714:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   20716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2071a:	480d      	ldr	r0, [pc, #52]	; (20750 <k_mem_pool_free_id+0x9c>)
   2071c:	f000 bda8 	b.w	21270 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20720:	480b      	ldr	r0, [pc, #44]	; (20750 <k_mem_pool_free_id+0x9c>)
   20722:	f001 fe53 	bl	223cc <z_spin_unlock_valid>
   20726:	b960      	cbnz	r0, 20742 <k_mem_pool_free_id+0x8e>
   20728:	490e      	ldr	r1, [pc, #56]	; (20764 <k_mem_pool_free_id+0xb0>)
   2072a:	2372      	movs	r3, #114	; 0x72
   2072c:	4a0a      	ldr	r2, [pc, #40]	; (20758 <k_mem_pool_free_id+0xa4>)
   2072e:	480b      	ldr	r0, [pc, #44]	; (2075c <k_mem_pool_free_id+0xa8>)
   20730:	f003 fba2 	bl	23e78 <printk>
   20734:	480c      	ldr	r0, [pc, #48]	; (20768 <k_mem_pool_free_id+0xb4>)
   20736:	f003 fb9f 	bl	23e78 <printk>
   2073a:	2172      	movs	r1, #114	; 0x72
   2073c:	4806      	ldr	r0, [pc, #24]	; (20758 <k_mem_pool_free_id+0xa4>)
   2073e:	f003 fba8 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20742:	f386 8811 	msr	BASEPRI, r6
   20746:	f3bf 8f6f 	isb	sy
}
   2074a:	bd70      	pop	{r4, r5, r6, pc}
   2074c:	2002a430 	.word	0x2002a430
   20750:	20025b04 	.word	0x20025b04
   20754:	00026ae6 	.word	0x00026ae6
   20758:	00026abf 	.word	0x00026abf
   2075c:	0002694b 	.word	0x0002694b
   20760:	00026afb 	.word	0x00026afb
   20764:	00026b10 	.word	0x00026b10
   20768:	00026b27 	.word	0x00026b27

0002076c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2076c:	4601      	mov	r1, r0
   2076e:	4801      	ldr	r0, [pc, #4]	; (20774 <k_malloc+0x8>)
   20770:	f004 bc4a 	b.w	25008 <k_mem_pool_malloc>
   20774:	2002a430 	.word	0x2002a430

00020778 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   20778:	4b03      	ldr	r3, [pc, #12]	; (20788 <z_thread_malloc+0x10>)
{
   2077a:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2077c:	689b      	ldr	r3, [r3, #8]
   2077e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   20780:	b108      	cbz	r0, 20786 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   20782:	f004 bc41 	b.w	25008 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   20786:	4770      	bx	lr
   20788:	20025b0c 	.word	0x20025b0c

0002078c <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20790:	4604      	mov	r4, r0
   20792:	4688      	mov	r8, r1
   20794:	4615      	mov	r5, r2
   20796:	f3ef 8305 	mrs	r3, IPSR
   2079a:	2b0d      	cmp	r3, #13
   2079c:	d804      	bhi.n	207a8 <z_impl_k_msgq_put+0x1c>
   2079e:	b18b      	cbz	r3, 207c4 <z_impl_k_msgq_put+0x38>
   207a0:	4b42      	ldr	r3, [pc, #264]	; (208ac <z_impl_k_msgq_put+0x120>)
   207a2:	685b      	ldr	r3, [r3, #4]
   207a4:	051a      	lsls	r2, r3, #20
   207a6:	d40d      	bmi.n	207c4 <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   207a8:	b165      	cbz	r5, 207c4 <z_impl_k_msgq_put+0x38>
   207aa:	4941      	ldr	r1, [pc, #260]	; (208b0 <z_impl_k_msgq_put+0x124>)
   207ac:	2371      	movs	r3, #113	; 0x71
   207ae:	4a41      	ldr	r2, [pc, #260]	; (208b4 <z_impl_k_msgq_put+0x128>)
   207b0:	4841      	ldr	r0, [pc, #260]	; (208b8 <z_impl_k_msgq_put+0x12c>)
   207b2:	f003 fb61 	bl	23e78 <printk>
   207b6:	4841      	ldr	r0, [pc, #260]	; (208bc <z_impl_k_msgq_put+0x130>)
   207b8:	f003 fb5e 	bl	23e78 <printk>
   207bc:	2171      	movs	r1, #113	; 0x71
   207be:	483d      	ldr	r0, [pc, #244]	; (208b4 <z_impl_k_msgq_put+0x128>)
   207c0:	f003 fb67 	bl	23e92 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   207c4:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   207c8:	f04f 0320 	mov.w	r3, #32
   207cc:	f3ef 8711 	mrs	r7, BASEPRI
   207d0:	f383 8811 	msr	BASEPRI, r3
   207d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   207d8:	4630      	mov	r0, r6
   207da:	f001 fde9 	bl	223b0 <z_spin_lock_valid>
   207de:	b960      	cbnz	r0, 207fa <z_impl_k_msgq_put+0x6e>
   207e0:	4937      	ldr	r1, [pc, #220]	; (208c0 <z_impl_k_msgq_put+0x134>)
   207e2:	235f      	movs	r3, #95	; 0x5f
   207e4:	4a37      	ldr	r2, [pc, #220]	; (208c4 <z_impl_k_msgq_put+0x138>)
   207e6:	4834      	ldr	r0, [pc, #208]	; (208b8 <z_impl_k_msgq_put+0x12c>)
   207e8:	f003 fb46 	bl	23e78 <printk>
   207ec:	4836      	ldr	r0, [pc, #216]	; (208c8 <z_impl_k_msgq_put+0x13c>)
   207ee:	f003 fb43 	bl	23e78 <printk>
   207f2:	215f      	movs	r1, #95	; 0x5f
   207f4:	4833      	ldr	r0, [pc, #204]	; (208c4 <z_impl_k_msgq_put+0x138>)
   207f6:	f003 fb4c 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   207fa:	4630      	mov	r0, r6
   207fc:	f001 fdf6 	bl	223ec <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   20800:	6a62      	ldr	r2, [r4, #36]	; 0x24
   20802:	6923      	ldr	r3, [r4, #16]
   20804:	429a      	cmp	r2, r3
   20806:	d241      	bcs.n	2088c <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20808:	4620      	mov	r0, r4
   2080a:	f001 fa97 	bl	21d3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   2080e:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   20810:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   20812:	4641      	mov	r1, r8
		if (pending_thread != NULL) {
   20814:	b1a0      	cbz	r0, 20840 <z_impl_k_msgq_put+0xb4>
			(void)memcpy(pending_thread->base.swap_data, data,
   20816:	6940      	ldr	r0, [r0, #20]
   20818:	f003 fcde 	bl	241d8 <memcpy>
   2081c:	2300      	movs	r3, #0
   2081e:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20820:	7b6b      	ldrb	r3, [r5, #13]
   20822:	06db      	lsls	r3, r3, #27
   20824:	d104      	bne.n	20830 <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   20826:	69ab      	ldr	r3, [r5, #24]
   20828:	b913      	cbnz	r3, 20830 <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   2082a:	4628      	mov	r0, r5
   2082c:	f000 ff16 	bl	2165c <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   20830:	4639      	mov	r1, r7
   20832:	4630      	mov	r0, r6
   20834:	f000 fd1c 	bl	21270 <z_reschedule>
			return 0;
   20838:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2083a:	4620      	mov	r0, r4
   2083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   20840:	6a20      	ldr	r0, [r4, #32]
   20842:	f003 fcc9 	bl	241d8 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   20846:	6a23      	ldr	r3, [r4, #32]
   20848:	68e2      	ldr	r2, [r4, #12]
   2084a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2084c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2084e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   20850:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   20852:	bf04      	itt	eq
   20854:	6963      	ldreq	r3, [r4, #20]
   20856:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   20858:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2085a:	3301      	adds	r3, #1
   2085c:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   2085e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20860:	4630      	mov	r0, r6
   20862:	f001 fdb3 	bl	223cc <z_spin_unlock_valid>
   20866:	b960      	cbnz	r0, 20882 <z_impl_k_msgq_put+0xf6>
   20868:	4918      	ldr	r1, [pc, #96]	; (208cc <z_impl_k_msgq_put+0x140>)
   2086a:	2372      	movs	r3, #114	; 0x72
   2086c:	4a15      	ldr	r2, [pc, #84]	; (208c4 <z_impl_k_msgq_put+0x138>)
   2086e:	4812      	ldr	r0, [pc, #72]	; (208b8 <z_impl_k_msgq_put+0x12c>)
   20870:	f003 fb02 	bl	23e78 <printk>
   20874:	4816      	ldr	r0, [pc, #88]	; (208d0 <z_impl_k_msgq_put+0x144>)
   20876:	f003 faff 	bl	23e78 <printk>
   2087a:	2172      	movs	r1, #114	; 0x72
   2087c:	4811      	ldr	r0, [pc, #68]	; (208c4 <z_impl_k_msgq_put+0x138>)
   2087e:	f003 fb08 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20882:	f387 8811 	msr	BASEPRI, r7
   20886:	f3bf 8f6f 	isb	sy
	return result;
   2088a:	e7d6      	b.n	2083a <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   2088c:	b15d      	cbz	r5, 208a6 <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   2088e:	4b11      	ldr	r3, [pc, #68]	; (208d4 <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20890:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   20892:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20894:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   20896:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2089a:	4630      	mov	r0, r6
   2089c:	462b      	mov	r3, r5
}
   2089e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   208a2:	f001 b98f 	b.w	21bc4 <z_pend_curr>
		result = -ENOMSG;
   208a6:	f06f 044f 	mvn.w	r4, #79	; 0x4f
   208aa:	e7d9      	b.n	20860 <z_impl_k_msgq_put+0xd4>
   208ac:	e000ed00 	.word	0xe000ed00
   208b0:	000278ee 	.word	0x000278ee
   208b4:	000278a0 	.word	0x000278a0
   208b8:	0002694b 	.word	0x0002694b
   208bc:	0002789d 	.word	0x0002789d
   208c0:	00026ae6 	.word	0x00026ae6
   208c4:	00026abf 	.word	0x00026abf
   208c8:	00026afb 	.word	0x00026afb
   208cc:	00026b10 	.word	0x00026b10
   208d0:	00026b27 	.word	0x00026b27
   208d4:	20025b0c 	.word	0x20025b0c

000208d8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   208d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208dc:	4604      	mov	r4, r0
   208de:	4688      	mov	r8, r1
   208e0:	4615      	mov	r5, r2
   208e2:	f3ef 8305 	mrs	r3, IPSR
   208e6:	2b0d      	cmp	r3, #13
   208e8:	d804      	bhi.n	208f4 <z_impl_k_msgq_get+0x1c>
   208ea:	b18b      	cbz	r3, 20910 <z_impl_k_msgq_get+0x38>
   208ec:	4b48      	ldr	r3, [pc, #288]	; (20a10 <z_impl_k_msgq_get+0x138>)
   208ee:	685b      	ldr	r3, [r3, #4]
   208f0:	051a      	lsls	r2, r3, #20
   208f2:	d40d      	bmi.n	20910 <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   208f4:	b165      	cbz	r5, 20910 <z_impl_k_msgq_get+0x38>
   208f6:	4947      	ldr	r1, [pc, #284]	; (20a14 <z_impl_k_msgq_get+0x13c>)
   208f8:	23bc      	movs	r3, #188	; 0xbc
   208fa:	4a47      	ldr	r2, [pc, #284]	; (20a18 <z_impl_k_msgq_get+0x140>)
   208fc:	4847      	ldr	r0, [pc, #284]	; (20a1c <z_impl_k_msgq_get+0x144>)
   208fe:	f003 fabb 	bl	23e78 <printk>
   20902:	4847      	ldr	r0, [pc, #284]	; (20a20 <z_impl_k_msgq_get+0x148>)
   20904:	f003 fab8 	bl	23e78 <printk>
   20908:	21bc      	movs	r1, #188	; 0xbc
   2090a:	4843      	ldr	r0, [pc, #268]	; (20a18 <z_impl_k_msgq_get+0x140>)
   2090c:	f003 fac1 	bl	23e92 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   20910:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   20914:	f04f 0320 	mov.w	r3, #32
   20918:	f3ef 8711 	mrs	r7, BASEPRI
   2091c:	f383 8811 	msr	BASEPRI, r3
   20920:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20924:	4630      	mov	r0, r6
   20926:	f001 fd43 	bl	223b0 <z_spin_lock_valid>
   2092a:	b960      	cbnz	r0, 20946 <z_impl_k_msgq_get+0x6e>
   2092c:	493d      	ldr	r1, [pc, #244]	; (20a24 <z_impl_k_msgq_get+0x14c>)
   2092e:	235f      	movs	r3, #95	; 0x5f
   20930:	4a3d      	ldr	r2, [pc, #244]	; (20a28 <z_impl_k_msgq_get+0x150>)
   20932:	483a      	ldr	r0, [pc, #232]	; (20a1c <z_impl_k_msgq_get+0x144>)
   20934:	f003 faa0 	bl	23e78 <printk>
   20938:	483c      	ldr	r0, [pc, #240]	; (20a2c <z_impl_k_msgq_get+0x154>)
   2093a:	f003 fa9d 	bl	23e78 <printk>
   2093e:	215f      	movs	r1, #95	; 0x5f
   20940:	4839      	ldr	r0, [pc, #228]	; (20a28 <z_impl_k_msgq_get+0x150>)
   20942:	f003 faa6 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20946:	4630      	mov	r0, r6
   20948:	f001 fd50 	bl	223ec <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   2094c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2094e:	2b00      	cmp	r3, #0
   20950:	d039      	beq.n	209c6 <z_impl_k_msgq_get+0xee>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   20952:	68e2      	ldr	r2, [r4, #12]
   20954:	69e1      	ldr	r1, [r4, #28]
   20956:	4640      	mov	r0, r8
   20958:	f003 fc3e 	bl	241d8 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   2095c:	69e3      	ldr	r3, [r4, #28]
   2095e:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20960:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   20962:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   20964:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   20966:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   20968:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2096a:	bf04      	itt	eq
   2096c:	6963      	ldreq	r3, [r4, #20]
   2096e:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   20970:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20972:	3b01      	subs	r3, #1
   20974:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20976:	f001 f9e1 	bl	21d3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2097a:	4605      	mov	r5, r0
   2097c:	2800      	cmp	r0, #0
   2097e:	d031      	beq.n	209e4 <z_impl_k_msgq_get+0x10c>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   20980:	68e2      	ldr	r2, [r4, #12]
   20982:	6941      	ldr	r1, [r0, #20]
   20984:	6a20      	ldr	r0, [r4, #32]
   20986:	f003 fc27 	bl	241d8 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2098a:	6a23      	ldr	r3, [r4, #32]
   2098c:	68e2      	ldr	r2, [r4, #12]
   2098e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   20990:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   20992:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   20994:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   20996:	bf04      	itt	eq
   20998:	6963      	ldreq	r3, [r4, #20]
   2099a:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   2099c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2099e:	3301      	adds	r3, #1
   209a0:	6263      	str	r3, [r4, #36]	; 0x24
   209a2:	2300      	movs	r3, #0
   209a4:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   209a6:	7b6b      	ldrb	r3, [r5, #13]
   209a8:	06db      	lsls	r3, r3, #27
   209aa:	d104      	bne.n	209b6 <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   209ac:	69ab      	ldr	r3, [r5, #24]
   209ae:	b913      	cbnz	r3, 209b6 <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   209b0:	4628      	mov	r0, r5
   209b2:	f000 fe53 	bl	2165c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   209b6:	4639      	mov	r1, r7
   209b8:	4630      	mov	r0, r6
   209ba:	f000 fc59 	bl	21270 <z_reschedule>
			return 0;
   209be:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   209c0:	4628      	mov	r0, r5
   209c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   209c6:	b15d      	cbz	r5, 209e0 <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   209c8:	4b19      	ldr	r3, [pc, #100]	; (20a30 <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209ca:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   209cc:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209ce:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   209d0:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209d4:	4630      	mov	r0, r6
   209d6:	462b      	mov	r3, r5
}
   209d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209dc:	f001 b8f2 	b.w	21bc4 <z_pend_curr>
		result = -ENOMSG;
   209e0:	f06f 054f 	mvn.w	r5, #79	; 0x4f
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   209e4:	4630      	mov	r0, r6
   209e6:	f001 fcf1 	bl	223cc <z_spin_unlock_valid>
   209ea:	b960      	cbnz	r0, 20a06 <z_impl_k_msgq_get+0x12e>
   209ec:	4911      	ldr	r1, [pc, #68]	; (20a34 <z_impl_k_msgq_get+0x15c>)
   209ee:	2372      	movs	r3, #114	; 0x72
   209f0:	4a0d      	ldr	r2, [pc, #52]	; (20a28 <z_impl_k_msgq_get+0x150>)
   209f2:	480a      	ldr	r0, [pc, #40]	; (20a1c <z_impl_k_msgq_get+0x144>)
   209f4:	f003 fa40 	bl	23e78 <printk>
   209f8:	480f      	ldr	r0, [pc, #60]	; (20a38 <z_impl_k_msgq_get+0x160>)
   209fa:	f003 fa3d 	bl	23e78 <printk>
   209fe:	2172      	movs	r1, #114	; 0x72
   20a00:	4809      	ldr	r0, [pc, #36]	; (20a28 <z_impl_k_msgq_get+0x150>)
   20a02:	f003 fa46 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20a06:	f387 8811 	msr	BASEPRI, r7
   20a0a:	f3bf 8f6f 	isb	sy
	return result;
   20a0e:	e7d7      	b.n	209c0 <z_impl_k_msgq_get+0xe8>
   20a10:	e000ed00 	.word	0xe000ed00
   20a14:	000278ee 	.word	0x000278ee
   20a18:	000278a0 	.word	0x000278a0
   20a1c:	0002694b 	.word	0x0002694b
   20a20:	0002789d 	.word	0x0002789d
   20a24:	00026ae6 	.word	0x00026ae6
   20a28:	00026abf 	.word	0x00026abf
   20a2c:	00026afb 	.word	0x00026afb
   20a30:	20025b0c 	.word	0x20025b0c
   20a34:	00026b10 	.word	0x00026b10
   20a38:	00026b27 	.word	0x00026b27

00020a3c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   20a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a3e:	4604      	mov	r4, r0
   20a40:	460e      	mov	r6, r1
	__asm__ volatile(
   20a42:	f04f 0320 	mov.w	r3, #32
   20a46:	f3ef 8511 	mrs	r5, BASEPRI
   20a4a:	f383 8811 	msr	BASEPRI, r3
   20a4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20a52:	485f      	ldr	r0, [pc, #380]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20a54:	f001 fcac 	bl	223b0 <z_spin_lock_valid>
   20a58:	b960      	cbnz	r0, 20a74 <z_impl_k_mutex_lock+0x38>
   20a5a:	495e      	ldr	r1, [pc, #376]	; (20bd4 <z_impl_k_mutex_lock+0x198>)
   20a5c:	235f      	movs	r3, #95	; 0x5f
   20a5e:	4a5e      	ldr	r2, [pc, #376]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20a60:	485e      	ldr	r0, [pc, #376]	; (20bdc <z_impl_k_mutex_lock+0x1a0>)
   20a62:	f003 fa09 	bl	23e78 <printk>
   20a66:	485e      	ldr	r0, [pc, #376]	; (20be0 <z_impl_k_mutex_lock+0x1a4>)
   20a68:	f003 fa06 	bl	23e78 <printk>
   20a6c:	215f      	movs	r1, #95	; 0x5f
   20a6e:	485a      	ldr	r0, [pc, #360]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20a70:	f003 fa0f 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a74:	4856      	ldr	r0, [pc, #344]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20a76:	f001 fcb9 	bl	223ec <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20a7a:	68e3      	ldr	r3, [r4, #12]
   20a7c:	4a59      	ldr	r2, [pc, #356]	; (20be4 <z_impl_k_mutex_lock+0x1a8>)
   20a7e:	b1eb      	cbz	r3, 20abc <z_impl_k_mutex_lock+0x80>
   20a80:	68a0      	ldr	r0, [r4, #8]
   20a82:	6891      	ldr	r1, [r2, #8]
   20a84:	4288      	cmp	r0, r1
   20a86:	d038      	beq.n	20afa <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   20a88:	2e00      	cmp	r6, #0
   20a8a:	d138      	bne.n	20afe <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20a8c:	4850      	ldr	r0, [pc, #320]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20a8e:	f001 fc9d 	bl	223cc <z_spin_unlock_valid>
   20a92:	b960      	cbnz	r0, 20aae <z_impl_k_mutex_lock+0x72>
   20a94:	4954      	ldr	r1, [pc, #336]	; (20be8 <z_impl_k_mutex_lock+0x1ac>)
   20a96:	2372      	movs	r3, #114	; 0x72
   20a98:	4a4f      	ldr	r2, [pc, #316]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20a9a:	4850      	ldr	r0, [pc, #320]	; (20bdc <z_impl_k_mutex_lock+0x1a0>)
   20a9c:	f003 f9ec 	bl	23e78 <printk>
   20aa0:	4852      	ldr	r0, [pc, #328]	; (20bec <z_impl_k_mutex_lock+0x1b0>)
   20aa2:	f003 f9e9 	bl	23e78 <printk>
   20aa6:	2172      	movs	r1, #114	; 0x72
   20aa8:	484b      	ldr	r0, [pc, #300]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20aaa:	f003 f9f2 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20aae:	f385 8811 	msr	BASEPRI, r5
   20ab2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   20ab6:	f06f 000f 	mvn.w	r0, #15
   20aba:	e01d      	b.n	20af8 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   20abc:	6891      	ldr	r1, [r2, #8]
   20abe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   20ac2:	3301      	adds	r3, #1
   20ac4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20ac6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20ac8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   20aca:	60a3      	str	r3, [r4, #8]
   20acc:	4840      	ldr	r0, [pc, #256]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20ace:	f001 fc7d 	bl	223cc <z_spin_unlock_valid>
   20ad2:	b960      	cbnz	r0, 20aee <z_impl_k_mutex_lock+0xb2>
   20ad4:	4944      	ldr	r1, [pc, #272]	; (20be8 <z_impl_k_mutex_lock+0x1ac>)
   20ad6:	2372      	movs	r3, #114	; 0x72
   20ad8:	4a3f      	ldr	r2, [pc, #252]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20ada:	4840      	ldr	r0, [pc, #256]	; (20bdc <z_impl_k_mutex_lock+0x1a0>)
   20adc:	f003 f9cc 	bl	23e78 <printk>
   20ae0:	4842      	ldr	r0, [pc, #264]	; (20bec <z_impl_k_mutex_lock+0x1b0>)
   20ae2:	f003 f9c9 	bl	23e78 <printk>
   20ae6:	2172      	movs	r1, #114	; 0x72
   20ae8:	483b      	ldr	r0, [pc, #236]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20aea:	f003 f9d2 	bl	23e92 <assert_post_action>
   20aee:	f385 8811 	msr	BASEPRI, r5
   20af2:	f3bf 8f6f 	isb	sy
		return 0;
   20af6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   20af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   20afa:	6921      	ldr	r1, [r4, #16]
   20afc:	e7e1      	b.n	20ac2 <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20afe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20b02:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20b06:	4299      	cmp	r1, r3
   20b08:	bfa8      	it	ge
   20b0a:	4619      	movge	r1, r3
   20b0c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20b10:	4299      	cmp	r1, r3
   20b12:	da3f      	bge.n	20b94 <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   20b14:	f001 f884 	bl	21c20 <z_set_prio>
   20b18:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20b1a:	4633      	mov	r3, r6
   20b1c:	4622      	mov	r2, r4
   20b1e:	4629      	mov	r1, r5
   20b20:	482b      	ldr	r0, [pc, #172]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20b22:	f001 f84f 	bl	21bc4 <z_pend_curr>
	if (got_mutex == 0) {
   20b26:	2800      	cmp	r0, #0
   20b28:	d0e6      	beq.n	20af8 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   20b2a:	f04f 0320 	mov.w	r3, #32
   20b2e:	f3ef 8511 	mrs	r5, BASEPRI
   20b32:	f383 8811 	msr	BASEPRI, r3
   20b36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20b3a:	4825      	ldr	r0, [pc, #148]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20b3c:	f001 fc38 	bl	223b0 <z_spin_lock_valid>
   20b40:	b960      	cbnz	r0, 20b5c <z_impl_k_mutex_lock+0x120>
   20b42:	4924      	ldr	r1, [pc, #144]	; (20bd4 <z_impl_k_mutex_lock+0x198>)
   20b44:	235f      	movs	r3, #95	; 0x5f
   20b46:	4a24      	ldr	r2, [pc, #144]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20b48:	4824      	ldr	r0, [pc, #144]	; (20bdc <z_impl_k_mutex_lock+0x1a0>)
   20b4a:	f003 f995 	bl	23e78 <printk>
   20b4e:	4824      	ldr	r0, [pc, #144]	; (20be0 <z_impl_k_mutex_lock+0x1a4>)
   20b50:	f003 f992 	bl	23e78 <printk>
   20b54:	215f      	movs	r1, #95	; 0x5f
   20b56:	4820      	ldr	r0, [pc, #128]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20b58:	f003 f99b 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b5c:	481c      	ldr	r0, [pc, #112]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20b5e:	f001 fc45 	bl	223ec <z_spin_lock_set_owner>
	return list->head == list;
   20b62:	6823      	ldr	r3, [r4, #0]
   20b64:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b66:	429c      	cmp	r4, r3
   20b68:	d007      	beq.n	20b7a <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   20b6a:	b133      	cbz	r3, 20b7a <z_impl_k_mutex_lock+0x13e>
   20b6c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20b70:	4299      	cmp	r1, r3
   20b72:	bfa8      	it	ge
   20b74:	4619      	movge	r1, r3
   20b76:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20b7a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   20b7c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20b80:	4299      	cmp	r1, r3
   20b82:	d109      	bne.n	20b98 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   20b84:	b16f      	cbz	r7, 20ba2 <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   20b86:	4629      	mov	r1, r5
   20b88:	4811      	ldr	r0, [pc, #68]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20b8a:	f000 fb71 	bl	21270 <z_reschedule>
	return -EAGAIN;
   20b8e:	f06f 000a 	mvn.w	r0, #10
   20b92:	e7b1      	b.n	20af8 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   20b94:	2700      	movs	r7, #0
   20b96:	e7c0      	b.n	20b1a <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   20b98:	f001 f842 	bl	21c20 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20b9c:	2800      	cmp	r0, #0
   20b9e:	d1f2      	bne.n	20b86 <z_impl_k_mutex_lock+0x14a>
   20ba0:	e7f0      	b.n	20b84 <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20ba2:	480b      	ldr	r0, [pc, #44]	; (20bd0 <z_impl_k_mutex_lock+0x194>)
   20ba4:	f001 fc12 	bl	223cc <z_spin_unlock_valid>
   20ba8:	b960      	cbnz	r0, 20bc4 <z_impl_k_mutex_lock+0x188>
   20baa:	490f      	ldr	r1, [pc, #60]	; (20be8 <z_impl_k_mutex_lock+0x1ac>)
   20bac:	2372      	movs	r3, #114	; 0x72
   20bae:	4a0a      	ldr	r2, [pc, #40]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20bb0:	480a      	ldr	r0, [pc, #40]	; (20bdc <z_impl_k_mutex_lock+0x1a0>)
   20bb2:	f003 f961 	bl	23e78 <printk>
   20bb6:	480d      	ldr	r0, [pc, #52]	; (20bec <z_impl_k_mutex_lock+0x1b0>)
   20bb8:	f003 f95e 	bl	23e78 <printk>
   20bbc:	2172      	movs	r1, #114	; 0x72
   20bbe:	4806      	ldr	r0, [pc, #24]	; (20bd8 <z_impl_k_mutex_lock+0x19c>)
   20bc0:	f003 f967 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20bc4:	f385 8811 	msr	BASEPRI, r5
   20bc8:	f3bf 8f6f 	isb	sy
   20bcc:	e7df      	b.n	20b8e <z_impl_k_mutex_lock+0x152>
   20bce:	bf00      	nop
   20bd0:	20025b08 	.word	0x20025b08
   20bd4:	00026ae6 	.word	0x00026ae6
   20bd8:	00026abf 	.word	0x00026abf
   20bdc:	0002694b 	.word	0x0002694b
   20be0:	00026afb 	.word	0x00026afb
   20be4:	20025b0c 	.word	0x20025b0c
   20be8:	00026b10 	.word	0x00026b10
   20bec:	00026b27 	.word	0x00026b27

00020bf0 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   20bf0:	68c3      	ldr	r3, [r0, #12]
{
   20bf2:	b570      	push	{r4, r5, r6, lr}
   20bf4:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   20bf6:	b963      	cbnz	r3, 20c12 <z_impl_k_mutex_unlock+0x22>
   20bf8:	495c      	ldr	r1, [pc, #368]	; (20d6c <z_impl_k_mutex_unlock+0x17c>)
   20bfa:	23d2      	movs	r3, #210	; 0xd2
   20bfc:	4a5c      	ldr	r2, [pc, #368]	; (20d70 <z_impl_k_mutex_unlock+0x180>)
   20bfe:	485d      	ldr	r0, [pc, #372]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20c00:	f003 f93a 	bl	23e78 <printk>
   20c04:	485c      	ldr	r0, [pc, #368]	; (20d78 <z_impl_k_mutex_unlock+0x188>)
   20c06:	f003 f937 	bl	23e78 <printk>
   20c0a:	21d2      	movs	r1, #210	; 0xd2
   20c0c:	4858      	ldr	r0, [pc, #352]	; (20d70 <z_impl_k_mutex_unlock+0x180>)
   20c0e:	f003 f940 	bl	23e92 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   20c12:	4d5a      	ldr	r5, [pc, #360]	; (20d7c <z_impl_k_mutex_unlock+0x18c>)
   20c14:	68a2      	ldr	r2, [r4, #8]
   20c16:	68ab      	ldr	r3, [r5, #8]
   20c18:	429a      	cmp	r2, r3
   20c1a:	d00c      	beq.n	20c36 <z_impl_k_mutex_unlock+0x46>
   20c1c:	4958      	ldr	r1, [pc, #352]	; (20d80 <z_impl_k_mutex_unlock+0x190>)
   20c1e:	23d3      	movs	r3, #211	; 0xd3
   20c20:	4a53      	ldr	r2, [pc, #332]	; (20d70 <z_impl_k_mutex_unlock+0x180>)
   20c22:	4854      	ldr	r0, [pc, #336]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20c24:	f003 f928 	bl	23e78 <printk>
   20c28:	4853      	ldr	r0, [pc, #332]	; (20d78 <z_impl_k_mutex_unlock+0x188>)
   20c2a:	f003 f925 	bl	23e78 <printk>
   20c2e:	21d3      	movs	r1, #211	; 0xd3
   20c30:	484f      	ldr	r0, [pc, #316]	; (20d70 <z_impl_k_mutex_unlock+0x180>)
   20c32:	f003 f92e 	bl	23e92 <assert_post_action>
   20c36:	f3ef 8305 	mrs	r3, IPSR
   20c3a:	2b0d      	cmp	r3, #13
   20c3c:	d804      	bhi.n	20c48 <z_impl_k_mutex_unlock+0x58>
   20c3e:	b193      	cbz	r3, 20c66 <z_impl_k_mutex_unlock+0x76>
   20c40:	4b50      	ldr	r3, [pc, #320]	; (20d84 <z_impl_k_mutex_unlock+0x194>)
   20c42:	685b      	ldr	r3, [r3, #4]
   20c44:	051a      	lsls	r2, r3, #20
   20c46:	d40e      	bmi.n	20c66 <z_impl_k_mutex_unlock+0x76>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   20c48:	494f      	ldr	r1, [pc, #316]	; (20d88 <z_impl_k_mutex_unlock+0x198>)
   20c4a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   20c4e:	4a4f      	ldr	r2, [pc, #316]	; (20d8c <z_impl_k_mutex_unlock+0x19c>)
   20c50:	4848      	ldr	r0, [pc, #288]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20c52:	f003 f911 	bl	23e78 <printk>
   20c56:	4848      	ldr	r0, [pc, #288]	; (20d78 <z_impl_k_mutex_unlock+0x188>)
   20c58:	f003 f90e 	bl	23e78 <printk>
   20c5c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   20c60:	484a      	ldr	r0, [pc, #296]	; (20d8c <z_impl_k_mutex_unlock+0x19c>)
   20c62:	f003 f916 	bl	23e92 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20c66:	68ab      	ldr	r3, [r5, #8]
   20c68:	7bdb      	ldrb	r3, [r3, #15]
   20c6a:	2b01      	cmp	r3, #1
   20c6c:	d10e      	bne.n	20c8c <z_impl_k_mutex_unlock+0x9c>
   20c6e:	4948      	ldr	r1, [pc, #288]	; (20d90 <z_impl_k_mutex_unlock+0x1a0>)
   20c70:	f240 130d 	movw	r3, #269	; 0x10d
   20c74:	4a45      	ldr	r2, [pc, #276]	; (20d8c <z_impl_k_mutex_unlock+0x19c>)
   20c76:	483f      	ldr	r0, [pc, #252]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20c78:	f003 f8fe 	bl	23e78 <printk>
   20c7c:	483e      	ldr	r0, [pc, #248]	; (20d78 <z_impl_k_mutex_unlock+0x188>)
   20c7e:	f003 f8fb 	bl	23e78 <printk>
   20c82:	f240 110d 	movw	r1, #269	; 0x10d
   20c86:	4841      	ldr	r0, [pc, #260]	; (20d8c <z_impl_k_mutex_unlock+0x19c>)
   20c88:	f003 f903 	bl	23e92 <assert_post_action>

	--_current->base.sched_locked;
   20c8c:	68aa      	ldr	r2, [r5, #8]
   20c8e:	7bd3      	ldrb	r3, [r2, #15]
   20c90:	3b01      	subs	r3, #1
   20c92:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   20c94:	68e3      	ldr	r3, [r4, #12]
   20c96:	2b01      	cmp	r3, #1
   20c98:	d005      	beq.n	20ca6 <z_impl_k_mutex_unlock+0xb6>
		mutex->lock_count--;
   20c9a:	3b01      	subs	r3, #1
   20c9c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   20c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   20ca2:	f000 bc59 	b.w	21558 <k_sched_unlock>
	__asm__ volatile(
   20ca6:	f04f 0320 	mov.w	r3, #32
   20caa:	f3ef 8611 	mrs	r6, BASEPRI
   20cae:	f383 8811 	msr	BASEPRI, r3
   20cb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20cb6:	4837      	ldr	r0, [pc, #220]	; (20d94 <z_impl_k_mutex_unlock+0x1a4>)
   20cb8:	f001 fb7a 	bl	223b0 <z_spin_lock_valid>
   20cbc:	b960      	cbnz	r0, 20cd8 <z_impl_k_mutex_unlock+0xe8>
   20cbe:	4936      	ldr	r1, [pc, #216]	; (20d98 <z_impl_k_mutex_unlock+0x1a8>)
   20cc0:	235f      	movs	r3, #95	; 0x5f
   20cc2:	4a36      	ldr	r2, [pc, #216]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20cc4:	482b      	ldr	r0, [pc, #172]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20cc6:	f003 f8d7 	bl	23e78 <printk>
   20cca:	4835      	ldr	r0, [pc, #212]	; (20da0 <z_impl_k_mutex_unlock+0x1b0>)
   20ccc:	f003 f8d4 	bl	23e78 <printk>
   20cd0:	215f      	movs	r1, #95	; 0x5f
   20cd2:	4832      	ldr	r0, [pc, #200]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20cd4:	f003 f8dd 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20cd8:	482e      	ldr	r0, [pc, #184]	; (20d94 <z_impl_k_mutex_unlock+0x1a4>)
   20cda:	f001 fb87 	bl	223ec <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20cde:	68a0      	ldr	r0, [r4, #8]
   20ce0:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   20ce2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20ce6:	4299      	cmp	r1, r3
   20ce8:	d001      	beq.n	20cee <z_impl_k_mutex_unlock+0xfe>
		return z_set_prio(mutex->owner, new_prio);
   20cea:	f000 ff99 	bl	21c20 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20cee:	4620      	mov	r0, r4
   20cf0:	f001 f824 	bl	21d3c <z_unpend_first_thread>
   20cf4:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   20cf6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20cf8:	b308      	cbz	r0, 20d3e <z_impl_k_mutex_unlock+0x14e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20cfa:	7b43      	ldrb	r3, [r0, #13]
   20cfc:	06db      	lsls	r3, r3, #27
   20cfe:	d103      	bne.n	20d08 <z_impl_k_mutex_unlock+0x118>
	if (z_is_thread_ready(thread)) {
   20d00:	6983      	ldr	r3, [r0, #24]
   20d02:	b90b      	cbnz	r3, 20d08 <z_impl_k_mutex_unlock+0x118>
		z_add_thread_to_ready_q(thread);
   20d04:	f000 fcaa 	bl	2165c <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20d08:	4822      	ldr	r0, [pc, #136]	; (20d94 <z_impl_k_mutex_unlock+0x1a4>)
   20d0a:	f001 fb5f 	bl	223cc <z_spin_unlock_valid>
   20d0e:	b960      	cbnz	r0, 20d2a <z_impl_k_mutex_unlock+0x13a>
   20d10:	4924      	ldr	r1, [pc, #144]	; (20da4 <z_impl_k_mutex_unlock+0x1b4>)
   20d12:	2372      	movs	r3, #114	; 0x72
   20d14:	4a21      	ldr	r2, [pc, #132]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20d16:	4817      	ldr	r0, [pc, #92]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20d18:	f003 f8ae 	bl	23e78 <printk>
   20d1c:	4822      	ldr	r0, [pc, #136]	; (20da8 <z_impl_k_mutex_unlock+0x1b8>)
   20d1e:	f003 f8ab 	bl	23e78 <printk>
   20d22:	2172      	movs	r1, #114	; 0x72
   20d24:	481d      	ldr	r0, [pc, #116]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20d26:	f003 f8b4 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20d2a:	f386 8811 	msr	BASEPRI, r6
   20d2e:	f3bf 8f6f 	isb	sy
   20d32:	2300      	movs	r3, #0
   20d34:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   20d36:	f995 300e 	ldrsb.w	r3, [r5, #14]
   20d3a:	6123      	str	r3, [r4, #16]
   20d3c:	e7af      	b.n	20c9e <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count = 0U;
   20d3e:	60e0      	str	r0, [r4, #12]
   20d40:	4814      	ldr	r0, [pc, #80]	; (20d94 <z_impl_k_mutex_unlock+0x1a4>)
   20d42:	f001 fb43 	bl	223cc <z_spin_unlock_valid>
   20d46:	b960      	cbnz	r0, 20d62 <z_impl_k_mutex_unlock+0x172>
   20d48:	4916      	ldr	r1, [pc, #88]	; (20da4 <z_impl_k_mutex_unlock+0x1b4>)
   20d4a:	2372      	movs	r3, #114	; 0x72
   20d4c:	4a13      	ldr	r2, [pc, #76]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20d4e:	4809      	ldr	r0, [pc, #36]	; (20d74 <z_impl_k_mutex_unlock+0x184>)
   20d50:	f003 f892 	bl	23e78 <printk>
   20d54:	4814      	ldr	r0, [pc, #80]	; (20da8 <z_impl_k_mutex_unlock+0x1b8>)
   20d56:	f003 f88f 	bl	23e78 <printk>
   20d5a:	2172      	movs	r1, #114	; 0x72
   20d5c:	480f      	ldr	r0, [pc, #60]	; (20d9c <z_impl_k_mutex_unlock+0x1ac>)
   20d5e:	f003 f898 	bl	23e92 <assert_post_action>
   20d62:	f386 8811 	msr	BASEPRI, r6
   20d66:	f3bf 8f6f 	isb	sy
   20d6a:	e798      	b.n	20c9e <z_impl_k_mutex_unlock+0xae>
   20d6c:	00027935 	.word	0x00027935
   20d70:	00027912 	.word	0x00027912
   20d74:	0002694b 	.word	0x0002694b
   20d78:	0002789d 	.word	0x0002789d
   20d7c:	20025b0c 	.word	0x20025b0c
   20d80:	0002794c 	.word	0x0002794c
   20d84:	e000ed00 	.word	0xe000ed00
   20d88:	00027998 	.word	0x00027998
   20d8c:	0002796c 	.word	0x0002796c
   20d90:	000279ac 	.word	0x000279ac
   20d94:	20025b08 	.word	0x20025b08
   20d98:	00026ae6 	.word	0x00026ae6
   20d9c:	00026abf 	.word	0x00026abf
   20da0:	00026afb 	.word	0x00026afb
   20da4:	00026b10 	.word	0x00026b10
   20da8:	00026b27 	.word	0x00026b27

00020dac <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   20dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20db0:	4604      	mov	r4, r0
   20db2:	460e      	mov	r6, r1
   20db4:	4690      	mov	r8, r2
   20db6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20db8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20dbc:	f04f 0320 	mov.w	r3, #32
   20dc0:	f3ef 8711 	mrs	r7, BASEPRI
   20dc4:	f383 8811 	msr	BASEPRI, r3
   20dc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20dcc:	4628      	mov	r0, r5
   20dce:	f001 faef 	bl	223b0 <z_spin_lock_valid>
   20dd2:	b960      	cbnz	r0, 20dee <queue_insert+0x42>
   20dd4:	4932      	ldr	r1, [pc, #200]	; (20ea0 <queue_insert+0xf4>)
   20dd6:	235f      	movs	r3, #95	; 0x5f
   20dd8:	4a32      	ldr	r2, [pc, #200]	; (20ea4 <queue_insert+0xf8>)
   20dda:	4833      	ldr	r0, [pc, #204]	; (20ea8 <queue_insert+0xfc>)
   20ddc:	f003 f84c 	bl	23e78 <printk>
   20de0:	4832      	ldr	r0, [pc, #200]	; (20eac <queue_insert+0x100>)
   20de2:	f003 f849 	bl	23e78 <printk>
   20de6:	215f      	movs	r1, #95	; 0x5f
   20de8:	482e      	ldr	r0, [pc, #184]	; (20ea4 <queue_insert+0xf8>)
   20dea:	f003 f852 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20dee:	4628      	mov	r0, r5
   20df0:	f001 fafc 	bl	223ec <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   20df4:	f1b9 0f00 	cmp.w	r9, #0
   20df8:	d02c      	beq.n	20e54 <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   20dfa:	2008      	movs	r0, #8
   20dfc:	f7ff fcbc 	bl	20778 <z_thread_malloc>
		if (anode == NULL) {
   20e00:	b9c0      	cbnz	r0, 20e34 <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20e02:	4628      	mov	r0, r5
   20e04:	f001 fae2 	bl	223cc <z_spin_unlock_valid>
   20e08:	b960      	cbnz	r0, 20e24 <queue_insert+0x78>
   20e0a:	4929      	ldr	r1, [pc, #164]	; (20eb0 <queue_insert+0x104>)
   20e0c:	2372      	movs	r3, #114	; 0x72
   20e0e:	4a25      	ldr	r2, [pc, #148]	; (20ea4 <queue_insert+0xf8>)
   20e10:	4825      	ldr	r0, [pc, #148]	; (20ea8 <queue_insert+0xfc>)
   20e12:	f003 f831 	bl	23e78 <printk>
   20e16:	4827      	ldr	r0, [pc, #156]	; (20eb4 <queue_insert+0x108>)
   20e18:	f003 f82e 	bl	23e78 <printk>
   20e1c:	2172      	movs	r1, #114	; 0x72
   20e1e:	4821      	ldr	r0, [pc, #132]	; (20ea4 <queue_insert+0xf8>)
   20e20:	f003 f837 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20e24:	f387 8811 	msr	BASEPRI, r7
   20e28:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   20e2c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   20e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20e34:	2301      	movs	r3, #1
		anode->data = data;
   20e36:	f8c0 8004 	str.w	r8, [r0, #4]
   20e3a:	6003      	str	r3, [r0, #0]
   20e3c:	6803      	ldr	r3, [r0, #0]
   20e3e:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20e42:	b95e      	cbnz	r6, 20e5c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20e44:	6822      	ldr	r2, [r4, #0]
   20e46:	4313      	orrs	r3, r2
   20e48:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20e4a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20e4c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20e4e:	b973      	cbnz	r3, 20e6e <queue_insert+0xc2>
	list->tail = node;
   20e50:	6060      	str	r0, [r4, #4]
   20e52:	e00c      	b.n	20e6e <queue_insert+0xc2>
	node->next_and_flags = flags;
   20e54:	f8c8 9000 	str.w	r9, [r8]
   20e58:	4640      	mov	r0, r8
   20e5a:	e7ef      	b.n	20e3c <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20e5c:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20e5e:	f032 0203 	bics.w	r2, r2, #3
   20e62:	d115      	bne.n	20e90 <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   20e64:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20e66:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20e68:	b962      	cbnz	r2, 20e84 <queue_insert+0xd8>
	list->head = node;
   20e6a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20e6e:	2104      	movs	r1, #4
   20e70:	f104 000c 	add.w	r0, r4, #12
   20e74:	f004 f9ed 	bl	25252 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20e78:	4628      	mov	r0, r5
   20e7a:	4639      	mov	r1, r7
   20e7c:	f000 f9f8 	bl	21270 <z_reschedule>
	return 0;
   20e80:	2000      	movs	r0, #0
   20e82:	e7d5      	b.n	20e30 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20e84:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20e86:	f003 0303 	and.w	r3, r3, #3
   20e8a:	4303      	orrs	r3, r0
   20e8c:	6013      	str	r3, [r2, #0]
   20e8e:	e7df      	b.n	20e50 <queue_insert+0xa4>
   20e90:	4313      	orrs	r3, r2
   20e92:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20e94:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20e96:	f003 0303 	and.w	r3, r3, #3
   20e9a:	4318      	orrs	r0, r3
   20e9c:	6030      	str	r0, [r6, #0]
   20e9e:	e7e6      	b.n	20e6e <queue_insert+0xc2>
   20ea0:	00026ae6 	.word	0x00026ae6
   20ea4:	00026abf 	.word	0x00026abf
   20ea8:	0002694b 	.word	0x0002694b
   20eac:	00026afb 	.word	0x00026afb
   20eb0:	00026b10 	.word	0x00026b10
   20eb4:	00026b27 	.word	0x00026b27

00020eb8 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   20eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ebc:	4604      	mov	r4, r0
   20ebe:	b089      	sub	sp, #36	; 0x24
   20ec0:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20ec2:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20ec6:	f04f 0320 	mov.w	r3, #32
   20eca:	f3ef 8811 	mrs	r8, BASEPRI
   20ece:	f383 8811 	msr	BASEPRI, r3
   20ed2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20ed6:	4628      	mov	r0, r5
   20ed8:	f001 fa6a 	bl	223b0 <z_spin_lock_valid>
   20edc:	b960      	cbnz	r0, 20ef8 <z_impl_k_queue_get+0x40>
   20ede:	4967      	ldr	r1, [pc, #412]	; (2107c <z_impl_k_queue_get+0x1c4>)
   20ee0:	235f      	movs	r3, #95	; 0x5f
   20ee2:	4a67      	ldr	r2, [pc, #412]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20ee4:	4867      	ldr	r0, [pc, #412]	; (21084 <z_impl_k_queue_get+0x1cc>)
   20ee6:	f002 ffc7 	bl	23e78 <printk>
   20eea:	4867      	ldr	r0, [pc, #412]	; (21088 <z_impl_k_queue_get+0x1d0>)
   20eec:	f002 ffc4 	bl	23e78 <printk>
   20ef0:	215f      	movs	r1, #95	; 0x5f
   20ef2:	4863      	ldr	r0, [pc, #396]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20ef4:	f002 ffcd 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ef8:	4628      	mov	r0, r5
   20efa:	f001 fa77 	bl	223ec <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   20efe:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20f00:	b320      	cbz	r0, 20f4c <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20f02:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20f04:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20f06:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20f0a:	4290      	cmp	r0, r2
	list->tail = node;
   20f0c:	bf08      	it	eq
   20f0e:	6063      	streq	r3, [r4, #4]
	list->head = node;
   20f10:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20f12:	2101      	movs	r1, #1
   20f14:	f004 f891 	bl	2503a <z_queue_node_peek>
   20f18:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20f1a:	4628      	mov	r0, r5
   20f1c:	f001 fa56 	bl	223cc <z_spin_unlock_valid>
   20f20:	b960      	cbnz	r0, 20f3c <z_impl_k_queue_get+0x84>
   20f22:	495a      	ldr	r1, [pc, #360]	; (2108c <z_impl_k_queue_get+0x1d4>)
   20f24:	2372      	movs	r3, #114	; 0x72
   20f26:	4a56      	ldr	r2, [pc, #344]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f28:	4856      	ldr	r0, [pc, #344]	; (21084 <z_impl_k_queue_get+0x1cc>)
   20f2a:	f002 ffa5 	bl	23e78 <printk>
   20f2e:	4858      	ldr	r0, [pc, #352]	; (21090 <z_impl_k_queue_get+0x1d8>)
   20f30:	f002 ffa2 	bl	23e78 <printk>
   20f34:	2172      	movs	r1, #114	; 0x72
   20f36:	4852      	ldr	r0, [pc, #328]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f38:	f002 ffab 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   20f3c:	f388 8811 	msr	BASEPRI, r8
   20f40:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   20f44:	4630      	mov	r0, r6
   20f46:	b009      	add	sp, #36	; 0x24
   20f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f4c:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   20f4e:	b9af      	cbnz	r7, 20f7c <z_impl_k_queue_get+0xc4>
   20f50:	f001 fa3c 	bl	223cc <z_spin_unlock_valid>
   20f54:	b960      	cbnz	r0, 20f70 <z_impl_k_queue_get+0xb8>
   20f56:	494d      	ldr	r1, [pc, #308]	; (2108c <z_impl_k_queue_get+0x1d4>)
   20f58:	2372      	movs	r3, #114	; 0x72
   20f5a:	4a49      	ldr	r2, [pc, #292]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f5c:	4849      	ldr	r0, [pc, #292]	; (21084 <z_impl_k_queue_get+0x1cc>)
   20f5e:	f002 ff8b 	bl	23e78 <printk>
   20f62:	484b      	ldr	r0, [pc, #300]	; (21090 <z_impl_k_queue_get+0x1d8>)
   20f64:	f002 ff88 	bl	23e78 <printk>
   20f68:	2172      	movs	r1, #114	; 0x72
   20f6a:	4845      	ldr	r0, [pc, #276]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f6c:	f002 ff91 	bl	23e92 <assert_post_action>
   20f70:	f388 8811 	msr	BASEPRI, r8
   20f74:	f3bf 8f6f 	isb	sy
			return NULL;
   20f78:	2600      	movs	r6, #0
   20f7a:	e7e3      	b.n	20f44 <z_impl_k_queue_get+0x8c>
   20f7c:	f001 fa26 	bl	223cc <z_spin_unlock_valid>
   20f80:	b960      	cbnz	r0, 20f9c <z_impl_k_queue_get+0xe4>
   20f82:	4942      	ldr	r1, [pc, #264]	; (2108c <z_impl_k_queue_get+0x1d4>)
   20f84:	2372      	movs	r3, #114	; 0x72
   20f86:	4a3e      	ldr	r2, [pc, #248]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f88:	483e      	ldr	r0, [pc, #248]	; (21084 <z_impl_k_queue_get+0x1cc>)
   20f8a:	f002 ff75 	bl	23e78 <printk>
   20f8e:	4840      	ldr	r0, [pc, #256]	; (21090 <z_impl_k_queue_get+0x1d8>)
   20f90:	f002 ff72 	bl	23e78 <printk>
   20f94:	2172      	movs	r1, #114	; 0x72
   20f96:	483a      	ldr	r0, [pc, #232]	; (21080 <z_impl_k_queue_get+0x1c8>)
   20f98:	f002 ff7b 	bl	23e92 <assert_post_action>
   20f9c:	f388 8811 	msr	BASEPRI, r8
   20fa0:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   20fa4:	2200      	movs	r2, #0
   20fa6:	4623      	mov	r3, r4
   20fa8:	2104      	movs	r1, #4
   20faa:	a803      	add	r0, sp, #12
   20fac:	f002 f832 	bl	23014 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   20fb0:	1c7a      	adds	r2, r7, #1
   20fb2:	d002      	beq.n	20fba <z_impl_k_queue_get+0x102>
   20fb4:	f004 f8f5 	bl	251a2 <z_impl_k_uptime_get>
   20fb8:	4683      	mov	fp, r0
{
   20fba:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20fbe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 21080 <z_impl_k_queue_get+0x1c8>
   20fc2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 21084 <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   20fc6:	9b06      	ldr	r3, [sp, #24]
   20fc8:	f36f 3310 	bfc	r3, #12, #5
   20fcc:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   20fce:	2101      	movs	r1, #1
   20fd0:	eba7 0209 	sub.w	r2, r7, r9
   20fd4:	a803      	add	r0, sp, #12
   20fd6:	f002 f873 	bl	230c0 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   20fda:	b108      	cbz	r0, 20fe0 <z_impl_k_queue_get+0x128>
   20fdc:	300b      	adds	r0, #11
   20fde:	d1cb      	bne.n	20f78 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   20fe0:	f04f 0320 	mov.w	r3, #32
   20fe4:	f3ef 8211 	mrs	r2, BASEPRI
   20fe8:	f383 8811 	msr	BASEPRI, r3
   20fec:	f3bf 8f6f 	isb	sy
   20ff0:	4628      	mov	r0, r5
   20ff2:	9201      	str	r2, [sp, #4]
   20ff4:	f001 f9dc 	bl	223b0 <z_spin_lock_valid>
   20ff8:	b960      	cbnz	r0, 21014 <z_impl_k_queue_get+0x15c>
   20ffa:	4920      	ldr	r1, [pc, #128]	; (2107c <z_impl_k_queue_get+0x1c4>)
   20ffc:	235f      	movs	r3, #95	; 0x5f
   20ffe:	4642      	mov	r2, r8
   21000:	4650      	mov	r0, sl
   21002:	f002 ff39 	bl	23e78 <printk>
   21006:	4820      	ldr	r0, [pc, #128]	; (21088 <z_impl_k_queue_get+0x1d0>)
   21008:	f002 ff36 	bl	23e78 <printk>
   2100c:	215f      	movs	r1, #95	; 0x5f
   2100e:	4640      	mov	r0, r8
   21010:	f002 ff3f 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21014:	4628      	mov	r0, r5
   21016:	f001 f9e9 	bl	223ec <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2101a:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2101c:	b138      	cbz	r0, 2102e <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2101e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21020:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21022:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21026:	4290      	cmp	r0, r2
	list->head = node;
   21028:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2102a:	bf08      	it	eq
   2102c:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2102e:	2101      	movs	r1, #1
   21030:	f004 f803 	bl	2503a <z_queue_node_peek>
   21034:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21036:	4628      	mov	r0, r5
   21038:	f001 f9c8 	bl	223cc <z_spin_unlock_valid>
   2103c:	b960      	cbnz	r0, 21058 <z_impl_k_queue_get+0x1a0>
   2103e:	4913      	ldr	r1, [pc, #76]	; (2108c <z_impl_k_queue_get+0x1d4>)
   21040:	2372      	movs	r3, #114	; 0x72
   21042:	4642      	mov	r2, r8
   21044:	4650      	mov	r0, sl
   21046:	f002 ff17 	bl	23e78 <printk>
   2104a:	4811      	ldr	r0, [pc, #68]	; (21090 <z_impl_k_queue_get+0x1d8>)
   2104c:	f002 ff14 	bl	23e78 <printk>
   21050:	2172      	movs	r1, #114	; 0x72
   21052:	4640      	mov	r0, r8
   21054:	f002 ff1d 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21058:	9b01      	ldr	r3, [sp, #4]
   2105a:	f383 8811 	msr	BASEPRI, r3
   2105e:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   21062:	2e00      	cmp	r6, #0
   21064:	f47f af6e 	bne.w	20f44 <z_impl_k_queue_get+0x8c>
   21068:	1c7b      	adds	r3, r7, #1
   2106a:	d0ac      	beq.n	20fc6 <z_impl_k_queue_get+0x10e>
	return z_impl_k_uptime_get();
   2106c:	f004 f899 	bl	251a2 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   21070:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   21074:	454f      	cmp	r7, r9
   21076:	daa6      	bge.n	20fc6 <z_impl_k_queue_get+0x10e>
   21078:	e77e      	b.n	20f78 <z_impl_k_queue_get+0xc0>
   2107a:	bf00      	nop
   2107c:	00026ae6 	.word	0x00026ae6
   21080:	00026abf 	.word	0x00026abf
   21084:	0002694b 	.word	0x0002694b
   21088:	00026afb 	.word	0x00026afb
   2108c:	00026b10 	.word	0x00026b10
   21090:	00026b27 	.word	0x00026b27

00021094 <resched.part.15>:
   21094:	f3ef 8005 	mrs	r0, IPSR
   21098:	280d      	cmp	r0, #13
   2109a:	d809      	bhi.n	210b0 <resched.part.15+0x1c>
   2109c:	b128      	cbz	r0, 210aa <resched.part.15+0x16>
   2109e:	4b05      	ldr	r3, [pc, #20]	; (210b4 <resched.part.15+0x20>)
   210a0:	6858      	ldr	r0, [r3, #4]
   210a2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   210a6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   210aa:	f080 0001 	eor.w	r0, r0, #1
   210ae:	4770      	bx	lr
   210b0:	2001      	movs	r0, #1
   210b2:	e7fa      	b.n	210aa <resched.part.15+0x16>
   210b4:	e000ed00 	.word	0xe000ed00

000210b8 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   210b8:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   210ba:	b510      	push	{r4, lr}
   210bc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   210be:	b95b      	cbnz	r3, 210d8 <pended_on.isra.16+0x20>
   210c0:	4906      	ldr	r1, [pc, #24]	; (210dc <pended_on.isra.16+0x24>)
   210c2:	4807      	ldr	r0, [pc, #28]	; (210e0 <pended_on.isra.16+0x28>)
   210c4:	f240 1383 	movw	r3, #387	; 0x183
   210c8:	4a06      	ldr	r2, [pc, #24]	; (210e4 <pended_on.isra.16+0x2c>)
   210ca:	f002 fed5 	bl	23e78 <printk>
   210ce:	f240 1183 	movw	r1, #387	; 0x183
   210d2:	4804      	ldr	r0, [pc, #16]	; (210e4 <pended_on.isra.16+0x2c>)
   210d4:	f002 fedd 	bl	23e92 <assert_post_action>
}
   210d8:	6820      	ldr	r0, [r4, #0]
   210da:	bd10      	pop	{r4, pc}
   210dc:	00027a1f 	.word	0x00027a1f
   210e0:	0002694b 	.word	0x0002694b
   210e4:	000279fc 	.word	0x000279fc

000210e8 <z_reset_time_slice>:
{
   210e8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   210ea:	4c08      	ldr	r4, [pc, #32]	; (2110c <z_reset_time_slice+0x24>)
   210ec:	6823      	ldr	r3, [r4, #0]
   210ee:	b15b      	cbz	r3, 21108 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   210f0:	f7ec fcbe 	bl	da70 <z_clock_elapsed>
   210f4:	6823      	ldr	r3, [r4, #0]
   210f6:	4a06      	ldr	r2, [pc, #24]	; (21110 <z_reset_time_slice+0x28>)
   210f8:	4418      	add	r0, r3
   210fa:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   210fc:	2100      	movs	r1, #0
}
   210fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   21102:	4618      	mov	r0, r3
   21104:	f001 bc4e 	b.w	229a4 <z_set_timeout_expiry>
}
   21108:	bd10      	pop	{r4, pc}
   2110a:	bf00      	nop
   2110c:	20025b4c 	.word	0x20025b4c
   21110:	20025b0c 	.word	0x20025b0c

00021114 <k_sched_time_slice_set>:
{
   21114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21116:	4607      	mov	r7, r0
   21118:	460d      	mov	r5, r1
	__asm__ volatile(
   2111a:	f04f 0320 	mov.w	r3, #32
   2111e:	f3ef 8411 	mrs	r4, BASEPRI
   21122:	f383 8811 	msr	BASEPRI, r3
   21126:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2112a:	481f      	ldr	r0, [pc, #124]	; (211a8 <k_sched_time_slice_set+0x94>)
   2112c:	f001 f940 	bl	223b0 <z_spin_lock_valid>
   21130:	b960      	cbnz	r0, 2114c <k_sched_time_slice_set+0x38>
   21132:	491e      	ldr	r1, [pc, #120]	; (211ac <k_sched_time_slice_set+0x98>)
   21134:	235f      	movs	r3, #95	; 0x5f
   21136:	4a1e      	ldr	r2, [pc, #120]	; (211b0 <k_sched_time_slice_set+0x9c>)
   21138:	481e      	ldr	r0, [pc, #120]	; (211b4 <k_sched_time_slice_set+0xa0>)
   2113a:	f002 fe9d 	bl	23e78 <printk>
   2113e:	481e      	ldr	r0, [pc, #120]	; (211b8 <k_sched_time_slice_set+0xa4>)
   21140:	f002 fe9a 	bl	23e78 <printk>
   21144:	215f      	movs	r1, #95	; 0x5f
   21146:	481a      	ldr	r0, [pc, #104]	; (211b0 <k_sched_time_slice_set+0x9c>)
   21148:	f002 fea3 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2114c:	4816      	ldr	r0, [pc, #88]	; (211a8 <k_sched_time_slice_set+0x94>)
   2114e:	f001 f94d 	bl	223ec <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   21152:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   21156:	2200      	movs	r2, #0
   21158:	f240 30e7 	movw	r0, #999	; 0x3e7
   2115c:	2100      	movs	r1, #0
   2115e:	4b17      	ldr	r3, [pc, #92]	; (211bc <k_sched_time_slice_set+0xa8>)
   21160:	fbc6 0107 	smlal	r0, r1, r6, r7
   21164:	611a      	str	r2, [r3, #16]
   21166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2116a:	2300      	movs	r3, #0
   2116c:	f7eb f858 	bl	c220 <__aeabi_ldivmod>
   21170:	4b13      	ldr	r3, [pc, #76]	; (211c0 <k_sched_time_slice_set+0xac>)
   21172:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   21174:	4b13      	ldr	r3, [pc, #76]	; (211c4 <k_sched_time_slice_set+0xb0>)
   21176:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   21178:	f7ff ffb6 	bl	210e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2117c:	480a      	ldr	r0, [pc, #40]	; (211a8 <k_sched_time_slice_set+0x94>)
   2117e:	f001 f925 	bl	223cc <z_spin_unlock_valid>
   21182:	b960      	cbnz	r0, 2119e <k_sched_time_slice_set+0x8a>
   21184:	4910      	ldr	r1, [pc, #64]	; (211c8 <k_sched_time_slice_set+0xb4>)
   21186:	2372      	movs	r3, #114	; 0x72
   21188:	4a09      	ldr	r2, [pc, #36]	; (211b0 <k_sched_time_slice_set+0x9c>)
   2118a:	480a      	ldr	r0, [pc, #40]	; (211b4 <k_sched_time_slice_set+0xa0>)
   2118c:	f002 fe74 	bl	23e78 <printk>
   21190:	480e      	ldr	r0, [pc, #56]	; (211cc <k_sched_time_slice_set+0xb8>)
   21192:	f002 fe71 	bl	23e78 <printk>
   21196:	2172      	movs	r1, #114	; 0x72
   21198:	4805      	ldr	r0, [pc, #20]	; (211b0 <k_sched_time_slice_set+0x9c>)
   2119a:	f002 fe7a 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   2119e:	f384 8811 	msr	BASEPRI, r4
   211a2:	f3bf 8f6f 	isb	sy
}
   211a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211a8:	20025b44 	.word	0x20025b44
   211ac:	00026ae6 	.word	0x00026ae6
   211b0:	00026abf 	.word	0x00026abf
   211b4:	0002694b 	.word	0x0002694b
   211b8:	00026afb 	.word	0x00026afb
   211bc:	20025b0c 	.word	0x20025b0c
   211c0:	20025b4c 	.word	0x20025b4c
   211c4:	20025b48 	.word	0x20025b48
   211c8:	00026b10 	.word	0x00026b10
   211cc:	00026b27 	.word	0x00026b27

000211d0 <z_unpend_thread_no_timeout>:
{
   211d0:	b538      	push	{r3, r4, r5, lr}
   211d2:	4604      	mov	r4, r0
	__asm__ volatile(
   211d4:	f04f 0320 	mov.w	r3, #32
   211d8:	f3ef 8511 	mrs	r5, BASEPRI
   211dc:	f383 8811 	msr	BASEPRI, r3
   211e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   211e4:	481b      	ldr	r0, [pc, #108]	; (21254 <z_unpend_thread_no_timeout+0x84>)
   211e6:	f001 f8e3 	bl	223b0 <z_spin_lock_valid>
   211ea:	b960      	cbnz	r0, 21206 <z_unpend_thread_no_timeout+0x36>
   211ec:	491a      	ldr	r1, [pc, #104]	; (21258 <z_unpend_thread_no_timeout+0x88>)
   211ee:	235f      	movs	r3, #95	; 0x5f
   211f0:	4a1a      	ldr	r2, [pc, #104]	; (2125c <z_unpend_thread_no_timeout+0x8c>)
   211f2:	481b      	ldr	r0, [pc, #108]	; (21260 <z_unpend_thread_no_timeout+0x90>)
   211f4:	f002 fe40 	bl	23e78 <printk>
   211f8:	481a      	ldr	r0, [pc, #104]	; (21264 <z_unpend_thread_no_timeout+0x94>)
   211fa:	f002 fe3d 	bl	23e78 <printk>
   211fe:	215f      	movs	r1, #95	; 0x5f
   21200:	4816      	ldr	r0, [pc, #88]	; (2125c <z_unpend_thread_no_timeout+0x8c>)
   21202:	f002 fe46 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21206:	4813      	ldr	r0, [pc, #76]	; (21254 <z_unpend_thread_no_timeout+0x84>)
   21208:	f001 f8f0 	bl	223ec <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2120c:	f104 0008 	add.w	r0, r4, #8
   21210:	f7ff ff52 	bl	210b8 <pended_on.isra.16>
   21214:	4621      	mov	r1, r4
   21216:	f000 f8e5 	bl	213e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2121a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2121c:	480d      	ldr	r0, [pc, #52]	; (21254 <z_unpend_thread_no_timeout+0x84>)
   2121e:	f023 0302 	bic.w	r3, r3, #2
   21222:	7363      	strb	r3, [r4, #13]
   21224:	f001 f8d2 	bl	223cc <z_spin_unlock_valid>
   21228:	b960      	cbnz	r0, 21244 <z_unpend_thread_no_timeout+0x74>
   2122a:	490f      	ldr	r1, [pc, #60]	; (21268 <z_unpend_thread_no_timeout+0x98>)
   2122c:	2372      	movs	r3, #114	; 0x72
   2122e:	4a0b      	ldr	r2, [pc, #44]	; (2125c <z_unpend_thread_no_timeout+0x8c>)
   21230:	480b      	ldr	r0, [pc, #44]	; (21260 <z_unpend_thread_no_timeout+0x90>)
   21232:	f002 fe21 	bl	23e78 <printk>
   21236:	480d      	ldr	r0, [pc, #52]	; (2126c <z_unpend_thread_no_timeout+0x9c>)
   21238:	f002 fe1e 	bl	23e78 <printk>
   2123c:	2172      	movs	r1, #114	; 0x72
   2123e:	4807      	ldr	r0, [pc, #28]	; (2125c <z_unpend_thread_no_timeout+0x8c>)
   21240:	f002 fe27 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21244:	f385 8811 	msr	BASEPRI, r5
   21248:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2124c:	2300      	movs	r3, #0
   2124e:	60a3      	str	r3, [r4, #8]
}
   21250:	bd38      	pop	{r3, r4, r5, pc}
   21252:	bf00      	nop
   21254:	20025b44 	.word	0x20025b44
   21258:	00026ae6 	.word	0x00026ae6
   2125c:	00026abf 	.word	0x00026abf
   21260:	0002694b 	.word	0x0002694b
   21264:	00026afb 	.word	0x00026afb
   21268:	00026b10 	.word	0x00026b10
   2126c:	00026b27 	.word	0x00026b27

00021270 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21270:	b510      	push	{r4, lr}
   21272:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   21274:	460c      	mov	r4, r1
   21276:	b9c1      	cbnz	r1, 212aa <z_reschedule+0x3a>
   21278:	f7ff ff0c 	bl	21094 <resched.part.15>
	if (resched(key.key)) {
   2127c:	b1a8      	cbz	r0, 212aa <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2127e:	4610      	mov	r0, r2
   21280:	f001 f8a4 	bl	223cc <z_spin_unlock_valid>
   21284:	b960      	cbnz	r0, 212a0 <z_reschedule+0x30>
   21286:	4914      	ldr	r1, [pc, #80]	; (212d8 <z_reschedule+0x68>)
   21288:	2389      	movs	r3, #137	; 0x89
   2128a:	4a14      	ldr	r2, [pc, #80]	; (212dc <z_reschedule+0x6c>)
   2128c:	4814      	ldr	r0, [pc, #80]	; (212e0 <z_reschedule+0x70>)
   2128e:	f002 fdf3 	bl	23e78 <printk>
   21292:	4814      	ldr	r0, [pc, #80]	; (212e4 <z_reschedule+0x74>)
   21294:	f002 fdf0 	bl	23e78 <printk>
   21298:	2189      	movs	r1, #137	; 0x89
   2129a:	4810      	ldr	r0, [pc, #64]	; (212dc <z_reschedule+0x6c>)
   2129c:	f002 fdf9 	bl	23e92 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   212a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   212a4:	2000      	movs	r0, #0
   212a6:	f7ec bce9 	b.w	dc7c <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   212aa:	4610      	mov	r0, r2
   212ac:	f001 f88e 	bl	223cc <z_spin_unlock_valid>
   212b0:	b960      	cbnz	r0, 212cc <z_reschedule+0x5c>
   212b2:	4909      	ldr	r1, [pc, #36]	; (212d8 <z_reschedule+0x68>)
   212b4:	2372      	movs	r3, #114	; 0x72
   212b6:	4a09      	ldr	r2, [pc, #36]	; (212dc <z_reschedule+0x6c>)
   212b8:	4809      	ldr	r0, [pc, #36]	; (212e0 <z_reschedule+0x70>)
   212ba:	f002 fddd 	bl	23e78 <printk>
   212be:	4809      	ldr	r0, [pc, #36]	; (212e4 <z_reschedule+0x74>)
   212c0:	f002 fdda 	bl	23e78 <printk>
   212c4:	2172      	movs	r1, #114	; 0x72
   212c6:	4805      	ldr	r0, [pc, #20]	; (212dc <z_reschedule+0x6c>)
   212c8:	f002 fde3 	bl	23e92 <assert_post_action>
   212cc:	f384 8811 	msr	BASEPRI, r4
   212d0:	f3bf 8f6f 	isb	sy
   212d4:	bd10      	pop	{r4, pc}
   212d6:	bf00      	nop
   212d8:	00026b10 	.word	0x00026b10
   212dc:	00026abf 	.word	0x00026abf
   212e0:	0002694b 	.word	0x0002694b
   212e4:	00026b27 	.word	0x00026b27

000212e8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   212e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   212ea:	f04f 0320 	mov.w	r3, #32
   212ee:	f3ef 8511 	mrs	r5, BASEPRI
   212f2:	f383 8811 	msr	BASEPRI, r3
   212f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   212fa:	482d      	ldr	r0, [pc, #180]	; (213b0 <k_sched_lock+0xc8>)
   212fc:	f001 f858 	bl	223b0 <z_spin_lock_valid>
   21300:	b960      	cbnz	r0, 2131c <k_sched_lock+0x34>
   21302:	492c      	ldr	r1, [pc, #176]	; (213b4 <k_sched_lock+0xcc>)
   21304:	235f      	movs	r3, #95	; 0x5f
   21306:	4a2c      	ldr	r2, [pc, #176]	; (213b8 <k_sched_lock+0xd0>)
   21308:	482c      	ldr	r0, [pc, #176]	; (213bc <k_sched_lock+0xd4>)
   2130a:	f002 fdb5 	bl	23e78 <printk>
   2130e:	482c      	ldr	r0, [pc, #176]	; (213c0 <k_sched_lock+0xd8>)
   21310:	f002 fdb2 	bl	23e78 <printk>
   21314:	215f      	movs	r1, #95	; 0x5f
   21316:	4828      	ldr	r0, [pc, #160]	; (213b8 <k_sched_lock+0xd0>)
   21318:	f002 fdbb 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2131c:	4824      	ldr	r0, [pc, #144]	; (213b0 <k_sched_lock+0xc8>)
   2131e:	f001 f865 	bl	223ec <z_spin_lock_set_owner>
   21322:	f3ef 8305 	mrs	r3, IPSR
   21326:	2b0d      	cmp	r3, #13
   21328:	d804      	bhi.n	21334 <k_sched_lock+0x4c>
   2132a:	b193      	cbz	r3, 21352 <k_sched_lock+0x6a>
   2132c:	4b25      	ldr	r3, [pc, #148]	; (213c4 <k_sched_lock+0xdc>)
   2132e:	685b      	ldr	r3, [r3, #4]
   21330:	051b      	lsls	r3, r3, #20
   21332:	d40e      	bmi.n	21352 <k_sched_lock+0x6a>
	__ASSERT(!z_arch_is_in_isr(), "");
   21334:	4924      	ldr	r1, [pc, #144]	; (213c8 <k_sched_lock+0xe0>)
   21336:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2133a:	4a24      	ldr	r2, [pc, #144]	; (213cc <k_sched_lock+0xe4>)
   2133c:	481f      	ldr	r0, [pc, #124]	; (213bc <k_sched_lock+0xd4>)
   2133e:	f002 fd9b 	bl	23e78 <printk>
   21342:	4823      	ldr	r0, [pc, #140]	; (213d0 <k_sched_lock+0xe8>)
   21344:	f002 fd98 	bl	23e78 <printk>
   21348:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2134c:	481f      	ldr	r0, [pc, #124]	; (213cc <k_sched_lock+0xe4>)
   2134e:	f002 fda0 	bl	23e92 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   21352:	4c20      	ldr	r4, [pc, #128]	; (213d4 <k_sched_lock+0xec>)
   21354:	68a2      	ldr	r2, [r4, #8]
   21356:	7bd2      	ldrb	r2, [r2, #15]
   21358:	2a01      	cmp	r2, #1
   2135a:	d10e      	bne.n	2137a <k_sched_lock+0x92>
   2135c:	491e      	ldr	r1, [pc, #120]	; (213d8 <k_sched_lock+0xf0>)
   2135e:	f240 130d 	movw	r3, #269	; 0x10d
   21362:	4a1a      	ldr	r2, [pc, #104]	; (213cc <k_sched_lock+0xe4>)
   21364:	4815      	ldr	r0, [pc, #84]	; (213bc <k_sched_lock+0xd4>)
   21366:	f002 fd87 	bl	23e78 <printk>
   2136a:	4819      	ldr	r0, [pc, #100]	; (213d0 <k_sched_lock+0xe8>)
   2136c:	f002 fd84 	bl	23e78 <printk>
   21370:	f240 110d 	movw	r1, #269	; 0x10d
   21374:	4815      	ldr	r0, [pc, #84]	; (213cc <k_sched_lock+0xe4>)
   21376:	f002 fd8c 	bl	23e92 <assert_post_action>
	--_current->base.sched_locked;
   2137a:	68a2      	ldr	r2, [r4, #8]
   2137c:	7bd3      	ldrb	r3, [r2, #15]
   2137e:	3b01      	subs	r3, #1
   21380:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21382:	480b      	ldr	r0, [pc, #44]	; (213b0 <k_sched_lock+0xc8>)
   21384:	f001 f822 	bl	223cc <z_spin_unlock_valid>
   21388:	b960      	cbnz	r0, 213a4 <k_sched_lock+0xbc>
   2138a:	4914      	ldr	r1, [pc, #80]	; (213dc <k_sched_lock+0xf4>)
   2138c:	2372      	movs	r3, #114	; 0x72
   2138e:	4a0a      	ldr	r2, [pc, #40]	; (213b8 <k_sched_lock+0xd0>)
   21390:	480a      	ldr	r0, [pc, #40]	; (213bc <k_sched_lock+0xd4>)
   21392:	f002 fd71 	bl	23e78 <printk>
   21396:	4812      	ldr	r0, [pc, #72]	; (213e0 <k_sched_lock+0xf8>)
   21398:	f002 fd6e 	bl	23e78 <printk>
   2139c:	2172      	movs	r1, #114	; 0x72
   2139e:	4806      	ldr	r0, [pc, #24]	; (213b8 <k_sched_lock+0xd0>)
   213a0:	f002 fd77 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   213a4:	f385 8811 	msr	BASEPRI, r5
   213a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   213ac:	bd38      	pop	{r3, r4, r5, pc}
   213ae:	bf00      	nop
   213b0:	20025b44 	.word	0x20025b44
   213b4:	00026ae6 	.word	0x00026ae6
   213b8:	00026abf 	.word	0x00026abf
   213bc:	0002694b 	.word	0x0002694b
   213c0:	00026afb 	.word	0x00026afb
   213c4:	e000ed00 	.word	0xe000ed00
   213c8:	00027998 	.word	0x00027998
   213cc:	0002796c 	.word	0x0002796c
   213d0:	0002789d 	.word	0x0002789d
   213d4:	20025b0c 	.word	0x20025b0c
   213d8:	000279ac 	.word	0x000279ac
   213dc:	00026b10 	.word	0x00026b10
   213e0:	00026b27 	.word	0x00026b27

000213e4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   213e4:	4b12      	ldr	r3, [pc, #72]	; (21430 <z_priq_dumb_remove+0x4c>)
{
   213e6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   213e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   213ec:	4282      	cmp	r2, r0
{
   213ee:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   213f0:	d105      	bne.n	213fe <z_priq_dumb_remove+0x1a>
   213f2:	689b      	ldr	r3, [r3, #8]
   213f4:	428b      	cmp	r3, r1
   213f6:	d102      	bne.n	213fe <z_priq_dumb_remove+0x1a>
   213f8:	7b4b      	ldrb	r3, [r1, #13]
   213fa:	06db      	lsls	r3, r3, #27
   213fc:	d116      	bne.n	2142c <z_priq_dumb_remove+0x48>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   213fe:	4b0d      	ldr	r3, [pc, #52]	; (21434 <z_priq_dumb_remove+0x50>)
   21400:	429c      	cmp	r4, r3
   21402:	d10b      	bne.n	2141c <z_priq_dumb_remove+0x38>
   21404:	490c      	ldr	r1, [pc, #48]	; (21438 <z_priq_dumb_remove+0x54>)
   21406:	480d      	ldr	r0, [pc, #52]	; (2143c <z_priq_dumb_remove+0x58>)
   21408:	f44f 7325 	mov.w	r3, #660	; 0x294
   2140c:	4a0c      	ldr	r2, [pc, #48]	; (21440 <z_priq_dumb_remove+0x5c>)
   2140e:	f002 fd33 	bl	23e78 <printk>
   21412:	f44f 7125 	mov.w	r1, #660	; 0x294
   21416:	480a      	ldr	r0, [pc, #40]	; (21440 <z_priq_dumb_remove+0x5c>)
   21418:	f002 fd3b 	bl	23e92 <assert_post_action>
	node->prev->next = node->next;
   2141c:	e9d4 2300 	ldrd	r2, r3, [r4]
   21420:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21422:	6822      	ldr	r2, [r4, #0]
   21424:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   21426:	2300      	movs	r3, #0
	node->prev = NULL;
   21428:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2142c:	bd10      	pop	{r4, pc}
   2142e:	bf00      	nop
   21430:	20025b0c 	.word	0x20025b0c
   21434:	2002193c 	.word	0x2002193c
   21438:	00027a55 	.word	0x00027a55
   2143c:	0002694b 	.word	0x0002694b
   21440:	000279fc 	.word	0x000279fc

00021444 <z_unpend_thread>:
{
   21444:	b538      	push	{r3, r4, r5, lr}
   21446:	4604      	mov	r4, r0
	__asm__ volatile(
   21448:	f04f 0320 	mov.w	r3, #32
   2144c:	f3ef 8511 	mrs	r5, BASEPRI
   21450:	f383 8811 	msr	BASEPRI, r3
   21454:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21458:	481d      	ldr	r0, [pc, #116]	; (214d0 <z_unpend_thread+0x8c>)
   2145a:	f000 ffa9 	bl	223b0 <z_spin_lock_valid>
   2145e:	b960      	cbnz	r0, 2147a <z_unpend_thread+0x36>
   21460:	491c      	ldr	r1, [pc, #112]	; (214d4 <z_unpend_thread+0x90>)
   21462:	235f      	movs	r3, #95	; 0x5f
   21464:	4a1c      	ldr	r2, [pc, #112]	; (214d8 <z_unpend_thread+0x94>)
   21466:	481d      	ldr	r0, [pc, #116]	; (214dc <z_unpend_thread+0x98>)
   21468:	f002 fd06 	bl	23e78 <printk>
   2146c:	481c      	ldr	r0, [pc, #112]	; (214e0 <z_unpend_thread+0x9c>)
   2146e:	f002 fd03 	bl	23e78 <printk>
   21472:	215f      	movs	r1, #95	; 0x5f
   21474:	4818      	ldr	r0, [pc, #96]	; (214d8 <z_unpend_thread+0x94>)
   21476:	f002 fd0c 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2147a:	4815      	ldr	r0, [pc, #84]	; (214d0 <z_unpend_thread+0x8c>)
   2147c:	f000 ffb6 	bl	223ec <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   21480:	f104 0008 	add.w	r0, r4, #8
   21484:	f7ff fe18 	bl	210b8 <pended_on.isra.16>
   21488:	4621      	mov	r1, r4
   2148a:	f7ff ffab 	bl	213e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2148e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21490:	480f      	ldr	r0, [pc, #60]	; (214d0 <z_unpend_thread+0x8c>)
   21492:	f023 0302 	bic.w	r3, r3, #2
   21496:	7363      	strb	r3, [r4, #13]
   21498:	f000 ff98 	bl	223cc <z_spin_unlock_valid>
   2149c:	b960      	cbnz	r0, 214b8 <z_unpend_thread+0x74>
   2149e:	4911      	ldr	r1, [pc, #68]	; (214e4 <z_unpend_thread+0xa0>)
   214a0:	2372      	movs	r3, #114	; 0x72
   214a2:	4a0d      	ldr	r2, [pc, #52]	; (214d8 <z_unpend_thread+0x94>)
   214a4:	480d      	ldr	r0, [pc, #52]	; (214dc <z_unpend_thread+0x98>)
   214a6:	f002 fce7 	bl	23e78 <printk>
   214aa:	480f      	ldr	r0, [pc, #60]	; (214e8 <z_unpend_thread+0xa4>)
   214ac:	f002 fce4 	bl	23e78 <printk>
   214b0:	2172      	movs	r1, #114	; 0x72
   214b2:	4809      	ldr	r0, [pc, #36]	; (214d8 <z_unpend_thread+0x94>)
   214b4:	f002 fced 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   214b8:	f385 8811 	msr	BASEPRI, r5
   214bc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   214c0:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   214c2:	f104 0018 	add.w	r0, r4, #24
   214c6:	60a3      	str	r3, [r4, #8]
}
   214c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   214cc:	f001 b9d8 	b.w	22880 <z_abort_timeout>
   214d0:	20025b44 	.word	0x20025b44
   214d4:	00026ae6 	.word	0x00026ae6
   214d8:	00026abf 	.word	0x00026abf
   214dc:	0002694b 	.word	0x0002694b
   214e0:	00026afb 	.word	0x00026afb
   214e4:	00026b10 	.word	0x00026b10
   214e8:	00026b27 	.word	0x00026b27

000214ec <update_cache>:
{
   214ec:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   214ee:	4c15      	ldr	r4, [pc, #84]	; (21544 <update_cache+0x58>)
{
   214f0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   214f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   214f6:	f003 fde6 	bl	250c6 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   214fa:	4605      	mov	r5, r0
   214fc:	b900      	cbnz	r0, 21500 <update_cache+0x14>
   214fe:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   21500:	b9ca      	cbnz	r2, 21536 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   21502:	68a3      	ldr	r3, [r4, #8]
   21504:	b963      	cbnz	r3, 21520 <update_cache+0x34>
   21506:	4910      	ldr	r1, [pc, #64]	; (21548 <update_cache+0x5c>)
   21508:	2375      	movs	r3, #117	; 0x75
   2150a:	4a10      	ldr	r2, [pc, #64]	; (2154c <update_cache+0x60>)
   2150c:	4810      	ldr	r0, [pc, #64]	; (21550 <update_cache+0x64>)
   2150e:	f002 fcb3 	bl	23e78 <printk>
   21512:	4810      	ldr	r0, [pc, #64]	; (21554 <update_cache+0x68>)
   21514:	f002 fcb0 	bl	23e78 <printk>
   21518:	2175      	movs	r1, #117	; 0x75
   2151a:	480c      	ldr	r0, [pc, #48]	; (2154c <update_cache+0x60>)
   2151c:	f002 fcb9 	bl	23e92 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21520:	68a3      	ldr	r3, [r4, #8]
   21522:	7b5a      	ldrb	r2, [r3, #13]
   21524:	06d2      	lsls	r2, r2, #27
   21526:	d106      	bne.n	21536 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21528:	69aa      	ldr	r2, [r5, #24]
   2152a:	b922      	cbnz	r2, 21536 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   2152c:	89da      	ldrh	r2, [r3, #14]
   2152e:	2a7f      	cmp	r2, #127	; 0x7f
   21530:	d901      	bls.n	21536 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   21532:	6263      	str	r3, [r4, #36]	; 0x24
}
   21534:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   21536:	68a3      	ldr	r3, [r4, #8]
   21538:	42ab      	cmp	r3, r5
   2153a:	d001      	beq.n	21540 <update_cache+0x54>
			z_reset_time_slice();
   2153c:	f7ff fdd4 	bl	210e8 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   21540:	6265      	str	r5, [r4, #36]	; 0x24
}
   21542:	e7f7      	b.n	21534 <update_cache+0x48>
   21544:	20025b0c 	.word	0x20025b0c
   21548:	00027a36 	.word	0x00027a36
   2154c:	000279fc 	.word	0x000279fc
   21550:	0002694b 	.word	0x0002694b
   21554:	0002789d 	.word	0x0002789d

00021558 <k_sched_unlock>:
{
   21558:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   2155a:	4c33      	ldr	r4, [pc, #204]	; (21628 <k_sched_unlock+0xd0>)
   2155c:	68a2      	ldr	r2, [r4, #8]
   2155e:	7bd2      	ldrb	r2, [r2, #15]
   21560:	b972      	cbnz	r2, 21580 <k_sched_unlock+0x28>
   21562:	4932      	ldr	r1, [pc, #200]	; (2162c <k_sched_unlock+0xd4>)
   21564:	f240 232d 	movw	r3, #557	; 0x22d
   21568:	4a31      	ldr	r2, [pc, #196]	; (21630 <k_sched_unlock+0xd8>)
   2156a:	4832      	ldr	r0, [pc, #200]	; (21634 <k_sched_unlock+0xdc>)
   2156c:	f002 fc84 	bl	23e78 <printk>
   21570:	4831      	ldr	r0, [pc, #196]	; (21638 <k_sched_unlock+0xe0>)
   21572:	f002 fc81 	bl	23e78 <printk>
   21576:	f240 212d 	movw	r1, #557	; 0x22d
   2157a:	482d      	ldr	r0, [pc, #180]	; (21630 <k_sched_unlock+0xd8>)
   2157c:	f002 fc89 	bl	23e92 <assert_post_action>
   21580:	f3ef 8305 	mrs	r3, IPSR
   21584:	2b0d      	cmp	r3, #13
   21586:	d804      	bhi.n	21592 <k_sched_unlock+0x3a>
   21588:	b193      	cbz	r3, 215b0 <k_sched_unlock+0x58>
   2158a:	4b2c      	ldr	r3, [pc, #176]	; (2163c <k_sched_unlock+0xe4>)
   2158c:	685b      	ldr	r3, [r3, #4]
   2158e:	051b      	lsls	r3, r3, #20
   21590:	d40e      	bmi.n	215b0 <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   21592:	492b      	ldr	r1, [pc, #172]	; (21640 <k_sched_unlock+0xe8>)
   21594:	f240 232e 	movw	r3, #558	; 0x22e
   21598:	4a25      	ldr	r2, [pc, #148]	; (21630 <k_sched_unlock+0xd8>)
   2159a:	4826      	ldr	r0, [pc, #152]	; (21634 <k_sched_unlock+0xdc>)
   2159c:	f002 fc6c 	bl	23e78 <printk>
   215a0:	4825      	ldr	r0, [pc, #148]	; (21638 <k_sched_unlock+0xe0>)
   215a2:	f002 fc69 	bl	23e78 <printk>
   215a6:	f240 212e 	movw	r1, #558	; 0x22e
   215aa:	4821      	ldr	r0, [pc, #132]	; (21630 <k_sched_unlock+0xd8>)
   215ac:	f002 fc71 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   215b0:	f04f 0320 	mov.w	r3, #32
   215b4:	f3ef 8511 	mrs	r5, BASEPRI
   215b8:	f383 8811 	msr	BASEPRI, r3
   215bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   215c0:	4820      	ldr	r0, [pc, #128]	; (21644 <k_sched_unlock+0xec>)
   215c2:	f000 fef5 	bl	223b0 <z_spin_lock_valid>
   215c6:	b960      	cbnz	r0, 215e2 <k_sched_unlock+0x8a>
   215c8:	491f      	ldr	r1, [pc, #124]	; (21648 <k_sched_unlock+0xf0>)
   215ca:	235f      	movs	r3, #95	; 0x5f
   215cc:	4a1f      	ldr	r2, [pc, #124]	; (2164c <k_sched_unlock+0xf4>)
   215ce:	4819      	ldr	r0, [pc, #100]	; (21634 <k_sched_unlock+0xdc>)
   215d0:	f002 fc52 	bl	23e78 <printk>
   215d4:	481e      	ldr	r0, [pc, #120]	; (21650 <k_sched_unlock+0xf8>)
   215d6:	f002 fc4f 	bl	23e78 <printk>
   215da:	215f      	movs	r1, #95	; 0x5f
   215dc:	481b      	ldr	r0, [pc, #108]	; (2164c <k_sched_unlock+0xf4>)
   215de:	f002 fc58 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   215e2:	4818      	ldr	r0, [pc, #96]	; (21644 <k_sched_unlock+0xec>)
   215e4:	f000 ff02 	bl	223ec <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   215e8:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   215ea:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   215ec:	7bd3      	ldrb	r3, [r2, #15]
   215ee:	3301      	adds	r3, #1
   215f0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   215f2:	f7ff ff7b 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   215f6:	4813      	ldr	r0, [pc, #76]	; (21644 <k_sched_unlock+0xec>)
   215f8:	f000 fee8 	bl	223cc <z_spin_unlock_valid>
   215fc:	b960      	cbnz	r0, 21618 <k_sched_unlock+0xc0>
   215fe:	4915      	ldr	r1, [pc, #84]	; (21654 <k_sched_unlock+0xfc>)
   21600:	2372      	movs	r3, #114	; 0x72
   21602:	4a12      	ldr	r2, [pc, #72]	; (2164c <k_sched_unlock+0xf4>)
   21604:	480b      	ldr	r0, [pc, #44]	; (21634 <k_sched_unlock+0xdc>)
   21606:	f002 fc37 	bl	23e78 <printk>
   2160a:	4813      	ldr	r0, [pc, #76]	; (21658 <k_sched_unlock+0x100>)
   2160c:	f002 fc34 	bl	23e78 <printk>
   21610:	2172      	movs	r1, #114	; 0x72
   21612:	480e      	ldr	r0, [pc, #56]	; (2164c <k_sched_unlock+0xf4>)
   21614:	f002 fc3d 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21618:	f385 8811 	msr	BASEPRI, r5
   2161c:	f3bf 8f6f 	isb	sy
}
   21620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   21624:	f003 bd45 	b.w	250b2 <z_reschedule_unlocked>
   21628:	20025b0c 	.word	0x20025b0c
   2162c:	000279d4 	.word	0x000279d4
   21630:	000279fc 	.word	0x000279fc
   21634:	0002694b 	.word	0x0002694b
   21638:	0002789d 	.word	0x0002789d
   2163c:	e000ed00 	.word	0xe000ed00
   21640:	00027998 	.word	0x00027998
   21644:	20025b44 	.word	0x20025b44
   21648:	00026ae6 	.word	0x00026ae6
   2164c:	00026abf 	.word	0x00026abf
   21650:	00026afb 	.word	0x00026afb
   21654:	00026b10 	.word	0x00026b10
   21658:	00026b27 	.word	0x00026b27

0002165c <z_add_thread_to_ready_q>:
{
   2165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2165e:	4604      	mov	r4, r0
	__asm__ volatile(
   21660:	f04f 0320 	mov.w	r3, #32
   21664:	f3ef 8511 	mrs	r5, BASEPRI
   21668:	f383 8811 	msr	BASEPRI, r3
   2166c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21670:	482f      	ldr	r0, [pc, #188]	; (21730 <z_add_thread_to_ready_q+0xd4>)
   21672:	f000 fe9d 	bl	223b0 <z_spin_lock_valid>
   21676:	b960      	cbnz	r0, 21692 <z_add_thread_to_ready_q+0x36>
   21678:	492e      	ldr	r1, [pc, #184]	; (21734 <z_add_thread_to_ready_q+0xd8>)
   2167a:	235f      	movs	r3, #95	; 0x5f
   2167c:	4a2e      	ldr	r2, [pc, #184]	; (21738 <z_add_thread_to_ready_q+0xdc>)
   2167e:	482f      	ldr	r0, [pc, #188]	; (2173c <z_add_thread_to_ready_q+0xe0>)
   21680:	f002 fbfa 	bl	23e78 <printk>
   21684:	482e      	ldr	r0, [pc, #184]	; (21740 <z_add_thread_to_ready_q+0xe4>)
   21686:	f002 fbf7 	bl	23e78 <printk>
   2168a:	215f      	movs	r1, #95	; 0x5f
   2168c:	482a      	ldr	r0, [pc, #168]	; (21738 <z_add_thread_to_ready_q+0xdc>)
   2168e:	f002 fc00 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21692:	4827      	ldr	r0, [pc, #156]	; (21730 <z_add_thread_to_ready_q+0xd4>)
   21694:	f000 feaa 	bl	223ec <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21698:	4b2a      	ldr	r3, [pc, #168]	; (21744 <z_add_thread_to_ready_q+0xe8>)
   2169a:	429c      	cmp	r4, r3
   2169c:	d10b      	bne.n	216b6 <z_add_thread_to_ready_q+0x5a>
   2169e:	492a      	ldr	r1, [pc, #168]	; (21748 <z_add_thread_to_ready_q+0xec>)
   216a0:	4826      	ldr	r0, [pc, #152]	; (2173c <z_add_thread_to_ready_q+0xe0>)
   216a2:	f240 237e 	movw	r3, #638	; 0x27e
   216a6:	4a29      	ldr	r2, [pc, #164]	; (2174c <z_add_thread_to_ready_q+0xf0>)
   216a8:	f002 fbe6 	bl	23e78 <printk>
   216ac:	f240 217e 	movw	r1, #638	; 0x27e
   216b0:	4826      	ldr	r0, [pc, #152]	; (2174c <z_add_thread_to_ready_q+0xf0>)
   216b2:	f002 fbee 	bl	23e92 <assert_post_action>
	return list->head == list;
   216b6:	4a26      	ldr	r2, [pc, #152]	; (21750 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216b8:	f102 0128 	add.w	r1, r2, #40	; 0x28
   216bc:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   216c0:	428b      	cmp	r3, r1
   216c2:	d00b      	beq.n	216dc <z_add_thread_to_ready_q+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216c4:	b153      	cbz	r3, 216dc <z_add_thread_to_ready_q+0x80>
	if (t1->base.prio < t2->base.prio) {
   216c6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   216ca:	f993 700e 	ldrsb.w	r7, [r3, #14]
   216ce:	42b7      	cmp	r7, r6
   216d0:	dc0a      	bgt.n	216e8 <z_add_thread_to_ready_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
   216d2:	4298      	cmp	r0, r3
   216d4:	d002      	beq.n	216dc <z_add_thread_to_ready_q+0x80>
   216d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216d8:	2b00      	cmp	r3, #0
   216da:	d1f6      	bne.n	216ca <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   216dc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   216e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   216e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   216e4:	62d4      	str	r4, [r2, #44]	; 0x2c
   216e6:	e005      	b.n	216f4 <z_add_thread_to_ready_q+0x98>
	node->prev = successor->prev;
   216e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   216ea:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   216ee:	685a      	ldr	r2, [r3, #4]
   216f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   216f2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   216f4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   216f6:	2000      	movs	r0, #0
   216f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   216fc:	7363      	strb	r3, [r4, #13]
   216fe:	f7ff fef5 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21702:	480b      	ldr	r0, [pc, #44]	; (21730 <z_add_thread_to_ready_q+0xd4>)
   21704:	f000 fe62 	bl	223cc <z_spin_unlock_valid>
   21708:	b960      	cbnz	r0, 21724 <z_add_thread_to_ready_q+0xc8>
   2170a:	4912      	ldr	r1, [pc, #72]	; (21754 <z_add_thread_to_ready_q+0xf8>)
   2170c:	2372      	movs	r3, #114	; 0x72
   2170e:	4a0a      	ldr	r2, [pc, #40]	; (21738 <z_add_thread_to_ready_q+0xdc>)
   21710:	480a      	ldr	r0, [pc, #40]	; (2173c <z_add_thread_to_ready_q+0xe0>)
   21712:	f002 fbb1 	bl	23e78 <printk>
   21716:	4810      	ldr	r0, [pc, #64]	; (21758 <z_add_thread_to_ready_q+0xfc>)
   21718:	f002 fbae 	bl	23e78 <printk>
   2171c:	2172      	movs	r1, #114	; 0x72
   2171e:	4806      	ldr	r0, [pc, #24]	; (21738 <z_add_thread_to_ready_q+0xdc>)
   21720:	f002 fbb7 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21724:	f385 8811 	msr	BASEPRI, r5
   21728:	f3bf 8f6f 	isb	sy
}
   2172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2172e:	bf00      	nop
   21730:	20025b44 	.word	0x20025b44
   21734:	00026ae6 	.word	0x00026ae6
   21738:	00026abf 	.word	0x00026abf
   2173c:	0002694b 	.word	0x0002694b
   21740:	00026afb 	.word	0x00026afb
   21744:	2002193c 	.word	0x2002193c
   21748:	00027a55 	.word	0x00027a55
   2174c:	000279fc 	.word	0x000279fc
   21750:	20025b0c 	.word	0x20025b0c
   21754:	00026b10 	.word	0x00026b10
   21758:	00026b27 	.word	0x00026b27

0002175c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   2175c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   21760:	b570      	push	{r4, r5, r6, lr}
   21762:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   21764:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   21768:	2b00      	cmp	r3, #0
   2176a:	d040      	beq.n	217ee <z_thread_timeout+0x92>
	__asm__ volatile(
   2176c:	f04f 0320 	mov.w	r3, #32
   21770:	f3ef 8611 	mrs	r6, BASEPRI
   21774:	f383 8811 	msr	BASEPRI, r3
   21778:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2177c:	4824      	ldr	r0, [pc, #144]	; (21810 <z_thread_timeout+0xb4>)
   2177e:	f000 fe17 	bl	223b0 <z_spin_lock_valid>
   21782:	b960      	cbnz	r0, 2179e <z_thread_timeout+0x42>
   21784:	4923      	ldr	r1, [pc, #140]	; (21814 <z_thread_timeout+0xb8>)
   21786:	235f      	movs	r3, #95	; 0x5f
   21788:	4a23      	ldr	r2, [pc, #140]	; (21818 <z_thread_timeout+0xbc>)
   2178a:	4824      	ldr	r0, [pc, #144]	; (2181c <z_thread_timeout+0xc0>)
   2178c:	f002 fb74 	bl	23e78 <printk>
   21790:	4823      	ldr	r0, [pc, #140]	; (21820 <z_thread_timeout+0xc4>)
   21792:	f002 fb71 	bl	23e78 <printk>
   21796:	215f      	movs	r1, #95	; 0x5f
   21798:	481f      	ldr	r0, [pc, #124]	; (21818 <z_thread_timeout+0xbc>)
   2179a:	f002 fb7a 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2179e:	481c      	ldr	r0, [pc, #112]	; (21810 <z_thread_timeout+0xb4>)
   217a0:	f000 fe24 	bl	223ec <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   217a4:	f1a4 0010 	sub.w	r0, r4, #16
   217a8:	f7ff fc86 	bl	210b8 <pended_on.isra.16>
   217ac:	4629      	mov	r1, r5
   217ae:	f7ff fe19 	bl	213e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   217b2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   217b6:	4816      	ldr	r0, [pc, #88]	; (21810 <z_thread_timeout+0xb4>)
   217b8:	f023 0302 	bic.w	r3, r3, #2
   217bc:	f804 3c0b 	strb.w	r3, [r4, #-11]
   217c0:	f000 fe04 	bl	223cc <z_spin_unlock_valid>
   217c4:	b960      	cbnz	r0, 217e0 <z_thread_timeout+0x84>
   217c6:	4917      	ldr	r1, [pc, #92]	; (21824 <z_thread_timeout+0xc8>)
   217c8:	2372      	movs	r3, #114	; 0x72
   217ca:	4a13      	ldr	r2, [pc, #76]	; (21818 <z_thread_timeout+0xbc>)
   217cc:	4813      	ldr	r0, [pc, #76]	; (2181c <z_thread_timeout+0xc0>)
   217ce:	f002 fb53 	bl	23e78 <printk>
   217d2:	4815      	ldr	r0, [pc, #84]	; (21828 <z_thread_timeout+0xcc>)
   217d4:	f002 fb50 	bl	23e78 <printk>
   217d8:	2172      	movs	r1, #114	; 0x72
   217da:	480f      	ldr	r0, [pc, #60]	; (21818 <z_thread_timeout+0xbc>)
   217dc:	f002 fb59 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   217e0:	f386 8811 	msr	BASEPRI, r6
   217e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   217e8:	2300      	movs	r3, #0
   217ea:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   217ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   217f2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   217f4:	f023 0314 	bic.w	r3, r3, #20
   217f8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   217fc:	f003 fc37 	bl	2506e <z_is_thread_ready>
   21800:	b120      	cbz	r0, 2180c <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   21802:	4628      	mov	r0, r5
}
   21804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21808:	f7ff bf28 	b.w	2165c <z_add_thread_to_ready_q>
   2180c:	bd70      	pop	{r4, r5, r6, pc}
   2180e:	bf00      	nop
   21810:	20025b44 	.word	0x20025b44
   21814:	00026ae6 	.word	0x00026ae6
   21818:	00026abf 	.word	0x00026abf
   2181c:	0002694b 	.word	0x0002694b
   21820:	00026afb 	.word	0x00026afb
   21824:	00026b10 	.word	0x00026b10
   21828:	00026b27 	.word	0x00026b27

0002182c <z_move_thread_to_end_of_prio_q>:
{
   2182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2182e:	4604      	mov	r4, r0
	__asm__ volatile(
   21830:	f04f 0320 	mov.w	r3, #32
   21834:	f3ef 8511 	mrs	r5, BASEPRI
   21838:	f383 8811 	msr	BASEPRI, r3
   2183c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21840:	4834      	ldr	r0, [pc, #208]	; (21914 <z_move_thread_to_end_of_prio_q+0xe8>)
   21842:	f000 fdb5 	bl	223b0 <z_spin_lock_valid>
   21846:	b960      	cbnz	r0, 21862 <z_move_thread_to_end_of_prio_q+0x36>
   21848:	4933      	ldr	r1, [pc, #204]	; (21918 <z_move_thread_to_end_of_prio_q+0xec>)
   2184a:	235f      	movs	r3, #95	; 0x5f
   2184c:	4a33      	ldr	r2, [pc, #204]	; (2191c <z_move_thread_to_end_of_prio_q+0xf0>)
   2184e:	4834      	ldr	r0, [pc, #208]	; (21920 <z_move_thread_to_end_of_prio_q+0xf4>)
   21850:	f002 fb12 	bl	23e78 <printk>
   21854:	4833      	ldr	r0, [pc, #204]	; (21924 <z_move_thread_to_end_of_prio_q+0xf8>)
   21856:	f002 fb0f 	bl	23e78 <printk>
   2185a:	215f      	movs	r1, #95	; 0x5f
   2185c:	482f      	ldr	r0, [pc, #188]	; (2191c <z_move_thread_to_end_of_prio_q+0xf0>)
   2185e:	f002 fb18 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21862:	482c      	ldr	r0, [pc, #176]	; (21914 <z_move_thread_to_end_of_prio_q+0xe8>)
   21864:	f000 fdc2 	bl	223ec <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21868:	7b63      	ldrb	r3, [r4, #13]
   2186a:	065a      	lsls	r2, r3, #25
   2186c:	d503      	bpl.n	21876 <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2186e:	4621      	mov	r1, r4
   21870:	482d      	ldr	r0, [pc, #180]	; (21928 <z_move_thread_to_end_of_prio_q+0xfc>)
   21872:	f7ff fdb7 	bl	213e4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21876:	4b2d      	ldr	r3, [pc, #180]	; (2192c <z_move_thread_to_end_of_prio_q+0x100>)
   21878:	429c      	cmp	r4, r3
   2187a:	d10b      	bne.n	21894 <z_move_thread_to_end_of_prio_q+0x68>
   2187c:	492c      	ldr	r1, [pc, #176]	; (21930 <z_move_thread_to_end_of_prio_q+0x104>)
   2187e:	4828      	ldr	r0, [pc, #160]	; (21920 <z_move_thread_to_end_of_prio_q+0xf4>)
   21880:	f240 237e 	movw	r3, #638	; 0x27e
   21884:	4a2b      	ldr	r2, [pc, #172]	; (21934 <z_move_thread_to_end_of_prio_q+0x108>)
   21886:	f002 faf7 	bl	23e78 <printk>
   2188a:	f240 217e 	movw	r1, #638	; 0x27e
   2188e:	4829      	ldr	r0, [pc, #164]	; (21934 <z_move_thread_to_end_of_prio_q+0x108>)
   21890:	f002 faff 	bl	23e92 <assert_post_action>
	return list->head == list;
   21894:	4a28      	ldr	r2, [pc, #160]	; (21938 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21896:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2189a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2189e:	428b      	cmp	r3, r1
   218a0:	d00b      	beq.n	218ba <z_move_thread_to_end_of_prio_q+0x8e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218a2:	b153      	cbz	r3, 218ba <z_move_thread_to_end_of_prio_q+0x8e>
	if (t1->base.prio < t2->base.prio) {
   218a4:	f994 600e 	ldrsb.w	r6, [r4, #14]
   218a8:	f993 700e 	ldrsb.w	r7, [r3, #14]
   218ac:	42b7      	cmp	r7, r6
   218ae:	dc0a      	bgt.n	218c6 <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   218b0:	4283      	cmp	r3, r0
   218b2:	d002      	beq.n	218ba <z_move_thread_to_end_of_prio_q+0x8e>
   218b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218b6:	2b00      	cmp	r3, #0
   218b8:	d1f6      	bne.n	218a8 <z_move_thread_to_end_of_prio_q+0x7c>
	node->prev = list->tail;
   218ba:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   218be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   218c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   218c2:	62d4      	str	r4, [r2, #44]	; 0x2c
   218c4:	e005      	b.n	218d2 <z_move_thread_to_end_of_prio_q+0xa6>
	node->prev = successor->prev;
   218c6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   218c8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   218cc:	6859      	ldr	r1, [r3, #4]
   218ce:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   218d0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   218d2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   218d4:	6890      	ldr	r0, [r2, #8]
   218d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   218da:	7363      	strb	r3, [r4, #13]
   218dc:	1b03      	subs	r3, r0, r4
   218de:	4258      	negs	r0, r3
   218e0:	4158      	adcs	r0, r3
   218e2:	f7ff fe03 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   218e6:	480b      	ldr	r0, [pc, #44]	; (21914 <z_move_thread_to_end_of_prio_q+0xe8>)
   218e8:	f000 fd70 	bl	223cc <z_spin_unlock_valid>
   218ec:	b960      	cbnz	r0, 21908 <z_move_thread_to_end_of_prio_q+0xdc>
   218ee:	4913      	ldr	r1, [pc, #76]	; (2193c <z_move_thread_to_end_of_prio_q+0x110>)
   218f0:	2372      	movs	r3, #114	; 0x72
   218f2:	4a0a      	ldr	r2, [pc, #40]	; (2191c <z_move_thread_to_end_of_prio_q+0xf0>)
   218f4:	480a      	ldr	r0, [pc, #40]	; (21920 <z_move_thread_to_end_of_prio_q+0xf4>)
   218f6:	f002 fabf 	bl	23e78 <printk>
   218fa:	4811      	ldr	r0, [pc, #68]	; (21940 <z_move_thread_to_end_of_prio_q+0x114>)
   218fc:	f002 fabc 	bl	23e78 <printk>
   21900:	2172      	movs	r1, #114	; 0x72
   21902:	4806      	ldr	r0, [pc, #24]	; (2191c <z_move_thread_to_end_of_prio_q+0xf0>)
   21904:	f002 fac5 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21908:	f385 8811 	msr	BASEPRI, r5
   2190c:	f3bf 8f6f 	isb	sy
}
   21910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21912:	bf00      	nop
   21914:	20025b44 	.word	0x20025b44
   21918:	00026ae6 	.word	0x00026ae6
   2191c:	00026abf 	.word	0x00026abf
   21920:	0002694b 	.word	0x0002694b
   21924:	00026afb 	.word	0x00026afb
   21928:	20025b34 	.word	0x20025b34
   2192c:	2002193c 	.word	0x2002193c
   21930:	00027a55 	.word	0x00027a55
   21934:	000279fc 	.word	0x000279fc
   21938:	20025b0c 	.word	0x20025b0c
   2193c:	00026b10 	.word	0x00026b10
   21940:	00026b27 	.word	0x00026b27

00021944 <z_time_slice>:
	if (pending_current == _current) {
   21944:	4a15      	ldr	r2, [pc, #84]	; (2199c <z_time_slice+0x58>)
   21946:	4916      	ldr	r1, [pc, #88]	; (219a0 <z_time_slice+0x5c>)
{
   21948:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   2194a:	680c      	ldr	r4, [r1, #0]
   2194c:	6893      	ldr	r3, [r2, #8]
   2194e:	42a3      	cmp	r3, r4
   21950:	4614      	mov	r4, r2
   21952:	d103      	bne.n	2195c <z_time_slice+0x18>
}
   21954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   21958:	f7ff bbc6 	b.w	210e8 <z_reset_time_slice>
	pending_current = NULL;
   2195c:	2500      	movs	r5, #0
   2195e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   21960:	4910      	ldr	r1, [pc, #64]	; (219a4 <z_time_slice+0x60>)
   21962:	6809      	ldr	r1, [r1, #0]
   21964:	b1b9      	cbz	r1, 21996 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   21966:	89d9      	ldrh	r1, [r3, #14]
   21968:	297f      	cmp	r1, #127	; 0x7f
   2196a:	d814      	bhi.n	21996 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   2196c:	490e      	ldr	r1, [pc, #56]	; (219a8 <z_time_slice+0x64>)
   2196e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   21972:	6809      	ldr	r1, [r1, #0]
   21974:	428d      	cmp	r5, r1
   21976:	db0e      	blt.n	21996 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   21978:	490c      	ldr	r1, [pc, #48]	; (219ac <z_time_slice+0x68>)
   2197a:	428b      	cmp	r3, r1
   2197c:	d00b      	beq.n	21996 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   2197e:	6999      	ldr	r1, [r3, #24]
   21980:	b949      	cbnz	r1, 21996 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   21982:	6911      	ldr	r1, [r2, #16]
   21984:	4281      	cmp	r1, r0
   21986:	dc03      	bgt.n	21990 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   21988:	4618      	mov	r0, r3
   2198a:	f7ff ff4f 	bl	2182c <z_move_thread_to_end_of_prio_q>
   2198e:	e7e1      	b.n	21954 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   21990:	1a09      	subs	r1, r1, r0
   21992:	6111      	str	r1, [r2, #16]
}
   21994:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   21996:	2300      	movs	r3, #0
   21998:	6123      	str	r3, [r4, #16]
   2199a:	e7fb      	b.n	21994 <z_time_slice+0x50>
   2199c:	20025b0c 	.word	0x20025b0c
   219a0:	20025b40 	.word	0x20025b40
   219a4:	20025b4c 	.word	0x20025b4c
   219a8:	20025b48 	.word	0x20025b48
   219ac:	2002193c 	.word	0x2002193c

000219b0 <z_remove_thread_from_ready_q>:
{
   219b0:	b538      	push	{r3, r4, r5, lr}
   219b2:	4604      	mov	r4, r0
	__asm__ volatile(
   219b4:	f04f 0320 	mov.w	r3, #32
   219b8:	f3ef 8511 	mrs	r5, BASEPRI
   219bc:	f383 8811 	msr	BASEPRI, r3
   219c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   219c4:	481d      	ldr	r0, [pc, #116]	; (21a3c <z_remove_thread_from_ready_q+0x8c>)
   219c6:	f000 fcf3 	bl	223b0 <z_spin_lock_valid>
   219ca:	b960      	cbnz	r0, 219e6 <z_remove_thread_from_ready_q+0x36>
   219cc:	491c      	ldr	r1, [pc, #112]	; (21a40 <z_remove_thread_from_ready_q+0x90>)
   219ce:	235f      	movs	r3, #95	; 0x5f
   219d0:	4a1c      	ldr	r2, [pc, #112]	; (21a44 <z_remove_thread_from_ready_q+0x94>)
   219d2:	481d      	ldr	r0, [pc, #116]	; (21a48 <z_remove_thread_from_ready_q+0x98>)
   219d4:	f002 fa50 	bl	23e78 <printk>
   219d8:	481c      	ldr	r0, [pc, #112]	; (21a4c <z_remove_thread_from_ready_q+0x9c>)
   219da:	f002 fa4d 	bl	23e78 <printk>
   219de:	215f      	movs	r1, #95	; 0x5f
   219e0:	4818      	ldr	r0, [pc, #96]	; (21a44 <z_remove_thread_from_ready_q+0x94>)
   219e2:	f002 fa56 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   219e6:	4815      	ldr	r0, [pc, #84]	; (21a3c <z_remove_thread_from_ready_q+0x8c>)
   219e8:	f000 fd00 	bl	223ec <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   219ec:	7b63      	ldrb	r3, [r4, #13]
   219ee:	065a      	lsls	r2, r3, #25
   219f0:	d507      	bpl.n	21a02 <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   219f2:	4621      	mov	r1, r4
   219f4:	4816      	ldr	r0, [pc, #88]	; (21a50 <z_remove_thread_from_ready_q+0xa0>)
   219f6:	f7ff fcf5 	bl	213e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   219fa:	7b63      	ldrb	r3, [r4, #13]
   219fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   21a00:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   21a02:	4b14      	ldr	r3, [pc, #80]	; (21a54 <z_remove_thread_from_ready_q+0xa4>)
   21a04:	6898      	ldr	r0, [r3, #8]
   21a06:	1b03      	subs	r3, r0, r4
   21a08:	4258      	negs	r0, r3
   21a0a:	4158      	adcs	r0, r3
   21a0c:	f7ff fd6e 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21a10:	480a      	ldr	r0, [pc, #40]	; (21a3c <z_remove_thread_from_ready_q+0x8c>)
   21a12:	f000 fcdb 	bl	223cc <z_spin_unlock_valid>
   21a16:	b960      	cbnz	r0, 21a32 <z_remove_thread_from_ready_q+0x82>
   21a18:	490f      	ldr	r1, [pc, #60]	; (21a58 <z_remove_thread_from_ready_q+0xa8>)
   21a1a:	2372      	movs	r3, #114	; 0x72
   21a1c:	4a09      	ldr	r2, [pc, #36]	; (21a44 <z_remove_thread_from_ready_q+0x94>)
   21a1e:	480a      	ldr	r0, [pc, #40]	; (21a48 <z_remove_thread_from_ready_q+0x98>)
   21a20:	f002 fa2a 	bl	23e78 <printk>
   21a24:	480d      	ldr	r0, [pc, #52]	; (21a5c <z_remove_thread_from_ready_q+0xac>)
   21a26:	f002 fa27 	bl	23e78 <printk>
   21a2a:	2172      	movs	r1, #114	; 0x72
   21a2c:	4805      	ldr	r0, [pc, #20]	; (21a44 <z_remove_thread_from_ready_q+0x94>)
   21a2e:	f002 fa30 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21a32:	f385 8811 	msr	BASEPRI, r5
   21a36:	f3bf 8f6f 	isb	sy
}
   21a3a:	bd38      	pop	{r3, r4, r5, pc}
   21a3c:	20025b44 	.word	0x20025b44
   21a40:	00026ae6 	.word	0x00026ae6
   21a44:	00026abf 	.word	0x00026abf
   21a48:	0002694b 	.word	0x0002694b
   21a4c:	00026afb 	.word	0x00026afb
   21a50:	20025b34 	.word	0x20025b34
   21a54:	20025b0c 	.word	0x20025b0c
   21a58:	00026b10 	.word	0x00026b10
   21a5c:	00026b27 	.word	0x00026b27

00021a60 <pend>:
{
   21a60:	b570      	push	{r4, r5, r6, lr}
   21a62:	4604      	mov	r4, r0
   21a64:	460d      	mov	r5, r1
   21a66:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   21a68:	f7ff ffa2 	bl	219b0 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   21a6c:	7b63      	ldrb	r3, [r4, #13]
   21a6e:	f043 0302 	orr.w	r3, r3, #2
   21a72:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21a74:	2d00      	cmp	r5, #0
   21a76:	d02c      	beq.n	21ad2 <pend+0x72>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a78:	4b21      	ldr	r3, [pc, #132]	; (21b00 <pend+0xa0>)
		thread->base.pended_on = wait_q;
   21a7a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a7c:	429c      	cmp	r4, r3
   21a7e:	d10b      	bne.n	21a98 <pend+0x38>
   21a80:	4920      	ldr	r1, [pc, #128]	; (21b04 <pend+0xa4>)
   21a82:	4821      	ldr	r0, [pc, #132]	; (21b08 <pend+0xa8>)
   21a84:	f240 237e 	movw	r3, #638	; 0x27e
   21a88:	4a20      	ldr	r2, [pc, #128]	; (21b0c <pend+0xac>)
   21a8a:	f002 f9f5 	bl	23e78 <printk>
   21a8e:	f240 217e 	movw	r1, #638	; 0x27e
   21a92:	481e      	ldr	r0, [pc, #120]	; (21b0c <pend+0xac>)
   21a94:	f002 f9fd 	bl	23e92 <assert_post_action>
	return list->head == list;
   21a98:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a9a:	429d      	cmp	r5, r3
   21a9c:	d00c      	beq.n	21ab8 <pend+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21a9e:	b15b      	cbz	r3, 21ab8 <pend+0x58>
	if (t1->base.prio < t2->base.prio) {
   21aa0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   21aa4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   21aa8:	4291      	cmp	r1, r2
   21aaa:	dc0c      	bgt.n	21ac6 <pend+0x66>
	return (node == list->tail) ? NULL : node->next;
   21aac:	6869      	ldr	r1, [r5, #4]
   21aae:	428b      	cmp	r3, r1
   21ab0:	d002      	beq.n	21ab8 <pend+0x58>
   21ab2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ab4:	2b00      	cmp	r3, #0
   21ab6:	d1f5      	bne.n	21aa4 <pend+0x44>
	node->prev = list->tail;
   21ab8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   21aba:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   21abc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   21abe:	686b      	ldr	r3, [r5, #4]
   21ac0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21ac2:	606c      	str	r4, [r5, #4]
   21ac4:	e005      	b.n	21ad2 <pend+0x72>
	node->prev = successor->prev;
   21ac6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21ac8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21acc:	685a      	ldr	r2, [r3, #4]
   21ace:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21ad0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   21ad2:	1c73      	adds	r3, r6, #1
   21ad4:	d013      	beq.n	21afe <pend+0x9e>
   21ad6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   21ada:	f240 30e7 	movw	r0, #999	; 0x3e7
   21ade:	2100      	movs	r1, #0
   21ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21ae4:	fbc5 0106 	smlal	r0, r1, r5, r6
   21ae8:	2300      	movs	r3, #0
   21aea:	f7ea fb99 	bl	c220 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21aee:	4908      	ldr	r1, [pc, #32]	; (21b10 <pend+0xb0>)
   21af0:	1c42      	adds	r2, r0, #1
   21af2:	f104 0018 	add.w	r0, r4, #24
}
   21af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21afa:	f000 be1b 	b.w	22734 <z_add_timeout>
   21afe:	bd70      	pop	{r4, r5, r6, pc}
   21b00:	2002193c 	.word	0x2002193c
   21b04:	00027a55 	.word	0x00027a55
   21b08:	0002694b 	.word	0x0002694b
   21b0c:	000279fc 	.word	0x000279fc
   21b10:	0002175d 	.word	0x0002175d

00021b14 <z_pend_curr_irqlock>:
{
   21b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b16:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   21b18:	4d21      	ldr	r5, [pc, #132]	; (21ba0 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   21b1a:	4c22      	ldr	r4, [pc, #136]	; (21ba4 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   21b1c:	68a8      	ldr	r0, [r5, #8]
   21b1e:	f7ff ff9f 	bl	21a60 <pend>
	pending_current = _current;
   21b22:	68ab      	ldr	r3, [r5, #8]
   21b24:	4630      	mov	r0, r6
   21b26:	6023      	str	r3, [r4, #0]
   21b28:	f7ec f8a8 	bl	dc7c <z_arch_swap>
   21b2c:	4606      	mov	r6, r0
	__asm__ volatile(
   21b2e:	f04f 0320 	mov.w	r3, #32
   21b32:	f3ef 8711 	mrs	r7, BASEPRI
   21b36:	f383 8811 	msr	BASEPRI, r3
   21b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21b3e:	481a      	ldr	r0, [pc, #104]	; (21ba8 <z_pend_curr_irqlock+0x94>)
   21b40:	f000 fc36 	bl	223b0 <z_spin_lock_valid>
   21b44:	b960      	cbnz	r0, 21b60 <z_pend_curr_irqlock+0x4c>
   21b46:	4919      	ldr	r1, [pc, #100]	; (21bac <z_pend_curr_irqlock+0x98>)
   21b48:	235f      	movs	r3, #95	; 0x5f
   21b4a:	4a19      	ldr	r2, [pc, #100]	; (21bb0 <z_pend_curr_irqlock+0x9c>)
   21b4c:	4819      	ldr	r0, [pc, #100]	; (21bb4 <z_pend_curr_irqlock+0xa0>)
   21b4e:	f002 f993 	bl	23e78 <printk>
   21b52:	4819      	ldr	r0, [pc, #100]	; (21bb8 <z_pend_curr_irqlock+0xa4>)
   21b54:	f002 f990 	bl	23e78 <printk>
   21b58:	215f      	movs	r1, #95	; 0x5f
   21b5a:	4815      	ldr	r0, [pc, #84]	; (21bb0 <z_pend_curr_irqlock+0x9c>)
   21b5c:	f002 f999 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b60:	4811      	ldr	r0, [pc, #68]	; (21ba8 <z_pend_curr_irqlock+0x94>)
   21b62:	f000 fc43 	bl	223ec <z_spin_lock_set_owner>
		if (pending_current == _current) {
   21b66:	6823      	ldr	r3, [r4, #0]
   21b68:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21b6a:	480f      	ldr	r0, [pc, #60]	; (21ba8 <z_pend_curr_irqlock+0x94>)
   21b6c:	429a      	cmp	r2, r3
			pending_current = NULL;
   21b6e:	bf04      	itt	eq
   21b70:	2300      	moveq	r3, #0
   21b72:	6023      	streq	r3, [r4, #0]
   21b74:	f000 fc2a 	bl	223cc <z_spin_unlock_valid>
   21b78:	b960      	cbnz	r0, 21b94 <z_pend_curr_irqlock+0x80>
   21b7a:	4910      	ldr	r1, [pc, #64]	; (21bbc <z_pend_curr_irqlock+0xa8>)
   21b7c:	2372      	movs	r3, #114	; 0x72
   21b7e:	4a0c      	ldr	r2, [pc, #48]	; (21bb0 <z_pend_curr_irqlock+0x9c>)
   21b80:	480c      	ldr	r0, [pc, #48]	; (21bb4 <z_pend_curr_irqlock+0xa0>)
   21b82:	f002 f979 	bl	23e78 <printk>
   21b86:	480e      	ldr	r0, [pc, #56]	; (21bc0 <z_pend_curr_irqlock+0xac>)
   21b88:	f002 f976 	bl	23e78 <printk>
   21b8c:	2172      	movs	r1, #114	; 0x72
   21b8e:	4808      	ldr	r0, [pc, #32]	; (21bb0 <z_pend_curr_irqlock+0x9c>)
   21b90:	f002 f97f 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21b94:	f387 8811 	msr	BASEPRI, r7
   21b98:	f3bf 8f6f 	isb	sy
}
   21b9c:	4630      	mov	r0, r6
   21b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ba0:	20025b0c 	.word	0x20025b0c
   21ba4:	20025b40 	.word	0x20025b40
   21ba8:	20025b44 	.word	0x20025b44
   21bac:	00026ae6 	.word	0x00026ae6
   21bb0:	00026abf 	.word	0x00026abf
   21bb4:	0002694b 	.word	0x0002694b
   21bb8:	00026afb 	.word	0x00026afb
   21bbc:	00026b10 	.word	0x00026b10
   21bc0:	00026b27 	.word	0x00026b27

00021bc4 <z_pend_curr>:
{
   21bc4:	b538      	push	{r3, r4, r5, lr}
   21bc6:	4605      	mov	r5, r0
   21bc8:	460c      	mov	r4, r1
   21bca:	4611      	mov	r1, r2
	pending_current = _current;
   21bcc:	4a0e      	ldr	r2, [pc, #56]	; (21c08 <z_pend_curr+0x44>)
   21bce:	6890      	ldr	r0, [r2, #8]
   21bd0:	4a0e      	ldr	r2, [pc, #56]	; (21c0c <z_pend_curr+0x48>)
   21bd2:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   21bd4:	461a      	mov	r2, r3
   21bd6:	f7ff ff43 	bl	21a60 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21bda:	4628      	mov	r0, r5
   21bdc:	f000 fbf6 	bl	223cc <z_spin_unlock_valid>
   21be0:	b960      	cbnz	r0, 21bfc <z_pend_curr+0x38>
   21be2:	490b      	ldr	r1, [pc, #44]	; (21c10 <z_pend_curr+0x4c>)
   21be4:	2389      	movs	r3, #137	; 0x89
   21be6:	4a0b      	ldr	r2, [pc, #44]	; (21c14 <z_pend_curr+0x50>)
   21be8:	480b      	ldr	r0, [pc, #44]	; (21c18 <z_pend_curr+0x54>)
   21bea:	f002 f945 	bl	23e78 <printk>
   21bee:	480b      	ldr	r0, [pc, #44]	; (21c1c <z_pend_curr+0x58>)
   21bf0:	f002 f942 	bl	23e78 <printk>
   21bf4:	2189      	movs	r1, #137	; 0x89
   21bf6:	4807      	ldr	r0, [pc, #28]	; (21c14 <z_pend_curr+0x50>)
   21bf8:	f002 f94b 	bl	23e92 <assert_post_action>
   21bfc:	4620      	mov	r0, r4
}
   21bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21c02:	f7ec b83b 	b.w	dc7c <z_arch_swap>
   21c06:	bf00      	nop
   21c08:	20025b0c 	.word	0x20025b0c
   21c0c:	20025b40 	.word	0x20025b40
   21c10:	00026b10 	.word	0x00026b10
   21c14:	00026abf 	.word	0x00026abf
   21c18:	0002694b 	.word	0x0002694b
   21c1c:	00026b27 	.word	0x00026b27

00021c20 <z_set_prio>:
{
   21c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c22:	4604      	mov	r4, r0
   21c24:	460d      	mov	r5, r1
	__asm__ volatile(
   21c26:	f04f 0320 	mov.w	r3, #32
   21c2a:	f3ef 8611 	mrs	r6, BASEPRI
   21c2e:	f383 8811 	msr	BASEPRI, r3
   21c32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21c36:	4835      	ldr	r0, [pc, #212]	; (21d0c <z_set_prio+0xec>)
   21c38:	f000 fbba 	bl	223b0 <z_spin_lock_valid>
   21c3c:	b960      	cbnz	r0, 21c58 <z_set_prio+0x38>
   21c3e:	4934      	ldr	r1, [pc, #208]	; (21d10 <z_set_prio+0xf0>)
   21c40:	235f      	movs	r3, #95	; 0x5f
   21c42:	4a34      	ldr	r2, [pc, #208]	; (21d14 <z_set_prio+0xf4>)
   21c44:	4834      	ldr	r0, [pc, #208]	; (21d18 <z_set_prio+0xf8>)
   21c46:	f002 f917 	bl	23e78 <printk>
   21c4a:	4834      	ldr	r0, [pc, #208]	; (21d1c <z_set_prio+0xfc>)
   21c4c:	f002 f914 	bl	23e78 <printk>
   21c50:	215f      	movs	r1, #95	; 0x5f
   21c52:	4830      	ldr	r0, [pc, #192]	; (21d14 <z_set_prio+0xf4>)
   21c54:	f002 f91d 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c58:	482c      	ldr	r0, [pc, #176]	; (21d0c <z_set_prio+0xec>)
   21c5a:	f000 fbc7 	bl	223ec <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   21c5e:	4620      	mov	r0, r4
   21c60:	f003 fa05 	bl	2506e <z_is_thread_ready>
   21c64:	b26d      	sxtb	r5, r5
		if (need_sched) {
   21c66:	4607      	mov	r7, r0
   21c68:	2800      	cmp	r0, #0
   21c6a:	d04c      	beq.n	21d06 <z_set_prio+0xe6>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   21c6c:	4621      	mov	r1, r4
   21c6e:	482c      	ldr	r0, [pc, #176]	; (21d20 <z_set_prio+0x100>)
   21c70:	f7ff fbb8 	bl	213e4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c74:	4b2b      	ldr	r3, [pc, #172]	; (21d24 <z_set_prio+0x104>)
				thread->base.prio = prio;
   21c76:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c78:	429c      	cmp	r4, r3
   21c7a:	d10b      	bne.n	21c94 <z_set_prio+0x74>
   21c7c:	492a      	ldr	r1, [pc, #168]	; (21d28 <z_set_prio+0x108>)
   21c7e:	4826      	ldr	r0, [pc, #152]	; (21d18 <z_set_prio+0xf8>)
   21c80:	f240 237e 	movw	r3, #638	; 0x27e
   21c84:	4a29      	ldr	r2, [pc, #164]	; (21d2c <z_set_prio+0x10c>)
   21c86:	f002 f8f7 	bl	23e78 <printk>
   21c8a:	f240 217e 	movw	r1, #638	; 0x27e
   21c8e:	4827      	ldr	r0, [pc, #156]	; (21d2c <z_set_prio+0x10c>)
   21c90:	f002 f8ff 	bl	23e92 <assert_post_action>
	return list->head == list;
   21c94:	4a26      	ldr	r2, [pc, #152]	; (21d30 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c96:	f102 0128 	add.w	r1, r2, #40	; 0x28
   21c9a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   21c9e:	428b      	cmp	r3, r1
   21ca0:	d00b      	beq.n	21cba <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ca2:	b153      	cbz	r3, 21cba <z_set_prio+0x9a>
	if (t1->base.prio < t2->base.prio) {
   21ca4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   21ca8:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   21cac:	45ac      	cmp	ip, r5
   21cae:	dc0a      	bgt.n	21cc6 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   21cb0:	4298      	cmp	r0, r3
   21cb2:	d002      	beq.n	21cba <z_set_prio+0x9a>
   21cb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21cb6:	2b00      	cmp	r3, #0
   21cb8:	d1f6      	bne.n	21ca8 <z_set_prio+0x88>
	node->prev = list->tail;
   21cba:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   21cbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21cc0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21cc2:	62d4      	str	r4, [r2, #44]	; 0x2c
   21cc4:	e005      	b.n	21cd2 <z_set_prio+0xb2>
	node->prev = successor->prev;
   21cc6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21cc8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21ccc:	685a      	ldr	r2, [r3, #4]
   21cce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21cd0:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21cd2:	2001      	movs	r0, #1
   21cd4:	f7ff fc0a 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21cd8:	480c      	ldr	r0, [pc, #48]	; (21d0c <z_set_prio+0xec>)
   21cda:	f000 fb77 	bl	223cc <z_spin_unlock_valid>
   21cde:	b960      	cbnz	r0, 21cfa <z_set_prio+0xda>
   21ce0:	4914      	ldr	r1, [pc, #80]	; (21d34 <z_set_prio+0x114>)
   21ce2:	2372      	movs	r3, #114	; 0x72
   21ce4:	4a0b      	ldr	r2, [pc, #44]	; (21d14 <z_set_prio+0xf4>)
   21ce6:	480c      	ldr	r0, [pc, #48]	; (21d18 <z_set_prio+0xf8>)
   21ce8:	f002 f8c6 	bl	23e78 <printk>
   21cec:	4812      	ldr	r0, [pc, #72]	; (21d38 <z_set_prio+0x118>)
   21cee:	f002 f8c3 	bl	23e78 <printk>
   21cf2:	2172      	movs	r1, #114	; 0x72
   21cf4:	4807      	ldr	r0, [pc, #28]	; (21d14 <z_set_prio+0xf4>)
   21cf6:	f002 f8cc 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21cfa:	f386 8811 	msr	BASEPRI, r6
   21cfe:	f3bf 8f6f 	isb	sy
}
   21d02:	4638      	mov	r0, r7
   21d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			thread->base.prio = prio;
   21d06:	73a5      	strb	r5, [r4, #14]
   21d08:	e7e6      	b.n	21cd8 <z_set_prio+0xb8>
   21d0a:	bf00      	nop
   21d0c:	20025b44 	.word	0x20025b44
   21d10:	00026ae6 	.word	0x00026ae6
   21d14:	00026abf 	.word	0x00026abf
   21d18:	0002694b 	.word	0x0002694b
   21d1c:	00026afb 	.word	0x00026afb
   21d20:	20025b34 	.word	0x20025b34
   21d24:	2002193c 	.word	0x2002193c
   21d28:	00027a55 	.word	0x00027a55
   21d2c:	000279fc 	.word	0x000279fc
   21d30:	20025b0c 	.word	0x20025b0c
   21d34:	00026b10 	.word	0x00026b10
   21d38:	00026b27 	.word	0x00026b27

00021d3c <z_unpend_first_thread>:
{
   21d3c:	b538      	push	{r3, r4, r5, lr}
   21d3e:	4604      	mov	r4, r0
	__asm__ volatile(
   21d40:	f04f 0320 	mov.w	r3, #32
   21d44:	f3ef 8511 	mrs	r5, BASEPRI
   21d48:	f383 8811 	msr	BASEPRI, r3
   21d4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21d50:	4839      	ldr	r0, [pc, #228]	; (21e38 <z_unpend_first_thread+0xfc>)
   21d52:	f000 fb2d 	bl	223b0 <z_spin_lock_valid>
   21d56:	b960      	cbnz	r0, 21d72 <z_unpend_first_thread+0x36>
   21d58:	4938      	ldr	r1, [pc, #224]	; (21e3c <z_unpend_first_thread+0x100>)
   21d5a:	235f      	movs	r3, #95	; 0x5f
   21d5c:	4a38      	ldr	r2, [pc, #224]	; (21e40 <z_unpend_first_thread+0x104>)
   21d5e:	4839      	ldr	r0, [pc, #228]	; (21e44 <z_unpend_first_thread+0x108>)
   21d60:	f002 f88a 	bl	23e78 <printk>
   21d64:	4838      	ldr	r0, [pc, #224]	; (21e48 <z_unpend_first_thread+0x10c>)
   21d66:	f002 f887 	bl	23e78 <printk>
   21d6a:	215f      	movs	r1, #95	; 0x5f
   21d6c:	4834      	ldr	r0, [pc, #208]	; (21e40 <z_unpend_first_thread+0x104>)
   21d6e:	f002 f890 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d72:	4831      	ldr	r0, [pc, #196]	; (21e38 <z_unpend_first_thread+0xfc>)
   21d74:	f000 fb3a 	bl	223ec <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   21d78:	4620      	mov	r0, r4
   21d7a:	f003 f9a4 	bl	250c6 <z_priq_dumb_best>
   21d7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21d80:	482d      	ldr	r0, [pc, #180]	; (21e38 <z_unpend_first_thread+0xfc>)
   21d82:	f000 fb23 	bl	223cc <z_spin_unlock_valid>
   21d86:	b960      	cbnz	r0, 21da2 <z_unpend_first_thread+0x66>
   21d88:	4930      	ldr	r1, [pc, #192]	; (21e4c <z_unpend_first_thread+0x110>)
   21d8a:	2372      	movs	r3, #114	; 0x72
   21d8c:	4a2c      	ldr	r2, [pc, #176]	; (21e40 <z_unpend_first_thread+0x104>)
   21d8e:	482d      	ldr	r0, [pc, #180]	; (21e44 <z_unpend_first_thread+0x108>)
   21d90:	f002 f872 	bl	23e78 <printk>
   21d94:	482e      	ldr	r0, [pc, #184]	; (21e50 <z_unpend_first_thread+0x114>)
   21d96:	f002 f86f 	bl	23e78 <printk>
   21d9a:	2172      	movs	r1, #114	; 0x72
   21d9c:	4828      	ldr	r0, [pc, #160]	; (21e40 <z_unpend_first_thread+0x104>)
   21d9e:	f002 f878 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21da2:	f385 8811 	msr	BASEPRI, r5
   21da6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   21daa:	2c00      	cmp	r4, #0
   21dac:	d041      	beq.n	21e32 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   21dae:	f04f 0320 	mov.w	r3, #32
   21db2:	f3ef 8511 	mrs	r5, BASEPRI
   21db6:	f383 8811 	msr	BASEPRI, r3
   21dba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21dbe:	481e      	ldr	r0, [pc, #120]	; (21e38 <z_unpend_first_thread+0xfc>)
   21dc0:	f000 faf6 	bl	223b0 <z_spin_lock_valid>
   21dc4:	b960      	cbnz	r0, 21de0 <z_unpend_first_thread+0xa4>
   21dc6:	491d      	ldr	r1, [pc, #116]	; (21e3c <z_unpend_first_thread+0x100>)
   21dc8:	235f      	movs	r3, #95	; 0x5f
   21dca:	4a1d      	ldr	r2, [pc, #116]	; (21e40 <z_unpend_first_thread+0x104>)
   21dcc:	481d      	ldr	r0, [pc, #116]	; (21e44 <z_unpend_first_thread+0x108>)
   21dce:	f002 f853 	bl	23e78 <printk>
   21dd2:	481d      	ldr	r0, [pc, #116]	; (21e48 <z_unpend_first_thread+0x10c>)
   21dd4:	f002 f850 	bl	23e78 <printk>
   21dd8:	215f      	movs	r1, #95	; 0x5f
   21dda:	4819      	ldr	r0, [pc, #100]	; (21e40 <z_unpend_first_thread+0x104>)
   21ddc:	f002 f859 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21de0:	4815      	ldr	r0, [pc, #84]	; (21e38 <z_unpend_first_thread+0xfc>)
   21de2:	f000 fb03 	bl	223ec <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   21de6:	f104 0008 	add.w	r0, r4, #8
   21dea:	f7ff f965 	bl	210b8 <pended_on.isra.16>
   21dee:	4621      	mov	r1, r4
   21df0:	f7ff faf8 	bl	213e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21df4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21df6:	4810      	ldr	r0, [pc, #64]	; (21e38 <z_unpend_first_thread+0xfc>)
   21df8:	f023 0302 	bic.w	r3, r3, #2
   21dfc:	7363      	strb	r3, [r4, #13]
   21dfe:	f000 fae5 	bl	223cc <z_spin_unlock_valid>
   21e02:	b960      	cbnz	r0, 21e1e <z_unpend_first_thread+0xe2>
   21e04:	4911      	ldr	r1, [pc, #68]	; (21e4c <z_unpend_first_thread+0x110>)
   21e06:	2372      	movs	r3, #114	; 0x72
   21e08:	4a0d      	ldr	r2, [pc, #52]	; (21e40 <z_unpend_first_thread+0x104>)
   21e0a:	480e      	ldr	r0, [pc, #56]	; (21e44 <z_unpend_first_thread+0x108>)
   21e0c:	f002 f834 	bl	23e78 <printk>
   21e10:	480f      	ldr	r0, [pc, #60]	; (21e50 <z_unpend_first_thread+0x114>)
   21e12:	f002 f831 	bl	23e78 <printk>
   21e16:	2172      	movs	r1, #114	; 0x72
   21e18:	4809      	ldr	r0, [pc, #36]	; (21e40 <z_unpend_first_thread+0x104>)
   21e1a:	f002 f83a 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21e1e:	f385 8811 	msr	BASEPRI, r5
   21e22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   21e26:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   21e28:	f104 0018 	add.w	r0, r4, #24
   21e2c:	60a3      	str	r3, [r4, #8]
   21e2e:	f000 fd27 	bl	22880 <z_abort_timeout>
}
   21e32:	4620      	mov	r0, r4
   21e34:	bd38      	pop	{r3, r4, r5, pc}
   21e36:	bf00      	nop
   21e38:	20025b44 	.word	0x20025b44
   21e3c:	00026ae6 	.word	0x00026ae6
   21e40:	00026abf 	.word	0x00026abf
   21e44:	0002694b 	.word	0x0002694b
   21e48:	00026afb 	.word	0x00026afb
   21e4c:	00026b10 	.word	0x00026b10
   21e50:	00026b27 	.word	0x00026b27

00021e54 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21e54:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   21e56:	4b04      	ldr	r3, [pc, #16]	; (21e68 <z_sched_init+0x14>)
   21e58:	4608      	mov	r0, r1
   21e5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   21e5e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   21e62:	f7ff b957 	b.w	21114 <k_sched_time_slice_set>
   21e66:	bf00      	nop
   21e68:	20025b0c 	.word	0x20025b0c

00021e6c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   21e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e6e:	f3ef 8305 	mrs	r3, IPSR
   21e72:	2b0d      	cmp	r3, #13
   21e74:	d804      	bhi.n	21e80 <z_impl_k_yield+0x14>
   21e76:	b193      	cbz	r3, 21e9e <z_impl_k_yield+0x32>
   21e78:	4b46      	ldr	r3, [pc, #280]	; (21f94 <z_impl_k_yield+0x128>)
   21e7a:	685b      	ldr	r3, [r3, #4]
   21e7c:	051b      	lsls	r3, r3, #20
   21e7e:	d40e      	bmi.n	21e9e <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   21e80:	4945      	ldr	r1, [pc, #276]	; (21f98 <z_impl_k_yield+0x12c>)
   21e82:	f44f 7362 	mov.w	r3, #904	; 0x388
   21e86:	4a45      	ldr	r2, [pc, #276]	; (21f9c <z_impl_k_yield+0x130>)
   21e88:	4845      	ldr	r0, [pc, #276]	; (21fa0 <z_impl_k_yield+0x134>)
   21e8a:	f001 fff5 	bl	23e78 <printk>
   21e8e:	4845      	ldr	r0, [pc, #276]	; (21fa4 <z_impl_k_yield+0x138>)
   21e90:	f001 fff2 	bl	23e78 <printk>
   21e94:	f44f 7162 	mov.w	r1, #904	; 0x388
   21e98:	4840      	ldr	r0, [pc, #256]	; (21f9c <z_impl_k_yield+0x130>)
   21e9a:	f001 fffa 	bl	23e92 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   21e9e:	4c42      	ldr	r4, [pc, #264]	; (21fa8 <z_impl_k_yield+0x13c>)
   21ea0:	4e42      	ldr	r6, [pc, #264]	; (21fac <z_impl_k_yield+0x140>)
   21ea2:	68a2      	ldr	r2, [r4, #8]
   21ea4:	42b2      	cmp	r2, r6
   21ea6:	d068      	beq.n	21f7a <z_impl_k_yield+0x10e>
	__asm__ volatile(
   21ea8:	f04f 0320 	mov.w	r3, #32
   21eac:	f3ef 8711 	mrs	r7, BASEPRI
   21eb0:	f383 8811 	msr	BASEPRI, r3
   21eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21eb8:	483d      	ldr	r0, [pc, #244]	; (21fb0 <z_impl_k_yield+0x144>)
   21eba:	f000 fa79 	bl	223b0 <z_spin_lock_valid>
   21ebe:	b960      	cbnz	r0, 21eda <z_impl_k_yield+0x6e>
   21ec0:	493c      	ldr	r1, [pc, #240]	; (21fb4 <z_impl_k_yield+0x148>)
   21ec2:	235f      	movs	r3, #95	; 0x5f
   21ec4:	4a3c      	ldr	r2, [pc, #240]	; (21fb8 <z_impl_k_yield+0x14c>)
   21ec6:	4836      	ldr	r0, [pc, #216]	; (21fa0 <z_impl_k_yield+0x134>)
   21ec8:	f001 ffd6 	bl	23e78 <printk>
   21ecc:	483b      	ldr	r0, [pc, #236]	; (21fbc <z_impl_k_yield+0x150>)
   21ece:	f001 ffd3 	bl	23e78 <printk>
   21ed2:	215f      	movs	r1, #95	; 0x5f
   21ed4:	4838      	ldr	r0, [pc, #224]	; (21fb8 <z_impl_k_yield+0x14c>)
   21ed6:	f001 ffdc 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   21eda:	4835      	ldr	r0, [pc, #212]	; (21fb0 <z_impl_k_yield+0x144>)
   21edc:	f000 fa86 	bl	223ec <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   21ee0:	68a1      	ldr	r1, [r4, #8]
   21ee2:	4837      	ldr	r0, [pc, #220]	; (21fc0 <z_impl_k_yield+0x154>)
   21ee4:	f7ff fa7e 	bl	213e4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   21ee8:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21eea:	42b5      	cmp	r5, r6
   21eec:	d10b      	bne.n	21f06 <z_impl_k_yield+0x9a>
   21eee:	4935      	ldr	r1, [pc, #212]	; (21fc4 <z_impl_k_yield+0x158>)
   21ef0:	482b      	ldr	r0, [pc, #172]	; (21fa0 <z_impl_k_yield+0x134>)
   21ef2:	f240 237e 	movw	r3, #638	; 0x27e
   21ef6:	4a29      	ldr	r2, [pc, #164]	; (21f9c <z_impl_k_yield+0x130>)
   21ef8:	f001 ffbe 	bl	23e78 <printk>
   21efc:	f240 217e 	movw	r1, #638	; 0x27e
   21f00:	4826      	ldr	r0, [pc, #152]	; (21f9c <z_impl_k_yield+0x130>)
   21f02:	f001 ffc6 	bl	23e92 <assert_post_action>
   21f06:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f0a:	4a2d      	ldr	r2, [pc, #180]	; (21fc0 <z_impl_k_yield+0x154>)
   21f0c:	4293      	cmp	r3, r2
   21f0e:	d00b      	beq.n	21f28 <z_impl_k_yield+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f10:	b153      	cbz	r3, 21f28 <z_impl_k_yield+0xbc>
	if (t1->base.prio < t2->base.prio) {
   21f12:	f995 000e 	ldrsb.w	r0, [r5, #14]
   21f16:	f993 600e 	ldrsb.w	r6, [r3, #14]
   21f1a:	4286      	cmp	r6, r0
   21f1c:	dc0a      	bgt.n	21f34 <z_impl_k_yield+0xc8>
	return (node == list->tail) ? NULL : node->next;
   21f1e:	428b      	cmp	r3, r1
   21f20:	d002      	beq.n	21f28 <z_impl_k_yield+0xbc>
   21f22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f24:	2b00      	cmp	r3, #0
   21f26:	d1f6      	bne.n	21f16 <z_impl_k_yield+0xaa>
	node->prev = list->tail;
   21f28:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   21f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21f2e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21f30:	62e5      	str	r5, [r4, #44]	; 0x2c
   21f32:	e005      	b.n	21f40 <z_impl_k_yield+0xd4>
	node->prev = successor->prev;
   21f34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21f36:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   21f3a:	685a      	ldr	r2, [r3, #4]
   21f3c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   21f3e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   21f40:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   21f42:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   21f44:	7b53      	ldrb	r3, [r2, #13]
   21f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21f4a:	7353      	strb	r3, [r2, #13]
   21f4c:	f7ff face 	bl	214ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21f50:	4817      	ldr	r0, [pc, #92]	; (21fb0 <z_impl_k_yield+0x144>)
   21f52:	f000 fa3b 	bl	223cc <z_spin_unlock_valid>
   21f56:	b960      	cbnz	r0, 21f72 <z_impl_k_yield+0x106>
   21f58:	491b      	ldr	r1, [pc, #108]	; (21fc8 <z_impl_k_yield+0x15c>)
   21f5a:	2372      	movs	r3, #114	; 0x72
   21f5c:	4a16      	ldr	r2, [pc, #88]	; (21fb8 <z_impl_k_yield+0x14c>)
   21f5e:	4810      	ldr	r0, [pc, #64]	; (21fa0 <z_impl_k_yield+0x134>)
   21f60:	f001 ff8a 	bl	23e78 <printk>
   21f64:	4819      	ldr	r0, [pc, #100]	; (21fcc <z_impl_k_yield+0x160>)
   21f66:	f001 ff87 	bl	23e78 <printk>
   21f6a:	2172      	movs	r1, #114	; 0x72
   21f6c:	4812      	ldr	r0, [pc, #72]	; (21fb8 <z_impl_k_yield+0x14c>)
   21f6e:	f001 ff90 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   21f72:	f387 8811 	msr	BASEPRI, r7
   21f76:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21f7a:	f04f 0320 	mov.w	r3, #32
   21f7e:	f3ef 8011 	mrs	r0, BASEPRI
   21f82:	f383 8811 	msr	BASEPRI, r3
   21f86:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   21f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21f8e:	f7eb be75 	b.w	dc7c <z_arch_swap>
   21f92:	bf00      	nop
   21f94:	e000ed00 	.word	0xe000ed00
   21f98:	00027998 	.word	0x00027998
   21f9c:	000279fc 	.word	0x000279fc
   21fa0:	0002694b 	.word	0x0002694b
   21fa4:	0002789d 	.word	0x0002789d
   21fa8:	20025b0c 	.word	0x20025b0c
   21fac:	2002193c 	.word	0x2002193c
   21fb0:	20025b44 	.word	0x20025b44
   21fb4:	00026ae6 	.word	0x00026ae6
   21fb8:	00026abf 	.word	0x00026abf
   21fbc:	00026afb 	.word	0x00026afb
   21fc0:	20025b34 	.word	0x20025b34
   21fc4:	00027a55 	.word	0x00027a55
   21fc8:	00026b10 	.word	0x00026b10
   21fcc:	00026b27 	.word	0x00026b27

00021fd0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   21fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21fd4:	4604      	mov	r4, r0
   21fd6:	f3ef 8305 	mrs	r3, IPSR
   21fda:	2b0d      	cmp	r3, #13
   21fdc:	d804      	bhi.n	21fe8 <z_tick_sleep+0x18>
   21fde:	b193      	cbz	r3, 22006 <z_tick_sleep+0x36>
   21fe0:	4b3e      	ldr	r3, [pc, #248]	; (220dc <z_tick_sleep+0x10c>)
   21fe2:	685b      	ldr	r3, [r3, #4]
   21fe4:	051a      	lsls	r2, r3, #20
   21fe6:	d40e      	bmi.n	22006 <z_tick_sleep+0x36>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_arch_is_in_isr(), "");
   21fe8:	493d      	ldr	r1, [pc, #244]	; (220e0 <z_tick_sleep+0x110>)
   21fea:	f240 33a6 	movw	r3, #934	; 0x3a6
   21fee:	4a3d      	ldr	r2, [pc, #244]	; (220e4 <z_tick_sleep+0x114>)
   21ff0:	483d      	ldr	r0, [pc, #244]	; (220e8 <z_tick_sleep+0x118>)
   21ff2:	f001 ff41 	bl	23e78 <printk>
   21ff6:	483d      	ldr	r0, [pc, #244]	; (220ec <z_tick_sleep+0x11c>)
   21ff8:	f001 ff3e 	bl	23e78 <printk>
   21ffc:	f240 31a6 	movw	r1, #934	; 0x3a6
   22000:	4838      	ldr	r0, [pc, #224]	; (220e4 <z_tick_sleep+0x114>)
   22002:	f001 ff46 	bl	23e92 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   22006:	b92c      	cbnz	r4, 22014 <z_tick_sleep+0x44>
	z_impl_k_yield();
   22008:	f7ff ff30 	bl	21e6c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   2200c:	4620      	mov	r0, r4
   2200e:	b002      	add	sp, #8
   22010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   22014:	f003 f8c1 	bl	2519a <z_tick_get_32>
	struct k_spinlock local_lock = {};
   22018:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   2201a:	f104 0801 	add.w	r8, r4, #1
	struct k_spinlock local_lock = {};
   2201e:	ae02      	add	r6, sp, #8
	expected_wakeup_time = ticks + z_tick_get_32();
   22020:	eb08 0400 	add.w	r4, r8, r0
	struct k_spinlock local_lock = {};
   22024:	f846 3d04 	str.w	r3, [r6, #-4]!
   22028:	f04f 0320 	mov.w	r3, #32
   2202c:	f3ef 8711 	mrs	r7, BASEPRI
   22030:	f383 8811 	msr	BASEPRI, r3
   22034:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22038:	4630      	mov	r0, r6
   2203a:	f000 f9b9 	bl	223b0 <z_spin_lock_valid>
   2203e:	b960      	cbnz	r0, 2205a <z_tick_sleep+0x8a>
   22040:	492b      	ldr	r1, [pc, #172]	; (220f0 <z_tick_sleep+0x120>)
   22042:	235f      	movs	r3, #95	; 0x5f
   22044:	4a2b      	ldr	r2, [pc, #172]	; (220f4 <z_tick_sleep+0x124>)
   22046:	4828      	ldr	r0, [pc, #160]	; (220e8 <z_tick_sleep+0x118>)
   22048:	f001 ff16 	bl	23e78 <printk>
   2204c:	482a      	ldr	r0, [pc, #168]	; (220f8 <z_tick_sleep+0x128>)
   2204e:	f001 ff13 	bl	23e78 <printk>
   22052:	215f      	movs	r1, #95	; 0x5f
   22054:	4827      	ldr	r0, [pc, #156]	; (220f4 <z_tick_sleep+0x124>)
   22056:	f001 ff1c 	bl	23e92 <assert_post_action>
	pending_current = _current;
   2205a:	4d28      	ldr	r5, [pc, #160]	; (220fc <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   2205c:	4630      	mov	r0, r6
   2205e:	f000 f9c5 	bl	223ec <z_spin_lock_set_owner>
   22062:	4b27      	ldr	r3, [pc, #156]	; (22100 <z_tick_sleep+0x130>)
   22064:	68a8      	ldr	r0, [r5, #8]
   22066:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   22068:	f7ff fca2 	bl	219b0 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2206c:	68a8      	ldr	r0, [r5, #8]
   2206e:	4642      	mov	r2, r8
   22070:	3018      	adds	r0, #24
   22072:	4924      	ldr	r1, [pc, #144]	; (22104 <z_tick_sleep+0x134>)
   22074:	f000 fb5e 	bl	22734 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22078:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2207a:	4630      	mov	r0, r6
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2207c:	7b53      	ldrb	r3, [r2, #13]
   2207e:	f043 0310 	orr.w	r3, r3, #16
   22082:	7353      	strb	r3, [r2, #13]
   22084:	f000 f9a2 	bl	223cc <z_spin_unlock_valid>
   22088:	b960      	cbnz	r0, 220a4 <z_tick_sleep+0xd4>
   2208a:	491f      	ldr	r1, [pc, #124]	; (22108 <z_tick_sleep+0x138>)
   2208c:	2389      	movs	r3, #137	; 0x89
   2208e:	4a19      	ldr	r2, [pc, #100]	; (220f4 <z_tick_sleep+0x124>)
   22090:	4815      	ldr	r0, [pc, #84]	; (220e8 <z_tick_sleep+0x118>)
   22092:	f001 fef1 	bl	23e78 <printk>
   22096:	481d      	ldr	r0, [pc, #116]	; (2210c <z_tick_sleep+0x13c>)
   22098:	f001 feee 	bl	23e78 <printk>
   2209c:	2189      	movs	r1, #137	; 0x89
   2209e:	4815      	ldr	r0, [pc, #84]	; (220f4 <z_tick_sleep+0x124>)
   220a0:	f001 fef7 	bl	23e92 <assert_post_action>
   220a4:	4638      	mov	r0, r7
   220a6:	f7eb fde9 	bl	dc7c <z_arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   220aa:	68ab      	ldr	r3, [r5, #8]
   220ac:	7b5b      	ldrb	r3, [r3, #13]
   220ae:	06db      	lsls	r3, r3, #27
   220b0:	d50e      	bpl.n	220d0 <z_tick_sleep+0x100>
   220b2:	4917      	ldr	r1, [pc, #92]	; (22110 <z_tick_sleep+0x140>)
   220b4:	f240 33c3 	movw	r3, #963	; 0x3c3
   220b8:	4a0a      	ldr	r2, [pc, #40]	; (220e4 <z_tick_sleep+0x114>)
   220ba:	480b      	ldr	r0, [pc, #44]	; (220e8 <z_tick_sleep+0x118>)
   220bc:	f001 fedc 	bl	23e78 <printk>
   220c0:	480a      	ldr	r0, [pc, #40]	; (220ec <z_tick_sleep+0x11c>)
   220c2:	f001 fed9 	bl	23e78 <printk>
   220c6:	f240 31c3 	movw	r1, #963	; 0x3c3
   220ca:	4806      	ldr	r0, [pc, #24]	; (220e4 <z_tick_sleep+0x114>)
   220cc:	f001 fee1 	bl	23e92 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   220d0:	f003 f863 	bl	2519a <z_tick_get_32>
   220d4:	1a24      	subs	r4, r4, r0
   220d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   220da:	e797      	b.n	2200c <z_tick_sleep+0x3c>
   220dc:	e000ed00 	.word	0xe000ed00
   220e0:	00027998 	.word	0x00027998
   220e4:	000279fc 	.word	0x000279fc
   220e8:	0002694b 	.word	0x0002694b
   220ec:	0002789d 	.word	0x0002789d
   220f0:	00026ae6 	.word	0x00026ae6
   220f4:	00026abf 	.word	0x00026abf
   220f8:	00026afb 	.word	0x00026afb
   220fc:	20025b0c 	.word	0x20025b0c
   22100:	20025b40 	.word	0x20025b40
   22104:	0002175d 	.word	0x0002175d
   22108:	00026b10 	.word	0x00026b10
   2210c:	00026b27 	.word	0x00026b27
   22110:	00027a76 	.word	0x00027a76

00022114 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   22114:	4b01      	ldr	r3, [pc, #4]	; (2211c <z_impl_k_current_get+0x8>)
   22116:	6898      	ldr	r0, [r3, #8]
   22118:	4770      	bx	lr
   2211a:	bf00      	nop
   2211c:	20025b0c 	.word	0x20025b0c

00022120 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   22120:	b570      	push	{r4, r5, r6, lr}
   22122:	4604      	mov	r4, r0
   22124:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   22126:	4615      	mov	r5, r2
   22128:	b962      	cbnz	r2, 22144 <z_impl_k_sem_init+0x24>
   2212a:	4912      	ldr	r1, [pc, #72]	; (22174 <z_impl_k_sem_init+0x54>)
   2212c:	2341      	movs	r3, #65	; 0x41
   2212e:	4a12      	ldr	r2, [pc, #72]	; (22178 <z_impl_k_sem_init+0x58>)
   22130:	4812      	ldr	r0, [pc, #72]	; (2217c <z_impl_k_sem_init+0x5c>)
   22132:	f001 fea1 	bl	23e78 <printk>
   22136:	4812      	ldr	r0, [pc, #72]	; (22180 <z_impl_k_sem_init+0x60>)
   22138:	f001 fe9e 	bl	23e78 <printk>
   2213c:	2141      	movs	r1, #65	; 0x41
   2213e:	480e      	ldr	r0, [pc, #56]	; (22178 <z_impl_k_sem_init+0x58>)
   22140:	f001 fea7 	bl	23e92 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   22144:	42b5      	cmp	r5, r6
   22146:	d20c      	bcs.n	22162 <z_impl_k_sem_init+0x42>
   22148:	490e      	ldr	r1, [pc, #56]	; (22184 <z_impl_k_sem_init+0x64>)
   2214a:	2342      	movs	r3, #66	; 0x42
   2214c:	4a0a      	ldr	r2, [pc, #40]	; (22178 <z_impl_k_sem_init+0x58>)
   2214e:	480b      	ldr	r0, [pc, #44]	; (2217c <z_impl_k_sem_init+0x5c>)
   22150:	f001 fe92 	bl	23e78 <printk>
   22154:	480c      	ldr	r0, [pc, #48]	; (22188 <z_impl_k_sem_init+0x68>)
   22156:	f001 fe8f 	bl	23e78 <printk>
   2215a:	2142      	movs	r1, #66	; 0x42
   2215c:	4806      	ldr	r0, [pc, #24]	; (22178 <z_impl_k_sem_init+0x58>)
   2215e:	f001 fe98 	bl	23e92 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   22162:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   22166:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   2216a:	e9c4 4400 	strd	r4, r4, [r4]
   2216e:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   22172:	bd70      	pop	{r4, r5, r6, pc}
   22174:	00027acf 	.word	0x00027acf
   22178:	00027aae 	.word	0x00027aae
   2217c:	0002694b 	.word	0x0002694b
   22180:	00027adb 	.word	0x00027adb
   22184:	00027af2 	.word	0x00027af2
   22188:	00027b09 	.word	0x00027b09

0002218c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2218c:	b570      	push	{r4, r5, r6, lr}
   2218e:	4604      	mov	r4, r0
   22190:	f04f 0320 	mov.w	r3, #32
   22194:	f3ef 8611 	mrs	r6, BASEPRI
   22198:	f383 8811 	msr	BASEPRI, r3
   2219c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   221a0:	4819      	ldr	r0, [pc, #100]	; (22208 <z_impl_k_sem_give+0x7c>)
   221a2:	f000 f905 	bl	223b0 <z_spin_lock_valid>
   221a6:	b960      	cbnz	r0, 221c2 <z_impl_k_sem_give+0x36>
   221a8:	4918      	ldr	r1, [pc, #96]	; (2220c <z_impl_k_sem_give+0x80>)
   221aa:	235f      	movs	r3, #95	; 0x5f
   221ac:	4a18      	ldr	r2, [pc, #96]	; (22210 <z_impl_k_sem_give+0x84>)
   221ae:	4819      	ldr	r0, [pc, #100]	; (22214 <z_impl_k_sem_give+0x88>)
   221b0:	f001 fe62 	bl	23e78 <printk>
   221b4:	4818      	ldr	r0, [pc, #96]	; (22218 <z_impl_k_sem_give+0x8c>)
   221b6:	f001 fe5f 	bl	23e78 <printk>
   221ba:	215f      	movs	r1, #95	; 0x5f
   221bc:	4814      	ldr	r0, [pc, #80]	; (22210 <z_impl_k_sem_give+0x84>)
   221be:	f001 fe68 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   221c2:	4811      	ldr	r0, [pc, #68]	; (22208 <z_impl_k_sem_give+0x7c>)
   221c4:	f000 f912 	bl	223ec <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   221c8:	4620      	mov	r0, r4
   221ca:	f7ff fdb7 	bl	21d3c <z_unpend_first_thread>
	if (thread != NULL) {
   221ce:	4605      	mov	r5, r0
   221d0:	b170      	cbz	r0, 221f0 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   221d2:	7b43      	ldrb	r3, [r0, #13]
   221d4:	06db      	lsls	r3, r3, #27
   221d6:	d103      	bne.n	221e0 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   221d8:	6983      	ldr	r3, [r0, #24]
   221da:	b90b      	cbnz	r3, 221e0 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   221dc:	f7ff fa3e 	bl	2165c <z_add_thread_to_ready_q>
   221e0:	2300      	movs	r3, #0
   221e2:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   221e4:	4631      	mov	r1, r6
}
   221e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   221ea:	4807      	ldr	r0, [pc, #28]	; (22208 <z_impl_k_sem_give+0x7c>)
   221ec:	f7ff b840 	b.w	21270 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   221f0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   221f4:	429a      	cmp	r2, r3
   221f6:	bf18      	it	ne
   221f8:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   221fa:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   221fc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   221fe:	f104 0010 	add.w	r0, r4, #16
   22202:	f003 f826 	bl	25252 <z_handle_obj_poll_events>
   22206:	e7ed      	b.n	221e4 <z_impl_k_sem_give+0x58>
   22208:	20025b50 	.word	0x20025b50
   2220c:	00026ae6 	.word	0x00026ae6
   22210:	00026abf 	.word	0x00026abf
   22214:	0002694b 	.word	0x0002694b
   22218:	00026afb 	.word	0x00026afb

0002221c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2221c:	b570      	push	{r4, r5, r6, lr}
   2221e:	4605      	mov	r5, r0
   22220:	460e      	mov	r6, r1
   22222:	f3ef 8305 	mrs	r3, IPSR
   22226:	2b0d      	cmp	r3, #13
   22228:	d804      	bhi.n	22234 <z_impl_k_sem_take+0x18>
   2222a:	b18b      	cbz	r3, 22250 <z_impl_k_sem_take+0x34>
   2222c:	4b34      	ldr	r3, [pc, #208]	; (22300 <z_impl_k_sem_take+0xe4>)
   2222e:	685b      	ldr	r3, [r3, #4]
   22230:	051b      	lsls	r3, r3, #20
   22232:	d40d      	bmi.n	22250 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   22234:	b166      	cbz	r6, 22250 <z_impl_k_sem_take+0x34>
   22236:	4933      	ldr	r1, [pc, #204]	; (22304 <z_impl_k_sem_take+0xe8>)
   22238:	238d      	movs	r3, #141	; 0x8d
   2223a:	4a33      	ldr	r2, [pc, #204]	; (22308 <z_impl_k_sem_take+0xec>)
   2223c:	4833      	ldr	r0, [pc, #204]	; (2230c <z_impl_k_sem_take+0xf0>)
   2223e:	f001 fe1b 	bl	23e78 <printk>
   22242:	4833      	ldr	r0, [pc, #204]	; (22310 <z_impl_k_sem_take+0xf4>)
   22244:	f001 fe18 	bl	23e78 <printk>
   22248:	218d      	movs	r1, #141	; 0x8d
   2224a:	482f      	ldr	r0, [pc, #188]	; (22308 <z_impl_k_sem_take+0xec>)
   2224c:	f001 fe21 	bl	23e92 <assert_post_action>
   22250:	f04f 0320 	mov.w	r3, #32
   22254:	f3ef 8411 	mrs	r4, BASEPRI
   22258:	f383 8811 	msr	BASEPRI, r3
   2225c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22260:	482c      	ldr	r0, [pc, #176]	; (22314 <z_impl_k_sem_take+0xf8>)
   22262:	f000 f8a5 	bl	223b0 <z_spin_lock_valid>
   22266:	b960      	cbnz	r0, 22282 <z_impl_k_sem_take+0x66>
   22268:	492b      	ldr	r1, [pc, #172]	; (22318 <z_impl_k_sem_take+0xfc>)
   2226a:	235f      	movs	r3, #95	; 0x5f
   2226c:	4a2b      	ldr	r2, [pc, #172]	; (2231c <z_impl_k_sem_take+0x100>)
   2226e:	4827      	ldr	r0, [pc, #156]	; (2230c <z_impl_k_sem_take+0xf0>)
   22270:	f001 fe02 	bl	23e78 <printk>
   22274:	482a      	ldr	r0, [pc, #168]	; (22320 <z_impl_k_sem_take+0x104>)
   22276:	f001 fdff 	bl	23e78 <printk>
   2227a:	215f      	movs	r1, #95	; 0x5f
   2227c:	4827      	ldr	r0, [pc, #156]	; (2231c <z_impl_k_sem_take+0x100>)
   2227e:	f001 fe08 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22282:	4824      	ldr	r0, [pc, #144]	; (22314 <z_impl_k_sem_take+0xf8>)
   22284:	f000 f8b2 	bl	223ec <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   22288:	68ab      	ldr	r3, [r5, #8]
   2228a:	b1c3      	cbz	r3, 222be <z_impl_k_sem_take+0xa2>
		sem->count--;
   2228c:	3b01      	subs	r3, #1
   2228e:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22290:	4820      	ldr	r0, [pc, #128]	; (22314 <z_impl_k_sem_take+0xf8>)
   22292:	f000 f89b 	bl	223cc <z_spin_unlock_valid>
   22296:	b960      	cbnz	r0, 222b2 <z_impl_k_sem_take+0x96>
   22298:	4922      	ldr	r1, [pc, #136]	; (22324 <z_impl_k_sem_take+0x108>)
   2229a:	2372      	movs	r3, #114	; 0x72
   2229c:	4a1f      	ldr	r2, [pc, #124]	; (2231c <z_impl_k_sem_take+0x100>)
   2229e:	481b      	ldr	r0, [pc, #108]	; (2230c <z_impl_k_sem_take+0xf0>)
   222a0:	f001 fdea 	bl	23e78 <printk>
   222a4:	4820      	ldr	r0, [pc, #128]	; (22328 <z_impl_k_sem_take+0x10c>)
   222a6:	f001 fde7 	bl	23e78 <printk>
   222aa:	2172      	movs	r1, #114	; 0x72
   222ac:	481b      	ldr	r0, [pc, #108]	; (2231c <z_impl_k_sem_take+0x100>)
   222ae:	f001 fdf0 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   222b2:	f384 8811 	msr	BASEPRI, r4
   222b6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   222ba:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   222bc:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   222be:	b9be      	cbnz	r6, 222f0 <z_impl_k_sem_take+0xd4>
   222c0:	4814      	ldr	r0, [pc, #80]	; (22314 <z_impl_k_sem_take+0xf8>)
   222c2:	f000 f883 	bl	223cc <z_spin_unlock_valid>
   222c6:	b960      	cbnz	r0, 222e2 <z_impl_k_sem_take+0xc6>
   222c8:	4916      	ldr	r1, [pc, #88]	; (22324 <z_impl_k_sem_take+0x108>)
   222ca:	2372      	movs	r3, #114	; 0x72
   222cc:	4a13      	ldr	r2, [pc, #76]	; (2231c <z_impl_k_sem_take+0x100>)
   222ce:	480f      	ldr	r0, [pc, #60]	; (2230c <z_impl_k_sem_take+0xf0>)
   222d0:	f001 fdd2 	bl	23e78 <printk>
   222d4:	4814      	ldr	r0, [pc, #80]	; (22328 <z_impl_k_sem_take+0x10c>)
   222d6:	f001 fdcf 	bl	23e78 <printk>
   222da:	2172      	movs	r1, #114	; 0x72
   222dc:	480f      	ldr	r0, [pc, #60]	; (2231c <z_impl_k_sem_take+0x100>)
   222de:	f001 fdd8 	bl	23e92 <assert_post_action>
   222e2:	f384 8811 	msr	BASEPRI, r4
   222e6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   222ea:	f06f 000f 	mvn.w	r0, #15
   222ee:	e7e5      	b.n	222bc <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   222f0:	4633      	mov	r3, r6
   222f2:	462a      	mov	r2, r5
   222f4:	4621      	mov	r1, r4
}
   222f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   222fa:	4806      	ldr	r0, [pc, #24]	; (22314 <z_impl_k_sem_take+0xf8>)
   222fc:	f7ff bc62 	b.w	21bc4 <z_pend_curr>
   22300:	e000ed00 	.word	0xe000ed00
   22304:	00027b2e 	.word	0x00027b2e
   22308:	00027aae 	.word	0x00027aae
   2230c:	0002694b 	.word	0x0002694b
   22310:	0002789d 	.word	0x0002789d
   22314:	20025b50 	.word	0x20025b50
   22318:	00026ae6 	.word	0x00026ae6
   2231c:	00026abf 	.word	0x00026abf
   22320:	00026afb 	.word	0x00026afb
   22324:	00026b10 	.word	0x00026b10
   22328:	00026b27 	.word	0x00026b27

0002232c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2232c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2232e:	4c08      	ldr	r4, [pc, #32]	; (22350 <k_sys_work_q_init+0x24>)
   22330:	f04f 33ff 	mov.w	r3, #4294967295
   22334:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22338:	4906      	ldr	r1, [pc, #24]	; (22354 <k_sys_work_q_init+0x28>)
   2233a:	4620      	mov	r0, r4
   2233c:	f000 f99a 	bl	22674 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   22340:	4905      	ldr	r1, [pc, #20]	; (22358 <k_sys_work_q_init+0x2c>)
   22342:	f104 0014 	add.w	r0, r4, #20
   22346:	f002 fefe 	bl	25146 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2234a:	2000      	movs	r0, #0
   2234c:	bd10      	pop	{r4, pc}
   2234e:	bf00      	nop
   22350:	20025b54 	.word	0x20025b54
   22354:	200288e0 	.word	0x200288e0
   22358:	00027b5c 	.word	0x00027b5c

0002235c <k_is_in_isr>:
   2235c:	f3ef 8005 	mrs	r0, IPSR
   22360:	280d      	cmp	r0, #13
   22362:	d807      	bhi.n	22374 <k_is_in_isr+0x18>
   22364:	b138      	cbz	r0, 22376 <k_is_in_isr+0x1a>
   22366:	4b04      	ldr	r3, [pc, #16]	; (22378 <k_is_in_isr+0x1c>)
   22368:	6858      	ldr	r0, [r3, #4]
   2236a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2236e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   22372:	4770      	bx	lr
   22374:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   22376:	4770      	bx	lr
   22378:	e000ed00 	.word	0xe000ed00

0002237c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2237c:	b530      	push	{r4, r5, lr}
   2237e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22380:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   22382:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22384:	9504      	str	r5, [sp, #16]
   22386:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22388:	9503      	str	r5, [sp, #12]
   2238a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2238c:	9502      	str	r5, [sp, #8]
   2238e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   22390:	9501      	str	r5, [sp, #4]
   22392:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22394:	9500      	str	r5, [sp, #0]
   22396:	f7eb fcdb 	bl	dd50 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2239a:	4b04      	ldr	r3, [pc, #16]	; (223ac <z_setup_new_thread+0x30>)
   2239c:	689b      	ldr	r3, [r3, #8]
   2239e:	b913      	cbnz	r3, 223a6 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   223a0:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   223a2:	b007      	add	sp, #28
   223a4:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   223a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   223a8:	e7fa      	b.n	223a0 <z_setup_new_thread+0x24>
   223aa:	bf00      	nop
   223ac:	20025b0c 	.word	0x20025b0c

000223b0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   223b0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   223b2:	b138      	cbz	r0, 223c4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   223b4:	4b04      	ldr	r3, [pc, #16]	; (223c8 <z_spin_lock_valid+0x18>)
   223b6:	f000 0003 	and.w	r0, r0, #3
   223ba:	7d1b      	ldrb	r3, [r3, #20]
   223bc:	1ac0      	subs	r0, r0, r3
   223be:	bf18      	it	ne
   223c0:	2001      	movne	r0, #1
   223c2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   223c4:	2001      	movs	r0, #1
}
   223c6:	4770      	bx	lr
   223c8:	20025b0c 	.word	0x20025b0c

000223cc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   223cc:	4a06      	ldr	r2, [pc, #24]	; (223e8 <z_spin_unlock_valid+0x1c>)
   223ce:	7d11      	ldrb	r1, [r2, #20]
   223d0:	6893      	ldr	r3, [r2, #8]
   223d2:	6802      	ldr	r2, [r0, #0]
   223d4:	430b      	orrs	r3, r1
   223d6:	429a      	cmp	r2, r3
   223d8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   223dc:	bf06      	itte	eq
   223de:	6003      	streq	r3, [r0, #0]
	return true;
   223e0:	2001      	moveq	r0, #1
		return false;
   223e2:	4618      	movne	r0, r3
}
   223e4:	4770      	bx	lr
   223e6:	bf00      	nop
   223e8:	20025b0c 	.word	0x20025b0c

000223ec <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   223ec:	4a02      	ldr	r2, [pc, #8]	; (223f8 <z_spin_lock_set_owner+0xc>)
   223ee:	7d11      	ldrb	r1, [r2, #20]
   223f0:	6893      	ldr	r3, [r2, #8]
   223f2:	430b      	orrs	r3, r1
   223f4:	6003      	str	r3, [r0, #0]
}
   223f6:	4770      	bx	lr
   223f8:	20025b0c 	.word	0x20025b0c

000223fc <z_impl_k_thread_start>:
{
   223fc:	b538      	push	{r3, r4, r5, lr}
   223fe:	4604      	mov	r4, r0
	__asm__ volatile(
   22400:	f04f 0320 	mov.w	r3, #32
   22404:	f3ef 8511 	mrs	r5, BASEPRI
   22408:	f383 8811 	msr	BASEPRI, r3
   2240c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22410:	481e      	ldr	r0, [pc, #120]	; (2248c <z_impl_k_thread_start+0x90>)
   22412:	f7ff ffcd 	bl	223b0 <z_spin_lock_valid>
   22416:	b960      	cbnz	r0, 22432 <z_impl_k_thread_start+0x36>
   22418:	491d      	ldr	r1, [pc, #116]	; (22490 <z_impl_k_thread_start+0x94>)
   2241a:	235f      	movs	r3, #95	; 0x5f
   2241c:	4a1d      	ldr	r2, [pc, #116]	; (22494 <z_impl_k_thread_start+0x98>)
   2241e:	481e      	ldr	r0, [pc, #120]	; (22498 <z_impl_k_thread_start+0x9c>)
   22420:	f001 fd2a 	bl	23e78 <printk>
   22424:	481d      	ldr	r0, [pc, #116]	; (2249c <z_impl_k_thread_start+0xa0>)
   22426:	f001 fd27 	bl	23e78 <printk>
   2242a:	215f      	movs	r1, #95	; 0x5f
   2242c:	4819      	ldr	r0, [pc, #100]	; (22494 <z_impl_k_thread_start+0x98>)
   2242e:	f001 fd30 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22432:	4816      	ldr	r0, [pc, #88]	; (2248c <z_impl_k_thread_start+0x90>)
   22434:	f7ff ffda 	bl	223ec <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   22438:	7b63      	ldrb	r3, [r4, #13]
   2243a:	075a      	lsls	r2, r3, #29
   2243c:	d415      	bmi.n	2246a <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2243e:	4813      	ldr	r0, [pc, #76]	; (2248c <z_impl_k_thread_start+0x90>)
   22440:	f7ff ffc4 	bl	223cc <z_spin_unlock_valid>
   22444:	b960      	cbnz	r0, 22460 <z_impl_k_thread_start+0x64>
   22446:	4916      	ldr	r1, [pc, #88]	; (224a0 <z_impl_k_thread_start+0xa4>)
   22448:	2372      	movs	r3, #114	; 0x72
   2244a:	4a12      	ldr	r2, [pc, #72]	; (22494 <z_impl_k_thread_start+0x98>)
   2244c:	4812      	ldr	r0, [pc, #72]	; (22498 <z_impl_k_thread_start+0x9c>)
   2244e:	f001 fd13 	bl	23e78 <printk>
   22452:	4814      	ldr	r0, [pc, #80]	; (224a4 <z_impl_k_thread_start+0xa8>)
   22454:	f001 fd10 	bl	23e78 <printk>
   22458:	2172      	movs	r1, #114	; 0x72
   2245a:	480e      	ldr	r0, [pc, #56]	; (22494 <z_impl_k_thread_start+0x98>)
   2245c:	f001 fd19 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22460:	f385 8811 	msr	BASEPRI, r5
   22464:	f3bf 8f6f 	isb	sy
}
   22468:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2246a:	f023 0304 	bic.w	r3, r3, #4
   2246e:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   22470:	4620      	mov	r0, r4
   22472:	f002 fe5d 	bl	25130 <z_is_thread_ready>
   22476:	b110      	cbz	r0, 2247e <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   22478:	4620      	mov	r0, r4
   2247a:	f7ff f8ef 	bl	2165c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   2247e:	4629      	mov	r1, r5
}
   22480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   22484:	4801      	ldr	r0, [pc, #4]	; (2248c <z_impl_k_thread_start+0x90>)
   22486:	f7fe bef3 	b.w	21270 <z_reschedule>
   2248a:	bf00      	nop
   2248c:	20025c18 	.word	0x20025c18
   22490:	00026ae6 	.word	0x00026ae6
   22494:	00026abf 	.word	0x00026abf
   22498:	0002694b 	.word	0x0002694b
   2249c:	00026afb 	.word	0x00026afb
   224a0:	00026b10 	.word	0x00026b10
   224a4:	00026b27 	.word	0x00026b27

000224a8 <z_impl_k_thread_create>:
{
   224a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224ac:	b086      	sub	sp, #24
   224ae:	4604      	mov	r4, r0
   224b0:	460e      	mov	r6, r1
   224b2:	4617      	mov	r7, r2
   224b4:	4698      	mov	r8, r3
   224b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   224b8:	f3ef 8305 	mrs	r3, IPSR
   224bc:	2b0d      	cmp	r3, #13
   224be:	d804      	bhi.n	224ca <z_impl_k_thread_create+0x22>
   224c0:	b193      	cbz	r3, 224e8 <z_impl_k_thread_create+0x40>
   224c2:	4b21      	ldr	r3, [pc, #132]	; (22548 <z_impl_k_thread_create+0xa0>)
   224c4:	685b      	ldr	r3, [r3, #4]
   224c6:	051a      	lsls	r2, r3, #20
   224c8:	d40e      	bmi.n	224e8 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   224ca:	4920      	ldr	r1, [pc, #128]	; (2254c <z_impl_k_thread_create+0xa4>)
   224cc:	f240 2315 	movw	r3, #533	; 0x215
   224d0:	4a1f      	ldr	r2, [pc, #124]	; (22550 <z_impl_k_thread_create+0xa8>)
   224d2:	4820      	ldr	r0, [pc, #128]	; (22554 <z_impl_k_thread_create+0xac>)
   224d4:	f001 fcd0 	bl	23e78 <printk>
   224d8:	481f      	ldr	r0, [pc, #124]	; (22558 <z_impl_k_thread_create+0xb0>)
   224da:	f001 fccd 	bl	23e78 <printk>
   224de:	f240 2115 	movw	r1, #533	; 0x215
   224e2:	481b      	ldr	r0, [pc, #108]	; (22550 <z_impl_k_thread_create+0xa8>)
   224e4:	f001 fcd5 	bl	23e92 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   224e8:	2300      	movs	r3, #0
   224ea:	9305      	str	r3, [sp, #20]
   224ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224ee:	463a      	mov	r2, r7
   224f0:	9304      	str	r3, [sp, #16]
   224f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   224f4:	4631      	mov	r1, r6
   224f6:	9303      	str	r3, [sp, #12]
   224f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   224fa:	4620      	mov	r0, r4
   224fc:	9302      	str	r3, [sp, #8]
   224fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22500:	9301      	str	r3, [sp, #4]
   22502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22504:	9300      	str	r3, [sp, #0]
   22506:	4643      	mov	r3, r8
   22508:	f7ff ff38 	bl	2237c <z_setup_new_thread>
	if (delay != K_FOREVER) {
   2250c:	1c6b      	adds	r3, r5, #1
   2250e:	d003      	beq.n	22518 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   22510:	b935      	cbnz	r5, 22520 <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   22512:	4620      	mov	r0, r4
   22514:	f7ff ff72 	bl	223fc <z_impl_k_thread_start>
}
   22518:	4620      	mov	r0, r4
   2251a:	b006      	add	sp, #24
   2251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22520:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22524:	f240 30e7 	movw	r0, #999	; 0x3e7
   22528:	2100      	movs	r1, #0
   2252a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2252e:	2300      	movs	r3, #0
   22530:	fbc6 0105 	smlal	r0, r1, r6, r5
   22534:	f7e9 fe74 	bl	c220 <__aeabi_ldivmod>
   22538:	4908      	ldr	r1, [pc, #32]	; (2255c <z_impl_k_thread_create+0xb4>)
   2253a:	1c42      	adds	r2, r0, #1
   2253c:	f104 0018 	add.w	r0, r4, #24
   22540:	f000 f8f8 	bl	22734 <z_add_timeout>
   22544:	e7e8      	b.n	22518 <z_impl_k_thread_create+0x70>
   22546:	bf00      	nop
   22548:	e000ed00 	.word	0xe000ed00
   2254c:	00027998 	.word	0x00027998
   22550:	00027b65 	.word	0x00027b65
   22554:	0002694b 	.word	0x0002694b
   22558:	00027b89 	.word	0x00027b89
   2255c:	0002175d 	.word	0x0002175d

00022560 <z_init_static_threads>:
{
   22560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22564:	4f3c      	ldr	r7, [pc, #240]	; (22658 <z_init_static_threads+0xf8>)
   22566:	4d3d      	ldr	r5, [pc, #244]	; (2265c <z_init_static_threads+0xfc>)
   22568:	463e      	mov	r6, r7
   2256a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2266c <z_init_static_threads+0x10c>
{
   2256e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   22570:	42bd      	cmp	r5, r7
   22572:	d90e      	bls.n	22592 <z_init_static_threads+0x32>
   22574:	493a      	ldr	r1, [pc, #232]	; (22660 <z_init_static_threads+0x100>)
   22576:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   2257a:	4642      	mov	r2, r8
   2257c:	4839      	ldr	r0, [pc, #228]	; (22664 <z_init_static_threads+0x104>)
   2257e:	f001 fc7b 	bl	23e78 <printk>
   22582:	4839      	ldr	r0, [pc, #228]	; (22668 <z_init_static_threads+0x108>)
   22584:	f001 fc78 	bl	23e78 <printk>
   22588:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2258c:	4640      	mov	r0, r8
   2258e:	f001 fc80 	bl	23e92 <assert_post_action>
   22592:	42b5      	cmp	r5, r6
   22594:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22598:	d31f      	bcc.n	225da <z_init_static_threads+0x7a>
	k_sched_lock();
   2259a:	f7fe fea5 	bl	212e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2259e:	4c2f      	ldr	r4, [pc, #188]	; (2265c <z_init_static_threads+0xfc>)
   225a0:	4d32      	ldr	r5, [pc, #200]	; (2266c <z_init_static_threads+0x10c>)
   225a2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 22660 <z_init_static_threads+0x100>
   225a6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 22664 <z_init_static_threads+0x104>
   225aa:	42b4      	cmp	r4, r6
   225ac:	d90e      	bls.n	225cc <z_init_static_threads+0x6c>
   225ae:	4641      	mov	r1, r8
   225b0:	f240 23f3 	movw	r3, #755	; 0x2f3
   225b4:	462a      	mov	r2, r5
   225b6:	4648      	mov	r0, r9
   225b8:	f001 fc5e 	bl	23e78 <printk>
   225bc:	482a      	ldr	r0, [pc, #168]	; (22668 <z_init_static_threads+0x108>)
   225be:	f001 fc5b 	bl	23e78 <printk>
   225c2:	f240 21f3 	movw	r1, #755	; 0x2f3
   225c6:	4628      	mov	r0, r5
   225c8:	f001 fc63 	bl	23e92 <assert_post_action>
   225cc:	42b4      	cmp	r4, r6
   225ce:	d321      	bcc.n	22614 <z_init_static_threads+0xb4>
}
   225d0:	b007      	add	sp, #28
   225d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   225d6:	f7fe bfbf 	b.w	21558 <k_sched_unlock>
		z_setup_new_thread(
   225da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   225de:	9305      	str	r3, [sp, #20]
   225e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   225e4:	9304      	str	r3, [sp, #16]
   225e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   225ea:	9303      	str	r3, [sp, #12]
   225ec:	f854 3c18 	ldr.w	r3, [r4, #-24]
   225f0:	9302      	str	r3, [sp, #8]
   225f2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   225f6:	9301      	str	r3, [sp, #4]
   225f8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   225fc:	9300      	str	r3, [sp, #0]
   225fe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22602:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22606:	f7ff feb9 	bl	2237c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2260a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2260e:	64dd      	str	r5, [r3, #76]	; 0x4c
   22610:	4625      	mov	r5, r4
   22612:	e7ad      	b.n	22570 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   22614:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   22618:	f1bc 3fff 	cmp.w	ip, #4294967295
   2261c:	d006      	beq.n	2262c <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2261e:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   22620:	f1bc 0f00 	cmp.w	ip, #0
   22624:	d104      	bne.n	22630 <z_init_static_threads+0xd0>
   22626:	4638      	mov	r0, r7
   22628:	f7ff fee8 	bl	223fc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2262c:	3430      	adds	r4, #48	; 0x30
   2262e:	e7bc      	b.n	225aa <z_init_static_threads+0x4a>
   22630:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   22634:	f240 30e7 	movw	r0, #999	; 0x3e7
   22638:	2100      	movs	r1, #0
   2263a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2263e:	2300      	movs	r3, #0
   22640:	fbce 010c 	smlal	r0, r1, lr, ip
   22644:	f7e9 fdec 	bl	c220 <__aeabi_ldivmod>
   22648:	4909      	ldr	r1, [pc, #36]	; (22670 <z_init_static_threads+0x110>)
   2264a:	1c42      	adds	r2, r0, #1
   2264c:	f107 0018 	add.w	r0, r7, #24
   22650:	f000 f870 	bl	22734 <z_add_timeout>
   22654:	e7ea      	b.n	2262c <z_init_static_threads+0xcc>
   22656:	bf00      	nop
   22658:	2002a414 	.word	0x2002a414
   2265c:	2002a414 	.word	0x2002a414
   22660:	00027bae 	.word	0x00027bae
   22664:	0002694b 	.word	0x0002694b
   22668:	00027819 	.word	0x00027819
   2266c:	00027b65 	.word	0x00027b65
   22670:	0002175d 	.word	0x0002175d

00022674 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   22674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22678:	4605      	mov	r5, r0
   2267a:	b086      	sub	sp, #24
   2267c:	460e      	mov	r6, r1
   2267e:	4617      	mov	r7, r2
   22680:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   22682:	f002 fce6 	bl	25052 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   22686:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2268a:	2000      	movs	r0, #0
   2268c:	4b09      	ldr	r3, [pc, #36]	; (226b4 <k_work_q_start+0x40>)
   2268e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   22692:	e9cd 0802 	strd	r0, r8, [sp, #8]
   22696:	e9cd 5000 	strd	r5, r0, [sp]
   2269a:	463a      	mov	r2, r7
   2269c:	4631      	mov	r1, r6
   2269e:	4620      	mov	r0, r4
   226a0:	f7ff ff02 	bl	224a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   226a4:	4620      	mov	r0, r4
   226a6:	4904      	ldr	r1, [pc, #16]	; (226b8 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   226a8:	b006      	add	sp, #24
   226aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   226ae:	f002 bd4a 	b.w	25146 <z_impl_k_thread_name_set>
   226b2:	bf00      	nop
   226b4:	00023b37 	.word	0x00023b37
   226b8:	00027bdb 	.word	0x00027bdb

000226bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   226bc:	4b03      	ldr	r3, [pc, #12]	; (226cc <elapsed+0x10>)
   226be:	681b      	ldr	r3, [r3, #0]
   226c0:	b90b      	cbnz	r3, 226c6 <elapsed+0xa>
   226c2:	f7eb b9d5 	b.w	da70 <z_clock_elapsed>
}
   226c6:	2000      	movs	r0, #0
   226c8:	4770      	bx	lr
   226ca:	bf00      	nop
   226cc:	20025c1c 	.word	0x20025c1c

000226d0 <next_timeout>:
	return list->head == list;
   226d0:	4b0b      	ldr	r3, [pc, #44]	; (22700 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   226d2:	b510      	push	{r4, lr}
   226d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226d6:	429c      	cmp	r4, r3
   226d8:	bf08      	it	eq
   226da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   226dc:	f7ff ffee 	bl	226bc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   226e0:	b154      	cbz	r4, 226f8 <next_timeout+0x28>
   226e2:	68a3      	ldr	r3, [r4, #8]
   226e4:	1a18      	subs	r0, r3, r0
   226e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   226ea:	4b06      	ldr	r3, [pc, #24]	; (22704 <next_timeout+0x34>)
   226ec:	691b      	ldr	r3, [r3, #16]
   226ee:	b113      	cbz	r3, 226f6 <next_timeout+0x26>
   226f0:	4298      	cmp	r0, r3
   226f2:	bfa8      	it	ge
   226f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   226f6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   226f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   226fc:	e7f5      	b.n	226ea <next_timeout+0x1a>
   226fe:	bf00      	nop
   22700:	2002a310 	.word	0x2002a310
   22704:	20025b0c 	.word	0x20025b0c

00022708 <remove_timeout>:
{
   22708:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2270a:	b140      	cbz	r0, 2271e <remove_timeout+0x16>
   2270c:	4a08      	ldr	r2, [pc, #32]	; (22730 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   2270e:	6852      	ldr	r2, [r2, #4]
   22710:	4290      	cmp	r0, r2
   22712:	d004      	beq.n	2271e <remove_timeout+0x16>
	if (next(t) != NULL) {
   22714:	b11b      	cbz	r3, 2271e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   22716:	689a      	ldr	r2, [r3, #8]
   22718:	6881      	ldr	r1, [r0, #8]
   2271a:	440a      	add	r2, r1
   2271c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2271e:	6842      	ldr	r2, [r0, #4]
   22720:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22722:	6803      	ldr	r3, [r0, #0]
   22724:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22726:	2300      	movs	r3, #0
	node->prev = NULL;
   22728:	e9c0 3300 	strd	r3, r3, [r0]
}
   2272c:	4770      	bx	lr
   2272e:	bf00      	nop
   22730:	2002a310 	.word	0x2002a310

00022734 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22734:	6803      	ldr	r3, [r0, #0]
{
   22736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2273a:	4604      	mov	r4, r0
   2273c:	460e      	mov	r6, r1
   2273e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22740:	b163      	cbz	r3, 2275c <z_add_timeout+0x28>
   22742:	4943      	ldr	r1, [pc, #268]	; (22850 <z_add_timeout+0x11c>)
   22744:	2356      	movs	r3, #86	; 0x56
   22746:	4a43      	ldr	r2, [pc, #268]	; (22854 <z_add_timeout+0x120>)
   22748:	4843      	ldr	r0, [pc, #268]	; (22858 <z_add_timeout+0x124>)
   2274a:	f001 fb95 	bl	23e78 <printk>
   2274e:	4843      	ldr	r0, [pc, #268]	; (2285c <z_add_timeout+0x128>)
   22750:	f001 fb92 	bl	23e78 <printk>
   22754:	2156      	movs	r1, #86	; 0x56
   22756:	483f      	ldr	r0, [pc, #252]	; (22854 <z_add_timeout+0x120>)
   22758:	f001 fb9b 	bl	23e92 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   2275c:	2d01      	cmp	r5, #1
   2275e:	bfb8      	it	lt
   22760:	2501      	movlt	r5, #1
	to->fn = fn;
   22762:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   22764:	f04f 0320 	mov.w	r3, #32
   22768:	f3ef 8811 	mrs	r8, BASEPRI
   2276c:	f383 8811 	msr	BASEPRI, r3
   22770:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22774:	483a      	ldr	r0, [pc, #232]	; (22860 <z_add_timeout+0x12c>)
   22776:	f7ff fe1b 	bl	223b0 <z_spin_lock_valid>
   2277a:	b960      	cbnz	r0, 22796 <z_add_timeout+0x62>
   2277c:	4939      	ldr	r1, [pc, #228]	; (22864 <z_add_timeout+0x130>)
   2277e:	235f      	movs	r3, #95	; 0x5f
   22780:	4a39      	ldr	r2, [pc, #228]	; (22868 <z_add_timeout+0x134>)
   22782:	4835      	ldr	r0, [pc, #212]	; (22858 <z_add_timeout+0x124>)
   22784:	f001 fb78 	bl	23e78 <printk>
   22788:	4838      	ldr	r0, [pc, #224]	; (2286c <z_add_timeout+0x138>)
   2278a:	f001 fb75 	bl	23e78 <printk>
   2278e:	215f      	movs	r1, #95	; 0x5f
   22790:	4835      	ldr	r0, [pc, #212]	; (22868 <z_add_timeout+0x134>)
   22792:	f001 fb7e 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22796:	4832      	ldr	r0, [pc, #200]	; (22860 <z_add_timeout+0x12c>)
   22798:	f7ff fe28 	bl	223ec <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2279c:	f7ff ff8e 	bl	226bc <elapsed>
	return list->head == list;
   227a0:	4e33      	ldr	r6, [pc, #204]	; (22870 <z_add_timeout+0x13c>)
   227a2:	4428      	add	r0, r5
   227a4:	6835      	ldr	r5, [r6, #0]
   227a6:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227a8:	42b5      	cmp	r5, r6
   227aa:	d005      	beq.n	227b8 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   227ac:	4f29      	ldr	r7, [pc, #164]	; (22854 <z_add_timeout+0x120>)
   227ae:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2287c <z_add_timeout+0x148>
   227b2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 22858 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   227b6:	b935      	cbnz	r5, 227c6 <z_add_timeout+0x92>
	node->prev = list->tail;
   227b8:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   227ba:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   227bc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   227be:	6873      	ldr	r3, [r6, #4]
   227c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   227c2:	6074      	str	r4, [r6, #4]
   227c4:	e01b      	b.n	227fe <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   227c6:	68ab      	ldr	r3, [r5, #8]
   227c8:	2b00      	cmp	r3, #0
   227ca:	da0c      	bge.n	227e6 <z_add_timeout+0xb2>
   227cc:	4649      	mov	r1, r9
   227ce:	235f      	movs	r3, #95	; 0x5f
   227d0:	463a      	mov	r2, r7
   227d2:	4650      	mov	r0, sl
   227d4:	f001 fb50 	bl	23e78 <printk>
   227d8:	4820      	ldr	r0, [pc, #128]	; (2285c <z_add_timeout+0x128>)
   227da:	f001 fb4d 	bl	23e78 <printk>
   227de:	215f      	movs	r1, #95	; 0x5f
   227e0:	4638      	mov	r0, r7
   227e2:	f001 fb56 	bl	23e92 <assert_post_action>

			if (t->dticks > to->dticks) {
   227e6:	68aa      	ldr	r2, [r5, #8]
   227e8:	68a3      	ldr	r3, [r4, #8]
   227ea:	429a      	cmp	r2, r3
   227ec:	dd28      	ble.n	22840 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   227ee:	1ad3      	subs	r3, r2, r3
   227f0:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   227f2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   227f4:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   227f8:	686b      	ldr	r3, [r5, #4]
   227fa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   227fc:	606c      	str	r4, [r5, #4]
	return list->head == list;
   227fe:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22800:	42b3      	cmp	r3, r6
   22802:	d006      	beq.n	22812 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22804:	429c      	cmp	r4, r3
   22806:	d104      	bne.n	22812 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   22808:	f7ff ff62 	bl	226d0 <next_timeout>
   2280c:	2100      	movs	r1, #0
   2280e:	f7eb f8ad 	bl	d96c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22812:	4813      	ldr	r0, [pc, #76]	; (22860 <z_add_timeout+0x12c>)
   22814:	f7ff fdda 	bl	223cc <z_spin_unlock_valid>
   22818:	b960      	cbnz	r0, 22834 <z_add_timeout+0x100>
   2281a:	4916      	ldr	r1, [pc, #88]	; (22874 <z_add_timeout+0x140>)
   2281c:	2372      	movs	r3, #114	; 0x72
   2281e:	4a12      	ldr	r2, [pc, #72]	; (22868 <z_add_timeout+0x134>)
   22820:	480d      	ldr	r0, [pc, #52]	; (22858 <z_add_timeout+0x124>)
   22822:	f001 fb29 	bl	23e78 <printk>
   22826:	4814      	ldr	r0, [pc, #80]	; (22878 <z_add_timeout+0x144>)
   22828:	f001 fb26 	bl	23e78 <printk>
   2282c:	2172      	movs	r1, #114	; 0x72
   2282e:	480e      	ldr	r0, [pc, #56]	; (22868 <z_add_timeout+0x134>)
   22830:	f001 fb2f 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22834:	f388 8811 	msr	BASEPRI, r8
   22838:	f3bf 8f6f 	isb	sy
		}
	}
}
   2283c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   22840:	1a9b      	subs	r3, r3, r2
   22842:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   22844:	6873      	ldr	r3, [r6, #4]
   22846:	42ab      	cmp	r3, r5
   22848:	d0b6      	beq.n	227b8 <z_add_timeout+0x84>
   2284a:	682d      	ldr	r5, [r5, #0]
   2284c:	e7b3      	b.n	227b6 <z_add_timeout+0x82>
   2284e:	bf00      	nop
   22850:	00027c0a 	.word	0x00027c0a
   22854:	00027be5 	.word	0x00027be5
   22858:	0002694b 	.word	0x0002694b
   2285c:	0002789d 	.word	0x0002789d
   22860:	20025c20 	.word	0x20025c20
   22864:	00026ae6 	.word	0x00026ae6
   22868:	00026abf 	.word	0x00026abf
   2286c:	00026afb 	.word	0x00026afb
   22870:	2002a310 	.word	0x2002a310
   22874:	00026b10 	.word	0x00026b10
   22878:	00026b27 	.word	0x00026b27
   2287c:	00027c2a 	.word	0x00027c2a

00022880 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22880:	b538      	push	{r3, r4, r5, lr}
   22882:	4604      	mov	r4, r0
	__asm__ volatile(
   22884:	f04f 0320 	mov.w	r3, #32
   22888:	f3ef 8511 	mrs	r5, BASEPRI
   2288c:	f383 8811 	msr	BASEPRI, r3
   22890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22894:	4819      	ldr	r0, [pc, #100]	; (228fc <z_abort_timeout+0x7c>)
   22896:	f7ff fd8b 	bl	223b0 <z_spin_lock_valid>
   2289a:	b960      	cbnz	r0, 228b6 <z_abort_timeout+0x36>
   2289c:	4918      	ldr	r1, [pc, #96]	; (22900 <z_abort_timeout+0x80>)
   2289e:	235f      	movs	r3, #95	; 0x5f
   228a0:	4a18      	ldr	r2, [pc, #96]	; (22904 <z_abort_timeout+0x84>)
   228a2:	4819      	ldr	r0, [pc, #100]	; (22908 <z_abort_timeout+0x88>)
   228a4:	f001 fae8 	bl	23e78 <printk>
   228a8:	4818      	ldr	r0, [pc, #96]	; (2290c <z_abort_timeout+0x8c>)
   228aa:	f001 fae5 	bl	23e78 <printk>
   228ae:	215f      	movs	r1, #95	; 0x5f
   228b0:	4814      	ldr	r0, [pc, #80]	; (22904 <z_abort_timeout+0x84>)
   228b2:	f001 faee 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   228b6:	4811      	ldr	r0, [pc, #68]	; (228fc <z_abort_timeout+0x7c>)
   228b8:	f7ff fd98 	bl	223ec <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   228bc:	6823      	ldr	r3, [r4, #0]
   228be:	b1d3      	cbz	r3, 228f6 <z_abort_timeout+0x76>
			remove_timeout(to);
   228c0:	4620      	mov	r0, r4
   228c2:	f7ff ff21 	bl	22708 <remove_timeout>
			ret = 0;
   228c6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   228c8:	480c      	ldr	r0, [pc, #48]	; (228fc <z_abort_timeout+0x7c>)
   228ca:	f7ff fd7f 	bl	223cc <z_spin_unlock_valid>
   228ce:	b960      	cbnz	r0, 228ea <z_abort_timeout+0x6a>
   228d0:	490f      	ldr	r1, [pc, #60]	; (22910 <z_abort_timeout+0x90>)
   228d2:	2372      	movs	r3, #114	; 0x72
   228d4:	4a0b      	ldr	r2, [pc, #44]	; (22904 <z_abort_timeout+0x84>)
   228d6:	480c      	ldr	r0, [pc, #48]	; (22908 <z_abort_timeout+0x88>)
   228d8:	f001 face 	bl	23e78 <printk>
   228dc:	480d      	ldr	r0, [pc, #52]	; (22914 <z_abort_timeout+0x94>)
   228de:	f001 facb 	bl	23e78 <printk>
   228e2:	2172      	movs	r1, #114	; 0x72
   228e4:	4807      	ldr	r0, [pc, #28]	; (22904 <z_abort_timeout+0x84>)
   228e6:	f001 fad4 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   228ea:	f385 8811 	msr	BASEPRI, r5
   228ee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   228f2:	4620      	mov	r0, r4
   228f4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   228f6:	f06f 0415 	mvn.w	r4, #21
   228fa:	e7e5      	b.n	228c8 <z_abort_timeout+0x48>
   228fc:	20025c20 	.word	0x20025c20
   22900:	00026ae6 	.word	0x00026ae6
   22904:	00026abf 	.word	0x00026abf
   22908:	0002694b 	.word	0x0002694b
   2290c:	00026afb 	.word	0x00026afb
   22910:	00026b10 	.word	0x00026b10
   22914:	00026b27 	.word	0x00026b27

00022918 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   22918:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2291a:	f04f 0320 	mov.w	r3, #32
   2291e:	f3ef 8511 	mrs	r5, BASEPRI
   22922:	f383 8811 	msr	BASEPRI, r3
   22926:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2292a:	4817      	ldr	r0, [pc, #92]	; (22988 <z_get_next_timeout_expiry+0x70>)
   2292c:	f7ff fd40 	bl	223b0 <z_spin_lock_valid>
   22930:	b960      	cbnz	r0, 2294c <z_get_next_timeout_expiry+0x34>
   22932:	4916      	ldr	r1, [pc, #88]	; (2298c <z_get_next_timeout_expiry+0x74>)
   22934:	235f      	movs	r3, #95	; 0x5f
   22936:	4a16      	ldr	r2, [pc, #88]	; (22990 <z_get_next_timeout_expiry+0x78>)
   22938:	4816      	ldr	r0, [pc, #88]	; (22994 <z_get_next_timeout_expiry+0x7c>)
   2293a:	f001 fa9d 	bl	23e78 <printk>
   2293e:	4816      	ldr	r0, [pc, #88]	; (22998 <z_get_next_timeout_expiry+0x80>)
   22940:	f001 fa9a 	bl	23e78 <printk>
   22944:	215f      	movs	r1, #95	; 0x5f
   22946:	4812      	ldr	r0, [pc, #72]	; (22990 <z_get_next_timeout_expiry+0x78>)
   22948:	f001 faa3 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2294c:	480e      	ldr	r0, [pc, #56]	; (22988 <z_get_next_timeout_expiry+0x70>)
   2294e:	f7ff fd4d 	bl	223ec <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22952:	f7ff febd 	bl	226d0 <next_timeout>
   22956:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22958:	480b      	ldr	r0, [pc, #44]	; (22988 <z_get_next_timeout_expiry+0x70>)
   2295a:	f7ff fd37 	bl	223cc <z_spin_unlock_valid>
   2295e:	b960      	cbnz	r0, 2297a <z_get_next_timeout_expiry+0x62>
   22960:	490e      	ldr	r1, [pc, #56]	; (2299c <z_get_next_timeout_expiry+0x84>)
   22962:	2372      	movs	r3, #114	; 0x72
   22964:	4a0a      	ldr	r2, [pc, #40]	; (22990 <z_get_next_timeout_expiry+0x78>)
   22966:	480b      	ldr	r0, [pc, #44]	; (22994 <z_get_next_timeout_expiry+0x7c>)
   22968:	f001 fa86 	bl	23e78 <printk>
   2296c:	480c      	ldr	r0, [pc, #48]	; (229a0 <z_get_next_timeout_expiry+0x88>)
   2296e:	f001 fa83 	bl	23e78 <printk>
   22972:	2172      	movs	r1, #114	; 0x72
   22974:	4806      	ldr	r0, [pc, #24]	; (22990 <z_get_next_timeout_expiry+0x78>)
   22976:	f001 fa8c 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   2297a:	f385 8811 	msr	BASEPRI, r5
   2297e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   22982:	4620      	mov	r0, r4
   22984:	bd38      	pop	{r3, r4, r5, pc}
   22986:	bf00      	nop
   22988:	20025c20 	.word	0x20025c20
   2298c:	00026ae6 	.word	0x00026ae6
   22990:	00026abf 	.word	0x00026abf
   22994:	0002694b 	.word	0x0002694b
   22998:	00026afb 	.word	0x00026afb
   2299c:	00026b10 	.word	0x00026b10
   229a0:	00026b27 	.word	0x00026b27

000229a4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   229a4:	b570      	push	{r4, r5, r6, lr}
   229a6:	4604      	mov	r4, r0
   229a8:	460e      	mov	r6, r1
	__asm__ volatile(
   229aa:	f04f 0320 	mov.w	r3, #32
   229ae:	f3ef 8511 	mrs	r5, BASEPRI
   229b2:	f383 8811 	msr	BASEPRI, r3
   229b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   229ba:	481a      	ldr	r0, [pc, #104]	; (22a24 <z_set_timeout_expiry+0x80>)
   229bc:	f7ff fcf8 	bl	223b0 <z_spin_lock_valid>
   229c0:	b960      	cbnz	r0, 229dc <z_set_timeout_expiry+0x38>
   229c2:	4919      	ldr	r1, [pc, #100]	; (22a28 <z_set_timeout_expiry+0x84>)
   229c4:	235f      	movs	r3, #95	; 0x5f
   229c6:	4a19      	ldr	r2, [pc, #100]	; (22a2c <z_set_timeout_expiry+0x88>)
   229c8:	4819      	ldr	r0, [pc, #100]	; (22a30 <z_set_timeout_expiry+0x8c>)
   229ca:	f001 fa55 	bl	23e78 <printk>
   229ce:	4819      	ldr	r0, [pc, #100]	; (22a34 <z_set_timeout_expiry+0x90>)
   229d0:	f001 fa52 	bl	23e78 <printk>
   229d4:	215f      	movs	r1, #95	; 0x5f
   229d6:	4815      	ldr	r0, [pc, #84]	; (22a2c <z_set_timeout_expiry+0x88>)
   229d8:	f001 fa5b 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   229dc:	4811      	ldr	r0, [pc, #68]	; (22a24 <z_set_timeout_expiry+0x80>)
   229de:	f7ff fd05 	bl	223ec <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   229e2:	f7ff fe75 	bl	226d0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   229e6:	2801      	cmp	r0, #1
   229e8:	dd05      	ble.n	229f6 <z_set_timeout_expiry+0x52>
   229ea:	42a0      	cmp	r0, r4
   229ec:	dd03      	ble.n	229f6 <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   229ee:	4631      	mov	r1, r6
   229f0:	4620      	mov	r0, r4
   229f2:	f7ea ffbb 	bl	d96c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   229f6:	480b      	ldr	r0, [pc, #44]	; (22a24 <z_set_timeout_expiry+0x80>)
   229f8:	f7ff fce8 	bl	223cc <z_spin_unlock_valid>
   229fc:	b960      	cbnz	r0, 22a18 <z_set_timeout_expiry+0x74>
   229fe:	490e      	ldr	r1, [pc, #56]	; (22a38 <z_set_timeout_expiry+0x94>)
   22a00:	2372      	movs	r3, #114	; 0x72
   22a02:	4a0a      	ldr	r2, [pc, #40]	; (22a2c <z_set_timeout_expiry+0x88>)
   22a04:	480a      	ldr	r0, [pc, #40]	; (22a30 <z_set_timeout_expiry+0x8c>)
   22a06:	f001 fa37 	bl	23e78 <printk>
   22a0a:	480c      	ldr	r0, [pc, #48]	; (22a3c <z_set_timeout_expiry+0x98>)
   22a0c:	f001 fa34 	bl	23e78 <printk>
   22a10:	2172      	movs	r1, #114	; 0x72
   22a12:	4806      	ldr	r0, [pc, #24]	; (22a2c <z_set_timeout_expiry+0x88>)
   22a14:	f001 fa3d 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22a18:	f385 8811 	msr	BASEPRI, r5
   22a1c:	f3bf 8f6f 	isb	sy
		}
	}
}
   22a20:	bd70      	pop	{r4, r5, r6, pc}
   22a22:	bf00      	nop
   22a24:	20025c20 	.word	0x20025c20
   22a28:	00026ae6 	.word	0x00026ae6
   22a2c:	00026abf 	.word	0x00026abf
   22a30:	0002694b 	.word	0x0002694b
   22a34:	00026afb 	.word	0x00026afb
   22a38:	00026b10 	.word	0x00026b10
   22a3c:	00026b27 	.word	0x00026b27

00022a40 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   22a40:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   22a44:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22a46:	f7fe ff7d 	bl	21944 <z_time_slice>
	__asm__ volatile(
   22a4a:	f04f 0320 	mov.w	r3, #32
   22a4e:	f3ef 8511 	mrs	r5, BASEPRI
   22a52:	f383 8811 	msr	BASEPRI, r3
   22a56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22a5a:	4846      	ldr	r0, [pc, #280]	; (22b74 <z_clock_announce+0x134>)
   22a5c:	f7ff fca8 	bl	223b0 <z_spin_lock_valid>
   22a60:	b960      	cbnz	r0, 22a7c <z_clock_announce+0x3c>
   22a62:	4945      	ldr	r1, [pc, #276]	; (22b78 <z_clock_announce+0x138>)
   22a64:	235f      	movs	r3, #95	; 0x5f
   22a66:	4a45      	ldr	r2, [pc, #276]	; (22b7c <z_clock_announce+0x13c>)
   22a68:	4845      	ldr	r0, [pc, #276]	; (22b80 <z_clock_announce+0x140>)
   22a6a:	f001 fa05 	bl	23e78 <printk>
   22a6e:	4845      	ldr	r0, [pc, #276]	; (22b84 <z_clock_announce+0x144>)
   22a70:	f001 fa02 	bl	23e78 <printk>
   22a74:	215f      	movs	r1, #95	; 0x5f
   22a76:	4841      	ldr	r0, [pc, #260]	; (22b7c <z_clock_announce+0x13c>)
   22a78:	f001 fa0b 	bl	23e92 <assert_post_action>
   22a7c:	4f42      	ldr	r7, [pc, #264]	; (22b88 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22a7e:	4e43      	ldr	r6, [pc, #268]	; (22b8c <z_clock_announce+0x14c>)
   22a80:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   22a82:	483c      	ldr	r0, [pc, #240]	; (22b74 <z_clock_announce+0x134>)
	return list->head == list;
   22a84:	f8df 8110 	ldr.w	r8, [pc, #272]	; 22b98 <z_clock_announce+0x158>
   22a88:	f7ff fcb0 	bl	223ec <z_spin_lock_set_owner>
   22a8c:	6034      	str	r4, [r6, #0]
   22a8e:	f8d8 4000 	ldr.w	r4, [r8]
   22a92:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a94:	4544      	cmp	r4, r8
   22a96:	e9d7 bc00 	ldrd	fp, ip, [r7]
   22a9a:	d005      	beq.n	22aa8 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22a9c:	b124      	cbz	r4, 22aa8 <z_clock_announce+0x68>
   22a9e:	68a3      	ldr	r3, [r4, #8]
   22aa0:	4293      	cmp	r3, r2
   22aa2:	dd25      	ble.n	22af0 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22aa4:	1a9b      	subs	r3, r3, r2
   22aa6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   22aa8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22aaa:	eb1b 0002 	adds.w	r0, fp, r2
   22aae:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   22ab2:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   22ab6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   22ab8:	f7ff fe0a 	bl	226d0 <next_timeout>
   22abc:	4621      	mov	r1, r4
   22abe:	f7ea ff55 	bl	d96c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22ac2:	482c      	ldr	r0, [pc, #176]	; (22b74 <z_clock_announce+0x134>)
   22ac4:	f7ff fc82 	bl	223cc <z_spin_unlock_valid>
   22ac8:	b960      	cbnz	r0, 22ae4 <z_clock_announce+0xa4>
   22aca:	4931      	ldr	r1, [pc, #196]	; (22b90 <z_clock_announce+0x150>)
   22acc:	2372      	movs	r3, #114	; 0x72
   22ace:	4a2b      	ldr	r2, [pc, #172]	; (22b7c <z_clock_announce+0x13c>)
   22ad0:	482b      	ldr	r0, [pc, #172]	; (22b80 <z_clock_announce+0x140>)
   22ad2:	f001 f9d1 	bl	23e78 <printk>
   22ad6:	482f      	ldr	r0, [pc, #188]	; (22b94 <z_clock_announce+0x154>)
   22ad8:	f001 f9ce 	bl	23e78 <printk>
   22adc:	2172      	movs	r1, #114	; 0x72
   22ade:	4827      	ldr	r0, [pc, #156]	; (22b7c <z_clock_announce+0x13c>)
   22ae0:	f001 f9d7 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22ae4:	f385 8811 	msr	BASEPRI, r5
   22ae8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22aec:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   22af0:	eb1b 0003 	adds.w	r0, fp, r3
   22af4:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   22af8:	1ad3      	subs	r3, r2, r3
   22afa:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   22afc:	2300      	movs	r3, #0
		curr_tick += dt;
   22afe:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   22b02:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   22b04:	4620      	mov	r0, r4
   22b06:	f7ff fdff 	bl	22708 <remove_timeout>
   22b0a:	481a      	ldr	r0, [pc, #104]	; (22b74 <z_clock_announce+0x134>)
   22b0c:	f7ff fc5e 	bl	223cc <z_spin_unlock_valid>
   22b10:	b960      	cbnz	r0, 22b2c <z_clock_announce+0xec>
   22b12:	491f      	ldr	r1, [pc, #124]	; (22b90 <z_clock_announce+0x150>)
   22b14:	2372      	movs	r3, #114	; 0x72
   22b16:	4a19      	ldr	r2, [pc, #100]	; (22b7c <z_clock_announce+0x13c>)
   22b18:	4819      	ldr	r0, [pc, #100]	; (22b80 <z_clock_announce+0x140>)
   22b1a:	f001 f9ad 	bl	23e78 <printk>
   22b1e:	481d      	ldr	r0, [pc, #116]	; (22b94 <z_clock_announce+0x154>)
   22b20:	f001 f9aa 	bl	23e78 <printk>
   22b24:	2172      	movs	r1, #114	; 0x72
   22b26:	4815      	ldr	r0, [pc, #84]	; (22b7c <z_clock_announce+0x13c>)
   22b28:	f001 f9b3 	bl	23e92 <assert_post_action>
   22b2c:	f385 8811 	msr	BASEPRI, r5
   22b30:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22b34:	68e3      	ldr	r3, [r4, #12]
   22b36:	4620      	mov	r0, r4
   22b38:	4798      	blx	r3
	__asm__ volatile(
   22b3a:	f04f 0320 	mov.w	r3, #32
   22b3e:	f3ef 8511 	mrs	r5, BASEPRI
   22b42:	f383 8811 	msr	BASEPRI, r3
   22b46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22b4a:	480a      	ldr	r0, [pc, #40]	; (22b74 <z_clock_announce+0x134>)
   22b4c:	f7ff fc30 	bl	223b0 <z_spin_lock_valid>
   22b50:	b960      	cbnz	r0, 22b6c <z_clock_announce+0x12c>
   22b52:	4909      	ldr	r1, [pc, #36]	; (22b78 <z_clock_announce+0x138>)
   22b54:	235f      	movs	r3, #95	; 0x5f
   22b56:	4a09      	ldr	r2, [pc, #36]	; (22b7c <z_clock_announce+0x13c>)
   22b58:	4809      	ldr	r0, [pc, #36]	; (22b80 <z_clock_announce+0x140>)
   22b5a:	f001 f98d 	bl	23e78 <printk>
   22b5e:	4809      	ldr	r0, [pc, #36]	; (22b84 <z_clock_announce+0x144>)
   22b60:	f001 f98a 	bl	23e78 <printk>
   22b64:	215f      	movs	r1, #95	; 0x5f
   22b66:	4805      	ldr	r0, [pc, #20]	; (22b7c <z_clock_announce+0x13c>)
   22b68:	f001 f993 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b6c:	4801      	ldr	r0, [pc, #4]	; (22b74 <z_clock_announce+0x134>)
   22b6e:	f7ff fc3d 	bl	223ec <z_spin_lock_set_owner>
   22b72:	e78c      	b.n	22a8e <z_clock_announce+0x4e>
   22b74:	20025c20 	.word	0x20025c20
   22b78:	00026ae6 	.word	0x00026ae6
   22b7c:	00026abf 	.word	0x00026abf
   22b80:	0002694b 	.word	0x0002694b
   22b84:	00026afb 	.word	0x00026afb
   22b88:	20020000 	.word	0x20020000
   22b8c:	20025c1c 	.word	0x20025c1c
   22b90:	00026b10 	.word	0x00026b10
   22b94:	00026b27 	.word	0x00026b27
   22b98:	2002a310 	.word	0x2002a310

00022b9c <z_tick_get>:

s64_t z_tick_get(void)
{
   22b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ba0:	f04f 0320 	mov.w	r3, #32
   22ba4:	f3ef 8611 	mrs	r6, BASEPRI
   22ba8:	f383 8811 	msr	BASEPRI, r3
   22bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22bb0:	481a      	ldr	r0, [pc, #104]	; (22c1c <z_tick_get+0x80>)
   22bb2:	f7ff fbfd 	bl	223b0 <z_spin_lock_valid>
   22bb6:	b960      	cbnz	r0, 22bd2 <z_tick_get+0x36>
   22bb8:	4919      	ldr	r1, [pc, #100]	; (22c20 <z_tick_get+0x84>)
   22bba:	235f      	movs	r3, #95	; 0x5f
   22bbc:	4a19      	ldr	r2, [pc, #100]	; (22c24 <z_tick_get+0x88>)
   22bbe:	481a      	ldr	r0, [pc, #104]	; (22c28 <z_tick_get+0x8c>)
   22bc0:	f001 f95a 	bl	23e78 <printk>
   22bc4:	4819      	ldr	r0, [pc, #100]	; (22c2c <z_tick_get+0x90>)
   22bc6:	f001 f957 	bl	23e78 <printk>
   22bca:	215f      	movs	r1, #95	; 0x5f
   22bcc:	4815      	ldr	r0, [pc, #84]	; (22c24 <z_tick_get+0x88>)
   22bce:	f001 f960 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22bd2:	4812      	ldr	r0, [pc, #72]	; (22c1c <z_tick_get+0x80>)
   22bd4:	f7ff fc0a 	bl	223ec <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   22bd8:	f7ea ff4a 	bl	da70 <z_clock_elapsed>
   22bdc:	4b14      	ldr	r3, [pc, #80]	; (22c30 <z_tick_get+0x94>)
   22bde:	e9d3 4500 	ldrd	r4, r5, [r3]
   22be2:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22be4:	480d      	ldr	r0, [pc, #52]	; (22c1c <z_tick_get+0x80>)
   22be6:	f145 0800 	adc.w	r8, r5, #0
   22bea:	f7ff fbef 	bl	223cc <z_spin_unlock_valid>
   22bee:	b960      	cbnz	r0, 22c0a <z_tick_get+0x6e>
   22bf0:	4910      	ldr	r1, [pc, #64]	; (22c34 <z_tick_get+0x98>)
   22bf2:	2372      	movs	r3, #114	; 0x72
   22bf4:	4a0b      	ldr	r2, [pc, #44]	; (22c24 <z_tick_get+0x88>)
   22bf6:	480c      	ldr	r0, [pc, #48]	; (22c28 <z_tick_get+0x8c>)
   22bf8:	f001 f93e 	bl	23e78 <printk>
   22bfc:	480e      	ldr	r0, [pc, #56]	; (22c38 <z_tick_get+0x9c>)
   22bfe:	f001 f93b 	bl	23e78 <printk>
   22c02:	2172      	movs	r1, #114	; 0x72
   22c04:	4807      	ldr	r0, [pc, #28]	; (22c24 <z_tick_get+0x88>)
   22c06:	f001 f944 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22c0a:	f386 8811 	msr	BASEPRI, r6
   22c0e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22c12:	4638      	mov	r0, r7
   22c14:	4641      	mov	r1, r8
   22c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c1a:	bf00      	nop
   22c1c:	20025c20 	.word	0x20025c20
   22c20:	00026ae6 	.word	0x00026ae6
   22c24:	00026abf 	.word	0x00026abf
   22c28:	0002694b 	.word	0x0002694b
   22c2c:	00026afb 	.word	0x00026afb
   22c30:	20020000 	.word	0x20020000
   22c34:	00026b10 	.word	0x00026b10
   22c38:	00026b27 	.word	0x00026b27

00022c3c <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   22c3c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   22c3e:	6883      	ldr	r3, [r0, #8]
{
   22c40:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   22c42:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   22c44:	b964      	cbnz	r4, 22c60 <k_poll_poller_cb+0x24>
   22c46:	4915      	ldr	r1, [pc, #84]	; (22c9c <k_poll_poller_cb+0x60>)
   22c48:	23e0      	movs	r3, #224	; 0xe0
   22c4a:	4a15      	ldr	r2, [pc, #84]	; (22ca0 <k_poll_poller_cb+0x64>)
   22c4c:	4815      	ldr	r0, [pc, #84]	; (22ca4 <k_poll_poller_cb+0x68>)
   22c4e:	f001 f913 	bl	23e78 <printk>
   22c52:	4815      	ldr	r0, [pc, #84]	; (22ca8 <k_poll_poller_cb+0x6c>)
   22c54:	f001 f910 	bl	23e78 <printk>
   22c58:	21e0      	movs	r1, #224	; 0xe0
   22c5a:	4811      	ldr	r0, [pc, #68]	; (22ca0 <k_poll_poller_cb+0x64>)
   22c5c:	f001 f919 	bl	23e92 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   22c60:	7b63      	ldrb	r3, [r4, #13]
   22c62:	079a      	lsls	r2, r3, #30
   22c64:	d401      	bmi.n	22c6a <k_poll_poller_cb+0x2e>
		return 0;
   22c66:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   22c68:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   22c6a:	6a23      	ldr	r3, [r4, #32]
   22c6c:	3302      	adds	r3, #2
   22c6e:	d012      	beq.n	22c96 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   22c70:	4620      	mov	r0, r4
   22c72:	f7fe fbe7 	bl	21444 <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   22c76:	2d08      	cmp	r5, #8
   22c78:	bf0c      	ite	eq
   22c7a:	f06f 0303 	mvneq.w	r3, #3
   22c7e:	2300      	movne	r3, #0
   22c80:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22c82:	7b63      	ldrb	r3, [r4, #13]
   22c84:	06db      	lsls	r3, r3, #27
   22c86:	d1ee      	bne.n	22c66 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   22c88:	69a5      	ldr	r5, [r4, #24]
   22c8a:	2d00      	cmp	r5, #0
   22c8c:	d1eb      	bne.n	22c66 <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   22c8e:	4620      	mov	r0, r4
   22c90:	f7fe fce4 	bl	2165c <z_add_thread_to_ready_q>
   22c94:	e7e7      	b.n	22c66 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   22c96:	f06f 000a 	mvn.w	r0, #10
   22c9a:	e7e5      	b.n	22c68 <k_poll_poller_cb+0x2c>
   22c9c:	00027da8 	.word	0x00027da8
   22ca0:	00027d86 	.word	0x00027d86
   22ca4:	0002694b 	.word	0x0002694b
   22ca8:	00027dbe 	.word	0x00027dbe

00022cac <clear_event_registrations>:
{
   22cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22cb0:	2414      	movs	r4, #20
   22cb2:	4680      	mov	r8, r0
   22cb4:	4617      	mov	r7, r2
   22cb6:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   22cba:	4d48      	ldr	r5, [pc, #288]	; (22ddc <clear_event_registrations+0x130>)
   22cbc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 22e18 <clear_event_registrations+0x16c>
   22cc0:	4e47      	ldr	r6, [pc, #284]	; (22de0 <clear_event_registrations+0x134>)
	while (num_events--) {
   22cc2:	4544      	cmp	r4, r8
   22cc4:	d101      	bne.n	22cca <clear_event_registrations+0x1e>
}
   22cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   22cca:	2300      	movs	r3, #0
   22ccc:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   22cd0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   22cd4:	f003 030f 	and.w	r3, r3, #15
   22cd8:	2b04      	cmp	r3, #4
   22cda:	d83f      	bhi.n	22d5c <clear_event_registrations+0xb0>
   22cdc:	e8df f003 	tbb	[pc, r3]
   22ce0:	3e032f4b 	.word	0x3e032f4b
   22ce4:	20          	.byte	0x20
   22ce5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22ce6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22cea:	b963      	cbnz	r3, 22d06 <clear_event_registrations+0x5a>
   22cec:	493d      	ldr	r1, [pc, #244]	; (22de4 <clear_event_registrations+0x138>)
   22cee:	2396      	movs	r3, #150	; 0x96
   22cf0:	462a      	mov	r2, r5
   22cf2:	4630      	mov	r0, r6
   22cf4:	f001 f8c0 	bl	23e78 <printk>
   22cf8:	483b      	ldr	r0, [pc, #236]	; (22de8 <clear_event_registrations+0x13c>)
   22cfa:	f001 f8bd 	bl	23e78 <printk>
   22cfe:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22d00:	4628      	mov	r0, r5
   22d02:	f001 f8c6 	bl	23e92 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   22d06:	f854 2c14 	ldr.w	r2, [r4, #-20]
   22d0a:	b3a2      	cbz	r2, 22d76 <clear_event_registrations+0xca>
	node->prev->next = node->next;
   22d0c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22d10:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22d12:	f854 2c14 	ldr.w	r2, [r4, #-20]
   22d16:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22d18:	2300      	movs	r3, #0
	node->prev = NULL;
   22d1a:	e944 3305 	strd	r3, r3, [r4, #-20]
   22d1e:	e02a      	b.n	22d76 <clear_event_registrations+0xca>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22d20:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22d24:	2b00      	cmp	r3, #0
   22d26:	d1ee      	bne.n	22d06 <clear_event_registrations+0x5a>
   22d28:	4930      	ldr	r1, [pc, #192]	; (22dec <clear_event_registrations+0x140>)
   22d2a:	239a      	movs	r3, #154	; 0x9a
   22d2c:	462a      	mov	r2, r5
   22d2e:	4630      	mov	r0, r6
   22d30:	f001 f8a2 	bl	23e78 <printk>
   22d34:	482e      	ldr	r0, [pc, #184]	; (22df0 <clear_event_registrations+0x144>)
   22d36:	f001 f89f 	bl	23e78 <printk>
   22d3a:	219a      	movs	r1, #154	; 0x9a
   22d3c:	e7e0      	b.n	22d00 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22d3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22d42:	2b00      	cmp	r3, #0
   22d44:	d1df      	bne.n	22d06 <clear_event_registrations+0x5a>
   22d46:	492b      	ldr	r1, [pc, #172]	; (22df4 <clear_event_registrations+0x148>)
   22d48:	239e      	movs	r3, #158	; 0x9e
   22d4a:	462a      	mov	r2, r5
   22d4c:	4630      	mov	r0, r6
   22d4e:	f001 f893 	bl	23e78 <printk>
   22d52:	4829      	ldr	r0, [pc, #164]	; (22df8 <clear_event_registrations+0x14c>)
   22d54:	f001 f890 	bl	23e78 <printk>
   22d58:	219e      	movs	r1, #158	; 0x9e
   22d5a:	e7d1      	b.n	22d00 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   22d5c:	4649      	mov	r1, r9
   22d5e:	23a5      	movs	r3, #165	; 0xa5
   22d60:	462a      	mov	r2, r5
   22d62:	4630      	mov	r0, r6
   22d64:	f001 f888 	bl	23e78 <printk>
   22d68:	4824      	ldr	r0, [pc, #144]	; (22dfc <clear_event_registrations+0x150>)
   22d6a:	f001 f885 	bl	23e78 <printk>
   22d6e:	21a5      	movs	r1, #165	; 0xa5
   22d70:	4628      	mov	r0, r5
   22d72:	f001 f88e 	bl	23e92 <assert_post_action>
   22d76:	4822      	ldr	r0, [pc, #136]	; (22e00 <clear_event_registrations+0x154>)
   22d78:	f7ff fb28 	bl	223cc <z_spin_unlock_valid>
   22d7c:	b960      	cbnz	r0, 22d98 <clear_event_registrations+0xec>
   22d7e:	4921      	ldr	r1, [pc, #132]	; (22e04 <clear_event_registrations+0x158>)
   22d80:	2372      	movs	r3, #114	; 0x72
   22d82:	4a21      	ldr	r2, [pc, #132]	; (22e08 <clear_event_registrations+0x15c>)
   22d84:	4630      	mov	r0, r6
   22d86:	f001 f877 	bl	23e78 <printk>
   22d8a:	4820      	ldr	r0, [pc, #128]	; (22e0c <clear_event_registrations+0x160>)
   22d8c:	f001 f874 	bl	23e78 <printk>
   22d90:	2172      	movs	r1, #114	; 0x72
   22d92:	481d      	ldr	r0, [pc, #116]	; (22e08 <clear_event_registrations+0x15c>)
   22d94:	f001 f87d 	bl	23e92 <assert_post_action>
   22d98:	f387 8811 	msr	BASEPRI, r7
   22d9c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22da0:	f04f 0320 	mov.w	r3, #32
   22da4:	f3ef 8711 	mrs	r7, BASEPRI
   22da8:	f383 8811 	msr	BASEPRI, r3
   22dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22db0:	4813      	ldr	r0, [pc, #76]	; (22e00 <clear_event_registrations+0x154>)
   22db2:	f7ff fafd 	bl	223b0 <z_spin_lock_valid>
   22db6:	b960      	cbnz	r0, 22dd2 <clear_event_registrations+0x126>
   22db8:	4915      	ldr	r1, [pc, #84]	; (22e10 <clear_event_registrations+0x164>)
   22dba:	235f      	movs	r3, #95	; 0x5f
   22dbc:	4a12      	ldr	r2, [pc, #72]	; (22e08 <clear_event_registrations+0x15c>)
   22dbe:	4630      	mov	r0, r6
   22dc0:	f001 f85a 	bl	23e78 <printk>
   22dc4:	4813      	ldr	r0, [pc, #76]	; (22e14 <clear_event_registrations+0x168>)
   22dc6:	f001 f857 	bl	23e78 <printk>
   22dca:	215f      	movs	r1, #95	; 0x5f
   22dcc:	480e      	ldr	r0, [pc, #56]	; (22e08 <clear_event_registrations+0x15c>)
   22dce:	f001 f860 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22dd2:	480b      	ldr	r0, [pc, #44]	; (22e00 <clear_event_registrations+0x154>)
   22dd4:	f7ff fb0a 	bl	223ec <z_spin_lock_set_owner>
   22dd8:	3c14      	subs	r4, #20
   22dda:	e772      	b.n	22cc2 <clear_event_registrations+0x16>
   22ddc:	00027d86 	.word	0x00027d86
   22de0:	0002694b 	.word	0x0002694b
   22de4:	00027c39 	.word	0x00027c39
   22de8:	00027c53 	.word	0x00027c53
   22dec:	00027c68 	.word	0x00027c68
   22df0:	00027c84 	.word	0x00027c84
   22df4:	00027c95 	.word	0x00027c95
   22df8:	00027cb2 	.word	0x00027cb2
   22dfc:	00027cc9 	.word	0x00027cc9
   22e00:	20025c24 	.word	0x20025c24
   22e04:	00026b10 	.word	0x00026b10
   22e08:	00026abf 	.word	0x00026abf
   22e0c:	00026b27 	.word	0x00026b27
   22e10:	00026ae6 	.word	0x00026ae6
   22e14:	00026afb 	.word	0x00026afb
   22e18:	000279fa 	.word	0x000279fa

00022e1c <register_events>:
{
   22e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   22e20:	2600      	movs	r6, #0
{
   22e22:	468a      	mov	sl, r1
   22e24:	4615      	mov	r5, r2
   22e26:	4604      	mov	r4, r0
	int events_registered = 0;
   22e28:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22e2a:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 23010 <register_events+0x1f4>
   22e2e:	4f68      	ldr	r7, [pc, #416]	; (22fd0 <register_events+0x1b4>)
{
   22e30:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   22e32:	4556      	cmp	r6, sl
   22e34:	db03      	blt.n	22e3e <register_events+0x22>
}
   22e36:	4640      	mov	r0, r8
   22e38:	b003      	add	sp, #12
   22e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e3e:	f04f 0320 	mov.w	r3, #32
   22e42:	f3ef 8b11 	mrs	fp, BASEPRI
   22e46:	f383 8811 	msr	BASEPRI, r3
   22e4a:	f3bf 8f6f 	isb	sy
   22e4e:	4648      	mov	r0, r9
   22e50:	f7ff faae 	bl	223b0 <z_spin_lock_valid>
   22e54:	b960      	cbnz	r0, 22e70 <register_events+0x54>
   22e56:	495f      	ldr	r1, [pc, #380]	; (22fd4 <register_events+0x1b8>)
   22e58:	235f      	movs	r3, #95	; 0x5f
   22e5a:	463a      	mov	r2, r7
   22e5c:	485e      	ldr	r0, [pc, #376]	; (22fd8 <register_events+0x1bc>)
   22e5e:	f001 f80b 	bl	23e78 <printk>
   22e62:	485e      	ldr	r0, [pc, #376]	; (22fdc <register_events+0x1c0>)
   22e64:	f001 f808 	bl	23e78 <printk>
   22e68:	215f      	movs	r1, #95	; 0x5f
   22e6a:	4638      	mov	r0, r7
   22e6c:	f001 f811 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e70:	4648      	mov	r0, r9
   22e72:	f7ff fabb 	bl	223ec <z_spin_lock_set_owner>
	switch (event->type) {
   22e76:	7b63      	ldrb	r3, [r4, #13]
   22e78:	f003 030f 	and.w	r3, r3, #15
   22e7c:	2b04      	cmp	r3, #4
   22e7e:	d825      	bhi.n	22ecc <register_events+0xb0>
   22e80:	e8df f003 	tbb	[pc, r3]
   22e84:	24031e07 	.word	0x24031e07
   22e88:	18          	.byte	0x18
   22e89:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   22e8a:	6923      	ldr	r3, [r4, #16]
   22e8c:	689b      	ldr	r3, [r3, #8]
   22e8e:	2b00      	cmp	r3, #0
   22e90:	d12d      	bne.n	22eee <register_events+0xd2>
		} else if (!just_check && poller->is_polling) {
   22e92:	9b01      	ldr	r3, [sp, #4]
   22e94:	2b00      	cmp	r3, #0
   22e96:	d135      	bne.n	22f04 <register_events+0xe8>
   22e98:	782b      	ldrb	r3, [r5, #0]
   22e9a:	2b00      	cmp	r3, #0
   22e9c:	d032      	beq.n	22f04 <register_events+0xe8>
	switch (event->type) {
   22e9e:	7b63      	ldrb	r3, [r4, #13]
   22ea0:	f003 030f 	and.w	r3, r3, #15
   22ea4:	2b04      	cmp	r3, #4
   22ea6:	f200 8085 	bhi.w	22fb4 <register_events+0x198>
   22eaa:	e8df f003 	tbb	[pc, r3]
   22eae:	7058      	.short	0x7058
   22eb0:	8343      	.short	0x8343
   22eb2:	5c          	.byte	0x5c
   22eb3:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   22eb4:	6923      	ldr	r3, [r4, #16]
   22eb6:	681b      	ldr	r3, [r3, #0]
   22eb8:	2b00      	cmp	r3, #0
   22eba:	d0ea      	beq.n	22e92 <register_events+0x76>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22ebc:	2204      	movs	r2, #4
   22ebe:	e017      	b.n	22ef0 <register_events+0xd4>
		if (event->signal->signaled != 0U) {
   22ec0:	6923      	ldr	r3, [r4, #16]
   22ec2:	689b      	ldr	r3, [r3, #8]
   22ec4:	2b00      	cmp	r3, #0
   22ec6:	d0e4      	beq.n	22e92 <register_events+0x76>
			*state = K_POLL_STATE_SIGNALED;
   22ec8:	2201      	movs	r2, #1
   22eca:	e011      	b.n	22ef0 <register_events+0xd4>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22ecc:	2350      	movs	r3, #80	; 0x50
   22ece:	4a44      	ldr	r2, [pc, #272]	; (22fe0 <register_events+0x1c4>)
   22ed0:	4944      	ldr	r1, [pc, #272]	; (22fe4 <register_events+0x1c8>)
   22ed2:	4841      	ldr	r0, [pc, #260]	; (22fd8 <register_events+0x1bc>)
   22ed4:	f000 ffd0 	bl	23e78 <printk>
   22ed8:	7b61      	ldrb	r1, [r4, #13]
   22eda:	4843      	ldr	r0, [pc, #268]	; (22fe8 <register_events+0x1cc>)
   22edc:	f001 010f 	and.w	r1, r1, #15
   22ee0:	f000 ffca 	bl	23e78 <printk>
   22ee4:	2150      	movs	r1, #80	; 0x50
   22ee6:	483e      	ldr	r0, [pc, #248]	; (22fe0 <register_events+0x1c4>)
   22ee8:	f000 ffd3 	bl	23e92 <assert_post_action>
   22eec:	e7d1      	b.n	22e92 <register_events+0x76>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22eee:	2202      	movs	r2, #2
	event->poller = NULL;
   22ef0:	2100      	movs	r1, #0
	event->state |= state;
   22ef2:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   22ef4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   22ef6:	f3c3 3004 	ubfx	r0, r3, #12, #5
   22efa:	4302      	orrs	r2, r0
   22efc:	f362 3310 	bfi	r3, r2, #12, #5
   22f00:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   22f02:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22f04:	4648      	mov	r0, r9
   22f06:	f7ff fa61 	bl	223cc <z_spin_unlock_valid>
   22f0a:	b960      	cbnz	r0, 22f26 <register_events+0x10a>
   22f0c:	4937      	ldr	r1, [pc, #220]	; (22fec <register_events+0x1d0>)
   22f0e:	2372      	movs	r3, #114	; 0x72
   22f10:	463a      	mov	r2, r7
   22f12:	4831      	ldr	r0, [pc, #196]	; (22fd8 <register_events+0x1bc>)
   22f14:	f000 ffb0 	bl	23e78 <printk>
   22f18:	4835      	ldr	r0, [pc, #212]	; (22ff0 <register_events+0x1d4>)
   22f1a:	f000 ffad 	bl	23e78 <printk>
   22f1e:	2172      	movs	r1, #114	; 0x72
   22f20:	4638      	mov	r0, r7
   22f22:	f000 ffb6 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   22f26:	f38b 8811 	msr	BASEPRI, fp
   22f2a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22f2e:	3601      	adds	r6, #1
   22f30:	3414      	adds	r4, #20
   22f32:	e77e      	b.n	22e32 <register_events+0x16>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22f34:	6923      	ldr	r3, [r4, #16]
   22f36:	b963      	cbnz	r3, 22f52 <register_events+0x136>
   22f38:	492e      	ldr	r1, [pc, #184]	; (22ff4 <register_events+0x1d8>)
   22f3a:	2375      	movs	r3, #117	; 0x75
   22f3c:	4a28      	ldr	r2, [pc, #160]	; (22fe0 <register_events+0x1c4>)
   22f3e:	4826      	ldr	r0, [pc, #152]	; (22fd8 <register_events+0x1bc>)
   22f40:	f000 ff9a 	bl	23e78 <printk>
   22f44:	482c      	ldr	r0, [pc, #176]	; (22ff8 <register_events+0x1dc>)
   22f46:	f000 ff97 	bl	23e78 <printk>
   22f4a:	2175      	movs	r1, #117	; 0x75
   22f4c:	4824      	ldr	r0, [pc, #144]	; (22fe0 <register_events+0x1c4>)
   22f4e:	f000 ffa0 	bl	23e92 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   22f52:	462a      	mov	r2, r5
   22f54:	4621      	mov	r1, r4
   22f56:	6920      	ldr	r0, [r4, #16]
   22f58:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   22f5a:	f002 f94b 	bl	251f4 <add_event>
	event->poller = poller;
   22f5e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   22f60:	f108 0801 	add.w	r8, r8, #1
   22f64:	e7ce      	b.n	22f04 <register_events+0xe8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22f66:	6923      	ldr	r3, [r4, #16]
   22f68:	b963      	cbnz	r3, 22f84 <register_events+0x168>
   22f6a:	4924      	ldr	r1, [pc, #144]	; (22ffc <register_events+0x1e0>)
   22f6c:	2379      	movs	r3, #121	; 0x79
   22f6e:	4a1c      	ldr	r2, [pc, #112]	; (22fe0 <register_events+0x1c4>)
   22f70:	4819      	ldr	r0, [pc, #100]	; (22fd8 <register_events+0x1bc>)
   22f72:	f000 ff81 	bl	23e78 <printk>
   22f76:	4822      	ldr	r0, [pc, #136]	; (23000 <register_events+0x1e4>)
   22f78:	f000 ff7e 	bl	23e78 <printk>
   22f7c:	2179      	movs	r1, #121	; 0x79
   22f7e:	4818      	ldr	r0, [pc, #96]	; (22fe0 <register_events+0x1c4>)
   22f80:	f000 ff87 	bl	23e92 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   22f84:	6920      	ldr	r0, [r4, #16]
   22f86:	462a      	mov	r2, r5
   22f88:	4621      	mov	r1, r4
   22f8a:	300c      	adds	r0, #12
   22f8c:	e7e5      	b.n	22f5a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22f8e:	6923      	ldr	r3, [r4, #16]
   22f90:	b963      	cbnz	r3, 22fac <register_events+0x190>
   22f92:	491c      	ldr	r1, [pc, #112]	; (23004 <register_events+0x1e8>)
   22f94:	237d      	movs	r3, #125	; 0x7d
   22f96:	4a12      	ldr	r2, [pc, #72]	; (22fe0 <register_events+0x1c4>)
   22f98:	480f      	ldr	r0, [pc, #60]	; (22fd8 <register_events+0x1bc>)
   22f9a:	f000 ff6d 	bl	23e78 <printk>
   22f9e:	481a      	ldr	r0, [pc, #104]	; (23008 <register_events+0x1ec>)
   22fa0:	f000 ff6a 	bl	23e78 <printk>
   22fa4:	217d      	movs	r1, #125	; 0x7d
   22fa6:	480e      	ldr	r0, [pc, #56]	; (22fe0 <register_events+0x1c4>)
   22fa8:	f000 ff73 	bl	23e92 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   22fac:	462a      	mov	r2, r5
   22fae:	4621      	mov	r1, r4
   22fb0:	6920      	ldr	r0, [r4, #16]
   22fb2:	e7d2      	b.n	22f5a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   22fb4:	2384      	movs	r3, #132	; 0x84
   22fb6:	4a0a      	ldr	r2, [pc, #40]	; (22fe0 <register_events+0x1c4>)
   22fb8:	490a      	ldr	r1, [pc, #40]	; (22fe4 <register_events+0x1c8>)
   22fba:	4807      	ldr	r0, [pc, #28]	; (22fd8 <register_events+0x1bc>)
   22fbc:	f000 ff5c 	bl	23e78 <printk>
   22fc0:	4812      	ldr	r0, [pc, #72]	; (2300c <register_events+0x1f0>)
   22fc2:	f000 ff59 	bl	23e78 <printk>
   22fc6:	2184      	movs	r1, #132	; 0x84
   22fc8:	4805      	ldr	r0, [pc, #20]	; (22fe0 <register_events+0x1c4>)
   22fca:	f000 ff62 	bl	23e92 <assert_post_action>
   22fce:	e7c6      	b.n	22f5e <register_events+0x142>
   22fd0:	00026abf 	.word	0x00026abf
   22fd4:	00026ae6 	.word	0x00026ae6
   22fd8:	0002694b 	.word	0x0002694b
   22fdc:	00026afb 	.word	0x00026afb
   22fe0:	00027d86 	.word	0x00027d86
   22fe4:	000279fa 	.word	0x000279fa
   22fe8:	00027ddd 	.word	0x00027ddd
   22fec:	00026b10 	.word	0x00026b10
   22ff0:	00026b27 	.word	0x00026b27
   22ff4:	00027c39 	.word	0x00027c39
   22ff8:	00027c53 	.word	0x00027c53
   22ffc:	00027c68 	.word	0x00027c68
   23000:	00027c84 	.word	0x00027c84
   23004:	00027c95 	.word	0x00027c95
   23008:	00027cb2 	.word	0x00027cb2
   2300c:	00027cc9 	.word	0x00027cc9
   23010:	20025c24 	.word	0x20025c24

00023014 <k_poll_event_init>:
{
   23014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23016:	4604      	mov	r4, r0
   23018:	460f      	mov	r7, r1
   2301a:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2301c:	4616      	mov	r6, r2
   2301e:	b162      	cbz	r2, 2303a <k_poll_event_init+0x26>
   23020:	491f      	ldr	r1, [pc, #124]	; (230a0 <k_poll_event_init+0x8c>)
   23022:	232a      	movs	r3, #42	; 0x2a
   23024:	4a1f      	ldr	r2, [pc, #124]	; (230a4 <k_poll_event_init+0x90>)
   23026:	4820      	ldr	r0, [pc, #128]	; (230a8 <k_poll_event_init+0x94>)
   23028:	f000 ff26 	bl	23e78 <printk>
   2302c:	481f      	ldr	r0, [pc, #124]	; (230ac <k_poll_event_init+0x98>)
   2302e:	f000 ff23 	bl	23e78 <printk>
   23032:	212a      	movs	r1, #42	; 0x2a
   23034:	481b      	ldr	r0, [pc, #108]	; (230a4 <k_poll_event_init+0x90>)
   23036:	f000 ff2c 	bl	23e92 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2303a:	2f0f      	cmp	r7, #15
   2303c:	d90c      	bls.n	23058 <k_poll_event_init+0x44>
   2303e:	491c      	ldr	r1, [pc, #112]	; (230b0 <k_poll_event_init+0x9c>)
   23040:	232b      	movs	r3, #43	; 0x2b
   23042:	4a18      	ldr	r2, [pc, #96]	; (230a4 <k_poll_event_init+0x90>)
   23044:	4818      	ldr	r0, [pc, #96]	; (230a8 <k_poll_event_init+0x94>)
   23046:	f000 ff17 	bl	23e78 <printk>
   2304a:	481a      	ldr	r0, [pc, #104]	; (230b4 <k_poll_event_init+0xa0>)
   2304c:	f000 ff14 	bl	23e78 <printk>
   23050:	212b      	movs	r1, #43	; 0x2b
   23052:	4814      	ldr	r0, [pc, #80]	; (230a4 <k_poll_event_init+0x90>)
   23054:	f000 ff1d 	bl	23e92 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   23058:	b965      	cbnz	r5, 23074 <k_poll_event_init+0x60>
   2305a:	4917      	ldr	r1, [pc, #92]	; (230b8 <k_poll_event_init+0xa4>)
   2305c:	232c      	movs	r3, #44	; 0x2c
   2305e:	4a11      	ldr	r2, [pc, #68]	; (230a4 <k_poll_event_init+0x90>)
   23060:	4811      	ldr	r0, [pc, #68]	; (230a8 <k_poll_event_init+0x94>)
   23062:	f000 ff09 	bl	23e78 <printk>
   23066:	4815      	ldr	r0, [pc, #84]	; (230bc <k_poll_event_init+0xa8>)
   23068:	f000 ff06 	bl	23e78 <printk>
   2306c:	212c      	movs	r1, #44	; 0x2c
   2306e:	480d      	ldr	r0, [pc, #52]	; (230a4 <k_poll_event_init+0x90>)
   23070:	f000 ff0f 	bl	23e92 <assert_post_action>
	event->poller = NULL;
   23074:	2200      	movs	r2, #0
	event->type = type;
   23076:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   23078:	60a2      	str	r2, [r4, #8]
	event->type = type;
   2307a:	f367 0303 	bfi	r3, r7, #0, #4
   2307e:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   23080:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   23082:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   23084:	f362 3310 	bfi	r3, r2, #12, #5
   23088:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   2308a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   2308e:	f366 0341 	bfi	r3, r6, #1, #1
   23092:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   23094:	89e3      	ldrh	r3, [r4, #14]
   23096:	f362 038f 	bfi	r3, r2, #2, #14
   2309a:	81e3      	strh	r3, [r4, #14]
}
   2309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2309e:	bf00      	nop
   230a0:	00027cdf 	.word	0x00027cdf
   230a4:	00027d86 	.word	0x00027d86
   230a8:	0002694b 	.word	0x0002694b
   230ac:	00027cff 	.word	0x00027cff
   230b0:	00027d25 	.word	0x00027d25
   230b4:	00027d49 	.word	0x00027d49
   230b8:	00027d59 	.word	0x00027d59
   230bc:	00027d6c 	.word	0x00027d6c

000230c0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   230c0:	2301      	movs	r3, #1
{
   230c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   230c4:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   230c6:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   230ca:	4b70      	ldr	r3, [pc, #448]	; (2328c <z_impl_k_poll+0x1cc>)
{
   230cc:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   230ce:	689b      	ldr	r3, [r3, #8]
{
   230d0:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   230d2:	9304      	str	r3, [sp, #16]
   230d4:	4b6e      	ldr	r3, [pc, #440]	; (23290 <z_impl_k_poll+0x1d0>)
{
   230d6:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   230d8:	9305      	str	r3, [sp, #20]
   230da:	f3ef 8305 	mrs	r3, IPSR
   230de:	2b0d      	cmp	r3, #13
   230e0:	d804      	bhi.n	230ec <z_impl_k_poll+0x2c>
   230e2:	b183      	cbz	r3, 23106 <z_impl_k_poll+0x46>
   230e4:	4b6b      	ldr	r3, [pc, #428]	; (23294 <z_impl_k_poll+0x1d4>)
   230e6:	685b      	ldr	r3, [r3, #4]
   230e8:	051b      	lsls	r3, r3, #20
   230ea:	d40c      	bmi.n	23106 <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   230ec:	496a      	ldr	r1, [pc, #424]	; (23298 <z_impl_k_poll+0x1d8>)
   230ee:	23ff      	movs	r3, #255	; 0xff
   230f0:	4a6a      	ldr	r2, [pc, #424]	; (2329c <z_impl_k_poll+0x1dc>)
   230f2:	486b      	ldr	r0, [pc, #428]	; (232a0 <z_impl_k_poll+0x1e0>)
   230f4:	f000 fec0 	bl	23e78 <printk>
   230f8:	486a      	ldr	r0, [pc, #424]	; (232a4 <z_impl_k_poll+0x1e4>)
   230fa:	f000 febd 	bl	23e78 <printk>
   230fe:	21ff      	movs	r1, #255	; 0xff
   23100:	4866      	ldr	r0, [pc, #408]	; (2329c <z_impl_k_poll+0x1dc>)
   23102:	f000 fec6 	bl	23e92 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   23106:	b974      	cbnz	r4, 23126 <z_impl_k_poll+0x66>
   23108:	4967      	ldr	r1, [pc, #412]	; (232a8 <z_impl_k_poll+0x1e8>)
   2310a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2310e:	4a63      	ldr	r2, [pc, #396]	; (2329c <z_impl_k_poll+0x1dc>)
   23110:	4863      	ldr	r0, [pc, #396]	; (232a0 <z_impl_k_poll+0x1e0>)
   23112:	f000 feb1 	bl	23e78 <printk>
   23116:	4865      	ldr	r0, [pc, #404]	; (232ac <z_impl_k_poll+0x1ec>)
   23118:	f000 feae 	bl	23e78 <printk>
   2311c:	f44f 7180 	mov.w	r1, #256	; 0x100
   23120:	485e      	ldr	r0, [pc, #376]	; (2329c <z_impl_k_poll+0x1dc>)
   23122:	f000 feb6 	bl	23e92 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   23126:	2d00      	cmp	r5, #0
   23128:	dc0e      	bgt.n	23148 <z_impl_k_poll+0x88>
   2312a:	4961      	ldr	r1, [pc, #388]	; (232b0 <z_impl_k_poll+0x1f0>)
   2312c:	f240 1301 	movw	r3, #257	; 0x101
   23130:	4a5a      	ldr	r2, [pc, #360]	; (2329c <z_impl_k_poll+0x1dc>)
   23132:	485b      	ldr	r0, [pc, #364]	; (232a0 <z_impl_k_poll+0x1e0>)
   23134:	f000 fea0 	bl	23e78 <printk>
   23138:	485e      	ldr	r0, [pc, #376]	; (232b4 <z_impl_k_poll+0x1f4>)
   2313a:	f000 fe9d 	bl	23e78 <printk>
   2313e:	f240 1101 	movw	r1, #257	; 0x101
   23142:	4856      	ldr	r0, [pc, #344]	; (2329c <z_impl_k_poll+0x1dc>)
   23144:	f000 fea5 	bl	23e92 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   23148:	fab6 f386 	clz	r3, r6
   2314c:	aa03      	add	r2, sp, #12
   2314e:	095b      	lsrs	r3, r3, #5
   23150:	4629      	mov	r1, r5
   23152:	4620      	mov	r0, r4
   23154:	f7ff fe62 	bl	22e1c <register_events>
   23158:	4607      	mov	r7, r0
	__asm__ volatile(
   2315a:	f04f 0320 	mov.w	r3, #32
   2315e:	f3ef 8511 	mrs	r5, BASEPRI
   23162:	f383 8811 	msr	BASEPRI, r3
   23166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2316a:	4853      	ldr	r0, [pc, #332]	; (232b8 <z_impl_k_poll+0x1f8>)
   2316c:	f7ff f920 	bl	223b0 <z_spin_lock_valid>
   23170:	b960      	cbnz	r0, 2318c <z_impl_k_poll+0xcc>
   23172:	4952      	ldr	r1, [pc, #328]	; (232bc <z_impl_k_poll+0x1fc>)
   23174:	235f      	movs	r3, #95	; 0x5f
   23176:	4a52      	ldr	r2, [pc, #328]	; (232c0 <z_impl_k_poll+0x200>)
   23178:	4849      	ldr	r0, [pc, #292]	; (232a0 <z_impl_k_poll+0x1e0>)
   2317a:	f000 fe7d 	bl	23e78 <printk>
   2317e:	4851      	ldr	r0, [pc, #324]	; (232c4 <z_impl_k_poll+0x204>)
   23180:	f000 fe7a 	bl	23e78 <printk>
   23184:	215f      	movs	r1, #95	; 0x5f
   23186:	484e      	ldr	r0, [pc, #312]	; (232c0 <z_impl_k_poll+0x200>)
   23188:	f000 fe83 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   2318c:	484a      	ldr	r0, [pc, #296]	; (232b8 <z_impl_k_poll+0x1f8>)
   2318e:	f7ff f92d 	bl	223ec <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   23192:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23196:	b9eb      	cbnz	r3, 231d4 <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   23198:	4620      	mov	r0, r4
   2319a:	462a      	mov	r2, r5
   2319c:	4639      	mov	r1, r7
   2319e:	f7ff fd85 	bl	22cac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   231a2:	4845      	ldr	r0, [pc, #276]	; (232b8 <z_impl_k_poll+0x1f8>)
   231a4:	f7ff f912 	bl	223cc <z_spin_unlock_valid>
   231a8:	b960      	cbnz	r0, 231c4 <z_impl_k_poll+0x104>
   231aa:	4947      	ldr	r1, [pc, #284]	; (232c8 <z_impl_k_poll+0x208>)
   231ac:	2372      	movs	r3, #114	; 0x72
   231ae:	4a44      	ldr	r2, [pc, #272]	; (232c0 <z_impl_k_poll+0x200>)
   231b0:	483b      	ldr	r0, [pc, #236]	; (232a0 <z_impl_k_poll+0x1e0>)
   231b2:	f000 fe61 	bl	23e78 <printk>
   231b6:	4845      	ldr	r0, [pc, #276]	; (232cc <z_impl_k_poll+0x20c>)
   231b8:	f000 fe5e 	bl	23e78 <printk>
   231bc:	2172      	movs	r1, #114	; 0x72
   231be:	4840      	ldr	r0, [pc, #256]	; (232c0 <z_impl_k_poll+0x200>)
   231c0:	f000 fe67 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   231c4:	f385 8811 	msr	BASEPRI, r5
   231c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   231cc:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   231ce:	4628      	mov	r0, r5
   231d0:	b007      	add	sp, #28
   231d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   231d4:	2300      	movs	r3, #0
   231d6:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   231da:	b9be      	cbnz	r6, 2320c <z_impl_k_poll+0x14c>
   231dc:	4836      	ldr	r0, [pc, #216]	; (232b8 <z_impl_k_poll+0x1f8>)
   231de:	f7ff f8f5 	bl	223cc <z_spin_unlock_valid>
   231e2:	b960      	cbnz	r0, 231fe <z_impl_k_poll+0x13e>
   231e4:	4938      	ldr	r1, [pc, #224]	; (232c8 <z_impl_k_poll+0x208>)
   231e6:	2372      	movs	r3, #114	; 0x72
   231e8:	4a35      	ldr	r2, [pc, #212]	; (232c0 <z_impl_k_poll+0x200>)
   231ea:	482d      	ldr	r0, [pc, #180]	; (232a0 <z_impl_k_poll+0x1e0>)
   231ec:	f000 fe44 	bl	23e78 <printk>
   231f0:	4836      	ldr	r0, [pc, #216]	; (232cc <z_impl_k_poll+0x20c>)
   231f2:	f000 fe41 	bl	23e78 <printk>
   231f6:	2172      	movs	r1, #114	; 0x72
   231f8:	4831      	ldr	r0, [pc, #196]	; (232c0 <z_impl_k_poll+0x200>)
   231fa:	f000 fe4a 	bl	23e92 <assert_post_action>
   231fe:	f385 8811 	msr	BASEPRI, r5
   23202:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23206:	f06f 050a 	mvn.w	r5, #10
   2320a:	e7e0      	b.n	231ce <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2320c:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2320e:	4629      	mov	r1, r5
   23210:	4633      	mov	r3, r6
   23212:	4829      	ldr	r0, [pc, #164]	; (232b8 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   23214:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23218:	f7fe fcd4 	bl	21bc4 <z_pend_curr>
   2321c:	4605      	mov	r5, r0
	__asm__ volatile(
   2321e:	f04f 0320 	mov.w	r3, #32
   23222:	f3ef 8611 	mrs	r6, BASEPRI
   23226:	f383 8811 	msr	BASEPRI, r3
   2322a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2322e:	4822      	ldr	r0, [pc, #136]	; (232b8 <z_impl_k_poll+0x1f8>)
   23230:	f7ff f8be 	bl	223b0 <z_spin_lock_valid>
   23234:	b960      	cbnz	r0, 23250 <z_impl_k_poll+0x190>
   23236:	4921      	ldr	r1, [pc, #132]	; (232bc <z_impl_k_poll+0x1fc>)
   23238:	235f      	movs	r3, #95	; 0x5f
   2323a:	4a21      	ldr	r2, [pc, #132]	; (232c0 <z_impl_k_poll+0x200>)
   2323c:	4818      	ldr	r0, [pc, #96]	; (232a0 <z_impl_k_poll+0x1e0>)
   2323e:	f000 fe1b 	bl	23e78 <printk>
   23242:	4820      	ldr	r0, [pc, #128]	; (232c4 <z_impl_k_poll+0x204>)
   23244:	f000 fe18 	bl	23e78 <printk>
   23248:	215f      	movs	r1, #95	; 0x5f
   2324a:	481d      	ldr	r0, [pc, #116]	; (232c0 <z_impl_k_poll+0x200>)
   2324c:	f000 fe21 	bl	23e92 <assert_post_action>
	z_spin_lock_set_owner(l);
   23250:	4819      	ldr	r0, [pc, #100]	; (232b8 <z_impl_k_poll+0x1f8>)
   23252:	f7ff f8cb 	bl	223ec <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23256:	4620      	mov	r0, r4
   23258:	4632      	mov	r2, r6
   2325a:	4639      	mov	r1, r7
   2325c:	f7ff fd26 	bl	22cac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23260:	4815      	ldr	r0, [pc, #84]	; (232b8 <z_impl_k_poll+0x1f8>)
   23262:	f7ff f8b3 	bl	223cc <z_spin_unlock_valid>
   23266:	b960      	cbnz	r0, 23282 <z_impl_k_poll+0x1c2>
   23268:	4917      	ldr	r1, [pc, #92]	; (232c8 <z_impl_k_poll+0x208>)
   2326a:	2372      	movs	r3, #114	; 0x72
   2326c:	4a14      	ldr	r2, [pc, #80]	; (232c0 <z_impl_k_poll+0x200>)
   2326e:	480c      	ldr	r0, [pc, #48]	; (232a0 <z_impl_k_poll+0x1e0>)
   23270:	f000 fe02 	bl	23e78 <printk>
   23274:	4815      	ldr	r0, [pc, #84]	; (232cc <z_impl_k_poll+0x20c>)
   23276:	f000 fdff 	bl	23e78 <printk>
   2327a:	2172      	movs	r1, #114	; 0x72
   2327c:	4810      	ldr	r0, [pc, #64]	; (232c0 <z_impl_k_poll+0x200>)
   2327e:	f000 fe08 	bl	23e92 <assert_post_action>
	__asm__ volatile(
   23282:	f386 8811 	msr	BASEPRI, r6
   23286:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2328a:	e7a0      	b.n	231ce <z_impl_k_poll+0x10e>
   2328c:	20025b0c 	.word	0x20025b0c
   23290:	00022c3d 	.word	0x00022c3d
   23294:	e000ed00 	.word	0xe000ed00
   23298:	00027998 	.word	0x00027998
   2329c:	00027d86 	.word	0x00027d86
   232a0:	0002694b 	.word	0x0002694b
   232a4:	0002789d 	.word	0x0002789d
   232a8:	00027dfa 	.word	0x00027dfa
   232ac:	00027e10 	.word	0x00027e10
   232b0:	00027e1f 	.word	0x00027e1f
   232b4:	00027e2e 	.word	0x00027e2e
   232b8:	20025c24 	.word	0x20025c24
   232bc:	00026ae6 	.word	0x00026ae6
   232c0:	00026abf 	.word	0x00026abf
   232c4:	00026afb 	.word	0x00026afb
   232c8:	00026b10 	.word	0x00026b10
   232cc:	00026b27 	.word	0x00026b27

000232d0 <ocrypto_ecdsa_p256_public_key>:
   232d0:	b530      	push	{r4, r5, lr}
   232d2:	b099      	sub	sp, #100	; 0x64
   232d4:	4605      	mov	r5, r0
   232d6:	4668      	mov	r0, sp
   232d8:	f000 f8f2 	bl	234c0 <ocrypto_sc_p256_from32bytes>
   232dc:	4669      	mov	r1, sp
   232de:	a808      	add	r0, sp, #32
   232e0:	f000 fae6 	bl	238b0 <ocrypto_curve_p256_scalarmult_base>
   232e4:	4604      	mov	r4, r0
   232e6:	a908      	add	r1, sp, #32
   232e8:	4628      	mov	r0, r5
   232ea:	f000 fa21 	bl	23730 <ocrypto_curve_p256_to64bytes>
   232ee:	4620      	mov	r0, r4
   232f0:	b019      	add	sp, #100	; 0x64
   232f2:	bd30      	pop	{r4, r5, pc}

000232f4 <ocrypto_mod_p256_cneg>:
   232f4:	b570      	push	{r4, r5, r6, lr}
   232f6:	b088      	sub	sp, #32
   232f8:	4604      	mov	r4, r0
   232fa:	460d      	mov	r5, r1
   232fc:	4668      	mov	r0, sp
   232fe:	2120      	movs	r1, #32
   23300:	4616      	mov	r6, r2
   23302:	f7e9 fce2 	bl	ccca <ocrypto_constant_time_fill_zero>
   23306:	2300      	movs	r3, #0
   23308:	4629      	mov	r1, r5
   2330a:	4620      	mov	r0, r4
   2330c:	2220      	movs	r2, #32
   2330e:	9300      	str	r3, [sp, #0]
   23310:	f7e9 fcd4 	bl	ccbc <ocrypto_constant_time_copy>
   23314:	462a      	mov	r2, r5
   23316:	4669      	mov	r1, sp
   23318:	4668      	mov	r0, sp
   2331a:	f7e9 fd1c 	bl	cd56 <ocrypto_mod_p256_sub>
   2331e:	4632      	mov	r2, r6
   23320:	4669      	mov	r1, sp
   23322:	4620      	mov	r0, r4
   23324:	f7e9 fa27 	bl	c776 <ocrypto_bigint_cswap256>
   23328:	b008      	add	sp, #32
   2332a:	bd70      	pop	{r4, r5, r6, pc}

0002332c <ocrypto_mod_p256_toBytes>:
   2332c:	69cb      	ldr	r3, [r1, #28]
   2332e:	ba1b      	rev	r3, r3
   23330:	6003      	str	r3, [r0, #0]
   23332:	698b      	ldr	r3, [r1, #24]
   23334:	ba1b      	rev	r3, r3
   23336:	6043      	str	r3, [r0, #4]
   23338:	694b      	ldr	r3, [r1, #20]
   2333a:	ba1b      	rev	r3, r3
   2333c:	6083      	str	r3, [r0, #8]
   2333e:	690b      	ldr	r3, [r1, #16]
   23340:	ba1b      	rev	r3, r3
   23342:	60c3      	str	r3, [r0, #12]
   23344:	68cb      	ldr	r3, [r1, #12]
   23346:	ba1b      	rev	r3, r3
   23348:	6103      	str	r3, [r0, #16]
   2334a:	688b      	ldr	r3, [r1, #8]
   2334c:	ba1b      	rev	r3, r3
   2334e:	6143      	str	r3, [r0, #20]
   23350:	684b      	ldr	r3, [r1, #4]
   23352:	ba1b      	rev	r3, r3
   23354:	6183      	str	r3, [r0, #24]
   23356:	680b      	ldr	r3, [r1, #0]
   23358:	ba1b      	rev	r3, r3
   2335a:	61c3      	str	r3, [r0, #28]
   2335c:	4770      	bx	lr
   2335e:	bf00      	nop

00023360 <ocrypto_mod_p256_invert>:
   23360:	b570      	push	{r4, r5, r6, lr}
   23362:	460d      	mov	r5, r1
   23364:	2405      	movs	r4, #5
   23366:	b098      	sub	sp, #96	; 0x60
   23368:	4606      	mov	r6, r0
   2336a:	a810      	add	r0, sp, #64	; 0x40
   2336c:	f7e9 fd20 	bl	cdb0 <ocrypto_mod_p256_square>
   23370:	462a      	mov	r2, r5
   23372:	a910      	add	r1, sp, #64	; 0x40
   23374:	4668      	mov	r0, sp
   23376:	f7e9 fd1c 	bl	cdb2 <ocrypto_mod_p256_mul>
   2337a:	4669      	mov	r1, sp
   2337c:	a810      	add	r0, sp, #64	; 0x40
   2337e:	f7e9 fd17 	bl	cdb0 <ocrypto_mod_p256_square>
   23382:	a910      	add	r1, sp, #64	; 0x40
   23384:	4608      	mov	r0, r1
   23386:	f7e9 fd13 	bl	cdb0 <ocrypto_mod_p256_square>
   2338a:	466a      	mov	r2, sp
   2338c:	a910      	add	r1, sp, #64	; 0x40
   2338e:	a808      	add	r0, sp, #32
   23390:	f7e9 fd0f 	bl	cdb2 <ocrypto_mod_p256_mul>
   23394:	a908      	add	r1, sp, #32
   23396:	a810      	add	r0, sp, #64	; 0x40
   23398:	f7e9 fd0a 	bl	cdb0 <ocrypto_mod_p256_square>
   2339c:	a910      	add	r1, sp, #64	; 0x40
   2339e:	4608      	mov	r0, r1
   233a0:	f7e9 fd06 	bl	cdb0 <ocrypto_mod_p256_square>
   233a4:	a910      	add	r1, sp, #64	; 0x40
   233a6:	4608      	mov	r0, r1
   233a8:	f7e9 fd02 	bl	cdb0 <ocrypto_mod_p256_square>
   233ac:	a910      	add	r1, sp, #64	; 0x40
   233ae:	4608      	mov	r0, r1
   233b0:	f7e9 fcfe 	bl	cdb0 <ocrypto_mod_p256_square>
   233b4:	a910      	add	r1, sp, #64	; 0x40
   233b6:	aa08      	add	r2, sp, #32
   233b8:	4608      	mov	r0, r1
   233ba:	f7e9 fcfa 	bl	cdb2 <ocrypto_mod_p256_mul>
   233be:	a910      	add	r1, sp, #64	; 0x40
   233c0:	4608      	mov	r0, r1
   233c2:	f7e9 fcf5 	bl	cdb0 <ocrypto_mod_p256_square>
   233c6:	a910      	add	r1, sp, #64	; 0x40
   233c8:	4608      	mov	r0, r1
   233ca:	f7e9 fcf1 	bl	cdb0 <ocrypto_mod_p256_square>
   233ce:	a910      	add	r1, sp, #64	; 0x40
   233d0:	466a      	mov	r2, sp
   233d2:	a808      	add	r0, sp, #32
   233d4:	f7e9 fced 	bl	cdb2 <ocrypto_mod_p256_mul>
   233d8:	a908      	add	r1, sp, #32
   233da:	a810      	add	r0, sp, #64	; 0x40
   233dc:	f7e9 fce8 	bl	cdb0 <ocrypto_mod_p256_square>
   233e0:	a910      	add	r1, sp, #64	; 0x40
   233e2:	4608      	mov	r0, r1
   233e4:	f7e9 fce4 	bl	cdb0 <ocrypto_mod_p256_square>
   233e8:	3c01      	subs	r4, #1
   233ea:	a910      	add	r1, sp, #64	; 0x40
   233ec:	d1f5      	bne.n	233da <ocrypto_mod_p256_invert+0x7a>
   233ee:	aa08      	add	r2, sp, #32
   233f0:	4608      	mov	r0, r1
   233f2:	f7e9 fcde 	bl	cdb2 <ocrypto_mod_p256_mul>
   233f6:	2405      	movs	r4, #5
   233f8:	a910      	add	r1, sp, #64	; 0x40
   233fa:	4608      	mov	r0, r1
   233fc:	f7e9 fcd8 	bl	cdb0 <ocrypto_mod_p256_square>
   23400:	a910      	add	r1, sp, #64	; 0x40
   23402:	4608      	mov	r0, r1
   23404:	f7e9 fcd4 	bl	cdb0 <ocrypto_mod_p256_square>
   23408:	3c01      	subs	r4, #1
   2340a:	d1f5      	bne.n	233f8 <ocrypto_mod_p256_invert+0x98>
   2340c:	a910      	add	r1, sp, #64	; 0x40
   2340e:	aa08      	add	r2, sp, #32
   23410:	4608      	mov	r0, r1
   23412:	f7e9 fcce 	bl	cdb2 <ocrypto_mod_p256_mul>
   23416:	a910      	add	r1, sp, #64	; 0x40
   23418:	a808      	add	r0, sp, #32
   2341a:	f7e9 fcc9 	bl	cdb0 <ocrypto_mod_p256_square>
   2341e:	a908      	add	r1, sp, #32
   23420:	4608      	mov	r0, r1
   23422:	f7e9 fcc5 	bl	cdb0 <ocrypto_mod_p256_square>
   23426:	a908      	add	r1, sp, #32
   23428:	466a      	mov	r2, sp
   2342a:	4668      	mov	r0, sp
   2342c:	f7e9 fcc1 	bl	cdb2 <ocrypto_mod_p256_mul>
   23430:	2410      	movs	r4, #16
   23432:	4669      	mov	r1, sp
   23434:	a810      	add	r0, sp, #64	; 0x40
   23436:	f7e9 fcbb 	bl	cdb0 <ocrypto_mod_p256_square>
   2343a:	a910      	add	r1, sp, #64	; 0x40
   2343c:	4608      	mov	r0, r1
   2343e:	f7e9 fcb7 	bl	cdb0 <ocrypto_mod_p256_square>
   23442:	3c01      	subs	r4, #1
   23444:	a910      	add	r1, sp, #64	; 0x40
   23446:	d1f5      	bne.n	23434 <ocrypto_mod_p256_invert+0xd4>
   23448:	462a      	mov	r2, r5
   2344a:	4608      	mov	r0, r1
   2344c:	f7e9 fcb1 	bl	cdb2 <ocrypto_mod_p256_mul>
   23450:	2440      	movs	r4, #64	; 0x40
   23452:	a910      	add	r1, sp, #64	; 0x40
   23454:	4608      	mov	r0, r1
   23456:	f7e9 fcab 	bl	cdb0 <ocrypto_mod_p256_square>
   2345a:	a910      	add	r1, sp, #64	; 0x40
   2345c:	4608      	mov	r0, r1
   2345e:	f7e9 fca7 	bl	cdb0 <ocrypto_mod_p256_square>
   23462:	3c01      	subs	r4, #1
   23464:	d1f5      	bne.n	23452 <ocrypto_mod_p256_invert+0xf2>
   23466:	a910      	add	r1, sp, #64	; 0x40
   23468:	466a      	mov	r2, sp
   2346a:	4608      	mov	r0, r1
   2346c:	f7e9 fca1 	bl	cdb2 <ocrypto_mod_p256_mul>
   23470:	2410      	movs	r4, #16
   23472:	a910      	add	r1, sp, #64	; 0x40
   23474:	4608      	mov	r0, r1
   23476:	f7e9 fc9b 	bl	cdb0 <ocrypto_mod_p256_square>
   2347a:	a910      	add	r1, sp, #64	; 0x40
   2347c:	4608      	mov	r0, r1
   2347e:	f7e9 fc97 	bl	cdb0 <ocrypto_mod_p256_square>
   23482:	3c01      	subs	r4, #1
   23484:	d1f5      	bne.n	23472 <ocrypto_mod_p256_invert+0x112>
   23486:	a910      	add	r1, sp, #64	; 0x40
   23488:	466a      	mov	r2, sp
   2348a:	4608      	mov	r0, r1
   2348c:	f7e9 fc91 	bl	cdb2 <ocrypto_mod_p256_mul>
   23490:	2410      	movs	r4, #16
   23492:	a910      	add	r1, sp, #64	; 0x40
   23494:	4608      	mov	r0, r1
   23496:	f7e9 fc8b 	bl	cdb0 <ocrypto_mod_p256_square>
   2349a:	a910      	add	r1, sp, #64	; 0x40
   2349c:	4608      	mov	r0, r1
   2349e:	f7e9 fc87 	bl	cdb0 <ocrypto_mod_p256_square>
   234a2:	3c01      	subs	r4, #1
   234a4:	d1f5      	bne.n	23492 <ocrypto_mod_p256_invert+0x132>
   234a6:	a910      	add	r1, sp, #64	; 0x40
   234a8:	aa08      	add	r2, sp, #32
   234aa:	4608      	mov	r0, r1
   234ac:	f7e9 fc81 	bl	cdb2 <ocrypto_mod_p256_mul>
   234b0:	462a      	mov	r2, r5
   234b2:	a910      	add	r1, sp, #64	; 0x40
   234b4:	4630      	mov	r0, r6
   234b6:	f7e9 fc7c 	bl	cdb2 <ocrypto_mod_p256_mul>
   234ba:	b018      	add	sp, #96	; 0x60
   234bc:	bd70      	pop	{r4, r5, r6, pc}
   234be:	bf00      	nop

000234c0 <ocrypto_sc_p256_from32bytes>:
   234c0:	b538      	push	{r3, r4, r5, lr}
   234c2:	460b      	mov	r3, r1
   234c4:	680a      	ldr	r2, [r1, #0]
   234c6:	4d12      	ldr	r5, [pc, #72]	; (23510 <ocrypto_sc_p256_from32bytes+0x50>)
   234c8:	ba12      	rev	r2, r2
   234ca:	61c2      	str	r2, [r0, #28]
   234cc:	684a      	ldr	r2, [r1, #4]
   234ce:	4601      	mov	r1, r0
   234d0:	ba12      	rev	r2, r2
   234d2:	6182      	str	r2, [r0, #24]
   234d4:	689a      	ldr	r2, [r3, #8]
   234d6:	4604      	mov	r4, r0
   234d8:	ba12      	rev	r2, r2
   234da:	6142      	str	r2, [r0, #20]
   234dc:	68da      	ldr	r2, [r3, #12]
   234de:	ba12      	rev	r2, r2
   234e0:	6102      	str	r2, [r0, #16]
   234e2:	691a      	ldr	r2, [r3, #16]
   234e4:	ba12      	rev	r2, r2
   234e6:	60c2      	str	r2, [r0, #12]
   234e8:	695a      	ldr	r2, [r3, #20]
   234ea:	ba12      	rev	r2, r2
   234ec:	6082      	str	r2, [r0, #8]
   234ee:	699a      	ldr	r2, [r3, #24]
   234f0:	ba12      	rev	r2, r2
   234f2:	6042      	str	r2, [r0, #4]
   234f4:	69db      	ldr	r3, [r3, #28]
   234f6:	462a      	mov	r2, r5
   234f8:	ba1b      	rev	r3, r3
   234fa:	6003      	str	r3, [r0, #0]
   234fc:	f7e9 f8b0 	bl	c660 <ocrypto_bigint_sub256>
   23500:	4629      	mov	r1, r5
   23502:	4602      	mov	r2, r0
   23504:	4620      	mov	r0, r4
   23506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2350a:	f7e9 b8c9 	b.w	c6a0 <ocrypto_bigint_cadd256>
   2350e:	bf00      	nop
   23510:	000267ec 	.word	0x000267ec

00023514 <p256_zdblu>:
   23514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23518:	4607      	mov	r7, r0
   2351a:	460d      	mov	r5, r1
   2351c:	4690      	mov	r8, r2
   2351e:	b088      	sub	sp, #32
   23520:	f102 0120 	add.w	r1, r2, #32
   23524:	4668      	mov	r0, sp
   23526:	f107 0620 	add.w	r6, r7, #32
   2352a:	f7e9 fc41 	bl	cdb0 <ocrypto_mod_p256_square>
   2352e:	466a      	mov	r2, sp
   23530:	4669      	mov	r1, sp
   23532:	4668      	mov	r0, sp
   23534:	f7e9 fbd0 	bl	ccd8 <ocrypto_mod_p256_add>
   23538:	4630      	mov	r0, r6
   2353a:	4669      	mov	r1, sp
   2353c:	f7e9 fc38 	bl	cdb0 <ocrypto_mod_p256_square>
   23540:	4632      	mov	r2, r6
   23542:	4631      	mov	r1, r6
   23544:	4630      	mov	r0, r6
   23546:	f105 0420 	add.w	r4, r5, #32
   2354a:	f7e9 fbc5 	bl	ccd8 <ocrypto_mod_p256_add>
   2354e:	466a      	mov	r2, sp
   23550:	4669      	mov	r1, sp
   23552:	4668      	mov	r0, sp
   23554:	f7e9 fbc0 	bl	ccd8 <ocrypto_mod_p256_add>
   23558:	4620      	mov	r0, r4
   2355a:	4641      	mov	r1, r8
   2355c:	f7e9 fc28 	bl	cdb0 <ocrypto_mod_p256_square>
   23560:	466a      	mov	r2, sp
   23562:	4641      	mov	r1, r8
   23564:	4638      	mov	r0, r7
   23566:	f7e9 fc24 	bl	cdb2 <ocrypto_mod_p256_mul>
   2356a:	4622      	mov	r2, r4
   2356c:	4621      	mov	r1, r4
   2356e:	4668      	mov	r0, sp
   23570:	f7e9 fbb2 	bl	ccd8 <ocrypto_mod_p256_add>
   23574:	4622      	mov	r2, r4
   23576:	4669      	mov	r1, sp
   23578:	4668      	mov	r0, sp
   2357a:	f7e9 fbad 	bl	ccd8 <ocrypto_mod_p256_add>
   2357e:	4669      	mov	r1, sp
   23580:	4668      	mov	r0, sp
   23582:	4a11      	ldr	r2, [pc, #68]	; (235c8 <p256_zdblu+0xb4>)
   23584:	f7e9 fba8 	bl	ccd8 <ocrypto_mod_p256_add>
   23588:	4669      	mov	r1, sp
   2358a:	4628      	mov	r0, r5
   2358c:	f7e9 fc10 	bl	cdb0 <ocrypto_mod_p256_square>
   23590:	463a      	mov	r2, r7
   23592:	4629      	mov	r1, r5
   23594:	4628      	mov	r0, r5
   23596:	f7e9 fbde 	bl	cd56 <ocrypto_mod_p256_sub>
   2359a:	463a      	mov	r2, r7
   2359c:	4629      	mov	r1, r5
   2359e:	4628      	mov	r0, r5
   235a0:	f7e9 fbd9 	bl	cd56 <ocrypto_mod_p256_sub>
   235a4:	462a      	mov	r2, r5
   235a6:	4639      	mov	r1, r7
   235a8:	4620      	mov	r0, r4
   235aa:	f7e9 fbd4 	bl	cd56 <ocrypto_mod_p256_sub>
   235ae:	466a      	mov	r2, sp
   235b0:	4621      	mov	r1, r4
   235b2:	4620      	mov	r0, r4
   235b4:	f7e9 fbfd 	bl	cdb2 <ocrypto_mod_p256_mul>
   235b8:	4632      	mov	r2, r6
   235ba:	4621      	mov	r1, r4
   235bc:	4620      	mov	r0, r4
   235be:	f7e9 fbca 	bl	cd56 <ocrypto_mod_p256_sub>
   235c2:	b008      	add	sp, #32
   235c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   235c8:	0002688c 	.word	0x0002688c

000235cc <p256_zaddc>:
   235cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   235ce:	4604      	mov	r4, r0
   235d0:	460e      	mov	r6, r1
   235d2:	b099      	sub	sp, #100	; 0x64
   235d4:	460a      	mov	r2, r1
   235d6:	4601      	mov	r1, r0
   235d8:	4668      	mov	r0, sp
   235da:	f7e9 fbbc 	bl	cd56 <ocrypto_mod_p256_sub>
   235de:	4669      	mov	r1, sp
   235e0:	4668      	mov	r0, sp
   235e2:	f7e9 fbe5 	bl	cdb0 <ocrypto_mod_p256_square>
   235e6:	466a      	mov	r2, sp
   235e8:	4621      	mov	r1, r4
   235ea:	a808      	add	r0, sp, #32
   235ec:	f106 0520 	add.w	r5, r6, #32
   235f0:	f104 0720 	add.w	r7, r4, #32
   235f4:	f7e9 fbdd 	bl	cdb2 <ocrypto_mod_p256_mul>
   235f8:	466a      	mov	r2, sp
   235fa:	4631      	mov	r1, r6
   235fc:	4668      	mov	r0, sp
   235fe:	f7e9 fbd8 	bl	cdb2 <ocrypto_mod_p256_mul>
   23602:	4639      	mov	r1, r7
   23604:	462a      	mov	r2, r5
   23606:	a810      	add	r0, sp, #64	; 0x40
   23608:	f7e9 fb66 	bl	ccd8 <ocrypto_mod_p256_add>
   2360c:	462a      	mov	r2, r5
   2360e:	4639      	mov	r1, r7
   23610:	4628      	mov	r0, r5
   23612:	f7e9 fba0 	bl	cd56 <ocrypto_mod_p256_sub>
   23616:	4629      	mov	r1, r5
   23618:	4630      	mov	r0, r6
   2361a:	f7e9 fbc9 	bl	cdb0 <ocrypto_mod_p256_square>
   2361e:	466a      	mov	r2, sp
   23620:	a908      	add	r1, sp, #32
   23622:	4620      	mov	r0, r4
   23624:	f7e9 fb58 	bl	ccd8 <ocrypto_mod_p256_add>
   23628:	4622      	mov	r2, r4
   2362a:	4631      	mov	r1, r6
   2362c:	4630      	mov	r0, r6
   2362e:	f7e9 fb92 	bl	cd56 <ocrypto_mod_p256_sub>
   23632:	466a      	mov	r2, sp
   23634:	a908      	add	r1, sp, #32
   23636:	4668      	mov	r0, sp
   23638:	f7e9 fb8d 	bl	cd56 <ocrypto_mod_p256_sub>
   2363c:	466a      	mov	r2, sp
   2363e:	4639      	mov	r1, r7
   23640:	4638      	mov	r0, r7
   23642:	f7e9 fbb6 	bl	cdb2 <ocrypto_mod_p256_mul>
   23646:	4632      	mov	r2, r6
   23648:	a908      	add	r1, sp, #32
   2364a:	4668      	mov	r0, sp
   2364c:	f7e9 fb83 	bl	cd56 <ocrypto_mod_p256_sub>
   23650:	466a      	mov	r2, sp
   23652:	4629      	mov	r1, r5
   23654:	4628      	mov	r0, r5
   23656:	f7e9 fbac 	bl	cdb2 <ocrypto_mod_p256_mul>
   2365a:	463a      	mov	r2, r7
   2365c:	4629      	mov	r1, r5
   2365e:	4628      	mov	r0, r5
   23660:	f7e9 fb79 	bl	cd56 <ocrypto_mod_p256_sub>
   23664:	a910      	add	r1, sp, #64	; 0x40
   23666:	4668      	mov	r0, sp
   23668:	f7e9 fba2 	bl	cdb0 <ocrypto_mod_p256_square>
   2366c:	4622      	mov	r2, r4
   2366e:	4669      	mov	r1, sp
   23670:	4620      	mov	r0, r4
   23672:	f7e9 fb70 	bl	cd56 <ocrypto_mod_p256_sub>
   23676:	a908      	add	r1, sp, #32
   23678:	4622      	mov	r2, r4
   2367a:	4608      	mov	r0, r1
   2367c:	f7e9 fb6b 	bl	cd56 <ocrypto_mod_p256_sub>
   23680:	a910      	add	r1, sp, #64	; 0x40
   23682:	aa08      	add	r2, sp, #32
   23684:	4608      	mov	r0, r1
   23686:	f7e9 fb94 	bl	cdb2 <ocrypto_mod_p256_mul>
   2368a:	463a      	mov	r2, r7
   2368c:	a910      	add	r1, sp, #64	; 0x40
   2368e:	4638      	mov	r0, r7
   23690:	f7e9 fb61 	bl	cd56 <ocrypto_mod_p256_sub>
   23694:	b019      	add	sp, #100	; 0x64
   23696:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023698 <p256_zaddu>:
   23698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2369c:	460c      	mov	r4, r1
   2369e:	4605      	mov	r5, r0
   236a0:	4690      	mov	r8, r2
   236a2:	b088      	sub	sp, #32
   236a4:	4622      	mov	r2, r4
   236a6:	4601      	mov	r1, r0
   236a8:	4668      	mov	r0, sp
   236aa:	f7e9 fb54 	bl	cd56 <ocrypto_mod_p256_sub>
   236ae:	4669      	mov	r1, sp
   236b0:	4668      	mov	r0, sp
   236b2:	f7e9 fb7d 	bl	cdb0 <ocrypto_mod_p256_square>
   236b6:	466a      	mov	r2, sp
   236b8:	4629      	mov	r1, r5
   236ba:	4628      	mov	r0, r5
   236bc:	f104 0620 	add.w	r6, r4, #32
   236c0:	f7e9 fb77 	bl	cdb2 <ocrypto_mod_p256_mul>
   236c4:	f105 0720 	add.w	r7, r5, #32
   236c8:	466a      	mov	r2, sp
   236ca:	4621      	mov	r1, r4
   236cc:	4668      	mov	r0, sp
   236ce:	f7e9 fb70 	bl	cdb2 <ocrypto_mod_p256_mul>
   236d2:	4632      	mov	r2, r6
   236d4:	4630      	mov	r0, r6
   236d6:	4639      	mov	r1, r7
   236d8:	f7e9 fb3d 	bl	cd56 <ocrypto_mod_p256_sub>
   236dc:	4631      	mov	r1, r6
   236de:	4620      	mov	r0, r4
   236e0:	f7e9 fb66 	bl	cdb0 <ocrypto_mod_p256_square>
   236e4:	462a      	mov	r2, r5
   236e6:	4621      	mov	r1, r4
   236e8:	4620      	mov	r0, r4
   236ea:	f7e9 fb34 	bl	cd56 <ocrypto_mod_p256_sub>
   236ee:	466a      	mov	r2, sp
   236f0:	4621      	mov	r1, r4
   236f2:	4620      	mov	r0, r4
   236f4:	f7e9 fb2f 	bl	cd56 <ocrypto_mod_p256_sub>
   236f8:	466a      	mov	r2, sp
   236fa:	4629      	mov	r1, r5
   236fc:	4640      	mov	r0, r8
   236fe:	f7e9 fb2a 	bl	cd56 <ocrypto_mod_p256_sub>
   23702:	4642      	mov	r2, r8
   23704:	4639      	mov	r1, r7
   23706:	4638      	mov	r0, r7
   23708:	f7e9 fb53 	bl	cdb2 <ocrypto_mod_p256_mul>
   2370c:	4622      	mov	r2, r4
   2370e:	4629      	mov	r1, r5
   23710:	4668      	mov	r0, sp
   23712:	f7e9 fb20 	bl	cd56 <ocrypto_mod_p256_sub>
   23716:	466a      	mov	r2, sp
   23718:	4631      	mov	r1, r6
   2371a:	4630      	mov	r0, r6
   2371c:	f7e9 fb49 	bl	cdb2 <ocrypto_mod_p256_mul>
   23720:	463a      	mov	r2, r7
   23722:	4631      	mov	r1, r6
   23724:	4630      	mov	r0, r6
   23726:	f7e9 fb16 	bl	cd56 <ocrypto_mod_p256_sub>
   2372a:	b008      	add	sp, #32
   2372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023730 <ocrypto_curve_p256_to64bytes>:
   23730:	b538      	push	{r3, r4, r5, lr}
   23732:	4604      	mov	r4, r0
   23734:	460d      	mov	r5, r1
   23736:	f7ff fdf9 	bl	2332c <ocrypto_mod_p256_toBytes>
   2373a:	f105 0120 	add.w	r1, r5, #32
   2373e:	f104 0020 	add.w	r0, r4, #32
   23742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23746:	f7ff bdf1 	b.w	2332c <ocrypto_mod_p256_toBytes>
   2374a:	bf00      	nop

0002374c <ocrypto_curve_p256_scalarmult>:
   2374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23750:	b0b8      	sub	sp, #224	; 0xe0
   23752:	468a      	mov	sl, r1
   23754:	4681      	mov	r9, r0
   23756:	4611      	mov	r1, r2
   23758:	a810      	add	r0, sp, #64	; 0x40
   2375a:	4a51      	ldr	r2, [pc, #324]	; (238a0 <ocrypto_curve_p256_scalarmult+0x154>)
   2375c:	f7e8 ff80 	bl	c660 <ocrypto_bigint_sub256>
   23760:	4950      	ldr	r1, [pc, #320]	; (238a4 <ocrypto_curve_p256_scalarmult+0x158>)
   23762:	4602      	mov	r2, r0
   23764:	a810      	add	r0, sp, #64	; 0x40
   23766:	f7e8 ff9b 	bl	c6a0 <ocrypto_bigint_cadd256>
   2376a:	4680      	mov	r8, r0
   2376c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2376e:	494c      	ldr	r1, [pc, #304]	; (238a0 <ocrypto_curve_p256_scalarmult+0x154>)
   23770:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   23774:	f1c7 0201 	rsb	r2, r7, #1
   23778:	a810      	add	r0, sp, #64	; 0x40
   2377a:	f7e8 ff91 	bl	c6a0 <ocrypto_bigint_cadd256>
   2377e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   23780:	4652      	mov	r2, sl
   23782:	43ed      	mvns	r5, r5
   23784:	a928      	add	r1, sp, #160	; 0xa0
   23786:	a818      	add	r0, sp, #96	; 0x60
   23788:	f7ff fec4 	bl	23514 <p256_zdblu>
   2378c:	0fed      	lsrs	r5, r5, #31
   2378e:	a920      	add	r1, sp, #128	; 0x80
   23790:	f1c5 0201 	rsb	r2, r5, #1
   23794:	4608      	mov	r0, r1
   23796:	f7ff fdad 	bl	232f4 <ocrypto_mod_p256_cneg>
   2379a:	26fe      	movs	r6, #254	; 0xfe
   2379c:	f1c8 0801 	rsb	r8, r8, #1
   237a0:	466a      	mov	r2, sp
   237a2:	a918      	add	r1, sp, #96	; 0x60
   237a4:	a828      	add	r0, sp, #160	; 0xa0
   237a6:	f7ff ff77 	bl	23698 <p256_zaddu>
   237aa:	1173      	asrs	r3, r6, #5
   237ac:	aa38      	add	r2, sp, #224	; 0xe0
   237ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   237b2:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   237b6:	f006 031f 	and.w	r3, r6, #31
   237ba:	40dc      	lsrs	r4, r3
   237bc:	f004 0401 	and.w	r4, r4, #1
   237c0:	4065      	eors	r5, r4
   237c2:	462a      	mov	r2, r5
   237c4:	a928      	add	r1, sp, #160	; 0xa0
   237c6:	a818      	add	r0, sp, #96	; 0x60
   237c8:	f7e8 ffd5 	bl	c776 <ocrypto_bigint_cswap256>
   237cc:	462a      	mov	r2, r5
   237ce:	a930      	add	r1, sp, #192	; 0xc0
   237d0:	a820      	add	r0, sp, #128	; 0x80
   237d2:	f7e8 ffd0 	bl	c776 <ocrypto_bigint_cswap256>
   237d6:	3e01      	subs	r6, #1
   237d8:	a928      	add	r1, sp, #160	; 0xa0
   237da:	a818      	add	r0, sp, #96	; 0x60
   237dc:	f7ff fef6 	bl	235cc <p256_zaddc>
   237e0:	1c73      	adds	r3, r6, #1
   237e2:	4625      	mov	r5, r4
   237e4:	d1dc      	bne.n	237a0 <ocrypto_curve_p256_scalarmult+0x54>
   237e6:	f1c4 0201 	rsb	r2, r4, #1
   237ea:	a808      	add	r0, sp, #32
   237ec:	a920      	add	r1, sp, #128	; 0x80
   237ee:	f7ff fd81 	bl	232f4 <ocrypto_mod_p256_cneg>
   237f2:	407d      	eors	r5, r7
   237f4:	466a      	mov	r2, sp
   237f6:	a918      	add	r1, sp, #96	; 0x60
   237f8:	a828      	add	r0, sp, #160	; 0xa0
   237fa:	f7ff ff4d 	bl	23698 <p256_zaddu>
   237fe:	a928      	add	r1, sp, #160	; 0xa0
   23800:	462a      	mov	r2, r5
   23802:	a818      	add	r0, sp, #96	; 0x60
   23804:	f7e8 ffb7 	bl	c776 <ocrypto_bigint_cswap256>
   23808:	462a      	mov	r2, r5
   2380a:	a930      	add	r1, sp, #192	; 0xc0
   2380c:	a820      	add	r0, sp, #128	; 0x80
   2380e:	f7e8 ffb2 	bl	c776 <ocrypto_bigint_cswap256>
   23812:	a908      	add	r1, sp, #32
   23814:	466a      	mov	r2, sp
   23816:	4608      	mov	r0, r1
   23818:	f7e9 facb 	bl	cdb2 <ocrypto_mod_p256_mul>
   2381c:	a908      	add	r1, sp, #32
   2381e:	4608      	mov	r0, r1
   23820:	f7ff fd9e 	bl	23360 <ocrypto_mod_p256_invert>
   23824:	a908      	add	r1, sp, #32
   23826:	f109 0420 	add.w	r4, r9, #32
   2382a:	f10a 0220 	add.w	r2, sl, #32
   2382e:	4608      	mov	r0, r1
   23830:	f7e9 fabf 	bl	cdb2 <ocrypto_mod_p256_mul>
   23834:	a920      	add	r1, sp, #128	; 0x80
   23836:	aa08      	add	r2, sp, #32
   23838:	4620      	mov	r0, r4
   2383a:	f7e9 faba 	bl	cdb2 <ocrypto_mod_p256_mul>
   2383e:	aa08      	add	r2, sp, #32
   23840:	a918      	add	r1, sp, #96	; 0x60
   23842:	4668      	mov	r0, sp
   23844:	f7e9 fab5 	bl	cdb2 <ocrypto_mod_p256_mul>
   23848:	4669      	mov	r1, sp
   2384a:	4668      	mov	r0, sp
   2384c:	f7e9 fab0 	bl	cdb0 <ocrypto_mod_p256_square>
   23850:	aa18      	add	r2, sp, #96	; 0x60
   23852:	4669      	mov	r1, sp
   23854:	a808      	add	r0, sp, #32
   23856:	f7e9 faac 	bl	cdb2 <ocrypto_mod_p256_mul>
   2385a:	4621      	mov	r1, r4
   2385c:	4668      	mov	r0, sp
   2385e:	f7e9 faa7 	bl	cdb0 <ocrypto_mod_p256_square>
   23862:	aa08      	add	r2, sp, #32
   23864:	4669      	mov	r1, sp
   23866:	4610      	mov	r0, r2
   23868:	f7e9 fa75 	bl	cd56 <ocrypto_mod_p256_sub>
   2386c:	a908      	add	r1, sp, #32
   2386e:	4a0e      	ldr	r2, [pc, #56]	; (238a8 <ocrypto_curve_p256_scalarmult+0x15c>)
   23870:	4668      	mov	r0, sp
   23872:	f7e9 fa70 	bl	cd56 <ocrypto_mod_p256_sub>
   23876:	4620      	mov	r0, r4
   23878:	2120      	movs	r1, #32
   2387a:	f7e9 fa12 	bl	cca2 <ocrypto_constant_time_is_zero>
   2387e:	a908      	add	r1, sp, #32
   23880:	4243      	negs	r3, r0
   23882:	4602      	mov	r2, r0
   23884:	4668      	mov	r0, sp
   23886:	ea43 0808 	orr.w	r8, r3, r8
   2388a:	f7e8 ff74 	bl	c776 <ocrypto_bigint_cswap256>
   2388e:	4648      	mov	r0, r9
   23890:	4669      	mov	r1, sp
   23892:	4a06      	ldr	r2, [pc, #24]	; (238ac <ocrypto_curve_p256_scalarmult+0x160>)
   23894:	f7e9 fa8d 	bl	cdb2 <ocrypto_mod_p256_mul>
   23898:	4640      	mov	r0, r8
   2389a:	b038      	add	sp, #224	; 0xe0
   2389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   238a0:	000268cc 	.word	0x000268cc
   238a4:	0002684c 	.word	0x0002684c
   238a8:	000268ac 	.word	0x000268ac
   238ac:	0002686c 	.word	0x0002686c

000238b0 <ocrypto_curve_p256_scalarmult_base>:
   238b0:	460a      	mov	r2, r1
   238b2:	4901      	ldr	r1, [pc, #4]	; (238b8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   238b4:	f7ff bf4a 	b.w	2374c <ocrypto_curve_p256_scalarmult>
   238b8:	0002680c 	.word	0x0002680c

000238bc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   238bc:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   238c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   238c4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   238c6:	bf08      	it	eq
   238c8:	f06f 0015 	mvneq.w	r0, #21
   238cc:	4770      	bx	lr

000238ce <get_bit_ptr>:
{
   238ce:	b570      	push	{r4, r5, r6, lr}
   238d0:	250c      	movs	r5, #12
   238d2:	434d      	muls	r5, r1
   238d4:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   238d6:	f990 000b 	ldrsb.w	r0, [r0, #11]
   238da:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   238dc:	4288      	cmp	r0, r1
   238de:	bfa8      	it	ge
   238e0:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   238e2:	f04f 0420 	mov.w	r4, #32
   238e6:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   238ea:	bfb8      	it	lt
   238ec:	5971      	ldrlt	r1, [r6, r5]
}
   238ee:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   238f2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   238f6:	6019      	str	r1, [r3, #0]
}
   238f8:	bd70      	pop	{r4, r5, r6, pc}

000238fa <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   238fa:	f04f 0320 	mov.w	r3, #32
   238fe:	f3ef 8011 	mrs	r0, BASEPRI
   23902:	f383 8811 	msr	BASEPRI, r3
   23906:	f3bf 8f6f 	isb	sy
}
   2390a:	4770      	bx	lr

0002390c <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2390c:	07c3      	lsls	r3, r0, #31
   2390e:	d503      	bpl.n	23918 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   23910:	f381 8811 	msr	BASEPRI, r1
   23914:	f3bf 8f6f 	isb	sy
}
   23918:	4770      	bx	lr

0002391a <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   2391a:	23ff      	movs	r3, #255	; 0xff
{
   2391c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23920:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   23922:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23924:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   23926:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   2392a:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2392e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   23930:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23932:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   23936:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   23938:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2393a:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   2393c:	9301      	str	r3, [sp, #4]
   2393e:	9b01      	ldr	r3, [sp, #4]
   23940:	4293      	cmp	r3, r2
   23942:	dc08      	bgt.n	23956 <z_sys_mem_pool_base_init+0x3c>
   23944:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   23946:	4619      	mov	r1, r3
   23948:	428f      	cmp	r7, r1
   2394a:	eb05 0c03 	add.w	ip, r5, r3
   2394e:	dc21      	bgt.n	23994 <z_sys_mem_pool_base_init+0x7a>
}
   23950:	b003      	add	sp, #12
   23952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   23956:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   2395a:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   2395c:	bf84      	itt	hi
   2395e:	331f      	addhi	r3, #31
   23960:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   23964:	fb0a fe02 	mul.w	lr, sl, r2
   23968:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   2396c:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   23970:	eb08 060e 	add.w	r6, r8, lr
   23974:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   23978:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   2397c:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   23980:	bf94      	ite	ls
   23982:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   23984:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   23988:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   2398c:	bf88      	it	hi
   2398e:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   23992:	e7d4      	b.n	2393e <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   23994:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   23996:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   23998:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   2399c:	18f4      	adds	r4, r6, r3
	node->next = list;
   2399e:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   239a2:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   239a4:	3101      	adds	r1, #1
   239a6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   239a8:	6893      	ldr	r3, [r2, #8]
   239aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   239ac:	6094      	str	r4, [r2, #8]
   239ae:	4663      	mov	r3, ip
   239b0:	e7ca      	b.n	23948 <z_sys_mem_pool_base_init+0x2e>

000239b2 <z_sys_mem_pool_block_alloc>:
{
   239b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239b6:	b089      	sub	sp, #36	; 0x24
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   239b8:	7a84      	ldrb	r4, [r0, #10]
{
   239ba:	af00      	add	r7, sp, #0
   239bc:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   239c0:	00a3      	lsls	r3, r4, #2
   239c2:	330a      	adds	r3, #10
   239c4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   239c8:	ebad 0d03 	sub.w	sp, sp, r3
   239cc:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   239ce:	4653      	mov	r3, sl
   239d0:	6842      	ldr	r2, [r0, #4]
{
   239d2:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   239d4:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   239d8:	2200      	movs	r2, #0
   239da:	4294      	cmp	r4, r2
   239dc:	f102 39ff 	add.w	r9, r2, #4294967295
   239e0:	dd09      	ble.n	239f6 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   239e2:	b122      	cbz	r2, 239ee <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   239e4:	6818      	ldr	r0, [r3, #0]
   239e6:	0880      	lsrs	r0, r0, #2
   239e8:	f020 0003 	bic.w	r0, r0, #3
   239ec:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   239ee:	f853 0f04 	ldr.w	r0, [r3, #4]!
   239f2:	4288      	cmp	r0, r1
   239f4:	d208      	bcs.n	23a08 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   239f6:	f1b9 3fff 	cmp.w	r9, #4294967295
   239fa:	d107      	bne.n	23a0c <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   239fc:	2300      	movs	r3, #0
   239fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   23a02:	f06f 000b 	mvn.w	r0, #11
   23a06:	e047      	b.n	23a98 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   23a08:	3201      	adds	r2, #1
   23a0a:	e7e6      	b.n	239da <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a0c:	7c28      	ldrb	r0, [r5, #16]
   23a0e:	f010 0001 	ands.w	r0, r0, #1
   23a12:	d001      	beq.n	23a18 <z_sys_mem_pool_block_alloc+0x66>
   23a14:	f7ff ff71 	bl	238fa <pool_irq_lock.isra.2.part.3>
   23a18:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   23a1a:	46c8      	mov	r8, r9
   23a1c:	fb03 f309 	mul.w	r3, r3, r9
   23a20:	1d1a      	adds	r2, r3, #4
   23a22:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   23a24:	6178      	str	r0, [r7, #20]
   23a26:	4413      	add	r3, r2
	return list->head == list;
   23a28:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23a2a:	42a3      	cmp	r3, r4
   23a2c:	d070      	beq.n	23b10 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   23a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a32:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   23a34:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   23a36:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   23a3a:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   23a3c:	2300      	movs	r3, #0
	node->prev = NULL;
   23a3e:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23a42:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   23a44:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23a48:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   23a4a:	fb92 f2f1 	sdiv	r2, r2, r1
   23a4e:	465b      	mov	r3, fp
   23a50:	4641      	mov	r1, r8
   23a52:	4628      	mov	r0, r5
   23a54:	f7ff ff3b 	bl	238ce <get_bit_ptr>
	*word |= (1<<bit);
   23a58:	2201      	movs	r2, #1
   23a5a:	69f9      	ldr	r1, [r7, #28]
   23a5c:	fa02 f000 	lsl.w	r0, r2, r0
   23a60:	680b      	ldr	r3, [r1, #0]
   23a62:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   23a66:	4303      	orrs	r3, r0
   23a68:	600b      	str	r3, [r1, #0]
   23a6a:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   23a6c:	45c8      	cmp	r8, r9
   23a6e:	db17      	blt.n	23aa0 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   23a70:	6979      	ldr	r1, [r7, #20]
   23a72:	7c28      	ldrb	r0, [r5, #16]
   23a74:	f7ff ff4a 	bl	2390c <pool_irq_unlock.isra.4>
	*data_p = data;
   23a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a7a:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   23a7c:	2c00      	cmp	r4, #0
   23a7e:	d0c0      	beq.n	23a02 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   23a80:	68fb      	ldr	r3, [r7, #12]
	return 0;
   23a82:	2000      	movs	r0, #0
	*level_p = alloc_l;
   23a84:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23a88:	682b      	ldr	r3, [r5, #0]
   23a8a:	1ae4      	subs	r4, r4, r3
   23a8c:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   23a90:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   23a94:	68bb      	ldr	r3, [r7, #8]
   23a96:	601c      	str	r4, [r3, #0]
}
   23a98:	3724      	adds	r7, #36	; 0x24
   23a9a:	46bd      	mov	sp, r7
   23a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23aa0:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   23aa2:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23aa4:	1ae3      	subs	r3, r4, r3
   23aa6:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   23aaa:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   23aae:	465b      	mov	r3, fp
   23ab0:	0092      	lsls	r2, r2, #2
   23ab2:	4641      	mov	r1, r8
   23ab4:	4628      	mov	r0, r5
   23ab6:	f7ff ff0a 	bl	238ce <get_bit_ptr>
	*word |= (1<<bit);
   23aba:	69fa      	ldr	r2, [r7, #28]
   23abc:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23abe:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   23ac0:	fa03 f000 	lsl.w	r0, r3, r0
   23ac4:	6813      	ldr	r3, [r2, #0]
   23ac6:	4303      	orrs	r3, r0
   23ac8:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23aca:	230c      	movs	r3, #12
   23acc:	2203      	movs	r2, #3
   23ace:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   23ad2:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23ad6:	f101 0e04 	add.w	lr, r1, #4
   23ada:	1823      	adds	r3, r4, r0
   23adc:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   23ade:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   23ae0:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   23ae4:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23ae6:	688a      	ldr	r2, [r1, #8]
   23ae8:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   23aea:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   23aec:	608b      	str	r3, [r1, #8]
   23aee:	3a01      	subs	r2, #1
   23af0:	4403      	add	r3, r0
   23af2:	613a      	str	r2, [r7, #16]
   23af4:	d1f3      	bne.n	23ade <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   23af6:	6979      	ldr	r1, [r7, #20]
   23af8:	7c28      	ldrb	r0, [r5, #16]
   23afa:	f7ff ff07 	bl	2390c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23afe:	7c2b      	ldrb	r3, [r5, #16]
   23b00:	07db      	lsls	r3, r3, #31
   23b02:	d503      	bpl.n	23b0c <z_sys_mem_pool_block_alloc+0x15a>
   23b04:	f7ff fef9 	bl	238fa <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   23b08:	6178      	str	r0, [r7, #20]
   23b0a:	e7af      	b.n	23a6c <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   23b0c:	6938      	ldr	r0, [r7, #16]
   23b0e:	e7fb      	b.n	23b08 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   23b10:	f108 38ff 	add.w	r8, r8, #4294967295
   23b14:	f1b8 3fff 	cmp.w	r8, #4294967295
   23b18:	f1a4 030c 	sub.w	r3, r4, #12
   23b1c:	d184      	bne.n	23a28 <z_sys_mem_pool_block_alloc+0x76>
   23b1e:	2400      	movs	r4, #0
   23b20:	e7a6      	b.n	23a70 <z_sys_mem_pool_block_alloc+0xbe>

00023b22 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23b22:	4604      	mov	r4, r0
   23b24:	b508      	push	{r3, lr}
   23b26:	4608      	mov	r0, r1
   23b28:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   23b2a:	461a      	mov	r2, r3
   23b2c:	47a0      	blx	r4
	return z_impl_k_current_get();
   23b2e:	f7fe faf1 	bl	22114 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23b32:	f7ea fa9b 	bl	e06c <z_impl_k_thread_abort>

00023b36 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23b36:	b510      	push	{r4, lr}
   23b38:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   23b3a:	f04f 31ff 	mov.w	r1, #4294967295
   23b3e:	4620      	mov	r0, r4
   23b40:	f7fd f9ba 	bl	20eb8 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   23b44:	4603      	mov	r3, r0
   23b46:	2800      	cmp	r0, #0
   23b48:	d0f7      	beq.n	23b3a <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   23b4a:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23b4c:	3308      	adds	r3, #8
   23b4e:	e8d3 1fef 	ldaex	r1, [r3]
   23b52:	f021 0c01 	bic.w	ip, r1, #1
   23b56:	e8c3 cfee 	stlex	lr, ip, [r3]
   23b5a:	f1be 0f00 	cmp.w	lr, #0
   23b5e:	d1f6      	bne.n	23b4e <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   23b60:	07cb      	lsls	r3, r1, #31
   23b62:	d500      	bpl.n	23b66 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   23b64:	4790      	blx	r2
	z_impl_k_yield();
   23b66:	f7fe f981 	bl	21e6c <z_impl_k_yield>
   23b6a:	e7e6      	b.n	23b3a <z_work_q_main+0x4>

00023b6c <z_arch_printk_char_out>:
}
   23b6c:	2000      	movs	r0, #0
   23b6e:	4770      	bx	lr

00023b70 <print_err>:
{
   23b70:	b570      	push	{r4, r5, r6, lr}
   23b72:	460d      	mov	r5, r1
   23b74:	4604      	mov	r4, r0
	out('E', ctx);
   23b76:	2045      	movs	r0, #69	; 0x45
   23b78:	47a0      	blx	r4
	out('R', ctx);
   23b7a:	4629      	mov	r1, r5
   23b7c:	2052      	movs	r0, #82	; 0x52
   23b7e:	47a0      	blx	r4
	out('R', ctx);
   23b80:	4629      	mov	r1, r5
   23b82:	4623      	mov	r3, r4
}
   23b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   23b88:	2052      	movs	r0, #82	; 0x52
   23b8a:	4718      	bx	r3

00023b8c <z_vprintk>:
{
   23b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   23b90:	2700      	movs	r7, #0
{
   23b92:	4605      	mov	r5, r0
   23b94:	460e      	mov	r6, r1
   23b96:	4692      	mov	sl, r2
   23b98:	461c      	mov	r4, r3
	int min_width = -1;
   23b9a:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   23b9e:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   23ba0:	46bb      	mov	fp, r7
{
   23ba2:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   23ba4:	f89a 0000 	ldrb.w	r0, [sl]
   23ba8:	b910      	cbnz	r0, 23bb0 <z_vprintk+0x24>
}
   23baa:	b009      	add	sp, #36	; 0x24
   23bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   23bb0:	f1bb 0f00 	cmp.w	fp, #0
   23bb4:	d107      	bne.n	23bc6 <z_vprintk+0x3a>
			if (*fmt != '%') {
   23bb6:	2825      	cmp	r0, #37	; 0x25
   23bb8:	f000 814e 	beq.w	23e58 <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   23bbc:	4631      	mov	r1, r6
   23bbe:	47a8      	blx	r5
		++fmt;
   23bc0:	f10a 0a01 	add.w	sl, sl, #1
   23bc4:	e7ee      	b.n	23ba4 <z_vprintk+0x18>
			switch (*fmt) {
   23bc6:	2864      	cmp	r0, #100	; 0x64
   23bc8:	d068      	beq.n	23c9c <z_vprintk+0x110>
   23bca:	d81a      	bhi.n	23c02 <z_vprintk+0x76>
   23bcc:	2839      	cmp	r0, #57	; 0x39
   23bce:	d80b      	bhi.n	23be8 <z_vprintk+0x5c>
   23bd0:	2831      	cmp	r0, #49	; 0x31
   23bd2:	d25a      	bcs.n	23c8a <z_vprintk+0xfe>
   23bd4:	282d      	cmp	r0, #45	; 0x2d
   23bd6:	f000 8146 	beq.w	23e66 <z_vprintk+0x2da>
   23bda:	2830      	cmp	r0, #48	; 0x30
   23bdc:	d046      	beq.n	23c6c <z_vprintk+0xe0>
   23bde:	2825      	cmp	r0, #37	; 0x25
   23be0:	d108      	bne.n	23bf4 <z_vprintk+0x68>
				out((int)'%', ctx);
   23be2:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   23be4:	47a8      	blx	r5
   23be6:	e07a      	b.n	23cde <z_vprintk+0x152>
			switch (*fmt) {
   23be8:	2858      	cmp	r0, #88	; 0x58
   23bea:	f000 80b4 	beq.w	23d56 <z_vprintk+0x1ca>
   23bee:	2863      	cmp	r0, #99	; 0x63
   23bf0:	f000 812c 	beq.w	23e4c <z_vprintk+0x2c0>
				out((int)'%', ctx);
   23bf4:	4631      	mov	r1, r6
   23bf6:	2025      	movs	r0, #37	; 0x25
   23bf8:	47a8      	blx	r5
				out((int)*fmt, ctx);
   23bfa:	4631      	mov	r1, r6
   23bfc:	f89a 0000 	ldrb.w	r0, [sl]
   23c00:	e7f0      	b.n	23be4 <z_vprintk+0x58>
			switch (*fmt) {
   23c02:	2870      	cmp	r0, #112	; 0x70
   23c04:	f000 809d 	beq.w	23d42 <z_vprintk+0x1b6>
   23c08:	d80d      	bhi.n	23c26 <z_vprintk+0x9a>
   23c0a:	2869      	cmp	r0, #105	; 0x69
   23c0c:	d046      	beq.n	23c9c <z_vprintk+0x110>
   23c0e:	286c      	cmp	r0, #108	; 0x6c
   23c10:	d103      	bne.n	23c1a <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   23c12:	2f6c      	cmp	r7, #108	; 0x6c
   23c14:	d126      	bne.n	23c64 <z_vprintk+0xd8>
					length_mod = 'L';
   23c16:	274c      	movs	r7, #76	; 0x4c
   23c18:	e7d2      	b.n	23bc0 <z_vprintk+0x34>
			switch (*fmt) {
   23c1a:	2868      	cmp	r0, #104	; 0x68
   23c1c:	d1ea      	bne.n	23bf4 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   23c1e:	2f68      	cmp	r7, #104	; 0x68
   23c20:	d120      	bne.n	23c64 <z_vprintk+0xd8>
					length_mod = 'H';
   23c22:	2748      	movs	r7, #72	; 0x48
   23c24:	e7cc      	b.n	23bc0 <z_vprintk+0x34>
			switch (*fmt) {
   23c26:	2875      	cmp	r0, #117	; 0x75
   23c28:	d070      	beq.n	23d0c <z_vprintk+0x180>
   23c2a:	d817      	bhi.n	23c5c <z_vprintk+0xd0>
   23c2c:	2873      	cmp	r0, #115	; 0x73
   23c2e:	d1e1      	bne.n	23bf4 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   23c30:	6822      	ldr	r2, [r4, #0]
   23c32:	f104 0b04 	add.w	fp, r4, #4
   23c36:	4611      	mov	r1, r2
				while (*s) {
   23c38:	460c      	mov	r4, r1
   23c3a:	f814 0b01 	ldrb.w	r0, [r4], #1
   23c3e:	2800      	cmp	r0, #0
   23c40:	f040 80f9 	bne.w	23e36 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   23c44:	f1b8 0f03 	cmp.w	r8, #3
   23c48:	f040 8113 	bne.w	23e72 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   23c4c:	1a8c      	subs	r4, r1, r2
   23c4e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   23c52:	2c00      	cmp	r4, #0
   23c54:	f300 80f5 	bgt.w	23e42 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   23c58:	465c      	mov	r4, fp
   23c5a:	e040      	b.n	23cde <z_vprintk+0x152>
			switch (*fmt) {
   23c5c:	2878      	cmp	r0, #120	; 0x78
   23c5e:	d07a      	beq.n	23d56 <z_vprintk+0x1ca>
   23c60:	287a      	cmp	r0, #122	; 0x7a
   23c62:	d1c7      	bne.n	23bf4 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   23c64:	2f00      	cmp	r7, #0
   23c66:	d1c5      	bne.n	23bf4 <z_vprintk+0x68>
   23c68:	4607      	mov	r7, r0
   23c6a:	e7a9      	b.n	23bc0 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   23c6c:	f1b9 0f00 	cmp.w	r9, #0
   23c70:	da0e      	bge.n	23c90 <z_vprintk+0x104>
   23c72:	f1b8 0f00 	cmp.w	r8, #0
   23c76:	f000 80f9 	beq.w	23e6c <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   23c7a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   23c7e:	f1b8 0f00 	cmp.w	r8, #0
   23c82:	bf08      	it	eq
   23c84:	f04f 0802 	moveq.w	r8, #2
   23c88:	e79a      	b.n	23bc0 <z_vprintk+0x34>
				if (min_width < 0) {
   23c8a:	f1b9 0f00 	cmp.w	r9, #0
   23c8e:	dbf4      	blt.n	23c7a <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   23c90:	220a      	movs	r2, #10
   23c92:	fb02 0909 	mla	r9, r2, r9, r0
   23c96:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   23c9a:	e7f0      	b.n	23c7e <z_vprintk+0xf2>
				if (length_mod == 'z') {
   23c9c:	2f7a      	cmp	r7, #122	; 0x7a
   23c9e:	d103      	bne.n	23ca8 <z_vprintk+0x11c>
					d = va_arg(ap, int);
   23ca0:	f8d4 b000 	ldr.w	fp, [r4]
   23ca4:	3404      	adds	r4, #4
   23ca6:	e01e      	b.n	23ce6 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   23ca8:	2f6c      	cmp	r7, #108	; 0x6c
   23caa:	d0f9      	beq.n	23ca0 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   23cac:	2f4c      	cmp	r7, #76	; 0x4c
   23cae:	d1f7      	bne.n	23ca0 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   23cb0:	f04f 0c00 	mov.w	ip, #0
   23cb4:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   23cb8:	3407      	adds	r4, #7
   23cba:	f024 0307 	bic.w	r3, r4, #7
   23cbe:	f103 0408 	add.w	r4, r3, #8
   23cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   23cc6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   23cca:	f143 0100 	adc.w	r1, r3, #0
   23cce:	458c      	cmp	ip, r1
   23cd0:	bf08      	it	eq
   23cd2:	4583      	cmpeq	fp, r0
   23cd4:	d206      	bcs.n	23ce4 <z_vprintk+0x158>
						print_err(out, ctx);
   23cd6:	4631      	mov	r1, r6
   23cd8:	4628      	mov	r0, r5
   23cda:	f7ff ff49 	bl	23b70 <print_err>
			might_format = 0;
   23cde:	f04f 0b00 	mov.w	fp, #0
				break;
   23ce2:	e76d      	b.n	23bc0 <z_vprintk+0x34>
					d = lld;
   23ce4:	4693      	mov	fp, r2
				if (d < 0) {
   23ce6:	f1bb 0f00 	cmp.w	fp, #0
   23cea:	da06      	bge.n	23cfa <z_vprintk+0x16e>
					out((int)'-', ctx);
   23cec:	4631      	mov	r1, r6
   23cee:	202d      	movs	r0, #45	; 0x2d
   23cf0:	47a8      	blx	r5
					d = -d;
   23cf2:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   23cf6:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   23cfa:	4643      	mov	r3, r8
   23cfc:	465a      	mov	r2, fp
   23cfe:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   23d02:	4631      	mov	r1, r6
   23d04:	4628      	mov	r0, r5
   23d06:	f7e9 fc13 	bl	d530 <_printk_dec_ulong>
   23d0a:	e7e8      	b.n	23cde <z_vprintk+0x152>
				if (length_mod == 'z') {
   23d0c:	2f7a      	cmp	r7, #122	; 0x7a
   23d0e:	d102      	bne.n	23d16 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   23d10:	6822      	ldr	r2, [r4, #0]
   23d12:	3404      	adds	r4, #4
   23d14:	e011      	b.n	23d3a <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   23d16:	2f6c      	cmp	r7, #108	; 0x6c
   23d18:	d0fa      	beq.n	23d10 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   23d1a:	2f4c      	cmp	r7, #76	; 0x4c
   23d1c:	d1f8      	bne.n	23d10 <z_vprintk+0x184>
					if (llu > ~0UL) {
   23d1e:	2100      	movs	r1, #0
   23d20:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   23d24:	3407      	adds	r4, #7
   23d26:	f024 0307 	bic.w	r3, r4, #7
   23d2a:	f103 0408 	add.w	r4, r3, #8
   23d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   23d32:	4299      	cmp	r1, r3
   23d34:	bf08      	it	eq
   23d36:	4290      	cmpeq	r0, r2
   23d38:	d3cd      	bcc.n	23cd6 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   23d3a:	f8cd 9000 	str.w	r9, [sp]
   23d3e:	4643      	mov	r3, r8
   23d40:	e7df      	b.n	23d02 <z_vprintk+0x176>
				  out('0', ctx);
   23d42:	4631      	mov	r1, r6
   23d44:	2030      	movs	r0, #48	; 0x30
   23d46:	47a8      	blx	r5
				  out('x', ctx);
   23d48:	4631      	mov	r1, r6
   23d4a:	2078      	movs	r0, #120	; 0x78
   23d4c:	47a8      	blx	r5
				  min_width = 8;
   23d4e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   23d52:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   23d56:	f89a 2000 	ldrb.w	r2, [sl]
   23d5a:	2a70      	cmp	r2, #112	; 0x70
   23d5c:	d105      	bne.n	23d6a <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   23d5e:	6823      	ldr	r3, [r4, #0]
   23d60:	3404      	adds	r4, #4
   23d62:	9304      	str	r3, [sp, #16]
   23d64:	2300      	movs	r3, #0
   23d66:	9302      	str	r3, [sp, #8]
   23d68:	e00c      	b.n	23d84 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   23d6a:	2f6c      	cmp	r7, #108	; 0x6c
   23d6c:	d0f7      	beq.n	23d5e <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   23d6e:	2f4c      	cmp	r7, #76	; 0x4c
   23d70:	d1f5      	bne.n	23d5e <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   23d72:	3407      	adds	r4, #7
   23d74:	f024 0207 	bic.w	r2, r4, #7
   23d78:	6813      	ldr	r3, [r2, #0]
   23d7a:	f102 0408 	add.w	r4, r2, #8
   23d7e:	9304      	str	r3, [sp, #16]
   23d80:	6853      	ldr	r3, [r2, #4]
   23d82:	9302      	str	r3, [sp, #8]
	int digits = 0;
   23d84:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   23d86:	2310      	movs	r3, #16
	int digits = 0;
   23d88:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   23d8a:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   23d8c:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   23d8e:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   23d90:	9902      	ldr	r1, [sp, #8]
   23d92:	9804      	ldr	r0, [sp, #16]
   23d94:	f1c2 0c20 	rsb	ip, r2, #32
   23d98:	f1a2 0e20 	sub.w	lr, r2, #32
   23d9c:	40d0      	lsrs	r0, r2
   23d9e:	fa01 fc0c 	lsl.w	ip, r1, ip
   23da2:	ea40 000c 	orr.w	r0, r0, ip
   23da6:	fa21 fe0e 	lsr.w	lr, r1, lr
   23daa:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   23dae:	f010 000f 	ands.w	r0, r0, #15
   23db2:	d108      	bne.n	23dc6 <z_vprintk+0x23a>
   23db4:	9905      	ldr	r1, [sp, #20]
   23db6:	b901      	cbnz	r1, 23dba <z_vprintk+0x22e>
   23db8:	bb42      	cbnz	r2, 23e0c <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   23dba:	f04f 0c30 	mov.w	ip, #48	; 0x30
   23dbe:	e008      	b.n	23dd2 <z_vprintk+0x246>
			found_largest_digit = 1;
   23dc0:	f8cd b014 	str.w	fp, [sp, #20]
   23dc4:	e7e3      	b.n	23d8e <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   23dc6:	2809      	cmp	r0, #9
   23dc8:	bf8c      	ite	hi
   23dca:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   23dce:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   23dd2:	4631      	mov	r1, r6
   23dd4:	4460      	add	r0, ip
   23dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   23dda:	47a8      	blx	r5
			digits++;
   23ddc:	9b03      	ldr	r3, [sp, #12]
   23dde:	3301      	adds	r3, #1
   23de0:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   23de2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   23de6:	2a00      	cmp	r2, #0
   23de8:	d1ea      	bne.n	23dc0 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   23dea:	f1b8 0f03 	cmp.w	r8, #3
   23dee:	f47f af76 	bne.w	23cde <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   23df2:	9b03      	ldr	r3, [sp, #12]
   23df4:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   23df8:	f1bb 0f00 	cmp.w	fp, #0
   23dfc:	f77f af6f 	ble.w	23cde <z_vprintk+0x152>
			out(' ', ctx);
   23e00:	4631      	mov	r1, r6
   23e02:	2020      	movs	r0, #32
   23e04:	47a8      	blx	r5
   23e06:	f10b 3bff 	add.w	fp, fp, #4294967295
   23e0a:	e7f5      	b.n	23df8 <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   23e0c:	1e59      	subs	r1, r3, #1
   23e0e:	4599      	cmp	r9, r3
   23e10:	9106      	str	r1, [sp, #24]
   23e12:	db07      	blt.n	23e24 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   23e14:	f1b8 0f01 	cmp.w	r8, #1
   23e18:	d106      	bne.n	23e28 <z_vprintk+0x29c>
				out('0', ctx);
   23e1a:	4631      	mov	r1, r6
   23e1c:	2030      	movs	r0, #48	; 0x30
   23e1e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   23e20:	47a8      	blx	r5
   23e22:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   23e24:	9b06      	ldr	r3, [sp, #24]
   23e26:	e7b2      	b.n	23d8e <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   23e28:	f1b8 0f02 	cmp.w	r8, #2
   23e2c:	d1fa      	bne.n	23e24 <z_vprintk+0x298>
   23e2e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   23e30:	4631      	mov	r1, r6
   23e32:	2020      	movs	r0, #32
   23e34:	e7f4      	b.n	23e20 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   23e36:	4631      	mov	r1, r6
   23e38:	9202      	str	r2, [sp, #8]
   23e3a:	47a8      	blx	r5
   23e3c:	4621      	mov	r1, r4
   23e3e:	9a02      	ldr	r2, [sp, #8]
   23e40:	e6fa      	b.n	23c38 <z_vprintk+0xac>
						out(' ', ctx);
   23e42:	4631      	mov	r1, r6
   23e44:	2020      	movs	r0, #32
   23e46:	47a8      	blx	r5
   23e48:	3c01      	subs	r4, #1
   23e4a:	e702      	b.n	23c52 <z_vprintk+0xc6>
				out(c, ctx);
   23e4c:	4631      	mov	r1, r6
   23e4e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   23e50:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   23e54:	47a8      	blx	r5
   23e56:	e6ff      	b.n	23c58 <z_vprintk+0xcc>
				length_mod = 0;
   23e58:	465f      	mov	r7, fp
				padding = PAD_NONE;
   23e5a:	46d8      	mov	r8, fp
				min_width = -1;
   23e5c:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   23e60:	f04f 0b01 	mov.w	fp, #1
   23e64:	e6ac      	b.n	23bc0 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   23e66:	f04f 0803 	mov.w	r8, #3
   23e6a:	e6a9      	b.n	23bc0 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   23e6c:	f04f 0801 	mov.w	r8, #1
   23e70:	e6a6      	b.n	23bc0 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   23e72:	465c      	mov	r4, fp
			might_format = 0;
   23e74:	4683      	mov	fp, r0
   23e76:	e6a3      	b.n	23bc0 <z_vprintk+0x34>

00023e78 <printk>:
{
   23e78:	b40f      	push	{r0, r1, r2, r3}
   23e7a:	b507      	push	{r0, r1, r2, lr}
   23e7c:	a904      	add	r1, sp, #16
   23e7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23e82:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   23e84:	f7e9 fba6 	bl	d5d4 <vprintk>
}
   23e88:	b003      	add	sp, #12
   23e8a:	f85d eb04 	ldr.w	lr, [sp], #4
   23e8e:	b004      	add	sp, #16
   23e90:	4770      	bx	lr

00023e92 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   23e92:	4040      	eors	r0, r0
   23e94:	f380 8811 	msr	BASEPRI, r0
   23e98:	f04f 0004 	mov.w	r0, #4
   23e9c:	df02      	svc	2

00023e9e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   23e9e:	4770      	bx	lr

00023ea0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   23ea0:	f7fb bb82 	b.w	1f5a8 <SystemInit>

00023ea4 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   23ea4:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   23ea6:	7a5a      	ldrb	r2, [r3, #9]
   23ea8:	b932      	cbnz	r2, 23eb8 <get_status+0x14>
	if (data->ref > 0) {
   23eaa:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   23eae:	2800      	cmp	r0, #0
   23eb0:	bfcc      	ite	gt
   23eb2:	2000      	movgt	r0, #0
   23eb4:	2001      	movle	r0, #1
   23eb6:	4770      	bx	lr
   23eb8:	2002      	movs	r0, #2
}
   23eba:	4770      	bx	lr

00023ebc <clock_stop>:
	const struct nrf_clock_control_config *config =
   23ebc:	6802      	ldr	r2, [r0, #0]
{
   23ebe:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   23ec0:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   23ec2:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   23ec4:	f04f 0320 	mov.w	r3, #32
   23ec8:	f3ef 8511 	mrs	r5, BASEPRI
   23ecc:	f383 8811 	msr	BASEPRI, r3
   23ed0:	f3bf 8f6f 	isb	sy
	data->ref--;
   23ed4:	7a23      	ldrb	r3, [r4, #8]
   23ed6:	3b01      	subs	r3, #1
   23ed8:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   23eda:	2b00      	cmp	r3, #0
	data->ref--;
   23edc:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   23ede:	d11c      	bne.n	23f1a <clock_stop+0x5e>
	list->tail = NULL;
   23ee0:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   23ee4:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   23ee6:	b9a3      	cbnz	r3, 23f12 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   23ee8:	2201      	movs	r2, #1
   23eea:	7af3      	ldrb	r3, [r6, #11]
   23eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ef0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23ef4:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   23ef6:	2200      	movs	r2, #0
   23ef8:	8933      	ldrh	r3, [r6, #8]
   23efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23efe:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23f02:	601a      	str	r2, [r3, #0]
		data->started = false;
   23f04:	2000      	movs	r0, #0
   23f06:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   23f08:	f385 8811 	msr	BASEPRI, r5
   23f0c:	f3bf 8f6f 	isb	sy
}
   23f10:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   23f12:	4798      	blx	r3
   23f14:	2800      	cmp	r0, #0
   23f16:	d1e7      	bne.n	23ee8 <clock_stop+0x2c>
   23f18:	e7f4      	b.n	23f04 <clock_stop+0x48>
   23f1a:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   23f1e:	bfbc      	itt	lt
   23f20:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   23f22:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   23f26:	e7ef      	b.n	23f08 <clock_stop+0x4c>

00023f28 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   23f28:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   23f2a:	2000      	movs	r0, #0
	list->tail = NULL;
   23f2c:	e9c3 0000 	strd	r0, r0, [r3]
}
   23f30:	4770      	bx	lr

00023f32 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   23f32:	2200      	movs	r2, #0
   23f34:	f7e9 bbe8 	b.w	d708 <clock_async_start>

00023f38 <clkstarted_handle>:
{
   23f38:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   23f3a:	6884      	ldr	r4, [r0, #8]
{
   23f3c:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   23f3e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   23f40:	b12b      	cbz	r3, 23f4e <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23f42:	6861      	ldr	r1, [r4, #4]
	return node->next;
   23f44:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23f46:	428b      	cmp	r3, r1
	list->head = node;
   23f48:	6022      	str	r2, [r4, #0]
	list->tail = node;
   23f4a:	bf08      	it	eq
   23f4c:	6062      	streq	r2, [r4, #4]
	data->started = true;
   23f4e:	2201      	movs	r2, #1
   23f50:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   23f52:	b903      	cbnz	r3, 23f56 <clkstarted_handle+0x1e>
}
   23f54:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   23f56:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   23f5a:	4628      	mov	r0, r5
   23f5c:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   23f5e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   23f60:	2b00      	cmp	r3, #0
   23f62:	d0f7      	beq.n	23f54 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23f64:	6861      	ldr	r1, [r4, #4]
	return node->next;
   23f66:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23f68:	428b      	cmp	r3, r1
	list->head = node;
   23f6a:	6022      	str	r2, [r4, #0]
	list->tail = node;
   23f6c:	bf08      	it	eq
   23f6e:	6062      	streq	r2, [r4, #4]
   23f70:	e7ef      	b.n	23f52 <clkstarted_handle+0x1a>

00023f72 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23f72:	4770      	bx	lr

00023f74 <z_irq_spurious>:
	z_arm_reserved();
   23f74:	f7e9 be4c 	b.w	dc10 <z_arm_bus_fault>

00023f78 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   23f78:	4770      	bx	lr

00023f7a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   23f7a:	f7fc b8d1 	b.w	20120 <z_fatal_error>

00023f7e <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   23f7e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   23f80:	6800      	ldr	r0, [r0, #0]
   23f82:	f7fc b8cd 	b.w	20120 <z_fatal_error>

00023f86 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   23f86:	b508      	push	{r3, lr}
	handler();
   23f88:	f7e9 fe54 	bl	dc34 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   23f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   23f90:	f7e9 bdbc 	b.w	db0c <z_arm_exc_exit>

00023f94 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   23f94:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   23f96:	2100      	movs	r1, #0
   23f98:	a801      	add	r0, sp, #4
   23f9a:	f7ea fa7b 	bl	e494 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   23f9e:	b003      	add	sp, #12
   23fa0:	f85d fb04 	ldr.w	pc, [sp], #4

00023fa4 <mpu_configure_region>:
{
   23fa4:	b530      	push	{r4, r5, lr}
   23fa6:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   23fa8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23fac:	890d      	ldrh	r5, [r1, #8]
	region_conf.base = new_region->start;
   23fae:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   23fb0:	684c      	ldr	r4, [r1, #4]
	p_attr->mair_idx = attr->mair_idx;
   23fb2:	8949      	ldrh	r1, [r1, #10]
	p_attr->rbar = attr->rbar &
   23fb4:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   23fb8:	f361 1247 	bfi	r2, r1, #5, #3
	region_conf.base = new_region->start;
   23fbc:	9300      	str	r3, [sp, #0]
   23fbe:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23fc2:	f023 031f 	bic.w	r3, r3, #31
   23fc6:	1e62      	subs	r2, r4, #1
   23fc8:	4413      	add	r3, r2
   23fca:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   23fce:	280f      	cmp	r0, #15
   23fd0:	9303      	str	r3, [sp, #12]
   23fd2:	4604      	mov	r4, r0
   23fd4:	d805      	bhi.n	23fe2 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   23fd6:	4669      	mov	r1, sp
   23fd8:	f7ea f8b0 	bl	e13c <region_init>
}
   23fdc:	4620      	mov	r0, r4
   23fde:	b005      	add	sp, #20
   23fe0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   23fe2:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   23fe6:	e7f9      	b.n	23fdc <mpu_configure_region+0x38>

00023fe8 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   23fe8:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   23fea:	7802      	ldrb	r2, [r0, #0]
   23fec:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   23fee:	2a20      	cmp	r2, #32
   23ff0:	f100 0001 	add.w	r0, r0, #1
   23ff4:	d0f9      	beq.n	23fea <atoi+0x2>
   23ff6:	f1a2 0109 	sub.w	r1, r2, #9
   23ffa:	2904      	cmp	r1, #4
   23ffc:	d9f5      	bls.n	23fea <atoi+0x2>
		s++;
	}
	switch (*s) {
   23ffe:	2a2b      	cmp	r2, #43	; 0x2b
   24000:	d008      	beq.n	24014 <atoi+0x2c>
	int neg = 0;
   24002:	2a2d      	cmp	r2, #45	; 0x2d
   24004:	bf0a      	itet	eq
   24006:	2101      	moveq	r1, #1
   24008:	2100      	movne	r1, #0
   2400a:	4603      	moveq	r3, r0
   2400c:	3b01      	subs	r3, #1
   2400e:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   24010:	240a      	movs	r4, #10
   24012:	e004      	b.n	2401e <atoi+0x36>
		s++;
   24014:	4603      	mov	r3, r0
	int neg = 0;
   24016:	2100      	movs	r1, #0
   24018:	e7f8      	b.n	2400c <atoi+0x24>
		n = 10*n - (*s++ - '0');
   2401a:	4360      	muls	r0, r4
   2401c:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   2401e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24022:	3a30      	subs	r2, #48	; 0x30
   24024:	2a09      	cmp	r2, #9
   24026:	d9f8      	bls.n	2401a <atoi+0x32>
	}
	return neg ? n : -n;
   24028:	b901      	cbnz	r1, 2402c <atoi+0x44>
   2402a:	4240      	negs	r0, r0
}
   2402c:	bd10      	pop	{r4, pc}

0002402e <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2402e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24032:	4684      	mov	ip, r0
   24034:	460f      	mov	r7, r1
	register const char *s = nptr;
   24036:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   24038:	462c      	mov	r4, r5
   2403a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2403e:	2b20      	cmp	r3, #32
   24040:	d036      	beq.n	240b0 <strtol+0x82>
   24042:	f1a3 0109 	sub.w	r1, r3, #9
   24046:	2904      	cmp	r1, #4
   24048:	d932      	bls.n	240b0 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   2404a:	2b2d      	cmp	r3, #45	; 0x2d
   2404c:	d132      	bne.n	240b4 <strtol+0x86>
		neg = 1;
   2404e:	2101      	movs	r1, #1
		c = *s++;
   24050:	786b      	ldrb	r3, [r5, #1]
   24052:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24054:	2a00      	cmp	r2, #0
   24056:	d05c      	beq.n	24112 <strtol+0xe4>
   24058:	2a10      	cmp	r2, #16
   2405a:	d109      	bne.n	24070 <strtol+0x42>
   2405c:	2b30      	cmp	r3, #48	; 0x30
   2405e:	d107      	bne.n	24070 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24060:	7823      	ldrb	r3, [r4, #0]
   24062:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24066:	2b58      	cmp	r3, #88	; 0x58
   24068:	d14e      	bne.n	24108 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   2406a:	2210      	movs	r2, #16
		c = s[1];
   2406c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   2406e:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   24070:	2900      	cmp	r1, #0
   24072:	bf0c      	ite	eq
   24074:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
   24078:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2407c:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   2407e:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   24082:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   24084:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24088:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2408c:	2d09      	cmp	r5, #9
   2408e:	d817      	bhi.n	240c0 <strtol+0x92>
			c -= '0';
   24090:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24092:	429a      	cmp	r2, r3
   24094:	dd24      	ble.n	240e0 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24096:	1c75      	adds	r5, r6, #1
   24098:	d007      	beq.n	240aa <strtol+0x7c>
   2409a:	4570      	cmp	r0, lr
   2409c:	d81d      	bhi.n	240da <strtol+0xac>
   2409e:	d101      	bne.n	240a4 <strtol+0x76>
   240a0:	454b      	cmp	r3, r9
   240a2:	dc1a      	bgt.n	240da <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   240a4:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   240a6:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   240aa:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   240ae:	e7eb      	b.n	24088 <strtol+0x5a>
{
   240b0:	4625      	mov	r5, r4
   240b2:	e7c1      	b.n	24038 <strtol+0xa>
	} else if (c == '+') {
   240b4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   240b6:	bf04      	itt	eq
   240b8:	1cac      	addeq	r4, r5, #2
   240ba:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   240bc:	2100      	movs	r1, #0
   240be:	e7c9      	b.n	24054 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   240c0:	f043 0520 	orr.w	r5, r3, #32
   240c4:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   240c6:	2d19      	cmp	r5, #25
   240c8:	d80a      	bhi.n	240e0 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   240ca:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   240ce:	2d19      	cmp	r5, #25
   240d0:	bf8c      	ite	hi
   240d2:	2557      	movhi	r5, #87	; 0x57
   240d4:	2537      	movls	r5, #55	; 0x37
   240d6:	1b5b      	subs	r3, r3, r5
   240d8:	e7db      	b.n	24092 <strtol+0x64>
			any = -1;
   240da:	f04f 36ff 	mov.w	r6, #4294967295
   240de:	e7e4      	b.n	240aa <strtol+0x7c>
		}
	}

	if (any < 0) {
   240e0:	1c73      	adds	r3, r6, #1
   240e2:	d107      	bne.n	240f4 <strtol+0xc6>
   240e4:	f7fc f816 	bl	20114 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   240e8:	2326      	movs	r3, #38	; 0x26
   240ea:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   240ec:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   240ee:	b937      	cbnz	r7, 240fe <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   240f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   240f4:	b101      	cbz	r1, 240f8 <strtol+0xca>
		acc = -acc;
   240f6:	4240      	negs	r0, r0
	if (endptr != NULL) {
   240f8:	2f00      	cmp	r7, #0
   240fa:	d0f9      	beq.n	240f0 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   240fc:	b10e      	cbz	r6, 24102 <strtol+0xd4>
   240fe:	f104 3cff 	add.w	ip, r4, #4294967295
   24102:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   24106:	e7f3      	b.n	240f0 <strtol+0xc2>
	if (base == 0) {
   24108:	2330      	movs	r3, #48	; 0x30
   2410a:	2a00      	cmp	r2, #0
   2410c:	d1b0      	bne.n	24070 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2410e:	2208      	movs	r2, #8
   24110:	e7ae      	b.n	24070 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   24112:	2b30      	cmp	r3, #48	; 0x30
   24114:	d0a4      	beq.n	24060 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   24116:	220a      	movs	r2, #10
   24118:	e7aa      	b.n	24070 <strtol+0x42>

0002411a <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   2411a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   2411e:	780f      	ldrb	r7, [r1, #0]
{
   24120:	4605      	mov	r5, r0
	if (c != 0) {
   24122:	b187      	cbz	r7, 24146 <strstr+0x2c>
	c = *find++;
   24124:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   24126:	4620      	mov	r0, r4
   24128:	f000 f822 	bl	24170 <strlen>
   2412c:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   2412e:	462e      	mov	r6, r5
   24130:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   24134:	b163      	cbz	r3, 24150 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   24136:	429f      	cmp	r7, r3
   24138:	d108      	bne.n	2414c <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   2413a:	4642      	mov	r2, r8
   2413c:	4621      	mov	r1, r4
   2413e:	4630      	mov	r0, r6
   24140:	f000 f82b 	bl	2419a <strncmp>
   24144:	b910      	cbnz	r0, 2414c <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   24146:	4628      	mov	r0, r5
   24148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   2414c:	4635      	mov	r5, r6
   2414e:	e7ee      	b.n	2412e <strstr+0x14>
					return NULL;
   24150:	461d      	mov	r5, r3
   24152:	e7f8      	b.n	24146 <strstr+0x2c>

00024154 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   24154:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   24156:	7802      	ldrb	r2, [r0, #0]
   24158:	4603      	mov	r3, r0
   2415a:	428a      	cmp	r2, r1
   2415c:	f100 0001 	add.w	r0, r0, #1
   24160:	d004      	beq.n	2416c <strchr+0x18>
   24162:	2a00      	cmp	r2, #0
   24164:	d1f7      	bne.n	24156 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   24166:	2900      	cmp	r1, #0
   24168:	bf18      	it	ne
   2416a:	2300      	movne	r3, #0
}
   2416c:	4618      	mov	r0, r3
   2416e:	4770      	bx	lr

00024170 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24170:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
   24172:	4603      	mov	r3, r0
   24174:	1a98      	subs	r0, r3, r2
   24176:	f813 1b01 	ldrb.w	r1, [r3], #1
   2417a:	2900      	cmp	r1, #0
   2417c:	d1fa      	bne.n	24174 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
   2417e:	4770      	bx	lr

00024180 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   24180:	3801      	subs	r0, #1
   24182:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   24184:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24188:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2418c:	4293      	cmp	r3, r2
   2418e:	d102      	bne.n	24196 <strcmp+0x16>
   24190:	2b00      	cmp	r3, #0
   24192:	d1f7      	bne.n	24184 <strcmp+0x4>
   24194:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24196:	1a98      	subs	r0, r3, r2
   24198:	4770      	bx	lr

0002419a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2419a:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2419c:	2400      	movs	r4, #0
   2419e:	42a2      	cmp	r2, r4
   241a0:	d008      	beq.n	241b4 <strncmp+0x1a>
   241a2:	5d03      	ldrb	r3, [r0, r4]
   241a4:	5d0d      	ldrb	r5, [r1, r4]
   241a6:	42ab      	cmp	r3, r5
   241a8:	d102      	bne.n	241b0 <strncmp+0x16>
   241aa:	3401      	adds	r4, #1
   241ac:	2b00      	cmp	r3, #0
   241ae:	d1f6      	bne.n	2419e <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   241b0:	1b58      	subs	r0, r3, r5
   241b2:	e000      	b.n	241b6 <strncmp+0x1c>
   241b4:	2000      	movs	r0, #0
}
   241b6:	bd30      	pop	{r4, r5, pc}

000241b8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   241b8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   241ba:	b15a      	cbz	r2, 241d4 <memcmp+0x1c>
   241bc:	3901      	subs	r1, #1
   241be:	1884      	adds	r4, r0, r2
   241c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   241c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   241c8:	42a0      	cmp	r0, r4
   241ca:	d001      	beq.n	241d0 <memcmp+0x18>
   241cc:	429a      	cmp	r2, r3
   241ce:	d0f7      	beq.n	241c0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   241d0:	1ad0      	subs	r0, r2, r3
}
   241d2:	bd10      	pop	{r4, pc}
		return 0;
   241d4:	4610      	mov	r0, r2
   241d6:	e7fc      	b.n	241d2 <memcmp+0x1a>

000241d8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   241d8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   241da:	ea81 0400 	eor.w	r4, r1, r0
   241de:	07a5      	lsls	r5, r4, #30
   241e0:	4603      	mov	r3, r0
   241e2:	d00b      	beq.n	241fc <memcpy+0x24>
   241e4:	3b01      	subs	r3, #1
   241e6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   241e8:	4291      	cmp	r1, r2
   241ea:	d11d      	bne.n	24228 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   241ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   241ee:	2a00      	cmp	r2, #0
   241f0:	d0fc      	beq.n	241ec <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   241f2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   241f6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   241f8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   241fc:	079c      	lsls	r4, r3, #30
   241fe:	d1f6      	bne.n	241ee <memcpy+0x16>
   24200:	460c      	mov	r4, r1
   24202:	1f1d      	subs	r5, r3, #4
   24204:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   24206:	1b3e      	subs	r6, r7, r4
   24208:	2e03      	cmp	r6, #3
   2420a:	d808      	bhi.n	2421e <memcpy+0x46>
   2420c:	f06f 0503 	mvn.w	r5, #3
   24210:	0894      	lsrs	r4, r2, #2
   24212:	fb05 2204 	mla	r2, r5, r4, r2
   24216:	00a4      	lsls	r4, r4, #2
   24218:	4423      	add	r3, r4
   2421a:	4421      	add	r1, r4
   2421c:	e7e2      	b.n	241e4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   2421e:	f854 6b04 	ldr.w	r6, [r4], #4
   24222:	f845 6f04 	str.w	r6, [r5, #4]!
   24226:	e7ee      	b.n	24206 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   24228:	f811 4b01 	ldrb.w	r4, [r1], #1
   2422c:	f803 4f01 	strb.w	r4, [r3, #1]!
   24230:	e7da      	b.n	241e8 <memcpy+0x10>

00024232 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   24232:	4603      	mov	r3, r0
{
   24234:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   24236:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24238:	079c      	lsls	r4, r3, #30
   2423a:	d10f      	bne.n	2425c <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2423c:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   2423e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   24242:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   24246:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
   24248:	1b7e      	subs	r6, r7, r5
   2424a:	2e03      	cmp	r6, #3
   2424c:	d80c      	bhi.n	24268 <memset+0x36>
   2424e:	0894      	lsrs	r4, r2, #2
   24250:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   24254:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   24256:	429c      	cmp	r4, r3
   24258:	d109      	bne.n	2426e <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   2425c:	2a00      	cmp	r2, #0
   2425e:	d0fc      	beq.n	2425a <memset+0x28>
		*(d_byte++) = c_byte;
   24260:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24264:	3a01      	subs	r2, #1
   24266:	e7e7      	b.n	24238 <memset+0x6>
		*(d_word++) = c_word;
   24268:	f845 4b04 	str.w	r4, [r5], #4
   2426c:	e7ec      	b.n	24248 <memset+0x16>
		*(d_byte++) = c_byte;
   2426e:	f804 1b01 	strb.w	r1, [r4], #1
   24272:	e7f0      	b.n	24256 <memset+0x24>

00024274 <_to_x>:
{
   24274:	4603      	mov	r3, r0
   24276:	b570      	push	{r4, r5, r6, lr}
		unsigned int d = n % base;
   24278:	fbb1 f6f2 	udiv	r6, r1, r2
   2427c:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24280:	2909      	cmp	r1, #9
   24282:	bf8c      	ite	hi
   24284:	2527      	movhi	r5, #39	; 0x27
   24286:	2500      	movls	r5, #0
   24288:	461c      	mov	r4, r3
   2428a:	3130      	adds	r1, #48	; 0x30
   2428c:	4429      	add	r1, r5
   2428e:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
   24292:	4631      	mov	r1, r6
   24294:	b92e      	cbnz	r6, 242a2 <_to_x+0x2e>
	*buf = 0;
   24296:	705e      	strb	r6, [r3, #1]
	len = buf - start;
   24298:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   2429a:	4283      	cmp	r3, r0
   2429c:	d803      	bhi.n	242a6 <_to_x+0x32>
}
   2429e:	4620      	mov	r0, r4
   242a0:	bd70      	pop	{r4, r5, r6, pc}
   242a2:	4623      	mov	r3, r4
   242a4:	e7e8      	b.n	24278 <_to_x+0x4>
		char tmp = *buf;
   242a6:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   242a8:	7801      	ldrb	r1, [r0, #0]
   242aa:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   242ae:	f800 2b01 	strb.w	r2, [r0], #1
   242b2:	e7f2      	b.n	2429a <_to_x+0x26>

000242b4 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   242b4:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   242b8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
   242bc:	ea5f 0c53 	movs.w	ip, r3, lsr #1
   242c0:	ea4f 0b32 	mov.w	fp, r2, rrx
   242c4:	2500      	movs	r5, #0
   242c6:	f002 0401 	and.w	r4, r2, #1
   242ca:	eb1b 0204 	adds.w	r2, fp, r4
   242ce:	eb4c 0305 	adc.w	r3, ip, r5
   242d2:	e9c0 2300 	strd	r2, r3, [r0]
}
   242d6:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

000242da <_ldiv5>:
		q = (uint64_t)(hi / 5U) << shifts[i];
   242da:	2105      	movs	r1, #5
	uint64_t rem = *v, quot = 0U, q;
   242dc:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   242e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rem += 2U;
   242e4:	f112 0802 	adds.w	r8, r2, #2
   242e8:	f143 0900 	adc.w	r9, r3, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   242ec:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5U;
   242f0:	2600      	movs	r6, #0
   242f2:	fb01 f705 	mul.w	r7, r1, r5
   242f6:	ebb8 0806 	subs.w	r8, r8, r6
   242fa:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
   242fe:	ea4f 06d8 	mov.w	r6, r8, lsr #3
   24302:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   24306:	fbb6 fcf1 	udiv	ip, r6, r1
   2430a:	2400      	movs	r4, #0
		rem -= q * 5U;
   2430c:	46c2      	mov	sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   2430e:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		rem -= q * 5U;
   24312:	fba6 8901 	umull	r8, r9, r6, r1
		quot += q;
   24316:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5U) << shifts[i];
   24318:	ea4f 775c 	mov.w	r7, ip, lsr #29
		quot += q;
   2431c:	eb45 0307 	adc.w	r3, r5, r7
   24320:	4614      	mov	r4, r2
		rem -= q * 5U;
   24322:	ebba 0208 	subs.w	r2, sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   24326:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
   2432a:	461d      	mov	r5, r3
   2432c:	18a4      	adds	r4, r4, r2
   2432e:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   24332:	e9c0 4500 	strd	r4, r5, [r0]
}
   24336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002433a <_get_digit>:
	if (*digit_count > 0) {
   2433a:	680b      	ldr	r3, [r1, #0]
{
   2433c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
   24340:	2b00      	cmp	r3, #0
   24342:	dd13      	ble.n	2436c <_get_digit+0x32>
		*digit_count -= 1;
   24344:	3b01      	subs	r3, #1
   24346:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   24348:	210a      	movs	r1, #10
   2434a:	6802      	ldr	r2, [r0, #0]
   2434c:	6844      	ldr	r4, [r0, #4]
   2434e:	fba2 bc01 	umull	fp, ip, r2, r1
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24352:	465a      	mov	r2, fp
		*fr = *fr * 10U;
   24354:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24358:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
   2435c:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   24360:	ea4f 711c 	mov.w	r1, ip, lsr #28
   24364:	3130      	adds	r1, #48	; 0x30
}
   24366:	4608      	mov	r0, r1
   24368:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
   2436c:	2130      	movs	r1, #48	; 0x30
   2436e:	e7fa      	b.n	24366 <_get_digit+0x2c>

00024370 <_stdout_hook_default>:
}
   24370:	f04f 30ff 	mov.w	r0, #4294967295
   24374:	4770      	bx	lr

00024376 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24376:	684b      	ldr	r3, [r1, #4]
   24378:	2b01      	cmp	r3, #1
   2437a:	dd07      	ble.n	2438c <sprintf_out+0x16>
		*(p->ptr) = c;
   2437c:	680b      	ldr	r3, [r1, #0]
   2437e:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24380:	680b      	ldr	r3, [r1, #0]
   24382:	3301      	adds	r3, #1
   24384:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24386:	684b      	ldr	r3, [r1, #4]
   24388:	3b01      	subs	r3, #1
   2438a:	604b      	str	r3, [r1, #4]
}
   2438c:	2000      	movs	r0, #0
   2438e:	4770      	bx	lr

00024390 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24390:	b508      	push	{r3, lr}
	net_if_init();
   24392:	f7ea ff55 	bl	f240 <net_if_init>
	net_if_post_init();
   24396:	f7ea ff6b 	bl	f270 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2439a:	2000      	movs	r0, #0
   2439c:	bd08      	pop	{r3, pc}

0002439e <l2_flags_get>:
	return iface->if_dev->l2;
   2439e:	6803      	ldr	r3, [r0, #0]
   243a0:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   243a2:	b113      	cbz	r3, 243aa <l2_flags_get+0xc>
   243a4:	68db      	ldr	r3, [r3, #12]
   243a6:	b103      	cbz	r3, 243aa <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   243a8:	4718      	bx	r3
}
   243aa:	2000      	movs	r0, #0
   243ac:	4770      	bx	lr

000243ae <gpio_nrfx_write>:
{
   243ae:	b510      	push	{r4, lr}
	return port->config->config_info;
   243b0:	6804      	ldr	r4, [r0, #0]
   243b2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   243b4:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   243b6:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   243b8:	6824      	ldr	r4, [r4, #0]
   243ba:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   243bc:	d103      	bne.n	243c6 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   243be:	4058      	eors	r0, r3
    p_reg->OUT = value;
   243c0:	6060      	str	r0, [r4, #4]
}
   243c2:	2000      	movs	r0, #0
   243c4:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   243c6:	3300      	adds	r3, #0
   243c8:	f04f 0101 	mov.w	r1, #1
   243cc:	bf18      	it	ne
   243ce:	2301      	movne	r3, #1
   243d0:	40d0      	lsrs	r0, r2
   243d2:	f000 0001 	and.w	r0, r0, #1
   243d6:	4091      	lsls	r1, r2
   243d8:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   243da:	bf14      	ite	ne
   243dc:	60a1      	strne	r1, [r4, #8]
    p_reg->OUTCLR = clr_mask;
   243de:	60e1      	streq	r1, [r4, #12]
   243e0:	e7ef      	b.n	243c2 <gpio_nrfx_write+0x14>

000243e2 <gpio_nrfx_read>:
{
   243e2:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   243e4:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   243e6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   243e8:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   243ea:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   243ec:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   243ee:	2901      	cmp	r1, #1
    return p_reg->DIR;
   243f0:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   243f2:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   243f4:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   243f6:	ea80 0004 	eor.w	r0, r0, r4
   243fa:	ea84 0405 	eor.w	r4, r4, r5
   243fe:	ea04 0406 	and.w	r4, r4, r6
   24402:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   24406:	bf1c      	itt	ne
   24408:	40d0      	lsrne	r0, r2
   2440a:	f000 0001 	andne.w	r0, r0, #1
   2440e:	6018      	str	r0, [r3, #0]
}
   24410:	2000      	movs	r0, #0
   24412:	bd70      	pop	{r4, r5, r6, pc}

00024414 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24414:	2901      	cmp	r1, #1
{
   24416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2441a:	bf18      	it	ne
   2441c:	b2d4      	uxtbne	r4, r2
{
   2441e:	4606      	mov	r6, r0
		to_pin   = pin;
   24420:	bf12      	itee	ne
   24422:	4625      	movne	r5, r4
		to_pin   = 31U;
   24424:	251f      	moveq	r5, #31
		from_pin = 0U;
   24426:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24428:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2442c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2442e:	42ac      	cmp	r4, r5
   24430:	d902      	bls.n	24438 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   24432:	2000      	movs	r0, #0
}
   24434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24438:	68fb      	ldr	r3, [r7, #12]
   2443a:	fa08 f204 	lsl.w	r2, r8, r4
   2443e:	ea23 0302 	bic.w	r3, r3, r2
   24442:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24444:	4621      	mov	r1, r4
   24446:	4630      	mov	r0, r6
   24448:	f7ea ffb0 	bl	f3ac <gpiote_pin_int_cfg>
		if (res != 0) {
   2444c:	2800      	cmp	r0, #0
   2444e:	d1f1      	bne.n	24434 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24450:	3401      	adds	r4, #1
   24452:	b2e4      	uxtb	r4, r4
   24454:	e7eb      	b.n	2442e <gpio_nrfx_pin_disable_callback+0x1a>

00024456 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24456:	2901      	cmp	r1, #1
{
   24458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2445c:	bf18      	it	ne
   2445e:	b2d4      	uxtbne	r4, r2
{
   24460:	4606      	mov	r6, r0
		to_pin   = pin;
   24462:	bf12      	itee	ne
   24464:	4625      	movne	r5, r4
		to_pin   = 31U;
   24466:	251f      	moveq	r5, #31
		from_pin = 0U;
   24468:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2446a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2446e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24470:	42ac      	cmp	r4, r5
   24472:	d902      	bls.n	2447a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   24474:	2000      	movs	r0, #0
}
   24476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2447a:	68fb      	ldr	r3, [r7, #12]
   2447c:	fa08 f204 	lsl.w	r2, r8, r4
   24480:	4313      	orrs	r3, r2
   24482:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24484:	4621      	mov	r1, r4
   24486:	4630      	mov	r0, r6
   24488:	f7ea ff90 	bl	f3ac <gpiote_pin_int_cfg>
		if (res != 0) {
   2448c:	2800      	cmp	r0, #0
   2448e:	d1f2      	bne.n	24476 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24490:	3401      	adds	r4, #1
   24492:	b2e4      	uxtb	r4, r4
   24494:	e7ec      	b.n	24470 <gpio_nrfx_pin_enable_callback+0x1a>

00024496 <i2c_nrfx_twim_configure>:
	return dev->config->config_info;
   24496:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
   24498:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
   2449a:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   2449c:	d405      	bmi.n	244aa <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   2449e:	f3c1 0242 	ubfx	r2, r1, #1, #3
   244a2:	2a01      	cmp	r2, #1
   244a4:	d004      	beq.n	244b0 <i2c_nrfx_twim_configure+0x1a>
   244a6:	2a02      	cmp	r2, #2
   244a8:	d00b      	beq.n	244c2 <i2c_nrfx_twim_configure+0x2c>
		return -EINVAL;
   244aa:	f06f 0015 	mvn.w	r0, #21
}
   244ae:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   244b0:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   244b4:	681b      	ldr	r3, [r3, #0]
   244b6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   244ba:	6883      	ldr	r3, [r0, #8]
	return 0;
   244bc:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   244be:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   244c0:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   244c2:	681b      	ldr	r3, [r3, #0]
   244c4:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   244c8:	e7f5      	b.n	244b6 <i2c_nrfx_twim_configure+0x20>

000244ca <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
   244ca:	b410      	push	{r4}
   244cc:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   244ce:	6842      	ldr	r2, [r0, #4]
   244d0:	6854      	ldr	r4, [r2, #4]
   244d2:	460a      	mov	r2, r1
   244d4:	46a4      	mov	ip, r4
   244d6:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
   244d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   244dc:	4760      	bx	ip

000244de <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   244de:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   244e0:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   244e2:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   244e4:	b324      	cbz	r4, 24530 <_spi_context_cs_control.isra.7+0x52>
   244e6:	68a3      	ldr	r3, [r4, #8]
   244e8:	b313      	cbz	r3, 24530 <_spi_context_cs_control.isra.7+0x52>
   244ea:	6818      	ldr	r0, [r3, #0]
   244ec:	b300      	cbz	r0, 24530 <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   244ee:	b161      	cbz	r1, 2450a <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   244f0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   244f4:	6859      	ldr	r1, [r3, #4]
   244f6:	0fd2      	lsrs	r2, r2, #31
   244f8:	f7ff ffe7 	bl	244ca <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   244fc:	682b      	ldr	r3, [r5, #0]
   244fe:	689b      	ldr	r3, [r3, #8]
   24500:	6898      	ldr	r0, [r3, #8]
}
   24502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   24506:	f000 be1c 	b.w	25142 <z_impl_k_busy_wait>
			if (!force_off &&
   2450a:	b912      	cbnz	r2, 24512 <_spi_context_cs_control.isra.7+0x34>
   2450c:	88a2      	ldrh	r2, [r4, #4]
   2450e:	0492      	lsls	r2, r2, #18
   24510:	d40e      	bmi.n	24530 <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
   24512:	6898      	ldr	r0, [r3, #8]
   24514:	f000 fe15 	bl	25142 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   24518:	682a      	ldr	r2, [r5, #0]
   2451a:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   2451c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   24520:	e9d3 0100 	ldrd	r0, r1, [r3]
   24524:	43d2      	mvns	r2, r2
}
   24526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   2452a:	0fd2      	lsrs	r2, r2, #31
   2452c:	f7ff bfcd 	b.w	244ca <gpio_pin_write>
}
   24530:	bd38      	pop	{r3, r4, r5, pc}

00024532 <spi_context_unlock_unconditionally>:
{
   24532:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   24534:	2201      	movs	r2, #1
   24536:	2100      	movs	r1, #0
{
   24538:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2453a:	f7ff ffd0 	bl	244de <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   2453e:	68e3      	ldr	r3, [r4, #12]
   24540:	b923      	cbnz	r3, 2454c <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   24542:	1d20      	adds	r0, r4, #4
}
   24544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24548:	f7fd be20 	b.w	2218c <z_impl_k_sem_give>
   2454c:	bd10      	pop	{r4, pc}

0002454e <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2454e:	6880      	ldr	r0, [r0, #8]
{
   24550:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   24552:	6803      	ldr	r3, [r0, #0]
   24554:	428b      	cmp	r3, r1
   24556:	d106      	bne.n	24566 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   24558:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   2455c:	b934      	cbnz	r4, 2456c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2455e:	f7ff ffe8 	bl	24532 <spi_context_unlock_unconditionally>
	return 0;
   24562:	4620      	mov	r0, r4
}
   24564:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24566:	f06f 0015 	mvn.w	r0, #21
   2456a:	e7fb      	b.n	24564 <spi_nrfx_release+0x16>
		return -EBUSY;
   2456c:	f06f 000f 	mvn.w	r0, #15
   24570:	e7f8      	b.n	24564 <spi_nrfx_release+0x16>

00024572 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   24572:	7803      	ldrb	r3, [r0, #0]
{
   24574:	b410      	push	{r4}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   24576:	2b00      	cmp	r3, #0
   24578:	d138      	bne.n	245ec <event_handler+0x7a>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2457a:	688b      	ldr	r3, [r1, #8]
	if (!ctx->tx_len) {
   2457c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2457e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   24580:	b180      	cbz	r0, 245a4 <event_handler+0x32>
	if (len > ctx->tx_len) {
   24582:	4282      	cmp	r2, r0
   24584:	d80e      	bhi.n	245a4 <event_handler+0x32>
	ctx->tx_len -= len;
   24586:	1a80      	subs	r0, r0, r2
   24588:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->tx_len) {
   2458a:	bb18      	cbnz	r0, 245d4 <event_handler+0x62>
		ctx->tx_count--;
   2458c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   2458e:	3801      	subs	r0, #1
   24590:	63d8      	str	r0, [r3, #60]	; 0x3c
		if (ctx->tx_count) {
   24592:	b318      	cbz	r0, 245dc <event_handler+0x6a>
			ctx->current_tx++;
   24594:	6b98      	ldr	r0, [r3, #56]	; 0x38
   24596:	f100 0408 	add.w	r4, r0, #8
   2459a:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   2459c:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   2459e:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   245a0:	649c      	str	r4, [r3, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   245a2:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->rx_len) {
   245a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
   245a6:	b180      	cbz	r0, 245ca <event_handler+0x58>
	if (len > ctx->rx_len) {
   245a8:	4282      	cmp	r2, r0
   245aa:	d80e      	bhi.n	245ca <event_handler+0x58>
	ctx->rx_len -= len;
   245ac:	1a80      	subs	r0, r0, r2
   245ae:	6558      	str	r0, [r3, #84]	; 0x54
	if (!ctx->rx_len) {
   245b0:	b9b0      	cbnz	r0, 245e0 <event_handler+0x6e>
		ctx->rx_count--;
   245b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   245b4:	3a01      	subs	r2, #1
   245b6:	645a      	str	r2, [r3, #68]	; 0x44
		if (ctx->rx_count) {
   245b8:	b1b2      	cbz	r2, 245e8 <event_handler+0x76>
			ctx->current_rx++;
   245ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   245bc:	f102 0008 	add.w	r0, r2, #8
   245c0:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   245c2:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   245c4:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   245c6:	6518      	str	r0, [r3, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   245c8:	655a      	str	r2, [r3, #84]	; 0x54
		transfer_next_chunk(dev);
   245ca:	4608      	mov	r0, r1
}
   245cc:	f85d 4b04 	ldr.w	r4, [sp], #4
		transfer_next_chunk(dev);
   245d0:	f7eb b9b0 	b.w	f934 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   245d4:	6c98      	ldr	r0, [r3, #72]	; 0x48
   245d6:	2800      	cmp	r0, #0
   245d8:	d0e4      	beq.n	245a4 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   245da:	4410      	add	r0, r2
   245dc:	6498      	str	r0, [r3, #72]	; 0x48
   245de:	e7e1      	b.n	245a4 <event_handler+0x32>
	} else if (ctx->rx_buf) {
   245e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
   245e2:	2800      	cmp	r0, #0
   245e4:	d0f1      	beq.n	245ca <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   245e6:	4402      	add	r2, r0
   245e8:	651a      	str	r2, [r3, #80]	; 0x50
   245ea:	e7ee      	b.n	245ca <event_handler+0x58>
}
   245ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   245f0:	4770      	bx	lr

000245f2 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   245f2:	6883      	ldr	r3, [r0, #8]
   245f4:	689b      	ldr	r3, [r3, #8]
   245f6:	7b9a      	ldrb	r2, [r3, #14]
   245f8:	b172      	cbz	r2, 24618 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   245fa:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   245fc:	6892      	ldr	r2, [r2, #8]
   245fe:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24600:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   24604:	b141      	cbz	r1, 24618 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   24606:	f44f 7180 	mov.w	r1, #256	; 0x100
   2460a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2460e:	2101      	movs	r1, #1
   24610:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   24612:	2200      	movs	r2, #0
   24614:	739a      	strb	r2, [r3, #14]
		return;
   24616:	4770      	bx	lr
	if (data->int_driven->cb) {
   24618:	681a      	ldr	r2, [r3, #0]
   2461a:	b10a      	cbz	r2, 24620 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   2461c:	6858      	ldr	r0, [r3, #4]
   2461e:	4710      	bx	r2
}
   24620:	4770      	bx	lr

00024622 <uarte_nrfx_config_get>:
{
   24622:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   24624:	6882      	ldr	r2, [r0, #8]
   24626:	e892 0003 	ldmia.w	r2, {r0, r1}
   2462a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2462e:	2000      	movs	r0, #0
   24630:	4770      	bx	lr

00024632 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   24632:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24634:	689b      	ldr	r3, [r3, #8]
   24636:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24638:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2463c:	b118      	cbz	r0, 24646 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2463e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24642:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24646:	4770      	bx	lr

00024648 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   24648:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2464a:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2464c:	689b      	ldr	r3, [r3, #8]
   2464e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24650:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24654:	b138      	cbz	r0, 24666 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   24656:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24658:	2000      	movs	r0, #0
   2465a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2465c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2465e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24662:	601a      	str	r2, [r3, #0]
	return 0;
   24664:	4770      	bx	lr
		return -1;
   24666:	f04f 30ff 	mov.w	r0, #4294967295
}
   2466a:	4770      	bx	lr

0002466c <uarte_nrfx_poll_out>:
{
   2466c:	b082      	sub	sp, #8
   2466e:	aa02      	add	r2, sp, #8
   24670:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24674:	2100      	movs	r1, #0
	return dev->config->config_info;
   24676:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24678:	689b      	ldr	r3, [r3, #8]
   2467a:	681b      	ldr	r3, [r3, #0]
   2467c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24680:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24684:	2201      	movs	r2, #1
   24686:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2468a:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2468c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24690:	2900      	cmp	r1, #0
   24692:	d0fb      	beq.n	2468c <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24694:	60da      	str	r2, [r3, #12]
}
   24696:	b002      	add	sp, #8
   24698:	4770      	bx	lr

0002469a <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   2469a:	6803      	ldr	r3, [r0, #0]
{
   2469c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2469e:	689b      	ldr	r3, [r3, #8]
   246a0:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   246a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   246a6:	b1bb      	cbz	r3, 246d8 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   246a8:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   246aa:	68ab      	ldr	r3, [r5, #8]
   246ac:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   246ae:	2300      	movs	r3, #0
   246b0:	4290      	cmp	r0, r2
   246b2:	bfa8      	it	ge
   246b4:	4610      	movge	r0, r2
   246b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   246ba:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   246bc:	4283      	cmp	r3, r0
   246be:	6892      	ldr	r2, [r2, #8]
   246c0:	db06      	blt.n	246d0 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   246c2:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   246c4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   246c8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   246cc:	60a3      	str	r3, [r4, #8]
}
   246ce:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   246d0:	5cce      	ldrb	r6, [r1, r3]
   246d2:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   246d4:	3301      	adds	r3, #1
   246d6:	e7f0      	b.n	246ba <uarte_nrfx_fifo_fill+0x20>
		return 0;
   246d8:	4618      	mov	r0, r3
   246da:	e7f8      	b.n	246ce <uarte_nrfx_fifo_fill+0x34>

000246dc <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   246dc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   246de:	689b      	ldr	r3, [r3, #8]
   246e0:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   246e2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   246e6:	b143      	cbz	r3, 246fa <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   246e8:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   246ea:	2000      	movs	r0, #0
   246ec:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   246f0:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   246f2:	7b1b      	ldrb	r3, [r3, #12]
   246f4:	700b      	strb	r3, [r1, #0]
   246f6:	6010      	str	r0, [r2, #0]
   246f8:	4770      	bx	lr
	int num_rx = 0;
   246fa:	4618      	mov	r0, r3
}
   246fc:	4770      	bx	lr

000246fe <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   246fe:	2100      	movs	r1, #0
	return dev->config->config_info;
   24700:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   24702:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24704:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   24706:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   24708:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2470a:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2470c:	f44f 7280 	mov.w	r2, #256	; 0x100
   24710:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24714:	4770      	bx	lr

00024716 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   24716:	2201      	movs	r2, #1
   24718:	6883      	ldr	r3, [r0, #8]
   2471a:	689b      	ldr	r3, [r3, #8]
   2471c:	739a      	strb	r2, [r3, #14]
}
   2471e:	4770      	bx	lr

00024720 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   24720:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24722:	689b      	ldr	r3, [r3, #8]
   24724:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24726:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2472a:	b118      	cbz	r0, 24734 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   2472c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   24730:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   24734:	4770      	bx	lr

00024736 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   24736:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24738:	689b      	ldr	r3, [r3, #8]
   2473a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2473c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   24740:	3000      	adds	r0, #0
   24742:	bf18      	it	ne
   24744:	2001      	movne	r0, #1
   24746:	4770      	bx	lr

00024748 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   24748:	2210      	movs	r2, #16
	return dev->config->config_info;
   2474a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2474c:	689b      	ldr	r3, [r3, #8]
   2474e:	681b      	ldr	r3, [r3, #0]
   24750:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24754:	4770      	bx	lr

00024756 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   24756:	2210      	movs	r2, #16
	return dev->config->config_info;
   24758:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2475a:	689b      	ldr	r3, [r3, #8]
   2475c:	681b      	ldr	r3, [r3, #0]
   2475e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24762:	4770      	bx	lr

00024764 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   24764:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24768:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2476a:	689b      	ldr	r3, [r3, #8]
   2476c:	681b      	ldr	r3, [r3, #0]
   2476e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24772:	4770      	bx	lr

00024774 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   24774:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24778:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2477a:	689b      	ldr	r3, [r3, #8]
   2477c:	681b      	ldr	r3, [r3, #0]
   2477e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24782:	4770      	bx	lr

00024784 <uarte_nrfx_irq_update>:
}
   24784:	2001      	movs	r0, #1
   24786:	4770      	bx	lr

00024788 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   24788:	6883      	ldr	r3, [r0, #8]
   2478a:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   2478c:	e9c3 1200 	strd	r1, r2, [r3]
}
   24790:	4770      	bx	lr

00024792 <uarte_nrfx_irq_is_pending>:
{
   24792:	b508      	push	{r3, lr}
	return dev->config->config_info;
   24794:	6803      	ldr	r3, [r0, #0]
{
   24796:	4602      	mov	r2, r0
	return config->uarte_regs;
   24798:	689b      	ldr	r3, [r3, #8]
   2479a:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   2479c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   247a0:	05db      	lsls	r3, r3, #23
   247a2:	d405      	bmi.n	247b0 <uarte_nrfx_irq_is_pending+0x1e>
   247a4:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   247a8:	f010 0010 	ands.w	r0, r0, #16
   247ac:	d106      	bne.n	247bc <uarte_nrfx_irq_is_pending+0x2a>
}
   247ae:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   247b0:	f7ff ffb6 	bl	24720 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   247b4:	2800      	cmp	r0, #0
   247b6:	d0f5      	beq.n	247a4 <uarte_nrfx_irq_is_pending+0x12>
		||
   247b8:	2001      	movs	r0, #1
   247ba:	e7f8      	b.n	247ae <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   247bc:	4610      	mov	r0, r2
   247be:	f7ff ffba 	bl	24736 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   247c2:	3000      	adds	r0, #0
   247c4:	bf18      	it	ne
   247c6:	2001      	movne	r0, #1
   247c8:	e7f1      	b.n	247ae <uarte_nrfx_irq_is_pending+0x1c>

000247ca <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   247ca:	2000      	movs	r0, #0
   247cc:	4770      	bx	lr

000247ce <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   247ce:	4668      	mov	r0, sp
   247d0:	f020 0107 	bic.w	r1, r0, #7
   247d4:	468d      	mov	sp, r1
   247d6:	b501      	push	{r0, lr}
   247d8:	f7ff fbce 	bl	23f78 <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   247dc:	f7ef fa52 	bl	13c84 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   247e0:	f7e9 faa8 	bl	dd34 <_arch_isr_direct_pm>
   247e4:	f7e9 f992 	bl	db0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   247e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   247ec:	4685      	mov	sp, r0
   247ee:	4770      	bx	lr

000247f0 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   247f0:	4668      	mov	r0, sp
   247f2:	f020 0107 	bic.w	r1, r0, #7
   247f6:	468d      	mov	sp, r1
   247f8:	b501      	push	{r0, lr}
   247fa:	f7ff fbbd 	bl	23f78 <z_arch_isr_direct_header>
	IPC_IRQHandler();
   247fe:	f7ed fdc9 	bl	12394 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   24802:	f7e9 fa97 	bl	dd34 <_arch_isr_direct_pm>
   24806:	f7e9 f981 	bl	db0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2480a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2480e:	4685      	mov	sp, r0
   24810:	4770      	bx	lr

00024812 <trace_task_create>:
{
   24812:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   24814:	201d      	movs	r0, #29
   24816:	2200      	movs	r2, #0
   24818:	2106      	movs	r1, #6
   2481a:	f7e9 fa59 	bl	dcd0 <z_arm_irq_priority_set>
}
   2481e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   24822:	201d      	movs	r0, #29
   24824:	f7e9 ba44 	b.w	dcb0 <z_arch_irq_enable>

00024828 <read_task_create>:
{
   24828:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2482a:	201c      	movs	r0, #28
   2482c:	2200      	movs	r2, #0
   2482e:	2106      	movs	r1, #6
   24830:	f7e9 fa4e 	bl	dcd0 <z_arm_irq_priority_set>
}
   24834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   24838:	201c      	movs	r0, #28
   2483a:	f7e9 ba39 	b.w	dcb0 <z_arch_irq_enable>

0002483e <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2483e:	2000      	movs	r0, #0
   24840:	4770      	bx	lr

00024842 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   24842:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   24846:	bf18      	it	ne
   24848:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   2484a:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   2484c:	bf48      	it	mi
   2484e:	f043 0308 	orrmi.w	r3, r3, #8
}
   24852:	4618      	mov	r0, r3
   24854:	4770      	bx	lr

00024856 <z_to_nrf_family>:
	switch (z_family) {
   24856:	2803      	cmp	r0, #3
   24858:	d00f      	beq.n	2487a <z_to_nrf_family+0x24>
   2485a:	d806      	bhi.n	2486a <z_to_nrf_family+0x14>
   2485c:	2801      	cmp	r0, #1
   2485e:	d00e      	beq.n	2487e <z_to_nrf_family+0x28>
   24860:	2802      	cmp	r0, #2
   24862:	d008      	beq.n	24876 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   24864:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   24868:	4770      	bx	lr
	switch (z_family) {
   2486a:	2866      	cmp	r0, #102	; 0x66
   2486c:	d008      	beq.n	24880 <z_to_nrf_family+0x2a>
   2486e:	2867      	cmp	r0, #103	; 0x67
   24870:	d1f8      	bne.n	24864 <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   24872:	2001      	movs	r0, #1
   24874:	4770      	bx	lr
		return NRF_AF_INET6;
   24876:	200a      	movs	r0, #10
   24878:	4770      	bx	lr
		return NRF_AF_PACKET;
   2487a:	2005      	movs	r0, #5
   2487c:	4770      	bx	lr
		return NRF_AF_INET;
   2487e:	2002      	movs	r0, #2
}
   24880:	4770      	bx	lr

00024882 <z_to_nrf_protocol>:
	switch (proto) {
   24882:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   24886:	d01d      	beq.n	248c4 <z_to_nrf_protocol+0x42>
   24888:	dc05      	bgt.n	24896 <z_to_nrf_protocol+0x14>
   2488a:	2806      	cmp	r0, #6
   2488c:	d020      	beq.n	248d0 <z_to_nrf_protocol+0x4e>
   2488e:	2811      	cmp	r0, #17
   24890:	d016      	beq.n	248c0 <z_to_nrf_protocol+0x3e>
   24892:	b948      	cbnz	r0, 248a8 <z_to_nrf_protocol+0x26>
   24894:	4770      	bx	lr
   24896:	f240 2301 	movw	r3, #513	; 0x201
   2489a:	4298      	cmp	r0, r3
   2489c:	d00f      	beq.n	248be <z_to_nrf_protocol+0x3c>
   2489e:	dc06      	bgt.n	248ae <z_to_nrf_protocol+0x2c>
   248a0:	f240 1311 	movw	r3, #273	; 0x111
   248a4:	4298      	cmp	r0, r3
   248a6:	d010      	beq.n	248ca <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   248a8:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   248ac:	4770      	bx	lr
	switch (proto) {
   248ae:	f240 2302 	movw	r3, #514	; 0x202
   248b2:	4298      	cmp	r0, r3
   248b4:	d003      	beq.n	248be <z_to_nrf_protocol+0x3c>
   248b6:	f240 2303 	movw	r3, #515	; 0x203
   248ba:	4298      	cmp	r0, r3
   248bc:	d1f4      	bne.n	248a8 <z_to_nrf_protocol+0x26>
}
   248be:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   248c0:	2002      	movs	r0, #2
   248c2:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   248c4:	f44f 7082 	mov.w	r0, #260	; 0x104
   248c8:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   248ca:	f44f 7087 	mov.w	r0, #270	; 0x10e
   248ce:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   248d0:	2001      	movs	r0, #1
   248d2:	e7f4      	b.n	248be <z_to_nrf_protocol+0x3c>

000248d4 <nrf91_bsdlib_socket_offload_init>:
}
   248d4:	2000      	movs	r0, #0
   248d6:	4770      	bx	lr

000248d8 <nrf91_socket_offload_freeaddrinfo>:
{
   248d8:	b538      	push	{r3, r4, r5, lr}
   248da:	4604      	mov	r4, r0
	while (next != NULL) {
   248dc:	b904      	cbnz	r4, 248e0 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   248de:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   248e0:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   248e2:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   248e4:	f000 fba4 	bl	25030 <k_free>
		k_free(this);
   248e8:	4620      	mov	r0, r4
   248ea:	f000 fba1 	bl	25030 <k_free>
		next = next->ai_next;
   248ee:	462c      	mov	r4, r5
   248f0:	e7f4      	b.n	248dc <nrf91_socket_offload_freeaddrinfo+0x4>

000248f2 <z_to_nrf_addrinfo_hints>:
{
   248f2:	b538      	push	{r3, r4, r5, lr}
   248f4:	460c      	mov	r4, r1
   248f6:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   248f8:	2220      	movs	r2, #32
   248fa:	2100      	movs	r1, #0
   248fc:	4620      	mov	r0, r4
   248fe:	f7ff fc98 	bl	24232 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   24902:	2300      	movs	r3, #0
   24904:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   24906:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   24908:	2b03      	cmp	r3, #3
   2490a:	d003      	beq.n	24914 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   2490c:	2b04      	cmp	r3, #4
   2490e:	bf08      	it	eq
   24910:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   24914:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   24916:	88a8      	ldrh	r0, [r5, #4]
   24918:	f7ff ff9d 	bl	24856 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2491c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   24920:	d00b      	beq.n	2493a <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   24922:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   24924:	68e8      	ldr	r0, [r5, #12]
   24926:	f7ff ffac 	bl	24882 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2492a:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2492e:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   24930:	d003      	beq.n	2493a <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   24932:	69a8      	ldr	r0, [r5, #24]
   24934:	b108      	cbz	r0, 2493a <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   24936:	61a0      	str	r0, [r4, #24]
	return 0;
   24938:	2000      	movs	r0, #0
}
   2493a:	bd38      	pop	{r3, r4, r5, pc}

0002493c <nrf91_socket_offload_send>:
{
   2493c:	b570      	push	{r4, r5, r6, lr}
   2493e:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   24940:	4618      	mov	r0, r3
{
   24942:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   24944:	f7ff ff7d 	bl	24842 <z_to_nrf_flags>
   24948:	462a      	mov	r2, r5
   2494a:	4603      	mov	r3, r0
   2494c:	4620      	mov	r0, r4
}
   2494e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   24952:	f7ed badf 	b.w	11f14 <nrf_send>

00024956 <nrf91_socket_offload_recv>:
{
   24956:	b570      	push	{r4, r5, r6, lr}
   24958:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2495a:	4618      	mov	r0, r3
{
   2495c:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2495e:	f7ff ff70 	bl	24842 <z_to_nrf_flags>
   24962:	462a      	mov	r2, r5
   24964:	4603      	mov	r3, r0
   24966:	4620      	mov	r0, r4
}
   24968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2496c:	f7ed bb08 	b.w	11f80 <nrf_recv>

00024970 <nrf91_socket_offload_getsockopt>:
{
   24970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24974:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   24976:	2300      	movs	r3, #0
{
   24978:	b086      	sub	sp, #24
   2497a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2497e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   24982:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   24986:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2498a:	4607      	mov	r7, r0
   2498c:	460d      	mov	r5, r1
   2498e:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   24990:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   24992:	d00d      	beq.n	249b0 <nrf91_socket_offload_getsockopt+0x40>
   24994:	dc08      	bgt.n	249a8 <nrf91_socket_offload_getsockopt+0x38>
   24996:	2901      	cmp	r1, #1
   24998:	d00a      	beq.n	249b0 <nrf91_socket_offload_getsockopt+0x40>
   2499a:	f7fb fbbb 	bl	20114 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   2499e:	232a      	movs	r3, #42	; 0x2a
	return retval;
   249a0:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   249a4:	6003      	str	r3, [r0, #0]
	return retval;
   249a6:	e029      	b.n	249fc <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   249a8:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   249ac:	2b01      	cmp	r3, #1
   249ae:	d8f4      	bhi.n	2499a <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   249b0:	aa02      	add	r2, sp, #8
   249b2:	4631      	mov	r1, r6
   249b4:	4628      	mov	r0, r5
   249b6:	f7eb fbcf 	bl	10158 <z_to_nrf_optname>
   249ba:	2800      	cmp	r0, #0
   249bc:	dbed      	blt.n	2499a <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   249be:	2d01      	cmp	r5, #1
   249c0:	d120      	bne.n	24a04 <nrf91_socket_offload_getsockopt+0x94>
   249c2:	2e14      	cmp	r6, #20
   249c4:	d11e      	bne.n	24a04 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   249c6:	2308      	movs	r3, #8
   249c8:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   249ca:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   249cc:	aa03      	add	r2, sp, #12
   249ce:	9200      	str	r2, [sp, #0]
   249d0:	4638      	mov	r0, r7
   249d2:	9a02      	ldr	r2, [sp, #8]
   249d4:	4629      	mov	r1, r5
   249d6:	f7ed fb53 	bl	12080 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   249da:	4607      	mov	r7, r0
   249dc:	b970      	cbnz	r0, 249fc <nrf91_socket_offload_getsockopt+0x8c>
   249de:	b16c      	cbz	r4, 249fc <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   249e0:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   249e2:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   249e4:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   249e8:	d108      	bne.n	249fc <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   249ea:	2e04      	cmp	r6, #4
   249ec:	d10c      	bne.n	24a08 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   249ee:	6820      	ldr	r0, [r4, #0]
   249f0:	f7eb face 	bl	ff90 <bsd_os_errno_set>
   249f4:	f7fb fb8e 	bl	20114 <z_impl_z_errno>
				*(int *)optval = errno;
   249f8:	6803      	ldr	r3, [r0, #0]
   249fa:	6023      	str	r3, [r4, #0]
}
   249fc:	4638      	mov	r0, r7
   249fe:	b006      	add	sp, #24
   24a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a04:	4623      	mov	r3, r4
   24a06:	e7e1      	b.n	249cc <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   24a08:	2e14      	cmp	r6, #20
   24a0a:	d1f7      	bne.n	249fc <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   24a0c:	9b04      	ldr	r3, [sp, #16]
   24a0e:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   24a10:	9b05      	ldr	r3, [sp, #20]
   24a12:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   24a14:	2308      	movs	r3, #8
   24a16:	f8c8 3000 	str.w	r3, [r8]
   24a1a:	e7ef      	b.n	249fc <nrf91_socket_offload_getsockopt+0x8c>

00024a1c <nrf91_socket_offload_poll>:
{
   24a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a1e:	b091      	sub	sp, #68	; 0x44
   24a20:	4605      	mov	r5, r0
   24a22:	460c      	mov	r4, r1
   24a24:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   24a26:	2100      	movs	r1, #0
   24a28:	2240      	movs	r2, #64	; 0x40
   24a2a:	4668      	mov	r0, sp
   24a2c:	f7ff fc01 	bl	24232 <memset>
	for (int i = 0; i < nfds; i++) {
   24a30:	2204      	movs	r2, #4
   24a32:	2100      	movs	r1, #0
   24a34:	42a1      	cmp	r1, r4
   24a36:	db0c      	blt.n	24a52 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   24a38:	4632      	mov	r2, r6
   24a3a:	4621      	mov	r1, r4
   24a3c:	4668      	mov	r0, sp
   24a3e:	f7ed fb3f 	bl	120c0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   24a42:	2200      	movs	r2, #0
   24a44:	462b      	mov	r3, r5
		fds[i].revents = 0;
   24a46:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   24a48:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   24a4a:	42a2      	cmp	r2, r4
   24a4c:	db1b      	blt.n	24a86 <nrf91_socket_offload_poll+0x6a>
}
   24a4e:	b011      	add	sp, #68	; 0x44
   24a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   24a52:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   24a56:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   24a58:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   24a5c:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   24a5e:	bf48      	it	mi
   24a60:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   24a64:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   24a68:	bf44      	itt	mi
   24a6a:	f043 0301 	orrmi.w	r3, r3, #1
   24a6e:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   24a72:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   24a74:	bf42      	ittt	mi
   24a76:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   24a7a:	f043 0302 	orrmi.w	r3, r3, #2
   24a7e:	f82d 3002 	strhmi.w	r3, [sp, r2]
   24a82:	3208      	adds	r2, #8
   24a84:	e7d6      	b.n	24a34 <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   24a86:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   24a8a:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   24a8c:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   24a8e:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   24a90:	bf48      	it	mi
   24a92:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   24a94:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   24a96:	bf48      	it	mi
   24a98:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   24a9a:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   24a9e:	bf44      	itt	mi
   24aa0:	f045 0504 	orrmi.w	r5, r5, #4
   24aa4:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   24aa6:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   24aa8:	bf48      	it	mi
   24aaa:	88dd      	ldrhmi	r5, [r3, #6]
   24aac:	f103 0308 	add.w	r3, r3, #8
   24ab0:	bf44      	itt	mi
   24ab2:	f045 0508 	orrmi.w	r5, r5, #8
   24ab6:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   24aba:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   24abc:	bf42      	ittt	mi
   24abe:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   24ac2:	f045 0520 	orrmi.w	r5, r5, #32
   24ac6:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   24aca:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   24acc:	bf42      	ittt	mi
   24ace:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   24ad2:	f041 0110 	orrmi.w	r1, r1, #16
   24ad6:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   24ada:	e7b6      	b.n	24a4a <nrf91_socket_offload_poll+0x2e>

00024adc <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   24adc:	f7ed ba7c 	b.w	11fd8 <nrf_listen>

00024ae0 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   24ae0:	f7ed b9ee 	b.w	11ec0 <nrf_close>

00024ae4 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   24ae4:	2903      	cmp	r1, #3
{
   24ae6:	b508      	push	{r3, lr}
	switch (cmd) {
   24ae8:	d00b      	beq.n	24b02 <nrf91_socket_offload_fcntl+0x1e>
   24aea:	2904      	cmp	r1, #4
   24aec:	d111      	bne.n	24b12 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   24aee:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   24af0:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   24af4:	d10d      	bne.n	24b12 <nrf91_socket_offload_fcntl+0x2e>
}
   24af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   24afa:	1392      	asrs	r2, r2, #14
   24afc:	2101      	movs	r1, #1
   24afe:	f7ed bae1 	b.w	120c4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   24b02:	2200      	movs	r2, #0
   24b04:	2102      	movs	r1, #2
   24b06:	f7ed fadd 	bl	120c4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   24b0a:	0380      	lsls	r0, r0, #14
   24b0c:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   24b10:	bd08      	pop	{r3, pc}
   24b12:	f7fb faff 	bl	20114 <z_impl_z_errno>
	errno = EINVAL;
   24b16:	2316      	movs	r3, #22
   24b18:	6003      	str	r3, [r0, #0]
	return retval;
   24b1a:	f04f 30ff 	mov.w	r0, #4294967295
   24b1e:	e7f7      	b.n	24b10 <nrf91_socket_offload_fcntl+0x2c>

00024b20 <nrf91_socket_offload_recvfrom>:
{
   24b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b24:	4607      	mov	r7, r0
   24b26:	b08c      	sub	sp, #48	; 0x30
   24b28:	4618      	mov	r0, r3
   24b2a:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   24b2e:	4690      	mov	r8, r2
   24b30:	f7ff fe87 	bl	24842 <z_to_nrf_flags>
   24b34:	4603      	mov	r3, r0
	if (from == NULL) {
   24b36:	b954      	cbnz	r4, 24b4e <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   24b38:	e9cd 4400 	strd	r4, r4, [sp]
   24b3c:	4642      	mov	r2, r8
   24b3e:	4638      	mov	r0, r7
   24b40:	f7ed fa02 	bl	11f48 <nrf_recvfrom>
   24b44:	4605      	mov	r5, r0
}
   24b46:	4628      	mov	r0, r5
   24b48:	b00c      	add	sp, #48	; 0x30
   24b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   24b4e:	2224      	movs	r2, #36	; 0x24
   24b50:	ad0c      	add	r5, sp, #48	; 0x30
   24b52:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   24b56:	aa03      	add	r2, sp, #12
   24b58:	9501      	str	r5, [sp, #4]
   24b5a:	9200      	str	r2, [sp, #0]
   24b5c:	4638      	mov	r0, r7
   24b5e:	4642      	mov	r2, r8
   24b60:	f7ed f9f2 	bl	11f48 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   24b64:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   24b66:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   24b68:	2b02      	cmp	r3, #2
   24b6a:	d109      	bne.n	24b80 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   24b6c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   24b70:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   24b72:	2301      	movs	r3, #1
   24b74:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24b76:	9b06      	ldr	r3, [sp, #24]
   24b78:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   24b7a:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   24b7c:	6033      	str	r3, [r6, #0]
	return retval;
   24b7e:	e7e2      	b.n	24b46 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   24b80:	2b0a      	cmp	r3, #10
   24b82:	d1e0      	bne.n	24b46 <nrf91_socket_offload_recvfrom+0x26>
	ptr->sin6_port = nrf_in->sin6_port;
   24b84:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   24b88:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   24b8a:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   24b8c:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24b8e:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   24b90:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24b94:	a907      	add	r1, sp, #28
   24b96:	f7ff fb1f 	bl	241d8 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   24b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24b9c:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   24b9e:	2318      	movs	r3, #24
   24ba0:	e7ec      	b.n	24b7c <nrf91_socket_offload_recvfrom+0x5c>

00024ba2 <nrf91_socket_offload_connect>:
{
   24ba2:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   24ba4:	880b      	ldrh	r3, [r1, #0]
{
   24ba6:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   24ba8:	2b01      	cmp	r3, #1
{
   24baa:	4606      	mov	r6, r0
   24bac:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   24bae:	d10e      	bne.n	24bce <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   24bb0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24bb2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   24bb4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   24bb8:	2302      	movs	r3, #2
   24bba:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24bbc:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24bbe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24bc2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   24bc4:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   24bc6:	f7ed f9f5 	bl	11fb4 <nrf_connect>
}
   24bca:	b00a      	add	sp, #40	; 0x28
   24bcc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   24bce:	2b02      	cmp	r3, #2
   24bd0:	d112      	bne.n	24bf8 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   24bd2:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24bd4:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   24bd6:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   24bda:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24bdc:	2210      	movs	r2, #16
   24bde:	3104      	adds	r1, #4
   24be0:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   24be2:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24be4:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24be8:	f7ff faf6 	bl	241d8 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24bec:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   24bee:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24bf0:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   24bf2:	a901      	add	r1, sp, #4
   24bf4:	4630      	mov	r0, r6
   24bf6:	e7e6      	b.n	24bc6 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   24bf8:	f7ed f9dc 	bl	11fb4 <nrf_connect>
		if (retval < 0) {
   24bfc:	2800      	cmp	r0, #0
   24bfe:	dae4      	bge.n	24bca <nrf91_socket_offload_connect+0x28>
   24c00:	f7fb fa88 	bl	20114 <z_impl_z_errno>
	errno = ENOTSUP;
   24c04:	2323      	movs	r3, #35	; 0x23
   24c06:	6003      	str	r3, [r0, #0]
   24c08:	f04f 30ff 	mov.w	r0, #4294967295
   24c0c:	e7dd      	b.n	24bca <nrf91_socket_offload_connect+0x28>

00024c0e <nrf91_socket_offload_socket>:
{
   24c0e:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   24c10:	b280      	uxth	r0, r0
   24c12:	f7ff fe20 	bl	24856 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   24c16:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   24c1a:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   24c1c:	d106      	bne.n	24c2c <nrf91_socket_offload_socket+0x1e>
   24c1e:	f7fb fa79 	bl	20114 <z_impl_z_errno>
		errno = EAFNOSUPPORT;
   24c22:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   24c24:	6003      	str	r3, [r0, #0]
}
   24c26:	f04f 30ff 	mov.w	r0, #4294967295
   24c2a:	bd10      	pop	{r4, pc}
	switch (socktype) {
   24c2c:	2903      	cmp	r1, #3
   24c2e:	d003      	beq.n	24c38 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   24c30:	2904      	cmp	r1, #4
   24c32:	bf08      	it	eq
   24c34:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   24c38:	4610      	mov	r0, r2
   24c3a:	f7ff fe22 	bl	24882 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   24c3e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   24c42:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   24c44:	d103      	bne.n	24c4e <nrf91_socket_offload_socket+0x40>
   24c46:	f7fb fa65 	bl	20114 <z_impl_z_errno>
		errno = EPROTONOSUPPORT;
   24c4a:	232b      	movs	r3, #43	; 0x2b
   24c4c:	e7ea      	b.n	24c24 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   24c4e:	4620      	mov	r0, r4
}
   24c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   24c54:	f7ed b922 	b.w	11e9c <nrf_socket>

00024c58 <nrf91_socket_offload_accept>:
{
   24c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   24c5a:	2708      	movs	r7, #8
{
   24c5c:	b085      	sub	sp, #20
   24c5e:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   24c60:	aa04      	add	r2, sp, #16
{
   24c62:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   24c64:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   24c68:	eb0d 0107 	add.w	r1, sp, r7
   24c6c:	f7ed f9c4 	bl	11ff8 <nrf_accept>
	if (retval < 0) {
   24c70:	1e05      	subs	r5, r0, #0
   24c72:	db23      	blt.n	24cbc <nrf91_socket_offload_accept+0x64>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   24c74:	9b03      	ldr	r3, [sp, #12]
   24c76:	2b02      	cmp	r3, #2
   24c78:	d10a      	bne.n	24c90 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   24c7a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   24c7e:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   24c80:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   24c82:	2301      	movs	r3, #1
   24c84:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24c86:	9b05      	ldr	r3, [sp, #20]
   24c88:	6063      	str	r3, [r4, #4]
}
   24c8a:	4628      	mov	r0, r5
   24c8c:	b005      	add	sp, #20
   24c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   24c90:	2b0a      	cmp	r3, #10
   24c92:	d10f      	bne.n	24cb4 <nrf91_socket_offload_accept+0x5c>
		*addrlen = sizeof(struct sockaddr_in6);
   24c94:	2318      	movs	r3, #24
	ptr->sin6_port = nrf_in->sin6_port;
   24c96:	a904      	add	r1, sp, #16
		*addrlen = sizeof(struct sockaddr_in6);
   24c98:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   24c9a:	f831 3b08 	ldrh.w	r3, [r1], #8
	ptr->sin6_family = AF_INET6;
   24c9e:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   24ca0:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   24ca2:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24ca4:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   24ca6:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24caa:	f7ff fa95 	bl	241d8 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   24cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24cb0:	7523      	strb	r3, [r4, #20]
   24cb2:	e7ea      	b.n	24c8a <nrf91_socket_offload_accept+0x32>
   24cb4:	f7fb fa2e 	bl	20114 <z_impl_z_errno>
	errno = ENOTSUP;
   24cb8:	2323      	movs	r3, #35	; 0x23
   24cba:	6003      	str	r3, [r0, #0]
		return -1;
   24cbc:	f04f 35ff 	mov.w	r5, #4294967295
   24cc0:	e7e3      	b.n	24c8a <nrf91_socket_offload_accept+0x32>

00024cc2 <nrf91_socket_offload_getaddrinfo>:
{
   24cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cc6:	4614      	mov	r4, r2
   24cc8:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   24cca:	2100      	movs	r1, #0
{
   24ccc:	b093      	sub	sp, #76	; 0x4c
   24cce:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   24cd0:	2220      	movs	r2, #32
   24cd2:	a802      	add	r0, sp, #8
{
   24cd4:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   24cd6:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   24cd8:	f7ff faab 	bl	24232 <memset>
	if (hints != NULL) {
   24cdc:	b19c      	cbz	r4, 24d06 <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   24cde:	a902      	add	r1, sp, #8
   24ce0:	4620      	mov	r0, r4
   24ce2:	f7ff fe06 	bl	248f2 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   24ce6:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   24cea:	f000 80c0 	beq.w	24e6e <nrf91_socket_offload_getaddrinfo+0x1ac>
		} else if (error == -EAFNOSUPPORT) {
   24cee:	302f      	adds	r0, #47	; 0x2f
   24cf0:	f000 80c0 	beq.w	24e74 <nrf91_socket_offload_getaddrinfo+0x1b2>
		if (hints->ai_next != NULL) {
   24cf4:	69e0      	ldr	r0, [r4, #28]
   24cf6:	b120      	cbz	r0, 24d02 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   24cf8:	ac0a      	add	r4, sp, #40	; 0x28
   24cfa:	4621      	mov	r1, r4
   24cfc:	f7ff fdf9 	bl	248f2 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   24d00:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   24d02:	aa02      	add	r2, sp, #8
   24d04:	e000      	b.n	24d08 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   24d06:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   24d08:	4631      	mov	r1, r6
   24d0a:	4628      	mov	r0, r5
   24d0c:	ab01      	add	r3, sp, #4
   24d0e:	f7ed f9d3 	bl	120b8 <nrf_getaddrinfo>
	*res = NULL;
   24d12:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   24d14:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   24d16:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   24d1a:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   24d1e:	4605      	mov	r5, r0
   24d20:	2800      	cmp	r0, #0
   24d22:	d04c      	beq.n	24dbe <nrf91_socket_offload_getaddrinfo+0xfc>
		nrf91_socket_offload_freeaddrinfo(*res);
   24d24:	f8d8 0000 	ldr.w	r0, [r8]
   24d28:	f7ff fdd6 	bl	248d8 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   24d2c:	2300      	movs	r3, #0
   24d2e:	f8c8 3000 	str.w	r3, [r8]
   24d32:	e046      	b.n	24dc2 <nrf91_socket_offload_getaddrinfo+0x100>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   24d34:	2020      	movs	r0, #32
   24d36:	f7fb fd19 	bl	2076c <k_malloc>
		if (next_z_res == NULL) {
   24d3a:	4604      	mov	r4, r0
   24d3c:	2800      	cmp	r0, #0
   24d3e:	f000 8091 	beq.w	24e64 <nrf91_socket_offload_getaddrinfo+0x1a2>
	family = nrf_to_z_family(nrf_in->ai_family);
   24d42:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   24d44:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   24d46:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   24d48:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   24d4c:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   24d4e:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   24d50:	d03e      	beq.n	24dd0 <nrf91_socket_offload_getaddrinfo+0x10e>
   24d52:	dc09      	bgt.n	24d68 <nrf91_socket_offload_getaddrinfo+0xa6>
   24d54:	2a01      	cmp	r2, #1
   24d56:	d00d      	beq.n	24d74 <nrf91_socket_offload_getaddrinfo+0xb2>
   24d58:	2a02      	cmp	r2, #2
   24d5a:	d03d      	beq.n	24dd8 <nrf91_socket_offload_getaddrinfo+0x116>
			k_free(next_z_res);
   24d5c:	4620      	mov	r0, r4
   24d5e:	f000 f967 	bl	25030 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   24d62:	f06f 0508 	mvn.w	r5, #8
   24d66:	e7dd      	b.n	24d24 <nrf91_socket_offload_getaddrinfo+0x62>
	switch (nrf_family) {
   24d68:	2a0a      	cmp	r2, #10
   24d6a:	d033      	beq.n	24dd4 <nrf91_socket_offload_getaddrinfo+0x112>
   24d6c:	2a66      	cmp	r2, #102	; 0x66
   24d6e:	d1f5      	bne.n	24d5c <nrf91_socket_offload_getaddrinfo+0x9a>
		return AF_LTE;
   24d70:	4613      	mov	r3, r2
   24d72:	e000      	b.n	24d76 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_LOCAL;
   24d74:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   24d76:	6063      	str	r3, [r4, #4]
	switch (proto) {
   24d78:	68f3      	ldr	r3, [r6, #12]
   24d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   24d7e:	d04c      	beq.n	24e1a <nrf91_socket_offload_getaddrinfo+0x158>
   24d80:	dc2c      	bgt.n	24ddc <nrf91_socket_offload_getaddrinfo+0x11a>
   24d82:	2b01      	cmp	r3, #1
   24d84:	d04e      	beq.n	24e24 <nrf91_socket_offload_getaddrinfo+0x162>
   24d86:	2b02      	cmp	r3, #2
   24d88:	d04a      	beq.n	24e20 <nrf91_socket_offload_getaddrinfo+0x15e>
   24d8a:	2b00      	cmp	r3, #0
   24d8c:	d12e      	bne.n	24dec <nrf91_socket_offload_getaddrinfo+0x12a>
	if (nrf_in->ai_family == NRF_AF_INET) {
   24d8e:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24d90:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   24d92:	d149      	bne.n	24e28 <nrf91_socket_offload_getaddrinfo+0x166>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   24d94:	2008      	movs	r0, #8
   24d96:	f7fb fce9 	bl	2076c <k_malloc>
   24d9a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   24d9c:	2800      	cmp	r0, #0
   24d9e:	d05e      	beq.n	24e5e <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   24da0:	2308      	movs	r3, #8
   24da2:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   24da4:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   24da6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24da8:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   24daa:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   24dac:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24dae:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   24db0:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   24db2:	2f00      	cmp	r7, #0
   24db4:	d159      	bne.n	24e6a <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   24db6:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   24dba:	4627      	mov	r7, r4
   24dbc:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   24dbe:	2e00      	cmp	r6, #0
   24dc0:	d1b8      	bne.n	24d34 <nrf91_socket_offload_getaddrinfo+0x72>
	nrf_freeaddrinfo(nrf_res);
   24dc2:	9801      	ldr	r0, [sp, #4]
   24dc4:	f7ed f97a 	bl	120bc <nrf_freeaddrinfo>
}
   24dc8:	4628      	mov	r0, r5
   24dca:	b013      	add	sp, #76	; 0x4c
   24dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   24dd0:	2303      	movs	r3, #3
   24dd2:	e7d0      	b.n	24d76 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET6;
   24dd4:	2302      	movs	r3, #2
   24dd6:	e7ce      	b.n	24d76 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET;
   24dd8:	2301      	movs	r3, #1
   24dda:	e7cc      	b.n	24d76 <nrf91_socket_offload_getaddrinfo+0xb4>
	switch (proto) {
   24ddc:	f240 2101 	movw	r1, #513	; 0x201
   24de0:	428b      	cmp	r3, r1
   24de2:	d0d4      	beq.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24de4:	dc0d      	bgt.n	24e02 <nrf91_socket_offload_getaddrinfo+0x140>
   24de6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   24dea:	d013      	beq.n	24e14 <nrf91_socket_offload_getaddrinfo+0x152>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24dec:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   24df0:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   24df2:	2300      	movs	r3, #0
   24df4:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   24df6:	4620      	mov	r0, r4
   24df8:	f000 f91a 	bl	25030 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   24dfc:	f06f 0506 	mvn.w	r5, #6
   24e00:	e790      	b.n	24d24 <nrf91_socket_offload_getaddrinfo+0x62>
	switch (proto) {
   24e02:	f240 2102 	movw	r1, #514	; 0x202
   24e06:	428b      	cmp	r3, r1
   24e08:	d0c1      	beq.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24e0a:	f240 2103 	movw	r1, #515	; 0x203
   24e0e:	428b      	cmp	r3, r1
   24e10:	d0bd      	beq.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24e12:	e7eb      	b.n	24dec <nrf91_socket_offload_getaddrinfo+0x12a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24e14:	f240 1311 	movw	r3, #273	; 0x111
   24e18:	e7b9      	b.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24e1a:	f44f 7381 	mov.w	r3, #258	; 0x102
   24e1e:	e7b6      	b.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24e20:	2311      	movs	r3, #17
   24e22:	e7b4      	b.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
   24e24:	2306      	movs	r3, #6
   24e26:	e7b2      	b.n	24d8e <nrf91_socket_offload_getaddrinfo+0xcc>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   24e28:	2a0a      	cmp	r2, #10
   24e2a:	d1e4      	bne.n	24df6 <nrf91_socket_offload_getaddrinfo+0x134>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   24e2c:	2018      	movs	r0, #24
   24e2e:	f7fb fc9d 	bl	2076c <k_malloc>
   24e32:	4682      	mov	sl, r0
   24e34:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   24e36:	b190      	cbz	r0, 24e5e <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   24e38:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24e3a:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   24e3c:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   24e40:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   24e42:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24e46:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   24e4a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   24e4c:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   24e50:	f7ff f9c2 	bl	241d8 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   24e54:	f8db 3020 	ldr.w	r3, [fp, #32]
   24e58:	f88a 3014 	strb.w	r3, [sl, #20]
   24e5c:	e7a9      	b.n	24db2 <nrf91_socket_offload_getaddrinfo+0xf0>
			k_free(next_z_res);
   24e5e:	4620      	mov	r0, r4
   24e60:	f000 f8e6 	bl	25030 <k_free>
			retval = DNS_EAI_MEMORY;
   24e64:	f06f 0509 	mvn.w	r5, #9
   24e68:	e75c      	b.n	24d24 <nrf91_socket_offload_getaddrinfo+0x62>
			latest_z_res->ai_next = next_z_res;
   24e6a:	61fc      	str	r4, [r7, #28]
   24e6c:	e7a5      	b.n	24dba <nrf91_socket_offload_getaddrinfo+0xf8>
			return DNS_EAI_SOCKTYPE;
   24e6e:	f06f 0506 	mvn.w	r5, #6
   24e72:	e7a9      	b.n	24dc8 <nrf91_socket_offload_getaddrinfo+0x106>
			return DNS_EAI_ADDRFAMILY;
   24e74:	f06f 0508 	mvn.w	r5, #8
   24e78:	e7a6      	b.n	24dc8 <nrf91_socket_offload_getaddrinfo+0x106>

00024e7a <nrf91_socket_offload_sendto>:
{
   24e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e7e:	b08d      	sub	sp, #52	; 0x34
   24e80:	9c14      	ldr	r4, [sp, #80]	; 0x50
   24e82:	4605      	mov	r5, r0
   24e84:	460e      	mov	r6, r1
   24e86:	4617      	mov	r7, r2
   24e88:	4698      	mov	r8, r3
	if (to == NULL) {
   24e8a:	b96c      	cbnz	r4, 24ea8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   24e8c:	4618      	mov	r0, r3
   24e8e:	f7ff fcd8 	bl	24842 <z_to_nrf_flags>
   24e92:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24e96:	4603      	mov	r3, r0
   24e98:	463a      	mov	r2, r7
   24e9a:	4631      	mov	r1, r6
   24e9c:	4628      	mov	r0, r5
   24e9e:	f7ed f81d 	bl	11edc <nrf_sendto>
}
   24ea2:	b00d      	add	sp, #52	; 0x34
   24ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   24ea8:	8823      	ldrh	r3, [r4, #0]
   24eaa:	2b01      	cmp	r3, #1
   24eac:	d110      	bne.n	24ed0 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   24eae:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24eb0:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   24eb2:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   24eb6:	2302      	movs	r3, #2
   24eb8:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24eba:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   24ebc:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24ebe:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24ec2:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   24ec4:	f7ff fcbd 	bl	24842 <z_to_nrf_flags>
   24ec8:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24eca:	ab03      	add	r3, sp, #12
   24ecc:	9300      	str	r3, [sp, #0]
   24ece:	e7e2      	b.n	24e96 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   24ed0:	2b02      	cmp	r3, #2
   24ed2:	d115      	bne.n	24f00 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   24ed4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24ed6:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   24eda:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   24ede:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24ee0:	2210      	movs	r2, #16
   24ee2:	1d21      	adds	r1, r4, #4
   24ee4:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   24ee6:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24ee8:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24eec:	f7ff f974 	bl	241d8 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24ef0:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24ef2:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24ef4:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24ef6:	f7ff fca4 	bl	24842 <z_to_nrf_flags>
   24efa:	f8cd 9004 	str.w	r9, [sp, #4]
   24efe:	e7e4      	b.n	24eca <nrf91_socket_offload_sendto+0x50>
   24f00:	f7fb f908 	bl	20114 <z_impl_z_errno>
	errno = ENOTSUP;
   24f04:	2323      	movs	r3, #35	; 0x23
   24f06:	6003      	str	r3, [r0, #0]
	return retval;
   24f08:	f04f 30ff 	mov.w	r0, #4294967295
   24f0c:	e7c9      	b.n	24ea2 <nrf91_socket_offload_sendto+0x28>

00024f0e <nrf91_socket_offload_setsockopt>:
{
   24f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   24f12:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   24f16:	b086      	sub	sp, #24
   24f18:	4680      	mov	r8, r0
   24f1a:	460c      	mov	r4, r1
   24f1c:	4617      	mov	r7, r2
   24f1e:	461d      	mov	r5, r3
   24f20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   24f22:	d00d      	beq.n	24f40 <nrf91_socket_offload_setsockopt+0x32>
   24f24:	dc08      	bgt.n	24f38 <nrf91_socket_offload_setsockopt+0x2a>
   24f26:	2901      	cmp	r1, #1
   24f28:	d00a      	beq.n	24f40 <nrf91_socket_offload_setsockopt+0x32>
   24f2a:	f7fb f8f3 	bl	20114 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   24f2e:	232a      	movs	r3, #42	; 0x2a
   24f30:	6003      	str	r3, [r0, #0]
   24f32:	f04f 30ff 	mov.w	r0, #4294967295
   24f36:	e01b      	b.n	24f70 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   24f38:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   24f3c:	2b01      	cmp	r3, #1
   24f3e:	d8f4      	bhi.n	24f2a <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   24f40:	aa03      	add	r2, sp, #12
   24f42:	4639      	mov	r1, r7
   24f44:	4620      	mov	r0, r4
   24f46:	f7eb f907 	bl	10158 <z_to_nrf_optname>
   24f4a:	2800      	cmp	r0, #0
   24f4c:	dbed      	blt.n	24f2a <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   24f4e:	2c01      	cmp	r4, #1
   24f50:	d107      	bne.n	24f62 <nrf91_socket_offload_setsockopt+0x54>
   24f52:	2f14      	cmp	r7, #20
   24f54:	d105      	bne.n	24f62 <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   24f56:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   24f58:	682b      	ldr	r3, [r5, #0]
   24f5a:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   24f5c:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   24f5e:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   24f60:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   24f62:	9600      	str	r6, [sp, #0]
   24f64:	462b      	mov	r3, r5
   24f66:	9a03      	ldr	r2, [sp, #12]
   24f68:	4621      	mov	r1, r4
   24f6a:	4640      	mov	r0, r8
   24f6c:	f7ed f86c 	bl	12048 <nrf_setsockopt>
}
   24f70:	b006      	add	sp, #24
   24f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024f76 <nrf91_socket_offload_bind>:
{
   24f76:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   24f78:	880b      	ldrh	r3, [r1, #0]
{
   24f7a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   24f7c:	2b01      	cmp	r3, #1
{
   24f7e:	4606      	mov	r6, r0
   24f80:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   24f82:	d10e      	bne.n	24fa2 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   24f84:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24f86:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   24f88:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   24f8c:	2302      	movs	r3, #2
   24f8e:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24f90:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24f92:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24f96:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   24f98:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24f9a:	f7ed f843 	bl	12024 <nrf_bind>
}
   24f9e:	b00a      	add	sp, #40	; 0x28
   24fa0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   24fa2:	2b02      	cmp	r3, #2
   24fa4:	d112      	bne.n	24fcc <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   24fa6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24fa8:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   24faa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   24fae:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24fb0:	2210      	movs	r2, #16
   24fb2:	3104      	adds	r1, #4
   24fb4:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   24fb6:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   24fb8:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   24fbc:	f7ff f90c 	bl	241d8 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24fc0:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24fc2:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24fc4:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24fc6:	a901      	add	r1, sp, #4
   24fc8:	4630      	mov	r0, r6
   24fca:	e7e6      	b.n	24f9a <nrf91_socket_offload_bind+0x24>
   24fcc:	f7fb f8a2 	bl	20114 <z_impl_z_errno>
	errno = ENOTSUP;
   24fd0:	2323      	movs	r3, #35	; 0x23
   24fd2:	6003      	str	r3, [r0, #0]
   24fd4:	f04f 30ff 	mov.w	r0, #4294967295
   24fd8:	e7e1      	b.n	24f9e <nrf91_socket_offload_bind+0x28>

00024fda <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   24fda:	6843      	ldr	r3, [r0, #4]
   24fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24fde:	b103      	cbz	r3, 24fe2 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   24fe0:	4718      	bx	r3
}
   24fe2:	4770      	bx	lr

00024fe4 <response_handler>:
	write_uart_string(response);
   24fe4:	4608      	mov	r0, r1
   24fe6:	f7eb b9a7 	b.w	10338 <write_uart_string>

00024fea <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   24fea:	4700      	bx	r0

00024fec <z_arch_system_halt>:
	__asm__ volatile(
   24fec:	f04f 0220 	mov.w	r2, #32
   24ff0:	f3ef 8311 	mrs	r3, BASEPRI
   24ff4:	f382 8811 	msr	BASEPRI, r2
   24ff8:	f3bf 8f6f 	isb	sy
   24ffc:	e7fe      	b.n	24ffc <z_arch_system_halt+0x10>

00024ffe <k_sys_fatal_error_handler>:
{
   24ffe:	b508      	push	{r3, lr}
	z_arch_system_halt(reason);
   25000:	f7ff fff4 	bl	24fec <z_arch_system_halt>

00025004 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   25004:	f7fe bfb5 	b.w	23f72 <z_clock_idle_exit>

00025008 <k_mem_pool_malloc>:
{
   25008:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2500a:	2404      	movs	r4, #4
   2500c:	190a      	adds	r2, r1, r4
   2500e:	d204      	bcs.n	2501a <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   25010:	2300      	movs	r3, #0
   25012:	4669      	mov	r1, sp
   25014:	f7fb fade 	bl	205d4 <k_mem_pool_alloc>
   25018:	b110      	cbz	r0, 25020 <k_mem_pool_malloc+0x18>
		return NULL;
   2501a:	2000      	movs	r0, #0
}
   2501c:	b002      	add	sp, #8
   2501e:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   25020:	4622      	mov	r2, r4
   25022:	a901      	add	r1, sp, #4
   25024:	9800      	ldr	r0, [sp, #0]
   25026:	f7ff f8d7 	bl	241d8 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2502a:	9800      	ldr	r0, [sp, #0]
   2502c:	3004      	adds	r0, #4
   2502e:	e7f5      	b.n	2501c <k_mem_pool_malloc+0x14>

00025030 <k_free>:
	if (ptr != NULL) {
   25030:	b110      	cbz	r0, 25038 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   25032:	3804      	subs	r0, #4
   25034:	f7fb bb3e 	b.w	206b4 <k_mem_pool_free_id>
}
   25038:	4770      	bx	lr

0002503a <z_queue_node_peek>:
{
   2503a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2503c:	4604      	mov	r4, r0
   2503e:	b130      	cbz	r0, 2504e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25040:	6802      	ldr	r2, [r0, #0]
   25042:	0793      	lsls	r3, r2, #30
   25044:	d003      	beq.n	2504e <z_queue_node_peek+0x14>
		ret = anode->data;
   25046:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25048:	b109      	cbz	r1, 2504e <z_queue_node_peek+0x14>
			k_free(anode);
   2504a:	f7ff fff1 	bl	25030 <k_free>
}
   2504e:	4620      	mov	r0, r4
   25050:	bd10      	pop	{r4, pc}

00025052 <z_impl_k_queue_init>:
	list->head = NULL;
   25052:	2300      	movs	r3, #0
	list->tail = NULL;
   25054:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   25058:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2505a:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
   2505e:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   25062:	4770      	bx	lr

00025064 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25064:	460a      	mov	r2, r1
   25066:	2300      	movs	r3, #0
   25068:	6841      	ldr	r1, [r0, #4]
   2506a:	f7fb be9f 	b.w	20dac <queue_insert>

0002506e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2506e:	7b43      	ldrb	r3, [r0, #13]
   25070:	06db      	lsls	r3, r3, #27
   25072:	bf03      	ittte	eq
   25074:	6980      	ldreq	r0, [r0, #24]
   25076:	fab0 f080 	clzeq	r0, r0
   2507a:	0940      	lsreq	r0, r0, #5
   2507c:	2000      	movne	r0, #0
}
   2507e:	4770      	bx	lr

00025080 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   25080:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25084:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25088:	4298      	cmp	r0, r3
   2508a:	bfac      	ite	ge
   2508c:	2000      	movge	r0, #0
   2508e:	2001      	movlt	r0, #1
   25090:	4770      	bx	lr

00025092 <z_reschedule_irqlock>:
{
   25092:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   25094:	4602      	mov	r2, r0
   25096:	b938      	cbnz	r0, 250a8 <z_reschedule_irqlock+0x16>
   25098:	f7fb fffc 	bl	21094 <resched.part.15>
	if (resched(key)) {
   2509c:	b120      	cbz	r0, 250a8 <z_reschedule_irqlock+0x16>
}
   2509e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   250a2:	4610      	mov	r0, r2
   250a4:	f7e8 bdea 	b.w	dc7c <z_arch_swap>
	__asm__ volatile(
   250a8:	f382 8811 	msr	BASEPRI, r2
   250ac:	f3bf 8f6f 	isb	sy
   250b0:	bd08      	pop	{r3, pc}

000250b2 <z_reschedule_unlocked>:
	__asm__ volatile(
   250b2:	f04f 0320 	mov.w	r3, #32
   250b6:	f3ef 8011 	mrs	r0, BASEPRI
   250ba:	f383 8811 	msr	BASEPRI, r3
   250be:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   250c2:	f7ff bfe6 	b.w	25092 <z_reschedule_irqlock>

000250c6 <z_priq_dumb_best>:
	return list->head == list;
   250c6:	6803      	ldr	r3, [r0, #0]
}
   250c8:	4298      	cmp	r0, r3
   250ca:	bf14      	ite	ne
   250cc:	4618      	movne	r0, r3
   250ce:	2000      	moveq	r0, #0
   250d0:	4770      	bx	lr

000250d2 <z_unpend_all>:
{
   250d2:	b570      	push	{r4, r5, r6, lr}
   250d4:	4606      	mov	r6, r0
	int need_sched = 0;
   250d6:	2500      	movs	r5, #0
   250d8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   250da:	42a6      	cmp	r6, r4
   250dc:	d000      	beq.n	250e0 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   250de:	b90c      	cbnz	r4, 250e4 <z_unpend_all+0x12>
}
   250e0:	4628      	mov	r0, r5
   250e2:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   250e4:	4620      	mov	r0, r4
   250e6:	f7fc f9ad 	bl	21444 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   250ea:	4620      	mov	r0, r4
   250ec:	f7ff ffbf 	bl	2506e <z_is_thread_ready>
		need_sched = 1;
   250f0:	2501      	movs	r5, #1
   250f2:	2800      	cmp	r0, #0
   250f4:	d0f0      	beq.n	250d8 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   250f6:	4620      	mov	r0, r4
   250f8:	f7fc fab0 	bl	2165c <z_add_thread_to_ready_q>
   250fc:	e7ec      	b.n	250d8 <z_unpend_all+0x6>

000250fe <z_impl_k_sleep>:
{
   250fe:	b538      	push	{r3, r4, r5, lr}
   25100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   25104:	f240 34e7 	movw	r4, #999	; 0x3e7
   25108:	2500      	movs	r5, #0
   2510a:	fbc1 4500 	smlal	r4, r5, r1, r0
   2510e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25112:	2300      	movs	r3, #0
   25114:	4620      	mov	r0, r4
   25116:	4629      	mov	r1, r5
   25118:	f7e7 f882 	bl	c220 <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
   2511c:	f7fc ff58 	bl	21fd0 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   25120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25124:	fb80 2302 	smull	r2, r3, r0, r2
   25128:	0bd0      	lsrs	r0, r2, #15
}
   2512a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2512e:	bd38      	pop	{r3, r4, r5, pc}

00025130 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25130:	7b43      	ldrb	r3, [r0, #13]
   25132:	06db      	lsls	r3, r3, #27
   25134:	bf03      	ittte	eq
   25136:	6980      	ldreq	r0, [r0, #24]
   25138:	fab0 f080 	clzeq	r0, r0
   2513c:	0940      	lsreq	r0, r0, #5
   2513e:	2000      	movne	r0, #0
}
   25140:	4770      	bx	lr

00025142 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   25142:	f7e8 ba6b 	b.w	d61c <z_arch_busy_wait>

00025146 <z_impl_k_thread_name_set>:
}
   25146:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2514a:	4770      	bx	lr

0002514c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   2514c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2514e:	b510      	push	{r4, lr}
   25150:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   25152:	b103      	cbz	r3, 25156 <z_thread_single_abort+0xa>
		thread->fn_abort();
   25154:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   25156:	4620      	mov	r0, r4
   25158:	f7ff ffea 	bl	25130 <z_is_thread_ready>
   2515c:	b138      	cbz	r0, 2516e <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   2515e:	4620      	mov	r0, r4
   25160:	f7fc fc26 	bl	219b0 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   25164:	7b63      	ldrb	r3, [r4, #13]
   25166:	f043 0308 	orr.w	r3, r3, #8
   2516a:	7363      	strb	r3, [r4, #13]
}
   2516c:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   2516e:	7b63      	ldrb	r3, [r4, #13]
   25170:	079b      	lsls	r3, r3, #30
   25172:	d502      	bpl.n	2517a <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   25174:	4620      	mov	r0, r4
   25176:	f7fc f82b 	bl	211d0 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   2517a:	69a3      	ldr	r3, [r4, #24]
   2517c:	2b00      	cmp	r3, #0
   2517e:	d0f1      	beq.n	25164 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   25180:	f104 0018 	add.w	r0, r4, #24
   25184:	f7fd fb7c 	bl	22880 <z_abort_timeout>
   25188:	e7ec      	b.n	25164 <z_thread_single_abort+0x18>

0002518a <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   2518a:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   2518c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   2518e:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   25190:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   25192:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   25194:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   25198:	4770      	bx	lr

0002519a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   2519a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2519c:	f7fd fcfe 	bl	22b9c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   251a0:	bd08      	pop	{r3, pc}

000251a2 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   251a2:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   251a4:	f7fd fcfa 	bl	22b9c <z_tick_get>
   251a8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   251ac:	fba0 2304 	umull	r2, r3, r0, r4
   251b0:	fb04 3301 	mla	r3, r4, r1, r3
   251b4:	0bd0      	lsrs	r0, r2, #15
}
   251b6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   251ba:	0bd9      	lsrs	r1, r3, #15
   251bc:	bd10      	pop	{r4, pc}

000251be <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   251be:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   251c0:	6884      	ldr	r4, [r0, #8]
{
   251c2:	4605      	mov	r5, r0
   251c4:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   251c6:	b19c      	cbz	r4, 251f0 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   251c8:	68a3      	ldr	r3, [r4, #8]
   251ca:	b95b      	cbnz	r3, 251e4 <signal_poll_event+0x26>
	int retcode = 0;
   251cc:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   251ce:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   251d0:	2300      	movs	r3, #0
   251d2:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   251d4:	68eb      	ldr	r3, [r5, #12]
   251d6:	f3c3 3204 	ubfx	r2, r3, #12, #5
   251da:	4316      	orrs	r6, r2
   251dc:	f366 3310 	bfi	r3, r6, #12, #5
   251e0:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   251e2:	e004      	b.n	251ee <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   251e4:	4798      	blx	r3
		poller->is_polling = false;
   251e6:	2300      	movs	r3, #0
		if (retcode < 0) {
   251e8:	2800      	cmp	r0, #0
		poller->is_polling = false;
   251ea:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   251ec:	daf0      	bge.n	251d0 <signal_poll_event+0x12>
}
   251ee:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   251f0:	4620      	mov	r0, r4
   251f2:	e7ed      	b.n	251d0 <signal_poll_event+0x12>

000251f4 <add_event>:
{
   251f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251f6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   251f8:	e9d0 2300 	ldrd	r2, r3, [r0]
   251fc:	4290      	cmp	r0, r2
   251fe:	4604      	mov	r4, r0
   25200:	460d      	mov	r5, r1
   25202:	d106      	bne.n	25212 <add_event+0x1e>
	node->prev = list->tail;
   25204:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   25206:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   25208:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2520a:	6863      	ldr	r3, [r4, #4]
   2520c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2520e:	6065      	str	r5, [r4, #4]
   25210:	e019      	b.n	25246 <add_event+0x52>
	if ((pending == NULL) ||
   25212:	2b00      	cmp	r3, #0
   25214:	d0f6      	beq.n	25204 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   25216:	689b      	ldr	r3, [r3, #8]
   25218:	6879      	ldr	r1, [r7, #4]
   2521a:	6858      	ldr	r0, [r3, #4]
   2521c:	f7ff ff30 	bl	25080 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   25220:	2800      	cmp	r0, #0
   25222:	d1ef      	bne.n	25204 <add_event+0x10>
	return list->head == list;
   25224:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25226:	42b4      	cmp	r4, r6
   25228:	d0ec      	beq.n	25204 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2522a:	2e00      	cmp	r6, #0
   2522c:	d0ea      	beq.n	25204 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2522e:	68b3      	ldr	r3, [r6, #8]
   25230:	6878      	ldr	r0, [r7, #4]
   25232:	6859      	ldr	r1, [r3, #4]
   25234:	f7ff ff24 	bl	25080 <z_is_t1_higher_prio_than_t2>
   25238:	b130      	cbz	r0, 25248 <add_event+0x54>
	node->prev = successor->prev;
   2523a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2523c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   25240:	6873      	ldr	r3, [r6, #4]
   25242:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25244:	6075      	str	r5, [r6, #4]
}
   25246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   25248:	6863      	ldr	r3, [r4, #4]
   2524a:	429e      	cmp	r6, r3
   2524c:	d0da      	beq.n	25204 <add_event+0x10>
   2524e:	6836      	ldr	r6, [r6, #0]
   25250:	e7eb      	b.n	2522a <add_event+0x36>

00025252 <z_handle_obj_poll_events>:
	return list->head == list;
   25252:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25254:	4298      	cmp	r0, r3
   25256:	d00a      	beq.n	2526e <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   25258:	e9d3 0200 	ldrd	r0, r2, [r3]
   2525c:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2525e:	6818      	ldr	r0, [r3, #0]
   25260:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   25262:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   25264:	4618      	mov	r0, r3
	node->prev = NULL;
   25266:	e9c3 2200 	strd	r2, r2, [r3]
   2526a:	f7ff bfa8 	b.w	251be <signal_poll_event>
	}
}
   2526e:	4770      	bx	lr

00025270 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   25270:	4770      	bx	lr
