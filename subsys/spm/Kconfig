#
# Copyright (c) 2019 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-BSD-5-Clause-Nordic
#

menu "SPM"

config SPM
	bool "Use Secure Partition Manager"
	default y if TRUSTED_EXECUTION_NONSECURE
	select FW_INFO
	imply ARM_FIRMWARE_USES_SECURE_ENTRY_FUNCS

if SPM
module=SPM
source "${ZEPHYR_BASE}/../nrf/subsys/partition_manager/Kconfig.template.build_strategy"
endif


menuconfig IS_SPM
	bool "Current app is SPM"
	default n
	select TRUSTED_EXECUTION_SECURE

if IS_SPM
# Define used by partition_manager.py to deduce size of partition.
# Unable to use the size template due to non-trivial defaults.
config PM_PARTITION_SIZE_SPM
	hex "Flash space reserved for SPM"
	default 0xc000 if SPM_SERVICE_RNG # To build correctly with MCUboot.
	default 0x8000
	help
	  Flash space set aside for the SPM. Note, the name
	  of this configuration needs to match the requirements set by the
	  script 'partition_manager.py'. See pm.yml.

config SPM_BOOT_SILENTLY
	bool "Boot silently"
	default n

config SPM_SECURE_SERVICES
	bool "Enable secure services"
	default y
	select ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS
	help
	  Secure services can be invoked from the Non-Secure Firmware via
	  secure entry functions.

if SPM_SECURE_SERVICES
config SPM_SERVICE_RNG
	bool "Request random numbers"
	default y
	select NORDIC_SECURITY_BACKEND
	select FLOAT

# NORDIC_SECURITY_BACKEND is not supported on 53 yet
	depends on ! SOC_NRF5340_CPUAPP

	help
	  The Non-Secure Firmware is not allowed to use the crypto hardware.
	  This service allows it to request random numbers from the SPM.

config SPM_SERVICE_READ
	bool "Read from memory"
	default y
	help
	  The Non-Secure Firmware is not allowed to read the memory
	  marked as secure. This service allows it to request random
	  read operations within the ranges configured in
	  secure_services.c.

config SPM_SERVICE_REBOOT
	bool "Enable system reset as a secure service"
	default n
	select REBOOT
	help
	  If Non-Secure Firmware is blocked from issuing system reset, this
	  service will allow it to issue a request to do a system reset through
	  a secure service.

config SPM_SERVICE_FIND_FIRMWARE_INFO
	bool "Find firmware info"
	default y
	help
	  The Non-Secure Firmware is not allowed to read the memory
	  marked as secure. This service allows it to request firmware info
	  about image stored at a given address.

endif # SPM_SECURE_SERVICES

config SPM_BLOCK_NON_SECURE_RESET
	bool "Block system reset calls from Non-Secure domain"
	default n #FIXME: Remove mention of debugger with regards to reboot in help text when NRF91-313 has been resolved
	help
	  This will block the application running in Non-Secure from being able
	  to issue a system reset of the chip without going through a secure
	  service. If not enabled, a debugger will not be able to issue a
	  system reset while the core is executing Non-Secure code.

menu "Configure Non-Secure peripherals"

config SPM_NRF_CLOCK_NS
	bool "Clock control is Non-Secure"
	default y

config SPM_NRF_RTC1_NS
	bool "RTC1 is Non-Secure"
	default y

config SPM_NRF_IPC_NS
	bool "IPC is Non-Secure"
	default y

config SPM_NRF_NVMC_NS
	bool "NVMC is Non-Secure"
	default y

config SPM_NRF_VMC_NS
	bool "VMC is Non-Secure"
	default y

config SPM_NRF_P0_NS
	bool "GPIO is Non-Secure"
	default y

config SPM_NRF_GPIOTE1_NS
	bool "GPIOTE1 IRQ available in Non-Secure domain"
	default y

config SPM_NRF_UARTE1_NS
	bool "UARTE1 is Non-Secure"
	default y

config SPM_NRF_UARTE2_NS
	bool "UARTE2 is Non-Secure"
	default n

config SPM_NRF_EGU1_NS
	bool "EGU1 is Non-Secure"
	default y

config SPM_NRF_EGU2_NS
	bool "EGU2 is Non-Secure"
	default y

config SPM_NRF_FPU_NS
	bool "FPU is Non-Secure"
	default y

config SPM_NRF_TWIM2_NS
	bool "TWIM2 is Non-Secure"
	default y

config SPM_NRF_SPIM3_NS
	bool "SPIM3 is Non-Secure"
	default y

config SPM_NRF_TIMER0_NS
	bool "TIMER0 is Non-Secure"
	default y

config SPM_NRF_TIMER1_NS
	bool "TIMER1 is Non-Secure"
	default y

config SPM_NRF_TIMER2_NS
	bool "TIMER2 is Non-Secure"
	default y

config SPM_NRF_SAADC_NS
	bool "SAADC is Non-Secure"
	default y

config SPM_NRF_PWM0_NS
	bool "PWM0 is Non-Secure"
	default y

config SPM_NRF_PWM1_NS
	bool "PWM1 is Non-Secure"
	default y

config SPM_NRF_PWM2_NS
	bool "PWM2 is Non-Secure"
	default y

config SPM_NRF_PWM3_NS
	bool "PWM3 is Non-Secure"
	default y

config SPM_NRF_REGULATORS_NS
	bool "Regulators is Non-Secure"
	default y

config SPM_NRF_WDT_NS
	bool "WDT is Non-Secure"
	default n
endmenu

config SPM_NRF_DPPIC_NS
	bool "DPPIC is Non-Secure"
	default y

config SPM_NRF_DPPIC_PERM_MASK
	hex "Set DPPIC PERM mask for Non-secure"
	default 0x00000000
	depends on SPM_NRF_DPPIC_NS
	help
	  The input mask is a mirror of the permission bits set in
	  register SPU.DPPI.PERM[] to allow non-secure application to
	  control DPPIC per the given input mask.
	  The default value is to allow all DPPI channels to non-secure region.

endif # IS_SPM

endmenu

# Set new default name for the veneers file.

if ARM_FIRMWARE_USES_SECURE_ENTRY_FUNCS
config ARM_ENTRY_VENEERS_LIB_NAME
	string "Entry Veneers symbol file"
	default "spm/libspmsecureentries.a"
endif

if ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS
config ARM_ENTRY_VENEERS_LIB_NAME
	string "Entry Veneers symbol file"
	default "libspmsecureentries.a"
endif
