/*
 * Copyright (c) 2019-2022 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

#ifndef LWM2M_CARRIER_H__
#define LWM2M_CARRIER_H__

/**
 * @file lwm2m_carrier.h
 */


#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @defgroup lwm2m_carrier_events LwM2M carrier library events
 *
 * Events generated by the carrier library
 *
 * The @ref lwm2m_carrier_event_handler() function may be implemented by your application.
 * A `__weak` implementation is included in `lwm2m_carrier.c`.
 *
 * @{
 */

/**
 * @anchor lwm2m_carrier_event_values
 * @name LwM2M carrier library events
 * Used in @ref lwm2m_carrier_event_t::type
 *
 * @{
 */

/** This event indicates that the device must connect to the LTE network.
 *
 *  This event is triggered:
 *    - During a bootstrap process after writing keys.
 *    - During a firmware update after clearing flash or in case of @ref LWM2M_CARRIER_VERIZON after
 *      changing the preferred bearer.
 *    - When the application calls @ref lwm2m_carrier_request() with @ref
 *      LWM2M_CARRIER_REQUEST_LINK_UP.
 */
#define LWM2M_CARRIER_EVENT_LTE_LINK_UP	     1

/** This event indicates that the device must disconnect from the LTE network.
 *  The link must be offline until a subsequent \ref LWM2M_CARRIER_EVENT_LTE_LINK_UP event.
 *
 *  This event is triggered:
 *    - During a bootstrap process before writing keys.
 *    - During a firmware update before clearing flash and in case of @ref LWM2M_CARRIER_VERIZON
 *      before changing preferred bearer.
 *    - When the application calls @ref lwm2m_carrier_request() with @ref
 *      LWM2M_CARRIER_REQUEST_LINK_DOWN.
 */
#define LWM2M_CARRIER_EVENT_LTE_LINK_DOWN    2

/** This event indicates that the device must power off the modem.
 *
 *  This event is triggered:
 *    - Before a reboot.
 *    - Before a modem shutdown when applying a new modem firmware.
 */
#define LWM2M_CARRIER_EVENT_LTE_POWER_OFF    3

/** This event indicates that the bootstrap sequence is complete, and that the device is ready to be
 *  registered. This event is just for your information, nothing needs to be done.
 *
 *  This event is triggered for carriers that use a bootstrap server (all except @ref
 *  LWM2M_CARRIER_SOFTBANK):
 *    - In case of @ref LWM2M_CARRIER_LG_UPLUS at every startup.
 *    - For all other carriers only at first startup.
 *    - After doing a full erase of the flash (same as "first startup").
 *    - After switching SIM card to a different carrier that uses a bootstrap server.
 *    - After the server has executed the OMA LwM2M `Server` object `Bootstrap-request trigger`
 *      resource (/1/x/9).
 *    - After the server has executed the OMA LwM2M `Device` object `Factory Reset` resource
 *      (/3/0/5).
 */
#define LWM2M_CARRIER_EVENT_BOOTSTRAPPED     4

/** This event indicates that the device has registered successfully to the carrier’s device
 *  management servers. This means the connection to the server has been set up successfully and the
 *  server can now start to read, write and execute LwM2M resources.
 *  This event is just for your information, nothing needs to be done.
 *
 *  It can be used as an indication that the LwM2M carrier library is done asking the application to
 *  @ref LWM2M_CARRIER_EVENT_LTE_LINK_UP and @ref LWM2M_CARRIER_EVENT_LTE_LINK_DOWN.
 *  D(TLS) connection setups will not be needed by the carrier library until the server
 *  issues an operation such as a firmware update.
 *
 *  This event is triggered for the first successful registration to the server:
 *    - After a reboot.
 *    - After the application calls @ref LWM2M_CARRIER_REQUEST_REGISTER using @ref
 *      lwm2m_carrier_request() while the server was not registered.
 *    - After the server has executed the OMA LwM2M `Device` object `Factory Reset` resource
 *      (/3/0/5).
 */
#define LWM2M_CARRIER_EVENT_REGISTERED	     5

/** This event indicates that the device has successfully deregistered from the carrier’s device
 *  management servers. This event is just for your information, nothing needs to be done.
 *
 *  This event is triggered:
 *    - After the application calls @ref LWM2M_CARRIER_REQUEST_DEREGISTER using @ref
 *      lwm2m_carrier_request().
 *    - After the application calls @ref LWM2M_CARRIER_REQUEST_LINK_DOWN using @ref
 *      lwm2m_carrier_request() for the carriers @ref LWM2M_CARRIER_LG_UPLUS and @ref
 *      LWM2M_CARRIER_SOFTBANK.
 */
#define LWM2M_CARRIER_EVENT_DEREGISTERED     6

/** This event indicates that the connection to the device management server has failed and will be
 *  retried later. This event is just for your information, nothing needs to be done.
 *
 *  The @ref LWM2M_CARRIER_EVENT_DEFERRED event can appear instead of the @ref
 *  LWM2M_CARRIER_EVENT_BOOTSTRAPPED or the @ref LWM2M_CARRIER_EVENT_REGISTERED event.
 *
 *  @ref lwm2m_carrier_event_t::data contains @ref lwm2m_carrier_event_deferred_t to indicate what
 *  triggered the event.
 */
#define LWM2M_CARRIER_EVENT_DEFERRED	     7

/** This event indicates that the firmware update has started.
 *
 *  The application must immediately terminate any open TLS and DTLS sessions. The download
 *  might happen on a secure socket, which is a limited modem resource.
 *
 *  @ref lwm2m_carrier_event_t::data contains @ref lwm2m_carrier_event_fota_start_t.
 *
 *  This event is triggered:
 *    - When the server pushes a firmware package to the OMA LwM2M `Firmware` object `Package`
 *      resource (/5/0/0). In this case, @ref lwm2m_carrier_event_fota_start_t is empty.
 *    - When the server writes a URI to the OMA LwM2M `Firmware` object `Package URI` resource
 *      (/5/0/1). In this case, @ref lwm2m_carrier_event_fota_start_t contains the URI of the package
 *      that will be downloaded.
 */
#define LWM2M_CARRIER_EVENT_FOTA_START	     8

/** This event indicates that the FOTA procedure was successful.
 *  This event is just for your information, nothing needs to be done.
 */
#define LWM2M_CARRIER_EVENT_FOTA_SUCCESS     9

/** This event indicates that the LwM2M carrier library will reboot the device.
 *  If the application is not ready to reboot, it must return non-zero and then reboot at the
 *  earliest convenient time.
 *
 *  This event is triggered:
 *    - After switching SIM to a different carrier.
 *    - After the server has executed the OMA LwM2M `Firmware` object `Update` resource (/5/0/2)
 *      when an application update is performed.
 *    - After the server has executed the OMA LwM2M `Device` object `Reboot` resource (/3/0/4).
 */
#define LWM2M_CARRIER_EVENT_REBOOT	     10

/** This event indicates a modem domain event.
 *  This event is just for your information, nothing needs to be done.
 *
 *  @ref lwm2m_carrier_event_t::data contains @ref lwm2m_carrier_event_modem_domain_t to indicate
 *  what triggered the event.
 *
 * @note Deprecated, you can instead get this information from the link controller library.
 */
#define LWM2M_CARRIER_EVENT_MODEM_DOMAIN     11

/** This event indicates that data was received through the App Data Container object or the Binary
 *  App Data Container object.
 *
 *  This event is triggered:
 *    - After the server has written to the OMA LwM2M `BinaryAppDataContainer` object `Data`
 *      resource (/19/x/0/y).
 *    - After the server has written to the Huawei LwM2M `App Data Container` object `Data`
 *      resource (/10250/0/1).
 *
 *  @ref lwm2m_carrier_event_t::data contains @ref lwm2m_carrier_event_app_data_t.
 */
#define LWM2M_CARRIER_EVENT_APP_DATA	     12

/** This event indicates that the application must initialize the modem for the LwM2M carrier
 *  library to proceed.
 *
 *  This event is triggered:
 *    - During FOTA procedures to reinitialize the Modem library integration layer.
 */
#define LWM2M_CARRIER_EVENT_MODEM_INIT	     13

/** This event indicates that the application must shut down the modem for the LwM2M carrier
 *  library to proceed.
 *
 *  This event is triggered:
 *    - During FOTA procedures to reinitialize the Modem library integration layer.
 */
#define LWM2M_CARRIER_EVENT_MODEM_SHUTDOWN   14

/** This event indicates that the server has reset the error codes resource in the OMA LwM2M
 *  `Device` object `Error Code` resource (/3/0/11).
 *  The errors should be re-evaluated and set again if they still apply.
 *  The relevant APIs for setting the error codes are @ref lwm2m_carrier_error_code_add() and @ref
 *  lwm2m_carrier_error_code_remove().
 *
 *  This event is triggered:
 *    - After the server has executed the OMA LwM2M `Device` object `Reset Error Code` resource
 *      (/3/0/12).
 */
#define LWM2M_CARRIER_EVENT_ERROR_CODE_RESET 15

/** This event indicates an error.
 *  This event is just for your information, no logic is needed in the application to resolve the
 *  error. During development this likely indicates a misconfiguration that needs to be resolved.
 *
 *  @ref lwm2m_carrier_event_t::data contains @ref lwm2m_carrier_event_error_t to indicate what
 *  triggered the error using @ref lwm2m_carrier_error_values.
 */
#define LWM2M_CARRIER_EVENT_ERROR	     20
/** @} */

/**
 * LwM2M carrier library firmware update event structure.
 * Used for @ref LWM2M_CARRIER_EVENT_FOTA_START.
 */
typedef struct {
	/** URI from where the firmware will be downloaded. Set to NULL if no URI will be used. */
	const char *uri;
} lwm2m_carrier_event_fota_start_t;

/**
 * @anchor lwm2m_carrier_modem_events_values
 * @name LwM2M carrier library modem domain event types
 * @{
 */
/** Mobile Equipment (ME) is overheated and therefore the modem is deactivated. */
#define LWM2M_CARRIER_MODEM_EVENT_ME_OVERHEATED  0
/** Mobile Equipment (ME) battery voltage is low and therefore the modem is deactivated. */
#define LWM2M_CARRIER_MODEM_EVENT_ME_BATTERY_LOW 1
/** Modem has detected a reset loop and will restrict Attach attempts for the next 30 minutes. */
#define LWM2M_CARRIER_MODEM_EVENT_RESET_LOOP	 2
/** @} */

/**
 * LwM2M carrier library modem domain event type @ref lwm2m_carrier_modem_events_values.
 * Used for @ref LWM2M_CARRIER_EVENT_MODEM_DOMAIN.
 */
typedef uint32_t lwm2m_carrier_event_modem_domain_t;

/**
 * @anchor lwm2m_carrier_app_data_event_values
 * @name LwM2M carrier library app data event types
 * Used in @ref lwm2m_carrier_event_app_data_t::type.
 * @{
 */
/** Data was written to a resource in an app data container object. */
#define LWM2M_CARRIER_APP_DATA_EVENT_DATA_WRITE    0
/** An observation has started on a resource in an app data container object. */
#define LWM2M_CARRIER_APP_DATA_EVENT_OBSERVE_START 1
/** An observation has stopped on a resource in an app data container object. */
#define LWM2M_CARRIER_APP_DATA_EVENT_OBSERVE_STOP  2
/** @} */

/**
 * LwM2M carrier library app data event structure.
 * Used for @ref LWM2M_CARRIER_EVENT_APP_DATA.
 */
typedef struct {
	/** Buffer containing received application data. */
	const uint8_t *buffer;
	/** Number of bytes received. */
	size_t buffer_len;
	/** Path to the resource or resource instance that received the data. The first value will
	 *  be either @ref LWM2M_CARRIER_OBJECT_BINARY_APP_DATA_CONTAINER or
	 *  @ref LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER.
	 */
	uint16_t path[4];
	/** Length of the path. */
	uint8_t path_len;
	/** @ref lwm2m_carrier_app_data_event_values. */
	uint8_t type;
} lwm2m_carrier_event_app_data_t;

/**
 * @anchor lwm2m_carrier_deferred_values
 * @name LwM2M carrier library event deferred reasons
 * Used in @ref lwm2m_carrier_event_deferred_t::reason
 * @{
 */

/** No reason given. */
#define LWM2M_CARRIER_DEFERRED_NO_REASON	   0

/** Failed to activate PDN.
 *  This event indicates a problem with the SIM card, or temporary network problems. If this persists,
 *  contact the carrier.
 */
#define LWM2M_CARRIER_DEFERRED_PDN_ACTIVATE	   1

/** No route to bootstrap server.
 *  There is a routing problem in the carrier network. If this event persists, contact the carrier.
 */
#define LWM2M_CARRIER_DEFERRED_BOOTSTRAP_NO_ROUTE  2

/** Failed to connect to bootstrap server.
 *  The DTLS handshake with the bootstrap server has failed. If the application is using a custom
 *  PSK, verify that the format is correct.
 */
#define LWM2M_CARRIER_DEFERRED_BOOTSTRAP_CONNECT   3

/** Bootstrap sequence not completed.
 *  The bootstrap sequence is incomplete. The server failed either to acknowledge the request by the
 *  library, or to send objects to the library. Confirm that the carrier is aware of the IMEI.
 */
#define LWM2M_CARRIER_DEFERRED_BOOTSTRAP_SEQUENCE  4

/** No route to server.
 *  There is a routing problem in the carrier network. If this event persists, contact the carrier.
 */
#define LWM2M_CARRIER_DEFERRED_SERVER_NO_ROUTE	   5

/** Failed to connect to server.
 *  This event indicates that the DTLS handshake with the server has failed. This typically happens
 *  if the bootstrap sequence has failed on the carrier side.
*/
#define LWM2M_CARRIER_DEFERRED_SERVER_CONNECT	   6

/** Server registration sequence not completed.
 *  The server registration has not completed, and the server does not recognize the connecting
 *  device. If this event persists, contact the carrier.
 */
#define LWM2M_CARRIER_DEFERRED_SERVER_REGISTRATION 7

/** Server in maintenance mode.
 *  The server is unavailable, for example due to maintenance. In the Verizon network, this event
 *  can be triggered by the server to block excessive numbers of bootstrap and connections.
 */
#define LWM2M_CARRIER_DEFERRED_SERVICE_UNAVAILABLE 8

/** Waiting for SIM MSISDN.
 *  The device is waiting for the SIM MSISDN to be available to read.
 */
#define LWM2M_CARRIER_DEFERRED_SIM_MSISDN	   9
/** @} */

/**
 * LwM2M carrier library deferred event structure.
 * Used for @ref LWM2M_CARRIER_EVENT_DEFERRED.
 */
typedef struct {
	/** @ref lwm2m_carrier_deferred_values. */
	uint32_t reason;
	/** Time before the LwM2M carrier library will retry the connection (seconds). */
	int32_t timeout;
} lwm2m_carrier_event_deferred_t;

/**
 * @anchor lwm2m_carrier_error_values
 * @name LwM2M carrier library event error types
 * Used in @ref lwm2m_carrier_event_error_t::type.
 * @{
 */
/** No error. */
#define LWM2M_CARRIER_ERROR_NO_ERROR		0
/** Failed to connect to the LTE network. */
#define LWM2M_CARRIER_ERROR_LTE_LINK_UP_FAIL	1
/** Failed to disconnect from the LTE network. */
#define LWM2M_CARRIER_ERROR_LTE_LINK_DOWN_FAIL	2
/** LwM2M carrier bootstrap failed. */
#define LWM2M_CARRIER_ERROR_BOOTSTRAP		3
/**
 * Firmware update failed. Possible values:
 *   - -ECONNREFUSED  Connection refused using available security tags.
 *   - -EINVAL        Update image integrity check failed.
 *   - -E2BIG         Provided URL is too large.
 *   - -EFBIG         Update image is too large.
 *   - -ENOMEM        Insufficient RAM to handle the firmware update.
 *   - -ENOTSUP       Update image is not supported or not recognized.
 *   - -EBADR         Wrong request (invalid message or state).
 *   - -ETIMEDOUT     Update image download timed out.
 *   - -ECANCELED     Update was aborted by the server.
 *   - -ENETDOWN      Update image download cannot be resumed after losing connection.
 *   - -ENETUNREACH   Requested network or host is not reachable.
 *   - -EFAULT        Failed to apply the firmware update.
 *   - -EIO           Internal error, for example, an unknown error from an external module.
 */
#define LWM2M_CARRIER_ERROR_FOTA_FAIL		4
/**
 * Illegal LwM2M carrier library configuration. Possible values:
 *   - -E2BIG    Configurable string exceeds the maximum allowed length.
 *   - -EFAULT   Invalid operator-specific configuration (for example, missing service code
 *               when configured to run in LG U+ network).
 *   - -ENOENT   Configured sec_tag does not exist in the modem.
 *   - -EINVAL   Illegal server URI (for example, invalid protocol).
 *   - -EBADR    Invalid server binding or PDN type.
 */
#define LWM2M_CARRIER_ERROR_CONFIGURATION	5
/**
 * LwM2M carrier library initialization failed. Possible values:
 *   - -EIO     Unhandled error from an external module. For example, an unknown modem
 *              initialization result.
 *   - -EACCES  Failed to initialize a semaphore.
 *   - -ENOMEM  Insufficient OS resources. For example, an insufficient number of timers.
 */
#define LWM2M_CARRIER_ERROR_INIT                6
/**
 * LwM2M carrier connect failed. Possible values:
 *   - -EHOSTUNREACH   Exhausted all connection attempts to a server. The LwM2M carrier library will
 *                     restart the connection attempts once the device reboots.
 *   - -ENOTSUP        The detected Subscriber ID is not supported. Check if this network operator
 *                     requires the LwM2M carrier library.
 *   - -EPERM          Not allowed to connect due to unfulfilled carrier requirements. This
 *                     typically happens due to the characteristics of the network that the device
 *                     is currently registered to. For example, not allowed to connect to current
 *                     carrier's servers while roaming.
 */
#define LWM2M_CARRIER_ERROR_CONNECT		8
/** @} */

/**
 * LwM2M carrier library error event structure.
 * Used for @ref LWM2M_CARRIER_EVENT_ERROR.
 */
typedef struct {
	/** @ref lwm2m_carrier_error_values. */
	uint32_t type;
	/** Error event value. */
	int32_t value;
} lwm2m_carrier_event_error_t;

/**
 * LwM2M carrier library event structure.
 * Used to pass on events through @ref lwm2m_carrier_event_handler().
 */
typedef struct {
	/** @ref lwm2m_carrier_event_values */
	uint32_t type;
	/** Pointer to event data, according to event type. */
	union {
		/** @ref LWM2M_CARRIER_EVENT_FOTA_START */
		lwm2m_carrier_event_fota_start_t *fota_start;
		/** @ref LWM2M_CARRIER_EVENT_MODEM_DOMAIN */
		lwm2m_carrier_event_modem_domain_t *modem_domain;
		/** @ref LWM2M_CARRIER_EVENT_APP_DATA */
		lwm2m_carrier_event_app_data_t *app_data;
		/** @ref LWM2M_CARRIER_EVENT_DEFERRED */
		lwm2m_carrier_event_deferred_t *deferred;
		/** @ref LWM2M_CARRIER_EVENT_ERROR */
		lwm2m_carrier_event_error_t *error;
		/** For all other event types, it will be set to NULL. */
	} data;
} lwm2m_carrier_event_t;

/**
 * LwM2M carrier library event handler.
 *
 * This function will be called by the LwM2M carrier library whenever some event significant for the
 * application occurs.
 *
 * @note This function has to be implemented by the application.
 *
 * @param[in] event LwM2M carrier event that occurred.
 *
 * @return  In case of @ref LWM2M_CARRIER_EVENT_REBOOT events if non-zero is returned, the LwM2M
 *          carrier library will not reboot the device. The application should reboot at the
 *          earliest convenient time.
 */
int lwm2m_carrier_event_handler(const lwm2m_carrier_event_t *event);

/** @} */

/**
 * @defgroup lwm2m_carrier_init LwM2M carrier library startup
 *
 * You can configure the carrier library startup using the structs and macros defined here.
 *
 * When calling @ref lwm2m_carrier_main you can either give `NULL` as a parameter to use
 * default settings, or give a @ref lwm2m_carrier_config_t to use custom settings. For example to
 * connect to a different server than the factory default, carrier defined servers.
 * @{
 */

/**
 * @anchor lwm2m_carrier_carriers_values
 * @name LwM2M enabled carriers
 *
 * To be set in @ref lwm2m_carrier_config_t::carriers_enabled.
 * @{
 */
/** If the detected SIM Subscriber ID does not match any of the enabled carriers,
 *  the LwM2M carrier library will run in generic mode and connect to a custom server.
 *  See @ref lwm2m_carrier_config_t::server_uri.
 */
#define LWM2M_CARRIER_GENERIC		0x00000001

/** If the Verizon SIM Subscriber ID is detected (device is in the Verizon network),
 *  the LwM2M Carrier library will connect to a LwM2M Device Management server specified by
 *  Verizon.
 */
#define LWM2M_CARRIER_VERIZON		0x00000002

/** If the LG U+ SIM Subscriber ID is detected (device is in the LG U+ network),
 *  the LwM2M Carrier library will connect to a LwM2M Device Management server specified by
 *  LG U+.
 */
#define LWM2M_CARRIER_LG_UPLUS		0x00000008

/** If the T-Mobile SIM Subscriber ID is detected (device is in the T-Mobile network),
 *  the LwM2M Carrier library will connect to a LwM2M Device Management server specified by
 *  T-Mobile.
 */
#define LWM2M_CARRIER_T_MOBILE		0x00000010

/** If the Softbank SIM Subscriber ID is detected (device is in the Softbank network),
 *  the LwM2M Carrier library will connect to a LwM2M Device Management server specified by
 *  Softbank.
 */
#define LWM2M_CARRIER_SOFTBANK		0x00000020

/** If the Bell Canada SIM Subscriber ID is detected (device is in the Bell Canada network),
 *  the LwM2M Carrier library will connect to a LwM2M Device Management server specified by
 *  Bell Canada.
 */
#define LWM2M_CARRIER_BELL_CA		0x00000040
/** @} */

/**
 * @anchor lwm2m_carrier_server_binding_values
 * @name LwM2M Server binding
 *
 * To be set in @ref lwm2m_carrier_config_t::server_binding.
 * @{
 */
/** Allow the server to connect using UDP. */
#define LWM2M_CARRIER_SERVER_BINDING_UDP	0x01
/** Allow the server to connect using Non-IP. */
#define LWM2M_CARRIER_SERVER_BINDING_NONIP	0x02
/** @} */

/**
 * @anchor lwm2m_carrier_pdn_type_values
 * @name PDN types
 *
 * To be set in @ref lwm2m_carrier_config_t::pdn_type.
 * @{
 */
/** Both IPv4 and IPv6 are supported on this PDN. */
#define LWM2M_CARRIER_PDN_TYPE_IPV4V6 0
/** Only IPv4 is supported on this PDN. */
#define LWM2M_CARRIER_PDN_TYPE_IPV4   1
/** Only IPv6 is supported on this PDN. */
#define LWM2M_CARRIER_PDN_TYPE_IPV6   2
/** Only Non-IP (NIDD) is on this PDN. */
#define LWM2M_CARRIER_PDN_TYPE_NONIP  3
/** @} */

/**
 * @anchor lwm2m_carrier_lg_uplus_device_serial_no_values
 * @name LG U+ Device Serial Number types
 *
 * To be set in @ref lwm2m_carrier_lg_uplus_config_t::device_serial_no_type.
 * @{
 */
/** Use the IMEI as the serial number for identification to the LG U+ network. */
#define LWM2M_CARRIER_LG_UPLUS_DEVICE_SERIAL_NO_IMEI 0
/** Use the the two-dimensional barcode etched on top of the module as the serial number for
 *  identification in the LG U+ network. */
#define LWM2M_CARRIER_LG_UPLUS_DEVICE_SERIAL_NO_2DID 1
/** @} */

/**
 * LG U+ configuration structure.
 * To be set in @ref lwm2m_carrier_config_t::lg_uplus.
 */
typedef struct {
	/** LG U+ Service Code registered for this device. Null-terminated string of at most
	 *  5 characters.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_LG_UPLUS_SERVICE_CODE.
	 */
	const char *service_code;
	/** Indicates the type of Device Serial Number to be used in the LG U+ network.
	 *  See @ref lwm2m_carrier_lg_uplus_device_serial_no_values.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_LG_UPLUS_DEVICE_SERIAL_NUMBER.
	 */
	uint8_t device_serial_no_type;
} lwm2m_carrier_lg_uplus_config_t;

/**
 * Structure holding LwM2M carrier library initialization parameters.
 * Used as a parameter when calling @ref lwm2m_carrier_main().
 */
typedef struct {

	/** Configure enabled carriers.
	 *
	 * This configuration allows you to choose the networks on which the carrier library will
	 * apply. It also determines the working of the following server configurations:
	 *   - @ref lwm2m_carrier_config_t::server_uri
	 *   - @ref lwm2m_carrier_config_t::is_bootstrap_server
	 *   - @ref lwm2m_carrier_config_t::server_sec_tag
	 *   - @ref lwm2m_carrier_config_t::server_binding
	 *   - @ref lwm2m_carrier_config_t::server_lifetime
	 *
	 * These server configurations will:
	 *   - configure a custom server when @ref LWM2M_CARRIER_GENERIC is set,
	 *   - overwrite the factory bootstrap configuration if **only one** carrier is selected,
	 *   - be ignored if multiple carriers are selected but not @ref LWM2M_CARRIER_GENERIC
	 *     (default).
	 *
	 * See @ref lwm2m_carrier_carriers_values. All carriers are enabled when no bits are set.
	 *
	 * @note using `lwm2m_carrier.c` these carriers can be set using kconfig
	 *   - CONFIG_LWM2M_CARRIER_GENERIC
	 *   - CONFIG_LWM2M_CARRIER_VERIZON
	 *   - CONFIG_LWM2M_CARRIER_BELL_CA
	 *   - CONFIG_LWM2M_CARRIER_LG_UPLUS
	 *   - CONFIG_LWM2M_CARRIER_T_MOBILE
	 *   - CONFIG_LWM2M_CARRIER_SOFTBANK
	 */
	uint32_t carriers_enabled;

	/** This configuration allows you to disable automatic registration upon LTE Attach.
	 *
	 *  This option is only used for @ref LWM2M_CARRIER_GENERIC and @ref LWM2M_CARRIER_SOFTBANK.
	 *  In other carriers you are not allowed to disable automatic registration.
	 *
	 *  When this option is set you need to manually register using
	 *  @ref LWM2M_CARRIER_REQUEST_REGISTER.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_AUTO_REGISTER to false.
	 */
	bool disable_auto_register;

	/** This configuration allows you to disable queue mode.
	 *
	 *  By default the library will inform the LwM2M Server that it may be disconnected for an
	 *  extended period of time. The server will then queue their requests until the library
	 *  does a registration update.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_QUEUE_MODE to false.
	 */
	bool disable_queue_mode;

	/** Denotes whether @ref lwm2m_carrier_config_t::server_uri is an LwM2M Bootstrap-Server.
	 *
	 *  This configuration is ignored if @ref lwm2m_carrier_config_t::server_uri is not set.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_IS_BOOTSTRAP_SERVER.
	 */
	bool is_bootstrap_server;

	/** This configuration lets the LwM2M carrier library connect to a custom server other than
	 *  the normal carrier server and enables the generic mode if used in an operator network
	 *  that is not supported.
	 *  Null-terminated string of max 255 characters.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_CUSTOM_URI.
	 */
	const char *server_uri;

	/** This configuration provides the library with a security tag. The security tag must
	 *  contain a PSK, and can additionally contain a PSK identity.
	 *
	 *  This configuration should normally be left empty (0) unless stated by the operator, or
	 *  when connecting to a custom URI.
	 *
	 *  - If left empty, the library will automatically apply the correct PSK and PSK identity for
	 *    the carrier device management server, depending on the detected SIM Subscriber ID.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_SERVER_SEC_TAG.
	 */
	uint32_t server_sec_tag;

	/** This configuration can be used to overwrite the server binding.
	 *  See @ref lwm2m_carrier_server_binding_values.
	 *
	 *  This configuration is ignored if a bootstrap server is configured
	 *  (either by the carrier's factory configuration, or by
	 *  @ref lwm2m_carrier_config_t::is_bootstrap_server.)
	 *
	 *  If UDP binding is configured, a URI must also be set @ref
	 *  lwm2m_carrier_config_t::server_uri.
	 *
	 *  The APN (either network default, or the one set with @ref lwm2m_carrier_config_t::apn)
	 *  must be UDP (IP) or non-IP respectively.
	 *
	 *  - If this configuration is left empty (0) the factory configuration is used. This can be
	 *    different for each supported carrier. For generic operation
	 *    (@ref LWM2M_CARRIER_GENERIC), the default is @ref LWM2M_CARRIER_SERVER_BINDING_UDP.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_SERVER_BINDING.
	 */
	uint8_t server_binding;

	/** This configuration specifies the lifetime of the LwM2M Server.
	 *
	 *  This configuration is ignored if a bootstrap server is configured (either by our
	 *  factory configuration, or by @ref lwm2m_carrier_config_t::is_bootstrap_server.
	 *
	 *  - If this configuration is left empty (0) the factory configuration is used. This can be
	 *    different for each supported carrier. For generic operation
	 *    (@ref LWM2M_CARRIER_GENERIC), the default is 1 hour.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_SERVER_LIFETIME.
	 */
	int32_t server_lifetime;

	/** This configuration specifies the session idle (inactivity) timeout.
	 *
	 *  Upon timeout two things can happen:
	 *    1. If a secure session is used, the LwM2M carrier library closes the DTLS session. A
	 *       new DTLS session will be created on the next activity (for example, lifetime
	 *       trigger). This does not apply when the DTLS session is using Connection ID.
	 *    2. If a non-default PDP context (CID different than 0) is used, and there is no
	 *       activity scheduled within 15 minutes, the PDP context is released.
	 *
	 *    - Leaving this configuration empty (0) sets it to a default of 60 seconds.
	 *    - Setting this configuration to -1 disables the session idle timeout.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_SESSION_IDLE_TIMEOUT.
	 */
	int32_t session_idle_timeout;

	/** This configuration specifies how often to send a Confirmable (CON) message instead of a
	 *  Non-Confirmable (NON) message, according to RFC 7641 section 4.5.
	 *
	 *   - Leaving this configuration empty (0) sets it to a default of 24 hours.
	 *   - Setting this to -1 will always use Confirmable notifications.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_COAP_CON_INTERVAL.
	 */
	int32_t coap_con_interval;

	/** This configuration specifies the time (in minutes) allowed for a single firmware image
	 *  download.
	 *
	 *  If the download is not completed by the time the specified number of minutes elapses,
	 *  the download shall be aborted.
	 *  This configuration is only supported for Push delivery method of firmware images.
	 *
	 *   - Leaving this configuration empty (0) sets the timer to 30 minutes for the SoftBank
	 *     subscriber ID, and disables it for all other subscriber IDs.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_FIRMWARE_DOWNLOAD_TIMEOUT.
	 */
	uint16_t firmware_download_timeout;

	/** This configuration can provide an APN to use instead of the default APN.
	 *
	 *  For @ref LWM2M_CARRIER_VERIZON this configuration is ignored.
	 *
	 *  Null-terminated string of max 63 characters.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_CUSTOM_APN.
	 */
	const char *apn;

	/** This configuration selects the PDN type of the custom APN @ref
	 *  lwm2m_carrier_config_t::apn.
	 *
	 *  See @ref lwm2m_carrier_pdn_type_values.
	 *
	 *    - The default is @ref LWM2M_CARRIER_PDN_TYPE_IPV4V6.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_PDN_TYPE.
	 */
	uint8_t pdn_type;

	/** This configuration allows you to override the `Manufacturer resource` in the OMA LwM2M
	 *  `Device` object (/3/0/0).
	 *  This is only allowed for @ref LWM2M_CARRIER_LG_UPLUS and @ref LWM2M_CARRIER_GENERIC.
	 *
	 *  Null-terminated string of max 32 characters.
	 *
	 *   - By default the manufacturer is read from the modem: "Nordic Semiconductor ASA".
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_DEVICE_MANUFACTURER.
	 */
	const char *manufacturer;

	/** This configuration allows you to override the `Model Number` resource in the OMA LwM2M
	 *  `Device` object (/3/0/1).
	 *  This is only allowed for @ref LWM2M_CARRIER_LG_UPLUS and @ref LWM2M_CARRIER_GENERIC.
	 *
	 *  Null-terminated string of max 32 characters.
	 *
	 *   - By default the model_number is read from the modem, for example: "nRF9160".
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_DEVICE_MODEL_NUMBER.
	 */
	const char *model_number;

	/** This configuration allows you to override the `Device Type` resource in the OMA LwM2M
	 *  `Device` object (/3/0/17).
	 *
	 *  Null-terminated string of max 32 characters.
	 *
	 *   - By default the device_type is set to "Module".
	 *   - For @ref LWM2M_CARRIER_SOFTBANK the device_type cannot be set and is always the IMEI.
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_DEVICE_TYPE.
	 */
	const char *device_type;

	/** This configuration allows you to override the `Hardware Version` resource in the OMA
	 *  LwM2M `Device` object (/3/0/18).
	 *
	 *  Null-terminated string of max 32 characters.
	 *
	 *   - By default the hardware_version is read from the modem, for example:
	 *     "nRF9161 LACA ADA".
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_HARDWARE_VERSION.
	 */
	const char *hardware_version;

	/** This configuration allows you to add a string to the `Software Version` resource in the
	 *  OMA LwM2M `Device` object (/3/0/19).
	 *  The string is added to the LwM2M Carrier library version and separated with a new line '\\n'.
	 *  This allows the application to indicate its version to the server
	 *  independently of the LwM2M carrier library version.
	 *
	 *  Null-terminated string of max 32 characters.
	 *
	 *   - By default the software_version contains only the LwM2M carrier library version, for
	 *     example: "LwM2M_carrier_1.2.3".
	 *   - For @ref LWM2M_CARRIER_SOFTBANK, ':' is used to separate the two strings in software_version.
	 *     and the LwM2M carrier library, for example "LwM2M_carrier_1.2.3:<my_app_version>"
	 *
	 *  @note using `lwm2m_carrier.c` this option can be set in kconfig by setting
	 *  CONFIG_LWM2M_CARRIER_SOFTWARE_VERSION.
	 */
	const char *software_version;

	/** LG U+ configuration, only required for devices certifying with
	 *  @ref LWM2M_CARRIER_LG_UPLUS.
	 */
	lwm2m_carrier_lg_uplus_config_t lg_uplus;
} lwm2m_carrier_config_t;

/**
 * LwM2M carrier library main function.
 *
 * @note This function is intended to run on a separate thread. The function will only exit
 *       on configuration errors and non-recoverable errors.
 *
 * @note The library does not copy the contents of pointers in the config parameters. The
 *       application has to make sure that the provided parameters are valid throughout the
 *       application lifetime (i.e. placed in static memory or in flash).
 *
 * @param[in] config Configuration parameters for the library. Optional.
 *
 * @retval  0      If library main function exited on an unrecoverable error or a deferred reboot.
 * @retval -EINVAL If configuration parameters are invalid. See @ref lwm2m_carrier_config_t
 * @retval -EFAULT If library failed due to an internal error.
 */
int lwm2m_carrier_main(const lwm2m_carrier_config_t *config);

/** @} */

/**
 * @defgroup lwm2m_carrier_api LwM2M carrier library API.
 *
 * This section describes the needed interaction between the LwM2M carrier library and the
 * user application.
 * @{
 */

/**
 * @anchor lwm2m_carrier_modem_init_values
 * @name LwM2M carrier library modem initialization results
 *
 * Used to pass on the modem update result in @ref lwm2m_carrier_on_modem_init().
 * @{
 */
/** Modem initialization successful. */
#define LWM2M_CARRIER_MODEM_INIT_SUCCESS        0
/** Modem firmware update successful. */
#define LWM2M_CARRIER_MODEM_INIT_UPDATED        1
/** Modem firmware update failed. */
#define LWM2M_CARRIER_MODEM_INIT_UPDATE_FAILED  2
/** @} */

/**
 * @anchor lwm2m_carrier_modem_mode_values
 * @name LwM2M carrier library modem functional modes.
 *
 * Used to pass on the modem functional mode in @ref lwm2m_carrier_on_modem_cfun().
 * @{
 */
/** Minimum functionality mode. */
#define LWM2M_CARRIER_MODEM_MODE_POWER_OFF        0
/** LTE services activated. */
#define LWM2M_CARRIER_MODEM_MODE_LTE_ACTIVATED    1
/** LTE services deactivated. */
#define LWM2M_CARRIER_MODEM_MODE_LTE_DEACTIVATED  2
/** @} */

/**
 * @anchor lwm2m_carrier_request_values
 * @name LwM2M carrier requests
 *
 * Used in @ref lwm2m_carrier_request().
 * @{
 */
/** Request a system reboot.*/
#define LWM2M_CARRIER_REQUEST_REBOOT     0
/** Indicate to the LwM2M carrier library that the application is about to go online.
 *  A @ref LWM2M_CARRIER_EVENT_LTE_LINK_UP will be generated once the library is ready.
 */
#define LWM2M_CARRIER_REQUEST_LINK_UP    1
/** indicate to the LwM2M carrier library that the application is about to go offline.
 *  A @ref LWM2M_CARRIER_EVENT_LTE_LINK_DOWN will be generated once the library is ready.
 */
#define LWM2M_CARRIER_REQUEST_LINK_DOWN  2
/** Schedule a register operation to all configured LwM2M servers. If the server is already
 *  registered, a registration update will be scheduled instead.
 *
 *  Only used for @ref LWM2M_CARRIER_SOFTBANK and @ref LWM2M_CARRIER_GENERIC.
 *  This is necessary if @ref lwm2m_carrier_config_t::disable_auto_register is set.
 */
#define LWM2M_CARRIER_REQUEST_REGISTER   3
/** Schedule a deregister operation to all connected LwM2M servers.
 *
 *  Only used for @ref LWM2M_CARRIER_SOFTBANK and @ref LWM2M_CARRIER_GENERIC.
 */
#define LWM2M_CARRIER_REQUEST_DEREGISTER 4
/** @} */

/**
 * LwM2M carrier library modem initialization handler.
 *
 * @param[in] result Modem initialization result @ref lwm2m_carrier_modem_init_values.
 *
 * This function must be called whenever the modem is initialized, as otherwise the device
 * management services will not be enabled.
 *
 * @note This is already implemented in `lwm2m_carrier.c`.
 */
void lwm2m_carrier_on_modem_init(int result);

/**
 * LwM2M carrier library modem functional mode handler.
 *
 * @param[in] mode Modem functional mode @ref lwm2m_carrier_modem_mode_values.
 *
 * This function must be called whenever modem functional mode is changed.
 *
 * @note This is already implemented in `lwm2m_carrier.c`.
 */
void lwm2m_carrier_on_modem_cfun(int mode);

/**
 * LwM2M carrier library modem shutdown handler.
 *
 * This function must be called whenever the modem is shut down, as it will shut down the device
 * management services.
 *
 * @note This is already implemented in `lwm2m_carrier.c`.
 */
void lwm2m_carrier_on_modem_shutdown(void);

/**
 * Request the LwM2M carrier library to perform an action.
 *
 * This function will behave differently depending on the chosen @c request.
 *
 * @param[in] request @ref lwm2m_carrier_request_values to be sent to the LwM2M carrier library.
 *
 * @retval  0        If all requests were scheduled successfully.
 * @retval -EINVAL   If an invalid @c request was selected.
 * @retval -EPERM    If the selected @c request is not supported for the carrier.
 * @retval -EBADR    If the selected @c request was not scheduled.
 * @retval -EALREADY If a registration was requested when a registration was already scheduled.
 */
int lwm2m_carrier_request(int request);

/**
 * Schedule an OMA LwM2M `Send` operation for a resource. This will push an update of a value to the
 * server without the server needing to observe or read the resource.
 *
 * This operation is only supported for resources of the OMA LwM2M `Opaque` type.
 *
 * @param[in]  path     The path of the resource or resource instance to be sent. The path contains
 *                      the object id, object instance id, resource id and resource instance id in
 *                      order.
 * @param[in]  path_len The length of the path. Must be 3 or 4.
 *
 * @retval  0           If the data has been scheduled to be sent successfully.
 * @retval -EPERM       If the operation was attempted on a resource that is not readable.
 * @retval -ENOENT      If the path points to something that is not yet initialized.
 * @retval -EINVAL      If the operation was attempted on an unsupported resource.
 * @retval -EINPROGRESS If the operation was attempted while a send request was already in progress.
 * @retval -ECANCELED   If the Mute Send resource is enabled for the LwM2M server.
 */
int lwm2m_carrier_data_send(const uint16_t *path, uint8_t path_len);

/**
 * Initialize the LwM2M carrier library with a custom configuration.
 *
 * This function supplies the application with the @c config generated by Kconfig. This allows
 * the application to inject or change configurations.
 * The LwM2M shell and Serial LTE Modem application use this function to make the LwM2M configuration
 * run-time configurable.
 *
 * @note A weak version of this function is supplied in lwm2m_carrier.c that does not change any
 *       configurations.
 *
 * @param[in] config Configuration parameters for the library.
 */
int lwm2m_carrier_custom_init(lwm2m_carrier_config_t *config);

/** @} */

/**
 * @defgroup lwm2m_carrier_objects LwM2M carrier library objects
 *
 * This section describes commands to interact with values set in LwM2M objects in the carrier
 * library. This allows you to communicate information to the LwM2M server.
 * @{
 */

/**
 * @anchor lwm2m_carrier_object_values
 * @name LwM2M carrier library app data container objects
 *
 * Used in @ref lwm2m_carrier_app_data_set() and @ref lwm2m_carrier_event_app_data_t to identify the
 * application date object.
 * @{
 */
/** Object identifier for OMA LwM2M `BinaryAppDataContainer` Object (/19).
 *
 *  Available in @ref LWM2M_CARRIER_SOFTBANK and @ref LWM2M_CARRIER_GENERIC.
 */
#define LWM2M_CARRIER_OBJECT_BINARY_APP_DATA_CONTAINER 19
/** Object identifier for Huawei LwM2M `App Data Container` Object (/10250).
 *
 *  Available in @ref LWM2M_CARRIER_LG_UPLUS.
 */
#define LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER        10250
/** @} */

/**
 * @anchor lwm2m_carrier_power_source_values
 * @name LwM2M device available power sources
 *
 * Values for the OMA LwM2M `Device` object `Available Power Sources` resource (/3/0/6).
 * Set using @ref lwm2m_carrier_avail_power_sources_set().
 * @{
 */
#define LWM2M_CARRIER_POWER_SOURCE_DC		    0
#define LWM2M_CARRIER_POWER_SOURCE_INTERNAL_BATTERY 1
#define LWM2M_CARRIER_POWER_SOURCE_EXTERNAL_BATTERY 2
#define LWM2M_CARRIER_POWER_SOURCE_ETHERNET	    4
#define LWM2M_CARRIER_POWER_SOURCE_USB		    5
#define LWM2M_CARRIER_POWER_SOURCE_AC		    6
#define LWM2M_CARRIER_POWER_SOURCE_SOLAR	    7
/** @} */

/**
 * @anchor lwm2m_carrier_error_code_values
 * @name LwM2M device error codes
 *
 * Values for the OMA LwM2M `Device` object `Error Code` resource (/3/0/11).
 *
 * Set using @ref lwm2m_carrier_error_code_add() and cleared using @ref
 * lwm2m_carrier_error_code_remove().
 * @{
 */
#define LWM2M_CARRIER_ERROR_CODE_NO_ERROR		 0
#define LWM2M_CARRIER_ERROR_CODE_LOW_CHARGE		 1
#define LWM2M_CARRIER_ERROR_CODE_EXTERNAL_SUPPLY_OFF	 2
#define LWM2M_CARRIER_ERROR_CODE_GPS_FAILURE		 3
#define LWM2M_CARRIER_ERROR_CODE_LOW_SIGNAL		 4
#define LWM2M_CARRIER_ERROR_CODE_OUT_OF_MEMORY		 5
#define LWM2M_CARRIER_ERROR_CODE_SMS_FAILURE		 6
#define LWM2M_CARRIER_ERROR_CODE_IP_CONNECTIVITY_FAILURE 7
#define LWM2M_CARRIER_ERROR_CODE_PERIPHERAL_MALFUNCTION	 8
/** @} */

/**
 * @anchor lwm2m_carrier_battery_status_values
 * @name LwM2M device battery status
 *
 * Values for the OMA LwM2M `Device` object `Battery Status` resource (/3/0/20).
 *
 * Set using @ref lwm2m_carrier_battery_status_set().
 *
 * @note The battery status resource is only relevant if @ref lwm2m_carrier_power_source_values has
 * been set to @ref LWM2M_CARRIER_POWER_SOURCE_INTERNAL_BATTERY.
 * @{
 */
#define LWM2M_CARRIER_BATTERY_STATUS_NORMAL	     0
#define LWM2M_CARRIER_BATTERY_STATUS_CHARGING	     1
#define LWM2M_CARRIER_BATTERY_STATUS_CHARGE_COMPLETE 2
#define LWM2M_CARRIER_BATTERY_STATUS_DAMAGED	     3
#define LWM2M_CARRIER_BATTERY_STATUS_LOW_BATTERY     4
#define LWM2M_CARRIER_BATTERY_STATUS_NOT_INSTALLED   5
#define LWM2M_CARRIER_BATTERY_STATUS_UNKNOWN	     6
/** @} */

/**
 * @anchor lwm2m_carrier_portfolio_identity_values
 * @name LwM2M portfolio identity types
 *
 * Resource instance identifiers (y) for the OMA LwM2M `Portfolio` object `Identity` resource
 * (/16/x/0/y).
 *
 * Used in @ref lwm2m_carrier_identity_read() and @ref lwm2m_carrier_identity_write().
 * @{
 */
#define LWM2M_CARRIER_IDENTITY_ID	    0
#define LWM2M_CARRIER_IDENTITY_MANUFACTURER 1
#define LWM2M_CARRIER_IDENTITY_MODEL	    2
#define LWM2M_CARRIER_IDENTITY_SW_VERSION   3
/** @} */

/**
 * Read all time parameters.
 *
 * Input NULL for the parameters to ignore.
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will read the
 *       time from modem.
 *
 * @param[out] utc_time   Pointer to time since Epoch in seconds.
 * @param[out] utc_offset Pointer to UTC offset in minutes.
 * @param[out] tz         Pointer to null-terminated timezone string pointer.
 */
void lwm2m_carrier_time_read(int32_t *utc_time, int *utc_offset, const char **tz);

/**
 * Read the OMA LwM2M `Device` object `Current Time` resource (/3/0/13).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will read the
 *       time from modem.
 *
 * @return  Current UTC time since Epoch in seconds.
 */
int32_t lwm2m_carrier_utc_time_read(void);

/**
 * Read the OMA LwM2M `Device` object `UTC Offset` resource (/3/0/14).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will read the
 *       offset from modem.
 *
 * @return  UTC offset in minutes.
 */
int lwm2m_carrier_utc_offset_read(void);

/**
 * Read of the OMA LwM2M `Device` object `Timezone` resource (/3/0/15).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will read the
 *       timezone from modem.
 *
 * @return  Null-terminated timezone string pointer, IANA Timezone (TZ) database format.
 */
char *lwm2m_carrier_timezone_read(void);

/**
 * Write to the OMA LwM2M `Device` object `Current Time` resource (/3/0/13).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will write the
 *       time to modem.
 *
 * @param[in] time Time since Epoch in seconds.
 *
 * @retval  0      If success.
 */
int lwm2m_carrier_utc_time_write(int32_t time);

/**
 * Write to the OMA LwM2M `Device` object `UTC Offset` resource (/3/0/14).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will write the
 *       offset to modem.
 *
 * @param[in] offset UTC offset in minutes.
 *
 * @retval  0      If success.
 */
int lwm2m_carrier_utc_offset_write(int offset);

/**
 * Write to the OMA LwM2M `Device` object `Timezone` resource (/3/0/15).
 *
 * @note This function can be implemented by the application, if custom time management is needed.
 *       A `__weak` implementation is included inside the LwM2M carrier library which will write the
 *       timezone to modem.
 *
 * @param[in] tz Null-terminated time zone string pointer.
 *
 * @retval 0      If success.
 */
int lwm2m_carrier_timezone_write(const char *tz);

/**
 * Set the OMA LwM2M `Device` object `Available Power Sources` resource (/3/0/6).
 *
 * It is necessary to call this function before any other device power source related functions
 * listed in this file, as any updates of voltage/current measurements performed on power sources
 * that have not been reported will be discarded.
 * Upon consecutive calls of this function, the corresponding current and voltage measurements
 * will be reset to 0. Similarly, the battery status will be set to UNKNOWN and the battery level to
 * 0%.
 *
 * - The default value of this resource is \ref LWM2M_CARRIER_POWER_SOURCE_DC.
 *
 * @param[in]  power_sources      Array of available @ref lwm2m_carrier_power_source_values.
 * @param[in]  power_source_count Number of power sources currently used by the device.
 *
 * @retval  0      If the available power sources have been set successfully.
 * @retval -E2BIG  If the reported number of power sources is bigger than the maximum supported.
 * @retval -EINVAL If one or more of the power sources are not supported.
 * @retval -ENOENT If LwM2M object is not initialized yet.
 */
int lwm2m_carrier_avail_power_sources_set(const uint8_t *power_sources, uint8_t power_source_count);

/**
 * Set the OMA LwM2M `Device` object `Power Source Voltage` resource (/3/0/7).
 *
 * The power source source needs to be enabled first using @ref
 * lwm2m_carrier_avail_power_sources_set().
 *
 * - The default value of this resource is 0 (mV).
 *
 * @param[in]  power_source Power source to which the measurement corresponds.
 * @param[in]  value        Voltage measurement expressed in millivolt (mV).
 *
 * @retval  0      If the voltage measurements have been updated successfully.
 * @retval -EINVAL If the power source is not supported.
 * @retval -ENODEV If the power source is not listed as an available power source.
 */
int lwm2m_carrier_power_source_voltage_set(uint8_t power_source, int32_t value);

/**
 * Set the OMA LwM2M `Device` object `Power Source Current` resource (/3/0/8).
 *
 * The power source source needs to be enabled first using @ref
 * lwm2m_carrier_avail_power_sources_set().
 *
 * - The default value of this resource is 0 (mA).
 *
 * @param[in]  power_source Power source to which the measurement corresponds.
 * @param[in]  value        Current measurement expressed in milliampere (mA).
 *
 * @retval  0      If the current measurements have been updated successfully.
 * @retval -EINVAL If the power source is not supported.
 * @retval -ENODEV If the power source is not listed as an available power source.
 */
int lwm2m_carrier_power_source_current_set(uint8_t power_source, int32_t value);

/**
 * Set the OMA LwM2M `Device` object `Battery Level` resource (/3/0/9).
 *
 * @ref LWM2M_CARRIER_POWER_SOURCE_INTERNAL_BATTERY needs to be enabled first using @ref
 * lwm2m_carrier_avail_power_sources_set().
 *
 * - The default value of this resource is 0 (%).
 *
 * @param[in]  battery_level Internal battery level percentage (0-100).
 *
 * @retval  0      If the battery level has been updated successfully.
 * @retval -EINVAL If the specified battery level lies outside the 0-100% range.
 * @retval -ENODEV If internal battery is not listed as an available power source.
 */
int lwm2m_carrier_battery_level_set(uint8_t battery_level);

/**
 * Set the OMA LwM2M `Device` object `Battery Status` resource (/3/0/20).
 *
 * @ref LWM2M_CARRIER_POWER_SOURCE_INTERNAL_BATTERY needs to be enabled first using @ref
 * lwm2m_carrier_avail_power_sources_set().
 *
 * - The default value of this resource is \ref LWM2M_CARRIER_BATTERY_STATUS_NOT_INSTALLED.
 *
 * @param[in]  battery_status Internal battery status to be reported (@ref
 *                            lwm2m_carrier_battery_status_values).
 *
 * @retval  0      If the battery status has been updated successfully.
 * @retval -EINVAL If the battery status is not supported.
 * @retval -ENODEV If internal battery is not listed as an available power source.
 */
int lwm2m_carrier_battery_status_set(int32_t battery_status);

/**
 * Set an error code in the OMA LwM2M `Device` object `Error Code` resource (/3/0/11).
 *
 * At startup the error code is specified as 0, indicating no error. The error code is to be updated
 * whenever a new error occurs. Or after an @ref LWM2M_CARRIER_EVENT_ERROR_CODE_RESET event if the
 * error code is still valid. Multiple error codes can be set, if the reported error is already
 * present, the error code will remain unchanged.
 *
 * - The default value of this resource is \ref LWM2M_CARRIER_ERROR_CODE_NO_ERROR
 *
 * @param[in]  error Individual error to be added (@ref lwm2m_carrier_error_code_values)
 *                   @ref LWM2M_CARRIER_ERROR_CODE_NO_ERROR will reset all error codes.
 *
 * @retval  0      If the error code has been added successfully.
 * @retval -EINVAL If the error code is not supported.
 * @retval -ENOENT If LwM2M object is not initialized yet.
 */
int lwm2m_carrier_error_code_add(int32_t error);

/**
 * Clear an error code in the OMA LwM2M `Device` object `Error Code` resource (/3/0/11).
 *
 * @param[in]  error Individual error code to be removed (@ref lwm2m_carrier_error_code_values).
 *
 * @retval  0      If the error has been removed successfully.
 * @retval -EINVAL If the error code is not supported.
 * @retval -ENOENT If the error to be removed is not present on the error code list.
 */
int lwm2m_carrier_error_code_remove(int32_t error);

/**
 * Set the OMA LwM2M `Device` object `Memory Total` resource (/3/0/21).
 *
 * - The default value of this resource is 0 (kB).
 *
 * @param[in]  memory_total Total amount of storage space in kilobytes (kB).
 *
 * @retval  0      If the total amount of storage space has been set successfully.
 * @retval -EINVAL If the reported value is bigger than INT32_MAX.
 */
int lwm2m_carrier_memory_total_set(uint32_t memory_total);

/**
 * Read the OMA LwM2M `Device` object `Memory Free` resource (/3/0/10).
 *
 * @note This function must be implemented by the application in order to support the reporting of
 *       memory free, otherwise the returned value will be 0.
 *
 * @return  Available amount of storage space expressed in kilobytes (kB).
 */
int lwm2m_carrier_memory_free_read(void);

/**
 * Read an identity in the OMA LwM2M `Portfolio` object `Identity` resource
 * (/16/@c instance_id /0/@c identity_type ).
 *
 * @note If the provided buffer is NULL, the function will perform a dry run to determine the
 *       required buffer size (including the null terminator).
 *
 * @param[in]     instance_id   Portfolio object instance identifier.
 * @param[in]     identity_type Type of Identity field to be read (@ref
 *                              lwm2m_carrier_portfolio_identity_values).
 * @param[inout]  buffer        Buffer where the null-terminated response will be stored.
 * @param[inout]  buffer_len    Length of the provided buffer. Will return the number of bytes of
 *                              the full response.
 *
 * @retval  0      If the operation was successful.
 * @retval -ENOENT If the instance does not exist.
 * @retval -EINVAL If the provided buffer length reference is NULL or the identity type is invalid.
 * @retval -ENOMEM If the provided buffer is too small.
 */
int lwm2m_carrier_identity_read(uint16_t instance_id, uint16_t identity_type, char *buffer,
				uint16_t *buffer_len);

/**
 * Set an identity in the OMA LwM2M `Portfolio` object `Identity` resource
 * (/16/@c instance_id /0/@c identity_type ).
 *
 * @param[in]  instance_id   Portfolio object instance identifier.
 * @param[in]  identity_type Type of Identity field to be written. (@ref
 *                           lwm2m_carrier_portfolio_identity_values).
 * @param[in]  value         Null terminated string to be written into the Identity field.
 *
 * @retval  0      If the Identity field has been updated successfully.
 * @retval -EPERM  If the specified object instance ID corresponds to the Primary Host identity.
 * @retval -EINVAL If the input argument is a NULL pointer or an empty string, or the identity type
 *                 is invalid.
 * @retval -ENOENT If the instance does not exist.
 * @retval -E2BIG  If the input string is too long.
 * @retval -ENOMEM If it was not possible to allocate memory storage to hold the string.
 */
int lwm2m_carrier_identity_write(uint16_t instance_id, uint16_t identity_type, const char *value);

/**
 * Create a new instance in the OMA LwM2M `Portfolio` object (/16/@c instance_id ).
 *
 * @param[in]  instance_id    The identifier to be used for the new instance.
 *
 * @retval  0      If the instance has been created successfully.
 * @retval -ENOENT If the object is not yet initialized.
 * @retval -ENOMEM If it was not possible to create the instance because the maximum number of
 *                 supported object instances has already been reached.
 * @retval -EINVAL If the provided instance identifier is already in use.
 */
int lwm2m_carrier_portfolio_instance_create(uint16_t instance_id);

/**
 * Set your location in the OMA LwM2M `Location` object (/6/0).
 *
 * - The default all resource values of this object are set to 0.
 *
 * @param[in]  latitude    Latitude (/6/0/0) in degrees. Must be between -90.0 and 90.0.
 * @param[in]  longitude   Longitude (/6/0/1) in degrees. Must be between -180.0 and 180.0.
 * @param[in]  altitude    Altitude (/6/0/2) is meters over sea level.
 * @param[in]  timestamp   Unix timestamp of the current GPS measurement (/6/0/5).
 *                         Must not be older than the previous timestamp passed to this function.
 * @param[in]  uncertainty Positioning uncertainty given as a radius in meters (/6/0/3).
 *
 * @retval  0      If the location data has been updated successfully.
 * @retval -EINVAL If at least one input argument is incorrect.
 * @retval -ENOENT If the object is not yet initialized.
 */
int lwm2m_carrier_location_set(double latitude, double longitude, float altitude,
			       uint32_t timestamp, float uncertainty);

/**
 * Set the OMA LwM2M `Location` object `Velocity` resource (/6/0/4).
 * The `Speed` resource (/6/0/6) will be calculated from @c speed_h and * @c speed_v.
 *
 * Optional float arguments shall be set to NAN if they are not available to the user.
 *
 * @param[in]  heading       Horizontal direction of movement in degrees clockwise from North.
 *                           Valid range is 0 to 359.
 * @param[in]  speed_h       Horizontal speed in meters per second. Must be non-negative.
 * @param[in]  speed_v       Optional. Vertical speed in meters per second. Positive value indicates
 *                           upward motion. Negative value indicates downward motion.
 * @param[in]  uncertainty_h Optional. Horizontal uncertainty speed, i.e. maximal deviation from
 *                           the true speed, given in meters per second. Must be non-negative.
 * @param[in]  uncertainty_v Optional. Vertical uncertainty speed in meters per second.
 *                           Must be non-negative.
 *
 * @retval  0      If the velocity data has been updated successfully.
 * @retval -EINVAL If at least one input argument is incorrect.
 * @retval -ENOENT If the object is not yet initialized.
 * @retval -ENOMEM If it was not possible to allocate memory storage to hold the velocity data.
 */
int lwm2m_carrier_velocity_set(int heading, float speed_h, float speed_v, float uncertainty_h,
			       float uncertainty_v);

/**
 * Set application data in either the OMA LwM2M `BinaryAppDataContainer` Object (/19/x/1/y),
 * or the Huawei LwM2M `App Data Container` Object (/10250/0/1).
 *
 * This function sets the resource given by the path to the desired value. The resource can then be
 * read by, or reported to, the LwM2M Server.
 *
 * @note @ref LWM2M_CARRIER_OBJECT_BINARY_APP_DATA_CONTAINER is available in
 *       @ref LWM2M_CARRIER_SOFTBANK and @ref LWM2M_CARRIER_GENERIC.
 *       @ref LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER is available in @ref LWM2M_CARRIER_LG_UPLUS.
 *
 * @param[in]  path       The path of the resource or resource instance which is to be set. The path
 *                        contains in order:
 *                          - The object id (@ref lwm2m_carrier_object_values).
 *                          - The object instance id. 0 for
 *                            @ref LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER.
 *                          - The resource id. Always 1.
 *                          - The resource instance id. Not needed for
 *                            @ref LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER.
 * @param[in]  path_len   The length of the path. Must be:
 *                          - 3 for @ref LWM2M_CARRIER_OBJECT_APP_DATA_CONTAINER.
 *                          - 4 for @ref LWM2M_CARRIER_OBJECT_BINARY_APP_DATA_CONTAINER.
 * @param[in]  buffer     Buffer containing the application data to be set. If this is set to null
 *                        the resource instance is deleted instead when using the Binary App Data
 *                        Container object.
 * @param[in]  buffer_len Number of bytes in the buffer.
 *
 * @retval  0      If the resource has been set successfully.
 * @retval -ENOENT If the object is not initialized.
 * @retval -EINVAL If at least one input argument is incorrect.
 * @retval -ENOMEM If there is not enough memory to copy the buffer contents to the resource model.
 */
int lwm2m_carrier_app_data_set(const uint16_t *path, uint16_t path_len, const uint8_t *buffer,
			       size_t buffer_len);

/**
 * Set the OMA LwM2M `Event Log` object `LogData` resource (/20/0/4014).
 *
 * @note The `Event Log` object is only available in @ref LWM2M_CARRIER_SOFTBANK and
 *       @ref LWM2M_CARRIER_GENERIC.
 *
 * @param[in]  buffer     Buffer containing the log data to be set.
 * @param[in]  buffer_len Number of bytes in the buffer.
 *
 * @retval  0      If the resource has been set successfully.
 * @retval -ENOENT If the object is not yet initialized.
 * @retval -EINVAL If the buffer is NULL.
 * @retval -ENOMEM If there is not enough memory to copy the buffer contents to the resource model.
 */
int lwm2m_carrier_log_data_set(const uint8_t *buffer, size_t buffer_len);

#ifdef __cplusplus
}
#endif

/** @} */

#endif /* LWM2M_CARRIER_H__ */
